// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsDisabled ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsDisabled = LoadVariable ( 12_SciDed_1 , false ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// CreateNature ;
 111: CALL 1579 0 0
// PrepareDifficulty ;
 115: CALL 1875 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 885 0 0
// PrepareRussianBase ;
 127: CALL 1128 0 0
// PrepareCommander ;
 131: CALL 1070 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13f_ ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_STRING 13f_
 596: PPUSH
 597: CALL 29870 0 3
 601: ST_TO_ADDR
// if debugMode then
 602: LD_EXP 16
 606: IFFALSE 621
// JMM := NewCharacter ( JMM ) ;
 608: LD_ADDR_EXP 1
 612: PUSH
 613: LD_STRING JMM
 615: PPUSH
 616: CALL_OW 25
 620: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 621: LD_EXP 1
 625: PPUSH
 626: LD_INT 95
 628: PPUSH
 629: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 633: LD_EXP 1
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ,  ) ;
 645: LD_ADDR_EXP 5
 649: PUSH
 650: LD_STRING Powell
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: LD_STRING 
 658: PPUSH
 659: CALL 29870 0 3
 663: ST_TO_ADDR
// uc_side = 4 ;
 664: LD_ADDR_OWVAR 20
 668: PUSH
 669: LD_INT 4
 671: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 10c_ ) ;
 672: LD_ADDR_EXP 2
 676: PUSH
 677: LD_STRING Joan
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_STRING 10c_
 685: PPUSH
 686: CALL 29870 0 3
 690: ST_TO_ADDR
// if Joan then
 691: LD_EXP 2
 695: IFFALSE 734
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 697: LD_EXP 2
 701: PPUSH
 702: LD_INT 4
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 712: LD_EXP 2
 716: PPUSH
 717: LD_INT 4
 719: PPUSH
 720: CALL_OW 336
// JMMGirl = 1 ;
 724: LD_ADDR_EXP 7
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// end else
 732: GO 794
// begin Lisa = PrepareUnit ( Lisa , true , 13s_ ) ;
 734: LD_ADDR_EXP 3
 738: PUSH
 739: LD_STRING Lisa
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_STRING 13s_
 747: PPUSH
 748: CALL 29870 0 3
 752: ST_TO_ADDR
// if Lisa then
 753: LD_EXP 3
 757: IFFALSE 794
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 4
 766: PPUSH
 767: LD_INT 0
 769: PPUSH
 770: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 774: LD_EXP 3
 778: PPUSH
 779: LD_INT 1
 781: PPUSH
 782: CALL_OW 336
// JMMGirl = 2 ;
 786: LD_ADDR_EXP 7
 790: PUSH
 791: LD_INT 2
 793: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 794: LD_EXP 2
 798: NOT
 799: PUSH
 800: LD_EXP 3
 804: NOT
 805: AND
 806: IFFALSE 856
// begin Connie = NewCharacter ( Coonie ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Coonie
 815: PPUSH
 816: CALL_OW 25
 820: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 836: LD_EXP 4
 840: PPUSH
 841: LD_INT 3
 843: PPUSH
 844: CALL_OW 336
// JMMGirl = 3 ;
 848: LD_ADDR_EXP 7
 852: PUSH
 853: LD_INT 3
 855: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 856: LD_EXP 2
 860: PUSH
 861: LD_EXP 3
 865: PUSH
 866: LD_EXP 4
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: PPUSH
 876: CALL_OW 140
// end ;
 880: LD_VAR 0 1
 884: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// for i = 1 to 5 do
 890: LD_ADDR_VAR 0 2
 894: PUSH
 895: DOUBLE
 896: LD_INT 1
 898: DEC
 899: ST_TO_ADDR
 900: LD_INT 5
 902: PUSH
 903: FOR_TO
 904: IFFALSE 1063
// begin vc_engine = rand ( 1 , 3 ) ;
 906: LD_ADDR_OWVAR 39
 910: PUSH
 911: LD_INT 1
 913: PPUSH
 914: LD_INT 3
 916: PPUSH
 917: CALL_OW 12
 921: ST_TO_ADDR
// vc_control = control_remote ;
 922: LD_ADDR_OWVAR 38
 926: PUSH
 927: LD_INT 2
 929: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 930: LD_ADDR_OWVAR 40
 934: PUSH
 935: LD_INT 5
 937: PUSH
 938: LD_INT 12
 940: PUSH
 941: LD_INT 13
 943: PUSH
 944: LD_INT 7
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_VAR 0 2
 957: PUSH
 958: LD_INT 4
 960: MOD
 961: PUSH
 962: LD_INT 1
 964: PLUS
 965: ARRAY
 966: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 967: LD_ADDR_OWVAR 37
 971: PUSH
 972: LD_INT 3
 974: PUSH
 975: LD_INT 2
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: LD_INT 2
 989: MOD
 990: PUSH
 991: LD_INT 1
 993: PLUS
 994: ARRAY
 995: ST_TO_ADDR
// veh = CreateVehicle ;
 996: LD_ADDR_VAR 0 3
1000: PUSH
1001: CALL_OW 45
1005: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: LD_INT 5
1016: PPUSH
1017: CALL_OW 12
1021: PPUSH
1022: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1026: LD_VAR 0 3
1030: PPUSH
1031: LD_INT 500
1033: PPUSH
1034: LD_INT 1000
1036: PPUSH
1037: CALL_OW 12
1041: PPUSH
1042: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1046: LD_VAR 0 3
1050: PPUSH
1051: LD_INT 15
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ;
1061: GO 903
1063: POP
1064: POP
// end ; end_of_file
1065: LD_VAR 0 1
1069: RET
// export function PrepareCommander ; begin
1070: LD_INT 0
1072: PPUSH
// uc_side := 3 ;
1073: LD_ADDR_OWVAR 20
1077: PUSH
1078: LD_INT 3
1080: ST_TO_ADDR
// uc_nation := 3 ;
1081: LD_ADDR_OWVAR 21
1085: PUSH
1086: LD_INT 3
1088: ST_TO_ADDR
// Eisenstein := PrepareUnit ( Eisenstein , false ,  ) ;
1089: LD_ADDR_EXP 6
1093: PUSH
1094: LD_STRING Eisenstein
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 29870 0 3
1107: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1108: LD_EXP 6
1112: PPUSH
1113: LD_INT 11
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: CALL_OW 49
// end ;
1123: LD_VAR 0 1
1127: RET
// export baseGuard ; export function PrepareRussianBase ; var i ; begin
1128: LD_INT 0
1130: PPUSH
1131: PPUSH
// uc_nation := 3 ;
1132: LD_ADDR_OWVAR 21
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// uc_side := 3 ;
1140: LD_ADDR_OWVAR 20
1144: PUSH
1145: LD_INT 3
1147: ST_TO_ADDR
// if Difficulty > 1 then
1148: LD_OWVAR 67
1152: PUSH
1153: LD_INT 1
1155: GREATER
1156: IFFALSE 1220
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1158: LD_INT 1
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: LD_INT 8
1166: PUSH
1167: LD_INT 8
1169: PUSH
1170: LD_INT 9
1172: PUSH
1173: LD_INT 10
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_OWVAR 67
1186: ARRAY
1187: PPUSH
1188: CALL_OW 380
// baseGuard := CreateHuman ;
1192: LD_ADDR_EXP 18
1196: PUSH
1197: CALL_OW 44
1201: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1202: LD_EXP 18
1206: PPUSH
1207: LD_INT 39
1209: PPUSH
1210: LD_INT 67
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 48
// end ; if russianRocketsDisabled then
1220: LD_EXP 14
1224: IFFALSE 1312
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ] ) do
1226: LD_ADDR_VAR 0 2
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 3
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 2
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: LD_INT 33
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 30
1256: PUSH
1257: LD_INT 32
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PPUSH
1273: CALL_OW 69
1277: PUSH
1278: FOR_IN
1279: IFFALSE 1310
// if GetBWeapon ( i ) = ru_rocket then
1281: LD_VAR 0 2
1285: PPUSH
1286: CALL_OW 269
1290: PUSH
1291: LD_INT 47
1293: EQUAL
1294: IFFALSE 1308
// PlaceWeaponTurret ( i , ru_rocket_launcher ) ;
1296: LD_VAR 0 2
1300: PPUSH
1301: LD_INT 45
1303: PPUSH
1304: CALL_OW 431
1308: GO 1278
1310: POP
1311: POP
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1312: LD_INT 116
1314: PPUSH
1315: LD_INT 50
1317: PPUSH
1318: LD_INT 74
1320: PPUSH
1321: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1325: LD_INT 3
1327: PPUSH
1328: LD_INT 3
1330: PPUSH
1331: LD_INT 45
1333: PPUSH
1334: LD_INT 10
1336: PPUSH
1337: LD_INT 9
1339: PPUSH
1340: LD_INT 2
1342: PPUSH
1343: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1347: LD_INT 3
1349: PPUSH
1350: LD_INT 3
1352: PPUSH
1353: LD_INT 22
1355: PPUSH
1356: LD_INT 10
1358: PPUSH
1359: LD_INT 2
1361: PPUSH
1362: LD_INT 2
1364: PPUSH
1365: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1369: LD_INT 3
1371: PPUSH
1372: LD_INT 3
1374: PPUSH
1375: LD_INT 1
1377: PPUSH
1378: LD_INT 10
1380: PPUSH
1381: LD_INT 3
1383: PPUSH
1384: LD_INT 3
1386: PPUSH
1387: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1391: LD_INT 3
1393: PPUSH
1394: LD_INT 3
1396: PPUSH
1397: LD_INT 40
1399: PPUSH
1400: LD_INT 10
1402: PPUSH
1403: LD_INT 3
1405: PPUSH
1406: LD_INT 3
1408: PPUSH
1409: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1413: LD_INT 3
1415: PPUSH
1416: LD_INT 3
1418: PPUSH
1419: LD_INT 14
1421: PPUSH
1422: LD_INT 10
1424: PPUSH
1425: LD_INT 4
1427: PPUSH
1428: LD_INT 1
1430: PPUSH
1431: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1435: LD_INT 3
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: LD_INT 15
1443: PPUSH
1444: LD_INT 10
1446: PPUSH
1447: LD_INT 4
1449: PPUSH
1450: LD_INT 2
1452: PPUSH
1453: CALL 1765 0 6
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , [ 3500 , 4500 , 6000 , 9000 ] [ Difficulty ] ) ;
1457: LD_INT 22
1459: PPUSH
1460: CALL_OW 274
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: LD_INT 3500
1470: PUSH
1471: LD_INT 4500
1473: PUSH
1474: LD_INT 6000
1476: PUSH
1477: LD_INT 9000
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_OWVAR 67
1490: ARRAY
1491: PPUSH
1492: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , [ 500 , 1000 , 2000 , 3000 ] [ Difficulty ] ) ;
1496: LD_INT 22
1498: PPUSH
1499: CALL_OW 274
1503: PPUSH
1504: LD_INT 2
1506: PPUSH
1507: LD_INT 500
1509: PUSH
1510: LD_INT 1000
1512: PUSH
1513: LD_INT 2000
1515: PUSH
1516: LD_INT 3000
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: PUSH
1525: LD_OWVAR 67
1529: ARRAY
1530: PPUSH
1531: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_siberit , [ 150 , 250 , 300 , 450 ] [ Difficulty ] ) ;
1535: LD_INT 22
1537: PPUSH
1538: CALL_OW 274
1542: PPUSH
1543: LD_INT 3
1545: PPUSH
1546: LD_INT 150
1548: PUSH
1549: LD_INT 250
1551: PUSH
1552: LD_INT 300
1554: PUSH
1555: LD_INT 450
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: PUSH
1564: LD_OWVAR 67
1568: ARRAY
1569: PPUSH
1570: CALL_OW 277
// end ; end_of_file
1574: LD_VAR 0 1
1578: RET
// export function CreateNature ; var i ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// uc_side := 0 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 0
1590: ST_TO_ADDR
// uc_nation := 0 ;
1591: LD_ADDR_OWVAR 21
1595: PUSH
1596: LD_INT 0
1598: ST_TO_ADDR
// hc_class := class_apeman ;
1599: LD_ADDR_OWVAR 28
1603: PUSH
1604: LD_INT 12
1606: ST_TO_ADDR
// hc_gallery :=  ;
1607: LD_ADDR_OWVAR 33
1611: PUSH
1612: LD_STRING 
1614: ST_TO_ADDR
// hc_name :=  ;
1615: LD_ADDR_OWVAR 26
1619: PUSH
1620: LD_STRING 
1622: ST_TO_ADDR
// for i = 1 to 7 do
1623: LD_ADDR_VAR 0 2
1627: PUSH
1628: DOUBLE
1629: LD_INT 1
1631: DEC
1632: ST_TO_ADDR
1633: LD_INT 7
1635: PUSH
1636: FOR_TO
1637: IFFALSE 1718
// begin hc_class := class_apeman ;
1639: LD_ADDR_OWVAR 28
1643: PUSH
1644: LD_INT 12
1646: ST_TO_ADDR
// hc_gallery :=  ;
1647: LD_ADDR_OWVAR 33
1651: PUSH
1652: LD_STRING 
1654: ST_TO_ADDR
// hc_name :=  ;
1655: LD_ADDR_OWVAR 26
1659: PUSH
1660: LD_STRING 
1662: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1663: LD_ADDR_OWVAR 31
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: LD_INT 0
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1686: LD_ADDR_OWVAR 29
1690: PUSH
1691: LD_INT 11
1693: PUSH
1694: LD_INT 10
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1701: CALL_OW 44
1705: PPUSH
1706: LD_INT 16
1708: PPUSH
1709: LD_INT 0
1711: PPUSH
1712: CALL_OW 49
// end ;
1716: GO 1636
1718: POP
1719: POP
// end ;
1720: LD_VAR 0 1
1724: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1725: LD_INT 0
1727: PPUSH
1728: PPUSH
// for i in charactersList do
1729: LD_ADDR_VAR 0 4
1733: PUSH
1734: LD_VAR 0 1
1738: PUSH
1739: FOR_IN
1740: IFFALSE 1758
// SaveCharacters ( i , ident ) ;
1742: LD_VAR 0 4
1746: PPUSH
1747: LD_VAR 0 2
1751: PPUSH
1752: CALL_OW 38
1756: GO 1739
1758: POP
1759: POP
// end ;
1760: LD_VAR 0 3
1764: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
1769: PPUSH
1770: PPUSH
// for i = 1 to count do
1771: LD_ADDR_VAR 0 8
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_VAR 0 6
1785: PUSH
1786: FOR_TO
1787: IFFALSE 1868
// begin uc_side = side ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_VAR 0 1
1798: ST_TO_ADDR
// uc_nation = nation ;
1799: LD_ADDR_OWVAR 21
1803: PUSH
1804: LD_VAR 0 2
1808: ST_TO_ADDR
// hc_gallery =  ;
1809: LD_ADDR_OWVAR 33
1813: PUSH
1814: LD_STRING 
1816: ST_TO_ADDR
// hc_name =  ;
1817: LD_ADDR_OWVAR 26
1821: PUSH
1822: LD_STRING 
1824: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1825: LD_INT 0
1827: PPUSH
1828: LD_VAR 0 5
1832: PPUSH
1833: LD_VAR 0 4
1837: PPUSH
1838: CALL_OW 380
// un = CreateHuman ;
1842: LD_ADDR_VAR 0 10
1846: PUSH
1847: CALL_OW 44
1851: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1852: LD_VAR 0 10
1856: PPUSH
1857: LD_VAR 0 3
1861: PPUSH
1862: CALL_OW 52
// end ;
1866: GO 1786
1868: POP
1869: POP
// end ;
1870: LD_VAR 0 7
1874: RET
// export function PrepareDifficulty ; begin
1875: LD_INT 0
1877: PPUSH
// if difficulty = 1 then
1878: LD_OWVAR 67
1882: PUSH
1883: LD_INT 1
1885: EQUAL
1886: IFFALSE 1966
// begin SetTech ( 57 , 3 , state_disabled ) ;
1888: LD_INT 57
1890: PPUSH
1891: LD_INT 3
1893: PPUSH
1894: LD_INT 0
1896: PPUSH
1897: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1901: LD_INT 58
1903: PPUSH
1904: LD_INT 3
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1914: LD_INT 59
1916: PPUSH
1917: LD_INT 3
1919: PPUSH
1920: LD_INT 0
1922: PPUSH
1923: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1927: LD_INT 51
1929: PPUSH
1930: LD_INT 3
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1940: LD_INT 52
1942: PPUSH
1943: LD_INT 3
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1953: LD_INT 53
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 322
// end ; if difficulty = 2 then
1966: LD_OWVAR 67
1970: PUSH
1971: LD_INT 2
1973: EQUAL
1974: IFFALSE 2054
// begin SetTech ( 57 , 3 , state_enabled ) ;
1976: LD_INT 57
1978: PPUSH
1979: LD_INT 3
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1989: LD_INT 58
1991: PPUSH
1992: LD_INT 3
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
2002: LD_INT 59
2004: PPUSH
2005: LD_INT 3
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
2015: LD_INT 51
2017: PPUSH
2018: LD_INT 3
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2028: LD_INT 52
2030: PPUSH
2031: LD_INT 3
2033: PPUSH
2034: LD_INT 1
2036: PPUSH
2037: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
2041: LD_INT 53
2043: PPUSH
2044: LD_INT 3
2046: PPUSH
2047: LD_INT 0
2049: PPUSH
2050: CALL_OW 322
// end ; if difficulty >= 3 then
2054: LD_OWVAR 67
2058: PUSH
2059: LD_INT 3
2061: GREATEREQUAL
2062: IFFALSE 2142
// begin SetTech ( 57 , 3 , state_enabled ) ;
2064: LD_INT 57
2066: PPUSH
2067: LD_INT 3
2069: PPUSH
2070: LD_INT 1
2072: PPUSH
2073: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
2077: LD_INT 58
2079: PPUSH
2080: LD_INT 3
2082: PPUSH
2083: LD_INT 1
2085: PPUSH
2086: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
2090: LD_INT 59
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
2103: LD_INT 51
2105: PPUSH
2106: LD_INT 3
2108: PPUSH
2109: LD_INT 1
2111: PPUSH
2112: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2116: LD_INT 52
2118: PPUSH
2119: LD_INT 3
2121: PPUSH
2122: LD_INT 1
2124: PPUSH
2125: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
2129: LD_INT 53
2131: PPUSH
2132: LD_INT 3
2134: PPUSH
2135: LD_INT 1
2137: PPUSH
2138: CALL_OW 322
// end ; end ;
2142: LD_VAR 0 1
2146: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
2147: LD_INT 0
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
2153: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
2154: LD_ADDR_VAR 0 8
2158: PUSH
2159: LD_INT 48
2161: PUSH
2162: LD_INT 49
2164: PUSH
2165: LD_INT 50
2167: PUSH
2168: LD_INT 20
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: LD_INT 69
2176: PUSH
2177: LD_INT 39
2179: PUSH
2180: LD_INT 34
2182: PUSH
2183: LD_INT 40
2185: PUSH
2186: LD_INT 71
2188: PUSH
2189: LD_INT 57
2191: PUSH
2192: LD_INT 58
2194: PUSH
2195: LD_INT 44
2197: PUSH
2198: LD_INT 32
2200: PUSH
2201: LD_INT 27
2203: PUSH
2204: LD_INT 23
2206: PUSH
2207: LD_INT 33
2209: PUSH
2210: LD_INT 54
2212: PUSH
2213: LD_INT 55
2215: PUSH
2216: LD_INT 56
2218: PUSH
2219: LD_INT 63
2221: PUSH
2222: LD_INT 64
2224: PUSH
2225: LD_INT 65
2227: PUSH
2228: LD_INT 30
2230: PUSH
2231: LD_INT 31
2233: PUSH
2234: LD_INT 21
2236: PUSH
2237: LD_INT 22
2239: PUSH
2240: LD_INT 25
2242: PUSH
2243: LD_INT 51
2245: PUSH
2246: LD_INT 52
2248: PUSH
2249: LD_INT 59
2251: PUSH
2252: LD_INT 53
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2289: LD_ADDR_VAR 0 5
2293: PUSH
2294: DOUBLE
2295: LD_INT 1
2297: DEC
2298: ST_TO_ADDR
2299: LD_VAR 0 8
2303: PUSH
2304: FOR_TO
2305: IFFALSE 2381
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2307: LD_VAR 0 8
2311: PUSH
2312: LD_VAR 0 5
2316: ARRAY
2317: PPUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 321
2327: PUSH
2328: LD_INT 1
2330: EQUAL
2331: PUSH
2332: LD_VAR 0 8
2336: PUSH
2337: LD_VAR 0 5
2341: ARRAY
2342: PPUSH
2343: LD_VAR 0 3
2347: PPUSH
2348: CALL_OW 482
2352: PUSH
2353: LD_INT 1
2355: EQUAL
2356: AND
2357: IFFALSE 2379
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 8
2368: PUSH
2369: LD_VAR 0 5
2373: ARRAY
2374: PPUSH
2375: CALL_OW 184
2379: GO 2304
2381: POP
2382: POP
// end ;
2383: LD_VAR 0 4
2387: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2388: LD_INT 0
2390: PPUSH
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
2395: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2396: LD_ADDR_VAR 0 8
2400: PUSH
2401: LD_VAR 0 2
2405: PPUSH
2406: CALL_OW 313
2410: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2411: LD_ADDR_VAR 0 9
2415: PUSH
2416: LD_VAR 0 3
2420: PPUSH
2421: LD_INT 22
2423: PUSH
2424: LD_VAR 0 1
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 25
2435: PUSH
2436: LD_INT 2
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: PUSH
2443: LD_INT 24
2445: PUSH
2446: LD_INT 750
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PUSH
2453: LD_INT 3
2455: PUSH
2456: LD_INT 54
2458: PUSH
2459: EMPTY
2460: LIST
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 70
2476: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2477: LD_ADDR_VAR 0 6
2481: PUSH
2482: LD_VAR 0 3
2486: PPUSH
2487: LD_INT 22
2489: PUSH
2490: LD_VAR 0 1
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: LD_INT 21
2501: PUSH
2502: LD_INT 3
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 3
2511: PUSH
2512: LD_INT 24
2514: PUSH
2515: LD_INT 1000
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: PPUSH
2534: CALL_OW 70
2538: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2539: LD_VAR 0 6
2543: NOT
2544: PUSH
2545: LD_INT 22
2547: PUSH
2548: LD_VAR 0 1
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 25
2559: PUSH
2560: LD_INT 2
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 24
2569: PUSH
2570: LD_INT 250
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: LIST
2581: PPUSH
2582: CALL_OW 69
2586: NOT
2587: AND
2588: IFFALSE 2592
// exit ;
2590: GO 2774
// if buildings_list > 0 and engineerOkInside then
2592: LD_VAR 0 6
2596: PUSH
2597: LD_INT 0
2599: GREATER
2600: PUSH
2601: LD_VAR 0 8
2605: AND
2606: IFFALSE 2617
// ComExitBuilding ( engineerOkInside ) ;
2608: LD_VAR 0 8
2612: PPUSH
2613: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2617: LD_VAR 0 6
2621: PUSH
2622: LD_INT 0
2624: GREATER
2625: PUSH
2626: LD_VAR 0 9
2630: PUSH
2631: LD_INT 0
2633: GREATER
2634: AND
2635: IFFALSE 2655
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2637: LD_VAR 0 9
2641: PPUSH
2642: LD_VAR 0 6
2646: PUSH
2647: LD_INT 1
2649: ARRAY
2650: PPUSH
2651: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2655: LD_VAR 0 6
2659: PUSH
2660: LD_INT 0
2662: EQUAL
2663: PUSH
2664: LD_VAR 0 4
2668: PUSH
2669: LD_INT 0
2671: EQUAL
2672: AND
2673: PUSH
2674: LD_VAR 0 9
2678: PUSH
2679: LD_INT 0
2681: GREATER
2682: AND
2683: IFFALSE 2699
// ComEnterUnit ( engineerOkOutside , building ) ;
2685: LD_VAR 0 9
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2699: LD_VAR 0 9
2703: PUSH
2704: LD_INT 0
2706: GREATER
2707: PUSH
2708: LD_VAR 0 6
2712: PUSH
2713: LD_INT 0
2715: EQUAL
2716: AND
2717: PUSH
2718: LD_VAR 0 4
2722: PUSH
2723: LD_INT 0
2725: GREATER
2726: AND
2727: IFFALSE 2774
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2729: LD_VAR 0 9
2733: PPUSH
2734: LD_VAR 0 4
2738: PUSH
2739: LD_INT 1
2741: ARRAY
2742: PPUSH
2743: LD_VAR 0 4
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 4
2756: PUSH
2757: LD_INT 3
2759: ARRAY
2760: PPUSH
2761: LD_VAR 0 4
2765: PUSH
2766: LD_INT 4
2768: ARRAY
2769: PPUSH
2770: CALL_OW 145
// end ;
2774: LD_VAR 0 5
2778: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2779: LD_INT 0
2781: PPUSH
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
2787: PPUSH
2788: PPUSH
2789: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2790: LD_ADDR_VAR 0 6
2794: PUSH
2795: LD_INT 22
2797: PUSH
2798: LD_VAR 0 1
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 25
2809: PUSH
2810: LD_INT 4
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 23
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 24
2829: PUSH
2830: LD_INT 251
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: PPUSH
2843: CALL_OW 69
2847: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2848: LD_ADDR_VAR 0 7
2852: PUSH
2853: LD_VAR 0 3
2857: PPUSH
2858: LD_INT 22
2860: PUSH
2861: LD_VAR 0 1
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PUSH
2870: LD_INT 23
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: LD_INT 25
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: LD_INT 50
2892: PUSH
2893: EMPTY
2894: LIST
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 70
2906: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2907: LD_ADDR_VAR 0 10
2911: PUSH
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 22
2919: PUSH
2920: LD_VAR 0 1
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 21
2931: PUSH
2932: LD_INT 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: LD_INT 3
2941: PUSH
2942: LD_INT 25
2944: PUSH
2945: LD_INT 3
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: LD_INT 24
2961: PUSH
2962: LD_INT 750
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: PPUSH
2979: CALL_OW 70
2983: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2984: LD_ADDR_VAR 0 11
2988: PUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_INT 22
2996: PUSH
2997: LD_VAR 0 1
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 21
3008: PUSH
3009: LD_INT 1
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 3
3018: PUSH
3019: LD_INT 25
3021: PUSH
3022: LD_INT 3
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: LD_INT 3
3035: PUSH
3036: LD_INT 24
3038: PUSH
3039: LD_INT 1000
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: PPUSH
3056: CALL_OW 70
3060: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
3061: LD_VAR 0 10
3065: NOT
3066: PUSH
3067: LD_VAR 0 11
3071: NOT
3072: AND
3073: PUSH
3074: LD_VAR 0 6
3078: NOT
3079: AND
3080: IFFALSE 3084
// exit ;
3082: GO 3318
// if damageUnits > 0 and sci_list > 0 then
3084: LD_VAR 0 10
3088: PUSH
3089: LD_INT 0
3091: GREATER
3092: PUSH
3093: LD_VAR 0 6
3097: PUSH
3098: LD_INT 0
3100: GREATER
3101: AND
3102: IFFALSE 3118
// ComMoveToArea ( damageUnits , healArea ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_VAR 0 2
3113: PPUSH
3114: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
3118: LD_VAR 0 11
3122: PUSH
3123: LD_INT 0
3125: GREATER
3126: PUSH
3127: LD_VAR 0 6
3131: PUSH
3132: LD_INT 0
3134: GREATER
3135: AND
3136: IFFALSE 3147
// ComExitBuilding ( sci_list ) ;
3138: LD_VAR 0 6
3142: PPUSH
3143: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
3147: LD_VAR 0 11
3151: PUSH
3152: LD_INT 0
3154: GREATER
3155: PUSH
3156: LD_VAR 0 7
3160: PUSH
3161: LD_INT 0
3163: GREATER
3164: AND
3165: IFFALSE 3185
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
3167: LD_VAR 0 7
3171: PPUSH
3172: LD_VAR 0 11
3176: PUSH
3177: LD_INT 1
3179: ARRAY
3180: PPUSH
3181: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
3185: LD_VAR 0 10
3189: PUSH
3190: LD_INT 0
3192: EQUAL
3193: PUSH
3194: LD_VAR 0 11
3198: PUSH
3199: LD_INT 0
3201: EQUAL
3202: AND
3203: PUSH
3204: LD_VAR 0 7
3208: PUSH
3209: LD_INT 0
3211: GREATER
3212: AND
3213: IFFALSE 3318
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3215: LD_ADDR_VAR 0 12
3219: PUSH
3220: LD_INT 22
3222: PUSH
3223: LD_VAR 0 1
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 21
3234: PUSH
3235: LD_INT 3
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 30
3244: PUSH
3245: LD_INT 8
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 69
3261: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3262: LD_ADDR_VAR 0 13
3266: PUSH
3267: LD_INT 1
3269: PPUSH
3270: LD_VAR 0 12
3274: PPUSH
3275: CALL_OW 12
3279: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3280: LD_VAR 0 7
3284: PPUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 60
3290: PUSH
3291: EMPTY
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 72
3302: PPUSH
3303: LD_VAR 0 12
3307: PUSH
3308: LD_VAR 0 13
3312: ARRAY
3313: PPUSH
3314: CALL_OW 120
// end ; end ;
3318: LD_VAR 0 5
3322: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3323: LD_INT 0
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
// tmpTab = [ ] ;
3329: LD_ADDR_VAR 0 6
3333: PUSH
3334: EMPTY
3335: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3336: LD_INT 22
3338: PUSH
3339: LD_VAR 0 1
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 30
3350: PUSH
3351: LD_INT 32
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PPUSH
3362: CALL_OW 69
3366: PUSH
3367: LD_INT 0
3369: GREATER
3370: IFFALSE 3453
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3372: LD_ADDR_VAR 0 4
3376: PUSH
3377: LD_INT 22
3379: PUSH
3380: LD_VAR 0 1
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 30
3391: PUSH
3392: LD_INT 32
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 69
3407: PUSH
3408: FOR_IN
3409: IFFALSE 3451
// begin for j in UnitsInside ( i ) do
3411: LD_ADDR_VAR 0 5
3415: PUSH
3416: LD_VAR 0 4
3420: PPUSH
3421: CALL_OW 313
3425: PUSH
3426: FOR_IN
3427: IFFALSE 3447
// tmpTab = tmpTab ^ j ;
3429: LD_ADDR_VAR 0 6
3433: PUSH
3434: LD_VAR 0 6
3438: PUSH
3439: LD_VAR 0 5
3443: ADD
3444: ST_TO_ADDR
3445: GO 3426
3447: POP
3448: POP
// end ;
3449: GO 3408
3451: POP
3452: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3453: LD_VAR 0 6
3457: PPUSH
3458: LD_VAR 0 2
3462: PPUSH
3463: CALL_OW 250
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 251
3477: PPUSH
3478: CALL_OW 114
// end ;
3482: LD_VAR 0 3
3486: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3487: LD_INT 0
3489: PPUSH
3490: PPUSH
3491: PPUSH
3492: PPUSH
// enable ;
3493: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3494: LD_ADDR_VAR 0 7
3498: PUSH
3499: LD_VAR 0 3
3503: PPUSH
3504: CALL_OW 435
3508: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3509: LD_ADDR_VAR 0 6
3513: PUSH
3514: LD_INT 22
3516: PUSH
3517: LD_VAR 0 1
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PUSH
3526: LD_INT 34
3528: PUSH
3529: LD_VAR 0 2
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: CALL_OW 69
3546: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3547: LD_VAR 0 6
3551: PUSH
3552: LD_INT 0
3554: GREATER
3555: PUSH
3556: LD_VAR 0 3
3560: PPUSH
3561: CALL_OW 435
3565: AND
3566: PUSH
3567: LD_VAR 0 7
3571: PUSH
3572: LD_INT 0
3574: GREATER
3575: AND
3576: IFFALSE 3625
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3578: LD_VAR 0 6
3582: PUSH
3583: LD_INT 1
3585: ARRAY
3586: PPUSH
3587: LD_VAR 0 7
3591: PUSH
3592: LD_INT 1
3594: ARRAY
3595: PPUSH
3596: LD_VAR 0 7
3600: PUSH
3601: LD_INT 2
3603: ARRAY
3604: PPUSH
3605: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3609: LD_VAR 0 6
3613: PUSH
3614: LD_INT 1
3616: ARRAY
3617: PPUSH
3618: LD_INT 100
3620: PPUSH
3621: CALL_OW 240
// end ; end ;
3625: LD_VAR 0 4
3629: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3630: LD_INT 0
3632: PPUSH
3633: PPUSH
// for i = 1 to vehCount do
3634: LD_ADDR_VAR 0 9
3638: PUSH
3639: DOUBLE
3640: LD_INT 1
3642: DEC
3643: ST_TO_ADDR
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_TO
3650: IFFALSE 3697
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3652: LD_VAR 0 2
3656: PPUSH
3657: LD_VAR 0 7
3661: PPUSH
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_VAR 0 6
3671: PPUSH
3672: LD_VAR 0 4
3676: PUSH
3677: LD_INT 1
3679: PPUSH
3680: LD_VAR 0 4
3684: PPUSH
3685: CALL_OW 12
3689: ARRAY
3690: PPUSH
3691: CALL_OW 185
3695: GO 3649
3697: POP
3698: POP
// end ;
3699: LD_VAR 0 8
3703: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3704: LD_INT 0
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3712: LD_ADDR_VAR 0 6
3716: PUSH
3717: LD_INT 22
3719: PUSH
3720: LD_VAR 0 1
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: LD_INT 25
3731: PUSH
3732: LD_INT 9
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 69
3747: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3748: LD_ADDR_VAR 0 7
3752: PUSH
3753: LD_INT 81
3755: PUSH
3756: LD_VAR 0 1
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: PUSH
3765: LD_INT 3
3767: PUSH
3768: LD_INT 21
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PPUSH
3786: CALL_OW 69
3790: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3791: LD_ADDR_VAR 0 4
3795: PUSH
3796: LD_INT 1
3798: PPUSH
3799: LD_INT 3
3801: PPUSH
3802: CALL_OW 12
3806: ST_TO_ADDR
// for i = 1 to list do
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: DOUBLE
3813: LD_INT 1
3815: DEC
3816: ST_TO_ADDR
3817: LD_VAR 0 6
3821: PUSH
3822: FOR_TO
3823: IFFALSE 4025
// for ta in filter do
3825: LD_ADDR_VAR 0 3
3829: PUSH
3830: LD_VAR 0 7
3834: PUSH
3835: FOR_IN
3836: IFFALSE 4021
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3838: LD_VAR 0 6
3842: PUSH
3843: LD_VAR 0 5
3847: ARRAY
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 296
3858: PUSH
3859: LD_INT 15
3861: LESSEQUAL
3862: IFFALSE 4019
// begin case c of 1 :
3864: LD_VAR 0 4
3868: PUSH
3869: LD_INT 1
3871: DOUBLE
3872: EQUAL
3873: IFTRUE 3877
3875: GO 3915
3877: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3878: LD_VAR 0 6
3882: PUSH
3883: LD_VAR 0 5
3887: ARRAY
3888: PPUSH
3889: LD_VAR 0 3
3893: PPUSH
3894: CALL_OW 250
3898: PPUSH
3899: LD_VAR 0 3
3903: PPUSH
3904: CALL_OW 251
3908: PPUSH
3909: CALL_OW 154
3913: GO 4019
3915: LD_INT 2
3917: DOUBLE
3918: EQUAL
3919: IFTRUE 3923
3921: GO 3987
3923: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3924: LD_VAR 0 6
3928: PUSH
3929: LD_VAR 0 5
3933: ARRAY
3934: PPUSH
3935: LD_VAR 0 3
3939: PPUSH
3940: CALL_OW 250
3944: PUSH
3945: LD_INT 1
3947: NEG
3948: PPUSH
3949: LD_INT 1
3951: PPUSH
3952: CALL_OW 12
3956: PLUS
3957: PPUSH
3958: LD_VAR 0 3
3962: PPUSH
3963: CALL_OW 251
3967: PUSH
3968: LD_INT 1
3970: NEG
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: CALL_OW 12
3979: PLUS
3980: PPUSH
3981: CALL_OW 153
3985: GO 4019
3987: LD_INT 3
3989: DOUBLE
3990: EQUAL
3991: IFTRUE 3995
3993: GO 4018
3995: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3996: LD_VAR 0 6
4000: PUSH
4001: LD_VAR 0 5
4005: ARRAY
4006: PPUSH
4007: LD_VAR 0 3
4011: PPUSH
4012: CALL_OW 115
4016: GO 4019
4018: POP
// end ; end ;
4019: GO 3835
4021: POP
4022: POP
4023: GO 3822
4025: POP
4026: POP
// end ;
4027: LD_VAR 0 2
4031: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4032: LD_INT 0
4034: PPUSH
4035: PPUSH
4036: PPUSH
4037: PPUSH
4038: PPUSH
4039: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4040: LD_ADDR_VAR 0 7
4044: PUSH
4045: LD_VAR 0 2
4049: PPUSH
4050: LD_INT 22
4052: PUSH
4053: LD_VAR 0 1
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 21
4064: PUSH
4065: LD_INT 2
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 34
4074: PUSH
4075: LD_INT 52
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: PPUSH
4087: CALL_OW 70
4091: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4092: LD_ADDR_VAR 0 8
4096: PUSH
4097: LD_VAR 0 2
4101: PPUSH
4102: LD_INT 22
4104: PUSH
4105: LD_VAR 0 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 21
4116: PUSH
4117: LD_INT 3
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: LD_INT 24
4129: PUSH
4130: LD_INT 1000
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: LIST
4145: PUSH
4146: EMPTY
4147: LIST
4148: PPUSH
4149: CALL_OW 70
4153: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4154: LD_VAR 0 8
4158: PUSH
4159: LD_INT 0
4161: GREATER
4162: PUSH
4163: LD_VAR 0 7
4167: PPUSH
4168: LD_INT 24
4170: PUSH
4171: LD_INT 750
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PPUSH
4178: CALL_OW 72
4182: PUSH
4183: LD_INT 0
4185: GREATER
4186: AND
4187: IFFALSE 4207
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4189: LD_VAR 0 7
4193: PPUSH
4194: LD_VAR 0 8
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4207: LD_VAR 0 7
4211: PUSH
4212: LD_INT 0
4214: GREATER
4215: PUSH
4216: LD_VAR 0 8
4220: PUSH
4221: LD_INT 0
4223: EQUAL
4224: AND
4225: PUSH
4226: LD_EXP 10
4230: PUSH
4231: LD_INT 0
4233: GREATER
4234: AND
4235: IFFALSE 4282
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4237: LD_VAR 0 7
4241: PPUSH
4242: LD_EXP 10
4246: PUSH
4247: LD_INT 1
4249: ARRAY
4250: PPUSH
4251: LD_EXP 10
4255: PUSH
4256: LD_INT 2
4258: ARRAY
4259: PPUSH
4260: LD_EXP 10
4264: PUSH
4265: LD_INT 3
4267: ARRAY
4268: PPUSH
4269: LD_EXP 10
4273: PUSH
4274: LD_INT 4
4276: ARRAY
4277: PPUSH
4278: CALL_OW 567
// end ; end_of_file
4282: LD_VAR 0 3
4286: RET
// every 0 0$1 do
4287: GO 4289
4289: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4290: LD_INT 3
4292: PPUSH
4293: LD_INT 14
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: CALL 2147 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4303: LD_INT 3
4305: PPUSH
4306: LD_INT 15
4308: PPUSH
4309: LD_INT 3
4311: PPUSH
4312: CALL 2147 0 3
// end ;
4316: END
// every 0 0$1 trigger russianAI = 1 do
4317: LD_EXP 13
4321: PUSH
4322: LD_INT 1
4324: EQUAL
4325: IFFALSE 4414
4327: GO 4329
4329: DISABLE
// begin enable ;
4330: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4331: LD_INT 3
4333: PPUSH
4334: LD_INT 22
4336: PPUSH
4337: LD_INT 7
4339: PPUSH
4340: LD_EXP 10
4344: PPUSH
4345: CALL 2388 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4349: LD_INT 3
4351: PPUSH
4352: LD_INT 8
4354: PPUSH
4355: LD_INT 7
4357: PPUSH
4358: LD_INT 14
4360: PUSH
4361: LD_INT 15
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 1
4370: PPUSH
4371: LD_INT 2
4373: PPUSH
4374: CALL_OW 12
4378: ARRAY
4379: PPUSH
4380: CALL 2779 0 4
// IntBazooka ( 3 ) ;
4384: LD_INT 3
4386: PPUSH
4387: CALL 3704 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4391: LD_INT 3
4393: PPUSH
4394: LD_INT 51
4396: PPUSH
4397: LD_INT 14
4399: PPUSH
4400: CALL 3487 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4404: LD_INT 3
4406: PPUSH
4407: LD_INT 7
4409: PPUSH
4410: CALL 4032 0 2
// end ;
4414: END
// every 0 0$30 trigger russianTanks >= [ 5 , 6 , 8 , 8 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 , 3 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
4415: LD_EXP 11
4419: PUSH
4420: LD_INT 5
4422: PUSH
4423: LD_INT 6
4425: PUSH
4426: LD_INT 8
4428: PUSH
4429: LD_INT 8
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: PUSH
4438: LD_OWVAR 67
4442: ARRAY
4443: GREATEREQUAL
4444: PUSH
4445: LD_EXP 12
4449: PUSH
4450: LD_INT 1
4452: PUSH
4453: LD_INT 2
4455: PUSH
4456: LD_INT 3
4458: PUSH
4459: LD_INT 3
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: PUSH
4468: LD_OWVAR 67
4472: ARRAY
4473: GREATEREQUAL
4474: AND
4475: IFFALSE 4956
4477: GO 4479
4479: DISABLE
4480: LD_INT 0
4482: PPUSH
4483: PPUSH
4484: PPUSH
4485: PPUSH
// begin enable ;
4486: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
4487: LD_ADDR_VAR 0 2
4491: PUSH
4492: LD_EXP 11
4496: PUSH
4497: LD_EXP 12
4501: UNION
4502: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
4503: LD_ADDR_EXP 11
4507: PUSH
4508: LD_EXP 11
4512: PUSH
4513: LD_VAR 0 2
4517: DIFF
4518: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
4519: LD_ADDR_EXP 12
4523: PUSH
4524: LD_EXP 12
4528: PUSH
4529: LD_VAR 0 2
4533: DIFF
4534: ST_TO_ADDR
// if IsOk ( ruTeleport ) then
4535: LD_INT 116
4537: PPUSH
4538: CALL_OW 302
4542: IFFALSE 4606
// begin for j in tmp do
4544: LD_ADDR_VAR 0 1
4548: PUSH
4549: LD_VAR 0 2
4553: PUSH
4554: FOR_IN
4555: IFFALSE 4597
// if Prob ( 40 ) then
4557: LD_INT 40
4559: PPUSH
4560: CALL_OW 13
4564: IFFALSE 4580
// ComEnterUnit ( j , ruTeleport ) else
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_INT 116
4573: PPUSH
4574: CALL_OW 120
4578: GO 4595
// ComAgressiveMove ( j , 117 , 92 ) ;
4580: LD_VAR 0 1
4584: PPUSH
4585: LD_INT 117
4587: PPUSH
4588: LD_INT 92
4590: PPUSH
4591: CALL_OW 114
4595: GO 4554
4597: POP
4598: POP
// wait ( 0 0$14 ) ;
4599: LD_INT 490
4601: PPUSH
4602: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4606: LD_INT 35
4608: PPUSH
4609: CALL_OW 67
// for j in tmp do
4613: LD_ADDR_VAR 0 1
4617: PUSH
4618: LD_VAR 0 2
4622: PUSH
4623: FOR_IN
4624: IFFALSE 4947
// begin if IsDead ( j ) then
4626: LD_VAR 0 1
4630: PPUSH
4631: CALL_OW 301
4635: IFFALSE 4653
// tmp := tmp diff j ;
4637: LD_ADDR_VAR 0 2
4641: PUSH
4642: LD_VAR 0 2
4646: PUSH
4647: LD_VAR 0 1
4651: DIFF
4652: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
4653: LD_ADDR_VAR 0 3
4657: PUSH
4658: LD_INT 81
4660: PUSH
4661: LD_INT 3
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PPUSH
4668: CALL_OW 69
4672: PPUSH
4673: LD_VAR 0 1
4677: PPUSH
4678: CALL_OW 74
4682: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
4683: LD_ADDR_VAR 0 4
4687: PUSH
4688: LD_INT 81
4690: PUSH
4691: LD_INT 3
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: LD_INT 21
4700: PUSH
4701: LD_INT 1
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PUSH
4712: EMPTY
4713: LIST
4714: PPUSH
4715: CALL_OW 69
4719: PPUSH
4720: LD_VAR 0 1
4724: PPUSH
4725: CALL_OW 74
4729: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
4730: LD_VAR 0 1
4734: PPUSH
4735: CALL_OW 264
4739: PUSH
4740: LD_INT 49
4742: EQUAL
4743: IFFALSE 4879
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
4745: LD_VAR 0 2
4749: PPUSH
4750: LD_INT 3
4752: PUSH
4753: LD_INT 34
4755: PUSH
4756: LD_INT 49
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 72
4771: PUSH
4772: LD_INT 1
4774: GREATER
4775: PUSH
4776: LD_VAR 0 2
4780: PPUSH
4781: LD_INT 3
4783: PUSH
4784: LD_INT 34
4786: PUSH
4787: LD_INT 49
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PPUSH
4798: CALL_OW 72
4802: AND
4803: IFFALSE 4853
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
4805: LD_VAR 0 1
4809: PPUSH
4810: LD_VAR 0 2
4814: PPUSH
4815: LD_INT 3
4817: PUSH
4818: LD_INT 34
4820: PUSH
4821: LD_INT 49
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PPUSH
4832: CALL_OW 72
4836: PPUSH
4837: LD_VAR 0 1
4841: PPUSH
4842: CALL_OW 74
4846: PPUSH
4847: CALL_OW 112
4851: GO 4877
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
4853: LD_VAR 0 1
4857: PPUSH
4858: LD_VAR 0 3
4862: PPUSH
4863: LD_VAR 0 1
4867: PPUSH
4868: CALL_OW 74
4872: PPUSH
4873: CALL_OW 112
// end else
4877: GO 4945
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
4879: LD_VAR 0 1
4883: PPUSH
4884: LD_VAR 0 4
4888: PPUSH
4889: CALL_OW 296
4893: PUSH
4894: LD_VAR 0 1
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: CALL_OW 296
4908: PUSH
4909: LD_INT 2
4911: PLUS
4912: LESS
4913: IFFALSE 4931
// ComAttackUnit ( j , target2 ) else
4915: LD_VAR 0 1
4919: PPUSH
4920: LD_VAR 0 4
4924: PPUSH
4925: CALL_OW 115
4929: GO 4945
// ComAttackUnit ( j , target1 ) ;
4931: LD_VAR 0 1
4935: PPUSH
4936: LD_VAR 0 3
4940: PPUSH
4941: CALL_OW 115
// end ; end ;
4945: GO 4623
4947: POP
4948: POP
// until not tmp ;
4949: LD_VAR 0 2
4953: NOT
4954: IFFALSE 4606
// end ;
4956: PPOPN 4
4958: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4959: LD_INT 22
4961: PPUSH
4962: CALL_OW 303
4966: PUSH
4967: LD_INT 22
4969: PPUSH
4970: CALL_OW 255
4974: PUSH
4975: LD_INT 1
4977: EQUAL
4978: OR
4979: IFFALSE 4994
4981: GO 4983
4983: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4984: LD_INT 3
4986: PPUSH
4987: LD_INT 22
4989: PPUSH
4990: CALL 3323 0 2
4994: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4995: LD_EXP 13
4999: PUSH
5000: LD_INT 1
5002: EQUAL
5003: PUSH
5004: LD_INT 22
5006: PUSH
5007: LD_INT 3
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 21
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 50
5026: PUSH
5027: EMPTY
5028: LIST
5029: PUSH
5030: LD_INT 33
5032: PUSH
5033: LD_INT 3
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 2
5042: PUSH
5043: LD_INT 34
5045: PUSH
5046: LD_INT 46
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PUSH
5053: LD_INT 34
5055: PUSH
5056: LD_INT 45
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 34
5065: PUSH
5066: LD_INT 44
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 34
5075: PUSH
5076: LD_INT 49
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 34
5085: PUSH
5086: LD_INT 47
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 69
5112: PUSH
5113: LD_INT 3
5115: LESS
5116: AND
5117: IFFALSE 5312
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// if russianRocketsDisabled then
5123: LD_EXP 14
5127: IFFALSE 5188
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: LD_INT 5
5137: PUSH
5138: LD_INT 6
5140: PUSH
5141: LD_INT 8
5143: PUSH
5144: LD_INT 8
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_OWVAR 67
5157: ARRAY
5158: PPUSH
5159: LD_INT 46
5161: PUSH
5162: LD_INT 45
5164: PUSH
5165: LD_INT 44
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PPUSH
5173: LD_INT 3
5175: PPUSH
5176: LD_INT 3
5178: PPUSH
5179: LD_INT 24
5181: PPUSH
5182: CALL 3630 0 7
5186: GO 5249
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
5188: LD_INT 3
5190: PPUSH
5191: LD_INT 1
5193: PPUSH
5194: LD_INT 5
5196: PUSH
5197: LD_INT 6
5199: PUSH
5200: LD_INT 8
5202: PUSH
5203: LD_INT 8
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: PUSH
5212: LD_OWVAR 67
5216: ARRAY
5217: PPUSH
5218: LD_INT 46
5220: PUSH
5221: LD_INT 45
5223: PUSH
5224: LD_INT 44
5226: PUSH
5227: LD_INT 47
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: PPUSH
5236: LD_INT 3
5238: PPUSH
5239: LD_INT 3
5241: PPUSH
5242: LD_INT 24
5244: PPUSH
5245: CALL 3630 0 7
// if russianTimeLapsers = 0 then
5249: LD_EXP 12
5253: PUSH
5254: LD_INT 0
5256: EQUAL
5257: IFFALSE 5312
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5259: LD_INT 3
5261: PPUSH
5262: LD_INT 40
5264: PPUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: LD_INT 3
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PPUSH
5289: LD_INT 49
5291: PUSH
5292: LD_INT 49
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PPUSH
5299: LD_INT 3
5301: PPUSH
5302: LD_INT 3
5304: PPUSH
5305: LD_INT 24
5307: PPUSH
5308: CALL 3630 0 7
// end ;
5312: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5313: LD_EXP 18
5317: PUSH
5318: LD_INT 22
5320: PUSH
5321: LD_INT 1
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 21
5330: PUSH
5331: LD_INT 2
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 58
5340: PUSH
5341: EMPTY
5342: LIST
5343: PUSH
5344: LD_INT 33
5346: PUSH
5347: LD_INT 1
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: LD_INT 91
5356: PUSH
5357: LD_EXP 18
5361: PUSH
5362: LD_INT 45
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: PPUSH
5377: CALL_OW 69
5381: AND
5382: IFFALSE 5486
5384: GO 5386
5386: DISABLE
// begin wait ( 0 0$5 ) ;
5387: LD_INT 175
5389: PPUSH
5390: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5394: LD_EXP 18
5398: PPUSH
5399: LD_INT 22
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 21
5411: PUSH
5412: LD_INT 2
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 58
5421: PUSH
5422: EMPTY
5423: LIST
5424: PUSH
5425: LD_INT 33
5427: PUSH
5428: LD_INT 1
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: LD_INT 91
5437: PUSH
5438: LD_EXP 18
5442: PUSH
5443: LD_INT 45
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5471: LD_EXP 18
5475: PPUSH
5476: LD_INT 127
5478: PPUSH
5479: LD_INT 63
5481: PPUSH
5482: CALL_OW 171
// end ; end_of_file
5486: END
// every 1 do var dec1 , dec2 ;
5487: GO 5489
5489: DISABLE
5490: LD_INT 0
5492: PPUSH
5493: PPUSH
// begin InGameOn ;
5494: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5498: LD_INT 48
5500: PPUSH
5501: LD_STRING deltakappa
5503: PPUSH
5504: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5508: LD_INT 95
5510: PPUSH
5511: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5515: LD_INT 95
5517: PPUSH
5518: LD_INT 30
5520: PPUSH
5521: LD_INT 11
5523: PPUSH
5524: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5528: LD_INT 30
5530: PPUSH
5531: LD_INT 11
5533: PPUSH
5534: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5538: LD_EXP 5
5542: PPUSH
5543: LD_STRING D1-Pow-1
5545: PPUSH
5546: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5550: LD_EXP 1
5554: PPUSH
5555: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5559: LD_EXP 1
5563: PPUSH
5564: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5568: LD_EXP 1
5572: PPUSH
5573: LD_STRING D1-JMM-1
5575: PPUSH
5576: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5580: LD_EXP 5
5584: PPUSH
5585: LD_STRING D1-Pow-2
5587: PPUSH
5588: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5592: LD_EXP 1
5596: PPUSH
5597: LD_STRING D1-JMM-2
5599: PPUSH
5600: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5604: LD_EXP 1
5608: PPUSH
5609: LD_INT 95
5611: PPUSH
5612: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5616: LD_STRING M1
5618: PPUSH
5619: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5623: LD_INT 35
5625: PPUSH
5626: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5630: LD_EXP 1
5634: PPUSH
5635: LD_INT 95
5637: PPUSH
5638: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5642: LD_INT 95
5644: PPUSH
5645: LD_INT 51
5647: PPUSH
5648: LD_INT 21
5650: PPUSH
5651: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5655: LD_INT 95
5657: PPUSH
5658: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5662: LD_INT 95
5664: PPUSH
5665: LD_INT 5
5667: PPUSH
5668: CALL_OW 308
5672: IFFALSE 5623
// if JMMGirl = 1 then
5674: LD_EXP 7
5678: PUSH
5679: LD_INT 1
5681: EQUAL
5682: IFFALSE 5995
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5684: LD_EXP 2
5688: PPUSH
5689: LD_STRING D2J-Joan-1
5691: PPUSH
5692: CALL_OW 94
// dec1 = query ( Q1 ) ;
5696: LD_ADDR_VAR 0 1
5700: PUSH
5701: LD_STRING Q1
5703: PPUSH
5704: CALL_OW 97
5708: ST_TO_ADDR
// if dec1 = 1 then
5709: LD_VAR 0 1
5713: PUSH
5714: LD_INT 1
5716: EQUAL
5717: IFFALSE 5971
// begin ComExitVehicle ( JMM ) ;
5719: LD_EXP 1
5723: PPUSH
5724: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5728: LD_EXP 1
5732: PPUSH
5733: LD_STRING D2J-JMM-1
5735: PPUSH
5736: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5740: LD_EXP 2
5744: PPUSH
5745: LD_STRING D2J-Joan-2
5747: PPUSH
5748: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5752: LD_EXP 1
5756: PPUSH
5757: LD_STRING D2J-JMM-2
5759: PPUSH
5760: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5764: LD_EXP 2
5768: PPUSH
5769: LD_STRING D2J-Joan-3
5771: PPUSH
5772: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5776: LD_EXP 5
5780: PPUSH
5781: LD_STRING DPowell-Pow-1
5783: PPUSH
5784: CALL_OW 94
// dec2 = query ( Q2J ) ;
5788: LD_ADDR_VAR 0 2
5792: PUSH
5793: LD_STRING Q2J
5795: PPUSH
5796: CALL_OW 97
5800: ST_TO_ADDR
// if dec2 = 1 then
5801: LD_VAR 0 2
5805: PUSH
5806: LD_INT 1
5808: EQUAL
5809: IFFALSE 5851
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5811: LD_EXP 1
5815: PPUSH
5816: LD_STRING D2Ja-JMM-1
5818: PPUSH
5819: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5823: LD_EXP 2
5827: PPUSH
5828: LD_STRING D2Ja-Joan-1
5830: PPUSH
5831: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5835: LD_EXP 1
5839: PPUSH
5840: LD_STRING D2Ja-JMM-2
5842: PPUSH
5843: CALL_OW 88
// InGameOff ;
5847: CALL_OW 9
// end ; if dec2 = 2 then
5851: LD_VAR 0 2
5855: PUSH
5856: LD_INT 2
5858: EQUAL
5859: IFFALSE 5935
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5861: LD_EXP 1
5865: PPUSH
5866: LD_STRING D2Jb-JMM-1
5868: PPUSH
5869: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5873: LD_EXP 2
5877: PPUSH
5878: LD_STRING D2Jb-Joan-1
5880: PPUSH
5881: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5885: LD_EXP 1
5889: PPUSH
5890: LD_STRING D2Jb-JMM-2
5892: PPUSH
5893: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5897: LD_EXP 2
5901: PPUSH
5902: LD_STRING D2Jb-Joan-2
5904: PPUSH
5905: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5909: LD_EXP 1
5913: PPUSH
5914: LD_STRING D2Jb-JMM-3
5916: PPUSH
5917: CALL_OW 88
// fastEnd = 1 ;
5921: LD_ADDR_EXP 15
5925: PUSH
5926: LD_INT 1
5928: ST_TO_ADDR
// FinishMission ;
5929: CALL 9574 0 0
// exit ;
5933: GO 6565
// end ; if dec2 = 3 then
5935: LD_VAR 0 2
5939: PUSH
5940: LD_INT 3
5942: EQUAL
5943: IFFALSE 5971
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5945: LD_EXP 2
5949: PPUSH
5950: LD_STRING D2Jc-Joan-1
5952: PPUSH
5953: CALL_OW 94
// fastEnd = 1 ;
5957: LD_ADDR_EXP 15
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// FinishMission ;
5965: CALL 9574 0 0
// exit ;
5969: GO 6565
// end ; end ; if dec1 = 2 then
5971: LD_VAR 0 1
5975: PUSH
5976: LD_INT 2
5978: EQUAL
5979: IFFALSE 5995
// begin fastEnd = 1 ;
5981: LD_ADDR_EXP 15
5985: PUSH
5986: LD_INT 1
5988: ST_TO_ADDR
// FinishMission ;
5989: CALL 9574 0 0
// exit ;
5993: GO 6565
// end ; end ; if JMMGirl = 2 then
5995: LD_EXP 7
5999: PUSH
6000: LD_INT 2
6002: EQUAL
6003: IFFALSE 6328
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
6005: LD_EXP 3
6009: PPUSH
6010: LD_STRING D2L-Lisa-1
6012: PPUSH
6013: CALL_OW 94
// dec1 = query ( Q1 ) ;
6017: LD_ADDR_VAR 0 1
6021: PUSH
6022: LD_STRING Q1
6024: PPUSH
6025: CALL_OW 97
6029: ST_TO_ADDR
// if dec1 = 1 then
6030: LD_VAR 0 1
6034: PUSH
6035: LD_INT 1
6037: EQUAL
6038: IFFALSE 6304
// begin ComExitVehicle ( JMM ) ;
6040: LD_EXP 1
6044: PPUSH
6045: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
6049: LD_EXP 1
6053: PPUSH
6054: LD_STRING D2L-JMM-1
6056: PPUSH
6057: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
6061: LD_EXP 3
6065: PPUSH
6066: LD_STRING D2L-Lisa-2
6068: PPUSH
6069: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
6073: LD_EXP 1
6077: PPUSH
6078: LD_STRING D2L-JMM-2
6080: PPUSH
6081: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
6085: LD_EXP 3
6089: PPUSH
6090: LD_STRING D2L-Lisa-3
6092: PPUSH
6093: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6097: LD_EXP 5
6101: PPUSH
6102: LD_STRING DPowell-Pow-1
6104: PPUSH
6105: CALL_OW 94
// dec2 = query ( Q2L ) ;
6109: LD_ADDR_VAR 0 2
6113: PUSH
6114: LD_STRING Q2L
6116: PPUSH
6117: CALL_OW 97
6121: ST_TO_ADDR
// if dec2 = 1 then
6122: LD_VAR 0 2
6126: PUSH
6127: LD_INT 1
6129: EQUAL
6130: IFFALSE 6196
// begin Say ( JMM , D2La-JMM-1 ) ;
6132: LD_EXP 1
6136: PPUSH
6137: LD_STRING D2La-JMM-1
6139: PPUSH
6140: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6144: LD_EXP 3
6148: PPUSH
6149: LD_STRING D2La-Lisa-1
6151: PPUSH
6152: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
6156: LD_EXP 1
6160: PPUSH
6161: LD_STRING D2La-JMM-2
6163: PPUSH
6164: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
6168: LD_EXP 3
6172: PPUSH
6173: LD_STRING D2La-Lisa-2
6175: PPUSH
6176: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
6180: LD_EXP 1
6184: PPUSH
6185: LD_STRING D2La-JMM-3
6187: PPUSH
6188: CALL_OW 88
// InGameOff ;
6192: CALL_OW 9
// end ; if dec2 = 2 then
6196: LD_VAR 0 2
6200: PUSH
6201: LD_INT 2
6203: EQUAL
6204: IFFALSE 6268
// begin Say ( JMM , D2Lb-JMM-1 ) ;
6206: LD_EXP 1
6210: PPUSH
6211: LD_STRING D2Lb-JMM-1
6213: PPUSH
6214: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
6218: LD_EXP 3
6222: PPUSH
6223: LD_STRING D2Lb-Lisa-1
6225: PPUSH
6226: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
6230: LD_EXP 1
6234: PPUSH
6235: LD_STRING D2Lb-JMM-2
6237: PPUSH
6238: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
6242: LD_EXP 3
6246: PPUSH
6247: LD_STRING D2Lb-Lisa-2
6249: PPUSH
6250: CALL_OW 94
// fastEnd = 1 ;
6254: LD_ADDR_EXP 15
6258: PUSH
6259: LD_INT 1
6261: ST_TO_ADDR
// FinishMission ;
6262: CALL 9574 0 0
// exit ;
6266: GO 6565
// end ; if dec2 = 3 then
6268: LD_VAR 0 2
6272: PUSH
6273: LD_INT 3
6275: EQUAL
6276: IFFALSE 6304
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6278: LD_EXP 3
6282: PPUSH
6283: LD_STRING D2Lc-Lisa-1
6285: PPUSH
6286: CALL_OW 94
// fastEnd = 1 ;
6290: LD_ADDR_EXP 15
6294: PUSH
6295: LD_INT 1
6297: ST_TO_ADDR
// FinishMission ;
6298: CALL 9574 0 0
// exit ;
6302: GO 6565
// end ; end ; if dec1 = 2 then
6304: LD_VAR 0 1
6308: PUSH
6309: LD_INT 2
6311: EQUAL
6312: IFFALSE 6328
// begin fastEnd = 1 ;
6314: LD_ADDR_EXP 15
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// FinishMission ;
6322: CALL 9574 0 0
// exit ;
6326: GO 6565
// end ; end ; if JMMGirl = 3 then
6328: LD_EXP 7
6332: PUSH
6333: LD_INT 3
6335: EQUAL
6336: IFFALSE 6565
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6338: LD_EXP 4
6342: PPUSH
6343: LD_STRING D2X-Con-1
6345: PPUSH
6346: CALL_OW 94
// dec1 = query ( Q1 ) ;
6350: LD_ADDR_VAR 0 1
6354: PUSH
6355: LD_STRING Q1
6357: PPUSH
6358: CALL_OW 97
6362: ST_TO_ADDR
// if dec1 = 1 then
6363: LD_VAR 0 1
6367: PUSH
6368: LD_INT 1
6370: EQUAL
6371: IFFALSE 6541
// begin ComExitVehicle ( JMM ) ;
6373: LD_EXP 1
6377: PPUSH
6378: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6382: LD_EXP 1
6386: PPUSH
6387: LD_STRING D2X-JMM-1
6389: PPUSH
6390: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6394: LD_EXP 4
6398: PPUSH
6399: LD_STRING D2X-Con-2
6401: PPUSH
6402: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6406: LD_EXP 5
6410: PPUSH
6411: LD_STRING DPowell-Pow-1
6413: PPUSH
6414: CALL_OW 94
// dec2 = query ( Q2X ) ;
6418: LD_ADDR_VAR 0 2
6422: PUSH
6423: LD_STRING Q2X
6425: PPUSH
6426: CALL_OW 97
6430: ST_TO_ADDR
// if dec2 = 1 then
6431: LD_VAR 0 2
6435: PUSH
6436: LD_INT 1
6438: EQUAL
6439: IFFALSE 6457
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6441: LD_EXP 1
6445: PPUSH
6446: LD_STRING D2Xa-JMM-1
6448: PPUSH
6449: CALL_OW 88
// InGameOff ;
6453: CALL_OW 9
// end ; if dec2 = 2 then
6457: LD_VAR 0 2
6461: PUSH
6462: LD_INT 2
6464: EQUAL
6465: IFFALSE 6505
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6467: LD_EXP 1
6471: PPUSH
6472: LD_STRING D2Xb-JMM-1
6474: PPUSH
6475: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6479: LD_EXP 4
6483: PPUSH
6484: LD_STRING D2Xb-Con-1
6486: PPUSH
6487: CALL_OW 94
// fastEnd = 1 ;
6491: LD_ADDR_EXP 15
6495: PUSH
6496: LD_INT 1
6498: ST_TO_ADDR
// FinishMission ;
6499: CALL 9574 0 0
// exit ;
6503: GO 6565
// end ; if dec2 = 3 then
6505: LD_VAR 0 2
6509: PUSH
6510: LD_INT 3
6512: EQUAL
6513: IFFALSE 6541
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6515: LD_EXP 4
6519: PPUSH
6520: LD_STRING D2Xc-Con-1
6522: PPUSH
6523: CALL_OW 94
// fastEnd = 1 ;
6527: LD_ADDR_EXP 15
6531: PUSH
6532: LD_INT 1
6534: ST_TO_ADDR
// FinishMission ;
6535: CALL 9574 0 0
// exit ;
6539: GO 6565
// end ; end ; if dec1 = 2 then
6541: LD_VAR 0 1
6545: PUSH
6546: LD_INT 2
6548: EQUAL
6549: IFFALSE 6565
// begin fastEnd = 1 ;
6551: LD_ADDR_EXP 15
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// FinishMission ;
6559: CALL 9574 0 0
// exit ;
6563: GO 6565
// end ; end ; end ;
6565: PPOPN 2
6567: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6568: LD_EXP 1
6572: PPUSH
6573: LD_INT 6
6575: PPUSH
6576: CALL_OW 308
6580: IFFALSE 7322
6582: GO 6584
6584: DISABLE
// begin InGameOn ;
6585: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6589: LD_INT 35
6591: PPUSH
6592: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6596: LD_EXP 1
6600: PPUSH
6601: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6605: LD_EXP 1
6609: PPUSH
6610: LD_INT 62
6612: PPUSH
6613: LD_INT 104
6615: PPUSH
6616: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6620: LD_EXP 1
6624: PPUSH
6625: LD_EXP 2
6629: PPUSH
6630: CALL_OW 296
6634: PUSH
6635: LD_INT 4
6637: LESS
6638: PUSH
6639: LD_EXP 1
6643: PPUSH
6644: LD_EXP 3
6648: PPUSH
6649: CALL_OW 296
6653: PUSH
6654: LD_INT 4
6656: LESS
6657: OR
6658: PUSH
6659: LD_EXP 1
6663: PPUSH
6664: LD_EXP 4
6668: PPUSH
6669: CALL_OW 296
6673: PUSH
6674: LD_INT 4
6676: LESS
6677: OR
6678: IFFALSE 6589
// case JMMGirl of 1 :
6680: LD_EXP 7
6684: PUSH
6685: LD_INT 1
6687: DOUBLE
6688: EQUAL
6689: IFTRUE 6693
6691: GO 6905
6693: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6694: LD_INT 22
6696: PUSH
6697: LD_INT 4
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PPUSH
6704: CALL_OW 69
6708: PPUSH
6709: LD_INT 1
6711: PPUSH
6712: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6716: LD_EXP 2
6720: PPUSH
6721: LD_EXP 1
6725: PPUSH
6726: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6730: LD_EXP 1
6734: PPUSH
6735: LD_EXP 2
6739: PPUSH
6740: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6744: LD_EXP 2
6748: PUSH
6749: LD_EXP 1
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PPUSH
6758: CALL_OW 87
// wait ( 0 0$1 ) ;
6762: LD_INT 35
6764: PPUSH
6765: CALL_OW 67
// DialogueOn ;
6769: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6773: LD_EXP 2
6777: PPUSH
6778: LD_STRING D3J-Joan-1
6780: PPUSH
6781: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6785: LD_EXP 1
6789: PPUSH
6790: LD_STRING D3J-JMM-1
6792: PPUSH
6793: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6797: LD_EXP 2
6801: PPUSH
6802: LD_STRING D3J-Joan-2
6804: PPUSH
6805: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6809: LD_EXP 1
6813: PPUSH
6814: LD_STRING D3J-JMM-2
6816: PPUSH
6817: CALL_OW 88
// wait ( 0 0$1 ) ;
6821: LD_INT 35
6823: PPUSH
6824: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6828: LD_EXP 1
6832: PPUSH
6833: LD_STRING D4-JMM-1
6835: PPUSH
6836: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6840: LD_EXP 2
6844: PPUSH
6845: LD_STRING D4-Joan-1
6847: PPUSH
6848: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6852: LD_EXP 1
6856: PPUSH
6857: LD_STRING D4-JMM-2
6859: PPUSH
6860: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6864: LD_EXP 2
6868: PPUSH
6869: LD_STRING D4-Joan-2
6871: PPUSH
6872: CALL_OW 88
// DialogueOff ;
6876: CALL_OW 7
// InGameOff ;
6880: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6884: LD_STRING M2J
6886: PPUSH
6887: CALL_OW 337
// SaveForQuickRestart ;
6891: CALL_OW 22
// russianAI = 1 ;
6895: LD_ADDR_EXP 13
6899: PUSH
6900: LD_INT 1
6902: ST_TO_ADDR
// end ; 2 :
6903: GO 7322
6905: LD_INT 2
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 7125
6913: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6914: LD_INT 22
6916: PUSH
6917: LD_INT 4
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: PPUSH
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6936: LD_EXP 3
6940: PPUSH
6941: LD_EXP 1
6945: PPUSH
6946: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6950: LD_EXP 1
6954: PPUSH
6955: LD_EXP 3
6959: PPUSH
6960: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6964: LD_EXP 3
6968: PUSH
6969: LD_EXP 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PPUSH
6978: CALL_OW 87
// wait ( 0 0$1 ) ;
6982: LD_INT 35
6984: PPUSH
6985: CALL_OW 67
// DialogueOn ;
6989: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6993: LD_EXP 3
6997: PPUSH
6998: LD_STRING D3L-Lisa-1
7000: PPUSH
7001: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
7005: LD_EXP 1
7009: PPUSH
7010: LD_STRING D3L-JMM-1
7012: PPUSH
7013: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
7017: LD_EXP 3
7021: PPUSH
7022: LD_STRING D3L-Lisa-2
7024: PPUSH
7025: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
7029: LD_EXP 1
7033: PPUSH
7034: LD_STRING D3L-JMM-2
7036: PPUSH
7037: CALL_OW 88
// wait ( 0 0$1 ) ;
7041: LD_INT 35
7043: PPUSH
7044: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7048: LD_EXP 1
7052: PPUSH
7053: LD_STRING D4-JMM-1
7055: PPUSH
7056: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
7060: LD_EXP 3
7064: PPUSH
7065: LD_STRING D4-Lisa-1
7067: PPUSH
7068: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7072: LD_EXP 1
7076: PPUSH
7077: LD_STRING D4-JMM-1
7079: PPUSH
7080: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
7084: LD_EXP 3
7088: PPUSH
7089: LD_STRING D4-Lisa-2
7091: PPUSH
7092: CALL_OW 88
// DialogueOff ;
7096: CALL_OW 7
// InGameOff ;
7100: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
7104: LD_STRING M2L
7106: PPUSH
7107: CALL_OW 337
// SaveForQuickRestart ;
7111: CALL_OW 22
// russianAI = 1 ;
7115: LD_ADDR_EXP 13
7119: PUSH
7120: LD_INT 1
7122: ST_TO_ADDR
// end ; 3 :
7123: GO 7322
7125: LD_INT 3
7127: DOUBLE
7128: EQUAL
7129: IFTRUE 7133
7131: GO 7321
7133: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
7134: LD_INT 22
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 69
7148: PPUSH
7149: LD_INT 1
7151: PPUSH
7152: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
7156: LD_EXP 4
7160: PPUSH
7161: LD_EXP 1
7165: PPUSH
7166: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
7170: LD_EXP 1
7174: PPUSH
7175: LD_EXP 4
7179: PPUSH
7180: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7184: LD_EXP 2
7188: PUSH
7189: LD_EXP 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 87
// wait ( 0 0$1 ) ;
7202: LD_INT 35
7204: PPUSH
7205: CALL_OW 67
// DialogueOn ;
7209: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
7213: LD_EXP 4
7217: PPUSH
7218: LD_STRING D3X-Con-1
7220: PPUSH
7221: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7225: LD_EXP 1
7229: PPUSH
7230: LD_STRING D3J-JMM-1
7232: PPUSH
7233: CALL_OW 88
// wait ( 0 0$1 ) ;
7237: LD_INT 35
7239: PPUSH
7240: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7244: LD_EXP 1
7248: PPUSH
7249: LD_STRING D4-JMM-1
7251: PPUSH
7252: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7256: LD_EXP 4
7260: PPUSH
7261: LD_STRING D4-Con-1
7263: PPUSH
7264: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7268: LD_EXP 1
7272: PPUSH
7273: LD_STRING D4-JMM-2
7275: PPUSH
7276: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7280: LD_EXP 4
7284: PPUSH
7285: LD_STRING D4-Con-2
7287: PPUSH
7288: CALL_OW 88
// DialogueOff ;
7292: CALL_OW 7
// InGameOff ;
7296: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7300: LD_STRING M2X
7302: PPUSH
7303: CALL_OW 337
// SaveForQuickRestart ;
7307: CALL_OW 22
// russianAI = 1 ;
7311: LD_ADDR_EXP 13
7315: PUSH
7316: LD_INT 1
7318: ST_TO_ADDR
// end ; end ;
7319: GO 7322
7321: POP
// end ;
7322: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7323: LD_INT 32
7325: PPUSH
7326: CALL_OW 306
7330: IFFALSE 7663
7332: GO 7334
7334: DISABLE
// begin case JMMGirl of 1 :
7335: LD_EXP 7
7339: PUSH
7340: LD_INT 1
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7470
7348: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7349: LD_EXP 1
7353: PPUSH
7354: LD_STRING D6J-JMM-1
7356: PPUSH
7357: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7361: LD_STRING 13f_Denis
7363: PPUSH
7364: CALL_OW 28
7368: PUSH
7369: LD_INT 1
7371: EQUAL
7372: PUSH
7373: LD_STRING 13s_Denis
7375: PPUSH
7376: CALL_OW 28
7380: PUSH
7381: LD_INT 1
7383: EQUAL
7384: OR
7385: IFFALSE 7425
// begin Say ( Joan , D6J-Joan-1 ) ;
7387: LD_EXP 2
7391: PPUSH
7392: LD_STRING D6J-Joan-1
7394: PPUSH
7395: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7399: LD_EXP 1
7403: PPUSH
7404: LD_STRING D6J-JMM-2
7406: PPUSH
7407: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7411: LD_EXP 2
7415: PPUSH
7416: LD_STRING D6J-Joan-2
7418: PPUSH
7419: CALL_OW 88
// end else
7423: GO 7437
// begin Say ( Joan , D6J-Joan-2a ) ;
7425: LD_EXP 2
7429: PPUSH
7430: LD_STRING D6J-Joan-2a
7432: PPUSH
7433: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7437: LD_EXP 1
7441: PPUSH
7442: LD_STRING D6J-JMM-3
7444: PPUSH
7445: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7449: LD_EXP 2
7453: PPUSH
7454: LD_STRING D6J-Joan-3
7456: PPUSH
7457: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7461: LD_STRING M3
7463: PPUSH
7464: CALL_OW 337
// end ; 2 :
7468: GO 7663
7470: LD_INT 2
7472: DOUBLE
7473: EQUAL
7474: IFTRUE 7478
7476: GO 7536
7478: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7479: LD_EXP 1
7483: PPUSH
7484: LD_STRING D6L-JMM-1
7486: PPUSH
7487: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7491: LD_EXP 3
7495: PPUSH
7496: LD_STRING D6L-Lisa-1
7498: PPUSH
7499: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7503: LD_EXP 1
7507: PPUSH
7508: LD_STRING D6L-JMM-2
7510: PPUSH
7511: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7515: LD_EXP 3
7519: PPUSH
7520: LD_STRING D6L-Lisa-2
7522: PPUSH
7523: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7527: LD_STRING M3
7529: PPUSH
7530: CALL_OW 337
// end ; 3 :
7534: GO 7663
7536: LD_INT 3
7538: DOUBLE
7539: EQUAL
7540: IFTRUE 7544
7542: GO 7662
7544: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7545: LD_EXP 1
7549: PPUSH
7550: LD_STRING D6X-JMM-1
7552: PPUSH
7553: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7557: LD_EXP 4
7561: PPUSH
7562: LD_STRING D6X-Con-1
7564: PPUSH
7565: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7569: LD_EXP 1
7573: PPUSH
7574: LD_STRING D6X-JMM-2
7576: PPUSH
7577: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7581: LD_EXP 4
7585: PPUSH
7586: LD_STRING D6X-Con-2
7588: PPUSH
7589: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7593: LD_EXP 1
7597: PPUSH
7598: LD_STRING D6X-JMM-3
7600: PPUSH
7601: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7605: LD_EXP 4
7609: PPUSH
7610: LD_STRING D6X-Con-3
7612: PPUSH
7613: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7617: LD_EXP 1
7621: PPUSH
7622: LD_STRING D6X-JMM-4
7624: PPUSH
7625: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7629: LD_EXP 4
7633: PPUSH
7634: LD_STRING D6X-Con-4
7636: PPUSH
7637: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7641: LD_EXP 1
7645: PPUSH
7646: LD_STRING D6X-JMM-5
7648: PPUSH
7649: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7653: LD_STRING M3
7655: PPUSH
7656: CALL_OW 337
// end ; end ;
7660: GO 7663
7662: POP
// end ;
7663: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7664: LD_INT 22
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 33
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PPUSH
7688: CALL_OW 69
7692: PPUSH
7693: CALL_OW 306
7697: IFFALSE 7843
7699: GO 7701
7701: DISABLE
// begin case JMMGirl of 1 :
7702: LD_EXP 7
7706: PUSH
7707: LD_INT 1
7709: DOUBLE
7710: EQUAL
7711: IFTRUE 7715
7713: GO 7752
7715: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7716: LD_EXP 1
7720: PPUSH
7721: LD_STRING D5-JMM-1
7723: PPUSH
7724: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7728: LD_INT 77
7730: PPUSH
7731: LD_INT 87
7733: PPUSH
7734: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7738: LD_EXP 2
7742: PPUSH
7743: LD_STRING D5-Joan-1
7745: PPUSH
7746: CALL_OW 88
// end ; 2 :
7750: GO 7843
7752: LD_INT 2
7754: DOUBLE
7755: EQUAL
7756: IFTRUE 7760
7758: GO 7797
7760: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7761: LD_EXP 1
7765: PPUSH
7766: LD_STRING D5-JMM-1
7768: PPUSH
7769: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7773: LD_INT 77
7775: PPUSH
7776: LD_INT 87
7778: PPUSH
7779: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7783: LD_EXP 3
7787: PPUSH
7788: LD_STRING D5-Lisa-1
7790: PPUSH
7791: CALL_OW 88
// end ; 3 :
7795: GO 7843
7797: LD_INT 3
7799: DOUBLE
7800: EQUAL
7801: IFTRUE 7805
7803: GO 7842
7805: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7806: LD_EXP 1
7810: PPUSH
7811: LD_STRING D5-JMM-1
7813: PPUSH
7814: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7818: LD_INT 77
7820: PPUSH
7821: LD_INT 87
7823: PPUSH
7824: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7828: LD_EXP 4
7832: PPUSH
7833: LD_STRING D5-Con-1
7835: PPUSH
7836: CALL_OW 88
// end ; end ;
7840: GO 7843
7842: POP
// end ;
7843: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7844: LD_INT 48
7846: PPUSH
7847: CALL_OW 255
7851: PUSH
7852: LD_INT 1
7854: EQUAL
7855: IFFALSE 7952
7857: GO 7859
7859: DISABLE
// begin DialogueOn ;
7860: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7864: LD_EXP 5
7868: PPUSH
7869: LD_STRING D7-Pow-1
7871: PPUSH
7872: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7876: LD_EXP 1
7880: PPUSH
7881: LD_STRING D7-JMM-1
7883: PPUSH
7884: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7888: LD_EXP 5
7892: PPUSH
7893: LD_STRING D7-Pow-2
7895: PPUSH
7896: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7900: LD_EXP 1
7904: PPUSH
7905: LD_STRING D7-JMM-2
7907: PPUSH
7908: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7912: LD_EXP 5
7916: PPUSH
7917: LD_STRING D7-Pow-3
7919: PPUSH
7920: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7924: LD_EXP 1
7928: PPUSH
7929: LD_STRING D7-JMM-3
7931: PPUSH
7932: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7936: LD_EXP 5
7940: PPUSH
7941: LD_STRING D7-Pow-4
7943: PPUSH
7944: CALL_OW 94
// DialogueOff ;
7948: CALL_OW 7
// end ; end_of_file
7952: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7953: LD_VAR 0 1
7957: PPUSH
7958: CALL_OW 255
7962: PUSH
7963: LD_INT 3
7965: EQUAL
7966: IFFALSE 8040
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7968: LD_ADDR_EXP 10
7972: PUSH
7973: LD_EXP 10
7977: PPUSH
7978: LD_INT 1
7980: PPUSH
7981: CALL_OW 3
7985: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7986: LD_ADDR_EXP 10
7990: PUSH
7991: LD_EXP 10
7995: PPUSH
7996: LD_INT 1
7998: PPUSH
7999: CALL_OW 3
8003: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
8004: LD_ADDR_EXP 10
8008: PUSH
8009: LD_EXP 10
8013: PPUSH
8014: LD_INT 1
8016: PPUSH
8017: CALL_OW 3
8021: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
8022: LD_ADDR_EXP 10
8026: PUSH
8027: LD_EXP 10
8031: PPUSH
8032: LD_INT 1
8034: PPUSH
8035: CALL_OW 3
8039: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 255
8049: PUSH
8050: LD_INT 3
8052: EQUAL
8053: PUSH
8054: LD_VAR 0 1
8058: PPUSH
8059: CALL_OW 266
8063: PUSH
8064: LD_INT 0
8066: EQUAL
8067: PUSH
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL_OW 266
8077: PUSH
8078: LD_INT 2
8080: EQUAL
8081: OR
8082: PUSH
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 266
8092: PUSH
8093: LD_INT 4
8095: EQUAL
8096: OR
8097: PUSH
8098: EMPTY
8099: LIST
8100: AND
8101: IFFALSE 8112
// ComUpgrade ( building ) ;
8103: LD_VAR 0 1
8107: PPUSH
8108: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8112: LD_VAR 0 1
8116: PPUSH
8117: CALL_OW 255
8121: PUSH
8122: LD_INT 3
8124: EQUAL
8125: PUSH
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 266
8135: PUSH
8136: LD_INT 32
8138: EQUAL
8139: AND
8140: IFFALSE 8181
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8142: LD_VAR 0 1
8146: PPUSH
8147: LD_INT 42
8149: PUSH
8150: LD_INT 43
8152: PUSH
8153: LD_INT 44
8155: PUSH
8156: LD_INT 46
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: PUSH
8165: LD_INT 1
8167: PPUSH
8168: LD_INT 4
8170: PPUSH
8171: CALL_OW 12
8175: ARRAY
8176: PPUSH
8177: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
8181: LD_VAR 0 1
8185: PPUSH
8186: CALL_OW 255
8190: PUSH
8191: LD_INT 3
8193: EQUAL
8194: PUSH
8195: LD_VAR 0 1
8199: PPUSH
8200: CALL_OW 266
8204: PUSH
8205: LD_INT 33
8207: EQUAL
8208: AND
8209: IFFALSE 8250
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_INT 42
8218: PUSH
8219: LD_INT 43
8221: PUSH
8222: LD_INT 44
8224: PUSH
8225: LD_INT 46
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 1
8236: PPUSH
8237: LD_INT 4
8239: PPUSH
8240: CALL_OW 12
8244: ARRAY
8245: PPUSH
8246: CALL_OW 208
// end ;
8250: PPOPN 1
8252: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
8253: LD_VAR 0 1
8257: PPUSH
8258: CALL 25230 0 1
// if unit in russianTanks then
8262: LD_VAR 0 1
8266: PUSH
8267: LD_EXP 11
8271: IN
8272: IFFALSE 8290
// russianTanks := russianTanks diff unit ;
8274: LD_ADDR_EXP 11
8278: PUSH
8279: LD_EXP 11
8283: PUSH
8284: LD_VAR 0 1
8288: DIFF
8289: ST_TO_ADDR
// if unit in russianTimeLapsers then
8290: LD_VAR 0 1
8294: PUSH
8295: LD_EXP 12
8299: IN
8300: IFFALSE 8318
// russianTimeLapsers := russianTimeLapsers diff unit ;
8302: LD_ADDR_EXP 12
8306: PUSH
8307: LD_EXP 12
8311: PUSH
8312: LD_VAR 0 1
8316: DIFF
8317: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 255
8327: PUSH
8328: LD_INT 3
8330: EQUAL
8331: PUSH
8332: LD_VAR 0 1
8336: PPUSH
8337: CALL_OW 247
8341: PUSH
8342: LD_INT 3
8344: EQUAL
8345: AND
8346: IFFALSE 8810
// begin if GetBType ( unit ) in [ 31 , 32 , 36 , 0 , 24 , 17 , 25 , 19 , 20 , 18 , 21 , 23 , 16 , 6 , 29 , 26 , 30 , 28 , 27 , 33 , 2 , 4 ] then
8348: LD_VAR 0 1
8352: PPUSH
8353: CALL_OW 266
8357: PUSH
8358: LD_INT 31
8360: PUSH
8361: LD_INT 32
8363: PUSH
8364: LD_INT 36
8366: PUSH
8367: LD_INT 0
8369: PUSH
8370: LD_INT 24
8372: PUSH
8373: LD_INT 17
8375: PUSH
8376: LD_INT 25
8378: PUSH
8379: LD_INT 19
8381: PUSH
8382: LD_INT 20
8384: PUSH
8385: LD_INT 18
8387: PUSH
8388: LD_INT 21
8390: PUSH
8391: LD_INT 23
8393: PUSH
8394: LD_INT 16
8396: PUSH
8397: LD_INT 6
8399: PUSH
8400: LD_INT 29
8402: PUSH
8403: LD_INT 26
8405: PUSH
8406: LD_INT 30
8408: PUSH
8409: LD_INT 28
8411: PUSH
8412: LD_INT 27
8414: PUSH
8415: LD_INT 33
8417: PUSH
8418: LD_INT 2
8420: PUSH
8421: LD_INT 4
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: IN
8448: IFFALSE 8534
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8450: LD_ADDR_EXP 10
8454: PUSH
8455: LD_EXP 10
8459: PUSH
8460: LD_VAR 0 1
8464: PPUSH
8465: CALL_OW 266
8469: ADD
8470: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8471: LD_ADDR_EXP 10
8475: PUSH
8476: LD_EXP 10
8480: PUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 250
8490: ADD
8491: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8492: LD_ADDR_EXP 10
8496: PUSH
8497: LD_EXP 10
8501: PUSH
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 251
8511: ADD
8512: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8513: LD_ADDR_EXP 10
8517: PUSH
8518: LD_EXP 10
8522: PUSH
8523: LD_VAR 0 1
8527: PPUSH
8528: CALL_OW 254
8532: ADD
8533: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8534: LD_VAR 0 1
8538: PPUSH
8539: CALL_OW 266
8543: PUSH
8544: LD_INT 1
8546: EQUAL
8547: IFFALSE 8626
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8549: LD_ADDR_EXP 10
8553: PUSH
8554: LD_EXP 10
8558: PUSH
8559: LD_INT 0
8561: ADD
8562: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8563: LD_ADDR_EXP 10
8567: PUSH
8568: LD_EXP 10
8572: PUSH
8573: LD_VAR 0 1
8577: PPUSH
8578: CALL_OW 250
8582: ADD
8583: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8584: LD_ADDR_EXP 10
8588: PUSH
8589: LD_EXP 10
8593: PUSH
8594: LD_VAR 0 1
8598: PPUSH
8599: CALL_OW 251
8603: ADD
8604: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8605: LD_ADDR_EXP 10
8609: PUSH
8610: LD_EXP 10
8614: PUSH
8615: LD_VAR 0 1
8619: PPUSH
8620: CALL_OW 254
8624: ADD
8625: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8626: LD_VAR 0 1
8630: PPUSH
8631: CALL_OW 266
8635: PUSH
8636: LD_INT 3
8638: EQUAL
8639: IFFALSE 8718
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8641: LD_ADDR_EXP 10
8645: PUSH
8646: LD_EXP 10
8650: PUSH
8651: LD_INT 2
8653: ADD
8654: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8655: LD_ADDR_EXP 10
8659: PUSH
8660: LD_EXP 10
8664: PUSH
8665: LD_VAR 0 1
8669: PPUSH
8670: CALL_OW 250
8674: ADD
8675: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8676: LD_ADDR_EXP 10
8680: PUSH
8681: LD_EXP 10
8685: PUSH
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 251
8695: ADD
8696: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8697: LD_ADDR_EXP 10
8701: PUSH
8702: LD_EXP 10
8706: PUSH
8707: LD_VAR 0 1
8711: PPUSH
8712: CALL_OW 254
8716: ADD
8717: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8718: LD_VAR 0 1
8722: PPUSH
8723: CALL_OW 266
8727: PUSH
8728: LD_INT 5
8730: EQUAL
8731: IFFALSE 8810
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8733: LD_ADDR_EXP 10
8737: PUSH
8738: LD_EXP 10
8742: PUSH
8743: LD_INT 4
8745: ADD
8746: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8747: LD_ADDR_EXP 10
8751: PUSH
8752: LD_EXP 10
8756: PUSH
8757: LD_VAR 0 1
8761: PPUSH
8762: CALL_OW 250
8766: ADD
8767: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8768: LD_ADDR_EXP 10
8772: PUSH
8773: LD_EXP 10
8777: PUSH
8778: LD_VAR 0 1
8782: PPUSH
8783: CALL_OW 251
8787: ADD
8788: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8789: LD_ADDR_EXP 10
8793: PUSH
8794: LD_EXP 10
8798: PUSH
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 254
8808: ADD
8809: ST_TO_ADDR
// end ; end ; end ;
8810: PPOPN 1
8812: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8813: LD_VAR 0 3
8817: PPUSH
8818: CALL_OW 264
8822: PUSH
8823: LD_INT 10
8825: EQUAL
8826: IFFALSE 8842
// destroyCounter := destroyCounter + 1 ;
8828: LD_ADDR_EXP 17
8832: PUSH
8833: LD_EXP 17
8837: PUSH
8838: LD_INT 1
8840: PLUS
8841: ST_TO_ADDR
// end ;
8842: PPOPN 3
8844: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
8845: LD_VAR 0 1
8849: PPUSH
8850: LD_VAR 0 2
8854: PPUSH
8855: CALL 25352 0 2
// if factory = ru_fact1 or factory = ru_fact2 then
8859: LD_VAR 0 2
8863: PUSH
8864: LD_INT 1
8866: EQUAL
8867: PUSH
8868: LD_VAR 0 2
8872: PUSH
8873: LD_INT 40
8875: EQUAL
8876: OR
8877: IFFALSE 9001
// if GetSide ( vehicle ) = 3 then
8879: LD_VAR 0 1
8883: PPUSH
8884: CALL_OW 255
8888: PUSH
8889: LD_INT 3
8891: EQUAL
8892: IFFALSE 9001
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8894: LD_VAR 0 1
8898: PPUSH
8899: CALL_OW 264
8903: PUSH
8904: LD_INT 47
8906: EQUAL
8907: PUSH
8908: LD_VAR 0 1
8912: PPUSH
8913: CALL_OW 264
8917: PUSH
8918: LD_INT 46
8920: EQUAL
8921: OR
8922: PUSH
8923: LD_VAR 0 1
8927: PPUSH
8928: CALL_OW 264
8932: PUSH
8933: LD_INT 45
8935: EQUAL
8936: OR
8937: PUSH
8938: LD_VAR 0 1
8942: PPUSH
8943: CALL_OW 264
8947: PUSH
8948: LD_INT 44
8950: EQUAL
8951: OR
8952: IFFALSE 8970
// russianTanks = russianTanks ^ vehicle ;
8954: LD_ADDR_EXP 11
8958: PUSH
8959: LD_EXP 11
8963: PUSH
8964: LD_VAR 0 1
8968: ADD
8969: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8970: LD_VAR 0 1
8974: PPUSH
8975: CALL_OW 264
8979: PUSH
8980: LD_INT 49
8982: EQUAL
8983: IFFALSE 9001
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8985: LD_ADDR_EXP 12
8989: PUSH
8990: LD_EXP 12
8994: PUSH
8995: LD_VAR 0 1
8999: ADD
9000: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
9001: LD_VAR 0 1
9005: PPUSH
9006: CALL_OW 255
9010: PUSH
9011: LD_INT 1
9013: EQUAL
9014: PUSH
9015: LD_VAR 0 1
9019: PPUSH
9020: CALL_OW 264
9024: PUSH
9025: LD_INT 10
9027: EQUAL
9028: AND
9029: IFFALSE 9045
// amLaserCounter = amLaserCounter + 1 ;
9031: LD_ADDR_EXP 9
9035: PUSH
9036: LD_EXP 9
9040: PUSH
9041: LD_INT 1
9043: PLUS
9044: ST_TO_ADDR
// end ;
9045: PPOPN 2
9047: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
9048: LD_VAR 0 1
9052: PPUSH
9053: CALL 25336 0 1
// end ; end_of_file
9057: PPOPN 1
9059: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
9060: LD_EXP 1
9064: PPUSH
9065: CALL_OW 310
9069: PPUSH
9070: LD_INT 12
9072: PPUSH
9073: CALL_OW 308
9077: PUSH
9078: LD_EXP 15
9082: PUSH
9083: LD_INT 0
9085: EQUAL
9086: AND
9087: IFFALSE 9433
9089: GO 9091
9091: DISABLE
9092: LD_INT 0
9094: PPUSH
9095: PPUSH
// begin enable ;
9096: ENABLE
// if JMMGirl = 1 then
9097: LD_EXP 7
9101: PUSH
9102: LD_INT 1
9104: EQUAL
9105: IFFALSE 9122
// JMMGirlVeh = IsInUnit ( Joan ) ;
9107: LD_ADDR_VAR 0 1
9111: PUSH
9112: LD_EXP 2
9116: PPUSH
9117: CALL_OW 310
9121: ST_TO_ADDR
// if JMMGirl = 2 then
9122: LD_EXP 7
9126: PUSH
9127: LD_INT 2
9129: EQUAL
9130: IFFALSE 9147
// JMMGirlVeh = IsInUnit ( Lisa ) ;
9132: LD_ADDR_VAR 0 1
9136: PUSH
9137: LD_EXP 3
9141: PPUSH
9142: CALL_OW 310
9146: ST_TO_ADDR
// if JMMGirl = 3 then
9147: LD_EXP 7
9151: PUSH
9152: LD_INT 3
9154: EQUAL
9155: IFFALSE 9172
// JMMGirlVeh = IsInUnit ( Connie ) ;
9157: LD_ADDR_VAR 0 1
9161: PUSH
9162: LD_EXP 4
9166: PPUSH
9167: CALL_OW 310
9171: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9172: LD_EXP 1
9176: PPUSH
9177: CALL_OW 310
9181: PPUSH
9182: LD_EXP 2
9186: PPUSH
9187: CALL_OW 310
9191: PPUSH
9192: CALL_OW 296
9196: PUSH
9197: LD_INT 10
9199: LESS
9200: PUSH
9201: LD_EXP 1
9205: PPUSH
9206: CALL_OW 310
9210: PPUSH
9211: LD_EXP 3
9215: PPUSH
9216: CALL_OW 310
9220: PPUSH
9221: CALL_OW 296
9225: PUSH
9226: LD_INT 10
9228: LESS
9229: OR
9230: PUSH
9231: LD_EXP 1
9235: PPUSH
9236: CALL_OW 310
9240: PPUSH
9241: LD_EXP 4
9245: PPUSH
9246: CALL_OW 310
9250: PPUSH
9251: CALL_OW 296
9255: PUSH
9256: LD_INT 10
9258: LESS
9259: OR
9260: IFFALSE 9354
// begin case Query ( Q3b ) of 1 :
9262: LD_STRING Q3b
9264: PPUSH
9265: CALL_OW 97
9269: PUSH
9270: LD_INT 1
9272: DOUBLE
9273: EQUAL
9274: IFTRUE 9278
9276: GO 9351
9278: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9279: LD_VAR 0 1
9283: PPUSH
9284: CALL_OW 265
9288: PUSH
9289: EMPTY
9290: LIST
9291: PUSH
9292: LD_VAR 0 1
9296: PPUSH
9297: CALL_OW 262
9301: PUSH
9302: EMPTY
9303: LIST
9304: PUSH
9305: LD_VAR 0 1
9309: PPUSH
9310: CALL_OW 263
9314: PUSH
9315: EMPTY
9316: LIST
9317: PUSH
9318: LD_VAR 0 1
9322: PPUSH
9323: CALL_OW 264
9327: PUSH
9328: EMPTY
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: PPUSH
9337: LD_STRING 14_JMMGirlVeh_1
9339: PPUSH
9340: CALL_OW 39
// FinishMission ;
9344: CALL 9574 0 0
// disable ;
9348: DISABLE
// end ; end ;
9349: GO 9352
9351: POP
// end else
9352: GO 9433
// begin if JMMGirl = 1 then
9354: LD_EXP 7
9358: PUSH
9359: LD_INT 1
9361: EQUAL
9362: IFFALSE 9379
// dec := Query ( Q3bJ ) else
9364: LD_ADDR_VAR 0 2
9368: PUSH
9369: LD_STRING Q3bJ
9371: PPUSH
9372: CALL_OW 97
9376: ST_TO_ADDR
9377: GO 9417
// if JMMGirl = 2 then
9379: LD_EXP 7
9383: PUSH
9384: LD_INT 2
9386: EQUAL
9387: IFFALSE 9404
// dec := Query ( Q3bL ) else
9389: LD_ADDR_VAR 0 2
9393: PUSH
9394: LD_STRING Q3bL
9396: PPUSH
9397: CALL_OW 97
9401: ST_TO_ADDR
9402: GO 9417
// dec := Query ( Q3bX ) ;
9404: LD_ADDR_VAR 0 2
9408: PUSH
9409: LD_STRING Q3bX
9411: PPUSH
9412: CALL_OW 97
9416: ST_TO_ADDR
// if dec = 1 then
9417: LD_VAR 0 2
9421: PUSH
9422: LD_INT 1
9424: EQUAL
9425: IFFALSE 9433
// begin FinishMission ;
9427: CALL 9574 0 0
// exit ;
9431: GO 9433
// end ; end ; end ;
9433: PPOPN 2
9435: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9436: LD_INT 22
9438: PUSH
9439: LD_INT 3
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 21
9448: PUSH
9449: LD_INT 1
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PPUSH
9460: CALL_OW 69
9464: PUSH
9465: LD_INT 0
9467: EQUAL
9468: PUSH
9469: LD_EXP 15
9473: PUSH
9474: LD_INT 0
9476: EQUAL
9477: AND
9478: IFFALSE 9573
9480: GO 9482
9482: DISABLE
// begin DialogueOn ;
9483: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9487: LD_EXP 1
9491: PPUSH
9492: LD_STRING DEnd-JMM-1
9494: PPUSH
9495: CALL_OW 88
// if JMMGirl = 1 then
9499: LD_EXP 7
9503: PUSH
9504: LD_INT 1
9506: EQUAL
9507: IFFALSE 9521
// Say ( Joan , DEnd-Joan-1 ) ;
9509: LD_EXP 2
9513: PPUSH
9514: LD_STRING DEnd-Joan-1
9516: PPUSH
9517: CALL_OW 88
// if JMMGirl = 2 then
9521: LD_EXP 7
9525: PUSH
9526: LD_INT 2
9528: EQUAL
9529: IFFALSE 9543
// Say ( Lisa , DEnd-Lisa-1 ) ;
9531: LD_EXP 3
9535: PPUSH
9536: LD_STRING DEnd-Lisa-1
9538: PPUSH
9539: CALL_OW 88
// if JMMGirl = 3 then
9543: LD_EXP 7
9547: PUSH
9548: LD_INT 3
9550: EQUAL
9551: IFFALSE 9565
// Say ( Connie , DEnd-Con-1 ) ;
9553: LD_EXP 4
9557: PPUSH
9558: LD_STRING DEnd-Con-1
9560: PPUSH
9561: CALL_OW 88
// DialogueOff ;
9565: CALL_OW 7
// FinishMission ;
9569: CALL 9574 0 0
// end ;
9573: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9574: LD_INT 0
9576: PPUSH
9577: PPUSH
9578: PPUSH
9579: PPUSH
9580: PPUSH
// m1 := false ;
9581: LD_ADDR_VAR 0 3
9585: PUSH
9586: LD_INT 0
9588: ST_TO_ADDR
// m2 := false ;
9589: LD_ADDR_VAR 0 4
9593: PUSH
9594: LD_INT 0
9596: ST_TO_ADDR
// m3 := false ;
9597: LD_ADDR_VAR 0 5
9601: PUSH
9602: LD_INT 0
9604: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9605: LD_EXP 1
9609: PPUSH
9610: LD_STRING 14_JMM
9612: PPUSH
9613: CALL_OW 38
// if tick <= 50 50$00 then
9617: LD_OWVAR 1
9621: PUSH
9622: LD_INT 105000
9624: LESSEQUAL
9625: IFFALSE 9634
// SetAchievement ( ACH_ASPEED_14 ) ;
9627: LD_STRING ACH_ASPEED_14
9629: PPUSH
9630: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9634: LD_EXP 1
9638: PPUSH
9639: CALL_OW 310
9643: PUSH
9644: LD_EXP 1
9648: PPUSH
9649: CALL_OW 310
9653: PPUSH
9654: CALL_OW 247
9658: PUSH
9659: LD_INT 2
9661: EQUAL
9662: AND
9663: IFFALSE 9745
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9665: LD_ADDR_VAR 0 2
9669: PUSH
9670: LD_EXP 1
9674: PPUSH
9675: CALL_OW 310
9679: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9680: LD_VAR 0 2
9684: PPUSH
9685: CALL_OW 265
9689: PUSH
9690: EMPTY
9691: LIST
9692: PUSH
9693: LD_VAR 0 2
9697: PPUSH
9698: CALL_OW 262
9702: PUSH
9703: EMPTY
9704: LIST
9705: PUSH
9706: LD_VAR 0 2
9710: PPUSH
9711: CALL_OW 263
9715: PUSH
9716: EMPTY
9717: LIST
9718: PUSH
9719: LD_VAR 0 2
9723: PPUSH
9724: CALL_OW 264
9728: PUSH
9729: EMPTY
9730: LIST
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: PPUSH
9738: LD_STRING 14_JMMVeh_1
9740: PPUSH
9741: CALL_OW 39
// end ; if fastEnd = 1 then
9745: LD_EXP 15
9749: PUSH
9750: LD_INT 1
9752: EQUAL
9753: IFFALSE 9842
// begin AddMedal ( fastend , - 1 ) ;
9755: LD_STRING fastend
9757: PPUSH
9758: LD_INT 1
9760: NEG
9761: PPUSH
9762: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9766: LD_STRING fastend
9768: PPUSH
9769: LD_INT 1
9771: NEG
9772: PPUSH
9773: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9777: LD_STRING fastend
9779: PPUSH
9780: LD_INT 1
9782: NEG
9783: PPUSH
9784: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9788: LD_EXP 7
9792: PPUSH
9793: LD_STRING 14_JMMGirl_1
9795: PPUSH
9796: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9800: LD_INT 0
9802: PPUSH
9803: LD_STRING 14_JMMGirlStatus_1
9805: PPUSH
9806: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9810: LD_INT 0
9812: PPUSH
9813: LD_STRING 14_KappaStatus_1
9815: PPUSH
9816: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9820: LD_STRING Eliminate
9822: PPUSH
9823: CALL_OW 102
// RewardPeople ( JMM ) ;
9827: LD_EXP 1
9831: PPUSH
9832: CALL_OW 43
// YouWin ;
9836: CALL_OW 103
// exit ;
9840: GO 10667
// end ; if fastEnd = 0 then
9842: LD_EXP 15
9846: PUSH
9847: LD_INT 0
9849: EQUAL
9850: IFFALSE 10560
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9852: LD_EXP 7
9856: PPUSH
9857: LD_STRING 14_JMMGirl_1
9859: PPUSH
9860: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9864: LD_INT 22
9866: PUSH
9867: LD_INT 3
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 1
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PPUSH
9888: CALL_OW 69
9892: PUSH
9893: LD_INT 0
9895: EQUAL
9896: PUSH
9897: LD_INT 48
9899: PPUSH
9900: CALL_OW 255
9904: PUSH
9905: LD_INT 1
9907: EQUAL
9908: AND
9909: IFFALSE 9923
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9911: LD_INT 1
9913: PPUSH
9914: LD_STRING 14_KappaStatus_1
9916: PPUSH
9917: CALL_OW 39
9921: GO 9933
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9923: LD_INT 0
9925: PPUSH
9926: LD_STRING 14_KappaStatus_1
9928: PPUSH
9929: CALL_OW 39
// case JMMGirl of 1 :
9933: LD_EXP 7
9937: PUSH
9938: LD_INT 1
9940: DOUBLE
9941: EQUAL
9942: IFTRUE 9946
9944: GO 10102
9946: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9947: LD_EXP 2
9951: PPUSH
9952: CALL_OW 302
9956: PUSH
9957: LD_EXP 2
9961: PPUSH
9962: CALL_OW 255
9966: PUSH
9967: LD_INT 1
9969: EQUAL
9970: AND
9971: PUSH
9972: LD_INT 22
9974: PUSH
9975: LD_INT 3
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: LD_INT 21
9984: PUSH
9985: LD_INT 1
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PPUSH
9996: CALL_OW 69
10000: PUSH
10001: LD_INT 0
10003: EQUAL
10004: PUSH
10005: LD_EXP 1
10009: PPUSH
10010: CALL_OW 310
10014: PPUSH
10015: LD_EXP 2
10019: PPUSH
10020: CALL_OW 310
10024: PPUSH
10025: CALL_OW 296
10029: PUSH
10030: LD_INT 10
10032: LESS
10033: OR
10034: AND
10035: IFFALSE 10079
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10037: LD_INT 1
10039: PPUSH
10040: LD_STRING 14_JMMGirlStatus_1
10042: PPUSH
10043: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10047: LD_EXP 2
10051: PPUSH
10052: LD_STRING 14_Joan
10054: PPUSH
10055: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10059: LD_STRING protect
10061: PPUSH
10062: LD_INT 1
10064: PPUSH
10065: CALL_OW 101
// m1 := true ;
10069: LD_ADDR_VAR 0 3
10073: PUSH
10074: LD_INT 1
10076: ST_TO_ADDR
// end else
10077: GO 10100
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10079: LD_INT 0
10081: PPUSH
10082: LD_STRING 14_JMMGirlStatus_1
10084: PPUSH
10085: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10089: LD_STRING protect
10091: PPUSH
10092: LD_INT 1
10094: NEG
10095: PPUSH
10096: CALL_OW 101
// end ; end ; 2 :
10100: GO 10431
10102: LD_INT 2
10104: DOUBLE
10105: EQUAL
10106: IFTRUE 10110
10108: GO 10266
10110: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10111: LD_EXP 3
10115: PPUSH
10116: CALL_OW 302
10120: PUSH
10121: LD_EXP 3
10125: PPUSH
10126: CALL_OW 255
10130: PUSH
10131: LD_INT 1
10133: EQUAL
10134: AND
10135: PUSH
10136: LD_INT 22
10138: PUSH
10139: LD_INT 3
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: LD_INT 21
10148: PUSH
10149: LD_INT 1
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PPUSH
10160: CALL_OW 69
10164: PUSH
10165: LD_INT 0
10167: EQUAL
10168: PUSH
10169: LD_EXP 1
10173: PPUSH
10174: CALL_OW 310
10178: PPUSH
10179: LD_EXP 3
10183: PPUSH
10184: CALL_OW 310
10188: PPUSH
10189: CALL_OW 296
10193: PUSH
10194: LD_INT 10
10196: LESS
10197: OR
10198: AND
10199: IFFALSE 10243
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10201: LD_INT 1
10203: PPUSH
10204: LD_STRING 14_JMMGirlStatus_1
10206: PPUSH
10207: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10211: LD_EXP 3
10215: PPUSH
10216: LD_STRING 14_Lisa
10218: PPUSH
10219: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10223: LD_STRING protect
10225: PPUSH
10226: LD_INT 1
10228: PPUSH
10229: CALL_OW 101
// m1 := true ;
10233: LD_ADDR_VAR 0 3
10237: PUSH
10238: LD_INT 1
10240: ST_TO_ADDR
// end else
10241: GO 10264
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10243: LD_INT 0
10245: PPUSH
10246: LD_STRING 14_JMMGirlStatus_1
10248: PPUSH
10249: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10253: LD_STRING protect
10255: PPUSH
10256: LD_INT 2
10258: NEG
10259: PPUSH
10260: CALL_OW 101
// end ; end ; 3 :
10264: GO 10431
10266: LD_INT 3
10268: DOUBLE
10269: EQUAL
10270: IFTRUE 10274
10272: GO 10430
10274: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10275: LD_EXP 4
10279: PPUSH
10280: CALL_OW 302
10284: PUSH
10285: LD_EXP 4
10289: PPUSH
10290: CALL_OW 255
10294: PUSH
10295: LD_INT 1
10297: EQUAL
10298: AND
10299: PUSH
10300: LD_INT 22
10302: PUSH
10303: LD_INT 3
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: LD_INT 21
10312: PUSH
10313: LD_INT 1
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PPUSH
10324: CALL_OW 69
10328: PUSH
10329: LD_INT 0
10331: EQUAL
10332: PUSH
10333: LD_EXP 1
10337: PPUSH
10338: CALL_OW 310
10342: PPUSH
10343: LD_EXP 4
10347: PPUSH
10348: CALL_OW 310
10352: PPUSH
10353: CALL_OW 296
10357: PUSH
10358: LD_INT 10
10360: LESS
10361: OR
10362: AND
10363: IFFALSE 10407
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10365: LD_INT 1
10367: PPUSH
10368: LD_STRING 14_JMMGirlStatus_1
10370: PPUSH
10371: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10375: LD_EXP 4
10379: PPUSH
10380: LD_STRING 14_Connie
10382: PPUSH
10383: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10387: LD_STRING protect
10389: PPUSH
10390: LD_INT 1
10392: PPUSH
10393: CALL_OW 101
// m1 := true ;
10397: LD_ADDR_VAR 0 3
10401: PUSH
10402: LD_INT 1
10404: ST_TO_ADDR
// end else
10405: GO 10428
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10407: LD_INT 0
10409: PPUSH
10410: LD_STRING 14_JMMGirlStatus_1
10412: PPUSH
10413: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10417: LD_STRING protect
10419: PPUSH
10420: LD_INT 3
10422: NEG
10423: PPUSH
10424: CALL_OW 101
// end ; end ; end ;
10428: GO 10431
10430: POP
// if amLaserCounter >= 2 then
10431: LD_EXP 9
10435: PUSH
10436: LD_INT 2
10438: GREATEREQUAL
10439: IFFALSE 10461
// begin AddMedal ( double , 1 ) ;
10441: LD_STRING double
10443: PPUSH
10444: LD_INT 1
10446: PPUSH
10447: CALL_OW 101
// m2 := true ;
10451: LD_ADDR_VAR 0 4
10455: PUSH
10456: LD_INT 1
10458: ST_TO_ADDR
// end else
10459: GO 10495
// begin if amLaserCounter = 1 then
10461: LD_EXP 9
10465: PUSH
10466: LD_INT 1
10468: EQUAL
10469: IFFALSE 10484
// AddMedal ( double , - 2 ) else
10471: LD_STRING double
10473: PPUSH
10474: LD_INT 2
10476: NEG
10477: PPUSH
10478: CALL_OW 101
10482: GO 10495
// AddMedal ( double , - 1 ) ;
10484: LD_STRING double
10486: PPUSH
10487: LD_INT 1
10489: NEG
10490: PPUSH
10491: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10495: LD_INT 22
10497: PUSH
10498: LD_INT 3
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 21
10507: PUSH
10508: LD_INT 1
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PPUSH
10519: CALL_OW 69
10523: PUSH
10524: LD_INT 0
10526: EQUAL
10527: IFFALSE 10549
// begin AddMedal ( base , 1 ) ;
10529: LD_STRING base
10531: PPUSH
10532: LD_INT 1
10534: PPUSH
10535: CALL_OW 101
// m3 := true ;
10539: LD_ADDR_VAR 0 5
10543: PUSH
10544: LD_INT 1
10546: ST_TO_ADDR
// end else
10547: GO 10560
// AddMedal ( base , - 1 ) ;
10549: LD_STRING base
10551: PPUSH
10552: LD_INT 1
10554: NEG
10555: PPUSH
10556: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10560: LD_VAR 0 3
10564: PUSH
10565: LD_VAR 0 4
10569: AND
10570: PUSH
10571: LD_VAR 0 5
10575: AND
10576: PUSH
10577: LD_OWVAR 67
10581: PUSH
10582: LD_INT 3
10584: GREATEREQUAL
10585: AND
10586: IFFALSE 10598
// SetAchievementEX ( ACH_AMER , 14 ) ;
10588: LD_STRING ACH_AMER
10590: PPUSH
10591: LD_INT 14
10593: PPUSH
10594: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10598: LD_STRING Eliminate
10600: PPUSH
10601: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10605: LD_INT 22
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 3
10617: PUSH
10618: LD_INT 25
10620: PUSH
10621: LD_INT 12
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: LD_INT 3
10634: PUSH
10635: LD_INT 25
10637: PUSH
10638: LD_INT 16
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: LIST
10653: PPUSH
10654: CALL_OW 69
10658: PPUSH
10659: CALL_OW 43
// YouWin ;
10663: CALL_OW 103
// end ; end_of_file
10667: LD_VAR 0 1
10671: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10672: LD_EXP 1
10676: PPUSH
10677: CALL_OW 301
10681: IFFALSE 10693
10683: GO 10685
10685: DISABLE
// YouLost ( JMM ) ; end_of_file
10686: LD_STRING JMM
10688: PPUSH
10689: CALL_OW 104
10693: END
// every 1 1$0 do
10694: GO 10696
10696: DISABLE
// begin enable ;
10697: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10698: LD_INT 3
10700: PPUSH
10701: LD_INT 5
10703: PPUSH
10704: CALL_OW 12
10708: PPUSH
10709: LD_INT 13
10711: PPUSH
10712: LD_INT 1
10714: PPUSH
10715: CALL_OW 55
// end ; end_of_file
10719: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10720: LD_INT 0
10722: PPUSH
// ar_miner := 81 ;
10723: LD_ADDR_EXP 26
10727: PUSH
10728: LD_INT 81
10730: ST_TO_ADDR
// ar_crane := 88 ;
10731: LD_ADDR_EXP 25
10735: PUSH
10736: LD_INT 88
10738: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10739: LD_ADDR_EXP 20
10743: PUSH
10744: LD_INT 89
10746: ST_TO_ADDR
// us_hack := 99 ;
10747: LD_ADDR_EXP 21
10751: PUSH
10752: LD_INT 99
10754: ST_TO_ADDR
// us_artillery := 97 ;
10755: LD_ADDR_EXP 22
10759: PUSH
10760: LD_INT 97
10762: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10763: LD_ADDR_EXP 23
10767: PUSH
10768: LD_INT 91
10770: ST_TO_ADDR
// ar_mortar := 92 ;
10771: LD_ADDR_EXP 24
10775: PUSH
10776: LD_INT 92
10778: ST_TO_ADDR
// ru_flamethrower := 93 ;
10779: LD_ADDR_EXP 27
10783: PUSH
10784: LD_INT 93
10786: ST_TO_ADDR
// ru_radar := 98 ;
10787: LD_ADDR_EXP 19
10791: PUSH
10792: LD_INT 98
10794: ST_TO_ADDR
// tech_Artillery := 80 ;
10795: LD_ADDR_EXP 28
10799: PUSH
10800: LD_INT 80
10802: ST_TO_ADDR
// tech_RadMat := 81 ;
10803: LD_ADDR_EXP 29
10807: PUSH
10808: LD_INT 81
10810: ST_TO_ADDR
// tech_BasicTools := 82 ;
10811: LD_ADDR_EXP 30
10815: PUSH
10816: LD_INT 82
10818: ST_TO_ADDR
// tech_Cargo := 83 ;
10819: LD_ADDR_EXP 31
10823: PUSH
10824: LD_INT 83
10826: ST_TO_ADDR
// tech_Track := 84 ;
10827: LD_ADDR_EXP 32
10831: PUSH
10832: LD_INT 84
10834: ST_TO_ADDR
// tech_Crane := 85 ;
10835: LD_ADDR_EXP 33
10839: PUSH
10840: LD_INT 85
10842: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10843: LD_ADDR_EXP 34
10847: PUSH
10848: LD_INT 86
10850: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10851: LD_ADDR_EXP 35
10855: PUSH
10856: LD_INT 87
10858: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10859: LD_ADDR_EXP 36
10863: PUSH
10864: LD_INT 88
10866: ST_TO_ADDR
// class_mastodont := 31 ;
10867: LD_ADDR_EXP 37
10871: PUSH
10872: LD_INT 31
10874: ST_TO_ADDR
// class_horse := 21 ;
10875: LD_ADDR_EXP 38
10879: PUSH
10880: LD_INT 21
10882: ST_TO_ADDR
// end ;
10883: LD_VAR 0 1
10887: RET
// every 1 do
10888: GO 10890
10890: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10891: CALL 10720 0 0
10895: END
// every 0 0$1 do
10896: GO 10898
10898: DISABLE
// begin enable ;
10899: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10900: LD_STRING updateTimer(
10902: PUSH
10903: LD_OWVAR 1
10907: STR
10908: PUSH
10909: LD_STRING );
10911: STR
10912: PPUSH
10913: CALL_OW 559
// end ;
10917: END
// export function SOS_MapStart ( ) ; begin
10918: LD_INT 0
10920: PPUSH
// if streamModeActive then
10921: LD_EXP 39
10925: IFFALSE 10934
// DefineStreamItems ( true ) ;
10927: LD_INT 1
10929: PPUSH
10930: CALL 12584 0 1
// UpdateFactoryWaypoints ( ) ;
10934: CALL 26168 0 0
// end ;
10938: LD_VAR 0 1
10942: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10943: LD_INT 0
10945: PPUSH
// if p2 = 100 then
10946: LD_VAR 0 2
10950: PUSH
10951: LD_INT 100
10953: EQUAL
10954: IFFALSE 11957
// begin if not StreamModeActive then
10956: LD_EXP 39
10960: NOT
10961: IFFALSE 10971
// StreamModeActive := true ;
10963: LD_ADDR_EXP 39
10967: PUSH
10968: LD_INT 1
10970: ST_TO_ADDR
// if p3 = 0 then
10971: LD_VAR 0 3
10975: PUSH
10976: LD_INT 0
10978: EQUAL
10979: IFFALSE 10985
// InitStreamMode ;
10981: CALL 12120 0 0
// if p3 = 1 then
10985: LD_VAR 0 3
10989: PUSH
10990: LD_INT 1
10992: EQUAL
10993: IFFALSE 11003
// sRocket := true ;
10995: LD_ADDR_EXP 44
10999: PUSH
11000: LD_INT 1
11002: ST_TO_ADDR
// if p3 = 2 then
11003: LD_VAR 0 3
11007: PUSH
11008: LD_INT 2
11010: EQUAL
11011: IFFALSE 11021
// sSpeed := true ;
11013: LD_ADDR_EXP 43
11017: PUSH
11018: LD_INT 1
11020: ST_TO_ADDR
// if p3 = 3 then
11021: LD_VAR 0 3
11025: PUSH
11026: LD_INT 3
11028: EQUAL
11029: IFFALSE 11039
// sEngine := true ;
11031: LD_ADDR_EXP 45
11035: PUSH
11036: LD_INT 1
11038: ST_TO_ADDR
// if p3 = 4 then
11039: LD_VAR 0 3
11043: PUSH
11044: LD_INT 4
11046: EQUAL
11047: IFFALSE 11057
// sSpec := true ;
11049: LD_ADDR_EXP 42
11053: PUSH
11054: LD_INT 1
11056: ST_TO_ADDR
// if p3 = 5 then
11057: LD_VAR 0 3
11061: PUSH
11062: LD_INT 5
11064: EQUAL
11065: IFFALSE 11075
// sLevel := true ;
11067: LD_ADDR_EXP 46
11071: PUSH
11072: LD_INT 1
11074: ST_TO_ADDR
// if p3 = 6 then
11075: LD_VAR 0 3
11079: PUSH
11080: LD_INT 6
11082: EQUAL
11083: IFFALSE 11093
// sArmoury := true ;
11085: LD_ADDR_EXP 47
11089: PUSH
11090: LD_INT 1
11092: ST_TO_ADDR
// if p3 = 7 then
11093: LD_VAR 0 3
11097: PUSH
11098: LD_INT 7
11100: EQUAL
11101: IFFALSE 11111
// sRadar := true ;
11103: LD_ADDR_EXP 48
11107: PUSH
11108: LD_INT 1
11110: ST_TO_ADDR
// if p3 = 8 then
11111: LD_VAR 0 3
11115: PUSH
11116: LD_INT 8
11118: EQUAL
11119: IFFALSE 11129
// sBunker := true ;
11121: LD_ADDR_EXP 49
11125: PUSH
11126: LD_INT 1
11128: ST_TO_ADDR
// if p3 = 9 then
11129: LD_VAR 0 3
11133: PUSH
11134: LD_INT 9
11136: EQUAL
11137: IFFALSE 11147
// sHack := true ;
11139: LD_ADDR_EXP 50
11143: PUSH
11144: LD_INT 1
11146: ST_TO_ADDR
// if p3 = 10 then
11147: LD_VAR 0 3
11151: PUSH
11152: LD_INT 10
11154: EQUAL
11155: IFFALSE 11165
// sFire := true ;
11157: LD_ADDR_EXP 51
11161: PUSH
11162: LD_INT 1
11164: ST_TO_ADDR
// if p3 = 11 then
11165: LD_VAR 0 3
11169: PUSH
11170: LD_INT 11
11172: EQUAL
11173: IFFALSE 11183
// sRefresh := true ;
11175: LD_ADDR_EXP 52
11179: PUSH
11180: LD_INT 1
11182: ST_TO_ADDR
// if p3 = 12 then
11183: LD_VAR 0 3
11187: PUSH
11188: LD_INT 12
11190: EQUAL
11191: IFFALSE 11201
// sExp := true ;
11193: LD_ADDR_EXP 53
11197: PUSH
11198: LD_INT 1
11200: ST_TO_ADDR
// if p3 = 13 then
11201: LD_VAR 0 3
11205: PUSH
11206: LD_INT 13
11208: EQUAL
11209: IFFALSE 11219
// sDepot := true ;
11211: LD_ADDR_EXP 54
11215: PUSH
11216: LD_INT 1
11218: ST_TO_ADDR
// if p3 = 14 then
11219: LD_VAR 0 3
11223: PUSH
11224: LD_INT 14
11226: EQUAL
11227: IFFALSE 11237
// sFlag := true ;
11229: LD_ADDR_EXP 55
11233: PUSH
11234: LD_INT 1
11236: ST_TO_ADDR
// if p3 = 15 then
11237: LD_VAR 0 3
11241: PUSH
11242: LD_INT 15
11244: EQUAL
11245: IFFALSE 11255
// sKamikadze := true ;
11247: LD_ADDR_EXP 63
11251: PUSH
11252: LD_INT 1
11254: ST_TO_ADDR
// if p3 = 16 then
11255: LD_VAR 0 3
11259: PUSH
11260: LD_INT 16
11262: EQUAL
11263: IFFALSE 11273
// sTroll := true ;
11265: LD_ADDR_EXP 64
11269: PUSH
11270: LD_INT 1
11272: ST_TO_ADDR
// if p3 = 17 then
11273: LD_VAR 0 3
11277: PUSH
11278: LD_INT 17
11280: EQUAL
11281: IFFALSE 11291
// sSlow := true ;
11283: LD_ADDR_EXP 65
11287: PUSH
11288: LD_INT 1
11290: ST_TO_ADDR
// if p3 = 18 then
11291: LD_VAR 0 3
11295: PUSH
11296: LD_INT 18
11298: EQUAL
11299: IFFALSE 11309
// sLack := true ;
11301: LD_ADDR_EXP 66
11305: PUSH
11306: LD_INT 1
11308: ST_TO_ADDR
// if p3 = 19 then
11309: LD_VAR 0 3
11313: PUSH
11314: LD_INT 19
11316: EQUAL
11317: IFFALSE 11327
// sTank := true ;
11319: LD_ADDR_EXP 68
11323: PUSH
11324: LD_INT 1
11326: ST_TO_ADDR
// if p3 = 20 then
11327: LD_VAR 0 3
11331: PUSH
11332: LD_INT 20
11334: EQUAL
11335: IFFALSE 11345
// sRemote := true ;
11337: LD_ADDR_EXP 69
11341: PUSH
11342: LD_INT 1
11344: ST_TO_ADDR
// if p3 = 21 then
11345: LD_VAR 0 3
11349: PUSH
11350: LD_INT 21
11352: EQUAL
11353: IFFALSE 11363
// sPowell := true ;
11355: LD_ADDR_EXP 70
11359: PUSH
11360: LD_INT 1
11362: ST_TO_ADDR
// if p3 = 22 then
11363: LD_VAR 0 3
11367: PUSH
11368: LD_INT 22
11370: EQUAL
11371: IFFALSE 11381
// sTeleport := true ;
11373: LD_ADDR_EXP 73
11377: PUSH
11378: LD_INT 1
11380: ST_TO_ADDR
// if p3 = 23 then
11381: LD_VAR 0 3
11385: PUSH
11386: LD_INT 23
11388: EQUAL
11389: IFFALSE 11399
// sOilTower := true ;
11391: LD_ADDR_EXP 75
11395: PUSH
11396: LD_INT 1
11398: ST_TO_ADDR
// if p3 = 24 then
11399: LD_VAR 0 3
11403: PUSH
11404: LD_INT 24
11406: EQUAL
11407: IFFALSE 11417
// sShovel := true ;
11409: LD_ADDR_EXP 76
11413: PUSH
11414: LD_INT 1
11416: ST_TO_ADDR
// if p3 = 25 then
11417: LD_VAR 0 3
11421: PUSH
11422: LD_INT 25
11424: EQUAL
11425: IFFALSE 11435
// sSheik := true ;
11427: LD_ADDR_EXP 77
11431: PUSH
11432: LD_INT 1
11434: ST_TO_ADDR
// if p3 = 26 then
11435: LD_VAR 0 3
11439: PUSH
11440: LD_INT 26
11442: EQUAL
11443: IFFALSE 11453
// sEarthquake := true ;
11445: LD_ADDR_EXP 79
11449: PUSH
11450: LD_INT 1
11452: ST_TO_ADDR
// if p3 = 27 then
11453: LD_VAR 0 3
11457: PUSH
11458: LD_INT 27
11460: EQUAL
11461: IFFALSE 11471
// sAI := true ;
11463: LD_ADDR_EXP 80
11467: PUSH
11468: LD_INT 1
11470: ST_TO_ADDR
// if p3 = 28 then
11471: LD_VAR 0 3
11475: PUSH
11476: LD_INT 28
11478: EQUAL
11479: IFFALSE 11489
// sCargo := true ;
11481: LD_ADDR_EXP 83
11485: PUSH
11486: LD_INT 1
11488: ST_TO_ADDR
// if p3 = 29 then
11489: LD_VAR 0 3
11493: PUSH
11494: LD_INT 29
11496: EQUAL
11497: IFFALSE 11507
// sDLaser := true ;
11499: LD_ADDR_EXP 84
11503: PUSH
11504: LD_INT 1
11506: ST_TO_ADDR
// if p3 = 30 then
11507: LD_VAR 0 3
11511: PUSH
11512: LD_INT 30
11514: EQUAL
11515: IFFALSE 11525
// sExchange := true ;
11517: LD_ADDR_EXP 85
11521: PUSH
11522: LD_INT 1
11524: ST_TO_ADDR
// if p3 = 31 then
11525: LD_VAR 0 3
11529: PUSH
11530: LD_INT 31
11532: EQUAL
11533: IFFALSE 11543
// sFac := true ;
11535: LD_ADDR_EXP 86
11539: PUSH
11540: LD_INT 1
11542: ST_TO_ADDR
// if p3 = 32 then
11543: LD_VAR 0 3
11547: PUSH
11548: LD_INT 32
11550: EQUAL
11551: IFFALSE 11561
// sPower := true ;
11553: LD_ADDR_EXP 87
11557: PUSH
11558: LD_INT 1
11560: ST_TO_ADDR
// if p3 = 33 then
11561: LD_VAR 0 3
11565: PUSH
11566: LD_INT 33
11568: EQUAL
11569: IFFALSE 11579
// sRandom := true ;
11571: LD_ADDR_EXP 88
11575: PUSH
11576: LD_INT 1
11578: ST_TO_ADDR
// if p3 = 34 then
11579: LD_VAR 0 3
11583: PUSH
11584: LD_INT 34
11586: EQUAL
11587: IFFALSE 11597
// sShield := true ;
11589: LD_ADDR_EXP 89
11593: PUSH
11594: LD_INT 1
11596: ST_TO_ADDR
// if p3 = 35 then
11597: LD_VAR 0 3
11601: PUSH
11602: LD_INT 35
11604: EQUAL
11605: IFFALSE 11615
// sTime := true ;
11607: LD_ADDR_EXP 90
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
// if p3 = 36 then
11615: LD_VAR 0 3
11619: PUSH
11620: LD_INT 36
11622: EQUAL
11623: IFFALSE 11633
// sTools := true ;
11625: LD_ADDR_EXP 91
11629: PUSH
11630: LD_INT 1
11632: ST_TO_ADDR
// if p3 = 101 then
11633: LD_VAR 0 3
11637: PUSH
11638: LD_INT 101
11640: EQUAL
11641: IFFALSE 11651
// sSold := true ;
11643: LD_ADDR_EXP 56
11647: PUSH
11648: LD_INT 1
11650: ST_TO_ADDR
// if p3 = 102 then
11651: LD_VAR 0 3
11655: PUSH
11656: LD_INT 102
11658: EQUAL
11659: IFFALSE 11669
// sDiff := true ;
11661: LD_ADDR_EXP 57
11665: PUSH
11666: LD_INT 1
11668: ST_TO_ADDR
// if p3 = 103 then
11669: LD_VAR 0 3
11673: PUSH
11674: LD_INT 103
11676: EQUAL
11677: IFFALSE 11687
// sFog := true ;
11679: LD_ADDR_EXP 60
11683: PUSH
11684: LD_INT 1
11686: ST_TO_ADDR
// if p3 = 104 then
11687: LD_VAR 0 3
11691: PUSH
11692: LD_INT 104
11694: EQUAL
11695: IFFALSE 11705
// sReset := true ;
11697: LD_ADDR_EXP 61
11701: PUSH
11702: LD_INT 1
11704: ST_TO_ADDR
// if p3 = 105 then
11705: LD_VAR 0 3
11709: PUSH
11710: LD_INT 105
11712: EQUAL
11713: IFFALSE 11723
// sSun := true ;
11715: LD_ADDR_EXP 62
11719: PUSH
11720: LD_INT 1
11722: ST_TO_ADDR
// if p3 = 106 then
11723: LD_VAR 0 3
11727: PUSH
11728: LD_INT 106
11730: EQUAL
11731: IFFALSE 11741
// sTiger := true ;
11733: LD_ADDR_EXP 58
11737: PUSH
11738: LD_INT 1
11740: ST_TO_ADDR
// if p3 = 107 then
11741: LD_VAR 0 3
11745: PUSH
11746: LD_INT 107
11748: EQUAL
11749: IFFALSE 11759
// sBomb := true ;
11751: LD_ADDR_EXP 59
11755: PUSH
11756: LD_INT 1
11758: ST_TO_ADDR
// if p3 = 108 then
11759: LD_VAR 0 3
11763: PUSH
11764: LD_INT 108
11766: EQUAL
11767: IFFALSE 11777
// sWound := true ;
11769: LD_ADDR_EXP 67
11773: PUSH
11774: LD_INT 1
11776: ST_TO_ADDR
// if p3 = 109 then
11777: LD_VAR 0 3
11781: PUSH
11782: LD_INT 109
11784: EQUAL
11785: IFFALSE 11795
// sBetray := true ;
11787: LD_ADDR_EXP 71
11791: PUSH
11792: LD_INT 1
11794: ST_TO_ADDR
// if p3 = 110 then
11795: LD_VAR 0 3
11799: PUSH
11800: LD_INT 110
11802: EQUAL
11803: IFFALSE 11813
// sContamin := true ;
11805: LD_ADDR_EXP 72
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// if p3 = 111 then
11813: LD_VAR 0 3
11817: PUSH
11818: LD_INT 111
11820: EQUAL
11821: IFFALSE 11831
// sOil := true ;
11823: LD_ADDR_EXP 74
11827: PUSH
11828: LD_INT 1
11830: ST_TO_ADDR
// if p3 = 112 then
11831: LD_VAR 0 3
11835: PUSH
11836: LD_INT 112
11838: EQUAL
11839: IFFALSE 11849
// sStu := true ;
11841: LD_ADDR_EXP 78
11845: PUSH
11846: LD_INT 1
11848: ST_TO_ADDR
// if p3 = 113 then
11849: LD_VAR 0 3
11853: PUSH
11854: LD_INT 113
11856: EQUAL
11857: IFFALSE 11867
// sBazooka := true ;
11859: LD_ADDR_EXP 81
11863: PUSH
11864: LD_INT 1
11866: ST_TO_ADDR
// if p3 = 114 then
11867: LD_VAR 0 3
11871: PUSH
11872: LD_INT 114
11874: EQUAL
11875: IFFALSE 11885
// sMortar := true ;
11877: LD_ADDR_EXP 82
11881: PUSH
11882: LD_INT 1
11884: ST_TO_ADDR
// if p3 = 115 then
11885: LD_VAR 0 3
11889: PUSH
11890: LD_INT 115
11892: EQUAL
11893: IFFALSE 11903
// sRanger := true ;
11895: LD_ADDR_EXP 92
11899: PUSH
11900: LD_INT 1
11902: ST_TO_ADDR
// if p3 = 116 then
11903: LD_VAR 0 3
11907: PUSH
11908: LD_INT 116
11910: EQUAL
11911: IFFALSE 11921
// sComputer := true ;
11913: LD_ADDR_EXP 93
11917: PUSH
11918: LD_INT 1
11920: ST_TO_ADDR
// if p3 = 117 then
11921: LD_VAR 0 3
11925: PUSH
11926: LD_INT 117
11928: EQUAL
11929: IFFALSE 11939
// s30 := true ;
11931: LD_ADDR_EXP 94
11935: PUSH
11936: LD_INT 1
11938: ST_TO_ADDR
// if p3 = 118 then
11939: LD_VAR 0 3
11943: PUSH
11944: LD_INT 118
11946: EQUAL
11947: IFFALSE 11957
// s60 := true ;
11949: LD_ADDR_EXP 95
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// end ; if p2 = 101 then
11957: LD_VAR 0 2
11961: PUSH
11962: LD_INT 101
11964: EQUAL
11965: IFFALSE 12093
// begin case p3 of 1 :
11967: LD_VAR 0 3
11971: PUSH
11972: LD_INT 1
11974: DOUBLE
11975: EQUAL
11976: IFTRUE 11980
11978: GO 11987
11980: POP
// hHackUnlimitedResources ; 2 :
11981: CALL 24191 0 0
11985: GO 12093
11987: LD_INT 2
11989: DOUBLE
11990: EQUAL
11991: IFTRUE 11995
11993: GO 12002
11995: POP
// hHackSetLevel10 ; 3 :
11996: CALL 24324 0 0
12000: GO 12093
12002: LD_INT 3
12004: DOUBLE
12005: EQUAL
12006: IFTRUE 12010
12008: GO 12017
12010: POP
// hHackSetLevel10YourUnits ; 4 :
12011: CALL 24409 0 0
12015: GO 12093
12017: LD_INT 4
12019: DOUBLE
12020: EQUAL
12021: IFTRUE 12025
12023: GO 12032
12025: POP
// hHackInvincible ; 5 :
12026: CALL 24857 0 0
12030: GO 12093
12032: LD_INT 5
12034: DOUBLE
12035: EQUAL
12036: IFTRUE 12040
12038: GO 12047
12040: POP
// hHackInvisible ; 6 :
12041: CALL 24968 0 0
12045: GO 12093
12047: LD_INT 6
12049: DOUBLE
12050: EQUAL
12051: IFTRUE 12055
12053: GO 12062
12055: POP
// hHackChangeYourSide ; 7 :
12056: CALL 25025 0 0
12060: GO 12093
12062: LD_INT 7
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12077
12070: POP
// hHackChangeUnitSide ; 8 :
12071: CALL 25067 0 0
12075: GO 12093
12077: LD_INT 8
12079: DOUBLE
12080: EQUAL
12081: IFTRUE 12085
12083: GO 12092
12085: POP
// hHackFog ; end ;
12086: CALL 25168 0 0
12090: GO 12093
12092: POP
// end ; end ;
12093: LD_VAR 0 7
12097: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12098: GO 12100
12100: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12101: LD_STRING initStreamRollete();
12103: PPUSH
12104: CALL_OW 559
// InitStreamMode ;
12108: CALL 12120 0 0
// DefineStreamItems ( false ) ;
12112: LD_INT 0
12114: PPUSH
12115: CALL 12584 0 1
// end ;
12119: END
// function InitStreamMode ; begin
12120: LD_INT 0
12122: PPUSH
// streamModeActive := false ;
12123: LD_ADDR_EXP 39
12127: PUSH
12128: LD_INT 0
12130: ST_TO_ADDR
// normalCounter := 36 ;
12131: LD_ADDR_EXP 40
12135: PUSH
12136: LD_INT 36
12138: ST_TO_ADDR
// hardcoreCounter := 18 ;
12139: LD_ADDR_EXP 41
12143: PUSH
12144: LD_INT 18
12146: ST_TO_ADDR
// sRocket := false ;
12147: LD_ADDR_EXP 44
12151: PUSH
12152: LD_INT 0
12154: ST_TO_ADDR
// sSpeed := false ;
12155: LD_ADDR_EXP 43
12159: PUSH
12160: LD_INT 0
12162: ST_TO_ADDR
// sEngine := false ;
12163: LD_ADDR_EXP 45
12167: PUSH
12168: LD_INT 0
12170: ST_TO_ADDR
// sSpec := false ;
12171: LD_ADDR_EXP 42
12175: PUSH
12176: LD_INT 0
12178: ST_TO_ADDR
// sLevel := false ;
12179: LD_ADDR_EXP 46
12183: PUSH
12184: LD_INT 0
12186: ST_TO_ADDR
// sArmoury := false ;
12187: LD_ADDR_EXP 47
12191: PUSH
12192: LD_INT 0
12194: ST_TO_ADDR
// sRadar := false ;
12195: LD_ADDR_EXP 48
12199: PUSH
12200: LD_INT 0
12202: ST_TO_ADDR
// sBunker := false ;
12203: LD_ADDR_EXP 49
12207: PUSH
12208: LD_INT 0
12210: ST_TO_ADDR
// sHack := false ;
12211: LD_ADDR_EXP 50
12215: PUSH
12216: LD_INT 0
12218: ST_TO_ADDR
// sFire := false ;
12219: LD_ADDR_EXP 51
12223: PUSH
12224: LD_INT 0
12226: ST_TO_ADDR
// sRefresh := false ;
12227: LD_ADDR_EXP 52
12231: PUSH
12232: LD_INT 0
12234: ST_TO_ADDR
// sExp := false ;
12235: LD_ADDR_EXP 53
12239: PUSH
12240: LD_INT 0
12242: ST_TO_ADDR
// sDepot := false ;
12243: LD_ADDR_EXP 54
12247: PUSH
12248: LD_INT 0
12250: ST_TO_ADDR
// sFlag := false ;
12251: LD_ADDR_EXP 55
12255: PUSH
12256: LD_INT 0
12258: ST_TO_ADDR
// sKamikadze := false ;
12259: LD_ADDR_EXP 63
12263: PUSH
12264: LD_INT 0
12266: ST_TO_ADDR
// sTroll := false ;
12267: LD_ADDR_EXP 64
12271: PUSH
12272: LD_INT 0
12274: ST_TO_ADDR
// sSlow := false ;
12275: LD_ADDR_EXP 65
12279: PUSH
12280: LD_INT 0
12282: ST_TO_ADDR
// sLack := false ;
12283: LD_ADDR_EXP 66
12287: PUSH
12288: LD_INT 0
12290: ST_TO_ADDR
// sTank := false ;
12291: LD_ADDR_EXP 68
12295: PUSH
12296: LD_INT 0
12298: ST_TO_ADDR
// sRemote := false ;
12299: LD_ADDR_EXP 69
12303: PUSH
12304: LD_INT 0
12306: ST_TO_ADDR
// sPowell := false ;
12307: LD_ADDR_EXP 70
12311: PUSH
12312: LD_INT 0
12314: ST_TO_ADDR
// sTeleport := false ;
12315: LD_ADDR_EXP 73
12319: PUSH
12320: LD_INT 0
12322: ST_TO_ADDR
// sOilTower := false ;
12323: LD_ADDR_EXP 75
12327: PUSH
12328: LD_INT 0
12330: ST_TO_ADDR
// sShovel := false ;
12331: LD_ADDR_EXP 76
12335: PUSH
12336: LD_INT 0
12338: ST_TO_ADDR
// sSheik := false ;
12339: LD_ADDR_EXP 77
12343: PUSH
12344: LD_INT 0
12346: ST_TO_ADDR
// sEarthquake := false ;
12347: LD_ADDR_EXP 79
12351: PUSH
12352: LD_INT 0
12354: ST_TO_ADDR
// sAI := false ;
12355: LD_ADDR_EXP 80
12359: PUSH
12360: LD_INT 0
12362: ST_TO_ADDR
// sCargo := false ;
12363: LD_ADDR_EXP 83
12367: PUSH
12368: LD_INT 0
12370: ST_TO_ADDR
// sDLaser := false ;
12371: LD_ADDR_EXP 84
12375: PUSH
12376: LD_INT 0
12378: ST_TO_ADDR
// sExchange := false ;
12379: LD_ADDR_EXP 85
12383: PUSH
12384: LD_INT 0
12386: ST_TO_ADDR
// sFac := false ;
12387: LD_ADDR_EXP 86
12391: PUSH
12392: LD_INT 0
12394: ST_TO_ADDR
// sPower := false ;
12395: LD_ADDR_EXP 87
12399: PUSH
12400: LD_INT 0
12402: ST_TO_ADDR
// sRandom := false ;
12403: LD_ADDR_EXP 88
12407: PUSH
12408: LD_INT 0
12410: ST_TO_ADDR
// sShield := false ;
12411: LD_ADDR_EXP 89
12415: PUSH
12416: LD_INT 0
12418: ST_TO_ADDR
// sTime := false ;
12419: LD_ADDR_EXP 90
12423: PUSH
12424: LD_INT 0
12426: ST_TO_ADDR
// sTools := false ;
12427: LD_ADDR_EXP 91
12431: PUSH
12432: LD_INT 0
12434: ST_TO_ADDR
// sSold := false ;
12435: LD_ADDR_EXP 56
12439: PUSH
12440: LD_INT 0
12442: ST_TO_ADDR
// sDiff := false ;
12443: LD_ADDR_EXP 57
12447: PUSH
12448: LD_INT 0
12450: ST_TO_ADDR
// sFog := false ;
12451: LD_ADDR_EXP 60
12455: PUSH
12456: LD_INT 0
12458: ST_TO_ADDR
// sReset := false ;
12459: LD_ADDR_EXP 61
12463: PUSH
12464: LD_INT 0
12466: ST_TO_ADDR
// sSun := false ;
12467: LD_ADDR_EXP 62
12471: PUSH
12472: LD_INT 0
12474: ST_TO_ADDR
// sTiger := false ;
12475: LD_ADDR_EXP 58
12479: PUSH
12480: LD_INT 0
12482: ST_TO_ADDR
// sBomb := false ;
12483: LD_ADDR_EXP 59
12487: PUSH
12488: LD_INT 0
12490: ST_TO_ADDR
// sWound := false ;
12491: LD_ADDR_EXP 67
12495: PUSH
12496: LD_INT 0
12498: ST_TO_ADDR
// sBetray := false ;
12499: LD_ADDR_EXP 71
12503: PUSH
12504: LD_INT 0
12506: ST_TO_ADDR
// sContamin := false ;
12507: LD_ADDR_EXP 72
12511: PUSH
12512: LD_INT 0
12514: ST_TO_ADDR
// sOil := false ;
12515: LD_ADDR_EXP 74
12519: PUSH
12520: LD_INT 0
12522: ST_TO_ADDR
// sStu := false ;
12523: LD_ADDR_EXP 78
12527: PUSH
12528: LD_INT 0
12530: ST_TO_ADDR
// sBazooka := false ;
12531: LD_ADDR_EXP 81
12535: PUSH
12536: LD_INT 0
12538: ST_TO_ADDR
// sMortar := false ;
12539: LD_ADDR_EXP 82
12543: PUSH
12544: LD_INT 0
12546: ST_TO_ADDR
// sRanger := false ;
12547: LD_ADDR_EXP 92
12551: PUSH
12552: LD_INT 0
12554: ST_TO_ADDR
// sComputer := false ;
12555: LD_ADDR_EXP 93
12559: PUSH
12560: LD_INT 0
12562: ST_TO_ADDR
// s30 := false ;
12563: LD_ADDR_EXP 94
12567: PUSH
12568: LD_INT 0
12570: ST_TO_ADDR
// s60 := false ;
12571: LD_ADDR_EXP 95
12575: PUSH
12576: LD_INT 0
12578: ST_TO_ADDR
// end ;
12579: LD_VAR 0 1
12583: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12584: LD_INT 0
12586: PPUSH
12587: PPUSH
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
// result := [ ] ;
12593: LD_ADDR_VAR 0 2
12597: PUSH
12598: EMPTY
12599: ST_TO_ADDR
// if campaign_id = 1 then
12600: LD_OWVAR 69
12604: PUSH
12605: LD_INT 1
12607: EQUAL
12608: IFFALSE 15774
// begin case mission_number of 1 :
12610: LD_OWVAR 70
12614: PUSH
12615: LD_INT 1
12617: DOUBLE
12618: EQUAL
12619: IFTRUE 12623
12621: GO 12699
12623: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12624: LD_ADDR_VAR 0 2
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: LD_INT 4
12634: PUSH
12635: LD_INT 11
12637: PUSH
12638: LD_INT 12
12640: PUSH
12641: LD_INT 15
12643: PUSH
12644: LD_INT 16
12646: PUSH
12647: LD_INT 22
12649: PUSH
12650: LD_INT 23
12652: PUSH
12653: LD_INT 26
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 101
12669: PUSH
12670: LD_INT 102
12672: PUSH
12673: LD_INT 106
12675: PUSH
12676: LD_INT 116
12678: PUSH
12679: LD_INT 117
12681: PUSH
12682: LD_INT 118
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: ST_TO_ADDR
12697: GO 15772
12699: LD_INT 2
12701: DOUBLE
12702: EQUAL
12703: IFTRUE 12707
12705: GO 12791
12707: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12708: LD_ADDR_VAR 0 2
12712: PUSH
12713: LD_INT 2
12715: PUSH
12716: LD_INT 4
12718: PUSH
12719: LD_INT 11
12721: PUSH
12722: LD_INT 12
12724: PUSH
12725: LD_INT 15
12727: PUSH
12728: LD_INT 16
12730: PUSH
12731: LD_INT 22
12733: PUSH
12734: LD_INT 23
12736: PUSH
12737: LD_INT 26
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 101
12753: PUSH
12754: LD_INT 102
12756: PUSH
12757: LD_INT 105
12759: PUSH
12760: LD_INT 106
12762: PUSH
12763: LD_INT 108
12765: PUSH
12766: LD_INT 116
12768: PUSH
12769: LD_INT 117
12771: PUSH
12772: LD_INT 118
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: ST_TO_ADDR
12789: GO 15772
12791: LD_INT 3
12793: DOUBLE
12794: EQUAL
12795: IFTRUE 12799
12797: GO 12887
12799: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12800: LD_ADDR_VAR 0 2
12804: PUSH
12805: LD_INT 2
12807: PUSH
12808: LD_INT 4
12810: PUSH
12811: LD_INT 5
12813: PUSH
12814: LD_INT 11
12816: PUSH
12817: LD_INT 12
12819: PUSH
12820: LD_INT 15
12822: PUSH
12823: LD_INT 16
12825: PUSH
12826: LD_INT 22
12828: PUSH
12829: LD_INT 26
12831: PUSH
12832: LD_INT 36
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 101
12849: PUSH
12850: LD_INT 102
12852: PUSH
12853: LD_INT 105
12855: PUSH
12856: LD_INT 106
12858: PUSH
12859: LD_INT 108
12861: PUSH
12862: LD_INT 116
12864: PUSH
12865: LD_INT 117
12867: PUSH
12868: LD_INT 118
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: ST_TO_ADDR
12885: GO 15772
12887: LD_INT 4
12889: DOUBLE
12890: EQUAL
12891: IFTRUE 12895
12893: GO 12991
12895: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12896: LD_ADDR_VAR 0 2
12900: PUSH
12901: LD_INT 2
12903: PUSH
12904: LD_INT 4
12906: PUSH
12907: LD_INT 5
12909: PUSH
12910: LD_INT 8
12912: PUSH
12913: LD_INT 11
12915: PUSH
12916: LD_INT 12
12918: PUSH
12919: LD_INT 15
12921: PUSH
12922: LD_INT 16
12924: PUSH
12925: LD_INT 22
12927: PUSH
12928: LD_INT 23
12930: PUSH
12931: LD_INT 26
12933: PUSH
12934: LD_INT 36
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 101
12953: PUSH
12954: LD_INT 102
12956: PUSH
12957: LD_INT 105
12959: PUSH
12960: LD_INT 106
12962: PUSH
12963: LD_INT 108
12965: PUSH
12966: LD_INT 116
12968: PUSH
12969: LD_INT 117
12971: PUSH
12972: LD_INT 118
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: ST_TO_ADDR
12989: GO 15772
12991: LD_INT 5
12993: DOUBLE
12994: EQUAL
12995: IFTRUE 12999
12997: GO 13111
12999: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13000: LD_ADDR_VAR 0 2
13004: PUSH
13005: LD_INT 2
13007: PUSH
13008: LD_INT 4
13010: PUSH
13011: LD_INT 5
13013: PUSH
13014: LD_INT 6
13016: PUSH
13017: LD_INT 8
13019: PUSH
13020: LD_INT 11
13022: PUSH
13023: LD_INT 12
13025: PUSH
13026: LD_INT 15
13028: PUSH
13029: LD_INT 16
13031: PUSH
13032: LD_INT 22
13034: PUSH
13035: LD_INT 23
13037: PUSH
13038: LD_INT 25
13040: PUSH
13041: LD_INT 26
13043: PUSH
13044: LD_INT 36
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: PUSH
13063: LD_INT 101
13065: PUSH
13066: LD_INT 102
13068: PUSH
13069: LD_INT 105
13071: PUSH
13072: LD_INT 106
13074: PUSH
13075: LD_INT 108
13077: PUSH
13078: LD_INT 109
13080: PUSH
13081: LD_INT 112
13083: PUSH
13084: LD_INT 116
13086: PUSH
13087: LD_INT 117
13089: PUSH
13090: LD_INT 118
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: ST_TO_ADDR
13109: GO 15772
13111: LD_INT 6
13113: DOUBLE
13114: EQUAL
13115: IFTRUE 13119
13117: GO 13251
13119: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13120: LD_ADDR_VAR 0 2
13124: PUSH
13125: LD_INT 2
13127: PUSH
13128: LD_INT 4
13130: PUSH
13131: LD_INT 5
13133: PUSH
13134: LD_INT 6
13136: PUSH
13137: LD_INT 8
13139: PUSH
13140: LD_INT 11
13142: PUSH
13143: LD_INT 12
13145: PUSH
13146: LD_INT 15
13148: PUSH
13149: LD_INT 16
13151: PUSH
13152: LD_INT 20
13154: PUSH
13155: LD_INT 21
13157: PUSH
13158: LD_INT 22
13160: PUSH
13161: LD_INT 23
13163: PUSH
13164: LD_INT 25
13166: PUSH
13167: LD_INT 26
13169: PUSH
13170: LD_INT 30
13172: PUSH
13173: LD_INT 31
13175: PUSH
13176: LD_INT 32
13178: PUSH
13179: LD_INT 36
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 101
13205: PUSH
13206: LD_INT 102
13208: PUSH
13209: LD_INT 105
13211: PUSH
13212: LD_INT 106
13214: PUSH
13215: LD_INT 108
13217: PUSH
13218: LD_INT 109
13220: PUSH
13221: LD_INT 112
13223: PUSH
13224: LD_INT 116
13226: PUSH
13227: LD_INT 117
13229: PUSH
13230: LD_INT 118
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: ST_TO_ADDR
13249: GO 15772
13251: LD_INT 7
13253: DOUBLE
13254: EQUAL
13255: IFTRUE 13259
13257: GO 13371
13259: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13260: LD_ADDR_VAR 0 2
13264: PUSH
13265: LD_INT 2
13267: PUSH
13268: LD_INT 4
13270: PUSH
13271: LD_INT 5
13273: PUSH
13274: LD_INT 7
13276: PUSH
13277: LD_INT 11
13279: PUSH
13280: LD_INT 12
13282: PUSH
13283: LD_INT 15
13285: PUSH
13286: LD_INT 16
13288: PUSH
13289: LD_INT 20
13291: PUSH
13292: LD_INT 21
13294: PUSH
13295: LD_INT 22
13297: PUSH
13298: LD_INT 23
13300: PUSH
13301: LD_INT 25
13303: PUSH
13304: LD_INT 26
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 101
13325: PUSH
13326: LD_INT 102
13328: PUSH
13329: LD_INT 103
13331: PUSH
13332: LD_INT 105
13334: PUSH
13335: LD_INT 106
13337: PUSH
13338: LD_INT 108
13340: PUSH
13341: LD_INT 112
13343: PUSH
13344: LD_INT 116
13346: PUSH
13347: LD_INT 117
13349: PUSH
13350: LD_INT 118
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: ST_TO_ADDR
13369: GO 15772
13371: LD_INT 8
13373: DOUBLE
13374: EQUAL
13375: IFTRUE 13379
13377: GO 13519
13379: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13380: LD_ADDR_VAR 0 2
13384: PUSH
13385: LD_INT 2
13387: PUSH
13388: LD_INT 4
13390: PUSH
13391: LD_INT 5
13393: PUSH
13394: LD_INT 6
13396: PUSH
13397: LD_INT 7
13399: PUSH
13400: LD_INT 8
13402: PUSH
13403: LD_INT 11
13405: PUSH
13406: LD_INT 12
13408: PUSH
13409: LD_INT 15
13411: PUSH
13412: LD_INT 16
13414: PUSH
13415: LD_INT 20
13417: PUSH
13418: LD_INT 21
13420: PUSH
13421: LD_INT 22
13423: PUSH
13424: LD_INT 23
13426: PUSH
13427: LD_INT 25
13429: PUSH
13430: LD_INT 26
13432: PUSH
13433: LD_INT 30
13435: PUSH
13436: LD_INT 31
13438: PUSH
13439: LD_INT 32
13441: PUSH
13442: LD_INT 36
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 101
13469: PUSH
13470: LD_INT 102
13472: PUSH
13473: LD_INT 103
13475: PUSH
13476: LD_INT 105
13478: PUSH
13479: LD_INT 106
13481: PUSH
13482: LD_INT 108
13484: PUSH
13485: LD_INT 109
13487: PUSH
13488: LD_INT 112
13490: PUSH
13491: LD_INT 116
13493: PUSH
13494: LD_INT 117
13496: PUSH
13497: LD_INT 118
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: ST_TO_ADDR
13517: GO 15772
13519: LD_INT 9
13521: DOUBLE
13522: EQUAL
13523: IFTRUE 13527
13525: GO 13675
13527: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13528: LD_ADDR_VAR 0 2
13532: PUSH
13533: LD_INT 2
13535: PUSH
13536: LD_INT 4
13538: PUSH
13539: LD_INT 5
13541: PUSH
13542: LD_INT 6
13544: PUSH
13545: LD_INT 7
13547: PUSH
13548: LD_INT 8
13550: PUSH
13551: LD_INT 11
13553: PUSH
13554: LD_INT 12
13556: PUSH
13557: LD_INT 15
13559: PUSH
13560: LD_INT 16
13562: PUSH
13563: LD_INT 20
13565: PUSH
13566: LD_INT 21
13568: PUSH
13569: LD_INT 22
13571: PUSH
13572: LD_INT 23
13574: PUSH
13575: LD_INT 25
13577: PUSH
13578: LD_INT 26
13580: PUSH
13581: LD_INT 28
13583: PUSH
13584: LD_INT 30
13586: PUSH
13587: LD_INT 31
13589: PUSH
13590: LD_INT 32
13592: PUSH
13593: LD_INT 36
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: PUSH
13619: LD_INT 101
13621: PUSH
13622: LD_INT 102
13624: PUSH
13625: LD_INT 103
13627: PUSH
13628: LD_INT 105
13630: PUSH
13631: LD_INT 106
13633: PUSH
13634: LD_INT 108
13636: PUSH
13637: LD_INT 109
13639: PUSH
13640: LD_INT 112
13642: PUSH
13643: LD_INT 114
13645: PUSH
13646: LD_INT 116
13648: PUSH
13649: LD_INT 117
13651: PUSH
13652: LD_INT 118
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: ST_TO_ADDR
13673: GO 15772
13675: LD_INT 10
13677: DOUBLE
13678: EQUAL
13679: IFTRUE 13683
13681: GO 13879
13683: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13684: LD_ADDR_VAR 0 2
13688: PUSH
13689: LD_INT 2
13691: PUSH
13692: LD_INT 4
13694: PUSH
13695: LD_INT 5
13697: PUSH
13698: LD_INT 6
13700: PUSH
13701: LD_INT 7
13703: PUSH
13704: LD_INT 8
13706: PUSH
13707: LD_INT 9
13709: PUSH
13710: LD_INT 10
13712: PUSH
13713: LD_INT 11
13715: PUSH
13716: LD_INT 12
13718: PUSH
13719: LD_INT 13
13721: PUSH
13722: LD_INT 14
13724: PUSH
13725: LD_INT 15
13727: PUSH
13728: LD_INT 16
13730: PUSH
13731: LD_INT 17
13733: PUSH
13734: LD_INT 18
13736: PUSH
13737: LD_INT 19
13739: PUSH
13740: LD_INT 20
13742: PUSH
13743: LD_INT 21
13745: PUSH
13746: LD_INT 22
13748: PUSH
13749: LD_INT 23
13751: PUSH
13752: LD_INT 24
13754: PUSH
13755: LD_INT 25
13757: PUSH
13758: LD_INT 26
13760: PUSH
13761: LD_INT 28
13763: PUSH
13764: LD_INT 30
13766: PUSH
13767: LD_INT 31
13769: PUSH
13770: LD_INT 32
13772: PUSH
13773: LD_INT 36
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 101
13809: PUSH
13810: LD_INT 102
13812: PUSH
13813: LD_INT 103
13815: PUSH
13816: LD_INT 104
13818: PUSH
13819: LD_INT 105
13821: PUSH
13822: LD_INT 106
13824: PUSH
13825: LD_INT 107
13827: PUSH
13828: LD_INT 108
13830: PUSH
13831: LD_INT 109
13833: PUSH
13834: LD_INT 110
13836: PUSH
13837: LD_INT 111
13839: PUSH
13840: LD_INT 112
13842: PUSH
13843: LD_INT 114
13845: PUSH
13846: LD_INT 116
13848: PUSH
13849: LD_INT 117
13851: PUSH
13852: LD_INT 118
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: ST_TO_ADDR
13877: GO 15772
13879: LD_INT 11
13881: DOUBLE
13882: EQUAL
13883: IFTRUE 13887
13885: GO 14091
13887: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13888: LD_ADDR_VAR 0 2
13892: PUSH
13893: LD_INT 2
13895: PUSH
13896: LD_INT 3
13898: PUSH
13899: LD_INT 4
13901: PUSH
13902: LD_INT 5
13904: PUSH
13905: LD_INT 6
13907: PUSH
13908: LD_INT 7
13910: PUSH
13911: LD_INT 8
13913: PUSH
13914: LD_INT 9
13916: PUSH
13917: LD_INT 10
13919: PUSH
13920: LD_INT 11
13922: PUSH
13923: LD_INT 12
13925: PUSH
13926: LD_INT 13
13928: PUSH
13929: LD_INT 14
13931: PUSH
13932: LD_INT 15
13934: PUSH
13935: LD_INT 16
13937: PUSH
13938: LD_INT 17
13940: PUSH
13941: LD_INT 18
13943: PUSH
13944: LD_INT 19
13946: PUSH
13947: LD_INT 20
13949: PUSH
13950: LD_INT 21
13952: PUSH
13953: LD_INT 22
13955: PUSH
13956: LD_INT 23
13958: PUSH
13959: LD_INT 24
13961: PUSH
13962: LD_INT 25
13964: PUSH
13965: LD_INT 26
13967: PUSH
13968: LD_INT 28
13970: PUSH
13971: LD_INT 30
13973: PUSH
13974: LD_INT 31
13976: PUSH
13977: LD_INT 32
13979: PUSH
13980: LD_INT 34
13982: PUSH
13983: LD_INT 36
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 101
14021: PUSH
14022: LD_INT 102
14024: PUSH
14025: LD_INT 103
14027: PUSH
14028: LD_INT 104
14030: PUSH
14031: LD_INT 105
14033: PUSH
14034: LD_INT 106
14036: PUSH
14037: LD_INT 107
14039: PUSH
14040: LD_INT 108
14042: PUSH
14043: LD_INT 109
14045: PUSH
14046: LD_INT 110
14048: PUSH
14049: LD_INT 111
14051: PUSH
14052: LD_INT 112
14054: PUSH
14055: LD_INT 114
14057: PUSH
14058: LD_INT 116
14060: PUSH
14061: LD_INT 117
14063: PUSH
14064: LD_INT 118
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: ST_TO_ADDR
14089: GO 15772
14091: LD_INT 12
14093: DOUBLE
14094: EQUAL
14095: IFTRUE 14099
14097: GO 14319
14099: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14100: LD_ADDR_VAR 0 2
14104: PUSH
14105: LD_INT 1
14107: PUSH
14108: LD_INT 2
14110: PUSH
14111: LD_INT 3
14113: PUSH
14114: LD_INT 4
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: LD_INT 6
14122: PUSH
14123: LD_INT 7
14125: PUSH
14126: LD_INT 8
14128: PUSH
14129: LD_INT 9
14131: PUSH
14132: LD_INT 10
14134: PUSH
14135: LD_INT 11
14137: PUSH
14138: LD_INT 12
14140: PUSH
14141: LD_INT 13
14143: PUSH
14144: LD_INT 14
14146: PUSH
14147: LD_INT 15
14149: PUSH
14150: LD_INT 16
14152: PUSH
14153: LD_INT 17
14155: PUSH
14156: LD_INT 18
14158: PUSH
14159: LD_INT 19
14161: PUSH
14162: LD_INT 20
14164: PUSH
14165: LD_INT 21
14167: PUSH
14168: LD_INT 22
14170: PUSH
14171: LD_INT 23
14173: PUSH
14174: LD_INT 24
14176: PUSH
14177: LD_INT 25
14179: PUSH
14180: LD_INT 26
14182: PUSH
14183: LD_INT 27
14185: PUSH
14186: LD_INT 28
14188: PUSH
14189: LD_INT 30
14191: PUSH
14192: LD_INT 31
14194: PUSH
14195: LD_INT 32
14197: PUSH
14198: LD_INT 33
14200: PUSH
14201: LD_INT 34
14203: PUSH
14204: LD_INT 36
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 101
14245: PUSH
14246: LD_INT 102
14248: PUSH
14249: LD_INT 103
14251: PUSH
14252: LD_INT 104
14254: PUSH
14255: LD_INT 105
14257: PUSH
14258: LD_INT 106
14260: PUSH
14261: LD_INT 107
14263: PUSH
14264: LD_INT 108
14266: PUSH
14267: LD_INT 109
14269: PUSH
14270: LD_INT 110
14272: PUSH
14273: LD_INT 111
14275: PUSH
14276: LD_INT 112
14278: PUSH
14279: LD_INT 113
14281: PUSH
14282: LD_INT 114
14284: PUSH
14285: LD_INT 116
14287: PUSH
14288: LD_INT 117
14290: PUSH
14291: LD_INT 118
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: ST_TO_ADDR
14317: GO 15772
14319: LD_INT 13
14321: DOUBLE
14322: EQUAL
14323: IFTRUE 14327
14325: GO 14535
14327: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14328: LD_ADDR_VAR 0 2
14332: PUSH
14333: LD_INT 1
14335: PUSH
14336: LD_INT 2
14338: PUSH
14339: LD_INT 3
14341: PUSH
14342: LD_INT 4
14344: PUSH
14345: LD_INT 5
14347: PUSH
14348: LD_INT 8
14350: PUSH
14351: LD_INT 9
14353: PUSH
14354: LD_INT 10
14356: PUSH
14357: LD_INT 11
14359: PUSH
14360: LD_INT 12
14362: PUSH
14363: LD_INT 14
14365: PUSH
14366: LD_INT 15
14368: PUSH
14369: LD_INT 16
14371: PUSH
14372: LD_INT 17
14374: PUSH
14375: LD_INT 18
14377: PUSH
14378: LD_INT 19
14380: PUSH
14381: LD_INT 20
14383: PUSH
14384: LD_INT 21
14386: PUSH
14387: LD_INT 22
14389: PUSH
14390: LD_INT 23
14392: PUSH
14393: LD_INT 24
14395: PUSH
14396: LD_INT 25
14398: PUSH
14399: LD_INT 26
14401: PUSH
14402: LD_INT 27
14404: PUSH
14405: LD_INT 28
14407: PUSH
14408: LD_INT 30
14410: PUSH
14411: LD_INT 31
14413: PUSH
14414: LD_INT 32
14416: PUSH
14417: LD_INT 33
14419: PUSH
14420: LD_INT 34
14422: PUSH
14423: LD_INT 36
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 101
14461: PUSH
14462: LD_INT 102
14464: PUSH
14465: LD_INT 103
14467: PUSH
14468: LD_INT 104
14470: PUSH
14471: LD_INT 105
14473: PUSH
14474: LD_INT 106
14476: PUSH
14477: LD_INT 107
14479: PUSH
14480: LD_INT 108
14482: PUSH
14483: LD_INT 109
14485: PUSH
14486: LD_INT 110
14488: PUSH
14489: LD_INT 111
14491: PUSH
14492: LD_INT 112
14494: PUSH
14495: LD_INT 113
14497: PUSH
14498: LD_INT 114
14500: PUSH
14501: LD_INT 116
14503: PUSH
14504: LD_INT 117
14506: PUSH
14507: LD_INT 118
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: ST_TO_ADDR
14533: GO 15772
14535: LD_INT 14
14537: DOUBLE
14538: EQUAL
14539: IFTRUE 14543
14541: GO 14767
14543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14544: LD_ADDR_VAR 0 2
14548: PUSH
14549: LD_INT 1
14551: PUSH
14552: LD_INT 2
14554: PUSH
14555: LD_INT 3
14557: PUSH
14558: LD_INT 4
14560: PUSH
14561: LD_INT 5
14563: PUSH
14564: LD_INT 6
14566: PUSH
14567: LD_INT 7
14569: PUSH
14570: LD_INT 8
14572: PUSH
14573: LD_INT 9
14575: PUSH
14576: LD_INT 10
14578: PUSH
14579: LD_INT 11
14581: PUSH
14582: LD_INT 12
14584: PUSH
14585: LD_INT 13
14587: PUSH
14588: LD_INT 14
14590: PUSH
14591: LD_INT 15
14593: PUSH
14594: LD_INT 16
14596: PUSH
14597: LD_INT 17
14599: PUSH
14600: LD_INT 18
14602: PUSH
14603: LD_INT 19
14605: PUSH
14606: LD_INT 20
14608: PUSH
14609: LD_INT 21
14611: PUSH
14612: LD_INT 22
14614: PUSH
14615: LD_INT 23
14617: PUSH
14618: LD_INT 24
14620: PUSH
14621: LD_INT 25
14623: PUSH
14624: LD_INT 26
14626: PUSH
14627: LD_INT 27
14629: PUSH
14630: LD_INT 28
14632: PUSH
14633: LD_INT 29
14635: PUSH
14636: LD_INT 30
14638: PUSH
14639: LD_INT 31
14641: PUSH
14642: LD_INT 32
14644: PUSH
14645: LD_INT 33
14647: PUSH
14648: LD_INT 34
14650: PUSH
14651: LD_INT 36
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 101
14693: PUSH
14694: LD_INT 102
14696: PUSH
14697: LD_INT 103
14699: PUSH
14700: LD_INT 104
14702: PUSH
14703: LD_INT 105
14705: PUSH
14706: LD_INT 106
14708: PUSH
14709: LD_INT 107
14711: PUSH
14712: LD_INT 108
14714: PUSH
14715: LD_INT 109
14717: PUSH
14718: LD_INT 110
14720: PUSH
14721: LD_INT 111
14723: PUSH
14724: LD_INT 112
14726: PUSH
14727: LD_INT 113
14729: PUSH
14730: LD_INT 114
14732: PUSH
14733: LD_INT 116
14735: PUSH
14736: LD_INT 117
14738: PUSH
14739: LD_INT 118
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: ST_TO_ADDR
14765: GO 15772
14767: LD_INT 15
14769: DOUBLE
14770: EQUAL
14771: IFTRUE 14775
14773: GO 14999
14775: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14776: LD_ADDR_VAR 0 2
14780: PUSH
14781: LD_INT 1
14783: PUSH
14784: LD_INT 2
14786: PUSH
14787: LD_INT 3
14789: PUSH
14790: LD_INT 4
14792: PUSH
14793: LD_INT 5
14795: PUSH
14796: LD_INT 6
14798: PUSH
14799: LD_INT 7
14801: PUSH
14802: LD_INT 8
14804: PUSH
14805: LD_INT 9
14807: PUSH
14808: LD_INT 10
14810: PUSH
14811: LD_INT 11
14813: PUSH
14814: LD_INT 12
14816: PUSH
14817: LD_INT 13
14819: PUSH
14820: LD_INT 14
14822: PUSH
14823: LD_INT 15
14825: PUSH
14826: LD_INT 16
14828: PUSH
14829: LD_INT 17
14831: PUSH
14832: LD_INT 18
14834: PUSH
14835: LD_INT 19
14837: PUSH
14838: LD_INT 20
14840: PUSH
14841: LD_INT 21
14843: PUSH
14844: LD_INT 22
14846: PUSH
14847: LD_INT 23
14849: PUSH
14850: LD_INT 24
14852: PUSH
14853: LD_INT 25
14855: PUSH
14856: LD_INT 26
14858: PUSH
14859: LD_INT 27
14861: PUSH
14862: LD_INT 28
14864: PUSH
14865: LD_INT 29
14867: PUSH
14868: LD_INT 30
14870: PUSH
14871: LD_INT 31
14873: PUSH
14874: LD_INT 32
14876: PUSH
14877: LD_INT 33
14879: PUSH
14880: LD_INT 34
14882: PUSH
14883: LD_INT 36
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 101
14925: PUSH
14926: LD_INT 102
14928: PUSH
14929: LD_INT 103
14931: PUSH
14932: LD_INT 104
14934: PUSH
14935: LD_INT 105
14937: PUSH
14938: LD_INT 106
14940: PUSH
14941: LD_INT 107
14943: PUSH
14944: LD_INT 108
14946: PUSH
14947: LD_INT 109
14949: PUSH
14950: LD_INT 110
14952: PUSH
14953: LD_INT 111
14955: PUSH
14956: LD_INT 112
14958: PUSH
14959: LD_INT 113
14961: PUSH
14962: LD_INT 114
14964: PUSH
14965: LD_INT 116
14967: PUSH
14968: LD_INT 117
14970: PUSH
14971: LD_INT 118
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: ST_TO_ADDR
14997: GO 15772
14999: LD_INT 16
15001: DOUBLE
15002: EQUAL
15003: IFTRUE 15007
15005: GO 15143
15007: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15008: LD_ADDR_VAR 0 2
15012: PUSH
15013: LD_INT 2
15015: PUSH
15016: LD_INT 4
15018: PUSH
15019: LD_INT 5
15021: PUSH
15022: LD_INT 7
15024: PUSH
15025: LD_INT 11
15027: PUSH
15028: LD_INT 12
15030: PUSH
15031: LD_INT 15
15033: PUSH
15034: LD_INT 16
15036: PUSH
15037: LD_INT 20
15039: PUSH
15040: LD_INT 21
15042: PUSH
15043: LD_INT 22
15045: PUSH
15046: LD_INT 23
15048: PUSH
15049: LD_INT 25
15051: PUSH
15052: LD_INT 26
15054: PUSH
15055: LD_INT 30
15057: PUSH
15058: LD_INT 31
15060: PUSH
15061: LD_INT 32
15063: PUSH
15064: LD_INT 33
15066: PUSH
15067: LD_INT 34
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 101
15093: PUSH
15094: LD_INT 102
15096: PUSH
15097: LD_INT 103
15099: PUSH
15100: LD_INT 106
15102: PUSH
15103: LD_INT 108
15105: PUSH
15106: LD_INT 112
15108: PUSH
15109: LD_INT 113
15111: PUSH
15112: LD_INT 114
15114: PUSH
15115: LD_INT 116
15117: PUSH
15118: LD_INT 117
15120: PUSH
15121: LD_INT 118
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: ST_TO_ADDR
15141: GO 15772
15143: LD_INT 17
15145: DOUBLE
15146: EQUAL
15147: IFTRUE 15151
15149: GO 15375
15151: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15152: LD_ADDR_VAR 0 2
15156: PUSH
15157: LD_INT 1
15159: PUSH
15160: LD_INT 2
15162: PUSH
15163: LD_INT 3
15165: PUSH
15166: LD_INT 4
15168: PUSH
15169: LD_INT 5
15171: PUSH
15172: LD_INT 6
15174: PUSH
15175: LD_INT 7
15177: PUSH
15178: LD_INT 8
15180: PUSH
15181: LD_INT 9
15183: PUSH
15184: LD_INT 10
15186: PUSH
15187: LD_INT 11
15189: PUSH
15190: LD_INT 12
15192: PUSH
15193: LD_INT 13
15195: PUSH
15196: LD_INT 14
15198: PUSH
15199: LD_INT 15
15201: PUSH
15202: LD_INT 16
15204: PUSH
15205: LD_INT 17
15207: PUSH
15208: LD_INT 18
15210: PUSH
15211: LD_INT 19
15213: PUSH
15214: LD_INT 20
15216: PUSH
15217: LD_INT 21
15219: PUSH
15220: LD_INT 22
15222: PUSH
15223: LD_INT 23
15225: PUSH
15226: LD_INT 24
15228: PUSH
15229: LD_INT 25
15231: PUSH
15232: LD_INT 26
15234: PUSH
15235: LD_INT 27
15237: PUSH
15238: LD_INT 28
15240: PUSH
15241: LD_INT 29
15243: PUSH
15244: LD_INT 30
15246: PUSH
15247: LD_INT 31
15249: PUSH
15250: LD_INT 32
15252: PUSH
15253: LD_INT 33
15255: PUSH
15256: LD_INT 34
15258: PUSH
15259: LD_INT 36
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: PUSH
15299: LD_INT 101
15301: PUSH
15302: LD_INT 102
15304: PUSH
15305: LD_INT 103
15307: PUSH
15308: LD_INT 104
15310: PUSH
15311: LD_INT 105
15313: PUSH
15314: LD_INT 106
15316: PUSH
15317: LD_INT 107
15319: PUSH
15320: LD_INT 108
15322: PUSH
15323: LD_INT 109
15325: PUSH
15326: LD_INT 110
15328: PUSH
15329: LD_INT 111
15331: PUSH
15332: LD_INT 112
15334: PUSH
15335: LD_INT 113
15337: PUSH
15338: LD_INT 114
15340: PUSH
15341: LD_INT 116
15343: PUSH
15344: LD_INT 117
15346: PUSH
15347: LD_INT 118
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: ST_TO_ADDR
15373: GO 15772
15375: LD_INT 18
15377: DOUBLE
15378: EQUAL
15379: IFTRUE 15383
15381: GO 15531
15383: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15384: LD_ADDR_VAR 0 2
15388: PUSH
15389: LD_INT 2
15391: PUSH
15392: LD_INT 4
15394: PUSH
15395: LD_INT 5
15397: PUSH
15398: LD_INT 7
15400: PUSH
15401: LD_INT 11
15403: PUSH
15404: LD_INT 12
15406: PUSH
15407: LD_INT 15
15409: PUSH
15410: LD_INT 16
15412: PUSH
15413: LD_INT 20
15415: PUSH
15416: LD_INT 21
15418: PUSH
15419: LD_INT 22
15421: PUSH
15422: LD_INT 23
15424: PUSH
15425: LD_INT 25
15427: PUSH
15428: LD_INT 26
15430: PUSH
15431: LD_INT 30
15433: PUSH
15434: LD_INT 31
15436: PUSH
15437: LD_INT 32
15439: PUSH
15440: LD_INT 33
15442: PUSH
15443: LD_INT 34
15445: PUSH
15446: LD_INT 35
15448: PUSH
15449: LD_INT 36
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 101
15477: PUSH
15478: LD_INT 102
15480: PUSH
15481: LD_INT 103
15483: PUSH
15484: LD_INT 106
15486: PUSH
15487: LD_INT 108
15489: PUSH
15490: LD_INT 112
15492: PUSH
15493: LD_INT 113
15495: PUSH
15496: LD_INT 114
15498: PUSH
15499: LD_INT 115
15501: PUSH
15502: LD_INT 116
15504: PUSH
15505: LD_INT 117
15507: PUSH
15508: LD_INT 118
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: ST_TO_ADDR
15529: GO 15772
15531: LD_INT 19
15533: DOUBLE
15534: EQUAL
15535: IFTRUE 15539
15537: GO 15771
15539: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15540: LD_ADDR_VAR 0 2
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: LD_INT 2
15550: PUSH
15551: LD_INT 3
15553: PUSH
15554: LD_INT 4
15556: PUSH
15557: LD_INT 5
15559: PUSH
15560: LD_INT 6
15562: PUSH
15563: LD_INT 7
15565: PUSH
15566: LD_INT 8
15568: PUSH
15569: LD_INT 9
15571: PUSH
15572: LD_INT 10
15574: PUSH
15575: LD_INT 11
15577: PUSH
15578: LD_INT 12
15580: PUSH
15581: LD_INT 13
15583: PUSH
15584: LD_INT 14
15586: PUSH
15587: LD_INT 15
15589: PUSH
15590: LD_INT 16
15592: PUSH
15593: LD_INT 17
15595: PUSH
15596: LD_INT 18
15598: PUSH
15599: LD_INT 19
15601: PUSH
15602: LD_INT 20
15604: PUSH
15605: LD_INT 21
15607: PUSH
15608: LD_INT 22
15610: PUSH
15611: LD_INT 23
15613: PUSH
15614: LD_INT 24
15616: PUSH
15617: LD_INT 25
15619: PUSH
15620: LD_INT 26
15622: PUSH
15623: LD_INT 27
15625: PUSH
15626: LD_INT 28
15628: PUSH
15629: LD_INT 29
15631: PUSH
15632: LD_INT 30
15634: PUSH
15635: LD_INT 31
15637: PUSH
15638: LD_INT 32
15640: PUSH
15641: LD_INT 33
15643: PUSH
15644: LD_INT 34
15646: PUSH
15647: LD_INT 35
15649: PUSH
15650: LD_INT 36
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 101
15693: PUSH
15694: LD_INT 102
15696: PUSH
15697: LD_INT 103
15699: PUSH
15700: LD_INT 104
15702: PUSH
15703: LD_INT 105
15705: PUSH
15706: LD_INT 106
15708: PUSH
15709: LD_INT 107
15711: PUSH
15712: LD_INT 108
15714: PUSH
15715: LD_INT 109
15717: PUSH
15718: LD_INT 110
15720: PUSH
15721: LD_INT 111
15723: PUSH
15724: LD_INT 112
15726: PUSH
15727: LD_INT 113
15729: PUSH
15730: LD_INT 114
15732: PUSH
15733: LD_INT 115
15735: PUSH
15736: LD_INT 116
15738: PUSH
15739: LD_INT 117
15741: PUSH
15742: LD_INT 118
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: ST_TO_ADDR
15769: GO 15772
15771: POP
// end else
15772: GO 16003
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15774: LD_ADDR_VAR 0 2
15778: PUSH
15779: LD_INT 1
15781: PUSH
15782: LD_INT 2
15784: PUSH
15785: LD_INT 3
15787: PUSH
15788: LD_INT 4
15790: PUSH
15791: LD_INT 5
15793: PUSH
15794: LD_INT 6
15796: PUSH
15797: LD_INT 7
15799: PUSH
15800: LD_INT 8
15802: PUSH
15803: LD_INT 9
15805: PUSH
15806: LD_INT 10
15808: PUSH
15809: LD_INT 11
15811: PUSH
15812: LD_INT 12
15814: PUSH
15815: LD_INT 13
15817: PUSH
15818: LD_INT 14
15820: PUSH
15821: LD_INT 15
15823: PUSH
15824: LD_INT 16
15826: PUSH
15827: LD_INT 17
15829: PUSH
15830: LD_INT 18
15832: PUSH
15833: LD_INT 19
15835: PUSH
15836: LD_INT 20
15838: PUSH
15839: LD_INT 21
15841: PUSH
15842: LD_INT 22
15844: PUSH
15845: LD_INT 23
15847: PUSH
15848: LD_INT 24
15850: PUSH
15851: LD_INT 25
15853: PUSH
15854: LD_INT 26
15856: PUSH
15857: LD_INT 27
15859: PUSH
15860: LD_INT 28
15862: PUSH
15863: LD_INT 29
15865: PUSH
15866: LD_INT 30
15868: PUSH
15869: LD_INT 31
15871: PUSH
15872: LD_INT 32
15874: PUSH
15875: LD_INT 33
15877: PUSH
15878: LD_INT 34
15880: PUSH
15881: LD_INT 35
15883: PUSH
15884: LD_INT 36
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 101
15927: PUSH
15928: LD_INT 102
15930: PUSH
15931: LD_INT 103
15933: PUSH
15934: LD_INT 104
15936: PUSH
15937: LD_INT 105
15939: PUSH
15940: LD_INT 106
15942: PUSH
15943: LD_INT 107
15945: PUSH
15946: LD_INT 108
15948: PUSH
15949: LD_INT 109
15951: PUSH
15952: LD_INT 110
15954: PUSH
15955: LD_INT 111
15957: PUSH
15958: LD_INT 112
15960: PUSH
15961: LD_INT 113
15963: PUSH
15964: LD_INT 114
15966: PUSH
15967: LD_INT 115
15969: PUSH
15970: LD_INT 116
15972: PUSH
15973: LD_INT 117
15975: PUSH
15976: LD_INT 118
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: ST_TO_ADDR
// if result then
16003: LD_VAR 0 2
16007: IFFALSE 16793
// begin normal :=  ;
16009: LD_ADDR_VAR 0 5
16013: PUSH
16014: LD_STRING 
16016: ST_TO_ADDR
// hardcore :=  ;
16017: LD_ADDR_VAR 0 6
16021: PUSH
16022: LD_STRING 
16024: ST_TO_ADDR
// active :=  ;
16025: LD_ADDR_VAR 0 7
16029: PUSH
16030: LD_STRING 
16032: ST_TO_ADDR
// for i = 1 to normalCounter do
16033: LD_ADDR_VAR 0 8
16037: PUSH
16038: DOUBLE
16039: LD_INT 1
16041: DEC
16042: ST_TO_ADDR
16043: LD_EXP 40
16047: PUSH
16048: FOR_TO
16049: IFFALSE 16150
// begin tmp := 0 ;
16051: LD_ADDR_VAR 0 3
16055: PUSH
16056: LD_STRING 0
16058: ST_TO_ADDR
// if result [ 1 ] then
16059: LD_VAR 0 2
16063: PUSH
16064: LD_INT 1
16066: ARRAY
16067: IFFALSE 16132
// if result [ 1 ] [ 1 ] = i then
16069: LD_VAR 0 2
16073: PUSH
16074: LD_INT 1
16076: ARRAY
16077: PUSH
16078: LD_INT 1
16080: ARRAY
16081: PUSH
16082: LD_VAR 0 8
16086: EQUAL
16087: IFFALSE 16132
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16089: LD_ADDR_VAR 0 2
16093: PUSH
16094: LD_VAR 0 2
16098: PPUSH
16099: LD_INT 1
16101: PPUSH
16102: LD_VAR 0 2
16106: PUSH
16107: LD_INT 1
16109: ARRAY
16110: PPUSH
16111: LD_INT 1
16113: PPUSH
16114: CALL_OW 3
16118: PPUSH
16119: CALL_OW 1
16123: ST_TO_ADDR
// tmp := 1 ;
16124: LD_ADDR_VAR 0 3
16128: PUSH
16129: LD_STRING 1
16131: ST_TO_ADDR
// end ; normal := normal & tmp ;
16132: LD_ADDR_VAR 0 5
16136: PUSH
16137: LD_VAR 0 5
16141: PUSH
16142: LD_VAR 0 3
16146: STR
16147: ST_TO_ADDR
// end ;
16148: GO 16048
16150: POP
16151: POP
// for i = 1 to hardcoreCounter do
16152: LD_ADDR_VAR 0 8
16156: PUSH
16157: DOUBLE
16158: LD_INT 1
16160: DEC
16161: ST_TO_ADDR
16162: LD_EXP 41
16166: PUSH
16167: FOR_TO
16168: IFFALSE 16273
// begin tmp := 0 ;
16170: LD_ADDR_VAR 0 3
16174: PUSH
16175: LD_STRING 0
16177: ST_TO_ADDR
// if result [ 2 ] then
16178: LD_VAR 0 2
16182: PUSH
16183: LD_INT 2
16185: ARRAY
16186: IFFALSE 16255
// if result [ 2 ] [ 1 ] = 100 + i then
16188: LD_VAR 0 2
16192: PUSH
16193: LD_INT 2
16195: ARRAY
16196: PUSH
16197: LD_INT 1
16199: ARRAY
16200: PUSH
16201: LD_INT 100
16203: PUSH
16204: LD_VAR 0 8
16208: PLUS
16209: EQUAL
16210: IFFALSE 16255
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16212: LD_ADDR_VAR 0 2
16216: PUSH
16217: LD_VAR 0 2
16221: PPUSH
16222: LD_INT 2
16224: PPUSH
16225: LD_VAR 0 2
16229: PUSH
16230: LD_INT 2
16232: ARRAY
16233: PPUSH
16234: LD_INT 1
16236: PPUSH
16237: CALL_OW 3
16241: PPUSH
16242: CALL_OW 1
16246: ST_TO_ADDR
// tmp := 1 ;
16247: LD_ADDR_VAR 0 3
16251: PUSH
16252: LD_STRING 1
16254: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16255: LD_ADDR_VAR 0 6
16259: PUSH
16260: LD_VAR 0 6
16264: PUSH
16265: LD_VAR 0 3
16269: STR
16270: ST_TO_ADDR
// end ;
16271: GO 16167
16273: POP
16274: POP
// if isGameLoad then
16275: LD_VAR 0 1
16279: IFFALSE 16754
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16281: LD_ADDR_VAR 0 4
16285: PUSH
16286: LD_EXP 44
16290: PUSH
16291: LD_EXP 43
16295: PUSH
16296: LD_EXP 45
16300: PUSH
16301: LD_EXP 42
16305: PUSH
16306: LD_EXP 46
16310: PUSH
16311: LD_EXP 47
16315: PUSH
16316: LD_EXP 48
16320: PUSH
16321: LD_EXP 49
16325: PUSH
16326: LD_EXP 50
16330: PUSH
16331: LD_EXP 51
16335: PUSH
16336: LD_EXP 52
16340: PUSH
16341: LD_EXP 53
16345: PUSH
16346: LD_EXP 54
16350: PUSH
16351: LD_EXP 55
16355: PUSH
16356: LD_EXP 63
16360: PUSH
16361: LD_EXP 64
16365: PUSH
16366: LD_EXP 65
16370: PUSH
16371: LD_EXP 66
16375: PUSH
16376: LD_EXP 68
16380: PUSH
16381: LD_EXP 69
16385: PUSH
16386: LD_EXP 70
16390: PUSH
16391: LD_EXP 73
16395: PUSH
16396: LD_EXP 75
16400: PUSH
16401: LD_EXP 76
16405: PUSH
16406: LD_EXP 77
16410: PUSH
16411: LD_EXP 79
16415: PUSH
16416: LD_EXP 80
16420: PUSH
16421: LD_EXP 83
16425: PUSH
16426: LD_EXP 84
16430: PUSH
16431: LD_EXP 85
16435: PUSH
16436: LD_EXP 86
16440: PUSH
16441: LD_EXP 87
16445: PUSH
16446: LD_EXP 88
16450: PUSH
16451: LD_EXP 89
16455: PUSH
16456: LD_EXP 90
16460: PUSH
16461: LD_EXP 91
16465: PUSH
16466: LD_EXP 56
16470: PUSH
16471: LD_EXP 57
16475: PUSH
16476: LD_EXP 60
16480: PUSH
16481: LD_EXP 61
16485: PUSH
16486: LD_EXP 62
16490: PUSH
16491: LD_EXP 58
16495: PUSH
16496: LD_EXP 59
16500: PUSH
16501: LD_EXP 67
16505: PUSH
16506: LD_EXP 71
16510: PUSH
16511: LD_EXP 72
16515: PUSH
16516: LD_EXP 74
16520: PUSH
16521: LD_EXP 78
16525: PUSH
16526: LD_EXP 81
16530: PUSH
16531: LD_EXP 82
16535: PUSH
16536: LD_EXP 92
16540: PUSH
16541: LD_EXP 93
16545: PUSH
16546: LD_EXP 94
16550: PUSH
16551: LD_EXP 95
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: ST_TO_ADDR
// tmp :=  ;
16612: LD_ADDR_VAR 0 3
16616: PUSH
16617: LD_STRING 
16619: ST_TO_ADDR
// for i = 1 to normalCounter do
16620: LD_ADDR_VAR 0 8
16624: PUSH
16625: DOUBLE
16626: LD_INT 1
16628: DEC
16629: ST_TO_ADDR
16630: LD_EXP 40
16634: PUSH
16635: FOR_TO
16636: IFFALSE 16672
// begin if flags [ i ] then
16638: LD_VAR 0 4
16642: PUSH
16643: LD_VAR 0 8
16647: ARRAY
16648: IFFALSE 16670
// tmp := tmp & i & ; ;
16650: LD_ADDR_VAR 0 3
16654: PUSH
16655: LD_VAR 0 3
16659: PUSH
16660: LD_VAR 0 8
16664: STR
16665: PUSH
16666: LD_STRING ;
16668: STR
16669: ST_TO_ADDR
// end ;
16670: GO 16635
16672: POP
16673: POP
// for i = 1 to hardcoreCounter do
16674: LD_ADDR_VAR 0 8
16678: PUSH
16679: DOUBLE
16680: LD_INT 1
16682: DEC
16683: ST_TO_ADDR
16684: LD_EXP 41
16688: PUSH
16689: FOR_TO
16690: IFFALSE 16736
// begin if flags [ normalCounter + i ] then
16692: LD_VAR 0 4
16696: PUSH
16697: LD_EXP 40
16701: PUSH
16702: LD_VAR 0 8
16706: PLUS
16707: ARRAY
16708: IFFALSE 16734
// tmp := tmp & ( 100 + i ) & ; ;
16710: LD_ADDR_VAR 0 3
16714: PUSH
16715: LD_VAR 0 3
16719: PUSH
16720: LD_INT 100
16722: PUSH
16723: LD_VAR 0 8
16727: PLUS
16728: STR
16729: PUSH
16730: LD_STRING ;
16732: STR
16733: ST_TO_ADDR
// end ;
16734: GO 16689
16736: POP
16737: POP
// if tmp then
16738: LD_VAR 0 3
16742: IFFALSE 16754
// active := tmp ;
16744: LD_ADDR_VAR 0 7
16748: PUSH
16749: LD_VAR 0 3
16753: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16754: LD_STRING getStreamItemsFromMission("
16756: PUSH
16757: LD_VAR 0 5
16761: STR
16762: PUSH
16763: LD_STRING ","
16765: STR
16766: PUSH
16767: LD_VAR 0 6
16771: STR
16772: PUSH
16773: LD_STRING ","
16775: STR
16776: PUSH
16777: LD_VAR 0 7
16781: STR
16782: PUSH
16783: LD_STRING ")
16785: STR
16786: PPUSH
16787: CALL_OW 559
// end else
16791: GO 16800
// ToLua ( getStreamItemsFromMission("","","") ) ;
16793: LD_STRING getStreamItemsFromMission("","","")
16795: PPUSH
16796: CALL_OW 559
// end ;
16800: LD_VAR 0 2
16804: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16805: LD_EXP 39
16809: PUSH
16810: LD_EXP 44
16814: AND
16815: IFFALSE 16939
16817: GO 16819
16819: DISABLE
16820: LD_INT 0
16822: PPUSH
16823: PPUSH
// begin enable ;
16824: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16825: LD_ADDR_VAR 0 2
16829: PUSH
16830: LD_INT 22
16832: PUSH
16833: LD_OWVAR 2
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 2
16844: PUSH
16845: LD_INT 34
16847: PUSH
16848: LD_INT 7
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 34
16857: PUSH
16858: LD_INT 45
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 34
16867: PUSH
16868: LD_INT 28
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 34
16877: PUSH
16878: LD_INT 47
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PPUSH
16896: CALL_OW 69
16900: ST_TO_ADDR
// if not tmp then
16901: LD_VAR 0 2
16905: NOT
16906: IFFALSE 16910
// exit ;
16908: GO 16939
// for i in tmp do
16910: LD_ADDR_VAR 0 1
16914: PUSH
16915: LD_VAR 0 2
16919: PUSH
16920: FOR_IN
16921: IFFALSE 16937
// begin SetLives ( i , 0 ) ;
16923: LD_VAR 0 1
16927: PPUSH
16928: LD_INT 0
16930: PPUSH
16931: CALL_OW 234
// end ;
16935: GO 16920
16937: POP
16938: POP
// end ;
16939: PPOPN 2
16941: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16942: LD_EXP 39
16946: PUSH
16947: LD_EXP 45
16951: AND
16952: IFFALSE 17036
16954: GO 16956
16956: DISABLE
16957: LD_INT 0
16959: PPUSH
16960: PPUSH
// begin enable ;
16961: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16962: LD_ADDR_VAR 0 2
16966: PUSH
16967: LD_INT 22
16969: PUSH
16970: LD_OWVAR 2
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 32
16981: PUSH
16982: LD_INT 3
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PPUSH
16993: CALL_OW 69
16997: ST_TO_ADDR
// if not tmp then
16998: LD_VAR 0 2
17002: NOT
17003: IFFALSE 17007
// exit ;
17005: GO 17036
// for i in tmp do
17007: LD_ADDR_VAR 0 1
17011: PUSH
17012: LD_VAR 0 2
17016: PUSH
17017: FOR_IN
17018: IFFALSE 17034
// begin SetLives ( i , 0 ) ;
17020: LD_VAR 0 1
17024: PPUSH
17025: LD_INT 0
17027: PPUSH
17028: CALL_OW 234
// end ;
17032: GO 17017
17034: POP
17035: POP
// end ;
17036: PPOPN 2
17038: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17039: LD_EXP 39
17043: PUSH
17044: LD_EXP 42
17048: AND
17049: IFFALSE 17142
17051: GO 17053
17053: DISABLE
17054: LD_INT 0
17056: PPUSH
// begin enable ;
17057: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17058: LD_ADDR_VAR 0 1
17062: PUSH
17063: LD_INT 22
17065: PUSH
17066: LD_OWVAR 2
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 2
17077: PUSH
17078: LD_INT 25
17080: PUSH
17081: LD_INT 5
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 25
17090: PUSH
17091: LD_INT 9
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 25
17100: PUSH
17101: LD_INT 8
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PPUSH
17118: CALL_OW 69
17122: PUSH
17123: FOR_IN
17124: IFFALSE 17140
// begin SetClass ( i , 1 ) ;
17126: LD_VAR 0 1
17130: PPUSH
17131: LD_INT 1
17133: PPUSH
17134: CALL_OW 336
// end ;
17138: GO 17123
17140: POP
17141: POP
// end ;
17142: PPOPN 1
17144: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17145: LD_EXP 39
17149: PUSH
17150: LD_EXP 43
17154: AND
17155: PUSH
17156: LD_OWVAR 65
17160: PUSH
17161: LD_INT 7
17163: LESS
17164: AND
17165: IFFALSE 17179
17167: GO 17169
17169: DISABLE
// begin enable ;
17170: ENABLE
// game_speed := 7 ;
17171: LD_ADDR_OWVAR 65
17175: PUSH
17176: LD_INT 7
17178: ST_TO_ADDR
// end ;
17179: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17180: LD_EXP 39
17184: PUSH
17185: LD_EXP 46
17189: AND
17190: IFFALSE 17392
17192: GO 17194
17194: DISABLE
17195: LD_INT 0
17197: PPUSH
17198: PPUSH
17199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17200: LD_ADDR_VAR 0 3
17204: PUSH
17205: LD_INT 81
17207: PUSH
17208: LD_OWVAR 2
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 21
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PPUSH
17231: CALL_OW 69
17235: ST_TO_ADDR
// if not tmp then
17236: LD_VAR 0 3
17240: NOT
17241: IFFALSE 17245
// exit ;
17243: GO 17392
// if tmp > 5 then
17245: LD_VAR 0 3
17249: PUSH
17250: LD_INT 5
17252: GREATER
17253: IFFALSE 17265
// k := 5 else
17255: LD_ADDR_VAR 0 2
17259: PUSH
17260: LD_INT 5
17262: ST_TO_ADDR
17263: GO 17275
// k := tmp ;
17265: LD_ADDR_VAR 0 2
17269: PUSH
17270: LD_VAR 0 3
17274: ST_TO_ADDR
// for i := 1 to k do
17275: LD_ADDR_VAR 0 1
17279: PUSH
17280: DOUBLE
17281: LD_INT 1
17283: DEC
17284: ST_TO_ADDR
17285: LD_VAR 0 2
17289: PUSH
17290: FOR_TO
17291: IFFALSE 17390
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17293: LD_VAR 0 3
17297: PUSH
17298: LD_VAR 0 1
17302: ARRAY
17303: PPUSH
17304: LD_VAR 0 1
17308: PUSH
17309: LD_INT 4
17311: MOD
17312: PUSH
17313: LD_INT 1
17315: PLUS
17316: PPUSH
17317: CALL_OW 259
17321: PUSH
17322: LD_INT 10
17324: LESS
17325: IFFALSE 17388
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17327: LD_VAR 0 3
17331: PUSH
17332: LD_VAR 0 1
17336: ARRAY
17337: PPUSH
17338: LD_VAR 0 1
17342: PUSH
17343: LD_INT 4
17345: MOD
17346: PUSH
17347: LD_INT 1
17349: PLUS
17350: PPUSH
17351: LD_VAR 0 3
17355: PUSH
17356: LD_VAR 0 1
17360: ARRAY
17361: PPUSH
17362: LD_VAR 0 1
17366: PUSH
17367: LD_INT 4
17369: MOD
17370: PUSH
17371: LD_INT 1
17373: PLUS
17374: PPUSH
17375: CALL_OW 259
17379: PUSH
17380: LD_INT 1
17382: PLUS
17383: PPUSH
17384: CALL_OW 237
17388: GO 17290
17390: POP
17391: POP
// end ;
17392: PPOPN 3
17394: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17395: LD_EXP 39
17399: PUSH
17400: LD_EXP 47
17404: AND
17405: IFFALSE 17425
17407: GO 17409
17409: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17410: LD_INT 4
17412: PPUSH
17413: LD_OWVAR 2
17417: PPUSH
17418: LD_INT 0
17420: PPUSH
17421: CALL_OW 324
17425: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17426: LD_EXP 39
17430: PUSH
17431: LD_EXP 76
17435: AND
17436: IFFALSE 17456
17438: GO 17440
17440: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17441: LD_INT 19
17443: PPUSH
17444: LD_OWVAR 2
17448: PPUSH
17449: LD_INT 0
17451: PPUSH
17452: CALL_OW 324
17456: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17457: LD_EXP 39
17461: PUSH
17462: LD_EXP 48
17466: AND
17467: IFFALSE 17569
17469: GO 17471
17471: DISABLE
17472: LD_INT 0
17474: PPUSH
17475: PPUSH
// begin enable ;
17476: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17477: LD_ADDR_VAR 0 2
17481: PUSH
17482: LD_INT 22
17484: PUSH
17485: LD_OWVAR 2
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: LD_INT 34
17499: PUSH
17500: LD_INT 11
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 34
17509: PUSH
17510: LD_INT 30
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PPUSH
17526: CALL_OW 69
17530: ST_TO_ADDR
// if not tmp then
17531: LD_VAR 0 2
17535: NOT
17536: IFFALSE 17540
// exit ;
17538: GO 17569
// for i in tmp do
17540: LD_ADDR_VAR 0 1
17544: PUSH
17545: LD_VAR 0 2
17549: PUSH
17550: FOR_IN
17551: IFFALSE 17567
// begin SetLives ( i , 0 ) ;
17553: LD_VAR 0 1
17557: PPUSH
17558: LD_INT 0
17560: PPUSH
17561: CALL_OW 234
// end ;
17565: GO 17550
17567: POP
17568: POP
// end ;
17569: PPOPN 2
17571: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17572: LD_EXP 39
17576: PUSH
17577: LD_EXP 49
17581: AND
17582: IFFALSE 17602
17584: GO 17586
17586: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17587: LD_INT 32
17589: PPUSH
17590: LD_OWVAR 2
17594: PPUSH
17595: LD_INT 0
17597: PPUSH
17598: CALL_OW 324
17602: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17603: LD_EXP 39
17607: PUSH
17608: LD_EXP 50
17612: AND
17613: IFFALSE 17794
17615: GO 17617
17617: DISABLE
17618: LD_INT 0
17620: PPUSH
17621: PPUSH
17622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17623: LD_ADDR_VAR 0 2
17627: PUSH
17628: LD_INT 22
17630: PUSH
17631: LD_OWVAR 2
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 33
17642: PUSH
17643: LD_INT 3
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PPUSH
17654: CALL_OW 69
17658: ST_TO_ADDR
// if not tmp then
17659: LD_VAR 0 2
17663: NOT
17664: IFFALSE 17668
// exit ;
17666: GO 17794
// side := 0 ;
17668: LD_ADDR_VAR 0 3
17672: PUSH
17673: LD_INT 0
17675: ST_TO_ADDR
// for i := 1 to 8 do
17676: LD_ADDR_VAR 0 1
17680: PUSH
17681: DOUBLE
17682: LD_INT 1
17684: DEC
17685: ST_TO_ADDR
17686: LD_INT 8
17688: PUSH
17689: FOR_TO
17690: IFFALSE 17738
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17692: LD_OWVAR 2
17696: PUSH
17697: LD_VAR 0 1
17701: NONEQUAL
17702: PUSH
17703: LD_OWVAR 2
17707: PPUSH
17708: LD_VAR 0 1
17712: PPUSH
17713: CALL_OW 81
17717: PUSH
17718: LD_INT 2
17720: EQUAL
17721: AND
17722: IFFALSE 17736
// begin side := i ;
17724: LD_ADDR_VAR 0 3
17728: PUSH
17729: LD_VAR 0 1
17733: ST_TO_ADDR
// break ;
17734: GO 17738
// end ;
17736: GO 17689
17738: POP
17739: POP
// if not side then
17740: LD_VAR 0 3
17744: NOT
17745: IFFALSE 17749
// exit ;
17747: GO 17794
// for i := 1 to tmp do
17749: LD_ADDR_VAR 0 1
17753: PUSH
17754: DOUBLE
17755: LD_INT 1
17757: DEC
17758: ST_TO_ADDR
17759: LD_VAR 0 2
17763: PUSH
17764: FOR_TO
17765: IFFALSE 17792
// if Prob ( 60 ) then
17767: LD_INT 60
17769: PPUSH
17770: CALL_OW 13
17774: IFFALSE 17790
// SetSide ( i , side ) ;
17776: LD_VAR 0 1
17780: PPUSH
17781: LD_VAR 0 3
17785: PPUSH
17786: CALL_OW 235
17790: GO 17764
17792: POP
17793: POP
// end ;
17794: PPOPN 3
17796: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17797: LD_EXP 39
17801: PUSH
17802: LD_EXP 52
17806: AND
17807: IFFALSE 17926
17809: GO 17811
17811: DISABLE
17812: LD_INT 0
17814: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17815: LD_ADDR_VAR 0 1
17819: PUSH
17820: LD_INT 22
17822: PUSH
17823: LD_OWVAR 2
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 21
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 3
17844: PUSH
17845: LD_INT 23
17847: PUSH
17848: LD_INT 0
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: LIST
17863: PPUSH
17864: CALL_OW 69
17868: PUSH
17869: FOR_IN
17870: IFFALSE 17924
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17872: LD_VAR 0 1
17876: PPUSH
17877: CALL_OW 257
17881: PUSH
17882: LD_INT 1
17884: PUSH
17885: LD_INT 2
17887: PUSH
17888: LD_INT 3
17890: PUSH
17891: LD_INT 4
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: IN
17900: IFFALSE 17922
// SetClass ( un , rand ( 1 , 4 ) ) ;
17902: LD_VAR 0 1
17906: PPUSH
17907: LD_INT 1
17909: PPUSH
17910: LD_INT 4
17912: PPUSH
17913: CALL_OW 12
17917: PPUSH
17918: CALL_OW 336
17922: GO 17869
17924: POP
17925: POP
// end ;
17926: PPOPN 1
17928: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17929: LD_EXP 39
17933: PUSH
17934: LD_EXP 51
17938: AND
17939: IFFALSE 18018
17941: GO 17943
17943: DISABLE
17944: LD_INT 0
17946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17947: LD_ADDR_VAR 0 1
17951: PUSH
17952: LD_INT 22
17954: PUSH
17955: LD_OWVAR 2
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 21
17966: PUSH
17967: LD_INT 3
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PPUSH
17978: CALL_OW 69
17982: ST_TO_ADDR
// if not tmp then
17983: LD_VAR 0 1
17987: NOT
17988: IFFALSE 17992
// exit ;
17990: GO 18018
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17992: LD_VAR 0 1
17996: PUSH
17997: LD_INT 1
17999: PPUSH
18000: LD_VAR 0 1
18004: PPUSH
18005: CALL_OW 12
18009: ARRAY
18010: PPUSH
18011: LD_INT 100
18013: PPUSH
18014: CALL_OW 234
// end ;
18018: PPOPN 1
18020: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18021: LD_EXP 39
18025: PUSH
18026: LD_EXP 53
18030: AND
18031: IFFALSE 18129
18033: GO 18035
18035: DISABLE
18036: LD_INT 0
18038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18039: LD_ADDR_VAR 0 1
18043: PUSH
18044: LD_INT 22
18046: PUSH
18047: LD_OWVAR 2
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 21
18058: PUSH
18059: LD_INT 1
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: ST_TO_ADDR
// if not tmp then
18075: LD_VAR 0 1
18079: NOT
18080: IFFALSE 18084
// exit ;
18082: GO 18129
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18084: LD_VAR 0 1
18088: PUSH
18089: LD_INT 1
18091: PPUSH
18092: LD_VAR 0 1
18096: PPUSH
18097: CALL_OW 12
18101: ARRAY
18102: PPUSH
18103: LD_INT 1
18105: PPUSH
18106: LD_INT 4
18108: PPUSH
18109: CALL_OW 12
18113: PPUSH
18114: LD_INT 3000
18116: PPUSH
18117: LD_INT 9000
18119: PPUSH
18120: CALL_OW 12
18124: PPUSH
18125: CALL_OW 492
// end ;
18129: PPOPN 1
18131: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18132: LD_EXP 39
18136: PUSH
18137: LD_EXP 54
18141: AND
18142: IFFALSE 18162
18144: GO 18146
18146: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18147: LD_INT 1
18149: PPUSH
18150: LD_OWVAR 2
18154: PPUSH
18155: LD_INT 0
18157: PPUSH
18158: CALL_OW 324
18162: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18163: LD_EXP 39
18167: PUSH
18168: LD_EXP 55
18172: AND
18173: IFFALSE 18256
18175: GO 18177
18177: DISABLE
18178: LD_INT 0
18180: PPUSH
18181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18182: LD_ADDR_VAR 0 2
18186: PUSH
18187: LD_INT 22
18189: PUSH
18190: LD_OWVAR 2
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 21
18201: PUSH
18202: LD_INT 3
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PPUSH
18213: CALL_OW 69
18217: ST_TO_ADDR
// if not tmp then
18218: LD_VAR 0 2
18222: NOT
18223: IFFALSE 18227
// exit ;
18225: GO 18256
// for i in tmp do
18227: LD_ADDR_VAR 0 1
18231: PUSH
18232: LD_VAR 0 2
18236: PUSH
18237: FOR_IN
18238: IFFALSE 18254
// SetBLevel ( i , 10 ) ;
18240: LD_VAR 0 1
18244: PPUSH
18245: LD_INT 10
18247: PPUSH
18248: CALL_OW 241
18252: GO 18237
18254: POP
18255: POP
// end ;
18256: PPOPN 2
18258: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18259: LD_EXP 39
18263: PUSH
18264: LD_EXP 56
18268: AND
18269: IFFALSE 18380
18271: GO 18273
18273: DISABLE
18274: LD_INT 0
18276: PPUSH
18277: PPUSH
18278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18279: LD_ADDR_VAR 0 3
18283: PUSH
18284: LD_INT 22
18286: PUSH
18287: LD_OWVAR 2
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 25
18298: PUSH
18299: LD_INT 1
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PPUSH
18310: CALL_OW 69
18314: ST_TO_ADDR
// if not tmp then
18315: LD_VAR 0 3
18319: NOT
18320: IFFALSE 18324
// exit ;
18322: GO 18380
// un := tmp [ rand ( 1 , tmp ) ] ;
18324: LD_ADDR_VAR 0 2
18328: PUSH
18329: LD_VAR 0 3
18333: PUSH
18334: LD_INT 1
18336: PPUSH
18337: LD_VAR 0 3
18341: PPUSH
18342: CALL_OW 12
18346: ARRAY
18347: ST_TO_ADDR
// if Crawls ( un ) then
18348: LD_VAR 0 2
18352: PPUSH
18353: CALL_OW 318
18357: IFFALSE 18368
// ComWalk ( un ) ;
18359: LD_VAR 0 2
18363: PPUSH
18364: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18368: LD_VAR 0 2
18372: PPUSH
18373: LD_INT 5
18375: PPUSH
18376: CALL_OW 336
// end ;
18380: PPOPN 3
18382: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18383: LD_EXP 39
18387: PUSH
18388: LD_EXP 57
18392: AND
18393: PUSH
18394: LD_OWVAR 67
18398: PUSH
18399: LD_INT 4
18401: LESS
18402: AND
18403: IFFALSE 18422
18405: GO 18407
18407: DISABLE
// begin Difficulty := Difficulty + 1 ;
18408: LD_ADDR_OWVAR 67
18412: PUSH
18413: LD_OWVAR 67
18417: PUSH
18418: LD_INT 1
18420: PLUS
18421: ST_TO_ADDR
// end ;
18422: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18423: LD_EXP 39
18427: PUSH
18428: LD_EXP 58
18432: AND
18433: IFFALSE 18536
18435: GO 18437
18437: DISABLE
18438: LD_INT 0
18440: PPUSH
// begin for i := 1 to 5 do
18441: LD_ADDR_VAR 0 1
18445: PUSH
18446: DOUBLE
18447: LD_INT 1
18449: DEC
18450: ST_TO_ADDR
18451: LD_INT 5
18453: PUSH
18454: FOR_TO
18455: IFFALSE 18534
// begin uc_nation := nation_nature ;
18457: LD_ADDR_OWVAR 21
18461: PUSH
18462: LD_INT 0
18464: ST_TO_ADDR
// uc_side := 0 ;
18465: LD_ADDR_OWVAR 20
18469: PUSH
18470: LD_INT 0
18472: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18473: LD_ADDR_OWVAR 29
18477: PUSH
18478: LD_INT 12
18480: PUSH
18481: LD_INT 12
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: ST_TO_ADDR
// hc_agressivity := 20 ;
18488: LD_ADDR_OWVAR 35
18492: PUSH
18493: LD_INT 20
18495: ST_TO_ADDR
// hc_class := class_tiger ;
18496: LD_ADDR_OWVAR 28
18500: PUSH
18501: LD_INT 14
18503: ST_TO_ADDR
// hc_gallery :=  ;
18504: LD_ADDR_OWVAR 33
18508: PUSH
18509: LD_STRING 
18511: ST_TO_ADDR
// hc_name :=  ;
18512: LD_ADDR_OWVAR 26
18516: PUSH
18517: LD_STRING 
18519: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18520: CALL_OW 44
18524: PPUSH
18525: LD_INT 0
18527: PPUSH
18528: CALL_OW 51
// end ;
18532: GO 18454
18534: POP
18535: POP
// end ;
18536: PPOPN 1
18538: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18539: LD_EXP 39
18543: PUSH
18544: LD_EXP 59
18548: AND
18549: IFFALSE 18558
18551: GO 18553
18553: DISABLE
// StreamSibBomb ;
18554: CALL 18559 0 0
18558: END
// export function StreamSibBomb ; var i , x , y ; begin
18559: LD_INT 0
18561: PPUSH
18562: PPUSH
18563: PPUSH
18564: PPUSH
// result := false ;
18565: LD_ADDR_VAR 0 1
18569: PUSH
18570: LD_INT 0
18572: ST_TO_ADDR
// for i := 1 to 16 do
18573: LD_ADDR_VAR 0 2
18577: PUSH
18578: DOUBLE
18579: LD_INT 1
18581: DEC
18582: ST_TO_ADDR
18583: LD_INT 16
18585: PUSH
18586: FOR_TO
18587: IFFALSE 18786
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18589: LD_ADDR_VAR 0 3
18593: PUSH
18594: LD_INT 10
18596: PUSH
18597: LD_INT 20
18599: PUSH
18600: LD_INT 30
18602: PUSH
18603: LD_INT 40
18605: PUSH
18606: LD_INT 50
18608: PUSH
18609: LD_INT 60
18611: PUSH
18612: LD_INT 70
18614: PUSH
18615: LD_INT 80
18617: PUSH
18618: LD_INT 90
18620: PUSH
18621: LD_INT 100
18623: PUSH
18624: LD_INT 110
18626: PUSH
18627: LD_INT 120
18629: PUSH
18630: LD_INT 130
18632: PUSH
18633: LD_INT 140
18635: PUSH
18636: LD_INT 150
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 1
18658: PPUSH
18659: LD_INT 15
18661: PPUSH
18662: CALL_OW 12
18666: ARRAY
18667: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18668: LD_ADDR_VAR 0 4
18672: PUSH
18673: LD_INT 10
18675: PUSH
18676: LD_INT 20
18678: PUSH
18679: LD_INT 30
18681: PUSH
18682: LD_INT 40
18684: PUSH
18685: LD_INT 50
18687: PUSH
18688: LD_INT 60
18690: PUSH
18691: LD_INT 70
18693: PUSH
18694: LD_INT 80
18696: PUSH
18697: LD_INT 90
18699: PUSH
18700: LD_INT 100
18702: PUSH
18703: LD_INT 110
18705: PUSH
18706: LD_INT 120
18708: PUSH
18709: LD_INT 130
18711: PUSH
18712: LD_INT 140
18714: PUSH
18715: LD_INT 150
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 1
18737: PPUSH
18738: LD_INT 15
18740: PPUSH
18741: CALL_OW 12
18745: ARRAY
18746: ST_TO_ADDR
// if ValidHex ( x , y ) then
18747: LD_VAR 0 3
18751: PPUSH
18752: LD_VAR 0 4
18756: PPUSH
18757: CALL_OW 488
18761: IFFALSE 18784
// begin result := [ x , y ] ;
18763: LD_ADDR_VAR 0 1
18767: PUSH
18768: LD_VAR 0 3
18772: PUSH
18773: LD_VAR 0 4
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: ST_TO_ADDR
// break ;
18782: GO 18786
// end ; end ;
18784: GO 18586
18786: POP
18787: POP
// if result then
18788: LD_VAR 0 1
18792: IFFALSE 18852
// begin ToLua ( playSibBomb() ) ;
18794: LD_STRING playSibBomb()
18796: PPUSH
18797: CALL_OW 559
// wait ( 0 0$14 ) ;
18801: LD_INT 490
18803: PPUSH
18804: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18808: LD_VAR 0 1
18812: PUSH
18813: LD_INT 1
18815: ARRAY
18816: PPUSH
18817: LD_VAR 0 1
18821: PUSH
18822: LD_INT 2
18824: ARRAY
18825: PPUSH
18826: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18830: LD_VAR 0 1
18834: PUSH
18835: LD_INT 1
18837: ARRAY
18838: PPUSH
18839: LD_VAR 0 1
18843: PUSH
18844: LD_INT 2
18846: ARRAY
18847: PPUSH
18848: CALL_OW 429
// end ; end ;
18852: LD_VAR 0 1
18856: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18857: LD_EXP 39
18861: PUSH
18862: LD_EXP 61
18866: AND
18867: IFFALSE 18879
18869: GO 18871
18871: DISABLE
// YouLost (  ) ;
18872: LD_STRING 
18874: PPUSH
18875: CALL_OW 104
18879: END
// every 0 0$1 trigger StreamModeActive and sFog do
18880: LD_EXP 39
18884: PUSH
18885: LD_EXP 60
18889: AND
18890: IFFALSE 18904
18892: GO 18894
18894: DISABLE
// FogOff ( your_side ) ;
18895: LD_OWVAR 2
18899: PPUSH
18900: CALL_OW 344
18904: END
// every 0 0$1 trigger StreamModeActive and sSun do
18905: LD_EXP 39
18909: PUSH
18910: LD_EXP 62
18914: AND
18915: IFFALSE 18943
18917: GO 18919
18919: DISABLE
// begin solar_recharge_percent := 0 ;
18920: LD_ADDR_OWVAR 79
18924: PUSH
18925: LD_INT 0
18927: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18928: LD_INT 10500
18930: PPUSH
18931: CALL_OW 67
// solar_recharge_percent := 100 ;
18935: LD_ADDR_OWVAR 79
18939: PUSH
18940: LD_INT 100
18942: ST_TO_ADDR
// end ;
18943: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18944: LD_EXP 39
18948: PUSH
18949: LD_EXP 63
18953: AND
18954: IFFALSE 19193
18956: GO 18958
18958: DISABLE
18959: LD_INT 0
18961: PPUSH
18962: PPUSH
18963: PPUSH
// begin tmp := [ ] ;
18964: LD_ADDR_VAR 0 3
18968: PUSH
18969: EMPTY
18970: ST_TO_ADDR
// for i := 1 to 6 do
18971: LD_ADDR_VAR 0 1
18975: PUSH
18976: DOUBLE
18977: LD_INT 1
18979: DEC
18980: ST_TO_ADDR
18981: LD_INT 6
18983: PUSH
18984: FOR_TO
18985: IFFALSE 19090
// begin uc_nation := nation_nature ;
18987: LD_ADDR_OWVAR 21
18991: PUSH
18992: LD_INT 0
18994: ST_TO_ADDR
// uc_side := 0 ;
18995: LD_ADDR_OWVAR 20
18999: PUSH
19000: LD_INT 0
19002: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19003: LD_ADDR_OWVAR 29
19007: PUSH
19008: LD_INT 12
19010: PUSH
19011: LD_INT 12
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: ST_TO_ADDR
// hc_agressivity := 20 ;
19018: LD_ADDR_OWVAR 35
19022: PUSH
19023: LD_INT 20
19025: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19026: LD_ADDR_OWVAR 28
19030: PUSH
19031: LD_INT 17
19033: ST_TO_ADDR
// hc_gallery :=  ;
19034: LD_ADDR_OWVAR 33
19038: PUSH
19039: LD_STRING 
19041: ST_TO_ADDR
// hc_name :=  ;
19042: LD_ADDR_OWVAR 26
19046: PUSH
19047: LD_STRING 
19049: ST_TO_ADDR
// un := CreateHuman ;
19050: LD_ADDR_VAR 0 2
19054: PUSH
19055: CALL_OW 44
19059: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19060: LD_VAR 0 2
19064: PPUSH
19065: LD_INT 1
19067: PPUSH
19068: CALL_OW 51
// tmp := tmp ^ un ;
19072: LD_ADDR_VAR 0 3
19076: PUSH
19077: LD_VAR 0 3
19081: PUSH
19082: LD_VAR 0 2
19086: ADD
19087: ST_TO_ADDR
// end ;
19088: GO 18984
19090: POP
19091: POP
// repeat wait ( 0 0$1 ) ;
19092: LD_INT 35
19094: PPUSH
19095: CALL_OW 67
// for un in tmp do
19099: LD_ADDR_VAR 0 2
19103: PUSH
19104: LD_VAR 0 3
19108: PUSH
19109: FOR_IN
19110: IFFALSE 19184
// begin if IsDead ( un ) then
19112: LD_VAR 0 2
19116: PPUSH
19117: CALL_OW 301
19121: IFFALSE 19141
// begin tmp := tmp diff un ;
19123: LD_ADDR_VAR 0 3
19127: PUSH
19128: LD_VAR 0 3
19132: PUSH
19133: LD_VAR 0 2
19137: DIFF
19138: ST_TO_ADDR
// continue ;
19139: GO 19109
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19141: LD_VAR 0 2
19145: PPUSH
19146: LD_INT 3
19148: PUSH
19149: LD_INT 22
19151: PUSH
19152: LD_INT 0
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PPUSH
19163: CALL_OW 69
19167: PPUSH
19168: LD_VAR 0 2
19172: PPUSH
19173: CALL_OW 74
19177: PPUSH
19178: CALL_OW 115
// end ;
19182: GO 19109
19184: POP
19185: POP
// until not tmp ;
19186: LD_VAR 0 3
19190: NOT
19191: IFFALSE 19092
// end ;
19193: PPOPN 3
19195: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19196: LD_EXP 39
19200: PUSH
19201: LD_EXP 64
19205: AND
19206: IFFALSE 19260
19208: GO 19210
19210: DISABLE
// begin ToLua ( displayTroll(); ) ;
19211: LD_STRING displayTroll();
19213: PPUSH
19214: CALL_OW 559
// wait ( 3 3$00 ) ;
19218: LD_INT 6300
19220: PPUSH
19221: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19225: LD_STRING hideTroll();
19227: PPUSH
19228: CALL_OW 559
// wait ( 1 1$00 ) ;
19232: LD_INT 2100
19234: PPUSH
19235: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19239: LD_STRING displayTroll();
19241: PPUSH
19242: CALL_OW 559
// wait ( 1 1$00 ) ;
19246: LD_INT 2100
19248: PPUSH
19249: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19253: LD_STRING hideTroll();
19255: PPUSH
19256: CALL_OW 559
// end ;
19260: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19261: LD_EXP 39
19265: PUSH
19266: LD_EXP 65
19270: AND
19271: IFFALSE 19334
19273: GO 19275
19275: DISABLE
19276: LD_INT 0
19278: PPUSH
// begin p := 0 ;
19279: LD_ADDR_VAR 0 1
19283: PUSH
19284: LD_INT 0
19286: ST_TO_ADDR
// repeat game_speed := 1 ;
19287: LD_ADDR_OWVAR 65
19291: PUSH
19292: LD_INT 1
19294: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19295: LD_INT 35
19297: PPUSH
19298: CALL_OW 67
// p := p + 1 ;
19302: LD_ADDR_VAR 0 1
19306: PUSH
19307: LD_VAR 0 1
19311: PUSH
19312: LD_INT 1
19314: PLUS
19315: ST_TO_ADDR
// until p >= 60 ;
19316: LD_VAR 0 1
19320: PUSH
19321: LD_INT 60
19323: GREATEREQUAL
19324: IFFALSE 19287
// game_speed := 4 ;
19326: LD_ADDR_OWVAR 65
19330: PUSH
19331: LD_INT 4
19333: ST_TO_ADDR
// end ;
19334: PPOPN 1
19336: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19337: LD_EXP 39
19341: PUSH
19342: LD_EXP 66
19346: AND
19347: IFFALSE 19493
19349: GO 19351
19351: DISABLE
19352: LD_INT 0
19354: PPUSH
19355: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19356: LD_ADDR_VAR 0 1
19360: PUSH
19361: LD_INT 22
19363: PUSH
19364: LD_OWVAR 2
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 2
19375: PUSH
19376: LD_INT 30
19378: PUSH
19379: LD_INT 0
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 30
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PPUSH
19405: CALL_OW 69
19409: ST_TO_ADDR
// if not depot then
19410: LD_VAR 0 1
19414: NOT
19415: IFFALSE 19419
// exit ;
19417: GO 19493
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19419: LD_ADDR_VAR 0 2
19423: PUSH
19424: LD_VAR 0 1
19428: PUSH
19429: LD_INT 1
19431: PPUSH
19432: LD_VAR 0 1
19436: PPUSH
19437: CALL_OW 12
19441: ARRAY
19442: PPUSH
19443: CALL_OW 274
19447: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19448: LD_VAR 0 2
19452: PPUSH
19453: LD_INT 1
19455: PPUSH
19456: LD_INT 0
19458: PPUSH
19459: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19463: LD_VAR 0 2
19467: PPUSH
19468: LD_INT 2
19470: PPUSH
19471: LD_INT 0
19473: PPUSH
19474: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19478: LD_VAR 0 2
19482: PPUSH
19483: LD_INT 3
19485: PPUSH
19486: LD_INT 0
19488: PPUSH
19489: CALL_OW 277
// end ;
19493: PPOPN 2
19495: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19496: LD_EXP 39
19500: PUSH
19501: LD_EXP 67
19505: AND
19506: IFFALSE 19603
19508: GO 19510
19510: DISABLE
19511: LD_INT 0
19513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19514: LD_ADDR_VAR 0 1
19518: PUSH
19519: LD_INT 22
19521: PUSH
19522: LD_OWVAR 2
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 21
19533: PUSH
19534: LD_INT 1
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 3
19543: PUSH
19544: LD_INT 23
19546: PUSH
19547: LD_INT 0
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: PPUSH
19563: CALL_OW 69
19567: ST_TO_ADDR
// if not tmp then
19568: LD_VAR 0 1
19572: NOT
19573: IFFALSE 19577
// exit ;
19575: GO 19603
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19577: LD_VAR 0 1
19581: PUSH
19582: LD_INT 1
19584: PPUSH
19585: LD_VAR 0 1
19589: PPUSH
19590: CALL_OW 12
19594: ARRAY
19595: PPUSH
19596: LD_INT 200
19598: PPUSH
19599: CALL_OW 234
// end ;
19603: PPOPN 1
19605: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19606: LD_EXP 39
19610: PUSH
19611: LD_EXP 68
19615: AND
19616: IFFALSE 19695
19618: GO 19620
19620: DISABLE
19621: LD_INT 0
19623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19624: LD_ADDR_VAR 0 1
19628: PUSH
19629: LD_INT 22
19631: PUSH
19632: LD_OWVAR 2
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 21
19643: PUSH
19644: LD_INT 2
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PPUSH
19655: CALL_OW 69
19659: ST_TO_ADDR
// if not tmp then
19660: LD_VAR 0 1
19664: NOT
19665: IFFALSE 19669
// exit ;
19667: GO 19695
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19669: LD_VAR 0 1
19673: PUSH
19674: LD_INT 1
19676: PPUSH
19677: LD_VAR 0 1
19681: PPUSH
19682: CALL_OW 12
19686: ARRAY
19687: PPUSH
19688: LD_INT 60
19690: PPUSH
19691: CALL_OW 234
// end ;
19695: PPOPN 1
19697: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19698: LD_EXP 39
19702: PUSH
19703: LD_EXP 69
19707: AND
19708: IFFALSE 19807
19710: GO 19712
19712: DISABLE
19713: LD_INT 0
19715: PPUSH
19716: PPUSH
// begin enable ;
19717: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19718: LD_ADDR_VAR 0 1
19722: PUSH
19723: LD_INT 22
19725: PUSH
19726: LD_OWVAR 2
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 61
19737: PUSH
19738: EMPTY
19739: LIST
19740: PUSH
19741: LD_INT 33
19743: PUSH
19744: LD_INT 2
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: PPUSH
19756: CALL_OW 69
19760: ST_TO_ADDR
// if not tmp then
19761: LD_VAR 0 1
19765: NOT
19766: IFFALSE 19770
// exit ;
19768: GO 19807
// for i in tmp do
19770: LD_ADDR_VAR 0 2
19774: PUSH
19775: LD_VAR 0 1
19779: PUSH
19780: FOR_IN
19781: IFFALSE 19805
// if IsControledBy ( i ) then
19783: LD_VAR 0 2
19787: PPUSH
19788: CALL_OW 312
19792: IFFALSE 19803
// ComUnlink ( i ) ;
19794: LD_VAR 0 2
19798: PPUSH
19799: CALL_OW 136
19803: GO 19780
19805: POP
19806: POP
// end ;
19807: PPOPN 2
19809: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19810: LD_EXP 39
19814: PUSH
19815: LD_EXP 70
19819: AND
19820: IFFALSE 19960
19822: GO 19824
19824: DISABLE
19825: LD_INT 0
19827: PPUSH
19828: PPUSH
// begin ToLua ( displayPowell(); ) ;
19829: LD_STRING displayPowell();
19831: PPUSH
19832: CALL_OW 559
// uc_side := 0 ;
19836: LD_ADDR_OWVAR 20
19840: PUSH
19841: LD_INT 0
19843: ST_TO_ADDR
// uc_nation := 2 ;
19844: LD_ADDR_OWVAR 21
19848: PUSH
19849: LD_INT 2
19851: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19852: LD_ADDR_OWVAR 37
19856: PUSH
19857: LD_INT 14
19859: ST_TO_ADDR
// vc_engine := engine_siberite ;
19860: LD_ADDR_OWVAR 39
19864: PUSH
19865: LD_INT 3
19867: ST_TO_ADDR
// vc_control := control_apeman ;
19868: LD_ADDR_OWVAR 38
19872: PUSH
19873: LD_INT 5
19875: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19876: LD_ADDR_OWVAR 40
19880: PUSH
19881: LD_INT 29
19883: ST_TO_ADDR
// un := CreateVehicle ;
19884: LD_ADDR_VAR 0 2
19888: PUSH
19889: CALL_OW 45
19893: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19894: LD_VAR 0 2
19898: PPUSH
19899: LD_INT 1
19901: PPUSH
19902: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19906: LD_INT 35
19908: PPUSH
19909: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19913: LD_VAR 0 2
19917: PPUSH
19918: LD_INT 22
19920: PUSH
19921: LD_OWVAR 2
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PPUSH
19930: CALL_OW 69
19934: PPUSH
19935: LD_VAR 0 2
19939: PPUSH
19940: CALL_OW 74
19944: PPUSH
19945: CALL_OW 115
// until IsDead ( un ) ;
19949: LD_VAR 0 2
19953: PPUSH
19954: CALL_OW 301
19958: IFFALSE 19906
// end ;
19960: PPOPN 2
19962: END
// every 0 0$1 trigger StreamModeActive and sStu do
19963: LD_EXP 39
19967: PUSH
19968: LD_EXP 78
19972: AND
19973: IFFALSE 19989
19975: GO 19977
19977: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19978: LD_STRING displayStucuk();
19980: PPUSH
19981: CALL_OW 559
// ResetFog ;
19985: CALL_OW 335
// end ;
19989: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19990: LD_EXP 39
19994: PUSH
19995: LD_EXP 71
19999: AND
20000: IFFALSE 20141
20002: GO 20004
20004: DISABLE
20005: LD_INT 0
20007: PPUSH
20008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20009: LD_ADDR_VAR 0 2
20013: PUSH
20014: LD_INT 22
20016: PUSH
20017: LD_OWVAR 2
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 21
20028: PUSH
20029: LD_INT 1
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PPUSH
20040: CALL_OW 69
20044: ST_TO_ADDR
// if not tmp then
20045: LD_VAR 0 2
20049: NOT
20050: IFFALSE 20054
// exit ;
20052: GO 20141
// un := tmp [ rand ( 1 , tmp ) ] ;
20054: LD_ADDR_VAR 0 1
20058: PUSH
20059: LD_VAR 0 2
20063: PUSH
20064: LD_INT 1
20066: PPUSH
20067: LD_VAR 0 2
20071: PPUSH
20072: CALL_OW 12
20076: ARRAY
20077: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20078: LD_VAR 0 1
20082: PPUSH
20083: LD_INT 0
20085: PPUSH
20086: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20090: LD_VAR 0 1
20094: PPUSH
20095: LD_OWVAR 3
20099: PUSH
20100: LD_VAR 0 1
20104: DIFF
20105: PPUSH
20106: LD_VAR 0 1
20110: PPUSH
20111: CALL_OW 74
20115: PPUSH
20116: CALL_OW 115
// wait ( 0 0$20 ) ;
20120: LD_INT 700
20122: PPUSH
20123: CALL_OW 67
// SetSide ( un , your_side ) ;
20127: LD_VAR 0 1
20131: PPUSH
20132: LD_OWVAR 2
20136: PPUSH
20137: CALL_OW 235
// end ;
20141: PPOPN 2
20143: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20144: LD_EXP 39
20148: PUSH
20149: LD_EXP 72
20153: AND
20154: IFFALSE 20260
20156: GO 20158
20158: DISABLE
20159: LD_INT 0
20161: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20162: LD_ADDR_VAR 0 1
20166: PUSH
20167: LD_INT 22
20169: PUSH
20170: LD_OWVAR 2
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 2
20181: PUSH
20182: LD_INT 30
20184: PUSH
20185: LD_INT 0
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 30
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: LIST
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PPUSH
20211: CALL_OW 69
20215: ST_TO_ADDR
// if not depot then
20216: LD_VAR 0 1
20220: NOT
20221: IFFALSE 20225
// exit ;
20223: GO 20260
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20225: LD_VAR 0 1
20229: PUSH
20230: LD_INT 1
20232: ARRAY
20233: PPUSH
20234: CALL_OW 250
20238: PPUSH
20239: LD_VAR 0 1
20243: PUSH
20244: LD_INT 1
20246: ARRAY
20247: PPUSH
20248: CALL_OW 251
20252: PPUSH
20253: LD_INT 70
20255: PPUSH
20256: CALL_OW 495
// end ;
20260: PPOPN 1
20262: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20263: LD_EXP 39
20267: PUSH
20268: LD_EXP 73
20272: AND
20273: IFFALSE 20484
20275: GO 20277
20277: DISABLE
20278: LD_INT 0
20280: PPUSH
20281: PPUSH
20282: PPUSH
20283: PPUSH
20284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20285: LD_ADDR_VAR 0 5
20289: PUSH
20290: LD_INT 22
20292: PUSH
20293: LD_OWVAR 2
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 21
20304: PUSH
20305: LD_INT 1
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PPUSH
20316: CALL_OW 69
20320: ST_TO_ADDR
// if not tmp then
20321: LD_VAR 0 5
20325: NOT
20326: IFFALSE 20330
// exit ;
20328: GO 20484
// for i in tmp do
20330: LD_ADDR_VAR 0 1
20334: PUSH
20335: LD_VAR 0 5
20339: PUSH
20340: FOR_IN
20341: IFFALSE 20482
// begin d := rand ( 0 , 5 ) ;
20343: LD_ADDR_VAR 0 4
20347: PUSH
20348: LD_INT 0
20350: PPUSH
20351: LD_INT 5
20353: PPUSH
20354: CALL_OW 12
20358: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20359: LD_ADDR_VAR 0 2
20363: PUSH
20364: LD_VAR 0 1
20368: PPUSH
20369: CALL_OW 250
20373: PPUSH
20374: LD_VAR 0 4
20378: PPUSH
20379: LD_INT 3
20381: PPUSH
20382: LD_INT 12
20384: PPUSH
20385: CALL_OW 12
20389: PPUSH
20390: CALL_OW 272
20394: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20395: LD_ADDR_VAR 0 3
20399: PUSH
20400: LD_VAR 0 1
20404: PPUSH
20405: CALL_OW 251
20409: PPUSH
20410: LD_VAR 0 4
20414: PPUSH
20415: LD_INT 3
20417: PPUSH
20418: LD_INT 12
20420: PPUSH
20421: CALL_OW 12
20425: PPUSH
20426: CALL_OW 273
20430: ST_TO_ADDR
// if ValidHex ( x , y ) then
20431: LD_VAR 0 2
20435: PPUSH
20436: LD_VAR 0 3
20440: PPUSH
20441: CALL_OW 488
20445: IFFALSE 20480
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20447: LD_VAR 0 1
20451: PPUSH
20452: LD_VAR 0 2
20456: PPUSH
20457: LD_VAR 0 3
20461: PPUSH
20462: LD_INT 3
20464: PPUSH
20465: LD_INT 6
20467: PPUSH
20468: CALL_OW 12
20472: PPUSH
20473: LD_INT 1
20475: PPUSH
20476: CALL_OW 483
// end ;
20480: GO 20340
20482: POP
20483: POP
// end ;
20484: PPOPN 5
20486: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20487: LD_EXP 39
20491: PUSH
20492: LD_EXP 74
20496: AND
20497: IFFALSE 20591
20499: GO 20501
20501: DISABLE
20502: LD_INT 0
20504: PPUSH
20505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20506: LD_ADDR_VAR 0 2
20510: PUSH
20511: LD_INT 22
20513: PUSH
20514: LD_OWVAR 2
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 32
20525: PUSH
20526: LD_INT 1
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 21
20535: PUSH
20536: LD_INT 2
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: LIST
20547: PPUSH
20548: CALL_OW 69
20552: ST_TO_ADDR
// if not tmp then
20553: LD_VAR 0 2
20557: NOT
20558: IFFALSE 20562
// exit ;
20560: GO 20591
// for i in tmp do
20562: LD_ADDR_VAR 0 1
20566: PUSH
20567: LD_VAR 0 2
20571: PUSH
20572: FOR_IN
20573: IFFALSE 20589
// SetFuel ( i , 0 ) ;
20575: LD_VAR 0 1
20579: PPUSH
20580: LD_INT 0
20582: PPUSH
20583: CALL_OW 240
20587: GO 20572
20589: POP
20590: POP
// end ;
20591: PPOPN 2
20593: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20594: LD_EXP 39
20598: PUSH
20599: LD_EXP 75
20603: AND
20604: IFFALSE 20670
20606: GO 20608
20608: DISABLE
20609: LD_INT 0
20611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20612: LD_ADDR_VAR 0 1
20616: PUSH
20617: LD_INT 22
20619: PUSH
20620: LD_OWVAR 2
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 30
20631: PUSH
20632: LD_INT 29
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PPUSH
20643: CALL_OW 69
20647: ST_TO_ADDR
// if not tmp then
20648: LD_VAR 0 1
20652: NOT
20653: IFFALSE 20657
// exit ;
20655: GO 20670
// DestroyUnit ( tmp [ 1 ] ) ;
20657: LD_VAR 0 1
20661: PUSH
20662: LD_INT 1
20664: ARRAY
20665: PPUSH
20666: CALL_OW 65
// end ;
20670: PPOPN 1
20672: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20673: LD_EXP 39
20677: PUSH
20678: LD_EXP 77
20682: AND
20683: IFFALSE 20812
20685: GO 20687
20687: DISABLE
20688: LD_INT 0
20690: PPUSH
// begin uc_side := 0 ;
20691: LD_ADDR_OWVAR 20
20695: PUSH
20696: LD_INT 0
20698: ST_TO_ADDR
// uc_nation := nation_arabian ;
20699: LD_ADDR_OWVAR 21
20703: PUSH
20704: LD_INT 2
20706: ST_TO_ADDR
// hc_gallery :=  ;
20707: LD_ADDR_OWVAR 33
20711: PUSH
20712: LD_STRING 
20714: ST_TO_ADDR
// hc_name :=  ;
20715: LD_ADDR_OWVAR 26
20719: PUSH
20720: LD_STRING 
20722: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20723: LD_INT 1
20725: PPUSH
20726: LD_INT 11
20728: PPUSH
20729: LD_INT 10
20731: PPUSH
20732: CALL_OW 380
// un := CreateHuman ;
20736: LD_ADDR_VAR 0 1
20740: PUSH
20741: CALL_OW 44
20745: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20746: LD_VAR 0 1
20750: PPUSH
20751: LD_INT 1
20753: PPUSH
20754: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20758: LD_INT 35
20760: PPUSH
20761: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20765: LD_VAR 0 1
20769: PPUSH
20770: LD_INT 22
20772: PUSH
20773: LD_OWVAR 2
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PPUSH
20782: CALL_OW 69
20786: PPUSH
20787: LD_VAR 0 1
20791: PPUSH
20792: CALL_OW 74
20796: PPUSH
20797: CALL_OW 115
// until IsDead ( un ) ;
20801: LD_VAR 0 1
20805: PPUSH
20806: CALL_OW 301
20810: IFFALSE 20758
// end ;
20812: PPOPN 1
20814: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20815: LD_EXP 39
20819: PUSH
20820: LD_EXP 79
20824: AND
20825: IFFALSE 20837
20827: GO 20829
20829: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20830: LD_STRING earthquake(getX(game), 0, 32)
20832: PPUSH
20833: CALL_OW 559
20837: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20838: LD_EXP 39
20842: PUSH
20843: LD_EXP 80
20847: AND
20848: IFFALSE 20939
20850: GO 20852
20852: DISABLE
20853: LD_INT 0
20855: PPUSH
// begin enable ;
20856: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20857: LD_ADDR_VAR 0 1
20861: PUSH
20862: LD_INT 22
20864: PUSH
20865: LD_OWVAR 2
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 21
20876: PUSH
20877: LD_INT 2
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 33
20886: PUSH
20887: LD_INT 3
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: LIST
20898: PPUSH
20899: CALL_OW 69
20903: ST_TO_ADDR
// if not tmp then
20904: LD_VAR 0 1
20908: NOT
20909: IFFALSE 20913
// exit ;
20911: GO 20939
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20913: LD_VAR 0 1
20917: PUSH
20918: LD_INT 1
20920: PPUSH
20921: LD_VAR 0 1
20925: PPUSH
20926: CALL_OW 12
20930: ARRAY
20931: PPUSH
20932: LD_INT 1
20934: PPUSH
20935: CALL_OW 234
// end ;
20939: PPOPN 1
20941: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20942: LD_EXP 39
20946: PUSH
20947: LD_EXP 81
20951: AND
20952: IFFALSE 21093
20954: GO 20956
20956: DISABLE
20957: LD_INT 0
20959: PPUSH
20960: PPUSH
20961: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20962: LD_ADDR_VAR 0 3
20966: PUSH
20967: LD_INT 22
20969: PUSH
20970: LD_OWVAR 2
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 25
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PPUSH
20993: CALL_OW 69
20997: ST_TO_ADDR
// if not tmp then
20998: LD_VAR 0 3
21002: NOT
21003: IFFALSE 21007
// exit ;
21005: GO 21093
// un := tmp [ rand ( 1 , tmp ) ] ;
21007: LD_ADDR_VAR 0 2
21011: PUSH
21012: LD_VAR 0 3
21016: PUSH
21017: LD_INT 1
21019: PPUSH
21020: LD_VAR 0 3
21024: PPUSH
21025: CALL_OW 12
21029: ARRAY
21030: ST_TO_ADDR
// if Crawls ( un ) then
21031: LD_VAR 0 2
21035: PPUSH
21036: CALL_OW 318
21040: IFFALSE 21051
// ComWalk ( un ) ;
21042: LD_VAR 0 2
21046: PPUSH
21047: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21051: LD_VAR 0 2
21055: PPUSH
21056: LD_INT 9
21058: PPUSH
21059: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21063: LD_INT 28
21065: PPUSH
21066: LD_OWVAR 2
21070: PPUSH
21071: LD_INT 2
21073: PPUSH
21074: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21078: LD_INT 29
21080: PPUSH
21081: LD_OWVAR 2
21085: PPUSH
21086: LD_INT 2
21088: PPUSH
21089: CALL_OW 322
// end ;
21093: PPOPN 3
21095: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21096: LD_EXP 39
21100: PUSH
21101: LD_EXP 82
21105: AND
21106: IFFALSE 21217
21108: GO 21110
21110: DISABLE
21111: LD_INT 0
21113: PPUSH
21114: PPUSH
21115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21116: LD_ADDR_VAR 0 3
21120: PUSH
21121: LD_INT 22
21123: PUSH
21124: LD_OWVAR 2
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 25
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PPUSH
21147: CALL_OW 69
21151: ST_TO_ADDR
// if not tmp then
21152: LD_VAR 0 3
21156: NOT
21157: IFFALSE 21161
// exit ;
21159: GO 21217
// un := tmp [ rand ( 1 , tmp ) ] ;
21161: LD_ADDR_VAR 0 2
21165: PUSH
21166: LD_VAR 0 3
21170: PUSH
21171: LD_INT 1
21173: PPUSH
21174: LD_VAR 0 3
21178: PPUSH
21179: CALL_OW 12
21183: ARRAY
21184: ST_TO_ADDR
// if Crawls ( un ) then
21185: LD_VAR 0 2
21189: PPUSH
21190: CALL_OW 318
21194: IFFALSE 21205
// ComWalk ( un ) ;
21196: LD_VAR 0 2
21200: PPUSH
21201: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21205: LD_VAR 0 2
21209: PPUSH
21210: LD_INT 8
21212: PPUSH
21213: CALL_OW 336
// end ;
21217: PPOPN 3
21219: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21220: LD_EXP 39
21224: PUSH
21225: LD_EXP 83
21229: AND
21230: IFFALSE 21374
21232: GO 21234
21234: DISABLE
21235: LD_INT 0
21237: PPUSH
21238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21239: LD_ADDR_VAR 0 2
21243: PUSH
21244: LD_INT 22
21246: PUSH
21247: LD_OWVAR 2
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 21
21258: PUSH
21259: LD_INT 2
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 2
21268: PUSH
21269: LD_INT 34
21271: PUSH
21272: LD_INT 12
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 34
21281: PUSH
21282: LD_INT 51
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 34
21291: PUSH
21292: LD_INT 32
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: PPUSH
21310: CALL_OW 69
21314: ST_TO_ADDR
// if not tmp then
21315: LD_VAR 0 2
21319: NOT
21320: IFFALSE 21324
// exit ;
21322: GO 21374
// for i in tmp do
21324: LD_ADDR_VAR 0 1
21328: PUSH
21329: LD_VAR 0 2
21333: PUSH
21334: FOR_IN
21335: IFFALSE 21372
// if GetCargo ( i , mat_artifact ) = 0 then
21337: LD_VAR 0 1
21341: PPUSH
21342: LD_INT 4
21344: PPUSH
21345: CALL_OW 289
21349: PUSH
21350: LD_INT 0
21352: EQUAL
21353: IFFALSE 21370
// SetCargo ( i , mat_siberit , 100 ) ;
21355: LD_VAR 0 1
21359: PPUSH
21360: LD_INT 3
21362: PPUSH
21363: LD_INT 100
21365: PPUSH
21366: CALL_OW 290
21370: GO 21334
21372: POP
21373: POP
// end ;
21374: PPOPN 2
21376: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21377: LD_EXP 39
21381: PUSH
21382: LD_EXP 84
21386: AND
21387: IFFALSE 21570
21389: GO 21391
21391: DISABLE
21392: LD_INT 0
21394: PPUSH
21395: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21396: LD_ADDR_VAR 0 2
21400: PUSH
21401: LD_INT 22
21403: PUSH
21404: LD_OWVAR 2
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PPUSH
21413: CALL_OW 69
21417: ST_TO_ADDR
// if not tmp then
21418: LD_VAR 0 2
21422: NOT
21423: IFFALSE 21427
// exit ;
21425: GO 21570
// for i := 1 to 2 do
21427: LD_ADDR_VAR 0 1
21431: PUSH
21432: DOUBLE
21433: LD_INT 1
21435: DEC
21436: ST_TO_ADDR
21437: LD_INT 2
21439: PUSH
21440: FOR_TO
21441: IFFALSE 21568
// begin uc_side := your_side ;
21443: LD_ADDR_OWVAR 20
21447: PUSH
21448: LD_OWVAR 2
21452: ST_TO_ADDR
// uc_nation := nation_american ;
21453: LD_ADDR_OWVAR 21
21457: PUSH
21458: LD_INT 1
21460: ST_TO_ADDR
// vc_chassis := us_morphling ;
21461: LD_ADDR_OWVAR 37
21465: PUSH
21466: LD_INT 5
21468: ST_TO_ADDR
// vc_engine := engine_siberite ;
21469: LD_ADDR_OWVAR 39
21473: PUSH
21474: LD_INT 3
21476: ST_TO_ADDR
// vc_control := control_computer ;
21477: LD_ADDR_OWVAR 38
21481: PUSH
21482: LD_INT 3
21484: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21485: LD_ADDR_OWVAR 40
21489: PUSH
21490: LD_INT 10
21492: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21493: LD_VAR 0 2
21497: PUSH
21498: LD_INT 1
21500: ARRAY
21501: PPUSH
21502: CALL_OW 310
21506: NOT
21507: IFFALSE 21554
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21509: CALL_OW 45
21513: PPUSH
21514: LD_VAR 0 2
21518: PUSH
21519: LD_INT 1
21521: ARRAY
21522: PPUSH
21523: CALL_OW 250
21527: PPUSH
21528: LD_VAR 0 2
21532: PUSH
21533: LD_INT 1
21535: ARRAY
21536: PPUSH
21537: CALL_OW 251
21541: PPUSH
21542: LD_INT 12
21544: PPUSH
21545: LD_INT 1
21547: PPUSH
21548: CALL_OW 50
21552: GO 21566
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21554: CALL_OW 45
21558: PPUSH
21559: LD_INT 1
21561: PPUSH
21562: CALL_OW 51
// end ;
21566: GO 21440
21568: POP
21569: POP
// end ;
21570: PPOPN 2
21572: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21573: LD_EXP 39
21577: PUSH
21578: LD_EXP 85
21582: AND
21583: IFFALSE 21805
21585: GO 21587
21587: DISABLE
21588: LD_INT 0
21590: PPUSH
21591: PPUSH
21592: PPUSH
21593: PPUSH
21594: PPUSH
21595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21596: LD_ADDR_VAR 0 6
21600: PUSH
21601: LD_INT 22
21603: PUSH
21604: LD_OWVAR 2
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 21
21615: PUSH
21616: LD_INT 1
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 3
21625: PUSH
21626: LD_INT 23
21628: PUSH
21629: LD_INT 0
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: LIST
21644: PPUSH
21645: CALL_OW 69
21649: ST_TO_ADDR
// if not tmp then
21650: LD_VAR 0 6
21654: NOT
21655: IFFALSE 21659
// exit ;
21657: GO 21805
// s1 := rand ( 1 , 4 ) ;
21659: LD_ADDR_VAR 0 2
21663: PUSH
21664: LD_INT 1
21666: PPUSH
21667: LD_INT 4
21669: PPUSH
21670: CALL_OW 12
21674: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21675: LD_ADDR_VAR 0 4
21679: PUSH
21680: LD_VAR 0 6
21684: PUSH
21685: LD_INT 1
21687: ARRAY
21688: PPUSH
21689: LD_VAR 0 2
21693: PPUSH
21694: CALL_OW 259
21698: ST_TO_ADDR
// if s1 = 1 then
21699: LD_VAR 0 2
21703: PUSH
21704: LD_INT 1
21706: EQUAL
21707: IFFALSE 21727
// s2 := rand ( 2 , 4 ) else
21709: LD_ADDR_VAR 0 3
21713: PUSH
21714: LD_INT 2
21716: PPUSH
21717: LD_INT 4
21719: PPUSH
21720: CALL_OW 12
21724: ST_TO_ADDR
21725: GO 21735
// s2 := 1 ;
21727: LD_ADDR_VAR 0 3
21731: PUSH
21732: LD_INT 1
21734: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21735: LD_ADDR_VAR 0 5
21739: PUSH
21740: LD_VAR 0 6
21744: PUSH
21745: LD_INT 1
21747: ARRAY
21748: PPUSH
21749: LD_VAR 0 3
21753: PPUSH
21754: CALL_OW 259
21758: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21759: LD_VAR 0 6
21763: PUSH
21764: LD_INT 1
21766: ARRAY
21767: PPUSH
21768: LD_VAR 0 2
21772: PPUSH
21773: LD_VAR 0 5
21777: PPUSH
21778: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21782: LD_VAR 0 6
21786: PUSH
21787: LD_INT 1
21789: ARRAY
21790: PPUSH
21791: LD_VAR 0 3
21795: PPUSH
21796: LD_VAR 0 4
21800: PPUSH
21801: CALL_OW 237
// end ;
21805: PPOPN 6
21807: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21808: LD_EXP 39
21812: PUSH
21813: LD_EXP 86
21817: AND
21818: IFFALSE 21897
21820: GO 21822
21822: DISABLE
21823: LD_INT 0
21825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21826: LD_ADDR_VAR 0 1
21830: PUSH
21831: LD_INT 22
21833: PUSH
21834: LD_OWVAR 2
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 30
21845: PUSH
21846: LD_INT 3
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PPUSH
21857: CALL_OW 69
21861: ST_TO_ADDR
// if not tmp then
21862: LD_VAR 0 1
21866: NOT
21867: IFFALSE 21871
// exit ;
21869: GO 21897
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21871: LD_VAR 0 1
21875: PUSH
21876: LD_INT 1
21878: PPUSH
21879: LD_VAR 0 1
21883: PPUSH
21884: CALL_OW 12
21888: ARRAY
21889: PPUSH
21890: LD_INT 1
21892: PPUSH
21893: CALL_OW 234
// end ;
21897: PPOPN 1
21899: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21900: LD_EXP 39
21904: PUSH
21905: LD_EXP 87
21909: AND
21910: IFFALSE 22022
21912: GO 21914
21914: DISABLE
21915: LD_INT 0
21917: PPUSH
21918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21919: LD_ADDR_VAR 0 2
21923: PUSH
21924: LD_INT 22
21926: PUSH
21927: LD_OWVAR 2
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 2
21938: PUSH
21939: LD_INT 30
21941: PUSH
21942: LD_INT 27
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 30
21951: PUSH
21952: LD_INT 26
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 30
21961: PUSH
21962: LD_INT 28
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PPUSH
21979: CALL_OW 69
21983: ST_TO_ADDR
// if not tmp then
21984: LD_VAR 0 2
21988: NOT
21989: IFFALSE 21993
// exit ;
21991: GO 22022
// for i in tmp do
21993: LD_ADDR_VAR 0 1
21997: PUSH
21998: LD_VAR 0 2
22002: PUSH
22003: FOR_IN
22004: IFFALSE 22020
// SetLives ( i , 1 ) ;
22006: LD_VAR 0 1
22010: PPUSH
22011: LD_INT 1
22013: PPUSH
22014: CALL_OW 234
22018: GO 22003
22020: POP
22021: POP
// end ;
22022: PPOPN 2
22024: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22025: LD_EXP 39
22029: PUSH
22030: LD_EXP 88
22034: AND
22035: IFFALSE 22322
22037: GO 22039
22039: DISABLE
22040: LD_INT 0
22042: PPUSH
22043: PPUSH
22044: PPUSH
// begin i := rand ( 1 , 7 ) ;
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: LD_INT 1
22052: PPUSH
22053: LD_INT 7
22055: PPUSH
22056: CALL_OW 12
22060: ST_TO_ADDR
// case i of 1 :
22061: LD_VAR 0 1
22065: PUSH
22066: LD_INT 1
22068: DOUBLE
22069: EQUAL
22070: IFTRUE 22074
22072: GO 22084
22074: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22075: LD_STRING earthquake(getX(game), 0, 32)
22077: PPUSH
22078: CALL_OW 559
22082: GO 22322
22084: LD_INT 2
22086: DOUBLE
22087: EQUAL
22088: IFTRUE 22092
22090: GO 22106
22092: POP
// begin ToLua ( displayStucuk(); ) ;
22093: LD_STRING displayStucuk();
22095: PPUSH
22096: CALL_OW 559
// ResetFog ;
22100: CALL_OW 335
// end ; 3 :
22104: GO 22322
22106: LD_INT 3
22108: DOUBLE
22109: EQUAL
22110: IFTRUE 22114
22112: GO 22218
22114: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22115: LD_ADDR_VAR 0 2
22119: PUSH
22120: LD_INT 22
22122: PUSH
22123: LD_OWVAR 2
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 25
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PPUSH
22146: CALL_OW 69
22150: ST_TO_ADDR
// if not tmp then
22151: LD_VAR 0 2
22155: NOT
22156: IFFALSE 22160
// exit ;
22158: GO 22322
// un := tmp [ rand ( 1 , tmp ) ] ;
22160: LD_ADDR_VAR 0 3
22164: PUSH
22165: LD_VAR 0 2
22169: PUSH
22170: LD_INT 1
22172: PPUSH
22173: LD_VAR 0 2
22177: PPUSH
22178: CALL_OW 12
22182: ARRAY
22183: ST_TO_ADDR
// if Crawls ( un ) then
22184: LD_VAR 0 3
22188: PPUSH
22189: CALL_OW 318
22193: IFFALSE 22204
// ComWalk ( un ) ;
22195: LD_VAR 0 3
22199: PPUSH
22200: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22204: LD_VAR 0 3
22208: PPUSH
22209: LD_INT 8
22211: PPUSH
22212: CALL_OW 336
// end ; 4 :
22216: GO 22322
22218: LD_INT 4
22220: DOUBLE
22221: EQUAL
22222: IFTRUE 22226
22224: GO 22300
22226: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22227: LD_ADDR_VAR 0 2
22231: PUSH
22232: LD_INT 22
22234: PUSH
22235: LD_OWVAR 2
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 30
22246: PUSH
22247: LD_INT 29
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PPUSH
22258: CALL_OW 69
22262: ST_TO_ADDR
// if not tmp then
22263: LD_VAR 0 2
22267: NOT
22268: IFFALSE 22272
// exit ;
22270: GO 22322
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22272: LD_VAR 0 2
22276: PUSH
22277: LD_INT 1
22279: ARRAY
22280: PPUSH
22281: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22285: LD_VAR 0 2
22289: PUSH
22290: LD_INT 1
22292: ARRAY
22293: PPUSH
22294: CALL_OW 65
// end ; 5 .. 7 :
22298: GO 22322
22300: LD_INT 5
22302: DOUBLE
22303: GREATEREQUAL
22304: IFFALSE 22312
22306: LD_INT 7
22308: DOUBLE
22309: LESSEQUAL
22310: IFTRUE 22314
22312: GO 22321
22314: POP
// StreamSibBomb ; end ;
22315: CALL 18559 0 0
22319: GO 22322
22321: POP
// end ;
22322: PPOPN 3
22324: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22325: LD_EXP 39
22329: PUSH
22330: LD_EXP 89
22334: AND
22335: IFFALSE 22491
22337: GO 22339
22339: DISABLE
22340: LD_INT 0
22342: PPUSH
22343: PPUSH
22344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22345: LD_ADDR_VAR 0 2
22349: PUSH
22350: LD_INT 81
22352: PUSH
22353: LD_OWVAR 2
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: LD_INT 21
22367: PUSH
22368: LD_INT 1
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 21
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PPUSH
22394: CALL_OW 69
22398: ST_TO_ADDR
// if not tmp then
22399: LD_VAR 0 2
22403: NOT
22404: IFFALSE 22408
// exit ;
22406: GO 22491
// p := 0 ;
22408: LD_ADDR_VAR 0 3
22412: PUSH
22413: LD_INT 0
22415: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22416: LD_INT 35
22418: PPUSH
22419: CALL_OW 67
// p := p + 1 ;
22423: LD_ADDR_VAR 0 3
22427: PUSH
22428: LD_VAR 0 3
22432: PUSH
22433: LD_INT 1
22435: PLUS
22436: ST_TO_ADDR
// for i in tmp do
22437: LD_ADDR_VAR 0 1
22441: PUSH
22442: LD_VAR 0 2
22446: PUSH
22447: FOR_IN
22448: IFFALSE 22479
// if GetLives ( i ) < 1000 then
22450: LD_VAR 0 1
22454: PPUSH
22455: CALL_OW 256
22459: PUSH
22460: LD_INT 1000
22462: LESS
22463: IFFALSE 22477
// SetLives ( i , 1000 ) ;
22465: LD_VAR 0 1
22469: PPUSH
22470: LD_INT 1000
22472: PPUSH
22473: CALL_OW 234
22477: GO 22447
22479: POP
22480: POP
// until p > 20 ;
22481: LD_VAR 0 3
22485: PUSH
22486: LD_INT 20
22488: GREATER
22489: IFFALSE 22416
// end ;
22491: PPOPN 3
22493: END
// every 0 0$1 trigger StreamModeActive and sTime do
22494: LD_EXP 39
22498: PUSH
22499: LD_EXP 90
22503: AND
22504: IFFALSE 22539
22506: GO 22508
22508: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22509: LD_INT 28
22511: PPUSH
22512: LD_OWVAR 2
22516: PPUSH
22517: LD_INT 2
22519: PPUSH
22520: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22524: LD_INT 30
22526: PPUSH
22527: LD_OWVAR 2
22531: PPUSH
22532: LD_INT 2
22534: PPUSH
22535: CALL_OW 322
// end ;
22539: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22540: LD_EXP 39
22544: PUSH
22545: LD_EXP 91
22549: AND
22550: IFFALSE 22671
22552: GO 22554
22554: DISABLE
22555: LD_INT 0
22557: PPUSH
22558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22559: LD_ADDR_VAR 0 2
22563: PUSH
22564: LD_INT 22
22566: PUSH
22567: LD_OWVAR 2
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 21
22578: PUSH
22579: LD_INT 1
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 3
22588: PUSH
22589: LD_INT 23
22591: PUSH
22592: LD_INT 0
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: LIST
22607: PPUSH
22608: CALL_OW 69
22612: ST_TO_ADDR
// if not tmp then
22613: LD_VAR 0 2
22617: NOT
22618: IFFALSE 22622
// exit ;
22620: GO 22671
// for i in tmp do
22622: LD_ADDR_VAR 0 1
22626: PUSH
22627: LD_VAR 0 2
22631: PUSH
22632: FOR_IN
22633: IFFALSE 22669
// begin if Crawls ( i ) then
22635: LD_VAR 0 1
22639: PPUSH
22640: CALL_OW 318
22644: IFFALSE 22655
// ComWalk ( i ) ;
22646: LD_VAR 0 1
22650: PPUSH
22651: CALL_OW 138
// SetClass ( i , 2 ) ;
22655: LD_VAR 0 1
22659: PPUSH
22660: LD_INT 2
22662: PPUSH
22663: CALL_OW 336
// end ;
22667: GO 22632
22669: POP
22670: POP
// end ;
22671: PPOPN 2
22673: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22674: LD_EXP 39
22678: PUSH
22679: LD_EXP 92
22683: AND
22684: IFFALSE 22972
22686: GO 22688
22688: DISABLE
22689: LD_INT 0
22691: PPUSH
22692: PPUSH
22693: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22694: LD_OWVAR 2
22698: PPUSH
22699: LD_INT 9
22701: PPUSH
22702: LD_INT 1
22704: PPUSH
22705: LD_INT 1
22707: PPUSH
22708: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22712: LD_INT 9
22714: PPUSH
22715: LD_OWVAR 2
22719: PPUSH
22720: CALL_OW 343
// uc_side := 9 ;
22724: LD_ADDR_OWVAR 20
22728: PUSH
22729: LD_INT 9
22731: ST_TO_ADDR
// uc_nation := 2 ;
22732: LD_ADDR_OWVAR 21
22736: PUSH
22737: LD_INT 2
22739: ST_TO_ADDR
// hc_name := Dark Warrior ;
22740: LD_ADDR_OWVAR 26
22744: PUSH
22745: LD_STRING Dark Warrior
22747: ST_TO_ADDR
// hc_gallery :=  ;
22748: LD_ADDR_OWVAR 33
22752: PUSH
22753: LD_STRING 
22755: ST_TO_ADDR
// hc_noskilllimit := true ;
22756: LD_ADDR_OWVAR 76
22760: PUSH
22761: LD_INT 1
22763: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22764: LD_ADDR_OWVAR 31
22768: PUSH
22769: LD_INT 30
22771: PUSH
22772: LD_INT 30
22774: PUSH
22775: LD_INT 30
22777: PUSH
22778: LD_INT 30
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: ST_TO_ADDR
// un := CreateHuman ;
22787: LD_ADDR_VAR 0 3
22791: PUSH
22792: CALL_OW 44
22796: ST_TO_ADDR
// hc_noskilllimit := false ;
22797: LD_ADDR_OWVAR 76
22801: PUSH
22802: LD_INT 0
22804: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22805: LD_VAR 0 3
22809: PPUSH
22810: LD_INT 1
22812: PPUSH
22813: CALL_OW 51
// ToLua ( playRanger() ) ;
22817: LD_STRING playRanger()
22819: PPUSH
22820: CALL_OW 559
// p := 0 ;
22824: LD_ADDR_VAR 0 2
22828: PUSH
22829: LD_INT 0
22831: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22832: LD_INT 35
22834: PPUSH
22835: CALL_OW 67
// p := p + 1 ;
22839: LD_ADDR_VAR 0 2
22843: PUSH
22844: LD_VAR 0 2
22848: PUSH
22849: LD_INT 1
22851: PLUS
22852: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22853: LD_VAR 0 3
22857: PPUSH
22858: CALL_OW 256
22862: PUSH
22863: LD_INT 1000
22865: LESS
22866: IFFALSE 22880
// SetLives ( un , 1000 ) ;
22868: LD_VAR 0 3
22872: PPUSH
22873: LD_INT 1000
22875: PPUSH
22876: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22880: LD_VAR 0 3
22884: PPUSH
22885: LD_INT 81
22887: PUSH
22888: LD_OWVAR 2
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 91
22899: PUSH
22900: LD_VAR 0 3
22904: PUSH
22905: LD_INT 30
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: LIST
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PPUSH
22917: CALL_OW 69
22921: PPUSH
22922: LD_VAR 0 3
22926: PPUSH
22927: CALL_OW 74
22931: PPUSH
22932: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22936: LD_VAR 0 2
22940: PUSH
22941: LD_INT 80
22943: GREATER
22944: PUSH
22945: LD_VAR 0 3
22949: PPUSH
22950: CALL_OW 301
22954: OR
22955: IFFALSE 22832
// if un then
22957: LD_VAR 0 3
22961: IFFALSE 22972
// RemoveUnit ( un ) ;
22963: LD_VAR 0 3
22967: PPUSH
22968: CALL_OW 64
// end ;
22972: PPOPN 3
22974: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22975: LD_EXP 93
22979: IFFALSE 23095
22981: GO 22983
22983: DISABLE
22984: LD_INT 0
22986: PPUSH
22987: PPUSH
22988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22989: LD_ADDR_VAR 0 2
22993: PUSH
22994: LD_INT 81
22996: PUSH
22997: LD_OWVAR 2
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 21
23008: PUSH
23009: LD_INT 1
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PPUSH
23020: CALL_OW 69
23024: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23025: LD_STRING playComputer()
23027: PPUSH
23028: CALL_OW 559
// if not tmp then
23032: LD_VAR 0 2
23036: NOT
23037: IFFALSE 23041
// exit ;
23039: GO 23095
// for i in tmp do
23041: LD_ADDR_VAR 0 1
23045: PUSH
23046: LD_VAR 0 2
23050: PUSH
23051: FOR_IN
23052: IFFALSE 23093
// for j := 1 to 4 do
23054: LD_ADDR_VAR 0 3
23058: PUSH
23059: DOUBLE
23060: LD_INT 1
23062: DEC
23063: ST_TO_ADDR
23064: LD_INT 4
23066: PUSH
23067: FOR_TO
23068: IFFALSE 23089
// SetSkill ( i , j , 10 ) ;
23070: LD_VAR 0 1
23074: PPUSH
23075: LD_VAR 0 3
23079: PPUSH
23080: LD_INT 10
23082: PPUSH
23083: CALL_OW 237
23087: GO 23067
23089: POP
23090: POP
23091: GO 23051
23093: POP
23094: POP
// end ;
23095: PPOPN 3
23097: END
// every 0 0$1 trigger s30 do var i , tmp ;
23098: LD_EXP 94
23102: IFFALSE 23171
23104: GO 23106
23106: DISABLE
23107: LD_INT 0
23109: PPUSH
23110: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23111: LD_ADDR_VAR 0 2
23115: PUSH
23116: LD_INT 22
23118: PUSH
23119: LD_OWVAR 2
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PPUSH
23128: CALL_OW 69
23132: ST_TO_ADDR
// if not tmp then
23133: LD_VAR 0 2
23137: NOT
23138: IFFALSE 23142
// exit ;
23140: GO 23171
// for i in tmp do
23142: LD_ADDR_VAR 0 1
23146: PUSH
23147: LD_VAR 0 2
23151: PUSH
23152: FOR_IN
23153: IFFALSE 23169
// SetLives ( i , 300 ) ;
23155: LD_VAR 0 1
23159: PPUSH
23160: LD_INT 300
23162: PPUSH
23163: CALL_OW 234
23167: GO 23152
23169: POP
23170: POP
// end ;
23171: PPOPN 2
23173: END
// every 0 0$1 trigger s60 do var i , tmp ;
23174: LD_EXP 95
23178: IFFALSE 23247
23180: GO 23182
23182: DISABLE
23183: LD_INT 0
23185: PPUSH
23186: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23187: LD_ADDR_VAR 0 2
23191: PUSH
23192: LD_INT 22
23194: PUSH
23195: LD_OWVAR 2
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PPUSH
23204: CALL_OW 69
23208: ST_TO_ADDR
// if not tmp then
23209: LD_VAR 0 2
23213: NOT
23214: IFFALSE 23218
// exit ;
23216: GO 23247
// for i in tmp do
23218: LD_ADDR_VAR 0 1
23222: PUSH
23223: LD_VAR 0 2
23227: PUSH
23228: FOR_IN
23229: IFFALSE 23245
// SetLives ( i , 600 ) ;
23231: LD_VAR 0 1
23235: PPUSH
23236: LD_INT 600
23238: PPUSH
23239: CALL_OW 234
23243: GO 23228
23245: POP
23246: POP
// end ;
23247: PPOPN 2
23249: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23250: LD_INT 0
23252: PPUSH
// case cmd of 301 :
23253: LD_VAR 0 1
23257: PUSH
23258: LD_INT 301
23260: DOUBLE
23261: EQUAL
23262: IFTRUE 23266
23264: GO 23298
23266: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23267: LD_VAR 0 6
23271: PPUSH
23272: LD_VAR 0 7
23276: PPUSH
23277: LD_VAR 0 8
23281: PPUSH
23282: LD_VAR 0 4
23286: PPUSH
23287: LD_VAR 0 5
23291: PPUSH
23292: CALL 24499 0 5
23296: GO 23419
23298: LD_INT 302
23300: DOUBLE
23301: EQUAL
23302: IFTRUE 23306
23304: GO 23343
23306: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23307: LD_VAR 0 6
23311: PPUSH
23312: LD_VAR 0 7
23316: PPUSH
23317: LD_VAR 0 8
23321: PPUSH
23322: LD_VAR 0 9
23326: PPUSH
23327: LD_VAR 0 4
23331: PPUSH
23332: LD_VAR 0 5
23336: PPUSH
23337: CALL 24590 0 6
23341: GO 23419
23343: LD_INT 303
23345: DOUBLE
23346: EQUAL
23347: IFTRUE 23351
23349: GO 23388
23351: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23352: LD_VAR 0 6
23356: PPUSH
23357: LD_VAR 0 7
23361: PPUSH
23362: LD_VAR 0 8
23366: PPUSH
23367: LD_VAR 0 9
23371: PPUSH
23372: LD_VAR 0 4
23376: PPUSH
23377: LD_VAR 0 5
23381: PPUSH
23382: CALL 23424 0 6
23386: GO 23419
23388: LD_INT 304
23390: DOUBLE
23391: EQUAL
23392: IFTRUE 23396
23394: GO 23418
23396: POP
// hHackTeleport ( unit , x , y ) ; end ;
23397: LD_VAR 0 2
23401: PPUSH
23402: LD_VAR 0 4
23406: PPUSH
23407: LD_VAR 0 5
23411: PPUSH
23412: CALL 25183 0 3
23416: GO 23419
23418: POP
// end ;
23419: LD_VAR 0 12
23423: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23424: LD_INT 0
23426: PPUSH
23427: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23428: LD_VAR 0 1
23432: PUSH
23433: LD_INT 1
23435: LESS
23436: PUSH
23437: LD_VAR 0 1
23441: PUSH
23442: LD_INT 3
23444: GREATER
23445: OR
23446: PUSH
23447: LD_VAR 0 5
23451: PPUSH
23452: LD_VAR 0 6
23456: PPUSH
23457: CALL_OW 428
23461: OR
23462: IFFALSE 23466
// exit ;
23464: GO 24186
// uc_side := your_side ;
23466: LD_ADDR_OWVAR 20
23470: PUSH
23471: LD_OWVAR 2
23475: ST_TO_ADDR
// uc_nation := nation ;
23476: LD_ADDR_OWVAR 21
23480: PUSH
23481: LD_VAR 0 1
23485: ST_TO_ADDR
// bc_level = 1 ;
23486: LD_ADDR_OWVAR 43
23490: PUSH
23491: LD_INT 1
23493: ST_TO_ADDR
// case btype of 1 :
23494: LD_VAR 0 2
23498: PUSH
23499: LD_INT 1
23501: DOUBLE
23502: EQUAL
23503: IFTRUE 23507
23505: GO 23518
23507: POP
// bc_type := b_depot ; 2 :
23508: LD_ADDR_OWVAR 42
23512: PUSH
23513: LD_INT 0
23515: ST_TO_ADDR
23516: GO 24130
23518: LD_INT 2
23520: DOUBLE
23521: EQUAL
23522: IFTRUE 23526
23524: GO 23537
23526: POP
// bc_type := b_warehouse ; 3 :
23527: LD_ADDR_OWVAR 42
23531: PUSH
23532: LD_INT 1
23534: ST_TO_ADDR
23535: GO 24130
23537: LD_INT 3
23539: DOUBLE
23540: EQUAL
23541: IFTRUE 23545
23543: GO 23556
23545: POP
// bc_type := b_lab ; 4 .. 9 :
23546: LD_ADDR_OWVAR 42
23550: PUSH
23551: LD_INT 6
23553: ST_TO_ADDR
23554: GO 24130
23556: LD_INT 4
23558: DOUBLE
23559: GREATEREQUAL
23560: IFFALSE 23568
23562: LD_INT 9
23564: DOUBLE
23565: LESSEQUAL
23566: IFTRUE 23570
23568: GO 23622
23570: POP
// begin bc_type := b_lab_half ;
23571: LD_ADDR_OWVAR 42
23575: PUSH
23576: LD_INT 7
23578: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23579: LD_ADDR_OWVAR 44
23583: PUSH
23584: LD_INT 10
23586: PUSH
23587: LD_INT 11
23589: PUSH
23590: LD_INT 12
23592: PUSH
23593: LD_INT 15
23595: PUSH
23596: LD_INT 14
23598: PUSH
23599: LD_INT 13
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: PUSH
23610: LD_VAR 0 2
23614: PUSH
23615: LD_INT 3
23617: MINUS
23618: ARRAY
23619: ST_TO_ADDR
// end ; 10 .. 13 :
23620: GO 24130
23622: LD_INT 10
23624: DOUBLE
23625: GREATEREQUAL
23626: IFFALSE 23634
23628: LD_INT 13
23630: DOUBLE
23631: LESSEQUAL
23632: IFTRUE 23636
23634: GO 23713
23636: POP
// begin bc_type := b_lab_full ;
23637: LD_ADDR_OWVAR 42
23641: PUSH
23642: LD_INT 8
23644: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23645: LD_ADDR_OWVAR 44
23649: PUSH
23650: LD_INT 10
23652: PUSH
23653: LD_INT 12
23655: PUSH
23656: LD_INT 14
23658: PUSH
23659: LD_INT 13
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: PUSH
23668: LD_VAR 0 2
23672: PUSH
23673: LD_INT 9
23675: MINUS
23676: ARRAY
23677: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23678: LD_ADDR_OWVAR 45
23682: PUSH
23683: LD_INT 11
23685: PUSH
23686: LD_INT 15
23688: PUSH
23689: LD_INT 12
23691: PUSH
23692: LD_INT 15
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: PUSH
23701: LD_VAR 0 2
23705: PUSH
23706: LD_INT 9
23708: MINUS
23709: ARRAY
23710: ST_TO_ADDR
// end ; 14 :
23711: GO 24130
23713: LD_INT 14
23715: DOUBLE
23716: EQUAL
23717: IFTRUE 23721
23719: GO 23732
23721: POP
// bc_type := b_workshop ; 15 :
23722: LD_ADDR_OWVAR 42
23726: PUSH
23727: LD_INT 2
23729: ST_TO_ADDR
23730: GO 24130
23732: LD_INT 15
23734: DOUBLE
23735: EQUAL
23736: IFTRUE 23740
23738: GO 23751
23740: POP
// bc_type := b_factory ; 16 :
23741: LD_ADDR_OWVAR 42
23745: PUSH
23746: LD_INT 3
23748: ST_TO_ADDR
23749: GO 24130
23751: LD_INT 16
23753: DOUBLE
23754: EQUAL
23755: IFTRUE 23759
23757: GO 23770
23759: POP
// bc_type := b_ext_gun ; 17 :
23760: LD_ADDR_OWVAR 42
23764: PUSH
23765: LD_INT 17
23767: ST_TO_ADDR
23768: GO 24130
23770: LD_INT 17
23772: DOUBLE
23773: EQUAL
23774: IFTRUE 23778
23776: GO 23806
23778: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23779: LD_ADDR_OWVAR 42
23783: PUSH
23784: LD_INT 19
23786: PUSH
23787: LD_INT 23
23789: PUSH
23790: LD_INT 19
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: PUSH
23798: LD_VAR 0 1
23802: ARRAY
23803: ST_TO_ADDR
23804: GO 24130
23806: LD_INT 18
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23814
23812: GO 23825
23814: POP
// bc_type := b_ext_radar ; 19 :
23815: LD_ADDR_OWVAR 42
23819: PUSH
23820: LD_INT 20
23822: ST_TO_ADDR
23823: GO 24130
23825: LD_INT 19
23827: DOUBLE
23828: EQUAL
23829: IFTRUE 23833
23831: GO 23844
23833: POP
// bc_type := b_ext_radio ; 20 :
23834: LD_ADDR_OWVAR 42
23838: PUSH
23839: LD_INT 22
23841: ST_TO_ADDR
23842: GO 24130
23844: LD_INT 20
23846: DOUBLE
23847: EQUAL
23848: IFTRUE 23852
23850: GO 23863
23852: POP
// bc_type := b_ext_siberium ; 21 :
23853: LD_ADDR_OWVAR 42
23857: PUSH
23858: LD_INT 21
23860: ST_TO_ADDR
23861: GO 24130
23863: LD_INT 21
23865: DOUBLE
23866: EQUAL
23867: IFTRUE 23871
23869: GO 23882
23871: POP
// bc_type := b_ext_computer ; 22 :
23872: LD_ADDR_OWVAR 42
23876: PUSH
23877: LD_INT 24
23879: ST_TO_ADDR
23880: GO 24130
23882: LD_INT 22
23884: DOUBLE
23885: EQUAL
23886: IFTRUE 23890
23888: GO 23901
23890: POP
// bc_type := b_ext_track ; 23 :
23891: LD_ADDR_OWVAR 42
23895: PUSH
23896: LD_INT 16
23898: ST_TO_ADDR
23899: GO 24130
23901: LD_INT 23
23903: DOUBLE
23904: EQUAL
23905: IFTRUE 23909
23907: GO 23920
23909: POP
// bc_type := b_ext_laser ; 24 :
23910: LD_ADDR_OWVAR 42
23914: PUSH
23915: LD_INT 25
23917: ST_TO_ADDR
23918: GO 24130
23920: LD_INT 24
23922: DOUBLE
23923: EQUAL
23924: IFTRUE 23928
23926: GO 23939
23928: POP
// bc_type := b_control_tower ; 25 :
23929: LD_ADDR_OWVAR 42
23933: PUSH
23934: LD_INT 36
23936: ST_TO_ADDR
23937: GO 24130
23939: LD_INT 25
23941: DOUBLE
23942: EQUAL
23943: IFTRUE 23947
23945: GO 23958
23947: POP
// bc_type := b_breastwork ; 26 :
23948: LD_ADDR_OWVAR 42
23952: PUSH
23953: LD_INT 31
23955: ST_TO_ADDR
23956: GO 24130
23958: LD_INT 26
23960: DOUBLE
23961: EQUAL
23962: IFTRUE 23966
23964: GO 23977
23966: POP
// bc_type := b_bunker ; 27 :
23967: LD_ADDR_OWVAR 42
23971: PUSH
23972: LD_INT 32
23974: ST_TO_ADDR
23975: GO 24130
23977: LD_INT 27
23979: DOUBLE
23980: EQUAL
23981: IFTRUE 23985
23983: GO 23996
23985: POP
// bc_type := b_turret ; 28 :
23986: LD_ADDR_OWVAR 42
23990: PUSH
23991: LD_INT 33
23993: ST_TO_ADDR
23994: GO 24130
23996: LD_INT 28
23998: DOUBLE
23999: EQUAL
24000: IFTRUE 24004
24002: GO 24015
24004: POP
// bc_type := b_armoury ; 29 :
24005: LD_ADDR_OWVAR 42
24009: PUSH
24010: LD_INT 4
24012: ST_TO_ADDR
24013: GO 24130
24015: LD_INT 29
24017: DOUBLE
24018: EQUAL
24019: IFTRUE 24023
24021: GO 24034
24023: POP
// bc_type := b_barracks ; 30 :
24024: LD_ADDR_OWVAR 42
24028: PUSH
24029: LD_INT 5
24031: ST_TO_ADDR
24032: GO 24130
24034: LD_INT 30
24036: DOUBLE
24037: EQUAL
24038: IFTRUE 24042
24040: GO 24053
24042: POP
// bc_type := b_solar_power ; 31 :
24043: LD_ADDR_OWVAR 42
24047: PUSH
24048: LD_INT 27
24050: ST_TO_ADDR
24051: GO 24130
24053: LD_INT 31
24055: DOUBLE
24056: EQUAL
24057: IFTRUE 24061
24059: GO 24072
24061: POP
// bc_type := b_oil_power ; 32 :
24062: LD_ADDR_OWVAR 42
24066: PUSH
24067: LD_INT 26
24069: ST_TO_ADDR
24070: GO 24130
24072: LD_INT 32
24074: DOUBLE
24075: EQUAL
24076: IFTRUE 24080
24078: GO 24091
24080: POP
// bc_type := b_siberite_power ; 33 :
24081: LD_ADDR_OWVAR 42
24085: PUSH
24086: LD_INT 28
24088: ST_TO_ADDR
24089: GO 24130
24091: LD_INT 33
24093: DOUBLE
24094: EQUAL
24095: IFTRUE 24099
24097: GO 24110
24099: POP
// bc_type := b_oil_mine ; 34 :
24100: LD_ADDR_OWVAR 42
24104: PUSH
24105: LD_INT 29
24107: ST_TO_ADDR
24108: GO 24130
24110: LD_INT 34
24112: DOUBLE
24113: EQUAL
24114: IFTRUE 24118
24116: GO 24129
24118: POP
// bc_type := b_siberite_mine ; end ;
24119: LD_ADDR_OWVAR 42
24123: PUSH
24124: LD_INT 30
24126: ST_TO_ADDR
24127: GO 24130
24129: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24130: LD_ADDR_VAR 0 8
24134: PUSH
24135: LD_VAR 0 5
24139: PPUSH
24140: LD_VAR 0 6
24144: PPUSH
24145: LD_VAR 0 3
24149: PPUSH
24150: CALL_OW 47
24154: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24155: LD_OWVAR 42
24159: PUSH
24160: LD_INT 32
24162: PUSH
24163: LD_INT 33
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: IN
24170: IFFALSE 24186
// PlaceWeaponTurret ( b , weapon ) ;
24172: LD_VAR 0 8
24176: PPUSH
24177: LD_VAR 0 4
24181: PPUSH
24182: CALL_OW 431
// end ;
24186: LD_VAR 0 7
24190: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24191: LD_INT 0
24193: PPUSH
24194: PPUSH
24195: PPUSH
24196: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24197: LD_ADDR_VAR 0 4
24201: PUSH
24202: LD_INT 22
24204: PUSH
24205: LD_OWVAR 2
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 2
24216: PUSH
24217: LD_INT 30
24219: PUSH
24220: LD_INT 0
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: PUSH
24227: LD_INT 30
24229: PUSH
24230: LD_INT 1
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: LIST
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PPUSH
24246: CALL_OW 69
24250: ST_TO_ADDR
// if not tmp then
24251: LD_VAR 0 4
24255: NOT
24256: IFFALSE 24260
// exit ;
24258: GO 24319
// for i in tmp do
24260: LD_ADDR_VAR 0 2
24264: PUSH
24265: LD_VAR 0 4
24269: PUSH
24270: FOR_IN
24271: IFFALSE 24317
// for j = 1 to 3 do
24273: LD_ADDR_VAR 0 3
24277: PUSH
24278: DOUBLE
24279: LD_INT 1
24281: DEC
24282: ST_TO_ADDR
24283: LD_INT 3
24285: PUSH
24286: FOR_TO
24287: IFFALSE 24313
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24289: LD_VAR 0 2
24293: PPUSH
24294: CALL_OW 274
24298: PPUSH
24299: LD_VAR 0 3
24303: PPUSH
24304: LD_INT 99999
24306: PPUSH
24307: CALL_OW 277
24311: GO 24286
24313: POP
24314: POP
24315: GO 24270
24317: POP
24318: POP
// end ;
24319: LD_VAR 0 1
24323: RET
// export function hHackSetLevel10 ; var i , j ; begin
24324: LD_INT 0
24326: PPUSH
24327: PPUSH
24328: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24329: LD_ADDR_VAR 0 2
24333: PUSH
24334: LD_INT 21
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PPUSH
24344: CALL_OW 69
24348: PUSH
24349: FOR_IN
24350: IFFALSE 24402
// if IsSelected ( i ) then
24352: LD_VAR 0 2
24356: PPUSH
24357: CALL_OW 306
24361: IFFALSE 24400
// begin for j := 1 to 4 do
24363: LD_ADDR_VAR 0 3
24367: PUSH
24368: DOUBLE
24369: LD_INT 1
24371: DEC
24372: ST_TO_ADDR
24373: LD_INT 4
24375: PUSH
24376: FOR_TO
24377: IFFALSE 24398
// SetSkill ( i , j , 10 ) ;
24379: LD_VAR 0 2
24383: PPUSH
24384: LD_VAR 0 3
24388: PPUSH
24389: LD_INT 10
24391: PPUSH
24392: CALL_OW 237
24396: GO 24376
24398: POP
24399: POP
// end ;
24400: GO 24349
24402: POP
24403: POP
// end ;
24404: LD_VAR 0 1
24408: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24409: LD_INT 0
24411: PPUSH
24412: PPUSH
24413: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24414: LD_ADDR_VAR 0 2
24418: PUSH
24419: LD_INT 22
24421: PUSH
24422: LD_OWVAR 2
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 21
24433: PUSH
24434: LD_INT 1
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PPUSH
24445: CALL_OW 69
24449: PUSH
24450: FOR_IN
24451: IFFALSE 24492
// begin for j := 1 to 4 do
24453: LD_ADDR_VAR 0 3
24457: PUSH
24458: DOUBLE
24459: LD_INT 1
24461: DEC
24462: ST_TO_ADDR
24463: LD_INT 4
24465: PUSH
24466: FOR_TO
24467: IFFALSE 24488
// SetSkill ( i , j , 10 ) ;
24469: LD_VAR 0 2
24473: PPUSH
24474: LD_VAR 0 3
24478: PPUSH
24479: LD_INT 10
24481: PPUSH
24482: CALL_OW 237
24486: GO 24466
24488: POP
24489: POP
// end ;
24490: GO 24450
24492: POP
24493: POP
// end ;
24494: LD_VAR 0 1
24498: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24499: LD_INT 0
24501: PPUSH
// uc_side := your_side ;
24502: LD_ADDR_OWVAR 20
24506: PUSH
24507: LD_OWVAR 2
24511: ST_TO_ADDR
// uc_nation := nation ;
24512: LD_ADDR_OWVAR 21
24516: PUSH
24517: LD_VAR 0 1
24521: ST_TO_ADDR
// InitHc ;
24522: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24526: LD_INT 0
24528: PPUSH
24529: LD_VAR 0 2
24533: PPUSH
24534: LD_VAR 0 3
24538: PPUSH
24539: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24543: LD_VAR 0 4
24547: PPUSH
24548: LD_VAR 0 5
24552: PPUSH
24553: CALL_OW 428
24557: PUSH
24558: LD_INT 0
24560: EQUAL
24561: IFFALSE 24585
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24563: CALL_OW 44
24567: PPUSH
24568: LD_VAR 0 4
24572: PPUSH
24573: LD_VAR 0 5
24577: PPUSH
24578: LD_INT 1
24580: PPUSH
24581: CALL_OW 48
// end ;
24585: LD_VAR 0 6
24589: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24590: LD_INT 0
24592: PPUSH
24593: PPUSH
// uc_side := your_side ;
24594: LD_ADDR_OWVAR 20
24598: PUSH
24599: LD_OWVAR 2
24603: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24604: LD_VAR 0 1
24608: PUSH
24609: LD_INT 1
24611: PUSH
24612: LD_INT 2
24614: PUSH
24615: LD_INT 3
24617: PUSH
24618: LD_INT 4
24620: PUSH
24621: LD_INT 5
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: IN
24631: IFFALSE 24643
// uc_nation := nation_american else
24633: LD_ADDR_OWVAR 21
24637: PUSH
24638: LD_INT 1
24640: ST_TO_ADDR
24641: GO 24686
// if chassis in [ 11 , 12 , 13 , 14 ] then
24643: LD_VAR 0 1
24647: PUSH
24648: LD_INT 11
24650: PUSH
24651: LD_INT 12
24653: PUSH
24654: LD_INT 13
24656: PUSH
24657: LD_INT 14
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: IN
24666: IFFALSE 24678
// uc_nation := nation_arabian else
24668: LD_ADDR_OWVAR 21
24672: PUSH
24673: LD_INT 2
24675: ST_TO_ADDR
24676: GO 24686
// uc_nation := nation_russian ;
24678: LD_ADDR_OWVAR 21
24682: PUSH
24683: LD_INT 3
24685: ST_TO_ADDR
// vc_chassis := chassis ;
24686: LD_ADDR_OWVAR 37
24690: PUSH
24691: LD_VAR 0 1
24695: ST_TO_ADDR
// vc_engine := engine ;
24696: LD_ADDR_OWVAR 39
24700: PUSH
24701: LD_VAR 0 2
24705: ST_TO_ADDR
// vc_control := control ;
24706: LD_ADDR_OWVAR 38
24710: PUSH
24711: LD_VAR 0 3
24715: ST_TO_ADDR
// vc_weapon := weapon ;
24716: LD_ADDR_OWVAR 40
24720: PUSH
24721: LD_VAR 0 4
24725: ST_TO_ADDR
// un := CreateVehicle ;
24726: LD_ADDR_VAR 0 8
24730: PUSH
24731: CALL_OW 45
24735: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24736: LD_VAR 0 8
24740: PPUSH
24741: LD_INT 0
24743: PPUSH
24744: LD_INT 5
24746: PPUSH
24747: CALL_OW 12
24751: PPUSH
24752: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24756: LD_VAR 0 8
24760: PPUSH
24761: LD_VAR 0 5
24765: PPUSH
24766: LD_VAR 0 6
24770: PPUSH
24771: LD_INT 1
24773: PPUSH
24774: CALL_OW 48
// end ;
24778: LD_VAR 0 7
24782: RET
// export hInvincible ; every 1 do
24783: GO 24785
24785: DISABLE
// hInvincible := [ ] ;
24786: LD_ADDR_EXP 96
24790: PUSH
24791: EMPTY
24792: ST_TO_ADDR
24793: END
// every 10 do var i ;
24794: GO 24796
24796: DISABLE
24797: LD_INT 0
24799: PPUSH
// begin enable ;
24800: ENABLE
// if not hInvincible then
24801: LD_EXP 96
24805: NOT
24806: IFFALSE 24810
// exit ;
24808: GO 24854
// for i in hInvincible do
24810: LD_ADDR_VAR 0 1
24814: PUSH
24815: LD_EXP 96
24819: PUSH
24820: FOR_IN
24821: IFFALSE 24852
// if GetLives ( i ) < 1000 then
24823: LD_VAR 0 1
24827: PPUSH
24828: CALL_OW 256
24832: PUSH
24833: LD_INT 1000
24835: LESS
24836: IFFALSE 24850
// SetLives ( i , 1000 ) ;
24838: LD_VAR 0 1
24842: PPUSH
24843: LD_INT 1000
24845: PPUSH
24846: CALL_OW 234
24850: GO 24820
24852: POP
24853: POP
// end ;
24854: PPOPN 1
24856: END
// export function hHackInvincible ; var i ; begin
24857: LD_INT 0
24859: PPUSH
24860: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24861: LD_ADDR_VAR 0 2
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: LD_INT 21
24871: PUSH
24872: LD_INT 1
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 21
24881: PUSH
24882: LD_INT 2
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: LIST
24893: PPUSH
24894: CALL_OW 69
24898: PUSH
24899: FOR_IN
24900: IFFALSE 24961
// if IsSelected ( i ) then
24902: LD_VAR 0 2
24906: PPUSH
24907: CALL_OW 306
24911: IFFALSE 24959
// begin if i in hInvincible then
24913: LD_VAR 0 2
24917: PUSH
24918: LD_EXP 96
24922: IN
24923: IFFALSE 24943
// hInvincible := hInvincible diff i else
24925: LD_ADDR_EXP 96
24929: PUSH
24930: LD_EXP 96
24934: PUSH
24935: LD_VAR 0 2
24939: DIFF
24940: ST_TO_ADDR
24941: GO 24959
// hInvincible := hInvincible union i ;
24943: LD_ADDR_EXP 96
24947: PUSH
24948: LD_EXP 96
24952: PUSH
24953: LD_VAR 0 2
24957: UNION
24958: ST_TO_ADDR
// end ;
24959: GO 24899
24961: POP
24962: POP
// end ;
24963: LD_VAR 0 1
24967: RET
// export function hHackInvisible ; var i , j ; begin
24968: LD_INT 0
24970: PPUSH
24971: PPUSH
24972: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24973: LD_ADDR_VAR 0 2
24977: PUSH
24978: LD_INT 21
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PPUSH
24988: CALL_OW 69
24992: PUSH
24993: FOR_IN
24994: IFFALSE 25018
// if IsSelected ( i ) then
24996: LD_VAR 0 2
25000: PPUSH
25001: CALL_OW 306
25005: IFFALSE 25016
// ComForceInvisible ( i ) ;
25007: LD_VAR 0 2
25011: PPUSH
25012: CALL_OW 496
25016: GO 24993
25018: POP
25019: POP
// end ;
25020: LD_VAR 0 1
25024: RET
// export function hHackChangeYourSide ; begin
25025: LD_INT 0
25027: PPUSH
// if your_side = 8 then
25028: LD_OWVAR 2
25032: PUSH
25033: LD_INT 8
25035: EQUAL
25036: IFFALSE 25048
// your_side := 0 else
25038: LD_ADDR_OWVAR 2
25042: PUSH
25043: LD_INT 0
25045: ST_TO_ADDR
25046: GO 25062
// your_side := your_side + 1 ;
25048: LD_ADDR_OWVAR 2
25052: PUSH
25053: LD_OWVAR 2
25057: PUSH
25058: LD_INT 1
25060: PLUS
25061: ST_TO_ADDR
// end ;
25062: LD_VAR 0 1
25066: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25067: LD_INT 0
25069: PPUSH
25070: PPUSH
25071: PPUSH
// for i in all_units do
25072: LD_ADDR_VAR 0 2
25076: PUSH
25077: LD_OWVAR 3
25081: PUSH
25082: FOR_IN
25083: IFFALSE 25161
// if IsSelected ( i ) then
25085: LD_VAR 0 2
25089: PPUSH
25090: CALL_OW 306
25094: IFFALSE 25159
// begin j := GetSide ( i ) ;
25096: LD_ADDR_VAR 0 3
25100: PUSH
25101: LD_VAR 0 2
25105: PPUSH
25106: CALL_OW 255
25110: ST_TO_ADDR
// if j = 8 then
25111: LD_VAR 0 3
25115: PUSH
25116: LD_INT 8
25118: EQUAL
25119: IFFALSE 25131
// j := 0 else
25121: LD_ADDR_VAR 0 3
25125: PUSH
25126: LD_INT 0
25128: ST_TO_ADDR
25129: GO 25145
// j := j + 1 ;
25131: LD_ADDR_VAR 0 3
25135: PUSH
25136: LD_VAR 0 3
25140: PUSH
25141: LD_INT 1
25143: PLUS
25144: ST_TO_ADDR
// SetSide ( i , j ) ;
25145: LD_VAR 0 2
25149: PPUSH
25150: LD_VAR 0 3
25154: PPUSH
25155: CALL_OW 235
// end ;
25159: GO 25082
25161: POP
25162: POP
// end ;
25163: LD_VAR 0 1
25167: RET
// export function hHackFog ; begin
25168: LD_INT 0
25170: PPUSH
// FogOff ( true ) ;
25171: LD_INT 1
25173: PPUSH
25174: CALL_OW 344
// end ;
25178: LD_VAR 0 1
25182: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25183: LD_INT 0
25185: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25186: LD_VAR 0 1
25190: PPUSH
25191: LD_VAR 0 2
25195: PPUSH
25196: LD_VAR 0 3
25200: PPUSH
25201: LD_INT 1
25203: PPUSH
25204: LD_INT 1
25206: PPUSH
25207: CALL_OW 483
// CenterOnXY ( x , y ) ;
25211: LD_VAR 0 2
25215: PPUSH
25216: LD_VAR 0 3
25220: PPUSH
25221: CALL_OW 84
// end ; end_of_file
25225: LD_VAR 0 4
25229: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25230: LD_INT 0
25232: PPUSH
25233: PPUSH
25234: PPUSH
25235: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25236: LD_VAR 0 1
25240: PPUSH
25241: CALL_OW 264
25245: PUSH
25246: LD_EXP 23
25250: EQUAL
25251: IFFALSE 25323
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25253: LD_INT 68
25255: PPUSH
25256: LD_VAR 0 1
25260: PPUSH
25261: CALL_OW 255
25265: PPUSH
25266: CALL_OW 321
25270: PUSH
25271: LD_INT 2
25273: EQUAL
25274: IFFALSE 25286
// eff := 70 else
25276: LD_ADDR_VAR 0 4
25280: PUSH
25281: LD_INT 70
25283: ST_TO_ADDR
25284: GO 25294
// eff := 30 ;
25286: LD_ADDR_VAR 0 4
25290: PUSH
25291: LD_INT 30
25293: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25294: LD_VAR 0 1
25298: PPUSH
25299: CALL_OW 250
25303: PPUSH
25304: LD_VAR 0 1
25308: PPUSH
25309: CALL_OW 251
25313: PPUSH
25314: LD_VAR 0 4
25318: PPUSH
25319: CALL_OW 495
// end ; end ;
25323: LD_VAR 0 2
25327: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25328: LD_INT 0
25330: PPUSH
// end ;
25331: LD_VAR 0 4
25335: RET
// export function SOS_Command ( cmd ) ; begin
25336: LD_INT 0
25338: PPUSH
// end ;
25339: LD_VAR 0 2
25343: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25344: LD_INT 0
25346: PPUSH
// end ;
25347: LD_VAR 0 6
25351: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25352: LD_INT 0
25354: PPUSH
25355: PPUSH
// if not vehicle or not factory then
25356: LD_VAR 0 1
25360: NOT
25361: PUSH
25362: LD_VAR 0 2
25366: NOT
25367: OR
25368: IFFALSE 25372
// exit ;
25370: GO 25603
// if factoryWaypoints >= factory then
25372: LD_EXP 97
25376: PUSH
25377: LD_VAR 0 2
25381: GREATEREQUAL
25382: IFFALSE 25603
// if factoryWaypoints [ factory ] then
25384: LD_EXP 97
25388: PUSH
25389: LD_VAR 0 2
25393: ARRAY
25394: IFFALSE 25603
// begin if GetControl ( vehicle ) = control_manual then
25396: LD_VAR 0 1
25400: PPUSH
25401: CALL_OW 263
25405: PUSH
25406: LD_INT 1
25408: EQUAL
25409: IFFALSE 25490
// begin driver := IsDrivenBy ( vehicle ) ;
25411: LD_ADDR_VAR 0 4
25415: PUSH
25416: LD_VAR 0 1
25420: PPUSH
25421: CALL_OW 311
25425: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25426: LD_VAR 0 4
25430: PPUSH
25431: LD_EXP 97
25435: PUSH
25436: LD_VAR 0 2
25440: ARRAY
25441: PUSH
25442: LD_INT 3
25444: ARRAY
25445: PPUSH
25446: LD_EXP 97
25450: PUSH
25451: LD_VAR 0 2
25455: ARRAY
25456: PUSH
25457: LD_INT 4
25459: ARRAY
25460: PPUSH
25461: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25465: LD_VAR 0 4
25469: PPUSH
25470: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25474: LD_VAR 0 4
25478: PPUSH
25479: LD_VAR 0 2
25483: PPUSH
25484: CALL_OW 180
// end else
25488: GO 25603
// if GetControl ( vehicle ) = control_remote then
25490: LD_VAR 0 1
25494: PPUSH
25495: CALL_OW 263
25499: PUSH
25500: LD_INT 2
25502: EQUAL
25503: IFFALSE 25564
// begin wait ( 0 0$2 ) ;
25505: LD_INT 70
25507: PPUSH
25508: CALL_OW 67
// if Connect ( vehicle ) then
25512: LD_VAR 0 1
25516: PPUSH
25517: CALL 37827 0 1
25521: IFFALSE 25562
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25523: LD_VAR 0 1
25527: PPUSH
25528: LD_EXP 97
25532: PUSH
25533: LD_VAR 0 2
25537: ARRAY
25538: PUSH
25539: LD_INT 3
25541: ARRAY
25542: PPUSH
25543: LD_EXP 97
25547: PUSH
25548: LD_VAR 0 2
25552: ARRAY
25553: PUSH
25554: LD_INT 4
25556: ARRAY
25557: PPUSH
25558: CALL_OW 171
// end else
25562: GO 25603
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
25564: LD_VAR 0 1
25568: PPUSH
25569: LD_EXP 97
25573: PUSH
25574: LD_VAR 0 2
25578: ARRAY
25579: PUSH
25580: LD_INT 3
25582: ARRAY
25583: PPUSH
25584: LD_EXP 97
25588: PUSH
25589: LD_VAR 0 2
25593: ARRAY
25594: PUSH
25595: LD_INT 4
25597: ARRAY
25598: PPUSH
25599: CALL_OW 171
// end ; end ;
25603: LD_VAR 0 3
25607: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25608: LD_INT 0
25610: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25611: LD_VAR 0 1
25615: PUSH
25616: LD_INT 250
25618: EQUAL
25619: PUSH
25620: LD_VAR 0 2
25624: PPUSH
25625: CALL_OW 264
25629: PUSH
25630: LD_EXP 26
25634: EQUAL
25635: AND
25636: IFFALSE 25657
// MinerPlaceMine ( unit , x , y ) ;
25638: LD_VAR 0 2
25642: PPUSH
25643: LD_VAR 0 4
25647: PPUSH
25648: LD_VAR 0 5
25652: PPUSH
25653: CALL 28385 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25657: LD_VAR 0 1
25661: PUSH
25662: LD_INT 251
25664: EQUAL
25665: PUSH
25666: LD_VAR 0 2
25670: PPUSH
25671: CALL_OW 264
25675: PUSH
25676: LD_EXP 26
25680: EQUAL
25681: AND
25682: IFFALSE 25703
// MinerDetonateMine ( unit , x , y ) ;
25684: LD_VAR 0 2
25688: PPUSH
25689: LD_VAR 0 4
25693: PPUSH
25694: LD_VAR 0 5
25698: PPUSH
25699: CALL 28662 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25703: LD_VAR 0 1
25707: PUSH
25708: LD_INT 252
25710: EQUAL
25711: PUSH
25712: LD_VAR 0 2
25716: PPUSH
25717: CALL_OW 264
25721: PUSH
25722: LD_EXP 26
25726: EQUAL
25727: AND
25728: IFFALSE 25749
// MinerCreateMinefield ( unit , x , y ) ;
25730: LD_VAR 0 2
25734: PPUSH
25735: LD_VAR 0 4
25739: PPUSH
25740: LD_VAR 0 5
25744: PPUSH
25745: CALL 29079 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25749: LD_VAR 0 1
25753: PUSH
25754: LD_INT 253
25756: EQUAL
25757: PUSH
25758: LD_VAR 0 2
25762: PPUSH
25763: CALL_OW 257
25767: PUSH
25768: LD_INT 5
25770: EQUAL
25771: AND
25772: IFFALSE 25793
// ComBinocular ( unit , x , y ) ;
25774: LD_VAR 0 2
25778: PPUSH
25779: LD_VAR 0 4
25783: PPUSH
25784: LD_VAR 0 5
25788: PPUSH
25789: CALL 29450 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25793: LD_VAR 0 1
25797: PUSH
25798: LD_INT 254
25800: EQUAL
25801: PUSH
25802: LD_VAR 0 2
25806: PPUSH
25807: CALL_OW 264
25811: PUSH
25812: LD_EXP 21
25816: EQUAL
25817: AND
25818: PUSH
25819: LD_VAR 0 3
25823: PPUSH
25824: CALL_OW 263
25828: PUSH
25829: LD_INT 3
25831: EQUAL
25832: AND
25833: IFFALSE 25849
// HackDestroyVehicle ( unit , selectedUnit ) ;
25835: LD_VAR 0 2
25839: PPUSH
25840: LD_VAR 0 3
25844: PPUSH
25845: CALL 27745 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25849: LD_VAR 0 1
25853: PUSH
25854: LD_INT 255
25856: EQUAL
25857: PUSH
25858: LD_VAR 0 2
25862: PPUSH
25863: CALL_OW 264
25867: PUSH
25868: LD_INT 14
25870: PUSH
25871: LD_INT 53
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: IN
25878: AND
25879: PUSH
25880: LD_VAR 0 4
25884: PPUSH
25885: LD_VAR 0 5
25889: PPUSH
25890: CALL_OW 488
25894: AND
25895: IFFALSE 25919
// CutTreeXYR ( unit , x , y , 12 ) ;
25897: LD_VAR 0 2
25901: PPUSH
25902: LD_VAR 0 4
25906: PPUSH
25907: LD_VAR 0 5
25911: PPUSH
25912: LD_INT 12
25914: PPUSH
25915: CALL 26311 0 4
// if cmd = 256 then
25919: LD_VAR 0 1
25923: PUSH
25924: LD_INT 256
25926: EQUAL
25927: IFFALSE 25948
// SetFactoryWaypoint ( unit , x , y ) ;
25929: LD_VAR 0 2
25933: PPUSH
25934: LD_VAR 0 4
25938: PPUSH
25939: LD_VAR 0 5
25943: PPUSH
25944: CALL 25953 0 3
// end ;
25948: LD_VAR 0 6
25952: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25953: LD_INT 0
25955: PPUSH
25956: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25957: LD_VAR 0 1
25961: NOT
25962: PUSH
25963: LD_VAR 0 2
25967: PPUSH
25968: LD_VAR 0 3
25972: PPUSH
25973: CALL_OW 488
25977: NOT
25978: OR
25979: PUSH
25980: LD_VAR 0 1
25984: PPUSH
25985: CALL_OW 266
25989: PUSH
25990: LD_INT 3
25992: NONEQUAL
25993: PUSH
25994: LD_VAR 0 1
25998: PPUSH
25999: CALL_OW 247
26003: PUSH
26004: LD_INT 1
26006: EQUAL
26007: NOT
26008: AND
26009: OR
26010: IFFALSE 26014
// exit ;
26012: GO 26163
// if GetType ( factory ) = unit_human then
26014: LD_VAR 0 1
26018: PPUSH
26019: CALL_OW 247
26023: PUSH
26024: LD_INT 1
26026: EQUAL
26027: IFFALSE 26044
// factory := IsInUnit ( factory ) ;
26029: LD_ADDR_VAR 0 1
26033: PUSH
26034: LD_VAR 0 1
26038: PPUSH
26039: CALL_OW 310
26043: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26044: LD_VAR 0 1
26048: PPUSH
26049: CALL_OW 266
26053: PUSH
26054: LD_INT 3
26056: NONEQUAL
26057: IFFALSE 26061
// exit ;
26059: GO 26163
// if HexInfo ( x , y ) = factory then
26061: LD_VAR 0 2
26065: PPUSH
26066: LD_VAR 0 3
26070: PPUSH
26071: CALL_OW 428
26075: PUSH
26076: LD_VAR 0 1
26080: EQUAL
26081: IFFALSE 26108
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26083: LD_ADDR_EXP 97
26087: PUSH
26088: LD_EXP 97
26092: PPUSH
26093: LD_VAR 0 1
26097: PPUSH
26098: LD_INT 0
26100: PPUSH
26101: CALL_OW 1
26105: ST_TO_ADDR
26106: GO 26159
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26108: LD_ADDR_EXP 97
26112: PUSH
26113: LD_EXP 97
26117: PPUSH
26118: LD_VAR 0 1
26122: PPUSH
26123: LD_VAR 0 1
26127: PPUSH
26128: CALL_OW 255
26132: PUSH
26133: LD_VAR 0 1
26137: PUSH
26138: LD_VAR 0 2
26142: PUSH
26143: LD_VAR 0 3
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: PPUSH
26154: CALL_OW 1
26158: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26159: CALL 26168 0 0
// end ;
26163: LD_VAR 0 4
26167: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
26168: LD_INT 0
26170: PPUSH
26171: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26172: LD_STRING resetFactoryWaypoint();
26174: PPUSH
26175: CALL_OW 559
// if factoryWaypoints then
26179: LD_EXP 97
26183: IFFALSE 26306
// begin for i := 1 to factoryWaypoints do
26185: LD_ADDR_VAR 0 2
26189: PUSH
26190: DOUBLE
26191: LD_INT 1
26193: DEC
26194: ST_TO_ADDR
26195: LD_EXP 97
26199: PUSH
26200: FOR_TO
26201: IFFALSE 26304
// if factoryWaypoints [ i ] then
26203: LD_EXP 97
26207: PUSH
26208: LD_VAR 0 2
26212: ARRAY
26213: IFFALSE 26302
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
26215: LD_STRING setFactoryWaypointXY(
26217: PUSH
26218: LD_EXP 97
26222: PUSH
26223: LD_VAR 0 2
26227: ARRAY
26228: PUSH
26229: LD_INT 1
26231: ARRAY
26232: STR
26233: PUSH
26234: LD_STRING ,
26236: STR
26237: PUSH
26238: LD_EXP 97
26242: PUSH
26243: LD_VAR 0 2
26247: ARRAY
26248: PUSH
26249: LD_INT 2
26251: ARRAY
26252: STR
26253: PUSH
26254: LD_STRING ,
26256: STR
26257: PUSH
26258: LD_EXP 97
26262: PUSH
26263: LD_VAR 0 2
26267: ARRAY
26268: PUSH
26269: LD_INT 3
26271: ARRAY
26272: STR
26273: PUSH
26274: LD_STRING ,
26276: STR
26277: PUSH
26278: LD_EXP 97
26282: PUSH
26283: LD_VAR 0 2
26287: ARRAY
26288: PUSH
26289: LD_INT 4
26291: ARRAY
26292: STR
26293: PUSH
26294: LD_STRING )
26296: STR
26297: PPUSH
26298: CALL_OW 559
26302: GO 26200
26304: POP
26305: POP
// end ; end ;
26306: LD_VAR 0 1
26310: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26311: LD_INT 0
26313: PPUSH
26314: PPUSH
26315: PPUSH
26316: PPUSH
26317: PPUSH
26318: PPUSH
26319: PPUSH
26320: PPUSH
26321: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26322: LD_VAR 0 1
26326: NOT
26327: PUSH
26328: LD_VAR 0 2
26332: PPUSH
26333: LD_VAR 0 3
26337: PPUSH
26338: CALL_OW 488
26342: NOT
26343: OR
26344: PUSH
26345: LD_VAR 0 4
26349: NOT
26350: OR
26351: IFFALSE 26355
// exit ;
26353: GO 26695
// list := [ ] ;
26355: LD_ADDR_VAR 0 13
26359: PUSH
26360: EMPTY
26361: ST_TO_ADDR
// if x - r < 0 then
26362: LD_VAR 0 2
26366: PUSH
26367: LD_VAR 0 4
26371: MINUS
26372: PUSH
26373: LD_INT 0
26375: LESS
26376: IFFALSE 26388
// min_x := 0 else
26378: LD_ADDR_VAR 0 7
26382: PUSH
26383: LD_INT 0
26385: ST_TO_ADDR
26386: GO 26404
// min_x := x - r ;
26388: LD_ADDR_VAR 0 7
26392: PUSH
26393: LD_VAR 0 2
26397: PUSH
26398: LD_VAR 0 4
26402: MINUS
26403: ST_TO_ADDR
// if y - r < 0 then
26404: LD_VAR 0 3
26408: PUSH
26409: LD_VAR 0 4
26413: MINUS
26414: PUSH
26415: LD_INT 0
26417: LESS
26418: IFFALSE 26430
// min_y := 0 else
26420: LD_ADDR_VAR 0 8
26424: PUSH
26425: LD_INT 0
26427: ST_TO_ADDR
26428: GO 26446
// min_y := y - r ;
26430: LD_ADDR_VAR 0 8
26434: PUSH
26435: LD_VAR 0 3
26439: PUSH
26440: LD_VAR 0 4
26444: MINUS
26445: ST_TO_ADDR
// max_x := x + r ;
26446: LD_ADDR_VAR 0 9
26450: PUSH
26451: LD_VAR 0 2
26455: PUSH
26456: LD_VAR 0 4
26460: PLUS
26461: ST_TO_ADDR
// max_y := y + r ;
26462: LD_ADDR_VAR 0 10
26466: PUSH
26467: LD_VAR 0 3
26471: PUSH
26472: LD_VAR 0 4
26476: PLUS
26477: ST_TO_ADDR
// for _x = min_x to max_x do
26478: LD_ADDR_VAR 0 11
26482: PUSH
26483: DOUBLE
26484: LD_VAR 0 7
26488: DEC
26489: ST_TO_ADDR
26490: LD_VAR 0 9
26494: PUSH
26495: FOR_TO
26496: IFFALSE 26613
// for _y = min_y to max_y do
26498: LD_ADDR_VAR 0 12
26502: PUSH
26503: DOUBLE
26504: LD_VAR 0 8
26508: DEC
26509: ST_TO_ADDR
26510: LD_VAR 0 10
26514: PUSH
26515: FOR_TO
26516: IFFALSE 26609
// begin if not ValidHex ( _x , _y ) then
26518: LD_VAR 0 11
26522: PPUSH
26523: LD_VAR 0 12
26527: PPUSH
26528: CALL_OW 488
26532: NOT
26533: IFFALSE 26537
// continue ;
26535: GO 26515
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26537: LD_VAR 0 11
26541: PPUSH
26542: LD_VAR 0 12
26546: PPUSH
26547: CALL_OW 351
26551: PUSH
26552: LD_VAR 0 11
26556: PPUSH
26557: LD_VAR 0 12
26561: PPUSH
26562: CALL_OW 554
26566: AND
26567: IFFALSE 26607
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26569: LD_ADDR_VAR 0 13
26573: PUSH
26574: LD_VAR 0 13
26578: PPUSH
26579: LD_VAR 0 13
26583: PUSH
26584: LD_INT 1
26586: PLUS
26587: PPUSH
26588: LD_VAR 0 11
26592: PUSH
26593: LD_VAR 0 12
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PPUSH
26602: CALL_OW 2
26606: ST_TO_ADDR
// end ;
26607: GO 26515
26609: POP
26610: POP
26611: GO 26495
26613: POP
26614: POP
// if not list then
26615: LD_VAR 0 13
26619: NOT
26620: IFFALSE 26624
// exit ;
26622: GO 26695
// for i in list do
26624: LD_ADDR_VAR 0 6
26628: PUSH
26629: LD_VAR 0 13
26633: PUSH
26634: FOR_IN
26635: IFFALSE 26693
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26637: LD_VAR 0 1
26641: PPUSH
26642: LD_STRING M
26644: PUSH
26645: LD_VAR 0 6
26649: PUSH
26650: LD_INT 1
26652: ARRAY
26653: PUSH
26654: LD_VAR 0 6
26658: PUSH
26659: LD_INT 2
26661: ARRAY
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: LD_INT 0
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: PUSH
26684: EMPTY
26685: LIST
26686: PPUSH
26687: CALL_OW 447
26691: GO 26634
26693: POP
26694: POP
// end ;
26695: LD_VAR 0 5
26699: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26700: LD_EXP 98
26704: NOT
26705: IFFALSE 26755
26707: GO 26709
26709: DISABLE
// begin initHack := true ;
26710: LD_ADDR_EXP 98
26714: PUSH
26715: LD_INT 1
26717: ST_TO_ADDR
// hackTanks := [ ] ;
26718: LD_ADDR_EXP 99
26722: PUSH
26723: EMPTY
26724: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26725: LD_ADDR_EXP 100
26729: PUSH
26730: EMPTY
26731: ST_TO_ADDR
// hackLimit := 3 ;
26732: LD_ADDR_EXP 101
26736: PUSH
26737: LD_INT 3
26739: ST_TO_ADDR
// hackDist := 12 ;
26740: LD_ADDR_EXP 102
26744: PUSH
26745: LD_INT 12
26747: ST_TO_ADDR
// hackCounter := [ ] ;
26748: LD_ADDR_EXP 103
26752: PUSH
26753: EMPTY
26754: ST_TO_ADDR
// end ;
26755: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26756: LD_EXP 98
26760: PUSH
26761: LD_INT 34
26763: PUSH
26764: LD_EXP 21
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PPUSH
26773: CALL_OW 69
26777: AND
26778: IFFALSE 27033
26780: GO 26782
26782: DISABLE
26783: LD_INT 0
26785: PPUSH
26786: PPUSH
// begin enable ;
26787: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26788: LD_ADDR_VAR 0 1
26792: PUSH
26793: LD_INT 34
26795: PUSH
26796: LD_EXP 21
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PPUSH
26805: CALL_OW 69
26809: PUSH
26810: FOR_IN
26811: IFFALSE 27031
// begin if not i in hackTanks then
26813: LD_VAR 0 1
26817: PUSH
26818: LD_EXP 99
26822: IN
26823: NOT
26824: IFFALSE 26907
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26826: LD_ADDR_EXP 99
26830: PUSH
26831: LD_EXP 99
26835: PPUSH
26836: LD_EXP 99
26840: PUSH
26841: LD_INT 1
26843: PLUS
26844: PPUSH
26845: LD_VAR 0 1
26849: PPUSH
26850: CALL_OW 1
26854: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26855: LD_ADDR_EXP 100
26859: PUSH
26860: LD_EXP 100
26864: PPUSH
26865: LD_EXP 100
26869: PUSH
26870: LD_INT 1
26872: PLUS
26873: PPUSH
26874: EMPTY
26875: PPUSH
26876: CALL_OW 1
26880: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26881: LD_ADDR_EXP 103
26885: PUSH
26886: LD_EXP 103
26890: PPUSH
26891: LD_EXP 103
26895: PUSH
26896: LD_INT 1
26898: PLUS
26899: PPUSH
26900: EMPTY
26901: PPUSH
26902: CALL_OW 1
26906: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26907: LD_VAR 0 1
26911: PPUSH
26912: CALL_OW 302
26916: NOT
26917: IFFALSE 26930
// begin HackUnlinkAll ( i ) ;
26919: LD_VAR 0 1
26923: PPUSH
26924: CALL 27036 0 1
// continue ;
26928: GO 26810
// end ; HackCheckCapturedStatus ( i ) ;
26930: LD_VAR 0 1
26934: PPUSH
26935: CALL 27479 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26939: LD_ADDR_VAR 0 2
26943: PUSH
26944: LD_INT 81
26946: PUSH
26947: LD_VAR 0 1
26951: PPUSH
26952: CALL_OW 255
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 33
26963: PUSH
26964: LD_INT 3
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 91
26973: PUSH
26974: LD_VAR 0 1
26978: PUSH
26979: LD_EXP 102
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 50
26991: PUSH
26992: EMPTY
26993: LIST
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: PPUSH
27001: CALL_OW 69
27005: ST_TO_ADDR
// if not tmp then
27006: LD_VAR 0 2
27010: NOT
27011: IFFALSE 27015
// continue ;
27013: GO 26810
// HackLink ( i , tmp ) ;
27015: LD_VAR 0 1
27019: PPUSH
27020: LD_VAR 0 2
27024: PPUSH
27025: CALL 27172 0 2
// end ;
27029: GO 26810
27031: POP
27032: POP
// end ;
27033: PPOPN 2
27035: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27036: LD_INT 0
27038: PPUSH
27039: PPUSH
27040: PPUSH
// if not hack in hackTanks then
27041: LD_VAR 0 1
27045: PUSH
27046: LD_EXP 99
27050: IN
27051: NOT
27052: IFFALSE 27056
// exit ;
27054: GO 27167
// index := GetElementIndex ( hackTanks , hack ) ;
27056: LD_ADDR_VAR 0 4
27060: PUSH
27061: LD_EXP 99
27065: PPUSH
27066: LD_VAR 0 1
27070: PPUSH
27071: CALL 34641 0 2
27075: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27076: LD_EXP 100
27080: PUSH
27081: LD_VAR 0 4
27085: ARRAY
27086: IFFALSE 27167
// begin for i in hackTanksCaptured [ index ] do
27088: LD_ADDR_VAR 0 3
27092: PUSH
27093: LD_EXP 100
27097: PUSH
27098: LD_VAR 0 4
27102: ARRAY
27103: PUSH
27104: FOR_IN
27105: IFFALSE 27131
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27107: LD_VAR 0 3
27111: PUSH
27112: LD_INT 1
27114: ARRAY
27115: PPUSH
27116: LD_VAR 0 3
27120: PUSH
27121: LD_INT 2
27123: ARRAY
27124: PPUSH
27125: CALL_OW 235
27129: GO 27104
27131: POP
27132: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27133: LD_ADDR_EXP 100
27137: PUSH
27138: LD_EXP 100
27142: PPUSH
27143: LD_VAR 0 4
27147: PPUSH
27148: EMPTY
27149: PPUSH
27150: CALL_OW 1
27154: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27155: LD_VAR 0 1
27159: PPUSH
27160: LD_INT 0
27162: PPUSH
27163: CALL_OW 505
// end ; end ;
27167: LD_VAR 0 2
27171: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27172: LD_INT 0
27174: PPUSH
27175: PPUSH
27176: PPUSH
// if not hack in hackTanks or not vehicles then
27177: LD_VAR 0 1
27181: PUSH
27182: LD_EXP 99
27186: IN
27187: NOT
27188: PUSH
27189: LD_VAR 0 2
27193: NOT
27194: OR
27195: IFFALSE 27199
// exit ;
27197: GO 27474
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27199: LD_ADDR_VAR 0 2
27203: PUSH
27204: LD_VAR 0 1
27208: PPUSH
27209: LD_VAR 0 2
27213: PPUSH
27214: LD_INT 1
27216: PPUSH
27217: LD_INT 1
27219: PPUSH
27220: CALL 35291 0 4
27224: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27225: LD_ADDR_VAR 0 5
27229: PUSH
27230: LD_EXP 99
27234: PPUSH
27235: LD_VAR 0 1
27239: PPUSH
27240: CALL 34641 0 2
27244: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27245: LD_EXP 100
27249: PUSH
27250: LD_VAR 0 5
27254: ARRAY
27255: PUSH
27256: LD_EXP 101
27260: LESS
27261: IFFALSE 27450
// begin for i := 1 to vehicles do
27263: LD_ADDR_VAR 0 4
27267: PUSH
27268: DOUBLE
27269: LD_INT 1
27271: DEC
27272: ST_TO_ADDR
27273: LD_VAR 0 2
27277: PUSH
27278: FOR_TO
27279: IFFALSE 27448
// begin if hackTanksCaptured [ index ] = hackLimit then
27281: LD_EXP 100
27285: PUSH
27286: LD_VAR 0 5
27290: ARRAY
27291: PUSH
27292: LD_EXP 101
27296: EQUAL
27297: IFFALSE 27301
// break ;
27299: GO 27448
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27301: LD_ADDR_EXP 103
27305: PUSH
27306: LD_EXP 103
27310: PPUSH
27311: LD_VAR 0 5
27315: PPUSH
27316: LD_EXP 103
27320: PUSH
27321: LD_VAR 0 5
27325: ARRAY
27326: PUSH
27327: LD_INT 1
27329: PLUS
27330: PPUSH
27331: CALL_OW 1
27335: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27336: LD_ADDR_EXP 100
27340: PUSH
27341: LD_EXP 100
27345: PPUSH
27346: LD_VAR 0 5
27350: PUSH
27351: LD_EXP 100
27355: PUSH
27356: LD_VAR 0 5
27360: ARRAY
27361: PUSH
27362: LD_INT 1
27364: PLUS
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PPUSH
27370: LD_VAR 0 2
27374: PUSH
27375: LD_VAR 0 4
27379: ARRAY
27380: PUSH
27381: LD_VAR 0 2
27385: PUSH
27386: LD_VAR 0 4
27390: ARRAY
27391: PPUSH
27392: CALL_OW 255
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PPUSH
27401: CALL 34856 0 3
27405: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27406: LD_VAR 0 2
27410: PUSH
27411: LD_VAR 0 4
27415: ARRAY
27416: PPUSH
27417: LD_VAR 0 1
27421: PPUSH
27422: CALL_OW 255
27426: PPUSH
27427: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27431: LD_VAR 0 2
27435: PUSH
27436: LD_VAR 0 4
27440: ARRAY
27441: PPUSH
27442: CALL_OW 141
// end ;
27446: GO 27278
27448: POP
27449: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27450: LD_VAR 0 1
27454: PPUSH
27455: LD_EXP 100
27459: PUSH
27460: LD_VAR 0 5
27464: ARRAY
27465: PUSH
27466: LD_INT 0
27468: PLUS
27469: PPUSH
27470: CALL_OW 505
// end ;
27474: LD_VAR 0 3
27478: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27479: LD_INT 0
27481: PPUSH
27482: PPUSH
27483: PPUSH
27484: PPUSH
// if not hack in hackTanks then
27485: LD_VAR 0 1
27489: PUSH
27490: LD_EXP 99
27494: IN
27495: NOT
27496: IFFALSE 27500
// exit ;
27498: GO 27740
// index := GetElementIndex ( hackTanks , hack ) ;
27500: LD_ADDR_VAR 0 4
27504: PUSH
27505: LD_EXP 99
27509: PPUSH
27510: LD_VAR 0 1
27514: PPUSH
27515: CALL 34641 0 2
27519: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27520: LD_ADDR_VAR 0 3
27524: PUSH
27525: DOUBLE
27526: LD_EXP 100
27530: PUSH
27531: LD_VAR 0 4
27535: ARRAY
27536: INC
27537: ST_TO_ADDR
27538: LD_INT 1
27540: PUSH
27541: FOR_DOWNTO
27542: IFFALSE 27714
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27544: LD_ADDR_VAR 0 5
27548: PUSH
27549: LD_EXP 100
27553: PUSH
27554: LD_VAR 0 4
27558: ARRAY
27559: PUSH
27560: LD_VAR 0 3
27564: ARRAY
27565: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27566: LD_VAR 0 5
27570: PUSH
27571: LD_INT 1
27573: ARRAY
27574: PPUSH
27575: CALL_OW 302
27579: NOT
27580: PUSH
27581: LD_VAR 0 5
27585: PUSH
27586: LD_INT 1
27588: ARRAY
27589: PPUSH
27590: CALL_OW 255
27594: PUSH
27595: LD_VAR 0 1
27599: PPUSH
27600: CALL_OW 255
27604: NONEQUAL
27605: OR
27606: IFFALSE 27712
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27608: LD_VAR 0 5
27612: PUSH
27613: LD_INT 1
27615: ARRAY
27616: PPUSH
27617: CALL_OW 305
27621: PUSH
27622: LD_VAR 0 5
27626: PUSH
27627: LD_INT 1
27629: ARRAY
27630: PPUSH
27631: CALL_OW 255
27635: PUSH
27636: LD_VAR 0 1
27640: PPUSH
27641: CALL_OW 255
27645: EQUAL
27646: AND
27647: IFFALSE 27671
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27649: LD_VAR 0 5
27653: PUSH
27654: LD_INT 1
27656: ARRAY
27657: PPUSH
27658: LD_VAR 0 5
27662: PUSH
27663: LD_INT 2
27665: ARRAY
27666: PPUSH
27667: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27671: LD_ADDR_EXP 100
27675: PUSH
27676: LD_EXP 100
27680: PPUSH
27681: LD_VAR 0 4
27685: PPUSH
27686: LD_EXP 100
27690: PUSH
27691: LD_VAR 0 4
27695: ARRAY
27696: PPUSH
27697: LD_VAR 0 3
27701: PPUSH
27702: CALL_OW 3
27706: PPUSH
27707: CALL_OW 1
27711: ST_TO_ADDR
// end ; end ;
27712: GO 27541
27714: POP
27715: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27716: LD_VAR 0 1
27720: PPUSH
27721: LD_EXP 100
27725: PUSH
27726: LD_VAR 0 4
27730: ARRAY
27731: PUSH
27732: LD_INT 0
27734: PLUS
27735: PPUSH
27736: CALL_OW 505
// end ;
27740: LD_VAR 0 2
27744: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27745: LD_INT 0
27747: PPUSH
27748: PPUSH
27749: PPUSH
27750: PPUSH
// if not hack in hackTanks then
27751: LD_VAR 0 1
27755: PUSH
27756: LD_EXP 99
27760: IN
27761: NOT
27762: IFFALSE 27766
// exit ;
27764: GO 27851
// index := GetElementIndex ( hackTanks , hack ) ;
27766: LD_ADDR_VAR 0 5
27770: PUSH
27771: LD_EXP 99
27775: PPUSH
27776: LD_VAR 0 1
27780: PPUSH
27781: CALL 34641 0 2
27785: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27786: LD_ADDR_VAR 0 4
27790: PUSH
27791: DOUBLE
27792: LD_INT 1
27794: DEC
27795: ST_TO_ADDR
27796: LD_EXP 100
27800: PUSH
27801: LD_VAR 0 5
27805: ARRAY
27806: PUSH
27807: FOR_TO
27808: IFFALSE 27849
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27810: LD_EXP 100
27814: PUSH
27815: LD_VAR 0 5
27819: ARRAY
27820: PUSH
27821: LD_VAR 0 4
27825: ARRAY
27826: PUSH
27827: LD_INT 1
27829: ARRAY
27830: PUSH
27831: LD_VAR 0 2
27835: EQUAL
27836: IFFALSE 27847
// KillUnit ( vehicle ) ;
27838: LD_VAR 0 2
27842: PPUSH
27843: CALL_OW 66
27847: GO 27807
27849: POP
27850: POP
// end ;
27851: LD_VAR 0 3
27855: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27856: LD_EXP 104
27860: NOT
27861: IFFALSE 27896
27863: GO 27865
27865: DISABLE
// begin initMiner := true ;
27866: LD_ADDR_EXP 104
27870: PUSH
27871: LD_INT 1
27873: ST_TO_ADDR
// minersList := [ ] ;
27874: LD_ADDR_EXP 105
27878: PUSH
27879: EMPTY
27880: ST_TO_ADDR
// minerMinesList := [ ] ;
27881: LD_ADDR_EXP 106
27885: PUSH
27886: EMPTY
27887: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27888: LD_ADDR_EXP 107
27892: PUSH
27893: LD_INT 5
27895: ST_TO_ADDR
// end ;
27896: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27897: LD_EXP 104
27901: PUSH
27902: LD_INT 34
27904: PUSH
27905: LD_EXP 26
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PPUSH
27914: CALL_OW 69
27918: AND
27919: IFFALSE 28382
27921: GO 27923
27923: DISABLE
27924: LD_INT 0
27926: PPUSH
27927: PPUSH
27928: PPUSH
27929: PPUSH
// begin enable ;
27930: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27931: LD_ADDR_VAR 0 1
27935: PUSH
27936: LD_INT 34
27938: PUSH
27939: LD_EXP 26
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PPUSH
27948: CALL_OW 69
27952: PUSH
27953: FOR_IN
27954: IFFALSE 28026
// begin if not i in minersList then
27956: LD_VAR 0 1
27960: PUSH
27961: LD_EXP 105
27965: IN
27966: NOT
27967: IFFALSE 28024
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27969: LD_ADDR_EXP 105
27973: PUSH
27974: LD_EXP 105
27978: PPUSH
27979: LD_EXP 105
27983: PUSH
27984: LD_INT 1
27986: PLUS
27987: PPUSH
27988: LD_VAR 0 1
27992: PPUSH
27993: CALL_OW 1
27997: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27998: LD_ADDR_EXP 106
28002: PUSH
28003: LD_EXP 106
28007: PPUSH
28008: LD_EXP 106
28012: PUSH
28013: LD_INT 1
28015: PLUS
28016: PPUSH
28017: EMPTY
28018: PPUSH
28019: CALL_OW 1
28023: ST_TO_ADDR
// end end ;
28024: GO 27953
28026: POP
28027: POP
// for i := minerMinesList downto 1 do
28028: LD_ADDR_VAR 0 1
28032: PUSH
28033: DOUBLE
28034: LD_EXP 106
28038: INC
28039: ST_TO_ADDR
28040: LD_INT 1
28042: PUSH
28043: FOR_DOWNTO
28044: IFFALSE 28380
// begin if IsLive ( minersList [ i ] ) then
28046: LD_EXP 105
28050: PUSH
28051: LD_VAR 0 1
28055: ARRAY
28056: PPUSH
28057: CALL_OW 300
28061: IFFALSE 28089
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28063: LD_EXP 105
28067: PUSH
28068: LD_VAR 0 1
28072: ARRAY
28073: PPUSH
28074: LD_EXP 106
28078: PUSH
28079: LD_VAR 0 1
28083: ARRAY
28084: PPUSH
28085: CALL_OW 505
// if not minerMinesList [ i ] then
28089: LD_EXP 106
28093: PUSH
28094: LD_VAR 0 1
28098: ARRAY
28099: NOT
28100: IFFALSE 28104
// continue ;
28102: GO 28043
// for j := minerMinesList [ i ] downto 1 do
28104: LD_ADDR_VAR 0 2
28108: PUSH
28109: DOUBLE
28110: LD_EXP 106
28114: PUSH
28115: LD_VAR 0 1
28119: ARRAY
28120: INC
28121: ST_TO_ADDR
28122: LD_INT 1
28124: PUSH
28125: FOR_DOWNTO
28126: IFFALSE 28376
// begin side := GetSide ( minersList [ i ] ) ;
28128: LD_ADDR_VAR 0 3
28132: PUSH
28133: LD_EXP 105
28137: PUSH
28138: LD_VAR 0 1
28142: ARRAY
28143: PPUSH
28144: CALL_OW 255
28148: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28149: LD_ADDR_VAR 0 4
28153: PUSH
28154: LD_EXP 106
28158: PUSH
28159: LD_VAR 0 1
28163: ARRAY
28164: PUSH
28165: LD_VAR 0 2
28169: ARRAY
28170: PUSH
28171: LD_INT 1
28173: ARRAY
28174: PPUSH
28175: LD_EXP 106
28179: PUSH
28180: LD_VAR 0 1
28184: ARRAY
28185: PUSH
28186: LD_VAR 0 2
28190: ARRAY
28191: PUSH
28192: LD_INT 2
28194: ARRAY
28195: PPUSH
28196: CALL_OW 428
28200: ST_TO_ADDR
// if not tmp then
28201: LD_VAR 0 4
28205: NOT
28206: IFFALSE 28210
// continue ;
28208: GO 28125
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28210: LD_VAR 0 4
28214: PUSH
28215: LD_INT 81
28217: PUSH
28218: LD_VAR 0 3
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PPUSH
28227: CALL_OW 69
28231: IN
28232: PUSH
28233: LD_EXP 106
28237: PUSH
28238: LD_VAR 0 1
28242: ARRAY
28243: PUSH
28244: LD_VAR 0 2
28248: ARRAY
28249: PUSH
28250: LD_INT 1
28252: ARRAY
28253: PPUSH
28254: LD_EXP 106
28258: PUSH
28259: LD_VAR 0 1
28263: ARRAY
28264: PUSH
28265: LD_VAR 0 2
28269: ARRAY
28270: PUSH
28271: LD_INT 2
28273: ARRAY
28274: PPUSH
28275: CALL_OW 458
28279: AND
28280: IFFALSE 28374
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28282: LD_EXP 106
28286: PUSH
28287: LD_VAR 0 1
28291: ARRAY
28292: PUSH
28293: LD_VAR 0 2
28297: ARRAY
28298: PUSH
28299: LD_INT 1
28301: ARRAY
28302: PPUSH
28303: LD_EXP 106
28307: PUSH
28308: LD_VAR 0 1
28312: ARRAY
28313: PUSH
28314: LD_VAR 0 2
28318: ARRAY
28319: PUSH
28320: LD_INT 2
28322: ARRAY
28323: PPUSH
28324: LD_VAR 0 3
28328: PPUSH
28329: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28333: LD_ADDR_EXP 106
28337: PUSH
28338: LD_EXP 106
28342: PPUSH
28343: LD_VAR 0 1
28347: PPUSH
28348: LD_EXP 106
28352: PUSH
28353: LD_VAR 0 1
28357: ARRAY
28358: PPUSH
28359: LD_VAR 0 2
28363: PPUSH
28364: CALL_OW 3
28368: PPUSH
28369: CALL_OW 1
28373: ST_TO_ADDR
// end ; end ;
28374: GO 28125
28376: POP
28377: POP
// end ;
28378: GO 28043
28380: POP
28381: POP
// end ;
28382: PPOPN 4
28384: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28385: LD_INT 0
28387: PPUSH
28388: PPUSH
// result := false ;
28389: LD_ADDR_VAR 0 4
28393: PUSH
28394: LD_INT 0
28396: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28397: LD_VAR 0 1
28401: PPUSH
28402: CALL_OW 264
28406: PUSH
28407: LD_EXP 26
28411: EQUAL
28412: NOT
28413: IFFALSE 28417
// exit ;
28415: GO 28657
// index := GetElementIndex ( minersList , unit ) ;
28417: LD_ADDR_VAR 0 5
28421: PUSH
28422: LD_EXP 105
28426: PPUSH
28427: LD_VAR 0 1
28431: PPUSH
28432: CALL 34641 0 2
28436: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28437: LD_EXP 106
28441: PUSH
28442: LD_VAR 0 5
28446: ARRAY
28447: PUSH
28448: LD_EXP 107
28452: GREATEREQUAL
28453: IFFALSE 28457
// exit ;
28455: GO 28657
// ComMoveXY ( unit , x , y ) ;
28457: LD_VAR 0 1
28461: PPUSH
28462: LD_VAR 0 2
28466: PPUSH
28467: LD_VAR 0 3
28471: PPUSH
28472: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28476: LD_INT 35
28478: PPUSH
28479: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28483: LD_VAR 0 1
28487: PPUSH
28488: LD_VAR 0 2
28492: PPUSH
28493: LD_VAR 0 3
28497: PPUSH
28498: CALL 65360 0 3
28502: NOT
28503: PUSH
28504: LD_VAR 0 1
28508: PPUSH
28509: CALL_OW 314
28513: AND
28514: IFFALSE 28518
// exit ;
28516: GO 28657
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28518: LD_VAR 0 2
28522: PPUSH
28523: LD_VAR 0 3
28527: PPUSH
28528: CALL_OW 428
28532: PUSH
28533: LD_VAR 0 1
28537: EQUAL
28538: PUSH
28539: LD_VAR 0 1
28543: PPUSH
28544: CALL_OW 314
28548: NOT
28549: AND
28550: IFFALSE 28476
// PlaySoundXY ( x , y , PlantMine ) ;
28552: LD_VAR 0 2
28556: PPUSH
28557: LD_VAR 0 3
28561: PPUSH
28562: LD_STRING PlantMine
28564: PPUSH
28565: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28569: LD_VAR 0 2
28573: PPUSH
28574: LD_VAR 0 3
28578: PPUSH
28579: LD_VAR 0 1
28583: PPUSH
28584: CALL_OW 255
28588: PPUSH
28589: LD_INT 0
28591: PPUSH
28592: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28596: LD_ADDR_EXP 106
28600: PUSH
28601: LD_EXP 106
28605: PPUSH
28606: LD_VAR 0 5
28610: PUSH
28611: LD_EXP 106
28615: PUSH
28616: LD_VAR 0 5
28620: ARRAY
28621: PUSH
28622: LD_INT 1
28624: PLUS
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PPUSH
28630: LD_VAR 0 2
28634: PUSH
28635: LD_VAR 0 3
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PPUSH
28644: CALL 34856 0 3
28648: ST_TO_ADDR
// result := true ;
28649: LD_ADDR_VAR 0 4
28653: PUSH
28654: LD_INT 1
28656: ST_TO_ADDR
// end ;
28657: LD_VAR 0 4
28661: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28662: LD_INT 0
28664: PPUSH
28665: PPUSH
28666: PPUSH
// if not unit in minersList then
28667: LD_VAR 0 1
28671: PUSH
28672: LD_EXP 105
28676: IN
28677: NOT
28678: IFFALSE 28682
// exit ;
28680: GO 29074
// index := GetElementIndex ( minersList , unit ) ;
28682: LD_ADDR_VAR 0 6
28686: PUSH
28687: LD_EXP 105
28691: PPUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: CALL 34641 0 2
28701: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28702: LD_ADDR_VAR 0 5
28706: PUSH
28707: DOUBLE
28708: LD_EXP 106
28712: PUSH
28713: LD_VAR 0 6
28717: ARRAY
28718: INC
28719: ST_TO_ADDR
28720: LD_INT 1
28722: PUSH
28723: FOR_DOWNTO
28724: IFFALSE 28885
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28726: LD_EXP 106
28730: PUSH
28731: LD_VAR 0 6
28735: ARRAY
28736: PUSH
28737: LD_VAR 0 5
28741: ARRAY
28742: PUSH
28743: LD_INT 1
28745: ARRAY
28746: PUSH
28747: LD_VAR 0 2
28751: EQUAL
28752: PUSH
28753: LD_EXP 106
28757: PUSH
28758: LD_VAR 0 6
28762: ARRAY
28763: PUSH
28764: LD_VAR 0 5
28768: ARRAY
28769: PUSH
28770: LD_INT 2
28772: ARRAY
28773: PUSH
28774: LD_VAR 0 3
28778: EQUAL
28779: AND
28780: IFFALSE 28883
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28782: LD_EXP 106
28786: PUSH
28787: LD_VAR 0 6
28791: ARRAY
28792: PUSH
28793: LD_VAR 0 5
28797: ARRAY
28798: PUSH
28799: LD_INT 1
28801: ARRAY
28802: PPUSH
28803: LD_EXP 106
28807: PUSH
28808: LD_VAR 0 6
28812: ARRAY
28813: PUSH
28814: LD_VAR 0 5
28818: ARRAY
28819: PUSH
28820: LD_INT 2
28822: ARRAY
28823: PPUSH
28824: LD_VAR 0 1
28828: PPUSH
28829: CALL_OW 255
28833: PPUSH
28834: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28838: LD_ADDR_EXP 106
28842: PUSH
28843: LD_EXP 106
28847: PPUSH
28848: LD_VAR 0 6
28852: PPUSH
28853: LD_EXP 106
28857: PUSH
28858: LD_VAR 0 6
28862: ARRAY
28863: PPUSH
28864: LD_VAR 0 5
28868: PPUSH
28869: CALL_OW 3
28873: PPUSH
28874: CALL_OW 1
28878: ST_TO_ADDR
// exit ;
28879: POP
28880: POP
28881: GO 29074
// end ; end ;
28883: GO 28723
28885: POP
28886: POP
// for i := minerMinesList [ index ] downto 1 do
28887: LD_ADDR_VAR 0 5
28891: PUSH
28892: DOUBLE
28893: LD_EXP 106
28897: PUSH
28898: LD_VAR 0 6
28902: ARRAY
28903: INC
28904: ST_TO_ADDR
28905: LD_INT 1
28907: PUSH
28908: FOR_DOWNTO
28909: IFFALSE 29072
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28911: LD_EXP 106
28915: PUSH
28916: LD_VAR 0 6
28920: ARRAY
28921: PUSH
28922: LD_VAR 0 5
28926: ARRAY
28927: PUSH
28928: LD_INT 1
28930: ARRAY
28931: PPUSH
28932: LD_EXP 106
28936: PUSH
28937: LD_VAR 0 6
28941: ARRAY
28942: PUSH
28943: LD_VAR 0 5
28947: ARRAY
28948: PUSH
28949: LD_INT 2
28951: ARRAY
28952: PPUSH
28953: LD_VAR 0 2
28957: PPUSH
28958: LD_VAR 0 3
28962: PPUSH
28963: CALL_OW 298
28967: PUSH
28968: LD_INT 6
28970: LESS
28971: IFFALSE 29070
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28973: LD_EXP 106
28977: PUSH
28978: LD_VAR 0 6
28982: ARRAY
28983: PUSH
28984: LD_VAR 0 5
28988: ARRAY
28989: PUSH
28990: LD_INT 1
28992: ARRAY
28993: PPUSH
28994: LD_EXP 106
28998: PUSH
28999: LD_VAR 0 6
29003: ARRAY
29004: PUSH
29005: LD_VAR 0 5
29009: ARRAY
29010: PUSH
29011: LD_INT 2
29013: ARRAY
29014: PPUSH
29015: LD_VAR 0 1
29019: PPUSH
29020: CALL_OW 255
29024: PPUSH
29025: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29029: LD_ADDR_EXP 106
29033: PUSH
29034: LD_EXP 106
29038: PPUSH
29039: LD_VAR 0 6
29043: PPUSH
29044: LD_EXP 106
29048: PUSH
29049: LD_VAR 0 6
29053: ARRAY
29054: PPUSH
29055: LD_VAR 0 5
29059: PPUSH
29060: CALL_OW 3
29064: PPUSH
29065: CALL_OW 1
29069: ST_TO_ADDR
// end ; end ;
29070: GO 28908
29072: POP
29073: POP
// end ;
29074: LD_VAR 0 4
29078: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29079: LD_INT 0
29081: PPUSH
29082: PPUSH
29083: PPUSH
29084: PPUSH
29085: PPUSH
29086: PPUSH
29087: PPUSH
29088: PPUSH
29089: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29090: LD_VAR 0 1
29094: PPUSH
29095: CALL_OW 264
29099: PUSH
29100: LD_EXP 26
29104: EQUAL
29105: NOT
29106: PUSH
29107: LD_VAR 0 1
29111: PUSH
29112: LD_EXP 105
29116: IN
29117: NOT
29118: OR
29119: IFFALSE 29123
// exit ;
29121: GO 29445
// index := GetElementIndex ( minersList , unit ) ;
29123: LD_ADDR_VAR 0 6
29127: PUSH
29128: LD_EXP 105
29132: PPUSH
29133: LD_VAR 0 1
29137: PPUSH
29138: CALL 34641 0 2
29142: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29143: LD_ADDR_VAR 0 8
29147: PUSH
29148: LD_EXP 107
29152: PUSH
29153: LD_EXP 106
29157: PUSH
29158: LD_VAR 0 6
29162: ARRAY
29163: MINUS
29164: ST_TO_ADDR
// if not minesFreeAmount then
29165: LD_VAR 0 8
29169: NOT
29170: IFFALSE 29174
// exit ;
29172: GO 29445
// tmp := [ ] ;
29174: LD_ADDR_VAR 0 7
29178: PUSH
29179: EMPTY
29180: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29181: LD_ADDR_VAR 0 5
29185: PUSH
29186: DOUBLE
29187: LD_INT 1
29189: DEC
29190: ST_TO_ADDR
29191: LD_VAR 0 8
29195: PUSH
29196: FOR_TO
29197: IFFALSE 29392
// begin _d := rand ( 0 , 5 ) ;
29199: LD_ADDR_VAR 0 11
29203: PUSH
29204: LD_INT 0
29206: PPUSH
29207: LD_INT 5
29209: PPUSH
29210: CALL_OW 12
29214: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29215: LD_ADDR_VAR 0 12
29219: PUSH
29220: LD_INT 2
29222: PPUSH
29223: LD_INT 6
29225: PPUSH
29226: CALL_OW 12
29230: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29231: LD_ADDR_VAR 0 9
29235: PUSH
29236: LD_VAR 0 2
29240: PPUSH
29241: LD_VAR 0 11
29245: PPUSH
29246: LD_VAR 0 12
29250: PPUSH
29251: CALL_OW 272
29255: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29256: LD_ADDR_VAR 0 10
29260: PUSH
29261: LD_VAR 0 3
29265: PPUSH
29266: LD_VAR 0 11
29270: PPUSH
29271: LD_VAR 0 12
29275: PPUSH
29276: CALL_OW 273
29280: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29281: LD_VAR 0 9
29285: PPUSH
29286: LD_VAR 0 10
29290: PPUSH
29291: CALL_OW 488
29295: PUSH
29296: LD_VAR 0 9
29300: PUSH
29301: LD_VAR 0 10
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_VAR 0 7
29314: IN
29315: NOT
29316: AND
29317: PUSH
29318: LD_VAR 0 9
29322: PPUSH
29323: LD_VAR 0 10
29327: PPUSH
29328: CALL_OW 458
29332: NOT
29333: AND
29334: IFFALSE 29376
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29336: LD_ADDR_VAR 0 7
29340: PUSH
29341: LD_VAR 0 7
29345: PPUSH
29346: LD_VAR 0 7
29350: PUSH
29351: LD_INT 1
29353: PLUS
29354: PPUSH
29355: LD_VAR 0 9
29359: PUSH
29360: LD_VAR 0 10
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PPUSH
29369: CALL_OW 1
29373: ST_TO_ADDR
29374: GO 29390
// i := i - 1 ;
29376: LD_ADDR_VAR 0 5
29380: PUSH
29381: LD_VAR 0 5
29385: PUSH
29386: LD_INT 1
29388: MINUS
29389: ST_TO_ADDR
// end ;
29390: GO 29196
29392: POP
29393: POP
// for i in tmp do
29394: LD_ADDR_VAR 0 5
29398: PUSH
29399: LD_VAR 0 7
29403: PUSH
29404: FOR_IN
29405: IFFALSE 29443
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29407: LD_VAR 0 1
29411: PPUSH
29412: LD_VAR 0 5
29416: PUSH
29417: LD_INT 1
29419: ARRAY
29420: PPUSH
29421: LD_VAR 0 5
29425: PUSH
29426: LD_INT 2
29428: ARRAY
29429: PPUSH
29430: CALL 28385 0 3
29434: NOT
29435: IFFALSE 29441
// exit ;
29437: POP
29438: POP
29439: GO 29445
29441: GO 29404
29443: POP
29444: POP
// end ;
29445: LD_VAR 0 4
29449: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29450: LD_INT 0
29452: PPUSH
29453: PPUSH
29454: PPUSH
29455: PPUSH
29456: PPUSH
29457: PPUSH
29458: PPUSH
// if not GetClass ( unit ) = class_sniper then
29459: LD_VAR 0 1
29463: PPUSH
29464: CALL_OW 257
29468: PUSH
29469: LD_INT 5
29471: EQUAL
29472: NOT
29473: IFFALSE 29477
// exit ;
29475: GO 29865
// dist := 8 ;
29477: LD_ADDR_VAR 0 5
29481: PUSH
29482: LD_INT 8
29484: ST_TO_ADDR
// viewRange := 12 ;
29485: LD_ADDR_VAR 0 7
29489: PUSH
29490: LD_INT 12
29492: ST_TO_ADDR
// side := GetSide ( unit ) ;
29493: LD_ADDR_VAR 0 6
29497: PUSH
29498: LD_VAR 0 1
29502: PPUSH
29503: CALL_OW 255
29507: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29508: LD_INT 61
29510: PPUSH
29511: LD_VAR 0 6
29515: PPUSH
29516: CALL_OW 321
29520: PUSH
29521: LD_INT 2
29523: EQUAL
29524: IFFALSE 29534
// viewRange := 16 ;
29526: LD_ADDR_VAR 0 7
29530: PUSH
29531: LD_INT 16
29533: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29534: LD_VAR 0 1
29538: PPUSH
29539: LD_VAR 0 2
29543: PPUSH
29544: LD_VAR 0 3
29548: PPUSH
29549: CALL_OW 297
29553: PUSH
29554: LD_VAR 0 5
29558: GREATER
29559: IFFALSE 29638
// begin ComMoveXY ( unit , x , y ) ;
29561: LD_VAR 0 1
29565: PPUSH
29566: LD_VAR 0 2
29570: PPUSH
29571: LD_VAR 0 3
29575: PPUSH
29576: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29580: LD_INT 35
29582: PPUSH
29583: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29587: LD_VAR 0 1
29591: PPUSH
29592: LD_VAR 0 2
29596: PPUSH
29597: LD_VAR 0 3
29601: PPUSH
29602: CALL 65360 0 3
29606: NOT
29607: IFFALSE 29611
// exit ;
29609: GO 29865
// until GetDistUnitXY ( unit , x , y ) < dist ;
29611: LD_VAR 0 1
29615: PPUSH
29616: LD_VAR 0 2
29620: PPUSH
29621: LD_VAR 0 3
29625: PPUSH
29626: CALL_OW 297
29630: PUSH
29631: LD_VAR 0 5
29635: LESS
29636: IFFALSE 29580
// end ; ComTurnXY ( unit , x , y ) ;
29638: LD_VAR 0 1
29642: PPUSH
29643: LD_VAR 0 2
29647: PPUSH
29648: LD_VAR 0 3
29652: PPUSH
29653: CALL_OW 118
// wait ( 5 ) ;
29657: LD_INT 5
29659: PPUSH
29660: CALL_OW 67
// _d := GetDir ( unit ) ;
29664: LD_ADDR_VAR 0 10
29668: PUSH
29669: LD_VAR 0 1
29673: PPUSH
29674: CALL_OW 254
29678: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29679: LD_ADDR_VAR 0 8
29683: PUSH
29684: LD_VAR 0 1
29688: PPUSH
29689: CALL_OW 250
29693: PPUSH
29694: LD_VAR 0 10
29698: PPUSH
29699: LD_VAR 0 5
29703: PPUSH
29704: CALL_OW 272
29708: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29709: LD_ADDR_VAR 0 9
29713: PUSH
29714: LD_VAR 0 1
29718: PPUSH
29719: CALL_OW 251
29723: PPUSH
29724: LD_VAR 0 10
29728: PPUSH
29729: LD_VAR 0 5
29733: PPUSH
29734: CALL_OW 273
29738: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29739: LD_VAR 0 8
29743: PPUSH
29744: LD_VAR 0 9
29748: PPUSH
29749: CALL_OW 488
29753: NOT
29754: IFFALSE 29758
// exit ;
29756: GO 29865
// ComAnimCustom ( unit , 1 ) ;
29758: LD_VAR 0 1
29762: PPUSH
29763: LD_INT 1
29765: PPUSH
29766: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29770: LD_VAR 0 8
29774: PPUSH
29775: LD_VAR 0 9
29779: PPUSH
29780: LD_VAR 0 6
29784: PPUSH
29785: LD_VAR 0 7
29789: PPUSH
29790: CALL_OW 330
// repeat wait ( 1 ) ;
29794: LD_INT 1
29796: PPUSH
29797: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29801: LD_VAR 0 1
29805: PPUSH
29806: CALL_OW 316
29810: PUSH
29811: LD_VAR 0 1
29815: PPUSH
29816: CALL_OW 314
29820: OR
29821: PUSH
29822: LD_VAR 0 1
29826: PPUSH
29827: CALL_OW 302
29831: NOT
29832: OR
29833: PUSH
29834: LD_VAR 0 1
29838: PPUSH
29839: CALL_OW 301
29843: OR
29844: IFFALSE 29794
// RemoveSeeing ( _x , _y , side ) ;
29846: LD_VAR 0 8
29850: PPUSH
29851: LD_VAR 0 9
29855: PPUSH
29856: LD_VAR 0 6
29860: PPUSH
29861: CALL_OW 331
// end ; end_of_file
29865: LD_VAR 0 4
29869: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29870: LD_INT 0
29872: PPUSH
29873: PPUSH
// if exist_mode then
29874: LD_VAR 0 2
29878: IFFALSE 29903
// unit := CreateCharacter ( prefix & ident ) else
29880: LD_ADDR_VAR 0 5
29884: PUSH
29885: LD_VAR 0 3
29889: PUSH
29890: LD_VAR 0 1
29894: STR
29895: PPUSH
29896: CALL_OW 34
29900: ST_TO_ADDR
29901: GO 29918
// unit := NewCharacter ( ident ) ;
29903: LD_ADDR_VAR 0 5
29907: PUSH
29908: LD_VAR 0 1
29912: PPUSH
29913: CALL_OW 25
29917: ST_TO_ADDR
// result := unit ;
29918: LD_ADDR_VAR 0 4
29922: PUSH
29923: LD_VAR 0 5
29927: ST_TO_ADDR
// end ;
29928: LD_VAR 0 4
29932: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29933: LD_INT 0
29935: PPUSH
29936: PPUSH
// if not side or not nation then
29937: LD_VAR 0 1
29941: NOT
29942: PUSH
29943: LD_VAR 0 2
29947: NOT
29948: OR
29949: IFFALSE 29953
// exit ;
29951: GO 30721
// case nation of nation_american :
29953: LD_VAR 0 2
29957: PUSH
29958: LD_INT 1
29960: DOUBLE
29961: EQUAL
29962: IFTRUE 29966
29964: GO 30180
29966: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29967: LD_ADDR_VAR 0 4
29971: PUSH
29972: LD_INT 35
29974: PUSH
29975: LD_INT 45
29977: PUSH
29978: LD_INT 46
29980: PUSH
29981: LD_INT 47
29983: PUSH
29984: LD_INT 82
29986: PUSH
29987: LD_INT 83
29989: PUSH
29990: LD_INT 84
29992: PUSH
29993: LD_INT 85
29995: PUSH
29996: LD_INT 86
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: LD_INT 6
30007: PUSH
30008: LD_INT 15
30010: PUSH
30011: LD_INT 16
30013: PUSH
30014: LD_INT 7
30016: PUSH
30017: LD_INT 12
30019: PUSH
30020: LD_INT 13
30022: PUSH
30023: LD_INT 10
30025: PUSH
30026: LD_INT 14
30028: PUSH
30029: LD_INT 20
30031: PUSH
30032: LD_INT 21
30034: PUSH
30035: LD_INT 22
30037: PUSH
30038: LD_INT 25
30040: PUSH
30041: LD_INT 32
30043: PUSH
30044: LD_INT 27
30046: PUSH
30047: LD_INT 36
30049: PUSH
30050: LD_INT 69
30052: PUSH
30053: LD_INT 39
30055: PUSH
30056: LD_INT 34
30058: PUSH
30059: LD_INT 40
30061: PUSH
30062: LD_INT 48
30064: PUSH
30065: LD_INT 49
30067: PUSH
30068: LD_INT 50
30070: PUSH
30071: LD_INT 51
30073: PUSH
30074: LD_INT 52
30076: PUSH
30077: LD_INT 53
30079: PUSH
30080: LD_INT 54
30082: PUSH
30083: LD_INT 55
30085: PUSH
30086: LD_INT 56
30088: PUSH
30089: LD_INT 57
30091: PUSH
30092: LD_INT 58
30094: PUSH
30095: LD_INT 59
30097: PUSH
30098: LD_INT 60
30100: PUSH
30101: LD_INT 61
30103: PUSH
30104: LD_INT 62
30106: PUSH
30107: LD_INT 80
30109: PUSH
30110: LD_INT 82
30112: PUSH
30113: LD_INT 83
30115: PUSH
30116: LD_INT 84
30118: PUSH
30119: LD_INT 85
30121: PUSH
30122: LD_INT 86
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: ST_TO_ADDR
30178: GO 30645
30180: LD_INT 2
30182: DOUBLE
30183: EQUAL
30184: IFTRUE 30188
30186: GO 30414
30188: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30189: LD_ADDR_VAR 0 4
30193: PUSH
30194: LD_INT 35
30196: PUSH
30197: LD_INT 45
30199: PUSH
30200: LD_INT 46
30202: PUSH
30203: LD_INT 47
30205: PUSH
30206: LD_INT 82
30208: PUSH
30209: LD_INT 83
30211: PUSH
30212: LD_INT 84
30214: PUSH
30215: LD_INT 85
30217: PUSH
30218: LD_INT 87
30220: PUSH
30221: LD_INT 70
30223: PUSH
30224: LD_INT 1
30226: PUSH
30227: LD_INT 11
30229: PUSH
30230: LD_INT 3
30232: PUSH
30233: LD_INT 4
30235: PUSH
30236: LD_INT 5
30238: PUSH
30239: LD_INT 6
30241: PUSH
30242: LD_INT 15
30244: PUSH
30245: LD_INT 18
30247: PUSH
30248: LD_INT 7
30250: PUSH
30251: LD_INT 17
30253: PUSH
30254: LD_INT 8
30256: PUSH
30257: LD_INT 20
30259: PUSH
30260: LD_INT 21
30262: PUSH
30263: LD_INT 22
30265: PUSH
30266: LD_INT 72
30268: PUSH
30269: LD_INT 26
30271: PUSH
30272: LD_INT 69
30274: PUSH
30275: LD_INT 39
30277: PUSH
30278: LD_INT 40
30280: PUSH
30281: LD_INT 41
30283: PUSH
30284: LD_INT 42
30286: PUSH
30287: LD_INT 43
30289: PUSH
30290: LD_INT 48
30292: PUSH
30293: LD_INT 49
30295: PUSH
30296: LD_INT 50
30298: PUSH
30299: LD_INT 51
30301: PUSH
30302: LD_INT 52
30304: PUSH
30305: LD_INT 53
30307: PUSH
30308: LD_INT 54
30310: PUSH
30311: LD_INT 55
30313: PUSH
30314: LD_INT 56
30316: PUSH
30317: LD_INT 60
30319: PUSH
30320: LD_INT 61
30322: PUSH
30323: LD_INT 62
30325: PUSH
30326: LD_INT 66
30328: PUSH
30329: LD_INT 67
30331: PUSH
30332: LD_INT 68
30334: PUSH
30335: LD_INT 81
30337: PUSH
30338: LD_INT 82
30340: PUSH
30341: LD_INT 83
30343: PUSH
30344: LD_INT 84
30346: PUSH
30347: LD_INT 85
30349: PUSH
30350: LD_INT 87
30352: PUSH
30353: LD_INT 88
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: ST_TO_ADDR
30412: GO 30645
30414: LD_INT 3
30416: DOUBLE
30417: EQUAL
30418: IFTRUE 30422
30420: GO 30644
30422: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30423: LD_ADDR_VAR 0 4
30427: PUSH
30428: LD_INT 46
30430: PUSH
30431: LD_INT 47
30433: PUSH
30434: LD_INT 1
30436: PUSH
30437: LD_INT 2
30439: PUSH
30440: LD_INT 82
30442: PUSH
30443: LD_INT 83
30445: PUSH
30446: LD_INT 84
30448: PUSH
30449: LD_INT 85
30451: PUSH
30452: LD_INT 86
30454: PUSH
30455: LD_INT 11
30457: PUSH
30458: LD_INT 9
30460: PUSH
30461: LD_INT 20
30463: PUSH
30464: LD_INT 19
30466: PUSH
30467: LD_INT 21
30469: PUSH
30470: LD_INT 24
30472: PUSH
30473: LD_INT 22
30475: PUSH
30476: LD_INT 25
30478: PUSH
30479: LD_INT 28
30481: PUSH
30482: LD_INT 29
30484: PUSH
30485: LD_INT 30
30487: PUSH
30488: LD_INT 31
30490: PUSH
30491: LD_INT 37
30493: PUSH
30494: LD_INT 38
30496: PUSH
30497: LD_INT 32
30499: PUSH
30500: LD_INT 27
30502: PUSH
30503: LD_INT 33
30505: PUSH
30506: LD_INT 69
30508: PUSH
30509: LD_INT 39
30511: PUSH
30512: LD_INT 34
30514: PUSH
30515: LD_INT 40
30517: PUSH
30518: LD_INT 71
30520: PUSH
30521: LD_INT 23
30523: PUSH
30524: LD_INT 44
30526: PUSH
30527: LD_INT 48
30529: PUSH
30530: LD_INT 49
30532: PUSH
30533: LD_INT 50
30535: PUSH
30536: LD_INT 51
30538: PUSH
30539: LD_INT 52
30541: PUSH
30542: LD_INT 53
30544: PUSH
30545: LD_INT 54
30547: PUSH
30548: LD_INT 55
30550: PUSH
30551: LD_INT 56
30553: PUSH
30554: LD_INT 57
30556: PUSH
30557: LD_INT 58
30559: PUSH
30560: LD_INT 59
30562: PUSH
30563: LD_INT 63
30565: PUSH
30566: LD_INT 64
30568: PUSH
30569: LD_INT 65
30571: PUSH
30572: LD_INT 82
30574: PUSH
30575: LD_INT 83
30577: PUSH
30578: LD_INT 84
30580: PUSH
30581: LD_INT 85
30583: PUSH
30584: LD_INT 86
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: ST_TO_ADDR
30642: GO 30645
30644: POP
// if state > - 1 and state < 3 then
30645: LD_VAR 0 3
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: GREATER
30654: PUSH
30655: LD_VAR 0 3
30659: PUSH
30660: LD_INT 3
30662: LESS
30663: AND
30664: IFFALSE 30721
// for i in result do
30666: LD_ADDR_VAR 0 5
30670: PUSH
30671: LD_VAR 0 4
30675: PUSH
30676: FOR_IN
30677: IFFALSE 30719
// if GetTech ( i , side ) <> state then
30679: LD_VAR 0 5
30683: PPUSH
30684: LD_VAR 0 1
30688: PPUSH
30689: CALL_OW 321
30693: PUSH
30694: LD_VAR 0 3
30698: NONEQUAL
30699: IFFALSE 30717
// result := result diff i ;
30701: LD_ADDR_VAR 0 4
30705: PUSH
30706: LD_VAR 0 4
30710: PUSH
30711: LD_VAR 0 5
30715: DIFF
30716: ST_TO_ADDR
30717: GO 30676
30719: POP
30720: POP
// end ;
30721: LD_VAR 0 4
30725: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30726: LD_INT 0
30728: PPUSH
30729: PPUSH
30730: PPUSH
// result := true ;
30731: LD_ADDR_VAR 0 3
30735: PUSH
30736: LD_INT 1
30738: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30739: LD_ADDR_VAR 0 5
30743: PUSH
30744: LD_VAR 0 2
30748: PPUSH
30749: CALL_OW 480
30753: ST_TO_ADDR
// if not tmp then
30754: LD_VAR 0 5
30758: NOT
30759: IFFALSE 30763
// exit ;
30761: GO 30812
// for i in tmp do
30763: LD_ADDR_VAR 0 4
30767: PUSH
30768: LD_VAR 0 5
30772: PUSH
30773: FOR_IN
30774: IFFALSE 30810
// if GetTech ( i , side ) <> state_researched then
30776: LD_VAR 0 4
30780: PPUSH
30781: LD_VAR 0 1
30785: PPUSH
30786: CALL_OW 321
30790: PUSH
30791: LD_INT 2
30793: NONEQUAL
30794: IFFALSE 30808
// begin result := false ;
30796: LD_ADDR_VAR 0 3
30800: PUSH
30801: LD_INT 0
30803: ST_TO_ADDR
// exit ;
30804: POP
30805: POP
30806: GO 30812
// end ;
30808: GO 30773
30810: POP
30811: POP
// end ;
30812: LD_VAR 0 3
30816: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30817: LD_INT 0
30819: PPUSH
30820: PPUSH
30821: PPUSH
30822: PPUSH
30823: PPUSH
30824: PPUSH
30825: PPUSH
30826: PPUSH
30827: PPUSH
30828: PPUSH
30829: PPUSH
30830: PPUSH
30831: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30832: LD_VAR 0 1
30836: NOT
30837: PUSH
30838: LD_VAR 0 1
30842: PPUSH
30843: CALL_OW 257
30847: PUSH
30848: LD_INT 9
30850: NONEQUAL
30851: OR
30852: IFFALSE 30856
// exit ;
30854: GO 31429
// side := GetSide ( unit ) ;
30856: LD_ADDR_VAR 0 9
30860: PUSH
30861: LD_VAR 0 1
30865: PPUSH
30866: CALL_OW 255
30870: ST_TO_ADDR
// tech_space := tech_spacanom ;
30871: LD_ADDR_VAR 0 12
30875: PUSH
30876: LD_INT 29
30878: ST_TO_ADDR
// tech_time := tech_taurad ;
30879: LD_ADDR_VAR 0 13
30883: PUSH
30884: LD_INT 28
30886: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30887: LD_ADDR_VAR 0 11
30891: PUSH
30892: LD_VAR 0 1
30896: PPUSH
30897: CALL_OW 310
30901: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30902: LD_VAR 0 11
30906: PPUSH
30907: CALL_OW 247
30911: PUSH
30912: LD_INT 2
30914: EQUAL
30915: IFFALSE 30919
// exit ;
30917: GO 31429
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30919: LD_ADDR_VAR 0 8
30923: PUSH
30924: LD_INT 81
30926: PUSH
30927: LD_VAR 0 9
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 3
30938: PUSH
30939: LD_INT 21
30941: PUSH
30942: LD_INT 3
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PPUSH
30957: CALL_OW 69
30961: ST_TO_ADDR
// if not tmp then
30962: LD_VAR 0 8
30966: NOT
30967: IFFALSE 30971
// exit ;
30969: GO 31429
// if in_unit then
30971: LD_VAR 0 11
30975: IFFALSE 30999
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30977: LD_ADDR_VAR 0 10
30981: PUSH
30982: LD_VAR 0 8
30986: PPUSH
30987: LD_VAR 0 11
30991: PPUSH
30992: CALL_OW 74
30996: ST_TO_ADDR
30997: GO 31019
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30999: LD_ADDR_VAR 0 10
31003: PUSH
31004: LD_VAR 0 8
31008: PPUSH
31009: LD_VAR 0 1
31013: PPUSH
31014: CALL_OW 74
31018: ST_TO_ADDR
// if not enemy then
31019: LD_VAR 0 10
31023: NOT
31024: IFFALSE 31028
// exit ;
31026: GO 31429
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31028: LD_VAR 0 11
31032: PUSH
31033: LD_VAR 0 11
31037: PPUSH
31038: LD_VAR 0 10
31042: PPUSH
31043: CALL_OW 296
31047: PUSH
31048: LD_INT 13
31050: GREATER
31051: AND
31052: PUSH
31053: LD_VAR 0 1
31057: PPUSH
31058: LD_VAR 0 10
31062: PPUSH
31063: CALL_OW 296
31067: PUSH
31068: LD_INT 12
31070: GREATER
31071: OR
31072: IFFALSE 31076
// exit ;
31074: GO 31429
// missile := [ 1 ] ;
31076: LD_ADDR_VAR 0 14
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: EMPTY
31085: LIST
31086: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31087: LD_VAR 0 9
31091: PPUSH
31092: LD_VAR 0 12
31096: PPUSH
31097: CALL_OW 325
31101: IFFALSE 31130
// missile := Replace ( missile , missile + 1 , 2 ) ;
31103: LD_ADDR_VAR 0 14
31107: PUSH
31108: LD_VAR 0 14
31112: PPUSH
31113: LD_VAR 0 14
31117: PUSH
31118: LD_INT 1
31120: PLUS
31121: PPUSH
31122: LD_INT 2
31124: PPUSH
31125: CALL_OW 1
31129: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31130: LD_VAR 0 9
31134: PPUSH
31135: LD_VAR 0 13
31139: PPUSH
31140: CALL_OW 325
31144: PUSH
31145: LD_VAR 0 10
31149: PPUSH
31150: CALL_OW 255
31154: PPUSH
31155: LD_VAR 0 13
31159: PPUSH
31160: CALL_OW 325
31164: NOT
31165: AND
31166: IFFALSE 31195
// missile := Replace ( missile , missile + 1 , 3 ) ;
31168: LD_ADDR_VAR 0 14
31172: PUSH
31173: LD_VAR 0 14
31177: PPUSH
31178: LD_VAR 0 14
31182: PUSH
31183: LD_INT 1
31185: PLUS
31186: PPUSH
31187: LD_INT 3
31189: PPUSH
31190: CALL_OW 1
31194: ST_TO_ADDR
// if missile < 2 then
31195: LD_VAR 0 14
31199: PUSH
31200: LD_INT 2
31202: LESS
31203: IFFALSE 31207
// exit ;
31205: GO 31429
// x := GetX ( enemy ) ;
31207: LD_ADDR_VAR 0 4
31211: PUSH
31212: LD_VAR 0 10
31216: PPUSH
31217: CALL_OW 250
31221: ST_TO_ADDR
// y := GetY ( enemy ) ;
31222: LD_ADDR_VAR 0 5
31226: PUSH
31227: LD_VAR 0 10
31231: PPUSH
31232: CALL_OW 251
31236: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31237: LD_ADDR_VAR 0 6
31241: PUSH
31242: LD_VAR 0 4
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PPUSH
31251: LD_INT 1
31253: PPUSH
31254: CALL_OW 12
31258: PLUS
31259: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31260: LD_ADDR_VAR 0 7
31264: PUSH
31265: LD_VAR 0 5
31269: PUSH
31270: LD_INT 1
31272: NEG
31273: PPUSH
31274: LD_INT 1
31276: PPUSH
31277: CALL_OW 12
31281: PLUS
31282: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31283: LD_VAR 0 6
31287: PPUSH
31288: LD_VAR 0 7
31292: PPUSH
31293: CALL_OW 488
31297: NOT
31298: IFFALSE 31320
// begin _x := x ;
31300: LD_ADDR_VAR 0 6
31304: PUSH
31305: LD_VAR 0 4
31309: ST_TO_ADDR
// _y := y ;
31310: LD_ADDR_VAR 0 7
31314: PUSH
31315: LD_VAR 0 5
31319: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31320: LD_ADDR_VAR 0 3
31324: PUSH
31325: LD_INT 1
31327: PPUSH
31328: LD_VAR 0 14
31332: PPUSH
31333: CALL_OW 12
31337: ST_TO_ADDR
// case i of 1 :
31338: LD_VAR 0 3
31342: PUSH
31343: LD_INT 1
31345: DOUBLE
31346: EQUAL
31347: IFTRUE 31351
31349: GO 31368
31351: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31352: LD_VAR 0 1
31356: PPUSH
31357: LD_VAR 0 10
31361: PPUSH
31362: CALL_OW 115
31366: GO 31429
31368: LD_INT 2
31370: DOUBLE
31371: EQUAL
31372: IFTRUE 31376
31374: GO 31398
31376: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31377: LD_VAR 0 1
31381: PPUSH
31382: LD_VAR 0 6
31386: PPUSH
31387: LD_VAR 0 7
31391: PPUSH
31392: CALL_OW 153
31396: GO 31429
31398: LD_INT 3
31400: DOUBLE
31401: EQUAL
31402: IFTRUE 31406
31404: GO 31428
31406: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31407: LD_VAR 0 1
31411: PPUSH
31412: LD_VAR 0 6
31416: PPUSH
31417: LD_VAR 0 7
31421: PPUSH
31422: CALL_OW 154
31426: GO 31429
31428: POP
// end ;
31429: LD_VAR 0 2
31433: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31434: LD_INT 0
31436: PPUSH
31437: PPUSH
31438: PPUSH
31439: PPUSH
31440: PPUSH
31441: PPUSH
// if not unit or not building then
31442: LD_VAR 0 1
31446: NOT
31447: PUSH
31448: LD_VAR 0 2
31452: NOT
31453: OR
31454: IFFALSE 31458
// exit ;
31456: GO 31616
// x := GetX ( building ) ;
31458: LD_ADDR_VAR 0 5
31462: PUSH
31463: LD_VAR 0 2
31467: PPUSH
31468: CALL_OW 250
31472: ST_TO_ADDR
// y := GetY ( building ) ;
31473: LD_ADDR_VAR 0 6
31477: PUSH
31478: LD_VAR 0 2
31482: PPUSH
31483: CALL_OW 251
31487: ST_TO_ADDR
// for i = 0 to 5 do
31488: LD_ADDR_VAR 0 4
31492: PUSH
31493: DOUBLE
31494: LD_INT 0
31496: DEC
31497: ST_TO_ADDR
31498: LD_INT 5
31500: PUSH
31501: FOR_TO
31502: IFFALSE 31614
// begin _x := ShiftX ( x , i , 3 ) ;
31504: LD_ADDR_VAR 0 7
31508: PUSH
31509: LD_VAR 0 5
31513: PPUSH
31514: LD_VAR 0 4
31518: PPUSH
31519: LD_INT 3
31521: PPUSH
31522: CALL_OW 272
31526: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31527: LD_ADDR_VAR 0 8
31531: PUSH
31532: LD_VAR 0 6
31536: PPUSH
31537: LD_VAR 0 4
31541: PPUSH
31542: LD_INT 3
31544: PPUSH
31545: CALL_OW 273
31549: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31550: LD_VAR 0 7
31554: PPUSH
31555: LD_VAR 0 8
31559: PPUSH
31560: CALL_OW 488
31564: NOT
31565: IFFALSE 31569
// continue ;
31567: GO 31501
// if HexInfo ( _x , _y ) = 0 then
31569: LD_VAR 0 7
31573: PPUSH
31574: LD_VAR 0 8
31578: PPUSH
31579: CALL_OW 428
31583: PUSH
31584: LD_INT 0
31586: EQUAL
31587: IFFALSE 31612
// begin ComMoveXY ( unit , _x , _y ) ;
31589: LD_VAR 0 1
31593: PPUSH
31594: LD_VAR 0 7
31598: PPUSH
31599: LD_VAR 0 8
31603: PPUSH
31604: CALL_OW 111
// exit ;
31608: POP
31609: POP
31610: GO 31616
// end ; end ;
31612: GO 31501
31614: POP
31615: POP
// end ;
31616: LD_VAR 0 3
31620: RET
// export function ScanBase ( side , base_area ) ; begin
31621: LD_INT 0
31623: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31624: LD_ADDR_VAR 0 3
31628: PUSH
31629: LD_VAR 0 2
31633: PPUSH
31634: LD_INT 81
31636: PUSH
31637: LD_VAR 0 1
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PPUSH
31646: CALL_OW 70
31650: ST_TO_ADDR
// end ;
31651: LD_VAR 0 3
31655: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31656: LD_INT 0
31658: PPUSH
31659: PPUSH
31660: PPUSH
31661: PPUSH
// result := false ;
31662: LD_ADDR_VAR 0 2
31666: PUSH
31667: LD_INT 0
31669: ST_TO_ADDR
// side := GetSide ( unit ) ;
31670: LD_ADDR_VAR 0 3
31674: PUSH
31675: LD_VAR 0 1
31679: PPUSH
31680: CALL_OW 255
31684: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31685: LD_ADDR_VAR 0 4
31689: PUSH
31690: LD_VAR 0 1
31694: PPUSH
31695: CALL_OW 248
31699: ST_TO_ADDR
// case nat of 1 :
31700: LD_VAR 0 4
31704: PUSH
31705: LD_INT 1
31707: DOUBLE
31708: EQUAL
31709: IFTRUE 31713
31711: GO 31724
31713: POP
// tech := tech_lassight ; 2 :
31714: LD_ADDR_VAR 0 5
31718: PUSH
31719: LD_INT 12
31721: ST_TO_ADDR
31722: GO 31763
31724: LD_INT 2
31726: DOUBLE
31727: EQUAL
31728: IFTRUE 31732
31730: GO 31743
31732: POP
// tech := tech_mortar ; 3 :
31733: LD_ADDR_VAR 0 5
31737: PUSH
31738: LD_INT 41
31740: ST_TO_ADDR
31741: GO 31763
31743: LD_INT 3
31745: DOUBLE
31746: EQUAL
31747: IFTRUE 31751
31749: GO 31762
31751: POP
// tech := tech_bazooka ; end ;
31752: LD_ADDR_VAR 0 5
31756: PUSH
31757: LD_INT 44
31759: ST_TO_ADDR
31760: GO 31763
31762: POP
// if Researched ( side , tech ) then
31763: LD_VAR 0 3
31767: PPUSH
31768: LD_VAR 0 5
31772: PPUSH
31773: CALL_OW 325
31777: IFFALSE 31804
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31779: LD_ADDR_VAR 0 2
31783: PUSH
31784: LD_INT 5
31786: PUSH
31787: LD_INT 8
31789: PUSH
31790: LD_INT 9
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: LIST
31797: PUSH
31798: LD_VAR 0 4
31802: ARRAY
31803: ST_TO_ADDR
// end ;
31804: LD_VAR 0 2
31808: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31809: LD_INT 0
31811: PPUSH
31812: PPUSH
31813: PPUSH
// if not mines then
31814: LD_VAR 0 2
31818: NOT
31819: IFFALSE 31823
// exit ;
31821: GO 31967
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31823: LD_ADDR_VAR 0 5
31827: PUSH
31828: LD_INT 81
31830: PUSH
31831: LD_VAR 0 1
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 3
31842: PUSH
31843: LD_INT 21
31845: PUSH
31846: LD_INT 3
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PPUSH
31861: CALL_OW 69
31865: ST_TO_ADDR
// for i in mines do
31866: LD_ADDR_VAR 0 4
31870: PUSH
31871: LD_VAR 0 2
31875: PUSH
31876: FOR_IN
31877: IFFALSE 31965
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31879: LD_VAR 0 4
31883: PUSH
31884: LD_INT 1
31886: ARRAY
31887: PPUSH
31888: LD_VAR 0 4
31892: PUSH
31893: LD_INT 2
31895: ARRAY
31896: PPUSH
31897: CALL_OW 458
31901: NOT
31902: IFFALSE 31906
// continue ;
31904: GO 31876
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31906: LD_VAR 0 4
31910: PUSH
31911: LD_INT 1
31913: ARRAY
31914: PPUSH
31915: LD_VAR 0 4
31919: PUSH
31920: LD_INT 2
31922: ARRAY
31923: PPUSH
31924: CALL_OW 428
31928: PUSH
31929: LD_VAR 0 5
31933: IN
31934: IFFALSE 31963
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31936: LD_VAR 0 4
31940: PUSH
31941: LD_INT 1
31943: ARRAY
31944: PPUSH
31945: LD_VAR 0 4
31949: PUSH
31950: LD_INT 2
31952: ARRAY
31953: PPUSH
31954: LD_VAR 0 1
31958: PPUSH
31959: CALL_OW 456
// end ;
31963: GO 31876
31965: POP
31966: POP
// end ;
31967: LD_VAR 0 3
31971: RET
// export function Count ( array ) ; var i ; begin
31972: LD_INT 0
31974: PPUSH
31975: PPUSH
// result := 0 ;
31976: LD_ADDR_VAR 0 2
31980: PUSH
31981: LD_INT 0
31983: ST_TO_ADDR
// for i in array do
31984: LD_ADDR_VAR 0 3
31988: PUSH
31989: LD_VAR 0 1
31993: PUSH
31994: FOR_IN
31995: IFFALSE 32019
// if i then
31997: LD_VAR 0 3
32001: IFFALSE 32017
// result := result + 1 ;
32003: LD_ADDR_VAR 0 2
32007: PUSH
32008: LD_VAR 0 2
32012: PUSH
32013: LD_INT 1
32015: PLUS
32016: ST_TO_ADDR
32017: GO 31994
32019: POP
32020: POP
// end ;
32021: LD_VAR 0 2
32025: RET
// export function IsEmpty ( building ) ; begin
32026: LD_INT 0
32028: PPUSH
// if not building then
32029: LD_VAR 0 1
32033: NOT
32034: IFFALSE 32038
// exit ;
32036: GO 32081
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32038: LD_ADDR_VAR 0 2
32042: PUSH
32043: LD_VAR 0 1
32047: PUSH
32048: LD_INT 22
32050: PUSH
32051: LD_VAR 0 1
32055: PPUSH
32056: CALL_OW 255
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 58
32067: PUSH
32068: EMPTY
32069: LIST
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PPUSH
32075: CALL_OW 69
32079: IN
32080: ST_TO_ADDR
// end ;
32081: LD_VAR 0 2
32085: RET
// export function IsNotFull ( building ) ; begin
32086: LD_INT 0
32088: PPUSH
// if not building then
32089: LD_VAR 0 1
32093: NOT
32094: IFFALSE 32098
// exit ;
32096: GO 32117
// result := UnitsInside ( building ) < 6 ;
32098: LD_ADDR_VAR 0 2
32102: PUSH
32103: LD_VAR 0 1
32107: PPUSH
32108: CALL_OW 313
32112: PUSH
32113: LD_INT 6
32115: LESS
32116: ST_TO_ADDR
// end ;
32117: LD_VAR 0 2
32121: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32122: LD_INT 0
32124: PPUSH
32125: PPUSH
32126: PPUSH
32127: PPUSH
// tmp := [ ] ;
32128: LD_ADDR_VAR 0 3
32132: PUSH
32133: EMPTY
32134: ST_TO_ADDR
// list := [ ] ;
32135: LD_ADDR_VAR 0 5
32139: PUSH
32140: EMPTY
32141: ST_TO_ADDR
// for i = 16 to 25 do
32142: LD_ADDR_VAR 0 4
32146: PUSH
32147: DOUBLE
32148: LD_INT 16
32150: DEC
32151: ST_TO_ADDR
32152: LD_INT 25
32154: PUSH
32155: FOR_TO
32156: IFFALSE 32229
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32158: LD_ADDR_VAR 0 3
32162: PUSH
32163: LD_VAR 0 3
32167: PUSH
32168: LD_INT 22
32170: PUSH
32171: LD_VAR 0 1
32175: PPUSH
32176: CALL_OW 255
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 91
32187: PUSH
32188: LD_VAR 0 1
32192: PUSH
32193: LD_INT 6
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 30
32203: PUSH
32204: LD_VAR 0 4
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: LIST
32217: PUSH
32218: EMPTY
32219: LIST
32220: PPUSH
32221: CALL_OW 69
32225: ADD
32226: ST_TO_ADDR
32227: GO 32155
32229: POP
32230: POP
// for i = 1 to tmp do
32231: LD_ADDR_VAR 0 4
32235: PUSH
32236: DOUBLE
32237: LD_INT 1
32239: DEC
32240: ST_TO_ADDR
32241: LD_VAR 0 3
32245: PUSH
32246: FOR_TO
32247: IFFALSE 32335
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32249: LD_ADDR_VAR 0 5
32253: PUSH
32254: LD_VAR 0 5
32258: PUSH
32259: LD_VAR 0 3
32263: PUSH
32264: LD_VAR 0 4
32268: ARRAY
32269: PPUSH
32270: CALL_OW 266
32274: PUSH
32275: LD_VAR 0 3
32279: PUSH
32280: LD_VAR 0 4
32284: ARRAY
32285: PPUSH
32286: CALL_OW 250
32290: PUSH
32291: LD_VAR 0 3
32295: PUSH
32296: LD_VAR 0 4
32300: ARRAY
32301: PPUSH
32302: CALL_OW 251
32306: PUSH
32307: LD_VAR 0 3
32311: PUSH
32312: LD_VAR 0 4
32316: ARRAY
32317: PPUSH
32318: CALL_OW 254
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: PUSH
32329: EMPTY
32330: LIST
32331: ADD
32332: ST_TO_ADDR
32333: GO 32246
32335: POP
32336: POP
// result := list ;
32337: LD_ADDR_VAR 0 2
32341: PUSH
32342: LD_VAR 0 5
32346: ST_TO_ADDR
// end ;
32347: LD_VAR 0 2
32351: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32352: LD_INT 0
32354: PPUSH
32355: PPUSH
32356: PPUSH
32357: PPUSH
32358: PPUSH
32359: PPUSH
32360: PPUSH
// if not factory then
32361: LD_VAR 0 1
32365: NOT
32366: IFFALSE 32370
// exit ;
32368: GO 32963
// if control = control_apeman then
32370: LD_VAR 0 4
32374: PUSH
32375: LD_INT 5
32377: EQUAL
32378: IFFALSE 32487
// begin tmp := UnitsInside ( factory ) ;
32380: LD_ADDR_VAR 0 8
32384: PUSH
32385: LD_VAR 0 1
32389: PPUSH
32390: CALL_OW 313
32394: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32395: LD_VAR 0 8
32399: PPUSH
32400: LD_INT 25
32402: PUSH
32403: LD_INT 12
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PPUSH
32410: CALL_OW 72
32414: NOT
32415: IFFALSE 32425
// control := control_manual ;
32417: LD_ADDR_VAR 0 4
32421: PUSH
32422: LD_INT 1
32424: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32425: LD_ADDR_VAR 0 8
32429: PUSH
32430: LD_VAR 0 1
32434: PPUSH
32435: CALL 32122 0 1
32439: ST_TO_ADDR
// if tmp then
32440: LD_VAR 0 8
32444: IFFALSE 32487
// begin for i in tmp do
32446: LD_ADDR_VAR 0 7
32450: PUSH
32451: LD_VAR 0 8
32455: PUSH
32456: FOR_IN
32457: IFFALSE 32485
// if i [ 1 ] = b_ext_radio then
32459: LD_VAR 0 7
32463: PUSH
32464: LD_INT 1
32466: ARRAY
32467: PUSH
32468: LD_INT 22
32470: EQUAL
32471: IFFALSE 32483
// begin control := control_remote ;
32473: LD_ADDR_VAR 0 4
32477: PUSH
32478: LD_INT 2
32480: ST_TO_ADDR
// break ;
32481: GO 32485
// end ;
32483: GO 32456
32485: POP
32486: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32487: LD_VAR 0 1
32491: PPUSH
32492: LD_VAR 0 2
32496: PPUSH
32497: LD_VAR 0 3
32501: PPUSH
32502: LD_VAR 0 4
32506: PPUSH
32507: LD_VAR 0 5
32511: PPUSH
32512: CALL_OW 448
32516: IFFALSE 32551
// begin result := [ chassis , engine , control , weapon ] ;
32518: LD_ADDR_VAR 0 6
32522: PUSH
32523: LD_VAR 0 2
32527: PUSH
32528: LD_VAR 0 3
32532: PUSH
32533: LD_VAR 0 4
32537: PUSH
32538: LD_VAR 0 5
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: ST_TO_ADDR
// exit ;
32549: GO 32963
// end ; _chassis := AvailableChassisList ( factory ) ;
32551: LD_ADDR_VAR 0 9
32555: PUSH
32556: LD_VAR 0 1
32560: PPUSH
32561: CALL_OW 475
32565: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32566: LD_ADDR_VAR 0 11
32570: PUSH
32571: LD_VAR 0 1
32575: PPUSH
32576: CALL_OW 476
32580: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32581: LD_ADDR_VAR 0 12
32585: PUSH
32586: LD_VAR 0 1
32590: PPUSH
32591: CALL_OW 477
32595: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32596: LD_ADDR_VAR 0 10
32600: PUSH
32601: LD_VAR 0 1
32605: PPUSH
32606: CALL_OW 478
32610: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32611: LD_VAR 0 9
32615: NOT
32616: PUSH
32617: LD_VAR 0 11
32621: NOT
32622: OR
32623: PUSH
32624: LD_VAR 0 12
32628: NOT
32629: OR
32630: PUSH
32631: LD_VAR 0 10
32635: NOT
32636: OR
32637: IFFALSE 32672
// begin result := [ chassis , engine , control , weapon ] ;
32639: LD_ADDR_VAR 0 6
32643: PUSH
32644: LD_VAR 0 2
32648: PUSH
32649: LD_VAR 0 3
32653: PUSH
32654: LD_VAR 0 4
32658: PUSH
32659: LD_VAR 0 5
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: ST_TO_ADDR
// exit ;
32670: GO 32963
// end ; if not chassis in _chassis then
32672: LD_VAR 0 2
32676: PUSH
32677: LD_VAR 0 9
32681: IN
32682: NOT
32683: IFFALSE 32709
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32685: LD_ADDR_VAR 0 2
32689: PUSH
32690: LD_VAR 0 9
32694: PUSH
32695: LD_INT 1
32697: PPUSH
32698: LD_VAR 0 9
32702: PPUSH
32703: CALL_OW 12
32707: ARRAY
32708: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32709: LD_VAR 0 2
32713: PPUSH
32714: LD_VAR 0 3
32718: PPUSH
32719: CALL 32968 0 2
32723: NOT
32724: IFFALSE 32783
// repeat engine := _engine [ 1 ] ;
32726: LD_ADDR_VAR 0 3
32730: PUSH
32731: LD_VAR 0 11
32735: PUSH
32736: LD_INT 1
32738: ARRAY
32739: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32740: LD_ADDR_VAR 0 11
32744: PUSH
32745: LD_VAR 0 11
32749: PPUSH
32750: LD_INT 1
32752: PPUSH
32753: CALL_OW 3
32757: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32758: LD_VAR 0 2
32762: PPUSH
32763: LD_VAR 0 3
32767: PPUSH
32768: CALL 32968 0 2
32772: PUSH
32773: LD_VAR 0 11
32777: PUSH
32778: EMPTY
32779: EQUAL
32780: OR
32781: IFFALSE 32726
// if not control in _control then
32783: LD_VAR 0 4
32787: PUSH
32788: LD_VAR 0 12
32792: IN
32793: NOT
32794: IFFALSE 32820
// control := _control [ rand ( 1 , _control ) ] ;
32796: LD_ADDR_VAR 0 4
32800: PUSH
32801: LD_VAR 0 12
32805: PUSH
32806: LD_INT 1
32808: PPUSH
32809: LD_VAR 0 12
32813: PPUSH
32814: CALL_OW 12
32818: ARRAY
32819: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32820: LD_VAR 0 2
32824: PPUSH
32825: LD_VAR 0 5
32829: PPUSH
32830: CALL 33188 0 2
32834: NOT
32835: IFFALSE 32894
// repeat weapon := _weapon [ 1 ] ;
32837: LD_ADDR_VAR 0 5
32841: PUSH
32842: LD_VAR 0 10
32846: PUSH
32847: LD_INT 1
32849: ARRAY
32850: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32851: LD_ADDR_VAR 0 10
32855: PUSH
32856: LD_VAR 0 10
32860: PPUSH
32861: LD_INT 1
32863: PPUSH
32864: CALL_OW 3
32868: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32869: LD_VAR 0 2
32873: PPUSH
32874: LD_VAR 0 5
32878: PPUSH
32879: CALL 33188 0 2
32883: PUSH
32884: LD_VAR 0 10
32888: PUSH
32889: EMPTY
32890: EQUAL
32891: OR
32892: IFFALSE 32837
// result := [ ] ;
32894: LD_ADDR_VAR 0 6
32898: PUSH
32899: EMPTY
32900: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32901: LD_VAR 0 1
32905: PPUSH
32906: LD_VAR 0 2
32910: PPUSH
32911: LD_VAR 0 3
32915: PPUSH
32916: LD_VAR 0 4
32920: PPUSH
32921: LD_VAR 0 5
32925: PPUSH
32926: CALL_OW 448
32930: IFFALSE 32963
// result := [ chassis , engine , control , weapon ] ;
32932: LD_ADDR_VAR 0 6
32936: PUSH
32937: LD_VAR 0 2
32941: PUSH
32942: LD_VAR 0 3
32946: PUSH
32947: LD_VAR 0 4
32951: PUSH
32952: LD_VAR 0 5
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: ST_TO_ADDR
// end ;
32963: LD_VAR 0 6
32967: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32968: LD_INT 0
32970: PPUSH
// if not chassis or not engine then
32971: LD_VAR 0 1
32975: NOT
32976: PUSH
32977: LD_VAR 0 2
32981: NOT
32982: OR
32983: IFFALSE 32987
// exit ;
32985: GO 33183
// case engine of engine_solar :
32987: LD_VAR 0 2
32991: PUSH
32992: LD_INT 2
32994: DOUBLE
32995: EQUAL
32996: IFTRUE 33000
32998: GO 33038
33000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33001: LD_ADDR_VAR 0 3
33005: PUSH
33006: LD_INT 11
33008: PUSH
33009: LD_INT 12
33011: PUSH
33012: LD_INT 13
33014: PUSH
33015: LD_INT 14
33017: PUSH
33018: LD_INT 1
33020: PUSH
33021: LD_INT 2
33023: PUSH
33024: LD_INT 3
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: ST_TO_ADDR
33036: GO 33167
33038: LD_INT 1
33040: DOUBLE
33041: EQUAL
33042: IFTRUE 33046
33044: GO 33108
33046: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33047: LD_ADDR_VAR 0 3
33051: PUSH
33052: LD_INT 11
33054: PUSH
33055: LD_INT 12
33057: PUSH
33058: LD_INT 13
33060: PUSH
33061: LD_INT 14
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: LD_INT 2
33069: PUSH
33070: LD_INT 3
33072: PUSH
33073: LD_INT 4
33075: PUSH
33076: LD_INT 5
33078: PUSH
33079: LD_INT 21
33081: PUSH
33082: LD_INT 23
33084: PUSH
33085: LD_INT 22
33087: PUSH
33088: LD_INT 24
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: ST_TO_ADDR
33106: GO 33167
33108: LD_INT 3
33110: DOUBLE
33111: EQUAL
33112: IFTRUE 33116
33114: GO 33166
33116: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33117: LD_ADDR_VAR 0 3
33121: PUSH
33122: LD_INT 13
33124: PUSH
33125: LD_INT 14
33127: PUSH
33128: LD_INT 2
33130: PUSH
33131: LD_INT 3
33133: PUSH
33134: LD_INT 4
33136: PUSH
33137: LD_INT 5
33139: PUSH
33140: LD_INT 21
33142: PUSH
33143: LD_INT 22
33145: PUSH
33146: LD_INT 23
33148: PUSH
33149: LD_INT 24
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: ST_TO_ADDR
33164: GO 33167
33166: POP
// result := ( chassis in result ) ;
33167: LD_ADDR_VAR 0 3
33171: PUSH
33172: LD_VAR 0 1
33176: PUSH
33177: LD_VAR 0 3
33181: IN
33182: ST_TO_ADDR
// end ;
33183: LD_VAR 0 3
33187: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33188: LD_INT 0
33190: PPUSH
// if not chassis or not weapon then
33191: LD_VAR 0 1
33195: NOT
33196: PUSH
33197: LD_VAR 0 2
33201: NOT
33202: OR
33203: IFFALSE 33207
// exit ;
33205: GO 34269
// case weapon of us_machine_gun :
33207: LD_VAR 0 2
33211: PUSH
33212: LD_INT 2
33214: DOUBLE
33215: EQUAL
33216: IFTRUE 33220
33218: GO 33250
33220: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33221: LD_ADDR_VAR 0 3
33225: PUSH
33226: LD_INT 1
33228: PUSH
33229: LD_INT 2
33231: PUSH
33232: LD_INT 3
33234: PUSH
33235: LD_INT 4
33237: PUSH
33238: LD_INT 5
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: ST_TO_ADDR
33248: GO 34253
33250: LD_INT 3
33252: DOUBLE
33253: EQUAL
33254: IFTRUE 33258
33256: GO 33288
33258: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33259: LD_ADDR_VAR 0 3
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: LD_INT 2
33269: PUSH
33270: LD_INT 3
33272: PUSH
33273: LD_INT 4
33275: PUSH
33276: LD_INT 5
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: ST_TO_ADDR
33286: GO 34253
33288: LD_INT 11
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33296
33294: GO 33326
33296: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33297: LD_ADDR_VAR 0 3
33301: PUSH
33302: LD_INT 1
33304: PUSH
33305: LD_INT 2
33307: PUSH
33308: LD_INT 3
33310: PUSH
33311: LD_INT 4
33313: PUSH
33314: LD_INT 5
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: ST_TO_ADDR
33324: GO 34253
33326: LD_INT 4
33328: DOUBLE
33329: EQUAL
33330: IFTRUE 33334
33332: GO 33360
33334: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33335: LD_ADDR_VAR 0 3
33339: PUSH
33340: LD_INT 2
33342: PUSH
33343: LD_INT 3
33345: PUSH
33346: LD_INT 4
33348: PUSH
33349: LD_INT 5
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: ST_TO_ADDR
33358: GO 34253
33360: LD_INT 5
33362: DOUBLE
33363: EQUAL
33364: IFTRUE 33368
33366: GO 33394
33368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33369: LD_ADDR_VAR 0 3
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: LD_INT 3
33379: PUSH
33380: LD_INT 4
33382: PUSH
33383: LD_INT 5
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: ST_TO_ADDR
33392: GO 34253
33394: LD_INT 9
33396: DOUBLE
33397: EQUAL
33398: IFTRUE 33402
33400: GO 33428
33402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33403: LD_ADDR_VAR 0 3
33407: PUSH
33408: LD_INT 2
33410: PUSH
33411: LD_INT 3
33413: PUSH
33414: LD_INT 4
33416: PUSH
33417: LD_INT 5
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: ST_TO_ADDR
33426: GO 34253
33428: LD_INT 7
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33436
33434: GO 33462
33436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33437: LD_ADDR_VAR 0 3
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: LD_INT 3
33447: PUSH
33448: LD_INT 4
33450: PUSH
33451: LD_INT 5
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: ST_TO_ADDR
33460: GO 34253
33462: LD_INT 12
33464: DOUBLE
33465: EQUAL
33466: IFTRUE 33470
33468: GO 33496
33470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33471: LD_ADDR_VAR 0 3
33475: PUSH
33476: LD_INT 2
33478: PUSH
33479: LD_INT 3
33481: PUSH
33482: LD_INT 4
33484: PUSH
33485: LD_INT 5
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: ST_TO_ADDR
33494: GO 34253
33496: LD_INT 13
33498: DOUBLE
33499: EQUAL
33500: IFTRUE 33504
33502: GO 33530
33504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33505: LD_ADDR_VAR 0 3
33509: PUSH
33510: LD_INT 2
33512: PUSH
33513: LD_INT 3
33515: PUSH
33516: LD_INT 4
33518: PUSH
33519: LD_INT 5
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: ST_TO_ADDR
33528: GO 34253
33530: LD_INT 14
33532: DOUBLE
33533: EQUAL
33534: IFTRUE 33538
33536: GO 33556
33538: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33539: LD_ADDR_VAR 0 3
33543: PUSH
33544: LD_INT 4
33546: PUSH
33547: LD_INT 5
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: ST_TO_ADDR
33554: GO 34253
33556: LD_INT 6
33558: DOUBLE
33559: EQUAL
33560: IFTRUE 33564
33562: GO 33582
33564: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33565: LD_ADDR_VAR 0 3
33569: PUSH
33570: LD_INT 4
33572: PUSH
33573: LD_INT 5
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: ST_TO_ADDR
33580: GO 34253
33582: LD_INT 10
33584: DOUBLE
33585: EQUAL
33586: IFTRUE 33590
33588: GO 33608
33590: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33591: LD_ADDR_VAR 0 3
33595: PUSH
33596: LD_INT 4
33598: PUSH
33599: LD_INT 5
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: ST_TO_ADDR
33606: GO 34253
33608: LD_INT 22
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33616
33614: GO 33642
33616: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33617: LD_ADDR_VAR 0 3
33621: PUSH
33622: LD_INT 11
33624: PUSH
33625: LD_INT 12
33627: PUSH
33628: LD_INT 13
33630: PUSH
33631: LD_INT 14
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: ST_TO_ADDR
33640: GO 34253
33642: LD_INT 23
33644: DOUBLE
33645: EQUAL
33646: IFTRUE 33650
33648: GO 33676
33650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33651: LD_ADDR_VAR 0 3
33655: PUSH
33656: LD_INT 11
33658: PUSH
33659: LD_INT 12
33661: PUSH
33662: LD_INT 13
33664: PUSH
33665: LD_INT 14
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: ST_TO_ADDR
33674: GO 34253
33676: LD_INT 24
33678: DOUBLE
33679: EQUAL
33680: IFTRUE 33684
33682: GO 33710
33684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33685: LD_ADDR_VAR 0 3
33689: PUSH
33690: LD_INT 11
33692: PUSH
33693: LD_INT 12
33695: PUSH
33696: LD_INT 13
33698: PUSH
33699: LD_INT 14
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: ST_TO_ADDR
33708: GO 34253
33710: LD_INT 30
33712: DOUBLE
33713: EQUAL
33714: IFTRUE 33718
33716: GO 33744
33718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: LD_INT 11
33726: PUSH
33727: LD_INT 12
33729: PUSH
33730: LD_INT 13
33732: PUSH
33733: LD_INT 14
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: ST_TO_ADDR
33742: GO 34253
33744: LD_INT 25
33746: DOUBLE
33747: EQUAL
33748: IFTRUE 33752
33750: GO 33770
33752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33753: LD_ADDR_VAR 0 3
33757: PUSH
33758: LD_INT 13
33760: PUSH
33761: LD_INT 14
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: ST_TO_ADDR
33768: GO 34253
33770: LD_INT 27
33772: DOUBLE
33773: EQUAL
33774: IFTRUE 33778
33776: GO 33796
33778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33779: LD_ADDR_VAR 0 3
33783: PUSH
33784: LD_INT 13
33786: PUSH
33787: LD_INT 14
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: ST_TO_ADDR
33794: GO 34253
33796: LD_EXP 24
33800: DOUBLE
33801: EQUAL
33802: IFTRUE 33806
33804: GO 33832
33806: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33807: LD_ADDR_VAR 0 3
33811: PUSH
33812: LD_INT 11
33814: PUSH
33815: LD_INT 12
33817: PUSH
33818: LD_INT 13
33820: PUSH
33821: LD_INT 14
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: ST_TO_ADDR
33830: GO 34253
33832: LD_INT 28
33834: DOUBLE
33835: EQUAL
33836: IFTRUE 33840
33838: GO 33858
33840: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33841: LD_ADDR_VAR 0 3
33845: PUSH
33846: LD_INT 13
33848: PUSH
33849: LD_INT 14
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: ST_TO_ADDR
33856: GO 34253
33858: LD_INT 29
33860: DOUBLE
33861: EQUAL
33862: IFTRUE 33866
33864: GO 33884
33866: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33867: LD_ADDR_VAR 0 3
33871: PUSH
33872: LD_INT 13
33874: PUSH
33875: LD_INT 14
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: ST_TO_ADDR
33882: GO 34253
33884: LD_INT 31
33886: DOUBLE
33887: EQUAL
33888: IFTRUE 33892
33890: GO 33910
33892: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33893: LD_ADDR_VAR 0 3
33897: PUSH
33898: LD_INT 13
33900: PUSH
33901: LD_INT 14
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: ST_TO_ADDR
33908: GO 34253
33910: LD_INT 26
33912: DOUBLE
33913: EQUAL
33914: IFTRUE 33918
33916: GO 33936
33918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33919: LD_ADDR_VAR 0 3
33923: PUSH
33924: LD_INT 13
33926: PUSH
33927: LD_INT 14
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: ST_TO_ADDR
33934: GO 34253
33936: LD_INT 42
33938: DOUBLE
33939: EQUAL
33940: IFTRUE 33944
33942: GO 33970
33944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33945: LD_ADDR_VAR 0 3
33949: PUSH
33950: LD_INT 21
33952: PUSH
33953: LD_INT 22
33955: PUSH
33956: LD_INT 23
33958: PUSH
33959: LD_INT 24
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: ST_TO_ADDR
33968: GO 34253
33970: LD_INT 43
33972: DOUBLE
33973: EQUAL
33974: IFTRUE 33978
33976: GO 34004
33978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33979: LD_ADDR_VAR 0 3
33983: PUSH
33984: LD_INT 21
33986: PUSH
33987: LD_INT 22
33989: PUSH
33990: LD_INT 23
33992: PUSH
33993: LD_INT 24
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: ST_TO_ADDR
34002: GO 34253
34004: LD_INT 44
34006: DOUBLE
34007: EQUAL
34008: IFTRUE 34012
34010: GO 34038
34012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34013: LD_ADDR_VAR 0 3
34017: PUSH
34018: LD_INT 21
34020: PUSH
34021: LD_INT 22
34023: PUSH
34024: LD_INT 23
34026: PUSH
34027: LD_INT 24
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: ST_TO_ADDR
34036: GO 34253
34038: LD_INT 45
34040: DOUBLE
34041: EQUAL
34042: IFTRUE 34046
34044: GO 34072
34046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34047: LD_ADDR_VAR 0 3
34051: PUSH
34052: LD_INT 21
34054: PUSH
34055: LD_INT 22
34057: PUSH
34058: LD_INT 23
34060: PUSH
34061: LD_INT 24
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: ST_TO_ADDR
34070: GO 34253
34072: LD_INT 49
34074: DOUBLE
34075: EQUAL
34076: IFTRUE 34080
34078: GO 34106
34080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34081: LD_ADDR_VAR 0 3
34085: PUSH
34086: LD_INT 21
34088: PUSH
34089: LD_INT 22
34091: PUSH
34092: LD_INT 23
34094: PUSH
34095: LD_INT 24
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: ST_TO_ADDR
34104: GO 34253
34106: LD_INT 51
34108: DOUBLE
34109: EQUAL
34110: IFTRUE 34114
34112: GO 34140
34114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34115: LD_ADDR_VAR 0 3
34119: PUSH
34120: LD_INT 21
34122: PUSH
34123: LD_INT 22
34125: PUSH
34126: LD_INT 23
34128: PUSH
34129: LD_INT 24
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: ST_TO_ADDR
34138: GO 34253
34140: LD_INT 52
34142: DOUBLE
34143: EQUAL
34144: IFTRUE 34148
34146: GO 34174
34148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34149: LD_ADDR_VAR 0 3
34153: PUSH
34154: LD_INT 21
34156: PUSH
34157: LD_INT 22
34159: PUSH
34160: LD_INT 23
34162: PUSH
34163: LD_INT 24
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: ST_TO_ADDR
34172: GO 34253
34174: LD_INT 53
34176: DOUBLE
34177: EQUAL
34178: IFTRUE 34182
34180: GO 34200
34182: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34183: LD_ADDR_VAR 0 3
34187: PUSH
34188: LD_INT 23
34190: PUSH
34191: LD_INT 24
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: ST_TO_ADDR
34198: GO 34253
34200: LD_INT 46
34202: DOUBLE
34203: EQUAL
34204: IFTRUE 34208
34206: GO 34226
34208: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34209: LD_ADDR_VAR 0 3
34213: PUSH
34214: LD_INT 23
34216: PUSH
34217: LD_INT 24
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: ST_TO_ADDR
34224: GO 34253
34226: LD_INT 47
34228: DOUBLE
34229: EQUAL
34230: IFTRUE 34234
34232: GO 34252
34234: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34235: LD_ADDR_VAR 0 3
34239: PUSH
34240: LD_INT 23
34242: PUSH
34243: LD_INT 24
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: ST_TO_ADDR
34250: GO 34253
34252: POP
// result := ( chassis in result ) ;
34253: LD_ADDR_VAR 0 3
34257: PUSH
34258: LD_VAR 0 1
34262: PUSH
34263: LD_VAR 0 3
34267: IN
34268: ST_TO_ADDR
// end ;
34269: LD_VAR 0 3
34273: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34274: LD_INT 0
34276: PPUSH
34277: PPUSH
34278: PPUSH
34279: PPUSH
34280: PPUSH
34281: PPUSH
34282: PPUSH
// result := array ;
34283: LD_ADDR_VAR 0 5
34287: PUSH
34288: LD_VAR 0 1
34292: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34293: LD_VAR 0 1
34297: NOT
34298: PUSH
34299: LD_VAR 0 2
34303: NOT
34304: OR
34305: PUSH
34306: LD_VAR 0 3
34310: NOT
34311: OR
34312: PUSH
34313: LD_VAR 0 2
34317: PUSH
34318: LD_VAR 0 1
34322: GREATER
34323: OR
34324: PUSH
34325: LD_VAR 0 3
34329: PUSH
34330: LD_VAR 0 1
34334: GREATER
34335: OR
34336: IFFALSE 34340
// exit ;
34338: GO 34636
// if direction then
34340: LD_VAR 0 4
34344: IFFALSE 34408
// begin d := 1 ;
34346: LD_ADDR_VAR 0 9
34350: PUSH
34351: LD_INT 1
34353: ST_TO_ADDR
// if i_from > i_to then
34354: LD_VAR 0 2
34358: PUSH
34359: LD_VAR 0 3
34363: GREATER
34364: IFFALSE 34390
// length := ( array - i_from ) + i_to else
34366: LD_ADDR_VAR 0 11
34370: PUSH
34371: LD_VAR 0 1
34375: PUSH
34376: LD_VAR 0 2
34380: MINUS
34381: PUSH
34382: LD_VAR 0 3
34386: PLUS
34387: ST_TO_ADDR
34388: GO 34406
// length := i_to - i_from ;
34390: LD_ADDR_VAR 0 11
34394: PUSH
34395: LD_VAR 0 3
34399: PUSH
34400: LD_VAR 0 2
34404: MINUS
34405: ST_TO_ADDR
// end else
34406: GO 34469
// begin d := - 1 ;
34408: LD_ADDR_VAR 0 9
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: ST_TO_ADDR
// if i_from > i_to then
34417: LD_VAR 0 2
34421: PUSH
34422: LD_VAR 0 3
34426: GREATER
34427: IFFALSE 34447
// length := i_from - i_to else
34429: LD_ADDR_VAR 0 11
34433: PUSH
34434: LD_VAR 0 2
34438: PUSH
34439: LD_VAR 0 3
34443: MINUS
34444: ST_TO_ADDR
34445: GO 34469
// length := ( array - i_to ) + i_from ;
34447: LD_ADDR_VAR 0 11
34451: PUSH
34452: LD_VAR 0 1
34456: PUSH
34457: LD_VAR 0 3
34461: MINUS
34462: PUSH
34463: LD_VAR 0 2
34467: PLUS
34468: ST_TO_ADDR
// end ; if not length then
34469: LD_VAR 0 11
34473: NOT
34474: IFFALSE 34478
// exit ;
34476: GO 34636
// tmp := array ;
34478: LD_ADDR_VAR 0 10
34482: PUSH
34483: LD_VAR 0 1
34487: ST_TO_ADDR
// for i = 1 to length do
34488: LD_ADDR_VAR 0 6
34492: PUSH
34493: DOUBLE
34494: LD_INT 1
34496: DEC
34497: ST_TO_ADDR
34498: LD_VAR 0 11
34502: PUSH
34503: FOR_TO
34504: IFFALSE 34624
// begin for j = 1 to array do
34506: LD_ADDR_VAR 0 7
34510: PUSH
34511: DOUBLE
34512: LD_INT 1
34514: DEC
34515: ST_TO_ADDR
34516: LD_VAR 0 1
34520: PUSH
34521: FOR_TO
34522: IFFALSE 34610
// begin k := j + d ;
34524: LD_ADDR_VAR 0 8
34528: PUSH
34529: LD_VAR 0 7
34533: PUSH
34534: LD_VAR 0 9
34538: PLUS
34539: ST_TO_ADDR
// if k > array then
34540: LD_VAR 0 8
34544: PUSH
34545: LD_VAR 0 1
34549: GREATER
34550: IFFALSE 34560
// k := 1 ;
34552: LD_ADDR_VAR 0 8
34556: PUSH
34557: LD_INT 1
34559: ST_TO_ADDR
// if not k then
34560: LD_VAR 0 8
34564: NOT
34565: IFFALSE 34577
// k := array ;
34567: LD_ADDR_VAR 0 8
34571: PUSH
34572: LD_VAR 0 1
34576: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34577: LD_ADDR_VAR 0 10
34581: PUSH
34582: LD_VAR 0 10
34586: PPUSH
34587: LD_VAR 0 8
34591: PPUSH
34592: LD_VAR 0 1
34596: PUSH
34597: LD_VAR 0 7
34601: ARRAY
34602: PPUSH
34603: CALL_OW 1
34607: ST_TO_ADDR
// end ;
34608: GO 34521
34610: POP
34611: POP
// array := tmp ;
34612: LD_ADDR_VAR 0 1
34616: PUSH
34617: LD_VAR 0 10
34621: ST_TO_ADDR
// end ;
34622: GO 34503
34624: POP
34625: POP
// result := array ;
34626: LD_ADDR_VAR 0 5
34630: PUSH
34631: LD_VAR 0 1
34635: ST_TO_ADDR
// end ;
34636: LD_VAR 0 5
34640: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34641: LD_INT 0
34643: PPUSH
34644: PPUSH
// result := 0 ;
34645: LD_ADDR_VAR 0 3
34649: PUSH
34650: LD_INT 0
34652: ST_TO_ADDR
// if not array or not value in array then
34653: LD_VAR 0 1
34657: NOT
34658: PUSH
34659: LD_VAR 0 2
34663: PUSH
34664: LD_VAR 0 1
34668: IN
34669: NOT
34670: OR
34671: IFFALSE 34675
// exit ;
34673: GO 34729
// for i = 1 to array do
34675: LD_ADDR_VAR 0 4
34679: PUSH
34680: DOUBLE
34681: LD_INT 1
34683: DEC
34684: ST_TO_ADDR
34685: LD_VAR 0 1
34689: PUSH
34690: FOR_TO
34691: IFFALSE 34727
// if value = array [ i ] then
34693: LD_VAR 0 2
34697: PUSH
34698: LD_VAR 0 1
34702: PUSH
34703: LD_VAR 0 4
34707: ARRAY
34708: EQUAL
34709: IFFALSE 34725
// begin result := i ;
34711: LD_ADDR_VAR 0 3
34715: PUSH
34716: LD_VAR 0 4
34720: ST_TO_ADDR
// exit ;
34721: POP
34722: POP
34723: GO 34729
// end ;
34725: GO 34690
34727: POP
34728: POP
// end ;
34729: LD_VAR 0 3
34733: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34734: LD_INT 0
34736: PPUSH
// vc_chassis := chassis ;
34737: LD_ADDR_OWVAR 37
34741: PUSH
34742: LD_VAR 0 1
34746: ST_TO_ADDR
// vc_engine := engine ;
34747: LD_ADDR_OWVAR 39
34751: PUSH
34752: LD_VAR 0 2
34756: ST_TO_ADDR
// vc_control := control ;
34757: LD_ADDR_OWVAR 38
34761: PUSH
34762: LD_VAR 0 3
34766: ST_TO_ADDR
// vc_weapon := weapon ;
34767: LD_ADDR_OWVAR 40
34771: PUSH
34772: LD_VAR 0 4
34776: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34777: LD_ADDR_OWVAR 41
34781: PUSH
34782: LD_VAR 0 5
34786: ST_TO_ADDR
// end ;
34787: LD_VAR 0 6
34791: RET
// export function WantPlant ( unit ) ; var task ; begin
34792: LD_INT 0
34794: PPUSH
34795: PPUSH
// result := false ;
34796: LD_ADDR_VAR 0 2
34800: PUSH
34801: LD_INT 0
34803: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34804: LD_ADDR_VAR 0 3
34808: PUSH
34809: LD_VAR 0 1
34813: PPUSH
34814: CALL_OW 437
34818: ST_TO_ADDR
// if task then
34819: LD_VAR 0 3
34823: IFFALSE 34851
// if task [ 1 ] [ 1 ] = p then
34825: LD_VAR 0 3
34829: PUSH
34830: LD_INT 1
34832: ARRAY
34833: PUSH
34834: LD_INT 1
34836: ARRAY
34837: PUSH
34838: LD_STRING p
34840: EQUAL
34841: IFFALSE 34851
// result := true ;
34843: LD_ADDR_VAR 0 2
34847: PUSH
34848: LD_INT 1
34850: ST_TO_ADDR
// end ;
34851: LD_VAR 0 2
34855: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34856: LD_INT 0
34858: PPUSH
34859: PPUSH
34860: PPUSH
34861: PPUSH
// if pos < 1 then
34862: LD_VAR 0 2
34866: PUSH
34867: LD_INT 1
34869: LESS
34870: IFFALSE 34874
// exit ;
34872: GO 35177
// if pos = 1 then
34874: LD_VAR 0 2
34878: PUSH
34879: LD_INT 1
34881: EQUAL
34882: IFFALSE 34915
// result := Replace ( arr , pos [ 1 ] , value ) else
34884: LD_ADDR_VAR 0 4
34888: PUSH
34889: LD_VAR 0 1
34893: PPUSH
34894: LD_VAR 0 2
34898: PUSH
34899: LD_INT 1
34901: ARRAY
34902: PPUSH
34903: LD_VAR 0 3
34907: PPUSH
34908: CALL_OW 1
34912: ST_TO_ADDR
34913: GO 35177
// begin tmp := arr ;
34915: LD_ADDR_VAR 0 6
34919: PUSH
34920: LD_VAR 0 1
34924: ST_TO_ADDR
// s_arr := [ tmp ] ;
34925: LD_ADDR_VAR 0 7
34929: PUSH
34930: LD_VAR 0 6
34934: PUSH
34935: EMPTY
34936: LIST
34937: ST_TO_ADDR
// for i = 1 to pos - 1 do
34938: LD_ADDR_VAR 0 5
34942: PUSH
34943: DOUBLE
34944: LD_INT 1
34946: DEC
34947: ST_TO_ADDR
34948: LD_VAR 0 2
34952: PUSH
34953: LD_INT 1
34955: MINUS
34956: PUSH
34957: FOR_TO
34958: IFFALSE 35003
// begin tmp := tmp [ pos [ i ] ] ;
34960: LD_ADDR_VAR 0 6
34964: PUSH
34965: LD_VAR 0 6
34969: PUSH
34970: LD_VAR 0 2
34974: PUSH
34975: LD_VAR 0 5
34979: ARRAY
34980: ARRAY
34981: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34982: LD_ADDR_VAR 0 7
34986: PUSH
34987: LD_VAR 0 7
34991: PUSH
34992: LD_VAR 0 6
34996: PUSH
34997: EMPTY
34998: LIST
34999: ADD
35000: ST_TO_ADDR
// end ;
35001: GO 34957
35003: POP
35004: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35005: LD_ADDR_VAR 0 6
35009: PUSH
35010: LD_VAR 0 6
35014: PPUSH
35015: LD_VAR 0 2
35019: PUSH
35020: LD_VAR 0 2
35024: ARRAY
35025: PPUSH
35026: LD_VAR 0 3
35030: PPUSH
35031: CALL_OW 1
35035: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35036: LD_ADDR_VAR 0 7
35040: PUSH
35041: LD_VAR 0 7
35045: PPUSH
35046: LD_VAR 0 7
35050: PPUSH
35051: LD_VAR 0 6
35055: PPUSH
35056: CALL_OW 1
35060: ST_TO_ADDR
// for i = s_arr downto 2 do
35061: LD_ADDR_VAR 0 5
35065: PUSH
35066: DOUBLE
35067: LD_VAR 0 7
35071: INC
35072: ST_TO_ADDR
35073: LD_INT 2
35075: PUSH
35076: FOR_DOWNTO
35077: IFFALSE 35161
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35079: LD_ADDR_VAR 0 6
35083: PUSH
35084: LD_VAR 0 7
35088: PUSH
35089: LD_VAR 0 5
35093: PUSH
35094: LD_INT 1
35096: MINUS
35097: ARRAY
35098: PPUSH
35099: LD_VAR 0 2
35103: PUSH
35104: LD_VAR 0 5
35108: PUSH
35109: LD_INT 1
35111: MINUS
35112: ARRAY
35113: PPUSH
35114: LD_VAR 0 7
35118: PUSH
35119: LD_VAR 0 5
35123: ARRAY
35124: PPUSH
35125: CALL_OW 1
35129: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35130: LD_ADDR_VAR 0 7
35134: PUSH
35135: LD_VAR 0 7
35139: PPUSH
35140: LD_VAR 0 5
35144: PUSH
35145: LD_INT 1
35147: MINUS
35148: PPUSH
35149: LD_VAR 0 6
35153: PPUSH
35154: CALL_OW 1
35158: ST_TO_ADDR
// end ;
35159: GO 35076
35161: POP
35162: POP
// result := s_arr [ 1 ] ;
35163: LD_ADDR_VAR 0 4
35167: PUSH
35168: LD_VAR 0 7
35172: PUSH
35173: LD_INT 1
35175: ARRAY
35176: ST_TO_ADDR
// end ; end ;
35177: LD_VAR 0 4
35181: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35182: LD_INT 0
35184: PPUSH
35185: PPUSH
// if not list then
35186: LD_VAR 0 1
35190: NOT
35191: IFFALSE 35195
// exit ;
35193: GO 35286
// i := list [ pos1 ] ;
35195: LD_ADDR_VAR 0 5
35199: PUSH
35200: LD_VAR 0 1
35204: PUSH
35205: LD_VAR 0 2
35209: ARRAY
35210: ST_TO_ADDR
// if not i then
35211: LD_VAR 0 5
35215: NOT
35216: IFFALSE 35220
// exit ;
35218: GO 35286
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35220: LD_ADDR_VAR 0 1
35224: PUSH
35225: LD_VAR 0 1
35229: PPUSH
35230: LD_VAR 0 2
35234: PPUSH
35235: LD_VAR 0 1
35239: PUSH
35240: LD_VAR 0 3
35244: ARRAY
35245: PPUSH
35246: CALL_OW 1
35250: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35251: LD_ADDR_VAR 0 1
35255: PUSH
35256: LD_VAR 0 1
35260: PPUSH
35261: LD_VAR 0 3
35265: PPUSH
35266: LD_VAR 0 5
35270: PPUSH
35271: CALL_OW 1
35275: ST_TO_ADDR
// result := list ;
35276: LD_ADDR_VAR 0 4
35280: PUSH
35281: LD_VAR 0 1
35285: ST_TO_ADDR
// end ;
35286: LD_VAR 0 4
35290: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35291: LD_INT 0
35293: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35294: LD_ADDR_VAR 0 5
35298: PUSH
35299: LD_VAR 0 1
35303: PPUSH
35304: CALL_OW 250
35308: PPUSH
35309: LD_VAR 0 1
35313: PPUSH
35314: CALL_OW 251
35318: PPUSH
35319: LD_VAR 0 2
35323: PPUSH
35324: LD_VAR 0 3
35328: PPUSH
35329: LD_VAR 0 4
35333: PPUSH
35334: CALL 35344 0 5
35338: ST_TO_ADDR
// end ;
35339: LD_VAR 0 5
35343: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35344: LD_INT 0
35346: PPUSH
35347: PPUSH
35348: PPUSH
35349: PPUSH
// if not list then
35350: LD_VAR 0 3
35354: NOT
35355: IFFALSE 35359
// exit ;
35357: GO 35747
// result := [ ] ;
35359: LD_ADDR_VAR 0 6
35363: PUSH
35364: EMPTY
35365: ST_TO_ADDR
// for i in list do
35366: LD_ADDR_VAR 0 7
35370: PUSH
35371: LD_VAR 0 3
35375: PUSH
35376: FOR_IN
35377: IFFALSE 35579
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35379: LD_ADDR_VAR 0 9
35383: PUSH
35384: LD_VAR 0 7
35388: PPUSH
35389: LD_VAR 0 1
35393: PPUSH
35394: LD_VAR 0 2
35398: PPUSH
35399: CALL_OW 297
35403: ST_TO_ADDR
// if not result then
35404: LD_VAR 0 6
35408: NOT
35409: IFFALSE 35435
// result := [ [ i , tmp ] ] else
35411: LD_ADDR_VAR 0 6
35415: PUSH
35416: LD_VAR 0 7
35420: PUSH
35421: LD_VAR 0 9
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: EMPTY
35431: LIST
35432: ST_TO_ADDR
35433: GO 35577
// begin if result [ result ] [ 2 ] < tmp then
35435: LD_VAR 0 6
35439: PUSH
35440: LD_VAR 0 6
35444: ARRAY
35445: PUSH
35446: LD_INT 2
35448: ARRAY
35449: PUSH
35450: LD_VAR 0 9
35454: LESS
35455: IFFALSE 35497
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35457: LD_ADDR_VAR 0 6
35461: PUSH
35462: LD_VAR 0 6
35466: PPUSH
35467: LD_VAR 0 6
35471: PUSH
35472: LD_INT 1
35474: PLUS
35475: PPUSH
35476: LD_VAR 0 7
35480: PUSH
35481: LD_VAR 0 9
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PPUSH
35490: CALL_OW 2
35494: ST_TO_ADDR
35495: GO 35577
// for j = 1 to result do
35497: LD_ADDR_VAR 0 8
35501: PUSH
35502: DOUBLE
35503: LD_INT 1
35505: DEC
35506: ST_TO_ADDR
35507: LD_VAR 0 6
35511: PUSH
35512: FOR_TO
35513: IFFALSE 35575
// begin if tmp < result [ j ] [ 2 ] then
35515: LD_VAR 0 9
35519: PUSH
35520: LD_VAR 0 6
35524: PUSH
35525: LD_VAR 0 8
35529: ARRAY
35530: PUSH
35531: LD_INT 2
35533: ARRAY
35534: LESS
35535: IFFALSE 35573
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35537: LD_ADDR_VAR 0 6
35541: PUSH
35542: LD_VAR 0 6
35546: PPUSH
35547: LD_VAR 0 8
35551: PPUSH
35552: LD_VAR 0 7
35556: PUSH
35557: LD_VAR 0 9
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PPUSH
35566: CALL_OW 2
35570: ST_TO_ADDR
// break ;
35571: GO 35575
// end ; end ;
35573: GO 35512
35575: POP
35576: POP
// end ; end ;
35577: GO 35376
35579: POP
35580: POP
// if result and not asc then
35581: LD_VAR 0 6
35585: PUSH
35586: LD_VAR 0 4
35590: NOT
35591: AND
35592: IFFALSE 35667
// begin tmp := result ;
35594: LD_ADDR_VAR 0 9
35598: PUSH
35599: LD_VAR 0 6
35603: ST_TO_ADDR
// for i = tmp downto 1 do
35604: LD_ADDR_VAR 0 7
35608: PUSH
35609: DOUBLE
35610: LD_VAR 0 9
35614: INC
35615: ST_TO_ADDR
35616: LD_INT 1
35618: PUSH
35619: FOR_DOWNTO
35620: IFFALSE 35665
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35622: LD_ADDR_VAR 0 6
35626: PUSH
35627: LD_VAR 0 6
35631: PPUSH
35632: LD_VAR 0 9
35636: PUSH
35637: LD_VAR 0 7
35641: MINUS
35642: PUSH
35643: LD_INT 1
35645: PLUS
35646: PPUSH
35647: LD_VAR 0 9
35651: PUSH
35652: LD_VAR 0 7
35656: ARRAY
35657: PPUSH
35658: CALL_OW 1
35662: ST_TO_ADDR
35663: GO 35619
35665: POP
35666: POP
// end ; tmp := [ ] ;
35667: LD_ADDR_VAR 0 9
35671: PUSH
35672: EMPTY
35673: ST_TO_ADDR
// if mode then
35674: LD_VAR 0 5
35678: IFFALSE 35747
// begin for i = 1 to result do
35680: LD_ADDR_VAR 0 7
35684: PUSH
35685: DOUBLE
35686: LD_INT 1
35688: DEC
35689: ST_TO_ADDR
35690: LD_VAR 0 6
35694: PUSH
35695: FOR_TO
35696: IFFALSE 35735
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35698: LD_ADDR_VAR 0 9
35702: PUSH
35703: LD_VAR 0 9
35707: PPUSH
35708: LD_VAR 0 7
35712: PPUSH
35713: LD_VAR 0 6
35717: PUSH
35718: LD_VAR 0 7
35722: ARRAY
35723: PUSH
35724: LD_INT 1
35726: ARRAY
35727: PPUSH
35728: CALL_OW 1
35732: ST_TO_ADDR
35733: GO 35695
35735: POP
35736: POP
// result := tmp ;
35737: LD_ADDR_VAR 0 6
35741: PUSH
35742: LD_VAR 0 9
35746: ST_TO_ADDR
// end ; end ;
35747: LD_VAR 0 6
35751: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35752: LD_INT 0
35754: PPUSH
35755: PPUSH
35756: PPUSH
35757: PPUSH
35758: PPUSH
35759: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35760: LD_ADDR_VAR 0 5
35764: PUSH
35765: LD_INT 0
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: EMPTY
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: ST_TO_ADDR
// if not x or not y then
35782: LD_VAR 0 2
35786: NOT
35787: PUSH
35788: LD_VAR 0 3
35792: NOT
35793: OR
35794: IFFALSE 35798
// exit ;
35796: GO 37450
// if not range then
35798: LD_VAR 0 4
35802: NOT
35803: IFFALSE 35813
// range := 10 ;
35805: LD_ADDR_VAR 0 4
35809: PUSH
35810: LD_INT 10
35812: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35813: LD_ADDR_VAR 0 8
35817: PUSH
35818: LD_INT 81
35820: PUSH
35821: LD_VAR 0 1
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 92
35832: PUSH
35833: LD_VAR 0 2
35837: PUSH
35838: LD_VAR 0 3
35842: PUSH
35843: LD_VAR 0 4
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 3
35856: PUSH
35857: LD_INT 21
35859: PUSH
35860: LD_INT 3
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: LIST
35875: PPUSH
35876: CALL_OW 69
35880: ST_TO_ADDR
// if not tmp then
35881: LD_VAR 0 8
35885: NOT
35886: IFFALSE 35890
// exit ;
35888: GO 37450
// for i in tmp do
35890: LD_ADDR_VAR 0 6
35894: PUSH
35895: LD_VAR 0 8
35899: PUSH
35900: FOR_IN
35901: IFFALSE 37425
// begin points := [ 0 , 0 , 0 ] ;
35903: LD_ADDR_VAR 0 9
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: ST_TO_ADDR
// bpoints := 1 ;
35922: LD_ADDR_VAR 0 10
35926: PUSH
35927: LD_INT 1
35929: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35930: LD_VAR 0 6
35934: PPUSH
35935: CALL_OW 247
35939: PUSH
35940: LD_INT 1
35942: DOUBLE
35943: EQUAL
35944: IFTRUE 35948
35946: GO 36526
35948: POP
// begin if GetClass ( i ) = 1 then
35949: LD_VAR 0 6
35953: PPUSH
35954: CALL_OW 257
35958: PUSH
35959: LD_INT 1
35961: EQUAL
35962: IFFALSE 35983
// points := [ 10 , 5 , 3 ] ;
35964: LD_ADDR_VAR 0 9
35968: PUSH
35969: LD_INT 10
35971: PUSH
35972: LD_INT 5
35974: PUSH
35975: LD_INT 3
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35983: LD_VAR 0 6
35987: PPUSH
35988: CALL_OW 257
35992: PUSH
35993: LD_INT 2
35995: PUSH
35996: LD_INT 3
35998: PUSH
35999: LD_INT 4
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: IN
36007: IFFALSE 36028
// points := [ 3 , 2 , 1 ] ;
36009: LD_ADDR_VAR 0 9
36013: PUSH
36014: LD_INT 3
36016: PUSH
36017: LD_INT 2
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: LIST
36027: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36028: LD_VAR 0 6
36032: PPUSH
36033: CALL_OW 257
36037: PUSH
36038: LD_INT 5
36040: EQUAL
36041: IFFALSE 36062
// points := [ 130 , 5 , 2 ] ;
36043: LD_ADDR_VAR 0 9
36047: PUSH
36048: LD_INT 130
36050: PUSH
36051: LD_INT 5
36053: PUSH
36054: LD_INT 2
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36062: LD_VAR 0 6
36066: PPUSH
36067: CALL_OW 257
36071: PUSH
36072: LD_INT 8
36074: EQUAL
36075: IFFALSE 36096
// points := [ 35 , 35 , 30 ] ;
36077: LD_ADDR_VAR 0 9
36081: PUSH
36082: LD_INT 35
36084: PUSH
36085: LD_INT 35
36087: PUSH
36088: LD_INT 30
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: LIST
36095: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36096: LD_VAR 0 6
36100: PPUSH
36101: CALL_OW 257
36105: PUSH
36106: LD_INT 9
36108: EQUAL
36109: IFFALSE 36130
// points := [ 20 , 55 , 40 ] ;
36111: LD_ADDR_VAR 0 9
36115: PUSH
36116: LD_INT 20
36118: PUSH
36119: LD_INT 55
36121: PUSH
36122: LD_INT 40
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: LIST
36129: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36130: LD_VAR 0 6
36134: PPUSH
36135: CALL_OW 257
36139: PUSH
36140: LD_INT 12
36142: PUSH
36143: LD_INT 16
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: IN
36150: IFFALSE 36171
// points := [ 5 , 3 , 2 ] ;
36152: LD_ADDR_VAR 0 9
36156: PUSH
36157: LD_INT 5
36159: PUSH
36160: LD_INT 3
36162: PUSH
36163: LD_INT 2
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36171: LD_VAR 0 6
36175: PPUSH
36176: CALL_OW 257
36180: PUSH
36181: LD_INT 17
36183: EQUAL
36184: IFFALSE 36205
// points := [ 100 , 50 , 75 ] ;
36186: LD_ADDR_VAR 0 9
36190: PUSH
36191: LD_INT 100
36193: PUSH
36194: LD_INT 50
36196: PUSH
36197: LD_INT 75
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36205: LD_VAR 0 6
36209: PPUSH
36210: CALL_OW 257
36214: PUSH
36215: LD_INT 15
36217: EQUAL
36218: IFFALSE 36239
// points := [ 10 , 5 , 3 ] ;
36220: LD_ADDR_VAR 0 9
36224: PUSH
36225: LD_INT 10
36227: PUSH
36228: LD_INT 5
36230: PUSH
36231: LD_INT 3
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36239: LD_VAR 0 6
36243: PPUSH
36244: CALL_OW 257
36248: PUSH
36249: LD_INT 14
36251: EQUAL
36252: IFFALSE 36273
// points := [ 10 , 0 , 0 ] ;
36254: LD_ADDR_VAR 0 9
36258: PUSH
36259: LD_INT 10
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: LIST
36272: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36273: LD_VAR 0 6
36277: PPUSH
36278: CALL_OW 257
36282: PUSH
36283: LD_INT 11
36285: EQUAL
36286: IFFALSE 36307
// points := [ 30 , 10 , 5 ] ;
36288: LD_ADDR_VAR 0 9
36292: PUSH
36293: LD_INT 30
36295: PUSH
36296: LD_INT 10
36298: PUSH
36299: LD_INT 5
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: LIST
36306: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36307: LD_VAR 0 1
36311: PPUSH
36312: LD_INT 5
36314: PPUSH
36315: CALL_OW 321
36319: PUSH
36320: LD_INT 2
36322: EQUAL
36323: IFFALSE 36340
// bpoints := bpoints * 1.8 ;
36325: LD_ADDR_VAR 0 10
36329: PUSH
36330: LD_VAR 0 10
36334: PUSH
36335: LD_REAL  1.80000000000000E+0000
36338: MUL
36339: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36340: LD_VAR 0 6
36344: PPUSH
36345: CALL_OW 257
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: LD_INT 2
36355: PUSH
36356: LD_INT 3
36358: PUSH
36359: LD_INT 4
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: IN
36368: PUSH
36369: LD_VAR 0 1
36373: PPUSH
36374: LD_INT 51
36376: PPUSH
36377: CALL_OW 321
36381: PUSH
36382: LD_INT 2
36384: EQUAL
36385: AND
36386: IFFALSE 36403
// bpoints := bpoints * 1.2 ;
36388: LD_ADDR_VAR 0 10
36392: PUSH
36393: LD_VAR 0 10
36397: PUSH
36398: LD_REAL  1.20000000000000E+0000
36401: MUL
36402: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36403: LD_VAR 0 6
36407: PPUSH
36408: CALL_OW 257
36412: PUSH
36413: LD_INT 5
36415: PUSH
36416: LD_INT 7
36418: PUSH
36419: LD_INT 9
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: LIST
36426: IN
36427: PUSH
36428: LD_VAR 0 1
36432: PPUSH
36433: LD_INT 52
36435: PPUSH
36436: CALL_OW 321
36440: PUSH
36441: LD_INT 2
36443: EQUAL
36444: AND
36445: IFFALSE 36462
// bpoints := bpoints * 1.5 ;
36447: LD_ADDR_VAR 0 10
36451: PUSH
36452: LD_VAR 0 10
36456: PUSH
36457: LD_REAL  1.50000000000000E+0000
36460: MUL
36461: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36462: LD_VAR 0 1
36466: PPUSH
36467: LD_INT 66
36469: PPUSH
36470: CALL_OW 321
36474: PUSH
36475: LD_INT 2
36477: EQUAL
36478: IFFALSE 36495
// bpoints := bpoints * 1.1 ;
36480: LD_ADDR_VAR 0 10
36484: PUSH
36485: LD_VAR 0 10
36489: PUSH
36490: LD_REAL  1.10000000000000E+0000
36493: MUL
36494: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36495: LD_ADDR_VAR 0 10
36499: PUSH
36500: LD_VAR 0 10
36504: PUSH
36505: LD_VAR 0 6
36509: PPUSH
36510: LD_INT 1
36512: PPUSH
36513: CALL_OW 259
36517: PUSH
36518: LD_REAL  1.15000000000000E+0000
36521: MUL
36522: MUL
36523: ST_TO_ADDR
// end ; unit_vehicle :
36524: GO 37354
36526: LD_INT 2
36528: DOUBLE
36529: EQUAL
36530: IFTRUE 36534
36532: GO 37342
36534: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36535: LD_VAR 0 6
36539: PPUSH
36540: CALL_OW 264
36544: PUSH
36545: LD_INT 2
36547: PUSH
36548: LD_INT 42
36550: PUSH
36551: LD_INT 24
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: LIST
36558: IN
36559: IFFALSE 36580
// points := [ 25 , 5 , 3 ] ;
36561: LD_ADDR_VAR 0 9
36565: PUSH
36566: LD_INT 25
36568: PUSH
36569: LD_INT 5
36571: PUSH
36572: LD_INT 3
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: LIST
36579: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36580: LD_VAR 0 6
36584: PPUSH
36585: CALL_OW 264
36589: PUSH
36590: LD_INT 4
36592: PUSH
36593: LD_INT 43
36595: PUSH
36596: LD_INT 25
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: LIST
36603: IN
36604: IFFALSE 36625
// points := [ 40 , 15 , 5 ] ;
36606: LD_ADDR_VAR 0 9
36610: PUSH
36611: LD_INT 40
36613: PUSH
36614: LD_INT 15
36616: PUSH
36617: LD_INT 5
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: LIST
36624: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36625: LD_VAR 0 6
36629: PPUSH
36630: CALL_OW 264
36634: PUSH
36635: LD_INT 3
36637: PUSH
36638: LD_INT 23
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: IN
36645: IFFALSE 36666
// points := [ 7 , 25 , 8 ] ;
36647: LD_ADDR_VAR 0 9
36651: PUSH
36652: LD_INT 7
36654: PUSH
36655: LD_INT 25
36657: PUSH
36658: LD_INT 8
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: LIST
36665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36666: LD_VAR 0 6
36670: PPUSH
36671: CALL_OW 264
36675: PUSH
36676: LD_INT 5
36678: PUSH
36679: LD_INT 27
36681: PUSH
36682: LD_INT 44
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: IN
36690: IFFALSE 36711
// points := [ 14 , 50 , 16 ] ;
36692: LD_ADDR_VAR 0 9
36696: PUSH
36697: LD_INT 14
36699: PUSH
36700: LD_INT 50
36702: PUSH
36703: LD_INT 16
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: LIST
36710: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36711: LD_VAR 0 6
36715: PPUSH
36716: CALL_OW 264
36720: PUSH
36721: LD_INT 6
36723: PUSH
36724: LD_INT 46
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: IN
36731: IFFALSE 36752
// points := [ 32 , 120 , 70 ] ;
36733: LD_ADDR_VAR 0 9
36737: PUSH
36738: LD_INT 32
36740: PUSH
36741: LD_INT 120
36743: PUSH
36744: LD_INT 70
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36752: LD_VAR 0 6
36756: PPUSH
36757: CALL_OW 264
36761: PUSH
36762: LD_INT 7
36764: PUSH
36765: LD_INT 28
36767: PUSH
36768: LD_INT 45
36770: PUSH
36771: LD_EXP 24
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: IN
36782: IFFALSE 36803
// points := [ 35 , 20 , 45 ] ;
36784: LD_ADDR_VAR 0 9
36788: PUSH
36789: LD_INT 35
36791: PUSH
36792: LD_INT 20
36794: PUSH
36795: LD_INT 45
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: LIST
36802: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36803: LD_VAR 0 6
36807: PPUSH
36808: CALL_OW 264
36812: PUSH
36813: LD_INT 47
36815: PUSH
36816: EMPTY
36817: LIST
36818: IN
36819: IFFALSE 36840
// points := [ 67 , 45 , 75 ] ;
36821: LD_ADDR_VAR 0 9
36825: PUSH
36826: LD_INT 67
36828: PUSH
36829: LD_INT 45
36831: PUSH
36832: LD_INT 75
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: LIST
36839: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36840: LD_VAR 0 6
36844: PPUSH
36845: CALL_OW 264
36849: PUSH
36850: LD_INT 26
36852: PUSH
36853: EMPTY
36854: LIST
36855: IN
36856: IFFALSE 36877
// points := [ 120 , 30 , 80 ] ;
36858: LD_ADDR_VAR 0 9
36862: PUSH
36863: LD_INT 120
36865: PUSH
36866: LD_INT 30
36868: PUSH
36869: LD_INT 80
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: LIST
36876: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36877: LD_VAR 0 6
36881: PPUSH
36882: CALL_OW 264
36886: PUSH
36887: LD_INT 22
36889: PUSH
36890: EMPTY
36891: LIST
36892: IN
36893: IFFALSE 36914
// points := [ 40 , 1 , 1 ] ;
36895: LD_ADDR_VAR 0 9
36899: PUSH
36900: LD_INT 40
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: LIST
36913: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36914: LD_VAR 0 6
36918: PPUSH
36919: CALL_OW 264
36923: PUSH
36924: LD_INT 29
36926: PUSH
36927: EMPTY
36928: LIST
36929: IN
36930: IFFALSE 36951
// points := [ 70 , 200 , 400 ] ;
36932: LD_ADDR_VAR 0 9
36936: PUSH
36937: LD_INT 70
36939: PUSH
36940: LD_INT 200
36942: PUSH
36943: LD_INT 400
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36951: LD_VAR 0 6
36955: PPUSH
36956: CALL_OW 264
36960: PUSH
36961: LD_INT 14
36963: PUSH
36964: LD_INT 53
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: IN
36971: IFFALSE 36992
// points := [ 40 , 10 , 20 ] ;
36973: LD_ADDR_VAR 0 9
36977: PUSH
36978: LD_INT 40
36980: PUSH
36981: LD_INT 10
36983: PUSH
36984: LD_INT 20
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: LIST
36991: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36992: LD_VAR 0 6
36996: PPUSH
36997: CALL_OW 264
37001: PUSH
37002: LD_INT 9
37004: PUSH
37005: EMPTY
37006: LIST
37007: IN
37008: IFFALSE 37029
// points := [ 5 , 70 , 20 ] ;
37010: LD_ADDR_VAR 0 9
37014: PUSH
37015: LD_INT 5
37017: PUSH
37018: LD_INT 70
37020: PUSH
37021: LD_INT 20
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: LIST
37028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37029: LD_VAR 0 6
37033: PPUSH
37034: CALL_OW 264
37038: PUSH
37039: LD_INT 10
37041: PUSH
37042: EMPTY
37043: LIST
37044: IN
37045: IFFALSE 37066
// points := [ 35 , 110 , 70 ] ;
37047: LD_ADDR_VAR 0 9
37051: PUSH
37052: LD_INT 35
37054: PUSH
37055: LD_INT 110
37057: PUSH
37058: LD_INT 70
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37066: LD_VAR 0 6
37070: PPUSH
37071: CALL_OW 265
37075: PUSH
37076: LD_INT 25
37078: EQUAL
37079: IFFALSE 37100
// points := [ 80 , 65 , 100 ] ;
37081: LD_ADDR_VAR 0 9
37085: PUSH
37086: LD_INT 80
37088: PUSH
37089: LD_INT 65
37091: PUSH
37092: LD_INT 100
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: LIST
37099: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37100: LD_VAR 0 6
37104: PPUSH
37105: CALL_OW 263
37109: PUSH
37110: LD_INT 1
37112: EQUAL
37113: IFFALSE 37148
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37115: LD_ADDR_VAR 0 10
37119: PUSH
37120: LD_VAR 0 10
37124: PUSH
37125: LD_VAR 0 6
37129: PPUSH
37130: CALL_OW 311
37134: PPUSH
37135: LD_INT 3
37137: PPUSH
37138: CALL_OW 259
37142: PUSH
37143: LD_INT 4
37145: MUL
37146: MUL
37147: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37148: LD_VAR 0 6
37152: PPUSH
37153: CALL_OW 263
37157: PUSH
37158: LD_INT 2
37160: EQUAL
37161: IFFALSE 37212
// begin j := IsControledBy ( i ) ;
37163: LD_ADDR_VAR 0 7
37167: PUSH
37168: LD_VAR 0 6
37172: PPUSH
37173: CALL_OW 312
37177: ST_TO_ADDR
// if j then
37178: LD_VAR 0 7
37182: IFFALSE 37212
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37184: LD_ADDR_VAR 0 10
37188: PUSH
37189: LD_VAR 0 10
37193: PUSH
37194: LD_VAR 0 7
37198: PPUSH
37199: LD_INT 3
37201: PPUSH
37202: CALL_OW 259
37206: PUSH
37207: LD_INT 3
37209: MUL
37210: MUL
37211: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37212: LD_VAR 0 6
37216: PPUSH
37217: CALL_OW 264
37221: PUSH
37222: LD_INT 5
37224: PUSH
37225: LD_INT 6
37227: PUSH
37228: LD_INT 46
37230: PUSH
37231: LD_INT 44
37233: PUSH
37234: LD_INT 47
37236: PUSH
37237: LD_INT 45
37239: PUSH
37240: LD_INT 28
37242: PUSH
37243: LD_INT 7
37245: PUSH
37246: LD_INT 27
37248: PUSH
37249: LD_INT 29
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: IN
37264: PUSH
37265: LD_VAR 0 1
37269: PPUSH
37270: LD_INT 52
37272: PPUSH
37273: CALL_OW 321
37277: PUSH
37278: LD_INT 2
37280: EQUAL
37281: AND
37282: IFFALSE 37299
// bpoints := bpoints * 1.2 ;
37284: LD_ADDR_VAR 0 10
37288: PUSH
37289: LD_VAR 0 10
37293: PUSH
37294: LD_REAL  1.20000000000000E+0000
37297: MUL
37298: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37299: LD_VAR 0 6
37303: PPUSH
37304: CALL_OW 264
37308: PUSH
37309: LD_INT 6
37311: PUSH
37312: LD_INT 46
37314: PUSH
37315: LD_INT 47
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: LIST
37322: IN
37323: IFFALSE 37340
// bpoints := bpoints * 1.2 ;
37325: LD_ADDR_VAR 0 10
37329: PUSH
37330: LD_VAR 0 10
37334: PUSH
37335: LD_REAL  1.20000000000000E+0000
37338: MUL
37339: ST_TO_ADDR
// end ; unit_building :
37340: GO 37354
37342: LD_INT 3
37344: DOUBLE
37345: EQUAL
37346: IFTRUE 37350
37348: GO 37353
37350: POP
// ; end ;
37351: GO 37354
37353: POP
// for j = 1 to 3 do
37354: LD_ADDR_VAR 0 7
37358: PUSH
37359: DOUBLE
37360: LD_INT 1
37362: DEC
37363: ST_TO_ADDR
37364: LD_INT 3
37366: PUSH
37367: FOR_TO
37368: IFFALSE 37421
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37370: LD_ADDR_VAR 0 5
37374: PUSH
37375: LD_VAR 0 5
37379: PPUSH
37380: LD_VAR 0 7
37384: PPUSH
37385: LD_VAR 0 5
37389: PUSH
37390: LD_VAR 0 7
37394: ARRAY
37395: PUSH
37396: LD_VAR 0 9
37400: PUSH
37401: LD_VAR 0 7
37405: ARRAY
37406: PUSH
37407: LD_VAR 0 10
37411: MUL
37412: PLUS
37413: PPUSH
37414: CALL_OW 1
37418: ST_TO_ADDR
37419: GO 37367
37421: POP
37422: POP
// end ;
37423: GO 35900
37425: POP
37426: POP
// result := Replace ( result , 4 , tmp ) ;
37427: LD_ADDR_VAR 0 5
37431: PUSH
37432: LD_VAR 0 5
37436: PPUSH
37437: LD_INT 4
37439: PPUSH
37440: LD_VAR 0 8
37444: PPUSH
37445: CALL_OW 1
37449: ST_TO_ADDR
// end ;
37450: LD_VAR 0 5
37454: RET
// export function DangerAtRange ( unit , range ) ; begin
37455: LD_INT 0
37457: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37458: LD_ADDR_VAR 0 3
37462: PUSH
37463: LD_VAR 0 1
37467: PPUSH
37468: CALL_OW 255
37472: PPUSH
37473: LD_VAR 0 1
37477: PPUSH
37478: CALL_OW 250
37482: PPUSH
37483: LD_VAR 0 1
37487: PPUSH
37488: CALL_OW 251
37492: PPUSH
37493: LD_VAR 0 2
37497: PPUSH
37498: CALL 35752 0 4
37502: ST_TO_ADDR
// end ;
37503: LD_VAR 0 3
37507: RET
// export function DangerInArea ( side , area ) ; begin
37508: LD_INT 0
37510: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37511: LD_ADDR_VAR 0 3
37515: PUSH
37516: LD_VAR 0 2
37520: PPUSH
37521: LD_INT 81
37523: PUSH
37524: LD_VAR 0 1
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PPUSH
37533: CALL_OW 70
37537: ST_TO_ADDR
// end ;
37538: LD_VAR 0 3
37542: RET
// export function IsExtension ( b ) ; begin
37543: LD_INT 0
37545: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37546: LD_ADDR_VAR 0 2
37550: PUSH
37551: LD_VAR 0 1
37555: PUSH
37556: LD_INT 23
37558: PUSH
37559: LD_INT 20
37561: PUSH
37562: LD_INT 22
37564: PUSH
37565: LD_INT 17
37567: PUSH
37568: LD_INT 24
37570: PUSH
37571: LD_INT 21
37573: PUSH
37574: LD_INT 19
37576: PUSH
37577: LD_INT 16
37579: PUSH
37580: LD_INT 25
37582: PUSH
37583: LD_INT 18
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: IN
37598: ST_TO_ADDR
// end ;
37599: LD_VAR 0 2
37603: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37604: LD_INT 0
37606: PPUSH
37607: PPUSH
37608: PPUSH
// result := [ ] ;
37609: LD_ADDR_VAR 0 4
37613: PUSH
37614: EMPTY
37615: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37616: LD_ADDR_VAR 0 5
37620: PUSH
37621: LD_VAR 0 2
37625: PPUSH
37626: LD_INT 21
37628: PUSH
37629: LD_INT 3
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PPUSH
37636: CALL_OW 70
37640: ST_TO_ADDR
// if not tmp then
37641: LD_VAR 0 5
37645: NOT
37646: IFFALSE 37650
// exit ;
37648: GO 37714
// if checkLink then
37650: LD_VAR 0 3
37654: IFFALSE 37704
// begin for i in tmp do
37656: LD_ADDR_VAR 0 6
37660: PUSH
37661: LD_VAR 0 5
37665: PUSH
37666: FOR_IN
37667: IFFALSE 37702
// if GetBase ( i ) <> base then
37669: LD_VAR 0 6
37673: PPUSH
37674: CALL_OW 274
37678: PUSH
37679: LD_VAR 0 1
37683: NONEQUAL
37684: IFFALSE 37700
// ComLinkToBase ( base , i ) ;
37686: LD_VAR 0 1
37690: PPUSH
37691: LD_VAR 0 6
37695: PPUSH
37696: CALL_OW 169
37700: GO 37666
37702: POP
37703: POP
// end ; result := tmp ;
37704: LD_ADDR_VAR 0 4
37708: PUSH
37709: LD_VAR 0 5
37713: ST_TO_ADDR
// end ;
37714: LD_VAR 0 4
37718: RET
// export function ComComplete ( units , b ) ; var i ; begin
37719: LD_INT 0
37721: PPUSH
37722: PPUSH
// if not units then
37723: LD_VAR 0 1
37727: NOT
37728: IFFALSE 37732
// exit ;
37730: GO 37822
// for i in units do
37732: LD_ADDR_VAR 0 4
37736: PUSH
37737: LD_VAR 0 1
37741: PUSH
37742: FOR_IN
37743: IFFALSE 37820
// if BuildingStatus ( b ) = bs_build then
37745: LD_VAR 0 2
37749: PPUSH
37750: CALL_OW 461
37754: PUSH
37755: LD_INT 1
37757: EQUAL
37758: IFFALSE 37818
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37760: LD_VAR 0 4
37764: PPUSH
37765: LD_STRING h
37767: PUSH
37768: LD_VAR 0 2
37772: PPUSH
37773: CALL_OW 250
37777: PUSH
37778: LD_VAR 0 2
37782: PPUSH
37783: CALL_OW 251
37787: PUSH
37788: LD_VAR 0 2
37792: PUSH
37793: LD_INT 0
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: LD_INT 0
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: PUSH
37811: EMPTY
37812: LIST
37813: PPUSH
37814: CALL_OW 446
37818: GO 37742
37820: POP
37821: POP
// end ;
37822: LD_VAR 0 3
37826: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37827: LD_INT 0
37829: PPUSH
37830: PPUSH
37831: PPUSH
37832: PPUSH
37833: PPUSH
37834: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37835: LD_VAR 0 1
37839: NOT
37840: PUSH
37841: LD_VAR 0 1
37845: PPUSH
37846: CALL_OW 263
37850: PUSH
37851: LD_INT 2
37853: NONEQUAL
37854: OR
37855: IFFALSE 37859
// exit ;
37857: GO 38175
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37859: LD_ADDR_VAR 0 6
37863: PUSH
37864: LD_INT 22
37866: PUSH
37867: LD_VAR 0 1
37871: PPUSH
37872: CALL_OW 255
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 2
37883: PUSH
37884: LD_INT 30
37886: PUSH
37887: LD_INT 36
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 34
37896: PUSH
37897: LD_INT 31
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: LIST
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PPUSH
37913: CALL_OW 69
37917: ST_TO_ADDR
// if not tmp then
37918: LD_VAR 0 6
37922: NOT
37923: IFFALSE 37927
// exit ;
37925: GO 38175
// result := [ ] ;
37927: LD_ADDR_VAR 0 2
37931: PUSH
37932: EMPTY
37933: ST_TO_ADDR
// for i in tmp do
37934: LD_ADDR_VAR 0 3
37938: PUSH
37939: LD_VAR 0 6
37943: PUSH
37944: FOR_IN
37945: IFFALSE 38016
// begin t := UnitsInside ( i ) ;
37947: LD_ADDR_VAR 0 4
37951: PUSH
37952: LD_VAR 0 3
37956: PPUSH
37957: CALL_OW 313
37961: ST_TO_ADDR
// if t then
37962: LD_VAR 0 4
37966: IFFALSE 38014
// for j in t do
37968: LD_ADDR_VAR 0 7
37972: PUSH
37973: LD_VAR 0 4
37977: PUSH
37978: FOR_IN
37979: IFFALSE 38012
// result := Replace ( result , result + 1 , j ) ;
37981: LD_ADDR_VAR 0 2
37985: PUSH
37986: LD_VAR 0 2
37990: PPUSH
37991: LD_VAR 0 2
37995: PUSH
37996: LD_INT 1
37998: PLUS
37999: PPUSH
38000: LD_VAR 0 7
38004: PPUSH
38005: CALL_OW 1
38009: ST_TO_ADDR
38010: GO 37978
38012: POP
38013: POP
// end ;
38014: GO 37944
38016: POP
38017: POP
// if not result then
38018: LD_VAR 0 2
38022: NOT
38023: IFFALSE 38027
// exit ;
38025: GO 38175
// mech := result [ 1 ] ;
38027: LD_ADDR_VAR 0 5
38031: PUSH
38032: LD_VAR 0 2
38036: PUSH
38037: LD_INT 1
38039: ARRAY
38040: ST_TO_ADDR
// if result > 1 then
38041: LD_VAR 0 2
38045: PUSH
38046: LD_INT 1
38048: GREATER
38049: IFFALSE 38161
// begin for i = 2 to result do
38051: LD_ADDR_VAR 0 3
38055: PUSH
38056: DOUBLE
38057: LD_INT 2
38059: DEC
38060: ST_TO_ADDR
38061: LD_VAR 0 2
38065: PUSH
38066: FOR_TO
38067: IFFALSE 38159
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38069: LD_ADDR_VAR 0 4
38073: PUSH
38074: LD_VAR 0 2
38078: PUSH
38079: LD_VAR 0 3
38083: ARRAY
38084: PPUSH
38085: LD_INT 3
38087: PPUSH
38088: CALL_OW 259
38092: PUSH
38093: LD_VAR 0 2
38097: PUSH
38098: LD_VAR 0 3
38102: ARRAY
38103: PPUSH
38104: CALL_OW 432
38108: MINUS
38109: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38110: LD_VAR 0 4
38114: PUSH
38115: LD_VAR 0 5
38119: PPUSH
38120: LD_INT 3
38122: PPUSH
38123: CALL_OW 259
38127: PUSH
38128: LD_VAR 0 5
38132: PPUSH
38133: CALL_OW 432
38137: MINUS
38138: GREATEREQUAL
38139: IFFALSE 38157
// mech := result [ i ] ;
38141: LD_ADDR_VAR 0 5
38145: PUSH
38146: LD_VAR 0 2
38150: PUSH
38151: LD_VAR 0 3
38155: ARRAY
38156: ST_TO_ADDR
// end ;
38157: GO 38066
38159: POP
38160: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38161: LD_VAR 0 1
38165: PPUSH
38166: LD_VAR 0 5
38170: PPUSH
38171: CALL_OW 135
// end ;
38175: LD_VAR 0 2
38179: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38180: LD_INT 0
38182: PPUSH
38183: PPUSH
38184: PPUSH
38185: PPUSH
38186: PPUSH
38187: PPUSH
38188: PPUSH
38189: PPUSH
38190: PPUSH
38191: PPUSH
38192: PPUSH
38193: PPUSH
38194: PPUSH
// result := [ ] ;
38195: LD_ADDR_VAR 0 7
38199: PUSH
38200: EMPTY
38201: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38202: LD_VAR 0 1
38206: PPUSH
38207: CALL_OW 266
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: IN
38222: NOT
38223: IFFALSE 38227
// exit ;
38225: GO 39861
// if name then
38227: LD_VAR 0 3
38231: IFFALSE 38247
// SetBName ( base_dep , name ) ;
38233: LD_VAR 0 1
38237: PPUSH
38238: LD_VAR 0 3
38242: PPUSH
38243: CALL_OW 500
// base := GetBase ( base_dep ) ;
38247: LD_ADDR_VAR 0 15
38251: PUSH
38252: LD_VAR 0 1
38256: PPUSH
38257: CALL_OW 274
38261: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38262: LD_ADDR_VAR 0 16
38266: PUSH
38267: LD_VAR 0 1
38271: PPUSH
38272: CALL_OW 255
38276: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38277: LD_ADDR_VAR 0 17
38281: PUSH
38282: LD_VAR 0 1
38286: PPUSH
38287: CALL_OW 248
38291: ST_TO_ADDR
// if sources then
38292: LD_VAR 0 5
38296: IFFALSE 38343
// for i = 1 to 3 do
38298: LD_ADDR_VAR 0 8
38302: PUSH
38303: DOUBLE
38304: LD_INT 1
38306: DEC
38307: ST_TO_ADDR
38308: LD_INT 3
38310: PUSH
38311: FOR_TO
38312: IFFALSE 38341
// AddResourceType ( base , i , sources [ i ] ) ;
38314: LD_VAR 0 15
38318: PPUSH
38319: LD_VAR 0 8
38323: PPUSH
38324: LD_VAR 0 5
38328: PUSH
38329: LD_VAR 0 8
38333: ARRAY
38334: PPUSH
38335: CALL_OW 276
38339: GO 38311
38341: POP
38342: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38343: LD_ADDR_VAR 0 18
38347: PUSH
38348: LD_VAR 0 15
38352: PPUSH
38353: LD_VAR 0 2
38357: PPUSH
38358: LD_INT 1
38360: PPUSH
38361: CALL 37604 0 3
38365: ST_TO_ADDR
// InitHc ;
38366: CALL_OW 19
// InitUc ;
38370: CALL_OW 18
// uc_side := side ;
38374: LD_ADDR_OWVAR 20
38378: PUSH
38379: LD_VAR 0 16
38383: ST_TO_ADDR
// uc_nation := nation ;
38384: LD_ADDR_OWVAR 21
38388: PUSH
38389: LD_VAR 0 17
38393: ST_TO_ADDR
// if buildings then
38394: LD_VAR 0 18
38398: IFFALSE 39720
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38400: LD_ADDR_VAR 0 19
38404: PUSH
38405: LD_VAR 0 18
38409: PPUSH
38410: LD_INT 2
38412: PUSH
38413: LD_INT 30
38415: PUSH
38416: LD_INT 29
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 30
38425: PUSH
38426: LD_INT 30
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: LIST
38437: PPUSH
38438: CALL_OW 72
38442: ST_TO_ADDR
// if tmp then
38443: LD_VAR 0 19
38447: IFFALSE 38495
// for i in tmp do
38449: LD_ADDR_VAR 0 8
38453: PUSH
38454: LD_VAR 0 19
38458: PUSH
38459: FOR_IN
38460: IFFALSE 38493
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38462: LD_VAR 0 8
38466: PPUSH
38467: CALL_OW 250
38471: PPUSH
38472: LD_VAR 0 8
38476: PPUSH
38477: CALL_OW 251
38481: PPUSH
38482: LD_VAR 0 16
38486: PPUSH
38487: CALL_OW 441
38491: GO 38459
38493: POP
38494: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38495: LD_VAR 0 18
38499: PPUSH
38500: LD_INT 2
38502: PUSH
38503: LD_INT 30
38505: PUSH
38506: LD_INT 32
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 30
38515: PUSH
38516: LD_INT 33
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: PPUSH
38528: CALL_OW 72
38532: IFFALSE 38620
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38534: LD_ADDR_VAR 0 8
38538: PUSH
38539: LD_VAR 0 18
38543: PPUSH
38544: LD_INT 2
38546: PUSH
38547: LD_INT 30
38549: PUSH
38550: LD_INT 32
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 30
38559: PUSH
38560: LD_INT 33
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: PPUSH
38572: CALL_OW 72
38576: PUSH
38577: FOR_IN
38578: IFFALSE 38618
// begin if not GetBWeapon ( i ) then
38580: LD_VAR 0 8
38584: PPUSH
38585: CALL_OW 269
38589: NOT
38590: IFFALSE 38616
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38592: LD_VAR 0 8
38596: PPUSH
38597: LD_VAR 0 8
38601: PPUSH
38602: LD_VAR 0 2
38606: PPUSH
38607: CALL 39866 0 2
38611: PPUSH
38612: CALL_OW 431
// end ;
38616: GO 38577
38618: POP
38619: POP
// end ; for i = 1 to personel do
38620: LD_ADDR_VAR 0 8
38624: PUSH
38625: DOUBLE
38626: LD_INT 1
38628: DEC
38629: ST_TO_ADDR
38630: LD_VAR 0 6
38634: PUSH
38635: FOR_TO
38636: IFFALSE 39700
// begin if i > 4 then
38638: LD_VAR 0 8
38642: PUSH
38643: LD_INT 4
38645: GREATER
38646: IFFALSE 38650
// break ;
38648: GO 39700
// case i of 1 :
38650: LD_VAR 0 8
38654: PUSH
38655: LD_INT 1
38657: DOUBLE
38658: EQUAL
38659: IFTRUE 38663
38661: GO 38743
38663: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38664: LD_ADDR_VAR 0 12
38668: PUSH
38669: LD_VAR 0 18
38673: PPUSH
38674: LD_INT 22
38676: PUSH
38677: LD_VAR 0 16
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 58
38688: PUSH
38689: EMPTY
38690: LIST
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: LD_INT 30
38697: PUSH
38698: LD_INT 32
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 30
38707: PUSH
38708: LD_INT 4
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 30
38717: PUSH
38718: LD_INT 5
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: PPUSH
38736: CALL_OW 72
38740: ST_TO_ADDR
38741: GO 38965
38743: LD_INT 2
38745: DOUBLE
38746: EQUAL
38747: IFTRUE 38751
38749: GO 38813
38751: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38752: LD_ADDR_VAR 0 12
38756: PUSH
38757: LD_VAR 0 18
38761: PPUSH
38762: LD_INT 22
38764: PUSH
38765: LD_VAR 0 16
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: LD_INT 30
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 30
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: LIST
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PPUSH
38806: CALL_OW 72
38810: ST_TO_ADDR
38811: GO 38965
38813: LD_INT 3
38815: DOUBLE
38816: EQUAL
38817: IFTRUE 38821
38819: GO 38883
38821: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38822: LD_ADDR_VAR 0 12
38826: PUSH
38827: LD_VAR 0 18
38831: PPUSH
38832: LD_INT 22
38834: PUSH
38835: LD_VAR 0 16
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 2
38846: PUSH
38847: LD_INT 30
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 30
38859: PUSH
38860: LD_INT 3
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: LIST
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PPUSH
38876: CALL_OW 72
38880: ST_TO_ADDR
38881: GO 38965
38883: LD_INT 4
38885: DOUBLE
38886: EQUAL
38887: IFTRUE 38891
38889: GO 38964
38891: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38892: LD_ADDR_VAR 0 12
38896: PUSH
38897: LD_VAR 0 18
38901: PPUSH
38902: LD_INT 22
38904: PUSH
38905: LD_VAR 0 16
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: LD_INT 30
38919: PUSH
38920: LD_INT 6
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 30
38929: PUSH
38930: LD_INT 7
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 30
38939: PUSH
38940: LD_INT 8
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PPUSH
38957: CALL_OW 72
38961: ST_TO_ADDR
38962: GO 38965
38964: POP
// if i = 1 then
38965: LD_VAR 0 8
38969: PUSH
38970: LD_INT 1
38972: EQUAL
38973: IFFALSE 39084
// begin tmp := [ ] ;
38975: LD_ADDR_VAR 0 19
38979: PUSH
38980: EMPTY
38981: ST_TO_ADDR
// for j in f do
38982: LD_ADDR_VAR 0 9
38986: PUSH
38987: LD_VAR 0 12
38991: PUSH
38992: FOR_IN
38993: IFFALSE 39066
// if GetBType ( j ) = b_bunker then
38995: LD_VAR 0 9
38999: PPUSH
39000: CALL_OW 266
39004: PUSH
39005: LD_INT 32
39007: EQUAL
39008: IFFALSE 39035
// tmp := Insert ( tmp , 1 , j ) else
39010: LD_ADDR_VAR 0 19
39014: PUSH
39015: LD_VAR 0 19
39019: PPUSH
39020: LD_INT 1
39022: PPUSH
39023: LD_VAR 0 9
39027: PPUSH
39028: CALL_OW 2
39032: ST_TO_ADDR
39033: GO 39064
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39035: LD_ADDR_VAR 0 19
39039: PUSH
39040: LD_VAR 0 19
39044: PPUSH
39045: LD_VAR 0 19
39049: PUSH
39050: LD_INT 1
39052: PLUS
39053: PPUSH
39054: LD_VAR 0 9
39058: PPUSH
39059: CALL_OW 2
39063: ST_TO_ADDR
39064: GO 38992
39066: POP
39067: POP
// if tmp then
39068: LD_VAR 0 19
39072: IFFALSE 39084
// f := tmp ;
39074: LD_ADDR_VAR 0 12
39078: PUSH
39079: LD_VAR 0 19
39083: ST_TO_ADDR
// end ; x := personel [ i ] ;
39084: LD_ADDR_VAR 0 13
39088: PUSH
39089: LD_VAR 0 6
39093: PUSH
39094: LD_VAR 0 8
39098: ARRAY
39099: ST_TO_ADDR
// if x = - 1 then
39100: LD_VAR 0 13
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: EQUAL
39109: IFFALSE 39318
// begin for j in f do
39111: LD_ADDR_VAR 0 9
39115: PUSH
39116: LD_VAR 0 12
39120: PUSH
39121: FOR_IN
39122: IFFALSE 39314
// repeat InitHc ;
39124: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39128: LD_VAR 0 9
39132: PPUSH
39133: CALL_OW 266
39137: PUSH
39138: LD_INT 5
39140: EQUAL
39141: IFFALSE 39211
// begin if UnitsInside ( j ) < 3 then
39143: LD_VAR 0 9
39147: PPUSH
39148: CALL_OW 313
39152: PUSH
39153: LD_INT 3
39155: LESS
39156: IFFALSE 39192
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39158: LD_INT 0
39160: PPUSH
39161: LD_INT 5
39163: PUSH
39164: LD_INT 8
39166: PUSH
39167: LD_INT 9
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: LIST
39174: PUSH
39175: LD_VAR 0 17
39179: ARRAY
39180: PPUSH
39181: LD_VAR 0 4
39185: PPUSH
39186: CALL_OW 380
39190: GO 39209
// PrepareHuman ( false , i , skill ) ;
39192: LD_INT 0
39194: PPUSH
39195: LD_VAR 0 8
39199: PPUSH
39200: LD_VAR 0 4
39204: PPUSH
39205: CALL_OW 380
// end else
39209: GO 39228
// PrepareHuman ( false , i , skill ) ;
39211: LD_INT 0
39213: PPUSH
39214: LD_VAR 0 8
39218: PPUSH
39219: LD_VAR 0 4
39223: PPUSH
39224: CALL_OW 380
// un := CreateHuman ;
39228: LD_ADDR_VAR 0 14
39232: PUSH
39233: CALL_OW 44
39237: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39238: LD_ADDR_VAR 0 7
39242: PUSH
39243: LD_VAR 0 7
39247: PPUSH
39248: LD_INT 1
39250: PPUSH
39251: LD_VAR 0 14
39255: PPUSH
39256: CALL_OW 2
39260: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39261: LD_VAR 0 14
39265: PPUSH
39266: LD_VAR 0 9
39270: PPUSH
39271: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39275: LD_VAR 0 9
39279: PPUSH
39280: CALL_OW 313
39284: PUSH
39285: LD_INT 6
39287: EQUAL
39288: PUSH
39289: LD_VAR 0 9
39293: PPUSH
39294: CALL_OW 266
39298: PUSH
39299: LD_INT 32
39301: PUSH
39302: LD_INT 31
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: IN
39309: OR
39310: IFFALSE 39124
39312: GO 39121
39314: POP
39315: POP
// end else
39316: GO 39698
// for j = 1 to x do
39318: LD_ADDR_VAR 0 9
39322: PUSH
39323: DOUBLE
39324: LD_INT 1
39326: DEC
39327: ST_TO_ADDR
39328: LD_VAR 0 13
39332: PUSH
39333: FOR_TO
39334: IFFALSE 39696
// begin InitHc ;
39336: CALL_OW 19
// if not f then
39340: LD_VAR 0 12
39344: NOT
39345: IFFALSE 39434
// begin PrepareHuman ( false , i , skill ) ;
39347: LD_INT 0
39349: PPUSH
39350: LD_VAR 0 8
39354: PPUSH
39355: LD_VAR 0 4
39359: PPUSH
39360: CALL_OW 380
// un := CreateHuman ;
39364: LD_ADDR_VAR 0 14
39368: PUSH
39369: CALL_OW 44
39373: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39374: LD_ADDR_VAR 0 7
39378: PUSH
39379: LD_VAR 0 7
39383: PPUSH
39384: LD_INT 1
39386: PPUSH
39387: LD_VAR 0 14
39391: PPUSH
39392: CALL_OW 2
39396: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39397: LD_VAR 0 14
39401: PPUSH
39402: LD_VAR 0 1
39406: PPUSH
39407: CALL_OW 250
39411: PPUSH
39412: LD_VAR 0 1
39416: PPUSH
39417: CALL_OW 251
39421: PPUSH
39422: LD_INT 10
39424: PPUSH
39425: LD_INT 0
39427: PPUSH
39428: CALL_OW 50
// continue ;
39432: GO 39333
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39434: LD_VAR 0 12
39438: PUSH
39439: LD_INT 1
39441: ARRAY
39442: PPUSH
39443: CALL_OW 313
39447: PUSH
39448: LD_VAR 0 12
39452: PUSH
39453: LD_INT 1
39455: ARRAY
39456: PPUSH
39457: CALL_OW 266
39461: PUSH
39462: LD_INT 32
39464: PUSH
39465: LD_INT 31
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: IN
39472: AND
39473: PUSH
39474: LD_VAR 0 12
39478: PUSH
39479: LD_INT 1
39481: ARRAY
39482: PPUSH
39483: CALL_OW 313
39487: PUSH
39488: LD_INT 6
39490: EQUAL
39491: OR
39492: IFFALSE 39512
// f := Delete ( f , 1 ) ;
39494: LD_ADDR_VAR 0 12
39498: PUSH
39499: LD_VAR 0 12
39503: PPUSH
39504: LD_INT 1
39506: PPUSH
39507: CALL_OW 3
39511: ST_TO_ADDR
// if not f then
39512: LD_VAR 0 12
39516: NOT
39517: IFFALSE 39535
// begin x := x + 2 ;
39519: LD_ADDR_VAR 0 13
39523: PUSH
39524: LD_VAR 0 13
39528: PUSH
39529: LD_INT 2
39531: PLUS
39532: ST_TO_ADDR
// continue ;
39533: GO 39333
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39535: LD_VAR 0 12
39539: PUSH
39540: LD_INT 1
39542: ARRAY
39543: PPUSH
39544: CALL_OW 266
39548: PUSH
39549: LD_INT 5
39551: EQUAL
39552: IFFALSE 39626
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39554: LD_VAR 0 12
39558: PUSH
39559: LD_INT 1
39561: ARRAY
39562: PPUSH
39563: CALL_OW 313
39567: PUSH
39568: LD_INT 3
39570: LESS
39571: IFFALSE 39607
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39573: LD_INT 0
39575: PPUSH
39576: LD_INT 5
39578: PUSH
39579: LD_INT 8
39581: PUSH
39582: LD_INT 9
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: LIST
39589: PUSH
39590: LD_VAR 0 17
39594: ARRAY
39595: PPUSH
39596: LD_VAR 0 4
39600: PPUSH
39601: CALL_OW 380
39605: GO 39624
// PrepareHuman ( false , i , skill ) ;
39607: LD_INT 0
39609: PPUSH
39610: LD_VAR 0 8
39614: PPUSH
39615: LD_VAR 0 4
39619: PPUSH
39620: CALL_OW 380
// end else
39624: GO 39643
// PrepareHuman ( false , i , skill ) ;
39626: LD_INT 0
39628: PPUSH
39629: LD_VAR 0 8
39633: PPUSH
39634: LD_VAR 0 4
39638: PPUSH
39639: CALL_OW 380
// un := CreateHuman ;
39643: LD_ADDR_VAR 0 14
39647: PUSH
39648: CALL_OW 44
39652: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39653: LD_ADDR_VAR 0 7
39657: PUSH
39658: LD_VAR 0 7
39662: PPUSH
39663: LD_INT 1
39665: PPUSH
39666: LD_VAR 0 14
39670: PPUSH
39671: CALL_OW 2
39675: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39676: LD_VAR 0 14
39680: PPUSH
39681: LD_VAR 0 12
39685: PUSH
39686: LD_INT 1
39688: ARRAY
39689: PPUSH
39690: CALL_OW 52
// end ;
39694: GO 39333
39696: POP
39697: POP
// end ;
39698: GO 38635
39700: POP
39701: POP
// result := result ^ buildings ;
39702: LD_ADDR_VAR 0 7
39706: PUSH
39707: LD_VAR 0 7
39711: PUSH
39712: LD_VAR 0 18
39716: ADD
39717: ST_TO_ADDR
// end else
39718: GO 39861
// begin for i = 1 to personel do
39720: LD_ADDR_VAR 0 8
39724: PUSH
39725: DOUBLE
39726: LD_INT 1
39728: DEC
39729: ST_TO_ADDR
39730: LD_VAR 0 6
39734: PUSH
39735: FOR_TO
39736: IFFALSE 39859
// begin if i > 4 then
39738: LD_VAR 0 8
39742: PUSH
39743: LD_INT 4
39745: GREATER
39746: IFFALSE 39750
// break ;
39748: GO 39859
// x := personel [ i ] ;
39750: LD_ADDR_VAR 0 13
39754: PUSH
39755: LD_VAR 0 6
39759: PUSH
39760: LD_VAR 0 8
39764: ARRAY
39765: ST_TO_ADDR
// if x = - 1 then
39766: LD_VAR 0 13
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: EQUAL
39775: IFFALSE 39779
// continue ;
39777: GO 39735
// PrepareHuman ( false , i , skill ) ;
39779: LD_INT 0
39781: PPUSH
39782: LD_VAR 0 8
39786: PPUSH
39787: LD_VAR 0 4
39791: PPUSH
39792: CALL_OW 380
// un := CreateHuman ;
39796: LD_ADDR_VAR 0 14
39800: PUSH
39801: CALL_OW 44
39805: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39806: LD_VAR 0 14
39810: PPUSH
39811: LD_VAR 0 1
39815: PPUSH
39816: CALL_OW 250
39820: PPUSH
39821: LD_VAR 0 1
39825: PPUSH
39826: CALL_OW 251
39830: PPUSH
39831: LD_INT 10
39833: PPUSH
39834: LD_INT 0
39836: PPUSH
39837: CALL_OW 50
// result := result ^ un ;
39841: LD_ADDR_VAR 0 7
39845: PUSH
39846: LD_VAR 0 7
39850: PUSH
39851: LD_VAR 0 14
39855: ADD
39856: ST_TO_ADDR
// end ;
39857: GO 39735
39859: POP
39860: POP
// end ; end ;
39861: LD_VAR 0 7
39865: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39866: LD_INT 0
39868: PPUSH
39869: PPUSH
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
39875: PPUSH
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
// result := false ;
39884: LD_ADDR_VAR 0 3
39888: PUSH
39889: LD_INT 0
39891: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39892: LD_VAR 0 1
39896: NOT
39897: PUSH
39898: LD_VAR 0 1
39902: PPUSH
39903: CALL_OW 266
39907: PUSH
39908: LD_INT 32
39910: PUSH
39911: LD_INT 33
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: IN
39918: NOT
39919: OR
39920: IFFALSE 39924
// exit ;
39922: GO 41033
// nat := GetNation ( tower ) ;
39924: LD_ADDR_VAR 0 12
39928: PUSH
39929: LD_VAR 0 1
39933: PPUSH
39934: CALL_OW 248
39938: ST_TO_ADDR
// side := GetSide ( tower ) ;
39939: LD_ADDR_VAR 0 16
39943: PUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 255
39953: ST_TO_ADDR
// x := GetX ( tower ) ;
39954: LD_ADDR_VAR 0 10
39958: PUSH
39959: LD_VAR 0 1
39963: PPUSH
39964: CALL_OW 250
39968: ST_TO_ADDR
// y := GetY ( tower ) ;
39969: LD_ADDR_VAR 0 11
39973: PUSH
39974: LD_VAR 0 1
39978: PPUSH
39979: CALL_OW 251
39983: ST_TO_ADDR
// if not x or not y then
39984: LD_VAR 0 10
39988: NOT
39989: PUSH
39990: LD_VAR 0 11
39994: NOT
39995: OR
39996: IFFALSE 40000
// exit ;
39998: GO 41033
// weapon := 0 ;
40000: LD_ADDR_VAR 0 18
40004: PUSH
40005: LD_INT 0
40007: ST_TO_ADDR
// fac_list := [ ] ;
40008: LD_ADDR_VAR 0 17
40012: PUSH
40013: EMPTY
40014: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40015: LD_ADDR_VAR 0 6
40019: PUSH
40020: LD_VAR 0 1
40024: PPUSH
40025: CALL_OW 274
40029: PPUSH
40030: LD_VAR 0 2
40034: PPUSH
40035: LD_INT 0
40037: PPUSH
40038: CALL 37604 0 3
40042: PPUSH
40043: LD_INT 30
40045: PUSH
40046: LD_INT 3
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PPUSH
40053: CALL_OW 72
40057: ST_TO_ADDR
// if not factories then
40058: LD_VAR 0 6
40062: NOT
40063: IFFALSE 40067
// exit ;
40065: GO 41033
// for i in factories do
40067: LD_ADDR_VAR 0 8
40071: PUSH
40072: LD_VAR 0 6
40076: PUSH
40077: FOR_IN
40078: IFFALSE 40103
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40080: LD_ADDR_VAR 0 17
40084: PUSH
40085: LD_VAR 0 17
40089: PUSH
40090: LD_VAR 0 8
40094: PPUSH
40095: CALL_OW 478
40099: UNION
40100: ST_TO_ADDR
40101: GO 40077
40103: POP
40104: POP
// if not fac_list then
40105: LD_VAR 0 17
40109: NOT
40110: IFFALSE 40114
// exit ;
40112: GO 41033
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40114: LD_ADDR_VAR 0 5
40118: PUSH
40119: LD_INT 4
40121: PUSH
40122: LD_INT 5
40124: PUSH
40125: LD_INT 9
40127: PUSH
40128: LD_INT 10
40130: PUSH
40131: LD_INT 6
40133: PUSH
40134: LD_INT 7
40136: PUSH
40137: LD_INT 11
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 27
40151: PUSH
40152: LD_INT 28
40154: PUSH
40155: LD_INT 26
40157: PUSH
40158: LD_INT 30
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 43
40169: PUSH
40170: LD_INT 44
40172: PUSH
40173: LD_INT 46
40175: PUSH
40176: LD_INT 45
40178: PUSH
40179: LD_INT 47
40181: PUSH
40182: LD_INT 49
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: LIST
40197: PUSH
40198: LD_VAR 0 12
40202: ARRAY
40203: ST_TO_ADDR
// list := list isect fac_list ;
40204: LD_ADDR_VAR 0 5
40208: PUSH
40209: LD_VAR 0 5
40213: PUSH
40214: LD_VAR 0 17
40218: ISECT
40219: ST_TO_ADDR
// if not list then
40220: LD_VAR 0 5
40224: NOT
40225: IFFALSE 40229
// exit ;
40227: GO 41033
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40229: LD_VAR 0 12
40233: PUSH
40234: LD_INT 3
40236: EQUAL
40237: PUSH
40238: LD_INT 49
40240: PUSH
40241: LD_VAR 0 5
40245: IN
40246: AND
40247: PUSH
40248: LD_INT 31
40250: PPUSH
40251: LD_VAR 0 16
40255: PPUSH
40256: CALL_OW 321
40260: PUSH
40261: LD_INT 2
40263: EQUAL
40264: AND
40265: IFFALSE 40325
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40267: LD_INT 22
40269: PUSH
40270: LD_VAR 0 16
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 35
40281: PUSH
40282: LD_INT 49
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 91
40291: PUSH
40292: LD_VAR 0 1
40296: PUSH
40297: LD_INT 10
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: LIST
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: LIST
40309: PPUSH
40310: CALL_OW 69
40314: NOT
40315: IFFALSE 40325
// weapon := ru_time_lapser ;
40317: LD_ADDR_VAR 0 18
40321: PUSH
40322: LD_INT 49
40324: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40325: LD_VAR 0 12
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: LD_INT 2
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: IN
40340: PUSH
40341: LD_INT 11
40343: PUSH
40344: LD_VAR 0 5
40348: IN
40349: PUSH
40350: LD_INT 30
40352: PUSH
40353: LD_VAR 0 5
40357: IN
40358: OR
40359: AND
40360: PUSH
40361: LD_INT 6
40363: PPUSH
40364: LD_VAR 0 16
40368: PPUSH
40369: CALL_OW 321
40373: PUSH
40374: LD_INT 2
40376: EQUAL
40377: AND
40378: IFFALSE 40543
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40380: LD_INT 22
40382: PUSH
40383: LD_VAR 0 16
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 2
40394: PUSH
40395: LD_INT 35
40397: PUSH
40398: LD_INT 11
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 35
40407: PUSH
40408: LD_INT 30
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 91
40422: PUSH
40423: LD_VAR 0 1
40427: PUSH
40428: LD_INT 18
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: LIST
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: LIST
40440: PPUSH
40441: CALL_OW 69
40445: NOT
40446: PUSH
40447: LD_INT 22
40449: PUSH
40450: LD_VAR 0 16
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: LD_INT 30
40464: PUSH
40465: LD_INT 32
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 30
40474: PUSH
40475: LD_INT 33
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 91
40489: PUSH
40490: LD_VAR 0 1
40494: PUSH
40495: LD_INT 12
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: LIST
40507: PUSH
40508: EMPTY
40509: LIST
40510: PPUSH
40511: CALL_OW 69
40515: PUSH
40516: LD_INT 2
40518: GREATER
40519: AND
40520: IFFALSE 40543
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40522: LD_ADDR_VAR 0 18
40526: PUSH
40527: LD_INT 11
40529: PUSH
40530: LD_INT 30
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_VAR 0 12
40541: ARRAY
40542: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40543: LD_VAR 0 18
40547: NOT
40548: PUSH
40549: LD_INT 40
40551: PPUSH
40552: LD_VAR 0 16
40556: PPUSH
40557: CALL_OW 321
40561: PUSH
40562: LD_INT 2
40564: EQUAL
40565: AND
40566: PUSH
40567: LD_INT 7
40569: PUSH
40570: LD_VAR 0 5
40574: IN
40575: PUSH
40576: LD_INT 28
40578: PUSH
40579: LD_VAR 0 5
40583: IN
40584: OR
40585: PUSH
40586: LD_INT 45
40588: PUSH
40589: LD_VAR 0 5
40593: IN
40594: OR
40595: AND
40596: IFFALSE 40850
// begin hex := GetHexInfo ( x , y ) ;
40598: LD_ADDR_VAR 0 4
40602: PUSH
40603: LD_VAR 0 10
40607: PPUSH
40608: LD_VAR 0 11
40612: PPUSH
40613: CALL_OW 546
40617: ST_TO_ADDR
// if hex [ 1 ] then
40618: LD_VAR 0 4
40622: PUSH
40623: LD_INT 1
40625: ARRAY
40626: IFFALSE 40630
// exit ;
40628: GO 41033
// height := hex [ 2 ] ;
40630: LD_ADDR_VAR 0 15
40634: PUSH
40635: LD_VAR 0 4
40639: PUSH
40640: LD_INT 2
40642: ARRAY
40643: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40644: LD_ADDR_VAR 0 14
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: LD_INT 3
40657: PUSH
40658: LD_INT 5
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: ST_TO_ADDR
// for i in tmp do
40667: LD_ADDR_VAR 0 8
40671: PUSH
40672: LD_VAR 0 14
40676: PUSH
40677: FOR_IN
40678: IFFALSE 40848
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40680: LD_ADDR_VAR 0 9
40684: PUSH
40685: LD_VAR 0 10
40689: PPUSH
40690: LD_VAR 0 8
40694: PPUSH
40695: LD_INT 5
40697: PPUSH
40698: CALL_OW 272
40702: PUSH
40703: LD_VAR 0 11
40707: PPUSH
40708: LD_VAR 0 8
40712: PPUSH
40713: LD_INT 5
40715: PPUSH
40716: CALL_OW 273
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40725: LD_VAR 0 9
40729: PUSH
40730: LD_INT 1
40732: ARRAY
40733: PPUSH
40734: LD_VAR 0 9
40738: PUSH
40739: LD_INT 2
40741: ARRAY
40742: PPUSH
40743: CALL_OW 488
40747: IFFALSE 40846
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40749: LD_ADDR_VAR 0 4
40753: PUSH
40754: LD_VAR 0 9
40758: PUSH
40759: LD_INT 1
40761: ARRAY
40762: PPUSH
40763: LD_VAR 0 9
40767: PUSH
40768: LD_INT 2
40770: ARRAY
40771: PPUSH
40772: CALL_OW 546
40776: ST_TO_ADDR
// if hex [ 1 ] then
40777: LD_VAR 0 4
40781: PUSH
40782: LD_INT 1
40784: ARRAY
40785: IFFALSE 40789
// continue ;
40787: GO 40677
// h := hex [ 2 ] ;
40789: LD_ADDR_VAR 0 13
40793: PUSH
40794: LD_VAR 0 4
40798: PUSH
40799: LD_INT 2
40801: ARRAY
40802: ST_TO_ADDR
// if h + 7 < height then
40803: LD_VAR 0 13
40807: PUSH
40808: LD_INT 7
40810: PLUS
40811: PUSH
40812: LD_VAR 0 15
40816: LESS
40817: IFFALSE 40846
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40819: LD_ADDR_VAR 0 18
40823: PUSH
40824: LD_INT 7
40826: PUSH
40827: LD_INT 28
40829: PUSH
40830: LD_INT 45
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: LIST
40837: PUSH
40838: LD_VAR 0 12
40842: ARRAY
40843: ST_TO_ADDR
// break ;
40844: GO 40848
// end ; end ; end ;
40846: GO 40677
40848: POP
40849: POP
// end ; if not weapon then
40850: LD_VAR 0 18
40854: NOT
40855: IFFALSE 40915
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40857: LD_ADDR_VAR 0 5
40861: PUSH
40862: LD_VAR 0 5
40866: PUSH
40867: LD_INT 11
40869: PUSH
40870: LD_INT 30
40872: PUSH
40873: LD_INT 49
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: LIST
40880: DIFF
40881: ST_TO_ADDR
// if not list then
40882: LD_VAR 0 5
40886: NOT
40887: IFFALSE 40891
// exit ;
40889: GO 41033
// weapon := list [ rand ( 1 , list ) ] ;
40891: LD_ADDR_VAR 0 18
40895: PUSH
40896: LD_VAR 0 5
40900: PUSH
40901: LD_INT 1
40903: PPUSH
40904: LD_VAR 0 5
40908: PPUSH
40909: CALL_OW 12
40913: ARRAY
40914: ST_TO_ADDR
// end ; if weapon then
40915: LD_VAR 0 18
40919: IFFALSE 41033
// begin tmp := CostOfWeapon ( weapon ) ;
40921: LD_ADDR_VAR 0 14
40925: PUSH
40926: LD_VAR 0 18
40930: PPUSH
40931: CALL_OW 451
40935: ST_TO_ADDR
// j := GetBase ( tower ) ;
40936: LD_ADDR_VAR 0 9
40940: PUSH
40941: LD_VAR 0 1
40945: PPUSH
40946: CALL_OW 274
40950: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40951: LD_VAR 0 9
40955: PPUSH
40956: LD_INT 1
40958: PPUSH
40959: CALL_OW 275
40963: PUSH
40964: LD_VAR 0 14
40968: PUSH
40969: LD_INT 1
40971: ARRAY
40972: GREATEREQUAL
40973: PUSH
40974: LD_VAR 0 9
40978: PPUSH
40979: LD_INT 2
40981: PPUSH
40982: CALL_OW 275
40986: PUSH
40987: LD_VAR 0 14
40991: PUSH
40992: LD_INT 2
40994: ARRAY
40995: GREATEREQUAL
40996: AND
40997: PUSH
40998: LD_VAR 0 9
41002: PPUSH
41003: LD_INT 3
41005: PPUSH
41006: CALL_OW 275
41010: PUSH
41011: LD_VAR 0 14
41015: PUSH
41016: LD_INT 3
41018: ARRAY
41019: GREATEREQUAL
41020: AND
41021: IFFALSE 41033
// result := weapon ;
41023: LD_ADDR_VAR 0 3
41027: PUSH
41028: LD_VAR 0 18
41032: ST_TO_ADDR
// end ; end ;
41033: LD_VAR 0 3
41037: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41038: LD_INT 0
41040: PPUSH
41041: PPUSH
// result := true ;
41042: LD_ADDR_VAR 0 3
41046: PUSH
41047: LD_INT 1
41049: ST_TO_ADDR
// if array1 = array2 then
41050: LD_VAR 0 1
41054: PUSH
41055: LD_VAR 0 2
41059: EQUAL
41060: IFFALSE 41120
// begin for i = 1 to array1 do
41062: LD_ADDR_VAR 0 4
41066: PUSH
41067: DOUBLE
41068: LD_INT 1
41070: DEC
41071: ST_TO_ADDR
41072: LD_VAR 0 1
41076: PUSH
41077: FOR_TO
41078: IFFALSE 41116
// if array1 [ i ] <> array2 [ i ] then
41080: LD_VAR 0 1
41084: PUSH
41085: LD_VAR 0 4
41089: ARRAY
41090: PUSH
41091: LD_VAR 0 2
41095: PUSH
41096: LD_VAR 0 4
41100: ARRAY
41101: NONEQUAL
41102: IFFALSE 41114
// begin result := false ;
41104: LD_ADDR_VAR 0 3
41108: PUSH
41109: LD_INT 0
41111: ST_TO_ADDR
// break ;
41112: GO 41116
// end ;
41114: GO 41077
41116: POP
41117: POP
// end else
41118: GO 41128
// result := false ;
41120: LD_ADDR_VAR 0 3
41124: PUSH
41125: LD_INT 0
41127: ST_TO_ADDR
// end ;
41128: LD_VAR 0 3
41132: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41133: LD_INT 0
41135: PPUSH
41136: PPUSH
// if not array1 or not array2 then
41137: LD_VAR 0 1
41141: NOT
41142: PUSH
41143: LD_VAR 0 2
41147: NOT
41148: OR
41149: IFFALSE 41153
// exit ;
41151: GO 41217
// result := true ;
41153: LD_ADDR_VAR 0 3
41157: PUSH
41158: LD_INT 1
41160: ST_TO_ADDR
// for i = 1 to array1 do
41161: LD_ADDR_VAR 0 4
41165: PUSH
41166: DOUBLE
41167: LD_INT 1
41169: DEC
41170: ST_TO_ADDR
41171: LD_VAR 0 1
41175: PUSH
41176: FOR_TO
41177: IFFALSE 41215
// if array1 [ i ] <> array2 [ i ] then
41179: LD_VAR 0 1
41183: PUSH
41184: LD_VAR 0 4
41188: ARRAY
41189: PUSH
41190: LD_VAR 0 2
41194: PUSH
41195: LD_VAR 0 4
41199: ARRAY
41200: NONEQUAL
41201: IFFALSE 41213
// begin result := false ;
41203: LD_ADDR_VAR 0 3
41207: PUSH
41208: LD_INT 0
41210: ST_TO_ADDR
// break ;
41211: GO 41215
// end ;
41213: GO 41176
41215: POP
41216: POP
// end ;
41217: LD_VAR 0 3
41221: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41222: LD_INT 0
41224: PPUSH
41225: PPUSH
41226: PPUSH
// pom := GetBase ( fac ) ;
41227: LD_ADDR_VAR 0 5
41231: PUSH
41232: LD_VAR 0 1
41236: PPUSH
41237: CALL_OW 274
41241: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41242: LD_ADDR_VAR 0 4
41246: PUSH
41247: LD_VAR 0 2
41251: PUSH
41252: LD_INT 1
41254: ARRAY
41255: PPUSH
41256: LD_VAR 0 2
41260: PUSH
41261: LD_INT 2
41263: ARRAY
41264: PPUSH
41265: LD_VAR 0 2
41269: PUSH
41270: LD_INT 3
41272: ARRAY
41273: PPUSH
41274: LD_VAR 0 2
41278: PUSH
41279: LD_INT 4
41281: ARRAY
41282: PPUSH
41283: CALL_OW 449
41287: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41288: LD_ADDR_VAR 0 3
41292: PUSH
41293: LD_VAR 0 5
41297: PPUSH
41298: LD_INT 1
41300: PPUSH
41301: CALL_OW 275
41305: PUSH
41306: LD_VAR 0 4
41310: PUSH
41311: LD_INT 1
41313: ARRAY
41314: GREATEREQUAL
41315: PUSH
41316: LD_VAR 0 5
41320: PPUSH
41321: LD_INT 2
41323: PPUSH
41324: CALL_OW 275
41328: PUSH
41329: LD_VAR 0 4
41333: PUSH
41334: LD_INT 2
41336: ARRAY
41337: GREATEREQUAL
41338: AND
41339: PUSH
41340: LD_VAR 0 5
41344: PPUSH
41345: LD_INT 3
41347: PPUSH
41348: CALL_OW 275
41352: PUSH
41353: LD_VAR 0 4
41357: PUSH
41358: LD_INT 3
41360: ARRAY
41361: GREATEREQUAL
41362: AND
41363: ST_TO_ADDR
// end ;
41364: LD_VAR 0 3
41368: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41369: LD_INT 0
41371: PPUSH
41372: PPUSH
41373: PPUSH
41374: PPUSH
// pom := GetBase ( building ) ;
41375: LD_ADDR_VAR 0 3
41379: PUSH
41380: LD_VAR 0 1
41384: PPUSH
41385: CALL_OW 274
41389: ST_TO_ADDR
// if not pom then
41390: LD_VAR 0 3
41394: NOT
41395: IFFALSE 41399
// exit ;
41397: GO 41569
// btype := GetBType ( building ) ;
41399: LD_ADDR_VAR 0 5
41403: PUSH
41404: LD_VAR 0 1
41408: PPUSH
41409: CALL_OW 266
41413: ST_TO_ADDR
// if btype = b_armoury then
41414: LD_VAR 0 5
41418: PUSH
41419: LD_INT 4
41421: EQUAL
41422: IFFALSE 41432
// btype := b_barracks ;
41424: LD_ADDR_VAR 0 5
41428: PUSH
41429: LD_INT 5
41431: ST_TO_ADDR
// if btype = b_depot then
41432: LD_VAR 0 5
41436: PUSH
41437: LD_INT 0
41439: EQUAL
41440: IFFALSE 41450
// btype := b_warehouse ;
41442: LD_ADDR_VAR 0 5
41446: PUSH
41447: LD_INT 1
41449: ST_TO_ADDR
// if btype = b_workshop then
41450: LD_VAR 0 5
41454: PUSH
41455: LD_INT 2
41457: EQUAL
41458: IFFALSE 41468
// btype := b_factory ;
41460: LD_ADDR_VAR 0 5
41464: PUSH
41465: LD_INT 3
41467: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41468: LD_ADDR_VAR 0 4
41472: PUSH
41473: LD_VAR 0 5
41477: PPUSH
41478: LD_VAR 0 1
41482: PPUSH
41483: CALL_OW 248
41487: PPUSH
41488: CALL_OW 450
41492: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41493: LD_ADDR_VAR 0 2
41497: PUSH
41498: LD_VAR 0 3
41502: PPUSH
41503: LD_INT 1
41505: PPUSH
41506: CALL_OW 275
41510: PUSH
41511: LD_VAR 0 4
41515: PUSH
41516: LD_INT 1
41518: ARRAY
41519: GREATEREQUAL
41520: PUSH
41521: LD_VAR 0 3
41525: PPUSH
41526: LD_INT 2
41528: PPUSH
41529: CALL_OW 275
41533: PUSH
41534: LD_VAR 0 4
41538: PUSH
41539: LD_INT 2
41541: ARRAY
41542: GREATEREQUAL
41543: AND
41544: PUSH
41545: LD_VAR 0 3
41549: PPUSH
41550: LD_INT 3
41552: PPUSH
41553: CALL_OW 275
41557: PUSH
41558: LD_VAR 0 4
41562: PUSH
41563: LD_INT 3
41565: ARRAY
41566: GREATEREQUAL
41567: AND
41568: ST_TO_ADDR
// end ;
41569: LD_VAR 0 2
41573: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41574: LD_INT 0
41576: PPUSH
41577: PPUSH
41578: PPUSH
// pom := GetBase ( building ) ;
41579: LD_ADDR_VAR 0 4
41583: PUSH
41584: LD_VAR 0 1
41588: PPUSH
41589: CALL_OW 274
41593: ST_TO_ADDR
// if not pom then
41594: LD_VAR 0 4
41598: NOT
41599: IFFALSE 41603
// exit ;
41601: GO 41704
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41603: LD_ADDR_VAR 0 5
41607: PUSH
41608: LD_VAR 0 2
41612: PPUSH
41613: LD_VAR 0 1
41617: PPUSH
41618: CALL_OW 248
41622: PPUSH
41623: CALL_OW 450
41627: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41628: LD_ADDR_VAR 0 3
41632: PUSH
41633: LD_VAR 0 4
41637: PPUSH
41638: LD_INT 1
41640: PPUSH
41641: CALL_OW 275
41645: PUSH
41646: LD_VAR 0 5
41650: PUSH
41651: LD_INT 1
41653: ARRAY
41654: GREATEREQUAL
41655: PUSH
41656: LD_VAR 0 4
41660: PPUSH
41661: LD_INT 2
41663: PPUSH
41664: CALL_OW 275
41668: PUSH
41669: LD_VAR 0 5
41673: PUSH
41674: LD_INT 2
41676: ARRAY
41677: GREATEREQUAL
41678: AND
41679: PUSH
41680: LD_VAR 0 4
41684: PPUSH
41685: LD_INT 3
41687: PPUSH
41688: CALL_OW 275
41692: PUSH
41693: LD_VAR 0 5
41697: PUSH
41698: LD_INT 3
41700: ARRAY
41701: GREATEREQUAL
41702: AND
41703: ST_TO_ADDR
// end ;
41704: LD_VAR 0 3
41708: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41709: LD_INT 0
41711: PPUSH
41712: PPUSH
41713: PPUSH
41714: PPUSH
41715: PPUSH
41716: PPUSH
41717: PPUSH
41718: PPUSH
41719: PPUSH
41720: PPUSH
41721: PPUSH
// result := false ;
41722: LD_ADDR_VAR 0 8
41726: PUSH
41727: LD_INT 0
41729: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41730: LD_VAR 0 5
41734: NOT
41735: PUSH
41736: LD_VAR 0 1
41740: NOT
41741: OR
41742: PUSH
41743: LD_VAR 0 2
41747: NOT
41748: OR
41749: PUSH
41750: LD_VAR 0 3
41754: NOT
41755: OR
41756: IFFALSE 41760
// exit ;
41758: GO 42574
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41760: LD_ADDR_VAR 0 14
41764: PUSH
41765: LD_VAR 0 1
41769: PPUSH
41770: LD_VAR 0 2
41774: PPUSH
41775: LD_VAR 0 3
41779: PPUSH
41780: LD_VAR 0 4
41784: PPUSH
41785: LD_VAR 0 5
41789: PUSH
41790: LD_INT 1
41792: ARRAY
41793: PPUSH
41794: CALL_OW 248
41798: PPUSH
41799: LD_INT 0
41801: PPUSH
41802: CALL 43811 0 6
41806: ST_TO_ADDR
// if not hexes then
41807: LD_VAR 0 14
41811: NOT
41812: IFFALSE 41816
// exit ;
41814: GO 42574
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41816: LD_ADDR_VAR 0 17
41820: PUSH
41821: LD_VAR 0 5
41825: PPUSH
41826: LD_INT 22
41828: PUSH
41829: LD_VAR 0 13
41833: PPUSH
41834: CALL_OW 255
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 2
41845: PUSH
41846: LD_INT 30
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 30
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: LIST
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PPUSH
41875: CALL_OW 72
41879: ST_TO_ADDR
// for i = 1 to hexes do
41880: LD_ADDR_VAR 0 9
41884: PUSH
41885: DOUBLE
41886: LD_INT 1
41888: DEC
41889: ST_TO_ADDR
41890: LD_VAR 0 14
41894: PUSH
41895: FOR_TO
41896: IFFALSE 42572
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41898: LD_ADDR_VAR 0 13
41902: PUSH
41903: LD_VAR 0 14
41907: PUSH
41908: LD_VAR 0 9
41912: ARRAY
41913: PUSH
41914: LD_INT 1
41916: ARRAY
41917: PPUSH
41918: LD_VAR 0 14
41922: PUSH
41923: LD_VAR 0 9
41927: ARRAY
41928: PUSH
41929: LD_INT 2
41931: ARRAY
41932: PPUSH
41933: CALL_OW 428
41937: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41938: LD_VAR 0 14
41942: PUSH
41943: LD_VAR 0 9
41947: ARRAY
41948: PUSH
41949: LD_INT 1
41951: ARRAY
41952: PPUSH
41953: LD_VAR 0 14
41957: PUSH
41958: LD_VAR 0 9
41962: ARRAY
41963: PUSH
41964: LD_INT 2
41966: ARRAY
41967: PPUSH
41968: CALL_OW 351
41972: PUSH
41973: LD_VAR 0 14
41977: PUSH
41978: LD_VAR 0 9
41982: ARRAY
41983: PUSH
41984: LD_INT 1
41986: ARRAY
41987: PPUSH
41988: LD_VAR 0 14
41992: PUSH
41993: LD_VAR 0 9
41997: ARRAY
41998: PUSH
41999: LD_INT 2
42001: ARRAY
42002: PPUSH
42003: CALL_OW 488
42007: NOT
42008: OR
42009: PUSH
42010: LD_VAR 0 13
42014: PPUSH
42015: CALL_OW 247
42019: PUSH
42020: LD_INT 3
42022: EQUAL
42023: OR
42024: IFFALSE 42030
// exit ;
42026: POP
42027: POP
42028: GO 42574
// if not tmp then
42030: LD_VAR 0 13
42034: NOT
42035: IFFALSE 42039
// continue ;
42037: GO 41895
// result := true ;
42039: LD_ADDR_VAR 0 8
42043: PUSH
42044: LD_INT 1
42046: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42047: LD_VAR 0 6
42051: PUSH
42052: LD_VAR 0 13
42056: PPUSH
42057: CALL_OW 247
42061: PUSH
42062: LD_INT 2
42064: EQUAL
42065: AND
42066: PUSH
42067: LD_VAR 0 13
42071: PPUSH
42072: CALL_OW 263
42076: PUSH
42077: LD_INT 1
42079: EQUAL
42080: AND
42081: IFFALSE 42245
// begin if IsDrivenBy ( tmp ) then
42083: LD_VAR 0 13
42087: PPUSH
42088: CALL_OW 311
42092: IFFALSE 42096
// continue ;
42094: GO 41895
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42096: LD_VAR 0 6
42100: PPUSH
42101: LD_INT 3
42103: PUSH
42104: LD_INT 60
42106: PUSH
42107: EMPTY
42108: LIST
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: LD_INT 55
42119: PUSH
42120: EMPTY
42121: LIST
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PPUSH
42131: CALL_OW 72
42135: IFFALSE 42243
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42137: LD_ADDR_VAR 0 18
42141: PUSH
42142: LD_VAR 0 6
42146: PPUSH
42147: LD_INT 3
42149: PUSH
42150: LD_INT 60
42152: PUSH
42153: EMPTY
42154: LIST
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 3
42162: PUSH
42163: LD_INT 55
42165: PUSH
42166: EMPTY
42167: LIST
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PPUSH
42177: CALL_OW 72
42181: PUSH
42182: LD_INT 1
42184: ARRAY
42185: ST_TO_ADDR
// if IsInUnit ( driver ) then
42186: LD_VAR 0 18
42190: PPUSH
42191: CALL_OW 310
42195: IFFALSE 42206
// ComExit ( driver ) ;
42197: LD_VAR 0 18
42201: PPUSH
42202: CALL 66939 0 1
// AddComEnterUnit ( driver , tmp ) ;
42206: LD_VAR 0 18
42210: PPUSH
42211: LD_VAR 0 13
42215: PPUSH
42216: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42220: LD_VAR 0 18
42224: PPUSH
42225: LD_VAR 0 7
42229: PPUSH
42230: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42234: LD_VAR 0 18
42238: PPUSH
42239: CALL_OW 181
// end ; continue ;
42243: GO 41895
// end ; if not cleaners or not tmp in cleaners then
42245: LD_VAR 0 6
42249: NOT
42250: PUSH
42251: LD_VAR 0 13
42255: PUSH
42256: LD_VAR 0 6
42260: IN
42261: NOT
42262: OR
42263: IFFALSE 42570
// begin if dep then
42265: LD_VAR 0 17
42269: IFFALSE 42405
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42271: LD_ADDR_VAR 0 16
42275: PUSH
42276: LD_VAR 0 17
42280: PUSH
42281: LD_INT 1
42283: ARRAY
42284: PPUSH
42285: CALL_OW 250
42289: PPUSH
42290: LD_VAR 0 17
42294: PUSH
42295: LD_INT 1
42297: ARRAY
42298: PPUSH
42299: CALL_OW 254
42303: PPUSH
42304: LD_INT 5
42306: PPUSH
42307: CALL_OW 272
42311: PUSH
42312: LD_VAR 0 17
42316: PUSH
42317: LD_INT 1
42319: ARRAY
42320: PPUSH
42321: CALL_OW 251
42325: PPUSH
42326: LD_VAR 0 17
42330: PUSH
42331: LD_INT 1
42333: ARRAY
42334: PPUSH
42335: CALL_OW 254
42339: PPUSH
42340: LD_INT 5
42342: PPUSH
42343: CALL_OW 273
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42352: LD_VAR 0 16
42356: PUSH
42357: LD_INT 1
42359: ARRAY
42360: PPUSH
42361: LD_VAR 0 16
42365: PUSH
42366: LD_INT 2
42368: ARRAY
42369: PPUSH
42370: CALL_OW 488
42374: IFFALSE 42405
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42376: LD_VAR 0 13
42380: PPUSH
42381: LD_VAR 0 16
42385: PUSH
42386: LD_INT 1
42388: ARRAY
42389: PPUSH
42390: LD_VAR 0 16
42394: PUSH
42395: LD_INT 2
42397: ARRAY
42398: PPUSH
42399: CALL_OW 111
// continue ;
42403: GO 41895
// end ; end ; r := GetDir ( tmp ) ;
42405: LD_ADDR_VAR 0 15
42409: PUSH
42410: LD_VAR 0 13
42414: PPUSH
42415: CALL_OW 254
42419: ST_TO_ADDR
// if r = 5 then
42420: LD_VAR 0 15
42424: PUSH
42425: LD_INT 5
42427: EQUAL
42428: IFFALSE 42438
// r := 0 ;
42430: LD_ADDR_VAR 0 15
42434: PUSH
42435: LD_INT 0
42437: ST_TO_ADDR
// for j = r to 5 do
42438: LD_ADDR_VAR 0 10
42442: PUSH
42443: DOUBLE
42444: LD_VAR 0 15
42448: DEC
42449: ST_TO_ADDR
42450: LD_INT 5
42452: PUSH
42453: FOR_TO
42454: IFFALSE 42568
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42456: LD_ADDR_VAR 0 11
42460: PUSH
42461: LD_VAR 0 13
42465: PPUSH
42466: CALL_OW 250
42470: PPUSH
42471: LD_VAR 0 10
42475: PPUSH
42476: LD_INT 2
42478: PPUSH
42479: CALL_OW 272
42483: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42484: LD_ADDR_VAR 0 12
42488: PUSH
42489: LD_VAR 0 13
42493: PPUSH
42494: CALL_OW 251
42498: PPUSH
42499: LD_VAR 0 10
42503: PPUSH
42504: LD_INT 2
42506: PPUSH
42507: CALL_OW 273
42511: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42512: LD_VAR 0 11
42516: PPUSH
42517: LD_VAR 0 12
42521: PPUSH
42522: CALL_OW 488
42526: PUSH
42527: LD_VAR 0 11
42531: PPUSH
42532: LD_VAR 0 12
42536: PPUSH
42537: CALL_OW 428
42541: NOT
42542: AND
42543: IFFALSE 42566
// begin ComMoveXY ( tmp , _x , _y ) ;
42545: LD_VAR 0 13
42549: PPUSH
42550: LD_VAR 0 11
42554: PPUSH
42555: LD_VAR 0 12
42559: PPUSH
42560: CALL_OW 111
// break ;
42564: GO 42568
// end ; end ;
42566: GO 42453
42568: POP
42569: POP
// end ; end ;
42570: GO 41895
42572: POP
42573: POP
// end ;
42574: LD_VAR 0 8
42578: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42579: LD_INT 0
42581: PPUSH
// result := true ;
42582: LD_ADDR_VAR 0 3
42586: PUSH
42587: LD_INT 1
42589: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42590: LD_VAR 0 2
42594: PUSH
42595: LD_INT 24
42597: DOUBLE
42598: EQUAL
42599: IFTRUE 42609
42601: LD_INT 33
42603: DOUBLE
42604: EQUAL
42605: IFTRUE 42609
42607: GO 42634
42609: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42610: LD_ADDR_VAR 0 3
42614: PUSH
42615: LD_INT 32
42617: PPUSH
42618: LD_VAR 0 1
42622: PPUSH
42623: CALL_OW 321
42627: PUSH
42628: LD_INT 2
42630: EQUAL
42631: ST_TO_ADDR
42632: GO 42954
42634: LD_INT 20
42636: DOUBLE
42637: EQUAL
42638: IFTRUE 42642
42640: GO 42667
42642: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42643: LD_ADDR_VAR 0 3
42647: PUSH
42648: LD_INT 6
42650: PPUSH
42651: LD_VAR 0 1
42655: PPUSH
42656: CALL_OW 321
42660: PUSH
42661: LD_INT 2
42663: EQUAL
42664: ST_TO_ADDR
42665: GO 42954
42667: LD_INT 22
42669: DOUBLE
42670: EQUAL
42671: IFTRUE 42681
42673: LD_INT 36
42675: DOUBLE
42676: EQUAL
42677: IFTRUE 42681
42679: GO 42706
42681: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42682: LD_ADDR_VAR 0 3
42686: PUSH
42687: LD_INT 15
42689: PPUSH
42690: LD_VAR 0 1
42694: PPUSH
42695: CALL_OW 321
42699: PUSH
42700: LD_INT 2
42702: EQUAL
42703: ST_TO_ADDR
42704: GO 42954
42706: LD_INT 30
42708: DOUBLE
42709: EQUAL
42710: IFTRUE 42714
42712: GO 42739
42714: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42715: LD_ADDR_VAR 0 3
42719: PUSH
42720: LD_INT 20
42722: PPUSH
42723: LD_VAR 0 1
42727: PPUSH
42728: CALL_OW 321
42732: PUSH
42733: LD_INT 2
42735: EQUAL
42736: ST_TO_ADDR
42737: GO 42954
42739: LD_INT 28
42741: DOUBLE
42742: EQUAL
42743: IFTRUE 42753
42745: LD_INT 21
42747: DOUBLE
42748: EQUAL
42749: IFTRUE 42753
42751: GO 42778
42753: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42754: LD_ADDR_VAR 0 3
42758: PUSH
42759: LD_INT 21
42761: PPUSH
42762: LD_VAR 0 1
42766: PPUSH
42767: CALL_OW 321
42771: PUSH
42772: LD_INT 2
42774: EQUAL
42775: ST_TO_ADDR
42776: GO 42954
42778: LD_INT 16
42780: DOUBLE
42781: EQUAL
42782: IFTRUE 42786
42784: GO 42813
42786: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42787: LD_ADDR_VAR 0 3
42791: PUSH
42792: LD_EXP 32
42796: PPUSH
42797: LD_VAR 0 1
42801: PPUSH
42802: CALL_OW 321
42806: PUSH
42807: LD_INT 2
42809: EQUAL
42810: ST_TO_ADDR
42811: GO 42954
42813: LD_INT 19
42815: DOUBLE
42816: EQUAL
42817: IFTRUE 42827
42819: LD_INT 23
42821: DOUBLE
42822: EQUAL
42823: IFTRUE 42827
42825: GO 42854
42827: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42828: LD_ADDR_VAR 0 3
42832: PUSH
42833: LD_EXP 31
42837: PPUSH
42838: LD_VAR 0 1
42842: PPUSH
42843: CALL_OW 321
42847: PUSH
42848: LD_INT 2
42850: EQUAL
42851: ST_TO_ADDR
42852: GO 42954
42854: LD_INT 17
42856: DOUBLE
42857: EQUAL
42858: IFTRUE 42862
42860: GO 42887
42862: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42863: LD_ADDR_VAR 0 3
42867: PUSH
42868: LD_INT 39
42870: PPUSH
42871: LD_VAR 0 1
42875: PPUSH
42876: CALL_OW 321
42880: PUSH
42881: LD_INT 2
42883: EQUAL
42884: ST_TO_ADDR
42885: GO 42954
42887: LD_INT 18
42889: DOUBLE
42890: EQUAL
42891: IFTRUE 42895
42893: GO 42920
42895: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42896: LD_ADDR_VAR 0 3
42900: PUSH
42901: LD_INT 40
42903: PPUSH
42904: LD_VAR 0 1
42908: PPUSH
42909: CALL_OW 321
42913: PUSH
42914: LD_INT 2
42916: EQUAL
42917: ST_TO_ADDR
42918: GO 42954
42920: LD_INT 27
42922: DOUBLE
42923: EQUAL
42924: IFTRUE 42928
42926: GO 42953
42928: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42929: LD_ADDR_VAR 0 3
42933: PUSH
42934: LD_INT 35
42936: PPUSH
42937: LD_VAR 0 1
42941: PPUSH
42942: CALL_OW 321
42946: PUSH
42947: LD_INT 2
42949: EQUAL
42950: ST_TO_ADDR
42951: GO 42954
42953: POP
// end ;
42954: LD_VAR 0 3
42958: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42959: LD_INT 0
42961: PPUSH
42962: PPUSH
42963: PPUSH
42964: PPUSH
42965: PPUSH
42966: PPUSH
42967: PPUSH
42968: PPUSH
42969: PPUSH
42970: PPUSH
42971: PPUSH
// result := false ;
42972: LD_ADDR_VAR 0 6
42976: PUSH
42977: LD_INT 0
42979: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42980: LD_VAR 0 1
42984: NOT
42985: PUSH
42986: LD_VAR 0 1
42990: PPUSH
42991: CALL_OW 266
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: IN
43006: NOT
43007: OR
43008: PUSH
43009: LD_VAR 0 2
43013: NOT
43014: OR
43015: PUSH
43016: LD_VAR 0 5
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: LD_INT 3
43032: PUSH
43033: LD_INT 4
43035: PUSH
43036: LD_INT 5
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: IN
43047: NOT
43048: OR
43049: PUSH
43050: LD_VAR 0 3
43054: PPUSH
43055: LD_VAR 0 4
43059: PPUSH
43060: CALL_OW 488
43064: NOT
43065: OR
43066: IFFALSE 43070
// exit ;
43068: GO 43806
// side := GetSide ( depot ) ;
43070: LD_ADDR_VAR 0 9
43074: PUSH
43075: LD_VAR 0 1
43079: PPUSH
43080: CALL_OW 255
43084: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43085: LD_VAR 0 9
43089: PPUSH
43090: LD_VAR 0 2
43094: PPUSH
43095: CALL 42579 0 2
43099: NOT
43100: IFFALSE 43104
// exit ;
43102: GO 43806
// pom := GetBase ( depot ) ;
43104: LD_ADDR_VAR 0 10
43108: PUSH
43109: LD_VAR 0 1
43113: PPUSH
43114: CALL_OW 274
43118: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43119: LD_ADDR_VAR 0 11
43123: PUSH
43124: LD_VAR 0 2
43128: PPUSH
43129: LD_VAR 0 1
43133: PPUSH
43134: CALL_OW 248
43138: PPUSH
43139: CALL_OW 450
43143: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43144: LD_VAR 0 10
43148: PPUSH
43149: LD_INT 1
43151: PPUSH
43152: CALL_OW 275
43156: PUSH
43157: LD_VAR 0 11
43161: PUSH
43162: LD_INT 1
43164: ARRAY
43165: GREATEREQUAL
43166: PUSH
43167: LD_VAR 0 10
43171: PPUSH
43172: LD_INT 2
43174: PPUSH
43175: CALL_OW 275
43179: PUSH
43180: LD_VAR 0 11
43184: PUSH
43185: LD_INT 2
43187: ARRAY
43188: GREATEREQUAL
43189: AND
43190: PUSH
43191: LD_VAR 0 10
43195: PPUSH
43196: LD_INT 3
43198: PPUSH
43199: CALL_OW 275
43203: PUSH
43204: LD_VAR 0 11
43208: PUSH
43209: LD_INT 3
43211: ARRAY
43212: GREATEREQUAL
43213: AND
43214: NOT
43215: IFFALSE 43219
// exit ;
43217: GO 43806
// if GetBType ( depot ) = b_depot then
43219: LD_VAR 0 1
43223: PPUSH
43224: CALL_OW 266
43228: PUSH
43229: LD_INT 0
43231: EQUAL
43232: IFFALSE 43244
// dist := 28 else
43234: LD_ADDR_VAR 0 14
43238: PUSH
43239: LD_INT 28
43241: ST_TO_ADDR
43242: GO 43252
// dist := 36 ;
43244: LD_ADDR_VAR 0 14
43248: PUSH
43249: LD_INT 36
43251: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43252: LD_VAR 0 1
43256: PPUSH
43257: LD_VAR 0 3
43261: PPUSH
43262: LD_VAR 0 4
43266: PPUSH
43267: CALL_OW 297
43271: PUSH
43272: LD_VAR 0 14
43276: GREATER
43277: IFFALSE 43281
// exit ;
43279: GO 43806
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43281: LD_ADDR_VAR 0 12
43285: PUSH
43286: LD_VAR 0 2
43290: PPUSH
43291: LD_VAR 0 3
43295: PPUSH
43296: LD_VAR 0 4
43300: PPUSH
43301: LD_VAR 0 5
43305: PPUSH
43306: LD_VAR 0 1
43310: PPUSH
43311: CALL_OW 248
43315: PPUSH
43316: LD_INT 0
43318: PPUSH
43319: CALL 43811 0 6
43323: ST_TO_ADDR
// if not hexes then
43324: LD_VAR 0 12
43328: NOT
43329: IFFALSE 43333
// exit ;
43331: GO 43806
// hex := GetHexInfo ( x , y ) ;
43333: LD_ADDR_VAR 0 15
43337: PUSH
43338: LD_VAR 0 3
43342: PPUSH
43343: LD_VAR 0 4
43347: PPUSH
43348: CALL_OW 546
43352: ST_TO_ADDR
// if hex [ 1 ] then
43353: LD_VAR 0 15
43357: PUSH
43358: LD_INT 1
43360: ARRAY
43361: IFFALSE 43365
// exit ;
43363: GO 43806
// height := hex [ 2 ] ;
43365: LD_ADDR_VAR 0 13
43369: PUSH
43370: LD_VAR 0 15
43374: PUSH
43375: LD_INT 2
43377: ARRAY
43378: ST_TO_ADDR
// for i = 1 to hexes do
43379: LD_ADDR_VAR 0 7
43383: PUSH
43384: DOUBLE
43385: LD_INT 1
43387: DEC
43388: ST_TO_ADDR
43389: LD_VAR 0 12
43393: PUSH
43394: FOR_TO
43395: IFFALSE 43725
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43397: LD_VAR 0 12
43401: PUSH
43402: LD_VAR 0 7
43406: ARRAY
43407: PUSH
43408: LD_INT 1
43410: ARRAY
43411: PPUSH
43412: LD_VAR 0 12
43416: PUSH
43417: LD_VAR 0 7
43421: ARRAY
43422: PUSH
43423: LD_INT 2
43425: ARRAY
43426: PPUSH
43427: CALL_OW 488
43431: NOT
43432: PUSH
43433: LD_VAR 0 12
43437: PUSH
43438: LD_VAR 0 7
43442: ARRAY
43443: PUSH
43444: LD_INT 1
43446: ARRAY
43447: PPUSH
43448: LD_VAR 0 12
43452: PUSH
43453: LD_VAR 0 7
43457: ARRAY
43458: PUSH
43459: LD_INT 2
43461: ARRAY
43462: PPUSH
43463: CALL_OW 428
43467: PUSH
43468: LD_INT 0
43470: GREATER
43471: OR
43472: PUSH
43473: LD_VAR 0 12
43477: PUSH
43478: LD_VAR 0 7
43482: ARRAY
43483: PUSH
43484: LD_INT 1
43486: ARRAY
43487: PPUSH
43488: LD_VAR 0 12
43492: PUSH
43493: LD_VAR 0 7
43497: ARRAY
43498: PUSH
43499: LD_INT 2
43501: ARRAY
43502: PPUSH
43503: CALL_OW 351
43507: OR
43508: IFFALSE 43514
// exit ;
43510: POP
43511: POP
43512: GO 43806
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43514: LD_ADDR_VAR 0 8
43518: PUSH
43519: LD_VAR 0 12
43523: PUSH
43524: LD_VAR 0 7
43528: ARRAY
43529: PUSH
43530: LD_INT 1
43532: ARRAY
43533: PPUSH
43534: LD_VAR 0 12
43538: PUSH
43539: LD_VAR 0 7
43543: ARRAY
43544: PUSH
43545: LD_INT 2
43547: ARRAY
43548: PPUSH
43549: CALL_OW 546
43553: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43554: LD_VAR 0 8
43558: PUSH
43559: LD_INT 1
43561: ARRAY
43562: PUSH
43563: LD_VAR 0 8
43567: PUSH
43568: LD_INT 2
43570: ARRAY
43571: PUSH
43572: LD_VAR 0 13
43576: PUSH
43577: LD_INT 2
43579: PLUS
43580: GREATER
43581: OR
43582: PUSH
43583: LD_VAR 0 8
43587: PUSH
43588: LD_INT 2
43590: ARRAY
43591: PUSH
43592: LD_VAR 0 13
43596: PUSH
43597: LD_INT 2
43599: MINUS
43600: LESS
43601: OR
43602: PUSH
43603: LD_VAR 0 8
43607: PUSH
43608: LD_INT 3
43610: ARRAY
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: LD_INT 8
43617: PUSH
43618: LD_INT 9
43620: PUSH
43621: LD_INT 10
43623: PUSH
43624: LD_INT 11
43626: PUSH
43627: LD_INT 12
43629: PUSH
43630: LD_INT 13
43632: PUSH
43633: LD_INT 16
43635: PUSH
43636: LD_INT 17
43638: PUSH
43639: LD_INT 18
43641: PUSH
43642: LD_INT 19
43644: PUSH
43645: LD_INT 20
43647: PUSH
43648: LD_INT 21
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: IN
43666: NOT
43667: OR
43668: PUSH
43669: LD_VAR 0 8
43673: PUSH
43674: LD_INT 5
43676: ARRAY
43677: NOT
43678: OR
43679: PUSH
43680: LD_VAR 0 8
43684: PUSH
43685: LD_INT 6
43687: ARRAY
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 2
43694: PUSH
43695: LD_INT 7
43697: PUSH
43698: LD_INT 9
43700: PUSH
43701: LD_INT 10
43703: PUSH
43704: LD_INT 11
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: IN
43715: NOT
43716: OR
43717: IFFALSE 43723
// exit ;
43719: POP
43720: POP
43721: GO 43806
// end ;
43723: GO 43394
43725: POP
43726: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43727: LD_VAR 0 9
43731: PPUSH
43732: LD_VAR 0 3
43736: PPUSH
43737: LD_VAR 0 4
43741: PPUSH
43742: LD_INT 20
43744: PPUSH
43745: CALL 35752 0 4
43749: PUSH
43750: LD_INT 4
43752: ARRAY
43753: IFFALSE 43757
// exit ;
43755: GO 43806
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43757: LD_VAR 0 2
43761: PUSH
43762: LD_INT 29
43764: PUSH
43765: LD_INT 30
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: IN
43772: PUSH
43773: LD_VAR 0 3
43777: PPUSH
43778: LD_VAR 0 4
43782: PPUSH
43783: LD_VAR 0 9
43787: PPUSH
43788: CALL_OW 440
43792: NOT
43793: AND
43794: IFFALSE 43798
// exit ;
43796: GO 43806
// result := true ;
43798: LD_ADDR_VAR 0 6
43802: PUSH
43803: LD_INT 1
43805: ST_TO_ADDR
// end ;
43806: LD_VAR 0 6
43810: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43811: LD_INT 0
43813: PPUSH
43814: PPUSH
43815: PPUSH
43816: PPUSH
43817: PPUSH
43818: PPUSH
43819: PPUSH
43820: PPUSH
43821: PPUSH
43822: PPUSH
43823: PPUSH
43824: PPUSH
43825: PPUSH
43826: PPUSH
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
43831: PPUSH
43832: PPUSH
43833: PPUSH
43834: PPUSH
43835: PPUSH
43836: PPUSH
43837: PPUSH
43838: PPUSH
43839: PPUSH
43840: PPUSH
43841: PPUSH
43842: PPUSH
43843: PPUSH
43844: PPUSH
43845: PPUSH
43846: PPUSH
43847: PPUSH
43848: PPUSH
43849: PPUSH
43850: PPUSH
43851: PPUSH
43852: PPUSH
43853: PPUSH
43854: PPUSH
43855: PPUSH
43856: PPUSH
43857: PPUSH
43858: PPUSH
43859: PPUSH
43860: PPUSH
43861: PPUSH
43862: PPUSH
43863: PPUSH
43864: PPUSH
43865: PPUSH
43866: PPUSH
43867: PPUSH
43868: PPUSH
43869: PPUSH
43870: PPUSH
// result = [ ] ;
43871: LD_ADDR_VAR 0 7
43875: PUSH
43876: EMPTY
43877: ST_TO_ADDR
// temp_list = [ ] ;
43878: LD_ADDR_VAR 0 9
43882: PUSH
43883: EMPTY
43884: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43885: LD_VAR 0 4
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: LD_INT 3
43901: PUSH
43902: LD_INT 4
43904: PUSH
43905: LD_INT 5
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: IN
43916: NOT
43917: PUSH
43918: LD_VAR 0 1
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: IN
43933: PUSH
43934: LD_VAR 0 5
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 2
43944: PUSH
43945: LD_INT 3
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: LIST
43952: IN
43953: NOT
43954: AND
43955: OR
43956: IFFALSE 43960
// exit ;
43958: GO 62351
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43960: LD_VAR 0 1
43964: PUSH
43965: LD_INT 6
43967: PUSH
43968: LD_INT 7
43970: PUSH
43971: LD_INT 8
43973: PUSH
43974: LD_INT 13
43976: PUSH
43977: LD_INT 12
43979: PUSH
43980: LD_INT 15
43982: PUSH
43983: LD_INT 11
43985: PUSH
43986: LD_INT 14
43988: PUSH
43989: LD_INT 10
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: IN
44003: IFFALSE 44013
// btype = b_lab ;
44005: LD_ADDR_VAR 0 1
44009: PUSH
44010: LD_INT 6
44012: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44013: LD_VAR 0 6
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: LIST
44031: IN
44032: NOT
44033: PUSH
44034: LD_VAR 0 1
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: LD_INT 2
44047: PUSH
44048: LD_INT 3
44050: PUSH
44051: LD_INT 6
44053: PUSH
44054: LD_INT 36
44056: PUSH
44057: LD_INT 4
44059: PUSH
44060: LD_INT 5
44062: PUSH
44063: LD_INT 31
44065: PUSH
44066: LD_INT 32
44068: PUSH
44069: LD_INT 33
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: IN
44085: NOT
44086: PUSH
44087: LD_VAR 0 6
44091: PUSH
44092: LD_INT 1
44094: EQUAL
44095: AND
44096: OR
44097: PUSH
44098: LD_VAR 0 1
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: LD_INT 3
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: IN
44113: NOT
44114: PUSH
44115: LD_VAR 0 6
44119: PUSH
44120: LD_INT 2
44122: EQUAL
44123: AND
44124: OR
44125: IFFALSE 44135
// mode = 0 ;
44127: LD_ADDR_VAR 0 6
44131: PUSH
44132: LD_INT 0
44134: ST_TO_ADDR
// case mode of 0 :
44135: LD_VAR 0 6
44139: PUSH
44140: LD_INT 0
44142: DOUBLE
44143: EQUAL
44144: IFTRUE 44148
44146: GO 55601
44148: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44149: LD_ADDR_VAR 0 11
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: LD_INT 0
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: LD_INT 2
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: LD_INT 2
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 2
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 2
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: LD_INT 3
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44342: LD_ADDR_VAR 0 12
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 2
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 3
44499: NEG
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 3
44510: NEG
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44538: LD_ADDR_VAR 0 13
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 2
44641: PUSH
44642: LD_INT 2
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 2
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: LD_INT 3
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 3
44697: NEG
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 3
44709: NEG
44710: PUSH
44711: LD_INT 3
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44737: LD_ADDR_VAR 0 14
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 2
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 2
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: LD_INT 3
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 3
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44933: LD_ADDR_VAR 0 15
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 2
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 3
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 3
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45126: LD_ADDR_VAR 0 16
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: NEG
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 3
45283: PUSH
45284: LD_INT 3
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 2
45293: PUSH
45294: LD_INT 3
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45319: LD_ADDR_VAR 0 17
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45549: LD_ADDR_VAR 0 18
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 2
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45779: LD_ADDR_VAR 0 19
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46009: LD_ADDR_VAR 0 20
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46239: LD_ADDR_VAR 0 21
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46469: LD_ADDR_VAR 0 22
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46699: LD_ADDR_VAR 0 23
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 2
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: LD_INT 3
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 3
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: LD_INT 2
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46979: LD_ADDR_VAR 0 24
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 2
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: LD_INT 2
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 2
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 3
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 3
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47255: LD_ADDR_VAR 0 25
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 2
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: LD_INT 2
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 3
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 2
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: LD_INT 3
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47529: LD_ADDR_VAR 0 26
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: LD_INT 2
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 2
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: LD_INT 3
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47805: LD_ADDR_VAR 0 27
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 3
48038: NEG
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 3
48050: NEG
48051: PUSH
48052: LD_INT 2
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48085: LD_ADDR_VAR 0 28
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 2
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 2
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: LD_INT 2
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: LD_INT 3
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: LD_INT 3
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 3
48320: NEG
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 3
48332: NEG
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48367: LD_ADDR_VAR 0 29
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: NEG
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: LD_INT 3
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 3
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: LD_INT 3
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 3
48611: NEG
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48646: LD_ADDR_VAR 0 30
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 3
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 3
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: LD_INT 3
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 3
48889: NEG
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48924: LD_ADDR_VAR 0 31
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: LD_INT 2
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: LD_INT 3
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 3
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 3
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 3
49167: NEG
49168: PUSH
49169: LD_INT 2
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49202: LD_ADDR_VAR 0 32
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: LD_INT 2
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: LD_INT 2
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: LD_INT 3
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 2
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 3
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: LD_INT 3
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 3
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49480: LD_ADDR_VAR 0 33
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: LD_INT 2
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: LD_INT 3
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 3
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: LD_INT 3
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 3
49724: NEG
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49759: LD_ADDR_VAR 0 34
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 2
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 2
49915: NEG
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: LD_INT 3
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: LD_INT 2
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 3
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 2
49993: NEG
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 3
50004: NEG
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50039: LD_ADDR_VAR 0 35
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: LD_INT 1
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50151: LD_ADDR_VAR 0 36
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 2
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50263: LD_ADDR_VAR 0 37
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50375: LD_ADDR_VAR 0 38
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50487: LD_ADDR_VAR 0 39
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50599: LD_ADDR_VAR 0 40
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50711: LD_ADDR_VAR 0 41
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: NEG
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: LD_INT 2
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: LD_INT 3
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 3
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 3
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 3
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 3
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: LD_INT 3
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 3
50985: NEG
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 3
51008: NEG
51009: PUSH
51010: LD_INT 2
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 3
51020: NEG
51021: PUSH
51022: LD_INT 3
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51061: LD_ADDR_VAR 0 42
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: LD_INT 3
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 3
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 3
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 3
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 3
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: LD_INT 3
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 3
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: LD_INT 2
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 3
51358: NEG
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 3
51370: NEG
51371: PUSH
51372: LD_INT 3
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51411: LD_ADDR_VAR 0 43
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: LD_INT 2
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: NEG
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: NEG
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 3
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 3
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 3
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: LD_INT 3
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: NEG
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 3
51707: NEG
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 3
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51759: LD_ADDR_VAR 0 44
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: LD_INT 2
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 2
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: NEG
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: LD_INT 2
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: LD_INT 3
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 3
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 3
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 3
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 3
52002: PUSH
52003: LD_INT 3
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: LD_INT 3
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: NEG
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 3
52033: NEG
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 3
52044: NEG
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 3
52056: NEG
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 3
52068: NEG
52069: PUSH
52070: LD_INT 3
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52109: LD_ADDR_VAR 0 45
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 2
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: NEG
52288: PUSH
52289: LD_INT 2
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: LD_INT 3
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: LD_INT 3
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: LD_INT 3
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 3
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 3
52355: PUSH
52356: LD_INT 3
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: LD_INT 3
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 3
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 3
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: LD_INT 2
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 3
52406: NEG
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 3
52418: NEG
52419: PUSH
52420: LD_INT 3
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52459: LD_ADDR_VAR 0 46
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: LD_INT 2
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: NEG
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 3
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 3
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 3
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: LD_INT 3
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 3
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 2
52744: NEG
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 3
52755: NEG
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 3
52766: NEG
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52807: LD_ADDR_VAR 0 47
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: NEG
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: LD_INT 2
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52958: LD_ADDR_VAR 0 48
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53105: LD_ADDR_VAR 0 49
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53249: LD_ADDR_VAR 0 50
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 2
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53393: LD_ADDR_VAR 0 51
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 2
53505: NEG
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53540: LD_ADDR_VAR 0 52
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: LD_INT 2
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 2
53644: NEG
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 2
53655: NEG
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: LD_INT 2
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53691: LD_ADDR_VAR 0 53
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: LD_INT 2
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 2
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: LD_INT 2
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: NEG
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53921: LD_ADDR_VAR 0 54
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 1
53990: NEG
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 2
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: LD_INT 2
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54151: LD_ADDR_VAR 0 55
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 2
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: LD_INT 2
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: LD_INT 2
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54381: LD_ADDR_VAR 0 56
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 2
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 2
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 2
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54611: LD_ADDR_VAR 0 57
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 2
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 2
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: NEG
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54841: LD_ADDR_VAR 0 58
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: LD_INT 2
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 2
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 2
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: NEG
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55071: LD_ADDR_VAR 0 59
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55159: LD_ADDR_VAR 0 60
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55247: LD_ADDR_VAR 0 61
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55335: LD_ADDR_VAR 0 62
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 0
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55423: LD_ADDR_VAR 0 63
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55511: LD_ADDR_VAR 0 64
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: ST_TO_ADDR
// end ; 1 :
55599: GO 61496
55601: LD_INT 1
55603: DOUBLE
55604: EQUAL
55605: IFTRUE 55609
55607: GO 58232
55609: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55610: LD_ADDR_VAR 0 11
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: LD_INT 3
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 3
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: LIST
55653: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55654: LD_ADDR_VAR 0 12
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 3
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 3
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: LIST
55694: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55695: LD_ADDR_VAR 0 13
55699: PUSH
55700: LD_INT 3
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 2
55722: PUSH
55723: LD_INT 3
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: LIST
55734: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55735: LD_ADDR_VAR 0 14
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: LD_INT 3
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 3
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: LIST
55775: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55776: LD_ADDR_VAR 0 15
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 3
55794: NEG
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 3
55805: NEG
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: LIST
55819: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55820: LD_ADDR_VAR 0 16
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: LD_INT 3
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 3
55839: NEG
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 3
55851: NEG
55852: PUSH
55853: LD_INT 3
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: LIST
55865: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55866: LD_ADDR_VAR 0 17
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: LD_INT 3
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 3
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: LIST
55909: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55910: LD_ADDR_VAR 0 18
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 3
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 3
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: LIST
55950: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55951: LD_ADDR_VAR 0 19
55955: PUSH
55956: LD_INT 3
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 3
55968: PUSH
55969: LD_INT 3
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: LD_INT 3
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: LIST
55990: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55991: LD_ADDR_VAR 0 20
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: LD_INT 3
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 3
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: LD_INT 2
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: LIST
56031: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56032: LD_ADDR_VAR 0 21
56036: PUSH
56037: LD_INT 2
56039: NEG
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 3
56050: NEG
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 3
56061: NEG
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: LIST
56075: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56076: LD_ADDR_VAR 0 22
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: LD_INT 3
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 3
56095: NEG
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: LD_INT 3
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: LIST
56121: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56122: LD_ADDR_VAR 0 23
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 3
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 4
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 3
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56166: LD_ADDR_VAR 0 24
56170: PUSH
56171: LD_INT 3
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 3
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 4
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: LIST
56206: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56207: LD_ADDR_VAR 0 25
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 4
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 3
56234: PUSH
56235: LD_INT 4
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: LIST
56246: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56247: LD_ADDR_VAR 0 26
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: LD_INT 4
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: LD_INT 3
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: LIST
56287: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56288: LD_ADDR_VAR 0 27
56292: PUSH
56293: LD_INT 3
56295: NEG
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 3
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 4
56317: NEG
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: LIST
56331: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56332: LD_ADDR_VAR 0 28
56336: PUSH
56337: LD_INT 3
56339: NEG
56340: PUSH
56341: LD_INT 3
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 3
56351: NEG
56352: PUSH
56353: LD_INT 4
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 4
56363: NEG
56364: PUSH
56365: LD_INT 3
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56378: LD_ADDR_VAR 0 29
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 3
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: LD_INT 3
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: LD_INT 2
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 4
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 4
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 3
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 5
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: LD_INT 5
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 4
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 6
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 6
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: LD_INT 5
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56533: LD_ADDR_VAR 0 30
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 3
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 3
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 3
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 4
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 4
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 4
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 5
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 5
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 5
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 6
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 6
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56676: LD_ADDR_VAR 0 31
56680: PUSH
56681: LD_INT 3
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 3
56693: PUSH
56694: LD_INT 3
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 3
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 4
56713: PUSH
56714: LD_INT 3
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 4
56723: PUSH
56724: LD_INT 4
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 3
56733: PUSH
56734: LD_INT 4
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 5
56743: PUSH
56744: LD_INT 4
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 5
56753: PUSH
56754: LD_INT 5
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 4
56763: PUSH
56764: LD_INT 5
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 6
56773: PUSH
56774: LD_INT 5
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 6
56783: PUSH
56784: LD_INT 6
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 5
56793: PUSH
56794: LD_INT 6
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56815: LD_ADDR_VAR 0 32
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: LD_INT 3
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 3
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: LD_INT 2
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 4
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 4
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 3
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 5
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: LD_INT 5
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: LD_INT 4
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 6
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 6
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: LD_INT 5
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56958: LD_ADDR_VAR 0 33
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 3
56976: NEG
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 3
56987: NEG
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 3
56999: NEG
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 4
57010: NEG
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 4
57021: NEG
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 4
57033: NEG
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 5
57044: NEG
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 5
57055: NEG
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 5
57067: NEG
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 6
57078: NEG
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 6
57089: NEG
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57113: LD_ADDR_VAR 0 34
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: LD_INT 3
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 3
57132: NEG
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 3
57144: NEG
57145: PUSH
57146: LD_INT 3
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 3
57156: NEG
57157: PUSH
57158: LD_INT 4
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 4
57168: NEG
57169: PUSH
57170: LD_INT 3
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 4
57180: NEG
57181: PUSH
57182: LD_INT 4
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 4
57192: NEG
57193: PUSH
57194: LD_INT 5
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 5
57204: NEG
57205: PUSH
57206: LD_INT 4
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 5
57216: NEG
57217: PUSH
57218: LD_INT 5
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 5
57228: NEG
57229: PUSH
57230: LD_INT 6
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 6
57240: NEG
57241: PUSH
57242: LD_INT 5
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 6
57252: NEG
57253: PUSH
57254: LD_INT 6
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57276: LD_ADDR_VAR 0 41
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 2
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 3
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 2
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: LIST
57319: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57320: LD_ADDR_VAR 0 42
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 3
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: LIST
57360: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57361: LD_ADDR_VAR 0 43
57365: PUSH
57366: LD_INT 2
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 3
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: LD_INT 3
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: LIST
57400: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57401: LD_ADDR_VAR 0 44
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: LIST
57441: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57442: LD_ADDR_VAR 0 45
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 3
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: LIST
57485: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57486: LD_ADDR_VAR 0 46
57490: PUSH
57491: LD_INT 2
57493: NEG
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 2
57505: NEG
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 3
57517: NEG
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: LIST
57531: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57532: LD_ADDR_VAR 0 47
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: LD_INT 3
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57565: LD_ADDR_VAR 0 48
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: LD_INT 2
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 2
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57596: LD_ADDR_VAR 0 49
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: LD_INT 2
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57625: LD_ADDR_VAR 0 50
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: LD_INT 3
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: LD_INT 3
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57654: LD_ADDR_VAR 0 51
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57685: LD_ADDR_VAR 0 52
57689: PUSH
57690: LD_INT 3
57692: NEG
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: LD_INT 2
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57718: LD_ADDR_VAR 0 53
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 3
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 3
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 2
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: LIST
57761: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57762: LD_ADDR_VAR 0 54
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 3
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 3
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: LIST
57802: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57803: LD_ADDR_VAR 0 55
57807: PUSH
57808: LD_INT 3
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 3
57820: PUSH
57821: LD_INT 3
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 2
57830: PUSH
57831: LD_INT 3
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: LIST
57842: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57843: LD_ADDR_VAR 0 56
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: LD_INT 3
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: LD_INT 3
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: LIST
57883: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57884: LD_ADDR_VAR 0 57
57888: PUSH
57889: LD_INT 2
57891: NEG
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 3
57902: NEG
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 3
57913: NEG
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: LIST
57927: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57928: LD_ADDR_VAR 0 58
57932: PUSH
57933: LD_INT 2
57935: NEG
57936: PUSH
57937: LD_INT 3
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 3
57947: NEG
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 3
57959: NEG
57960: PUSH
57961: LD_INT 3
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: LIST
57973: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57974: LD_ADDR_VAR 0 59
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: LIST
58017: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58018: LD_ADDR_VAR 0 60
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: LIST
58058: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58059: LD_ADDR_VAR 0 61
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: LD_INT 2
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: LIST
58098: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58099: LD_ADDR_VAR 0 62
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: NEG
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: LIST
58139: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58140: LD_ADDR_VAR 0 63
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 2
58158: NEG
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: NEG
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: LIST
58183: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58184: LD_ADDR_VAR 0 64
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: NEG
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: LIST
58229: ST_TO_ADDR
// end ; 2 :
58230: GO 61496
58232: LD_INT 2
58234: DOUBLE
58235: EQUAL
58236: IFTRUE 58240
58238: GO 61495
58240: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58241: LD_ADDR_VAR 0 29
58245: PUSH
58246: LD_INT 4
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 4
58258: PUSH
58259: LD_INT 1
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 5
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 5
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 4
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 3
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 3
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 3
58320: PUSH
58321: LD_INT 2
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 5
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: LD_INT 3
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 3
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 4
58361: PUSH
58362: LD_INT 3
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 4
58371: PUSH
58372: LD_INT 4
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 3
58381: PUSH
58382: LD_INT 4
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 4
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: LD_INT 4
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 4
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: LD_INT 4
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: LD_INT 5
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: LD_INT 5
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: LD_INT 4
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: LD_INT 3
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: LD_INT 5
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: LD_INT 3
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: NEG
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 2
58558: NEG
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 4
58580: NEG
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 4
58591: NEG
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 4
58603: NEG
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 4
58626: NEG
58627: PUSH
58628: LD_INT 4
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 4
58638: NEG
58639: PUSH
58640: LD_INT 5
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 3
58650: NEG
58651: PUSH
58652: LD_INT 4
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 3
58662: NEG
58663: PUSH
58664: LD_INT 3
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 4
58674: NEG
58675: PUSH
58676: LD_INT 3
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 5
58686: NEG
58687: PUSH
58688: LD_INT 4
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 5
58698: NEG
58699: PUSH
58700: LD_INT 5
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 3
58710: NEG
58711: PUSH
58712: LD_INT 5
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 5
58722: NEG
58723: PUSH
58724: LD_INT 3
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58779: LD_ADDR_VAR 0 30
58783: PUSH
58784: LD_INT 4
58786: PUSH
58787: LD_INT 4
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 4
58796: PUSH
58797: LD_INT 3
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 5
58806: PUSH
58807: LD_INT 4
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 5
58816: PUSH
58817: LD_INT 5
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 4
58826: PUSH
58827: LD_INT 5
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 3
58836: PUSH
58837: LD_INT 4
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 3
58846: PUSH
58847: LD_INT 3
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 5
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 3
58866: PUSH
58867: LD_INT 5
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 3
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: LD_INT 4
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: LD_INT 4
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: LD_INT 3
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 2
58948: PUSH
58949: LD_INT 4
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: LD_INT 2
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 4
58969: NEG
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 4
58980: NEG
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 3
58992: NEG
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 3
59003: NEG
59004: PUSH
59005: LD_INT 1
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 4
59014: NEG
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 5
59025: NEG
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 5
59036: NEG
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 5
59048: NEG
59049: PUSH
59050: LD_INT 2
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 3
59060: NEG
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 3
59071: NEG
59072: PUSH
59073: LD_INT 3
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 3
59083: NEG
59084: PUSH
59085: LD_INT 4
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: LD_INT 3
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: LD_INT 2
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 3
59119: NEG
59120: PUSH
59121: LD_INT 2
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 4
59131: NEG
59132: PUSH
59133: LD_INT 3
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 4
59143: NEG
59144: PUSH
59145: LD_INT 4
59147: NEG
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 2
59155: NEG
59156: PUSH
59157: LD_INT 4
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 4
59167: NEG
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: LD_INT 4
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: LD_INT 5
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: LD_INT 4
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: LD_INT 3
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: LD_INT 3
59226: NEG
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: LD_INT 4
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: LD_INT 5
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 3
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 2
59269: NEG
59270: PUSH
59271: LD_INT 5
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59326: LD_ADDR_VAR 0 31
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 4
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: LD_INT 3
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 4
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: LD_INT 5
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 5
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: NEG
59384: PUSH
59385: LD_INT 4
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: LD_INT 3
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: LD_INT 5
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: LD_INT 3
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 3
59426: NEG
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 3
59437: NEG
59438: PUSH
59439: LD_INT 1
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 3
59471: NEG
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 4
59482: NEG
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 4
59493: NEG
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 4
59505: NEG
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: LD_INT 2
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 4
59528: NEG
59529: PUSH
59530: LD_INT 4
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 4
59540: NEG
59541: PUSH
59542: LD_INT 5
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 3
59552: NEG
59553: PUSH
59554: LD_INT 4
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 3
59564: NEG
59565: PUSH
59566: LD_INT 3
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 4
59576: NEG
59577: PUSH
59578: LD_INT 3
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 5
59588: NEG
59589: PUSH
59590: LD_INT 4
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 5
59600: NEG
59601: PUSH
59602: LD_INT 5
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 3
59612: NEG
59613: PUSH
59614: LD_INT 5
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 5
59624: NEG
59625: PUSH
59626: LD_INT 3
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 3
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: LD_INT 4
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: LD_INT 3
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: LD_INT 2
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: LD_INT 2
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: LD_INT 3
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: LD_INT 4
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: LD_INT 4
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 4
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 4
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 5
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 5
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 4
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 3
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 3
59810: PUSH
59811: LD_INT 2
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 5
59821: PUSH
59822: LD_INT 2
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59876: LD_ADDR_VAR 0 32
59880: PUSH
59881: LD_INT 4
59883: NEG
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 4
59894: NEG
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 3
59917: NEG
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 4
59928: NEG
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 5
59939: NEG
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 5
59950: NEG
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 5
59962: NEG
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 3
59985: NEG
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: LD_INT 4
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: LD_INT 3
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 2
60021: NEG
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 3
60033: NEG
60034: PUSH
60035: LD_INT 2
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 4
60045: NEG
60046: PUSH
60047: LD_INT 3
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 4
60057: NEG
60058: PUSH
60059: LD_INT 4
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 2
60069: NEG
60070: PUSH
60071: LD_INT 4
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 4
60081: NEG
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 4
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: LD_INT 5
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 4
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: LD_INT 3
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: LD_INT 4
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: LD_INT 5
60164: NEG
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 2
60172: PUSH
60173: LD_INT 3
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: LD_INT 5
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 3
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 3
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 4
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 4
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 3
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 2
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: LD_INT 2
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 4
60278: PUSH
60279: LD_INT 2
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 4
60288: PUSH
60289: LD_INT 4
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 4
60298: PUSH
60299: LD_INT 3
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 5
60308: PUSH
60309: LD_INT 4
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 5
60318: PUSH
60319: LD_INT 5
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 4
60328: PUSH
60329: LD_INT 5
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 3
60338: PUSH
60339: LD_INT 4
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 3
60348: PUSH
60349: LD_INT 3
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 5
60358: PUSH
60359: LD_INT 3
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 3
60368: PUSH
60369: LD_INT 5
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60423: LD_ADDR_VAR 0 33
60427: PUSH
60428: LD_INT 4
60430: NEG
60431: PUSH
60432: LD_INT 4
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 4
60442: NEG
60443: PUSH
60444: LD_INT 5
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 3
60454: NEG
60455: PUSH
60456: LD_INT 4
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 3
60466: NEG
60467: PUSH
60468: LD_INT 3
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 4
60478: NEG
60479: PUSH
60480: LD_INT 3
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 5
60490: NEG
60491: PUSH
60492: LD_INT 4
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 5
60502: NEG
60503: PUSH
60504: LD_INT 5
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 3
60514: NEG
60515: PUSH
60516: LD_INT 5
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 5
60526: NEG
60527: PUSH
60528: LD_INT 3
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: LD_INT 3
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: LD_INT 4
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: LD_INT 3
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: LD_INT 2
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 2
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: LD_INT 3
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: LD_INT 4
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: LD_INT 2
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: LD_INT 4
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 4
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 4
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 5
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 5
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 4
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 3
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 3
60701: PUSH
60702: LD_INT 1
60704: NEG
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 3
60712: PUSH
60713: LD_INT 2
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 5
60723: PUSH
60724: LD_INT 2
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 3
60733: PUSH
60734: LD_INT 3
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 3
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 4
60753: PUSH
60754: LD_INT 3
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 4
60763: PUSH
60764: LD_INT 4
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 3
60773: PUSH
60774: LD_INT 4
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 2
60783: PUSH
60784: LD_INT 3
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 2
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 4
60803: PUSH
60804: LD_INT 2
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 2
60813: PUSH
60814: LD_INT 4
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 4
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: LD_INT 3
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: LD_INT 4
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: LD_INT 5
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: LD_INT 5
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: LD_INT 4
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: LD_INT 3
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 2
60895: PUSH
60896: LD_INT 5
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 2
60905: NEG
60906: PUSH
60907: LD_INT 3
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60961: LD_ADDR_VAR 0 34
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: LD_INT 4
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: LD_INT 5
60982: NEG
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: LD_INT 4
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: LD_INT 3
61004: NEG
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 3
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: LD_INT 4
61027: NEG
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: LD_INT 5
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: LD_INT 3
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 2
61058: NEG
61059: PUSH
61060: LD_INT 5
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 3
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 3
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 4
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 4
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 3
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 2
61131: PUSH
61132: LD_INT 1
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: LD_INT 2
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 4
61153: PUSH
61154: LD_INT 2
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 4
61163: PUSH
61164: LD_INT 4
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 4
61173: PUSH
61174: LD_INT 3
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 5
61183: PUSH
61184: LD_INT 4
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 5
61193: PUSH
61194: LD_INT 5
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 4
61203: PUSH
61204: LD_INT 5
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 3
61213: PUSH
61214: LD_INT 4
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 3
61223: PUSH
61224: LD_INT 3
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 5
61233: PUSH
61234: LD_INT 3
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 3
61243: PUSH
61244: LD_INT 5
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: LD_INT 3
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 2
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: LD_INT 3
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: LD_INT 4
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: LD_INT 4
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: LD_INT 3
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: LD_INT 2
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: LD_INT 4
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: NEG
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 4
61346: NEG
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 4
61357: NEG
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 3
61369: NEG
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 3
61380: NEG
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 4
61391: NEG
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 5
61402: NEG
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 5
61413: NEG
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 5
61425: NEG
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 3
61437: NEG
61438: PUSH
61439: LD_INT 2
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: ST_TO_ADDR
// end ; end ;
61493: GO 61496
61495: POP
// case btype of b_depot , b_warehouse :
61496: LD_VAR 0 1
61500: PUSH
61501: LD_INT 0
61503: DOUBLE
61504: EQUAL
61505: IFTRUE 61515
61507: LD_INT 1
61509: DOUBLE
61510: EQUAL
61511: IFTRUE 61515
61513: GO 61716
61515: POP
// case nation of nation_american :
61516: LD_VAR 0 5
61520: PUSH
61521: LD_INT 1
61523: DOUBLE
61524: EQUAL
61525: IFTRUE 61529
61527: GO 61585
61529: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61530: LD_ADDR_VAR 0 9
61534: PUSH
61535: LD_VAR 0 11
61539: PUSH
61540: LD_VAR 0 12
61544: PUSH
61545: LD_VAR 0 13
61549: PUSH
61550: LD_VAR 0 14
61554: PUSH
61555: LD_VAR 0 15
61559: PUSH
61560: LD_VAR 0 16
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: PUSH
61573: LD_VAR 0 4
61577: PUSH
61578: LD_INT 1
61580: PLUS
61581: ARRAY
61582: ST_TO_ADDR
61583: GO 61714
61585: LD_INT 2
61587: DOUBLE
61588: EQUAL
61589: IFTRUE 61593
61591: GO 61649
61593: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61594: LD_ADDR_VAR 0 9
61598: PUSH
61599: LD_VAR 0 17
61603: PUSH
61604: LD_VAR 0 18
61608: PUSH
61609: LD_VAR 0 19
61613: PUSH
61614: LD_VAR 0 20
61618: PUSH
61619: LD_VAR 0 21
61623: PUSH
61624: LD_VAR 0 22
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: PUSH
61637: LD_VAR 0 4
61641: PUSH
61642: LD_INT 1
61644: PLUS
61645: ARRAY
61646: ST_TO_ADDR
61647: GO 61714
61649: LD_INT 3
61651: DOUBLE
61652: EQUAL
61653: IFTRUE 61657
61655: GO 61713
61657: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61658: LD_ADDR_VAR 0 9
61662: PUSH
61663: LD_VAR 0 23
61667: PUSH
61668: LD_VAR 0 24
61672: PUSH
61673: LD_VAR 0 25
61677: PUSH
61678: LD_VAR 0 26
61682: PUSH
61683: LD_VAR 0 27
61687: PUSH
61688: LD_VAR 0 28
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: PUSH
61701: LD_VAR 0 4
61705: PUSH
61706: LD_INT 1
61708: PLUS
61709: ARRAY
61710: ST_TO_ADDR
61711: GO 61714
61713: POP
61714: GO 62269
61716: LD_INT 2
61718: DOUBLE
61719: EQUAL
61720: IFTRUE 61730
61722: LD_INT 3
61724: DOUBLE
61725: EQUAL
61726: IFTRUE 61730
61728: GO 61786
61730: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61731: LD_ADDR_VAR 0 9
61735: PUSH
61736: LD_VAR 0 29
61740: PUSH
61741: LD_VAR 0 30
61745: PUSH
61746: LD_VAR 0 31
61750: PUSH
61751: LD_VAR 0 32
61755: PUSH
61756: LD_VAR 0 33
61760: PUSH
61761: LD_VAR 0 34
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: PUSH
61774: LD_VAR 0 4
61778: PUSH
61779: LD_INT 1
61781: PLUS
61782: ARRAY
61783: ST_TO_ADDR
61784: GO 62269
61786: LD_INT 16
61788: DOUBLE
61789: EQUAL
61790: IFTRUE 61848
61792: LD_INT 17
61794: DOUBLE
61795: EQUAL
61796: IFTRUE 61848
61798: LD_INT 18
61800: DOUBLE
61801: EQUAL
61802: IFTRUE 61848
61804: LD_INT 19
61806: DOUBLE
61807: EQUAL
61808: IFTRUE 61848
61810: LD_INT 22
61812: DOUBLE
61813: EQUAL
61814: IFTRUE 61848
61816: LD_INT 20
61818: DOUBLE
61819: EQUAL
61820: IFTRUE 61848
61822: LD_INT 21
61824: DOUBLE
61825: EQUAL
61826: IFTRUE 61848
61828: LD_INT 23
61830: DOUBLE
61831: EQUAL
61832: IFTRUE 61848
61834: LD_INT 24
61836: DOUBLE
61837: EQUAL
61838: IFTRUE 61848
61840: LD_INT 25
61842: DOUBLE
61843: EQUAL
61844: IFTRUE 61848
61846: GO 61904
61848: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61849: LD_ADDR_VAR 0 9
61853: PUSH
61854: LD_VAR 0 35
61858: PUSH
61859: LD_VAR 0 36
61863: PUSH
61864: LD_VAR 0 37
61868: PUSH
61869: LD_VAR 0 38
61873: PUSH
61874: LD_VAR 0 39
61878: PUSH
61879: LD_VAR 0 40
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: PUSH
61892: LD_VAR 0 4
61896: PUSH
61897: LD_INT 1
61899: PLUS
61900: ARRAY
61901: ST_TO_ADDR
61902: GO 62269
61904: LD_INT 6
61906: DOUBLE
61907: EQUAL
61908: IFTRUE 61960
61910: LD_INT 7
61912: DOUBLE
61913: EQUAL
61914: IFTRUE 61960
61916: LD_INT 8
61918: DOUBLE
61919: EQUAL
61920: IFTRUE 61960
61922: LD_INT 13
61924: DOUBLE
61925: EQUAL
61926: IFTRUE 61960
61928: LD_INT 12
61930: DOUBLE
61931: EQUAL
61932: IFTRUE 61960
61934: LD_INT 15
61936: DOUBLE
61937: EQUAL
61938: IFTRUE 61960
61940: LD_INT 11
61942: DOUBLE
61943: EQUAL
61944: IFTRUE 61960
61946: LD_INT 14
61948: DOUBLE
61949: EQUAL
61950: IFTRUE 61960
61952: LD_INT 10
61954: DOUBLE
61955: EQUAL
61956: IFTRUE 61960
61958: GO 62016
61960: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61961: LD_ADDR_VAR 0 9
61965: PUSH
61966: LD_VAR 0 41
61970: PUSH
61971: LD_VAR 0 42
61975: PUSH
61976: LD_VAR 0 43
61980: PUSH
61981: LD_VAR 0 44
61985: PUSH
61986: LD_VAR 0 45
61990: PUSH
61991: LD_VAR 0 46
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: PUSH
62004: LD_VAR 0 4
62008: PUSH
62009: LD_INT 1
62011: PLUS
62012: ARRAY
62013: ST_TO_ADDR
62014: GO 62269
62016: LD_INT 36
62018: DOUBLE
62019: EQUAL
62020: IFTRUE 62024
62022: GO 62080
62024: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62025: LD_ADDR_VAR 0 9
62029: PUSH
62030: LD_VAR 0 47
62034: PUSH
62035: LD_VAR 0 48
62039: PUSH
62040: LD_VAR 0 49
62044: PUSH
62045: LD_VAR 0 50
62049: PUSH
62050: LD_VAR 0 51
62054: PUSH
62055: LD_VAR 0 52
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: PUSH
62068: LD_VAR 0 4
62072: PUSH
62073: LD_INT 1
62075: PLUS
62076: ARRAY
62077: ST_TO_ADDR
62078: GO 62269
62080: LD_INT 4
62082: DOUBLE
62083: EQUAL
62084: IFTRUE 62106
62086: LD_INT 5
62088: DOUBLE
62089: EQUAL
62090: IFTRUE 62106
62092: LD_INT 34
62094: DOUBLE
62095: EQUAL
62096: IFTRUE 62106
62098: LD_INT 37
62100: DOUBLE
62101: EQUAL
62102: IFTRUE 62106
62104: GO 62162
62106: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62107: LD_ADDR_VAR 0 9
62111: PUSH
62112: LD_VAR 0 53
62116: PUSH
62117: LD_VAR 0 54
62121: PUSH
62122: LD_VAR 0 55
62126: PUSH
62127: LD_VAR 0 56
62131: PUSH
62132: LD_VAR 0 57
62136: PUSH
62137: LD_VAR 0 58
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: PUSH
62150: LD_VAR 0 4
62154: PUSH
62155: LD_INT 1
62157: PLUS
62158: ARRAY
62159: ST_TO_ADDR
62160: GO 62269
62162: LD_INT 31
62164: DOUBLE
62165: EQUAL
62166: IFTRUE 62212
62168: LD_INT 32
62170: DOUBLE
62171: EQUAL
62172: IFTRUE 62212
62174: LD_INT 33
62176: DOUBLE
62177: EQUAL
62178: IFTRUE 62212
62180: LD_INT 27
62182: DOUBLE
62183: EQUAL
62184: IFTRUE 62212
62186: LD_INT 26
62188: DOUBLE
62189: EQUAL
62190: IFTRUE 62212
62192: LD_INT 28
62194: DOUBLE
62195: EQUAL
62196: IFTRUE 62212
62198: LD_INT 29
62200: DOUBLE
62201: EQUAL
62202: IFTRUE 62212
62204: LD_INT 30
62206: DOUBLE
62207: EQUAL
62208: IFTRUE 62212
62210: GO 62268
62212: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62213: LD_ADDR_VAR 0 9
62217: PUSH
62218: LD_VAR 0 59
62222: PUSH
62223: LD_VAR 0 60
62227: PUSH
62228: LD_VAR 0 61
62232: PUSH
62233: LD_VAR 0 62
62237: PUSH
62238: LD_VAR 0 63
62242: PUSH
62243: LD_VAR 0 64
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: PUSH
62256: LD_VAR 0 4
62260: PUSH
62261: LD_INT 1
62263: PLUS
62264: ARRAY
62265: ST_TO_ADDR
62266: GO 62269
62268: POP
// temp_list2 = [ ] ;
62269: LD_ADDR_VAR 0 10
62273: PUSH
62274: EMPTY
62275: ST_TO_ADDR
// for i in temp_list do
62276: LD_ADDR_VAR 0 8
62280: PUSH
62281: LD_VAR 0 9
62285: PUSH
62286: FOR_IN
62287: IFFALSE 62339
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62289: LD_ADDR_VAR 0 10
62293: PUSH
62294: LD_VAR 0 10
62298: PUSH
62299: LD_VAR 0 8
62303: PUSH
62304: LD_INT 1
62306: ARRAY
62307: PUSH
62308: LD_VAR 0 2
62312: PLUS
62313: PUSH
62314: LD_VAR 0 8
62318: PUSH
62319: LD_INT 2
62321: ARRAY
62322: PUSH
62323: LD_VAR 0 3
62327: PLUS
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: EMPTY
62334: LIST
62335: ADD
62336: ST_TO_ADDR
62337: GO 62286
62339: POP
62340: POP
// result = temp_list2 ;
62341: LD_ADDR_VAR 0 7
62345: PUSH
62346: LD_VAR 0 10
62350: ST_TO_ADDR
// end ;
62351: LD_VAR 0 7
62355: RET
// export function EnemyInRange ( unit , dist ) ; begin
62356: LD_INT 0
62358: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62359: LD_ADDR_VAR 0 3
62363: PUSH
62364: LD_VAR 0 1
62368: PPUSH
62369: CALL_OW 255
62373: PPUSH
62374: LD_VAR 0 1
62378: PPUSH
62379: CALL_OW 250
62383: PPUSH
62384: LD_VAR 0 1
62388: PPUSH
62389: CALL_OW 251
62393: PPUSH
62394: LD_VAR 0 2
62398: PPUSH
62399: CALL 35752 0 4
62403: PUSH
62404: LD_INT 4
62406: ARRAY
62407: ST_TO_ADDR
// end ;
62408: LD_VAR 0 3
62412: RET
// export function PlayerSeeMe ( unit ) ; begin
62413: LD_INT 0
62415: PPUSH
// result := See ( your_side , unit ) ;
62416: LD_ADDR_VAR 0 2
62420: PUSH
62421: LD_OWVAR 2
62425: PPUSH
62426: LD_VAR 0 1
62430: PPUSH
62431: CALL_OW 292
62435: ST_TO_ADDR
// end ;
62436: LD_VAR 0 2
62440: RET
// export function ReverseDir ( unit ) ; begin
62441: LD_INT 0
62443: PPUSH
// if not unit then
62444: LD_VAR 0 1
62448: NOT
62449: IFFALSE 62453
// exit ;
62451: GO 62476
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62453: LD_ADDR_VAR 0 2
62457: PUSH
62458: LD_VAR 0 1
62462: PPUSH
62463: CALL_OW 254
62467: PUSH
62468: LD_INT 3
62470: PLUS
62471: PUSH
62472: LD_INT 6
62474: MOD
62475: ST_TO_ADDR
// end ;
62476: LD_VAR 0 2
62480: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62481: LD_INT 0
62483: PPUSH
62484: PPUSH
62485: PPUSH
62486: PPUSH
62487: PPUSH
// if not hexes then
62488: LD_VAR 0 2
62492: NOT
62493: IFFALSE 62497
// exit ;
62495: GO 62645
// dist := 9999 ;
62497: LD_ADDR_VAR 0 5
62501: PUSH
62502: LD_INT 9999
62504: ST_TO_ADDR
// for i = 1 to hexes do
62505: LD_ADDR_VAR 0 4
62509: PUSH
62510: DOUBLE
62511: LD_INT 1
62513: DEC
62514: ST_TO_ADDR
62515: LD_VAR 0 2
62519: PUSH
62520: FOR_TO
62521: IFFALSE 62633
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62523: LD_VAR 0 1
62527: PPUSH
62528: LD_VAR 0 2
62532: PUSH
62533: LD_VAR 0 4
62537: ARRAY
62538: PUSH
62539: LD_INT 1
62541: ARRAY
62542: PPUSH
62543: LD_VAR 0 2
62547: PUSH
62548: LD_VAR 0 4
62552: ARRAY
62553: PUSH
62554: LD_INT 2
62556: ARRAY
62557: PPUSH
62558: CALL_OW 297
62562: PUSH
62563: LD_VAR 0 5
62567: LESS
62568: IFFALSE 62631
// begin hex := hexes [ i ] ;
62570: LD_ADDR_VAR 0 7
62574: PUSH
62575: LD_VAR 0 2
62579: PUSH
62580: LD_VAR 0 4
62584: ARRAY
62585: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62586: LD_ADDR_VAR 0 5
62590: PUSH
62591: LD_VAR 0 1
62595: PPUSH
62596: LD_VAR 0 2
62600: PUSH
62601: LD_VAR 0 4
62605: ARRAY
62606: PUSH
62607: LD_INT 1
62609: ARRAY
62610: PPUSH
62611: LD_VAR 0 2
62615: PUSH
62616: LD_VAR 0 4
62620: ARRAY
62621: PUSH
62622: LD_INT 2
62624: ARRAY
62625: PPUSH
62626: CALL_OW 297
62630: ST_TO_ADDR
// end ; end ;
62631: GO 62520
62633: POP
62634: POP
// result := hex ;
62635: LD_ADDR_VAR 0 3
62639: PUSH
62640: LD_VAR 0 7
62644: ST_TO_ADDR
// end ;
62645: LD_VAR 0 3
62649: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62650: LD_INT 0
62652: PPUSH
62653: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62654: LD_VAR 0 1
62658: NOT
62659: PUSH
62660: LD_VAR 0 1
62664: PUSH
62665: LD_INT 21
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 23
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PPUSH
62689: CALL_OW 69
62693: IN
62694: NOT
62695: OR
62696: IFFALSE 62700
// exit ;
62698: GO 62747
// for i = 1 to 3 do
62700: LD_ADDR_VAR 0 3
62704: PUSH
62705: DOUBLE
62706: LD_INT 1
62708: DEC
62709: ST_TO_ADDR
62710: LD_INT 3
62712: PUSH
62713: FOR_TO
62714: IFFALSE 62745
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62716: LD_VAR 0 1
62720: PPUSH
62721: CALL_OW 250
62725: PPUSH
62726: LD_VAR 0 1
62730: PPUSH
62731: CALL_OW 251
62735: PPUSH
62736: LD_INT 1
62738: PPUSH
62739: CALL_OW 453
62743: GO 62713
62745: POP
62746: POP
// end ;
62747: LD_VAR 0 2
62751: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62752: LD_INT 0
62754: PPUSH
62755: PPUSH
62756: PPUSH
62757: PPUSH
62758: PPUSH
62759: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62760: LD_VAR 0 1
62764: NOT
62765: PUSH
62766: LD_VAR 0 2
62770: NOT
62771: OR
62772: PUSH
62773: LD_VAR 0 1
62777: PPUSH
62778: CALL_OW 314
62782: OR
62783: IFFALSE 62787
// exit ;
62785: GO 63228
// x := GetX ( enemy_unit ) ;
62787: LD_ADDR_VAR 0 7
62791: PUSH
62792: LD_VAR 0 2
62796: PPUSH
62797: CALL_OW 250
62801: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62802: LD_ADDR_VAR 0 8
62806: PUSH
62807: LD_VAR 0 2
62811: PPUSH
62812: CALL_OW 251
62816: ST_TO_ADDR
// if not x or not y then
62817: LD_VAR 0 7
62821: NOT
62822: PUSH
62823: LD_VAR 0 8
62827: NOT
62828: OR
62829: IFFALSE 62833
// exit ;
62831: GO 63228
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62833: LD_ADDR_VAR 0 6
62837: PUSH
62838: LD_VAR 0 7
62842: PPUSH
62843: LD_INT 0
62845: PPUSH
62846: LD_INT 4
62848: PPUSH
62849: CALL_OW 272
62853: PUSH
62854: LD_VAR 0 8
62858: PPUSH
62859: LD_INT 0
62861: PPUSH
62862: LD_INT 4
62864: PPUSH
62865: CALL_OW 273
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_VAR 0 7
62878: PPUSH
62879: LD_INT 1
62881: PPUSH
62882: LD_INT 4
62884: PPUSH
62885: CALL_OW 272
62889: PUSH
62890: LD_VAR 0 8
62894: PPUSH
62895: LD_INT 1
62897: PPUSH
62898: LD_INT 4
62900: PPUSH
62901: CALL_OW 273
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_VAR 0 7
62914: PPUSH
62915: LD_INT 2
62917: PPUSH
62918: LD_INT 4
62920: PPUSH
62921: CALL_OW 272
62925: PUSH
62926: LD_VAR 0 8
62930: PPUSH
62931: LD_INT 2
62933: PPUSH
62934: LD_INT 4
62936: PPUSH
62937: CALL_OW 273
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_VAR 0 7
62950: PPUSH
62951: LD_INT 3
62953: PPUSH
62954: LD_INT 4
62956: PPUSH
62957: CALL_OW 272
62961: PUSH
62962: LD_VAR 0 8
62966: PPUSH
62967: LD_INT 3
62969: PPUSH
62970: LD_INT 4
62972: PPUSH
62973: CALL_OW 273
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_VAR 0 7
62986: PPUSH
62987: LD_INT 4
62989: PPUSH
62990: LD_INT 4
62992: PPUSH
62993: CALL_OW 272
62997: PUSH
62998: LD_VAR 0 8
63002: PPUSH
63003: LD_INT 4
63005: PPUSH
63006: LD_INT 4
63008: PPUSH
63009: CALL_OW 273
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_VAR 0 7
63022: PPUSH
63023: LD_INT 5
63025: PPUSH
63026: LD_INT 4
63028: PPUSH
63029: CALL_OW 272
63033: PUSH
63034: LD_VAR 0 8
63038: PPUSH
63039: LD_INT 5
63041: PPUSH
63042: LD_INT 4
63044: PPUSH
63045: CALL_OW 273
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: ST_TO_ADDR
// for i = tmp downto 1 do
63062: LD_ADDR_VAR 0 4
63066: PUSH
63067: DOUBLE
63068: LD_VAR 0 6
63072: INC
63073: ST_TO_ADDR
63074: LD_INT 1
63076: PUSH
63077: FOR_DOWNTO
63078: IFFALSE 63179
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63080: LD_VAR 0 6
63084: PUSH
63085: LD_VAR 0 4
63089: ARRAY
63090: PUSH
63091: LD_INT 1
63093: ARRAY
63094: PPUSH
63095: LD_VAR 0 6
63099: PUSH
63100: LD_VAR 0 4
63104: ARRAY
63105: PUSH
63106: LD_INT 2
63108: ARRAY
63109: PPUSH
63110: CALL_OW 488
63114: NOT
63115: PUSH
63116: LD_VAR 0 6
63120: PUSH
63121: LD_VAR 0 4
63125: ARRAY
63126: PUSH
63127: LD_INT 1
63129: ARRAY
63130: PPUSH
63131: LD_VAR 0 6
63135: PUSH
63136: LD_VAR 0 4
63140: ARRAY
63141: PUSH
63142: LD_INT 2
63144: ARRAY
63145: PPUSH
63146: CALL_OW 428
63150: PUSH
63151: LD_INT 0
63153: NONEQUAL
63154: OR
63155: IFFALSE 63177
// tmp := Delete ( tmp , i ) ;
63157: LD_ADDR_VAR 0 6
63161: PUSH
63162: LD_VAR 0 6
63166: PPUSH
63167: LD_VAR 0 4
63171: PPUSH
63172: CALL_OW 3
63176: ST_TO_ADDR
63177: GO 63077
63179: POP
63180: POP
// j := GetClosestHex ( unit , tmp ) ;
63181: LD_ADDR_VAR 0 5
63185: PUSH
63186: LD_VAR 0 1
63190: PPUSH
63191: LD_VAR 0 6
63195: PPUSH
63196: CALL 62481 0 2
63200: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63201: LD_VAR 0 1
63205: PPUSH
63206: LD_VAR 0 5
63210: PUSH
63211: LD_INT 1
63213: ARRAY
63214: PPUSH
63215: LD_VAR 0 5
63219: PUSH
63220: LD_INT 2
63222: ARRAY
63223: PPUSH
63224: CALL_OW 111
// end ;
63228: LD_VAR 0 3
63232: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63233: LD_INT 0
63235: PPUSH
63236: PPUSH
63237: PPUSH
// uc_side = 0 ;
63238: LD_ADDR_OWVAR 20
63242: PUSH
63243: LD_INT 0
63245: ST_TO_ADDR
// uc_nation = 0 ;
63246: LD_ADDR_OWVAR 21
63250: PUSH
63251: LD_INT 0
63253: ST_TO_ADDR
// InitHc_All ( ) ;
63254: CALL_OW 584
// InitVc ;
63258: CALL_OW 20
// if mastodonts then
63262: LD_VAR 0 6
63266: IFFALSE 63333
// for i = 1 to mastodonts do
63268: LD_ADDR_VAR 0 11
63272: PUSH
63273: DOUBLE
63274: LD_INT 1
63276: DEC
63277: ST_TO_ADDR
63278: LD_VAR 0 6
63282: PUSH
63283: FOR_TO
63284: IFFALSE 63331
// begin vc_chassis := 31 ;
63286: LD_ADDR_OWVAR 37
63290: PUSH
63291: LD_INT 31
63293: ST_TO_ADDR
// vc_control := control_rider ;
63294: LD_ADDR_OWVAR 38
63298: PUSH
63299: LD_INT 4
63301: ST_TO_ADDR
// animal := CreateVehicle ;
63302: LD_ADDR_VAR 0 12
63306: PUSH
63307: CALL_OW 45
63311: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63312: LD_VAR 0 12
63316: PPUSH
63317: LD_VAR 0 8
63321: PPUSH
63322: LD_INT 0
63324: PPUSH
63325: CALL 65468 0 3
// end ;
63329: GO 63283
63331: POP
63332: POP
// if horses then
63333: LD_VAR 0 5
63337: IFFALSE 63404
// for i = 1 to horses do
63339: LD_ADDR_VAR 0 11
63343: PUSH
63344: DOUBLE
63345: LD_INT 1
63347: DEC
63348: ST_TO_ADDR
63349: LD_VAR 0 5
63353: PUSH
63354: FOR_TO
63355: IFFALSE 63402
// begin hc_class := 21 ;
63357: LD_ADDR_OWVAR 28
63361: PUSH
63362: LD_INT 21
63364: ST_TO_ADDR
// hc_gallery :=  ;
63365: LD_ADDR_OWVAR 33
63369: PUSH
63370: LD_STRING 
63372: ST_TO_ADDR
// animal := CreateHuman ;
63373: LD_ADDR_VAR 0 12
63377: PUSH
63378: CALL_OW 44
63382: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63383: LD_VAR 0 12
63387: PPUSH
63388: LD_VAR 0 8
63392: PPUSH
63393: LD_INT 0
63395: PPUSH
63396: CALL 65468 0 3
// end ;
63400: GO 63354
63402: POP
63403: POP
// if birds then
63404: LD_VAR 0 1
63408: IFFALSE 63475
// for i = 1 to birds do
63410: LD_ADDR_VAR 0 11
63414: PUSH
63415: DOUBLE
63416: LD_INT 1
63418: DEC
63419: ST_TO_ADDR
63420: LD_VAR 0 1
63424: PUSH
63425: FOR_TO
63426: IFFALSE 63473
// begin hc_class = 18 ;
63428: LD_ADDR_OWVAR 28
63432: PUSH
63433: LD_INT 18
63435: ST_TO_ADDR
// hc_gallery =  ;
63436: LD_ADDR_OWVAR 33
63440: PUSH
63441: LD_STRING 
63443: ST_TO_ADDR
// animal := CreateHuman ;
63444: LD_ADDR_VAR 0 12
63448: PUSH
63449: CALL_OW 44
63453: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63454: LD_VAR 0 12
63458: PPUSH
63459: LD_VAR 0 8
63463: PPUSH
63464: LD_INT 0
63466: PPUSH
63467: CALL 65468 0 3
// end ;
63471: GO 63425
63473: POP
63474: POP
// if tigers then
63475: LD_VAR 0 2
63479: IFFALSE 63563
// for i = 1 to tigers do
63481: LD_ADDR_VAR 0 11
63485: PUSH
63486: DOUBLE
63487: LD_INT 1
63489: DEC
63490: ST_TO_ADDR
63491: LD_VAR 0 2
63495: PUSH
63496: FOR_TO
63497: IFFALSE 63561
// begin hc_class = class_tiger ;
63499: LD_ADDR_OWVAR 28
63503: PUSH
63504: LD_INT 14
63506: ST_TO_ADDR
// hc_gallery =  ;
63507: LD_ADDR_OWVAR 33
63511: PUSH
63512: LD_STRING 
63514: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63515: LD_ADDR_OWVAR 35
63519: PUSH
63520: LD_INT 7
63522: NEG
63523: PPUSH
63524: LD_INT 7
63526: PPUSH
63527: CALL_OW 12
63531: ST_TO_ADDR
// animal := CreateHuman ;
63532: LD_ADDR_VAR 0 12
63536: PUSH
63537: CALL_OW 44
63541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63542: LD_VAR 0 12
63546: PPUSH
63547: LD_VAR 0 8
63551: PPUSH
63552: LD_INT 0
63554: PPUSH
63555: CALL 65468 0 3
// end ;
63559: GO 63496
63561: POP
63562: POP
// if apemans then
63563: LD_VAR 0 3
63567: IFFALSE 63690
// for i = 1 to apemans do
63569: LD_ADDR_VAR 0 11
63573: PUSH
63574: DOUBLE
63575: LD_INT 1
63577: DEC
63578: ST_TO_ADDR
63579: LD_VAR 0 3
63583: PUSH
63584: FOR_TO
63585: IFFALSE 63688
// begin hc_class = class_apeman ;
63587: LD_ADDR_OWVAR 28
63591: PUSH
63592: LD_INT 12
63594: ST_TO_ADDR
// hc_gallery =  ;
63595: LD_ADDR_OWVAR 33
63599: PUSH
63600: LD_STRING 
63602: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63603: LD_ADDR_OWVAR 35
63607: PUSH
63608: LD_INT 2
63610: NEG
63611: PPUSH
63612: LD_INT 2
63614: PPUSH
63615: CALL_OW 12
63619: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63620: LD_ADDR_OWVAR 31
63624: PUSH
63625: LD_INT 1
63627: PPUSH
63628: LD_INT 3
63630: PPUSH
63631: CALL_OW 12
63635: PUSH
63636: LD_INT 1
63638: PPUSH
63639: LD_INT 3
63641: PPUSH
63642: CALL_OW 12
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: LD_INT 0
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: ST_TO_ADDR
// animal := CreateHuman ;
63659: LD_ADDR_VAR 0 12
63663: PUSH
63664: CALL_OW 44
63668: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63669: LD_VAR 0 12
63673: PPUSH
63674: LD_VAR 0 8
63678: PPUSH
63679: LD_INT 0
63681: PPUSH
63682: CALL 65468 0 3
// end ;
63686: GO 63584
63688: POP
63689: POP
// if enchidnas then
63690: LD_VAR 0 4
63694: IFFALSE 63761
// for i = 1 to enchidnas do
63696: LD_ADDR_VAR 0 11
63700: PUSH
63701: DOUBLE
63702: LD_INT 1
63704: DEC
63705: ST_TO_ADDR
63706: LD_VAR 0 4
63710: PUSH
63711: FOR_TO
63712: IFFALSE 63759
// begin hc_class = 13 ;
63714: LD_ADDR_OWVAR 28
63718: PUSH
63719: LD_INT 13
63721: ST_TO_ADDR
// hc_gallery =  ;
63722: LD_ADDR_OWVAR 33
63726: PUSH
63727: LD_STRING 
63729: ST_TO_ADDR
// animal := CreateHuman ;
63730: LD_ADDR_VAR 0 12
63734: PUSH
63735: CALL_OW 44
63739: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63740: LD_VAR 0 12
63744: PPUSH
63745: LD_VAR 0 8
63749: PPUSH
63750: LD_INT 0
63752: PPUSH
63753: CALL 65468 0 3
// end ;
63757: GO 63711
63759: POP
63760: POP
// if fishes then
63761: LD_VAR 0 7
63765: IFFALSE 63832
// for i = 1 to fishes do
63767: LD_ADDR_VAR 0 11
63771: PUSH
63772: DOUBLE
63773: LD_INT 1
63775: DEC
63776: ST_TO_ADDR
63777: LD_VAR 0 7
63781: PUSH
63782: FOR_TO
63783: IFFALSE 63830
// begin hc_class = 20 ;
63785: LD_ADDR_OWVAR 28
63789: PUSH
63790: LD_INT 20
63792: ST_TO_ADDR
// hc_gallery =  ;
63793: LD_ADDR_OWVAR 33
63797: PUSH
63798: LD_STRING 
63800: ST_TO_ADDR
// animal := CreateHuman ;
63801: LD_ADDR_VAR 0 12
63805: PUSH
63806: CALL_OW 44
63810: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63811: LD_VAR 0 12
63815: PPUSH
63816: LD_VAR 0 9
63820: PPUSH
63821: LD_INT 0
63823: PPUSH
63824: CALL 65468 0 3
// end ;
63828: GO 63782
63830: POP
63831: POP
// end ;
63832: LD_VAR 0 10
63836: RET
// export function WantHeal ( sci , unit ) ; begin
63837: LD_INT 0
63839: PPUSH
// if GetTaskList ( sci ) > 0 then
63840: LD_VAR 0 1
63844: PPUSH
63845: CALL_OW 437
63849: PUSH
63850: LD_INT 0
63852: GREATER
63853: IFFALSE 63923
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63855: LD_VAR 0 1
63859: PPUSH
63860: CALL_OW 437
63864: PUSH
63865: LD_INT 1
63867: ARRAY
63868: PUSH
63869: LD_INT 1
63871: ARRAY
63872: PUSH
63873: LD_STRING l
63875: EQUAL
63876: PUSH
63877: LD_VAR 0 1
63881: PPUSH
63882: CALL_OW 437
63886: PUSH
63887: LD_INT 1
63889: ARRAY
63890: PUSH
63891: LD_INT 4
63893: ARRAY
63894: PUSH
63895: LD_VAR 0 2
63899: EQUAL
63900: AND
63901: IFFALSE 63913
// result := true else
63903: LD_ADDR_VAR 0 3
63907: PUSH
63908: LD_INT 1
63910: ST_TO_ADDR
63911: GO 63921
// result := false ;
63913: LD_ADDR_VAR 0 3
63917: PUSH
63918: LD_INT 0
63920: ST_TO_ADDR
// end else
63921: GO 63931
// result := false ;
63923: LD_ADDR_VAR 0 3
63927: PUSH
63928: LD_INT 0
63930: ST_TO_ADDR
// end ;
63931: LD_VAR 0 3
63935: RET
// export function HealTarget ( sci ) ; begin
63936: LD_INT 0
63938: PPUSH
// if not sci then
63939: LD_VAR 0 1
63943: NOT
63944: IFFALSE 63948
// exit ;
63946: GO 64013
// result := 0 ;
63948: LD_ADDR_VAR 0 2
63952: PUSH
63953: LD_INT 0
63955: ST_TO_ADDR
// if GetTaskList ( sci ) then
63956: LD_VAR 0 1
63960: PPUSH
63961: CALL_OW 437
63965: IFFALSE 64013
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63967: LD_VAR 0 1
63971: PPUSH
63972: CALL_OW 437
63976: PUSH
63977: LD_INT 1
63979: ARRAY
63980: PUSH
63981: LD_INT 1
63983: ARRAY
63984: PUSH
63985: LD_STRING l
63987: EQUAL
63988: IFFALSE 64013
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63990: LD_ADDR_VAR 0 2
63994: PUSH
63995: LD_VAR 0 1
63999: PPUSH
64000: CALL_OW 437
64004: PUSH
64005: LD_INT 1
64007: ARRAY
64008: PUSH
64009: LD_INT 4
64011: ARRAY
64012: ST_TO_ADDR
// end ;
64013: LD_VAR 0 2
64017: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64018: LD_INT 0
64020: PPUSH
64021: PPUSH
64022: PPUSH
64023: PPUSH
// if not base_units then
64024: LD_VAR 0 1
64028: NOT
64029: IFFALSE 64033
// exit ;
64031: GO 64120
// result := false ;
64033: LD_ADDR_VAR 0 2
64037: PUSH
64038: LD_INT 0
64040: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64041: LD_ADDR_VAR 0 5
64045: PUSH
64046: LD_VAR 0 1
64050: PPUSH
64051: LD_INT 21
64053: PUSH
64054: LD_INT 3
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PPUSH
64061: CALL_OW 72
64065: ST_TO_ADDR
// if not tmp then
64066: LD_VAR 0 5
64070: NOT
64071: IFFALSE 64075
// exit ;
64073: GO 64120
// for i in tmp do
64075: LD_ADDR_VAR 0 3
64079: PUSH
64080: LD_VAR 0 5
64084: PUSH
64085: FOR_IN
64086: IFFALSE 64118
// begin result := EnemyInRange ( i , 22 ) ;
64088: LD_ADDR_VAR 0 2
64092: PUSH
64093: LD_VAR 0 3
64097: PPUSH
64098: LD_INT 22
64100: PPUSH
64101: CALL 62356 0 2
64105: ST_TO_ADDR
// if result then
64106: LD_VAR 0 2
64110: IFFALSE 64116
// exit ;
64112: POP
64113: POP
64114: GO 64120
// end ;
64116: GO 64085
64118: POP
64119: POP
// end ;
64120: LD_VAR 0 2
64124: RET
// export function FilterByTag ( units , tag ) ; begin
64125: LD_INT 0
64127: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64128: LD_ADDR_VAR 0 3
64132: PUSH
64133: LD_VAR 0 1
64137: PPUSH
64138: LD_INT 120
64140: PUSH
64141: LD_VAR 0 2
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PPUSH
64150: CALL_OW 72
64154: ST_TO_ADDR
// end ;
64155: LD_VAR 0 3
64159: RET
// export function IsDriver ( un ) ; begin
64160: LD_INT 0
64162: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64163: LD_ADDR_VAR 0 2
64167: PUSH
64168: LD_VAR 0 1
64172: PUSH
64173: LD_INT 55
64175: PUSH
64176: EMPTY
64177: LIST
64178: PPUSH
64179: CALL_OW 69
64183: IN
64184: ST_TO_ADDR
// end ;
64185: LD_VAR 0 2
64189: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64190: LD_INT 0
64192: PPUSH
64193: PPUSH
// list := [ ] ;
64194: LD_ADDR_VAR 0 5
64198: PUSH
64199: EMPTY
64200: ST_TO_ADDR
// case d of 0 :
64201: LD_VAR 0 3
64205: PUSH
64206: LD_INT 0
64208: DOUBLE
64209: EQUAL
64210: IFTRUE 64214
64212: GO 64347
64214: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64215: LD_ADDR_VAR 0 5
64219: PUSH
64220: LD_VAR 0 1
64224: PUSH
64225: LD_INT 4
64227: MINUS
64228: PUSH
64229: LD_VAR 0 2
64233: PUSH
64234: LD_INT 4
64236: MINUS
64237: PUSH
64238: LD_INT 2
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: LIST
64245: PUSH
64246: LD_VAR 0 1
64250: PUSH
64251: LD_INT 3
64253: MINUS
64254: PUSH
64255: LD_VAR 0 2
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: LIST
64267: PUSH
64268: LD_VAR 0 1
64272: PUSH
64273: LD_INT 4
64275: PLUS
64276: PUSH
64277: LD_VAR 0 2
64281: PUSH
64282: LD_INT 4
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: LIST
64289: PUSH
64290: LD_VAR 0 1
64294: PUSH
64295: LD_INT 3
64297: PLUS
64298: PUSH
64299: LD_VAR 0 2
64303: PUSH
64304: LD_INT 3
64306: PLUS
64307: PUSH
64308: LD_INT 5
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: LIST
64315: PUSH
64316: LD_VAR 0 1
64320: PUSH
64321: LD_VAR 0 2
64325: PUSH
64326: LD_INT 4
64328: PLUS
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: LIST
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: ST_TO_ADDR
// end ; 1 :
64345: GO 65045
64347: LD_INT 1
64349: DOUBLE
64350: EQUAL
64351: IFTRUE 64355
64353: GO 64488
64355: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64356: LD_ADDR_VAR 0 5
64360: PUSH
64361: LD_VAR 0 1
64365: PUSH
64366: LD_VAR 0 2
64370: PUSH
64371: LD_INT 4
64373: MINUS
64374: PUSH
64375: LD_INT 3
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: LIST
64382: PUSH
64383: LD_VAR 0 1
64387: PUSH
64388: LD_INT 3
64390: MINUS
64391: PUSH
64392: LD_VAR 0 2
64396: PUSH
64397: LD_INT 3
64399: MINUS
64400: PUSH
64401: LD_INT 2
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: LIST
64408: PUSH
64409: LD_VAR 0 1
64413: PUSH
64414: LD_INT 4
64416: MINUS
64417: PUSH
64418: LD_VAR 0 2
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: LIST
64430: PUSH
64431: LD_VAR 0 1
64435: PUSH
64436: LD_VAR 0 2
64440: PUSH
64441: LD_INT 3
64443: PLUS
64444: PUSH
64445: LD_INT 0
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: LIST
64452: PUSH
64453: LD_VAR 0 1
64457: PUSH
64458: LD_INT 4
64460: PLUS
64461: PUSH
64462: LD_VAR 0 2
64466: PUSH
64467: LD_INT 4
64469: PLUS
64470: PUSH
64471: LD_INT 5
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: LIST
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: ST_TO_ADDR
// end ; 2 :
64486: GO 65045
64488: LD_INT 2
64490: DOUBLE
64491: EQUAL
64492: IFTRUE 64496
64494: GO 64625
64496: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64497: LD_ADDR_VAR 0 5
64501: PUSH
64502: LD_VAR 0 1
64506: PUSH
64507: LD_VAR 0 2
64511: PUSH
64512: LD_INT 3
64514: MINUS
64515: PUSH
64516: LD_INT 3
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: LIST
64523: PUSH
64524: LD_VAR 0 1
64528: PUSH
64529: LD_INT 4
64531: PLUS
64532: PUSH
64533: LD_VAR 0 2
64537: PUSH
64538: LD_INT 4
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: LIST
64545: PUSH
64546: LD_VAR 0 1
64550: PUSH
64551: LD_VAR 0 2
64555: PUSH
64556: LD_INT 4
64558: PLUS
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: LIST
64567: PUSH
64568: LD_VAR 0 1
64572: PUSH
64573: LD_INT 3
64575: MINUS
64576: PUSH
64577: LD_VAR 0 2
64581: PUSH
64582: LD_INT 1
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: LIST
64589: PUSH
64590: LD_VAR 0 1
64594: PUSH
64595: LD_INT 4
64597: MINUS
64598: PUSH
64599: LD_VAR 0 2
64603: PUSH
64604: LD_INT 4
64606: MINUS
64607: PUSH
64608: LD_INT 2
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: LIST
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: ST_TO_ADDR
// end ; 3 :
64623: GO 65045
64625: LD_INT 3
64627: DOUBLE
64628: EQUAL
64629: IFTRUE 64633
64631: GO 64766
64633: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64634: LD_ADDR_VAR 0 5
64638: PUSH
64639: LD_VAR 0 1
64643: PUSH
64644: LD_INT 3
64646: PLUS
64647: PUSH
64648: LD_VAR 0 2
64652: PUSH
64653: LD_INT 4
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: LIST
64660: PUSH
64661: LD_VAR 0 1
64665: PUSH
64666: LD_INT 4
64668: PLUS
64669: PUSH
64670: LD_VAR 0 2
64674: PUSH
64675: LD_INT 4
64677: PLUS
64678: PUSH
64679: LD_INT 5
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: PUSH
64687: LD_VAR 0 1
64691: PUSH
64692: LD_INT 4
64694: MINUS
64695: PUSH
64696: LD_VAR 0 2
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: LIST
64708: PUSH
64709: LD_VAR 0 1
64713: PUSH
64714: LD_VAR 0 2
64718: PUSH
64719: LD_INT 4
64721: MINUS
64722: PUSH
64723: LD_INT 3
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: LIST
64730: PUSH
64731: LD_VAR 0 1
64735: PUSH
64736: LD_INT 3
64738: MINUS
64739: PUSH
64740: LD_VAR 0 2
64744: PUSH
64745: LD_INT 3
64747: MINUS
64748: PUSH
64749: LD_INT 2
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: LIST
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: ST_TO_ADDR
// end ; 4 :
64764: GO 65045
64766: LD_INT 4
64768: DOUBLE
64769: EQUAL
64770: IFTRUE 64774
64772: GO 64907
64774: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64775: LD_ADDR_VAR 0 5
64779: PUSH
64780: LD_VAR 0 1
64784: PUSH
64785: LD_VAR 0 2
64789: PUSH
64790: LD_INT 4
64792: PLUS
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: LIST
64801: PUSH
64802: LD_VAR 0 1
64806: PUSH
64807: LD_INT 3
64809: PLUS
64810: PUSH
64811: LD_VAR 0 2
64815: PUSH
64816: LD_INT 3
64818: PLUS
64819: PUSH
64820: LD_INT 5
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: PUSH
64828: LD_VAR 0 1
64832: PUSH
64833: LD_INT 4
64835: PLUS
64836: PUSH
64837: LD_VAR 0 2
64841: PUSH
64842: LD_INT 4
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: LIST
64849: PUSH
64850: LD_VAR 0 1
64854: PUSH
64855: LD_VAR 0 2
64859: PUSH
64860: LD_INT 3
64862: MINUS
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: LIST
64871: PUSH
64872: LD_VAR 0 1
64876: PUSH
64877: LD_INT 4
64879: MINUS
64880: PUSH
64881: LD_VAR 0 2
64885: PUSH
64886: LD_INT 4
64888: MINUS
64889: PUSH
64890: LD_INT 2
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: LIST
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: ST_TO_ADDR
// end ; 5 :
64905: GO 65045
64907: LD_INT 5
64909: DOUBLE
64910: EQUAL
64911: IFTRUE 64915
64913: GO 65044
64915: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64916: LD_ADDR_VAR 0 5
64920: PUSH
64921: LD_VAR 0 1
64925: PUSH
64926: LD_INT 4
64928: MINUS
64929: PUSH
64930: LD_VAR 0 2
64934: PUSH
64935: LD_INT 1
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: LIST
64942: PUSH
64943: LD_VAR 0 1
64947: PUSH
64948: LD_VAR 0 2
64952: PUSH
64953: LD_INT 4
64955: MINUS
64956: PUSH
64957: LD_INT 3
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: PUSH
64965: LD_VAR 0 1
64969: PUSH
64970: LD_INT 4
64972: PLUS
64973: PUSH
64974: LD_VAR 0 2
64978: PUSH
64979: LD_INT 4
64981: PLUS
64982: PUSH
64983: LD_INT 5
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: LIST
64990: PUSH
64991: LD_VAR 0 1
64995: PUSH
64996: LD_INT 3
64998: PLUS
64999: PUSH
65000: LD_VAR 0 2
65004: PUSH
65005: LD_INT 4
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: LIST
65012: PUSH
65013: LD_VAR 0 1
65017: PUSH
65018: LD_VAR 0 2
65022: PUSH
65023: LD_INT 3
65025: PLUS
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: LIST
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: ST_TO_ADDR
// end ; end ;
65042: GO 65045
65044: POP
// result := list ;
65045: LD_ADDR_VAR 0 4
65049: PUSH
65050: LD_VAR 0 5
65054: ST_TO_ADDR
// end ;
65055: LD_VAR 0 4
65059: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65060: LD_INT 0
65062: PPUSH
65063: PPUSH
65064: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65065: LD_VAR 0 1
65069: NOT
65070: PUSH
65071: LD_VAR 0 2
65075: PUSH
65076: LD_INT 1
65078: PUSH
65079: LD_INT 2
65081: PUSH
65082: LD_INT 3
65084: PUSH
65085: LD_INT 4
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: IN
65094: NOT
65095: OR
65096: IFFALSE 65100
// exit ;
65098: GO 65192
// tmp := [ ] ;
65100: LD_ADDR_VAR 0 5
65104: PUSH
65105: EMPTY
65106: ST_TO_ADDR
// for i in units do
65107: LD_ADDR_VAR 0 4
65111: PUSH
65112: LD_VAR 0 1
65116: PUSH
65117: FOR_IN
65118: IFFALSE 65161
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65120: LD_ADDR_VAR 0 5
65124: PUSH
65125: LD_VAR 0 5
65129: PPUSH
65130: LD_VAR 0 5
65134: PUSH
65135: LD_INT 1
65137: PLUS
65138: PPUSH
65139: LD_VAR 0 4
65143: PPUSH
65144: LD_VAR 0 2
65148: PPUSH
65149: CALL_OW 259
65153: PPUSH
65154: CALL_OW 2
65158: ST_TO_ADDR
65159: GO 65117
65161: POP
65162: POP
// if not tmp then
65163: LD_VAR 0 5
65167: NOT
65168: IFFALSE 65172
// exit ;
65170: GO 65192
// result := SortListByListDesc ( units , tmp ) ;
65172: LD_ADDR_VAR 0 3
65176: PUSH
65177: LD_VAR 0 1
65181: PPUSH
65182: LD_VAR 0 5
65186: PPUSH
65187: CALL_OW 77
65191: ST_TO_ADDR
// end ;
65192: LD_VAR 0 3
65196: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65197: LD_INT 0
65199: PPUSH
65200: PPUSH
65201: PPUSH
// result := false ;
65202: LD_ADDR_VAR 0 3
65206: PUSH
65207: LD_INT 0
65209: ST_TO_ADDR
// x := GetX ( building ) ;
65210: LD_ADDR_VAR 0 4
65214: PUSH
65215: LD_VAR 0 2
65219: PPUSH
65220: CALL_OW 250
65224: ST_TO_ADDR
// y := GetY ( building ) ;
65225: LD_ADDR_VAR 0 5
65229: PUSH
65230: LD_VAR 0 2
65234: PPUSH
65235: CALL_OW 251
65239: ST_TO_ADDR
// if not building or not x or not y then
65240: LD_VAR 0 2
65244: NOT
65245: PUSH
65246: LD_VAR 0 4
65250: NOT
65251: OR
65252: PUSH
65253: LD_VAR 0 5
65257: NOT
65258: OR
65259: IFFALSE 65263
// exit ;
65261: GO 65355
// if GetTaskList ( unit ) then
65263: LD_VAR 0 1
65267: PPUSH
65268: CALL_OW 437
65272: IFFALSE 65355
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65274: LD_STRING e
65276: PUSH
65277: LD_VAR 0 1
65281: PPUSH
65282: CALL_OW 437
65286: PUSH
65287: LD_INT 1
65289: ARRAY
65290: PUSH
65291: LD_INT 1
65293: ARRAY
65294: EQUAL
65295: PUSH
65296: LD_VAR 0 4
65300: PUSH
65301: LD_VAR 0 1
65305: PPUSH
65306: CALL_OW 437
65310: PUSH
65311: LD_INT 1
65313: ARRAY
65314: PUSH
65315: LD_INT 2
65317: ARRAY
65318: EQUAL
65319: AND
65320: PUSH
65321: LD_VAR 0 5
65325: PUSH
65326: LD_VAR 0 1
65330: PPUSH
65331: CALL_OW 437
65335: PUSH
65336: LD_INT 1
65338: ARRAY
65339: PUSH
65340: LD_INT 3
65342: ARRAY
65343: EQUAL
65344: AND
65345: IFFALSE 65355
// result := true end ;
65347: LD_ADDR_VAR 0 3
65351: PUSH
65352: LD_INT 1
65354: ST_TO_ADDR
// end ;
65355: LD_VAR 0 3
65359: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65360: LD_INT 0
65362: PPUSH
// result := false ;
65363: LD_ADDR_VAR 0 4
65367: PUSH
65368: LD_INT 0
65370: ST_TO_ADDR
// if GetTaskList ( unit ) then
65371: LD_VAR 0 1
65375: PPUSH
65376: CALL_OW 437
65380: IFFALSE 65463
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65382: LD_STRING M
65384: PUSH
65385: LD_VAR 0 1
65389: PPUSH
65390: CALL_OW 437
65394: PUSH
65395: LD_INT 1
65397: ARRAY
65398: PUSH
65399: LD_INT 1
65401: ARRAY
65402: EQUAL
65403: PUSH
65404: LD_VAR 0 2
65408: PUSH
65409: LD_VAR 0 1
65413: PPUSH
65414: CALL_OW 437
65418: PUSH
65419: LD_INT 1
65421: ARRAY
65422: PUSH
65423: LD_INT 2
65425: ARRAY
65426: EQUAL
65427: AND
65428: PUSH
65429: LD_VAR 0 3
65433: PUSH
65434: LD_VAR 0 1
65438: PPUSH
65439: CALL_OW 437
65443: PUSH
65444: LD_INT 1
65446: ARRAY
65447: PUSH
65448: LD_INT 3
65450: ARRAY
65451: EQUAL
65452: AND
65453: IFFALSE 65463
// result := true ;
65455: LD_ADDR_VAR 0 4
65459: PUSH
65460: LD_INT 1
65462: ST_TO_ADDR
// end ; end ;
65463: LD_VAR 0 4
65467: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65468: LD_INT 0
65470: PPUSH
65471: PPUSH
65472: PPUSH
65473: PPUSH
// if not unit or not area then
65474: LD_VAR 0 1
65478: NOT
65479: PUSH
65480: LD_VAR 0 2
65484: NOT
65485: OR
65486: IFFALSE 65490
// exit ;
65488: GO 65654
// tmp := AreaToList ( area , i ) ;
65490: LD_ADDR_VAR 0 6
65494: PUSH
65495: LD_VAR 0 2
65499: PPUSH
65500: LD_VAR 0 5
65504: PPUSH
65505: CALL_OW 517
65509: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65510: LD_ADDR_VAR 0 5
65514: PUSH
65515: DOUBLE
65516: LD_INT 1
65518: DEC
65519: ST_TO_ADDR
65520: LD_VAR 0 6
65524: PUSH
65525: LD_INT 1
65527: ARRAY
65528: PUSH
65529: FOR_TO
65530: IFFALSE 65652
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65532: LD_ADDR_VAR 0 7
65536: PUSH
65537: LD_VAR 0 6
65541: PUSH
65542: LD_INT 1
65544: ARRAY
65545: PUSH
65546: LD_VAR 0 5
65550: ARRAY
65551: PUSH
65552: LD_VAR 0 6
65556: PUSH
65557: LD_INT 2
65559: ARRAY
65560: PUSH
65561: LD_VAR 0 5
65565: ARRAY
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65571: LD_VAR 0 7
65575: PUSH
65576: LD_INT 1
65578: ARRAY
65579: PPUSH
65580: LD_VAR 0 7
65584: PUSH
65585: LD_INT 2
65587: ARRAY
65588: PPUSH
65589: CALL_OW 428
65593: PUSH
65594: LD_INT 0
65596: EQUAL
65597: IFFALSE 65650
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65599: LD_VAR 0 1
65603: PPUSH
65604: LD_VAR 0 7
65608: PUSH
65609: LD_INT 1
65611: ARRAY
65612: PPUSH
65613: LD_VAR 0 7
65617: PUSH
65618: LD_INT 2
65620: ARRAY
65621: PPUSH
65622: LD_VAR 0 3
65626: PPUSH
65627: CALL_OW 48
// result := IsPlaced ( unit ) ;
65631: LD_ADDR_VAR 0 4
65635: PUSH
65636: LD_VAR 0 1
65640: PPUSH
65641: CALL_OW 305
65645: ST_TO_ADDR
// exit ;
65646: POP
65647: POP
65648: GO 65654
// end ; end ;
65650: GO 65529
65652: POP
65653: POP
// end ;
65654: LD_VAR 0 4
65658: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65659: LD_INT 0
65661: PPUSH
65662: PPUSH
65663: PPUSH
// if not side or side > 8 then
65664: LD_VAR 0 1
65668: NOT
65669: PUSH
65670: LD_VAR 0 1
65674: PUSH
65675: LD_INT 8
65677: GREATER
65678: OR
65679: IFFALSE 65683
// exit ;
65681: GO 65870
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65683: LD_ADDR_VAR 0 4
65687: PUSH
65688: LD_INT 22
65690: PUSH
65691: LD_VAR 0 1
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 21
65702: PUSH
65703: LD_INT 3
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PPUSH
65714: CALL_OW 69
65718: ST_TO_ADDR
// if not tmp then
65719: LD_VAR 0 4
65723: NOT
65724: IFFALSE 65728
// exit ;
65726: GO 65870
// enable_addtolog := true ;
65728: LD_ADDR_OWVAR 81
65732: PUSH
65733: LD_INT 1
65735: ST_TO_ADDR
// AddToLog ( [ ) ;
65736: LD_STRING [
65738: PPUSH
65739: CALL_OW 561
// for i in tmp do
65743: LD_ADDR_VAR 0 3
65747: PUSH
65748: LD_VAR 0 4
65752: PUSH
65753: FOR_IN
65754: IFFALSE 65861
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65756: LD_STRING [
65758: PUSH
65759: LD_VAR 0 3
65763: PPUSH
65764: CALL_OW 266
65768: STR
65769: PUSH
65770: LD_STRING , 
65772: STR
65773: PUSH
65774: LD_VAR 0 3
65778: PPUSH
65779: CALL_OW 250
65783: STR
65784: PUSH
65785: LD_STRING , 
65787: STR
65788: PUSH
65789: LD_VAR 0 3
65793: PPUSH
65794: CALL_OW 251
65798: STR
65799: PUSH
65800: LD_STRING , 
65802: STR
65803: PUSH
65804: LD_VAR 0 3
65808: PPUSH
65809: CALL_OW 254
65813: STR
65814: PUSH
65815: LD_STRING , 
65817: STR
65818: PUSH
65819: LD_VAR 0 3
65823: PPUSH
65824: LD_INT 1
65826: PPUSH
65827: CALL_OW 268
65831: STR
65832: PUSH
65833: LD_STRING , 
65835: STR
65836: PUSH
65837: LD_VAR 0 3
65841: PPUSH
65842: LD_INT 2
65844: PPUSH
65845: CALL_OW 268
65849: STR
65850: PUSH
65851: LD_STRING ],
65853: STR
65854: PPUSH
65855: CALL_OW 561
// end ;
65859: GO 65753
65861: POP
65862: POP
// AddToLog ( ]; ) ;
65863: LD_STRING ];
65865: PPUSH
65866: CALL_OW 561
// end ;
65870: LD_VAR 0 2
65874: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65875: LD_INT 0
65877: PPUSH
65878: PPUSH
65879: PPUSH
65880: PPUSH
65881: PPUSH
// if not area or not rate or not max then
65882: LD_VAR 0 1
65886: NOT
65887: PUSH
65888: LD_VAR 0 2
65892: NOT
65893: OR
65894: PUSH
65895: LD_VAR 0 4
65899: NOT
65900: OR
65901: IFFALSE 65905
// exit ;
65903: GO 66094
// while 1 do
65905: LD_INT 1
65907: IFFALSE 66094
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65909: LD_ADDR_VAR 0 9
65913: PUSH
65914: LD_VAR 0 1
65918: PPUSH
65919: LD_INT 1
65921: PPUSH
65922: CALL_OW 287
65926: PUSH
65927: LD_INT 10
65929: MUL
65930: ST_TO_ADDR
// r := rate / 10 ;
65931: LD_ADDR_VAR 0 7
65935: PUSH
65936: LD_VAR 0 2
65940: PUSH
65941: LD_INT 10
65943: DIVREAL
65944: ST_TO_ADDR
// time := 1 1$00 ;
65945: LD_ADDR_VAR 0 8
65949: PUSH
65950: LD_INT 2100
65952: ST_TO_ADDR
// if amount < min then
65953: LD_VAR 0 9
65957: PUSH
65958: LD_VAR 0 3
65962: LESS
65963: IFFALSE 65981
// r := r * 2 else
65965: LD_ADDR_VAR 0 7
65969: PUSH
65970: LD_VAR 0 7
65974: PUSH
65975: LD_INT 2
65977: MUL
65978: ST_TO_ADDR
65979: GO 66007
// if amount > max then
65981: LD_VAR 0 9
65985: PUSH
65986: LD_VAR 0 4
65990: GREATER
65991: IFFALSE 66007
// r := r / 2 ;
65993: LD_ADDR_VAR 0 7
65997: PUSH
65998: LD_VAR 0 7
66002: PUSH
66003: LD_INT 2
66005: DIVREAL
66006: ST_TO_ADDR
// time := time / r ;
66007: LD_ADDR_VAR 0 8
66011: PUSH
66012: LD_VAR 0 8
66016: PUSH
66017: LD_VAR 0 7
66021: DIVREAL
66022: ST_TO_ADDR
// if time < 0 then
66023: LD_VAR 0 8
66027: PUSH
66028: LD_INT 0
66030: LESS
66031: IFFALSE 66048
// time := time * - 1 ;
66033: LD_ADDR_VAR 0 8
66037: PUSH
66038: LD_VAR 0 8
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: MUL
66047: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66048: LD_VAR 0 8
66052: PUSH
66053: LD_INT 35
66055: PPUSH
66056: LD_INT 875
66058: PPUSH
66059: CALL_OW 12
66063: PLUS
66064: PPUSH
66065: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66069: LD_INT 1
66071: PPUSH
66072: LD_INT 5
66074: PPUSH
66075: CALL_OW 12
66079: PPUSH
66080: LD_VAR 0 1
66084: PPUSH
66085: LD_INT 1
66087: PPUSH
66088: CALL_OW 55
// end ;
66092: GO 65905
// end ;
66094: LD_VAR 0 5
66098: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66099: LD_INT 0
66101: PPUSH
66102: PPUSH
66103: PPUSH
66104: PPUSH
66105: PPUSH
66106: PPUSH
66107: PPUSH
66108: PPUSH
// if not turrets or not factories then
66109: LD_VAR 0 1
66113: NOT
66114: PUSH
66115: LD_VAR 0 2
66119: NOT
66120: OR
66121: IFFALSE 66125
// exit ;
66123: GO 66432
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66125: LD_ADDR_VAR 0 10
66129: PUSH
66130: LD_INT 5
66132: PUSH
66133: LD_INT 6
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 2
66142: PUSH
66143: LD_INT 4
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 3
66152: PUSH
66153: LD_INT 5
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 24
66167: PUSH
66168: LD_INT 25
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 23
66177: PUSH
66178: LD_INT 27
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 42
66191: PUSH
66192: LD_INT 43
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 44
66201: PUSH
66202: LD_INT 46
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 45
66211: PUSH
66212: LD_INT 47
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: LIST
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: LIST
66228: ST_TO_ADDR
// result := [ ] ;
66229: LD_ADDR_VAR 0 3
66233: PUSH
66234: EMPTY
66235: ST_TO_ADDR
// for i in turrets do
66236: LD_ADDR_VAR 0 4
66240: PUSH
66241: LD_VAR 0 1
66245: PUSH
66246: FOR_IN
66247: IFFALSE 66430
// begin nat := GetNation ( i ) ;
66249: LD_ADDR_VAR 0 7
66253: PUSH
66254: LD_VAR 0 4
66258: PPUSH
66259: CALL_OW 248
66263: ST_TO_ADDR
// weapon := 0 ;
66264: LD_ADDR_VAR 0 8
66268: PUSH
66269: LD_INT 0
66271: ST_TO_ADDR
// if not nat then
66272: LD_VAR 0 7
66276: NOT
66277: IFFALSE 66281
// continue ;
66279: GO 66246
// for j in list [ nat ] do
66281: LD_ADDR_VAR 0 5
66285: PUSH
66286: LD_VAR 0 10
66290: PUSH
66291: LD_VAR 0 7
66295: ARRAY
66296: PUSH
66297: FOR_IN
66298: IFFALSE 66339
// if GetBWeapon ( i ) = j [ 1 ] then
66300: LD_VAR 0 4
66304: PPUSH
66305: CALL_OW 269
66309: PUSH
66310: LD_VAR 0 5
66314: PUSH
66315: LD_INT 1
66317: ARRAY
66318: EQUAL
66319: IFFALSE 66337
// begin weapon := j [ 2 ] ;
66321: LD_ADDR_VAR 0 8
66325: PUSH
66326: LD_VAR 0 5
66330: PUSH
66331: LD_INT 2
66333: ARRAY
66334: ST_TO_ADDR
// break ;
66335: GO 66339
// end ;
66337: GO 66297
66339: POP
66340: POP
// if not weapon then
66341: LD_VAR 0 8
66345: NOT
66346: IFFALSE 66350
// continue ;
66348: GO 66246
// for k in factories do
66350: LD_ADDR_VAR 0 6
66354: PUSH
66355: LD_VAR 0 2
66359: PUSH
66360: FOR_IN
66361: IFFALSE 66426
// begin weapons := AvailableWeaponList ( k ) ;
66363: LD_ADDR_VAR 0 9
66367: PUSH
66368: LD_VAR 0 6
66372: PPUSH
66373: CALL_OW 478
66377: ST_TO_ADDR
// if not weapons then
66378: LD_VAR 0 9
66382: NOT
66383: IFFALSE 66387
// continue ;
66385: GO 66360
// if weapon in weapons then
66387: LD_VAR 0 8
66391: PUSH
66392: LD_VAR 0 9
66396: IN
66397: IFFALSE 66424
// begin result := [ i , weapon ] ;
66399: LD_ADDR_VAR 0 3
66403: PUSH
66404: LD_VAR 0 4
66408: PUSH
66409: LD_VAR 0 8
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: ST_TO_ADDR
// exit ;
66418: POP
66419: POP
66420: POP
66421: POP
66422: GO 66432
// end ; end ;
66424: GO 66360
66426: POP
66427: POP
// end ;
66428: GO 66246
66430: POP
66431: POP
// end ;
66432: LD_VAR 0 3
66436: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66437: LD_INT 0
66439: PPUSH
// if not side or side > 8 then
66440: LD_VAR 0 3
66444: NOT
66445: PUSH
66446: LD_VAR 0 3
66450: PUSH
66451: LD_INT 8
66453: GREATER
66454: OR
66455: IFFALSE 66459
// exit ;
66457: GO 66518
// if not range then
66459: LD_VAR 0 4
66463: NOT
66464: IFFALSE 66475
// range := - 12 ;
66466: LD_ADDR_VAR 0 4
66470: PUSH
66471: LD_INT 12
66473: NEG
66474: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66475: LD_VAR 0 1
66479: PPUSH
66480: LD_VAR 0 2
66484: PPUSH
66485: LD_VAR 0 3
66489: PPUSH
66490: LD_VAR 0 4
66494: PPUSH
66495: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66499: LD_VAR 0 1
66503: PPUSH
66504: LD_VAR 0 2
66508: PPUSH
66509: LD_VAR 0 3
66513: PPUSH
66514: CALL_OW 331
// end ;
66518: LD_VAR 0 5
66522: RET
// export function Video ( mode ) ; begin
66523: LD_INT 0
66525: PPUSH
// ingame_video = mode ;
66526: LD_ADDR_OWVAR 52
66530: PUSH
66531: LD_VAR 0 1
66535: ST_TO_ADDR
// interface_hidden = mode ;
66536: LD_ADDR_OWVAR 54
66540: PUSH
66541: LD_VAR 0 1
66545: ST_TO_ADDR
// end ;
66546: LD_VAR 0 2
66550: RET
// export function Join ( array , element ) ; begin
66551: LD_INT 0
66553: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66554: LD_ADDR_VAR 0 3
66558: PUSH
66559: LD_VAR 0 1
66563: PPUSH
66564: LD_VAR 0 1
66568: PUSH
66569: LD_INT 1
66571: PLUS
66572: PPUSH
66573: LD_VAR 0 2
66577: PPUSH
66578: CALL_OW 1
66582: ST_TO_ADDR
// end ;
66583: LD_VAR 0 3
66587: RET
// export function JoinUnion ( array , element ) ; begin
66588: LD_INT 0
66590: PPUSH
// result := array union element ;
66591: LD_ADDR_VAR 0 3
66595: PUSH
66596: LD_VAR 0 1
66600: PUSH
66601: LD_VAR 0 2
66605: UNION
66606: ST_TO_ADDR
// end ;
66607: LD_VAR 0 3
66611: RET
// export function GetBehemoths ( side ) ; begin
66612: LD_INT 0
66614: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66615: LD_ADDR_VAR 0 2
66619: PUSH
66620: LD_INT 22
66622: PUSH
66623: LD_VAR 0 1
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 31
66634: PUSH
66635: LD_INT 25
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PPUSH
66646: CALL_OW 69
66650: ST_TO_ADDR
// end ;
66651: LD_VAR 0 2
66655: RET
// export function Shuffle ( array ) ; var i , index ; begin
66656: LD_INT 0
66658: PPUSH
66659: PPUSH
66660: PPUSH
// result := [ ] ;
66661: LD_ADDR_VAR 0 2
66665: PUSH
66666: EMPTY
66667: ST_TO_ADDR
// if not array then
66668: LD_VAR 0 1
66672: NOT
66673: IFFALSE 66677
// exit ;
66675: GO 66776
// Randomize ;
66677: CALL_OW 10
// for i = array downto 1 do
66681: LD_ADDR_VAR 0 3
66685: PUSH
66686: DOUBLE
66687: LD_VAR 0 1
66691: INC
66692: ST_TO_ADDR
66693: LD_INT 1
66695: PUSH
66696: FOR_DOWNTO
66697: IFFALSE 66774
// begin index := rand ( 1 , array ) ;
66699: LD_ADDR_VAR 0 4
66703: PUSH
66704: LD_INT 1
66706: PPUSH
66707: LD_VAR 0 1
66711: PPUSH
66712: CALL_OW 12
66716: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66717: LD_ADDR_VAR 0 2
66721: PUSH
66722: LD_VAR 0 2
66726: PPUSH
66727: LD_VAR 0 2
66731: PUSH
66732: LD_INT 1
66734: PLUS
66735: PPUSH
66736: LD_VAR 0 1
66740: PUSH
66741: LD_VAR 0 4
66745: ARRAY
66746: PPUSH
66747: CALL_OW 2
66751: ST_TO_ADDR
// array := Delete ( array , index ) ;
66752: LD_ADDR_VAR 0 1
66756: PUSH
66757: LD_VAR 0 1
66761: PPUSH
66762: LD_VAR 0 4
66766: PPUSH
66767: CALL_OW 3
66771: ST_TO_ADDR
// end ;
66772: GO 66696
66774: POP
66775: POP
// end ;
66776: LD_VAR 0 2
66780: RET
// export function GetBaseMaterials ( base ) ; begin
66781: LD_INT 0
66783: PPUSH
// result := [ 0 , 0 , 0 ] ;
66784: LD_ADDR_VAR 0 2
66788: PUSH
66789: LD_INT 0
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: LD_INT 0
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: LIST
66802: ST_TO_ADDR
// if not base then
66803: LD_VAR 0 1
66807: NOT
66808: IFFALSE 66812
// exit ;
66810: GO 66861
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66812: LD_ADDR_VAR 0 2
66816: PUSH
66817: LD_VAR 0 1
66821: PPUSH
66822: LD_INT 1
66824: PPUSH
66825: CALL_OW 275
66829: PUSH
66830: LD_VAR 0 1
66834: PPUSH
66835: LD_INT 2
66837: PPUSH
66838: CALL_OW 275
66842: PUSH
66843: LD_VAR 0 1
66847: PPUSH
66848: LD_INT 3
66850: PPUSH
66851: CALL_OW 275
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: LIST
66860: ST_TO_ADDR
// end ;
66861: LD_VAR 0 2
66865: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66866: LD_INT 0
66868: PPUSH
66869: PPUSH
// result := array ;
66870: LD_ADDR_VAR 0 3
66874: PUSH
66875: LD_VAR 0 1
66879: ST_TO_ADDR
// if size > 0 then
66880: LD_VAR 0 2
66884: PUSH
66885: LD_INT 0
66887: GREATER
66888: IFFALSE 66934
// for i := array downto size do
66890: LD_ADDR_VAR 0 4
66894: PUSH
66895: DOUBLE
66896: LD_VAR 0 1
66900: INC
66901: ST_TO_ADDR
66902: LD_VAR 0 2
66906: PUSH
66907: FOR_DOWNTO
66908: IFFALSE 66932
// result := Delete ( result , result ) ;
66910: LD_ADDR_VAR 0 3
66914: PUSH
66915: LD_VAR 0 3
66919: PPUSH
66920: LD_VAR 0 3
66924: PPUSH
66925: CALL_OW 3
66929: ST_TO_ADDR
66930: GO 66907
66932: POP
66933: POP
// end ;
66934: LD_VAR 0 3
66938: RET
// export function ComExit ( unit ) ; var tmp ; begin
66939: LD_INT 0
66941: PPUSH
66942: PPUSH
// if not IsInUnit ( unit ) then
66943: LD_VAR 0 1
66947: PPUSH
66948: CALL_OW 310
66952: NOT
66953: IFFALSE 66957
// exit ;
66955: GO 67017
// tmp := IsInUnit ( unit ) ;
66957: LD_ADDR_VAR 0 3
66961: PUSH
66962: LD_VAR 0 1
66966: PPUSH
66967: CALL_OW 310
66971: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66972: LD_VAR 0 3
66976: PPUSH
66977: CALL_OW 247
66981: PUSH
66982: LD_INT 2
66984: EQUAL
66985: IFFALSE 66998
// ComExitVehicle ( unit ) else
66987: LD_VAR 0 1
66991: PPUSH
66992: CALL_OW 121
66996: GO 67007
// ComExitBuilding ( unit ) ;
66998: LD_VAR 0 1
67002: PPUSH
67003: CALL_OW 122
// result := tmp ;
67007: LD_ADDR_VAR 0 2
67011: PUSH
67012: LD_VAR 0 3
67016: ST_TO_ADDR
// end ;
67017: LD_VAR 0 2
67021: RET
// export function ComExitAll ( units ) ; var i ; begin
67022: LD_INT 0
67024: PPUSH
67025: PPUSH
// if not units then
67026: LD_VAR 0 1
67030: NOT
67031: IFFALSE 67035
// exit ;
67033: GO 67061
// for i in units do
67035: LD_ADDR_VAR 0 3
67039: PUSH
67040: LD_VAR 0 1
67044: PUSH
67045: FOR_IN
67046: IFFALSE 67059
// ComExit ( i ) ;
67048: LD_VAR 0 3
67052: PPUSH
67053: CALL 66939 0 1
67057: GO 67045
67059: POP
67060: POP
// end ;
67061: LD_VAR 0 2
67065: RET
// export function ResetHc ; begin
67066: LD_INT 0
67068: PPUSH
// InitHc ;
67069: CALL_OW 19
// hc_importance := 0 ;
67073: LD_ADDR_OWVAR 32
67077: PUSH
67078: LD_INT 0
67080: ST_TO_ADDR
// end ;
67081: LD_VAR 0 1
67085: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67086: LD_INT 0
67088: PPUSH
67089: PPUSH
67090: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67091: LD_ADDR_VAR 0 6
67095: PUSH
67096: LD_VAR 0 1
67100: PUSH
67101: LD_VAR 0 3
67105: PLUS
67106: PUSH
67107: LD_INT 2
67109: DIV
67110: ST_TO_ADDR
// if _x < 0 then
67111: LD_VAR 0 6
67115: PUSH
67116: LD_INT 0
67118: LESS
67119: IFFALSE 67136
// _x := _x * - 1 ;
67121: LD_ADDR_VAR 0 6
67125: PUSH
67126: LD_VAR 0 6
67130: PUSH
67131: LD_INT 1
67133: NEG
67134: MUL
67135: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67136: LD_ADDR_VAR 0 7
67140: PUSH
67141: LD_VAR 0 2
67145: PUSH
67146: LD_VAR 0 4
67150: PLUS
67151: PUSH
67152: LD_INT 2
67154: DIV
67155: ST_TO_ADDR
// if _y < 0 then
67156: LD_VAR 0 7
67160: PUSH
67161: LD_INT 0
67163: LESS
67164: IFFALSE 67181
// _y := _y * - 1 ;
67166: LD_ADDR_VAR 0 7
67170: PUSH
67171: LD_VAR 0 7
67175: PUSH
67176: LD_INT 1
67178: NEG
67179: MUL
67180: ST_TO_ADDR
// result := [ _x , _y ] ;
67181: LD_ADDR_VAR 0 5
67185: PUSH
67186: LD_VAR 0 6
67190: PUSH
67191: LD_VAR 0 7
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: ST_TO_ADDR
// end ;
67200: LD_VAR 0 5
67204: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67205: LD_INT 0
67207: PPUSH
67208: PPUSH
67209: PPUSH
67210: PPUSH
// task := GetTaskList ( unit ) ;
67211: LD_ADDR_VAR 0 7
67215: PUSH
67216: LD_VAR 0 1
67220: PPUSH
67221: CALL_OW 437
67225: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67226: LD_VAR 0 7
67230: NOT
67231: PUSH
67232: LD_VAR 0 1
67236: PPUSH
67237: LD_VAR 0 2
67241: PPUSH
67242: CALL_OW 308
67246: NOT
67247: AND
67248: IFFALSE 67252
// exit ;
67250: GO 67370
// if IsInArea ( unit , area ) then
67252: LD_VAR 0 1
67256: PPUSH
67257: LD_VAR 0 2
67261: PPUSH
67262: CALL_OW 308
67266: IFFALSE 67284
// begin ComMoveToArea ( unit , goAway ) ;
67268: LD_VAR 0 1
67272: PPUSH
67273: LD_VAR 0 3
67277: PPUSH
67278: CALL_OW 113
// exit ;
67282: GO 67370
// end ; if task [ 1 ] [ 1 ] <> M then
67284: LD_VAR 0 7
67288: PUSH
67289: LD_INT 1
67291: ARRAY
67292: PUSH
67293: LD_INT 1
67295: ARRAY
67296: PUSH
67297: LD_STRING M
67299: NONEQUAL
67300: IFFALSE 67304
// exit ;
67302: GO 67370
// x := task [ 1 ] [ 2 ] ;
67304: LD_ADDR_VAR 0 5
67308: PUSH
67309: LD_VAR 0 7
67313: PUSH
67314: LD_INT 1
67316: ARRAY
67317: PUSH
67318: LD_INT 2
67320: ARRAY
67321: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67322: LD_ADDR_VAR 0 6
67326: PUSH
67327: LD_VAR 0 7
67331: PUSH
67332: LD_INT 1
67334: ARRAY
67335: PUSH
67336: LD_INT 3
67338: ARRAY
67339: ST_TO_ADDR
// if InArea ( x , y , area ) then
67340: LD_VAR 0 5
67344: PPUSH
67345: LD_VAR 0 6
67349: PPUSH
67350: LD_VAR 0 2
67354: PPUSH
67355: CALL_OW 309
67359: IFFALSE 67370
// ComStop ( unit ) ;
67361: LD_VAR 0 1
67365: PPUSH
67366: CALL_OW 141
// end ;
67370: LD_VAR 0 4
67374: RET
// export function Abs ( value ) ; begin
67375: LD_INT 0
67377: PPUSH
// result := value ;
67378: LD_ADDR_VAR 0 2
67382: PUSH
67383: LD_VAR 0 1
67387: ST_TO_ADDR
// if value < 0 then
67388: LD_VAR 0 1
67392: PUSH
67393: LD_INT 0
67395: LESS
67396: IFFALSE 67413
// result := value * - 1 ;
67398: LD_ADDR_VAR 0 2
67402: PUSH
67403: LD_VAR 0 1
67407: PUSH
67408: LD_INT 1
67410: NEG
67411: MUL
67412: ST_TO_ADDR
// end ;
67413: LD_VAR 0 2
67417: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67418: LD_INT 0
67420: PPUSH
67421: PPUSH
67422: PPUSH
67423: PPUSH
67424: PPUSH
67425: PPUSH
67426: PPUSH
67427: PPUSH
// if not unit or not building then
67428: LD_VAR 0 1
67432: NOT
67433: PUSH
67434: LD_VAR 0 2
67438: NOT
67439: OR
67440: IFFALSE 67444
// exit ;
67442: GO 67670
// x := GetX ( building ) ;
67444: LD_ADDR_VAR 0 4
67448: PUSH
67449: LD_VAR 0 2
67453: PPUSH
67454: CALL_OW 250
67458: ST_TO_ADDR
// y := GetY ( building ) ;
67459: LD_ADDR_VAR 0 6
67463: PUSH
67464: LD_VAR 0 2
67468: PPUSH
67469: CALL_OW 251
67473: ST_TO_ADDR
// d := GetDir ( building ) ;
67474: LD_ADDR_VAR 0 8
67478: PUSH
67479: LD_VAR 0 2
67483: PPUSH
67484: CALL_OW 254
67488: ST_TO_ADDR
// r := 4 ;
67489: LD_ADDR_VAR 0 9
67493: PUSH
67494: LD_INT 4
67496: ST_TO_ADDR
// for i := 1 to 5 do
67497: LD_ADDR_VAR 0 10
67501: PUSH
67502: DOUBLE
67503: LD_INT 1
67505: DEC
67506: ST_TO_ADDR
67507: LD_INT 5
67509: PUSH
67510: FOR_TO
67511: IFFALSE 67668
// begin _x := ShiftX ( x , d , r + i ) ;
67513: LD_ADDR_VAR 0 5
67517: PUSH
67518: LD_VAR 0 4
67522: PPUSH
67523: LD_VAR 0 8
67527: PPUSH
67528: LD_VAR 0 9
67532: PUSH
67533: LD_VAR 0 10
67537: PLUS
67538: PPUSH
67539: CALL_OW 272
67543: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67544: LD_ADDR_VAR 0 7
67548: PUSH
67549: LD_VAR 0 6
67553: PPUSH
67554: LD_VAR 0 8
67558: PPUSH
67559: LD_VAR 0 9
67563: PUSH
67564: LD_VAR 0 10
67568: PLUS
67569: PPUSH
67570: CALL_OW 273
67574: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67575: LD_VAR 0 5
67579: PPUSH
67580: LD_VAR 0 7
67584: PPUSH
67585: CALL_OW 488
67589: PUSH
67590: LD_VAR 0 5
67594: PPUSH
67595: LD_VAR 0 7
67599: PPUSH
67600: CALL_OW 428
67604: PPUSH
67605: CALL_OW 247
67609: PUSH
67610: LD_INT 3
67612: PUSH
67613: LD_INT 2
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: IN
67620: NOT
67621: AND
67622: IFFALSE 67666
// begin ComMoveXY ( unit , _x , _y ) ;
67624: LD_VAR 0 1
67628: PPUSH
67629: LD_VAR 0 5
67633: PPUSH
67634: LD_VAR 0 7
67638: PPUSH
67639: CALL_OW 111
// result := [ _x , _y ] ;
67643: LD_ADDR_VAR 0 3
67647: PUSH
67648: LD_VAR 0 5
67652: PUSH
67653: LD_VAR 0 7
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: ST_TO_ADDR
// exit ;
67662: POP
67663: POP
67664: GO 67670
// end ; end ;
67666: GO 67510
67668: POP
67669: POP
// end ;
67670: LD_VAR 0 3
67674: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67675: LD_INT 0
67677: PPUSH
67678: PPUSH
67679: PPUSH
// result := 0 ;
67680: LD_ADDR_VAR 0 3
67684: PUSH
67685: LD_INT 0
67687: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67688: LD_VAR 0 1
67692: PUSH
67693: LD_INT 0
67695: LESS
67696: PUSH
67697: LD_VAR 0 1
67701: PUSH
67702: LD_INT 8
67704: GREATER
67705: OR
67706: PUSH
67707: LD_VAR 0 2
67711: PUSH
67712: LD_INT 0
67714: LESS
67715: OR
67716: PUSH
67717: LD_VAR 0 2
67721: PUSH
67722: LD_INT 8
67724: GREATER
67725: OR
67726: IFFALSE 67730
// exit ;
67728: GO 67805
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67730: LD_ADDR_VAR 0 4
67734: PUSH
67735: LD_INT 22
67737: PUSH
67738: LD_VAR 0 2
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PPUSH
67747: CALL_OW 69
67751: PUSH
67752: FOR_IN
67753: IFFALSE 67803
// begin un := UnitShoot ( i ) ;
67755: LD_ADDR_VAR 0 5
67759: PUSH
67760: LD_VAR 0 4
67764: PPUSH
67765: CALL_OW 504
67769: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67770: LD_VAR 0 5
67774: PPUSH
67775: CALL_OW 255
67779: PUSH
67780: LD_VAR 0 1
67784: EQUAL
67785: IFFALSE 67801
// begin result := un ;
67787: LD_ADDR_VAR 0 3
67791: PUSH
67792: LD_VAR 0 5
67796: ST_TO_ADDR
// exit ;
67797: POP
67798: POP
67799: GO 67805
// end ; end ;
67801: GO 67752
67803: POP
67804: POP
// end ;
67805: LD_VAR 0 3
67809: RET
// export function GetCargoBay ( units ) ; begin
67810: LD_INT 0
67812: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67813: LD_ADDR_VAR 0 2
67817: PUSH
67818: LD_VAR 0 1
67822: PPUSH
67823: LD_INT 2
67825: PUSH
67826: LD_INT 34
67828: PUSH
67829: LD_INT 12
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 34
67838: PUSH
67839: LD_INT 51
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 34
67848: PUSH
67849: LD_INT 32
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 34
67858: PUSH
67859: LD_EXP 20
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: PPUSH
67875: CALL_OW 72
67879: ST_TO_ADDR
// end ;
67880: LD_VAR 0 2
67884: RET
// export function Negate ( value ) ; begin
67885: LD_INT 0
67887: PPUSH
// result := not value ;
67888: LD_ADDR_VAR 0 2
67892: PUSH
67893: LD_VAR 0 1
67897: NOT
67898: ST_TO_ADDR
// end ;
67899: LD_VAR 0 2
67903: RET
// export function Inc ( value ) ; begin
67904: LD_INT 0
67906: PPUSH
// result := value + 1 ;
67907: LD_ADDR_VAR 0 2
67911: PUSH
67912: LD_VAR 0 1
67916: PUSH
67917: LD_INT 1
67919: PLUS
67920: ST_TO_ADDR
// end ;
67921: LD_VAR 0 2
67925: RET
// export function Dec ( value ) ; begin
67926: LD_INT 0
67928: PPUSH
// result := value - 1 ;
67929: LD_ADDR_VAR 0 2
67933: PUSH
67934: LD_VAR 0 1
67938: PUSH
67939: LD_INT 1
67941: MINUS
67942: ST_TO_ADDR
// end ;
67943: LD_VAR 0 2
67947: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67948: LD_INT 0
67950: PPUSH
67951: PPUSH
67952: PPUSH
67953: PPUSH
67954: PPUSH
67955: PPUSH
67956: PPUSH
67957: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67958: LD_VAR 0 1
67962: PPUSH
67963: LD_VAR 0 2
67967: PPUSH
67968: CALL_OW 488
67972: NOT
67973: PUSH
67974: LD_VAR 0 3
67978: PPUSH
67979: LD_VAR 0 4
67983: PPUSH
67984: CALL_OW 488
67988: NOT
67989: OR
67990: IFFALSE 68003
// begin result := - 1 ;
67992: LD_ADDR_VAR 0 5
67996: PUSH
67997: LD_INT 1
67999: NEG
68000: ST_TO_ADDR
// exit ;
68001: GO 68238
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68003: LD_ADDR_VAR 0 12
68007: PUSH
68008: LD_VAR 0 1
68012: PPUSH
68013: LD_VAR 0 2
68017: PPUSH
68018: LD_VAR 0 3
68022: PPUSH
68023: LD_VAR 0 4
68027: PPUSH
68028: CALL 67086 0 4
68032: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68033: LD_ADDR_VAR 0 11
68037: PUSH
68038: LD_VAR 0 1
68042: PPUSH
68043: LD_VAR 0 2
68047: PPUSH
68048: LD_VAR 0 12
68052: PUSH
68053: LD_INT 1
68055: ARRAY
68056: PPUSH
68057: LD_VAR 0 12
68061: PUSH
68062: LD_INT 2
68064: ARRAY
68065: PPUSH
68066: CALL_OW 298
68070: ST_TO_ADDR
// distance := 9999 ;
68071: LD_ADDR_VAR 0 10
68075: PUSH
68076: LD_INT 9999
68078: ST_TO_ADDR
// for i := 0 to 5 do
68079: LD_ADDR_VAR 0 6
68083: PUSH
68084: DOUBLE
68085: LD_INT 0
68087: DEC
68088: ST_TO_ADDR
68089: LD_INT 5
68091: PUSH
68092: FOR_TO
68093: IFFALSE 68236
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68095: LD_ADDR_VAR 0 7
68099: PUSH
68100: LD_VAR 0 1
68104: PPUSH
68105: LD_VAR 0 6
68109: PPUSH
68110: LD_VAR 0 11
68114: PPUSH
68115: CALL_OW 272
68119: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68120: LD_ADDR_VAR 0 8
68124: PUSH
68125: LD_VAR 0 2
68129: PPUSH
68130: LD_VAR 0 6
68134: PPUSH
68135: LD_VAR 0 11
68139: PPUSH
68140: CALL_OW 273
68144: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68145: LD_VAR 0 7
68149: PPUSH
68150: LD_VAR 0 8
68154: PPUSH
68155: CALL_OW 488
68159: NOT
68160: IFFALSE 68164
// continue ;
68162: GO 68092
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68164: LD_ADDR_VAR 0 9
68168: PUSH
68169: LD_VAR 0 12
68173: PUSH
68174: LD_INT 1
68176: ARRAY
68177: PPUSH
68178: LD_VAR 0 12
68182: PUSH
68183: LD_INT 2
68185: ARRAY
68186: PPUSH
68187: LD_VAR 0 7
68191: PPUSH
68192: LD_VAR 0 8
68196: PPUSH
68197: CALL_OW 298
68201: ST_TO_ADDR
// if tmp < distance then
68202: LD_VAR 0 9
68206: PUSH
68207: LD_VAR 0 10
68211: LESS
68212: IFFALSE 68234
// begin result := i ;
68214: LD_ADDR_VAR 0 5
68218: PUSH
68219: LD_VAR 0 6
68223: ST_TO_ADDR
// distance := tmp ;
68224: LD_ADDR_VAR 0 10
68228: PUSH
68229: LD_VAR 0 9
68233: ST_TO_ADDR
// end ; end ;
68234: GO 68092
68236: POP
68237: POP
// end ;
68238: LD_VAR 0 5
68242: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68243: LD_INT 0
68245: PPUSH
68246: PPUSH
// if not driver or not IsInUnit ( driver ) then
68247: LD_VAR 0 1
68251: NOT
68252: PUSH
68253: LD_VAR 0 1
68257: PPUSH
68258: CALL_OW 310
68262: NOT
68263: OR
68264: IFFALSE 68268
// exit ;
68266: GO 68358
// vehicle := IsInUnit ( driver ) ;
68268: LD_ADDR_VAR 0 3
68272: PUSH
68273: LD_VAR 0 1
68277: PPUSH
68278: CALL_OW 310
68282: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68283: LD_VAR 0 1
68287: PPUSH
68288: LD_STRING \
68290: PUSH
68291: LD_INT 0
68293: PUSH
68294: LD_INT 0
68296: PUSH
68297: LD_INT 0
68299: PUSH
68300: LD_INT 0
68302: PUSH
68303: LD_INT 0
68305: PUSH
68306: LD_INT 0
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: PUSH
68318: LD_STRING E
68320: PUSH
68321: LD_INT 0
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: LD_VAR 0 3
68331: PUSH
68332: LD_INT 0
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: LD_INT 0
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PPUSH
68354: CALL_OW 446
// end ;
68358: LD_VAR 0 2
68362: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68363: LD_INT 0
68365: PPUSH
68366: PPUSH
// if not driver or not IsInUnit ( driver ) then
68367: LD_VAR 0 1
68371: NOT
68372: PUSH
68373: LD_VAR 0 1
68377: PPUSH
68378: CALL_OW 310
68382: NOT
68383: OR
68384: IFFALSE 68388
// exit ;
68386: GO 68478
// vehicle := IsInUnit ( driver ) ;
68388: LD_ADDR_VAR 0 3
68392: PUSH
68393: LD_VAR 0 1
68397: PPUSH
68398: CALL_OW 310
68402: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68403: LD_VAR 0 1
68407: PPUSH
68408: LD_STRING \
68410: PUSH
68411: LD_INT 0
68413: PUSH
68414: LD_INT 0
68416: PUSH
68417: LD_INT 0
68419: PUSH
68420: LD_INT 0
68422: PUSH
68423: LD_INT 0
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: PUSH
68438: LD_STRING E
68440: PUSH
68441: LD_INT 0
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: LD_VAR 0 3
68451: PUSH
68452: LD_INT 0
68454: PUSH
68455: LD_INT 0
68457: PUSH
68458: LD_INT 0
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PPUSH
68474: CALL_OW 447
// end ;
68478: LD_VAR 0 2
68482: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68483: LD_INT 0
68485: PPUSH
68486: PPUSH
68487: PPUSH
// tmp := [ ] ;
68488: LD_ADDR_VAR 0 5
68492: PUSH
68493: EMPTY
68494: ST_TO_ADDR
// for i in units do
68495: LD_ADDR_VAR 0 4
68499: PUSH
68500: LD_VAR 0 1
68504: PUSH
68505: FOR_IN
68506: IFFALSE 68544
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68508: LD_ADDR_VAR 0 5
68512: PUSH
68513: LD_VAR 0 5
68517: PPUSH
68518: LD_VAR 0 5
68522: PUSH
68523: LD_INT 1
68525: PLUS
68526: PPUSH
68527: LD_VAR 0 4
68531: PPUSH
68532: CALL_OW 256
68536: PPUSH
68537: CALL_OW 2
68541: ST_TO_ADDR
68542: GO 68505
68544: POP
68545: POP
// if not tmp then
68546: LD_VAR 0 5
68550: NOT
68551: IFFALSE 68555
// exit ;
68553: GO 68603
// if asc then
68555: LD_VAR 0 2
68559: IFFALSE 68583
// result := SortListByListAsc ( units , tmp ) else
68561: LD_ADDR_VAR 0 3
68565: PUSH
68566: LD_VAR 0 1
68570: PPUSH
68571: LD_VAR 0 5
68575: PPUSH
68576: CALL_OW 76
68580: ST_TO_ADDR
68581: GO 68603
// result := SortListByListDesc ( units , tmp ) ;
68583: LD_ADDR_VAR 0 3
68587: PUSH
68588: LD_VAR 0 1
68592: PPUSH
68593: LD_VAR 0 5
68597: PPUSH
68598: CALL_OW 77
68602: ST_TO_ADDR
// end ;
68603: LD_VAR 0 3
68607: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68608: LD_INT 0
68610: PPUSH
68611: PPUSH
// task := GetTaskList ( mech ) ;
68612: LD_ADDR_VAR 0 4
68616: PUSH
68617: LD_VAR 0 1
68621: PPUSH
68622: CALL_OW 437
68626: ST_TO_ADDR
// if not task then
68627: LD_VAR 0 4
68631: NOT
68632: IFFALSE 68636
// exit ;
68634: GO 68678
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68636: LD_ADDR_VAR 0 3
68640: PUSH
68641: LD_VAR 0 4
68645: PUSH
68646: LD_INT 1
68648: ARRAY
68649: PUSH
68650: LD_INT 1
68652: ARRAY
68653: PUSH
68654: LD_STRING r
68656: EQUAL
68657: PUSH
68658: LD_VAR 0 4
68662: PUSH
68663: LD_INT 1
68665: ARRAY
68666: PUSH
68667: LD_INT 4
68669: ARRAY
68670: PUSH
68671: LD_VAR 0 2
68675: EQUAL
68676: AND
68677: ST_TO_ADDR
// end ;
68678: LD_VAR 0 3
68682: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68683: LD_INT 0
68685: PPUSH
// SetDir ( unit , d ) ;
68686: LD_VAR 0 1
68690: PPUSH
68691: LD_VAR 0 4
68695: PPUSH
68696: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68700: LD_VAR 0 1
68704: PPUSH
68705: LD_VAR 0 2
68709: PPUSH
68710: LD_VAR 0 3
68714: PPUSH
68715: LD_VAR 0 5
68719: PPUSH
68720: CALL_OW 48
// end ;
68724: LD_VAR 0 6
68728: RET
// export function ToNaturalNumber ( number ) ; begin
68729: LD_INT 0
68731: PPUSH
// result := number div 1 ;
68732: LD_ADDR_VAR 0 2
68736: PUSH
68737: LD_VAR 0 1
68741: PUSH
68742: LD_INT 1
68744: DIV
68745: ST_TO_ADDR
// if number < 0 then
68746: LD_VAR 0 1
68750: PUSH
68751: LD_INT 0
68753: LESS
68754: IFFALSE 68764
// result := 0 ;
68756: LD_ADDR_VAR 0 2
68760: PUSH
68761: LD_INT 0
68763: ST_TO_ADDR
// end ;
68764: LD_VAR 0 2
68768: RET
// export function SortByClass ( units , class ) ; var un ; begin
68769: LD_INT 0
68771: PPUSH
68772: PPUSH
// if not units or not class then
68773: LD_VAR 0 1
68777: NOT
68778: PUSH
68779: LD_VAR 0 2
68783: NOT
68784: OR
68785: IFFALSE 68789
// exit ;
68787: GO 68884
// result := [ ] ;
68789: LD_ADDR_VAR 0 3
68793: PUSH
68794: EMPTY
68795: ST_TO_ADDR
// for un in units do
68796: LD_ADDR_VAR 0 4
68800: PUSH
68801: LD_VAR 0 1
68805: PUSH
68806: FOR_IN
68807: IFFALSE 68882
// if GetClass ( un ) = class then
68809: LD_VAR 0 4
68813: PPUSH
68814: CALL_OW 257
68818: PUSH
68819: LD_VAR 0 2
68823: EQUAL
68824: IFFALSE 68851
// result := Insert ( result , 1 , un ) else
68826: LD_ADDR_VAR 0 3
68830: PUSH
68831: LD_VAR 0 3
68835: PPUSH
68836: LD_INT 1
68838: PPUSH
68839: LD_VAR 0 4
68843: PPUSH
68844: CALL_OW 2
68848: ST_TO_ADDR
68849: GO 68880
// result := Replace ( result , result + 1 , un ) ;
68851: LD_ADDR_VAR 0 3
68855: PUSH
68856: LD_VAR 0 3
68860: PPUSH
68861: LD_VAR 0 3
68865: PUSH
68866: LD_INT 1
68868: PLUS
68869: PPUSH
68870: LD_VAR 0 4
68874: PPUSH
68875: CALL_OW 1
68879: ST_TO_ADDR
68880: GO 68806
68882: POP
68883: POP
// end ;
68884: LD_VAR 0 3
68888: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68889: LD_INT 0
68891: PPUSH
68892: PPUSH
68893: PPUSH
68894: PPUSH
68895: PPUSH
68896: PPUSH
68897: PPUSH
// result := [ ] ;
68898: LD_ADDR_VAR 0 4
68902: PUSH
68903: EMPTY
68904: ST_TO_ADDR
// if x - r < 0 then
68905: LD_VAR 0 1
68909: PUSH
68910: LD_VAR 0 3
68914: MINUS
68915: PUSH
68916: LD_INT 0
68918: LESS
68919: IFFALSE 68931
// min_x := 0 else
68921: LD_ADDR_VAR 0 8
68925: PUSH
68926: LD_INT 0
68928: ST_TO_ADDR
68929: GO 68947
// min_x := x - r ;
68931: LD_ADDR_VAR 0 8
68935: PUSH
68936: LD_VAR 0 1
68940: PUSH
68941: LD_VAR 0 3
68945: MINUS
68946: ST_TO_ADDR
// if y - r < 0 then
68947: LD_VAR 0 2
68951: PUSH
68952: LD_VAR 0 3
68956: MINUS
68957: PUSH
68958: LD_INT 0
68960: LESS
68961: IFFALSE 68973
// min_y := 0 else
68963: LD_ADDR_VAR 0 7
68967: PUSH
68968: LD_INT 0
68970: ST_TO_ADDR
68971: GO 68989
// min_y := y - r ;
68973: LD_ADDR_VAR 0 7
68977: PUSH
68978: LD_VAR 0 2
68982: PUSH
68983: LD_VAR 0 3
68987: MINUS
68988: ST_TO_ADDR
// max_x := x + r ;
68989: LD_ADDR_VAR 0 9
68993: PUSH
68994: LD_VAR 0 1
68998: PUSH
68999: LD_VAR 0 3
69003: PLUS
69004: ST_TO_ADDR
// max_y := y + r ;
69005: LD_ADDR_VAR 0 10
69009: PUSH
69010: LD_VAR 0 2
69014: PUSH
69015: LD_VAR 0 3
69019: PLUS
69020: ST_TO_ADDR
// for _x = min_x to max_x do
69021: LD_ADDR_VAR 0 5
69025: PUSH
69026: DOUBLE
69027: LD_VAR 0 8
69031: DEC
69032: ST_TO_ADDR
69033: LD_VAR 0 9
69037: PUSH
69038: FOR_TO
69039: IFFALSE 69140
// for _y = min_y to max_y do
69041: LD_ADDR_VAR 0 6
69045: PUSH
69046: DOUBLE
69047: LD_VAR 0 7
69051: DEC
69052: ST_TO_ADDR
69053: LD_VAR 0 10
69057: PUSH
69058: FOR_TO
69059: IFFALSE 69136
// begin if not ValidHex ( _x , _y ) then
69061: LD_VAR 0 5
69065: PPUSH
69066: LD_VAR 0 6
69070: PPUSH
69071: CALL_OW 488
69075: NOT
69076: IFFALSE 69080
// continue ;
69078: GO 69058
// if GetResourceTypeXY ( _x , _y ) then
69080: LD_VAR 0 5
69084: PPUSH
69085: LD_VAR 0 6
69089: PPUSH
69090: CALL_OW 283
69094: IFFALSE 69134
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69096: LD_ADDR_VAR 0 4
69100: PUSH
69101: LD_VAR 0 4
69105: PPUSH
69106: LD_VAR 0 4
69110: PUSH
69111: LD_INT 1
69113: PLUS
69114: PPUSH
69115: LD_VAR 0 5
69119: PUSH
69120: LD_VAR 0 6
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PPUSH
69129: CALL_OW 1
69133: ST_TO_ADDR
// end ;
69134: GO 69058
69136: POP
69137: POP
69138: GO 69038
69140: POP
69141: POP
// end ;
69142: LD_VAR 0 4
69146: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69147: LD_INT 0
69149: PPUSH
69150: PPUSH
69151: PPUSH
69152: PPUSH
69153: PPUSH
69154: PPUSH
69155: PPUSH
69156: PPUSH
// if not units then
69157: LD_VAR 0 1
69161: NOT
69162: IFFALSE 69166
// exit ;
69164: GO 69677
// result := UnitFilter ( units , [ f_ok ] ) ;
69166: LD_ADDR_VAR 0 3
69170: PUSH
69171: LD_VAR 0 1
69175: PPUSH
69176: LD_INT 50
69178: PUSH
69179: EMPTY
69180: LIST
69181: PPUSH
69182: CALL_OW 72
69186: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69187: LD_ADDR_VAR 0 8
69191: PUSH
69192: LD_VAR 0 1
69196: PUSH
69197: LD_INT 1
69199: ARRAY
69200: PPUSH
69201: CALL_OW 255
69205: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69206: LD_ADDR_VAR 0 10
69210: PUSH
69211: LD_INT 29
69213: PUSH
69214: LD_EXP 23
69218: PUSH
69219: LD_INT 49
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: LIST
69226: ST_TO_ADDR
// if not result then
69227: LD_VAR 0 3
69231: NOT
69232: IFFALSE 69236
// exit ;
69234: GO 69677
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69236: LD_ADDR_VAR 0 5
69240: PUSH
69241: LD_INT 81
69243: PUSH
69244: LD_VAR 0 8
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PPUSH
69253: CALL_OW 69
69257: ST_TO_ADDR
// for i in result do
69258: LD_ADDR_VAR 0 4
69262: PUSH
69263: LD_VAR 0 3
69267: PUSH
69268: FOR_IN
69269: IFFALSE 69675
// begin tag := GetTag ( i ) + 1 ;
69271: LD_ADDR_VAR 0 9
69275: PUSH
69276: LD_VAR 0 4
69280: PPUSH
69281: CALL_OW 110
69285: PUSH
69286: LD_INT 1
69288: PLUS
69289: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69290: LD_ADDR_VAR 0 7
69294: PUSH
69295: LD_VAR 0 4
69299: PPUSH
69300: CALL_OW 250
69304: PPUSH
69305: LD_VAR 0 4
69309: PPUSH
69310: CALL_OW 251
69314: PPUSH
69315: LD_INT 6
69317: PPUSH
69318: CALL 68889 0 3
69322: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69323: LD_VAR 0 7
69327: PUSH
69328: LD_VAR 0 4
69332: PPUSH
69333: CALL_OW 264
69337: PUSH
69338: LD_VAR 0 10
69342: IN
69343: NOT
69344: AND
69345: IFFALSE 69384
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69347: LD_VAR 0 4
69351: PPUSH
69352: LD_VAR 0 7
69356: PUSH
69357: LD_INT 1
69359: ARRAY
69360: PUSH
69361: LD_INT 1
69363: ARRAY
69364: PPUSH
69365: LD_VAR 0 7
69369: PUSH
69370: LD_INT 1
69372: ARRAY
69373: PUSH
69374: LD_INT 2
69376: ARRAY
69377: PPUSH
69378: CALL_OW 116
69382: GO 69673
// if path > tag then
69384: LD_VAR 0 2
69388: PUSH
69389: LD_VAR 0 9
69393: GREATER
69394: IFFALSE 69602
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
69396: LD_ADDR_VAR 0 6
69400: PUSH
69401: LD_VAR 0 5
69405: PPUSH
69406: LD_INT 91
69408: PUSH
69409: LD_VAR 0 4
69413: PUSH
69414: LD_INT 12
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: LIST
69421: PPUSH
69422: CALL_OW 72
69426: ST_TO_ADDR
// if nearEnemy then
69427: LD_VAR 0 6
69431: IFFALSE 69500
// begin if GetWeapon ( i ) = ru_time_lapser then
69433: LD_VAR 0 4
69437: PPUSH
69438: CALL_OW 264
69442: PUSH
69443: LD_INT 49
69445: EQUAL
69446: IFFALSE 69474
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69448: LD_VAR 0 4
69452: PPUSH
69453: LD_VAR 0 6
69457: PPUSH
69458: LD_VAR 0 4
69462: PPUSH
69463: CALL_OW 74
69467: PPUSH
69468: CALL_OW 112
69472: GO 69498
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69474: LD_VAR 0 4
69478: PPUSH
69479: LD_VAR 0 6
69483: PPUSH
69484: LD_VAR 0 4
69488: PPUSH
69489: CALL_OW 74
69493: PPUSH
69494: CALL_OW 115
// end else
69498: GO 69600
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69500: LD_VAR 0 4
69504: PPUSH
69505: LD_VAR 0 2
69509: PUSH
69510: LD_VAR 0 9
69514: ARRAY
69515: PUSH
69516: LD_INT 1
69518: ARRAY
69519: PPUSH
69520: LD_VAR 0 2
69524: PUSH
69525: LD_VAR 0 9
69529: ARRAY
69530: PUSH
69531: LD_INT 2
69533: ARRAY
69534: PPUSH
69535: CALL_OW 297
69539: PUSH
69540: LD_INT 6
69542: GREATER
69543: IFFALSE 69586
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69545: LD_VAR 0 4
69549: PPUSH
69550: LD_VAR 0 2
69554: PUSH
69555: LD_VAR 0 9
69559: ARRAY
69560: PUSH
69561: LD_INT 1
69563: ARRAY
69564: PPUSH
69565: LD_VAR 0 2
69569: PUSH
69570: LD_VAR 0 9
69574: ARRAY
69575: PUSH
69576: LD_INT 2
69578: ARRAY
69579: PPUSH
69580: CALL_OW 114
69584: GO 69600
// SetTag ( i , tag ) ;
69586: LD_VAR 0 4
69590: PPUSH
69591: LD_VAR 0 9
69595: PPUSH
69596: CALL_OW 109
// end else
69600: GO 69673
// if enemy then
69602: LD_VAR 0 5
69606: IFFALSE 69673
// begin if GetWeapon ( i ) = ru_time_lapser then
69608: LD_VAR 0 4
69612: PPUSH
69613: CALL_OW 264
69617: PUSH
69618: LD_INT 49
69620: EQUAL
69621: IFFALSE 69649
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69623: LD_VAR 0 4
69627: PPUSH
69628: LD_VAR 0 5
69632: PPUSH
69633: LD_VAR 0 4
69637: PPUSH
69638: CALL_OW 74
69642: PPUSH
69643: CALL_OW 112
69647: GO 69673
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69649: LD_VAR 0 4
69653: PPUSH
69654: LD_VAR 0 5
69658: PPUSH
69659: LD_VAR 0 4
69663: PPUSH
69664: CALL_OW 74
69668: PPUSH
69669: CALL_OW 115
// end ; end ;
69673: GO 69268
69675: POP
69676: POP
// end ;
69677: LD_VAR 0 3
69681: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69682: LD_INT 0
69684: PPUSH
69685: PPUSH
69686: PPUSH
// if not unit or IsInUnit ( unit ) then
69687: LD_VAR 0 1
69691: NOT
69692: PUSH
69693: LD_VAR 0 1
69697: PPUSH
69698: CALL_OW 310
69702: OR
69703: IFFALSE 69707
// exit ;
69705: GO 69798
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69707: LD_ADDR_VAR 0 4
69711: PUSH
69712: LD_VAR 0 1
69716: PPUSH
69717: CALL_OW 250
69721: PPUSH
69722: LD_VAR 0 2
69726: PPUSH
69727: LD_INT 1
69729: PPUSH
69730: CALL_OW 272
69734: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69735: LD_ADDR_VAR 0 5
69739: PUSH
69740: LD_VAR 0 1
69744: PPUSH
69745: CALL_OW 251
69749: PPUSH
69750: LD_VAR 0 2
69754: PPUSH
69755: LD_INT 1
69757: PPUSH
69758: CALL_OW 273
69762: ST_TO_ADDR
// if ValidHex ( x , y ) then
69763: LD_VAR 0 4
69767: PPUSH
69768: LD_VAR 0 5
69772: PPUSH
69773: CALL_OW 488
69777: IFFALSE 69798
// ComTurnXY ( unit , x , y ) ;
69779: LD_VAR 0 1
69783: PPUSH
69784: LD_VAR 0 4
69788: PPUSH
69789: LD_VAR 0 5
69793: PPUSH
69794: CALL_OW 118
// end ;
69798: LD_VAR 0 3
69802: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69803: LD_INT 0
69805: PPUSH
69806: PPUSH
// result := false ;
69807: LD_ADDR_VAR 0 3
69811: PUSH
69812: LD_INT 0
69814: ST_TO_ADDR
// if not units then
69815: LD_VAR 0 2
69819: NOT
69820: IFFALSE 69824
// exit ;
69822: GO 69869
// for i in units do
69824: LD_ADDR_VAR 0 4
69828: PUSH
69829: LD_VAR 0 2
69833: PUSH
69834: FOR_IN
69835: IFFALSE 69867
// if See ( side , i ) then
69837: LD_VAR 0 1
69841: PPUSH
69842: LD_VAR 0 4
69846: PPUSH
69847: CALL_OW 292
69851: IFFALSE 69865
// begin result := true ;
69853: LD_ADDR_VAR 0 3
69857: PUSH
69858: LD_INT 1
69860: ST_TO_ADDR
// exit ;
69861: POP
69862: POP
69863: GO 69869
// end ;
69865: GO 69834
69867: POP
69868: POP
// end ;
69869: LD_VAR 0 3
69873: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69874: LD_INT 0
69876: PPUSH
69877: PPUSH
69878: PPUSH
69879: PPUSH
// if not unit or not points then
69880: LD_VAR 0 1
69884: NOT
69885: PUSH
69886: LD_VAR 0 2
69890: NOT
69891: OR
69892: IFFALSE 69896
// exit ;
69894: GO 69986
// dist := 99999 ;
69896: LD_ADDR_VAR 0 5
69900: PUSH
69901: LD_INT 99999
69903: ST_TO_ADDR
// for i in points do
69904: LD_ADDR_VAR 0 4
69908: PUSH
69909: LD_VAR 0 2
69913: PUSH
69914: FOR_IN
69915: IFFALSE 69984
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69917: LD_ADDR_VAR 0 6
69921: PUSH
69922: LD_VAR 0 1
69926: PPUSH
69927: LD_VAR 0 4
69931: PUSH
69932: LD_INT 1
69934: ARRAY
69935: PPUSH
69936: LD_VAR 0 4
69940: PUSH
69941: LD_INT 2
69943: ARRAY
69944: PPUSH
69945: CALL_OW 297
69949: ST_TO_ADDR
// if tmpDist < dist then
69950: LD_VAR 0 6
69954: PUSH
69955: LD_VAR 0 5
69959: LESS
69960: IFFALSE 69982
// begin result := i ;
69962: LD_ADDR_VAR 0 3
69966: PUSH
69967: LD_VAR 0 4
69971: ST_TO_ADDR
// dist := tmpDist ;
69972: LD_ADDR_VAR 0 5
69976: PUSH
69977: LD_VAR 0 6
69981: ST_TO_ADDR
// end ; end ;
69982: GO 69914
69984: POP
69985: POP
// end ;
69986: LD_VAR 0 3
69990: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69991: LD_INT 0
69993: PPUSH
// uc_side := side ;
69994: LD_ADDR_OWVAR 20
69998: PUSH
69999: LD_VAR 0 1
70003: ST_TO_ADDR
// uc_nation := 3 ;
70004: LD_ADDR_OWVAR 21
70008: PUSH
70009: LD_INT 3
70011: ST_TO_ADDR
// vc_chassis := 25 ;
70012: LD_ADDR_OWVAR 37
70016: PUSH
70017: LD_INT 25
70019: ST_TO_ADDR
// vc_engine := engine_siberite ;
70020: LD_ADDR_OWVAR 39
70024: PUSH
70025: LD_INT 3
70027: ST_TO_ADDR
// vc_control := control_computer ;
70028: LD_ADDR_OWVAR 38
70032: PUSH
70033: LD_INT 3
70035: ST_TO_ADDR
// vc_weapon := 59 ;
70036: LD_ADDR_OWVAR 40
70040: PUSH
70041: LD_INT 59
70043: ST_TO_ADDR
// result := CreateVehicle ;
70044: LD_ADDR_VAR 0 5
70048: PUSH
70049: CALL_OW 45
70053: ST_TO_ADDR
// SetDir ( result , d ) ;
70054: LD_VAR 0 5
70058: PPUSH
70059: LD_VAR 0 4
70063: PPUSH
70064: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70068: LD_VAR 0 5
70072: PPUSH
70073: LD_VAR 0 2
70077: PPUSH
70078: LD_VAR 0 3
70082: PPUSH
70083: LD_INT 0
70085: PPUSH
70086: CALL_OW 48
// end ;
70090: LD_VAR 0 5
70094: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70095: LD_INT 0
70097: PPUSH
70098: PPUSH
70099: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70100: LD_ADDR_VAR 0 2
70104: PUSH
70105: LD_INT 0
70107: PUSH
70108: LD_INT 0
70110: PUSH
70111: LD_INT 0
70113: PUSH
70114: LD_INT 0
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70123: LD_VAR 0 1
70127: NOT
70128: PUSH
70129: LD_VAR 0 1
70133: PPUSH
70134: CALL_OW 264
70138: PUSH
70139: LD_INT 12
70141: PUSH
70142: LD_INT 51
70144: PUSH
70145: LD_INT 32
70147: PUSH
70148: LD_EXP 20
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: IN
70159: NOT
70160: OR
70161: IFFALSE 70165
// exit ;
70163: GO 70263
// for i := 1 to 3 do
70165: LD_ADDR_VAR 0 3
70169: PUSH
70170: DOUBLE
70171: LD_INT 1
70173: DEC
70174: ST_TO_ADDR
70175: LD_INT 3
70177: PUSH
70178: FOR_TO
70179: IFFALSE 70261
// begin tmp := GetCargo ( cargo , i ) ;
70181: LD_ADDR_VAR 0 4
70185: PUSH
70186: LD_VAR 0 1
70190: PPUSH
70191: LD_VAR 0 3
70195: PPUSH
70196: CALL_OW 289
70200: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70201: LD_ADDR_VAR 0 2
70205: PUSH
70206: LD_VAR 0 2
70210: PPUSH
70211: LD_VAR 0 3
70215: PPUSH
70216: LD_VAR 0 4
70220: PPUSH
70221: CALL_OW 1
70225: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70226: LD_ADDR_VAR 0 2
70230: PUSH
70231: LD_VAR 0 2
70235: PPUSH
70236: LD_INT 4
70238: PPUSH
70239: LD_VAR 0 2
70243: PUSH
70244: LD_INT 4
70246: ARRAY
70247: PUSH
70248: LD_VAR 0 4
70252: PLUS
70253: PPUSH
70254: CALL_OW 1
70258: ST_TO_ADDR
// end ;
70259: GO 70178
70261: POP
70262: POP
// end ; end_of_file
70263: LD_VAR 0 2
70267: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70268: LD_VAR 0 1
70272: PUSH
70273: LD_INT 200
70275: DOUBLE
70276: GREATEREQUAL
70277: IFFALSE 70285
70279: LD_INT 299
70281: DOUBLE
70282: LESSEQUAL
70283: IFTRUE 70287
70285: GO 70319
70287: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70288: LD_VAR 0 1
70292: PPUSH
70293: LD_VAR 0 2
70297: PPUSH
70298: LD_VAR 0 3
70302: PPUSH
70303: LD_VAR 0 4
70307: PPUSH
70308: LD_VAR 0 5
70312: PPUSH
70313: CALL 25608 0 5
70317: GO 70396
70319: LD_INT 300
70321: DOUBLE
70322: GREATEREQUAL
70323: IFFALSE 70331
70325: LD_INT 399
70327: DOUBLE
70328: LESSEQUAL
70329: IFTRUE 70333
70331: GO 70395
70333: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70334: LD_VAR 0 1
70338: PPUSH
70339: LD_VAR 0 2
70343: PPUSH
70344: LD_VAR 0 3
70348: PPUSH
70349: LD_VAR 0 4
70353: PPUSH
70354: LD_VAR 0 5
70358: PPUSH
70359: LD_VAR 0 6
70363: PPUSH
70364: LD_VAR 0 7
70368: PPUSH
70369: LD_VAR 0 8
70373: PPUSH
70374: LD_VAR 0 9
70378: PPUSH
70379: LD_VAR 0 10
70383: PPUSH
70384: LD_VAR 0 11
70388: PPUSH
70389: CALL 23250 0 11
70393: GO 70396
70395: POP
// end ;
70396: PPOPN 11
70398: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70399: LD_VAR 0 1
70403: PPUSH
70404: LD_VAR 0 2
70408: PPUSH
70409: LD_VAR 0 3
70413: PPUSH
70414: LD_VAR 0 4
70418: PPUSH
70419: LD_VAR 0 5
70423: PPUSH
70424: CALL 25344 0 5
// end ; end_of_file
70428: PPOPN 5
70430: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70431: LD_VAR 0 1
70435: PPUSH
70436: LD_VAR 0 2
70440: PPUSH
70441: LD_VAR 0 3
70445: PPUSH
70446: LD_VAR 0 4
70450: PPUSH
70451: LD_VAR 0 5
70455: PPUSH
70456: LD_VAR 0 6
70460: PPUSH
70461: CALL 10943 0 6
// end ;
70465: PPOPN 6
70467: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70468: CALL 10918 0 0
// end ;
70472: PPOPN 1
70474: END
