// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10322 0 0
// PrepareAmerican ;
  19: CALL 228 0 0
// PrepareRussian ;
  23: CALL 1512 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6185 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := LoadVariable ( 12_SciDed_1 , false ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 12_SciDed_1
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// end ;
 112: LD_VAR 0 1
 116: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 117: LD_INT 22
 119: PUSH
 120: LD_INT 1
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 30
 129: PUSH
 130: LD_INT 33
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PPUSH
 141: CALL_OW 69
 145: PUSH
 146: LD_INT 15
 148: GREATEREQUAL
 149: IFFALSE 161
 151: GO 153
 153: DISABLE
// SetAchievement ( ACH_FORT ) ;
 154: LD_STRING ACH_FORT
 156: PPUSH
 157: CALL_OW 543
 161: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 162: LD_INT 22
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 25
 174: PUSH
 175: LD_INT 12
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: PPUSH
 186: CALL_OW 69
 190: PUSH
 191: LD_INT 0
 193: EQUAL
 194: IFFALSE 206
 196: GO 198
 198: DISABLE
// SetAchievement ( ACH_APE ) ;
 199: LD_STRING ACH_APE
 201: PPUSH
 202: CALL_OW 543
 206: END
// every 0 0$1 trigger killCounter >= 20 do
 207: LD_EXP 5
 211: PUSH
 212: LD_INT 20
 214: GREATEREQUAL
 215: IFFALSE 227
 217: GO 219
 219: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 220: LD_STRING ACH_DOUBLE
 222: PPUSH
 223: CALL_OW 543
 227: END
// export JMM , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 228: LD_INT 0
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// uc_side := 1 ;
 235: LD_ADDR_OWVAR 20
 239: PUSH
 240: LD_INT 1
 242: ST_TO_ADDR
// uc_nation := 1 ;
 243: LD_ADDR_OWVAR 21
 247: PUSH
 248: LD_INT 1
 250: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 251: LD_INT 48
 253: PPUSH
 254: LD_STRING deltakappa
 256: PPUSH
 257: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 261: LD_INT 48
 263: PPUSH
 264: CALL_OW 274
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: LD_INT 2000
 274: PUSH
 275: LD_INT 1600
 277: PUSH
 278: LD_INT 1200
 280: PUSH
 281: LD_INT 900
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: LIST
 288: LIST
 289: PUSH
 290: LD_OWVAR 67
 294: ARRAY
 295: PPUSH
 296: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 300: LD_INT 48
 302: PPUSH
 303: CALL_OW 274
 307: PPUSH
 308: LD_INT 2
 310: PPUSH
 311: LD_INT 20
 313: PPUSH
 314: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 318: LD_INT 48
 320: PPUSH
 321: CALL_OW 274
 325: PPUSH
 326: LD_INT 3
 328: PPUSH
 329: LD_INT 100
 331: PPUSH
 332: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 336: LD_ADDR_EXP 8
 340: PUSH
 341: LD_STRING JMM
 343: PPUSH
 344: LD_EXP 1
 348: NOT
 349: PPUSH
 350: LD_STRING 13f_
 352: PPUSH
 353: CALL 30955 0 3
 357: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 358: LD_EXP 8
 362: PPUSH
 363: LD_INT 1
 365: PPUSH
 366: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 370: LD_INT 5
 372: PUSH
 373: LD_INT 5
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 3
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: PUSH
 388: LD_OWVAR 67
 392: ARRAY
 393: PPUSH
 394: LD_INT 3
 396: PPUSH
 397: LD_INT 1
 399: PPUSH
 400: LD_INT 9
 402: PUSH
 403: LD_INT 9
 405: PUSH
 406: LD_INT 5
 408: PUSH
 409: LD_INT 5
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: PUSH
 418: LD_OWVAR 67
 422: ARRAY
 423: PPUSH
 424: LD_INT 100
 426: PPUSH
 427: CALL 35972 0 5
// veh := CreateVehicle ;
 431: LD_ADDR_VAR 0 4
 435: PUSH
 436: CALL_OW 45
 440: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
 441: LD_VAR 0 4
 445: PPUSH
 446: LD_INT 1
 448: PPUSH
 449: CALL_OW 233
// PlaceUnitXY ( veh , 5 , 5 , false ) ;
 453: LD_VAR 0 4
 457: PPUSH
 458: LD_INT 5
 460: PPUSH
 461: LD_INT 5
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
 471: LD_EXP 8
 475: PPUSH
 476: LD_VAR 0 4
 480: PPUSH
 481: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 485: LD_VAR 0 4
 489: PPUSH
 490: LD_INT 1
 492: NEG
 493: PPUSH
 494: CALL_OW 242
// ComMoveXY ( veh , 21 , 8 ) ;
 498: LD_VAR 0 4
 502: PPUSH
 503: LD_INT 21
 505: PPUSH
 506: LD_INT 8
 508: PPUSH
 509: CALL_OW 111
// uc_side := 4 ;
 513: LD_ADDR_OWVAR 20
 517: PUSH
 518: LD_INT 4
 520: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 521: LD_ADDR_EXP 12
 525: PUSH
 526: LD_STRING Powell
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: LD_STRING 
 534: PPUSH
 535: CALL 30955 0 3
 539: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 540: LD_ADDR_EXP 9
 544: PUSH
 545: LD_STRING Joan
 547: PPUSH
 548: LD_EXP 1
 552: NOT
 553: PPUSH
 554: LD_STRING 10c_
 556: PPUSH
 557: CALL 30955 0 3
 561: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 562: LD_ADDR_EXP 10
 566: PUSH
 567: LD_STRING Lisa
 569: PPUSH
 570: LD_EXP 1
 574: NOT
 575: PPUSH
 576: LD_STRING 13s_
 578: PPUSH
 579: CALL 30955 0 3
 583: ST_TO_ADDR
// if Joan then
 584: LD_EXP 9
 588: IFFALSE 627
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 590: LD_EXP 9
 594: PPUSH
 595: LD_INT 4
 597: PPUSH
 598: LD_INT 0
 600: PPUSH
 601: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 605: LD_EXP 9
 609: PPUSH
 610: LD_INT 4
 612: PPUSH
 613: CALL_OW 336
// JMMGirl = 1 ;
 617: LD_ADDR_EXP 2
 621: PUSH
 622: LD_INT 1
 624: ST_TO_ADDR
// end else
 625: GO 718
// if Lisa then
 627: LD_EXP 10
 631: IFFALSE 670
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 633: LD_EXP 10
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 648: LD_EXP 10
 652: PPUSH
 653: LD_INT 1
 655: PPUSH
 656: CALL_OW 336
// JMMGirl := 2 ;
 660: LD_ADDR_EXP 2
 664: PUSH
 665: LD_INT 2
 667: ST_TO_ADDR
// end else
 668: GO 718
// begin Connie := NewCharacter ( Coonie ) ;
 670: LD_ADDR_EXP 11
 674: PUSH
 675: LD_STRING Coonie
 677: PPUSH
 678: CALL_OW 25
 682: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 683: LD_EXP 11
 687: PPUSH
 688: LD_INT 4
 690: PPUSH
 691: LD_INT 0
 693: PPUSH
 694: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 698: LD_EXP 11
 702: PPUSH
 703: LD_INT 3
 705: PPUSH
 706: CALL_OW 336
// JMMGirl := 3 ;
 710: LD_ADDR_EXP 2
 714: PUSH
 715: LD_INT 3
 717: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 718: LD_ADDR_VAR 0 2
 722: PUSH
 723: DOUBLE
 724: LD_INT 1
 726: DEC
 727: ST_TO_ADDR
 728: LD_INT 4
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: LD_INT 3
 736: PUSH
 737: LD_INT 2
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: PUSH
 746: LD_OWVAR 67
 750: ARRAY
 751: PUSH
 752: FOR_TO
 753: IFFALSE 907
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: LD_INT 2
 763: PUSH
 764: LD_INT 3
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: PUSH
 773: LD_VAR 0 2
 777: PUSH
 778: LD_INT 4
 780: MOD
 781: PUSH
 782: LD_INT 1
 784: PLUS
 785: ARRAY
 786: PPUSH
 787: LD_INT 1
 789: PPUSH
 790: LD_INT 2
 792: PPUSH
 793: LD_INT 9
 795: PUSH
 796: LD_INT 7
 798: PUSH
 799: LD_INT 4
 801: PUSH
 802: LD_INT 5
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: PUSH
 811: LD_VAR 0 2
 815: PUSH
 816: LD_INT 4
 818: MOD
 819: PUSH
 820: LD_INT 1
 822: PLUS
 823: ARRAY
 824: PPUSH
 825: LD_INT 33
 827: PPUSH
 828: LD_INT 55
 830: PPUSH
 831: CALL_OW 12
 835: PPUSH
 836: CALL 35972 0 5
// veh := CreateVehicle ;
 840: LD_ADDR_VAR 0 4
 844: PUSH
 845: CALL_OW 45
 849: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: LD_INT 5
 860: PPUSH
 861: CALL_OW 12
 865: PPUSH
 866: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 870: LD_VAR 0 4
 874: PPUSH
 875: LD_INT 500
 877: PPUSH
 878: LD_INT 950
 880: PPUSH
 881: CALL_OW 12
 885: PPUSH
 886: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 890: LD_VAR 0 4
 894: PPUSH
 895: LD_INT 5
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 49
// end ;
 905: GO 752
 907: POP
 908: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: DOUBLE
 915: LD_INT 1
 917: DEC
 918: ST_TO_ADDR
 919: LD_INT 3
 921: PUSH
 922: LD_INT 3
 924: PUSH
 925: LD_INT 2
 927: PUSH
 928: LD_INT 2
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: PUSH
 937: LD_OWVAR 67
 941: ARRAY
 942: PUSH
 943: FOR_TO
 944: IFFALSE 1066
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 946: LD_INT 3
 948: PUSH
 949: LD_INT 2
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: PUSH
 956: LD_VAR 0 2
 960: PUSH
 961: LD_INT 2
 963: MOD
 964: PUSH
 965: LD_INT 1
 967: PLUS
 968: ARRAY
 969: PPUSH
 970: LD_INT 1
 972: PPUSH
 973: LD_INT 3
 975: PPUSH
 976: LD_INT 9
 978: PUSH
 979: LD_INT 5
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PUSH
 986: LD_VAR 0 2
 990: PUSH
 991: LD_INT 2
 993: MOD
 994: PUSH
 995: LD_INT 1
 997: PLUS
 998: ARRAY
 999: PPUSH
1000: LD_INT 0
1002: PPUSH
1003: CALL 35972 0 5
// veh := CreateVehicle ;
1007: LD_ADDR_VAR 0 4
1011: PUSH
1012: CALL_OW 45
1016: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1017: LD_VAR 0 4
1021: PPUSH
1022: LD_INT 0
1024: PPUSH
1025: LD_INT 5
1027: PPUSH
1028: CALL_OW 12
1032: PPUSH
1033: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1037: LD_VAR 0 4
1041: PPUSH
1042: LD_INT 1000
1044: PPUSH
1045: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1049: LD_VAR 0 4
1053: PPUSH
1054: LD_INT 17
1056: PPUSH
1057: LD_INT 0
1059: PPUSH
1060: CALL_OW 49
// end ;
1064: GO 943
1066: POP
1067: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1068: LD_ADDR_VAR 0 2
1072: PUSH
1073: DOUBLE
1074: LD_INT 1
1076: DEC
1077: ST_TO_ADDR
1078: LD_INT 3
1080: PUSH
1081: LD_INT 2
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: LD_OWVAR 67
1100: ARRAY
1101: PUSH
1102: FOR_TO
1103: IFFALSE 1151
// begin PrepareApeman ( 1 ) ;
1105: LD_INT 1
1107: PPUSH
1108: CALL 64629 0 1
// uc_side := 4 ;
1112: LD_ADDR_OWVAR 20
1116: PUSH
1117: LD_INT 4
1119: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1120: LD_ADDR_OWVAR 28
1124: PUSH
1125: LD_INT 16
1127: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1128: CALL_OW 44
1132: PPUSH
1133: LD_INT 84
1135: PPUSH
1136: LD_INT 127
1138: PPUSH
1139: LD_INT 5
1141: PPUSH
1142: LD_INT 0
1144: PPUSH
1145: CALL_OW 50
// end ;
1149: GO 1102
1151: POP
1152: POP
// uc_side := 4 ;
1153: LD_ADDR_OWVAR 20
1157: PUSH
1158: LD_INT 4
1160: ST_TO_ADDR
// uc_nation := 1 ;
1161: LD_ADDR_OWVAR 21
1165: PUSH
1166: LD_INT 1
1168: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1169: LD_INT 2
1171: PPUSH
1172: LD_INT 3
1174: PPUSH
1175: LD_INT 1
1177: PPUSH
1178: LD_INT 12
1180: PPUSH
1181: LD_INT 100
1183: PPUSH
1184: CALL 35972 0 5
// veh := CreateVehicle ;
1188: LD_ADDR_VAR 0 4
1192: PUSH
1193: CALL_OW 45
1197: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1198: LD_VAR 0 4
1202: PPUSH
1203: LD_INT 1
1205: PPUSH
1206: LD_INT 100
1208: PPUSH
1209: CALL_OW 290
// SetLives ( veh , 450 ) ;
1213: LD_VAR 0 4
1217: PPUSH
1218: LD_INT 450
1220: PPUSH
1221: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1225: LD_VAR 0 4
1229: PPUSH
1230: LD_INT 122
1232: PPUSH
1233: LD_INT 118
1235: PPUSH
1236: LD_INT 4
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL 70498 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1246: LD_INT 1
1248: PPUSH
1249: LD_INT 2
1251: PPUSH
1252: LD_INT 0
1254: PPUSH
1255: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1259: CALL_OW 44
1263: PPUSH
1264: LD_INT 124
1266: PPUSH
1267: LD_INT 120
1269: PPUSH
1270: LD_INT 1
1272: PPUSH
1273: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1277: LD_ADDR_VAR 0 5
1281: PUSH
1282: LD_INT 18
1284: PPUSH
1285: LD_INT 0
1287: PPUSH
1288: CALL_OW 517
1292: ST_TO_ADDR
// for i := 1 to 4 do
1293: LD_ADDR_VAR 0 2
1297: PUSH
1298: DOUBLE
1299: LD_INT 1
1301: DEC
1302: ST_TO_ADDR
1303: LD_INT 4
1305: PUSH
1306: FOR_TO
1307: IFFALSE 1415
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1309: LD_INT 1
1311: PPUSH
1312: LD_INT 1
1314: PUSH
1315: LD_INT 3
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: LD_INT 1
1324: PPUSH
1325: LD_INT 2
1327: PPUSH
1328: CALL_OW 12
1332: ARRAY
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 380
// un := CreateHuman ;
1341: LD_ADDR_VAR 0 3
1345: PUSH
1346: CALL_OW 44
1350: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1351: LD_VAR 0 3
1355: PPUSH
1356: LD_INT 0
1358: PPUSH
1359: LD_INT 5
1361: PPUSH
1362: CALL_OW 12
1366: PPUSH
1367: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1371: LD_VAR 0 3
1375: PPUSH
1376: LD_VAR 0 5
1380: PUSH
1381: LD_INT 1
1383: ARRAY
1384: PUSH
1385: LD_VAR 0 2
1389: ARRAY
1390: PPUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_INT 2
1398: ARRAY
1399: PUSH
1400: LD_VAR 0 2
1404: ARRAY
1405: PPUSH
1406: LD_INT 1
1408: PPUSH
1409: CALL_OW 601
// end ;
1413: GO 1306
1415: POP
1416: POP
// end ;
1417: LD_VAR 0 1
1421: RET
// export function ChangeSideKappaBase ; begin
1422: LD_INT 0
1424: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1425: LD_INT 70
1427: PPUSH
1428: LD_INT 138
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: LD_INT 80
1436: NEG
1437: PPUSH
1438: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1442: LD_INT 70
1444: PPUSH
1445: LD_INT 138
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1455: LD_INT 147
1457: PPUSH
1458: LD_INT 122
1460: PPUSH
1461: LD_INT 1
1463: PPUSH
1464: LD_INT 40
1466: NEG
1467: PPUSH
1468: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1472: LD_INT 147
1474: PPUSH
1475: LD_INT 122
1477: PPUSH
1478: LD_INT 1
1480: PPUSH
1481: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1485: LD_INT 22
1487: PUSH
1488: LD_INT 4
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 69
1499: PPUSH
1500: LD_INT 1
1502: PPUSH
1503: CALL_OW 235
// end ; end_of_file
1507: LD_VAR 0 1
1511: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1512: LD_INT 0
1514: PPUSH
1515: PPUSH
1516: PPUSH
1517: PPUSH
1518: PPUSH
1519: PPUSH
// uc_side := 3 ;
1520: LD_ADDR_OWVAR 20
1524: PUSH
1525: LD_INT 3
1527: ST_TO_ADDR
// uc_nation := 3 ;
1528: LD_ADDR_OWVAR 21
1532: PUSH
1533: LD_INT 3
1535: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1536: LD_ADDR_EXP 14
1540: PUSH
1541: LD_INT 8
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: LD_INT 14
1549: PUSH
1550: LD_INT 17
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: LD_OWVAR 67
1563: ARRAY
1564: ST_TO_ADDR
// ruMobile := [ ] ;
1565: LD_ADDR_EXP 15
1569: PUSH
1570: EMPTY
1571: ST_TO_ADDR
// ruBuildList := [ ] ;
1572: LD_ADDR_EXP 16
1576: PUSH
1577: EMPTY
1578: ST_TO_ADDR
// ruAttackers := [ ] ;
1579: LD_ADDR_EXP 17
1583: PUSH
1584: EMPTY
1585: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1586: LD_ADDR_EXP 18
1590: PUSH
1591: LD_INT 3
1593: PPUSH
1594: LD_INT 3
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: CALL 31018 0 3
1604: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1605: LD_ADDR_VAR 0 6
1609: PUSH
1610: LD_INT 43
1612: PUSH
1613: LD_INT 46
1615: PUSH
1616: LD_INT 45
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1624: LD_ADDR_EXP 19
1628: PUSH
1629: LD_INT 46
1631: PUSH
1632: LD_INT 70
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 121
1641: PUSH
1642: LD_INT 95
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PUSH
1649: LD_INT 68
1651: PUSH
1652: LD_INT 65
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: ST_TO_ADDR
// if not russianRocketsDisabled then
1664: LD_EXP 6
1668: NOT
1669: IFFALSE 1685
// weapons := weapons ^ ru_rocket ;
1671: LD_ADDR_VAR 0 6
1675: PUSH
1676: LD_VAR 0 6
1680: PUSH
1681: LD_INT 47
1683: ADD
1684: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1685: LD_ADDR_EXP 13
1689: PUSH
1690: LD_STRING Eisenstein
1692: PPUSH
1693: CALL_OW 25
1697: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1698: LD_EXP 13
1702: PPUSH
1703: LD_INT 22
1705: PPUSH
1706: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 1000 , 2000 , 2500 , 3000 ] [ Difficulty ] ) ;
1710: LD_INT 22
1712: PPUSH
1713: CALL_OW 274
1717: PPUSH
1718: LD_INT 1
1720: PPUSH
1721: LD_INT 1000
1723: PUSH
1724: LD_INT 2000
1726: PUSH
1727: LD_INT 2500
1729: PUSH
1730: LD_INT 3000
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: PUSH
1739: LD_OWVAR 67
1743: ARRAY
1744: PPUSH
1745: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1749: LD_INT 22
1751: PPUSH
1752: CALL_OW 274
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: LD_INT 600
1762: PPUSH
1763: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1767: LD_INT 22
1769: PPUSH
1770: CALL_OW 274
1774: PPUSH
1775: LD_INT 3
1777: PPUSH
1778: LD_INT 100
1780: PPUSH
1781: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1785: LD_INT 116
1787: PPUSH
1788: LD_INT 46
1790: PPUSH
1791: LD_INT 70
1793: PPUSH
1794: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1798: LD_ADDR_VAR 0 2
1802: PUSH
1803: LD_INT 22
1805: PUSH
1806: LD_INT 3
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 3
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PPUSH
1827: CALL_OW 69
1831: PUSH
1832: FOR_IN
1833: IFFALSE 1855
// SetBLevel ( i , 6 + Difficulty ) ;
1835: LD_VAR 0 2
1839: PPUSH
1840: LD_INT 6
1842: PUSH
1843: LD_OWVAR 67
1847: PLUS
1848: PPUSH
1849: CALL_OW 241
1853: GO 1832
1855: POP
1856: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1857: LD_ADDR_VAR 0 4
1861: PUSH
1862: LD_INT 22
1864: PUSH
1865: LD_INT 3
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 2
1874: PUSH
1875: LD_INT 30
1877: PUSH
1878: LD_INT 32
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 30
1887: PUSH
1888: LD_INT 33
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PPUSH
1904: CALL_OW 69
1908: ST_TO_ADDR
// if russianRocketsDisabled then
1909: LD_EXP 6
1913: IFFALSE 1989
// begin ruTechList := ruTechList diff tech_advrocket ;
1915: LD_ADDR_EXP 18
1919: PUSH
1920: LD_EXP 18
1924: PUSH
1925: LD_INT 71
1927: DIFF
1928: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1929: LD_ADDR_VAR 0 2
1933: PUSH
1934: LD_VAR 0 4
1938: PPUSH
1939: LD_INT 35
1941: PUSH
1942: LD_INT 47
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PPUSH
1949: CALL_OW 72
1953: PUSH
1954: FOR_IN
1955: IFFALSE 1987
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1957: LD_VAR 0 2
1961: PPUSH
1962: LD_VAR 0 6
1966: PUSH
1967: LD_INT 1
1969: PPUSH
1970: LD_VAR 0 6
1974: PPUSH
1975: CALL_OW 12
1979: ARRAY
1980: PPUSH
1981: CALL_OW 431
1985: GO 1954
1987: POP
1988: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
1989: LD_ADDR_VAR 0 2
1993: PUSH
1994: LD_INT 22
1996: PUSH
1997: LD_INT 3
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PUSH
2004: LD_INT 30
2006: PUSH
2007: LD_INT 32
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: PPUSH
2018: CALL_OW 69
2022: PUSH
2023: FOR_IN
2024: IFFALSE 2073
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2026: LD_INT 0
2028: PPUSH
2029: LD_INT 5
2031: PUSH
2032: LD_INT 6
2034: PUSH
2035: LD_INT 7
2037: PUSH
2038: LD_INT 8
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_OWVAR 67
2051: ARRAY
2052: PPUSH
2053: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2057: CALL_OW 44
2061: PPUSH
2062: LD_VAR 0 2
2066: PPUSH
2067: CALL_OW 52
// end ;
2071: GO 2023
2073: POP
2074: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2075: LD_ADDR_VAR 0 2
2079: PUSH
2080: LD_INT 22
2082: PUSH
2083: LD_INT 3
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PUSH
2090: LD_INT 30
2092: PUSH
2093: LD_INT 5
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PPUSH
2104: CALL_OW 69
2108: PUSH
2109: FOR_IN
2110: IFFALSE 2244
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2112: LD_ADDR_VAR 0 3
2116: PUSH
2117: DOUBLE
2118: LD_INT 1
2120: DEC
2121: ST_TO_ADDR
2122: LD_INT 2
2124: PUSH
2125: LD_INT 2
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 3
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_OWVAR 67
2144: ARRAY
2145: PUSH
2146: FOR_TO
2147: IFFALSE 2240
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2149: LD_INT 0
2151: PPUSH
2152: LD_INT 5
2154: PUSH
2155: LD_INT 6
2157: PUSH
2158: LD_INT 7
2160: PUSH
2161: LD_INT 8
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: PUSH
2170: LD_OWVAR 67
2174: ARRAY
2175: PPUSH
2176: CALL_OW 381
// un := CreateHuman ;
2180: LD_ADDR_VAR 0 5
2184: PUSH
2185: CALL_OW 44
2189: ST_TO_ADDR
// SetDir ( un , class_bazooker ) ;
2190: LD_VAR 0 5
2194: PPUSH
2195: LD_INT 9
2197: PPUSH
2198: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2202: LD_VAR 0 5
2206: PPUSH
2207: LD_VAR 0 2
2211: PPUSH
2212: CALL_OW 52
// if j = 2 then
2216: LD_VAR 0 3
2220: PUSH
2221: LD_INT 2
2223: EQUAL
2224: IFFALSE 2238
// SetUnitAttackType ( un , 3 ) ;
2226: LD_VAR 0 5
2230: PPUSH
2231: LD_INT 3
2233: PPUSH
2234: CALL_OW 603
// end ;
2238: GO 2146
2240: POP
2241: POP
// end ;
2242: GO 2109
2244: POP
2245: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2246: LD_ADDR_VAR 0 2
2250: PUSH
2251: DOUBLE
2252: LD_INT 1
2254: DEC
2255: ST_TO_ADDR
2256: LD_INT 5
2258: PUSH
2259: LD_INT 6
2261: PUSH
2262: LD_INT 6
2264: PUSH
2265: LD_INT 6
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: PUSH
2274: LD_OWVAR 67
2278: ARRAY
2279: PUSH
2280: FOR_TO
2281: IFFALSE 2328
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2283: LD_INT 0
2285: PPUSH
2286: LD_INT 6
2288: PUSH
2289: LD_INT 7
2291: PUSH
2292: LD_INT 9
2294: PUSH
2295: LD_INT 10
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: PUSH
2304: LD_OWVAR 67
2308: ARRAY
2309: PPUSH
2310: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2314: CALL_OW 44
2318: PPUSH
2319: LD_INT 22
2321: PPUSH
2322: CALL_OW 52
// end ;
2326: GO 2280
2328: POP
2329: POP
// for i := 1 to 2 do
2330: LD_ADDR_VAR 0 2
2334: PUSH
2335: DOUBLE
2336: LD_INT 1
2338: DEC
2339: ST_TO_ADDR
2340: LD_INT 2
2342: PUSH
2343: FOR_TO
2344: IFFALSE 2424
// for j := 1 to 6 do
2346: LD_ADDR_VAR 0 3
2350: PUSH
2351: DOUBLE
2352: LD_INT 1
2354: DEC
2355: ST_TO_ADDR
2356: LD_INT 6
2358: PUSH
2359: FOR_TO
2360: IFFALSE 2420
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2362: LD_INT 0
2364: PPUSH
2365: LD_INT 6
2367: PUSH
2368: LD_INT 7
2370: PUSH
2371: LD_INT 9
2373: PUSH
2374: LD_INT 10
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: PUSH
2383: LD_OWVAR 67
2387: ARRAY
2388: PPUSH
2389: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2393: CALL_OW 44
2397: PPUSH
2398: LD_INT 1
2400: PUSH
2401: LD_INT 40
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_VAR 0 2
2412: ARRAY
2413: PPUSH
2414: CALL_OW 52
// end ;
2418: GO 2359
2420: POP
2421: POP
2422: GO 2343
2424: POP
2425: POP
// for i := 1 to 6 do
2426: LD_ADDR_VAR 0 2
2430: PUSH
2431: DOUBLE
2432: LD_INT 1
2434: DEC
2435: ST_TO_ADDR
2436: LD_INT 6
2438: PUSH
2439: FOR_TO
2440: IFFALSE 2487
// begin PrepareScientist ( false , 6 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 6
2447: PPUSH
2448: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2452: CALL_OW 44
2456: PPUSH
2457: LD_INT 14
2459: PUSH
2460: LD_INT 15
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PUSH
2467: LD_VAR 0 2
2471: PUSH
2472: LD_INT 2
2474: MOD
2475: PUSH
2476: LD_INT 1
2478: PLUS
2479: ARRAY
2480: PPUSH
2481: CALL_OW 52
// end ;
2485: GO 2439
2487: POP
2488: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2489: LD_INT 22
2491: PPUSH
2492: LD_INT 3
2494: PPUSH
2495: LD_INT 3
2497: PPUSH
2498: LD_INT 51
2500: PPUSH
2501: LD_INT 100
2503: PPUSH
2504: CALL 35972 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2508: CALL_OW 45
2512: PPUSH
2513: LD_INT 116
2515: PPUSH
2516: LD_INT 58
2518: PPUSH
2519: LD_INT 2
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: CALL_OW 50
// for i := 1 to 2 do
2529: LD_ADDR_VAR 0 2
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_INT 2
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2587
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2545: LD_INT 22
2547: PPUSH
2548: LD_INT 3
2550: PPUSH
2551: LD_INT 3
2553: PPUSH
2554: LD_INT 52
2556: PPUSH
2557: LD_INT 100
2559: PPUSH
2560: CALL 35972 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2564: CALL_OW 45
2568: PPUSH
2569: LD_INT 111
2571: PPUSH
2572: LD_INT 58
2574: PPUSH
2575: LD_INT 4
2577: PPUSH
2578: LD_INT 0
2580: PPUSH
2581: CALL_OW 50
// end ;
2585: GO 2542
2587: POP
2588: POP
// for i := 1 to 4 do
2589: LD_ADDR_VAR 0 2
2593: PUSH
2594: DOUBLE
2595: LD_INT 1
2597: DEC
2598: ST_TO_ADDR
2599: LD_INT 4
2601: PUSH
2602: FOR_TO
2603: IFFALSE 2632
// begin PrepareApemanEngineer ( ) ;
2605: CALL 64550 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2609: CALL_OW 44
2613: PPUSH
2614: LD_INT 118
2616: PPUSH
2617: LD_INT 50
2619: PPUSH
2620: LD_INT 3
2622: PPUSH
2623: LD_INT 0
2625: PPUSH
2626: CALL_OW 50
// end ;
2630: GO 2602
2632: POP
2633: POP
// end ;
2634: LD_VAR 0 1
2638: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2639: LD_EXP 18
2643: IFFALSE 2771
2645: GO 2647
2647: DISABLE
2648: LD_INT 0
2650: PPUSH
2651: PPUSH
2652: PPUSH
// begin enable ;
2653: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2654: LD_ADDR_VAR 0 3
2658: PUSH
2659: LD_INT 14
2661: PUSH
2662: LD_INT 15
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: PPUSH
2669: LD_INT 50
2671: PUSH
2672: EMPTY
2673: LIST
2674: PPUSH
2675: CALL_OW 72
2679: ST_TO_ADDR
// if not labs then
2680: LD_VAR 0 3
2684: NOT
2685: IFFALSE 2690
// begin disable ;
2687: DISABLE
// exit ;
2688: GO 2771
// end ; for i in labs do
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_VAR 0 3
2699: PUSH
2700: FOR_IN
2701: IFFALSE 2769
// if BuildingStatus ( i ) = bs_idle then
2703: LD_VAR 0 1
2707: PPUSH
2708: CALL_OW 461
2712: PUSH
2713: LD_INT 2
2715: EQUAL
2716: IFFALSE 2767
// for t in ruTechList do
2718: LD_ADDR_VAR 0 2
2722: PUSH
2723: LD_EXP 18
2727: PUSH
2728: FOR_IN
2729: IFFALSE 2765
// if CanBeResearched ( i , t ) then
2731: LD_VAR 0 1
2735: PPUSH
2736: LD_VAR 0 2
2740: PPUSH
2741: CALL_OW 430
2745: IFFALSE 2763
// begin ComResearch ( i , t ) ;
2747: LD_VAR 0 1
2751: PPUSH
2752: LD_VAR 0 2
2756: PPUSH
2757: CALL_OW 124
// break ;
2761: GO 2765
// end ;
2763: GO 2728
2765: POP
2766: POP
2767: GO 2700
2769: POP
2770: POP
// end ;
2771: PPOPN 3
2773: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2774: LD_INT 3
2776: PUSH
2777: LD_INT 22
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: LD_INT 32
2793: PUSH
2794: LD_INT 1
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PPUSH
2805: CALL_OW 69
2809: IFFALSE 2893
2811: GO 2813
2813: DISABLE
2814: LD_INT 0
2816: PPUSH
// begin enable ;
2817: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2818: LD_ADDR_VAR 0 1
2822: PUSH
2823: LD_INT 3
2825: PUSH
2826: LD_INT 22
2828: PUSH
2829: LD_INT 1
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 32
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 69
2858: PUSH
2859: FOR_IN
2860: IFFALSE 2891
// if GetFuel ( i ) < 3 then
2862: LD_VAR 0 1
2866: PPUSH
2867: CALL_OW 261
2871: PUSH
2872: LD_INT 3
2874: LESS
2875: IFFALSE 2889
// SetFuel ( i , 3 ) ;
2877: LD_VAR 0 1
2881: PPUSH
2882: LD_INT 3
2884: PPUSH
2885: CALL_OW 240
2889: GO 2859
2891: POP
2892: POP
// end ;
2893: PPOPN 1
2895: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) and ruAttackers < [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , chassis , weapon ;
2896: LD_INT 1
2898: PUSH
2899: LD_INT 40
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PPUSH
2906: LD_INT 50
2908: PUSH
2909: EMPTY
2910: LIST
2911: PPUSH
2912: CALL_OW 72
2916: PUSH
2917: LD_EXP 17
2921: PUSH
2922: LD_INT 5
2924: PUSH
2925: LD_INT 6
2927: PUSH
2928: LD_INT 7
2930: PUSH
2931: LD_INT 8
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: LIST
2938: LIST
2939: PUSH
2940: LD_OWVAR 67
2944: ARRAY
2945: LESS
2946: AND
2947: IFFALSE 3283
2949: GO 2951
2951: DISABLE
2952: LD_INT 0
2954: PPUSH
2955: PPUSH
2956: PPUSH
// begin enable ;
2957: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
2958: LD_ADDR_VAR 0 1
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: LD_INT 40
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PPUSH
2973: LD_INT 50
2975: PUSH
2976: EMPTY
2977: LIST
2978: PPUSH
2979: CALL_OW 72
2983: PUSH
2984: FOR_IN
2985: IFFALSE 3281
// begin if BuildingStatus ( i ) <> bs_idle then
2987: LD_VAR 0 1
2991: PPUSH
2992: CALL_OW 461
2996: PUSH
2997: LD_INT 2
2999: NONEQUAL
3000: IFFALSE 3004
// continue ;
3002: GO 2984
// if i = ruFac1 then
3004: LD_VAR 0 1
3008: PUSH
3009: LD_INT 1
3011: EQUAL
3012: IFFALSE 3055
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3014: LD_ADDR_VAR 0 2
3018: PUSH
3019: LD_INT 21
3021: PUSH
3022: LD_INT 22
3024: PUSH
3025: LD_INT 23
3027: PUSH
3028: LD_INT 23
3030: PUSH
3031: LD_INT 24
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: LD_INT 1
3043: PPUSH
3044: LD_INT 5
3046: PPUSH
3047: CALL_OW 12
3051: ARRAY
3052: ST_TO_ADDR
3053: GO 3082
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3055: LD_ADDR_VAR 0 2
3059: PUSH
3060: LD_INT 21
3062: PUSH
3063: LD_INT 23
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: PUSH
3070: LD_INT 1
3072: PPUSH
3073: LD_INT 2
3075: PPUSH
3076: CALL_OW 12
3080: ARRAY
3081: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3082: LD_ADDR_VAR 0 3
3086: PUSH
3087: LD_INT 49
3089: PUSH
3090: LD_INT 44
3092: PUSH
3093: LD_INT 43
3095: PUSH
3096: LD_INT 46
3098: PUSH
3099: LD_INT 45
3101: PUSH
3102: LD_INT 46
3104: PUSH
3105: LD_INT 45
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: ST_TO_ADDR
// if not russianRocketsDisabled then
3117: LD_EXP 6
3121: NOT
3122: IFFALSE 3142
// weapon := Join ( weapon , ru_rocket ) ;
3124: LD_ADDR_VAR 0 3
3128: PUSH
3129: LD_VAR 0 3
3133: PPUSH
3134: LD_INT 47
3136: PPUSH
3137: CALL 68356 0 2
3141: ST_TO_ADDR
// weapon := weapon [ Difficulty + rand ( 0 , 3 ) ] ;
3142: LD_ADDR_VAR 0 3
3146: PUSH
3147: LD_VAR 0 3
3151: PUSH
3152: LD_OWVAR 67
3156: PUSH
3157: LD_INT 0
3159: PPUSH
3160: LD_INT 3
3162: PPUSH
3163: CALL_OW 12
3167: PLUS
3168: ARRAY
3169: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3170: LD_VAR 0 2
3174: PUSH
3175: LD_INT 21
3177: PUSH
3178: LD_INT 22
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: IN
3185: PUSH
3186: LD_VAR 0 3
3190: PUSH
3191: LD_INT 46
3193: PUSH
3194: LD_INT 47
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: IN
3201: AND
3202: IFFALSE 3235
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3204: LD_ADDR_VAR 0 3
3208: PUSH
3209: LD_INT 44
3211: PUSH
3212: LD_INT 45
3214: PUSH
3215: LD_INT 49
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 1
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: CALL_OW 12
3233: ARRAY
3234: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3235: LD_VAR 0 1
3239: PPUSH
3240: LD_VAR 0 2
3244: PPUSH
3245: LD_INT 1
3247: PUSH
3248: LD_INT 3
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 1
3257: PPUSH
3258: LD_INT 2
3260: PPUSH
3261: CALL_OW 12
3265: ARRAY
3266: PPUSH
3267: LD_INT 3
3269: PPUSH
3270: LD_VAR 0 3
3274: PPUSH
3275: CALL_OW 185
// end ;
3279: GO 2984
3281: POP
3282: POP
// end ;
3283: PPOPN 3
3285: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3286: LD_INT 22
3288: PPUSH
3289: CALL_OW 302
3293: IFFALSE 4150
3295: GO 3297
3297: DISABLE
3298: LD_INT 0
3300: PPUSH
3301: PPUSH
3302: PPUSH
3303: PPUSH
3304: PPUSH
3305: PPUSH
3306: PPUSH
3307: PPUSH
// begin enable ;
3308: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3309: LD_ADDR_VAR 0 3
3313: PUSH
3314: LD_INT 12
3316: PPUSH
3317: LD_INT 3
3319: PUSH
3320: LD_INT 24
3322: PUSH
3323: LD_INT 1000
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 21
3336: PUSH
3337: LD_INT 3
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PPUSH
3348: CALL_OW 70
3352: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3353: LD_ADDR_VAR 0 4
3357: PUSH
3358: LD_INT 22
3360: PUSH
3361: LD_INT 3
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PUSH
3368: LD_INT 25
3370: PUSH
3371: LD_INT 2
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PPUSH
3382: CALL_OW 69
3386: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3387: LD_ADDR_VAR 0 5
3391: PUSH
3392: LD_INT 22
3394: PUSH
3395: LD_INT 3
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 34
3404: PUSH
3405: LD_INT 52
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PPUSH
3416: CALL_OW 69
3420: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3421: LD_ADDR_VAR 0 7
3425: PUSH
3426: LD_INT 22
3428: PUSH
3429: LD_INT 3
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PUSH
3436: LD_INT 25
3438: PUSH
3439: LD_INT 4
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PPUSH
3450: CALL_OW 69
3454: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3455: LD_ADDR_VAR 0 8
3459: PUSH
3460: LD_INT 14
3462: PUSH
3463: LD_INT 15
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3470: LD_VAR 0 7
3474: PUSH
3475: LD_VAR 0 4
3479: PPUSH
3480: LD_INT 120
3482: PUSH
3483: LD_INT 2
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PPUSH
3490: CALL_OW 72
3494: AND
3495: IFFALSE 3508
// ComExitAll ( sci ) else
3497: LD_VAR 0 7
3501: PPUSH
3502: CALL 68837 0 1
3506: GO 3590
// if sci then
3508: LD_VAR 0 7
3512: IFFALSE 3590
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3514: LD_VAR 0 7
3518: PPUSH
3519: LD_INT 3
3521: PUSH
3522: LD_INT 54
3524: PUSH
3525: EMPTY
3526: LIST
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: PPUSH
3532: CALL_OW 72
3536: PUSH
3537: LD_VAR 0 8
3541: AND
3542: IFFALSE 3590
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3544: LD_VAR 0 7
3548: PPUSH
3549: LD_INT 3
3551: PUSH
3552: LD_INT 54
3554: PUSH
3555: EMPTY
3556: LIST
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PPUSH
3562: CALL_OW 72
3566: PPUSH
3567: LD_VAR 0 8
3571: PUSH
3572: LD_INT 1
3574: PPUSH
3575: LD_VAR 0 8
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: PPUSH
3586: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3590: LD_VAR 0 5
3594: PPUSH
3595: LD_INT 50
3597: PUSH
3598: EMPTY
3599: LIST
3600: PPUSH
3601: CALL_OW 72
3605: PUSH
3606: LD_VAR 0 3
3610: AND
3611: IFFALSE 3652
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3613: LD_VAR 0 5
3617: PPUSH
3618: LD_INT 50
3620: PUSH
3621: EMPTY
3622: LIST
3623: PPUSH
3624: CALL_OW 72
3628: PPUSH
3629: LD_VAR 0 3
3633: PPUSH
3634: LD_VAR 0 5
3638: PUSH
3639: LD_INT 1
3641: ARRAY
3642: PPUSH
3643: CALL_OW 74
3647: PPUSH
3648: CALL_OW 130
// if eng then
3652: LD_VAR 0 4
3656: IFFALSE 4150
// begin for i in eng do
3658: LD_ADDR_VAR 0 1
3662: PUSH
3663: LD_VAR 0 4
3667: PUSH
3668: FOR_IN
3669: IFFALSE 4148
// begin tag := GetTag ( i ) ;
3671: LD_ADDR_VAR 0 6
3675: PUSH
3676: LD_VAR 0 1
3680: PPUSH
3681: CALL_OW 110
3685: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3686: LD_VAR 0 3
3690: NOT
3691: PUSH
3692: LD_EXP 16
3696: NOT
3697: AND
3698: PUSH
3699: LD_VAR 0 6
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: AND
3708: IFFALSE 3734
// begin SetTag ( i , 0 ) ;
3710: LD_VAR 0 1
3714: PPUSH
3715: LD_INT 0
3717: PPUSH
3718: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3722: LD_VAR 0 1
3726: PPUSH
3727: LD_INT 22
3729: PPUSH
3730: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3734: LD_VAR 0 3
3738: PUSH
3739: LD_EXP 16
3743: OR
3744: PUSH
3745: LD_VAR 0 6
3749: PUSH
3750: LD_INT 0
3752: EQUAL
3753: AND
3754: IFFALSE 3768
// SetTag ( i , 1 ) ;
3756: LD_VAR 0 1
3760: PPUSH
3761: LD_INT 1
3763: PPUSH
3764: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3768: LD_VAR 0 1
3772: PPUSH
3773: CALL_OW 310
3777: PUSH
3778: LD_VAR 0 6
3782: PUSH
3783: LD_INT 1
3785: EQUAL
3786: AND
3787: IFFALSE 3798
// ComExit ( i ) ;
3789: LD_VAR 0 1
3793: PPUSH
3794: CALL 68754 0 1
// if GetLives ( i ) < 500 and tag = 1 then
3798: LD_VAR 0 1
3802: PPUSH
3803: CALL_OW 256
3807: PUSH
3808: LD_INT 500
3810: LESS
3811: PUSH
3812: LD_VAR 0 6
3816: PUSH
3817: LD_INT 1
3819: EQUAL
3820: AND
3821: IFFALSE 3835
// SetTag ( i , 2 ) ;
3823: LD_VAR 0 1
3827: PPUSH
3828: LD_INT 2
3830: PPUSH
3831: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3835: LD_VAR 0 1
3839: PPUSH
3840: CALL_OW 256
3844: PUSH
3845: LD_INT 1000
3847: EQUAL
3848: PUSH
3849: LD_VAR 0 6
3853: PUSH
3854: LD_INT 2
3856: EQUAL
3857: AND
3858: IFFALSE 3872
// SetTag ( i , 1 ) ;
3860: LD_VAR 0 1
3864: PPUSH
3865: LD_INT 1
3867: PPUSH
3868: CALL_OW 109
// if tag = 2 then
3872: LD_VAR 0 6
3876: PUSH
3877: LD_INT 2
3879: EQUAL
3880: IFFALSE 3927
// begin if GetDistUnitXY ( i , 84 , 93 ) > 6 then
3882: LD_VAR 0 1
3886: PPUSH
3887: LD_INT 84
3889: PPUSH
3890: LD_INT 93
3892: PPUSH
3893: CALL_OW 297
3897: PUSH
3898: LD_INT 6
3900: GREATER
3901: IFFALSE 3927
// begin ComMoveXY ( i , 84 , 93 ) ;
3903: LD_VAR 0 1
3907: PPUSH
3908: LD_INT 84
3910: PPUSH
3911: LD_INT 93
3913: PPUSH
3914: CALL_OW 111
// AddComHold ( i ) ;
3918: LD_VAR 0 1
3922: PPUSH
3923: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
3927: LD_VAR 0 1
3931: PPUSH
3932: LD_INT 11
3934: PPUSH
3935: CALL_OW 308
3939: IFFALSE 3953
// ComMoveToArea ( i , ruBaseArea ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_INT 12
3948: PPUSH
3949: CALL_OW 113
// if tag = 1 then
3953: LD_VAR 0 6
3957: PUSH
3958: LD_INT 1
3960: EQUAL
3961: IFFALSE 4146
// begin if b then
3963: LD_VAR 0 3
3967: IFFALSE 3995
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
3969: LD_VAR 0 1
3973: PPUSH
3974: LD_VAR 0 3
3978: PPUSH
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 74
3988: PPUSH
3989: CALL_OW 130
3993: GO 4146
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
3995: LD_EXP 16
3999: PUSH
4000: LD_INT 11
4002: PPUSH
4003: LD_INT 81
4005: PUSH
4006: LD_INT 3
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PPUSH
4013: CALL_OW 70
4017: PUSH
4018: LD_INT 0
4020: EQUAL
4021: AND
4022: PUSH
4023: LD_INT 22
4025: PPUSH
4026: LD_EXP 16
4030: PUSH
4031: LD_INT 1
4033: ARRAY
4034: PUSH
4035: LD_INT 1
4037: ARRAY
4038: PPUSH
4039: LD_EXP 16
4043: PUSH
4044: LD_INT 1
4046: ARRAY
4047: PUSH
4048: LD_INT 2
4050: ARRAY
4051: PPUSH
4052: LD_EXP 16
4056: PUSH
4057: LD_INT 1
4059: ARRAY
4060: PUSH
4061: LD_INT 3
4063: ARRAY
4064: PPUSH
4065: LD_EXP 16
4069: PUSH
4070: LD_INT 1
4072: ARRAY
4073: PUSH
4074: LD_INT 4
4076: ARRAY
4077: PPUSH
4078: CALL 44197 0 5
4082: AND
4083: IFFALSE 4146
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4085: LD_VAR 0 1
4089: PPUSH
4090: LD_EXP 16
4094: PUSH
4095: LD_INT 1
4097: ARRAY
4098: PUSH
4099: LD_INT 1
4101: ARRAY
4102: PPUSH
4103: LD_EXP 16
4107: PUSH
4108: LD_INT 1
4110: ARRAY
4111: PUSH
4112: LD_INT 2
4114: ARRAY
4115: PPUSH
4116: LD_EXP 16
4120: PUSH
4121: LD_INT 1
4123: ARRAY
4124: PUSH
4125: LD_INT 3
4127: ARRAY
4128: PPUSH
4129: LD_EXP 16
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: PUSH
4138: LD_INT 4
4140: ARRAY
4141: PPUSH
4142: CALL_OW 145
// end ; end ;
4146: GO 3668
4148: POP
4149: POP
// end ; end ;
4150: PPOPN 8
4152: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4153: LD_INT 22
4155: PUSH
4156: LD_INT 3
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 3
4165: PUSH
4166: LD_INT 60
4168: PUSH
4169: EMPTY
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: LD_INT 50
4178: PUSH
4179: EMPTY
4180: LIST
4181: PUSH
4182: LD_INT 25
4184: PUSH
4185: LD_INT 16
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: PPUSH
4198: CALL_OW 69
4202: PUSH
4203: LD_INT 14
4205: PPUSH
4206: CALL_OW 435
4210: AND
4211: IFFALSE 4323
4213: GO 4215
4215: DISABLE
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
// begin enable ;
4220: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4221: LD_ADDR_VAR 0 2
4225: PUSH
4226: LD_INT 14
4228: PPUSH
4229: CALL_OW 435
4233: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4234: LD_ADDR_VAR 0 1
4238: PUSH
4239: LD_INT 22
4241: PUSH
4242: LD_INT 3
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: LD_INT 3
4251: PUSH
4252: LD_INT 60
4254: PUSH
4255: EMPTY
4256: LIST
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PUSH
4262: LD_INT 50
4264: PUSH
4265: EMPTY
4266: LIST
4267: PUSH
4268: LD_INT 25
4270: PUSH
4271: LD_INT 16
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: PPUSH
4284: CALL_OW 69
4288: PUSH
4289: FOR_IN
4290: IFFALSE 4321
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4292: LD_VAR 0 1
4296: PPUSH
4297: LD_VAR 0 2
4301: PUSH
4302: LD_INT 1
4304: ARRAY
4305: PPUSH
4306: LD_VAR 0 2
4310: PUSH
4311: LD_INT 2
4313: ARRAY
4314: PPUSH
4315: CALL_OW 117
4319: GO 4289
4321: POP
4322: POP
// end ;
4323: PPOPN 2
4325: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4326: LD_INT 22
4328: PUSH
4329: LD_INT 3
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 3
4338: PUSH
4339: LD_INT 60
4341: PUSH
4342: EMPTY
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: LD_INT 50
4351: PUSH
4352: EMPTY
4353: LIST
4354: PUSH
4355: LD_INT 34
4357: PUSH
4358: LD_INT 51
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: PPUSH
4371: CALL_OW 69
4375: PUSH
4376: LD_INT 13
4378: PPUSH
4379: CALL_OW 435
4383: AND
4384: IFFALSE 4496
4386: GO 4388
4388: DISABLE
4389: LD_INT 0
4391: PPUSH
4392: PPUSH
// begin enable ;
4393: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4394: LD_ADDR_VAR 0 2
4398: PUSH
4399: LD_INT 13
4401: PPUSH
4402: CALL_OW 435
4406: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4407: LD_ADDR_VAR 0 1
4411: PUSH
4412: LD_INT 22
4414: PUSH
4415: LD_INT 3
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 3
4424: PUSH
4425: LD_INT 60
4427: PUSH
4428: EMPTY
4429: LIST
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: PUSH
4435: LD_INT 50
4437: PUSH
4438: EMPTY
4439: LIST
4440: PUSH
4441: LD_INT 34
4443: PUSH
4444: LD_INT 51
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PPUSH
4457: CALL_OW 69
4461: PUSH
4462: FOR_IN
4463: IFFALSE 4494
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4465: LD_VAR 0 1
4469: PPUSH
4470: LD_VAR 0 2
4474: PUSH
4475: LD_INT 1
4477: ARRAY
4478: PPUSH
4479: LD_VAR 0 2
4483: PUSH
4484: LD_INT 2
4486: ARRAY
4487: PPUSH
4488: CALL_OW 117
4492: GO 4462
4494: POP
4495: POP
// end ;
4496: PPOPN 2
4498: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4499: LD_OWVAR 67
4503: PUSH
4504: LD_INT 1
4506: GREATER
4507: PUSH
4508: LD_INT 1
4510: PPUSH
4511: CALL_OW 302
4515: AND
4516: IFFALSE 4605
4518: GO 4520
4520: DISABLE
4521: LD_INT 0
4523: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4524: LD_ADDR_VAR 0 1
4528: PUSH
4529: DOUBLE
4530: LD_INT 1
4532: DEC
4533: ST_TO_ADDR
4534: LD_INT 3
4536: PUSH
4537: LD_INT 4
4539: PUSH
4540: LD_INT 5
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: LIST
4547: PUSH
4548: LD_OWVAR 67
4552: PUSH
4553: LD_INT 1
4555: MINUS
4556: ARRAY
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4603
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4561: LD_INT 1
4563: PUSH
4564: LD_INT 40
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_VAR 0 1
4575: PUSH
4576: LD_INT 2
4578: MOD
4579: PUSH
4580: LD_INT 1
4582: PLUS
4583: ARRAY
4584: PPUSH
4585: LD_INT 21
4587: PPUSH
4588: LD_INT 3
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 45
4596: PPUSH
4597: CALL_OW 185
// end ;
4601: GO 4558
4603: POP
4604: POP
// end ;
4605: PPOPN 1
4607: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4608: LD_EXP 15
4612: IFFALSE 5202
4614: GO 4616
4616: DISABLE
4617: LD_INT 0
4619: PPUSH
4620: PPUSH
4621: PPUSH
// begin enable ;
4622: ENABLE
// if not ruMobile then
4623: LD_EXP 15
4627: NOT
4628: IFFALSE 4632
// exit ;
4630: GO 5202
// for i in ruMobile do
4632: LD_ADDR_VAR 0 1
4636: PUSH
4637: LD_EXP 15
4641: PUSH
4642: FOR_IN
4643: IFFALSE 5200
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4645: LD_VAR 0 1
4649: PPUSH
4650: CALL_OW 302
4654: NOT
4655: PUSH
4656: LD_VAR 0 1
4660: PPUSH
4661: CALL_OW 255
4665: PUSH
4666: LD_INT 3
4668: NONEQUAL
4669: OR
4670: IFFALSE 4690
// begin ruMobile := ruMobile diff i ;
4672: LD_ADDR_EXP 15
4676: PUSH
4677: LD_EXP 15
4681: PUSH
4682: LD_VAR 0 1
4686: DIFF
4687: ST_TO_ADDR
// continue ;
4688: GO 4642
// end ; if GetTag ( i ) = 300 then
4690: LD_VAR 0 1
4694: PPUSH
4695: CALL_OW 110
4699: PUSH
4700: LD_INT 300
4702: EQUAL
4703: IFFALSE 4833
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4705: LD_VAR 0 1
4709: PPUSH
4710: CALL_OW 261
4714: PUSH
4715: LD_INT 50
4717: LESS
4718: PUSH
4719: LD_VAR 0 1
4723: PPUSH
4724: CALL_OW 262
4728: PUSH
4729: LD_INT 1
4731: EQUAL
4732: AND
4733: IFFALSE 4792
// begin ComMoveXY ( i , 120 , 58 ) ;
4735: LD_VAR 0 1
4739: PPUSH
4740: LD_INT 120
4742: PPUSH
4743: LD_INT 58
4745: PPUSH
4746: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4750: LD_INT 35
4752: PPUSH
4753: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4757: LD_VAR 0 1
4761: PPUSH
4762: LD_INT 120
4764: PPUSH
4765: LD_INT 58
4767: PPUSH
4768: CALL_OW 297
4772: PUSH
4773: LD_INT 4
4775: LESS
4776: IFFALSE 4750
// SetFuel ( i , 100 ) ;
4778: LD_VAR 0 1
4782: PPUSH
4783: LD_INT 100
4785: PPUSH
4786: CALL_OW 240
// end else
4790: GO 4833
// if not IsInArea ( i , ruParkingArea ) then
4792: LD_VAR 0 1
4796: PPUSH
4797: LD_INT 10
4799: PPUSH
4800: CALL_OW 308
4804: NOT
4805: IFFALSE 4821
// ComMoveToArea ( i , ruParkingArea ) else
4807: LD_VAR 0 1
4811: PPUSH
4812: LD_INT 10
4814: PPUSH
4815: CALL_OW 113
4819: GO 4833
// SetTag ( i , 301 ) ;
4821: LD_VAR 0 1
4825: PPUSH
4826: LD_INT 301
4828: PPUSH
4829: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4833: LD_VAR 0 1
4837: PPUSH
4838: CALL_OW 110
4842: PUSH
4843: LD_INT 301
4845: EQUAL
4846: IFFALSE 4976
// begin if GetLives ( i ) < 1000 then
4848: LD_VAR 0 1
4852: PPUSH
4853: CALL_OW 256
4857: PUSH
4858: LD_INT 1000
4860: LESS
4861: IFFALSE 4953
// begin if not IsDrivenBy ( i ) then
4863: LD_VAR 0 1
4867: PPUSH
4868: CALL_OW 311
4872: NOT
4873: IFFALSE 4877
// continue ;
4875: GO 4642
// mech := IsDrivenBy ( i ) ;
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: LD_VAR 0 1
4886: PPUSH
4887: CALL_OW 311
4891: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
4892: LD_VAR 0 2
4896: PPUSH
4897: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
4901: LD_VAR 0 2
4905: PPUSH
4906: LD_VAR 0 1
4910: PPUSH
4911: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4915: LD_INT 35
4917: PPUSH
4918: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4922: LD_VAR 0 1
4926: PPUSH
4927: CALL_OW 256
4931: PUSH
4932: LD_INT 1000
4934: EQUAL
4935: IFFALSE 4915
// ComEnterUnit ( mech , i ) ;
4937: LD_VAR 0 2
4941: PPUSH
4942: LD_VAR 0 1
4946: PPUSH
4947: CALL_OW 120
// end else
4951: GO 4976
// if IsDrivenBy ( i ) then
4953: LD_VAR 0 1
4957: PPUSH
4958: CALL_OW 311
4962: IFFALSE 4976
// SetTag ( i , 0 ) ;
4964: LD_VAR 0 1
4968: PPUSH
4969: LD_INT 0
4971: PPUSH
4972: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
4976: LD_VAR 0 1
4980: PPUSH
4981: CALL_OW 110
4985: PUSH
4986: LD_INT 300
4988: LESS
4989: IFFALSE 5198
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
4991: LD_ADDR_VAR 0 3
4995: PUSH
4996: LD_INT 11
4998: PPUSH
4999: LD_INT 81
5001: PUSH
5002: LD_INT 3
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: PPUSH
5009: CALL_OW 70
5013: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5014: LD_VAR 0 1
5018: PPUSH
5019: CALL_OW 256
5023: PUSH
5024: LD_INT 650
5026: LESS
5027: IFFALSE 5052
// begin ComStop ( i ) ;
5029: LD_VAR 0 1
5033: PPUSH
5034: CALL_OW 141
// SetTag ( i , 300 ) ;
5038: LD_VAR 0 1
5042: PPUSH
5043: LD_INT 300
5045: PPUSH
5046: CALL_OW 109
// continue ;
5050: GO 4642
// end ; if enemy then
5052: LD_VAR 0 3
5056: IFFALSE 5096
// begin if not HasTask ( i ) then
5058: LD_VAR 0 1
5062: PPUSH
5063: CALL_OW 314
5067: NOT
5068: IFFALSE 5094
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5070: LD_VAR 0 1
5074: PPUSH
5075: LD_VAR 0 3
5079: PPUSH
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 74
5089: PPUSH
5090: CALL_OW 115
// end else
5094: GO 5198
// if ruMobile > 2 then
5096: LD_EXP 15
5100: PUSH
5101: LD_INT 2
5103: GREATER
5104: IFFALSE 5198
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5106: LD_ADDR_VAR 0 3
5110: PUSH
5111: LD_INT 81
5113: PUSH
5114: LD_INT 3
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: PPUSH
5121: CALL_OW 69
5125: ST_TO_ADDR
// if enemy then
5126: LD_VAR 0 3
5130: IFFALSE 5198
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5132: LD_VAR 0 1
5136: PPUSH
5137: LD_INT 113
5139: PUSH
5140: LD_INT 80
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: LD_INT 118
5149: PUSH
5150: LD_INT 100
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PUSH
5157: LD_INT 107
5159: PUSH
5160: LD_INT 102
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 114
5169: PUSH
5170: LD_INT 120
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 86
5179: PUSH
5180: LD_INT 116
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: PPUSH
5194: CALL 70962 0 2
// end ; end ; end ;
5198: GO 4642
5200: POP
5201: POP
// end ;
5202: PPOPN 3
5204: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5205: LD_EXP 17
5209: IFFALSE 5255
5211: GO 5213
5213: DISABLE
5214: LD_INT 0
5216: PPUSH
// begin enable ;
5217: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5218: LD_ADDR_VAR 0 1
5222: PUSH
5223: LD_EXP 17
5227: PPUSH
5228: LD_INT 50
5230: PUSH
5231: EMPTY
5232: LIST
5233: PPUSH
5234: CALL_OW 72
5238: ST_TO_ADDR
// ruAttackers := [ ] ;
5239: LD_ADDR_EXP 17
5243: PUSH
5244: EMPTY
5245: ST_TO_ADDR
// SendAttack ( tmp ) ;
5246: LD_VAR 0 1
5250: PPUSH
5251: CALL 5258 0 1
// end ;
5255: PPOPN 1
5257: END
// function SendAttack ( group ) ; var i , tmp ; begin
5258: LD_INT 0
5260: PPUSH
5261: PPUSH
5262: PPUSH
// for i in group do
5263: LD_ADDR_VAR 0 3
5267: PUSH
5268: LD_VAR 0 1
5272: PUSH
5273: FOR_IN
5274: IFFALSE 5340
// begin SetTag ( i , 0 ) ;
5276: LD_VAR 0 3
5280: PPUSH
5281: LD_INT 0
5283: PPUSH
5284: CALL_OW 109
// if Prob ( 30 ) then
5288: LD_INT 30
5290: PPUSH
5291: CALL_OW 13
5295: IFFALSE 5323
// begin SetTag ( i , 1 ) ;
5297: LD_VAR 0 3
5301: PPUSH
5302: LD_INT 1
5304: PPUSH
5305: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5309: LD_VAR 0 3
5313: PPUSH
5314: LD_INT 116
5316: PPUSH
5317: CALL_OW 120
// end else
5321: GO 5338
// ComAgressiveMove ( i , 118 , 93 ) ;
5323: LD_VAR 0 3
5327: PPUSH
5328: LD_INT 118
5330: PPUSH
5331: LD_INT 93
5333: PPUSH
5334: CALL_OW 114
// end ;
5338: GO 5273
5340: POP
5341: POP
// repeat wait ( 0 0$1 ) ;
5342: LD_INT 35
5344: PPUSH
5345: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5349: LD_ADDR_VAR 0 4
5353: PUSH
5354: LD_VAR 0 1
5358: PPUSH
5359: LD_INT 120
5361: PUSH
5362: LD_INT 0
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PPUSH
5369: CALL_OW 72
5373: ST_TO_ADDR
// for i in tmp do
5374: LD_ADDR_VAR 0 3
5378: PUSH
5379: LD_VAR 0 4
5383: PUSH
5384: FOR_IN
5385: IFFALSE 5532
// begin if not IsOk ( i ) then
5387: LD_VAR 0 3
5391: PPUSH
5392: CALL_OW 302
5396: NOT
5397: IFFALSE 5417
// begin tmp := tmp diff i ;
5399: LD_ADDR_VAR 0 4
5403: PUSH
5404: LD_VAR 0 4
5408: PUSH
5409: LD_VAR 0 3
5413: DIFF
5414: ST_TO_ADDR
// continue ;
5415: GO 5384
// end ; if GetDistUnits ( i , usDep ) < 8 then
5417: LD_VAR 0 3
5421: PPUSH
5422: LD_INT 48
5424: PPUSH
5425: CALL_OW 296
5429: PUSH
5430: LD_INT 8
5432: LESS
5433: IFFALSE 5449
// begin ComAttackUnit ( i , usDep ) ;
5435: LD_VAR 0 3
5439: PPUSH
5440: LD_INT 48
5442: PPUSH
5443: CALL_OW 115
// continue ;
5447: GO 5384
// end ; if not See ( 1 , i ) then
5449: LD_INT 1
5451: PPUSH
5452: LD_VAR 0 3
5456: PPUSH
5457: CALL_OW 292
5461: NOT
5462: IFFALSE 5481
// ComAgressiveMove ( i , 86 , 116 ) else
5464: LD_VAR 0 3
5468: PPUSH
5469: LD_INT 86
5471: PPUSH
5472: LD_INT 116
5474: PPUSH
5475: CALL_OW 114
5479: GO 5530
// if GetWeapon ( i ) <> ru_time_lapser then
5481: LD_VAR 0 3
5485: PPUSH
5486: CALL_OW 264
5490: PUSH
5491: LD_INT 49
5493: NONEQUAL
5494: IFFALSE 5530
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5496: LD_VAR 0 3
5500: PPUSH
5501: LD_INT 81
5503: PUSH
5504: LD_INT 3
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PPUSH
5511: CALL_OW 69
5515: PPUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: CALL_OW 74
5525: PPUSH
5526: CALL_OW 115
// end ;
5530: GO 5384
5532: POP
5533: POP
// until not tmp ;
5534: LD_VAR 0 4
5538: NOT
5539: IFFALSE 5342
// end ; end_of_file
5541: LD_VAR 0 2
5545: RET
// on UnitDestroyed ( unit ) do var i ;
5546: LD_INT 0
5548: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5549: LD_VAR 0 1
5553: PPUSH
5554: CALL 26644 0 1
// if unit = JMM then
5558: LD_VAR 0 1
5562: PUSH
5563: LD_EXP 8
5567: EQUAL
5568: IFFALSE 5577
// YouLost ( JMM ) ;
5570: LD_STRING JMM
5572: PPUSH
5573: CALL_OW 104
// if GetSide ( unit ) = 4 then
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 255
5586: PUSH
5587: LD_INT 4
5589: EQUAL
5590: IFFALSE 5649
// begin if unit = Joan then
5592: LD_VAR 0 1
5596: PUSH
5597: LD_EXP 9
5601: EQUAL
5602: IFFALSE 5611
// YouLost ( Joan ) ;
5604: LD_STRING Joan
5606: PPUSH
5607: CALL_OW 104
// if unit = Connie then
5611: LD_VAR 0 1
5615: PUSH
5616: LD_EXP 11
5620: EQUAL
5621: IFFALSE 5630
// YouLost ( Connie ) ;
5623: LD_STRING Connie
5625: PPUSH
5626: CALL_OW 104
// if unit = Lisa then
5630: LD_VAR 0 1
5634: PUSH
5635: LD_EXP 10
5639: EQUAL
5640: IFFALSE 5649
// YouLost ( Lisa ) ;
5642: LD_STRING Lisa
5644: PPUSH
5645: CALL_OW 104
// end ; if unit in ruAttackers then
5649: LD_VAR 0 1
5653: PUSH
5654: LD_EXP 17
5658: IN
5659: IFFALSE 5677
// ruAttackers := ruAttackers diff unit ;
5661: LD_ADDR_EXP 17
5665: PUSH
5666: LD_EXP 17
5670: PUSH
5671: LD_VAR 0 1
5675: DIFF
5676: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5677: LD_VAR 0 1
5681: PPUSH
5682: CALL_OW 264
5686: PUSH
5687: LD_INT 51
5689: EQUAL
5690: PUSH
5691: LD_INT 40
5693: PPUSH
5694: CALL_OW 302
5698: AND
5699: IFFALSE 5739
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5701: LD_INT 40
5703: PPUSH
5704: LD_INT 21
5706: PPUSH
5707: LD_INT 1
5709: PUSH
5710: LD_INT 3
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: LD_INT 1
5719: PPUSH
5720: LD_INT 2
5722: PPUSH
5723: CALL_OW 12
5727: ARRAY
5728: PPUSH
5729: LD_INT 3
5731: PPUSH
5732: LD_INT 51
5734: PPUSH
5735: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 264
5748: PUSH
5749: LD_INT 52
5751: EQUAL
5752: PUSH
5753: LD_INT 40
5755: PPUSH
5756: CALL_OW 302
5760: AND
5761: IFFALSE 5801
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5763: LD_INT 40
5765: PPUSH
5766: LD_INT 21
5768: PPUSH
5769: LD_INT 1
5771: PUSH
5772: LD_INT 3
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 1
5781: PPUSH
5782: LD_INT 2
5784: PPUSH
5785: CALL_OW 12
5789: ARRAY
5790: PPUSH
5791: LD_INT 3
5793: PPUSH
5794: LD_INT 52
5796: PPUSH
5797: CALL_OW 185
// if unit in ruMobile then
5801: LD_VAR 0 1
5805: PUSH
5806: LD_EXP 15
5810: IN
5811: IFFALSE 5829
// ruMobile := ruMobile diff i ;
5813: LD_ADDR_EXP 15
5817: PUSH
5818: LD_EXP 15
5822: PUSH
5823: LD_VAR 0 2
5827: DIFF
5828: ST_TO_ADDR
// end ;
5829: PPOPN 2
5831: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
5832: LD_VAR 0 2
5836: PPUSH
5837: CALL_OW 255
5841: PUSH
5842: LD_INT 3
5844: EQUAL
5845: IFFALSE 5859
// SetTag ( unit , 0 ) ;
5847: LD_VAR 0 2
5851: PPUSH
5852: LD_INT 0
5854: PPUSH
5855: CALL_OW 109
// end ;
5859: PPOPN 2
5861: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
5862: LD_VAR 0 2
5866: PPUSH
5867: CALL_OW 255
5871: PUSH
5872: LD_INT 3
5874: EQUAL
5875: PUSH
5876: LD_VAR 0 1
5880: PUSH
5881: LD_EXP 18
5885: IN
5886: AND
5887: IFFALSE 5905
// ruTechList := ruTechList diff tech ;
5889: LD_ADDR_EXP 18
5893: PUSH
5894: LD_EXP 18
5898: PUSH
5899: LD_VAR 0 1
5903: DIFF
5904: ST_TO_ADDR
// end ;
5905: PPOPN 2
5907: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
5908: LD_INT 0
5910: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
5911: LD_VAR 0 1
5915: PPUSH
5916: LD_VAR 0 2
5920: PPUSH
5921: CALL 26766 0 2
// if GetSide ( vehicle ) <> 3 then
5925: LD_VAR 0 1
5929: PPUSH
5930: CALL_OW 255
5934: PUSH
5935: LD_INT 3
5937: NONEQUAL
5938: IFFALSE 6009
// begin if GetWeapon ( vehicle ) = us_double_laser then
5940: LD_VAR 0 1
5944: PPUSH
5945: CALL_OW 264
5949: PUSH
5950: LD_INT 10
5952: EQUAL
5953: IFFALSE 6007
// begin amLaserCounter := Inc ( amLaserCounter ) ;
5955: LD_ADDR_EXP 7
5959: PUSH
5960: LD_EXP 7
5964: PPUSH
5965: CALL 69719 0 1
5969: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
5970: LD_ADDR_VAR 0 3
5974: PUSH
5975: LD_VAR 0 2
5979: PPUSH
5980: CALL_OW 313
5984: PUSH
5985: FOR_IN
5986: IFFALSE 6005
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
5988: LD_VAR 0 3
5992: PPUSH
5993: LD_INT 3
5995: PPUSH
5996: LD_INT 1000
5998: PPUSH
5999: CALL_OW 591
6003: GO 5985
6005: POP
6006: POP
// end ; exit ;
6007: GO 6103
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6009: LD_VAR 0 1
6013: PPUSH
6014: CALL_OW 264
6018: PUSH
6019: LD_INT 51
6021: PUSH
6022: LD_INT 52
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: IN
6029: IFFALSE 6033
// exit ;
6031: GO 6103
// if GetControl ( vehicle ) = control_computer then
6033: LD_VAR 0 1
6037: PPUSH
6038: CALL_OW 263
6042: PUSH
6043: LD_INT 3
6045: EQUAL
6046: IFFALSE 6068
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6048: LD_ADDR_EXP 17
6052: PUSH
6053: LD_EXP 17
6057: PPUSH
6058: LD_VAR 0 1
6062: PPUSH
6063: CALL 68356 0 2
6067: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6068: LD_VAR 0 1
6072: PPUSH
6073: CALL_OW 263
6077: PUSH
6078: LD_INT 1
6080: EQUAL
6081: IFFALSE 6103
// ruMobile := Join ( ruMobile , vehicle ) ;
6083: LD_ADDR_EXP 15
6087: PUSH
6088: LD_EXP 15
6092: PPUSH
6093: LD_VAR 0 1
6097: PPUSH
6098: CALL 68356 0 2
6102: ST_TO_ADDR
// end ;
6103: PPOPN 3
6105: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) then
6106: LD_VAR 0 1
6110: PPUSH
6111: CALL_OW 255
6115: PUSH
6116: LD_INT 3
6118: EQUAL
6119: PUSH
6120: LD_VAR 0 1
6124: PPUSH
6125: CALL_OW 257
6129: PUSH
6130: LD_INT 3
6132: EQUAL
6133: AND
6134: PUSH
6135: LD_INT 1
6137: PPUSH
6138: CALL_OW 255
6142: PUSH
6143: LD_INT 3
6145: EQUAL
6146: AND
6147: PUSH
6148: LD_INT 1
6150: PPUSH
6151: CALL_OW 302
6155: AND
6156: IFFALSE 6170
// ComEnterUnit ( human , ruFac1 ) ;
6158: LD_VAR 0 1
6162: PPUSH
6163: LD_INT 1
6165: PPUSH
6166: CALL_OW 120
// end ;
6170: PPOPN 4
6172: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6173: LD_VAR 0 1
6177: PPUSH
6178: CALL 26750 0 1
// end ; end_of_file
6182: PPOPN 1
6184: END
// export function Action ; var dec1 , dec2 , veh ; begin
6185: LD_INT 0
6187: PPUSH
6188: PPUSH
6189: PPUSH
6190: PPUSH
// veh := IsInUnit ( JMM ) ;
6191: LD_ADDR_VAR 0 4
6195: PUSH
6196: LD_EXP 8
6200: PPUSH
6201: CALL_OW 310
6205: ST_TO_ADDR
// InGameOn ;
6206: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6210: LD_VAR 0 4
6214: PPUSH
6215: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6219: LD_VAR 0 4
6223: PPUSH
6224: LD_INT 30
6226: PPUSH
6227: LD_INT 11
6229: PPUSH
6230: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6234: LD_VAR 0 4
6238: PPUSH
6239: LD_INT 69
6241: PPUSH
6242: LD_INT 34
6244: PPUSH
6245: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6249: LD_INT 30
6251: PPUSH
6252: LD_INT 11
6254: PPUSH
6255: CALL_OW 84
// wait ( 0 0$3 ) ;
6259: LD_INT 105
6261: PPUSH
6262: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6266: LD_EXP 12
6270: PPUSH
6271: LD_STRING D1-Pow-1
6273: PPUSH
6274: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6278: LD_EXP 8
6282: PPUSH
6283: CALL_OW 121
// AddComHold ( JMM ) ;
6287: LD_EXP 8
6291: PPUSH
6292: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6296: LD_EXP 8
6300: PPUSH
6301: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6305: LD_EXP 8
6309: PPUSH
6310: LD_STRING D1-JMM-1
6312: PPUSH
6313: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6317: LD_EXP 12
6321: PPUSH
6322: LD_STRING D1-Pow-2
6324: PPUSH
6325: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6329: LD_EXP 8
6333: PPUSH
6334: LD_STRING D1-JMM-2
6336: PPUSH
6337: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6341: LD_EXP 8
6345: PPUSH
6346: LD_VAR 0 4
6350: PPUSH
6351: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6355: LD_STRING M1
6357: PPUSH
6358: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6362: LD_INT 16
6364: PPUSH
6365: LD_INT 1
6367: PPUSH
6368: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6372: LD_INT 35
6374: PPUSH
6375: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6379: LD_EXP 8
6383: PPUSH
6384: LD_VAR 0 4
6388: PPUSH
6389: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6393: LD_VAR 0 4
6397: PPUSH
6398: LD_INT 51
6400: PPUSH
6401: LD_INT 21
6403: PPUSH
6404: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6408: LD_VAR 0 4
6412: PPUSH
6413: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6417: LD_VAR 0 4
6421: PPUSH
6422: LD_INT 51
6424: PPUSH
6425: LD_INT 21
6427: PPUSH
6428: CALL_OW 297
6432: PUSH
6433: LD_INT 6
6435: LESS
6436: IFFALSE 6372
// if JMMGirl = 1 then
6438: LD_EXP 2
6442: PUSH
6443: LD_INT 1
6445: EQUAL
6446: IFFALSE 6745
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6448: LD_EXP 9
6452: PPUSH
6453: LD_STRING D2J-Joan-1
6455: PPUSH
6456: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6460: LD_ADDR_VAR 0 2
6464: PUSH
6465: LD_STRING Q1
6467: PPUSH
6468: CALL_OW 97
6472: ST_TO_ADDR
// if dec1 = 1 then
6473: LD_VAR 0 2
6477: PUSH
6478: LD_INT 1
6480: EQUAL
6481: IFFALSE 6736
// begin ComExitVehicle ( JMM ) ;
6483: LD_EXP 8
6487: PPUSH
6488: CALL_OW 121
// AddComHold ( JMM ) ;
6492: LD_EXP 8
6496: PPUSH
6497: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6501: LD_EXP 8
6505: PPUSH
6506: LD_STRING D2J-JMM-1
6508: PPUSH
6509: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6513: LD_EXP 9
6517: PPUSH
6518: LD_STRING D2J-Joan-2
6520: PPUSH
6521: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6525: LD_EXP 8
6529: PPUSH
6530: LD_STRING D2J-JMM-2
6532: PPUSH
6533: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6537: LD_EXP 9
6541: PPUSH
6542: LD_STRING D2J-Joan-3
6544: PPUSH
6545: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6549: LD_EXP 12
6553: PPUSH
6554: LD_STRING DPowell-Pow-1
6556: PPUSH
6557: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6561: LD_ADDR_VAR 0 3
6565: PUSH
6566: LD_STRING Q2J
6568: PPUSH
6569: CALL_OW 97
6573: ST_TO_ADDR
// if dec2 = 1 then
6574: LD_VAR 0 3
6578: PUSH
6579: LD_INT 1
6581: EQUAL
6582: IFFALSE 6624
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6584: LD_EXP 8
6588: PPUSH
6589: LD_STRING D2Ja-JMM-1
6591: PPUSH
6592: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6596: LD_EXP 9
6600: PPUSH
6601: LD_STRING D2Ja-Joan-1
6603: PPUSH
6604: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
6608: LD_EXP 8
6612: PPUSH
6613: LD_STRING D2Ja-JMM-2
6615: PPUSH
6616: CALL_OW 88
// InGameOff ;
6620: CALL_OW 9
// end ; if dec2 = 2 then
6624: LD_VAR 0 3
6628: PUSH
6629: LD_INT 2
6631: EQUAL
6632: IFFALSE 6703
// begin Say ( JMM , D2Jb-JMM-1 ) ;
6634: LD_EXP 8
6638: PPUSH
6639: LD_STRING D2Jb-JMM-1
6641: PPUSH
6642: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
6646: LD_EXP 9
6650: PPUSH
6651: LD_STRING D2Jb-Joan-1
6653: PPUSH
6654: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
6658: LD_EXP 8
6662: PPUSH
6663: LD_STRING D2Jb-JMM-2
6665: PPUSH
6666: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
6670: LD_EXP 9
6674: PPUSH
6675: LD_STRING D2Jb-Joan-2
6677: PPUSH
6678: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
6682: LD_EXP 8
6686: PPUSH
6687: LD_STRING D2Jb-JMM-3
6689: PPUSH
6690: CALL_OW 88
// FinishMission ( true ) ;
6694: LD_INT 1
6696: PPUSH
6697: CALL 9366 0 1
// exit ;
6701: GO 7285
// end ; if dec2 = 3 then
6703: LD_VAR 0 3
6707: PUSH
6708: LD_INT 3
6710: EQUAL
6711: IFFALSE 6734
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
6713: LD_EXP 9
6717: PPUSH
6718: LD_STRING D2Jc-Joan-1
6720: PPUSH
6721: CALL_OW 94
// FinishMission ( true ) ;
6725: LD_INT 1
6727: PPUSH
6728: CALL 9366 0 1
// exit ;
6732: GO 7285
// end ; end else
6734: GO 6745
// begin FinishMission ( true ) ;
6736: LD_INT 1
6738: PPUSH
6739: CALL 9366 0 1
// exit ;
6743: GO 7285
// end ; end ; if JMMGirl = 2 then
6745: LD_EXP 2
6749: PUSH
6750: LD_INT 2
6752: EQUAL
6753: IFFALSE 7064
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
6755: LD_EXP 10
6759: PPUSH
6760: LD_STRING D2L-Lisa-1
6762: PPUSH
6763: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6767: LD_ADDR_VAR 0 2
6771: PUSH
6772: LD_STRING Q1
6774: PPUSH
6775: CALL_OW 97
6779: ST_TO_ADDR
// if dec1 = 1 then
6780: LD_VAR 0 2
6784: PUSH
6785: LD_INT 1
6787: EQUAL
6788: IFFALSE 7055
// begin ComExitVehicle ( JMM ) ;
6790: LD_EXP 8
6794: PPUSH
6795: CALL_OW 121
// AddComHold ( JMM ) ;
6799: LD_EXP 8
6803: PPUSH
6804: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
6808: LD_EXP 8
6812: PPUSH
6813: LD_STRING D2L-JMM-1
6815: PPUSH
6816: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
6820: LD_EXP 10
6824: PPUSH
6825: LD_STRING D2L-Lisa-2
6827: PPUSH
6828: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
6832: LD_EXP 8
6836: PPUSH
6837: LD_STRING D2L-JMM-2
6839: PPUSH
6840: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
6844: LD_EXP 10
6848: PPUSH
6849: LD_STRING DL-Lisa-3
6851: PPUSH
6852: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6856: LD_EXP 12
6860: PPUSH
6861: LD_STRING DPowell-Pow-1
6863: PPUSH
6864: CALL_OW 94
// dec2 := Query ( Q2L ) ;
6868: LD_ADDR_VAR 0 3
6872: PUSH
6873: LD_STRING Q2L
6875: PPUSH
6876: CALL_OW 97
6880: ST_TO_ADDR
// if dec2 = 1 then
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 1
6888: EQUAL
6889: IFFALSE 6955
// begin Say ( JMM , D2La-JMM-1 ) ;
6891: LD_EXP 8
6895: PPUSH
6896: LD_STRING D2La-JMM-1
6898: PPUSH
6899: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6903: LD_EXP 10
6907: PPUSH
6908: LD_STRING D2La-Lisa-1
6910: PPUSH
6911: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
6915: LD_EXP 8
6919: PPUSH
6920: LD_STRING D2La-JMM-2
6922: PPUSH
6923: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
6927: LD_EXP 10
6931: PPUSH
6932: LD_STRING D2La-Lisa-2
6934: PPUSH
6935: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
6939: LD_EXP 8
6943: PPUSH
6944: LD_STRING D2La-JMM-3
6946: PPUSH
6947: CALL_OW 88
// InGameOff ;
6951: CALL_OW 9
// end ; if dec2 = 2 then
6955: LD_VAR 0 3
6959: PUSH
6960: LD_INT 2
6962: EQUAL
6963: IFFALSE 7022
// begin Say ( JMM , D2Lb-JMM-1 ) ;
6965: LD_EXP 8
6969: PPUSH
6970: LD_STRING D2Lb-JMM-1
6972: PPUSH
6973: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
6977: LD_EXP 10
6981: PPUSH
6982: LD_STRING D2Lb-Lisa-1
6984: PPUSH
6985: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
6989: LD_EXP 8
6993: PPUSH
6994: LD_STRING D2Lb-JMM-2
6996: PPUSH
6997: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7001: LD_EXP 10
7005: PPUSH
7006: LD_STRING D2Lb-Lisa-2
7008: PPUSH
7009: CALL_OW 94
// FinishMission ( true ) ;
7013: LD_INT 1
7015: PPUSH
7016: CALL 9366 0 1
// exit ;
7020: GO 7285
// end ; if dec2 = 3 then
7022: LD_VAR 0 3
7026: PUSH
7027: LD_INT 3
7029: EQUAL
7030: IFFALSE 7053
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7032: LD_EXP 10
7036: PPUSH
7037: LD_STRING D2Lc-Lisa-1
7039: PPUSH
7040: CALL_OW 94
// FinishMission ( true ) ;
7044: LD_INT 1
7046: PPUSH
7047: CALL 9366 0 1
// exit ;
7051: GO 7285
// end ; end else
7053: GO 7064
// begin FinishMission ( true ) ;
7055: LD_INT 1
7057: PPUSH
7058: CALL 9366 0 1
// exit ;
7062: GO 7285
// end ; end ; if JMMGirl = 3 then
7064: LD_EXP 2
7068: PUSH
7069: LD_INT 3
7071: EQUAL
7072: IFFALSE 7285
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7074: LD_EXP 11
7078: PPUSH
7079: LD_STRING D2X-Con-1
7081: PPUSH
7082: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7086: LD_ADDR_VAR 0 2
7090: PUSH
7091: LD_STRING Q1
7093: PPUSH
7094: CALL_OW 97
7098: ST_TO_ADDR
// if dec1 = 1 then
7099: LD_VAR 0 2
7103: PUSH
7104: LD_INT 1
7106: EQUAL
7107: IFFALSE 7278
// begin ComExitVehicle ( JMM ) ;
7109: LD_EXP 8
7113: PPUSH
7114: CALL_OW 121
// AddComHold ( JMM ) ;
7118: LD_EXP 8
7122: PPUSH
7123: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7127: LD_EXP 8
7131: PPUSH
7132: LD_STRING D2X-JMM-1
7134: PPUSH
7135: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7139: LD_EXP 11
7143: PPUSH
7144: LD_STRING D2X-Con-2
7146: PPUSH
7147: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7151: LD_EXP 12
7155: PPUSH
7156: LD_STRING DPowell-Pow-1
7158: PPUSH
7159: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7163: LD_ADDR_VAR 0 3
7167: PUSH
7168: LD_STRING Q2X
7170: PPUSH
7171: CALL_OW 97
7175: ST_TO_ADDR
// if dec2 = 1 then
7176: LD_VAR 0 3
7180: PUSH
7181: LD_INT 1
7183: EQUAL
7184: IFFALSE 7202
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7186: LD_EXP 8
7190: PPUSH
7191: LD_STRING D2Xa-JMM-1
7193: PPUSH
7194: CALL_OW 88
// InGameOff ;
7198: CALL_OW 9
// end ; if dec2 = 2 then
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 2
7209: EQUAL
7210: IFFALSE 7245
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7212: LD_EXP 8
7216: PPUSH
7217: LD_STRING D2Xb-JMM-1
7219: PPUSH
7220: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7224: LD_EXP 11
7228: PPUSH
7229: LD_STRING D2Xb-Con-1
7231: PPUSH
7232: CALL_OW 94
// FinishMission ( true ) ;
7236: LD_INT 1
7238: PPUSH
7239: CALL 9366 0 1
// exit ;
7243: GO 7285
// end ; if dec2 = 3 then
7245: LD_VAR 0 3
7249: PUSH
7250: LD_INT 3
7252: EQUAL
7253: IFFALSE 7276
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7255: LD_EXP 11
7259: PPUSH
7260: LD_STRING D2Xc-Con-1
7262: PPUSH
7263: CALL_OW 94
// FinishMission ( true ) ;
7267: LD_INT 1
7269: PPUSH
7270: CALL 9366 0 1
// exit ;
7274: GO 7285
// end ; end else
7276: GO 7285
// begin FinishMission ( true ) ;
7278: LD_INT 1
7280: PPUSH
7281: CALL 9366 0 1
// end ; end ; end ;
7285: LD_VAR 0 1
7289: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7290: LD_EXP 8
7294: PPUSH
7295: LD_INT 15
7297: PPUSH
7298: CALL_OW 308
7302: IFFALSE 8340
7304: GO 7306
7306: DISABLE
7307: LD_INT 0
7309: PPUSH
// begin if tick < 5 5$00 then
7310: LD_OWVAR 1
7314: PUSH
7315: LD_INT 10500
7317: LESS
7318: IFFALSE 7570
// begin uc_side := 6 ;
7320: LD_ADDR_OWVAR 20
7324: PUSH
7325: LD_INT 6
7327: ST_TO_ADDR
// uc_nation := 3 ;
7328: LD_ADDR_OWVAR 21
7332: PUSH
7333: LD_INT 3
7335: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7336: LD_INT 1
7338: PPUSH
7339: LD_INT 105
7341: PPUSH
7342: LD_INT 97
7344: PPUSH
7345: CALL_OW 293
7349: NOT
7350: IFFALSE 7414
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7352: LD_INT 22
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: LD_INT 3
7360: PPUSH
7361: LD_INT 44
7363: PPUSH
7364: LD_INT 40
7366: PPUSH
7367: CALL 35972 0 5
// veh := CreateVehicle ;
7371: LD_ADDR_VAR 0 1
7375: PUSH
7376: CALL_OW 45
7380: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7381: LD_VAR 0 1
7385: PPUSH
7386: LD_INT 200
7388: PPUSH
7389: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7393: LD_VAR 0 1
7397: PPUSH
7398: LD_INT 105
7400: PPUSH
7401: LD_INT 97
7403: PPUSH
7404: LD_INT 3
7406: PPUSH
7407: LD_INT 0
7409: PPUSH
7410: CALL 70498 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7414: LD_INT 1
7416: PPUSH
7417: LD_INT 116
7419: PPUSH
7420: LD_INT 120
7422: PPUSH
7423: CALL_OW 293
7427: NOT
7428: IFFALSE 7492
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7430: LD_INT 22
7432: PPUSH
7433: LD_INT 1
7435: PPUSH
7436: LD_INT 3
7438: PPUSH
7439: LD_INT 45
7441: PPUSH
7442: LD_INT 40
7444: PPUSH
7445: CALL 35972 0 5
// veh := CreateVehicle ;
7449: LD_ADDR_VAR 0 1
7453: PUSH
7454: CALL_OW 45
7458: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7459: LD_VAR 0 1
7463: PPUSH
7464: LD_INT 200
7466: PPUSH
7467: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7471: LD_VAR 0 1
7475: PPUSH
7476: LD_INT 116
7478: PPUSH
7479: LD_INT 120
7481: PPUSH
7482: LD_INT 4
7484: PPUSH
7485: LD_INT 0
7487: PPUSH
7488: CALL 70498 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7492: LD_INT 1
7494: PPUSH
7495: LD_INT 116
7497: PPUSH
7498: LD_INT 120
7500: PPUSH
7501: CALL_OW 293
7505: NOT
7506: IFFALSE 7570
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7508: LD_INT 24
7510: PPUSH
7511: LD_INT 1
7513: PPUSH
7514: LD_INT 3
7516: PPUSH
7517: LD_INT 45
7519: PPUSH
7520: LD_INT 30
7522: PPUSH
7523: CALL 35972 0 5
// veh := CreateVehicle ;
7527: LD_ADDR_VAR 0 1
7531: PUSH
7532: CALL_OW 45
7536: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7537: LD_VAR 0 1
7541: PPUSH
7542: LD_INT 200
7544: PPUSH
7545: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7549: LD_VAR 0 1
7553: PPUSH
7554: LD_INT 116
7556: PPUSH
7557: LD_INT 120
7559: PPUSH
7560: LD_INT 4
7562: PPUSH
7563: LD_INT 0
7565: PPUSH
7566: CALL 70498 0 5
// end ; end ; InGameOn ;
7570: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7574: LD_INT 35
7576: PPUSH
7577: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7581: LD_EXP 8
7585: PPUSH
7586: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7590: LD_EXP 8
7594: PPUSH
7595: LD_INT 81
7597: PPUSH
7598: LD_INT 109
7600: PPUSH
7601: CALL_OW 111
// AddComHold ( JMM ) ;
7605: LD_EXP 8
7609: PPUSH
7610: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
7614: LD_EXP 9
7618: PUSH
7619: LD_EXP 10
7623: PUSH
7624: LD_EXP 11
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: LIST
7633: PPUSH
7634: LD_EXP 8
7638: PPUSH
7639: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
7643: LD_EXP 9
7647: PUSH
7648: LD_EXP 10
7652: PUSH
7653: LD_EXP 11
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: LIST
7662: PPUSH
7663: LD_INT 91
7665: PUSH
7666: LD_EXP 8
7670: PUSH
7671: LD_INT 6
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: LIST
7678: PPUSH
7679: CALL_OW 72
7683: IFFALSE 7574
// case JMMGirl of 1 :
7685: LD_EXP 2
7689: PUSH
7690: LD_INT 1
7692: DOUBLE
7693: EQUAL
7694: IFTRUE 7698
7696: GO 7880
7698: POP
// begin ChangeSideKappaBase ;
7699: CALL 1422 0 0
// ComTurnUnit ( Joan , JMM ) ;
7703: LD_EXP 9
7707: PPUSH
7708: LD_EXP 8
7712: PPUSH
7713: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
7717: LD_EXP 8
7721: PPUSH
7722: LD_EXP 9
7726: PPUSH
7727: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7731: LD_EXP 9
7735: PUSH
7736: LD_EXP 8
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PPUSH
7745: CALL_OW 87
// wait ( 0 0$1 ) ;
7749: LD_INT 35
7751: PPUSH
7752: CALL_OW 67
// DialogueOn ;
7756: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
7760: LD_EXP 9
7764: PPUSH
7765: LD_STRING D3J-Joan-1
7767: PPUSH
7768: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7772: LD_EXP 8
7776: PPUSH
7777: LD_STRING D3J-JMM-1
7779: PPUSH
7780: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
7784: LD_EXP 9
7788: PPUSH
7789: LD_STRING D3J-Joan-2
7791: PPUSH
7792: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
7796: LD_EXP 8
7800: PPUSH
7801: LD_STRING D3J-JMM-2
7803: PPUSH
7804: CALL_OW 88
// wait ( 0 0$1 ) ;
7808: LD_INT 35
7810: PPUSH
7811: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7815: LD_EXP 8
7819: PPUSH
7820: LD_STRING D4-JMM-1
7822: PPUSH
7823: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
7827: LD_EXP 9
7831: PPUSH
7832: LD_STRING D4-Joan-1
7834: PPUSH
7835: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7839: LD_EXP 8
7843: PPUSH
7844: LD_STRING D4-JMM-2
7846: PPUSH
7847: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
7851: LD_EXP 9
7855: PPUSH
7856: LD_STRING D4-Joan-2
7858: PPUSH
7859: CALL_OW 88
// DialogueOff ;
7863: CALL_OW 7
// InGameOff ;
7867: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
7871: LD_STRING M2J
7873: PPUSH
7874: CALL_OW 337
// end ; 2 :
7878: GO 8237
7880: LD_INT 2
7882: DOUBLE
7883: EQUAL
7884: IFTRUE 7888
7886: GO 8070
7888: POP
// begin ChangeSideKappaBase ;
7889: CALL 1422 0 0
// ComTurnUnit ( Lisa , JMM ) ;
7893: LD_EXP 10
7897: PPUSH
7898: LD_EXP 8
7902: PPUSH
7903: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
7907: LD_EXP 8
7911: PPUSH
7912: LD_EXP 10
7916: PPUSH
7917: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
7921: LD_EXP 10
7925: PUSH
7926: LD_EXP 8
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PPUSH
7935: CALL_OW 87
// wait ( 0 0$1 ) ;
7939: LD_INT 35
7941: PPUSH
7942: CALL_OW 67
// DialogueOn ;
7946: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
7950: LD_EXP 10
7954: PPUSH
7955: LD_STRING D3L-Lisa-1
7957: PPUSH
7958: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
7962: LD_EXP 8
7966: PPUSH
7967: LD_STRING D3L-JMM-1
7969: PPUSH
7970: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
7974: LD_EXP 10
7978: PPUSH
7979: LD_STRING D3L-Lisa-2
7981: PPUSH
7982: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
7986: LD_EXP 8
7990: PPUSH
7991: LD_STRING D3L-JMM-2
7993: PPUSH
7994: CALL_OW 88
// wait ( 0 0$1 ) ;
7998: LD_INT 35
8000: PPUSH
8001: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8005: LD_EXP 8
8009: PPUSH
8010: LD_STRING D4-JMM-1
8012: PPUSH
8013: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8017: LD_EXP 10
8021: PPUSH
8022: LD_STRING D4-Lisa-1
8024: PPUSH
8025: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8029: LD_EXP 8
8033: PPUSH
8034: LD_STRING D4-JMM-1
8036: PPUSH
8037: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8041: LD_EXP 10
8045: PPUSH
8046: LD_STRING D4-Lisa-2
8048: PPUSH
8049: CALL_OW 88
// DialogueOff ;
8053: CALL_OW 7
// InGameOff ;
8057: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8061: LD_STRING M2L
8063: PPUSH
8064: CALL_OW 337
// end ; 3 :
8068: GO 8237
8070: LD_INT 3
8072: DOUBLE
8073: EQUAL
8074: IFTRUE 8078
8076: GO 8236
8078: POP
// begin ChangeSideKappaBase ;
8079: CALL 1422 0 0
// ComTurnUnit ( Connie , JMM ) ;
8083: LD_EXP 11
8087: PPUSH
8088: LD_EXP 8
8092: PPUSH
8093: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8097: LD_EXP 8
8101: PPUSH
8102: LD_EXP 11
8106: PPUSH
8107: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8111: LD_EXP 9
8115: PUSH
8116: LD_EXP 8
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: PPUSH
8125: CALL_OW 87
// wait ( 0 0$1 ) ;
8129: LD_INT 35
8131: PPUSH
8132: CALL_OW 67
// DialogueOn ;
8136: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8140: LD_EXP 11
8144: PPUSH
8145: LD_STRING D3X-Con-1
8147: PPUSH
8148: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8152: LD_EXP 8
8156: PPUSH
8157: LD_STRING D3J-JMM-1
8159: PPUSH
8160: CALL_OW 88
// wait ( 0 0$1 ) ;
8164: LD_INT 35
8166: PPUSH
8167: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8171: LD_EXP 8
8175: PPUSH
8176: LD_STRING D4-JMM-1
8178: PPUSH
8179: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8183: LD_EXP 11
8187: PPUSH
8188: LD_STRING D4-Con-1
8190: PPUSH
8191: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8195: LD_EXP 8
8199: PPUSH
8200: LD_STRING D4-JMM-2
8202: PPUSH
8203: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8207: LD_EXP 11
8211: PPUSH
8212: LD_STRING D4-Con-2
8214: PPUSH
8215: CALL_OW 88
// DialogueOff ;
8219: CALL_OW 7
// InGameOff ;
8223: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8227: LD_STRING M2X
8229: PPUSH
8230: CALL_OW 337
// end ; end ;
8234: GO 8237
8236: POP
// SaveForQuickRestart ;
8237: CALL_OW 22
// wait ( 12 12$00 ) ;
8241: LD_INT 25200
8243: PPUSH
8244: CALL_OW 67
// DialogueOn ;
8248: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
8252: LD_EXP 12
8256: PPUSH
8257: LD_STRING D7-Pow-1
8259: PPUSH
8260: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8264: LD_EXP 8
8268: PPUSH
8269: LD_STRING D7-JMM-1
8271: PPUSH
8272: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8276: LD_EXP 12
8280: PPUSH
8281: LD_STRING D7-Pow-2
8283: PPUSH
8284: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8288: LD_EXP 8
8292: PPUSH
8293: LD_STRING D7-JMM-2
8295: PPUSH
8296: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8300: LD_EXP 12
8304: PPUSH
8305: LD_STRING D7-Pow-3
8307: PPUSH
8308: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8312: LD_EXP 8
8316: PPUSH
8317: LD_STRING D7-JMM-3
8319: PPUSH
8320: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8324: LD_EXP 12
8328: PPUSH
8329: LD_STRING D7-Pow-4
8331: PPUSH
8332: CALL_OW 94
// DialogueOff ;
8336: CALL_OW 7
// end ;
8340: PPOPN 1
8342: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8343: LD_INT 32
8345: PPUSH
8346: CALL_OW 306
8350: IFFALSE 8675
8352: GO 8354
8354: DISABLE
// begin case JMMGirl of 1 :
8355: LD_EXP 2
8359: PUSH
8360: LD_INT 1
8362: DOUBLE
8363: EQUAL
8364: IFTRUE 8368
8366: GO 8482
8368: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8369: LD_EXP 8
8373: PPUSH
8374: LD_STRING D6J-JMM-1
8376: PPUSH
8377: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8381: LD_STRING 13f_Denis
8383: PPUSH
8384: CALL_OW 28
8388: PUSH
8389: LD_STRING 13s_Denis
8391: PPUSH
8392: CALL_OW 28
8396: OR
8397: IFFALSE 8437
// begin Say ( Joan , D6J-Joan-1 ) ;
8399: LD_EXP 9
8403: PPUSH
8404: LD_STRING D6J-Joan-1
8406: PPUSH
8407: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
8411: LD_EXP 8
8415: PPUSH
8416: LD_STRING D6J-JMM-2
8418: PPUSH
8419: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
8423: LD_EXP 9
8427: PPUSH
8428: LD_STRING D6J-Joan-2
8430: PPUSH
8431: CALL_OW 88
// end else
8435: GO 8449
// Say ( Joan , D6J-Joan-2a ) ;
8437: LD_EXP 9
8441: PPUSH
8442: LD_STRING D6J-Joan-2a
8444: PPUSH
8445: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
8449: LD_EXP 8
8453: PPUSH
8454: LD_STRING D6J-JMM-3
8456: PPUSH
8457: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
8461: LD_EXP 9
8465: PPUSH
8466: LD_STRING D6J-Joan-3
8468: PPUSH
8469: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8473: LD_STRING M3
8475: PPUSH
8476: CALL_OW 337
// end ; 2 :
8480: GO 8675
8482: LD_INT 2
8484: DOUBLE
8485: EQUAL
8486: IFTRUE 8490
8488: GO 8548
8490: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
8491: LD_EXP 8
8495: PPUSH
8496: LD_STRING D6L-JMM-1
8498: PPUSH
8499: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
8503: LD_EXP 10
8507: PPUSH
8508: LD_STRING D6L-Lisa-1
8510: PPUSH
8511: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
8515: LD_EXP 8
8519: PPUSH
8520: LD_STRING D6L-JMM-2
8522: PPUSH
8523: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
8527: LD_EXP 10
8531: PPUSH
8532: LD_STRING D6L-Lisa-2
8534: PPUSH
8535: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8539: LD_STRING M3
8541: PPUSH
8542: CALL_OW 337
// end ; 3 :
8546: GO 8675
8548: LD_INT 3
8550: DOUBLE
8551: EQUAL
8552: IFTRUE 8556
8554: GO 8674
8556: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
8557: LD_EXP 8
8561: PPUSH
8562: LD_STRING D6X-JMM-1
8564: PPUSH
8565: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
8569: LD_EXP 11
8573: PPUSH
8574: LD_STRING D6X-Con-1
8576: PPUSH
8577: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
8581: LD_EXP 8
8585: PPUSH
8586: LD_STRING D6X-JMM-2
8588: PPUSH
8589: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
8593: LD_EXP 11
8597: PPUSH
8598: LD_STRING D6X-Con-2
8600: PPUSH
8601: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
8605: LD_EXP 8
8609: PPUSH
8610: LD_STRING D6X-JMM-3
8612: PPUSH
8613: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
8617: LD_EXP 11
8621: PPUSH
8622: LD_STRING D6X-Con-3
8624: PPUSH
8625: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
8629: LD_EXP 8
8633: PPUSH
8634: LD_STRING D6X-JMM-4
8636: PPUSH
8637: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
8641: LD_EXP 11
8645: PPUSH
8646: LD_STRING D6X-Con-4
8648: PPUSH
8649: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
8653: LD_EXP 8
8657: PPUSH
8658: LD_STRING D6X-JMM-5
8660: PPUSH
8661: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8665: LD_STRING M3
8667: PPUSH
8668: CALL_OW 337
// end ; end ;
8672: GO 8675
8674: POP
// end ;
8675: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
8676: LD_INT 22
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 33
8688: PUSH
8689: LD_INT 2
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PPUSH
8700: CALL_OW 69
8704: PPUSH
8705: CALL_OW 306
8709: IFFALSE 8855
8711: GO 8713
8713: DISABLE
// begin case JMMGirl of 1 :
8714: LD_EXP 2
8718: PUSH
8719: LD_INT 1
8721: DOUBLE
8722: EQUAL
8723: IFTRUE 8727
8725: GO 8764
8727: POP
// begin Say ( JMM , D5-JMM-1 ) ;
8728: LD_EXP 8
8732: PPUSH
8733: LD_STRING D5-JMM-1
8735: PPUSH
8736: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
8740: LD_INT 77
8742: PPUSH
8743: LD_INT 87
8745: PPUSH
8746: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
8750: LD_EXP 9
8754: PPUSH
8755: LD_STRING D5-Joan-1
8757: PPUSH
8758: CALL_OW 88
// end ; 2 :
8762: GO 8855
8764: LD_INT 2
8766: DOUBLE
8767: EQUAL
8768: IFTRUE 8772
8770: GO 8809
8772: POP
// begin Say ( JMM , D5-JMM-1 ) ;
8773: LD_EXP 8
8777: PPUSH
8778: LD_STRING D5-JMM-1
8780: PPUSH
8781: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
8785: LD_INT 77
8787: PPUSH
8788: LD_INT 87
8790: PPUSH
8791: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
8795: LD_EXP 10
8799: PPUSH
8800: LD_STRING D5-Lisa-1
8802: PPUSH
8803: CALL_OW 88
// end ; 3 :
8807: GO 8855
8809: LD_INT 3
8811: DOUBLE
8812: EQUAL
8813: IFTRUE 8817
8815: GO 8854
8817: POP
// begin Say ( JMM , D5-JMM-1 ) ;
8818: LD_EXP 8
8822: PPUSH
8823: LD_STRING D5-JMM-1
8825: PPUSH
8826: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
8830: LD_INT 77
8832: PPUSH
8833: LD_INT 87
8835: PPUSH
8836: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
8840: LD_EXP 11
8844: PPUSH
8845: LD_STRING D5-Con-1
8847: PPUSH
8848: CALL_OW 88
// end ; end ;
8852: GO 8855
8854: POP
// end ;
8855: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
8856: LD_EXP 8
8860: PPUSH
8861: CALL_OW 310
8865: PPUSH
8866: LD_INT 16
8868: PPUSH
8869: CALL_OW 308
8873: IFFALSE 9223
8875: GO 8877
8877: DISABLE
8878: LD_INT 0
8880: PPUSH
8881: PPUSH
// begin enable ;
8882: ENABLE
// if JMMGirl = 1 then
8883: LD_EXP 2
8887: PUSH
8888: LD_INT 1
8890: EQUAL
8891: IFFALSE 8908
// JMMGirlVeh := IsInUnit ( Joan ) ;
8893: LD_ADDR_VAR 0 1
8897: PUSH
8898: LD_EXP 9
8902: PPUSH
8903: CALL_OW 310
8907: ST_TO_ADDR
// if JMMGirl = 2 then
8908: LD_EXP 2
8912: PUSH
8913: LD_INT 2
8915: EQUAL
8916: IFFALSE 8933
// JMMGirlVeh := IsInUnit ( Lisa ) ;
8918: LD_ADDR_VAR 0 1
8922: PUSH
8923: LD_EXP 10
8927: PPUSH
8928: CALL_OW 310
8932: ST_TO_ADDR
// if JMMGirl = 3 then
8933: LD_EXP 2
8937: PUSH
8938: LD_INT 3
8940: EQUAL
8941: IFFALSE 8958
// JMMGirlVeh := IsInUnit ( Connie ) ;
8943: LD_ADDR_VAR 0 1
8947: PUSH
8948: LD_EXP 11
8952: PPUSH
8953: CALL_OW 310
8957: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8958: LD_EXP 8
8962: PPUSH
8963: CALL_OW 310
8967: PPUSH
8968: LD_EXP 9
8972: PPUSH
8973: CALL_OW 310
8977: PPUSH
8978: CALL_OW 296
8982: PUSH
8983: LD_INT 10
8985: LESS
8986: PUSH
8987: LD_EXP 8
8991: PPUSH
8992: CALL_OW 310
8996: PPUSH
8997: LD_EXP 10
9001: PPUSH
9002: CALL_OW 310
9006: PPUSH
9007: CALL_OW 296
9011: PUSH
9012: LD_INT 10
9014: LESS
9015: OR
9016: PUSH
9017: LD_EXP 8
9021: PPUSH
9022: CALL_OW 310
9026: PPUSH
9027: LD_EXP 11
9031: PPUSH
9032: CALL_OW 310
9036: PPUSH
9037: CALL_OW 296
9041: PUSH
9042: LD_INT 10
9044: LESS
9045: OR
9046: IFFALSE 9143
// begin case Query ( Q3b ) of 1 :
9048: LD_STRING Q3b
9050: PPUSH
9051: CALL_OW 97
9055: PUSH
9056: LD_INT 1
9058: DOUBLE
9059: EQUAL
9060: IFTRUE 9064
9062: GO 9140
9064: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9065: LD_VAR 0 1
9069: PPUSH
9070: CALL_OW 265
9074: PUSH
9075: EMPTY
9076: LIST
9077: PUSH
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 262
9087: PUSH
9088: EMPTY
9089: LIST
9090: PUSH
9091: LD_VAR 0 1
9095: PPUSH
9096: CALL_OW 263
9100: PUSH
9101: EMPTY
9102: LIST
9103: PUSH
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 264
9113: PUSH
9114: EMPTY
9115: LIST
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: PPUSH
9123: LD_STRING 14_JMMGirlVeh_1
9125: PPUSH
9126: CALL_OW 39
// FinishMission ( false ) ;
9130: LD_INT 0
9132: PPUSH
9133: CALL 9366 0 1
// disable ;
9137: DISABLE
// end ; end ;
9138: GO 9141
9140: POP
// end else
9141: GO 9223
// begin if JMMGirl = 1 then
9143: LD_EXP 2
9147: PUSH
9148: LD_INT 1
9150: EQUAL
9151: IFFALSE 9168
// dec := Query ( Q3bJ ) else
9153: LD_ADDR_VAR 0 2
9157: PUSH
9158: LD_STRING Q3bJ
9160: PPUSH
9161: CALL_OW 97
9165: ST_TO_ADDR
9166: GO 9206
// if JMMGirl = 2 then
9168: LD_EXP 2
9172: PUSH
9173: LD_INT 2
9175: EQUAL
9176: IFFALSE 9193
// dec := Query ( Q3bL ) else
9178: LD_ADDR_VAR 0 2
9182: PUSH
9183: LD_STRING Q3bL
9185: PPUSH
9186: CALL_OW 97
9190: ST_TO_ADDR
9191: GO 9206
// dec := Query ( Q3bX ) ;
9193: LD_ADDR_VAR 0 2
9197: PUSH
9198: LD_STRING Q3bX
9200: PPUSH
9201: CALL_OW 97
9205: ST_TO_ADDR
// if dec = 1 then
9206: LD_VAR 0 2
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 9223
// FinishMission ( false ) ;
9216: LD_INT 0
9218: PPUSH
9219: CALL 9366 0 1
// end ; end ;
9223: PPOPN 2
9225: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9226: LD_INT 22
9228: PUSH
9229: LD_INT 3
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: LD_INT 21
9238: PUSH
9239: LD_INT 1
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PPUSH
9250: CALL_OW 69
9254: PUSH
9255: LD_INT 0
9257: EQUAL
9258: IFFALSE 9365
9260: GO 9262
9262: DISABLE
// begin DialogueOn ;
9263: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9267: LD_EXP 8
9271: PPUSH
9272: LD_STRING DEnd-JMM-1
9274: PPUSH
9275: CALL_OW 88
// case JMMGirl of 1 :
9279: LD_EXP 2
9283: PUSH
9284: LD_INT 1
9286: DOUBLE
9287: EQUAL
9288: IFTRUE 9292
9290: GO 9307
9292: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9293: LD_EXP 9
9297: PPUSH
9298: LD_STRING DEnd-Joan-1
9300: PPUSH
9301: CALL_OW 88
9305: GO 9354
9307: LD_INT 2
9309: DOUBLE
9310: EQUAL
9311: IFTRUE 9315
9313: GO 9330
9315: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9316: LD_EXP 10
9320: PPUSH
9321: LD_STRING DEnd-Lisa-1
9323: PPUSH
9324: CALL_OW 88
9328: GO 9354
9330: LD_INT 3
9332: DOUBLE
9333: EQUAL
9334: IFTRUE 9338
9336: GO 9353
9338: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9339: LD_EXP 11
9343: PPUSH
9344: LD_STRING DEnd-Con-1
9346: PPUSH
9347: CALL_OW 88
9351: GO 9354
9353: POP
// DialogueOff ;
9354: CALL_OW 7
// FinishMission ( false ) ;
9358: LD_INT 0
9360: PPUSH
9361: CALL 9366 0 1
// end ;
9365: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9366: LD_INT 0
9368: PPUSH
9369: PPUSH
9370: PPUSH
9371: PPUSH
9372: PPUSH
9373: PPUSH
// m1 := false ;
9374: LD_ADDR_VAR 0 4
9378: PUSH
9379: LD_INT 0
9381: ST_TO_ADDR
// m2 := false ;
9382: LD_ADDR_VAR 0 5
9386: PUSH
9387: LD_INT 0
9389: ST_TO_ADDR
// m3 := false ;
9390: LD_ADDR_VAR 0 6
9394: PUSH
9395: LD_INT 0
9397: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
9398: LD_ADDR_VAR 0 7
9402: PUSH
9403: LD_INT 22
9405: PUSH
9406: LD_INT 3
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: LD_INT 21
9415: PUSH
9416: LD_INT 1
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PPUSH
9427: CALL_OW 69
9431: PUSH
9432: LD_INT 0
9434: EQUAL
9435: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9436: LD_EXP 8
9440: PPUSH
9441: LD_STRING 14_JMM
9443: PPUSH
9444: CALL_OW 38
// if tick <= 50 50$00 then
9448: LD_OWVAR 1
9452: PUSH
9453: LD_INT 105000
9455: LESSEQUAL
9456: IFFALSE 9465
// SetAchievement ( ACH_ASPEED_14 ) ;
9458: LD_STRING ACH_ASPEED_14
9460: PPUSH
9461: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9465: LD_EXP 8
9469: PPUSH
9470: CALL_OW 310
9474: PUSH
9475: LD_EXP 8
9479: PPUSH
9480: CALL_OW 310
9484: PPUSH
9485: CALL_OW 247
9489: PUSH
9490: LD_INT 2
9492: EQUAL
9493: AND
9494: IFFALSE 9576
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9496: LD_ADDR_VAR 0 3
9500: PUSH
9501: LD_EXP 8
9505: PPUSH
9506: CALL_OW 310
9510: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9511: LD_VAR 0 3
9515: PPUSH
9516: CALL_OW 265
9520: PUSH
9521: EMPTY
9522: LIST
9523: PUSH
9524: LD_VAR 0 3
9528: PPUSH
9529: CALL_OW 262
9533: PUSH
9534: EMPTY
9535: LIST
9536: PUSH
9537: LD_VAR 0 3
9541: PPUSH
9542: CALL_OW 263
9546: PUSH
9547: EMPTY
9548: LIST
9549: PUSH
9550: LD_VAR 0 3
9554: PPUSH
9555: CALL_OW 264
9559: PUSH
9560: EMPTY
9561: LIST
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: PPUSH
9569: LD_STRING 14_JMMVeh_1
9571: PPUSH
9572: CALL_OW 39
// end ; if fastEnd then
9576: LD_VAR 0 1
9580: IFFALSE 9671
// begin AddMedal ( fastend , - 1 ) ;
9582: LD_STRING fastend
9584: PPUSH
9585: LD_INT 1
9587: NEG
9588: PPUSH
9589: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9593: LD_STRING fastend
9595: PPUSH
9596: LD_INT 1
9598: NEG
9599: PPUSH
9600: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9604: LD_STRING fastend
9606: PPUSH
9607: LD_INT 1
9609: NEG
9610: PPUSH
9611: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9615: LD_EXP 2
9619: PPUSH
9620: LD_STRING 14_JMMGirl_1
9622: PPUSH
9623: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9627: LD_INT 0
9629: PPUSH
9630: LD_STRING 14_JMMGirlStatus_1
9632: PPUSH
9633: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9637: LD_INT 0
9639: PPUSH
9640: LD_STRING 14_KappaStatus_1
9642: PPUSH
9643: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9647: LD_STRING Eliminate
9649: PPUSH
9650: CALL_OW 102
// RewardPeople ( JMM ) ;
9654: LD_EXP 8
9658: PPUSH
9659: CALL_OW 43
// YouWin ;
9663: CALL_OW 103
// exit ;
9667: GO 10317
// end else
9669: GO 10210
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9671: LD_EXP 2
9675: PPUSH
9676: LD_STRING 14_JMMGirl_1
9678: PPUSH
9679: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
9683: LD_VAR 0 7
9687: PPUSH
9688: LD_STRING 14_KappaStatus_1
9690: PPUSH
9691: CALL_OW 39
// case JMMGirl of 1 :
9695: LD_EXP 2
9699: PUSH
9700: LD_INT 1
9702: DOUBLE
9703: EQUAL
9704: IFTRUE 9708
9706: GO 9836
9708: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9709: LD_EXP 9
9713: PPUSH
9714: CALL_OW 302
9718: PUSH
9719: LD_EXP 9
9723: PPUSH
9724: CALL_OW 255
9728: PUSH
9729: LD_INT 1
9731: EQUAL
9732: AND
9733: PUSH
9734: LD_VAR 0 7
9738: PUSH
9739: LD_EXP 8
9743: PPUSH
9744: CALL_OW 310
9748: PPUSH
9749: LD_EXP 9
9753: PPUSH
9754: CALL_OW 310
9758: PPUSH
9759: CALL_OW 296
9763: PUSH
9764: LD_INT 10
9766: LESS
9767: OR
9768: AND
9769: IFFALSE 9813
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9771: LD_INT 1
9773: PPUSH
9774: LD_STRING 14_JMMGirlStatus_1
9776: PPUSH
9777: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9781: LD_EXP 9
9785: PPUSH
9786: LD_STRING 14_Joan
9788: PPUSH
9789: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9793: LD_STRING protect
9795: PPUSH
9796: LD_INT 1
9798: PPUSH
9799: CALL_OW 101
// m1 := true ;
9803: LD_ADDR_VAR 0 4
9807: PUSH
9808: LD_INT 1
9810: ST_TO_ADDR
// end else
9811: GO 9834
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9813: LD_INT 0
9815: PPUSH
9816: LD_STRING 14_JMMGirlStatus_1
9818: PPUSH
9819: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9823: LD_STRING protect
9825: PPUSH
9826: LD_INT 1
9828: NEG
9829: PPUSH
9830: CALL_OW 101
// end ; end ; 2 :
9834: GO 10109
9836: LD_INT 2
9838: DOUBLE
9839: EQUAL
9840: IFTRUE 9844
9842: GO 9972
9844: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9845: LD_EXP 10
9849: PPUSH
9850: CALL_OW 302
9854: PUSH
9855: LD_EXP 10
9859: PPUSH
9860: CALL_OW 255
9864: PUSH
9865: LD_INT 1
9867: EQUAL
9868: AND
9869: PUSH
9870: LD_VAR 0 7
9874: PUSH
9875: LD_EXP 8
9879: PPUSH
9880: CALL_OW 310
9884: PPUSH
9885: LD_EXP 10
9889: PPUSH
9890: CALL_OW 310
9894: PPUSH
9895: CALL_OW 296
9899: PUSH
9900: LD_INT 10
9902: LESS
9903: OR
9904: AND
9905: IFFALSE 9949
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9907: LD_INT 1
9909: PPUSH
9910: LD_STRING 14_JMMGirlStatus_1
9912: PPUSH
9913: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9917: LD_EXP 10
9921: PPUSH
9922: LD_STRING 14_Lisa
9924: PPUSH
9925: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9929: LD_STRING protect
9931: PPUSH
9932: LD_INT 1
9934: PPUSH
9935: CALL_OW 101
// m1 := true ;
9939: LD_ADDR_VAR 0 4
9943: PUSH
9944: LD_INT 1
9946: ST_TO_ADDR
// end else
9947: GO 9970
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9949: LD_INT 0
9951: PPUSH
9952: LD_STRING 14_JMMGirlStatus_1
9954: PPUSH
9955: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
9959: LD_STRING protect
9961: PPUSH
9962: LD_INT 2
9964: NEG
9965: PPUSH
9966: CALL_OW 101
// end ; end ; 3 :
9970: GO 10109
9972: LD_INT 3
9974: DOUBLE
9975: EQUAL
9976: IFTRUE 9980
9978: GO 10108
9980: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
9981: LD_EXP 11
9985: PPUSH
9986: CALL_OW 302
9990: PUSH
9991: LD_EXP 11
9995: PPUSH
9996: CALL_OW 255
10000: PUSH
10001: LD_INT 1
10003: EQUAL
10004: AND
10005: PUSH
10006: LD_VAR 0 7
10010: PUSH
10011: LD_EXP 8
10015: PPUSH
10016: CALL_OW 310
10020: PPUSH
10021: LD_EXP 11
10025: PPUSH
10026: CALL_OW 310
10030: PPUSH
10031: CALL_OW 296
10035: PUSH
10036: LD_INT 10
10038: LESS
10039: OR
10040: AND
10041: IFFALSE 10085
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10043: LD_INT 1
10045: PPUSH
10046: LD_STRING 14_JMMGirlStatus_1
10048: PPUSH
10049: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10053: LD_EXP 11
10057: PPUSH
10058: LD_STRING 14_Connie
10060: PPUSH
10061: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10065: LD_STRING protect
10067: PPUSH
10068: LD_INT 1
10070: PPUSH
10071: CALL_OW 101
// m1 := true ;
10075: LD_ADDR_VAR 0 4
10079: PUSH
10080: LD_INT 1
10082: ST_TO_ADDR
// end else
10083: GO 10106
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10085: LD_INT 0
10087: PPUSH
10088: LD_STRING 14_JMMGirlStatus_1
10090: PPUSH
10091: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10095: LD_STRING protect
10097: PPUSH
10098: LD_INT 3
10100: NEG
10101: PPUSH
10102: CALL_OW 101
// end ; end ; end ;
10106: GO 10109
10108: POP
// if amLaserCounter >= 2 then
10109: LD_EXP 7
10113: PUSH
10114: LD_INT 2
10116: GREATEREQUAL
10117: IFFALSE 10139
// begin AddMedal ( double , 1 ) ;
10119: LD_STRING double
10121: PPUSH
10122: LD_INT 1
10124: PPUSH
10125: CALL_OW 101
// m2 := true ;
10129: LD_ADDR_VAR 0 5
10133: PUSH
10134: LD_INT 1
10136: ST_TO_ADDR
// end else
10137: GO 10173
// begin if amLaserCounter = 1 then
10139: LD_EXP 7
10143: PUSH
10144: LD_INT 1
10146: EQUAL
10147: IFFALSE 10162
// AddMedal ( double , - 2 ) else
10149: LD_STRING double
10151: PPUSH
10152: LD_INT 2
10154: NEG
10155: PPUSH
10156: CALL_OW 101
10160: GO 10173
// AddMedal ( double , - 1 ) ;
10162: LD_STRING double
10164: PPUSH
10165: LD_INT 1
10167: NEG
10168: PPUSH
10169: CALL_OW 101
// end ; if ruEliminated then
10173: LD_VAR 0 7
10177: IFFALSE 10199
// begin AddMedal ( base , 1 ) ;
10179: LD_STRING base
10181: PPUSH
10182: LD_INT 1
10184: PPUSH
10185: CALL_OW 101
// m3 := true ;
10189: LD_ADDR_VAR 0 6
10193: PUSH
10194: LD_INT 1
10196: ST_TO_ADDR
// end else
10197: GO 10210
// AddMedal ( base , - 1 ) ;
10199: LD_STRING base
10201: PPUSH
10202: LD_INT 1
10204: NEG
10205: PPUSH
10206: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10210: LD_VAR 0 4
10214: PUSH
10215: LD_VAR 0 5
10219: AND
10220: PUSH
10221: LD_VAR 0 6
10225: AND
10226: PUSH
10227: LD_OWVAR 67
10231: PUSH
10232: LD_INT 3
10234: GREATEREQUAL
10235: AND
10236: IFFALSE 10248
// SetAchievementEX ( ACH_AMER , 14 ) ;
10238: LD_STRING ACH_AMER
10240: PPUSH
10241: LD_INT 14
10243: PPUSH
10244: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10248: LD_STRING Eliminate
10250: PPUSH
10251: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10255: LD_INT 22
10257: PUSH
10258: LD_INT 1
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PUSH
10265: LD_INT 3
10267: PUSH
10268: LD_INT 25
10270: PUSH
10271: LD_INT 12
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 3
10284: PUSH
10285: LD_INT 25
10287: PUSH
10288: LD_INT 16
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: PPUSH
10304: CALL_OW 69
10308: PPUSH
10309: CALL_OW 43
// YouWin ;
10313: CALL_OW 103
// end ; end_of_file
10317: LD_VAR 0 2
10321: RET
// export function CreateNature ; var i , un ; begin
10322: LD_INT 0
10324: PPUSH
10325: PPUSH
10326: PPUSH
// PrepareEnchidna ;
10327: CALL 64798 0 0
// for i := 1 to 3 do
10331: LD_ADDR_VAR 0 2
10335: PUSH
10336: DOUBLE
10337: LD_INT 1
10339: DEC
10340: ST_TO_ADDR
10341: LD_INT 3
10343: PUSH
10344: FOR_TO
10345: IFFALSE 10394
// begin un := CreateHuman ;
10347: LD_ADDR_VAR 0 3
10351: PUSH
10352: CALL_OW 44
10356: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10357: LD_VAR 0 3
10361: PPUSH
10362: LD_INT 0
10364: PPUSH
10365: LD_INT 5
10367: PPUSH
10368: CALL_OW 12
10372: PPUSH
10373: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10377: LD_VAR 0 3
10381: PPUSH
10382: LD_INT 9
10384: PPUSH
10385: LD_INT 0
10387: PPUSH
10388: CALL_OW 49
// end ;
10392: GO 10344
10394: POP
10395: POP
// PrepareHorse ;
10396: CALL 64958 0 0
// for i := 1 to 2 do
10400: LD_ADDR_VAR 0 2
10404: PUSH
10405: DOUBLE
10406: LD_INT 1
10408: DEC
10409: ST_TO_ADDR
10410: LD_INT 2
10412: PUSH
10413: FOR_TO
10414: IFFALSE 10463
// begin un := CreateHuman ;
10416: LD_ADDR_VAR 0 3
10420: PUSH
10421: CALL_OW 44
10425: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10426: LD_VAR 0 3
10430: PPUSH
10431: LD_INT 0
10433: PPUSH
10434: LD_INT 5
10436: PPUSH
10437: CALL_OW 12
10441: PPUSH
10442: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10446: LD_VAR 0 3
10450: PPUSH
10451: LD_INT 9
10453: PPUSH
10454: LD_INT 0
10456: PPUSH
10457: CALL_OW 49
// end ;
10461: GO 10413
10463: POP
10464: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
10465: LD_ADDR_VAR 0 2
10469: PUSH
10470: DOUBLE
10471: LD_INT 1
10473: DEC
10474: ST_TO_ADDR
10475: LD_INT 4
10477: PUSH
10478: LD_INT 5
10480: PUSH
10481: LD_INT 5
10483: PUSH
10484: LD_INT 5
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: PUSH
10493: LD_OWVAR 67
10497: ARRAY
10498: PUSH
10499: FOR_TO
10500: IFFALSE 10564
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
10502: LD_INT 0
10504: PPUSH
10505: LD_INT 5
10507: PPUSH
10508: CALL_OW 12
10512: PPUSH
10513: CALL 64629 0 1
// un := CreateHuman ;
10517: LD_ADDR_VAR 0 3
10521: PUSH
10522: CALL_OW 44
10526: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10527: LD_VAR 0 3
10531: PPUSH
10532: LD_INT 0
10534: PPUSH
10535: LD_INT 5
10537: PPUSH
10538: CALL_OW 12
10542: PPUSH
10543: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
10547: LD_VAR 0 3
10551: PPUSH
10552: LD_INT 8
10554: PPUSH
10555: LD_INT 0
10557: PPUSH
10558: CALL_OW 49
// end ;
10562: GO 10499
10564: POP
10565: POP
// PrepareFish ;
10566: CALL 64878 0 0
// for i := 1 to 2 do
10570: LD_ADDR_VAR 0 2
10574: PUSH
10575: DOUBLE
10576: LD_INT 1
10578: DEC
10579: ST_TO_ADDR
10580: LD_INT 2
10582: PUSH
10583: FOR_TO
10584: IFFALSE 10633
// begin un := CreateHuman ;
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: CALL_OW 44
10595: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10596: LD_VAR 0 3
10600: PPUSH
10601: LD_INT 0
10603: PPUSH
10604: LD_INT 5
10606: PPUSH
10607: CALL_OW 12
10611: PPUSH
10612: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
10616: LD_VAR 0 3
10620: PPUSH
10621: LD_INT 6
10623: PPUSH
10624: LD_INT 0
10626: PPUSH
10627: CALL_OW 49
// end ;
10631: GO 10583
10633: POP
10634: POP
// PrepareFrog ;
10635: CALL 64838 0 0
// for i := 1 to 2 do
10639: LD_ADDR_VAR 0 2
10643: PUSH
10644: DOUBLE
10645: LD_INT 1
10647: DEC
10648: ST_TO_ADDR
10649: LD_INT 2
10651: PUSH
10652: FOR_TO
10653: IFFALSE 10702
// begin un := CreateHuman ;
10655: LD_ADDR_VAR 0 3
10659: PUSH
10660: CALL_OW 44
10664: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10665: LD_VAR 0 3
10669: PPUSH
10670: LD_INT 0
10672: PPUSH
10673: LD_INT 5
10675: PPUSH
10676: CALL_OW 12
10680: PPUSH
10681: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
10685: LD_VAR 0 3
10689: PPUSH
10690: LD_INT 7
10692: PPUSH
10693: LD_INT 0
10695: PPUSH
10696: CALL_OW 49
// end ;
10700: GO 10652
10702: POP
10703: POP
// PrepareMastodont ;
10704: CALL 64998 0 0
// un := CreateVehicle ;
10708: LD_ADDR_VAR 0 3
10712: PUSH
10713: CALL_OW 45
10717: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
10718: LD_VAR 0 3
10722: PPUSH
10723: LD_INT 166
10725: PPUSH
10726: LD_INT 134
10728: PPUSH
10729: LD_INT 1
10731: PPUSH
10732: LD_INT 0
10734: PPUSH
10735: CALL 70498 0 5
// end ; end_of_file
10739: LD_VAR 0 1
10743: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
10744: LD_INT 14
10746: PPUSH
10747: CALL_OW 435
10751: PUSH
10752: LD_INT 20
10754: LESS
10755: IFFALSE 10797
10757: GO 10759
10759: DISABLE
// begin enable ;
10760: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
10761: LD_INT 35
10763: PPUSH
10764: LD_INT 735
10766: PPUSH
10767: CALL_OW 12
10771: PPUSH
10772: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
10776: LD_INT 1
10778: PPUSH
10779: LD_INT 5
10781: PPUSH
10782: CALL_OW 12
10786: PPUSH
10787: LD_INT 14
10789: PPUSH
10790: LD_INT 1
10792: PPUSH
10793: CALL_OW 55
// end ;
10797: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
10798: LD_INT 13
10800: PPUSH
10801: CALL_OW 435
10805: PUSH
10806: LD_INT 30
10808: LESS
10809: IFFALSE 10851
10811: GO 10813
10813: DISABLE
// begin enable ;
10814: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
10815: LD_INT 35
10817: PPUSH
10818: LD_INT 735
10820: PPUSH
10821: CALL_OW 12
10825: PPUSH
10826: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
10830: LD_INT 1
10832: PPUSH
10833: LD_INT 5
10835: PPUSH
10836: CALL_OW 12
10840: PPUSH
10841: LD_INT 13
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: CALL_OW 55
// end ;
10851: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
10852: LD_INT 13
10854: PPUSH
10855: CALL_OW 435
10859: PUSH
10860: LD_INT 30
10862: LESS
10863: IFFALSE 10896
10865: GO 10867
10867: DISABLE
// begin enable ;
10868: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
10869: LD_INT 1
10871: PPUSH
10872: LD_INT 5
10874: PPUSH
10875: CALL_OW 12
10879: PPUSH
10880: LD_INT 133
10882: PPUSH
10883: LD_INT 122
10885: PPUSH
10886: LD_INT 20
10888: PPUSH
10889: LD_INT 1
10891: PPUSH
10892: CALL_OW 56
// end ; end_of_file
10896: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont ; export function InitGlobalVariables ; begin
10897: LD_INT 0
10899: PPUSH
// ar_miner := 81 ;
10900: LD_ADDR_EXP 27
10904: PUSH
10905: LD_INT 81
10907: ST_TO_ADDR
// ar_crane := 88 ;
10908: LD_ADDR_EXP 26
10912: PUSH
10913: LD_INT 88
10915: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10916: LD_ADDR_EXP 21
10920: PUSH
10921: LD_INT 89
10923: ST_TO_ADDR
// us_hack := 99 ;
10924: LD_ADDR_EXP 22
10928: PUSH
10929: LD_INT 99
10931: ST_TO_ADDR
// us_artillery := 97 ;
10932: LD_ADDR_EXP 23
10936: PUSH
10937: LD_INT 97
10939: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10940: LD_ADDR_EXP 24
10944: PUSH
10945: LD_INT 91
10947: ST_TO_ADDR
// ar_mortar := 92 ;
10948: LD_ADDR_EXP 25
10952: PUSH
10953: LD_INT 92
10955: ST_TO_ADDR
// ru_flamethrower := 93 ;
10956: LD_ADDR_EXP 28
10960: PUSH
10961: LD_INT 93
10963: ST_TO_ADDR
// ru_radar := 98 ;
10964: LD_ADDR_EXP 20
10968: PUSH
10969: LD_INT 98
10971: ST_TO_ADDR
// tech_Artillery := 80 ;
10972: LD_ADDR_EXP 29
10976: PUSH
10977: LD_INT 80
10979: ST_TO_ADDR
// tech_RadMat := 81 ;
10980: LD_ADDR_EXP 30
10984: PUSH
10985: LD_INT 81
10987: ST_TO_ADDR
// tech_BasicTools := 82 ;
10988: LD_ADDR_EXP 31
10992: PUSH
10993: LD_INT 82
10995: ST_TO_ADDR
// tech_Cargo := 83 ;
10996: LD_ADDR_EXP 32
11000: PUSH
11001: LD_INT 83
11003: ST_TO_ADDR
// tech_Track := 84 ;
11004: LD_ADDR_EXP 33
11008: PUSH
11009: LD_INT 84
11011: ST_TO_ADDR
// tech_Crane := 85 ;
11012: LD_ADDR_EXP 34
11016: PUSH
11017: LD_INT 85
11019: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11020: LD_ADDR_EXP 35
11024: PUSH
11025: LD_INT 86
11027: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11028: LD_ADDR_EXP 36
11032: PUSH
11033: LD_INT 87
11035: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11036: LD_ADDR_EXP 37
11040: PUSH
11041: LD_INT 88
11043: ST_TO_ADDR
// class_mastodont := 31 ;
11044: LD_ADDR_EXP 38
11048: PUSH
11049: LD_INT 31
11051: ST_TO_ADDR
// end ;
11052: LD_VAR 0 1
11056: RET
// every 1 do
11057: GO 11059
11059: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11060: CALL 10897 0 0
11064: END
// every 0 0$1 do
11065: GO 11067
11067: DISABLE
// begin enable ;
11068: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11069: LD_STRING updateTimer(
11071: PUSH
11072: LD_OWVAR 1
11076: STR
11077: PUSH
11078: LD_STRING );
11080: STR
11081: PPUSH
11082: CALL_OW 559
// end ;
11086: END
// export function SOS_MapStart ( ) ; begin
11087: LD_INT 0
11089: PPUSH
// if streamModeActive then
11090: LD_EXP 39
11094: IFFALSE 11103
// DefineStreamItems ( true ) ;
11096: LD_INT 1
11098: PPUSH
11099: CALL 12757 0 1
// UpdateFactoryWaypoints ( ) ;
11103: CALL 25618 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11107: CALL 25875 0 0
// end ;
11111: LD_VAR 0 1
11115: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11116: LD_INT 0
11118: PPUSH
// if p2 = 100 then
11119: LD_VAR 0 2
11123: PUSH
11124: LD_INT 100
11126: EQUAL
11127: IFFALSE 12130
// begin if not StreamModeActive then
11129: LD_EXP 39
11133: NOT
11134: IFFALSE 11144
// StreamModeActive := true ;
11136: LD_ADDR_EXP 39
11140: PUSH
11141: LD_INT 1
11143: ST_TO_ADDR
// if p3 = 0 then
11144: LD_VAR 0 3
11148: PUSH
11149: LD_INT 0
11151: EQUAL
11152: IFFALSE 11158
// InitStreamMode ;
11154: CALL 12293 0 0
// if p3 = 1 then
11158: LD_VAR 0 3
11162: PUSH
11163: LD_INT 1
11165: EQUAL
11166: IFFALSE 11176
// sRocket := true ;
11168: LD_ADDR_EXP 44
11172: PUSH
11173: LD_INT 1
11175: ST_TO_ADDR
// if p3 = 2 then
11176: LD_VAR 0 3
11180: PUSH
11181: LD_INT 2
11183: EQUAL
11184: IFFALSE 11194
// sSpeed := true ;
11186: LD_ADDR_EXP 43
11190: PUSH
11191: LD_INT 1
11193: ST_TO_ADDR
// if p3 = 3 then
11194: LD_VAR 0 3
11198: PUSH
11199: LD_INT 3
11201: EQUAL
11202: IFFALSE 11212
// sEngine := true ;
11204: LD_ADDR_EXP 45
11208: PUSH
11209: LD_INT 1
11211: ST_TO_ADDR
// if p3 = 4 then
11212: LD_VAR 0 3
11216: PUSH
11217: LD_INT 4
11219: EQUAL
11220: IFFALSE 11230
// sSpec := true ;
11222: LD_ADDR_EXP 42
11226: PUSH
11227: LD_INT 1
11229: ST_TO_ADDR
// if p3 = 5 then
11230: LD_VAR 0 3
11234: PUSH
11235: LD_INT 5
11237: EQUAL
11238: IFFALSE 11248
// sLevel := true ;
11240: LD_ADDR_EXP 46
11244: PUSH
11245: LD_INT 1
11247: ST_TO_ADDR
// if p3 = 6 then
11248: LD_VAR 0 3
11252: PUSH
11253: LD_INT 6
11255: EQUAL
11256: IFFALSE 11266
// sArmoury := true ;
11258: LD_ADDR_EXP 47
11262: PUSH
11263: LD_INT 1
11265: ST_TO_ADDR
// if p3 = 7 then
11266: LD_VAR 0 3
11270: PUSH
11271: LD_INT 7
11273: EQUAL
11274: IFFALSE 11284
// sRadar := true ;
11276: LD_ADDR_EXP 48
11280: PUSH
11281: LD_INT 1
11283: ST_TO_ADDR
// if p3 = 8 then
11284: LD_VAR 0 3
11288: PUSH
11289: LD_INT 8
11291: EQUAL
11292: IFFALSE 11302
// sBunker := true ;
11294: LD_ADDR_EXP 49
11298: PUSH
11299: LD_INT 1
11301: ST_TO_ADDR
// if p3 = 9 then
11302: LD_VAR 0 3
11306: PUSH
11307: LD_INT 9
11309: EQUAL
11310: IFFALSE 11320
// sHack := true ;
11312: LD_ADDR_EXP 50
11316: PUSH
11317: LD_INT 1
11319: ST_TO_ADDR
// if p3 = 10 then
11320: LD_VAR 0 3
11324: PUSH
11325: LD_INT 10
11327: EQUAL
11328: IFFALSE 11338
// sFire := true ;
11330: LD_ADDR_EXP 51
11334: PUSH
11335: LD_INT 1
11337: ST_TO_ADDR
// if p3 = 11 then
11338: LD_VAR 0 3
11342: PUSH
11343: LD_INT 11
11345: EQUAL
11346: IFFALSE 11356
// sRefresh := true ;
11348: LD_ADDR_EXP 52
11352: PUSH
11353: LD_INT 1
11355: ST_TO_ADDR
// if p3 = 12 then
11356: LD_VAR 0 3
11360: PUSH
11361: LD_INT 12
11363: EQUAL
11364: IFFALSE 11374
// sExp := true ;
11366: LD_ADDR_EXP 53
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// if p3 = 13 then
11374: LD_VAR 0 3
11378: PUSH
11379: LD_INT 13
11381: EQUAL
11382: IFFALSE 11392
// sDepot := true ;
11384: LD_ADDR_EXP 54
11388: PUSH
11389: LD_INT 1
11391: ST_TO_ADDR
// if p3 = 14 then
11392: LD_VAR 0 3
11396: PUSH
11397: LD_INT 14
11399: EQUAL
11400: IFFALSE 11410
// sFlag := true ;
11402: LD_ADDR_EXP 55
11406: PUSH
11407: LD_INT 1
11409: ST_TO_ADDR
// if p3 = 15 then
11410: LD_VAR 0 3
11414: PUSH
11415: LD_INT 15
11417: EQUAL
11418: IFFALSE 11428
// sKamikadze := true ;
11420: LD_ADDR_EXP 63
11424: PUSH
11425: LD_INT 1
11427: ST_TO_ADDR
// if p3 = 16 then
11428: LD_VAR 0 3
11432: PUSH
11433: LD_INT 16
11435: EQUAL
11436: IFFALSE 11446
// sTroll := true ;
11438: LD_ADDR_EXP 64
11442: PUSH
11443: LD_INT 1
11445: ST_TO_ADDR
// if p3 = 17 then
11446: LD_VAR 0 3
11450: PUSH
11451: LD_INT 17
11453: EQUAL
11454: IFFALSE 11464
// sSlow := true ;
11456: LD_ADDR_EXP 65
11460: PUSH
11461: LD_INT 1
11463: ST_TO_ADDR
// if p3 = 18 then
11464: LD_VAR 0 3
11468: PUSH
11469: LD_INT 18
11471: EQUAL
11472: IFFALSE 11482
// sLack := true ;
11474: LD_ADDR_EXP 66
11478: PUSH
11479: LD_INT 1
11481: ST_TO_ADDR
// if p3 = 19 then
11482: LD_VAR 0 3
11486: PUSH
11487: LD_INT 19
11489: EQUAL
11490: IFFALSE 11500
// sTank := true ;
11492: LD_ADDR_EXP 68
11496: PUSH
11497: LD_INT 1
11499: ST_TO_ADDR
// if p3 = 20 then
11500: LD_VAR 0 3
11504: PUSH
11505: LD_INT 20
11507: EQUAL
11508: IFFALSE 11518
// sRemote := true ;
11510: LD_ADDR_EXP 69
11514: PUSH
11515: LD_INT 1
11517: ST_TO_ADDR
// if p3 = 21 then
11518: LD_VAR 0 3
11522: PUSH
11523: LD_INT 21
11525: EQUAL
11526: IFFALSE 11536
// sPowell := true ;
11528: LD_ADDR_EXP 70
11532: PUSH
11533: LD_INT 1
11535: ST_TO_ADDR
// if p3 = 22 then
11536: LD_VAR 0 3
11540: PUSH
11541: LD_INT 22
11543: EQUAL
11544: IFFALSE 11554
// sTeleport := true ;
11546: LD_ADDR_EXP 73
11550: PUSH
11551: LD_INT 1
11553: ST_TO_ADDR
// if p3 = 23 then
11554: LD_VAR 0 3
11558: PUSH
11559: LD_INT 23
11561: EQUAL
11562: IFFALSE 11572
// sOilTower := true ;
11564: LD_ADDR_EXP 75
11568: PUSH
11569: LD_INT 1
11571: ST_TO_ADDR
// if p3 = 24 then
11572: LD_VAR 0 3
11576: PUSH
11577: LD_INT 24
11579: EQUAL
11580: IFFALSE 11590
// sShovel := true ;
11582: LD_ADDR_EXP 76
11586: PUSH
11587: LD_INT 1
11589: ST_TO_ADDR
// if p3 = 25 then
11590: LD_VAR 0 3
11594: PUSH
11595: LD_INT 25
11597: EQUAL
11598: IFFALSE 11608
// sSheik := true ;
11600: LD_ADDR_EXP 77
11604: PUSH
11605: LD_INT 1
11607: ST_TO_ADDR
// if p3 = 26 then
11608: LD_VAR 0 3
11612: PUSH
11613: LD_INT 26
11615: EQUAL
11616: IFFALSE 11626
// sEarthquake := true ;
11618: LD_ADDR_EXP 79
11622: PUSH
11623: LD_INT 1
11625: ST_TO_ADDR
// if p3 = 27 then
11626: LD_VAR 0 3
11630: PUSH
11631: LD_INT 27
11633: EQUAL
11634: IFFALSE 11644
// sAI := true ;
11636: LD_ADDR_EXP 80
11640: PUSH
11641: LD_INT 1
11643: ST_TO_ADDR
// if p3 = 28 then
11644: LD_VAR 0 3
11648: PUSH
11649: LD_INT 28
11651: EQUAL
11652: IFFALSE 11662
// sCargo := true ;
11654: LD_ADDR_EXP 83
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// if p3 = 29 then
11662: LD_VAR 0 3
11666: PUSH
11667: LD_INT 29
11669: EQUAL
11670: IFFALSE 11680
// sDLaser := true ;
11672: LD_ADDR_EXP 84
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// if p3 = 30 then
11680: LD_VAR 0 3
11684: PUSH
11685: LD_INT 30
11687: EQUAL
11688: IFFALSE 11698
// sExchange := true ;
11690: LD_ADDR_EXP 85
11694: PUSH
11695: LD_INT 1
11697: ST_TO_ADDR
// if p3 = 31 then
11698: LD_VAR 0 3
11702: PUSH
11703: LD_INT 31
11705: EQUAL
11706: IFFALSE 11716
// sFac := true ;
11708: LD_ADDR_EXP 86
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
// if p3 = 32 then
11716: LD_VAR 0 3
11720: PUSH
11721: LD_INT 32
11723: EQUAL
11724: IFFALSE 11734
// sPower := true ;
11726: LD_ADDR_EXP 87
11730: PUSH
11731: LD_INT 1
11733: ST_TO_ADDR
// if p3 = 33 then
11734: LD_VAR 0 3
11738: PUSH
11739: LD_INT 33
11741: EQUAL
11742: IFFALSE 11752
// sRandom := true ;
11744: LD_ADDR_EXP 88
11748: PUSH
11749: LD_INT 1
11751: ST_TO_ADDR
// if p3 = 34 then
11752: LD_VAR 0 3
11756: PUSH
11757: LD_INT 34
11759: EQUAL
11760: IFFALSE 11770
// sShield := true ;
11762: LD_ADDR_EXP 89
11766: PUSH
11767: LD_INT 1
11769: ST_TO_ADDR
// if p3 = 35 then
11770: LD_VAR 0 3
11774: PUSH
11775: LD_INT 35
11777: EQUAL
11778: IFFALSE 11788
// sTime := true ;
11780: LD_ADDR_EXP 90
11784: PUSH
11785: LD_INT 1
11787: ST_TO_ADDR
// if p3 = 36 then
11788: LD_VAR 0 3
11792: PUSH
11793: LD_INT 36
11795: EQUAL
11796: IFFALSE 11806
// sTools := true ;
11798: LD_ADDR_EXP 91
11802: PUSH
11803: LD_INT 1
11805: ST_TO_ADDR
// if p3 = 101 then
11806: LD_VAR 0 3
11810: PUSH
11811: LD_INT 101
11813: EQUAL
11814: IFFALSE 11824
// sSold := true ;
11816: LD_ADDR_EXP 56
11820: PUSH
11821: LD_INT 1
11823: ST_TO_ADDR
// if p3 = 102 then
11824: LD_VAR 0 3
11828: PUSH
11829: LD_INT 102
11831: EQUAL
11832: IFFALSE 11842
// sDiff := true ;
11834: LD_ADDR_EXP 57
11838: PUSH
11839: LD_INT 1
11841: ST_TO_ADDR
// if p3 = 103 then
11842: LD_VAR 0 3
11846: PUSH
11847: LD_INT 103
11849: EQUAL
11850: IFFALSE 11860
// sFog := true ;
11852: LD_ADDR_EXP 60
11856: PUSH
11857: LD_INT 1
11859: ST_TO_ADDR
// if p3 = 104 then
11860: LD_VAR 0 3
11864: PUSH
11865: LD_INT 104
11867: EQUAL
11868: IFFALSE 11878
// sReset := true ;
11870: LD_ADDR_EXP 61
11874: PUSH
11875: LD_INT 1
11877: ST_TO_ADDR
// if p3 = 105 then
11878: LD_VAR 0 3
11882: PUSH
11883: LD_INT 105
11885: EQUAL
11886: IFFALSE 11896
// sSun := true ;
11888: LD_ADDR_EXP 62
11892: PUSH
11893: LD_INT 1
11895: ST_TO_ADDR
// if p3 = 106 then
11896: LD_VAR 0 3
11900: PUSH
11901: LD_INT 106
11903: EQUAL
11904: IFFALSE 11914
// sTiger := true ;
11906: LD_ADDR_EXP 58
11910: PUSH
11911: LD_INT 1
11913: ST_TO_ADDR
// if p3 = 107 then
11914: LD_VAR 0 3
11918: PUSH
11919: LD_INT 107
11921: EQUAL
11922: IFFALSE 11932
// sBomb := true ;
11924: LD_ADDR_EXP 59
11928: PUSH
11929: LD_INT 1
11931: ST_TO_ADDR
// if p3 = 108 then
11932: LD_VAR 0 3
11936: PUSH
11937: LD_INT 108
11939: EQUAL
11940: IFFALSE 11950
// sWound := true ;
11942: LD_ADDR_EXP 67
11946: PUSH
11947: LD_INT 1
11949: ST_TO_ADDR
// if p3 = 109 then
11950: LD_VAR 0 3
11954: PUSH
11955: LD_INT 109
11957: EQUAL
11958: IFFALSE 11968
// sBetray := true ;
11960: LD_ADDR_EXP 71
11964: PUSH
11965: LD_INT 1
11967: ST_TO_ADDR
// if p3 = 110 then
11968: LD_VAR 0 3
11972: PUSH
11973: LD_INT 110
11975: EQUAL
11976: IFFALSE 11986
// sContamin := true ;
11978: LD_ADDR_EXP 72
11982: PUSH
11983: LD_INT 1
11985: ST_TO_ADDR
// if p3 = 111 then
11986: LD_VAR 0 3
11990: PUSH
11991: LD_INT 111
11993: EQUAL
11994: IFFALSE 12004
// sOil := true ;
11996: LD_ADDR_EXP 74
12000: PUSH
12001: LD_INT 1
12003: ST_TO_ADDR
// if p3 = 112 then
12004: LD_VAR 0 3
12008: PUSH
12009: LD_INT 112
12011: EQUAL
12012: IFFALSE 12022
// sStu := true ;
12014: LD_ADDR_EXP 78
12018: PUSH
12019: LD_INT 1
12021: ST_TO_ADDR
// if p3 = 113 then
12022: LD_VAR 0 3
12026: PUSH
12027: LD_INT 113
12029: EQUAL
12030: IFFALSE 12040
// sBazooka := true ;
12032: LD_ADDR_EXP 81
12036: PUSH
12037: LD_INT 1
12039: ST_TO_ADDR
// if p3 = 114 then
12040: LD_VAR 0 3
12044: PUSH
12045: LD_INT 114
12047: EQUAL
12048: IFFALSE 12058
// sMortar := true ;
12050: LD_ADDR_EXP 82
12054: PUSH
12055: LD_INT 1
12057: ST_TO_ADDR
// if p3 = 115 then
12058: LD_VAR 0 3
12062: PUSH
12063: LD_INT 115
12065: EQUAL
12066: IFFALSE 12076
// sRanger := true ;
12068: LD_ADDR_EXP 92
12072: PUSH
12073: LD_INT 1
12075: ST_TO_ADDR
// if p3 = 116 then
12076: LD_VAR 0 3
12080: PUSH
12081: LD_INT 116
12083: EQUAL
12084: IFFALSE 12094
// sComputer := true ;
12086: LD_ADDR_EXP 93
12090: PUSH
12091: LD_INT 1
12093: ST_TO_ADDR
// if p3 = 117 then
12094: LD_VAR 0 3
12098: PUSH
12099: LD_INT 117
12101: EQUAL
12102: IFFALSE 12112
// s30 := true ;
12104: LD_ADDR_EXP 94
12108: PUSH
12109: LD_INT 1
12111: ST_TO_ADDR
// if p3 = 118 then
12112: LD_VAR 0 3
12116: PUSH
12117: LD_INT 118
12119: EQUAL
12120: IFFALSE 12130
// s60 := true ;
12122: LD_ADDR_EXP 95
12126: PUSH
12127: LD_INT 1
12129: ST_TO_ADDR
// end ; if p2 = 101 then
12130: LD_VAR 0 2
12134: PUSH
12135: LD_INT 101
12137: EQUAL
12138: IFFALSE 12266
// begin case p3 of 1 :
12140: LD_VAR 0 3
12144: PUSH
12145: LD_INT 1
12147: DOUBLE
12148: EQUAL
12149: IFTRUE 12153
12151: GO 12160
12153: POP
// hHackUnlimitedResources ; 2 :
12154: CALL 24364 0 0
12158: GO 12266
12160: LD_INT 2
12162: DOUBLE
12163: EQUAL
12164: IFTRUE 12168
12166: GO 12175
12168: POP
// hHackSetLevel10 ; 3 :
12169: CALL 24497 0 0
12173: GO 12266
12175: LD_INT 3
12177: DOUBLE
12178: EQUAL
12179: IFTRUE 12183
12181: GO 12190
12183: POP
// hHackSetLevel10YourUnits ; 4 :
12184: CALL 24582 0 0
12188: GO 12266
12190: LD_INT 4
12192: DOUBLE
12193: EQUAL
12194: IFTRUE 12198
12196: GO 12205
12198: POP
// hHackInvincible ; 5 :
12199: CALL 25030 0 0
12203: GO 12266
12205: LD_INT 5
12207: DOUBLE
12208: EQUAL
12209: IFTRUE 12213
12211: GO 12220
12213: POP
// hHackInvisible ; 6 :
12214: CALL 25141 0 0
12218: GO 12266
12220: LD_INT 6
12222: DOUBLE
12223: EQUAL
12224: IFTRUE 12228
12226: GO 12235
12228: POP
// hHackChangeYourSide ; 7 :
12229: CALL 25198 0 0
12233: GO 12266
12235: LD_INT 7
12237: DOUBLE
12238: EQUAL
12239: IFTRUE 12243
12241: GO 12250
12243: POP
// hHackChangeUnitSide ; 8 :
12244: CALL 25240 0 0
12248: GO 12266
12250: LD_INT 8
12252: DOUBLE
12253: EQUAL
12254: IFTRUE 12258
12256: GO 12265
12258: POP
// hHackFog ; end ;
12259: CALL 25341 0 0
12263: GO 12266
12265: POP
// end ; end ;
12266: LD_VAR 0 7
12270: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12271: GO 12273
12273: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12274: LD_STRING initStreamRollete();
12276: PPUSH
12277: CALL_OW 559
// InitStreamMode ;
12281: CALL 12293 0 0
// DefineStreamItems ( false ) ;
12285: LD_INT 0
12287: PPUSH
12288: CALL 12757 0 1
// end ;
12292: END
// function InitStreamMode ; begin
12293: LD_INT 0
12295: PPUSH
// streamModeActive := false ;
12296: LD_ADDR_EXP 39
12300: PUSH
12301: LD_INT 0
12303: ST_TO_ADDR
// normalCounter := 36 ;
12304: LD_ADDR_EXP 40
12308: PUSH
12309: LD_INT 36
12311: ST_TO_ADDR
// hardcoreCounter := 18 ;
12312: LD_ADDR_EXP 41
12316: PUSH
12317: LD_INT 18
12319: ST_TO_ADDR
// sRocket := false ;
12320: LD_ADDR_EXP 44
12324: PUSH
12325: LD_INT 0
12327: ST_TO_ADDR
// sSpeed := false ;
12328: LD_ADDR_EXP 43
12332: PUSH
12333: LD_INT 0
12335: ST_TO_ADDR
// sEngine := false ;
12336: LD_ADDR_EXP 45
12340: PUSH
12341: LD_INT 0
12343: ST_TO_ADDR
// sSpec := false ;
12344: LD_ADDR_EXP 42
12348: PUSH
12349: LD_INT 0
12351: ST_TO_ADDR
// sLevel := false ;
12352: LD_ADDR_EXP 46
12356: PUSH
12357: LD_INT 0
12359: ST_TO_ADDR
// sArmoury := false ;
12360: LD_ADDR_EXP 47
12364: PUSH
12365: LD_INT 0
12367: ST_TO_ADDR
// sRadar := false ;
12368: LD_ADDR_EXP 48
12372: PUSH
12373: LD_INT 0
12375: ST_TO_ADDR
// sBunker := false ;
12376: LD_ADDR_EXP 49
12380: PUSH
12381: LD_INT 0
12383: ST_TO_ADDR
// sHack := false ;
12384: LD_ADDR_EXP 50
12388: PUSH
12389: LD_INT 0
12391: ST_TO_ADDR
// sFire := false ;
12392: LD_ADDR_EXP 51
12396: PUSH
12397: LD_INT 0
12399: ST_TO_ADDR
// sRefresh := false ;
12400: LD_ADDR_EXP 52
12404: PUSH
12405: LD_INT 0
12407: ST_TO_ADDR
// sExp := false ;
12408: LD_ADDR_EXP 53
12412: PUSH
12413: LD_INT 0
12415: ST_TO_ADDR
// sDepot := false ;
12416: LD_ADDR_EXP 54
12420: PUSH
12421: LD_INT 0
12423: ST_TO_ADDR
// sFlag := false ;
12424: LD_ADDR_EXP 55
12428: PUSH
12429: LD_INT 0
12431: ST_TO_ADDR
// sKamikadze := false ;
12432: LD_ADDR_EXP 63
12436: PUSH
12437: LD_INT 0
12439: ST_TO_ADDR
// sTroll := false ;
12440: LD_ADDR_EXP 64
12444: PUSH
12445: LD_INT 0
12447: ST_TO_ADDR
// sSlow := false ;
12448: LD_ADDR_EXP 65
12452: PUSH
12453: LD_INT 0
12455: ST_TO_ADDR
// sLack := false ;
12456: LD_ADDR_EXP 66
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// sTank := false ;
12464: LD_ADDR_EXP 68
12468: PUSH
12469: LD_INT 0
12471: ST_TO_ADDR
// sRemote := false ;
12472: LD_ADDR_EXP 69
12476: PUSH
12477: LD_INT 0
12479: ST_TO_ADDR
// sPowell := false ;
12480: LD_ADDR_EXP 70
12484: PUSH
12485: LD_INT 0
12487: ST_TO_ADDR
// sTeleport := false ;
12488: LD_ADDR_EXP 73
12492: PUSH
12493: LD_INT 0
12495: ST_TO_ADDR
// sOilTower := false ;
12496: LD_ADDR_EXP 75
12500: PUSH
12501: LD_INT 0
12503: ST_TO_ADDR
// sShovel := false ;
12504: LD_ADDR_EXP 76
12508: PUSH
12509: LD_INT 0
12511: ST_TO_ADDR
// sSheik := false ;
12512: LD_ADDR_EXP 77
12516: PUSH
12517: LD_INT 0
12519: ST_TO_ADDR
// sEarthquake := false ;
12520: LD_ADDR_EXP 79
12524: PUSH
12525: LD_INT 0
12527: ST_TO_ADDR
// sAI := false ;
12528: LD_ADDR_EXP 80
12532: PUSH
12533: LD_INT 0
12535: ST_TO_ADDR
// sCargo := false ;
12536: LD_ADDR_EXP 83
12540: PUSH
12541: LD_INT 0
12543: ST_TO_ADDR
// sDLaser := false ;
12544: LD_ADDR_EXP 84
12548: PUSH
12549: LD_INT 0
12551: ST_TO_ADDR
// sExchange := false ;
12552: LD_ADDR_EXP 85
12556: PUSH
12557: LD_INT 0
12559: ST_TO_ADDR
// sFac := false ;
12560: LD_ADDR_EXP 86
12564: PUSH
12565: LD_INT 0
12567: ST_TO_ADDR
// sPower := false ;
12568: LD_ADDR_EXP 87
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// sRandom := false ;
12576: LD_ADDR_EXP 88
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// sShield := false ;
12584: LD_ADDR_EXP 89
12588: PUSH
12589: LD_INT 0
12591: ST_TO_ADDR
// sTime := false ;
12592: LD_ADDR_EXP 90
12596: PUSH
12597: LD_INT 0
12599: ST_TO_ADDR
// sTools := false ;
12600: LD_ADDR_EXP 91
12604: PUSH
12605: LD_INT 0
12607: ST_TO_ADDR
// sSold := false ;
12608: LD_ADDR_EXP 56
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// sDiff := false ;
12616: LD_ADDR_EXP 57
12620: PUSH
12621: LD_INT 0
12623: ST_TO_ADDR
// sFog := false ;
12624: LD_ADDR_EXP 60
12628: PUSH
12629: LD_INT 0
12631: ST_TO_ADDR
// sReset := false ;
12632: LD_ADDR_EXP 61
12636: PUSH
12637: LD_INT 0
12639: ST_TO_ADDR
// sSun := false ;
12640: LD_ADDR_EXP 62
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// sTiger := false ;
12648: LD_ADDR_EXP 58
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// sBomb := false ;
12656: LD_ADDR_EXP 59
12660: PUSH
12661: LD_INT 0
12663: ST_TO_ADDR
// sWound := false ;
12664: LD_ADDR_EXP 67
12668: PUSH
12669: LD_INT 0
12671: ST_TO_ADDR
// sBetray := false ;
12672: LD_ADDR_EXP 71
12676: PUSH
12677: LD_INT 0
12679: ST_TO_ADDR
// sContamin := false ;
12680: LD_ADDR_EXP 72
12684: PUSH
12685: LD_INT 0
12687: ST_TO_ADDR
// sOil := false ;
12688: LD_ADDR_EXP 74
12692: PUSH
12693: LD_INT 0
12695: ST_TO_ADDR
// sStu := false ;
12696: LD_ADDR_EXP 78
12700: PUSH
12701: LD_INT 0
12703: ST_TO_ADDR
// sBazooka := false ;
12704: LD_ADDR_EXP 81
12708: PUSH
12709: LD_INT 0
12711: ST_TO_ADDR
// sMortar := false ;
12712: LD_ADDR_EXP 82
12716: PUSH
12717: LD_INT 0
12719: ST_TO_ADDR
// sRanger := false ;
12720: LD_ADDR_EXP 92
12724: PUSH
12725: LD_INT 0
12727: ST_TO_ADDR
// sComputer := false ;
12728: LD_ADDR_EXP 93
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// s30 := false ;
12736: LD_ADDR_EXP 94
12740: PUSH
12741: LD_INT 0
12743: ST_TO_ADDR
// s60 := false ;
12744: LD_ADDR_EXP 95
12748: PUSH
12749: LD_INT 0
12751: ST_TO_ADDR
// end ;
12752: LD_VAR 0 1
12756: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12757: LD_INT 0
12759: PPUSH
12760: PPUSH
12761: PPUSH
12762: PPUSH
12763: PPUSH
12764: PPUSH
12765: PPUSH
// result := [ ] ;
12766: LD_ADDR_VAR 0 2
12770: PUSH
12771: EMPTY
12772: ST_TO_ADDR
// if campaign_id = 1 then
12773: LD_OWVAR 69
12777: PUSH
12778: LD_INT 1
12780: EQUAL
12781: IFFALSE 15947
// begin case mission_number of 1 :
12783: LD_OWVAR 70
12787: PUSH
12788: LD_INT 1
12790: DOUBLE
12791: EQUAL
12792: IFTRUE 12796
12794: GO 12872
12796: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12797: LD_ADDR_VAR 0 2
12801: PUSH
12802: LD_INT 2
12804: PUSH
12805: LD_INT 4
12807: PUSH
12808: LD_INT 11
12810: PUSH
12811: LD_INT 12
12813: PUSH
12814: LD_INT 15
12816: PUSH
12817: LD_INT 16
12819: PUSH
12820: LD_INT 22
12822: PUSH
12823: LD_INT 23
12825: PUSH
12826: LD_INT 26
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 101
12842: PUSH
12843: LD_INT 102
12845: PUSH
12846: LD_INT 106
12848: PUSH
12849: LD_INT 116
12851: PUSH
12852: LD_INT 117
12854: PUSH
12855: LD_INT 118
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: ST_TO_ADDR
12870: GO 15945
12872: LD_INT 2
12874: DOUBLE
12875: EQUAL
12876: IFTRUE 12880
12878: GO 12964
12880: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12881: LD_ADDR_VAR 0 2
12885: PUSH
12886: LD_INT 2
12888: PUSH
12889: LD_INT 4
12891: PUSH
12892: LD_INT 11
12894: PUSH
12895: LD_INT 12
12897: PUSH
12898: LD_INT 15
12900: PUSH
12901: LD_INT 16
12903: PUSH
12904: LD_INT 22
12906: PUSH
12907: LD_INT 23
12909: PUSH
12910: LD_INT 26
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: PUSH
12924: LD_INT 101
12926: PUSH
12927: LD_INT 102
12929: PUSH
12930: LD_INT 105
12932: PUSH
12933: LD_INT 106
12935: PUSH
12936: LD_INT 108
12938: PUSH
12939: LD_INT 116
12941: PUSH
12942: LD_INT 117
12944: PUSH
12945: LD_INT 118
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: ST_TO_ADDR
12962: GO 15945
12964: LD_INT 3
12966: DOUBLE
12967: EQUAL
12968: IFTRUE 12972
12970: GO 13060
12972: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12973: LD_ADDR_VAR 0 2
12977: PUSH
12978: LD_INT 2
12980: PUSH
12981: LD_INT 4
12983: PUSH
12984: LD_INT 5
12986: PUSH
12987: LD_INT 11
12989: PUSH
12990: LD_INT 12
12992: PUSH
12993: LD_INT 15
12995: PUSH
12996: LD_INT 16
12998: PUSH
12999: LD_INT 22
13001: PUSH
13002: LD_INT 26
13004: PUSH
13005: LD_INT 36
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: PUSH
13020: LD_INT 101
13022: PUSH
13023: LD_INT 102
13025: PUSH
13026: LD_INT 105
13028: PUSH
13029: LD_INT 106
13031: PUSH
13032: LD_INT 108
13034: PUSH
13035: LD_INT 116
13037: PUSH
13038: LD_INT 117
13040: PUSH
13041: LD_INT 118
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: ST_TO_ADDR
13058: GO 15945
13060: LD_INT 4
13062: DOUBLE
13063: EQUAL
13064: IFTRUE 13068
13066: GO 13164
13068: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13069: LD_ADDR_VAR 0 2
13073: PUSH
13074: LD_INT 2
13076: PUSH
13077: LD_INT 4
13079: PUSH
13080: LD_INT 5
13082: PUSH
13083: LD_INT 8
13085: PUSH
13086: LD_INT 11
13088: PUSH
13089: LD_INT 12
13091: PUSH
13092: LD_INT 15
13094: PUSH
13095: LD_INT 16
13097: PUSH
13098: LD_INT 22
13100: PUSH
13101: LD_INT 23
13103: PUSH
13104: LD_INT 26
13106: PUSH
13107: LD_INT 36
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 101
13126: PUSH
13127: LD_INT 102
13129: PUSH
13130: LD_INT 105
13132: PUSH
13133: LD_INT 106
13135: PUSH
13136: LD_INT 108
13138: PUSH
13139: LD_INT 116
13141: PUSH
13142: LD_INT 117
13144: PUSH
13145: LD_INT 118
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: ST_TO_ADDR
13162: GO 15945
13164: LD_INT 5
13166: DOUBLE
13167: EQUAL
13168: IFTRUE 13172
13170: GO 13284
13172: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13173: LD_ADDR_VAR 0 2
13177: PUSH
13178: LD_INT 2
13180: PUSH
13181: LD_INT 4
13183: PUSH
13184: LD_INT 5
13186: PUSH
13187: LD_INT 6
13189: PUSH
13190: LD_INT 8
13192: PUSH
13193: LD_INT 11
13195: PUSH
13196: LD_INT 12
13198: PUSH
13199: LD_INT 15
13201: PUSH
13202: LD_INT 16
13204: PUSH
13205: LD_INT 22
13207: PUSH
13208: LD_INT 23
13210: PUSH
13211: LD_INT 25
13213: PUSH
13214: LD_INT 26
13216: PUSH
13217: LD_INT 36
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: PUSH
13236: LD_INT 101
13238: PUSH
13239: LD_INT 102
13241: PUSH
13242: LD_INT 105
13244: PUSH
13245: LD_INT 106
13247: PUSH
13248: LD_INT 108
13250: PUSH
13251: LD_INT 109
13253: PUSH
13254: LD_INT 112
13256: PUSH
13257: LD_INT 116
13259: PUSH
13260: LD_INT 117
13262: PUSH
13263: LD_INT 118
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: ST_TO_ADDR
13282: GO 15945
13284: LD_INT 6
13286: DOUBLE
13287: EQUAL
13288: IFTRUE 13292
13290: GO 13424
13292: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13293: LD_ADDR_VAR 0 2
13297: PUSH
13298: LD_INT 2
13300: PUSH
13301: LD_INT 4
13303: PUSH
13304: LD_INT 5
13306: PUSH
13307: LD_INT 6
13309: PUSH
13310: LD_INT 8
13312: PUSH
13313: LD_INT 11
13315: PUSH
13316: LD_INT 12
13318: PUSH
13319: LD_INT 15
13321: PUSH
13322: LD_INT 16
13324: PUSH
13325: LD_INT 20
13327: PUSH
13328: LD_INT 21
13330: PUSH
13331: LD_INT 22
13333: PUSH
13334: LD_INT 23
13336: PUSH
13337: LD_INT 25
13339: PUSH
13340: LD_INT 26
13342: PUSH
13343: LD_INT 30
13345: PUSH
13346: LD_INT 31
13348: PUSH
13349: LD_INT 32
13351: PUSH
13352: LD_INT 36
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 101
13378: PUSH
13379: LD_INT 102
13381: PUSH
13382: LD_INT 105
13384: PUSH
13385: LD_INT 106
13387: PUSH
13388: LD_INT 108
13390: PUSH
13391: LD_INT 109
13393: PUSH
13394: LD_INT 112
13396: PUSH
13397: LD_INT 116
13399: PUSH
13400: LD_INT 117
13402: PUSH
13403: LD_INT 118
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: ST_TO_ADDR
13422: GO 15945
13424: LD_INT 7
13426: DOUBLE
13427: EQUAL
13428: IFTRUE 13432
13430: GO 13544
13432: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13433: LD_ADDR_VAR 0 2
13437: PUSH
13438: LD_INT 2
13440: PUSH
13441: LD_INT 4
13443: PUSH
13444: LD_INT 5
13446: PUSH
13447: LD_INT 7
13449: PUSH
13450: LD_INT 11
13452: PUSH
13453: LD_INT 12
13455: PUSH
13456: LD_INT 15
13458: PUSH
13459: LD_INT 16
13461: PUSH
13462: LD_INT 20
13464: PUSH
13465: LD_INT 21
13467: PUSH
13468: LD_INT 22
13470: PUSH
13471: LD_INT 23
13473: PUSH
13474: LD_INT 25
13476: PUSH
13477: LD_INT 26
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: PUSH
13496: LD_INT 101
13498: PUSH
13499: LD_INT 102
13501: PUSH
13502: LD_INT 103
13504: PUSH
13505: LD_INT 105
13507: PUSH
13508: LD_INT 106
13510: PUSH
13511: LD_INT 108
13513: PUSH
13514: LD_INT 112
13516: PUSH
13517: LD_INT 116
13519: PUSH
13520: LD_INT 117
13522: PUSH
13523: LD_INT 118
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: ST_TO_ADDR
13542: GO 15945
13544: LD_INT 8
13546: DOUBLE
13547: EQUAL
13548: IFTRUE 13552
13550: GO 13692
13552: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13553: LD_ADDR_VAR 0 2
13557: PUSH
13558: LD_INT 2
13560: PUSH
13561: LD_INT 4
13563: PUSH
13564: LD_INT 5
13566: PUSH
13567: LD_INT 6
13569: PUSH
13570: LD_INT 7
13572: PUSH
13573: LD_INT 8
13575: PUSH
13576: LD_INT 11
13578: PUSH
13579: LD_INT 12
13581: PUSH
13582: LD_INT 15
13584: PUSH
13585: LD_INT 16
13587: PUSH
13588: LD_INT 20
13590: PUSH
13591: LD_INT 21
13593: PUSH
13594: LD_INT 22
13596: PUSH
13597: LD_INT 23
13599: PUSH
13600: LD_INT 25
13602: PUSH
13603: LD_INT 26
13605: PUSH
13606: LD_INT 30
13608: PUSH
13609: LD_INT 31
13611: PUSH
13612: LD_INT 32
13614: PUSH
13615: LD_INT 36
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: PUSH
13640: LD_INT 101
13642: PUSH
13643: LD_INT 102
13645: PUSH
13646: LD_INT 103
13648: PUSH
13649: LD_INT 105
13651: PUSH
13652: LD_INT 106
13654: PUSH
13655: LD_INT 108
13657: PUSH
13658: LD_INT 109
13660: PUSH
13661: LD_INT 112
13663: PUSH
13664: LD_INT 116
13666: PUSH
13667: LD_INT 117
13669: PUSH
13670: LD_INT 118
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: ST_TO_ADDR
13690: GO 15945
13692: LD_INT 9
13694: DOUBLE
13695: EQUAL
13696: IFTRUE 13700
13698: GO 13848
13700: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13701: LD_ADDR_VAR 0 2
13705: PUSH
13706: LD_INT 2
13708: PUSH
13709: LD_INT 4
13711: PUSH
13712: LD_INT 5
13714: PUSH
13715: LD_INT 6
13717: PUSH
13718: LD_INT 7
13720: PUSH
13721: LD_INT 8
13723: PUSH
13724: LD_INT 11
13726: PUSH
13727: LD_INT 12
13729: PUSH
13730: LD_INT 15
13732: PUSH
13733: LD_INT 16
13735: PUSH
13736: LD_INT 20
13738: PUSH
13739: LD_INT 21
13741: PUSH
13742: LD_INT 22
13744: PUSH
13745: LD_INT 23
13747: PUSH
13748: LD_INT 25
13750: PUSH
13751: LD_INT 26
13753: PUSH
13754: LD_INT 28
13756: PUSH
13757: LD_INT 30
13759: PUSH
13760: LD_INT 31
13762: PUSH
13763: LD_INT 32
13765: PUSH
13766: LD_INT 36
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 101
13794: PUSH
13795: LD_INT 102
13797: PUSH
13798: LD_INT 103
13800: PUSH
13801: LD_INT 105
13803: PUSH
13804: LD_INT 106
13806: PUSH
13807: LD_INT 108
13809: PUSH
13810: LD_INT 109
13812: PUSH
13813: LD_INT 112
13815: PUSH
13816: LD_INT 114
13818: PUSH
13819: LD_INT 116
13821: PUSH
13822: LD_INT 117
13824: PUSH
13825: LD_INT 118
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: ST_TO_ADDR
13846: GO 15945
13848: LD_INT 10
13850: DOUBLE
13851: EQUAL
13852: IFTRUE 13856
13854: GO 14052
13856: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13857: LD_ADDR_VAR 0 2
13861: PUSH
13862: LD_INT 2
13864: PUSH
13865: LD_INT 4
13867: PUSH
13868: LD_INT 5
13870: PUSH
13871: LD_INT 6
13873: PUSH
13874: LD_INT 7
13876: PUSH
13877: LD_INT 8
13879: PUSH
13880: LD_INT 9
13882: PUSH
13883: LD_INT 10
13885: PUSH
13886: LD_INT 11
13888: PUSH
13889: LD_INT 12
13891: PUSH
13892: LD_INT 13
13894: PUSH
13895: LD_INT 14
13897: PUSH
13898: LD_INT 15
13900: PUSH
13901: LD_INT 16
13903: PUSH
13904: LD_INT 17
13906: PUSH
13907: LD_INT 18
13909: PUSH
13910: LD_INT 19
13912: PUSH
13913: LD_INT 20
13915: PUSH
13916: LD_INT 21
13918: PUSH
13919: LD_INT 22
13921: PUSH
13922: LD_INT 23
13924: PUSH
13925: LD_INT 24
13927: PUSH
13928: LD_INT 25
13930: PUSH
13931: LD_INT 26
13933: PUSH
13934: LD_INT 28
13936: PUSH
13937: LD_INT 30
13939: PUSH
13940: LD_INT 31
13942: PUSH
13943: LD_INT 32
13945: PUSH
13946: LD_INT 36
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: PUSH
13980: LD_INT 101
13982: PUSH
13983: LD_INT 102
13985: PUSH
13986: LD_INT 103
13988: PUSH
13989: LD_INT 104
13991: PUSH
13992: LD_INT 105
13994: PUSH
13995: LD_INT 106
13997: PUSH
13998: LD_INT 107
14000: PUSH
14001: LD_INT 108
14003: PUSH
14004: LD_INT 109
14006: PUSH
14007: LD_INT 110
14009: PUSH
14010: LD_INT 111
14012: PUSH
14013: LD_INT 112
14015: PUSH
14016: LD_INT 114
14018: PUSH
14019: LD_INT 116
14021: PUSH
14022: LD_INT 117
14024: PUSH
14025: LD_INT 118
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: ST_TO_ADDR
14050: GO 15945
14052: LD_INT 11
14054: DOUBLE
14055: EQUAL
14056: IFTRUE 14060
14058: GO 14264
14060: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14061: LD_ADDR_VAR 0 2
14065: PUSH
14066: LD_INT 2
14068: PUSH
14069: LD_INT 3
14071: PUSH
14072: LD_INT 4
14074: PUSH
14075: LD_INT 5
14077: PUSH
14078: LD_INT 6
14080: PUSH
14081: LD_INT 7
14083: PUSH
14084: LD_INT 8
14086: PUSH
14087: LD_INT 9
14089: PUSH
14090: LD_INT 10
14092: PUSH
14093: LD_INT 11
14095: PUSH
14096: LD_INT 12
14098: PUSH
14099: LD_INT 13
14101: PUSH
14102: LD_INT 14
14104: PUSH
14105: LD_INT 15
14107: PUSH
14108: LD_INT 16
14110: PUSH
14111: LD_INT 17
14113: PUSH
14114: LD_INT 18
14116: PUSH
14117: LD_INT 19
14119: PUSH
14120: LD_INT 20
14122: PUSH
14123: LD_INT 21
14125: PUSH
14126: LD_INT 22
14128: PUSH
14129: LD_INT 23
14131: PUSH
14132: LD_INT 24
14134: PUSH
14135: LD_INT 25
14137: PUSH
14138: LD_INT 26
14140: PUSH
14141: LD_INT 28
14143: PUSH
14144: LD_INT 30
14146: PUSH
14147: LD_INT 31
14149: PUSH
14150: LD_INT 32
14152: PUSH
14153: LD_INT 34
14155: PUSH
14156: LD_INT 36
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 101
14194: PUSH
14195: LD_INT 102
14197: PUSH
14198: LD_INT 103
14200: PUSH
14201: LD_INT 104
14203: PUSH
14204: LD_INT 105
14206: PUSH
14207: LD_INT 106
14209: PUSH
14210: LD_INT 107
14212: PUSH
14213: LD_INT 108
14215: PUSH
14216: LD_INT 109
14218: PUSH
14219: LD_INT 110
14221: PUSH
14222: LD_INT 111
14224: PUSH
14225: LD_INT 112
14227: PUSH
14228: LD_INT 114
14230: PUSH
14231: LD_INT 116
14233: PUSH
14234: LD_INT 117
14236: PUSH
14237: LD_INT 118
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: ST_TO_ADDR
14262: GO 15945
14264: LD_INT 12
14266: DOUBLE
14267: EQUAL
14268: IFTRUE 14272
14270: GO 14492
14272: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14273: LD_ADDR_VAR 0 2
14277: PUSH
14278: LD_INT 1
14280: PUSH
14281: LD_INT 2
14283: PUSH
14284: LD_INT 3
14286: PUSH
14287: LD_INT 4
14289: PUSH
14290: LD_INT 5
14292: PUSH
14293: LD_INT 6
14295: PUSH
14296: LD_INT 7
14298: PUSH
14299: LD_INT 8
14301: PUSH
14302: LD_INT 9
14304: PUSH
14305: LD_INT 10
14307: PUSH
14308: LD_INT 11
14310: PUSH
14311: LD_INT 12
14313: PUSH
14314: LD_INT 13
14316: PUSH
14317: LD_INT 14
14319: PUSH
14320: LD_INT 15
14322: PUSH
14323: LD_INT 16
14325: PUSH
14326: LD_INT 17
14328: PUSH
14329: LD_INT 18
14331: PUSH
14332: LD_INT 19
14334: PUSH
14335: LD_INT 20
14337: PUSH
14338: LD_INT 21
14340: PUSH
14341: LD_INT 22
14343: PUSH
14344: LD_INT 23
14346: PUSH
14347: LD_INT 24
14349: PUSH
14350: LD_INT 25
14352: PUSH
14353: LD_INT 26
14355: PUSH
14356: LD_INT 27
14358: PUSH
14359: LD_INT 28
14361: PUSH
14362: LD_INT 30
14364: PUSH
14365: LD_INT 31
14367: PUSH
14368: LD_INT 32
14370: PUSH
14371: LD_INT 33
14373: PUSH
14374: LD_INT 34
14376: PUSH
14377: LD_INT 36
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 101
14418: PUSH
14419: LD_INT 102
14421: PUSH
14422: LD_INT 103
14424: PUSH
14425: LD_INT 104
14427: PUSH
14428: LD_INT 105
14430: PUSH
14431: LD_INT 106
14433: PUSH
14434: LD_INT 107
14436: PUSH
14437: LD_INT 108
14439: PUSH
14440: LD_INT 109
14442: PUSH
14443: LD_INT 110
14445: PUSH
14446: LD_INT 111
14448: PUSH
14449: LD_INT 112
14451: PUSH
14452: LD_INT 113
14454: PUSH
14455: LD_INT 114
14457: PUSH
14458: LD_INT 116
14460: PUSH
14461: LD_INT 117
14463: PUSH
14464: LD_INT 118
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: ST_TO_ADDR
14490: GO 15945
14492: LD_INT 13
14494: DOUBLE
14495: EQUAL
14496: IFTRUE 14500
14498: GO 14708
14500: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14501: LD_ADDR_VAR 0 2
14505: PUSH
14506: LD_INT 1
14508: PUSH
14509: LD_INT 2
14511: PUSH
14512: LD_INT 3
14514: PUSH
14515: LD_INT 4
14517: PUSH
14518: LD_INT 5
14520: PUSH
14521: LD_INT 8
14523: PUSH
14524: LD_INT 9
14526: PUSH
14527: LD_INT 10
14529: PUSH
14530: LD_INT 11
14532: PUSH
14533: LD_INT 12
14535: PUSH
14536: LD_INT 14
14538: PUSH
14539: LD_INT 15
14541: PUSH
14542: LD_INT 16
14544: PUSH
14545: LD_INT 17
14547: PUSH
14548: LD_INT 18
14550: PUSH
14551: LD_INT 19
14553: PUSH
14554: LD_INT 20
14556: PUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 22
14562: PUSH
14563: LD_INT 23
14565: PUSH
14566: LD_INT 24
14568: PUSH
14569: LD_INT 25
14571: PUSH
14572: LD_INT 26
14574: PUSH
14575: LD_INT 27
14577: PUSH
14578: LD_INT 28
14580: PUSH
14581: LD_INT 30
14583: PUSH
14584: LD_INT 31
14586: PUSH
14587: LD_INT 32
14589: PUSH
14590: LD_INT 33
14592: PUSH
14593: LD_INT 34
14595: PUSH
14596: LD_INT 36
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 101
14634: PUSH
14635: LD_INT 102
14637: PUSH
14638: LD_INT 103
14640: PUSH
14641: LD_INT 104
14643: PUSH
14644: LD_INT 105
14646: PUSH
14647: LD_INT 106
14649: PUSH
14650: LD_INT 107
14652: PUSH
14653: LD_INT 108
14655: PUSH
14656: LD_INT 109
14658: PUSH
14659: LD_INT 110
14661: PUSH
14662: LD_INT 111
14664: PUSH
14665: LD_INT 112
14667: PUSH
14668: LD_INT 113
14670: PUSH
14671: LD_INT 114
14673: PUSH
14674: LD_INT 116
14676: PUSH
14677: LD_INT 117
14679: PUSH
14680: LD_INT 118
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: ST_TO_ADDR
14706: GO 15945
14708: LD_INT 14
14710: DOUBLE
14711: EQUAL
14712: IFTRUE 14716
14714: GO 14940
14716: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14717: LD_ADDR_VAR 0 2
14721: PUSH
14722: LD_INT 1
14724: PUSH
14725: LD_INT 2
14727: PUSH
14728: LD_INT 3
14730: PUSH
14731: LD_INT 4
14733: PUSH
14734: LD_INT 5
14736: PUSH
14737: LD_INT 6
14739: PUSH
14740: LD_INT 7
14742: PUSH
14743: LD_INT 8
14745: PUSH
14746: LD_INT 9
14748: PUSH
14749: LD_INT 10
14751: PUSH
14752: LD_INT 11
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: LD_INT 13
14760: PUSH
14761: LD_INT 14
14763: PUSH
14764: LD_INT 15
14766: PUSH
14767: LD_INT 16
14769: PUSH
14770: LD_INT 17
14772: PUSH
14773: LD_INT 18
14775: PUSH
14776: LD_INT 19
14778: PUSH
14779: LD_INT 20
14781: PUSH
14782: LD_INT 21
14784: PUSH
14785: LD_INT 22
14787: PUSH
14788: LD_INT 23
14790: PUSH
14791: LD_INT 24
14793: PUSH
14794: LD_INT 25
14796: PUSH
14797: LD_INT 26
14799: PUSH
14800: LD_INT 27
14802: PUSH
14803: LD_INT 28
14805: PUSH
14806: LD_INT 29
14808: PUSH
14809: LD_INT 30
14811: PUSH
14812: LD_INT 31
14814: PUSH
14815: LD_INT 32
14817: PUSH
14818: LD_INT 33
14820: PUSH
14821: LD_INT 34
14823: PUSH
14824: LD_INT 36
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: PUSH
14864: LD_INT 101
14866: PUSH
14867: LD_INT 102
14869: PUSH
14870: LD_INT 103
14872: PUSH
14873: LD_INT 104
14875: PUSH
14876: LD_INT 105
14878: PUSH
14879: LD_INT 106
14881: PUSH
14882: LD_INT 107
14884: PUSH
14885: LD_INT 108
14887: PUSH
14888: LD_INT 109
14890: PUSH
14891: LD_INT 110
14893: PUSH
14894: LD_INT 111
14896: PUSH
14897: LD_INT 112
14899: PUSH
14900: LD_INT 113
14902: PUSH
14903: LD_INT 114
14905: PUSH
14906: LD_INT 116
14908: PUSH
14909: LD_INT 117
14911: PUSH
14912: LD_INT 118
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: ST_TO_ADDR
14938: GO 15945
14940: LD_INT 15
14942: DOUBLE
14943: EQUAL
14944: IFTRUE 14948
14946: GO 15172
14948: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14949: LD_ADDR_VAR 0 2
14953: PUSH
14954: LD_INT 1
14956: PUSH
14957: LD_INT 2
14959: PUSH
14960: LD_INT 3
14962: PUSH
14963: LD_INT 4
14965: PUSH
14966: LD_INT 5
14968: PUSH
14969: LD_INT 6
14971: PUSH
14972: LD_INT 7
14974: PUSH
14975: LD_INT 8
14977: PUSH
14978: LD_INT 9
14980: PUSH
14981: LD_INT 10
14983: PUSH
14984: LD_INT 11
14986: PUSH
14987: LD_INT 12
14989: PUSH
14990: LD_INT 13
14992: PUSH
14993: LD_INT 14
14995: PUSH
14996: LD_INT 15
14998: PUSH
14999: LD_INT 16
15001: PUSH
15002: LD_INT 17
15004: PUSH
15005: LD_INT 18
15007: PUSH
15008: LD_INT 19
15010: PUSH
15011: LD_INT 20
15013: PUSH
15014: LD_INT 21
15016: PUSH
15017: LD_INT 22
15019: PUSH
15020: LD_INT 23
15022: PUSH
15023: LD_INT 24
15025: PUSH
15026: LD_INT 25
15028: PUSH
15029: LD_INT 26
15031: PUSH
15032: LD_INT 27
15034: PUSH
15035: LD_INT 28
15037: PUSH
15038: LD_INT 29
15040: PUSH
15041: LD_INT 30
15043: PUSH
15044: LD_INT 31
15046: PUSH
15047: LD_INT 32
15049: PUSH
15050: LD_INT 33
15052: PUSH
15053: LD_INT 34
15055: PUSH
15056: LD_INT 36
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: PUSH
15096: LD_INT 101
15098: PUSH
15099: LD_INT 102
15101: PUSH
15102: LD_INT 103
15104: PUSH
15105: LD_INT 104
15107: PUSH
15108: LD_INT 105
15110: PUSH
15111: LD_INT 106
15113: PUSH
15114: LD_INT 107
15116: PUSH
15117: LD_INT 108
15119: PUSH
15120: LD_INT 109
15122: PUSH
15123: LD_INT 110
15125: PUSH
15126: LD_INT 111
15128: PUSH
15129: LD_INT 112
15131: PUSH
15132: LD_INT 113
15134: PUSH
15135: LD_INT 114
15137: PUSH
15138: LD_INT 116
15140: PUSH
15141: LD_INT 117
15143: PUSH
15144: LD_INT 118
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: ST_TO_ADDR
15170: GO 15945
15172: LD_INT 16
15174: DOUBLE
15175: EQUAL
15176: IFTRUE 15180
15178: GO 15316
15180: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15181: LD_ADDR_VAR 0 2
15185: PUSH
15186: LD_INT 2
15188: PUSH
15189: LD_INT 4
15191: PUSH
15192: LD_INT 5
15194: PUSH
15195: LD_INT 7
15197: PUSH
15198: LD_INT 11
15200: PUSH
15201: LD_INT 12
15203: PUSH
15204: LD_INT 15
15206: PUSH
15207: LD_INT 16
15209: PUSH
15210: LD_INT 20
15212: PUSH
15213: LD_INT 21
15215: PUSH
15216: LD_INT 22
15218: PUSH
15219: LD_INT 23
15221: PUSH
15222: LD_INT 25
15224: PUSH
15225: LD_INT 26
15227: PUSH
15228: LD_INT 30
15230: PUSH
15231: LD_INT 31
15233: PUSH
15234: LD_INT 32
15236: PUSH
15237: LD_INT 33
15239: PUSH
15240: LD_INT 34
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 101
15266: PUSH
15267: LD_INT 102
15269: PUSH
15270: LD_INT 103
15272: PUSH
15273: LD_INT 106
15275: PUSH
15276: LD_INT 108
15278: PUSH
15279: LD_INT 112
15281: PUSH
15282: LD_INT 113
15284: PUSH
15285: LD_INT 114
15287: PUSH
15288: LD_INT 116
15290: PUSH
15291: LD_INT 117
15293: PUSH
15294: LD_INT 118
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: ST_TO_ADDR
15314: GO 15945
15316: LD_INT 17
15318: DOUBLE
15319: EQUAL
15320: IFTRUE 15324
15322: GO 15548
15324: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15325: LD_ADDR_VAR 0 2
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: LD_INT 2
15335: PUSH
15336: LD_INT 3
15338: PUSH
15339: LD_INT 4
15341: PUSH
15342: LD_INT 5
15344: PUSH
15345: LD_INT 6
15347: PUSH
15348: LD_INT 7
15350: PUSH
15351: LD_INT 8
15353: PUSH
15354: LD_INT 9
15356: PUSH
15357: LD_INT 10
15359: PUSH
15360: LD_INT 11
15362: PUSH
15363: LD_INT 12
15365: PUSH
15366: LD_INT 13
15368: PUSH
15369: LD_INT 14
15371: PUSH
15372: LD_INT 15
15374: PUSH
15375: LD_INT 16
15377: PUSH
15378: LD_INT 17
15380: PUSH
15381: LD_INT 18
15383: PUSH
15384: LD_INT 19
15386: PUSH
15387: LD_INT 20
15389: PUSH
15390: LD_INT 21
15392: PUSH
15393: LD_INT 22
15395: PUSH
15396: LD_INT 23
15398: PUSH
15399: LD_INT 24
15401: PUSH
15402: LD_INT 25
15404: PUSH
15405: LD_INT 26
15407: PUSH
15408: LD_INT 27
15410: PUSH
15411: LD_INT 28
15413: PUSH
15414: LD_INT 29
15416: PUSH
15417: LD_INT 30
15419: PUSH
15420: LD_INT 31
15422: PUSH
15423: LD_INT 32
15425: PUSH
15426: LD_INT 33
15428: PUSH
15429: LD_INT 34
15431: PUSH
15432: LD_INT 36
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: PUSH
15472: LD_INT 101
15474: PUSH
15475: LD_INT 102
15477: PUSH
15478: LD_INT 103
15480: PUSH
15481: LD_INT 104
15483: PUSH
15484: LD_INT 105
15486: PUSH
15487: LD_INT 106
15489: PUSH
15490: LD_INT 107
15492: PUSH
15493: LD_INT 108
15495: PUSH
15496: LD_INT 109
15498: PUSH
15499: LD_INT 110
15501: PUSH
15502: LD_INT 111
15504: PUSH
15505: LD_INT 112
15507: PUSH
15508: LD_INT 113
15510: PUSH
15511: LD_INT 114
15513: PUSH
15514: LD_INT 116
15516: PUSH
15517: LD_INT 117
15519: PUSH
15520: LD_INT 118
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: ST_TO_ADDR
15546: GO 15945
15548: LD_INT 18
15550: DOUBLE
15551: EQUAL
15552: IFTRUE 15556
15554: GO 15704
15556: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15557: LD_ADDR_VAR 0 2
15561: PUSH
15562: LD_INT 2
15564: PUSH
15565: LD_INT 4
15567: PUSH
15568: LD_INT 5
15570: PUSH
15571: LD_INT 7
15573: PUSH
15574: LD_INT 11
15576: PUSH
15577: LD_INT 12
15579: PUSH
15580: LD_INT 15
15582: PUSH
15583: LD_INT 16
15585: PUSH
15586: LD_INT 20
15588: PUSH
15589: LD_INT 21
15591: PUSH
15592: LD_INT 22
15594: PUSH
15595: LD_INT 23
15597: PUSH
15598: LD_INT 25
15600: PUSH
15601: LD_INT 26
15603: PUSH
15604: LD_INT 30
15606: PUSH
15607: LD_INT 31
15609: PUSH
15610: LD_INT 32
15612: PUSH
15613: LD_INT 33
15615: PUSH
15616: LD_INT 34
15618: PUSH
15619: LD_INT 35
15621: PUSH
15622: LD_INT 36
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 101
15650: PUSH
15651: LD_INT 102
15653: PUSH
15654: LD_INT 103
15656: PUSH
15657: LD_INT 106
15659: PUSH
15660: LD_INT 108
15662: PUSH
15663: LD_INT 112
15665: PUSH
15666: LD_INT 113
15668: PUSH
15669: LD_INT 114
15671: PUSH
15672: LD_INT 115
15674: PUSH
15675: LD_INT 116
15677: PUSH
15678: LD_INT 117
15680: PUSH
15681: LD_INT 118
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: ST_TO_ADDR
15702: GO 15945
15704: LD_INT 19
15706: DOUBLE
15707: EQUAL
15708: IFTRUE 15712
15710: GO 15944
15712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15713: LD_ADDR_VAR 0 2
15717: PUSH
15718: LD_INT 1
15720: PUSH
15721: LD_INT 2
15723: PUSH
15724: LD_INT 3
15726: PUSH
15727: LD_INT 4
15729: PUSH
15730: LD_INT 5
15732: PUSH
15733: LD_INT 6
15735: PUSH
15736: LD_INT 7
15738: PUSH
15739: LD_INT 8
15741: PUSH
15742: LD_INT 9
15744: PUSH
15745: LD_INT 10
15747: PUSH
15748: LD_INT 11
15750: PUSH
15751: LD_INT 12
15753: PUSH
15754: LD_INT 13
15756: PUSH
15757: LD_INT 14
15759: PUSH
15760: LD_INT 15
15762: PUSH
15763: LD_INT 16
15765: PUSH
15766: LD_INT 17
15768: PUSH
15769: LD_INT 18
15771: PUSH
15772: LD_INT 19
15774: PUSH
15775: LD_INT 20
15777: PUSH
15778: LD_INT 21
15780: PUSH
15781: LD_INT 22
15783: PUSH
15784: LD_INT 23
15786: PUSH
15787: LD_INT 24
15789: PUSH
15790: LD_INT 25
15792: PUSH
15793: LD_INT 26
15795: PUSH
15796: LD_INT 27
15798: PUSH
15799: LD_INT 28
15801: PUSH
15802: LD_INT 29
15804: PUSH
15805: LD_INT 30
15807: PUSH
15808: LD_INT 31
15810: PUSH
15811: LD_INT 32
15813: PUSH
15814: LD_INT 33
15816: PUSH
15817: LD_INT 34
15819: PUSH
15820: LD_INT 35
15822: PUSH
15823: LD_INT 36
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 101
15866: PUSH
15867: LD_INT 102
15869: PUSH
15870: LD_INT 103
15872: PUSH
15873: LD_INT 104
15875: PUSH
15876: LD_INT 105
15878: PUSH
15879: LD_INT 106
15881: PUSH
15882: LD_INT 107
15884: PUSH
15885: LD_INT 108
15887: PUSH
15888: LD_INT 109
15890: PUSH
15891: LD_INT 110
15893: PUSH
15894: LD_INT 111
15896: PUSH
15897: LD_INT 112
15899: PUSH
15900: LD_INT 113
15902: PUSH
15903: LD_INT 114
15905: PUSH
15906: LD_INT 115
15908: PUSH
15909: LD_INT 116
15911: PUSH
15912: LD_INT 117
15914: PUSH
15915: LD_INT 118
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: ST_TO_ADDR
15942: GO 15945
15944: POP
// end else
15945: GO 16176
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15947: LD_ADDR_VAR 0 2
15951: PUSH
15952: LD_INT 1
15954: PUSH
15955: LD_INT 2
15957: PUSH
15958: LD_INT 3
15960: PUSH
15961: LD_INT 4
15963: PUSH
15964: LD_INT 5
15966: PUSH
15967: LD_INT 6
15969: PUSH
15970: LD_INT 7
15972: PUSH
15973: LD_INT 8
15975: PUSH
15976: LD_INT 9
15978: PUSH
15979: LD_INT 10
15981: PUSH
15982: LD_INT 11
15984: PUSH
15985: LD_INT 12
15987: PUSH
15988: LD_INT 13
15990: PUSH
15991: LD_INT 14
15993: PUSH
15994: LD_INT 15
15996: PUSH
15997: LD_INT 16
15999: PUSH
16000: LD_INT 17
16002: PUSH
16003: LD_INT 18
16005: PUSH
16006: LD_INT 19
16008: PUSH
16009: LD_INT 20
16011: PUSH
16012: LD_INT 21
16014: PUSH
16015: LD_INT 22
16017: PUSH
16018: LD_INT 23
16020: PUSH
16021: LD_INT 24
16023: PUSH
16024: LD_INT 25
16026: PUSH
16027: LD_INT 26
16029: PUSH
16030: LD_INT 27
16032: PUSH
16033: LD_INT 28
16035: PUSH
16036: LD_INT 29
16038: PUSH
16039: LD_INT 30
16041: PUSH
16042: LD_INT 31
16044: PUSH
16045: LD_INT 32
16047: PUSH
16048: LD_INT 33
16050: PUSH
16051: LD_INT 34
16053: PUSH
16054: LD_INT 35
16056: PUSH
16057: LD_INT 36
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 101
16100: PUSH
16101: LD_INT 102
16103: PUSH
16104: LD_INT 103
16106: PUSH
16107: LD_INT 104
16109: PUSH
16110: LD_INT 105
16112: PUSH
16113: LD_INT 106
16115: PUSH
16116: LD_INT 107
16118: PUSH
16119: LD_INT 108
16121: PUSH
16122: LD_INT 109
16124: PUSH
16125: LD_INT 110
16127: PUSH
16128: LD_INT 111
16130: PUSH
16131: LD_INT 112
16133: PUSH
16134: LD_INT 113
16136: PUSH
16137: LD_INT 114
16139: PUSH
16140: LD_INT 115
16142: PUSH
16143: LD_INT 116
16145: PUSH
16146: LD_INT 117
16148: PUSH
16149: LD_INT 118
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: ST_TO_ADDR
// if result then
16176: LD_VAR 0 2
16180: IFFALSE 16966
// begin normal :=  ;
16182: LD_ADDR_VAR 0 5
16186: PUSH
16187: LD_STRING 
16189: ST_TO_ADDR
// hardcore :=  ;
16190: LD_ADDR_VAR 0 6
16194: PUSH
16195: LD_STRING 
16197: ST_TO_ADDR
// active :=  ;
16198: LD_ADDR_VAR 0 7
16202: PUSH
16203: LD_STRING 
16205: ST_TO_ADDR
// for i = 1 to normalCounter do
16206: LD_ADDR_VAR 0 8
16210: PUSH
16211: DOUBLE
16212: LD_INT 1
16214: DEC
16215: ST_TO_ADDR
16216: LD_EXP 40
16220: PUSH
16221: FOR_TO
16222: IFFALSE 16323
// begin tmp := 0 ;
16224: LD_ADDR_VAR 0 3
16228: PUSH
16229: LD_STRING 0
16231: ST_TO_ADDR
// if result [ 1 ] then
16232: LD_VAR 0 2
16236: PUSH
16237: LD_INT 1
16239: ARRAY
16240: IFFALSE 16305
// if result [ 1 ] [ 1 ] = i then
16242: LD_VAR 0 2
16246: PUSH
16247: LD_INT 1
16249: ARRAY
16250: PUSH
16251: LD_INT 1
16253: ARRAY
16254: PUSH
16255: LD_VAR 0 8
16259: EQUAL
16260: IFFALSE 16305
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16262: LD_ADDR_VAR 0 2
16266: PUSH
16267: LD_VAR 0 2
16271: PPUSH
16272: LD_INT 1
16274: PPUSH
16275: LD_VAR 0 2
16279: PUSH
16280: LD_INT 1
16282: ARRAY
16283: PPUSH
16284: LD_INT 1
16286: PPUSH
16287: CALL_OW 3
16291: PPUSH
16292: CALL_OW 1
16296: ST_TO_ADDR
// tmp := 1 ;
16297: LD_ADDR_VAR 0 3
16301: PUSH
16302: LD_STRING 1
16304: ST_TO_ADDR
// end ; normal := normal & tmp ;
16305: LD_ADDR_VAR 0 5
16309: PUSH
16310: LD_VAR 0 5
16314: PUSH
16315: LD_VAR 0 3
16319: STR
16320: ST_TO_ADDR
// end ;
16321: GO 16221
16323: POP
16324: POP
// for i = 1 to hardcoreCounter do
16325: LD_ADDR_VAR 0 8
16329: PUSH
16330: DOUBLE
16331: LD_INT 1
16333: DEC
16334: ST_TO_ADDR
16335: LD_EXP 41
16339: PUSH
16340: FOR_TO
16341: IFFALSE 16446
// begin tmp := 0 ;
16343: LD_ADDR_VAR 0 3
16347: PUSH
16348: LD_STRING 0
16350: ST_TO_ADDR
// if result [ 2 ] then
16351: LD_VAR 0 2
16355: PUSH
16356: LD_INT 2
16358: ARRAY
16359: IFFALSE 16428
// if result [ 2 ] [ 1 ] = 100 + i then
16361: LD_VAR 0 2
16365: PUSH
16366: LD_INT 2
16368: ARRAY
16369: PUSH
16370: LD_INT 1
16372: ARRAY
16373: PUSH
16374: LD_INT 100
16376: PUSH
16377: LD_VAR 0 8
16381: PLUS
16382: EQUAL
16383: IFFALSE 16428
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16385: LD_ADDR_VAR 0 2
16389: PUSH
16390: LD_VAR 0 2
16394: PPUSH
16395: LD_INT 2
16397: PPUSH
16398: LD_VAR 0 2
16402: PUSH
16403: LD_INT 2
16405: ARRAY
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 3
16414: PPUSH
16415: CALL_OW 1
16419: ST_TO_ADDR
// tmp := 1 ;
16420: LD_ADDR_VAR 0 3
16424: PUSH
16425: LD_STRING 1
16427: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16428: LD_ADDR_VAR 0 6
16432: PUSH
16433: LD_VAR 0 6
16437: PUSH
16438: LD_VAR 0 3
16442: STR
16443: ST_TO_ADDR
// end ;
16444: GO 16340
16446: POP
16447: POP
// if isGameLoad then
16448: LD_VAR 0 1
16452: IFFALSE 16927
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16454: LD_ADDR_VAR 0 4
16458: PUSH
16459: LD_EXP 44
16463: PUSH
16464: LD_EXP 43
16468: PUSH
16469: LD_EXP 45
16473: PUSH
16474: LD_EXP 42
16478: PUSH
16479: LD_EXP 46
16483: PUSH
16484: LD_EXP 47
16488: PUSH
16489: LD_EXP 48
16493: PUSH
16494: LD_EXP 49
16498: PUSH
16499: LD_EXP 50
16503: PUSH
16504: LD_EXP 51
16508: PUSH
16509: LD_EXP 52
16513: PUSH
16514: LD_EXP 53
16518: PUSH
16519: LD_EXP 54
16523: PUSH
16524: LD_EXP 55
16528: PUSH
16529: LD_EXP 63
16533: PUSH
16534: LD_EXP 64
16538: PUSH
16539: LD_EXP 65
16543: PUSH
16544: LD_EXP 66
16548: PUSH
16549: LD_EXP 68
16553: PUSH
16554: LD_EXP 69
16558: PUSH
16559: LD_EXP 70
16563: PUSH
16564: LD_EXP 73
16568: PUSH
16569: LD_EXP 75
16573: PUSH
16574: LD_EXP 76
16578: PUSH
16579: LD_EXP 77
16583: PUSH
16584: LD_EXP 79
16588: PUSH
16589: LD_EXP 80
16593: PUSH
16594: LD_EXP 83
16598: PUSH
16599: LD_EXP 84
16603: PUSH
16604: LD_EXP 85
16608: PUSH
16609: LD_EXP 86
16613: PUSH
16614: LD_EXP 87
16618: PUSH
16619: LD_EXP 88
16623: PUSH
16624: LD_EXP 89
16628: PUSH
16629: LD_EXP 90
16633: PUSH
16634: LD_EXP 91
16638: PUSH
16639: LD_EXP 56
16643: PUSH
16644: LD_EXP 57
16648: PUSH
16649: LD_EXP 60
16653: PUSH
16654: LD_EXP 61
16658: PUSH
16659: LD_EXP 62
16663: PUSH
16664: LD_EXP 58
16668: PUSH
16669: LD_EXP 59
16673: PUSH
16674: LD_EXP 67
16678: PUSH
16679: LD_EXP 71
16683: PUSH
16684: LD_EXP 72
16688: PUSH
16689: LD_EXP 74
16693: PUSH
16694: LD_EXP 78
16698: PUSH
16699: LD_EXP 81
16703: PUSH
16704: LD_EXP 82
16708: PUSH
16709: LD_EXP 92
16713: PUSH
16714: LD_EXP 93
16718: PUSH
16719: LD_EXP 94
16723: PUSH
16724: LD_EXP 95
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: ST_TO_ADDR
// tmp :=  ;
16785: LD_ADDR_VAR 0 3
16789: PUSH
16790: LD_STRING 
16792: ST_TO_ADDR
// for i = 1 to normalCounter do
16793: LD_ADDR_VAR 0 8
16797: PUSH
16798: DOUBLE
16799: LD_INT 1
16801: DEC
16802: ST_TO_ADDR
16803: LD_EXP 40
16807: PUSH
16808: FOR_TO
16809: IFFALSE 16845
// begin if flags [ i ] then
16811: LD_VAR 0 4
16815: PUSH
16816: LD_VAR 0 8
16820: ARRAY
16821: IFFALSE 16843
// tmp := tmp & i & ; ;
16823: LD_ADDR_VAR 0 3
16827: PUSH
16828: LD_VAR 0 3
16832: PUSH
16833: LD_VAR 0 8
16837: STR
16838: PUSH
16839: LD_STRING ;
16841: STR
16842: ST_TO_ADDR
// end ;
16843: GO 16808
16845: POP
16846: POP
// for i = 1 to hardcoreCounter do
16847: LD_ADDR_VAR 0 8
16851: PUSH
16852: DOUBLE
16853: LD_INT 1
16855: DEC
16856: ST_TO_ADDR
16857: LD_EXP 41
16861: PUSH
16862: FOR_TO
16863: IFFALSE 16909
// begin if flags [ normalCounter + i ] then
16865: LD_VAR 0 4
16869: PUSH
16870: LD_EXP 40
16874: PUSH
16875: LD_VAR 0 8
16879: PLUS
16880: ARRAY
16881: IFFALSE 16907
// tmp := tmp & ( 100 + i ) & ; ;
16883: LD_ADDR_VAR 0 3
16887: PUSH
16888: LD_VAR 0 3
16892: PUSH
16893: LD_INT 100
16895: PUSH
16896: LD_VAR 0 8
16900: PLUS
16901: STR
16902: PUSH
16903: LD_STRING ;
16905: STR
16906: ST_TO_ADDR
// end ;
16907: GO 16862
16909: POP
16910: POP
// if tmp then
16911: LD_VAR 0 3
16915: IFFALSE 16927
// active := tmp ;
16917: LD_ADDR_VAR 0 7
16921: PUSH
16922: LD_VAR 0 3
16926: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16927: LD_STRING getStreamItemsFromMission("
16929: PUSH
16930: LD_VAR 0 5
16934: STR
16935: PUSH
16936: LD_STRING ","
16938: STR
16939: PUSH
16940: LD_VAR 0 6
16944: STR
16945: PUSH
16946: LD_STRING ","
16948: STR
16949: PUSH
16950: LD_VAR 0 7
16954: STR
16955: PUSH
16956: LD_STRING ")
16958: STR
16959: PPUSH
16960: CALL_OW 559
// end else
16964: GO 16973
// ToLua ( getStreamItemsFromMission("","","") ) ;
16966: LD_STRING getStreamItemsFromMission("","","")
16968: PPUSH
16969: CALL_OW 559
// end ;
16973: LD_VAR 0 2
16977: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16978: LD_EXP 39
16982: PUSH
16983: LD_EXP 44
16987: AND
16988: IFFALSE 17112
16990: GO 16992
16992: DISABLE
16993: LD_INT 0
16995: PPUSH
16996: PPUSH
// begin enable ;
16997: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16998: LD_ADDR_VAR 0 2
17002: PUSH
17003: LD_INT 22
17005: PUSH
17006: LD_OWVAR 2
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 2
17017: PUSH
17018: LD_INT 34
17020: PUSH
17021: LD_INT 7
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 34
17030: PUSH
17031: LD_INT 45
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 34
17040: PUSH
17041: LD_INT 28
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 34
17050: PUSH
17051: LD_INT 47
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PPUSH
17069: CALL_OW 69
17073: ST_TO_ADDR
// if not tmp then
17074: LD_VAR 0 2
17078: NOT
17079: IFFALSE 17083
// exit ;
17081: GO 17112
// for i in tmp do
17083: LD_ADDR_VAR 0 1
17087: PUSH
17088: LD_VAR 0 2
17092: PUSH
17093: FOR_IN
17094: IFFALSE 17110
// begin SetLives ( i , 0 ) ;
17096: LD_VAR 0 1
17100: PPUSH
17101: LD_INT 0
17103: PPUSH
17104: CALL_OW 234
// end ;
17108: GO 17093
17110: POP
17111: POP
// end ;
17112: PPOPN 2
17114: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17115: LD_EXP 39
17119: PUSH
17120: LD_EXP 45
17124: AND
17125: IFFALSE 17209
17127: GO 17129
17129: DISABLE
17130: LD_INT 0
17132: PPUSH
17133: PPUSH
// begin enable ;
17134: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17135: LD_ADDR_VAR 0 2
17139: PUSH
17140: LD_INT 22
17142: PUSH
17143: LD_OWVAR 2
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 32
17154: PUSH
17155: LD_INT 3
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PPUSH
17166: CALL_OW 69
17170: ST_TO_ADDR
// if not tmp then
17171: LD_VAR 0 2
17175: NOT
17176: IFFALSE 17180
// exit ;
17178: GO 17209
// for i in tmp do
17180: LD_ADDR_VAR 0 1
17184: PUSH
17185: LD_VAR 0 2
17189: PUSH
17190: FOR_IN
17191: IFFALSE 17207
// begin SetLives ( i , 0 ) ;
17193: LD_VAR 0 1
17197: PPUSH
17198: LD_INT 0
17200: PPUSH
17201: CALL_OW 234
// end ;
17205: GO 17190
17207: POP
17208: POP
// end ;
17209: PPOPN 2
17211: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17212: LD_EXP 39
17216: PUSH
17217: LD_EXP 42
17221: AND
17222: IFFALSE 17315
17224: GO 17226
17226: DISABLE
17227: LD_INT 0
17229: PPUSH
// begin enable ;
17230: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17231: LD_ADDR_VAR 0 1
17235: PUSH
17236: LD_INT 22
17238: PUSH
17239: LD_OWVAR 2
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 2
17250: PUSH
17251: LD_INT 25
17253: PUSH
17254: LD_INT 5
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 25
17263: PUSH
17264: LD_INT 9
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 25
17273: PUSH
17274: LD_INT 8
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PPUSH
17291: CALL_OW 69
17295: PUSH
17296: FOR_IN
17297: IFFALSE 17313
// begin SetClass ( i , 1 ) ;
17299: LD_VAR 0 1
17303: PPUSH
17304: LD_INT 1
17306: PPUSH
17307: CALL_OW 336
// end ;
17311: GO 17296
17313: POP
17314: POP
// end ;
17315: PPOPN 1
17317: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17318: LD_EXP 39
17322: PUSH
17323: LD_EXP 43
17327: AND
17328: PUSH
17329: LD_OWVAR 65
17333: PUSH
17334: LD_INT 7
17336: LESS
17337: AND
17338: IFFALSE 17352
17340: GO 17342
17342: DISABLE
// begin enable ;
17343: ENABLE
// game_speed := 7 ;
17344: LD_ADDR_OWVAR 65
17348: PUSH
17349: LD_INT 7
17351: ST_TO_ADDR
// end ;
17352: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17353: LD_EXP 39
17357: PUSH
17358: LD_EXP 46
17362: AND
17363: IFFALSE 17565
17365: GO 17367
17367: DISABLE
17368: LD_INT 0
17370: PPUSH
17371: PPUSH
17372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17373: LD_ADDR_VAR 0 3
17377: PUSH
17378: LD_INT 81
17380: PUSH
17381: LD_OWVAR 2
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 21
17392: PUSH
17393: LD_INT 1
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PPUSH
17404: CALL_OW 69
17408: ST_TO_ADDR
// if not tmp then
17409: LD_VAR 0 3
17413: NOT
17414: IFFALSE 17418
// exit ;
17416: GO 17565
// if tmp > 5 then
17418: LD_VAR 0 3
17422: PUSH
17423: LD_INT 5
17425: GREATER
17426: IFFALSE 17438
// k := 5 else
17428: LD_ADDR_VAR 0 2
17432: PUSH
17433: LD_INT 5
17435: ST_TO_ADDR
17436: GO 17448
// k := tmp ;
17438: LD_ADDR_VAR 0 2
17442: PUSH
17443: LD_VAR 0 3
17447: ST_TO_ADDR
// for i := 1 to k do
17448: LD_ADDR_VAR 0 1
17452: PUSH
17453: DOUBLE
17454: LD_INT 1
17456: DEC
17457: ST_TO_ADDR
17458: LD_VAR 0 2
17462: PUSH
17463: FOR_TO
17464: IFFALSE 17563
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17466: LD_VAR 0 3
17470: PUSH
17471: LD_VAR 0 1
17475: ARRAY
17476: PPUSH
17477: LD_VAR 0 1
17481: PUSH
17482: LD_INT 4
17484: MOD
17485: PUSH
17486: LD_INT 1
17488: PLUS
17489: PPUSH
17490: CALL_OW 259
17494: PUSH
17495: LD_INT 10
17497: LESS
17498: IFFALSE 17561
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17500: LD_VAR 0 3
17504: PUSH
17505: LD_VAR 0 1
17509: ARRAY
17510: PPUSH
17511: LD_VAR 0 1
17515: PUSH
17516: LD_INT 4
17518: MOD
17519: PUSH
17520: LD_INT 1
17522: PLUS
17523: PPUSH
17524: LD_VAR 0 3
17528: PUSH
17529: LD_VAR 0 1
17533: ARRAY
17534: PPUSH
17535: LD_VAR 0 1
17539: PUSH
17540: LD_INT 4
17542: MOD
17543: PUSH
17544: LD_INT 1
17546: PLUS
17547: PPUSH
17548: CALL_OW 259
17552: PUSH
17553: LD_INT 1
17555: PLUS
17556: PPUSH
17557: CALL_OW 237
17561: GO 17463
17563: POP
17564: POP
// end ;
17565: PPOPN 3
17567: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17568: LD_EXP 39
17572: PUSH
17573: LD_EXP 47
17577: AND
17578: IFFALSE 17598
17580: GO 17582
17582: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17583: LD_INT 4
17585: PPUSH
17586: LD_OWVAR 2
17590: PPUSH
17591: LD_INT 0
17593: PPUSH
17594: CALL_OW 324
17598: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17599: LD_EXP 39
17603: PUSH
17604: LD_EXP 76
17608: AND
17609: IFFALSE 17629
17611: GO 17613
17613: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17614: LD_INT 19
17616: PPUSH
17617: LD_OWVAR 2
17621: PPUSH
17622: LD_INT 0
17624: PPUSH
17625: CALL_OW 324
17629: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17630: LD_EXP 39
17634: PUSH
17635: LD_EXP 48
17639: AND
17640: IFFALSE 17742
17642: GO 17644
17644: DISABLE
17645: LD_INT 0
17647: PPUSH
17648: PPUSH
// begin enable ;
17649: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17650: LD_ADDR_VAR 0 2
17654: PUSH
17655: LD_INT 22
17657: PUSH
17658: LD_OWVAR 2
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 2
17669: PUSH
17670: LD_INT 34
17672: PUSH
17673: LD_INT 11
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 34
17682: PUSH
17683: LD_INT 30
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: LIST
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PPUSH
17699: CALL_OW 69
17703: ST_TO_ADDR
// if not tmp then
17704: LD_VAR 0 2
17708: NOT
17709: IFFALSE 17713
// exit ;
17711: GO 17742
// for i in tmp do
17713: LD_ADDR_VAR 0 1
17717: PUSH
17718: LD_VAR 0 2
17722: PUSH
17723: FOR_IN
17724: IFFALSE 17740
// begin SetLives ( i , 0 ) ;
17726: LD_VAR 0 1
17730: PPUSH
17731: LD_INT 0
17733: PPUSH
17734: CALL_OW 234
// end ;
17738: GO 17723
17740: POP
17741: POP
// end ;
17742: PPOPN 2
17744: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17745: LD_EXP 39
17749: PUSH
17750: LD_EXP 49
17754: AND
17755: IFFALSE 17775
17757: GO 17759
17759: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17760: LD_INT 32
17762: PPUSH
17763: LD_OWVAR 2
17767: PPUSH
17768: LD_INT 0
17770: PPUSH
17771: CALL_OW 324
17775: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17776: LD_EXP 39
17780: PUSH
17781: LD_EXP 50
17785: AND
17786: IFFALSE 17967
17788: GO 17790
17790: DISABLE
17791: LD_INT 0
17793: PPUSH
17794: PPUSH
17795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17796: LD_ADDR_VAR 0 2
17800: PUSH
17801: LD_INT 22
17803: PUSH
17804: LD_OWVAR 2
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 33
17815: PUSH
17816: LD_INT 3
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PPUSH
17827: CALL_OW 69
17831: ST_TO_ADDR
// if not tmp then
17832: LD_VAR 0 2
17836: NOT
17837: IFFALSE 17841
// exit ;
17839: GO 17967
// side := 0 ;
17841: LD_ADDR_VAR 0 3
17845: PUSH
17846: LD_INT 0
17848: ST_TO_ADDR
// for i := 1 to 8 do
17849: LD_ADDR_VAR 0 1
17853: PUSH
17854: DOUBLE
17855: LD_INT 1
17857: DEC
17858: ST_TO_ADDR
17859: LD_INT 8
17861: PUSH
17862: FOR_TO
17863: IFFALSE 17911
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17865: LD_OWVAR 2
17869: PUSH
17870: LD_VAR 0 1
17874: NONEQUAL
17875: PUSH
17876: LD_OWVAR 2
17880: PPUSH
17881: LD_VAR 0 1
17885: PPUSH
17886: CALL_OW 81
17890: PUSH
17891: LD_INT 2
17893: EQUAL
17894: AND
17895: IFFALSE 17909
// begin side := i ;
17897: LD_ADDR_VAR 0 3
17901: PUSH
17902: LD_VAR 0 1
17906: ST_TO_ADDR
// break ;
17907: GO 17911
// end ;
17909: GO 17862
17911: POP
17912: POP
// if not side then
17913: LD_VAR 0 3
17917: NOT
17918: IFFALSE 17922
// exit ;
17920: GO 17967
// for i := 1 to tmp do
17922: LD_ADDR_VAR 0 1
17926: PUSH
17927: DOUBLE
17928: LD_INT 1
17930: DEC
17931: ST_TO_ADDR
17932: LD_VAR 0 2
17936: PUSH
17937: FOR_TO
17938: IFFALSE 17965
// if Prob ( 60 ) then
17940: LD_INT 60
17942: PPUSH
17943: CALL_OW 13
17947: IFFALSE 17963
// SetSide ( i , side ) ;
17949: LD_VAR 0 1
17953: PPUSH
17954: LD_VAR 0 3
17958: PPUSH
17959: CALL_OW 235
17963: GO 17937
17965: POP
17966: POP
// end ;
17967: PPOPN 3
17969: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17970: LD_EXP 39
17974: PUSH
17975: LD_EXP 52
17979: AND
17980: IFFALSE 18099
17982: GO 17984
17984: DISABLE
17985: LD_INT 0
17987: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17988: LD_ADDR_VAR 0 1
17992: PUSH
17993: LD_INT 22
17995: PUSH
17996: LD_OWVAR 2
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 21
18007: PUSH
18008: LD_INT 1
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 3
18017: PUSH
18018: LD_INT 23
18020: PUSH
18021: LD_INT 0
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: PPUSH
18037: CALL_OW 69
18041: PUSH
18042: FOR_IN
18043: IFFALSE 18097
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18045: LD_VAR 0 1
18049: PPUSH
18050: CALL_OW 257
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: LD_INT 2
18060: PUSH
18061: LD_INT 3
18063: PUSH
18064: LD_INT 4
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: IN
18073: IFFALSE 18095
// SetClass ( un , rand ( 1 , 4 ) ) ;
18075: LD_VAR 0 1
18079: PPUSH
18080: LD_INT 1
18082: PPUSH
18083: LD_INT 4
18085: PPUSH
18086: CALL_OW 12
18090: PPUSH
18091: CALL_OW 336
18095: GO 18042
18097: POP
18098: POP
// end ;
18099: PPOPN 1
18101: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18102: LD_EXP 39
18106: PUSH
18107: LD_EXP 51
18111: AND
18112: IFFALSE 18191
18114: GO 18116
18116: DISABLE
18117: LD_INT 0
18119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18120: LD_ADDR_VAR 0 1
18124: PUSH
18125: LD_INT 22
18127: PUSH
18128: LD_OWVAR 2
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 21
18139: PUSH
18140: LD_INT 3
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PPUSH
18151: CALL_OW 69
18155: ST_TO_ADDR
// if not tmp then
18156: LD_VAR 0 1
18160: NOT
18161: IFFALSE 18165
// exit ;
18163: GO 18191
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18165: LD_VAR 0 1
18169: PUSH
18170: LD_INT 1
18172: PPUSH
18173: LD_VAR 0 1
18177: PPUSH
18178: CALL_OW 12
18182: ARRAY
18183: PPUSH
18184: LD_INT 100
18186: PPUSH
18187: CALL_OW 234
// end ;
18191: PPOPN 1
18193: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18194: LD_EXP 39
18198: PUSH
18199: LD_EXP 53
18203: AND
18204: IFFALSE 18302
18206: GO 18208
18208: DISABLE
18209: LD_INT 0
18211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18212: LD_ADDR_VAR 0 1
18216: PUSH
18217: LD_INT 22
18219: PUSH
18220: LD_OWVAR 2
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 21
18231: PUSH
18232: LD_INT 1
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PPUSH
18243: CALL_OW 69
18247: ST_TO_ADDR
// if not tmp then
18248: LD_VAR 0 1
18252: NOT
18253: IFFALSE 18257
// exit ;
18255: GO 18302
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18257: LD_VAR 0 1
18261: PUSH
18262: LD_INT 1
18264: PPUSH
18265: LD_VAR 0 1
18269: PPUSH
18270: CALL_OW 12
18274: ARRAY
18275: PPUSH
18276: LD_INT 1
18278: PPUSH
18279: LD_INT 4
18281: PPUSH
18282: CALL_OW 12
18286: PPUSH
18287: LD_INT 3000
18289: PPUSH
18290: LD_INT 9000
18292: PPUSH
18293: CALL_OW 12
18297: PPUSH
18298: CALL_OW 492
// end ;
18302: PPOPN 1
18304: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18305: LD_EXP 39
18309: PUSH
18310: LD_EXP 54
18314: AND
18315: IFFALSE 18335
18317: GO 18319
18319: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18320: LD_INT 1
18322: PPUSH
18323: LD_OWVAR 2
18327: PPUSH
18328: LD_INT 0
18330: PPUSH
18331: CALL_OW 324
18335: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18336: LD_EXP 39
18340: PUSH
18341: LD_EXP 55
18345: AND
18346: IFFALSE 18429
18348: GO 18350
18350: DISABLE
18351: LD_INT 0
18353: PPUSH
18354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18355: LD_ADDR_VAR 0 2
18359: PUSH
18360: LD_INT 22
18362: PUSH
18363: LD_OWVAR 2
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 21
18374: PUSH
18375: LD_INT 3
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PPUSH
18386: CALL_OW 69
18390: ST_TO_ADDR
// if not tmp then
18391: LD_VAR 0 2
18395: NOT
18396: IFFALSE 18400
// exit ;
18398: GO 18429
// for i in tmp do
18400: LD_ADDR_VAR 0 1
18404: PUSH
18405: LD_VAR 0 2
18409: PUSH
18410: FOR_IN
18411: IFFALSE 18427
// SetBLevel ( i , 10 ) ;
18413: LD_VAR 0 1
18417: PPUSH
18418: LD_INT 10
18420: PPUSH
18421: CALL_OW 241
18425: GO 18410
18427: POP
18428: POP
// end ;
18429: PPOPN 2
18431: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18432: LD_EXP 39
18436: PUSH
18437: LD_EXP 56
18441: AND
18442: IFFALSE 18553
18444: GO 18446
18446: DISABLE
18447: LD_INT 0
18449: PPUSH
18450: PPUSH
18451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18452: LD_ADDR_VAR 0 3
18456: PUSH
18457: LD_INT 22
18459: PUSH
18460: LD_OWVAR 2
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 25
18471: PUSH
18472: LD_INT 1
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PPUSH
18483: CALL_OW 69
18487: ST_TO_ADDR
// if not tmp then
18488: LD_VAR 0 3
18492: NOT
18493: IFFALSE 18497
// exit ;
18495: GO 18553
// un := tmp [ rand ( 1 , tmp ) ] ;
18497: LD_ADDR_VAR 0 2
18501: PUSH
18502: LD_VAR 0 3
18506: PUSH
18507: LD_INT 1
18509: PPUSH
18510: LD_VAR 0 3
18514: PPUSH
18515: CALL_OW 12
18519: ARRAY
18520: ST_TO_ADDR
// if Crawls ( un ) then
18521: LD_VAR 0 2
18525: PPUSH
18526: CALL_OW 318
18530: IFFALSE 18541
// ComWalk ( un ) ;
18532: LD_VAR 0 2
18536: PPUSH
18537: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18541: LD_VAR 0 2
18545: PPUSH
18546: LD_INT 5
18548: PPUSH
18549: CALL_OW 336
// end ;
18553: PPOPN 3
18555: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18556: LD_EXP 39
18560: PUSH
18561: LD_EXP 57
18565: AND
18566: PUSH
18567: LD_OWVAR 67
18571: PUSH
18572: LD_INT 4
18574: LESS
18575: AND
18576: IFFALSE 18595
18578: GO 18580
18580: DISABLE
// begin Difficulty := Difficulty + 1 ;
18581: LD_ADDR_OWVAR 67
18585: PUSH
18586: LD_OWVAR 67
18590: PUSH
18591: LD_INT 1
18593: PLUS
18594: ST_TO_ADDR
// end ;
18595: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18596: LD_EXP 39
18600: PUSH
18601: LD_EXP 58
18605: AND
18606: IFFALSE 18709
18608: GO 18610
18610: DISABLE
18611: LD_INT 0
18613: PPUSH
// begin for i := 1 to 5 do
18614: LD_ADDR_VAR 0 1
18618: PUSH
18619: DOUBLE
18620: LD_INT 1
18622: DEC
18623: ST_TO_ADDR
18624: LD_INT 5
18626: PUSH
18627: FOR_TO
18628: IFFALSE 18707
// begin uc_nation := nation_nature ;
18630: LD_ADDR_OWVAR 21
18634: PUSH
18635: LD_INT 0
18637: ST_TO_ADDR
// uc_side := 0 ;
18638: LD_ADDR_OWVAR 20
18642: PUSH
18643: LD_INT 0
18645: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18646: LD_ADDR_OWVAR 29
18650: PUSH
18651: LD_INT 12
18653: PUSH
18654: LD_INT 12
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: ST_TO_ADDR
// hc_agressivity := 20 ;
18661: LD_ADDR_OWVAR 35
18665: PUSH
18666: LD_INT 20
18668: ST_TO_ADDR
// hc_class := class_tiger ;
18669: LD_ADDR_OWVAR 28
18673: PUSH
18674: LD_INT 14
18676: ST_TO_ADDR
// hc_gallery :=  ;
18677: LD_ADDR_OWVAR 33
18681: PUSH
18682: LD_STRING 
18684: ST_TO_ADDR
// hc_name :=  ;
18685: LD_ADDR_OWVAR 26
18689: PUSH
18690: LD_STRING 
18692: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18693: CALL_OW 44
18697: PPUSH
18698: LD_INT 0
18700: PPUSH
18701: CALL_OW 51
// end ;
18705: GO 18627
18707: POP
18708: POP
// end ;
18709: PPOPN 1
18711: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18712: LD_EXP 39
18716: PUSH
18717: LD_EXP 59
18721: AND
18722: IFFALSE 18731
18724: GO 18726
18726: DISABLE
// StreamSibBomb ;
18727: CALL 18732 0 0
18731: END
// export function StreamSibBomb ; var i , x , y ; begin
18732: LD_INT 0
18734: PPUSH
18735: PPUSH
18736: PPUSH
18737: PPUSH
// result := false ;
18738: LD_ADDR_VAR 0 1
18742: PUSH
18743: LD_INT 0
18745: ST_TO_ADDR
// for i := 1 to 16 do
18746: LD_ADDR_VAR 0 2
18750: PUSH
18751: DOUBLE
18752: LD_INT 1
18754: DEC
18755: ST_TO_ADDR
18756: LD_INT 16
18758: PUSH
18759: FOR_TO
18760: IFFALSE 18959
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18762: LD_ADDR_VAR 0 3
18766: PUSH
18767: LD_INT 10
18769: PUSH
18770: LD_INT 20
18772: PUSH
18773: LD_INT 30
18775: PUSH
18776: LD_INT 40
18778: PUSH
18779: LD_INT 50
18781: PUSH
18782: LD_INT 60
18784: PUSH
18785: LD_INT 70
18787: PUSH
18788: LD_INT 80
18790: PUSH
18791: LD_INT 90
18793: PUSH
18794: LD_INT 100
18796: PUSH
18797: LD_INT 110
18799: PUSH
18800: LD_INT 120
18802: PUSH
18803: LD_INT 130
18805: PUSH
18806: LD_INT 140
18808: PUSH
18809: LD_INT 150
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 1
18831: PPUSH
18832: LD_INT 15
18834: PPUSH
18835: CALL_OW 12
18839: ARRAY
18840: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18841: LD_ADDR_VAR 0 4
18845: PUSH
18846: LD_INT 10
18848: PUSH
18849: LD_INT 20
18851: PUSH
18852: LD_INT 30
18854: PUSH
18855: LD_INT 40
18857: PUSH
18858: LD_INT 50
18860: PUSH
18861: LD_INT 60
18863: PUSH
18864: LD_INT 70
18866: PUSH
18867: LD_INT 80
18869: PUSH
18870: LD_INT 90
18872: PUSH
18873: LD_INT 100
18875: PUSH
18876: LD_INT 110
18878: PUSH
18879: LD_INT 120
18881: PUSH
18882: LD_INT 130
18884: PUSH
18885: LD_INT 140
18887: PUSH
18888: LD_INT 150
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 1
18910: PPUSH
18911: LD_INT 15
18913: PPUSH
18914: CALL_OW 12
18918: ARRAY
18919: ST_TO_ADDR
// if ValidHex ( x , y ) then
18920: LD_VAR 0 3
18924: PPUSH
18925: LD_VAR 0 4
18929: PPUSH
18930: CALL_OW 488
18934: IFFALSE 18957
// begin result := [ x , y ] ;
18936: LD_ADDR_VAR 0 1
18940: PUSH
18941: LD_VAR 0 3
18945: PUSH
18946: LD_VAR 0 4
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: ST_TO_ADDR
// break ;
18955: GO 18959
// end ; end ;
18957: GO 18759
18959: POP
18960: POP
// if result then
18961: LD_VAR 0 1
18965: IFFALSE 19025
// begin ToLua ( playSibBomb() ) ;
18967: LD_STRING playSibBomb()
18969: PPUSH
18970: CALL_OW 559
// wait ( 0 0$14 ) ;
18974: LD_INT 490
18976: PPUSH
18977: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18981: LD_VAR 0 1
18985: PUSH
18986: LD_INT 1
18988: ARRAY
18989: PPUSH
18990: LD_VAR 0 1
18994: PUSH
18995: LD_INT 2
18997: ARRAY
18998: PPUSH
18999: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19003: LD_VAR 0 1
19007: PUSH
19008: LD_INT 1
19010: ARRAY
19011: PPUSH
19012: LD_VAR 0 1
19016: PUSH
19017: LD_INT 2
19019: ARRAY
19020: PPUSH
19021: CALL_OW 429
// end ; end ;
19025: LD_VAR 0 1
19029: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19030: LD_EXP 39
19034: PUSH
19035: LD_EXP 61
19039: AND
19040: IFFALSE 19052
19042: GO 19044
19044: DISABLE
// YouLost (  ) ;
19045: LD_STRING 
19047: PPUSH
19048: CALL_OW 104
19052: END
// every 0 0$1 trigger StreamModeActive and sFog do
19053: LD_EXP 39
19057: PUSH
19058: LD_EXP 60
19062: AND
19063: IFFALSE 19077
19065: GO 19067
19067: DISABLE
// FogOff ( your_side ) ;
19068: LD_OWVAR 2
19072: PPUSH
19073: CALL_OW 344
19077: END
// every 0 0$1 trigger StreamModeActive and sSun do
19078: LD_EXP 39
19082: PUSH
19083: LD_EXP 62
19087: AND
19088: IFFALSE 19116
19090: GO 19092
19092: DISABLE
// begin solar_recharge_percent := 0 ;
19093: LD_ADDR_OWVAR 79
19097: PUSH
19098: LD_INT 0
19100: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19101: LD_INT 10500
19103: PPUSH
19104: CALL_OW 67
// solar_recharge_percent := 100 ;
19108: LD_ADDR_OWVAR 79
19112: PUSH
19113: LD_INT 100
19115: ST_TO_ADDR
// end ;
19116: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19117: LD_EXP 39
19121: PUSH
19122: LD_EXP 63
19126: AND
19127: IFFALSE 19366
19129: GO 19131
19131: DISABLE
19132: LD_INT 0
19134: PPUSH
19135: PPUSH
19136: PPUSH
// begin tmp := [ ] ;
19137: LD_ADDR_VAR 0 3
19141: PUSH
19142: EMPTY
19143: ST_TO_ADDR
// for i := 1 to 6 do
19144: LD_ADDR_VAR 0 1
19148: PUSH
19149: DOUBLE
19150: LD_INT 1
19152: DEC
19153: ST_TO_ADDR
19154: LD_INT 6
19156: PUSH
19157: FOR_TO
19158: IFFALSE 19263
// begin uc_nation := nation_nature ;
19160: LD_ADDR_OWVAR 21
19164: PUSH
19165: LD_INT 0
19167: ST_TO_ADDR
// uc_side := 0 ;
19168: LD_ADDR_OWVAR 20
19172: PUSH
19173: LD_INT 0
19175: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19176: LD_ADDR_OWVAR 29
19180: PUSH
19181: LD_INT 12
19183: PUSH
19184: LD_INT 12
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: ST_TO_ADDR
// hc_agressivity := 20 ;
19191: LD_ADDR_OWVAR 35
19195: PUSH
19196: LD_INT 20
19198: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19199: LD_ADDR_OWVAR 28
19203: PUSH
19204: LD_INT 17
19206: ST_TO_ADDR
// hc_gallery :=  ;
19207: LD_ADDR_OWVAR 33
19211: PUSH
19212: LD_STRING 
19214: ST_TO_ADDR
// hc_name :=  ;
19215: LD_ADDR_OWVAR 26
19219: PUSH
19220: LD_STRING 
19222: ST_TO_ADDR
// un := CreateHuman ;
19223: LD_ADDR_VAR 0 2
19227: PUSH
19228: CALL_OW 44
19232: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19233: LD_VAR 0 2
19237: PPUSH
19238: LD_INT 1
19240: PPUSH
19241: CALL_OW 51
// tmp := tmp ^ un ;
19245: LD_ADDR_VAR 0 3
19249: PUSH
19250: LD_VAR 0 3
19254: PUSH
19255: LD_VAR 0 2
19259: ADD
19260: ST_TO_ADDR
// end ;
19261: GO 19157
19263: POP
19264: POP
// repeat wait ( 0 0$1 ) ;
19265: LD_INT 35
19267: PPUSH
19268: CALL_OW 67
// for un in tmp do
19272: LD_ADDR_VAR 0 2
19276: PUSH
19277: LD_VAR 0 3
19281: PUSH
19282: FOR_IN
19283: IFFALSE 19357
// begin if IsDead ( un ) then
19285: LD_VAR 0 2
19289: PPUSH
19290: CALL_OW 301
19294: IFFALSE 19314
// begin tmp := tmp diff un ;
19296: LD_ADDR_VAR 0 3
19300: PUSH
19301: LD_VAR 0 3
19305: PUSH
19306: LD_VAR 0 2
19310: DIFF
19311: ST_TO_ADDR
// continue ;
19312: GO 19282
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19314: LD_VAR 0 2
19318: PPUSH
19319: LD_INT 3
19321: PUSH
19322: LD_INT 22
19324: PUSH
19325: LD_INT 0
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PPUSH
19336: CALL_OW 69
19340: PPUSH
19341: LD_VAR 0 2
19345: PPUSH
19346: CALL_OW 74
19350: PPUSH
19351: CALL_OW 115
// end ;
19355: GO 19282
19357: POP
19358: POP
// until not tmp ;
19359: LD_VAR 0 3
19363: NOT
19364: IFFALSE 19265
// end ;
19366: PPOPN 3
19368: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19369: LD_EXP 39
19373: PUSH
19374: LD_EXP 64
19378: AND
19379: IFFALSE 19433
19381: GO 19383
19383: DISABLE
// begin ToLua ( displayTroll(); ) ;
19384: LD_STRING displayTroll();
19386: PPUSH
19387: CALL_OW 559
// wait ( 3 3$00 ) ;
19391: LD_INT 6300
19393: PPUSH
19394: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19398: LD_STRING hideTroll();
19400: PPUSH
19401: CALL_OW 559
// wait ( 1 1$00 ) ;
19405: LD_INT 2100
19407: PPUSH
19408: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19412: LD_STRING displayTroll();
19414: PPUSH
19415: CALL_OW 559
// wait ( 1 1$00 ) ;
19419: LD_INT 2100
19421: PPUSH
19422: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19426: LD_STRING hideTroll();
19428: PPUSH
19429: CALL_OW 559
// end ;
19433: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19434: LD_EXP 39
19438: PUSH
19439: LD_EXP 65
19443: AND
19444: IFFALSE 19507
19446: GO 19448
19448: DISABLE
19449: LD_INT 0
19451: PPUSH
// begin p := 0 ;
19452: LD_ADDR_VAR 0 1
19456: PUSH
19457: LD_INT 0
19459: ST_TO_ADDR
// repeat game_speed := 1 ;
19460: LD_ADDR_OWVAR 65
19464: PUSH
19465: LD_INT 1
19467: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19468: LD_INT 35
19470: PPUSH
19471: CALL_OW 67
// p := p + 1 ;
19475: LD_ADDR_VAR 0 1
19479: PUSH
19480: LD_VAR 0 1
19484: PUSH
19485: LD_INT 1
19487: PLUS
19488: ST_TO_ADDR
// until p >= 60 ;
19489: LD_VAR 0 1
19493: PUSH
19494: LD_INT 60
19496: GREATEREQUAL
19497: IFFALSE 19460
// game_speed := 4 ;
19499: LD_ADDR_OWVAR 65
19503: PUSH
19504: LD_INT 4
19506: ST_TO_ADDR
// end ;
19507: PPOPN 1
19509: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19510: LD_EXP 39
19514: PUSH
19515: LD_EXP 66
19519: AND
19520: IFFALSE 19666
19522: GO 19524
19524: DISABLE
19525: LD_INT 0
19527: PPUSH
19528: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19529: LD_ADDR_VAR 0 1
19533: PUSH
19534: LD_INT 22
19536: PUSH
19537: LD_OWVAR 2
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 2
19548: PUSH
19549: LD_INT 30
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 30
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: LIST
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PPUSH
19578: CALL_OW 69
19582: ST_TO_ADDR
// if not depot then
19583: LD_VAR 0 1
19587: NOT
19588: IFFALSE 19592
// exit ;
19590: GO 19666
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19592: LD_ADDR_VAR 0 2
19596: PUSH
19597: LD_VAR 0 1
19601: PUSH
19602: LD_INT 1
19604: PPUSH
19605: LD_VAR 0 1
19609: PPUSH
19610: CALL_OW 12
19614: ARRAY
19615: PPUSH
19616: CALL_OW 274
19620: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19621: LD_VAR 0 2
19625: PPUSH
19626: LD_INT 1
19628: PPUSH
19629: LD_INT 0
19631: PPUSH
19632: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19636: LD_VAR 0 2
19640: PPUSH
19641: LD_INT 2
19643: PPUSH
19644: LD_INT 0
19646: PPUSH
19647: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19651: LD_VAR 0 2
19655: PPUSH
19656: LD_INT 3
19658: PPUSH
19659: LD_INT 0
19661: PPUSH
19662: CALL_OW 277
// end ;
19666: PPOPN 2
19668: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19669: LD_EXP 39
19673: PUSH
19674: LD_EXP 67
19678: AND
19679: IFFALSE 19776
19681: GO 19683
19683: DISABLE
19684: LD_INT 0
19686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19687: LD_ADDR_VAR 0 1
19691: PUSH
19692: LD_INT 22
19694: PUSH
19695: LD_OWVAR 2
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 21
19706: PUSH
19707: LD_INT 1
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 3
19716: PUSH
19717: LD_INT 23
19719: PUSH
19720: LD_INT 0
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: LIST
19735: PPUSH
19736: CALL_OW 69
19740: ST_TO_ADDR
// if not tmp then
19741: LD_VAR 0 1
19745: NOT
19746: IFFALSE 19750
// exit ;
19748: GO 19776
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19750: LD_VAR 0 1
19754: PUSH
19755: LD_INT 1
19757: PPUSH
19758: LD_VAR 0 1
19762: PPUSH
19763: CALL_OW 12
19767: ARRAY
19768: PPUSH
19769: LD_INT 200
19771: PPUSH
19772: CALL_OW 234
// end ;
19776: PPOPN 1
19778: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19779: LD_EXP 39
19783: PUSH
19784: LD_EXP 68
19788: AND
19789: IFFALSE 19868
19791: GO 19793
19793: DISABLE
19794: LD_INT 0
19796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19797: LD_ADDR_VAR 0 1
19801: PUSH
19802: LD_INT 22
19804: PUSH
19805: LD_OWVAR 2
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 21
19816: PUSH
19817: LD_INT 2
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PPUSH
19828: CALL_OW 69
19832: ST_TO_ADDR
// if not tmp then
19833: LD_VAR 0 1
19837: NOT
19838: IFFALSE 19842
// exit ;
19840: GO 19868
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19842: LD_VAR 0 1
19846: PUSH
19847: LD_INT 1
19849: PPUSH
19850: LD_VAR 0 1
19854: PPUSH
19855: CALL_OW 12
19859: ARRAY
19860: PPUSH
19861: LD_INT 60
19863: PPUSH
19864: CALL_OW 234
// end ;
19868: PPOPN 1
19870: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19871: LD_EXP 39
19875: PUSH
19876: LD_EXP 69
19880: AND
19881: IFFALSE 19980
19883: GO 19885
19885: DISABLE
19886: LD_INT 0
19888: PPUSH
19889: PPUSH
// begin enable ;
19890: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19891: LD_ADDR_VAR 0 1
19895: PUSH
19896: LD_INT 22
19898: PUSH
19899: LD_OWVAR 2
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 61
19910: PUSH
19911: EMPTY
19912: LIST
19913: PUSH
19914: LD_INT 33
19916: PUSH
19917: LD_INT 2
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: LIST
19928: PPUSH
19929: CALL_OW 69
19933: ST_TO_ADDR
// if not tmp then
19934: LD_VAR 0 1
19938: NOT
19939: IFFALSE 19943
// exit ;
19941: GO 19980
// for i in tmp do
19943: LD_ADDR_VAR 0 2
19947: PUSH
19948: LD_VAR 0 1
19952: PUSH
19953: FOR_IN
19954: IFFALSE 19978
// if IsControledBy ( i ) then
19956: LD_VAR 0 2
19960: PPUSH
19961: CALL_OW 312
19965: IFFALSE 19976
// ComUnlink ( i ) ;
19967: LD_VAR 0 2
19971: PPUSH
19972: CALL_OW 136
19976: GO 19953
19978: POP
19979: POP
// end ;
19980: PPOPN 2
19982: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19983: LD_EXP 39
19987: PUSH
19988: LD_EXP 70
19992: AND
19993: IFFALSE 20133
19995: GO 19997
19997: DISABLE
19998: LD_INT 0
20000: PPUSH
20001: PPUSH
// begin ToLua ( displayPowell(); ) ;
20002: LD_STRING displayPowell();
20004: PPUSH
20005: CALL_OW 559
// uc_side := 0 ;
20009: LD_ADDR_OWVAR 20
20013: PUSH
20014: LD_INT 0
20016: ST_TO_ADDR
// uc_nation := 2 ;
20017: LD_ADDR_OWVAR 21
20021: PUSH
20022: LD_INT 2
20024: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20025: LD_ADDR_OWVAR 37
20029: PUSH
20030: LD_INT 14
20032: ST_TO_ADDR
// vc_engine := engine_siberite ;
20033: LD_ADDR_OWVAR 39
20037: PUSH
20038: LD_INT 3
20040: ST_TO_ADDR
// vc_control := control_apeman ;
20041: LD_ADDR_OWVAR 38
20045: PUSH
20046: LD_INT 5
20048: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20049: LD_ADDR_OWVAR 40
20053: PUSH
20054: LD_INT 29
20056: ST_TO_ADDR
// un := CreateVehicle ;
20057: LD_ADDR_VAR 0 2
20061: PUSH
20062: CALL_OW 45
20066: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20067: LD_VAR 0 2
20071: PPUSH
20072: LD_INT 1
20074: PPUSH
20075: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20079: LD_INT 35
20081: PPUSH
20082: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20086: LD_VAR 0 2
20090: PPUSH
20091: LD_INT 22
20093: PUSH
20094: LD_OWVAR 2
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PPUSH
20103: CALL_OW 69
20107: PPUSH
20108: LD_VAR 0 2
20112: PPUSH
20113: CALL_OW 74
20117: PPUSH
20118: CALL_OW 115
// until IsDead ( un ) ;
20122: LD_VAR 0 2
20126: PPUSH
20127: CALL_OW 301
20131: IFFALSE 20079
// end ;
20133: PPOPN 2
20135: END
// every 0 0$1 trigger StreamModeActive and sStu do
20136: LD_EXP 39
20140: PUSH
20141: LD_EXP 78
20145: AND
20146: IFFALSE 20162
20148: GO 20150
20150: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20151: LD_STRING displayStucuk();
20153: PPUSH
20154: CALL_OW 559
// ResetFog ;
20158: CALL_OW 335
// end ;
20162: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20163: LD_EXP 39
20167: PUSH
20168: LD_EXP 71
20172: AND
20173: IFFALSE 20314
20175: GO 20177
20177: DISABLE
20178: LD_INT 0
20180: PPUSH
20181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20182: LD_ADDR_VAR 0 2
20186: PUSH
20187: LD_INT 22
20189: PUSH
20190: LD_OWVAR 2
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 21
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PPUSH
20213: CALL_OW 69
20217: ST_TO_ADDR
// if not tmp then
20218: LD_VAR 0 2
20222: NOT
20223: IFFALSE 20227
// exit ;
20225: GO 20314
// un := tmp [ rand ( 1 , tmp ) ] ;
20227: LD_ADDR_VAR 0 1
20231: PUSH
20232: LD_VAR 0 2
20236: PUSH
20237: LD_INT 1
20239: PPUSH
20240: LD_VAR 0 2
20244: PPUSH
20245: CALL_OW 12
20249: ARRAY
20250: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20251: LD_VAR 0 1
20255: PPUSH
20256: LD_INT 0
20258: PPUSH
20259: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20263: LD_VAR 0 1
20267: PPUSH
20268: LD_OWVAR 3
20272: PUSH
20273: LD_VAR 0 1
20277: DIFF
20278: PPUSH
20279: LD_VAR 0 1
20283: PPUSH
20284: CALL_OW 74
20288: PPUSH
20289: CALL_OW 115
// wait ( 0 0$20 ) ;
20293: LD_INT 700
20295: PPUSH
20296: CALL_OW 67
// SetSide ( un , your_side ) ;
20300: LD_VAR 0 1
20304: PPUSH
20305: LD_OWVAR 2
20309: PPUSH
20310: CALL_OW 235
// end ;
20314: PPOPN 2
20316: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20317: LD_EXP 39
20321: PUSH
20322: LD_EXP 72
20326: AND
20327: IFFALSE 20433
20329: GO 20331
20331: DISABLE
20332: LD_INT 0
20334: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20335: LD_ADDR_VAR 0 1
20339: PUSH
20340: LD_INT 22
20342: PUSH
20343: LD_OWVAR 2
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 2
20354: PUSH
20355: LD_INT 30
20357: PUSH
20358: LD_INT 0
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 30
20367: PUSH
20368: LD_INT 1
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: LIST
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PPUSH
20384: CALL_OW 69
20388: ST_TO_ADDR
// if not depot then
20389: LD_VAR 0 1
20393: NOT
20394: IFFALSE 20398
// exit ;
20396: GO 20433
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20398: LD_VAR 0 1
20402: PUSH
20403: LD_INT 1
20405: ARRAY
20406: PPUSH
20407: CALL_OW 250
20411: PPUSH
20412: LD_VAR 0 1
20416: PUSH
20417: LD_INT 1
20419: ARRAY
20420: PPUSH
20421: CALL_OW 251
20425: PPUSH
20426: LD_INT 70
20428: PPUSH
20429: CALL_OW 495
// end ;
20433: PPOPN 1
20435: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20436: LD_EXP 39
20440: PUSH
20441: LD_EXP 73
20445: AND
20446: IFFALSE 20657
20448: GO 20450
20450: DISABLE
20451: LD_INT 0
20453: PPUSH
20454: PPUSH
20455: PPUSH
20456: PPUSH
20457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20458: LD_ADDR_VAR 0 5
20462: PUSH
20463: LD_INT 22
20465: PUSH
20466: LD_OWVAR 2
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 21
20477: PUSH
20478: LD_INT 1
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PPUSH
20489: CALL_OW 69
20493: ST_TO_ADDR
// if not tmp then
20494: LD_VAR 0 5
20498: NOT
20499: IFFALSE 20503
// exit ;
20501: GO 20657
// for i in tmp do
20503: LD_ADDR_VAR 0 1
20507: PUSH
20508: LD_VAR 0 5
20512: PUSH
20513: FOR_IN
20514: IFFALSE 20655
// begin d := rand ( 0 , 5 ) ;
20516: LD_ADDR_VAR 0 4
20520: PUSH
20521: LD_INT 0
20523: PPUSH
20524: LD_INT 5
20526: PPUSH
20527: CALL_OW 12
20531: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20532: LD_ADDR_VAR 0 2
20536: PUSH
20537: LD_VAR 0 1
20541: PPUSH
20542: CALL_OW 250
20546: PPUSH
20547: LD_VAR 0 4
20551: PPUSH
20552: LD_INT 3
20554: PPUSH
20555: LD_INT 12
20557: PPUSH
20558: CALL_OW 12
20562: PPUSH
20563: CALL_OW 272
20567: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20568: LD_ADDR_VAR 0 3
20572: PUSH
20573: LD_VAR 0 1
20577: PPUSH
20578: CALL_OW 251
20582: PPUSH
20583: LD_VAR 0 4
20587: PPUSH
20588: LD_INT 3
20590: PPUSH
20591: LD_INT 12
20593: PPUSH
20594: CALL_OW 12
20598: PPUSH
20599: CALL_OW 273
20603: ST_TO_ADDR
// if ValidHex ( x , y ) then
20604: LD_VAR 0 2
20608: PPUSH
20609: LD_VAR 0 3
20613: PPUSH
20614: CALL_OW 488
20618: IFFALSE 20653
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20620: LD_VAR 0 1
20624: PPUSH
20625: LD_VAR 0 2
20629: PPUSH
20630: LD_VAR 0 3
20634: PPUSH
20635: LD_INT 3
20637: PPUSH
20638: LD_INT 6
20640: PPUSH
20641: CALL_OW 12
20645: PPUSH
20646: LD_INT 1
20648: PPUSH
20649: CALL_OW 483
// end ;
20653: GO 20513
20655: POP
20656: POP
// end ;
20657: PPOPN 5
20659: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20660: LD_EXP 39
20664: PUSH
20665: LD_EXP 74
20669: AND
20670: IFFALSE 20764
20672: GO 20674
20674: DISABLE
20675: LD_INT 0
20677: PPUSH
20678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20679: LD_ADDR_VAR 0 2
20683: PUSH
20684: LD_INT 22
20686: PUSH
20687: LD_OWVAR 2
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 32
20698: PUSH
20699: LD_INT 1
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 21
20708: PUSH
20709: LD_INT 2
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: LIST
20720: PPUSH
20721: CALL_OW 69
20725: ST_TO_ADDR
// if not tmp then
20726: LD_VAR 0 2
20730: NOT
20731: IFFALSE 20735
// exit ;
20733: GO 20764
// for i in tmp do
20735: LD_ADDR_VAR 0 1
20739: PUSH
20740: LD_VAR 0 2
20744: PUSH
20745: FOR_IN
20746: IFFALSE 20762
// SetFuel ( i , 0 ) ;
20748: LD_VAR 0 1
20752: PPUSH
20753: LD_INT 0
20755: PPUSH
20756: CALL_OW 240
20760: GO 20745
20762: POP
20763: POP
// end ;
20764: PPOPN 2
20766: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20767: LD_EXP 39
20771: PUSH
20772: LD_EXP 75
20776: AND
20777: IFFALSE 20843
20779: GO 20781
20781: DISABLE
20782: LD_INT 0
20784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20785: LD_ADDR_VAR 0 1
20789: PUSH
20790: LD_INT 22
20792: PUSH
20793: LD_OWVAR 2
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 30
20804: PUSH
20805: LD_INT 29
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PPUSH
20816: CALL_OW 69
20820: ST_TO_ADDR
// if not tmp then
20821: LD_VAR 0 1
20825: NOT
20826: IFFALSE 20830
// exit ;
20828: GO 20843
// DestroyUnit ( tmp [ 1 ] ) ;
20830: LD_VAR 0 1
20834: PUSH
20835: LD_INT 1
20837: ARRAY
20838: PPUSH
20839: CALL_OW 65
// end ;
20843: PPOPN 1
20845: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20846: LD_EXP 39
20850: PUSH
20851: LD_EXP 77
20855: AND
20856: IFFALSE 20985
20858: GO 20860
20860: DISABLE
20861: LD_INT 0
20863: PPUSH
// begin uc_side := 0 ;
20864: LD_ADDR_OWVAR 20
20868: PUSH
20869: LD_INT 0
20871: ST_TO_ADDR
// uc_nation := nation_arabian ;
20872: LD_ADDR_OWVAR 21
20876: PUSH
20877: LD_INT 2
20879: ST_TO_ADDR
// hc_gallery :=  ;
20880: LD_ADDR_OWVAR 33
20884: PUSH
20885: LD_STRING 
20887: ST_TO_ADDR
// hc_name :=  ;
20888: LD_ADDR_OWVAR 26
20892: PUSH
20893: LD_STRING 
20895: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20896: LD_INT 1
20898: PPUSH
20899: LD_INT 11
20901: PPUSH
20902: LD_INT 10
20904: PPUSH
20905: CALL_OW 380
// un := CreateHuman ;
20909: LD_ADDR_VAR 0 1
20913: PUSH
20914: CALL_OW 44
20918: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20919: LD_VAR 0 1
20923: PPUSH
20924: LD_INT 1
20926: PPUSH
20927: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20931: LD_INT 35
20933: PPUSH
20934: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20938: LD_VAR 0 1
20942: PPUSH
20943: LD_INT 22
20945: PUSH
20946: LD_OWVAR 2
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PPUSH
20955: CALL_OW 69
20959: PPUSH
20960: LD_VAR 0 1
20964: PPUSH
20965: CALL_OW 74
20969: PPUSH
20970: CALL_OW 115
// until IsDead ( un ) ;
20974: LD_VAR 0 1
20978: PPUSH
20979: CALL_OW 301
20983: IFFALSE 20931
// end ;
20985: PPOPN 1
20987: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20988: LD_EXP 39
20992: PUSH
20993: LD_EXP 79
20997: AND
20998: IFFALSE 21010
21000: GO 21002
21002: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21003: LD_STRING earthquake(getX(game), 0, 32)
21005: PPUSH
21006: CALL_OW 559
21010: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21011: LD_EXP 39
21015: PUSH
21016: LD_EXP 80
21020: AND
21021: IFFALSE 21112
21023: GO 21025
21025: DISABLE
21026: LD_INT 0
21028: PPUSH
// begin enable ;
21029: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21030: LD_ADDR_VAR 0 1
21034: PUSH
21035: LD_INT 22
21037: PUSH
21038: LD_OWVAR 2
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 21
21049: PUSH
21050: LD_INT 2
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 33
21059: PUSH
21060: LD_INT 3
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: LIST
21071: PPUSH
21072: CALL_OW 69
21076: ST_TO_ADDR
// if not tmp then
21077: LD_VAR 0 1
21081: NOT
21082: IFFALSE 21086
// exit ;
21084: GO 21112
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21086: LD_VAR 0 1
21090: PUSH
21091: LD_INT 1
21093: PPUSH
21094: LD_VAR 0 1
21098: PPUSH
21099: CALL_OW 12
21103: ARRAY
21104: PPUSH
21105: LD_INT 1
21107: PPUSH
21108: CALL_OW 234
// end ;
21112: PPOPN 1
21114: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21115: LD_EXP 39
21119: PUSH
21120: LD_EXP 81
21124: AND
21125: IFFALSE 21266
21127: GO 21129
21129: DISABLE
21130: LD_INT 0
21132: PPUSH
21133: PPUSH
21134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21135: LD_ADDR_VAR 0 3
21139: PUSH
21140: LD_INT 22
21142: PUSH
21143: LD_OWVAR 2
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 25
21154: PUSH
21155: LD_INT 1
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PPUSH
21166: CALL_OW 69
21170: ST_TO_ADDR
// if not tmp then
21171: LD_VAR 0 3
21175: NOT
21176: IFFALSE 21180
// exit ;
21178: GO 21266
// un := tmp [ rand ( 1 , tmp ) ] ;
21180: LD_ADDR_VAR 0 2
21184: PUSH
21185: LD_VAR 0 3
21189: PUSH
21190: LD_INT 1
21192: PPUSH
21193: LD_VAR 0 3
21197: PPUSH
21198: CALL_OW 12
21202: ARRAY
21203: ST_TO_ADDR
// if Crawls ( un ) then
21204: LD_VAR 0 2
21208: PPUSH
21209: CALL_OW 318
21213: IFFALSE 21224
// ComWalk ( un ) ;
21215: LD_VAR 0 2
21219: PPUSH
21220: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21224: LD_VAR 0 2
21228: PPUSH
21229: LD_INT 9
21231: PPUSH
21232: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21236: LD_INT 28
21238: PPUSH
21239: LD_OWVAR 2
21243: PPUSH
21244: LD_INT 2
21246: PPUSH
21247: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21251: LD_INT 29
21253: PPUSH
21254: LD_OWVAR 2
21258: PPUSH
21259: LD_INT 2
21261: PPUSH
21262: CALL_OW 322
// end ;
21266: PPOPN 3
21268: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21269: LD_EXP 39
21273: PUSH
21274: LD_EXP 82
21278: AND
21279: IFFALSE 21390
21281: GO 21283
21283: DISABLE
21284: LD_INT 0
21286: PPUSH
21287: PPUSH
21288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21289: LD_ADDR_VAR 0 3
21293: PUSH
21294: LD_INT 22
21296: PUSH
21297: LD_OWVAR 2
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 25
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PPUSH
21320: CALL_OW 69
21324: ST_TO_ADDR
// if not tmp then
21325: LD_VAR 0 3
21329: NOT
21330: IFFALSE 21334
// exit ;
21332: GO 21390
// un := tmp [ rand ( 1 , tmp ) ] ;
21334: LD_ADDR_VAR 0 2
21338: PUSH
21339: LD_VAR 0 3
21343: PUSH
21344: LD_INT 1
21346: PPUSH
21347: LD_VAR 0 3
21351: PPUSH
21352: CALL_OW 12
21356: ARRAY
21357: ST_TO_ADDR
// if Crawls ( un ) then
21358: LD_VAR 0 2
21362: PPUSH
21363: CALL_OW 318
21367: IFFALSE 21378
// ComWalk ( un ) ;
21369: LD_VAR 0 2
21373: PPUSH
21374: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21378: LD_VAR 0 2
21382: PPUSH
21383: LD_INT 8
21385: PPUSH
21386: CALL_OW 336
// end ;
21390: PPOPN 3
21392: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21393: LD_EXP 39
21397: PUSH
21398: LD_EXP 83
21402: AND
21403: IFFALSE 21547
21405: GO 21407
21407: DISABLE
21408: LD_INT 0
21410: PPUSH
21411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21412: LD_ADDR_VAR 0 2
21416: PUSH
21417: LD_INT 22
21419: PUSH
21420: LD_OWVAR 2
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 21
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 2
21441: PUSH
21442: LD_INT 34
21444: PUSH
21445: LD_INT 12
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 34
21454: PUSH
21455: LD_INT 51
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 34
21464: PUSH
21465: LD_INT 32
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: LIST
21482: PPUSH
21483: CALL_OW 69
21487: ST_TO_ADDR
// if not tmp then
21488: LD_VAR 0 2
21492: NOT
21493: IFFALSE 21497
// exit ;
21495: GO 21547
// for i in tmp do
21497: LD_ADDR_VAR 0 1
21501: PUSH
21502: LD_VAR 0 2
21506: PUSH
21507: FOR_IN
21508: IFFALSE 21545
// if GetCargo ( i , mat_artifact ) = 0 then
21510: LD_VAR 0 1
21514: PPUSH
21515: LD_INT 4
21517: PPUSH
21518: CALL_OW 289
21522: PUSH
21523: LD_INT 0
21525: EQUAL
21526: IFFALSE 21543
// SetCargo ( i , mat_siberit , 100 ) ;
21528: LD_VAR 0 1
21532: PPUSH
21533: LD_INT 3
21535: PPUSH
21536: LD_INT 100
21538: PPUSH
21539: CALL_OW 290
21543: GO 21507
21545: POP
21546: POP
// end ;
21547: PPOPN 2
21549: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21550: LD_EXP 39
21554: PUSH
21555: LD_EXP 84
21559: AND
21560: IFFALSE 21743
21562: GO 21564
21564: DISABLE
21565: LD_INT 0
21567: PPUSH
21568: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21569: LD_ADDR_VAR 0 2
21573: PUSH
21574: LD_INT 22
21576: PUSH
21577: LD_OWVAR 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PPUSH
21586: CALL_OW 69
21590: ST_TO_ADDR
// if not tmp then
21591: LD_VAR 0 2
21595: NOT
21596: IFFALSE 21600
// exit ;
21598: GO 21743
// for i := 1 to 2 do
21600: LD_ADDR_VAR 0 1
21604: PUSH
21605: DOUBLE
21606: LD_INT 1
21608: DEC
21609: ST_TO_ADDR
21610: LD_INT 2
21612: PUSH
21613: FOR_TO
21614: IFFALSE 21741
// begin uc_side := your_side ;
21616: LD_ADDR_OWVAR 20
21620: PUSH
21621: LD_OWVAR 2
21625: ST_TO_ADDR
// uc_nation := nation_american ;
21626: LD_ADDR_OWVAR 21
21630: PUSH
21631: LD_INT 1
21633: ST_TO_ADDR
// vc_chassis := us_morphling ;
21634: LD_ADDR_OWVAR 37
21638: PUSH
21639: LD_INT 5
21641: ST_TO_ADDR
// vc_engine := engine_siberite ;
21642: LD_ADDR_OWVAR 39
21646: PUSH
21647: LD_INT 3
21649: ST_TO_ADDR
// vc_control := control_computer ;
21650: LD_ADDR_OWVAR 38
21654: PUSH
21655: LD_INT 3
21657: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21658: LD_ADDR_OWVAR 40
21662: PUSH
21663: LD_INT 10
21665: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21666: LD_VAR 0 2
21670: PUSH
21671: LD_INT 1
21673: ARRAY
21674: PPUSH
21675: CALL_OW 310
21679: NOT
21680: IFFALSE 21727
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21682: CALL_OW 45
21686: PPUSH
21687: LD_VAR 0 2
21691: PUSH
21692: LD_INT 1
21694: ARRAY
21695: PPUSH
21696: CALL_OW 250
21700: PPUSH
21701: LD_VAR 0 2
21705: PUSH
21706: LD_INT 1
21708: ARRAY
21709: PPUSH
21710: CALL_OW 251
21714: PPUSH
21715: LD_INT 12
21717: PPUSH
21718: LD_INT 1
21720: PPUSH
21721: CALL_OW 50
21725: GO 21739
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21727: CALL_OW 45
21731: PPUSH
21732: LD_INT 1
21734: PPUSH
21735: CALL_OW 51
// end ;
21739: GO 21613
21741: POP
21742: POP
// end ;
21743: PPOPN 2
21745: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21746: LD_EXP 39
21750: PUSH
21751: LD_EXP 85
21755: AND
21756: IFFALSE 21978
21758: GO 21760
21760: DISABLE
21761: LD_INT 0
21763: PPUSH
21764: PPUSH
21765: PPUSH
21766: PPUSH
21767: PPUSH
21768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21769: LD_ADDR_VAR 0 6
21773: PUSH
21774: LD_INT 22
21776: PUSH
21777: LD_OWVAR 2
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 21
21788: PUSH
21789: LD_INT 1
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 3
21798: PUSH
21799: LD_INT 23
21801: PUSH
21802: LD_INT 0
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: LIST
21817: PPUSH
21818: CALL_OW 69
21822: ST_TO_ADDR
// if not tmp then
21823: LD_VAR 0 6
21827: NOT
21828: IFFALSE 21832
// exit ;
21830: GO 21978
// s1 := rand ( 1 , 4 ) ;
21832: LD_ADDR_VAR 0 2
21836: PUSH
21837: LD_INT 1
21839: PPUSH
21840: LD_INT 4
21842: PPUSH
21843: CALL_OW 12
21847: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21848: LD_ADDR_VAR 0 4
21852: PUSH
21853: LD_VAR 0 6
21857: PUSH
21858: LD_INT 1
21860: ARRAY
21861: PPUSH
21862: LD_VAR 0 2
21866: PPUSH
21867: CALL_OW 259
21871: ST_TO_ADDR
// if s1 = 1 then
21872: LD_VAR 0 2
21876: PUSH
21877: LD_INT 1
21879: EQUAL
21880: IFFALSE 21900
// s2 := rand ( 2 , 4 ) else
21882: LD_ADDR_VAR 0 3
21886: PUSH
21887: LD_INT 2
21889: PPUSH
21890: LD_INT 4
21892: PPUSH
21893: CALL_OW 12
21897: ST_TO_ADDR
21898: GO 21908
// s2 := 1 ;
21900: LD_ADDR_VAR 0 3
21904: PUSH
21905: LD_INT 1
21907: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21908: LD_ADDR_VAR 0 5
21912: PUSH
21913: LD_VAR 0 6
21917: PUSH
21918: LD_INT 1
21920: ARRAY
21921: PPUSH
21922: LD_VAR 0 3
21926: PPUSH
21927: CALL_OW 259
21931: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21932: LD_VAR 0 6
21936: PUSH
21937: LD_INT 1
21939: ARRAY
21940: PPUSH
21941: LD_VAR 0 2
21945: PPUSH
21946: LD_VAR 0 5
21950: PPUSH
21951: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21955: LD_VAR 0 6
21959: PUSH
21960: LD_INT 1
21962: ARRAY
21963: PPUSH
21964: LD_VAR 0 3
21968: PPUSH
21969: LD_VAR 0 4
21973: PPUSH
21974: CALL_OW 237
// end ;
21978: PPOPN 6
21980: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21981: LD_EXP 39
21985: PUSH
21986: LD_EXP 86
21990: AND
21991: IFFALSE 22070
21993: GO 21995
21995: DISABLE
21996: LD_INT 0
21998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21999: LD_ADDR_VAR 0 1
22003: PUSH
22004: LD_INT 22
22006: PUSH
22007: LD_OWVAR 2
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 30
22018: PUSH
22019: LD_INT 3
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PPUSH
22030: CALL_OW 69
22034: ST_TO_ADDR
// if not tmp then
22035: LD_VAR 0 1
22039: NOT
22040: IFFALSE 22044
// exit ;
22042: GO 22070
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22044: LD_VAR 0 1
22048: PUSH
22049: LD_INT 1
22051: PPUSH
22052: LD_VAR 0 1
22056: PPUSH
22057: CALL_OW 12
22061: ARRAY
22062: PPUSH
22063: LD_INT 1
22065: PPUSH
22066: CALL_OW 234
// end ;
22070: PPOPN 1
22072: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22073: LD_EXP 39
22077: PUSH
22078: LD_EXP 87
22082: AND
22083: IFFALSE 22195
22085: GO 22087
22087: DISABLE
22088: LD_INT 0
22090: PPUSH
22091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22092: LD_ADDR_VAR 0 2
22096: PUSH
22097: LD_INT 22
22099: PUSH
22100: LD_OWVAR 2
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 2
22111: PUSH
22112: LD_INT 30
22114: PUSH
22115: LD_INT 27
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 30
22124: PUSH
22125: LD_INT 26
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 30
22134: PUSH
22135: LD_INT 28
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PPUSH
22152: CALL_OW 69
22156: ST_TO_ADDR
// if not tmp then
22157: LD_VAR 0 2
22161: NOT
22162: IFFALSE 22166
// exit ;
22164: GO 22195
// for i in tmp do
22166: LD_ADDR_VAR 0 1
22170: PUSH
22171: LD_VAR 0 2
22175: PUSH
22176: FOR_IN
22177: IFFALSE 22193
// SetLives ( i , 1 ) ;
22179: LD_VAR 0 1
22183: PPUSH
22184: LD_INT 1
22186: PPUSH
22187: CALL_OW 234
22191: GO 22176
22193: POP
22194: POP
// end ;
22195: PPOPN 2
22197: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22198: LD_EXP 39
22202: PUSH
22203: LD_EXP 88
22207: AND
22208: IFFALSE 22495
22210: GO 22212
22212: DISABLE
22213: LD_INT 0
22215: PPUSH
22216: PPUSH
22217: PPUSH
// begin i := rand ( 1 , 7 ) ;
22218: LD_ADDR_VAR 0 1
22222: PUSH
22223: LD_INT 1
22225: PPUSH
22226: LD_INT 7
22228: PPUSH
22229: CALL_OW 12
22233: ST_TO_ADDR
// case i of 1 :
22234: LD_VAR 0 1
22238: PUSH
22239: LD_INT 1
22241: DOUBLE
22242: EQUAL
22243: IFTRUE 22247
22245: GO 22257
22247: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22248: LD_STRING earthquake(getX(game), 0, 32)
22250: PPUSH
22251: CALL_OW 559
22255: GO 22495
22257: LD_INT 2
22259: DOUBLE
22260: EQUAL
22261: IFTRUE 22265
22263: GO 22279
22265: POP
// begin ToLua ( displayStucuk(); ) ;
22266: LD_STRING displayStucuk();
22268: PPUSH
22269: CALL_OW 559
// ResetFog ;
22273: CALL_OW 335
// end ; 3 :
22277: GO 22495
22279: LD_INT 3
22281: DOUBLE
22282: EQUAL
22283: IFTRUE 22287
22285: GO 22391
22287: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22288: LD_ADDR_VAR 0 2
22292: PUSH
22293: LD_INT 22
22295: PUSH
22296: LD_OWVAR 2
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 25
22307: PUSH
22308: LD_INT 1
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PPUSH
22319: CALL_OW 69
22323: ST_TO_ADDR
// if not tmp then
22324: LD_VAR 0 2
22328: NOT
22329: IFFALSE 22333
// exit ;
22331: GO 22495
// un := tmp [ rand ( 1 , tmp ) ] ;
22333: LD_ADDR_VAR 0 3
22337: PUSH
22338: LD_VAR 0 2
22342: PUSH
22343: LD_INT 1
22345: PPUSH
22346: LD_VAR 0 2
22350: PPUSH
22351: CALL_OW 12
22355: ARRAY
22356: ST_TO_ADDR
// if Crawls ( un ) then
22357: LD_VAR 0 3
22361: PPUSH
22362: CALL_OW 318
22366: IFFALSE 22377
// ComWalk ( un ) ;
22368: LD_VAR 0 3
22372: PPUSH
22373: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22377: LD_VAR 0 3
22381: PPUSH
22382: LD_INT 8
22384: PPUSH
22385: CALL_OW 336
// end ; 4 :
22389: GO 22495
22391: LD_INT 4
22393: DOUBLE
22394: EQUAL
22395: IFTRUE 22399
22397: GO 22473
22399: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22400: LD_ADDR_VAR 0 2
22404: PUSH
22405: LD_INT 22
22407: PUSH
22408: LD_OWVAR 2
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 30
22419: PUSH
22420: LD_INT 29
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PPUSH
22431: CALL_OW 69
22435: ST_TO_ADDR
// if not tmp then
22436: LD_VAR 0 2
22440: NOT
22441: IFFALSE 22445
// exit ;
22443: GO 22495
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22445: LD_VAR 0 2
22449: PUSH
22450: LD_INT 1
22452: ARRAY
22453: PPUSH
22454: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22458: LD_VAR 0 2
22462: PUSH
22463: LD_INT 1
22465: ARRAY
22466: PPUSH
22467: CALL_OW 65
// end ; 5 .. 7 :
22471: GO 22495
22473: LD_INT 5
22475: DOUBLE
22476: GREATEREQUAL
22477: IFFALSE 22485
22479: LD_INT 7
22481: DOUBLE
22482: LESSEQUAL
22483: IFTRUE 22487
22485: GO 22494
22487: POP
// StreamSibBomb ; end ;
22488: CALL 18732 0 0
22492: GO 22495
22494: POP
// end ;
22495: PPOPN 3
22497: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22498: LD_EXP 39
22502: PUSH
22503: LD_EXP 89
22507: AND
22508: IFFALSE 22664
22510: GO 22512
22512: DISABLE
22513: LD_INT 0
22515: PPUSH
22516: PPUSH
22517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22518: LD_ADDR_VAR 0 2
22522: PUSH
22523: LD_INT 81
22525: PUSH
22526: LD_OWVAR 2
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 2
22537: PUSH
22538: LD_INT 21
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 21
22550: PUSH
22551: LD_INT 2
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: LIST
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PPUSH
22567: CALL_OW 69
22571: ST_TO_ADDR
// if not tmp then
22572: LD_VAR 0 2
22576: NOT
22577: IFFALSE 22581
// exit ;
22579: GO 22664
// p := 0 ;
22581: LD_ADDR_VAR 0 3
22585: PUSH
22586: LD_INT 0
22588: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22589: LD_INT 35
22591: PPUSH
22592: CALL_OW 67
// p := p + 1 ;
22596: LD_ADDR_VAR 0 3
22600: PUSH
22601: LD_VAR 0 3
22605: PUSH
22606: LD_INT 1
22608: PLUS
22609: ST_TO_ADDR
// for i in tmp do
22610: LD_ADDR_VAR 0 1
22614: PUSH
22615: LD_VAR 0 2
22619: PUSH
22620: FOR_IN
22621: IFFALSE 22652
// if GetLives ( i ) < 1000 then
22623: LD_VAR 0 1
22627: PPUSH
22628: CALL_OW 256
22632: PUSH
22633: LD_INT 1000
22635: LESS
22636: IFFALSE 22650
// SetLives ( i , 1000 ) ;
22638: LD_VAR 0 1
22642: PPUSH
22643: LD_INT 1000
22645: PPUSH
22646: CALL_OW 234
22650: GO 22620
22652: POP
22653: POP
// until p > 20 ;
22654: LD_VAR 0 3
22658: PUSH
22659: LD_INT 20
22661: GREATER
22662: IFFALSE 22589
// end ;
22664: PPOPN 3
22666: END
// every 0 0$1 trigger StreamModeActive and sTime do
22667: LD_EXP 39
22671: PUSH
22672: LD_EXP 90
22676: AND
22677: IFFALSE 22712
22679: GO 22681
22681: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22682: LD_INT 28
22684: PPUSH
22685: LD_OWVAR 2
22689: PPUSH
22690: LD_INT 2
22692: PPUSH
22693: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22697: LD_INT 30
22699: PPUSH
22700: LD_OWVAR 2
22704: PPUSH
22705: LD_INT 2
22707: PPUSH
22708: CALL_OW 322
// end ;
22712: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22713: LD_EXP 39
22717: PUSH
22718: LD_EXP 91
22722: AND
22723: IFFALSE 22844
22725: GO 22727
22727: DISABLE
22728: LD_INT 0
22730: PPUSH
22731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22732: LD_ADDR_VAR 0 2
22736: PUSH
22737: LD_INT 22
22739: PUSH
22740: LD_OWVAR 2
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 21
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 3
22761: PUSH
22762: LD_INT 23
22764: PUSH
22765: LD_INT 0
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: LIST
22780: PPUSH
22781: CALL_OW 69
22785: ST_TO_ADDR
// if not tmp then
22786: LD_VAR 0 2
22790: NOT
22791: IFFALSE 22795
// exit ;
22793: GO 22844
// for i in tmp do
22795: LD_ADDR_VAR 0 1
22799: PUSH
22800: LD_VAR 0 2
22804: PUSH
22805: FOR_IN
22806: IFFALSE 22842
// begin if Crawls ( i ) then
22808: LD_VAR 0 1
22812: PPUSH
22813: CALL_OW 318
22817: IFFALSE 22828
// ComWalk ( i ) ;
22819: LD_VAR 0 1
22823: PPUSH
22824: CALL_OW 138
// SetClass ( i , 2 ) ;
22828: LD_VAR 0 1
22832: PPUSH
22833: LD_INT 2
22835: PPUSH
22836: CALL_OW 336
// end ;
22840: GO 22805
22842: POP
22843: POP
// end ;
22844: PPOPN 2
22846: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22847: LD_EXP 39
22851: PUSH
22852: LD_EXP 92
22856: AND
22857: IFFALSE 23145
22859: GO 22861
22861: DISABLE
22862: LD_INT 0
22864: PPUSH
22865: PPUSH
22866: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22867: LD_OWVAR 2
22871: PPUSH
22872: LD_INT 9
22874: PPUSH
22875: LD_INT 1
22877: PPUSH
22878: LD_INT 1
22880: PPUSH
22881: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22885: LD_INT 9
22887: PPUSH
22888: LD_OWVAR 2
22892: PPUSH
22893: CALL_OW 343
// uc_side := 9 ;
22897: LD_ADDR_OWVAR 20
22901: PUSH
22902: LD_INT 9
22904: ST_TO_ADDR
// uc_nation := 2 ;
22905: LD_ADDR_OWVAR 21
22909: PUSH
22910: LD_INT 2
22912: ST_TO_ADDR
// hc_name := Dark Warrior ;
22913: LD_ADDR_OWVAR 26
22917: PUSH
22918: LD_STRING Dark Warrior
22920: ST_TO_ADDR
// hc_gallery :=  ;
22921: LD_ADDR_OWVAR 33
22925: PUSH
22926: LD_STRING 
22928: ST_TO_ADDR
// hc_noskilllimit := true ;
22929: LD_ADDR_OWVAR 76
22933: PUSH
22934: LD_INT 1
22936: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22937: LD_ADDR_OWVAR 31
22941: PUSH
22942: LD_INT 30
22944: PUSH
22945: LD_INT 30
22947: PUSH
22948: LD_INT 30
22950: PUSH
22951: LD_INT 30
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: ST_TO_ADDR
// un := CreateHuman ;
22960: LD_ADDR_VAR 0 3
22964: PUSH
22965: CALL_OW 44
22969: ST_TO_ADDR
// hc_noskilllimit := false ;
22970: LD_ADDR_OWVAR 76
22974: PUSH
22975: LD_INT 0
22977: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22978: LD_VAR 0 3
22982: PPUSH
22983: LD_INT 1
22985: PPUSH
22986: CALL_OW 51
// ToLua ( playRanger() ) ;
22990: LD_STRING playRanger()
22992: PPUSH
22993: CALL_OW 559
// p := 0 ;
22997: LD_ADDR_VAR 0 2
23001: PUSH
23002: LD_INT 0
23004: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23005: LD_INT 35
23007: PPUSH
23008: CALL_OW 67
// p := p + 1 ;
23012: LD_ADDR_VAR 0 2
23016: PUSH
23017: LD_VAR 0 2
23021: PUSH
23022: LD_INT 1
23024: PLUS
23025: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23026: LD_VAR 0 3
23030: PPUSH
23031: CALL_OW 256
23035: PUSH
23036: LD_INT 1000
23038: LESS
23039: IFFALSE 23053
// SetLives ( un , 1000 ) ;
23041: LD_VAR 0 3
23045: PPUSH
23046: LD_INT 1000
23048: PPUSH
23049: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23053: LD_VAR 0 3
23057: PPUSH
23058: LD_INT 81
23060: PUSH
23061: LD_OWVAR 2
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 91
23072: PUSH
23073: LD_VAR 0 3
23077: PUSH
23078: LD_INT 30
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: LIST
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PPUSH
23090: CALL_OW 69
23094: PPUSH
23095: LD_VAR 0 3
23099: PPUSH
23100: CALL_OW 74
23104: PPUSH
23105: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23109: LD_VAR 0 2
23113: PUSH
23114: LD_INT 80
23116: GREATER
23117: PUSH
23118: LD_VAR 0 3
23122: PPUSH
23123: CALL_OW 301
23127: OR
23128: IFFALSE 23005
// if un then
23130: LD_VAR 0 3
23134: IFFALSE 23145
// RemoveUnit ( un ) ;
23136: LD_VAR 0 3
23140: PPUSH
23141: CALL_OW 64
// end ;
23145: PPOPN 3
23147: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23148: LD_EXP 93
23152: IFFALSE 23268
23154: GO 23156
23156: DISABLE
23157: LD_INT 0
23159: PPUSH
23160: PPUSH
23161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23162: LD_ADDR_VAR 0 2
23166: PUSH
23167: LD_INT 81
23169: PUSH
23170: LD_OWVAR 2
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 21
23181: PUSH
23182: LD_INT 1
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PPUSH
23193: CALL_OW 69
23197: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23198: LD_STRING playComputer()
23200: PPUSH
23201: CALL_OW 559
// if not tmp then
23205: LD_VAR 0 2
23209: NOT
23210: IFFALSE 23214
// exit ;
23212: GO 23268
// for i in tmp do
23214: LD_ADDR_VAR 0 1
23218: PUSH
23219: LD_VAR 0 2
23223: PUSH
23224: FOR_IN
23225: IFFALSE 23266
// for j := 1 to 4 do
23227: LD_ADDR_VAR 0 3
23231: PUSH
23232: DOUBLE
23233: LD_INT 1
23235: DEC
23236: ST_TO_ADDR
23237: LD_INT 4
23239: PUSH
23240: FOR_TO
23241: IFFALSE 23262
// SetSkill ( i , j , 10 ) ;
23243: LD_VAR 0 1
23247: PPUSH
23248: LD_VAR 0 3
23252: PPUSH
23253: LD_INT 10
23255: PPUSH
23256: CALL_OW 237
23260: GO 23240
23262: POP
23263: POP
23264: GO 23224
23266: POP
23267: POP
// end ;
23268: PPOPN 3
23270: END
// every 0 0$1 trigger s30 do var i , tmp ;
23271: LD_EXP 94
23275: IFFALSE 23344
23277: GO 23279
23279: DISABLE
23280: LD_INT 0
23282: PPUSH
23283: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23284: LD_ADDR_VAR 0 2
23288: PUSH
23289: LD_INT 22
23291: PUSH
23292: LD_OWVAR 2
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PPUSH
23301: CALL_OW 69
23305: ST_TO_ADDR
// if not tmp then
23306: LD_VAR 0 2
23310: NOT
23311: IFFALSE 23315
// exit ;
23313: GO 23344
// for i in tmp do
23315: LD_ADDR_VAR 0 1
23319: PUSH
23320: LD_VAR 0 2
23324: PUSH
23325: FOR_IN
23326: IFFALSE 23342
// SetLives ( i , 300 ) ;
23328: LD_VAR 0 1
23332: PPUSH
23333: LD_INT 300
23335: PPUSH
23336: CALL_OW 234
23340: GO 23325
23342: POP
23343: POP
// end ;
23344: PPOPN 2
23346: END
// every 0 0$1 trigger s60 do var i , tmp ;
23347: LD_EXP 95
23351: IFFALSE 23420
23353: GO 23355
23355: DISABLE
23356: LD_INT 0
23358: PPUSH
23359: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23360: LD_ADDR_VAR 0 2
23364: PUSH
23365: LD_INT 22
23367: PUSH
23368: LD_OWVAR 2
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PPUSH
23377: CALL_OW 69
23381: ST_TO_ADDR
// if not tmp then
23382: LD_VAR 0 2
23386: NOT
23387: IFFALSE 23391
// exit ;
23389: GO 23420
// for i in tmp do
23391: LD_ADDR_VAR 0 1
23395: PUSH
23396: LD_VAR 0 2
23400: PUSH
23401: FOR_IN
23402: IFFALSE 23418
// SetLives ( i , 600 ) ;
23404: LD_VAR 0 1
23408: PPUSH
23409: LD_INT 600
23411: PPUSH
23412: CALL_OW 234
23416: GO 23401
23418: POP
23419: POP
// end ;
23420: PPOPN 2
23422: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23423: LD_INT 0
23425: PPUSH
// case cmd of 301 :
23426: LD_VAR 0 1
23430: PUSH
23431: LD_INT 301
23433: DOUBLE
23434: EQUAL
23435: IFTRUE 23439
23437: GO 23471
23439: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23440: LD_VAR 0 6
23444: PPUSH
23445: LD_VAR 0 7
23449: PPUSH
23450: LD_VAR 0 8
23454: PPUSH
23455: LD_VAR 0 4
23459: PPUSH
23460: LD_VAR 0 5
23464: PPUSH
23465: CALL 24672 0 5
23469: GO 23592
23471: LD_INT 302
23473: DOUBLE
23474: EQUAL
23475: IFTRUE 23479
23477: GO 23516
23479: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23480: LD_VAR 0 6
23484: PPUSH
23485: LD_VAR 0 7
23489: PPUSH
23490: LD_VAR 0 8
23494: PPUSH
23495: LD_VAR 0 9
23499: PPUSH
23500: LD_VAR 0 4
23504: PPUSH
23505: LD_VAR 0 5
23509: PPUSH
23510: CALL 24763 0 6
23514: GO 23592
23516: LD_INT 303
23518: DOUBLE
23519: EQUAL
23520: IFTRUE 23524
23522: GO 23561
23524: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23525: LD_VAR 0 6
23529: PPUSH
23530: LD_VAR 0 7
23534: PPUSH
23535: LD_VAR 0 8
23539: PPUSH
23540: LD_VAR 0 9
23544: PPUSH
23545: LD_VAR 0 4
23549: PPUSH
23550: LD_VAR 0 5
23554: PPUSH
23555: CALL 23597 0 6
23559: GO 23592
23561: LD_INT 304
23563: DOUBLE
23564: EQUAL
23565: IFTRUE 23569
23567: GO 23591
23569: POP
// hHackTeleport ( unit , x , y ) ; end ;
23570: LD_VAR 0 2
23574: PPUSH
23575: LD_VAR 0 4
23579: PPUSH
23580: LD_VAR 0 5
23584: PPUSH
23585: CALL 25356 0 3
23589: GO 23592
23591: POP
// end ;
23592: LD_VAR 0 12
23596: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23597: LD_INT 0
23599: PPUSH
23600: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23601: LD_VAR 0 1
23605: PUSH
23606: LD_INT 1
23608: LESS
23609: PUSH
23610: LD_VAR 0 1
23614: PUSH
23615: LD_INT 3
23617: GREATER
23618: OR
23619: PUSH
23620: LD_VAR 0 5
23624: PPUSH
23625: LD_VAR 0 6
23629: PPUSH
23630: CALL_OW 428
23634: OR
23635: IFFALSE 23639
// exit ;
23637: GO 24359
// uc_side := your_side ;
23639: LD_ADDR_OWVAR 20
23643: PUSH
23644: LD_OWVAR 2
23648: ST_TO_ADDR
// uc_nation := nation ;
23649: LD_ADDR_OWVAR 21
23653: PUSH
23654: LD_VAR 0 1
23658: ST_TO_ADDR
// bc_level = 1 ;
23659: LD_ADDR_OWVAR 43
23663: PUSH
23664: LD_INT 1
23666: ST_TO_ADDR
// case btype of 1 :
23667: LD_VAR 0 2
23671: PUSH
23672: LD_INT 1
23674: DOUBLE
23675: EQUAL
23676: IFTRUE 23680
23678: GO 23691
23680: POP
// bc_type := b_depot ; 2 :
23681: LD_ADDR_OWVAR 42
23685: PUSH
23686: LD_INT 0
23688: ST_TO_ADDR
23689: GO 24303
23691: LD_INT 2
23693: DOUBLE
23694: EQUAL
23695: IFTRUE 23699
23697: GO 23710
23699: POP
// bc_type := b_warehouse ; 3 :
23700: LD_ADDR_OWVAR 42
23704: PUSH
23705: LD_INT 1
23707: ST_TO_ADDR
23708: GO 24303
23710: LD_INT 3
23712: DOUBLE
23713: EQUAL
23714: IFTRUE 23718
23716: GO 23729
23718: POP
// bc_type := b_lab ; 4 .. 9 :
23719: LD_ADDR_OWVAR 42
23723: PUSH
23724: LD_INT 6
23726: ST_TO_ADDR
23727: GO 24303
23729: LD_INT 4
23731: DOUBLE
23732: GREATEREQUAL
23733: IFFALSE 23741
23735: LD_INT 9
23737: DOUBLE
23738: LESSEQUAL
23739: IFTRUE 23743
23741: GO 23795
23743: POP
// begin bc_type := b_lab_half ;
23744: LD_ADDR_OWVAR 42
23748: PUSH
23749: LD_INT 7
23751: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23752: LD_ADDR_OWVAR 44
23756: PUSH
23757: LD_INT 10
23759: PUSH
23760: LD_INT 11
23762: PUSH
23763: LD_INT 12
23765: PUSH
23766: LD_INT 15
23768: PUSH
23769: LD_INT 14
23771: PUSH
23772: LD_INT 13
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: PUSH
23783: LD_VAR 0 2
23787: PUSH
23788: LD_INT 3
23790: MINUS
23791: ARRAY
23792: ST_TO_ADDR
// end ; 10 .. 13 :
23793: GO 24303
23795: LD_INT 10
23797: DOUBLE
23798: GREATEREQUAL
23799: IFFALSE 23807
23801: LD_INT 13
23803: DOUBLE
23804: LESSEQUAL
23805: IFTRUE 23809
23807: GO 23886
23809: POP
// begin bc_type := b_lab_full ;
23810: LD_ADDR_OWVAR 42
23814: PUSH
23815: LD_INT 8
23817: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23818: LD_ADDR_OWVAR 44
23822: PUSH
23823: LD_INT 10
23825: PUSH
23826: LD_INT 12
23828: PUSH
23829: LD_INT 14
23831: PUSH
23832: LD_INT 13
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: PUSH
23841: LD_VAR 0 2
23845: PUSH
23846: LD_INT 9
23848: MINUS
23849: ARRAY
23850: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23851: LD_ADDR_OWVAR 45
23855: PUSH
23856: LD_INT 11
23858: PUSH
23859: LD_INT 15
23861: PUSH
23862: LD_INT 12
23864: PUSH
23865: LD_INT 15
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: PUSH
23874: LD_VAR 0 2
23878: PUSH
23879: LD_INT 9
23881: MINUS
23882: ARRAY
23883: ST_TO_ADDR
// end ; 14 :
23884: GO 24303
23886: LD_INT 14
23888: DOUBLE
23889: EQUAL
23890: IFTRUE 23894
23892: GO 23905
23894: POP
// bc_type := b_workshop ; 15 :
23895: LD_ADDR_OWVAR 42
23899: PUSH
23900: LD_INT 2
23902: ST_TO_ADDR
23903: GO 24303
23905: LD_INT 15
23907: DOUBLE
23908: EQUAL
23909: IFTRUE 23913
23911: GO 23924
23913: POP
// bc_type := b_factory ; 16 :
23914: LD_ADDR_OWVAR 42
23918: PUSH
23919: LD_INT 3
23921: ST_TO_ADDR
23922: GO 24303
23924: LD_INT 16
23926: DOUBLE
23927: EQUAL
23928: IFTRUE 23932
23930: GO 23943
23932: POP
// bc_type := b_ext_gun ; 17 :
23933: LD_ADDR_OWVAR 42
23937: PUSH
23938: LD_INT 17
23940: ST_TO_ADDR
23941: GO 24303
23943: LD_INT 17
23945: DOUBLE
23946: EQUAL
23947: IFTRUE 23951
23949: GO 23979
23951: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23952: LD_ADDR_OWVAR 42
23956: PUSH
23957: LD_INT 19
23959: PUSH
23960: LD_INT 23
23962: PUSH
23963: LD_INT 19
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: LIST
23970: PUSH
23971: LD_VAR 0 1
23975: ARRAY
23976: ST_TO_ADDR
23977: GO 24303
23979: LD_INT 18
23981: DOUBLE
23982: EQUAL
23983: IFTRUE 23987
23985: GO 23998
23987: POP
// bc_type := b_ext_radar ; 19 :
23988: LD_ADDR_OWVAR 42
23992: PUSH
23993: LD_INT 20
23995: ST_TO_ADDR
23996: GO 24303
23998: LD_INT 19
24000: DOUBLE
24001: EQUAL
24002: IFTRUE 24006
24004: GO 24017
24006: POP
// bc_type := b_ext_radio ; 20 :
24007: LD_ADDR_OWVAR 42
24011: PUSH
24012: LD_INT 22
24014: ST_TO_ADDR
24015: GO 24303
24017: LD_INT 20
24019: DOUBLE
24020: EQUAL
24021: IFTRUE 24025
24023: GO 24036
24025: POP
// bc_type := b_ext_siberium ; 21 :
24026: LD_ADDR_OWVAR 42
24030: PUSH
24031: LD_INT 21
24033: ST_TO_ADDR
24034: GO 24303
24036: LD_INT 21
24038: DOUBLE
24039: EQUAL
24040: IFTRUE 24044
24042: GO 24055
24044: POP
// bc_type := b_ext_computer ; 22 :
24045: LD_ADDR_OWVAR 42
24049: PUSH
24050: LD_INT 24
24052: ST_TO_ADDR
24053: GO 24303
24055: LD_INT 22
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24063
24061: GO 24074
24063: POP
// bc_type := b_ext_track ; 23 :
24064: LD_ADDR_OWVAR 42
24068: PUSH
24069: LD_INT 16
24071: ST_TO_ADDR
24072: GO 24303
24074: LD_INT 23
24076: DOUBLE
24077: EQUAL
24078: IFTRUE 24082
24080: GO 24093
24082: POP
// bc_type := b_ext_laser ; 24 :
24083: LD_ADDR_OWVAR 42
24087: PUSH
24088: LD_INT 25
24090: ST_TO_ADDR
24091: GO 24303
24093: LD_INT 24
24095: DOUBLE
24096: EQUAL
24097: IFTRUE 24101
24099: GO 24112
24101: POP
// bc_type := b_control_tower ; 25 :
24102: LD_ADDR_OWVAR 42
24106: PUSH
24107: LD_INT 36
24109: ST_TO_ADDR
24110: GO 24303
24112: LD_INT 25
24114: DOUBLE
24115: EQUAL
24116: IFTRUE 24120
24118: GO 24131
24120: POP
// bc_type := b_breastwork ; 26 :
24121: LD_ADDR_OWVAR 42
24125: PUSH
24126: LD_INT 31
24128: ST_TO_ADDR
24129: GO 24303
24131: LD_INT 26
24133: DOUBLE
24134: EQUAL
24135: IFTRUE 24139
24137: GO 24150
24139: POP
// bc_type := b_bunker ; 27 :
24140: LD_ADDR_OWVAR 42
24144: PUSH
24145: LD_INT 32
24147: ST_TO_ADDR
24148: GO 24303
24150: LD_INT 27
24152: DOUBLE
24153: EQUAL
24154: IFTRUE 24158
24156: GO 24169
24158: POP
// bc_type := b_turret ; 28 :
24159: LD_ADDR_OWVAR 42
24163: PUSH
24164: LD_INT 33
24166: ST_TO_ADDR
24167: GO 24303
24169: LD_INT 28
24171: DOUBLE
24172: EQUAL
24173: IFTRUE 24177
24175: GO 24188
24177: POP
// bc_type := b_armoury ; 29 :
24178: LD_ADDR_OWVAR 42
24182: PUSH
24183: LD_INT 4
24185: ST_TO_ADDR
24186: GO 24303
24188: LD_INT 29
24190: DOUBLE
24191: EQUAL
24192: IFTRUE 24196
24194: GO 24207
24196: POP
// bc_type := b_barracks ; 30 :
24197: LD_ADDR_OWVAR 42
24201: PUSH
24202: LD_INT 5
24204: ST_TO_ADDR
24205: GO 24303
24207: LD_INT 30
24209: DOUBLE
24210: EQUAL
24211: IFTRUE 24215
24213: GO 24226
24215: POP
// bc_type := b_solar_power ; 31 :
24216: LD_ADDR_OWVAR 42
24220: PUSH
24221: LD_INT 27
24223: ST_TO_ADDR
24224: GO 24303
24226: LD_INT 31
24228: DOUBLE
24229: EQUAL
24230: IFTRUE 24234
24232: GO 24245
24234: POP
// bc_type := b_oil_power ; 32 :
24235: LD_ADDR_OWVAR 42
24239: PUSH
24240: LD_INT 26
24242: ST_TO_ADDR
24243: GO 24303
24245: LD_INT 32
24247: DOUBLE
24248: EQUAL
24249: IFTRUE 24253
24251: GO 24264
24253: POP
// bc_type := b_siberite_power ; 33 :
24254: LD_ADDR_OWVAR 42
24258: PUSH
24259: LD_INT 28
24261: ST_TO_ADDR
24262: GO 24303
24264: LD_INT 33
24266: DOUBLE
24267: EQUAL
24268: IFTRUE 24272
24270: GO 24283
24272: POP
// bc_type := b_oil_mine ; 34 :
24273: LD_ADDR_OWVAR 42
24277: PUSH
24278: LD_INT 29
24280: ST_TO_ADDR
24281: GO 24303
24283: LD_INT 34
24285: DOUBLE
24286: EQUAL
24287: IFTRUE 24291
24289: GO 24302
24291: POP
// bc_type := b_siberite_mine ; end ;
24292: LD_ADDR_OWVAR 42
24296: PUSH
24297: LD_INT 30
24299: ST_TO_ADDR
24300: GO 24303
24302: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24303: LD_ADDR_VAR 0 8
24307: PUSH
24308: LD_VAR 0 5
24312: PPUSH
24313: LD_VAR 0 6
24317: PPUSH
24318: LD_VAR 0 3
24322: PPUSH
24323: CALL_OW 47
24327: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24328: LD_OWVAR 42
24332: PUSH
24333: LD_INT 32
24335: PUSH
24336: LD_INT 33
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: IN
24343: IFFALSE 24359
// PlaceWeaponTurret ( b , weapon ) ;
24345: LD_VAR 0 8
24349: PPUSH
24350: LD_VAR 0 4
24354: PPUSH
24355: CALL_OW 431
// end ;
24359: LD_VAR 0 7
24363: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24364: LD_INT 0
24366: PPUSH
24367: PPUSH
24368: PPUSH
24369: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24370: LD_ADDR_VAR 0 4
24374: PUSH
24375: LD_INT 22
24377: PUSH
24378: LD_OWVAR 2
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: LD_INT 30
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 30
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: LIST
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PPUSH
24419: CALL_OW 69
24423: ST_TO_ADDR
// if not tmp then
24424: LD_VAR 0 4
24428: NOT
24429: IFFALSE 24433
// exit ;
24431: GO 24492
// for i in tmp do
24433: LD_ADDR_VAR 0 2
24437: PUSH
24438: LD_VAR 0 4
24442: PUSH
24443: FOR_IN
24444: IFFALSE 24490
// for j = 1 to 3 do
24446: LD_ADDR_VAR 0 3
24450: PUSH
24451: DOUBLE
24452: LD_INT 1
24454: DEC
24455: ST_TO_ADDR
24456: LD_INT 3
24458: PUSH
24459: FOR_TO
24460: IFFALSE 24486
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24462: LD_VAR 0 2
24466: PPUSH
24467: CALL_OW 274
24471: PPUSH
24472: LD_VAR 0 3
24476: PPUSH
24477: LD_INT 99999
24479: PPUSH
24480: CALL_OW 277
24484: GO 24459
24486: POP
24487: POP
24488: GO 24443
24490: POP
24491: POP
// end ;
24492: LD_VAR 0 1
24496: RET
// export function hHackSetLevel10 ; var i , j ; begin
24497: LD_INT 0
24499: PPUSH
24500: PPUSH
24501: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24502: LD_ADDR_VAR 0 2
24506: PUSH
24507: LD_INT 21
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PPUSH
24517: CALL_OW 69
24521: PUSH
24522: FOR_IN
24523: IFFALSE 24575
// if IsSelected ( i ) then
24525: LD_VAR 0 2
24529: PPUSH
24530: CALL_OW 306
24534: IFFALSE 24573
// begin for j := 1 to 4 do
24536: LD_ADDR_VAR 0 3
24540: PUSH
24541: DOUBLE
24542: LD_INT 1
24544: DEC
24545: ST_TO_ADDR
24546: LD_INT 4
24548: PUSH
24549: FOR_TO
24550: IFFALSE 24571
// SetSkill ( i , j , 10 ) ;
24552: LD_VAR 0 2
24556: PPUSH
24557: LD_VAR 0 3
24561: PPUSH
24562: LD_INT 10
24564: PPUSH
24565: CALL_OW 237
24569: GO 24549
24571: POP
24572: POP
// end ;
24573: GO 24522
24575: POP
24576: POP
// end ;
24577: LD_VAR 0 1
24581: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24582: LD_INT 0
24584: PPUSH
24585: PPUSH
24586: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24587: LD_ADDR_VAR 0 2
24591: PUSH
24592: LD_INT 22
24594: PUSH
24595: LD_OWVAR 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 21
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PPUSH
24618: CALL_OW 69
24622: PUSH
24623: FOR_IN
24624: IFFALSE 24665
// begin for j := 1 to 4 do
24626: LD_ADDR_VAR 0 3
24630: PUSH
24631: DOUBLE
24632: LD_INT 1
24634: DEC
24635: ST_TO_ADDR
24636: LD_INT 4
24638: PUSH
24639: FOR_TO
24640: IFFALSE 24661
// SetSkill ( i , j , 10 ) ;
24642: LD_VAR 0 2
24646: PPUSH
24647: LD_VAR 0 3
24651: PPUSH
24652: LD_INT 10
24654: PPUSH
24655: CALL_OW 237
24659: GO 24639
24661: POP
24662: POP
// end ;
24663: GO 24623
24665: POP
24666: POP
// end ;
24667: LD_VAR 0 1
24671: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24672: LD_INT 0
24674: PPUSH
// uc_side := your_side ;
24675: LD_ADDR_OWVAR 20
24679: PUSH
24680: LD_OWVAR 2
24684: ST_TO_ADDR
// uc_nation := nation ;
24685: LD_ADDR_OWVAR 21
24689: PUSH
24690: LD_VAR 0 1
24694: ST_TO_ADDR
// InitHc ;
24695: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24699: LD_INT 0
24701: PPUSH
24702: LD_VAR 0 2
24706: PPUSH
24707: LD_VAR 0 3
24711: PPUSH
24712: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24716: LD_VAR 0 4
24720: PPUSH
24721: LD_VAR 0 5
24725: PPUSH
24726: CALL_OW 428
24730: PUSH
24731: LD_INT 0
24733: EQUAL
24734: IFFALSE 24758
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24736: CALL_OW 44
24740: PPUSH
24741: LD_VAR 0 4
24745: PPUSH
24746: LD_VAR 0 5
24750: PPUSH
24751: LD_INT 1
24753: PPUSH
24754: CALL_OW 48
// end ;
24758: LD_VAR 0 6
24762: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24763: LD_INT 0
24765: PPUSH
24766: PPUSH
// uc_side := your_side ;
24767: LD_ADDR_OWVAR 20
24771: PUSH
24772: LD_OWVAR 2
24776: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24777: LD_VAR 0 1
24781: PUSH
24782: LD_INT 1
24784: PUSH
24785: LD_INT 2
24787: PUSH
24788: LD_INT 3
24790: PUSH
24791: LD_INT 4
24793: PUSH
24794: LD_INT 5
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: IN
24804: IFFALSE 24816
// uc_nation := nation_american else
24806: LD_ADDR_OWVAR 21
24810: PUSH
24811: LD_INT 1
24813: ST_TO_ADDR
24814: GO 24859
// if chassis in [ 11 , 12 , 13 , 14 ] then
24816: LD_VAR 0 1
24820: PUSH
24821: LD_INT 11
24823: PUSH
24824: LD_INT 12
24826: PUSH
24827: LD_INT 13
24829: PUSH
24830: LD_INT 14
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: IN
24839: IFFALSE 24851
// uc_nation := nation_arabian else
24841: LD_ADDR_OWVAR 21
24845: PUSH
24846: LD_INT 2
24848: ST_TO_ADDR
24849: GO 24859
// uc_nation := nation_russian ;
24851: LD_ADDR_OWVAR 21
24855: PUSH
24856: LD_INT 3
24858: ST_TO_ADDR
// vc_chassis := chassis ;
24859: LD_ADDR_OWVAR 37
24863: PUSH
24864: LD_VAR 0 1
24868: ST_TO_ADDR
// vc_engine := engine ;
24869: LD_ADDR_OWVAR 39
24873: PUSH
24874: LD_VAR 0 2
24878: ST_TO_ADDR
// vc_control := control ;
24879: LD_ADDR_OWVAR 38
24883: PUSH
24884: LD_VAR 0 3
24888: ST_TO_ADDR
// vc_weapon := weapon ;
24889: LD_ADDR_OWVAR 40
24893: PUSH
24894: LD_VAR 0 4
24898: ST_TO_ADDR
// un := CreateVehicle ;
24899: LD_ADDR_VAR 0 8
24903: PUSH
24904: CALL_OW 45
24908: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24909: LD_VAR 0 8
24913: PPUSH
24914: LD_INT 0
24916: PPUSH
24917: LD_INT 5
24919: PPUSH
24920: CALL_OW 12
24924: PPUSH
24925: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24929: LD_VAR 0 8
24933: PPUSH
24934: LD_VAR 0 5
24938: PPUSH
24939: LD_VAR 0 6
24943: PPUSH
24944: LD_INT 1
24946: PPUSH
24947: CALL_OW 48
// end ;
24951: LD_VAR 0 7
24955: RET
// export hInvincible ; every 1 do
24956: GO 24958
24958: DISABLE
// hInvincible := [ ] ;
24959: LD_ADDR_EXP 96
24963: PUSH
24964: EMPTY
24965: ST_TO_ADDR
24966: END
// every 10 do var i ;
24967: GO 24969
24969: DISABLE
24970: LD_INT 0
24972: PPUSH
// begin enable ;
24973: ENABLE
// if not hInvincible then
24974: LD_EXP 96
24978: NOT
24979: IFFALSE 24983
// exit ;
24981: GO 25027
// for i in hInvincible do
24983: LD_ADDR_VAR 0 1
24987: PUSH
24988: LD_EXP 96
24992: PUSH
24993: FOR_IN
24994: IFFALSE 25025
// if GetLives ( i ) < 1000 then
24996: LD_VAR 0 1
25000: PPUSH
25001: CALL_OW 256
25005: PUSH
25006: LD_INT 1000
25008: LESS
25009: IFFALSE 25023
// SetLives ( i , 1000 ) ;
25011: LD_VAR 0 1
25015: PPUSH
25016: LD_INT 1000
25018: PPUSH
25019: CALL_OW 234
25023: GO 24993
25025: POP
25026: POP
// end ;
25027: PPOPN 1
25029: END
// export function hHackInvincible ; var i ; begin
25030: LD_INT 0
25032: PPUSH
25033: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25034: LD_ADDR_VAR 0 2
25038: PUSH
25039: LD_INT 2
25041: PUSH
25042: LD_INT 21
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 21
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: LIST
25066: PPUSH
25067: CALL_OW 69
25071: PUSH
25072: FOR_IN
25073: IFFALSE 25134
// if IsSelected ( i ) then
25075: LD_VAR 0 2
25079: PPUSH
25080: CALL_OW 306
25084: IFFALSE 25132
// begin if i in hInvincible then
25086: LD_VAR 0 2
25090: PUSH
25091: LD_EXP 96
25095: IN
25096: IFFALSE 25116
// hInvincible := hInvincible diff i else
25098: LD_ADDR_EXP 96
25102: PUSH
25103: LD_EXP 96
25107: PUSH
25108: LD_VAR 0 2
25112: DIFF
25113: ST_TO_ADDR
25114: GO 25132
// hInvincible := hInvincible union i ;
25116: LD_ADDR_EXP 96
25120: PUSH
25121: LD_EXP 96
25125: PUSH
25126: LD_VAR 0 2
25130: UNION
25131: ST_TO_ADDR
// end ;
25132: GO 25072
25134: POP
25135: POP
// end ;
25136: LD_VAR 0 1
25140: RET
// export function hHackInvisible ; var i , j ; begin
25141: LD_INT 0
25143: PPUSH
25144: PPUSH
25145: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25146: LD_ADDR_VAR 0 2
25150: PUSH
25151: LD_INT 21
25153: PUSH
25154: LD_INT 1
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PPUSH
25161: CALL_OW 69
25165: PUSH
25166: FOR_IN
25167: IFFALSE 25191
// if IsSelected ( i ) then
25169: LD_VAR 0 2
25173: PPUSH
25174: CALL_OW 306
25178: IFFALSE 25189
// ComForceInvisible ( i ) ;
25180: LD_VAR 0 2
25184: PPUSH
25185: CALL_OW 496
25189: GO 25166
25191: POP
25192: POP
// end ;
25193: LD_VAR 0 1
25197: RET
// export function hHackChangeYourSide ; begin
25198: LD_INT 0
25200: PPUSH
// if your_side = 8 then
25201: LD_OWVAR 2
25205: PUSH
25206: LD_INT 8
25208: EQUAL
25209: IFFALSE 25221
// your_side := 0 else
25211: LD_ADDR_OWVAR 2
25215: PUSH
25216: LD_INT 0
25218: ST_TO_ADDR
25219: GO 25235
// your_side := your_side + 1 ;
25221: LD_ADDR_OWVAR 2
25225: PUSH
25226: LD_OWVAR 2
25230: PUSH
25231: LD_INT 1
25233: PLUS
25234: ST_TO_ADDR
// end ;
25235: LD_VAR 0 1
25239: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25240: LD_INT 0
25242: PPUSH
25243: PPUSH
25244: PPUSH
// for i in all_units do
25245: LD_ADDR_VAR 0 2
25249: PUSH
25250: LD_OWVAR 3
25254: PUSH
25255: FOR_IN
25256: IFFALSE 25334
// if IsSelected ( i ) then
25258: LD_VAR 0 2
25262: PPUSH
25263: CALL_OW 306
25267: IFFALSE 25332
// begin j := GetSide ( i ) ;
25269: LD_ADDR_VAR 0 3
25273: PUSH
25274: LD_VAR 0 2
25278: PPUSH
25279: CALL_OW 255
25283: ST_TO_ADDR
// if j = 8 then
25284: LD_VAR 0 3
25288: PUSH
25289: LD_INT 8
25291: EQUAL
25292: IFFALSE 25304
// j := 0 else
25294: LD_ADDR_VAR 0 3
25298: PUSH
25299: LD_INT 0
25301: ST_TO_ADDR
25302: GO 25318
// j := j + 1 ;
25304: LD_ADDR_VAR 0 3
25308: PUSH
25309: LD_VAR 0 3
25313: PUSH
25314: LD_INT 1
25316: PLUS
25317: ST_TO_ADDR
// SetSide ( i , j ) ;
25318: LD_VAR 0 2
25322: PPUSH
25323: LD_VAR 0 3
25327: PPUSH
25328: CALL_OW 235
// end ;
25332: GO 25255
25334: POP
25335: POP
// end ;
25336: LD_VAR 0 1
25340: RET
// export function hHackFog ; begin
25341: LD_INT 0
25343: PPUSH
// FogOff ( true ) ;
25344: LD_INT 1
25346: PPUSH
25347: CALL_OW 344
// end ;
25351: LD_VAR 0 1
25355: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25356: LD_INT 0
25358: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25359: LD_VAR 0 1
25363: PPUSH
25364: LD_VAR 0 2
25368: PPUSH
25369: LD_VAR 0 3
25373: PPUSH
25374: LD_INT 1
25376: PPUSH
25377: LD_INT 1
25379: PPUSH
25380: CALL_OW 483
// CenterOnXY ( x , y ) ;
25384: LD_VAR 0 2
25388: PPUSH
25389: LD_VAR 0 3
25393: PPUSH
25394: CALL_OW 84
// end ;
25398: LD_VAR 0 4
25402: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25403: LD_INT 0
25405: PPUSH
25406: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25407: LD_VAR 0 1
25411: NOT
25412: PUSH
25413: LD_VAR 0 2
25417: PPUSH
25418: LD_VAR 0 3
25422: PPUSH
25423: CALL_OW 488
25427: NOT
25428: OR
25429: PUSH
25430: LD_VAR 0 1
25434: PPUSH
25435: CALL_OW 266
25439: PUSH
25440: LD_INT 3
25442: NONEQUAL
25443: PUSH
25444: LD_VAR 0 1
25448: PPUSH
25449: CALL_OW 247
25453: PUSH
25454: LD_INT 1
25456: EQUAL
25457: NOT
25458: AND
25459: OR
25460: IFFALSE 25464
// exit ;
25462: GO 25613
// if GetType ( factory ) = unit_human then
25464: LD_VAR 0 1
25468: PPUSH
25469: CALL_OW 247
25473: PUSH
25474: LD_INT 1
25476: EQUAL
25477: IFFALSE 25494
// factory := IsInUnit ( factory ) ;
25479: LD_ADDR_VAR 0 1
25483: PUSH
25484: LD_VAR 0 1
25488: PPUSH
25489: CALL_OW 310
25493: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25494: LD_VAR 0 1
25498: PPUSH
25499: CALL_OW 266
25503: PUSH
25504: LD_INT 3
25506: NONEQUAL
25507: IFFALSE 25511
// exit ;
25509: GO 25613
// if HexInfo ( x , y ) = factory then
25511: LD_VAR 0 2
25515: PPUSH
25516: LD_VAR 0 3
25520: PPUSH
25521: CALL_OW 428
25525: PUSH
25526: LD_VAR 0 1
25530: EQUAL
25531: IFFALSE 25558
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25533: LD_ADDR_EXP 97
25537: PUSH
25538: LD_EXP 97
25542: PPUSH
25543: LD_VAR 0 1
25547: PPUSH
25548: LD_INT 0
25550: PPUSH
25551: CALL_OW 1
25555: ST_TO_ADDR
25556: GO 25609
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25558: LD_ADDR_EXP 97
25562: PUSH
25563: LD_EXP 97
25567: PPUSH
25568: LD_VAR 0 1
25572: PPUSH
25573: LD_VAR 0 1
25577: PPUSH
25578: CALL_OW 255
25582: PUSH
25583: LD_VAR 0 1
25587: PUSH
25588: LD_VAR 0 2
25592: PUSH
25593: LD_VAR 0 3
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: PPUSH
25604: CALL_OW 1
25608: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25609: CALL 25618 0 0
// end ;
25613: LD_VAR 0 4
25617: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25618: LD_INT 0
25620: PPUSH
25621: PPUSH
25622: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25623: LD_STRING resetFactoryWaypoint();
25625: PPUSH
25626: CALL_OW 559
// if factoryWaypoints then
25630: LD_EXP 97
25634: IFFALSE 25760
// begin list := PrepareArray ( factoryWaypoints ) ;
25636: LD_ADDR_VAR 0 3
25640: PUSH
25641: LD_EXP 97
25645: PPUSH
25646: CALL 72120 0 1
25650: ST_TO_ADDR
// for i := 1 to list do
25651: LD_ADDR_VAR 0 2
25655: PUSH
25656: DOUBLE
25657: LD_INT 1
25659: DEC
25660: ST_TO_ADDR
25661: LD_VAR 0 3
25665: PUSH
25666: FOR_TO
25667: IFFALSE 25758
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25669: LD_STRING setFactoryWaypointXY(
25671: PUSH
25672: LD_VAR 0 3
25676: PUSH
25677: LD_VAR 0 2
25681: ARRAY
25682: PUSH
25683: LD_INT 1
25685: ARRAY
25686: STR
25687: PUSH
25688: LD_STRING ,
25690: STR
25691: PUSH
25692: LD_VAR 0 3
25696: PUSH
25697: LD_VAR 0 2
25701: ARRAY
25702: PUSH
25703: LD_INT 2
25705: ARRAY
25706: STR
25707: PUSH
25708: LD_STRING ,
25710: STR
25711: PUSH
25712: LD_VAR 0 3
25716: PUSH
25717: LD_VAR 0 2
25721: ARRAY
25722: PUSH
25723: LD_INT 3
25725: ARRAY
25726: STR
25727: PUSH
25728: LD_STRING ,
25730: STR
25731: PUSH
25732: LD_VAR 0 3
25736: PUSH
25737: LD_VAR 0 2
25741: ARRAY
25742: PUSH
25743: LD_INT 4
25745: ARRAY
25746: STR
25747: PUSH
25748: LD_STRING )
25750: STR
25751: PPUSH
25752: CALL_OW 559
25756: GO 25666
25758: POP
25759: POP
// end ; end ;
25760: LD_VAR 0 1
25764: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25765: LD_INT 0
25767: PPUSH
// if HexInfo ( x , y ) = warehouse then
25768: LD_VAR 0 2
25772: PPUSH
25773: LD_VAR 0 3
25777: PPUSH
25778: CALL_OW 428
25782: PUSH
25783: LD_VAR 0 1
25787: EQUAL
25788: IFFALSE 25815
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25790: LD_ADDR_EXP 98
25794: PUSH
25795: LD_EXP 98
25799: PPUSH
25800: LD_VAR 0 1
25804: PPUSH
25805: LD_INT 0
25807: PPUSH
25808: CALL_OW 1
25812: ST_TO_ADDR
25813: GO 25866
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25815: LD_ADDR_EXP 98
25819: PUSH
25820: LD_EXP 98
25824: PPUSH
25825: LD_VAR 0 1
25829: PPUSH
25830: LD_VAR 0 1
25834: PPUSH
25835: CALL_OW 255
25839: PUSH
25840: LD_VAR 0 1
25844: PUSH
25845: LD_VAR 0 2
25849: PUSH
25850: LD_VAR 0 3
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: PPUSH
25861: CALL_OW 1
25865: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25866: CALL 25875 0 0
// end ;
25870: LD_VAR 0 4
25874: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25875: LD_INT 0
25877: PPUSH
25878: PPUSH
25879: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25880: LD_STRING resetWarehouseGatheringPoints();
25882: PPUSH
25883: CALL_OW 559
// if warehouseGatheringPoints then
25887: LD_EXP 98
25891: IFFALSE 26017
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25893: LD_ADDR_VAR 0 3
25897: PUSH
25898: LD_EXP 98
25902: PPUSH
25903: CALL 72120 0 1
25907: ST_TO_ADDR
// for i := 1 to list do
25908: LD_ADDR_VAR 0 2
25912: PUSH
25913: DOUBLE
25914: LD_INT 1
25916: DEC
25917: ST_TO_ADDR
25918: LD_VAR 0 3
25922: PUSH
25923: FOR_TO
25924: IFFALSE 26015
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25926: LD_STRING setWarehouseGatheringPointXY(
25928: PUSH
25929: LD_VAR 0 3
25933: PUSH
25934: LD_VAR 0 2
25938: ARRAY
25939: PUSH
25940: LD_INT 1
25942: ARRAY
25943: STR
25944: PUSH
25945: LD_STRING ,
25947: STR
25948: PUSH
25949: LD_VAR 0 3
25953: PUSH
25954: LD_VAR 0 2
25958: ARRAY
25959: PUSH
25960: LD_INT 2
25962: ARRAY
25963: STR
25964: PUSH
25965: LD_STRING ,
25967: STR
25968: PUSH
25969: LD_VAR 0 3
25973: PUSH
25974: LD_VAR 0 2
25978: ARRAY
25979: PUSH
25980: LD_INT 3
25982: ARRAY
25983: STR
25984: PUSH
25985: LD_STRING ,
25987: STR
25988: PUSH
25989: LD_VAR 0 3
25993: PUSH
25994: LD_VAR 0 2
25998: ARRAY
25999: PUSH
26000: LD_INT 4
26002: ARRAY
26003: STR
26004: PUSH
26005: LD_STRING )
26007: STR
26008: PPUSH
26009: CALL_OW 559
26013: GO 25923
26015: POP
26016: POP
// end ; end ;
26017: LD_VAR 0 1
26021: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26022: LD_EXP 98
26026: IFFALSE 26641
26028: GO 26030
26030: DISABLE
26031: LD_INT 0
26033: PPUSH
26034: PPUSH
26035: PPUSH
26036: PPUSH
26037: PPUSH
26038: PPUSH
26039: PPUSH
26040: PPUSH
26041: PPUSH
// begin enable ;
26042: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26043: LD_ADDR_VAR 0 3
26047: PUSH
26048: LD_EXP 98
26052: PPUSH
26053: CALL 72120 0 1
26057: ST_TO_ADDR
// for i := 1 to list do
26058: LD_ADDR_VAR 0 1
26062: PUSH
26063: DOUBLE
26064: LD_INT 1
26066: DEC
26067: ST_TO_ADDR
26068: LD_VAR 0 3
26072: PUSH
26073: FOR_TO
26074: IFFALSE 26639
// begin depot := list [ i ] [ 2 ] ;
26076: LD_ADDR_VAR 0 8
26080: PUSH
26081: LD_VAR 0 3
26085: PUSH
26086: LD_VAR 0 1
26090: ARRAY
26091: PUSH
26092: LD_INT 2
26094: ARRAY
26095: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26096: LD_ADDR_VAR 0 5
26100: PUSH
26101: LD_VAR 0 3
26105: PUSH
26106: LD_VAR 0 1
26110: ARRAY
26111: PUSH
26112: LD_INT 1
26114: ARRAY
26115: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26116: LD_VAR 0 8
26120: PPUSH
26121: CALL_OW 301
26125: PUSH
26126: LD_VAR 0 5
26130: PUSH
26131: LD_VAR 0 8
26135: PPUSH
26136: CALL_OW 255
26140: NONEQUAL
26141: OR
26142: IFFALSE 26171
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26144: LD_ADDR_EXP 98
26148: PUSH
26149: LD_EXP 98
26153: PPUSH
26154: LD_VAR 0 8
26158: PPUSH
26159: LD_INT 0
26161: PPUSH
26162: CALL_OW 1
26166: ST_TO_ADDR
// exit ;
26167: POP
26168: POP
26169: GO 26641
// end ; x := list [ i ] [ 3 ] ;
26171: LD_ADDR_VAR 0 6
26175: PUSH
26176: LD_VAR 0 3
26180: PUSH
26181: LD_VAR 0 1
26185: ARRAY
26186: PUSH
26187: LD_INT 3
26189: ARRAY
26190: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26191: LD_ADDR_VAR 0 7
26195: PUSH
26196: LD_VAR 0 3
26200: PUSH
26201: LD_VAR 0 1
26205: ARRAY
26206: PUSH
26207: LD_INT 4
26209: ARRAY
26210: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 12 ) ;
26211: LD_ADDR_VAR 0 9
26215: PUSH
26216: LD_VAR 0 6
26220: PPUSH
26221: LD_VAR 0 7
26225: PPUSH
26226: LD_INT 12
26228: PPUSH
26229: CALL 70704 0 3
26233: ST_TO_ADDR
// if not cratesNearbyPoint then
26234: LD_VAR 0 9
26238: NOT
26239: IFFALSE 26245
// exit ;
26241: POP
26242: POP
26243: GO 26641
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26245: LD_ADDR_VAR 0 4
26249: PUSH
26250: LD_INT 22
26252: PUSH
26253: LD_VAR 0 5
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 3
26264: PUSH
26265: LD_INT 60
26267: PUSH
26268: EMPTY
26269: LIST
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: LD_INT 25
26280: PUSH
26281: LD_INT 2
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 25
26290: PUSH
26291: LD_INT 16
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: LIST
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: LIST
26307: PPUSH
26308: CALL_OW 69
26312: PUSH
26313: LD_VAR 0 8
26317: PPUSH
26318: CALL_OW 313
26322: PPUSH
26323: LD_INT 3
26325: PUSH
26326: LD_INT 60
26328: PUSH
26329: EMPTY
26330: LIST
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 2
26338: PUSH
26339: LD_INT 25
26341: PUSH
26342: LD_INT 2
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 25
26351: PUSH
26352: LD_INT 16
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: LIST
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PPUSH
26368: CALL_OW 72
26372: UNION
26373: ST_TO_ADDR
// if tmp then
26374: LD_VAR 0 4
26378: IFFALSE 26458
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26380: LD_ADDR_VAR 0 4
26384: PUSH
26385: LD_VAR 0 4
26389: PPUSH
26390: LD_INT 3
26392: PPUSH
26393: CALL 68671 0 2
26397: ST_TO_ADDR
// for j in tmp do
26398: LD_ADDR_VAR 0 2
26402: PUSH
26403: LD_VAR 0 4
26407: PUSH
26408: FOR_IN
26409: IFFALSE 26452
// begin if IsInUnit ( j ) then
26411: LD_VAR 0 2
26415: PPUSH
26416: CALL_OW 310
26420: IFFALSE 26431
// ComExit ( j ) ;
26422: LD_VAR 0 2
26426: PPUSH
26427: CALL 68754 0 1
// AddComCollect ( j , x , y ) ;
26431: LD_VAR 0 2
26435: PPUSH
26436: LD_VAR 0 6
26440: PPUSH
26441: LD_VAR 0 7
26445: PPUSH
26446: CALL_OW 177
// end ;
26450: GO 26408
26452: POP
26453: POP
// exit ;
26454: POP
26455: POP
26456: GO 26641
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26458: LD_ADDR_VAR 0 4
26462: PUSH
26463: LD_INT 22
26465: PUSH
26466: LD_VAR 0 5
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 2
26477: PUSH
26478: LD_INT 34
26480: PUSH
26481: LD_INT 12
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 34
26490: PUSH
26491: LD_INT 51
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 34
26500: PUSH
26501: LD_INT 32
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 34
26510: PUSH
26511: LD_EXP 21
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PPUSH
26531: CALL_OW 69
26535: ST_TO_ADDR
// if tmp then
26536: LD_VAR 0 4
26540: IFFALSE 26637
// begin for j in tmp do
26542: LD_ADDR_VAR 0 2
26546: PUSH
26547: LD_VAR 0 4
26551: PUSH
26552: FOR_IN
26553: IFFALSE 26635
// if GetFuel ( i ) > 20 and not HasTask ( i ) and ( GetControl ( i ) <> control_manual or IsDrivenBy ( i ) ) then
26555: LD_VAR 0 1
26559: PPUSH
26560: CALL_OW 261
26564: PUSH
26565: LD_INT 20
26567: GREATER
26568: PUSH
26569: LD_VAR 0 1
26573: PPUSH
26574: CALL_OW 314
26578: NOT
26579: AND
26580: PUSH
26581: LD_VAR 0 1
26585: PPUSH
26586: CALL_OW 263
26590: PUSH
26591: LD_INT 1
26593: NONEQUAL
26594: PUSH
26595: LD_VAR 0 1
26599: PPUSH
26600: CALL_OW 311
26604: OR
26605: AND
26606: IFFALSE 26633
// begin ComCollect ( j , x , y ) ;
26608: LD_VAR 0 2
26612: PPUSH
26613: LD_VAR 0 6
26617: PPUSH
26618: LD_VAR 0 7
26622: PPUSH
26623: CALL_OW 117
// exit ;
26627: POP
26628: POP
26629: POP
26630: POP
26631: GO 26641
// end ;
26633: GO 26552
26635: POP
26636: POP
// end ; end ;
26637: GO 26073
26639: POP
26640: POP
// end ; end_of_file
26641: PPOPN 9
26643: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26644: LD_INT 0
26646: PPUSH
26647: PPUSH
26648: PPUSH
26649: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26650: LD_VAR 0 1
26654: PPUSH
26655: CALL_OW 264
26659: PUSH
26660: LD_EXP 24
26664: EQUAL
26665: IFFALSE 26737
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26667: LD_INT 68
26669: PPUSH
26670: LD_VAR 0 1
26674: PPUSH
26675: CALL_OW 255
26679: PPUSH
26680: CALL_OW 321
26684: PUSH
26685: LD_INT 2
26687: EQUAL
26688: IFFALSE 26700
// eff := 70 else
26690: LD_ADDR_VAR 0 4
26694: PUSH
26695: LD_INT 70
26697: ST_TO_ADDR
26698: GO 26708
// eff := 30 ;
26700: LD_ADDR_VAR 0 4
26704: PUSH
26705: LD_INT 30
26707: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26708: LD_VAR 0 1
26712: PPUSH
26713: CALL_OW 250
26717: PPUSH
26718: LD_VAR 0 1
26722: PPUSH
26723: CALL_OW 251
26727: PPUSH
26728: LD_VAR 0 4
26732: PPUSH
26733: CALL_OW 495
// end ; end ;
26737: LD_VAR 0 2
26741: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26742: LD_INT 0
26744: PPUSH
// end ;
26745: LD_VAR 0 4
26749: RET
// export function SOS_Command ( cmd ) ; begin
26750: LD_INT 0
26752: PPUSH
// end ;
26753: LD_VAR 0 2
26757: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26758: LD_INT 0
26760: PPUSH
// end ;
26761: LD_VAR 0 6
26765: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26766: LD_INT 0
26768: PPUSH
26769: PPUSH
// if not vehicle or not factory then
26770: LD_VAR 0 1
26774: NOT
26775: PUSH
26776: LD_VAR 0 2
26780: NOT
26781: OR
26782: IFFALSE 26786
// exit ;
26784: GO 27017
// if factoryWaypoints >= factory then
26786: LD_EXP 97
26790: PUSH
26791: LD_VAR 0 2
26795: GREATEREQUAL
26796: IFFALSE 27017
// if factoryWaypoints [ factory ] then
26798: LD_EXP 97
26802: PUSH
26803: LD_VAR 0 2
26807: ARRAY
26808: IFFALSE 27017
// begin if GetControl ( vehicle ) = control_manual then
26810: LD_VAR 0 1
26814: PPUSH
26815: CALL_OW 263
26819: PUSH
26820: LD_INT 1
26822: EQUAL
26823: IFFALSE 26904
// begin driver := IsDrivenBy ( vehicle ) ;
26825: LD_ADDR_VAR 0 4
26829: PUSH
26830: LD_VAR 0 1
26834: PPUSH
26835: CALL_OW 311
26839: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26840: LD_VAR 0 4
26844: PPUSH
26845: LD_EXP 97
26849: PUSH
26850: LD_VAR 0 2
26854: ARRAY
26855: PUSH
26856: LD_INT 3
26858: ARRAY
26859: PPUSH
26860: LD_EXP 97
26864: PUSH
26865: LD_VAR 0 2
26869: ARRAY
26870: PUSH
26871: LD_INT 4
26873: ARRAY
26874: PPUSH
26875: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26879: LD_VAR 0 4
26883: PPUSH
26884: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26888: LD_VAR 0 4
26892: PPUSH
26893: LD_VAR 0 2
26897: PPUSH
26898: CALL_OW 180
// end else
26902: GO 27017
// if GetControl ( vehicle ) = control_remote then
26904: LD_VAR 0 1
26908: PPUSH
26909: CALL_OW 263
26913: PUSH
26914: LD_INT 2
26916: EQUAL
26917: IFFALSE 26978
// begin wait ( 0 0$2 ) ;
26919: LD_INT 70
26921: PPUSH
26922: CALL_OW 67
// if Connect ( vehicle ) then
26926: LD_VAR 0 1
26930: PPUSH
26931: CALL 39065 0 1
26935: IFFALSE 26976
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26937: LD_VAR 0 1
26941: PPUSH
26942: LD_EXP 97
26946: PUSH
26947: LD_VAR 0 2
26951: ARRAY
26952: PUSH
26953: LD_INT 3
26955: ARRAY
26956: PPUSH
26957: LD_EXP 97
26961: PUSH
26962: LD_VAR 0 2
26966: ARRAY
26967: PUSH
26968: LD_INT 4
26970: ARRAY
26971: PPUSH
26972: CALL_OW 171
// end else
26976: GO 27017
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26978: LD_VAR 0 1
26982: PPUSH
26983: LD_EXP 97
26987: PUSH
26988: LD_VAR 0 2
26992: ARRAY
26993: PUSH
26994: LD_INT 3
26996: ARRAY
26997: PPUSH
26998: LD_EXP 97
27002: PUSH
27003: LD_VAR 0 2
27007: ARRAY
27008: PUSH
27009: LD_INT 4
27011: ARRAY
27012: PPUSH
27013: CALL_OW 171
// end ; end ;
27017: LD_VAR 0 3
27021: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27022: LD_INT 0
27024: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27025: LD_VAR 0 1
27029: PUSH
27030: LD_INT 250
27032: EQUAL
27033: PUSH
27034: LD_VAR 0 2
27038: PPUSH
27039: CALL_OW 264
27043: PUSH
27044: LD_EXP 27
27048: EQUAL
27049: AND
27050: IFFALSE 27071
// MinerPlaceMine ( unit , x , y ) ;
27052: LD_VAR 0 2
27056: PPUSH
27057: LD_VAR 0 4
27061: PPUSH
27062: LD_VAR 0 5
27066: PPUSH
27067: CALL 29470 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27071: LD_VAR 0 1
27075: PUSH
27076: LD_INT 251
27078: EQUAL
27079: PUSH
27080: LD_VAR 0 2
27084: PPUSH
27085: CALL_OW 264
27089: PUSH
27090: LD_EXP 27
27094: EQUAL
27095: AND
27096: IFFALSE 27117
// MinerDetonateMine ( unit , x , y ) ;
27098: LD_VAR 0 2
27102: PPUSH
27103: LD_VAR 0 4
27107: PPUSH
27108: LD_VAR 0 5
27112: PPUSH
27113: CALL 29747 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27117: LD_VAR 0 1
27121: PUSH
27122: LD_INT 252
27124: EQUAL
27125: PUSH
27126: LD_VAR 0 2
27130: PPUSH
27131: CALL_OW 264
27135: PUSH
27136: LD_EXP 27
27140: EQUAL
27141: AND
27142: IFFALSE 27163
// MinerCreateMinefield ( unit , x , y ) ;
27144: LD_VAR 0 2
27148: PPUSH
27149: LD_VAR 0 4
27153: PPUSH
27154: LD_VAR 0 5
27158: PPUSH
27159: CALL 30164 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27163: LD_VAR 0 1
27167: PUSH
27168: LD_INT 253
27170: EQUAL
27171: PUSH
27172: LD_VAR 0 2
27176: PPUSH
27177: CALL_OW 257
27181: PUSH
27182: LD_INT 5
27184: EQUAL
27185: AND
27186: IFFALSE 27207
// ComBinocular ( unit , x , y ) ;
27188: LD_VAR 0 2
27192: PPUSH
27193: LD_VAR 0 4
27197: PPUSH
27198: LD_VAR 0 5
27202: PPUSH
27203: CALL 30535 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27207: LD_VAR 0 1
27211: PUSH
27212: LD_INT 254
27214: EQUAL
27215: PUSH
27216: LD_VAR 0 2
27220: PPUSH
27221: CALL_OW 264
27225: PUSH
27226: LD_EXP 22
27230: EQUAL
27231: AND
27232: PUSH
27233: LD_VAR 0 3
27237: PPUSH
27238: CALL_OW 263
27242: PUSH
27243: LD_INT 3
27245: EQUAL
27246: AND
27247: IFFALSE 27263
// HackDestroyVehicle ( unit , selectedUnit ) ;
27249: LD_VAR 0 2
27253: PPUSH
27254: LD_VAR 0 3
27258: PPUSH
27259: CALL 28830 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27263: LD_VAR 0 1
27267: PUSH
27268: LD_INT 255
27270: EQUAL
27271: PUSH
27272: LD_VAR 0 2
27276: PPUSH
27277: CALL_OW 264
27281: PUSH
27282: LD_INT 14
27284: PUSH
27285: LD_INT 53
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: IN
27292: AND
27293: PUSH
27294: LD_VAR 0 4
27298: PPUSH
27299: LD_VAR 0 5
27303: PPUSH
27304: CALL_OW 488
27308: AND
27309: IFFALSE 27333
// CutTreeXYR ( unit , x , y , 12 ) ;
27311: LD_VAR 0 2
27315: PPUSH
27316: LD_VAR 0 4
27320: PPUSH
27321: LD_VAR 0 5
27325: PPUSH
27326: LD_INT 12
27328: PPUSH
27329: CALL 27396 0 4
// if cmd = 256 then
27333: LD_VAR 0 1
27337: PUSH
27338: LD_INT 256
27340: EQUAL
27341: IFFALSE 27362
// SetFactoryWaypoint ( unit , x , y ) ;
27343: LD_VAR 0 2
27347: PPUSH
27348: LD_VAR 0 4
27352: PPUSH
27353: LD_VAR 0 5
27357: PPUSH
27358: CALL 25403 0 3
// if cmd = 257 then
27362: LD_VAR 0 1
27366: PUSH
27367: LD_INT 257
27369: EQUAL
27370: IFFALSE 27391
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27372: LD_VAR 0 2
27376: PPUSH
27377: LD_VAR 0 4
27381: PPUSH
27382: LD_VAR 0 5
27386: PPUSH
27387: CALL 25765 0 3
// end ;
27391: LD_VAR 0 6
27395: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27396: LD_INT 0
27398: PPUSH
27399: PPUSH
27400: PPUSH
27401: PPUSH
27402: PPUSH
27403: PPUSH
27404: PPUSH
27405: PPUSH
27406: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27407: LD_VAR 0 1
27411: NOT
27412: PUSH
27413: LD_VAR 0 2
27417: PPUSH
27418: LD_VAR 0 3
27422: PPUSH
27423: CALL_OW 488
27427: NOT
27428: OR
27429: PUSH
27430: LD_VAR 0 4
27434: NOT
27435: OR
27436: IFFALSE 27440
// exit ;
27438: GO 27780
// list := [ ] ;
27440: LD_ADDR_VAR 0 13
27444: PUSH
27445: EMPTY
27446: ST_TO_ADDR
// if x - r < 0 then
27447: LD_VAR 0 2
27451: PUSH
27452: LD_VAR 0 4
27456: MINUS
27457: PUSH
27458: LD_INT 0
27460: LESS
27461: IFFALSE 27473
// min_x := 0 else
27463: LD_ADDR_VAR 0 7
27467: PUSH
27468: LD_INT 0
27470: ST_TO_ADDR
27471: GO 27489
// min_x := x - r ;
27473: LD_ADDR_VAR 0 7
27477: PUSH
27478: LD_VAR 0 2
27482: PUSH
27483: LD_VAR 0 4
27487: MINUS
27488: ST_TO_ADDR
// if y - r < 0 then
27489: LD_VAR 0 3
27493: PUSH
27494: LD_VAR 0 4
27498: MINUS
27499: PUSH
27500: LD_INT 0
27502: LESS
27503: IFFALSE 27515
// min_y := 0 else
27505: LD_ADDR_VAR 0 8
27509: PUSH
27510: LD_INT 0
27512: ST_TO_ADDR
27513: GO 27531
// min_y := y - r ;
27515: LD_ADDR_VAR 0 8
27519: PUSH
27520: LD_VAR 0 3
27524: PUSH
27525: LD_VAR 0 4
27529: MINUS
27530: ST_TO_ADDR
// max_x := x + r ;
27531: LD_ADDR_VAR 0 9
27535: PUSH
27536: LD_VAR 0 2
27540: PUSH
27541: LD_VAR 0 4
27545: PLUS
27546: ST_TO_ADDR
// max_y := y + r ;
27547: LD_ADDR_VAR 0 10
27551: PUSH
27552: LD_VAR 0 3
27556: PUSH
27557: LD_VAR 0 4
27561: PLUS
27562: ST_TO_ADDR
// for _x = min_x to max_x do
27563: LD_ADDR_VAR 0 11
27567: PUSH
27568: DOUBLE
27569: LD_VAR 0 7
27573: DEC
27574: ST_TO_ADDR
27575: LD_VAR 0 9
27579: PUSH
27580: FOR_TO
27581: IFFALSE 27698
// for _y = min_y to max_y do
27583: LD_ADDR_VAR 0 12
27587: PUSH
27588: DOUBLE
27589: LD_VAR 0 8
27593: DEC
27594: ST_TO_ADDR
27595: LD_VAR 0 10
27599: PUSH
27600: FOR_TO
27601: IFFALSE 27694
// begin if not ValidHex ( _x , _y ) then
27603: LD_VAR 0 11
27607: PPUSH
27608: LD_VAR 0 12
27612: PPUSH
27613: CALL_OW 488
27617: NOT
27618: IFFALSE 27622
// continue ;
27620: GO 27600
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27622: LD_VAR 0 11
27626: PPUSH
27627: LD_VAR 0 12
27631: PPUSH
27632: CALL_OW 351
27636: PUSH
27637: LD_VAR 0 11
27641: PPUSH
27642: LD_VAR 0 12
27646: PPUSH
27647: CALL_OW 554
27651: AND
27652: IFFALSE 27692
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27654: LD_ADDR_VAR 0 13
27658: PUSH
27659: LD_VAR 0 13
27663: PPUSH
27664: LD_VAR 0 13
27668: PUSH
27669: LD_INT 1
27671: PLUS
27672: PPUSH
27673: LD_VAR 0 11
27677: PUSH
27678: LD_VAR 0 12
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PPUSH
27687: CALL_OW 2
27691: ST_TO_ADDR
// end ;
27692: GO 27600
27694: POP
27695: POP
27696: GO 27580
27698: POP
27699: POP
// if not list then
27700: LD_VAR 0 13
27704: NOT
27705: IFFALSE 27709
// exit ;
27707: GO 27780
// for i in list do
27709: LD_ADDR_VAR 0 6
27713: PUSH
27714: LD_VAR 0 13
27718: PUSH
27719: FOR_IN
27720: IFFALSE 27778
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27722: LD_VAR 0 1
27726: PPUSH
27727: LD_STRING M
27729: PUSH
27730: LD_VAR 0 6
27734: PUSH
27735: LD_INT 1
27737: ARRAY
27738: PUSH
27739: LD_VAR 0 6
27743: PUSH
27744: LD_INT 2
27746: ARRAY
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: LD_INT 0
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: PUSH
27769: EMPTY
27770: LIST
27771: PPUSH
27772: CALL_OW 447
27776: GO 27719
27778: POP
27779: POP
// end ;
27780: LD_VAR 0 5
27784: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27785: LD_EXP 100
27789: NOT
27790: IFFALSE 27840
27792: GO 27794
27794: DISABLE
// begin initHack := true ;
27795: LD_ADDR_EXP 100
27799: PUSH
27800: LD_INT 1
27802: ST_TO_ADDR
// hackTanks := [ ] ;
27803: LD_ADDR_EXP 101
27807: PUSH
27808: EMPTY
27809: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27810: LD_ADDR_EXP 102
27814: PUSH
27815: EMPTY
27816: ST_TO_ADDR
// hackLimit := 3 ;
27817: LD_ADDR_EXP 103
27821: PUSH
27822: LD_INT 3
27824: ST_TO_ADDR
// hackDist := 12 ;
27825: LD_ADDR_EXP 104
27829: PUSH
27830: LD_INT 12
27832: ST_TO_ADDR
// hackCounter := [ ] ;
27833: LD_ADDR_EXP 105
27837: PUSH
27838: EMPTY
27839: ST_TO_ADDR
// end ;
27840: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27841: LD_EXP 100
27845: PUSH
27846: LD_INT 34
27848: PUSH
27849: LD_EXP 22
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PPUSH
27858: CALL_OW 69
27862: AND
27863: IFFALSE 28118
27865: GO 27867
27867: DISABLE
27868: LD_INT 0
27870: PPUSH
27871: PPUSH
// begin enable ;
27872: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27873: LD_ADDR_VAR 0 1
27877: PUSH
27878: LD_INT 34
27880: PUSH
27881: LD_EXP 22
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PPUSH
27890: CALL_OW 69
27894: PUSH
27895: FOR_IN
27896: IFFALSE 28116
// begin if not i in hackTanks then
27898: LD_VAR 0 1
27902: PUSH
27903: LD_EXP 101
27907: IN
27908: NOT
27909: IFFALSE 27992
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27911: LD_ADDR_EXP 101
27915: PUSH
27916: LD_EXP 101
27920: PPUSH
27921: LD_EXP 101
27925: PUSH
27926: LD_INT 1
27928: PLUS
27929: PPUSH
27930: LD_VAR 0 1
27934: PPUSH
27935: CALL_OW 1
27939: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27940: LD_ADDR_EXP 102
27944: PUSH
27945: LD_EXP 102
27949: PPUSH
27950: LD_EXP 102
27954: PUSH
27955: LD_INT 1
27957: PLUS
27958: PPUSH
27959: EMPTY
27960: PPUSH
27961: CALL_OW 1
27965: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27966: LD_ADDR_EXP 105
27970: PUSH
27971: LD_EXP 105
27975: PPUSH
27976: LD_EXP 105
27980: PUSH
27981: LD_INT 1
27983: PLUS
27984: PPUSH
27985: EMPTY
27986: PPUSH
27987: CALL_OW 1
27991: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27992: LD_VAR 0 1
27996: PPUSH
27997: CALL_OW 302
28001: NOT
28002: IFFALSE 28015
// begin HackUnlinkAll ( i ) ;
28004: LD_VAR 0 1
28008: PPUSH
28009: CALL 28121 0 1
// continue ;
28013: GO 27895
// end ; HackCheckCapturedStatus ( i ) ;
28015: LD_VAR 0 1
28019: PPUSH
28020: CALL 28564 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28024: LD_ADDR_VAR 0 2
28028: PUSH
28029: LD_INT 81
28031: PUSH
28032: LD_VAR 0 1
28036: PPUSH
28037: CALL_OW 255
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 33
28048: PUSH
28049: LD_INT 3
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 91
28058: PUSH
28059: LD_VAR 0 1
28063: PUSH
28064: LD_EXP 104
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 50
28076: PUSH
28077: EMPTY
28078: LIST
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: PPUSH
28086: CALL_OW 69
28090: ST_TO_ADDR
// if not tmp then
28091: LD_VAR 0 2
28095: NOT
28096: IFFALSE 28100
// continue ;
28098: GO 27895
// HackLink ( i , tmp ) ;
28100: LD_VAR 0 1
28104: PPUSH
28105: LD_VAR 0 2
28109: PPUSH
28110: CALL 28257 0 2
// end ;
28114: GO 27895
28116: POP
28117: POP
// end ;
28118: PPOPN 2
28120: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28121: LD_INT 0
28123: PPUSH
28124: PPUSH
28125: PPUSH
// if not hack in hackTanks then
28126: LD_VAR 0 1
28130: PUSH
28131: LD_EXP 101
28135: IN
28136: NOT
28137: IFFALSE 28141
// exit ;
28139: GO 28252
// index := GetElementIndex ( hackTanks , hack ) ;
28141: LD_ADDR_VAR 0 4
28145: PUSH
28146: LD_EXP 101
28150: PPUSH
28151: LD_VAR 0 1
28155: PPUSH
28156: CALL 35879 0 2
28160: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28161: LD_EXP 102
28165: PUSH
28166: LD_VAR 0 4
28170: ARRAY
28171: IFFALSE 28252
// begin for i in hackTanksCaptured [ index ] do
28173: LD_ADDR_VAR 0 3
28177: PUSH
28178: LD_EXP 102
28182: PUSH
28183: LD_VAR 0 4
28187: ARRAY
28188: PUSH
28189: FOR_IN
28190: IFFALSE 28216
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28192: LD_VAR 0 3
28196: PUSH
28197: LD_INT 1
28199: ARRAY
28200: PPUSH
28201: LD_VAR 0 3
28205: PUSH
28206: LD_INT 2
28208: ARRAY
28209: PPUSH
28210: CALL_OW 235
28214: GO 28189
28216: POP
28217: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28218: LD_ADDR_EXP 102
28222: PUSH
28223: LD_EXP 102
28227: PPUSH
28228: LD_VAR 0 4
28232: PPUSH
28233: EMPTY
28234: PPUSH
28235: CALL_OW 1
28239: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28240: LD_VAR 0 1
28244: PPUSH
28245: LD_INT 0
28247: PPUSH
28248: CALL_OW 505
// end ; end ;
28252: LD_VAR 0 2
28256: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28257: LD_INT 0
28259: PPUSH
28260: PPUSH
28261: PPUSH
// if not hack in hackTanks or not vehicles then
28262: LD_VAR 0 1
28266: PUSH
28267: LD_EXP 101
28271: IN
28272: NOT
28273: PUSH
28274: LD_VAR 0 2
28278: NOT
28279: OR
28280: IFFALSE 28284
// exit ;
28282: GO 28559
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28284: LD_ADDR_VAR 0 2
28288: PUSH
28289: LD_VAR 0 1
28293: PPUSH
28294: LD_VAR 0 2
28298: PPUSH
28299: LD_INT 1
28301: PPUSH
28302: LD_INT 1
28304: PPUSH
28305: CALL 36529 0 4
28309: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28310: LD_ADDR_VAR 0 5
28314: PUSH
28315: LD_EXP 101
28319: PPUSH
28320: LD_VAR 0 1
28324: PPUSH
28325: CALL 35879 0 2
28329: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28330: LD_EXP 102
28334: PUSH
28335: LD_VAR 0 5
28339: ARRAY
28340: PUSH
28341: LD_EXP 103
28345: LESS
28346: IFFALSE 28535
// begin for i := 1 to vehicles do
28348: LD_ADDR_VAR 0 4
28352: PUSH
28353: DOUBLE
28354: LD_INT 1
28356: DEC
28357: ST_TO_ADDR
28358: LD_VAR 0 2
28362: PUSH
28363: FOR_TO
28364: IFFALSE 28533
// begin if hackTanksCaptured [ index ] = hackLimit then
28366: LD_EXP 102
28370: PUSH
28371: LD_VAR 0 5
28375: ARRAY
28376: PUSH
28377: LD_EXP 103
28381: EQUAL
28382: IFFALSE 28386
// break ;
28384: GO 28533
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28386: LD_ADDR_EXP 105
28390: PUSH
28391: LD_EXP 105
28395: PPUSH
28396: LD_VAR 0 5
28400: PPUSH
28401: LD_EXP 105
28405: PUSH
28406: LD_VAR 0 5
28410: ARRAY
28411: PUSH
28412: LD_INT 1
28414: PLUS
28415: PPUSH
28416: CALL_OW 1
28420: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28421: LD_ADDR_EXP 102
28425: PUSH
28426: LD_EXP 102
28430: PPUSH
28431: LD_VAR 0 5
28435: PUSH
28436: LD_EXP 102
28440: PUSH
28441: LD_VAR 0 5
28445: ARRAY
28446: PUSH
28447: LD_INT 1
28449: PLUS
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PPUSH
28455: LD_VAR 0 2
28459: PUSH
28460: LD_VAR 0 4
28464: ARRAY
28465: PUSH
28466: LD_VAR 0 2
28470: PUSH
28471: LD_VAR 0 4
28475: ARRAY
28476: PPUSH
28477: CALL_OW 255
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PPUSH
28486: CALL 36094 0 3
28490: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28491: LD_VAR 0 2
28495: PUSH
28496: LD_VAR 0 4
28500: ARRAY
28501: PPUSH
28502: LD_VAR 0 1
28506: PPUSH
28507: CALL_OW 255
28511: PPUSH
28512: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28516: LD_VAR 0 2
28520: PUSH
28521: LD_VAR 0 4
28525: ARRAY
28526: PPUSH
28527: CALL_OW 141
// end ;
28531: GO 28363
28533: POP
28534: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28535: LD_VAR 0 1
28539: PPUSH
28540: LD_EXP 102
28544: PUSH
28545: LD_VAR 0 5
28549: ARRAY
28550: PUSH
28551: LD_INT 0
28553: PLUS
28554: PPUSH
28555: CALL_OW 505
// end ;
28559: LD_VAR 0 3
28563: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28564: LD_INT 0
28566: PPUSH
28567: PPUSH
28568: PPUSH
28569: PPUSH
// if not hack in hackTanks then
28570: LD_VAR 0 1
28574: PUSH
28575: LD_EXP 101
28579: IN
28580: NOT
28581: IFFALSE 28585
// exit ;
28583: GO 28825
// index := GetElementIndex ( hackTanks , hack ) ;
28585: LD_ADDR_VAR 0 4
28589: PUSH
28590: LD_EXP 101
28594: PPUSH
28595: LD_VAR 0 1
28599: PPUSH
28600: CALL 35879 0 2
28604: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28605: LD_ADDR_VAR 0 3
28609: PUSH
28610: DOUBLE
28611: LD_EXP 102
28615: PUSH
28616: LD_VAR 0 4
28620: ARRAY
28621: INC
28622: ST_TO_ADDR
28623: LD_INT 1
28625: PUSH
28626: FOR_DOWNTO
28627: IFFALSE 28799
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28629: LD_ADDR_VAR 0 5
28633: PUSH
28634: LD_EXP 102
28638: PUSH
28639: LD_VAR 0 4
28643: ARRAY
28644: PUSH
28645: LD_VAR 0 3
28649: ARRAY
28650: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28651: LD_VAR 0 5
28655: PUSH
28656: LD_INT 1
28658: ARRAY
28659: PPUSH
28660: CALL_OW 302
28664: NOT
28665: PUSH
28666: LD_VAR 0 5
28670: PUSH
28671: LD_INT 1
28673: ARRAY
28674: PPUSH
28675: CALL_OW 255
28679: PUSH
28680: LD_VAR 0 1
28684: PPUSH
28685: CALL_OW 255
28689: NONEQUAL
28690: OR
28691: IFFALSE 28797
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28693: LD_VAR 0 5
28697: PUSH
28698: LD_INT 1
28700: ARRAY
28701: PPUSH
28702: CALL_OW 305
28706: PUSH
28707: LD_VAR 0 5
28711: PUSH
28712: LD_INT 1
28714: ARRAY
28715: PPUSH
28716: CALL_OW 255
28720: PUSH
28721: LD_VAR 0 1
28725: PPUSH
28726: CALL_OW 255
28730: EQUAL
28731: AND
28732: IFFALSE 28756
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28734: LD_VAR 0 5
28738: PUSH
28739: LD_INT 1
28741: ARRAY
28742: PPUSH
28743: LD_VAR 0 5
28747: PUSH
28748: LD_INT 2
28750: ARRAY
28751: PPUSH
28752: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28756: LD_ADDR_EXP 102
28760: PUSH
28761: LD_EXP 102
28765: PPUSH
28766: LD_VAR 0 4
28770: PPUSH
28771: LD_EXP 102
28775: PUSH
28776: LD_VAR 0 4
28780: ARRAY
28781: PPUSH
28782: LD_VAR 0 3
28786: PPUSH
28787: CALL_OW 3
28791: PPUSH
28792: CALL_OW 1
28796: ST_TO_ADDR
// end ; end ;
28797: GO 28626
28799: POP
28800: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28801: LD_VAR 0 1
28805: PPUSH
28806: LD_EXP 102
28810: PUSH
28811: LD_VAR 0 4
28815: ARRAY
28816: PUSH
28817: LD_INT 0
28819: PLUS
28820: PPUSH
28821: CALL_OW 505
// end ;
28825: LD_VAR 0 2
28829: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28830: LD_INT 0
28832: PPUSH
28833: PPUSH
28834: PPUSH
28835: PPUSH
// if not hack in hackTanks then
28836: LD_VAR 0 1
28840: PUSH
28841: LD_EXP 101
28845: IN
28846: NOT
28847: IFFALSE 28851
// exit ;
28849: GO 28936
// index := GetElementIndex ( hackTanks , hack ) ;
28851: LD_ADDR_VAR 0 5
28855: PUSH
28856: LD_EXP 101
28860: PPUSH
28861: LD_VAR 0 1
28865: PPUSH
28866: CALL 35879 0 2
28870: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28871: LD_ADDR_VAR 0 4
28875: PUSH
28876: DOUBLE
28877: LD_INT 1
28879: DEC
28880: ST_TO_ADDR
28881: LD_EXP 102
28885: PUSH
28886: LD_VAR 0 5
28890: ARRAY
28891: PUSH
28892: FOR_TO
28893: IFFALSE 28934
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28895: LD_EXP 102
28899: PUSH
28900: LD_VAR 0 5
28904: ARRAY
28905: PUSH
28906: LD_VAR 0 4
28910: ARRAY
28911: PUSH
28912: LD_INT 1
28914: ARRAY
28915: PUSH
28916: LD_VAR 0 2
28920: EQUAL
28921: IFFALSE 28932
// KillUnit ( vehicle ) ;
28923: LD_VAR 0 2
28927: PPUSH
28928: CALL_OW 66
28932: GO 28892
28934: POP
28935: POP
// end ;
28936: LD_VAR 0 3
28940: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28941: LD_EXP 106
28945: NOT
28946: IFFALSE 28981
28948: GO 28950
28950: DISABLE
// begin initMiner := true ;
28951: LD_ADDR_EXP 106
28955: PUSH
28956: LD_INT 1
28958: ST_TO_ADDR
// minersList := [ ] ;
28959: LD_ADDR_EXP 107
28963: PUSH
28964: EMPTY
28965: ST_TO_ADDR
// minerMinesList := [ ] ;
28966: LD_ADDR_EXP 108
28970: PUSH
28971: EMPTY
28972: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28973: LD_ADDR_EXP 109
28977: PUSH
28978: LD_INT 5
28980: ST_TO_ADDR
// end ;
28981: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28982: LD_EXP 106
28986: PUSH
28987: LD_INT 34
28989: PUSH
28990: LD_EXP 27
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PPUSH
28999: CALL_OW 69
29003: AND
29004: IFFALSE 29467
29006: GO 29008
29008: DISABLE
29009: LD_INT 0
29011: PPUSH
29012: PPUSH
29013: PPUSH
29014: PPUSH
// begin enable ;
29015: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29016: LD_ADDR_VAR 0 1
29020: PUSH
29021: LD_INT 34
29023: PUSH
29024: LD_EXP 27
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PPUSH
29033: CALL_OW 69
29037: PUSH
29038: FOR_IN
29039: IFFALSE 29111
// begin if not i in minersList then
29041: LD_VAR 0 1
29045: PUSH
29046: LD_EXP 107
29050: IN
29051: NOT
29052: IFFALSE 29109
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29054: LD_ADDR_EXP 107
29058: PUSH
29059: LD_EXP 107
29063: PPUSH
29064: LD_EXP 107
29068: PUSH
29069: LD_INT 1
29071: PLUS
29072: PPUSH
29073: LD_VAR 0 1
29077: PPUSH
29078: CALL_OW 1
29082: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29083: LD_ADDR_EXP 108
29087: PUSH
29088: LD_EXP 108
29092: PPUSH
29093: LD_EXP 108
29097: PUSH
29098: LD_INT 1
29100: PLUS
29101: PPUSH
29102: EMPTY
29103: PPUSH
29104: CALL_OW 1
29108: ST_TO_ADDR
// end end ;
29109: GO 29038
29111: POP
29112: POP
// for i := minerMinesList downto 1 do
29113: LD_ADDR_VAR 0 1
29117: PUSH
29118: DOUBLE
29119: LD_EXP 108
29123: INC
29124: ST_TO_ADDR
29125: LD_INT 1
29127: PUSH
29128: FOR_DOWNTO
29129: IFFALSE 29465
// begin if IsLive ( minersList [ i ] ) then
29131: LD_EXP 107
29135: PUSH
29136: LD_VAR 0 1
29140: ARRAY
29141: PPUSH
29142: CALL_OW 300
29146: IFFALSE 29174
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29148: LD_EXP 107
29152: PUSH
29153: LD_VAR 0 1
29157: ARRAY
29158: PPUSH
29159: LD_EXP 108
29163: PUSH
29164: LD_VAR 0 1
29168: ARRAY
29169: PPUSH
29170: CALL_OW 505
// if not minerMinesList [ i ] then
29174: LD_EXP 108
29178: PUSH
29179: LD_VAR 0 1
29183: ARRAY
29184: NOT
29185: IFFALSE 29189
// continue ;
29187: GO 29128
// for j := minerMinesList [ i ] downto 1 do
29189: LD_ADDR_VAR 0 2
29193: PUSH
29194: DOUBLE
29195: LD_EXP 108
29199: PUSH
29200: LD_VAR 0 1
29204: ARRAY
29205: INC
29206: ST_TO_ADDR
29207: LD_INT 1
29209: PUSH
29210: FOR_DOWNTO
29211: IFFALSE 29461
// begin side := GetSide ( minersList [ i ] ) ;
29213: LD_ADDR_VAR 0 3
29217: PUSH
29218: LD_EXP 107
29222: PUSH
29223: LD_VAR 0 1
29227: ARRAY
29228: PPUSH
29229: CALL_OW 255
29233: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29234: LD_ADDR_VAR 0 4
29238: PUSH
29239: LD_EXP 108
29243: PUSH
29244: LD_VAR 0 1
29248: ARRAY
29249: PUSH
29250: LD_VAR 0 2
29254: ARRAY
29255: PUSH
29256: LD_INT 1
29258: ARRAY
29259: PPUSH
29260: LD_EXP 108
29264: PUSH
29265: LD_VAR 0 1
29269: ARRAY
29270: PUSH
29271: LD_VAR 0 2
29275: ARRAY
29276: PUSH
29277: LD_INT 2
29279: ARRAY
29280: PPUSH
29281: CALL_OW 428
29285: ST_TO_ADDR
// if not tmp then
29286: LD_VAR 0 4
29290: NOT
29291: IFFALSE 29295
// continue ;
29293: GO 29210
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29295: LD_VAR 0 4
29299: PUSH
29300: LD_INT 81
29302: PUSH
29303: LD_VAR 0 3
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PPUSH
29312: CALL_OW 69
29316: IN
29317: PUSH
29318: LD_EXP 108
29322: PUSH
29323: LD_VAR 0 1
29327: ARRAY
29328: PUSH
29329: LD_VAR 0 2
29333: ARRAY
29334: PUSH
29335: LD_INT 1
29337: ARRAY
29338: PPUSH
29339: LD_EXP 108
29343: PUSH
29344: LD_VAR 0 1
29348: ARRAY
29349: PUSH
29350: LD_VAR 0 2
29354: ARRAY
29355: PUSH
29356: LD_INT 2
29358: ARRAY
29359: PPUSH
29360: CALL_OW 458
29364: AND
29365: IFFALSE 29459
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29367: LD_EXP 108
29371: PUSH
29372: LD_VAR 0 1
29376: ARRAY
29377: PUSH
29378: LD_VAR 0 2
29382: ARRAY
29383: PUSH
29384: LD_INT 1
29386: ARRAY
29387: PPUSH
29388: LD_EXP 108
29392: PUSH
29393: LD_VAR 0 1
29397: ARRAY
29398: PUSH
29399: LD_VAR 0 2
29403: ARRAY
29404: PUSH
29405: LD_INT 2
29407: ARRAY
29408: PPUSH
29409: LD_VAR 0 3
29413: PPUSH
29414: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29418: LD_ADDR_EXP 108
29422: PUSH
29423: LD_EXP 108
29427: PPUSH
29428: LD_VAR 0 1
29432: PPUSH
29433: LD_EXP 108
29437: PUSH
29438: LD_VAR 0 1
29442: ARRAY
29443: PPUSH
29444: LD_VAR 0 2
29448: PPUSH
29449: CALL_OW 3
29453: PPUSH
29454: CALL_OW 1
29458: ST_TO_ADDR
// end ; end ;
29459: GO 29210
29461: POP
29462: POP
// end ;
29463: GO 29128
29465: POP
29466: POP
// end ;
29467: PPOPN 4
29469: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29470: LD_INT 0
29472: PPUSH
29473: PPUSH
// result := false ;
29474: LD_ADDR_VAR 0 4
29478: PUSH
29479: LD_INT 0
29481: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29482: LD_VAR 0 1
29486: PPUSH
29487: CALL_OW 264
29491: PUSH
29492: LD_EXP 27
29496: EQUAL
29497: NOT
29498: IFFALSE 29502
// exit ;
29500: GO 29742
// index := GetElementIndex ( minersList , unit ) ;
29502: LD_ADDR_VAR 0 5
29506: PUSH
29507: LD_EXP 107
29511: PPUSH
29512: LD_VAR 0 1
29516: PPUSH
29517: CALL 35879 0 2
29521: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29522: LD_EXP 108
29526: PUSH
29527: LD_VAR 0 5
29531: ARRAY
29532: PUSH
29533: LD_EXP 109
29537: GREATEREQUAL
29538: IFFALSE 29542
// exit ;
29540: GO 29742
// ComMoveXY ( unit , x , y ) ;
29542: LD_VAR 0 1
29546: PPUSH
29547: LD_VAR 0 2
29551: PPUSH
29552: LD_VAR 0 3
29556: PPUSH
29557: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29561: LD_INT 35
29563: PPUSH
29564: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29568: LD_VAR 0 1
29572: PPUSH
29573: LD_VAR 0 2
29577: PPUSH
29578: LD_VAR 0 3
29582: PPUSH
29583: CALL 67165 0 3
29587: NOT
29588: PUSH
29589: LD_VAR 0 1
29593: PPUSH
29594: CALL_OW 314
29598: AND
29599: IFFALSE 29603
// exit ;
29601: GO 29742
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29603: LD_VAR 0 2
29607: PPUSH
29608: LD_VAR 0 3
29612: PPUSH
29613: CALL_OW 428
29617: PUSH
29618: LD_VAR 0 1
29622: EQUAL
29623: PUSH
29624: LD_VAR 0 1
29628: PPUSH
29629: CALL_OW 314
29633: NOT
29634: AND
29635: IFFALSE 29561
// PlaySoundXY ( x , y , PlantMine ) ;
29637: LD_VAR 0 2
29641: PPUSH
29642: LD_VAR 0 3
29646: PPUSH
29647: LD_STRING PlantMine
29649: PPUSH
29650: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29654: LD_VAR 0 2
29658: PPUSH
29659: LD_VAR 0 3
29663: PPUSH
29664: LD_VAR 0 1
29668: PPUSH
29669: CALL_OW 255
29673: PPUSH
29674: LD_INT 0
29676: PPUSH
29677: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29681: LD_ADDR_EXP 108
29685: PUSH
29686: LD_EXP 108
29690: PPUSH
29691: LD_VAR 0 5
29695: PUSH
29696: LD_EXP 108
29700: PUSH
29701: LD_VAR 0 5
29705: ARRAY
29706: PUSH
29707: LD_INT 1
29709: PLUS
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PPUSH
29715: LD_VAR 0 2
29719: PUSH
29720: LD_VAR 0 3
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PPUSH
29729: CALL 36094 0 3
29733: ST_TO_ADDR
// result := true ;
29734: LD_ADDR_VAR 0 4
29738: PUSH
29739: LD_INT 1
29741: ST_TO_ADDR
// end ;
29742: LD_VAR 0 4
29746: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29747: LD_INT 0
29749: PPUSH
29750: PPUSH
29751: PPUSH
// if not unit in minersList then
29752: LD_VAR 0 1
29756: PUSH
29757: LD_EXP 107
29761: IN
29762: NOT
29763: IFFALSE 29767
// exit ;
29765: GO 30159
// index := GetElementIndex ( minersList , unit ) ;
29767: LD_ADDR_VAR 0 6
29771: PUSH
29772: LD_EXP 107
29776: PPUSH
29777: LD_VAR 0 1
29781: PPUSH
29782: CALL 35879 0 2
29786: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29787: LD_ADDR_VAR 0 5
29791: PUSH
29792: DOUBLE
29793: LD_EXP 108
29797: PUSH
29798: LD_VAR 0 6
29802: ARRAY
29803: INC
29804: ST_TO_ADDR
29805: LD_INT 1
29807: PUSH
29808: FOR_DOWNTO
29809: IFFALSE 29970
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29811: LD_EXP 108
29815: PUSH
29816: LD_VAR 0 6
29820: ARRAY
29821: PUSH
29822: LD_VAR 0 5
29826: ARRAY
29827: PUSH
29828: LD_INT 1
29830: ARRAY
29831: PUSH
29832: LD_VAR 0 2
29836: EQUAL
29837: PUSH
29838: LD_EXP 108
29842: PUSH
29843: LD_VAR 0 6
29847: ARRAY
29848: PUSH
29849: LD_VAR 0 5
29853: ARRAY
29854: PUSH
29855: LD_INT 2
29857: ARRAY
29858: PUSH
29859: LD_VAR 0 3
29863: EQUAL
29864: AND
29865: IFFALSE 29968
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29867: LD_EXP 108
29871: PUSH
29872: LD_VAR 0 6
29876: ARRAY
29877: PUSH
29878: LD_VAR 0 5
29882: ARRAY
29883: PUSH
29884: LD_INT 1
29886: ARRAY
29887: PPUSH
29888: LD_EXP 108
29892: PUSH
29893: LD_VAR 0 6
29897: ARRAY
29898: PUSH
29899: LD_VAR 0 5
29903: ARRAY
29904: PUSH
29905: LD_INT 2
29907: ARRAY
29908: PPUSH
29909: LD_VAR 0 1
29913: PPUSH
29914: CALL_OW 255
29918: PPUSH
29919: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29923: LD_ADDR_EXP 108
29927: PUSH
29928: LD_EXP 108
29932: PPUSH
29933: LD_VAR 0 6
29937: PPUSH
29938: LD_EXP 108
29942: PUSH
29943: LD_VAR 0 6
29947: ARRAY
29948: PPUSH
29949: LD_VAR 0 5
29953: PPUSH
29954: CALL_OW 3
29958: PPUSH
29959: CALL_OW 1
29963: ST_TO_ADDR
// exit ;
29964: POP
29965: POP
29966: GO 30159
// end ; end ;
29968: GO 29808
29970: POP
29971: POP
// for i := minerMinesList [ index ] downto 1 do
29972: LD_ADDR_VAR 0 5
29976: PUSH
29977: DOUBLE
29978: LD_EXP 108
29982: PUSH
29983: LD_VAR 0 6
29987: ARRAY
29988: INC
29989: ST_TO_ADDR
29990: LD_INT 1
29992: PUSH
29993: FOR_DOWNTO
29994: IFFALSE 30157
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29996: LD_EXP 108
30000: PUSH
30001: LD_VAR 0 6
30005: ARRAY
30006: PUSH
30007: LD_VAR 0 5
30011: ARRAY
30012: PUSH
30013: LD_INT 1
30015: ARRAY
30016: PPUSH
30017: LD_EXP 108
30021: PUSH
30022: LD_VAR 0 6
30026: ARRAY
30027: PUSH
30028: LD_VAR 0 5
30032: ARRAY
30033: PUSH
30034: LD_INT 2
30036: ARRAY
30037: PPUSH
30038: LD_VAR 0 2
30042: PPUSH
30043: LD_VAR 0 3
30047: PPUSH
30048: CALL_OW 298
30052: PUSH
30053: LD_INT 6
30055: LESS
30056: IFFALSE 30155
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30058: LD_EXP 108
30062: PUSH
30063: LD_VAR 0 6
30067: ARRAY
30068: PUSH
30069: LD_VAR 0 5
30073: ARRAY
30074: PUSH
30075: LD_INT 1
30077: ARRAY
30078: PPUSH
30079: LD_EXP 108
30083: PUSH
30084: LD_VAR 0 6
30088: ARRAY
30089: PUSH
30090: LD_VAR 0 5
30094: ARRAY
30095: PUSH
30096: LD_INT 2
30098: ARRAY
30099: PPUSH
30100: LD_VAR 0 1
30104: PPUSH
30105: CALL_OW 255
30109: PPUSH
30110: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30114: LD_ADDR_EXP 108
30118: PUSH
30119: LD_EXP 108
30123: PPUSH
30124: LD_VAR 0 6
30128: PPUSH
30129: LD_EXP 108
30133: PUSH
30134: LD_VAR 0 6
30138: ARRAY
30139: PPUSH
30140: LD_VAR 0 5
30144: PPUSH
30145: CALL_OW 3
30149: PPUSH
30150: CALL_OW 1
30154: ST_TO_ADDR
// end ; end ;
30155: GO 29993
30157: POP
30158: POP
// end ;
30159: LD_VAR 0 4
30163: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30164: LD_INT 0
30166: PPUSH
30167: PPUSH
30168: PPUSH
30169: PPUSH
30170: PPUSH
30171: PPUSH
30172: PPUSH
30173: PPUSH
30174: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30175: LD_VAR 0 1
30179: PPUSH
30180: CALL_OW 264
30184: PUSH
30185: LD_EXP 27
30189: EQUAL
30190: NOT
30191: PUSH
30192: LD_VAR 0 1
30196: PUSH
30197: LD_EXP 107
30201: IN
30202: NOT
30203: OR
30204: IFFALSE 30208
// exit ;
30206: GO 30530
// index := GetElementIndex ( minersList , unit ) ;
30208: LD_ADDR_VAR 0 6
30212: PUSH
30213: LD_EXP 107
30217: PPUSH
30218: LD_VAR 0 1
30222: PPUSH
30223: CALL 35879 0 2
30227: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30228: LD_ADDR_VAR 0 8
30232: PUSH
30233: LD_EXP 109
30237: PUSH
30238: LD_EXP 108
30242: PUSH
30243: LD_VAR 0 6
30247: ARRAY
30248: MINUS
30249: ST_TO_ADDR
// if not minesFreeAmount then
30250: LD_VAR 0 8
30254: NOT
30255: IFFALSE 30259
// exit ;
30257: GO 30530
// tmp := [ ] ;
30259: LD_ADDR_VAR 0 7
30263: PUSH
30264: EMPTY
30265: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30266: LD_ADDR_VAR 0 5
30270: PUSH
30271: DOUBLE
30272: LD_INT 1
30274: DEC
30275: ST_TO_ADDR
30276: LD_VAR 0 8
30280: PUSH
30281: FOR_TO
30282: IFFALSE 30477
// begin _d := rand ( 0 , 5 ) ;
30284: LD_ADDR_VAR 0 11
30288: PUSH
30289: LD_INT 0
30291: PPUSH
30292: LD_INT 5
30294: PPUSH
30295: CALL_OW 12
30299: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30300: LD_ADDR_VAR 0 12
30304: PUSH
30305: LD_INT 2
30307: PPUSH
30308: LD_INT 6
30310: PPUSH
30311: CALL_OW 12
30315: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30316: LD_ADDR_VAR 0 9
30320: PUSH
30321: LD_VAR 0 2
30325: PPUSH
30326: LD_VAR 0 11
30330: PPUSH
30331: LD_VAR 0 12
30335: PPUSH
30336: CALL_OW 272
30340: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30341: LD_ADDR_VAR 0 10
30345: PUSH
30346: LD_VAR 0 3
30350: PPUSH
30351: LD_VAR 0 11
30355: PPUSH
30356: LD_VAR 0 12
30360: PPUSH
30361: CALL_OW 273
30365: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30366: LD_VAR 0 9
30370: PPUSH
30371: LD_VAR 0 10
30375: PPUSH
30376: CALL_OW 488
30380: PUSH
30381: LD_VAR 0 9
30385: PUSH
30386: LD_VAR 0 10
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_VAR 0 7
30399: IN
30400: NOT
30401: AND
30402: PUSH
30403: LD_VAR 0 9
30407: PPUSH
30408: LD_VAR 0 10
30412: PPUSH
30413: CALL_OW 458
30417: NOT
30418: AND
30419: IFFALSE 30461
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30421: LD_ADDR_VAR 0 7
30425: PUSH
30426: LD_VAR 0 7
30430: PPUSH
30431: LD_VAR 0 7
30435: PUSH
30436: LD_INT 1
30438: PLUS
30439: PPUSH
30440: LD_VAR 0 9
30444: PUSH
30445: LD_VAR 0 10
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PPUSH
30454: CALL_OW 1
30458: ST_TO_ADDR
30459: GO 30475
// i := i - 1 ;
30461: LD_ADDR_VAR 0 5
30465: PUSH
30466: LD_VAR 0 5
30470: PUSH
30471: LD_INT 1
30473: MINUS
30474: ST_TO_ADDR
// end ;
30475: GO 30281
30477: POP
30478: POP
// for i in tmp do
30479: LD_ADDR_VAR 0 5
30483: PUSH
30484: LD_VAR 0 7
30488: PUSH
30489: FOR_IN
30490: IFFALSE 30528
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30492: LD_VAR 0 1
30496: PPUSH
30497: LD_VAR 0 5
30501: PUSH
30502: LD_INT 1
30504: ARRAY
30505: PPUSH
30506: LD_VAR 0 5
30510: PUSH
30511: LD_INT 2
30513: ARRAY
30514: PPUSH
30515: CALL 29470 0 3
30519: NOT
30520: IFFALSE 30526
// exit ;
30522: POP
30523: POP
30524: GO 30530
30526: GO 30489
30528: POP
30529: POP
// end ;
30530: LD_VAR 0 4
30534: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30535: LD_INT 0
30537: PPUSH
30538: PPUSH
30539: PPUSH
30540: PPUSH
30541: PPUSH
30542: PPUSH
30543: PPUSH
// if not GetClass ( unit ) = class_sniper then
30544: LD_VAR 0 1
30548: PPUSH
30549: CALL_OW 257
30553: PUSH
30554: LD_INT 5
30556: EQUAL
30557: NOT
30558: IFFALSE 30562
// exit ;
30560: GO 30950
// dist := 8 ;
30562: LD_ADDR_VAR 0 5
30566: PUSH
30567: LD_INT 8
30569: ST_TO_ADDR
// viewRange := 12 ;
30570: LD_ADDR_VAR 0 7
30574: PUSH
30575: LD_INT 12
30577: ST_TO_ADDR
// side := GetSide ( unit ) ;
30578: LD_ADDR_VAR 0 6
30582: PUSH
30583: LD_VAR 0 1
30587: PPUSH
30588: CALL_OW 255
30592: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30593: LD_INT 61
30595: PPUSH
30596: LD_VAR 0 6
30600: PPUSH
30601: CALL_OW 321
30605: PUSH
30606: LD_INT 2
30608: EQUAL
30609: IFFALSE 30619
// viewRange := 16 ;
30611: LD_ADDR_VAR 0 7
30615: PUSH
30616: LD_INT 16
30618: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30619: LD_VAR 0 1
30623: PPUSH
30624: LD_VAR 0 2
30628: PPUSH
30629: LD_VAR 0 3
30633: PPUSH
30634: CALL_OW 297
30638: PUSH
30639: LD_VAR 0 5
30643: GREATER
30644: IFFALSE 30723
// begin ComMoveXY ( unit , x , y ) ;
30646: LD_VAR 0 1
30650: PPUSH
30651: LD_VAR 0 2
30655: PPUSH
30656: LD_VAR 0 3
30660: PPUSH
30661: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30665: LD_INT 35
30667: PPUSH
30668: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30672: LD_VAR 0 1
30676: PPUSH
30677: LD_VAR 0 2
30681: PPUSH
30682: LD_VAR 0 3
30686: PPUSH
30687: CALL 67165 0 3
30691: NOT
30692: IFFALSE 30696
// exit ;
30694: GO 30950
// until GetDistUnitXY ( unit , x , y ) < dist ;
30696: LD_VAR 0 1
30700: PPUSH
30701: LD_VAR 0 2
30705: PPUSH
30706: LD_VAR 0 3
30710: PPUSH
30711: CALL_OW 297
30715: PUSH
30716: LD_VAR 0 5
30720: LESS
30721: IFFALSE 30665
// end ; ComTurnXY ( unit , x , y ) ;
30723: LD_VAR 0 1
30727: PPUSH
30728: LD_VAR 0 2
30732: PPUSH
30733: LD_VAR 0 3
30737: PPUSH
30738: CALL_OW 118
// wait ( 5 ) ;
30742: LD_INT 5
30744: PPUSH
30745: CALL_OW 67
// _d := GetDir ( unit ) ;
30749: LD_ADDR_VAR 0 10
30753: PUSH
30754: LD_VAR 0 1
30758: PPUSH
30759: CALL_OW 254
30763: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30764: LD_ADDR_VAR 0 8
30768: PUSH
30769: LD_VAR 0 1
30773: PPUSH
30774: CALL_OW 250
30778: PPUSH
30779: LD_VAR 0 10
30783: PPUSH
30784: LD_VAR 0 5
30788: PPUSH
30789: CALL_OW 272
30793: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30794: LD_ADDR_VAR 0 9
30798: PUSH
30799: LD_VAR 0 1
30803: PPUSH
30804: CALL_OW 251
30808: PPUSH
30809: LD_VAR 0 10
30813: PPUSH
30814: LD_VAR 0 5
30818: PPUSH
30819: CALL_OW 273
30823: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30824: LD_VAR 0 8
30828: PPUSH
30829: LD_VAR 0 9
30833: PPUSH
30834: CALL_OW 488
30838: NOT
30839: IFFALSE 30843
// exit ;
30841: GO 30950
// ComAnimCustom ( unit , 1 ) ;
30843: LD_VAR 0 1
30847: PPUSH
30848: LD_INT 1
30850: PPUSH
30851: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30855: LD_VAR 0 8
30859: PPUSH
30860: LD_VAR 0 9
30864: PPUSH
30865: LD_VAR 0 6
30869: PPUSH
30870: LD_VAR 0 7
30874: PPUSH
30875: CALL_OW 330
// repeat wait ( 1 ) ;
30879: LD_INT 1
30881: PPUSH
30882: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30886: LD_VAR 0 1
30890: PPUSH
30891: CALL_OW 316
30895: PUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: CALL_OW 314
30905: OR
30906: PUSH
30907: LD_VAR 0 1
30911: PPUSH
30912: CALL_OW 302
30916: NOT
30917: OR
30918: PUSH
30919: LD_VAR 0 1
30923: PPUSH
30924: CALL_OW 301
30928: OR
30929: IFFALSE 30879
// RemoveSeeing ( _x , _y , side ) ;
30931: LD_VAR 0 8
30935: PPUSH
30936: LD_VAR 0 9
30940: PPUSH
30941: LD_VAR 0 6
30945: PPUSH
30946: CALL_OW 331
// end ; end_of_file
30950: LD_VAR 0 4
30954: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30955: LD_INT 0
30957: PPUSH
30958: PPUSH
// if exist_mode then
30959: LD_VAR 0 2
30963: IFFALSE 30988
// unit := CreateCharacter ( prefix & ident ) else
30965: LD_ADDR_VAR 0 5
30969: PUSH
30970: LD_VAR 0 3
30974: PUSH
30975: LD_VAR 0 1
30979: STR
30980: PPUSH
30981: CALL_OW 34
30985: ST_TO_ADDR
30986: GO 31003
// unit := NewCharacter ( ident ) ;
30988: LD_ADDR_VAR 0 5
30992: PUSH
30993: LD_VAR 0 1
30997: PPUSH
30998: CALL_OW 25
31002: ST_TO_ADDR
// result := unit ;
31003: LD_ADDR_VAR 0 4
31007: PUSH
31008: LD_VAR 0 5
31012: ST_TO_ADDR
// end ;
31013: LD_VAR 0 4
31017: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31018: LD_INT 0
31020: PPUSH
31021: PPUSH
// if not side or not nation then
31022: LD_VAR 0 1
31026: NOT
31027: PUSH
31028: LD_VAR 0 2
31032: NOT
31033: OR
31034: IFFALSE 31038
// exit ;
31036: GO 31806
// case nation of nation_american :
31038: LD_VAR 0 2
31042: PUSH
31043: LD_INT 1
31045: DOUBLE
31046: EQUAL
31047: IFTRUE 31051
31049: GO 31265
31051: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31052: LD_ADDR_VAR 0 4
31056: PUSH
31057: LD_INT 35
31059: PUSH
31060: LD_INT 45
31062: PUSH
31063: LD_INT 46
31065: PUSH
31066: LD_INT 47
31068: PUSH
31069: LD_INT 82
31071: PUSH
31072: LD_INT 83
31074: PUSH
31075: LD_INT 84
31077: PUSH
31078: LD_INT 85
31080: PUSH
31081: LD_INT 86
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: LD_INT 2
31089: PUSH
31090: LD_INT 6
31092: PUSH
31093: LD_INT 15
31095: PUSH
31096: LD_INT 16
31098: PUSH
31099: LD_INT 7
31101: PUSH
31102: LD_INT 12
31104: PUSH
31105: LD_INT 13
31107: PUSH
31108: LD_INT 10
31110: PUSH
31111: LD_INT 14
31113: PUSH
31114: LD_INT 20
31116: PUSH
31117: LD_INT 21
31119: PUSH
31120: LD_INT 22
31122: PUSH
31123: LD_INT 25
31125: PUSH
31126: LD_INT 32
31128: PUSH
31129: LD_INT 27
31131: PUSH
31132: LD_INT 36
31134: PUSH
31135: LD_INT 69
31137: PUSH
31138: LD_INT 39
31140: PUSH
31141: LD_INT 34
31143: PUSH
31144: LD_INT 40
31146: PUSH
31147: LD_INT 48
31149: PUSH
31150: LD_INT 49
31152: PUSH
31153: LD_INT 50
31155: PUSH
31156: LD_INT 51
31158: PUSH
31159: LD_INT 52
31161: PUSH
31162: LD_INT 53
31164: PUSH
31165: LD_INT 54
31167: PUSH
31168: LD_INT 55
31170: PUSH
31171: LD_INT 56
31173: PUSH
31174: LD_INT 57
31176: PUSH
31177: LD_INT 58
31179: PUSH
31180: LD_INT 59
31182: PUSH
31183: LD_INT 60
31185: PUSH
31186: LD_INT 61
31188: PUSH
31189: LD_INT 62
31191: PUSH
31192: LD_INT 80
31194: PUSH
31195: LD_INT 82
31197: PUSH
31198: LD_INT 83
31200: PUSH
31201: LD_INT 84
31203: PUSH
31204: LD_INT 85
31206: PUSH
31207: LD_INT 86
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: ST_TO_ADDR
31263: GO 31730
31265: LD_INT 2
31267: DOUBLE
31268: EQUAL
31269: IFTRUE 31273
31271: GO 31499
31273: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31274: LD_ADDR_VAR 0 4
31278: PUSH
31279: LD_INT 35
31281: PUSH
31282: LD_INT 45
31284: PUSH
31285: LD_INT 46
31287: PUSH
31288: LD_INT 47
31290: PUSH
31291: LD_INT 82
31293: PUSH
31294: LD_INT 83
31296: PUSH
31297: LD_INT 84
31299: PUSH
31300: LD_INT 85
31302: PUSH
31303: LD_INT 87
31305: PUSH
31306: LD_INT 70
31308: PUSH
31309: LD_INT 1
31311: PUSH
31312: LD_INT 11
31314: PUSH
31315: LD_INT 3
31317: PUSH
31318: LD_INT 4
31320: PUSH
31321: LD_INT 5
31323: PUSH
31324: LD_INT 6
31326: PUSH
31327: LD_INT 15
31329: PUSH
31330: LD_INT 18
31332: PUSH
31333: LD_INT 7
31335: PUSH
31336: LD_INT 17
31338: PUSH
31339: LD_INT 8
31341: PUSH
31342: LD_INT 20
31344: PUSH
31345: LD_INT 21
31347: PUSH
31348: LD_INT 22
31350: PUSH
31351: LD_INT 72
31353: PUSH
31354: LD_INT 26
31356: PUSH
31357: LD_INT 69
31359: PUSH
31360: LD_INT 39
31362: PUSH
31363: LD_INT 40
31365: PUSH
31366: LD_INT 41
31368: PUSH
31369: LD_INT 42
31371: PUSH
31372: LD_INT 43
31374: PUSH
31375: LD_INT 48
31377: PUSH
31378: LD_INT 49
31380: PUSH
31381: LD_INT 50
31383: PUSH
31384: LD_INT 51
31386: PUSH
31387: LD_INT 52
31389: PUSH
31390: LD_INT 53
31392: PUSH
31393: LD_INT 54
31395: PUSH
31396: LD_INT 55
31398: PUSH
31399: LD_INT 56
31401: PUSH
31402: LD_INT 60
31404: PUSH
31405: LD_INT 61
31407: PUSH
31408: LD_INT 62
31410: PUSH
31411: LD_INT 66
31413: PUSH
31414: LD_INT 67
31416: PUSH
31417: LD_INT 68
31419: PUSH
31420: LD_INT 81
31422: PUSH
31423: LD_INT 82
31425: PUSH
31426: LD_INT 83
31428: PUSH
31429: LD_INT 84
31431: PUSH
31432: LD_INT 85
31434: PUSH
31435: LD_INT 87
31437: PUSH
31438: LD_INT 88
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: ST_TO_ADDR
31497: GO 31730
31499: LD_INT 3
31501: DOUBLE
31502: EQUAL
31503: IFTRUE 31507
31505: GO 31729
31507: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31508: LD_ADDR_VAR 0 4
31512: PUSH
31513: LD_INT 46
31515: PUSH
31516: LD_INT 47
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: LD_INT 2
31524: PUSH
31525: LD_INT 82
31527: PUSH
31528: LD_INT 83
31530: PUSH
31531: LD_INT 84
31533: PUSH
31534: LD_INT 85
31536: PUSH
31537: LD_INT 86
31539: PUSH
31540: LD_INT 11
31542: PUSH
31543: LD_INT 9
31545: PUSH
31546: LD_INT 20
31548: PUSH
31549: LD_INT 19
31551: PUSH
31552: LD_INT 21
31554: PUSH
31555: LD_INT 24
31557: PUSH
31558: LD_INT 22
31560: PUSH
31561: LD_INT 25
31563: PUSH
31564: LD_INT 28
31566: PUSH
31567: LD_INT 29
31569: PUSH
31570: LD_INT 30
31572: PUSH
31573: LD_INT 31
31575: PUSH
31576: LD_INT 37
31578: PUSH
31579: LD_INT 38
31581: PUSH
31582: LD_INT 32
31584: PUSH
31585: LD_INT 27
31587: PUSH
31588: LD_INT 33
31590: PUSH
31591: LD_INT 69
31593: PUSH
31594: LD_INT 39
31596: PUSH
31597: LD_INT 34
31599: PUSH
31600: LD_INT 40
31602: PUSH
31603: LD_INT 71
31605: PUSH
31606: LD_INT 23
31608: PUSH
31609: LD_INT 44
31611: PUSH
31612: LD_INT 48
31614: PUSH
31615: LD_INT 49
31617: PUSH
31618: LD_INT 50
31620: PUSH
31621: LD_INT 51
31623: PUSH
31624: LD_INT 52
31626: PUSH
31627: LD_INT 53
31629: PUSH
31630: LD_INT 54
31632: PUSH
31633: LD_INT 55
31635: PUSH
31636: LD_INT 56
31638: PUSH
31639: LD_INT 57
31641: PUSH
31642: LD_INT 58
31644: PUSH
31645: LD_INT 59
31647: PUSH
31648: LD_INT 63
31650: PUSH
31651: LD_INT 64
31653: PUSH
31654: LD_INT 65
31656: PUSH
31657: LD_INT 82
31659: PUSH
31660: LD_INT 83
31662: PUSH
31663: LD_INT 84
31665: PUSH
31666: LD_INT 85
31668: PUSH
31669: LD_INT 86
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: ST_TO_ADDR
31727: GO 31730
31729: POP
// if state > - 1 and state < 3 then
31730: LD_VAR 0 3
31734: PUSH
31735: LD_INT 1
31737: NEG
31738: GREATER
31739: PUSH
31740: LD_VAR 0 3
31744: PUSH
31745: LD_INT 3
31747: LESS
31748: AND
31749: IFFALSE 31806
// for i in result do
31751: LD_ADDR_VAR 0 5
31755: PUSH
31756: LD_VAR 0 4
31760: PUSH
31761: FOR_IN
31762: IFFALSE 31804
// if GetTech ( i , side ) <> state then
31764: LD_VAR 0 5
31768: PPUSH
31769: LD_VAR 0 1
31773: PPUSH
31774: CALL_OW 321
31778: PUSH
31779: LD_VAR 0 3
31783: NONEQUAL
31784: IFFALSE 31802
// result := result diff i ;
31786: LD_ADDR_VAR 0 4
31790: PUSH
31791: LD_VAR 0 4
31795: PUSH
31796: LD_VAR 0 5
31800: DIFF
31801: ST_TO_ADDR
31802: GO 31761
31804: POP
31805: POP
// end ;
31806: LD_VAR 0 4
31810: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31811: LD_INT 0
31813: PPUSH
31814: PPUSH
31815: PPUSH
// result := true ;
31816: LD_ADDR_VAR 0 3
31820: PUSH
31821: LD_INT 1
31823: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31824: LD_ADDR_VAR 0 5
31828: PUSH
31829: LD_VAR 0 2
31833: PPUSH
31834: CALL_OW 480
31838: ST_TO_ADDR
// if not tmp then
31839: LD_VAR 0 5
31843: NOT
31844: IFFALSE 31848
// exit ;
31846: GO 31897
// for i in tmp do
31848: LD_ADDR_VAR 0 4
31852: PUSH
31853: LD_VAR 0 5
31857: PUSH
31858: FOR_IN
31859: IFFALSE 31895
// if GetTech ( i , side ) <> state_researched then
31861: LD_VAR 0 4
31865: PPUSH
31866: LD_VAR 0 1
31870: PPUSH
31871: CALL_OW 321
31875: PUSH
31876: LD_INT 2
31878: NONEQUAL
31879: IFFALSE 31893
// begin result := false ;
31881: LD_ADDR_VAR 0 3
31885: PUSH
31886: LD_INT 0
31888: ST_TO_ADDR
// exit ;
31889: POP
31890: POP
31891: GO 31897
// end ;
31893: GO 31858
31895: POP
31896: POP
// end ;
31897: LD_VAR 0 3
31901: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31902: LD_INT 0
31904: PPUSH
31905: PPUSH
31906: PPUSH
31907: PPUSH
31908: PPUSH
31909: PPUSH
31910: PPUSH
31911: PPUSH
31912: PPUSH
31913: PPUSH
31914: PPUSH
31915: PPUSH
31916: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31917: LD_VAR 0 1
31921: NOT
31922: PUSH
31923: LD_VAR 0 1
31927: PPUSH
31928: CALL_OW 257
31932: PUSH
31933: LD_INT 9
31935: NONEQUAL
31936: OR
31937: IFFALSE 31941
// exit ;
31939: GO 32514
// side := GetSide ( unit ) ;
31941: LD_ADDR_VAR 0 9
31945: PUSH
31946: LD_VAR 0 1
31950: PPUSH
31951: CALL_OW 255
31955: ST_TO_ADDR
// tech_space := tech_spacanom ;
31956: LD_ADDR_VAR 0 12
31960: PUSH
31961: LD_INT 29
31963: ST_TO_ADDR
// tech_time := tech_taurad ;
31964: LD_ADDR_VAR 0 13
31968: PUSH
31969: LD_INT 28
31971: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31972: LD_ADDR_VAR 0 11
31976: PUSH
31977: LD_VAR 0 1
31981: PPUSH
31982: CALL_OW 310
31986: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31987: LD_VAR 0 11
31991: PPUSH
31992: CALL_OW 247
31996: PUSH
31997: LD_INT 2
31999: EQUAL
32000: IFFALSE 32004
// exit ;
32002: GO 32514
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32004: LD_ADDR_VAR 0 8
32008: PUSH
32009: LD_INT 81
32011: PUSH
32012: LD_VAR 0 9
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 3
32023: PUSH
32024: LD_INT 21
32026: PUSH
32027: LD_INT 3
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PPUSH
32042: CALL_OW 69
32046: ST_TO_ADDR
// if not tmp then
32047: LD_VAR 0 8
32051: NOT
32052: IFFALSE 32056
// exit ;
32054: GO 32514
// if in_unit then
32056: LD_VAR 0 11
32060: IFFALSE 32084
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32062: LD_ADDR_VAR 0 10
32066: PUSH
32067: LD_VAR 0 8
32071: PPUSH
32072: LD_VAR 0 11
32076: PPUSH
32077: CALL_OW 74
32081: ST_TO_ADDR
32082: GO 32104
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32084: LD_ADDR_VAR 0 10
32088: PUSH
32089: LD_VAR 0 8
32093: PPUSH
32094: LD_VAR 0 1
32098: PPUSH
32099: CALL_OW 74
32103: ST_TO_ADDR
// if not enemy then
32104: LD_VAR 0 10
32108: NOT
32109: IFFALSE 32113
// exit ;
32111: GO 32514
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32113: LD_VAR 0 11
32117: PUSH
32118: LD_VAR 0 11
32122: PPUSH
32123: LD_VAR 0 10
32127: PPUSH
32128: CALL_OW 296
32132: PUSH
32133: LD_INT 13
32135: GREATER
32136: AND
32137: PUSH
32138: LD_VAR 0 1
32142: PPUSH
32143: LD_VAR 0 10
32147: PPUSH
32148: CALL_OW 296
32152: PUSH
32153: LD_INT 12
32155: GREATER
32156: OR
32157: IFFALSE 32161
// exit ;
32159: GO 32514
// missile := [ 1 ] ;
32161: LD_ADDR_VAR 0 14
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32172: LD_VAR 0 9
32176: PPUSH
32177: LD_VAR 0 12
32181: PPUSH
32182: CALL_OW 325
32186: IFFALSE 32215
// missile := Replace ( missile , missile + 1 , 2 ) ;
32188: LD_ADDR_VAR 0 14
32192: PUSH
32193: LD_VAR 0 14
32197: PPUSH
32198: LD_VAR 0 14
32202: PUSH
32203: LD_INT 1
32205: PLUS
32206: PPUSH
32207: LD_INT 2
32209: PPUSH
32210: CALL_OW 1
32214: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32215: LD_VAR 0 9
32219: PPUSH
32220: LD_VAR 0 13
32224: PPUSH
32225: CALL_OW 325
32229: PUSH
32230: LD_VAR 0 10
32234: PPUSH
32235: CALL_OW 255
32239: PPUSH
32240: LD_VAR 0 13
32244: PPUSH
32245: CALL_OW 325
32249: NOT
32250: AND
32251: IFFALSE 32280
// missile := Replace ( missile , missile + 1 , 3 ) ;
32253: LD_ADDR_VAR 0 14
32257: PUSH
32258: LD_VAR 0 14
32262: PPUSH
32263: LD_VAR 0 14
32267: PUSH
32268: LD_INT 1
32270: PLUS
32271: PPUSH
32272: LD_INT 3
32274: PPUSH
32275: CALL_OW 1
32279: ST_TO_ADDR
// if missile < 2 then
32280: LD_VAR 0 14
32284: PUSH
32285: LD_INT 2
32287: LESS
32288: IFFALSE 32292
// exit ;
32290: GO 32514
// x := GetX ( enemy ) ;
32292: LD_ADDR_VAR 0 4
32296: PUSH
32297: LD_VAR 0 10
32301: PPUSH
32302: CALL_OW 250
32306: ST_TO_ADDR
// y := GetY ( enemy ) ;
32307: LD_ADDR_VAR 0 5
32311: PUSH
32312: LD_VAR 0 10
32316: PPUSH
32317: CALL_OW 251
32321: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32322: LD_ADDR_VAR 0 6
32326: PUSH
32327: LD_VAR 0 4
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PPUSH
32336: LD_INT 1
32338: PPUSH
32339: CALL_OW 12
32343: PLUS
32344: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32345: LD_ADDR_VAR 0 7
32349: PUSH
32350: LD_VAR 0 5
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PPUSH
32359: LD_INT 1
32361: PPUSH
32362: CALL_OW 12
32366: PLUS
32367: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32368: LD_VAR 0 6
32372: PPUSH
32373: LD_VAR 0 7
32377: PPUSH
32378: CALL_OW 488
32382: NOT
32383: IFFALSE 32405
// begin _x := x ;
32385: LD_ADDR_VAR 0 6
32389: PUSH
32390: LD_VAR 0 4
32394: ST_TO_ADDR
// _y := y ;
32395: LD_ADDR_VAR 0 7
32399: PUSH
32400: LD_VAR 0 5
32404: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32405: LD_ADDR_VAR 0 3
32409: PUSH
32410: LD_INT 1
32412: PPUSH
32413: LD_VAR 0 14
32417: PPUSH
32418: CALL_OW 12
32422: ST_TO_ADDR
// case i of 1 :
32423: LD_VAR 0 3
32427: PUSH
32428: LD_INT 1
32430: DOUBLE
32431: EQUAL
32432: IFTRUE 32436
32434: GO 32453
32436: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32437: LD_VAR 0 1
32441: PPUSH
32442: LD_VAR 0 10
32446: PPUSH
32447: CALL_OW 115
32451: GO 32514
32453: LD_INT 2
32455: DOUBLE
32456: EQUAL
32457: IFTRUE 32461
32459: GO 32483
32461: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32462: LD_VAR 0 1
32466: PPUSH
32467: LD_VAR 0 6
32471: PPUSH
32472: LD_VAR 0 7
32476: PPUSH
32477: CALL_OW 153
32481: GO 32514
32483: LD_INT 3
32485: DOUBLE
32486: EQUAL
32487: IFTRUE 32491
32489: GO 32513
32491: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32492: LD_VAR 0 1
32496: PPUSH
32497: LD_VAR 0 6
32501: PPUSH
32502: LD_VAR 0 7
32506: PPUSH
32507: CALL_OW 154
32511: GO 32514
32513: POP
// end ;
32514: LD_VAR 0 2
32518: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32519: LD_INT 0
32521: PPUSH
32522: PPUSH
32523: PPUSH
32524: PPUSH
32525: PPUSH
32526: PPUSH
// if not unit or not building then
32527: LD_VAR 0 1
32531: NOT
32532: PUSH
32533: LD_VAR 0 2
32537: NOT
32538: OR
32539: IFFALSE 32543
// exit ;
32541: GO 32701
// x := GetX ( building ) ;
32543: LD_ADDR_VAR 0 5
32547: PUSH
32548: LD_VAR 0 2
32552: PPUSH
32553: CALL_OW 250
32557: ST_TO_ADDR
// y := GetY ( building ) ;
32558: LD_ADDR_VAR 0 6
32562: PUSH
32563: LD_VAR 0 2
32567: PPUSH
32568: CALL_OW 251
32572: ST_TO_ADDR
// for i = 0 to 5 do
32573: LD_ADDR_VAR 0 4
32577: PUSH
32578: DOUBLE
32579: LD_INT 0
32581: DEC
32582: ST_TO_ADDR
32583: LD_INT 5
32585: PUSH
32586: FOR_TO
32587: IFFALSE 32699
// begin _x := ShiftX ( x , i , 3 ) ;
32589: LD_ADDR_VAR 0 7
32593: PUSH
32594: LD_VAR 0 5
32598: PPUSH
32599: LD_VAR 0 4
32603: PPUSH
32604: LD_INT 3
32606: PPUSH
32607: CALL_OW 272
32611: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32612: LD_ADDR_VAR 0 8
32616: PUSH
32617: LD_VAR 0 6
32621: PPUSH
32622: LD_VAR 0 4
32626: PPUSH
32627: LD_INT 3
32629: PPUSH
32630: CALL_OW 273
32634: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32635: LD_VAR 0 7
32639: PPUSH
32640: LD_VAR 0 8
32644: PPUSH
32645: CALL_OW 488
32649: NOT
32650: IFFALSE 32654
// continue ;
32652: GO 32586
// if HexInfo ( _x , _y ) = 0 then
32654: LD_VAR 0 7
32658: PPUSH
32659: LD_VAR 0 8
32663: PPUSH
32664: CALL_OW 428
32668: PUSH
32669: LD_INT 0
32671: EQUAL
32672: IFFALSE 32697
// begin ComMoveXY ( unit , _x , _y ) ;
32674: LD_VAR 0 1
32678: PPUSH
32679: LD_VAR 0 7
32683: PPUSH
32684: LD_VAR 0 8
32688: PPUSH
32689: CALL_OW 111
// exit ;
32693: POP
32694: POP
32695: GO 32701
// end ; end ;
32697: GO 32586
32699: POP
32700: POP
// end ;
32701: LD_VAR 0 3
32705: RET
// export function ScanBase ( side , base_area ) ; begin
32706: LD_INT 0
32708: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32709: LD_ADDR_VAR 0 3
32713: PUSH
32714: LD_VAR 0 2
32718: PPUSH
32719: LD_INT 81
32721: PUSH
32722: LD_VAR 0 1
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PPUSH
32731: CALL_OW 70
32735: ST_TO_ADDR
// end ;
32736: LD_VAR 0 3
32740: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32741: LD_INT 0
32743: PPUSH
32744: PPUSH
32745: PPUSH
32746: PPUSH
// result := false ;
32747: LD_ADDR_VAR 0 2
32751: PUSH
32752: LD_INT 0
32754: ST_TO_ADDR
// side := GetSide ( unit ) ;
32755: LD_ADDR_VAR 0 3
32759: PUSH
32760: LD_VAR 0 1
32764: PPUSH
32765: CALL_OW 255
32769: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32770: LD_ADDR_VAR 0 4
32774: PUSH
32775: LD_VAR 0 1
32779: PPUSH
32780: CALL_OW 248
32784: ST_TO_ADDR
// case nat of 1 :
32785: LD_VAR 0 4
32789: PUSH
32790: LD_INT 1
32792: DOUBLE
32793: EQUAL
32794: IFTRUE 32798
32796: GO 32809
32798: POP
// tech := tech_lassight ; 2 :
32799: LD_ADDR_VAR 0 5
32803: PUSH
32804: LD_INT 12
32806: ST_TO_ADDR
32807: GO 32848
32809: LD_INT 2
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 32828
32817: POP
// tech := tech_mortar ; 3 :
32818: LD_ADDR_VAR 0 5
32822: PUSH
32823: LD_INT 41
32825: ST_TO_ADDR
32826: GO 32848
32828: LD_INT 3
32830: DOUBLE
32831: EQUAL
32832: IFTRUE 32836
32834: GO 32847
32836: POP
// tech := tech_bazooka ; end ;
32837: LD_ADDR_VAR 0 5
32841: PUSH
32842: LD_INT 44
32844: ST_TO_ADDR
32845: GO 32848
32847: POP
// if Researched ( side , tech ) then
32848: LD_VAR 0 3
32852: PPUSH
32853: LD_VAR 0 5
32857: PPUSH
32858: CALL_OW 325
32862: IFFALSE 32889
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32864: LD_ADDR_VAR 0 2
32868: PUSH
32869: LD_INT 5
32871: PUSH
32872: LD_INT 8
32874: PUSH
32875: LD_INT 9
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: LIST
32882: PUSH
32883: LD_VAR 0 4
32887: ARRAY
32888: ST_TO_ADDR
// end ;
32889: LD_VAR 0 2
32893: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32894: LD_INT 0
32896: PPUSH
32897: PPUSH
32898: PPUSH
// if not mines then
32899: LD_VAR 0 2
32903: NOT
32904: IFFALSE 32908
// exit ;
32906: GO 33052
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32908: LD_ADDR_VAR 0 5
32912: PUSH
32913: LD_INT 81
32915: PUSH
32916: LD_VAR 0 1
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 3
32927: PUSH
32928: LD_INT 21
32930: PUSH
32931: LD_INT 3
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PPUSH
32946: CALL_OW 69
32950: ST_TO_ADDR
// for i in mines do
32951: LD_ADDR_VAR 0 4
32955: PUSH
32956: LD_VAR 0 2
32960: PUSH
32961: FOR_IN
32962: IFFALSE 33050
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32964: LD_VAR 0 4
32968: PUSH
32969: LD_INT 1
32971: ARRAY
32972: PPUSH
32973: LD_VAR 0 4
32977: PUSH
32978: LD_INT 2
32980: ARRAY
32981: PPUSH
32982: CALL_OW 458
32986: NOT
32987: IFFALSE 32991
// continue ;
32989: GO 32961
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32991: LD_VAR 0 4
32995: PUSH
32996: LD_INT 1
32998: ARRAY
32999: PPUSH
33000: LD_VAR 0 4
33004: PUSH
33005: LD_INT 2
33007: ARRAY
33008: PPUSH
33009: CALL_OW 428
33013: PUSH
33014: LD_VAR 0 5
33018: IN
33019: IFFALSE 33048
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33021: LD_VAR 0 4
33025: PUSH
33026: LD_INT 1
33028: ARRAY
33029: PPUSH
33030: LD_VAR 0 4
33034: PUSH
33035: LD_INT 2
33037: ARRAY
33038: PPUSH
33039: LD_VAR 0 1
33043: PPUSH
33044: CALL_OW 456
// end ;
33048: GO 32961
33050: POP
33051: POP
// end ;
33052: LD_VAR 0 3
33056: RET
// export function Count ( array ) ; var i ; begin
33057: LD_INT 0
33059: PPUSH
33060: PPUSH
// result := 0 ;
33061: LD_ADDR_VAR 0 2
33065: PUSH
33066: LD_INT 0
33068: ST_TO_ADDR
// for i in array do
33069: LD_ADDR_VAR 0 3
33073: PUSH
33074: LD_VAR 0 1
33078: PUSH
33079: FOR_IN
33080: IFFALSE 33104
// if i then
33082: LD_VAR 0 3
33086: IFFALSE 33102
// result := result + 1 ;
33088: LD_ADDR_VAR 0 2
33092: PUSH
33093: LD_VAR 0 2
33097: PUSH
33098: LD_INT 1
33100: PLUS
33101: ST_TO_ADDR
33102: GO 33079
33104: POP
33105: POP
// end ;
33106: LD_VAR 0 2
33110: RET
// export function IsEmpty ( building ) ; begin
33111: LD_INT 0
33113: PPUSH
// if not building then
33114: LD_VAR 0 1
33118: NOT
33119: IFFALSE 33123
// exit ;
33121: GO 33166
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33123: LD_ADDR_VAR 0 2
33127: PUSH
33128: LD_VAR 0 1
33132: PUSH
33133: LD_INT 22
33135: PUSH
33136: LD_VAR 0 1
33140: PPUSH
33141: CALL_OW 255
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 58
33152: PUSH
33153: EMPTY
33154: LIST
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PPUSH
33160: CALL_OW 69
33164: IN
33165: ST_TO_ADDR
// end ;
33166: LD_VAR 0 2
33170: RET
// export function IsNotFull ( building ) ; var places ; begin
33171: LD_INT 0
33173: PPUSH
33174: PPUSH
// if not building then
33175: LD_VAR 0 1
33179: NOT
33180: IFFALSE 33184
// exit ;
33182: GO 33355
// result := false ;
33184: LD_ADDR_VAR 0 2
33188: PUSH
33189: LD_INT 0
33191: ST_TO_ADDR
// places := 0 ;
33192: LD_ADDR_VAR 0 3
33196: PUSH
33197: LD_INT 0
33199: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33200: LD_VAR 0 1
33204: PPUSH
33205: CALL_OW 266
33209: PUSH
33210: LD_INT 0
33212: DOUBLE
33213: EQUAL
33214: IFTRUE 33272
33216: LD_INT 1
33218: DOUBLE
33219: EQUAL
33220: IFTRUE 33272
33222: LD_INT 6
33224: DOUBLE
33225: EQUAL
33226: IFTRUE 33272
33228: LD_INT 7
33230: DOUBLE
33231: EQUAL
33232: IFTRUE 33272
33234: LD_INT 8
33236: DOUBLE
33237: EQUAL
33238: IFTRUE 33272
33240: LD_INT 4
33242: DOUBLE
33243: EQUAL
33244: IFTRUE 33272
33246: LD_INT 5
33248: DOUBLE
33249: EQUAL
33250: IFTRUE 33272
33252: LD_INT 2
33254: DOUBLE
33255: EQUAL
33256: IFTRUE 33272
33258: LD_INT 3
33260: DOUBLE
33261: EQUAL
33262: IFTRUE 33272
33264: LD_INT 35
33266: DOUBLE
33267: EQUAL
33268: IFTRUE 33272
33270: GO 33283
33272: POP
// places := 6 ; b_bunker , b_breastwork :
33273: LD_ADDR_VAR 0 3
33277: PUSH
33278: LD_INT 6
33280: ST_TO_ADDR
33281: GO 33328
33283: LD_INT 32
33285: DOUBLE
33286: EQUAL
33287: IFTRUE 33297
33289: LD_INT 31
33291: DOUBLE
33292: EQUAL
33293: IFTRUE 33297
33295: GO 33308
33297: POP
// places := 1 ; b_control_tower :
33298: LD_ADDR_VAR 0 3
33302: PUSH
33303: LD_INT 1
33305: ST_TO_ADDR
33306: GO 33328
33308: LD_INT 36
33310: DOUBLE
33311: EQUAL
33312: IFTRUE 33316
33314: GO 33327
33316: POP
// places := 3 ; end ;
33317: LD_ADDR_VAR 0 3
33321: PUSH
33322: LD_INT 3
33324: ST_TO_ADDR
33325: GO 33328
33327: POP
// if places then
33328: LD_VAR 0 3
33332: IFFALSE 33355
// result := UnitsInside ( building ) < places ;
33334: LD_ADDR_VAR 0 2
33338: PUSH
33339: LD_VAR 0 1
33343: PPUSH
33344: CALL_OW 313
33348: PUSH
33349: LD_VAR 0 3
33353: LESS
33354: ST_TO_ADDR
// end ;
33355: LD_VAR 0 2
33359: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33360: LD_INT 0
33362: PPUSH
33363: PPUSH
33364: PPUSH
33365: PPUSH
// tmp := [ ] ;
33366: LD_ADDR_VAR 0 3
33370: PUSH
33371: EMPTY
33372: ST_TO_ADDR
// list := [ ] ;
33373: LD_ADDR_VAR 0 5
33377: PUSH
33378: EMPTY
33379: ST_TO_ADDR
// for i = 16 to 25 do
33380: LD_ADDR_VAR 0 4
33384: PUSH
33385: DOUBLE
33386: LD_INT 16
33388: DEC
33389: ST_TO_ADDR
33390: LD_INT 25
33392: PUSH
33393: FOR_TO
33394: IFFALSE 33467
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33396: LD_ADDR_VAR 0 3
33400: PUSH
33401: LD_VAR 0 3
33405: PUSH
33406: LD_INT 22
33408: PUSH
33409: LD_VAR 0 1
33413: PPUSH
33414: CALL_OW 255
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 91
33425: PUSH
33426: LD_VAR 0 1
33430: PUSH
33431: LD_INT 6
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 30
33441: PUSH
33442: LD_VAR 0 4
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: LIST
33455: PUSH
33456: EMPTY
33457: LIST
33458: PPUSH
33459: CALL_OW 69
33463: ADD
33464: ST_TO_ADDR
33465: GO 33393
33467: POP
33468: POP
// for i = 1 to tmp do
33469: LD_ADDR_VAR 0 4
33473: PUSH
33474: DOUBLE
33475: LD_INT 1
33477: DEC
33478: ST_TO_ADDR
33479: LD_VAR 0 3
33483: PUSH
33484: FOR_TO
33485: IFFALSE 33573
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33487: LD_ADDR_VAR 0 5
33491: PUSH
33492: LD_VAR 0 5
33496: PUSH
33497: LD_VAR 0 3
33501: PUSH
33502: LD_VAR 0 4
33506: ARRAY
33507: PPUSH
33508: CALL_OW 266
33512: PUSH
33513: LD_VAR 0 3
33517: PUSH
33518: LD_VAR 0 4
33522: ARRAY
33523: PPUSH
33524: CALL_OW 250
33528: PUSH
33529: LD_VAR 0 3
33533: PUSH
33534: LD_VAR 0 4
33538: ARRAY
33539: PPUSH
33540: CALL_OW 251
33544: PUSH
33545: LD_VAR 0 3
33549: PUSH
33550: LD_VAR 0 4
33554: ARRAY
33555: PPUSH
33556: CALL_OW 254
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: PUSH
33567: EMPTY
33568: LIST
33569: ADD
33570: ST_TO_ADDR
33571: GO 33484
33573: POP
33574: POP
// result := list ;
33575: LD_ADDR_VAR 0 2
33579: PUSH
33580: LD_VAR 0 5
33584: ST_TO_ADDR
// end ;
33585: LD_VAR 0 2
33589: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33590: LD_INT 0
33592: PPUSH
33593: PPUSH
33594: PPUSH
33595: PPUSH
33596: PPUSH
33597: PPUSH
33598: PPUSH
// if not factory then
33599: LD_VAR 0 1
33603: NOT
33604: IFFALSE 33608
// exit ;
33606: GO 34201
// if control = control_apeman then
33608: LD_VAR 0 4
33612: PUSH
33613: LD_INT 5
33615: EQUAL
33616: IFFALSE 33725
// begin tmp := UnitsInside ( factory ) ;
33618: LD_ADDR_VAR 0 8
33622: PUSH
33623: LD_VAR 0 1
33627: PPUSH
33628: CALL_OW 313
33632: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33633: LD_VAR 0 8
33637: PPUSH
33638: LD_INT 25
33640: PUSH
33641: LD_INT 12
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PPUSH
33648: CALL_OW 72
33652: NOT
33653: IFFALSE 33663
// control := control_manual ;
33655: LD_ADDR_VAR 0 4
33659: PUSH
33660: LD_INT 1
33662: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33663: LD_ADDR_VAR 0 8
33667: PUSH
33668: LD_VAR 0 1
33672: PPUSH
33673: CALL 33360 0 1
33677: ST_TO_ADDR
// if tmp then
33678: LD_VAR 0 8
33682: IFFALSE 33725
// begin for i in tmp do
33684: LD_ADDR_VAR 0 7
33688: PUSH
33689: LD_VAR 0 8
33693: PUSH
33694: FOR_IN
33695: IFFALSE 33723
// if i [ 1 ] = b_ext_radio then
33697: LD_VAR 0 7
33701: PUSH
33702: LD_INT 1
33704: ARRAY
33705: PUSH
33706: LD_INT 22
33708: EQUAL
33709: IFFALSE 33721
// begin control := control_remote ;
33711: LD_ADDR_VAR 0 4
33715: PUSH
33716: LD_INT 2
33718: ST_TO_ADDR
// break ;
33719: GO 33723
// end ;
33721: GO 33694
33723: POP
33724: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33725: LD_VAR 0 1
33729: PPUSH
33730: LD_VAR 0 2
33734: PPUSH
33735: LD_VAR 0 3
33739: PPUSH
33740: LD_VAR 0 4
33744: PPUSH
33745: LD_VAR 0 5
33749: PPUSH
33750: CALL_OW 448
33754: IFFALSE 33789
// begin result := [ chassis , engine , control , weapon ] ;
33756: LD_ADDR_VAR 0 6
33760: PUSH
33761: LD_VAR 0 2
33765: PUSH
33766: LD_VAR 0 3
33770: PUSH
33771: LD_VAR 0 4
33775: PUSH
33776: LD_VAR 0 5
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: ST_TO_ADDR
// exit ;
33787: GO 34201
// end ; _chassis := AvailableChassisList ( factory ) ;
33789: LD_ADDR_VAR 0 9
33793: PUSH
33794: LD_VAR 0 1
33798: PPUSH
33799: CALL_OW 475
33803: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33804: LD_ADDR_VAR 0 11
33808: PUSH
33809: LD_VAR 0 1
33813: PPUSH
33814: CALL_OW 476
33818: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33819: LD_ADDR_VAR 0 12
33823: PUSH
33824: LD_VAR 0 1
33828: PPUSH
33829: CALL_OW 477
33833: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33834: LD_ADDR_VAR 0 10
33838: PUSH
33839: LD_VAR 0 1
33843: PPUSH
33844: CALL_OW 478
33848: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33849: LD_VAR 0 9
33853: NOT
33854: PUSH
33855: LD_VAR 0 11
33859: NOT
33860: OR
33861: PUSH
33862: LD_VAR 0 12
33866: NOT
33867: OR
33868: PUSH
33869: LD_VAR 0 10
33873: NOT
33874: OR
33875: IFFALSE 33910
// begin result := [ chassis , engine , control , weapon ] ;
33877: LD_ADDR_VAR 0 6
33881: PUSH
33882: LD_VAR 0 2
33886: PUSH
33887: LD_VAR 0 3
33891: PUSH
33892: LD_VAR 0 4
33896: PUSH
33897: LD_VAR 0 5
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: ST_TO_ADDR
// exit ;
33908: GO 34201
// end ; if not chassis in _chassis then
33910: LD_VAR 0 2
33914: PUSH
33915: LD_VAR 0 9
33919: IN
33920: NOT
33921: IFFALSE 33947
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33923: LD_ADDR_VAR 0 2
33927: PUSH
33928: LD_VAR 0 9
33932: PUSH
33933: LD_INT 1
33935: PPUSH
33936: LD_VAR 0 9
33940: PPUSH
33941: CALL_OW 12
33945: ARRAY
33946: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33947: LD_VAR 0 2
33951: PPUSH
33952: LD_VAR 0 3
33956: PPUSH
33957: CALL 34206 0 2
33961: NOT
33962: IFFALSE 34021
// repeat engine := _engine [ 1 ] ;
33964: LD_ADDR_VAR 0 3
33968: PUSH
33969: LD_VAR 0 11
33973: PUSH
33974: LD_INT 1
33976: ARRAY
33977: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33978: LD_ADDR_VAR 0 11
33982: PUSH
33983: LD_VAR 0 11
33987: PPUSH
33988: LD_INT 1
33990: PPUSH
33991: CALL_OW 3
33995: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33996: LD_VAR 0 2
34000: PPUSH
34001: LD_VAR 0 3
34005: PPUSH
34006: CALL 34206 0 2
34010: PUSH
34011: LD_VAR 0 11
34015: PUSH
34016: EMPTY
34017: EQUAL
34018: OR
34019: IFFALSE 33964
// if not control in _control then
34021: LD_VAR 0 4
34025: PUSH
34026: LD_VAR 0 12
34030: IN
34031: NOT
34032: IFFALSE 34058
// control := _control [ rand ( 1 , _control ) ] ;
34034: LD_ADDR_VAR 0 4
34038: PUSH
34039: LD_VAR 0 12
34043: PUSH
34044: LD_INT 1
34046: PPUSH
34047: LD_VAR 0 12
34051: PPUSH
34052: CALL_OW 12
34056: ARRAY
34057: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34058: LD_VAR 0 2
34062: PPUSH
34063: LD_VAR 0 5
34067: PPUSH
34068: CALL 34426 0 2
34072: NOT
34073: IFFALSE 34132
// repeat weapon := _weapon [ 1 ] ;
34075: LD_ADDR_VAR 0 5
34079: PUSH
34080: LD_VAR 0 10
34084: PUSH
34085: LD_INT 1
34087: ARRAY
34088: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34089: LD_ADDR_VAR 0 10
34093: PUSH
34094: LD_VAR 0 10
34098: PPUSH
34099: LD_INT 1
34101: PPUSH
34102: CALL_OW 3
34106: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34107: LD_VAR 0 2
34111: PPUSH
34112: LD_VAR 0 5
34116: PPUSH
34117: CALL 34426 0 2
34121: PUSH
34122: LD_VAR 0 10
34126: PUSH
34127: EMPTY
34128: EQUAL
34129: OR
34130: IFFALSE 34075
// result := [ ] ;
34132: LD_ADDR_VAR 0 6
34136: PUSH
34137: EMPTY
34138: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34139: LD_VAR 0 1
34143: PPUSH
34144: LD_VAR 0 2
34148: PPUSH
34149: LD_VAR 0 3
34153: PPUSH
34154: LD_VAR 0 4
34158: PPUSH
34159: LD_VAR 0 5
34163: PPUSH
34164: CALL_OW 448
34168: IFFALSE 34201
// result := [ chassis , engine , control , weapon ] ;
34170: LD_ADDR_VAR 0 6
34174: PUSH
34175: LD_VAR 0 2
34179: PUSH
34180: LD_VAR 0 3
34184: PUSH
34185: LD_VAR 0 4
34189: PUSH
34190: LD_VAR 0 5
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: ST_TO_ADDR
// end ;
34201: LD_VAR 0 6
34205: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34206: LD_INT 0
34208: PPUSH
// if not chassis or not engine then
34209: LD_VAR 0 1
34213: NOT
34214: PUSH
34215: LD_VAR 0 2
34219: NOT
34220: OR
34221: IFFALSE 34225
// exit ;
34223: GO 34421
// case engine of engine_solar :
34225: LD_VAR 0 2
34229: PUSH
34230: LD_INT 2
34232: DOUBLE
34233: EQUAL
34234: IFTRUE 34238
34236: GO 34276
34238: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34239: LD_ADDR_VAR 0 3
34243: PUSH
34244: LD_INT 11
34246: PUSH
34247: LD_INT 12
34249: PUSH
34250: LD_INT 13
34252: PUSH
34253: LD_INT 14
34255: PUSH
34256: LD_INT 1
34258: PUSH
34259: LD_INT 2
34261: PUSH
34262: LD_INT 3
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: ST_TO_ADDR
34274: GO 34405
34276: LD_INT 1
34278: DOUBLE
34279: EQUAL
34280: IFTRUE 34284
34282: GO 34346
34284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34285: LD_ADDR_VAR 0 3
34289: PUSH
34290: LD_INT 11
34292: PUSH
34293: LD_INT 12
34295: PUSH
34296: LD_INT 13
34298: PUSH
34299: LD_INT 14
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: LD_INT 2
34307: PUSH
34308: LD_INT 3
34310: PUSH
34311: LD_INT 4
34313: PUSH
34314: LD_INT 5
34316: PUSH
34317: LD_INT 21
34319: PUSH
34320: LD_INT 23
34322: PUSH
34323: LD_INT 22
34325: PUSH
34326: LD_INT 24
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: ST_TO_ADDR
34344: GO 34405
34346: LD_INT 3
34348: DOUBLE
34349: EQUAL
34350: IFTRUE 34354
34352: GO 34404
34354: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34355: LD_ADDR_VAR 0 3
34359: PUSH
34360: LD_INT 13
34362: PUSH
34363: LD_INT 14
34365: PUSH
34366: LD_INT 2
34368: PUSH
34369: LD_INT 3
34371: PUSH
34372: LD_INT 4
34374: PUSH
34375: LD_INT 5
34377: PUSH
34378: LD_INT 21
34380: PUSH
34381: LD_INT 22
34383: PUSH
34384: LD_INT 23
34386: PUSH
34387: LD_INT 24
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: ST_TO_ADDR
34402: GO 34405
34404: POP
// result := ( chassis in result ) ;
34405: LD_ADDR_VAR 0 3
34409: PUSH
34410: LD_VAR 0 1
34414: PUSH
34415: LD_VAR 0 3
34419: IN
34420: ST_TO_ADDR
// end ;
34421: LD_VAR 0 3
34425: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34426: LD_INT 0
34428: PPUSH
// if not chassis or not weapon then
34429: LD_VAR 0 1
34433: NOT
34434: PUSH
34435: LD_VAR 0 2
34439: NOT
34440: OR
34441: IFFALSE 34445
// exit ;
34443: GO 35507
// case weapon of us_machine_gun :
34445: LD_VAR 0 2
34449: PUSH
34450: LD_INT 2
34452: DOUBLE
34453: EQUAL
34454: IFTRUE 34458
34456: GO 34488
34458: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34459: LD_ADDR_VAR 0 3
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: LD_INT 2
34469: PUSH
34470: LD_INT 3
34472: PUSH
34473: LD_INT 4
34475: PUSH
34476: LD_INT 5
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: ST_TO_ADDR
34486: GO 35491
34488: LD_INT 3
34490: DOUBLE
34491: EQUAL
34492: IFTRUE 34496
34494: GO 34526
34496: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34497: LD_ADDR_VAR 0 3
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: LD_INT 2
34507: PUSH
34508: LD_INT 3
34510: PUSH
34511: LD_INT 4
34513: PUSH
34514: LD_INT 5
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: ST_TO_ADDR
34524: GO 35491
34526: LD_INT 11
34528: DOUBLE
34529: EQUAL
34530: IFTRUE 34534
34532: GO 34564
34534: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34535: LD_ADDR_VAR 0 3
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: LD_INT 2
34545: PUSH
34546: LD_INT 3
34548: PUSH
34549: LD_INT 4
34551: PUSH
34552: LD_INT 5
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: ST_TO_ADDR
34562: GO 35491
34564: LD_INT 4
34566: DOUBLE
34567: EQUAL
34568: IFTRUE 34572
34570: GO 34598
34572: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34573: LD_ADDR_VAR 0 3
34577: PUSH
34578: LD_INT 2
34580: PUSH
34581: LD_INT 3
34583: PUSH
34584: LD_INT 4
34586: PUSH
34587: LD_INT 5
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: ST_TO_ADDR
34596: GO 35491
34598: LD_INT 5
34600: DOUBLE
34601: EQUAL
34602: IFTRUE 34606
34604: GO 34632
34606: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34607: LD_ADDR_VAR 0 3
34611: PUSH
34612: LD_INT 2
34614: PUSH
34615: LD_INT 3
34617: PUSH
34618: LD_INT 4
34620: PUSH
34621: LD_INT 5
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: ST_TO_ADDR
34630: GO 35491
34632: LD_INT 9
34634: DOUBLE
34635: EQUAL
34636: IFTRUE 34640
34638: GO 34666
34640: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34641: LD_ADDR_VAR 0 3
34645: PUSH
34646: LD_INT 2
34648: PUSH
34649: LD_INT 3
34651: PUSH
34652: LD_INT 4
34654: PUSH
34655: LD_INT 5
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: ST_TO_ADDR
34664: GO 35491
34666: LD_INT 7
34668: DOUBLE
34669: EQUAL
34670: IFTRUE 34674
34672: GO 34700
34674: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34675: LD_ADDR_VAR 0 3
34679: PUSH
34680: LD_INT 2
34682: PUSH
34683: LD_INT 3
34685: PUSH
34686: LD_INT 4
34688: PUSH
34689: LD_INT 5
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: ST_TO_ADDR
34698: GO 35491
34700: LD_INT 12
34702: DOUBLE
34703: EQUAL
34704: IFTRUE 34708
34706: GO 34734
34708: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34709: LD_ADDR_VAR 0 3
34713: PUSH
34714: LD_INT 2
34716: PUSH
34717: LD_INT 3
34719: PUSH
34720: LD_INT 4
34722: PUSH
34723: LD_INT 5
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: ST_TO_ADDR
34732: GO 35491
34734: LD_INT 13
34736: DOUBLE
34737: EQUAL
34738: IFTRUE 34742
34740: GO 34768
34742: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34743: LD_ADDR_VAR 0 3
34747: PUSH
34748: LD_INT 2
34750: PUSH
34751: LD_INT 3
34753: PUSH
34754: LD_INT 4
34756: PUSH
34757: LD_INT 5
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: ST_TO_ADDR
34766: GO 35491
34768: LD_INT 14
34770: DOUBLE
34771: EQUAL
34772: IFTRUE 34776
34774: GO 34794
34776: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34777: LD_ADDR_VAR 0 3
34781: PUSH
34782: LD_INT 4
34784: PUSH
34785: LD_INT 5
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: ST_TO_ADDR
34792: GO 35491
34794: LD_INT 6
34796: DOUBLE
34797: EQUAL
34798: IFTRUE 34802
34800: GO 34820
34802: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34803: LD_ADDR_VAR 0 3
34807: PUSH
34808: LD_INT 4
34810: PUSH
34811: LD_INT 5
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: ST_TO_ADDR
34818: GO 35491
34820: LD_INT 10
34822: DOUBLE
34823: EQUAL
34824: IFTRUE 34828
34826: GO 34846
34828: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34829: LD_ADDR_VAR 0 3
34833: PUSH
34834: LD_INT 4
34836: PUSH
34837: LD_INT 5
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: ST_TO_ADDR
34844: GO 35491
34846: LD_INT 22
34848: DOUBLE
34849: EQUAL
34850: IFTRUE 34854
34852: GO 34880
34854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34855: LD_ADDR_VAR 0 3
34859: PUSH
34860: LD_INT 11
34862: PUSH
34863: LD_INT 12
34865: PUSH
34866: LD_INT 13
34868: PUSH
34869: LD_INT 14
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: ST_TO_ADDR
34878: GO 35491
34880: LD_INT 23
34882: DOUBLE
34883: EQUAL
34884: IFTRUE 34888
34886: GO 34914
34888: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34889: LD_ADDR_VAR 0 3
34893: PUSH
34894: LD_INT 11
34896: PUSH
34897: LD_INT 12
34899: PUSH
34900: LD_INT 13
34902: PUSH
34903: LD_INT 14
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: ST_TO_ADDR
34912: GO 35491
34914: LD_INT 24
34916: DOUBLE
34917: EQUAL
34918: IFTRUE 34922
34920: GO 34948
34922: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34923: LD_ADDR_VAR 0 3
34927: PUSH
34928: LD_INT 11
34930: PUSH
34931: LD_INT 12
34933: PUSH
34934: LD_INT 13
34936: PUSH
34937: LD_INT 14
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: ST_TO_ADDR
34946: GO 35491
34948: LD_INT 30
34950: DOUBLE
34951: EQUAL
34952: IFTRUE 34956
34954: GO 34982
34956: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34957: LD_ADDR_VAR 0 3
34961: PUSH
34962: LD_INT 11
34964: PUSH
34965: LD_INT 12
34967: PUSH
34968: LD_INT 13
34970: PUSH
34971: LD_INT 14
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: ST_TO_ADDR
34980: GO 35491
34982: LD_INT 25
34984: DOUBLE
34985: EQUAL
34986: IFTRUE 34990
34988: GO 35008
34990: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34991: LD_ADDR_VAR 0 3
34995: PUSH
34996: LD_INT 13
34998: PUSH
34999: LD_INT 14
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: ST_TO_ADDR
35006: GO 35491
35008: LD_INT 27
35010: DOUBLE
35011: EQUAL
35012: IFTRUE 35016
35014: GO 35034
35016: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35017: LD_ADDR_VAR 0 3
35021: PUSH
35022: LD_INT 13
35024: PUSH
35025: LD_INT 14
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: ST_TO_ADDR
35032: GO 35491
35034: LD_EXP 25
35038: DOUBLE
35039: EQUAL
35040: IFTRUE 35044
35042: GO 35070
35044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35045: LD_ADDR_VAR 0 3
35049: PUSH
35050: LD_INT 11
35052: PUSH
35053: LD_INT 12
35055: PUSH
35056: LD_INT 13
35058: PUSH
35059: LD_INT 14
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: ST_TO_ADDR
35068: GO 35491
35070: LD_INT 28
35072: DOUBLE
35073: EQUAL
35074: IFTRUE 35078
35076: GO 35096
35078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35079: LD_ADDR_VAR 0 3
35083: PUSH
35084: LD_INT 13
35086: PUSH
35087: LD_INT 14
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: ST_TO_ADDR
35094: GO 35491
35096: LD_INT 29
35098: DOUBLE
35099: EQUAL
35100: IFTRUE 35104
35102: GO 35122
35104: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35105: LD_ADDR_VAR 0 3
35109: PUSH
35110: LD_INT 13
35112: PUSH
35113: LD_INT 14
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: ST_TO_ADDR
35120: GO 35491
35122: LD_INT 31
35124: DOUBLE
35125: EQUAL
35126: IFTRUE 35130
35128: GO 35148
35130: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35131: LD_ADDR_VAR 0 3
35135: PUSH
35136: LD_INT 13
35138: PUSH
35139: LD_INT 14
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: ST_TO_ADDR
35146: GO 35491
35148: LD_INT 26
35150: DOUBLE
35151: EQUAL
35152: IFTRUE 35156
35154: GO 35174
35156: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35157: LD_ADDR_VAR 0 3
35161: PUSH
35162: LD_INT 13
35164: PUSH
35165: LD_INT 14
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: ST_TO_ADDR
35172: GO 35491
35174: LD_INT 42
35176: DOUBLE
35177: EQUAL
35178: IFTRUE 35182
35180: GO 35208
35182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35183: LD_ADDR_VAR 0 3
35187: PUSH
35188: LD_INT 21
35190: PUSH
35191: LD_INT 22
35193: PUSH
35194: LD_INT 23
35196: PUSH
35197: LD_INT 24
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: ST_TO_ADDR
35206: GO 35491
35208: LD_INT 43
35210: DOUBLE
35211: EQUAL
35212: IFTRUE 35216
35214: GO 35242
35216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35217: LD_ADDR_VAR 0 3
35221: PUSH
35222: LD_INT 21
35224: PUSH
35225: LD_INT 22
35227: PUSH
35228: LD_INT 23
35230: PUSH
35231: LD_INT 24
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: ST_TO_ADDR
35240: GO 35491
35242: LD_INT 44
35244: DOUBLE
35245: EQUAL
35246: IFTRUE 35250
35248: GO 35276
35250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35251: LD_ADDR_VAR 0 3
35255: PUSH
35256: LD_INT 21
35258: PUSH
35259: LD_INT 22
35261: PUSH
35262: LD_INT 23
35264: PUSH
35265: LD_INT 24
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: ST_TO_ADDR
35274: GO 35491
35276: LD_INT 45
35278: DOUBLE
35279: EQUAL
35280: IFTRUE 35284
35282: GO 35310
35284: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35285: LD_ADDR_VAR 0 3
35289: PUSH
35290: LD_INT 21
35292: PUSH
35293: LD_INT 22
35295: PUSH
35296: LD_INT 23
35298: PUSH
35299: LD_INT 24
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: ST_TO_ADDR
35308: GO 35491
35310: LD_INT 49
35312: DOUBLE
35313: EQUAL
35314: IFTRUE 35318
35316: GO 35344
35318: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35319: LD_ADDR_VAR 0 3
35323: PUSH
35324: LD_INT 21
35326: PUSH
35327: LD_INT 22
35329: PUSH
35330: LD_INT 23
35332: PUSH
35333: LD_INT 24
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: ST_TO_ADDR
35342: GO 35491
35344: LD_INT 51
35346: DOUBLE
35347: EQUAL
35348: IFTRUE 35352
35350: GO 35378
35352: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35353: LD_ADDR_VAR 0 3
35357: PUSH
35358: LD_INT 21
35360: PUSH
35361: LD_INT 22
35363: PUSH
35364: LD_INT 23
35366: PUSH
35367: LD_INT 24
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: ST_TO_ADDR
35376: GO 35491
35378: LD_INT 52
35380: DOUBLE
35381: EQUAL
35382: IFTRUE 35386
35384: GO 35412
35386: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35387: LD_ADDR_VAR 0 3
35391: PUSH
35392: LD_INT 21
35394: PUSH
35395: LD_INT 22
35397: PUSH
35398: LD_INT 23
35400: PUSH
35401: LD_INT 24
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: ST_TO_ADDR
35410: GO 35491
35412: LD_INT 53
35414: DOUBLE
35415: EQUAL
35416: IFTRUE 35420
35418: GO 35438
35420: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35421: LD_ADDR_VAR 0 3
35425: PUSH
35426: LD_INT 23
35428: PUSH
35429: LD_INT 24
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: ST_TO_ADDR
35436: GO 35491
35438: LD_INT 46
35440: DOUBLE
35441: EQUAL
35442: IFTRUE 35446
35444: GO 35464
35446: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35447: LD_ADDR_VAR 0 3
35451: PUSH
35452: LD_INT 23
35454: PUSH
35455: LD_INT 24
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: ST_TO_ADDR
35462: GO 35491
35464: LD_INT 47
35466: DOUBLE
35467: EQUAL
35468: IFTRUE 35472
35470: GO 35490
35472: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35473: LD_ADDR_VAR 0 3
35477: PUSH
35478: LD_INT 23
35480: PUSH
35481: LD_INT 24
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: ST_TO_ADDR
35488: GO 35491
35490: POP
// result := ( chassis in result ) ;
35491: LD_ADDR_VAR 0 3
35495: PUSH
35496: LD_VAR 0 1
35500: PUSH
35501: LD_VAR 0 3
35505: IN
35506: ST_TO_ADDR
// end ;
35507: LD_VAR 0 3
35511: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35512: LD_INT 0
35514: PPUSH
35515: PPUSH
35516: PPUSH
35517: PPUSH
35518: PPUSH
35519: PPUSH
35520: PPUSH
// result := array ;
35521: LD_ADDR_VAR 0 5
35525: PUSH
35526: LD_VAR 0 1
35530: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35531: LD_VAR 0 1
35535: NOT
35536: PUSH
35537: LD_VAR 0 2
35541: NOT
35542: OR
35543: PUSH
35544: LD_VAR 0 3
35548: NOT
35549: OR
35550: PUSH
35551: LD_VAR 0 2
35555: PUSH
35556: LD_VAR 0 1
35560: GREATER
35561: OR
35562: PUSH
35563: LD_VAR 0 3
35567: PUSH
35568: LD_VAR 0 1
35572: GREATER
35573: OR
35574: IFFALSE 35578
// exit ;
35576: GO 35874
// if direction then
35578: LD_VAR 0 4
35582: IFFALSE 35646
// begin d := 1 ;
35584: LD_ADDR_VAR 0 9
35588: PUSH
35589: LD_INT 1
35591: ST_TO_ADDR
// if i_from > i_to then
35592: LD_VAR 0 2
35596: PUSH
35597: LD_VAR 0 3
35601: GREATER
35602: IFFALSE 35628
// length := ( array - i_from ) + i_to else
35604: LD_ADDR_VAR 0 11
35608: PUSH
35609: LD_VAR 0 1
35613: PUSH
35614: LD_VAR 0 2
35618: MINUS
35619: PUSH
35620: LD_VAR 0 3
35624: PLUS
35625: ST_TO_ADDR
35626: GO 35644
// length := i_to - i_from ;
35628: LD_ADDR_VAR 0 11
35632: PUSH
35633: LD_VAR 0 3
35637: PUSH
35638: LD_VAR 0 2
35642: MINUS
35643: ST_TO_ADDR
// end else
35644: GO 35707
// begin d := - 1 ;
35646: LD_ADDR_VAR 0 9
35650: PUSH
35651: LD_INT 1
35653: NEG
35654: ST_TO_ADDR
// if i_from > i_to then
35655: LD_VAR 0 2
35659: PUSH
35660: LD_VAR 0 3
35664: GREATER
35665: IFFALSE 35685
// length := i_from - i_to else
35667: LD_ADDR_VAR 0 11
35671: PUSH
35672: LD_VAR 0 2
35676: PUSH
35677: LD_VAR 0 3
35681: MINUS
35682: ST_TO_ADDR
35683: GO 35707
// length := ( array - i_to ) + i_from ;
35685: LD_ADDR_VAR 0 11
35689: PUSH
35690: LD_VAR 0 1
35694: PUSH
35695: LD_VAR 0 3
35699: MINUS
35700: PUSH
35701: LD_VAR 0 2
35705: PLUS
35706: ST_TO_ADDR
// end ; if not length then
35707: LD_VAR 0 11
35711: NOT
35712: IFFALSE 35716
// exit ;
35714: GO 35874
// tmp := array ;
35716: LD_ADDR_VAR 0 10
35720: PUSH
35721: LD_VAR 0 1
35725: ST_TO_ADDR
// for i = 1 to length do
35726: LD_ADDR_VAR 0 6
35730: PUSH
35731: DOUBLE
35732: LD_INT 1
35734: DEC
35735: ST_TO_ADDR
35736: LD_VAR 0 11
35740: PUSH
35741: FOR_TO
35742: IFFALSE 35862
// begin for j = 1 to array do
35744: LD_ADDR_VAR 0 7
35748: PUSH
35749: DOUBLE
35750: LD_INT 1
35752: DEC
35753: ST_TO_ADDR
35754: LD_VAR 0 1
35758: PUSH
35759: FOR_TO
35760: IFFALSE 35848
// begin k := j + d ;
35762: LD_ADDR_VAR 0 8
35766: PUSH
35767: LD_VAR 0 7
35771: PUSH
35772: LD_VAR 0 9
35776: PLUS
35777: ST_TO_ADDR
// if k > array then
35778: LD_VAR 0 8
35782: PUSH
35783: LD_VAR 0 1
35787: GREATER
35788: IFFALSE 35798
// k := 1 ;
35790: LD_ADDR_VAR 0 8
35794: PUSH
35795: LD_INT 1
35797: ST_TO_ADDR
// if not k then
35798: LD_VAR 0 8
35802: NOT
35803: IFFALSE 35815
// k := array ;
35805: LD_ADDR_VAR 0 8
35809: PUSH
35810: LD_VAR 0 1
35814: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35815: LD_ADDR_VAR 0 10
35819: PUSH
35820: LD_VAR 0 10
35824: PPUSH
35825: LD_VAR 0 8
35829: PPUSH
35830: LD_VAR 0 1
35834: PUSH
35835: LD_VAR 0 7
35839: ARRAY
35840: PPUSH
35841: CALL_OW 1
35845: ST_TO_ADDR
// end ;
35846: GO 35759
35848: POP
35849: POP
// array := tmp ;
35850: LD_ADDR_VAR 0 1
35854: PUSH
35855: LD_VAR 0 10
35859: ST_TO_ADDR
// end ;
35860: GO 35741
35862: POP
35863: POP
// result := array ;
35864: LD_ADDR_VAR 0 5
35868: PUSH
35869: LD_VAR 0 1
35873: ST_TO_ADDR
// end ;
35874: LD_VAR 0 5
35878: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35879: LD_INT 0
35881: PPUSH
35882: PPUSH
// result := 0 ;
35883: LD_ADDR_VAR 0 3
35887: PUSH
35888: LD_INT 0
35890: ST_TO_ADDR
// if not array or not value in array then
35891: LD_VAR 0 1
35895: NOT
35896: PUSH
35897: LD_VAR 0 2
35901: PUSH
35902: LD_VAR 0 1
35906: IN
35907: NOT
35908: OR
35909: IFFALSE 35913
// exit ;
35911: GO 35967
// for i = 1 to array do
35913: LD_ADDR_VAR 0 4
35917: PUSH
35918: DOUBLE
35919: LD_INT 1
35921: DEC
35922: ST_TO_ADDR
35923: LD_VAR 0 1
35927: PUSH
35928: FOR_TO
35929: IFFALSE 35965
// if value = array [ i ] then
35931: LD_VAR 0 2
35935: PUSH
35936: LD_VAR 0 1
35940: PUSH
35941: LD_VAR 0 4
35945: ARRAY
35946: EQUAL
35947: IFFALSE 35963
// begin result := i ;
35949: LD_ADDR_VAR 0 3
35953: PUSH
35954: LD_VAR 0 4
35958: ST_TO_ADDR
// exit ;
35959: POP
35960: POP
35961: GO 35967
// end ;
35963: GO 35928
35965: POP
35966: POP
// end ;
35967: LD_VAR 0 3
35971: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35972: LD_INT 0
35974: PPUSH
// vc_chassis := chassis ;
35975: LD_ADDR_OWVAR 37
35979: PUSH
35980: LD_VAR 0 1
35984: ST_TO_ADDR
// vc_engine := engine ;
35985: LD_ADDR_OWVAR 39
35989: PUSH
35990: LD_VAR 0 2
35994: ST_TO_ADDR
// vc_control := control ;
35995: LD_ADDR_OWVAR 38
35999: PUSH
36000: LD_VAR 0 3
36004: ST_TO_ADDR
// vc_weapon := weapon ;
36005: LD_ADDR_OWVAR 40
36009: PUSH
36010: LD_VAR 0 4
36014: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36015: LD_ADDR_OWVAR 41
36019: PUSH
36020: LD_VAR 0 5
36024: ST_TO_ADDR
// end ;
36025: LD_VAR 0 6
36029: RET
// export function WantPlant ( unit ) ; var task ; begin
36030: LD_INT 0
36032: PPUSH
36033: PPUSH
// result := false ;
36034: LD_ADDR_VAR 0 2
36038: PUSH
36039: LD_INT 0
36041: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: LD_VAR 0 1
36051: PPUSH
36052: CALL_OW 437
36056: ST_TO_ADDR
// if task then
36057: LD_VAR 0 3
36061: IFFALSE 36089
// if task [ 1 ] [ 1 ] = p then
36063: LD_VAR 0 3
36067: PUSH
36068: LD_INT 1
36070: ARRAY
36071: PUSH
36072: LD_INT 1
36074: ARRAY
36075: PUSH
36076: LD_STRING p
36078: EQUAL
36079: IFFALSE 36089
// result := true ;
36081: LD_ADDR_VAR 0 2
36085: PUSH
36086: LD_INT 1
36088: ST_TO_ADDR
// end ;
36089: LD_VAR 0 2
36093: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36094: LD_INT 0
36096: PPUSH
36097: PPUSH
36098: PPUSH
36099: PPUSH
// if pos < 1 then
36100: LD_VAR 0 2
36104: PUSH
36105: LD_INT 1
36107: LESS
36108: IFFALSE 36112
// exit ;
36110: GO 36415
// if pos = 1 then
36112: LD_VAR 0 2
36116: PUSH
36117: LD_INT 1
36119: EQUAL
36120: IFFALSE 36153
// result := Replace ( arr , pos [ 1 ] , value ) else
36122: LD_ADDR_VAR 0 4
36126: PUSH
36127: LD_VAR 0 1
36131: PPUSH
36132: LD_VAR 0 2
36136: PUSH
36137: LD_INT 1
36139: ARRAY
36140: PPUSH
36141: LD_VAR 0 3
36145: PPUSH
36146: CALL_OW 1
36150: ST_TO_ADDR
36151: GO 36415
// begin tmp := arr ;
36153: LD_ADDR_VAR 0 6
36157: PUSH
36158: LD_VAR 0 1
36162: ST_TO_ADDR
// s_arr := [ tmp ] ;
36163: LD_ADDR_VAR 0 7
36167: PUSH
36168: LD_VAR 0 6
36172: PUSH
36173: EMPTY
36174: LIST
36175: ST_TO_ADDR
// for i = 1 to pos - 1 do
36176: LD_ADDR_VAR 0 5
36180: PUSH
36181: DOUBLE
36182: LD_INT 1
36184: DEC
36185: ST_TO_ADDR
36186: LD_VAR 0 2
36190: PUSH
36191: LD_INT 1
36193: MINUS
36194: PUSH
36195: FOR_TO
36196: IFFALSE 36241
// begin tmp := tmp [ pos [ i ] ] ;
36198: LD_ADDR_VAR 0 6
36202: PUSH
36203: LD_VAR 0 6
36207: PUSH
36208: LD_VAR 0 2
36212: PUSH
36213: LD_VAR 0 5
36217: ARRAY
36218: ARRAY
36219: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36220: LD_ADDR_VAR 0 7
36224: PUSH
36225: LD_VAR 0 7
36229: PUSH
36230: LD_VAR 0 6
36234: PUSH
36235: EMPTY
36236: LIST
36237: ADD
36238: ST_TO_ADDR
// end ;
36239: GO 36195
36241: POP
36242: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36243: LD_ADDR_VAR 0 6
36247: PUSH
36248: LD_VAR 0 6
36252: PPUSH
36253: LD_VAR 0 2
36257: PUSH
36258: LD_VAR 0 2
36262: ARRAY
36263: PPUSH
36264: LD_VAR 0 3
36268: PPUSH
36269: CALL_OW 1
36273: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36274: LD_ADDR_VAR 0 7
36278: PUSH
36279: LD_VAR 0 7
36283: PPUSH
36284: LD_VAR 0 7
36288: PPUSH
36289: LD_VAR 0 6
36293: PPUSH
36294: CALL_OW 1
36298: ST_TO_ADDR
// for i = s_arr downto 2 do
36299: LD_ADDR_VAR 0 5
36303: PUSH
36304: DOUBLE
36305: LD_VAR 0 7
36309: INC
36310: ST_TO_ADDR
36311: LD_INT 2
36313: PUSH
36314: FOR_DOWNTO
36315: IFFALSE 36399
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36317: LD_ADDR_VAR 0 6
36321: PUSH
36322: LD_VAR 0 7
36326: PUSH
36327: LD_VAR 0 5
36331: PUSH
36332: LD_INT 1
36334: MINUS
36335: ARRAY
36336: PPUSH
36337: LD_VAR 0 2
36341: PUSH
36342: LD_VAR 0 5
36346: PUSH
36347: LD_INT 1
36349: MINUS
36350: ARRAY
36351: PPUSH
36352: LD_VAR 0 7
36356: PUSH
36357: LD_VAR 0 5
36361: ARRAY
36362: PPUSH
36363: CALL_OW 1
36367: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36368: LD_ADDR_VAR 0 7
36372: PUSH
36373: LD_VAR 0 7
36377: PPUSH
36378: LD_VAR 0 5
36382: PUSH
36383: LD_INT 1
36385: MINUS
36386: PPUSH
36387: LD_VAR 0 6
36391: PPUSH
36392: CALL_OW 1
36396: ST_TO_ADDR
// end ;
36397: GO 36314
36399: POP
36400: POP
// result := s_arr [ 1 ] ;
36401: LD_ADDR_VAR 0 4
36405: PUSH
36406: LD_VAR 0 7
36410: PUSH
36411: LD_INT 1
36413: ARRAY
36414: ST_TO_ADDR
// end ; end ;
36415: LD_VAR 0 4
36419: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36420: LD_INT 0
36422: PPUSH
36423: PPUSH
// if not list then
36424: LD_VAR 0 1
36428: NOT
36429: IFFALSE 36433
// exit ;
36431: GO 36524
// i := list [ pos1 ] ;
36433: LD_ADDR_VAR 0 5
36437: PUSH
36438: LD_VAR 0 1
36442: PUSH
36443: LD_VAR 0 2
36447: ARRAY
36448: ST_TO_ADDR
// if not i then
36449: LD_VAR 0 5
36453: NOT
36454: IFFALSE 36458
// exit ;
36456: GO 36524
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36458: LD_ADDR_VAR 0 1
36462: PUSH
36463: LD_VAR 0 1
36467: PPUSH
36468: LD_VAR 0 2
36472: PPUSH
36473: LD_VAR 0 1
36477: PUSH
36478: LD_VAR 0 3
36482: ARRAY
36483: PPUSH
36484: CALL_OW 1
36488: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36489: LD_ADDR_VAR 0 1
36493: PUSH
36494: LD_VAR 0 1
36498: PPUSH
36499: LD_VAR 0 3
36503: PPUSH
36504: LD_VAR 0 5
36508: PPUSH
36509: CALL_OW 1
36513: ST_TO_ADDR
// result := list ;
36514: LD_ADDR_VAR 0 4
36518: PUSH
36519: LD_VAR 0 1
36523: ST_TO_ADDR
// end ;
36524: LD_VAR 0 4
36528: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36529: LD_INT 0
36531: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36532: LD_ADDR_VAR 0 5
36536: PUSH
36537: LD_VAR 0 1
36541: PPUSH
36542: CALL_OW 250
36546: PPUSH
36547: LD_VAR 0 1
36551: PPUSH
36552: CALL_OW 251
36556: PPUSH
36557: LD_VAR 0 2
36561: PPUSH
36562: LD_VAR 0 3
36566: PPUSH
36567: LD_VAR 0 4
36571: PPUSH
36572: CALL 36582 0 5
36576: ST_TO_ADDR
// end ;
36577: LD_VAR 0 5
36581: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36582: LD_INT 0
36584: PPUSH
36585: PPUSH
36586: PPUSH
36587: PPUSH
// if not list then
36588: LD_VAR 0 3
36592: NOT
36593: IFFALSE 36597
// exit ;
36595: GO 36985
// result := [ ] ;
36597: LD_ADDR_VAR 0 6
36601: PUSH
36602: EMPTY
36603: ST_TO_ADDR
// for i in list do
36604: LD_ADDR_VAR 0 7
36608: PUSH
36609: LD_VAR 0 3
36613: PUSH
36614: FOR_IN
36615: IFFALSE 36817
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36617: LD_ADDR_VAR 0 9
36621: PUSH
36622: LD_VAR 0 7
36626: PPUSH
36627: LD_VAR 0 1
36631: PPUSH
36632: LD_VAR 0 2
36636: PPUSH
36637: CALL_OW 297
36641: ST_TO_ADDR
// if not result then
36642: LD_VAR 0 6
36646: NOT
36647: IFFALSE 36673
// result := [ [ i , tmp ] ] else
36649: LD_ADDR_VAR 0 6
36653: PUSH
36654: LD_VAR 0 7
36658: PUSH
36659: LD_VAR 0 9
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: EMPTY
36669: LIST
36670: ST_TO_ADDR
36671: GO 36815
// begin if result [ result ] [ 2 ] < tmp then
36673: LD_VAR 0 6
36677: PUSH
36678: LD_VAR 0 6
36682: ARRAY
36683: PUSH
36684: LD_INT 2
36686: ARRAY
36687: PUSH
36688: LD_VAR 0 9
36692: LESS
36693: IFFALSE 36735
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36695: LD_ADDR_VAR 0 6
36699: PUSH
36700: LD_VAR 0 6
36704: PPUSH
36705: LD_VAR 0 6
36709: PUSH
36710: LD_INT 1
36712: PLUS
36713: PPUSH
36714: LD_VAR 0 7
36718: PUSH
36719: LD_VAR 0 9
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PPUSH
36728: CALL_OW 2
36732: ST_TO_ADDR
36733: GO 36815
// for j = 1 to result do
36735: LD_ADDR_VAR 0 8
36739: PUSH
36740: DOUBLE
36741: LD_INT 1
36743: DEC
36744: ST_TO_ADDR
36745: LD_VAR 0 6
36749: PUSH
36750: FOR_TO
36751: IFFALSE 36813
// begin if tmp < result [ j ] [ 2 ] then
36753: LD_VAR 0 9
36757: PUSH
36758: LD_VAR 0 6
36762: PUSH
36763: LD_VAR 0 8
36767: ARRAY
36768: PUSH
36769: LD_INT 2
36771: ARRAY
36772: LESS
36773: IFFALSE 36811
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36775: LD_ADDR_VAR 0 6
36779: PUSH
36780: LD_VAR 0 6
36784: PPUSH
36785: LD_VAR 0 8
36789: PPUSH
36790: LD_VAR 0 7
36794: PUSH
36795: LD_VAR 0 9
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PPUSH
36804: CALL_OW 2
36808: ST_TO_ADDR
// break ;
36809: GO 36813
// end ; end ;
36811: GO 36750
36813: POP
36814: POP
// end ; end ;
36815: GO 36614
36817: POP
36818: POP
// if result and not asc then
36819: LD_VAR 0 6
36823: PUSH
36824: LD_VAR 0 4
36828: NOT
36829: AND
36830: IFFALSE 36905
// begin tmp := result ;
36832: LD_ADDR_VAR 0 9
36836: PUSH
36837: LD_VAR 0 6
36841: ST_TO_ADDR
// for i = tmp downto 1 do
36842: LD_ADDR_VAR 0 7
36846: PUSH
36847: DOUBLE
36848: LD_VAR 0 9
36852: INC
36853: ST_TO_ADDR
36854: LD_INT 1
36856: PUSH
36857: FOR_DOWNTO
36858: IFFALSE 36903
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36860: LD_ADDR_VAR 0 6
36864: PUSH
36865: LD_VAR 0 6
36869: PPUSH
36870: LD_VAR 0 9
36874: PUSH
36875: LD_VAR 0 7
36879: MINUS
36880: PUSH
36881: LD_INT 1
36883: PLUS
36884: PPUSH
36885: LD_VAR 0 9
36889: PUSH
36890: LD_VAR 0 7
36894: ARRAY
36895: PPUSH
36896: CALL_OW 1
36900: ST_TO_ADDR
36901: GO 36857
36903: POP
36904: POP
// end ; tmp := [ ] ;
36905: LD_ADDR_VAR 0 9
36909: PUSH
36910: EMPTY
36911: ST_TO_ADDR
// if mode then
36912: LD_VAR 0 5
36916: IFFALSE 36985
// begin for i = 1 to result do
36918: LD_ADDR_VAR 0 7
36922: PUSH
36923: DOUBLE
36924: LD_INT 1
36926: DEC
36927: ST_TO_ADDR
36928: LD_VAR 0 6
36932: PUSH
36933: FOR_TO
36934: IFFALSE 36973
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36936: LD_ADDR_VAR 0 9
36940: PUSH
36941: LD_VAR 0 9
36945: PPUSH
36946: LD_VAR 0 7
36950: PPUSH
36951: LD_VAR 0 6
36955: PUSH
36956: LD_VAR 0 7
36960: ARRAY
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: PPUSH
36966: CALL_OW 1
36970: ST_TO_ADDR
36971: GO 36933
36973: POP
36974: POP
// result := tmp ;
36975: LD_ADDR_VAR 0 6
36979: PUSH
36980: LD_VAR 0 9
36984: ST_TO_ADDR
// end ; end ;
36985: LD_VAR 0 6
36989: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36990: LD_INT 0
36992: PPUSH
36993: PPUSH
36994: PPUSH
36995: PPUSH
36996: PPUSH
36997: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36998: LD_ADDR_VAR 0 5
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: LD_INT 0
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: EMPTY
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: ST_TO_ADDR
// if not x or not y then
37020: LD_VAR 0 2
37024: NOT
37025: PUSH
37026: LD_VAR 0 3
37030: NOT
37031: OR
37032: IFFALSE 37036
// exit ;
37034: GO 38688
// if not range then
37036: LD_VAR 0 4
37040: NOT
37041: IFFALSE 37051
// range := 10 ;
37043: LD_ADDR_VAR 0 4
37047: PUSH
37048: LD_INT 10
37050: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37051: LD_ADDR_VAR 0 8
37055: PUSH
37056: LD_INT 81
37058: PUSH
37059: LD_VAR 0 1
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 92
37070: PUSH
37071: LD_VAR 0 2
37075: PUSH
37076: LD_VAR 0 3
37080: PUSH
37081: LD_VAR 0 4
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 3
37094: PUSH
37095: LD_INT 21
37097: PUSH
37098: LD_INT 3
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: LIST
37113: PPUSH
37114: CALL_OW 69
37118: ST_TO_ADDR
// if not tmp then
37119: LD_VAR 0 8
37123: NOT
37124: IFFALSE 37128
// exit ;
37126: GO 38688
// for i in tmp do
37128: LD_ADDR_VAR 0 6
37132: PUSH
37133: LD_VAR 0 8
37137: PUSH
37138: FOR_IN
37139: IFFALSE 38663
// begin points := [ 0 , 0 , 0 ] ;
37141: LD_ADDR_VAR 0 9
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: ST_TO_ADDR
// bpoints := 1 ;
37160: LD_ADDR_VAR 0 10
37164: PUSH
37165: LD_INT 1
37167: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37168: LD_VAR 0 6
37172: PPUSH
37173: CALL_OW 247
37177: PUSH
37178: LD_INT 1
37180: DOUBLE
37181: EQUAL
37182: IFTRUE 37186
37184: GO 37764
37186: POP
// begin if GetClass ( i ) = 1 then
37187: LD_VAR 0 6
37191: PPUSH
37192: CALL_OW 257
37196: PUSH
37197: LD_INT 1
37199: EQUAL
37200: IFFALSE 37221
// points := [ 10 , 5 , 3 ] ;
37202: LD_ADDR_VAR 0 9
37206: PUSH
37207: LD_INT 10
37209: PUSH
37210: LD_INT 5
37212: PUSH
37213: LD_INT 3
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: LIST
37220: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37221: LD_VAR 0 6
37225: PPUSH
37226: CALL_OW 257
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: LD_INT 3
37236: PUSH
37237: LD_INT 4
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: LIST
37244: IN
37245: IFFALSE 37266
// points := [ 3 , 2 , 1 ] ;
37247: LD_ADDR_VAR 0 9
37251: PUSH
37252: LD_INT 3
37254: PUSH
37255: LD_INT 2
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37266: LD_VAR 0 6
37270: PPUSH
37271: CALL_OW 257
37275: PUSH
37276: LD_INT 5
37278: EQUAL
37279: IFFALSE 37300
// points := [ 130 , 5 , 2 ] ;
37281: LD_ADDR_VAR 0 9
37285: PUSH
37286: LD_INT 130
37288: PUSH
37289: LD_INT 5
37291: PUSH
37292: LD_INT 2
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: LIST
37299: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37300: LD_VAR 0 6
37304: PPUSH
37305: CALL_OW 257
37309: PUSH
37310: LD_INT 8
37312: EQUAL
37313: IFFALSE 37334
// points := [ 35 , 35 , 30 ] ;
37315: LD_ADDR_VAR 0 9
37319: PUSH
37320: LD_INT 35
37322: PUSH
37323: LD_INT 35
37325: PUSH
37326: LD_INT 30
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: LIST
37333: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37334: LD_VAR 0 6
37338: PPUSH
37339: CALL_OW 257
37343: PUSH
37344: LD_INT 9
37346: EQUAL
37347: IFFALSE 37368
// points := [ 20 , 55 , 40 ] ;
37349: LD_ADDR_VAR 0 9
37353: PUSH
37354: LD_INT 20
37356: PUSH
37357: LD_INT 55
37359: PUSH
37360: LD_INT 40
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: LIST
37367: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37368: LD_VAR 0 6
37372: PPUSH
37373: CALL_OW 257
37377: PUSH
37378: LD_INT 12
37380: PUSH
37381: LD_INT 16
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: IN
37388: IFFALSE 37409
// points := [ 5 , 3 , 2 ] ;
37390: LD_ADDR_VAR 0 9
37394: PUSH
37395: LD_INT 5
37397: PUSH
37398: LD_INT 3
37400: PUSH
37401: LD_INT 2
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: LIST
37408: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37409: LD_VAR 0 6
37413: PPUSH
37414: CALL_OW 257
37418: PUSH
37419: LD_INT 17
37421: EQUAL
37422: IFFALSE 37443
// points := [ 100 , 50 , 75 ] ;
37424: LD_ADDR_VAR 0 9
37428: PUSH
37429: LD_INT 100
37431: PUSH
37432: LD_INT 50
37434: PUSH
37435: LD_INT 75
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37443: LD_VAR 0 6
37447: PPUSH
37448: CALL_OW 257
37452: PUSH
37453: LD_INT 15
37455: EQUAL
37456: IFFALSE 37477
// points := [ 10 , 5 , 3 ] ;
37458: LD_ADDR_VAR 0 9
37462: PUSH
37463: LD_INT 10
37465: PUSH
37466: LD_INT 5
37468: PUSH
37469: LD_INT 3
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: LIST
37476: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37477: LD_VAR 0 6
37481: PPUSH
37482: CALL_OW 257
37486: PUSH
37487: LD_INT 14
37489: EQUAL
37490: IFFALSE 37511
// points := [ 10 , 0 , 0 ] ;
37492: LD_ADDR_VAR 0 9
37496: PUSH
37497: LD_INT 10
37499: PUSH
37500: LD_INT 0
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: LIST
37510: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37511: LD_VAR 0 6
37515: PPUSH
37516: CALL_OW 257
37520: PUSH
37521: LD_INT 11
37523: EQUAL
37524: IFFALSE 37545
// points := [ 30 , 10 , 5 ] ;
37526: LD_ADDR_VAR 0 9
37530: PUSH
37531: LD_INT 30
37533: PUSH
37534: LD_INT 10
37536: PUSH
37537: LD_INT 5
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: LIST
37544: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37545: LD_VAR 0 1
37549: PPUSH
37550: LD_INT 5
37552: PPUSH
37553: CALL_OW 321
37557: PUSH
37558: LD_INT 2
37560: EQUAL
37561: IFFALSE 37578
// bpoints := bpoints * 1.8 ;
37563: LD_ADDR_VAR 0 10
37567: PUSH
37568: LD_VAR 0 10
37572: PUSH
37573: LD_REAL  1.80000000000000E+0000
37576: MUL
37577: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37578: LD_VAR 0 6
37582: PPUSH
37583: CALL_OW 257
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: LD_INT 3
37596: PUSH
37597: LD_INT 4
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: IN
37606: PUSH
37607: LD_VAR 0 1
37611: PPUSH
37612: LD_INT 51
37614: PPUSH
37615: CALL_OW 321
37619: PUSH
37620: LD_INT 2
37622: EQUAL
37623: AND
37624: IFFALSE 37641
// bpoints := bpoints * 1.2 ;
37626: LD_ADDR_VAR 0 10
37630: PUSH
37631: LD_VAR 0 10
37635: PUSH
37636: LD_REAL  1.20000000000000E+0000
37639: MUL
37640: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37641: LD_VAR 0 6
37645: PPUSH
37646: CALL_OW 257
37650: PUSH
37651: LD_INT 5
37653: PUSH
37654: LD_INT 7
37656: PUSH
37657: LD_INT 9
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: LIST
37664: IN
37665: PUSH
37666: LD_VAR 0 1
37670: PPUSH
37671: LD_INT 52
37673: PPUSH
37674: CALL_OW 321
37678: PUSH
37679: LD_INT 2
37681: EQUAL
37682: AND
37683: IFFALSE 37700
// bpoints := bpoints * 1.5 ;
37685: LD_ADDR_VAR 0 10
37689: PUSH
37690: LD_VAR 0 10
37694: PUSH
37695: LD_REAL  1.50000000000000E+0000
37698: MUL
37699: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37700: LD_VAR 0 1
37704: PPUSH
37705: LD_INT 66
37707: PPUSH
37708: CALL_OW 321
37712: PUSH
37713: LD_INT 2
37715: EQUAL
37716: IFFALSE 37733
// bpoints := bpoints * 1.1 ;
37718: LD_ADDR_VAR 0 10
37722: PUSH
37723: LD_VAR 0 10
37727: PUSH
37728: LD_REAL  1.10000000000000E+0000
37731: MUL
37732: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37733: LD_ADDR_VAR 0 10
37737: PUSH
37738: LD_VAR 0 10
37742: PUSH
37743: LD_VAR 0 6
37747: PPUSH
37748: LD_INT 1
37750: PPUSH
37751: CALL_OW 259
37755: PUSH
37756: LD_REAL  1.15000000000000E+0000
37759: MUL
37760: MUL
37761: ST_TO_ADDR
// end ; unit_vehicle :
37762: GO 38592
37764: LD_INT 2
37766: DOUBLE
37767: EQUAL
37768: IFTRUE 37772
37770: GO 38580
37772: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37773: LD_VAR 0 6
37777: PPUSH
37778: CALL_OW 264
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: LD_INT 42
37788: PUSH
37789: LD_INT 24
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: LIST
37796: IN
37797: IFFALSE 37818
// points := [ 25 , 5 , 3 ] ;
37799: LD_ADDR_VAR 0 9
37803: PUSH
37804: LD_INT 25
37806: PUSH
37807: LD_INT 5
37809: PUSH
37810: LD_INT 3
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37818: LD_VAR 0 6
37822: PPUSH
37823: CALL_OW 264
37827: PUSH
37828: LD_INT 4
37830: PUSH
37831: LD_INT 43
37833: PUSH
37834: LD_INT 25
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: LIST
37841: IN
37842: IFFALSE 37863
// points := [ 40 , 15 , 5 ] ;
37844: LD_ADDR_VAR 0 9
37848: PUSH
37849: LD_INT 40
37851: PUSH
37852: LD_INT 15
37854: PUSH
37855: LD_INT 5
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37863: LD_VAR 0 6
37867: PPUSH
37868: CALL_OW 264
37872: PUSH
37873: LD_INT 3
37875: PUSH
37876: LD_INT 23
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: IN
37883: IFFALSE 37904
// points := [ 7 , 25 , 8 ] ;
37885: LD_ADDR_VAR 0 9
37889: PUSH
37890: LD_INT 7
37892: PUSH
37893: LD_INT 25
37895: PUSH
37896: LD_INT 8
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: LIST
37903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37904: LD_VAR 0 6
37908: PPUSH
37909: CALL_OW 264
37913: PUSH
37914: LD_INT 5
37916: PUSH
37917: LD_INT 27
37919: PUSH
37920: LD_INT 44
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: IN
37928: IFFALSE 37949
// points := [ 14 , 50 , 16 ] ;
37930: LD_ADDR_VAR 0 9
37934: PUSH
37935: LD_INT 14
37937: PUSH
37938: LD_INT 50
37940: PUSH
37941: LD_INT 16
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: LIST
37948: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37949: LD_VAR 0 6
37953: PPUSH
37954: CALL_OW 264
37958: PUSH
37959: LD_INT 6
37961: PUSH
37962: LD_INT 46
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: IN
37969: IFFALSE 37990
// points := [ 32 , 120 , 70 ] ;
37971: LD_ADDR_VAR 0 9
37975: PUSH
37976: LD_INT 32
37978: PUSH
37979: LD_INT 120
37981: PUSH
37982: LD_INT 70
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: LIST
37989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37990: LD_VAR 0 6
37994: PPUSH
37995: CALL_OW 264
37999: PUSH
38000: LD_INT 7
38002: PUSH
38003: LD_INT 28
38005: PUSH
38006: LD_INT 45
38008: PUSH
38009: LD_EXP 25
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: IN
38020: IFFALSE 38041
// points := [ 35 , 20 , 45 ] ;
38022: LD_ADDR_VAR 0 9
38026: PUSH
38027: LD_INT 35
38029: PUSH
38030: LD_INT 20
38032: PUSH
38033: LD_INT 45
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: LIST
38040: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38041: LD_VAR 0 6
38045: PPUSH
38046: CALL_OW 264
38050: PUSH
38051: LD_INT 47
38053: PUSH
38054: EMPTY
38055: LIST
38056: IN
38057: IFFALSE 38078
// points := [ 67 , 45 , 75 ] ;
38059: LD_ADDR_VAR 0 9
38063: PUSH
38064: LD_INT 67
38066: PUSH
38067: LD_INT 45
38069: PUSH
38070: LD_INT 75
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: LIST
38077: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38078: LD_VAR 0 6
38082: PPUSH
38083: CALL_OW 264
38087: PUSH
38088: LD_INT 26
38090: PUSH
38091: EMPTY
38092: LIST
38093: IN
38094: IFFALSE 38115
// points := [ 120 , 30 , 80 ] ;
38096: LD_ADDR_VAR 0 9
38100: PUSH
38101: LD_INT 120
38103: PUSH
38104: LD_INT 30
38106: PUSH
38107: LD_INT 80
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: LIST
38114: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38115: LD_VAR 0 6
38119: PPUSH
38120: CALL_OW 264
38124: PUSH
38125: LD_INT 22
38127: PUSH
38128: EMPTY
38129: LIST
38130: IN
38131: IFFALSE 38152
// points := [ 40 , 1 , 1 ] ;
38133: LD_ADDR_VAR 0 9
38137: PUSH
38138: LD_INT 40
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: LIST
38151: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38152: LD_VAR 0 6
38156: PPUSH
38157: CALL_OW 264
38161: PUSH
38162: LD_INT 29
38164: PUSH
38165: EMPTY
38166: LIST
38167: IN
38168: IFFALSE 38189
// points := [ 70 , 200 , 400 ] ;
38170: LD_ADDR_VAR 0 9
38174: PUSH
38175: LD_INT 70
38177: PUSH
38178: LD_INT 200
38180: PUSH
38181: LD_INT 400
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38189: LD_VAR 0 6
38193: PPUSH
38194: CALL_OW 264
38198: PUSH
38199: LD_INT 14
38201: PUSH
38202: LD_INT 53
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: IN
38209: IFFALSE 38230
// points := [ 40 , 10 , 20 ] ;
38211: LD_ADDR_VAR 0 9
38215: PUSH
38216: LD_INT 40
38218: PUSH
38219: LD_INT 10
38221: PUSH
38222: LD_INT 20
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38230: LD_VAR 0 6
38234: PPUSH
38235: CALL_OW 264
38239: PUSH
38240: LD_INT 9
38242: PUSH
38243: EMPTY
38244: LIST
38245: IN
38246: IFFALSE 38267
// points := [ 5 , 70 , 20 ] ;
38248: LD_ADDR_VAR 0 9
38252: PUSH
38253: LD_INT 5
38255: PUSH
38256: LD_INT 70
38258: PUSH
38259: LD_INT 20
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38267: LD_VAR 0 6
38271: PPUSH
38272: CALL_OW 264
38276: PUSH
38277: LD_INT 10
38279: PUSH
38280: EMPTY
38281: LIST
38282: IN
38283: IFFALSE 38304
// points := [ 35 , 110 , 70 ] ;
38285: LD_ADDR_VAR 0 9
38289: PUSH
38290: LD_INT 35
38292: PUSH
38293: LD_INT 110
38295: PUSH
38296: LD_INT 70
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38304: LD_VAR 0 6
38308: PPUSH
38309: CALL_OW 265
38313: PUSH
38314: LD_INT 25
38316: EQUAL
38317: IFFALSE 38338
// points := [ 80 , 65 , 100 ] ;
38319: LD_ADDR_VAR 0 9
38323: PUSH
38324: LD_INT 80
38326: PUSH
38327: LD_INT 65
38329: PUSH
38330: LD_INT 100
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: LIST
38337: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38338: LD_VAR 0 6
38342: PPUSH
38343: CALL_OW 263
38347: PUSH
38348: LD_INT 1
38350: EQUAL
38351: IFFALSE 38386
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38353: LD_ADDR_VAR 0 10
38357: PUSH
38358: LD_VAR 0 10
38362: PUSH
38363: LD_VAR 0 6
38367: PPUSH
38368: CALL_OW 311
38372: PPUSH
38373: LD_INT 3
38375: PPUSH
38376: CALL_OW 259
38380: PUSH
38381: LD_INT 4
38383: MUL
38384: MUL
38385: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38386: LD_VAR 0 6
38390: PPUSH
38391: CALL_OW 263
38395: PUSH
38396: LD_INT 2
38398: EQUAL
38399: IFFALSE 38450
// begin j := IsControledBy ( i ) ;
38401: LD_ADDR_VAR 0 7
38405: PUSH
38406: LD_VAR 0 6
38410: PPUSH
38411: CALL_OW 312
38415: ST_TO_ADDR
// if j then
38416: LD_VAR 0 7
38420: IFFALSE 38450
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38422: LD_ADDR_VAR 0 10
38426: PUSH
38427: LD_VAR 0 10
38431: PUSH
38432: LD_VAR 0 7
38436: PPUSH
38437: LD_INT 3
38439: PPUSH
38440: CALL_OW 259
38444: PUSH
38445: LD_INT 3
38447: MUL
38448: MUL
38449: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38450: LD_VAR 0 6
38454: PPUSH
38455: CALL_OW 264
38459: PUSH
38460: LD_INT 5
38462: PUSH
38463: LD_INT 6
38465: PUSH
38466: LD_INT 46
38468: PUSH
38469: LD_INT 44
38471: PUSH
38472: LD_INT 47
38474: PUSH
38475: LD_INT 45
38477: PUSH
38478: LD_INT 28
38480: PUSH
38481: LD_INT 7
38483: PUSH
38484: LD_INT 27
38486: PUSH
38487: LD_INT 29
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: IN
38502: PUSH
38503: LD_VAR 0 1
38507: PPUSH
38508: LD_INT 52
38510: PPUSH
38511: CALL_OW 321
38515: PUSH
38516: LD_INT 2
38518: EQUAL
38519: AND
38520: IFFALSE 38537
// bpoints := bpoints * 1.2 ;
38522: LD_ADDR_VAR 0 10
38526: PUSH
38527: LD_VAR 0 10
38531: PUSH
38532: LD_REAL  1.20000000000000E+0000
38535: MUL
38536: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38537: LD_VAR 0 6
38541: PPUSH
38542: CALL_OW 264
38546: PUSH
38547: LD_INT 6
38549: PUSH
38550: LD_INT 46
38552: PUSH
38553: LD_INT 47
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: LIST
38560: IN
38561: IFFALSE 38578
// bpoints := bpoints * 1.2 ;
38563: LD_ADDR_VAR 0 10
38567: PUSH
38568: LD_VAR 0 10
38572: PUSH
38573: LD_REAL  1.20000000000000E+0000
38576: MUL
38577: ST_TO_ADDR
// end ; unit_building :
38578: GO 38592
38580: LD_INT 3
38582: DOUBLE
38583: EQUAL
38584: IFTRUE 38588
38586: GO 38591
38588: POP
// ; end ;
38589: GO 38592
38591: POP
// for j = 1 to 3 do
38592: LD_ADDR_VAR 0 7
38596: PUSH
38597: DOUBLE
38598: LD_INT 1
38600: DEC
38601: ST_TO_ADDR
38602: LD_INT 3
38604: PUSH
38605: FOR_TO
38606: IFFALSE 38659
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38608: LD_ADDR_VAR 0 5
38612: PUSH
38613: LD_VAR 0 5
38617: PPUSH
38618: LD_VAR 0 7
38622: PPUSH
38623: LD_VAR 0 5
38627: PUSH
38628: LD_VAR 0 7
38632: ARRAY
38633: PUSH
38634: LD_VAR 0 9
38638: PUSH
38639: LD_VAR 0 7
38643: ARRAY
38644: PUSH
38645: LD_VAR 0 10
38649: MUL
38650: PLUS
38651: PPUSH
38652: CALL_OW 1
38656: ST_TO_ADDR
38657: GO 38605
38659: POP
38660: POP
// end ;
38661: GO 37138
38663: POP
38664: POP
// result := Replace ( result , 4 , tmp ) ;
38665: LD_ADDR_VAR 0 5
38669: PUSH
38670: LD_VAR 0 5
38674: PPUSH
38675: LD_INT 4
38677: PPUSH
38678: LD_VAR 0 8
38682: PPUSH
38683: CALL_OW 1
38687: ST_TO_ADDR
// end ;
38688: LD_VAR 0 5
38692: RET
// export function DangerAtRange ( unit , range ) ; begin
38693: LD_INT 0
38695: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38696: LD_ADDR_VAR 0 3
38700: PUSH
38701: LD_VAR 0 1
38705: PPUSH
38706: CALL_OW 255
38710: PPUSH
38711: LD_VAR 0 1
38715: PPUSH
38716: CALL_OW 250
38720: PPUSH
38721: LD_VAR 0 1
38725: PPUSH
38726: CALL_OW 251
38730: PPUSH
38731: LD_VAR 0 2
38735: PPUSH
38736: CALL 36990 0 4
38740: ST_TO_ADDR
// end ;
38741: LD_VAR 0 3
38745: RET
// export function DangerInArea ( side , area ) ; begin
38746: LD_INT 0
38748: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38749: LD_ADDR_VAR 0 3
38753: PUSH
38754: LD_VAR 0 2
38758: PPUSH
38759: LD_INT 81
38761: PUSH
38762: LD_VAR 0 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PPUSH
38771: CALL_OW 70
38775: ST_TO_ADDR
// end ;
38776: LD_VAR 0 3
38780: RET
// export function IsExtension ( b ) ; begin
38781: LD_INT 0
38783: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38784: LD_ADDR_VAR 0 2
38788: PUSH
38789: LD_VAR 0 1
38793: PUSH
38794: LD_INT 23
38796: PUSH
38797: LD_INT 20
38799: PUSH
38800: LD_INT 22
38802: PUSH
38803: LD_INT 17
38805: PUSH
38806: LD_INT 24
38808: PUSH
38809: LD_INT 21
38811: PUSH
38812: LD_INT 19
38814: PUSH
38815: LD_INT 16
38817: PUSH
38818: LD_INT 25
38820: PUSH
38821: LD_INT 18
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: IN
38836: ST_TO_ADDR
// end ;
38837: LD_VAR 0 2
38841: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38842: LD_INT 0
38844: PPUSH
38845: PPUSH
38846: PPUSH
// result := [ ] ;
38847: LD_ADDR_VAR 0 4
38851: PUSH
38852: EMPTY
38853: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38854: LD_ADDR_VAR 0 5
38858: PUSH
38859: LD_VAR 0 2
38863: PPUSH
38864: LD_INT 21
38866: PUSH
38867: LD_INT 3
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PPUSH
38874: CALL_OW 70
38878: ST_TO_ADDR
// if not tmp then
38879: LD_VAR 0 5
38883: NOT
38884: IFFALSE 38888
// exit ;
38886: GO 38952
// if checkLink then
38888: LD_VAR 0 3
38892: IFFALSE 38942
// begin for i in tmp do
38894: LD_ADDR_VAR 0 6
38898: PUSH
38899: LD_VAR 0 5
38903: PUSH
38904: FOR_IN
38905: IFFALSE 38940
// if GetBase ( i ) <> base then
38907: LD_VAR 0 6
38911: PPUSH
38912: CALL_OW 274
38916: PUSH
38917: LD_VAR 0 1
38921: NONEQUAL
38922: IFFALSE 38938
// ComLinkToBase ( base , i ) ;
38924: LD_VAR 0 1
38928: PPUSH
38929: LD_VAR 0 6
38933: PPUSH
38934: CALL_OW 169
38938: GO 38904
38940: POP
38941: POP
// end ; result := tmp ;
38942: LD_ADDR_VAR 0 4
38946: PUSH
38947: LD_VAR 0 5
38951: ST_TO_ADDR
// end ;
38952: LD_VAR 0 4
38956: RET
// export function ComComplete ( units , b ) ; var i ; begin
38957: LD_INT 0
38959: PPUSH
38960: PPUSH
// if not units then
38961: LD_VAR 0 1
38965: NOT
38966: IFFALSE 38970
// exit ;
38968: GO 39060
// for i in units do
38970: LD_ADDR_VAR 0 4
38974: PUSH
38975: LD_VAR 0 1
38979: PUSH
38980: FOR_IN
38981: IFFALSE 39058
// if BuildingStatus ( b ) = bs_build then
38983: LD_VAR 0 2
38987: PPUSH
38988: CALL_OW 461
38992: PUSH
38993: LD_INT 1
38995: EQUAL
38996: IFFALSE 39056
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38998: LD_VAR 0 4
39002: PPUSH
39003: LD_STRING h
39005: PUSH
39006: LD_VAR 0 2
39010: PPUSH
39011: CALL_OW 250
39015: PUSH
39016: LD_VAR 0 2
39020: PPUSH
39021: CALL_OW 251
39025: PUSH
39026: LD_VAR 0 2
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: PUSH
39049: EMPTY
39050: LIST
39051: PPUSH
39052: CALL_OW 446
39056: GO 38980
39058: POP
39059: POP
// end ;
39060: LD_VAR 0 3
39064: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39065: LD_INT 0
39067: PPUSH
39068: PPUSH
39069: PPUSH
39070: PPUSH
39071: PPUSH
39072: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39073: LD_VAR 0 1
39077: NOT
39078: PUSH
39079: LD_VAR 0 1
39083: PPUSH
39084: CALL_OW 263
39088: PUSH
39089: LD_INT 2
39091: NONEQUAL
39092: OR
39093: IFFALSE 39097
// exit ;
39095: GO 39413
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39097: LD_ADDR_VAR 0 6
39101: PUSH
39102: LD_INT 22
39104: PUSH
39105: LD_VAR 0 1
39109: PPUSH
39110: CALL_OW 255
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 2
39121: PUSH
39122: LD_INT 30
39124: PUSH
39125: LD_INT 36
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 34
39134: PUSH
39135: LD_INT 31
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: LIST
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PPUSH
39151: CALL_OW 69
39155: ST_TO_ADDR
// if not tmp then
39156: LD_VAR 0 6
39160: NOT
39161: IFFALSE 39165
// exit ;
39163: GO 39413
// result := [ ] ;
39165: LD_ADDR_VAR 0 2
39169: PUSH
39170: EMPTY
39171: ST_TO_ADDR
// for i in tmp do
39172: LD_ADDR_VAR 0 3
39176: PUSH
39177: LD_VAR 0 6
39181: PUSH
39182: FOR_IN
39183: IFFALSE 39254
// begin t := UnitsInside ( i ) ;
39185: LD_ADDR_VAR 0 4
39189: PUSH
39190: LD_VAR 0 3
39194: PPUSH
39195: CALL_OW 313
39199: ST_TO_ADDR
// if t then
39200: LD_VAR 0 4
39204: IFFALSE 39252
// for j in t do
39206: LD_ADDR_VAR 0 7
39210: PUSH
39211: LD_VAR 0 4
39215: PUSH
39216: FOR_IN
39217: IFFALSE 39250
// result := Replace ( result , result + 1 , j ) ;
39219: LD_ADDR_VAR 0 2
39223: PUSH
39224: LD_VAR 0 2
39228: PPUSH
39229: LD_VAR 0 2
39233: PUSH
39234: LD_INT 1
39236: PLUS
39237: PPUSH
39238: LD_VAR 0 7
39242: PPUSH
39243: CALL_OW 1
39247: ST_TO_ADDR
39248: GO 39216
39250: POP
39251: POP
// end ;
39252: GO 39182
39254: POP
39255: POP
// if not result then
39256: LD_VAR 0 2
39260: NOT
39261: IFFALSE 39265
// exit ;
39263: GO 39413
// mech := result [ 1 ] ;
39265: LD_ADDR_VAR 0 5
39269: PUSH
39270: LD_VAR 0 2
39274: PUSH
39275: LD_INT 1
39277: ARRAY
39278: ST_TO_ADDR
// if result > 1 then
39279: LD_VAR 0 2
39283: PUSH
39284: LD_INT 1
39286: GREATER
39287: IFFALSE 39399
// begin for i = 2 to result do
39289: LD_ADDR_VAR 0 3
39293: PUSH
39294: DOUBLE
39295: LD_INT 2
39297: DEC
39298: ST_TO_ADDR
39299: LD_VAR 0 2
39303: PUSH
39304: FOR_TO
39305: IFFALSE 39397
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39307: LD_ADDR_VAR 0 4
39311: PUSH
39312: LD_VAR 0 2
39316: PUSH
39317: LD_VAR 0 3
39321: ARRAY
39322: PPUSH
39323: LD_INT 3
39325: PPUSH
39326: CALL_OW 259
39330: PUSH
39331: LD_VAR 0 2
39335: PUSH
39336: LD_VAR 0 3
39340: ARRAY
39341: PPUSH
39342: CALL_OW 432
39346: MINUS
39347: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39348: LD_VAR 0 4
39352: PUSH
39353: LD_VAR 0 5
39357: PPUSH
39358: LD_INT 3
39360: PPUSH
39361: CALL_OW 259
39365: PUSH
39366: LD_VAR 0 5
39370: PPUSH
39371: CALL_OW 432
39375: MINUS
39376: GREATEREQUAL
39377: IFFALSE 39395
// mech := result [ i ] ;
39379: LD_ADDR_VAR 0 5
39383: PUSH
39384: LD_VAR 0 2
39388: PUSH
39389: LD_VAR 0 3
39393: ARRAY
39394: ST_TO_ADDR
// end ;
39395: GO 39304
39397: POP
39398: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39399: LD_VAR 0 1
39403: PPUSH
39404: LD_VAR 0 5
39408: PPUSH
39409: CALL_OW 135
// end ;
39413: LD_VAR 0 2
39417: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39418: LD_INT 0
39420: PPUSH
39421: PPUSH
39422: PPUSH
39423: PPUSH
39424: PPUSH
39425: PPUSH
39426: PPUSH
39427: PPUSH
39428: PPUSH
39429: PPUSH
39430: PPUSH
39431: PPUSH
39432: PPUSH
// result := [ ] ;
39433: LD_ADDR_VAR 0 7
39437: PUSH
39438: EMPTY
39439: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39440: LD_VAR 0 1
39444: PPUSH
39445: CALL_OW 266
39449: PUSH
39450: LD_INT 0
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: IN
39460: NOT
39461: IFFALSE 39465
// exit ;
39463: GO 41099
// if name then
39465: LD_VAR 0 3
39469: IFFALSE 39485
// SetBName ( base_dep , name ) ;
39471: LD_VAR 0 1
39475: PPUSH
39476: LD_VAR 0 3
39480: PPUSH
39481: CALL_OW 500
// base := GetBase ( base_dep ) ;
39485: LD_ADDR_VAR 0 15
39489: PUSH
39490: LD_VAR 0 1
39494: PPUSH
39495: CALL_OW 274
39499: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39500: LD_ADDR_VAR 0 16
39504: PUSH
39505: LD_VAR 0 1
39509: PPUSH
39510: CALL_OW 255
39514: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39515: LD_ADDR_VAR 0 17
39519: PUSH
39520: LD_VAR 0 1
39524: PPUSH
39525: CALL_OW 248
39529: ST_TO_ADDR
// if sources then
39530: LD_VAR 0 5
39534: IFFALSE 39581
// for i = 1 to 3 do
39536: LD_ADDR_VAR 0 8
39540: PUSH
39541: DOUBLE
39542: LD_INT 1
39544: DEC
39545: ST_TO_ADDR
39546: LD_INT 3
39548: PUSH
39549: FOR_TO
39550: IFFALSE 39579
// AddResourceType ( base , i , sources [ i ] ) ;
39552: LD_VAR 0 15
39556: PPUSH
39557: LD_VAR 0 8
39561: PPUSH
39562: LD_VAR 0 5
39566: PUSH
39567: LD_VAR 0 8
39571: ARRAY
39572: PPUSH
39573: CALL_OW 276
39577: GO 39549
39579: POP
39580: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39581: LD_ADDR_VAR 0 18
39585: PUSH
39586: LD_VAR 0 15
39590: PPUSH
39591: LD_VAR 0 2
39595: PPUSH
39596: LD_INT 1
39598: PPUSH
39599: CALL 38842 0 3
39603: ST_TO_ADDR
// InitHc ;
39604: CALL_OW 19
// InitUc ;
39608: CALL_OW 18
// uc_side := side ;
39612: LD_ADDR_OWVAR 20
39616: PUSH
39617: LD_VAR 0 16
39621: ST_TO_ADDR
// uc_nation := nation ;
39622: LD_ADDR_OWVAR 21
39626: PUSH
39627: LD_VAR 0 17
39631: ST_TO_ADDR
// if buildings then
39632: LD_VAR 0 18
39636: IFFALSE 40958
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39638: LD_ADDR_VAR 0 19
39642: PUSH
39643: LD_VAR 0 18
39647: PPUSH
39648: LD_INT 2
39650: PUSH
39651: LD_INT 30
39653: PUSH
39654: LD_INT 29
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 30
39663: PUSH
39664: LD_INT 30
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: LIST
39675: PPUSH
39676: CALL_OW 72
39680: ST_TO_ADDR
// if tmp then
39681: LD_VAR 0 19
39685: IFFALSE 39733
// for i in tmp do
39687: LD_ADDR_VAR 0 8
39691: PUSH
39692: LD_VAR 0 19
39696: PUSH
39697: FOR_IN
39698: IFFALSE 39731
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39700: LD_VAR 0 8
39704: PPUSH
39705: CALL_OW 250
39709: PPUSH
39710: LD_VAR 0 8
39714: PPUSH
39715: CALL_OW 251
39719: PPUSH
39720: LD_VAR 0 16
39724: PPUSH
39725: CALL_OW 441
39729: GO 39697
39731: POP
39732: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39733: LD_VAR 0 18
39737: PPUSH
39738: LD_INT 2
39740: PUSH
39741: LD_INT 30
39743: PUSH
39744: LD_INT 32
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 30
39753: PUSH
39754: LD_INT 33
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: LIST
39765: PPUSH
39766: CALL_OW 72
39770: IFFALSE 39858
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39772: LD_ADDR_VAR 0 8
39776: PUSH
39777: LD_VAR 0 18
39781: PPUSH
39782: LD_INT 2
39784: PUSH
39785: LD_INT 30
39787: PUSH
39788: LD_INT 32
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 30
39797: PUSH
39798: LD_INT 33
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: PPUSH
39810: CALL_OW 72
39814: PUSH
39815: FOR_IN
39816: IFFALSE 39856
// begin if not GetBWeapon ( i ) then
39818: LD_VAR 0 8
39822: PPUSH
39823: CALL_OW 269
39827: NOT
39828: IFFALSE 39854
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39830: LD_VAR 0 8
39834: PPUSH
39835: LD_VAR 0 8
39839: PPUSH
39840: LD_VAR 0 2
39844: PPUSH
39845: CALL 41104 0 2
39849: PPUSH
39850: CALL_OW 431
// end ;
39854: GO 39815
39856: POP
39857: POP
// end ; for i = 1 to personel do
39858: LD_ADDR_VAR 0 8
39862: PUSH
39863: DOUBLE
39864: LD_INT 1
39866: DEC
39867: ST_TO_ADDR
39868: LD_VAR 0 6
39872: PUSH
39873: FOR_TO
39874: IFFALSE 40938
// begin if i > 4 then
39876: LD_VAR 0 8
39880: PUSH
39881: LD_INT 4
39883: GREATER
39884: IFFALSE 39888
// break ;
39886: GO 40938
// case i of 1 :
39888: LD_VAR 0 8
39892: PUSH
39893: LD_INT 1
39895: DOUBLE
39896: EQUAL
39897: IFTRUE 39901
39899: GO 39981
39901: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39902: LD_ADDR_VAR 0 12
39906: PUSH
39907: LD_VAR 0 18
39911: PPUSH
39912: LD_INT 22
39914: PUSH
39915: LD_VAR 0 16
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 58
39926: PUSH
39927: EMPTY
39928: LIST
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: LD_INT 30
39935: PUSH
39936: LD_INT 32
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 30
39945: PUSH
39946: LD_INT 4
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 30
39955: PUSH
39956: LD_INT 5
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: LIST
39973: PPUSH
39974: CALL_OW 72
39978: ST_TO_ADDR
39979: GO 40203
39981: LD_INT 2
39983: DOUBLE
39984: EQUAL
39985: IFTRUE 39989
39987: GO 40051
39989: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39990: LD_ADDR_VAR 0 12
39994: PUSH
39995: LD_VAR 0 18
39999: PPUSH
40000: LD_INT 22
40002: PUSH
40003: LD_VAR 0 16
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: LD_INT 30
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 30
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: LIST
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PPUSH
40044: CALL_OW 72
40048: ST_TO_ADDR
40049: GO 40203
40051: LD_INT 3
40053: DOUBLE
40054: EQUAL
40055: IFTRUE 40059
40057: GO 40121
40059: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40060: LD_ADDR_VAR 0 12
40064: PUSH
40065: LD_VAR 0 18
40069: PPUSH
40070: LD_INT 22
40072: PUSH
40073: LD_VAR 0 16
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 2
40084: PUSH
40085: LD_INT 30
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 30
40097: PUSH
40098: LD_INT 3
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PPUSH
40114: CALL_OW 72
40118: ST_TO_ADDR
40119: GO 40203
40121: LD_INT 4
40123: DOUBLE
40124: EQUAL
40125: IFTRUE 40129
40127: GO 40202
40129: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40130: LD_ADDR_VAR 0 12
40134: PUSH
40135: LD_VAR 0 18
40139: PPUSH
40140: LD_INT 22
40142: PUSH
40143: LD_VAR 0 16
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 2
40154: PUSH
40155: LD_INT 30
40157: PUSH
40158: LD_INT 6
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 30
40167: PUSH
40168: LD_INT 7
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 30
40177: PUSH
40178: LD_INT 8
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PPUSH
40195: CALL_OW 72
40199: ST_TO_ADDR
40200: GO 40203
40202: POP
// if i = 1 then
40203: LD_VAR 0 8
40207: PUSH
40208: LD_INT 1
40210: EQUAL
40211: IFFALSE 40322
// begin tmp := [ ] ;
40213: LD_ADDR_VAR 0 19
40217: PUSH
40218: EMPTY
40219: ST_TO_ADDR
// for j in f do
40220: LD_ADDR_VAR 0 9
40224: PUSH
40225: LD_VAR 0 12
40229: PUSH
40230: FOR_IN
40231: IFFALSE 40304
// if GetBType ( j ) = b_bunker then
40233: LD_VAR 0 9
40237: PPUSH
40238: CALL_OW 266
40242: PUSH
40243: LD_INT 32
40245: EQUAL
40246: IFFALSE 40273
// tmp := Insert ( tmp , 1 , j ) else
40248: LD_ADDR_VAR 0 19
40252: PUSH
40253: LD_VAR 0 19
40257: PPUSH
40258: LD_INT 1
40260: PPUSH
40261: LD_VAR 0 9
40265: PPUSH
40266: CALL_OW 2
40270: ST_TO_ADDR
40271: GO 40302
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40273: LD_ADDR_VAR 0 19
40277: PUSH
40278: LD_VAR 0 19
40282: PPUSH
40283: LD_VAR 0 19
40287: PUSH
40288: LD_INT 1
40290: PLUS
40291: PPUSH
40292: LD_VAR 0 9
40296: PPUSH
40297: CALL_OW 2
40301: ST_TO_ADDR
40302: GO 40230
40304: POP
40305: POP
// if tmp then
40306: LD_VAR 0 19
40310: IFFALSE 40322
// f := tmp ;
40312: LD_ADDR_VAR 0 12
40316: PUSH
40317: LD_VAR 0 19
40321: ST_TO_ADDR
// end ; x := personel [ i ] ;
40322: LD_ADDR_VAR 0 13
40326: PUSH
40327: LD_VAR 0 6
40331: PUSH
40332: LD_VAR 0 8
40336: ARRAY
40337: ST_TO_ADDR
// if x = - 1 then
40338: LD_VAR 0 13
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: EQUAL
40347: IFFALSE 40556
// begin for j in f do
40349: LD_ADDR_VAR 0 9
40353: PUSH
40354: LD_VAR 0 12
40358: PUSH
40359: FOR_IN
40360: IFFALSE 40552
// repeat InitHc ;
40362: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40366: LD_VAR 0 9
40370: PPUSH
40371: CALL_OW 266
40375: PUSH
40376: LD_INT 5
40378: EQUAL
40379: IFFALSE 40449
// begin if UnitsInside ( j ) < 3 then
40381: LD_VAR 0 9
40385: PPUSH
40386: CALL_OW 313
40390: PUSH
40391: LD_INT 3
40393: LESS
40394: IFFALSE 40430
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40396: LD_INT 0
40398: PPUSH
40399: LD_INT 5
40401: PUSH
40402: LD_INT 8
40404: PUSH
40405: LD_INT 9
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: LIST
40412: PUSH
40413: LD_VAR 0 17
40417: ARRAY
40418: PPUSH
40419: LD_VAR 0 4
40423: PPUSH
40424: CALL_OW 380
40428: GO 40447
// PrepareHuman ( false , i , skill ) ;
40430: LD_INT 0
40432: PPUSH
40433: LD_VAR 0 8
40437: PPUSH
40438: LD_VAR 0 4
40442: PPUSH
40443: CALL_OW 380
// end else
40447: GO 40466
// PrepareHuman ( false , i , skill ) ;
40449: LD_INT 0
40451: PPUSH
40452: LD_VAR 0 8
40456: PPUSH
40457: LD_VAR 0 4
40461: PPUSH
40462: CALL_OW 380
// un := CreateHuman ;
40466: LD_ADDR_VAR 0 14
40470: PUSH
40471: CALL_OW 44
40475: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40476: LD_ADDR_VAR 0 7
40480: PUSH
40481: LD_VAR 0 7
40485: PPUSH
40486: LD_INT 1
40488: PPUSH
40489: LD_VAR 0 14
40493: PPUSH
40494: CALL_OW 2
40498: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40499: LD_VAR 0 14
40503: PPUSH
40504: LD_VAR 0 9
40508: PPUSH
40509: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40513: LD_VAR 0 9
40517: PPUSH
40518: CALL_OW 313
40522: PUSH
40523: LD_INT 6
40525: EQUAL
40526: PUSH
40527: LD_VAR 0 9
40531: PPUSH
40532: CALL_OW 266
40536: PUSH
40537: LD_INT 32
40539: PUSH
40540: LD_INT 31
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: IN
40547: OR
40548: IFFALSE 40362
40550: GO 40359
40552: POP
40553: POP
// end else
40554: GO 40936
// for j = 1 to x do
40556: LD_ADDR_VAR 0 9
40560: PUSH
40561: DOUBLE
40562: LD_INT 1
40564: DEC
40565: ST_TO_ADDR
40566: LD_VAR 0 13
40570: PUSH
40571: FOR_TO
40572: IFFALSE 40934
// begin InitHc ;
40574: CALL_OW 19
// if not f then
40578: LD_VAR 0 12
40582: NOT
40583: IFFALSE 40672
// begin PrepareHuman ( false , i , skill ) ;
40585: LD_INT 0
40587: PPUSH
40588: LD_VAR 0 8
40592: PPUSH
40593: LD_VAR 0 4
40597: PPUSH
40598: CALL_OW 380
// un := CreateHuman ;
40602: LD_ADDR_VAR 0 14
40606: PUSH
40607: CALL_OW 44
40611: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40612: LD_ADDR_VAR 0 7
40616: PUSH
40617: LD_VAR 0 7
40621: PPUSH
40622: LD_INT 1
40624: PPUSH
40625: LD_VAR 0 14
40629: PPUSH
40630: CALL_OW 2
40634: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40635: LD_VAR 0 14
40639: PPUSH
40640: LD_VAR 0 1
40644: PPUSH
40645: CALL_OW 250
40649: PPUSH
40650: LD_VAR 0 1
40654: PPUSH
40655: CALL_OW 251
40659: PPUSH
40660: LD_INT 10
40662: PPUSH
40663: LD_INT 0
40665: PPUSH
40666: CALL_OW 50
// continue ;
40670: GO 40571
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40672: LD_VAR 0 12
40676: PUSH
40677: LD_INT 1
40679: ARRAY
40680: PPUSH
40681: CALL_OW 313
40685: PUSH
40686: LD_VAR 0 12
40690: PUSH
40691: LD_INT 1
40693: ARRAY
40694: PPUSH
40695: CALL_OW 266
40699: PUSH
40700: LD_INT 32
40702: PUSH
40703: LD_INT 31
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: IN
40710: AND
40711: PUSH
40712: LD_VAR 0 12
40716: PUSH
40717: LD_INT 1
40719: ARRAY
40720: PPUSH
40721: CALL_OW 313
40725: PUSH
40726: LD_INT 6
40728: EQUAL
40729: OR
40730: IFFALSE 40750
// f := Delete ( f , 1 ) ;
40732: LD_ADDR_VAR 0 12
40736: PUSH
40737: LD_VAR 0 12
40741: PPUSH
40742: LD_INT 1
40744: PPUSH
40745: CALL_OW 3
40749: ST_TO_ADDR
// if not f then
40750: LD_VAR 0 12
40754: NOT
40755: IFFALSE 40773
// begin x := x + 2 ;
40757: LD_ADDR_VAR 0 13
40761: PUSH
40762: LD_VAR 0 13
40766: PUSH
40767: LD_INT 2
40769: PLUS
40770: ST_TO_ADDR
// continue ;
40771: GO 40571
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40773: LD_VAR 0 12
40777: PUSH
40778: LD_INT 1
40780: ARRAY
40781: PPUSH
40782: CALL_OW 266
40786: PUSH
40787: LD_INT 5
40789: EQUAL
40790: IFFALSE 40864
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40792: LD_VAR 0 12
40796: PUSH
40797: LD_INT 1
40799: ARRAY
40800: PPUSH
40801: CALL_OW 313
40805: PUSH
40806: LD_INT 3
40808: LESS
40809: IFFALSE 40845
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40811: LD_INT 0
40813: PPUSH
40814: LD_INT 5
40816: PUSH
40817: LD_INT 8
40819: PUSH
40820: LD_INT 9
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: LIST
40827: PUSH
40828: LD_VAR 0 17
40832: ARRAY
40833: PPUSH
40834: LD_VAR 0 4
40838: PPUSH
40839: CALL_OW 380
40843: GO 40862
// PrepareHuman ( false , i , skill ) ;
40845: LD_INT 0
40847: PPUSH
40848: LD_VAR 0 8
40852: PPUSH
40853: LD_VAR 0 4
40857: PPUSH
40858: CALL_OW 380
// end else
40862: GO 40881
// PrepareHuman ( false , i , skill ) ;
40864: LD_INT 0
40866: PPUSH
40867: LD_VAR 0 8
40871: PPUSH
40872: LD_VAR 0 4
40876: PPUSH
40877: CALL_OW 380
// un := CreateHuman ;
40881: LD_ADDR_VAR 0 14
40885: PUSH
40886: CALL_OW 44
40890: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40891: LD_ADDR_VAR 0 7
40895: PUSH
40896: LD_VAR 0 7
40900: PPUSH
40901: LD_INT 1
40903: PPUSH
40904: LD_VAR 0 14
40908: PPUSH
40909: CALL_OW 2
40913: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40914: LD_VAR 0 14
40918: PPUSH
40919: LD_VAR 0 12
40923: PUSH
40924: LD_INT 1
40926: ARRAY
40927: PPUSH
40928: CALL_OW 52
// end ;
40932: GO 40571
40934: POP
40935: POP
// end ;
40936: GO 39873
40938: POP
40939: POP
// result := result ^ buildings ;
40940: LD_ADDR_VAR 0 7
40944: PUSH
40945: LD_VAR 0 7
40949: PUSH
40950: LD_VAR 0 18
40954: ADD
40955: ST_TO_ADDR
// end else
40956: GO 41099
// begin for i = 1 to personel do
40958: LD_ADDR_VAR 0 8
40962: PUSH
40963: DOUBLE
40964: LD_INT 1
40966: DEC
40967: ST_TO_ADDR
40968: LD_VAR 0 6
40972: PUSH
40973: FOR_TO
40974: IFFALSE 41097
// begin if i > 4 then
40976: LD_VAR 0 8
40980: PUSH
40981: LD_INT 4
40983: GREATER
40984: IFFALSE 40988
// break ;
40986: GO 41097
// x := personel [ i ] ;
40988: LD_ADDR_VAR 0 13
40992: PUSH
40993: LD_VAR 0 6
40997: PUSH
40998: LD_VAR 0 8
41002: ARRAY
41003: ST_TO_ADDR
// if x = - 1 then
41004: LD_VAR 0 13
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: EQUAL
41013: IFFALSE 41017
// continue ;
41015: GO 40973
// PrepareHuman ( false , i , skill ) ;
41017: LD_INT 0
41019: PPUSH
41020: LD_VAR 0 8
41024: PPUSH
41025: LD_VAR 0 4
41029: PPUSH
41030: CALL_OW 380
// un := CreateHuman ;
41034: LD_ADDR_VAR 0 14
41038: PUSH
41039: CALL_OW 44
41043: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41044: LD_VAR 0 14
41048: PPUSH
41049: LD_VAR 0 1
41053: PPUSH
41054: CALL_OW 250
41058: PPUSH
41059: LD_VAR 0 1
41063: PPUSH
41064: CALL_OW 251
41068: PPUSH
41069: LD_INT 10
41071: PPUSH
41072: LD_INT 0
41074: PPUSH
41075: CALL_OW 50
// result := result ^ un ;
41079: LD_ADDR_VAR 0 7
41083: PUSH
41084: LD_VAR 0 7
41088: PUSH
41089: LD_VAR 0 14
41093: ADD
41094: ST_TO_ADDR
// end ;
41095: GO 40973
41097: POP
41098: POP
// end ; end ;
41099: LD_VAR 0 7
41103: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41104: LD_INT 0
41106: PPUSH
41107: PPUSH
41108: PPUSH
41109: PPUSH
41110: PPUSH
41111: PPUSH
41112: PPUSH
41113: PPUSH
41114: PPUSH
41115: PPUSH
41116: PPUSH
41117: PPUSH
41118: PPUSH
41119: PPUSH
41120: PPUSH
41121: PPUSH
// result := false ;
41122: LD_ADDR_VAR 0 3
41126: PUSH
41127: LD_INT 0
41129: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41130: LD_VAR 0 1
41134: NOT
41135: PUSH
41136: LD_VAR 0 1
41140: PPUSH
41141: CALL_OW 266
41145: PUSH
41146: LD_INT 32
41148: PUSH
41149: LD_INT 33
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: IN
41156: NOT
41157: OR
41158: IFFALSE 41162
// exit ;
41160: GO 42271
// nat := GetNation ( tower ) ;
41162: LD_ADDR_VAR 0 12
41166: PUSH
41167: LD_VAR 0 1
41171: PPUSH
41172: CALL_OW 248
41176: ST_TO_ADDR
// side := GetSide ( tower ) ;
41177: LD_ADDR_VAR 0 16
41181: PUSH
41182: LD_VAR 0 1
41186: PPUSH
41187: CALL_OW 255
41191: ST_TO_ADDR
// x := GetX ( tower ) ;
41192: LD_ADDR_VAR 0 10
41196: PUSH
41197: LD_VAR 0 1
41201: PPUSH
41202: CALL_OW 250
41206: ST_TO_ADDR
// y := GetY ( tower ) ;
41207: LD_ADDR_VAR 0 11
41211: PUSH
41212: LD_VAR 0 1
41216: PPUSH
41217: CALL_OW 251
41221: ST_TO_ADDR
// if not x or not y then
41222: LD_VAR 0 10
41226: NOT
41227: PUSH
41228: LD_VAR 0 11
41232: NOT
41233: OR
41234: IFFALSE 41238
// exit ;
41236: GO 42271
// weapon := 0 ;
41238: LD_ADDR_VAR 0 18
41242: PUSH
41243: LD_INT 0
41245: ST_TO_ADDR
// fac_list := [ ] ;
41246: LD_ADDR_VAR 0 17
41250: PUSH
41251: EMPTY
41252: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41253: LD_ADDR_VAR 0 6
41257: PUSH
41258: LD_VAR 0 1
41262: PPUSH
41263: CALL_OW 274
41267: PPUSH
41268: LD_VAR 0 2
41272: PPUSH
41273: LD_INT 0
41275: PPUSH
41276: CALL 38842 0 3
41280: PPUSH
41281: LD_INT 30
41283: PUSH
41284: LD_INT 3
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PPUSH
41291: CALL_OW 72
41295: ST_TO_ADDR
// if not factories then
41296: LD_VAR 0 6
41300: NOT
41301: IFFALSE 41305
// exit ;
41303: GO 42271
// for i in factories do
41305: LD_ADDR_VAR 0 8
41309: PUSH
41310: LD_VAR 0 6
41314: PUSH
41315: FOR_IN
41316: IFFALSE 41341
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41318: LD_ADDR_VAR 0 17
41322: PUSH
41323: LD_VAR 0 17
41327: PUSH
41328: LD_VAR 0 8
41332: PPUSH
41333: CALL_OW 478
41337: UNION
41338: ST_TO_ADDR
41339: GO 41315
41341: POP
41342: POP
// if not fac_list then
41343: LD_VAR 0 17
41347: NOT
41348: IFFALSE 41352
// exit ;
41350: GO 42271
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41352: LD_ADDR_VAR 0 5
41356: PUSH
41357: LD_INT 4
41359: PUSH
41360: LD_INT 5
41362: PUSH
41363: LD_INT 9
41365: PUSH
41366: LD_INT 10
41368: PUSH
41369: LD_INT 6
41371: PUSH
41372: LD_INT 7
41374: PUSH
41375: LD_INT 11
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 27
41389: PUSH
41390: LD_INT 28
41392: PUSH
41393: LD_INT 26
41395: PUSH
41396: LD_INT 30
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 43
41407: PUSH
41408: LD_INT 44
41410: PUSH
41411: LD_INT 46
41413: PUSH
41414: LD_INT 45
41416: PUSH
41417: LD_INT 47
41419: PUSH
41420: LD_INT 49
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: LIST
41435: PUSH
41436: LD_VAR 0 12
41440: ARRAY
41441: ST_TO_ADDR
// list := list isect fac_list ;
41442: LD_ADDR_VAR 0 5
41446: PUSH
41447: LD_VAR 0 5
41451: PUSH
41452: LD_VAR 0 17
41456: ISECT
41457: ST_TO_ADDR
// if not list then
41458: LD_VAR 0 5
41462: NOT
41463: IFFALSE 41467
// exit ;
41465: GO 42271
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41467: LD_VAR 0 12
41471: PUSH
41472: LD_INT 3
41474: EQUAL
41475: PUSH
41476: LD_INT 49
41478: PUSH
41479: LD_VAR 0 5
41483: IN
41484: AND
41485: PUSH
41486: LD_INT 31
41488: PPUSH
41489: LD_VAR 0 16
41493: PPUSH
41494: CALL_OW 321
41498: PUSH
41499: LD_INT 2
41501: EQUAL
41502: AND
41503: IFFALSE 41563
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41505: LD_INT 22
41507: PUSH
41508: LD_VAR 0 16
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 35
41519: PUSH
41520: LD_INT 49
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 91
41529: PUSH
41530: LD_VAR 0 1
41534: PUSH
41535: LD_INT 10
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: LIST
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: LIST
41547: PPUSH
41548: CALL_OW 69
41552: NOT
41553: IFFALSE 41563
// weapon := ru_time_lapser ;
41555: LD_ADDR_VAR 0 18
41559: PUSH
41560: LD_INT 49
41562: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41563: LD_VAR 0 12
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: IN
41578: PUSH
41579: LD_INT 11
41581: PUSH
41582: LD_VAR 0 5
41586: IN
41587: PUSH
41588: LD_INT 30
41590: PUSH
41591: LD_VAR 0 5
41595: IN
41596: OR
41597: AND
41598: PUSH
41599: LD_INT 6
41601: PPUSH
41602: LD_VAR 0 16
41606: PPUSH
41607: CALL_OW 321
41611: PUSH
41612: LD_INT 2
41614: EQUAL
41615: AND
41616: IFFALSE 41781
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41618: LD_INT 22
41620: PUSH
41621: LD_VAR 0 16
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 2
41632: PUSH
41633: LD_INT 35
41635: PUSH
41636: LD_INT 11
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 35
41645: PUSH
41646: LD_INT 30
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 91
41660: PUSH
41661: LD_VAR 0 1
41665: PUSH
41666: LD_INT 18
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: LIST
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: LIST
41678: PPUSH
41679: CALL_OW 69
41683: NOT
41684: PUSH
41685: LD_INT 22
41687: PUSH
41688: LD_VAR 0 16
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: LD_INT 30
41702: PUSH
41703: LD_INT 32
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 30
41712: PUSH
41713: LD_INT 33
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 91
41727: PUSH
41728: LD_VAR 0 1
41732: PUSH
41733: LD_INT 12
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: LIST
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: LIST
41745: PUSH
41746: EMPTY
41747: LIST
41748: PPUSH
41749: CALL_OW 69
41753: PUSH
41754: LD_INT 2
41756: GREATER
41757: AND
41758: IFFALSE 41781
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41760: LD_ADDR_VAR 0 18
41764: PUSH
41765: LD_INT 11
41767: PUSH
41768: LD_INT 30
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_VAR 0 12
41779: ARRAY
41780: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41781: LD_VAR 0 18
41785: NOT
41786: PUSH
41787: LD_INT 40
41789: PPUSH
41790: LD_VAR 0 16
41794: PPUSH
41795: CALL_OW 321
41799: PUSH
41800: LD_INT 2
41802: EQUAL
41803: AND
41804: PUSH
41805: LD_INT 7
41807: PUSH
41808: LD_VAR 0 5
41812: IN
41813: PUSH
41814: LD_INT 28
41816: PUSH
41817: LD_VAR 0 5
41821: IN
41822: OR
41823: PUSH
41824: LD_INT 45
41826: PUSH
41827: LD_VAR 0 5
41831: IN
41832: OR
41833: AND
41834: IFFALSE 42088
// begin hex := GetHexInfo ( x , y ) ;
41836: LD_ADDR_VAR 0 4
41840: PUSH
41841: LD_VAR 0 10
41845: PPUSH
41846: LD_VAR 0 11
41850: PPUSH
41851: CALL_OW 546
41855: ST_TO_ADDR
// if hex [ 1 ] then
41856: LD_VAR 0 4
41860: PUSH
41861: LD_INT 1
41863: ARRAY
41864: IFFALSE 41868
// exit ;
41866: GO 42271
// height := hex [ 2 ] ;
41868: LD_ADDR_VAR 0 15
41872: PUSH
41873: LD_VAR 0 4
41877: PUSH
41878: LD_INT 2
41880: ARRAY
41881: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41882: LD_ADDR_VAR 0 14
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 2
41892: PUSH
41893: LD_INT 3
41895: PUSH
41896: LD_INT 5
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: ST_TO_ADDR
// for i in tmp do
41905: LD_ADDR_VAR 0 8
41909: PUSH
41910: LD_VAR 0 14
41914: PUSH
41915: FOR_IN
41916: IFFALSE 42086
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41918: LD_ADDR_VAR 0 9
41922: PUSH
41923: LD_VAR 0 10
41927: PPUSH
41928: LD_VAR 0 8
41932: PPUSH
41933: LD_INT 5
41935: PPUSH
41936: CALL_OW 272
41940: PUSH
41941: LD_VAR 0 11
41945: PPUSH
41946: LD_VAR 0 8
41950: PPUSH
41951: LD_INT 5
41953: PPUSH
41954: CALL_OW 273
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41963: LD_VAR 0 9
41967: PUSH
41968: LD_INT 1
41970: ARRAY
41971: PPUSH
41972: LD_VAR 0 9
41976: PUSH
41977: LD_INT 2
41979: ARRAY
41980: PPUSH
41981: CALL_OW 488
41985: IFFALSE 42084
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41987: LD_ADDR_VAR 0 4
41991: PUSH
41992: LD_VAR 0 9
41996: PUSH
41997: LD_INT 1
41999: ARRAY
42000: PPUSH
42001: LD_VAR 0 9
42005: PUSH
42006: LD_INT 2
42008: ARRAY
42009: PPUSH
42010: CALL_OW 546
42014: ST_TO_ADDR
// if hex [ 1 ] then
42015: LD_VAR 0 4
42019: PUSH
42020: LD_INT 1
42022: ARRAY
42023: IFFALSE 42027
// continue ;
42025: GO 41915
// h := hex [ 2 ] ;
42027: LD_ADDR_VAR 0 13
42031: PUSH
42032: LD_VAR 0 4
42036: PUSH
42037: LD_INT 2
42039: ARRAY
42040: ST_TO_ADDR
// if h + 7 < height then
42041: LD_VAR 0 13
42045: PUSH
42046: LD_INT 7
42048: PLUS
42049: PUSH
42050: LD_VAR 0 15
42054: LESS
42055: IFFALSE 42084
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42057: LD_ADDR_VAR 0 18
42061: PUSH
42062: LD_INT 7
42064: PUSH
42065: LD_INT 28
42067: PUSH
42068: LD_INT 45
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: PUSH
42076: LD_VAR 0 12
42080: ARRAY
42081: ST_TO_ADDR
// break ;
42082: GO 42086
// end ; end ; end ;
42084: GO 41915
42086: POP
42087: POP
// end ; if not weapon then
42088: LD_VAR 0 18
42092: NOT
42093: IFFALSE 42153
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42095: LD_ADDR_VAR 0 5
42099: PUSH
42100: LD_VAR 0 5
42104: PUSH
42105: LD_INT 11
42107: PUSH
42108: LD_INT 30
42110: PUSH
42111: LD_INT 49
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: LIST
42118: DIFF
42119: ST_TO_ADDR
// if not list then
42120: LD_VAR 0 5
42124: NOT
42125: IFFALSE 42129
// exit ;
42127: GO 42271
// weapon := list [ rand ( 1 , list ) ] ;
42129: LD_ADDR_VAR 0 18
42133: PUSH
42134: LD_VAR 0 5
42138: PUSH
42139: LD_INT 1
42141: PPUSH
42142: LD_VAR 0 5
42146: PPUSH
42147: CALL_OW 12
42151: ARRAY
42152: ST_TO_ADDR
// end ; if weapon then
42153: LD_VAR 0 18
42157: IFFALSE 42271
// begin tmp := CostOfWeapon ( weapon ) ;
42159: LD_ADDR_VAR 0 14
42163: PUSH
42164: LD_VAR 0 18
42168: PPUSH
42169: CALL_OW 451
42173: ST_TO_ADDR
// j := GetBase ( tower ) ;
42174: LD_ADDR_VAR 0 9
42178: PUSH
42179: LD_VAR 0 1
42183: PPUSH
42184: CALL_OW 274
42188: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42189: LD_VAR 0 9
42193: PPUSH
42194: LD_INT 1
42196: PPUSH
42197: CALL_OW 275
42201: PUSH
42202: LD_VAR 0 14
42206: PUSH
42207: LD_INT 1
42209: ARRAY
42210: GREATEREQUAL
42211: PUSH
42212: LD_VAR 0 9
42216: PPUSH
42217: LD_INT 2
42219: PPUSH
42220: CALL_OW 275
42224: PUSH
42225: LD_VAR 0 14
42229: PUSH
42230: LD_INT 2
42232: ARRAY
42233: GREATEREQUAL
42234: AND
42235: PUSH
42236: LD_VAR 0 9
42240: PPUSH
42241: LD_INT 3
42243: PPUSH
42244: CALL_OW 275
42248: PUSH
42249: LD_VAR 0 14
42253: PUSH
42254: LD_INT 3
42256: ARRAY
42257: GREATEREQUAL
42258: AND
42259: IFFALSE 42271
// result := weapon ;
42261: LD_ADDR_VAR 0 3
42265: PUSH
42266: LD_VAR 0 18
42270: ST_TO_ADDR
// end ; end ;
42271: LD_VAR 0 3
42275: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42276: LD_INT 0
42278: PPUSH
42279: PPUSH
// result := true ;
42280: LD_ADDR_VAR 0 3
42284: PUSH
42285: LD_INT 1
42287: ST_TO_ADDR
// if array1 = array2 then
42288: LD_VAR 0 1
42292: PUSH
42293: LD_VAR 0 2
42297: EQUAL
42298: IFFALSE 42358
// begin for i = 1 to array1 do
42300: LD_ADDR_VAR 0 4
42304: PUSH
42305: DOUBLE
42306: LD_INT 1
42308: DEC
42309: ST_TO_ADDR
42310: LD_VAR 0 1
42314: PUSH
42315: FOR_TO
42316: IFFALSE 42354
// if array1 [ i ] <> array2 [ i ] then
42318: LD_VAR 0 1
42322: PUSH
42323: LD_VAR 0 4
42327: ARRAY
42328: PUSH
42329: LD_VAR 0 2
42333: PUSH
42334: LD_VAR 0 4
42338: ARRAY
42339: NONEQUAL
42340: IFFALSE 42352
// begin result := false ;
42342: LD_ADDR_VAR 0 3
42346: PUSH
42347: LD_INT 0
42349: ST_TO_ADDR
// break ;
42350: GO 42354
// end ;
42352: GO 42315
42354: POP
42355: POP
// end else
42356: GO 42366
// result := false ;
42358: LD_ADDR_VAR 0 3
42362: PUSH
42363: LD_INT 0
42365: ST_TO_ADDR
// end ;
42366: LD_VAR 0 3
42370: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42371: LD_INT 0
42373: PPUSH
42374: PPUSH
// if not array1 or not array2 then
42375: LD_VAR 0 1
42379: NOT
42380: PUSH
42381: LD_VAR 0 2
42385: NOT
42386: OR
42387: IFFALSE 42391
// exit ;
42389: GO 42455
// result := true ;
42391: LD_ADDR_VAR 0 3
42395: PUSH
42396: LD_INT 1
42398: ST_TO_ADDR
// for i = 1 to array1 do
42399: LD_ADDR_VAR 0 4
42403: PUSH
42404: DOUBLE
42405: LD_INT 1
42407: DEC
42408: ST_TO_ADDR
42409: LD_VAR 0 1
42413: PUSH
42414: FOR_TO
42415: IFFALSE 42453
// if array1 [ i ] <> array2 [ i ] then
42417: LD_VAR 0 1
42421: PUSH
42422: LD_VAR 0 4
42426: ARRAY
42427: PUSH
42428: LD_VAR 0 2
42432: PUSH
42433: LD_VAR 0 4
42437: ARRAY
42438: NONEQUAL
42439: IFFALSE 42451
// begin result := false ;
42441: LD_ADDR_VAR 0 3
42445: PUSH
42446: LD_INT 0
42448: ST_TO_ADDR
// break ;
42449: GO 42453
// end ;
42451: GO 42414
42453: POP
42454: POP
// end ;
42455: LD_VAR 0 3
42459: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42460: LD_INT 0
42462: PPUSH
42463: PPUSH
42464: PPUSH
// pom := GetBase ( fac ) ;
42465: LD_ADDR_VAR 0 5
42469: PUSH
42470: LD_VAR 0 1
42474: PPUSH
42475: CALL_OW 274
42479: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42480: LD_ADDR_VAR 0 4
42484: PUSH
42485: LD_VAR 0 2
42489: PUSH
42490: LD_INT 1
42492: ARRAY
42493: PPUSH
42494: LD_VAR 0 2
42498: PUSH
42499: LD_INT 2
42501: ARRAY
42502: PPUSH
42503: LD_VAR 0 2
42507: PUSH
42508: LD_INT 3
42510: ARRAY
42511: PPUSH
42512: LD_VAR 0 2
42516: PUSH
42517: LD_INT 4
42519: ARRAY
42520: PPUSH
42521: CALL_OW 449
42525: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42526: LD_ADDR_VAR 0 3
42530: PUSH
42531: LD_VAR 0 5
42535: PPUSH
42536: LD_INT 1
42538: PPUSH
42539: CALL_OW 275
42543: PUSH
42544: LD_VAR 0 4
42548: PUSH
42549: LD_INT 1
42551: ARRAY
42552: GREATEREQUAL
42553: PUSH
42554: LD_VAR 0 5
42558: PPUSH
42559: LD_INT 2
42561: PPUSH
42562: CALL_OW 275
42566: PUSH
42567: LD_VAR 0 4
42571: PUSH
42572: LD_INT 2
42574: ARRAY
42575: GREATEREQUAL
42576: AND
42577: PUSH
42578: LD_VAR 0 5
42582: PPUSH
42583: LD_INT 3
42585: PPUSH
42586: CALL_OW 275
42590: PUSH
42591: LD_VAR 0 4
42595: PUSH
42596: LD_INT 3
42598: ARRAY
42599: GREATEREQUAL
42600: AND
42601: ST_TO_ADDR
// end ;
42602: LD_VAR 0 3
42606: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42607: LD_INT 0
42609: PPUSH
42610: PPUSH
42611: PPUSH
42612: PPUSH
// pom := GetBase ( building ) ;
42613: LD_ADDR_VAR 0 3
42617: PUSH
42618: LD_VAR 0 1
42622: PPUSH
42623: CALL_OW 274
42627: ST_TO_ADDR
// if not pom then
42628: LD_VAR 0 3
42632: NOT
42633: IFFALSE 42637
// exit ;
42635: GO 42807
// btype := GetBType ( building ) ;
42637: LD_ADDR_VAR 0 5
42641: PUSH
42642: LD_VAR 0 1
42646: PPUSH
42647: CALL_OW 266
42651: ST_TO_ADDR
// if btype = b_armoury then
42652: LD_VAR 0 5
42656: PUSH
42657: LD_INT 4
42659: EQUAL
42660: IFFALSE 42670
// btype := b_barracks ;
42662: LD_ADDR_VAR 0 5
42666: PUSH
42667: LD_INT 5
42669: ST_TO_ADDR
// if btype = b_depot then
42670: LD_VAR 0 5
42674: PUSH
42675: LD_INT 0
42677: EQUAL
42678: IFFALSE 42688
// btype := b_warehouse ;
42680: LD_ADDR_VAR 0 5
42684: PUSH
42685: LD_INT 1
42687: ST_TO_ADDR
// if btype = b_workshop then
42688: LD_VAR 0 5
42692: PUSH
42693: LD_INT 2
42695: EQUAL
42696: IFFALSE 42706
// btype := b_factory ;
42698: LD_ADDR_VAR 0 5
42702: PUSH
42703: LD_INT 3
42705: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42706: LD_ADDR_VAR 0 4
42710: PUSH
42711: LD_VAR 0 5
42715: PPUSH
42716: LD_VAR 0 1
42720: PPUSH
42721: CALL_OW 248
42725: PPUSH
42726: CALL_OW 450
42730: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42731: LD_ADDR_VAR 0 2
42735: PUSH
42736: LD_VAR 0 3
42740: PPUSH
42741: LD_INT 1
42743: PPUSH
42744: CALL_OW 275
42748: PUSH
42749: LD_VAR 0 4
42753: PUSH
42754: LD_INT 1
42756: ARRAY
42757: GREATEREQUAL
42758: PUSH
42759: LD_VAR 0 3
42763: PPUSH
42764: LD_INT 2
42766: PPUSH
42767: CALL_OW 275
42771: PUSH
42772: LD_VAR 0 4
42776: PUSH
42777: LD_INT 2
42779: ARRAY
42780: GREATEREQUAL
42781: AND
42782: PUSH
42783: LD_VAR 0 3
42787: PPUSH
42788: LD_INT 3
42790: PPUSH
42791: CALL_OW 275
42795: PUSH
42796: LD_VAR 0 4
42800: PUSH
42801: LD_INT 3
42803: ARRAY
42804: GREATEREQUAL
42805: AND
42806: ST_TO_ADDR
// end ;
42807: LD_VAR 0 2
42811: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42812: LD_INT 0
42814: PPUSH
42815: PPUSH
42816: PPUSH
// pom := GetBase ( building ) ;
42817: LD_ADDR_VAR 0 4
42821: PUSH
42822: LD_VAR 0 1
42826: PPUSH
42827: CALL_OW 274
42831: ST_TO_ADDR
// if not pom then
42832: LD_VAR 0 4
42836: NOT
42837: IFFALSE 42841
// exit ;
42839: GO 42942
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42841: LD_ADDR_VAR 0 5
42845: PUSH
42846: LD_VAR 0 2
42850: PPUSH
42851: LD_VAR 0 1
42855: PPUSH
42856: CALL_OW 248
42860: PPUSH
42861: CALL_OW 450
42865: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42866: LD_ADDR_VAR 0 3
42870: PUSH
42871: LD_VAR 0 4
42875: PPUSH
42876: LD_INT 1
42878: PPUSH
42879: CALL_OW 275
42883: PUSH
42884: LD_VAR 0 5
42888: PUSH
42889: LD_INT 1
42891: ARRAY
42892: GREATEREQUAL
42893: PUSH
42894: LD_VAR 0 4
42898: PPUSH
42899: LD_INT 2
42901: PPUSH
42902: CALL_OW 275
42906: PUSH
42907: LD_VAR 0 5
42911: PUSH
42912: LD_INT 2
42914: ARRAY
42915: GREATEREQUAL
42916: AND
42917: PUSH
42918: LD_VAR 0 4
42922: PPUSH
42923: LD_INT 3
42925: PPUSH
42926: CALL_OW 275
42930: PUSH
42931: LD_VAR 0 5
42935: PUSH
42936: LD_INT 3
42938: ARRAY
42939: GREATEREQUAL
42940: AND
42941: ST_TO_ADDR
// end ;
42942: LD_VAR 0 3
42946: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42947: LD_INT 0
42949: PPUSH
42950: PPUSH
42951: PPUSH
42952: PPUSH
42953: PPUSH
42954: PPUSH
42955: PPUSH
42956: PPUSH
42957: PPUSH
42958: PPUSH
42959: PPUSH
// result := false ;
42960: LD_ADDR_VAR 0 8
42964: PUSH
42965: LD_INT 0
42967: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42968: LD_VAR 0 5
42972: NOT
42973: PUSH
42974: LD_VAR 0 1
42978: NOT
42979: OR
42980: PUSH
42981: LD_VAR 0 2
42985: NOT
42986: OR
42987: PUSH
42988: LD_VAR 0 3
42992: NOT
42993: OR
42994: IFFALSE 42998
// exit ;
42996: GO 43812
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42998: LD_ADDR_VAR 0 14
43002: PUSH
43003: LD_VAR 0 1
43007: PPUSH
43008: LD_VAR 0 2
43012: PPUSH
43013: LD_VAR 0 3
43017: PPUSH
43018: LD_VAR 0 4
43022: PPUSH
43023: LD_VAR 0 5
43027: PUSH
43028: LD_INT 1
43030: ARRAY
43031: PPUSH
43032: CALL_OW 248
43036: PPUSH
43037: LD_INT 0
43039: PPUSH
43040: CALL 45049 0 6
43044: ST_TO_ADDR
// if not hexes then
43045: LD_VAR 0 14
43049: NOT
43050: IFFALSE 43054
// exit ;
43052: GO 43812
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43054: LD_ADDR_VAR 0 17
43058: PUSH
43059: LD_VAR 0 5
43063: PPUSH
43064: LD_INT 22
43066: PUSH
43067: LD_VAR 0 13
43071: PPUSH
43072: CALL_OW 255
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: LD_INT 30
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 30
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: LIST
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PPUSH
43113: CALL_OW 72
43117: ST_TO_ADDR
// for i = 1 to hexes do
43118: LD_ADDR_VAR 0 9
43122: PUSH
43123: DOUBLE
43124: LD_INT 1
43126: DEC
43127: ST_TO_ADDR
43128: LD_VAR 0 14
43132: PUSH
43133: FOR_TO
43134: IFFALSE 43810
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43136: LD_ADDR_VAR 0 13
43140: PUSH
43141: LD_VAR 0 14
43145: PUSH
43146: LD_VAR 0 9
43150: ARRAY
43151: PUSH
43152: LD_INT 1
43154: ARRAY
43155: PPUSH
43156: LD_VAR 0 14
43160: PUSH
43161: LD_VAR 0 9
43165: ARRAY
43166: PUSH
43167: LD_INT 2
43169: ARRAY
43170: PPUSH
43171: CALL_OW 428
43175: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43176: LD_VAR 0 14
43180: PUSH
43181: LD_VAR 0 9
43185: ARRAY
43186: PUSH
43187: LD_INT 1
43189: ARRAY
43190: PPUSH
43191: LD_VAR 0 14
43195: PUSH
43196: LD_VAR 0 9
43200: ARRAY
43201: PUSH
43202: LD_INT 2
43204: ARRAY
43205: PPUSH
43206: CALL_OW 351
43210: PUSH
43211: LD_VAR 0 14
43215: PUSH
43216: LD_VAR 0 9
43220: ARRAY
43221: PUSH
43222: LD_INT 1
43224: ARRAY
43225: PPUSH
43226: LD_VAR 0 14
43230: PUSH
43231: LD_VAR 0 9
43235: ARRAY
43236: PUSH
43237: LD_INT 2
43239: ARRAY
43240: PPUSH
43241: CALL_OW 488
43245: NOT
43246: OR
43247: PUSH
43248: LD_VAR 0 13
43252: PPUSH
43253: CALL_OW 247
43257: PUSH
43258: LD_INT 3
43260: EQUAL
43261: OR
43262: IFFALSE 43268
// exit ;
43264: POP
43265: POP
43266: GO 43812
// if not tmp then
43268: LD_VAR 0 13
43272: NOT
43273: IFFALSE 43277
// continue ;
43275: GO 43133
// result := true ;
43277: LD_ADDR_VAR 0 8
43281: PUSH
43282: LD_INT 1
43284: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43285: LD_VAR 0 6
43289: PUSH
43290: LD_VAR 0 13
43294: PPUSH
43295: CALL_OW 247
43299: PUSH
43300: LD_INT 2
43302: EQUAL
43303: AND
43304: PUSH
43305: LD_VAR 0 13
43309: PPUSH
43310: CALL_OW 263
43314: PUSH
43315: LD_INT 1
43317: EQUAL
43318: AND
43319: IFFALSE 43483
// begin if IsDrivenBy ( tmp ) then
43321: LD_VAR 0 13
43325: PPUSH
43326: CALL_OW 311
43330: IFFALSE 43334
// continue ;
43332: GO 43133
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43334: LD_VAR 0 6
43338: PPUSH
43339: LD_INT 3
43341: PUSH
43342: LD_INT 60
43344: PUSH
43345: EMPTY
43346: LIST
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 3
43354: PUSH
43355: LD_INT 55
43357: PUSH
43358: EMPTY
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PPUSH
43369: CALL_OW 72
43373: IFFALSE 43481
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43375: LD_ADDR_VAR 0 18
43379: PUSH
43380: LD_VAR 0 6
43384: PPUSH
43385: LD_INT 3
43387: PUSH
43388: LD_INT 60
43390: PUSH
43391: EMPTY
43392: LIST
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 3
43400: PUSH
43401: LD_INT 55
43403: PUSH
43404: EMPTY
43405: LIST
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PPUSH
43415: CALL_OW 72
43419: PUSH
43420: LD_INT 1
43422: ARRAY
43423: ST_TO_ADDR
// if IsInUnit ( driver ) then
43424: LD_VAR 0 18
43428: PPUSH
43429: CALL_OW 310
43433: IFFALSE 43444
// ComExit ( driver ) ;
43435: LD_VAR 0 18
43439: PPUSH
43440: CALL 68754 0 1
// AddComEnterUnit ( driver , tmp ) ;
43444: LD_VAR 0 18
43448: PPUSH
43449: LD_VAR 0 13
43453: PPUSH
43454: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43458: LD_VAR 0 18
43462: PPUSH
43463: LD_VAR 0 7
43467: PPUSH
43468: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43472: LD_VAR 0 18
43476: PPUSH
43477: CALL_OW 181
// end ; continue ;
43481: GO 43133
// end ; if not cleaners or not tmp in cleaners then
43483: LD_VAR 0 6
43487: NOT
43488: PUSH
43489: LD_VAR 0 13
43493: PUSH
43494: LD_VAR 0 6
43498: IN
43499: NOT
43500: OR
43501: IFFALSE 43808
// begin if dep then
43503: LD_VAR 0 17
43507: IFFALSE 43643
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43509: LD_ADDR_VAR 0 16
43513: PUSH
43514: LD_VAR 0 17
43518: PUSH
43519: LD_INT 1
43521: ARRAY
43522: PPUSH
43523: CALL_OW 250
43527: PPUSH
43528: LD_VAR 0 17
43532: PUSH
43533: LD_INT 1
43535: ARRAY
43536: PPUSH
43537: CALL_OW 254
43541: PPUSH
43542: LD_INT 5
43544: PPUSH
43545: CALL_OW 272
43549: PUSH
43550: LD_VAR 0 17
43554: PUSH
43555: LD_INT 1
43557: ARRAY
43558: PPUSH
43559: CALL_OW 251
43563: PPUSH
43564: LD_VAR 0 17
43568: PUSH
43569: LD_INT 1
43571: ARRAY
43572: PPUSH
43573: CALL_OW 254
43577: PPUSH
43578: LD_INT 5
43580: PPUSH
43581: CALL_OW 273
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43590: LD_VAR 0 16
43594: PUSH
43595: LD_INT 1
43597: ARRAY
43598: PPUSH
43599: LD_VAR 0 16
43603: PUSH
43604: LD_INT 2
43606: ARRAY
43607: PPUSH
43608: CALL_OW 488
43612: IFFALSE 43643
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43614: LD_VAR 0 13
43618: PPUSH
43619: LD_VAR 0 16
43623: PUSH
43624: LD_INT 1
43626: ARRAY
43627: PPUSH
43628: LD_VAR 0 16
43632: PUSH
43633: LD_INT 2
43635: ARRAY
43636: PPUSH
43637: CALL_OW 111
// continue ;
43641: GO 43133
// end ; end ; r := GetDir ( tmp ) ;
43643: LD_ADDR_VAR 0 15
43647: PUSH
43648: LD_VAR 0 13
43652: PPUSH
43653: CALL_OW 254
43657: ST_TO_ADDR
// if r = 5 then
43658: LD_VAR 0 15
43662: PUSH
43663: LD_INT 5
43665: EQUAL
43666: IFFALSE 43676
// r := 0 ;
43668: LD_ADDR_VAR 0 15
43672: PUSH
43673: LD_INT 0
43675: ST_TO_ADDR
// for j = r to 5 do
43676: LD_ADDR_VAR 0 10
43680: PUSH
43681: DOUBLE
43682: LD_VAR 0 15
43686: DEC
43687: ST_TO_ADDR
43688: LD_INT 5
43690: PUSH
43691: FOR_TO
43692: IFFALSE 43806
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43694: LD_ADDR_VAR 0 11
43698: PUSH
43699: LD_VAR 0 13
43703: PPUSH
43704: CALL_OW 250
43708: PPUSH
43709: LD_VAR 0 10
43713: PPUSH
43714: LD_INT 2
43716: PPUSH
43717: CALL_OW 272
43721: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43722: LD_ADDR_VAR 0 12
43726: PUSH
43727: LD_VAR 0 13
43731: PPUSH
43732: CALL_OW 251
43736: PPUSH
43737: LD_VAR 0 10
43741: PPUSH
43742: LD_INT 2
43744: PPUSH
43745: CALL_OW 273
43749: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43750: LD_VAR 0 11
43754: PPUSH
43755: LD_VAR 0 12
43759: PPUSH
43760: CALL_OW 488
43764: PUSH
43765: LD_VAR 0 11
43769: PPUSH
43770: LD_VAR 0 12
43774: PPUSH
43775: CALL_OW 428
43779: NOT
43780: AND
43781: IFFALSE 43804
// begin ComMoveXY ( tmp , _x , _y ) ;
43783: LD_VAR 0 13
43787: PPUSH
43788: LD_VAR 0 11
43792: PPUSH
43793: LD_VAR 0 12
43797: PPUSH
43798: CALL_OW 111
// break ;
43802: GO 43806
// end ; end ;
43804: GO 43691
43806: POP
43807: POP
// end ; end ;
43808: GO 43133
43810: POP
43811: POP
// end ;
43812: LD_VAR 0 8
43816: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43817: LD_INT 0
43819: PPUSH
// result := true ;
43820: LD_ADDR_VAR 0 3
43824: PUSH
43825: LD_INT 1
43827: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43828: LD_VAR 0 2
43832: PUSH
43833: LD_INT 24
43835: DOUBLE
43836: EQUAL
43837: IFTRUE 43847
43839: LD_INT 33
43841: DOUBLE
43842: EQUAL
43843: IFTRUE 43847
43845: GO 43872
43847: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43848: LD_ADDR_VAR 0 3
43852: PUSH
43853: LD_INT 32
43855: PPUSH
43856: LD_VAR 0 1
43860: PPUSH
43861: CALL_OW 321
43865: PUSH
43866: LD_INT 2
43868: EQUAL
43869: ST_TO_ADDR
43870: GO 44192
43872: LD_INT 20
43874: DOUBLE
43875: EQUAL
43876: IFTRUE 43880
43878: GO 43905
43880: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43881: LD_ADDR_VAR 0 3
43885: PUSH
43886: LD_INT 6
43888: PPUSH
43889: LD_VAR 0 1
43893: PPUSH
43894: CALL_OW 321
43898: PUSH
43899: LD_INT 2
43901: EQUAL
43902: ST_TO_ADDR
43903: GO 44192
43905: LD_INT 22
43907: DOUBLE
43908: EQUAL
43909: IFTRUE 43919
43911: LD_INT 36
43913: DOUBLE
43914: EQUAL
43915: IFTRUE 43919
43917: GO 43944
43919: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43920: LD_ADDR_VAR 0 3
43924: PUSH
43925: LD_INT 15
43927: PPUSH
43928: LD_VAR 0 1
43932: PPUSH
43933: CALL_OW 321
43937: PUSH
43938: LD_INT 2
43940: EQUAL
43941: ST_TO_ADDR
43942: GO 44192
43944: LD_INT 30
43946: DOUBLE
43947: EQUAL
43948: IFTRUE 43952
43950: GO 43977
43952: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43953: LD_ADDR_VAR 0 3
43957: PUSH
43958: LD_INT 20
43960: PPUSH
43961: LD_VAR 0 1
43965: PPUSH
43966: CALL_OW 321
43970: PUSH
43971: LD_INT 2
43973: EQUAL
43974: ST_TO_ADDR
43975: GO 44192
43977: LD_INT 28
43979: DOUBLE
43980: EQUAL
43981: IFTRUE 43991
43983: LD_INT 21
43985: DOUBLE
43986: EQUAL
43987: IFTRUE 43991
43989: GO 44016
43991: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43992: LD_ADDR_VAR 0 3
43996: PUSH
43997: LD_INT 21
43999: PPUSH
44000: LD_VAR 0 1
44004: PPUSH
44005: CALL_OW 321
44009: PUSH
44010: LD_INT 2
44012: EQUAL
44013: ST_TO_ADDR
44014: GO 44192
44016: LD_INT 16
44018: DOUBLE
44019: EQUAL
44020: IFTRUE 44024
44022: GO 44051
44024: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44025: LD_ADDR_VAR 0 3
44029: PUSH
44030: LD_EXP 33
44034: PPUSH
44035: LD_VAR 0 1
44039: PPUSH
44040: CALL_OW 321
44044: PUSH
44045: LD_INT 2
44047: EQUAL
44048: ST_TO_ADDR
44049: GO 44192
44051: LD_INT 19
44053: DOUBLE
44054: EQUAL
44055: IFTRUE 44065
44057: LD_INT 23
44059: DOUBLE
44060: EQUAL
44061: IFTRUE 44065
44063: GO 44092
44065: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44066: LD_ADDR_VAR 0 3
44070: PUSH
44071: LD_EXP 32
44075: PPUSH
44076: LD_VAR 0 1
44080: PPUSH
44081: CALL_OW 321
44085: PUSH
44086: LD_INT 2
44088: EQUAL
44089: ST_TO_ADDR
44090: GO 44192
44092: LD_INT 17
44094: DOUBLE
44095: EQUAL
44096: IFTRUE 44100
44098: GO 44125
44100: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44101: LD_ADDR_VAR 0 3
44105: PUSH
44106: LD_INT 39
44108: PPUSH
44109: LD_VAR 0 1
44113: PPUSH
44114: CALL_OW 321
44118: PUSH
44119: LD_INT 2
44121: EQUAL
44122: ST_TO_ADDR
44123: GO 44192
44125: LD_INT 18
44127: DOUBLE
44128: EQUAL
44129: IFTRUE 44133
44131: GO 44158
44133: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44134: LD_ADDR_VAR 0 3
44138: PUSH
44139: LD_INT 40
44141: PPUSH
44142: LD_VAR 0 1
44146: PPUSH
44147: CALL_OW 321
44151: PUSH
44152: LD_INT 2
44154: EQUAL
44155: ST_TO_ADDR
44156: GO 44192
44158: LD_INT 27
44160: DOUBLE
44161: EQUAL
44162: IFTRUE 44166
44164: GO 44191
44166: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44167: LD_ADDR_VAR 0 3
44171: PUSH
44172: LD_INT 35
44174: PPUSH
44175: LD_VAR 0 1
44179: PPUSH
44180: CALL_OW 321
44184: PUSH
44185: LD_INT 2
44187: EQUAL
44188: ST_TO_ADDR
44189: GO 44192
44191: POP
// end ;
44192: LD_VAR 0 3
44196: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44197: LD_INT 0
44199: PPUSH
44200: PPUSH
44201: PPUSH
44202: PPUSH
44203: PPUSH
44204: PPUSH
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
44209: PPUSH
// result := false ;
44210: LD_ADDR_VAR 0 6
44214: PUSH
44215: LD_INT 0
44217: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44218: LD_VAR 0 1
44222: NOT
44223: PUSH
44224: LD_VAR 0 1
44228: PPUSH
44229: CALL_OW 266
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: IN
44244: NOT
44245: OR
44246: PUSH
44247: LD_VAR 0 2
44251: NOT
44252: OR
44253: PUSH
44254: LD_VAR 0 5
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 2
44267: PUSH
44268: LD_INT 3
44270: PUSH
44271: LD_INT 4
44273: PUSH
44274: LD_INT 5
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: IN
44285: NOT
44286: OR
44287: PUSH
44288: LD_VAR 0 3
44292: PPUSH
44293: LD_VAR 0 4
44297: PPUSH
44298: CALL_OW 488
44302: NOT
44303: OR
44304: IFFALSE 44308
// exit ;
44306: GO 45044
// side := GetSide ( depot ) ;
44308: LD_ADDR_VAR 0 9
44312: PUSH
44313: LD_VAR 0 1
44317: PPUSH
44318: CALL_OW 255
44322: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44323: LD_VAR 0 9
44327: PPUSH
44328: LD_VAR 0 2
44332: PPUSH
44333: CALL 43817 0 2
44337: NOT
44338: IFFALSE 44342
// exit ;
44340: GO 45044
// pom := GetBase ( depot ) ;
44342: LD_ADDR_VAR 0 10
44346: PUSH
44347: LD_VAR 0 1
44351: PPUSH
44352: CALL_OW 274
44356: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44357: LD_ADDR_VAR 0 11
44361: PUSH
44362: LD_VAR 0 2
44366: PPUSH
44367: LD_VAR 0 1
44371: PPUSH
44372: CALL_OW 248
44376: PPUSH
44377: CALL_OW 450
44381: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44382: LD_VAR 0 10
44386: PPUSH
44387: LD_INT 1
44389: PPUSH
44390: CALL_OW 275
44394: PUSH
44395: LD_VAR 0 11
44399: PUSH
44400: LD_INT 1
44402: ARRAY
44403: GREATEREQUAL
44404: PUSH
44405: LD_VAR 0 10
44409: PPUSH
44410: LD_INT 2
44412: PPUSH
44413: CALL_OW 275
44417: PUSH
44418: LD_VAR 0 11
44422: PUSH
44423: LD_INT 2
44425: ARRAY
44426: GREATEREQUAL
44427: AND
44428: PUSH
44429: LD_VAR 0 10
44433: PPUSH
44434: LD_INT 3
44436: PPUSH
44437: CALL_OW 275
44441: PUSH
44442: LD_VAR 0 11
44446: PUSH
44447: LD_INT 3
44449: ARRAY
44450: GREATEREQUAL
44451: AND
44452: NOT
44453: IFFALSE 44457
// exit ;
44455: GO 45044
// if GetBType ( depot ) = b_depot then
44457: LD_VAR 0 1
44461: PPUSH
44462: CALL_OW 266
44466: PUSH
44467: LD_INT 0
44469: EQUAL
44470: IFFALSE 44482
// dist := 28 else
44472: LD_ADDR_VAR 0 14
44476: PUSH
44477: LD_INT 28
44479: ST_TO_ADDR
44480: GO 44490
// dist := 36 ;
44482: LD_ADDR_VAR 0 14
44486: PUSH
44487: LD_INT 36
44489: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44490: LD_VAR 0 1
44494: PPUSH
44495: LD_VAR 0 3
44499: PPUSH
44500: LD_VAR 0 4
44504: PPUSH
44505: CALL_OW 297
44509: PUSH
44510: LD_VAR 0 14
44514: GREATER
44515: IFFALSE 44519
// exit ;
44517: GO 45044
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44519: LD_ADDR_VAR 0 12
44523: PUSH
44524: LD_VAR 0 2
44528: PPUSH
44529: LD_VAR 0 3
44533: PPUSH
44534: LD_VAR 0 4
44538: PPUSH
44539: LD_VAR 0 5
44543: PPUSH
44544: LD_VAR 0 1
44548: PPUSH
44549: CALL_OW 248
44553: PPUSH
44554: LD_INT 0
44556: PPUSH
44557: CALL 45049 0 6
44561: ST_TO_ADDR
// if not hexes then
44562: LD_VAR 0 12
44566: NOT
44567: IFFALSE 44571
// exit ;
44569: GO 45044
// hex := GetHexInfo ( x , y ) ;
44571: LD_ADDR_VAR 0 15
44575: PUSH
44576: LD_VAR 0 3
44580: PPUSH
44581: LD_VAR 0 4
44585: PPUSH
44586: CALL_OW 546
44590: ST_TO_ADDR
// if hex [ 1 ] then
44591: LD_VAR 0 15
44595: PUSH
44596: LD_INT 1
44598: ARRAY
44599: IFFALSE 44603
// exit ;
44601: GO 45044
// height := hex [ 2 ] ;
44603: LD_ADDR_VAR 0 13
44607: PUSH
44608: LD_VAR 0 15
44612: PUSH
44613: LD_INT 2
44615: ARRAY
44616: ST_TO_ADDR
// for i = 1 to hexes do
44617: LD_ADDR_VAR 0 7
44621: PUSH
44622: DOUBLE
44623: LD_INT 1
44625: DEC
44626: ST_TO_ADDR
44627: LD_VAR 0 12
44631: PUSH
44632: FOR_TO
44633: IFFALSE 44963
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44635: LD_VAR 0 12
44639: PUSH
44640: LD_VAR 0 7
44644: ARRAY
44645: PUSH
44646: LD_INT 1
44648: ARRAY
44649: PPUSH
44650: LD_VAR 0 12
44654: PUSH
44655: LD_VAR 0 7
44659: ARRAY
44660: PUSH
44661: LD_INT 2
44663: ARRAY
44664: PPUSH
44665: CALL_OW 488
44669: NOT
44670: PUSH
44671: LD_VAR 0 12
44675: PUSH
44676: LD_VAR 0 7
44680: ARRAY
44681: PUSH
44682: LD_INT 1
44684: ARRAY
44685: PPUSH
44686: LD_VAR 0 12
44690: PUSH
44691: LD_VAR 0 7
44695: ARRAY
44696: PUSH
44697: LD_INT 2
44699: ARRAY
44700: PPUSH
44701: CALL_OW 428
44705: PUSH
44706: LD_INT 0
44708: GREATER
44709: OR
44710: PUSH
44711: LD_VAR 0 12
44715: PUSH
44716: LD_VAR 0 7
44720: ARRAY
44721: PUSH
44722: LD_INT 1
44724: ARRAY
44725: PPUSH
44726: LD_VAR 0 12
44730: PUSH
44731: LD_VAR 0 7
44735: ARRAY
44736: PUSH
44737: LD_INT 2
44739: ARRAY
44740: PPUSH
44741: CALL_OW 351
44745: OR
44746: IFFALSE 44752
// exit ;
44748: POP
44749: POP
44750: GO 45044
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44752: LD_ADDR_VAR 0 8
44756: PUSH
44757: LD_VAR 0 12
44761: PUSH
44762: LD_VAR 0 7
44766: ARRAY
44767: PUSH
44768: LD_INT 1
44770: ARRAY
44771: PPUSH
44772: LD_VAR 0 12
44776: PUSH
44777: LD_VAR 0 7
44781: ARRAY
44782: PUSH
44783: LD_INT 2
44785: ARRAY
44786: PPUSH
44787: CALL_OW 546
44791: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44792: LD_VAR 0 8
44796: PUSH
44797: LD_INT 1
44799: ARRAY
44800: PUSH
44801: LD_VAR 0 8
44805: PUSH
44806: LD_INT 2
44808: ARRAY
44809: PUSH
44810: LD_VAR 0 13
44814: PUSH
44815: LD_INT 2
44817: PLUS
44818: GREATER
44819: OR
44820: PUSH
44821: LD_VAR 0 8
44825: PUSH
44826: LD_INT 2
44828: ARRAY
44829: PUSH
44830: LD_VAR 0 13
44834: PUSH
44835: LD_INT 2
44837: MINUS
44838: LESS
44839: OR
44840: PUSH
44841: LD_VAR 0 8
44845: PUSH
44846: LD_INT 3
44848: ARRAY
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 8
44855: PUSH
44856: LD_INT 9
44858: PUSH
44859: LD_INT 10
44861: PUSH
44862: LD_INT 11
44864: PUSH
44865: LD_INT 12
44867: PUSH
44868: LD_INT 13
44870: PUSH
44871: LD_INT 16
44873: PUSH
44874: LD_INT 17
44876: PUSH
44877: LD_INT 18
44879: PUSH
44880: LD_INT 19
44882: PUSH
44883: LD_INT 20
44885: PUSH
44886: LD_INT 21
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: IN
44904: NOT
44905: OR
44906: PUSH
44907: LD_VAR 0 8
44911: PUSH
44912: LD_INT 5
44914: ARRAY
44915: NOT
44916: OR
44917: PUSH
44918: LD_VAR 0 8
44922: PUSH
44923: LD_INT 6
44925: ARRAY
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: LD_INT 7
44935: PUSH
44936: LD_INT 9
44938: PUSH
44939: LD_INT 10
44941: PUSH
44942: LD_INT 11
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: IN
44953: NOT
44954: OR
44955: IFFALSE 44961
// exit ;
44957: POP
44958: POP
44959: GO 45044
// end ;
44961: GO 44632
44963: POP
44964: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44965: LD_VAR 0 9
44969: PPUSH
44970: LD_VAR 0 3
44974: PPUSH
44975: LD_VAR 0 4
44979: PPUSH
44980: LD_INT 20
44982: PPUSH
44983: CALL 36990 0 4
44987: PUSH
44988: LD_INT 4
44990: ARRAY
44991: IFFALSE 44995
// exit ;
44993: GO 45044
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44995: LD_VAR 0 2
44999: PUSH
45000: LD_INT 29
45002: PUSH
45003: LD_INT 30
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: IN
45010: PUSH
45011: LD_VAR 0 3
45015: PPUSH
45016: LD_VAR 0 4
45020: PPUSH
45021: LD_VAR 0 9
45025: PPUSH
45026: CALL_OW 440
45030: NOT
45031: AND
45032: IFFALSE 45036
// exit ;
45034: GO 45044
// result := true ;
45036: LD_ADDR_VAR 0 6
45040: PUSH
45041: LD_INT 1
45043: ST_TO_ADDR
// end ;
45044: LD_VAR 0 6
45048: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45049: LD_INT 0
45051: PPUSH
45052: PPUSH
45053: PPUSH
45054: PPUSH
45055: PPUSH
45056: PPUSH
45057: PPUSH
45058: PPUSH
45059: PPUSH
45060: PPUSH
45061: PPUSH
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
45066: PPUSH
45067: PPUSH
45068: PPUSH
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
45073: PPUSH
45074: PPUSH
45075: PPUSH
45076: PPUSH
45077: PPUSH
45078: PPUSH
45079: PPUSH
45080: PPUSH
45081: PPUSH
45082: PPUSH
45083: PPUSH
45084: PPUSH
45085: PPUSH
45086: PPUSH
45087: PPUSH
45088: PPUSH
45089: PPUSH
45090: PPUSH
45091: PPUSH
45092: PPUSH
45093: PPUSH
45094: PPUSH
45095: PPUSH
45096: PPUSH
45097: PPUSH
45098: PPUSH
45099: PPUSH
45100: PPUSH
45101: PPUSH
45102: PPUSH
45103: PPUSH
45104: PPUSH
45105: PPUSH
45106: PPUSH
45107: PPUSH
45108: PPUSH
// result = [ ] ;
45109: LD_ADDR_VAR 0 7
45113: PUSH
45114: EMPTY
45115: ST_TO_ADDR
// temp_list = [ ] ;
45116: LD_ADDR_VAR 0 9
45120: PUSH
45121: EMPTY
45122: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45123: LD_VAR 0 4
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: LD_INT 3
45139: PUSH
45140: LD_INT 4
45142: PUSH
45143: LD_INT 5
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: IN
45154: NOT
45155: PUSH
45156: LD_VAR 0 1
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: IN
45171: PUSH
45172: LD_VAR 0 5
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: LD_INT 3
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: LIST
45190: IN
45191: NOT
45192: AND
45193: OR
45194: IFFALSE 45198
// exit ;
45196: GO 63589
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45198: LD_VAR 0 1
45202: PUSH
45203: LD_INT 6
45205: PUSH
45206: LD_INT 7
45208: PUSH
45209: LD_INT 8
45211: PUSH
45212: LD_INT 13
45214: PUSH
45215: LD_INT 12
45217: PUSH
45218: LD_INT 15
45220: PUSH
45221: LD_INT 11
45223: PUSH
45224: LD_INT 14
45226: PUSH
45227: LD_INT 10
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: IN
45241: IFFALSE 45251
// btype = b_lab ;
45243: LD_ADDR_VAR 0 1
45247: PUSH
45248: LD_INT 6
45250: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45251: LD_VAR 0 6
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: LIST
45269: IN
45270: NOT
45271: PUSH
45272: LD_VAR 0 1
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: LD_INT 3
45288: PUSH
45289: LD_INT 6
45291: PUSH
45292: LD_INT 36
45294: PUSH
45295: LD_INT 4
45297: PUSH
45298: LD_INT 5
45300: PUSH
45301: LD_INT 31
45303: PUSH
45304: LD_INT 32
45306: PUSH
45307: LD_INT 33
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: IN
45323: NOT
45324: PUSH
45325: LD_VAR 0 6
45329: PUSH
45330: LD_INT 1
45332: EQUAL
45333: AND
45334: OR
45335: PUSH
45336: LD_VAR 0 1
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: LD_INT 3
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: IN
45351: NOT
45352: PUSH
45353: LD_VAR 0 6
45357: PUSH
45358: LD_INT 2
45360: EQUAL
45361: AND
45362: OR
45363: IFFALSE 45373
// mode = 0 ;
45365: LD_ADDR_VAR 0 6
45369: PUSH
45370: LD_INT 0
45372: ST_TO_ADDR
// case mode of 0 :
45373: LD_VAR 0 6
45377: PUSH
45378: LD_INT 0
45380: DOUBLE
45381: EQUAL
45382: IFTRUE 45386
45384: GO 56839
45386: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45387: LD_ADDR_VAR 0 11
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: LD_INT 2
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: LD_INT 3
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: LD_INT 3
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45580: LD_ADDR_VAR 0 12
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 2
45703: NEG
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 3
45737: NEG
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 3
45748: NEG
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45776: LD_ADDR_VAR 0 13
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: LD_INT 3
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 3
45935: NEG
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 3
45947: NEG
45948: PUSH
45949: LD_INT 3
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45975: LD_ADDR_VAR 0 14
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 2
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: LD_INT 2
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: LD_INT 3
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 3
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46171: LD_ADDR_VAR 0 15
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 3
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 3
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46364: LD_ADDR_VAR 0 16
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 2
46487: NEG
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: LD_INT 2
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 3
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 3
46521: PUSH
46522: LD_INT 3
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 2
46531: PUSH
46532: LD_INT 3
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46557: LD_ADDR_VAR 0 17
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 2
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: NEG
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46787: LD_ADDR_VAR 0 18
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 2
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: LD_INT 2
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: NEG
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 2
46986: NEG
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47017: LD_ADDR_VAR 0 19
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: LD_INT 2
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: LD_INT 2
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 2
47193: NEG
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47247: LD_ADDR_VAR 0 20
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: LD_INT 2
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 2
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: LD_INT 2
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 2
47423: NEG
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: LD_INT 2
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47477: LD_ADDR_VAR 0 21
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47707: LD_ADDR_VAR 0 22
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 2
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: NEG
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47937: LD_ADDR_VAR 0 23
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: LD_INT 3
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 3
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48217: LD_ADDR_VAR 0 24
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 2
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 3
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 3
48460: PUSH
48461: LD_INT 2
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48493: LD_ADDR_VAR 0 25
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 2
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 2
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 3
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 3
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: LD_INT 3
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: LD_INT 3
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48767: LD_ADDR_VAR 0 26
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 2
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: LD_INT 3
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49043: LD_ADDR_VAR 0 27
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 2
49219: NEG
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 2
49265: NEG
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 3
49276: NEG
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 3
49288: NEG
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49323: LD_ADDR_VAR 0 28
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: LD_INT 2
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: NEG
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: LD_INT 3
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 3
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 3
49558: NEG
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 3
49570: NEG
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49605: LD_ADDR_VAR 0 29
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: LD_INT 2
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: LD_INT 3
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 3
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 3
49849: NEG
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49884: LD_ADDR_VAR 0 30
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 3
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 2
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 3
50096: PUSH
50097: LD_INT 2
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: LD_INT 3
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 3
50127: NEG
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50162: LD_ADDR_VAR 0 31
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: LD_INT 2
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 0
50306: PUSH
50307: LD_INT 2
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: NEG
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: LD_INT 3
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 3
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: LD_INT 3
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: LD_INT 2
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 3
50405: NEG
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50440: LD_ADDR_VAR 0 32
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 2
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: LD_INT 1
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 2
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 3
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 3
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: LD_INT 3
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: NEG
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 3
50683: NEG
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50718: LD_ADDR_VAR 0 33
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: LD_INT 3
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 2
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 3
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: LD_INT 3
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 3
50962: NEG
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50997: LD_ADDR_VAR 0 34
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 2
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: LD_INT 2
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 2
51164: NEG
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 2
51176: NEG
51177: PUSH
51178: LD_INT 2
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 3
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 3
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 3
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 3
51242: NEG
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51277: LD_ADDR_VAR 0 35
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51389: LD_ADDR_VAR 0 36
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51501: LD_ADDR_VAR 0 37
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51613: LD_ADDR_VAR 0 38
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51725: LD_ADDR_VAR 0 39
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: LD_INT 0
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: LD_INT 2
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51837: LD_ADDR_VAR 0 40
51841: PUSH
51842: LD_INT 0
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51949: LD_ADDR_VAR 0 41
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 2
52127: NEG
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: LD_INT 3
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 3
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 3
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 3
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 3
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 3
52234: NEG
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 3
52246: NEG
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 3
52258: NEG
52259: PUSH
52260: LD_INT 3
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52299: LD_ADDR_VAR 0 42
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: LD_INT 2
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: LD_INT 2
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: LD_INT 3
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 3
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 3
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 3
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 3
52545: PUSH
52546: LD_INT 3
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: LD_INT 3
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: LD_INT 3
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: LD_INT 3
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 3
52596: NEG
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 3
52608: NEG
52609: PUSH
52610: LD_INT 3
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52649: LD_ADDR_VAR 0 43
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 2
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 3
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 3
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 2
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 3
52945: NEG
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 3
52956: NEG
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52997: LD_ADDR_VAR 0 44
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: LD_INT 2
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: LD_INT 3
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 3
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 3
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 3
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 3
53240: PUSH
53241: LD_INT 3
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: LD_INT 3
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 2
53260: NEG
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 3
53271: NEG
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 3
53282: NEG
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 3
53294: NEG
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: LD_INT 3
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53347: LD_ADDR_VAR 0 45
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 2
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: LD_INT 2
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 2
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 2
53513: NEG
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 2
53525: NEG
53526: PUSH
53527: LD_INT 2
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: LD_INT 3
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 3
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: LD_INT 3
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 3
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 3
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: LD_INT 3
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: LD_INT 3
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: LD_INT 3
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 3
53644: NEG
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 3
53656: NEG
53657: PUSH
53658: LD_INT 3
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53697: LD_ADDR_VAR 0 46
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: LD_INT 2
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 2
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 2
53874: NEG
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: LD_INT 3
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 3
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 2
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 3
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: LD_INT 3
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: LD_INT 3
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: LD_INT 2
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 3
53993: NEG
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 3
54004: NEG
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54045: LD_ADDR_VAR 0 47
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: LD_INT 0
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: LD_INT 2
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: NEG
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 2
54172: NEG
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54196: LD_ADDR_VAR 0 48
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54343: LD_ADDR_VAR 0 49
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: LD_INT 0
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 2
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54487: LD_ADDR_VAR 0 50
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54631: LD_ADDR_VAR 0 51
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 2
54743: NEG
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54778: LD_ADDR_VAR 0 52
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: LD_INT 2
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54929: LD_ADDR_VAR 0 53
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: LD_INT 2
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 2
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55159: LD_ADDR_VAR 0 54
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: LD_INT 2
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: LD_INT 2
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 2
55358: NEG
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55389: LD_ADDR_VAR 0 55
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 2
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55619: LD_ADDR_VAR 0 56
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 0
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55849: LD_ADDR_VAR 0 57
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 2
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 2
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 2
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56079: LD_ADDR_VAR 0 58
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 2
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56309: LD_ADDR_VAR 0 59
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56397: LD_ADDR_VAR 0 60
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56485: LD_ADDR_VAR 0 61
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56573: LD_ADDR_VAR 0 62
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56661: LD_ADDR_VAR 0 63
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56749: LD_ADDR_VAR 0 64
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: ST_TO_ADDR
// end ; 1 :
56837: GO 62734
56839: LD_INT 1
56841: DOUBLE
56842: EQUAL
56843: IFTRUE 56847
56845: GO 59470
56847: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56848: LD_ADDR_VAR 0 11
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: LD_INT 3
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: LD_INT 3
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: LIST
56891: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56892: LD_ADDR_VAR 0 12
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 3
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 3
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: LIST
56932: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56933: LD_ADDR_VAR 0 13
56937: PUSH
56938: LD_INT 3
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 3
56950: PUSH
56951: LD_INT 3
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 3
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: LIST
56972: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56973: LD_ADDR_VAR 0 14
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 3
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: LD_INT 3
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: LIST
57013: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57014: LD_ADDR_VAR 0 15
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 3
57032: NEG
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 3
57043: NEG
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: LIST
57057: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57058: LD_ADDR_VAR 0 16
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: LD_INT 3
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 3
57077: NEG
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 3
57089: NEG
57090: PUSH
57091: LD_INT 3
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: LIST
57103: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57104: LD_ADDR_VAR 0 17
57108: PUSH
57109: LD_INT 1
57111: NEG
57112: PUSH
57113: LD_INT 3
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: LD_INT 3
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: LIST
57147: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57148: LD_ADDR_VAR 0 18
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 3
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 3
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: LIST
57188: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57189: LD_ADDR_VAR 0 19
57193: PUSH
57194: LD_INT 3
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 3
57206: PUSH
57207: LD_INT 3
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: LD_INT 3
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: LIST
57228: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57229: LD_ADDR_VAR 0 20
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: LD_INT 3
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: LD_INT 3
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: LIST
57269: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57270: LD_ADDR_VAR 0 21
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 3
57288: NEG
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 3
57299: NEG
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: LIST
57313: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57314: LD_ADDR_VAR 0 22
57318: PUSH
57319: LD_INT 2
57321: NEG
57322: PUSH
57323: LD_INT 3
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 3
57333: NEG
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 3
57345: NEG
57346: PUSH
57347: LD_INT 3
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: LIST
57359: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57360: LD_ADDR_VAR 0 23
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 3
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: LD_INT 4
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: PUSH
57391: LD_INT 3
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: LIST
57403: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57404: LD_ADDR_VAR 0 24
57408: PUSH
57409: LD_INT 3
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 4
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: LIST
57444: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57445: LD_ADDR_VAR 0 25
57449: PUSH
57450: LD_INT 3
57452: PUSH
57453: LD_INT 3
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 4
57462: PUSH
57463: LD_INT 3
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: PUSH
57473: LD_INT 4
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57485: LD_ADDR_VAR 0 26
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: LD_INT 3
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 1
57502: PUSH
57503: LD_INT 4
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: LD_INT 3
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: LIST
57525: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57526: LD_ADDR_VAR 0 27
57530: PUSH
57531: LD_INT 3
57533: NEG
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 3
57544: NEG
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 4
57555: NEG
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: LIST
57569: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57570: LD_ADDR_VAR 0 28
57574: PUSH
57575: LD_INT 3
57577: NEG
57578: PUSH
57579: LD_INT 3
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 3
57589: NEG
57590: PUSH
57591: LD_INT 4
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 4
57601: NEG
57602: PUSH
57603: LD_INT 3
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: LIST
57615: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57616: LD_ADDR_VAR 0 29
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: LD_INT 3
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: LD_INT 3
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: LD_INT 4
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 4
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: LD_INT 5
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: LD_INT 5
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: LD_INT 4
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 6
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: LD_INT 6
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 5
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57771: LD_ADDR_VAR 0 30
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 3
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 3
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 4
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 4
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 4
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 5
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 5
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 5
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 6
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 6
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57914: LD_ADDR_VAR 0 31
57918: PUSH
57919: LD_INT 3
57921: PUSH
57922: LD_INT 2
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 3
57931: PUSH
57932: LD_INT 3
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: LD_INT 3
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 4
57951: PUSH
57952: LD_INT 3
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 4
57961: PUSH
57962: LD_INT 4
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: LD_INT 4
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 5
57981: PUSH
57982: LD_INT 4
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 5
57991: PUSH
57992: LD_INT 5
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 4
58001: PUSH
58002: LD_INT 5
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 6
58011: PUSH
58012: LD_INT 5
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 6
58021: PUSH
58022: LD_INT 6
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 5
58031: PUSH
58032: LD_INT 6
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58053: LD_ADDR_VAR 0 32
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: LD_INT 3
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: LD_INT 3
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: LD_INT 4
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: LD_INT 4
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: LD_INT 3
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: LD_INT 5
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: LD_INT 5
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: LD_INT 4
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: LD_INT 6
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: LD_INT 6
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: LD_INT 5
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58196: LD_ADDR_VAR 0 33
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 3
58214: NEG
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 3
58237: NEG
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 4
58248: NEG
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 4
58259: NEG
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 4
58271: NEG
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 5
58282: NEG
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 5
58293: NEG
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 5
58305: NEG
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 6
58316: NEG
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 6
58327: NEG
58328: PUSH
58329: LD_INT 1
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58351: LD_ADDR_VAR 0 34
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 3
58370: NEG
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 3
58382: NEG
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 3
58394: NEG
58395: PUSH
58396: LD_INT 4
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 4
58406: NEG
58407: PUSH
58408: LD_INT 3
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 4
58418: NEG
58419: PUSH
58420: LD_INT 4
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 4
58430: NEG
58431: PUSH
58432: LD_INT 5
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 5
58442: NEG
58443: PUSH
58444: LD_INT 4
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 5
58454: NEG
58455: PUSH
58456: LD_INT 5
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 5
58466: NEG
58467: PUSH
58468: LD_INT 6
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 6
58478: NEG
58479: PUSH
58480: LD_INT 5
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 6
58490: NEG
58491: PUSH
58492: LD_INT 6
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58514: LD_ADDR_VAR 0 41
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: LD_INT 2
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 3
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: LIST
58557: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58558: LD_ADDR_VAR 0 42
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 2
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 3
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: LIST
58598: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58599: LD_ADDR_VAR 0 43
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 3
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: LD_INT 3
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: LIST
58638: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58639: LD_ADDR_VAR 0 44
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 2
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: LD_INT 3
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: LIST
58679: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58680: LD_ADDR_VAR 0 45
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: LIST
58723: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58724: LD_ADDR_VAR 0 46
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: LD_INT 2
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: LD_INT 3
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 3
58755: NEG
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: LIST
58769: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58770: LD_ADDR_VAR 0 47
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: LD_INT 3
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: LD_INT 3
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58803: LD_ADDR_VAR 0 48
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58834: LD_ADDR_VAR 0 49
58838: PUSH
58839: LD_INT 3
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 3
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58863: LD_ADDR_VAR 0 50
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: LD_INT 3
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 3
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58892: LD_ADDR_VAR 0 51
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58923: LD_ADDR_VAR 0 52
58927: PUSH
58928: LD_INT 3
58930: NEG
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 3
58942: NEG
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58956: LD_ADDR_VAR 0 53
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: LD_INT 3
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: LD_INT 3
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: LD_INT 2
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: LIST
58999: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59000: LD_ADDR_VAR 0 54
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 3
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 3
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: LIST
59040: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59041: LD_ADDR_VAR 0 55
59045: PUSH
59046: LD_INT 3
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 3
59058: PUSH
59059: LD_INT 3
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: LD_INT 3
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: LIST
59080: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59081: LD_ADDR_VAR 0 56
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: LD_INT 3
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 3
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 1
59108: NEG
59109: PUSH
59110: LD_INT 2
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59122: LD_ADDR_VAR 0 57
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 3
59140: NEG
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 3
59151: NEG
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: LIST
59165: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59166: LD_ADDR_VAR 0 58
59170: PUSH
59171: LD_INT 2
59173: NEG
59174: PUSH
59175: LD_INT 3
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 3
59185: NEG
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 3
59197: NEG
59198: PUSH
59199: LD_INT 3
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: LIST
59211: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59212: LD_ADDR_VAR 0 59
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: LD_INT 2
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: LIST
59255: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59256: LD_ADDR_VAR 0 60
59260: PUSH
59261: LD_INT 1
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: LIST
59296: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59297: LD_ADDR_VAR 0 61
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 2
59314: PUSH
59315: LD_INT 2
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: LIST
59336: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59337: LD_ADDR_VAR 0 62
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: LD_INT 2
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: LIST
59377: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59378: LD_ADDR_VAR 0 63
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 2
59396: NEG
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59422: LD_ADDR_VAR 0 64
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: LD_INT 2
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: NEG
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 2
59453: NEG
59454: PUSH
59455: LD_INT 2
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: LIST
59467: ST_TO_ADDR
// end ; 2 :
59468: GO 62734
59470: LD_INT 2
59472: DOUBLE
59473: EQUAL
59474: IFTRUE 59478
59476: GO 62733
59478: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59479: LD_ADDR_VAR 0 29
59483: PUSH
59484: LD_INT 4
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 4
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 5
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 5
59517: PUSH
59518: LD_INT 1
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 4
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 3
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 3
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 3
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 5
59569: PUSH
59570: LD_INT 2
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 3
59579: PUSH
59580: LD_INT 3
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 3
59589: PUSH
59590: LD_INT 2
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 4
59599: PUSH
59600: LD_INT 3
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 4
59609: PUSH
59610: LD_INT 4
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 3
59619: PUSH
59620: LD_INT 4
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: LD_INT 3
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 4
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 2
59659: PUSH
59660: LD_INT 4
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: LD_INT 4
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: LD_INT 3
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 4
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: PUSH
59700: LD_INT 5
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 5
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: NEG
59720: PUSH
59721: LD_INT 4
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: NEG
59731: PUSH
59732: LD_INT 3
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 2
59741: PUSH
59742: LD_INT 5
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 2
59751: NEG
59752: PUSH
59753: LD_INT 3
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 3
59762: NEG
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 3
59773: NEG
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 2
59785: NEG
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 2
59796: NEG
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 3
59807: NEG
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 4
59818: NEG
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 4
59829: NEG
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 4
59841: NEG
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: LD_INT 2
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 4
59864: NEG
59865: PUSH
59866: LD_INT 4
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 4
59876: NEG
59877: PUSH
59878: LD_INT 5
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 3
59888: NEG
59889: PUSH
59890: LD_INT 4
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 3
59900: NEG
59901: PUSH
59902: LD_INT 3
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 4
59912: NEG
59913: PUSH
59914: LD_INT 3
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 5
59924: NEG
59925: PUSH
59926: LD_INT 4
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 5
59936: NEG
59937: PUSH
59938: LD_INT 5
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 3
59948: NEG
59949: PUSH
59950: LD_INT 5
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 5
59960: NEG
59961: PUSH
59962: LD_INT 3
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60017: LD_ADDR_VAR 0 30
60021: PUSH
60022: LD_INT 4
60024: PUSH
60025: LD_INT 4
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 4
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 5
60044: PUSH
60045: LD_INT 4
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 5
60054: PUSH
60055: LD_INT 5
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 4
60064: PUSH
60065: LD_INT 5
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 3
60074: PUSH
60075: LD_INT 4
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 3
60084: PUSH
60085: LD_INT 3
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 5
60094: PUSH
60095: LD_INT 3
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 3
60104: PUSH
60105: LD_INT 5
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: LD_INT 3
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 0
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: LD_INT 3
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: LD_INT 4
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: LD_INT 4
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 3
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: LD_INT 2
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 2
60186: PUSH
60187: LD_INT 4
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 2
60196: NEG
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 4
60207: NEG
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 4
60218: NEG
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 3
60230: NEG
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 3
60241: NEG
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 4
60252: NEG
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 5
60263: NEG
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 5
60274: NEG
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 5
60286: NEG
60287: PUSH
60288: LD_INT 2
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 3
60298: NEG
60299: PUSH
60300: LD_INT 2
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 3
60309: NEG
60310: PUSH
60311: LD_INT 3
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 3
60321: NEG
60322: PUSH
60323: LD_INT 4
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 2
60333: NEG
60334: PUSH
60335: LD_INT 3
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: LD_INT 2
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 3
60357: NEG
60358: PUSH
60359: LD_INT 2
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 4
60369: NEG
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 4
60381: NEG
60382: PUSH
60383: LD_INT 4
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: LD_INT 4
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 4
60405: NEG
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: LD_INT 4
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: LD_INT 5
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: LD_INT 4
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: LD_INT 3
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 3
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: LD_INT 4
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: LD_INT 5
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: LD_INT 3
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 2
60507: NEG
60508: PUSH
60509: LD_INT 5
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60564: LD_ADDR_VAR 0 31
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: LD_INT 4
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: LD_INT 3
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: LD_INT 5
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 5
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: LD_INT 4
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: LD_INT 3
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: LD_INT 5
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 2
60653: NEG
60654: PUSH
60655: LD_INT 3
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 3
60664: NEG
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 3
60675: NEG
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 2
60687: NEG
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 2
60698: NEG
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 3
60709: NEG
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 4
60720: NEG
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 4
60731: NEG
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 4
60743: NEG
60744: PUSH
60745: LD_INT 2
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 2
60755: NEG
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 4
60766: NEG
60767: PUSH
60768: LD_INT 4
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 4
60778: NEG
60779: PUSH
60780: LD_INT 5
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 3
60790: NEG
60791: PUSH
60792: LD_INT 4
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 3
60802: NEG
60803: PUSH
60804: LD_INT 3
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 4
60814: NEG
60815: PUSH
60816: LD_INT 3
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 5
60826: NEG
60827: PUSH
60828: LD_INT 4
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 5
60838: NEG
60839: PUSH
60840: LD_INT 5
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 3
60850: NEG
60851: PUSH
60852: LD_INT 5
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 5
60862: NEG
60863: PUSH
60864: LD_INT 3
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: LD_INT 3
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: LD_INT 4
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: LD_INT 3
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: LD_INT 2
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: LD_INT 2
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 3
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: LD_INT 4
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: LD_INT 2
60956: NEG
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 2
60964: NEG
60965: PUSH
60966: LD_INT 4
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 4
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 4
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 5
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 5
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 4
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 3
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 3
61037: PUSH
61038: LD_INT 1
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 3
61048: PUSH
61049: LD_INT 2
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 5
61059: PUSH
61060: LD_INT 2
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61114: LD_ADDR_VAR 0 32
61118: PUSH
61119: LD_INT 4
61121: NEG
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 4
61132: NEG
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 3
61144: NEG
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 3
61155: NEG
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 4
61166: NEG
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 5
61177: NEG
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 5
61188: NEG
61189: PUSH
61190: LD_INT 1
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 5
61200: NEG
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 3
61212: NEG
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 3
61223: NEG
61224: PUSH
61225: LD_INT 3
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 3
61235: NEG
61236: PUSH
61237: LD_INT 4
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 2
61247: NEG
61248: PUSH
61249: LD_INT 3
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 2
61259: NEG
61260: PUSH
61261: LD_INT 2
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 3
61271: NEG
61272: PUSH
61273: LD_INT 2
61275: NEG
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 4
61283: NEG
61284: PUSH
61285: LD_INT 3
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 4
61295: NEG
61296: PUSH
61297: LD_INT 4
61299: NEG
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: LD_INT 4
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 4
61319: NEG
61320: PUSH
61321: LD_INT 2
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: LD_INT 4
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: LD_INT 5
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: LD_INT 4
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: PUSH
61365: LD_INT 3
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 0
61375: PUSH
61376: LD_INT 3
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: LD_INT 4
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: LD_INT 5
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 2
61410: PUSH
61411: LD_INT 3
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 2
61421: NEG
61422: PUSH
61423: LD_INT 5
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 3
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 3
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 4
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 4
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 3
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 2
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 2
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 4
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 4
61526: PUSH
61527: LD_INT 4
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 4
61536: PUSH
61537: LD_INT 3
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 5
61546: PUSH
61547: LD_INT 4
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 5
61556: PUSH
61557: LD_INT 5
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 4
61566: PUSH
61567: LD_INT 5
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 3
61576: PUSH
61577: LD_INT 4
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 3
61586: PUSH
61587: LD_INT 3
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 5
61596: PUSH
61597: LD_INT 3
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 3
61606: PUSH
61607: LD_INT 5
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61661: LD_ADDR_VAR 0 33
61665: PUSH
61666: LD_INT 4
61668: NEG
61669: PUSH
61670: LD_INT 4
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 4
61680: NEG
61681: PUSH
61682: LD_INT 5
61684: NEG
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 3
61692: NEG
61693: PUSH
61694: LD_INT 4
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 3
61704: NEG
61705: PUSH
61706: LD_INT 3
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 4
61716: NEG
61717: PUSH
61718: LD_INT 3
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 5
61728: NEG
61729: PUSH
61730: LD_INT 4
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 5
61740: NEG
61741: PUSH
61742: LD_INT 5
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 3
61752: NEG
61753: PUSH
61754: LD_INT 5
61756: NEG
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 5
61764: NEG
61765: PUSH
61766: LD_INT 3
61768: NEG
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: LD_INT 3
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: LD_INT 4
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: LD_INT 3
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: LD_INT 2
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: LD_INT 2
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: LD_INT 3
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 1
61843: NEG
61844: PUSH
61845: LD_INT 4
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: PUSH
61856: LD_INT 2
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 2
61866: NEG
61867: PUSH
61868: LD_INT 4
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 4
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 4
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 5
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 5
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 4
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 3
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 3
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 3
61950: PUSH
61951: LD_INT 2
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 5
61961: PUSH
61962: LD_INT 2
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 3
61971: PUSH
61972: LD_INT 3
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 3
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 4
61991: PUSH
61992: LD_INT 3
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 4
62001: PUSH
62002: LD_INT 4
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 3
62011: PUSH
62012: LD_INT 4
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: LD_INT 3
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 2
62031: PUSH
62032: LD_INT 2
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 4
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 2
62051: PUSH
62052: LD_INT 4
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 4
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: LD_INT 3
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: LD_INT 4
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: LD_INT 5
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: LD_INT 5
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: LD_INT 4
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: LD_INT 3
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 2
62133: PUSH
62134: LD_INT 5
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 2
62143: NEG
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62199: LD_ADDR_VAR 0 34
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: LD_INT 4
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 5
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: LD_INT 4
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: LD_INT 3
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: LD_INT 3
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: NEG
62262: PUSH
62263: LD_INT 4
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: LD_INT 5
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 2
62285: PUSH
62286: LD_INT 3
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: LD_INT 5
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 3
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 3
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 4
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 4
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 3
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 2
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 2
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 2
62380: PUSH
62381: LD_INT 2
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 4
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 4
62401: PUSH
62402: LD_INT 4
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 4
62411: PUSH
62412: LD_INT 3
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 5
62421: PUSH
62422: LD_INT 4
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 5
62431: PUSH
62432: LD_INT 5
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 4
62441: PUSH
62442: LD_INT 5
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 3
62451: PUSH
62452: LD_INT 4
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 3
62461: PUSH
62462: LD_INT 3
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 5
62471: PUSH
62472: LD_INT 3
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 3
62481: PUSH
62482: LD_INT 5
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 0
62491: PUSH
62492: LD_INT 3
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 0
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: LD_INT 3
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: LD_INT 4
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: LD_INT 4
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: LD_INT 3
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: NEG
62553: PUSH
62554: LD_INT 2
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 2
62563: PUSH
62564: LD_INT 4
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 2
62573: NEG
62574: PUSH
62575: LD_INT 2
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 4
62584: NEG
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 4
62595: NEG
62596: PUSH
62597: LD_INT 1
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 3
62607: NEG
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 3
62618: NEG
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 4
62629: NEG
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 5
62640: NEG
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 5
62651: NEG
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 5
62663: NEG
62664: PUSH
62665: LD_INT 2
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 3
62675: NEG
62676: PUSH
62677: LD_INT 2
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: ST_TO_ADDR
// end ; end ;
62731: GO 62734
62733: POP
// case btype of b_depot , b_warehouse :
62734: LD_VAR 0 1
62738: PUSH
62739: LD_INT 0
62741: DOUBLE
62742: EQUAL
62743: IFTRUE 62753
62745: LD_INT 1
62747: DOUBLE
62748: EQUAL
62749: IFTRUE 62753
62751: GO 62954
62753: POP
// case nation of nation_american :
62754: LD_VAR 0 5
62758: PUSH
62759: LD_INT 1
62761: DOUBLE
62762: EQUAL
62763: IFTRUE 62767
62765: GO 62823
62767: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62768: LD_ADDR_VAR 0 9
62772: PUSH
62773: LD_VAR 0 11
62777: PUSH
62778: LD_VAR 0 12
62782: PUSH
62783: LD_VAR 0 13
62787: PUSH
62788: LD_VAR 0 14
62792: PUSH
62793: LD_VAR 0 15
62797: PUSH
62798: LD_VAR 0 16
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: PUSH
62811: LD_VAR 0 4
62815: PUSH
62816: LD_INT 1
62818: PLUS
62819: ARRAY
62820: ST_TO_ADDR
62821: GO 62952
62823: LD_INT 2
62825: DOUBLE
62826: EQUAL
62827: IFTRUE 62831
62829: GO 62887
62831: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62832: LD_ADDR_VAR 0 9
62836: PUSH
62837: LD_VAR 0 17
62841: PUSH
62842: LD_VAR 0 18
62846: PUSH
62847: LD_VAR 0 19
62851: PUSH
62852: LD_VAR 0 20
62856: PUSH
62857: LD_VAR 0 21
62861: PUSH
62862: LD_VAR 0 22
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: PUSH
62875: LD_VAR 0 4
62879: PUSH
62880: LD_INT 1
62882: PLUS
62883: ARRAY
62884: ST_TO_ADDR
62885: GO 62952
62887: LD_INT 3
62889: DOUBLE
62890: EQUAL
62891: IFTRUE 62895
62893: GO 62951
62895: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62896: LD_ADDR_VAR 0 9
62900: PUSH
62901: LD_VAR 0 23
62905: PUSH
62906: LD_VAR 0 24
62910: PUSH
62911: LD_VAR 0 25
62915: PUSH
62916: LD_VAR 0 26
62920: PUSH
62921: LD_VAR 0 27
62925: PUSH
62926: LD_VAR 0 28
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: PUSH
62939: LD_VAR 0 4
62943: PUSH
62944: LD_INT 1
62946: PLUS
62947: ARRAY
62948: ST_TO_ADDR
62949: GO 62952
62951: POP
62952: GO 63507
62954: LD_INT 2
62956: DOUBLE
62957: EQUAL
62958: IFTRUE 62968
62960: LD_INT 3
62962: DOUBLE
62963: EQUAL
62964: IFTRUE 62968
62966: GO 63024
62968: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62969: LD_ADDR_VAR 0 9
62973: PUSH
62974: LD_VAR 0 29
62978: PUSH
62979: LD_VAR 0 30
62983: PUSH
62984: LD_VAR 0 31
62988: PUSH
62989: LD_VAR 0 32
62993: PUSH
62994: LD_VAR 0 33
62998: PUSH
62999: LD_VAR 0 34
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: PUSH
63012: LD_VAR 0 4
63016: PUSH
63017: LD_INT 1
63019: PLUS
63020: ARRAY
63021: ST_TO_ADDR
63022: GO 63507
63024: LD_INT 16
63026: DOUBLE
63027: EQUAL
63028: IFTRUE 63086
63030: LD_INT 17
63032: DOUBLE
63033: EQUAL
63034: IFTRUE 63086
63036: LD_INT 18
63038: DOUBLE
63039: EQUAL
63040: IFTRUE 63086
63042: LD_INT 19
63044: DOUBLE
63045: EQUAL
63046: IFTRUE 63086
63048: LD_INT 22
63050: DOUBLE
63051: EQUAL
63052: IFTRUE 63086
63054: LD_INT 20
63056: DOUBLE
63057: EQUAL
63058: IFTRUE 63086
63060: LD_INT 21
63062: DOUBLE
63063: EQUAL
63064: IFTRUE 63086
63066: LD_INT 23
63068: DOUBLE
63069: EQUAL
63070: IFTRUE 63086
63072: LD_INT 24
63074: DOUBLE
63075: EQUAL
63076: IFTRUE 63086
63078: LD_INT 25
63080: DOUBLE
63081: EQUAL
63082: IFTRUE 63086
63084: GO 63142
63086: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63087: LD_ADDR_VAR 0 9
63091: PUSH
63092: LD_VAR 0 35
63096: PUSH
63097: LD_VAR 0 36
63101: PUSH
63102: LD_VAR 0 37
63106: PUSH
63107: LD_VAR 0 38
63111: PUSH
63112: LD_VAR 0 39
63116: PUSH
63117: LD_VAR 0 40
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: PUSH
63130: LD_VAR 0 4
63134: PUSH
63135: LD_INT 1
63137: PLUS
63138: ARRAY
63139: ST_TO_ADDR
63140: GO 63507
63142: LD_INT 6
63144: DOUBLE
63145: EQUAL
63146: IFTRUE 63198
63148: LD_INT 7
63150: DOUBLE
63151: EQUAL
63152: IFTRUE 63198
63154: LD_INT 8
63156: DOUBLE
63157: EQUAL
63158: IFTRUE 63198
63160: LD_INT 13
63162: DOUBLE
63163: EQUAL
63164: IFTRUE 63198
63166: LD_INT 12
63168: DOUBLE
63169: EQUAL
63170: IFTRUE 63198
63172: LD_INT 15
63174: DOUBLE
63175: EQUAL
63176: IFTRUE 63198
63178: LD_INT 11
63180: DOUBLE
63181: EQUAL
63182: IFTRUE 63198
63184: LD_INT 14
63186: DOUBLE
63187: EQUAL
63188: IFTRUE 63198
63190: LD_INT 10
63192: DOUBLE
63193: EQUAL
63194: IFTRUE 63198
63196: GO 63254
63198: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63199: LD_ADDR_VAR 0 9
63203: PUSH
63204: LD_VAR 0 41
63208: PUSH
63209: LD_VAR 0 42
63213: PUSH
63214: LD_VAR 0 43
63218: PUSH
63219: LD_VAR 0 44
63223: PUSH
63224: LD_VAR 0 45
63228: PUSH
63229: LD_VAR 0 46
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: PUSH
63242: LD_VAR 0 4
63246: PUSH
63247: LD_INT 1
63249: PLUS
63250: ARRAY
63251: ST_TO_ADDR
63252: GO 63507
63254: LD_INT 36
63256: DOUBLE
63257: EQUAL
63258: IFTRUE 63262
63260: GO 63318
63262: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63263: LD_ADDR_VAR 0 9
63267: PUSH
63268: LD_VAR 0 47
63272: PUSH
63273: LD_VAR 0 48
63277: PUSH
63278: LD_VAR 0 49
63282: PUSH
63283: LD_VAR 0 50
63287: PUSH
63288: LD_VAR 0 51
63292: PUSH
63293: LD_VAR 0 52
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: PUSH
63306: LD_VAR 0 4
63310: PUSH
63311: LD_INT 1
63313: PLUS
63314: ARRAY
63315: ST_TO_ADDR
63316: GO 63507
63318: LD_INT 4
63320: DOUBLE
63321: EQUAL
63322: IFTRUE 63344
63324: LD_INT 5
63326: DOUBLE
63327: EQUAL
63328: IFTRUE 63344
63330: LD_INT 34
63332: DOUBLE
63333: EQUAL
63334: IFTRUE 63344
63336: LD_INT 37
63338: DOUBLE
63339: EQUAL
63340: IFTRUE 63344
63342: GO 63400
63344: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63345: LD_ADDR_VAR 0 9
63349: PUSH
63350: LD_VAR 0 53
63354: PUSH
63355: LD_VAR 0 54
63359: PUSH
63360: LD_VAR 0 55
63364: PUSH
63365: LD_VAR 0 56
63369: PUSH
63370: LD_VAR 0 57
63374: PUSH
63375: LD_VAR 0 58
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: PUSH
63388: LD_VAR 0 4
63392: PUSH
63393: LD_INT 1
63395: PLUS
63396: ARRAY
63397: ST_TO_ADDR
63398: GO 63507
63400: LD_INT 31
63402: DOUBLE
63403: EQUAL
63404: IFTRUE 63450
63406: LD_INT 32
63408: DOUBLE
63409: EQUAL
63410: IFTRUE 63450
63412: LD_INT 33
63414: DOUBLE
63415: EQUAL
63416: IFTRUE 63450
63418: LD_INT 27
63420: DOUBLE
63421: EQUAL
63422: IFTRUE 63450
63424: LD_INT 26
63426: DOUBLE
63427: EQUAL
63428: IFTRUE 63450
63430: LD_INT 28
63432: DOUBLE
63433: EQUAL
63434: IFTRUE 63450
63436: LD_INT 29
63438: DOUBLE
63439: EQUAL
63440: IFTRUE 63450
63442: LD_INT 30
63444: DOUBLE
63445: EQUAL
63446: IFTRUE 63450
63448: GO 63506
63450: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63451: LD_ADDR_VAR 0 9
63455: PUSH
63456: LD_VAR 0 59
63460: PUSH
63461: LD_VAR 0 60
63465: PUSH
63466: LD_VAR 0 61
63470: PUSH
63471: LD_VAR 0 62
63475: PUSH
63476: LD_VAR 0 63
63480: PUSH
63481: LD_VAR 0 64
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: PUSH
63494: LD_VAR 0 4
63498: PUSH
63499: LD_INT 1
63501: PLUS
63502: ARRAY
63503: ST_TO_ADDR
63504: GO 63507
63506: POP
// temp_list2 = [ ] ;
63507: LD_ADDR_VAR 0 10
63511: PUSH
63512: EMPTY
63513: ST_TO_ADDR
// for i in temp_list do
63514: LD_ADDR_VAR 0 8
63518: PUSH
63519: LD_VAR 0 9
63523: PUSH
63524: FOR_IN
63525: IFFALSE 63577
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63527: LD_ADDR_VAR 0 10
63531: PUSH
63532: LD_VAR 0 10
63536: PUSH
63537: LD_VAR 0 8
63541: PUSH
63542: LD_INT 1
63544: ARRAY
63545: PUSH
63546: LD_VAR 0 2
63550: PLUS
63551: PUSH
63552: LD_VAR 0 8
63556: PUSH
63557: LD_INT 2
63559: ARRAY
63560: PUSH
63561: LD_VAR 0 3
63565: PLUS
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: EMPTY
63572: LIST
63573: ADD
63574: ST_TO_ADDR
63575: GO 63524
63577: POP
63578: POP
// result = temp_list2 ;
63579: LD_ADDR_VAR 0 7
63583: PUSH
63584: LD_VAR 0 10
63588: ST_TO_ADDR
// end ;
63589: LD_VAR 0 7
63593: RET
// export function EnemyInRange ( unit , dist ) ; begin
63594: LD_INT 0
63596: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63597: LD_ADDR_VAR 0 3
63601: PUSH
63602: LD_VAR 0 1
63606: PPUSH
63607: CALL_OW 255
63611: PPUSH
63612: LD_VAR 0 1
63616: PPUSH
63617: CALL_OW 250
63621: PPUSH
63622: LD_VAR 0 1
63626: PPUSH
63627: CALL_OW 251
63631: PPUSH
63632: LD_VAR 0 2
63636: PPUSH
63637: CALL 36990 0 4
63641: PUSH
63642: LD_INT 4
63644: ARRAY
63645: ST_TO_ADDR
// end ;
63646: LD_VAR 0 3
63650: RET
// export function PlayerSeeMe ( unit ) ; begin
63651: LD_INT 0
63653: PPUSH
// result := See ( your_side , unit ) ;
63654: LD_ADDR_VAR 0 2
63658: PUSH
63659: LD_OWVAR 2
63663: PPUSH
63664: LD_VAR 0 1
63668: PPUSH
63669: CALL_OW 292
63673: ST_TO_ADDR
// end ;
63674: LD_VAR 0 2
63678: RET
// export function ReverseDir ( unit ) ; begin
63679: LD_INT 0
63681: PPUSH
// if not unit then
63682: LD_VAR 0 1
63686: NOT
63687: IFFALSE 63691
// exit ;
63689: GO 63714
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63691: LD_ADDR_VAR 0 2
63695: PUSH
63696: LD_VAR 0 1
63700: PPUSH
63701: CALL_OW 254
63705: PUSH
63706: LD_INT 3
63708: PLUS
63709: PUSH
63710: LD_INT 6
63712: MOD
63713: ST_TO_ADDR
// end ;
63714: LD_VAR 0 2
63718: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63719: LD_INT 0
63721: PPUSH
63722: PPUSH
63723: PPUSH
63724: PPUSH
63725: PPUSH
// if not hexes then
63726: LD_VAR 0 2
63730: NOT
63731: IFFALSE 63735
// exit ;
63733: GO 63883
// dist := 9999 ;
63735: LD_ADDR_VAR 0 5
63739: PUSH
63740: LD_INT 9999
63742: ST_TO_ADDR
// for i = 1 to hexes do
63743: LD_ADDR_VAR 0 4
63747: PUSH
63748: DOUBLE
63749: LD_INT 1
63751: DEC
63752: ST_TO_ADDR
63753: LD_VAR 0 2
63757: PUSH
63758: FOR_TO
63759: IFFALSE 63871
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63761: LD_VAR 0 1
63765: PPUSH
63766: LD_VAR 0 2
63770: PUSH
63771: LD_VAR 0 4
63775: ARRAY
63776: PUSH
63777: LD_INT 1
63779: ARRAY
63780: PPUSH
63781: LD_VAR 0 2
63785: PUSH
63786: LD_VAR 0 4
63790: ARRAY
63791: PUSH
63792: LD_INT 2
63794: ARRAY
63795: PPUSH
63796: CALL_OW 297
63800: PUSH
63801: LD_VAR 0 5
63805: LESS
63806: IFFALSE 63869
// begin hex := hexes [ i ] ;
63808: LD_ADDR_VAR 0 7
63812: PUSH
63813: LD_VAR 0 2
63817: PUSH
63818: LD_VAR 0 4
63822: ARRAY
63823: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63824: LD_ADDR_VAR 0 5
63828: PUSH
63829: LD_VAR 0 1
63833: PPUSH
63834: LD_VAR 0 2
63838: PUSH
63839: LD_VAR 0 4
63843: ARRAY
63844: PUSH
63845: LD_INT 1
63847: ARRAY
63848: PPUSH
63849: LD_VAR 0 2
63853: PUSH
63854: LD_VAR 0 4
63858: ARRAY
63859: PUSH
63860: LD_INT 2
63862: ARRAY
63863: PPUSH
63864: CALL_OW 297
63868: ST_TO_ADDR
// end ; end ;
63869: GO 63758
63871: POP
63872: POP
// result := hex ;
63873: LD_ADDR_VAR 0 3
63877: PUSH
63878: LD_VAR 0 7
63882: ST_TO_ADDR
// end ;
63883: LD_VAR 0 3
63887: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63888: LD_INT 0
63890: PPUSH
63891: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63892: LD_VAR 0 1
63896: NOT
63897: PUSH
63898: LD_VAR 0 1
63902: PUSH
63903: LD_INT 21
63905: PUSH
63906: LD_INT 2
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 23
63915: PUSH
63916: LD_INT 2
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PPUSH
63927: CALL_OW 69
63931: IN
63932: NOT
63933: OR
63934: IFFALSE 63938
// exit ;
63936: GO 63985
// for i = 1 to 3 do
63938: LD_ADDR_VAR 0 3
63942: PUSH
63943: DOUBLE
63944: LD_INT 1
63946: DEC
63947: ST_TO_ADDR
63948: LD_INT 3
63950: PUSH
63951: FOR_TO
63952: IFFALSE 63983
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63954: LD_VAR 0 1
63958: PPUSH
63959: CALL_OW 250
63963: PPUSH
63964: LD_VAR 0 1
63968: PPUSH
63969: CALL_OW 251
63973: PPUSH
63974: LD_INT 1
63976: PPUSH
63977: CALL_OW 453
63981: GO 63951
63983: POP
63984: POP
// end ;
63985: LD_VAR 0 2
63989: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63990: LD_INT 0
63992: PPUSH
63993: PPUSH
63994: PPUSH
63995: PPUSH
63996: PPUSH
63997: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63998: LD_VAR 0 1
64002: NOT
64003: PUSH
64004: LD_VAR 0 2
64008: NOT
64009: OR
64010: PUSH
64011: LD_VAR 0 1
64015: PPUSH
64016: CALL_OW 314
64020: OR
64021: IFFALSE 64025
// exit ;
64023: GO 64466
// x := GetX ( enemy_unit ) ;
64025: LD_ADDR_VAR 0 7
64029: PUSH
64030: LD_VAR 0 2
64034: PPUSH
64035: CALL_OW 250
64039: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64040: LD_ADDR_VAR 0 8
64044: PUSH
64045: LD_VAR 0 2
64049: PPUSH
64050: CALL_OW 251
64054: ST_TO_ADDR
// if not x or not y then
64055: LD_VAR 0 7
64059: NOT
64060: PUSH
64061: LD_VAR 0 8
64065: NOT
64066: OR
64067: IFFALSE 64071
// exit ;
64069: GO 64466
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64071: LD_ADDR_VAR 0 6
64075: PUSH
64076: LD_VAR 0 7
64080: PPUSH
64081: LD_INT 0
64083: PPUSH
64084: LD_INT 4
64086: PPUSH
64087: CALL_OW 272
64091: PUSH
64092: LD_VAR 0 8
64096: PPUSH
64097: LD_INT 0
64099: PPUSH
64100: LD_INT 4
64102: PPUSH
64103: CALL_OW 273
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_VAR 0 7
64116: PPUSH
64117: LD_INT 1
64119: PPUSH
64120: LD_INT 4
64122: PPUSH
64123: CALL_OW 272
64127: PUSH
64128: LD_VAR 0 8
64132: PPUSH
64133: LD_INT 1
64135: PPUSH
64136: LD_INT 4
64138: PPUSH
64139: CALL_OW 273
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_VAR 0 7
64152: PPUSH
64153: LD_INT 2
64155: PPUSH
64156: LD_INT 4
64158: PPUSH
64159: CALL_OW 272
64163: PUSH
64164: LD_VAR 0 8
64168: PPUSH
64169: LD_INT 2
64171: PPUSH
64172: LD_INT 4
64174: PPUSH
64175: CALL_OW 273
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_VAR 0 7
64188: PPUSH
64189: LD_INT 3
64191: PPUSH
64192: LD_INT 4
64194: PPUSH
64195: CALL_OW 272
64199: PUSH
64200: LD_VAR 0 8
64204: PPUSH
64205: LD_INT 3
64207: PPUSH
64208: LD_INT 4
64210: PPUSH
64211: CALL_OW 273
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_VAR 0 7
64224: PPUSH
64225: LD_INT 4
64227: PPUSH
64228: LD_INT 4
64230: PPUSH
64231: CALL_OW 272
64235: PUSH
64236: LD_VAR 0 8
64240: PPUSH
64241: LD_INT 4
64243: PPUSH
64244: LD_INT 4
64246: PPUSH
64247: CALL_OW 273
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_VAR 0 7
64260: PPUSH
64261: LD_INT 5
64263: PPUSH
64264: LD_INT 4
64266: PPUSH
64267: CALL_OW 272
64271: PUSH
64272: LD_VAR 0 8
64276: PPUSH
64277: LD_INT 5
64279: PPUSH
64280: LD_INT 4
64282: PPUSH
64283: CALL_OW 273
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: ST_TO_ADDR
// for i = tmp downto 1 do
64300: LD_ADDR_VAR 0 4
64304: PUSH
64305: DOUBLE
64306: LD_VAR 0 6
64310: INC
64311: ST_TO_ADDR
64312: LD_INT 1
64314: PUSH
64315: FOR_DOWNTO
64316: IFFALSE 64417
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64318: LD_VAR 0 6
64322: PUSH
64323: LD_VAR 0 4
64327: ARRAY
64328: PUSH
64329: LD_INT 1
64331: ARRAY
64332: PPUSH
64333: LD_VAR 0 6
64337: PUSH
64338: LD_VAR 0 4
64342: ARRAY
64343: PUSH
64344: LD_INT 2
64346: ARRAY
64347: PPUSH
64348: CALL_OW 488
64352: NOT
64353: PUSH
64354: LD_VAR 0 6
64358: PUSH
64359: LD_VAR 0 4
64363: ARRAY
64364: PUSH
64365: LD_INT 1
64367: ARRAY
64368: PPUSH
64369: LD_VAR 0 6
64373: PUSH
64374: LD_VAR 0 4
64378: ARRAY
64379: PUSH
64380: LD_INT 2
64382: ARRAY
64383: PPUSH
64384: CALL_OW 428
64388: PUSH
64389: LD_INT 0
64391: NONEQUAL
64392: OR
64393: IFFALSE 64415
// tmp := Delete ( tmp , i ) ;
64395: LD_ADDR_VAR 0 6
64399: PUSH
64400: LD_VAR 0 6
64404: PPUSH
64405: LD_VAR 0 4
64409: PPUSH
64410: CALL_OW 3
64414: ST_TO_ADDR
64415: GO 64315
64417: POP
64418: POP
// j := GetClosestHex ( unit , tmp ) ;
64419: LD_ADDR_VAR 0 5
64423: PUSH
64424: LD_VAR 0 1
64428: PPUSH
64429: LD_VAR 0 6
64433: PPUSH
64434: CALL 63719 0 2
64438: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64439: LD_VAR 0 1
64443: PPUSH
64444: LD_VAR 0 5
64448: PUSH
64449: LD_INT 1
64451: ARRAY
64452: PPUSH
64453: LD_VAR 0 5
64457: PUSH
64458: LD_INT 2
64460: ARRAY
64461: PPUSH
64462: CALL_OW 111
// end ;
64466: LD_VAR 0 3
64470: RET
// export function PrepareApemanSoldier ( ) ; begin
64471: LD_INT 0
64473: PPUSH
// uc_nation := 0 ;
64474: LD_ADDR_OWVAR 21
64478: PUSH
64479: LD_INT 0
64481: ST_TO_ADDR
// hc_sex := sex_male ;
64482: LD_ADDR_OWVAR 27
64486: PUSH
64487: LD_INT 1
64489: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64490: LD_ADDR_OWVAR 28
64494: PUSH
64495: LD_INT 15
64497: ST_TO_ADDR
// hc_gallery :=  ;
64498: LD_ADDR_OWVAR 33
64502: PUSH
64503: LD_STRING 
64505: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64506: LD_ADDR_OWVAR 31
64510: PUSH
64511: LD_INT 0
64513: PPUSH
64514: LD_INT 3
64516: PPUSH
64517: CALL_OW 12
64521: PUSH
64522: LD_INT 0
64524: PPUSH
64525: LD_INT 3
64527: PPUSH
64528: CALL_OW 12
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: ST_TO_ADDR
// end ;
64545: LD_VAR 0 1
64549: RET
// export function PrepareApemanEngineer ( ) ; begin
64550: LD_INT 0
64552: PPUSH
// uc_nation := 0 ;
64553: LD_ADDR_OWVAR 21
64557: PUSH
64558: LD_INT 0
64560: ST_TO_ADDR
// hc_sex := sex_male ;
64561: LD_ADDR_OWVAR 27
64565: PUSH
64566: LD_INT 1
64568: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64569: LD_ADDR_OWVAR 28
64573: PUSH
64574: LD_INT 16
64576: ST_TO_ADDR
// hc_gallery :=  ;
64577: LD_ADDR_OWVAR 33
64581: PUSH
64582: LD_STRING 
64584: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64585: LD_ADDR_OWVAR 31
64589: PUSH
64590: LD_INT 0
64592: PPUSH
64593: LD_INT 3
64595: PPUSH
64596: CALL_OW 12
64600: PUSH
64601: LD_INT 0
64603: PPUSH
64604: LD_INT 3
64606: PPUSH
64607: CALL_OW 12
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: ST_TO_ADDR
// end ;
64624: LD_VAR 0 1
64628: RET
// export function PrepareApeman ( agressivity ) ; begin
64629: LD_INT 0
64631: PPUSH
// uc_side := 0 ;
64632: LD_ADDR_OWVAR 20
64636: PUSH
64637: LD_INT 0
64639: ST_TO_ADDR
// uc_nation := 0 ;
64640: LD_ADDR_OWVAR 21
64644: PUSH
64645: LD_INT 0
64647: ST_TO_ADDR
// hc_sex := sex_male ;
64648: LD_ADDR_OWVAR 27
64652: PUSH
64653: LD_INT 1
64655: ST_TO_ADDR
// hc_class := class_apeman ;
64656: LD_ADDR_OWVAR 28
64660: PUSH
64661: LD_INT 12
64663: ST_TO_ADDR
// hc_gallery :=  ;
64664: LD_ADDR_OWVAR 33
64668: PUSH
64669: LD_STRING 
64671: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64672: LD_ADDR_OWVAR 35
64676: PUSH
64677: LD_VAR 0 1
64681: NEG
64682: PPUSH
64683: LD_VAR 0 1
64687: PPUSH
64688: CALL_OW 12
64692: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64693: LD_ADDR_OWVAR 31
64697: PUSH
64698: LD_INT 0
64700: PPUSH
64701: LD_INT 3
64703: PPUSH
64704: CALL_OW 12
64708: PUSH
64709: LD_INT 0
64711: PPUSH
64712: LD_INT 3
64714: PPUSH
64715: CALL_OW 12
64719: PUSH
64720: LD_INT 0
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: ST_TO_ADDR
// end ;
64732: LD_VAR 0 2
64736: RET
// export function PrepareTiger ( agressivity ) ; begin
64737: LD_INT 0
64739: PPUSH
// uc_side := 0 ;
64740: LD_ADDR_OWVAR 20
64744: PUSH
64745: LD_INT 0
64747: ST_TO_ADDR
// uc_nation := 0 ;
64748: LD_ADDR_OWVAR 21
64752: PUSH
64753: LD_INT 0
64755: ST_TO_ADDR
// hc_class := class_tiger ;
64756: LD_ADDR_OWVAR 28
64760: PUSH
64761: LD_INT 14
64763: ST_TO_ADDR
// hc_gallery :=  ;
64764: LD_ADDR_OWVAR 33
64768: PUSH
64769: LD_STRING 
64771: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64772: LD_ADDR_OWVAR 35
64776: PUSH
64777: LD_VAR 0 1
64781: NEG
64782: PPUSH
64783: LD_VAR 0 1
64787: PPUSH
64788: CALL_OW 12
64792: ST_TO_ADDR
// end ;
64793: LD_VAR 0 2
64797: RET
// export function PrepareEnchidna ( ) ; begin
64798: LD_INT 0
64800: PPUSH
// uc_side := 0 ;
64801: LD_ADDR_OWVAR 20
64805: PUSH
64806: LD_INT 0
64808: ST_TO_ADDR
// uc_nation := 0 ;
64809: LD_ADDR_OWVAR 21
64813: PUSH
64814: LD_INT 0
64816: ST_TO_ADDR
// hc_class := class_baggie ;
64817: LD_ADDR_OWVAR 28
64821: PUSH
64822: LD_INT 13
64824: ST_TO_ADDR
// hc_gallery :=  ;
64825: LD_ADDR_OWVAR 33
64829: PUSH
64830: LD_STRING 
64832: ST_TO_ADDR
// end ;
64833: LD_VAR 0 1
64837: RET
// export function PrepareFrog ( ) ; begin
64838: LD_INT 0
64840: PPUSH
// uc_side := 0 ;
64841: LD_ADDR_OWVAR 20
64845: PUSH
64846: LD_INT 0
64848: ST_TO_ADDR
// uc_nation := 0 ;
64849: LD_ADDR_OWVAR 21
64853: PUSH
64854: LD_INT 0
64856: ST_TO_ADDR
// hc_class := class_frog ;
64857: LD_ADDR_OWVAR 28
64861: PUSH
64862: LD_INT 19
64864: ST_TO_ADDR
// hc_gallery :=  ;
64865: LD_ADDR_OWVAR 33
64869: PUSH
64870: LD_STRING 
64872: ST_TO_ADDR
// end ;
64873: LD_VAR 0 1
64877: RET
// export function PrepareFish ( ) ; begin
64878: LD_INT 0
64880: PPUSH
// uc_side := 0 ;
64881: LD_ADDR_OWVAR 20
64885: PUSH
64886: LD_INT 0
64888: ST_TO_ADDR
// uc_nation := 0 ;
64889: LD_ADDR_OWVAR 21
64893: PUSH
64894: LD_INT 0
64896: ST_TO_ADDR
// hc_class := class_fish ;
64897: LD_ADDR_OWVAR 28
64901: PUSH
64902: LD_INT 20
64904: ST_TO_ADDR
// hc_gallery :=  ;
64905: LD_ADDR_OWVAR 33
64909: PUSH
64910: LD_STRING 
64912: ST_TO_ADDR
// end ;
64913: LD_VAR 0 1
64917: RET
// export function PrepareBird ( ) ; begin
64918: LD_INT 0
64920: PPUSH
// uc_side := 0 ;
64921: LD_ADDR_OWVAR 20
64925: PUSH
64926: LD_INT 0
64928: ST_TO_ADDR
// uc_nation := 0 ;
64929: LD_ADDR_OWVAR 21
64933: PUSH
64934: LD_INT 0
64936: ST_TO_ADDR
// hc_class := class_phororhacos ;
64937: LD_ADDR_OWVAR 28
64941: PUSH
64942: LD_INT 18
64944: ST_TO_ADDR
// hc_gallery :=  ;
64945: LD_ADDR_OWVAR 33
64949: PUSH
64950: LD_STRING 
64952: ST_TO_ADDR
// end ;
64953: LD_VAR 0 1
64957: RET
// export function PrepareHorse ( ) ; begin
64958: LD_INT 0
64960: PPUSH
// uc_side := 0 ;
64961: LD_ADDR_OWVAR 20
64965: PUSH
64966: LD_INT 0
64968: ST_TO_ADDR
// uc_nation := 0 ;
64969: LD_ADDR_OWVAR 21
64973: PUSH
64974: LD_INT 0
64976: ST_TO_ADDR
// hc_class := 21 ;
64977: LD_ADDR_OWVAR 28
64981: PUSH
64982: LD_INT 21
64984: ST_TO_ADDR
// hc_gallery :=  ;
64985: LD_ADDR_OWVAR 33
64989: PUSH
64990: LD_STRING 
64992: ST_TO_ADDR
// end ;
64993: LD_VAR 0 1
64997: RET
// export function PrepareMastodont ( ) ; begin
64998: LD_INT 0
65000: PPUSH
// uc_side := 0 ;
65001: LD_ADDR_OWVAR 20
65005: PUSH
65006: LD_INT 0
65008: ST_TO_ADDR
// uc_nation := 0 ;
65009: LD_ADDR_OWVAR 21
65013: PUSH
65014: LD_INT 0
65016: ST_TO_ADDR
// vc_chassis := 31 ;
65017: LD_ADDR_OWVAR 37
65021: PUSH
65022: LD_INT 31
65024: ST_TO_ADDR
// vc_control := control_rider ;
65025: LD_ADDR_OWVAR 38
65029: PUSH
65030: LD_INT 4
65032: ST_TO_ADDR
// end ;
65033: LD_VAR 0 1
65037: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65038: LD_INT 0
65040: PPUSH
65041: PPUSH
65042: PPUSH
// uc_side = 0 ;
65043: LD_ADDR_OWVAR 20
65047: PUSH
65048: LD_INT 0
65050: ST_TO_ADDR
// uc_nation = 0 ;
65051: LD_ADDR_OWVAR 21
65055: PUSH
65056: LD_INT 0
65058: ST_TO_ADDR
// InitHc_All ( ) ;
65059: CALL_OW 584
// InitVc ;
65063: CALL_OW 20
// if mastodonts then
65067: LD_VAR 0 6
65071: IFFALSE 65138
// for i = 1 to mastodonts do
65073: LD_ADDR_VAR 0 11
65077: PUSH
65078: DOUBLE
65079: LD_INT 1
65081: DEC
65082: ST_TO_ADDR
65083: LD_VAR 0 6
65087: PUSH
65088: FOR_TO
65089: IFFALSE 65136
// begin vc_chassis := 31 ;
65091: LD_ADDR_OWVAR 37
65095: PUSH
65096: LD_INT 31
65098: ST_TO_ADDR
// vc_control := control_rider ;
65099: LD_ADDR_OWVAR 38
65103: PUSH
65104: LD_INT 4
65106: ST_TO_ADDR
// animal := CreateVehicle ;
65107: LD_ADDR_VAR 0 12
65111: PUSH
65112: CALL_OW 45
65116: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65117: LD_VAR 0 12
65121: PPUSH
65122: LD_VAR 0 8
65126: PPUSH
65127: LD_INT 0
65129: PPUSH
65130: CALL 67273 0 3
// end ;
65134: GO 65088
65136: POP
65137: POP
// if horses then
65138: LD_VAR 0 5
65142: IFFALSE 65209
// for i = 1 to horses do
65144: LD_ADDR_VAR 0 11
65148: PUSH
65149: DOUBLE
65150: LD_INT 1
65152: DEC
65153: ST_TO_ADDR
65154: LD_VAR 0 5
65158: PUSH
65159: FOR_TO
65160: IFFALSE 65207
// begin hc_class := 21 ;
65162: LD_ADDR_OWVAR 28
65166: PUSH
65167: LD_INT 21
65169: ST_TO_ADDR
// hc_gallery :=  ;
65170: LD_ADDR_OWVAR 33
65174: PUSH
65175: LD_STRING 
65177: ST_TO_ADDR
// animal := CreateHuman ;
65178: LD_ADDR_VAR 0 12
65182: PUSH
65183: CALL_OW 44
65187: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65188: LD_VAR 0 12
65192: PPUSH
65193: LD_VAR 0 8
65197: PPUSH
65198: LD_INT 0
65200: PPUSH
65201: CALL 67273 0 3
// end ;
65205: GO 65159
65207: POP
65208: POP
// if birds then
65209: LD_VAR 0 1
65213: IFFALSE 65280
// for i = 1 to birds do
65215: LD_ADDR_VAR 0 11
65219: PUSH
65220: DOUBLE
65221: LD_INT 1
65223: DEC
65224: ST_TO_ADDR
65225: LD_VAR 0 1
65229: PUSH
65230: FOR_TO
65231: IFFALSE 65278
// begin hc_class = 18 ;
65233: LD_ADDR_OWVAR 28
65237: PUSH
65238: LD_INT 18
65240: ST_TO_ADDR
// hc_gallery =  ;
65241: LD_ADDR_OWVAR 33
65245: PUSH
65246: LD_STRING 
65248: ST_TO_ADDR
// animal := CreateHuman ;
65249: LD_ADDR_VAR 0 12
65253: PUSH
65254: CALL_OW 44
65258: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65259: LD_VAR 0 12
65263: PPUSH
65264: LD_VAR 0 8
65268: PPUSH
65269: LD_INT 0
65271: PPUSH
65272: CALL 67273 0 3
// end ;
65276: GO 65230
65278: POP
65279: POP
// if tigers then
65280: LD_VAR 0 2
65284: IFFALSE 65368
// for i = 1 to tigers do
65286: LD_ADDR_VAR 0 11
65290: PUSH
65291: DOUBLE
65292: LD_INT 1
65294: DEC
65295: ST_TO_ADDR
65296: LD_VAR 0 2
65300: PUSH
65301: FOR_TO
65302: IFFALSE 65366
// begin hc_class = class_tiger ;
65304: LD_ADDR_OWVAR 28
65308: PUSH
65309: LD_INT 14
65311: ST_TO_ADDR
// hc_gallery =  ;
65312: LD_ADDR_OWVAR 33
65316: PUSH
65317: LD_STRING 
65319: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65320: LD_ADDR_OWVAR 35
65324: PUSH
65325: LD_INT 7
65327: NEG
65328: PPUSH
65329: LD_INT 7
65331: PPUSH
65332: CALL_OW 12
65336: ST_TO_ADDR
// animal := CreateHuman ;
65337: LD_ADDR_VAR 0 12
65341: PUSH
65342: CALL_OW 44
65346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65347: LD_VAR 0 12
65351: PPUSH
65352: LD_VAR 0 8
65356: PPUSH
65357: LD_INT 0
65359: PPUSH
65360: CALL 67273 0 3
// end ;
65364: GO 65301
65366: POP
65367: POP
// if apemans then
65368: LD_VAR 0 3
65372: IFFALSE 65495
// for i = 1 to apemans do
65374: LD_ADDR_VAR 0 11
65378: PUSH
65379: DOUBLE
65380: LD_INT 1
65382: DEC
65383: ST_TO_ADDR
65384: LD_VAR 0 3
65388: PUSH
65389: FOR_TO
65390: IFFALSE 65493
// begin hc_class = class_apeman ;
65392: LD_ADDR_OWVAR 28
65396: PUSH
65397: LD_INT 12
65399: ST_TO_ADDR
// hc_gallery =  ;
65400: LD_ADDR_OWVAR 33
65404: PUSH
65405: LD_STRING 
65407: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65408: LD_ADDR_OWVAR 35
65412: PUSH
65413: LD_INT 2
65415: NEG
65416: PPUSH
65417: LD_INT 2
65419: PPUSH
65420: CALL_OW 12
65424: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65425: LD_ADDR_OWVAR 31
65429: PUSH
65430: LD_INT 1
65432: PPUSH
65433: LD_INT 3
65435: PPUSH
65436: CALL_OW 12
65440: PUSH
65441: LD_INT 1
65443: PPUSH
65444: LD_INT 3
65446: PPUSH
65447: CALL_OW 12
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: LD_INT 0
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: ST_TO_ADDR
// animal := CreateHuman ;
65464: LD_ADDR_VAR 0 12
65468: PUSH
65469: CALL_OW 44
65473: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65474: LD_VAR 0 12
65478: PPUSH
65479: LD_VAR 0 8
65483: PPUSH
65484: LD_INT 0
65486: PPUSH
65487: CALL 67273 0 3
// end ;
65491: GO 65389
65493: POP
65494: POP
// if enchidnas then
65495: LD_VAR 0 4
65499: IFFALSE 65566
// for i = 1 to enchidnas do
65501: LD_ADDR_VAR 0 11
65505: PUSH
65506: DOUBLE
65507: LD_INT 1
65509: DEC
65510: ST_TO_ADDR
65511: LD_VAR 0 4
65515: PUSH
65516: FOR_TO
65517: IFFALSE 65564
// begin hc_class = 13 ;
65519: LD_ADDR_OWVAR 28
65523: PUSH
65524: LD_INT 13
65526: ST_TO_ADDR
// hc_gallery =  ;
65527: LD_ADDR_OWVAR 33
65531: PUSH
65532: LD_STRING 
65534: ST_TO_ADDR
// animal := CreateHuman ;
65535: LD_ADDR_VAR 0 12
65539: PUSH
65540: CALL_OW 44
65544: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65545: LD_VAR 0 12
65549: PPUSH
65550: LD_VAR 0 8
65554: PPUSH
65555: LD_INT 0
65557: PPUSH
65558: CALL 67273 0 3
// end ;
65562: GO 65516
65564: POP
65565: POP
// if fishes then
65566: LD_VAR 0 7
65570: IFFALSE 65637
// for i = 1 to fishes do
65572: LD_ADDR_VAR 0 11
65576: PUSH
65577: DOUBLE
65578: LD_INT 1
65580: DEC
65581: ST_TO_ADDR
65582: LD_VAR 0 7
65586: PUSH
65587: FOR_TO
65588: IFFALSE 65635
// begin hc_class = 20 ;
65590: LD_ADDR_OWVAR 28
65594: PUSH
65595: LD_INT 20
65597: ST_TO_ADDR
// hc_gallery =  ;
65598: LD_ADDR_OWVAR 33
65602: PUSH
65603: LD_STRING 
65605: ST_TO_ADDR
// animal := CreateHuman ;
65606: LD_ADDR_VAR 0 12
65610: PUSH
65611: CALL_OW 44
65615: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65616: LD_VAR 0 12
65620: PPUSH
65621: LD_VAR 0 9
65625: PPUSH
65626: LD_INT 0
65628: PPUSH
65629: CALL 67273 0 3
// end ;
65633: GO 65587
65635: POP
65636: POP
// end ;
65637: LD_VAR 0 10
65641: RET
// export function WantHeal ( sci , unit ) ; begin
65642: LD_INT 0
65644: PPUSH
// if GetTaskList ( sci ) > 0 then
65645: LD_VAR 0 1
65649: PPUSH
65650: CALL_OW 437
65654: PUSH
65655: LD_INT 0
65657: GREATER
65658: IFFALSE 65728
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65660: LD_VAR 0 1
65664: PPUSH
65665: CALL_OW 437
65669: PUSH
65670: LD_INT 1
65672: ARRAY
65673: PUSH
65674: LD_INT 1
65676: ARRAY
65677: PUSH
65678: LD_STRING l
65680: EQUAL
65681: PUSH
65682: LD_VAR 0 1
65686: PPUSH
65687: CALL_OW 437
65691: PUSH
65692: LD_INT 1
65694: ARRAY
65695: PUSH
65696: LD_INT 4
65698: ARRAY
65699: PUSH
65700: LD_VAR 0 2
65704: EQUAL
65705: AND
65706: IFFALSE 65718
// result := true else
65708: LD_ADDR_VAR 0 3
65712: PUSH
65713: LD_INT 1
65715: ST_TO_ADDR
65716: GO 65726
// result := false ;
65718: LD_ADDR_VAR 0 3
65722: PUSH
65723: LD_INT 0
65725: ST_TO_ADDR
// end else
65726: GO 65736
// result := false ;
65728: LD_ADDR_VAR 0 3
65732: PUSH
65733: LD_INT 0
65735: ST_TO_ADDR
// end ;
65736: LD_VAR 0 3
65740: RET
// export function HealTarget ( sci ) ; begin
65741: LD_INT 0
65743: PPUSH
// if not sci then
65744: LD_VAR 0 1
65748: NOT
65749: IFFALSE 65753
// exit ;
65751: GO 65818
// result := 0 ;
65753: LD_ADDR_VAR 0 2
65757: PUSH
65758: LD_INT 0
65760: ST_TO_ADDR
// if GetTaskList ( sci ) then
65761: LD_VAR 0 1
65765: PPUSH
65766: CALL_OW 437
65770: IFFALSE 65818
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65772: LD_VAR 0 1
65776: PPUSH
65777: CALL_OW 437
65781: PUSH
65782: LD_INT 1
65784: ARRAY
65785: PUSH
65786: LD_INT 1
65788: ARRAY
65789: PUSH
65790: LD_STRING l
65792: EQUAL
65793: IFFALSE 65818
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65795: LD_ADDR_VAR 0 2
65799: PUSH
65800: LD_VAR 0 1
65804: PPUSH
65805: CALL_OW 437
65809: PUSH
65810: LD_INT 1
65812: ARRAY
65813: PUSH
65814: LD_INT 4
65816: ARRAY
65817: ST_TO_ADDR
// end ;
65818: LD_VAR 0 2
65822: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65823: LD_INT 0
65825: PPUSH
65826: PPUSH
65827: PPUSH
65828: PPUSH
// if not base_units then
65829: LD_VAR 0 1
65833: NOT
65834: IFFALSE 65838
// exit ;
65836: GO 65925
// result := false ;
65838: LD_ADDR_VAR 0 2
65842: PUSH
65843: LD_INT 0
65845: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65846: LD_ADDR_VAR 0 5
65850: PUSH
65851: LD_VAR 0 1
65855: PPUSH
65856: LD_INT 21
65858: PUSH
65859: LD_INT 3
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PPUSH
65866: CALL_OW 72
65870: ST_TO_ADDR
// if not tmp then
65871: LD_VAR 0 5
65875: NOT
65876: IFFALSE 65880
// exit ;
65878: GO 65925
// for i in tmp do
65880: LD_ADDR_VAR 0 3
65884: PUSH
65885: LD_VAR 0 5
65889: PUSH
65890: FOR_IN
65891: IFFALSE 65923
// begin result := EnemyInRange ( i , 22 ) ;
65893: LD_ADDR_VAR 0 2
65897: PUSH
65898: LD_VAR 0 3
65902: PPUSH
65903: LD_INT 22
65905: PPUSH
65906: CALL 63594 0 2
65910: ST_TO_ADDR
// if result then
65911: LD_VAR 0 2
65915: IFFALSE 65921
// exit ;
65917: POP
65918: POP
65919: GO 65925
// end ;
65921: GO 65890
65923: POP
65924: POP
// end ;
65925: LD_VAR 0 2
65929: RET
// export function FilterByTag ( units , tag ) ; begin
65930: LD_INT 0
65932: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65933: LD_ADDR_VAR 0 3
65937: PUSH
65938: LD_VAR 0 1
65942: PPUSH
65943: LD_INT 120
65945: PUSH
65946: LD_VAR 0 2
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PPUSH
65955: CALL_OW 72
65959: ST_TO_ADDR
// end ;
65960: LD_VAR 0 3
65964: RET
// export function IsDriver ( un ) ; begin
65965: LD_INT 0
65967: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65968: LD_ADDR_VAR 0 2
65972: PUSH
65973: LD_VAR 0 1
65977: PUSH
65978: LD_INT 55
65980: PUSH
65981: EMPTY
65982: LIST
65983: PPUSH
65984: CALL_OW 69
65988: IN
65989: ST_TO_ADDR
// end ;
65990: LD_VAR 0 2
65994: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65995: LD_INT 0
65997: PPUSH
65998: PPUSH
// list := [ ] ;
65999: LD_ADDR_VAR 0 5
66003: PUSH
66004: EMPTY
66005: ST_TO_ADDR
// case d of 0 :
66006: LD_VAR 0 3
66010: PUSH
66011: LD_INT 0
66013: DOUBLE
66014: EQUAL
66015: IFTRUE 66019
66017: GO 66152
66019: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66020: LD_ADDR_VAR 0 5
66024: PUSH
66025: LD_VAR 0 1
66029: PUSH
66030: LD_INT 4
66032: MINUS
66033: PUSH
66034: LD_VAR 0 2
66038: PUSH
66039: LD_INT 4
66041: MINUS
66042: PUSH
66043: LD_INT 2
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: LIST
66050: PUSH
66051: LD_VAR 0 1
66055: PUSH
66056: LD_INT 3
66058: MINUS
66059: PUSH
66060: LD_VAR 0 2
66064: PUSH
66065: LD_INT 1
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: LIST
66072: PUSH
66073: LD_VAR 0 1
66077: PUSH
66078: LD_INT 4
66080: PLUS
66081: PUSH
66082: LD_VAR 0 2
66086: PUSH
66087: LD_INT 4
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: PUSH
66095: LD_VAR 0 1
66099: PUSH
66100: LD_INT 3
66102: PLUS
66103: PUSH
66104: LD_VAR 0 2
66108: PUSH
66109: LD_INT 3
66111: PLUS
66112: PUSH
66113: LD_INT 5
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: LIST
66120: PUSH
66121: LD_VAR 0 1
66125: PUSH
66126: LD_VAR 0 2
66130: PUSH
66131: LD_INT 4
66133: PLUS
66134: PUSH
66135: LD_INT 0
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: LIST
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: ST_TO_ADDR
// end ; 1 :
66150: GO 66850
66152: LD_INT 1
66154: DOUBLE
66155: EQUAL
66156: IFTRUE 66160
66158: GO 66293
66160: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66161: LD_ADDR_VAR 0 5
66165: PUSH
66166: LD_VAR 0 1
66170: PUSH
66171: LD_VAR 0 2
66175: PUSH
66176: LD_INT 4
66178: MINUS
66179: PUSH
66180: LD_INT 3
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: PUSH
66188: LD_VAR 0 1
66192: PUSH
66193: LD_INT 3
66195: MINUS
66196: PUSH
66197: LD_VAR 0 2
66201: PUSH
66202: LD_INT 3
66204: MINUS
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: LIST
66213: PUSH
66214: LD_VAR 0 1
66218: PUSH
66219: LD_INT 4
66221: MINUS
66222: PUSH
66223: LD_VAR 0 2
66227: PUSH
66228: LD_INT 1
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: LIST
66235: PUSH
66236: LD_VAR 0 1
66240: PUSH
66241: LD_VAR 0 2
66245: PUSH
66246: LD_INT 3
66248: PLUS
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: LIST
66257: PUSH
66258: LD_VAR 0 1
66262: PUSH
66263: LD_INT 4
66265: PLUS
66266: PUSH
66267: LD_VAR 0 2
66271: PUSH
66272: LD_INT 4
66274: PLUS
66275: PUSH
66276: LD_INT 5
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: LIST
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: ST_TO_ADDR
// end ; 2 :
66291: GO 66850
66293: LD_INT 2
66295: DOUBLE
66296: EQUAL
66297: IFTRUE 66301
66299: GO 66430
66301: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66302: LD_ADDR_VAR 0 5
66306: PUSH
66307: LD_VAR 0 1
66311: PUSH
66312: LD_VAR 0 2
66316: PUSH
66317: LD_INT 3
66319: MINUS
66320: PUSH
66321: LD_INT 3
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: LIST
66328: PUSH
66329: LD_VAR 0 1
66333: PUSH
66334: LD_INT 4
66336: PLUS
66337: PUSH
66338: LD_VAR 0 2
66342: PUSH
66343: LD_INT 4
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: LIST
66350: PUSH
66351: LD_VAR 0 1
66355: PUSH
66356: LD_VAR 0 2
66360: PUSH
66361: LD_INT 4
66363: PLUS
66364: PUSH
66365: LD_INT 0
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: LIST
66372: PUSH
66373: LD_VAR 0 1
66377: PUSH
66378: LD_INT 3
66380: MINUS
66381: PUSH
66382: LD_VAR 0 2
66386: PUSH
66387: LD_INT 1
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: LIST
66394: PUSH
66395: LD_VAR 0 1
66399: PUSH
66400: LD_INT 4
66402: MINUS
66403: PUSH
66404: LD_VAR 0 2
66408: PUSH
66409: LD_INT 4
66411: MINUS
66412: PUSH
66413: LD_INT 2
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: LIST
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: ST_TO_ADDR
// end ; 3 :
66428: GO 66850
66430: LD_INT 3
66432: DOUBLE
66433: EQUAL
66434: IFTRUE 66438
66436: GO 66571
66438: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66439: LD_ADDR_VAR 0 5
66443: PUSH
66444: LD_VAR 0 1
66448: PUSH
66449: LD_INT 3
66451: PLUS
66452: PUSH
66453: LD_VAR 0 2
66457: PUSH
66458: LD_INT 4
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: LIST
66465: PUSH
66466: LD_VAR 0 1
66470: PUSH
66471: LD_INT 4
66473: PLUS
66474: PUSH
66475: LD_VAR 0 2
66479: PUSH
66480: LD_INT 4
66482: PLUS
66483: PUSH
66484: LD_INT 5
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: LIST
66491: PUSH
66492: LD_VAR 0 1
66496: PUSH
66497: LD_INT 4
66499: MINUS
66500: PUSH
66501: LD_VAR 0 2
66505: PUSH
66506: LD_INT 1
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: LIST
66513: PUSH
66514: LD_VAR 0 1
66518: PUSH
66519: LD_VAR 0 2
66523: PUSH
66524: LD_INT 4
66526: MINUS
66527: PUSH
66528: LD_INT 3
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: LIST
66535: PUSH
66536: LD_VAR 0 1
66540: PUSH
66541: LD_INT 3
66543: MINUS
66544: PUSH
66545: LD_VAR 0 2
66549: PUSH
66550: LD_INT 3
66552: MINUS
66553: PUSH
66554: LD_INT 2
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: LIST
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: ST_TO_ADDR
// end ; 4 :
66569: GO 66850
66571: LD_INT 4
66573: DOUBLE
66574: EQUAL
66575: IFTRUE 66579
66577: GO 66712
66579: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66580: LD_ADDR_VAR 0 5
66584: PUSH
66585: LD_VAR 0 1
66589: PUSH
66590: LD_VAR 0 2
66594: PUSH
66595: LD_INT 4
66597: PLUS
66598: PUSH
66599: LD_INT 0
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: LIST
66606: PUSH
66607: LD_VAR 0 1
66611: PUSH
66612: LD_INT 3
66614: PLUS
66615: PUSH
66616: LD_VAR 0 2
66620: PUSH
66621: LD_INT 3
66623: PLUS
66624: PUSH
66625: LD_INT 5
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: LIST
66632: PUSH
66633: LD_VAR 0 1
66637: PUSH
66638: LD_INT 4
66640: PLUS
66641: PUSH
66642: LD_VAR 0 2
66646: PUSH
66647: LD_INT 4
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: LIST
66654: PUSH
66655: LD_VAR 0 1
66659: PUSH
66660: LD_VAR 0 2
66664: PUSH
66665: LD_INT 3
66667: MINUS
66668: PUSH
66669: LD_INT 3
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: LIST
66676: PUSH
66677: LD_VAR 0 1
66681: PUSH
66682: LD_INT 4
66684: MINUS
66685: PUSH
66686: LD_VAR 0 2
66690: PUSH
66691: LD_INT 4
66693: MINUS
66694: PUSH
66695: LD_INT 2
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: LIST
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: ST_TO_ADDR
// end ; 5 :
66710: GO 66850
66712: LD_INT 5
66714: DOUBLE
66715: EQUAL
66716: IFTRUE 66720
66718: GO 66849
66720: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66721: LD_ADDR_VAR 0 5
66725: PUSH
66726: LD_VAR 0 1
66730: PUSH
66731: LD_INT 4
66733: MINUS
66734: PUSH
66735: LD_VAR 0 2
66739: PUSH
66740: LD_INT 1
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: LIST
66747: PUSH
66748: LD_VAR 0 1
66752: PUSH
66753: LD_VAR 0 2
66757: PUSH
66758: LD_INT 4
66760: MINUS
66761: PUSH
66762: LD_INT 3
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: LIST
66769: PUSH
66770: LD_VAR 0 1
66774: PUSH
66775: LD_INT 4
66777: PLUS
66778: PUSH
66779: LD_VAR 0 2
66783: PUSH
66784: LD_INT 4
66786: PLUS
66787: PUSH
66788: LD_INT 5
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: LIST
66795: PUSH
66796: LD_VAR 0 1
66800: PUSH
66801: LD_INT 3
66803: PLUS
66804: PUSH
66805: LD_VAR 0 2
66809: PUSH
66810: LD_INT 4
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: LIST
66817: PUSH
66818: LD_VAR 0 1
66822: PUSH
66823: LD_VAR 0 2
66827: PUSH
66828: LD_INT 3
66830: PLUS
66831: PUSH
66832: LD_INT 0
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: LIST
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: ST_TO_ADDR
// end ; end ;
66847: GO 66850
66849: POP
// result := list ;
66850: LD_ADDR_VAR 0 4
66854: PUSH
66855: LD_VAR 0 5
66859: ST_TO_ADDR
// end ;
66860: LD_VAR 0 4
66864: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66865: LD_INT 0
66867: PPUSH
66868: PPUSH
66869: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66870: LD_VAR 0 1
66874: NOT
66875: PUSH
66876: LD_VAR 0 2
66880: PUSH
66881: LD_INT 1
66883: PUSH
66884: LD_INT 2
66886: PUSH
66887: LD_INT 3
66889: PUSH
66890: LD_INT 4
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: IN
66899: NOT
66900: OR
66901: IFFALSE 66905
// exit ;
66903: GO 66997
// tmp := [ ] ;
66905: LD_ADDR_VAR 0 5
66909: PUSH
66910: EMPTY
66911: ST_TO_ADDR
// for i in units do
66912: LD_ADDR_VAR 0 4
66916: PUSH
66917: LD_VAR 0 1
66921: PUSH
66922: FOR_IN
66923: IFFALSE 66966
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66925: LD_ADDR_VAR 0 5
66929: PUSH
66930: LD_VAR 0 5
66934: PPUSH
66935: LD_VAR 0 5
66939: PUSH
66940: LD_INT 1
66942: PLUS
66943: PPUSH
66944: LD_VAR 0 4
66948: PPUSH
66949: LD_VAR 0 2
66953: PPUSH
66954: CALL_OW 259
66958: PPUSH
66959: CALL_OW 2
66963: ST_TO_ADDR
66964: GO 66922
66966: POP
66967: POP
// if not tmp then
66968: LD_VAR 0 5
66972: NOT
66973: IFFALSE 66977
// exit ;
66975: GO 66997
// result := SortListByListDesc ( units , tmp ) ;
66977: LD_ADDR_VAR 0 3
66981: PUSH
66982: LD_VAR 0 1
66986: PPUSH
66987: LD_VAR 0 5
66991: PPUSH
66992: CALL_OW 77
66996: ST_TO_ADDR
// end ;
66997: LD_VAR 0 3
67001: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67002: LD_INT 0
67004: PPUSH
67005: PPUSH
67006: PPUSH
// result := false ;
67007: LD_ADDR_VAR 0 3
67011: PUSH
67012: LD_INT 0
67014: ST_TO_ADDR
// x := GetX ( building ) ;
67015: LD_ADDR_VAR 0 4
67019: PUSH
67020: LD_VAR 0 2
67024: PPUSH
67025: CALL_OW 250
67029: ST_TO_ADDR
// y := GetY ( building ) ;
67030: LD_ADDR_VAR 0 5
67034: PUSH
67035: LD_VAR 0 2
67039: PPUSH
67040: CALL_OW 251
67044: ST_TO_ADDR
// if not building or not x or not y then
67045: LD_VAR 0 2
67049: NOT
67050: PUSH
67051: LD_VAR 0 4
67055: NOT
67056: OR
67057: PUSH
67058: LD_VAR 0 5
67062: NOT
67063: OR
67064: IFFALSE 67068
// exit ;
67066: GO 67160
// if GetTaskList ( unit ) then
67068: LD_VAR 0 1
67072: PPUSH
67073: CALL_OW 437
67077: IFFALSE 67160
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67079: LD_STRING e
67081: PUSH
67082: LD_VAR 0 1
67086: PPUSH
67087: CALL_OW 437
67091: PUSH
67092: LD_INT 1
67094: ARRAY
67095: PUSH
67096: LD_INT 1
67098: ARRAY
67099: EQUAL
67100: PUSH
67101: LD_VAR 0 4
67105: PUSH
67106: LD_VAR 0 1
67110: PPUSH
67111: CALL_OW 437
67115: PUSH
67116: LD_INT 1
67118: ARRAY
67119: PUSH
67120: LD_INT 2
67122: ARRAY
67123: EQUAL
67124: AND
67125: PUSH
67126: LD_VAR 0 5
67130: PUSH
67131: LD_VAR 0 1
67135: PPUSH
67136: CALL_OW 437
67140: PUSH
67141: LD_INT 1
67143: ARRAY
67144: PUSH
67145: LD_INT 3
67147: ARRAY
67148: EQUAL
67149: AND
67150: IFFALSE 67160
// result := true end ;
67152: LD_ADDR_VAR 0 3
67156: PUSH
67157: LD_INT 1
67159: ST_TO_ADDR
// end ;
67160: LD_VAR 0 3
67164: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67165: LD_INT 0
67167: PPUSH
// result := false ;
67168: LD_ADDR_VAR 0 4
67172: PUSH
67173: LD_INT 0
67175: ST_TO_ADDR
// if GetTaskList ( unit ) then
67176: LD_VAR 0 1
67180: PPUSH
67181: CALL_OW 437
67185: IFFALSE 67268
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67187: LD_STRING M
67189: PUSH
67190: LD_VAR 0 1
67194: PPUSH
67195: CALL_OW 437
67199: PUSH
67200: LD_INT 1
67202: ARRAY
67203: PUSH
67204: LD_INT 1
67206: ARRAY
67207: EQUAL
67208: PUSH
67209: LD_VAR 0 2
67213: PUSH
67214: LD_VAR 0 1
67218: PPUSH
67219: CALL_OW 437
67223: PUSH
67224: LD_INT 1
67226: ARRAY
67227: PUSH
67228: LD_INT 2
67230: ARRAY
67231: EQUAL
67232: AND
67233: PUSH
67234: LD_VAR 0 3
67238: PUSH
67239: LD_VAR 0 1
67243: PPUSH
67244: CALL_OW 437
67248: PUSH
67249: LD_INT 1
67251: ARRAY
67252: PUSH
67253: LD_INT 3
67255: ARRAY
67256: EQUAL
67257: AND
67258: IFFALSE 67268
// result := true ;
67260: LD_ADDR_VAR 0 4
67264: PUSH
67265: LD_INT 1
67267: ST_TO_ADDR
// end ; end ;
67268: LD_VAR 0 4
67272: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67273: LD_INT 0
67275: PPUSH
67276: PPUSH
67277: PPUSH
67278: PPUSH
// if not unit or not area then
67279: LD_VAR 0 1
67283: NOT
67284: PUSH
67285: LD_VAR 0 2
67289: NOT
67290: OR
67291: IFFALSE 67295
// exit ;
67293: GO 67459
// tmp := AreaToList ( area , i ) ;
67295: LD_ADDR_VAR 0 6
67299: PUSH
67300: LD_VAR 0 2
67304: PPUSH
67305: LD_VAR 0 5
67309: PPUSH
67310: CALL_OW 517
67314: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67315: LD_ADDR_VAR 0 5
67319: PUSH
67320: DOUBLE
67321: LD_INT 1
67323: DEC
67324: ST_TO_ADDR
67325: LD_VAR 0 6
67329: PUSH
67330: LD_INT 1
67332: ARRAY
67333: PUSH
67334: FOR_TO
67335: IFFALSE 67457
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67337: LD_ADDR_VAR 0 7
67341: PUSH
67342: LD_VAR 0 6
67346: PUSH
67347: LD_INT 1
67349: ARRAY
67350: PUSH
67351: LD_VAR 0 5
67355: ARRAY
67356: PUSH
67357: LD_VAR 0 6
67361: PUSH
67362: LD_INT 2
67364: ARRAY
67365: PUSH
67366: LD_VAR 0 5
67370: ARRAY
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67376: LD_VAR 0 7
67380: PUSH
67381: LD_INT 1
67383: ARRAY
67384: PPUSH
67385: LD_VAR 0 7
67389: PUSH
67390: LD_INT 2
67392: ARRAY
67393: PPUSH
67394: CALL_OW 428
67398: PUSH
67399: LD_INT 0
67401: EQUAL
67402: IFFALSE 67455
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67404: LD_VAR 0 1
67408: PPUSH
67409: LD_VAR 0 7
67413: PUSH
67414: LD_INT 1
67416: ARRAY
67417: PPUSH
67418: LD_VAR 0 7
67422: PUSH
67423: LD_INT 2
67425: ARRAY
67426: PPUSH
67427: LD_VAR 0 3
67431: PPUSH
67432: CALL_OW 48
// result := IsPlaced ( unit ) ;
67436: LD_ADDR_VAR 0 4
67440: PUSH
67441: LD_VAR 0 1
67445: PPUSH
67446: CALL_OW 305
67450: ST_TO_ADDR
// exit ;
67451: POP
67452: POP
67453: GO 67459
// end ; end ;
67455: GO 67334
67457: POP
67458: POP
// end ;
67459: LD_VAR 0 4
67463: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67464: LD_INT 0
67466: PPUSH
67467: PPUSH
67468: PPUSH
// if not side or side > 8 then
67469: LD_VAR 0 1
67473: NOT
67474: PUSH
67475: LD_VAR 0 1
67479: PUSH
67480: LD_INT 8
67482: GREATER
67483: OR
67484: IFFALSE 67488
// exit ;
67486: GO 67675
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67488: LD_ADDR_VAR 0 4
67492: PUSH
67493: LD_INT 22
67495: PUSH
67496: LD_VAR 0 1
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 21
67507: PUSH
67508: LD_INT 3
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PPUSH
67519: CALL_OW 69
67523: ST_TO_ADDR
// if not tmp then
67524: LD_VAR 0 4
67528: NOT
67529: IFFALSE 67533
// exit ;
67531: GO 67675
// enable_addtolog := true ;
67533: LD_ADDR_OWVAR 81
67537: PUSH
67538: LD_INT 1
67540: ST_TO_ADDR
// AddToLog ( [ ) ;
67541: LD_STRING [
67543: PPUSH
67544: CALL_OW 561
// for i in tmp do
67548: LD_ADDR_VAR 0 3
67552: PUSH
67553: LD_VAR 0 4
67557: PUSH
67558: FOR_IN
67559: IFFALSE 67666
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67561: LD_STRING [
67563: PUSH
67564: LD_VAR 0 3
67568: PPUSH
67569: CALL_OW 266
67573: STR
67574: PUSH
67575: LD_STRING , 
67577: STR
67578: PUSH
67579: LD_VAR 0 3
67583: PPUSH
67584: CALL_OW 250
67588: STR
67589: PUSH
67590: LD_STRING , 
67592: STR
67593: PUSH
67594: LD_VAR 0 3
67598: PPUSH
67599: CALL_OW 251
67603: STR
67604: PUSH
67605: LD_STRING , 
67607: STR
67608: PUSH
67609: LD_VAR 0 3
67613: PPUSH
67614: CALL_OW 254
67618: STR
67619: PUSH
67620: LD_STRING , 
67622: STR
67623: PUSH
67624: LD_VAR 0 3
67628: PPUSH
67629: LD_INT 1
67631: PPUSH
67632: CALL_OW 268
67636: STR
67637: PUSH
67638: LD_STRING , 
67640: STR
67641: PUSH
67642: LD_VAR 0 3
67646: PPUSH
67647: LD_INT 2
67649: PPUSH
67650: CALL_OW 268
67654: STR
67655: PUSH
67656: LD_STRING ],
67658: STR
67659: PPUSH
67660: CALL_OW 561
// end ;
67664: GO 67558
67666: POP
67667: POP
// AddToLog ( ]; ) ;
67668: LD_STRING ];
67670: PPUSH
67671: CALL_OW 561
// end ;
67675: LD_VAR 0 2
67679: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67680: LD_INT 0
67682: PPUSH
67683: PPUSH
67684: PPUSH
67685: PPUSH
67686: PPUSH
// if not area or not rate or not max then
67687: LD_VAR 0 1
67691: NOT
67692: PUSH
67693: LD_VAR 0 2
67697: NOT
67698: OR
67699: PUSH
67700: LD_VAR 0 4
67704: NOT
67705: OR
67706: IFFALSE 67710
// exit ;
67708: GO 67899
// while 1 do
67710: LD_INT 1
67712: IFFALSE 67899
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67714: LD_ADDR_VAR 0 9
67718: PUSH
67719: LD_VAR 0 1
67723: PPUSH
67724: LD_INT 1
67726: PPUSH
67727: CALL_OW 287
67731: PUSH
67732: LD_INT 10
67734: MUL
67735: ST_TO_ADDR
// r := rate / 10 ;
67736: LD_ADDR_VAR 0 7
67740: PUSH
67741: LD_VAR 0 2
67745: PUSH
67746: LD_INT 10
67748: DIVREAL
67749: ST_TO_ADDR
// time := 1 1$00 ;
67750: LD_ADDR_VAR 0 8
67754: PUSH
67755: LD_INT 2100
67757: ST_TO_ADDR
// if amount < min then
67758: LD_VAR 0 9
67762: PUSH
67763: LD_VAR 0 3
67767: LESS
67768: IFFALSE 67786
// r := r * 2 else
67770: LD_ADDR_VAR 0 7
67774: PUSH
67775: LD_VAR 0 7
67779: PUSH
67780: LD_INT 2
67782: MUL
67783: ST_TO_ADDR
67784: GO 67812
// if amount > max then
67786: LD_VAR 0 9
67790: PUSH
67791: LD_VAR 0 4
67795: GREATER
67796: IFFALSE 67812
// r := r / 2 ;
67798: LD_ADDR_VAR 0 7
67802: PUSH
67803: LD_VAR 0 7
67807: PUSH
67808: LD_INT 2
67810: DIVREAL
67811: ST_TO_ADDR
// time := time / r ;
67812: LD_ADDR_VAR 0 8
67816: PUSH
67817: LD_VAR 0 8
67821: PUSH
67822: LD_VAR 0 7
67826: DIVREAL
67827: ST_TO_ADDR
// if time < 0 then
67828: LD_VAR 0 8
67832: PUSH
67833: LD_INT 0
67835: LESS
67836: IFFALSE 67853
// time := time * - 1 ;
67838: LD_ADDR_VAR 0 8
67842: PUSH
67843: LD_VAR 0 8
67847: PUSH
67848: LD_INT 1
67850: NEG
67851: MUL
67852: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67853: LD_VAR 0 8
67857: PUSH
67858: LD_INT 35
67860: PPUSH
67861: LD_INT 875
67863: PPUSH
67864: CALL_OW 12
67868: PLUS
67869: PPUSH
67870: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67874: LD_INT 1
67876: PPUSH
67877: LD_INT 5
67879: PPUSH
67880: CALL_OW 12
67884: PPUSH
67885: LD_VAR 0 1
67889: PPUSH
67890: LD_INT 1
67892: PPUSH
67893: CALL_OW 55
// end ;
67897: GO 67710
// end ;
67899: LD_VAR 0 5
67903: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67904: LD_INT 0
67906: PPUSH
67907: PPUSH
67908: PPUSH
67909: PPUSH
67910: PPUSH
67911: PPUSH
67912: PPUSH
67913: PPUSH
// if not turrets or not factories then
67914: LD_VAR 0 1
67918: NOT
67919: PUSH
67920: LD_VAR 0 2
67924: NOT
67925: OR
67926: IFFALSE 67930
// exit ;
67928: GO 68237
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67930: LD_ADDR_VAR 0 10
67934: PUSH
67935: LD_INT 5
67937: PUSH
67938: LD_INT 6
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 2
67947: PUSH
67948: LD_INT 4
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 3
67957: PUSH
67958: LD_INT 5
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 24
67972: PUSH
67973: LD_INT 25
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 23
67982: PUSH
67983: LD_INT 27
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PUSH
67994: LD_INT 42
67996: PUSH
67997: LD_INT 43
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 44
68006: PUSH
68007: LD_INT 46
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 45
68016: PUSH
68017: LD_INT 47
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: LIST
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: LIST
68033: ST_TO_ADDR
// result := [ ] ;
68034: LD_ADDR_VAR 0 3
68038: PUSH
68039: EMPTY
68040: ST_TO_ADDR
// for i in turrets do
68041: LD_ADDR_VAR 0 4
68045: PUSH
68046: LD_VAR 0 1
68050: PUSH
68051: FOR_IN
68052: IFFALSE 68235
// begin nat := GetNation ( i ) ;
68054: LD_ADDR_VAR 0 7
68058: PUSH
68059: LD_VAR 0 4
68063: PPUSH
68064: CALL_OW 248
68068: ST_TO_ADDR
// weapon := 0 ;
68069: LD_ADDR_VAR 0 8
68073: PUSH
68074: LD_INT 0
68076: ST_TO_ADDR
// if not nat then
68077: LD_VAR 0 7
68081: NOT
68082: IFFALSE 68086
// continue ;
68084: GO 68051
// for j in list [ nat ] do
68086: LD_ADDR_VAR 0 5
68090: PUSH
68091: LD_VAR 0 10
68095: PUSH
68096: LD_VAR 0 7
68100: ARRAY
68101: PUSH
68102: FOR_IN
68103: IFFALSE 68144
// if GetBWeapon ( i ) = j [ 1 ] then
68105: LD_VAR 0 4
68109: PPUSH
68110: CALL_OW 269
68114: PUSH
68115: LD_VAR 0 5
68119: PUSH
68120: LD_INT 1
68122: ARRAY
68123: EQUAL
68124: IFFALSE 68142
// begin weapon := j [ 2 ] ;
68126: LD_ADDR_VAR 0 8
68130: PUSH
68131: LD_VAR 0 5
68135: PUSH
68136: LD_INT 2
68138: ARRAY
68139: ST_TO_ADDR
// break ;
68140: GO 68144
// end ;
68142: GO 68102
68144: POP
68145: POP
// if not weapon then
68146: LD_VAR 0 8
68150: NOT
68151: IFFALSE 68155
// continue ;
68153: GO 68051
// for k in factories do
68155: LD_ADDR_VAR 0 6
68159: PUSH
68160: LD_VAR 0 2
68164: PUSH
68165: FOR_IN
68166: IFFALSE 68231
// begin weapons := AvailableWeaponList ( k ) ;
68168: LD_ADDR_VAR 0 9
68172: PUSH
68173: LD_VAR 0 6
68177: PPUSH
68178: CALL_OW 478
68182: ST_TO_ADDR
// if not weapons then
68183: LD_VAR 0 9
68187: NOT
68188: IFFALSE 68192
// continue ;
68190: GO 68165
// if weapon in weapons then
68192: LD_VAR 0 8
68196: PUSH
68197: LD_VAR 0 9
68201: IN
68202: IFFALSE 68229
// begin result := [ i , weapon ] ;
68204: LD_ADDR_VAR 0 3
68208: PUSH
68209: LD_VAR 0 4
68213: PUSH
68214: LD_VAR 0 8
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: ST_TO_ADDR
// exit ;
68223: POP
68224: POP
68225: POP
68226: POP
68227: GO 68237
// end ; end ;
68229: GO 68165
68231: POP
68232: POP
// end ;
68233: GO 68051
68235: POP
68236: POP
// end ;
68237: LD_VAR 0 3
68241: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68242: LD_INT 0
68244: PPUSH
// if not side or side > 8 then
68245: LD_VAR 0 3
68249: NOT
68250: PUSH
68251: LD_VAR 0 3
68255: PUSH
68256: LD_INT 8
68258: GREATER
68259: OR
68260: IFFALSE 68264
// exit ;
68262: GO 68323
// if not range then
68264: LD_VAR 0 4
68268: NOT
68269: IFFALSE 68280
// range := - 12 ;
68271: LD_ADDR_VAR 0 4
68275: PUSH
68276: LD_INT 12
68278: NEG
68279: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68280: LD_VAR 0 1
68284: PPUSH
68285: LD_VAR 0 2
68289: PPUSH
68290: LD_VAR 0 3
68294: PPUSH
68295: LD_VAR 0 4
68299: PPUSH
68300: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68304: LD_VAR 0 1
68308: PPUSH
68309: LD_VAR 0 2
68313: PPUSH
68314: LD_VAR 0 3
68318: PPUSH
68319: CALL_OW 331
// end ;
68323: LD_VAR 0 5
68327: RET
// export function Video ( mode ) ; begin
68328: LD_INT 0
68330: PPUSH
// ingame_video = mode ;
68331: LD_ADDR_OWVAR 52
68335: PUSH
68336: LD_VAR 0 1
68340: ST_TO_ADDR
// interface_hidden = mode ;
68341: LD_ADDR_OWVAR 54
68345: PUSH
68346: LD_VAR 0 1
68350: ST_TO_ADDR
// end ;
68351: LD_VAR 0 2
68355: RET
// export function Join ( array , element ) ; begin
68356: LD_INT 0
68358: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68359: LD_ADDR_VAR 0 3
68363: PUSH
68364: LD_VAR 0 1
68368: PPUSH
68369: LD_VAR 0 1
68373: PUSH
68374: LD_INT 1
68376: PLUS
68377: PPUSH
68378: LD_VAR 0 2
68382: PPUSH
68383: CALL_OW 1
68387: ST_TO_ADDR
// end ;
68388: LD_VAR 0 3
68392: RET
// export function JoinUnion ( array , element ) ; begin
68393: LD_INT 0
68395: PPUSH
// result := array union element ;
68396: LD_ADDR_VAR 0 3
68400: PUSH
68401: LD_VAR 0 1
68405: PUSH
68406: LD_VAR 0 2
68410: UNION
68411: ST_TO_ADDR
// end ;
68412: LD_VAR 0 3
68416: RET
// export function GetBehemoths ( side ) ; begin
68417: LD_INT 0
68419: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68420: LD_ADDR_VAR 0 2
68424: PUSH
68425: LD_INT 22
68427: PUSH
68428: LD_VAR 0 1
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 31
68439: PUSH
68440: LD_INT 25
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PPUSH
68451: CALL_OW 69
68455: ST_TO_ADDR
// end ;
68456: LD_VAR 0 2
68460: RET
// export function Shuffle ( array ) ; var i , index ; begin
68461: LD_INT 0
68463: PPUSH
68464: PPUSH
68465: PPUSH
// result := [ ] ;
68466: LD_ADDR_VAR 0 2
68470: PUSH
68471: EMPTY
68472: ST_TO_ADDR
// if not array then
68473: LD_VAR 0 1
68477: NOT
68478: IFFALSE 68482
// exit ;
68480: GO 68581
// Randomize ;
68482: CALL_OW 10
// for i = array downto 1 do
68486: LD_ADDR_VAR 0 3
68490: PUSH
68491: DOUBLE
68492: LD_VAR 0 1
68496: INC
68497: ST_TO_ADDR
68498: LD_INT 1
68500: PUSH
68501: FOR_DOWNTO
68502: IFFALSE 68579
// begin index := rand ( 1 , array ) ;
68504: LD_ADDR_VAR 0 4
68508: PUSH
68509: LD_INT 1
68511: PPUSH
68512: LD_VAR 0 1
68516: PPUSH
68517: CALL_OW 12
68521: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68522: LD_ADDR_VAR 0 2
68526: PUSH
68527: LD_VAR 0 2
68531: PPUSH
68532: LD_VAR 0 2
68536: PUSH
68537: LD_INT 1
68539: PLUS
68540: PPUSH
68541: LD_VAR 0 1
68545: PUSH
68546: LD_VAR 0 4
68550: ARRAY
68551: PPUSH
68552: CALL_OW 2
68556: ST_TO_ADDR
// array := Delete ( array , index ) ;
68557: LD_ADDR_VAR 0 1
68561: PUSH
68562: LD_VAR 0 1
68566: PPUSH
68567: LD_VAR 0 4
68571: PPUSH
68572: CALL_OW 3
68576: ST_TO_ADDR
// end ;
68577: GO 68501
68579: POP
68580: POP
// end ;
68581: LD_VAR 0 2
68585: RET
// export function GetBaseMaterials ( base ) ; begin
68586: LD_INT 0
68588: PPUSH
// result := [ 0 , 0 , 0 ] ;
68589: LD_ADDR_VAR 0 2
68593: PUSH
68594: LD_INT 0
68596: PUSH
68597: LD_INT 0
68599: PUSH
68600: LD_INT 0
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: LIST
68607: ST_TO_ADDR
// if not base then
68608: LD_VAR 0 1
68612: NOT
68613: IFFALSE 68617
// exit ;
68615: GO 68666
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68617: LD_ADDR_VAR 0 2
68621: PUSH
68622: LD_VAR 0 1
68626: PPUSH
68627: LD_INT 1
68629: PPUSH
68630: CALL_OW 275
68634: PUSH
68635: LD_VAR 0 1
68639: PPUSH
68640: LD_INT 2
68642: PPUSH
68643: CALL_OW 275
68647: PUSH
68648: LD_VAR 0 1
68652: PPUSH
68653: LD_INT 3
68655: PPUSH
68656: CALL_OW 275
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: LIST
68665: ST_TO_ADDR
// end ;
68666: LD_VAR 0 2
68670: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68671: LD_INT 0
68673: PPUSH
68674: PPUSH
// result := array ;
68675: LD_ADDR_VAR 0 3
68679: PUSH
68680: LD_VAR 0 1
68684: ST_TO_ADDR
// if size >= result then
68685: LD_VAR 0 2
68689: PUSH
68690: LD_VAR 0 3
68694: GREATEREQUAL
68695: IFFALSE 68699
// exit ;
68697: GO 68749
// if size then
68699: LD_VAR 0 2
68703: IFFALSE 68749
// for i := array downto size do
68705: LD_ADDR_VAR 0 4
68709: PUSH
68710: DOUBLE
68711: LD_VAR 0 1
68715: INC
68716: ST_TO_ADDR
68717: LD_VAR 0 2
68721: PUSH
68722: FOR_DOWNTO
68723: IFFALSE 68747
// result := Delete ( result , result ) ;
68725: LD_ADDR_VAR 0 3
68729: PUSH
68730: LD_VAR 0 3
68734: PPUSH
68735: LD_VAR 0 3
68739: PPUSH
68740: CALL_OW 3
68744: ST_TO_ADDR
68745: GO 68722
68747: POP
68748: POP
// end ;
68749: LD_VAR 0 3
68753: RET
// export function ComExit ( unit ) ; var tmp ; begin
68754: LD_INT 0
68756: PPUSH
68757: PPUSH
// if not IsInUnit ( unit ) then
68758: LD_VAR 0 1
68762: PPUSH
68763: CALL_OW 310
68767: NOT
68768: IFFALSE 68772
// exit ;
68770: GO 68832
// tmp := IsInUnit ( unit ) ;
68772: LD_ADDR_VAR 0 3
68776: PUSH
68777: LD_VAR 0 1
68781: PPUSH
68782: CALL_OW 310
68786: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68787: LD_VAR 0 3
68791: PPUSH
68792: CALL_OW 247
68796: PUSH
68797: LD_INT 2
68799: EQUAL
68800: IFFALSE 68813
// ComExitVehicle ( unit ) else
68802: LD_VAR 0 1
68806: PPUSH
68807: CALL_OW 121
68811: GO 68822
// ComExitBuilding ( unit ) ;
68813: LD_VAR 0 1
68817: PPUSH
68818: CALL_OW 122
// result := tmp ;
68822: LD_ADDR_VAR 0 2
68826: PUSH
68827: LD_VAR 0 3
68831: ST_TO_ADDR
// end ;
68832: LD_VAR 0 2
68836: RET
// export function ComExitAll ( units ) ; var i ; begin
68837: LD_INT 0
68839: PPUSH
68840: PPUSH
// if not units then
68841: LD_VAR 0 1
68845: NOT
68846: IFFALSE 68850
// exit ;
68848: GO 68876
// for i in units do
68850: LD_ADDR_VAR 0 3
68854: PUSH
68855: LD_VAR 0 1
68859: PUSH
68860: FOR_IN
68861: IFFALSE 68874
// ComExit ( i ) ;
68863: LD_VAR 0 3
68867: PPUSH
68868: CALL 68754 0 1
68872: GO 68860
68874: POP
68875: POP
// end ;
68876: LD_VAR 0 2
68880: RET
// export function ResetHc ; begin
68881: LD_INT 0
68883: PPUSH
// InitHc ;
68884: CALL_OW 19
// hc_importance := 0 ;
68888: LD_ADDR_OWVAR 32
68892: PUSH
68893: LD_INT 0
68895: ST_TO_ADDR
// end ;
68896: LD_VAR 0 1
68900: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68901: LD_INT 0
68903: PPUSH
68904: PPUSH
68905: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68906: LD_ADDR_VAR 0 6
68910: PUSH
68911: LD_VAR 0 1
68915: PUSH
68916: LD_VAR 0 3
68920: PLUS
68921: PUSH
68922: LD_INT 2
68924: DIV
68925: ST_TO_ADDR
// if _x < 0 then
68926: LD_VAR 0 6
68930: PUSH
68931: LD_INT 0
68933: LESS
68934: IFFALSE 68951
// _x := _x * - 1 ;
68936: LD_ADDR_VAR 0 6
68940: PUSH
68941: LD_VAR 0 6
68945: PUSH
68946: LD_INT 1
68948: NEG
68949: MUL
68950: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68951: LD_ADDR_VAR 0 7
68955: PUSH
68956: LD_VAR 0 2
68960: PUSH
68961: LD_VAR 0 4
68965: PLUS
68966: PUSH
68967: LD_INT 2
68969: DIV
68970: ST_TO_ADDR
// if _y < 0 then
68971: LD_VAR 0 7
68975: PUSH
68976: LD_INT 0
68978: LESS
68979: IFFALSE 68996
// _y := _y * - 1 ;
68981: LD_ADDR_VAR 0 7
68985: PUSH
68986: LD_VAR 0 7
68990: PUSH
68991: LD_INT 1
68993: NEG
68994: MUL
68995: ST_TO_ADDR
// result := [ _x , _y ] ;
68996: LD_ADDR_VAR 0 5
69000: PUSH
69001: LD_VAR 0 6
69005: PUSH
69006: LD_VAR 0 7
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: ST_TO_ADDR
// end ;
69015: LD_VAR 0 5
69019: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69020: LD_INT 0
69022: PPUSH
69023: PPUSH
69024: PPUSH
69025: PPUSH
// task := GetTaskList ( unit ) ;
69026: LD_ADDR_VAR 0 7
69030: PUSH
69031: LD_VAR 0 1
69035: PPUSH
69036: CALL_OW 437
69040: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69041: LD_VAR 0 7
69045: NOT
69046: PUSH
69047: LD_VAR 0 1
69051: PPUSH
69052: LD_VAR 0 2
69056: PPUSH
69057: CALL_OW 308
69061: NOT
69062: AND
69063: IFFALSE 69067
// exit ;
69065: GO 69185
// if IsInArea ( unit , area ) then
69067: LD_VAR 0 1
69071: PPUSH
69072: LD_VAR 0 2
69076: PPUSH
69077: CALL_OW 308
69081: IFFALSE 69099
// begin ComMoveToArea ( unit , goAway ) ;
69083: LD_VAR 0 1
69087: PPUSH
69088: LD_VAR 0 3
69092: PPUSH
69093: CALL_OW 113
// exit ;
69097: GO 69185
// end ; if task [ 1 ] [ 1 ] <> M then
69099: LD_VAR 0 7
69103: PUSH
69104: LD_INT 1
69106: ARRAY
69107: PUSH
69108: LD_INT 1
69110: ARRAY
69111: PUSH
69112: LD_STRING M
69114: NONEQUAL
69115: IFFALSE 69119
// exit ;
69117: GO 69185
// x := task [ 1 ] [ 2 ] ;
69119: LD_ADDR_VAR 0 5
69123: PUSH
69124: LD_VAR 0 7
69128: PUSH
69129: LD_INT 1
69131: ARRAY
69132: PUSH
69133: LD_INT 2
69135: ARRAY
69136: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69137: LD_ADDR_VAR 0 6
69141: PUSH
69142: LD_VAR 0 7
69146: PUSH
69147: LD_INT 1
69149: ARRAY
69150: PUSH
69151: LD_INT 3
69153: ARRAY
69154: ST_TO_ADDR
// if InArea ( x , y , area ) then
69155: LD_VAR 0 5
69159: PPUSH
69160: LD_VAR 0 6
69164: PPUSH
69165: LD_VAR 0 2
69169: PPUSH
69170: CALL_OW 309
69174: IFFALSE 69185
// ComStop ( unit ) ;
69176: LD_VAR 0 1
69180: PPUSH
69181: CALL_OW 141
// end ;
69185: LD_VAR 0 4
69189: RET
// export function Abs ( value ) ; begin
69190: LD_INT 0
69192: PPUSH
// result := value ;
69193: LD_ADDR_VAR 0 2
69197: PUSH
69198: LD_VAR 0 1
69202: ST_TO_ADDR
// if value < 0 then
69203: LD_VAR 0 1
69207: PUSH
69208: LD_INT 0
69210: LESS
69211: IFFALSE 69228
// result := value * - 1 ;
69213: LD_ADDR_VAR 0 2
69217: PUSH
69218: LD_VAR 0 1
69222: PUSH
69223: LD_INT 1
69225: NEG
69226: MUL
69227: ST_TO_ADDR
// end ;
69228: LD_VAR 0 2
69232: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69233: LD_INT 0
69235: PPUSH
69236: PPUSH
69237: PPUSH
69238: PPUSH
69239: PPUSH
69240: PPUSH
69241: PPUSH
69242: PPUSH
// if not unit or not building then
69243: LD_VAR 0 1
69247: NOT
69248: PUSH
69249: LD_VAR 0 2
69253: NOT
69254: OR
69255: IFFALSE 69259
// exit ;
69257: GO 69485
// x := GetX ( building ) ;
69259: LD_ADDR_VAR 0 4
69263: PUSH
69264: LD_VAR 0 2
69268: PPUSH
69269: CALL_OW 250
69273: ST_TO_ADDR
// y := GetY ( building ) ;
69274: LD_ADDR_VAR 0 6
69278: PUSH
69279: LD_VAR 0 2
69283: PPUSH
69284: CALL_OW 251
69288: ST_TO_ADDR
// d := GetDir ( building ) ;
69289: LD_ADDR_VAR 0 8
69293: PUSH
69294: LD_VAR 0 2
69298: PPUSH
69299: CALL_OW 254
69303: ST_TO_ADDR
// r := 4 ;
69304: LD_ADDR_VAR 0 9
69308: PUSH
69309: LD_INT 4
69311: ST_TO_ADDR
// for i := 1 to 5 do
69312: LD_ADDR_VAR 0 10
69316: PUSH
69317: DOUBLE
69318: LD_INT 1
69320: DEC
69321: ST_TO_ADDR
69322: LD_INT 5
69324: PUSH
69325: FOR_TO
69326: IFFALSE 69483
// begin _x := ShiftX ( x , d , r + i ) ;
69328: LD_ADDR_VAR 0 5
69332: PUSH
69333: LD_VAR 0 4
69337: PPUSH
69338: LD_VAR 0 8
69342: PPUSH
69343: LD_VAR 0 9
69347: PUSH
69348: LD_VAR 0 10
69352: PLUS
69353: PPUSH
69354: CALL_OW 272
69358: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69359: LD_ADDR_VAR 0 7
69363: PUSH
69364: LD_VAR 0 6
69368: PPUSH
69369: LD_VAR 0 8
69373: PPUSH
69374: LD_VAR 0 9
69378: PUSH
69379: LD_VAR 0 10
69383: PLUS
69384: PPUSH
69385: CALL_OW 273
69389: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69390: LD_VAR 0 5
69394: PPUSH
69395: LD_VAR 0 7
69399: PPUSH
69400: CALL_OW 488
69404: PUSH
69405: LD_VAR 0 5
69409: PPUSH
69410: LD_VAR 0 7
69414: PPUSH
69415: CALL_OW 428
69419: PPUSH
69420: CALL_OW 247
69424: PUSH
69425: LD_INT 3
69427: PUSH
69428: LD_INT 2
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: IN
69435: NOT
69436: AND
69437: IFFALSE 69481
// begin ComMoveXY ( unit , _x , _y ) ;
69439: LD_VAR 0 1
69443: PPUSH
69444: LD_VAR 0 5
69448: PPUSH
69449: LD_VAR 0 7
69453: PPUSH
69454: CALL_OW 111
// result := [ _x , _y ] ;
69458: LD_ADDR_VAR 0 3
69462: PUSH
69463: LD_VAR 0 5
69467: PUSH
69468: LD_VAR 0 7
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: ST_TO_ADDR
// exit ;
69477: POP
69478: POP
69479: GO 69485
// end ; end ;
69481: GO 69325
69483: POP
69484: POP
// end ;
69485: LD_VAR 0 3
69489: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69490: LD_INT 0
69492: PPUSH
69493: PPUSH
69494: PPUSH
// result := 0 ;
69495: LD_ADDR_VAR 0 3
69499: PUSH
69500: LD_INT 0
69502: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69503: LD_VAR 0 1
69507: PUSH
69508: LD_INT 0
69510: LESS
69511: PUSH
69512: LD_VAR 0 1
69516: PUSH
69517: LD_INT 8
69519: GREATER
69520: OR
69521: PUSH
69522: LD_VAR 0 2
69526: PUSH
69527: LD_INT 0
69529: LESS
69530: OR
69531: PUSH
69532: LD_VAR 0 2
69536: PUSH
69537: LD_INT 8
69539: GREATER
69540: OR
69541: IFFALSE 69545
// exit ;
69543: GO 69620
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69545: LD_ADDR_VAR 0 4
69549: PUSH
69550: LD_INT 22
69552: PUSH
69553: LD_VAR 0 2
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PPUSH
69562: CALL_OW 69
69566: PUSH
69567: FOR_IN
69568: IFFALSE 69618
// begin un := UnitShoot ( i ) ;
69570: LD_ADDR_VAR 0 5
69574: PUSH
69575: LD_VAR 0 4
69579: PPUSH
69580: CALL_OW 504
69584: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69585: LD_VAR 0 5
69589: PPUSH
69590: CALL_OW 255
69594: PUSH
69595: LD_VAR 0 1
69599: EQUAL
69600: IFFALSE 69616
// begin result := un ;
69602: LD_ADDR_VAR 0 3
69606: PUSH
69607: LD_VAR 0 5
69611: ST_TO_ADDR
// exit ;
69612: POP
69613: POP
69614: GO 69620
// end ; end ;
69616: GO 69567
69618: POP
69619: POP
// end ;
69620: LD_VAR 0 3
69624: RET
// export function GetCargoBay ( units ) ; begin
69625: LD_INT 0
69627: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69628: LD_ADDR_VAR 0 2
69632: PUSH
69633: LD_VAR 0 1
69637: PPUSH
69638: LD_INT 2
69640: PUSH
69641: LD_INT 34
69643: PUSH
69644: LD_INT 12
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 34
69653: PUSH
69654: LD_INT 51
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: LD_INT 34
69663: PUSH
69664: LD_INT 32
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 34
69673: PUSH
69674: LD_EXP 21
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: PPUSH
69690: CALL_OW 72
69694: ST_TO_ADDR
// end ;
69695: LD_VAR 0 2
69699: RET
// export function Negate ( value ) ; begin
69700: LD_INT 0
69702: PPUSH
// result := not value ;
69703: LD_ADDR_VAR 0 2
69707: PUSH
69708: LD_VAR 0 1
69712: NOT
69713: ST_TO_ADDR
// end ;
69714: LD_VAR 0 2
69718: RET
// export function Inc ( value ) ; begin
69719: LD_INT 0
69721: PPUSH
// result := value + 1 ;
69722: LD_ADDR_VAR 0 2
69726: PUSH
69727: LD_VAR 0 1
69731: PUSH
69732: LD_INT 1
69734: PLUS
69735: ST_TO_ADDR
// end ;
69736: LD_VAR 0 2
69740: RET
// export function Dec ( value ) ; begin
69741: LD_INT 0
69743: PPUSH
// result := value - 1 ;
69744: LD_ADDR_VAR 0 2
69748: PUSH
69749: LD_VAR 0 1
69753: PUSH
69754: LD_INT 1
69756: MINUS
69757: ST_TO_ADDR
// end ;
69758: LD_VAR 0 2
69762: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69763: LD_INT 0
69765: PPUSH
69766: PPUSH
69767: PPUSH
69768: PPUSH
69769: PPUSH
69770: PPUSH
69771: PPUSH
69772: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69773: LD_VAR 0 1
69777: PPUSH
69778: LD_VAR 0 2
69782: PPUSH
69783: CALL_OW 488
69787: NOT
69788: PUSH
69789: LD_VAR 0 3
69793: PPUSH
69794: LD_VAR 0 4
69798: PPUSH
69799: CALL_OW 488
69803: NOT
69804: OR
69805: IFFALSE 69818
// begin result := - 1 ;
69807: LD_ADDR_VAR 0 5
69811: PUSH
69812: LD_INT 1
69814: NEG
69815: ST_TO_ADDR
// exit ;
69816: GO 70053
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69818: LD_ADDR_VAR 0 12
69822: PUSH
69823: LD_VAR 0 1
69827: PPUSH
69828: LD_VAR 0 2
69832: PPUSH
69833: LD_VAR 0 3
69837: PPUSH
69838: LD_VAR 0 4
69842: PPUSH
69843: CALL 68901 0 4
69847: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69848: LD_ADDR_VAR 0 11
69852: PUSH
69853: LD_VAR 0 1
69857: PPUSH
69858: LD_VAR 0 2
69862: PPUSH
69863: LD_VAR 0 12
69867: PUSH
69868: LD_INT 1
69870: ARRAY
69871: PPUSH
69872: LD_VAR 0 12
69876: PUSH
69877: LD_INT 2
69879: ARRAY
69880: PPUSH
69881: CALL_OW 298
69885: ST_TO_ADDR
// distance := 9999 ;
69886: LD_ADDR_VAR 0 10
69890: PUSH
69891: LD_INT 9999
69893: ST_TO_ADDR
// for i := 0 to 5 do
69894: LD_ADDR_VAR 0 6
69898: PUSH
69899: DOUBLE
69900: LD_INT 0
69902: DEC
69903: ST_TO_ADDR
69904: LD_INT 5
69906: PUSH
69907: FOR_TO
69908: IFFALSE 70051
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69910: LD_ADDR_VAR 0 7
69914: PUSH
69915: LD_VAR 0 1
69919: PPUSH
69920: LD_VAR 0 6
69924: PPUSH
69925: LD_VAR 0 11
69929: PPUSH
69930: CALL_OW 272
69934: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69935: LD_ADDR_VAR 0 8
69939: PUSH
69940: LD_VAR 0 2
69944: PPUSH
69945: LD_VAR 0 6
69949: PPUSH
69950: LD_VAR 0 11
69954: PPUSH
69955: CALL_OW 273
69959: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69960: LD_VAR 0 7
69964: PPUSH
69965: LD_VAR 0 8
69969: PPUSH
69970: CALL_OW 488
69974: NOT
69975: IFFALSE 69979
// continue ;
69977: GO 69907
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69979: LD_ADDR_VAR 0 9
69983: PUSH
69984: LD_VAR 0 12
69988: PUSH
69989: LD_INT 1
69991: ARRAY
69992: PPUSH
69993: LD_VAR 0 12
69997: PUSH
69998: LD_INT 2
70000: ARRAY
70001: PPUSH
70002: LD_VAR 0 7
70006: PPUSH
70007: LD_VAR 0 8
70011: PPUSH
70012: CALL_OW 298
70016: ST_TO_ADDR
// if tmp < distance then
70017: LD_VAR 0 9
70021: PUSH
70022: LD_VAR 0 10
70026: LESS
70027: IFFALSE 70049
// begin result := i ;
70029: LD_ADDR_VAR 0 5
70033: PUSH
70034: LD_VAR 0 6
70038: ST_TO_ADDR
// distance := tmp ;
70039: LD_ADDR_VAR 0 10
70043: PUSH
70044: LD_VAR 0 9
70048: ST_TO_ADDR
// end ; end ;
70049: GO 69907
70051: POP
70052: POP
// end ;
70053: LD_VAR 0 5
70057: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70058: LD_INT 0
70060: PPUSH
70061: PPUSH
// if not driver or not IsInUnit ( driver ) then
70062: LD_VAR 0 1
70066: NOT
70067: PUSH
70068: LD_VAR 0 1
70072: PPUSH
70073: CALL_OW 310
70077: NOT
70078: OR
70079: IFFALSE 70083
// exit ;
70081: GO 70173
// vehicle := IsInUnit ( driver ) ;
70083: LD_ADDR_VAR 0 3
70087: PUSH
70088: LD_VAR 0 1
70092: PPUSH
70093: CALL_OW 310
70097: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70098: LD_VAR 0 1
70102: PPUSH
70103: LD_STRING \
70105: PUSH
70106: LD_INT 0
70108: PUSH
70109: LD_INT 0
70111: PUSH
70112: LD_INT 0
70114: PUSH
70115: LD_INT 0
70117: PUSH
70118: LD_INT 0
70120: PUSH
70121: LD_INT 0
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: PUSH
70133: LD_STRING E
70135: PUSH
70136: LD_INT 0
70138: PUSH
70139: LD_INT 0
70141: PUSH
70142: LD_VAR 0 3
70146: PUSH
70147: LD_INT 0
70149: PUSH
70150: LD_INT 0
70152: PUSH
70153: LD_INT 0
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PPUSH
70169: CALL_OW 446
// end ;
70173: LD_VAR 0 2
70177: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70178: LD_INT 0
70180: PPUSH
70181: PPUSH
// if not driver or not IsInUnit ( driver ) then
70182: LD_VAR 0 1
70186: NOT
70187: PUSH
70188: LD_VAR 0 1
70192: PPUSH
70193: CALL_OW 310
70197: NOT
70198: OR
70199: IFFALSE 70203
// exit ;
70201: GO 70293
// vehicle := IsInUnit ( driver ) ;
70203: LD_ADDR_VAR 0 3
70207: PUSH
70208: LD_VAR 0 1
70212: PPUSH
70213: CALL_OW 310
70217: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70218: LD_VAR 0 1
70222: PPUSH
70223: LD_STRING \
70225: PUSH
70226: LD_INT 0
70228: PUSH
70229: LD_INT 0
70231: PUSH
70232: LD_INT 0
70234: PUSH
70235: LD_INT 0
70237: PUSH
70238: LD_INT 0
70240: PUSH
70241: LD_INT 0
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: PUSH
70253: LD_STRING E
70255: PUSH
70256: LD_INT 0
70258: PUSH
70259: LD_INT 0
70261: PUSH
70262: LD_VAR 0 3
70266: PUSH
70267: LD_INT 0
70269: PUSH
70270: LD_INT 0
70272: PUSH
70273: LD_INT 0
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PPUSH
70289: CALL_OW 447
// end ;
70293: LD_VAR 0 2
70297: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70298: LD_INT 0
70300: PPUSH
70301: PPUSH
70302: PPUSH
// tmp := [ ] ;
70303: LD_ADDR_VAR 0 5
70307: PUSH
70308: EMPTY
70309: ST_TO_ADDR
// for i in units do
70310: LD_ADDR_VAR 0 4
70314: PUSH
70315: LD_VAR 0 1
70319: PUSH
70320: FOR_IN
70321: IFFALSE 70359
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70323: LD_ADDR_VAR 0 5
70327: PUSH
70328: LD_VAR 0 5
70332: PPUSH
70333: LD_VAR 0 5
70337: PUSH
70338: LD_INT 1
70340: PLUS
70341: PPUSH
70342: LD_VAR 0 4
70346: PPUSH
70347: CALL_OW 256
70351: PPUSH
70352: CALL_OW 2
70356: ST_TO_ADDR
70357: GO 70320
70359: POP
70360: POP
// if not tmp then
70361: LD_VAR 0 5
70365: NOT
70366: IFFALSE 70370
// exit ;
70368: GO 70418
// if asc then
70370: LD_VAR 0 2
70374: IFFALSE 70398
// result := SortListByListAsc ( units , tmp ) else
70376: LD_ADDR_VAR 0 3
70380: PUSH
70381: LD_VAR 0 1
70385: PPUSH
70386: LD_VAR 0 5
70390: PPUSH
70391: CALL_OW 76
70395: ST_TO_ADDR
70396: GO 70418
// result := SortListByListDesc ( units , tmp ) ;
70398: LD_ADDR_VAR 0 3
70402: PUSH
70403: LD_VAR 0 1
70407: PPUSH
70408: LD_VAR 0 5
70412: PPUSH
70413: CALL_OW 77
70417: ST_TO_ADDR
// end ;
70418: LD_VAR 0 3
70422: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70423: LD_INT 0
70425: PPUSH
70426: PPUSH
// task := GetTaskList ( mech ) ;
70427: LD_ADDR_VAR 0 4
70431: PUSH
70432: LD_VAR 0 1
70436: PPUSH
70437: CALL_OW 437
70441: ST_TO_ADDR
// if not task then
70442: LD_VAR 0 4
70446: NOT
70447: IFFALSE 70451
// exit ;
70449: GO 70493
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70451: LD_ADDR_VAR 0 3
70455: PUSH
70456: LD_VAR 0 4
70460: PUSH
70461: LD_INT 1
70463: ARRAY
70464: PUSH
70465: LD_INT 1
70467: ARRAY
70468: PUSH
70469: LD_STRING r
70471: EQUAL
70472: PUSH
70473: LD_VAR 0 4
70477: PUSH
70478: LD_INT 1
70480: ARRAY
70481: PUSH
70482: LD_INT 4
70484: ARRAY
70485: PUSH
70486: LD_VAR 0 2
70490: EQUAL
70491: AND
70492: ST_TO_ADDR
// end ;
70493: LD_VAR 0 3
70497: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70498: LD_INT 0
70500: PPUSH
// SetDir ( unit , d ) ;
70501: LD_VAR 0 1
70505: PPUSH
70506: LD_VAR 0 4
70510: PPUSH
70511: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70515: LD_VAR 0 1
70519: PPUSH
70520: LD_VAR 0 2
70524: PPUSH
70525: LD_VAR 0 3
70529: PPUSH
70530: LD_VAR 0 5
70534: PPUSH
70535: CALL_OW 48
// end ;
70539: LD_VAR 0 6
70543: RET
// export function ToNaturalNumber ( number ) ; begin
70544: LD_INT 0
70546: PPUSH
// result := number div 1 ;
70547: LD_ADDR_VAR 0 2
70551: PUSH
70552: LD_VAR 0 1
70556: PUSH
70557: LD_INT 1
70559: DIV
70560: ST_TO_ADDR
// if number < 0 then
70561: LD_VAR 0 1
70565: PUSH
70566: LD_INT 0
70568: LESS
70569: IFFALSE 70579
// result := 0 ;
70571: LD_ADDR_VAR 0 2
70575: PUSH
70576: LD_INT 0
70578: ST_TO_ADDR
// end ;
70579: LD_VAR 0 2
70583: RET
// export function SortByClass ( units , class ) ; var un ; begin
70584: LD_INT 0
70586: PPUSH
70587: PPUSH
// if not units or not class then
70588: LD_VAR 0 1
70592: NOT
70593: PUSH
70594: LD_VAR 0 2
70598: NOT
70599: OR
70600: IFFALSE 70604
// exit ;
70602: GO 70699
// result := [ ] ;
70604: LD_ADDR_VAR 0 3
70608: PUSH
70609: EMPTY
70610: ST_TO_ADDR
// for un in units do
70611: LD_ADDR_VAR 0 4
70615: PUSH
70616: LD_VAR 0 1
70620: PUSH
70621: FOR_IN
70622: IFFALSE 70697
// if GetClass ( un ) = class then
70624: LD_VAR 0 4
70628: PPUSH
70629: CALL_OW 257
70633: PUSH
70634: LD_VAR 0 2
70638: EQUAL
70639: IFFALSE 70666
// result := Insert ( result , 1 , un ) else
70641: LD_ADDR_VAR 0 3
70645: PUSH
70646: LD_VAR 0 3
70650: PPUSH
70651: LD_INT 1
70653: PPUSH
70654: LD_VAR 0 4
70658: PPUSH
70659: CALL_OW 2
70663: ST_TO_ADDR
70664: GO 70695
// result := Replace ( result , result + 1 , un ) ;
70666: LD_ADDR_VAR 0 3
70670: PUSH
70671: LD_VAR 0 3
70675: PPUSH
70676: LD_VAR 0 3
70680: PUSH
70681: LD_INT 1
70683: PLUS
70684: PPUSH
70685: LD_VAR 0 4
70689: PPUSH
70690: CALL_OW 1
70694: ST_TO_ADDR
70695: GO 70621
70697: POP
70698: POP
// end ;
70699: LD_VAR 0 3
70703: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70704: LD_INT 0
70706: PPUSH
70707: PPUSH
70708: PPUSH
70709: PPUSH
70710: PPUSH
70711: PPUSH
70712: PPUSH
// result := [ ] ;
70713: LD_ADDR_VAR 0 4
70717: PUSH
70718: EMPTY
70719: ST_TO_ADDR
// if x - r < 0 then
70720: LD_VAR 0 1
70724: PUSH
70725: LD_VAR 0 3
70729: MINUS
70730: PUSH
70731: LD_INT 0
70733: LESS
70734: IFFALSE 70746
// min_x := 0 else
70736: LD_ADDR_VAR 0 8
70740: PUSH
70741: LD_INT 0
70743: ST_TO_ADDR
70744: GO 70762
// min_x := x - r ;
70746: LD_ADDR_VAR 0 8
70750: PUSH
70751: LD_VAR 0 1
70755: PUSH
70756: LD_VAR 0 3
70760: MINUS
70761: ST_TO_ADDR
// if y - r < 0 then
70762: LD_VAR 0 2
70766: PUSH
70767: LD_VAR 0 3
70771: MINUS
70772: PUSH
70773: LD_INT 0
70775: LESS
70776: IFFALSE 70788
// min_y := 0 else
70778: LD_ADDR_VAR 0 7
70782: PUSH
70783: LD_INT 0
70785: ST_TO_ADDR
70786: GO 70804
// min_y := y - r ;
70788: LD_ADDR_VAR 0 7
70792: PUSH
70793: LD_VAR 0 2
70797: PUSH
70798: LD_VAR 0 3
70802: MINUS
70803: ST_TO_ADDR
// max_x := x + r ;
70804: LD_ADDR_VAR 0 9
70808: PUSH
70809: LD_VAR 0 1
70813: PUSH
70814: LD_VAR 0 3
70818: PLUS
70819: ST_TO_ADDR
// max_y := y + r ;
70820: LD_ADDR_VAR 0 10
70824: PUSH
70825: LD_VAR 0 2
70829: PUSH
70830: LD_VAR 0 3
70834: PLUS
70835: ST_TO_ADDR
// for _x = min_x to max_x do
70836: LD_ADDR_VAR 0 5
70840: PUSH
70841: DOUBLE
70842: LD_VAR 0 8
70846: DEC
70847: ST_TO_ADDR
70848: LD_VAR 0 9
70852: PUSH
70853: FOR_TO
70854: IFFALSE 70955
// for _y = min_y to max_y do
70856: LD_ADDR_VAR 0 6
70860: PUSH
70861: DOUBLE
70862: LD_VAR 0 7
70866: DEC
70867: ST_TO_ADDR
70868: LD_VAR 0 10
70872: PUSH
70873: FOR_TO
70874: IFFALSE 70951
// begin if not ValidHex ( _x , _y ) then
70876: LD_VAR 0 5
70880: PPUSH
70881: LD_VAR 0 6
70885: PPUSH
70886: CALL_OW 488
70890: NOT
70891: IFFALSE 70895
// continue ;
70893: GO 70873
// if GetResourceTypeXY ( _x , _y ) then
70895: LD_VAR 0 5
70899: PPUSH
70900: LD_VAR 0 6
70904: PPUSH
70905: CALL_OW 283
70909: IFFALSE 70949
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70911: LD_ADDR_VAR 0 4
70915: PUSH
70916: LD_VAR 0 4
70920: PPUSH
70921: LD_VAR 0 4
70925: PUSH
70926: LD_INT 1
70928: PLUS
70929: PPUSH
70930: LD_VAR 0 5
70934: PUSH
70935: LD_VAR 0 6
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PPUSH
70944: CALL_OW 1
70948: ST_TO_ADDR
// end ;
70949: GO 70873
70951: POP
70952: POP
70953: GO 70853
70955: POP
70956: POP
// end ;
70957: LD_VAR 0 4
70961: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70962: LD_INT 0
70964: PPUSH
70965: PPUSH
70966: PPUSH
70967: PPUSH
70968: PPUSH
70969: PPUSH
70970: PPUSH
70971: PPUSH
// if not units then
70972: LD_VAR 0 1
70976: NOT
70977: IFFALSE 70981
// exit ;
70979: GO 71507
// result := UnitFilter ( units , [ f_ok ] ) ;
70981: LD_ADDR_VAR 0 3
70985: PUSH
70986: LD_VAR 0 1
70990: PPUSH
70991: LD_INT 50
70993: PUSH
70994: EMPTY
70995: LIST
70996: PPUSH
70997: CALL_OW 72
71001: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71002: LD_ADDR_VAR 0 8
71006: PUSH
71007: LD_VAR 0 1
71011: PUSH
71012: LD_INT 1
71014: ARRAY
71015: PPUSH
71016: CALL_OW 255
71020: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71021: LD_ADDR_VAR 0 10
71025: PUSH
71026: LD_INT 29
71028: PUSH
71029: LD_EXP 24
71033: PUSH
71034: LD_INT 49
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: LIST
71041: ST_TO_ADDR
// if not result then
71042: LD_VAR 0 3
71046: NOT
71047: IFFALSE 71051
// exit ;
71049: GO 71507
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71051: LD_ADDR_VAR 0 5
71055: PUSH
71056: LD_INT 81
71058: PUSH
71059: LD_VAR 0 8
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PPUSH
71068: CALL_OW 69
71072: ST_TO_ADDR
// for i in result do
71073: LD_ADDR_VAR 0 4
71077: PUSH
71078: LD_VAR 0 3
71082: PUSH
71083: FOR_IN
71084: IFFALSE 71505
// begin tag := GetTag ( i ) + 1 ;
71086: LD_ADDR_VAR 0 9
71090: PUSH
71091: LD_VAR 0 4
71095: PPUSH
71096: CALL_OW 110
71100: PUSH
71101: LD_INT 1
71103: PLUS
71104: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71105: LD_ADDR_VAR 0 7
71109: PUSH
71110: LD_VAR 0 4
71114: PPUSH
71115: CALL_OW 250
71119: PPUSH
71120: LD_VAR 0 4
71124: PPUSH
71125: CALL_OW 251
71129: PPUSH
71130: LD_INT 6
71132: PPUSH
71133: CALL 70704 0 3
71137: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71138: LD_VAR 0 4
71142: PPUSH
71143: CALL_OW 247
71147: PUSH
71148: LD_INT 2
71150: EQUAL
71151: PUSH
71152: LD_VAR 0 7
71156: AND
71157: PUSH
71158: LD_VAR 0 4
71162: PPUSH
71163: CALL_OW 264
71167: PUSH
71168: LD_VAR 0 10
71172: IN
71173: NOT
71174: AND
71175: IFFALSE 71214
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71177: LD_VAR 0 4
71181: PPUSH
71182: LD_VAR 0 7
71186: PUSH
71187: LD_INT 1
71189: ARRAY
71190: PUSH
71191: LD_INT 1
71193: ARRAY
71194: PPUSH
71195: LD_VAR 0 7
71199: PUSH
71200: LD_INT 1
71202: ARRAY
71203: PUSH
71204: LD_INT 2
71206: ARRAY
71207: PPUSH
71208: CALL_OW 116
71212: GO 71503
// if path > tag then
71214: LD_VAR 0 2
71218: PUSH
71219: LD_VAR 0 9
71223: GREATER
71224: IFFALSE 71432
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71226: LD_ADDR_VAR 0 6
71230: PUSH
71231: LD_VAR 0 5
71235: PPUSH
71236: LD_INT 91
71238: PUSH
71239: LD_VAR 0 4
71243: PUSH
71244: LD_INT 8
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: LIST
71251: PPUSH
71252: CALL_OW 72
71256: ST_TO_ADDR
// if nearEnemy then
71257: LD_VAR 0 6
71261: IFFALSE 71330
// begin if GetWeapon ( i ) = ru_time_lapser then
71263: LD_VAR 0 4
71267: PPUSH
71268: CALL_OW 264
71272: PUSH
71273: LD_INT 49
71275: EQUAL
71276: IFFALSE 71304
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71278: LD_VAR 0 4
71282: PPUSH
71283: LD_VAR 0 6
71287: PPUSH
71288: LD_VAR 0 4
71292: PPUSH
71293: CALL_OW 74
71297: PPUSH
71298: CALL_OW 112
71302: GO 71328
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71304: LD_VAR 0 4
71308: PPUSH
71309: LD_VAR 0 6
71313: PPUSH
71314: LD_VAR 0 4
71318: PPUSH
71319: CALL_OW 74
71323: PPUSH
71324: CALL_OW 115
// end else
71328: GO 71430
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71330: LD_VAR 0 4
71334: PPUSH
71335: LD_VAR 0 2
71339: PUSH
71340: LD_VAR 0 9
71344: ARRAY
71345: PUSH
71346: LD_INT 1
71348: ARRAY
71349: PPUSH
71350: LD_VAR 0 2
71354: PUSH
71355: LD_VAR 0 9
71359: ARRAY
71360: PUSH
71361: LD_INT 2
71363: ARRAY
71364: PPUSH
71365: CALL_OW 297
71369: PUSH
71370: LD_INT 6
71372: GREATER
71373: IFFALSE 71416
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71375: LD_VAR 0 4
71379: PPUSH
71380: LD_VAR 0 2
71384: PUSH
71385: LD_VAR 0 9
71389: ARRAY
71390: PUSH
71391: LD_INT 1
71393: ARRAY
71394: PPUSH
71395: LD_VAR 0 2
71399: PUSH
71400: LD_VAR 0 9
71404: ARRAY
71405: PUSH
71406: LD_INT 2
71408: ARRAY
71409: PPUSH
71410: CALL_OW 114
71414: GO 71430
// SetTag ( i , tag ) ;
71416: LD_VAR 0 4
71420: PPUSH
71421: LD_VAR 0 9
71425: PPUSH
71426: CALL_OW 109
// end else
71430: GO 71503
// if enemy then
71432: LD_VAR 0 5
71436: IFFALSE 71503
// begin if GetWeapon ( i ) = ru_time_lapser then
71438: LD_VAR 0 4
71442: PPUSH
71443: CALL_OW 264
71447: PUSH
71448: LD_INT 49
71450: EQUAL
71451: IFFALSE 71479
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71453: LD_VAR 0 4
71457: PPUSH
71458: LD_VAR 0 5
71462: PPUSH
71463: LD_VAR 0 4
71467: PPUSH
71468: CALL_OW 74
71472: PPUSH
71473: CALL_OW 112
71477: GO 71503
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71479: LD_VAR 0 4
71483: PPUSH
71484: LD_VAR 0 5
71488: PPUSH
71489: LD_VAR 0 4
71493: PPUSH
71494: CALL_OW 74
71498: PPUSH
71499: CALL_OW 115
// end ; end ;
71503: GO 71083
71505: POP
71506: POP
// end ;
71507: LD_VAR 0 3
71511: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71512: LD_INT 0
71514: PPUSH
71515: PPUSH
71516: PPUSH
// if not unit or IsInUnit ( unit ) then
71517: LD_VAR 0 1
71521: NOT
71522: PUSH
71523: LD_VAR 0 1
71527: PPUSH
71528: CALL_OW 310
71532: OR
71533: IFFALSE 71537
// exit ;
71535: GO 71628
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71537: LD_ADDR_VAR 0 4
71541: PUSH
71542: LD_VAR 0 1
71546: PPUSH
71547: CALL_OW 250
71551: PPUSH
71552: LD_VAR 0 2
71556: PPUSH
71557: LD_INT 1
71559: PPUSH
71560: CALL_OW 272
71564: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71565: LD_ADDR_VAR 0 5
71569: PUSH
71570: LD_VAR 0 1
71574: PPUSH
71575: CALL_OW 251
71579: PPUSH
71580: LD_VAR 0 2
71584: PPUSH
71585: LD_INT 1
71587: PPUSH
71588: CALL_OW 273
71592: ST_TO_ADDR
// if ValidHex ( x , y ) then
71593: LD_VAR 0 4
71597: PPUSH
71598: LD_VAR 0 5
71602: PPUSH
71603: CALL_OW 488
71607: IFFALSE 71628
// ComTurnXY ( unit , x , y ) ;
71609: LD_VAR 0 1
71613: PPUSH
71614: LD_VAR 0 4
71618: PPUSH
71619: LD_VAR 0 5
71623: PPUSH
71624: CALL_OW 118
// end ;
71628: LD_VAR 0 3
71632: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71633: LD_INT 0
71635: PPUSH
71636: PPUSH
// result := false ;
71637: LD_ADDR_VAR 0 3
71641: PUSH
71642: LD_INT 0
71644: ST_TO_ADDR
// if not units then
71645: LD_VAR 0 2
71649: NOT
71650: IFFALSE 71654
// exit ;
71652: GO 71699
// for i in units do
71654: LD_ADDR_VAR 0 4
71658: PUSH
71659: LD_VAR 0 2
71663: PUSH
71664: FOR_IN
71665: IFFALSE 71697
// if See ( side , i ) then
71667: LD_VAR 0 1
71671: PPUSH
71672: LD_VAR 0 4
71676: PPUSH
71677: CALL_OW 292
71681: IFFALSE 71695
// begin result := true ;
71683: LD_ADDR_VAR 0 3
71687: PUSH
71688: LD_INT 1
71690: ST_TO_ADDR
// exit ;
71691: POP
71692: POP
71693: GO 71699
// end ;
71695: GO 71664
71697: POP
71698: POP
// end ;
71699: LD_VAR 0 3
71703: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71704: LD_INT 0
71706: PPUSH
71707: PPUSH
71708: PPUSH
71709: PPUSH
// if not unit or not points then
71710: LD_VAR 0 1
71714: NOT
71715: PUSH
71716: LD_VAR 0 2
71720: NOT
71721: OR
71722: IFFALSE 71726
// exit ;
71724: GO 71816
// dist := 99999 ;
71726: LD_ADDR_VAR 0 5
71730: PUSH
71731: LD_INT 99999
71733: ST_TO_ADDR
// for i in points do
71734: LD_ADDR_VAR 0 4
71738: PUSH
71739: LD_VAR 0 2
71743: PUSH
71744: FOR_IN
71745: IFFALSE 71814
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71747: LD_ADDR_VAR 0 6
71751: PUSH
71752: LD_VAR 0 1
71756: PPUSH
71757: LD_VAR 0 4
71761: PUSH
71762: LD_INT 1
71764: ARRAY
71765: PPUSH
71766: LD_VAR 0 4
71770: PUSH
71771: LD_INT 2
71773: ARRAY
71774: PPUSH
71775: CALL_OW 297
71779: ST_TO_ADDR
// if tmpDist < dist then
71780: LD_VAR 0 6
71784: PUSH
71785: LD_VAR 0 5
71789: LESS
71790: IFFALSE 71812
// begin result := i ;
71792: LD_ADDR_VAR 0 3
71796: PUSH
71797: LD_VAR 0 4
71801: ST_TO_ADDR
// dist := tmpDist ;
71802: LD_ADDR_VAR 0 5
71806: PUSH
71807: LD_VAR 0 6
71811: ST_TO_ADDR
// end ; end ;
71812: GO 71744
71814: POP
71815: POP
// end ;
71816: LD_VAR 0 3
71820: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71821: LD_INT 0
71823: PPUSH
// uc_side := side ;
71824: LD_ADDR_OWVAR 20
71828: PUSH
71829: LD_VAR 0 1
71833: ST_TO_ADDR
// uc_nation := 3 ;
71834: LD_ADDR_OWVAR 21
71838: PUSH
71839: LD_INT 3
71841: ST_TO_ADDR
// vc_chassis := 25 ;
71842: LD_ADDR_OWVAR 37
71846: PUSH
71847: LD_INT 25
71849: ST_TO_ADDR
// vc_engine := engine_siberite ;
71850: LD_ADDR_OWVAR 39
71854: PUSH
71855: LD_INT 3
71857: ST_TO_ADDR
// vc_control := control_computer ;
71858: LD_ADDR_OWVAR 38
71862: PUSH
71863: LD_INT 3
71865: ST_TO_ADDR
// vc_weapon := 59 ;
71866: LD_ADDR_OWVAR 40
71870: PUSH
71871: LD_INT 59
71873: ST_TO_ADDR
// result := CreateVehicle ;
71874: LD_ADDR_VAR 0 5
71878: PUSH
71879: CALL_OW 45
71883: ST_TO_ADDR
// SetDir ( result , d ) ;
71884: LD_VAR 0 5
71888: PPUSH
71889: LD_VAR 0 4
71893: PPUSH
71894: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71898: LD_VAR 0 5
71902: PPUSH
71903: LD_VAR 0 2
71907: PPUSH
71908: LD_VAR 0 3
71912: PPUSH
71913: LD_INT 0
71915: PPUSH
71916: CALL_OW 48
// end ;
71920: LD_VAR 0 5
71924: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71925: LD_INT 0
71927: PPUSH
71928: PPUSH
71929: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71930: LD_ADDR_VAR 0 2
71934: PUSH
71935: LD_INT 0
71937: PUSH
71938: LD_INT 0
71940: PUSH
71941: LD_INT 0
71943: PUSH
71944: LD_INT 0
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71953: LD_VAR 0 1
71957: NOT
71958: PUSH
71959: LD_VAR 0 1
71963: PPUSH
71964: CALL_OW 264
71968: PUSH
71969: LD_INT 12
71971: PUSH
71972: LD_INT 51
71974: PUSH
71975: LD_INT 32
71977: PUSH
71978: LD_EXP 21
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: IN
71989: NOT
71990: OR
71991: IFFALSE 71995
// exit ;
71993: GO 72093
// for i := 1 to 3 do
71995: LD_ADDR_VAR 0 3
71999: PUSH
72000: DOUBLE
72001: LD_INT 1
72003: DEC
72004: ST_TO_ADDR
72005: LD_INT 3
72007: PUSH
72008: FOR_TO
72009: IFFALSE 72091
// begin tmp := GetCargo ( cargo , i ) ;
72011: LD_ADDR_VAR 0 4
72015: PUSH
72016: LD_VAR 0 1
72020: PPUSH
72021: LD_VAR 0 3
72025: PPUSH
72026: CALL_OW 289
72030: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72031: LD_ADDR_VAR 0 2
72035: PUSH
72036: LD_VAR 0 2
72040: PPUSH
72041: LD_VAR 0 3
72045: PPUSH
72046: LD_VAR 0 4
72050: PPUSH
72051: CALL_OW 1
72055: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72056: LD_ADDR_VAR 0 2
72060: PUSH
72061: LD_VAR 0 2
72065: PPUSH
72066: LD_INT 4
72068: PPUSH
72069: LD_VAR 0 2
72073: PUSH
72074: LD_INT 4
72076: ARRAY
72077: PUSH
72078: LD_VAR 0 4
72082: PLUS
72083: PPUSH
72084: CALL_OW 1
72088: ST_TO_ADDR
// end ;
72089: GO 72008
72091: POP
72092: POP
// end ;
72093: LD_VAR 0 2
72097: RET
// export function Length ( array ) ; begin
72098: LD_INT 0
72100: PPUSH
// result := array + 0 ;
72101: LD_ADDR_VAR 0 2
72105: PUSH
72106: LD_VAR 0 1
72110: PUSH
72111: LD_INT 0
72113: PLUS
72114: ST_TO_ADDR
// end ;
72115: LD_VAR 0 2
72119: RET
// export function PrepareArray ( array ) ; begin
72120: LD_INT 0
72122: PPUSH
// result := array diff 0 ;
72123: LD_ADDR_VAR 0 2
72127: PUSH
72128: LD_VAR 0 1
72132: PUSH
72133: LD_INT 0
72135: DIFF
72136: ST_TO_ADDR
// if not result [ 1 ] then
72137: LD_VAR 0 2
72141: PUSH
72142: LD_INT 1
72144: ARRAY
72145: NOT
72146: IFFALSE 72166
// result := Delete ( result , 1 ) ;
72148: LD_ADDR_VAR 0 2
72152: PUSH
72153: LD_VAR 0 2
72157: PPUSH
72158: LD_INT 1
72160: PPUSH
72161: CALL_OW 3
72165: ST_TO_ADDR
// end ; end_of_file
72166: LD_VAR 0 2
72170: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72171: LD_VAR 0 1
72175: PUSH
72176: LD_INT 200
72178: DOUBLE
72179: GREATEREQUAL
72180: IFFALSE 72188
72182: LD_INT 299
72184: DOUBLE
72185: LESSEQUAL
72186: IFTRUE 72190
72188: GO 72222
72190: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72191: LD_VAR 0 1
72195: PPUSH
72196: LD_VAR 0 2
72200: PPUSH
72201: LD_VAR 0 3
72205: PPUSH
72206: LD_VAR 0 4
72210: PPUSH
72211: LD_VAR 0 5
72215: PPUSH
72216: CALL 27022 0 5
72220: GO 72299
72222: LD_INT 300
72224: DOUBLE
72225: GREATEREQUAL
72226: IFFALSE 72234
72228: LD_INT 399
72230: DOUBLE
72231: LESSEQUAL
72232: IFTRUE 72236
72234: GO 72298
72236: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72237: LD_VAR 0 1
72241: PPUSH
72242: LD_VAR 0 2
72246: PPUSH
72247: LD_VAR 0 3
72251: PPUSH
72252: LD_VAR 0 4
72256: PPUSH
72257: LD_VAR 0 5
72261: PPUSH
72262: LD_VAR 0 6
72266: PPUSH
72267: LD_VAR 0 7
72271: PPUSH
72272: LD_VAR 0 8
72276: PPUSH
72277: LD_VAR 0 9
72281: PPUSH
72282: LD_VAR 0 10
72286: PPUSH
72287: LD_VAR 0 11
72291: PPUSH
72292: CALL 23423 0 11
72296: GO 72299
72298: POP
// end ;
72299: PPOPN 11
72301: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72302: LD_VAR 0 1
72306: PPUSH
72307: LD_VAR 0 2
72311: PPUSH
72312: LD_VAR 0 3
72316: PPUSH
72317: LD_VAR 0 4
72321: PPUSH
72322: LD_VAR 0 5
72326: PPUSH
72327: CALL 26758 0 5
// end ; end_of_file
72331: PPOPN 5
72333: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72334: LD_VAR 0 1
72338: PPUSH
72339: LD_VAR 0 2
72343: PPUSH
72344: LD_VAR 0 3
72348: PPUSH
72349: LD_VAR 0 4
72353: PPUSH
72354: LD_VAR 0 5
72358: PPUSH
72359: LD_VAR 0 6
72363: PPUSH
72364: CALL 11116 0 6
// end ;
72368: PPOPN 6
72370: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72371: LD_INT 0
72373: PPUSH
// begin if not units then
72374: LD_VAR 0 1
72378: NOT
72379: IFFALSE 72383
// exit ;
72381: GO 72383
// end ;
72383: PPOPN 7
72385: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72386: CALL 11087 0 0
// end ;
72390: PPOPN 1
72392: END
