// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsDisabled ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsDisabled = LoadVariable ( 12_SciDed_1 , false ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// CreateNature ;
 111: CALL 1579 0 0
// PrepareDifficulty ;
 115: CALL 1875 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 885 0 0
// PrepareRussianBase ;
 127: CALL 1128 0 0
// PrepareCommander ;
 131: CALL 1070 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13f_ ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_STRING 13f_
 596: PPUSH
 597: CALL 28655 0 3
 601: ST_TO_ADDR
// if debugMode then
 602: LD_EXP 16
 606: IFFALSE 621
// JMM := NewCharacter ( JMM ) ;
 608: LD_ADDR_EXP 1
 612: PUSH
 613: LD_STRING JMM
 615: PPUSH
 616: CALL_OW 25
 620: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 621: LD_EXP 1
 625: PPUSH
 626: LD_INT 95
 628: PPUSH
 629: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 633: LD_EXP 1
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ,  ) ;
 645: LD_ADDR_EXP 5
 649: PUSH
 650: LD_STRING Powell
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: LD_STRING 
 658: PPUSH
 659: CALL 28655 0 3
 663: ST_TO_ADDR
// uc_side = 4 ;
 664: LD_ADDR_OWVAR 20
 668: PUSH
 669: LD_INT 4
 671: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 10c_ ) ;
 672: LD_ADDR_EXP 2
 676: PUSH
 677: LD_STRING Joan
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_STRING 10c_
 685: PPUSH
 686: CALL 28655 0 3
 690: ST_TO_ADDR
// if Joan then
 691: LD_EXP 2
 695: IFFALSE 734
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 697: LD_EXP 2
 701: PPUSH
 702: LD_INT 4
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 712: LD_EXP 2
 716: PPUSH
 717: LD_INT 4
 719: PPUSH
 720: CALL_OW 336
// JMMGirl = 1 ;
 724: LD_ADDR_EXP 7
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// end else
 732: GO 794
// begin Lisa = PrepareUnit ( Lisa , true , 13s_ ) ;
 734: LD_ADDR_EXP 3
 738: PUSH
 739: LD_STRING Lisa
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_STRING 13s_
 747: PPUSH
 748: CALL 28655 0 3
 752: ST_TO_ADDR
// if Lisa then
 753: LD_EXP 3
 757: IFFALSE 794
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 4
 766: PPUSH
 767: LD_INT 0
 769: PPUSH
 770: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 774: LD_EXP 3
 778: PPUSH
 779: LD_INT 1
 781: PPUSH
 782: CALL_OW 336
// JMMGirl = 2 ;
 786: LD_ADDR_EXP 7
 790: PUSH
 791: LD_INT 2
 793: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 794: LD_EXP 2
 798: NOT
 799: PUSH
 800: LD_EXP 3
 804: NOT
 805: AND
 806: IFFALSE 856
// begin Connie = NewCharacter ( Coonie ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Coonie
 815: PPUSH
 816: CALL_OW 25
 820: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 836: LD_EXP 4
 840: PPUSH
 841: LD_INT 3
 843: PPUSH
 844: CALL_OW 336
// JMMGirl = 3 ;
 848: LD_ADDR_EXP 7
 852: PUSH
 853: LD_INT 3
 855: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 856: LD_EXP 2
 860: PUSH
 861: LD_EXP 3
 865: PUSH
 866: LD_EXP 4
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: PPUSH
 876: CALL_OW 140
// end ;
 880: LD_VAR 0 1
 884: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// for i = 1 to 5 do
 890: LD_ADDR_VAR 0 2
 894: PUSH
 895: DOUBLE
 896: LD_INT 1
 898: DEC
 899: ST_TO_ADDR
 900: LD_INT 5
 902: PUSH
 903: FOR_TO
 904: IFFALSE 1063
// begin vc_engine = rand ( 1 , 3 ) ;
 906: LD_ADDR_OWVAR 39
 910: PUSH
 911: LD_INT 1
 913: PPUSH
 914: LD_INT 3
 916: PPUSH
 917: CALL_OW 12
 921: ST_TO_ADDR
// vc_control = control_remote ;
 922: LD_ADDR_OWVAR 38
 926: PUSH
 927: LD_INT 2
 929: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 930: LD_ADDR_OWVAR 40
 934: PUSH
 935: LD_INT 5
 937: PUSH
 938: LD_INT 12
 940: PUSH
 941: LD_INT 13
 943: PUSH
 944: LD_INT 7
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_VAR 0 2
 957: PUSH
 958: LD_INT 4
 960: MOD
 961: PUSH
 962: LD_INT 1
 964: PLUS
 965: ARRAY
 966: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 967: LD_ADDR_OWVAR 37
 971: PUSH
 972: LD_INT 3
 974: PUSH
 975: LD_INT 2
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: LD_INT 2
 989: MOD
 990: PUSH
 991: LD_INT 1
 993: PLUS
 994: ARRAY
 995: ST_TO_ADDR
// veh = CreateVehicle ;
 996: LD_ADDR_VAR 0 3
1000: PUSH
1001: CALL_OW 45
1005: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: LD_INT 5
1016: PPUSH
1017: CALL_OW 12
1021: PPUSH
1022: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1026: LD_VAR 0 3
1030: PPUSH
1031: LD_INT 500
1033: PPUSH
1034: LD_INT 1000
1036: PPUSH
1037: CALL_OW 12
1041: PPUSH
1042: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1046: LD_VAR 0 3
1050: PPUSH
1051: LD_INT 15
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ;
1061: GO 903
1063: POP
1064: POP
// end ; end_of_file
1065: LD_VAR 0 1
1069: RET
// export function PrepareCommander ; begin
1070: LD_INT 0
1072: PPUSH
// uc_side := 3 ;
1073: LD_ADDR_OWVAR 20
1077: PUSH
1078: LD_INT 3
1080: ST_TO_ADDR
// uc_nation := 3 ;
1081: LD_ADDR_OWVAR 21
1085: PUSH
1086: LD_INT 3
1088: ST_TO_ADDR
// Eisenstein := PrepareUnit ( Eisenstein , false ,  ) ;
1089: LD_ADDR_EXP 6
1093: PUSH
1094: LD_STRING Eisenstein
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 28655 0 3
1107: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1108: LD_EXP 6
1112: PPUSH
1113: LD_INT 11
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: CALL_OW 49
// end ;
1123: LD_VAR 0 1
1127: RET
// export baseGuard ; export function PrepareRussianBase ; var i ; begin
1128: LD_INT 0
1130: PPUSH
1131: PPUSH
// uc_nation := 3 ;
1132: LD_ADDR_OWVAR 21
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// uc_side := 3 ;
1140: LD_ADDR_OWVAR 20
1144: PUSH
1145: LD_INT 3
1147: ST_TO_ADDR
// if Difficulty > 1 then
1148: LD_OWVAR 67
1152: PUSH
1153: LD_INT 1
1155: GREATER
1156: IFFALSE 1220
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1158: LD_INT 1
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: LD_INT 8
1166: PUSH
1167: LD_INT 8
1169: PUSH
1170: LD_INT 9
1172: PUSH
1173: LD_INT 10
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_OWVAR 67
1186: ARRAY
1187: PPUSH
1188: CALL_OW 380
// baseGuard := CreateHuman ;
1192: LD_ADDR_EXP 18
1196: PUSH
1197: CALL_OW 44
1201: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1202: LD_EXP 18
1206: PPUSH
1207: LD_INT 39
1209: PPUSH
1210: LD_INT 67
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 48
// end ; if russianRocketsDisabled then
1220: LD_EXP 14
1224: IFFALSE 1312
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ] ) do
1226: LD_ADDR_VAR 0 2
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 3
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 2
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: LD_INT 33
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 30
1256: PUSH
1257: LD_INT 32
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PPUSH
1273: CALL_OW 69
1277: PUSH
1278: FOR_IN
1279: IFFALSE 1310
// if GetBWeapon ( i ) = ru_rocket then
1281: LD_VAR 0 2
1285: PPUSH
1286: CALL_OW 269
1290: PUSH
1291: LD_INT 47
1293: EQUAL
1294: IFFALSE 1308
// PlaceWeaponTurret ( i , ru_rocket_launcher ) ;
1296: LD_VAR 0 2
1300: PPUSH
1301: LD_INT 45
1303: PPUSH
1304: CALL_OW 431
1308: GO 1278
1310: POP
1311: POP
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1312: LD_INT 116
1314: PPUSH
1315: LD_INT 50
1317: PPUSH
1318: LD_INT 74
1320: PPUSH
1321: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1325: LD_INT 3
1327: PPUSH
1328: LD_INT 3
1330: PPUSH
1331: LD_INT 45
1333: PPUSH
1334: LD_INT 10
1336: PPUSH
1337: LD_INT 9
1339: PPUSH
1340: LD_INT 2
1342: PPUSH
1343: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1347: LD_INT 3
1349: PPUSH
1350: LD_INT 3
1352: PPUSH
1353: LD_INT 22
1355: PPUSH
1356: LD_INT 10
1358: PPUSH
1359: LD_INT 2
1361: PPUSH
1362: LD_INT 2
1364: PPUSH
1365: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1369: LD_INT 3
1371: PPUSH
1372: LD_INT 3
1374: PPUSH
1375: LD_INT 1
1377: PPUSH
1378: LD_INT 10
1380: PPUSH
1381: LD_INT 3
1383: PPUSH
1384: LD_INT 3
1386: PPUSH
1387: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1391: LD_INT 3
1393: PPUSH
1394: LD_INT 3
1396: PPUSH
1397: LD_INT 40
1399: PPUSH
1400: LD_INT 10
1402: PPUSH
1403: LD_INT 3
1405: PPUSH
1406: LD_INT 3
1408: PPUSH
1409: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1413: LD_INT 3
1415: PPUSH
1416: LD_INT 3
1418: PPUSH
1419: LD_INT 14
1421: PPUSH
1422: LD_INT 10
1424: PPUSH
1425: LD_INT 4
1427: PPUSH
1428: LD_INT 1
1430: PPUSH
1431: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1435: LD_INT 3
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: LD_INT 15
1443: PPUSH
1444: LD_INT 10
1446: PPUSH
1447: LD_INT 4
1449: PPUSH
1450: LD_INT 2
1452: PPUSH
1453: CALL 1765 0 6
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , [ 3500 , 4500 , 6000 , 9000 ] [ Difficulty ] ) ;
1457: LD_INT 22
1459: PPUSH
1460: CALL_OW 274
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: LD_INT 3500
1470: PUSH
1471: LD_INT 4500
1473: PUSH
1474: LD_INT 6000
1476: PUSH
1477: LD_INT 9000
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_OWVAR 67
1490: ARRAY
1491: PPUSH
1492: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , [ 500 , 1000 , 2000 , 3000 ] [ Difficulty ] ) ;
1496: LD_INT 22
1498: PPUSH
1499: CALL_OW 274
1503: PPUSH
1504: LD_INT 2
1506: PPUSH
1507: LD_INT 500
1509: PUSH
1510: LD_INT 1000
1512: PUSH
1513: LD_INT 2000
1515: PUSH
1516: LD_INT 3000
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: PUSH
1525: LD_OWVAR 67
1529: ARRAY
1530: PPUSH
1531: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_siberit , [ 150 , 250 , 300 , 450 ] [ Difficulty ] ) ;
1535: LD_INT 22
1537: PPUSH
1538: CALL_OW 274
1542: PPUSH
1543: LD_INT 3
1545: PPUSH
1546: LD_INT 150
1548: PUSH
1549: LD_INT 250
1551: PUSH
1552: LD_INT 300
1554: PUSH
1555: LD_INT 450
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: PUSH
1564: LD_OWVAR 67
1568: ARRAY
1569: PPUSH
1570: CALL_OW 277
// end ; end_of_file
1574: LD_VAR 0 1
1578: RET
// export function CreateNature ; var i ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// uc_side := 0 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 0
1590: ST_TO_ADDR
// uc_nation := 0 ;
1591: LD_ADDR_OWVAR 21
1595: PUSH
1596: LD_INT 0
1598: ST_TO_ADDR
// hc_class := class_apeman ;
1599: LD_ADDR_OWVAR 28
1603: PUSH
1604: LD_INT 12
1606: ST_TO_ADDR
// hc_gallery :=  ;
1607: LD_ADDR_OWVAR 33
1611: PUSH
1612: LD_STRING 
1614: ST_TO_ADDR
// hc_name :=  ;
1615: LD_ADDR_OWVAR 26
1619: PUSH
1620: LD_STRING 
1622: ST_TO_ADDR
// for i = 1 to 7 do
1623: LD_ADDR_VAR 0 2
1627: PUSH
1628: DOUBLE
1629: LD_INT 1
1631: DEC
1632: ST_TO_ADDR
1633: LD_INT 7
1635: PUSH
1636: FOR_TO
1637: IFFALSE 1718
// begin hc_class := class_apeman ;
1639: LD_ADDR_OWVAR 28
1643: PUSH
1644: LD_INT 12
1646: ST_TO_ADDR
// hc_gallery :=  ;
1647: LD_ADDR_OWVAR 33
1651: PUSH
1652: LD_STRING 
1654: ST_TO_ADDR
// hc_name :=  ;
1655: LD_ADDR_OWVAR 26
1659: PUSH
1660: LD_STRING 
1662: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1663: LD_ADDR_OWVAR 31
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: LD_INT 0
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1686: LD_ADDR_OWVAR 29
1690: PUSH
1691: LD_INT 11
1693: PUSH
1694: LD_INT 10
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1701: CALL_OW 44
1705: PPUSH
1706: LD_INT 16
1708: PPUSH
1709: LD_INT 0
1711: PPUSH
1712: CALL_OW 49
// end ;
1716: GO 1636
1718: POP
1719: POP
// end ;
1720: LD_VAR 0 1
1724: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1725: LD_INT 0
1727: PPUSH
1728: PPUSH
// for i in charactersList do
1729: LD_ADDR_VAR 0 4
1733: PUSH
1734: LD_VAR 0 1
1738: PUSH
1739: FOR_IN
1740: IFFALSE 1758
// SaveCharacters ( i , ident ) ;
1742: LD_VAR 0 4
1746: PPUSH
1747: LD_VAR 0 2
1751: PPUSH
1752: CALL_OW 38
1756: GO 1739
1758: POP
1759: POP
// end ;
1760: LD_VAR 0 3
1764: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
1769: PPUSH
1770: PPUSH
// for i = 1 to count do
1771: LD_ADDR_VAR 0 8
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_VAR 0 6
1785: PUSH
1786: FOR_TO
1787: IFFALSE 1868
// begin uc_side = side ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_VAR 0 1
1798: ST_TO_ADDR
// uc_nation = nation ;
1799: LD_ADDR_OWVAR 21
1803: PUSH
1804: LD_VAR 0 2
1808: ST_TO_ADDR
// hc_gallery =  ;
1809: LD_ADDR_OWVAR 33
1813: PUSH
1814: LD_STRING 
1816: ST_TO_ADDR
// hc_name =  ;
1817: LD_ADDR_OWVAR 26
1821: PUSH
1822: LD_STRING 
1824: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1825: LD_INT 0
1827: PPUSH
1828: LD_VAR 0 5
1832: PPUSH
1833: LD_VAR 0 4
1837: PPUSH
1838: CALL_OW 380
// un = CreateHuman ;
1842: LD_ADDR_VAR 0 10
1846: PUSH
1847: CALL_OW 44
1851: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1852: LD_VAR 0 10
1856: PPUSH
1857: LD_VAR 0 3
1861: PPUSH
1862: CALL_OW 52
// end ;
1866: GO 1786
1868: POP
1869: POP
// end ;
1870: LD_VAR 0 7
1874: RET
// export function PrepareDifficulty ; begin
1875: LD_INT 0
1877: PPUSH
// if difficulty = 1 then
1878: LD_OWVAR 67
1882: PUSH
1883: LD_INT 1
1885: EQUAL
1886: IFFALSE 1966
// begin SetTech ( 57 , 3 , state_disabled ) ;
1888: LD_INT 57
1890: PPUSH
1891: LD_INT 3
1893: PPUSH
1894: LD_INT 0
1896: PPUSH
1897: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1901: LD_INT 58
1903: PPUSH
1904: LD_INT 3
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1914: LD_INT 59
1916: PPUSH
1917: LD_INT 3
1919: PPUSH
1920: LD_INT 0
1922: PPUSH
1923: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1927: LD_INT 51
1929: PPUSH
1930: LD_INT 3
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1940: LD_INT 52
1942: PPUSH
1943: LD_INT 3
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1953: LD_INT 53
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 322
// end ; if difficulty = 2 then
1966: LD_OWVAR 67
1970: PUSH
1971: LD_INT 2
1973: EQUAL
1974: IFFALSE 2054
// begin SetTech ( 57 , 3 , state_enabled ) ;
1976: LD_INT 57
1978: PPUSH
1979: LD_INT 3
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1989: LD_INT 58
1991: PPUSH
1992: LD_INT 3
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
2002: LD_INT 59
2004: PPUSH
2005: LD_INT 3
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
2015: LD_INT 51
2017: PPUSH
2018: LD_INT 3
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2028: LD_INT 52
2030: PPUSH
2031: LD_INT 3
2033: PPUSH
2034: LD_INT 1
2036: PPUSH
2037: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
2041: LD_INT 53
2043: PPUSH
2044: LD_INT 3
2046: PPUSH
2047: LD_INT 0
2049: PPUSH
2050: CALL_OW 322
// end ; if difficulty >= 3 then
2054: LD_OWVAR 67
2058: PUSH
2059: LD_INT 3
2061: GREATEREQUAL
2062: IFFALSE 2142
// begin SetTech ( 57 , 3 , state_enabled ) ;
2064: LD_INT 57
2066: PPUSH
2067: LD_INT 3
2069: PPUSH
2070: LD_INT 1
2072: PPUSH
2073: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
2077: LD_INT 58
2079: PPUSH
2080: LD_INT 3
2082: PPUSH
2083: LD_INT 1
2085: PPUSH
2086: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
2090: LD_INT 59
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
2103: LD_INT 51
2105: PPUSH
2106: LD_INT 3
2108: PPUSH
2109: LD_INT 1
2111: PPUSH
2112: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2116: LD_INT 52
2118: PPUSH
2119: LD_INT 3
2121: PPUSH
2122: LD_INT 1
2124: PPUSH
2125: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
2129: LD_INT 53
2131: PPUSH
2132: LD_INT 3
2134: PPUSH
2135: LD_INT 1
2137: PPUSH
2138: CALL_OW 322
// end ; end ;
2142: LD_VAR 0 1
2146: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
2147: LD_INT 0
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
2153: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
2154: LD_ADDR_VAR 0 8
2158: PUSH
2159: LD_INT 48
2161: PUSH
2162: LD_INT 49
2164: PUSH
2165: LD_INT 50
2167: PUSH
2168: LD_INT 20
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: LD_INT 69
2176: PUSH
2177: LD_INT 39
2179: PUSH
2180: LD_INT 34
2182: PUSH
2183: LD_INT 40
2185: PUSH
2186: LD_INT 71
2188: PUSH
2189: LD_INT 57
2191: PUSH
2192: LD_INT 58
2194: PUSH
2195: LD_INT 44
2197: PUSH
2198: LD_INT 32
2200: PUSH
2201: LD_INT 27
2203: PUSH
2204: LD_INT 23
2206: PUSH
2207: LD_INT 33
2209: PUSH
2210: LD_INT 54
2212: PUSH
2213: LD_INT 55
2215: PUSH
2216: LD_INT 56
2218: PUSH
2219: LD_INT 63
2221: PUSH
2222: LD_INT 64
2224: PUSH
2225: LD_INT 65
2227: PUSH
2228: LD_INT 30
2230: PUSH
2231: LD_INT 31
2233: PUSH
2234: LD_INT 21
2236: PUSH
2237: LD_INT 22
2239: PUSH
2240: LD_INT 25
2242: PUSH
2243: LD_INT 51
2245: PUSH
2246: LD_INT 52
2248: PUSH
2249: LD_INT 59
2251: PUSH
2252: LD_INT 53
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2289: LD_ADDR_VAR 0 5
2293: PUSH
2294: DOUBLE
2295: LD_INT 1
2297: DEC
2298: ST_TO_ADDR
2299: LD_VAR 0 8
2303: PUSH
2304: FOR_TO
2305: IFFALSE 2381
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2307: LD_VAR 0 8
2311: PUSH
2312: LD_VAR 0 5
2316: ARRAY
2317: PPUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 321
2327: PUSH
2328: LD_INT 1
2330: EQUAL
2331: PUSH
2332: LD_VAR 0 8
2336: PUSH
2337: LD_VAR 0 5
2341: ARRAY
2342: PPUSH
2343: LD_VAR 0 3
2347: PPUSH
2348: CALL_OW 482
2352: PUSH
2353: LD_INT 1
2355: EQUAL
2356: AND
2357: IFFALSE 2379
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 8
2368: PUSH
2369: LD_VAR 0 5
2373: ARRAY
2374: PPUSH
2375: CALL_OW 184
2379: GO 2304
2381: POP
2382: POP
// end ;
2383: LD_VAR 0 4
2387: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2388: LD_INT 0
2390: PPUSH
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
2395: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2396: LD_ADDR_VAR 0 8
2400: PUSH
2401: LD_VAR 0 2
2405: PPUSH
2406: CALL_OW 313
2410: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2411: LD_ADDR_VAR 0 9
2415: PUSH
2416: LD_VAR 0 3
2420: PPUSH
2421: LD_INT 22
2423: PUSH
2424: LD_VAR 0 1
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 25
2435: PUSH
2436: LD_INT 2
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: PUSH
2443: LD_INT 24
2445: PUSH
2446: LD_INT 750
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PUSH
2453: LD_INT 3
2455: PUSH
2456: LD_INT 54
2458: PUSH
2459: EMPTY
2460: LIST
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 70
2476: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2477: LD_ADDR_VAR 0 6
2481: PUSH
2482: LD_VAR 0 3
2486: PPUSH
2487: LD_INT 22
2489: PUSH
2490: LD_VAR 0 1
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: LD_INT 21
2501: PUSH
2502: LD_INT 3
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 3
2511: PUSH
2512: LD_INT 24
2514: PUSH
2515: LD_INT 1000
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: PPUSH
2534: CALL_OW 70
2538: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2539: LD_VAR 0 6
2543: NOT
2544: PUSH
2545: LD_INT 22
2547: PUSH
2548: LD_VAR 0 1
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 25
2559: PUSH
2560: LD_INT 2
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 24
2569: PUSH
2570: LD_INT 250
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: LIST
2581: PPUSH
2582: CALL_OW 69
2586: NOT
2587: AND
2588: IFFALSE 2592
// exit ;
2590: GO 2774
// if buildings_list > 0 and engineerOkInside then
2592: LD_VAR 0 6
2596: PUSH
2597: LD_INT 0
2599: GREATER
2600: PUSH
2601: LD_VAR 0 8
2605: AND
2606: IFFALSE 2617
// ComExitBuilding ( engineerOkInside ) ;
2608: LD_VAR 0 8
2612: PPUSH
2613: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2617: LD_VAR 0 6
2621: PUSH
2622: LD_INT 0
2624: GREATER
2625: PUSH
2626: LD_VAR 0 9
2630: PUSH
2631: LD_INT 0
2633: GREATER
2634: AND
2635: IFFALSE 2655
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2637: LD_VAR 0 9
2641: PPUSH
2642: LD_VAR 0 6
2646: PUSH
2647: LD_INT 1
2649: ARRAY
2650: PPUSH
2651: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2655: LD_VAR 0 6
2659: PUSH
2660: LD_INT 0
2662: EQUAL
2663: PUSH
2664: LD_VAR 0 4
2668: PUSH
2669: LD_INT 0
2671: EQUAL
2672: AND
2673: PUSH
2674: LD_VAR 0 9
2678: PUSH
2679: LD_INT 0
2681: GREATER
2682: AND
2683: IFFALSE 2699
// ComEnterUnit ( engineerOkOutside , building ) ;
2685: LD_VAR 0 9
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2699: LD_VAR 0 9
2703: PUSH
2704: LD_INT 0
2706: GREATER
2707: PUSH
2708: LD_VAR 0 6
2712: PUSH
2713: LD_INT 0
2715: EQUAL
2716: AND
2717: PUSH
2718: LD_VAR 0 4
2722: PUSH
2723: LD_INT 0
2725: GREATER
2726: AND
2727: IFFALSE 2774
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2729: LD_VAR 0 9
2733: PPUSH
2734: LD_VAR 0 4
2738: PUSH
2739: LD_INT 1
2741: ARRAY
2742: PPUSH
2743: LD_VAR 0 4
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 4
2756: PUSH
2757: LD_INT 3
2759: ARRAY
2760: PPUSH
2761: LD_VAR 0 4
2765: PUSH
2766: LD_INT 4
2768: ARRAY
2769: PPUSH
2770: CALL_OW 145
// end ;
2774: LD_VAR 0 5
2778: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2779: LD_INT 0
2781: PPUSH
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
2787: PPUSH
2788: PPUSH
2789: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2790: LD_ADDR_VAR 0 6
2794: PUSH
2795: LD_INT 22
2797: PUSH
2798: LD_VAR 0 1
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 25
2809: PUSH
2810: LD_INT 4
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 23
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 24
2829: PUSH
2830: LD_INT 251
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: PPUSH
2843: CALL_OW 69
2847: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2848: LD_ADDR_VAR 0 7
2852: PUSH
2853: LD_VAR 0 3
2857: PPUSH
2858: LD_INT 22
2860: PUSH
2861: LD_VAR 0 1
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PUSH
2870: LD_INT 23
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: LD_INT 25
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: LD_INT 50
2892: PUSH
2893: EMPTY
2894: LIST
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 70
2906: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2907: LD_ADDR_VAR 0 10
2911: PUSH
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 22
2919: PUSH
2920: LD_VAR 0 1
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 21
2931: PUSH
2932: LD_INT 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: LD_INT 3
2941: PUSH
2942: LD_INT 25
2944: PUSH
2945: LD_INT 3
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: LD_INT 24
2961: PUSH
2962: LD_INT 750
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: PPUSH
2979: CALL_OW 70
2983: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2984: LD_ADDR_VAR 0 11
2988: PUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_INT 22
2996: PUSH
2997: LD_VAR 0 1
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 21
3008: PUSH
3009: LD_INT 1
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 3
3018: PUSH
3019: LD_INT 25
3021: PUSH
3022: LD_INT 3
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: LD_INT 3
3035: PUSH
3036: LD_INT 24
3038: PUSH
3039: LD_INT 1000
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: PPUSH
3056: CALL_OW 70
3060: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
3061: LD_VAR 0 10
3065: NOT
3066: PUSH
3067: LD_VAR 0 11
3071: NOT
3072: AND
3073: PUSH
3074: LD_VAR 0 6
3078: NOT
3079: AND
3080: IFFALSE 3084
// exit ;
3082: GO 3318
// if damageUnits > 0 and sci_list > 0 then
3084: LD_VAR 0 10
3088: PUSH
3089: LD_INT 0
3091: GREATER
3092: PUSH
3093: LD_VAR 0 6
3097: PUSH
3098: LD_INT 0
3100: GREATER
3101: AND
3102: IFFALSE 3118
// ComMoveToArea ( damageUnits , healArea ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_VAR 0 2
3113: PPUSH
3114: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
3118: LD_VAR 0 11
3122: PUSH
3123: LD_INT 0
3125: GREATER
3126: PUSH
3127: LD_VAR 0 6
3131: PUSH
3132: LD_INT 0
3134: GREATER
3135: AND
3136: IFFALSE 3147
// ComExitBuilding ( sci_list ) ;
3138: LD_VAR 0 6
3142: PPUSH
3143: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
3147: LD_VAR 0 11
3151: PUSH
3152: LD_INT 0
3154: GREATER
3155: PUSH
3156: LD_VAR 0 7
3160: PUSH
3161: LD_INT 0
3163: GREATER
3164: AND
3165: IFFALSE 3185
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
3167: LD_VAR 0 7
3171: PPUSH
3172: LD_VAR 0 11
3176: PUSH
3177: LD_INT 1
3179: ARRAY
3180: PPUSH
3181: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
3185: LD_VAR 0 10
3189: PUSH
3190: LD_INT 0
3192: EQUAL
3193: PUSH
3194: LD_VAR 0 11
3198: PUSH
3199: LD_INT 0
3201: EQUAL
3202: AND
3203: PUSH
3204: LD_VAR 0 7
3208: PUSH
3209: LD_INT 0
3211: GREATER
3212: AND
3213: IFFALSE 3318
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3215: LD_ADDR_VAR 0 12
3219: PUSH
3220: LD_INT 22
3222: PUSH
3223: LD_VAR 0 1
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 21
3234: PUSH
3235: LD_INT 3
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 30
3244: PUSH
3245: LD_INT 8
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 69
3261: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3262: LD_ADDR_VAR 0 13
3266: PUSH
3267: LD_INT 1
3269: PPUSH
3270: LD_VAR 0 12
3274: PPUSH
3275: CALL_OW 12
3279: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3280: LD_VAR 0 7
3284: PPUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 60
3290: PUSH
3291: EMPTY
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 72
3302: PPUSH
3303: LD_VAR 0 12
3307: PUSH
3308: LD_VAR 0 13
3312: ARRAY
3313: PPUSH
3314: CALL_OW 120
// end ; end ;
3318: LD_VAR 0 5
3322: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3323: LD_INT 0
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
// tmpTab = [ ] ;
3329: LD_ADDR_VAR 0 6
3333: PUSH
3334: EMPTY
3335: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3336: LD_INT 22
3338: PUSH
3339: LD_VAR 0 1
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 30
3350: PUSH
3351: LD_INT 32
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PPUSH
3362: CALL_OW 69
3366: PUSH
3367: LD_INT 0
3369: GREATER
3370: IFFALSE 3453
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3372: LD_ADDR_VAR 0 4
3376: PUSH
3377: LD_INT 22
3379: PUSH
3380: LD_VAR 0 1
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 30
3391: PUSH
3392: LD_INT 32
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 69
3407: PUSH
3408: FOR_IN
3409: IFFALSE 3451
// begin for j in UnitsInside ( i ) do
3411: LD_ADDR_VAR 0 5
3415: PUSH
3416: LD_VAR 0 4
3420: PPUSH
3421: CALL_OW 313
3425: PUSH
3426: FOR_IN
3427: IFFALSE 3447
// tmpTab = tmpTab ^ j ;
3429: LD_ADDR_VAR 0 6
3433: PUSH
3434: LD_VAR 0 6
3438: PUSH
3439: LD_VAR 0 5
3443: ADD
3444: ST_TO_ADDR
3445: GO 3426
3447: POP
3448: POP
// end ;
3449: GO 3408
3451: POP
3452: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3453: LD_VAR 0 6
3457: PPUSH
3458: LD_VAR 0 2
3462: PPUSH
3463: CALL_OW 250
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 251
3477: PPUSH
3478: CALL_OW 114
// end ;
3482: LD_VAR 0 3
3486: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3487: LD_INT 0
3489: PPUSH
3490: PPUSH
3491: PPUSH
3492: PPUSH
// enable ;
3493: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3494: LD_ADDR_VAR 0 7
3498: PUSH
3499: LD_VAR 0 3
3503: PPUSH
3504: CALL_OW 435
3508: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3509: LD_ADDR_VAR 0 6
3513: PUSH
3514: LD_INT 22
3516: PUSH
3517: LD_VAR 0 1
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PUSH
3526: LD_INT 34
3528: PUSH
3529: LD_VAR 0 2
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: CALL_OW 69
3546: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3547: LD_VAR 0 6
3551: PUSH
3552: LD_INT 0
3554: GREATER
3555: PUSH
3556: LD_VAR 0 3
3560: PPUSH
3561: CALL_OW 435
3565: AND
3566: PUSH
3567: LD_VAR 0 7
3571: PUSH
3572: LD_INT 0
3574: GREATER
3575: AND
3576: IFFALSE 3625
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3578: LD_VAR 0 6
3582: PUSH
3583: LD_INT 1
3585: ARRAY
3586: PPUSH
3587: LD_VAR 0 7
3591: PUSH
3592: LD_INT 1
3594: ARRAY
3595: PPUSH
3596: LD_VAR 0 7
3600: PUSH
3601: LD_INT 2
3603: ARRAY
3604: PPUSH
3605: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3609: LD_VAR 0 6
3613: PUSH
3614: LD_INT 1
3616: ARRAY
3617: PPUSH
3618: LD_INT 100
3620: PPUSH
3621: CALL_OW 240
// end ; end ;
3625: LD_VAR 0 4
3629: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3630: LD_INT 0
3632: PPUSH
3633: PPUSH
// for i = 1 to vehCount do
3634: LD_ADDR_VAR 0 9
3638: PUSH
3639: DOUBLE
3640: LD_INT 1
3642: DEC
3643: ST_TO_ADDR
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_TO
3650: IFFALSE 3697
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3652: LD_VAR 0 2
3656: PPUSH
3657: LD_VAR 0 7
3661: PPUSH
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_VAR 0 6
3671: PPUSH
3672: LD_VAR 0 4
3676: PUSH
3677: LD_INT 1
3679: PPUSH
3680: LD_VAR 0 4
3684: PPUSH
3685: CALL_OW 12
3689: ARRAY
3690: PPUSH
3691: CALL_OW 185
3695: GO 3649
3697: POP
3698: POP
// end ;
3699: LD_VAR 0 8
3703: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3704: LD_INT 0
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3712: LD_ADDR_VAR 0 6
3716: PUSH
3717: LD_INT 22
3719: PUSH
3720: LD_VAR 0 1
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: LD_INT 25
3731: PUSH
3732: LD_INT 9
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 69
3747: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3748: LD_ADDR_VAR 0 7
3752: PUSH
3753: LD_INT 81
3755: PUSH
3756: LD_VAR 0 1
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: PUSH
3765: LD_INT 3
3767: PUSH
3768: LD_INT 21
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PPUSH
3786: CALL_OW 69
3790: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3791: LD_ADDR_VAR 0 4
3795: PUSH
3796: LD_INT 1
3798: PPUSH
3799: LD_INT 3
3801: PPUSH
3802: CALL_OW 12
3806: ST_TO_ADDR
// for i = 1 to list do
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: DOUBLE
3813: LD_INT 1
3815: DEC
3816: ST_TO_ADDR
3817: LD_VAR 0 6
3821: PUSH
3822: FOR_TO
3823: IFFALSE 4025
// for ta in filter do
3825: LD_ADDR_VAR 0 3
3829: PUSH
3830: LD_VAR 0 7
3834: PUSH
3835: FOR_IN
3836: IFFALSE 4021
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3838: LD_VAR 0 6
3842: PUSH
3843: LD_VAR 0 5
3847: ARRAY
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 296
3858: PUSH
3859: LD_INT 15
3861: LESSEQUAL
3862: IFFALSE 4019
// begin case c of 1 :
3864: LD_VAR 0 4
3868: PUSH
3869: LD_INT 1
3871: DOUBLE
3872: EQUAL
3873: IFTRUE 3877
3875: GO 3915
3877: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3878: LD_VAR 0 6
3882: PUSH
3883: LD_VAR 0 5
3887: ARRAY
3888: PPUSH
3889: LD_VAR 0 3
3893: PPUSH
3894: CALL_OW 250
3898: PPUSH
3899: LD_VAR 0 3
3903: PPUSH
3904: CALL_OW 251
3908: PPUSH
3909: CALL_OW 154
3913: GO 4019
3915: LD_INT 2
3917: DOUBLE
3918: EQUAL
3919: IFTRUE 3923
3921: GO 3987
3923: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3924: LD_VAR 0 6
3928: PUSH
3929: LD_VAR 0 5
3933: ARRAY
3934: PPUSH
3935: LD_VAR 0 3
3939: PPUSH
3940: CALL_OW 250
3944: PUSH
3945: LD_INT 1
3947: NEG
3948: PPUSH
3949: LD_INT 1
3951: PPUSH
3952: CALL_OW 12
3956: PLUS
3957: PPUSH
3958: LD_VAR 0 3
3962: PPUSH
3963: CALL_OW 251
3967: PUSH
3968: LD_INT 1
3970: NEG
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: CALL_OW 12
3979: PLUS
3980: PPUSH
3981: CALL_OW 153
3985: GO 4019
3987: LD_INT 3
3989: DOUBLE
3990: EQUAL
3991: IFTRUE 3995
3993: GO 4018
3995: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3996: LD_VAR 0 6
4000: PUSH
4001: LD_VAR 0 5
4005: ARRAY
4006: PPUSH
4007: LD_VAR 0 3
4011: PPUSH
4012: CALL_OW 115
4016: GO 4019
4018: POP
// end ; end ;
4019: GO 3835
4021: POP
4022: POP
4023: GO 3822
4025: POP
4026: POP
// end ;
4027: LD_VAR 0 2
4031: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4032: LD_INT 0
4034: PPUSH
4035: PPUSH
4036: PPUSH
4037: PPUSH
4038: PPUSH
4039: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4040: LD_ADDR_VAR 0 7
4044: PUSH
4045: LD_VAR 0 2
4049: PPUSH
4050: LD_INT 22
4052: PUSH
4053: LD_VAR 0 1
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 21
4064: PUSH
4065: LD_INT 2
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 34
4074: PUSH
4075: LD_INT 52
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: PPUSH
4087: CALL_OW 70
4091: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4092: LD_ADDR_VAR 0 8
4096: PUSH
4097: LD_VAR 0 2
4101: PPUSH
4102: LD_INT 22
4104: PUSH
4105: LD_VAR 0 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 21
4116: PUSH
4117: LD_INT 3
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: LD_INT 24
4129: PUSH
4130: LD_INT 1000
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: LIST
4145: PUSH
4146: EMPTY
4147: LIST
4148: PPUSH
4149: CALL_OW 70
4153: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4154: LD_VAR 0 8
4158: PUSH
4159: LD_INT 0
4161: GREATER
4162: PUSH
4163: LD_VAR 0 7
4167: PPUSH
4168: LD_INT 24
4170: PUSH
4171: LD_INT 750
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PPUSH
4178: CALL_OW 72
4182: PUSH
4183: LD_INT 0
4185: GREATER
4186: AND
4187: IFFALSE 4207
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4189: LD_VAR 0 7
4193: PPUSH
4194: LD_VAR 0 8
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4207: LD_VAR 0 7
4211: PUSH
4212: LD_INT 0
4214: GREATER
4215: PUSH
4216: LD_VAR 0 8
4220: PUSH
4221: LD_INT 0
4223: EQUAL
4224: AND
4225: PUSH
4226: LD_EXP 10
4230: PUSH
4231: LD_INT 0
4233: GREATER
4234: AND
4235: IFFALSE 4282
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4237: LD_VAR 0 7
4241: PPUSH
4242: LD_EXP 10
4246: PUSH
4247: LD_INT 1
4249: ARRAY
4250: PPUSH
4251: LD_EXP 10
4255: PUSH
4256: LD_INT 2
4258: ARRAY
4259: PPUSH
4260: LD_EXP 10
4264: PUSH
4265: LD_INT 3
4267: ARRAY
4268: PPUSH
4269: LD_EXP 10
4273: PUSH
4274: LD_INT 4
4276: ARRAY
4277: PPUSH
4278: CALL_OW 567
// end ; end_of_file
4282: LD_VAR 0 3
4286: RET
// every 0 0$1 do
4287: GO 4289
4289: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4290: LD_INT 3
4292: PPUSH
4293: LD_INT 14
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: CALL 2147 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4303: LD_INT 3
4305: PPUSH
4306: LD_INT 15
4308: PPUSH
4309: LD_INT 3
4311: PPUSH
4312: CALL 2147 0 3
// end ;
4316: END
// every 0 0$1 trigger russianAI = 1 do
4317: LD_EXP 13
4321: PUSH
4322: LD_INT 1
4324: EQUAL
4325: IFFALSE 4414
4327: GO 4329
4329: DISABLE
// begin enable ;
4330: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4331: LD_INT 3
4333: PPUSH
4334: LD_INT 22
4336: PPUSH
4337: LD_INT 7
4339: PPUSH
4340: LD_EXP 10
4344: PPUSH
4345: CALL 2388 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4349: LD_INT 3
4351: PPUSH
4352: LD_INT 8
4354: PPUSH
4355: LD_INT 7
4357: PPUSH
4358: LD_INT 14
4360: PUSH
4361: LD_INT 15
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 1
4370: PPUSH
4371: LD_INT 2
4373: PPUSH
4374: CALL_OW 12
4378: ARRAY
4379: PPUSH
4380: CALL 2779 0 4
// IntBazooka ( 3 ) ;
4384: LD_INT 3
4386: PPUSH
4387: CALL 3704 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4391: LD_INT 3
4393: PPUSH
4394: LD_INT 51
4396: PPUSH
4397: LD_INT 14
4399: PPUSH
4400: CALL 3487 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4404: LD_INT 3
4406: PPUSH
4407: LD_INT 7
4409: PPUSH
4410: CALL 4032 0 2
// end ;
4414: END
// every 0 0$30 trigger russianTanks >= [ 5 , 6 , 8 , 8 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 , 3 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
4415: LD_EXP 11
4419: PUSH
4420: LD_INT 5
4422: PUSH
4423: LD_INT 6
4425: PUSH
4426: LD_INT 8
4428: PUSH
4429: LD_INT 8
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: PUSH
4438: LD_OWVAR 67
4442: ARRAY
4443: GREATEREQUAL
4444: PUSH
4445: LD_EXP 12
4449: PUSH
4450: LD_INT 1
4452: PUSH
4453: LD_INT 2
4455: PUSH
4456: LD_INT 3
4458: PUSH
4459: LD_INT 3
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: PUSH
4468: LD_OWVAR 67
4472: ARRAY
4473: GREATEREQUAL
4474: AND
4475: IFFALSE 4956
4477: GO 4479
4479: DISABLE
4480: LD_INT 0
4482: PPUSH
4483: PPUSH
4484: PPUSH
4485: PPUSH
// begin enable ;
4486: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
4487: LD_ADDR_VAR 0 2
4491: PUSH
4492: LD_EXP 11
4496: PUSH
4497: LD_EXP 12
4501: UNION
4502: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
4503: LD_ADDR_EXP 11
4507: PUSH
4508: LD_EXP 11
4512: PUSH
4513: LD_VAR 0 2
4517: DIFF
4518: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
4519: LD_ADDR_EXP 12
4523: PUSH
4524: LD_EXP 12
4528: PUSH
4529: LD_VAR 0 2
4533: DIFF
4534: ST_TO_ADDR
// if IsOk ( ruTeleport ) then
4535: LD_INT 116
4537: PPUSH
4538: CALL_OW 302
4542: IFFALSE 4606
// begin for j in tmp do
4544: LD_ADDR_VAR 0 1
4548: PUSH
4549: LD_VAR 0 2
4553: PUSH
4554: FOR_IN
4555: IFFALSE 4597
// if Prob ( 40 ) then
4557: LD_INT 40
4559: PPUSH
4560: CALL_OW 13
4564: IFFALSE 4580
// ComEnterUnit ( j , ruTeleport ) else
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_INT 116
4573: PPUSH
4574: CALL_OW 120
4578: GO 4595
// ComAgressiveMove ( j , 117 , 92 ) ;
4580: LD_VAR 0 1
4584: PPUSH
4585: LD_INT 117
4587: PPUSH
4588: LD_INT 92
4590: PPUSH
4591: CALL_OW 114
4595: GO 4554
4597: POP
4598: POP
// wait ( 0 0$14 ) ;
4599: LD_INT 490
4601: PPUSH
4602: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4606: LD_INT 35
4608: PPUSH
4609: CALL_OW 67
// for j in tmp do
4613: LD_ADDR_VAR 0 1
4617: PUSH
4618: LD_VAR 0 2
4622: PUSH
4623: FOR_IN
4624: IFFALSE 4947
// begin if IsDead ( j ) then
4626: LD_VAR 0 1
4630: PPUSH
4631: CALL_OW 301
4635: IFFALSE 4653
// tmp := tmp diff j ;
4637: LD_ADDR_VAR 0 2
4641: PUSH
4642: LD_VAR 0 2
4646: PUSH
4647: LD_VAR 0 1
4651: DIFF
4652: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
4653: LD_ADDR_VAR 0 3
4657: PUSH
4658: LD_INT 81
4660: PUSH
4661: LD_INT 3
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PPUSH
4668: CALL_OW 69
4672: PPUSH
4673: LD_VAR 0 1
4677: PPUSH
4678: CALL_OW 74
4682: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
4683: LD_ADDR_VAR 0 4
4687: PUSH
4688: LD_INT 81
4690: PUSH
4691: LD_INT 3
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: LD_INT 21
4700: PUSH
4701: LD_INT 1
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PUSH
4712: EMPTY
4713: LIST
4714: PPUSH
4715: CALL_OW 69
4719: PPUSH
4720: LD_VAR 0 1
4724: PPUSH
4725: CALL_OW 74
4729: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
4730: LD_VAR 0 1
4734: PPUSH
4735: CALL_OW 264
4739: PUSH
4740: LD_INT 49
4742: EQUAL
4743: IFFALSE 4879
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
4745: LD_VAR 0 2
4749: PPUSH
4750: LD_INT 3
4752: PUSH
4753: LD_INT 34
4755: PUSH
4756: LD_INT 49
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 72
4771: PUSH
4772: LD_INT 1
4774: GREATER
4775: PUSH
4776: LD_VAR 0 2
4780: PPUSH
4781: LD_INT 3
4783: PUSH
4784: LD_INT 34
4786: PUSH
4787: LD_INT 49
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PPUSH
4798: CALL_OW 72
4802: AND
4803: IFFALSE 4853
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
4805: LD_VAR 0 1
4809: PPUSH
4810: LD_VAR 0 2
4814: PPUSH
4815: LD_INT 3
4817: PUSH
4818: LD_INT 34
4820: PUSH
4821: LD_INT 49
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PPUSH
4832: CALL_OW 72
4836: PPUSH
4837: LD_VAR 0 1
4841: PPUSH
4842: CALL_OW 74
4846: PPUSH
4847: CALL_OW 112
4851: GO 4877
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
4853: LD_VAR 0 1
4857: PPUSH
4858: LD_VAR 0 3
4862: PPUSH
4863: LD_VAR 0 1
4867: PPUSH
4868: CALL_OW 74
4872: PPUSH
4873: CALL_OW 112
// end else
4877: GO 4945
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
4879: LD_VAR 0 1
4883: PPUSH
4884: LD_VAR 0 4
4888: PPUSH
4889: CALL_OW 296
4893: PUSH
4894: LD_VAR 0 1
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: CALL_OW 296
4908: PUSH
4909: LD_INT 2
4911: PLUS
4912: LESS
4913: IFFALSE 4931
// ComAttackUnit ( j , target2 ) else
4915: LD_VAR 0 1
4919: PPUSH
4920: LD_VAR 0 4
4924: PPUSH
4925: CALL_OW 115
4929: GO 4945
// ComAttackUnit ( j , target1 ) ;
4931: LD_VAR 0 1
4935: PPUSH
4936: LD_VAR 0 3
4940: PPUSH
4941: CALL_OW 115
// end ; end ;
4945: GO 4623
4947: POP
4948: POP
// until not tmp ;
4949: LD_VAR 0 2
4953: NOT
4954: IFFALSE 4606
// end ;
4956: PPOPN 4
4958: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4959: LD_INT 22
4961: PPUSH
4962: CALL_OW 303
4966: PUSH
4967: LD_INT 22
4969: PPUSH
4970: CALL_OW 255
4974: PUSH
4975: LD_INT 1
4977: EQUAL
4978: OR
4979: IFFALSE 4994
4981: GO 4983
4983: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4984: LD_INT 3
4986: PPUSH
4987: LD_INT 22
4989: PPUSH
4990: CALL 3323 0 2
4994: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4995: LD_EXP 13
4999: PUSH
5000: LD_INT 1
5002: EQUAL
5003: PUSH
5004: LD_INT 22
5006: PUSH
5007: LD_INT 3
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 21
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 50
5026: PUSH
5027: EMPTY
5028: LIST
5029: PUSH
5030: LD_INT 33
5032: PUSH
5033: LD_INT 3
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 2
5042: PUSH
5043: LD_INT 34
5045: PUSH
5046: LD_INT 46
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PUSH
5053: LD_INT 34
5055: PUSH
5056: LD_INT 45
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 34
5065: PUSH
5066: LD_INT 44
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 34
5075: PUSH
5076: LD_INT 49
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 34
5085: PUSH
5086: LD_INT 47
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 69
5112: PUSH
5113: LD_INT 3
5115: LESS
5116: AND
5117: IFFALSE 5312
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// if russianRocketsDisabled then
5123: LD_EXP 14
5127: IFFALSE 5188
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: LD_INT 5
5137: PUSH
5138: LD_INT 6
5140: PUSH
5141: LD_INT 8
5143: PUSH
5144: LD_INT 8
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_OWVAR 67
5157: ARRAY
5158: PPUSH
5159: LD_INT 46
5161: PUSH
5162: LD_INT 45
5164: PUSH
5165: LD_INT 44
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PPUSH
5173: LD_INT 3
5175: PPUSH
5176: LD_INT 3
5178: PPUSH
5179: LD_INT 24
5181: PPUSH
5182: CALL 3630 0 7
5186: GO 5249
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
5188: LD_INT 3
5190: PPUSH
5191: LD_INT 1
5193: PPUSH
5194: LD_INT 5
5196: PUSH
5197: LD_INT 6
5199: PUSH
5200: LD_INT 8
5202: PUSH
5203: LD_INT 8
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: PUSH
5212: LD_OWVAR 67
5216: ARRAY
5217: PPUSH
5218: LD_INT 46
5220: PUSH
5221: LD_INT 45
5223: PUSH
5224: LD_INT 44
5226: PUSH
5227: LD_INT 47
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: PPUSH
5236: LD_INT 3
5238: PPUSH
5239: LD_INT 3
5241: PPUSH
5242: LD_INT 24
5244: PPUSH
5245: CALL 3630 0 7
// if russianTimeLapsers = 0 then
5249: LD_EXP 12
5253: PUSH
5254: LD_INT 0
5256: EQUAL
5257: IFFALSE 5312
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5259: LD_INT 3
5261: PPUSH
5262: LD_INT 40
5264: PPUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: LD_INT 3
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PPUSH
5289: LD_INT 49
5291: PUSH
5292: LD_INT 49
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PPUSH
5299: LD_INT 3
5301: PPUSH
5302: LD_INT 3
5304: PPUSH
5305: LD_INT 24
5307: PPUSH
5308: CALL 3630 0 7
// end ;
5312: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5313: LD_EXP 18
5317: PUSH
5318: LD_INT 22
5320: PUSH
5321: LD_INT 1
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 21
5330: PUSH
5331: LD_INT 2
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 58
5340: PUSH
5341: EMPTY
5342: LIST
5343: PUSH
5344: LD_INT 33
5346: PUSH
5347: LD_INT 1
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: LD_INT 91
5356: PUSH
5357: LD_EXP 18
5361: PUSH
5362: LD_INT 45
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: PPUSH
5377: CALL_OW 69
5381: AND
5382: IFFALSE 5486
5384: GO 5386
5386: DISABLE
// begin wait ( 0 0$5 ) ;
5387: LD_INT 175
5389: PPUSH
5390: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5394: LD_EXP 18
5398: PPUSH
5399: LD_INT 22
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 21
5411: PUSH
5412: LD_INT 2
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 58
5421: PUSH
5422: EMPTY
5423: LIST
5424: PUSH
5425: LD_INT 33
5427: PUSH
5428: LD_INT 1
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: LD_INT 91
5437: PUSH
5438: LD_EXP 18
5442: PUSH
5443: LD_INT 45
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5471: LD_EXP 18
5475: PPUSH
5476: LD_INT 127
5478: PPUSH
5479: LD_INT 63
5481: PPUSH
5482: CALL_OW 171
// end ; end_of_file
5486: END
// every 1 do var dec1 , dec2 ;
5487: GO 5489
5489: DISABLE
5490: LD_INT 0
5492: PPUSH
5493: PPUSH
// begin InGameOn ;
5494: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5498: LD_INT 48
5500: PPUSH
5501: LD_STRING deltakappa
5503: PPUSH
5504: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5508: LD_INT 95
5510: PPUSH
5511: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5515: LD_INT 95
5517: PPUSH
5518: LD_INT 30
5520: PPUSH
5521: LD_INT 11
5523: PPUSH
5524: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5528: LD_INT 30
5530: PPUSH
5531: LD_INT 11
5533: PPUSH
5534: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5538: LD_EXP 5
5542: PPUSH
5543: LD_STRING D1-Pow-1
5545: PPUSH
5546: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5550: LD_EXP 1
5554: PPUSH
5555: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5559: LD_EXP 1
5563: PPUSH
5564: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5568: LD_EXP 1
5572: PPUSH
5573: LD_STRING D1-JMM-1
5575: PPUSH
5576: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5580: LD_EXP 5
5584: PPUSH
5585: LD_STRING D1-Pow-2
5587: PPUSH
5588: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5592: LD_EXP 1
5596: PPUSH
5597: LD_STRING D1-JMM-2
5599: PPUSH
5600: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5604: LD_EXP 1
5608: PPUSH
5609: LD_INT 95
5611: PPUSH
5612: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5616: LD_STRING M1
5618: PPUSH
5619: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5623: LD_INT 35
5625: PPUSH
5626: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5630: LD_EXP 1
5634: PPUSH
5635: LD_INT 95
5637: PPUSH
5638: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5642: LD_INT 95
5644: PPUSH
5645: LD_INT 51
5647: PPUSH
5648: LD_INT 21
5650: PPUSH
5651: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5655: LD_INT 95
5657: PPUSH
5658: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5662: LD_INT 95
5664: PPUSH
5665: LD_INT 5
5667: PPUSH
5668: CALL_OW 308
5672: IFFALSE 5623
// if JMMGirl = 1 then
5674: LD_EXP 7
5678: PUSH
5679: LD_INT 1
5681: EQUAL
5682: IFFALSE 5995
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5684: LD_EXP 2
5688: PPUSH
5689: LD_STRING D2J-Joan-1
5691: PPUSH
5692: CALL_OW 94
// dec1 = query ( Q1 ) ;
5696: LD_ADDR_VAR 0 1
5700: PUSH
5701: LD_STRING Q1
5703: PPUSH
5704: CALL_OW 97
5708: ST_TO_ADDR
// if dec1 = 1 then
5709: LD_VAR 0 1
5713: PUSH
5714: LD_INT 1
5716: EQUAL
5717: IFFALSE 5971
// begin ComExitVehicle ( JMM ) ;
5719: LD_EXP 1
5723: PPUSH
5724: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5728: LD_EXP 1
5732: PPUSH
5733: LD_STRING D2J-JMM-1
5735: PPUSH
5736: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5740: LD_EXP 2
5744: PPUSH
5745: LD_STRING D2J-Joan-2
5747: PPUSH
5748: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5752: LD_EXP 1
5756: PPUSH
5757: LD_STRING D2J-JMM-2
5759: PPUSH
5760: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5764: LD_EXP 2
5768: PPUSH
5769: LD_STRING D2J-Joan-3
5771: PPUSH
5772: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5776: LD_EXP 5
5780: PPUSH
5781: LD_STRING DPowell-Pow-1
5783: PPUSH
5784: CALL_OW 94
// dec2 = query ( Q2J ) ;
5788: LD_ADDR_VAR 0 2
5792: PUSH
5793: LD_STRING Q2J
5795: PPUSH
5796: CALL_OW 97
5800: ST_TO_ADDR
// if dec2 = 1 then
5801: LD_VAR 0 2
5805: PUSH
5806: LD_INT 1
5808: EQUAL
5809: IFFALSE 5851
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5811: LD_EXP 1
5815: PPUSH
5816: LD_STRING D2Ja-JMM-1
5818: PPUSH
5819: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5823: LD_EXP 2
5827: PPUSH
5828: LD_STRING D2Ja-Joan-1
5830: PPUSH
5831: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5835: LD_EXP 1
5839: PPUSH
5840: LD_STRING D2Ja-JMM-2
5842: PPUSH
5843: CALL_OW 88
// InGameOff ;
5847: CALL_OW 9
// end ; if dec2 = 2 then
5851: LD_VAR 0 2
5855: PUSH
5856: LD_INT 2
5858: EQUAL
5859: IFFALSE 5935
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5861: LD_EXP 1
5865: PPUSH
5866: LD_STRING D2Jb-JMM-1
5868: PPUSH
5869: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5873: LD_EXP 2
5877: PPUSH
5878: LD_STRING D2Jb-Joan-1
5880: PPUSH
5881: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5885: LD_EXP 1
5889: PPUSH
5890: LD_STRING D2Jb-JMM-2
5892: PPUSH
5893: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5897: LD_EXP 2
5901: PPUSH
5902: LD_STRING D2Jb-Joan-2
5904: PPUSH
5905: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5909: LD_EXP 1
5913: PPUSH
5914: LD_STRING D2Jb-JMM-3
5916: PPUSH
5917: CALL_OW 88
// fastEnd = 1 ;
5921: LD_ADDR_EXP 15
5925: PUSH
5926: LD_INT 1
5928: ST_TO_ADDR
// FinishMission ;
5929: CALL 9551 0 0
// exit ;
5933: GO 6565
// end ; if dec2 = 3 then
5935: LD_VAR 0 2
5939: PUSH
5940: LD_INT 3
5942: EQUAL
5943: IFFALSE 5971
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5945: LD_EXP 2
5949: PPUSH
5950: LD_STRING D2Jc-Joan-1
5952: PPUSH
5953: CALL_OW 94
// fastEnd = 1 ;
5957: LD_ADDR_EXP 15
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// FinishMission ;
5965: CALL 9551 0 0
// exit ;
5969: GO 6565
// end ; end ; if dec1 = 2 then
5971: LD_VAR 0 1
5975: PUSH
5976: LD_INT 2
5978: EQUAL
5979: IFFALSE 5995
// begin fastEnd = 1 ;
5981: LD_ADDR_EXP 15
5985: PUSH
5986: LD_INT 1
5988: ST_TO_ADDR
// FinishMission ;
5989: CALL 9551 0 0
// exit ;
5993: GO 6565
// end ; end ; if JMMGirl = 2 then
5995: LD_EXP 7
5999: PUSH
6000: LD_INT 2
6002: EQUAL
6003: IFFALSE 6328
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
6005: LD_EXP 3
6009: PPUSH
6010: LD_STRING D2L-Lisa-1
6012: PPUSH
6013: CALL_OW 94
// dec1 = query ( Q1 ) ;
6017: LD_ADDR_VAR 0 1
6021: PUSH
6022: LD_STRING Q1
6024: PPUSH
6025: CALL_OW 97
6029: ST_TO_ADDR
// if dec1 = 1 then
6030: LD_VAR 0 1
6034: PUSH
6035: LD_INT 1
6037: EQUAL
6038: IFFALSE 6304
// begin ComExitVehicle ( JMM ) ;
6040: LD_EXP 1
6044: PPUSH
6045: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
6049: LD_EXP 1
6053: PPUSH
6054: LD_STRING D2L-JMM-1
6056: PPUSH
6057: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
6061: LD_EXP 3
6065: PPUSH
6066: LD_STRING D2L-Lisa-2
6068: PPUSH
6069: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
6073: LD_EXP 1
6077: PPUSH
6078: LD_STRING D2L-JMM-2
6080: PPUSH
6081: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
6085: LD_EXP 3
6089: PPUSH
6090: LD_STRING D2L-Lisa-3
6092: PPUSH
6093: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6097: LD_EXP 5
6101: PPUSH
6102: LD_STRING DPowell-Pow-1
6104: PPUSH
6105: CALL_OW 94
// dec2 = query ( Q2L ) ;
6109: LD_ADDR_VAR 0 2
6113: PUSH
6114: LD_STRING Q2L
6116: PPUSH
6117: CALL_OW 97
6121: ST_TO_ADDR
// if dec2 = 1 then
6122: LD_VAR 0 2
6126: PUSH
6127: LD_INT 1
6129: EQUAL
6130: IFFALSE 6196
// begin Say ( JMM , D2La-JMM-1 ) ;
6132: LD_EXP 1
6136: PPUSH
6137: LD_STRING D2La-JMM-1
6139: PPUSH
6140: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6144: LD_EXP 3
6148: PPUSH
6149: LD_STRING D2La-Lisa-1
6151: PPUSH
6152: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
6156: LD_EXP 1
6160: PPUSH
6161: LD_STRING D2La-JMM-2
6163: PPUSH
6164: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
6168: LD_EXP 3
6172: PPUSH
6173: LD_STRING D2La-Lisa-2
6175: PPUSH
6176: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
6180: LD_EXP 1
6184: PPUSH
6185: LD_STRING D2La-JMM-3
6187: PPUSH
6188: CALL_OW 88
// InGameOff ;
6192: CALL_OW 9
// end ; if dec2 = 2 then
6196: LD_VAR 0 2
6200: PUSH
6201: LD_INT 2
6203: EQUAL
6204: IFFALSE 6268
// begin Say ( JMM , D2Lb-JMM-1 ) ;
6206: LD_EXP 1
6210: PPUSH
6211: LD_STRING D2Lb-JMM-1
6213: PPUSH
6214: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
6218: LD_EXP 3
6222: PPUSH
6223: LD_STRING D2Lb-Lisa-1
6225: PPUSH
6226: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
6230: LD_EXP 1
6234: PPUSH
6235: LD_STRING D2Lb-JMM-2
6237: PPUSH
6238: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
6242: LD_EXP 3
6246: PPUSH
6247: LD_STRING D2Lb-Lisa-2
6249: PPUSH
6250: CALL_OW 94
// fastEnd = 1 ;
6254: LD_ADDR_EXP 15
6258: PUSH
6259: LD_INT 1
6261: ST_TO_ADDR
// FinishMission ;
6262: CALL 9551 0 0
// exit ;
6266: GO 6565
// end ; if dec2 = 3 then
6268: LD_VAR 0 2
6272: PUSH
6273: LD_INT 3
6275: EQUAL
6276: IFFALSE 6304
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6278: LD_EXP 3
6282: PPUSH
6283: LD_STRING D2Lc-Lisa-1
6285: PPUSH
6286: CALL_OW 94
// fastEnd = 1 ;
6290: LD_ADDR_EXP 15
6294: PUSH
6295: LD_INT 1
6297: ST_TO_ADDR
// FinishMission ;
6298: CALL 9551 0 0
// exit ;
6302: GO 6565
// end ; end ; if dec1 = 2 then
6304: LD_VAR 0 1
6308: PUSH
6309: LD_INT 2
6311: EQUAL
6312: IFFALSE 6328
// begin fastEnd = 1 ;
6314: LD_ADDR_EXP 15
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// FinishMission ;
6322: CALL 9551 0 0
// exit ;
6326: GO 6565
// end ; end ; if JMMGirl = 3 then
6328: LD_EXP 7
6332: PUSH
6333: LD_INT 3
6335: EQUAL
6336: IFFALSE 6565
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6338: LD_EXP 4
6342: PPUSH
6343: LD_STRING D2X-Con-1
6345: PPUSH
6346: CALL_OW 94
// dec1 = query ( Q1 ) ;
6350: LD_ADDR_VAR 0 1
6354: PUSH
6355: LD_STRING Q1
6357: PPUSH
6358: CALL_OW 97
6362: ST_TO_ADDR
// if dec1 = 1 then
6363: LD_VAR 0 1
6367: PUSH
6368: LD_INT 1
6370: EQUAL
6371: IFFALSE 6541
// begin ComExitVehicle ( JMM ) ;
6373: LD_EXP 1
6377: PPUSH
6378: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6382: LD_EXP 1
6386: PPUSH
6387: LD_STRING D2X-JMM-1
6389: PPUSH
6390: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6394: LD_EXP 4
6398: PPUSH
6399: LD_STRING D2X-Con-2
6401: PPUSH
6402: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6406: LD_EXP 5
6410: PPUSH
6411: LD_STRING DPowell-Pow-1
6413: PPUSH
6414: CALL_OW 94
// dec2 = query ( Q2X ) ;
6418: LD_ADDR_VAR 0 2
6422: PUSH
6423: LD_STRING Q2X
6425: PPUSH
6426: CALL_OW 97
6430: ST_TO_ADDR
// if dec2 = 1 then
6431: LD_VAR 0 2
6435: PUSH
6436: LD_INT 1
6438: EQUAL
6439: IFFALSE 6457
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6441: LD_EXP 1
6445: PPUSH
6446: LD_STRING D2Xa-JMM-1
6448: PPUSH
6449: CALL_OW 88
// InGameOff ;
6453: CALL_OW 9
// end ; if dec2 = 2 then
6457: LD_VAR 0 2
6461: PUSH
6462: LD_INT 2
6464: EQUAL
6465: IFFALSE 6505
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6467: LD_EXP 1
6471: PPUSH
6472: LD_STRING D2Xb-JMM-1
6474: PPUSH
6475: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6479: LD_EXP 4
6483: PPUSH
6484: LD_STRING D2Xb-Con-1
6486: PPUSH
6487: CALL_OW 94
// fastEnd = 1 ;
6491: LD_ADDR_EXP 15
6495: PUSH
6496: LD_INT 1
6498: ST_TO_ADDR
// FinishMission ;
6499: CALL 9551 0 0
// exit ;
6503: GO 6565
// end ; if dec2 = 3 then
6505: LD_VAR 0 2
6509: PUSH
6510: LD_INT 3
6512: EQUAL
6513: IFFALSE 6541
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6515: LD_EXP 4
6519: PPUSH
6520: LD_STRING D2Xc-Con-1
6522: PPUSH
6523: CALL_OW 94
// fastEnd = 1 ;
6527: LD_ADDR_EXP 15
6531: PUSH
6532: LD_INT 1
6534: ST_TO_ADDR
// FinishMission ;
6535: CALL 9551 0 0
// exit ;
6539: GO 6565
// end ; end ; if dec1 = 2 then
6541: LD_VAR 0 1
6545: PUSH
6546: LD_INT 2
6548: EQUAL
6549: IFFALSE 6565
// begin fastEnd = 1 ;
6551: LD_ADDR_EXP 15
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// FinishMission ;
6559: CALL 9551 0 0
// exit ;
6563: GO 6565
// end ; end ; end ;
6565: PPOPN 2
6567: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6568: LD_EXP 1
6572: PPUSH
6573: LD_INT 6
6575: PPUSH
6576: CALL_OW 308
6580: IFFALSE 7322
6582: GO 6584
6584: DISABLE
// begin InGameOn ;
6585: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6589: LD_INT 35
6591: PPUSH
6592: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6596: LD_EXP 1
6600: PPUSH
6601: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6605: LD_EXP 1
6609: PPUSH
6610: LD_INT 62
6612: PPUSH
6613: LD_INT 104
6615: PPUSH
6616: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6620: LD_EXP 1
6624: PPUSH
6625: LD_EXP 2
6629: PPUSH
6630: CALL_OW 296
6634: PUSH
6635: LD_INT 4
6637: LESS
6638: PUSH
6639: LD_EXP 1
6643: PPUSH
6644: LD_EXP 3
6648: PPUSH
6649: CALL_OW 296
6653: PUSH
6654: LD_INT 4
6656: LESS
6657: OR
6658: PUSH
6659: LD_EXP 1
6663: PPUSH
6664: LD_EXP 4
6668: PPUSH
6669: CALL_OW 296
6673: PUSH
6674: LD_INT 4
6676: LESS
6677: OR
6678: IFFALSE 6589
// case JMMGirl of 1 :
6680: LD_EXP 7
6684: PUSH
6685: LD_INT 1
6687: DOUBLE
6688: EQUAL
6689: IFTRUE 6693
6691: GO 6905
6693: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6694: LD_INT 22
6696: PUSH
6697: LD_INT 4
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PPUSH
6704: CALL_OW 69
6708: PPUSH
6709: LD_INT 1
6711: PPUSH
6712: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6716: LD_EXP 2
6720: PPUSH
6721: LD_EXP 1
6725: PPUSH
6726: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6730: LD_EXP 1
6734: PPUSH
6735: LD_EXP 2
6739: PPUSH
6740: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6744: LD_EXP 2
6748: PUSH
6749: LD_EXP 1
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PPUSH
6758: CALL_OW 87
// wait ( 0 0$1 ) ;
6762: LD_INT 35
6764: PPUSH
6765: CALL_OW 67
// DialogueOn ;
6769: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6773: LD_EXP 2
6777: PPUSH
6778: LD_STRING D3J-Joan-1
6780: PPUSH
6781: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6785: LD_EXP 1
6789: PPUSH
6790: LD_STRING D3J-JMM-1
6792: PPUSH
6793: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6797: LD_EXP 2
6801: PPUSH
6802: LD_STRING D3J-Joan-2
6804: PPUSH
6805: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6809: LD_EXP 1
6813: PPUSH
6814: LD_STRING D3J-JMM-2
6816: PPUSH
6817: CALL_OW 88
// wait ( 0 0$1 ) ;
6821: LD_INT 35
6823: PPUSH
6824: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6828: LD_EXP 1
6832: PPUSH
6833: LD_STRING D4-JMM-1
6835: PPUSH
6836: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6840: LD_EXP 2
6844: PPUSH
6845: LD_STRING D4-Joan-1
6847: PPUSH
6848: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6852: LD_EXP 1
6856: PPUSH
6857: LD_STRING D4-JMM-2
6859: PPUSH
6860: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6864: LD_EXP 2
6868: PPUSH
6869: LD_STRING D4-Joan-2
6871: PPUSH
6872: CALL_OW 88
// DialogueOff ;
6876: CALL_OW 7
// InGameOff ;
6880: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6884: LD_STRING M2J
6886: PPUSH
6887: CALL_OW 337
// SaveForQuickRestart ;
6891: CALL_OW 22
// russianAI = 1 ;
6895: LD_ADDR_EXP 13
6899: PUSH
6900: LD_INT 1
6902: ST_TO_ADDR
// end ; 2 :
6903: GO 7322
6905: LD_INT 2
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 7125
6913: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6914: LD_INT 22
6916: PUSH
6917: LD_INT 4
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: PPUSH
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6936: LD_EXP 3
6940: PPUSH
6941: LD_EXP 1
6945: PPUSH
6946: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6950: LD_EXP 1
6954: PPUSH
6955: LD_EXP 3
6959: PPUSH
6960: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6964: LD_EXP 3
6968: PUSH
6969: LD_EXP 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PPUSH
6978: CALL_OW 87
// wait ( 0 0$1 ) ;
6982: LD_INT 35
6984: PPUSH
6985: CALL_OW 67
// DialogueOn ;
6989: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6993: LD_EXP 3
6997: PPUSH
6998: LD_STRING D3L-Lisa-1
7000: PPUSH
7001: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
7005: LD_EXP 1
7009: PPUSH
7010: LD_STRING D3L-JMM-1
7012: PPUSH
7013: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
7017: LD_EXP 3
7021: PPUSH
7022: LD_STRING D3L-Lisa-2
7024: PPUSH
7025: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
7029: LD_EXP 1
7033: PPUSH
7034: LD_STRING D3L-JMM-2
7036: PPUSH
7037: CALL_OW 88
// wait ( 0 0$1 ) ;
7041: LD_INT 35
7043: PPUSH
7044: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7048: LD_EXP 1
7052: PPUSH
7053: LD_STRING D4-JMM-1
7055: PPUSH
7056: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
7060: LD_EXP 3
7064: PPUSH
7065: LD_STRING D4-Lisa-1
7067: PPUSH
7068: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7072: LD_EXP 1
7076: PPUSH
7077: LD_STRING D4-JMM-1
7079: PPUSH
7080: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
7084: LD_EXP 3
7088: PPUSH
7089: LD_STRING D4-Lisa-2
7091: PPUSH
7092: CALL_OW 88
// DialogueOff ;
7096: CALL_OW 7
// InGameOff ;
7100: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
7104: LD_STRING M2L
7106: PPUSH
7107: CALL_OW 337
// SaveForQuickRestart ;
7111: CALL_OW 22
// russianAI = 1 ;
7115: LD_ADDR_EXP 13
7119: PUSH
7120: LD_INT 1
7122: ST_TO_ADDR
// end ; 3 :
7123: GO 7322
7125: LD_INT 3
7127: DOUBLE
7128: EQUAL
7129: IFTRUE 7133
7131: GO 7321
7133: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
7134: LD_INT 22
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 69
7148: PPUSH
7149: LD_INT 1
7151: PPUSH
7152: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
7156: LD_EXP 4
7160: PPUSH
7161: LD_EXP 1
7165: PPUSH
7166: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
7170: LD_EXP 1
7174: PPUSH
7175: LD_EXP 4
7179: PPUSH
7180: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7184: LD_EXP 2
7188: PUSH
7189: LD_EXP 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 87
// wait ( 0 0$1 ) ;
7202: LD_INT 35
7204: PPUSH
7205: CALL_OW 67
// DialogueOn ;
7209: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
7213: LD_EXP 4
7217: PPUSH
7218: LD_STRING D3X-Con-1
7220: PPUSH
7221: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7225: LD_EXP 1
7229: PPUSH
7230: LD_STRING D3J-JMM-1
7232: PPUSH
7233: CALL_OW 88
// wait ( 0 0$1 ) ;
7237: LD_INT 35
7239: PPUSH
7240: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7244: LD_EXP 1
7248: PPUSH
7249: LD_STRING D4-JMM-1
7251: PPUSH
7252: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7256: LD_EXP 4
7260: PPUSH
7261: LD_STRING D4-Con-1
7263: PPUSH
7264: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7268: LD_EXP 1
7272: PPUSH
7273: LD_STRING D4-JMM-2
7275: PPUSH
7276: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7280: LD_EXP 4
7284: PPUSH
7285: LD_STRING D4-Con-2
7287: PPUSH
7288: CALL_OW 88
// DialogueOff ;
7292: CALL_OW 7
// InGameOff ;
7296: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7300: LD_STRING M2X
7302: PPUSH
7303: CALL_OW 337
// SaveForQuickRestart ;
7307: CALL_OW 22
// russianAI = 1 ;
7311: LD_ADDR_EXP 13
7315: PUSH
7316: LD_INT 1
7318: ST_TO_ADDR
// end ; end ;
7319: GO 7322
7321: POP
// end ;
7322: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7323: LD_INT 32
7325: PPUSH
7326: CALL_OW 306
7330: IFFALSE 7663
7332: GO 7334
7334: DISABLE
// begin case JMMGirl of 1 :
7335: LD_EXP 7
7339: PUSH
7340: LD_INT 1
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7470
7348: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7349: LD_EXP 1
7353: PPUSH
7354: LD_STRING D6J-JMM-1
7356: PPUSH
7357: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7361: LD_STRING 13f_Denis
7363: PPUSH
7364: CALL_OW 28
7368: PUSH
7369: LD_INT 1
7371: EQUAL
7372: PUSH
7373: LD_STRING 13s_Denis
7375: PPUSH
7376: CALL_OW 28
7380: PUSH
7381: LD_INT 1
7383: EQUAL
7384: OR
7385: IFFALSE 7425
// begin Say ( Joan , D6J-Joan-1 ) ;
7387: LD_EXP 2
7391: PPUSH
7392: LD_STRING D6J-Joan-1
7394: PPUSH
7395: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7399: LD_EXP 1
7403: PPUSH
7404: LD_STRING D6J-JMM-2
7406: PPUSH
7407: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7411: LD_EXP 2
7415: PPUSH
7416: LD_STRING D6J-Joan-2
7418: PPUSH
7419: CALL_OW 88
// end else
7423: GO 7437
// begin Say ( Joan , D6J-Joan-2a ) ;
7425: LD_EXP 2
7429: PPUSH
7430: LD_STRING D6J-Joan-2a
7432: PPUSH
7433: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7437: LD_EXP 1
7441: PPUSH
7442: LD_STRING D6J-JMM-3
7444: PPUSH
7445: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7449: LD_EXP 2
7453: PPUSH
7454: LD_STRING D6J-Joan-3
7456: PPUSH
7457: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7461: LD_STRING M3
7463: PPUSH
7464: CALL_OW 337
// end ; 2 :
7468: GO 7663
7470: LD_INT 2
7472: DOUBLE
7473: EQUAL
7474: IFTRUE 7478
7476: GO 7536
7478: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7479: LD_EXP 1
7483: PPUSH
7484: LD_STRING D6L-JMM-1
7486: PPUSH
7487: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7491: LD_EXP 3
7495: PPUSH
7496: LD_STRING D6L-Lisa-1
7498: PPUSH
7499: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7503: LD_EXP 1
7507: PPUSH
7508: LD_STRING D6L-JMM-2
7510: PPUSH
7511: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7515: LD_EXP 3
7519: PPUSH
7520: LD_STRING D6L-Lisa-2
7522: PPUSH
7523: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7527: LD_STRING M3
7529: PPUSH
7530: CALL_OW 337
// end ; 3 :
7534: GO 7663
7536: LD_INT 3
7538: DOUBLE
7539: EQUAL
7540: IFTRUE 7544
7542: GO 7662
7544: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7545: LD_EXP 1
7549: PPUSH
7550: LD_STRING D6X-JMM-1
7552: PPUSH
7553: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7557: LD_EXP 4
7561: PPUSH
7562: LD_STRING D6X-Con-1
7564: PPUSH
7565: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7569: LD_EXP 1
7573: PPUSH
7574: LD_STRING D6X-JMM-2
7576: PPUSH
7577: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7581: LD_EXP 4
7585: PPUSH
7586: LD_STRING D6X-Con-2
7588: PPUSH
7589: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7593: LD_EXP 1
7597: PPUSH
7598: LD_STRING D6X-JMM-3
7600: PPUSH
7601: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7605: LD_EXP 4
7609: PPUSH
7610: LD_STRING D6X-Con-3
7612: PPUSH
7613: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7617: LD_EXP 1
7621: PPUSH
7622: LD_STRING D6X-JMM-4
7624: PPUSH
7625: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7629: LD_EXP 4
7633: PPUSH
7634: LD_STRING D6X-Con-4
7636: PPUSH
7637: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7641: LD_EXP 1
7645: PPUSH
7646: LD_STRING D6X-JMM-5
7648: PPUSH
7649: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7653: LD_STRING M3
7655: PPUSH
7656: CALL_OW 337
// end ; end ;
7660: GO 7663
7662: POP
// end ;
7663: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7664: LD_INT 22
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 33
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PPUSH
7688: CALL_OW 69
7692: PPUSH
7693: CALL_OW 306
7697: IFFALSE 7843
7699: GO 7701
7701: DISABLE
// begin case JMMGirl of 1 :
7702: LD_EXP 7
7706: PUSH
7707: LD_INT 1
7709: DOUBLE
7710: EQUAL
7711: IFTRUE 7715
7713: GO 7752
7715: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7716: LD_EXP 1
7720: PPUSH
7721: LD_STRING D5-JMM-1
7723: PPUSH
7724: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7728: LD_INT 77
7730: PPUSH
7731: LD_INT 87
7733: PPUSH
7734: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7738: LD_EXP 2
7742: PPUSH
7743: LD_STRING D5-Joan-1
7745: PPUSH
7746: CALL_OW 88
// end ; 2 :
7750: GO 7843
7752: LD_INT 2
7754: DOUBLE
7755: EQUAL
7756: IFTRUE 7760
7758: GO 7797
7760: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7761: LD_EXP 1
7765: PPUSH
7766: LD_STRING D5-JMM-1
7768: PPUSH
7769: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7773: LD_INT 77
7775: PPUSH
7776: LD_INT 87
7778: PPUSH
7779: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7783: LD_EXP 3
7787: PPUSH
7788: LD_STRING D5-Lisa-1
7790: PPUSH
7791: CALL_OW 88
// end ; 3 :
7795: GO 7843
7797: LD_INT 3
7799: DOUBLE
7800: EQUAL
7801: IFTRUE 7805
7803: GO 7842
7805: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7806: LD_EXP 1
7810: PPUSH
7811: LD_STRING D5-JMM-1
7813: PPUSH
7814: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7818: LD_INT 77
7820: PPUSH
7821: LD_INT 87
7823: PPUSH
7824: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7828: LD_EXP 4
7832: PPUSH
7833: LD_STRING D5-Con-1
7835: PPUSH
7836: CALL_OW 88
// end ; end ;
7840: GO 7843
7842: POP
// end ;
7843: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7844: LD_INT 48
7846: PPUSH
7847: CALL_OW 255
7851: PUSH
7852: LD_INT 1
7854: EQUAL
7855: IFFALSE 7952
7857: GO 7859
7859: DISABLE
// begin DialogueOn ;
7860: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7864: LD_EXP 5
7868: PPUSH
7869: LD_STRING D7-Pow-1
7871: PPUSH
7872: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7876: LD_EXP 1
7880: PPUSH
7881: LD_STRING D7-JMM-1
7883: PPUSH
7884: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7888: LD_EXP 5
7892: PPUSH
7893: LD_STRING D7-Pow-2
7895: PPUSH
7896: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7900: LD_EXP 1
7904: PPUSH
7905: LD_STRING D7-JMM-2
7907: PPUSH
7908: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7912: LD_EXP 5
7916: PPUSH
7917: LD_STRING D7-Pow-3
7919: PPUSH
7920: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7924: LD_EXP 1
7928: PPUSH
7929: LD_STRING D7-JMM-3
7931: PPUSH
7932: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7936: LD_EXP 5
7940: PPUSH
7941: LD_STRING D7-Pow-4
7943: PPUSH
7944: CALL_OW 94
// DialogueOff ;
7948: CALL_OW 7
// end ; end_of_file
7952: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7953: LD_VAR 0 1
7957: PPUSH
7958: CALL_OW 255
7962: PUSH
7963: LD_INT 3
7965: EQUAL
7966: IFFALSE 8040
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7968: LD_ADDR_EXP 10
7972: PUSH
7973: LD_EXP 10
7977: PPUSH
7978: LD_INT 1
7980: PPUSH
7981: CALL_OW 3
7985: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7986: LD_ADDR_EXP 10
7990: PUSH
7991: LD_EXP 10
7995: PPUSH
7996: LD_INT 1
7998: PPUSH
7999: CALL_OW 3
8003: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
8004: LD_ADDR_EXP 10
8008: PUSH
8009: LD_EXP 10
8013: PPUSH
8014: LD_INT 1
8016: PPUSH
8017: CALL_OW 3
8021: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
8022: LD_ADDR_EXP 10
8026: PUSH
8027: LD_EXP 10
8031: PPUSH
8032: LD_INT 1
8034: PPUSH
8035: CALL_OW 3
8039: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 255
8049: PUSH
8050: LD_INT 3
8052: EQUAL
8053: PUSH
8054: LD_VAR 0 1
8058: PPUSH
8059: CALL_OW 266
8063: PUSH
8064: LD_INT 0
8066: EQUAL
8067: PUSH
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL_OW 266
8077: PUSH
8078: LD_INT 2
8080: EQUAL
8081: OR
8082: PUSH
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 266
8092: PUSH
8093: LD_INT 4
8095: EQUAL
8096: OR
8097: PUSH
8098: EMPTY
8099: LIST
8100: AND
8101: IFFALSE 8112
// ComUpgrade ( building ) ;
8103: LD_VAR 0 1
8107: PPUSH
8108: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8112: LD_VAR 0 1
8116: PPUSH
8117: CALL_OW 255
8121: PUSH
8122: LD_INT 3
8124: EQUAL
8125: PUSH
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 266
8135: PUSH
8136: LD_INT 32
8138: EQUAL
8139: AND
8140: IFFALSE 8181
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8142: LD_VAR 0 1
8146: PPUSH
8147: LD_INT 42
8149: PUSH
8150: LD_INT 43
8152: PUSH
8153: LD_INT 44
8155: PUSH
8156: LD_INT 46
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: PUSH
8165: LD_INT 1
8167: PPUSH
8168: LD_INT 4
8170: PPUSH
8171: CALL_OW 12
8175: ARRAY
8176: PPUSH
8177: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
8181: LD_VAR 0 1
8185: PPUSH
8186: CALL_OW 255
8190: PUSH
8191: LD_INT 3
8193: EQUAL
8194: PUSH
8195: LD_VAR 0 1
8199: PPUSH
8200: CALL_OW 266
8204: PUSH
8205: LD_INT 33
8207: EQUAL
8208: AND
8209: IFFALSE 8250
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_INT 42
8218: PUSH
8219: LD_INT 43
8221: PUSH
8222: LD_INT 44
8224: PUSH
8225: LD_INT 46
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 1
8236: PPUSH
8237: LD_INT 4
8239: PPUSH
8240: CALL_OW 12
8244: ARRAY
8245: PPUSH
8246: CALL_OW 208
// end ;
8250: PPOPN 1
8252: END
// on UnitDestroyed ( unit ) do begin if unit in russianTanks then
8253: LD_VAR 0 1
8257: PUSH
8258: LD_EXP 11
8262: IN
8263: IFFALSE 8281
// russianTanks := russianTanks diff unit ;
8265: LD_ADDR_EXP 11
8269: PUSH
8270: LD_EXP 11
8274: PUSH
8275: LD_VAR 0 1
8279: DIFF
8280: ST_TO_ADDR
// if unit in russianTimeLapsers then
8281: LD_VAR 0 1
8285: PUSH
8286: LD_EXP 12
8290: IN
8291: IFFALSE 8309
// russianTimeLapsers := russianTimeLapsers diff unit ;
8293: LD_ADDR_EXP 12
8297: PUSH
8298: LD_EXP 12
8302: PUSH
8303: LD_VAR 0 1
8307: DIFF
8308: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8309: LD_VAR 0 1
8313: PPUSH
8314: CALL_OW 255
8318: PUSH
8319: LD_INT 3
8321: EQUAL
8322: PUSH
8323: LD_VAR 0 1
8327: PPUSH
8328: CALL_OW 247
8332: PUSH
8333: LD_INT 3
8335: EQUAL
8336: AND
8337: IFFALSE 8801
// begin if GetBType ( unit ) in [ 31 , 32 , 36 , 0 , 24 , 17 , 25 , 19 , 20 , 18 , 21 , 23 , 16 , 6 , 29 , 26 , 30 , 28 , 27 , 33 , 2 , 4 ] then
8339: LD_VAR 0 1
8343: PPUSH
8344: CALL_OW 266
8348: PUSH
8349: LD_INT 31
8351: PUSH
8352: LD_INT 32
8354: PUSH
8355: LD_INT 36
8357: PUSH
8358: LD_INT 0
8360: PUSH
8361: LD_INT 24
8363: PUSH
8364: LD_INT 17
8366: PUSH
8367: LD_INT 25
8369: PUSH
8370: LD_INT 19
8372: PUSH
8373: LD_INT 20
8375: PUSH
8376: LD_INT 18
8378: PUSH
8379: LD_INT 21
8381: PUSH
8382: LD_INT 23
8384: PUSH
8385: LD_INT 16
8387: PUSH
8388: LD_INT 6
8390: PUSH
8391: LD_INT 29
8393: PUSH
8394: LD_INT 26
8396: PUSH
8397: LD_INT 30
8399: PUSH
8400: LD_INT 28
8402: PUSH
8403: LD_INT 27
8405: PUSH
8406: LD_INT 33
8408: PUSH
8409: LD_INT 2
8411: PUSH
8412: LD_INT 4
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: IN
8439: IFFALSE 8525
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8441: LD_ADDR_EXP 10
8445: PUSH
8446: LD_EXP 10
8450: PUSH
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL_OW 266
8460: ADD
8461: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8462: LD_ADDR_EXP 10
8466: PUSH
8467: LD_EXP 10
8471: PUSH
8472: LD_VAR 0 1
8476: PPUSH
8477: CALL_OW 250
8481: ADD
8482: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8483: LD_ADDR_EXP 10
8487: PUSH
8488: LD_EXP 10
8492: PUSH
8493: LD_VAR 0 1
8497: PPUSH
8498: CALL_OW 251
8502: ADD
8503: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8504: LD_ADDR_EXP 10
8508: PUSH
8509: LD_EXP 10
8513: PUSH
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 254
8523: ADD
8524: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 266
8534: PUSH
8535: LD_INT 1
8537: EQUAL
8538: IFFALSE 8617
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8540: LD_ADDR_EXP 10
8544: PUSH
8545: LD_EXP 10
8549: PUSH
8550: LD_INT 0
8552: ADD
8553: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8554: LD_ADDR_EXP 10
8558: PUSH
8559: LD_EXP 10
8563: PUSH
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 250
8573: ADD
8574: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8575: LD_ADDR_EXP 10
8579: PUSH
8580: LD_EXP 10
8584: PUSH
8585: LD_VAR 0 1
8589: PPUSH
8590: CALL_OW 251
8594: ADD
8595: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8596: LD_ADDR_EXP 10
8600: PUSH
8601: LD_EXP 10
8605: PUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 254
8615: ADD
8616: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8617: LD_VAR 0 1
8621: PPUSH
8622: CALL_OW 266
8626: PUSH
8627: LD_INT 3
8629: EQUAL
8630: IFFALSE 8709
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8632: LD_ADDR_EXP 10
8636: PUSH
8637: LD_EXP 10
8641: PUSH
8642: LD_INT 2
8644: ADD
8645: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8646: LD_ADDR_EXP 10
8650: PUSH
8651: LD_EXP 10
8655: PUSH
8656: LD_VAR 0 1
8660: PPUSH
8661: CALL_OW 250
8665: ADD
8666: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8667: LD_ADDR_EXP 10
8671: PUSH
8672: LD_EXP 10
8676: PUSH
8677: LD_VAR 0 1
8681: PPUSH
8682: CALL_OW 251
8686: ADD
8687: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8688: LD_ADDR_EXP 10
8692: PUSH
8693: LD_EXP 10
8697: PUSH
8698: LD_VAR 0 1
8702: PPUSH
8703: CALL_OW 254
8707: ADD
8708: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 266
8718: PUSH
8719: LD_INT 5
8721: EQUAL
8722: IFFALSE 8801
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8724: LD_ADDR_EXP 10
8728: PUSH
8729: LD_EXP 10
8733: PUSH
8734: LD_INT 4
8736: ADD
8737: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8738: LD_ADDR_EXP 10
8742: PUSH
8743: LD_EXP 10
8747: PUSH
8748: LD_VAR 0 1
8752: PPUSH
8753: CALL_OW 250
8757: ADD
8758: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8759: LD_ADDR_EXP 10
8763: PUSH
8764: LD_EXP 10
8768: PUSH
8769: LD_VAR 0 1
8773: PPUSH
8774: CALL_OW 251
8778: ADD
8779: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8780: LD_ADDR_EXP 10
8784: PUSH
8785: LD_EXP 10
8789: PUSH
8790: LD_VAR 0 1
8794: PPUSH
8795: CALL_OW 254
8799: ADD
8800: ST_TO_ADDR
// end ; end ; end ;
8801: PPOPN 1
8803: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8804: LD_VAR 0 3
8808: PPUSH
8809: CALL_OW 264
8813: PUSH
8814: LD_INT 10
8816: EQUAL
8817: IFFALSE 8833
// destroyCounter := destroyCounter + 1 ;
8819: LD_ADDR_EXP 17
8823: PUSH
8824: LD_EXP 17
8828: PUSH
8829: LD_INT 1
8831: PLUS
8832: ST_TO_ADDR
// end ;
8833: PPOPN 3
8835: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8836: LD_VAR 0 2
8840: PUSH
8841: LD_INT 1
8843: EQUAL
8844: PUSH
8845: LD_VAR 0 2
8849: PUSH
8850: LD_INT 40
8852: EQUAL
8853: OR
8854: IFFALSE 8978
// if GetSide ( vehicle ) = 3 then
8856: LD_VAR 0 1
8860: PPUSH
8861: CALL_OW 255
8865: PUSH
8866: LD_INT 3
8868: EQUAL
8869: IFFALSE 8978
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8871: LD_VAR 0 1
8875: PPUSH
8876: CALL_OW 264
8880: PUSH
8881: LD_INT 47
8883: EQUAL
8884: PUSH
8885: LD_VAR 0 1
8889: PPUSH
8890: CALL_OW 264
8894: PUSH
8895: LD_INT 46
8897: EQUAL
8898: OR
8899: PUSH
8900: LD_VAR 0 1
8904: PPUSH
8905: CALL_OW 264
8909: PUSH
8910: LD_INT 45
8912: EQUAL
8913: OR
8914: PUSH
8915: LD_VAR 0 1
8919: PPUSH
8920: CALL_OW 264
8924: PUSH
8925: LD_INT 44
8927: EQUAL
8928: OR
8929: IFFALSE 8947
// russianTanks = russianTanks ^ vehicle ;
8931: LD_ADDR_EXP 11
8935: PUSH
8936: LD_EXP 11
8940: PUSH
8941: LD_VAR 0 1
8945: ADD
8946: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8947: LD_VAR 0 1
8951: PPUSH
8952: CALL_OW 264
8956: PUSH
8957: LD_INT 49
8959: EQUAL
8960: IFFALSE 8978
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8962: LD_ADDR_EXP 12
8966: PUSH
8967: LD_EXP 12
8971: PUSH
8972: LD_VAR 0 1
8976: ADD
8977: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8978: LD_VAR 0 1
8982: PPUSH
8983: CALL_OW 255
8987: PUSH
8988: LD_INT 1
8990: EQUAL
8991: PUSH
8992: LD_VAR 0 1
8996: PPUSH
8997: CALL_OW 264
9001: PUSH
9002: LD_INT 10
9004: EQUAL
9005: AND
9006: IFFALSE 9022
// amLaserCounter = amLaserCounter + 1 ;
9008: LD_ADDR_EXP 9
9012: PUSH
9013: LD_EXP 9
9017: PUSH
9018: LD_INT 1
9020: PLUS
9021: ST_TO_ADDR
// end ;
9022: PPOPN 2
9024: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
9025: LD_VAR 0 1
9029: PPUSH
9030: CALL 24756 0 1
// end ; end_of_file
9034: PPOPN 1
9036: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
9037: LD_EXP 1
9041: PPUSH
9042: CALL_OW 310
9046: PPUSH
9047: LD_INT 12
9049: PPUSH
9050: CALL_OW 308
9054: PUSH
9055: LD_EXP 15
9059: PUSH
9060: LD_INT 0
9062: EQUAL
9063: AND
9064: IFFALSE 9410
9066: GO 9068
9068: DISABLE
9069: LD_INT 0
9071: PPUSH
9072: PPUSH
// begin enable ;
9073: ENABLE
// if JMMGirl = 1 then
9074: LD_EXP 7
9078: PUSH
9079: LD_INT 1
9081: EQUAL
9082: IFFALSE 9099
// JMMGirlVeh = IsInUnit ( Joan ) ;
9084: LD_ADDR_VAR 0 1
9088: PUSH
9089: LD_EXP 2
9093: PPUSH
9094: CALL_OW 310
9098: ST_TO_ADDR
// if JMMGirl = 2 then
9099: LD_EXP 7
9103: PUSH
9104: LD_INT 2
9106: EQUAL
9107: IFFALSE 9124
// JMMGirlVeh = IsInUnit ( Lisa ) ;
9109: LD_ADDR_VAR 0 1
9113: PUSH
9114: LD_EXP 3
9118: PPUSH
9119: CALL_OW 310
9123: ST_TO_ADDR
// if JMMGirl = 3 then
9124: LD_EXP 7
9128: PUSH
9129: LD_INT 3
9131: EQUAL
9132: IFFALSE 9149
// JMMGirlVeh = IsInUnit ( Connie ) ;
9134: LD_ADDR_VAR 0 1
9138: PUSH
9139: LD_EXP 4
9143: PPUSH
9144: CALL_OW 310
9148: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9149: LD_EXP 1
9153: PPUSH
9154: CALL_OW 310
9158: PPUSH
9159: LD_EXP 2
9163: PPUSH
9164: CALL_OW 310
9168: PPUSH
9169: CALL_OW 296
9173: PUSH
9174: LD_INT 10
9176: LESS
9177: PUSH
9178: LD_EXP 1
9182: PPUSH
9183: CALL_OW 310
9187: PPUSH
9188: LD_EXP 3
9192: PPUSH
9193: CALL_OW 310
9197: PPUSH
9198: CALL_OW 296
9202: PUSH
9203: LD_INT 10
9205: LESS
9206: OR
9207: PUSH
9208: LD_EXP 1
9212: PPUSH
9213: CALL_OW 310
9217: PPUSH
9218: LD_EXP 4
9222: PPUSH
9223: CALL_OW 310
9227: PPUSH
9228: CALL_OW 296
9232: PUSH
9233: LD_INT 10
9235: LESS
9236: OR
9237: IFFALSE 9331
// begin case Query ( Q3b ) of 1 :
9239: LD_STRING Q3b
9241: PPUSH
9242: CALL_OW 97
9246: PUSH
9247: LD_INT 1
9249: DOUBLE
9250: EQUAL
9251: IFTRUE 9255
9253: GO 9328
9255: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9256: LD_VAR 0 1
9260: PPUSH
9261: CALL_OW 265
9265: PUSH
9266: EMPTY
9267: LIST
9268: PUSH
9269: LD_VAR 0 1
9273: PPUSH
9274: CALL_OW 262
9278: PUSH
9279: EMPTY
9280: LIST
9281: PUSH
9282: LD_VAR 0 1
9286: PPUSH
9287: CALL_OW 263
9291: PUSH
9292: EMPTY
9293: LIST
9294: PUSH
9295: LD_VAR 0 1
9299: PPUSH
9300: CALL_OW 264
9304: PUSH
9305: EMPTY
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: PPUSH
9314: LD_STRING 14_JMMGirlVeh_1
9316: PPUSH
9317: CALL_OW 39
// FinishMission ;
9321: CALL 9551 0 0
// disable ;
9325: DISABLE
// end ; end ;
9326: GO 9329
9328: POP
// end else
9329: GO 9410
// begin if JMMGirl = 1 then
9331: LD_EXP 7
9335: PUSH
9336: LD_INT 1
9338: EQUAL
9339: IFFALSE 9356
// dec := Query ( Q3bJ ) else
9341: LD_ADDR_VAR 0 2
9345: PUSH
9346: LD_STRING Q3bJ
9348: PPUSH
9349: CALL_OW 97
9353: ST_TO_ADDR
9354: GO 9394
// if JMMGirl = 2 then
9356: LD_EXP 7
9360: PUSH
9361: LD_INT 2
9363: EQUAL
9364: IFFALSE 9381
// dec := Query ( Q3bL ) else
9366: LD_ADDR_VAR 0 2
9370: PUSH
9371: LD_STRING Q3bL
9373: PPUSH
9374: CALL_OW 97
9378: ST_TO_ADDR
9379: GO 9394
// dec := Query ( Q3bX ) ;
9381: LD_ADDR_VAR 0 2
9385: PUSH
9386: LD_STRING Q3bX
9388: PPUSH
9389: CALL_OW 97
9393: ST_TO_ADDR
// if dec = 1 then
9394: LD_VAR 0 2
9398: PUSH
9399: LD_INT 1
9401: EQUAL
9402: IFFALSE 9410
// begin FinishMission ;
9404: CALL 9551 0 0
// exit ;
9408: GO 9410
// end ; end ; end ;
9410: PPOPN 2
9412: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9413: LD_INT 22
9415: PUSH
9416: LD_INT 3
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 21
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PPUSH
9437: CALL_OW 69
9441: PUSH
9442: LD_INT 0
9444: EQUAL
9445: PUSH
9446: LD_EXP 15
9450: PUSH
9451: LD_INT 0
9453: EQUAL
9454: AND
9455: IFFALSE 9550
9457: GO 9459
9459: DISABLE
// begin DialogueOn ;
9460: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9464: LD_EXP 1
9468: PPUSH
9469: LD_STRING DEnd-JMM-1
9471: PPUSH
9472: CALL_OW 88
// if JMMGirl = 1 then
9476: LD_EXP 7
9480: PUSH
9481: LD_INT 1
9483: EQUAL
9484: IFFALSE 9498
// Say ( Joan , DEnd-Joan-1 ) ;
9486: LD_EXP 2
9490: PPUSH
9491: LD_STRING DEnd-Joan-1
9493: PPUSH
9494: CALL_OW 88
// if JMMGirl = 2 then
9498: LD_EXP 7
9502: PUSH
9503: LD_INT 2
9505: EQUAL
9506: IFFALSE 9520
// Say ( Lisa , DEnd-Lisa-1 ) ;
9508: LD_EXP 3
9512: PPUSH
9513: LD_STRING DEnd-Lisa-1
9515: PPUSH
9516: CALL_OW 88
// if JMMGirl = 3 then
9520: LD_EXP 7
9524: PUSH
9525: LD_INT 3
9527: EQUAL
9528: IFFALSE 9542
// Say ( Connie , DEnd-Con-1 ) ;
9530: LD_EXP 4
9534: PPUSH
9535: LD_STRING DEnd-Con-1
9537: PPUSH
9538: CALL_OW 88
// DialogueOff ;
9542: CALL_OW 7
// FinishMission ;
9546: CALL 9551 0 0
// end ;
9550: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9551: LD_INT 0
9553: PPUSH
9554: PPUSH
9555: PPUSH
9556: PPUSH
9557: PPUSH
// m1 := false ;
9558: LD_ADDR_VAR 0 3
9562: PUSH
9563: LD_INT 0
9565: ST_TO_ADDR
// m2 := false ;
9566: LD_ADDR_VAR 0 4
9570: PUSH
9571: LD_INT 0
9573: ST_TO_ADDR
// m3 := false ;
9574: LD_ADDR_VAR 0 5
9578: PUSH
9579: LD_INT 0
9581: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9582: LD_EXP 1
9586: PPUSH
9587: LD_STRING 14_JMM
9589: PPUSH
9590: CALL_OW 38
// if tick <= 50 50$00 then
9594: LD_OWVAR 1
9598: PUSH
9599: LD_INT 105000
9601: LESSEQUAL
9602: IFFALSE 9611
// SetAchievement ( ACH_ASPEED_14 ) ;
9604: LD_STRING ACH_ASPEED_14
9606: PPUSH
9607: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9611: LD_EXP 1
9615: PPUSH
9616: CALL_OW 310
9620: PUSH
9621: LD_EXP 1
9625: PPUSH
9626: CALL_OW 310
9630: PPUSH
9631: CALL_OW 247
9635: PUSH
9636: LD_INT 2
9638: EQUAL
9639: AND
9640: IFFALSE 9722
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9642: LD_ADDR_VAR 0 2
9646: PUSH
9647: LD_EXP 1
9651: PPUSH
9652: CALL_OW 310
9656: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9657: LD_VAR 0 2
9661: PPUSH
9662: CALL_OW 265
9666: PUSH
9667: EMPTY
9668: LIST
9669: PUSH
9670: LD_VAR 0 2
9674: PPUSH
9675: CALL_OW 262
9679: PUSH
9680: EMPTY
9681: LIST
9682: PUSH
9683: LD_VAR 0 2
9687: PPUSH
9688: CALL_OW 263
9692: PUSH
9693: EMPTY
9694: LIST
9695: PUSH
9696: LD_VAR 0 2
9700: PPUSH
9701: CALL_OW 264
9705: PUSH
9706: EMPTY
9707: LIST
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: PPUSH
9715: LD_STRING 14_JMMVeh_1
9717: PPUSH
9718: CALL_OW 39
// end ; if fastEnd = 1 then
9722: LD_EXP 15
9726: PUSH
9727: LD_INT 1
9729: EQUAL
9730: IFFALSE 9819
// begin AddMedal ( fastend , - 1 ) ;
9732: LD_STRING fastend
9734: PPUSH
9735: LD_INT 1
9737: NEG
9738: PPUSH
9739: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9743: LD_STRING fastend
9745: PPUSH
9746: LD_INT 1
9748: NEG
9749: PPUSH
9750: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9754: LD_STRING fastend
9756: PPUSH
9757: LD_INT 1
9759: NEG
9760: PPUSH
9761: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9765: LD_EXP 7
9769: PPUSH
9770: LD_STRING 14_JMMGirl_1
9772: PPUSH
9773: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9777: LD_INT 0
9779: PPUSH
9780: LD_STRING 14_JMMGirlStatus_1
9782: PPUSH
9783: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9787: LD_INT 0
9789: PPUSH
9790: LD_STRING 14_KappaStatus_1
9792: PPUSH
9793: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9797: LD_STRING Eliminate
9799: PPUSH
9800: CALL_OW 102
// RewardPeople ( JMM ) ;
9804: LD_EXP 1
9808: PPUSH
9809: CALL_OW 43
// YouWin ;
9813: CALL_OW 103
// exit ;
9817: GO 10644
// end ; if fastEnd = 0 then
9819: LD_EXP 15
9823: PUSH
9824: LD_INT 0
9826: EQUAL
9827: IFFALSE 10537
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9829: LD_EXP 7
9833: PPUSH
9834: LD_STRING 14_JMMGirl_1
9836: PPUSH
9837: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9841: LD_INT 22
9843: PUSH
9844: LD_INT 3
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 1
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PPUSH
9865: CALL_OW 69
9869: PUSH
9870: LD_INT 0
9872: EQUAL
9873: PUSH
9874: LD_INT 48
9876: PPUSH
9877: CALL_OW 255
9881: PUSH
9882: LD_INT 1
9884: EQUAL
9885: AND
9886: IFFALSE 9900
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9888: LD_INT 1
9890: PPUSH
9891: LD_STRING 14_KappaStatus_1
9893: PPUSH
9894: CALL_OW 39
9898: GO 9910
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9900: LD_INT 0
9902: PPUSH
9903: LD_STRING 14_KappaStatus_1
9905: PPUSH
9906: CALL_OW 39
// case JMMGirl of 1 :
9910: LD_EXP 7
9914: PUSH
9915: LD_INT 1
9917: DOUBLE
9918: EQUAL
9919: IFTRUE 9923
9921: GO 10079
9923: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9924: LD_EXP 2
9928: PPUSH
9929: CALL_OW 302
9933: PUSH
9934: LD_EXP 2
9938: PPUSH
9939: CALL_OW 255
9943: PUSH
9944: LD_INT 1
9946: EQUAL
9947: AND
9948: PUSH
9949: LD_INT 22
9951: PUSH
9952: LD_INT 3
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 21
9961: PUSH
9962: LD_INT 1
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 69
9977: PUSH
9978: LD_INT 0
9980: EQUAL
9981: PUSH
9982: LD_EXP 1
9986: PPUSH
9987: CALL_OW 310
9991: PPUSH
9992: LD_EXP 2
9996: PPUSH
9997: CALL_OW 310
10001: PPUSH
10002: CALL_OW 296
10006: PUSH
10007: LD_INT 10
10009: LESS
10010: OR
10011: AND
10012: IFFALSE 10056
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10014: LD_INT 1
10016: PPUSH
10017: LD_STRING 14_JMMGirlStatus_1
10019: PPUSH
10020: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10024: LD_EXP 2
10028: PPUSH
10029: LD_STRING 14_Joan
10031: PPUSH
10032: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10036: LD_STRING protect
10038: PPUSH
10039: LD_INT 1
10041: PPUSH
10042: CALL_OW 101
// m1 := true ;
10046: LD_ADDR_VAR 0 3
10050: PUSH
10051: LD_INT 1
10053: ST_TO_ADDR
// end else
10054: GO 10077
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10056: LD_INT 0
10058: PPUSH
10059: LD_STRING 14_JMMGirlStatus_1
10061: PPUSH
10062: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10066: LD_STRING protect
10068: PPUSH
10069: LD_INT 1
10071: NEG
10072: PPUSH
10073: CALL_OW 101
// end ; end ; 2 :
10077: GO 10408
10079: LD_INT 2
10081: DOUBLE
10082: EQUAL
10083: IFTRUE 10087
10085: GO 10243
10087: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10088: LD_EXP 3
10092: PPUSH
10093: CALL_OW 302
10097: PUSH
10098: LD_EXP 3
10102: PPUSH
10103: CALL_OW 255
10107: PUSH
10108: LD_INT 1
10110: EQUAL
10111: AND
10112: PUSH
10113: LD_INT 22
10115: PUSH
10116: LD_INT 3
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 21
10125: PUSH
10126: LD_INT 1
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PPUSH
10137: CALL_OW 69
10141: PUSH
10142: LD_INT 0
10144: EQUAL
10145: PUSH
10146: LD_EXP 1
10150: PPUSH
10151: CALL_OW 310
10155: PPUSH
10156: LD_EXP 3
10160: PPUSH
10161: CALL_OW 310
10165: PPUSH
10166: CALL_OW 296
10170: PUSH
10171: LD_INT 10
10173: LESS
10174: OR
10175: AND
10176: IFFALSE 10220
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10178: LD_INT 1
10180: PPUSH
10181: LD_STRING 14_JMMGirlStatus_1
10183: PPUSH
10184: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10188: LD_EXP 3
10192: PPUSH
10193: LD_STRING 14_Lisa
10195: PPUSH
10196: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10200: LD_STRING protect
10202: PPUSH
10203: LD_INT 1
10205: PPUSH
10206: CALL_OW 101
// m1 := true ;
10210: LD_ADDR_VAR 0 3
10214: PUSH
10215: LD_INT 1
10217: ST_TO_ADDR
// end else
10218: GO 10241
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10220: LD_INT 0
10222: PPUSH
10223: LD_STRING 14_JMMGirlStatus_1
10225: PPUSH
10226: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10230: LD_STRING protect
10232: PPUSH
10233: LD_INT 2
10235: NEG
10236: PPUSH
10237: CALL_OW 101
// end ; end ; 3 :
10241: GO 10408
10243: LD_INT 3
10245: DOUBLE
10246: EQUAL
10247: IFTRUE 10251
10249: GO 10407
10251: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10252: LD_EXP 4
10256: PPUSH
10257: CALL_OW 302
10261: PUSH
10262: LD_EXP 4
10266: PPUSH
10267: CALL_OW 255
10271: PUSH
10272: LD_INT 1
10274: EQUAL
10275: AND
10276: PUSH
10277: LD_INT 22
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 21
10289: PUSH
10290: LD_INT 1
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PPUSH
10301: CALL_OW 69
10305: PUSH
10306: LD_INT 0
10308: EQUAL
10309: PUSH
10310: LD_EXP 1
10314: PPUSH
10315: CALL_OW 310
10319: PPUSH
10320: LD_EXP 4
10324: PPUSH
10325: CALL_OW 310
10329: PPUSH
10330: CALL_OW 296
10334: PUSH
10335: LD_INT 10
10337: LESS
10338: OR
10339: AND
10340: IFFALSE 10384
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10342: LD_INT 1
10344: PPUSH
10345: LD_STRING 14_JMMGirlStatus_1
10347: PPUSH
10348: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10352: LD_EXP 4
10356: PPUSH
10357: LD_STRING 14_Connie
10359: PPUSH
10360: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10364: LD_STRING protect
10366: PPUSH
10367: LD_INT 1
10369: PPUSH
10370: CALL_OW 101
// m1 := true ;
10374: LD_ADDR_VAR 0 3
10378: PUSH
10379: LD_INT 1
10381: ST_TO_ADDR
// end else
10382: GO 10405
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10384: LD_INT 0
10386: PPUSH
10387: LD_STRING 14_JMMGirlStatus_1
10389: PPUSH
10390: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10394: LD_STRING protect
10396: PPUSH
10397: LD_INT 3
10399: NEG
10400: PPUSH
10401: CALL_OW 101
// end ; end ; end ;
10405: GO 10408
10407: POP
// if amLaserCounter >= 2 then
10408: LD_EXP 9
10412: PUSH
10413: LD_INT 2
10415: GREATEREQUAL
10416: IFFALSE 10438
// begin AddMedal ( double , 1 ) ;
10418: LD_STRING double
10420: PPUSH
10421: LD_INT 1
10423: PPUSH
10424: CALL_OW 101
// m2 := true ;
10428: LD_ADDR_VAR 0 4
10432: PUSH
10433: LD_INT 1
10435: ST_TO_ADDR
// end else
10436: GO 10472
// begin if amLaserCounter = 1 then
10438: LD_EXP 9
10442: PUSH
10443: LD_INT 1
10445: EQUAL
10446: IFFALSE 10461
// AddMedal ( double , - 2 ) else
10448: LD_STRING double
10450: PPUSH
10451: LD_INT 2
10453: NEG
10454: PPUSH
10455: CALL_OW 101
10459: GO 10472
// AddMedal ( double , - 1 ) ;
10461: LD_STRING double
10463: PPUSH
10464: LD_INT 1
10466: NEG
10467: PPUSH
10468: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10472: LD_INT 22
10474: PUSH
10475: LD_INT 3
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 21
10484: PUSH
10485: LD_INT 1
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 69
10500: PUSH
10501: LD_INT 0
10503: EQUAL
10504: IFFALSE 10526
// begin AddMedal ( base , 1 ) ;
10506: LD_STRING base
10508: PPUSH
10509: LD_INT 1
10511: PPUSH
10512: CALL_OW 101
// m3 := true ;
10516: LD_ADDR_VAR 0 5
10520: PUSH
10521: LD_INT 1
10523: ST_TO_ADDR
// end else
10524: GO 10537
// AddMedal ( base , - 1 ) ;
10526: LD_STRING base
10528: PPUSH
10529: LD_INT 1
10531: NEG
10532: PPUSH
10533: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10537: LD_VAR 0 3
10541: PUSH
10542: LD_VAR 0 4
10546: AND
10547: PUSH
10548: LD_VAR 0 5
10552: AND
10553: PUSH
10554: LD_OWVAR 67
10558: PUSH
10559: LD_INT 3
10561: GREATEREQUAL
10562: AND
10563: IFFALSE 10575
// SetAchievementEX ( ACH_AMER , 14 ) ;
10565: LD_STRING ACH_AMER
10567: PPUSH
10568: LD_INT 14
10570: PPUSH
10571: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10575: LD_STRING Eliminate
10577: PPUSH
10578: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10582: LD_INT 22
10584: PUSH
10585: LD_INT 1
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 3
10594: PUSH
10595: LD_INT 25
10597: PUSH
10598: LD_INT 12
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 3
10611: PUSH
10612: LD_INT 25
10614: PUSH
10615: LD_INT 16
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 69
10635: PPUSH
10636: CALL_OW 43
// YouWin ;
10640: CALL_OW 103
// end ; end_of_file
10644: LD_VAR 0 1
10648: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10649: LD_EXP 1
10653: PPUSH
10654: CALL_OW 301
10658: IFFALSE 10670
10660: GO 10662
10662: DISABLE
// YouLost ( JMM ) ; end_of_file
10663: LD_STRING JMM
10665: PPUSH
10666: CALL_OW 104
10670: END
// every 1 1$0 do
10671: GO 10673
10673: DISABLE
// begin enable ;
10674: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10675: LD_INT 3
10677: PPUSH
10678: LD_INT 5
10680: PPUSH
10681: CALL_OW 12
10685: PPUSH
10686: LD_INT 13
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 55
// end ; end_of_file
10696: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10697: LD_INT 0
10699: PPUSH
// ar_miner := 81 ;
10700: LD_ADDR_EXP 26
10704: PUSH
10705: LD_INT 81
10707: ST_TO_ADDR
// ar_crane := 88 ;
10708: LD_ADDR_EXP 25
10712: PUSH
10713: LD_INT 88
10715: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10716: LD_ADDR_EXP 20
10720: PUSH
10721: LD_INT 89
10723: ST_TO_ADDR
// us_hack := 99 ;
10724: LD_ADDR_EXP 21
10728: PUSH
10729: LD_INT 99
10731: ST_TO_ADDR
// us_artillery := 97 ;
10732: LD_ADDR_EXP 22
10736: PUSH
10737: LD_INT 97
10739: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10740: LD_ADDR_EXP 23
10744: PUSH
10745: LD_INT 91
10747: ST_TO_ADDR
// ar_mortar := 92 ;
10748: LD_ADDR_EXP 24
10752: PUSH
10753: LD_INT 92
10755: ST_TO_ADDR
// ru_radar := 98 ;
10756: LD_ADDR_EXP 19
10760: PUSH
10761: LD_INT 98
10763: ST_TO_ADDR
// tech_Artillery := 80 ;
10764: LD_ADDR_EXP 27
10768: PUSH
10769: LD_INT 80
10771: ST_TO_ADDR
// tech_RadMat := 81 ;
10772: LD_ADDR_EXP 28
10776: PUSH
10777: LD_INT 81
10779: ST_TO_ADDR
// tech_BasicTools := 82 ;
10780: LD_ADDR_EXP 29
10784: PUSH
10785: LD_INT 82
10787: ST_TO_ADDR
// tech_Cargo := 83 ;
10788: LD_ADDR_EXP 30
10792: PUSH
10793: LD_INT 83
10795: ST_TO_ADDR
// tech_Track := 84 ;
10796: LD_ADDR_EXP 31
10800: PUSH
10801: LD_INT 84
10803: ST_TO_ADDR
// tech_Crane := 85 ;
10804: LD_ADDR_EXP 32
10808: PUSH
10809: LD_INT 85
10811: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10812: LD_ADDR_EXP 33
10816: PUSH
10817: LD_INT 86
10819: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10820: LD_ADDR_EXP 34
10824: PUSH
10825: LD_INT 87
10827: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10828: LD_ADDR_EXP 35
10832: PUSH
10833: LD_INT 88
10835: ST_TO_ADDR
// class_mastodont := 31 ;
10836: LD_ADDR_EXP 36
10840: PUSH
10841: LD_INT 31
10843: ST_TO_ADDR
// class_horse := 21 ;
10844: LD_ADDR_EXP 37
10848: PUSH
10849: LD_INT 21
10851: ST_TO_ADDR
// end ;
10852: LD_VAR 0 1
10856: RET
// every 1 do
10857: GO 10859
10859: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10860: CALL 10697 0 0
10864: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10865: LD_INT 0
10867: PPUSH
// if p2 = 100 then
10868: LD_VAR 0 2
10872: PUSH
10873: LD_INT 100
10875: EQUAL
10876: IFFALSE 11879
// begin if not StreamModeActive then
10878: LD_EXP 38
10882: NOT
10883: IFFALSE 10893
// StreamModeActive := true ;
10885: LD_ADDR_EXP 38
10889: PUSH
10890: LD_INT 1
10892: ST_TO_ADDR
// if p3 = 0 then
10893: LD_VAR 0 3
10897: PUSH
10898: LD_INT 0
10900: EQUAL
10901: IFFALSE 10907
// InitStreamMode ;
10903: CALL 12039 0 0
// if p3 = 1 then
10907: LD_VAR 0 3
10911: PUSH
10912: LD_INT 1
10914: EQUAL
10915: IFFALSE 10925
// sRocket := true ;
10917: LD_ADDR_EXP 43
10921: PUSH
10922: LD_INT 1
10924: ST_TO_ADDR
// if p3 = 2 then
10925: LD_VAR 0 3
10929: PUSH
10930: LD_INT 2
10932: EQUAL
10933: IFFALSE 10943
// sSpeed := true ;
10935: LD_ADDR_EXP 42
10939: PUSH
10940: LD_INT 1
10942: ST_TO_ADDR
// if p3 = 3 then
10943: LD_VAR 0 3
10947: PUSH
10948: LD_INT 3
10950: EQUAL
10951: IFFALSE 10961
// sEngine := true ;
10953: LD_ADDR_EXP 44
10957: PUSH
10958: LD_INT 1
10960: ST_TO_ADDR
// if p3 = 4 then
10961: LD_VAR 0 3
10965: PUSH
10966: LD_INT 4
10968: EQUAL
10969: IFFALSE 10979
// sSpec := true ;
10971: LD_ADDR_EXP 41
10975: PUSH
10976: LD_INT 1
10978: ST_TO_ADDR
// if p3 = 5 then
10979: LD_VAR 0 3
10983: PUSH
10984: LD_INT 5
10986: EQUAL
10987: IFFALSE 10997
// sLevel := true ;
10989: LD_ADDR_EXP 45
10993: PUSH
10994: LD_INT 1
10996: ST_TO_ADDR
// if p3 = 6 then
10997: LD_VAR 0 3
11001: PUSH
11002: LD_INT 6
11004: EQUAL
11005: IFFALSE 11015
// sArmoury := true ;
11007: LD_ADDR_EXP 46
11011: PUSH
11012: LD_INT 1
11014: ST_TO_ADDR
// if p3 = 7 then
11015: LD_VAR 0 3
11019: PUSH
11020: LD_INT 7
11022: EQUAL
11023: IFFALSE 11033
// sRadar := true ;
11025: LD_ADDR_EXP 47
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// if p3 = 8 then
11033: LD_VAR 0 3
11037: PUSH
11038: LD_INT 8
11040: EQUAL
11041: IFFALSE 11051
// sBunker := true ;
11043: LD_ADDR_EXP 48
11047: PUSH
11048: LD_INT 1
11050: ST_TO_ADDR
// if p3 = 9 then
11051: LD_VAR 0 3
11055: PUSH
11056: LD_INT 9
11058: EQUAL
11059: IFFALSE 11069
// sHack := true ;
11061: LD_ADDR_EXP 49
11065: PUSH
11066: LD_INT 1
11068: ST_TO_ADDR
// if p3 = 10 then
11069: LD_VAR 0 3
11073: PUSH
11074: LD_INT 10
11076: EQUAL
11077: IFFALSE 11087
// sFire := true ;
11079: LD_ADDR_EXP 50
11083: PUSH
11084: LD_INT 1
11086: ST_TO_ADDR
// if p3 = 11 then
11087: LD_VAR 0 3
11091: PUSH
11092: LD_INT 11
11094: EQUAL
11095: IFFALSE 11105
// sRefresh := true ;
11097: LD_ADDR_EXP 51
11101: PUSH
11102: LD_INT 1
11104: ST_TO_ADDR
// if p3 = 12 then
11105: LD_VAR 0 3
11109: PUSH
11110: LD_INT 12
11112: EQUAL
11113: IFFALSE 11123
// sExp := true ;
11115: LD_ADDR_EXP 52
11119: PUSH
11120: LD_INT 1
11122: ST_TO_ADDR
// if p3 = 13 then
11123: LD_VAR 0 3
11127: PUSH
11128: LD_INT 13
11130: EQUAL
11131: IFFALSE 11141
// sDepot := true ;
11133: LD_ADDR_EXP 53
11137: PUSH
11138: LD_INT 1
11140: ST_TO_ADDR
// if p3 = 14 then
11141: LD_VAR 0 3
11145: PUSH
11146: LD_INT 14
11148: EQUAL
11149: IFFALSE 11159
// sFlag := true ;
11151: LD_ADDR_EXP 54
11155: PUSH
11156: LD_INT 1
11158: ST_TO_ADDR
// if p3 = 15 then
11159: LD_VAR 0 3
11163: PUSH
11164: LD_INT 15
11166: EQUAL
11167: IFFALSE 11177
// sKamikadze := true ;
11169: LD_ADDR_EXP 62
11173: PUSH
11174: LD_INT 1
11176: ST_TO_ADDR
// if p3 = 16 then
11177: LD_VAR 0 3
11181: PUSH
11182: LD_INT 16
11184: EQUAL
11185: IFFALSE 11195
// sTroll := true ;
11187: LD_ADDR_EXP 63
11191: PUSH
11192: LD_INT 1
11194: ST_TO_ADDR
// if p3 = 17 then
11195: LD_VAR 0 3
11199: PUSH
11200: LD_INT 17
11202: EQUAL
11203: IFFALSE 11213
// sSlow := true ;
11205: LD_ADDR_EXP 64
11209: PUSH
11210: LD_INT 1
11212: ST_TO_ADDR
// if p3 = 18 then
11213: LD_VAR 0 3
11217: PUSH
11218: LD_INT 18
11220: EQUAL
11221: IFFALSE 11231
// sLack := true ;
11223: LD_ADDR_EXP 65
11227: PUSH
11228: LD_INT 1
11230: ST_TO_ADDR
// if p3 = 19 then
11231: LD_VAR 0 3
11235: PUSH
11236: LD_INT 19
11238: EQUAL
11239: IFFALSE 11249
// sTank := true ;
11241: LD_ADDR_EXP 67
11245: PUSH
11246: LD_INT 1
11248: ST_TO_ADDR
// if p3 = 20 then
11249: LD_VAR 0 3
11253: PUSH
11254: LD_INT 20
11256: EQUAL
11257: IFFALSE 11267
// sRemote := true ;
11259: LD_ADDR_EXP 68
11263: PUSH
11264: LD_INT 1
11266: ST_TO_ADDR
// if p3 = 21 then
11267: LD_VAR 0 3
11271: PUSH
11272: LD_INT 21
11274: EQUAL
11275: IFFALSE 11285
// sPowell := true ;
11277: LD_ADDR_EXP 69
11281: PUSH
11282: LD_INT 1
11284: ST_TO_ADDR
// if p3 = 22 then
11285: LD_VAR 0 3
11289: PUSH
11290: LD_INT 22
11292: EQUAL
11293: IFFALSE 11303
// sTeleport := true ;
11295: LD_ADDR_EXP 72
11299: PUSH
11300: LD_INT 1
11302: ST_TO_ADDR
// if p3 = 23 then
11303: LD_VAR 0 3
11307: PUSH
11308: LD_INT 23
11310: EQUAL
11311: IFFALSE 11321
// sOilTower := true ;
11313: LD_ADDR_EXP 74
11317: PUSH
11318: LD_INT 1
11320: ST_TO_ADDR
// if p3 = 24 then
11321: LD_VAR 0 3
11325: PUSH
11326: LD_INT 24
11328: EQUAL
11329: IFFALSE 11339
// sShovel := true ;
11331: LD_ADDR_EXP 75
11335: PUSH
11336: LD_INT 1
11338: ST_TO_ADDR
// if p3 = 25 then
11339: LD_VAR 0 3
11343: PUSH
11344: LD_INT 25
11346: EQUAL
11347: IFFALSE 11357
// sSheik := true ;
11349: LD_ADDR_EXP 76
11353: PUSH
11354: LD_INT 1
11356: ST_TO_ADDR
// if p3 = 26 then
11357: LD_VAR 0 3
11361: PUSH
11362: LD_INT 26
11364: EQUAL
11365: IFFALSE 11375
// sEarthquake := true ;
11367: LD_ADDR_EXP 78
11371: PUSH
11372: LD_INT 1
11374: ST_TO_ADDR
// if p3 = 27 then
11375: LD_VAR 0 3
11379: PUSH
11380: LD_INT 27
11382: EQUAL
11383: IFFALSE 11393
// sAI := true ;
11385: LD_ADDR_EXP 79
11389: PUSH
11390: LD_INT 1
11392: ST_TO_ADDR
// if p3 = 28 then
11393: LD_VAR 0 3
11397: PUSH
11398: LD_INT 28
11400: EQUAL
11401: IFFALSE 11411
// sCargo := true ;
11403: LD_ADDR_EXP 82
11407: PUSH
11408: LD_INT 1
11410: ST_TO_ADDR
// if p3 = 29 then
11411: LD_VAR 0 3
11415: PUSH
11416: LD_INT 29
11418: EQUAL
11419: IFFALSE 11429
// sDLaser := true ;
11421: LD_ADDR_EXP 83
11425: PUSH
11426: LD_INT 1
11428: ST_TO_ADDR
// if p3 = 30 then
11429: LD_VAR 0 3
11433: PUSH
11434: LD_INT 30
11436: EQUAL
11437: IFFALSE 11447
// sExchange := true ;
11439: LD_ADDR_EXP 84
11443: PUSH
11444: LD_INT 1
11446: ST_TO_ADDR
// if p3 = 31 then
11447: LD_VAR 0 3
11451: PUSH
11452: LD_INT 31
11454: EQUAL
11455: IFFALSE 11465
// sFac := true ;
11457: LD_ADDR_EXP 85
11461: PUSH
11462: LD_INT 1
11464: ST_TO_ADDR
// if p3 = 32 then
11465: LD_VAR 0 3
11469: PUSH
11470: LD_INT 32
11472: EQUAL
11473: IFFALSE 11483
// sPower := true ;
11475: LD_ADDR_EXP 86
11479: PUSH
11480: LD_INT 1
11482: ST_TO_ADDR
// if p3 = 33 then
11483: LD_VAR 0 3
11487: PUSH
11488: LD_INT 33
11490: EQUAL
11491: IFFALSE 11501
// sRandom := true ;
11493: LD_ADDR_EXP 87
11497: PUSH
11498: LD_INT 1
11500: ST_TO_ADDR
// if p3 = 34 then
11501: LD_VAR 0 3
11505: PUSH
11506: LD_INT 34
11508: EQUAL
11509: IFFALSE 11519
// sShield := true ;
11511: LD_ADDR_EXP 88
11515: PUSH
11516: LD_INT 1
11518: ST_TO_ADDR
// if p3 = 35 then
11519: LD_VAR 0 3
11523: PUSH
11524: LD_INT 35
11526: EQUAL
11527: IFFALSE 11537
// sTime := true ;
11529: LD_ADDR_EXP 89
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// if p3 = 36 then
11537: LD_VAR 0 3
11541: PUSH
11542: LD_INT 36
11544: EQUAL
11545: IFFALSE 11555
// sTools := true ;
11547: LD_ADDR_EXP 90
11551: PUSH
11552: LD_INT 1
11554: ST_TO_ADDR
// if p3 = 101 then
11555: LD_VAR 0 3
11559: PUSH
11560: LD_INT 101
11562: EQUAL
11563: IFFALSE 11573
// sSold := true ;
11565: LD_ADDR_EXP 55
11569: PUSH
11570: LD_INT 1
11572: ST_TO_ADDR
// if p3 = 102 then
11573: LD_VAR 0 3
11577: PUSH
11578: LD_INT 102
11580: EQUAL
11581: IFFALSE 11591
// sDiff := true ;
11583: LD_ADDR_EXP 56
11587: PUSH
11588: LD_INT 1
11590: ST_TO_ADDR
// if p3 = 103 then
11591: LD_VAR 0 3
11595: PUSH
11596: LD_INT 103
11598: EQUAL
11599: IFFALSE 11609
// sFog := true ;
11601: LD_ADDR_EXP 59
11605: PUSH
11606: LD_INT 1
11608: ST_TO_ADDR
// if p3 = 104 then
11609: LD_VAR 0 3
11613: PUSH
11614: LD_INT 104
11616: EQUAL
11617: IFFALSE 11627
// sReset := true ;
11619: LD_ADDR_EXP 60
11623: PUSH
11624: LD_INT 1
11626: ST_TO_ADDR
// if p3 = 105 then
11627: LD_VAR 0 3
11631: PUSH
11632: LD_INT 105
11634: EQUAL
11635: IFFALSE 11645
// sSun := true ;
11637: LD_ADDR_EXP 61
11641: PUSH
11642: LD_INT 1
11644: ST_TO_ADDR
// if p3 = 106 then
11645: LD_VAR 0 3
11649: PUSH
11650: LD_INT 106
11652: EQUAL
11653: IFFALSE 11663
// sTiger := true ;
11655: LD_ADDR_EXP 57
11659: PUSH
11660: LD_INT 1
11662: ST_TO_ADDR
// if p3 = 107 then
11663: LD_VAR 0 3
11667: PUSH
11668: LD_INT 107
11670: EQUAL
11671: IFFALSE 11681
// sBomb := true ;
11673: LD_ADDR_EXP 58
11677: PUSH
11678: LD_INT 1
11680: ST_TO_ADDR
// if p3 = 108 then
11681: LD_VAR 0 3
11685: PUSH
11686: LD_INT 108
11688: EQUAL
11689: IFFALSE 11699
// sWound := true ;
11691: LD_ADDR_EXP 66
11695: PUSH
11696: LD_INT 1
11698: ST_TO_ADDR
// if p3 = 109 then
11699: LD_VAR 0 3
11703: PUSH
11704: LD_INT 109
11706: EQUAL
11707: IFFALSE 11717
// sBetray := true ;
11709: LD_ADDR_EXP 70
11713: PUSH
11714: LD_INT 1
11716: ST_TO_ADDR
// if p3 = 110 then
11717: LD_VAR 0 3
11721: PUSH
11722: LD_INT 110
11724: EQUAL
11725: IFFALSE 11735
// sContamin := true ;
11727: LD_ADDR_EXP 71
11731: PUSH
11732: LD_INT 1
11734: ST_TO_ADDR
// if p3 = 111 then
11735: LD_VAR 0 3
11739: PUSH
11740: LD_INT 111
11742: EQUAL
11743: IFFALSE 11753
// sOil := true ;
11745: LD_ADDR_EXP 73
11749: PUSH
11750: LD_INT 1
11752: ST_TO_ADDR
// if p3 = 112 then
11753: LD_VAR 0 3
11757: PUSH
11758: LD_INT 112
11760: EQUAL
11761: IFFALSE 11771
// sStu := true ;
11763: LD_ADDR_EXP 77
11767: PUSH
11768: LD_INT 1
11770: ST_TO_ADDR
// if p3 = 113 then
11771: LD_VAR 0 3
11775: PUSH
11776: LD_INT 113
11778: EQUAL
11779: IFFALSE 11789
// sBazooka := true ;
11781: LD_ADDR_EXP 80
11785: PUSH
11786: LD_INT 1
11788: ST_TO_ADDR
// if p3 = 114 then
11789: LD_VAR 0 3
11793: PUSH
11794: LD_INT 114
11796: EQUAL
11797: IFFALSE 11807
// sMortar := true ;
11799: LD_ADDR_EXP 81
11803: PUSH
11804: LD_INT 1
11806: ST_TO_ADDR
// if p3 = 115 then
11807: LD_VAR 0 3
11811: PUSH
11812: LD_INT 115
11814: EQUAL
11815: IFFALSE 11825
// sRanger := true ;
11817: LD_ADDR_EXP 91
11821: PUSH
11822: LD_INT 1
11824: ST_TO_ADDR
// if p3 = 116 then
11825: LD_VAR 0 3
11829: PUSH
11830: LD_INT 116
11832: EQUAL
11833: IFFALSE 11843
// sComputer := true ;
11835: LD_ADDR_EXP 92
11839: PUSH
11840: LD_INT 1
11842: ST_TO_ADDR
// if p3 = 117 then
11843: LD_VAR 0 3
11847: PUSH
11848: LD_INT 117
11850: EQUAL
11851: IFFALSE 11861
// s30 := true ;
11853: LD_ADDR_EXP 93
11857: PUSH
11858: LD_INT 1
11860: ST_TO_ADDR
// if p3 = 118 then
11861: LD_VAR 0 3
11865: PUSH
11866: LD_INT 118
11868: EQUAL
11869: IFFALSE 11879
// s60 := true ;
11871: LD_ADDR_EXP 94
11875: PUSH
11876: LD_INT 1
11878: ST_TO_ADDR
// end ; if p2 = 101 then
11879: LD_VAR 0 2
11883: PUSH
11884: LD_INT 101
11886: EQUAL
11887: IFFALSE 12015
// begin case p3 of 1 :
11889: LD_VAR 0 3
11893: PUSH
11894: LD_INT 1
11896: DOUBLE
11897: EQUAL
11898: IFTRUE 11902
11900: GO 11909
11902: POP
// hHackUnlimitedResources ; 2 :
11903: CALL 23611 0 0
11907: GO 12015
11909: LD_INT 2
11911: DOUBLE
11912: EQUAL
11913: IFTRUE 11917
11915: GO 11924
11917: POP
// hHackSetLevel10 ; 3 :
11918: CALL 23744 0 0
11922: GO 12015
11924: LD_INT 3
11926: DOUBLE
11927: EQUAL
11928: IFTRUE 11932
11930: GO 11939
11932: POP
// hHackSetLevel10YourUnits ; 4 :
11933: CALL 23829 0 0
11937: GO 12015
11939: LD_INT 4
11941: DOUBLE
11942: EQUAL
11943: IFTRUE 11947
11945: GO 11954
11947: POP
// hHackInvincible ; 5 :
11948: CALL 24277 0 0
11952: GO 12015
11954: LD_INT 5
11956: DOUBLE
11957: EQUAL
11958: IFTRUE 11962
11960: GO 11969
11962: POP
// hHackInvisible ; 6 :
11963: CALL 24388 0 0
11967: GO 12015
11969: LD_INT 6
11971: DOUBLE
11972: EQUAL
11973: IFTRUE 11977
11975: GO 11984
11977: POP
// hHackChangeYourSide ; 7 :
11978: CALL 24445 0 0
11982: GO 12015
11984: LD_INT 7
11986: DOUBLE
11987: EQUAL
11988: IFTRUE 11992
11990: GO 11999
11992: POP
// hHackChangeUnitSide ; 8 :
11993: CALL 24487 0 0
11997: GO 12015
11999: LD_INT 8
12001: DOUBLE
12002: EQUAL
12003: IFTRUE 12007
12005: GO 12014
12007: POP
// hHackFog ; end ;
12008: CALL 24588 0 0
12012: GO 12015
12014: POP
// end ; end ;
12015: LD_VAR 0 7
12019: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12020: GO 12022
12022: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12023: LD_STRING initStreamRollete();
12025: PPUSH
12026: CALL_OW 559
// InitStreamMode ;
12030: CALL 12039 0 0
// DefineStreamItems ( ) ;
12034: CALL 12503 0 0
// end ;
12038: END
// function InitStreamMode ; begin
12039: LD_INT 0
12041: PPUSH
// streamModeActive := false ;
12042: LD_ADDR_EXP 38
12046: PUSH
12047: LD_INT 0
12049: ST_TO_ADDR
// normalCounter := 36 ;
12050: LD_ADDR_EXP 39
12054: PUSH
12055: LD_INT 36
12057: ST_TO_ADDR
// hardcoreCounter := 16 ;
12058: LD_ADDR_EXP 40
12062: PUSH
12063: LD_INT 16
12065: ST_TO_ADDR
// sRocket := false ;
12066: LD_ADDR_EXP 43
12070: PUSH
12071: LD_INT 0
12073: ST_TO_ADDR
// sSpeed := false ;
12074: LD_ADDR_EXP 42
12078: PUSH
12079: LD_INT 0
12081: ST_TO_ADDR
// sEngine := false ;
12082: LD_ADDR_EXP 44
12086: PUSH
12087: LD_INT 0
12089: ST_TO_ADDR
// sSpec := false ;
12090: LD_ADDR_EXP 41
12094: PUSH
12095: LD_INT 0
12097: ST_TO_ADDR
// sLevel := false ;
12098: LD_ADDR_EXP 45
12102: PUSH
12103: LD_INT 0
12105: ST_TO_ADDR
// sArmoury := false ;
12106: LD_ADDR_EXP 46
12110: PUSH
12111: LD_INT 0
12113: ST_TO_ADDR
// sRadar := false ;
12114: LD_ADDR_EXP 47
12118: PUSH
12119: LD_INT 0
12121: ST_TO_ADDR
// sBunker := false ;
12122: LD_ADDR_EXP 48
12126: PUSH
12127: LD_INT 0
12129: ST_TO_ADDR
// sHack := false ;
12130: LD_ADDR_EXP 49
12134: PUSH
12135: LD_INT 0
12137: ST_TO_ADDR
// sFire := false ;
12138: LD_ADDR_EXP 50
12142: PUSH
12143: LD_INT 0
12145: ST_TO_ADDR
// sRefresh := false ;
12146: LD_ADDR_EXP 51
12150: PUSH
12151: LD_INT 0
12153: ST_TO_ADDR
// sExp := false ;
12154: LD_ADDR_EXP 52
12158: PUSH
12159: LD_INT 0
12161: ST_TO_ADDR
// sDepot := false ;
12162: LD_ADDR_EXP 53
12166: PUSH
12167: LD_INT 0
12169: ST_TO_ADDR
// sFlag := false ;
12170: LD_ADDR_EXP 54
12174: PUSH
12175: LD_INT 0
12177: ST_TO_ADDR
// sKamikadze := false ;
12178: LD_ADDR_EXP 62
12182: PUSH
12183: LD_INT 0
12185: ST_TO_ADDR
// sTroll := false ;
12186: LD_ADDR_EXP 63
12190: PUSH
12191: LD_INT 0
12193: ST_TO_ADDR
// sSlow := false ;
12194: LD_ADDR_EXP 64
12198: PUSH
12199: LD_INT 0
12201: ST_TO_ADDR
// sLack := false ;
12202: LD_ADDR_EXP 65
12206: PUSH
12207: LD_INT 0
12209: ST_TO_ADDR
// sTank := false ;
12210: LD_ADDR_EXP 67
12214: PUSH
12215: LD_INT 0
12217: ST_TO_ADDR
// sRemote := false ;
12218: LD_ADDR_EXP 68
12222: PUSH
12223: LD_INT 0
12225: ST_TO_ADDR
// sPowell := false ;
12226: LD_ADDR_EXP 69
12230: PUSH
12231: LD_INT 0
12233: ST_TO_ADDR
// sTeleport := false ;
12234: LD_ADDR_EXP 72
12238: PUSH
12239: LD_INT 0
12241: ST_TO_ADDR
// sOilTower := false ;
12242: LD_ADDR_EXP 74
12246: PUSH
12247: LD_INT 0
12249: ST_TO_ADDR
// sShovel := false ;
12250: LD_ADDR_EXP 75
12254: PUSH
12255: LD_INT 0
12257: ST_TO_ADDR
// sSheik := false ;
12258: LD_ADDR_EXP 76
12262: PUSH
12263: LD_INT 0
12265: ST_TO_ADDR
// sEarthquake := false ;
12266: LD_ADDR_EXP 78
12270: PUSH
12271: LD_INT 0
12273: ST_TO_ADDR
// sAI := false ;
12274: LD_ADDR_EXP 79
12278: PUSH
12279: LD_INT 0
12281: ST_TO_ADDR
// sCargo := false ;
12282: LD_ADDR_EXP 82
12286: PUSH
12287: LD_INT 0
12289: ST_TO_ADDR
// sDLaser := false ;
12290: LD_ADDR_EXP 83
12294: PUSH
12295: LD_INT 0
12297: ST_TO_ADDR
// sExchange := false ;
12298: LD_ADDR_EXP 84
12302: PUSH
12303: LD_INT 0
12305: ST_TO_ADDR
// sFac := false ;
12306: LD_ADDR_EXP 85
12310: PUSH
12311: LD_INT 0
12313: ST_TO_ADDR
// sPower := false ;
12314: LD_ADDR_EXP 86
12318: PUSH
12319: LD_INT 0
12321: ST_TO_ADDR
// sRandom := false ;
12322: LD_ADDR_EXP 87
12326: PUSH
12327: LD_INT 0
12329: ST_TO_ADDR
// sShield := false ;
12330: LD_ADDR_EXP 88
12334: PUSH
12335: LD_INT 0
12337: ST_TO_ADDR
// sTime := false ;
12338: LD_ADDR_EXP 89
12342: PUSH
12343: LD_INT 0
12345: ST_TO_ADDR
// sTools := false ;
12346: LD_ADDR_EXP 90
12350: PUSH
12351: LD_INT 0
12353: ST_TO_ADDR
// sSold := false ;
12354: LD_ADDR_EXP 55
12358: PUSH
12359: LD_INT 0
12361: ST_TO_ADDR
// sDiff := false ;
12362: LD_ADDR_EXP 56
12366: PUSH
12367: LD_INT 0
12369: ST_TO_ADDR
// sFog := false ;
12370: LD_ADDR_EXP 59
12374: PUSH
12375: LD_INT 0
12377: ST_TO_ADDR
// sReset := false ;
12378: LD_ADDR_EXP 60
12382: PUSH
12383: LD_INT 0
12385: ST_TO_ADDR
// sSun := false ;
12386: LD_ADDR_EXP 61
12390: PUSH
12391: LD_INT 0
12393: ST_TO_ADDR
// sTiger := false ;
12394: LD_ADDR_EXP 57
12398: PUSH
12399: LD_INT 0
12401: ST_TO_ADDR
// sBomb := false ;
12402: LD_ADDR_EXP 58
12406: PUSH
12407: LD_INT 0
12409: ST_TO_ADDR
// sWound := false ;
12410: LD_ADDR_EXP 66
12414: PUSH
12415: LD_INT 0
12417: ST_TO_ADDR
// sBetray := false ;
12418: LD_ADDR_EXP 70
12422: PUSH
12423: LD_INT 0
12425: ST_TO_ADDR
// sContamin := false ;
12426: LD_ADDR_EXP 71
12430: PUSH
12431: LD_INT 0
12433: ST_TO_ADDR
// sOil := false ;
12434: LD_ADDR_EXP 73
12438: PUSH
12439: LD_INT 0
12441: ST_TO_ADDR
// sStu := false ;
12442: LD_ADDR_EXP 77
12446: PUSH
12447: LD_INT 0
12449: ST_TO_ADDR
// sBazooka := false ;
12450: LD_ADDR_EXP 80
12454: PUSH
12455: LD_INT 0
12457: ST_TO_ADDR
// sMortar := false ;
12458: LD_ADDR_EXP 81
12462: PUSH
12463: LD_INT 0
12465: ST_TO_ADDR
// sRanger := false ;
12466: LD_ADDR_EXP 91
12470: PUSH
12471: LD_INT 0
12473: ST_TO_ADDR
// sComputer := false ;
12474: LD_ADDR_EXP 92
12478: PUSH
12479: LD_INT 0
12481: ST_TO_ADDR
// s30 := false ;
12482: LD_ADDR_EXP 93
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
// s60 := false ;
12490: LD_ADDR_EXP 94
12494: PUSH
12495: LD_INT 0
12497: ST_TO_ADDR
// end ;
12498: LD_VAR 0 1
12502: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12503: LD_INT 0
12505: PPUSH
12506: PPUSH
12507: PPUSH
12508: PPUSH
12509: PPUSH
// result := [ ] ;
12510: LD_ADDR_VAR 0 1
12514: PUSH
12515: EMPTY
12516: ST_TO_ADDR
// if campaign_id = 1 then
12517: LD_OWVAR 69
12521: PUSH
12522: LD_INT 1
12524: EQUAL
12525: IFFALSE 15691
// begin case mission_number of 1 :
12527: LD_OWVAR 70
12531: PUSH
12532: LD_INT 1
12534: DOUBLE
12535: EQUAL
12536: IFTRUE 12540
12538: GO 12616
12540: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12541: LD_ADDR_VAR 0 1
12545: PUSH
12546: LD_INT 2
12548: PUSH
12549: LD_INT 4
12551: PUSH
12552: LD_INT 11
12554: PUSH
12555: LD_INT 12
12557: PUSH
12558: LD_INT 15
12560: PUSH
12561: LD_INT 16
12563: PUSH
12564: LD_INT 22
12566: PUSH
12567: LD_INT 23
12569: PUSH
12570: LD_INT 26
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 101
12586: PUSH
12587: LD_INT 102
12589: PUSH
12590: LD_INT 106
12592: PUSH
12593: LD_INT 116
12595: PUSH
12596: LD_INT 117
12598: PUSH
12599: LD_INT 118
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: ST_TO_ADDR
12614: GO 15689
12616: LD_INT 2
12618: DOUBLE
12619: EQUAL
12620: IFTRUE 12624
12622: GO 12708
12624: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12625: LD_ADDR_VAR 0 1
12629: PUSH
12630: LD_INT 2
12632: PUSH
12633: LD_INT 4
12635: PUSH
12636: LD_INT 11
12638: PUSH
12639: LD_INT 12
12641: PUSH
12642: LD_INT 15
12644: PUSH
12645: LD_INT 16
12647: PUSH
12648: LD_INT 22
12650: PUSH
12651: LD_INT 23
12653: PUSH
12654: LD_INT 26
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 101
12670: PUSH
12671: LD_INT 102
12673: PUSH
12674: LD_INT 105
12676: PUSH
12677: LD_INT 106
12679: PUSH
12680: LD_INT 108
12682: PUSH
12683: LD_INT 116
12685: PUSH
12686: LD_INT 117
12688: PUSH
12689: LD_INT 118
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: ST_TO_ADDR
12706: GO 15689
12708: LD_INT 3
12710: DOUBLE
12711: EQUAL
12712: IFTRUE 12716
12714: GO 12804
12716: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12717: LD_ADDR_VAR 0 1
12721: PUSH
12722: LD_INT 2
12724: PUSH
12725: LD_INT 4
12727: PUSH
12728: LD_INT 5
12730: PUSH
12731: LD_INT 11
12733: PUSH
12734: LD_INT 12
12736: PUSH
12737: LD_INT 15
12739: PUSH
12740: LD_INT 16
12742: PUSH
12743: LD_INT 22
12745: PUSH
12746: LD_INT 26
12748: PUSH
12749: LD_INT 36
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 101
12766: PUSH
12767: LD_INT 102
12769: PUSH
12770: LD_INT 105
12772: PUSH
12773: LD_INT 106
12775: PUSH
12776: LD_INT 108
12778: PUSH
12779: LD_INT 116
12781: PUSH
12782: LD_INT 117
12784: PUSH
12785: LD_INT 118
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: ST_TO_ADDR
12802: GO 15689
12804: LD_INT 4
12806: DOUBLE
12807: EQUAL
12808: IFTRUE 12812
12810: GO 12908
12812: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12813: LD_ADDR_VAR 0 1
12817: PUSH
12818: LD_INT 2
12820: PUSH
12821: LD_INT 4
12823: PUSH
12824: LD_INT 5
12826: PUSH
12827: LD_INT 8
12829: PUSH
12830: LD_INT 11
12832: PUSH
12833: LD_INT 12
12835: PUSH
12836: LD_INT 15
12838: PUSH
12839: LD_INT 16
12841: PUSH
12842: LD_INT 22
12844: PUSH
12845: LD_INT 23
12847: PUSH
12848: LD_INT 26
12850: PUSH
12851: LD_INT 36
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: PUSH
12868: LD_INT 101
12870: PUSH
12871: LD_INT 102
12873: PUSH
12874: LD_INT 105
12876: PUSH
12877: LD_INT 106
12879: PUSH
12880: LD_INT 108
12882: PUSH
12883: LD_INT 116
12885: PUSH
12886: LD_INT 117
12888: PUSH
12889: LD_INT 118
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: ST_TO_ADDR
12906: GO 15689
12908: LD_INT 5
12910: DOUBLE
12911: EQUAL
12912: IFTRUE 12916
12914: GO 13028
12916: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12917: LD_ADDR_VAR 0 1
12921: PUSH
12922: LD_INT 2
12924: PUSH
12925: LD_INT 4
12927: PUSH
12928: LD_INT 5
12930: PUSH
12931: LD_INT 6
12933: PUSH
12934: LD_INT 8
12936: PUSH
12937: LD_INT 11
12939: PUSH
12940: LD_INT 12
12942: PUSH
12943: LD_INT 15
12945: PUSH
12946: LD_INT 16
12948: PUSH
12949: LD_INT 22
12951: PUSH
12952: LD_INT 23
12954: PUSH
12955: LD_INT 25
12957: PUSH
12958: LD_INT 26
12960: PUSH
12961: LD_INT 36
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 101
12982: PUSH
12983: LD_INT 102
12985: PUSH
12986: LD_INT 105
12988: PUSH
12989: LD_INT 106
12991: PUSH
12992: LD_INT 108
12994: PUSH
12995: LD_INT 109
12997: PUSH
12998: LD_INT 112
13000: PUSH
13001: LD_INT 116
13003: PUSH
13004: LD_INT 117
13006: PUSH
13007: LD_INT 118
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: ST_TO_ADDR
13026: GO 15689
13028: LD_INT 6
13030: DOUBLE
13031: EQUAL
13032: IFTRUE 13036
13034: GO 13168
13036: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13037: LD_ADDR_VAR 0 1
13041: PUSH
13042: LD_INT 2
13044: PUSH
13045: LD_INT 4
13047: PUSH
13048: LD_INT 5
13050: PUSH
13051: LD_INT 6
13053: PUSH
13054: LD_INT 8
13056: PUSH
13057: LD_INT 11
13059: PUSH
13060: LD_INT 12
13062: PUSH
13063: LD_INT 15
13065: PUSH
13066: LD_INT 16
13068: PUSH
13069: LD_INT 20
13071: PUSH
13072: LD_INT 21
13074: PUSH
13075: LD_INT 22
13077: PUSH
13078: LD_INT 23
13080: PUSH
13081: LD_INT 25
13083: PUSH
13084: LD_INT 26
13086: PUSH
13087: LD_INT 30
13089: PUSH
13090: LD_INT 31
13092: PUSH
13093: LD_INT 32
13095: PUSH
13096: LD_INT 36
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 101
13122: PUSH
13123: LD_INT 102
13125: PUSH
13126: LD_INT 105
13128: PUSH
13129: LD_INT 106
13131: PUSH
13132: LD_INT 108
13134: PUSH
13135: LD_INT 109
13137: PUSH
13138: LD_INT 112
13140: PUSH
13141: LD_INT 116
13143: PUSH
13144: LD_INT 117
13146: PUSH
13147: LD_INT 118
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: ST_TO_ADDR
13166: GO 15689
13168: LD_INT 7
13170: DOUBLE
13171: EQUAL
13172: IFTRUE 13176
13174: GO 13288
13176: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13177: LD_ADDR_VAR 0 1
13181: PUSH
13182: LD_INT 2
13184: PUSH
13185: LD_INT 4
13187: PUSH
13188: LD_INT 5
13190: PUSH
13191: LD_INT 7
13193: PUSH
13194: LD_INT 11
13196: PUSH
13197: LD_INT 12
13199: PUSH
13200: LD_INT 15
13202: PUSH
13203: LD_INT 16
13205: PUSH
13206: LD_INT 20
13208: PUSH
13209: LD_INT 21
13211: PUSH
13212: LD_INT 22
13214: PUSH
13215: LD_INT 23
13217: PUSH
13218: LD_INT 25
13220: PUSH
13221: LD_INT 26
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 101
13242: PUSH
13243: LD_INT 102
13245: PUSH
13246: LD_INT 103
13248: PUSH
13249: LD_INT 105
13251: PUSH
13252: LD_INT 106
13254: PUSH
13255: LD_INT 108
13257: PUSH
13258: LD_INT 112
13260: PUSH
13261: LD_INT 116
13263: PUSH
13264: LD_INT 117
13266: PUSH
13267: LD_INT 118
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: ST_TO_ADDR
13286: GO 15689
13288: LD_INT 8
13290: DOUBLE
13291: EQUAL
13292: IFTRUE 13296
13294: GO 13436
13296: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13297: LD_ADDR_VAR 0 1
13301: PUSH
13302: LD_INT 2
13304: PUSH
13305: LD_INT 4
13307: PUSH
13308: LD_INT 5
13310: PUSH
13311: LD_INT 6
13313: PUSH
13314: LD_INT 7
13316: PUSH
13317: LD_INT 8
13319: PUSH
13320: LD_INT 11
13322: PUSH
13323: LD_INT 12
13325: PUSH
13326: LD_INT 15
13328: PUSH
13329: LD_INT 16
13331: PUSH
13332: LD_INT 20
13334: PUSH
13335: LD_INT 21
13337: PUSH
13338: LD_INT 22
13340: PUSH
13341: LD_INT 23
13343: PUSH
13344: LD_INT 25
13346: PUSH
13347: LD_INT 26
13349: PUSH
13350: LD_INT 30
13352: PUSH
13353: LD_INT 31
13355: PUSH
13356: LD_INT 32
13358: PUSH
13359: LD_INT 36
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 101
13386: PUSH
13387: LD_INT 102
13389: PUSH
13390: LD_INT 103
13392: PUSH
13393: LD_INT 105
13395: PUSH
13396: LD_INT 106
13398: PUSH
13399: LD_INT 108
13401: PUSH
13402: LD_INT 109
13404: PUSH
13405: LD_INT 112
13407: PUSH
13408: LD_INT 116
13410: PUSH
13411: LD_INT 117
13413: PUSH
13414: LD_INT 118
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: ST_TO_ADDR
13434: GO 15689
13436: LD_INT 9
13438: DOUBLE
13439: EQUAL
13440: IFTRUE 13444
13442: GO 13592
13444: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13445: LD_ADDR_VAR 0 1
13449: PUSH
13450: LD_INT 2
13452: PUSH
13453: LD_INT 4
13455: PUSH
13456: LD_INT 5
13458: PUSH
13459: LD_INT 6
13461: PUSH
13462: LD_INT 7
13464: PUSH
13465: LD_INT 8
13467: PUSH
13468: LD_INT 11
13470: PUSH
13471: LD_INT 12
13473: PUSH
13474: LD_INT 15
13476: PUSH
13477: LD_INT 16
13479: PUSH
13480: LD_INT 20
13482: PUSH
13483: LD_INT 21
13485: PUSH
13486: LD_INT 22
13488: PUSH
13489: LD_INT 23
13491: PUSH
13492: LD_INT 25
13494: PUSH
13495: LD_INT 26
13497: PUSH
13498: LD_INT 28
13500: PUSH
13501: LD_INT 30
13503: PUSH
13504: LD_INT 31
13506: PUSH
13507: LD_INT 32
13509: PUSH
13510: LD_INT 36
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 101
13538: PUSH
13539: LD_INT 102
13541: PUSH
13542: LD_INT 103
13544: PUSH
13545: LD_INT 105
13547: PUSH
13548: LD_INT 106
13550: PUSH
13551: LD_INT 108
13553: PUSH
13554: LD_INT 109
13556: PUSH
13557: LD_INT 112
13559: PUSH
13560: LD_INT 114
13562: PUSH
13563: LD_INT 116
13565: PUSH
13566: LD_INT 117
13568: PUSH
13569: LD_INT 118
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: ST_TO_ADDR
13590: GO 15689
13592: LD_INT 10
13594: DOUBLE
13595: EQUAL
13596: IFTRUE 13600
13598: GO 13796
13600: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13601: LD_ADDR_VAR 0 1
13605: PUSH
13606: LD_INT 2
13608: PUSH
13609: LD_INT 4
13611: PUSH
13612: LD_INT 5
13614: PUSH
13615: LD_INT 6
13617: PUSH
13618: LD_INT 7
13620: PUSH
13621: LD_INT 8
13623: PUSH
13624: LD_INT 9
13626: PUSH
13627: LD_INT 10
13629: PUSH
13630: LD_INT 11
13632: PUSH
13633: LD_INT 12
13635: PUSH
13636: LD_INT 13
13638: PUSH
13639: LD_INT 14
13641: PUSH
13642: LD_INT 15
13644: PUSH
13645: LD_INT 16
13647: PUSH
13648: LD_INT 17
13650: PUSH
13651: LD_INT 18
13653: PUSH
13654: LD_INT 19
13656: PUSH
13657: LD_INT 20
13659: PUSH
13660: LD_INT 21
13662: PUSH
13663: LD_INT 22
13665: PUSH
13666: LD_INT 23
13668: PUSH
13669: LD_INT 24
13671: PUSH
13672: LD_INT 25
13674: PUSH
13675: LD_INT 26
13677: PUSH
13678: LD_INT 28
13680: PUSH
13681: LD_INT 30
13683: PUSH
13684: LD_INT 31
13686: PUSH
13687: LD_INT 32
13689: PUSH
13690: LD_INT 36
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 101
13726: PUSH
13727: LD_INT 102
13729: PUSH
13730: LD_INT 103
13732: PUSH
13733: LD_INT 104
13735: PUSH
13736: LD_INT 105
13738: PUSH
13739: LD_INT 106
13741: PUSH
13742: LD_INT 107
13744: PUSH
13745: LD_INT 108
13747: PUSH
13748: LD_INT 109
13750: PUSH
13751: LD_INT 110
13753: PUSH
13754: LD_INT 111
13756: PUSH
13757: LD_INT 112
13759: PUSH
13760: LD_INT 114
13762: PUSH
13763: LD_INT 116
13765: PUSH
13766: LD_INT 117
13768: PUSH
13769: LD_INT 118
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: ST_TO_ADDR
13794: GO 15689
13796: LD_INT 11
13798: DOUBLE
13799: EQUAL
13800: IFTRUE 13804
13802: GO 14008
13804: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13805: LD_ADDR_VAR 0 1
13809: PUSH
13810: LD_INT 2
13812: PUSH
13813: LD_INT 3
13815: PUSH
13816: LD_INT 4
13818: PUSH
13819: LD_INT 5
13821: PUSH
13822: LD_INT 6
13824: PUSH
13825: LD_INT 7
13827: PUSH
13828: LD_INT 8
13830: PUSH
13831: LD_INT 9
13833: PUSH
13834: LD_INT 10
13836: PUSH
13837: LD_INT 11
13839: PUSH
13840: LD_INT 12
13842: PUSH
13843: LD_INT 13
13845: PUSH
13846: LD_INT 14
13848: PUSH
13849: LD_INT 15
13851: PUSH
13852: LD_INT 16
13854: PUSH
13855: LD_INT 17
13857: PUSH
13858: LD_INT 18
13860: PUSH
13861: LD_INT 19
13863: PUSH
13864: LD_INT 20
13866: PUSH
13867: LD_INT 21
13869: PUSH
13870: LD_INT 22
13872: PUSH
13873: LD_INT 23
13875: PUSH
13876: LD_INT 24
13878: PUSH
13879: LD_INT 25
13881: PUSH
13882: LD_INT 26
13884: PUSH
13885: LD_INT 28
13887: PUSH
13888: LD_INT 30
13890: PUSH
13891: LD_INT 31
13893: PUSH
13894: LD_INT 32
13896: PUSH
13897: LD_INT 34
13899: PUSH
13900: LD_INT 36
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 101
13938: PUSH
13939: LD_INT 102
13941: PUSH
13942: LD_INT 103
13944: PUSH
13945: LD_INT 104
13947: PUSH
13948: LD_INT 105
13950: PUSH
13951: LD_INT 106
13953: PUSH
13954: LD_INT 107
13956: PUSH
13957: LD_INT 108
13959: PUSH
13960: LD_INT 109
13962: PUSH
13963: LD_INT 110
13965: PUSH
13966: LD_INT 111
13968: PUSH
13969: LD_INT 112
13971: PUSH
13972: LD_INT 114
13974: PUSH
13975: LD_INT 116
13977: PUSH
13978: LD_INT 117
13980: PUSH
13981: LD_INT 118
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: ST_TO_ADDR
14006: GO 15689
14008: LD_INT 12
14010: DOUBLE
14011: EQUAL
14012: IFTRUE 14016
14014: GO 14236
14016: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14017: LD_ADDR_VAR 0 1
14021: PUSH
14022: LD_INT 1
14024: PUSH
14025: LD_INT 2
14027: PUSH
14028: LD_INT 3
14030: PUSH
14031: LD_INT 4
14033: PUSH
14034: LD_INT 5
14036: PUSH
14037: LD_INT 6
14039: PUSH
14040: LD_INT 7
14042: PUSH
14043: LD_INT 8
14045: PUSH
14046: LD_INT 9
14048: PUSH
14049: LD_INT 10
14051: PUSH
14052: LD_INT 11
14054: PUSH
14055: LD_INT 12
14057: PUSH
14058: LD_INT 13
14060: PUSH
14061: LD_INT 14
14063: PUSH
14064: LD_INT 15
14066: PUSH
14067: LD_INT 16
14069: PUSH
14070: LD_INT 17
14072: PUSH
14073: LD_INT 18
14075: PUSH
14076: LD_INT 19
14078: PUSH
14079: LD_INT 20
14081: PUSH
14082: LD_INT 21
14084: PUSH
14085: LD_INT 22
14087: PUSH
14088: LD_INT 23
14090: PUSH
14091: LD_INT 24
14093: PUSH
14094: LD_INT 25
14096: PUSH
14097: LD_INT 26
14099: PUSH
14100: LD_INT 27
14102: PUSH
14103: LD_INT 28
14105: PUSH
14106: LD_INT 30
14108: PUSH
14109: LD_INT 31
14111: PUSH
14112: LD_INT 32
14114: PUSH
14115: LD_INT 33
14117: PUSH
14118: LD_INT 34
14120: PUSH
14121: LD_INT 36
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 101
14162: PUSH
14163: LD_INT 102
14165: PUSH
14166: LD_INT 103
14168: PUSH
14169: LD_INT 104
14171: PUSH
14172: LD_INT 105
14174: PUSH
14175: LD_INT 106
14177: PUSH
14178: LD_INT 107
14180: PUSH
14181: LD_INT 108
14183: PUSH
14184: LD_INT 109
14186: PUSH
14187: LD_INT 110
14189: PUSH
14190: LD_INT 111
14192: PUSH
14193: LD_INT 112
14195: PUSH
14196: LD_INT 113
14198: PUSH
14199: LD_INT 114
14201: PUSH
14202: LD_INT 116
14204: PUSH
14205: LD_INT 117
14207: PUSH
14208: LD_INT 118
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: ST_TO_ADDR
14234: GO 15689
14236: LD_INT 13
14238: DOUBLE
14239: EQUAL
14240: IFTRUE 14244
14242: GO 14452
14244: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14245: LD_ADDR_VAR 0 1
14249: PUSH
14250: LD_INT 1
14252: PUSH
14253: LD_INT 2
14255: PUSH
14256: LD_INT 3
14258: PUSH
14259: LD_INT 4
14261: PUSH
14262: LD_INT 5
14264: PUSH
14265: LD_INT 8
14267: PUSH
14268: LD_INT 9
14270: PUSH
14271: LD_INT 10
14273: PUSH
14274: LD_INT 11
14276: PUSH
14277: LD_INT 12
14279: PUSH
14280: LD_INT 14
14282: PUSH
14283: LD_INT 15
14285: PUSH
14286: LD_INT 16
14288: PUSH
14289: LD_INT 17
14291: PUSH
14292: LD_INT 18
14294: PUSH
14295: LD_INT 19
14297: PUSH
14298: LD_INT 20
14300: PUSH
14301: LD_INT 21
14303: PUSH
14304: LD_INT 22
14306: PUSH
14307: LD_INT 23
14309: PUSH
14310: LD_INT 24
14312: PUSH
14313: LD_INT 25
14315: PUSH
14316: LD_INT 26
14318: PUSH
14319: LD_INT 27
14321: PUSH
14322: LD_INT 28
14324: PUSH
14325: LD_INT 30
14327: PUSH
14328: LD_INT 31
14330: PUSH
14331: LD_INT 32
14333: PUSH
14334: LD_INT 33
14336: PUSH
14337: LD_INT 34
14339: PUSH
14340: LD_INT 36
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: PUSH
14376: LD_INT 101
14378: PUSH
14379: LD_INT 102
14381: PUSH
14382: LD_INT 103
14384: PUSH
14385: LD_INT 104
14387: PUSH
14388: LD_INT 105
14390: PUSH
14391: LD_INT 106
14393: PUSH
14394: LD_INT 107
14396: PUSH
14397: LD_INT 108
14399: PUSH
14400: LD_INT 109
14402: PUSH
14403: LD_INT 110
14405: PUSH
14406: LD_INT 111
14408: PUSH
14409: LD_INT 112
14411: PUSH
14412: LD_INT 113
14414: PUSH
14415: LD_INT 114
14417: PUSH
14418: LD_INT 116
14420: PUSH
14421: LD_INT 117
14423: PUSH
14424: LD_INT 118
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: ST_TO_ADDR
14450: GO 15689
14452: LD_INT 14
14454: DOUBLE
14455: EQUAL
14456: IFTRUE 14460
14458: GO 14684
14460: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14461: LD_ADDR_VAR 0 1
14465: PUSH
14466: LD_INT 1
14468: PUSH
14469: LD_INT 2
14471: PUSH
14472: LD_INT 3
14474: PUSH
14475: LD_INT 4
14477: PUSH
14478: LD_INT 5
14480: PUSH
14481: LD_INT 6
14483: PUSH
14484: LD_INT 7
14486: PUSH
14487: LD_INT 8
14489: PUSH
14490: LD_INT 9
14492: PUSH
14493: LD_INT 10
14495: PUSH
14496: LD_INT 11
14498: PUSH
14499: LD_INT 12
14501: PUSH
14502: LD_INT 13
14504: PUSH
14505: LD_INT 14
14507: PUSH
14508: LD_INT 15
14510: PUSH
14511: LD_INT 16
14513: PUSH
14514: LD_INT 17
14516: PUSH
14517: LD_INT 18
14519: PUSH
14520: LD_INT 19
14522: PUSH
14523: LD_INT 20
14525: PUSH
14526: LD_INT 21
14528: PUSH
14529: LD_INT 22
14531: PUSH
14532: LD_INT 23
14534: PUSH
14535: LD_INT 24
14537: PUSH
14538: LD_INT 25
14540: PUSH
14541: LD_INT 26
14543: PUSH
14544: LD_INT 27
14546: PUSH
14547: LD_INT 28
14549: PUSH
14550: LD_INT 29
14552: PUSH
14553: LD_INT 30
14555: PUSH
14556: LD_INT 31
14558: PUSH
14559: LD_INT 32
14561: PUSH
14562: LD_INT 33
14564: PUSH
14565: LD_INT 34
14567: PUSH
14568: LD_INT 36
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 101
14610: PUSH
14611: LD_INT 102
14613: PUSH
14614: LD_INT 103
14616: PUSH
14617: LD_INT 104
14619: PUSH
14620: LD_INT 105
14622: PUSH
14623: LD_INT 106
14625: PUSH
14626: LD_INT 107
14628: PUSH
14629: LD_INT 108
14631: PUSH
14632: LD_INT 109
14634: PUSH
14635: LD_INT 110
14637: PUSH
14638: LD_INT 111
14640: PUSH
14641: LD_INT 112
14643: PUSH
14644: LD_INT 113
14646: PUSH
14647: LD_INT 114
14649: PUSH
14650: LD_INT 116
14652: PUSH
14653: LD_INT 117
14655: PUSH
14656: LD_INT 118
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: ST_TO_ADDR
14682: GO 15689
14684: LD_INT 15
14686: DOUBLE
14687: EQUAL
14688: IFTRUE 14692
14690: GO 14916
14692: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14693: LD_ADDR_VAR 0 1
14697: PUSH
14698: LD_INT 1
14700: PUSH
14701: LD_INT 2
14703: PUSH
14704: LD_INT 3
14706: PUSH
14707: LD_INT 4
14709: PUSH
14710: LD_INT 5
14712: PUSH
14713: LD_INT 6
14715: PUSH
14716: LD_INT 7
14718: PUSH
14719: LD_INT 8
14721: PUSH
14722: LD_INT 9
14724: PUSH
14725: LD_INT 10
14727: PUSH
14728: LD_INT 11
14730: PUSH
14731: LD_INT 12
14733: PUSH
14734: LD_INT 13
14736: PUSH
14737: LD_INT 14
14739: PUSH
14740: LD_INT 15
14742: PUSH
14743: LD_INT 16
14745: PUSH
14746: LD_INT 17
14748: PUSH
14749: LD_INT 18
14751: PUSH
14752: LD_INT 19
14754: PUSH
14755: LD_INT 20
14757: PUSH
14758: LD_INT 21
14760: PUSH
14761: LD_INT 22
14763: PUSH
14764: LD_INT 23
14766: PUSH
14767: LD_INT 24
14769: PUSH
14770: LD_INT 25
14772: PUSH
14773: LD_INT 26
14775: PUSH
14776: LD_INT 27
14778: PUSH
14779: LD_INT 28
14781: PUSH
14782: LD_INT 29
14784: PUSH
14785: LD_INT 30
14787: PUSH
14788: LD_INT 31
14790: PUSH
14791: LD_INT 32
14793: PUSH
14794: LD_INT 33
14796: PUSH
14797: LD_INT 34
14799: PUSH
14800: LD_INT 36
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: PUSH
14840: LD_INT 101
14842: PUSH
14843: LD_INT 102
14845: PUSH
14846: LD_INT 103
14848: PUSH
14849: LD_INT 104
14851: PUSH
14852: LD_INT 105
14854: PUSH
14855: LD_INT 106
14857: PUSH
14858: LD_INT 107
14860: PUSH
14861: LD_INT 108
14863: PUSH
14864: LD_INT 109
14866: PUSH
14867: LD_INT 110
14869: PUSH
14870: LD_INT 111
14872: PUSH
14873: LD_INT 112
14875: PUSH
14876: LD_INT 113
14878: PUSH
14879: LD_INT 114
14881: PUSH
14882: LD_INT 116
14884: PUSH
14885: LD_INT 117
14887: PUSH
14888: LD_INT 118
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: ST_TO_ADDR
14914: GO 15689
14916: LD_INT 16
14918: DOUBLE
14919: EQUAL
14920: IFTRUE 14924
14922: GO 15060
14924: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14925: LD_ADDR_VAR 0 1
14929: PUSH
14930: LD_INT 2
14932: PUSH
14933: LD_INT 4
14935: PUSH
14936: LD_INT 5
14938: PUSH
14939: LD_INT 7
14941: PUSH
14942: LD_INT 11
14944: PUSH
14945: LD_INT 12
14947: PUSH
14948: LD_INT 15
14950: PUSH
14951: LD_INT 16
14953: PUSH
14954: LD_INT 20
14956: PUSH
14957: LD_INT 21
14959: PUSH
14960: LD_INT 22
14962: PUSH
14963: LD_INT 23
14965: PUSH
14966: LD_INT 25
14968: PUSH
14969: LD_INT 26
14971: PUSH
14972: LD_INT 30
14974: PUSH
14975: LD_INT 31
14977: PUSH
14978: LD_INT 32
14980: PUSH
14981: LD_INT 33
14983: PUSH
14984: LD_INT 34
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 101
15010: PUSH
15011: LD_INT 102
15013: PUSH
15014: LD_INT 103
15016: PUSH
15017: LD_INT 106
15019: PUSH
15020: LD_INT 108
15022: PUSH
15023: LD_INT 112
15025: PUSH
15026: LD_INT 113
15028: PUSH
15029: LD_INT 114
15031: PUSH
15032: LD_INT 116
15034: PUSH
15035: LD_INT 117
15037: PUSH
15038: LD_INT 118
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: ST_TO_ADDR
15058: GO 15689
15060: LD_INT 17
15062: DOUBLE
15063: EQUAL
15064: IFTRUE 15068
15066: GO 15292
15068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15069: LD_ADDR_VAR 0 1
15073: PUSH
15074: LD_INT 1
15076: PUSH
15077: LD_INT 2
15079: PUSH
15080: LD_INT 3
15082: PUSH
15083: LD_INT 4
15085: PUSH
15086: LD_INT 5
15088: PUSH
15089: LD_INT 6
15091: PUSH
15092: LD_INT 7
15094: PUSH
15095: LD_INT 8
15097: PUSH
15098: LD_INT 9
15100: PUSH
15101: LD_INT 10
15103: PUSH
15104: LD_INT 11
15106: PUSH
15107: LD_INT 12
15109: PUSH
15110: LD_INT 13
15112: PUSH
15113: LD_INT 14
15115: PUSH
15116: LD_INT 15
15118: PUSH
15119: LD_INT 16
15121: PUSH
15122: LD_INT 17
15124: PUSH
15125: LD_INT 18
15127: PUSH
15128: LD_INT 19
15130: PUSH
15131: LD_INT 20
15133: PUSH
15134: LD_INT 21
15136: PUSH
15137: LD_INT 22
15139: PUSH
15140: LD_INT 23
15142: PUSH
15143: LD_INT 24
15145: PUSH
15146: LD_INT 25
15148: PUSH
15149: LD_INT 26
15151: PUSH
15152: LD_INT 27
15154: PUSH
15155: LD_INT 28
15157: PUSH
15158: LD_INT 29
15160: PUSH
15161: LD_INT 30
15163: PUSH
15164: LD_INT 31
15166: PUSH
15167: LD_INT 32
15169: PUSH
15170: LD_INT 33
15172: PUSH
15173: LD_INT 34
15175: PUSH
15176: LD_INT 36
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 101
15218: PUSH
15219: LD_INT 102
15221: PUSH
15222: LD_INT 103
15224: PUSH
15225: LD_INT 104
15227: PUSH
15228: LD_INT 105
15230: PUSH
15231: LD_INT 106
15233: PUSH
15234: LD_INT 107
15236: PUSH
15237: LD_INT 108
15239: PUSH
15240: LD_INT 109
15242: PUSH
15243: LD_INT 110
15245: PUSH
15246: LD_INT 111
15248: PUSH
15249: LD_INT 112
15251: PUSH
15252: LD_INT 113
15254: PUSH
15255: LD_INT 114
15257: PUSH
15258: LD_INT 116
15260: PUSH
15261: LD_INT 117
15263: PUSH
15264: LD_INT 118
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: ST_TO_ADDR
15290: GO 15689
15292: LD_INT 18
15294: DOUBLE
15295: EQUAL
15296: IFTRUE 15300
15298: GO 15448
15300: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15301: LD_ADDR_VAR 0 1
15305: PUSH
15306: LD_INT 2
15308: PUSH
15309: LD_INT 4
15311: PUSH
15312: LD_INT 5
15314: PUSH
15315: LD_INT 7
15317: PUSH
15318: LD_INT 11
15320: PUSH
15321: LD_INT 12
15323: PUSH
15324: LD_INT 15
15326: PUSH
15327: LD_INT 16
15329: PUSH
15330: LD_INT 20
15332: PUSH
15333: LD_INT 21
15335: PUSH
15336: LD_INT 22
15338: PUSH
15339: LD_INT 23
15341: PUSH
15342: LD_INT 25
15344: PUSH
15345: LD_INT 26
15347: PUSH
15348: LD_INT 30
15350: PUSH
15351: LD_INT 31
15353: PUSH
15354: LD_INT 32
15356: PUSH
15357: LD_INT 33
15359: PUSH
15360: LD_INT 34
15362: PUSH
15363: LD_INT 35
15365: PUSH
15366: LD_INT 36
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 101
15394: PUSH
15395: LD_INT 102
15397: PUSH
15398: LD_INT 103
15400: PUSH
15401: LD_INT 106
15403: PUSH
15404: LD_INT 108
15406: PUSH
15407: LD_INT 112
15409: PUSH
15410: LD_INT 113
15412: PUSH
15413: LD_INT 114
15415: PUSH
15416: LD_INT 115
15418: PUSH
15419: LD_INT 116
15421: PUSH
15422: LD_INT 117
15424: PUSH
15425: LD_INT 118
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: ST_TO_ADDR
15446: GO 15689
15448: LD_INT 19
15450: DOUBLE
15451: EQUAL
15452: IFTRUE 15456
15454: GO 15688
15456: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15457: LD_ADDR_VAR 0 1
15461: PUSH
15462: LD_INT 1
15464: PUSH
15465: LD_INT 2
15467: PUSH
15468: LD_INT 3
15470: PUSH
15471: LD_INT 4
15473: PUSH
15474: LD_INT 5
15476: PUSH
15477: LD_INT 6
15479: PUSH
15480: LD_INT 7
15482: PUSH
15483: LD_INT 8
15485: PUSH
15486: LD_INT 9
15488: PUSH
15489: LD_INT 10
15491: PUSH
15492: LD_INT 11
15494: PUSH
15495: LD_INT 12
15497: PUSH
15498: LD_INT 13
15500: PUSH
15501: LD_INT 14
15503: PUSH
15504: LD_INT 15
15506: PUSH
15507: LD_INT 16
15509: PUSH
15510: LD_INT 17
15512: PUSH
15513: LD_INT 18
15515: PUSH
15516: LD_INT 19
15518: PUSH
15519: LD_INT 20
15521: PUSH
15522: LD_INT 21
15524: PUSH
15525: LD_INT 22
15527: PUSH
15528: LD_INT 23
15530: PUSH
15531: LD_INT 24
15533: PUSH
15534: LD_INT 25
15536: PUSH
15537: LD_INT 26
15539: PUSH
15540: LD_INT 27
15542: PUSH
15543: LD_INT 28
15545: PUSH
15546: LD_INT 29
15548: PUSH
15549: LD_INT 30
15551: PUSH
15552: LD_INT 31
15554: PUSH
15555: LD_INT 32
15557: PUSH
15558: LD_INT 33
15560: PUSH
15561: LD_INT 34
15563: PUSH
15564: LD_INT 35
15566: PUSH
15567: LD_INT 36
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 101
15610: PUSH
15611: LD_INT 102
15613: PUSH
15614: LD_INT 103
15616: PUSH
15617: LD_INT 104
15619: PUSH
15620: LD_INT 105
15622: PUSH
15623: LD_INT 106
15625: PUSH
15626: LD_INT 107
15628: PUSH
15629: LD_INT 108
15631: PUSH
15632: LD_INT 109
15634: PUSH
15635: LD_INT 110
15637: PUSH
15638: LD_INT 111
15640: PUSH
15641: LD_INT 112
15643: PUSH
15644: LD_INT 113
15646: PUSH
15647: LD_INT 114
15649: PUSH
15650: LD_INT 115
15652: PUSH
15653: LD_INT 116
15655: PUSH
15656: LD_INT 117
15658: PUSH
15659: LD_INT 118
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: ST_TO_ADDR
15686: GO 15689
15688: POP
// end else
15689: GO 15920
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15691: LD_ADDR_VAR 0 1
15695: PUSH
15696: LD_INT 1
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: LD_INT 3
15704: PUSH
15705: LD_INT 4
15707: PUSH
15708: LD_INT 5
15710: PUSH
15711: LD_INT 6
15713: PUSH
15714: LD_INT 7
15716: PUSH
15717: LD_INT 8
15719: PUSH
15720: LD_INT 9
15722: PUSH
15723: LD_INT 10
15725: PUSH
15726: LD_INT 11
15728: PUSH
15729: LD_INT 12
15731: PUSH
15732: LD_INT 13
15734: PUSH
15735: LD_INT 14
15737: PUSH
15738: LD_INT 15
15740: PUSH
15741: LD_INT 16
15743: PUSH
15744: LD_INT 17
15746: PUSH
15747: LD_INT 18
15749: PUSH
15750: LD_INT 19
15752: PUSH
15753: LD_INT 20
15755: PUSH
15756: LD_INT 21
15758: PUSH
15759: LD_INT 22
15761: PUSH
15762: LD_INT 23
15764: PUSH
15765: LD_INT 24
15767: PUSH
15768: LD_INT 25
15770: PUSH
15771: LD_INT 26
15773: PUSH
15774: LD_INT 27
15776: PUSH
15777: LD_INT 28
15779: PUSH
15780: LD_INT 29
15782: PUSH
15783: LD_INT 30
15785: PUSH
15786: LD_INT 31
15788: PUSH
15789: LD_INT 32
15791: PUSH
15792: LD_INT 33
15794: PUSH
15795: LD_INT 34
15797: PUSH
15798: LD_INT 35
15800: PUSH
15801: LD_INT 36
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 101
15844: PUSH
15845: LD_INT 102
15847: PUSH
15848: LD_INT 103
15850: PUSH
15851: LD_INT 104
15853: PUSH
15854: LD_INT 105
15856: PUSH
15857: LD_INT 106
15859: PUSH
15860: LD_INT 107
15862: PUSH
15863: LD_INT 108
15865: PUSH
15866: LD_INT 109
15868: PUSH
15869: LD_INT 110
15871: PUSH
15872: LD_INT 111
15874: PUSH
15875: LD_INT 112
15877: PUSH
15878: LD_INT 113
15880: PUSH
15881: LD_INT 114
15883: PUSH
15884: LD_INT 115
15886: PUSH
15887: LD_INT 116
15889: PUSH
15890: LD_INT 117
15892: PUSH
15893: LD_INT 118
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: ST_TO_ADDR
// if result then
15920: LD_VAR 0 1
15924: IFFALSE 16213
// begin normal :=  ;
15926: LD_ADDR_VAR 0 3
15930: PUSH
15931: LD_STRING 
15933: ST_TO_ADDR
// hardcore :=  ;
15934: LD_ADDR_VAR 0 4
15938: PUSH
15939: LD_STRING 
15941: ST_TO_ADDR
// for i = 1 to normalCounter do
15942: LD_ADDR_VAR 0 5
15946: PUSH
15947: DOUBLE
15948: LD_INT 1
15950: DEC
15951: ST_TO_ADDR
15952: LD_EXP 39
15956: PUSH
15957: FOR_TO
15958: IFFALSE 16059
// begin tmp := 0 ;
15960: LD_ADDR_VAR 0 2
15964: PUSH
15965: LD_STRING 0
15967: ST_TO_ADDR
// if result [ 1 ] then
15968: LD_VAR 0 1
15972: PUSH
15973: LD_INT 1
15975: ARRAY
15976: IFFALSE 16041
// if result [ 1 ] [ 1 ] = i then
15978: LD_VAR 0 1
15982: PUSH
15983: LD_INT 1
15985: ARRAY
15986: PUSH
15987: LD_INT 1
15989: ARRAY
15990: PUSH
15991: LD_VAR 0 5
15995: EQUAL
15996: IFFALSE 16041
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15998: LD_ADDR_VAR 0 1
16002: PUSH
16003: LD_VAR 0 1
16007: PPUSH
16008: LD_INT 1
16010: PPUSH
16011: LD_VAR 0 1
16015: PUSH
16016: LD_INT 1
16018: ARRAY
16019: PPUSH
16020: LD_INT 1
16022: PPUSH
16023: CALL_OW 3
16027: PPUSH
16028: CALL_OW 1
16032: ST_TO_ADDR
// tmp := 1 ;
16033: LD_ADDR_VAR 0 2
16037: PUSH
16038: LD_STRING 1
16040: ST_TO_ADDR
// end ; normal := normal & tmp ;
16041: LD_ADDR_VAR 0 3
16045: PUSH
16046: LD_VAR 0 3
16050: PUSH
16051: LD_VAR 0 2
16055: STR
16056: ST_TO_ADDR
// end ;
16057: GO 15957
16059: POP
16060: POP
// for i = 1 to hardcoreCounter do
16061: LD_ADDR_VAR 0 5
16065: PUSH
16066: DOUBLE
16067: LD_INT 1
16069: DEC
16070: ST_TO_ADDR
16071: LD_EXP 40
16075: PUSH
16076: FOR_TO
16077: IFFALSE 16182
// begin tmp := 0 ;
16079: LD_ADDR_VAR 0 2
16083: PUSH
16084: LD_STRING 0
16086: ST_TO_ADDR
// if result [ 2 ] then
16087: LD_VAR 0 1
16091: PUSH
16092: LD_INT 2
16094: ARRAY
16095: IFFALSE 16164
// if result [ 2 ] [ 1 ] = 100 + i then
16097: LD_VAR 0 1
16101: PUSH
16102: LD_INT 2
16104: ARRAY
16105: PUSH
16106: LD_INT 1
16108: ARRAY
16109: PUSH
16110: LD_INT 100
16112: PUSH
16113: LD_VAR 0 5
16117: PLUS
16118: EQUAL
16119: IFFALSE 16164
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16121: LD_ADDR_VAR 0 1
16125: PUSH
16126: LD_VAR 0 1
16130: PPUSH
16131: LD_INT 2
16133: PPUSH
16134: LD_VAR 0 1
16138: PUSH
16139: LD_INT 2
16141: ARRAY
16142: PPUSH
16143: LD_INT 1
16145: PPUSH
16146: CALL_OW 3
16150: PPUSH
16151: CALL_OW 1
16155: ST_TO_ADDR
// tmp := 1 ;
16156: LD_ADDR_VAR 0 2
16160: PUSH
16161: LD_STRING 1
16163: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16164: LD_ADDR_VAR 0 4
16168: PUSH
16169: LD_VAR 0 4
16173: PUSH
16174: LD_VAR 0 2
16178: STR
16179: ST_TO_ADDR
// end ;
16180: GO 16076
16182: POP
16183: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
16184: LD_STRING getStreamItemsFromMission("
16186: PUSH
16187: LD_VAR 0 3
16191: STR
16192: PUSH
16193: LD_STRING ","
16195: STR
16196: PUSH
16197: LD_VAR 0 4
16201: STR
16202: PUSH
16203: LD_STRING ")
16205: STR
16206: PPUSH
16207: CALL_OW 559
// end else
16211: GO 16220
// ToLua ( getStreamItemsFromMission("","") ) ;
16213: LD_STRING getStreamItemsFromMission("","")
16215: PPUSH
16216: CALL_OW 559
// end ;
16220: LD_VAR 0 1
16224: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16225: LD_EXP 38
16229: PUSH
16230: LD_EXP 43
16234: AND
16235: IFFALSE 16359
16237: GO 16239
16239: DISABLE
16240: LD_INT 0
16242: PPUSH
16243: PPUSH
// begin enable ;
16244: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16245: LD_ADDR_VAR 0 2
16249: PUSH
16250: LD_INT 22
16252: PUSH
16253: LD_OWVAR 2
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: LD_INT 34
16267: PUSH
16268: LD_INT 7
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: LD_INT 34
16277: PUSH
16278: LD_INT 45
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 34
16287: PUSH
16288: LD_INT 28
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 34
16297: PUSH
16298: LD_INT 47
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 69
16320: ST_TO_ADDR
// if not tmp then
16321: LD_VAR 0 2
16325: NOT
16326: IFFALSE 16330
// exit ;
16328: GO 16359
// for i in tmp do
16330: LD_ADDR_VAR 0 1
16334: PUSH
16335: LD_VAR 0 2
16339: PUSH
16340: FOR_IN
16341: IFFALSE 16357
// begin SetLives ( i , 0 ) ;
16343: LD_VAR 0 1
16347: PPUSH
16348: LD_INT 0
16350: PPUSH
16351: CALL_OW 234
// end ;
16355: GO 16340
16357: POP
16358: POP
// end ;
16359: PPOPN 2
16361: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16362: LD_EXP 38
16366: PUSH
16367: LD_EXP 44
16371: AND
16372: IFFALSE 16456
16374: GO 16376
16376: DISABLE
16377: LD_INT 0
16379: PPUSH
16380: PPUSH
// begin enable ;
16381: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16382: LD_ADDR_VAR 0 2
16386: PUSH
16387: LD_INT 22
16389: PUSH
16390: LD_OWVAR 2
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 32
16401: PUSH
16402: LD_INT 3
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PPUSH
16413: CALL_OW 69
16417: ST_TO_ADDR
// if not tmp then
16418: LD_VAR 0 2
16422: NOT
16423: IFFALSE 16427
// exit ;
16425: GO 16456
// for i in tmp do
16427: LD_ADDR_VAR 0 1
16431: PUSH
16432: LD_VAR 0 2
16436: PUSH
16437: FOR_IN
16438: IFFALSE 16454
// begin SetLives ( i , 0 ) ;
16440: LD_VAR 0 1
16444: PPUSH
16445: LD_INT 0
16447: PPUSH
16448: CALL_OW 234
// end ;
16452: GO 16437
16454: POP
16455: POP
// end ;
16456: PPOPN 2
16458: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16459: LD_EXP 38
16463: PUSH
16464: LD_EXP 41
16468: AND
16469: IFFALSE 16562
16471: GO 16473
16473: DISABLE
16474: LD_INT 0
16476: PPUSH
// begin enable ;
16477: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16478: LD_ADDR_VAR 0 1
16482: PUSH
16483: LD_INT 22
16485: PUSH
16486: LD_OWVAR 2
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 2
16497: PUSH
16498: LD_INT 25
16500: PUSH
16501: LD_INT 5
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 25
16510: PUSH
16511: LD_INT 9
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 25
16520: PUSH
16521: LD_INT 8
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PPUSH
16538: CALL_OW 69
16542: PUSH
16543: FOR_IN
16544: IFFALSE 16560
// begin SetClass ( i , 1 ) ;
16546: LD_VAR 0 1
16550: PPUSH
16551: LD_INT 1
16553: PPUSH
16554: CALL_OW 336
// end ;
16558: GO 16543
16560: POP
16561: POP
// end ;
16562: PPOPN 1
16564: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16565: LD_EXP 38
16569: PUSH
16570: LD_EXP 42
16574: AND
16575: PUSH
16576: LD_OWVAR 65
16580: PUSH
16581: LD_INT 7
16583: LESS
16584: AND
16585: IFFALSE 16599
16587: GO 16589
16589: DISABLE
// begin enable ;
16590: ENABLE
// game_speed := 7 ;
16591: LD_ADDR_OWVAR 65
16595: PUSH
16596: LD_INT 7
16598: ST_TO_ADDR
// end ;
16599: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16600: LD_EXP 38
16604: PUSH
16605: LD_EXP 45
16609: AND
16610: IFFALSE 16812
16612: GO 16614
16614: DISABLE
16615: LD_INT 0
16617: PPUSH
16618: PPUSH
16619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16620: LD_ADDR_VAR 0 3
16624: PUSH
16625: LD_INT 81
16627: PUSH
16628: LD_OWVAR 2
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 21
16639: PUSH
16640: LD_INT 1
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PPUSH
16651: CALL_OW 69
16655: ST_TO_ADDR
// if not tmp then
16656: LD_VAR 0 3
16660: NOT
16661: IFFALSE 16665
// exit ;
16663: GO 16812
// if tmp > 5 then
16665: LD_VAR 0 3
16669: PUSH
16670: LD_INT 5
16672: GREATER
16673: IFFALSE 16685
// k := 5 else
16675: LD_ADDR_VAR 0 2
16679: PUSH
16680: LD_INT 5
16682: ST_TO_ADDR
16683: GO 16695
// k := tmp ;
16685: LD_ADDR_VAR 0 2
16689: PUSH
16690: LD_VAR 0 3
16694: ST_TO_ADDR
// for i := 1 to k do
16695: LD_ADDR_VAR 0 1
16699: PUSH
16700: DOUBLE
16701: LD_INT 1
16703: DEC
16704: ST_TO_ADDR
16705: LD_VAR 0 2
16709: PUSH
16710: FOR_TO
16711: IFFALSE 16810
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16713: LD_VAR 0 3
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: PPUSH
16724: LD_VAR 0 1
16728: PUSH
16729: LD_INT 4
16731: MOD
16732: PUSH
16733: LD_INT 1
16735: PLUS
16736: PPUSH
16737: CALL_OW 259
16741: PUSH
16742: LD_INT 10
16744: LESS
16745: IFFALSE 16808
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16747: LD_VAR 0 3
16751: PUSH
16752: LD_VAR 0 1
16756: ARRAY
16757: PPUSH
16758: LD_VAR 0 1
16762: PUSH
16763: LD_INT 4
16765: MOD
16766: PUSH
16767: LD_INT 1
16769: PLUS
16770: PPUSH
16771: LD_VAR 0 3
16775: PUSH
16776: LD_VAR 0 1
16780: ARRAY
16781: PPUSH
16782: LD_VAR 0 1
16786: PUSH
16787: LD_INT 4
16789: MOD
16790: PUSH
16791: LD_INT 1
16793: PLUS
16794: PPUSH
16795: CALL_OW 259
16799: PUSH
16800: LD_INT 1
16802: PLUS
16803: PPUSH
16804: CALL_OW 237
16808: GO 16710
16810: POP
16811: POP
// end ;
16812: PPOPN 3
16814: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16815: LD_EXP 38
16819: PUSH
16820: LD_EXP 46
16824: AND
16825: IFFALSE 16845
16827: GO 16829
16829: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16830: LD_INT 4
16832: PPUSH
16833: LD_OWVAR 2
16837: PPUSH
16838: LD_INT 0
16840: PPUSH
16841: CALL_OW 324
16845: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16846: LD_EXP 38
16850: PUSH
16851: LD_EXP 75
16855: AND
16856: IFFALSE 16876
16858: GO 16860
16860: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16861: LD_INT 19
16863: PPUSH
16864: LD_OWVAR 2
16868: PPUSH
16869: LD_INT 0
16871: PPUSH
16872: CALL_OW 324
16876: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16877: LD_EXP 38
16881: PUSH
16882: LD_EXP 47
16886: AND
16887: IFFALSE 16989
16889: GO 16891
16891: DISABLE
16892: LD_INT 0
16894: PPUSH
16895: PPUSH
// begin enable ;
16896: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16897: LD_ADDR_VAR 0 2
16901: PUSH
16902: LD_INT 22
16904: PUSH
16905: LD_OWVAR 2
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 2
16916: PUSH
16917: LD_INT 34
16919: PUSH
16920: LD_INT 11
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 34
16929: PUSH
16930: LD_INT 30
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: LIST
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PPUSH
16946: CALL_OW 69
16950: ST_TO_ADDR
// if not tmp then
16951: LD_VAR 0 2
16955: NOT
16956: IFFALSE 16960
// exit ;
16958: GO 16989
// for i in tmp do
16960: LD_ADDR_VAR 0 1
16964: PUSH
16965: LD_VAR 0 2
16969: PUSH
16970: FOR_IN
16971: IFFALSE 16987
// begin SetLives ( i , 0 ) ;
16973: LD_VAR 0 1
16977: PPUSH
16978: LD_INT 0
16980: PPUSH
16981: CALL_OW 234
// end ;
16985: GO 16970
16987: POP
16988: POP
// end ;
16989: PPOPN 2
16991: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16992: LD_EXP 38
16996: PUSH
16997: LD_EXP 48
17001: AND
17002: IFFALSE 17022
17004: GO 17006
17006: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17007: LD_INT 32
17009: PPUSH
17010: LD_OWVAR 2
17014: PPUSH
17015: LD_INT 0
17017: PPUSH
17018: CALL_OW 324
17022: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17023: LD_EXP 38
17027: PUSH
17028: LD_EXP 49
17032: AND
17033: IFFALSE 17214
17035: GO 17037
17037: DISABLE
17038: LD_INT 0
17040: PPUSH
17041: PPUSH
17042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17043: LD_ADDR_VAR 0 2
17047: PUSH
17048: LD_INT 22
17050: PUSH
17051: LD_OWVAR 2
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 33
17062: PUSH
17063: LD_INT 3
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PPUSH
17074: CALL_OW 69
17078: ST_TO_ADDR
// if not tmp then
17079: LD_VAR 0 2
17083: NOT
17084: IFFALSE 17088
// exit ;
17086: GO 17214
// side := 0 ;
17088: LD_ADDR_VAR 0 3
17092: PUSH
17093: LD_INT 0
17095: ST_TO_ADDR
// for i := 1 to 8 do
17096: LD_ADDR_VAR 0 1
17100: PUSH
17101: DOUBLE
17102: LD_INT 1
17104: DEC
17105: ST_TO_ADDR
17106: LD_INT 8
17108: PUSH
17109: FOR_TO
17110: IFFALSE 17158
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17112: LD_OWVAR 2
17116: PUSH
17117: LD_VAR 0 1
17121: NONEQUAL
17122: PUSH
17123: LD_OWVAR 2
17127: PPUSH
17128: LD_VAR 0 1
17132: PPUSH
17133: CALL_OW 81
17137: PUSH
17138: LD_INT 2
17140: EQUAL
17141: AND
17142: IFFALSE 17156
// begin side := i ;
17144: LD_ADDR_VAR 0 3
17148: PUSH
17149: LD_VAR 0 1
17153: ST_TO_ADDR
// break ;
17154: GO 17158
// end ;
17156: GO 17109
17158: POP
17159: POP
// if not side then
17160: LD_VAR 0 3
17164: NOT
17165: IFFALSE 17169
// exit ;
17167: GO 17214
// for i := 1 to tmp do
17169: LD_ADDR_VAR 0 1
17173: PUSH
17174: DOUBLE
17175: LD_INT 1
17177: DEC
17178: ST_TO_ADDR
17179: LD_VAR 0 2
17183: PUSH
17184: FOR_TO
17185: IFFALSE 17212
// if Prob ( 60 ) then
17187: LD_INT 60
17189: PPUSH
17190: CALL_OW 13
17194: IFFALSE 17210
// SetSide ( i , side ) ;
17196: LD_VAR 0 1
17200: PPUSH
17201: LD_VAR 0 3
17205: PPUSH
17206: CALL_OW 235
17210: GO 17184
17212: POP
17213: POP
// end ;
17214: PPOPN 3
17216: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17217: LD_EXP 38
17221: PUSH
17222: LD_EXP 51
17226: AND
17227: IFFALSE 17346
17229: GO 17231
17231: DISABLE
17232: LD_INT 0
17234: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17235: LD_ADDR_VAR 0 1
17239: PUSH
17240: LD_INT 22
17242: PUSH
17243: LD_OWVAR 2
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 21
17254: PUSH
17255: LD_INT 1
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: LD_INT 3
17264: PUSH
17265: LD_INT 23
17267: PUSH
17268: LD_INT 0
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: LIST
17283: PPUSH
17284: CALL_OW 69
17288: PUSH
17289: FOR_IN
17290: IFFALSE 17344
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17292: LD_VAR 0 1
17296: PPUSH
17297: CALL_OW 257
17301: PUSH
17302: LD_INT 1
17304: PUSH
17305: LD_INT 2
17307: PUSH
17308: LD_INT 3
17310: PUSH
17311: LD_INT 4
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: IN
17320: IFFALSE 17342
// SetClass ( un , rand ( 1 , 4 ) ) ;
17322: LD_VAR 0 1
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: LD_INT 4
17332: PPUSH
17333: CALL_OW 12
17337: PPUSH
17338: CALL_OW 336
17342: GO 17289
17344: POP
17345: POP
// end ;
17346: PPOPN 1
17348: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17349: LD_EXP 38
17353: PUSH
17354: LD_EXP 50
17358: AND
17359: IFFALSE 17438
17361: GO 17363
17363: DISABLE
17364: LD_INT 0
17366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17367: LD_ADDR_VAR 0 1
17371: PUSH
17372: LD_INT 22
17374: PUSH
17375: LD_OWVAR 2
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 21
17386: PUSH
17387: LD_INT 3
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PPUSH
17398: CALL_OW 69
17402: ST_TO_ADDR
// if not tmp then
17403: LD_VAR 0 1
17407: NOT
17408: IFFALSE 17412
// exit ;
17410: GO 17438
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17412: LD_VAR 0 1
17416: PUSH
17417: LD_INT 1
17419: PPUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 12
17429: ARRAY
17430: PPUSH
17431: LD_INT 100
17433: PPUSH
17434: CALL_OW 234
// end ;
17438: PPOPN 1
17440: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17441: LD_EXP 38
17445: PUSH
17446: LD_EXP 52
17450: AND
17451: IFFALSE 17549
17453: GO 17455
17455: DISABLE
17456: LD_INT 0
17458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17459: LD_ADDR_VAR 0 1
17463: PUSH
17464: LD_INT 22
17466: PUSH
17467: LD_OWVAR 2
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 21
17478: PUSH
17479: LD_INT 1
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PPUSH
17490: CALL_OW 69
17494: ST_TO_ADDR
// if not tmp then
17495: LD_VAR 0 1
17499: NOT
17500: IFFALSE 17504
// exit ;
17502: GO 17549
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17504: LD_VAR 0 1
17508: PUSH
17509: LD_INT 1
17511: PPUSH
17512: LD_VAR 0 1
17516: PPUSH
17517: CALL_OW 12
17521: ARRAY
17522: PPUSH
17523: LD_INT 1
17525: PPUSH
17526: LD_INT 4
17528: PPUSH
17529: CALL_OW 12
17533: PPUSH
17534: LD_INT 3000
17536: PPUSH
17537: LD_INT 9000
17539: PPUSH
17540: CALL_OW 12
17544: PPUSH
17545: CALL_OW 492
// end ;
17549: PPOPN 1
17551: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17552: LD_EXP 38
17556: PUSH
17557: LD_EXP 53
17561: AND
17562: IFFALSE 17582
17564: GO 17566
17566: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17567: LD_INT 1
17569: PPUSH
17570: LD_OWVAR 2
17574: PPUSH
17575: LD_INT 0
17577: PPUSH
17578: CALL_OW 324
17582: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17583: LD_EXP 38
17587: PUSH
17588: LD_EXP 54
17592: AND
17593: IFFALSE 17676
17595: GO 17597
17597: DISABLE
17598: LD_INT 0
17600: PPUSH
17601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17602: LD_ADDR_VAR 0 2
17606: PUSH
17607: LD_INT 22
17609: PUSH
17610: LD_OWVAR 2
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 21
17621: PUSH
17622: LD_INT 3
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PPUSH
17633: CALL_OW 69
17637: ST_TO_ADDR
// if not tmp then
17638: LD_VAR 0 2
17642: NOT
17643: IFFALSE 17647
// exit ;
17645: GO 17676
// for i in tmp do
17647: LD_ADDR_VAR 0 1
17651: PUSH
17652: LD_VAR 0 2
17656: PUSH
17657: FOR_IN
17658: IFFALSE 17674
// SetBLevel ( i , 10 ) ;
17660: LD_VAR 0 1
17664: PPUSH
17665: LD_INT 10
17667: PPUSH
17668: CALL_OW 241
17672: GO 17657
17674: POP
17675: POP
// end ;
17676: PPOPN 2
17678: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17679: LD_EXP 38
17683: PUSH
17684: LD_EXP 55
17688: AND
17689: IFFALSE 17800
17691: GO 17693
17693: DISABLE
17694: LD_INT 0
17696: PPUSH
17697: PPUSH
17698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17699: LD_ADDR_VAR 0 3
17703: PUSH
17704: LD_INT 22
17706: PUSH
17707: LD_OWVAR 2
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 25
17718: PUSH
17719: LD_INT 1
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PPUSH
17730: CALL_OW 69
17734: ST_TO_ADDR
// if not tmp then
17735: LD_VAR 0 3
17739: NOT
17740: IFFALSE 17744
// exit ;
17742: GO 17800
// un := tmp [ rand ( 1 , tmp ) ] ;
17744: LD_ADDR_VAR 0 2
17748: PUSH
17749: LD_VAR 0 3
17753: PUSH
17754: LD_INT 1
17756: PPUSH
17757: LD_VAR 0 3
17761: PPUSH
17762: CALL_OW 12
17766: ARRAY
17767: ST_TO_ADDR
// if Crawls ( un ) then
17768: LD_VAR 0 2
17772: PPUSH
17773: CALL_OW 318
17777: IFFALSE 17788
// ComWalk ( un ) ;
17779: LD_VAR 0 2
17783: PPUSH
17784: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17788: LD_VAR 0 2
17792: PPUSH
17793: LD_INT 5
17795: PPUSH
17796: CALL_OW 336
// end ;
17800: PPOPN 3
17802: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17803: LD_EXP 38
17807: PUSH
17808: LD_EXP 56
17812: AND
17813: PUSH
17814: LD_OWVAR 67
17818: PUSH
17819: LD_INT 4
17821: LESS
17822: AND
17823: IFFALSE 17842
17825: GO 17827
17827: DISABLE
// begin Difficulty := Difficulty + 1 ;
17828: LD_ADDR_OWVAR 67
17832: PUSH
17833: LD_OWVAR 67
17837: PUSH
17838: LD_INT 1
17840: PLUS
17841: ST_TO_ADDR
// end ;
17842: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17843: LD_EXP 38
17847: PUSH
17848: LD_EXP 57
17852: AND
17853: IFFALSE 17956
17855: GO 17857
17857: DISABLE
17858: LD_INT 0
17860: PPUSH
// begin for i := 1 to 5 do
17861: LD_ADDR_VAR 0 1
17865: PUSH
17866: DOUBLE
17867: LD_INT 1
17869: DEC
17870: ST_TO_ADDR
17871: LD_INT 5
17873: PUSH
17874: FOR_TO
17875: IFFALSE 17954
// begin uc_nation := nation_nature ;
17877: LD_ADDR_OWVAR 21
17881: PUSH
17882: LD_INT 0
17884: ST_TO_ADDR
// uc_side := 0 ;
17885: LD_ADDR_OWVAR 20
17889: PUSH
17890: LD_INT 0
17892: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17893: LD_ADDR_OWVAR 29
17897: PUSH
17898: LD_INT 12
17900: PUSH
17901: LD_INT 12
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: ST_TO_ADDR
// hc_agressivity := 20 ;
17908: LD_ADDR_OWVAR 35
17912: PUSH
17913: LD_INT 20
17915: ST_TO_ADDR
// hc_class := class_tiger ;
17916: LD_ADDR_OWVAR 28
17920: PUSH
17921: LD_INT 14
17923: ST_TO_ADDR
// hc_gallery :=  ;
17924: LD_ADDR_OWVAR 33
17928: PUSH
17929: LD_STRING 
17931: ST_TO_ADDR
// hc_name :=  ;
17932: LD_ADDR_OWVAR 26
17936: PUSH
17937: LD_STRING 
17939: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17940: CALL_OW 44
17944: PPUSH
17945: LD_INT 0
17947: PPUSH
17948: CALL_OW 51
// end ;
17952: GO 17874
17954: POP
17955: POP
// end ;
17956: PPOPN 1
17958: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17959: LD_EXP 38
17963: PUSH
17964: LD_EXP 58
17968: AND
17969: IFFALSE 17978
17971: GO 17973
17973: DISABLE
// StreamSibBomb ;
17974: CALL 17979 0 0
17978: END
// export function StreamSibBomb ; var i , x , y ; begin
17979: LD_INT 0
17981: PPUSH
17982: PPUSH
17983: PPUSH
17984: PPUSH
// result := false ;
17985: LD_ADDR_VAR 0 1
17989: PUSH
17990: LD_INT 0
17992: ST_TO_ADDR
// for i := 1 to 16 do
17993: LD_ADDR_VAR 0 2
17997: PUSH
17998: DOUBLE
17999: LD_INT 1
18001: DEC
18002: ST_TO_ADDR
18003: LD_INT 16
18005: PUSH
18006: FOR_TO
18007: IFFALSE 18206
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18009: LD_ADDR_VAR 0 3
18013: PUSH
18014: LD_INT 10
18016: PUSH
18017: LD_INT 20
18019: PUSH
18020: LD_INT 30
18022: PUSH
18023: LD_INT 40
18025: PUSH
18026: LD_INT 50
18028: PUSH
18029: LD_INT 60
18031: PUSH
18032: LD_INT 70
18034: PUSH
18035: LD_INT 80
18037: PUSH
18038: LD_INT 90
18040: PUSH
18041: LD_INT 100
18043: PUSH
18044: LD_INT 110
18046: PUSH
18047: LD_INT 120
18049: PUSH
18050: LD_INT 130
18052: PUSH
18053: LD_INT 140
18055: PUSH
18056: LD_INT 150
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 1
18078: PPUSH
18079: LD_INT 15
18081: PPUSH
18082: CALL_OW 12
18086: ARRAY
18087: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18088: LD_ADDR_VAR 0 4
18092: PUSH
18093: LD_INT 10
18095: PUSH
18096: LD_INT 20
18098: PUSH
18099: LD_INT 30
18101: PUSH
18102: LD_INT 40
18104: PUSH
18105: LD_INT 50
18107: PUSH
18108: LD_INT 60
18110: PUSH
18111: LD_INT 70
18113: PUSH
18114: LD_INT 80
18116: PUSH
18117: LD_INT 90
18119: PUSH
18120: LD_INT 100
18122: PUSH
18123: LD_INT 110
18125: PUSH
18126: LD_INT 120
18128: PUSH
18129: LD_INT 130
18131: PUSH
18132: LD_INT 140
18134: PUSH
18135: LD_INT 150
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 1
18157: PPUSH
18158: LD_INT 15
18160: PPUSH
18161: CALL_OW 12
18165: ARRAY
18166: ST_TO_ADDR
// if ValidHex ( x , y ) then
18167: LD_VAR 0 3
18171: PPUSH
18172: LD_VAR 0 4
18176: PPUSH
18177: CALL_OW 488
18181: IFFALSE 18204
// begin result := [ x , y ] ;
18183: LD_ADDR_VAR 0 1
18187: PUSH
18188: LD_VAR 0 3
18192: PUSH
18193: LD_VAR 0 4
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: ST_TO_ADDR
// break ;
18202: GO 18206
// end ; end ;
18204: GO 18006
18206: POP
18207: POP
// if result then
18208: LD_VAR 0 1
18212: IFFALSE 18272
// begin ToLua ( playSibBomb() ) ;
18214: LD_STRING playSibBomb()
18216: PPUSH
18217: CALL_OW 559
// wait ( 0 0$14 ) ;
18221: LD_INT 490
18223: PPUSH
18224: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18228: LD_VAR 0 1
18232: PUSH
18233: LD_INT 1
18235: ARRAY
18236: PPUSH
18237: LD_VAR 0 1
18241: PUSH
18242: LD_INT 2
18244: ARRAY
18245: PPUSH
18246: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18250: LD_VAR 0 1
18254: PUSH
18255: LD_INT 1
18257: ARRAY
18258: PPUSH
18259: LD_VAR 0 1
18263: PUSH
18264: LD_INT 2
18266: ARRAY
18267: PPUSH
18268: CALL_OW 429
// end ; end ;
18272: LD_VAR 0 1
18276: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18277: LD_EXP 38
18281: PUSH
18282: LD_EXP 60
18286: AND
18287: IFFALSE 18299
18289: GO 18291
18291: DISABLE
// YouLost (  ) ;
18292: LD_STRING 
18294: PPUSH
18295: CALL_OW 104
18299: END
// every 0 0$1 trigger StreamModeActive and sFog do
18300: LD_EXP 38
18304: PUSH
18305: LD_EXP 59
18309: AND
18310: IFFALSE 18324
18312: GO 18314
18314: DISABLE
// FogOff ( your_side ) ;
18315: LD_OWVAR 2
18319: PPUSH
18320: CALL_OW 344
18324: END
// every 0 0$1 trigger StreamModeActive and sSun do
18325: LD_EXP 38
18329: PUSH
18330: LD_EXP 61
18334: AND
18335: IFFALSE 18363
18337: GO 18339
18339: DISABLE
// begin solar_recharge_percent := 0 ;
18340: LD_ADDR_OWVAR 79
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18348: LD_INT 10500
18350: PPUSH
18351: CALL_OW 67
// solar_recharge_percent := 100 ;
18355: LD_ADDR_OWVAR 79
18359: PUSH
18360: LD_INT 100
18362: ST_TO_ADDR
// end ;
18363: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18364: LD_EXP 38
18368: PUSH
18369: LD_EXP 62
18373: AND
18374: IFFALSE 18613
18376: GO 18378
18378: DISABLE
18379: LD_INT 0
18381: PPUSH
18382: PPUSH
18383: PPUSH
// begin tmp := [ ] ;
18384: LD_ADDR_VAR 0 3
18388: PUSH
18389: EMPTY
18390: ST_TO_ADDR
// for i := 1 to 6 do
18391: LD_ADDR_VAR 0 1
18395: PUSH
18396: DOUBLE
18397: LD_INT 1
18399: DEC
18400: ST_TO_ADDR
18401: LD_INT 6
18403: PUSH
18404: FOR_TO
18405: IFFALSE 18510
// begin uc_nation := nation_nature ;
18407: LD_ADDR_OWVAR 21
18411: PUSH
18412: LD_INT 0
18414: ST_TO_ADDR
// uc_side := 0 ;
18415: LD_ADDR_OWVAR 20
18419: PUSH
18420: LD_INT 0
18422: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18423: LD_ADDR_OWVAR 29
18427: PUSH
18428: LD_INT 12
18430: PUSH
18431: LD_INT 12
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: ST_TO_ADDR
// hc_agressivity := 20 ;
18438: LD_ADDR_OWVAR 35
18442: PUSH
18443: LD_INT 20
18445: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18446: LD_ADDR_OWVAR 28
18450: PUSH
18451: LD_INT 17
18453: ST_TO_ADDR
// hc_gallery :=  ;
18454: LD_ADDR_OWVAR 33
18458: PUSH
18459: LD_STRING 
18461: ST_TO_ADDR
// hc_name :=  ;
18462: LD_ADDR_OWVAR 26
18466: PUSH
18467: LD_STRING 
18469: ST_TO_ADDR
// un := CreateHuman ;
18470: LD_ADDR_VAR 0 2
18474: PUSH
18475: CALL_OW 44
18479: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18480: LD_VAR 0 2
18484: PPUSH
18485: LD_INT 1
18487: PPUSH
18488: CALL_OW 51
// tmp := tmp ^ un ;
18492: LD_ADDR_VAR 0 3
18496: PUSH
18497: LD_VAR 0 3
18501: PUSH
18502: LD_VAR 0 2
18506: ADD
18507: ST_TO_ADDR
// end ;
18508: GO 18404
18510: POP
18511: POP
// repeat wait ( 0 0$1 ) ;
18512: LD_INT 35
18514: PPUSH
18515: CALL_OW 67
// for un in tmp do
18519: LD_ADDR_VAR 0 2
18523: PUSH
18524: LD_VAR 0 3
18528: PUSH
18529: FOR_IN
18530: IFFALSE 18604
// begin if IsDead ( un ) then
18532: LD_VAR 0 2
18536: PPUSH
18537: CALL_OW 301
18541: IFFALSE 18561
// begin tmp := tmp diff un ;
18543: LD_ADDR_VAR 0 3
18547: PUSH
18548: LD_VAR 0 3
18552: PUSH
18553: LD_VAR 0 2
18557: DIFF
18558: ST_TO_ADDR
// continue ;
18559: GO 18529
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18561: LD_VAR 0 2
18565: PPUSH
18566: LD_INT 3
18568: PUSH
18569: LD_INT 22
18571: PUSH
18572: LD_INT 0
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PPUSH
18583: CALL_OW 69
18587: PPUSH
18588: LD_VAR 0 2
18592: PPUSH
18593: CALL_OW 74
18597: PPUSH
18598: CALL_OW 115
// end ;
18602: GO 18529
18604: POP
18605: POP
// until not tmp ;
18606: LD_VAR 0 3
18610: NOT
18611: IFFALSE 18512
// end ;
18613: PPOPN 3
18615: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18616: LD_EXP 38
18620: PUSH
18621: LD_EXP 63
18625: AND
18626: IFFALSE 18680
18628: GO 18630
18630: DISABLE
// begin ToLua ( displayTroll(); ) ;
18631: LD_STRING displayTroll();
18633: PPUSH
18634: CALL_OW 559
// wait ( 3 3$00 ) ;
18638: LD_INT 6300
18640: PPUSH
18641: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18645: LD_STRING hideTroll();
18647: PPUSH
18648: CALL_OW 559
// wait ( 1 1$00 ) ;
18652: LD_INT 2100
18654: PPUSH
18655: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18659: LD_STRING displayTroll();
18661: PPUSH
18662: CALL_OW 559
// wait ( 1 1$00 ) ;
18666: LD_INT 2100
18668: PPUSH
18669: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18673: LD_STRING hideTroll();
18675: PPUSH
18676: CALL_OW 559
// end ;
18680: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18681: LD_EXP 38
18685: PUSH
18686: LD_EXP 64
18690: AND
18691: IFFALSE 18754
18693: GO 18695
18695: DISABLE
18696: LD_INT 0
18698: PPUSH
// begin p := 0 ;
18699: LD_ADDR_VAR 0 1
18703: PUSH
18704: LD_INT 0
18706: ST_TO_ADDR
// repeat game_speed := 1 ;
18707: LD_ADDR_OWVAR 65
18711: PUSH
18712: LD_INT 1
18714: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18715: LD_INT 35
18717: PPUSH
18718: CALL_OW 67
// p := p + 1 ;
18722: LD_ADDR_VAR 0 1
18726: PUSH
18727: LD_VAR 0 1
18731: PUSH
18732: LD_INT 1
18734: PLUS
18735: ST_TO_ADDR
// until p >= 60 ;
18736: LD_VAR 0 1
18740: PUSH
18741: LD_INT 60
18743: GREATEREQUAL
18744: IFFALSE 18707
// game_speed := 4 ;
18746: LD_ADDR_OWVAR 65
18750: PUSH
18751: LD_INT 4
18753: ST_TO_ADDR
// end ;
18754: PPOPN 1
18756: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18757: LD_EXP 38
18761: PUSH
18762: LD_EXP 65
18766: AND
18767: IFFALSE 18913
18769: GO 18771
18771: DISABLE
18772: LD_INT 0
18774: PPUSH
18775: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: LD_INT 22
18783: PUSH
18784: LD_OWVAR 2
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 30
18798: PUSH
18799: LD_INT 0
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 30
18808: PUSH
18809: LD_INT 1
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PPUSH
18825: CALL_OW 69
18829: ST_TO_ADDR
// if not depot then
18830: LD_VAR 0 1
18834: NOT
18835: IFFALSE 18839
// exit ;
18837: GO 18913
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18839: LD_ADDR_VAR 0 2
18843: PUSH
18844: LD_VAR 0 1
18848: PUSH
18849: LD_INT 1
18851: PPUSH
18852: LD_VAR 0 1
18856: PPUSH
18857: CALL_OW 12
18861: ARRAY
18862: PPUSH
18863: CALL_OW 274
18867: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18868: LD_VAR 0 2
18872: PPUSH
18873: LD_INT 1
18875: PPUSH
18876: LD_INT 0
18878: PPUSH
18879: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18883: LD_VAR 0 2
18887: PPUSH
18888: LD_INT 2
18890: PPUSH
18891: LD_INT 0
18893: PPUSH
18894: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18898: LD_VAR 0 2
18902: PPUSH
18903: LD_INT 3
18905: PPUSH
18906: LD_INT 0
18908: PPUSH
18909: CALL_OW 277
// end ;
18913: PPOPN 2
18915: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18916: LD_EXP 38
18920: PUSH
18921: LD_EXP 66
18925: AND
18926: IFFALSE 19023
18928: GO 18930
18930: DISABLE
18931: LD_INT 0
18933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18934: LD_ADDR_VAR 0 1
18938: PUSH
18939: LD_INT 22
18941: PUSH
18942: LD_OWVAR 2
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 21
18953: PUSH
18954: LD_INT 1
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 3
18963: PUSH
18964: LD_INT 23
18966: PUSH
18967: LD_INT 0
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: PPUSH
18983: CALL_OW 69
18987: ST_TO_ADDR
// if not tmp then
18988: LD_VAR 0 1
18992: NOT
18993: IFFALSE 18997
// exit ;
18995: GO 19023
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18997: LD_VAR 0 1
19001: PUSH
19002: LD_INT 1
19004: PPUSH
19005: LD_VAR 0 1
19009: PPUSH
19010: CALL_OW 12
19014: ARRAY
19015: PPUSH
19016: LD_INT 200
19018: PPUSH
19019: CALL_OW 234
// end ;
19023: PPOPN 1
19025: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19026: LD_EXP 38
19030: PUSH
19031: LD_EXP 67
19035: AND
19036: IFFALSE 19115
19038: GO 19040
19040: DISABLE
19041: LD_INT 0
19043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19044: LD_ADDR_VAR 0 1
19048: PUSH
19049: LD_INT 22
19051: PUSH
19052: LD_OWVAR 2
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 21
19063: PUSH
19064: LD_INT 2
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PPUSH
19075: CALL_OW 69
19079: ST_TO_ADDR
// if not tmp then
19080: LD_VAR 0 1
19084: NOT
19085: IFFALSE 19089
// exit ;
19087: GO 19115
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19089: LD_VAR 0 1
19093: PUSH
19094: LD_INT 1
19096: PPUSH
19097: LD_VAR 0 1
19101: PPUSH
19102: CALL_OW 12
19106: ARRAY
19107: PPUSH
19108: LD_INT 60
19110: PPUSH
19111: CALL_OW 234
// end ;
19115: PPOPN 1
19117: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19118: LD_EXP 38
19122: PUSH
19123: LD_EXP 68
19127: AND
19128: IFFALSE 19227
19130: GO 19132
19132: DISABLE
19133: LD_INT 0
19135: PPUSH
19136: PPUSH
// begin enable ;
19137: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19138: LD_ADDR_VAR 0 1
19142: PUSH
19143: LD_INT 22
19145: PUSH
19146: LD_OWVAR 2
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 61
19157: PUSH
19158: EMPTY
19159: LIST
19160: PUSH
19161: LD_INT 33
19163: PUSH
19164: LD_INT 2
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: LIST
19175: PPUSH
19176: CALL_OW 69
19180: ST_TO_ADDR
// if not tmp then
19181: LD_VAR 0 1
19185: NOT
19186: IFFALSE 19190
// exit ;
19188: GO 19227
// for i in tmp do
19190: LD_ADDR_VAR 0 2
19194: PUSH
19195: LD_VAR 0 1
19199: PUSH
19200: FOR_IN
19201: IFFALSE 19225
// if IsControledBy ( i ) then
19203: LD_VAR 0 2
19207: PPUSH
19208: CALL_OW 312
19212: IFFALSE 19223
// ComUnlink ( i ) ;
19214: LD_VAR 0 2
19218: PPUSH
19219: CALL_OW 136
19223: GO 19200
19225: POP
19226: POP
// end ;
19227: PPOPN 2
19229: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19230: LD_EXP 38
19234: PUSH
19235: LD_EXP 69
19239: AND
19240: IFFALSE 19380
19242: GO 19244
19244: DISABLE
19245: LD_INT 0
19247: PPUSH
19248: PPUSH
// begin ToLua ( displayPowell(); ) ;
19249: LD_STRING displayPowell();
19251: PPUSH
19252: CALL_OW 559
// uc_side := 0 ;
19256: LD_ADDR_OWVAR 20
19260: PUSH
19261: LD_INT 0
19263: ST_TO_ADDR
// uc_nation := 2 ;
19264: LD_ADDR_OWVAR 21
19268: PUSH
19269: LD_INT 2
19271: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19272: LD_ADDR_OWVAR 37
19276: PUSH
19277: LD_INT 14
19279: ST_TO_ADDR
// vc_engine := engine_siberite ;
19280: LD_ADDR_OWVAR 39
19284: PUSH
19285: LD_INT 3
19287: ST_TO_ADDR
// vc_control := control_apeman ;
19288: LD_ADDR_OWVAR 38
19292: PUSH
19293: LD_INT 5
19295: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19296: LD_ADDR_OWVAR 40
19300: PUSH
19301: LD_INT 29
19303: ST_TO_ADDR
// un := CreateVehicle ;
19304: LD_ADDR_VAR 0 2
19308: PUSH
19309: CALL_OW 45
19313: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19314: LD_VAR 0 2
19318: PPUSH
19319: LD_INT 1
19321: PPUSH
19322: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19326: LD_INT 35
19328: PPUSH
19329: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19333: LD_VAR 0 2
19337: PPUSH
19338: LD_INT 22
19340: PUSH
19341: LD_OWVAR 2
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PPUSH
19350: CALL_OW 69
19354: PPUSH
19355: LD_VAR 0 2
19359: PPUSH
19360: CALL_OW 74
19364: PPUSH
19365: CALL_OW 115
// until IsDead ( un ) ;
19369: LD_VAR 0 2
19373: PPUSH
19374: CALL_OW 301
19378: IFFALSE 19326
// end ;
19380: PPOPN 2
19382: END
// every 0 0$1 trigger StreamModeActive and sStu do
19383: LD_EXP 38
19387: PUSH
19388: LD_EXP 77
19392: AND
19393: IFFALSE 19409
19395: GO 19397
19397: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19398: LD_STRING displayStucuk();
19400: PPUSH
19401: CALL_OW 559
// ResetFog ;
19405: CALL_OW 335
// end ;
19409: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19410: LD_EXP 38
19414: PUSH
19415: LD_EXP 70
19419: AND
19420: IFFALSE 19561
19422: GO 19424
19424: DISABLE
19425: LD_INT 0
19427: PPUSH
19428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19429: LD_ADDR_VAR 0 2
19433: PUSH
19434: LD_INT 22
19436: PUSH
19437: LD_OWVAR 2
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 21
19448: PUSH
19449: LD_INT 1
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PPUSH
19460: CALL_OW 69
19464: ST_TO_ADDR
// if not tmp then
19465: LD_VAR 0 2
19469: NOT
19470: IFFALSE 19474
// exit ;
19472: GO 19561
// un := tmp [ rand ( 1 , tmp ) ] ;
19474: LD_ADDR_VAR 0 1
19478: PUSH
19479: LD_VAR 0 2
19483: PUSH
19484: LD_INT 1
19486: PPUSH
19487: LD_VAR 0 2
19491: PPUSH
19492: CALL_OW 12
19496: ARRAY
19497: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19498: LD_VAR 0 1
19502: PPUSH
19503: LD_INT 0
19505: PPUSH
19506: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19510: LD_VAR 0 1
19514: PPUSH
19515: LD_OWVAR 3
19519: PUSH
19520: LD_VAR 0 1
19524: DIFF
19525: PPUSH
19526: LD_VAR 0 1
19530: PPUSH
19531: CALL_OW 74
19535: PPUSH
19536: CALL_OW 115
// wait ( 0 0$20 ) ;
19540: LD_INT 700
19542: PPUSH
19543: CALL_OW 67
// SetSide ( un , your_side ) ;
19547: LD_VAR 0 1
19551: PPUSH
19552: LD_OWVAR 2
19556: PPUSH
19557: CALL_OW 235
// end ;
19561: PPOPN 2
19563: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19564: LD_EXP 38
19568: PUSH
19569: LD_EXP 71
19573: AND
19574: IFFALSE 19680
19576: GO 19578
19578: DISABLE
19579: LD_INT 0
19581: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19582: LD_ADDR_VAR 0 1
19586: PUSH
19587: LD_INT 22
19589: PUSH
19590: LD_OWVAR 2
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 2
19601: PUSH
19602: LD_INT 30
19604: PUSH
19605: LD_INT 0
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 30
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PPUSH
19631: CALL_OW 69
19635: ST_TO_ADDR
// if not depot then
19636: LD_VAR 0 1
19640: NOT
19641: IFFALSE 19645
// exit ;
19643: GO 19680
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19645: LD_VAR 0 1
19649: PUSH
19650: LD_INT 1
19652: ARRAY
19653: PPUSH
19654: CALL_OW 250
19658: PPUSH
19659: LD_VAR 0 1
19663: PUSH
19664: LD_INT 1
19666: ARRAY
19667: PPUSH
19668: CALL_OW 251
19672: PPUSH
19673: LD_INT 70
19675: PPUSH
19676: CALL_OW 495
// end ;
19680: PPOPN 1
19682: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19683: LD_EXP 38
19687: PUSH
19688: LD_EXP 72
19692: AND
19693: IFFALSE 19904
19695: GO 19697
19697: DISABLE
19698: LD_INT 0
19700: PPUSH
19701: PPUSH
19702: PPUSH
19703: PPUSH
19704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19705: LD_ADDR_VAR 0 5
19709: PUSH
19710: LD_INT 22
19712: PUSH
19713: LD_OWVAR 2
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 21
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PPUSH
19736: CALL_OW 69
19740: ST_TO_ADDR
// if not tmp then
19741: LD_VAR 0 5
19745: NOT
19746: IFFALSE 19750
// exit ;
19748: GO 19904
// for i in tmp do
19750: LD_ADDR_VAR 0 1
19754: PUSH
19755: LD_VAR 0 5
19759: PUSH
19760: FOR_IN
19761: IFFALSE 19902
// begin d := rand ( 0 , 5 ) ;
19763: LD_ADDR_VAR 0 4
19767: PUSH
19768: LD_INT 0
19770: PPUSH
19771: LD_INT 5
19773: PPUSH
19774: CALL_OW 12
19778: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19779: LD_ADDR_VAR 0 2
19783: PUSH
19784: LD_VAR 0 1
19788: PPUSH
19789: CALL_OW 250
19793: PPUSH
19794: LD_VAR 0 4
19798: PPUSH
19799: LD_INT 3
19801: PPUSH
19802: LD_INT 12
19804: PPUSH
19805: CALL_OW 12
19809: PPUSH
19810: CALL_OW 272
19814: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19815: LD_ADDR_VAR 0 3
19819: PUSH
19820: LD_VAR 0 1
19824: PPUSH
19825: CALL_OW 251
19829: PPUSH
19830: LD_VAR 0 4
19834: PPUSH
19835: LD_INT 3
19837: PPUSH
19838: LD_INT 12
19840: PPUSH
19841: CALL_OW 12
19845: PPUSH
19846: CALL_OW 273
19850: ST_TO_ADDR
// if ValidHex ( x , y ) then
19851: LD_VAR 0 2
19855: PPUSH
19856: LD_VAR 0 3
19860: PPUSH
19861: CALL_OW 488
19865: IFFALSE 19900
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19867: LD_VAR 0 1
19871: PPUSH
19872: LD_VAR 0 2
19876: PPUSH
19877: LD_VAR 0 3
19881: PPUSH
19882: LD_INT 3
19884: PPUSH
19885: LD_INT 6
19887: PPUSH
19888: CALL_OW 12
19892: PPUSH
19893: LD_INT 1
19895: PPUSH
19896: CALL_OW 483
// end ;
19900: GO 19760
19902: POP
19903: POP
// end ;
19904: PPOPN 5
19906: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19907: LD_EXP 38
19911: PUSH
19912: LD_EXP 73
19916: AND
19917: IFFALSE 20011
19919: GO 19921
19921: DISABLE
19922: LD_INT 0
19924: PPUSH
19925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19926: LD_ADDR_VAR 0 2
19930: PUSH
19931: LD_INT 22
19933: PUSH
19934: LD_OWVAR 2
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 32
19945: PUSH
19946: LD_INT 1
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 21
19955: PUSH
19956: LD_INT 2
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: LIST
19967: PPUSH
19968: CALL_OW 69
19972: ST_TO_ADDR
// if not tmp then
19973: LD_VAR 0 2
19977: NOT
19978: IFFALSE 19982
// exit ;
19980: GO 20011
// for i in tmp do
19982: LD_ADDR_VAR 0 1
19986: PUSH
19987: LD_VAR 0 2
19991: PUSH
19992: FOR_IN
19993: IFFALSE 20009
// SetFuel ( i , 0 ) ;
19995: LD_VAR 0 1
19999: PPUSH
20000: LD_INT 0
20002: PPUSH
20003: CALL_OW 240
20007: GO 19992
20009: POP
20010: POP
// end ;
20011: PPOPN 2
20013: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20014: LD_EXP 38
20018: PUSH
20019: LD_EXP 74
20023: AND
20024: IFFALSE 20090
20026: GO 20028
20028: DISABLE
20029: LD_INT 0
20031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20032: LD_ADDR_VAR 0 1
20036: PUSH
20037: LD_INT 22
20039: PUSH
20040: LD_OWVAR 2
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 30
20051: PUSH
20052: LD_INT 29
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PPUSH
20063: CALL_OW 69
20067: ST_TO_ADDR
// if not tmp then
20068: LD_VAR 0 1
20072: NOT
20073: IFFALSE 20077
// exit ;
20075: GO 20090
// DestroyUnit ( tmp [ 1 ] ) ;
20077: LD_VAR 0 1
20081: PUSH
20082: LD_INT 1
20084: ARRAY
20085: PPUSH
20086: CALL_OW 65
// end ;
20090: PPOPN 1
20092: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20093: LD_EXP 38
20097: PUSH
20098: LD_EXP 76
20102: AND
20103: IFFALSE 20232
20105: GO 20107
20107: DISABLE
20108: LD_INT 0
20110: PPUSH
// begin uc_side := 0 ;
20111: LD_ADDR_OWVAR 20
20115: PUSH
20116: LD_INT 0
20118: ST_TO_ADDR
// uc_nation := nation_arabian ;
20119: LD_ADDR_OWVAR 21
20123: PUSH
20124: LD_INT 2
20126: ST_TO_ADDR
// hc_gallery :=  ;
20127: LD_ADDR_OWVAR 33
20131: PUSH
20132: LD_STRING 
20134: ST_TO_ADDR
// hc_name :=  ;
20135: LD_ADDR_OWVAR 26
20139: PUSH
20140: LD_STRING 
20142: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20143: LD_INT 1
20145: PPUSH
20146: LD_INT 11
20148: PPUSH
20149: LD_INT 10
20151: PPUSH
20152: CALL_OW 380
// un := CreateHuman ;
20156: LD_ADDR_VAR 0 1
20160: PUSH
20161: CALL_OW 44
20165: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20166: LD_VAR 0 1
20170: PPUSH
20171: LD_INT 1
20173: PPUSH
20174: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20178: LD_INT 35
20180: PPUSH
20181: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20185: LD_VAR 0 1
20189: PPUSH
20190: LD_INT 22
20192: PUSH
20193: LD_OWVAR 2
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PPUSH
20202: CALL_OW 69
20206: PPUSH
20207: LD_VAR 0 1
20211: PPUSH
20212: CALL_OW 74
20216: PPUSH
20217: CALL_OW 115
// until IsDead ( un ) ;
20221: LD_VAR 0 1
20225: PPUSH
20226: CALL_OW 301
20230: IFFALSE 20178
// end ;
20232: PPOPN 1
20234: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20235: LD_EXP 38
20239: PUSH
20240: LD_EXP 78
20244: AND
20245: IFFALSE 20257
20247: GO 20249
20249: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20250: LD_STRING earthquake(getX(game), 0, 32)
20252: PPUSH
20253: CALL_OW 559
20257: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20258: LD_EXP 38
20262: PUSH
20263: LD_EXP 79
20267: AND
20268: IFFALSE 20359
20270: GO 20272
20272: DISABLE
20273: LD_INT 0
20275: PPUSH
// begin enable ;
20276: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20277: LD_ADDR_VAR 0 1
20281: PUSH
20282: LD_INT 22
20284: PUSH
20285: LD_OWVAR 2
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 21
20296: PUSH
20297: LD_INT 2
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 33
20306: PUSH
20307: LD_INT 3
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: LIST
20318: PPUSH
20319: CALL_OW 69
20323: ST_TO_ADDR
// if not tmp then
20324: LD_VAR 0 1
20328: NOT
20329: IFFALSE 20333
// exit ;
20331: GO 20359
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20333: LD_VAR 0 1
20337: PUSH
20338: LD_INT 1
20340: PPUSH
20341: LD_VAR 0 1
20345: PPUSH
20346: CALL_OW 12
20350: ARRAY
20351: PPUSH
20352: LD_INT 1
20354: PPUSH
20355: CALL_OW 234
// end ;
20359: PPOPN 1
20361: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20362: LD_EXP 38
20366: PUSH
20367: LD_EXP 80
20371: AND
20372: IFFALSE 20513
20374: GO 20376
20376: DISABLE
20377: LD_INT 0
20379: PPUSH
20380: PPUSH
20381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20382: LD_ADDR_VAR 0 3
20386: PUSH
20387: LD_INT 22
20389: PUSH
20390: LD_OWVAR 2
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 25
20401: PUSH
20402: LD_INT 1
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PPUSH
20413: CALL_OW 69
20417: ST_TO_ADDR
// if not tmp then
20418: LD_VAR 0 3
20422: NOT
20423: IFFALSE 20427
// exit ;
20425: GO 20513
// un := tmp [ rand ( 1 , tmp ) ] ;
20427: LD_ADDR_VAR 0 2
20431: PUSH
20432: LD_VAR 0 3
20436: PUSH
20437: LD_INT 1
20439: PPUSH
20440: LD_VAR 0 3
20444: PPUSH
20445: CALL_OW 12
20449: ARRAY
20450: ST_TO_ADDR
// if Crawls ( un ) then
20451: LD_VAR 0 2
20455: PPUSH
20456: CALL_OW 318
20460: IFFALSE 20471
// ComWalk ( un ) ;
20462: LD_VAR 0 2
20466: PPUSH
20467: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20471: LD_VAR 0 2
20475: PPUSH
20476: LD_INT 9
20478: PPUSH
20479: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20483: LD_INT 28
20485: PPUSH
20486: LD_OWVAR 2
20490: PPUSH
20491: LD_INT 2
20493: PPUSH
20494: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20498: LD_INT 29
20500: PPUSH
20501: LD_OWVAR 2
20505: PPUSH
20506: LD_INT 2
20508: PPUSH
20509: CALL_OW 322
// end ;
20513: PPOPN 3
20515: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20516: LD_EXP 38
20520: PUSH
20521: LD_EXP 81
20525: AND
20526: IFFALSE 20637
20528: GO 20530
20530: DISABLE
20531: LD_INT 0
20533: PPUSH
20534: PPUSH
20535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20536: LD_ADDR_VAR 0 3
20540: PUSH
20541: LD_INT 22
20543: PUSH
20544: LD_OWVAR 2
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 25
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PPUSH
20567: CALL_OW 69
20571: ST_TO_ADDR
// if not tmp then
20572: LD_VAR 0 3
20576: NOT
20577: IFFALSE 20581
// exit ;
20579: GO 20637
// un := tmp [ rand ( 1 , tmp ) ] ;
20581: LD_ADDR_VAR 0 2
20585: PUSH
20586: LD_VAR 0 3
20590: PUSH
20591: LD_INT 1
20593: PPUSH
20594: LD_VAR 0 3
20598: PPUSH
20599: CALL_OW 12
20603: ARRAY
20604: ST_TO_ADDR
// if Crawls ( un ) then
20605: LD_VAR 0 2
20609: PPUSH
20610: CALL_OW 318
20614: IFFALSE 20625
// ComWalk ( un ) ;
20616: LD_VAR 0 2
20620: PPUSH
20621: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20625: LD_VAR 0 2
20629: PPUSH
20630: LD_INT 8
20632: PPUSH
20633: CALL_OW 336
// end ;
20637: PPOPN 3
20639: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20640: LD_EXP 38
20644: PUSH
20645: LD_EXP 82
20649: AND
20650: IFFALSE 20794
20652: GO 20654
20654: DISABLE
20655: LD_INT 0
20657: PPUSH
20658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20659: LD_ADDR_VAR 0 2
20663: PUSH
20664: LD_INT 22
20666: PUSH
20667: LD_OWVAR 2
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 21
20678: PUSH
20679: LD_INT 2
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: LD_INT 34
20691: PUSH
20692: LD_INT 12
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 34
20701: PUSH
20702: LD_INT 51
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 34
20711: PUSH
20712: LD_INT 32
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: LIST
20729: PPUSH
20730: CALL_OW 69
20734: ST_TO_ADDR
// if not tmp then
20735: LD_VAR 0 2
20739: NOT
20740: IFFALSE 20744
// exit ;
20742: GO 20794
// for i in tmp do
20744: LD_ADDR_VAR 0 1
20748: PUSH
20749: LD_VAR 0 2
20753: PUSH
20754: FOR_IN
20755: IFFALSE 20792
// if GetCargo ( i , mat_artifact ) = 0 then
20757: LD_VAR 0 1
20761: PPUSH
20762: LD_INT 4
20764: PPUSH
20765: CALL_OW 289
20769: PUSH
20770: LD_INT 0
20772: EQUAL
20773: IFFALSE 20790
// SetCargo ( i , mat_siberit , 100 ) ;
20775: LD_VAR 0 1
20779: PPUSH
20780: LD_INT 3
20782: PPUSH
20783: LD_INT 100
20785: PPUSH
20786: CALL_OW 290
20790: GO 20754
20792: POP
20793: POP
// end ;
20794: PPOPN 2
20796: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20797: LD_EXP 38
20801: PUSH
20802: LD_EXP 83
20806: AND
20807: IFFALSE 20990
20809: GO 20811
20811: DISABLE
20812: LD_INT 0
20814: PPUSH
20815: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20816: LD_ADDR_VAR 0 2
20820: PUSH
20821: LD_INT 22
20823: PUSH
20824: LD_OWVAR 2
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PPUSH
20833: CALL_OW 69
20837: ST_TO_ADDR
// if not tmp then
20838: LD_VAR 0 2
20842: NOT
20843: IFFALSE 20847
// exit ;
20845: GO 20990
// for i := 1 to 2 do
20847: LD_ADDR_VAR 0 1
20851: PUSH
20852: DOUBLE
20853: LD_INT 1
20855: DEC
20856: ST_TO_ADDR
20857: LD_INT 2
20859: PUSH
20860: FOR_TO
20861: IFFALSE 20988
// begin uc_side := your_side ;
20863: LD_ADDR_OWVAR 20
20867: PUSH
20868: LD_OWVAR 2
20872: ST_TO_ADDR
// uc_nation := nation_american ;
20873: LD_ADDR_OWVAR 21
20877: PUSH
20878: LD_INT 1
20880: ST_TO_ADDR
// vc_chassis := us_morphling ;
20881: LD_ADDR_OWVAR 37
20885: PUSH
20886: LD_INT 5
20888: ST_TO_ADDR
// vc_engine := engine_siberite ;
20889: LD_ADDR_OWVAR 39
20893: PUSH
20894: LD_INT 3
20896: ST_TO_ADDR
// vc_control := control_computer ;
20897: LD_ADDR_OWVAR 38
20901: PUSH
20902: LD_INT 3
20904: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20905: LD_ADDR_OWVAR 40
20909: PUSH
20910: LD_INT 10
20912: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20913: LD_VAR 0 2
20917: PUSH
20918: LD_INT 1
20920: ARRAY
20921: PPUSH
20922: CALL_OW 310
20926: NOT
20927: IFFALSE 20974
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20929: CALL_OW 45
20933: PPUSH
20934: LD_VAR 0 2
20938: PUSH
20939: LD_INT 1
20941: ARRAY
20942: PPUSH
20943: CALL_OW 250
20947: PPUSH
20948: LD_VAR 0 2
20952: PUSH
20953: LD_INT 1
20955: ARRAY
20956: PPUSH
20957: CALL_OW 251
20961: PPUSH
20962: LD_INT 12
20964: PPUSH
20965: LD_INT 1
20967: PPUSH
20968: CALL_OW 50
20972: GO 20986
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20974: CALL_OW 45
20978: PPUSH
20979: LD_INT 1
20981: PPUSH
20982: CALL_OW 51
// end ;
20986: GO 20860
20988: POP
20989: POP
// end ;
20990: PPOPN 2
20992: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20993: LD_EXP 38
20997: PUSH
20998: LD_EXP 84
21002: AND
21003: IFFALSE 21225
21005: GO 21007
21007: DISABLE
21008: LD_INT 0
21010: PPUSH
21011: PPUSH
21012: PPUSH
21013: PPUSH
21014: PPUSH
21015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21016: LD_ADDR_VAR 0 6
21020: PUSH
21021: LD_INT 22
21023: PUSH
21024: LD_OWVAR 2
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 21
21035: PUSH
21036: LD_INT 1
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 3
21045: PUSH
21046: LD_INT 23
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: LIST
21064: PPUSH
21065: CALL_OW 69
21069: ST_TO_ADDR
// if not tmp then
21070: LD_VAR 0 6
21074: NOT
21075: IFFALSE 21079
// exit ;
21077: GO 21225
// s1 := rand ( 1 , 4 ) ;
21079: LD_ADDR_VAR 0 2
21083: PUSH
21084: LD_INT 1
21086: PPUSH
21087: LD_INT 4
21089: PPUSH
21090: CALL_OW 12
21094: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21095: LD_ADDR_VAR 0 4
21099: PUSH
21100: LD_VAR 0 6
21104: PUSH
21105: LD_INT 1
21107: ARRAY
21108: PPUSH
21109: LD_VAR 0 2
21113: PPUSH
21114: CALL_OW 259
21118: ST_TO_ADDR
// if s1 = 1 then
21119: LD_VAR 0 2
21123: PUSH
21124: LD_INT 1
21126: EQUAL
21127: IFFALSE 21147
// s2 := rand ( 2 , 4 ) else
21129: LD_ADDR_VAR 0 3
21133: PUSH
21134: LD_INT 2
21136: PPUSH
21137: LD_INT 4
21139: PPUSH
21140: CALL_OW 12
21144: ST_TO_ADDR
21145: GO 21155
// s2 := 1 ;
21147: LD_ADDR_VAR 0 3
21151: PUSH
21152: LD_INT 1
21154: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21155: LD_ADDR_VAR 0 5
21159: PUSH
21160: LD_VAR 0 6
21164: PUSH
21165: LD_INT 1
21167: ARRAY
21168: PPUSH
21169: LD_VAR 0 3
21173: PPUSH
21174: CALL_OW 259
21178: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21179: LD_VAR 0 6
21183: PUSH
21184: LD_INT 1
21186: ARRAY
21187: PPUSH
21188: LD_VAR 0 2
21192: PPUSH
21193: LD_VAR 0 5
21197: PPUSH
21198: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21202: LD_VAR 0 6
21206: PUSH
21207: LD_INT 1
21209: ARRAY
21210: PPUSH
21211: LD_VAR 0 3
21215: PPUSH
21216: LD_VAR 0 4
21220: PPUSH
21221: CALL_OW 237
// end ;
21225: PPOPN 6
21227: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21228: LD_EXP 38
21232: PUSH
21233: LD_EXP 85
21237: AND
21238: IFFALSE 21317
21240: GO 21242
21242: DISABLE
21243: LD_INT 0
21245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21246: LD_ADDR_VAR 0 1
21250: PUSH
21251: LD_INT 22
21253: PUSH
21254: LD_OWVAR 2
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 30
21265: PUSH
21266: LD_INT 3
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PPUSH
21277: CALL_OW 69
21281: ST_TO_ADDR
// if not tmp then
21282: LD_VAR 0 1
21286: NOT
21287: IFFALSE 21291
// exit ;
21289: GO 21317
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21291: LD_VAR 0 1
21295: PUSH
21296: LD_INT 1
21298: PPUSH
21299: LD_VAR 0 1
21303: PPUSH
21304: CALL_OW 12
21308: ARRAY
21309: PPUSH
21310: LD_INT 1
21312: PPUSH
21313: CALL_OW 234
// end ;
21317: PPOPN 1
21319: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21320: LD_EXP 38
21324: PUSH
21325: LD_EXP 86
21329: AND
21330: IFFALSE 21442
21332: GO 21334
21334: DISABLE
21335: LD_INT 0
21337: PPUSH
21338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21339: LD_ADDR_VAR 0 2
21343: PUSH
21344: LD_INT 22
21346: PUSH
21347: LD_OWVAR 2
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 2
21358: PUSH
21359: LD_INT 30
21361: PUSH
21362: LD_INT 27
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 30
21371: PUSH
21372: LD_INT 26
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 30
21381: PUSH
21382: LD_INT 28
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PPUSH
21399: CALL_OW 69
21403: ST_TO_ADDR
// if not tmp then
21404: LD_VAR 0 2
21408: NOT
21409: IFFALSE 21413
// exit ;
21411: GO 21442
// for i in tmp do
21413: LD_ADDR_VAR 0 1
21417: PUSH
21418: LD_VAR 0 2
21422: PUSH
21423: FOR_IN
21424: IFFALSE 21440
// SetLives ( i , 1 ) ;
21426: LD_VAR 0 1
21430: PPUSH
21431: LD_INT 1
21433: PPUSH
21434: CALL_OW 234
21438: GO 21423
21440: POP
21441: POP
// end ;
21442: PPOPN 2
21444: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21445: LD_EXP 38
21449: PUSH
21450: LD_EXP 87
21454: AND
21455: IFFALSE 21742
21457: GO 21459
21459: DISABLE
21460: LD_INT 0
21462: PPUSH
21463: PPUSH
21464: PPUSH
// begin i := rand ( 1 , 7 ) ;
21465: LD_ADDR_VAR 0 1
21469: PUSH
21470: LD_INT 1
21472: PPUSH
21473: LD_INT 7
21475: PPUSH
21476: CALL_OW 12
21480: ST_TO_ADDR
// case i of 1 :
21481: LD_VAR 0 1
21485: PUSH
21486: LD_INT 1
21488: DOUBLE
21489: EQUAL
21490: IFTRUE 21494
21492: GO 21504
21494: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21495: LD_STRING earthquake(getX(game), 0, 32)
21497: PPUSH
21498: CALL_OW 559
21502: GO 21742
21504: LD_INT 2
21506: DOUBLE
21507: EQUAL
21508: IFTRUE 21512
21510: GO 21526
21512: POP
// begin ToLua ( displayStucuk(); ) ;
21513: LD_STRING displayStucuk();
21515: PPUSH
21516: CALL_OW 559
// ResetFog ;
21520: CALL_OW 335
// end ; 3 :
21524: GO 21742
21526: LD_INT 3
21528: DOUBLE
21529: EQUAL
21530: IFTRUE 21534
21532: GO 21638
21534: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21535: LD_ADDR_VAR 0 2
21539: PUSH
21540: LD_INT 22
21542: PUSH
21543: LD_OWVAR 2
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 25
21554: PUSH
21555: LD_INT 1
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PPUSH
21566: CALL_OW 69
21570: ST_TO_ADDR
// if not tmp then
21571: LD_VAR 0 2
21575: NOT
21576: IFFALSE 21580
// exit ;
21578: GO 21742
// un := tmp [ rand ( 1 , tmp ) ] ;
21580: LD_ADDR_VAR 0 3
21584: PUSH
21585: LD_VAR 0 2
21589: PUSH
21590: LD_INT 1
21592: PPUSH
21593: LD_VAR 0 2
21597: PPUSH
21598: CALL_OW 12
21602: ARRAY
21603: ST_TO_ADDR
// if Crawls ( un ) then
21604: LD_VAR 0 3
21608: PPUSH
21609: CALL_OW 318
21613: IFFALSE 21624
// ComWalk ( un ) ;
21615: LD_VAR 0 3
21619: PPUSH
21620: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21624: LD_VAR 0 3
21628: PPUSH
21629: LD_INT 8
21631: PPUSH
21632: CALL_OW 336
// end ; 4 :
21636: GO 21742
21638: LD_INT 4
21640: DOUBLE
21641: EQUAL
21642: IFTRUE 21646
21644: GO 21720
21646: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21647: LD_ADDR_VAR 0 2
21651: PUSH
21652: LD_INT 22
21654: PUSH
21655: LD_OWVAR 2
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 30
21666: PUSH
21667: LD_INT 29
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PPUSH
21678: CALL_OW 69
21682: ST_TO_ADDR
// if not tmp then
21683: LD_VAR 0 2
21687: NOT
21688: IFFALSE 21692
// exit ;
21690: GO 21742
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21692: LD_VAR 0 2
21696: PUSH
21697: LD_INT 1
21699: ARRAY
21700: PPUSH
21701: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21705: LD_VAR 0 2
21709: PUSH
21710: LD_INT 1
21712: ARRAY
21713: PPUSH
21714: CALL_OW 65
// end ; 5 .. 7 :
21718: GO 21742
21720: LD_INT 5
21722: DOUBLE
21723: GREATEREQUAL
21724: IFFALSE 21732
21726: LD_INT 7
21728: DOUBLE
21729: LESSEQUAL
21730: IFTRUE 21734
21732: GO 21741
21734: POP
// StreamSibBomb ; end ;
21735: CALL 17979 0 0
21739: GO 21742
21741: POP
// end ;
21742: PPOPN 3
21744: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21745: LD_EXP 38
21749: PUSH
21750: LD_EXP 88
21754: AND
21755: IFFALSE 21911
21757: GO 21759
21759: DISABLE
21760: LD_INT 0
21762: PPUSH
21763: PPUSH
21764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21765: LD_ADDR_VAR 0 2
21769: PUSH
21770: LD_INT 81
21772: PUSH
21773: LD_OWVAR 2
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 2
21784: PUSH
21785: LD_INT 21
21787: PUSH
21788: LD_INT 1
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 21
21797: PUSH
21798: LD_INT 2
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PPUSH
21814: CALL_OW 69
21818: ST_TO_ADDR
// if not tmp then
21819: LD_VAR 0 2
21823: NOT
21824: IFFALSE 21828
// exit ;
21826: GO 21911
// p := 0 ;
21828: LD_ADDR_VAR 0 3
21832: PUSH
21833: LD_INT 0
21835: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21836: LD_INT 35
21838: PPUSH
21839: CALL_OW 67
// p := p + 1 ;
21843: LD_ADDR_VAR 0 3
21847: PUSH
21848: LD_VAR 0 3
21852: PUSH
21853: LD_INT 1
21855: PLUS
21856: ST_TO_ADDR
// for i in tmp do
21857: LD_ADDR_VAR 0 1
21861: PUSH
21862: LD_VAR 0 2
21866: PUSH
21867: FOR_IN
21868: IFFALSE 21899
// if GetLives ( i ) < 1000 then
21870: LD_VAR 0 1
21874: PPUSH
21875: CALL_OW 256
21879: PUSH
21880: LD_INT 1000
21882: LESS
21883: IFFALSE 21897
// SetLives ( i , 1000 ) ;
21885: LD_VAR 0 1
21889: PPUSH
21890: LD_INT 1000
21892: PPUSH
21893: CALL_OW 234
21897: GO 21867
21899: POP
21900: POP
// until p > 20 ;
21901: LD_VAR 0 3
21905: PUSH
21906: LD_INT 20
21908: GREATER
21909: IFFALSE 21836
// end ;
21911: PPOPN 3
21913: END
// every 0 0$1 trigger StreamModeActive and sTime do
21914: LD_EXP 38
21918: PUSH
21919: LD_EXP 89
21923: AND
21924: IFFALSE 21959
21926: GO 21928
21928: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21929: LD_INT 28
21931: PPUSH
21932: LD_OWVAR 2
21936: PPUSH
21937: LD_INT 2
21939: PPUSH
21940: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21944: LD_INT 30
21946: PPUSH
21947: LD_OWVAR 2
21951: PPUSH
21952: LD_INT 2
21954: PPUSH
21955: CALL_OW 322
// end ;
21959: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21960: LD_EXP 38
21964: PUSH
21965: LD_EXP 90
21969: AND
21970: IFFALSE 22091
21972: GO 21974
21974: DISABLE
21975: LD_INT 0
21977: PPUSH
21978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21979: LD_ADDR_VAR 0 2
21983: PUSH
21984: LD_INT 22
21986: PUSH
21987: LD_OWVAR 2
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 21
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 3
22008: PUSH
22009: LD_INT 23
22011: PUSH
22012: LD_INT 0
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: LIST
22027: PPUSH
22028: CALL_OW 69
22032: ST_TO_ADDR
// if not tmp then
22033: LD_VAR 0 2
22037: NOT
22038: IFFALSE 22042
// exit ;
22040: GO 22091
// for i in tmp do
22042: LD_ADDR_VAR 0 1
22046: PUSH
22047: LD_VAR 0 2
22051: PUSH
22052: FOR_IN
22053: IFFALSE 22089
// begin if Crawls ( i ) then
22055: LD_VAR 0 1
22059: PPUSH
22060: CALL_OW 318
22064: IFFALSE 22075
// ComWalk ( i ) ;
22066: LD_VAR 0 1
22070: PPUSH
22071: CALL_OW 138
// SetClass ( i , 2 ) ;
22075: LD_VAR 0 1
22079: PPUSH
22080: LD_INT 2
22082: PPUSH
22083: CALL_OW 336
// end ;
22087: GO 22052
22089: POP
22090: POP
// end ;
22091: PPOPN 2
22093: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22094: LD_EXP 38
22098: PUSH
22099: LD_EXP 91
22103: AND
22104: IFFALSE 22392
22106: GO 22108
22108: DISABLE
22109: LD_INT 0
22111: PPUSH
22112: PPUSH
22113: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22114: LD_OWVAR 2
22118: PPUSH
22119: LD_INT 9
22121: PPUSH
22122: LD_INT 1
22124: PPUSH
22125: LD_INT 1
22127: PPUSH
22128: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22132: LD_INT 9
22134: PPUSH
22135: LD_OWVAR 2
22139: PPUSH
22140: CALL_OW 343
// uc_side := 9 ;
22144: LD_ADDR_OWVAR 20
22148: PUSH
22149: LD_INT 9
22151: ST_TO_ADDR
// uc_nation := 2 ;
22152: LD_ADDR_OWVAR 21
22156: PUSH
22157: LD_INT 2
22159: ST_TO_ADDR
// hc_name := Dark Warrior ;
22160: LD_ADDR_OWVAR 26
22164: PUSH
22165: LD_STRING Dark Warrior
22167: ST_TO_ADDR
// hc_gallery :=  ;
22168: LD_ADDR_OWVAR 33
22172: PUSH
22173: LD_STRING 
22175: ST_TO_ADDR
// hc_noskilllimit := true ;
22176: LD_ADDR_OWVAR 76
22180: PUSH
22181: LD_INT 1
22183: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22184: LD_ADDR_OWVAR 31
22188: PUSH
22189: LD_INT 30
22191: PUSH
22192: LD_INT 30
22194: PUSH
22195: LD_INT 30
22197: PUSH
22198: LD_INT 30
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: ST_TO_ADDR
// un := CreateHuman ;
22207: LD_ADDR_VAR 0 3
22211: PUSH
22212: CALL_OW 44
22216: ST_TO_ADDR
// hc_noskilllimit := false ;
22217: LD_ADDR_OWVAR 76
22221: PUSH
22222: LD_INT 0
22224: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22225: LD_VAR 0 3
22229: PPUSH
22230: LD_INT 1
22232: PPUSH
22233: CALL_OW 51
// ToLua ( playRanger() ) ;
22237: LD_STRING playRanger()
22239: PPUSH
22240: CALL_OW 559
// p := 0 ;
22244: LD_ADDR_VAR 0 2
22248: PUSH
22249: LD_INT 0
22251: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22252: LD_INT 35
22254: PPUSH
22255: CALL_OW 67
// p := p + 1 ;
22259: LD_ADDR_VAR 0 2
22263: PUSH
22264: LD_VAR 0 2
22268: PUSH
22269: LD_INT 1
22271: PLUS
22272: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22273: LD_VAR 0 3
22277: PPUSH
22278: CALL_OW 256
22282: PUSH
22283: LD_INT 1000
22285: LESS
22286: IFFALSE 22300
// SetLives ( un , 1000 ) ;
22288: LD_VAR 0 3
22292: PPUSH
22293: LD_INT 1000
22295: PPUSH
22296: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22300: LD_VAR 0 3
22304: PPUSH
22305: LD_INT 81
22307: PUSH
22308: LD_OWVAR 2
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 91
22319: PUSH
22320: LD_VAR 0 3
22324: PUSH
22325: LD_INT 30
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: LIST
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PPUSH
22337: CALL_OW 69
22341: PPUSH
22342: LD_VAR 0 3
22346: PPUSH
22347: CALL_OW 74
22351: PPUSH
22352: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22356: LD_VAR 0 2
22360: PUSH
22361: LD_INT 80
22363: GREATER
22364: PUSH
22365: LD_VAR 0 3
22369: PPUSH
22370: CALL_OW 301
22374: OR
22375: IFFALSE 22252
// if un then
22377: LD_VAR 0 3
22381: IFFALSE 22392
// RemoveUnit ( un ) ;
22383: LD_VAR 0 3
22387: PPUSH
22388: CALL_OW 64
// end ;
22392: PPOPN 3
22394: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22395: LD_EXP 92
22399: IFFALSE 22515
22401: GO 22403
22403: DISABLE
22404: LD_INT 0
22406: PPUSH
22407: PPUSH
22408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22409: LD_ADDR_VAR 0 2
22413: PUSH
22414: LD_INT 81
22416: PUSH
22417: LD_OWVAR 2
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 21
22428: PUSH
22429: LD_INT 1
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PPUSH
22440: CALL_OW 69
22444: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22445: LD_STRING playComputer()
22447: PPUSH
22448: CALL_OW 559
// if not tmp then
22452: LD_VAR 0 2
22456: NOT
22457: IFFALSE 22461
// exit ;
22459: GO 22515
// for i in tmp do
22461: LD_ADDR_VAR 0 1
22465: PUSH
22466: LD_VAR 0 2
22470: PUSH
22471: FOR_IN
22472: IFFALSE 22513
// for j := 1 to 4 do
22474: LD_ADDR_VAR 0 3
22478: PUSH
22479: DOUBLE
22480: LD_INT 1
22482: DEC
22483: ST_TO_ADDR
22484: LD_INT 4
22486: PUSH
22487: FOR_TO
22488: IFFALSE 22509
// SetSkill ( i , j , 10 ) ;
22490: LD_VAR 0 1
22494: PPUSH
22495: LD_VAR 0 3
22499: PPUSH
22500: LD_INT 10
22502: PPUSH
22503: CALL_OW 237
22507: GO 22487
22509: POP
22510: POP
22511: GO 22471
22513: POP
22514: POP
// end ;
22515: PPOPN 3
22517: END
// every 0 0$1 trigger s30 do var i , tmp ;
22518: LD_EXP 93
22522: IFFALSE 22591
22524: GO 22526
22526: DISABLE
22527: LD_INT 0
22529: PPUSH
22530: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22531: LD_ADDR_VAR 0 2
22535: PUSH
22536: LD_INT 22
22538: PUSH
22539: LD_OWVAR 2
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PPUSH
22548: CALL_OW 69
22552: ST_TO_ADDR
// if not tmp then
22553: LD_VAR 0 2
22557: NOT
22558: IFFALSE 22562
// exit ;
22560: GO 22591
// for i in tmp do
22562: LD_ADDR_VAR 0 1
22566: PUSH
22567: LD_VAR 0 2
22571: PUSH
22572: FOR_IN
22573: IFFALSE 22589
// SetLives ( i , 300 ) ;
22575: LD_VAR 0 1
22579: PPUSH
22580: LD_INT 300
22582: PPUSH
22583: CALL_OW 234
22587: GO 22572
22589: POP
22590: POP
// end ;
22591: PPOPN 2
22593: END
// every 0 0$1 trigger s60 do var i , tmp ;
22594: LD_EXP 94
22598: IFFALSE 22667
22600: GO 22602
22602: DISABLE
22603: LD_INT 0
22605: PPUSH
22606: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22607: LD_ADDR_VAR 0 2
22611: PUSH
22612: LD_INT 22
22614: PUSH
22615: LD_OWVAR 2
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PPUSH
22624: CALL_OW 69
22628: ST_TO_ADDR
// if not tmp then
22629: LD_VAR 0 2
22633: NOT
22634: IFFALSE 22638
// exit ;
22636: GO 22667
// for i in tmp do
22638: LD_ADDR_VAR 0 1
22642: PUSH
22643: LD_VAR 0 2
22647: PUSH
22648: FOR_IN
22649: IFFALSE 22665
// SetLives ( i , 600 ) ;
22651: LD_VAR 0 1
22655: PPUSH
22656: LD_INT 600
22658: PPUSH
22659: CALL_OW 234
22663: GO 22648
22665: POP
22666: POP
// end ;
22667: PPOPN 2
22669: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22670: LD_INT 0
22672: PPUSH
// case cmd of 301 :
22673: LD_VAR 0 1
22677: PUSH
22678: LD_INT 301
22680: DOUBLE
22681: EQUAL
22682: IFTRUE 22686
22684: GO 22718
22686: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22687: LD_VAR 0 6
22691: PPUSH
22692: LD_VAR 0 7
22696: PPUSH
22697: LD_VAR 0 8
22701: PPUSH
22702: LD_VAR 0 4
22706: PPUSH
22707: LD_VAR 0 5
22711: PPUSH
22712: CALL 23919 0 5
22716: GO 22839
22718: LD_INT 302
22720: DOUBLE
22721: EQUAL
22722: IFTRUE 22726
22724: GO 22763
22726: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22727: LD_VAR 0 6
22731: PPUSH
22732: LD_VAR 0 7
22736: PPUSH
22737: LD_VAR 0 8
22741: PPUSH
22742: LD_VAR 0 9
22746: PPUSH
22747: LD_VAR 0 4
22751: PPUSH
22752: LD_VAR 0 5
22756: PPUSH
22757: CALL 24010 0 6
22761: GO 22839
22763: LD_INT 303
22765: DOUBLE
22766: EQUAL
22767: IFTRUE 22771
22769: GO 22808
22771: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22772: LD_VAR 0 6
22776: PPUSH
22777: LD_VAR 0 7
22781: PPUSH
22782: LD_VAR 0 8
22786: PPUSH
22787: LD_VAR 0 9
22791: PPUSH
22792: LD_VAR 0 4
22796: PPUSH
22797: LD_VAR 0 5
22801: PPUSH
22802: CALL 22844 0 6
22806: GO 22839
22808: LD_INT 304
22810: DOUBLE
22811: EQUAL
22812: IFTRUE 22816
22814: GO 22838
22816: POP
// hHackTeleport ( unit , x , y ) ; end ;
22817: LD_VAR 0 2
22821: PPUSH
22822: LD_VAR 0 4
22826: PPUSH
22827: LD_VAR 0 5
22831: PPUSH
22832: CALL 24603 0 3
22836: GO 22839
22838: POP
// end ;
22839: LD_VAR 0 12
22843: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22844: LD_INT 0
22846: PPUSH
22847: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22848: LD_VAR 0 1
22852: PUSH
22853: LD_INT 1
22855: LESS
22856: PUSH
22857: LD_VAR 0 1
22861: PUSH
22862: LD_INT 3
22864: GREATER
22865: OR
22866: PUSH
22867: LD_VAR 0 5
22871: PPUSH
22872: LD_VAR 0 6
22876: PPUSH
22877: CALL_OW 428
22881: OR
22882: IFFALSE 22886
// exit ;
22884: GO 23606
// uc_side := your_side ;
22886: LD_ADDR_OWVAR 20
22890: PUSH
22891: LD_OWVAR 2
22895: ST_TO_ADDR
// uc_nation := nation ;
22896: LD_ADDR_OWVAR 21
22900: PUSH
22901: LD_VAR 0 1
22905: ST_TO_ADDR
// bc_level = 1 ;
22906: LD_ADDR_OWVAR 43
22910: PUSH
22911: LD_INT 1
22913: ST_TO_ADDR
// case btype of 1 :
22914: LD_VAR 0 2
22918: PUSH
22919: LD_INT 1
22921: DOUBLE
22922: EQUAL
22923: IFTRUE 22927
22925: GO 22938
22927: POP
// bc_type := b_depot ; 2 :
22928: LD_ADDR_OWVAR 42
22932: PUSH
22933: LD_INT 0
22935: ST_TO_ADDR
22936: GO 23550
22938: LD_INT 2
22940: DOUBLE
22941: EQUAL
22942: IFTRUE 22946
22944: GO 22957
22946: POP
// bc_type := b_warehouse ; 3 :
22947: LD_ADDR_OWVAR 42
22951: PUSH
22952: LD_INT 1
22954: ST_TO_ADDR
22955: GO 23550
22957: LD_INT 3
22959: DOUBLE
22960: EQUAL
22961: IFTRUE 22965
22963: GO 22976
22965: POP
// bc_type := b_lab ; 4 .. 9 :
22966: LD_ADDR_OWVAR 42
22970: PUSH
22971: LD_INT 6
22973: ST_TO_ADDR
22974: GO 23550
22976: LD_INT 4
22978: DOUBLE
22979: GREATEREQUAL
22980: IFFALSE 22988
22982: LD_INT 9
22984: DOUBLE
22985: LESSEQUAL
22986: IFTRUE 22990
22988: GO 23042
22990: POP
// begin bc_type := b_lab_half ;
22991: LD_ADDR_OWVAR 42
22995: PUSH
22996: LD_INT 7
22998: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22999: LD_ADDR_OWVAR 44
23003: PUSH
23004: LD_INT 10
23006: PUSH
23007: LD_INT 11
23009: PUSH
23010: LD_INT 12
23012: PUSH
23013: LD_INT 15
23015: PUSH
23016: LD_INT 14
23018: PUSH
23019: LD_INT 13
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: PUSH
23030: LD_VAR 0 2
23034: PUSH
23035: LD_INT 3
23037: MINUS
23038: ARRAY
23039: ST_TO_ADDR
// end ; 10 .. 13 :
23040: GO 23550
23042: LD_INT 10
23044: DOUBLE
23045: GREATEREQUAL
23046: IFFALSE 23054
23048: LD_INT 13
23050: DOUBLE
23051: LESSEQUAL
23052: IFTRUE 23056
23054: GO 23133
23056: POP
// begin bc_type := b_lab_full ;
23057: LD_ADDR_OWVAR 42
23061: PUSH
23062: LD_INT 8
23064: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23065: LD_ADDR_OWVAR 44
23069: PUSH
23070: LD_INT 10
23072: PUSH
23073: LD_INT 12
23075: PUSH
23076: LD_INT 14
23078: PUSH
23079: LD_INT 13
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: PUSH
23088: LD_VAR 0 2
23092: PUSH
23093: LD_INT 9
23095: MINUS
23096: ARRAY
23097: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23098: LD_ADDR_OWVAR 45
23102: PUSH
23103: LD_INT 11
23105: PUSH
23106: LD_INT 15
23108: PUSH
23109: LD_INT 12
23111: PUSH
23112: LD_INT 15
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: PUSH
23121: LD_VAR 0 2
23125: PUSH
23126: LD_INT 9
23128: MINUS
23129: ARRAY
23130: ST_TO_ADDR
// end ; 14 :
23131: GO 23550
23133: LD_INT 14
23135: DOUBLE
23136: EQUAL
23137: IFTRUE 23141
23139: GO 23152
23141: POP
// bc_type := b_workshop ; 15 :
23142: LD_ADDR_OWVAR 42
23146: PUSH
23147: LD_INT 2
23149: ST_TO_ADDR
23150: GO 23550
23152: LD_INT 15
23154: DOUBLE
23155: EQUAL
23156: IFTRUE 23160
23158: GO 23171
23160: POP
// bc_type := b_factory ; 16 :
23161: LD_ADDR_OWVAR 42
23165: PUSH
23166: LD_INT 3
23168: ST_TO_ADDR
23169: GO 23550
23171: LD_INT 16
23173: DOUBLE
23174: EQUAL
23175: IFTRUE 23179
23177: GO 23190
23179: POP
// bc_type := b_ext_gun ; 17 :
23180: LD_ADDR_OWVAR 42
23184: PUSH
23185: LD_INT 17
23187: ST_TO_ADDR
23188: GO 23550
23190: LD_INT 17
23192: DOUBLE
23193: EQUAL
23194: IFTRUE 23198
23196: GO 23226
23198: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23199: LD_ADDR_OWVAR 42
23203: PUSH
23204: LD_INT 19
23206: PUSH
23207: LD_INT 23
23209: PUSH
23210: LD_INT 19
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: LIST
23217: PUSH
23218: LD_VAR 0 1
23222: ARRAY
23223: ST_TO_ADDR
23224: GO 23550
23226: LD_INT 18
23228: DOUBLE
23229: EQUAL
23230: IFTRUE 23234
23232: GO 23245
23234: POP
// bc_type := b_ext_radar ; 19 :
23235: LD_ADDR_OWVAR 42
23239: PUSH
23240: LD_INT 20
23242: ST_TO_ADDR
23243: GO 23550
23245: LD_INT 19
23247: DOUBLE
23248: EQUAL
23249: IFTRUE 23253
23251: GO 23264
23253: POP
// bc_type := b_ext_radio ; 20 :
23254: LD_ADDR_OWVAR 42
23258: PUSH
23259: LD_INT 22
23261: ST_TO_ADDR
23262: GO 23550
23264: LD_INT 20
23266: DOUBLE
23267: EQUAL
23268: IFTRUE 23272
23270: GO 23283
23272: POP
// bc_type := b_ext_siberium ; 21 :
23273: LD_ADDR_OWVAR 42
23277: PUSH
23278: LD_INT 21
23280: ST_TO_ADDR
23281: GO 23550
23283: LD_INT 21
23285: DOUBLE
23286: EQUAL
23287: IFTRUE 23291
23289: GO 23302
23291: POP
// bc_type := b_ext_computer ; 22 :
23292: LD_ADDR_OWVAR 42
23296: PUSH
23297: LD_INT 24
23299: ST_TO_ADDR
23300: GO 23550
23302: LD_INT 22
23304: DOUBLE
23305: EQUAL
23306: IFTRUE 23310
23308: GO 23321
23310: POP
// bc_type := b_ext_track ; 23 :
23311: LD_ADDR_OWVAR 42
23315: PUSH
23316: LD_INT 16
23318: ST_TO_ADDR
23319: GO 23550
23321: LD_INT 23
23323: DOUBLE
23324: EQUAL
23325: IFTRUE 23329
23327: GO 23340
23329: POP
// bc_type := b_ext_laser ; 24 :
23330: LD_ADDR_OWVAR 42
23334: PUSH
23335: LD_INT 25
23337: ST_TO_ADDR
23338: GO 23550
23340: LD_INT 24
23342: DOUBLE
23343: EQUAL
23344: IFTRUE 23348
23346: GO 23359
23348: POP
// bc_type := b_control_tower ; 25 :
23349: LD_ADDR_OWVAR 42
23353: PUSH
23354: LD_INT 36
23356: ST_TO_ADDR
23357: GO 23550
23359: LD_INT 25
23361: DOUBLE
23362: EQUAL
23363: IFTRUE 23367
23365: GO 23378
23367: POP
// bc_type := b_breastwork ; 26 :
23368: LD_ADDR_OWVAR 42
23372: PUSH
23373: LD_INT 31
23375: ST_TO_ADDR
23376: GO 23550
23378: LD_INT 26
23380: DOUBLE
23381: EQUAL
23382: IFTRUE 23386
23384: GO 23397
23386: POP
// bc_type := b_bunker ; 27 :
23387: LD_ADDR_OWVAR 42
23391: PUSH
23392: LD_INT 32
23394: ST_TO_ADDR
23395: GO 23550
23397: LD_INT 27
23399: DOUBLE
23400: EQUAL
23401: IFTRUE 23405
23403: GO 23416
23405: POP
// bc_type := b_turret ; 28 :
23406: LD_ADDR_OWVAR 42
23410: PUSH
23411: LD_INT 33
23413: ST_TO_ADDR
23414: GO 23550
23416: LD_INT 28
23418: DOUBLE
23419: EQUAL
23420: IFTRUE 23424
23422: GO 23435
23424: POP
// bc_type := b_armoury ; 29 :
23425: LD_ADDR_OWVAR 42
23429: PUSH
23430: LD_INT 4
23432: ST_TO_ADDR
23433: GO 23550
23435: LD_INT 29
23437: DOUBLE
23438: EQUAL
23439: IFTRUE 23443
23441: GO 23454
23443: POP
// bc_type := b_barracks ; 30 :
23444: LD_ADDR_OWVAR 42
23448: PUSH
23449: LD_INT 5
23451: ST_TO_ADDR
23452: GO 23550
23454: LD_INT 30
23456: DOUBLE
23457: EQUAL
23458: IFTRUE 23462
23460: GO 23473
23462: POP
// bc_type := b_solar_power ; 31 :
23463: LD_ADDR_OWVAR 42
23467: PUSH
23468: LD_INT 27
23470: ST_TO_ADDR
23471: GO 23550
23473: LD_INT 31
23475: DOUBLE
23476: EQUAL
23477: IFTRUE 23481
23479: GO 23492
23481: POP
// bc_type := b_oil_power ; 32 :
23482: LD_ADDR_OWVAR 42
23486: PUSH
23487: LD_INT 26
23489: ST_TO_ADDR
23490: GO 23550
23492: LD_INT 32
23494: DOUBLE
23495: EQUAL
23496: IFTRUE 23500
23498: GO 23511
23500: POP
// bc_type := b_siberite_power ; 33 :
23501: LD_ADDR_OWVAR 42
23505: PUSH
23506: LD_INT 28
23508: ST_TO_ADDR
23509: GO 23550
23511: LD_INT 33
23513: DOUBLE
23514: EQUAL
23515: IFTRUE 23519
23517: GO 23530
23519: POP
// bc_type := b_oil_mine ; 34 :
23520: LD_ADDR_OWVAR 42
23524: PUSH
23525: LD_INT 29
23527: ST_TO_ADDR
23528: GO 23550
23530: LD_INT 34
23532: DOUBLE
23533: EQUAL
23534: IFTRUE 23538
23536: GO 23549
23538: POP
// bc_type := b_siberite_mine ; end ;
23539: LD_ADDR_OWVAR 42
23543: PUSH
23544: LD_INT 30
23546: ST_TO_ADDR
23547: GO 23550
23549: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23550: LD_ADDR_VAR 0 8
23554: PUSH
23555: LD_VAR 0 5
23559: PPUSH
23560: LD_VAR 0 6
23564: PPUSH
23565: LD_VAR 0 3
23569: PPUSH
23570: CALL_OW 47
23574: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23575: LD_OWVAR 42
23579: PUSH
23580: LD_INT 32
23582: PUSH
23583: LD_INT 33
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: IN
23590: IFFALSE 23606
// PlaceWeaponTurret ( b , weapon ) ;
23592: LD_VAR 0 8
23596: PPUSH
23597: LD_VAR 0 4
23601: PPUSH
23602: CALL_OW 431
// end ;
23606: LD_VAR 0 7
23610: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23611: LD_INT 0
23613: PPUSH
23614: PPUSH
23615: PPUSH
23616: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23617: LD_ADDR_VAR 0 4
23621: PUSH
23622: LD_INT 22
23624: PUSH
23625: LD_OWVAR 2
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 2
23636: PUSH
23637: LD_INT 30
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 30
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: LIST
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PPUSH
23666: CALL_OW 69
23670: ST_TO_ADDR
// if not tmp then
23671: LD_VAR 0 4
23675: NOT
23676: IFFALSE 23680
// exit ;
23678: GO 23739
// for i in tmp do
23680: LD_ADDR_VAR 0 2
23684: PUSH
23685: LD_VAR 0 4
23689: PUSH
23690: FOR_IN
23691: IFFALSE 23737
// for j = 1 to 3 do
23693: LD_ADDR_VAR 0 3
23697: PUSH
23698: DOUBLE
23699: LD_INT 1
23701: DEC
23702: ST_TO_ADDR
23703: LD_INT 3
23705: PUSH
23706: FOR_TO
23707: IFFALSE 23733
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23709: LD_VAR 0 2
23713: PPUSH
23714: CALL_OW 274
23718: PPUSH
23719: LD_VAR 0 3
23723: PPUSH
23724: LD_INT 99999
23726: PPUSH
23727: CALL_OW 277
23731: GO 23706
23733: POP
23734: POP
23735: GO 23690
23737: POP
23738: POP
// end ;
23739: LD_VAR 0 1
23743: RET
// export function hHackSetLevel10 ; var i , j ; begin
23744: LD_INT 0
23746: PPUSH
23747: PPUSH
23748: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23749: LD_ADDR_VAR 0 2
23753: PUSH
23754: LD_INT 21
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PPUSH
23764: CALL_OW 69
23768: PUSH
23769: FOR_IN
23770: IFFALSE 23822
// if IsSelected ( i ) then
23772: LD_VAR 0 2
23776: PPUSH
23777: CALL_OW 306
23781: IFFALSE 23820
// begin for j := 1 to 4 do
23783: LD_ADDR_VAR 0 3
23787: PUSH
23788: DOUBLE
23789: LD_INT 1
23791: DEC
23792: ST_TO_ADDR
23793: LD_INT 4
23795: PUSH
23796: FOR_TO
23797: IFFALSE 23818
// SetSkill ( i , j , 10 ) ;
23799: LD_VAR 0 2
23803: PPUSH
23804: LD_VAR 0 3
23808: PPUSH
23809: LD_INT 10
23811: PPUSH
23812: CALL_OW 237
23816: GO 23796
23818: POP
23819: POP
// end ;
23820: GO 23769
23822: POP
23823: POP
// end ;
23824: LD_VAR 0 1
23828: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23829: LD_INT 0
23831: PPUSH
23832: PPUSH
23833: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23834: LD_ADDR_VAR 0 2
23838: PUSH
23839: LD_INT 22
23841: PUSH
23842: LD_OWVAR 2
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 21
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PPUSH
23865: CALL_OW 69
23869: PUSH
23870: FOR_IN
23871: IFFALSE 23912
// begin for j := 1 to 4 do
23873: LD_ADDR_VAR 0 3
23877: PUSH
23878: DOUBLE
23879: LD_INT 1
23881: DEC
23882: ST_TO_ADDR
23883: LD_INT 4
23885: PUSH
23886: FOR_TO
23887: IFFALSE 23908
// SetSkill ( i , j , 10 ) ;
23889: LD_VAR 0 2
23893: PPUSH
23894: LD_VAR 0 3
23898: PPUSH
23899: LD_INT 10
23901: PPUSH
23902: CALL_OW 237
23906: GO 23886
23908: POP
23909: POP
// end ;
23910: GO 23870
23912: POP
23913: POP
// end ;
23914: LD_VAR 0 1
23918: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23919: LD_INT 0
23921: PPUSH
// uc_side := your_side ;
23922: LD_ADDR_OWVAR 20
23926: PUSH
23927: LD_OWVAR 2
23931: ST_TO_ADDR
// uc_nation := nation ;
23932: LD_ADDR_OWVAR 21
23936: PUSH
23937: LD_VAR 0 1
23941: ST_TO_ADDR
// InitHc ;
23942: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23946: LD_INT 0
23948: PPUSH
23949: LD_VAR 0 2
23953: PPUSH
23954: LD_VAR 0 3
23958: PPUSH
23959: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23963: LD_VAR 0 4
23967: PPUSH
23968: LD_VAR 0 5
23972: PPUSH
23973: CALL_OW 428
23977: PUSH
23978: LD_INT 0
23980: EQUAL
23981: IFFALSE 24005
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23983: CALL_OW 44
23987: PPUSH
23988: LD_VAR 0 4
23992: PPUSH
23993: LD_VAR 0 5
23997: PPUSH
23998: LD_INT 1
24000: PPUSH
24001: CALL_OW 48
// end ;
24005: LD_VAR 0 6
24009: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24010: LD_INT 0
24012: PPUSH
24013: PPUSH
// uc_side := your_side ;
24014: LD_ADDR_OWVAR 20
24018: PUSH
24019: LD_OWVAR 2
24023: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24024: LD_VAR 0 1
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: LD_INT 2
24034: PUSH
24035: LD_INT 3
24037: PUSH
24038: LD_INT 4
24040: PUSH
24041: LD_INT 5
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: IN
24051: IFFALSE 24063
// uc_nation := nation_american else
24053: LD_ADDR_OWVAR 21
24057: PUSH
24058: LD_INT 1
24060: ST_TO_ADDR
24061: GO 24106
// if chassis in [ 11 , 12 , 13 , 14 ] then
24063: LD_VAR 0 1
24067: PUSH
24068: LD_INT 11
24070: PUSH
24071: LD_INT 12
24073: PUSH
24074: LD_INT 13
24076: PUSH
24077: LD_INT 14
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: IN
24086: IFFALSE 24098
// uc_nation := nation_arabian else
24088: LD_ADDR_OWVAR 21
24092: PUSH
24093: LD_INT 2
24095: ST_TO_ADDR
24096: GO 24106
// uc_nation := nation_russian ;
24098: LD_ADDR_OWVAR 21
24102: PUSH
24103: LD_INT 3
24105: ST_TO_ADDR
// vc_chassis := chassis ;
24106: LD_ADDR_OWVAR 37
24110: PUSH
24111: LD_VAR 0 1
24115: ST_TO_ADDR
// vc_engine := engine ;
24116: LD_ADDR_OWVAR 39
24120: PUSH
24121: LD_VAR 0 2
24125: ST_TO_ADDR
// vc_control := control ;
24126: LD_ADDR_OWVAR 38
24130: PUSH
24131: LD_VAR 0 3
24135: ST_TO_ADDR
// vc_weapon := weapon ;
24136: LD_ADDR_OWVAR 40
24140: PUSH
24141: LD_VAR 0 4
24145: ST_TO_ADDR
// un := CreateVehicle ;
24146: LD_ADDR_VAR 0 8
24150: PUSH
24151: CALL_OW 45
24155: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24156: LD_VAR 0 8
24160: PPUSH
24161: LD_INT 0
24163: PPUSH
24164: LD_INT 5
24166: PPUSH
24167: CALL_OW 12
24171: PPUSH
24172: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24176: LD_VAR 0 8
24180: PPUSH
24181: LD_VAR 0 5
24185: PPUSH
24186: LD_VAR 0 6
24190: PPUSH
24191: LD_INT 1
24193: PPUSH
24194: CALL_OW 48
// end ;
24198: LD_VAR 0 7
24202: RET
// export hInvincible ; every 1 do
24203: GO 24205
24205: DISABLE
// hInvincible := [ ] ;
24206: LD_ADDR_EXP 95
24210: PUSH
24211: EMPTY
24212: ST_TO_ADDR
24213: END
// every 10 do var i ;
24214: GO 24216
24216: DISABLE
24217: LD_INT 0
24219: PPUSH
// begin enable ;
24220: ENABLE
// if not hInvincible then
24221: LD_EXP 95
24225: NOT
24226: IFFALSE 24230
// exit ;
24228: GO 24274
// for i in hInvincible do
24230: LD_ADDR_VAR 0 1
24234: PUSH
24235: LD_EXP 95
24239: PUSH
24240: FOR_IN
24241: IFFALSE 24272
// if GetLives ( i ) < 1000 then
24243: LD_VAR 0 1
24247: PPUSH
24248: CALL_OW 256
24252: PUSH
24253: LD_INT 1000
24255: LESS
24256: IFFALSE 24270
// SetLives ( i , 1000 ) ;
24258: LD_VAR 0 1
24262: PPUSH
24263: LD_INT 1000
24265: PPUSH
24266: CALL_OW 234
24270: GO 24240
24272: POP
24273: POP
// end ;
24274: PPOPN 1
24276: END
// export function hHackInvincible ; var i ; begin
24277: LD_INT 0
24279: PPUSH
24280: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24281: LD_ADDR_VAR 0 2
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: LD_INT 21
24291: PUSH
24292: LD_INT 1
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 21
24301: PUSH
24302: LD_INT 2
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: LIST
24313: PPUSH
24314: CALL_OW 69
24318: PUSH
24319: FOR_IN
24320: IFFALSE 24381
// if IsSelected ( i ) then
24322: LD_VAR 0 2
24326: PPUSH
24327: CALL_OW 306
24331: IFFALSE 24379
// begin if i in hInvincible then
24333: LD_VAR 0 2
24337: PUSH
24338: LD_EXP 95
24342: IN
24343: IFFALSE 24363
// hInvincible := hInvincible diff i else
24345: LD_ADDR_EXP 95
24349: PUSH
24350: LD_EXP 95
24354: PUSH
24355: LD_VAR 0 2
24359: DIFF
24360: ST_TO_ADDR
24361: GO 24379
// hInvincible := hInvincible union i ;
24363: LD_ADDR_EXP 95
24367: PUSH
24368: LD_EXP 95
24372: PUSH
24373: LD_VAR 0 2
24377: UNION
24378: ST_TO_ADDR
// end ;
24379: GO 24319
24381: POP
24382: POP
// end ;
24383: LD_VAR 0 1
24387: RET
// export function hHackInvisible ; var i , j ; begin
24388: LD_INT 0
24390: PPUSH
24391: PPUSH
24392: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24393: LD_ADDR_VAR 0 2
24397: PUSH
24398: LD_INT 21
24400: PUSH
24401: LD_INT 1
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PPUSH
24408: CALL_OW 69
24412: PUSH
24413: FOR_IN
24414: IFFALSE 24438
// if IsSelected ( i ) then
24416: LD_VAR 0 2
24420: PPUSH
24421: CALL_OW 306
24425: IFFALSE 24436
// ComForceInvisible ( i ) ;
24427: LD_VAR 0 2
24431: PPUSH
24432: CALL_OW 496
24436: GO 24413
24438: POP
24439: POP
// end ;
24440: LD_VAR 0 1
24444: RET
// export function hHackChangeYourSide ; begin
24445: LD_INT 0
24447: PPUSH
// if your_side = 8 then
24448: LD_OWVAR 2
24452: PUSH
24453: LD_INT 8
24455: EQUAL
24456: IFFALSE 24468
// your_side := 0 else
24458: LD_ADDR_OWVAR 2
24462: PUSH
24463: LD_INT 0
24465: ST_TO_ADDR
24466: GO 24482
// your_side := your_side + 1 ;
24468: LD_ADDR_OWVAR 2
24472: PUSH
24473: LD_OWVAR 2
24477: PUSH
24478: LD_INT 1
24480: PLUS
24481: ST_TO_ADDR
// end ;
24482: LD_VAR 0 1
24486: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24487: LD_INT 0
24489: PPUSH
24490: PPUSH
24491: PPUSH
// for i in all_units do
24492: LD_ADDR_VAR 0 2
24496: PUSH
24497: LD_OWVAR 3
24501: PUSH
24502: FOR_IN
24503: IFFALSE 24581
// if IsSelected ( i ) then
24505: LD_VAR 0 2
24509: PPUSH
24510: CALL_OW 306
24514: IFFALSE 24579
// begin j := GetSide ( i ) ;
24516: LD_ADDR_VAR 0 3
24520: PUSH
24521: LD_VAR 0 2
24525: PPUSH
24526: CALL_OW 255
24530: ST_TO_ADDR
// if j = 8 then
24531: LD_VAR 0 3
24535: PUSH
24536: LD_INT 8
24538: EQUAL
24539: IFFALSE 24551
// j := 0 else
24541: LD_ADDR_VAR 0 3
24545: PUSH
24546: LD_INT 0
24548: ST_TO_ADDR
24549: GO 24565
// j := j + 1 ;
24551: LD_ADDR_VAR 0 3
24555: PUSH
24556: LD_VAR 0 3
24560: PUSH
24561: LD_INT 1
24563: PLUS
24564: ST_TO_ADDR
// SetSide ( i , j ) ;
24565: LD_VAR 0 2
24569: PPUSH
24570: LD_VAR 0 3
24574: PPUSH
24575: CALL_OW 235
// end ;
24579: GO 24502
24581: POP
24582: POP
// end ;
24583: LD_VAR 0 1
24587: RET
// export function hHackFog ; begin
24588: LD_INT 0
24590: PPUSH
// FogOff ( true ) ;
24591: LD_INT 1
24593: PPUSH
24594: CALL_OW 344
// end ;
24598: LD_VAR 0 1
24602: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24603: LD_INT 0
24605: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24606: LD_VAR 0 1
24610: PPUSH
24611: LD_VAR 0 2
24615: PPUSH
24616: LD_VAR 0 3
24620: PPUSH
24621: LD_INT 1
24623: PPUSH
24624: LD_INT 1
24626: PPUSH
24627: CALL_OW 483
// CenterOnXY ( x , y ) ;
24631: LD_VAR 0 2
24635: PPUSH
24636: LD_VAR 0 3
24640: PPUSH
24641: CALL_OW 84
// end ; end_of_file
24645: LD_VAR 0 4
24649: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24650: LD_INT 0
24652: PPUSH
24653: PPUSH
24654: PPUSH
24655: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24656: LD_VAR 0 1
24660: PPUSH
24661: CALL_OW 264
24665: PUSH
24666: LD_EXP 23
24670: EQUAL
24671: IFFALSE 24743
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24673: LD_INT 68
24675: PPUSH
24676: LD_VAR 0 1
24680: PPUSH
24681: CALL_OW 255
24685: PPUSH
24686: CALL_OW 321
24690: PUSH
24691: LD_INT 2
24693: EQUAL
24694: IFFALSE 24706
// eff := 70 else
24696: LD_ADDR_VAR 0 4
24700: PUSH
24701: LD_INT 70
24703: ST_TO_ADDR
24704: GO 24714
// eff := 30 ;
24706: LD_ADDR_VAR 0 4
24710: PUSH
24711: LD_INT 30
24713: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24714: LD_VAR 0 1
24718: PPUSH
24719: CALL_OW 250
24723: PPUSH
24724: LD_VAR 0 1
24728: PPUSH
24729: CALL_OW 251
24733: PPUSH
24734: LD_VAR 0 4
24738: PPUSH
24739: CALL_OW 495
// end ; end ;
24743: LD_VAR 0 2
24747: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24748: LD_INT 0
24750: PPUSH
// end ;
24751: LD_VAR 0 4
24755: RET
// export function SOS_Command ( cmd ) ; begin
24756: LD_INT 0
24758: PPUSH
// end ;
24759: LD_VAR 0 2
24763: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24764: LD_INT 0
24766: PPUSH
// end ;
24767: LD_VAR 0 6
24771: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24772: LD_INT 0
24774: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24775: LD_VAR 0 1
24779: PUSH
24780: LD_INT 250
24782: EQUAL
24783: PUSH
24784: LD_VAR 0 2
24788: PPUSH
24789: CALL_OW 264
24793: PUSH
24794: LD_EXP 26
24798: EQUAL
24799: AND
24800: IFFALSE 24821
// MinerPlaceMine ( unit , x , y ) ;
24802: LD_VAR 0 2
24806: PPUSH
24807: LD_VAR 0 4
24811: PPUSH
24812: LD_VAR 0 5
24816: PPUSH
24817: CALL 27170 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24821: LD_VAR 0 1
24825: PUSH
24826: LD_INT 251
24828: EQUAL
24829: PUSH
24830: LD_VAR 0 2
24834: PPUSH
24835: CALL_OW 264
24839: PUSH
24840: LD_EXP 26
24844: EQUAL
24845: AND
24846: IFFALSE 24867
// MinerDetonateMine ( unit , x , y ) ;
24848: LD_VAR 0 2
24852: PPUSH
24853: LD_VAR 0 4
24857: PPUSH
24858: LD_VAR 0 5
24862: PPUSH
24863: CALL 27447 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24867: LD_VAR 0 1
24871: PUSH
24872: LD_INT 252
24874: EQUAL
24875: PUSH
24876: LD_VAR 0 2
24880: PPUSH
24881: CALL_OW 264
24885: PUSH
24886: LD_EXP 26
24890: EQUAL
24891: AND
24892: IFFALSE 24913
// MinerCreateMinefield ( unit , x , y ) ;
24894: LD_VAR 0 2
24898: PPUSH
24899: LD_VAR 0 4
24903: PPUSH
24904: LD_VAR 0 5
24908: PPUSH
24909: CALL 27864 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24913: LD_VAR 0 1
24917: PUSH
24918: LD_INT 253
24920: EQUAL
24921: PUSH
24922: LD_VAR 0 2
24926: PPUSH
24927: CALL_OW 257
24931: PUSH
24932: LD_INT 5
24934: EQUAL
24935: AND
24936: IFFALSE 24957
// ComBinocular ( unit , x , y ) ;
24938: LD_VAR 0 2
24942: PPUSH
24943: LD_VAR 0 4
24947: PPUSH
24948: LD_VAR 0 5
24952: PPUSH
24953: CALL 28235 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24957: LD_VAR 0 1
24961: PUSH
24962: LD_INT 254
24964: EQUAL
24965: PUSH
24966: LD_VAR 0 2
24970: PPUSH
24971: CALL_OW 264
24975: PUSH
24976: LD_EXP 21
24980: EQUAL
24981: AND
24982: PUSH
24983: LD_VAR 0 3
24987: PPUSH
24988: CALL_OW 263
24992: PUSH
24993: LD_INT 3
24995: EQUAL
24996: AND
24997: IFFALSE 25013
// HackDestroyVehicle ( unit , selectedUnit ) ;
24999: LD_VAR 0 2
25003: PPUSH
25004: LD_VAR 0 3
25008: PPUSH
25009: CALL 26530 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25013: LD_VAR 0 1
25017: PUSH
25018: LD_INT 255
25020: EQUAL
25021: PUSH
25022: LD_VAR 0 2
25026: PPUSH
25027: CALL_OW 264
25031: PUSH
25032: LD_INT 14
25034: PUSH
25035: LD_INT 53
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: IN
25042: AND
25043: PUSH
25044: LD_VAR 0 4
25048: PPUSH
25049: LD_VAR 0 5
25053: PPUSH
25054: CALL_OW 488
25058: AND
25059: IFFALSE 25083
// CutTreeXYR ( unit , x , y , 12 ) ;
25061: LD_VAR 0 2
25065: PPUSH
25066: LD_VAR 0 4
25070: PPUSH
25071: LD_VAR 0 5
25075: PPUSH
25076: LD_INT 12
25078: PPUSH
25079: CALL 25096 0 4
// end ;
25083: LD_VAR 0 6
25087: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
25088: LD_INT 0
25090: PPUSH
// end ;
25091: LD_VAR 0 4
25095: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25096: LD_INT 0
25098: PPUSH
25099: PPUSH
25100: PPUSH
25101: PPUSH
25102: PPUSH
25103: PPUSH
25104: PPUSH
25105: PPUSH
25106: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25107: LD_VAR 0 1
25111: NOT
25112: PUSH
25113: LD_VAR 0 2
25117: PPUSH
25118: LD_VAR 0 3
25122: PPUSH
25123: CALL_OW 488
25127: NOT
25128: OR
25129: PUSH
25130: LD_VAR 0 4
25134: NOT
25135: OR
25136: IFFALSE 25140
// exit ;
25138: GO 25480
// list := [ ] ;
25140: LD_ADDR_VAR 0 13
25144: PUSH
25145: EMPTY
25146: ST_TO_ADDR
// if x - r < 0 then
25147: LD_VAR 0 2
25151: PUSH
25152: LD_VAR 0 4
25156: MINUS
25157: PUSH
25158: LD_INT 0
25160: LESS
25161: IFFALSE 25173
// min_x := 0 else
25163: LD_ADDR_VAR 0 7
25167: PUSH
25168: LD_INT 0
25170: ST_TO_ADDR
25171: GO 25189
// min_x := x - r ;
25173: LD_ADDR_VAR 0 7
25177: PUSH
25178: LD_VAR 0 2
25182: PUSH
25183: LD_VAR 0 4
25187: MINUS
25188: ST_TO_ADDR
// if y - r < 0 then
25189: LD_VAR 0 3
25193: PUSH
25194: LD_VAR 0 4
25198: MINUS
25199: PUSH
25200: LD_INT 0
25202: LESS
25203: IFFALSE 25215
// min_y := 0 else
25205: LD_ADDR_VAR 0 8
25209: PUSH
25210: LD_INT 0
25212: ST_TO_ADDR
25213: GO 25231
// min_y := y - r ;
25215: LD_ADDR_VAR 0 8
25219: PUSH
25220: LD_VAR 0 3
25224: PUSH
25225: LD_VAR 0 4
25229: MINUS
25230: ST_TO_ADDR
// max_x := x + r ;
25231: LD_ADDR_VAR 0 9
25235: PUSH
25236: LD_VAR 0 2
25240: PUSH
25241: LD_VAR 0 4
25245: PLUS
25246: ST_TO_ADDR
// max_y := y + r ;
25247: LD_ADDR_VAR 0 10
25251: PUSH
25252: LD_VAR 0 3
25256: PUSH
25257: LD_VAR 0 4
25261: PLUS
25262: ST_TO_ADDR
// for _x = min_x to max_x do
25263: LD_ADDR_VAR 0 11
25267: PUSH
25268: DOUBLE
25269: LD_VAR 0 7
25273: DEC
25274: ST_TO_ADDR
25275: LD_VAR 0 9
25279: PUSH
25280: FOR_TO
25281: IFFALSE 25398
// for _y = min_y to max_y do
25283: LD_ADDR_VAR 0 12
25287: PUSH
25288: DOUBLE
25289: LD_VAR 0 8
25293: DEC
25294: ST_TO_ADDR
25295: LD_VAR 0 10
25299: PUSH
25300: FOR_TO
25301: IFFALSE 25394
// begin if not ValidHex ( _x , _y ) then
25303: LD_VAR 0 11
25307: PPUSH
25308: LD_VAR 0 12
25312: PPUSH
25313: CALL_OW 488
25317: NOT
25318: IFFALSE 25322
// continue ;
25320: GO 25300
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25322: LD_VAR 0 11
25326: PPUSH
25327: LD_VAR 0 12
25331: PPUSH
25332: CALL_OW 351
25336: PUSH
25337: LD_VAR 0 11
25341: PPUSH
25342: LD_VAR 0 12
25346: PPUSH
25347: CALL_OW 554
25351: AND
25352: IFFALSE 25392
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25354: LD_ADDR_VAR 0 13
25358: PUSH
25359: LD_VAR 0 13
25363: PPUSH
25364: LD_VAR 0 13
25368: PUSH
25369: LD_INT 1
25371: PLUS
25372: PPUSH
25373: LD_VAR 0 11
25377: PUSH
25378: LD_VAR 0 12
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PPUSH
25387: CALL_OW 2
25391: ST_TO_ADDR
// end ;
25392: GO 25300
25394: POP
25395: POP
25396: GO 25280
25398: POP
25399: POP
// if not list then
25400: LD_VAR 0 13
25404: NOT
25405: IFFALSE 25409
// exit ;
25407: GO 25480
// for i in list do
25409: LD_ADDR_VAR 0 6
25413: PUSH
25414: LD_VAR 0 13
25418: PUSH
25419: FOR_IN
25420: IFFALSE 25478
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25422: LD_VAR 0 1
25426: PPUSH
25427: LD_STRING M
25429: PUSH
25430: LD_VAR 0 6
25434: PUSH
25435: LD_INT 1
25437: ARRAY
25438: PUSH
25439: LD_VAR 0 6
25443: PUSH
25444: LD_INT 2
25446: ARRAY
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: LD_INT 0
25456: PUSH
25457: LD_INT 0
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: PUSH
25469: EMPTY
25470: LIST
25471: PPUSH
25472: CALL_OW 447
25476: GO 25419
25478: POP
25479: POP
// end ;
25480: LD_VAR 0 5
25484: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25485: LD_EXP 98
25489: NOT
25490: IFFALSE 25540
25492: GO 25494
25494: DISABLE
// begin initHack := true ;
25495: LD_ADDR_EXP 98
25499: PUSH
25500: LD_INT 1
25502: ST_TO_ADDR
// hackTanks := [ ] ;
25503: LD_ADDR_EXP 99
25507: PUSH
25508: EMPTY
25509: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25510: LD_ADDR_EXP 100
25514: PUSH
25515: EMPTY
25516: ST_TO_ADDR
// hackLimit := 3 ;
25517: LD_ADDR_EXP 101
25521: PUSH
25522: LD_INT 3
25524: ST_TO_ADDR
// hackDist := 12 ;
25525: LD_ADDR_EXP 102
25529: PUSH
25530: LD_INT 12
25532: ST_TO_ADDR
// hackCounter := [ ] ;
25533: LD_ADDR_EXP 103
25537: PUSH
25538: EMPTY
25539: ST_TO_ADDR
// end ;
25540: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25541: LD_EXP 98
25545: PUSH
25546: LD_INT 34
25548: PUSH
25549: LD_EXP 21
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PPUSH
25558: CALL_OW 69
25562: AND
25563: IFFALSE 25818
25565: GO 25567
25567: DISABLE
25568: LD_INT 0
25570: PPUSH
25571: PPUSH
// begin enable ;
25572: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25573: LD_ADDR_VAR 0 1
25577: PUSH
25578: LD_INT 34
25580: PUSH
25581: LD_EXP 21
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PPUSH
25590: CALL_OW 69
25594: PUSH
25595: FOR_IN
25596: IFFALSE 25816
// begin if not i in hackTanks then
25598: LD_VAR 0 1
25602: PUSH
25603: LD_EXP 99
25607: IN
25608: NOT
25609: IFFALSE 25692
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25611: LD_ADDR_EXP 99
25615: PUSH
25616: LD_EXP 99
25620: PPUSH
25621: LD_EXP 99
25625: PUSH
25626: LD_INT 1
25628: PLUS
25629: PPUSH
25630: LD_VAR 0 1
25634: PPUSH
25635: CALL_OW 1
25639: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25640: LD_ADDR_EXP 100
25644: PUSH
25645: LD_EXP 100
25649: PPUSH
25650: LD_EXP 100
25654: PUSH
25655: LD_INT 1
25657: PLUS
25658: PPUSH
25659: EMPTY
25660: PPUSH
25661: CALL_OW 1
25665: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25666: LD_ADDR_EXP 103
25670: PUSH
25671: LD_EXP 103
25675: PPUSH
25676: LD_EXP 103
25680: PUSH
25681: LD_INT 1
25683: PLUS
25684: PPUSH
25685: EMPTY
25686: PPUSH
25687: CALL_OW 1
25691: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25692: LD_VAR 0 1
25696: PPUSH
25697: CALL_OW 302
25701: NOT
25702: IFFALSE 25715
// begin HackUnlinkAll ( i ) ;
25704: LD_VAR 0 1
25708: PPUSH
25709: CALL 25821 0 1
// continue ;
25713: GO 25595
// end ; HackCheckCapturedStatus ( i ) ;
25715: LD_VAR 0 1
25719: PPUSH
25720: CALL 26264 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25724: LD_ADDR_VAR 0 2
25728: PUSH
25729: LD_INT 81
25731: PUSH
25732: LD_VAR 0 1
25736: PPUSH
25737: CALL_OW 255
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 33
25748: PUSH
25749: LD_INT 3
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 91
25758: PUSH
25759: LD_VAR 0 1
25763: PUSH
25764: LD_EXP 102
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 50
25776: PUSH
25777: EMPTY
25778: LIST
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: PPUSH
25786: CALL_OW 69
25790: ST_TO_ADDR
// if not tmp then
25791: LD_VAR 0 2
25795: NOT
25796: IFFALSE 25800
// continue ;
25798: GO 25595
// HackLink ( i , tmp ) ;
25800: LD_VAR 0 1
25804: PPUSH
25805: LD_VAR 0 2
25809: PPUSH
25810: CALL 25957 0 2
// end ;
25814: GO 25595
25816: POP
25817: POP
// end ;
25818: PPOPN 2
25820: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25821: LD_INT 0
25823: PPUSH
25824: PPUSH
25825: PPUSH
// if not hack in hackTanks then
25826: LD_VAR 0 1
25830: PUSH
25831: LD_EXP 99
25835: IN
25836: NOT
25837: IFFALSE 25841
// exit ;
25839: GO 25952
// index := GetElementIndex ( hackTanks , hack ) ;
25841: LD_ADDR_VAR 0 4
25845: PUSH
25846: LD_EXP 99
25850: PPUSH
25851: LD_VAR 0 1
25855: PPUSH
25856: CALL 33426 0 2
25860: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25861: LD_EXP 100
25865: PUSH
25866: LD_VAR 0 4
25870: ARRAY
25871: IFFALSE 25952
// begin for i in hackTanksCaptured [ index ] do
25873: LD_ADDR_VAR 0 3
25877: PUSH
25878: LD_EXP 100
25882: PUSH
25883: LD_VAR 0 4
25887: ARRAY
25888: PUSH
25889: FOR_IN
25890: IFFALSE 25916
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25892: LD_VAR 0 3
25896: PUSH
25897: LD_INT 1
25899: ARRAY
25900: PPUSH
25901: LD_VAR 0 3
25905: PUSH
25906: LD_INT 2
25908: ARRAY
25909: PPUSH
25910: CALL_OW 235
25914: GO 25889
25916: POP
25917: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25918: LD_ADDR_EXP 100
25922: PUSH
25923: LD_EXP 100
25927: PPUSH
25928: LD_VAR 0 4
25932: PPUSH
25933: EMPTY
25934: PPUSH
25935: CALL_OW 1
25939: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25940: LD_VAR 0 1
25944: PPUSH
25945: LD_INT 0
25947: PPUSH
25948: CALL_OW 505
// end ; end ;
25952: LD_VAR 0 2
25956: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25957: LD_INT 0
25959: PPUSH
25960: PPUSH
25961: PPUSH
// if not hack in hackTanks or not vehicles then
25962: LD_VAR 0 1
25966: PUSH
25967: LD_EXP 99
25971: IN
25972: NOT
25973: PUSH
25974: LD_VAR 0 2
25978: NOT
25979: OR
25980: IFFALSE 25984
// exit ;
25982: GO 26259
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25984: LD_ADDR_VAR 0 2
25988: PUSH
25989: LD_VAR 0 1
25993: PPUSH
25994: LD_VAR 0 2
25998: PPUSH
25999: LD_INT 1
26001: PPUSH
26002: LD_INT 1
26004: PPUSH
26005: CALL 34076 0 4
26009: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26010: LD_ADDR_VAR 0 5
26014: PUSH
26015: LD_EXP 99
26019: PPUSH
26020: LD_VAR 0 1
26024: PPUSH
26025: CALL 33426 0 2
26029: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26030: LD_EXP 100
26034: PUSH
26035: LD_VAR 0 5
26039: ARRAY
26040: PUSH
26041: LD_EXP 101
26045: LESS
26046: IFFALSE 26235
// begin for i := 1 to vehicles do
26048: LD_ADDR_VAR 0 4
26052: PUSH
26053: DOUBLE
26054: LD_INT 1
26056: DEC
26057: ST_TO_ADDR
26058: LD_VAR 0 2
26062: PUSH
26063: FOR_TO
26064: IFFALSE 26233
// begin if hackTanksCaptured [ index ] = hackLimit then
26066: LD_EXP 100
26070: PUSH
26071: LD_VAR 0 5
26075: ARRAY
26076: PUSH
26077: LD_EXP 101
26081: EQUAL
26082: IFFALSE 26086
// break ;
26084: GO 26233
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26086: LD_ADDR_EXP 103
26090: PUSH
26091: LD_EXP 103
26095: PPUSH
26096: LD_VAR 0 5
26100: PPUSH
26101: LD_EXP 103
26105: PUSH
26106: LD_VAR 0 5
26110: ARRAY
26111: PUSH
26112: LD_INT 1
26114: PLUS
26115: PPUSH
26116: CALL_OW 1
26120: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26121: LD_ADDR_EXP 100
26125: PUSH
26126: LD_EXP 100
26130: PPUSH
26131: LD_VAR 0 5
26135: PUSH
26136: LD_EXP 100
26140: PUSH
26141: LD_VAR 0 5
26145: ARRAY
26146: PUSH
26147: LD_INT 1
26149: PLUS
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PPUSH
26155: LD_VAR 0 2
26159: PUSH
26160: LD_VAR 0 4
26164: ARRAY
26165: PUSH
26166: LD_VAR 0 2
26170: PUSH
26171: LD_VAR 0 4
26175: ARRAY
26176: PPUSH
26177: CALL_OW 255
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PPUSH
26186: CALL 33641 0 3
26190: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26191: LD_VAR 0 2
26195: PUSH
26196: LD_VAR 0 4
26200: ARRAY
26201: PPUSH
26202: LD_VAR 0 1
26206: PPUSH
26207: CALL_OW 255
26211: PPUSH
26212: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26216: LD_VAR 0 2
26220: PUSH
26221: LD_VAR 0 4
26225: ARRAY
26226: PPUSH
26227: CALL_OW 141
// end ;
26231: GO 26063
26233: POP
26234: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26235: LD_VAR 0 1
26239: PPUSH
26240: LD_EXP 100
26244: PUSH
26245: LD_VAR 0 5
26249: ARRAY
26250: PUSH
26251: LD_INT 0
26253: PLUS
26254: PPUSH
26255: CALL_OW 505
// end ;
26259: LD_VAR 0 3
26263: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26264: LD_INT 0
26266: PPUSH
26267: PPUSH
26268: PPUSH
26269: PPUSH
// if not hack in hackTanks then
26270: LD_VAR 0 1
26274: PUSH
26275: LD_EXP 99
26279: IN
26280: NOT
26281: IFFALSE 26285
// exit ;
26283: GO 26525
// index := GetElementIndex ( hackTanks , hack ) ;
26285: LD_ADDR_VAR 0 4
26289: PUSH
26290: LD_EXP 99
26294: PPUSH
26295: LD_VAR 0 1
26299: PPUSH
26300: CALL 33426 0 2
26304: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26305: LD_ADDR_VAR 0 3
26309: PUSH
26310: DOUBLE
26311: LD_EXP 100
26315: PUSH
26316: LD_VAR 0 4
26320: ARRAY
26321: INC
26322: ST_TO_ADDR
26323: LD_INT 1
26325: PUSH
26326: FOR_DOWNTO
26327: IFFALSE 26499
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26329: LD_ADDR_VAR 0 5
26333: PUSH
26334: LD_EXP 100
26338: PUSH
26339: LD_VAR 0 4
26343: ARRAY
26344: PUSH
26345: LD_VAR 0 3
26349: ARRAY
26350: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26351: LD_VAR 0 5
26355: PUSH
26356: LD_INT 1
26358: ARRAY
26359: PPUSH
26360: CALL_OW 302
26364: NOT
26365: PUSH
26366: LD_VAR 0 5
26370: PUSH
26371: LD_INT 1
26373: ARRAY
26374: PPUSH
26375: CALL_OW 255
26379: PUSH
26380: LD_VAR 0 1
26384: PPUSH
26385: CALL_OW 255
26389: NONEQUAL
26390: OR
26391: IFFALSE 26497
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26393: LD_VAR 0 5
26397: PUSH
26398: LD_INT 1
26400: ARRAY
26401: PPUSH
26402: CALL_OW 305
26406: PUSH
26407: LD_VAR 0 5
26411: PUSH
26412: LD_INT 1
26414: ARRAY
26415: PPUSH
26416: CALL_OW 255
26420: PUSH
26421: LD_VAR 0 1
26425: PPUSH
26426: CALL_OW 255
26430: EQUAL
26431: AND
26432: IFFALSE 26456
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26434: LD_VAR 0 5
26438: PUSH
26439: LD_INT 1
26441: ARRAY
26442: PPUSH
26443: LD_VAR 0 5
26447: PUSH
26448: LD_INT 2
26450: ARRAY
26451: PPUSH
26452: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26456: LD_ADDR_EXP 100
26460: PUSH
26461: LD_EXP 100
26465: PPUSH
26466: LD_VAR 0 4
26470: PPUSH
26471: LD_EXP 100
26475: PUSH
26476: LD_VAR 0 4
26480: ARRAY
26481: PPUSH
26482: LD_VAR 0 3
26486: PPUSH
26487: CALL_OW 3
26491: PPUSH
26492: CALL_OW 1
26496: ST_TO_ADDR
// end ; end ;
26497: GO 26326
26499: POP
26500: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26501: LD_VAR 0 1
26505: PPUSH
26506: LD_EXP 100
26510: PUSH
26511: LD_VAR 0 4
26515: ARRAY
26516: PUSH
26517: LD_INT 0
26519: PLUS
26520: PPUSH
26521: CALL_OW 505
// end ;
26525: LD_VAR 0 2
26529: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26530: LD_INT 0
26532: PPUSH
26533: PPUSH
26534: PPUSH
26535: PPUSH
// if not hack in hackTanks then
26536: LD_VAR 0 1
26540: PUSH
26541: LD_EXP 99
26545: IN
26546: NOT
26547: IFFALSE 26551
// exit ;
26549: GO 26636
// index := GetElementIndex ( hackTanks , hack ) ;
26551: LD_ADDR_VAR 0 5
26555: PUSH
26556: LD_EXP 99
26560: PPUSH
26561: LD_VAR 0 1
26565: PPUSH
26566: CALL 33426 0 2
26570: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26571: LD_ADDR_VAR 0 4
26575: PUSH
26576: DOUBLE
26577: LD_INT 1
26579: DEC
26580: ST_TO_ADDR
26581: LD_EXP 100
26585: PUSH
26586: LD_VAR 0 5
26590: ARRAY
26591: PUSH
26592: FOR_TO
26593: IFFALSE 26634
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26595: LD_EXP 100
26599: PUSH
26600: LD_VAR 0 5
26604: ARRAY
26605: PUSH
26606: LD_VAR 0 4
26610: ARRAY
26611: PUSH
26612: LD_INT 1
26614: ARRAY
26615: PUSH
26616: LD_VAR 0 2
26620: EQUAL
26621: IFFALSE 26632
// KillUnit ( vehicle ) ;
26623: LD_VAR 0 2
26627: PPUSH
26628: CALL_OW 66
26632: GO 26592
26634: POP
26635: POP
// end ;
26636: LD_VAR 0 3
26640: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26641: LD_EXP 104
26645: NOT
26646: IFFALSE 26681
26648: GO 26650
26650: DISABLE
// begin initMiner := true ;
26651: LD_ADDR_EXP 104
26655: PUSH
26656: LD_INT 1
26658: ST_TO_ADDR
// minersList := [ ] ;
26659: LD_ADDR_EXP 105
26663: PUSH
26664: EMPTY
26665: ST_TO_ADDR
// minerMinesList := [ ] ;
26666: LD_ADDR_EXP 106
26670: PUSH
26671: EMPTY
26672: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26673: LD_ADDR_EXP 107
26677: PUSH
26678: LD_INT 5
26680: ST_TO_ADDR
// end ;
26681: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26682: LD_EXP 104
26686: PUSH
26687: LD_INT 34
26689: PUSH
26690: LD_EXP 26
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PPUSH
26699: CALL_OW 69
26703: AND
26704: IFFALSE 27167
26706: GO 26708
26708: DISABLE
26709: LD_INT 0
26711: PPUSH
26712: PPUSH
26713: PPUSH
26714: PPUSH
// begin enable ;
26715: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26716: LD_ADDR_VAR 0 1
26720: PUSH
26721: LD_INT 34
26723: PUSH
26724: LD_EXP 26
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PPUSH
26733: CALL_OW 69
26737: PUSH
26738: FOR_IN
26739: IFFALSE 26811
// begin if not i in minersList then
26741: LD_VAR 0 1
26745: PUSH
26746: LD_EXP 105
26750: IN
26751: NOT
26752: IFFALSE 26809
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26754: LD_ADDR_EXP 105
26758: PUSH
26759: LD_EXP 105
26763: PPUSH
26764: LD_EXP 105
26768: PUSH
26769: LD_INT 1
26771: PLUS
26772: PPUSH
26773: LD_VAR 0 1
26777: PPUSH
26778: CALL_OW 1
26782: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26783: LD_ADDR_EXP 106
26787: PUSH
26788: LD_EXP 106
26792: PPUSH
26793: LD_EXP 106
26797: PUSH
26798: LD_INT 1
26800: PLUS
26801: PPUSH
26802: EMPTY
26803: PPUSH
26804: CALL_OW 1
26808: ST_TO_ADDR
// end end ;
26809: GO 26738
26811: POP
26812: POP
// for i := minerMinesList downto 1 do
26813: LD_ADDR_VAR 0 1
26817: PUSH
26818: DOUBLE
26819: LD_EXP 106
26823: INC
26824: ST_TO_ADDR
26825: LD_INT 1
26827: PUSH
26828: FOR_DOWNTO
26829: IFFALSE 27165
// begin if IsLive ( minersList [ i ] ) then
26831: LD_EXP 105
26835: PUSH
26836: LD_VAR 0 1
26840: ARRAY
26841: PPUSH
26842: CALL_OW 300
26846: IFFALSE 26874
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26848: LD_EXP 105
26852: PUSH
26853: LD_VAR 0 1
26857: ARRAY
26858: PPUSH
26859: LD_EXP 106
26863: PUSH
26864: LD_VAR 0 1
26868: ARRAY
26869: PPUSH
26870: CALL_OW 505
// if not minerMinesList [ i ] then
26874: LD_EXP 106
26878: PUSH
26879: LD_VAR 0 1
26883: ARRAY
26884: NOT
26885: IFFALSE 26889
// continue ;
26887: GO 26828
// for j := minerMinesList [ i ] downto 1 do
26889: LD_ADDR_VAR 0 2
26893: PUSH
26894: DOUBLE
26895: LD_EXP 106
26899: PUSH
26900: LD_VAR 0 1
26904: ARRAY
26905: INC
26906: ST_TO_ADDR
26907: LD_INT 1
26909: PUSH
26910: FOR_DOWNTO
26911: IFFALSE 27161
// begin side := GetSide ( minersList [ i ] ) ;
26913: LD_ADDR_VAR 0 3
26917: PUSH
26918: LD_EXP 105
26922: PUSH
26923: LD_VAR 0 1
26927: ARRAY
26928: PPUSH
26929: CALL_OW 255
26933: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26934: LD_ADDR_VAR 0 4
26938: PUSH
26939: LD_EXP 106
26943: PUSH
26944: LD_VAR 0 1
26948: ARRAY
26949: PUSH
26950: LD_VAR 0 2
26954: ARRAY
26955: PUSH
26956: LD_INT 1
26958: ARRAY
26959: PPUSH
26960: LD_EXP 106
26964: PUSH
26965: LD_VAR 0 1
26969: ARRAY
26970: PUSH
26971: LD_VAR 0 2
26975: ARRAY
26976: PUSH
26977: LD_INT 2
26979: ARRAY
26980: PPUSH
26981: CALL_OW 428
26985: ST_TO_ADDR
// if not tmp then
26986: LD_VAR 0 4
26990: NOT
26991: IFFALSE 26995
// continue ;
26993: GO 26910
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26995: LD_VAR 0 4
26999: PUSH
27000: LD_INT 81
27002: PUSH
27003: LD_VAR 0 3
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PPUSH
27012: CALL_OW 69
27016: IN
27017: PUSH
27018: LD_EXP 106
27022: PUSH
27023: LD_VAR 0 1
27027: ARRAY
27028: PUSH
27029: LD_VAR 0 2
27033: ARRAY
27034: PUSH
27035: LD_INT 1
27037: ARRAY
27038: PPUSH
27039: LD_EXP 106
27043: PUSH
27044: LD_VAR 0 1
27048: ARRAY
27049: PUSH
27050: LD_VAR 0 2
27054: ARRAY
27055: PUSH
27056: LD_INT 2
27058: ARRAY
27059: PPUSH
27060: CALL_OW 458
27064: AND
27065: IFFALSE 27159
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27067: LD_EXP 106
27071: PUSH
27072: LD_VAR 0 1
27076: ARRAY
27077: PUSH
27078: LD_VAR 0 2
27082: ARRAY
27083: PUSH
27084: LD_INT 1
27086: ARRAY
27087: PPUSH
27088: LD_EXP 106
27092: PUSH
27093: LD_VAR 0 1
27097: ARRAY
27098: PUSH
27099: LD_VAR 0 2
27103: ARRAY
27104: PUSH
27105: LD_INT 2
27107: ARRAY
27108: PPUSH
27109: LD_VAR 0 3
27113: PPUSH
27114: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27118: LD_ADDR_EXP 106
27122: PUSH
27123: LD_EXP 106
27127: PPUSH
27128: LD_VAR 0 1
27132: PPUSH
27133: LD_EXP 106
27137: PUSH
27138: LD_VAR 0 1
27142: ARRAY
27143: PPUSH
27144: LD_VAR 0 2
27148: PPUSH
27149: CALL_OW 3
27153: PPUSH
27154: CALL_OW 1
27158: ST_TO_ADDR
// end ; end ;
27159: GO 26910
27161: POP
27162: POP
// end ;
27163: GO 26828
27165: POP
27166: POP
// end ;
27167: PPOPN 4
27169: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27170: LD_INT 0
27172: PPUSH
27173: PPUSH
// result := false ;
27174: LD_ADDR_VAR 0 4
27178: PUSH
27179: LD_INT 0
27181: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27182: LD_VAR 0 1
27186: PPUSH
27187: CALL_OW 264
27191: PUSH
27192: LD_EXP 26
27196: EQUAL
27197: NOT
27198: IFFALSE 27202
// exit ;
27200: GO 27442
// index := GetElementIndex ( minersList , unit ) ;
27202: LD_ADDR_VAR 0 5
27206: PUSH
27207: LD_EXP 105
27211: PPUSH
27212: LD_VAR 0 1
27216: PPUSH
27217: CALL 33426 0 2
27221: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27222: LD_EXP 106
27226: PUSH
27227: LD_VAR 0 5
27231: ARRAY
27232: PUSH
27233: LD_EXP 107
27237: GREATEREQUAL
27238: IFFALSE 27242
// exit ;
27240: GO 27442
// ComMoveXY ( unit , x , y ) ;
27242: LD_VAR 0 1
27246: PPUSH
27247: LD_VAR 0 2
27251: PPUSH
27252: LD_VAR 0 3
27256: PPUSH
27257: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27261: LD_INT 35
27263: PPUSH
27264: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27268: LD_VAR 0 1
27272: PPUSH
27273: LD_VAR 0 2
27277: PPUSH
27278: LD_VAR 0 3
27282: PPUSH
27283: CALL 64198 0 3
27287: NOT
27288: PUSH
27289: LD_VAR 0 1
27293: PPUSH
27294: CALL_OW 314
27298: AND
27299: IFFALSE 27303
// exit ;
27301: GO 27442
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27303: LD_VAR 0 2
27307: PPUSH
27308: LD_VAR 0 3
27312: PPUSH
27313: CALL_OW 428
27317: PUSH
27318: LD_VAR 0 1
27322: EQUAL
27323: PUSH
27324: LD_VAR 0 1
27328: PPUSH
27329: CALL_OW 314
27333: NOT
27334: AND
27335: IFFALSE 27261
// PlaySoundXY ( x , y , PlantMine ) ;
27337: LD_VAR 0 2
27341: PPUSH
27342: LD_VAR 0 3
27346: PPUSH
27347: LD_STRING PlantMine
27349: PPUSH
27350: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27354: LD_VAR 0 2
27358: PPUSH
27359: LD_VAR 0 3
27363: PPUSH
27364: LD_VAR 0 1
27368: PPUSH
27369: CALL_OW 255
27373: PPUSH
27374: LD_INT 0
27376: PPUSH
27377: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27381: LD_ADDR_EXP 106
27385: PUSH
27386: LD_EXP 106
27390: PPUSH
27391: LD_VAR 0 5
27395: PUSH
27396: LD_EXP 106
27400: PUSH
27401: LD_VAR 0 5
27405: ARRAY
27406: PUSH
27407: LD_INT 1
27409: PLUS
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PPUSH
27415: LD_VAR 0 2
27419: PUSH
27420: LD_VAR 0 3
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PPUSH
27429: CALL 33641 0 3
27433: ST_TO_ADDR
// result := true ;
27434: LD_ADDR_VAR 0 4
27438: PUSH
27439: LD_INT 1
27441: ST_TO_ADDR
// end ;
27442: LD_VAR 0 4
27446: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27447: LD_INT 0
27449: PPUSH
27450: PPUSH
27451: PPUSH
// if not unit in minersList then
27452: LD_VAR 0 1
27456: PUSH
27457: LD_EXP 105
27461: IN
27462: NOT
27463: IFFALSE 27467
// exit ;
27465: GO 27859
// index := GetElementIndex ( minersList , unit ) ;
27467: LD_ADDR_VAR 0 6
27471: PUSH
27472: LD_EXP 105
27476: PPUSH
27477: LD_VAR 0 1
27481: PPUSH
27482: CALL 33426 0 2
27486: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27487: LD_ADDR_VAR 0 5
27491: PUSH
27492: DOUBLE
27493: LD_EXP 106
27497: PUSH
27498: LD_VAR 0 6
27502: ARRAY
27503: INC
27504: ST_TO_ADDR
27505: LD_INT 1
27507: PUSH
27508: FOR_DOWNTO
27509: IFFALSE 27670
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27511: LD_EXP 106
27515: PUSH
27516: LD_VAR 0 6
27520: ARRAY
27521: PUSH
27522: LD_VAR 0 5
27526: ARRAY
27527: PUSH
27528: LD_INT 1
27530: ARRAY
27531: PUSH
27532: LD_VAR 0 2
27536: EQUAL
27537: PUSH
27538: LD_EXP 106
27542: PUSH
27543: LD_VAR 0 6
27547: ARRAY
27548: PUSH
27549: LD_VAR 0 5
27553: ARRAY
27554: PUSH
27555: LD_INT 2
27557: ARRAY
27558: PUSH
27559: LD_VAR 0 3
27563: EQUAL
27564: AND
27565: IFFALSE 27668
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27567: LD_EXP 106
27571: PUSH
27572: LD_VAR 0 6
27576: ARRAY
27577: PUSH
27578: LD_VAR 0 5
27582: ARRAY
27583: PUSH
27584: LD_INT 1
27586: ARRAY
27587: PPUSH
27588: LD_EXP 106
27592: PUSH
27593: LD_VAR 0 6
27597: ARRAY
27598: PUSH
27599: LD_VAR 0 5
27603: ARRAY
27604: PUSH
27605: LD_INT 2
27607: ARRAY
27608: PPUSH
27609: LD_VAR 0 1
27613: PPUSH
27614: CALL_OW 255
27618: PPUSH
27619: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27623: LD_ADDR_EXP 106
27627: PUSH
27628: LD_EXP 106
27632: PPUSH
27633: LD_VAR 0 6
27637: PPUSH
27638: LD_EXP 106
27642: PUSH
27643: LD_VAR 0 6
27647: ARRAY
27648: PPUSH
27649: LD_VAR 0 5
27653: PPUSH
27654: CALL_OW 3
27658: PPUSH
27659: CALL_OW 1
27663: ST_TO_ADDR
// exit ;
27664: POP
27665: POP
27666: GO 27859
// end ; end ;
27668: GO 27508
27670: POP
27671: POP
// for i := minerMinesList [ index ] downto 1 do
27672: LD_ADDR_VAR 0 5
27676: PUSH
27677: DOUBLE
27678: LD_EXP 106
27682: PUSH
27683: LD_VAR 0 6
27687: ARRAY
27688: INC
27689: ST_TO_ADDR
27690: LD_INT 1
27692: PUSH
27693: FOR_DOWNTO
27694: IFFALSE 27857
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27696: LD_EXP 106
27700: PUSH
27701: LD_VAR 0 6
27705: ARRAY
27706: PUSH
27707: LD_VAR 0 5
27711: ARRAY
27712: PUSH
27713: LD_INT 1
27715: ARRAY
27716: PPUSH
27717: LD_EXP 106
27721: PUSH
27722: LD_VAR 0 6
27726: ARRAY
27727: PUSH
27728: LD_VAR 0 5
27732: ARRAY
27733: PUSH
27734: LD_INT 2
27736: ARRAY
27737: PPUSH
27738: LD_VAR 0 2
27742: PPUSH
27743: LD_VAR 0 3
27747: PPUSH
27748: CALL_OW 298
27752: PUSH
27753: LD_INT 6
27755: LESS
27756: IFFALSE 27855
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27758: LD_EXP 106
27762: PUSH
27763: LD_VAR 0 6
27767: ARRAY
27768: PUSH
27769: LD_VAR 0 5
27773: ARRAY
27774: PUSH
27775: LD_INT 1
27777: ARRAY
27778: PPUSH
27779: LD_EXP 106
27783: PUSH
27784: LD_VAR 0 6
27788: ARRAY
27789: PUSH
27790: LD_VAR 0 5
27794: ARRAY
27795: PUSH
27796: LD_INT 2
27798: ARRAY
27799: PPUSH
27800: LD_VAR 0 1
27804: PPUSH
27805: CALL_OW 255
27809: PPUSH
27810: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27814: LD_ADDR_EXP 106
27818: PUSH
27819: LD_EXP 106
27823: PPUSH
27824: LD_VAR 0 6
27828: PPUSH
27829: LD_EXP 106
27833: PUSH
27834: LD_VAR 0 6
27838: ARRAY
27839: PPUSH
27840: LD_VAR 0 5
27844: PPUSH
27845: CALL_OW 3
27849: PPUSH
27850: CALL_OW 1
27854: ST_TO_ADDR
// end ; end ;
27855: GO 27693
27857: POP
27858: POP
// end ;
27859: LD_VAR 0 4
27863: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27864: LD_INT 0
27866: PPUSH
27867: PPUSH
27868: PPUSH
27869: PPUSH
27870: PPUSH
27871: PPUSH
27872: PPUSH
27873: PPUSH
27874: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27875: LD_VAR 0 1
27879: PPUSH
27880: CALL_OW 264
27884: PUSH
27885: LD_EXP 26
27889: EQUAL
27890: NOT
27891: PUSH
27892: LD_VAR 0 1
27896: PUSH
27897: LD_EXP 105
27901: IN
27902: NOT
27903: OR
27904: IFFALSE 27908
// exit ;
27906: GO 28230
// index := GetElementIndex ( minersList , unit ) ;
27908: LD_ADDR_VAR 0 6
27912: PUSH
27913: LD_EXP 105
27917: PPUSH
27918: LD_VAR 0 1
27922: PPUSH
27923: CALL 33426 0 2
27927: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27928: LD_ADDR_VAR 0 8
27932: PUSH
27933: LD_EXP 107
27937: PUSH
27938: LD_EXP 106
27942: PUSH
27943: LD_VAR 0 6
27947: ARRAY
27948: MINUS
27949: ST_TO_ADDR
// if not minesFreeAmount then
27950: LD_VAR 0 8
27954: NOT
27955: IFFALSE 27959
// exit ;
27957: GO 28230
// tmp := [ ] ;
27959: LD_ADDR_VAR 0 7
27963: PUSH
27964: EMPTY
27965: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27966: LD_ADDR_VAR 0 5
27970: PUSH
27971: DOUBLE
27972: LD_INT 1
27974: DEC
27975: ST_TO_ADDR
27976: LD_VAR 0 8
27980: PUSH
27981: FOR_TO
27982: IFFALSE 28177
// begin _d := rand ( 0 , 5 ) ;
27984: LD_ADDR_VAR 0 11
27988: PUSH
27989: LD_INT 0
27991: PPUSH
27992: LD_INT 5
27994: PPUSH
27995: CALL_OW 12
27999: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28000: LD_ADDR_VAR 0 12
28004: PUSH
28005: LD_INT 2
28007: PPUSH
28008: LD_INT 6
28010: PPUSH
28011: CALL_OW 12
28015: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28016: LD_ADDR_VAR 0 9
28020: PUSH
28021: LD_VAR 0 2
28025: PPUSH
28026: LD_VAR 0 11
28030: PPUSH
28031: LD_VAR 0 12
28035: PPUSH
28036: CALL_OW 272
28040: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28041: LD_ADDR_VAR 0 10
28045: PUSH
28046: LD_VAR 0 3
28050: PPUSH
28051: LD_VAR 0 11
28055: PPUSH
28056: LD_VAR 0 12
28060: PPUSH
28061: CALL_OW 273
28065: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28066: LD_VAR 0 9
28070: PPUSH
28071: LD_VAR 0 10
28075: PPUSH
28076: CALL_OW 488
28080: PUSH
28081: LD_VAR 0 9
28085: PUSH
28086: LD_VAR 0 10
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_VAR 0 7
28099: IN
28100: NOT
28101: AND
28102: PUSH
28103: LD_VAR 0 9
28107: PPUSH
28108: LD_VAR 0 10
28112: PPUSH
28113: CALL_OW 458
28117: NOT
28118: AND
28119: IFFALSE 28161
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28121: LD_ADDR_VAR 0 7
28125: PUSH
28126: LD_VAR 0 7
28130: PPUSH
28131: LD_VAR 0 7
28135: PUSH
28136: LD_INT 1
28138: PLUS
28139: PPUSH
28140: LD_VAR 0 9
28144: PUSH
28145: LD_VAR 0 10
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PPUSH
28154: CALL_OW 1
28158: ST_TO_ADDR
28159: GO 28175
// i := i - 1 ;
28161: LD_ADDR_VAR 0 5
28165: PUSH
28166: LD_VAR 0 5
28170: PUSH
28171: LD_INT 1
28173: MINUS
28174: ST_TO_ADDR
// end ;
28175: GO 27981
28177: POP
28178: POP
// for i in tmp do
28179: LD_ADDR_VAR 0 5
28183: PUSH
28184: LD_VAR 0 7
28188: PUSH
28189: FOR_IN
28190: IFFALSE 28228
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28192: LD_VAR 0 1
28196: PPUSH
28197: LD_VAR 0 5
28201: PUSH
28202: LD_INT 1
28204: ARRAY
28205: PPUSH
28206: LD_VAR 0 5
28210: PUSH
28211: LD_INT 2
28213: ARRAY
28214: PPUSH
28215: CALL 27170 0 3
28219: NOT
28220: IFFALSE 28226
// exit ;
28222: POP
28223: POP
28224: GO 28230
28226: GO 28189
28228: POP
28229: POP
// end ;
28230: LD_VAR 0 4
28234: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28235: LD_INT 0
28237: PPUSH
28238: PPUSH
28239: PPUSH
28240: PPUSH
28241: PPUSH
28242: PPUSH
28243: PPUSH
// if not GetClass ( unit ) = class_sniper then
28244: LD_VAR 0 1
28248: PPUSH
28249: CALL_OW 257
28253: PUSH
28254: LD_INT 5
28256: EQUAL
28257: NOT
28258: IFFALSE 28262
// exit ;
28260: GO 28650
// dist := 8 ;
28262: LD_ADDR_VAR 0 5
28266: PUSH
28267: LD_INT 8
28269: ST_TO_ADDR
// viewRange := 12 ;
28270: LD_ADDR_VAR 0 7
28274: PUSH
28275: LD_INT 12
28277: ST_TO_ADDR
// side := GetSide ( unit ) ;
28278: LD_ADDR_VAR 0 6
28282: PUSH
28283: LD_VAR 0 1
28287: PPUSH
28288: CALL_OW 255
28292: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28293: LD_INT 61
28295: PPUSH
28296: LD_VAR 0 6
28300: PPUSH
28301: CALL_OW 321
28305: PUSH
28306: LD_INT 2
28308: EQUAL
28309: IFFALSE 28319
// viewRange := 16 ;
28311: LD_ADDR_VAR 0 7
28315: PUSH
28316: LD_INT 16
28318: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28319: LD_VAR 0 1
28323: PPUSH
28324: LD_VAR 0 2
28328: PPUSH
28329: LD_VAR 0 3
28333: PPUSH
28334: CALL_OW 297
28338: PUSH
28339: LD_VAR 0 5
28343: GREATER
28344: IFFALSE 28423
// begin ComMoveXY ( unit , x , y ) ;
28346: LD_VAR 0 1
28350: PPUSH
28351: LD_VAR 0 2
28355: PPUSH
28356: LD_VAR 0 3
28360: PPUSH
28361: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28365: LD_INT 35
28367: PPUSH
28368: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28372: LD_VAR 0 1
28376: PPUSH
28377: LD_VAR 0 2
28381: PPUSH
28382: LD_VAR 0 3
28386: PPUSH
28387: CALL 64198 0 3
28391: NOT
28392: IFFALSE 28396
// exit ;
28394: GO 28650
// until GetDistUnitXY ( unit , x , y ) < dist ;
28396: LD_VAR 0 1
28400: PPUSH
28401: LD_VAR 0 2
28405: PPUSH
28406: LD_VAR 0 3
28410: PPUSH
28411: CALL_OW 297
28415: PUSH
28416: LD_VAR 0 5
28420: LESS
28421: IFFALSE 28365
// end ; ComTurnXY ( unit , x , y ) ;
28423: LD_VAR 0 1
28427: PPUSH
28428: LD_VAR 0 2
28432: PPUSH
28433: LD_VAR 0 3
28437: PPUSH
28438: CALL_OW 118
// wait ( 5 ) ;
28442: LD_INT 5
28444: PPUSH
28445: CALL_OW 67
// _d := GetDir ( unit ) ;
28449: LD_ADDR_VAR 0 10
28453: PUSH
28454: LD_VAR 0 1
28458: PPUSH
28459: CALL_OW 254
28463: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28464: LD_ADDR_VAR 0 8
28468: PUSH
28469: LD_VAR 0 1
28473: PPUSH
28474: CALL_OW 250
28478: PPUSH
28479: LD_VAR 0 10
28483: PPUSH
28484: LD_VAR 0 5
28488: PPUSH
28489: CALL_OW 272
28493: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28494: LD_ADDR_VAR 0 9
28498: PUSH
28499: LD_VAR 0 1
28503: PPUSH
28504: CALL_OW 251
28508: PPUSH
28509: LD_VAR 0 10
28513: PPUSH
28514: LD_VAR 0 5
28518: PPUSH
28519: CALL_OW 273
28523: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28524: LD_VAR 0 8
28528: PPUSH
28529: LD_VAR 0 9
28533: PPUSH
28534: CALL_OW 488
28538: NOT
28539: IFFALSE 28543
// exit ;
28541: GO 28650
// ComAnimCustom ( unit , 1 ) ;
28543: LD_VAR 0 1
28547: PPUSH
28548: LD_INT 1
28550: PPUSH
28551: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28555: LD_VAR 0 8
28559: PPUSH
28560: LD_VAR 0 9
28564: PPUSH
28565: LD_VAR 0 6
28569: PPUSH
28570: LD_VAR 0 7
28574: PPUSH
28575: CALL_OW 330
// repeat wait ( 1 ) ;
28579: LD_INT 1
28581: PPUSH
28582: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28586: LD_VAR 0 1
28590: PPUSH
28591: CALL_OW 316
28595: PUSH
28596: LD_VAR 0 1
28600: PPUSH
28601: CALL_OW 314
28605: OR
28606: PUSH
28607: LD_VAR 0 1
28611: PPUSH
28612: CALL_OW 302
28616: NOT
28617: OR
28618: PUSH
28619: LD_VAR 0 1
28623: PPUSH
28624: CALL_OW 301
28628: OR
28629: IFFALSE 28579
// RemoveSeeing ( _x , _y , side ) ;
28631: LD_VAR 0 8
28635: PPUSH
28636: LD_VAR 0 9
28640: PPUSH
28641: LD_VAR 0 6
28645: PPUSH
28646: CALL_OW 331
// end ; end_of_file
28650: LD_VAR 0 4
28654: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28655: LD_INT 0
28657: PPUSH
28658: PPUSH
// if exist_mode then
28659: LD_VAR 0 2
28663: IFFALSE 28688
// unit := CreateCharacter ( prefix & ident ) else
28665: LD_ADDR_VAR 0 5
28669: PUSH
28670: LD_VAR 0 3
28674: PUSH
28675: LD_VAR 0 1
28679: STR
28680: PPUSH
28681: CALL_OW 34
28685: ST_TO_ADDR
28686: GO 28703
// unit := NewCharacter ( ident ) ;
28688: LD_ADDR_VAR 0 5
28692: PUSH
28693: LD_VAR 0 1
28697: PPUSH
28698: CALL_OW 25
28702: ST_TO_ADDR
// result := unit ;
28703: LD_ADDR_VAR 0 4
28707: PUSH
28708: LD_VAR 0 5
28712: ST_TO_ADDR
// end ;
28713: LD_VAR 0 4
28717: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28718: LD_INT 0
28720: PPUSH
28721: PPUSH
// if not side or not nation then
28722: LD_VAR 0 1
28726: NOT
28727: PUSH
28728: LD_VAR 0 2
28732: NOT
28733: OR
28734: IFFALSE 28738
// exit ;
28736: GO 29506
// case nation of nation_american :
28738: LD_VAR 0 2
28742: PUSH
28743: LD_INT 1
28745: DOUBLE
28746: EQUAL
28747: IFTRUE 28751
28749: GO 28965
28751: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28752: LD_ADDR_VAR 0 4
28756: PUSH
28757: LD_INT 35
28759: PUSH
28760: LD_INT 45
28762: PUSH
28763: LD_INT 46
28765: PUSH
28766: LD_INT 47
28768: PUSH
28769: LD_INT 82
28771: PUSH
28772: LD_INT 83
28774: PUSH
28775: LD_INT 84
28777: PUSH
28778: LD_INT 85
28780: PUSH
28781: LD_INT 86
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: LD_INT 2
28789: PUSH
28790: LD_INT 6
28792: PUSH
28793: LD_INT 15
28795: PUSH
28796: LD_INT 16
28798: PUSH
28799: LD_INT 7
28801: PUSH
28802: LD_INT 12
28804: PUSH
28805: LD_INT 13
28807: PUSH
28808: LD_INT 10
28810: PUSH
28811: LD_INT 14
28813: PUSH
28814: LD_INT 20
28816: PUSH
28817: LD_INT 21
28819: PUSH
28820: LD_INT 22
28822: PUSH
28823: LD_INT 25
28825: PUSH
28826: LD_INT 32
28828: PUSH
28829: LD_INT 27
28831: PUSH
28832: LD_INT 36
28834: PUSH
28835: LD_INT 69
28837: PUSH
28838: LD_INT 39
28840: PUSH
28841: LD_INT 34
28843: PUSH
28844: LD_INT 40
28846: PUSH
28847: LD_INT 48
28849: PUSH
28850: LD_INT 49
28852: PUSH
28853: LD_INT 50
28855: PUSH
28856: LD_INT 51
28858: PUSH
28859: LD_INT 52
28861: PUSH
28862: LD_INT 53
28864: PUSH
28865: LD_INT 54
28867: PUSH
28868: LD_INT 55
28870: PUSH
28871: LD_INT 56
28873: PUSH
28874: LD_INT 57
28876: PUSH
28877: LD_INT 58
28879: PUSH
28880: LD_INT 59
28882: PUSH
28883: LD_INT 60
28885: PUSH
28886: LD_INT 61
28888: PUSH
28889: LD_INT 62
28891: PUSH
28892: LD_INT 80
28894: PUSH
28895: LD_INT 82
28897: PUSH
28898: LD_INT 83
28900: PUSH
28901: LD_INT 84
28903: PUSH
28904: LD_INT 85
28906: PUSH
28907: LD_INT 86
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: ST_TO_ADDR
28963: GO 29430
28965: LD_INT 2
28967: DOUBLE
28968: EQUAL
28969: IFTRUE 28973
28971: GO 29199
28973: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28974: LD_ADDR_VAR 0 4
28978: PUSH
28979: LD_INT 35
28981: PUSH
28982: LD_INT 45
28984: PUSH
28985: LD_INT 46
28987: PUSH
28988: LD_INT 47
28990: PUSH
28991: LD_INT 82
28993: PUSH
28994: LD_INT 83
28996: PUSH
28997: LD_INT 84
28999: PUSH
29000: LD_INT 85
29002: PUSH
29003: LD_INT 87
29005: PUSH
29006: LD_INT 70
29008: PUSH
29009: LD_INT 1
29011: PUSH
29012: LD_INT 11
29014: PUSH
29015: LD_INT 3
29017: PUSH
29018: LD_INT 4
29020: PUSH
29021: LD_INT 5
29023: PUSH
29024: LD_INT 6
29026: PUSH
29027: LD_INT 15
29029: PUSH
29030: LD_INT 18
29032: PUSH
29033: LD_INT 7
29035: PUSH
29036: LD_INT 17
29038: PUSH
29039: LD_INT 8
29041: PUSH
29042: LD_INT 20
29044: PUSH
29045: LD_INT 21
29047: PUSH
29048: LD_INT 22
29050: PUSH
29051: LD_INT 72
29053: PUSH
29054: LD_INT 26
29056: PUSH
29057: LD_INT 69
29059: PUSH
29060: LD_INT 39
29062: PUSH
29063: LD_INT 40
29065: PUSH
29066: LD_INT 41
29068: PUSH
29069: LD_INT 42
29071: PUSH
29072: LD_INT 43
29074: PUSH
29075: LD_INT 48
29077: PUSH
29078: LD_INT 49
29080: PUSH
29081: LD_INT 50
29083: PUSH
29084: LD_INT 51
29086: PUSH
29087: LD_INT 52
29089: PUSH
29090: LD_INT 53
29092: PUSH
29093: LD_INT 54
29095: PUSH
29096: LD_INT 55
29098: PUSH
29099: LD_INT 56
29101: PUSH
29102: LD_INT 60
29104: PUSH
29105: LD_INT 61
29107: PUSH
29108: LD_INT 62
29110: PUSH
29111: LD_INT 66
29113: PUSH
29114: LD_INT 67
29116: PUSH
29117: LD_INT 68
29119: PUSH
29120: LD_INT 81
29122: PUSH
29123: LD_INT 82
29125: PUSH
29126: LD_INT 83
29128: PUSH
29129: LD_INT 84
29131: PUSH
29132: LD_INT 85
29134: PUSH
29135: LD_INT 87
29137: PUSH
29138: LD_INT 88
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: ST_TO_ADDR
29197: GO 29430
29199: LD_INT 3
29201: DOUBLE
29202: EQUAL
29203: IFTRUE 29207
29205: GO 29429
29207: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29208: LD_ADDR_VAR 0 4
29212: PUSH
29213: LD_INT 46
29215: PUSH
29216: LD_INT 47
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: LD_INT 2
29224: PUSH
29225: LD_INT 82
29227: PUSH
29228: LD_INT 83
29230: PUSH
29231: LD_INT 84
29233: PUSH
29234: LD_INT 85
29236: PUSH
29237: LD_INT 86
29239: PUSH
29240: LD_INT 11
29242: PUSH
29243: LD_INT 9
29245: PUSH
29246: LD_INT 20
29248: PUSH
29249: LD_INT 19
29251: PUSH
29252: LD_INT 21
29254: PUSH
29255: LD_INT 24
29257: PUSH
29258: LD_INT 22
29260: PUSH
29261: LD_INT 25
29263: PUSH
29264: LD_INT 28
29266: PUSH
29267: LD_INT 29
29269: PUSH
29270: LD_INT 30
29272: PUSH
29273: LD_INT 31
29275: PUSH
29276: LD_INT 37
29278: PUSH
29279: LD_INT 38
29281: PUSH
29282: LD_INT 32
29284: PUSH
29285: LD_INT 27
29287: PUSH
29288: LD_INT 33
29290: PUSH
29291: LD_INT 69
29293: PUSH
29294: LD_INT 39
29296: PUSH
29297: LD_INT 34
29299: PUSH
29300: LD_INT 40
29302: PUSH
29303: LD_INT 71
29305: PUSH
29306: LD_INT 23
29308: PUSH
29309: LD_INT 44
29311: PUSH
29312: LD_INT 48
29314: PUSH
29315: LD_INT 49
29317: PUSH
29318: LD_INT 50
29320: PUSH
29321: LD_INT 51
29323: PUSH
29324: LD_INT 52
29326: PUSH
29327: LD_INT 53
29329: PUSH
29330: LD_INT 54
29332: PUSH
29333: LD_INT 55
29335: PUSH
29336: LD_INT 56
29338: PUSH
29339: LD_INT 57
29341: PUSH
29342: LD_INT 58
29344: PUSH
29345: LD_INT 59
29347: PUSH
29348: LD_INT 63
29350: PUSH
29351: LD_INT 64
29353: PUSH
29354: LD_INT 65
29356: PUSH
29357: LD_INT 82
29359: PUSH
29360: LD_INT 83
29362: PUSH
29363: LD_INT 84
29365: PUSH
29366: LD_INT 85
29368: PUSH
29369: LD_INT 86
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: ST_TO_ADDR
29427: GO 29430
29429: POP
// if state > - 1 and state < 3 then
29430: LD_VAR 0 3
29434: PUSH
29435: LD_INT 1
29437: NEG
29438: GREATER
29439: PUSH
29440: LD_VAR 0 3
29444: PUSH
29445: LD_INT 3
29447: LESS
29448: AND
29449: IFFALSE 29506
// for i in result do
29451: LD_ADDR_VAR 0 5
29455: PUSH
29456: LD_VAR 0 4
29460: PUSH
29461: FOR_IN
29462: IFFALSE 29504
// if GetTech ( i , side ) <> state then
29464: LD_VAR 0 5
29468: PPUSH
29469: LD_VAR 0 1
29473: PPUSH
29474: CALL_OW 321
29478: PUSH
29479: LD_VAR 0 3
29483: NONEQUAL
29484: IFFALSE 29502
// result := result diff i ;
29486: LD_ADDR_VAR 0 4
29490: PUSH
29491: LD_VAR 0 4
29495: PUSH
29496: LD_VAR 0 5
29500: DIFF
29501: ST_TO_ADDR
29502: GO 29461
29504: POP
29505: POP
// end ;
29506: LD_VAR 0 4
29510: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29511: LD_INT 0
29513: PPUSH
29514: PPUSH
29515: PPUSH
// result := true ;
29516: LD_ADDR_VAR 0 3
29520: PUSH
29521: LD_INT 1
29523: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29524: LD_ADDR_VAR 0 5
29528: PUSH
29529: LD_VAR 0 2
29533: PPUSH
29534: CALL_OW 480
29538: ST_TO_ADDR
// if not tmp then
29539: LD_VAR 0 5
29543: NOT
29544: IFFALSE 29548
// exit ;
29546: GO 29597
// for i in tmp do
29548: LD_ADDR_VAR 0 4
29552: PUSH
29553: LD_VAR 0 5
29557: PUSH
29558: FOR_IN
29559: IFFALSE 29595
// if GetTech ( i , side ) <> state_researched then
29561: LD_VAR 0 4
29565: PPUSH
29566: LD_VAR 0 1
29570: PPUSH
29571: CALL_OW 321
29575: PUSH
29576: LD_INT 2
29578: NONEQUAL
29579: IFFALSE 29593
// begin result := false ;
29581: LD_ADDR_VAR 0 3
29585: PUSH
29586: LD_INT 0
29588: ST_TO_ADDR
// exit ;
29589: POP
29590: POP
29591: GO 29597
// end ;
29593: GO 29558
29595: POP
29596: POP
// end ;
29597: LD_VAR 0 3
29601: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29602: LD_INT 0
29604: PPUSH
29605: PPUSH
29606: PPUSH
29607: PPUSH
29608: PPUSH
29609: PPUSH
29610: PPUSH
29611: PPUSH
29612: PPUSH
29613: PPUSH
29614: PPUSH
29615: PPUSH
29616: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29617: LD_VAR 0 1
29621: NOT
29622: PUSH
29623: LD_VAR 0 1
29627: PPUSH
29628: CALL_OW 257
29632: PUSH
29633: LD_INT 9
29635: NONEQUAL
29636: OR
29637: IFFALSE 29641
// exit ;
29639: GO 30214
// side := GetSide ( unit ) ;
29641: LD_ADDR_VAR 0 9
29645: PUSH
29646: LD_VAR 0 1
29650: PPUSH
29651: CALL_OW 255
29655: ST_TO_ADDR
// tech_space := tech_spacanom ;
29656: LD_ADDR_VAR 0 12
29660: PUSH
29661: LD_INT 29
29663: ST_TO_ADDR
// tech_time := tech_taurad ;
29664: LD_ADDR_VAR 0 13
29668: PUSH
29669: LD_INT 28
29671: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29672: LD_ADDR_VAR 0 11
29676: PUSH
29677: LD_VAR 0 1
29681: PPUSH
29682: CALL_OW 310
29686: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29687: LD_VAR 0 11
29691: PPUSH
29692: CALL_OW 247
29696: PUSH
29697: LD_INT 2
29699: EQUAL
29700: IFFALSE 29704
// exit ;
29702: GO 30214
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29704: LD_ADDR_VAR 0 8
29708: PUSH
29709: LD_INT 81
29711: PUSH
29712: LD_VAR 0 9
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 3
29723: PUSH
29724: LD_INT 21
29726: PUSH
29727: LD_INT 3
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PPUSH
29742: CALL_OW 69
29746: ST_TO_ADDR
// if not tmp then
29747: LD_VAR 0 8
29751: NOT
29752: IFFALSE 29756
// exit ;
29754: GO 30214
// if in_unit then
29756: LD_VAR 0 11
29760: IFFALSE 29784
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29762: LD_ADDR_VAR 0 10
29766: PUSH
29767: LD_VAR 0 8
29771: PPUSH
29772: LD_VAR 0 11
29776: PPUSH
29777: CALL_OW 74
29781: ST_TO_ADDR
29782: GO 29804
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29784: LD_ADDR_VAR 0 10
29788: PUSH
29789: LD_VAR 0 8
29793: PPUSH
29794: LD_VAR 0 1
29798: PPUSH
29799: CALL_OW 74
29803: ST_TO_ADDR
// if not enemy then
29804: LD_VAR 0 10
29808: NOT
29809: IFFALSE 29813
// exit ;
29811: GO 30214
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29813: LD_VAR 0 11
29817: PUSH
29818: LD_VAR 0 11
29822: PPUSH
29823: LD_VAR 0 10
29827: PPUSH
29828: CALL_OW 296
29832: PUSH
29833: LD_INT 13
29835: GREATER
29836: AND
29837: PUSH
29838: LD_VAR 0 1
29842: PPUSH
29843: LD_VAR 0 10
29847: PPUSH
29848: CALL_OW 296
29852: PUSH
29853: LD_INT 12
29855: GREATER
29856: OR
29857: IFFALSE 29861
// exit ;
29859: GO 30214
// missile := [ 1 ] ;
29861: LD_ADDR_VAR 0 14
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: EMPTY
29870: LIST
29871: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29872: LD_VAR 0 9
29876: PPUSH
29877: LD_VAR 0 12
29881: PPUSH
29882: CALL_OW 325
29886: IFFALSE 29915
// missile := Insert ( missile , missile + 1 , 2 ) ;
29888: LD_ADDR_VAR 0 14
29892: PUSH
29893: LD_VAR 0 14
29897: PPUSH
29898: LD_VAR 0 14
29902: PUSH
29903: LD_INT 1
29905: PLUS
29906: PPUSH
29907: LD_INT 2
29909: PPUSH
29910: CALL_OW 2
29914: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29915: LD_VAR 0 9
29919: PPUSH
29920: LD_VAR 0 13
29924: PPUSH
29925: CALL_OW 325
29929: PUSH
29930: LD_VAR 0 10
29934: PPUSH
29935: CALL_OW 255
29939: PPUSH
29940: LD_VAR 0 13
29944: PPUSH
29945: CALL_OW 325
29949: NOT
29950: AND
29951: IFFALSE 29980
// missile := Insert ( missile , missile + 1 , 3 ) ;
29953: LD_ADDR_VAR 0 14
29957: PUSH
29958: LD_VAR 0 14
29962: PPUSH
29963: LD_VAR 0 14
29967: PUSH
29968: LD_INT 1
29970: PLUS
29971: PPUSH
29972: LD_INT 3
29974: PPUSH
29975: CALL_OW 2
29979: ST_TO_ADDR
// if missile < 2 then
29980: LD_VAR 0 14
29984: PUSH
29985: LD_INT 2
29987: LESS
29988: IFFALSE 29992
// exit ;
29990: GO 30214
// x := GetX ( enemy ) ;
29992: LD_ADDR_VAR 0 4
29996: PUSH
29997: LD_VAR 0 10
30001: PPUSH
30002: CALL_OW 250
30006: ST_TO_ADDR
// y := GetY ( enemy ) ;
30007: LD_ADDR_VAR 0 5
30011: PUSH
30012: LD_VAR 0 10
30016: PPUSH
30017: CALL_OW 251
30021: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30022: LD_ADDR_VAR 0 6
30026: PUSH
30027: LD_VAR 0 4
30031: PUSH
30032: LD_INT 1
30034: NEG
30035: PPUSH
30036: LD_INT 1
30038: PPUSH
30039: CALL_OW 12
30043: PLUS
30044: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30045: LD_ADDR_VAR 0 7
30049: PUSH
30050: LD_VAR 0 5
30054: PUSH
30055: LD_INT 1
30057: NEG
30058: PPUSH
30059: LD_INT 1
30061: PPUSH
30062: CALL_OW 12
30066: PLUS
30067: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30068: LD_VAR 0 6
30072: PPUSH
30073: LD_VAR 0 7
30077: PPUSH
30078: CALL_OW 488
30082: NOT
30083: IFFALSE 30105
// begin _x := x ;
30085: LD_ADDR_VAR 0 6
30089: PUSH
30090: LD_VAR 0 4
30094: ST_TO_ADDR
// _y := y ;
30095: LD_ADDR_VAR 0 7
30099: PUSH
30100: LD_VAR 0 5
30104: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30105: LD_ADDR_VAR 0 3
30109: PUSH
30110: LD_INT 1
30112: PPUSH
30113: LD_VAR 0 14
30117: PPUSH
30118: CALL_OW 12
30122: ST_TO_ADDR
// case i of 1 :
30123: LD_VAR 0 3
30127: PUSH
30128: LD_INT 1
30130: DOUBLE
30131: EQUAL
30132: IFTRUE 30136
30134: GO 30153
30136: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30137: LD_VAR 0 1
30141: PPUSH
30142: LD_VAR 0 10
30146: PPUSH
30147: CALL_OW 115
30151: GO 30214
30153: LD_INT 2
30155: DOUBLE
30156: EQUAL
30157: IFTRUE 30161
30159: GO 30183
30161: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30162: LD_VAR 0 1
30166: PPUSH
30167: LD_VAR 0 6
30171: PPUSH
30172: LD_VAR 0 7
30176: PPUSH
30177: CALL_OW 153
30181: GO 30214
30183: LD_INT 3
30185: DOUBLE
30186: EQUAL
30187: IFTRUE 30191
30189: GO 30213
30191: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30192: LD_VAR 0 1
30196: PPUSH
30197: LD_VAR 0 6
30201: PPUSH
30202: LD_VAR 0 7
30206: PPUSH
30207: CALL_OW 154
30211: GO 30214
30213: POP
// end ;
30214: LD_VAR 0 2
30218: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30219: LD_INT 0
30221: PPUSH
30222: PPUSH
30223: PPUSH
30224: PPUSH
30225: PPUSH
30226: PPUSH
// if not unit or not building then
30227: LD_VAR 0 1
30231: NOT
30232: PUSH
30233: LD_VAR 0 2
30237: NOT
30238: OR
30239: IFFALSE 30243
// exit ;
30241: GO 30401
// x := GetX ( building ) ;
30243: LD_ADDR_VAR 0 5
30247: PUSH
30248: LD_VAR 0 2
30252: PPUSH
30253: CALL_OW 250
30257: ST_TO_ADDR
// y := GetY ( building ) ;
30258: LD_ADDR_VAR 0 6
30262: PUSH
30263: LD_VAR 0 2
30267: PPUSH
30268: CALL_OW 251
30272: ST_TO_ADDR
// for i = 0 to 5 do
30273: LD_ADDR_VAR 0 4
30277: PUSH
30278: DOUBLE
30279: LD_INT 0
30281: DEC
30282: ST_TO_ADDR
30283: LD_INT 5
30285: PUSH
30286: FOR_TO
30287: IFFALSE 30399
// begin _x := ShiftX ( x , i , 3 ) ;
30289: LD_ADDR_VAR 0 7
30293: PUSH
30294: LD_VAR 0 5
30298: PPUSH
30299: LD_VAR 0 4
30303: PPUSH
30304: LD_INT 3
30306: PPUSH
30307: CALL_OW 272
30311: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30312: LD_ADDR_VAR 0 8
30316: PUSH
30317: LD_VAR 0 6
30321: PPUSH
30322: LD_VAR 0 4
30326: PPUSH
30327: LD_INT 3
30329: PPUSH
30330: CALL_OW 273
30334: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30335: LD_VAR 0 7
30339: PPUSH
30340: LD_VAR 0 8
30344: PPUSH
30345: CALL_OW 488
30349: NOT
30350: IFFALSE 30354
// continue ;
30352: GO 30286
// if HexInfo ( _x , _y ) = 0 then
30354: LD_VAR 0 7
30358: PPUSH
30359: LD_VAR 0 8
30363: PPUSH
30364: CALL_OW 428
30368: PUSH
30369: LD_INT 0
30371: EQUAL
30372: IFFALSE 30397
// begin ComMoveXY ( unit , _x , _y ) ;
30374: LD_VAR 0 1
30378: PPUSH
30379: LD_VAR 0 7
30383: PPUSH
30384: LD_VAR 0 8
30388: PPUSH
30389: CALL_OW 111
// exit ;
30393: POP
30394: POP
30395: GO 30401
// end ; end ;
30397: GO 30286
30399: POP
30400: POP
// end ;
30401: LD_VAR 0 3
30405: RET
// export function ScanBase ( side , base_area ) ; begin
30406: LD_INT 0
30408: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30409: LD_ADDR_VAR 0 3
30413: PUSH
30414: LD_VAR 0 2
30418: PPUSH
30419: LD_INT 81
30421: PUSH
30422: LD_VAR 0 1
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PPUSH
30431: CALL_OW 70
30435: ST_TO_ADDR
// end ;
30436: LD_VAR 0 3
30440: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30441: LD_INT 0
30443: PPUSH
30444: PPUSH
30445: PPUSH
30446: PPUSH
// result := false ;
30447: LD_ADDR_VAR 0 2
30451: PUSH
30452: LD_INT 0
30454: ST_TO_ADDR
// side := GetSide ( unit ) ;
30455: LD_ADDR_VAR 0 3
30459: PUSH
30460: LD_VAR 0 1
30464: PPUSH
30465: CALL_OW 255
30469: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30470: LD_ADDR_VAR 0 4
30474: PUSH
30475: LD_VAR 0 1
30479: PPUSH
30480: CALL_OW 248
30484: ST_TO_ADDR
// case nat of 1 :
30485: LD_VAR 0 4
30489: PUSH
30490: LD_INT 1
30492: DOUBLE
30493: EQUAL
30494: IFTRUE 30498
30496: GO 30509
30498: POP
// tech := tech_lassight ; 2 :
30499: LD_ADDR_VAR 0 5
30503: PUSH
30504: LD_INT 12
30506: ST_TO_ADDR
30507: GO 30548
30509: LD_INT 2
30511: DOUBLE
30512: EQUAL
30513: IFTRUE 30517
30515: GO 30528
30517: POP
// tech := tech_mortar ; 3 :
30518: LD_ADDR_VAR 0 5
30522: PUSH
30523: LD_INT 41
30525: ST_TO_ADDR
30526: GO 30548
30528: LD_INT 3
30530: DOUBLE
30531: EQUAL
30532: IFTRUE 30536
30534: GO 30547
30536: POP
// tech := tech_bazooka ; end ;
30537: LD_ADDR_VAR 0 5
30541: PUSH
30542: LD_INT 44
30544: ST_TO_ADDR
30545: GO 30548
30547: POP
// if Researched ( side , tech ) then
30548: LD_VAR 0 3
30552: PPUSH
30553: LD_VAR 0 5
30557: PPUSH
30558: CALL_OW 325
30562: IFFALSE 30589
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30564: LD_ADDR_VAR 0 2
30568: PUSH
30569: LD_INT 5
30571: PUSH
30572: LD_INT 8
30574: PUSH
30575: LD_INT 9
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: PUSH
30583: LD_VAR 0 4
30587: ARRAY
30588: ST_TO_ADDR
// end ;
30589: LD_VAR 0 2
30593: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30594: LD_INT 0
30596: PPUSH
30597: PPUSH
30598: PPUSH
// if not mines then
30599: LD_VAR 0 2
30603: NOT
30604: IFFALSE 30608
// exit ;
30606: GO 30752
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30608: LD_ADDR_VAR 0 5
30612: PUSH
30613: LD_INT 81
30615: PUSH
30616: LD_VAR 0 1
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 3
30627: PUSH
30628: LD_INT 21
30630: PUSH
30631: LD_INT 3
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PPUSH
30646: CALL_OW 69
30650: ST_TO_ADDR
// for i in mines do
30651: LD_ADDR_VAR 0 4
30655: PUSH
30656: LD_VAR 0 2
30660: PUSH
30661: FOR_IN
30662: IFFALSE 30750
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30664: LD_VAR 0 4
30668: PUSH
30669: LD_INT 1
30671: ARRAY
30672: PPUSH
30673: LD_VAR 0 4
30677: PUSH
30678: LD_INT 2
30680: ARRAY
30681: PPUSH
30682: CALL_OW 458
30686: NOT
30687: IFFALSE 30691
// continue ;
30689: GO 30661
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30691: LD_VAR 0 4
30695: PUSH
30696: LD_INT 1
30698: ARRAY
30699: PPUSH
30700: LD_VAR 0 4
30704: PUSH
30705: LD_INT 2
30707: ARRAY
30708: PPUSH
30709: CALL_OW 428
30713: PUSH
30714: LD_VAR 0 5
30718: IN
30719: IFFALSE 30748
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30721: LD_VAR 0 4
30725: PUSH
30726: LD_INT 1
30728: ARRAY
30729: PPUSH
30730: LD_VAR 0 4
30734: PUSH
30735: LD_INT 2
30737: ARRAY
30738: PPUSH
30739: LD_VAR 0 1
30743: PPUSH
30744: CALL_OW 456
// end ;
30748: GO 30661
30750: POP
30751: POP
// end ;
30752: LD_VAR 0 3
30756: RET
// export function Count ( array ) ; var i ; begin
30757: LD_INT 0
30759: PPUSH
30760: PPUSH
// result := 0 ;
30761: LD_ADDR_VAR 0 2
30765: PUSH
30766: LD_INT 0
30768: ST_TO_ADDR
// for i in array do
30769: LD_ADDR_VAR 0 3
30773: PUSH
30774: LD_VAR 0 1
30778: PUSH
30779: FOR_IN
30780: IFFALSE 30804
// if i then
30782: LD_VAR 0 3
30786: IFFALSE 30802
// result := result + 1 ;
30788: LD_ADDR_VAR 0 2
30792: PUSH
30793: LD_VAR 0 2
30797: PUSH
30798: LD_INT 1
30800: PLUS
30801: ST_TO_ADDR
30802: GO 30779
30804: POP
30805: POP
// end ;
30806: LD_VAR 0 2
30810: RET
// export function IsEmpty ( building ) ; begin
30811: LD_INT 0
30813: PPUSH
// if not building then
30814: LD_VAR 0 1
30818: NOT
30819: IFFALSE 30823
// exit ;
30821: GO 30866
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30823: LD_ADDR_VAR 0 2
30827: PUSH
30828: LD_VAR 0 1
30832: PUSH
30833: LD_INT 22
30835: PUSH
30836: LD_VAR 0 1
30840: PPUSH
30841: CALL_OW 255
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 58
30852: PUSH
30853: EMPTY
30854: LIST
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PPUSH
30860: CALL_OW 69
30864: IN
30865: ST_TO_ADDR
// end ;
30866: LD_VAR 0 2
30870: RET
// export function IsNotFull ( building ) ; begin
30871: LD_INT 0
30873: PPUSH
// if not building then
30874: LD_VAR 0 1
30878: NOT
30879: IFFALSE 30883
// exit ;
30881: GO 30902
// result := UnitsInside ( building ) < 6 ;
30883: LD_ADDR_VAR 0 2
30887: PUSH
30888: LD_VAR 0 1
30892: PPUSH
30893: CALL_OW 313
30897: PUSH
30898: LD_INT 6
30900: LESS
30901: ST_TO_ADDR
// end ;
30902: LD_VAR 0 2
30906: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30907: LD_INT 0
30909: PPUSH
30910: PPUSH
30911: PPUSH
30912: PPUSH
// tmp := [ ] ;
30913: LD_ADDR_VAR 0 3
30917: PUSH
30918: EMPTY
30919: ST_TO_ADDR
// list := [ ] ;
30920: LD_ADDR_VAR 0 5
30924: PUSH
30925: EMPTY
30926: ST_TO_ADDR
// for i = 16 to 25 do
30927: LD_ADDR_VAR 0 4
30931: PUSH
30932: DOUBLE
30933: LD_INT 16
30935: DEC
30936: ST_TO_ADDR
30937: LD_INT 25
30939: PUSH
30940: FOR_TO
30941: IFFALSE 31014
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30943: LD_ADDR_VAR 0 3
30947: PUSH
30948: LD_VAR 0 3
30952: PUSH
30953: LD_INT 22
30955: PUSH
30956: LD_VAR 0 1
30960: PPUSH
30961: CALL_OW 255
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 91
30972: PUSH
30973: LD_VAR 0 1
30977: PUSH
30978: LD_INT 6
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 30
30988: PUSH
30989: LD_VAR 0 4
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: LIST
31002: PUSH
31003: EMPTY
31004: LIST
31005: PPUSH
31006: CALL_OW 69
31010: ADD
31011: ST_TO_ADDR
31012: GO 30940
31014: POP
31015: POP
// for i = 1 to tmp do
31016: LD_ADDR_VAR 0 4
31020: PUSH
31021: DOUBLE
31022: LD_INT 1
31024: DEC
31025: ST_TO_ADDR
31026: LD_VAR 0 3
31030: PUSH
31031: FOR_TO
31032: IFFALSE 31120
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31034: LD_ADDR_VAR 0 5
31038: PUSH
31039: LD_VAR 0 5
31043: PUSH
31044: LD_VAR 0 3
31048: PUSH
31049: LD_VAR 0 4
31053: ARRAY
31054: PPUSH
31055: CALL_OW 266
31059: PUSH
31060: LD_VAR 0 3
31064: PUSH
31065: LD_VAR 0 4
31069: ARRAY
31070: PPUSH
31071: CALL_OW 250
31075: PUSH
31076: LD_VAR 0 3
31080: PUSH
31081: LD_VAR 0 4
31085: ARRAY
31086: PPUSH
31087: CALL_OW 251
31091: PUSH
31092: LD_VAR 0 3
31096: PUSH
31097: LD_VAR 0 4
31101: ARRAY
31102: PPUSH
31103: CALL_OW 254
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: PUSH
31114: EMPTY
31115: LIST
31116: ADD
31117: ST_TO_ADDR
31118: GO 31031
31120: POP
31121: POP
// result := list ;
31122: LD_ADDR_VAR 0 2
31126: PUSH
31127: LD_VAR 0 5
31131: ST_TO_ADDR
// end ;
31132: LD_VAR 0 2
31136: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31137: LD_INT 0
31139: PPUSH
31140: PPUSH
31141: PPUSH
31142: PPUSH
31143: PPUSH
31144: PPUSH
31145: PPUSH
// if not factory then
31146: LD_VAR 0 1
31150: NOT
31151: IFFALSE 31155
// exit ;
31153: GO 31748
// if control = control_apeman then
31155: LD_VAR 0 4
31159: PUSH
31160: LD_INT 5
31162: EQUAL
31163: IFFALSE 31272
// begin tmp := UnitsInside ( factory ) ;
31165: LD_ADDR_VAR 0 8
31169: PUSH
31170: LD_VAR 0 1
31174: PPUSH
31175: CALL_OW 313
31179: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31180: LD_VAR 0 8
31184: PPUSH
31185: LD_INT 25
31187: PUSH
31188: LD_INT 12
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PPUSH
31195: CALL_OW 72
31199: NOT
31200: IFFALSE 31210
// control := control_manual ;
31202: LD_ADDR_VAR 0 4
31206: PUSH
31207: LD_INT 1
31209: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31210: LD_ADDR_VAR 0 8
31214: PUSH
31215: LD_VAR 0 1
31219: PPUSH
31220: CALL 30907 0 1
31224: ST_TO_ADDR
// if tmp then
31225: LD_VAR 0 8
31229: IFFALSE 31272
// begin for i in tmp do
31231: LD_ADDR_VAR 0 7
31235: PUSH
31236: LD_VAR 0 8
31240: PUSH
31241: FOR_IN
31242: IFFALSE 31270
// if i [ 1 ] = b_ext_radio then
31244: LD_VAR 0 7
31248: PUSH
31249: LD_INT 1
31251: ARRAY
31252: PUSH
31253: LD_INT 22
31255: EQUAL
31256: IFFALSE 31268
// begin control := control_remote ;
31258: LD_ADDR_VAR 0 4
31262: PUSH
31263: LD_INT 2
31265: ST_TO_ADDR
// break ;
31266: GO 31270
// end ;
31268: GO 31241
31270: POP
31271: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31272: LD_VAR 0 1
31276: PPUSH
31277: LD_VAR 0 2
31281: PPUSH
31282: LD_VAR 0 3
31286: PPUSH
31287: LD_VAR 0 4
31291: PPUSH
31292: LD_VAR 0 5
31296: PPUSH
31297: CALL_OW 448
31301: IFFALSE 31336
// begin result := [ chassis , engine , control , weapon ] ;
31303: LD_ADDR_VAR 0 6
31307: PUSH
31308: LD_VAR 0 2
31312: PUSH
31313: LD_VAR 0 3
31317: PUSH
31318: LD_VAR 0 4
31322: PUSH
31323: LD_VAR 0 5
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: ST_TO_ADDR
// exit ;
31334: GO 31748
// end ; _chassis := AvailableChassisList ( factory ) ;
31336: LD_ADDR_VAR 0 9
31340: PUSH
31341: LD_VAR 0 1
31345: PPUSH
31346: CALL_OW 475
31350: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31351: LD_ADDR_VAR 0 11
31355: PUSH
31356: LD_VAR 0 1
31360: PPUSH
31361: CALL_OW 476
31365: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31366: LD_ADDR_VAR 0 12
31370: PUSH
31371: LD_VAR 0 1
31375: PPUSH
31376: CALL_OW 477
31380: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31381: LD_ADDR_VAR 0 10
31385: PUSH
31386: LD_VAR 0 1
31390: PPUSH
31391: CALL_OW 478
31395: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31396: LD_VAR 0 9
31400: NOT
31401: PUSH
31402: LD_VAR 0 11
31406: NOT
31407: OR
31408: PUSH
31409: LD_VAR 0 12
31413: NOT
31414: OR
31415: PUSH
31416: LD_VAR 0 10
31420: NOT
31421: OR
31422: IFFALSE 31457
// begin result := [ chassis , engine , control , weapon ] ;
31424: LD_ADDR_VAR 0 6
31428: PUSH
31429: LD_VAR 0 2
31433: PUSH
31434: LD_VAR 0 3
31438: PUSH
31439: LD_VAR 0 4
31443: PUSH
31444: LD_VAR 0 5
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: ST_TO_ADDR
// exit ;
31455: GO 31748
// end ; if not chassis in _chassis then
31457: LD_VAR 0 2
31461: PUSH
31462: LD_VAR 0 9
31466: IN
31467: NOT
31468: IFFALSE 31494
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31470: LD_ADDR_VAR 0 2
31474: PUSH
31475: LD_VAR 0 9
31479: PUSH
31480: LD_INT 1
31482: PPUSH
31483: LD_VAR 0 9
31487: PPUSH
31488: CALL_OW 12
31492: ARRAY
31493: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31494: LD_VAR 0 2
31498: PPUSH
31499: LD_VAR 0 3
31503: PPUSH
31504: CALL 31753 0 2
31508: NOT
31509: IFFALSE 31568
// repeat engine := _engine [ 1 ] ;
31511: LD_ADDR_VAR 0 3
31515: PUSH
31516: LD_VAR 0 11
31520: PUSH
31521: LD_INT 1
31523: ARRAY
31524: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31525: LD_ADDR_VAR 0 11
31529: PUSH
31530: LD_VAR 0 11
31534: PPUSH
31535: LD_INT 1
31537: PPUSH
31538: CALL_OW 3
31542: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31543: LD_VAR 0 2
31547: PPUSH
31548: LD_VAR 0 3
31552: PPUSH
31553: CALL 31753 0 2
31557: PUSH
31558: LD_VAR 0 11
31562: PUSH
31563: EMPTY
31564: EQUAL
31565: OR
31566: IFFALSE 31511
// if not control in _control then
31568: LD_VAR 0 4
31572: PUSH
31573: LD_VAR 0 12
31577: IN
31578: NOT
31579: IFFALSE 31605
// control := _control [ rand ( 1 , _control ) ] ;
31581: LD_ADDR_VAR 0 4
31585: PUSH
31586: LD_VAR 0 12
31590: PUSH
31591: LD_INT 1
31593: PPUSH
31594: LD_VAR 0 12
31598: PPUSH
31599: CALL_OW 12
31603: ARRAY
31604: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31605: LD_VAR 0 2
31609: PPUSH
31610: LD_VAR 0 5
31614: PPUSH
31615: CALL 31973 0 2
31619: NOT
31620: IFFALSE 31679
// repeat weapon := _weapon [ 1 ] ;
31622: LD_ADDR_VAR 0 5
31626: PUSH
31627: LD_VAR 0 10
31631: PUSH
31632: LD_INT 1
31634: ARRAY
31635: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31636: LD_ADDR_VAR 0 10
31640: PUSH
31641: LD_VAR 0 10
31645: PPUSH
31646: LD_INT 1
31648: PPUSH
31649: CALL_OW 3
31653: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31654: LD_VAR 0 2
31658: PPUSH
31659: LD_VAR 0 5
31663: PPUSH
31664: CALL 31973 0 2
31668: PUSH
31669: LD_VAR 0 10
31673: PUSH
31674: EMPTY
31675: EQUAL
31676: OR
31677: IFFALSE 31622
// result := [ ] ;
31679: LD_ADDR_VAR 0 6
31683: PUSH
31684: EMPTY
31685: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31686: LD_VAR 0 1
31690: PPUSH
31691: LD_VAR 0 2
31695: PPUSH
31696: LD_VAR 0 3
31700: PPUSH
31701: LD_VAR 0 4
31705: PPUSH
31706: LD_VAR 0 5
31710: PPUSH
31711: CALL_OW 448
31715: IFFALSE 31748
// result := [ chassis , engine , control , weapon ] ;
31717: LD_ADDR_VAR 0 6
31721: PUSH
31722: LD_VAR 0 2
31726: PUSH
31727: LD_VAR 0 3
31731: PUSH
31732: LD_VAR 0 4
31736: PUSH
31737: LD_VAR 0 5
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: ST_TO_ADDR
// end ;
31748: LD_VAR 0 6
31752: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31753: LD_INT 0
31755: PPUSH
// if not chassis or not engine then
31756: LD_VAR 0 1
31760: NOT
31761: PUSH
31762: LD_VAR 0 2
31766: NOT
31767: OR
31768: IFFALSE 31772
// exit ;
31770: GO 31968
// case engine of engine_solar :
31772: LD_VAR 0 2
31776: PUSH
31777: LD_INT 2
31779: DOUBLE
31780: EQUAL
31781: IFTRUE 31785
31783: GO 31823
31785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31786: LD_ADDR_VAR 0 3
31790: PUSH
31791: LD_INT 11
31793: PUSH
31794: LD_INT 12
31796: PUSH
31797: LD_INT 13
31799: PUSH
31800: LD_INT 14
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: LD_INT 2
31808: PUSH
31809: LD_INT 3
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: ST_TO_ADDR
31821: GO 31952
31823: LD_INT 1
31825: DOUBLE
31826: EQUAL
31827: IFTRUE 31831
31829: GO 31893
31831: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31832: LD_ADDR_VAR 0 3
31836: PUSH
31837: LD_INT 11
31839: PUSH
31840: LD_INT 12
31842: PUSH
31843: LD_INT 13
31845: PUSH
31846: LD_INT 14
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: LD_INT 3
31857: PUSH
31858: LD_INT 4
31860: PUSH
31861: LD_INT 5
31863: PUSH
31864: LD_INT 21
31866: PUSH
31867: LD_INT 23
31869: PUSH
31870: LD_INT 22
31872: PUSH
31873: LD_INT 24
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: ST_TO_ADDR
31891: GO 31952
31893: LD_INT 3
31895: DOUBLE
31896: EQUAL
31897: IFTRUE 31901
31899: GO 31951
31901: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31902: LD_ADDR_VAR 0 3
31906: PUSH
31907: LD_INT 13
31909: PUSH
31910: LD_INT 14
31912: PUSH
31913: LD_INT 2
31915: PUSH
31916: LD_INT 3
31918: PUSH
31919: LD_INT 4
31921: PUSH
31922: LD_INT 5
31924: PUSH
31925: LD_INT 21
31927: PUSH
31928: LD_INT 22
31930: PUSH
31931: LD_INT 23
31933: PUSH
31934: LD_INT 24
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: ST_TO_ADDR
31949: GO 31952
31951: POP
// result := ( chassis in result ) ;
31952: LD_ADDR_VAR 0 3
31956: PUSH
31957: LD_VAR 0 1
31961: PUSH
31962: LD_VAR 0 3
31966: IN
31967: ST_TO_ADDR
// end ;
31968: LD_VAR 0 3
31972: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31973: LD_INT 0
31975: PPUSH
// if not chassis or not weapon then
31976: LD_VAR 0 1
31980: NOT
31981: PUSH
31982: LD_VAR 0 2
31986: NOT
31987: OR
31988: IFFALSE 31992
// exit ;
31990: GO 33054
// case weapon of us_machine_gun :
31992: LD_VAR 0 2
31996: PUSH
31997: LD_INT 2
31999: DOUBLE
32000: EQUAL
32001: IFTRUE 32005
32003: GO 32035
32005: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32006: LD_ADDR_VAR 0 3
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: LD_INT 2
32016: PUSH
32017: LD_INT 3
32019: PUSH
32020: LD_INT 4
32022: PUSH
32023: LD_INT 5
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: ST_TO_ADDR
32033: GO 33038
32035: LD_INT 3
32037: DOUBLE
32038: EQUAL
32039: IFTRUE 32043
32041: GO 32073
32043: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32044: LD_ADDR_VAR 0 3
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: LD_INT 2
32054: PUSH
32055: LD_INT 3
32057: PUSH
32058: LD_INT 4
32060: PUSH
32061: LD_INT 5
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: ST_TO_ADDR
32071: GO 33038
32073: LD_INT 11
32075: DOUBLE
32076: EQUAL
32077: IFTRUE 32081
32079: GO 32111
32081: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32082: LD_ADDR_VAR 0 3
32086: PUSH
32087: LD_INT 1
32089: PUSH
32090: LD_INT 2
32092: PUSH
32093: LD_INT 3
32095: PUSH
32096: LD_INT 4
32098: PUSH
32099: LD_INT 5
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: ST_TO_ADDR
32109: GO 33038
32111: LD_INT 4
32113: DOUBLE
32114: EQUAL
32115: IFTRUE 32119
32117: GO 32145
32119: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32120: LD_ADDR_VAR 0 3
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: LD_INT 3
32130: PUSH
32131: LD_INT 4
32133: PUSH
32134: LD_INT 5
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: ST_TO_ADDR
32143: GO 33038
32145: LD_INT 5
32147: DOUBLE
32148: EQUAL
32149: IFTRUE 32153
32151: GO 32179
32153: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32154: LD_ADDR_VAR 0 3
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: LD_INT 3
32164: PUSH
32165: LD_INT 4
32167: PUSH
32168: LD_INT 5
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: ST_TO_ADDR
32177: GO 33038
32179: LD_INT 9
32181: DOUBLE
32182: EQUAL
32183: IFTRUE 32187
32185: GO 32213
32187: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32188: LD_ADDR_VAR 0 3
32192: PUSH
32193: LD_INT 2
32195: PUSH
32196: LD_INT 3
32198: PUSH
32199: LD_INT 4
32201: PUSH
32202: LD_INT 5
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: ST_TO_ADDR
32211: GO 33038
32213: LD_INT 7
32215: DOUBLE
32216: EQUAL
32217: IFTRUE 32221
32219: GO 32247
32221: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32222: LD_ADDR_VAR 0 3
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: LD_INT 3
32232: PUSH
32233: LD_INT 4
32235: PUSH
32236: LD_INT 5
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: ST_TO_ADDR
32245: GO 33038
32247: LD_INT 12
32249: DOUBLE
32250: EQUAL
32251: IFTRUE 32255
32253: GO 32281
32255: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32256: LD_ADDR_VAR 0 3
32260: PUSH
32261: LD_INT 2
32263: PUSH
32264: LD_INT 3
32266: PUSH
32267: LD_INT 4
32269: PUSH
32270: LD_INT 5
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: ST_TO_ADDR
32279: GO 33038
32281: LD_INT 13
32283: DOUBLE
32284: EQUAL
32285: IFTRUE 32289
32287: GO 32315
32289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32290: LD_ADDR_VAR 0 3
32294: PUSH
32295: LD_INT 2
32297: PUSH
32298: LD_INT 3
32300: PUSH
32301: LD_INT 4
32303: PUSH
32304: LD_INT 5
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: ST_TO_ADDR
32313: GO 33038
32315: LD_INT 14
32317: DOUBLE
32318: EQUAL
32319: IFTRUE 32323
32321: GO 32341
32323: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32324: LD_ADDR_VAR 0 3
32328: PUSH
32329: LD_INT 4
32331: PUSH
32332: LD_INT 5
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: ST_TO_ADDR
32339: GO 33038
32341: LD_INT 6
32343: DOUBLE
32344: EQUAL
32345: IFTRUE 32349
32347: GO 32367
32349: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32350: LD_ADDR_VAR 0 3
32354: PUSH
32355: LD_INT 4
32357: PUSH
32358: LD_INT 5
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: ST_TO_ADDR
32365: GO 33038
32367: LD_INT 10
32369: DOUBLE
32370: EQUAL
32371: IFTRUE 32375
32373: GO 32393
32375: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32376: LD_ADDR_VAR 0 3
32380: PUSH
32381: LD_INT 4
32383: PUSH
32384: LD_INT 5
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: ST_TO_ADDR
32391: GO 33038
32393: LD_INT 22
32395: DOUBLE
32396: EQUAL
32397: IFTRUE 32401
32399: GO 32427
32401: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32402: LD_ADDR_VAR 0 3
32406: PUSH
32407: LD_INT 11
32409: PUSH
32410: LD_INT 12
32412: PUSH
32413: LD_INT 13
32415: PUSH
32416: LD_INT 14
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: ST_TO_ADDR
32425: GO 33038
32427: LD_INT 23
32429: DOUBLE
32430: EQUAL
32431: IFTRUE 32435
32433: GO 32461
32435: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32436: LD_ADDR_VAR 0 3
32440: PUSH
32441: LD_INT 11
32443: PUSH
32444: LD_INT 12
32446: PUSH
32447: LD_INT 13
32449: PUSH
32450: LD_INT 14
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: ST_TO_ADDR
32459: GO 33038
32461: LD_INT 24
32463: DOUBLE
32464: EQUAL
32465: IFTRUE 32469
32467: GO 32495
32469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32470: LD_ADDR_VAR 0 3
32474: PUSH
32475: LD_INT 11
32477: PUSH
32478: LD_INT 12
32480: PUSH
32481: LD_INT 13
32483: PUSH
32484: LD_INT 14
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: ST_TO_ADDR
32493: GO 33038
32495: LD_INT 30
32497: DOUBLE
32498: EQUAL
32499: IFTRUE 32503
32501: GO 32529
32503: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32504: LD_ADDR_VAR 0 3
32508: PUSH
32509: LD_INT 11
32511: PUSH
32512: LD_INT 12
32514: PUSH
32515: LD_INT 13
32517: PUSH
32518: LD_INT 14
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: ST_TO_ADDR
32527: GO 33038
32529: LD_INT 25
32531: DOUBLE
32532: EQUAL
32533: IFTRUE 32537
32535: GO 32555
32537: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32538: LD_ADDR_VAR 0 3
32542: PUSH
32543: LD_INT 13
32545: PUSH
32546: LD_INT 14
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: ST_TO_ADDR
32553: GO 33038
32555: LD_INT 27
32557: DOUBLE
32558: EQUAL
32559: IFTRUE 32563
32561: GO 32581
32563: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32564: LD_ADDR_VAR 0 3
32568: PUSH
32569: LD_INT 13
32571: PUSH
32572: LD_INT 14
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: ST_TO_ADDR
32579: GO 33038
32581: LD_EXP 24
32585: DOUBLE
32586: EQUAL
32587: IFTRUE 32591
32589: GO 32617
32591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32592: LD_ADDR_VAR 0 3
32596: PUSH
32597: LD_INT 11
32599: PUSH
32600: LD_INT 12
32602: PUSH
32603: LD_INT 13
32605: PUSH
32606: LD_INT 14
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: ST_TO_ADDR
32615: GO 33038
32617: LD_INT 28
32619: DOUBLE
32620: EQUAL
32621: IFTRUE 32625
32623: GO 32643
32625: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32626: LD_ADDR_VAR 0 3
32630: PUSH
32631: LD_INT 13
32633: PUSH
32634: LD_INT 14
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: ST_TO_ADDR
32641: GO 33038
32643: LD_INT 29
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32669
32651: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32652: LD_ADDR_VAR 0 3
32656: PUSH
32657: LD_INT 13
32659: PUSH
32660: LD_INT 14
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: ST_TO_ADDR
32667: GO 33038
32669: LD_INT 31
32671: DOUBLE
32672: EQUAL
32673: IFTRUE 32677
32675: GO 32695
32677: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32678: LD_ADDR_VAR 0 3
32682: PUSH
32683: LD_INT 13
32685: PUSH
32686: LD_INT 14
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: ST_TO_ADDR
32693: GO 33038
32695: LD_INT 26
32697: DOUBLE
32698: EQUAL
32699: IFTRUE 32703
32701: GO 32721
32703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32704: LD_ADDR_VAR 0 3
32708: PUSH
32709: LD_INT 13
32711: PUSH
32712: LD_INT 14
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: ST_TO_ADDR
32719: GO 33038
32721: LD_INT 42
32723: DOUBLE
32724: EQUAL
32725: IFTRUE 32729
32727: GO 32755
32729: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32730: LD_ADDR_VAR 0 3
32734: PUSH
32735: LD_INT 21
32737: PUSH
32738: LD_INT 22
32740: PUSH
32741: LD_INT 23
32743: PUSH
32744: LD_INT 24
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: ST_TO_ADDR
32753: GO 33038
32755: LD_INT 43
32757: DOUBLE
32758: EQUAL
32759: IFTRUE 32763
32761: GO 32789
32763: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32764: LD_ADDR_VAR 0 3
32768: PUSH
32769: LD_INT 21
32771: PUSH
32772: LD_INT 22
32774: PUSH
32775: LD_INT 23
32777: PUSH
32778: LD_INT 24
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: ST_TO_ADDR
32787: GO 33038
32789: LD_INT 44
32791: DOUBLE
32792: EQUAL
32793: IFTRUE 32797
32795: GO 32823
32797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32798: LD_ADDR_VAR 0 3
32802: PUSH
32803: LD_INT 21
32805: PUSH
32806: LD_INT 22
32808: PUSH
32809: LD_INT 23
32811: PUSH
32812: LD_INT 24
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: ST_TO_ADDR
32821: GO 33038
32823: LD_INT 45
32825: DOUBLE
32826: EQUAL
32827: IFTRUE 32831
32829: GO 32857
32831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32832: LD_ADDR_VAR 0 3
32836: PUSH
32837: LD_INT 21
32839: PUSH
32840: LD_INT 22
32842: PUSH
32843: LD_INT 23
32845: PUSH
32846: LD_INT 24
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: ST_TO_ADDR
32855: GO 33038
32857: LD_INT 49
32859: DOUBLE
32860: EQUAL
32861: IFTRUE 32865
32863: GO 32891
32865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32866: LD_ADDR_VAR 0 3
32870: PUSH
32871: LD_INT 21
32873: PUSH
32874: LD_INT 22
32876: PUSH
32877: LD_INT 23
32879: PUSH
32880: LD_INT 24
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: ST_TO_ADDR
32889: GO 33038
32891: LD_INT 51
32893: DOUBLE
32894: EQUAL
32895: IFTRUE 32899
32897: GO 32925
32899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32900: LD_ADDR_VAR 0 3
32904: PUSH
32905: LD_INT 21
32907: PUSH
32908: LD_INT 22
32910: PUSH
32911: LD_INT 23
32913: PUSH
32914: LD_INT 24
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: ST_TO_ADDR
32923: GO 33038
32925: LD_INT 52
32927: DOUBLE
32928: EQUAL
32929: IFTRUE 32933
32931: GO 32959
32933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32934: LD_ADDR_VAR 0 3
32938: PUSH
32939: LD_INT 21
32941: PUSH
32942: LD_INT 22
32944: PUSH
32945: LD_INT 23
32947: PUSH
32948: LD_INT 24
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: ST_TO_ADDR
32957: GO 33038
32959: LD_INT 53
32961: DOUBLE
32962: EQUAL
32963: IFTRUE 32967
32965: GO 32985
32967: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32968: LD_ADDR_VAR 0 3
32972: PUSH
32973: LD_INT 23
32975: PUSH
32976: LD_INT 24
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: ST_TO_ADDR
32983: GO 33038
32985: LD_INT 46
32987: DOUBLE
32988: EQUAL
32989: IFTRUE 32993
32991: GO 33011
32993: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32994: LD_ADDR_VAR 0 3
32998: PUSH
32999: LD_INT 23
33001: PUSH
33002: LD_INT 24
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: ST_TO_ADDR
33009: GO 33038
33011: LD_INT 47
33013: DOUBLE
33014: EQUAL
33015: IFTRUE 33019
33017: GO 33037
33019: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33020: LD_ADDR_VAR 0 3
33024: PUSH
33025: LD_INT 23
33027: PUSH
33028: LD_INT 24
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: ST_TO_ADDR
33035: GO 33038
33037: POP
// result := ( chassis in result ) ;
33038: LD_ADDR_VAR 0 3
33042: PUSH
33043: LD_VAR 0 1
33047: PUSH
33048: LD_VAR 0 3
33052: IN
33053: ST_TO_ADDR
// end ;
33054: LD_VAR 0 3
33058: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33059: LD_INT 0
33061: PPUSH
33062: PPUSH
33063: PPUSH
33064: PPUSH
33065: PPUSH
33066: PPUSH
33067: PPUSH
// result := array ;
33068: LD_ADDR_VAR 0 5
33072: PUSH
33073: LD_VAR 0 1
33077: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33078: LD_VAR 0 1
33082: NOT
33083: PUSH
33084: LD_VAR 0 2
33088: NOT
33089: OR
33090: PUSH
33091: LD_VAR 0 3
33095: NOT
33096: OR
33097: PUSH
33098: LD_VAR 0 2
33102: PUSH
33103: LD_VAR 0 1
33107: GREATER
33108: OR
33109: PUSH
33110: LD_VAR 0 3
33114: PUSH
33115: LD_VAR 0 1
33119: GREATER
33120: OR
33121: IFFALSE 33125
// exit ;
33123: GO 33421
// if direction then
33125: LD_VAR 0 4
33129: IFFALSE 33193
// begin d := 1 ;
33131: LD_ADDR_VAR 0 9
33135: PUSH
33136: LD_INT 1
33138: ST_TO_ADDR
// if i_from > i_to then
33139: LD_VAR 0 2
33143: PUSH
33144: LD_VAR 0 3
33148: GREATER
33149: IFFALSE 33175
// length := ( array - i_from ) + i_to else
33151: LD_ADDR_VAR 0 11
33155: PUSH
33156: LD_VAR 0 1
33160: PUSH
33161: LD_VAR 0 2
33165: MINUS
33166: PUSH
33167: LD_VAR 0 3
33171: PLUS
33172: ST_TO_ADDR
33173: GO 33191
// length := i_to - i_from ;
33175: LD_ADDR_VAR 0 11
33179: PUSH
33180: LD_VAR 0 3
33184: PUSH
33185: LD_VAR 0 2
33189: MINUS
33190: ST_TO_ADDR
// end else
33191: GO 33254
// begin d := - 1 ;
33193: LD_ADDR_VAR 0 9
33197: PUSH
33198: LD_INT 1
33200: NEG
33201: ST_TO_ADDR
// if i_from > i_to then
33202: LD_VAR 0 2
33206: PUSH
33207: LD_VAR 0 3
33211: GREATER
33212: IFFALSE 33232
// length := i_from - i_to else
33214: LD_ADDR_VAR 0 11
33218: PUSH
33219: LD_VAR 0 2
33223: PUSH
33224: LD_VAR 0 3
33228: MINUS
33229: ST_TO_ADDR
33230: GO 33254
// length := ( array - i_to ) + i_from ;
33232: LD_ADDR_VAR 0 11
33236: PUSH
33237: LD_VAR 0 1
33241: PUSH
33242: LD_VAR 0 3
33246: MINUS
33247: PUSH
33248: LD_VAR 0 2
33252: PLUS
33253: ST_TO_ADDR
// end ; if not length then
33254: LD_VAR 0 11
33258: NOT
33259: IFFALSE 33263
// exit ;
33261: GO 33421
// tmp := array ;
33263: LD_ADDR_VAR 0 10
33267: PUSH
33268: LD_VAR 0 1
33272: ST_TO_ADDR
// for i = 1 to length do
33273: LD_ADDR_VAR 0 6
33277: PUSH
33278: DOUBLE
33279: LD_INT 1
33281: DEC
33282: ST_TO_ADDR
33283: LD_VAR 0 11
33287: PUSH
33288: FOR_TO
33289: IFFALSE 33409
// begin for j = 1 to array do
33291: LD_ADDR_VAR 0 7
33295: PUSH
33296: DOUBLE
33297: LD_INT 1
33299: DEC
33300: ST_TO_ADDR
33301: LD_VAR 0 1
33305: PUSH
33306: FOR_TO
33307: IFFALSE 33395
// begin k := j + d ;
33309: LD_ADDR_VAR 0 8
33313: PUSH
33314: LD_VAR 0 7
33318: PUSH
33319: LD_VAR 0 9
33323: PLUS
33324: ST_TO_ADDR
// if k > array then
33325: LD_VAR 0 8
33329: PUSH
33330: LD_VAR 0 1
33334: GREATER
33335: IFFALSE 33345
// k := 1 ;
33337: LD_ADDR_VAR 0 8
33341: PUSH
33342: LD_INT 1
33344: ST_TO_ADDR
// if not k then
33345: LD_VAR 0 8
33349: NOT
33350: IFFALSE 33362
// k := array ;
33352: LD_ADDR_VAR 0 8
33356: PUSH
33357: LD_VAR 0 1
33361: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33362: LD_ADDR_VAR 0 10
33366: PUSH
33367: LD_VAR 0 10
33371: PPUSH
33372: LD_VAR 0 8
33376: PPUSH
33377: LD_VAR 0 1
33381: PUSH
33382: LD_VAR 0 7
33386: ARRAY
33387: PPUSH
33388: CALL_OW 1
33392: ST_TO_ADDR
// end ;
33393: GO 33306
33395: POP
33396: POP
// array := tmp ;
33397: LD_ADDR_VAR 0 1
33401: PUSH
33402: LD_VAR 0 10
33406: ST_TO_ADDR
// end ;
33407: GO 33288
33409: POP
33410: POP
// result := array ;
33411: LD_ADDR_VAR 0 5
33415: PUSH
33416: LD_VAR 0 1
33420: ST_TO_ADDR
// end ;
33421: LD_VAR 0 5
33425: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33426: LD_INT 0
33428: PPUSH
33429: PPUSH
// result := 0 ;
33430: LD_ADDR_VAR 0 3
33434: PUSH
33435: LD_INT 0
33437: ST_TO_ADDR
// if not array or not value in array then
33438: LD_VAR 0 1
33442: NOT
33443: PUSH
33444: LD_VAR 0 2
33448: PUSH
33449: LD_VAR 0 1
33453: IN
33454: NOT
33455: OR
33456: IFFALSE 33460
// exit ;
33458: GO 33514
// for i = 1 to array do
33460: LD_ADDR_VAR 0 4
33464: PUSH
33465: DOUBLE
33466: LD_INT 1
33468: DEC
33469: ST_TO_ADDR
33470: LD_VAR 0 1
33474: PUSH
33475: FOR_TO
33476: IFFALSE 33512
// if value = array [ i ] then
33478: LD_VAR 0 2
33482: PUSH
33483: LD_VAR 0 1
33487: PUSH
33488: LD_VAR 0 4
33492: ARRAY
33493: EQUAL
33494: IFFALSE 33510
// begin result := i ;
33496: LD_ADDR_VAR 0 3
33500: PUSH
33501: LD_VAR 0 4
33505: ST_TO_ADDR
// exit ;
33506: POP
33507: POP
33508: GO 33514
// end ;
33510: GO 33475
33512: POP
33513: POP
// end ;
33514: LD_VAR 0 3
33518: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33519: LD_INT 0
33521: PPUSH
// vc_chassis := chassis ;
33522: LD_ADDR_OWVAR 37
33526: PUSH
33527: LD_VAR 0 1
33531: ST_TO_ADDR
// vc_engine := engine ;
33532: LD_ADDR_OWVAR 39
33536: PUSH
33537: LD_VAR 0 2
33541: ST_TO_ADDR
// vc_control := control ;
33542: LD_ADDR_OWVAR 38
33546: PUSH
33547: LD_VAR 0 3
33551: ST_TO_ADDR
// vc_weapon := weapon ;
33552: LD_ADDR_OWVAR 40
33556: PUSH
33557: LD_VAR 0 4
33561: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33562: LD_ADDR_OWVAR 41
33566: PUSH
33567: LD_VAR 0 5
33571: ST_TO_ADDR
// end ;
33572: LD_VAR 0 6
33576: RET
// export function WantPlant ( unit ) ; var task ; begin
33577: LD_INT 0
33579: PPUSH
33580: PPUSH
// result := false ;
33581: LD_ADDR_VAR 0 2
33585: PUSH
33586: LD_INT 0
33588: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33589: LD_ADDR_VAR 0 3
33593: PUSH
33594: LD_VAR 0 1
33598: PPUSH
33599: CALL_OW 437
33603: ST_TO_ADDR
// if task then
33604: LD_VAR 0 3
33608: IFFALSE 33636
// if task [ 1 ] [ 1 ] = p then
33610: LD_VAR 0 3
33614: PUSH
33615: LD_INT 1
33617: ARRAY
33618: PUSH
33619: LD_INT 1
33621: ARRAY
33622: PUSH
33623: LD_STRING p
33625: EQUAL
33626: IFFALSE 33636
// result := true ;
33628: LD_ADDR_VAR 0 2
33632: PUSH
33633: LD_INT 1
33635: ST_TO_ADDR
// end ;
33636: LD_VAR 0 2
33640: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33641: LD_INT 0
33643: PPUSH
33644: PPUSH
33645: PPUSH
33646: PPUSH
// if pos < 1 then
33647: LD_VAR 0 2
33651: PUSH
33652: LD_INT 1
33654: LESS
33655: IFFALSE 33659
// exit ;
33657: GO 33962
// if pos = 1 then
33659: LD_VAR 0 2
33663: PUSH
33664: LD_INT 1
33666: EQUAL
33667: IFFALSE 33700
// result := Replace ( arr , pos [ 1 ] , value ) else
33669: LD_ADDR_VAR 0 4
33673: PUSH
33674: LD_VAR 0 1
33678: PPUSH
33679: LD_VAR 0 2
33683: PUSH
33684: LD_INT 1
33686: ARRAY
33687: PPUSH
33688: LD_VAR 0 3
33692: PPUSH
33693: CALL_OW 1
33697: ST_TO_ADDR
33698: GO 33962
// begin tmp := arr ;
33700: LD_ADDR_VAR 0 6
33704: PUSH
33705: LD_VAR 0 1
33709: ST_TO_ADDR
// s_arr := [ tmp ] ;
33710: LD_ADDR_VAR 0 7
33714: PUSH
33715: LD_VAR 0 6
33719: PUSH
33720: EMPTY
33721: LIST
33722: ST_TO_ADDR
// for i = 1 to pos - 1 do
33723: LD_ADDR_VAR 0 5
33727: PUSH
33728: DOUBLE
33729: LD_INT 1
33731: DEC
33732: ST_TO_ADDR
33733: LD_VAR 0 2
33737: PUSH
33738: LD_INT 1
33740: MINUS
33741: PUSH
33742: FOR_TO
33743: IFFALSE 33788
// begin tmp := tmp [ pos [ i ] ] ;
33745: LD_ADDR_VAR 0 6
33749: PUSH
33750: LD_VAR 0 6
33754: PUSH
33755: LD_VAR 0 2
33759: PUSH
33760: LD_VAR 0 5
33764: ARRAY
33765: ARRAY
33766: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33767: LD_ADDR_VAR 0 7
33771: PUSH
33772: LD_VAR 0 7
33776: PUSH
33777: LD_VAR 0 6
33781: PUSH
33782: EMPTY
33783: LIST
33784: ADD
33785: ST_TO_ADDR
// end ;
33786: GO 33742
33788: POP
33789: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33790: LD_ADDR_VAR 0 6
33794: PUSH
33795: LD_VAR 0 6
33799: PPUSH
33800: LD_VAR 0 2
33804: PUSH
33805: LD_VAR 0 2
33809: ARRAY
33810: PPUSH
33811: LD_VAR 0 3
33815: PPUSH
33816: CALL_OW 1
33820: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33821: LD_ADDR_VAR 0 7
33825: PUSH
33826: LD_VAR 0 7
33830: PPUSH
33831: LD_VAR 0 7
33835: PPUSH
33836: LD_VAR 0 6
33840: PPUSH
33841: CALL_OW 1
33845: ST_TO_ADDR
// for i = s_arr downto 2 do
33846: LD_ADDR_VAR 0 5
33850: PUSH
33851: DOUBLE
33852: LD_VAR 0 7
33856: INC
33857: ST_TO_ADDR
33858: LD_INT 2
33860: PUSH
33861: FOR_DOWNTO
33862: IFFALSE 33946
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33864: LD_ADDR_VAR 0 6
33868: PUSH
33869: LD_VAR 0 7
33873: PUSH
33874: LD_VAR 0 5
33878: PUSH
33879: LD_INT 1
33881: MINUS
33882: ARRAY
33883: PPUSH
33884: LD_VAR 0 2
33888: PUSH
33889: LD_VAR 0 5
33893: PUSH
33894: LD_INT 1
33896: MINUS
33897: ARRAY
33898: PPUSH
33899: LD_VAR 0 7
33903: PUSH
33904: LD_VAR 0 5
33908: ARRAY
33909: PPUSH
33910: CALL_OW 1
33914: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33915: LD_ADDR_VAR 0 7
33919: PUSH
33920: LD_VAR 0 7
33924: PPUSH
33925: LD_VAR 0 5
33929: PUSH
33930: LD_INT 1
33932: MINUS
33933: PPUSH
33934: LD_VAR 0 6
33938: PPUSH
33939: CALL_OW 1
33943: ST_TO_ADDR
// end ;
33944: GO 33861
33946: POP
33947: POP
// result := s_arr [ 1 ] ;
33948: LD_ADDR_VAR 0 4
33952: PUSH
33953: LD_VAR 0 7
33957: PUSH
33958: LD_INT 1
33960: ARRAY
33961: ST_TO_ADDR
// end ; end ;
33962: LD_VAR 0 4
33966: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33967: LD_INT 0
33969: PPUSH
33970: PPUSH
// if not list then
33971: LD_VAR 0 1
33975: NOT
33976: IFFALSE 33980
// exit ;
33978: GO 34071
// i := list [ pos1 ] ;
33980: LD_ADDR_VAR 0 5
33984: PUSH
33985: LD_VAR 0 1
33989: PUSH
33990: LD_VAR 0 2
33994: ARRAY
33995: ST_TO_ADDR
// if not i then
33996: LD_VAR 0 5
34000: NOT
34001: IFFALSE 34005
// exit ;
34003: GO 34071
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34005: LD_ADDR_VAR 0 1
34009: PUSH
34010: LD_VAR 0 1
34014: PPUSH
34015: LD_VAR 0 2
34019: PPUSH
34020: LD_VAR 0 1
34024: PUSH
34025: LD_VAR 0 3
34029: ARRAY
34030: PPUSH
34031: CALL_OW 1
34035: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34036: LD_ADDR_VAR 0 1
34040: PUSH
34041: LD_VAR 0 1
34045: PPUSH
34046: LD_VAR 0 3
34050: PPUSH
34051: LD_VAR 0 5
34055: PPUSH
34056: CALL_OW 1
34060: ST_TO_ADDR
// result := list ;
34061: LD_ADDR_VAR 0 4
34065: PUSH
34066: LD_VAR 0 1
34070: ST_TO_ADDR
// end ;
34071: LD_VAR 0 4
34075: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34076: LD_INT 0
34078: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34079: LD_ADDR_VAR 0 5
34083: PUSH
34084: LD_VAR 0 1
34088: PPUSH
34089: CALL_OW 250
34093: PPUSH
34094: LD_VAR 0 1
34098: PPUSH
34099: CALL_OW 251
34103: PPUSH
34104: LD_VAR 0 2
34108: PPUSH
34109: LD_VAR 0 3
34113: PPUSH
34114: LD_VAR 0 4
34118: PPUSH
34119: CALL 34129 0 5
34123: ST_TO_ADDR
// end ;
34124: LD_VAR 0 5
34128: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34129: LD_INT 0
34131: PPUSH
34132: PPUSH
34133: PPUSH
34134: PPUSH
// if not list then
34135: LD_VAR 0 3
34139: NOT
34140: IFFALSE 34144
// exit ;
34142: GO 34532
// result := [ ] ;
34144: LD_ADDR_VAR 0 6
34148: PUSH
34149: EMPTY
34150: ST_TO_ADDR
// for i in list do
34151: LD_ADDR_VAR 0 7
34155: PUSH
34156: LD_VAR 0 3
34160: PUSH
34161: FOR_IN
34162: IFFALSE 34364
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34164: LD_ADDR_VAR 0 9
34168: PUSH
34169: LD_VAR 0 7
34173: PPUSH
34174: LD_VAR 0 1
34178: PPUSH
34179: LD_VAR 0 2
34183: PPUSH
34184: CALL_OW 297
34188: ST_TO_ADDR
// if not result then
34189: LD_VAR 0 6
34193: NOT
34194: IFFALSE 34220
// result := [ [ i , tmp ] ] else
34196: LD_ADDR_VAR 0 6
34200: PUSH
34201: LD_VAR 0 7
34205: PUSH
34206: LD_VAR 0 9
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: EMPTY
34216: LIST
34217: ST_TO_ADDR
34218: GO 34362
// begin if result [ result ] [ 2 ] < tmp then
34220: LD_VAR 0 6
34224: PUSH
34225: LD_VAR 0 6
34229: ARRAY
34230: PUSH
34231: LD_INT 2
34233: ARRAY
34234: PUSH
34235: LD_VAR 0 9
34239: LESS
34240: IFFALSE 34282
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34242: LD_ADDR_VAR 0 6
34246: PUSH
34247: LD_VAR 0 6
34251: PPUSH
34252: LD_VAR 0 6
34256: PUSH
34257: LD_INT 1
34259: PLUS
34260: PPUSH
34261: LD_VAR 0 7
34265: PUSH
34266: LD_VAR 0 9
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PPUSH
34275: CALL_OW 2
34279: ST_TO_ADDR
34280: GO 34362
// for j = 1 to result do
34282: LD_ADDR_VAR 0 8
34286: PUSH
34287: DOUBLE
34288: LD_INT 1
34290: DEC
34291: ST_TO_ADDR
34292: LD_VAR 0 6
34296: PUSH
34297: FOR_TO
34298: IFFALSE 34360
// begin if tmp < result [ j ] [ 2 ] then
34300: LD_VAR 0 9
34304: PUSH
34305: LD_VAR 0 6
34309: PUSH
34310: LD_VAR 0 8
34314: ARRAY
34315: PUSH
34316: LD_INT 2
34318: ARRAY
34319: LESS
34320: IFFALSE 34358
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34322: LD_ADDR_VAR 0 6
34326: PUSH
34327: LD_VAR 0 6
34331: PPUSH
34332: LD_VAR 0 8
34336: PPUSH
34337: LD_VAR 0 7
34341: PUSH
34342: LD_VAR 0 9
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PPUSH
34351: CALL_OW 2
34355: ST_TO_ADDR
// break ;
34356: GO 34360
// end ; end ;
34358: GO 34297
34360: POP
34361: POP
// end ; end ;
34362: GO 34161
34364: POP
34365: POP
// if result and not asc then
34366: LD_VAR 0 6
34370: PUSH
34371: LD_VAR 0 4
34375: NOT
34376: AND
34377: IFFALSE 34452
// begin tmp := result ;
34379: LD_ADDR_VAR 0 9
34383: PUSH
34384: LD_VAR 0 6
34388: ST_TO_ADDR
// for i = tmp downto 1 do
34389: LD_ADDR_VAR 0 7
34393: PUSH
34394: DOUBLE
34395: LD_VAR 0 9
34399: INC
34400: ST_TO_ADDR
34401: LD_INT 1
34403: PUSH
34404: FOR_DOWNTO
34405: IFFALSE 34450
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34407: LD_ADDR_VAR 0 6
34411: PUSH
34412: LD_VAR 0 6
34416: PPUSH
34417: LD_VAR 0 9
34421: PUSH
34422: LD_VAR 0 7
34426: MINUS
34427: PUSH
34428: LD_INT 1
34430: PLUS
34431: PPUSH
34432: LD_VAR 0 9
34436: PUSH
34437: LD_VAR 0 7
34441: ARRAY
34442: PPUSH
34443: CALL_OW 1
34447: ST_TO_ADDR
34448: GO 34404
34450: POP
34451: POP
// end ; tmp := [ ] ;
34452: LD_ADDR_VAR 0 9
34456: PUSH
34457: EMPTY
34458: ST_TO_ADDR
// if mode then
34459: LD_VAR 0 5
34463: IFFALSE 34532
// begin for i = 1 to result do
34465: LD_ADDR_VAR 0 7
34469: PUSH
34470: DOUBLE
34471: LD_INT 1
34473: DEC
34474: ST_TO_ADDR
34475: LD_VAR 0 6
34479: PUSH
34480: FOR_TO
34481: IFFALSE 34520
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34483: LD_ADDR_VAR 0 9
34487: PUSH
34488: LD_VAR 0 9
34492: PPUSH
34493: LD_VAR 0 7
34497: PPUSH
34498: LD_VAR 0 6
34502: PUSH
34503: LD_VAR 0 7
34507: ARRAY
34508: PUSH
34509: LD_INT 1
34511: ARRAY
34512: PPUSH
34513: CALL_OW 1
34517: ST_TO_ADDR
34518: GO 34480
34520: POP
34521: POP
// result := tmp ;
34522: LD_ADDR_VAR 0 6
34526: PUSH
34527: LD_VAR 0 9
34531: ST_TO_ADDR
// end ; end ;
34532: LD_VAR 0 6
34536: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34537: LD_INT 0
34539: PPUSH
34540: PPUSH
34541: PPUSH
34542: PPUSH
34543: PPUSH
34544: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34545: LD_ADDR_VAR 0 5
34549: PUSH
34550: LD_INT 0
34552: PUSH
34553: LD_INT 0
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: EMPTY
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: ST_TO_ADDR
// if not x or not y then
34567: LD_VAR 0 2
34571: NOT
34572: PUSH
34573: LD_VAR 0 3
34577: NOT
34578: OR
34579: IFFALSE 34583
// exit ;
34581: GO 36235
// if not range then
34583: LD_VAR 0 4
34587: NOT
34588: IFFALSE 34598
// range := 10 ;
34590: LD_ADDR_VAR 0 4
34594: PUSH
34595: LD_INT 10
34597: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34598: LD_ADDR_VAR 0 8
34602: PUSH
34603: LD_INT 81
34605: PUSH
34606: LD_VAR 0 1
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 92
34617: PUSH
34618: LD_VAR 0 2
34622: PUSH
34623: LD_VAR 0 3
34627: PUSH
34628: LD_VAR 0 4
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 3
34641: PUSH
34642: LD_INT 21
34644: PUSH
34645: LD_INT 3
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: LIST
34660: PPUSH
34661: CALL_OW 69
34665: ST_TO_ADDR
// if not tmp then
34666: LD_VAR 0 8
34670: NOT
34671: IFFALSE 34675
// exit ;
34673: GO 36235
// for i in tmp do
34675: LD_ADDR_VAR 0 6
34679: PUSH
34680: LD_VAR 0 8
34684: PUSH
34685: FOR_IN
34686: IFFALSE 36210
// begin points := [ 0 , 0 , 0 ] ;
34688: LD_ADDR_VAR 0 9
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: LD_INT 0
34698: PUSH
34699: LD_INT 0
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: LIST
34706: ST_TO_ADDR
// bpoints := 1 ;
34707: LD_ADDR_VAR 0 10
34711: PUSH
34712: LD_INT 1
34714: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34715: LD_VAR 0 6
34719: PPUSH
34720: CALL_OW 247
34724: PUSH
34725: LD_INT 1
34727: DOUBLE
34728: EQUAL
34729: IFTRUE 34733
34731: GO 35311
34733: POP
// begin if GetClass ( i ) = 1 then
34734: LD_VAR 0 6
34738: PPUSH
34739: CALL_OW 257
34743: PUSH
34744: LD_INT 1
34746: EQUAL
34747: IFFALSE 34768
// points := [ 10 , 5 , 3 ] ;
34749: LD_ADDR_VAR 0 9
34753: PUSH
34754: LD_INT 10
34756: PUSH
34757: LD_INT 5
34759: PUSH
34760: LD_INT 3
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: LIST
34767: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34768: LD_VAR 0 6
34772: PPUSH
34773: CALL_OW 257
34777: PUSH
34778: LD_INT 2
34780: PUSH
34781: LD_INT 3
34783: PUSH
34784: LD_INT 4
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: LIST
34791: IN
34792: IFFALSE 34813
// points := [ 3 , 2 , 1 ] ;
34794: LD_ADDR_VAR 0 9
34798: PUSH
34799: LD_INT 3
34801: PUSH
34802: LD_INT 2
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34813: LD_VAR 0 6
34817: PPUSH
34818: CALL_OW 257
34822: PUSH
34823: LD_INT 5
34825: EQUAL
34826: IFFALSE 34847
// points := [ 130 , 5 , 2 ] ;
34828: LD_ADDR_VAR 0 9
34832: PUSH
34833: LD_INT 130
34835: PUSH
34836: LD_INT 5
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34847: LD_VAR 0 6
34851: PPUSH
34852: CALL_OW 257
34856: PUSH
34857: LD_INT 8
34859: EQUAL
34860: IFFALSE 34881
// points := [ 35 , 35 , 30 ] ;
34862: LD_ADDR_VAR 0 9
34866: PUSH
34867: LD_INT 35
34869: PUSH
34870: LD_INT 35
34872: PUSH
34873: LD_INT 30
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: LIST
34880: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34881: LD_VAR 0 6
34885: PPUSH
34886: CALL_OW 257
34890: PUSH
34891: LD_INT 9
34893: EQUAL
34894: IFFALSE 34915
// points := [ 20 , 55 , 40 ] ;
34896: LD_ADDR_VAR 0 9
34900: PUSH
34901: LD_INT 20
34903: PUSH
34904: LD_INT 55
34906: PUSH
34907: LD_INT 40
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34915: LD_VAR 0 6
34919: PPUSH
34920: CALL_OW 257
34924: PUSH
34925: LD_INT 12
34927: PUSH
34928: LD_INT 16
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: IN
34935: IFFALSE 34956
// points := [ 5 , 3 , 2 ] ;
34937: LD_ADDR_VAR 0 9
34941: PUSH
34942: LD_INT 5
34944: PUSH
34945: LD_INT 3
34947: PUSH
34948: LD_INT 2
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: LIST
34955: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34956: LD_VAR 0 6
34960: PPUSH
34961: CALL_OW 257
34965: PUSH
34966: LD_INT 17
34968: EQUAL
34969: IFFALSE 34990
// points := [ 100 , 50 , 75 ] ;
34971: LD_ADDR_VAR 0 9
34975: PUSH
34976: LD_INT 100
34978: PUSH
34979: LD_INT 50
34981: PUSH
34982: LD_INT 75
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: LIST
34989: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34990: LD_VAR 0 6
34994: PPUSH
34995: CALL_OW 257
34999: PUSH
35000: LD_INT 15
35002: EQUAL
35003: IFFALSE 35024
// points := [ 10 , 5 , 3 ] ;
35005: LD_ADDR_VAR 0 9
35009: PUSH
35010: LD_INT 10
35012: PUSH
35013: LD_INT 5
35015: PUSH
35016: LD_INT 3
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: LIST
35023: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35024: LD_VAR 0 6
35028: PPUSH
35029: CALL_OW 257
35033: PUSH
35034: LD_INT 14
35036: EQUAL
35037: IFFALSE 35058
// points := [ 10 , 0 , 0 ] ;
35039: LD_ADDR_VAR 0 9
35043: PUSH
35044: LD_INT 10
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: LIST
35057: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35058: LD_VAR 0 6
35062: PPUSH
35063: CALL_OW 257
35067: PUSH
35068: LD_INT 11
35070: EQUAL
35071: IFFALSE 35092
// points := [ 30 , 10 , 5 ] ;
35073: LD_ADDR_VAR 0 9
35077: PUSH
35078: LD_INT 30
35080: PUSH
35081: LD_INT 10
35083: PUSH
35084: LD_INT 5
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: LIST
35091: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35092: LD_VAR 0 1
35096: PPUSH
35097: LD_INT 5
35099: PPUSH
35100: CALL_OW 321
35104: PUSH
35105: LD_INT 2
35107: EQUAL
35108: IFFALSE 35125
// bpoints := bpoints * 1.8 ;
35110: LD_ADDR_VAR 0 10
35114: PUSH
35115: LD_VAR 0 10
35119: PUSH
35120: LD_REAL  1.80000000000000E+0000
35123: MUL
35124: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35125: LD_VAR 0 6
35129: PPUSH
35130: CALL_OW 257
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: LD_INT 2
35140: PUSH
35141: LD_INT 3
35143: PUSH
35144: LD_INT 4
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: IN
35153: PUSH
35154: LD_VAR 0 1
35158: PPUSH
35159: LD_INT 51
35161: PPUSH
35162: CALL_OW 321
35166: PUSH
35167: LD_INT 2
35169: EQUAL
35170: AND
35171: IFFALSE 35188
// bpoints := bpoints * 1.2 ;
35173: LD_ADDR_VAR 0 10
35177: PUSH
35178: LD_VAR 0 10
35182: PUSH
35183: LD_REAL  1.20000000000000E+0000
35186: MUL
35187: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35188: LD_VAR 0 6
35192: PPUSH
35193: CALL_OW 257
35197: PUSH
35198: LD_INT 5
35200: PUSH
35201: LD_INT 7
35203: PUSH
35204: LD_INT 9
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: LIST
35211: IN
35212: PUSH
35213: LD_VAR 0 1
35217: PPUSH
35218: LD_INT 52
35220: PPUSH
35221: CALL_OW 321
35225: PUSH
35226: LD_INT 2
35228: EQUAL
35229: AND
35230: IFFALSE 35247
// bpoints := bpoints * 1.5 ;
35232: LD_ADDR_VAR 0 10
35236: PUSH
35237: LD_VAR 0 10
35241: PUSH
35242: LD_REAL  1.50000000000000E+0000
35245: MUL
35246: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35247: LD_VAR 0 1
35251: PPUSH
35252: LD_INT 66
35254: PPUSH
35255: CALL_OW 321
35259: PUSH
35260: LD_INT 2
35262: EQUAL
35263: IFFALSE 35280
// bpoints := bpoints * 1.1 ;
35265: LD_ADDR_VAR 0 10
35269: PUSH
35270: LD_VAR 0 10
35274: PUSH
35275: LD_REAL  1.10000000000000E+0000
35278: MUL
35279: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35280: LD_ADDR_VAR 0 10
35284: PUSH
35285: LD_VAR 0 10
35289: PUSH
35290: LD_VAR 0 6
35294: PPUSH
35295: LD_INT 1
35297: PPUSH
35298: CALL_OW 259
35302: PUSH
35303: LD_REAL  1.15000000000000E+0000
35306: MUL
35307: MUL
35308: ST_TO_ADDR
// end ; unit_vehicle :
35309: GO 36139
35311: LD_INT 2
35313: DOUBLE
35314: EQUAL
35315: IFTRUE 35319
35317: GO 36127
35319: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35320: LD_VAR 0 6
35324: PPUSH
35325: CALL_OW 264
35329: PUSH
35330: LD_INT 2
35332: PUSH
35333: LD_INT 42
35335: PUSH
35336: LD_INT 24
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: IN
35344: IFFALSE 35365
// points := [ 25 , 5 , 3 ] ;
35346: LD_ADDR_VAR 0 9
35350: PUSH
35351: LD_INT 25
35353: PUSH
35354: LD_INT 5
35356: PUSH
35357: LD_INT 3
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: LIST
35364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35365: LD_VAR 0 6
35369: PPUSH
35370: CALL_OW 264
35374: PUSH
35375: LD_INT 4
35377: PUSH
35378: LD_INT 43
35380: PUSH
35381: LD_INT 25
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: LIST
35388: IN
35389: IFFALSE 35410
// points := [ 40 , 15 , 5 ] ;
35391: LD_ADDR_VAR 0 9
35395: PUSH
35396: LD_INT 40
35398: PUSH
35399: LD_INT 15
35401: PUSH
35402: LD_INT 5
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: LIST
35409: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35410: LD_VAR 0 6
35414: PPUSH
35415: CALL_OW 264
35419: PUSH
35420: LD_INT 3
35422: PUSH
35423: LD_INT 23
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: IN
35430: IFFALSE 35451
// points := [ 7 , 25 , 8 ] ;
35432: LD_ADDR_VAR 0 9
35436: PUSH
35437: LD_INT 7
35439: PUSH
35440: LD_INT 25
35442: PUSH
35443: LD_INT 8
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: LIST
35450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35451: LD_VAR 0 6
35455: PPUSH
35456: CALL_OW 264
35460: PUSH
35461: LD_INT 5
35463: PUSH
35464: LD_INT 27
35466: PUSH
35467: LD_INT 44
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: LIST
35474: IN
35475: IFFALSE 35496
// points := [ 14 , 50 , 16 ] ;
35477: LD_ADDR_VAR 0 9
35481: PUSH
35482: LD_INT 14
35484: PUSH
35485: LD_INT 50
35487: PUSH
35488: LD_INT 16
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: LIST
35495: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35496: LD_VAR 0 6
35500: PPUSH
35501: CALL_OW 264
35505: PUSH
35506: LD_INT 6
35508: PUSH
35509: LD_INT 46
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: IN
35516: IFFALSE 35537
// points := [ 32 , 120 , 70 ] ;
35518: LD_ADDR_VAR 0 9
35522: PUSH
35523: LD_INT 32
35525: PUSH
35526: LD_INT 120
35528: PUSH
35529: LD_INT 70
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: LIST
35536: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35537: LD_VAR 0 6
35541: PPUSH
35542: CALL_OW 264
35546: PUSH
35547: LD_INT 7
35549: PUSH
35550: LD_INT 28
35552: PUSH
35553: LD_INT 45
35555: PUSH
35556: LD_EXP 24
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: IN
35567: IFFALSE 35588
// points := [ 35 , 20 , 45 ] ;
35569: LD_ADDR_VAR 0 9
35573: PUSH
35574: LD_INT 35
35576: PUSH
35577: LD_INT 20
35579: PUSH
35580: LD_INT 45
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35588: LD_VAR 0 6
35592: PPUSH
35593: CALL_OW 264
35597: PUSH
35598: LD_INT 47
35600: PUSH
35601: EMPTY
35602: LIST
35603: IN
35604: IFFALSE 35625
// points := [ 67 , 45 , 75 ] ;
35606: LD_ADDR_VAR 0 9
35610: PUSH
35611: LD_INT 67
35613: PUSH
35614: LD_INT 45
35616: PUSH
35617: LD_INT 75
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: LIST
35624: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35625: LD_VAR 0 6
35629: PPUSH
35630: CALL_OW 264
35634: PUSH
35635: LD_INT 26
35637: PUSH
35638: EMPTY
35639: LIST
35640: IN
35641: IFFALSE 35662
// points := [ 120 , 30 , 80 ] ;
35643: LD_ADDR_VAR 0 9
35647: PUSH
35648: LD_INT 120
35650: PUSH
35651: LD_INT 30
35653: PUSH
35654: LD_INT 80
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: LIST
35661: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35662: LD_VAR 0 6
35666: PPUSH
35667: CALL_OW 264
35671: PUSH
35672: LD_INT 22
35674: PUSH
35675: EMPTY
35676: LIST
35677: IN
35678: IFFALSE 35699
// points := [ 40 , 1 , 1 ] ;
35680: LD_ADDR_VAR 0 9
35684: PUSH
35685: LD_INT 40
35687: PUSH
35688: LD_INT 1
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: LIST
35698: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35699: LD_VAR 0 6
35703: PPUSH
35704: CALL_OW 264
35708: PUSH
35709: LD_INT 29
35711: PUSH
35712: EMPTY
35713: LIST
35714: IN
35715: IFFALSE 35736
// points := [ 70 , 200 , 400 ] ;
35717: LD_ADDR_VAR 0 9
35721: PUSH
35722: LD_INT 70
35724: PUSH
35725: LD_INT 200
35727: PUSH
35728: LD_INT 400
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: LIST
35735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35736: LD_VAR 0 6
35740: PPUSH
35741: CALL_OW 264
35745: PUSH
35746: LD_INT 14
35748: PUSH
35749: LD_INT 53
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: IN
35756: IFFALSE 35777
// points := [ 40 , 10 , 20 ] ;
35758: LD_ADDR_VAR 0 9
35762: PUSH
35763: LD_INT 40
35765: PUSH
35766: LD_INT 10
35768: PUSH
35769: LD_INT 20
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: LIST
35776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35777: LD_VAR 0 6
35781: PPUSH
35782: CALL_OW 264
35786: PUSH
35787: LD_INT 9
35789: PUSH
35790: EMPTY
35791: LIST
35792: IN
35793: IFFALSE 35814
// points := [ 5 , 70 , 20 ] ;
35795: LD_ADDR_VAR 0 9
35799: PUSH
35800: LD_INT 5
35802: PUSH
35803: LD_INT 70
35805: PUSH
35806: LD_INT 20
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: LIST
35813: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35814: LD_VAR 0 6
35818: PPUSH
35819: CALL_OW 264
35823: PUSH
35824: LD_INT 10
35826: PUSH
35827: EMPTY
35828: LIST
35829: IN
35830: IFFALSE 35851
// points := [ 35 , 110 , 70 ] ;
35832: LD_ADDR_VAR 0 9
35836: PUSH
35837: LD_INT 35
35839: PUSH
35840: LD_INT 110
35842: PUSH
35843: LD_INT 70
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: LIST
35850: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35851: LD_VAR 0 6
35855: PPUSH
35856: CALL_OW 265
35860: PUSH
35861: LD_INT 25
35863: EQUAL
35864: IFFALSE 35885
// points := [ 80 , 65 , 100 ] ;
35866: LD_ADDR_VAR 0 9
35870: PUSH
35871: LD_INT 80
35873: PUSH
35874: LD_INT 65
35876: PUSH
35877: LD_INT 100
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: LIST
35884: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35885: LD_VAR 0 6
35889: PPUSH
35890: CALL_OW 263
35894: PUSH
35895: LD_INT 1
35897: EQUAL
35898: IFFALSE 35933
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35900: LD_ADDR_VAR 0 10
35904: PUSH
35905: LD_VAR 0 10
35909: PUSH
35910: LD_VAR 0 6
35914: PPUSH
35915: CALL_OW 311
35919: PPUSH
35920: LD_INT 3
35922: PPUSH
35923: CALL_OW 259
35927: PUSH
35928: LD_INT 4
35930: MUL
35931: MUL
35932: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35933: LD_VAR 0 6
35937: PPUSH
35938: CALL_OW 263
35942: PUSH
35943: LD_INT 2
35945: EQUAL
35946: IFFALSE 35997
// begin j := IsControledBy ( i ) ;
35948: LD_ADDR_VAR 0 7
35952: PUSH
35953: LD_VAR 0 6
35957: PPUSH
35958: CALL_OW 312
35962: ST_TO_ADDR
// if j then
35963: LD_VAR 0 7
35967: IFFALSE 35997
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35969: LD_ADDR_VAR 0 10
35973: PUSH
35974: LD_VAR 0 10
35978: PUSH
35979: LD_VAR 0 7
35983: PPUSH
35984: LD_INT 3
35986: PPUSH
35987: CALL_OW 259
35991: PUSH
35992: LD_INT 3
35994: MUL
35995: MUL
35996: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35997: LD_VAR 0 6
36001: PPUSH
36002: CALL_OW 264
36006: PUSH
36007: LD_INT 5
36009: PUSH
36010: LD_INT 6
36012: PUSH
36013: LD_INT 46
36015: PUSH
36016: LD_INT 44
36018: PUSH
36019: LD_INT 47
36021: PUSH
36022: LD_INT 45
36024: PUSH
36025: LD_INT 28
36027: PUSH
36028: LD_INT 7
36030: PUSH
36031: LD_INT 27
36033: PUSH
36034: LD_INT 29
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: IN
36049: PUSH
36050: LD_VAR 0 1
36054: PPUSH
36055: LD_INT 52
36057: PPUSH
36058: CALL_OW 321
36062: PUSH
36063: LD_INT 2
36065: EQUAL
36066: AND
36067: IFFALSE 36084
// bpoints := bpoints * 1.2 ;
36069: LD_ADDR_VAR 0 10
36073: PUSH
36074: LD_VAR 0 10
36078: PUSH
36079: LD_REAL  1.20000000000000E+0000
36082: MUL
36083: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36084: LD_VAR 0 6
36088: PPUSH
36089: CALL_OW 264
36093: PUSH
36094: LD_INT 6
36096: PUSH
36097: LD_INT 46
36099: PUSH
36100: LD_INT 47
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: LIST
36107: IN
36108: IFFALSE 36125
// bpoints := bpoints * 1.2 ;
36110: LD_ADDR_VAR 0 10
36114: PUSH
36115: LD_VAR 0 10
36119: PUSH
36120: LD_REAL  1.20000000000000E+0000
36123: MUL
36124: ST_TO_ADDR
// end ; unit_building :
36125: GO 36139
36127: LD_INT 3
36129: DOUBLE
36130: EQUAL
36131: IFTRUE 36135
36133: GO 36138
36135: POP
// ; end ;
36136: GO 36139
36138: POP
// for j = 1 to 3 do
36139: LD_ADDR_VAR 0 7
36143: PUSH
36144: DOUBLE
36145: LD_INT 1
36147: DEC
36148: ST_TO_ADDR
36149: LD_INT 3
36151: PUSH
36152: FOR_TO
36153: IFFALSE 36206
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36155: LD_ADDR_VAR 0 5
36159: PUSH
36160: LD_VAR 0 5
36164: PPUSH
36165: LD_VAR 0 7
36169: PPUSH
36170: LD_VAR 0 5
36174: PUSH
36175: LD_VAR 0 7
36179: ARRAY
36180: PUSH
36181: LD_VAR 0 9
36185: PUSH
36186: LD_VAR 0 7
36190: ARRAY
36191: PUSH
36192: LD_VAR 0 10
36196: MUL
36197: PLUS
36198: PPUSH
36199: CALL_OW 1
36203: ST_TO_ADDR
36204: GO 36152
36206: POP
36207: POP
// end ;
36208: GO 34685
36210: POP
36211: POP
// result := Replace ( result , 4 , tmp ) ;
36212: LD_ADDR_VAR 0 5
36216: PUSH
36217: LD_VAR 0 5
36221: PPUSH
36222: LD_INT 4
36224: PPUSH
36225: LD_VAR 0 8
36229: PPUSH
36230: CALL_OW 1
36234: ST_TO_ADDR
// end ;
36235: LD_VAR 0 5
36239: RET
// export function DangerAtRange ( unit , range ) ; begin
36240: LD_INT 0
36242: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36243: LD_ADDR_VAR 0 3
36247: PUSH
36248: LD_VAR 0 1
36252: PPUSH
36253: CALL_OW 255
36257: PPUSH
36258: LD_VAR 0 1
36262: PPUSH
36263: CALL_OW 250
36267: PPUSH
36268: LD_VAR 0 1
36272: PPUSH
36273: CALL_OW 251
36277: PPUSH
36278: LD_VAR 0 2
36282: PPUSH
36283: CALL 34537 0 4
36287: ST_TO_ADDR
// end ;
36288: LD_VAR 0 3
36292: RET
// export function DangerInArea ( side , area ) ; begin
36293: LD_INT 0
36295: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36296: LD_ADDR_VAR 0 3
36300: PUSH
36301: LD_VAR 0 2
36305: PPUSH
36306: LD_INT 81
36308: PUSH
36309: LD_VAR 0 1
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PPUSH
36318: CALL_OW 70
36322: ST_TO_ADDR
// end ;
36323: LD_VAR 0 3
36327: RET
// export function IsExtension ( b ) ; begin
36328: LD_INT 0
36330: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36331: LD_ADDR_VAR 0 2
36335: PUSH
36336: LD_VAR 0 1
36340: PUSH
36341: LD_INT 23
36343: PUSH
36344: LD_INT 20
36346: PUSH
36347: LD_INT 22
36349: PUSH
36350: LD_INT 17
36352: PUSH
36353: LD_INT 24
36355: PUSH
36356: LD_INT 21
36358: PUSH
36359: LD_INT 19
36361: PUSH
36362: LD_INT 16
36364: PUSH
36365: LD_INT 25
36367: PUSH
36368: LD_INT 18
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: IN
36383: ST_TO_ADDR
// end ;
36384: LD_VAR 0 2
36388: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36389: LD_INT 0
36391: PPUSH
36392: PPUSH
36393: PPUSH
// result := [ ] ;
36394: LD_ADDR_VAR 0 4
36398: PUSH
36399: EMPTY
36400: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36401: LD_ADDR_VAR 0 5
36405: PUSH
36406: LD_VAR 0 2
36410: PPUSH
36411: LD_INT 21
36413: PUSH
36414: LD_INT 3
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PPUSH
36421: CALL_OW 70
36425: ST_TO_ADDR
// if not tmp then
36426: LD_VAR 0 5
36430: NOT
36431: IFFALSE 36435
// exit ;
36433: GO 36499
// if checkLink then
36435: LD_VAR 0 3
36439: IFFALSE 36489
// begin for i in tmp do
36441: LD_ADDR_VAR 0 6
36445: PUSH
36446: LD_VAR 0 5
36450: PUSH
36451: FOR_IN
36452: IFFALSE 36487
// if GetBase ( i ) <> base then
36454: LD_VAR 0 6
36458: PPUSH
36459: CALL_OW 274
36463: PUSH
36464: LD_VAR 0 1
36468: NONEQUAL
36469: IFFALSE 36485
// ComLinkToBase ( base , i ) ;
36471: LD_VAR 0 1
36475: PPUSH
36476: LD_VAR 0 6
36480: PPUSH
36481: CALL_OW 169
36485: GO 36451
36487: POP
36488: POP
// end ; result := tmp ;
36489: LD_ADDR_VAR 0 4
36493: PUSH
36494: LD_VAR 0 5
36498: ST_TO_ADDR
// end ;
36499: LD_VAR 0 4
36503: RET
// export function ComComplete ( units , b ) ; var i ; begin
36504: LD_INT 0
36506: PPUSH
36507: PPUSH
// if not units then
36508: LD_VAR 0 1
36512: NOT
36513: IFFALSE 36517
// exit ;
36515: GO 36607
// for i in units do
36517: LD_ADDR_VAR 0 4
36521: PUSH
36522: LD_VAR 0 1
36526: PUSH
36527: FOR_IN
36528: IFFALSE 36605
// if BuildingStatus ( b ) = bs_build then
36530: LD_VAR 0 2
36534: PPUSH
36535: CALL_OW 461
36539: PUSH
36540: LD_INT 1
36542: EQUAL
36543: IFFALSE 36603
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36545: LD_VAR 0 4
36549: PPUSH
36550: LD_STRING h
36552: PUSH
36553: LD_VAR 0 2
36557: PPUSH
36558: CALL_OW 250
36562: PUSH
36563: LD_VAR 0 2
36567: PPUSH
36568: CALL_OW 251
36572: PUSH
36573: LD_VAR 0 2
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: PUSH
36596: EMPTY
36597: LIST
36598: PPUSH
36599: CALL_OW 446
36603: GO 36527
36605: POP
36606: POP
// end ;
36607: LD_VAR 0 3
36611: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36612: LD_INT 0
36614: PPUSH
36615: PPUSH
36616: PPUSH
36617: PPUSH
36618: PPUSH
36619: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36620: LD_VAR 0 1
36624: NOT
36625: PUSH
36626: LD_VAR 0 1
36630: PPUSH
36631: CALL_OW 263
36635: PUSH
36636: LD_INT 2
36638: NONEQUAL
36639: OR
36640: IFFALSE 36644
// exit ;
36642: GO 36960
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36644: LD_ADDR_VAR 0 6
36648: PUSH
36649: LD_INT 22
36651: PUSH
36652: LD_VAR 0 1
36656: PPUSH
36657: CALL_OW 255
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 2
36668: PUSH
36669: LD_INT 30
36671: PUSH
36672: LD_INT 36
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 34
36681: PUSH
36682: LD_INT 31
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PPUSH
36698: CALL_OW 69
36702: ST_TO_ADDR
// if not tmp then
36703: LD_VAR 0 6
36707: NOT
36708: IFFALSE 36712
// exit ;
36710: GO 36960
// result := [ ] ;
36712: LD_ADDR_VAR 0 2
36716: PUSH
36717: EMPTY
36718: ST_TO_ADDR
// for i in tmp do
36719: LD_ADDR_VAR 0 3
36723: PUSH
36724: LD_VAR 0 6
36728: PUSH
36729: FOR_IN
36730: IFFALSE 36801
// begin t := UnitsInside ( i ) ;
36732: LD_ADDR_VAR 0 4
36736: PUSH
36737: LD_VAR 0 3
36741: PPUSH
36742: CALL_OW 313
36746: ST_TO_ADDR
// if t then
36747: LD_VAR 0 4
36751: IFFALSE 36799
// for j in t do
36753: LD_ADDR_VAR 0 7
36757: PUSH
36758: LD_VAR 0 4
36762: PUSH
36763: FOR_IN
36764: IFFALSE 36797
// result := Replace ( result , result + 1 , j ) ;
36766: LD_ADDR_VAR 0 2
36770: PUSH
36771: LD_VAR 0 2
36775: PPUSH
36776: LD_VAR 0 2
36780: PUSH
36781: LD_INT 1
36783: PLUS
36784: PPUSH
36785: LD_VAR 0 7
36789: PPUSH
36790: CALL_OW 1
36794: ST_TO_ADDR
36795: GO 36763
36797: POP
36798: POP
// end ;
36799: GO 36729
36801: POP
36802: POP
// if not result then
36803: LD_VAR 0 2
36807: NOT
36808: IFFALSE 36812
// exit ;
36810: GO 36960
// mech := result [ 1 ] ;
36812: LD_ADDR_VAR 0 5
36816: PUSH
36817: LD_VAR 0 2
36821: PUSH
36822: LD_INT 1
36824: ARRAY
36825: ST_TO_ADDR
// if result > 1 then
36826: LD_VAR 0 2
36830: PUSH
36831: LD_INT 1
36833: GREATER
36834: IFFALSE 36946
// begin for i = 2 to result do
36836: LD_ADDR_VAR 0 3
36840: PUSH
36841: DOUBLE
36842: LD_INT 2
36844: DEC
36845: ST_TO_ADDR
36846: LD_VAR 0 2
36850: PUSH
36851: FOR_TO
36852: IFFALSE 36944
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36854: LD_ADDR_VAR 0 4
36858: PUSH
36859: LD_VAR 0 2
36863: PUSH
36864: LD_VAR 0 3
36868: ARRAY
36869: PPUSH
36870: LD_INT 3
36872: PPUSH
36873: CALL_OW 259
36877: PUSH
36878: LD_VAR 0 2
36882: PUSH
36883: LD_VAR 0 3
36887: ARRAY
36888: PPUSH
36889: CALL_OW 432
36893: MINUS
36894: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36895: LD_VAR 0 4
36899: PUSH
36900: LD_VAR 0 5
36904: PPUSH
36905: LD_INT 3
36907: PPUSH
36908: CALL_OW 259
36912: PUSH
36913: LD_VAR 0 5
36917: PPUSH
36918: CALL_OW 432
36922: MINUS
36923: GREATEREQUAL
36924: IFFALSE 36942
// mech := result [ i ] ;
36926: LD_ADDR_VAR 0 5
36930: PUSH
36931: LD_VAR 0 2
36935: PUSH
36936: LD_VAR 0 3
36940: ARRAY
36941: ST_TO_ADDR
// end ;
36942: GO 36851
36944: POP
36945: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36946: LD_VAR 0 1
36950: PPUSH
36951: LD_VAR 0 5
36955: PPUSH
36956: CALL_OW 135
// end ;
36960: LD_VAR 0 2
36964: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36965: LD_INT 0
36967: PPUSH
36968: PPUSH
36969: PPUSH
36970: PPUSH
36971: PPUSH
36972: PPUSH
36973: PPUSH
36974: PPUSH
36975: PPUSH
36976: PPUSH
36977: PPUSH
36978: PPUSH
36979: PPUSH
// result := [ ] ;
36980: LD_ADDR_VAR 0 7
36984: PUSH
36985: EMPTY
36986: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36987: LD_VAR 0 1
36991: PPUSH
36992: CALL_OW 266
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: IN
37007: NOT
37008: IFFALSE 37012
// exit ;
37010: GO 38646
// if name then
37012: LD_VAR 0 3
37016: IFFALSE 37032
// SetBName ( base_dep , name ) ;
37018: LD_VAR 0 1
37022: PPUSH
37023: LD_VAR 0 3
37027: PPUSH
37028: CALL_OW 500
// base := GetBase ( base_dep ) ;
37032: LD_ADDR_VAR 0 15
37036: PUSH
37037: LD_VAR 0 1
37041: PPUSH
37042: CALL_OW 274
37046: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37047: LD_ADDR_VAR 0 16
37051: PUSH
37052: LD_VAR 0 1
37056: PPUSH
37057: CALL_OW 255
37061: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37062: LD_ADDR_VAR 0 17
37066: PUSH
37067: LD_VAR 0 1
37071: PPUSH
37072: CALL_OW 248
37076: ST_TO_ADDR
// if sources then
37077: LD_VAR 0 5
37081: IFFALSE 37128
// for i = 1 to 3 do
37083: LD_ADDR_VAR 0 8
37087: PUSH
37088: DOUBLE
37089: LD_INT 1
37091: DEC
37092: ST_TO_ADDR
37093: LD_INT 3
37095: PUSH
37096: FOR_TO
37097: IFFALSE 37126
// AddResourceType ( base , i , sources [ i ] ) ;
37099: LD_VAR 0 15
37103: PPUSH
37104: LD_VAR 0 8
37108: PPUSH
37109: LD_VAR 0 5
37113: PUSH
37114: LD_VAR 0 8
37118: ARRAY
37119: PPUSH
37120: CALL_OW 276
37124: GO 37096
37126: POP
37127: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37128: LD_ADDR_VAR 0 18
37132: PUSH
37133: LD_VAR 0 15
37137: PPUSH
37138: LD_VAR 0 2
37142: PPUSH
37143: LD_INT 1
37145: PPUSH
37146: CALL 36389 0 3
37150: ST_TO_ADDR
// InitHc ;
37151: CALL_OW 19
// InitUc ;
37155: CALL_OW 18
// uc_side := side ;
37159: LD_ADDR_OWVAR 20
37163: PUSH
37164: LD_VAR 0 16
37168: ST_TO_ADDR
// uc_nation := nation ;
37169: LD_ADDR_OWVAR 21
37173: PUSH
37174: LD_VAR 0 17
37178: ST_TO_ADDR
// if buildings then
37179: LD_VAR 0 18
37183: IFFALSE 38505
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37185: LD_ADDR_VAR 0 19
37189: PUSH
37190: LD_VAR 0 18
37194: PPUSH
37195: LD_INT 2
37197: PUSH
37198: LD_INT 30
37200: PUSH
37201: LD_INT 29
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 30
37210: PUSH
37211: LD_INT 30
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: PPUSH
37223: CALL_OW 72
37227: ST_TO_ADDR
// if tmp then
37228: LD_VAR 0 19
37232: IFFALSE 37280
// for i in tmp do
37234: LD_ADDR_VAR 0 8
37238: PUSH
37239: LD_VAR 0 19
37243: PUSH
37244: FOR_IN
37245: IFFALSE 37278
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37247: LD_VAR 0 8
37251: PPUSH
37252: CALL_OW 250
37256: PPUSH
37257: LD_VAR 0 8
37261: PPUSH
37262: CALL_OW 251
37266: PPUSH
37267: LD_VAR 0 16
37271: PPUSH
37272: CALL_OW 441
37276: GO 37244
37278: POP
37279: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37280: LD_VAR 0 18
37284: PPUSH
37285: LD_INT 2
37287: PUSH
37288: LD_INT 30
37290: PUSH
37291: LD_INT 32
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 30
37300: PUSH
37301: LD_INT 33
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: PPUSH
37313: CALL_OW 72
37317: IFFALSE 37405
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37319: LD_ADDR_VAR 0 8
37323: PUSH
37324: LD_VAR 0 18
37328: PPUSH
37329: LD_INT 2
37331: PUSH
37332: LD_INT 30
37334: PUSH
37335: LD_INT 32
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 30
37344: PUSH
37345: LD_INT 33
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: PPUSH
37357: CALL_OW 72
37361: PUSH
37362: FOR_IN
37363: IFFALSE 37403
// begin if not GetBWeapon ( i ) then
37365: LD_VAR 0 8
37369: PPUSH
37370: CALL_OW 269
37374: NOT
37375: IFFALSE 37401
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37377: LD_VAR 0 8
37381: PPUSH
37382: LD_VAR 0 8
37386: PPUSH
37387: LD_VAR 0 2
37391: PPUSH
37392: CALL 38651 0 2
37396: PPUSH
37397: CALL_OW 431
// end ;
37401: GO 37362
37403: POP
37404: POP
// end ; for i = 1 to personel do
37405: LD_ADDR_VAR 0 8
37409: PUSH
37410: DOUBLE
37411: LD_INT 1
37413: DEC
37414: ST_TO_ADDR
37415: LD_VAR 0 6
37419: PUSH
37420: FOR_TO
37421: IFFALSE 38485
// begin if i > 4 then
37423: LD_VAR 0 8
37427: PUSH
37428: LD_INT 4
37430: GREATER
37431: IFFALSE 37435
// break ;
37433: GO 38485
// case i of 1 :
37435: LD_VAR 0 8
37439: PUSH
37440: LD_INT 1
37442: DOUBLE
37443: EQUAL
37444: IFTRUE 37448
37446: GO 37528
37448: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37449: LD_ADDR_VAR 0 12
37453: PUSH
37454: LD_VAR 0 18
37458: PPUSH
37459: LD_INT 22
37461: PUSH
37462: LD_VAR 0 16
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 58
37473: PUSH
37474: EMPTY
37475: LIST
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: LD_INT 30
37482: PUSH
37483: LD_INT 32
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 30
37492: PUSH
37493: LD_INT 4
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 30
37502: PUSH
37503: LD_INT 5
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: PPUSH
37521: CALL_OW 72
37525: ST_TO_ADDR
37526: GO 37750
37528: LD_INT 2
37530: DOUBLE
37531: EQUAL
37532: IFTRUE 37536
37534: GO 37598
37536: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37537: LD_ADDR_VAR 0 12
37541: PUSH
37542: LD_VAR 0 18
37546: PPUSH
37547: LD_INT 22
37549: PUSH
37550: LD_VAR 0 16
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 2
37561: PUSH
37562: LD_INT 30
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 30
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PPUSH
37591: CALL_OW 72
37595: ST_TO_ADDR
37596: GO 37750
37598: LD_INT 3
37600: DOUBLE
37601: EQUAL
37602: IFTRUE 37606
37604: GO 37668
37606: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37607: LD_ADDR_VAR 0 12
37611: PUSH
37612: LD_VAR 0 18
37616: PPUSH
37617: LD_INT 22
37619: PUSH
37620: LD_VAR 0 16
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 2
37631: PUSH
37632: LD_INT 30
37634: PUSH
37635: LD_INT 2
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 30
37644: PUSH
37645: LD_INT 3
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: LIST
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PPUSH
37661: CALL_OW 72
37665: ST_TO_ADDR
37666: GO 37750
37668: LD_INT 4
37670: DOUBLE
37671: EQUAL
37672: IFTRUE 37676
37674: GO 37749
37676: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37677: LD_ADDR_VAR 0 12
37681: PUSH
37682: LD_VAR 0 18
37686: PPUSH
37687: LD_INT 22
37689: PUSH
37690: LD_VAR 0 16
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 2
37701: PUSH
37702: LD_INT 30
37704: PUSH
37705: LD_INT 6
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 30
37714: PUSH
37715: LD_INT 7
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 30
37724: PUSH
37725: LD_INT 8
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PPUSH
37742: CALL_OW 72
37746: ST_TO_ADDR
37747: GO 37750
37749: POP
// if i = 1 then
37750: LD_VAR 0 8
37754: PUSH
37755: LD_INT 1
37757: EQUAL
37758: IFFALSE 37869
// begin tmp := [ ] ;
37760: LD_ADDR_VAR 0 19
37764: PUSH
37765: EMPTY
37766: ST_TO_ADDR
// for j in f do
37767: LD_ADDR_VAR 0 9
37771: PUSH
37772: LD_VAR 0 12
37776: PUSH
37777: FOR_IN
37778: IFFALSE 37851
// if GetBType ( j ) = b_bunker then
37780: LD_VAR 0 9
37784: PPUSH
37785: CALL_OW 266
37789: PUSH
37790: LD_INT 32
37792: EQUAL
37793: IFFALSE 37820
// tmp := Insert ( tmp , 1 , j ) else
37795: LD_ADDR_VAR 0 19
37799: PUSH
37800: LD_VAR 0 19
37804: PPUSH
37805: LD_INT 1
37807: PPUSH
37808: LD_VAR 0 9
37812: PPUSH
37813: CALL_OW 2
37817: ST_TO_ADDR
37818: GO 37849
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37820: LD_ADDR_VAR 0 19
37824: PUSH
37825: LD_VAR 0 19
37829: PPUSH
37830: LD_VAR 0 19
37834: PUSH
37835: LD_INT 1
37837: PLUS
37838: PPUSH
37839: LD_VAR 0 9
37843: PPUSH
37844: CALL_OW 2
37848: ST_TO_ADDR
37849: GO 37777
37851: POP
37852: POP
// if tmp then
37853: LD_VAR 0 19
37857: IFFALSE 37869
// f := tmp ;
37859: LD_ADDR_VAR 0 12
37863: PUSH
37864: LD_VAR 0 19
37868: ST_TO_ADDR
// end ; x := personel [ i ] ;
37869: LD_ADDR_VAR 0 13
37873: PUSH
37874: LD_VAR 0 6
37878: PUSH
37879: LD_VAR 0 8
37883: ARRAY
37884: ST_TO_ADDR
// if x = - 1 then
37885: LD_VAR 0 13
37889: PUSH
37890: LD_INT 1
37892: NEG
37893: EQUAL
37894: IFFALSE 38103
// begin for j in f do
37896: LD_ADDR_VAR 0 9
37900: PUSH
37901: LD_VAR 0 12
37905: PUSH
37906: FOR_IN
37907: IFFALSE 38099
// repeat InitHc ;
37909: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37913: LD_VAR 0 9
37917: PPUSH
37918: CALL_OW 266
37922: PUSH
37923: LD_INT 5
37925: EQUAL
37926: IFFALSE 37996
// begin if UnitsInside ( j ) < 3 then
37928: LD_VAR 0 9
37932: PPUSH
37933: CALL_OW 313
37937: PUSH
37938: LD_INT 3
37940: LESS
37941: IFFALSE 37977
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37943: LD_INT 0
37945: PPUSH
37946: LD_INT 5
37948: PUSH
37949: LD_INT 8
37951: PUSH
37952: LD_INT 9
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: LIST
37959: PUSH
37960: LD_VAR 0 17
37964: ARRAY
37965: PPUSH
37966: LD_VAR 0 4
37970: PPUSH
37971: CALL_OW 380
37975: GO 37994
// PrepareHuman ( false , i , skill ) ;
37977: LD_INT 0
37979: PPUSH
37980: LD_VAR 0 8
37984: PPUSH
37985: LD_VAR 0 4
37989: PPUSH
37990: CALL_OW 380
// end else
37994: GO 38013
// PrepareHuman ( false , i , skill ) ;
37996: LD_INT 0
37998: PPUSH
37999: LD_VAR 0 8
38003: PPUSH
38004: LD_VAR 0 4
38008: PPUSH
38009: CALL_OW 380
// un := CreateHuman ;
38013: LD_ADDR_VAR 0 14
38017: PUSH
38018: CALL_OW 44
38022: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38023: LD_ADDR_VAR 0 7
38027: PUSH
38028: LD_VAR 0 7
38032: PPUSH
38033: LD_INT 1
38035: PPUSH
38036: LD_VAR 0 14
38040: PPUSH
38041: CALL_OW 2
38045: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38046: LD_VAR 0 14
38050: PPUSH
38051: LD_VAR 0 9
38055: PPUSH
38056: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38060: LD_VAR 0 9
38064: PPUSH
38065: CALL_OW 313
38069: PUSH
38070: LD_INT 6
38072: EQUAL
38073: PUSH
38074: LD_VAR 0 9
38078: PPUSH
38079: CALL_OW 266
38083: PUSH
38084: LD_INT 32
38086: PUSH
38087: LD_INT 31
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: IN
38094: OR
38095: IFFALSE 37909
38097: GO 37906
38099: POP
38100: POP
// end else
38101: GO 38483
// for j = 1 to x do
38103: LD_ADDR_VAR 0 9
38107: PUSH
38108: DOUBLE
38109: LD_INT 1
38111: DEC
38112: ST_TO_ADDR
38113: LD_VAR 0 13
38117: PUSH
38118: FOR_TO
38119: IFFALSE 38481
// begin InitHc ;
38121: CALL_OW 19
// if not f then
38125: LD_VAR 0 12
38129: NOT
38130: IFFALSE 38219
// begin PrepareHuman ( false , i , skill ) ;
38132: LD_INT 0
38134: PPUSH
38135: LD_VAR 0 8
38139: PPUSH
38140: LD_VAR 0 4
38144: PPUSH
38145: CALL_OW 380
// un := CreateHuman ;
38149: LD_ADDR_VAR 0 14
38153: PUSH
38154: CALL_OW 44
38158: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38159: LD_ADDR_VAR 0 7
38163: PUSH
38164: LD_VAR 0 7
38168: PPUSH
38169: LD_INT 1
38171: PPUSH
38172: LD_VAR 0 14
38176: PPUSH
38177: CALL_OW 2
38181: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38182: LD_VAR 0 14
38186: PPUSH
38187: LD_VAR 0 1
38191: PPUSH
38192: CALL_OW 250
38196: PPUSH
38197: LD_VAR 0 1
38201: PPUSH
38202: CALL_OW 251
38206: PPUSH
38207: LD_INT 10
38209: PPUSH
38210: LD_INT 0
38212: PPUSH
38213: CALL_OW 50
// continue ;
38217: GO 38118
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38219: LD_VAR 0 12
38223: PUSH
38224: LD_INT 1
38226: ARRAY
38227: PPUSH
38228: CALL_OW 313
38232: PUSH
38233: LD_VAR 0 12
38237: PUSH
38238: LD_INT 1
38240: ARRAY
38241: PPUSH
38242: CALL_OW 266
38246: PUSH
38247: LD_INT 32
38249: PUSH
38250: LD_INT 31
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: IN
38257: AND
38258: PUSH
38259: LD_VAR 0 12
38263: PUSH
38264: LD_INT 1
38266: ARRAY
38267: PPUSH
38268: CALL_OW 313
38272: PUSH
38273: LD_INT 6
38275: EQUAL
38276: OR
38277: IFFALSE 38297
// f := Delete ( f , 1 ) ;
38279: LD_ADDR_VAR 0 12
38283: PUSH
38284: LD_VAR 0 12
38288: PPUSH
38289: LD_INT 1
38291: PPUSH
38292: CALL_OW 3
38296: ST_TO_ADDR
// if not f then
38297: LD_VAR 0 12
38301: NOT
38302: IFFALSE 38320
// begin x := x + 2 ;
38304: LD_ADDR_VAR 0 13
38308: PUSH
38309: LD_VAR 0 13
38313: PUSH
38314: LD_INT 2
38316: PLUS
38317: ST_TO_ADDR
// continue ;
38318: GO 38118
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38320: LD_VAR 0 12
38324: PUSH
38325: LD_INT 1
38327: ARRAY
38328: PPUSH
38329: CALL_OW 266
38333: PUSH
38334: LD_INT 5
38336: EQUAL
38337: IFFALSE 38411
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38339: LD_VAR 0 12
38343: PUSH
38344: LD_INT 1
38346: ARRAY
38347: PPUSH
38348: CALL_OW 313
38352: PUSH
38353: LD_INT 3
38355: LESS
38356: IFFALSE 38392
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38358: LD_INT 0
38360: PPUSH
38361: LD_INT 5
38363: PUSH
38364: LD_INT 8
38366: PUSH
38367: LD_INT 9
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: LIST
38374: PUSH
38375: LD_VAR 0 17
38379: ARRAY
38380: PPUSH
38381: LD_VAR 0 4
38385: PPUSH
38386: CALL_OW 380
38390: GO 38409
// PrepareHuman ( false , i , skill ) ;
38392: LD_INT 0
38394: PPUSH
38395: LD_VAR 0 8
38399: PPUSH
38400: LD_VAR 0 4
38404: PPUSH
38405: CALL_OW 380
// end else
38409: GO 38428
// PrepareHuman ( false , i , skill ) ;
38411: LD_INT 0
38413: PPUSH
38414: LD_VAR 0 8
38418: PPUSH
38419: LD_VAR 0 4
38423: PPUSH
38424: CALL_OW 380
// un := CreateHuman ;
38428: LD_ADDR_VAR 0 14
38432: PUSH
38433: CALL_OW 44
38437: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38438: LD_ADDR_VAR 0 7
38442: PUSH
38443: LD_VAR 0 7
38447: PPUSH
38448: LD_INT 1
38450: PPUSH
38451: LD_VAR 0 14
38455: PPUSH
38456: CALL_OW 2
38460: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38461: LD_VAR 0 14
38465: PPUSH
38466: LD_VAR 0 12
38470: PUSH
38471: LD_INT 1
38473: ARRAY
38474: PPUSH
38475: CALL_OW 52
// end ;
38479: GO 38118
38481: POP
38482: POP
// end ;
38483: GO 37420
38485: POP
38486: POP
// result := result ^ buildings ;
38487: LD_ADDR_VAR 0 7
38491: PUSH
38492: LD_VAR 0 7
38496: PUSH
38497: LD_VAR 0 18
38501: ADD
38502: ST_TO_ADDR
// end else
38503: GO 38646
// begin for i = 1 to personel do
38505: LD_ADDR_VAR 0 8
38509: PUSH
38510: DOUBLE
38511: LD_INT 1
38513: DEC
38514: ST_TO_ADDR
38515: LD_VAR 0 6
38519: PUSH
38520: FOR_TO
38521: IFFALSE 38644
// begin if i > 4 then
38523: LD_VAR 0 8
38527: PUSH
38528: LD_INT 4
38530: GREATER
38531: IFFALSE 38535
// break ;
38533: GO 38644
// x := personel [ i ] ;
38535: LD_ADDR_VAR 0 13
38539: PUSH
38540: LD_VAR 0 6
38544: PUSH
38545: LD_VAR 0 8
38549: ARRAY
38550: ST_TO_ADDR
// if x = - 1 then
38551: LD_VAR 0 13
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: EQUAL
38560: IFFALSE 38564
// continue ;
38562: GO 38520
// PrepareHuman ( false , i , skill ) ;
38564: LD_INT 0
38566: PPUSH
38567: LD_VAR 0 8
38571: PPUSH
38572: LD_VAR 0 4
38576: PPUSH
38577: CALL_OW 380
// un := CreateHuman ;
38581: LD_ADDR_VAR 0 14
38585: PUSH
38586: CALL_OW 44
38590: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38591: LD_VAR 0 14
38595: PPUSH
38596: LD_VAR 0 1
38600: PPUSH
38601: CALL_OW 250
38605: PPUSH
38606: LD_VAR 0 1
38610: PPUSH
38611: CALL_OW 251
38615: PPUSH
38616: LD_INT 10
38618: PPUSH
38619: LD_INT 0
38621: PPUSH
38622: CALL_OW 50
// result := result ^ un ;
38626: LD_ADDR_VAR 0 7
38630: PUSH
38631: LD_VAR 0 7
38635: PUSH
38636: LD_VAR 0 14
38640: ADD
38641: ST_TO_ADDR
// end ;
38642: GO 38520
38644: POP
38645: POP
// end ; end ;
38646: LD_VAR 0 7
38650: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38651: LD_INT 0
38653: PPUSH
38654: PPUSH
38655: PPUSH
38656: PPUSH
38657: PPUSH
38658: PPUSH
38659: PPUSH
38660: PPUSH
38661: PPUSH
38662: PPUSH
38663: PPUSH
38664: PPUSH
38665: PPUSH
38666: PPUSH
38667: PPUSH
38668: PPUSH
// result := false ;
38669: LD_ADDR_VAR 0 3
38673: PUSH
38674: LD_INT 0
38676: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38677: LD_VAR 0 1
38681: NOT
38682: PUSH
38683: LD_VAR 0 1
38687: PPUSH
38688: CALL_OW 266
38692: PUSH
38693: LD_INT 32
38695: PUSH
38696: LD_INT 33
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: IN
38703: NOT
38704: OR
38705: IFFALSE 38709
// exit ;
38707: GO 39818
// nat := GetNation ( tower ) ;
38709: LD_ADDR_VAR 0 12
38713: PUSH
38714: LD_VAR 0 1
38718: PPUSH
38719: CALL_OW 248
38723: ST_TO_ADDR
// side := GetSide ( tower ) ;
38724: LD_ADDR_VAR 0 16
38728: PUSH
38729: LD_VAR 0 1
38733: PPUSH
38734: CALL_OW 255
38738: ST_TO_ADDR
// x := GetX ( tower ) ;
38739: LD_ADDR_VAR 0 10
38743: PUSH
38744: LD_VAR 0 1
38748: PPUSH
38749: CALL_OW 250
38753: ST_TO_ADDR
// y := GetY ( tower ) ;
38754: LD_ADDR_VAR 0 11
38758: PUSH
38759: LD_VAR 0 1
38763: PPUSH
38764: CALL_OW 251
38768: ST_TO_ADDR
// if not x or not y then
38769: LD_VAR 0 10
38773: NOT
38774: PUSH
38775: LD_VAR 0 11
38779: NOT
38780: OR
38781: IFFALSE 38785
// exit ;
38783: GO 39818
// weapon := 0 ;
38785: LD_ADDR_VAR 0 18
38789: PUSH
38790: LD_INT 0
38792: ST_TO_ADDR
// fac_list := [ ] ;
38793: LD_ADDR_VAR 0 17
38797: PUSH
38798: EMPTY
38799: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38800: LD_ADDR_VAR 0 6
38804: PUSH
38805: LD_VAR 0 1
38809: PPUSH
38810: CALL_OW 274
38814: PPUSH
38815: LD_VAR 0 2
38819: PPUSH
38820: LD_INT 0
38822: PPUSH
38823: CALL 36389 0 3
38827: PPUSH
38828: LD_INT 30
38830: PUSH
38831: LD_INT 3
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PPUSH
38838: CALL_OW 72
38842: ST_TO_ADDR
// if not factories then
38843: LD_VAR 0 6
38847: NOT
38848: IFFALSE 38852
// exit ;
38850: GO 39818
// for i in factories do
38852: LD_ADDR_VAR 0 8
38856: PUSH
38857: LD_VAR 0 6
38861: PUSH
38862: FOR_IN
38863: IFFALSE 38888
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38865: LD_ADDR_VAR 0 17
38869: PUSH
38870: LD_VAR 0 17
38874: PUSH
38875: LD_VAR 0 8
38879: PPUSH
38880: CALL_OW 478
38884: UNION
38885: ST_TO_ADDR
38886: GO 38862
38888: POP
38889: POP
// if not fac_list then
38890: LD_VAR 0 17
38894: NOT
38895: IFFALSE 38899
// exit ;
38897: GO 39818
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38899: LD_ADDR_VAR 0 5
38903: PUSH
38904: LD_INT 4
38906: PUSH
38907: LD_INT 5
38909: PUSH
38910: LD_INT 9
38912: PUSH
38913: LD_INT 10
38915: PUSH
38916: LD_INT 6
38918: PUSH
38919: LD_INT 7
38921: PUSH
38922: LD_INT 11
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 27
38936: PUSH
38937: LD_INT 28
38939: PUSH
38940: LD_INT 26
38942: PUSH
38943: LD_INT 30
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 43
38954: PUSH
38955: LD_INT 44
38957: PUSH
38958: LD_INT 46
38960: PUSH
38961: LD_INT 45
38963: PUSH
38964: LD_INT 47
38966: PUSH
38967: LD_INT 49
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: PUSH
38983: LD_VAR 0 12
38987: ARRAY
38988: ST_TO_ADDR
// list := list isect fac_list ;
38989: LD_ADDR_VAR 0 5
38993: PUSH
38994: LD_VAR 0 5
38998: PUSH
38999: LD_VAR 0 17
39003: ISECT
39004: ST_TO_ADDR
// if not list then
39005: LD_VAR 0 5
39009: NOT
39010: IFFALSE 39014
// exit ;
39012: GO 39818
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39014: LD_VAR 0 12
39018: PUSH
39019: LD_INT 3
39021: EQUAL
39022: PUSH
39023: LD_INT 49
39025: PUSH
39026: LD_VAR 0 5
39030: IN
39031: AND
39032: PUSH
39033: LD_INT 31
39035: PPUSH
39036: LD_VAR 0 16
39040: PPUSH
39041: CALL_OW 321
39045: PUSH
39046: LD_INT 2
39048: EQUAL
39049: AND
39050: IFFALSE 39110
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39052: LD_INT 22
39054: PUSH
39055: LD_VAR 0 16
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 35
39066: PUSH
39067: LD_INT 49
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 91
39076: PUSH
39077: LD_VAR 0 1
39081: PUSH
39082: LD_INT 10
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: LIST
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: PPUSH
39095: CALL_OW 69
39099: NOT
39100: IFFALSE 39110
// weapon := ru_time_lapser ;
39102: LD_ADDR_VAR 0 18
39106: PUSH
39107: LD_INT 49
39109: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39110: LD_VAR 0 12
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: LD_INT 2
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: IN
39125: PUSH
39126: LD_INT 11
39128: PUSH
39129: LD_VAR 0 5
39133: IN
39134: PUSH
39135: LD_INT 30
39137: PUSH
39138: LD_VAR 0 5
39142: IN
39143: OR
39144: AND
39145: PUSH
39146: LD_INT 6
39148: PPUSH
39149: LD_VAR 0 16
39153: PPUSH
39154: CALL_OW 321
39158: PUSH
39159: LD_INT 2
39161: EQUAL
39162: AND
39163: IFFALSE 39328
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39165: LD_INT 22
39167: PUSH
39168: LD_VAR 0 16
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: LD_INT 35
39182: PUSH
39183: LD_INT 11
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 35
39192: PUSH
39193: LD_INT 30
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 91
39207: PUSH
39208: LD_VAR 0 1
39212: PUSH
39213: LD_INT 18
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: LIST
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: PPUSH
39226: CALL_OW 69
39230: NOT
39231: PUSH
39232: LD_INT 22
39234: PUSH
39235: LD_VAR 0 16
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: LD_INT 30
39249: PUSH
39250: LD_INT 32
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 30
39259: PUSH
39260: LD_INT 33
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 91
39274: PUSH
39275: LD_VAR 0 1
39279: PUSH
39280: LD_INT 12
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: LIST
39292: PUSH
39293: EMPTY
39294: LIST
39295: PPUSH
39296: CALL_OW 69
39300: PUSH
39301: LD_INT 2
39303: GREATER
39304: AND
39305: IFFALSE 39328
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39307: LD_ADDR_VAR 0 18
39311: PUSH
39312: LD_INT 11
39314: PUSH
39315: LD_INT 30
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_VAR 0 12
39326: ARRAY
39327: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39328: LD_VAR 0 18
39332: NOT
39333: PUSH
39334: LD_INT 40
39336: PPUSH
39337: LD_VAR 0 16
39341: PPUSH
39342: CALL_OW 321
39346: PUSH
39347: LD_INT 2
39349: EQUAL
39350: AND
39351: PUSH
39352: LD_INT 7
39354: PUSH
39355: LD_VAR 0 5
39359: IN
39360: PUSH
39361: LD_INT 28
39363: PUSH
39364: LD_VAR 0 5
39368: IN
39369: OR
39370: PUSH
39371: LD_INT 45
39373: PUSH
39374: LD_VAR 0 5
39378: IN
39379: OR
39380: AND
39381: IFFALSE 39635
// begin hex := GetHexInfo ( x , y ) ;
39383: LD_ADDR_VAR 0 4
39387: PUSH
39388: LD_VAR 0 10
39392: PPUSH
39393: LD_VAR 0 11
39397: PPUSH
39398: CALL_OW 546
39402: ST_TO_ADDR
// if hex [ 1 ] then
39403: LD_VAR 0 4
39407: PUSH
39408: LD_INT 1
39410: ARRAY
39411: IFFALSE 39415
// exit ;
39413: GO 39818
// height := hex [ 2 ] ;
39415: LD_ADDR_VAR 0 15
39419: PUSH
39420: LD_VAR 0 4
39424: PUSH
39425: LD_INT 2
39427: ARRAY
39428: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39429: LD_ADDR_VAR 0 14
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: LD_INT 3
39442: PUSH
39443: LD_INT 5
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: ST_TO_ADDR
// for i in tmp do
39452: LD_ADDR_VAR 0 8
39456: PUSH
39457: LD_VAR 0 14
39461: PUSH
39462: FOR_IN
39463: IFFALSE 39633
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39465: LD_ADDR_VAR 0 9
39469: PUSH
39470: LD_VAR 0 10
39474: PPUSH
39475: LD_VAR 0 8
39479: PPUSH
39480: LD_INT 5
39482: PPUSH
39483: CALL_OW 272
39487: PUSH
39488: LD_VAR 0 11
39492: PPUSH
39493: LD_VAR 0 8
39497: PPUSH
39498: LD_INT 5
39500: PPUSH
39501: CALL_OW 273
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39510: LD_VAR 0 9
39514: PUSH
39515: LD_INT 1
39517: ARRAY
39518: PPUSH
39519: LD_VAR 0 9
39523: PUSH
39524: LD_INT 2
39526: ARRAY
39527: PPUSH
39528: CALL_OW 488
39532: IFFALSE 39631
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39534: LD_ADDR_VAR 0 4
39538: PUSH
39539: LD_VAR 0 9
39543: PUSH
39544: LD_INT 1
39546: ARRAY
39547: PPUSH
39548: LD_VAR 0 9
39552: PUSH
39553: LD_INT 2
39555: ARRAY
39556: PPUSH
39557: CALL_OW 546
39561: ST_TO_ADDR
// if hex [ 1 ] then
39562: LD_VAR 0 4
39566: PUSH
39567: LD_INT 1
39569: ARRAY
39570: IFFALSE 39574
// continue ;
39572: GO 39462
// h := hex [ 2 ] ;
39574: LD_ADDR_VAR 0 13
39578: PUSH
39579: LD_VAR 0 4
39583: PUSH
39584: LD_INT 2
39586: ARRAY
39587: ST_TO_ADDR
// if h + 7 < height then
39588: LD_VAR 0 13
39592: PUSH
39593: LD_INT 7
39595: PLUS
39596: PUSH
39597: LD_VAR 0 15
39601: LESS
39602: IFFALSE 39631
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39604: LD_ADDR_VAR 0 18
39608: PUSH
39609: LD_INT 7
39611: PUSH
39612: LD_INT 28
39614: PUSH
39615: LD_INT 45
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: LIST
39622: PUSH
39623: LD_VAR 0 12
39627: ARRAY
39628: ST_TO_ADDR
// break ;
39629: GO 39633
// end ; end ; end ;
39631: GO 39462
39633: POP
39634: POP
// end ; if not weapon then
39635: LD_VAR 0 18
39639: NOT
39640: IFFALSE 39700
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39642: LD_ADDR_VAR 0 5
39646: PUSH
39647: LD_VAR 0 5
39651: PUSH
39652: LD_INT 11
39654: PUSH
39655: LD_INT 30
39657: PUSH
39658: LD_INT 49
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: LIST
39665: DIFF
39666: ST_TO_ADDR
// if not list then
39667: LD_VAR 0 5
39671: NOT
39672: IFFALSE 39676
// exit ;
39674: GO 39818
// weapon := list [ rand ( 1 , list ) ] ;
39676: LD_ADDR_VAR 0 18
39680: PUSH
39681: LD_VAR 0 5
39685: PUSH
39686: LD_INT 1
39688: PPUSH
39689: LD_VAR 0 5
39693: PPUSH
39694: CALL_OW 12
39698: ARRAY
39699: ST_TO_ADDR
// end ; if weapon then
39700: LD_VAR 0 18
39704: IFFALSE 39818
// begin tmp := CostOfWeapon ( weapon ) ;
39706: LD_ADDR_VAR 0 14
39710: PUSH
39711: LD_VAR 0 18
39715: PPUSH
39716: CALL_OW 451
39720: ST_TO_ADDR
// j := GetBase ( tower ) ;
39721: LD_ADDR_VAR 0 9
39725: PUSH
39726: LD_VAR 0 1
39730: PPUSH
39731: CALL_OW 274
39735: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39736: LD_VAR 0 9
39740: PPUSH
39741: LD_INT 1
39743: PPUSH
39744: CALL_OW 275
39748: PUSH
39749: LD_VAR 0 14
39753: PUSH
39754: LD_INT 1
39756: ARRAY
39757: GREATEREQUAL
39758: PUSH
39759: LD_VAR 0 9
39763: PPUSH
39764: LD_INT 2
39766: PPUSH
39767: CALL_OW 275
39771: PUSH
39772: LD_VAR 0 14
39776: PUSH
39777: LD_INT 2
39779: ARRAY
39780: GREATEREQUAL
39781: AND
39782: PUSH
39783: LD_VAR 0 9
39787: PPUSH
39788: LD_INT 3
39790: PPUSH
39791: CALL_OW 275
39795: PUSH
39796: LD_VAR 0 14
39800: PUSH
39801: LD_INT 3
39803: ARRAY
39804: GREATEREQUAL
39805: AND
39806: IFFALSE 39818
// result := weapon ;
39808: LD_ADDR_VAR 0 3
39812: PUSH
39813: LD_VAR 0 18
39817: ST_TO_ADDR
// end ; end ;
39818: LD_VAR 0 3
39822: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39823: LD_INT 0
39825: PPUSH
39826: PPUSH
// result := true ;
39827: LD_ADDR_VAR 0 3
39831: PUSH
39832: LD_INT 1
39834: ST_TO_ADDR
// if array1 = array2 then
39835: LD_VAR 0 1
39839: PUSH
39840: LD_VAR 0 2
39844: EQUAL
39845: IFFALSE 39905
// begin for i = 1 to array1 do
39847: LD_ADDR_VAR 0 4
39851: PUSH
39852: DOUBLE
39853: LD_INT 1
39855: DEC
39856: ST_TO_ADDR
39857: LD_VAR 0 1
39861: PUSH
39862: FOR_TO
39863: IFFALSE 39901
// if array1 [ i ] <> array2 [ i ] then
39865: LD_VAR 0 1
39869: PUSH
39870: LD_VAR 0 4
39874: ARRAY
39875: PUSH
39876: LD_VAR 0 2
39880: PUSH
39881: LD_VAR 0 4
39885: ARRAY
39886: NONEQUAL
39887: IFFALSE 39899
// begin result := false ;
39889: LD_ADDR_VAR 0 3
39893: PUSH
39894: LD_INT 0
39896: ST_TO_ADDR
// break ;
39897: GO 39901
// end ;
39899: GO 39862
39901: POP
39902: POP
// end else
39903: GO 39913
// result := false ;
39905: LD_ADDR_VAR 0 3
39909: PUSH
39910: LD_INT 0
39912: ST_TO_ADDR
// end ;
39913: LD_VAR 0 3
39917: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39918: LD_INT 0
39920: PPUSH
39921: PPUSH
// if not array1 or not array2 then
39922: LD_VAR 0 1
39926: NOT
39927: PUSH
39928: LD_VAR 0 2
39932: NOT
39933: OR
39934: IFFALSE 39938
// exit ;
39936: GO 40002
// result := true ;
39938: LD_ADDR_VAR 0 3
39942: PUSH
39943: LD_INT 1
39945: ST_TO_ADDR
// for i = 1 to array1 do
39946: LD_ADDR_VAR 0 4
39950: PUSH
39951: DOUBLE
39952: LD_INT 1
39954: DEC
39955: ST_TO_ADDR
39956: LD_VAR 0 1
39960: PUSH
39961: FOR_TO
39962: IFFALSE 40000
// if array1 [ i ] <> array2 [ i ] then
39964: LD_VAR 0 1
39968: PUSH
39969: LD_VAR 0 4
39973: ARRAY
39974: PUSH
39975: LD_VAR 0 2
39979: PUSH
39980: LD_VAR 0 4
39984: ARRAY
39985: NONEQUAL
39986: IFFALSE 39998
// begin result := false ;
39988: LD_ADDR_VAR 0 3
39992: PUSH
39993: LD_INT 0
39995: ST_TO_ADDR
// break ;
39996: GO 40000
// end ;
39998: GO 39961
40000: POP
40001: POP
// end ;
40002: LD_VAR 0 3
40006: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40007: LD_INT 0
40009: PPUSH
40010: PPUSH
40011: PPUSH
// pom := GetBase ( fac ) ;
40012: LD_ADDR_VAR 0 5
40016: PUSH
40017: LD_VAR 0 1
40021: PPUSH
40022: CALL_OW 274
40026: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40027: LD_ADDR_VAR 0 4
40031: PUSH
40032: LD_VAR 0 2
40036: PUSH
40037: LD_INT 1
40039: ARRAY
40040: PPUSH
40041: LD_VAR 0 2
40045: PUSH
40046: LD_INT 2
40048: ARRAY
40049: PPUSH
40050: LD_VAR 0 2
40054: PUSH
40055: LD_INT 3
40057: ARRAY
40058: PPUSH
40059: LD_VAR 0 2
40063: PUSH
40064: LD_INT 4
40066: ARRAY
40067: PPUSH
40068: CALL_OW 449
40072: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40073: LD_ADDR_VAR 0 3
40077: PUSH
40078: LD_VAR 0 5
40082: PPUSH
40083: LD_INT 1
40085: PPUSH
40086: CALL_OW 275
40090: PUSH
40091: LD_VAR 0 4
40095: PUSH
40096: LD_INT 1
40098: ARRAY
40099: GREATEREQUAL
40100: PUSH
40101: LD_VAR 0 5
40105: PPUSH
40106: LD_INT 2
40108: PPUSH
40109: CALL_OW 275
40113: PUSH
40114: LD_VAR 0 4
40118: PUSH
40119: LD_INT 2
40121: ARRAY
40122: GREATEREQUAL
40123: AND
40124: PUSH
40125: LD_VAR 0 5
40129: PPUSH
40130: LD_INT 3
40132: PPUSH
40133: CALL_OW 275
40137: PUSH
40138: LD_VAR 0 4
40142: PUSH
40143: LD_INT 3
40145: ARRAY
40146: GREATEREQUAL
40147: AND
40148: ST_TO_ADDR
// end ;
40149: LD_VAR 0 3
40153: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40154: LD_INT 0
40156: PPUSH
40157: PPUSH
40158: PPUSH
40159: PPUSH
// pom := GetBase ( building ) ;
40160: LD_ADDR_VAR 0 3
40164: PUSH
40165: LD_VAR 0 1
40169: PPUSH
40170: CALL_OW 274
40174: ST_TO_ADDR
// if not pom then
40175: LD_VAR 0 3
40179: NOT
40180: IFFALSE 40184
// exit ;
40182: GO 40354
// btype := GetBType ( building ) ;
40184: LD_ADDR_VAR 0 5
40188: PUSH
40189: LD_VAR 0 1
40193: PPUSH
40194: CALL_OW 266
40198: ST_TO_ADDR
// if btype = b_armoury then
40199: LD_VAR 0 5
40203: PUSH
40204: LD_INT 4
40206: EQUAL
40207: IFFALSE 40217
// btype := b_barracks ;
40209: LD_ADDR_VAR 0 5
40213: PUSH
40214: LD_INT 5
40216: ST_TO_ADDR
// if btype = b_depot then
40217: LD_VAR 0 5
40221: PUSH
40222: LD_INT 0
40224: EQUAL
40225: IFFALSE 40235
// btype := b_warehouse ;
40227: LD_ADDR_VAR 0 5
40231: PUSH
40232: LD_INT 1
40234: ST_TO_ADDR
// if btype = b_workshop then
40235: LD_VAR 0 5
40239: PUSH
40240: LD_INT 2
40242: EQUAL
40243: IFFALSE 40253
// btype := b_factory ;
40245: LD_ADDR_VAR 0 5
40249: PUSH
40250: LD_INT 3
40252: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40253: LD_ADDR_VAR 0 4
40257: PUSH
40258: LD_VAR 0 5
40262: PPUSH
40263: LD_VAR 0 1
40267: PPUSH
40268: CALL_OW 248
40272: PPUSH
40273: CALL_OW 450
40277: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40278: LD_ADDR_VAR 0 2
40282: PUSH
40283: LD_VAR 0 3
40287: PPUSH
40288: LD_INT 1
40290: PPUSH
40291: CALL_OW 275
40295: PUSH
40296: LD_VAR 0 4
40300: PUSH
40301: LD_INT 1
40303: ARRAY
40304: GREATEREQUAL
40305: PUSH
40306: LD_VAR 0 3
40310: PPUSH
40311: LD_INT 2
40313: PPUSH
40314: CALL_OW 275
40318: PUSH
40319: LD_VAR 0 4
40323: PUSH
40324: LD_INT 2
40326: ARRAY
40327: GREATEREQUAL
40328: AND
40329: PUSH
40330: LD_VAR 0 3
40334: PPUSH
40335: LD_INT 3
40337: PPUSH
40338: CALL_OW 275
40342: PUSH
40343: LD_VAR 0 4
40347: PUSH
40348: LD_INT 3
40350: ARRAY
40351: GREATEREQUAL
40352: AND
40353: ST_TO_ADDR
// end ;
40354: LD_VAR 0 2
40358: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40359: LD_INT 0
40361: PPUSH
40362: PPUSH
40363: PPUSH
// pom := GetBase ( building ) ;
40364: LD_ADDR_VAR 0 4
40368: PUSH
40369: LD_VAR 0 1
40373: PPUSH
40374: CALL_OW 274
40378: ST_TO_ADDR
// if not pom then
40379: LD_VAR 0 4
40383: NOT
40384: IFFALSE 40388
// exit ;
40386: GO 40489
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40388: LD_ADDR_VAR 0 5
40392: PUSH
40393: LD_VAR 0 2
40397: PPUSH
40398: LD_VAR 0 1
40402: PPUSH
40403: CALL_OW 248
40407: PPUSH
40408: CALL_OW 450
40412: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40413: LD_ADDR_VAR 0 3
40417: PUSH
40418: LD_VAR 0 4
40422: PPUSH
40423: LD_INT 1
40425: PPUSH
40426: CALL_OW 275
40430: PUSH
40431: LD_VAR 0 5
40435: PUSH
40436: LD_INT 1
40438: ARRAY
40439: GREATEREQUAL
40440: PUSH
40441: LD_VAR 0 4
40445: PPUSH
40446: LD_INT 2
40448: PPUSH
40449: CALL_OW 275
40453: PUSH
40454: LD_VAR 0 5
40458: PUSH
40459: LD_INT 2
40461: ARRAY
40462: GREATEREQUAL
40463: AND
40464: PUSH
40465: LD_VAR 0 4
40469: PPUSH
40470: LD_INT 3
40472: PPUSH
40473: CALL_OW 275
40477: PUSH
40478: LD_VAR 0 5
40482: PUSH
40483: LD_INT 3
40485: ARRAY
40486: GREATEREQUAL
40487: AND
40488: ST_TO_ADDR
// end ;
40489: LD_VAR 0 3
40493: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40494: LD_INT 0
40496: PPUSH
40497: PPUSH
40498: PPUSH
40499: PPUSH
40500: PPUSH
40501: PPUSH
40502: PPUSH
40503: PPUSH
40504: PPUSH
40505: PPUSH
40506: PPUSH
// result := false ;
40507: LD_ADDR_VAR 0 8
40511: PUSH
40512: LD_INT 0
40514: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40515: LD_VAR 0 5
40519: NOT
40520: PUSH
40521: LD_VAR 0 1
40525: NOT
40526: OR
40527: PUSH
40528: LD_VAR 0 2
40532: NOT
40533: OR
40534: PUSH
40535: LD_VAR 0 3
40539: NOT
40540: OR
40541: IFFALSE 40545
// exit ;
40543: GO 41359
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40545: LD_ADDR_VAR 0 14
40549: PUSH
40550: LD_VAR 0 1
40554: PPUSH
40555: LD_VAR 0 2
40559: PPUSH
40560: LD_VAR 0 3
40564: PPUSH
40565: LD_VAR 0 4
40569: PPUSH
40570: LD_VAR 0 5
40574: PUSH
40575: LD_INT 1
40577: ARRAY
40578: PPUSH
40579: CALL_OW 248
40583: PPUSH
40584: LD_INT 0
40586: PPUSH
40587: CALL 42596 0 6
40591: ST_TO_ADDR
// if not hexes then
40592: LD_VAR 0 14
40596: NOT
40597: IFFALSE 40601
// exit ;
40599: GO 41359
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40601: LD_ADDR_VAR 0 17
40605: PUSH
40606: LD_VAR 0 5
40610: PPUSH
40611: LD_INT 22
40613: PUSH
40614: LD_VAR 0 13
40618: PPUSH
40619: CALL_OW 255
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 2
40630: PUSH
40631: LD_INT 30
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 30
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: LIST
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PPUSH
40660: CALL_OW 72
40664: ST_TO_ADDR
// for i = 1 to hexes do
40665: LD_ADDR_VAR 0 9
40669: PUSH
40670: DOUBLE
40671: LD_INT 1
40673: DEC
40674: ST_TO_ADDR
40675: LD_VAR 0 14
40679: PUSH
40680: FOR_TO
40681: IFFALSE 41357
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40683: LD_ADDR_VAR 0 13
40687: PUSH
40688: LD_VAR 0 14
40692: PUSH
40693: LD_VAR 0 9
40697: ARRAY
40698: PUSH
40699: LD_INT 1
40701: ARRAY
40702: PPUSH
40703: LD_VAR 0 14
40707: PUSH
40708: LD_VAR 0 9
40712: ARRAY
40713: PUSH
40714: LD_INT 2
40716: ARRAY
40717: PPUSH
40718: CALL_OW 428
40722: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40723: LD_VAR 0 14
40727: PUSH
40728: LD_VAR 0 9
40732: ARRAY
40733: PUSH
40734: LD_INT 1
40736: ARRAY
40737: PPUSH
40738: LD_VAR 0 14
40742: PUSH
40743: LD_VAR 0 9
40747: ARRAY
40748: PUSH
40749: LD_INT 2
40751: ARRAY
40752: PPUSH
40753: CALL_OW 351
40757: PUSH
40758: LD_VAR 0 14
40762: PUSH
40763: LD_VAR 0 9
40767: ARRAY
40768: PUSH
40769: LD_INT 1
40771: ARRAY
40772: PPUSH
40773: LD_VAR 0 14
40777: PUSH
40778: LD_VAR 0 9
40782: ARRAY
40783: PUSH
40784: LD_INT 2
40786: ARRAY
40787: PPUSH
40788: CALL_OW 488
40792: NOT
40793: OR
40794: PUSH
40795: LD_VAR 0 13
40799: PPUSH
40800: CALL_OW 247
40804: PUSH
40805: LD_INT 3
40807: EQUAL
40808: OR
40809: IFFALSE 40815
// exit ;
40811: POP
40812: POP
40813: GO 41359
// if not tmp then
40815: LD_VAR 0 13
40819: NOT
40820: IFFALSE 40824
// continue ;
40822: GO 40680
// result := true ;
40824: LD_ADDR_VAR 0 8
40828: PUSH
40829: LD_INT 1
40831: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40832: LD_VAR 0 6
40836: PUSH
40837: LD_VAR 0 13
40841: PPUSH
40842: CALL_OW 247
40846: PUSH
40847: LD_INT 2
40849: EQUAL
40850: AND
40851: PUSH
40852: LD_VAR 0 13
40856: PPUSH
40857: CALL_OW 263
40861: PUSH
40862: LD_INT 1
40864: EQUAL
40865: AND
40866: IFFALSE 41030
// begin if IsDrivenBy ( tmp ) then
40868: LD_VAR 0 13
40872: PPUSH
40873: CALL_OW 311
40877: IFFALSE 40881
// continue ;
40879: GO 40680
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40881: LD_VAR 0 6
40885: PPUSH
40886: LD_INT 3
40888: PUSH
40889: LD_INT 60
40891: PUSH
40892: EMPTY
40893: LIST
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 3
40901: PUSH
40902: LD_INT 55
40904: PUSH
40905: EMPTY
40906: LIST
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PPUSH
40916: CALL_OW 72
40920: IFFALSE 41028
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40922: LD_ADDR_VAR 0 18
40926: PUSH
40927: LD_VAR 0 6
40931: PPUSH
40932: LD_INT 3
40934: PUSH
40935: LD_INT 60
40937: PUSH
40938: EMPTY
40939: LIST
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 3
40947: PUSH
40948: LD_INT 55
40950: PUSH
40951: EMPTY
40952: LIST
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PPUSH
40962: CALL_OW 72
40966: PUSH
40967: LD_INT 1
40969: ARRAY
40970: ST_TO_ADDR
// if IsInUnit ( driver ) then
40971: LD_VAR 0 18
40975: PPUSH
40976: CALL_OW 310
40980: IFFALSE 40991
// ComExit ( driver ) ;
40982: LD_VAR 0 18
40986: PPUSH
40987: CALL 65780 0 1
// AddComEnterUnit ( driver , tmp ) ;
40991: LD_VAR 0 18
40995: PPUSH
40996: LD_VAR 0 13
41000: PPUSH
41001: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41005: LD_VAR 0 18
41009: PPUSH
41010: LD_VAR 0 7
41014: PPUSH
41015: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41019: LD_VAR 0 18
41023: PPUSH
41024: CALL_OW 181
// end ; continue ;
41028: GO 40680
// end ; if not cleaners or not tmp in cleaners then
41030: LD_VAR 0 6
41034: NOT
41035: PUSH
41036: LD_VAR 0 13
41040: PUSH
41041: LD_VAR 0 6
41045: IN
41046: NOT
41047: OR
41048: IFFALSE 41355
// begin if dep then
41050: LD_VAR 0 17
41054: IFFALSE 41190
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41056: LD_ADDR_VAR 0 16
41060: PUSH
41061: LD_VAR 0 17
41065: PUSH
41066: LD_INT 1
41068: ARRAY
41069: PPUSH
41070: CALL_OW 250
41074: PPUSH
41075: LD_VAR 0 17
41079: PUSH
41080: LD_INT 1
41082: ARRAY
41083: PPUSH
41084: CALL_OW 254
41088: PPUSH
41089: LD_INT 5
41091: PPUSH
41092: CALL_OW 272
41096: PUSH
41097: LD_VAR 0 17
41101: PUSH
41102: LD_INT 1
41104: ARRAY
41105: PPUSH
41106: CALL_OW 251
41110: PPUSH
41111: LD_VAR 0 17
41115: PUSH
41116: LD_INT 1
41118: ARRAY
41119: PPUSH
41120: CALL_OW 254
41124: PPUSH
41125: LD_INT 5
41127: PPUSH
41128: CALL_OW 273
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41137: LD_VAR 0 16
41141: PUSH
41142: LD_INT 1
41144: ARRAY
41145: PPUSH
41146: LD_VAR 0 16
41150: PUSH
41151: LD_INT 2
41153: ARRAY
41154: PPUSH
41155: CALL_OW 488
41159: IFFALSE 41190
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41161: LD_VAR 0 13
41165: PPUSH
41166: LD_VAR 0 16
41170: PUSH
41171: LD_INT 1
41173: ARRAY
41174: PPUSH
41175: LD_VAR 0 16
41179: PUSH
41180: LD_INT 2
41182: ARRAY
41183: PPUSH
41184: CALL_OW 111
// continue ;
41188: GO 40680
// end ; end ; r := GetDir ( tmp ) ;
41190: LD_ADDR_VAR 0 15
41194: PUSH
41195: LD_VAR 0 13
41199: PPUSH
41200: CALL_OW 254
41204: ST_TO_ADDR
// if r = 5 then
41205: LD_VAR 0 15
41209: PUSH
41210: LD_INT 5
41212: EQUAL
41213: IFFALSE 41223
// r := 0 ;
41215: LD_ADDR_VAR 0 15
41219: PUSH
41220: LD_INT 0
41222: ST_TO_ADDR
// for j = r to 5 do
41223: LD_ADDR_VAR 0 10
41227: PUSH
41228: DOUBLE
41229: LD_VAR 0 15
41233: DEC
41234: ST_TO_ADDR
41235: LD_INT 5
41237: PUSH
41238: FOR_TO
41239: IFFALSE 41353
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41241: LD_ADDR_VAR 0 11
41245: PUSH
41246: LD_VAR 0 13
41250: PPUSH
41251: CALL_OW 250
41255: PPUSH
41256: LD_VAR 0 10
41260: PPUSH
41261: LD_INT 2
41263: PPUSH
41264: CALL_OW 272
41268: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41269: LD_ADDR_VAR 0 12
41273: PUSH
41274: LD_VAR 0 13
41278: PPUSH
41279: CALL_OW 251
41283: PPUSH
41284: LD_VAR 0 10
41288: PPUSH
41289: LD_INT 2
41291: PPUSH
41292: CALL_OW 273
41296: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41297: LD_VAR 0 11
41301: PPUSH
41302: LD_VAR 0 12
41306: PPUSH
41307: CALL_OW 488
41311: PUSH
41312: LD_VAR 0 11
41316: PPUSH
41317: LD_VAR 0 12
41321: PPUSH
41322: CALL_OW 428
41326: NOT
41327: AND
41328: IFFALSE 41351
// begin ComMoveXY ( tmp , _x , _y ) ;
41330: LD_VAR 0 13
41334: PPUSH
41335: LD_VAR 0 11
41339: PPUSH
41340: LD_VAR 0 12
41344: PPUSH
41345: CALL_OW 111
// break ;
41349: GO 41353
// end ; end ;
41351: GO 41238
41353: POP
41354: POP
// end ; end ;
41355: GO 40680
41357: POP
41358: POP
// end ;
41359: LD_VAR 0 8
41363: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41364: LD_INT 0
41366: PPUSH
// result := true ;
41367: LD_ADDR_VAR 0 3
41371: PUSH
41372: LD_INT 1
41374: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41375: LD_VAR 0 2
41379: PUSH
41380: LD_INT 24
41382: DOUBLE
41383: EQUAL
41384: IFTRUE 41394
41386: LD_INT 33
41388: DOUBLE
41389: EQUAL
41390: IFTRUE 41394
41392: GO 41419
41394: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41395: LD_ADDR_VAR 0 3
41399: PUSH
41400: LD_INT 32
41402: PPUSH
41403: LD_VAR 0 1
41407: PPUSH
41408: CALL_OW 321
41412: PUSH
41413: LD_INT 2
41415: EQUAL
41416: ST_TO_ADDR
41417: GO 41739
41419: LD_INT 20
41421: DOUBLE
41422: EQUAL
41423: IFTRUE 41427
41425: GO 41452
41427: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41428: LD_ADDR_VAR 0 3
41432: PUSH
41433: LD_INT 6
41435: PPUSH
41436: LD_VAR 0 1
41440: PPUSH
41441: CALL_OW 321
41445: PUSH
41446: LD_INT 2
41448: EQUAL
41449: ST_TO_ADDR
41450: GO 41739
41452: LD_INT 22
41454: DOUBLE
41455: EQUAL
41456: IFTRUE 41466
41458: LD_INT 36
41460: DOUBLE
41461: EQUAL
41462: IFTRUE 41466
41464: GO 41491
41466: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41467: LD_ADDR_VAR 0 3
41471: PUSH
41472: LD_INT 15
41474: PPUSH
41475: LD_VAR 0 1
41479: PPUSH
41480: CALL_OW 321
41484: PUSH
41485: LD_INT 2
41487: EQUAL
41488: ST_TO_ADDR
41489: GO 41739
41491: LD_INT 30
41493: DOUBLE
41494: EQUAL
41495: IFTRUE 41499
41497: GO 41524
41499: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41500: LD_ADDR_VAR 0 3
41504: PUSH
41505: LD_INT 20
41507: PPUSH
41508: LD_VAR 0 1
41512: PPUSH
41513: CALL_OW 321
41517: PUSH
41518: LD_INT 2
41520: EQUAL
41521: ST_TO_ADDR
41522: GO 41739
41524: LD_INT 28
41526: DOUBLE
41527: EQUAL
41528: IFTRUE 41538
41530: LD_INT 21
41532: DOUBLE
41533: EQUAL
41534: IFTRUE 41538
41536: GO 41563
41538: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41539: LD_ADDR_VAR 0 3
41543: PUSH
41544: LD_INT 21
41546: PPUSH
41547: LD_VAR 0 1
41551: PPUSH
41552: CALL_OW 321
41556: PUSH
41557: LD_INT 2
41559: EQUAL
41560: ST_TO_ADDR
41561: GO 41739
41563: LD_INT 16
41565: DOUBLE
41566: EQUAL
41567: IFTRUE 41571
41569: GO 41598
41571: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41572: LD_ADDR_VAR 0 3
41576: PUSH
41577: LD_EXP 31
41581: PPUSH
41582: LD_VAR 0 1
41586: PPUSH
41587: CALL_OW 321
41591: PUSH
41592: LD_INT 2
41594: EQUAL
41595: ST_TO_ADDR
41596: GO 41739
41598: LD_INT 19
41600: DOUBLE
41601: EQUAL
41602: IFTRUE 41612
41604: LD_INT 23
41606: DOUBLE
41607: EQUAL
41608: IFTRUE 41612
41610: GO 41639
41612: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41613: LD_ADDR_VAR 0 3
41617: PUSH
41618: LD_EXP 30
41622: PPUSH
41623: LD_VAR 0 1
41627: PPUSH
41628: CALL_OW 321
41632: PUSH
41633: LD_INT 2
41635: EQUAL
41636: ST_TO_ADDR
41637: GO 41739
41639: LD_INT 17
41641: DOUBLE
41642: EQUAL
41643: IFTRUE 41647
41645: GO 41672
41647: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41648: LD_ADDR_VAR 0 3
41652: PUSH
41653: LD_INT 39
41655: PPUSH
41656: LD_VAR 0 1
41660: PPUSH
41661: CALL_OW 321
41665: PUSH
41666: LD_INT 2
41668: EQUAL
41669: ST_TO_ADDR
41670: GO 41739
41672: LD_INT 18
41674: DOUBLE
41675: EQUAL
41676: IFTRUE 41680
41678: GO 41705
41680: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41681: LD_ADDR_VAR 0 3
41685: PUSH
41686: LD_INT 40
41688: PPUSH
41689: LD_VAR 0 1
41693: PPUSH
41694: CALL_OW 321
41698: PUSH
41699: LD_INT 2
41701: EQUAL
41702: ST_TO_ADDR
41703: GO 41739
41705: LD_INT 27
41707: DOUBLE
41708: EQUAL
41709: IFTRUE 41713
41711: GO 41738
41713: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41714: LD_ADDR_VAR 0 3
41718: PUSH
41719: LD_INT 35
41721: PPUSH
41722: LD_VAR 0 1
41726: PPUSH
41727: CALL_OW 321
41731: PUSH
41732: LD_INT 2
41734: EQUAL
41735: ST_TO_ADDR
41736: GO 41739
41738: POP
// end ;
41739: LD_VAR 0 3
41743: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41744: LD_INT 0
41746: PPUSH
41747: PPUSH
41748: PPUSH
41749: PPUSH
41750: PPUSH
41751: PPUSH
41752: PPUSH
41753: PPUSH
41754: PPUSH
41755: PPUSH
41756: PPUSH
// result := false ;
41757: LD_ADDR_VAR 0 6
41761: PUSH
41762: LD_INT 0
41764: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41765: LD_VAR 0 1
41769: NOT
41770: PUSH
41771: LD_VAR 0 1
41775: PPUSH
41776: CALL_OW 266
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: IN
41791: NOT
41792: OR
41793: PUSH
41794: LD_VAR 0 2
41798: NOT
41799: OR
41800: PUSH
41801: LD_VAR 0 5
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: LD_INT 4
41820: PUSH
41821: LD_INT 5
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: IN
41832: NOT
41833: OR
41834: PUSH
41835: LD_VAR 0 3
41839: PPUSH
41840: LD_VAR 0 4
41844: PPUSH
41845: CALL_OW 488
41849: NOT
41850: OR
41851: IFFALSE 41855
// exit ;
41853: GO 42591
// side := GetSide ( depot ) ;
41855: LD_ADDR_VAR 0 9
41859: PUSH
41860: LD_VAR 0 1
41864: PPUSH
41865: CALL_OW 255
41869: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41870: LD_VAR 0 9
41874: PPUSH
41875: LD_VAR 0 2
41879: PPUSH
41880: CALL 41364 0 2
41884: NOT
41885: IFFALSE 41889
// exit ;
41887: GO 42591
// pom := GetBase ( depot ) ;
41889: LD_ADDR_VAR 0 10
41893: PUSH
41894: LD_VAR 0 1
41898: PPUSH
41899: CALL_OW 274
41903: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41904: LD_ADDR_VAR 0 11
41908: PUSH
41909: LD_VAR 0 2
41913: PPUSH
41914: LD_VAR 0 1
41918: PPUSH
41919: CALL_OW 248
41923: PPUSH
41924: CALL_OW 450
41928: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41929: LD_VAR 0 10
41933: PPUSH
41934: LD_INT 1
41936: PPUSH
41937: CALL_OW 275
41941: PUSH
41942: LD_VAR 0 11
41946: PUSH
41947: LD_INT 1
41949: ARRAY
41950: GREATEREQUAL
41951: PUSH
41952: LD_VAR 0 10
41956: PPUSH
41957: LD_INT 2
41959: PPUSH
41960: CALL_OW 275
41964: PUSH
41965: LD_VAR 0 11
41969: PUSH
41970: LD_INT 2
41972: ARRAY
41973: GREATEREQUAL
41974: AND
41975: PUSH
41976: LD_VAR 0 10
41980: PPUSH
41981: LD_INT 3
41983: PPUSH
41984: CALL_OW 275
41988: PUSH
41989: LD_VAR 0 11
41993: PUSH
41994: LD_INT 3
41996: ARRAY
41997: GREATEREQUAL
41998: AND
41999: NOT
42000: IFFALSE 42004
// exit ;
42002: GO 42591
// if GetBType ( depot ) = b_depot then
42004: LD_VAR 0 1
42008: PPUSH
42009: CALL_OW 266
42013: PUSH
42014: LD_INT 0
42016: EQUAL
42017: IFFALSE 42029
// dist := 28 else
42019: LD_ADDR_VAR 0 14
42023: PUSH
42024: LD_INT 28
42026: ST_TO_ADDR
42027: GO 42037
// dist := 36 ;
42029: LD_ADDR_VAR 0 14
42033: PUSH
42034: LD_INT 36
42036: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42037: LD_VAR 0 1
42041: PPUSH
42042: LD_VAR 0 3
42046: PPUSH
42047: LD_VAR 0 4
42051: PPUSH
42052: CALL_OW 297
42056: PUSH
42057: LD_VAR 0 14
42061: GREATER
42062: IFFALSE 42066
// exit ;
42064: GO 42591
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42066: LD_ADDR_VAR 0 12
42070: PUSH
42071: LD_VAR 0 2
42075: PPUSH
42076: LD_VAR 0 3
42080: PPUSH
42081: LD_VAR 0 4
42085: PPUSH
42086: LD_VAR 0 5
42090: PPUSH
42091: LD_VAR 0 1
42095: PPUSH
42096: CALL_OW 248
42100: PPUSH
42101: LD_INT 0
42103: PPUSH
42104: CALL 42596 0 6
42108: ST_TO_ADDR
// if not hexes then
42109: LD_VAR 0 12
42113: NOT
42114: IFFALSE 42118
// exit ;
42116: GO 42591
// hex := GetHexInfo ( x , y ) ;
42118: LD_ADDR_VAR 0 15
42122: PUSH
42123: LD_VAR 0 3
42127: PPUSH
42128: LD_VAR 0 4
42132: PPUSH
42133: CALL_OW 546
42137: ST_TO_ADDR
// if hex [ 1 ] then
42138: LD_VAR 0 15
42142: PUSH
42143: LD_INT 1
42145: ARRAY
42146: IFFALSE 42150
// exit ;
42148: GO 42591
// height := hex [ 2 ] ;
42150: LD_ADDR_VAR 0 13
42154: PUSH
42155: LD_VAR 0 15
42159: PUSH
42160: LD_INT 2
42162: ARRAY
42163: ST_TO_ADDR
// for i = 1 to hexes do
42164: LD_ADDR_VAR 0 7
42168: PUSH
42169: DOUBLE
42170: LD_INT 1
42172: DEC
42173: ST_TO_ADDR
42174: LD_VAR 0 12
42178: PUSH
42179: FOR_TO
42180: IFFALSE 42510
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42182: LD_VAR 0 12
42186: PUSH
42187: LD_VAR 0 7
42191: ARRAY
42192: PUSH
42193: LD_INT 1
42195: ARRAY
42196: PPUSH
42197: LD_VAR 0 12
42201: PUSH
42202: LD_VAR 0 7
42206: ARRAY
42207: PUSH
42208: LD_INT 2
42210: ARRAY
42211: PPUSH
42212: CALL_OW 488
42216: NOT
42217: PUSH
42218: LD_VAR 0 12
42222: PUSH
42223: LD_VAR 0 7
42227: ARRAY
42228: PUSH
42229: LD_INT 1
42231: ARRAY
42232: PPUSH
42233: LD_VAR 0 12
42237: PUSH
42238: LD_VAR 0 7
42242: ARRAY
42243: PUSH
42244: LD_INT 2
42246: ARRAY
42247: PPUSH
42248: CALL_OW 428
42252: PUSH
42253: LD_INT 0
42255: GREATER
42256: OR
42257: PUSH
42258: LD_VAR 0 12
42262: PUSH
42263: LD_VAR 0 7
42267: ARRAY
42268: PUSH
42269: LD_INT 1
42271: ARRAY
42272: PPUSH
42273: LD_VAR 0 12
42277: PUSH
42278: LD_VAR 0 7
42282: ARRAY
42283: PUSH
42284: LD_INT 2
42286: ARRAY
42287: PPUSH
42288: CALL_OW 351
42292: OR
42293: IFFALSE 42299
// exit ;
42295: POP
42296: POP
42297: GO 42591
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42299: LD_ADDR_VAR 0 8
42303: PUSH
42304: LD_VAR 0 12
42308: PUSH
42309: LD_VAR 0 7
42313: ARRAY
42314: PUSH
42315: LD_INT 1
42317: ARRAY
42318: PPUSH
42319: LD_VAR 0 12
42323: PUSH
42324: LD_VAR 0 7
42328: ARRAY
42329: PUSH
42330: LD_INT 2
42332: ARRAY
42333: PPUSH
42334: CALL_OW 546
42338: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42339: LD_VAR 0 8
42343: PUSH
42344: LD_INT 1
42346: ARRAY
42347: PUSH
42348: LD_VAR 0 8
42352: PUSH
42353: LD_INT 2
42355: ARRAY
42356: PUSH
42357: LD_VAR 0 13
42361: PUSH
42362: LD_INT 2
42364: PLUS
42365: GREATER
42366: OR
42367: PUSH
42368: LD_VAR 0 8
42372: PUSH
42373: LD_INT 2
42375: ARRAY
42376: PUSH
42377: LD_VAR 0 13
42381: PUSH
42382: LD_INT 2
42384: MINUS
42385: LESS
42386: OR
42387: PUSH
42388: LD_VAR 0 8
42392: PUSH
42393: LD_INT 3
42395: ARRAY
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 8
42402: PUSH
42403: LD_INT 9
42405: PUSH
42406: LD_INT 10
42408: PUSH
42409: LD_INT 11
42411: PUSH
42412: LD_INT 12
42414: PUSH
42415: LD_INT 13
42417: PUSH
42418: LD_INT 16
42420: PUSH
42421: LD_INT 17
42423: PUSH
42424: LD_INT 18
42426: PUSH
42427: LD_INT 19
42429: PUSH
42430: LD_INT 20
42432: PUSH
42433: LD_INT 21
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: IN
42451: NOT
42452: OR
42453: PUSH
42454: LD_VAR 0 8
42458: PUSH
42459: LD_INT 5
42461: ARRAY
42462: NOT
42463: OR
42464: PUSH
42465: LD_VAR 0 8
42469: PUSH
42470: LD_INT 6
42472: ARRAY
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: LD_INT 7
42482: PUSH
42483: LD_INT 9
42485: PUSH
42486: LD_INT 10
42488: PUSH
42489: LD_INT 11
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: IN
42500: NOT
42501: OR
42502: IFFALSE 42508
// exit ;
42504: POP
42505: POP
42506: GO 42591
// end ;
42508: GO 42179
42510: POP
42511: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42512: LD_VAR 0 9
42516: PPUSH
42517: LD_VAR 0 3
42521: PPUSH
42522: LD_VAR 0 4
42526: PPUSH
42527: LD_INT 20
42529: PPUSH
42530: CALL 34537 0 4
42534: PUSH
42535: LD_INT 4
42537: ARRAY
42538: IFFALSE 42542
// exit ;
42540: GO 42591
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42542: LD_VAR 0 2
42546: PUSH
42547: LD_INT 29
42549: PUSH
42550: LD_INT 30
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: IN
42557: PUSH
42558: LD_VAR 0 3
42562: PPUSH
42563: LD_VAR 0 4
42567: PPUSH
42568: LD_VAR 0 9
42572: PPUSH
42573: CALL_OW 440
42577: NOT
42578: AND
42579: IFFALSE 42583
// exit ;
42581: GO 42591
// result := true ;
42583: LD_ADDR_VAR 0 6
42587: PUSH
42588: LD_INT 1
42590: ST_TO_ADDR
// end ;
42591: LD_VAR 0 6
42595: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42596: LD_INT 0
42598: PPUSH
42599: PPUSH
42600: PPUSH
42601: PPUSH
42602: PPUSH
42603: PPUSH
42604: PPUSH
42605: PPUSH
42606: PPUSH
42607: PPUSH
42608: PPUSH
42609: PPUSH
42610: PPUSH
42611: PPUSH
42612: PPUSH
42613: PPUSH
42614: PPUSH
42615: PPUSH
42616: PPUSH
42617: PPUSH
42618: PPUSH
42619: PPUSH
42620: PPUSH
42621: PPUSH
42622: PPUSH
42623: PPUSH
42624: PPUSH
42625: PPUSH
42626: PPUSH
42627: PPUSH
42628: PPUSH
42629: PPUSH
42630: PPUSH
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
42641: PPUSH
42642: PPUSH
42643: PPUSH
42644: PPUSH
42645: PPUSH
42646: PPUSH
42647: PPUSH
42648: PPUSH
42649: PPUSH
42650: PPUSH
42651: PPUSH
42652: PPUSH
42653: PPUSH
42654: PPUSH
42655: PPUSH
// result = [ ] ;
42656: LD_ADDR_VAR 0 7
42660: PUSH
42661: EMPTY
42662: ST_TO_ADDR
// temp_list = [ ] ;
42663: LD_ADDR_VAR 0 9
42667: PUSH
42668: EMPTY
42669: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42670: LD_VAR 0 4
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: LD_INT 3
42686: PUSH
42687: LD_INT 4
42689: PUSH
42690: LD_INT 5
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: IN
42701: NOT
42702: PUSH
42703: LD_VAR 0 1
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: IN
42718: PUSH
42719: LD_VAR 0 5
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: LD_INT 3
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: LIST
42737: IN
42738: NOT
42739: AND
42740: OR
42741: IFFALSE 42745
// exit ;
42743: GO 61136
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42745: LD_VAR 0 1
42749: PUSH
42750: LD_INT 6
42752: PUSH
42753: LD_INT 7
42755: PUSH
42756: LD_INT 8
42758: PUSH
42759: LD_INT 13
42761: PUSH
42762: LD_INT 12
42764: PUSH
42765: LD_INT 15
42767: PUSH
42768: LD_INT 11
42770: PUSH
42771: LD_INT 14
42773: PUSH
42774: LD_INT 10
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: IN
42788: IFFALSE 42798
// btype = b_lab ;
42790: LD_ADDR_VAR 0 1
42794: PUSH
42795: LD_INT 6
42797: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42798: LD_VAR 0 6
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: LIST
42816: IN
42817: NOT
42818: PUSH
42819: LD_VAR 0 1
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: LD_INT 2
42832: PUSH
42833: LD_INT 3
42835: PUSH
42836: LD_INT 6
42838: PUSH
42839: LD_INT 36
42841: PUSH
42842: LD_INT 4
42844: PUSH
42845: LD_INT 5
42847: PUSH
42848: LD_INT 31
42850: PUSH
42851: LD_INT 32
42853: PUSH
42854: LD_INT 33
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: IN
42870: NOT
42871: PUSH
42872: LD_VAR 0 6
42876: PUSH
42877: LD_INT 1
42879: EQUAL
42880: AND
42881: OR
42882: PUSH
42883: LD_VAR 0 1
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: LD_INT 3
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: IN
42898: NOT
42899: PUSH
42900: LD_VAR 0 6
42904: PUSH
42905: LD_INT 2
42907: EQUAL
42908: AND
42909: OR
42910: IFFALSE 42920
// mode = 0 ;
42912: LD_ADDR_VAR 0 6
42916: PUSH
42917: LD_INT 0
42919: ST_TO_ADDR
// case mode of 0 :
42920: LD_VAR 0 6
42924: PUSH
42925: LD_INT 0
42927: DOUBLE
42928: EQUAL
42929: IFTRUE 42933
42931: GO 54386
42933: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42934: LD_ADDR_VAR 0 11
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 2
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 2
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: LD_INT 2
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 2
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 3
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 3
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43127: LD_ADDR_VAR 0 12
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 2
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 2
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 2
43250: NEG
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 2
43261: NEG
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 3
43284: NEG
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 3
43295: NEG
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43323: LD_ADDR_VAR 0 13
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 2
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 2
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: NEG
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: NEG
43471: PUSH
43472: LD_INT 3
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 3
43482: NEG
43483: PUSH
43484: LD_INT 2
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 3
43494: NEG
43495: PUSH
43496: LD_INT 3
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43522: LD_ADDR_VAR 0 14
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: LD_INT 2
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: LD_INT 2
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: LD_INT 3
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 3
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 2
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43718: LD_ADDR_VAR 0 15
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 2
43841: NEG
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: NEG
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 2
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 3
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 3
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43911: LD_ADDR_VAR 0 16
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 2
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 2
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 2
44034: NEG
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: NEG
44047: PUSH
44048: LD_INT 2
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 3
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 3
44068: PUSH
44069: LD_INT 3
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: LD_INT 3
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44104: LD_ADDR_VAR 0 17
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 2
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 2
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 2
44280: NEG
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44334: LD_ADDR_VAR 0 18
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 2
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44564: LD_ADDR_VAR 0 19
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 2
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: LD_INT 2
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44794: LD_ADDR_VAR 0 20
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: LD_INT 2
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45024: LD_ADDR_VAR 0 21
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 2
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: NEG
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45254: LD_ADDR_VAR 0 22
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 2
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45484: LD_ADDR_VAR 0 23
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: LD_INT 2
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: LD_INT 2
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 3
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: LD_INT 3
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45764: LD_ADDR_VAR 0 24
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: NEG
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 2
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 3
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 3
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46040: LD_ADDR_VAR 0 25
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 3
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 3
46261: PUSH
46262: LD_INT 2
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: LD_INT 3
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: LD_INT 3
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46314: LD_ADDR_VAR 0 26
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 2
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 2
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 2
46490: NEG
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: NEG
46514: PUSH
46515: LD_INT 2
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: LD_INT 3
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: LD_INT 3
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46590: LD_ADDR_VAR 0 27
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 2
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 2
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: NEG
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 2
46789: NEG
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 3
46823: NEG
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 3
46835: NEG
46836: PUSH
46837: LD_INT 2
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46870: LD_ADDR_VAR 0 28
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 2
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 3
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 3
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 3
47105: NEG
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 3
47117: NEG
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47152: LD_ADDR_VAR 0 29
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: LD_INT 3
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 3
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 3
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 3
47396: NEG
47397: PUSH
47398: LD_INT 2
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47431: LD_ADDR_VAR 0 30
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: LD_INT 2
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 2
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 3
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 3
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 3
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 3
47674: NEG
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47709: LD_ADDR_VAR 0 31
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: NEG
47887: PUSH
47888: LD_INT 2
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: NEG
47899: PUSH
47900: LD_INT 3
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 3
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: LD_INT 3
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 3
47952: NEG
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47987: LD_ADDR_VAR 0 32
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 2
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 3
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 3
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 3
48230: NEG
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48265: LD_ADDR_VAR 0 33
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 2
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: LD_INT 3
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 3
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 3
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 3
48509: NEG
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48544: LD_ADDR_VAR 0 34
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: LD_INT 3
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 2
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 3
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: LD_INT 3
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 3
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48824: LD_ADDR_VAR 0 35
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48936: LD_ADDR_VAR 0 36
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49048: LD_ADDR_VAR 0 37
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 1
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49160: LD_ADDR_VAR 0 38
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49272: LD_ADDR_VAR 0 39
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49384: LD_ADDR_VAR 0 40
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49496: LD_ADDR_VAR 0 41
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 2
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 2
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: NEG
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: NEG
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: LD_INT 3
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 3
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 3
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 3
49729: PUSH
49730: LD_INT 2
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 3
49739: PUSH
49740: LD_INT 3
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: LD_INT 3
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 3
49770: NEG
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 3
49781: NEG
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 3
49793: NEG
49794: PUSH
49795: LD_INT 2
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 3
49805: NEG
49806: PUSH
49807: LD_INT 3
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49846: LD_ADDR_VAR 0 42
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: LD_INT 3
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: LD_INT 3
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 3
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 3
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 3
50092: PUSH
50093: LD_INT 3
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 3
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 3
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 3
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 3
50143: NEG
50144: PUSH
50145: LD_INT 2
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 3
50155: NEG
50156: PUSH
50157: LD_INT 3
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50196: LD_ADDR_VAR 0 43
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 2
50362: NEG
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 2
50373: NEG
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 3
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 3
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 3
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 3
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: LD_INT 3
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: LD_INT 3
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 3
50492: NEG
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 3
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50544: LD_ADDR_VAR 0 44
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 2
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 3
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 3
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 3
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 3
50787: PUSH
50788: LD_INT 3
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 2
50797: PUSH
50798: LD_INT 3
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 2
50807: NEG
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 3
50818: NEG
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 3
50829: NEG
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 3
50841: NEG
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 3
50853: NEG
50854: PUSH
50855: LD_INT 3
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50894: LD_ADDR_VAR 0 45
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: LD_INT 2
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 2
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 2
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: NEG
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: LD_INT 2
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: LD_INT 3
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 3
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: LD_INT 3
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 3
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 3
51140: PUSH
51141: LD_INT 3
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: LD_INT 3
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 3
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: LD_INT 3
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 3
51191: NEG
51192: PUSH
51193: LD_INT 2
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: NEG
51204: PUSH
51205: LD_INT 3
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51244: LD_ADDR_VAR 0 46
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: LD_INT 2
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 3
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 3
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 3
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 3
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 3
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 3
51540: NEG
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 3
51551: NEG
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51592: LD_ADDR_VAR 0 47
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: LD_INT 2
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 2
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 2
51707: NEG
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: NEG
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51743: LD_ADDR_VAR 0 48
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51890: LD_ADDR_VAR 0 49
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52034: LD_ADDR_VAR 0 50
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 1
52107: NEG
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52178: LD_ADDR_VAR 0 51
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52325: LD_ADDR_VAR 0 52
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 1
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52476: LD_ADDR_VAR 0 53
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 2
52675: NEG
52676: PUSH
52677: LD_INT 2
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52706: LD_ADDR_VAR 0 54
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52936: LD_ADDR_VAR 0 55
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: NEG
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53166: LD_ADDR_VAR 0 56
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 2
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: LD_INT 2
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: LD_INT 2
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53396: LD_ADDR_VAR 0 57
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 2
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: LD_INT 2
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53626: LD_ADDR_VAR 0 58
53630: PUSH
53631: LD_INT 0
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53856: LD_ADDR_VAR 0 59
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53944: LD_ADDR_VAR 0 60
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54032: LD_ADDR_VAR 0 61
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54120: LD_ADDR_VAR 0 62
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54208: LD_ADDR_VAR 0 63
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54296: LD_ADDR_VAR 0 64
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: ST_TO_ADDR
// end ; 1 :
54384: GO 60281
54386: LD_INT 1
54388: DOUBLE
54389: EQUAL
54390: IFTRUE 54394
54392: GO 57017
54394: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54395: LD_ADDR_VAR 0 11
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: LD_INT 3
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 3
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: LD_INT 2
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: LIST
54438: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54439: LD_ADDR_VAR 0 12
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: LIST
54479: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54480: LD_ADDR_VAR 0 13
54484: PUSH
54485: LD_INT 3
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 3
54497: PUSH
54498: LD_INT 3
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: PUSH
54508: LD_INT 3
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: LIST
54519: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54520: LD_ADDR_VAR 0 14
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: LD_INT 3
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: LD_INT 3
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: LIST
54560: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54561: LD_ADDR_VAR 0 15
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: LIST
54604: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54605: LD_ADDR_VAR 0 16
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: LD_INT 3
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 3
54624: NEG
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 3
54636: NEG
54637: PUSH
54638: LD_INT 3
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: LIST
54650: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54651: LD_ADDR_VAR 0 17
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 3
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 3
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: LIST
54694: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54695: LD_ADDR_VAR 0 18
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 3
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 3
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: LIST
54735: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54736: LD_ADDR_VAR 0 19
54740: PUSH
54741: LD_INT 3
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 3
54753: PUSH
54754: LD_INT 3
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: LD_INT 3
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: LIST
54775: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54776: LD_ADDR_VAR 0 20
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: LD_INT 3
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: LD_INT 3
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: LIST
54816: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54817: LD_ADDR_VAR 0 21
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 3
54835: NEG
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 3
54846: NEG
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: LIST
54860: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54861: LD_ADDR_VAR 0 22
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: LD_INT 3
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 3
54880: NEG
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 3
54892: NEG
54893: PUSH
54894: LD_INT 3
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: LIST
54906: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54907: LD_ADDR_VAR 0 23
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 3
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: LD_INT 4
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 3
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: LIST
54950: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54951: LD_ADDR_VAR 0 24
54955: PUSH
54956: LD_INT 3
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 3
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 4
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: LIST
54991: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54992: LD_ADDR_VAR 0 25
54996: PUSH
54997: LD_INT 3
54999: PUSH
55000: LD_INT 3
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 4
55009: PUSH
55010: LD_INT 3
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 3
55019: PUSH
55020: LD_INT 4
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: LIST
55031: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55032: LD_ADDR_VAR 0 26
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 3
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 4
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: LD_INT 3
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: LIST
55072: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55073: LD_ADDR_VAR 0 27
55077: PUSH
55078: LD_INT 3
55080: NEG
55081: PUSH
55082: LD_INT 0
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 3
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 4
55102: NEG
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: LIST
55116: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55117: LD_ADDR_VAR 0 28
55121: PUSH
55122: LD_INT 3
55124: NEG
55125: PUSH
55126: LD_INT 3
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 3
55136: NEG
55137: PUSH
55138: LD_INT 4
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 4
55148: NEG
55149: PUSH
55150: LD_INT 3
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: LIST
55162: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55163: LD_ADDR_VAR 0 29
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: LD_INT 3
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: LD_INT 3
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: LD_INT 2
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: LD_INT 4
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 4
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: LD_INT 5
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: LD_INT 5
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: LD_INT 4
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 6
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 6
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 5
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55318: LD_ADDR_VAR 0 30
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 3
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 3
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 3
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 4
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 4
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 4
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 5
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 5
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 5
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 6
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 6
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55461: LD_ADDR_VAR 0 31
55465: PUSH
55466: LD_INT 3
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 4
55498: PUSH
55499: LD_INT 3
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 4
55508: PUSH
55509: LD_INT 4
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 3
55518: PUSH
55519: LD_INT 4
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 5
55528: PUSH
55529: LD_INT 4
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 5
55538: PUSH
55539: LD_INT 5
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 4
55548: PUSH
55549: LD_INT 5
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 6
55558: PUSH
55559: LD_INT 5
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 6
55568: PUSH
55569: LD_INT 6
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 5
55578: PUSH
55579: LD_INT 6
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55600: LD_ADDR_VAR 0 32
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 3
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 3
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: LD_INT 4
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 4
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: LD_INT 3
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 5
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 5
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 4
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: LD_INT 6
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: LD_INT 6
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: LD_INT 5
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55743: LD_ADDR_VAR 0 33
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 3
55761: NEG
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 3
55772: NEG
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 3
55784: NEG
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 4
55795: NEG
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 4
55806: NEG
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 4
55818: NEG
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 5
55829: NEG
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 5
55840: NEG
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 5
55852: NEG
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 6
55863: NEG
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 6
55874: NEG
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55898: LD_ADDR_VAR 0 34
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: LD_INT 3
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 3
55917: NEG
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 3
55929: NEG
55930: PUSH
55931: LD_INT 3
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: LD_INT 4
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 4
55953: NEG
55954: PUSH
55955: LD_INT 3
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 4
55965: NEG
55966: PUSH
55967: LD_INT 4
55969: NEG
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 4
55977: NEG
55978: PUSH
55979: LD_INT 5
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 5
55989: NEG
55990: PUSH
55991: LD_INT 4
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 5
56001: NEG
56002: PUSH
56003: LD_INT 5
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 5
56013: NEG
56014: PUSH
56015: LD_INT 6
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 6
56025: NEG
56026: PUSH
56027: LD_INT 5
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 6
56037: NEG
56038: PUSH
56039: LD_INT 6
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56061: LD_ADDR_VAR 0 41
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: LD_INT 3
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: LIST
56104: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56105: LD_ADDR_VAR 0 42
56109: PUSH
56110: LD_INT 2
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 3
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: LIST
56145: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56146: LD_ADDR_VAR 0 43
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: LD_INT 2
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 3
56163: PUSH
56164: LD_INT 2
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: LD_INT 3
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: LIST
56185: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56186: LD_ADDR_VAR 0 44
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: LD_INT 3
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: LIST
56226: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56227: LD_ADDR_VAR 0 45
56231: PUSH
56232: LD_INT 2
56234: NEG
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: LIST
56270: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56271: LD_ADDR_VAR 0 46
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 2
56290: NEG
56291: PUSH
56292: LD_INT 3
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: LIST
56316: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56317: LD_ADDR_VAR 0 47
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: LD_INT 3
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 3
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56350: LD_ADDR_VAR 0 48
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56381: LD_ADDR_VAR 0 49
56385: PUSH
56386: LD_INT 3
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 3
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56410: LD_ADDR_VAR 0 50
56414: PUSH
56415: LD_INT 2
56417: PUSH
56418: LD_INT 3
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: LD_INT 3
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56439: LD_ADDR_VAR 0 51
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56470: LD_ADDR_VAR 0 52
56474: PUSH
56475: LD_INT 3
56477: NEG
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56503: LD_ADDR_VAR 0 53
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: LD_INT 3
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 3
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: LIST
56546: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56547: LD_ADDR_VAR 0 54
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 3
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 3
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: LIST
56587: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56588: LD_ADDR_VAR 0 55
56592: PUSH
56593: LD_INT 3
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 3
56605: PUSH
56606: LD_INT 3
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: LD_INT 3
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: LIST
56627: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56628: LD_ADDR_VAR 0 56
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: LD_INT 3
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 3
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: LIST
56668: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56669: LD_ADDR_VAR 0 57
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 3
56687: NEG
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: NEG
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56713: LD_ADDR_VAR 0 58
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: LD_INT 3
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 3
56732: NEG
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: LD_INT 3
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56759: LD_ADDR_VAR 0 59
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: LIST
56802: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56803: LD_ADDR_VAR 0 60
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 2
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: LIST
56843: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56844: LD_ADDR_VAR 0 61
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: LIST
56883: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56884: LD_ADDR_VAR 0 62
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: LIST
56924: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56925: LD_ADDR_VAR 0 63
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: LD_INT 1
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 2
56943: NEG
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: LIST
56968: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56969: LD_ADDR_VAR 0 64
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 2
56988: NEG
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 2
57000: NEG
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: LIST
57014: ST_TO_ADDR
// end ; 2 :
57015: GO 60281
57017: LD_INT 2
57019: DOUBLE
57020: EQUAL
57021: IFTRUE 57025
57023: GO 60280
57025: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57026: LD_ADDR_VAR 0 29
57030: PUSH
57031: LD_INT 4
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 4
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 5
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 5
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 4
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 3
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 3
57094: PUSH
57095: LD_INT 1
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 3
57105: PUSH
57106: LD_INT 2
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 5
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 3
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 3
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 4
57146: PUSH
57147: LD_INT 3
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 4
57156: PUSH
57157: LD_INT 4
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 3
57166: PUSH
57167: LD_INT 4
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: LD_INT 3
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 4
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: LD_INT 4
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: LD_INT 4
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 3
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: LD_INT 4
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: LD_INT 5
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: LD_INT 5
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: LD_INT 4
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: LD_INT 3
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 2
57288: PUSH
57289: LD_INT 5
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: LD_INT 3
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 3
57309: NEG
57310: PUSH
57311: LD_INT 0
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 3
57320: NEG
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: NEG
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 4
57365: NEG
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 4
57376: NEG
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 4
57388: NEG
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 2
57400: NEG
57401: PUSH
57402: LD_INT 2
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 4
57411: NEG
57412: PUSH
57413: LD_INT 4
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 4
57423: NEG
57424: PUSH
57425: LD_INT 5
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 3
57435: NEG
57436: PUSH
57437: LD_INT 4
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 3
57447: NEG
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 4
57459: NEG
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 5
57471: NEG
57472: PUSH
57473: LD_INT 4
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 5
57483: NEG
57484: PUSH
57485: LD_INT 5
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: LD_INT 5
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 5
57507: NEG
57508: PUSH
57509: LD_INT 3
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57564: LD_ADDR_VAR 0 30
57568: PUSH
57569: LD_INT 4
57571: PUSH
57572: LD_INT 4
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 4
57581: PUSH
57582: LD_INT 3
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 5
57591: PUSH
57592: LD_INT 4
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 5
57601: PUSH
57602: LD_INT 5
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 4
57611: PUSH
57612: LD_INT 5
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 3
57621: PUSH
57622: LD_INT 4
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 3
57631: PUSH
57632: LD_INT 3
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 5
57641: PUSH
57642: LD_INT 3
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 3
57651: PUSH
57652: LD_INT 5
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: LD_INT 3
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 4
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 4
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: LD_INT 3
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: LD_INT 4
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 2
57743: NEG
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 4
57754: NEG
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 4
57765: NEG
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 3
57777: NEG
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 3
57788: NEG
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 4
57799: NEG
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 5
57810: NEG
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 5
57821: NEG
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 5
57833: NEG
57834: PUSH
57835: LD_INT 2
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 3
57845: NEG
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 3
57856: NEG
57857: PUSH
57858: LD_INT 3
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 3
57868: NEG
57869: PUSH
57870: LD_INT 4
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PUSH
57882: LD_INT 3
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: NEG
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: NEG
57905: PUSH
57906: LD_INT 2
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 4
57916: NEG
57917: PUSH
57918: LD_INT 3
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 4
57928: NEG
57929: PUSH
57930: LD_INT 4
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: LD_INT 4
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 4
57952: NEG
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 4
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 5
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 4
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: LD_INT 3
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: LD_INT 4
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: LD_INT 5
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 2
58043: PUSH
58044: LD_INT 3
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: NEG
58055: PUSH
58056: LD_INT 5
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58111: LD_ADDR_VAR 0 31
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: LD_INT 4
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: LD_INT 4
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: LD_INT 5
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: LD_INT 5
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: LD_INT 4
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 3
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 2
58190: PUSH
58191: LD_INT 5
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 2
58200: NEG
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 3
58211: NEG
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: NEG
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 3
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 4
58267: NEG
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 4
58278: NEG
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 4
58290: NEG
58291: PUSH
58292: LD_INT 2
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 4
58313: NEG
58314: PUSH
58315: LD_INT 4
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 4
58325: NEG
58326: PUSH
58327: LD_INT 5
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 3
58337: NEG
58338: PUSH
58339: LD_INT 4
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 3
58349: NEG
58350: PUSH
58351: LD_INT 3
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 4
58361: NEG
58362: PUSH
58363: LD_INT 3
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 5
58373: NEG
58374: PUSH
58375: LD_INT 4
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 5
58385: NEG
58386: PUSH
58387: LD_INT 5
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 3
58397: NEG
58398: PUSH
58399: LD_INT 5
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 5
58409: NEG
58410: PUSH
58411: LD_INT 3
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: LD_INT 3
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 4
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: LD_INT 3
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: LD_INT 2
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: LD_INT 3
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: LD_INT 4
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 2
58500: PUSH
58501: LD_INT 2
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: LD_INT 4
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 4
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 4
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 5
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 5
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 4
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 3
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 3
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 5
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58661: LD_ADDR_VAR 0 32
58665: PUSH
58666: LD_INT 4
58668: NEG
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 4
58679: NEG
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 3
58691: NEG
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 3
58702: NEG
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 4
58713: NEG
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 5
58724: NEG
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 5
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 5
58747: NEG
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 3
58759: NEG
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 3
58770: NEG
58771: PUSH
58772: LD_INT 3
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: LD_INT 4
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: LD_INT 3
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 3
58818: NEG
58819: PUSH
58820: LD_INT 2
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 4
58830: NEG
58831: PUSH
58832: LD_INT 3
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 4
58842: NEG
58843: PUSH
58844: LD_INT 4
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: LD_INT 4
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 4
58866: NEG
58867: PUSH
58868: LD_INT 2
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 4
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 5
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: LD_INT 4
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: LD_INT 3
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: LD_INT 3
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: LD_INT 4
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: LD_INT 5
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: PUSH
58958: LD_INT 3
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 2
58968: NEG
58969: PUSH
58970: LD_INT 5
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 3
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 3
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 4
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 4
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 3
59021: PUSH
59022: LD_INT 1
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: LD_INT 2
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 4
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 4
59073: PUSH
59074: LD_INT 4
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 4
59083: PUSH
59084: LD_INT 3
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 5
59093: PUSH
59094: LD_INT 4
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 5
59103: PUSH
59104: LD_INT 5
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 4
59113: PUSH
59114: LD_INT 5
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 3
59123: PUSH
59124: LD_INT 4
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 3
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 5
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 3
59153: PUSH
59154: LD_INT 5
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59208: LD_ADDR_VAR 0 33
59212: PUSH
59213: LD_INT 4
59215: NEG
59216: PUSH
59217: LD_INT 4
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 4
59227: NEG
59228: PUSH
59229: LD_INT 5
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: LD_INT 4
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 3
59251: NEG
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 4
59263: NEG
59264: PUSH
59265: LD_INT 3
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 5
59275: NEG
59276: PUSH
59277: LD_INT 4
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 5
59287: NEG
59288: PUSH
59289: LD_INT 5
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: NEG
59300: PUSH
59301: LD_INT 5
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 5
59311: NEG
59312: PUSH
59313: LD_INT 3
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 3
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 4
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: LD_INT 2
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: LD_INT 3
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: LD_INT 4
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: LD_INT 2
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: LD_INT 4
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 4
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 4
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 5
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 5
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 4
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 3
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 3
59486: PUSH
59487: LD_INT 1
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 3
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 5
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 3
59518: PUSH
59519: LD_INT 3
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 3
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 4
59538: PUSH
59539: LD_INT 3
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 4
59548: PUSH
59549: LD_INT 4
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 3
59558: PUSH
59559: LD_INT 4
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 2
59568: PUSH
59569: LD_INT 3
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: PUSH
59579: LD_INT 2
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 4
59588: PUSH
59589: LD_INT 2
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: LD_INT 4
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: LD_INT 4
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 3
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: LD_INT 4
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 5
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 5
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 4
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: LD_INT 3
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: LD_INT 5
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 2
59690: NEG
59691: PUSH
59692: LD_INT 3
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59746: LD_ADDR_VAR 0 34
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: LD_INT 4
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 5
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: LD_INT 4
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: LD_INT 3
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: LD_INT 3
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: LD_INT 4
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: LD_INT 5
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 2
59832: PUSH
59833: LD_INT 3
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: LD_INT 5
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 3
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 4
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 4
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 3
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 2
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 2
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 4
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 4
59948: PUSH
59949: LD_INT 4
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 4
59958: PUSH
59959: LD_INT 3
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 5
59968: PUSH
59969: LD_INT 4
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 5
59978: PUSH
59979: LD_INT 5
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 4
59988: PUSH
59989: LD_INT 5
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 3
59998: PUSH
59999: LD_INT 4
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 3
60008: PUSH
60009: LD_INT 3
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 5
60018: PUSH
60019: LD_INT 3
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 3
60028: PUSH
60029: LD_INT 5
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 3
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: LD_INT 2
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: LD_INT 3
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: LD_INT 4
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: LD_INT 4
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: LD_INT 3
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: LD_INT 4
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 2
60120: NEG
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 4
60131: NEG
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 4
60142: NEG
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 3
60154: NEG
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 3
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 4
60176: NEG
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 5
60187: NEG
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 5
60198: NEG
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 5
60210: NEG
60211: PUSH
60212: LD_INT 2
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 3
60222: NEG
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: ST_TO_ADDR
// end ; end ;
60278: GO 60281
60280: POP
// case btype of b_depot , b_warehouse :
60281: LD_VAR 0 1
60285: PUSH
60286: LD_INT 0
60288: DOUBLE
60289: EQUAL
60290: IFTRUE 60300
60292: LD_INT 1
60294: DOUBLE
60295: EQUAL
60296: IFTRUE 60300
60298: GO 60501
60300: POP
// case nation of nation_american :
60301: LD_VAR 0 5
60305: PUSH
60306: LD_INT 1
60308: DOUBLE
60309: EQUAL
60310: IFTRUE 60314
60312: GO 60370
60314: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60315: LD_ADDR_VAR 0 9
60319: PUSH
60320: LD_VAR 0 11
60324: PUSH
60325: LD_VAR 0 12
60329: PUSH
60330: LD_VAR 0 13
60334: PUSH
60335: LD_VAR 0 14
60339: PUSH
60340: LD_VAR 0 15
60344: PUSH
60345: LD_VAR 0 16
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: PUSH
60358: LD_VAR 0 4
60362: PUSH
60363: LD_INT 1
60365: PLUS
60366: ARRAY
60367: ST_TO_ADDR
60368: GO 60499
60370: LD_INT 2
60372: DOUBLE
60373: EQUAL
60374: IFTRUE 60378
60376: GO 60434
60378: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60379: LD_ADDR_VAR 0 9
60383: PUSH
60384: LD_VAR 0 17
60388: PUSH
60389: LD_VAR 0 18
60393: PUSH
60394: LD_VAR 0 19
60398: PUSH
60399: LD_VAR 0 20
60403: PUSH
60404: LD_VAR 0 21
60408: PUSH
60409: LD_VAR 0 22
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: PUSH
60422: LD_VAR 0 4
60426: PUSH
60427: LD_INT 1
60429: PLUS
60430: ARRAY
60431: ST_TO_ADDR
60432: GO 60499
60434: LD_INT 3
60436: DOUBLE
60437: EQUAL
60438: IFTRUE 60442
60440: GO 60498
60442: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60443: LD_ADDR_VAR 0 9
60447: PUSH
60448: LD_VAR 0 23
60452: PUSH
60453: LD_VAR 0 24
60457: PUSH
60458: LD_VAR 0 25
60462: PUSH
60463: LD_VAR 0 26
60467: PUSH
60468: LD_VAR 0 27
60472: PUSH
60473: LD_VAR 0 28
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: PUSH
60486: LD_VAR 0 4
60490: PUSH
60491: LD_INT 1
60493: PLUS
60494: ARRAY
60495: ST_TO_ADDR
60496: GO 60499
60498: POP
60499: GO 61054
60501: LD_INT 2
60503: DOUBLE
60504: EQUAL
60505: IFTRUE 60515
60507: LD_INT 3
60509: DOUBLE
60510: EQUAL
60511: IFTRUE 60515
60513: GO 60571
60515: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60516: LD_ADDR_VAR 0 9
60520: PUSH
60521: LD_VAR 0 29
60525: PUSH
60526: LD_VAR 0 30
60530: PUSH
60531: LD_VAR 0 31
60535: PUSH
60536: LD_VAR 0 32
60540: PUSH
60541: LD_VAR 0 33
60545: PUSH
60546: LD_VAR 0 34
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: PUSH
60559: LD_VAR 0 4
60563: PUSH
60564: LD_INT 1
60566: PLUS
60567: ARRAY
60568: ST_TO_ADDR
60569: GO 61054
60571: LD_INT 16
60573: DOUBLE
60574: EQUAL
60575: IFTRUE 60633
60577: LD_INT 17
60579: DOUBLE
60580: EQUAL
60581: IFTRUE 60633
60583: LD_INT 18
60585: DOUBLE
60586: EQUAL
60587: IFTRUE 60633
60589: LD_INT 19
60591: DOUBLE
60592: EQUAL
60593: IFTRUE 60633
60595: LD_INT 22
60597: DOUBLE
60598: EQUAL
60599: IFTRUE 60633
60601: LD_INT 20
60603: DOUBLE
60604: EQUAL
60605: IFTRUE 60633
60607: LD_INT 21
60609: DOUBLE
60610: EQUAL
60611: IFTRUE 60633
60613: LD_INT 23
60615: DOUBLE
60616: EQUAL
60617: IFTRUE 60633
60619: LD_INT 24
60621: DOUBLE
60622: EQUAL
60623: IFTRUE 60633
60625: LD_INT 25
60627: DOUBLE
60628: EQUAL
60629: IFTRUE 60633
60631: GO 60689
60633: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60634: LD_ADDR_VAR 0 9
60638: PUSH
60639: LD_VAR 0 35
60643: PUSH
60644: LD_VAR 0 36
60648: PUSH
60649: LD_VAR 0 37
60653: PUSH
60654: LD_VAR 0 38
60658: PUSH
60659: LD_VAR 0 39
60663: PUSH
60664: LD_VAR 0 40
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: PUSH
60677: LD_VAR 0 4
60681: PUSH
60682: LD_INT 1
60684: PLUS
60685: ARRAY
60686: ST_TO_ADDR
60687: GO 61054
60689: LD_INT 6
60691: DOUBLE
60692: EQUAL
60693: IFTRUE 60745
60695: LD_INT 7
60697: DOUBLE
60698: EQUAL
60699: IFTRUE 60745
60701: LD_INT 8
60703: DOUBLE
60704: EQUAL
60705: IFTRUE 60745
60707: LD_INT 13
60709: DOUBLE
60710: EQUAL
60711: IFTRUE 60745
60713: LD_INT 12
60715: DOUBLE
60716: EQUAL
60717: IFTRUE 60745
60719: LD_INT 15
60721: DOUBLE
60722: EQUAL
60723: IFTRUE 60745
60725: LD_INT 11
60727: DOUBLE
60728: EQUAL
60729: IFTRUE 60745
60731: LD_INT 14
60733: DOUBLE
60734: EQUAL
60735: IFTRUE 60745
60737: LD_INT 10
60739: DOUBLE
60740: EQUAL
60741: IFTRUE 60745
60743: GO 60801
60745: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60746: LD_ADDR_VAR 0 9
60750: PUSH
60751: LD_VAR 0 41
60755: PUSH
60756: LD_VAR 0 42
60760: PUSH
60761: LD_VAR 0 43
60765: PUSH
60766: LD_VAR 0 44
60770: PUSH
60771: LD_VAR 0 45
60775: PUSH
60776: LD_VAR 0 46
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: PUSH
60789: LD_VAR 0 4
60793: PUSH
60794: LD_INT 1
60796: PLUS
60797: ARRAY
60798: ST_TO_ADDR
60799: GO 61054
60801: LD_INT 36
60803: DOUBLE
60804: EQUAL
60805: IFTRUE 60809
60807: GO 60865
60809: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60810: LD_ADDR_VAR 0 9
60814: PUSH
60815: LD_VAR 0 47
60819: PUSH
60820: LD_VAR 0 48
60824: PUSH
60825: LD_VAR 0 49
60829: PUSH
60830: LD_VAR 0 50
60834: PUSH
60835: LD_VAR 0 51
60839: PUSH
60840: LD_VAR 0 52
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: PUSH
60853: LD_VAR 0 4
60857: PUSH
60858: LD_INT 1
60860: PLUS
60861: ARRAY
60862: ST_TO_ADDR
60863: GO 61054
60865: LD_INT 4
60867: DOUBLE
60868: EQUAL
60869: IFTRUE 60891
60871: LD_INT 5
60873: DOUBLE
60874: EQUAL
60875: IFTRUE 60891
60877: LD_INT 34
60879: DOUBLE
60880: EQUAL
60881: IFTRUE 60891
60883: LD_INT 37
60885: DOUBLE
60886: EQUAL
60887: IFTRUE 60891
60889: GO 60947
60891: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60892: LD_ADDR_VAR 0 9
60896: PUSH
60897: LD_VAR 0 53
60901: PUSH
60902: LD_VAR 0 54
60906: PUSH
60907: LD_VAR 0 55
60911: PUSH
60912: LD_VAR 0 56
60916: PUSH
60917: LD_VAR 0 57
60921: PUSH
60922: LD_VAR 0 58
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: PUSH
60935: LD_VAR 0 4
60939: PUSH
60940: LD_INT 1
60942: PLUS
60943: ARRAY
60944: ST_TO_ADDR
60945: GO 61054
60947: LD_INT 31
60949: DOUBLE
60950: EQUAL
60951: IFTRUE 60997
60953: LD_INT 32
60955: DOUBLE
60956: EQUAL
60957: IFTRUE 60997
60959: LD_INT 33
60961: DOUBLE
60962: EQUAL
60963: IFTRUE 60997
60965: LD_INT 27
60967: DOUBLE
60968: EQUAL
60969: IFTRUE 60997
60971: LD_INT 26
60973: DOUBLE
60974: EQUAL
60975: IFTRUE 60997
60977: LD_INT 28
60979: DOUBLE
60980: EQUAL
60981: IFTRUE 60997
60983: LD_INT 29
60985: DOUBLE
60986: EQUAL
60987: IFTRUE 60997
60989: LD_INT 30
60991: DOUBLE
60992: EQUAL
60993: IFTRUE 60997
60995: GO 61053
60997: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60998: LD_ADDR_VAR 0 9
61002: PUSH
61003: LD_VAR 0 59
61007: PUSH
61008: LD_VAR 0 60
61012: PUSH
61013: LD_VAR 0 61
61017: PUSH
61018: LD_VAR 0 62
61022: PUSH
61023: LD_VAR 0 63
61027: PUSH
61028: LD_VAR 0 64
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: PUSH
61041: LD_VAR 0 4
61045: PUSH
61046: LD_INT 1
61048: PLUS
61049: ARRAY
61050: ST_TO_ADDR
61051: GO 61054
61053: POP
// temp_list2 = [ ] ;
61054: LD_ADDR_VAR 0 10
61058: PUSH
61059: EMPTY
61060: ST_TO_ADDR
// for i in temp_list do
61061: LD_ADDR_VAR 0 8
61065: PUSH
61066: LD_VAR 0 9
61070: PUSH
61071: FOR_IN
61072: IFFALSE 61124
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61074: LD_ADDR_VAR 0 10
61078: PUSH
61079: LD_VAR 0 10
61083: PUSH
61084: LD_VAR 0 8
61088: PUSH
61089: LD_INT 1
61091: ARRAY
61092: PUSH
61093: LD_VAR 0 2
61097: PLUS
61098: PUSH
61099: LD_VAR 0 8
61103: PUSH
61104: LD_INT 2
61106: ARRAY
61107: PUSH
61108: LD_VAR 0 3
61112: PLUS
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: EMPTY
61119: LIST
61120: ADD
61121: ST_TO_ADDR
61122: GO 61071
61124: POP
61125: POP
// result = temp_list2 ;
61126: LD_ADDR_VAR 0 7
61130: PUSH
61131: LD_VAR 0 10
61135: ST_TO_ADDR
// end ;
61136: LD_VAR 0 7
61140: RET
// export function EnemyInRange ( unit , dist ) ; begin
61141: LD_INT 0
61143: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61144: LD_ADDR_VAR 0 3
61148: PUSH
61149: LD_VAR 0 1
61153: PPUSH
61154: CALL_OW 255
61158: PPUSH
61159: LD_VAR 0 1
61163: PPUSH
61164: CALL_OW 250
61168: PPUSH
61169: LD_VAR 0 1
61173: PPUSH
61174: CALL_OW 251
61178: PPUSH
61179: LD_VAR 0 2
61183: PPUSH
61184: CALL 34537 0 4
61188: PUSH
61189: LD_INT 4
61191: ARRAY
61192: ST_TO_ADDR
// end ;
61193: LD_VAR 0 3
61197: RET
// export function PlayerSeeMe ( unit ) ; begin
61198: LD_INT 0
61200: PPUSH
// result := See ( your_side , unit ) ;
61201: LD_ADDR_VAR 0 2
61205: PUSH
61206: LD_OWVAR 2
61210: PPUSH
61211: LD_VAR 0 1
61215: PPUSH
61216: CALL_OW 292
61220: ST_TO_ADDR
// end ;
61221: LD_VAR 0 2
61225: RET
// export function ReverseDir ( unit ) ; begin
61226: LD_INT 0
61228: PPUSH
// if not unit then
61229: LD_VAR 0 1
61233: NOT
61234: IFFALSE 61238
// exit ;
61236: GO 61261
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61238: LD_ADDR_VAR 0 2
61242: PUSH
61243: LD_VAR 0 1
61247: PPUSH
61248: CALL_OW 254
61252: PUSH
61253: LD_INT 3
61255: PLUS
61256: PUSH
61257: LD_INT 6
61259: MOD
61260: ST_TO_ADDR
// end ;
61261: LD_VAR 0 2
61265: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61266: LD_INT 0
61268: PPUSH
61269: PPUSH
61270: PPUSH
61271: PPUSH
61272: PPUSH
// if not hexes then
61273: LD_VAR 0 2
61277: NOT
61278: IFFALSE 61282
// exit ;
61280: GO 61430
// dist := 9999 ;
61282: LD_ADDR_VAR 0 5
61286: PUSH
61287: LD_INT 9999
61289: ST_TO_ADDR
// for i = 1 to hexes do
61290: LD_ADDR_VAR 0 4
61294: PUSH
61295: DOUBLE
61296: LD_INT 1
61298: DEC
61299: ST_TO_ADDR
61300: LD_VAR 0 2
61304: PUSH
61305: FOR_TO
61306: IFFALSE 61418
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61308: LD_VAR 0 1
61312: PPUSH
61313: LD_VAR 0 2
61317: PUSH
61318: LD_VAR 0 4
61322: ARRAY
61323: PUSH
61324: LD_INT 1
61326: ARRAY
61327: PPUSH
61328: LD_VAR 0 2
61332: PUSH
61333: LD_VAR 0 4
61337: ARRAY
61338: PUSH
61339: LD_INT 2
61341: ARRAY
61342: PPUSH
61343: CALL_OW 297
61347: PUSH
61348: LD_VAR 0 5
61352: LESS
61353: IFFALSE 61416
// begin hex := hexes [ i ] ;
61355: LD_ADDR_VAR 0 7
61359: PUSH
61360: LD_VAR 0 2
61364: PUSH
61365: LD_VAR 0 4
61369: ARRAY
61370: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61371: LD_ADDR_VAR 0 5
61375: PUSH
61376: LD_VAR 0 1
61380: PPUSH
61381: LD_VAR 0 2
61385: PUSH
61386: LD_VAR 0 4
61390: ARRAY
61391: PUSH
61392: LD_INT 1
61394: ARRAY
61395: PPUSH
61396: LD_VAR 0 2
61400: PUSH
61401: LD_VAR 0 4
61405: ARRAY
61406: PUSH
61407: LD_INT 2
61409: ARRAY
61410: PPUSH
61411: CALL_OW 297
61415: ST_TO_ADDR
// end ; end ;
61416: GO 61305
61418: POP
61419: POP
// result := hex ;
61420: LD_ADDR_VAR 0 3
61424: PUSH
61425: LD_VAR 0 7
61429: ST_TO_ADDR
// end ;
61430: LD_VAR 0 3
61434: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61435: LD_INT 0
61437: PPUSH
61438: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61439: LD_VAR 0 1
61443: NOT
61444: PUSH
61445: LD_VAR 0 1
61449: PUSH
61450: LD_INT 21
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 23
61462: PUSH
61463: LD_INT 2
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PPUSH
61474: CALL_OW 69
61478: IN
61479: NOT
61480: OR
61481: IFFALSE 61485
// exit ;
61483: GO 61532
// for i = 1 to 3 do
61485: LD_ADDR_VAR 0 3
61489: PUSH
61490: DOUBLE
61491: LD_INT 1
61493: DEC
61494: ST_TO_ADDR
61495: LD_INT 3
61497: PUSH
61498: FOR_TO
61499: IFFALSE 61530
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61501: LD_VAR 0 1
61505: PPUSH
61506: CALL_OW 250
61510: PPUSH
61511: LD_VAR 0 1
61515: PPUSH
61516: CALL_OW 251
61520: PPUSH
61521: LD_INT 1
61523: PPUSH
61524: CALL_OW 453
61528: GO 61498
61530: POP
61531: POP
// end ;
61532: LD_VAR 0 2
61536: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61537: LD_INT 0
61539: PPUSH
61540: PPUSH
61541: PPUSH
61542: PPUSH
61543: PPUSH
61544: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61545: LD_VAR 0 1
61549: NOT
61550: PUSH
61551: LD_VAR 0 2
61555: NOT
61556: OR
61557: PUSH
61558: LD_VAR 0 1
61562: PPUSH
61563: CALL_OW 314
61567: OR
61568: IFFALSE 61572
// exit ;
61570: GO 62013
// x := GetX ( enemy_unit ) ;
61572: LD_ADDR_VAR 0 7
61576: PUSH
61577: LD_VAR 0 2
61581: PPUSH
61582: CALL_OW 250
61586: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61587: LD_ADDR_VAR 0 8
61591: PUSH
61592: LD_VAR 0 2
61596: PPUSH
61597: CALL_OW 251
61601: ST_TO_ADDR
// if not x or not y then
61602: LD_VAR 0 7
61606: NOT
61607: PUSH
61608: LD_VAR 0 8
61612: NOT
61613: OR
61614: IFFALSE 61618
// exit ;
61616: GO 62013
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61618: LD_ADDR_VAR 0 6
61622: PUSH
61623: LD_VAR 0 7
61627: PPUSH
61628: LD_INT 0
61630: PPUSH
61631: LD_INT 4
61633: PPUSH
61634: CALL_OW 272
61638: PUSH
61639: LD_VAR 0 8
61643: PPUSH
61644: LD_INT 0
61646: PPUSH
61647: LD_INT 4
61649: PPUSH
61650: CALL_OW 273
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_VAR 0 7
61663: PPUSH
61664: LD_INT 1
61666: PPUSH
61667: LD_INT 4
61669: PPUSH
61670: CALL_OW 272
61674: PUSH
61675: LD_VAR 0 8
61679: PPUSH
61680: LD_INT 1
61682: PPUSH
61683: LD_INT 4
61685: PPUSH
61686: CALL_OW 273
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_VAR 0 7
61699: PPUSH
61700: LD_INT 2
61702: PPUSH
61703: LD_INT 4
61705: PPUSH
61706: CALL_OW 272
61710: PUSH
61711: LD_VAR 0 8
61715: PPUSH
61716: LD_INT 2
61718: PPUSH
61719: LD_INT 4
61721: PPUSH
61722: CALL_OW 273
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_VAR 0 7
61735: PPUSH
61736: LD_INT 3
61738: PPUSH
61739: LD_INT 4
61741: PPUSH
61742: CALL_OW 272
61746: PUSH
61747: LD_VAR 0 8
61751: PPUSH
61752: LD_INT 3
61754: PPUSH
61755: LD_INT 4
61757: PPUSH
61758: CALL_OW 273
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_VAR 0 7
61771: PPUSH
61772: LD_INT 4
61774: PPUSH
61775: LD_INT 4
61777: PPUSH
61778: CALL_OW 272
61782: PUSH
61783: LD_VAR 0 8
61787: PPUSH
61788: LD_INT 4
61790: PPUSH
61791: LD_INT 4
61793: PPUSH
61794: CALL_OW 273
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_VAR 0 7
61807: PPUSH
61808: LD_INT 5
61810: PPUSH
61811: LD_INT 4
61813: PPUSH
61814: CALL_OW 272
61818: PUSH
61819: LD_VAR 0 8
61823: PPUSH
61824: LD_INT 5
61826: PPUSH
61827: LD_INT 4
61829: PPUSH
61830: CALL_OW 273
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: ST_TO_ADDR
// for i = tmp downto 1 do
61847: LD_ADDR_VAR 0 4
61851: PUSH
61852: DOUBLE
61853: LD_VAR 0 6
61857: INC
61858: ST_TO_ADDR
61859: LD_INT 1
61861: PUSH
61862: FOR_DOWNTO
61863: IFFALSE 61964
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61865: LD_VAR 0 6
61869: PUSH
61870: LD_VAR 0 4
61874: ARRAY
61875: PUSH
61876: LD_INT 1
61878: ARRAY
61879: PPUSH
61880: LD_VAR 0 6
61884: PUSH
61885: LD_VAR 0 4
61889: ARRAY
61890: PUSH
61891: LD_INT 2
61893: ARRAY
61894: PPUSH
61895: CALL_OW 488
61899: NOT
61900: PUSH
61901: LD_VAR 0 6
61905: PUSH
61906: LD_VAR 0 4
61910: ARRAY
61911: PUSH
61912: LD_INT 1
61914: ARRAY
61915: PPUSH
61916: LD_VAR 0 6
61920: PUSH
61921: LD_VAR 0 4
61925: ARRAY
61926: PUSH
61927: LD_INT 2
61929: ARRAY
61930: PPUSH
61931: CALL_OW 428
61935: PUSH
61936: LD_INT 0
61938: NONEQUAL
61939: OR
61940: IFFALSE 61962
// tmp := Delete ( tmp , i ) ;
61942: LD_ADDR_VAR 0 6
61946: PUSH
61947: LD_VAR 0 6
61951: PPUSH
61952: LD_VAR 0 4
61956: PPUSH
61957: CALL_OW 3
61961: ST_TO_ADDR
61962: GO 61862
61964: POP
61965: POP
// j := GetClosestHex ( unit , tmp ) ;
61966: LD_ADDR_VAR 0 5
61970: PUSH
61971: LD_VAR 0 1
61975: PPUSH
61976: LD_VAR 0 6
61980: PPUSH
61981: CALL 61266 0 2
61985: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61986: LD_VAR 0 1
61990: PPUSH
61991: LD_VAR 0 5
61995: PUSH
61996: LD_INT 1
61998: ARRAY
61999: PPUSH
62000: LD_VAR 0 5
62004: PUSH
62005: LD_INT 2
62007: ARRAY
62008: PPUSH
62009: CALL_OW 111
// end ;
62013: LD_VAR 0 3
62017: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62018: LD_INT 0
62020: PPUSH
62021: PPUSH
62022: PPUSH
// uc_side = 0 ;
62023: LD_ADDR_OWVAR 20
62027: PUSH
62028: LD_INT 0
62030: ST_TO_ADDR
// uc_nation = 0 ;
62031: LD_ADDR_OWVAR 21
62035: PUSH
62036: LD_INT 0
62038: ST_TO_ADDR
// InitHc_All ( ) ;
62039: CALL_OW 584
// InitVc ;
62043: CALL_OW 20
// if mastodonts then
62047: LD_VAR 0 6
62051: IFFALSE 62118
// for i = 1 to mastodonts do
62053: LD_ADDR_VAR 0 11
62057: PUSH
62058: DOUBLE
62059: LD_INT 1
62061: DEC
62062: ST_TO_ADDR
62063: LD_VAR 0 6
62067: PUSH
62068: FOR_TO
62069: IFFALSE 62116
// begin vc_chassis := 31 ;
62071: LD_ADDR_OWVAR 37
62075: PUSH
62076: LD_INT 31
62078: ST_TO_ADDR
// vc_control := control_rider ;
62079: LD_ADDR_OWVAR 38
62083: PUSH
62084: LD_INT 4
62086: ST_TO_ADDR
// animal := CreateVehicle ;
62087: LD_ADDR_VAR 0 12
62091: PUSH
62092: CALL_OW 45
62096: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62097: LD_VAR 0 12
62101: PPUSH
62102: LD_VAR 0 8
62106: PPUSH
62107: LD_INT 0
62109: PPUSH
62110: CALL 64306 0 3
// end ;
62114: GO 62068
62116: POP
62117: POP
// if horses then
62118: LD_VAR 0 5
62122: IFFALSE 62189
// for i = 1 to horses do
62124: LD_ADDR_VAR 0 11
62128: PUSH
62129: DOUBLE
62130: LD_INT 1
62132: DEC
62133: ST_TO_ADDR
62134: LD_VAR 0 5
62138: PUSH
62139: FOR_TO
62140: IFFALSE 62187
// begin hc_class := 21 ;
62142: LD_ADDR_OWVAR 28
62146: PUSH
62147: LD_INT 21
62149: ST_TO_ADDR
// hc_gallery :=  ;
62150: LD_ADDR_OWVAR 33
62154: PUSH
62155: LD_STRING 
62157: ST_TO_ADDR
// animal := CreateHuman ;
62158: LD_ADDR_VAR 0 12
62162: PUSH
62163: CALL_OW 44
62167: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62168: LD_VAR 0 12
62172: PPUSH
62173: LD_VAR 0 8
62177: PPUSH
62178: LD_INT 0
62180: PPUSH
62181: CALL 64306 0 3
// end ;
62185: GO 62139
62187: POP
62188: POP
// if birds then
62189: LD_VAR 0 1
62193: IFFALSE 62260
// for i = 1 to birds do
62195: LD_ADDR_VAR 0 11
62199: PUSH
62200: DOUBLE
62201: LD_INT 1
62203: DEC
62204: ST_TO_ADDR
62205: LD_VAR 0 1
62209: PUSH
62210: FOR_TO
62211: IFFALSE 62258
// begin hc_class = 18 ;
62213: LD_ADDR_OWVAR 28
62217: PUSH
62218: LD_INT 18
62220: ST_TO_ADDR
// hc_gallery =  ;
62221: LD_ADDR_OWVAR 33
62225: PUSH
62226: LD_STRING 
62228: ST_TO_ADDR
// animal := CreateHuman ;
62229: LD_ADDR_VAR 0 12
62233: PUSH
62234: CALL_OW 44
62238: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62239: LD_VAR 0 12
62243: PPUSH
62244: LD_VAR 0 8
62248: PPUSH
62249: LD_INT 0
62251: PPUSH
62252: CALL 64306 0 3
// end ;
62256: GO 62210
62258: POP
62259: POP
// if tigers then
62260: LD_VAR 0 2
62264: IFFALSE 62348
// for i = 1 to tigers do
62266: LD_ADDR_VAR 0 11
62270: PUSH
62271: DOUBLE
62272: LD_INT 1
62274: DEC
62275: ST_TO_ADDR
62276: LD_VAR 0 2
62280: PUSH
62281: FOR_TO
62282: IFFALSE 62346
// begin hc_class = class_tiger ;
62284: LD_ADDR_OWVAR 28
62288: PUSH
62289: LD_INT 14
62291: ST_TO_ADDR
// hc_gallery =  ;
62292: LD_ADDR_OWVAR 33
62296: PUSH
62297: LD_STRING 
62299: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62300: LD_ADDR_OWVAR 35
62304: PUSH
62305: LD_INT 7
62307: NEG
62308: PPUSH
62309: LD_INT 7
62311: PPUSH
62312: CALL_OW 12
62316: ST_TO_ADDR
// animal := CreateHuman ;
62317: LD_ADDR_VAR 0 12
62321: PUSH
62322: CALL_OW 44
62326: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62327: LD_VAR 0 12
62331: PPUSH
62332: LD_VAR 0 8
62336: PPUSH
62337: LD_INT 0
62339: PPUSH
62340: CALL 64306 0 3
// end ;
62344: GO 62281
62346: POP
62347: POP
// if apemans then
62348: LD_VAR 0 3
62352: IFFALSE 62475
// for i = 1 to apemans do
62354: LD_ADDR_VAR 0 11
62358: PUSH
62359: DOUBLE
62360: LD_INT 1
62362: DEC
62363: ST_TO_ADDR
62364: LD_VAR 0 3
62368: PUSH
62369: FOR_TO
62370: IFFALSE 62473
// begin hc_class = class_apeman ;
62372: LD_ADDR_OWVAR 28
62376: PUSH
62377: LD_INT 12
62379: ST_TO_ADDR
// hc_gallery =  ;
62380: LD_ADDR_OWVAR 33
62384: PUSH
62385: LD_STRING 
62387: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62388: LD_ADDR_OWVAR 35
62392: PUSH
62393: LD_INT 2
62395: NEG
62396: PPUSH
62397: LD_INT 2
62399: PPUSH
62400: CALL_OW 12
62404: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62405: LD_ADDR_OWVAR 31
62409: PUSH
62410: LD_INT 1
62412: PPUSH
62413: LD_INT 3
62415: PPUSH
62416: CALL_OW 12
62420: PUSH
62421: LD_INT 1
62423: PPUSH
62424: LD_INT 3
62426: PPUSH
62427: CALL_OW 12
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: ST_TO_ADDR
// animal := CreateHuman ;
62444: LD_ADDR_VAR 0 12
62448: PUSH
62449: CALL_OW 44
62453: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62454: LD_VAR 0 12
62458: PPUSH
62459: LD_VAR 0 8
62463: PPUSH
62464: LD_INT 0
62466: PPUSH
62467: CALL 64306 0 3
// end ;
62471: GO 62369
62473: POP
62474: POP
// if enchidnas then
62475: LD_VAR 0 4
62479: IFFALSE 62546
// for i = 1 to enchidnas do
62481: LD_ADDR_VAR 0 11
62485: PUSH
62486: DOUBLE
62487: LD_INT 1
62489: DEC
62490: ST_TO_ADDR
62491: LD_VAR 0 4
62495: PUSH
62496: FOR_TO
62497: IFFALSE 62544
// begin hc_class = 13 ;
62499: LD_ADDR_OWVAR 28
62503: PUSH
62504: LD_INT 13
62506: ST_TO_ADDR
// hc_gallery =  ;
62507: LD_ADDR_OWVAR 33
62511: PUSH
62512: LD_STRING 
62514: ST_TO_ADDR
// animal := CreateHuman ;
62515: LD_ADDR_VAR 0 12
62519: PUSH
62520: CALL_OW 44
62524: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62525: LD_VAR 0 12
62529: PPUSH
62530: LD_VAR 0 8
62534: PPUSH
62535: LD_INT 0
62537: PPUSH
62538: CALL 64306 0 3
// end ;
62542: GO 62496
62544: POP
62545: POP
// if fishes then
62546: LD_VAR 0 7
62550: IFFALSE 62617
// for i = 1 to fishes do
62552: LD_ADDR_VAR 0 11
62556: PUSH
62557: DOUBLE
62558: LD_INT 1
62560: DEC
62561: ST_TO_ADDR
62562: LD_VAR 0 7
62566: PUSH
62567: FOR_TO
62568: IFFALSE 62615
// begin hc_class = 20 ;
62570: LD_ADDR_OWVAR 28
62574: PUSH
62575: LD_INT 20
62577: ST_TO_ADDR
// hc_gallery =  ;
62578: LD_ADDR_OWVAR 33
62582: PUSH
62583: LD_STRING 
62585: ST_TO_ADDR
// animal := CreateHuman ;
62586: LD_ADDR_VAR 0 12
62590: PUSH
62591: CALL_OW 44
62595: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62596: LD_VAR 0 12
62600: PPUSH
62601: LD_VAR 0 9
62605: PPUSH
62606: LD_INT 0
62608: PPUSH
62609: CALL 64306 0 3
// end ;
62613: GO 62567
62615: POP
62616: POP
// end ;
62617: LD_VAR 0 10
62621: RET
// export function WantHeal ( sci , unit ) ; begin
62622: LD_INT 0
62624: PPUSH
// if GetTaskList ( sci ) > 0 then
62625: LD_VAR 0 1
62629: PPUSH
62630: CALL_OW 437
62634: PUSH
62635: LD_INT 0
62637: GREATER
62638: IFFALSE 62708
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62640: LD_VAR 0 1
62644: PPUSH
62645: CALL_OW 437
62649: PUSH
62650: LD_INT 1
62652: ARRAY
62653: PUSH
62654: LD_INT 1
62656: ARRAY
62657: PUSH
62658: LD_STRING l
62660: EQUAL
62661: PUSH
62662: LD_VAR 0 1
62666: PPUSH
62667: CALL_OW 437
62671: PUSH
62672: LD_INT 1
62674: ARRAY
62675: PUSH
62676: LD_INT 4
62678: ARRAY
62679: PUSH
62680: LD_VAR 0 2
62684: EQUAL
62685: AND
62686: IFFALSE 62698
// result := true else
62688: LD_ADDR_VAR 0 3
62692: PUSH
62693: LD_INT 1
62695: ST_TO_ADDR
62696: GO 62706
// result := false ;
62698: LD_ADDR_VAR 0 3
62702: PUSH
62703: LD_INT 0
62705: ST_TO_ADDR
// end else
62706: GO 62716
// result := false ;
62708: LD_ADDR_VAR 0 3
62712: PUSH
62713: LD_INT 0
62715: ST_TO_ADDR
// end ;
62716: LD_VAR 0 3
62720: RET
// export function HealTarget ( sci ) ; begin
62721: LD_INT 0
62723: PPUSH
// if not sci then
62724: LD_VAR 0 1
62728: NOT
62729: IFFALSE 62733
// exit ;
62731: GO 62798
// result := 0 ;
62733: LD_ADDR_VAR 0 2
62737: PUSH
62738: LD_INT 0
62740: ST_TO_ADDR
// if GetTaskList ( sci ) then
62741: LD_VAR 0 1
62745: PPUSH
62746: CALL_OW 437
62750: IFFALSE 62798
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62752: LD_VAR 0 1
62756: PPUSH
62757: CALL_OW 437
62761: PUSH
62762: LD_INT 1
62764: ARRAY
62765: PUSH
62766: LD_INT 1
62768: ARRAY
62769: PUSH
62770: LD_STRING l
62772: EQUAL
62773: IFFALSE 62798
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62775: LD_ADDR_VAR 0 2
62779: PUSH
62780: LD_VAR 0 1
62784: PPUSH
62785: CALL_OW 437
62789: PUSH
62790: LD_INT 1
62792: ARRAY
62793: PUSH
62794: LD_INT 4
62796: ARRAY
62797: ST_TO_ADDR
// end ;
62798: LD_VAR 0 2
62802: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62803: LD_INT 0
62805: PPUSH
62806: PPUSH
62807: PPUSH
62808: PPUSH
// if not base_units then
62809: LD_VAR 0 1
62813: NOT
62814: IFFALSE 62818
// exit ;
62816: GO 62905
// result := false ;
62818: LD_ADDR_VAR 0 2
62822: PUSH
62823: LD_INT 0
62825: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62826: LD_ADDR_VAR 0 5
62830: PUSH
62831: LD_VAR 0 1
62835: PPUSH
62836: LD_INT 21
62838: PUSH
62839: LD_INT 3
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PPUSH
62846: CALL_OW 72
62850: ST_TO_ADDR
// if not tmp then
62851: LD_VAR 0 5
62855: NOT
62856: IFFALSE 62860
// exit ;
62858: GO 62905
// for i in tmp do
62860: LD_ADDR_VAR 0 3
62864: PUSH
62865: LD_VAR 0 5
62869: PUSH
62870: FOR_IN
62871: IFFALSE 62903
// begin result := EnemyInRange ( i , 22 ) ;
62873: LD_ADDR_VAR 0 2
62877: PUSH
62878: LD_VAR 0 3
62882: PPUSH
62883: LD_INT 22
62885: PPUSH
62886: CALL 61141 0 2
62890: ST_TO_ADDR
// if result then
62891: LD_VAR 0 2
62895: IFFALSE 62901
// exit ;
62897: POP
62898: POP
62899: GO 62905
// end ;
62901: GO 62870
62903: POP
62904: POP
// end ;
62905: LD_VAR 0 2
62909: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62910: LD_INT 0
62912: PPUSH
62913: PPUSH
// if not units then
62914: LD_VAR 0 1
62918: NOT
62919: IFFALSE 62923
// exit ;
62921: GO 62993
// result := [ ] ;
62923: LD_ADDR_VAR 0 3
62927: PUSH
62928: EMPTY
62929: ST_TO_ADDR
// for i in units do
62930: LD_ADDR_VAR 0 4
62934: PUSH
62935: LD_VAR 0 1
62939: PUSH
62940: FOR_IN
62941: IFFALSE 62991
// if GetTag ( i ) = tag then
62943: LD_VAR 0 4
62947: PPUSH
62948: CALL_OW 110
62952: PUSH
62953: LD_VAR 0 2
62957: EQUAL
62958: IFFALSE 62989
// result := Replace ( result , result + 1 , i ) ;
62960: LD_ADDR_VAR 0 3
62964: PUSH
62965: LD_VAR 0 3
62969: PPUSH
62970: LD_VAR 0 3
62974: PUSH
62975: LD_INT 1
62977: PLUS
62978: PPUSH
62979: LD_VAR 0 4
62983: PPUSH
62984: CALL_OW 1
62988: ST_TO_ADDR
62989: GO 62940
62991: POP
62992: POP
// end ;
62993: LD_VAR 0 3
62997: RET
// export function IsDriver ( un ) ; begin
62998: LD_INT 0
63000: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63001: LD_ADDR_VAR 0 2
63005: PUSH
63006: LD_VAR 0 1
63010: PUSH
63011: LD_INT 55
63013: PUSH
63014: EMPTY
63015: LIST
63016: PPUSH
63017: CALL_OW 69
63021: IN
63022: ST_TO_ADDR
// end ;
63023: LD_VAR 0 2
63027: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63028: LD_INT 0
63030: PPUSH
63031: PPUSH
// list := [ ] ;
63032: LD_ADDR_VAR 0 5
63036: PUSH
63037: EMPTY
63038: ST_TO_ADDR
// case d of 0 :
63039: LD_VAR 0 3
63043: PUSH
63044: LD_INT 0
63046: DOUBLE
63047: EQUAL
63048: IFTRUE 63052
63050: GO 63185
63052: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63053: LD_ADDR_VAR 0 5
63057: PUSH
63058: LD_VAR 0 1
63062: PUSH
63063: LD_INT 4
63065: MINUS
63066: PUSH
63067: LD_VAR 0 2
63071: PUSH
63072: LD_INT 4
63074: MINUS
63075: PUSH
63076: LD_INT 2
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: LIST
63083: PUSH
63084: LD_VAR 0 1
63088: PUSH
63089: LD_INT 3
63091: MINUS
63092: PUSH
63093: LD_VAR 0 2
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: PUSH
63106: LD_VAR 0 1
63110: PUSH
63111: LD_INT 4
63113: PLUS
63114: PUSH
63115: LD_VAR 0 2
63119: PUSH
63120: LD_INT 4
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: LIST
63127: PUSH
63128: LD_VAR 0 1
63132: PUSH
63133: LD_INT 3
63135: PLUS
63136: PUSH
63137: LD_VAR 0 2
63141: PUSH
63142: LD_INT 3
63144: PLUS
63145: PUSH
63146: LD_INT 5
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: LIST
63153: PUSH
63154: LD_VAR 0 1
63158: PUSH
63159: LD_VAR 0 2
63163: PUSH
63164: LD_INT 4
63166: PLUS
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: ST_TO_ADDR
// end ; 1 :
63183: GO 63883
63185: LD_INT 1
63187: DOUBLE
63188: EQUAL
63189: IFTRUE 63193
63191: GO 63326
63193: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63194: LD_ADDR_VAR 0 5
63198: PUSH
63199: LD_VAR 0 1
63203: PUSH
63204: LD_VAR 0 2
63208: PUSH
63209: LD_INT 4
63211: MINUS
63212: PUSH
63213: LD_INT 3
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: LIST
63220: PUSH
63221: LD_VAR 0 1
63225: PUSH
63226: LD_INT 3
63228: MINUS
63229: PUSH
63230: LD_VAR 0 2
63234: PUSH
63235: LD_INT 3
63237: MINUS
63238: PUSH
63239: LD_INT 2
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: LIST
63246: PUSH
63247: LD_VAR 0 1
63251: PUSH
63252: LD_INT 4
63254: MINUS
63255: PUSH
63256: LD_VAR 0 2
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: LIST
63268: PUSH
63269: LD_VAR 0 1
63273: PUSH
63274: LD_VAR 0 2
63278: PUSH
63279: LD_INT 3
63281: PLUS
63282: PUSH
63283: LD_INT 0
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: LIST
63290: PUSH
63291: LD_VAR 0 1
63295: PUSH
63296: LD_INT 4
63298: PLUS
63299: PUSH
63300: LD_VAR 0 2
63304: PUSH
63305: LD_INT 4
63307: PLUS
63308: PUSH
63309: LD_INT 5
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: LIST
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: ST_TO_ADDR
// end ; 2 :
63324: GO 63883
63326: LD_INT 2
63328: DOUBLE
63329: EQUAL
63330: IFTRUE 63334
63332: GO 63463
63334: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63335: LD_ADDR_VAR 0 5
63339: PUSH
63340: LD_VAR 0 1
63344: PUSH
63345: LD_VAR 0 2
63349: PUSH
63350: LD_INT 3
63352: MINUS
63353: PUSH
63354: LD_INT 3
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: LIST
63361: PUSH
63362: LD_VAR 0 1
63366: PUSH
63367: LD_INT 4
63369: PLUS
63370: PUSH
63371: LD_VAR 0 2
63375: PUSH
63376: LD_INT 4
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: LIST
63383: PUSH
63384: LD_VAR 0 1
63388: PUSH
63389: LD_VAR 0 2
63393: PUSH
63394: LD_INT 4
63396: PLUS
63397: PUSH
63398: LD_INT 0
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: LIST
63405: PUSH
63406: LD_VAR 0 1
63410: PUSH
63411: LD_INT 3
63413: MINUS
63414: PUSH
63415: LD_VAR 0 2
63419: PUSH
63420: LD_INT 1
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: LIST
63427: PUSH
63428: LD_VAR 0 1
63432: PUSH
63433: LD_INT 4
63435: MINUS
63436: PUSH
63437: LD_VAR 0 2
63441: PUSH
63442: LD_INT 4
63444: MINUS
63445: PUSH
63446: LD_INT 2
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: LIST
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: ST_TO_ADDR
// end ; 3 :
63461: GO 63883
63463: LD_INT 3
63465: DOUBLE
63466: EQUAL
63467: IFTRUE 63471
63469: GO 63604
63471: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63472: LD_ADDR_VAR 0 5
63476: PUSH
63477: LD_VAR 0 1
63481: PUSH
63482: LD_INT 3
63484: PLUS
63485: PUSH
63486: LD_VAR 0 2
63490: PUSH
63491: LD_INT 4
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: LIST
63498: PUSH
63499: LD_VAR 0 1
63503: PUSH
63504: LD_INT 4
63506: PLUS
63507: PUSH
63508: LD_VAR 0 2
63512: PUSH
63513: LD_INT 4
63515: PLUS
63516: PUSH
63517: LD_INT 5
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: LIST
63524: PUSH
63525: LD_VAR 0 1
63529: PUSH
63530: LD_INT 4
63532: MINUS
63533: PUSH
63534: LD_VAR 0 2
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: LIST
63546: PUSH
63547: LD_VAR 0 1
63551: PUSH
63552: LD_VAR 0 2
63556: PUSH
63557: LD_INT 4
63559: MINUS
63560: PUSH
63561: LD_INT 3
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: LIST
63568: PUSH
63569: LD_VAR 0 1
63573: PUSH
63574: LD_INT 3
63576: MINUS
63577: PUSH
63578: LD_VAR 0 2
63582: PUSH
63583: LD_INT 3
63585: MINUS
63586: PUSH
63587: LD_INT 2
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: LIST
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: ST_TO_ADDR
// end ; 4 :
63602: GO 63883
63604: LD_INT 4
63606: DOUBLE
63607: EQUAL
63608: IFTRUE 63612
63610: GO 63745
63612: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63613: LD_ADDR_VAR 0 5
63617: PUSH
63618: LD_VAR 0 1
63622: PUSH
63623: LD_VAR 0 2
63627: PUSH
63628: LD_INT 4
63630: PLUS
63631: PUSH
63632: LD_INT 0
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: LIST
63639: PUSH
63640: LD_VAR 0 1
63644: PUSH
63645: LD_INT 3
63647: PLUS
63648: PUSH
63649: LD_VAR 0 2
63653: PUSH
63654: LD_INT 3
63656: PLUS
63657: PUSH
63658: LD_INT 5
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: LIST
63665: PUSH
63666: LD_VAR 0 1
63670: PUSH
63671: LD_INT 4
63673: PLUS
63674: PUSH
63675: LD_VAR 0 2
63679: PUSH
63680: LD_INT 4
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: LIST
63687: PUSH
63688: LD_VAR 0 1
63692: PUSH
63693: LD_VAR 0 2
63697: PUSH
63698: LD_INT 3
63700: MINUS
63701: PUSH
63702: LD_INT 3
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: PUSH
63710: LD_VAR 0 1
63714: PUSH
63715: LD_INT 4
63717: MINUS
63718: PUSH
63719: LD_VAR 0 2
63723: PUSH
63724: LD_INT 4
63726: MINUS
63727: PUSH
63728: LD_INT 2
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: LIST
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: ST_TO_ADDR
// end ; 5 :
63743: GO 63883
63745: LD_INT 5
63747: DOUBLE
63748: EQUAL
63749: IFTRUE 63753
63751: GO 63882
63753: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63754: LD_ADDR_VAR 0 5
63758: PUSH
63759: LD_VAR 0 1
63763: PUSH
63764: LD_INT 4
63766: MINUS
63767: PUSH
63768: LD_VAR 0 2
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: LIST
63780: PUSH
63781: LD_VAR 0 1
63785: PUSH
63786: LD_VAR 0 2
63790: PUSH
63791: LD_INT 4
63793: MINUS
63794: PUSH
63795: LD_INT 3
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: LIST
63802: PUSH
63803: LD_VAR 0 1
63807: PUSH
63808: LD_INT 4
63810: PLUS
63811: PUSH
63812: LD_VAR 0 2
63816: PUSH
63817: LD_INT 4
63819: PLUS
63820: PUSH
63821: LD_INT 5
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: LIST
63828: PUSH
63829: LD_VAR 0 1
63833: PUSH
63834: LD_INT 3
63836: PLUS
63837: PUSH
63838: LD_VAR 0 2
63842: PUSH
63843: LD_INT 4
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: LIST
63850: PUSH
63851: LD_VAR 0 1
63855: PUSH
63856: LD_VAR 0 2
63860: PUSH
63861: LD_INT 3
63863: PLUS
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: LIST
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: ST_TO_ADDR
// end ; end ;
63880: GO 63883
63882: POP
// result := list ;
63883: LD_ADDR_VAR 0 4
63887: PUSH
63888: LD_VAR 0 5
63892: ST_TO_ADDR
// end ;
63893: LD_VAR 0 4
63897: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63898: LD_INT 0
63900: PPUSH
63901: PPUSH
63902: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63903: LD_VAR 0 1
63907: NOT
63908: PUSH
63909: LD_VAR 0 2
63913: PUSH
63914: LD_INT 1
63916: PUSH
63917: LD_INT 2
63919: PUSH
63920: LD_INT 3
63922: PUSH
63923: LD_INT 4
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: IN
63932: NOT
63933: OR
63934: IFFALSE 63938
// exit ;
63936: GO 64030
// tmp := [ ] ;
63938: LD_ADDR_VAR 0 5
63942: PUSH
63943: EMPTY
63944: ST_TO_ADDR
// for i in units do
63945: LD_ADDR_VAR 0 4
63949: PUSH
63950: LD_VAR 0 1
63954: PUSH
63955: FOR_IN
63956: IFFALSE 63999
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63958: LD_ADDR_VAR 0 5
63962: PUSH
63963: LD_VAR 0 5
63967: PPUSH
63968: LD_VAR 0 5
63972: PUSH
63973: LD_INT 1
63975: PLUS
63976: PPUSH
63977: LD_VAR 0 4
63981: PPUSH
63982: LD_VAR 0 2
63986: PPUSH
63987: CALL_OW 259
63991: PPUSH
63992: CALL_OW 2
63996: ST_TO_ADDR
63997: GO 63955
63999: POP
64000: POP
// if not tmp then
64001: LD_VAR 0 5
64005: NOT
64006: IFFALSE 64010
// exit ;
64008: GO 64030
// result := SortListByListDesc ( units , tmp ) ;
64010: LD_ADDR_VAR 0 3
64014: PUSH
64015: LD_VAR 0 1
64019: PPUSH
64020: LD_VAR 0 5
64024: PPUSH
64025: CALL_OW 77
64029: ST_TO_ADDR
// end ;
64030: LD_VAR 0 3
64034: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64035: LD_INT 0
64037: PPUSH
64038: PPUSH
64039: PPUSH
// result := false ;
64040: LD_ADDR_VAR 0 3
64044: PUSH
64045: LD_INT 0
64047: ST_TO_ADDR
// x := GetX ( building ) ;
64048: LD_ADDR_VAR 0 4
64052: PUSH
64053: LD_VAR 0 2
64057: PPUSH
64058: CALL_OW 250
64062: ST_TO_ADDR
// y := GetY ( building ) ;
64063: LD_ADDR_VAR 0 5
64067: PUSH
64068: LD_VAR 0 2
64072: PPUSH
64073: CALL_OW 251
64077: ST_TO_ADDR
// if not building or not x or not y then
64078: LD_VAR 0 2
64082: NOT
64083: PUSH
64084: LD_VAR 0 4
64088: NOT
64089: OR
64090: PUSH
64091: LD_VAR 0 5
64095: NOT
64096: OR
64097: IFFALSE 64101
// exit ;
64099: GO 64193
// if GetTaskList ( unit ) then
64101: LD_VAR 0 1
64105: PPUSH
64106: CALL_OW 437
64110: IFFALSE 64193
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64112: LD_STRING e
64114: PUSH
64115: LD_VAR 0 1
64119: PPUSH
64120: CALL_OW 437
64124: PUSH
64125: LD_INT 1
64127: ARRAY
64128: PUSH
64129: LD_INT 1
64131: ARRAY
64132: EQUAL
64133: PUSH
64134: LD_VAR 0 4
64138: PUSH
64139: LD_VAR 0 1
64143: PPUSH
64144: CALL_OW 437
64148: PUSH
64149: LD_INT 1
64151: ARRAY
64152: PUSH
64153: LD_INT 2
64155: ARRAY
64156: EQUAL
64157: AND
64158: PUSH
64159: LD_VAR 0 5
64163: PUSH
64164: LD_VAR 0 1
64168: PPUSH
64169: CALL_OW 437
64173: PUSH
64174: LD_INT 1
64176: ARRAY
64177: PUSH
64178: LD_INT 3
64180: ARRAY
64181: EQUAL
64182: AND
64183: IFFALSE 64193
// result := true end ;
64185: LD_ADDR_VAR 0 3
64189: PUSH
64190: LD_INT 1
64192: ST_TO_ADDR
// end ;
64193: LD_VAR 0 3
64197: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64198: LD_INT 0
64200: PPUSH
// result := false ;
64201: LD_ADDR_VAR 0 4
64205: PUSH
64206: LD_INT 0
64208: ST_TO_ADDR
// if GetTaskList ( unit ) then
64209: LD_VAR 0 1
64213: PPUSH
64214: CALL_OW 437
64218: IFFALSE 64301
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64220: LD_STRING M
64222: PUSH
64223: LD_VAR 0 1
64227: PPUSH
64228: CALL_OW 437
64232: PUSH
64233: LD_INT 1
64235: ARRAY
64236: PUSH
64237: LD_INT 1
64239: ARRAY
64240: EQUAL
64241: PUSH
64242: LD_VAR 0 2
64246: PUSH
64247: LD_VAR 0 1
64251: PPUSH
64252: CALL_OW 437
64256: PUSH
64257: LD_INT 1
64259: ARRAY
64260: PUSH
64261: LD_INT 2
64263: ARRAY
64264: EQUAL
64265: AND
64266: PUSH
64267: LD_VAR 0 3
64271: PUSH
64272: LD_VAR 0 1
64276: PPUSH
64277: CALL_OW 437
64281: PUSH
64282: LD_INT 1
64284: ARRAY
64285: PUSH
64286: LD_INT 3
64288: ARRAY
64289: EQUAL
64290: AND
64291: IFFALSE 64301
// result := true ;
64293: LD_ADDR_VAR 0 4
64297: PUSH
64298: LD_INT 1
64300: ST_TO_ADDR
// end ; end ;
64301: LD_VAR 0 4
64305: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64306: LD_INT 0
64308: PPUSH
64309: PPUSH
64310: PPUSH
64311: PPUSH
// if not unit or not area then
64312: LD_VAR 0 1
64316: NOT
64317: PUSH
64318: LD_VAR 0 2
64322: NOT
64323: OR
64324: IFFALSE 64328
// exit ;
64326: GO 64492
// tmp := AreaToList ( area , i ) ;
64328: LD_ADDR_VAR 0 6
64332: PUSH
64333: LD_VAR 0 2
64337: PPUSH
64338: LD_VAR 0 5
64342: PPUSH
64343: CALL_OW 517
64347: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64348: LD_ADDR_VAR 0 5
64352: PUSH
64353: DOUBLE
64354: LD_INT 1
64356: DEC
64357: ST_TO_ADDR
64358: LD_VAR 0 6
64362: PUSH
64363: LD_INT 1
64365: ARRAY
64366: PUSH
64367: FOR_TO
64368: IFFALSE 64490
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64370: LD_ADDR_VAR 0 7
64374: PUSH
64375: LD_VAR 0 6
64379: PUSH
64380: LD_INT 1
64382: ARRAY
64383: PUSH
64384: LD_VAR 0 5
64388: ARRAY
64389: PUSH
64390: LD_VAR 0 6
64394: PUSH
64395: LD_INT 2
64397: ARRAY
64398: PUSH
64399: LD_VAR 0 5
64403: ARRAY
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64409: LD_VAR 0 7
64413: PUSH
64414: LD_INT 1
64416: ARRAY
64417: PPUSH
64418: LD_VAR 0 7
64422: PUSH
64423: LD_INT 2
64425: ARRAY
64426: PPUSH
64427: CALL_OW 428
64431: PUSH
64432: LD_INT 0
64434: EQUAL
64435: IFFALSE 64488
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64437: LD_VAR 0 1
64441: PPUSH
64442: LD_VAR 0 7
64446: PUSH
64447: LD_INT 1
64449: ARRAY
64450: PPUSH
64451: LD_VAR 0 7
64455: PUSH
64456: LD_INT 2
64458: ARRAY
64459: PPUSH
64460: LD_VAR 0 3
64464: PPUSH
64465: CALL_OW 48
// result := IsPlaced ( unit ) ;
64469: LD_ADDR_VAR 0 4
64473: PUSH
64474: LD_VAR 0 1
64478: PPUSH
64479: CALL_OW 305
64483: ST_TO_ADDR
// exit ;
64484: POP
64485: POP
64486: GO 64492
// end ; end ;
64488: GO 64367
64490: POP
64491: POP
// end ;
64492: LD_VAR 0 4
64496: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64497: LD_INT 0
64499: PPUSH
64500: PPUSH
64501: PPUSH
// if not side or side > 8 then
64502: LD_VAR 0 1
64506: NOT
64507: PUSH
64508: LD_VAR 0 1
64512: PUSH
64513: LD_INT 8
64515: GREATER
64516: OR
64517: IFFALSE 64521
// exit ;
64519: GO 64708
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64521: LD_ADDR_VAR 0 4
64525: PUSH
64526: LD_INT 22
64528: PUSH
64529: LD_VAR 0 1
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 21
64540: PUSH
64541: LD_INT 3
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PPUSH
64552: CALL_OW 69
64556: ST_TO_ADDR
// if not tmp then
64557: LD_VAR 0 4
64561: NOT
64562: IFFALSE 64566
// exit ;
64564: GO 64708
// enable_addtolog := true ;
64566: LD_ADDR_OWVAR 81
64570: PUSH
64571: LD_INT 1
64573: ST_TO_ADDR
// AddToLog ( [ ) ;
64574: LD_STRING [
64576: PPUSH
64577: CALL_OW 561
// for i in tmp do
64581: LD_ADDR_VAR 0 3
64585: PUSH
64586: LD_VAR 0 4
64590: PUSH
64591: FOR_IN
64592: IFFALSE 64699
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64594: LD_STRING [
64596: PUSH
64597: LD_VAR 0 3
64601: PPUSH
64602: CALL_OW 266
64606: STR
64607: PUSH
64608: LD_STRING , 
64610: STR
64611: PUSH
64612: LD_VAR 0 3
64616: PPUSH
64617: CALL_OW 250
64621: STR
64622: PUSH
64623: LD_STRING , 
64625: STR
64626: PUSH
64627: LD_VAR 0 3
64631: PPUSH
64632: CALL_OW 251
64636: STR
64637: PUSH
64638: LD_STRING , 
64640: STR
64641: PUSH
64642: LD_VAR 0 3
64646: PPUSH
64647: CALL_OW 254
64651: STR
64652: PUSH
64653: LD_STRING , 
64655: STR
64656: PUSH
64657: LD_VAR 0 3
64661: PPUSH
64662: LD_INT 1
64664: PPUSH
64665: CALL_OW 268
64669: STR
64670: PUSH
64671: LD_STRING , 
64673: STR
64674: PUSH
64675: LD_VAR 0 3
64679: PPUSH
64680: LD_INT 2
64682: PPUSH
64683: CALL_OW 268
64687: STR
64688: PUSH
64689: LD_STRING ],
64691: STR
64692: PPUSH
64693: CALL_OW 561
// end ;
64697: GO 64591
64699: POP
64700: POP
// AddToLog ( ]; ) ;
64701: LD_STRING ];
64703: PPUSH
64704: CALL_OW 561
// end ;
64708: LD_VAR 0 2
64712: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64713: LD_INT 0
64715: PPUSH
64716: PPUSH
64717: PPUSH
64718: PPUSH
64719: PPUSH
// if not area or not rate or not max then
64720: LD_VAR 0 1
64724: NOT
64725: PUSH
64726: LD_VAR 0 2
64730: NOT
64731: OR
64732: PUSH
64733: LD_VAR 0 4
64737: NOT
64738: OR
64739: IFFALSE 64743
// exit ;
64741: GO 64935
// while 1 do
64743: LD_INT 1
64745: IFFALSE 64935
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64747: LD_ADDR_VAR 0 9
64751: PUSH
64752: LD_VAR 0 1
64756: PPUSH
64757: LD_INT 1
64759: PPUSH
64760: CALL_OW 287
64764: PUSH
64765: LD_INT 10
64767: MUL
64768: ST_TO_ADDR
// r := rate / 10 ;
64769: LD_ADDR_VAR 0 7
64773: PUSH
64774: LD_VAR 0 2
64778: PUSH
64779: LD_INT 10
64781: DIVREAL
64782: ST_TO_ADDR
// time := 1 1$00 ;
64783: LD_ADDR_VAR 0 8
64787: PUSH
64788: LD_INT 2100
64790: ST_TO_ADDR
// if amount < min then
64791: LD_VAR 0 9
64795: PUSH
64796: LD_VAR 0 3
64800: LESS
64801: IFFALSE 64819
// r := r * 2 else
64803: LD_ADDR_VAR 0 7
64807: PUSH
64808: LD_VAR 0 7
64812: PUSH
64813: LD_INT 2
64815: MUL
64816: ST_TO_ADDR
64817: GO 64845
// if amount > max then
64819: LD_VAR 0 9
64823: PUSH
64824: LD_VAR 0 4
64828: GREATER
64829: IFFALSE 64845
// r := r / 2 ;
64831: LD_ADDR_VAR 0 7
64835: PUSH
64836: LD_VAR 0 7
64840: PUSH
64841: LD_INT 2
64843: DIVREAL
64844: ST_TO_ADDR
// time := time / r ;
64845: LD_ADDR_VAR 0 8
64849: PUSH
64850: LD_VAR 0 8
64854: PUSH
64855: LD_VAR 0 7
64859: DIVREAL
64860: ST_TO_ADDR
// if time < 0 then
64861: LD_VAR 0 8
64865: PUSH
64866: LD_INT 0
64868: LESS
64869: IFFALSE 64886
// time := time * - 1 ;
64871: LD_ADDR_VAR 0 8
64875: PUSH
64876: LD_VAR 0 8
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: MUL
64885: ST_TO_ADDR
// wait ( time ) ;
64886: LD_VAR 0 8
64890: PPUSH
64891: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64895: LD_INT 35
64897: PPUSH
64898: LD_INT 875
64900: PPUSH
64901: CALL_OW 12
64905: PPUSH
64906: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64910: LD_INT 1
64912: PPUSH
64913: LD_INT 5
64915: PPUSH
64916: CALL_OW 12
64920: PPUSH
64921: LD_VAR 0 1
64925: PPUSH
64926: LD_INT 1
64928: PPUSH
64929: CALL_OW 55
// end ;
64933: GO 64743
// end ;
64935: LD_VAR 0 5
64939: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64940: LD_INT 0
64942: PPUSH
64943: PPUSH
64944: PPUSH
64945: PPUSH
64946: PPUSH
64947: PPUSH
64948: PPUSH
64949: PPUSH
// if not turrets or not factories then
64950: LD_VAR 0 1
64954: NOT
64955: PUSH
64956: LD_VAR 0 2
64960: NOT
64961: OR
64962: IFFALSE 64966
// exit ;
64964: GO 65273
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64966: LD_ADDR_VAR 0 10
64970: PUSH
64971: LD_INT 5
64973: PUSH
64974: LD_INT 6
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 2
64983: PUSH
64984: LD_INT 4
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 3
64993: PUSH
64994: LD_INT 5
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 24
65008: PUSH
65009: LD_INT 25
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 23
65018: PUSH
65019: LD_INT 27
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 42
65032: PUSH
65033: LD_INT 43
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 44
65042: PUSH
65043: LD_INT 46
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 45
65052: PUSH
65053: LD_INT 47
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: LIST
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: LIST
65069: ST_TO_ADDR
// result := [ ] ;
65070: LD_ADDR_VAR 0 3
65074: PUSH
65075: EMPTY
65076: ST_TO_ADDR
// for i in turrets do
65077: LD_ADDR_VAR 0 4
65081: PUSH
65082: LD_VAR 0 1
65086: PUSH
65087: FOR_IN
65088: IFFALSE 65271
// begin nat := GetNation ( i ) ;
65090: LD_ADDR_VAR 0 7
65094: PUSH
65095: LD_VAR 0 4
65099: PPUSH
65100: CALL_OW 248
65104: ST_TO_ADDR
// weapon := 0 ;
65105: LD_ADDR_VAR 0 8
65109: PUSH
65110: LD_INT 0
65112: ST_TO_ADDR
// if not nat then
65113: LD_VAR 0 7
65117: NOT
65118: IFFALSE 65122
// continue ;
65120: GO 65087
// for j in list [ nat ] do
65122: LD_ADDR_VAR 0 5
65126: PUSH
65127: LD_VAR 0 10
65131: PUSH
65132: LD_VAR 0 7
65136: ARRAY
65137: PUSH
65138: FOR_IN
65139: IFFALSE 65180
// if GetBWeapon ( i ) = j [ 1 ] then
65141: LD_VAR 0 4
65145: PPUSH
65146: CALL_OW 269
65150: PUSH
65151: LD_VAR 0 5
65155: PUSH
65156: LD_INT 1
65158: ARRAY
65159: EQUAL
65160: IFFALSE 65178
// begin weapon := j [ 2 ] ;
65162: LD_ADDR_VAR 0 8
65166: PUSH
65167: LD_VAR 0 5
65171: PUSH
65172: LD_INT 2
65174: ARRAY
65175: ST_TO_ADDR
// break ;
65176: GO 65180
// end ;
65178: GO 65138
65180: POP
65181: POP
// if not weapon then
65182: LD_VAR 0 8
65186: NOT
65187: IFFALSE 65191
// continue ;
65189: GO 65087
// for k in factories do
65191: LD_ADDR_VAR 0 6
65195: PUSH
65196: LD_VAR 0 2
65200: PUSH
65201: FOR_IN
65202: IFFALSE 65267
// begin weapons := AvailableWeaponList ( k ) ;
65204: LD_ADDR_VAR 0 9
65208: PUSH
65209: LD_VAR 0 6
65213: PPUSH
65214: CALL_OW 478
65218: ST_TO_ADDR
// if not weapons then
65219: LD_VAR 0 9
65223: NOT
65224: IFFALSE 65228
// continue ;
65226: GO 65201
// if weapon in weapons then
65228: LD_VAR 0 8
65232: PUSH
65233: LD_VAR 0 9
65237: IN
65238: IFFALSE 65265
// begin result := [ i , weapon ] ;
65240: LD_ADDR_VAR 0 3
65244: PUSH
65245: LD_VAR 0 4
65249: PUSH
65250: LD_VAR 0 8
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: ST_TO_ADDR
// exit ;
65259: POP
65260: POP
65261: POP
65262: POP
65263: GO 65273
// end ; end ;
65265: GO 65201
65267: POP
65268: POP
// end ;
65269: GO 65087
65271: POP
65272: POP
// end ;
65273: LD_VAR 0 3
65277: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65278: LD_INT 0
65280: PPUSH
// if not side or side > 8 then
65281: LD_VAR 0 3
65285: NOT
65286: PUSH
65287: LD_VAR 0 3
65291: PUSH
65292: LD_INT 8
65294: GREATER
65295: OR
65296: IFFALSE 65300
// exit ;
65298: GO 65359
// if not range then
65300: LD_VAR 0 4
65304: NOT
65305: IFFALSE 65316
// range := - 12 ;
65307: LD_ADDR_VAR 0 4
65311: PUSH
65312: LD_INT 12
65314: NEG
65315: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65316: LD_VAR 0 1
65320: PPUSH
65321: LD_VAR 0 2
65325: PPUSH
65326: LD_VAR 0 3
65330: PPUSH
65331: LD_VAR 0 4
65335: PPUSH
65336: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65340: LD_VAR 0 1
65344: PPUSH
65345: LD_VAR 0 2
65349: PPUSH
65350: LD_VAR 0 3
65354: PPUSH
65355: CALL_OW 331
// end ;
65359: LD_VAR 0 5
65363: RET
// export function Video ( mode ) ; begin
65364: LD_INT 0
65366: PPUSH
// ingame_video = mode ;
65367: LD_ADDR_OWVAR 52
65371: PUSH
65372: LD_VAR 0 1
65376: ST_TO_ADDR
// interface_hidden = mode ;
65377: LD_ADDR_OWVAR 54
65381: PUSH
65382: LD_VAR 0 1
65386: ST_TO_ADDR
// end ;
65387: LD_VAR 0 2
65391: RET
// export function Join ( array , element ) ; begin
65392: LD_INT 0
65394: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65395: LD_ADDR_VAR 0 3
65399: PUSH
65400: LD_VAR 0 1
65404: PPUSH
65405: LD_VAR 0 1
65409: PUSH
65410: LD_INT 1
65412: PLUS
65413: PPUSH
65414: LD_VAR 0 2
65418: PPUSH
65419: CALL_OW 1
65423: ST_TO_ADDR
// end ;
65424: LD_VAR 0 3
65428: RET
// export function JoinUnion ( array , element ) ; begin
65429: LD_INT 0
65431: PPUSH
// result := array union element ;
65432: LD_ADDR_VAR 0 3
65436: PUSH
65437: LD_VAR 0 1
65441: PUSH
65442: LD_VAR 0 2
65446: UNION
65447: ST_TO_ADDR
// end ;
65448: LD_VAR 0 3
65452: RET
// export function GetBehemoths ( side ) ; begin
65453: LD_INT 0
65455: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65456: LD_ADDR_VAR 0 2
65460: PUSH
65461: LD_INT 22
65463: PUSH
65464: LD_VAR 0 1
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 31
65475: PUSH
65476: LD_INT 25
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PPUSH
65487: CALL_OW 69
65491: ST_TO_ADDR
// end ;
65492: LD_VAR 0 2
65496: RET
// export function Shuffle ( array ) ; var i , index ; begin
65497: LD_INT 0
65499: PPUSH
65500: PPUSH
65501: PPUSH
// result := [ ] ;
65502: LD_ADDR_VAR 0 2
65506: PUSH
65507: EMPTY
65508: ST_TO_ADDR
// if not array then
65509: LD_VAR 0 1
65513: NOT
65514: IFFALSE 65518
// exit ;
65516: GO 65617
// Randomize ;
65518: CALL_OW 10
// for i = array downto 1 do
65522: LD_ADDR_VAR 0 3
65526: PUSH
65527: DOUBLE
65528: LD_VAR 0 1
65532: INC
65533: ST_TO_ADDR
65534: LD_INT 1
65536: PUSH
65537: FOR_DOWNTO
65538: IFFALSE 65615
// begin index := rand ( 1 , array ) ;
65540: LD_ADDR_VAR 0 4
65544: PUSH
65545: LD_INT 1
65547: PPUSH
65548: LD_VAR 0 1
65552: PPUSH
65553: CALL_OW 12
65557: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65558: LD_ADDR_VAR 0 2
65562: PUSH
65563: LD_VAR 0 2
65567: PPUSH
65568: LD_VAR 0 2
65572: PUSH
65573: LD_INT 1
65575: PLUS
65576: PPUSH
65577: LD_VAR 0 1
65581: PUSH
65582: LD_VAR 0 4
65586: ARRAY
65587: PPUSH
65588: CALL_OW 2
65592: ST_TO_ADDR
// array := Delete ( array , index ) ;
65593: LD_ADDR_VAR 0 1
65597: PUSH
65598: LD_VAR 0 1
65602: PPUSH
65603: LD_VAR 0 4
65607: PPUSH
65608: CALL_OW 3
65612: ST_TO_ADDR
// end ;
65613: GO 65537
65615: POP
65616: POP
// end ;
65617: LD_VAR 0 2
65621: RET
// export function GetBaseMaterials ( base ) ; begin
65622: LD_INT 0
65624: PPUSH
// result := [ 0 , 0 , 0 ] ;
65625: LD_ADDR_VAR 0 2
65629: PUSH
65630: LD_INT 0
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: LIST
65643: ST_TO_ADDR
// if not base then
65644: LD_VAR 0 1
65648: NOT
65649: IFFALSE 65653
// exit ;
65651: GO 65702
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65653: LD_ADDR_VAR 0 2
65657: PUSH
65658: LD_VAR 0 1
65662: PPUSH
65663: LD_INT 1
65665: PPUSH
65666: CALL_OW 275
65670: PUSH
65671: LD_VAR 0 1
65675: PPUSH
65676: LD_INT 2
65678: PPUSH
65679: CALL_OW 275
65683: PUSH
65684: LD_VAR 0 1
65688: PPUSH
65689: LD_INT 3
65691: PPUSH
65692: CALL_OW 275
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: LIST
65701: ST_TO_ADDR
// end ;
65702: LD_VAR 0 2
65706: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65707: LD_INT 0
65709: PPUSH
65710: PPUSH
// result := array ;
65711: LD_ADDR_VAR 0 3
65715: PUSH
65716: LD_VAR 0 1
65720: ST_TO_ADDR
// if size > 0 then
65721: LD_VAR 0 2
65725: PUSH
65726: LD_INT 0
65728: GREATER
65729: IFFALSE 65775
// for i := array downto size do
65731: LD_ADDR_VAR 0 4
65735: PUSH
65736: DOUBLE
65737: LD_VAR 0 1
65741: INC
65742: ST_TO_ADDR
65743: LD_VAR 0 2
65747: PUSH
65748: FOR_DOWNTO
65749: IFFALSE 65773
// result := Delete ( result , result ) ;
65751: LD_ADDR_VAR 0 3
65755: PUSH
65756: LD_VAR 0 3
65760: PPUSH
65761: LD_VAR 0 3
65765: PPUSH
65766: CALL_OW 3
65770: ST_TO_ADDR
65771: GO 65748
65773: POP
65774: POP
// end ;
65775: LD_VAR 0 3
65779: RET
// export function ComExit ( unit ) ; var tmp ; begin
65780: LD_INT 0
65782: PPUSH
65783: PPUSH
// if not IsInUnit ( unit ) then
65784: LD_VAR 0 1
65788: PPUSH
65789: CALL_OW 310
65793: NOT
65794: IFFALSE 65798
// exit ;
65796: GO 65858
// tmp := IsInUnit ( unit ) ;
65798: LD_ADDR_VAR 0 3
65802: PUSH
65803: LD_VAR 0 1
65807: PPUSH
65808: CALL_OW 310
65812: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65813: LD_VAR 0 3
65817: PPUSH
65818: CALL_OW 247
65822: PUSH
65823: LD_INT 2
65825: EQUAL
65826: IFFALSE 65839
// ComExitVehicle ( unit ) else
65828: LD_VAR 0 1
65832: PPUSH
65833: CALL_OW 121
65837: GO 65848
// ComExitBuilding ( unit ) ;
65839: LD_VAR 0 1
65843: PPUSH
65844: CALL_OW 122
// result := tmp ;
65848: LD_ADDR_VAR 0 2
65852: PUSH
65853: LD_VAR 0 3
65857: ST_TO_ADDR
// end ;
65858: LD_VAR 0 2
65862: RET
// export function ComExitAll ( units ) ; var i ; begin
65863: LD_INT 0
65865: PPUSH
65866: PPUSH
// if not units then
65867: LD_VAR 0 1
65871: NOT
65872: IFFALSE 65876
// exit ;
65874: GO 65902
// for i in units do
65876: LD_ADDR_VAR 0 3
65880: PUSH
65881: LD_VAR 0 1
65885: PUSH
65886: FOR_IN
65887: IFFALSE 65900
// ComExit ( i ) ;
65889: LD_VAR 0 3
65893: PPUSH
65894: CALL 65780 0 1
65898: GO 65886
65900: POP
65901: POP
// end ;
65902: LD_VAR 0 2
65906: RET
// export function ResetHc ; begin
65907: LD_INT 0
65909: PPUSH
// InitHc ;
65910: CALL_OW 19
// hc_importance := 0 ;
65914: LD_ADDR_OWVAR 32
65918: PUSH
65919: LD_INT 0
65921: ST_TO_ADDR
// end ;
65922: LD_VAR 0 1
65926: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65927: LD_INT 0
65929: PPUSH
65930: PPUSH
65931: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65932: LD_ADDR_VAR 0 6
65936: PUSH
65937: LD_VAR 0 1
65941: PUSH
65942: LD_VAR 0 3
65946: PLUS
65947: PUSH
65948: LD_INT 2
65950: DIV
65951: ST_TO_ADDR
// if _x < 0 then
65952: LD_VAR 0 6
65956: PUSH
65957: LD_INT 0
65959: LESS
65960: IFFALSE 65977
// _x := _x * - 1 ;
65962: LD_ADDR_VAR 0 6
65966: PUSH
65967: LD_VAR 0 6
65971: PUSH
65972: LD_INT 1
65974: NEG
65975: MUL
65976: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65977: LD_ADDR_VAR 0 7
65981: PUSH
65982: LD_VAR 0 2
65986: PUSH
65987: LD_VAR 0 4
65991: PLUS
65992: PUSH
65993: LD_INT 2
65995: DIV
65996: ST_TO_ADDR
// if _y < 0 then
65997: LD_VAR 0 7
66001: PUSH
66002: LD_INT 0
66004: LESS
66005: IFFALSE 66022
// _y := _y * - 1 ;
66007: LD_ADDR_VAR 0 7
66011: PUSH
66012: LD_VAR 0 7
66016: PUSH
66017: LD_INT 1
66019: NEG
66020: MUL
66021: ST_TO_ADDR
// result := [ _x , _y ] ;
66022: LD_ADDR_VAR 0 5
66026: PUSH
66027: LD_VAR 0 6
66031: PUSH
66032: LD_VAR 0 7
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: ST_TO_ADDR
// end ;
66041: LD_VAR 0 5
66045: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66046: LD_INT 0
66048: PPUSH
66049: PPUSH
66050: PPUSH
66051: PPUSH
// task := GetTaskList ( unit ) ;
66052: LD_ADDR_VAR 0 7
66056: PUSH
66057: LD_VAR 0 1
66061: PPUSH
66062: CALL_OW 437
66066: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66067: LD_VAR 0 7
66071: NOT
66072: PUSH
66073: LD_VAR 0 1
66077: PPUSH
66078: LD_VAR 0 2
66082: PPUSH
66083: CALL_OW 308
66087: NOT
66088: AND
66089: IFFALSE 66093
// exit ;
66091: GO 66211
// if IsInArea ( unit , area ) then
66093: LD_VAR 0 1
66097: PPUSH
66098: LD_VAR 0 2
66102: PPUSH
66103: CALL_OW 308
66107: IFFALSE 66125
// begin ComMoveToArea ( unit , goAway ) ;
66109: LD_VAR 0 1
66113: PPUSH
66114: LD_VAR 0 3
66118: PPUSH
66119: CALL_OW 113
// exit ;
66123: GO 66211
// end ; if task [ 1 ] [ 1 ] <> M then
66125: LD_VAR 0 7
66129: PUSH
66130: LD_INT 1
66132: ARRAY
66133: PUSH
66134: LD_INT 1
66136: ARRAY
66137: PUSH
66138: LD_STRING M
66140: NONEQUAL
66141: IFFALSE 66145
// exit ;
66143: GO 66211
// x := task [ 1 ] [ 2 ] ;
66145: LD_ADDR_VAR 0 5
66149: PUSH
66150: LD_VAR 0 7
66154: PUSH
66155: LD_INT 1
66157: ARRAY
66158: PUSH
66159: LD_INT 2
66161: ARRAY
66162: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66163: LD_ADDR_VAR 0 6
66167: PUSH
66168: LD_VAR 0 7
66172: PUSH
66173: LD_INT 1
66175: ARRAY
66176: PUSH
66177: LD_INT 3
66179: ARRAY
66180: ST_TO_ADDR
// if InArea ( x , y , area ) then
66181: LD_VAR 0 5
66185: PPUSH
66186: LD_VAR 0 6
66190: PPUSH
66191: LD_VAR 0 2
66195: PPUSH
66196: CALL_OW 309
66200: IFFALSE 66211
// ComStop ( unit ) ;
66202: LD_VAR 0 1
66206: PPUSH
66207: CALL_OW 141
// end ;
66211: LD_VAR 0 4
66215: RET
// export function Abs ( value ) ; begin
66216: LD_INT 0
66218: PPUSH
// result := value ;
66219: LD_ADDR_VAR 0 2
66223: PUSH
66224: LD_VAR 0 1
66228: ST_TO_ADDR
// if value < 0 then
66229: LD_VAR 0 1
66233: PUSH
66234: LD_INT 0
66236: LESS
66237: IFFALSE 66254
// result := value * - 1 ;
66239: LD_ADDR_VAR 0 2
66243: PUSH
66244: LD_VAR 0 1
66248: PUSH
66249: LD_INT 1
66251: NEG
66252: MUL
66253: ST_TO_ADDR
// end ;
66254: LD_VAR 0 2
66258: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66259: LD_INT 0
66261: PPUSH
66262: PPUSH
66263: PPUSH
66264: PPUSH
66265: PPUSH
66266: PPUSH
66267: PPUSH
66268: PPUSH
// if not unit or not building then
66269: LD_VAR 0 1
66273: NOT
66274: PUSH
66275: LD_VAR 0 2
66279: NOT
66280: OR
66281: IFFALSE 66285
// exit ;
66283: GO 66511
// x := GetX ( building ) ;
66285: LD_ADDR_VAR 0 4
66289: PUSH
66290: LD_VAR 0 2
66294: PPUSH
66295: CALL_OW 250
66299: ST_TO_ADDR
// y := GetY ( building ) ;
66300: LD_ADDR_VAR 0 6
66304: PUSH
66305: LD_VAR 0 2
66309: PPUSH
66310: CALL_OW 251
66314: ST_TO_ADDR
// d := GetDir ( building ) ;
66315: LD_ADDR_VAR 0 8
66319: PUSH
66320: LD_VAR 0 2
66324: PPUSH
66325: CALL_OW 254
66329: ST_TO_ADDR
// r := 4 ;
66330: LD_ADDR_VAR 0 9
66334: PUSH
66335: LD_INT 4
66337: ST_TO_ADDR
// for i := 1 to 5 do
66338: LD_ADDR_VAR 0 10
66342: PUSH
66343: DOUBLE
66344: LD_INT 1
66346: DEC
66347: ST_TO_ADDR
66348: LD_INT 5
66350: PUSH
66351: FOR_TO
66352: IFFALSE 66509
// begin _x := ShiftX ( x , d , r + i ) ;
66354: LD_ADDR_VAR 0 5
66358: PUSH
66359: LD_VAR 0 4
66363: PPUSH
66364: LD_VAR 0 8
66368: PPUSH
66369: LD_VAR 0 9
66373: PUSH
66374: LD_VAR 0 10
66378: PLUS
66379: PPUSH
66380: CALL_OW 272
66384: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66385: LD_ADDR_VAR 0 7
66389: PUSH
66390: LD_VAR 0 6
66394: PPUSH
66395: LD_VAR 0 8
66399: PPUSH
66400: LD_VAR 0 9
66404: PUSH
66405: LD_VAR 0 10
66409: PLUS
66410: PPUSH
66411: CALL_OW 273
66415: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66416: LD_VAR 0 5
66420: PPUSH
66421: LD_VAR 0 7
66425: PPUSH
66426: CALL_OW 488
66430: PUSH
66431: LD_VAR 0 5
66435: PPUSH
66436: LD_VAR 0 7
66440: PPUSH
66441: CALL_OW 428
66445: PPUSH
66446: CALL_OW 247
66450: PUSH
66451: LD_INT 3
66453: PUSH
66454: LD_INT 2
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: IN
66461: NOT
66462: AND
66463: IFFALSE 66507
// begin ComMoveXY ( unit , _x , _y ) ;
66465: LD_VAR 0 1
66469: PPUSH
66470: LD_VAR 0 5
66474: PPUSH
66475: LD_VAR 0 7
66479: PPUSH
66480: CALL_OW 111
// result := [ _x , _y ] ;
66484: LD_ADDR_VAR 0 3
66488: PUSH
66489: LD_VAR 0 5
66493: PUSH
66494: LD_VAR 0 7
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: ST_TO_ADDR
// exit ;
66503: POP
66504: POP
66505: GO 66511
// end ; end ;
66507: GO 66351
66509: POP
66510: POP
// end ;
66511: LD_VAR 0 3
66515: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66516: LD_INT 0
66518: PPUSH
66519: PPUSH
66520: PPUSH
// result := 0 ;
66521: LD_ADDR_VAR 0 3
66525: PUSH
66526: LD_INT 0
66528: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66529: LD_VAR 0 1
66533: PUSH
66534: LD_INT 0
66536: LESS
66537: PUSH
66538: LD_VAR 0 1
66542: PUSH
66543: LD_INT 8
66545: GREATER
66546: OR
66547: PUSH
66548: LD_VAR 0 2
66552: PUSH
66553: LD_INT 0
66555: LESS
66556: OR
66557: PUSH
66558: LD_VAR 0 2
66562: PUSH
66563: LD_INT 8
66565: GREATER
66566: OR
66567: IFFALSE 66571
// exit ;
66569: GO 66646
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66571: LD_ADDR_VAR 0 4
66575: PUSH
66576: LD_INT 22
66578: PUSH
66579: LD_VAR 0 2
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PPUSH
66588: CALL_OW 69
66592: PUSH
66593: FOR_IN
66594: IFFALSE 66644
// begin un := UnitShoot ( i ) ;
66596: LD_ADDR_VAR 0 5
66600: PUSH
66601: LD_VAR 0 4
66605: PPUSH
66606: CALL_OW 504
66610: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66611: LD_VAR 0 5
66615: PPUSH
66616: CALL_OW 255
66620: PUSH
66621: LD_VAR 0 1
66625: EQUAL
66626: IFFALSE 66642
// begin result := un ;
66628: LD_ADDR_VAR 0 3
66632: PUSH
66633: LD_VAR 0 5
66637: ST_TO_ADDR
// exit ;
66638: POP
66639: POP
66640: GO 66646
// end ; end ;
66642: GO 66593
66644: POP
66645: POP
// end ;
66646: LD_VAR 0 3
66650: RET
// export function GetCargoBay ( units ) ; begin
66651: LD_INT 0
66653: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66654: LD_ADDR_VAR 0 2
66658: PUSH
66659: LD_VAR 0 1
66663: PPUSH
66664: LD_INT 2
66666: PUSH
66667: LD_INT 34
66669: PUSH
66670: LD_INT 12
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 34
66679: PUSH
66680: LD_INT 51
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 34
66689: PUSH
66690: LD_INT 32
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 34
66699: PUSH
66700: LD_EXP 20
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: PPUSH
66716: CALL_OW 72
66720: ST_TO_ADDR
// end ;
66721: LD_VAR 0 2
66725: RET
// export function Negate ( value ) ; begin
66726: LD_INT 0
66728: PPUSH
// result := not value ;
66729: LD_ADDR_VAR 0 2
66733: PUSH
66734: LD_VAR 0 1
66738: NOT
66739: ST_TO_ADDR
// end ;
66740: LD_VAR 0 2
66744: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
66745: LD_INT 0
66747: PPUSH
// if x1 = x2 then
66748: LD_VAR 0 1
66752: PUSH
66753: LD_VAR 0 3
66757: EQUAL
66758: IFFALSE 66792
// begin if y1 > y2 then
66760: LD_VAR 0 2
66764: PUSH
66765: LD_VAR 0 4
66769: GREATER
66770: IFFALSE 66782
// result := 0 else
66772: LD_ADDR_VAR 0 5
66776: PUSH
66777: LD_INT 0
66779: ST_TO_ADDR
66780: GO 66790
// result := 3 ;
66782: LD_ADDR_VAR 0 5
66786: PUSH
66787: LD_INT 3
66789: ST_TO_ADDR
// exit ;
66790: GO 66878
// end ; if y1 = y2 then
66792: LD_VAR 0 2
66796: PUSH
66797: LD_VAR 0 4
66801: EQUAL
66802: IFFALSE 66836
// begin if x1 > x2 then
66804: LD_VAR 0 1
66808: PUSH
66809: LD_VAR 0 3
66813: GREATER
66814: IFFALSE 66826
// result := 1 else
66816: LD_ADDR_VAR 0 5
66820: PUSH
66821: LD_INT 1
66823: ST_TO_ADDR
66824: GO 66834
// result := 4 ;
66826: LD_ADDR_VAR 0 5
66830: PUSH
66831: LD_INT 4
66833: ST_TO_ADDR
// exit ;
66834: GO 66878
// end ; if x1 > x2 and y1 > y2 then
66836: LD_VAR 0 1
66840: PUSH
66841: LD_VAR 0 3
66845: GREATER
66846: PUSH
66847: LD_VAR 0 2
66851: PUSH
66852: LD_VAR 0 4
66856: GREATER
66857: AND
66858: IFFALSE 66870
// result := 2 else
66860: LD_ADDR_VAR 0 5
66864: PUSH
66865: LD_INT 2
66867: ST_TO_ADDR
66868: GO 66878
// result := 5 ;
66870: LD_ADDR_VAR 0 5
66874: PUSH
66875: LD_INT 5
66877: ST_TO_ADDR
// end ;
66878: LD_VAR 0 5
66882: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66883: LD_INT 0
66885: PPUSH
66886: PPUSH
// if not driver or not IsInUnit ( driver ) then
66887: LD_VAR 0 1
66891: NOT
66892: PUSH
66893: LD_VAR 0 1
66897: PPUSH
66898: CALL_OW 310
66902: NOT
66903: OR
66904: IFFALSE 66908
// exit ;
66906: GO 66998
// vehicle := IsInUnit ( driver ) ;
66908: LD_ADDR_VAR 0 3
66912: PUSH
66913: LD_VAR 0 1
66917: PPUSH
66918: CALL_OW 310
66922: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66923: LD_VAR 0 1
66927: PPUSH
66928: LD_STRING \
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: LD_INT 0
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: LD_INT 0
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: PUSH
66958: LD_STRING E
66960: PUSH
66961: LD_INT 0
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: LD_VAR 0 3
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: LD_INT 0
66977: PUSH
66978: LD_INT 0
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PPUSH
66994: CALL_OW 446
// end ;
66998: LD_VAR 0 2
67002: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67003: LD_INT 0
67005: PPUSH
67006: PPUSH
// if not driver or not IsInUnit ( driver ) then
67007: LD_VAR 0 1
67011: NOT
67012: PUSH
67013: LD_VAR 0 1
67017: PPUSH
67018: CALL_OW 310
67022: NOT
67023: OR
67024: IFFALSE 67028
// exit ;
67026: GO 67118
// vehicle := IsInUnit ( driver ) ;
67028: LD_ADDR_VAR 0 3
67032: PUSH
67033: LD_VAR 0 1
67037: PPUSH
67038: CALL_OW 310
67042: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67043: LD_VAR 0 1
67047: PPUSH
67048: LD_STRING \
67050: PUSH
67051: LD_INT 0
67053: PUSH
67054: LD_INT 0
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: LD_INT 0
67065: PUSH
67066: LD_INT 0
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: PUSH
67078: LD_STRING E
67080: PUSH
67081: LD_INT 0
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: LD_VAR 0 3
67091: PUSH
67092: LD_INT 0
67094: PUSH
67095: LD_INT 0
67097: PUSH
67098: LD_INT 0
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PPUSH
67114: CALL_OW 447
// end ;
67118: LD_VAR 0 2
67122: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67123: LD_INT 0
67125: PPUSH
67126: PPUSH
67127: PPUSH
// tmp := [ ] ;
67128: LD_ADDR_VAR 0 5
67132: PUSH
67133: EMPTY
67134: ST_TO_ADDR
// for i in units do
67135: LD_ADDR_VAR 0 4
67139: PUSH
67140: LD_VAR 0 1
67144: PUSH
67145: FOR_IN
67146: IFFALSE 67184
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67148: LD_ADDR_VAR 0 5
67152: PUSH
67153: LD_VAR 0 5
67157: PPUSH
67158: LD_VAR 0 5
67162: PUSH
67163: LD_INT 1
67165: PLUS
67166: PPUSH
67167: LD_VAR 0 4
67171: PPUSH
67172: CALL_OW 256
67176: PPUSH
67177: CALL_OW 2
67181: ST_TO_ADDR
67182: GO 67145
67184: POP
67185: POP
// if not tmp then
67186: LD_VAR 0 5
67190: NOT
67191: IFFALSE 67195
// exit ;
67193: GO 67243
// if asc then
67195: LD_VAR 0 2
67199: IFFALSE 67223
// result := SortListByListAsc ( units , tmp ) else
67201: LD_ADDR_VAR 0 3
67205: PUSH
67206: LD_VAR 0 1
67210: PPUSH
67211: LD_VAR 0 5
67215: PPUSH
67216: CALL_OW 76
67220: ST_TO_ADDR
67221: GO 67243
// result := SortListByListDesc ( units , tmp ) ;
67223: LD_ADDR_VAR 0 3
67227: PUSH
67228: LD_VAR 0 1
67232: PPUSH
67233: LD_VAR 0 5
67237: PPUSH
67238: CALL_OW 77
67242: ST_TO_ADDR
// end ;
67243: LD_VAR 0 3
67247: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67248: LD_INT 0
67250: PPUSH
67251: PPUSH
// task := GetTaskList ( mech ) ;
67252: LD_ADDR_VAR 0 4
67256: PUSH
67257: LD_VAR 0 1
67261: PPUSH
67262: CALL_OW 437
67266: ST_TO_ADDR
// if not task then
67267: LD_VAR 0 4
67271: NOT
67272: IFFALSE 67276
// exit ;
67274: GO 67318
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67276: LD_ADDR_VAR 0 3
67280: PUSH
67281: LD_VAR 0 4
67285: PUSH
67286: LD_INT 1
67288: ARRAY
67289: PUSH
67290: LD_INT 1
67292: ARRAY
67293: PUSH
67294: LD_STRING r
67296: EQUAL
67297: PUSH
67298: LD_VAR 0 4
67302: PUSH
67303: LD_INT 1
67305: ARRAY
67306: PUSH
67307: LD_INT 4
67309: ARRAY
67310: PUSH
67311: LD_VAR 0 2
67315: EQUAL
67316: AND
67317: ST_TO_ADDR
// end ;
67318: LD_VAR 0 3
67322: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67323: LD_INT 0
67325: PPUSH
// SetDir ( unit , d ) ;
67326: LD_VAR 0 1
67330: PPUSH
67331: LD_VAR 0 4
67335: PPUSH
67336: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67340: LD_VAR 0 1
67344: PPUSH
67345: LD_VAR 0 2
67349: PPUSH
67350: LD_VAR 0 3
67354: PPUSH
67355: LD_VAR 0 5
67359: PPUSH
67360: CALL_OW 48
// end ;
67364: LD_VAR 0 6
67368: RET
// export function ToNaturalNumber ( number ) ; begin
67369: LD_INT 0
67371: PPUSH
// result := number div 1 ;
67372: LD_ADDR_VAR 0 2
67376: PUSH
67377: LD_VAR 0 1
67381: PUSH
67382: LD_INT 1
67384: DIV
67385: ST_TO_ADDR
// if number < 0 then
67386: LD_VAR 0 1
67390: PUSH
67391: LD_INT 0
67393: LESS
67394: IFFALSE 67404
// result := 0 ;
67396: LD_ADDR_VAR 0 2
67400: PUSH
67401: LD_INT 0
67403: ST_TO_ADDR
// end ;
67404: LD_VAR 0 2
67408: RET
// export function SortByClass ( units , class ) ; var un ; begin
67409: LD_INT 0
67411: PPUSH
67412: PPUSH
// if not units or not class then
67413: LD_VAR 0 1
67417: NOT
67418: PUSH
67419: LD_VAR 0 2
67423: NOT
67424: OR
67425: IFFALSE 67429
// exit ;
67427: GO 67524
// result := [ ] ;
67429: LD_ADDR_VAR 0 3
67433: PUSH
67434: EMPTY
67435: ST_TO_ADDR
// for un in units do
67436: LD_ADDR_VAR 0 4
67440: PUSH
67441: LD_VAR 0 1
67445: PUSH
67446: FOR_IN
67447: IFFALSE 67522
// if GetClass ( un ) = class then
67449: LD_VAR 0 4
67453: PPUSH
67454: CALL_OW 257
67458: PUSH
67459: LD_VAR 0 2
67463: EQUAL
67464: IFFALSE 67491
// result := Insert ( result , 1 , un ) else
67466: LD_ADDR_VAR 0 3
67470: PUSH
67471: LD_VAR 0 3
67475: PPUSH
67476: LD_INT 1
67478: PPUSH
67479: LD_VAR 0 4
67483: PPUSH
67484: CALL_OW 2
67488: ST_TO_ADDR
67489: GO 67520
// result := Replace ( result , result + 1 , un ) ;
67491: LD_ADDR_VAR 0 3
67495: PUSH
67496: LD_VAR 0 3
67500: PPUSH
67501: LD_VAR 0 3
67505: PUSH
67506: LD_INT 1
67508: PLUS
67509: PPUSH
67510: LD_VAR 0 4
67514: PPUSH
67515: CALL_OW 1
67519: ST_TO_ADDR
67520: GO 67446
67522: POP
67523: POP
// end ;
67524: LD_VAR 0 3
67528: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67529: LD_INT 0
67531: PPUSH
67532: PPUSH
67533: PPUSH
67534: PPUSH
67535: PPUSH
67536: PPUSH
67537: PPUSH
// result := [ ] ;
67538: LD_ADDR_VAR 0 4
67542: PUSH
67543: EMPTY
67544: ST_TO_ADDR
// if x - r < 0 then
67545: LD_VAR 0 1
67549: PUSH
67550: LD_VAR 0 3
67554: MINUS
67555: PUSH
67556: LD_INT 0
67558: LESS
67559: IFFALSE 67571
// min_x := 0 else
67561: LD_ADDR_VAR 0 8
67565: PUSH
67566: LD_INT 0
67568: ST_TO_ADDR
67569: GO 67587
// min_x := x - r ;
67571: LD_ADDR_VAR 0 8
67575: PUSH
67576: LD_VAR 0 1
67580: PUSH
67581: LD_VAR 0 3
67585: MINUS
67586: ST_TO_ADDR
// if y - r < 0 then
67587: LD_VAR 0 2
67591: PUSH
67592: LD_VAR 0 3
67596: MINUS
67597: PUSH
67598: LD_INT 0
67600: LESS
67601: IFFALSE 67613
// min_y := 0 else
67603: LD_ADDR_VAR 0 7
67607: PUSH
67608: LD_INT 0
67610: ST_TO_ADDR
67611: GO 67629
// min_y := y - r ;
67613: LD_ADDR_VAR 0 7
67617: PUSH
67618: LD_VAR 0 2
67622: PUSH
67623: LD_VAR 0 3
67627: MINUS
67628: ST_TO_ADDR
// max_x := x + r ;
67629: LD_ADDR_VAR 0 9
67633: PUSH
67634: LD_VAR 0 1
67638: PUSH
67639: LD_VAR 0 3
67643: PLUS
67644: ST_TO_ADDR
// max_y := y + r ;
67645: LD_ADDR_VAR 0 10
67649: PUSH
67650: LD_VAR 0 2
67654: PUSH
67655: LD_VAR 0 3
67659: PLUS
67660: ST_TO_ADDR
// for _x = min_x to max_x do
67661: LD_ADDR_VAR 0 5
67665: PUSH
67666: DOUBLE
67667: LD_VAR 0 8
67671: DEC
67672: ST_TO_ADDR
67673: LD_VAR 0 9
67677: PUSH
67678: FOR_TO
67679: IFFALSE 67780
// for _y = min_y to max_y do
67681: LD_ADDR_VAR 0 6
67685: PUSH
67686: DOUBLE
67687: LD_VAR 0 7
67691: DEC
67692: ST_TO_ADDR
67693: LD_VAR 0 10
67697: PUSH
67698: FOR_TO
67699: IFFALSE 67776
// begin if not ValidHex ( _x , _y ) then
67701: LD_VAR 0 5
67705: PPUSH
67706: LD_VAR 0 6
67710: PPUSH
67711: CALL_OW 488
67715: NOT
67716: IFFALSE 67720
// continue ;
67718: GO 67698
// if GetResourceTypeXY ( _x , _y ) then
67720: LD_VAR 0 5
67724: PPUSH
67725: LD_VAR 0 6
67729: PPUSH
67730: CALL_OW 283
67734: IFFALSE 67774
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67736: LD_ADDR_VAR 0 4
67740: PUSH
67741: LD_VAR 0 4
67745: PPUSH
67746: LD_VAR 0 4
67750: PUSH
67751: LD_INT 1
67753: PLUS
67754: PPUSH
67755: LD_VAR 0 5
67759: PUSH
67760: LD_VAR 0 6
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PPUSH
67769: CALL_OW 1
67773: ST_TO_ADDR
// end ;
67774: GO 67698
67776: POP
67777: POP
67778: GO 67678
67780: POP
67781: POP
// end ;
67782: LD_VAR 0 4
67786: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
67787: LD_INT 0
67789: PPUSH
67790: PPUSH
67791: PPUSH
67792: PPUSH
67793: PPUSH
67794: PPUSH
// if not units then
67795: LD_VAR 0 1
67799: NOT
67800: IFFALSE 67804
// exit ;
67802: GO 68205
// result := UnitFilter ( units , [ f_ok ] ) ;
67804: LD_ADDR_VAR 0 3
67808: PUSH
67809: LD_VAR 0 1
67813: PPUSH
67814: LD_INT 50
67816: PUSH
67817: EMPTY
67818: LIST
67819: PPUSH
67820: CALL_OW 72
67824: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67825: LD_ADDR_VAR 0 7
67829: PUSH
67830: LD_VAR 0 1
67834: PUSH
67835: LD_INT 1
67837: ARRAY
67838: PPUSH
67839: CALL_OW 255
67843: ST_TO_ADDR
// if not result then
67844: LD_VAR 0 3
67848: NOT
67849: IFFALSE 67853
// exit ;
67851: GO 68205
// for i in result do
67853: LD_ADDR_VAR 0 4
67857: PUSH
67858: LD_VAR 0 3
67862: PUSH
67863: FOR_IN
67864: IFFALSE 68203
// begin tag := GetTag ( i ) + 1 ;
67866: LD_ADDR_VAR 0 8
67870: PUSH
67871: LD_VAR 0 4
67875: PPUSH
67876: CALL_OW 110
67880: PUSH
67881: LD_INT 1
67883: PLUS
67884: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67885: LD_ADDR_VAR 0 6
67889: PUSH
67890: LD_VAR 0 4
67894: PPUSH
67895: CALL_OW 250
67899: PPUSH
67900: LD_VAR 0 4
67904: PPUSH
67905: CALL_OW 251
67909: PPUSH
67910: LD_INT 6
67912: PPUSH
67913: CALL 67529 0 3
67917: ST_TO_ADDR
// if cr then
67918: LD_VAR 0 6
67922: IFFALSE 67961
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67924: LD_VAR 0 4
67928: PPUSH
67929: LD_VAR 0 6
67933: PUSH
67934: LD_INT 1
67936: ARRAY
67937: PUSH
67938: LD_INT 1
67940: ARRAY
67941: PPUSH
67942: LD_VAR 0 6
67946: PUSH
67947: LD_INT 1
67949: ARRAY
67950: PUSH
67951: LD_INT 2
67953: ARRAY
67954: PPUSH
67955: CALL_OW 116
67959: GO 68201
// if path > tag then
67961: LD_VAR 0 2
67965: PUSH
67966: LD_VAR 0 8
67970: GREATER
67971: IFFALSE 68149
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
67973: LD_ADDR_VAR 0 5
67977: PUSH
67978: LD_INT 81
67980: PUSH
67981: LD_VAR 0 7
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 91
67992: PUSH
67993: LD_VAR 0 4
67997: PUSH
67998: LD_INT 12
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: LIST
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PPUSH
68010: CALL_OW 69
68014: ST_TO_ADDR
// if enemy then
68015: LD_VAR 0 5
68019: IFFALSE 68047
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68021: LD_VAR 0 4
68025: PPUSH
68026: LD_VAR 0 5
68030: PPUSH
68031: LD_VAR 0 4
68035: PPUSH
68036: CALL_OW 74
68040: PPUSH
68041: CALL_OW 115
68045: GO 68147
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68047: LD_VAR 0 4
68051: PPUSH
68052: LD_VAR 0 2
68056: PUSH
68057: LD_VAR 0 8
68061: ARRAY
68062: PUSH
68063: LD_INT 1
68065: ARRAY
68066: PPUSH
68067: LD_VAR 0 2
68071: PUSH
68072: LD_VAR 0 8
68076: ARRAY
68077: PUSH
68078: LD_INT 2
68080: ARRAY
68081: PPUSH
68082: CALL_OW 297
68086: PUSH
68087: LD_INT 6
68089: GREATER
68090: IFFALSE 68133
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68092: LD_VAR 0 4
68096: PPUSH
68097: LD_VAR 0 2
68101: PUSH
68102: LD_VAR 0 8
68106: ARRAY
68107: PUSH
68108: LD_INT 1
68110: ARRAY
68111: PPUSH
68112: LD_VAR 0 2
68116: PUSH
68117: LD_VAR 0 8
68121: ARRAY
68122: PUSH
68123: LD_INT 2
68125: ARRAY
68126: PPUSH
68127: CALL_OW 114
68131: GO 68147
// SetTag ( i , tag ) ;
68133: LD_VAR 0 4
68137: PPUSH
68138: LD_VAR 0 8
68142: PPUSH
68143: CALL_OW 109
// end else
68147: GO 68201
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68149: LD_ADDR_VAR 0 5
68153: PUSH
68154: LD_INT 81
68156: PUSH
68157: LD_VAR 0 7
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PPUSH
68166: CALL_OW 69
68170: ST_TO_ADDR
// if enemy then
68171: LD_VAR 0 5
68175: IFFALSE 68201
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68177: LD_VAR 0 4
68181: PPUSH
68182: LD_VAR 0 5
68186: PPUSH
68187: LD_VAR 0 4
68191: PPUSH
68192: CALL_OW 74
68196: PPUSH
68197: CALL_OW 115
// end ; end ;
68201: GO 67863
68203: POP
68204: POP
// end ; end_of_file
68205: LD_VAR 0 3
68209: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68210: LD_VAR 0 1
68214: PUSH
68215: LD_INT 200
68217: DOUBLE
68218: GREATEREQUAL
68219: IFFALSE 68227
68221: LD_INT 299
68223: DOUBLE
68224: LESSEQUAL
68225: IFTRUE 68229
68227: GO 68261
68229: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68230: LD_VAR 0 1
68234: PPUSH
68235: LD_VAR 0 2
68239: PPUSH
68240: LD_VAR 0 3
68244: PPUSH
68245: LD_VAR 0 4
68249: PPUSH
68250: LD_VAR 0 5
68254: PPUSH
68255: CALL 24772 0 5
68259: GO 68338
68261: LD_INT 300
68263: DOUBLE
68264: GREATEREQUAL
68265: IFFALSE 68273
68267: LD_INT 399
68269: DOUBLE
68270: LESSEQUAL
68271: IFTRUE 68275
68273: GO 68337
68275: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68276: LD_VAR 0 1
68280: PPUSH
68281: LD_VAR 0 2
68285: PPUSH
68286: LD_VAR 0 3
68290: PPUSH
68291: LD_VAR 0 4
68295: PPUSH
68296: LD_VAR 0 5
68300: PPUSH
68301: LD_VAR 0 6
68305: PPUSH
68306: LD_VAR 0 7
68310: PPUSH
68311: LD_VAR 0 8
68315: PPUSH
68316: LD_VAR 0 9
68320: PPUSH
68321: LD_VAR 0 10
68325: PPUSH
68326: LD_VAR 0 11
68330: PPUSH
68331: CALL 22670 0 11
68335: GO 68338
68337: POP
// end ;
68338: PPOPN 11
68340: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68341: LD_VAR 0 1
68345: PPUSH
68346: LD_VAR 0 2
68350: PPUSH
68351: LD_VAR 0 3
68355: PPUSH
68356: LD_VAR 0 4
68360: PPUSH
68361: LD_VAR 0 5
68365: PPUSH
68366: CALL 24764 0 5
// end ; end_of_file
68370: PPOPN 5
68372: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68373: LD_VAR 0 1
68377: PPUSH
68378: LD_VAR 0 2
68382: PPUSH
68383: LD_VAR 0 3
68387: PPUSH
68388: LD_VAR 0 4
68392: PPUSH
68393: LD_VAR 0 5
68397: PPUSH
68398: LD_VAR 0 6
68402: PPUSH
68403: CALL 10865 0 6
// end ;
68407: PPOPN 6
68409: END
