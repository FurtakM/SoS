// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsDisabled ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsDisabled = LoadVariable ( 12_SciDed_1 , false ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// CreateNature ;
 111: CALL 1579 0 0
// PrepareDifficulty ;
 115: CALL 1875 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 885 0 0
// PrepareRussianBase ;
 127: CALL 1128 0 0
// PrepareCommander ;
 131: CALL 1070 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13f_ ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_STRING 13f_
 596: PPUSH
 597: CALL 28052 0 3
 601: ST_TO_ADDR
// if debugMode then
 602: LD_EXP 16
 606: IFFALSE 621
// JMM := NewCharacter ( JMM ) ;
 608: LD_ADDR_EXP 1
 612: PUSH
 613: LD_STRING JMM
 615: PPUSH
 616: CALL_OW 25
 620: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 621: LD_EXP 1
 625: PPUSH
 626: LD_INT 95
 628: PPUSH
 629: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 633: LD_EXP 1
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ,  ) ;
 645: LD_ADDR_EXP 5
 649: PUSH
 650: LD_STRING Powell
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: LD_STRING 
 658: PPUSH
 659: CALL 28052 0 3
 663: ST_TO_ADDR
// uc_side = 4 ;
 664: LD_ADDR_OWVAR 20
 668: PUSH
 669: LD_INT 4
 671: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 10c_ ) ;
 672: LD_ADDR_EXP 2
 676: PUSH
 677: LD_STRING Joan
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_STRING 10c_
 685: PPUSH
 686: CALL 28052 0 3
 690: ST_TO_ADDR
// if Joan then
 691: LD_EXP 2
 695: IFFALSE 734
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 697: LD_EXP 2
 701: PPUSH
 702: LD_INT 4
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 712: LD_EXP 2
 716: PPUSH
 717: LD_INT 4
 719: PPUSH
 720: CALL_OW 336
// JMMGirl = 1 ;
 724: LD_ADDR_EXP 7
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// end else
 732: GO 794
// begin Lisa = PrepareUnit ( Lisa , true , 13s_ ) ;
 734: LD_ADDR_EXP 3
 738: PUSH
 739: LD_STRING Lisa
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_STRING 13s_
 747: PPUSH
 748: CALL 28052 0 3
 752: ST_TO_ADDR
// if Lisa then
 753: LD_EXP 3
 757: IFFALSE 794
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 4
 766: PPUSH
 767: LD_INT 0
 769: PPUSH
 770: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 774: LD_EXP 3
 778: PPUSH
 779: LD_INT 1
 781: PPUSH
 782: CALL_OW 336
// JMMGirl = 2 ;
 786: LD_ADDR_EXP 7
 790: PUSH
 791: LD_INT 2
 793: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 794: LD_EXP 2
 798: NOT
 799: PUSH
 800: LD_EXP 3
 804: NOT
 805: AND
 806: IFFALSE 856
// begin Connie = NewCharacter ( Coonie ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Coonie
 815: PPUSH
 816: CALL_OW 25
 820: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 836: LD_EXP 4
 840: PPUSH
 841: LD_INT 3
 843: PPUSH
 844: CALL_OW 336
// JMMGirl = 3 ;
 848: LD_ADDR_EXP 7
 852: PUSH
 853: LD_INT 3
 855: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 856: LD_EXP 2
 860: PUSH
 861: LD_EXP 3
 865: PUSH
 866: LD_EXP 4
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: PPUSH
 876: CALL_OW 140
// end ;
 880: LD_VAR 0 1
 884: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// for i = 1 to 5 do
 890: LD_ADDR_VAR 0 2
 894: PUSH
 895: DOUBLE
 896: LD_INT 1
 898: DEC
 899: ST_TO_ADDR
 900: LD_INT 5
 902: PUSH
 903: FOR_TO
 904: IFFALSE 1063
// begin vc_engine = rand ( 1 , 3 ) ;
 906: LD_ADDR_OWVAR 39
 910: PUSH
 911: LD_INT 1
 913: PPUSH
 914: LD_INT 3
 916: PPUSH
 917: CALL_OW 12
 921: ST_TO_ADDR
// vc_control = control_remote ;
 922: LD_ADDR_OWVAR 38
 926: PUSH
 927: LD_INT 2
 929: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 930: LD_ADDR_OWVAR 40
 934: PUSH
 935: LD_INT 5
 937: PUSH
 938: LD_INT 12
 940: PUSH
 941: LD_INT 13
 943: PUSH
 944: LD_INT 7
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_VAR 0 2
 957: PUSH
 958: LD_INT 4
 960: MOD
 961: PUSH
 962: LD_INT 1
 964: PLUS
 965: ARRAY
 966: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 967: LD_ADDR_OWVAR 37
 971: PUSH
 972: LD_INT 3
 974: PUSH
 975: LD_INT 2
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: LD_INT 2
 989: MOD
 990: PUSH
 991: LD_INT 1
 993: PLUS
 994: ARRAY
 995: ST_TO_ADDR
// veh = CreateVehicle ;
 996: LD_ADDR_VAR 0 3
1000: PUSH
1001: CALL_OW 45
1005: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: LD_INT 5
1016: PPUSH
1017: CALL_OW 12
1021: PPUSH
1022: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1026: LD_VAR 0 3
1030: PPUSH
1031: LD_INT 500
1033: PPUSH
1034: LD_INT 1000
1036: PPUSH
1037: CALL_OW 12
1041: PPUSH
1042: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1046: LD_VAR 0 3
1050: PPUSH
1051: LD_INT 15
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ;
1061: GO 903
1063: POP
1064: POP
// end ; end_of_file
1065: LD_VAR 0 1
1069: RET
// export function PrepareCommander ; begin
1070: LD_INT 0
1072: PPUSH
// uc_side := 3 ;
1073: LD_ADDR_OWVAR 20
1077: PUSH
1078: LD_INT 3
1080: ST_TO_ADDR
// uc_nation := 3 ;
1081: LD_ADDR_OWVAR 21
1085: PUSH
1086: LD_INT 3
1088: ST_TO_ADDR
// Eisenstein := PrepareUnit ( Eisenstein , false ,  ) ;
1089: LD_ADDR_EXP 6
1093: PUSH
1094: LD_STRING Eisenstein
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 28052 0 3
1107: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1108: LD_EXP 6
1112: PPUSH
1113: LD_INT 11
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: CALL_OW 49
// end ;
1123: LD_VAR 0 1
1127: RET
// export baseGuard ; export function PrepareRussianBase ; var i ; begin
1128: LD_INT 0
1130: PPUSH
1131: PPUSH
// uc_nation := 3 ;
1132: LD_ADDR_OWVAR 21
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// uc_side := 3 ;
1140: LD_ADDR_OWVAR 20
1144: PUSH
1145: LD_INT 3
1147: ST_TO_ADDR
// if Difficulty > 1 then
1148: LD_OWVAR 67
1152: PUSH
1153: LD_INT 1
1155: GREATER
1156: IFFALSE 1220
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1158: LD_INT 1
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: LD_INT 8
1166: PUSH
1167: LD_INT 8
1169: PUSH
1170: LD_INT 9
1172: PUSH
1173: LD_INT 10
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_OWVAR 67
1186: ARRAY
1187: PPUSH
1188: CALL_OW 380
// baseGuard := CreateHuman ;
1192: LD_ADDR_EXP 18
1196: PUSH
1197: CALL_OW 44
1201: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1202: LD_EXP 18
1206: PPUSH
1207: LD_INT 39
1209: PPUSH
1210: LD_INT 67
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 48
// end ; if russianRocketsDisabled then
1220: LD_EXP 14
1224: IFFALSE 1312
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ] ) do
1226: LD_ADDR_VAR 0 2
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 3
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 2
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: LD_INT 33
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 30
1256: PUSH
1257: LD_INT 32
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PPUSH
1273: CALL_OW 69
1277: PUSH
1278: FOR_IN
1279: IFFALSE 1310
// if GetBWeapon ( i ) = ru_rocket then
1281: LD_VAR 0 2
1285: PPUSH
1286: CALL_OW 269
1290: PUSH
1291: LD_INT 47
1293: EQUAL
1294: IFFALSE 1308
// PlaceWeaponTurret ( i , ru_rocket_launcher ) ;
1296: LD_VAR 0 2
1300: PPUSH
1301: LD_INT 45
1303: PPUSH
1304: CALL_OW 431
1308: GO 1278
1310: POP
1311: POP
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1312: LD_INT 116
1314: PPUSH
1315: LD_INT 50
1317: PPUSH
1318: LD_INT 74
1320: PPUSH
1321: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1325: LD_INT 3
1327: PPUSH
1328: LD_INT 3
1330: PPUSH
1331: LD_INT 45
1333: PPUSH
1334: LD_INT 10
1336: PPUSH
1337: LD_INT 9
1339: PPUSH
1340: LD_INT 2
1342: PPUSH
1343: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1347: LD_INT 3
1349: PPUSH
1350: LD_INT 3
1352: PPUSH
1353: LD_INT 22
1355: PPUSH
1356: LD_INT 10
1358: PPUSH
1359: LD_INT 2
1361: PPUSH
1362: LD_INT 2
1364: PPUSH
1365: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1369: LD_INT 3
1371: PPUSH
1372: LD_INT 3
1374: PPUSH
1375: LD_INT 1
1377: PPUSH
1378: LD_INT 10
1380: PPUSH
1381: LD_INT 3
1383: PPUSH
1384: LD_INT 3
1386: PPUSH
1387: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1391: LD_INT 3
1393: PPUSH
1394: LD_INT 3
1396: PPUSH
1397: LD_INT 40
1399: PPUSH
1400: LD_INT 10
1402: PPUSH
1403: LD_INT 3
1405: PPUSH
1406: LD_INT 3
1408: PPUSH
1409: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1413: LD_INT 3
1415: PPUSH
1416: LD_INT 3
1418: PPUSH
1419: LD_INT 14
1421: PPUSH
1422: LD_INT 10
1424: PPUSH
1425: LD_INT 4
1427: PPUSH
1428: LD_INT 1
1430: PPUSH
1431: CALL 1765 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1435: LD_INT 3
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: LD_INT 15
1443: PPUSH
1444: LD_INT 10
1446: PPUSH
1447: LD_INT 4
1449: PPUSH
1450: LD_INT 2
1452: PPUSH
1453: CALL 1765 0 6
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , [ 3500 , 4500 , 6000 , 9000 ] [ Difficulty ] ) ;
1457: LD_INT 22
1459: PPUSH
1460: CALL_OW 274
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: LD_INT 3500
1470: PUSH
1471: LD_INT 4500
1473: PUSH
1474: LD_INT 6000
1476: PUSH
1477: LD_INT 9000
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_OWVAR 67
1490: ARRAY
1491: PPUSH
1492: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , [ 500 , 1000 , 2000 , 3000 ] [ Difficulty ] ) ;
1496: LD_INT 22
1498: PPUSH
1499: CALL_OW 274
1503: PPUSH
1504: LD_INT 2
1506: PPUSH
1507: LD_INT 500
1509: PUSH
1510: LD_INT 1000
1512: PUSH
1513: LD_INT 2000
1515: PUSH
1516: LD_INT 3000
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: PUSH
1525: LD_OWVAR 67
1529: ARRAY
1530: PPUSH
1531: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_siberit , [ 150 , 250 , 300 , 450 ] [ Difficulty ] ) ;
1535: LD_INT 22
1537: PPUSH
1538: CALL_OW 274
1542: PPUSH
1543: LD_INT 3
1545: PPUSH
1546: LD_INT 150
1548: PUSH
1549: LD_INT 250
1551: PUSH
1552: LD_INT 300
1554: PUSH
1555: LD_INT 450
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: PUSH
1564: LD_OWVAR 67
1568: ARRAY
1569: PPUSH
1570: CALL_OW 277
// end ; end_of_file
1574: LD_VAR 0 1
1578: RET
// export function CreateNature ; var i ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// uc_side := 0 ;
1583: LD_ADDR_OWVAR 20
1587: PUSH
1588: LD_INT 0
1590: ST_TO_ADDR
// uc_nation := 0 ;
1591: LD_ADDR_OWVAR 21
1595: PUSH
1596: LD_INT 0
1598: ST_TO_ADDR
// hc_class := class_apeman ;
1599: LD_ADDR_OWVAR 28
1603: PUSH
1604: LD_INT 12
1606: ST_TO_ADDR
// hc_gallery :=  ;
1607: LD_ADDR_OWVAR 33
1611: PUSH
1612: LD_STRING 
1614: ST_TO_ADDR
// hc_name :=  ;
1615: LD_ADDR_OWVAR 26
1619: PUSH
1620: LD_STRING 
1622: ST_TO_ADDR
// for i = 1 to 7 do
1623: LD_ADDR_VAR 0 2
1627: PUSH
1628: DOUBLE
1629: LD_INT 1
1631: DEC
1632: ST_TO_ADDR
1633: LD_INT 7
1635: PUSH
1636: FOR_TO
1637: IFFALSE 1718
// begin hc_class := class_apeman ;
1639: LD_ADDR_OWVAR 28
1643: PUSH
1644: LD_INT 12
1646: ST_TO_ADDR
// hc_gallery :=  ;
1647: LD_ADDR_OWVAR 33
1651: PUSH
1652: LD_STRING 
1654: ST_TO_ADDR
// hc_name :=  ;
1655: LD_ADDR_OWVAR 26
1659: PUSH
1660: LD_STRING 
1662: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1663: LD_ADDR_OWVAR 31
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: LD_INT 0
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1686: LD_ADDR_OWVAR 29
1690: PUSH
1691: LD_INT 11
1693: PUSH
1694: LD_INT 10
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1701: CALL_OW 44
1705: PPUSH
1706: LD_INT 16
1708: PPUSH
1709: LD_INT 0
1711: PPUSH
1712: CALL_OW 49
// end ;
1716: GO 1636
1718: POP
1719: POP
// end ;
1720: LD_VAR 0 1
1724: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1725: LD_INT 0
1727: PPUSH
1728: PPUSH
// for i in charactersList do
1729: LD_ADDR_VAR 0 4
1733: PUSH
1734: LD_VAR 0 1
1738: PUSH
1739: FOR_IN
1740: IFFALSE 1758
// SaveCharacters ( i , ident ) ;
1742: LD_VAR 0 4
1746: PPUSH
1747: LD_VAR 0 2
1751: PPUSH
1752: CALL_OW 38
1756: GO 1739
1758: POP
1759: POP
// end ;
1760: LD_VAR 0 3
1764: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
1769: PPUSH
1770: PPUSH
// for i = 1 to count do
1771: LD_ADDR_VAR 0 8
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_VAR 0 6
1785: PUSH
1786: FOR_TO
1787: IFFALSE 1868
// begin uc_side = side ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_VAR 0 1
1798: ST_TO_ADDR
// uc_nation = nation ;
1799: LD_ADDR_OWVAR 21
1803: PUSH
1804: LD_VAR 0 2
1808: ST_TO_ADDR
// hc_gallery =  ;
1809: LD_ADDR_OWVAR 33
1813: PUSH
1814: LD_STRING 
1816: ST_TO_ADDR
// hc_name =  ;
1817: LD_ADDR_OWVAR 26
1821: PUSH
1822: LD_STRING 
1824: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1825: LD_INT 0
1827: PPUSH
1828: LD_VAR 0 5
1832: PPUSH
1833: LD_VAR 0 4
1837: PPUSH
1838: CALL_OW 380
// un = CreateHuman ;
1842: LD_ADDR_VAR 0 10
1846: PUSH
1847: CALL_OW 44
1851: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1852: LD_VAR 0 10
1856: PPUSH
1857: LD_VAR 0 3
1861: PPUSH
1862: CALL_OW 52
// end ;
1866: GO 1786
1868: POP
1869: POP
// end ;
1870: LD_VAR 0 7
1874: RET
// export function PrepareDifficulty ; begin
1875: LD_INT 0
1877: PPUSH
// if difficulty = 1 then
1878: LD_OWVAR 67
1882: PUSH
1883: LD_INT 1
1885: EQUAL
1886: IFFALSE 1966
// begin SetTech ( 57 , 3 , state_disabled ) ;
1888: LD_INT 57
1890: PPUSH
1891: LD_INT 3
1893: PPUSH
1894: LD_INT 0
1896: PPUSH
1897: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1901: LD_INT 58
1903: PPUSH
1904: LD_INT 3
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1914: LD_INT 59
1916: PPUSH
1917: LD_INT 3
1919: PPUSH
1920: LD_INT 0
1922: PPUSH
1923: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1927: LD_INT 51
1929: PPUSH
1930: LD_INT 3
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1940: LD_INT 52
1942: PPUSH
1943: LD_INT 3
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1953: LD_INT 53
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 322
// end ; if difficulty = 2 then
1966: LD_OWVAR 67
1970: PUSH
1971: LD_INT 2
1973: EQUAL
1974: IFFALSE 2054
// begin SetTech ( 57 , 3 , state_enabled ) ;
1976: LD_INT 57
1978: PPUSH
1979: LD_INT 3
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1989: LD_INT 58
1991: PPUSH
1992: LD_INT 3
1994: PPUSH
1995: LD_INT 0
1997: PPUSH
1998: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
2002: LD_INT 59
2004: PPUSH
2005: LD_INT 3
2007: PPUSH
2008: LD_INT 0
2010: PPUSH
2011: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
2015: LD_INT 51
2017: PPUSH
2018: LD_INT 3
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2028: LD_INT 52
2030: PPUSH
2031: LD_INT 3
2033: PPUSH
2034: LD_INT 1
2036: PPUSH
2037: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
2041: LD_INT 53
2043: PPUSH
2044: LD_INT 3
2046: PPUSH
2047: LD_INT 0
2049: PPUSH
2050: CALL_OW 322
// end ; if difficulty >= 3 then
2054: LD_OWVAR 67
2058: PUSH
2059: LD_INT 3
2061: GREATEREQUAL
2062: IFFALSE 2142
// begin SetTech ( 57 , 3 , state_enabled ) ;
2064: LD_INT 57
2066: PPUSH
2067: LD_INT 3
2069: PPUSH
2070: LD_INT 1
2072: PPUSH
2073: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
2077: LD_INT 58
2079: PPUSH
2080: LD_INT 3
2082: PPUSH
2083: LD_INT 1
2085: PPUSH
2086: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
2090: LD_INT 59
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
2103: LD_INT 51
2105: PPUSH
2106: LD_INT 3
2108: PPUSH
2109: LD_INT 1
2111: PPUSH
2112: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2116: LD_INT 52
2118: PPUSH
2119: LD_INT 3
2121: PPUSH
2122: LD_INT 1
2124: PPUSH
2125: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
2129: LD_INT 53
2131: PPUSH
2132: LD_INT 3
2134: PPUSH
2135: LD_INT 1
2137: PPUSH
2138: CALL_OW 322
// end ; end ;
2142: LD_VAR 0 1
2146: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
2147: LD_INT 0
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
2153: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
2154: LD_ADDR_VAR 0 8
2158: PUSH
2159: LD_INT 48
2161: PUSH
2162: LD_INT 49
2164: PUSH
2165: LD_INT 50
2167: PUSH
2168: LD_INT 20
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: LD_INT 69
2176: PUSH
2177: LD_INT 39
2179: PUSH
2180: LD_INT 34
2182: PUSH
2183: LD_INT 40
2185: PUSH
2186: LD_INT 71
2188: PUSH
2189: LD_INT 57
2191: PUSH
2192: LD_INT 58
2194: PUSH
2195: LD_INT 44
2197: PUSH
2198: LD_INT 32
2200: PUSH
2201: LD_INT 27
2203: PUSH
2204: LD_INT 23
2206: PUSH
2207: LD_INT 33
2209: PUSH
2210: LD_INT 54
2212: PUSH
2213: LD_INT 55
2215: PUSH
2216: LD_INT 56
2218: PUSH
2219: LD_INT 63
2221: PUSH
2222: LD_INT 64
2224: PUSH
2225: LD_INT 65
2227: PUSH
2228: LD_INT 30
2230: PUSH
2231: LD_INT 31
2233: PUSH
2234: LD_INT 21
2236: PUSH
2237: LD_INT 22
2239: PUSH
2240: LD_INT 25
2242: PUSH
2243: LD_INT 51
2245: PUSH
2246: LD_INT 52
2248: PUSH
2249: LD_INT 59
2251: PUSH
2252: LD_INT 53
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2289: LD_ADDR_VAR 0 5
2293: PUSH
2294: DOUBLE
2295: LD_INT 1
2297: DEC
2298: ST_TO_ADDR
2299: LD_VAR 0 8
2303: PUSH
2304: FOR_TO
2305: IFFALSE 2381
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2307: LD_VAR 0 8
2311: PUSH
2312: LD_VAR 0 5
2316: ARRAY
2317: PPUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 321
2327: PUSH
2328: LD_INT 1
2330: EQUAL
2331: PUSH
2332: LD_VAR 0 8
2336: PUSH
2337: LD_VAR 0 5
2341: ARRAY
2342: PPUSH
2343: LD_VAR 0 3
2347: PPUSH
2348: CALL_OW 482
2352: PUSH
2353: LD_INT 1
2355: EQUAL
2356: AND
2357: IFFALSE 2379
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 8
2368: PUSH
2369: LD_VAR 0 5
2373: ARRAY
2374: PPUSH
2375: CALL_OW 184
2379: GO 2304
2381: POP
2382: POP
// end ;
2383: LD_VAR 0 4
2387: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2388: LD_INT 0
2390: PPUSH
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
2395: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2396: LD_ADDR_VAR 0 8
2400: PUSH
2401: LD_VAR 0 2
2405: PPUSH
2406: CALL_OW 313
2410: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2411: LD_ADDR_VAR 0 9
2415: PUSH
2416: LD_VAR 0 3
2420: PPUSH
2421: LD_INT 22
2423: PUSH
2424: LD_VAR 0 1
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 25
2435: PUSH
2436: LD_INT 2
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: PUSH
2443: LD_INT 24
2445: PUSH
2446: LD_INT 750
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PUSH
2453: LD_INT 3
2455: PUSH
2456: LD_INT 54
2458: PUSH
2459: EMPTY
2460: LIST
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 70
2476: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2477: LD_ADDR_VAR 0 6
2481: PUSH
2482: LD_VAR 0 3
2486: PPUSH
2487: LD_INT 22
2489: PUSH
2490: LD_VAR 0 1
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: LD_INT 21
2501: PUSH
2502: LD_INT 3
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 3
2511: PUSH
2512: LD_INT 24
2514: PUSH
2515: LD_INT 1000
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: PPUSH
2534: CALL_OW 70
2538: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2539: LD_VAR 0 6
2543: NOT
2544: PUSH
2545: LD_INT 22
2547: PUSH
2548: LD_VAR 0 1
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 25
2559: PUSH
2560: LD_INT 2
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 24
2569: PUSH
2570: LD_INT 250
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: LIST
2581: PPUSH
2582: CALL_OW 69
2586: NOT
2587: AND
2588: IFFALSE 2592
// exit ;
2590: GO 2774
// if buildings_list > 0 and engineerOkInside then
2592: LD_VAR 0 6
2596: PUSH
2597: LD_INT 0
2599: GREATER
2600: PUSH
2601: LD_VAR 0 8
2605: AND
2606: IFFALSE 2617
// ComExitBuilding ( engineerOkInside ) ;
2608: LD_VAR 0 8
2612: PPUSH
2613: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2617: LD_VAR 0 6
2621: PUSH
2622: LD_INT 0
2624: GREATER
2625: PUSH
2626: LD_VAR 0 9
2630: PUSH
2631: LD_INT 0
2633: GREATER
2634: AND
2635: IFFALSE 2655
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2637: LD_VAR 0 9
2641: PPUSH
2642: LD_VAR 0 6
2646: PUSH
2647: LD_INT 1
2649: ARRAY
2650: PPUSH
2651: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2655: LD_VAR 0 6
2659: PUSH
2660: LD_INT 0
2662: EQUAL
2663: PUSH
2664: LD_VAR 0 4
2668: PUSH
2669: LD_INT 0
2671: EQUAL
2672: AND
2673: PUSH
2674: LD_VAR 0 9
2678: PUSH
2679: LD_INT 0
2681: GREATER
2682: AND
2683: IFFALSE 2699
// ComEnterUnit ( engineerOkOutside , building ) ;
2685: LD_VAR 0 9
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2699: LD_VAR 0 9
2703: PUSH
2704: LD_INT 0
2706: GREATER
2707: PUSH
2708: LD_VAR 0 6
2712: PUSH
2713: LD_INT 0
2715: EQUAL
2716: AND
2717: PUSH
2718: LD_VAR 0 4
2722: PUSH
2723: LD_INT 0
2725: GREATER
2726: AND
2727: IFFALSE 2774
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2729: LD_VAR 0 9
2733: PPUSH
2734: LD_VAR 0 4
2738: PUSH
2739: LD_INT 1
2741: ARRAY
2742: PPUSH
2743: LD_VAR 0 4
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 4
2756: PUSH
2757: LD_INT 3
2759: ARRAY
2760: PPUSH
2761: LD_VAR 0 4
2765: PUSH
2766: LD_INT 4
2768: ARRAY
2769: PPUSH
2770: CALL_OW 145
// end ;
2774: LD_VAR 0 5
2778: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2779: LD_INT 0
2781: PPUSH
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
2787: PPUSH
2788: PPUSH
2789: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2790: LD_ADDR_VAR 0 6
2794: PUSH
2795: LD_INT 22
2797: PUSH
2798: LD_VAR 0 1
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 25
2809: PUSH
2810: LD_INT 4
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 23
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 24
2829: PUSH
2830: LD_INT 251
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: PPUSH
2843: CALL_OW 69
2847: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2848: LD_ADDR_VAR 0 7
2852: PUSH
2853: LD_VAR 0 3
2857: PPUSH
2858: LD_INT 22
2860: PUSH
2861: LD_VAR 0 1
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PUSH
2870: LD_INT 23
2872: PUSH
2873: LD_INT 2
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: LD_INT 25
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: LD_INT 50
2892: PUSH
2893: EMPTY
2894: LIST
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 70
2906: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2907: LD_ADDR_VAR 0 10
2911: PUSH
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 22
2919: PUSH
2920: LD_VAR 0 1
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 21
2931: PUSH
2932: LD_INT 1
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: LD_INT 3
2941: PUSH
2942: LD_INT 25
2944: PUSH
2945: LD_INT 3
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 3
2958: PUSH
2959: LD_INT 24
2961: PUSH
2962: LD_INT 750
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: PPUSH
2979: CALL_OW 70
2983: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2984: LD_ADDR_VAR 0 11
2988: PUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_INT 22
2996: PUSH
2997: LD_VAR 0 1
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 21
3008: PUSH
3009: LD_INT 1
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 3
3018: PUSH
3019: LD_INT 25
3021: PUSH
3022: LD_INT 3
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: LD_INT 3
3035: PUSH
3036: LD_INT 24
3038: PUSH
3039: LD_INT 1000
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: PPUSH
3056: CALL_OW 70
3060: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
3061: LD_VAR 0 10
3065: NOT
3066: PUSH
3067: LD_VAR 0 11
3071: NOT
3072: AND
3073: PUSH
3074: LD_VAR 0 6
3078: NOT
3079: AND
3080: IFFALSE 3084
// exit ;
3082: GO 3318
// if damageUnits > 0 and sci_list > 0 then
3084: LD_VAR 0 10
3088: PUSH
3089: LD_INT 0
3091: GREATER
3092: PUSH
3093: LD_VAR 0 6
3097: PUSH
3098: LD_INT 0
3100: GREATER
3101: AND
3102: IFFALSE 3118
// ComMoveToArea ( damageUnits , healArea ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_VAR 0 2
3113: PPUSH
3114: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
3118: LD_VAR 0 11
3122: PUSH
3123: LD_INT 0
3125: GREATER
3126: PUSH
3127: LD_VAR 0 6
3131: PUSH
3132: LD_INT 0
3134: GREATER
3135: AND
3136: IFFALSE 3147
// ComExitBuilding ( sci_list ) ;
3138: LD_VAR 0 6
3142: PPUSH
3143: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
3147: LD_VAR 0 11
3151: PUSH
3152: LD_INT 0
3154: GREATER
3155: PUSH
3156: LD_VAR 0 7
3160: PUSH
3161: LD_INT 0
3163: GREATER
3164: AND
3165: IFFALSE 3185
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
3167: LD_VAR 0 7
3171: PPUSH
3172: LD_VAR 0 11
3176: PUSH
3177: LD_INT 1
3179: ARRAY
3180: PPUSH
3181: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
3185: LD_VAR 0 10
3189: PUSH
3190: LD_INT 0
3192: EQUAL
3193: PUSH
3194: LD_VAR 0 11
3198: PUSH
3199: LD_INT 0
3201: EQUAL
3202: AND
3203: PUSH
3204: LD_VAR 0 7
3208: PUSH
3209: LD_INT 0
3211: GREATER
3212: AND
3213: IFFALSE 3318
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3215: LD_ADDR_VAR 0 12
3219: PUSH
3220: LD_INT 22
3222: PUSH
3223: LD_VAR 0 1
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 21
3234: PUSH
3235: LD_INT 3
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 30
3244: PUSH
3245: LD_INT 8
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: PPUSH
3257: CALL_OW 69
3261: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3262: LD_ADDR_VAR 0 13
3266: PUSH
3267: LD_INT 1
3269: PPUSH
3270: LD_VAR 0 12
3274: PPUSH
3275: CALL_OW 12
3279: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3280: LD_VAR 0 7
3284: PPUSH
3285: LD_INT 3
3287: PUSH
3288: LD_INT 60
3290: PUSH
3291: EMPTY
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 72
3302: PPUSH
3303: LD_VAR 0 12
3307: PUSH
3308: LD_VAR 0 13
3312: ARRAY
3313: PPUSH
3314: CALL_OW 120
// end ; end ;
3318: LD_VAR 0 5
3322: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3323: LD_INT 0
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
// tmpTab = [ ] ;
3329: LD_ADDR_VAR 0 6
3333: PUSH
3334: EMPTY
3335: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3336: LD_INT 22
3338: PUSH
3339: LD_VAR 0 1
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 30
3350: PUSH
3351: LD_INT 32
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PPUSH
3362: CALL_OW 69
3366: PUSH
3367: LD_INT 0
3369: GREATER
3370: IFFALSE 3453
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3372: LD_ADDR_VAR 0 4
3376: PUSH
3377: LD_INT 22
3379: PUSH
3380: LD_VAR 0 1
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 30
3391: PUSH
3392: LD_INT 32
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 69
3407: PUSH
3408: FOR_IN
3409: IFFALSE 3451
// begin for j in UnitsInside ( i ) do
3411: LD_ADDR_VAR 0 5
3415: PUSH
3416: LD_VAR 0 4
3420: PPUSH
3421: CALL_OW 313
3425: PUSH
3426: FOR_IN
3427: IFFALSE 3447
// tmpTab = tmpTab ^ j ;
3429: LD_ADDR_VAR 0 6
3433: PUSH
3434: LD_VAR 0 6
3438: PUSH
3439: LD_VAR 0 5
3443: ADD
3444: ST_TO_ADDR
3445: GO 3426
3447: POP
3448: POP
// end ;
3449: GO 3408
3451: POP
3452: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3453: LD_VAR 0 6
3457: PPUSH
3458: LD_VAR 0 2
3462: PPUSH
3463: CALL_OW 250
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 251
3477: PPUSH
3478: CALL_OW 114
// end ;
3482: LD_VAR 0 3
3486: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3487: LD_INT 0
3489: PPUSH
3490: PPUSH
3491: PPUSH
3492: PPUSH
// enable ;
3493: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3494: LD_ADDR_VAR 0 7
3498: PUSH
3499: LD_VAR 0 3
3503: PPUSH
3504: CALL_OW 435
3508: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3509: LD_ADDR_VAR 0 6
3513: PUSH
3514: LD_INT 22
3516: PUSH
3517: LD_VAR 0 1
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PUSH
3526: LD_INT 34
3528: PUSH
3529: LD_VAR 0 2
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PPUSH
3542: CALL_OW 69
3546: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3547: LD_VAR 0 6
3551: PUSH
3552: LD_INT 0
3554: GREATER
3555: PUSH
3556: LD_VAR 0 3
3560: PPUSH
3561: CALL_OW 435
3565: AND
3566: PUSH
3567: LD_VAR 0 7
3571: PUSH
3572: LD_INT 0
3574: GREATER
3575: AND
3576: IFFALSE 3625
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3578: LD_VAR 0 6
3582: PUSH
3583: LD_INT 1
3585: ARRAY
3586: PPUSH
3587: LD_VAR 0 7
3591: PUSH
3592: LD_INT 1
3594: ARRAY
3595: PPUSH
3596: LD_VAR 0 7
3600: PUSH
3601: LD_INT 2
3603: ARRAY
3604: PPUSH
3605: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3609: LD_VAR 0 6
3613: PUSH
3614: LD_INT 1
3616: ARRAY
3617: PPUSH
3618: LD_INT 100
3620: PPUSH
3621: CALL_OW 240
// end ; end ;
3625: LD_VAR 0 4
3629: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3630: LD_INT 0
3632: PPUSH
3633: PPUSH
// for i = 1 to vehCount do
3634: LD_ADDR_VAR 0 9
3638: PUSH
3639: DOUBLE
3640: LD_INT 1
3642: DEC
3643: ST_TO_ADDR
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_TO
3650: IFFALSE 3697
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3652: LD_VAR 0 2
3656: PPUSH
3657: LD_VAR 0 7
3661: PPUSH
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_VAR 0 6
3671: PPUSH
3672: LD_VAR 0 4
3676: PUSH
3677: LD_INT 1
3679: PPUSH
3680: LD_VAR 0 4
3684: PPUSH
3685: CALL_OW 12
3689: ARRAY
3690: PPUSH
3691: CALL_OW 185
3695: GO 3649
3697: POP
3698: POP
// end ;
3699: LD_VAR 0 8
3703: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3704: LD_INT 0
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3712: LD_ADDR_VAR 0 6
3716: PUSH
3717: LD_INT 22
3719: PUSH
3720: LD_VAR 0 1
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: PUSH
3729: LD_INT 25
3731: PUSH
3732: LD_INT 9
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: PPUSH
3743: CALL_OW 69
3747: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3748: LD_ADDR_VAR 0 7
3752: PUSH
3753: LD_INT 81
3755: PUSH
3756: LD_VAR 0 1
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: PUSH
3765: LD_INT 3
3767: PUSH
3768: LD_INT 21
3770: PUSH
3771: LD_INT 3
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PPUSH
3786: CALL_OW 69
3790: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3791: LD_ADDR_VAR 0 4
3795: PUSH
3796: LD_INT 1
3798: PPUSH
3799: LD_INT 3
3801: PPUSH
3802: CALL_OW 12
3806: ST_TO_ADDR
// for i = 1 to list do
3807: LD_ADDR_VAR 0 5
3811: PUSH
3812: DOUBLE
3813: LD_INT 1
3815: DEC
3816: ST_TO_ADDR
3817: LD_VAR 0 6
3821: PUSH
3822: FOR_TO
3823: IFFALSE 4025
// for ta in filter do
3825: LD_ADDR_VAR 0 3
3829: PUSH
3830: LD_VAR 0 7
3834: PUSH
3835: FOR_IN
3836: IFFALSE 4021
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3838: LD_VAR 0 6
3842: PUSH
3843: LD_VAR 0 5
3847: ARRAY
3848: PPUSH
3849: LD_VAR 0 3
3853: PPUSH
3854: CALL_OW 296
3858: PUSH
3859: LD_INT 15
3861: LESSEQUAL
3862: IFFALSE 4019
// begin case c of 1 :
3864: LD_VAR 0 4
3868: PUSH
3869: LD_INT 1
3871: DOUBLE
3872: EQUAL
3873: IFTRUE 3877
3875: GO 3915
3877: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3878: LD_VAR 0 6
3882: PUSH
3883: LD_VAR 0 5
3887: ARRAY
3888: PPUSH
3889: LD_VAR 0 3
3893: PPUSH
3894: CALL_OW 250
3898: PPUSH
3899: LD_VAR 0 3
3903: PPUSH
3904: CALL_OW 251
3908: PPUSH
3909: CALL_OW 154
3913: GO 4019
3915: LD_INT 2
3917: DOUBLE
3918: EQUAL
3919: IFTRUE 3923
3921: GO 3987
3923: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3924: LD_VAR 0 6
3928: PUSH
3929: LD_VAR 0 5
3933: ARRAY
3934: PPUSH
3935: LD_VAR 0 3
3939: PPUSH
3940: CALL_OW 250
3944: PUSH
3945: LD_INT 1
3947: NEG
3948: PPUSH
3949: LD_INT 1
3951: PPUSH
3952: CALL_OW 12
3956: PLUS
3957: PPUSH
3958: LD_VAR 0 3
3962: PPUSH
3963: CALL_OW 251
3967: PUSH
3968: LD_INT 1
3970: NEG
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: CALL_OW 12
3979: PLUS
3980: PPUSH
3981: CALL_OW 153
3985: GO 4019
3987: LD_INT 3
3989: DOUBLE
3990: EQUAL
3991: IFTRUE 3995
3993: GO 4018
3995: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3996: LD_VAR 0 6
4000: PUSH
4001: LD_VAR 0 5
4005: ARRAY
4006: PPUSH
4007: LD_VAR 0 3
4011: PPUSH
4012: CALL_OW 115
4016: GO 4019
4018: POP
// end ; end ;
4019: GO 3835
4021: POP
4022: POP
4023: GO 3822
4025: POP
4026: POP
// end ;
4027: LD_VAR 0 2
4031: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4032: LD_INT 0
4034: PPUSH
4035: PPUSH
4036: PPUSH
4037: PPUSH
4038: PPUSH
4039: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4040: LD_ADDR_VAR 0 7
4044: PUSH
4045: LD_VAR 0 2
4049: PPUSH
4050: LD_INT 22
4052: PUSH
4053: LD_VAR 0 1
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 21
4064: PUSH
4065: LD_INT 2
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 34
4074: PUSH
4075: LD_INT 52
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: PPUSH
4087: CALL_OW 70
4091: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4092: LD_ADDR_VAR 0 8
4096: PUSH
4097: LD_VAR 0 2
4101: PPUSH
4102: LD_INT 22
4104: PUSH
4105: LD_VAR 0 1
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 21
4116: PUSH
4117: LD_INT 3
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: PUSH
4124: LD_INT 3
4126: PUSH
4127: LD_INT 24
4129: PUSH
4130: LD_INT 1000
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: LIST
4145: PUSH
4146: EMPTY
4147: LIST
4148: PPUSH
4149: CALL_OW 70
4153: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4154: LD_VAR 0 8
4158: PUSH
4159: LD_INT 0
4161: GREATER
4162: PUSH
4163: LD_VAR 0 7
4167: PPUSH
4168: LD_INT 24
4170: PUSH
4171: LD_INT 750
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PPUSH
4178: CALL_OW 72
4182: PUSH
4183: LD_INT 0
4185: GREATER
4186: AND
4187: IFFALSE 4207
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4189: LD_VAR 0 7
4193: PPUSH
4194: LD_VAR 0 8
4198: PUSH
4199: LD_INT 1
4201: ARRAY
4202: PPUSH
4203: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4207: LD_VAR 0 7
4211: PUSH
4212: LD_INT 0
4214: GREATER
4215: PUSH
4216: LD_VAR 0 8
4220: PUSH
4221: LD_INT 0
4223: EQUAL
4224: AND
4225: PUSH
4226: LD_EXP 10
4230: PUSH
4231: LD_INT 0
4233: GREATER
4234: AND
4235: IFFALSE 4282
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4237: LD_VAR 0 7
4241: PPUSH
4242: LD_EXP 10
4246: PUSH
4247: LD_INT 1
4249: ARRAY
4250: PPUSH
4251: LD_EXP 10
4255: PUSH
4256: LD_INT 2
4258: ARRAY
4259: PPUSH
4260: LD_EXP 10
4264: PUSH
4265: LD_INT 3
4267: ARRAY
4268: PPUSH
4269: LD_EXP 10
4273: PUSH
4274: LD_INT 4
4276: ARRAY
4277: PPUSH
4278: CALL_OW 567
// end ; end_of_file
4282: LD_VAR 0 3
4286: RET
// every 0 0$1 do
4287: GO 4289
4289: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4290: LD_INT 3
4292: PPUSH
4293: LD_INT 14
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: CALL 2147 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4303: LD_INT 3
4305: PPUSH
4306: LD_INT 15
4308: PPUSH
4309: LD_INT 3
4311: PPUSH
4312: CALL 2147 0 3
// end ;
4316: END
// every 0 0$1 trigger russianAI = 1 do
4317: LD_EXP 13
4321: PUSH
4322: LD_INT 1
4324: EQUAL
4325: IFFALSE 4414
4327: GO 4329
4329: DISABLE
// begin enable ;
4330: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4331: LD_INT 3
4333: PPUSH
4334: LD_INT 22
4336: PPUSH
4337: LD_INT 7
4339: PPUSH
4340: LD_EXP 10
4344: PPUSH
4345: CALL 2388 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4349: LD_INT 3
4351: PPUSH
4352: LD_INT 8
4354: PPUSH
4355: LD_INT 7
4357: PPUSH
4358: LD_INT 14
4360: PUSH
4361: LD_INT 15
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 1
4370: PPUSH
4371: LD_INT 2
4373: PPUSH
4374: CALL_OW 12
4378: ARRAY
4379: PPUSH
4380: CALL 2779 0 4
// IntBazooka ( 3 ) ;
4384: LD_INT 3
4386: PPUSH
4387: CALL 3704 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4391: LD_INT 3
4393: PPUSH
4394: LD_INT 51
4396: PPUSH
4397: LD_INT 14
4399: PPUSH
4400: CALL 3487 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4404: LD_INT 3
4406: PPUSH
4407: LD_INT 7
4409: PPUSH
4410: CALL 4032 0 2
// end ;
4414: END
// every 0 0$30 trigger russianTanks >= [ 5 , 6 , 8 , 8 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 , 3 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
4415: LD_EXP 11
4419: PUSH
4420: LD_INT 5
4422: PUSH
4423: LD_INT 6
4425: PUSH
4426: LD_INT 8
4428: PUSH
4429: LD_INT 8
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: PUSH
4438: LD_OWVAR 67
4442: ARRAY
4443: GREATEREQUAL
4444: PUSH
4445: LD_EXP 12
4449: PUSH
4450: LD_INT 1
4452: PUSH
4453: LD_INT 2
4455: PUSH
4456: LD_INT 3
4458: PUSH
4459: LD_INT 3
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: PUSH
4468: LD_OWVAR 67
4472: ARRAY
4473: GREATEREQUAL
4474: AND
4475: IFFALSE 4956
4477: GO 4479
4479: DISABLE
4480: LD_INT 0
4482: PPUSH
4483: PPUSH
4484: PPUSH
4485: PPUSH
// begin enable ;
4486: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
4487: LD_ADDR_VAR 0 2
4491: PUSH
4492: LD_EXP 11
4496: PUSH
4497: LD_EXP 12
4501: UNION
4502: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
4503: LD_ADDR_EXP 11
4507: PUSH
4508: LD_EXP 11
4512: PUSH
4513: LD_VAR 0 2
4517: DIFF
4518: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
4519: LD_ADDR_EXP 12
4523: PUSH
4524: LD_EXP 12
4528: PUSH
4529: LD_VAR 0 2
4533: DIFF
4534: ST_TO_ADDR
// if IsOk ( ruTeleport ) then
4535: LD_INT 116
4537: PPUSH
4538: CALL_OW 302
4542: IFFALSE 4606
// begin for j in tmp do
4544: LD_ADDR_VAR 0 1
4548: PUSH
4549: LD_VAR 0 2
4553: PUSH
4554: FOR_IN
4555: IFFALSE 4597
// if Prob ( 40 ) then
4557: LD_INT 40
4559: PPUSH
4560: CALL_OW 13
4564: IFFALSE 4580
// ComEnterUnit ( j , ruTeleport ) else
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_INT 116
4573: PPUSH
4574: CALL_OW 120
4578: GO 4595
// ComAgressiveMove ( j , 117 , 92 ) ;
4580: LD_VAR 0 1
4584: PPUSH
4585: LD_INT 117
4587: PPUSH
4588: LD_INT 92
4590: PPUSH
4591: CALL_OW 114
4595: GO 4554
4597: POP
4598: POP
// wait ( 0 0$14 ) ;
4599: LD_INT 490
4601: PPUSH
4602: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4606: LD_INT 35
4608: PPUSH
4609: CALL_OW 67
// for j in tmp do
4613: LD_ADDR_VAR 0 1
4617: PUSH
4618: LD_VAR 0 2
4622: PUSH
4623: FOR_IN
4624: IFFALSE 4947
// begin if IsDead ( j ) then
4626: LD_VAR 0 1
4630: PPUSH
4631: CALL_OW 301
4635: IFFALSE 4653
// tmp := tmp diff j ;
4637: LD_ADDR_VAR 0 2
4641: PUSH
4642: LD_VAR 0 2
4646: PUSH
4647: LD_VAR 0 1
4651: DIFF
4652: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
4653: LD_ADDR_VAR 0 3
4657: PUSH
4658: LD_INT 81
4660: PUSH
4661: LD_INT 3
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PPUSH
4668: CALL_OW 69
4672: PPUSH
4673: LD_VAR 0 1
4677: PPUSH
4678: CALL_OW 74
4682: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
4683: LD_ADDR_VAR 0 4
4687: PUSH
4688: LD_INT 81
4690: PUSH
4691: LD_INT 3
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: LD_INT 21
4700: PUSH
4701: LD_INT 1
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: PUSH
4708: EMPTY
4709: LIST
4710: LIST
4711: PUSH
4712: EMPTY
4713: LIST
4714: PPUSH
4715: CALL_OW 69
4719: PPUSH
4720: LD_VAR 0 1
4724: PPUSH
4725: CALL_OW 74
4729: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
4730: LD_VAR 0 1
4734: PPUSH
4735: CALL_OW 264
4739: PUSH
4740: LD_INT 49
4742: EQUAL
4743: IFFALSE 4879
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
4745: LD_VAR 0 2
4749: PPUSH
4750: LD_INT 3
4752: PUSH
4753: LD_INT 34
4755: PUSH
4756: LD_INT 49
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 72
4771: PUSH
4772: LD_INT 1
4774: GREATER
4775: PUSH
4776: LD_VAR 0 2
4780: PPUSH
4781: LD_INT 3
4783: PUSH
4784: LD_INT 34
4786: PUSH
4787: LD_INT 49
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PPUSH
4798: CALL_OW 72
4802: AND
4803: IFFALSE 4853
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
4805: LD_VAR 0 1
4809: PPUSH
4810: LD_VAR 0 2
4814: PPUSH
4815: LD_INT 3
4817: PUSH
4818: LD_INT 34
4820: PUSH
4821: LD_INT 49
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PPUSH
4832: CALL_OW 72
4836: PPUSH
4837: LD_VAR 0 1
4841: PPUSH
4842: CALL_OW 74
4846: PPUSH
4847: CALL_OW 112
4851: GO 4877
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
4853: LD_VAR 0 1
4857: PPUSH
4858: LD_VAR 0 3
4862: PPUSH
4863: LD_VAR 0 1
4867: PPUSH
4868: CALL_OW 74
4872: PPUSH
4873: CALL_OW 112
// end else
4877: GO 4945
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
4879: LD_VAR 0 1
4883: PPUSH
4884: LD_VAR 0 4
4888: PPUSH
4889: CALL_OW 296
4893: PUSH
4894: LD_VAR 0 1
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: CALL_OW 296
4908: PUSH
4909: LD_INT 2
4911: PLUS
4912: LESS
4913: IFFALSE 4931
// ComAttackUnit ( j , target2 ) else
4915: LD_VAR 0 1
4919: PPUSH
4920: LD_VAR 0 4
4924: PPUSH
4925: CALL_OW 115
4929: GO 4945
// ComAttackUnit ( j , target1 ) ;
4931: LD_VAR 0 1
4935: PPUSH
4936: LD_VAR 0 3
4940: PPUSH
4941: CALL_OW 115
// end ; end ;
4945: GO 4623
4947: POP
4948: POP
// until not tmp ;
4949: LD_VAR 0 2
4953: NOT
4954: IFFALSE 4606
// end ;
4956: PPOPN 4
4958: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4959: LD_INT 22
4961: PPUSH
4962: CALL_OW 303
4966: PUSH
4967: LD_INT 22
4969: PPUSH
4970: CALL_OW 255
4974: PUSH
4975: LD_INT 1
4977: EQUAL
4978: OR
4979: IFFALSE 4994
4981: GO 4983
4983: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4984: LD_INT 3
4986: PPUSH
4987: LD_INT 22
4989: PPUSH
4990: CALL 3323 0 2
4994: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4995: LD_EXP 13
4999: PUSH
5000: LD_INT 1
5002: EQUAL
5003: PUSH
5004: LD_INT 22
5006: PUSH
5007: LD_INT 3
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 21
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 50
5026: PUSH
5027: EMPTY
5028: LIST
5029: PUSH
5030: LD_INT 33
5032: PUSH
5033: LD_INT 3
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 2
5042: PUSH
5043: LD_INT 34
5045: PUSH
5046: LD_INT 46
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PUSH
5053: LD_INT 34
5055: PUSH
5056: LD_INT 45
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 34
5065: PUSH
5066: LD_INT 44
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 34
5075: PUSH
5076: LD_INT 49
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 34
5085: PUSH
5086: LD_INT 47
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 69
5112: PUSH
5113: LD_INT 3
5115: LESS
5116: AND
5117: IFFALSE 5312
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// if russianRocketsDisabled then
5123: LD_EXP 14
5127: IFFALSE 5188
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: LD_INT 5
5137: PUSH
5138: LD_INT 6
5140: PUSH
5141: LD_INT 8
5143: PUSH
5144: LD_INT 8
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: PUSH
5153: LD_OWVAR 67
5157: ARRAY
5158: PPUSH
5159: LD_INT 46
5161: PUSH
5162: LD_INT 45
5164: PUSH
5165: LD_INT 44
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PPUSH
5173: LD_INT 3
5175: PPUSH
5176: LD_INT 3
5178: PPUSH
5179: LD_INT 24
5181: PPUSH
5182: CALL 3630 0 7
5186: GO 5249
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
5188: LD_INT 3
5190: PPUSH
5191: LD_INT 1
5193: PPUSH
5194: LD_INT 5
5196: PUSH
5197: LD_INT 6
5199: PUSH
5200: LD_INT 8
5202: PUSH
5203: LD_INT 8
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: PUSH
5212: LD_OWVAR 67
5216: ARRAY
5217: PPUSH
5218: LD_INT 46
5220: PUSH
5221: LD_INT 45
5223: PUSH
5224: LD_INT 44
5226: PUSH
5227: LD_INT 47
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: PPUSH
5236: LD_INT 3
5238: PPUSH
5239: LD_INT 3
5241: PPUSH
5242: LD_INT 24
5244: PPUSH
5245: CALL 3630 0 7
// if russianTimeLapsers = 0 then
5249: LD_EXP 12
5253: PUSH
5254: LD_INT 0
5256: EQUAL
5257: IFFALSE 5312
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5259: LD_INT 3
5261: PPUSH
5262: LD_INT 40
5264: PPUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: LD_INT 3
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PPUSH
5289: LD_INT 49
5291: PUSH
5292: LD_INT 49
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PPUSH
5299: LD_INT 3
5301: PPUSH
5302: LD_INT 3
5304: PPUSH
5305: LD_INT 24
5307: PPUSH
5308: CALL 3630 0 7
// end ;
5312: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5313: LD_EXP 18
5317: PUSH
5318: LD_INT 22
5320: PUSH
5321: LD_INT 1
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 21
5330: PUSH
5331: LD_INT 2
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 58
5340: PUSH
5341: EMPTY
5342: LIST
5343: PUSH
5344: LD_INT 33
5346: PUSH
5347: LD_INT 1
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: LD_INT 91
5356: PUSH
5357: LD_EXP 18
5361: PUSH
5362: LD_INT 45
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: PPUSH
5377: CALL_OW 69
5381: AND
5382: IFFALSE 5486
5384: GO 5386
5386: DISABLE
// begin wait ( 0 0$5 ) ;
5387: LD_INT 175
5389: PPUSH
5390: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5394: LD_EXP 18
5398: PPUSH
5399: LD_INT 22
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 21
5411: PUSH
5412: LD_INT 2
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 58
5421: PUSH
5422: EMPTY
5423: LIST
5424: PUSH
5425: LD_INT 33
5427: PUSH
5428: LD_INT 1
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: LD_INT 91
5437: PUSH
5438: LD_EXP 18
5442: PUSH
5443: LD_INT 45
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5471: LD_EXP 18
5475: PPUSH
5476: LD_INT 127
5478: PPUSH
5479: LD_INT 63
5481: PPUSH
5482: CALL_OW 171
// end ; end_of_file
5486: END
// every 1 do var dec1 , dec2 ;
5487: GO 5489
5489: DISABLE
5490: LD_INT 0
5492: PPUSH
5493: PPUSH
// begin InGameOn ;
5494: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5498: LD_INT 48
5500: PPUSH
5501: LD_STRING deltakappa
5503: PPUSH
5504: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5508: LD_INT 95
5510: PPUSH
5511: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5515: LD_INT 95
5517: PPUSH
5518: LD_INT 30
5520: PPUSH
5521: LD_INT 11
5523: PPUSH
5524: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5528: LD_INT 30
5530: PPUSH
5531: LD_INT 11
5533: PPUSH
5534: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5538: LD_EXP 5
5542: PPUSH
5543: LD_STRING D1-Pow-1
5545: PPUSH
5546: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5550: LD_EXP 1
5554: PPUSH
5555: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5559: LD_EXP 1
5563: PPUSH
5564: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5568: LD_EXP 1
5572: PPUSH
5573: LD_STRING D1-JMM-1
5575: PPUSH
5576: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5580: LD_EXP 5
5584: PPUSH
5585: LD_STRING D1-Pow-2
5587: PPUSH
5588: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5592: LD_EXP 1
5596: PPUSH
5597: LD_STRING D1-JMM-2
5599: PPUSH
5600: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5604: LD_EXP 1
5608: PPUSH
5609: LD_INT 95
5611: PPUSH
5612: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5616: LD_STRING M1
5618: PPUSH
5619: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5623: LD_INT 35
5625: PPUSH
5626: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5630: LD_EXP 1
5634: PPUSH
5635: LD_INT 95
5637: PPUSH
5638: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5642: LD_INT 95
5644: PPUSH
5645: LD_INT 51
5647: PPUSH
5648: LD_INT 21
5650: PPUSH
5651: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5655: LD_INT 95
5657: PPUSH
5658: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5662: LD_INT 95
5664: PPUSH
5665: LD_INT 5
5667: PPUSH
5668: CALL_OW 308
5672: IFFALSE 5623
// if JMMGirl = 1 then
5674: LD_EXP 7
5678: PUSH
5679: LD_INT 1
5681: EQUAL
5682: IFFALSE 5995
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5684: LD_EXP 2
5688: PPUSH
5689: LD_STRING D2J-Joan-1
5691: PPUSH
5692: CALL_OW 94
// dec1 = query ( Q1 ) ;
5696: LD_ADDR_VAR 0 1
5700: PUSH
5701: LD_STRING Q1
5703: PPUSH
5704: CALL_OW 97
5708: ST_TO_ADDR
// if dec1 = 1 then
5709: LD_VAR 0 1
5713: PUSH
5714: LD_INT 1
5716: EQUAL
5717: IFFALSE 5971
// begin ComExitVehicle ( JMM ) ;
5719: LD_EXP 1
5723: PPUSH
5724: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5728: LD_EXP 1
5732: PPUSH
5733: LD_STRING D2J-JMM-1
5735: PPUSH
5736: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5740: LD_EXP 2
5744: PPUSH
5745: LD_STRING D2J-Joan-2
5747: PPUSH
5748: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5752: LD_EXP 1
5756: PPUSH
5757: LD_STRING D2J-JMM-2
5759: PPUSH
5760: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5764: LD_EXP 2
5768: PPUSH
5769: LD_STRING D2J-Joan-3
5771: PPUSH
5772: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5776: LD_EXP 5
5780: PPUSH
5781: LD_STRING DPowell-Pow-1
5783: PPUSH
5784: CALL_OW 94
// dec2 = query ( Q2J ) ;
5788: LD_ADDR_VAR 0 2
5792: PUSH
5793: LD_STRING Q2J
5795: PPUSH
5796: CALL_OW 97
5800: ST_TO_ADDR
// if dec2 = 1 then
5801: LD_VAR 0 2
5805: PUSH
5806: LD_INT 1
5808: EQUAL
5809: IFFALSE 5851
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5811: LD_EXP 1
5815: PPUSH
5816: LD_STRING D2Ja-JMM-1
5818: PPUSH
5819: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5823: LD_EXP 2
5827: PPUSH
5828: LD_STRING D2Ja-Joan-1
5830: PPUSH
5831: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5835: LD_EXP 1
5839: PPUSH
5840: LD_STRING D2Ja-JMM-2
5842: PPUSH
5843: CALL_OW 88
// InGameOff ;
5847: CALL_OW 9
// end ; if dec2 = 2 then
5851: LD_VAR 0 2
5855: PUSH
5856: LD_INT 2
5858: EQUAL
5859: IFFALSE 5935
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5861: LD_EXP 1
5865: PPUSH
5866: LD_STRING D2Jb-JMM-1
5868: PPUSH
5869: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5873: LD_EXP 2
5877: PPUSH
5878: LD_STRING D2Jb-Joan-1
5880: PPUSH
5881: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5885: LD_EXP 1
5889: PPUSH
5890: LD_STRING D2Jb-JMM-2
5892: PPUSH
5893: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5897: LD_EXP 2
5901: PPUSH
5902: LD_STRING D2Jb-Joan-2
5904: PPUSH
5905: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5909: LD_EXP 1
5913: PPUSH
5914: LD_STRING D2Jb-JMM-3
5916: PPUSH
5917: CALL_OW 88
// fastEnd = 1 ;
5921: LD_ADDR_EXP 15
5925: PUSH
5926: LD_INT 1
5928: ST_TO_ADDR
// FinishMission ;
5929: CALL 9551 0 0
// exit ;
5933: GO 6565
// end ; if dec2 = 3 then
5935: LD_VAR 0 2
5939: PUSH
5940: LD_INT 3
5942: EQUAL
5943: IFFALSE 5971
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5945: LD_EXP 2
5949: PPUSH
5950: LD_STRING D2Jc-Joan-1
5952: PPUSH
5953: CALL_OW 94
// fastEnd = 1 ;
5957: LD_ADDR_EXP 15
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// FinishMission ;
5965: CALL 9551 0 0
// exit ;
5969: GO 6565
// end ; end ; if dec1 = 2 then
5971: LD_VAR 0 1
5975: PUSH
5976: LD_INT 2
5978: EQUAL
5979: IFFALSE 5995
// begin fastEnd = 1 ;
5981: LD_ADDR_EXP 15
5985: PUSH
5986: LD_INT 1
5988: ST_TO_ADDR
// FinishMission ;
5989: CALL 9551 0 0
// exit ;
5993: GO 6565
// end ; end ; if JMMGirl = 2 then
5995: LD_EXP 7
5999: PUSH
6000: LD_INT 2
6002: EQUAL
6003: IFFALSE 6328
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
6005: LD_EXP 3
6009: PPUSH
6010: LD_STRING D2L-Lisa-1
6012: PPUSH
6013: CALL_OW 94
// dec1 = query ( Q1 ) ;
6017: LD_ADDR_VAR 0 1
6021: PUSH
6022: LD_STRING Q1
6024: PPUSH
6025: CALL_OW 97
6029: ST_TO_ADDR
// if dec1 = 1 then
6030: LD_VAR 0 1
6034: PUSH
6035: LD_INT 1
6037: EQUAL
6038: IFFALSE 6304
// begin ComExitVehicle ( JMM ) ;
6040: LD_EXP 1
6044: PPUSH
6045: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
6049: LD_EXP 1
6053: PPUSH
6054: LD_STRING D2L-JMM-1
6056: PPUSH
6057: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
6061: LD_EXP 3
6065: PPUSH
6066: LD_STRING D2L-Lisa-2
6068: PPUSH
6069: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
6073: LD_EXP 1
6077: PPUSH
6078: LD_STRING D2L-JMM-2
6080: PPUSH
6081: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
6085: LD_EXP 3
6089: PPUSH
6090: LD_STRING D2L-Lisa-3
6092: PPUSH
6093: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6097: LD_EXP 5
6101: PPUSH
6102: LD_STRING DPowell-Pow-1
6104: PPUSH
6105: CALL_OW 94
// dec2 = query ( Q2L ) ;
6109: LD_ADDR_VAR 0 2
6113: PUSH
6114: LD_STRING Q2L
6116: PPUSH
6117: CALL_OW 97
6121: ST_TO_ADDR
// if dec2 = 1 then
6122: LD_VAR 0 2
6126: PUSH
6127: LD_INT 1
6129: EQUAL
6130: IFFALSE 6196
// begin Say ( JMM , D2La-JMM-1 ) ;
6132: LD_EXP 1
6136: PPUSH
6137: LD_STRING D2La-JMM-1
6139: PPUSH
6140: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6144: LD_EXP 3
6148: PPUSH
6149: LD_STRING D2La-Lisa-1
6151: PPUSH
6152: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
6156: LD_EXP 1
6160: PPUSH
6161: LD_STRING D2La-JMM-2
6163: PPUSH
6164: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
6168: LD_EXP 3
6172: PPUSH
6173: LD_STRING D2La-Lisa-2
6175: PPUSH
6176: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
6180: LD_EXP 1
6184: PPUSH
6185: LD_STRING D2La-JMM-3
6187: PPUSH
6188: CALL_OW 88
// InGameOff ;
6192: CALL_OW 9
// end ; if dec2 = 2 then
6196: LD_VAR 0 2
6200: PUSH
6201: LD_INT 2
6203: EQUAL
6204: IFFALSE 6268
// begin Say ( JMM , D2Lb-JMM-1 ) ;
6206: LD_EXP 1
6210: PPUSH
6211: LD_STRING D2Lb-JMM-1
6213: PPUSH
6214: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
6218: LD_EXP 3
6222: PPUSH
6223: LD_STRING D2Lb-Lisa-1
6225: PPUSH
6226: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
6230: LD_EXP 1
6234: PPUSH
6235: LD_STRING D2Lb-JMM-2
6237: PPUSH
6238: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
6242: LD_EXP 3
6246: PPUSH
6247: LD_STRING D2Lb-Lisa-2
6249: PPUSH
6250: CALL_OW 94
// fastEnd = 1 ;
6254: LD_ADDR_EXP 15
6258: PUSH
6259: LD_INT 1
6261: ST_TO_ADDR
// FinishMission ;
6262: CALL 9551 0 0
// exit ;
6266: GO 6565
// end ; if dec2 = 3 then
6268: LD_VAR 0 2
6272: PUSH
6273: LD_INT 3
6275: EQUAL
6276: IFFALSE 6304
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6278: LD_EXP 3
6282: PPUSH
6283: LD_STRING D2Lc-Lisa-1
6285: PPUSH
6286: CALL_OW 94
// fastEnd = 1 ;
6290: LD_ADDR_EXP 15
6294: PUSH
6295: LD_INT 1
6297: ST_TO_ADDR
// FinishMission ;
6298: CALL 9551 0 0
// exit ;
6302: GO 6565
// end ; end ; if dec1 = 2 then
6304: LD_VAR 0 1
6308: PUSH
6309: LD_INT 2
6311: EQUAL
6312: IFFALSE 6328
// begin fastEnd = 1 ;
6314: LD_ADDR_EXP 15
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// FinishMission ;
6322: CALL 9551 0 0
// exit ;
6326: GO 6565
// end ; end ; if JMMGirl = 3 then
6328: LD_EXP 7
6332: PUSH
6333: LD_INT 3
6335: EQUAL
6336: IFFALSE 6565
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6338: LD_EXP 4
6342: PPUSH
6343: LD_STRING D2X-Con-1
6345: PPUSH
6346: CALL_OW 94
// dec1 = query ( Q1 ) ;
6350: LD_ADDR_VAR 0 1
6354: PUSH
6355: LD_STRING Q1
6357: PPUSH
6358: CALL_OW 97
6362: ST_TO_ADDR
// if dec1 = 1 then
6363: LD_VAR 0 1
6367: PUSH
6368: LD_INT 1
6370: EQUAL
6371: IFFALSE 6541
// begin ComExitVehicle ( JMM ) ;
6373: LD_EXP 1
6377: PPUSH
6378: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6382: LD_EXP 1
6386: PPUSH
6387: LD_STRING D2X-JMM-1
6389: PPUSH
6390: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6394: LD_EXP 4
6398: PPUSH
6399: LD_STRING D2X-Con-2
6401: PPUSH
6402: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6406: LD_EXP 5
6410: PPUSH
6411: LD_STRING DPowell-Pow-1
6413: PPUSH
6414: CALL_OW 94
// dec2 = query ( Q2X ) ;
6418: LD_ADDR_VAR 0 2
6422: PUSH
6423: LD_STRING Q2X
6425: PPUSH
6426: CALL_OW 97
6430: ST_TO_ADDR
// if dec2 = 1 then
6431: LD_VAR 0 2
6435: PUSH
6436: LD_INT 1
6438: EQUAL
6439: IFFALSE 6457
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6441: LD_EXP 1
6445: PPUSH
6446: LD_STRING D2Xa-JMM-1
6448: PPUSH
6449: CALL_OW 88
// InGameOff ;
6453: CALL_OW 9
// end ; if dec2 = 2 then
6457: LD_VAR 0 2
6461: PUSH
6462: LD_INT 2
6464: EQUAL
6465: IFFALSE 6505
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6467: LD_EXP 1
6471: PPUSH
6472: LD_STRING D2Xb-JMM-1
6474: PPUSH
6475: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6479: LD_EXP 4
6483: PPUSH
6484: LD_STRING D2Xb-Con-1
6486: PPUSH
6487: CALL_OW 94
// fastEnd = 1 ;
6491: LD_ADDR_EXP 15
6495: PUSH
6496: LD_INT 1
6498: ST_TO_ADDR
// FinishMission ;
6499: CALL 9551 0 0
// exit ;
6503: GO 6565
// end ; if dec2 = 3 then
6505: LD_VAR 0 2
6509: PUSH
6510: LD_INT 3
6512: EQUAL
6513: IFFALSE 6541
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6515: LD_EXP 4
6519: PPUSH
6520: LD_STRING D2Xc-Con-1
6522: PPUSH
6523: CALL_OW 94
// fastEnd = 1 ;
6527: LD_ADDR_EXP 15
6531: PUSH
6532: LD_INT 1
6534: ST_TO_ADDR
// FinishMission ;
6535: CALL 9551 0 0
// exit ;
6539: GO 6565
// end ; end ; if dec1 = 2 then
6541: LD_VAR 0 1
6545: PUSH
6546: LD_INT 2
6548: EQUAL
6549: IFFALSE 6565
// begin fastEnd = 1 ;
6551: LD_ADDR_EXP 15
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// FinishMission ;
6559: CALL 9551 0 0
// exit ;
6563: GO 6565
// end ; end ; end ;
6565: PPOPN 2
6567: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6568: LD_EXP 1
6572: PPUSH
6573: LD_INT 6
6575: PPUSH
6576: CALL_OW 308
6580: IFFALSE 7322
6582: GO 6584
6584: DISABLE
// begin InGameOn ;
6585: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6589: LD_INT 35
6591: PPUSH
6592: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6596: LD_EXP 1
6600: PPUSH
6601: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6605: LD_EXP 1
6609: PPUSH
6610: LD_INT 62
6612: PPUSH
6613: LD_INT 104
6615: PPUSH
6616: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6620: LD_EXP 1
6624: PPUSH
6625: LD_EXP 2
6629: PPUSH
6630: CALL_OW 296
6634: PUSH
6635: LD_INT 4
6637: LESS
6638: PUSH
6639: LD_EXP 1
6643: PPUSH
6644: LD_EXP 3
6648: PPUSH
6649: CALL_OW 296
6653: PUSH
6654: LD_INT 4
6656: LESS
6657: OR
6658: PUSH
6659: LD_EXP 1
6663: PPUSH
6664: LD_EXP 4
6668: PPUSH
6669: CALL_OW 296
6673: PUSH
6674: LD_INT 4
6676: LESS
6677: OR
6678: IFFALSE 6589
// case JMMGirl of 1 :
6680: LD_EXP 7
6684: PUSH
6685: LD_INT 1
6687: DOUBLE
6688: EQUAL
6689: IFTRUE 6693
6691: GO 6905
6693: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6694: LD_INT 22
6696: PUSH
6697: LD_INT 4
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PPUSH
6704: CALL_OW 69
6708: PPUSH
6709: LD_INT 1
6711: PPUSH
6712: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6716: LD_EXP 2
6720: PPUSH
6721: LD_EXP 1
6725: PPUSH
6726: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6730: LD_EXP 1
6734: PPUSH
6735: LD_EXP 2
6739: PPUSH
6740: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6744: LD_EXP 2
6748: PUSH
6749: LD_EXP 1
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PPUSH
6758: CALL_OW 87
// wait ( 0 0$1 ) ;
6762: LD_INT 35
6764: PPUSH
6765: CALL_OW 67
// DialogueOn ;
6769: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6773: LD_EXP 2
6777: PPUSH
6778: LD_STRING D3J-Joan-1
6780: PPUSH
6781: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6785: LD_EXP 1
6789: PPUSH
6790: LD_STRING D3J-JMM-1
6792: PPUSH
6793: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6797: LD_EXP 2
6801: PPUSH
6802: LD_STRING D3J-Joan-2
6804: PPUSH
6805: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6809: LD_EXP 1
6813: PPUSH
6814: LD_STRING D3J-JMM-2
6816: PPUSH
6817: CALL_OW 88
// wait ( 0 0$1 ) ;
6821: LD_INT 35
6823: PPUSH
6824: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6828: LD_EXP 1
6832: PPUSH
6833: LD_STRING D4-JMM-1
6835: PPUSH
6836: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6840: LD_EXP 2
6844: PPUSH
6845: LD_STRING D4-Joan-1
6847: PPUSH
6848: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6852: LD_EXP 1
6856: PPUSH
6857: LD_STRING D4-JMM-2
6859: PPUSH
6860: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6864: LD_EXP 2
6868: PPUSH
6869: LD_STRING D4-Joan-2
6871: PPUSH
6872: CALL_OW 88
// DialogueOff ;
6876: CALL_OW 7
// InGameOff ;
6880: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6884: LD_STRING M2J
6886: PPUSH
6887: CALL_OW 337
// SaveForQuickRestart ;
6891: CALL_OW 22
// russianAI = 1 ;
6895: LD_ADDR_EXP 13
6899: PUSH
6900: LD_INT 1
6902: ST_TO_ADDR
// end ; 2 :
6903: GO 7322
6905: LD_INT 2
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 7125
6913: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6914: LD_INT 22
6916: PUSH
6917: LD_INT 4
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: PPUSH
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6936: LD_EXP 3
6940: PPUSH
6941: LD_EXP 1
6945: PPUSH
6946: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6950: LD_EXP 1
6954: PPUSH
6955: LD_EXP 3
6959: PPUSH
6960: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6964: LD_EXP 3
6968: PUSH
6969: LD_EXP 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PPUSH
6978: CALL_OW 87
// wait ( 0 0$1 ) ;
6982: LD_INT 35
6984: PPUSH
6985: CALL_OW 67
// DialogueOn ;
6989: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6993: LD_EXP 3
6997: PPUSH
6998: LD_STRING D3L-Lisa-1
7000: PPUSH
7001: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
7005: LD_EXP 1
7009: PPUSH
7010: LD_STRING D3L-JMM-1
7012: PPUSH
7013: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
7017: LD_EXP 3
7021: PPUSH
7022: LD_STRING D3L-Lisa-2
7024: PPUSH
7025: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
7029: LD_EXP 1
7033: PPUSH
7034: LD_STRING D3L-JMM-2
7036: PPUSH
7037: CALL_OW 88
// wait ( 0 0$1 ) ;
7041: LD_INT 35
7043: PPUSH
7044: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7048: LD_EXP 1
7052: PPUSH
7053: LD_STRING D4-JMM-1
7055: PPUSH
7056: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
7060: LD_EXP 3
7064: PPUSH
7065: LD_STRING D4-Lisa-1
7067: PPUSH
7068: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7072: LD_EXP 1
7076: PPUSH
7077: LD_STRING D4-JMM-1
7079: PPUSH
7080: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
7084: LD_EXP 3
7088: PPUSH
7089: LD_STRING D4-Lisa-2
7091: PPUSH
7092: CALL_OW 88
// DialogueOff ;
7096: CALL_OW 7
// InGameOff ;
7100: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
7104: LD_STRING M2L
7106: PPUSH
7107: CALL_OW 337
// SaveForQuickRestart ;
7111: CALL_OW 22
// russianAI = 1 ;
7115: LD_ADDR_EXP 13
7119: PUSH
7120: LD_INT 1
7122: ST_TO_ADDR
// end ; 3 :
7123: GO 7322
7125: LD_INT 3
7127: DOUBLE
7128: EQUAL
7129: IFTRUE 7133
7131: GO 7321
7133: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
7134: LD_INT 22
7136: PUSH
7137: LD_INT 4
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 69
7148: PPUSH
7149: LD_INT 1
7151: PPUSH
7152: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
7156: LD_EXP 4
7160: PPUSH
7161: LD_EXP 1
7165: PPUSH
7166: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
7170: LD_EXP 1
7174: PPUSH
7175: LD_EXP 4
7179: PPUSH
7180: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7184: LD_EXP 2
7188: PUSH
7189: LD_EXP 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 87
// wait ( 0 0$1 ) ;
7202: LD_INT 35
7204: PPUSH
7205: CALL_OW 67
// DialogueOn ;
7209: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
7213: LD_EXP 4
7217: PPUSH
7218: LD_STRING D3X-Con-1
7220: PPUSH
7221: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7225: LD_EXP 1
7229: PPUSH
7230: LD_STRING D3J-JMM-1
7232: PPUSH
7233: CALL_OW 88
// wait ( 0 0$1 ) ;
7237: LD_INT 35
7239: PPUSH
7240: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7244: LD_EXP 1
7248: PPUSH
7249: LD_STRING D4-JMM-1
7251: PPUSH
7252: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7256: LD_EXP 4
7260: PPUSH
7261: LD_STRING D4-Con-1
7263: PPUSH
7264: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7268: LD_EXP 1
7272: PPUSH
7273: LD_STRING D4-JMM-2
7275: PPUSH
7276: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7280: LD_EXP 4
7284: PPUSH
7285: LD_STRING D4-Con-2
7287: PPUSH
7288: CALL_OW 88
// DialogueOff ;
7292: CALL_OW 7
// InGameOff ;
7296: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7300: LD_STRING M2X
7302: PPUSH
7303: CALL_OW 337
// SaveForQuickRestart ;
7307: CALL_OW 22
// russianAI = 1 ;
7311: LD_ADDR_EXP 13
7315: PUSH
7316: LD_INT 1
7318: ST_TO_ADDR
// end ; end ;
7319: GO 7322
7321: POP
// end ;
7322: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7323: LD_INT 32
7325: PPUSH
7326: CALL_OW 306
7330: IFFALSE 7663
7332: GO 7334
7334: DISABLE
// begin case JMMGirl of 1 :
7335: LD_EXP 7
7339: PUSH
7340: LD_INT 1
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7470
7348: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7349: LD_EXP 1
7353: PPUSH
7354: LD_STRING D6J-JMM-1
7356: PPUSH
7357: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7361: LD_STRING 13f_Denis
7363: PPUSH
7364: CALL_OW 28
7368: PUSH
7369: LD_INT 1
7371: EQUAL
7372: PUSH
7373: LD_STRING 13s_Denis
7375: PPUSH
7376: CALL_OW 28
7380: PUSH
7381: LD_INT 1
7383: EQUAL
7384: OR
7385: IFFALSE 7425
// begin Say ( Joan , D6J-Joan-1 ) ;
7387: LD_EXP 2
7391: PPUSH
7392: LD_STRING D6J-Joan-1
7394: PPUSH
7395: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7399: LD_EXP 1
7403: PPUSH
7404: LD_STRING D6J-JMM-2
7406: PPUSH
7407: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7411: LD_EXP 2
7415: PPUSH
7416: LD_STRING D6J-Joan-2
7418: PPUSH
7419: CALL_OW 88
// end else
7423: GO 7437
// begin Say ( Joan , D6J-Joan-2a ) ;
7425: LD_EXP 2
7429: PPUSH
7430: LD_STRING D6J-Joan-2a
7432: PPUSH
7433: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7437: LD_EXP 1
7441: PPUSH
7442: LD_STRING D6J-JMM-3
7444: PPUSH
7445: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7449: LD_EXP 2
7453: PPUSH
7454: LD_STRING D6J-Joan-3
7456: PPUSH
7457: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7461: LD_STRING M3
7463: PPUSH
7464: CALL_OW 337
// end ; 2 :
7468: GO 7663
7470: LD_INT 2
7472: DOUBLE
7473: EQUAL
7474: IFTRUE 7478
7476: GO 7536
7478: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7479: LD_EXP 1
7483: PPUSH
7484: LD_STRING D6L-JMM-1
7486: PPUSH
7487: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7491: LD_EXP 3
7495: PPUSH
7496: LD_STRING D6L-Lisa-1
7498: PPUSH
7499: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7503: LD_EXP 1
7507: PPUSH
7508: LD_STRING D6L-JMM-2
7510: PPUSH
7511: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7515: LD_EXP 3
7519: PPUSH
7520: LD_STRING D6L-Lisa-2
7522: PPUSH
7523: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7527: LD_STRING M3
7529: PPUSH
7530: CALL_OW 337
// end ; 3 :
7534: GO 7663
7536: LD_INT 3
7538: DOUBLE
7539: EQUAL
7540: IFTRUE 7544
7542: GO 7662
7544: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7545: LD_EXP 1
7549: PPUSH
7550: LD_STRING D6X-JMM-1
7552: PPUSH
7553: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7557: LD_EXP 4
7561: PPUSH
7562: LD_STRING D6X-Con-1
7564: PPUSH
7565: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7569: LD_EXP 1
7573: PPUSH
7574: LD_STRING D6X-JMM-2
7576: PPUSH
7577: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7581: LD_EXP 4
7585: PPUSH
7586: LD_STRING D6X-Con-2
7588: PPUSH
7589: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7593: LD_EXP 1
7597: PPUSH
7598: LD_STRING D6X-JMM-3
7600: PPUSH
7601: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7605: LD_EXP 4
7609: PPUSH
7610: LD_STRING D6X-Con-3
7612: PPUSH
7613: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7617: LD_EXP 1
7621: PPUSH
7622: LD_STRING D6X-JMM-4
7624: PPUSH
7625: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7629: LD_EXP 4
7633: PPUSH
7634: LD_STRING D6X-Con-4
7636: PPUSH
7637: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7641: LD_EXP 1
7645: PPUSH
7646: LD_STRING D6X-JMM-5
7648: PPUSH
7649: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7653: LD_STRING M3
7655: PPUSH
7656: CALL_OW 337
// end ; end ;
7660: GO 7663
7662: POP
// end ;
7663: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7664: LD_INT 22
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 33
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PPUSH
7688: CALL_OW 69
7692: PPUSH
7693: CALL_OW 306
7697: IFFALSE 7843
7699: GO 7701
7701: DISABLE
// begin case JMMGirl of 1 :
7702: LD_EXP 7
7706: PUSH
7707: LD_INT 1
7709: DOUBLE
7710: EQUAL
7711: IFTRUE 7715
7713: GO 7752
7715: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7716: LD_EXP 1
7720: PPUSH
7721: LD_STRING D5-JMM-1
7723: PPUSH
7724: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7728: LD_INT 77
7730: PPUSH
7731: LD_INT 87
7733: PPUSH
7734: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7738: LD_EXP 2
7742: PPUSH
7743: LD_STRING D5-Joan-1
7745: PPUSH
7746: CALL_OW 88
// end ; 2 :
7750: GO 7843
7752: LD_INT 2
7754: DOUBLE
7755: EQUAL
7756: IFTRUE 7760
7758: GO 7797
7760: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7761: LD_EXP 1
7765: PPUSH
7766: LD_STRING D5-JMM-1
7768: PPUSH
7769: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7773: LD_INT 77
7775: PPUSH
7776: LD_INT 87
7778: PPUSH
7779: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7783: LD_EXP 3
7787: PPUSH
7788: LD_STRING D5-Lisa-1
7790: PPUSH
7791: CALL_OW 88
// end ; 3 :
7795: GO 7843
7797: LD_INT 3
7799: DOUBLE
7800: EQUAL
7801: IFTRUE 7805
7803: GO 7842
7805: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7806: LD_EXP 1
7810: PPUSH
7811: LD_STRING D5-JMM-1
7813: PPUSH
7814: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7818: LD_INT 77
7820: PPUSH
7821: LD_INT 87
7823: PPUSH
7824: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7828: LD_EXP 4
7832: PPUSH
7833: LD_STRING D5-Con-1
7835: PPUSH
7836: CALL_OW 88
// end ; end ;
7840: GO 7843
7842: POP
// end ;
7843: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7844: LD_INT 48
7846: PPUSH
7847: CALL_OW 255
7851: PUSH
7852: LD_INT 1
7854: EQUAL
7855: IFFALSE 7952
7857: GO 7859
7859: DISABLE
// begin DialogueOn ;
7860: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7864: LD_EXP 5
7868: PPUSH
7869: LD_STRING D7-Pow-1
7871: PPUSH
7872: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7876: LD_EXP 1
7880: PPUSH
7881: LD_STRING D7-JMM-1
7883: PPUSH
7884: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7888: LD_EXP 5
7892: PPUSH
7893: LD_STRING D7-Pow-2
7895: PPUSH
7896: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7900: LD_EXP 1
7904: PPUSH
7905: LD_STRING D7-JMM-2
7907: PPUSH
7908: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7912: LD_EXP 5
7916: PPUSH
7917: LD_STRING D7-Pow-3
7919: PPUSH
7920: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7924: LD_EXP 1
7928: PPUSH
7929: LD_STRING D7-JMM-3
7931: PPUSH
7932: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7936: LD_EXP 5
7940: PPUSH
7941: LD_STRING D7-Pow-4
7943: PPUSH
7944: CALL_OW 94
// DialogueOff ;
7948: CALL_OW 7
// end ; end_of_file
7952: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7953: LD_VAR 0 1
7957: PPUSH
7958: CALL_OW 255
7962: PUSH
7963: LD_INT 3
7965: EQUAL
7966: IFFALSE 8040
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7968: LD_ADDR_EXP 10
7972: PUSH
7973: LD_EXP 10
7977: PPUSH
7978: LD_INT 1
7980: PPUSH
7981: CALL_OW 3
7985: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7986: LD_ADDR_EXP 10
7990: PUSH
7991: LD_EXP 10
7995: PPUSH
7996: LD_INT 1
7998: PPUSH
7999: CALL_OW 3
8003: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
8004: LD_ADDR_EXP 10
8008: PUSH
8009: LD_EXP 10
8013: PPUSH
8014: LD_INT 1
8016: PPUSH
8017: CALL_OW 3
8021: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
8022: LD_ADDR_EXP 10
8026: PUSH
8027: LD_EXP 10
8031: PPUSH
8032: LD_INT 1
8034: PPUSH
8035: CALL_OW 3
8039: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 255
8049: PUSH
8050: LD_INT 3
8052: EQUAL
8053: PUSH
8054: LD_VAR 0 1
8058: PPUSH
8059: CALL_OW 266
8063: PUSH
8064: LD_INT 0
8066: EQUAL
8067: PUSH
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL_OW 266
8077: PUSH
8078: LD_INT 2
8080: EQUAL
8081: OR
8082: PUSH
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 266
8092: PUSH
8093: LD_INT 4
8095: EQUAL
8096: OR
8097: PUSH
8098: EMPTY
8099: LIST
8100: AND
8101: IFFALSE 8112
// ComUpgrade ( building ) ;
8103: LD_VAR 0 1
8107: PPUSH
8108: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8112: LD_VAR 0 1
8116: PPUSH
8117: CALL_OW 255
8121: PUSH
8122: LD_INT 3
8124: EQUAL
8125: PUSH
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 266
8135: PUSH
8136: LD_INT 32
8138: EQUAL
8139: AND
8140: IFFALSE 8181
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8142: LD_VAR 0 1
8146: PPUSH
8147: LD_INT 42
8149: PUSH
8150: LD_INT 43
8152: PUSH
8153: LD_INT 44
8155: PUSH
8156: LD_INT 46
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: PUSH
8165: LD_INT 1
8167: PPUSH
8168: LD_INT 4
8170: PPUSH
8171: CALL_OW 12
8175: ARRAY
8176: PPUSH
8177: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
8181: LD_VAR 0 1
8185: PPUSH
8186: CALL_OW 255
8190: PUSH
8191: LD_INT 3
8193: EQUAL
8194: PUSH
8195: LD_VAR 0 1
8199: PPUSH
8200: CALL_OW 266
8204: PUSH
8205: LD_INT 33
8207: EQUAL
8208: AND
8209: IFFALSE 8250
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_INT 42
8218: PUSH
8219: LD_INT 43
8221: PUSH
8222: LD_INT 44
8224: PUSH
8225: LD_INT 46
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 1
8236: PPUSH
8237: LD_INT 4
8239: PPUSH
8240: CALL_OW 12
8244: ARRAY
8245: PPUSH
8246: CALL_OW 208
// end ;
8250: PPOPN 1
8252: END
// on UnitDestroyed ( unit ) do begin if unit in russianTanks then
8253: LD_VAR 0 1
8257: PUSH
8258: LD_EXP 11
8262: IN
8263: IFFALSE 8281
// russianTanks := russianTanks diff unit ;
8265: LD_ADDR_EXP 11
8269: PUSH
8270: LD_EXP 11
8274: PUSH
8275: LD_VAR 0 1
8279: DIFF
8280: ST_TO_ADDR
// if unit in russianTimeLapsers then
8281: LD_VAR 0 1
8285: PUSH
8286: LD_EXP 12
8290: IN
8291: IFFALSE 8309
// russianTimeLapsers := russianTimeLapsers diff unit ;
8293: LD_ADDR_EXP 12
8297: PUSH
8298: LD_EXP 12
8302: PUSH
8303: LD_VAR 0 1
8307: DIFF
8308: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8309: LD_VAR 0 1
8313: PPUSH
8314: CALL_OW 255
8318: PUSH
8319: LD_INT 3
8321: EQUAL
8322: PUSH
8323: LD_VAR 0 1
8327: PPUSH
8328: CALL_OW 247
8332: PUSH
8333: LD_INT 3
8335: EQUAL
8336: AND
8337: IFFALSE 8801
// begin if GetBType ( unit ) in [ 31 , 32 , 36 , 0 , 24 , 17 , 25 , 19 , 20 , 18 , 21 , 23 , 16 , 6 , 29 , 26 , 30 , 28 , 27 , 33 , 2 , 4 ] then
8339: LD_VAR 0 1
8343: PPUSH
8344: CALL_OW 266
8348: PUSH
8349: LD_INT 31
8351: PUSH
8352: LD_INT 32
8354: PUSH
8355: LD_INT 36
8357: PUSH
8358: LD_INT 0
8360: PUSH
8361: LD_INT 24
8363: PUSH
8364: LD_INT 17
8366: PUSH
8367: LD_INT 25
8369: PUSH
8370: LD_INT 19
8372: PUSH
8373: LD_INT 20
8375: PUSH
8376: LD_INT 18
8378: PUSH
8379: LD_INT 21
8381: PUSH
8382: LD_INT 23
8384: PUSH
8385: LD_INT 16
8387: PUSH
8388: LD_INT 6
8390: PUSH
8391: LD_INT 29
8393: PUSH
8394: LD_INT 26
8396: PUSH
8397: LD_INT 30
8399: PUSH
8400: LD_INT 28
8402: PUSH
8403: LD_INT 27
8405: PUSH
8406: LD_INT 33
8408: PUSH
8409: LD_INT 2
8411: PUSH
8412: LD_INT 4
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: IN
8439: IFFALSE 8525
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8441: LD_ADDR_EXP 10
8445: PUSH
8446: LD_EXP 10
8450: PUSH
8451: LD_VAR 0 1
8455: PPUSH
8456: CALL_OW 266
8460: ADD
8461: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8462: LD_ADDR_EXP 10
8466: PUSH
8467: LD_EXP 10
8471: PUSH
8472: LD_VAR 0 1
8476: PPUSH
8477: CALL_OW 250
8481: ADD
8482: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8483: LD_ADDR_EXP 10
8487: PUSH
8488: LD_EXP 10
8492: PUSH
8493: LD_VAR 0 1
8497: PPUSH
8498: CALL_OW 251
8502: ADD
8503: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8504: LD_ADDR_EXP 10
8508: PUSH
8509: LD_EXP 10
8513: PUSH
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 254
8523: ADD
8524: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 266
8534: PUSH
8535: LD_INT 1
8537: EQUAL
8538: IFFALSE 8617
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8540: LD_ADDR_EXP 10
8544: PUSH
8545: LD_EXP 10
8549: PUSH
8550: LD_INT 0
8552: ADD
8553: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8554: LD_ADDR_EXP 10
8558: PUSH
8559: LD_EXP 10
8563: PUSH
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 250
8573: ADD
8574: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8575: LD_ADDR_EXP 10
8579: PUSH
8580: LD_EXP 10
8584: PUSH
8585: LD_VAR 0 1
8589: PPUSH
8590: CALL_OW 251
8594: ADD
8595: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8596: LD_ADDR_EXP 10
8600: PUSH
8601: LD_EXP 10
8605: PUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 254
8615: ADD
8616: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8617: LD_VAR 0 1
8621: PPUSH
8622: CALL_OW 266
8626: PUSH
8627: LD_INT 3
8629: EQUAL
8630: IFFALSE 8709
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8632: LD_ADDR_EXP 10
8636: PUSH
8637: LD_EXP 10
8641: PUSH
8642: LD_INT 2
8644: ADD
8645: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8646: LD_ADDR_EXP 10
8650: PUSH
8651: LD_EXP 10
8655: PUSH
8656: LD_VAR 0 1
8660: PPUSH
8661: CALL_OW 250
8665: ADD
8666: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8667: LD_ADDR_EXP 10
8671: PUSH
8672: LD_EXP 10
8676: PUSH
8677: LD_VAR 0 1
8681: PPUSH
8682: CALL_OW 251
8686: ADD
8687: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8688: LD_ADDR_EXP 10
8692: PUSH
8693: LD_EXP 10
8697: PUSH
8698: LD_VAR 0 1
8702: PPUSH
8703: CALL_OW 254
8707: ADD
8708: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 266
8718: PUSH
8719: LD_INT 5
8721: EQUAL
8722: IFFALSE 8801
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8724: LD_ADDR_EXP 10
8728: PUSH
8729: LD_EXP 10
8733: PUSH
8734: LD_INT 4
8736: ADD
8737: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8738: LD_ADDR_EXP 10
8742: PUSH
8743: LD_EXP 10
8747: PUSH
8748: LD_VAR 0 1
8752: PPUSH
8753: CALL_OW 250
8757: ADD
8758: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8759: LD_ADDR_EXP 10
8763: PUSH
8764: LD_EXP 10
8768: PUSH
8769: LD_VAR 0 1
8773: PPUSH
8774: CALL_OW 251
8778: ADD
8779: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8780: LD_ADDR_EXP 10
8784: PUSH
8785: LD_EXP 10
8789: PUSH
8790: LD_VAR 0 1
8794: PPUSH
8795: CALL_OW 254
8799: ADD
8800: ST_TO_ADDR
// end ; end ; end ;
8801: PPOPN 1
8803: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8804: LD_VAR 0 3
8808: PPUSH
8809: CALL_OW 264
8813: PUSH
8814: LD_INT 10
8816: EQUAL
8817: IFFALSE 8833
// destroyCounter := destroyCounter + 1 ;
8819: LD_ADDR_EXP 17
8823: PUSH
8824: LD_EXP 17
8828: PUSH
8829: LD_INT 1
8831: PLUS
8832: ST_TO_ADDR
// end ;
8833: PPOPN 3
8835: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8836: LD_VAR 0 2
8840: PUSH
8841: LD_INT 1
8843: EQUAL
8844: PUSH
8845: LD_VAR 0 2
8849: PUSH
8850: LD_INT 40
8852: EQUAL
8853: OR
8854: IFFALSE 8978
// if GetSide ( vehicle ) = 3 then
8856: LD_VAR 0 1
8860: PPUSH
8861: CALL_OW 255
8865: PUSH
8866: LD_INT 3
8868: EQUAL
8869: IFFALSE 8978
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8871: LD_VAR 0 1
8875: PPUSH
8876: CALL_OW 264
8880: PUSH
8881: LD_INT 47
8883: EQUAL
8884: PUSH
8885: LD_VAR 0 1
8889: PPUSH
8890: CALL_OW 264
8894: PUSH
8895: LD_INT 46
8897: EQUAL
8898: OR
8899: PUSH
8900: LD_VAR 0 1
8904: PPUSH
8905: CALL_OW 264
8909: PUSH
8910: LD_INT 45
8912: EQUAL
8913: OR
8914: PUSH
8915: LD_VAR 0 1
8919: PPUSH
8920: CALL_OW 264
8924: PUSH
8925: LD_INT 44
8927: EQUAL
8928: OR
8929: IFFALSE 8947
// russianTanks = russianTanks ^ vehicle ;
8931: LD_ADDR_EXP 11
8935: PUSH
8936: LD_EXP 11
8940: PUSH
8941: LD_VAR 0 1
8945: ADD
8946: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8947: LD_VAR 0 1
8951: PPUSH
8952: CALL_OW 264
8956: PUSH
8957: LD_INT 49
8959: EQUAL
8960: IFFALSE 8978
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8962: LD_ADDR_EXP 12
8966: PUSH
8967: LD_EXP 12
8971: PUSH
8972: LD_VAR 0 1
8976: ADD
8977: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8978: LD_VAR 0 1
8982: PPUSH
8983: CALL_OW 255
8987: PUSH
8988: LD_INT 1
8990: EQUAL
8991: PUSH
8992: LD_VAR 0 1
8996: PPUSH
8997: CALL_OW 264
9001: PUSH
9002: LD_INT 10
9004: EQUAL
9005: AND
9006: IFFALSE 9022
// amLaserCounter = amLaserCounter + 1 ;
9008: LD_ADDR_EXP 9
9012: PUSH
9013: LD_EXP 9
9017: PUSH
9018: LD_INT 1
9020: PLUS
9021: ST_TO_ADDR
// end ;
9022: PPOPN 2
9024: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
9025: LD_VAR 0 1
9029: PPUSH
9030: CALL 24143 0 1
// end ; end_of_file
9034: PPOPN 1
9036: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
9037: LD_EXP 1
9041: PPUSH
9042: CALL_OW 310
9046: PPUSH
9047: LD_INT 12
9049: PPUSH
9050: CALL_OW 308
9054: PUSH
9055: LD_EXP 15
9059: PUSH
9060: LD_INT 0
9062: EQUAL
9063: AND
9064: IFFALSE 9410
9066: GO 9068
9068: DISABLE
9069: LD_INT 0
9071: PPUSH
9072: PPUSH
// begin enable ;
9073: ENABLE
// if JMMGirl = 1 then
9074: LD_EXP 7
9078: PUSH
9079: LD_INT 1
9081: EQUAL
9082: IFFALSE 9099
// JMMGirlVeh = IsInUnit ( Joan ) ;
9084: LD_ADDR_VAR 0 1
9088: PUSH
9089: LD_EXP 2
9093: PPUSH
9094: CALL_OW 310
9098: ST_TO_ADDR
// if JMMGirl = 2 then
9099: LD_EXP 7
9103: PUSH
9104: LD_INT 2
9106: EQUAL
9107: IFFALSE 9124
// JMMGirlVeh = IsInUnit ( Lisa ) ;
9109: LD_ADDR_VAR 0 1
9113: PUSH
9114: LD_EXP 3
9118: PPUSH
9119: CALL_OW 310
9123: ST_TO_ADDR
// if JMMGirl = 3 then
9124: LD_EXP 7
9128: PUSH
9129: LD_INT 3
9131: EQUAL
9132: IFFALSE 9149
// JMMGirlVeh = IsInUnit ( Connie ) ;
9134: LD_ADDR_VAR 0 1
9138: PUSH
9139: LD_EXP 4
9143: PPUSH
9144: CALL_OW 310
9148: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9149: LD_EXP 1
9153: PPUSH
9154: CALL_OW 310
9158: PPUSH
9159: LD_EXP 2
9163: PPUSH
9164: CALL_OW 310
9168: PPUSH
9169: CALL_OW 296
9173: PUSH
9174: LD_INT 10
9176: LESS
9177: PUSH
9178: LD_EXP 1
9182: PPUSH
9183: CALL_OW 310
9187: PPUSH
9188: LD_EXP 3
9192: PPUSH
9193: CALL_OW 310
9197: PPUSH
9198: CALL_OW 296
9202: PUSH
9203: LD_INT 10
9205: LESS
9206: OR
9207: PUSH
9208: LD_EXP 1
9212: PPUSH
9213: CALL_OW 310
9217: PPUSH
9218: LD_EXP 4
9222: PPUSH
9223: CALL_OW 310
9227: PPUSH
9228: CALL_OW 296
9232: PUSH
9233: LD_INT 10
9235: LESS
9236: OR
9237: IFFALSE 9331
// begin case Query ( Q3b ) of 1 :
9239: LD_STRING Q3b
9241: PPUSH
9242: CALL_OW 97
9246: PUSH
9247: LD_INT 1
9249: DOUBLE
9250: EQUAL
9251: IFTRUE 9255
9253: GO 9328
9255: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9256: LD_VAR 0 1
9260: PPUSH
9261: CALL_OW 265
9265: PUSH
9266: EMPTY
9267: LIST
9268: PUSH
9269: LD_VAR 0 1
9273: PPUSH
9274: CALL_OW 262
9278: PUSH
9279: EMPTY
9280: LIST
9281: PUSH
9282: LD_VAR 0 1
9286: PPUSH
9287: CALL_OW 263
9291: PUSH
9292: EMPTY
9293: LIST
9294: PUSH
9295: LD_VAR 0 1
9299: PPUSH
9300: CALL_OW 264
9304: PUSH
9305: EMPTY
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: PPUSH
9314: LD_STRING 14_JMMGirlVeh_1
9316: PPUSH
9317: CALL_OW 39
// FinishMission ;
9321: CALL 9551 0 0
// disable ;
9325: DISABLE
// end ; end ;
9326: GO 9329
9328: POP
// end else
9329: GO 9410
// begin if JMMGirl = 1 then
9331: LD_EXP 7
9335: PUSH
9336: LD_INT 1
9338: EQUAL
9339: IFFALSE 9356
// dec := Query ( Q3bJ ) else
9341: LD_ADDR_VAR 0 2
9345: PUSH
9346: LD_STRING Q3bJ
9348: PPUSH
9349: CALL_OW 97
9353: ST_TO_ADDR
9354: GO 9394
// if JMMGirl = 2 then
9356: LD_EXP 7
9360: PUSH
9361: LD_INT 2
9363: EQUAL
9364: IFFALSE 9381
// dec := Query ( Q3bL ) else
9366: LD_ADDR_VAR 0 2
9370: PUSH
9371: LD_STRING Q3bL
9373: PPUSH
9374: CALL_OW 97
9378: ST_TO_ADDR
9379: GO 9394
// dec := Query ( Q3bX ) ;
9381: LD_ADDR_VAR 0 2
9385: PUSH
9386: LD_STRING Q3bX
9388: PPUSH
9389: CALL_OW 97
9393: ST_TO_ADDR
// if dec = 1 then
9394: LD_VAR 0 2
9398: PUSH
9399: LD_INT 1
9401: EQUAL
9402: IFFALSE 9410
// begin FinishMission ;
9404: CALL 9551 0 0
// exit ;
9408: GO 9410
// end ; end ; end ;
9410: PPOPN 2
9412: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9413: LD_INT 22
9415: PUSH
9416: LD_INT 3
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 21
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PPUSH
9437: CALL_OW 69
9441: PUSH
9442: LD_INT 0
9444: EQUAL
9445: PUSH
9446: LD_EXP 15
9450: PUSH
9451: LD_INT 0
9453: EQUAL
9454: AND
9455: IFFALSE 9550
9457: GO 9459
9459: DISABLE
// begin DialogueOn ;
9460: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9464: LD_EXP 1
9468: PPUSH
9469: LD_STRING DEnd-JMM-1
9471: PPUSH
9472: CALL_OW 88
// if JMMGirl = 1 then
9476: LD_EXP 7
9480: PUSH
9481: LD_INT 1
9483: EQUAL
9484: IFFALSE 9498
// Say ( Joan , DEnd-Joan-1 ) ;
9486: LD_EXP 2
9490: PPUSH
9491: LD_STRING DEnd-Joan-1
9493: PPUSH
9494: CALL_OW 88
// if JMMGirl = 2 then
9498: LD_EXP 7
9502: PUSH
9503: LD_INT 2
9505: EQUAL
9506: IFFALSE 9520
// Say ( Lisa , DEnd-Lisa-1 ) ;
9508: LD_EXP 3
9512: PPUSH
9513: LD_STRING DEnd-Lisa-1
9515: PPUSH
9516: CALL_OW 88
// if JMMGirl = 3 then
9520: LD_EXP 7
9524: PUSH
9525: LD_INT 3
9527: EQUAL
9528: IFFALSE 9542
// Say ( Connie , DEnd-Con-1 ) ;
9530: LD_EXP 4
9534: PPUSH
9535: LD_STRING DEnd-Con-1
9537: PPUSH
9538: CALL_OW 88
// DialogueOff ;
9542: CALL_OW 7
// FinishMission ;
9546: CALL 9551 0 0
// end ;
9550: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9551: LD_INT 0
9553: PPUSH
9554: PPUSH
9555: PPUSH
9556: PPUSH
9557: PPUSH
// m1 := false ;
9558: LD_ADDR_VAR 0 3
9562: PUSH
9563: LD_INT 0
9565: ST_TO_ADDR
// m2 := false ;
9566: LD_ADDR_VAR 0 4
9570: PUSH
9571: LD_INT 0
9573: ST_TO_ADDR
// m3 := false ;
9574: LD_ADDR_VAR 0 5
9578: PUSH
9579: LD_INT 0
9581: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9582: LD_EXP 1
9586: PPUSH
9587: LD_STRING 14_JMM
9589: PPUSH
9590: CALL_OW 38
// if tick <= 50 50$00 then
9594: LD_OWVAR 1
9598: PUSH
9599: LD_INT 105000
9601: LESSEQUAL
9602: IFFALSE 9611
// SetAchievement ( ACH_ASPEED_14 ) ;
9604: LD_STRING ACH_ASPEED_14
9606: PPUSH
9607: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9611: LD_EXP 1
9615: PPUSH
9616: CALL_OW 310
9620: PUSH
9621: LD_EXP 1
9625: PPUSH
9626: CALL_OW 310
9630: PPUSH
9631: CALL_OW 247
9635: PUSH
9636: LD_INT 2
9638: EQUAL
9639: AND
9640: IFFALSE 9722
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9642: LD_ADDR_VAR 0 2
9646: PUSH
9647: LD_EXP 1
9651: PPUSH
9652: CALL_OW 310
9656: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9657: LD_VAR 0 2
9661: PPUSH
9662: CALL_OW 265
9666: PUSH
9667: EMPTY
9668: LIST
9669: PUSH
9670: LD_VAR 0 2
9674: PPUSH
9675: CALL_OW 262
9679: PUSH
9680: EMPTY
9681: LIST
9682: PUSH
9683: LD_VAR 0 2
9687: PPUSH
9688: CALL_OW 263
9692: PUSH
9693: EMPTY
9694: LIST
9695: PUSH
9696: LD_VAR 0 2
9700: PPUSH
9701: CALL_OW 264
9705: PUSH
9706: EMPTY
9707: LIST
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: PPUSH
9715: LD_STRING 14_JMMVeh_1
9717: PPUSH
9718: CALL_OW 39
// end ; if fastEnd = 1 then
9722: LD_EXP 15
9726: PUSH
9727: LD_INT 1
9729: EQUAL
9730: IFFALSE 9819
// begin AddMedal ( fastend , - 1 ) ;
9732: LD_STRING fastend
9734: PPUSH
9735: LD_INT 1
9737: NEG
9738: PPUSH
9739: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9743: LD_STRING fastend
9745: PPUSH
9746: LD_INT 1
9748: NEG
9749: PPUSH
9750: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9754: LD_STRING fastend
9756: PPUSH
9757: LD_INT 1
9759: NEG
9760: PPUSH
9761: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9765: LD_EXP 7
9769: PPUSH
9770: LD_STRING 14_JMMGirl_1
9772: PPUSH
9773: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9777: LD_INT 0
9779: PPUSH
9780: LD_STRING 14_JMMGirlStatus_1
9782: PPUSH
9783: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9787: LD_INT 0
9789: PPUSH
9790: LD_STRING 14_KappaStatus_1
9792: PPUSH
9793: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9797: LD_STRING Eliminate
9799: PPUSH
9800: CALL_OW 102
// RewardPeople ( JMM ) ;
9804: LD_EXP 1
9808: PPUSH
9809: CALL_OW 43
// YouWin ;
9813: CALL_OW 103
// exit ;
9817: GO 10644
// end ; if fastEnd = 0 then
9819: LD_EXP 15
9823: PUSH
9824: LD_INT 0
9826: EQUAL
9827: IFFALSE 10537
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9829: LD_EXP 7
9833: PPUSH
9834: LD_STRING 14_JMMGirl_1
9836: PPUSH
9837: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9841: LD_INT 22
9843: PUSH
9844: LD_INT 3
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 1
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PPUSH
9865: CALL_OW 69
9869: PUSH
9870: LD_INT 0
9872: EQUAL
9873: PUSH
9874: LD_INT 48
9876: PPUSH
9877: CALL_OW 255
9881: PUSH
9882: LD_INT 1
9884: EQUAL
9885: AND
9886: IFFALSE 9900
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9888: LD_INT 1
9890: PPUSH
9891: LD_STRING 14_KappaStatus_1
9893: PPUSH
9894: CALL_OW 39
9898: GO 9910
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9900: LD_INT 0
9902: PPUSH
9903: LD_STRING 14_KappaStatus_1
9905: PPUSH
9906: CALL_OW 39
// case JMMGirl of 1 :
9910: LD_EXP 7
9914: PUSH
9915: LD_INT 1
9917: DOUBLE
9918: EQUAL
9919: IFTRUE 9923
9921: GO 10079
9923: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9924: LD_EXP 2
9928: PPUSH
9929: CALL_OW 302
9933: PUSH
9934: LD_EXP 2
9938: PPUSH
9939: CALL_OW 255
9943: PUSH
9944: LD_INT 1
9946: EQUAL
9947: AND
9948: PUSH
9949: LD_INT 22
9951: PUSH
9952: LD_INT 3
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 21
9961: PUSH
9962: LD_INT 1
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 69
9977: PUSH
9978: LD_INT 0
9980: EQUAL
9981: PUSH
9982: LD_EXP 1
9986: PPUSH
9987: CALL_OW 310
9991: PPUSH
9992: LD_EXP 2
9996: PPUSH
9997: CALL_OW 310
10001: PPUSH
10002: CALL_OW 296
10006: PUSH
10007: LD_INT 10
10009: LESS
10010: OR
10011: AND
10012: IFFALSE 10056
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10014: LD_INT 1
10016: PPUSH
10017: LD_STRING 14_JMMGirlStatus_1
10019: PPUSH
10020: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10024: LD_EXP 2
10028: PPUSH
10029: LD_STRING 14_Joan
10031: PPUSH
10032: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10036: LD_STRING protect
10038: PPUSH
10039: LD_INT 1
10041: PPUSH
10042: CALL_OW 101
// m1 := true ;
10046: LD_ADDR_VAR 0 3
10050: PUSH
10051: LD_INT 1
10053: ST_TO_ADDR
// end else
10054: GO 10077
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10056: LD_INT 0
10058: PPUSH
10059: LD_STRING 14_JMMGirlStatus_1
10061: PPUSH
10062: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10066: LD_STRING protect
10068: PPUSH
10069: LD_INT 1
10071: NEG
10072: PPUSH
10073: CALL_OW 101
// end ; end ; 2 :
10077: GO 10408
10079: LD_INT 2
10081: DOUBLE
10082: EQUAL
10083: IFTRUE 10087
10085: GO 10243
10087: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10088: LD_EXP 3
10092: PPUSH
10093: CALL_OW 302
10097: PUSH
10098: LD_EXP 3
10102: PPUSH
10103: CALL_OW 255
10107: PUSH
10108: LD_INT 1
10110: EQUAL
10111: AND
10112: PUSH
10113: LD_INT 22
10115: PUSH
10116: LD_INT 3
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 21
10125: PUSH
10126: LD_INT 1
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PPUSH
10137: CALL_OW 69
10141: PUSH
10142: LD_INT 0
10144: EQUAL
10145: PUSH
10146: LD_EXP 1
10150: PPUSH
10151: CALL_OW 310
10155: PPUSH
10156: LD_EXP 3
10160: PPUSH
10161: CALL_OW 310
10165: PPUSH
10166: CALL_OW 296
10170: PUSH
10171: LD_INT 10
10173: LESS
10174: OR
10175: AND
10176: IFFALSE 10220
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10178: LD_INT 1
10180: PPUSH
10181: LD_STRING 14_JMMGirlStatus_1
10183: PPUSH
10184: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10188: LD_EXP 3
10192: PPUSH
10193: LD_STRING 14_Lisa
10195: PPUSH
10196: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10200: LD_STRING protect
10202: PPUSH
10203: LD_INT 1
10205: PPUSH
10206: CALL_OW 101
// m1 := true ;
10210: LD_ADDR_VAR 0 3
10214: PUSH
10215: LD_INT 1
10217: ST_TO_ADDR
// end else
10218: GO 10241
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10220: LD_INT 0
10222: PPUSH
10223: LD_STRING 14_JMMGirlStatus_1
10225: PPUSH
10226: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10230: LD_STRING protect
10232: PPUSH
10233: LD_INT 2
10235: NEG
10236: PPUSH
10237: CALL_OW 101
// end ; end ; 3 :
10241: GO 10408
10243: LD_INT 3
10245: DOUBLE
10246: EQUAL
10247: IFTRUE 10251
10249: GO 10407
10251: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10252: LD_EXP 4
10256: PPUSH
10257: CALL_OW 302
10261: PUSH
10262: LD_EXP 4
10266: PPUSH
10267: CALL_OW 255
10271: PUSH
10272: LD_INT 1
10274: EQUAL
10275: AND
10276: PUSH
10277: LD_INT 22
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 21
10289: PUSH
10290: LD_INT 1
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PPUSH
10301: CALL_OW 69
10305: PUSH
10306: LD_INT 0
10308: EQUAL
10309: PUSH
10310: LD_EXP 1
10314: PPUSH
10315: CALL_OW 310
10319: PPUSH
10320: LD_EXP 4
10324: PPUSH
10325: CALL_OW 310
10329: PPUSH
10330: CALL_OW 296
10334: PUSH
10335: LD_INT 10
10337: LESS
10338: OR
10339: AND
10340: IFFALSE 10384
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10342: LD_INT 1
10344: PPUSH
10345: LD_STRING 14_JMMGirlStatus_1
10347: PPUSH
10348: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10352: LD_EXP 4
10356: PPUSH
10357: LD_STRING 14_Connie
10359: PPUSH
10360: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10364: LD_STRING protect
10366: PPUSH
10367: LD_INT 1
10369: PPUSH
10370: CALL_OW 101
// m1 := true ;
10374: LD_ADDR_VAR 0 3
10378: PUSH
10379: LD_INT 1
10381: ST_TO_ADDR
// end else
10382: GO 10405
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10384: LD_INT 0
10386: PPUSH
10387: LD_STRING 14_JMMGirlStatus_1
10389: PPUSH
10390: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10394: LD_STRING protect
10396: PPUSH
10397: LD_INT 3
10399: NEG
10400: PPUSH
10401: CALL_OW 101
// end ; end ; end ;
10405: GO 10408
10407: POP
// if amLaserCounter >= 2 then
10408: LD_EXP 9
10412: PUSH
10413: LD_INT 2
10415: GREATEREQUAL
10416: IFFALSE 10438
// begin AddMedal ( double , 1 ) ;
10418: LD_STRING double
10420: PPUSH
10421: LD_INT 1
10423: PPUSH
10424: CALL_OW 101
// m2 := true ;
10428: LD_ADDR_VAR 0 4
10432: PUSH
10433: LD_INT 1
10435: ST_TO_ADDR
// end else
10436: GO 10472
// begin if amLaserCounter = 1 then
10438: LD_EXP 9
10442: PUSH
10443: LD_INT 1
10445: EQUAL
10446: IFFALSE 10461
// AddMedal ( double , - 2 ) else
10448: LD_STRING double
10450: PPUSH
10451: LD_INT 2
10453: NEG
10454: PPUSH
10455: CALL_OW 101
10459: GO 10472
// AddMedal ( double , - 1 ) ;
10461: LD_STRING double
10463: PPUSH
10464: LD_INT 1
10466: NEG
10467: PPUSH
10468: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10472: LD_INT 22
10474: PUSH
10475: LD_INT 3
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 21
10484: PUSH
10485: LD_INT 1
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 69
10500: PUSH
10501: LD_INT 0
10503: EQUAL
10504: IFFALSE 10526
// begin AddMedal ( base , 1 ) ;
10506: LD_STRING base
10508: PPUSH
10509: LD_INT 1
10511: PPUSH
10512: CALL_OW 101
// m3 := true ;
10516: LD_ADDR_VAR 0 5
10520: PUSH
10521: LD_INT 1
10523: ST_TO_ADDR
// end else
10524: GO 10537
// AddMedal ( base , - 1 ) ;
10526: LD_STRING base
10528: PPUSH
10529: LD_INT 1
10531: NEG
10532: PPUSH
10533: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10537: LD_VAR 0 3
10541: PUSH
10542: LD_VAR 0 4
10546: AND
10547: PUSH
10548: LD_VAR 0 5
10552: AND
10553: PUSH
10554: LD_OWVAR 67
10558: PUSH
10559: LD_INT 3
10561: GREATEREQUAL
10562: AND
10563: IFFALSE 10575
// SetAchievementEX ( ACH_AMER , 14 ) ;
10565: LD_STRING ACH_AMER
10567: PPUSH
10568: LD_INT 14
10570: PPUSH
10571: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10575: LD_STRING Eliminate
10577: PPUSH
10578: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10582: LD_INT 22
10584: PUSH
10585: LD_INT 1
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 3
10594: PUSH
10595: LD_INT 25
10597: PUSH
10598: LD_INT 12
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 3
10611: PUSH
10612: LD_INT 25
10614: PUSH
10615: LD_INT 16
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 69
10635: PPUSH
10636: CALL_OW 43
// YouWin ;
10640: CALL_OW 103
// end ; end_of_file
10644: LD_VAR 0 1
10648: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10649: LD_EXP 1
10653: PPUSH
10654: CALL_OW 301
10658: IFFALSE 10670
10660: GO 10662
10662: DISABLE
// YouLost ( JMM ) ; end_of_file
10663: LD_STRING JMM
10665: PPUSH
10666: CALL_OW 104
10670: END
// every 1 1$0 do
10671: GO 10673
10673: DISABLE
// begin enable ;
10674: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10675: LD_INT 3
10677: PPUSH
10678: LD_INT 5
10680: PPUSH
10681: CALL_OW 12
10685: PPUSH
10686: LD_INT 13
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 55
// end ; end_of_file
10696: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10697: LD_INT 0
10699: PPUSH
// ar_miner := 81 ;
10700: LD_ADDR_EXP 26
10704: PUSH
10705: LD_INT 81
10707: ST_TO_ADDR
// ar_crane := 88 ;
10708: LD_ADDR_EXP 25
10712: PUSH
10713: LD_INT 88
10715: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10716: LD_ADDR_EXP 20
10720: PUSH
10721: LD_INT 89
10723: ST_TO_ADDR
// us_hack := 99 ;
10724: LD_ADDR_EXP 21
10728: PUSH
10729: LD_INT 99
10731: ST_TO_ADDR
// us_artillery := 97 ;
10732: LD_ADDR_EXP 22
10736: PUSH
10737: LD_INT 97
10739: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10740: LD_ADDR_EXP 23
10744: PUSH
10745: LD_INT 91
10747: ST_TO_ADDR
// ar_mortar := 92 ;
10748: LD_ADDR_EXP 24
10752: PUSH
10753: LD_INT 92
10755: ST_TO_ADDR
// ru_radar := 98 ;
10756: LD_ADDR_EXP 19
10760: PUSH
10761: LD_INT 98
10763: ST_TO_ADDR
// tech_Artillery := 80 ;
10764: LD_ADDR_EXP 27
10768: PUSH
10769: LD_INT 80
10771: ST_TO_ADDR
// tech_RadMat := 81 ;
10772: LD_ADDR_EXP 28
10776: PUSH
10777: LD_INT 81
10779: ST_TO_ADDR
// tech_BasicTools := 82 ;
10780: LD_ADDR_EXP 29
10784: PUSH
10785: LD_INT 82
10787: ST_TO_ADDR
// tech_Cargo := 83 ;
10788: LD_ADDR_EXP 30
10792: PUSH
10793: LD_INT 83
10795: ST_TO_ADDR
// tech_Track := 84 ;
10796: LD_ADDR_EXP 31
10800: PUSH
10801: LD_INT 84
10803: ST_TO_ADDR
// tech_Crane := 85 ;
10804: LD_ADDR_EXP 32
10808: PUSH
10809: LD_INT 85
10811: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10812: LD_ADDR_EXP 33
10816: PUSH
10817: LD_INT 86
10819: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10820: LD_ADDR_EXP 34
10824: PUSH
10825: LD_INT 87
10827: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10828: LD_ADDR_EXP 35
10832: PUSH
10833: LD_INT 88
10835: ST_TO_ADDR
// class_mastodont := 31 ;
10836: LD_ADDR_EXP 36
10840: PUSH
10841: LD_INT 31
10843: ST_TO_ADDR
// class_horse := 21 ;
10844: LD_ADDR_EXP 37
10848: PUSH
10849: LD_INT 21
10851: ST_TO_ADDR
// end ;
10852: LD_VAR 0 1
10856: RET
// every 1 do
10857: GO 10859
10859: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10860: CALL 10697 0 0
10864: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10865: LD_INT 0
10867: PPUSH
// if p2 = 100 then
10868: LD_VAR 0 2
10872: PUSH
10873: LD_INT 100
10875: EQUAL
10876: IFFALSE 11825
// begin if not StreamModeActive then
10878: LD_EXP 38
10882: NOT
10883: IFFALSE 10893
// StreamModeActive := true ;
10885: LD_ADDR_EXP 38
10889: PUSH
10890: LD_INT 1
10892: ST_TO_ADDR
// if p3 = 0 then
10893: LD_VAR 0 3
10897: PUSH
10898: LD_INT 0
10900: EQUAL
10901: IFFALSE 10907
// InitStreamMode ;
10903: CALL 11985 0 0
// if p3 = 1 then
10907: LD_VAR 0 3
10911: PUSH
10912: LD_INT 1
10914: EQUAL
10915: IFFALSE 10925
// sRocket := true ;
10917: LD_ADDR_EXP 43
10921: PUSH
10922: LD_INT 1
10924: ST_TO_ADDR
// if p3 = 2 then
10925: LD_VAR 0 3
10929: PUSH
10930: LD_INT 2
10932: EQUAL
10933: IFFALSE 10943
// sSpeed := true ;
10935: LD_ADDR_EXP 42
10939: PUSH
10940: LD_INT 1
10942: ST_TO_ADDR
// if p3 = 3 then
10943: LD_VAR 0 3
10947: PUSH
10948: LD_INT 3
10950: EQUAL
10951: IFFALSE 10961
// sEngine := true ;
10953: LD_ADDR_EXP 44
10957: PUSH
10958: LD_INT 1
10960: ST_TO_ADDR
// if p3 = 4 then
10961: LD_VAR 0 3
10965: PUSH
10966: LD_INT 4
10968: EQUAL
10969: IFFALSE 10979
// sSpec := true ;
10971: LD_ADDR_EXP 41
10975: PUSH
10976: LD_INT 1
10978: ST_TO_ADDR
// if p3 = 5 then
10979: LD_VAR 0 3
10983: PUSH
10984: LD_INT 5
10986: EQUAL
10987: IFFALSE 10997
// sLevel := true ;
10989: LD_ADDR_EXP 45
10993: PUSH
10994: LD_INT 1
10996: ST_TO_ADDR
// if p3 = 6 then
10997: LD_VAR 0 3
11001: PUSH
11002: LD_INT 6
11004: EQUAL
11005: IFFALSE 11015
// sArmoury := true ;
11007: LD_ADDR_EXP 46
11011: PUSH
11012: LD_INT 1
11014: ST_TO_ADDR
// if p3 = 7 then
11015: LD_VAR 0 3
11019: PUSH
11020: LD_INT 7
11022: EQUAL
11023: IFFALSE 11033
// sRadar := true ;
11025: LD_ADDR_EXP 47
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// if p3 = 8 then
11033: LD_VAR 0 3
11037: PUSH
11038: LD_INT 8
11040: EQUAL
11041: IFFALSE 11051
// sBunker := true ;
11043: LD_ADDR_EXP 48
11047: PUSH
11048: LD_INT 1
11050: ST_TO_ADDR
// if p3 = 9 then
11051: LD_VAR 0 3
11055: PUSH
11056: LD_INT 9
11058: EQUAL
11059: IFFALSE 11069
// sHack := true ;
11061: LD_ADDR_EXP 49
11065: PUSH
11066: LD_INT 1
11068: ST_TO_ADDR
// if p3 = 10 then
11069: LD_VAR 0 3
11073: PUSH
11074: LD_INT 10
11076: EQUAL
11077: IFFALSE 11087
// sFire := true ;
11079: LD_ADDR_EXP 50
11083: PUSH
11084: LD_INT 1
11086: ST_TO_ADDR
// if p3 = 11 then
11087: LD_VAR 0 3
11091: PUSH
11092: LD_INT 11
11094: EQUAL
11095: IFFALSE 11105
// sRefresh := true ;
11097: LD_ADDR_EXP 51
11101: PUSH
11102: LD_INT 1
11104: ST_TO_ADDR
// if p3 = 12 then
11105: LD_VAR 0 3
11109: PUSH
11110: LD_INT 12
11112: EQUAL
11113: IFFALSE 11123
// sExp := true ;
11115: LD_ADDR_EXP 52
11119: PUSH
11120: LD_INT 1
11122: ST_TO_ADDR
// if p3 = 13 then
11123: LD_VAR 0 3
11127: PUSH
11128: LD_INT 13
11130: EQUAL
11131: IFFALSE 11141
// sDepot := true ;
11133: LD_ADDR_EXP 53
11137: PUSH
11138: LD_INT 1
11140: ST_TO_ADDR
// if p3 = 14 then
11141: LD_VAR 0 3
11145: PUSH
11146: LD_INT 14
11148: EQUAL
11149: IFFALSE 11159
// sFlag := true ;
11151: LD_ADDR_EXP 54
11155: PUSH
11156: LD_INT 1
11158: ST_TO_ADDR
// if p3 = 15 then
11159: LD_VAR 0 3
11163: PUSH
11164: LD_INT 15
11166: EQUAL
11167: IFFALSE 11177
// sKamikadze := true ;
11169: LD_ADDR_EXP 62
11173: PUSH
11174: LD_INT 1
11176: ST_TO_ADDR
// if p3 = 16 then
11177: LD_VAR 0 3
11181: PUSH
11182: LD_INT 16
11184: EQUAL
11185: IFFALSE 11195
// sTroll := true ;
11187: LD_ADDR_EXP 63
11191: PUSH
11192: LD_INT 1
11194: ST_TO_ADDR
// if p3 = 17 then
11195: LD_VAR 0 3
11199: PUSH
11200: LD_INT 17
11202: EQUAL
11203: IFFALSE 11213
// sSlow := true ;
11205: LD_ADDR_EXP 64
11209: PUSH
11210: LD_INT 1
11212: ST_TO_ADDR
// if p3 = 18 then
11213: LD_VAR 0 3
11217: PUSH
11218: LD_INT 18
11220: EQUAL
11221: IFFALSE 11231
// sLack := true ;
11223: LD_ADDR_EXP 65
11227: PUSH
11228: LD_INT 1
11230: ST_TO_ADDR
// if p3 = 19 then
11231: LD_VAR 0 3
11235: PUSH
11236: LD_INT 19
11238: EQUAL
11239: IFFALSE 11249
// sTank := true ;
11241: LD_ADDR_EXP 67
11245: PUSH
11246: LD_INT 1
11248: ST_TO_ADDR
// if p3 = 20 then
11249: LD_VAR 0 3
11253: PUSH
11254: LD_INT 20
11256: EQUAL
11257: IFFALSE 11267
// sRemote := true ;
11259: LD_ADDR_EXP 68
11263: PUSH
11264: LD_INT 1
11266: ST_TO_ADDR
// if p3 = 21 then
11267: LD_VAR 0 3
11271: PUSH
11272: LD_INT 21
11274: EQUAL
11275: IFFALSE 11285
// sPowell := true ;
11277: LD_ADDR_EXP 69
11281: PUSH
11282: LD_INT 1
11284: ST_TO_ADDR
// if p3 = 22 then
11285: LD_VAR 0 3
11289: PUSH
11290: LD_INT 22
11292: EQUAL
11293: IFFALSE 11303
// sTeleport := true ;
11295: LD_ADDR_EXP 72
11299: PUSH
11300: LD_INT 1
11302: ST_TO_ADDR
// if p3 = 23 then
11303: LD_VAR 0 3
11307: PUSH
11308: LD_INT 23
11310: EQUAL
11311: IFFALSE 11321
// sOilTower := true ;
11313: LD_ADDR_EXP 74
11317: PUSH
11318: LD_INT 1
11320: ST_TO_ADDR
// if p3 = 24 then
11321: LD_VAR 0 3
11325: PUSH
11326: LD_INT 24
11328: EQUAL
11329: IFFALSE 11339
// sShovel := true ;
11331: LD_ADDR_EXP 75
11335: PUSH
11336: LD_INT 1
11338: ST_TO_ADDR
// if p3 = 25 then
11339: LD_VAR 0 3
11343: PUSH
11344: LD_INT 25
11346: EQUAL
11347: IFFALSE 11357
// sSheik := true ;
11349: LD_ADDR_EXP 76
11353: PUSH
11354: LD_INT 1
11356: ST_TO_ADDR
// if p3 = 26 then
11357: LD_VAR 0 3
11361: PUSH
11362: LD_INT 26
11364: EQUAL
11365: IFFALSE 11375
// sEarthquake := true ;
11367: LD_ADDR_EXP 78
11371: PUSH
11372: LD_INT 1
11374: ST_TO_ADDR
// if p3 = 27 then
11375: LD_VAR 0 3
11379: PUSH
11380: LD_INT 27
11382: EQUAL
11383: IFFALSE 11393
// sAI := true ;
11385: LD_ADDR_EXP 79
11389: PUSH
11390: LD_INT 1
11392: ST_TO_ADDR
// if p3 = 28 then
11393: LD_VAR 0 3
11397: PUSH
11398: LD_INT 28
11400: EQUAL
11401: IFFALSE 11411
// sCargo := true ;
11403: LD_ADDR_EXP 82
11407: PUSH
11408: LD_INT 1
11410: ST_TO_ADDR
// if p3 = 29 then
11411: LD_VAR 0 3
11415: PUSH
11416: LD_INT 29
11418: EQUAL
11419: IFFALSE 11429
// sDLaser := true ;
11421: LD_ADDR_EXP 83
11425: PUSH
11426: LD_INT 1
11428: ST_TO_ADDR
// if p3 = 30 then
11429: LD_VAR 0 3
11433: PUSH
11434: LD_INT 30
11436: EQUAL
11437: IFFALSE 11447
// sExchange := true ;
11439: LD_ADDR_EXP 84
11443: PUSH
11444: LD_INT 1
11446: ST_TO_ADDR
// if p3 = 31 then
11447: LD_VAR 0 3
11451: PUSH
11452: LD_INT 31
11454: EQUAL
11455: IFFALSE 11465
// sFac := true ;
11457: LD_ADDR_EXP 85
11461: PUSH
11462: LD_INT 1
11464: ST_TO_ADDR
// if p3 = 32 then
11465: LD_VAR 0 3
11469: PUSH
11470: LD_INT 32
11472: EQUAL
11473: IFFALSE 11483
// sPower := true ;
11475: LD_ADDR_EXP 86
11479: PUSH
11480: LD_INT 1
11482: ST_TO_ADDR
// if p3 = 33 then
11483: LD_VAR 0 3
11487: PUSH
11488: LD_INT 33
11490: EQUAL
11491: IFFALSE 11501
// sRandom := true ;
11493: LD_ADDR_EXP 87
11497: PUSH
11498: LD_INT 1
11500: ST_TO_ADDR
// if p3 = 34 then
11501: LD_VAR 0 3
11505: PUSH
11506: LD_INT 34
11508: EQUAL
11509: IFFALSE 11519
// sShield := true ;
11511: LD_ADDR_EXP 88
11515: PUSH
11516: LD_INT 1
11518: ST_TO_ADDR
// if p3 = 35 then
11519: LD_VAR 0 3
11523: PUSH
11524: LD_INT 35
11526: EQUAL
11527: IFFALSE 11537
// sTime := true ;
11529: LD_ADDR_EXP 89
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// if p3 = 36 then
11537: LD_VAR 0 3
11541: PUSH
11542: LD_INT 36
11544: EQUAL
11545: IFFALSE 11555
// sTools := true ;
11547: LD_ADDR_EXP 90
11551: PUSH
11552: LD_INT 1
11554: ST_TO_ADDR
// if p3 = 101 then
11555: LD_VAR 0 3
11559: PUSH
11560: LD_INT 101
11562: EQUAL
11563: IFFALSE 11573
// sSold := true ;
11565: LD_ADDR_EXP 55
11569: PUSH
11570: LD_INT 1
11572: ST_TO_ADDR
// if p3 = 102 then
11573: LD_VAR 0 3
11577: PUSH
11578: LD_INT 102
11580: EQUAL
11581: IFFALSE 11591
// sDiff := true ;
11583: LD_ADDR_EXP 56
11587: PUSH
11588: LD_INT 1
11590: ST_TO_ADDR
// if p3 = 103 then
11591: LD_VAR 0 3
11595: PUSH
11596: LD_INT 103
11598: EQUAL
11599: IFFALSE 11609
// sFog := true ;
11601: LD_ADDR_EXP 59
11605: PUSH
11606: LD_INT 1
11608: ST_TO_ADDR
// if p3 = 104 then
11609: LD_VAR 0 3
11613: PUSH
11614: LD_INT 104
11616: EQUAL
11617: IFFALSE 11627
// sReset := true ;
11619: LD_ADDR_EXP 60
11623: PUSH
11624: LD_INT 1
11626: ST_TO_ADDR
// if p3 = 105 then
11627: LD_VAR 0 3
11631: PUSH
11632: LD_INT 105
11634: EQUAL
11635: IFFALSE 11645
// sSun := true ;
11637: LD_ADDR_EXP 61
11641: PUSH
11642: LD_INT 1
11644: ST_TO_ADDR
// if p3 = 106 then
11645: LD_VAR 0 3
11649: PUSH
11650: LD_INT 106
11652: EQUAL
11653: IFFALSE 11663
// sTiger := true ;
11655: LD_ADDR_EXP 57
11659: PUSH
11660: LD_INT 1
11662: ST_TO_ADDR
// if p3 = 107 then
11663: LD_VAR 0 3
11667: PUSH
11668: LD_INT 107
11670: EQUAL
11671: IFFALSE 11681
// sBomb := true ;
11673: LD_ADDR_EXP 58
11677: PUSH
11678: LD_INT 1
11680: ST_TO_ADDR
// if p3 = 108 then
11681: LD_VAR 0 3
11685: PUSH
11686: LD_INT 108
11688: EQUAL
11689: IFFALSE 11699
// sWound := true ;
11691: LD_ADDR_EXP 66
11695: PUSH
11696: LD_INT 1
11698: ST_TO_ADDR
// if p3 = 109 then
11699: LD_VAR 0 3
11703: PUSH
11704: LD_INT 109
11706: EQUAL
11707: IFFALSE 11717
// sBetray := true ;
11709: LD_ADDR_EXP 70
11713: PUSH
11714: LD_INT 1
11716: ST_TO_ADDR
// if p3 = 110 then
11717: LD_VAR 0 3
11721: PUSH
11722: LD_INT 110
11724: EQUAL
11725: IFFALSE 11735
// sContamin := true ;
11727: LD_ADDR_EXP 71
11731: PUSH
11732: LD_INT 1
11734: ST_TO_ADDR
// if p3 = 111 then
11735: LD_VAR 0 3
11739: PUSH
11740: LD_INT 111
11742: EQUAL
11743: IFFALSE 11753
// sOil := true ;
11745: LD_ADDR_EXP 73
11749: PUSH
11750: LD_INT 1
11752: ST_TO_ADDR
// if p3 = 112 then
11753: LD_VAR 0 3
11757: PUSH
11758: LD_INT 112
11760: EQUAL
11761: IFFALSE 11771
// sStu := true ;
11763: LD_ADDR_EXP 77
11767: PUSH
11768: LD_INT 1
11770: ST_TO_ADDR
// if p3 = 113 then
11771: LD_VAR 0 3
11775: PUSH
11776: LD_INT 113
11778: EQUAL
11779: IFFALSE 11789
// sBazooka := true ;
11781: LD_ADDR_EXP 80
11785: PUSH
11786: LD_INT 1
11788: ST_TO_ADDR
// if p3 = 114 then
11789: LD_VAR 0 3
11793: PUSH
11794: LD_INT 114
11796: EQUAL
11797: IFFALSE 11807
// sMortar := true ;
11799: LD_ADDR_EXP 81
11803: PUSH
11804: LD_INT 1
11806: ST_TO_ADDR
// if p3 = 115 then
11807: LD_VAR 0 3
11811: PUSH
11812: LD_INT 115
11814: EQUAL
11815: IFFALSE 11825
// sRanger := true ;
11817: LD_ADDR_EXP 91
11821: PUSH
11822: LD_INT 1
11824: ST_TO_ADDR
// end ; if p2 = 101 then
11825: LD_VAR 0 2
11829: PUSH
11830: LD_INT 101
11832: EQUAL
11833: IFFALSE 11961
// begin case p3 of 1 :
11835: LD_VAR 0 3
11839: PUSH
11840: LD_INT 1
11842: DOUBLE
11843: EQUAL
11844: IFTRUE 11848
11846: GO 11855
11848: POP
// hHackUnlimitedResources ; 2 :
11849: CALL 22998 0 0
11853: GO 11961
11855: LD_INT 2
11857: DOUBLE
11858: EQUAL
11859: IFTRUE 11863
11861: GO 11870
11863: POP
// hHackSetLevel10 ; 3 :
11864: CALL 23131 0 0
11868: GO 11961
11870: LD_INT 3
11872: DOUBLE
11873: EQUAL
11874: IFTRUE 11878
11876: GO 11885
11878: POP
// hHackSetLevel10YourUnits ; 4 :
11879: CALL 23216 0 0
11883: GO 11961
11885: LD_INT 4
11887: DOUBLE
11888: EQUAL
11889: IFTRUE 11893
11891: GO 11900
11893: POP
// hHackInvincible ; 5 :
11894: CALL 23664 0 0
11898: GO 11961
11900: LD_INT 5
11902: DOUBLE
11903: EQUAL
11904: IFTRUE 11908
11906: GO 11915
11908: POP
// hHackInvisible ; 6 :
11909: CALL 23775 0 0
11913: GO 11961
11915: LD_INT 6
11917: DOUBLE
11918: EQUAL
11919: IFTRUE 11923
11921: GO 11930
11923: POP
// hHackChangeYourSide ; 7 :
11924: CALL 23832 0 0
11928: GO 11961
11930: LD_INT 7
11932: DOUBLE
11933: EQUAL
11934: IFTRUE 11938
11936: GO 11945
11938: POP
// hHackChangeUnitSide ; 8 :
11939: CALL 23874 0 0
11943: GO 11961
11945: LD_INT 8
11947: DOUBLE
11948: EQUAL
11949: IFTRUE 11953
11951: GO 11960
11953: POP
// hHackFog ; end ;
11954: CALL 23975 0 0
11958: GO 11961
11960: POP
// end ; end ;
11961: LD_VAR 0 7
11965: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11966: GO 11968
11968: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11969: LD_STRING initStreamRollete();
11971: PPUSH
11972: CALL_OW 559
// InitStreamMode ;
11976: CALL 11985 0 0
// DefineStreamItems ( ) ;
11980: CALL 12425 0 0
// end ;
11984: END
// function InitStreamMode ; begin
11985: LD_INT 0
11987: PPUSH
// streamModeActive := false ;
11988: LD_ADDR_EXP 38
11992: PUSH
11993: LD_INT 0
11995: ST_TO_ADDR
// normalCounter := 36 ;
11996: LD_ADDR_EXP 39
12000: PUSH
12001: LD_INT 36
12003: ST_TO_ADDR
// hardcoreCounter := 16 ;
12004: LD_ADDR_EXP 40
12008: PUSH
12009: LD_INT 16
12011: ST_TO_ADDR
// sRocket := false ;
12012: LD_ADDR_EXP 43
12016: PUSH
12017: LD_INT 0
12019: ST_TO_ADDR
// sSpeed := false ;
12020: LD_ADDR_EXP 42
12024: PUSH
12025: LD_INT 0
12027: ST_TO_ADDR
// sEngine := false ;
12028: LD_ADDR_EXP 44
12032: PUSH
12033: LD_INT 0
12035: ST_TO_ADDR
// sSpec := false ;
12036: LD_ADDR_EXP 41
12040: PUSH
12041: LD_INT 0
12043: ST_TO_ADDR
// sLevel := false ;
12044: LD_ADDR_EXP 45
12048: PUSH
12049: LD_INT 0
12051: ST_TO_ADDR
// sArmoury := false ;
12052: LD_ADDR_EXP 46
12056: PUSH
12057: LD_INT 0
12059: ST_TO_ADDR
// sRadar := false ;
12060: LD_ADDR_EXP 47
12064: PUSH
12065: LD_INT 0
12067: ST_TO_ADDR
// sBunker := false ;
12068: LD_ADDR_EXP 48
12072: PUSH
12073: LD_INT 0
12075: ST_TO_ADDR
// sHack := false ;
12076: LD_ADDR_EXP 49
12080: PUSH
12081: LD_INT 0
12083: ST_TO_ADDR
// sFire := false ;
12084: LD_ADDR_EXP 50
12088: PUSH
12089: LD_INT 0
12091: ST_TO_ADDR
// sRefresh := false ;
12092: LD_ADDR_EXP 51
12096: PUSH
12097: LD_INT 0
12099: ST_TO_ADDR
// sExp := false ;
12100: LD_ADDR_EXP 52
12104: PUSH
12105: LD_INT 0
12107: ST_TO_ADDR
// sDepot := false ;
12108: LD_ADDR_EXP 53
12112: PUSH
12113: LD_INT 0
12115: ST_TO_ADDR
// sFlag := false ;
12116: LD_ADDR_EXP 54
12120: PUSH
12121: LD_INT 0
12123: ST_TO_ADDR
// sKamikadze := false ;
12124: LD_ADDR_EXP 62
12128: PUSH
12129: LD_INT 0
12131: ST_TO_ADDR
// sTroll := false ;
12132: LD_ADDR_EXP 63
12136: PUSH
12137: LD_INT 0
12139: ST_TO_ADDR
// sSlow := false ;
12140: LD_ADDR_EXP 64
12144: PUSH
12145: LD_INT 0
12147: ST_TO_ADDR
// sLack := false ;
12148: LD_ADDR_EXP 65
12152: PUSH
12153: LD_INT 0
12155: ST_TO_ADDR
// sTank := false ;
12156: LD_ADDR_EXP 67
12160: PUSH
12161: LD_INT 0
12163: ST_TO_ADDR
// sRemote := false ;
12164: LD_ADDR_EXP 68
12168: PUSH
12169: LD_INT 0
12171: ST_TO_ADDR
// sPowell := false ;
12172: LD_ADDR_EXP 69
12176: PUSH
12177: LD_INT 0
12179: ST_TO_ADDR
// sTeleport := false ;
12180: LD_ADDR_EXP 72
12184: PUSH
12185: LD_INT 0
12187: ST_TO_ADDR
// sOilTower := false ;
12188: LD_ADDR_EXP 74
12192: PUSH
12193: LD_INT 0
12195: ST_TO_ADDR
// sShovel := false ;
12196: LD_ADDR_EXP 75
12200: PUSH
12201: LD_INT 0
12203: ST_TO_ADDR
// sSheik := false ;
12204: LD_ADDR_EXP 76
12208: PUSH
12209: LD_INT 0
12211: ST_TO_ADDR
// sEarthquake := false ;
12212: LD_ADDR_EXP 78
12216: PUSH
12217: LD_INT 0
12219: ST_TO_ADDR
// sAI := false ;
12220: LD_ADDR_EXP 79
12224: PUSH
12225: LD_INT 0
12227: ST_TO_ADDR
// sCargo := false ;
12228: LD_ADDR_EXP 82
12232: PUSH
12233: LD_INT 0
12235: ST_TO_ADDR
// sDLaser := false ;
12236: LD_ADDR_EXP 83
12240: PUSH
12241: LD_INT 0
12243: ST_TO_ADDR
// sExchange := false ;
12244: LD_ADDR_EXP 84
12248: PUSH
12249: LD_INT 0
12251: ST_TO_ADDR
// sFac := false ;
12252: LD_ADDR_EXP 85
12256: PUSH
12257: LD_INT 0
12259: ST_TO_ADDR
// sPower := false ;
12260: LD_ADDR_EXP 86
12264: PUSH
12265: LD_INT 0
12267: ST_TO_ADDR
// sRandom := false ;
12268: LD_ADDR_EXP 87
12272: PUSH
12273: LD_INT 0
12275: ST_TO_ADDR
// sShield := false ;
12276: LD_ADDR_EXP 88
12280: PUSH
12281: LD_INT 0
12283: ST_TO_ADDR
// sTime := false ;
12284: LD_ADDR_EXP 89
12288: PUSH
12289: LD_INT 0
12291: ST_TO_ADDR
// sTools := false ;
12292: LD_ADDR_EXP 90
12296: PUSH
12297: LD_INT 0
12299: ST_TO_ADDR
// sSold := false ;
12300: LD_ADDR_EXP 55
12304: PUSH
12305: LD_INT 0
12307: ST_TO_ADDR
// sDiff := false ;
12308: LD_ADDR_EXP 56
12312: PUSH
12313: LD_INT 0
12315: ST_TO_ADDR
// sFog := false ;
12316: LD_ADDR_EXP 59
12320: PUSH
12321: LD_INT 0
12323: ST_TO_ADDR
// sReset := false ;
12324: LD_ADDR_EXP 60
12328: PUSH
12329: LD_INT 0
12331: ST_TO_ADDR
// sSun := false ;
12332: LD_ADDR_EXP 61
12336: PUSH
12337: LD_INT 0
12339: ST_TO_ADDR
// sTiger := false ;
12340: LD_ADDR_EXP 57
12344: PUSH
12345: LD_INT 0
12347: ST_TO_ADDR
// sBomb := false ;
12348: LD_ADDR_EXP 58
12352: PUSH
12353: LD_INT 0
12355: ST_TO_ADDR
// sWound := false ;
12356: LD_ADDR_EXP 66
12360: PUSH
12361: LD_INT 0
12363: ST_TO_ADDR
// sBetray := false ;
12364: LD_ADDR_EXP 70
12368: PUSH
12369: LD_INT 0
12371: ST_TO_ADDR
// sContamin := false ;
12372: LD_ADDR_EXP 71
12376: PUSH
12377: LD_INT 0
12379: ST_TO_ADDR
// sOil := false ;
12380: LD_ADDR_EXP 73
12384: PUSH
12385: LD_INT 0
12387: ST_TO_ADDR
// sStu := false ;
12388: LD_ADDR_EXP 77
12392: PUSH
12393: LD_INT 0
12395: ST_TO_ADDR
// sBazooka := false ;
12396: LD_ADDR_EXP 80
12400: PUSH
12401: LD_INT 0
12403: ST_TO_ADDR
// sMortar := false ;
12404: LD_ADDR_EXP 81
12408: PUSH
12409: LD_INT 0
12411: ST_TO_ADDR
// sRanger := false ;
12412: LD_ADDR_EXP 91
12416: PUSH
12417: LD_INT 0
12419: ST_TO_ADDR
// end ;
12420: LD_VAR 0 1
12424: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12425: LD_INT 0
12427: PPUSH
12428: PPUSH
12429: PPUSH
12430: PPUSH
12431: PPUSH
// result := [ ] ;
12432: LD_ADDR_VAR 0 1
12436: PUSH
12437: EMPTY
12438: ST_TO_ADDR
// if campaign_id = 1 then
12439: LD_OWVAR 69
12443: PUSH
12444: LD_INT 1
12446: EQUAL
12447: IFFALSE 15385
// begin case mission_number of 1 :
12449: LD_OWVAR 70
12453: PUSH
12454: LD_INT 1
12456: DOUBLE
12457: EQUAL
12458: IFTRUE 12462
12460: GO 12526
12462: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12463: LD_ADDR_VAR 0 1
12467: PUSH
12468: LD_INT 2
12470: PUSH
12471: LD_INT 4
12473: PUSH
12474: LD_INT 11
12476: PUSH
12477: LD_INT 12
12479: PUSH
12480: LD_INT 15
12482: PUSH
12483: LD_INT 16
12485: PUSH
12486: LD_INT 22
12488: PUSH
12489: LD_INT 23
12491: PUSH
12492: LD_INT 26
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 101
12508: PUSH
12509: LD_INT 102
12511: PUSH
12512: LD_INT 106
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: LIST
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: ST_TO_ADDR
12524: GO 15383
12526: LD_INT 2
12528: DOUBLE
12529: EQUAL
12530: IFTRUE 12534
12532: GO 12606
12534: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12535: LD_ADDR_VAR 0 1
12539: PUSH
12540: LD_INT 2
12542: PUSH
12543: LD_INT 4
12545: PUSH
12546: LD_INT 11
12548: PUSH
12549: LD_INT 12
12551: PUSH
12552: LD_INT 15
12554: PUSH
12555: LD_INT 16
12557: PUSH
12558: LD_INT 22
12560: PUSH
12561: LD_INT 23
12563: PUSH
12564: LD_INT 26
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 101
12580: PUSH
12581: LD_INT 102
12583: PUSH
12584: LD_INT 105
12586: PUSH
12587: LD_INT 106
12589: PUSH
12590: LD_INT 108
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: ST_TO_ADDR
12604: GO 15383
12606: LD_INT 3
12608: DOUBLE
12609: EQUAL
12610: IFTRUE 12614
12612: GO 12690
12614: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12615: LD_ADDR_VAR 0 1
12619: PUSH
12620: LD_INT 2
12622: PUSH
12623: LD_INT 4
12625: PUSH
12626: LD_INT 5
12628: PUSH
12629: LD_INT 11
12631: PUSH
12632: LD_INT 12
12634: PUSH
12635: LD_INT 15
12637: PUSH
12638: LD_INT 16
12640: PUSH
12641: LD_INT 22
12643: PUSH
12644: LD_INT 26
12646: PUSH
12647: LD_INT 36
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 101
12664: PUSH
12665: LD_INT 102
12667: PUSH
12668: LD_INT 105
12670: PUSH
12671: LD_INT 106
12673: PUSH
12674: LD_INT 108
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: ST_TO_ADDR
12688: GO 15383
12690: LD_INT 4
12692: DOUBLE
12693: EQUAL
12694: IFTRUE 12698
12696: GO 12782
12698: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12699: LD_ADDR_VAR 0 1
12703: PUSH
12704: LD_INT 2
12706: PUSH
12707: LD_INT 4
12709: PUSH
12710: LD_INT 5
12712: PUSH
12713: LD_INT 8
12715: PUSH
12716: LD_INT 11
12718: PUSH
12719: LD_INT 12
12721: PUSH
12722: LD_INT 15
12724: PUSH
12725: LD_INT 16
12727: PUSH
12728: LD_INT 22
12730: PUSH
12731: LD_INT 23
12733: PUSH
12734: LD_INT 26
12736: PUSH
12737: LD_INT 36
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: PUSH
12754: LD_INT 101
12756: PUSH
12757: LD_INT 102
12759: PUSH
12760: LD_INT 105
12762: PUSH
12763: LD_INT 106
12765: PUSH
12766: LD_INT 108
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: ST_TO_ADDR
12780: GO 15383
12782: LD_INT 5
12784: DOUBLE
12785: EQUAL
12786: IFTRUE 12790
12788: GO 12890
12790: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12791: LD_ADDR_VAR 0 1
12795: PUSH
12796: LD_INT 2
12798: PUSH
12799: LD_INT 4
12801: PUSH
12802: LD_INT 5
12804: PUSH
12805: LD_INT 6
12807: PUSH
12808: LD_INT 8
12810: PUSH
12811: LD_INT 11
12813: PUSH
12814: LD_INT 12
12816: PUSH
12817: LD_INT 15
12819: PUSH
12820: LD_INT 16
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_INT 23
12828: PUSH
12829: LD_INT 25
12831: PUSH
12832: LD_INT 26
12834: PUSH
12835: LD_INT 36
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 101
12856: PUSH
12857: LD_INT 102
12859: PUSH
12860: LD_INT 105
12862: PUSH
12863: LD_INT 106
12865: PUSH
12866: LD_INT 108
12868: PUSH
12869: LD_INT 109
12871: PUSH
12872: LD_INT 112
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: ST_TO_ADDR
12888: GO 15383
12890: LD_INT 6
12892: DOUBLE
12893: EQUAL
12894: IFTRUE 12898
12896: GO 13018
12898: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12899: LD_ADDR_VAR 0 1
12903: PUSH
12904: LD_INT 2
12906: PUSH
12907: LD_INT 4
12909: PUSH
12910: LD_INT 5
12912: PUSH
12913: LD_INT 6
12915: PUSH
12916: LD_INT 8
12918: PUSH
12919: LD_INT 11
12921: PUSH
12922: LD_INT 12
12924: PUSH
12925: LD_INT 15
12927: PUSH
12928: LD_INT 16
12930: PUSH
12931: LD_INT 20
12933: PUSH
12934: LD_INT 21
12936: PUSH
12937: LD_INT 22
12939: PUSH
12940: LD_INT 23
12942: PUSH
12943: LD_INT 25
12945: PUSH
12946: LD_INT 26
12948: PUSH
12949: LD_INT 30
12951: PUSH
12952: LD_INT 31
12954: PUSH
12955: LD_INT 32
12957: PUSH
12958: LD_INT 36
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 101
12984: PUSH
12985: LD_INT 102
12987: PUSH
12988: LD_INT 105
12990: PUSH
12991: LD_INT 106
12993: PUSH
12994: LD_INT 108
12996: PUSH
12997: LD_INT 109
12999: PUSH
13000: LD_INT 112
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: ST_TO_ADDR
13016: GO 15383
13018: LD_INT 7
13020: DOUBLE
13021: EQUAL
13022: IFTRUE 13026
13024: GO 13126
13026: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
13027: LD_ADDR_VAR 0 1
13031: PUSH
13032: LD_INT 2
13034: PUSH
13035: LD_INT 4
13037: PUSH
13038: LD_INT 5
13040: PUSH
13041: LD_INT 7
13043: PUSH
13044: LD_INT 11
13046: PUSH
13047: LD_INT 12
13049: PUSH
13050: LD_INT 15
13052: PUSH
13053: LD_INT 16
13055: PUSH
13056: LD_INT 20
13058: PUSH
13059: LD_INT 21
13061: PUSH
13062: LD_INT 22
13064: PUSH
13065: LD_INT 23
13067: PUSH
13068: LD_INT 25
13070: PUSH
13071: LD_INT 26
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 101
13092: PUSH
13093: LD_INT 102
13095: PUSH
13096: LD_INT 103
13098: PUSH
13099: LD_INT 105
13101: PUSH
13102: LD_INT 106
13104: PUSH
13105: LD_INT 108
13107: PUSH
13108: LD_INT 112
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: ST_TO_ADDR
13124: GO 15383
13126: LD_INT 8
13128: DOUBLE
13129: EQUAL
13130: IFTRUE 13134
13132: GO 13262
13134: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13135: LD_ADDR_VAR 0 1
13139: PUSH
13140: LD_INT 2
13142: PUSH
13143: LD_INT 4
13145: PUSH
13146: LD_INT 5
13148: PUSH
13149: LD_INT 6
13151: PUSH
13152: LD_INT 7
13154: PUSH
13155: LD_INT 8
13157: PUSH
13158: LD_INT 11
13160: PUSH
13161: LD_INT 12
13163: PUSH
13164: LD_INT 15
13166: PUSH
13167: LD_INT 16
13169: PUSH
13170: LD_INT 20
13172: PUSH
13173: LD_INT 21
13175: PUSH
13176: LD_INT 22
13178: PUSH
13179: LD_INT 23
13181: PUSH
13182: LD_INT 25
13184: PUSH
13185: LD_INT 26
13187: PUSH
13188: LD_INT 30
13190: PUSH
13191: LD_INT 31
13193: PUSH
13194: LD_INT 32
13196: PUSH
13197: LD_INT 36
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: PUSH
13222: LD_INT 101
13224: PUSH
13225: LD_INT 102
13227: PUSH
13228: LD_INT 103
13230: PUSH
13231: LD_INT 105
13233: PUSH
13234: LD_INT 106
13236: PUSH
13237: LD_INT 108
13239: PUSH
13240: LD_INT 109
13242: PUSH
13243: LD_INT 112
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: ST_TO_ADDR
13260: GO 15383
13262: LD_INT 9
13264: DOUBLE
13265: EQUAL
13266: IFTRUE 13270
13268: GO 13406
13270: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13271: LD_ADDR_VAR 0 1
13275: PUSH
13276: LD_INT 2
13278: PUSH
13279: LD_INT 4
13281: PUSH
13282: LD_INT 5
13284: PUSH
13285: LD_INT 6
13287: PUSH
13288: LD_INT 7
13290: PUSH
13291: LD_INT 8
13293: PUSH
13294: LD_INT 11
13296: PUSH
13297: LD_INT 12
13299: PUSH
13300: LD_INT 15
13302: PUSH
13303: LD_INT 16
13305: PUSH
13306: LD_INT 20
13308: PUSH
13309: LD_INT 21
13311: PUSH
13312: LD_INT 22
13314: PUSH
13315: LD_INT 23
13317: PUSH
13318: LD_INT 25
13320: PUSH
13321: LD_INT 26
13323: PUSH
13324: LD_INT 28
13326: PUSH
13327: LD_INT 30
13329: PUSH
13330: LD_INT 31
13332: PUSH
13333: LD_INT 32
13335: PUSH
13336: LD_INT 36
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 101
13364: PUSH
13365: LD_INT 102
13367: PUSH
13368: LD_INT 103
13370: PUSH
13371: LD_INT 105
13373: PUSH
13374: LD_INT 106
13376: PUSH
13377: LD_INT 108
13379: PUSH
13380: LD_INT 109
13382: PUSH
13383: LD_INT 112
13385: PUSH
13386: LD_INT 114
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: ST_TO_ADDR
13404: GO 15383
13406: LD_INT 10
13408: DOUBLE
13409: EQUAL
13410: IFTRUE 13414
13412: GO 13598
13414: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13415: LD_ADDR_VAR 0 1
13419: PUSH
13420: LD_INT 2
13422: PUSH
13423: LD_INT 4
13425: PUSH
13426: LD_INT 5
13428: PUSH
13429: LD_INT 6
13431: PUSH
13432: LD_INT 7
13434: PUSH
13435: LD_INT 8
13437: PUSH
13438: LD_INT 9
13440: PUSH
13441: LD_INT 10
13443: PUSH
13444: LD_INT 11
13446: PUSH
13447: LD_INT 12
13449: PUSH
13450: LD_INT 13
13452: PUSH
13453: LD_INT 14
13455: PUSH
13456: LD_INT 15
13458: PUSH
13459: LD_INT 16
13461: PUSH
13462: LD_INT 17
13464: PUSH
13465: LD_INT 18
13467: PUSH
13468: LD_INT 19
13470: PUSH
13471: LD_INT 20
13473: PUSH
13474: LD_INT 21
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_INT 23
13482: PUSH
13483: LD_INT 24
13485: PUSH
13486: LD_INT 25
13488: PUSH
13489: LD_INT 26
13491: PUSH
13492: LD_INT 28
13494: PUSH
13495: LD_INT 30
13497: PUSH
13498: LD_INT 31
13500: PUSH
13501: LD_INT 32
13503: PUSH
13504: LD_INT 36
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 101
13540: PUSH
13541: LD_INT 102
13543: PUSH
13544: LD_INT 103
13546: PUSH
13547: LD_INT 104
13549: PUSH
13550: LD_INT 105
13552: PUSH
13553: LD_INT 106
13555: PUSH
13556: LD_INT 107
13558: PUSH
13559: LD_INT 108
13561: PUSH
13562: LD_INT 109
13564: PUSH
13565: LD_INT 110
13567: PUSH
13568: LD_INT 111
13570: PUSH
13571: LD_INT 112
13573: PUSH
13574: LD_INT 114
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: ST_TO_ADDR
13596: GO 15383
13598: LD_INT 11
13600: DOUBLE
13601: EQUAL
13602: IFTRUE 13606
13604: GO 13798
13606: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13607: LD_ADDR_VAR 0 1
13611: PUSH
13612: LD_INT 2
13614: PUSH
13615: LD_INT 3
13617: PUSH
13618: LD_INT 4
13620: PUSH
13621: LD_INT 5
13623: PUSH
13624: LD_INT 6
13626: PUSH
13627: LD_INT 7
13629: PUSH
13630: LD_INT 8
13632: PUSH
13633: LD_INT 9
13635: PUSH
13636: LD_INT 10
13638: PUSH
13639: LD_INT 11
13641: PUSH
13642: LD_INT 12
13644: PUSH
13645: LD_INT 13
13647: PUSH
13648: LD_INT 14
13650: PUSH
13651: LD_INT 15
13653: PUSH
13654: LD_INT 16
13656: PUSH
13657: LD_INT 17
13659: PUSH
13660: LD_INT 18
13662: PUSH
13663: LD_INT 19
13665: PUSH
13666: LD_INT 20
13668: PUSH
13669: LD_INT 21
13671: PUSH
13672: LD_INT 22
13674: PUSH
13675: LD_INT 23
13677: PUSH
13678: LD_INT 24
13680: PUSH
13681: LD_INT 25
13683: PUSH
13684: LD_INT 26
13686: PUSH
13687: LD_INT 28
13689: PUSH
13690: LD_INT 30
13692: PUSH
13693: LD_INT 31
13695: PUSH
13696: LD_INT 32
13698: PUSH
13699: LD_INT 34
13701: PUSH
13702: LD_INT 36
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 101
13740: PUSH
13741: LD_INT 102
13743: PUSH
13744: LD_INT 103
13746: PUSH
13747: LD_INT 104
13749: PUSH
13750: LD_INT 105
13752: PUSH
13753: LD_INT 106
13755: PUSH
13756: LD_INT 107
13758: PUSH
13759: LD_INT 108
13761: PUSH
13762: LD_INT 109
13764: PUSH
13765: LD_INT 110
13767: PUSH
13768: LD_INT 111
13770: PUSH
13771: LD_INT 112
13773: PUSH
13774: LD_INT 114
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: ST_TO_ADDR
13796: GO 15383
13798: LD_INT 12
13800: DOUBLE
13801: EQUAL
13802: IFTRUE 13806
13804: GO 14014
13806: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13807: LD_ADDR_VAR 0 1
13811: PUSH
13812: LD_INT 1
13814: PUSH
13815: LD_INT 2
13817: PUSH
13818: LD_INT 3
13820: PUSH
13821: LD_INT 4
13823: PUSH
13824: LD_INT 5
13826: PUSH
13827: LD_INT 6
13829: PUSH
13830: LD_INT 7
13832: PUSH
13833: LD_INT 8
13835: PUSH
13836: LD_INT 9
13838: PUSH
13839: LD_INT 10
13841: PUSH
13842: LD_INT 11
13844: PUSH
13845: LD_INT 12
13847: PUSH
13848: LD_INT 13
13850: PUSH
13851: LD_INT 14
13853: PUSH
13854: LD_INT 15
13856: PUSH
13857: LD_INT 16
13859: PUSH
13860: LD_INT 17
13862: PUSH
13863: LD_INT 18
13865: PUSH
13866: LD_INT 19
13868: PUSH
13869: LD_INT 20
13871: PUSH
13872: LD_INT 21
13874: PUSH
13875: LD_INT 22
13877: PUSH
13878: LD_INT 23
13880: PUSH
13881: LD_INT 24
13883: PUSH
13884: LD_INT 25
13886: PUSH
13887: LD_INT 26
13889: PUSH
13890: LD_INT 27
13892: PUSH
13893: LD_INT 28
13895: PUSH
13896: LD_INT 30
13898: PUSH
13899: LD_INT 31
13901: PUSH
13902: LD_INT 32
13904: PUSH
13905: LD_INT 33
13907: PUSH
13908: LD_INT 34
13910: PUSH
13911: LD_INT 36
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: PUSH
13950: LD_INT 101
13952: PUSH
13953: LD_INT 102
13955: PUSH
13956: LD_INT 103
13958: PUSH
13959: LD_INT 104
13961: PUSH
13962: LD_INT 105
13964: PUSH
13965: LD_INT 106
13967: PUSH
13968: LD_INT 107
13970: PUSH
13971: LD_INT 108
13973: PUSH
13974: LD_INT 109
13976: PUSH
13977: LD_INT 110
13979: PUSH
13980: LD_INT 111
13982: PUSH
13983: LD_INT 112
13985: PUSH
13986: LD_INT 113
13988: PUSH
13989: LD_INT 114
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: ST_TO_ADDR
14012: GO 15383
14014: LD_INT 13
14016: DOUBLE
14017: EQUAL
14018: IFTRUE 14022
14020: GO 14218
14022: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
14023: LD_ADDR_VAR 0 1
14027: PUSH
14028: LD_INT 1
14030: PUSH
14031: LD_INT 2
14033: PUSH
14034: LD_INT 3
14036: PUSH
14037: LD_INT 4
14039: PUSH
14040: LD_INT 5
14042: PUSH
14043: LD_INT 8
14045: PUSH
14046: LD_INT 9
14048: PUSH
14049: LD_INT 10
14051: PUSH
14052: LD_INT 11
14054: PUSH
14055: LD_INT 12
14057: PUSH
14058: LD_INT 14
14060: PUSH
14061: LD_INT 15
14063: PUSH
14064: LD_INT 16
14066: PUSH
14067: LD_INT 17
14069: PUSH
14070: LD_INT 18
14072: PUSH
14073: LD_INT 19
14075: PUSH
14076: LD_INT 20
14078: PUSH
14079: LD_INT 21
14081: PUSH
14082: LD_INT 22
14084: PUSH
14085: LD_INT 23
14087: PUSH
14088: LD_INT 24
14090: PUSH
14091: LD_INT 25
14093: PUSH
14094: LD_INT 26
14096: PUSH
14097: LD_INT 27
14099: PUSH
14100: LD_INT 28
14102: PUSH
14103: LD_INT 30
14105: PUSH
14106: LD_INT 31
14108: PUSH
14109: LD_INT 32
14111: PUSH
14112: LD_INT 33
14114: PUSH
14115: LD_INT 34
14117: PUSH
14118: LD_INT 36
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 101
14156: PUSH
14157: LD_INT 102
14159: PUSH
14160: LD_INT 103
14162: PUSH
14163: LD_INT 104
14165: PUSH
14166: LD_INT 105
14168: PUSH
14169: LD_INT 106
14171: PUSH
14172: LD_INT 107
14174: PUSH
14175: LD_INT 108
14177: PUSH
14178: LD_INT 109
14180: PUSH
14181: LD_INT 110
14183: PUSH
14184: LD_INT 111
14186: PUSH
14187: LD_INT 112
14189: PUSH
14190: LD_INT 113
14192: PUSH
14193: LD_INT 114
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: ST_TO_ADDR
14216: GO 15383
14218: LD_INT 14
14220: DOUBLE
14221: EQUAL
14222: IFTRUE 14226
14224: GO 14438
14226: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14227: LD_ADDR_VAR 0 1
14231: PUSH
14232: LD_INT 1
14234: PUSH
14235: LD_INT 2
14237: PUSH
14238: LD_INT 3
14240: PUSH
14241: LD_INT 4
14243: PUSH
14244: LD_INT 5
14246: PUSH
14247: LD_INT 6
14249: PUSH
14250: LD_INT 7
14252: PUSH
14253: LD_INT 8
14255: PUSH
14256: LD_INT 9
14258: PUSH
14259: LD_INT 10
14261: PUSH
14262: LD_INT 11
14264: PUSH
14265: LD_INT 12
14267: PUSH
14268: LD_INT 13
14270: PUSH
14271: LD_INT 14
14273: PUSH
14274: LD_INT 15
14276: PUSH
14277: LD_INT 16
14279: PUSH
14280: LD_INT 17
14282: PUSH
14283: LD_INT 18
14285: PUSH
14286: LD_INT 19
14288: PUSH
14289: LD_INT 20
14291: PUSH
14292: LD_INT 21
14294: PUSH
14295: LD_INT 22
14297: PUSH
14298: LD_INT 23
14300: PUSH
14301: LD_INT 24
14303: PUSH
14304: LD_INT 25
14306: PUSH
14307: LD_INT 26
14309: PUSH
14310: LD_INT 27
14312: PUSH
14313: LD_INT 28
14315: PUSH
14316: LD_INT 29
14318: PUSH
14319: LD_INT 30
14321: PUSH
14322: LD_INT 31
14324: PUSH
14325: LD_INT 32
14327: PUSH
14328: LD_INT 33
14330: PUSH
14331: LD_INT 34
14333: PUSH
14334: LD_INT 36
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 101
14376: PUSH
14377: LD_INT 102
14379: PUSH
14380: LD_INT 103
14382: PUSH
14383: LD_INT 104
14385: PUSH
14386: LD_INT 105
14388: PUSH
14389: LD_INT 106
14391: PUSH
14392: LD_INT 107
14394: PUSH
14395: LD_INT 108
14397: PUSH
14398: LD_INT 109
14400: PUSH
14401: LD_INT 110
14403: PUSH
14404: LD_INT 111
14406: PUSH
14407: LD_INT 112
14409: PUSH
14410: LD_INT 113
14412: PUSH
14413: LD_INT 114
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: ST_TO_ADDR
14436: GO 15383
14438: LD_INT 15
14440: DOUBLE
14441: EQUAL
14442: IFTRUE 14446
14444: GO 14658
14446: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14447: LD_ADDR_VAR 0 1
14451: PUSH
14452: LD_INT 1
14454: PUSH
14455: LD_INT 2
14457: PUSH
14458: LD_INT 3
14460: PUSH
14461: LD_INT 4
14463: PUSH
14464: LD_INT 5
14466: PUSH
14467: LD_INT 6
14469: PUSH
14470: LD_INT 7
14472: PUSH
14473: LD_INT 8
14475: PUSH
14476: LD_INT 9
14478: PUSH
14479: LD_INT 10
14481: PUSH
14482: LD_INT 11
14484: PUSH
14485: LD_INT 12
14487: PUSH
14488: LD_INT 13
14490: PUSH
14491: LD_INT 14
14493: PUSH
14494: LD_INT 15
14496: PUSH
14497: LD_INT 16
14499: PUSH
14500: LD_INT 17
14502: PUSH
14503: LD_INT 18
14505: PUSH
14506: LD_INT 19
14508: PUSH
14509: LD_INT 20
14511: PUSH
14512: LD_INT 21
14514: PUSH
14515: LD_INT 22
14517: PUSH
14518: LD_INT 23
14520: PUSH
14521: LD_INT 24
14523: PUSH
14524: LD_INT 25
14526: PUSH
14527: LD_INT 26
14529: PUSH
14530: LD_INT 27
14532: PUSH
14533: LD_INT 28
14535: PUSH
14536: LD_INT 29
14538: PUSH
14539: LD_INT 30
14541: PUSH
14542: LD_INT 31
14544: PUSH
14545: LD_INT 32
14547: PUSH
14548: LD_INT 33
14550: PUSH
14551: LD_INT 34
14553: PUSH
14554: LD_INT 36
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 101
14596: PUSH
14597: LD_INT 102
14599: PUSH
14600: LD_INT 103
14602: PUSH
14603: LD_INT 104
14605: PUSH
14606: LD_INT 105
14608: PUSH
14609: LD_INT 106
14611: PUSH
14612: LD_INT 107
14614: PUSH
14615: LD_INT 108
14617: PUSH
14618: LD_INT 109
14620: PUSH
14621: LD_INT 110
14623: PUSH
14624: LD_INT 111
14626: PUSH
14627: LD_INT 112
14629: PUSH
14630: LD_INT 113
14632: PUSH
14633: LD_INT 114
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: ST_TO_ADDR
14656: GO 15383
14658: LD_INT 16
14660: DOUBLE
14661: EQUAL
14662: IFTRUE 14666
14664: GO 14790
14666: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14667: LD_ADDR_VAR 0 1
14671: PUSH
14672: LD_INT 2
14674: PUSH
14675: LD_INT 4
14677: PUSH
14678: LD_INT 5
14680: PUSH
14681: LD_INT 7
14683: PUSH
14684: LD_INT 11
14686: PUSH
14687: LD_INT 12
14689: PUSH
14690: LD_INT 15
14692: PUSH
14693: LD_INT 16
14695: PUSH
14696: LD_INT 20
14698: PUSH
14699: LD_INT 21
14701: PUSH
14702: LD_INT 22
14704: PUSH
14705: LD_INT 23
14707: PUSH
14708: LD_INT 25
14710: PUSH
14711: LD_INT 26
14713: PUSH
14714: LD_INT 30
14716: PUSH
14717: LD_INT 31
14719: PUSH
14720: LD_INT 32
14722: PUSH
14723: LD_INT 33
14725: PUSH
14726: LD_INT 34
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: PUSH
14750: LD_INT 101
14752: PUSH
14753: LD_INT 102
14755: PUSH
14756: LD_INT 103
14758: PUSH
14759: LD_INT 106
14761: PUSH
14762: LD_INT 108
14764: PUSH
14765: LD_INT 112
14767: PUSH
14768: LD_INT 113
14770: PUSH
14771: LD_INT 114
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: ST_TO_ADDR
14788: GO 15383
14790: LD_INT 17
14792: DOUBLE
14793: EQUAL
14794: IFTRUE 14798
14796: GO 15010
14798: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14799: LD_ADDR_VAR 0 1
14803: PUSH
14804: LD_INT 1
14806: PUSH
14807: LD_INT 2
14809: PUSH
14810: LD_INT 3
14812: PUSH
14813: LD_INT 4
14815: PUSH
14816: LD_INT 5
14818: PUSH
14819: LD_INT 6
14821: PUSH
14822: LD_INT 7
14824: PUSH
14825: LD_INT 8
14827: PUSH
14828: LD_INT 9
14830: PUSH
14831: LD_INT 10
14833: PUSH
14834: LD_INT 11
14836: PUSH
14837: LD_INT 12
14839: PUSH
14840: LD_INT 13
14842: PUSH
14843: LD_INT 14
14845: PUSH
14846: LD_INT 15
14848: PUSH
14849: LD_INT 16
14851: PUSH
14852: LD_INT 17
14854: PUSH
14855: LD_INT 18
14857: PUSH
14858: LD_INT 19
14860: PUSH
14861: LD_INT 20
14863: PUSH
14864: LD_INT 21
14866: PUSH
14867: LD_INT 22
14869: PUSH
14870: LD_INT 23
14872: PUSH
14873: LD_INT 24
14875: PUSH
14876: LD_INT 25
14878: PUSH
14879: LD_INT 26
14881: PUSH
14882: LD_INT 27
14884: PUSH
14885: LD_INT 28
14887: PUSH
14888: LD_INT 29
14890: PUSH
14891: LD_INT 30
14893: PUSH
14894: LD_INT 31
14896: PUSH
14897: LD_INT 32
14899: PUSH
14900: LD_INT 33
14902: PUSH
14903: LD_INT 34
14905: PUSH
14906: LD_INT 36
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 101
14948: PUSH
14949: LD_INT 102
14951: PUSH
14952: LD_INT 103
14954: PUSH
14955: LD_INT 104
14957: PUSH
14958: LD_INT 105
14960: PUSH
14961: LD_INT 106
14963: PUSH
14964: LD_INT 107
14966: PUSH
14967: LD_INT 108
14969: PUSH
14970: LD_INT 109
14972: PUSH
14973: LD_INT 110
14975: PUSH
14976: LD_INT 111
14978: PUSH
14979: LD_INT 112
14981: PUSH
14982: LD_INT 113
14984: PUSH
14985: LD_INT 114
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: ST_TO_ADDR
15008: GO 15383
15010: LD_INT 18
15012: DOUBLE
15013: EQUAL
15014: IFTRUE 15018
15016: GO 15154
15018: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
15019: LD_ADDR_VAR 0 1
15023: PUSH
15024: LD_INT 2
15026: PUSH
15027: LD_INT 4
15029: PUSH
15030: LD_INT 5
15032: PUSH
15033: LD_INT 7
15035: PUSH
15036: LD_INT 11
15038: PUSH
15039: LD_INT 12
15041: PUSH
15042: LD_INT 15
15044: PUSH
15045: LD_INT 16
15047: PUSH
15048: LD_INT 20
15050: PUSH
15051: LD_INT 21
15053: PUSH
15054: LD_INT 22
15056: PUSH
15057: LD_INT 23
15059: PUSH
15060: LD_INT 25
15062: PUSH
15063: LD_INT 26
15065: PUSH
15066: LD_INT 30
15068: PUSH
15069: LD_INT 31
15071: PUSH
15072: LD_INT 32
15074: PUSH
15075: LD_INT 33
15077: PUSH
15078: LD_INT 34
15080: PUSH
15081: LD_INT 35
15083: PUSH
15084: LD_INT 36
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 101
15112: PUSH
15113: LD_INT 102
15115: PUSH
15116: LD_INT 103
15118: PUSH
15119: LD_INT 106
15121: PUSH
15122: LD_INT 108
15124: PUSH
15125: LD_INT 112
15127: PUSH
15128: LD_INT 113
15130: PUSH
15131: LD_INT 114
15133: PUSH
15134: LD_INT 115
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: ST_TO_ADDR
15152: GO 15383
15154: LD_INT 19
15156: DOUBLE
15157: EQUAL
15158: IFTRUE 15162
15160: GO 15382
15162: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15163: LD_ADDR_VAR 0 1
15167: PUSH
15168: LD_INT 1
15170: PUSH
15171: LD_INT 2
15173: PUSH
15174: LD_INT 3
15176: PUSH
15177: LD_INT 4
15179: PUSH
15180: LD_INT 5
15182: PUSH
15183: LD_INT 6
15185: PUSH
15186: LD_INT 7
15188: PUSH
15189: LD_INT 8
15191: PUSH
15192: LD_INT 9
15194: PUSH
15195: LD_INT 10
15197: PUSH
15198: LD_INT 11
15200: PUSH
15201: LD_INT 12
15203: PUSH
15204: LD_INT 13
15206: PUSH
15207: LD_INT 14
15209: PUSH
15210: LD_INT 15
15212: PUSH
15213: LD_INT 16
15215: PUSH
15216: LD_INT 17
15218: PUSH
15219: LD_INT 18
15221: PUSH
15222: LD_INT 19
15224: PUSH
15225: LD_INT 20
15227: PUSH
15228: LD_INT 21
15230: PUSH
15231: LD_INT 22
15233: PUSH
15234: LD_INT 23
15236: PUSH
15237: LD_INT 24
15239: PUSH
15240: LD_INT 25
15242: PUSH
15243: LD_INT 26
15245: PUSH
15246: LD_INT 27
15248: PUSH
15249: LD_INT 28
15251: PUSH
15252: LD_INT 29
15254: PUSH
15255: LD_INT 30
15257: PUSH
15258: LD_INT 31
15260: PUSH
15261: LD_INT 32
15263: PUSH
15264: LD_INT 33
15266: PUSH
15267: LD_INT 34
15269: PUSH
15270: LD_INT 35
15272: PUSH
15273: LD_INT 36
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 101
15316: PUSH
15317: LD_INT 102
15319: PUSH
15320: LD_INT 103
15322: PUSH
15323: LD_INT 104
15325: PUSH
15326: LD_INT 105
15328: PUSH
15329: LD_INT 106
15331: PUSH
15332: LD_INT 107
15334: PUSH
15335: LD_INT 108
15337: PUSH
15338: LD_INT 109
15340: PUSH
15341: LD_INT 110
15343: PUSH
15344: LD_INT 111
15346: PUSH
15347: LD_INT 112
15349: PUSH
15350: LD_INT 113
15352: PUSH
15353: LD_INT 114
15355: PUSH
15356: LD_INT 115
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: ST_TO_ADDR
15380: GO 15383
15382: POP
// end else
15383: GO 15602
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15385: LD_ADDR_VAR 0 1
15389: PUSH
15390: LD_INT 1
15392: PUSH
15393: LD_INT 2
15395: PUSH
15396: LD_INT 3
15398: PUSH
15399: LD_INT 4
15401: PUSH
15402: LD_INT 5
15404: PUSH
15405: LD_INT 6
15407: PUSH
15408: LD_INT 7
15410: PUSH
15411: LD_INT 8
15413: PUSH
15414: LD_INT 9
15416: PUSH
15417: LD_INT 10
15419: PUSH
15420: LD_INT 11
15422: PUSH
15423: LD_INT 12
15425: PUSH
15426: LD_INT 13
15428: PUSH
15429: LD_INT 14
15431: PUSH
15432: LD_INT 15
15434: PUSH
15435: LD_INT 16
15437: PUSH
15438: LD_INT 17
15440: PUSH
15441: LD_INT 18
15443: PUSH
15444: LD_INT 19
15446: PUSH
15447: LD_INT 20
15449: PUSH
15450: LD_INT 21
15452: PUSH
15453: LD_INT 22
15455: PUSH
15456: LD_INT 23
15458: PUSH
15459: LD_INT 24
15461: PUSH
15462: LD_INT 25
15464: PUSH
15465: LD_INT 26
15467: PUSH
15468: LD_INT 27
15470: PUSH
15471: LD_INT 28
15473: PUSH
15474: LD_INT 29
15476: PUSH
15477: LD_INT 30
15479: PUSH
15480: LD_INT 31
15482: PUSH
15483: LD_INT 32
15485: PUSH
15486: LD_INT 33
15488: PUSH
15489: LD_INT 34
15491: PUSH
15492: LD_INT 35
15494: PUSH
15495: LD_INT 36
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 101
15538: PUSH
15539: LD_INT 102
15541: PUSH
15542: LD_INT 103
15544: PUSH
15545: LD_INT 104
15547: PUSH
15548: LD_INT 105
15550: PUSH
15551: LD_INT 106
15553: PUSH
15554: LD_INT 107
15556: PUSH
15557: LD_INT 108
15559: PUSH
15560: LD_INT 109
15562: PUSH
15563: LD_INT 110
15565: PUSH
15566: LD_INT 111
15568: PUSH
15569: LD_INT 112
15571: PUSH
15572: LD_INT 113
15574: PUSH
15575: LD_INT 114
15577: PUSH
15578: LD_INT 115
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: ST_TO_ADDR
// if result then
15602: LD_VAR 0 1
15606: IFFALSE 15895
// begin normal :=  ;
15608: LD_ADDR_VAR 0 3
15612: PUSH
15613: LD_STRING 
15615: ST_TO_ADDR
// hardcore :=  ;
15616: LD_ADDR_VAR 0 4
15620: PUSH
15621: LD_STRING 
15623: ST_TO_ADDR
// for i = 1 to normalCounter do
15624: LD_ADDR_VAR 0 5
15628: PUSH
15629: DOUBLE
15630: LD_INT 1
15632: DEC
15633: ST_TO_ADDR
15634: LD_EXP 39
15638: PUSH
15639: FOR_TO
15640: IFFALSE 15741
// begin tmp := 0 ;
15642: LD_ADDR_VAR 0 2
15646: PUSH
15647: LD_STRING 0
15649: ST_TO_ADDR
// if result [ 1 ] then
15650: LD_VAR 0 1
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: IFFALSE 15723
// if result [ 1 ] [ 1 ] = i then
15660: LD_VAR 0 1
15664: PUSH
15665: LD_INT 1
15667: ARRAY
15668: PUSH
15669: LD_INT 1
15671: ARRAY
15672: PUSH
15673: LD_VAR 0 5
15677: EQUAL
15678: IFFALSE 15723
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15680: LD_ADDR_VAR 0 1
15684: PUSH
15685: LD_VAR 0 1
15689: PPUSH
15690: LD_INT 1
15692: PPUSH
15693: LD_VAR 0 1
15697: PUSH
15698: LD_INT 1
15700: ARRAY
15701: PPUSH
15702: LD_INT 1
15704: PPUSH
15705: CALL_OW 3
15709: PPUSH
15710: CALL_OW 1
15714: ST_TO_ADDR
// tmp := 1 ;
15715: LD_ADDR_VAR 0 2
15719: PUSH
15720: LD_STRING 1
15722: ST_TO_ADDR
// end ; normal := normal & tmp ;
15723: LD_ADDR_VAR 0 3
15727: PUSH
15728: LD_VAR 0 3
15732: PUSH
15733: LD_VAR 0 2
15737: STR
15738: ST_TO_ADDR
// end ;
15739: GO 15639
15741: POP
15742: POP
// for i = 1 to hardcoreCounter do
15743: LD_ADDR_VAR 0 5
15747: PUSH
15748: DOUBLE
15749: LD_INT 1
15751: DEC
15752: ST_TO_ADDR
15753: LD_EXP 40
15757: PUSH
15758: FOR_TO
15759: IFFALSE 15864
// begin tmp := 0 ;
15761: LD_ADDR_VAR 0 2
15765: PUSH
15766: LD_STRING 0
15768: ST_TO_ADDR
// if result [ 2 ] then
15769: LD_VAR 0 1
15773: PUSH
15774: LD_INT 2
15776: ARRAY
15777: IFFALSE 15846
// if result [ 2 ] [ 1 ] = 100 + i then
15779: LD_VAR 0 1
15783: PUSH
15784: LD_INT 2
15786: ARRAY
15787: PUSH
15788: LD_INT 1
15790: ARRAY
15791: PUSH
15792: LD_INT 100
15794: PUSH
15795: LD_VAR 0 5
15799: PLUS
15800: EQUAL
15801: IFFALSE 15846
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15803: LD_ADDR_VAR 0 1
15807: PUSH
15808: LD_VAR 0 1
15812: PPUSH
15813: LD_INT 2
15815: PPUSH
15816: LD_VAR 0 1
15820: PUSH
15821: LD_INT 2
15823: ARRAY
15824: PPUSH
15825: LD_INT 1
15827: PPUSH
15828: CALL_OW 3
15832: PPUSH
15833: CALL_OW 1
15837: ST_TO_ADDR
// tmp := 1 ;
15838: LD_ADDR_VAR 0 2
15842: PUSH
15843: LD_STRING 1
15845: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15846: LD_ADDR_VAR 0 4
15850: PUSH
15851: LD_VAR 0 4
15855: PUSH
15856: LD_VAR 0 2
15860: STR
15861: ST_TO_ADDR
// end ;
15862: GO 15758
15864: POP
15865: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15866: LD_STRING getStreamItemsFromMission("
15868: PUSH
15869: LD_VAR 0 3
15873: STR
15874: PUSH
15875: LD_STRING ","
15877: STR
15878: PUSH
15879: LD_VAR 0 4
15883: STR
15884: PUSH
15885: LD_STRING ")
15887: STR
15888: PPUSH
15889: CALL_OW 559
// end else
15893: GO 15902
// ToLua ( getStreamItemsFromMission("","") ) ;
15895: LD_STRING getStreamItemsFromMission("","")
15897: PPUSH
15898: CALL_OW 559
// end ;
15902: LD_VAR 0 1
15906: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15907: LD_EXP 38
15911: PUSH
15912: LD_EXP 43
15916: AND
15917: IFFALSE 16041
15919: GO 15921
15921: DISABLE
15922: LD_INT 0
15924: PPUSH
15925: PPUSH
// begin enable ;
15926: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15927: LD_ADDR_VAR 0 2
15931: PUSH
15932: LD_INT 22
15934: PUSH
15935: LD_OWVAR 2
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 2
15946: PUSH
15947: LD_INT 34
15949: PUSH
15950: LD_INT 7
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 34
15959: PUSH
15960: LD_INT 45
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 34
15969: PUSH
15970: LD_INT 28
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 34
15979: PUSH
15980: LD_INT 47
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PPUSH
15998: CALL_OW 69
16002: ST_TO_ADDR
// if not tmp then
16003: LD_VAR 0 2
16007: NOT
16008: IFFALSE 16012
// exit ;
16010: GO 16041
// for i in tmp do
16012: LD_ADDR_VAR 0 1
16016: PUSH
16017: LD_VAR 0 2
16021: PUSH
16022: FOR_IN
16023: IFFALSE 16039
// begin SetLives ( i , 0 ) ;
16025: LD_VAR 0 1
16029: PPUSH
16030: LD_INT 0
16032: PPUSH
16033: CALL_OW 234
// end ;
16037: GO 16022
16039: POP
16040: POP
// end ;
16041: PPOPN 2
16043: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16044: LD_EXP 38
16048: PUSH
16049: LD_EXP 44
16053: AND
16054: IFFALSE 16138
16056: GO 16058
16058: DISABLE
16059: LD_INT 0
16061: PPUSH
16062: PPUSH
// begin enable ;
16063: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16064: LD_ADDR_VAR 0 2
16068: PUSH
16069: LD_INT 22
16071: PUSH
16072: LD_OWVAR 2
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PUSH
16081: LD_INT 32
16083: PUSH
16084: LD_INT 3
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PPUSH
16095: CALL_OW 69
16099: ST_TO_ADDR
// if not tmp then
16100: LD_VAR 0 2
16104: NOT
16105: IFFALSE 16109
// exit ;
16107: GO 16138
// for i in tmp do
16109: LD_ADDR_VAR 0 1
16113: PUSH
16114: LD_VAR 0 2
16118: PUSH
16119: FOR_IN
16120: IFFALSE 16136
// begin SetLives ( i , 0 ) ;
16122: LD_VAR 0 1
16126: PPUSH
16127: LD_INT 0
16129: PPUSH
16130: CALL_OW 234
// end ;
16134: GO 16119
16136: POP
16137: POP
// end ;
16138: PPOPN 2
16140: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16141: LD_EXP 38
16145: PUSH
16146: LD_EXP 41
16150: AND
16151: IFFALSE 16244
16153: GO 16155
16155: DISABLE
16156: LD_INT 0
16158: PPUSH
// begin enable ;
16159: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16160: LD_ADDR_VAR 0 1
16164: PUSH
16165: LD_INT 22
16167: PUSH
16168: LD_OWVAR 2
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 2
16179: PUSH
16180: LD_INT 25
16182: PUSH
16183: LD_INT 5
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 25
16192: PUSH
16193: LD_INT 9
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: LD_INT 25
16202: PUSH
16203: LD_INT 8
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PPUSH
16220: CALL_OW 69
16224: PUSH
16225: FOR_IN
16226: IFFALSE 16242
// begin SetClass ( i , 1 ) ;
16228: LD_VAR 0 1
16232: PPUSH
16233: LD_INT 1
16235: PPUSH
16236: CALL_OW 336
// end ;
16240: GO 16225
16242: POP
16243: POP
// end ;
16244: PPOPN 1
16246: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16247: LD_EXP 38
16251: PUSH
16252: LD_EXP 42
16256: AND
16257: PUSH
16258: LD_OWVAR 65
16262: PUSH
16263: LD_INT 7
16265: LESS
16266: AND
16267: IFFALSE 16281
16269: GO 16271
16271: DISABLE
// begin enable ;
16272: ENABLE
// game_speed := 7 ;
16273: LD_ADDR_OWVAR 65
16277: PUSH
16278: LD_INT 7
16280: ST_TO_ADDR
// end ;
16281: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16282: LD_EXP 38
16286: PUSH
16287: LD_EXP 45
16291: AND
16292: IFFALSE 16494
16294: GO 16296
16296: DISABLE
16297: LD_INT 0
16299: PPUSH
16300: PPUSH
16301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16302: LD_ADDR_VAR 0 3
16306: PUSH
16307: LD_INT 81
16309: PUSH
16310: LD_OWVAR 2
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 21
16321: PUSH
16322: LD_INT 1
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PPUSH
16333: CALL_OW 69
16337: ST_TO_ADDR
// if not tmp then
16338: LD_VAR 0 3
16342: NOT
16343: IFFALSE 16347
// exit ;
16345: GO 16494
// if tmp > 5 then
16347: LD_VAR 0 3
16351: PUSH
16352: LD_INT 5
16354: GREATER
16355: IFFALSE 16367
// k := 5 else
16357: LD_ADDR_VAR 0 2
16361: PUSH
16362: LD_INT 5
16364: ST_TO_ADDR
16365: GO 16377
// k := tmp ;
16367: LD_ADDR_VAR 0 2
16371: PUSH
16372: LD_VAR 0 3
16376: ST_TO_ADDR
// for i := 1 to k do
16377: LD_ADDR_VAR 0 1
16381: PUSH
16382: DOUBLE
16383: LD_INT 1
16385: DEC
16386: ST_TO_ADDR
16387: LD_VAR 0 2
16391: PUSH
16392: FOR_TO
16393: IFFALSE 16492
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16395: LD_VAR 0 3
16399: PUSH
16400: LD_VAR 0 1
16404: ARRAY
16405: PPUSH
16406: LD_VAR 0 1
16410: PUSH
16411: LD_INT 4
16413: MOD
16414: PUSH
16415: LD_INT 1
16417: PLUS
16418: PPUSH
16419: CALL_OW 259
16423: PUSH
16424: LD_INT 10
16426: LESS
16427: IFFALSE 16490
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16429: LD_VAR 0 3
16433: PUSH
16434: LD_VAR 0 1
16438: ARRAY
16439: PPUSH
16440: LD_VAR 0 1
16444: PUSH
16445: LD_INT 4
16447: MOD
16448: PUSH
16449: LD_INT 1
16451: PLUS
16452: PPUSH
16453: LD_VAR 0 3
16457: PUSH
16458: LD_VAR 0 1
16462: ARRAY
16463: PPUSH
16464: LD_VAR 0 1
16468: PUSH
16469: LD_INT 4
16471: MOD
16472: PUSH
16473: LD_INT 1
16475: PLUS
16476: PPUSH
16477: CALL_OW 259
16481: PUSH
16482: LD_INT 1
16484: PLUS
16485: PPUSH
16486: CALL_OW 237
16490: GO 16392
16492: POP
16493: POP
// end ;
16494: PPOPN 3
16496: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16497: LD_EXP 38
16501: PUSH
16502: LD_EXP 46
16506: AND
16507: IFFALSE 16527
16509: GO 16511
16511: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16512: LD_INT 4
16514: PPUSH
16515: LD_OWVAR 2
16519: PPUSH
16520: LD_INT 0
16522: PPUSH
16523: CALL_OW 324
16527: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16528: LD_EXP 38
16532: PUSH
16533: LD_EXP 75
16537: AND
16538: IFFALSE 16558
16540: GO 16542
16542: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16543: LD_INT 19
16545: PPUSH
16546: LD_OWVAR 2
16550: PPUSH
16551: LD_INT 0
16553: PPUSH
16554: CALL_OW 324
16558: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16559: LD_EXP 38
16563: PUSH
16564: LD_EXP 47
16568: AND
16569: IFFALSE 16671
16571: GO 16573
16573: DISABLE
16574: LD_INT 0
16576: PPUSH
16577: PPUSH
// begin enable ;
16578: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16579: LD_ADDR_VAR 0 2
16583: PUSH
16584: LD_INT 22
16586: PUSH
16587: LD_OWVAR 2
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 2
16598: PUSH
16599: LD_INT 34
16601: PUSH
16602: LD_INT 11
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 34
16611: PUSH
16612: LD_INT 30
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: LIST
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PPUSH
16628: CALL_OW 69
16632: ST_TO_ADDR
// if not tmp then
16633: LD_VAR 0 2
16637: NOT
16638: IFFALSE 16642
// exit ;
16640: GO 16671
// for i in tmp do
16642: LD_ADDR_VAR 0 1
16646: PUSH
16647: LD_VAR 0 2
16651: PUSH
16652: FOR_IN
16653: IFFALSE 16669
// begin SetLives ( i , 0 ) ;
16655: LD_VAR 0 1
16659: PPUSH
16660: LD_INT 0
16662: PPUSH
16663: CALL_OW 234
// end ;
16667: GO 16652
16669: POP
16670: POP
// end ;
16671: PPOPN 2
16673: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16674: LD_EXP 38
16678: PUSH
16679: LD_EXP 48
16683: AND
16684: IFFALSE 16704
16686: GO 16688
16688: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16689: LD_INT 32
16691: PPUSH
16692: LD_OWVAR 2
16696: PPUSH
16697: LD_INT 0
16699: PPUSH
16700: CALL_OW 324
16704: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16705: LD_EXP 38
16709: PUSH
16710: LD_EXP 49
16714: AND
16715: IFFALSE 16896
16717: GO 16719
16719: DISABLE
16720: LD_INT 0
16722: PPUSH
16723: PPUSH
16724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16725: LD_ADDR_VAR 0 2
16729: PUSH
16730: LD_INT 22
16732: PUSH
16733: LD_OWVAR 2
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 33
16744: PUSH
16745: LD_INT 3
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PPUSH
16756: CALL_OW 69
16760: ST_TO_ADDR
// if not tmp then
16761: LD_VAR 0 2
16765: NOT
16766: IFFALSE 16770
// exit ;
16768: GO 16896
// side := 0 ;
16770: LD_ADDR_VAR 0 3
16774: PUSH
16775: LD_INT 0
16777: ST_TO_ADDR
// for i := 1 to 8 do
16778: LD_ADDR_VAR 0 1
16782: PUSH
16783: DOUBLE
16784: LD_INT 1
16786: DEC
16787: ST_TO_ADDR
16788: LD_INT 8
16790: PUSH
16791: FOR_TO
16792: IFFALSE 16840
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16794: LD_OWVAR 2
16798: PUSH
16799: LD_VAR 0 1
16803: NONEQUAL
16804: PUSH
16805: LD_OWVAR 2
16809: PPUSH
16810: LD_VAR 0 1
16814: PPUSH
16815: CALL_OW 81
16819: PUSH
16820: LD_INT 2
16822: EQUAL
16823: AND
16824: IFFALSE 16838
// begin side := i ;
16826: LD_ADDR_VAR 0 3
16830: PUSH
16831: LD_VAR 0 1
16835: ST_TO_ADDR
// break ;
16836: GO 16840
// end ;
16838: GO 16791
16840: POP
16841: POP
// if not side then
16842: LD_VAR 0 3
16846: NOT
16847: IFFALSE 16851
// exit ;
16849: GO 16896
// for i := 1 to tmp do
16851: LD_ADDR_VAR 0 1
16855: PUSH
16856: DOUBLE
16857: LD_INT 1
16859: DEC
16860: ST_TO_ADDR
16861: LD_VAR 0 2
16865: PUSH
16866: FOR_TO
16867: IFFALSE 16894
// if Prob ( 60 ) then
16869: LD_INT 60
16871: PPUSH
16872: CALL_OW 13
16876: IFFALSE 16892
// SetSide ( i , side ) ;
16878: LD_VAR 0 1
16882: PPUSH
16883: LD_VAR 0 3
16887: PPUSH
16888: CALL_OW 235
16892: GO 16866
16894: POP
16895: POP
// end ;
16896: PPOPN 3
16898: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16899: LD_EXP 38
16903: PUSH
16904: LD_EXP 51
16908: AND
16909: IFFALSE 17028
16911: GO 16913
16913: DISABLE
16914: LD_INT 0
16916: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16917: LD_ADDR_VAR 0 1
16921: PUSH
16922: LD_INT 22
16924: PUSH
16925: LD_OWVAR 2
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 21
16936: PUSH
16937: LD_INT 1
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 3
16946: PUSH
16947: LD_INT 23
16949: PUSH
16950: LD_INT 0
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: LIST
16965: PPUSH
16966: CALL_OW 69
16970: PUSH
16971: FOR_IN
16972: IFFALSE 17026
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16974: LD_VAR 0 1
16978: PPUSH
16979: CALL_OW 257
16983: PUSH
16984: LD_INT 1
16986: PUSH
16987: LD_INT 2
16989: PUSH
16990: LD_INT 3
16992: PUSH
16993: LD_INT 4
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: IN
17002: IFFALSE 17024
// SetClass ( un , rand ( 1 , 4 ) ) ;
17004: LD_VAR 0 1
17008: PPUSH
17009: LD_INT 1
17011: PPUSH
17012: LD_INT 4
17014: PPUSH
17015: CALL_OW 12
17019: PPUSH
17020: CALL_OW 336
17024: GO 16971
17026: POP
17027: POP
// end ;
17028: PPOPN 1
17030: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17031: LD_EXP 38
17035: PUSH
17036: LD_EXP 50
17040: AND
17041: IFFALSE 17120
17043: GO 17045
17045: DISABLE
17046: LD_INT 0
17048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17049: LD_ADDR_VAR 0 1
17053: PUSH
17054: LD_INT 22
17056: PUSH
17057: LD_OWVAR 2
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 21
17068: PUSH
17069: LD_INT 3
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PPUSH
17080: CALL_OW 69
17084: ST_TO_ADDR
// if not tmp then
17085: LD_VAR 0 1
17089: NOT
17090: IFFALSE 17094
// exit ;
17092: GO 17120
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17094: LD_VAR 0 1
17098: PUSH
17099: LD_INT 1
17101: PPUSH
17102: LD_VAR 0 1
17106: PPUSH
17107: CALL_OW 12
17111: ARRAY
17112: PPUSH
17113: LD_INT 100
17115: PPUSH
17116: CALL_OW 234
// end ;
17120: PPOPN 1
17122: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17123: LD_EXP 38
17127: PUSH
17128: LD_EXP 52
17132: AND
17133: IFFALSE 17231
17135: GO 17137
17137: DISABLE
17138: LD_INT 0
17140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17141: LD_ADDR_VAR 0 1
17145: PUSH
17146: LD_INT 22
17148: PUSH
17149: LD_OWVAR 2
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 21
17160: PUSH
17161: LD_INT 1
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 69
17176: ST_TO_ADDR
// if not tmp then
17177: LD_VAR 0 1
17181: NOT
17182: IFFALSE 17186
// exit ;
17184: GO 17231
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17186: LD_VAR 0 1
17190: PUSH
17191: LD_INT 1
17193: PPUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 12
17203: ARRAY
17204: PPUSH
17205: LD_INT 1
17207: PPUSH
17208: LD_INT 4
17210: PPUSH
17211: CALL_OW 12
17215: PPUSH
17216: LD_INT 3000
17218: PPUSH
17219: LD_INT 9000
17221: PPUSH
17222: CALL_OW 12
17226: PPUSH
17227: CALL_OW 492
// end ;
17231: PPOPN 1
17233: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17234: LD_EXP 38
17238: PUSH
17239: LD_EXP 53
17243: AND
17244: IFFALSE 17264
17246: GO 17248
17248: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17249: LD_INT 1
17251: PPUSH
17252: LD_OWVAR 2
17256: PPUSH
17257: LD_INT 0
17259: PPUSH
17260: CALL_OW 324
17264: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17265: LD_EXP 38
17269: PUSH
17270: LD_EXP 54
17274: AND
17275: IFFALSE 17358
17277: GO 17279
17279: DISABLE
17280: LD_INT 0
17282: PPUSH
17283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17284: LD_ADDR_VAR 0 2
17288: PUSH
17289: LD_INT 22
17291: PUSH
17292: LD_OWVAR 2
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 21
17303: PUSH
17304: LD_INT 3
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: ST_TO_ADDR
// if not tmp then
17320: LD_VAR 0 2
17324: NOT
17325: IFFALSE 17329
// exit ;
17327: GO 17358
// for i in tmp do
17329: LD_ADDR_VAR 0 1
17333: PUSH
17334: LD_VAR 0 2
17338: PUSH
17339: FOR_IN
17340: IFFALSE 17356
// SetBLevel ( i , 10 ) ;
17342: LD_VAR 0 1
17346: PPUSH
17347: LD_INT 10
17349: PPUSH
17350: CALL_OW 241
17354: GO 17339
17356: POP
17357: POP
// end ;
17358: PPOPN 2
17360: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17361: LD_EXP 38
17365: PUSH
17366: LD_EXP 55
17370: AND
17371: IFFALSE 17482
17373: GO 17375
17375: DISABLE
17376: LD_INT 0
17378: PPUSH
17379: PPUSH
17380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17381: LD_ADDR_VAR 0 3
17385: PUSH
17386: LD_INT 22
17388: PUSH
17389: LD_OWVAR 2
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 25
17400: PUSH
17401: LD_INT 1
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PPUSH
17412: CALL_OW 69
17416: ST_TO_ADDR
// if not tmp then
17417: LD_VAR 0 3
17421: NOT
17422: IFFALSE 17426
// exit ;
17424: GO 17482
// un := tmp [ rand ( 1 , tmp ) ] ;
17426: LD_ADDR_VAR 0 2
17430: PUSH
17431: LD_VAR 0 3
17435: PUSH
17436: LD_INT 1
17438: PPUSH
17439: LD_VAR 0 3
17443: PPUSH
17444: CALL_OW 12
17448: ARRAY
17449: ST_TO_ADDR
// if Crawls ( un ) then
17450: LD_VAR 0 2
17454: PPUSH
17455: CALL_OW 318
17459: IFFALSE 17470
// ComWalk ( un ) ;
17461: LD_VAR 0 2
17465: PPUSH
17466: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17470: LD_VAR 0 2
17474: PPUSH
17475: LD_INT 5
17477: PPUSH
17478: CALL_OW 336
// end ;
17482: PPOPN 3
17484: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17485: LD_EXP 38
17489: PUSH
17490: LD_EXP 56
17494: AND
17495: PUSH
17496: LD_OWVAR 67
17500: PUSH
17501: LD_INT 4
17503: LESS
17504: AND
17505: IFFALSE 17524
17507: GO 17509
17509: DISABLE
// begin Difficulty := Difficulty + 1 ;
17510: LD_ADDR_OWVAR 67
17514: PUSH
17515: LD_OWVAR 67
17519: PUSH
17520: LD_INT 1
17522: PLUS
17523: ST_TO_ADDR
// end ;
17524: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17525: LD_EXP 38
17529: PUSH
17530: LD_EXP 57
17534: AND
17535: IFFALSE 17638
17537: GO 17539
17539: DISABLE
17540: LD_INT 0
17542: PPUSH
// begin for i := 1 to 5 do
17543: LD_ADDR_VAR 0 1
17547: PUSH
17548: DOUBLE
17549: LD_INT 1
17551: DEC
17552: ST_TO_ADDR
17553: LD_INT 5
17555: PUSH
17556: FOR_TO
17557: IFFALSE 17636
// begin uc_nation := nation_nature ;
17559: LD_ADDR_OWVAR 21
17563: PUSH
17564: LD_INT 0
17566: ST_TO_ADDR
// uc_side := 0 ;
17567: LD_ADDR_OWVAR 20
17571: PUSH
17572: LD_INT 0
17574: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17575: LD_ADDR_OWVAR 29
17579: PUSH
17580: LD_INT 12
17582: PUSH
17583: LD_INT 12
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: ST_TO_ADDR
// hc_agressivity := 20 ;
17590: LD_ADDR_OWVAR 35
17594: PUSH
17595: LD_INT 20
17597: ST_TO_ADDR
// hc_class := class_tiger ;
17598: LD_ADDR_OWVAR 28
17602: PUSH
17603: LD_INT 14
17605: ST_TO_ADDR
// hc_gallery :=  ;
17606: LD_ADDR_OWVAR 33
17610: PUSH
17611: LD_STRING 
17613: ST_TO_ADDR
// hc_name :=  ;
17614: LD_ADDR_OWVAR 26
17618: PUSH
17619: LD_STRING 
17621: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17622: CALL_OW 44
17626: PPUSH
17627: LD_INT 0
17629: PPUSH
17630: CALL_OW 51
// end ;
17634: GO 17556
17636: POP
17637: POP
// end ;
17638: PPOPN 1
17640: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17641: LD_EXP 38
17645: PUSH
17646: LD_EXP 58
17650: AND
17651: IFFALSE 17660
17653: GO 17655
17655: DISABLE
// StreamSibBomb ;
17656: CALL 17661 0 0
17660: END
// export function StreamSibBomb ; var i , x , y ; begin
17661: LD_INT 0
17663: PPUSH
17664: PPUSH
17665: PPUSH
17666: PPUSH
// result := false ;
17667: LD_ADDR_VAR 0 1
17671: PUSH
17672: LD_INT 0
17674: ST_TO_ADDR
// for i := 1 to 16 do
17675: LD_ADDR_VAR 0 2
17679: PUSH
17680: DOUBLE
17681: LD_INT 1
17683: DEC
17684: ST_TO_ADDR
17685: LD_INT 16
17687: PUSH
17688: FOR_TO
17689: IFFALSE 17888
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17691: LD_ADDR_VAR 0 3
17695: PUSH
17696: LD_INT 10
17698: PUSH
17699: LD_INT 20
17701: PUSH
17702: LD_INT 30
17704: PUSH
17705: LD_INT 40
17707: PUSH
17708: LD_INT 50
17710: PUSH
17711: LD_INT 60
17713: PUSH
17714: LD_INT 70
17716: PUSH
17717: LD_INT 80
17719: PUSH
17720: LD_INT 90
17722: PUSH
17723: LD_INT 100
17725: PUSH
17726: LD_INT 110
17728: PUSH
17729: LD_INT 120
17731: PUSH
17732: LD_INT 130
17734: PUSH
17735: LD_INT 140
17737: PUSH
17738: LD_INT 150
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 1
17760: PPUSH
17761: LD_INT 15
17763: PPUSH
17764: CALL_OW 12
17768: ARRAY
17769: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17770: LD_ADDR_VAR 0 4
17774: PUSH
17775: LD_INT 10
17777: PUSH
17778: LD_INT 20
17780: PUSH
17781: LD_INT 30
17783: PUSH
17784: LD_INT 40
17786: PUSH
17787: LD_INT 50
17789: PUSH
17790: LD_INT 60
17792: PUSH
17793: LD_INT 70
17795: PUSH
17796: LD_INT 80
17798: PUSH
17799: LD_INT 90
17801: PUSH
17802: LD_INT 100
17804: PUSH
17805: LD_INT 110
17807: PUSH
17808: LD_INT 120
17810: PUSH
17811: LD_INT 130
17813: PUSH
17814: LD_INT 140
17816: PUSH
17817: LD_INT 150
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 1
17839: PPUSH
17840: LD_INT 15
17842: PPUSH
17843: CALL_OW 12
17847: ARRAY
17848: ST_TO_ADDR
// if ValidHex ( x , y ) then
17849: LD_VAR 0 3
17853: PPUSH
17854: LD_VAR 0 4
17858: PPUSH
17859: CALL_OW 488
17863: IFFALSE 17886
// begin result := [ x , y ] ;
17865: LD_ADDR_VAR 0 1
17869: PUSH
17870: LD_VAR 0 3
17874: PUSH
17875: LD_VAR 0 4
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: ST_TO_ADDR
// break ;
17884: GO 17888
// end ; end ;
17886: GO 17688
17888: POP
17889: POP
// if result then
17890: LD_VAR 0 1
17894: IFFALSE 17954
// begin ToLua ( playSibBomb() ) ;
17896: LD_STRING playSibBomb()
17898: PPUSH
17899: CALL_OW 559
// wait ( 0 0$14 ) ;
17903: LD_INT 490
17905: PPUSH
17906: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17910: LD_VAR 0 1
17914: PUSH
17915: LD_INT 1
17917: ARRAY
17918: PPUSH
17919: LD_VAR 0 1
17923: PUSH
17924: LD_INT 2
17926: ARRAY
17927: PPUSH
17928: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17932: LD_VAR 0 1
17936: PUSH
17937: LD_INT 1
17939: ARRAY
17940: PPUSH
17941: LD_VAR 0 1
17945: PUSH
17946: LD_INT 2
17948: ARRAY
17949: PPUSH
17950: CALL_OW 429
// end ; end ;
17954: LD_VAR 0 1
17958: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17959: LD_EXP 38
17963: PUSH
17964: LD_EXP 60
17968: AND
17969: IFFALSE 17981
17971: GO 17973
17973: DISABLE
// YouLost (  ) ;
17974: LD_STRING 
17976: PPUSH
17977: CALL_OW 104
17981: END
// every 0 0$1 trigger StreamModeActive and sFog do
17982: LD_EXP 38
17986: PUSH
17987: LD_EXP 59
17991: AND
17992: IFFALSE 18006
17994: GO 17996
17996: DISABLE
// FogOff ( your_side ) ;
17997: LD_OWVAR 2
18001: PPUSH
18002: CALL_OW 344
18006: END
// every 0 0$1 trigger StreamModeActive and sSun do
18007: LD_EXP 38
18011: PUSH
18012: LD_EXP 61
18016: AND
18017: IFFALSE 18045
18019: GO 18021
18021: DISABLE
// begin solar_recharge_percent := 0 ;
18022: LD_ADDR_OWVAR 79
18026: PUSH
18027: LD_INT 0
18029: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18030: LD_INT 10500
18032: PPUSH
18033: CALL_OW 67
// solar_recharge_percent := 100 ;
18037: LD_ADDR_OWVAR 79
18041: PUSH
18042: LD_INT 100
18044: ST_TO_ADDR
// end ;
18045: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18046: LD_EXP 38
18050: PUSH
18051: LD_EXP 62
18055: AND
18056: IFFALSE 18295
18058: GO 18060
18060: DISABLE
18061: LD_INT 0
18063: PPUSH
18064: PPUSH
18065: PPUSH
// begin tmp := [ ] ;
18066: LD_ADDR_VAR 0 3
18070: PUSH
18071: EMPTY
18072: ST_TO_ADDR
// for i := 1 to 6 do
18073: LD_ADDR_VAR 0 1
18077: PUSH
18078: DOUBLE
18079: LD_INT 1
18081: DEC
18082: ST_TO_ADDR
18083: LD_INT 6
18085: PUSH
18086: FOR_TO
18087: IFFALSE 18192
// begin uc_nation := nation_nature ;
18089: LD_ADDR_OWVAR 21
18093: PUSH
18094: LD_INT 0
18096: ST_TO_ADDR
// uc_side := 0 ;
18097: LD_ADDR_OWVAR 20
18101: PUSH
18102: LD_INT 0
18104: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18105: LD_ADDR_OWVAR 29
18109: PUSH
18110: LD_INT 12
18112: PUSH
18113: LD_INT 12
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: ST_TO_ADDR
// hc_agressivity := 20 ;
18120: LD_ADDR_OWVAR 35
18124: PUSH
18125: LD_INT 20
18127: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18128: LD_ADDR_OWVAR 28
18132: PUSH
18133: LD_INT 17
18135: ST_TO_ADDR
// hc_gallery :=  ;
18136: LD_ADDR_OWVAR 33
18140: PUSH
18141: LD_STRING 
18143: ST_TO_ADDR
// hc_name :=  ;
18144: LD_ADDR_OWVAR 26
18148: PUSH
18149: LD_STRING 
18151: ST_TO_ADDR
// un := CreateHuman ;
18152: LD_ADDR_VAR 0 2
18156: PUSH
18157: CALL_OW 44
18161: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18162: LD_VAR 0 2
18166: PPUSH
18167: LD_INT 1
18169: PPUSH
18170: CALL_OW 51
// tmp := tmp ^ un ;
18174: LD_ADDR_VAR 0 3
18178: PUSH
18179: LD_VAR 0 3
18183: PUSH
18184: LD_VAR 0 2
18188: ADD
18189: ST_TO_ADDR
// end ;
18190: GO 18086
18192: POP
18193: POP
// repeat wait ( 0 0$1 ) ;
18194: LD_INT 35
18196: PPUSH
18197: CALL_OW 67
// for un in tmp do
18201: LD_ADDR_VAR 0 2
18205: PUSH
18206: LD_VAR 0 3
18210: PUSH
18211: FOR_IN
18212: IFFALSE 18286
// begin if IsDead ( un ) then
18214: LD_VAR 0 2
18218: PPUSH
18219: CALL_OW 301
18223: IFFALSE 18243
// begin tmp := tmp diff un ;
18225: LD_ADDR_VAR 0 3
18229: PUSH
18230: LD_VAR 0 3
18234: PUSH
18235: LD_VAR 0 2
18239: DIFF
18240: ST_TO_ADDR
// continue ;
18241: GO 18211
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18243: LD_VAR 0 2
18247: PPUSH
18248: LD_INT 3
18250: PUSH
18251: LD_INT 22
18253: PUSH
18254: LD_INT 0
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PPUSH
18265: CALL_OW 69
18269: PPUSH
18270: LD_VAR 0 2
18274: PPUSH
18275: CALL_OW 74
18279: PPUSH
18280: CALL_OW 115
// end ;
18284: GO 18211
18286: POP
18287: POP
// until not tmp ;
18288: LD_VAR 0 3
18292: NOT
18293: IFFALSE 18194
// end ;
18295: PPOPN 3
18297: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18298: LD_EXP 38
18302: PUSH
18303: LD_EXP 63
18307: AND
18308: IFFALSE 18362
18310: GO 18312
18312: DISABLE
// begin ToLua ( displayTroll(); ) ;
18313: LD_STRING displayTroll();
18315: PPUSH
18316: CALL_OW 559
// wait ( 3 3$00 ) ;
18320: LD_INT 6300
18322: PPUSH
18323: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18327: LD_STRING hideTroll();
18329: PPUSH
18330: CALL_OW 559
// wait ( 1 1$00 ) ;
18334: LD_INT 2100
18336: PPUSH
18337: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18341: LD_STRING displayTroll();
18343: PPUSH
18344: CALL_OW 559
// wait ( 1 1$00 ) ;
18348: LD_INT 2100
18350: PPUSH
18351: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18355: LD_STRING hideTroll();
18357: PPUSH
18358: CALL_OW 559
// end ;
18362: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18363: LD_EXP 38
18367: PUSH
18368: LD_EXP 64
18372: AND
18373: IFFALSE 18436
18375: GO 18377
18377: DISABLE
18378: LD_INT 0
18380: PPUSH
// begin p := 0 ;
18381: LD_ADDR_VAR 0 1
18385: PUSH
18386: LD_INT 0
18388: ST_TO_ADDR
// repeat game_speed := 1 ;
18389: LD_ADDR_OWVAR 65
18393: PUSH
18394: LD_INT 1
18396: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18397: LD_INT 35
18399: PPUSH
18400: CALL_OW 67
// p := p + 1 ;
18404: LD_ADDR_VAR 0 1
18408: PUSH
18409: LD_VAR 0 1
18413: PUSH
18414: LD_INT 1
18416: PLUS
18417: ST_TO_ADDR
// until p >= 60 ;
18418: LD_VAR 0 1
18422: PUSH
18423: LD_INT 60
18425: GREATEREQUAL
18426: IFFALSE 18389
// game_speed := 4 ;
18428: LD_ADDR_OWVAR 65
18432: PUSH
18433: LD_INT 4
18435: ST_TO_ADDR
// end ;
18436: PPOPN 1
18438: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18439: LD_EXP 38
18443: PUSH
18444: LD_EXP 65
18448: AND
18449: IFFALSE 18595
18451: GO 18453
18453: DISABLE
18454: LD_INT 0
18456: PPUSH
18457: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18458: LD_ADDR_VAR 0 1
18462: PUSH
18463: LD_INT 22
18465: PUSH
18466: LD_OWVAR 2
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 2
18477: PUSH
18478: LD_INT 30
18480: PUSH
18481: LD_INT 0
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 30
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PPUSH
18507: CALL_OW 69
18511: ST_TO_ADDR
// if not depot then
18512: LD_VAR 0 1
18516: NOT
18517: IFFALSE 18521
// exit ;
18519: GO 18595
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18521: LD_ADDR_VAR 0 2
18525: PUSH
18526: LD_VAR 0 1
18530: PUSH
18531: LD_INT 1
18533: PPUSH
18534: LD_VAR 0 1
18538: PPUSH
18539: CALL_OW 12
18543: ARRAY
18544: PPUSH
18545: CALL_OW 274
18549: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18550: LD_VAR 0 2
18554: PPUSH
18555: LD_INT 1
18557: PPUSH
18558: LD_INT 0
18560: PPUSH
18561: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18565: LD_VAR 0 2
18569: PPUSH
18570: LD_INT 2
18572: PPUSH
18573: LD_INT 0
18575: PPUSH
18576: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18580: LD_VAR 0 2
18584: PPUSH
18585: LD_INT 3
18587: PPUSH
18588: LD_INT 0
18590: PPUSH
18591: CALL_OW 277
// end ;
18595: PPOPN 2
18597: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18598: LD_EXP 38
18602: PUSH
18603: LD_EXP 66
18607: AND
18608: IFFALSE 18705
18610: GO 18612
18612: DISABLE
18613: LD_INT 0
18615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18616: LD_ADDR_VAR 0 1
18620: PUSH
18621: LD_INT 22
18623: PUSH
18624: LD_OWVAR 2
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 21
18635: PUSH
18636: LD_INT 1
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 3
18645: PUSH
18646: LD_INT 23
18648: PUSH
18649: LD_INT 0
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: LIST
18664: PPUSH
18665: CALL_OW 69
18669: ST_TO_ADDR
// if not tmp then
18670: LD_VAR 0 1
18674: NOT
18675: IFFALSE 18679
// exit ;
18677: GO 18705
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18679: LD_VAR 0 1
18683: PUSH
18684: LD_INT 1
18686: PPUSH
18687: LD_VAR 0 1
18691: PPUSH
18692: CALL_OW 12
18696: ARRAY
18697: PPUSH
18698: LD_INT 200
18700: PPUSH
18701: CALL_OW 234
// end ;
18705: PPOPN 1
18707: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18708: LD_EXP 38
18712: PUSH
18713: LD_EXP 67
18717: AND
18718: IFFALSE 18797
18720: GO 18722
18722: DISABLE
18723: LD_INT 0
18725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18726: LD_ADDR_VAR 0 1
18730: PUSH
18731: LD_INT 22
18733: PUSH
18734: LD_OWVAR 2
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 21
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PPUSH
18757: CALL_OW 69
18761: ST_TO_ADDR
// if not tmp then
18762: LD_VAR 0 1
18766: NOT
18767: IFFALSE 18771
// exit ;
18769: GO 18797
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18771: LD_VAR 0 1
18775: PUSH
18776: LD_INT 1
18778: PPUSH
18779: LD_VAR 0 1
18783: PPUSH
18784: CALL_OW 12
18788: ARRAY
18789: PPUSH
18790: LD_INT 60
18792: PPUSH
18793: CALL_OW 234
// end ;
18797: PPOPN 1
18799: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18800: LD_EXP 38
18804: PUSH
18805: LD_EXP 68
18809: AND
18810: IFFALSE 18909
18812: GO 18814
18814: DISABLE
18815: LD_INT 0
18817: PPUSH
18818: PPUSH
// begin enable ;
18819: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18820: LD_ADDR_VAR 0 1
18824: PUSH
18825: LD_INT 22
18827: PUSH
18828: LD_OWVAR 2
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 61
18839: PUSH
18840: EMPTY
18841: LIST
18842: PUSH
18843: LD_INT 33
18845: PUSH
18846: LD_INT 2
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: LIST
18857: PPUSH
18858: CALL_OW 69
18862: ST_TO_ADDR
// if not tmp then
18863: LD_VAR 0 1
18867: NOT
18868: IFFALSE 18872
// exit ;
18870: GO 18909
// for i in tmp do
18872: LD_ADDR_VAR 0 2
18876: PUSH
18877: LD_VAR 0 1
18881: PUSH
18882: FOR_IN
18883: IFFALSE 18907
// if IsControledBy ( i ) then
18885: LD_VAR 0 2
18889: PPUSH
18890: CALL_OW 312
18894: IFFALSE 18905
// ComUnlink ( i ) ;
18896: LD_VAR 0 2
18900: PPUSH
18901: CALL_OW 136
18905: GO 18882
18907: POP
18908: POP
// end ;
18909: PPOPN 2
18911: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18912: LD_EXP 38
18916: PUSH
18917: LD_EXP 69
18921: AND
18922: IFFALSE 19062
18924: GO 18926
18926: DISABLE
18927: LD_INT 0
18929: PPUSH
18930: PPUSH
// begin ToLua ( displayPowell(); ) ;
18931: LD_STRING displayPowell();
18933: PPUSH
18934: CALL_OW 559
// uc_side := 0 ;
18938: LD_ADDR_OWVAR 20
18942: PUSH
18943: LD_INT 0
18945: ST_TO_ADDR
// uc_nation := 2 ;
18946: LD_ADDR_OWVAR 21
18950: PUSH
18951: LD_INT 2
18953: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18954: LD_ADDR_OWVAR 37
18958: PUSH
18959: LD_INT 14
18961: ST_TO_ADDR
// vc_engine := engine_siberite ;
18962: LD_ADDR_OWVAR 39
18966: PUSH
18967: LD_INT 3
18969: ST_TO_ADDR
// vc_control := control_apeman ;
18970: LD_ADDR_OWVAR 38
18974: PUSH
18975: LD_INT 5
18977: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18978: LD_ADDR_OWVAR 40
18982: PUSH
18983: LD_INT 29
18985: ST_TO_ADDR
// un := CreateVehicle ;
18986: LD_ADDR_VAR 0 2
18990: PUSH
18991: CALL_OW 45
18995: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18996: LD_VAR 0 2
19000: PPUSH
19001: LD_INT 1
19003: PPUSH
19004: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19008: LD_INT 35
19010: PPUSH
19011: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19015: LD_VAR 0 2
19019: PPUSH
19020: LD_INT 22
19022: PUSH
19023: LD_OWVAR 2
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PPUSH
19032: CALL_OW 69
19036: PPUSH
19037: LD_VAR 0 2
19041: PPUSH
19042: CALL_OW 74
19046: PPUSH
19047: CALL_OW 115
// until IsDead ( un ) ;
19051: LD_VAR 0 2
19055: PPUSH
19056: CALL_OW 301
19060: IFFALSE 19008
// end ;
19062: PPOPN 2
19064: END
// every 0 0$1 trigger StreamModeActive and sStu do
19065: LD_EXP 38
19069: PUSH
19070: LD_EXP 77
19074: AND
19075: IFFALSE 19091
19077: GO 19079
19079: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19080: LD_STRING displayStucuk();
19082: PPUSH
19083: CALL_OW 559
// ResetFog ;
19087: CALL_OW 335
// end ;
19091: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19092: LD_EXP 38
19096: PUSH
19097: LD_EXP 70
19101: AND
19102: IFFALSE 19243
19104: GO 19106
19106: DISABLE
19107: LD_INT 0
19109: PPUSH
19110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19111: LD_ADDR_VAR 0 2
19115: PUSH
19116: LD_INT 22
19118: PUSH
19119: LD_OWVAR 2
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 21
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PPUSH
19142: CALL_OW 69
19146: ST_TO_ADDR
// if not tmp then
19147: LD_VAR 0 2
19151: NOT
19152: IFFALSE 19156
// exit ;
19154: GO 19243
// un := tmp [ rand ( 1 , tmp ) ] ;
19156: LD_ADDR_VAR 0 1
19160: PUSH
19161: LD_VAR 0 2
19165: PUSH
19166: LD_INT 1
19168: PPUSH
19169: LD_VAR 0 2
19173: PPUSH
19174: CALL_OW 12
19178: ARRAY
19179: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19180: LD_VAR 0 1
19184: PPUSH
19185: LD_INT 0
19187: PPUSH
19188: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19192: LD_VAR 0 1
19196: PPUSH
19197: LD_OWVAR 3
19201: PUSH
19202: LD_VAR 0 1
19206: DIFF
19207: PPUSH
19208: LD_VAR 0 1
19212: PPUSH
19213: CALL_OW 74
19217: PPUSH
19218: CALL_OW 115
// wait ( 0 0$20 ) ;
19222: LD_INT 700
19224: PPUSH
19225: CALL_OW 67
// SetSide ( un , your_side ) ;
19229: LD_VAR 0 1
19233: PPUSH
19234: LD_OWVAR 2
19238: PPUSH
19239: CALL_OW 235
// end ;
19243: PPOPN 2
19245: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19246: LD_EXP 38
19250: PUSH
19251: LD_EXP 71
19255: AND
19256: IFFALSE 19362
19258: GO 19260
19260: DISABLE
19261: LD_INT 0
19263: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19264: LD_ADDR_VAR 0 1
19268: PUSH
19269: LD_INT 22
19271: PUSH
19272: LD_OWVAR 2
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 2
19283: PUSH
19284: LD_INT 30
19286: PUSH
19287: LD_INT 0
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 30
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: LIST
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PPUSH
19313: CALL_OW 69
19317: ST_TO_ADDR
// if not depot then
19318: LD_VAR 0 1
19322: NOT
19323: IFFALSE 19327
// exit ;
19325: GO 19362
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19327: LD_VAR 0 1
19331: PUSH
19332: LD_INT 1
19334: ARRAY
19335: PPUSH
19336: CALL_OW 250
19340: PPUSH
19341: LD_VAR 0 1
19345: PUSH
19346: LD_INT 1
19348: ARRAY
19349: PPUSH
19350: CALL_OW 251
19354: PPUSH
19355: LD_INT 70
19357: PPUSH
19358: CALL_OW 495
// end ;
19362: PPOPN 1
19364: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19365: LD_EXP 38
19369: PUSH
19370: LD_EXP 72
19374: AND
19375: IFFALSE 19586
19377: GO 19379
19379: DISABLE
19380: LD_INT 0
19382: PPUSH
19383: PPUSH
19384: PPUSH
19385: PPUSH
19386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19387: LD_ADDR_VAR 0 5
19391: PUSH
19392: LD_INT 22
19394: PUSH
19395: LD_OWVAR 2
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 21
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PPUSH
19418: CALL_OW 69
19422: ST_TO_ADDR
// if not tmp then
19423: LD_VAR 0 5
19427: NOT
19428: IFFALSE 19432
// exit ;
19430: GO 19586
// for i in tmp do
19432: LD_ADDR_VAR 0 1
19436: PUSH
19437: LD_VAR 0 5
19441: PUSH
19442: FOR_IN
19443: IFFALSE 19584
// begin d := rand ( 0 , 5 ) ;
19445: LD_ADDR_VAR 0 4
19449: PUSH
19450: LD_INT 0
19452: PPUSH
19453: LD_INT 5
19455: PPUSH
19456: CALL_OW 12
19460: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19461: LD_ADDR_VAR 0 2
19465: PUSH
19466: LD_VAR 0 1
19470: PPUSH
19471: CALL_OW 250
19475: PPUSH
19476: LD_VAR 0 4
19480: PPUSH
19481: LD_INT 3
19483: PPUSH
19484: LD_INT 12
19486: PPUSH
19487: CALL_OW 12
19491: PPUSH
19492: CALL_OW 272
19496: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19497: LD_ADDR_VAR 0 3
19501: PUSH
19502: LD_VAR 0 1
19506: PPUSH
19507: CALL_OW 251
19511: PPUSH
19512: LD_VAR 0 4
19516: PPUSH
19517: LD_INT 3
19519: PPUSH
19520: LD_INT 12
19522: PPUSH
19523: CALL_OW 12
19527: PPUSH
19528: CALL_OW 273
19532: ST_TO_ADDR
// if ValidHex ( x , y ) then
19533: LD_VAR 0 2
19537: PPUSH
19538: LD_VAR 0 3
19542: PPUSH
19543: CALL_OW 488
19547: IFFALSE 19582
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19549: LD_VAR 0 1
19553: PPUSH
19554: LD_VAR 0 2
19558: PPUSH
19559: LD_VAR 0 3
19563: PPUSH
19564: LD_INT 3
19566: PPUSH
19567: LD_INT 6
19569: PPUSH
19570: CALL_OW 12
19574: PPUSH
19575: LD_INT 1
19577: PPUSH
19578: CALL_OW 483
// end ;
19582: GO 19442
19584: POP
19585: POP
// end ;
19586: PPOPN 5
19588: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19589: LD_EXP 38
19593: PUSH
19594: LD_EXP 73
19598: AND
19599: IFFALSE 19693
19601: GO 19603
19603: DISABLE
19604: LD_INT 0
19606: PPUSH
19607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19608: LD_ADDR_VAR 0 2
19612: PUSH
19613: LD_INT 22
19615: PUSH
19616: LD_OWVAR 2
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 32
19627: PUSH
19628: LD_INT 1
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 21
19637: PUSH
19638: LD_INT 2
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: LIST
19649: PPUSH
19650: CALL_OW 69
19654: ST_TO_ADDR
// if not tmp then
19655: LD_VAR 0 2
19659: NOT
19660: IFFALSE 19664
// exit ;
19662: GO 19693
// for i in tmp do
19664: LD_ADDR_VAR 0 1
19668: PUSH
19669: LD_VAR 0 2
19673: PUSH
19674: FOR_IN
19675: IFFALSE 19691
// SetFuel ( i , 0 ) ;
19677: LD_VAR 0 1
19681: PPUSH
19682: LD_INT 0
19684: PPUSH
19685: CALL_OW 240
19689: GO 19674
19691: POP
19692: POP
// end ;
19693: PPOPN 2
19695: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19696: LD_EXP 38
19700: PUSH
19701: LD_EXP 74
19705: AND
19706: IFFALSE 19772
19708: GO 19710
19710: DISABLE
19711: LD_INT 0
19713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19714: LD_ADDR_VAR 0 1
19718: PUSH
19719: LD_INT 22
19721: PUSH
19722: LD_OWVAR 2
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 30
19733: PUSH
19734: LD_INT 29
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PPUSH
19745: CALL_OW 69
19749: ST_TO_ADDR
// if not tmp then
19750: LD_VAR 0 1
19754: NOT
19755: IFFALSE 19759
// exit ;
19757: GO 19772
// DestroyUnit ( tmp [ 1 ] ) ;
19759: LD_VAR 0 1
19763: PUSH
19764: LD_INT 1
19766: ARRAY
19767: PPUSH
19768: CALL_OW 65
// end ;
19772: PPOPN 1
19774: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19775: LD_EXP 38
19779: PUSH
19780: LD_EXP 76
19784: AND
19785: IFFALSE 19914
19787: GO 19789
19789: DISABLE
19790: LD_INT 0
19792: PPUSH
// begin uc_side := 0 ;
19793: LD_ADDR_OWVAR 20
19797: PUSH
19798: LD_INT 0
19800: ST_TO_ADDR
// uc_nation := nation_arabian ;
19801: LD_ADDR_OWVAR 21
19805: PUSH
19806: LD_INT 2
19808: ST_TO_ADDR
// hc_gallery :=  ;
19809: LD_ADDR_OWVAR 33
19813: PUSH
19814: LD_STRING 
19816: ST_TO_ADDR
// hc_name :=  ;
19817: LD_ADDR_OWVAR 26
19821: PUSH
19822: LD_STRING 
19824: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19825: LD_INT 1
19827: PPUSH
19828: LD_INT 11
19830: PPUSH
19831: LD_INT 10
19833: PPUSH
19834: CALL_OW 380
// un := CreateHuman ;
19838: LD_ADDR_VAR 0 1
19842: PUSH
19843: CALL_OW 44
19847: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19848: LD_VAR 0 1
19852: PPUSH
19853: LD_INT 1
19855: PPUSH
19856: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19860: LD_INT 35
19862: PPUSH
19863: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19867: LD_VAR 0 1
19871: PPUSH
19872: LD_INT 22
19874: PUSH
19875: LD_OWVAR 2
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PPUSH
19884: CALL_OW 69
19888: PPUSH
19889: LD_VAR 0 1
19893: PPUSH
19894: CALL_OW 74
19898: PPUSH
19899: CALL_OW 115
// until IsDead ( un ) ;
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 301
19912: IFFALSE 19860
// end ;
19914: PPOPN 1
19916: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19917: LD_EXP 38
19921: PUSH
19922: LD_EXP 78
19926: AND
19927: IFFALSE 19939
19929: GO 19931
19931: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19932: LD_STRING earthquake(getX(game), 0, 32)
19934: PPUSH
19935: CALL_OW 559
19939: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19940: LD_EXP 38
19944: PUSH
19945: LD_EXP 79
19949: AND
19950: IFFALSE 20041
19952: GO 19954
19954: DISABLE
19955: LD_INT 0
19957: PPUSH
// begin enable ;
19958: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19959: LD_ADDR_VAR 0 1
19963: PUSH
19964: LD_INT 22
19966: PUSH
19967: LD_OWVAR 2
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 21
19978: PUSH
19979: LD_INT 2
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 33
19988: PUSH
19989: LD_INT 3
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: LIST
20000: PPUSH
20001: CALL_OW 69
20005: ST_TO_ADDR
// if not tmp then
20006: LD_VAR 0 1
20010: NOT
20011: IFFALSE 20015
// exit ;
20013: GO 20041
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20015: LD_VAR 0 1
20019: PUSH
20020: LD_INT 1
20022: PPUSH
20023: LD_VAR 0 1
20027: PPUSH
20028: CALL_OW 12
20032: ARRAY
20033: PPUSH
20034: LD_INT 1
20036: PPUSH
20037: CALL_OW 234
// end ;
20041: PPOPN 1
20043: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20044: LD_EXP 38
20048: PUSH
20049: LD_EXP 80
20053: AND
20054: IFFALSE 20195
20056: GO 20058
20058: DISABLE
20059: LD_INT 0
20061: PPUSH
20062: PPUSH
20063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20064: LD_ADDR_VAR 0 3
20068: PUSH
20069: LD_INT 22
20071: PUSH
20072: LD_OWVAR 2
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 25
20083: PUSH
20084: LD_INT 1
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PPUSH
20095: CALL_OW 69
20099: ST_TO_ADDR
// if not tmp then
20100: LD_VAR 0 3
20104: NOT
20105: IFFALSE 20109
// exit ;
20107: GO 20195
// un := tmp [ rand ( 1 , tmp ) ] ;
20109: LD_ADDR_VAR 0 2
20113: PUSH
20114: LD_VAR 0 3
20118: PUSH
20119: LD_INT 1
20121: PPUSH
20122: LD_VAR 0 3
20126: PPUSH
20127: CALL_OW 12
20131: ARRAY
20132: ST_TO_ADDR
// if Crawls ( un ) then
20133: LD_VAR 0 2
20137: PPUSH
20138: CALL_OW 318
20142: IFFALSE 20153
// ComWalk ( un ) ;
20144: LD_VAR 0 2
20148: PPUSH
20149: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20153: LD_VAR 0 2
20157: PPUSH
20158: LD_INT 9
20160: PPUSH
20161: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20165: LD_INT 28
20167: PPUSH
20168: LD_OWVAR 2
20172: PPUSH
20173: LD_INT 2
20175: PPUSH
20176: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20180: LD_INT 29
20182: PPUSH
20183: LD_OWVAR 2
20187: PPUSH
20188: LD_INT 2
20190: PPUSH
20191: CALL_OW 322
// end ;
20195: PPOPN 3
20197: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20198: LD_EXP 38
20202: PUSH
20203: LD_EXP 81
20207: AND
20208: IFFALSE 20319
20210: GO 20212
20212: DISABLE
20213: LD_INT 0
20215: PPUSH
20216: PPUSH
20217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20218: LD_ADDR_VAR 0 3
20222: PUSH
20223: LD_INT 22
20225: PUSH
20226: LD_OWVAR 2
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 25
20237: PUSH
20238: LD_INT 1
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PPUSH
20249: CALL_OW 69
20253: ST_TO_ADDR
// if not tmp then
20254: LD_VAR 0 3
20258: NOT
20259: IFFALSE 20263
// exit ;
20261: GO 20319
// un := tmp [ rand ( 1 , tmp ) ] ;
20263: LD_ADDR_VAR 0 2
20267: PUSH
20268: LD_VAR 0 3
20272: PUSH
20273: LD_INT 1
20275: PPUSH
20276: LD_VAR 0 3
20280: PPUSH
20281: CALL_OW 12
20285: ARRAY
20286: ST_TO_ADDR
// if Crawls ( un ) then
20287: LD_VAR 0 2
20291: PPUSH
20292: CALL_OW 318
20296: IFFALSE 20307
// ComWalk ( un ) ;
20298: LD_VAR 0 2
20302: PPUSH
20303: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20307: LD_VAR 0 2
20311: PPUSH
20312: LD_INT 8
20314: PPUSH
20315: CALL_OW 336
// end ;
20319: PPOPN 3
20321: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20322: LD_EXP 38
20326: PUSH
20327: LD_EXP 82
20331: AND
20332: IFFALSE 20476
20334: GO 20336
20336: DISABLE
20337: LD_INT 0
20339: PPUSH
20340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20341: LD_ADDR_VAR 0 2
20345: PUSH
20346: LD_INT 22
20348: PUSH
20349: LD_OWVAR 2
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 21
20360: PUSH
20361: LD_INT 2
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 2
20370: PUSH
20371: LD_INT 34
20373: PUSH
20374: LD_INT 12
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 34
20383: PUSH
20384: LD_INT 51
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 34
20393: PUSH
20394: LD_INT 32
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: LIST
20411: PPUSH
20412: CALL_OW 69
20416: ST_TO_ADDR
// if not tmp then
20417: LD_VAR 0 2
20421: NOT
20422: IFFALSE 20426
// exit ;
20424: GO 20476
// for i in tmp do
20426: LD_ADDR_VAR 0 1
20430: PUSH
20431: LD_VAR 0 2
20435: PUSH
20436: FOR_IN
20437: IFFALSE 20474
// if GetCargo ( i , mat_artifact ) = 0 then
20439: LD_VAR 0 1
20443: PPUSH
20444: LD_INT 4
20446: PPUSH
20447: CALL_OW 289
20451: PUSH
20452: LD_INT 0
20454: EQUAL
20455: IFFALSE 20472
// SetCargo ( i , mat_siberit , 100 ) ;
20457: LD_VAR 0 1
20461: PPUSH
20462: LD_INT 3
20464: PPUSH
20465: LD_INT 100
20467: PPUSH
20468: CALL_OW 290
20472: GO 20436
20474: POP
20475: POP
// end ;
20476: PPOPN 2
20478: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20479: LD_EXP 38
20483: PUSH
20484: LD_EXP 83
20488: AND
20489: IFFALSE 20672
20491: GO 20493
20493: DISABLE
20494: LD_INT 0
20496: PPUSH
20497: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20498: LD_ADDR_VAR 0 2
20502: PUSH
20503: LD_INT 22
20505: PUSH
20506: LD_OWVAR 2
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PPUSH
20515: CALL_OW 69
20519: ST_TO_ADDR
// if not tmp then
20520: LD_VAR 0 2
20524: NOT
20525: IFFALSE 20529
// exit ;
20527: GO 20672
// for i := 1 to 2 do
20529: LD_ADDR_VAR 0 1
20533: PUSH
20534: DOUBLE
20535: LD_INT 1
20537: DEC
20538: ST_TO_ADDR
20539: LD_INT 2
20541: PUSH
20542: FOR_TO
20543: IFFALSE 20670
// begin uc_side := your_side ;
20545: LD_ADDR_OWVAR 20
20549: PUSH
20550: LD_OWVAR 2
20554: ST_TO_ADDR
// uc_nation := nation_american ;
20555: LD_ADDR_OWVAR 21
20559: PUSH
20560: LD_INT 1
20562: ST_TO_ADDR
// vc_chassis := us_morphling ;
20563: LD_ADDR_OWVAR 37
20567: PUSH
20568: LD_INT 5
20570: ST_TO_ADDR
// vc_engine := engine_siberite ;
20571: LD_ADDR_OWVAR 39
20575: PUSH
20576: LD_INT 3
20578: ST_TO_ADDR
// vc_control := control_computer ;
20579: LD_ADDR_OWVAR 38
20583: PUSH
20584: LD_INT 3
20586: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20587: LD_ADDR_OWVAR 40
20591: PUSH
20592: LD_INT 10
20594: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20595: LD_VAR 0 2
20599: PUSH
20600: LD_INT 1
20602: ARRAY
20603: PPUSH
20604: CALL_OW 310
20608: NOT
20609: IFFALSE 20656
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20611: CALL_OW 45
20615: PPUSH
20616: LD_VAR 0 2
20620: PUSH
20621: LD_INT 1
20623: ARRAY
20624: PPUSH
20625: CALL_OW 250
20629: PPUSH
20630: LD_VAR 0 2
20634: PUSH
20635: LD_INT 1
20637: ARRAY
20638: PPUSH
20639: CALL_OW 251
20643: PPUSH
20644: LD_INT 12
20646: PPUSH
20647: LD_INT 1
20649: PPUSH
20650: CALL_OW 50
20654: GO 20668
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20656: CALL_OW 45
20660: PPUSH
20661: LD_INT 1
20663: PPUSH
20664: CALL_OW 51
// end ;
20668: GO 20542
20670: POP
20671: POP
// end ;
20672: PPOPN 2
20674: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20675: LD_EXP 38
20679: PUSH
20680: LD_EXP 84
20684: AND
20685: IFFALSE 20907
20687: GO 20689
20689: DISABLE
20690: LD_INT 0
20692: PPUSH
20693: PPUSH
20694: PPUSH
20695: PPUSH
20696: PPUSH
20697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20698: LD_ADDR_VAR 0 6
20702: PUSH
20703: LD_INT 22
20705: PUSH
20706: LD_OWVAR 2
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 21
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 3
20727: PUSH
20728: LD_INT 23
20730: PUSH
20731: LD_INT 0
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: PPUSH
20747: CALL_OW 69
20751: ST_TO_ADDR
// if not tmp then
20752: LD_VAR 0 6
20756: NOT
20757: IFFALSE 20761
// exit ;
20759: GO 20907
// s1 := rand ( 1 , 4 ) ;
20761: LD_ADDR_VAR 0 2
20765: PUSH
20766: LD_INT 1
20768: PPUSH
20769: LD_INT 4
20771: PPUSH
20772: CALL_OW 12
20776: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20777: LD_ADDR_VAR 0 4
20781: PUSH
20782: LD_VAR 0 6
20786: PUSH
20787: LD_INT 1
20789: ARRAY
20790: PPUSH
20791: LD_VAR 0 2
20795: PPUSH
20796: CALL_OW 259
20800: ST_TO_ADDR
// if s1 = 1 then
20801: LD_VAR 0 2
20805: PUSH
20806: LD_INT 1
20808: EQUAL
20809: IFFALSE 20829
// s2 := rand ( 2 , 4 ) else
20811: LD_ADDR_VAR 0 3
20815: PUSH
20816: LD_INT 2
20818: PPUSH
20819: LD_INT 4
20821: PPUSH
20822: CALL_OW 12
20826: ST_TO_ADDR
20827: GO 20837
// s2 := 1 ;
20829: LD_ADDR_VAR 0 3
20833: PUSH
20834: LD_INT 1
20836: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20837: LD_ADDR_VAR 0 5
20841: PUSH
20842: LD_VAR 0 6
20846: PUSH
20847: LD_INT 1
20849: ARRAY
20850: PPUSH
20851: LD_VAR 0 3
20855: PPUSH
20856: CALL_OW 259
20860: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20861: LD_VAR 0 6
20865: PUSH
20866: LD_INT 1
20868: ARRAY
20869: PPUSH
20870: LD_VAR 0 2
20874: PPUSH
20875: LD_VAR 0 5
20879: PPUSH
20880: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20884: LD_VAR 0 6
20888: PUSH
20889: LD_INT 1
20891: ARRAY
20892: PPUSH
20893: LD_VAR 0 3
20897: PPUSH
20898: LD_VAR 0 4
20902: PPUSH
20903: CALL_OW 237
// end ;
20907: PPOPN 6
20909: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20910: LD_EXP 38
20914: PUSH
20915: LD_EXP 85
20919: AND
20920: IFFALSE 20999
20922: GO 20924
20924: DISABLE
20925: LD_INT 0
20927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20928: LD_ADDR_VAR 0 1
20932: PUSH
20933: LD_INT 22
20935: PUSH
20936: LD_OWVAR 2
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 30
20947: PUSH
20948: LD_INT 3
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PPUSH
20959: CALL_OW 69
20963: ST_TO_ADDR
// if not tmp then
20964: LD_VAR 0 1
20968: NOT
20969: IFFALSE 20973
// exit ;
20971: GO 20999
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20973: LD_VAR 0 1
20977: PUSH
20978: LD_INT 1
20980: PPUSH
20981: LD_VAR 0 1
20985: PPUSH
20986: CALL_OW 12
20990: ARRAY
20991: PPUSH
20992: LD_INT 1
20994: PPUSH
20995: CALL_OW 234
// end ;
20999: PPOPN 1
21001: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21002: LD_EXP 38
21006: PUSH
21007: LD_EXP 86
21011: AND
21012: IFFALSE 21124
21014: GO 21016
21016: DISABLE
21017: LD_INT 0
21019: PPUSH
21020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21021: LD_ADDR_VAR 0 2
21025: PUSH
21026: LD_INT 22
21028: PUSH
21029: LD_OWVAR 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 2
21040: PUSH
21041: LD_INT 30
21043: PUSH
21044: LD_INT 27
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 30
21053: PUSH
21054: LD_INT 26
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 30
21063: PUSH
21064: LD_INT 28
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PPUSH
21081: CALL_OW 69
21085: ST_TO_ADDR
// if not tmp then
21086: LD_VAR 0 2
21090: NOT
21091: IFFALSE 21095
// exit ;
21093: GO 21124
// for i in tmp do
21095: LD_ADDR_VAR 0 1
21099: PUSH
21100: LD_VAR 0 2
21104: PUSH
21105: FOR_IN
21106: IFFALSE 21122
// SetLives ( i , 1 ) ;
21108: LD_VAR 0 1
21112: PPUSH
21113: LD_INT 1
21115: PPUSH
21116: CALL_OW 234
21120: GO 21105
21122: POP
21123: POP
// end ;
21124: PPOPN 2
21126: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21127: LD_EXP 38
21131: PUSH
21132: LD_EXP 87
21136: AND
21137: IFFALSE 21411
21139: GO 21141
21141: DISABLE
21142: LD_INT 0
21144: PPUSH
21145: PPUSH
21146: PPUSH
// begin i := rand ( 1 , 7 ) ;
21147: LD_ADDR_VAR 0 1
21151: PUSH
21152: LD_INT 1
21154: PPUSH
21155: LD_INT 7
21157: PPUSH
21158: CALL_OW 12
21162: ST_TO_ADDR
// case i of 1 :
21163: LD_VAR 0 1
21167: PUSH
21168: LD_INT 1
21170: DOUBLE
21171: EQUAL
21172: IFTRUE 21176
21174: GO 21186
21176: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21177: LD_STRING earthquake(getX(game), 0, 32)
21179: PPUSH
21180: CALL_OW 559
21184: GO 21411
21186: LD_INT 2
21188: DOUBLE
21189: EQUAL
21190: IFTRUE 21194
21192: GO 21208
21194: POP
// begin ToLua ( displayStucuk(); ) ;
21195: LD_STRING displayStucuk();
21197: PPUSH
21198: CALL_OW 559
// ResetFog ;
21202: CALL_OW 335
// end ; 3 :
21206: GO 21411
21208: LD_INT 3
21210: DOUBLE
21211: EQUAL
21212: IFTRUE 21216
21214: GO 21320
21216: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21217: LD_ADDR_VAR 0 2
21221: PUSH
21222: LD_INT 22
21224: PUSH
21225: LD_OWVAR 2
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 25
21236: PUSH
21237: LD_INT 1
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PPUSH
21248: CALL_OW 69
21252: ST_TO_ADDR
// if not tmp then
21253: LD_VAR 0 2
21257: NOT
21258: IFFALSE 21262
// exit ;
21260: GO 21411
// un := tmp [ rand ( 1 , tmp ) ] ;
21262: LD_ADDR_VAR 0 3
21266: PUSH
21267: LD_VAR 0 2
21271: PUSH
21272: LD_INT 1
21274: PPUSH
21275: LD_VAR 0 2
21279: PPUSH
21280: CALL_OW 12
21284: ARRAY
21285: ST_TO_ADDR
// if Crawls ( un ) then
21286: LD_VAR 0 3
21290: PPUSH
21291: CALL_OW 318
21295: IFFALSE 21306
// ComWalk ( un ) ;
21297: LD_VAR 0 3
21301: PPUSH
21302: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21306: LD_VAR 0 3
21310: PPUSH
21311: LD_INT 8
21313: PPUSH
21314: CALL_OW 336
// end ; 4 :
21318: GO 21411
21320: LD_INT 4
21322: DOUBLE
21323: EQUAL
21324: IFTRUE 21328
21326: GO 21389
21328: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21329: LD_ADDR_VAR 0 2
21333: PUSH
21334: LD_INT 22
21336: PUSH
21337: LD_OWVAR 2
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 30
21348: PUSH
21349: LD_INT 29
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PPUSH
21360: CALL_OW 69
21364: ST_TO_ADDR
// if not tmp then
21365: LD_VAR 0 2
21369: NOT
21370: IFFALSE 21374
// exit ;
21372: GO 21411
// DestroyUnit ( tmp [ 1 ] ) ;
21374: LD_VAR 0 2
21378: PUSH
21379: LD_INT 1
21381: ARRAY
21382: PPUSH
21383: CALL_OW 65
// end ; 5 .. 7 :
21387: GO 21411
21389: LD_INT 5
21391: DOUBLE
21392: GREATEREQUAL
21393: IFFALSE 21401
21395: LD_INT 7
21397: DOUBLE
21398: LESSEQUAL
21399: IFTRUE 21403
21401: GO 21410
21403: POP
// StreamSibBomb ; end ;
21404: CALL 17661 0 0
21408: GO 21411
21410: POP
// end ;
21411: PPOPN 3
21413: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21414: LD_EXP 38
21418: PUSH
21419: LD_EXP 88
21423: AND
21424: IFFALSE 21580
21426: GO 21428
21428: DISABLE
21429: LD_INT 0
21431: PPUSH
21432: PPUSH
21433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21434: LD_ADDR_VAR 0 2
21438: PUSH
21439: LD_INT 81
21441: PUSH
21442: LD_OWVAR 2
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 2
21453: PUSH
21454: LD_INT 21
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 21
21466: PUSH
21467: LD_INT 2
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: LIST
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PPUSH
21483: CALL_OW 69
21487: ST_TO_ADDR
// if not tmp then
21488: LD_VAR 0 2
21492: NOT
21493: IFFALSE 21497
// exit ;
21495: GO 21580
// p := 0 ;
21497: LD_ADDR_VAR 0 3
21501: PUSH
21502: LD_INT 0
21504: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21505: LD_INT 35
21507: PPUSH
21508: CALL_OW 67
// p := p + 1 ;
21512: LD_ADDR_VAR 0 3
21516: PUSH
21517: LD_VAR 0 3
21521: PUSH
21522: LD_INT 1
21524: PLUS
21525: ST_TO_ADDR
// for i in tmp do
21526: LD_ADDR_VAR 0 1
21530: PUSH
21531: LD_VAR 0 2
21535: PUSH
21536: FOR_IN
21537: IFFALSE 21568
// if GetLives ( i ) < 1000 then
21539: LD_VAR 0 1
21543: PPUSH
21544: CALL_OW 256
21548: PUSH
21549: LD_INT 1000
21551: LESS
21552: IFFALSE 21566
// SetLives ( i , 1000 ) ;
21554: LD_VAR 0 1
21558: PPUSH
21559: LD_INT 1000
21561: PPUSH
21562: CALL_OW 234
21566: GO 21536
21568: POP
21569: POP
// until p > 20 ;
21570: LD_VAR 0 3
21574: PUSH
21575: LD_INT 20
21577: GREATER
21578: IFFALSE 21505
// end ;
21580: PPOPN 3
21582: END
// every 0 0$1 trigger StreamModeActive and sTime do
21583: LD_EXP 38
21587: PUSH
21588: LD_EXP 89
21592: AND
21593: IFFALSE 21628
21595: GO 21597
21597: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21598: LD_INT 28
21600: PPUSH
21601: LD_OWVAR 2
21605: PPUSH
21606: LD_INT 2
21608: PPUSH
21609: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21613: LD_INT 30
21615: PPUSH
21616: LD_OWVAR 2
21620: PPUSH
21621: LD_INT 2
21623: PPUSH
21624: CALL_OW 322
// end ;
21628: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21629: LD_EXP 38
21633: PUSH
21634: LD_EXP 90
21638: AND
21639: IFFALSE 21760
21641: GO 21643
21643: DISABLE
21644: LD_INT 0
21646: PPUSH
21647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21648: LD_ADDR_VAR 0 2
21652: PUSH
21653: LD_INT 22
21655: PUSH
21656: LD_OWVAR 2
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 21
21667: PUSH
21668: LD_INT 1
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 3
21677: PUSH
21678: LD_INT 23
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: LIST
21696: PPUSH
21697: CALL_OW 69
21701: ST_TO_ADDR
// if not tmp then
21702: LD_VAR 0 2
21706: NOT
21707: IFFALSE 21711
// exit ;
21709: GO 21760
// for i in tmp do
21711: LD_ADDR_VAR 0 1
21715: PUSH
21716: LD_VAR 0 2
21720: PUSH
21721: FOR_IN
21722: IFFALSE 21758
// begin if Crawls ( i ) then
21724: LD_VAR 0 1
21728: PPUSH
21729: CALL_OW 318
21733: IFFALSE 21744
// ComWalk ( i ) ;
21735: LD_VAR 0 1
21739: PPUSH
21740: CALL_OW 138
// SetClass ( i , 2 ) ;
21744: LD_VAR 0 1
21748: PPUSH
21749: LD_INT 2
21751: PPUSH
21752: CALL_OW 336
// end ;
21756: GO 21721
21758: POP
21759: POP
// end ;
21760: PPOPN 2
21762: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21763: LD_EXP 38
21767: PUSH
21768: LD_EXP 91
21772: AND
21773: IFFALSE 22054
21775: GO 21777
21777: DISABLE
21778: LD_INT 0
21780: PPUSH
21781: PPUSH
21782: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21783: LD_OWVAR 2
21787: PPUSH
21788: LD_INT 9
21790: PPUSH
21791: LD_INT 1
21793: PPUSH
21794: LD_INT 1
21796: PPUSH
21797: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21801: LD_INT 9
21803: PPUSH
21804: LD_OWVAR 2
21808: PPUSH
21809: CALL_OW 343
// uc_side := 9 ;
21813: LD_ADDR_OWVAR 20
21817: PUSH
21818: LD_INT 9
21820: ST_TO_ADDR
// uc_nation := 2 ;
21821: LD_ADDR_OWVAR 21
21825: PUSH
21826: LD_INT 2
21828: ST_TO_ADDR
// hc_name := Dark Warrior ;
21829: LD_ADDR_OWVAR 26
21833: PUSH
21834: LD_STRING Dark Warrior
21836: ST_TO_ADDR
// hc_gallery :=  ;
21837: LD_ADDR_OWVAR 33
21841: PUSH
21842: LD_STRING 
21844: ST_TO_ADDR
// hc_noskilllimit := true ;
21845: LD_ADDR_OWVAR 76
21849: PUSH
21850: LD_INT 1
21852: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21853: LD_ADDR_OWVAR 31
21857: PUSH
21858: LD_INT 30
21860: PUSH
21861: LD_INT 30
21863: PUSH
21864: LD_INT 30
21866: PUSH
21867: LD_INT 30
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: ST_TO_ADDR
// un := CreateHuman ;
21876: LD_ADDR_VAR 0 3
21880: PUSH
21881: CALL_OW 44
21885: ST_TO_ADDR
// hc_noskilllimit := false ;
21886: LD_ADDR_OWVAR 76
21890: PUSH
21891: LD_INT 0
21893: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21894: LD_VAR 0 3
21898: PPUSH
21899: LD_INT 1
21901: PPUSH
21902: CALL_OW 51
// p := 0 ;
21906: LD_ADDR_VAR 0 2
21910: PUSH
21911: LD_INT 0
21913: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21914: LD_INT 35
21916: PPUSH
21917: CALL_OW 67
// p := p + 1 ;
21921: LD_ADDR_VAR 0 2
21925: PUSH
21926: LD_VAR 0 2
21930: PUSH
21931: LD_INT 1
21933: PLUS
21934: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21935: LD_VAR 0 3
21939: PPUSH
21940: CALL_OW 256
21944: PUSH
21945: LD_INT 1000
21947: LESS
21948: IFFALSE 21962
// SetLives ( un , 1000 ) ;
21950: LD_VAR 0 3
21954: PPUSH
21955: LD_INT 1000
21957: PPUSH
21958: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21962: LD_VAR 0 3
21966: PPUSH
21967: LD_INT 81
21969: PUSH
21970: LD_OWVAR 2
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 91
21981: PUSH
21982: LD_VAR 0 3
21986: PUSH
21987: LD_INT 30
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PPUSH
21999: CALL_OW 69
22003: PPUSH
22004: LD_VAR 0 3
22008: PPUSH
22009: CALL_OW 74
22013: PPUSH
22014: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22018: LD_VAR 0 2
22022: PUSH
22023: LD_INT 60
22025: GREATER
22026: PUSH
22027: LD_VAR 0 3
22031: PPUSH
22032: CALL_OW 301
22036: OR
22037: IFFALSE 21914
// if un then
22039: LD_VAR 0 3
22043: IFFALSE 22054
// RemoveUnit ( un ) ;
22045: LD_VAR 0 3
22049: PPUSH
22050: CALL_OW 64
// end ;
22054: PPOPN 3
22056: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22057: LD_INT 0
22059: PPUSH
// case cmd of 301 :
22060: LD_VAR 0 1
22064: PUSH
22065: LD_INT 301
22067: DOUBLE
22068: EQUAL
22069: IFTRUE 22073
22071: GO 22105
22073: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22074: LD_VAR 0 6
22078: PPUSH
22079: LD_VAR 0 7
22083: PPUSH
22084: LD_VAR 0 8
22088: PPUSH
22089: LD_VAR 0 4
22093: PPUSH
22094: LD_VAR 0 5
22098: PPUSH
22099: CALL 23306 0 5
22103: GO 22226
22105: LD_INT 302
22107: DOUBLE
22108: EQUAL
22109: IFTRUE 22113
22111: GO 22150
22113: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22114: LD_VAR 0 6
22118: PPUSH
22119: LD_VAR 0 7
22123: PPUSH
22124: LD_VAR 0 8
22128: PPUSH
22129: LD_VAR 0 9
22133: PPUSH
22134: LD_VAR 0 4
22138: PPUSH
22139: LD_VAR 0 5
22143: PPUSH
22144: CALL 23397 0 6
22148: GO 22226
22150: LD_INT 303
22152: DOUBLE
22153: EQUAL
22154: IFTRUE 22158
22156: GO 22195
22158: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22159: LD_VAR 0 6
22163: PPUSH
22164: LD_VAR 0 7
22168: PPUSH
22169: LD_VAR 0 8
22173: PPUSH
22174: LD_VAR 0 9
22178: PPUSH
22179: LD_VAR 0 4
22183: PPUSH
22184: LD_VAR 0 5
22188: PPUSH
22189: CALL 22231 0 6
22193: GO 22226
22195: LD_INT 304
22197: DOUBLE
22198: EQUAL
22199: IFTRUE 22203
22201: GO 22225
22203: POP
// hHackTeleport ( unit , x , y ) ; end ;
22204: LD_VAR 0 2
22208: PPUSH
22209: LD_VAR 0 4
22213: PPUSH
22214: LD_VAR 0 5
22218: PPUSH
22219: CALL 23990 0 3
22223: GO 22226
22225: POP
// end ;
22226: LD_VAR 0 12
22230: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22231: LD_INT 0
22233: PPUSH
22234: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22235: LD_VAR 0 1
22239: PUSH
22240: LD_INT 1
22242: LESS
22243: PUSH
22244: LD_VAR 0 1
22248: PUSH
22249: LD_INT 3
22251: GREATER
22252: OR
22253: PUSH
22254: LD_VAR 0 5
22258: PPUSH
22259: LD_VAR 0 6
22263: PPUSH
22264: CALL_OW 428
22268: OR
22269: IFFALSE 22273
// exit ;
22271: GO 22993
// uc_side := your_side ;
22273: LD_ADDR_OWVAR 20
22277: PUSH
22278: LD_OWVAR 2
22282: ST_TO_ADDR
// uc_nation := nation ;
22283: LD_ADDR_OWVAR 21
22287: PUSH
22288: LD_VAR 0 1
22292: ST_TO_ADDR
// bc_level = 1 ;
22293: LD_ADDR_OWVAR 43
22297: PUSH
22298: LD_INT 1
22300: ST_TO_ADDR
// case btype of 1 :
22301: LD_VAR 0 2
22305: PUSH
22306: LD_INT 1
22308: DOUBLE
22309: EQUAL
22310: IFTRUE 22314
22312: GO 22325
22314: POP
// bc_type := b_depot ; 2 :
22315: LD_ADDR_OWVAR 42
22319: PUSH
22320: LD_INT 0
22322: ST_TO_ADDR
22323: GO 22937
22325: LD_INT 2
22327: DOUBLE
22328: EQUAL
22329: IFTRUE 22333
22331: GO 22344
22333: POP
// bc_type := b_warehouse ; 3 :
22334: LD_ADDR_OWVAR 42
22338: PUSH
22339: LD_INT 1
22341: ST_TO_ADDR
22342: GO 22937
22344: LD_INT 3
22346: DOUBLE
22347: EQUAL
22348: IFTRUE 22352
22350: GO 22363
22352: POP
// bc_type := b_lab ; 4 .. 9 :
22353: LD_ADDR_OWVAR 42
22357: PUSH
22358: LD_INT 6
22360: ST_TO_ADDR
22361: GO 22937
22363: LD_INT 4
22365: DOUBLE
22366: GREATEREQUAL
22367: IFFALSE 22375
22369: LD_INT 9
22371: DOUBLE
22372: LESSEQUAL
22373: IFTRUE 22377
22375: GO 22429
22377: POP
// begin bc_type := b_lab_half ;
22378: LD_ADDR_OWVAR 42
22382: PUSH
22383: LD_INT 7
22385: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22386: LD_ADDR_OWVAR 44
22390: PUSH
22391: LD_INT 10
22393: PUSH
22394: LD_INT 11
22396: PUSH
22397: LD_INT 12
22399: PUSH
22400: LD_INT 15
22402: PUSH
22403: LD_INT 14
22405: PUSH
22406: LD_INT 13
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: PUSH
22417: LD_VAR 0 2
22421: PUSH
22422: LD_INT 3
22424: MINUS
22425: ARRAY
22426: ST_TO_ADDR
// end ; 10 .. 13 :
22427: GO 22937
22429: LD_INT 10
22431: DOUBLE
22432: GREATEREQUAL
22433: IFFALSE 22441
22435: LD_INT 13
22437: DOUBLE
22438: LESSEQUAL
22439: IFTRUE 22443
22441: GO 22520
22443: POP
// begin bc_type := b_lab_full ;
22444: LD_ADDR_OWVAR 42
22448: PUSH
22449: LD_INT 8
22451: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22452: LD_ADDR_OWVAR 44
22456: PUSH
22457: LD_INT 10
22459: PUSH
22460: LD_INT 12
22462: PUSH
22463: LD_INT 14
22465: PUSH
22466: LD_INT 13
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: PUSH
22475: LD_VAR 0 2
22479: PUSH
22480: LD_INT 9
22482: MINUS
22483: ARRAY
22484: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22485: LD_ADDR_OWVAR 45
22489: PUSH
22490: LD_INT 11
22492: PUSH
22493: LD_INT 15
22495: PUSH
22496: LD_INT 12
22498: PUSH
22499: LD_INT 15
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: PUSH
22508: LD_VAR 0 2
22512: PUSH
22513: LD_INT 9
22515: MINUS
22516: ARRAY
22517: ST_TO_ADDR
// end ; 14 :
22518: GO 22937
22520: LD_INT 14
22522: DOUBLE
22523: EQUAL
22524: IFTRUE 22528
22526: GO 22539
22528: POP
// bc_type := b_workshop ; 15 :
22529: LD_ADDR_OWVAR 42
22533: PUSH
22534: LD_INT 2
22536: ST_TO_ADDR
22537: GO 22937
22539: LD_INT 15
22541: DOUBLE
22542: EQUAL
22543: IFTRUE 22547
22545: GO 22558
22547: POP
// bc_type := b_factory ; 16 :
22548: LD_ADDR_OWVAR 42
22552: PUSH
22553: LD_INT 3
22555: ST_TO_ADDR
22556: GO 22937
22558: LD_INT 16
22560: DOUBLE
22561: EQUAL
22562: IFTRUE 22566
22564: GO 22577
22566: POP
// bc_type := b_ext_gun ; 17 :
22567: LD_ADDR_OWVAR 42
22571: PUSH
22572: LD_INT 17
22574: ST_TO_ADDR
22575: GO 22937
22577: LD_INT 17
22579: DOUBLE
22580: EQUAL
22581: IFTRUE 22585
22583: GO 22613
22585: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22586: LD_ADDR_OWVAR 42
22590: PUSH
22591: LD_INT 19
22593: PUSH
22594: LD_INT 23
22596: PUSH
22597: LD_INT 19
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: LIST
22604: PUSH
22605: LD_VAR 0 1
22609: ARRAY
22610: ST_TO_ADDR
22611: GO 22937
22613: LD_INT 18
22615: DOUBLE
22616: EQUAL
22617: IFTRUE 22621
22619: GO 22632
22621: POP
// bc_type := b_ext_radar ; 19 :
22622: LD_ADDR_OWVAR 42
22626: PUSH
22627: LD_INT 20
22629: ST_TO_ADDR
22630: GO 22937
22632: LD_INT 19
22634: DOUBLE
22635: EQUAL
22636: IFTRUE 22640
22638: GO 22651
22640: POP
// bc_type := b_ext_radio ; 20 :
22641: LD_ADDR_OWVAR 42
22645: PUSH
22646: LD_INT 22
22648: ST_TO_ADDR
22649: GO 22937
22651: LD_INT 20
22653: DOUBLE
22654: EQUAL
22655: IFTRUE 22659
22657: GO 22670
22659: POP
// bc_type := b_ext_siberium ; 21 :
22660: LD_ADDR_OWVAR 42
22664: PUSH
22665: LD_INT 21
22667: ST_TO_ADDR
22668: GO 22937
22670: LD_INT 21
22672: DOUBLE
22673: EQUAL
22674: IFTRUE 22678
22676: GO 22689
22678: POP
// bc_type := b_ext_computer ; 22 :
22679: LD_ADDR_OWVAR 42
22683: PUSH
22684: LD_INT 24
22686: ST_TO_ADDR
22687: GO 22937
22689: LD_INT 22
22691: DOUBLE
22692: EQUAL
22693: IFTRUE 22697
22695: GO 22708
22697: POP
// bc_type := b_ext_track ; 23 :
22698: LD_ADDR_OWVAR 42
22702: PUSH
22703: LD_INT 16
22705: ST_TO_ADDR
22706: GO 22937
22708: LD_INT 23
22710: DOUBLE
22711: EQUAL
22712: IFTRUE 22716
22714: GO 22727
22716: POP
// bc_type := b_ext_laser ; 24 :
22717: LD_ADDR_OWVAR 42
22721: PUSH
22722: LD_INT 25
22724: ST_TO_ADDR
22725: GO 22937
22727: LD_INT 24
22729: DOUBLE
22730: EQUAL
22731: IFTRUE 22735
22733: GO 22746
22735: POP
// bc_type := b_control_tower ; 25 :
22736: LD_ADDR_OWVAR 42
22740: PUSH
22741: LD_INT 36
22743: ST_TO_ADDR
22744: GO 22937
22746: LD_INT 25
22748: DOUBLE
22749: EQUAL
22750: IFTRUE 22754
22752: GO 22765
22754: POP
// bc_type := b_breastwork ; 26 :
22755: LD_ADDR_OWVAR 42
22759: PUSH
22760: LD_INT 31
22762: ST_TO_ADDR
22763: GO 22937
22765: LD_INT 26
22767: DOUBLE
22768: EQUAL
22769: IFTRUE 22773
22771: GO 22784
22773: POP
// bc_type := b_bunker ; 27 :
22774: LD_ADDR_OWVAR 42
22778: PUSH
22779: LD_INT 32
22781: ST_TO_ADDR
22782: GO 22937
22784: LD_INT 27
22786: DOUBLE
22787: EQUAL
22788: IFTRUE 22792
22790: GO 22803
22792: POP
// bc_type := b_turret ; 28 :
22793: LD_ADDR_OWVAR 42
22797: PUSH
22798: LD_INT 33
22800: ST_TO_ADDR
22801: GO 22937
22803: LD_INT 28
22805: DOUBLE
22806: EQUAL
22807: IFTRUE 22811
22809: GO 22822
22811: POP
// bc_type := b_armoury ; 29 :
22812: LD_ADDR_OWVAR 42
22816: PUSH
22817: LD_INT 4
22819: ST_TO_ADDR
22820: GO 22937
22822: LD_INT 29
22824: DOUBLE
22825: EQUAL
22826: IFTRUE 22830
22828: GO 22841
22830: POP
// bc_type := b_barracks ; 30 :
22831: LD_ADDR_OWVAR 42
22835: PUSH
22836: LD_INT 5
22838: ST_TO_ADDR
22839: GO 22937
22841: LD_INT 30
22843: DOUBLE
22844: EQUAL
22845: IFTRUE 22849
22847: GO 22860
22849: POP
// bc_type := b_solar_power ; 31 :
22850: LD_ADDR_OWVAR 42
22854: PUSH
22855: LD_INT 27
22857: ST_TO_ADDR
22858: GO 22937
22860: LD_INT 31
22862: DOUBLE
22863: EQUAL
22864: IFTRUE 22868
22866: GO 22879
22868: POP
// bc_type := b_oil_power ; 32 :
22869: LD_ADDR_OWVAR 42
22873: PUSH
22874: LD_INT 26
22876: ST_TO_ADDR
22877: GO 22937
22879: LD_INT 32
22881: DOUBLE
22882: EQUAL
22883: IFTRUE 22887
22885: GO 22898
22887: POP
// bc_type := b_siberite_power ; 33 :
22888: LD_ADDR_OWVAR 42
22892: PUSH
22893: LD_INT 28
22895: ST_TO_ADDR
22896: GO 22937
22898: LD_INT 33
22900: DOUBLE
22901: EQUAL
22902: IFTRUE 22906
22904: GO 22917
22906: POP
// bc_type := b_oil_mine ; 34 :
22907: LD_ADDR_OWVAR 42
22911: PUSH
22912: LD_INT 29
22914: ST_TO_ADDR
22915: GO 22937
22917: LD_INT 34
22919: DOUBLE
22920: EQUAL
22921: IFTRUE 22925
22923: GO 22936
22925: POP
// bc_type := b_siberite_mine ; end ;
22926: LD_ADDR_OWVAR 42
22930: PUSH
22931: LD_INT 30
22933: ST_TO_ADDR
22934: GO 22937
22936: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22937: LD_ADDR_VAR 0 8
22941: PUSH
22942: LD_VAR 0 5
22946: PPUSH
22947: LD_VAR 0 6
22951: PPUSH
22952: LD_VAR 0 3
22956: PPUSH
22957: CALL_OW 47
22961: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22962: LD_OWVAR 42
22966: PUSH
22967: LD_INT 32
22969: PUSH
22970: LD_INT 33
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: IN
22977: IFFALSE 22993
// PlaceWeaponTurret ( b , weapon ) ;
22979: LD_VAR 0 8
22983: PPUSH
22984: LD_VAR 0 4
22988: PPUSH
22989: CALL_OW 431
// end ;
22993: LD_VAR 0 7
22997: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22998: LD_INT 0
23000: PPUSH
23001: PPUSH
23002: PPUSH
23003: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23004: LD_ADDR_VAR 0 4
23008: PUSH
23009: LD_INT 22
23011: PUSH
23012: LD_OWVAR 2
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: LD_INT 30
23026: PUSH
23027: LD_INT 0
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 30
23036: PUSH
23037: LD_INT 1
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: LIST
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PPUSH
23053: CALL_OW 69
23057: ST_TO_ADDR
// if not tmp then
23058: LD_VAR 0 4
23062: NOT
23063: IFFALSE 23067
// exit ;
23065: GO 23126
// for i in tmp do
23067: LD_ADDR_VAR 0 2
23071: PUSH
23072: LD_VAR 0 4
23076: PUSH
23077: FOR_IN
23078: IFFALSE 23124
// for j = 1 to 3 do
23080: LD_ADDR_VAR 0 3
23084: PUSH
23085: DOUBLE
23086: LD_INT 1
23088: DEC
23089: ST_TO_ADDR
23090: LD_INT 3
23092: PUSH
23093: FOR_TO
23094: IFFALSE 23120
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23096: LD_VAR 0 2
23100: PPUSH
23101: CALL_OW 274
23105: PPUSH
23106: LD_VAR 0 3
23110: PPUSH
23111: LD_INT 99999
23113: PPUSH
23114: CALL_OW 277
23118: GO 23093
23120: POP
23121: POP
23122: GO 23077
23124: POP
23125: POP
// end ;
23126: LD_VAR 0 1
23130: RET
// export function hHackSetLevel10 ; var i , j ; begin
23131: LD_INT 0
23133: PPUSH
23134: PPUSH
23135: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23136: LD_ADDR_VAR 0 2
23140: PUSH
23141: LD_INT 21
23143: PUSH
23144: LD_INT 1
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PPUSH
23151: CALL_OW 69
23155: PUSH
23156: FOR_IN
23157: IFFALSE 23209
// if IsSelected ( i ) then
23159: LD_VAR 0 2
23163: PPUSH
23164: CALL_OW 306
23168: IFFALSE 23207
// begin for j := 1 to 4 do
23170: LD_ADDR_VAR 0 3
23174: PUSH
23175: DOUBLE
23176: LD_INT 1
23178: DEC
23179: ST_TO_ADDR
23180: LD_INT 4
23182: PUSH
23183: FOR_TO
23184: IFFALSE 23205
// SetSkill ( i , j , 10 ) ;
23186: LD_VAR 0 2
23190: PPUSH
23191: LD_VAR 0 3
23195: PPUSH
23196: LD_INT 10
23198: PPUSH
23199: CALL_OW 237
23203: GO 23183
23205: POP
23206: POP
// end ;
23207: GO 23156
23209: POP
23210: POP
// end ;
23211: LD_VAR 0 1
23215: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23216: LD_INT 0
23218: PPUSH
23219: PPUSH
23220: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23221: LD_ADDR_VAR 0 2
23225: PUSH
23226: LD_INT 22
23228: PUSH
23229: LD_OWVAR 2
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 21
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PPUSH
23252: CALL_OW 69
23256: PUSH
23257: FOR_IN
23258: IFFALSE 23299
// begin for j := 1 to 4 do
23260: LD_ADDR_VAR 0 3
23264: PUSH
23265: DOUBLE
23266: LD_INT 1
23268: DEC
23269: ST_TO_ADDR
23270: LD_INT 4
23272: PUSH
23273: FOR_TO
23274: IFFALSE 23295
// SetSkill ( i , j , 10 ) ;
23276: LD_VAR 0 2
23280: PPUSH
23281: LD_VAR 0 3
23285: PPUSH
23286: LD_INT 10
23288: PPUSH
23289: CALL_OW 237
23293: GO 23273
23295: POP
23296: POP
// end ;
23297: GO 23257
23299: POP
23300: POP
// end ;
23301: LD_VAR 0 1
23305: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23306: LD_INT 0
23308: PPUSH
// uc_side := your_side ;
23309: LD_ADDR_OWVAR 20
23313: PUSH
23314: LD_OWVAR 2
23318: ST_TO_ADDR
// uc_nation := nation ;
23319: LD_ADDR_OWVAR 21
23323: PUSH
23324: LD_VAR 0 1
23328: ST_TO_ADDR
// InitHc ;
23329: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23333: LD_INT 0
23335: PPUSH
23336: LD_VAR 0 2
23340: PPUSH
23341: LD_VAR 0 3
23345: PPUSH
23346: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23350: LD_VAR 0 4
23354: PPUSH
23355: LD_VAR 0 5
23359: PPUSH
23360: CALL_OW 428
23364: PUSH
23365: LD_INT 0
23367: EQUAL
23368: IFFALSE 23392
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23370: CALL_OW 44
23374: PPUSH
23375: LD_VAR 0 4
23379: PPUSH
23380: LD_VAR 0 5
23384: PPUSH
23385: LD_INT 1
23387: PPUSH
23388: CALL_OW 48
// end ;
23392: LD_VAR 0 6
23396: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23397: LD_INT 0
23399: PPUSH
23400: PPUSH
// uc_side := your_side ;
23401: LD_ADDR_OWVAR 20
23405: PUSH
23406: LD_OWVAR 2
23410: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23411: LD_VAR 0 1
23415: PUSH
23416: LD_INT 1
23418: PUSH
23419: LD_INT 2
23421: PUSH
23422: LD_INT 3
23424: PUSH
23425: LD_INT 4
23427: PUSH
23428: LD_INT 5
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: IN
23438: IFFALSE 23450
// uc_nation := nation_american else
23440: LD_ADDR_OWVAR 21
23444: PUSH
23445: LD_INT 1
23447: ST_TO_ADDR
23448: GO 23493
// if chassis in [ 11 , 12 , 13 , 14 ] then
23450: LD_VAR 0 1
23454: PUSH
23455: LD_INT 11
23457: PUSH
23458: LD_INT 12
23460: PUSH
23461: LD_INT 13
23463: PUSH
23464: LD_INT 14
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: IN
23473: IFFALSE 23485
// uc_nation := nation_arabian else
23475: LD_ADDR_OWVAR 21
23479: PUSH
23480: LD_INT 2
23482: ST_TO_ADDR
23483: GO 23493
// uc_nation := nation_russian ;
23485: LD_ADDR_OWVAR 21
23489: PUSH
23490: LD_INT 3
23492: ST_TO_ADDR
// vc_chassis := chassis ;
23493: LD_ADDR_OWVAR 37
23497: PUSH
23498: LD_VAR 0 1
23502: ST_TO_ADDR
// vc_engine := engine ;
23503: LD_ADDR_OWVAR 39
23507: PUSH
23508: LD_VAR 0 2
23512: ST_TO_ADDR
// vc_control := control ;
23513: LD_ADDR_OWVAR 38
23517: PUSH
23518: LD_VAR 0 3
23522: ST_TO_ADDR
// vc_weapon := weapon ;
23523: LD_ADDR_OWVAR 40
23527: PUSH
23528: LD_VAR 0 4
23532: ST_TO_ADDR
// un := CreateVehicle ;
23533: LD_ADDR_VAR 0 8
23537: PUSH
23538: CALL_OW 45
23542: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23543: LD_VAR 0 8
23547: PPUSH
23548: LD_INT 0
23550: PPUSH
23551: LD_INT 5
23553: PPUSH
23554: CALL_OW 12
23558: PPUSH
23559: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23563: LD_VAR 0 8
23567: PPUSH
23568: LD_VAR 0 5
23572: PPUSH
23573: LD_VAR 0 6
23577: PPUSH
23578: LD_INT 1
23580: PPUSH
23581: CALL_OW 48
// end ;
23585: LD_VAR 0 7
23589: RET
// export hInvincible ; every 1 do
23590: GO 23592
23592: DISABLE
// hInvincible := [ ] ;
23593: LD_ADDR_EXP 92
23597: PUSH
23598: EMPTY
23599: ST_TO_ADDR
23600: END
// every 10 do var i ;
23601: GO 23603
23603: DISABLE
23604: LD_INT 0
23606: PPUSH
// begin enable ;
23607: ENABLE
// if not hInvincible then
23608: LD_EXP 92
23612: NOT
23613: IFFALSE 23617
// exit ;
23615: GO 23661
// for i in hInvincible do
23617: LD_ADDR_VAR 0 1
23621: PUSH
23622: LD_EXP 92
23626: PUSH
23627: FOR_IN
23628: IFFALSE 23659
// if GetLives ( i ) < 1000 then
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL_OW 256
23639: PUSH
23640: LD_INT 1000
23642: LESS
23643: IFFALSE 23657
// SetLives ( i , 1000 ) ;
23645: LD_VAR 0 1
23649: PPUSH
23650: LD_INT 1000
23652: PPUSH
23653: CALL_OW 234
23657: GO 23627
23659: POP
23660: POP
// end ;
23661: PPOPN 1
23663: END
// export function hHackInvincible ; var i ; begin
23664: LD_INT 0
23666: PPUSH
23667: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23668: LD_ADDR_VAR 0 2
23672: PUSH
23673: LD_INT 2
23675: PUSH
23676: LD_INT 21
23678: PUSH
23679: LD_INT 1
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 21
23688: PUSH
23689: LD_INT 2
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: LIST
23700: PPUSH
23701: CALL_OW 69
23705: PUSH
23706: FOR_IN
23707: IFFALSE 23768
// if IsSelected ( i ) then
23709: LD_VAR 0 2
23713: PPUSH
23714: CALL_OW 306
23718: IFFALSE 23766
// begin if i in hInvincible then
23720: LD_VAR 0 2
23724: PUSH
23725: LD_EXP 92
23729: IN
23730: IFFALSE 23750
// hInvincible := hInvincible diff i else
23732: LD_ADDR_EXP 92
23736: PUSH
23737: LD_EXP 92
23741: PUSH
23742: LD_VAR 0 2
23746: DIFF
23747: ST_TO_ADDR
23748: GO 23766
// hInvincible := hInvincible union i ;
23750: LD_ADDR_EXP 92
23754: PUSH
23755: LD_EXP 92
23759: PUSH
23760: LD_VAR 0 2
23764: UNION
23765: ST_TO_ADDR
// end ;
23766: GO 23706
23768: POP
23769: POP
// end ;
23770: LD_VAR 0 1
23774: RET
// export function hHackInvisible ; var i , j ; begin
23775: LD_INT 0
23777: PPUSH
23778: PPUSH
23779: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23780: LD_ADDR_VAR 0 2
23784: PUSH
23785: LD_INT 21
23787: PUSH
23788: LD_INT 1
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PPUSH
23795: CALL_OW 69
23799: PUSH
23800: FOR_IN
23801: IFFALSE 23825
// if IsSelected ( i ) then
23803: LD_VAR 0 2
23807: PPUSH
23808: CALL_OW 306
23812: IFFALSE 23823
// ComForceInvisible ( i ) ;
23814: LD_VAR 0 2
23818: PPUSH
23819: CALL_OW 496
23823: GO 23800
23825: POP
23826: POP
// end ;
23827: LD_VAR 0 1
23831: RET
// export function hHackChangeYourSide ; begin
23832: LD_INT 0
23834: PPUSH
// if your_side = 8 then
23835: LD_OWVAR 2
23839: PUSH
23840: LD_INT 8
23842: EQUAL
23843: IFFALSE 23855
// your_side := 0 else
23845: LD_ADDR_OWVAR 2
23849: PUSH
23850: LD_INT 0
23852: ST_TO_ADDR
23853: GO 23869
// your_side := your_side + 1 ;
23855: LD_ADDR_OWVAR 2
23859: PUSH
23860: LD_OWVAR 2
23864: PUSH
23865: LD_INT 1
23867: PLUS
23868: ST_TO_ADDR
// end ;
23869: LD_VAR 0 1
23873: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23874: LD_INT 0
23876: PPUSH
23877: PPUSH
23878: PPUSH
// for i in all_units do
23879: LD_ADDR_VAR 0 2
23883: PUSH
23884: LD_OWVAR 3
23888: PUSH
23889: FOR_IN
23890: IFFALSE 23968
// if IsSelected ( i ) then
23892: LD_VAR 0 2
23896: PPUSH
23897: CALL_OW 306
23901: IFFALSE 23966
// begin j := GetSide ( i ) ;
23903: LD_ADDR_VAR 0 3
23907: PUSH
23908: LD_VAR 0 2
23912: PPUSH
23913: CALL_OW 255
23917: ST_TO_ADDR
// if j = 8 then
23918: LD_VAR 0 3
23922: PUSH
23923: LD_INT 8
23925: EQUAL
23926: IFFALSE 23938
// j := 0 else
23928: LD_ADDR_VAR 0 3
23932: PUSH
23933: LD_INT 0
23935: ST_TO_ADDR
23936: GO 23952
// j := j + 1 ;
23938: LD_ADDR_VAR 0 3
23942: PUSH
23943: LD_VAR 0 3
23947: PUSH
23948: LD_INT 1
23950: PLUS
23951: ST_TO_ADDR
// SetSide ( i , j ) ;
23952: LD_VAR 0 2
23956: PPUSH
23957: LD_VAR 0 3
23961: PPUSH
23962: CALL_OW 235
// end ;
23966: GO 23889
23968: POP
23969: POP
// end ;
23970: LD_VAR 0 1
23974: RET
// export function hHackFog ; begin
23975: LD_INT 0
23977: PPUSH
// FogOff ( true ) ;
23978: LD_INT 1
23980: PPUSH
23981: CALL_OW 344
// end ;
23985: LD_VAR 0 1
23989: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23990: LD_INT 0
23992: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23993: LD_VAR 0 1
23997: PPUSH
23998: LD_VAR 0 2
24002: PPUSH
24003: LD_VAR 0 3
24007: PPUSH
24008: LD_INT 1
24010: PPUSH
24011: LD_INT 1
24013: PPUSH
24014: CALL_OW 483
// CenterOnXY ( x , y ) ;
24018: LD_VAR 0 2
24022: PPUSH
24023: LD_VAR 0 3
24027: PPUSH
24028: CALL_OW 84
// end ; end_of_file
24032: LD_VAR 0 4
24036: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24037: LD_INT 0
24039: PPUSH
24040: PPUSH
24041: PPUSH
24042: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24043: LD_VAR 0 1
24047: PPUSH
24048: CALL_OW 264
24052: PUSH
24053: LD_EXP 23
24057: EQUAL
24058: IFFALSE 24130
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24060: LD_INT 68
24062: PPUSH
24063: LD_VAR 0 1
24067: PPUSH
24068: CALL_OW 255
24072: PPUSH
24073: CALL_OW 321
24077: PUSH
24078: LD_INT 2
24080: EQUAL
24081: IFFALSE 24093
// eff := 70 else
24083: LD_ADDR_VAR 0 4
24087: PUSH
24088: LD_INT 70
24090: ST_TO_ADDR
24091: GO 24101
// eff := 30 ;
24093: LD_ADDR_VAR 0 4
24097: PUSH
24098: LD_INT 30
24100: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24101: LD_VAR 0 1
24105: PPUSH
24106: CALL_OW 250
24110: PPUSH
24111: LD_VAR 0 1
24115: PPUSH
24116: CALL_OW 251
24120: PPUSH
24121: LD_VAR 0 4
24125: PPUSH
24126: CALL_OW 495
// end ; end ;
24130: LD_VAR 0 2
24134: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24135: LD_INT 0
24137: PPUSH
// end ;
24138: LD_VAR 0 4
24142: RET
// export function SOS_Command ( cmd ) ; begin
24143: LD_INT 0
24145: PPUSH
// end ;
24146: LD_VAR 0 2
24150: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24151: LD_INT 0
24153: PPUSH
// if cmd = 121 then
24154: LD_VAR 0 1
24158: PUSH
24159: LD_INT 121
24161: EQUAL
24162: IFFALSE 24164
// end ;
24164: LD_VAR 0 6
24168: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24169: LD_INT 0
24171: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24172: LD_VAR 0 1
24176: PUSH
24177: LD_INT 250
24179: EQUAL
24180: PUSH
24181: LD_VAR 0 2
24185: PPUSH
24186: CALL_OW 264
24190: PUSH
24191: LD_EXP 26
24195: EQUAL
24196: AND
24197: IFFALSE 24218
// MinerPlaceMine ( unit , x , y ) ;
24199: LD_VAR 0 2
24203: PPUSH
24204: LD_VAR 0 4
24208: PPUSH
24209: LD_VAR 0 5
24213: PPUSH
24214: CALL 26567 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24218: LD_VAR 0 1
24222: PUSH
24223: LD_INT 251
24225: EQUAL
24226: PUSH
24227: LD_VAR 0 2
24231: PPUSH
24232: CALL_OW 264
24236: PUSH
24237: LD_EXP 26
24241: EQUAL
24242: AND
24243: IFFALSE 24264
// MinerDetonateMine ( unit , x , y ) ;
24245: LD_VAR 0 2
24249: PPUSH
24250: LD_VAR 0 4
24254: PPUSH
24255: LD_VAR 0 5
24259: PPUSH
24260: CALL 26844 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24264: LD_VAR 0 1
24268: PUSH
24269: LD_INT 252
24271: EQUAL
24272: PUSH
24273: LD_VAR 0 2
24277: PPUSH
24278: CALL_OW 264
24282: PUSH
24283: LD_EXP 26
24287: EQUAL
24288: AND
24289: IFFALSE 24310
// MinerCreateMinefield ( unit , x , y ) ;
24291: LD_VAR 0 2
24295: PPUSH
24296: LD_VAR 0 4
24300: PPUSH
24301: LD_VAR 0 5
24305: PPUSH
24306: CALL 27261 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24310: LD_VAR 0 1
24314: PUSH
24315: LD_INT 253
24317: EQUAL
24318: PUSH
24319: LD_VAR 0 2
24323: PPUSH
24324: CALL_OW 257
24328: PUSH
24329: LD_INT 5
24331: EQUAL
24332: AND
24333: IFFALSE 24354
// ComBinocular ( unit , x , y ) ;
24335: LD_VAR 0 2
24339: PPUSH
24340: LD_VAR 0 4
24344: PPUSH
24345: LD_VAR 0 5
24349: PPUSH
24350: CALL 27632 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24354: LD_VAR 0 1
24358: PUSH
24359: LD_INT 254
24361: EQUAL
24362: PUSH
24363: LD_VAR 0 2
24367: PPUSH
24368: CALL_OW 264
24372: PUSH
24373: LD_EXP 21
24377: EQUAL
24378: AND
24379: PUSH
24380: LD_VAR 0 3
24384: PPUSH
24385: CALL_OW 263
24389: PUSH
24390: LD_INT 3
24392: EQUAL
24393: AND
24394: IFFALSE 24410
// HackDestroyVehicle ( unit , selectedUnit ) ;
24396: LD_VAR 0 2
24400: PPUSH
24401: LD_VAR 0 3
24405: PPUSH
24406: CALL 25927 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24410: LD_VAR 0 1
24414: PUSH
24415: LD_INT 255
24417: EQUAL
24418: PUSH
24419: LD_VAR 0 2
24423: PPUSH
24424: CALL_OW 264
24428: PUSH
24429: LD_INT 14
24431: PUSH
24432: LD_INT 53
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: IN
24439: AND
24440: PUSH
24441: LD_VAR 0 4
24445: PPUSH
24446: LD_VAR 0 5
24450: PPUSH
24451: CALL_OW 488
24455: AND
24456: IFFALSE 24480
// CutTreeXYR ( unit , x , y , 12 ) ;
24458: LD_VAR 0 2
24462: PPUSH
24463: LD_VAR 0 4
24467: PPUSH
24468: LD_VAR 0 5
24472: PPUSH
24473: LD_INT 12
24475: PPUSH
24476: CALL 24493 0 4
// end ;
24480: LD_VAR 0 6
24484: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
24485: LD_INT 0
24487: PPUSH
// end ;
24488: LD_VAR 0 4
24492: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24493: LD_INT 0
24495: PPUSH
24496: PPUSH
24497: PPUSH
24498: PPUSH
24499: PPUSH
24500: PPUSH
24501: PPUSH
24502: PPUSH
24503: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24504: LD_VAR 0 1
24508: NOT
24509: PUSH
24510: LD_VAR 0 2
24514: PPUSH
24515: LD_VAR 0 3
24519: PPUSH
24520: CALL_OW 488
24524: NOT
24525: OR
24526: PUSH
24527: LD_VAR 0 4
24531: NOT
24532: OR
24533: IFFALSE 24537
// exit ;
24535: GO 24877
// list := [ ] ;
24537: LD_ADDR_VAR 0 13
24541: PUSH
24542: EMPTY
24543: ST_TO_ADDR
// if x - r < 0 then
24544: LD_VAR 0 2
24548: PUSH
24549: LD_VAR 0 4
24553: MINUS
24554: PUSH
24555: LD_INT 0
24557: LESS
24558: IFFALSE 24570
// min_x := 0 else
24560: LD_ADDR_VAR 0 7
24564: PUSH
24565: LD_INT 0
24567: ST_TO_ADDR
24568: GO 24586
// min_x := x - r ;
24570: LD_ADDR_VAR 0 7
24574: PUSH
24575: LD_VAR 0 2
24579: PUSH
24580: LD_VAR 0 4
24584: MINUS
24585: ST_TO_ADDR
// if y - r < 0 then
24586: LD_VAR 0 3
24590: PUSH
24591: LD_VAR 0 4
24595: MINUS
24596: PUSH
24597: LD_INT 0
24599: LESS
24600: IFFALSE 24612
// min_y := 0 else
24602: LD_ADDR_VAR 0 8
24606: PUSH
24607: LD_INT 0
24609: ST_TO_ADDR
24610: GO 24628
// min_y := y - r ;
24612: LD_ADDR_VAR 0 8
24616: PUSH
24617: LD_VAR 0 3
24621: PUSH
24622: LD_VAR 0 4
24626: MINUS
24627: ST_TO_ADDR
// max_x := x + r ;
24628: LD_ADDR_VAR 0 9
24632: PUSH
24633: LD_VAR 0 2
24637: PUSH
24638: LD_VAR 0 4
24642: PLUS
24643: ST_TO_ADDR
// max_y := y + r ;
24644: LD_ADDR_VAR 0 10
24648: PUSH
24649: LD_VAR 0 3
24653: PUSH
24654: LD_VAR 0 4
24658: PLUS
24659: ST_TO_ADDR
// for _x = min_x to max_x do
24660: LD_ADDR_VAR 0 11
24664: PUSH
24665: DOUBLE
24666: LD_VAR 0 7
24670: DEC
24671: ST_TO_ADDR
24672: LD_VAR 0 9
24676: PUSH
24677: FOR_TO
24678: IFFALSE 24795
// for _y = min_y to max_y do
24680: LD_ADDR_VAR 0 12
24684: PUSH
24685: DOUBLE
24686: LD_VAR 0 8
24690: DEC
24691: ST_TO_ADDR
24692: LD_VAR 0 10
24696: PUSH
24697: FOR_TO
24698: IFFALSE 24791
// begin if not ValidHex ( _x , _y ) then
24700: LD_VAR 0 11
24704: PPUSH
24705: LD_VAR 0 12
24709: PPUSH
24710: CALL_OW 488
24714: NOT
24715: IFFALSE 24719
// continue ;
24717: GO 24697
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24719: LD_VAR 0 11
24723: PPUSH
24724: LD_VAR 0 12
24728: PPUSH
24729: CALL_OW 351
24733: PUSH
24734: LD_VAR 0 11
24738: PPUSH
24739: LD_VAR 0 12
24743: PPUSH
24744: CALL_OW 554
24748: AND
24749: IFFALSE 24789
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24751: LD_ADDR_VAR 0 13
24755: PUSH
24756: LD_VAR 0 13
24760: PPUSH
24761: LD_VAR 0 13
24765: PUSH
24766: LD_INT 1
24768: PLUS
24769: PPUSH
24770: LD_VAR 0 11
24774: PUSH
24775: LD_VAR 0 12
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PPUSH
24784: CALL_OW 2
24788: ST_TO_ADDR
// end ;
24789: GO 24697
24791: POP
24792: POP
24793: GO 24677
24795: POP
24796: POP
// if not list then
24797: LD_VAR 0 13
24801: NOT
24802: IFFALSE 24806
// exit ;
24804: GO 24877
// for i in list do
24806: LD_ADDR_VAR 0 6
24810: PUSH
24811: LD_VAR 0 13
24815: PUSH
24816: FOR_IN
24817: IFFALSE 24875
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24819: LD_VAR 0 1
24823: PPUSH
24824: LD_STRING M
24826: PUSH
24827: LD_VAR 0 6
24831: PUSH
24832: LD_INT 1
24834: ARRAY
24835: PUSH
24836: LD_VAR 0 6
24840: PUSH
24841: LD_INT 2
24843: ARRAY
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: LD_INT 0
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: PUSH
24866: EMPTY
24867: LIST
24868: PPUSH
24869: CALL_OW 447
24873: GO 24816
24875: POP
24876: POP
// end ;
24877: LD_VAR 0 5
24881: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24882: LD_EXP 95
24886: NOT
24887: IFFALSE 24937
24889: GO 24891
24891: DISABLE
// begin initHack := true ;
24892: LD_ADDR_EXP 95
24896: PUSH
24897: LD_INT 1
24899: ST_TO_ADDR
// hackTanks := [ ] ;
24900: LD_ADDR_EXP 96
24904: PUSH
24905: EMPTY
24906: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24907: LD_ADDR_EXP 97
24911: PUSH
24912: EMPTY
24913: ST_TO_ADDR
// hackLimit := 3 ;
24914: LD_ADDR_EXP 98
24918: PUSH
24919: LD_INT 3
24921: ST_TO_ADDR
// hackDist := 12 ;
24922: LD_ADDR_EXP 99
24926: PUSH
24927: LD_INT 12
24929: ST_TO_ADDR
// hackCounter := [ ] ;
24930: LD_ADDR_EXP 100
24934: PUSH
24935: EMPTY
24936: ST_TO_ADDR
// end ;
24937: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24938: LD_EXP 95
24942: PUSH
24943: LD_INT 34
24945: PUSH
24946: LD_EXP 21
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PPUSH
24955: CALL_OW 69
24959: AND
24960: IFFALSE 25215
24962: GO 24964
24964: DISABLE
24965: LD_INT 0
24967: PPUSH
24968: PPUSH
// begin enable ;
24969: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24970: LD_ADDR_VAR 0 1
24974: PUSH
24975: LD_INT 34
24977: PUSH
24978: LD_EXP 21
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PPUSH
24987: CALL_OW 69
24991: PUSH
24992: FOR_IN
24993: IFFALSE 25213
// begin if not i in hackTanks then
24995: LD_VAR 0 1
24999: PUSH
25000: LD_EXP 96
25004: IN
25005: NOT
25006: IFFALSE 25089
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25008: LD_ADDR_EXP 96
25012: PUSH
25013: LD_EXP 96
25017: PPUSH
25018: LD_EXP 96
25022: PUSH
25023: LD_INT 1
25025: PLUS
25026: PPUSH
25027: LD_VAR 0 1
25031: PPUSH
25032: CALL_OW 1
25036: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25037: LD_ADDR_EXP 97
25041: PUSH
25042: LD_EXP 97
25046: PPUSH
25047: LD_EXP 97
25051: PUSH
25052: LD_INT 1
25054: PLUS
25055: PPUSH
25056: EMPTY
25057: PPUSH
25058: CALL_OW 1
25062: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25063: LD_ADDR_EXP 100
25067: PUSH
25068: LD_EXP 100
25072: PPUSH
25073: LD_EXP 100
25077: PUSH
25078: LD_INT 1
25080: PLUS
25081: PPUSH
25082: EMPTY
25083: PPUSH
25084: CALL_OW 1
25088: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25089: LD_VAR 0 1
25093: PPUSH
25094: CALL_OW 302
25098: NOT
25099: IFFALSE 25112
// begin HackUnlinkAll ( i ) ;
25101: LD_VAR 0 1
25105: PPUSH
25106: CALL 25218 0 1
// continue ;
25110: GO 24992
// end ; HackCheckCapturedStatus ( i ) ;
25112: LD_VAR 0 1
25116: PPUSH
25117: CALL 25661 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25121: LD_ADDR_VAR 0 2
25125: PUSH
25126: LD_INT 81
25128: PUSH
25129: LD_VAR 0 1
25133: PPUSH
25134: CALL_OW 255
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 33
25145: PUSH
25146: LD_INT 3
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 91
25155: PUSH
25156: LD_VAR 0 1
25160: PUSH
25161: LD_EXP 99
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 50
25173: PUSH
25174: EMPTY
25175: LIST
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: PPUSH
25183: CALL_OW 69
25187: ST_TO_ADDR
// if not tmp then
25188: LD_VAR 0 2
25192: NOT
25193: IFFALSE 25197
// continue ;
25195: GO 24992
// HackLink ( i , tmp ) ;
25197: LD_VAR 0 1
25201: PPUSH
25202: LD_VAR 0 2
25206: PPUSH
25207: CALL 25354 0 2
// end ;
25211: GO 24992
25213: POP
25214: POP
// end ;
25215: PPOPN 2
25217: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25218: LD_INT 0
25220: PPUSH
25221: PPUSH
25222: PPUSH
// if not hack in hackTanks then
25223: LD_VAR 0 1
25227: PUSH
25228: LD_EXP 96
25232: IN
25233: NOT
25234: IFFALSE 25238
// exit ;
25236: GO 25349
// index := GetElementIndex ( hackTanks , hack ) ;
25238: LD_ADDR_VAR 0 4
25242: PUSH
25243: LD_EXP 96
25247: PPUSH
25248: LD_VAR 0 1
25252: PPUSH
25253: CALL 32823 0 2
25257: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25258: LD_EXP 97
25262: PUSH
25263: LD_VAR 0 4
25267: ARRAY
25268: IFFALSE 25349
// begin for i in hackTanksCaptured [ index ] do
25270: LD_ADDR_VAR 0 3
25274: PUSH
25275: LD_EXP 97
25279: PUSH
25280: LD_VAR 0 4
25284: ARRAY
25285: PUSH
25286: FOR_IN
25287: IFFALSE 25313
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25289: LD_VAR 0 3
25293: PUSH
25294: LD_INT 1
25296: ARRAY
25297: PPUSH
25298: LD_VAR 0 3
25302: PUSH
25303: LD_INT 2
25305: ARRAY
25306: PPUSH
25307: CALL_OW 235
25311: GO 25286
25313: POP
25314: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25315: LD_ADDR_EXP 97
25319: PUSH
25320: LD_EXP 97
25324: PPUSH
25325: LD_VAR 0 4
25329: PPUSH
25330: EMPTY
25331: PPUSH
25332: CALL_OW 1
25336: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25337: LD_VAR 0 1
25341: PPUSH
25342: LD_INT 0
25344: PPUSH
25345: CALL_OW 505
// end ; end ;
25349: LD_VAR 0 2
25353: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25354: LD_INT 0
25356: PPUSH
25357: PPUSH
25358: PPUSH
// if not hack in hackTanks or not vehicles then
25359: LD_VAR 0 1
25363: PUSH
25364: LD_EXP 96
25368: IN
25369: NOT
25370: PUSH
25371: LD_VAR 0 2
25375: NOT
25376: OR
25377: IFFALSE 25381
// exit ;
25379: GO 25656
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25381: LD_ADDR_VAR 0 2
25385: PUSH
25386: LD_VAR 0 1
25390: PPUSH
25391: LD_VAR 0 2
25395: PPUSH
25396: LD_INT 1
25398: PPUSH
25399: LD_INT 1
25401: PPUSH
25402: CALL 33473 0 4
25406: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25407: LD_ADDR_VAR 0 5
25411: PUSH
25412: LD_EXP 96
25416: PPUSH
25417: LD_VAR 0 1
25421: PPUSH
25422: CALL 32823 0 2
25426: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25427: LD_EXP 97
25431: PUSH
25432: LD_VAR 0 5
25436: ARRAY
25437: PUSH
25438: LD_EXP 98
25442: LESS
25443: IFFALSE 25632
// begin for i := 1 to vehicles do
25445: LD_ADDR_VAR 0 4
25449: PUSH
25450: DOUBLE
25451: LD_INT 1
25453: DEC
25454: ST_TO_ADDR
25455: LD_VAR 0 2
25459: PUSH
25460: FOR_TO
25461: IFFALSE 25630
// begin if hackTanksCaptured [ index ] = hackLimit then
25463: LD_EXP 97
25467: PUSH
25468: LD_VAR 0 5
25472: ARRAY
25473: PUSH
25474: LD_EXP 98
25478: EQUAL
25479: IFFALSE 25483
// break ;
25481: GO 25630
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25483: LD_ADDR_EXP 100
25487: PUSH
25488: LD_EXP 100
25492: PPUSH
25493: LD_VAR 0 5
25497: PPUSH
25498: LD_EXP 100
25502: PUSH
25503: LD_VAR 0 5
25507: ARRAY
25508: PUSH
25509: LD_INT 1
25511: PLUS
25512: PPUSH
25513: CALL_OW 1
25517: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25518: LD_ADDR_EXP 97
25522: PUSH
25523: LD_EXP 97
25527: PPUSH
25528: LD_VAR 0 5
25532: PUSH
25533: LD_EXP 97
25537: PUSH
25538: LD_VAR 0 5
25542: ARRAY
25543: PUSH
25544: LD_INT 1
25546: PLUS
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PPUSH
25552: LD_VAR 0 2
25556: PUSH
25557: LD_VAR 0 4
25561: ARRAY
25562: PUSH
25563: LD_VAR 0 2
25567: PUSH
25568: LD_VAR 0 4
25572: ARRAY
25573: PPUSH
25574: CALL_OW 255
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PPUSH
25583: CALL 33038 0 3
25587: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25588: LD_VAR 0 2
25592: PUSH
25593: LD_VAR 0 4
25597: ARRAY
25598: PPUSH
25599: LD_VAR 0 1
25603: PPUSH
25604: CALL_OW 255
25608: PPUSH
25609: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25613: LD_VAR 0 2
25617: PUSH
25618: LD_VAR 0 4
25622: ARRAY
25623: PPUSH
25624: CALL_OW 141
// end ;
25628: GO 25460
25630: POP
25631: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25632: LD_VAR 0 1
25636: PPUSH
25637: LD_EXP 97
25641: PUSH
25642: LD_VAR 0 5
25646: ARRAY
25647: PUSH
25648: LD_INT 0
25650: PLUS
25651: PPUSH
25652: CALL_OW 505
// end ;
25656: LD_VAR 0 3
25660: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25661: LD_INT 0
25663: PPUSH
25664: PPUSH
25665: PPUSH
25666: PPUSH
// if not hack in hackTanks then
25667: LD_VAR 0 1
25671: PUSH
25672: LD_EXP 96
25676: IN
25677: NOT
25678: IFFALSE 25682
// exit ;
25680: GO 25922
// index := GetElementIndex ( hackTanks , hack ) ;
25682: LD_ADDR_VAR 0 4
25686: PUSH
25687: LD_EXP 96
25691: PPUSH
25692: LD_VAR 0 1
25696: PPUSH
25697: CALL 32823 0 2
25701: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25702: LD_ADDR_VAR 0 3
25706: PUSH
25707: DOUBLE
25708: LD_EXP 97
25712: PUSH
25713: LD_VAR 0 4
25717: ARRAY
25718: INC
25719: ST_TO_ADDR
25720: LD_INT 1
25722: PUSH
25723: FOR_DOWNTO
25724: IFFALSE 25896
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25726: LD_ADDR_VAR 0 5
25730: PUSH
25731: LD_EXP 97
25735: PUSH
25736: LD_VAR 0 4
25740: ARRAY
25741: PUSH
25742: LD_VAR 0 3
25746: ARRAY
25747: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25748: LD_VAR 0 5
25752: PUSH
25753: LD_INT 1
25755: ARRAY
25756: PPUSH
25757: CALL_OW 302
25761: NOT
25762: PUSH
25763: LD_VAR 0 5
25767: PUSH
25768: LD_INT 1
25770: ARRAY
25771: PPUSH
25772: CALL_OW 255
25776: PUSH
25777: LD_VAR 0 1
25781: PPUSH
25782: CALL_OW 255
25786: NONEQUAL
25787: OR
25788: IFFALSE 25894
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25790: LD_VAR 0 5
25794: PUSH
25795: LD_INT 1
25797: ARRAY
25798: PPUSH
25799: CALL_OW 305
25803: PUSH
25804: LD_VAR 0 5
25808: PUSH
25809: LD_INT 1
25811: ARRAY
25812: PPUSH
25813: CALL_OW 255
25817: PUSH
25818: LD_VAR 0 1
25822: PPUSH
25823: CALL_OW 255
25827: EQUAL
25828: AND
25829: IFFALSE 25853
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25831: LD_VAR 0 5
25835: PUSH
25836: LD_INT 1
25838: ARRAY
25839: PPUSH
25840: LD_VAR 0 5
25844: PUSH
25845: LD_INT 2
25847: ARRAY
25848: PPUSH
25849: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25853: LD_ADDR_EXP 97
25857: PUSH
25858: LD_EXP 97
25862: PPUSH
25863: LD_VAR 0 4
25867: PPUSH
25868: LD_EXP 97
25872: PUSH
25873: LD_VAR 0 4
25877: ARRAY
25878: PPUSH
25879: LD_VAR 0 3
25883: PPUSH
25884: CALL_OW 3
25888: PPUSH
25889: CALL_OW 1
25893: ST_TO_ADDR
// end ; end ;
25894: GO 25723
25896: POP
25897: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25898: LD_VAR 0 1
25902: PPUSH
25903: LD_EXP 97
25907: PUSH
25908: LD_VAR 0 4
25912: ARRAY
25913: PUSH
25914: LD_INT 0
25916: PLUS
25917: PPUSH
25918: CALL_OW 505
// end ;
25922: LD_VAR 0 2
25926: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25927: LD_INT 0
25929: PPUSH
25930: PPUSH
25931: PPUSH
25932: PPUSH
// if not hack in hackTanks then
25933: LD_VAR 0 1
25937: PUSH
25938: LD_EXP 96
25942: IN
25943: NOT
25944: IFFALSE 25948
// exit ;
25946: GO 26033
// index := GetElementIndex ( hackTanks , hack ) ;
25948: LD_ADDR_VAR 0 5
25952: PUSH
25953: LD_EXP 96
25957: PPUSH
25958: LD_VAR 0 1
25962: PPUSH
25963: CALL 32823 0 2
25967: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25968: LD_ADDR_VAR 0 4
25972: PUSH
25973: DOUBLE
25974: LD_INT 1
25976: DEC
25977: ST_TO_ADDR
25978: LD_EXP 97
25982: PUSH
25983: LD_VAR 0 5
25987: ARRAY
25988: PUSH
25989: FOR_TO
25990: IFFALSE 26031
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25992: LD_EXP 97
25996: PUSH
25997: LD_VAR 0 5
26001: ARRAY
26002: PUSH
26003: LD_VAR 0 4
26007: ARRAY
26008: PUSH
26009: LD_INT 1
26011: ARRAY
26012: PUSH
26013: LD_VAR 0 2
26017: EQUAL
26018: IFFALSE 26029
// KillUnit ( vehicle ) ;
26020: LD_VAR 0 2
26024: PPUSH
26025: CALL_OW 66
26029: GO 25989
26031: POP
26032: POP
// end ;
26033: LD_VAR 0 3
26037: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26038: LD_EXP 101
26042: NOT
26043: IFFALSE 26078
26045: GO 26047
26047: DISABLE
// begin initMiner := true ;
26048: LD_ADDR_EXP 101
26052: PUSH
26053: LD_INT 1
26055: ST_TO_ADDR
// minersList := [ ] ;
26056: LD_ADDR_EXP 102
26060: PUSH
26061: EMPTY
26062: ST_TO_ADDR
// minerMinesList := [ ] ;
26063: LD_ADDR_EXP 103
26067: PUSH
26068: EMPTY
26069: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26070: LD_ADDR_EXP 104
26074: PUSH
26075: LD_INT 5
26077: ST_TO_ADDR
// end ;
26078: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26079: LD_EXP 101
26083: PUSH
26084: LD_INT 34
26086: PUSH
26087: LD_EXP 26
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PPUSH
26096: CALL_OW 69
26100: AND
26101: IFFALSE 26564
26103: GO 26105
26105: DISABLE
26106: LD_INT 0
26108: PPUSH
26109: PPUSH
26110: PPUSH
26111: PPUSH
// begin enable ;
26112: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26113: LD_ADDR_VAR 0 1
26117: PUSH
26118: LD_INT 34
26120: PUSH
26121: LD_EXP 26
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PPUSH
26130: CALL_OW 69
26134: PUSH
26135: FOR_IN
26136: IFFALSE 26208
// begin if not i in minersList then
26138: LD_VAR 0 1
26142: PUSH
26143: LD_EXP 102
26147: IN
26148: NOT
26149: IFFALSE 26206
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26151: LD_ADDR_EXP 102
26155: PUSH
26156: LD_EXP 102
26160: PPUSH
26161: LD_EXP 102
26165: PUSH
26166: LD_INT 1
26168: PLUS
26169: PPUSH
26170: LD_VAR 0 1
26174: PPUSH
26175: CALL_OW 1
26179: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26180: LD_ADDR_EXP 103
26184: PUSH
26185: LD_EXP 103
26189: PPUSH
26190: LD_EXP 103
26194: PUSH
26195: LD_INT 1
26197: PLUS
26198: PPUSH
26199: EMPTY
26200: PPUSH
26201: CALL_OW 1
26205: ST_TO_ADDR
// end end ;
26206: GO 26135
26208: POP
26209: POP
// for i := minerMinesList downto 1 do
26210: LD_ADDR_VAR 0 1
26214: PUSH
26215: DOUBLE
26216: LD_EXP 103
26220: INC
26221: ST_TO_ADDR
26222: LD_INT 1
26224: PUSH
26225: FOR_DOWNTO
26226: IFFALSE 26562
// begin if IsLive ( minersList [ i ] ) then
26228: LD_EXP 102
26232: PUSH
26233: LD_VAR 0 1
26237: ARRAY
26238: PPUSH
26239: CALL_OW 300
26243: IFFALSE 26271
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26245: LD_EXP 102
26249: PUSH
26250: LD_VAR 0 1
26254: ARRAY
26255: PPUSH
26256: LD_EXP 103
26260: PUSH
26261: LD_VAR 0 1
26265: ARRAY
26266: PPUSH
26267: CALL_OW 505
// if not minerMinesList [ i ] then
26271: LD_EXP 103
26275: PUSH
26276: LD_VAR 0 1
26280: ARRAY
26281: NOT
26282: IFFALSE 26286
// continue ;
26284: GO 26225
// for j := minerMinesList [ i ] downto 1 do
26286: LD_ADDR_VAR 0 2
26290: PUSH
26291: DOUBLE
26292: LD_EXP 103
26296: PUSH
26297: LD_VAR 0 1
26301: ARRAY
26302: INC
26303: ST_TO_ADDR
26304: LD_INT 1
26306: PUSH
26307: FOR_DOWNTO
26308: IFFALSE 26558
// begin side := GetSide ( minersList [ i ] ) ;
26310: LD_ADDR_VAR 0 3
26314: PUSH
26315: LD_EXP 102
26319: PUSH
26320: LD_VAR 0 1
26324: ARRAY
26325: PPUSH
26326: CALL_OW 255
26330: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26331: LD_ADDR_VAR 0 4
26335: PUSH
26336: LD_EXP 103
26340: PUSH
26341: LD_VAR 0 1
26345: ARRAY
26346: PUSH
26347: LD_VAR 0 2
26351: ARRAY
26352: PUSH
26353: LD_INT 1
26355: ARRAY
26356: PPUSH
26357: LD_EXP 103
26361: PUSH
26362: LD_VAR 0 1
26366: ARRAY
26367: PUSH
26368: LD_VAR 0 2
26372: ARRAY
26373: PUSH
26374: LD_INT 2
26376: ARRAY
26377: PPUSH
26378: CALL_OW 428
26382: ST_TO_ADDR
// if not tmp then
26383: LD_VAR 0 4
26387: NOT
26388: IFFALSE 26392
// continue ;
26390: GO 26307
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26392: LD_VAR 0 4
26396: PUSH
26397: LD_INT 81
26399: PUSH
26400: LD_VAR 0 3
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PPUSH
26409: CALL_OW 69
26413: IN
26414: PUSH
26415: LD_EXP 103
26419: PUSH
26420: LD_VAR 0 1
26424: ARRAY
26425: PUSH
26426: LD_VAR 0 2
26430: ARRAY
26431: PUSH
26432: LD_INT 1
26434: ARRAY
26435: PPUSH
26436: LD_EXP 103
26440: PUSH
26441: LD_VAR 0 1
26445: ARRAY
26446: PUSH
26447: LD_VAR 0 2
26451: ARRAY
26452: PUSH
26453: LD_INT 2
26455: ARRAY
26456: PPUSH
26457: CALL_OW 458
26461: AND
26462: IFFALSE 26556
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26464: LD_EXP 103
26468: PUSH
26469: LD_VAR 0 1
26473: ARRAY
26474: PUSH
26475: LD_VAR 0 2
26479: ARRAY
26480: PUSH
26481: LD_INT 1
26483: ARRAY
26484: PPUSH
26485: LD_EXP 103
26489: PUSH
26490: LD_VAR 0 1
26494: ARRAY
26495: PUSH
26496: LD_VAR 0 2
26500: ARRAY
26501: PUSH
26502: LD_INT 2
26504: ARRAY
26505: PPUSH
26506: LD_VAR 0 3
26510: PPUSH
26511: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26515: LD_ADDR_EXP 103
26519: PUSH
26520: LD_EXP 103
26524: PPUSH
26525: LD_VAR 0 1
26529: PPUSH
26530: LD_EXP 103
26534: PUSH
26535: LD_VAR 0 1
26539: ARRAY
26540: PPUSH
26541: LD_VAR 0 2
26545: PPUSH
26546: CALL_OW 3
26550: PPUSH
26551: CALL_OW 1
26555: ST_TO_ADDR
// end ; end ;
26556: GO 26307
26558: POP
26559: POP
// end ;
26560: GO 26225
26562: POP
26563: POP
// end ;
26564: PPOPN 4
26566: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26567: LD_INT 0
26569: PPUSH
26570: PPUSH
// result := false ;
26571: LD_ADDR_VAR 0 4
26575: PUSH
26576: LD_INT 0
26578: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26579: LD_VAR 0 1
26583: PPUSH
26584: CALL_OW 264
26588: PUSH
26589: LD_EXP 26
26593: EQUAL
26594: NOT
26595: IFFALSE 26599
// exit ;
26597: GO 26839
// index := GetElementIndex ( minersList , unit ) ;
26599: LD_ADDR_VAR 0 5
26603: PUSH
26604: LD_EXP 102
26608: PPUSH
26609: LD_VAR 0 1
26613: PPUSH
26614: CALL 32823 0 2
26618: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26619: LD_EXP 103
26623: PUSH
26624: LD_VAR 0 5
26628: ARRAY
26629: PUSH
26630: LD_EXP 104
26634: GREATEREQUAL
26635: IFFALSE 26639
// exit ;
26637: GO 26839
// ComMoveXY ( unit , x , y ) ;
26639: LD_VAR 0 1
26643: PPUSH
26644: LD_VAR 0 2
26648: PPUSH
26649: LD_VAR 0 3
26653: PPUSH
26654: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26658: LD_INT 35
26660: PPUSH
26661: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26665: LD_VAR 0 1
26669: PPUSH
26670: LD_VAR 0 2
26674: PPUSH
26675: LD_VAR 0 3
26679: PPUSH
26680: CALL 63595 0 3
26684: NOT
26685: PUSH
26686: LD_VAR 0 1
26690: PPUSH
26691: CALL_OW 314
26695: AND
26696: IFFALSE 26700
// exit ;
26698: GO 26839
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26700: LD_VAR 0 2
26704: PPUSH
26705: LD_VAR 0 3
26709: PPUSH
26710: CALL_OW 428
26714: PUSH
26715: LD_VAR 0 1
26719: EQUAL
26720: PUSH
26721: LD_VAR 0 1
26725: PPUSH
26726: CALL_OW 314
26730: NOT
26731: AND
26732: IFFALSE 26658
// PlaySoundXY ( x , y , PlantMine ) ;
26734: LD_VAR 0 2
26738: PPUSH
26739: LD_VAR 0 3
26743: PPUSH
26744: LD_STRING PlantMine
26746: PPUSH
26747: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26751: LD_VAR 0 2
26755: PPUSH
26756: LD_VAR 0 3
26760: PPUSH
26761: LD_VAR 0 1
26765: PPUSH
26766: CALL_OW 255
26770: PPUSH
26771: LD_INT 0
26773: PPUSH
26774: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26778: LD_ADDR_EXP 103
26782: PUSH
26783: LD_EXP 103
26787: PPUSH
26788: LD_VAR 0 5
26792: PUSH
26793: LD_EXP 103
26797: PUSH
26798: LD_VAR 0 5
26802: ARRAY
26803: PUSH
26804: LD_INT 1
26806: PLUS
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PPUSH
26812: LD_VAR 0 2
26816: PUSH
26817: LD_VAR 0 3
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PPUSH
26826: CALL 33038 0 3
26830: ST_TO_ADDR
// result := true ;
26831: LD_ADDR_VAR 0 4
26835: PUSH
26836: LD_INT 1
26838: ST_TO_ADDR
// end ;
26839: LD_VAR 0 4
26843: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26844: LD_INT 0
26846: PPUSH
26847: PPUSH
26848: PPUSH
// if not unit in minersList then
26849: LD_VAR 0 1
26853: PUSH
26854: LD_EXP 102
26858: IN
26859: NOT
26860: IFFALSE 26864
// exit ;
26862: GO 27256
// index := GetElementIndex ( minersList , unit ) ;
26864: LD_ADDR_VAR 0 6
26868: PUSH
26869: LD_EXP 102
26873: PPUSH
26874: LD_VAR 0 1
26878: PPUSH
26879: CALL 32823 0 2
26883: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26884: LD_ADDR_VAR 0 5
26888: PUSH
26889: DOUBLE
26890: LD_EXP 103
26894: PUSH
26895: LD_VAR 0 6
26899: ARRAY
26900: INC
26901: ST_TO_ADDR
26902: LD_INT 1
26904: PUSH
26905: FOR_DOWNTO
26906: IFFALSE 27067
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26908: LD_EXP 103
26912: PUSH
26913: LD_VAR 0 6
26917: ARRAY
26918: PUSH
26919: LD_VAR 0 5
26923: ARRAY
26924: PUSH
26925: LD_INT 1
26927: ARRAY
26928: PUSH
26929: LD_VAR 0 2
26933: EQUAL
26934: PUSH
26935: LD_EXP 103
26939: PUSH
26940: LD_VAR 0 6
26944: ARRAY
26945: PUSH
26946: LD_VAR 0 5
26950: ARRAY
26951: PUSH
26952: LD_INT 2
26954: ARRAY
26955: PUSH
26956: LD_VAR 0 3
26960: EQUAL
26961: AND
26962: IFFALSE 27065
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26964: LD_EXP 103
26968: PUSH
26969: LD_VAR 0 6
26973: ARRAY
26974: PUSH
26975: LD_VAR 0 5
26979: ARRAY
26980: PUSH
26981: LD_INT 1
26983: ARRAY
26984: PPUSH
26985: LD_EXP 103
26989: PUSH
26990: LD_VAR 0 6
26994: ARRAY
26995: PUSH
26996: LD_VAR 0 5
27000: ARRAY
27001: PUSH
27002: LD_INT 2
27004: ARRAY
27005: PPUSH
27006: LD_VAR 0 1
27010: PPUSH
27011: CALL_OW 255
27015: PPUSH
27016: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27020: LD_ADDR_EXP 103
27024: PUSH
27025: LD_EXP 103
27029: PPUSH
27030: LD_VAR 0 6
27034: PPUSH
27035: LD_EXP 103
27039: PUSH
27040: LD_VAR 0 6
27044: ARRAY
27045: PPUSH
27046: LD_VAR 0 5
27050: PPUSH
27051: CALL_OW 3
27055: PPUSH
27056: CALL_OW 1
27060: ST_TO_ADDR
// exit ;
27061: POP
27062: POP
27063: GO 27256
// end ; end ;
27065: GO 26905
27067: POP
27068: POP
// for i := minerMinesList [ index ] downto 1 do
27069: LD_ADDR_VAR 0 5
27073: PUSH
27074: DOUBLE
27075: LD_EXP 103
27079: PUSH
27080: LD_VAR 0 6
27084: ARRAY
27085: INC
27086: ST_TO_ADDR
27087: LD_INT 1
27089: PUSH
27090: FOR_DOWNTO
27091: IFFALSE 27254
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27093: LD_EXP 103
27097: PUSH
27098: LD_VAR 0 6
27102: ARRAY
27103: PUSH
27104: LD_VAR 0 5
27108: ARRAY
27109: PUSH
27110: LD_INT 1
27112: ARRAY
27113: PPUSH
27114: LD_EXP 103
27118: PUSH
27119: LD_VAR 0 6
27123: ARRAY
27124: PUSH
27125: LD_VAR 0 5
27129: ARRAY
27130: PUSH
27131: LD_INT 2
27133: ARRAY
27134: PPUSH
27135: LD_VAR 0 2
27139: PPUSH
27140: LD_VAR 0 3
27144: PPUSH
27145: CALL_OW 298
27149: PUSH
27150: LD_INT 6
27152: LESS
27153: IFFALSE 27252
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27155: LD_EXP 103
27159: PUSH
27160: LD_VAR 0 6
27164: ARRAY
27165: PUSH
27166: LD_VAR 0 5
27170: ARRAY
27171: PUSH
27172: LD_INT 1
27174: ARRAY
27175: PPUSH
27176: LD_EXP 103
27180: PUSH
27181: LD_VAR 0 6
27185: ARRAY
27186: PUSH
27187: LD_VAR 0 5
27191: ARRAY
27192: PUSH
27193: LD_INT 2
27195: ARRAY
27196: PPUSH
27197: LD_VAR 0 1
27201: PPUSH
27202: CALL_OW 255
27206: PPUSH
27207: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27211: LD_ADDR_EXP 103
27215: PUSH
27216: LD_EXP 103
27220: PPUSH
27221: LD_VAR 0 6
27225: PPUSH
27226: LD_EXP 103
27230: PUSH
27231: LD_VAR 0 6
27235: ARRAY
27236: PPUSH
27237: LD_VAR 0 5
27241: PPUSH
27242: CALL_OW 3
27246: PPUSH
27247: CALL_OW 1
27251: ST_TO_ADDR
// end ; end ;
27252: GO 27090
27254: POP
27255: POP
// end ;
27256: LD_VAR 0 4
27260: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27261: LD_INT 0
27263: PPUSH
27264: PPUSH
27265: PPUSH
27266: PPUSH
27267: PPUSH
27268: PPUSH
27269: PPUSH
27270: PPUSH
27271: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27272: LD_VAR 0 1
27276: PPUSH
27277: CALL_OW 264
27281: PUSH
27282: LD_EXP 26
27286: EQUAL
27287: NOT
27288: PUSH
27289: LD_VAR 0 1
27293: PUSH
27294: LD_EXP 102
27298: IN
27299: NOT
27300: OR
27301: IFFALSE 27305
// exit ;
27303: GO 27627
// index := GetElementIndex ( minersList , unit ) ;
27305: LD_ADDR_VAR 0 6
27309: PUSH
27310: LD_EXP 102
27314: PPUSH
27315: LD_VAR 0 1
27319: PPUSH
27320: CALL 32823 0 2
27324: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27325: LD_ADDR_VAR 0 8
27329: PUSH
27330: LD_EXP 104
27334: PUSH
27335: LD_EXP 103
27339: PUSH
27340: LD_VAR 0 6
27344: ARRAY
27345: MINUS
27346: ST_TO_ADDR
// if not minesFreeAmount then
27347: LD_VAR 0 8
27351: NOT
27352: IFFALSE 27356
// exit ;
27354: GO 27627
// tmp := [ ] ;
27356: LD_ADDR_VAR 0 7
27360: PUSH
27361: EMPTY
27362: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27363: LD_ADDR_VAR 0 5
27367: PUSH
27368: DOUBLE
27369: LD_INT 1
27371: DEC
27372: ST_TO_ADDR
27373: LD_VAR 0 8
27377: PUSH
27378: FOR_TO
27379: IFFALSE 27574
// begin _d := rand ( 0 , 5 ) ;
27381: LD_ADDR_VAR 0 11
27385: PUSH
27386: LD_INT 0
27388: PPUSH
27389: LD_INT 5
27391: PPUSH
27392: CALL_OW 12
27396: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27397: LD_ADDR_VAR 0 12
27401: PUSH
27402: LD_INT 2
27404: PPUSH
27405: LD_INT 6
27407: PPUSH
27408: CALL_OW 12
27412: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27413: LD_ADDR_VAR 0 9
27417: PUSH
27418: LD_VAR 0 2
27422: PPUSH
27423: LD_VAR 0 11
27427: PPUSH
27428: LD_VAR 0 12
27432: PPUSH
27433: CALL_OW 272
27437: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27438: LD_ADDR_VAR 0 10
27442: PUSH
27443: LD_VAR 0 3
27447: PPUSH
27448: LD_VAR 0 11
27452: PPUSH
27453: LD_VAR 0 12
27457: PPUSH
27458: CALL_OW 273
27462: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27463: LD_VAR 0 9
27467: PPUSH
27468: LD_VAR 0 10
27472: PPUSH
27473: CALL_OW 488
27477: PUSH
27478: LD_VAR 0 9
27482: PUSH
27483: LD_VAR 0 10
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_VAR 0 7
27496: IN
27497: NOT
27498: AND
27499: PUSH
27500: LD_VAR 0 9
27504: PPUSH
27505: LD_VAR 0 10
27509: PPUSH
27510: CALL_OW 458
27514: NOT
27515: AND
27516: IFFALSE 27558
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27518: LD_ADDR_VAR 0 7
27522: PUSH
27523: LD_VAR 0 7
27527: PPUSH
27528: LD_VAR 0 7
27532: PUSH
27533: LD_INT 1
27535: PLUS
27536: PPUSH
27537: LD_VAR 0 9
27541: PUSH
27542: LD_VAR 0 10
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PPUSH
27551: CALL_OW 1
27555: ST_TO_ADDR
27556: GO 27572
// i := i - 1 ;
27558: LD_ADDR_VAR 0 5
27562: PUSH
27563: LD_VAR 0 5
27567: PUSH
27568: LD_INT 1
27570: MINUS
27571: ST_TO_ADDR
// end ;
27572: GO 27378
27574: POP
27575: POP
// for i in tmp do
27576: LD_ADDR_VAR 0 5
27580: PUSH
27581: LD_VAR 0 7
27585: PUSH
27586: FOR_IN
27587: IFFALSE 27625
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27589: LD_VAR 0 1
27593: PPUSH
27594: LD_VAR 0 5
27598: PUSH
27599: LD_INT 1
27601: ARRAY
27602: PPUSH
27603: LD_VAR 0 5
27607: PUSH
27608: LD_INT 2
27610: ARRAY
27611: PPUSH
27612: CALL 26567 0 3
27616: NOT
27617: IFFALSE 27623
// exit ;
27619: POP
27620: POP
27621: GO 27627
27623: GO 27586
27625: POP
27626: POP
// end ;
27627: LD_VAR 0 4
27631: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27632: LD_INT 0
27634: PPUSH
27635: PPUSH
27636: PPUSH
27637: PPUSH
27638: PPUSH
27639: PPUSH
27640: PPUSH
// if not GetClass ( unit ) = class_sniper then
27641: LD_VAR 0 1
27645: PPUSH
27646: CALL_OW 257
27650: PUSH
27651: LD_INT 5
27653: EQUAL
27654: NOT
27655: IFFALSE 27659
// exit ;
27657: GO 28047
// dist := 8 ;
27659: LD_ADDR_VAR 0 5
27663: PUSH
27664: LD_INT 8
27666: ST_TO_ADDR
// viewRange := 12 ;
27667: LD_ADDR_VAR 0 7
27671: PUSH
27672: LD_INT 12
27674: ST_TO_ADDR
// side := GetSide ( unit ) ;
27675: LD_ADDR_VAR 0 6
27679: PUSH
27680: LD_VAR 0 1
27684: PPUSH
27685: CALL_OW 255
27689: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27690: LD_INT 61
27692: PPUSH
27693: LD_VAR 0 6
27697: PPUSH
27698: CALL_OW 321
27702: PUSH
27703: LD_INT 2
27705: EQUAL
27706: IFFALSE 27716
// viewRange := 16 ;
27708: LD_ADDR_VAR 0 7
27712: PUSH
27713: LD_INT 16
27715: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27716: LD_VAR 0 1
27720: PPUSH
27721: LD_VAR 0 2
27725: PPUSH
27726: LD_VAR 0 3
27730: PPUSH
27731: CALL_OW 297
27735: PUSH
27736: LD_VAR 0 5
27740: GREATER
27741: IFFALSE 27820
// begin ComMoveXY ( unit , x , y ) ;
27743: LD_VAR 0 1
27747: PPUSH
27748: LD_VAR 0 2
27752: PPUSH
27753: LD_VAR 0 3
27757: PPUSH
27758: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27762: LD_INT 35
27764: PPUSH
27765: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27769: LD_VAR 0 1
27773: PPUSH
27774: LD_VAR 0 2
27778: PPUSH
27779: LD_VAR 0 3
27783: PPUSH
27784: CALL 63595 0 3
27788: NOT
27789: IFFALSE 27793
// exit ;
27791: GO 28047
// until GetDistUnitXY ( unit , x , y ) < dist ;
27793: LD_VAR 0 1
27797: PPUSH
27798: LD_VAR 0 2
27802: PPUSH
27803: LD_VAR 0 3
27807: PPUSH
27808: CALL_OW 297
27812: PUSH
27813: LD_VAR 0 5
27817: LESS
27818: IFFALSE 27762
// end ; ComTurnXY ( unit , x , y ) ;
27820: LD_VAR 0 1
27824: PPUSH
27825: LD_VAR 0 2
27829: PPUSH
27830: LD_VAR 0 3
27834: PPUSH
27835: CALL_OW 118
// wait ( 5 ) ;
27839: LD_INT 5
27841: PPUSH
27842: CALL_OW 67
// _d := GetDir ( unit ) ;
27846: LD_ADDR_VAR 0 10
27850: PUSH
27851: LD_VAR 0 1
27855: PPUSH
27856: CALL_OW 254
27860: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27861: LD_ADDR_VAR 0 8
27865: PUSH
27866: LD_VAR 0 1
27870: PPUSH
27871: CALL_OW 250
27875: PPUSH
27876: LD_VAR 0 10
27880: PPUSH
27881: LD_VAR 0 5
27885: PPUSH
27886: CALL_OW 272
27890: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27891: LD_ADDR_VAR 0 9
27895: PUSH
27896: LD_VAR 0 1
27900: PPUSH
27901: CALL_OW 251
27905: PPUSH
27906: LD_VAR 0 10
27910: PPUSH
27911: LD_VAR 0 5
27915: PPUSH
27916: CALL_OW 273
27920: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27921: LD_VAR 0 8
27925: PPUSH
27926: LD_VAR 0 9
27930: PPUSH
27931: CALL_OW 488
27935: NOT
27936: IFFALSE 27940
// exit ;
27938: GO 28047
// ComAnimCustom ( unit , 1 ) ;
27940: LD_VAR 0 1
27944: PPUSH
27945: LD_INT 1
27947: PPUSH
27948: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27952: LD_VAR 0 8
27956: PPUSH
27957: LD_VAR 0 9
27961: PPUSH
27962: LD_VAR 0 6
27966: PPUSH
27967: LD_VAR 0 7
27971: PPUSH
27972: CALL_OW 330
// repeat wait ( 1 ) ;
27976: LD_INT 1
27978: PPUSH
27979: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27983: LD_VAR 0 1
27987: PPUSH
27988: CALL_OW 316
27992: PUSH
27993: LD_VAR 0 1
27997: PPUSH
27998: CALL_OW 314
28002: OR
28003: PUSH
28004: LD_VAR 0 1
28008: PPUSH
28009: CALL_OW 302
28013: NOT
28014: OR
28015: PUSH
28016: LD_VAR 0 1
28020: PPUSH
28021: CALL_OW 301
28025: OR
28026: IFFALSE 27976
// RemoveSeeing ( _x , _y , side ) ;
28028: LD_VAR 0 8
28032: PPUSH
28033: LD_VAR 0 9
28037: PPUSH
28038: LD_VAR 0 6
28042: PPUSH
28043: CALL_OW 331
// end ; end_of_file
28047: LD_VAR 0 4
28051: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28052: LD_INT 0
28054: PPUSH
28055: PPUSH
// if exist_mode then
28056: LD_VAR 0 2
28060: IFFALSE 28085
// unit := CreateCharacter ( prefix & ident ) else
28062: LD_ADDR_VAR 0 5
28066: PUSH
28067: LD_VAR 0 3
28071: PUSH
28072: LD_VAR 0 1
28076: STR
28077: PPUSH
28078: CALL_OW 34
28082: ST_TO_ADDR
28083: GO 28100
// unit := NewCharacter ( ident ) ;
28085: LD_ADDR_VAR 0 5
28089: PUSH
28090: LD_VAR 0 1
28094: PPUSH
28095: CALL_OW 25
28099: ST_TO_ADDR
// result := unit ;
28100: LD_ADDR_VAR 0 4
28104: PUSH
28105: LD_VAR 0 5
28109: ST_TO_ADDR
// end ;
28110: LD_VAR 0 4
28114: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28115: LD_INT 0
28117: PPUSH
28118: PPUSH
// if not side or not nation then
28119: LD_VAR 0 1
28123: NOT
28124: PUSH
28125: LD_VAR 0 2
28129: NOT
28130: OR
28131: IFFALSE 28135
// exit ;
28133: GO 28903
// case nation of nation_american :
28135: LD_VAR 0 2
28139: PUSH
28140: LD_INT 1
28142: DOUBLE
28143: EQUAL
28144: IFTRUE 28148
28146: GO 28362
28148: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28149: LD_ADDR_VAR 0 4
28153: PUSH
28154: LD_INT 35
28156: PUSH
28157: LD_INT 45
28159: PUSH
28160: LD_INT 46
28162: PUSH
28163: LD_INT 47
28165: PUSH
28166: LD_INT 82
28168: PUSH
28169: LD_INT 83
28171: PUSH
28172: LD_INT 84
28174: PUSH
28175: LD_INT 85
28177: PUSH
28178: LD_INT 86
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: LD_INT 2
28186: PUSH
28187: LD_INT 6
28189: PUSH
28190: LD_INT 15
28192: PUSH
28193: LD_INT 16
28195: PUSH
28196: LD_INT 7
28198: PUSH
28199: LD_INT 12
28201: PUSH
28202: LD_INT 13
28204: PUSH
28205: LD_INT 10
28207: PUSH
28208: LD_INT 14
28210: PUSH
28211: LD_INT 20
28213: PUSH
28214: LD_INT 21
28216: PUSH
28217: LD_INT 22
28219: PUSH
28220: LD_INT 25
28222: PUSH
28223: LD_INT 32
28225: PUSH
28226: LD_INT 27
28228: PUSH
28229: LD_INT 36
28231: PUSH
28232: LD_INT 69
28234: PUSH
28235: LD_INT 39
28237: PUSH
28238: LD_INT 34
28240: PUSH
28241: LD_INT 40
28243: PUSH
28244: LD_INT 48
28246: PUSH
28247: LD_INT 49
28249: PUSH
28250: LD_INT 50
28252: PUSH
28253: LD_INT 51
28255: PUSH
28256: LD_INT 52
28258: PUSH
28259: LD_INT 53
28261: PUSH
28262: LD_INT 54
28264: PUSH
28265: LD_INT 55
28267: PUSH
28268: LD_INT 56
28270: PUSH
28271: LD_INT 57
28273: PUSH
28274: LD_INT 58
28276: PUSH
28277: LD_INT 59
28279: PUSH
28280: LD_INT 60
28282: PUSH
28283: LD_INT 61
28285: PUSH
28286: LD_INT 62
28288: PUSH
28289: LD_INT 80
28291: PUSH
28292: LD_INT 82
28294: PUSH
28295: LD_INT 83
28297: PUSH
28298: LD_INT 84
28300: PUSH
28301: LD_INT 85
28303: PUSH
28304: LD_INT 86
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: ST_TO_ADDR
28360: GO 28827
28362: LD_INT 2
28364: DOUBLE
28365: EQUAL
28366: IFTRUE 28370
28368: GO 28596
28370: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28371: LD_ADDR_VAR 0 4
28375: PUSH
28376: LD_INT 35
28378: PUSH
28379: LD_INT 45
28381: PUSH
28382: LD_INT 46
28384: PUSH
28385: LD_INT 47
28387: PUSH
28388: LD_INT 82
28390: PUSH
28391: LD_INT 83
28393: PUSH
28394: LD_INT 84
28396: PUSH
28397: LD_INT 85
28399: PUSH
28400: LD_INT 87
28402: PUSH
28403: LD_INT 70
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: LD_INT 11
28411: PUSH
28412: LD_INT 3
28414: PUSH
28415: LD_INT 4
28417: PUSH
28418: LD_INT 5
28420: PUSH
28421: LD_INT 6
28423: PUSH
28424: LD_INT 15
28426: PUSH
28427: LD_INT 18
28429: PUSH
28430: LD_INT 7
28432: PUSH
28433: LD_INT 17
28435: PUSH
28436: LD_INT 8
28438: PUSH
28439: LD_INT 20
28441: PUSH
28442: LD_INT 21
28444: PUSH
28445: LD_INT 22
28447: PUSH
28448: LD_INT 72
28450: PUSH
28451: LD_INT 26
28453: PUSH
28454: LD_INT 69
28456: PUSH
28457: LD_INT 39
28459: PUSH
28460: LD_INT 40
28462: PUSH
28463: LD_INT 41
28465: PUSH
28466: LD_INT 42
28468: PUSH
28469: LD_INT 43
28471: PUSH
28472: LD_INT 48
28474: PUSH
28475: LD_INT 49
28477: PUSH
28478: LD_INT 50
28480: PUSH
28481: LD_INT 51
28483: PUSH
28484: LD_INT 52
28486: PUSH
28487: LD_INT 53
28489: PUSH
28490: LD_INT 54
28492: PUSH
28493: LD_INT 55
28495: PUSH
28496: LD_INT 56
28498: PUSH
28499: LD_INT 60
28501: PUSH
28502: LD_INT 61
28504: PUSH
28505: LD_INT 62
28507: PUSH
28508: LD_INT 66
28510: PUSH
28511: LD_INT 67
28513: PUSH
28514: LD_INT 68
28516: PUSH
28517: LD_INT 81
28519: PUSH
28520: LD_INT 82
28522: PUSH
28523: LD_INT 83
28525: PUSH
28526: LD_INT 84
28528: PUSH
28529: LD_INT 85
28531: PUSH
28532: LD_INT 87
28534: PUSH
28535: LD_INT 88
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: ST_TO_ADDR
28594: GO 28827
28596: LD_INT 3
28598: DOUBLE
28599: EQUAL
28600: IFTRUE 28604
28602: GO 28826
28604: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28605: LD_ADDR_VAR 0 4
28609: PUSH
28610: LD_INT 46
28612: PUSH
28613: LD_INT 47
28615: PUSH
28616: LD_INT 1
28618: PUSH
28619: LD_INT 2
28621: PUSH
28622: LD_INT 82
28624: PUSH
28625: LD_INT 83
28627: PUSH
28628: LD_INT 84
28630: PUSH
28631: LD_INT 85
28633: PUSH
28634: LD_INT 86
28636: PUSH
28637: LD_INT 11
28639: PUSH
28640: LD_INT 9
28642: PUSH
28643: LD_INT 20
28645: PUSH
28646: LD_INT 19
28648: PUSH
28649: LD_INT 21
28651: PUSH
28652: LD_INT 24
28654: PUSH
28655: LD_INT 22
28657: PUSH
28658: LD_INT 25
28660: PUSH
28661: LD_INT 28
28663: PUSH
28664: LD_INT 29
28666: PUSH
28667: LD_INT 30
28669: PUSH
28670: LD_INT 31
28672: PUSH
28673: LD_INT 37
28675: PUSH
28676: LD_INT 38
28678: PUSH
28679: LD_INT 32
28681: PUSH
28682: LD_INT 27
28684: PUSH
28685: LD_INT 33
28687: PUSH
28688: LD_INT 69
28690: PUSH
28691: LD_INT 39
28693: PUSH
28694: LD_INT 34
28696: PUSH
28697: LD_INT 40
28699: PUSH
28700: LD_INT 71
28702: PUSH
28703: LD_INT 23
28705: PUSH
28706: LD_INT 44
28708: PUSH
28709: LD_INT 48
28711: PUSH
28712: LD_INT 49
28714: PUSH
28715: LD_INT 50
28717: PUSH
28718: LD_INT 51
28720: PUSH
28721: LD_INT 52
28723: PUSH
28724: LD_INT 53
28726: PUSH
28727: LD_INT 54
28729: PUSH
28730: LD_INT 55
28732: PUSH
28733: LD_INT 56
28735: PUSH
28736: LD_INT 57
28738: PUSH
28739: LD_INT 58
28741: PUSH
28742: LD_INT 59
28744: PUSH
28745: LD_INT 63
28747: PUSH
28748: LD_INT 64
28750: PUSH
28751: LD_INT 65
28753: PUSH
28754: LD_INT 82
28756: PUSH
28757: LD_INT 83
28759: PUSH
28760: LD_INT 84
28762: PUSH
28763: LD_INT 85
28765: PUSH
28766: LD_INT 86
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: ST_TO_ADDR
28824: GO 28827
28826: POP
// if state > - 1 and state < 3 then
28827: LD_VAR 0 3
28831: PUSH
28832: LD_INT 1
28834: NEG
28835: GREATER
28836: PUSH
28837: LD_VAR 0 3
28841: PUSH
28842: LD_INT 3
28844: LESS
28845: AND
28846: IFFALSE 28903
// for i in result do
28848: LD_ADDR_VAR 0 5
28852: PUSH
28853: LD_VAR 0 4
28857: PUSH
28858: FOR_IN
28859: IFFALSE 28901
// if GetTech ( i , side ) <> state then
28861: LD_VAR 0 5
28865: PPUSH
28866: LD_VAR 0 1
28870: PPUSH
28871: CALL_OW 321
28875: PUSH
28876: LD_VAR 0 3
28880: NONEQUAL
28881: IFFALSE 28899
// result := result diff i ;
28883: LD_ADDR_VAR 0 4
28887: PUSH
28888: LD_VAR 0 4
28892: PUSH
28893: LD_VAR 0 5
28897: DIFF
28898: ST_TO_ADDR
28899: GO 28858
28901: POP
28902: POP
// end ;
28903: LD_VAR 0 4
28907: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28908: LD_INT 0
28910: PPUSH
28911: PPUSH
28912: PPUSH
// result := true ;
28913: LD_ADDR_VAR 0 3
28917: PUSH
28918: LD_INT 1
28920: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28921: LD_ADDR_VAR 0 5
28925: PUSH
28926: LD_VAR 0 2
28930: PPUSH
28931: CALL_OW 480
28935: ST_TO_ADDR
// if not tmp then
28936: LD_VAR 0 5
28940: NOT
28941: IFFALSE 28945
// exit ;
28943: GO 28994
// for i in tmp do
28945: LD_ADDR_VAR 0 4
28949: PUSH
28950: LD_VAR 0 5
28954: PUSH
28955: FOR_IN
28956: IFFALSE 28992
// if GetTech ( i , side ) <> state_researched then
28958: LD_VAR 0 4
28962: PPUSH
28963: LD_VAR 0 1
28967: PPUSH
28968: CALL_OW 321
28972: PUSH
28973: LD_INT 2
28975: NONEQUAL
28976: IFFALSE 28990
// begin result := false ;
28978: LD_ADDR_VAR 0 3
28982: PUSH
28983: LD_INT 0
28985: ST_TO_ADDR
// exit ;
28986: POP
28987: POP
28988: GO 28994
// end ;
28990: GO 28955
28992: POP
28993: POP
// end ;
28994: LD_VAR 0 3
28998: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28999: LD_INT 0
29001: PPUSH
29002: PPUSH
29003: PPUSH
29004: PPUSH
29005: PPUSH
29006: PPUSH
29007: PPUSH
29008: PPUSH
29009: PPUSH
29010: PPUSH
29011: PPUSH
29012: PPUSH
29013: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29014: LD_VAR 0 1
29018: NOT
29019: PUSH
29020: LD_VAR 0 1
29024: PPUSH
29025: CALL_OW 257
29029: PUSH
29030: LD_INT 9
29032: NONEQUAL
29033: OR
29034: IFFALSE 29038
// exit ;
29036: GO 29611
// side := GetSide ( unit ) ;
29038: LD_ADDR_VAR 0 9
29042: PUSH
29043: LD_VAR 0 1
29047: PPUSH
29048: CALL_OW 255
29052: ST_TO_ADDR
// tech_space := tech_spacanom ;
29053: LD_ADDR_VAR 0 12
29057: PUSH
29058: LD_INT 29
29060: ST_TO_ADDR
// tech_time := tech_taurad ;
29061: LD_ADDR_VAR 0 13
29065: PUSH
29066: LD_INT 28
29068: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29069: LD_ADDR_VAR 0 11
29073: PUSH
29074: LD_VAR 0 1
29078: PPUSH
29079: CALL_OW 310
29083: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29084: LD_VAR 0 11
29088: PPUSH
29089: CALL_OW 247
29093: PUSH
29094: LD_INT 2
29096: EQUAL
29097: IFFALSE 29101
// exit ;
29099: GO 29611
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29101: LD_ADDR_VAR 0 8
29105: PUSH
29106: LD_INT 81
29108: PUSH
29109: LD_VAR 0 9
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 3
29120: PUSH
29121: LD_INT 21
29123: PUSH
29124: LD_INT 3
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PPUSH
29139: CALL_OW 69
29143: ST_TO_ADDR
// if not tmp then
29144: LD_VAR 0 8
29148: NOT
29149: IFFALSE 29153
// exit ;
29151: GO 29611
// if in_unit then
29153: LD_VAR 0 11
29157: IFFALSE 29181
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29159: LD_ADDR_VAR 0 10
29163: PUSH
29164: LD_VAR 0 8
29168: PPUSH
29169: LD_VAR 0 11
29173: PPUSH
29174: CALL_OW 74
29178: ST_TO_ADDR
29179: GO 29201
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29181: LD_ADDR_VAR 0 10
29185: PUSH
29186: LD_VAR 0 8
29190: PPUSH
29191: LD_VAR 0 1
29195: PPUSH
29196: CALL_OW 74
29200: ST_TO_ADDR
// if not enemy then
29201: LD_VAR 0 10
29205: NOT
29206: IFFALSE 29210
// exit ;
29208: GO 29611
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29210: LD_VAR 0 11
29214: PUSH
29215: LD_VAR 0 11
29219: PPUSH
29220: LD_VAR 0 10
29224: PPUSH
29225: CALL_OW 296
29229: PUSH
29230: LD_INT 13
29232: GREATER
29233: AND
29234: PUSH
29235: LD_VAR 0 1
29239: PPUSH
29240: LD_VAR 0 10
29244: PPUSH
29245: CALL_OW 296
29249: PUSH
29250: LD_INT 12
29252: GREATER
29253: OR
29254: IFFALSE 29258
// exit ;
29256: GO 29611
// missile := [ 1 ] ;
29258: LD_ADDR_VAR 0 14
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: EMPTY
29267: LIST
29268: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29269: LD_VAR 0 9
29273: PPUSH
29274: LD_VAR 0 12
29278: PPUSH
29279: CALL_OW 325
29283: IFFALSE 29312
// missile := Insert ( missile , missile + 1 , 2 ) ;
29285: LD_ADDR_VAR 0 14
29289: PUSH
29290: LD_VAR 0 14
29294: PPUSH
29295: LD_VAR 0 14
29299: PUSH
29300: LD_INT 1
29302: PLUS
29303: PPUSH
29304: LD_INT 2
29306: PPUSH
29307: CALL_OW 2
29311: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29312: LD_VAR 0 9
29316: PPUSH
29317: LD_VAR 0 13
29321: PPUSH
29322: CALL_OW 325
29326: PUSH
29327: LD_VAR 0 10
29331: PPUSH
29332: CALL_OW 255
29336: PPUSH
29337: LD_VAR 0 13
29341: PPUSH
29342: CALL_OW 325
29346: NOT
29347: AND
29348: IFFALSE 29377
// missile := Insert ( missile , missile + 1 , 3 ) ;
29350: LD_ADDR_VAR 0 14
29354: PUSH
29355: LD_VAR 0 14
29359: PPUSH
29360: LD_VAR 0 14
29364: PUSH
29365: LD_INT 1
29367: PLUS
29368: PPUSH
29369: LD_INT 3
29371: PPUSH
29372: CALL_OW 2
29376: ST_TO_ADDR
// if missile < 2 then
29377: LD_VAR 0 14
29381: PUSH
29382: LD_INT 2
29384: LESS
29385: IFFALSE 29389
// exit ;
29387: GO 29611
// x := GetX ( enemy ) ;
29389: LD_ADDR_VAR 0 4
29393: PUSH
29394: LD_VAR 0 10
29398: PPUSH
29399: CALL_OW 250
29403: ST_TO_ADDR
// y := GetY ( enemy ) ;
29404: LD_ADDR_VAR 0 5
29408: PUSH
29409: LD_VAR 0 10
29413: PPUSH
29414: CALL_OW 251
29418: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29419: LD_ADDR_VAR 0 6
29423: PUSH
29424: LD_VAR 0 4
29428: PUSH
29429: LD_INT 1
29431: NEG
29432: PPUSH
29433: LD_INT 1
29435: PPUSH
29436: CALL_OW 12
29440: PLUS
29441: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29442: LD_ADDR_VAR 0 7
29446: PUSH
29447: LD_VAR 0 5
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PPUSH
29456: LD_INT 1
29458: PPUSH
29459: CALL_OW 12
29463: PLUS
29464: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29465: LD_VAR 0 6
29469: PPUSH
29470: LD_VAR 0 7
29474: PPUSH
29475: CALL_OW 488
29479: NOT
29480: IFFALSE 29502
// begin _x := x ;
29482: LD_ADDR_VAR 0 6
29486: PUSH
29487: LD_VAR 0 4
29491: ST_TO_ADDR
// _y := y ;
29492: LD_ADDR_VAR 0 7
29496: PUSH
29497: LD_VAR 0 5
29501: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29502: LD_ADDR_VAR 0 3
29506: PUSH
29507: LD_INT 1
29509: PPUSH
29510: LD_VAR 0 14
29514: PPUSH
29515: CALL_OW 12
29519: ST_TO_ADDR
// case i of 1 :
29520: LD_VAR 0 3
29524: PUSH
29525: LD_INT 1
29527: DOUBLE
29528: EQUAL
29529: IFTRUE 29533
29531: GO 29550
29533: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29534: LD_VAR 0 1
29538: PPUSH
29539: LD_VAR 0 10
29543: PPUSH
29544: CALL_OW 115
29548: GO 29611
29550: LD_INT 2
29552: DOUBLE
29553: EQUAL
29554: IFTRUE 29558
29556: GO 29580
29558: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29559: LD_VAR 0 1
29563: PPUSH
29564: LD_VAR 0 6
29568: PPUSH
29569: LD_VAR 0 7
29573: PPUSH
29574: CALL_OW 153
29578: GO 29611
29580: LD_INT 3
29582: DOUBLE
29583: EQUAL
29584: IFTRUE 29588
29586: GO 29610
29588: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29589: LD_VAR 0 1
29593: PPUSH
29594: LD_VAR 0 6
29598: PPUSH
29599: LD_VAR 0 7
29603: PPUSH
29604: CALL_OW 154
29608: GO 29611
29610: POP
// end ;
29611: LD_VAR 0 2
29615: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29616: LD_INT 0
29618: PPUSH
29619: PPUSH
29620: PPUSH
29621: PPUSH
29622: PPUSH
29623: PPUSH
// if not unit or not building then
29624: LD_VAR 0 1
29628: NOT
29629: PUSH
29630: LD_VAR 0 2
29634: NOT
29635: OR
29636: IFFALSE 29640
// exit ;
29638: GO 29798
// x := GetX ( building ) ;
29640: LD_ADDR_VAR 0 5
29644: PUSH
29645: LD_VAR 0 2
29649: PPUSH
29650: CALL_OW 250
29654: ST_TO_ADDR
// y := GetY ( building ) ;
29655: LD_ADDR_VAR 0 6
29659: PUSH
29660: LD_VAR 0 2
29664: PPUSH
29665: CALL_OW 251
29669: ST_TO_ADDR
// for i = 0 to 5 do
29670: LD_ADDR_VAR 0 4
29674: PUSH
29675: DOUBLE
29676: LD_INT 0
29678: DEC
29679: ST_TO_ADDR
29680: LD_INT 5
29682: PUSH
29683: FOR_TO
29684: IFFALSE 29796
// begin _x := ShiftX ( x , i , 3 ) ;
29686: LD_ADDR_VAR 0 7
29690: PUSH
29691: LD_VAR 0 5
29695: PPUSH
29696: LD_VAR 0 4
29700: PPUSH
29701: LD_INT 3
29703: PPUSH
29704: CALL_OW 272
29708: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29709: LD_ADDR_VAR 0 8
29713: PUSH
29714: LD_VAR 0 6
29718: PPUSH
29719: LD_VAR 0 4
29723: PPUSH
29724: LD_INT 3
29726: PPUSH
29727: CALL_OW 273
29731: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29732: LD_VAR 0 7
29736: PPUSH
29737: LD_VAR 0 8
29741: PPUSH
29742: CALL_OW 488
29746: NOT
29747: IFFALSE 29751
// continue ;
29749: GO 29683
// if HexInfo ( _x , _y ) = 0 then
29751: LD_VAR 0 7
29755: PPUSH
29756: LD_VAR 0 8
29760: PPUSH
29761: CALL_OW 428
29765: PUSH
29766: LD_INT 0
29768: EQUAL
29769: IFFALSE 29794
// begin ComMoveXY ( unit , _x , _y ) ;
29771: LD_VAR 0 1
29775: PPUSH
29776: LD_VAR 0 7
29780: PPUSH
29781: LD_VAR 0 8
29785: PPUSH
29786: CALL_OW 111
// exit ;
29790: POP
29791: POP
29792: GO 29798
// end ; end ;
29794: GO 29683
29796: POP
29797: POP
// end ;
29798: LD_VAR 0 3
29802: RET
// export function ScanBase ( side , base_area ) ; begin
29803: LD_INT 0
29805: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29806: LD_ADDR_VAR 0 3
29810: PUSH
29811: LD_VAR 0 2
29815: PPUSH
29816: LD_INT 81
29818: PUSH
29819: LD_VAR 0 1
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PPUSH
29828: CALL_OW 70
29832: ST_TO_ADDR
// end ;
29833: LD_VAR 0 3
29837: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29838: LD_INT 0
29840: PPUSH
29841: PPUSH
29842: PPUSH
29843: PPUSH
// result := false ;
29844: LD_ADDR_VAR 0 2
29848: PUSH
29849: LD_INT 0
29851: ST_TO_ADDR
// side := GetSide ( unit ) ;
29852: LD_ADDR_VAR 0 3
29856: PUSH
29857: LD_VAR 0 1
29861: PPUSH
29862: CALL_OW 255
29866: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29867: LD_ADDR_VAR 0 4
29871: PUSH
29872: LD_VAR 0 1
29876: PPUSH
29877: CALL_OW 248
29881: ST_TO_ADDR
// case nat of 1 :
29882: LD_VAR 0 4
29886: PUSH
29887: LD_INT 1
29889: DOUBLE
29890: EQUAL
29891: IFTRUE 29895
29893: GO 29906
29895: POP
// tech := tech_lassight ; 2 :
29896: LD_ADDR_VAR 0 5
29900: PUSH
29901: LD_INT 12
29903: ST_TO_ADDR
29904: GO 29945
29906: LD_INT 2
29908: DOUBLE
29909: EQUAL
29910: IFTRUE 29914
29912: GO 29925
29914: POP
// tech := tech_mortar ; 3 :
29915: LD_ADDR_VAR 0 5
29919: PUSH
29920: LD_INT 41
29922: ST_TO_ADDR
29923: GO 29945
29925: LD_INT 3
29927: DOUBLE
29928: EQUAL
29929: IFTRUE 29933
29931: GO 29944
29933: POP
// tech := tech_bazooka ; end ;
29934: LD_ADDR_VAR 0 5
29938: PUSH
29939: LD_INT 44
29941: ST_TO_ADDR
29942: GO 29945
29944: POP
// if Researched ( side , tech ) then
29945: LD_VAR 0 3
29949: PPUSH
29950: LD_VAR 0 5
29954: PPUSH
29955: CALL_OW 325
29959: IFFALSE 29986
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29961: LD_ADDR_VAR 0 2
29965: PUSH
29966: LD_INT 5
29968: PUSH
29969: LD_INT 8
29971: PUSH
29972: LD_INT 9
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: LIST
29979: PUSH
29980: LD_VAR 0 4
29984: ARRAY
29985: ST_TO_ADDR
// end ;
29986: LD_VAR 0 2
29990: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29991: LD_INT 0
29993: PPUSH
29994: PPUSH
29995: PPUSH
// if not mines then
29996: LD_VAR 0 2
30000: NOT
30001: IFFALSE 30005
// exit ;
30003: GO 30149
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30005: LD_ADDR_VAR 0 5
30009: PUSH
30010: LD_INT 81
30012: PUSH
30013: LD_VAR 0 1
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 3
30024: PUSH
30025: LD_INT 21
30027: PUSH
30028: LD_INT 3
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PPUSH
30043: CALL_OW 69
30047: ST_TO_ADDR
// for i in mines do
30048: LD_ADDR_VAR 0 4
30052: PUSH
30053: LD_VAR 0 2
30057: PUSH
30058: FOR_IN
30059: IFFALSE 30147
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30061: LD_VAR 0 4
30065: PUSH
30066: LD_INT 1
30068: ARRAY
30069: PPUSH
30070: LD_VAR 0 4
30074: PUSH
30075: LD_INT 2
30077: ARRAY
30078: PPUSH
30079: CALL_OW 458
30083: NOT
30084: IFFALSE 30088
// continue ;
30086: GO 30058
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30088: LD_VAR 0 4
30092: PUSH
30093: LD_INT 1
30095: ARRAY
30096: PPUSH
30097: LD_VAR 0 4
30101: PUSH
30102: LD_INT 2
30104: ARRAY
30105: PPUSH
30106: CALL_OW 428
30110: PUSH
30111: LD_VAR 0 5
30115: IN
30116: IFFALSE 30145
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30118: LD_VAR 0 4
30122: PUSH
30123: LD_INT 1
30125: ARRAY
30126: PPUSH
30127: LD_VAR 0 4
30131: PUSH
30132: LD_INT 2
30134: ARRAY
30135: PPUSH
30136: LD_VAR 0 1
30140: PPUSH
30141: CALL_OW 456
// end ;
30145: GO 30058
30147: POP
30148: POP
// end ;
30149: LD_VAR 0 3
30153: RET
// export function Count ( array ) ; var i ; begin
30154: LD_INT 0
30156: PPUSH
30157: PPUSH
// result := 0 ;
30158: LD_ADDR_VAR 0 2
30162: PUSH
30163: LD_INT 0
30165: ST_TO_ADDR
// for i in array do
30166: LD_ADDR_VAR 0 3
30170: PUSH
30171: LD_VAR 0 1
30175: PUSH
30176: FOR_IN
30177: IFFALSE 30201
// if i then
30179: LD_VAR 0 3
30183: IFFALSE 30199
// result := result + 1 ;
30185: LD_ADDR_VAR 0 2
30189: PUSH
30190: LD_VAR 0 2
30194: PUSH
30195: LD_INT 1
30197: PLUS
30198: ST_TO_ADDR
30199: GO 30176
30201: POP
30202: POP
// end ;
30203: LD_VAR 0 2
30207: RET
// export function IsEmpty ( building ) ; begin
30208: LD_INT 0
30210: PPUSH
// if not building then
30211: LD_VAR 0 1
30215: NOT
30216: IFFALSE 30220
// exit ;
30218: GO 30263
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30220: LD_ADDR_VAR 0 2
30224: PUSH
30225: LD_VAR 0 1
30229: PUSH
30230: LD_INT 22
30232: PUSH
30233: LD_VAR 0 1
30237: PPUSH
30238: CALL_OW 255
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 58
30249: PUSH
30250: EMPTY
30251: LIST
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PPUSH
30257: CALL_OW 69
30261: IN
30262: ST_TO_ADDR
// end ;
30263: LD_VAR 0 2
30267: RET
// export function IsNotFull ( building ) ; begin
30268: LD_INT 0
30270: PPUSH
// if not building then
30271: LD_VAR 0 1
30275: NOT
30276: IFFALSE 30280
// exit ;
30278: GO 30299
// result := UnitsInside ( building ) < 6 ;
30280: LD_ADDR_VAR 0 2
30284: PUSH
30285: LD_VAR 0 1
30289: PPUSH
30290: CALL_OW 313
30294: PUSH
30295: LD_INT 6
30297: LESS
30298: ST_TO_ADDR
// end ;
30299: LD_VAR 0 2
30303: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30304: LD_INT 0
30306: PPUSH
30307: PPUSH
30308: PPUSH
30309: PPUSH
// tmp := [ ] ;
30310: LD_ADDR_VAR 0 3
30314: PUSH
30315: EMPTY
30316: ST_TO_ADDR
// list := [ ] ;
30317: LD_ADDR_VAR 0 5
30321: PUSH
30322: EMPTY
30323: ST_TO_ADDR
// for i = 16 to 25 do
30324: LD_ADDR_VAR 0 4
30328: PUSH
30329: DOUBLE
30330: LD_INT 16
30332: DEC
30333: ST_TO_ADDR
30334: LD_INT 25
30336: PUSH
30337: FOR_TO
30338: IFFALSE 30411
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30340: LD_ADDR_VAR 0 3
30344: PUSH
30345: LD_VAR 0 3
30349: PUSH
30350: LD_INT 22
30352: PUSH
30353: LD_VAR 0 1
30357: PPUSH
30358: CALL_OW 255
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 91
30369: PUSH
30370: LD_VAR 0 1
30374: PUSH
30375: LD_INT 6
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 30
30385: PUSH
30386: LD_VAR 0 4
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: LIST
30399: PUSH
30400: EMPTY
30401: LIST
30402: PPUSH
30403: CALL_OW 69
30407: ADD
30408: ST_TO_ADDR
30409: GO 30337
30411: POP
30412: POP
// for i = 1 to tmp do
30413: LD_ADDR_VAR 0 4
30417: PUSH
30418: DOUBLE
30419: LD_INT 1
30421: DEC
30422: ST_TO_ADDR
30423: LD_VAR 0 3
30427: PUSH
30428: FOR_TO
30429: IFFALSE 30517
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30431: LD_ADDR_VAR 0 5
30435: PUSH
30436: LD_VAR 0 5
30440: PUSH
30441: LD_VAR 0 3
30445: PUSH
30446: LD_VAR 0 4
30450: ARRAY
30451: PPUSH
30452: CALL_OW 266
30456: PUSH
30457: LD_VAR 0 3
30461: PUSH
30462: LD_VAR 0 4
30466: ARRAY
30467: PPUSH
30468: CALL_OW 250
30472: PUSH
30473: LD_VAR 0 3
30477: PUSH
30478: LD_VAR 0 4
30482: ARRAY
30483: PPUSH
30484: CALL_OW 251
30488: PUSH
30489: LD_VAR 0 3
30493: PUSH
30494: LD_VAR 0 4
30498: ARRAY
30499: PPUSH
30500: CALL_OW 254
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: PUSH
30511: EMPTY
30512: LIST
30513: ADD
30514: ST_TO_ADDR
30515: GO 30428
30517: POP
30518: POP
// result := list ;
30519: LD_ADDR_VAR 0 2
30523: PUSH
30524: LD_VAR 0 5
30528: ST_TO_ADDR
// end ;
30529: LD_VAR 0 2
30533: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30534: LD_INT 0
30536: PPUSH
30537: PPUSH
30538: PPUSH
30539: PPUSH
30540: PPUSH
30541: PPUSH
30542: PPUSH
// if not factory then
30543: LD_VAR 0 1
30547: NOT
30548: IFFALSE 30552
// exit ;
30550: GO 31145
// if control = control_apeman then
30552: LD_VAR 0 4
30556: PUSH
30557: LD_INT 5
30559: EQUAL
30560: IFFALSE 30669
// begin tmp := UnitsInside ( factory ) ;
30562: LD_ADDR_VAR 0 8
30566: PUSH
30567: LD_VAR 0 1
30571: PPUSH
30572: CALL_OW 313
30576: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30577: LD_VAR 0 8
30581: PPUSH
30582: LD_INT 25
30584: PUSH
30585: LD_INT 12
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PPUSH
30592: CALL_OW 72
30596: NOT
30597: IFFALSE 30607
// control := control_manual ;
30599: LD_ADDR_VAR 0 4
30603: PUSH
30604: LD_INT 1
30606: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30607: LD_ADDR_VAR 0 8
30611: PUSH
30612: LD_VAR 0 1
30616: PPUSH
30617: CALL 30304 0 1
30621: ST_TO_ADDR
// if tmp then
30622: LD_VAR 0 8
30626: IFFALSE 30669
// begin for i in tmp do
30628: LD_ADDR_VAR 0 7
30632: PUSH
30633: LD_VAR 0 8
30637: PUSH
30638: FOR_IN
30639: IFFALSE 30667
// if i [ 1 ] = b_ext_radio then
30641: LD_VAR 0 7
30645: PUSH
30646: LD_INT 1
30648: ARRAY
30649: PUSH
30650: LD_INT 22
30652: EQUAL
30653: IFFALSE 30665
// begin control := control_remote ;
30655: LD_ADDR_VAR 0 4
30659: PUSH
30660: LD_INT 2
30662: ST_TO_ADDR
// break ;
30663: GO 30667
// end ;
30665: GO 30638
30667: POP
30668: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30669: LD_VAR 0 1
30673: PPUSH
30674: LD_VAR 0 2
30678: PPUSH
30679: LD_VAR 0 3
30683: PPUSH
30684: LD_VAR 0 4
30688: PPUSH
30689: LD_VAR 0 5
30693: PPUSH
30694: CALL_OW 448
30698: IFFALSE 30733
// begin result := [ chassis , engine , control , weapon ] ;
30700: LD_ADDR_VAR 0 6
30704: PUSH
30705: LD_VAR 0 2
30709: PUSH
30710: LD_VAR 0 3
30714: PUSH
30715: LD_VAR 0 4
30719: PUSH
30720: LD_VAR 0 5
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: ST_TO_ADDR
// exit ;
30731: GO 31145
// end ; _chassis := AvailableChassisList ( factory ) ;
30733: LD_ADDR_VAR 0 9
30737: PUSH
30738: LD_VAR 0 1
30742: PPUSH
30743: CALL_OW 475
30747: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30748: LD_ADDR_VAR 0 11
30752: PUSH
30753: LD_VAR 0 1
30757: PPUSH
30758: CALL_OW 476
30762: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30763: LD_ADDR_VAR 0 12
30767: PUSH
30768: LD_VAR 0 1
30772: PPUSH
30773: CALL_OW 477
30777: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30778: LD_ADDR_VAR 0 10
30782: PUSH
30783: LD_VAR 0 1
30787: PPUSH
30788: CALL_OW 478
30792: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30793: LD_VAR 0 9
30797: NOT
30798: PUSH
30799: LD_VAR 0 11
30803: NOT
30804: OR
30805: PUSH
30806: LD_VAR 0 12
30810: NOT
30811: OR
30812: PUSH
30813: LD_VAR 0 10
30817: NOT
30818: OR
30819: IFFALSE 30854
// begin result := [ chassis , engine , control , weapon ] ;
30821: LD_ADDR_VAR 0 6
30825: PUSH
30826: LD_VAR 0 2
30830: PUSH
30831: LD_VAR 0 3
30835: PUSH
30836: LD_VAR 0 4
30840: PUSH
30841: LD_VAR 0 5
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: ST_TO_ADDR
// exit ;
30852: GO 31145
// end ; if not chassis in _chassis then
30854: LD_VAR 0 2
30858: PUSH
30859: LD_VAR 0 9
30863: IN
30864: NOT
30865: IFFALSE 30891
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30867: LD_ADDR_VAR 0 2
30871: PUSH
30872: LD_VAR 0 9
30876: PUSH
30877: LD_INT 1
30879: PPUSH
30880: LD_VAR 0 9
30884: PPUSH
30885: CALL_OW 12
30889: ARRAY
30890: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30891: LD_VAR 0 2
30895: PPUSH
30896: LD_VAR 0 3
30900: PPUSH
30901: CALL 31150 0 2
30905: NOT
30906: IFFALSE 30965
// repeat engine := _engine [ 1 ] ;
30908: LD_ADDR_VAR 0 3
30912: PUSH
30913: LD_VAR 0 11
30917: PUSH
30918: LD_INT 1
30920: ARRAY
30921: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30922: LD_ADDR_VAR 0 11
30926: PUSH
30927: LD_VAR 0 11
30931: PPUSH
30932: LD_INT 1
30934: PPUSH
30935: CALL_OW 3
30939: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30940: LD_VAR 0 2
30944: PPUSH
30945: LD_VAR 0 3
30949: PPUSH
30950: CALL 31150 0 2
30954: PUSH
30955: LD_VAR 0 11
30959: PUSH
30960: EMPTY
30961: EQUAL
30962: OR
30963: IFFALSE 30908
// if not control in _control then
30965: LD_VAR 0 4
30969: PUSH
30970: LD_VAR 0 12
30974: IN
30975: NOT
30976: IFFALSE 31002
// control := _control [ rand ( 1 , _control ) ] ;
30978: LD_ADDR_VAR 0 4
30982: PUSH
30983: LD_VAR 0 12
30987: PUSH
30988: LD_INT 1
30990: PPUSH
30991: LD_VAR 0 12
30995: PPUSH
30996: CALL_OW 12
31000: ARRAY
31001: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31002: LD_VAR 0 2
31006: PPUSH
31007: LD_VAR 0 5
31011: PPUSH
31012: CALL 31370 0 2
31016: NOT
31017: IFFALSE 31076
// repeat weapon := _weapon [ 1 ] ;
31019: LD_ADDR_VAR 0 5
31023: PUSH
31024: LD_VAR 0 10
31028: PUSH
31029: LD_INT 1
31031: ARRAY
31032: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31033: LD_ADDR_VAR 0 10
31037: PUSH
31038: LD_VAR 0 10
31042: PPUSH
31043: LD_INT 1
31045: PPUSH
31046: CALL_OW 3
31050: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31051: LD_VAR 0 2
31055: PPUSH
31056: LD_VAR 0 5
31060: PPUSH
31061: CALL 31370 0 2
31065: PUSH
31066: LD_VAR 0 10
31070: PUSH
31071: EMPTY
31072: EQUAL
31073: OR
31074: IFFALSE 31019
// result := [ ] ;
31076: LD_ADDR_VAR 0 6
31080: PUSH
31081: EMPTY
31082: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31083: LD_VAR 0 1
31087: PPUSH
31088: LD_VAR 0 2
31092: PPUSH
31093: LD_VAR 0 3
31097: PPUSH
31098: LD_VAR 0 4
31102: PPUSH
31103: LD_VAR 0 5
31107: PPUSH
31108: CALL_OW 448
31112: IFFALSE 31145
// result := [ chassis , engine , control , weapon ] ;
31114: LD_ADDR_VAR 0 6
31118: PUSH
31119: LD_VAR 0 2
31123: PUSH
31124: LD_VAR 0 3
31128: PUSH
31129: LD_VAR 0 4
31133: PUSH
31134: LD_VAR 0 5
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: ST_TO_ADDR
// end ;
31145: LD_VAR 0 6
31149: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31150: LD_INT 0
31152: PPUSH
// if not chassis or not engine then
31153: LD_VAR 0 1
31157: NOT
31158: PUSH
31159: LD_VAR 0 2
31163: NOT
31164: OR
31165: IFFALSE 31169
// exit ;
31167: GO 31365
// case engine of engine_solar :
31169: LD_VAR 0 2
31173: PUSH
31174: LD_INT 2
31176: DOUBLE
31177: EQUAL
31178: IFTRUE 31182
31180: GO 31220
31182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31183: LD_ADDR_VAR 0 3
31187: PUSH
31188: LD_INT 11
31190: PUSH
31191: LD_INT 12
31193: PUSH
31194: LD_INT 13
31196: PUSH
31197: LD_INT 14
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: LD_INT 2
31205: PUSH
31206: LD_INT 3
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: ST_TO_ADDR
31218: GO 31349
31220: LD_INT 1
31222: DOUBLE
31223: EQUAL
31224: IFTRUE 31228
31226: GO 31290
31228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31229: LD_ADDR_VAR 0 3
31233: PUSH
31234: LD_INT 11
31236: PUSH
31237: LD_INT 12
31239: PUSH
31240: LD_INT 13
31242: PUSH
31243: LD_INT 14
31245: PUSH
31246: LD_INT 1
31248: PUSH
31249: LD_INT 2
31251: PUSH
31252: LD_INT 3
31254: PUSH
31255: LD_INT 4
31257: PUSH
31258: LD_INT 5
31260: PUSH
31261: LD_INT 21
31263: PUSH
31264: LD_INT 23
31266: PUSH
31267: LD_INT 22
31269: PUSH
31270: LD_INT 24
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: ST_TO_ADDR
31288: GO 31349
31290: LD_INT 3
31292: DOUBLE
31293: EQUAL
31294: IFTRUE 31298
31296: GO 31348
31298: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31299: LD_ADDR_VAR 0 3
31303: PUSH
31304: LD_INT 13
31306: PUSH
31307: LD_INT 14
31309: PUSH
31310: LD_INT 2
31312: PUSH
31313: LD_INT 3
31315: PUSH
31316: LD_INT 4
31318: PUSH
31319: LD_INT 5
31321: PUSH
31322: LD_INT 21
31324: PUSH
31325: LD_INT 22
31327: PUSH
31328: LD_INT 23
31330: PUSH
31331: LD_INT 24
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: ST_TO_ADDR
31346: GO 31349
31348: POP
// result := ( chassis in result ) ;
31349: LD_ADDR_VAR 0 3
31353: PUSH
31354: LD_VAR 0 1
31358: PUSH
31359: LD_VAR 0 3
31363: IN
31364: ST_TO_ADDR
// end ;
31365: LD_VAR 0 3
31369: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31370: LD_INT 0
31372: PPUSH
// if not chassis or not weapon then
31373: LD_VAR 0 1
31377: NOT
31378: PUSH
31379: LD_VAR 0 2
31383: NOT
31384: OR
31385: IFFALSE 31389
// exit ;
31387: GO 32451
// case weapon of us_machine_gun :
31389: LD_VAR 0 2
31393: PUSH
31394: LD_INT 2
31396: DOUBLE
31397: EQUAL
31398: IFTRUE 31402
31400: GO 31432
31402: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31403: LD_ADDR_VAR 0 3
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: LD_INT 2
31413: PUSH
31414: LD_INT 3
31416: PUSH
31417: LD_INT 4
31419: PUSH
31420: LD_INT 5
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: ST_TO_ADDR
31430: GO 32435
31432: LD_INT 3
31434: DOUBLE
31435: EQUAL
31436: IFTRUE 31440
31438: GO 31470
31440: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31441: LD_ADDR_VAR 0 3
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: LD_INT 4
31457: PUSH
31458: LD_INT 5
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: ST_TO_ADDR
31468: GO 32435
31470: LD_INT 11
31472: DOUBLE
31473: EQUAL
31474: IFTRUE 31478
31476: GO 31508
31478: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31479: LD_ADDR_VAR 0 3
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: LD_INT 3
31492: PUSH
31493: LD_INT 4
31495: PUSH
31496: LD_INT 5
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: ST_TO_ADDR
31506: GO 32435
31508: LD_INT 4
31510: DOUBLE
31511: EQUAL
31512: IFTRUE 31516
31514: GO 31542
31516: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31517: LD_ADDR_VAR 0 3
31521: PUSH
31522: LD_INT 2
31524: PUSH
31525: LD_INT 3
31527: PUSH
31528: LD_INT 4
31530: PUSH
31531: LD_INT 5
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: ST_TO_ADDR
31540: GO 32435
31542: LD_INT 5
31544: DOUBLE
31545: EQUAL
31546: IFTRUE 31550
31548: GO 31576
31550: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31551: LD_ADDR_VAR 0 3
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: LD_INT 3
31561: PUSH
31562: LD_INT 4
31564: PUSH
31565: LD_INT 5
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: ST_TO_ADDR
31574: GO 32435
31576: LD_INT 9
31578: DOUBLE
31579: EQUAL
31580: IFTRUE 31584
31582: GO 31610
31584: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31585: LD_ADDR_VAR 0 3
31589: PUSH
31590: LD_INT 2
31592: PUSH
31593: LD_INT 3
31595: PUSH
31596: LD_INT 4
31598: PUSH
31599: LD_INT 5
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: ST_TO_ADDR
31608: GO 32435
31610: LD_INT 7
31612: DOUBLE
31613: EQUAL
31614: IFTRUE 31618
31616: GO 31644
31618: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31619: LD_ADDR_VAR 0 3
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: LD_INT 3
31629: PUSH
31630: LD_INT 4
31632: PUSH
31633: LD_INT 5
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: ST_TO_ADDR
31642: GO 32435
31644: LD_INT 12
31646: DOUBLE
31647: EQUAL
31648: IFTRUE 31652
31650: GO 31678
31652: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31653: LD_ADDR_VAR 0 3
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: LD_INT 3
31663: PUSH
31664: LD_INT 4
31666: PUSH
31667: LD_INT 5
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: ST_TO_ADDR
31676: GO 32435
31678: LD_INT 13
31680: DOUBLE
31681: EQUAL
31682: IFTRUE 31686
31684: GO 31712
31686: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31687: LD_ADDR_VAR 0 3
31691: PUSH
31692: LD_INT 2
31694: PUSH
31695: LD_INT 3
31697: PUSH
31698: LD_INT 4
31700: PUSH
31701: LD_INT 5
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: ST_TO_ADDR
31710: GO 32435
31712: LD_INT 14
31714: DOUBLE
31715: EQUAL
31716: IFTRUE 31720
31718: GO 31738
31720: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31721: LD_ADDR_VAR 0 3
31725: PUSH
31726: LD_INT 4
31728: PUSH
31729: LD_INT 5
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: ST_TO_ADDR
31736: GO 32435
31738: LD_INT 6
31740: DOUBLE
31741: EQUAL
31742: IFTRUE 31746
31744: GO 31764
31746: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31747: LD_ADDR_VAR 0 3
31751: PUSH
31752: LD_INT 4
31754: PUSH
31755: LD_INT 5
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: ST_TO_ADDR
31762: GO 32435
31764: LD_INT 10
31766: DOUBLE
31767: EQUAL
31768: IFTRUE 31772
31770: GO 31790
31772: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31773: LD_ADDR_VAR 0 3
31777: PUSH
31778: LD_INT 4
31780: PUSH
31781: LD_INT 5
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: ST_TO_ADDR
31788: GO 32435
31790: LD_INT 22
31792: DOUBLE
31793: EQUAL
31794: IFTRUE 31798
31796: GO 31824
31798: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31799: LD_ADDR_VAR 0 3
31803: PUSH
31804: LD_INT 11
31806: PUSH
31807: LD_INT 12
31809: PUSH
31810: LD_INT 13
31812: PUSH
31813: LD_INT 14
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: ST_TO_ADDR
31822: GO 32435
31824: LD_INT 23
31826: DOUBLE
31827: EQUAL
31828: IFTRUE 31832
31830: GO 31858
31832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31833: LD_ADDR_VAR 0 3
31837: PUSH
31838: LD_INT 11
31840: PUSH
31841: LD_INT 12
31843: PUSH
31844: LD_INT 13
31846: PUSH
31847: LD_INT 14
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: ST_TO_ADDR
31856: GO 32435
31858: LD_INT 24
31860: DOUBLE
31861: EQUAL
31862: IFTRUE 31866
31864: GO 31892
31866: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31867: LD_ADDR_VAR 0 3
31871: PUSH
31872: LD_INT 11
31874: PUSH
31875: LD_INT 12
31877: PUSH
31878: LD_INT 13
31880: PUSH
31881: LD_INT 14
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: ST_TO_ADDR
31890: GO 32435
31892: LD_INT 30
31894: DOUBLE
31895: EQUAL
31896: IFTRUE 31900
31898: GO 31926
31900: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31901: LD_ADDR_VAR 0 3
31905: PUSH
31906: LD_INT 11
31908: PUSH
31909: LD_INT 12
31911: PUSH
31912: LD_INT 13
31914: PUSH
31915: LD_INT 14
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: ST_TO_ADDR
31924: GO 32435
31926: LD_INT 25
31928: DOUBLE
31929: EQUAL
31930: IFTRUE 31934
31932: GO 31952
31934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31935: LD_ADDR_VAR 0 3
31939: PUSH
31940: LD_INT 13
31942: PUSH
31943: LD_INT 14
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: ST_TO_ADDR
31950: GO 32435
31952: LD_INT 27
31954: DOUBLE
31955: EQUAL
31956: IFTRUE 31960
31958: GO 31978
31960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31961: LD_ADDR_VAR 0 3
31965: PUSH
31966: LD_INT 13
31968: PUSH
31969: LD_INT 14
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: ST_TO_ADDR
31976: GO 32435
31978: LD_EXP 24
31982: DOUBLE
31983: EQUAL
31984: IFTRUE 31988
31986: GO 32014
31988: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31989: LD_ADDR_VAR 0 3
31993: PUSH
31994: LD_INT 11
31996: PUSH
31997: LD_INT 12
31999: PUSH
32000: LD_INT 13
32002: PUSH
32003: LD_INT 14
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: ST_TO_ADDR
32012: GO 32435
32014: LD_INT 28
32016: DOUBLE
32017: EQUAL
32018: IFTRUE 32022
32020: GO 32040
32022: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32023: LD_ADDR_VAR 0 3
32027: PUSH
32028: LD_INT 13
32030: PUSH
32031: LD_INT 14
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: ST_TO_ADDR
32038: GO 32435
32040: LD_INT 29
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32066
32048: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32049: LD_ADDR_VAR 0 3
32053: PUSH
32054: LD_INT 13
32056: PUSH
32057: LD_INT 14
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: ST_TO_ADDR
32064: GO 32435
32066: LD_INT 31
32068: DOUBLE
32069: EQUAL
32070: IFTRUE 32074
32072: GO 32092
32074: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32075: LD_ADDR_VAR 0 3
32079: PUSH
32080: LD_INT 13
32082: PUSH
32083: LD_INT 14
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: ST_TO_ADDR
32090: GO 32435
32092: LD_INT 26
32094: DOUBLE
32095: EQUAL
32096: IFTRUE 32100
32098: GO 32118
32100: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32101: LD_ADDR_VAR 0 3
32105: PUSH
32106: LD_INT 13
32108: PUSH
32109: LD_INT 14
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: ST_TO_ADDR
32116: GO 32435
32118: LD_INT 42
32120: DOUBLE
32121: EQUAL
32122: IFTRUE 32126
32124: GO 32152
32126: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32127: LD_ADDR_VAR 0 3
32131: PUSH
32132: LD_INT 21
32134: PUSH
32135: LD_INT 22
32137: PUSH
32138: LD_INT 23
32140: PUSH
32141: LD_INT 24
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: ST_TO_ADDR
32150: GO 32435
32152: LD_INT 43
32154: DOUBLE
32155: EQUAL
32156: IFTRUE 32160
32158: GO 32186
32160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32161: LD_ADDR_VAR 0 3
32165: PUSH
32166: LD_INT 21
32168: PUSH
32169: LD_INT 22
32171: PUSH
32172: LD_INT 23
32174: PUSH
32175: LD_INT 24
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: ST_TO_ADDR
32184: GO 32435
32186: LD_INT 44
32188: DOUBLE
32189: EQUAL
32190: IFTRUE 32194
32192: GO 32220
32194: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32195: LD_ADDR_VAR 0 3
32199: PUSH
32200: LD_INT 21
32202: PUSH
32203: LD_INT 22
32205: PUSH
32206: LD_INT 23
32208: PUSH
32209: LD_INT 24
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: ST_TO_ADDR
32218: GO 32435
32220: LD_INT 45
32222: DOUBLE
32223: EQUAL
32224: IFTRUE 32228
32226: GO 32254
32228: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32229: LD_ADDR_VAR 0 3
32233: PUSH
32234: LD_INT 21
32236: PUSH
32237: LD_INT 22
32239: PUSH
32240: LD_INT 23
32242: PUSH
32243: LD_INT 24
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: ST_TO_ADDR
32252: GO 32435
32254: LD_INT 49
32256: DOUBLE
32257: EQUAL
32258: IFTRUE 32262
32260: GO 32288
32262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32263: LD_ADDR_VAR 0 3
32267: PUSH
32268: LD_INT 21
32270: PUSH
32271: LD_INT 22
32273: PUSH
32274: LD_INT 23
32276: PUSH
32277: LD_INT 24
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: ST_TO_ADDR
32286: GO 32435
32288: LD_INT 51
32290: DOUBLE
32291: EQUAL
32292: IFTRUE 32296
32294: GO 32322
32296: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32297: LD_ADDR_VAR 0 3
32301: PUSH
32302: LD_INT 21
32304: PUSH
32305: LD_INT 22
32307: PUSH
32308: LD_INT 23
32310: PUSH
32311: LD_INT 24
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: ST_TO_ADDR
32320: GO 32435
32322: LD_INT 52
32324: DOUBLE
32325: EQUAL
32326: IFTRUE 32330
32328: GO 32356
32330: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32331: LD_ADDR_VAR 0 3
32335: PUSH
32336: LD_INT 21
32338: PUSH
32339: LD_INT 22
32341: PUSH
32342: LD_INT 23
32344: PUSH
32345: LD_INT 24
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: ST_TO_ADDR
32354: GO 32435
32356: LD_INT 53
32358: DOUBLE
32359: EQUAL
32360: IFTRUE 32364
32362: GO 32382
32364: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32365: LD_ADDR_VAR 0 3
32369: PUSH
32370: LD_INT 23
32372: PUSH
32373: LD_INT 24
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: ST_TO_ADDR
32380: GO 32435
32382: LD_INT 46
32384: DOUBLE
32385: EQUAL
32386: IFTRUE 32390
32388: GO 32408
32390: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32391: LD_ADDR_VAR 0 3
32395: PUSH
32396: LD_INT 23
32398: PUSH
32399: LD_INT 24
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: ST_TO_ADDR
32406: GO 32435
32408: LD_INT 47
32410: DOUBLE
32411: EQUAL
32412: IFTRUE 32416
32414: GO 32434
32416: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32417: LD_ADDR_VAR 0 3
32421: PUSH
32422: LD_INT 23
32424: PUSH
32425: LD_INT 24
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: ST_TO_ADDR
32432: GO 32435
32434: POP
// result := ( chassis in result ) ;
32435: LD_ADDR_VAR 0 3
32439: PUSH
32440: LD_VAR 0 1
32444: PUSH
32445: LD_VAR 0 3
32449: IN
32450: ST_TO_ADDR
// end ;
32451: LD_VAR 0 3
32455: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32456: LD_INT 0
32458: PPUSH
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
32463: PPUSH
32464: PPUSH
// result := array ;
32465: LD_ADDR_VAR 0 5
32469: PUSH
32470: LD_VAR 0 1
32474: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32475: LD_VAR 0 1
32479: NOT
32480: PUSH
32481: LD_VAR 0 2
32485: NOT
32486: OR
32487: PUSH
32488: LD_VAR 0 3
32492: NOT
32493: OR
32494: PUSH
32495: LD_VAR 0 2
32499: PUSH
32500: LD_VAR 0 1
32504: GREATER
32505: OR
32506: PUSH
32507: LD_VAR 0 3
32511: PUSH
32512: LD_VAR 0 1
32516: GREATER
32517: OR
32518: IFFALSE 32522
// exit ;
32520: GO 32818
// if direction then
32522: LD_VAR 0 4
32526: IFFALSE 32590
// begin d := 1 ;
32528: LD_ADDR_VAR 0 9
32532: PUSH
32533: LD_INT 1
32535: ST_TO_ADDR
// if i_from > i_to then
32536: LD_VAR 0 2
32540: PUSH
32541: LD_VAR 0 3
32545: GREATER
32546: IFFALSE 32572
// length := ( array - i_from ) + i_to else
32548: LD_ADDR_VAR 0 11
32552: PUSH
32553: LD_VAR 0 1
32557: PUSH
32558: LD_VAR 0 2
32562: MINUS
32563: PUSH
32564: LD_VAR 0 3
32568: PLUS
32569: ST_TO_ADDR
32570: GO 32588
// length := i_to - i_from ;
32572: LD_ADDR_VAR 0 11
32576: PUSH
32577: LD_VAR 0 3
32581: PUSH
32582: LD_VAR 0 2
32586: MINUS
32587: ST_TO_ADDR
// end else
32588: GO 32651
// begin d := - 1 ;
32590: LD_ADDR_VAR 0 9
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: ST_TO_ADDR
// if i_from > i_to then
32599: LD_VAR 0 2
32603: PUSH
32604: LD_VAR 0 3
32608: GREATER
32609: IFFALSE 32629
// length := i_from - i_to else
32611: LD_ADDR_VAR 0 11
32615: PUSH
32616: LD_VAR 0 2
32620: PUSH
32621: LD_VAR 0 3
32625: MINUS
32626: ST_TO_ADDR
32627: GO 32651
// length := ( array - i_to ) + i_from ;
32629: LD_ADDR_VAR 0 11
32633: PUSH
32634: LD_VAR 0 1
32638: PUSH
32639: LD_VAR 0 3
32643: MINUS
32644: PUSH
32645: LD_VAR 0 2
32649: PLUS
32650: ST_TO_ADDR
// end ; if not length then
32651: LD_VAR 0 11
32655: NOT
32656: IFFALSE 32660
// exit ;
32658: GO 32818
// tmp := array ;
32660: LD_ADDR_VAR 0 10
32664: PUSH
32665: LD_VAR 0 1
32669: ST_TO_ADDR
// for i = 1 to length do
32670: LD_ADDR_VAR 0 6
32674: PUSH
32675: DOUBLE
32676: LD_INT 1
32678: DEC
32679: ST_TO_ADDR
32680: LD_VAR 0 11
32684: PUSH
32685: FOR_TO
32686: IFFALSE 32806
// begin for j = 1 to array do
32688: LD_ADDR_VAR 0 7
32692: PUSH
32693: DOUBLE
32694: LD_INT 1
32696: DEC
32697: ST_TO_ADDR
32698: LD_VAR 0 1
32702: PUSH
32703: FOR_TO
32704: IFFALSE 32792
// begin k := j + d ;
32706: LD_ADDR_VAR 0 8
32710: PUSH
32711: LD_VAR 0 7
32715: PUSH
32716: LD_VAR 0 9
32720: PLUS
32721: ST_TO_ADDR
// if k > array then
32722: LD_VAR 0 8
32726: PUSH
32727: LD_VAR 0 1
32731: GREATER
32732: IFFALSE 32742
// k := 1 ;
32734: LD_ADDR_VAR 0 8
32738: PUSH
32739: LD_INT 1
32741: ST_TO_ADDR
// if not k then
32742: LD_VAR 0 8
32746: NOT
32747: IFFALSE 32759
// k := array ;
32749: LD_ADDR_VAR 0 8
32753: PUSH
32754: LD_VAR 0 1
32758: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32759: LD_ADDR_VAR 0 10
32763: PUSH
32764: LD_VAR 0 10
32768: PPUSH
32769: LD_VAR 0 8
32773: PPUSH
32774: LD_VAR 0 1
32778: PUSH
32779: LD_VAR 0 7
32783: ARRAY
32784: PPUSH
32785: CALL_OW 1
32789: ST_TO_ADDR
// end ;
32790: GO 32703
32792: POP
32793: POP
// array := tmp ;
32794: LD_ADDR_VAR 0 1
32798: PUSH
32799: LD_VAR 0 10
32803: ST_TO_ADDR
// end ;
32804: GO 32685
32806: POP
32807: POP
// result := array ;
32808: LD_ADDR_VAR 0 5
32812: PUSH
32813: LD_VAR 0 1
32817: ST_TO_ADDR
// end ;
32818: LD_VAR 0 5
32822: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32823: LD_INT 0
32825: PPUSH
32826: PPUSH
// result := 0 ;
32827: LD_ADDR_VAR 0 3
32831: PUSH
32832: LD_INT 0
32834: ST_TO_ADDR
// if not array or not value in array then
32835: LD_VAR 0 1
32839: NOT
32840: PUSH
32841: LD_VAR 0 2
32845: PUSH
32846: LD_VAR 0 1
32850: IN
32851: NOT
32852: OR
32853: IFFALSE 32857
// exit ;
32855: GO 32911
// for i = 1 to array do
32857: LD_ADDR_VAR 0 4
32861: PUSH
32862: DOUBLE
32863: LD_INT 1
32865: DEC
32866: ST_TO_ADDR
32867: LD_VAR 0 1
32871: PUSH
32872: FOR_TO
32873: IFFALSE 32909
// if value = array [ i ] then
32875: LD_VAR 0 2
32879: PUSH
32880: LD_VAR 0 1
32884: PUSH
32885: LD_VAR 0 4
32889: ARRAY
32890: EQUAL
32891: IFFALSE 32907
// begin result := i ;
32893: LD_ADDR_VAR 0 3
32897: PUSH
32898: LD_VAR 0 4
32902: ST_TO_ADDR
// exit ;
32903: POP
32904: POP
32905: GO 32911
// end ;
32907: GO 32872
32909: POP
32910: POP
// end ;
32911: LD_VAR 0 3
32915: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32916: LD_INT 0
32918: PPUSH
// vc_chassis := chassis ;
32919: LD_ADDR_OWVAR 37
32923: PUSH
32924: LD_VAR 0 1
32928: ST_TO_ADDR
// vc_engine := engine ;
32929: LD_ADDR_OWVAR 39
32933: PUSH
32934: LD_VAR 0 2
32938: ST_TO_ADDR
// vc_control := control ;
32939: LD_ADDR_OWVAR 38
32943: PUSH
32944: LD_VAR 0 3
32948: ST_TO_ADDR
// vc_weapon := weapon ;
32949: LD_ADDR_OWVAR 40
32953: PUSH
32954: LD_VAR 0 4
32958: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32959: LD_ADDR_OWVAR 41
32963: PUSH
32964: LD_VAR 0 5
32968: ST_TO_ADDR
// end ;
32969: LD_VAR 0 6
32973: RET
// export function WantPlant ( unit ) ; var task ; begin
32974: LD_INT 0
32976: PPUSH
32977: PPUSH
// result := false ;
32978: LD_ADDR_VAR 0 2
32982: PUSH
32983: LD_INT 0
32985: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32986: LD_ADDR_VAR 0 3
32990: PUSH
32991: LD_VAR 0 1
32995: PPUSH
32996: CALL_OW 437
33000: ST_TO_ADDR
// if task then
33001: LD_VAR 0 3
33005: IFFALSE 33033
// if task [ 1 ] [ 1 ] = p then
33007: LD_VAR 0 3
33011: PUSH
33012: LD_INT 1
33014: ARRAY
33015: PUSH
33016: LD_INT 1
33018: ARRAY
33019: PUSH
33020: LD_STRING p
33022: EQUAL
33023: IFFALSE 33033
// result := true ;
33025: LD_ADDR_VAR 0 2
33029: PUSH
33030: LD_INT 1
33032: ST_TO_ADDR
// end ;
33033: LD_VAR 0 2
33037: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33038: LD_INT 0
33040: PPUSH
33041: PPUSH
33042: PPUSH
33043: PPUSH
// if pos < 1 then
33044: LD_VAR 0 2
33048: PUSH
33049: LD_INT 1
33051: LESS
33052: IFFALSE 33056
// exit ;
33054: GO 33359
// if pos = 1 then
33056: LD_VAR 0 2
33060: PUSH
33061: LD_INT 1
33063: EQUAL
33064: IFFALSE 33097
// result := Replace ( arr , pos [ 1 ] , value ) else
33066: LD_ADDR_VAR 0 4
33070: PUSH
33071: LD_VAR 0 1
33075: PPUSH
33076: LD_VAR 0 2
33080: PUSH
33081: LD_INT 1
33083: ARRAY
33084: PPUSH
33085: LD_VAR 0 3
33089: PPUSH
33090: CALL_OW 1
33094: ST_TO_ADDR
33095: GO 33359
// begin tmp := arr ;
33097: LD_ADDR_VAR 0 6
33101: PUSH
33102: LD_VAR 0 1
33106: ST_TO_ADDR
// s_arr := [ tmp ] ;
33107: LD_ADDR_VAR 0 7
33111: PUSH
33112: LD_VAR 0 6
33116: PUSH
33117: EMPTY
33118: LIST
33119: ST_TO_ADDR
// for i = 1 to pos - 1 do
33120: LD_ADDR_VAR 0 5
33124: PUSH
33125: DOUBLE
33126: LD_INT 1
33128: DEC
33129: ST_TO_ADDR
33130: LD_VAR 0 2
33134: PUSH
33135: LD_INT 1
33137: MINUS
33138: PUSH
33139: FOR_TO
33140: IFFALSE 33185
// begin tmp := tmp [ pos [ i ] ] ;
33142: LD_ADDR_VAR 0 6
33146: PUSH
33147: LD_VAR 0 6
33151: PUSH
33152: LD_VAR 0 2
33156: PUSH
33157: LD_VAR 0 5
33161: ARRAY
33162: ARRAY
33163: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33164: LD_ADDR_VAR 0 7
33168: PUSH
33169: LD_VAR 0 7
33173: PUSH
33174: LD_VAR 0 6
33178: PUSH
33179: EMPTY
33180: LIST
33181: ADD
33182: ST_TO_ADDR
// end ;
33183: GO 33139
33185: POP
33186: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33187: LD_ADDR_VAR 0 6
33191: PUSH
33192: LD_VAR 0 6
33196: PPUSH
33197: LD_VAR 0 2
33201: PUSH
33202: LD_VAR 0 2
33206: ARRAY
33207: PPUSH
33208: LD_VAR 0 3
33212: PPUSH
33213: CALL_OW 1
33217: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33218: LD_ADDR_VAR 0 7
33222: PUSH
33223: LD_VAR 0 7
33227: PPUSH
33228: LD_VAR 0 7
33232: PPUSH
33233: LD_VAR 0 6
33237: PPUSH
33238: CALL_OW 1
33242: ST_TO_ADDR
// for i = s_arr downto 2 do
33243: LD_ADDR_VAR 0 5
33247: PUSH
33248: DOUBLE
33249: LD_VAR 0 7
33253: INC
33254: ST_TO_ADDR
33255: LD_INT 2
33257: PUSH
33258: FOR_DOWNTO
33259: IFFALSE 33343
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33261: LD_ADDR_VAR 0 6
33265: PUSH
33266: LD_VAR 0 7
33270: PUSH
33271: LD_VAR 0 5
33275: PUSH
33276: LD_INT 1
33278: MINUS
33279: ARRAY
33280: PPUSH
33281: LD_VAR 0 2
33285: PUSH
33286: LD_VAR 0 5
33290: PUSH
33291: LD_INT 1
33293: MINUS
33294: ARRAY
33295: PPUSH
33296: LD_VAR 0 7
33300: PUSH
33301: LD_VAR 0 5
33305: ARRAY
33306: PPUSH
33307: CALL_OW 1
33311: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33312: LD_ADDR_VAR 0 7
33316: PUSH
33317: LD_VAR 0 7
33321: PPUSH
33322: LD_VAR 0 5
33326: PUSH
33327: LD_INT 1
33329: MINUS
33330: PPUSH
33331: LD_VAR 0 6
33335: PPUSH
33336: CALL_OW 1
33340: ST_TO_ADDR
// end ;
33341: GO 33258
33343: POP
33344: POP
// result := s_arr [ 1 ] ;
33345: LD_ADDR_VAR 0 4
33349: PUSH
33350: LD_VAR 0 7
33354: PUSH
33355: LD_INT 1
33357: ARRAY
33358: ST_TO_ADDR
// end ; end ;
33359: LD_VAR 0 4
33363: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33364: LD_INT 0
33366: PPUSH
33367: PPUSH
// if not list then
33368: LD_VAR 0 1
33372: NOT
33373: IFFALSE 33377
// exit ;
33375: GO 33468
// i := list [ pos1 ] ;
33377: LD_ADDR_VAR 0 5
33381: PUSH
33382: LD_VAR 0 1
33386: PUSH
33387: LD_VAR 0 2
33391: ARRAY
33392: ST_TO_ADDR
// if not i then
33393: LD_VAR 0 5
33397: NOT
33398: IFFALSE 33402
// exit ;
33400: GO 33468
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33402: LD_ADDR_VAR 0 1
33406: PUSH
33407: LD_VAR 0 1
33411: PPUSH
33412: LD_VAR 0 2
33416: PPUSH
33417: LD_VAR 0 1
33421: PUSH
33422: LD_VAR 0 3
33426: ARRAY
33427: PPUSH
33428: CALL_OW 1
33432: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33433: LD_ADDR_VAR 0 1
33437: PUSH
33438: LD_VAR 0 1
33442: PPUSH
33443: LD_VAR 0 3
33447: PPUSH
33448: LD_VAR 0 5
33452: PPUSH
33453: CALL_OW 1
33457: ST_TO_ADDR
// result := list ;
33458: LD_ADDR_VAR 0 4
33462: PUSH
33463: LD_VAR 0 1
33467: ST_TO_ADDR
// end ;
33468: LD_VAR 0 4
33472: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33473: LD_INT 0
33475: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33476: LD_ADDR_VAR 0 5
33480: PUSH
33481: LD_VAR 0 1
33485: PPUSH
33486: CALL_OW 250
33490: PPUSH
33491: LD_VAR 0 1
33495: PPUSH
33496: CALL_OW 251
33500: PPUSH
33501: LD_VAR 0 2
33505: PPUSH
33506: LD_VAR 0 3
33510: PPUSH
33511: LD_VAR 0 4
33515: PPUSH
33516: CALL 33526 0 5
33520: ST_TO_ADDR
// end ;
33521: LD_VAR 0 5
33525: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33526: LD_INT 0
33528: PPUSH
33529: PPUSH
33530: PPUSH
33531: PPUSH
// if not list then
33532: LD_VAR 0 3
33536: NOT
33537: IFFALSE 33541
// exit ;
33539: GO 33929
// result := [ ] ;
33541: LD_ADDR_VAR 0 6
33545: PUSH
33546: EMPTY
33547: ST_TO_ADDR
// for i in list do
33548: LD_ADDR_VAR 0 7
33552: PUSH
33553: LD_VAR 0 3
33557: PUSH
33558: FOR_IN
33559: IFFALSE 33761
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33561: LD_ADDR_VAR 0 9
33565: PUSH
33566: LD_VAR 0 7
33570: PPUSH
33571: LD_VAR 0 1
33575: PPUSH
33576: LD_VAR 0 2
33580: PPUSH
33581: CALL_OW 297
33585: ST_TO_ADDR
// if not result then
33586: LD_VAR 0 6
33590: NOT
33591: IFFALSE 33617
// result := [ [ i , tmp ] ] else
33593: LD_ADDR_VAR 0 6
33597: PUSH
33598: LD_VAR 0 7
33602: PUSH
33603: LD_VAR 0 9
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: EMPTY
33613: LIST
33614: ST_TO_ADDR
33615: GO 33759
// begin if result [ result ] [ 2 ] < tmp then
33617: LD_VAR 0 6
33621: PUSH
33622: LD_VAR 0 6
33626: ARRAY
33627: PUSH
33628: LD_INT 2
33630: ARRAY
33631: PUSH
33632: LD_VAR 0 9
33636: LESS
33637: IFFALSE 33679
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33639: LD_ADDR_VAR 0 6
33643: PUSH
33644: LD_VAR 0 6
33648: PPUSH
33649: LD_VAR 0 6
33653: PUSH
33654: LD_INT 1
33656: PLUS
33657: PPUSH
33658: LD_VAR 0 7
33662: PUSH
33663: LD_VAR 0 9
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PPUSH
33672: CALL_OW 2
33676: ST_TO_ADDR
33677: GO 33759
// for j = 1 to result do
33679: LD_ADDR_VAR 0 8
33683: PUSH
33684: DOUBLE
33685: LD_INT 1
33687: DEC
33688: ST_TO_ADDR
33689: LD_VAR 0 6
33693: PUSH
33694: FOR_TO
33695: IFFALSE 33757
// begin if tmp < result [ j ] [ 2 ] then
33697: LD_VAR 0 9
33701: PUSH
33702: LD_VAR 0 6
33706: PUSH
33707: LD_VAR 0 8
33711: ARRAY
33712: PUSH
33713: LD_INT 2
33715: ARRAY
33716: LESS
33717: IFFALSE 33755
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33719: LD_ADDR_VAR 0 6
33723: PUSH
33724: LD_VAR 0 6
33728: PPUSH
33729: LD_VAR 0 8
33733: PPUSH
33734: LD_VAR 0 7
33738: PUSH
33739: LD_VAR 0 9
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PPUSH
33748: CALL_OW 2
33752: ST_TO_ADDR
// break ;
33753: GO 33757
// end ; end ;
33755: GO 33694
33757: POP
33758: POP
// end ; end ;
33759: GO 33558
33761: POP
33762: POP
// if result and not asc then
33763: LD_VAR 0 6
33767: PUSH
33768: LD_VAR 0 4
33772: NOT
33773: AND
33774: IFFALSE 33849
// begin tmp := result ;
33776: LD_ADDR_VAR 0 9
33780: PUSH
33781: LD_VAR 0 6
33785: ST_TO_ADDR
// for i = tmp downto 1 do
33786: LD_ADDR_VAR 0 7
33790: PUSH
33791: DOUBLE
33792: LD_VAR 0 9
33796: INC
33797: ST_TO_ADDR
33798: LD_INT 1
33800: PUSH
33801: FOR_DOWNTO
33802: IFFALSE 33847
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33804: LD_ADDR_VAR 0 6
33808: PUSH
33809: LD_VAR 0 6
33813: PPUSH
33814: LD_VAR 0 9
33818: PUSH
33819: LD_VAR 0 7
33823: MINUS
33824: PUSH
33825: LD_INT 1
33827: PLUS
33828: PPUSH
33829: LD_VAR 0 9
33833: PUSH
33834: LD_VAR 0 7
33838: ARRAY
33839: PPUSH
33840: CALL_OW 1
33844: ST_TO_ADDR
33845: GO 33801
33847: POP
33848: POP
// end ; tmp := [ ] ;
33849: LD_ADDR_VAR 0 9
33853: PUSH
33854: EMPTY
33855: ST_TO_ADDR
// if mode then
33856: LD_VAR 0 5
33860: IFFALSE 33929
// begin for i = 1 to result do
33862: LD_ADDR_VAR 0 7
33866: PUSH
33867: DOUBLE
33868: LD_INT 1
33870: DEC
33871: ST_TO_ADDR
33872: LD_VAR 0 6
33876: PUSH
33877: FOR_TO
33878: IFFALSE 33917
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33880: LD_ADDR_VAR 0 9
33884: PUSH
33885: LD_VAR 0 9
33889: PPUSH
33890: LD_VAR 0 7
33894: PPUSH
33895: LD_VAR 0 6
33899: PUSH
33900: LD_VAR 0 7
33904: ARRAY
33905: PUSH
33906: LD_INT 1
33908: ARRAY
33909: PPUSH
33910: CALL_OW 1
33914: ST_TO_ADDR
33915: GO 33877
33917: POP
33918: POP
// result := tmp ;
33919: LD_ADDR_VAR 0 6
33923: PUSH
33924: LD_VAR 0 9
33928: ST_TO_ADDR
// end ; end ;
33929: LD_VAR 0 6
33933: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33934: LD_INT 0
33936: PPUSH
33937: PPUSH
33938: PPUSH
33939: PPUSH
33940: PPUSH
33941: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33942: LD_ADDR_VAR 0 5
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: LD_INT 0
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: EMPTY
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: ST_TO_ADDR
// if not x or not y then
33964: LD_VAR 0 2
33968: NOT
33969: PUSH
33970: LD_VAR 0 3
33974: NOT
33975: OR
33976: IFFALSE 33980
// exit ;
33978: GO 35632
// if not range then
33980: LD_VAR 0 4
33984: NOT
33985: IFFALSE 33995
// range := 10 ;
33987: LD_ADDR_VAR 0 4
33991: PUSH
33992: LD_INT 10
33994: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33995: LD_ADDR_VAR 0 8
33999: PUSH
34000: LD_INT 81
34002: PUSH
34003: LD_VAR 0 1
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 92
34014: PUSH
34015: LD_VAR 0 2
34019: PUSH
34020: LD_VAR 0 3
34024: PUSH
34025: LD_VAR 0 4
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 3
34038: PUSH
34039: LD_INT 21
34041: PUSH
34042: LD_INT 3
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: LIST
34057: PPUSH
34058: CALL_OW 69
34062: ST_TO_ADDR
// if not tmp then
34063: LD_VAR 0 8
34067: NOT
34068: IFFALSE 34072
// exit ;
34070: GO 35632
// for i in tmp do
34072: LD_ADDR_VAR 0 6
34076: PUSH
34077: LD_VAR 0 8
34081: PUSH
34082: FOR_IN
34083: IFFALSE 35607
// begin points := [ 0 , 0 , 0 ] ;
34085: LD_ADDR_VAR 0 9
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: LIST
34103: ST_TO_ADDR
// bpoints := 1 ;
34104: LD_ADDR_VAR 0 10
34108: PUSH
34109: LD_INT 1
34111: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34112: LD_VAR 0 6
34116: PPUSH
34117: CALL_OW 247
34121: PUSH
34122: LD_INT 1
34124: DOUBLE
34125: EQUAL
34126: IFTRUE 34130
34128: GO 34708
34130: POP
// begin if GetClass ( i ) = 1 then
34131: LD_VAR 0 6
34135: PPUSH
34136: CALL_OW 257
34140: PUSH
34141: LD_INT 1
34143: EQUAL
34144: IFFALSE 34165
// points := [ 10 , 5 , 3 ] ;
34146: LD_ADDR_VAR 0 9
34150: PUSH
34151: LD_INT 10
34153: PUSH
34154: LD_INT 5
34156: PUSH
34157: LD_INT 3
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: LIST
34164: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34165: LD_VAR 0 6
34169: PPUSH
34170: CALL_OW 257
34174: PUSH
34175: LD_INT 2
34177: PUSH
34178: LD_INT 3
34180: PUSH
34181: LD_INT 4
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: LIST
34188: IN
34189: IFFALSE 34210
// points := [ 3 , 2 , 1 ] ;
34191: LD_ADDR_VAR 0 9
34195: PUSH
34196: LD_INT 3
34198: PUSH
34199: LD_INT 2
34201: PUSH
34202: LD_INT 1
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: LIST
34209: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34210: LD_VAR 0 6
34214: PPUSH
34215: CALL_OW 257
34219: PUSH
34220: LD_INT 5
34222: EQUAL
34223: IFFALSE 34244
// points := [ 130 , 5 , 2 ] ;
34225: LD_ADDR_VAR 0 9
34229: PUSH
34230: LD_INT 130
34232: PUSH
34233: LD_INT 5
34235: PUSH
34236: LD_INT 2
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: LIST
34243: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34244: LD_VAR 0 6
34248: PPUSH
34249: CALL_OW 257
34253: PUSH
34254: LD_INT 8
34256: EQUAL
34257: IFFALSE 34278
// points := [ 35 , 35 , 30 ] ;
34259: LD_ADDR_VAR 0 9
34263: PUSH
34264: LD_INT 35
34266: PUSH
34267: LD_INT 35
34269: PUSH
34270: LD_INT 30
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: LIST
34277: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34278: LD_VAR 0 6
34282: PPUSH
34283: CALL_OW 257
34287: PUSH
34288: LD_INT 9
34290: EQUAL
34291: IFFALSE 34312
// points := [ 20 , 55 , 40 ] ;
34293: LD_ADDR_VAR 0 9
34297: PUSH
34298: LD_INT 20
34300: PUSH
34301: LD_INT 55
34303: PUSH
34304: LD_INT 40
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: LIST
34311: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34312: LD_VAR 0 6
34316: PPUSH
34317: CALL_OW 257
34321: PUSH
34322: LD_INT 12
34324: PUSH
34325: LD_INT 16
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: IN
34332: IFFALSE 34353
// points := [ 5 , 3 , 2 ] ;
34334: LD_ADDR_VAR 0 9
34338: PUSH
34339: LD_INT 5
34341: PUSH
34342: LD_INT 3
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: LIST
34352: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34353: LD_VAR 0 6
34357: PPUSH
34358: CALL_OW 257
34362: PUSH
34363: LD_INT 17
34365: EQUAL
34366: IFFALSE 34387
// points := [ 100 , 50 , 75 ] ;
34368: LD_ADDR_VAR 0 9
34372: PUSH
34373: LD_INT 100
34375: PUSH
34376: LD_INT 50
34378: PUSH
34379: LD_INT 75
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: LIST
34386: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34387: LD_VAR 0 6
34391: PPUSH
34392: CALL_OW 257
34396: PUSH
34397: LD_INT 15
34399: EQUAL
34400: IFFALSE 34421
// points := [ 10 , 5 , 3 ] ;
34402: LD_ADDR_VAR 0 9
34406: PUSH
34407: LD_INT 10
34409: PUSH
34410: LD_INT 5
34412: PUSH
34413: LD_INT 3
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34421: LD_VAR 0 6
34425: PPUSH
34426: CALL_OW 257
34430: PUSH
34431: LD_INT 14
34433: EQUAL
34434: IFFALSE 34455
// points := [ 10 , 0 , 0 ] ;
34436: LD_ADDR_VAR 0 9
34440: PUSH
34441: LD_INT 10
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 0
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34455: LD_VAR 0 6
34459: PPUSH
34460: CALL_OW 257
34464: PUSH
34465: LD_INT 11
34467: EQUAL
34468: IFFALSE 34489
// points := [ 30 , 10 , 5 ] ;
34470: LD_ADDR_VAR 0 9
34474: PUSH
34475: LD_INT 30
34477: PUSH
34478: LD_INT 10
34480: PUSH
34481: LD_INT 5
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: LIST
34488: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34489: LD_VAR 0 1
34493: PPUSH
34494: LD_INT 5
34496: PPUSH
34497: CALL_OW 321
34501: PUSH
34502: LD_INT 2
34504: EQUAL
34505: IFFALSE 34522
// bpoints := bpoints * 1.8 ;
34507: LD_ADDR_VAR 0 10
34511: PUSH
34512: LD_VAR 0 10
34516: PUSH
34517: LD_REAL  1.80000000000000E+0000
34520: MUL
34521: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34522: LD_VAR 0 6
34526: PPUSH
34527: CALL_OW 257
34531: PUSH
34532: LD_INT 1
34534: PUSH
34535: LD_INT 2
34537: PUSH
34538: LD_INT 3
34540: PUSH
34541: LD_INT 4
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: IN
34550: PUSH
34551: LD_VAR 0 1
34555: PPUSH
34556: LD_INT 51
34558: PPUSH
34559: CALL_OW 321
34563: PUSH
34564: LD_INT 2
34566: EQUAL
34567: AND
34568: IFFALSE 34585
// bpoints := bpoints * 1.2 ;
34570: LD_ADDR_VAR 0 10
34574: PUSH
34575: LD_VAR 0 10
34579: PUSH
34580: LD_REAL  1.20000000000000E+0000
34583: MUL
34584: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34585: LD_VAR 0 6
34589: PPUSH
34590: CALL_OW 257
34594: PUSH
34595: LD_INT 5
34597: PUSH
34598: LD_INT 7
34600: PUSH
34601: LD_INT 9
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: IN
34609: PUSH
34610: LD_VAR 0 1
34614: PPUSH
34615: LD_INT 52
34617: PPUSH
34618: CALL_OW 321
34622: PUSH
34623: LD_INT 2
34625: EQUAL
34626: AND
34627: IFFALSE 34644
// bpoints := bpoints * 1.5 ;
34629: LD_ADDR_VAR 0 10
34633: PUSH
34634: LD_VAR 0 10
34638: PUSH
34639: LD_REAL  1.50000000000000E+0000
34642: MUL
34643: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34644: LD_VAR 0 1
34648: PPUSH
34649: LD_INT 66
34651: PPUSH
34652: CALL_OW 321
34656: PUSH
34657: LD_INT 2
34659: EQUAL
34660: IFFALSE 34677
// bpoints := bpoints * 1.1 ;
34662: LD_ADDR_VAR 0 10
34666: PUSH
34667: LD_VAR 0 10
34671: PUSH
34672: LD_REAL  1.10000000000000E+0000
34675: MUL
34676: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34677: LD_ADDR_VAR 0 10
34681: PUSH
34682: LD_VAR 0 10
34686: PUSH
34687: LD_VAR 0 6
34691: PPUSH
34692: LD_INT 1
34694: PPUSH
34695: CALL_OW 259
34699: PUSH
34700: LD_REAL  1.15000000000000E+0000
34703: MUL
34704: MUL
34705: ST_TO_ADDR
// end ; unit_vehicle :
34706: GO 35536
34708: LD_INT 2
34710: DOUBLE
34711: EQUAL
34712: IFTRUE 34716
34714: GO 35524
34716: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34717: LD_VAR 0 6
34721: PPUSH
34722: CALL_OW 264
34726: PUSH
34727: LD_INT 2
34729: PUSH
34730: LD_INT 42
34732: PUSH
34733: LD_INT 24
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: LIST
34740: IN
34741: IFFALSE 34762
// points := [ 25 , 5 , 3 ] ;
34743: LD_ADDR_VAR 0 9
34747: PUSH
34748: LD_INT 25
34750: PUSH
34751: LD_INT 5
34753: PUSH
34754: LD_INT 3
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: LIST
34761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34762: LD_VAR 0 6
34766: PPUSH
34767: CALL_OW 264
34771: PUSH
34772: LD_INT 4
34774: PUSH
34775: LD_INT 43
34777: PUSH
34778: LD_INT 25
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: LIST
34785: IN
34786: IFFALSE 34807
// points := [ 40 , 15 , 5 ] ;
34788: LD_ADDR_VAR 0 9
34792: PUSH
34793: LD_INT 40
34795: PUSH
34796: LD_INT 15
34798: PUSH
34799: LD_INT 5
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: LIST
34806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34807: LD_VAR 0 6
34811: PPUSH
34812: CALL_OW 264
34816: PUSH
34817: LD_INT 3
34819: PUSH
34820: LD_INT 23
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: IN
34827: IFFALSE 34848
// points := [ 7 , 25 , 8 ] ;
34829: LD_ADDR_VAR 0 9
34833: PUSH
34834: LD_INT 7
34836: PUSH
34837: LD_INT 25
34839: PUSH
34840: LD_INT 8
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: LIST
34847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34848: LD_VAR 0 6
34852: PPUSH
34853: CALL_OW 264
34857: PUSH
34858: LD_INT 5
34860: PUSH
34861: LD_INT 27
34863: PUSH
34864: LD_INT 44
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: LIST
34871: IN
34872: IFFALSE 34893
// points := [ 14 , 50 , 16 ] ;
34874: LD_ADDR_VAR 0 9
34878: PUSH
34879: LD_INT 14
34881: PUSH
34882: LD_INT 50
34884: PUSH
34885: LD_INT 16
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34893: LD_VAR 0 6
34897: PPUSH
34898: CALL_OW 264
34902: PUSH
34903: LD_INT 6
34905: PUSH
34906: LD_INT 46
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: IN
34913: IFFALSE 34934
// points := [ 32 , 120 , 70 ] ;
34915: LD_ADDR_VAR 0 9
34919: PUSH
34920: LD_INT 32
34922: PUSH
34923: LD_INT 120
34925: PUSH
34926: LD_INT 70
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34934: LD_VAR 0 6
34938: PPUSH
34939: CALL_OW 264
34943: PUSH
34944: LD_INT 7
34946: PUSH
34947: LD_INT 28
34949: PUSH
34950: LD_INT 45
34952: PUSH
34953: LD_EXP 24
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: IN
34964: IFFALSE 34985
// points := [ 35 , 20 , 45 ] ;
34966: LD_ADDR_VAR 0 9
34970: PUSH
34971: LD_INT 35
34973: PUSH
34974: LD_INT 20
34976: PUSH
34977: LD_INT 45
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: LIST
34984: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34985: LD_VAR 0 6
34989: PPUSH
34990: CALL_OW 264
34994: PUSH
34995: LD_INT 47
34997: PUSH
34998: EMPTY
34999: LIST
35000: IN
35001: IFFALSE 35022
// points := [ 67 , 45 , 75 ] ;
35003: LD_ADDR_VAR 0 9
35007: PUSH
35008: LD_INT 67
35010: PUSH
35011: LD_INT 45
35013: PUSH
35014: LD_INT 75
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: LIST
35021: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35022: LD_VAR 0 6
35026: PPUSH
35027: CALL_OW 264
35031: PUSH
35032: LD_INT 26
35034: PUSH
35035: EMPTY
35036: LIST
35037: IN
35038: IFFALSE 35059
// points := [ 120 , 30 , 80 ] ;
35040: LD_ADDR_VAR 0 9
35044: PUSH
35045: LD_INT 120
35047: PUSH
35048: LD_INT 30
35050: PUSH
35051: LD_INT 80
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: LIST
35058: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35059: LD_VAR 0 6
35063: PPUSH
35064: CALL_OW 264
35068: PUSH
35069: LD_INT 22
35071: PUSH
35072: EMPTY
35073: LIST
35074: IN
35075: IFFALSE 35096
// points := [ 40 , 1 , 1 ] ;
35077: LD_ADDR_VAR 0 9
35081: PUSH
35082: LD_INT 40
35084: PUSH
35085: LD_INT 1
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35096: LD_VAR 0 6
35100: PPUSH
35101: CALL_OW 264
35105: PUSH
35106: LD_INT 29
35108: PUSH
35109: EMPTY
35110: LIST
35111: IN
35112: IFFALSE 35133
// points := [ 70 , 200 , 400 ] ;
35114: LD_ADDR_VAR 0 9
35118: PUSH
35119: LD_INT 70
35121: PUSH
35122: LD_INT 200
35124: PUSH
35125: LD_INT 400
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: LIST
35132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35133: LD_VAR 0 6
35137: PPUSH
35138: CALL_OW 264
35142: PUSH
35143: LD_INT 14
35145: PUSH
35146: LD_INT 53
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: IN
35153: IFFALSE 35174
// points := [ 40 , 10 , 20 ] ;
35155: LD_ADDR_VAR 0 9
35159: PUSH
35160: LD_INT 40
35162: PUSH
35163: LD_INT 10
35165: PUSH
35166: LD_INT 20
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: LIST
35173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35174: LD_VAR 0 6
35178: PPUSH
35179: CALL_OW 264
35183: PUSH
35184: LD_INT 9
35186: PUSH
35187: EMPTY
35188: LIST
35189: IN
35190: IFFALSE 35211
// points := [ 5 , 70 , 20 ] ;
35192: LD_ADDR_VAR 0 9
35196: PUSH
35197: LD_INT 5
35199: PUSH
35200: LD_INT 70
35202: PUSH
35203: LD_INT 20
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35211: LD_VAR 0 6
35215: PPUSH
35216: CALL_OW 264
35220: PUSH
35221: LD_INT 10
35223: PUSH
35224: EMPTY
35225: LIST
35226: IN
35227: IFFALSE 35248
// points := [ 35 , 110 , 70 ] ;
35229: LD_ADDR_VAR 0 9
35233: PUSH
35234: LD_INT 35
35236: PUSH
35237: LD_INT 110
35239: PUSH
35240: LD_INT 70
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35248: LD_VAR 0 6
35252: PPUSH
35253: CALL_OW 265
35257: PUSH
35258: LD_INT 25
35260: EQUAL
35261: IFFALSE 35282
// points := [ 80 , 65 , 100 ] ;
35263: LD_ADDR_VAR 0 9
35267: PUSH
35268: LD_INT 80
35270: PUSH
35271: LD_INT 65
35273: PUSH
35274: LD_INT 100
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35282: LD_VAR 0 6
35286: PPUSH
35287: CALL_OW 263
35291: PUSH
35292: LD_INT 1
35294: EQUAL
35295: IFFALSE 35330
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35297: LD_ADDR_VAR 0 10
35301: PUSH
35302: LD_VAR 0 10
35306: PUSH
35307: LD_VAR 0 6
35311: PPUSH
35312: CALL_OW 311
35316: PPUSH
35317: LD_INT 3
35319: PPUSH
35320: CALL_OW 259
35324: PUSH
35325: LD_INT 4
35327: MUL
35328: MUL
35329: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35330: LD_VAR 0 6
35334: PPUSH
35335: CALL_OW 263
35339: PUSH
35340: LD_INT 2
35342: EQUAL
35343: IFFALSE 35394
// begin j := IsControledBy ( i ) ;
35345: LD_ADDR_VAR 0 7
35349: PUSH
35350: LD_VAR 0 6
35354: PPUSH
35355: CALL_OW 312
35359: ST_TO_ADDR
// if j then
35360: LD_VAR 0 7
35364: IFFALSE 35394
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35366: LD_ADDR_VAR 0 10
35370: PUSH
35371: LD_VAR 0 10
35375: PUSH
35376: LD_VAR 0 7
35380: PPUSH
35381: LD_INT 3
35383: PPUSH
35384: CALL_OW 259
35388: PUSH
35389: LD_INT 3
35391: MUL
35392: MUL
35393: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35394: LD_VAR 0 6
35398: PPUSH
35399: CALL_OW 264
35403: PUSH
35404: LD_INT 5
35406: PUSH
35407: LD_INT 6
35409: PUSH
35410: LD_INT 46
35412: PUSH
35413: LD_INT 44
35415: PUSH
35416: LD_INT 47
35418: PUSH
35419: LD_INT 45
35421: PUSH
35422: LD_INT 28
35424: PUSH
35425: LD_INT 7
35427: PUSH
35428: LD_INT 27
35430: PUSH
35431: LD_INT 29
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: IN
35446: PUSH
35447: LD_VAR 0 1
35451: PPUSH
35452: LD_INT 52
35454: PPUSH
35455: CALL_OW 321
35459: PUSH
35460: LD_INT 2
35462: EQUAL
35463: AND
35464: IFFALSE 35481
// bpoints := bpoints * 1.2 ;
35466: LD_ADDR_VAR 0 10
35470: PUSH
35471: LD_VAR 0 10
35475: PUSH
35476: LD_REAL  1.20000000000000E+0000
35479: MUL
35480: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35481: LD_VAR 0 6
35485: PPUSH
35486: CALL_OW 264
35490: PUSH
35491: LD_INT 6
35493: PUSH
35494: LD_INT 46
35496: PUSH
35497: LD_INT 47
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: LIST
35504: IN
35505: IFFALSE 35522
// bpoints := bpoints * 1.2 ;
35507: LD_ADDR_VAR 0 10
35511: PUSH
35512: LD_VAR 0 10
35516: PUSH
35517: LD_REAL  1.20000000000000E+0000
35520: MUL
35521: ST_TO_ADDR
// end ; unit_building :
35522: GO 35536
35524: LD_INT 3
35526: DOUBLE
35527: EQUAL
35528: IFTRUE 35532
35530: GO 35535
35532: POP
// ; end ;
35533: GO 35536
35535: POP
// for j = 1 to 3 do
35536: LD_ADDR_VAR 0 7
35540: PUSH
35541: DOUBLE
35542: LD_INT 1
35544: DEC
35545: ST_TO_ADDR
35546: LD_INT 3
35548: PUSH
35549: FOR_TO
35550: IFFALSE 35603
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35552: LD_ADDR_VAR 0 5
35556: PUSH
35557: LD_VAR 0 5
35561: PPUSH
35562: LD_VAR 0 7
35566: PPUSH
35567: LD_VAR 0 5
35571: PUSH
35572: LD_VAR 0 7
35576: ARRAY
35577: PUSH
35578: LD_VAR 0 9
35582: PUSH
35583: LD_VAR 0 7
35587: ARRAY
35588: PUSH
35589: LD_VAR 0 10
35593: MUL
35594: PLUS
35595: PPUSH
35596: CALL_OW 1
35600: ST_TO_ADDR
35601: GO 35549
35603: POP
35604: POP
// end ;
35605: GO 34082
35607: POP
35608: POP
// result := Replace ( result , 4 , tmp ) ;
35609: LD_ADDR_VAR 0 5
35613: PUSH
35614: LD_VAR 0 5
35618: PPUSH
35619: LD_INT 4
35621: PPUSH
35622: LD_VAR 0 8
35626: PPUSH
35627: CALL_OW 1
35631: ST_TO_ADDR
// end ;
35632: LD_VAR 0 5
35636: RET
// export function DangerAtRange ( unit , range ) ; begin
35637: LD_INT 0
35639: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35640: LD_ADDR_VAR 0 3
35644: PUSH
35645: LD_VAR 0 1
35649: PPUSH
35650: CALL_OW 255
35654: PPUSH
35655: LD_VAR 0 1
35659: PPUSH
35660: CALL_OW 250
35664: PPUSH
35665: LD_VAR 0 1
35669: PPUSH
35670: CALL_OW 251
35674: PPUSH
35675: LD_VAR 0 2
35679: PPUSH
35680: CALL 33934 0 4
35684: ST_TO_ADDR
// end ;
35685: LD_VAR 0 3
35689: RET
// export function DangerInArea ( side , area ) ; begin
35690: LD_INT 0
35692: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35693: LD_ADDR_VAR 0 3
35697: PUSH
35698: LD_VAR 0 2
35702: PPUSH
35703: LD_INT 81
35705: PUSH
35706: LD_VAR 0 1
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PPUSH
35715: CALL_OW 70
35719: ST_TO_ADDR
// end ;
35720: LD_VAR 0 3
35724: RET
// export function IsExtension ( b ) ; begin
35725: LD_INT 0
35727: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35728: LD_ADDR_VAR 0 2
35732: PUSH
35733: LD_VAR 0 1
35737: PUSH
35738: LD_INT 23
35740: PUSH
35741: LD_INT 20
35743: PUSH
35744: LD_INT 22
35746: PUSH
35747: LD_INT 17
35749: PUSH
35750: LD_INT 24
35752: PUSH
35753: LD_INT 21
35755: PUSH
35756: LD_INT 19
35758: PUSH
35759: LD_INT 16
35761: PUSH
35762: LD_INT 25
35764: PUSH
35765: LD_INT 18
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: IN
35780: ST_TO_ADDR
// end ;
35781: LD_VAR 0 2
35785: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35786: LD_INT 0
35788: PPUSH
35789: PPUSH
35790: PPUSH
// result := [ ] ;
35791: LD_ADDR_VAR 0 4
35795: PUSH
35796: EMPTY
35797: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35798: LD_ADDR_VAR 0 5
35802: PUSH
35803: LD_VAR 0 2
35807: PPUSH
35808: LD_INT 21
35810: PUSH
35811: LD_INT 3
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PPUSH
35818: CALL_OW 70
35822: ST_TO_ADDR
// if not tmp then
35823: LD_VAR 0 5
35827: NOT
35828: IFFALSE 35832
// exit ;
35830: GO 35896
// if checkLink then
35832: LD_VAR 0 3
35836: IFFALSE 35886
// begin for i in tmp do
35838: LD_ADDR_VAR 0 6
35842: PUSH
35843: LD_VAR 0 5
35847: PUSH
35848: FOR_IN
35849: IFFALSE 35884
// if GetBase ( i ) <> base then
35851: LD_VAR 0 6
35855: PPUSH
35856: CALL_OW 274
35860: PUSH
35861: LD_VAR 0 1
35865: NONEQUAL
35866: IFFALSE 35882
// ComLinkToBase ( base , i ) ;
35868: LD_VAR 0 1
35872: PPUSH
35873: LD_VAR 0 6
35877: PPUSH
35878: CALL_OW 169
35882: GO 35848
35884: POP
35885: POP
// end ; result := tmp ;
35886: LD_ADDR_VAR 0 4
35890: PUSH
35891: LD_VAR 0 5
35895: ST_TO_ADDR
// end ;
35896: LD_VAR 0 4
35900: RET
// export function ComComplete ( units , b ) ; var i ; begin
35901: LD_INT 0
35903: PPUSH
35904: PPUSH
// if not units then
35905: LD_VAR 0 1
35909: NOT
35910: IFFALSE 35914
// exit ;
35912: GO 36004
// for i in units do
35914: LD_ADDR_VAR 0 4
35918: PUSH
35919: LD_VAR 0 1
35923: PUSH
35924: FOR_IN
35925: IFFALSE 36002
// if BuildingStatus ( b ) = bs_build then
35927: LD_VAR 0 2
35931: PPUSH
35932: CALL_OW 461
35936: PUSH
35937: LD_INT 1
35939: EQUAL
35940: IFFALSE 36000
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35942: LD_VAR 0 4
35946: PPUSH
35947: LD_STRING h
35949: PUSH
35950: LD_VAR 0 2
35954: PPUSH
35955: CALL_OW 250
35959: PUSH
35960: LD_VAR 0 2
35964: PPUSH
35965: CALL_OW 251
35969: PUSH
35970: LD_VAR 0 2
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: PUSH
35993: EMPTY
35994: LIST
35995: PPUSH
35996: CALL_OW 446
36000: GO 35924
36002: POP
36003: POP
// end ;
36004: LD_VAR 0 3
36008: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36009: LD_INT 0
36011: PPUSH
36012: PPUSH
36013: PPUSH
36014: PPUSH
36015: PPUSH
36016: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36017: LD_VAR 0 1
36021: NOT
36022: PUSH
36023: LD_VAR 0 1
36027: PPUSH
36028: CALL_OW 263
36032: PUSH
36033: LD_INT 2
36035: NONEQUAL
36036: OR
36037: IFFALSE 36041
// exit ;
36039: GO 36357
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36041: LD_ADDR_VAR 0 6
36045: PUSH
36046: LD_INT 22
36048: PUSH
36049: LD_VAR 0 1
36053: PPUSH
36054: CALL_OW 255
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: LD_INT 30
36068: PUSH
36069: LD_INT 36
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 34
36078: PUSH
36079: LD_INT 31
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: LIST
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PPUSH
36095: CALL_OW 69
36099: ST_TO_ADDR
// if not tmp then
36100: LD_VAR 0 6
36104: NOT
36105: IFFALSE 36109
// exit ;
36107: GO 36357
// result := [ ] ;
36109: LD_ADDR_VAR 0 2
36113: PUSH
36114: EMPTY
36115: ST_TO_ADDR
// for i in tmp do
36116: LD_ADDR_VAR 0 3
36120: PUSH
36121: LD_VAR 0 6
36125: PUSH
36126: FOR_IN
36127: IFFALSE 36198
// begin t := UnitsInside ( i ) ;
36129: LD_ADDR_VAR 0 4
36133: PUSH
36134: LD_VAR 0 3
36138: PPUSH
36139: CALL_OW 313
36143: ST_TO_ADDR
// if t then
36144: LD_VAR 0 4
36148: IFFALSE 36196
// for j in t do
36150: LD_ADDR_VAR 0 7
36154: PUSH
36155: LD_VAR 0 4
36159: PUSH
36160: FOR_IN
36161: IFFALSE 36194
// result := Replace ( result , result + 1 , j ) ;
36163: LD_ADDR_VAR 0 2
36167: PUSH
36168: LD_VAR 0 2
36172: PPUSH
36173: LD_VAR 0 2
36177: PUSH
36178: LD_INT 1
36180: PLUS
36181: PPUSH
36182: LD_VAR 0 7
36186: PPUSH
36187: CALL_OW 1
36191: ST_TO_ADDR
36192: GO 36160
36194: POP
36195: POP
// end ;
36196: GO 36126
36198: POP
36199: POP
// if not result then
36200: LD_VAR 0 2
36204: NOT
36205: IFFALSE 36209
// exit ;
36207: GO 36357
// mech := result [ 1 ] ;
36209: LD_ADDR_VAR 0 5
36213: PUSH
36214: LD_VAR 0 2
36218: PUSH
36219: LD_INT 1
36221: ARRAY
36222: ST_TO_ADDR
// if result > 1 then
36223: LD_VAR 0 2
36227: PUSH
36228: LD_INT 1
36230: GREATER
36231: IFFALSE 36343
// begin for i = 2 to result do
36233: LD_ADDR_VAR 0 3
36237: PUSH
36238: DOUBLE
36239: LD_INT 2
36241: DEC
36242: ST_TO_ADDR
36243: LD_VAR 0 2
36247: PUSH
36248: FOR_TO
36249: IFFALSE 36341
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36251: LD_ADDR_VAR 0 4
36255: PUSH
36256: LD_VAR 0 2
36260: PUSH
36261: LD_VAR 0 3
36265: ARRAY
36266: PPUSH
36267: LD_INT 3
36269: PPUSH
36270: CALL_OW 259
36274: PUSH
36275: LD_VAR 0 2
36279: PUSH
36280: LD_VAR 0 3
36284: ARRAY
36285: PPUSH
36286: CALL_OW 432
36290: MINUS
36291: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36292: LD_VAR 0 4
36296: PUSH
36297: LD_VAR 0 5
36301: PPUSH
36302: LD_INT 3
36304: PPUSH
36305: CALL_OW 259
36309: PUSH
36310: LD_VAR 0 5
36314: PPUSH
36315: CALL_OW 432
36319: MINUS
36320: GREATEREQUAL
36321: IFFALSE 36339
// mech := result [ i ] ;
36323: LD_ADDR_VAR 0 5
36327: PUSH
36328: LD_VAR 0 2
36332: PUSH
36333: LD_VAR 0 3
36337: ARRAY
36338: ST_TO_ADDR
// end ;
36339: GO 36248
36341: POP
36342: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36343: LD_VAR 0 1
36347: PPUSH
36348: LD_VAR 0 5
36352: PPUSH
36353: CALL_OW 135
// end ;
36357: LD_VAR 0 2
36361: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36362: LD_INT 0
36364: PPUSH
36365: PPUSH
36366: PPUSH
36367: PPUSH
36368: PPUSH
36369: PPUSH
36370: PPUSH
36371: PPUSH
36372: PPUSH
36373: PPUSH
36374: PPUSH
36375: PPUSH
36376: PPUSH
// result := [ ] ;
36377: LD_ADDR_VAR 0 7
36381: PUSH
36382: EMPTY
36383: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36384: LD_VAR 0 1
36388: PPUSH
36389: CALL_OW 266
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: IN
36404: NOT
36405: IFFALSE 36409
// exit ;
36407: GO 38043
// if name then
36409: LD_VAR 0 3
36413: IFFALSE 36429
// SetBName ( base_dep , name ) ;
36415: LD_VAR 0 1
36419: PPUSH
36420: LD_VAR 0 3
36424: PPUSH
36425: CALL_OW 500
// base := GetBase ( base_dep ) ;
36429: LD_ADDR_VAR 0 15
36433: PUSH
36434: LD_VAR 0 1
36438: PPUSH
36439: CALL_OW 274
36443: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36444: LD_ADDR_VAR 0 16
36448: PUSH
36449: LD_VAR 0 1
36453: PPUSH
36454: CALL_OW 255
36458: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36459: LD_ADDR_VAR 0 17
36463: PUSH
36464: LD_VAR 0 1
36468: PPUSH
36469: CALL_OW 248
36473: ST_TO_ADDR
// if sources then
36474: LD_VAR 0 5
36478: IFFALSE 36525
// for i = 1 to 3 do
36480: LD_ADDR_VAR 0 8
36484: PUSH
36485: DOUBLE
36486: LD_INT 1
36488: DEC
36489: ST_TO_ADDR
36490: LD_INT 3
36492: PUSH
36493: FOR_TO
36494: IFFALSE 36523
// AddResourceType ( base , i , sources [ i ] ) ;
36496: LD_VAR 0 15
36500: PPUSH
36501: LD_VAR 0 8
36505: PPUSH
36506: LD_VAR 0 5
36510: PUSH
36511: LD_VAR 0 8
36515: ARRAY
36516: PPUSH
36517: CALL_OW 276
36521: GO 36493
36523: POP
36524: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36525: LD_ADDR_VAR 0 18
36529: PUSH
36530: LD_VAR 0 15
36534: PPUSH
36535: LD_VAR 0 2
36539: PPUSH
36540: LD_INT 1
36542: PPUSH
36543: CALL 35786 0 3
36547: ST_TO_ADDR
// InitHc ;
36548: CALL_OW 19
// InitUc ;
36552: CALL_OW 18
// uc_side := side ;
36556: LD_ADDR_OWVAR 20
36560: PUSH
36561: LD_VAR 0 16
36565: ST_TO_ADDR
// uc_nation := nation ;
36566: LD_ADDR_OWVAR 21
36570: PUSH
36571: LD_VAR 0 17
36575: ST_TO_ADDR
// if buildings then
36576: LD_VAR 0 18
36580: IFFALSE 37902
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36582: LD_ADDR_VAR 0 19
36586: PUSH
36587: LD_VAR 0 18
36591: PPUSH
36592: LD_INT 2
36594: PUSH
36595: LD_INT 30
36597: PUSH
36598: LD_INT 29
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 30
36607: PUSH
36608: LD_INT 30
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: PPUSH
36620: CALL_OW 72
36624: ST_TO_ADDR
// if tmp then
36625: LD_VAR 0 19
36629: IFFALSE 36677
// for i in tmp do
36631: LD_ADDR_VAR 0 8
36635: PUSH
36636: LD_VAR 0 19
36640: PUSH
36641: FOR_IN
36642: IFFALSE 36675
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36644: LD_VAR 0 8
36648: PPUSH
36649: CALL_OW 250
36653: PPUSH
36654: LD_VAR 0 8
36658: PPUSH
36659: CALL_OW 251
36663: PPUSH
36664: LD_VAR 0 16
36668: PPUSH
36669: CALL_OW 441
36673: GO 36641
36675: POP
36676: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36677: LD_VAR 0 18
36681: PPUSH
36682: LD_INT 2
36684: PUSH
36685: LD_INT 30
36687: PUSH
36688: LD_INT 32
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 30
36697: PUSH
36698: LD_INT 33
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: PPUSH
36710: CALL_OW 72
36714: IFFALSE 36802
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36716: LD_ADDR_VAR 0 8
36720: PUSH
36721: LD_VAR 0 18
36725: PPUSH
36726: LD_INT 2
36728: PUSH
36729: LD_INT 30
36731: PUSH
36732: LD_INT 32
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 30
36741: PUSH
36742: LD_INT 33
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: LIST
36753: PPUSH
36754: CALL_OW 72
36758: PUSH
36759: FOR_IN
36760: IFFALSE 36800
// begin if not GetBWeapon ( i ) then
36762: LD_VAR 0 8
36766: PPUSH
36767: CALL_OW 269
36771: NOT
36772: IFFALSE 36798
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36774: LD_VAR 0 8
36778: PPUSH
36779: LD_VAR 0 8
36783: PPUSH
36784: LD_VAR 0 2
36788: PPUSH
36789: CALL 38048 0 2
36793: PPUSH
36794: CALL_OW 431
// end ;
36798: GO 36759
36800: POP
36801: POP
// end ; for i = 1 to personel do
36802: LD_ADDR_VAR 0 8
36806: PUSH
36807: DOUBLE
36808: LD_INT 1
36810: DEC
36811: ST_TO_ADDR
36812: LD_VAR 0 6
36816: PUSH
36817: FOR_TO
36818: IFFALSE 37882
// begin if i > 4 then
36820: LD_VAR 0 8
36824: PUSH
36825: LD_INT 4
36827: GREATER
36828: IFFALSE 36832
// break ;
36830: GO 37882
// case i of 1 :
36832: LD_VAR 0 8
36836: PUSH
36837: LD_INT 1
36839: DOUBLE
36840: EQUAL
36841: IFTRUE 36845
36843: GO 36925
36845: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36846: LD_ADDR_VAR 0 12
36850: PUSH
36851: LD_VAR 0 18
36855: PPUSH
36856: LD_INT 22
36858: PUSH
36859: LD_VAR 0 16
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 58
36870: PUSH
36871: EMPTY
36872: LIST
36873: PUSH
36874: LD_INT 2
36876: PUSH
36877: LD_INT 30
36879: PUSH
36880: LD_INT 32
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 30
36889: PUSH
36890: LD_INT 4
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 30
36899: PUSH
36900: LD_INT 5
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: LIST
36917: PPUSH
36918: CALL_OW 72
36922: ST_TO_ADDR
36923: GO 37147
36925: LD_INT 2
36927: DOUBLE
36928: EQUAL
36929: IFTRUE 36933
36931: GO 36995
36933: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36934: LD_ADDR_VAR 0 12
36938: PUSH
36939: LD_VAR 0 18
36943: PPUSH
36944: LD_INT 22
36946: PUSH
36947: LD_VAR 0 16
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 2
36958: PUSH
36959: LD_INT 30
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 30
36971: PUSH
36972: LD_INT 1
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PPUSH
36988: CALL_OW 72
36992: ST_TO_ADDR
36993: GO 37147
36995: LD_INT 3
36997: DOUBLE
36998: EQUAL
36999: IFTRUE 37003
37001: GO 37065
37003: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37004: LD_ADDR_VAR 0 12
37008: PUSH
37009: LD_VAR 0 18
37013: PPUSH
37014: LD_INT 22
37016: PUSH
37017: LD_VAR 0 16
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: LD_INT 30
37031: PUSH
37032: LD_INT 2
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 30
37041: PUSH
37042: LD_INT 3
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PPUSH
37058: CALL_OW 72
37062: ST_TO_ADDR
37063: GO 37147
37065: LD_INT 4
37067: DOUBLE
37068: EQUAL
37069: IFTRUE 37073
37071: GO 37146
37073: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37074: LD_ADDR_VAR 0 12
37078: PUSH
37079: LD_VAR 0 18
37083: PPUSH
37084: LD_INT 22
37086: PUSH
37087: LD_VAR 0 16
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 2
37098: PUSH
37099: LD_INT 30
37101: PUSH
37102: LD_INT 6
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 30
37111: PUSH
37112: LD_INT 7
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 30
37121: PUSH
37122: LD_INT 8
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PPUSH
37139: CALL_OW 72
37143: ST_TO_ADDR
37144: GO 37147
37146: POP
// if i = 1 then
37147: LD_VAR 0 8
37151: PUSH
37152: LD_INT 1
37154: EQUAL
37155: IFFALSE 37266
// begin tmp := [ ] ;
37157: LD_ADDR_VAR 0 19
37161: PUSH
37162: EMPTY
37163: ST_TO_ADDR
// for j in f do
37164: LD_ADDR_VAR 0 9
37168: PUSH
37169: LD_VAR 0 12
37173: PUSH
37174: FOR_IN
37175: IFFALSE 37248
// if GetBType ( j ) = b_bunker then
37177: LD_VAR 0 9
37181: PPUSH
37182: CALL_OW 266
37186: PUSH
37187: LD_INT 32
37189: EQUAL
37190: IFFALSE 37217
// tmp := Insert ( tmp , 1 , j ) else
37192: LD_ADDR_VAR 0 19
37196: PUSH
37197: LD_VAR 0 19
37201: PPUSH
37202: LD_INT 1
37204: PPUSH
37205: LD_VAR 0 9
37209: PPUSH
37210: CALL_OW 2
37214: ST_TO_ADDR
37215: GO 37246
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37217: LD_ADDR_VAR 0 19
37221: PUSH
37222: LD_VAR 0 19
37226: PPUSH
37227: LD_VAR 0 19
37231: PUSH
37232: LD_INT 1
37234: PLUS
37235: PPUSH
37236: LD_VAR 0 9
37240: PPUSH
37241: CALL_OW 2
37245: ST_TO_ADDR
37246: GO 37174
37248: POP
37249: POP
// if tmp then
37250: LD_VAR 0 19
37254: IFFALSE 37266
// f := tmp ;
37256: LD_ADDR_VAR 0 12
37260: PUSH
37261: LD_VAR 0 19
37265: ST_TO_ADDR
// end ; x := personel [ i ] ;
37266: LD_ADDR_VAR 0 13
37270: PUSH
37271: LD_VAR 0 6
37275: PUSH
37276: LD_VAR 0 8
37280: ARRAY
37281: ST_TO_ADDR
// if x = - 1 then
37282: LD_VAR 0 13
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: EQUAL
37291: IFFALSE 37500
// begin for j in f do
37293: LD_ADDR_VAR 0 9
37297: PUSH
37298: LD_VAR 0 12
37302: PUSH
37303: FOR_IN
37304: IFFALSE 37496
// repeat InitHc ;
37306: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37310: LD_VAR 0 9
37314: PPUSH
37315: CALL_OW 266
37319: PUSH
37320: LD_INT 5
37322: EQUAL
37323: IFFALSE 37393
// begin if UnitsInside ( j ) < 3 then
37325: LD_VAR 0 9
37329: PPUSH
37330: CALL_OW 313
37334: PUSH
37335: LD_INT 3
37337: LESS
37338: IFFALSE 37374
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37340: LD_INT 0
37342: PPUSH
37343: LD_INT 5
37345: PUSH
37346: LD_INT 8
37348: PUSH
37349: LD_INT 9
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: PUSH
37357: LD_VAR 0 17
37361: ARRAY
37362: PPUSH
37363: LD_VAR 0 4
37367: PPUSH
37368: CALL_OW 380
37372: GO 37391
// PrepareHuman ( false , i , skill ) ;
37374: LD_INT 0
37376: PPUSH
37377: LD_VAR 0 8
37381: PPUSH
37382: LD_VAR 0 4
37386: PPUSH
37387: CALL_OW 380
// end else
37391: GO 37410
// PrepareHuman ( false , i , skill ) ;
37393: LD_INT 0
37395: PPUSH
37396: LD_VAR 0 8
37400: PPUSH
37401: LD_VAR 0 4
37405: PPUSH
37406: CALL_OW 380
// un := CreateHuman ;
37410: LD_ADDR_VAR 0 14
37414: PUSH
37415: CALL_OW 44
37419: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37420: LD_ADDR_VAR 0 7
37424: PUSH
37425: LD_VAR 0 7
37429: PPUSH
37430: LD_INT 1
37432: PPUSH
37433: LD_VAR 0 14
37437: PPUSH
37438: CALL_OW 2
37442: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37443: LD_VAR 0 14
37447: PPUSH
37448: LD_VAR 0 9
37452: PPUSH
37453: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37457: LD_VAR 0 9
37461: PPUSH
37462: CALL_OW 313
37466: PUSH
37467: LD_INT 6
37469: EQUAL
37470: PUSH
37471: LD_VAR 0 9
37475: PPUSH
37476: CALL_OW 266
37480: PUSH
37481: LD_INT 32
37483: PUSH
37484: LD_INT 31
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: IN
37491: OR
37492: IFFALSE 37306
37494: GO 37303
37496: POP
37497: POP
// end else
37498: GO 37880
// for j = 1 to x do
37500: LD_ADDR_VAR 0 9
37504: PUSH
37505: DOUBLE
37506: LD_INT 1
37508: DEC
37509: ST_TO_ADDR
37510: LD_VAR 0 13
37514: PUSH
37515: FOR_TO
37516: IFFALSE 37878
// begin InitHc ;
37518: CALL_OW 19
// if not f then
37522: LD_VAR 0 12
37526: NOT
37527: IFFALSE 37616
// begin PrepareHuman ( false , i , skill ) ;
37529: LD_INT 0
37531: PPUSH
37532: LD_VAR 0 8
37536: PPUSH
37537: LD_VAR 0 4
37541: PPUSH
37542: CALL_OW 380
// un := CreateHuman ;
37546: LD_ADDR_VAR 0 14
37550: PUSH
37551: CALL_OW 44
37555: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37556: LD_ADDR_VAR 0 7
37560: PUSH
37561: LD_VAR 0 7
37565: PPUSH
37566: LD_INT 1
37568: PPUSH
37569: LD_VAR 0 14
37573: PPUSH
37574: CALL_OW 2
37578: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37579: LD_VAR 0 14
37583: PPUSH
37584: LD_VAR 0 1
37588: PPUSH
37589: CALL_OW 250
37593: PPUSH
37594: LD_VAR 0 1
37598: PPUSH
37599: CALL_OW 251
37603: PPUSH
37604: LD_INT 10
37606: PPUSH
37607: LD_INT 0
37609: PPUSH
37610: CALL_OW 50
// continue ;
37614: GO 37515
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37616: LD_VAR 0 12
37620: PUSH
37621: LD_INT 1
37623: ARRAY
37624: PPUSH
37625: CALL_OW 313
37629: PUSH
37630: LD_VAR 0 12
37634: PUSH
37635: LD_INT 1
37637: ARRAY
37638: PPUSH
37639: CALL_OW 266
37643: PUSH
37644: LD_INT 32
37646: PUSH
37647: LD_INT 31
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: IN
37654: AND
37655: PUSH
37656: LD_VAR 0 12
37660: PUSH
37661: LD_INT 1
37663: ARRAY
37664: PPUSH
37665: CALL_OW 313
37669: PUSH
37670: LD_INT 6
37672: EQUAL
37673: OR
37674: IFFALSE 37694
// f := Delete ( f , 1 ) ;
37676: LD_ADDR_VAR 0 12
37680: PUSH
37681: LD_VAR 0 12
37685: PPUSH
37686: LD_INT 1
37688: PPUSH
37689: CALL_OW 3
37693: ST_TO_ADDR
// if not f then
37694: LD_VAR 0 12
37698: NOT
37699: IFFALSE 37717
// begin x := x + 2 ;
37701: LD_ADDR_VAR 0 13
37705: PUSH
37706: LD_VAR 0 13
37710: PUSH
37711: LD_INT 2
37713: PLUS
37714: ST_TO_ADDR
// continue ;
37715: GO 37515
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37717: LD_VAR 0 12
37721: PUSH
37722: LD_INT 1
37724: ARRAY
37725: PPUSH
37726: CALL_OW 266
37730: PUSH
37731: LD_INT 5
37733: EQUAL
37734: IFFALSE 37808
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37736: LD_VAR 0 12
37740: PUSH
37741: LD_INT 1
37743: ARRAY
37744: PPUSH
37745: CALL_OW 313
37749: PUSH
37750: LD_INT 3
37752: LESS
37753: IFFALSE 37789
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37755: LD_INT 0
37757: PPUSH
37758: LD_INT 5
37760: PUSH
37761: LD_INT 8
37763: PUSH
37764: LD_INT 9
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: LIST
37771: PUSH
37772: LD_VAR 0 17
37776: ARRAY
37777: PPUSH
37778: LD_VAR 0 4
37782: PPUSH
37783: CALL_OW 380
37787: GO 37806
// PrepareHuman ( false , i , skill ) ;
37789: LD_INT 0
37791: PPUSH
37792: LD_VAR 0 8
37796: PPUSH
37797: LD_VAR 0 4
37801: PPUSH
37802: CALL_OW 380
// end else
37806: GO 37825
// PrepareHuman ( false , i , skill ) ;
37808: LD_INT 0
37810: PPUSH
37811: LD_VAR 0 8
37815: PPUSH
37816: LD_VAR 0 4
37820: PPUSH
37821: CALL_OW 380
// un := CreateHuman ;
37825: LD_ADDR_VAR 0 14
37829: PUSH
37830: CALL_OW 44
37834: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37835: LD_ADDR_VAR 0 7
37839: PUSH
37840: LD_VAR 0 7
37844: PPUSH
37845: LD_INT 1
37847: PPUSH
37848: LD_VAR 0 14
37852: PPUSH
37853: CALL_OW 2
37857: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37858: LD_VAR 0 14
37862: PPUSH
37863: LD_VAR 0 12
37867: PUSH
37868: LD_INT 1
37870: ARRAY
37871: PPUSH
37872: CALL_OW 52
// end ;
37876: GO 37515
37878: POP
37879: POP
// end ;
37880: GO 36817
37882: POP
37883: POP
// result := result ^ buildings ;
37884: LD_ADDR_VAR 0 7
37888: PUSH
37889: LD_VAR 0 7
37893: PUSH
37894: LD_VAR 0 18
37898: ADD
37899: ST_TO_ADDR
// end else
37900: GO 38043
// begin for i = 1 to personel do
37902: LD_ADDR_VAR 0 8
37906: PUSH
37907: DOUBLE
37908: LD_INT 1
37910: DEC
37911: ST_TO_ADDR
37912: LD_VAR 0 6
37916: PUSH
37917: FOR_TO
37918: IFFALSE 38041
// begin if i > 4 then
37920: LD_VAR 0 8
37924: PUSH
37925: LD_INT 4
37927: GREATER
37928: IFFALSE 37932
// break ;
37930: GO 38041
// x := personel [ i ] ;
37932: LD_ADDR_VAR 0 13
37936: PUSH
37937: LD_VAR 0 6
37941: PUSH
37942: LD_VAR 0 8
37946: ARRAY
37947: ST_TO_ADDR
// if x = - 1 then
37948: LD_VAR 0 13
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: EQUAL
37957: IFFALSE 37961
// continue ;
37959: GO 37917
// PrepareHuman ( false , i , skill ) ;
37961: LD_INT 0
37963: PPUSH
37964: LD_VAR 0 8
37968: PPUSH
37969: LD_VAR 0 4
37973: PPUSH
37974: CALL_OW 380
// un := CreateHuman ;
37978: LD_ADDR_VAR 0 14
37982: PUSH
37983: CALL_OW 44
37987: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37988: LD_VAR 0 14
37992: PPUSH
37993: LD_VAR 0 1
37997: PPUSH
37998: CALL_OW 250
38002: PPUSH
38003: LD_VAR 0 1
38007: PPUSH
38008: CALL_OW 251
38012: PPUSH
38013: LD_INT 10
38015: PPUSH
38016: LD_INT 0
38018: PPUSH
38019: CALL_OW 50
// result := result ^ un ;
38023: LD_ADDR_VAR 0 7
38027: PUSH
38028: LD_VAR 0 7
38032: PUSH
38033: LD_VAR 0 14
38037: ADD
38038: ST_TO_ADDR
// end ;
38039: GO 37917
38041: POP
38042: POP
// end ; end ;
38043: LD_VAR 0 7
38047: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38048: LD_INT 0
38050: PPUSH
38051: PPUSH
38052: PPUSH
38053: PPUSH
38054: PPUSH
38055: PPUSH
38056: PPUSH
38057: PPUSH
38058: PPUSH
38059: PPUSH
38060: PPUSH
38061: PPUSH
38062: PPUSH
38063: PPUSH
38064: PPUSH
38065: PPUSH
// result := false ;
38066: LD_ADDR_VAR 0 3
38070: PUSH
38071: LD_INT 0
38073: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38074: LD_VAR 0 1
38078: NOT
38079: PUSH
38080: LD_VAR 0 1
38084: PPUSH
38085: CALL_OW 266
38089: PUSH
38090: LD_INT 32
38092: PUSH
38093: LD_INT 33
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: IN
38100: NOT
38101: OR
38102: IFFALSE 38106
// exit ;
38104: GO 39215
// nat := GetNation ( tower ) ;
38106: LD_ADDR_VAR 0 12
38110: PUSH
38111: LD_VAR 0 1
38115: PPUSH
38116: CALL_OW 248
38120: ST_TO_ADDR
// side := GetSide ( tower ) ;
38121: LD_ADDR_VAR 0 16
38125: PUSH
38126: LD_VAR 0 1
38130: PPUSH
38131: CALL_OW 255
38135: ST_TO_ADDR
// x := GetX ( tower ) ;
38136: LD_ADDR_VAR 0 10
38140: PUSH
38141: LD_VAR 0 1
38145: PPUSH
38146: CALL_OW 250
38150: ST_TO_ADDR
// y := GetY ( tower ) ;
38151: LD_ADDR_VAR 0 11
38155: PUSH
38156: LD_VAR 0 1
38160: PPUSH
38161: CALL_OW 251
38165: ST_TO_ADDR
// if not x or not y then
38166: LD_VAR 0 10
38170: NOT
38171: PUSH
38172: LD_VAR 0 11
38176: NOT
38177: OR
38178: IFFALSE 38182
// exit ;
38180: GO 39215
// weapon := 0 ;
38182: LD_ADDR_VAR 0 18
38186: PUSH
38187: LD_INT 0
38189: ST_TO_ADDR
// fac_list := [ ] ;
38190: LD_ADDR_VAR 0 17
38194: PUSH
38195: EMPTY
38196: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38197: LD_ADDR_VAR 0 6
38201: PUSH
38202: LD_VAR 0 1
38206: PPUSH
38207: CALL_OW 274
38211: PPUSH
38212: LD_VAR 0 2
38216: PPUSH
38217: LD_INT 0
38219: PPUSH
38220: CALL 35786 0 3
38224: PPUSH
38225: LD_INT 30
38227: PUSH
38228: LD_INT 3
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PPUSH
38235: CALL_OW 72
38239: ST_TO_ADDR
// if not factories then
38240: LD_VAR 0 6
38244: NOT
38245: IFFALSE 38249
// exit ;
38247: GO 39215
// for i in factories do
38249: LD_ADDR_VAR 0 8
38253: PUSH
38254: LD_VAR 0 6
38258: PUSH
38259: FOR_IN
38260: IFFALSE 38285
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38262: LD_ADDR_VAR 0 17
38266: PUSH
38267: LD_VAR 0 17
38271: PUSH
38272: LD_VAR 0 8
38276: PPUSH
38277: CALL_OW 478
38281: UNION
38282: ST_TO_ADDR
38283: GO 38259
38285: POP
38286: POP
// if not fac_list then
38287: LD_VAR 0 17
38291: NOT
38292: IFFALSE 38296
// exit ;
38294: GO 39215
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38296: LD_ADDR_VAR 0 5
38300: PUSH
38301: LD_INT 4
38303: PUSH
38304: LD_INT 5
38306: PUSH
38307: LD_INT 9
38309: PUSH
38310: LD_INT 10
38312: PUSH
38313: LD_INT 6
38315: PUSH
38316: LD_INT 7
38318: PUSH
38319: LD_INT 11
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 27
38333: PUSH
38334: LD_INT 28
38336: PUSH
38337: LD_INT 26
38339: PUSH
38340: LD_INT 30
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 43
38351: PUSH
38352: LD_INT 44
38354: PUSH
38355: LD_INT 46
38357: PUSH
38358: LD_INT 45
38360: PUSH
38361: LD_INT 47
38363: PUSH
38364: LD_INT 49
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: LIST
38379: PUSH
38380: LD_VAR 0 12
38384: ARRAY
38385: ST_TO_ADDR
// list := list isect fac_list ;
38386: LD_ADDR_VAR 0 5
38390: PUSH
38391: LD_VAR 0 5
38395: PUSH
38396: LD_VAR 0 17
38400: ISECT
38401: ST_TO_ADDR
// if not list then
38402: LD_VAR 0 5
38406: NOT
38407: IFFALSE 38411
// exit ;
38409: GO 39215
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38411: LD_VAR 0 12
38415: PUSH
38416: LD_INT 3
38418: EQUAL
38419: PUSH
38420: LD_INT 49
38422: PUSH
38423: LD_VAR 0 5
38427: IN
38428: AND
38429: PUSH
38430: LD_INT 31
38432: PPUSH
38433: LD_VAR 0 16
38437: PPUSH
38438: CALL_OW 321
38442: PUSH
38443: LD_INT 2
38445: EQUAL
38446: AND
38447: IFFALSE 38507
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38449: LD_INT 22
38451: PUSH
38452: LD_VAR 0 16
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 35
38463: PUSH
38464: LD_INT 49
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 91
38473: PUSH
38474: LD_VAR 0 1
38478: PUSH
38479: LD_INT 10
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: LIST
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: PPUSH
38492: CALL_OW 69
38496: NOT
38497: IFFALSE 38507
// weapon := ru_time_lapser ;
38499: LD_ADDR_VAR 0 18
38503: PUSH
38504: LD_INT 49
38506: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38507: LD_VAR 0 12
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: LD_INT 2
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: IN
38522: PUSH
38523: LD_INT 11
38525: PUSH
38526: LD_VAR 0 5
38530: IN
38531: PUSH
38532: LD_INT 30
38534: PUSH
38535: LD_VAR 0 5
38539: IN
38540: OR
38541: AND
38542: PUSH
38543: LD_INT 6
38545: PPUSH
38546: LD_VAR 0 16
38550: PPUSH
38551: CALL_OW 321
38555: PUSH
38556: LD_INT 2
38558: EQUAL
38559: AND
38560: IFFALSE 38725
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38562: LD_INT 22
38564: PUSH
38565: LD_VAR 0 16
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: LD_INT 35
38579: PUSH
38580: LD_INT 11
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 35
38589: PUSH
38590: LD_INT 30
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 91
38604: PUSH
38605: LD_VAR 0 1
38609: PUSH
38610: LD_INT 18
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: PPUSH
38623: CALL_OW 69
38627: NOT
38628: PUSH
38629: LD_INT 22
38631: PUSH
38632: LD_VAR 0 16
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 2
38643: PUSH
38644: LD_INT 30
38646: PUSH
38647: LD_INT 32
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 30
38656: PUSH
38657: LD_INT 33
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 91
38671: PUSH
38672: LD_VAR 0 1
38676: PUSH
38677: LD_INT 12
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: LIST
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: LIST
38689: PUSH
38690: EMPTY
38691: LIST
38692: PPUSH
38693: CALL_OW 69
38697: PUSH
38698: LD_INT 2
38700: GREATER
38701: AND
38702: IFFALSE 38725
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38704: LD_ADDR_VAR 0 18
38708: PUSH
38709: LD_INT 11
38711: PUSH
38712: LD_INT 30
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_VAR 0 12
38723: ARRAY
38724: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38725: LD_VAR 0 18
38729: NOT
38730: PUSH
38731: LD_INT 40
38733: PPUSH
38734: LD_VAR 0 16
38738: PPUSH
38739: CALL_OW 321
38743: PUSH
38744: LD_INT 2
38746: EQUAL
38747: AND
38748: PUSH
38749: LD_INT 7
38751: PUSH
38752: LD_VAR 0 5
38756: IN
38757: PUSH
38758: LD_INT 28
38760: PUSH
38761: LD_VAR 0 5
38765: IN
38766: OR
38767: PUSH
38768: LD_INT 45
38770: PUSH
38771: LD_VAR 0 5
38775: IN
38776: OR
38777: AND
38778: IFFALSE 39032
// begin hex := GetHexInfo ( x , y ) ;
38780: LD_ADDR_VAR 0 4
38784: PUSH
38785: LD_VAR 0 10
38789: PPUSH
38790: LD_VAR 0 11
38794: PPUSH
38795: CALL_OW 546
38799: ST_TO_ADDR
// if hex [ 1 ] then
38800: LD_VAR 0 4
38804: PUSH
38805: LD_INT 1
38807: ARRAY
38808: IFFALSE 38812
// exit ;
38810: GO 39215
// height := hex [ 2 ] ;
38812: LD_ADDR_VAR 0 15
38816: PUSH
38817: LD_VAR 0 4
38821: PUSH
38822: LD_INT 2
38824: ARRAY
38825: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38826: LD_ADDR_VAR 0 14
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 2
38836: PUSH
38837: LD_INT 3
38839: PUSH
38840: LD_INT 5
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: ST_TO_ADDR
// for i in tmp do
38849: LD_ADDR_VAR 0 8
38853: PUSH
38854: LD_VAR 0 14
38858: PUSH
38859: FOR_IN
38860: IFFALSE 39030
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38862: LD_ADDR_VAR 0 9
38866: PUSH
38867: LD_VAR 0 10
38871: PPUSH
38872: LD_VAR 0 8
38876: PPUSH
38877: LD_INT 5
38879: PPUSH
38880: CALL_OW 272
38884: PUSH
38885: LD_VAR 0 11
38889: PPUSH
38890: LD_VAR 0 8
38894: PPUSH
38895: LD_INT 5
38897: PPUSH
38898: CALL_OW 273
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38907: LD_VAR 0 9
38911: PUSH
38912: LD_INT 1
38914: ARRAY
38915: PPUSH
38916: LD_VAR 0 9
38920: PUSH
38921: LD_INT 2
38923: ARRAY
38924: PPUSH
38925: CALL_OW 488
38929: IFFALSE 39028
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38931: LD_ADDR_VAR 0 4
38935: PUSH
38936: LD_VAR 0 9
38940: PUSH
38941: LD_INT 1
38943: ARRAY
38944: PPUSH
38945: LD_VAR 0 9
38949: PUSH
38950: LD_INT 2
38952: ARRAY
38953: PPUSH
38954: CALL_OW 546
38958: ST_TO_ADDR
// if hex [ 1 ] then
38959: LD_VAR 0 4
38963: PUSH
38964: LD_INT 1
38966: ARRAY
38967: IFFALSE 38971
// continue ;
38969: GO 38859
// h := hex [ 2 ] ;
38971: LD_ADDR_VAR 0 13
38975: PUSH
38976: LD_VAR 0 4
38980: PUSH
38981: LD_INT 2
38983: ARRAY
38984: ST_TO_ADDR
// if h + 7 < height then
38985: LD_VAR 0 13
38989: PUSH
38990: LD_INT 7
38992: PLUS
38993: PUSH
38994: LD_VAR 0 15
38998: LESS
38999: IFFALSE 39028
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39001: LD_ADDR_VAR 0 18
39005: PUSH
39006: LD_INT 7
39008: PUSH
39009: LD_INT 28
39011: PUSH
39012: LD_INT 45
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: LIST
39019: PUSH
39020: LD_VAR 0 12
39024: ARRAY
39025: ST_TO_ADDR
// break ;
39026: GO 39030
// end ; end ; end ;
39028: GO 38859
39030: POP
39031: POP
// end ; if not weapon then
39032: LD_VAR 0 18
39036: NOT
39037: IFFALSE 39097
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39039: LD_ADDR_VAR 0 5
39043: PUSH
39044: LD_VAR 0 5
39048: PUSH
39049: LD_INT 11
39051: PUSH
39052: LD_INT 30
39054: PUSH
39055: LD_INT 49
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: DIFF
39063: ST_TO_ADDR
// if not list then
39064: LD_VAR 0 5
39068: NOT
39069: IFFALSE 39073
// exit ;
39071: GO 39215
// weapon := list [ rand ( 1 , list ) ] ;
39073: LD_ADDR_VAR 0 18
39077: PUSH
39078: LD_VAR 0 5
39082: PUSH
39083: LD_INT 1
39085: PPUSH
39086: LD_VAR 0 5
39090: PPUSH
39091: CALL_OW 12
39095: ARRAY
39096: ST_TO_ADDR
// end ; if weapon then
39097: LD_VAR 0 18
39101: IFFALSE 39215
// begin tmp := CostOfWeapon ( weapon ) ;
39103: LD_ADDR_VAR 0 14
39107: PUSH
39108: LD_VAR 0 18
39112: PPUSH
39113: CALL_OW 451
39117: ST_TO_ADDR
// j := GetBase ( tower ) ;
39118: LD_ADDR_VAR 0 9
39122: PUSH
39123: LD_VAR 0 1
39127: PPUSH
39128: CALL_OW 274
39132: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39133: LD_VAR 0 9
39137: PPUSH
39138: LD_INT 1
39140: PPUSH
39141: CALL_OW 275
39145: PUSH
39146: LD_VAR 0 14
39150: PUSH
39151: LD_INT 1
39153: ARRAY
39154: GREATEREQUAL
39155: PUSH
39156: LD_VAR 0 9
39160: PPUSH
39161: LD_INT 2
39163: PPUSH
39164: CALL_OW 275
39168: PUSH
39169: LD_VAR 0 14
39173: PUSH
39174: LD_INT 2
39176: ARRAY
39177: GREATEREQUAL
39178: AND
39179: PUSH
39180: LD_VAR 0 9
39184: PPUSH
39185: LD_INT 3
39187: PPUSH
39188: CALL_OW 275
39192: PUSH
39193: LD_VAR 0 14
39197: PUSH
39198: LD_INT 3
39200: ARRAY
39201: GREATEREQUAL
39202: AND
39203: IFFALSE 39215
// result := weapon ;
39205: LD_ADDR_VAR 0 3
39209: PUSH
39210: LD_VAR 0 18
39214: ST_TO_ADDR
// end ; end ;
39215: LD_VAR 0 3
39219: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39220: LD_INT 0
39222: PPUSH
39223: PPUSH
// result := true ;
39224: LD_ADDR_VAR 0 3
39228: PUSH
39229: LD_INT 1
39231: ST_TO_ADDR
// if array1 = array2 then
39232: LD_VAR 0 1
39236: PUSH
39237: LD_VAR 0 2
39241: EQUAL
39242: IFFALSE 39302
// begin for i = 1 to array1 do
39244: LD_ADDR_VAR 0 4
39248: PUSH
39249: DOUBLE
39250: LD_INT 1
39252: DEC
39253: ST_TO_ADDR
39254: LD_VAR 0 1
39258: PUSH
39259: FOR_TO
39260: IFFALSE 39298
// if array1 [ i ] <> array2 [ i ] then
39262: LD_VAR 0 1
39266: PUSH
39267: LD_VAR 0 4
39271: ARRAY
39272: PUSH
39273: LD_VAR 0 2
39277: PUSH
39278: LD_VAR 0 4
39282: ARRAY
39283: NONEQUAL
39284: IFFALSE 39296
// begin result := false ;
39286: LD_ADDR_VAR 0 3
39290: PUSH
39291: LD_INT 0
39293: ST_TO_ADDR
// break ;
39294: GO 39298
// end ;
39296: GO 39259
39298: POP
39299: POP
// end else
39300: GO 39310
// result := false ;
39302: LD_ADDR_VAR 0 3
39306: PUSH
39307: LD_INT 0
39309: ST_TO_ADDR
// end ;
39310: LD_VAR 0 3
39314: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39315: LD_INT 0
39317: PPUSH
39318: PPUSH
// if not array1 or not array2 then
39319: LD_VAR 0 1
39323: NOT
39324: PUSH
39325: LD_VAR 0 2
39329: NOT
39330: OR
39331: IFFALSE 39335
// exit ;
39333: GO 39399
// result := true ;
39335: LD_ADDR_VAR 0 3
39339: PUSH
39340: LD_INT 1
39342: ST_TO_ADDR
// for i = 1 to array1 do
39343: LD_ADDR_VAR 0 4
39347: PUSH
39348: DOUBLE
39349: LD_INT 1
39351: DEC
39352: ST_TO_ADDR
39353: LD_VAR 0 1
39357: PUSH
39358: FOR_TO
39359: IFFALSE 39397
// if array1 [ i ] <> array2 [ i ] then
39361: LD_VAR 0 1
39365: PUSH
39366: LD_VAR 0 4
39370: ARRAY
39371: PUSH
39372: LD_VAR 0 2
39376: PUSH
39377: LD_VAR 0 4
39381: ARRAY
39382: NONEQUAL
39383: IFFALSE 39395
// begin result := false ;
39385: LD_ADDR_VAR 0 3
39389: PUSH
39390: LD_INT 0
39392: ST_TO_ADDR
// break ;
39393: GO 39397
// end ;
39395: GO 39358
39397: POP
39398: POP
// end ;
39399: LD_VAR 0 3
39403: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39404: LD_INT 0
39406: PPUSH
39407: PPUSH
39408: PPUSH
// pom := GetBase ( fac ) ;
39409: LD_ADDR_VAR 0 5
39413: PUSH
39414: LD_VAR 0 1
39418: PPUSH
39419: CALL_OW 274
39423: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39424: LD_ADDR_VAR 0 4
39428: PUSH
39429: LD_VAR 0 2
39433: PUSH
39434: LD_INT 1
39436: ARRAY
39437: PPUSH
39438: LD_VAR 0 2
39442: PUSH
39443: LD_INT 2
39445: ARRAY
39446: PPUSH
39447: LD_VAR 0 2
39451: PUSH
39452: LD_INT 3
39454: ARRAY
39455: PPUSH
39456: LD_VAR 0 2
39460: PUSH
39461: LD_INT 4
39463: ARRAY
39464: PPUSH
39465: CALL_OW 449
39469: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39470: LD_ADDR_VAR 0 3
39474: PUSH
39475: LD_VAR 0 5
39479: PPUSH
39480: LD_INT 1
39482: PPUSH
39483: CALL_OW 275
39487: PUSH
39488: LD_VAR 0 4
39492: PUSH
39493: LD_INT 1
39495: ARRAY
39496: GREATEREQUAL
39497: PUSH
39498: LD_VAR 0 5
39502: PPUSH
39503: LD_INT 2
39505: PPUSH
39506: CALL_OW 275
39510: PUSH
39511: LD_VAR 0 4
39515: PUSH
39516: LD_INT 2
39518: ARRAY
39519: GREATEREQUAL
39520: AND
39521: PUSH
39522: LD_VAR 0 5
39526: PPUSH
39527: LD_INT 3
39529: PPUSH
39530: CALL_OW 275
39534: PUSH
39535: LD_VAR 0 4
39539: PUSH
39540: LD_INT 3
39542: ARRAY
39543: GREATEREQUAL
39544: AND
39545: ST_TO_ADDR
// end ;
39546: LD_VAR 0 3
39550: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39551: LD_INT 0
39553: PPUSH
39554: PPUSH
39555: PPUSH
39556: PPUSH
// pom := GetBase ( building ) ;
39557: LD_ADDR_VAR 0 3
39561: PUSH
39562: LD_VAR 0 1
39566: PPUSH
39567: CALL_OW 274
39571: ST_TO_ADDR
// if not pom then
39572: LD_VAR 0 3
39576: NOT
39577: IFFALSE 39581
// exit ;
39579: GO 39751
// btype := GetBType ( building ) ;
39581: LD_ADDR_VAR 0 5
39585: PUSH
39586: LD_VAR 0 1
39590: PPUSH
39591: CALL_OW 266
39595: ST_TO_ADDR
// if btype = b_armoury then
39596: LD_VAR 0 5
39600: PUSH
39601: LD_INT 4
39603: EQUAL
39604: IFFALSE 39614
// btype := b_barracks ;
39606: LD_ADDR_VAR 0 5
39610: PUSH
39611: LD_INT 5
39613: ST_TO_ADDR
// if btype = b_depot then
39614: LD_VAR 0 5
39618: PUSH
39619: LD_INT 0
39621: EQUAL
39622: IFFALSE 39632
// btype := b_warehouse ;
39624: LD_ADDR_VAR 0 5
39628: PUSH
39629: LD_INT 1
39631: ST_TO_ADDR
// if btype = b_workshop then
39632: LD_VAR 0 5
39636: PUSH
39637: LD_INT 2
39639: EQUAL
39640: IFFALSE 39650
// btype := b_factory ;
39642: LD_ADDR_VAR 0 5
39646: PUSH
39647: LD_INT 3
39649: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39650: LD_ADDR_VAR 0 4
39654: PUSH
39655: LD_VAR 0 5
39659: PPUSH
39660: LD_VAR 0 1
39664: PPUSH
39665: CALL_OW 248
39669: PPUSH
39670: CALL_OW 450
39674: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39675: LD_ADDR_VAR 0 2
39679: PUSH
39680: LD_VAR 0 3
39684: PPUSH
39685: LD_INT 1
39687: PPUSH
39688: CALL_OW 275
39692: PUSH
39693: LD_VAR 0 4
39697: PUSH
39698: LD_INT 1
39700: ARRAY
39701: GREATEREQUAL
39702: PUSH
39703: LD_VAR 0 3
39707: PPUSH
39708: LD_INT 2
39710: PPUSH
39711: CALL_OW 275
39715: PUSH
39716: LD_VAR 0 4
39720: PUSH
39721: LD_INT 2
39723: ARRAY
39724: GREATEREQUAL
39725: AND
39726: PUSH
39727: LD_VAR 0 3
39731: PPUSH
39732: LD_INT 3
39734: PPUSH
39735: CALL_OW 275
39739: PUSH
39740: LD_VAR 0 4
39744: PUSH
39745: LD_INT 3
39747: ARRAY
39748: GREATEREQUAL
39749: AND
39750: ST_TO_ADDR
// end ;
39751: LD_VAR 0 2
39755: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39756: LD_INT 0
39758: PPUSH
39759: PPUSH
39760: PPUSH
// pom := GetBase ( building ) ;
39761: LD_ADDR_VAR 0 4
39765: PUSH
39766: LD_VAR 0 1
39770: PPUSH
39771: CALL_OW 274
39775: ST_TO_ADDR
// if not pom then
39776: LD_VAR 0 4
39780: NOT
39781: IFFALSE 39785
// exit ;
39783: GO 39886
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39785: LD_ADDR_VAR 0 5
39789: PUSH
39790: LD_VAR 0 2
39794: PPUSH
39795: LD_VAR 0 1
39799: PPUSH
39800: CALL_OW 248
39804: PPUSH
39805: CALL_OW 450
39809: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39810: LD_ADDR_VAR 0 3
39814: PUSH
39815: LD_VAR 0 4
39819: PPUSH
39820: LD_INT 1
39822: PPUSH
39823: CALL_OW 275
39827: PUSH
39828: LD_VAR 0 5
39832: PUSH
39833: LD_INT 1
39835: ARRAY
39836: GREATEREQUAL
39837: PUSH
39838: LD_VAR 0 4
39842: PPUSH
39843: LD_INT 2
39845: PPUSH
39846: CALL_OW 275
39850: PUSH
39851: LD_VAR 0 5
39855: PUSH
39856: LD_INT 2
39858: ARRAY
39859: GREATEREQUAL
39860: AND
39861: PUSH
39862: LD_VAR 0 4
39866: PPUSH
39867: LD_INT 3
39869: PPUSH
39870: CALL_OW 275
39874: PUSH
39875: LD_VAR 0 5
39879: PUSH
39880: LD_INT 3
39882: ARRAY
39883: GREATEREQUAL
39884: AND
39885: ST_TO_ADDR
// end ;
39886: LD_VAR 0 3
39890: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39891: LD_INT 0
39893: PPUSH
39894: PPUSH
39895: PPUSH
39896: PPUSH
39897: PPUSH
39898: PPUSH
39899: PPUSH
39900: PPUSH
39901: PPUSH
39902: PPUSH
39903: PPUSH
// result := false ;
39904: LD_ADDR_VAR 0 8
39908: PUSH
39909: LD_INT 0
39911: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39912: LD_VAR 0 5
39916: NOT
39917: PUSH
39918: LD_VAR 0 1
39922: NOT
39923: OR
39924: PUSH
39925: LD_VAR 0 2
39929: NOT
39930: OR
39931: PUSH
39932: LD_VAR 0 3
39936: NOT
39937: OR
39938: IFFALSE 39942
// exit ;
39940: GO 40756
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39942: LD_ADDR_VAR 0 14
39946: PUSH
39947: LD_VAR 0 1
39951: PPUSH
39952: LD_VAR 0 2
39956: PPUSH
39957: LD_VAR 0 3
39961: PPUSH
39962: LD_VAR 0 4
39966: PPUSH
39967: LD_VAR 0 5
39971: PUSH
39972: LD_INT 1
39974: ARRAY
39975: PPUSH
39976: CALL_OW 248
39980: PPUSH
39981: LD_INT 0
39983: PPUSH
39984: CALL 41993 0 6
39988: ST_TO_ADDR
// if not hexes then
39989: LD_VAR 0 14
39993: NOT
39994: IFFALSE 39998
// exit ;
39996: GO 40756
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39998: LD_ADDR_VAR 0 17
40002: PUSH
40003: LD_VAR 0 5
40007: PPUSH
40008: LD_INT 22
40010: PUSH
40011: LD_VAR 0 13
40015: PPUSH
40016: CALL_OW 255
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 2
40027: PUSH
40028: LD_INT 30
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 30
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PPUSH
40057: CALL_OW 72
40061: ST_TO_ADDR
// for i = 1 to hexes do
40062: LD_ADDR_VAR 0 9
40066: PUSH
40067: DOUBLE
40068: LD_INT 1
40070: DEC
40071: ST_TO_ADDR
40072: LD_VAR 0 14
40076: PUSH
40077: FOR_TO
40078: IFFALSE 40754
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40080: LD_ADDR_VAR 0 13
40084: PUSH
40085: LD_VAR 0 14
40089: PUSH
40090: LD_VAR 0 9
40094: ARRAY
40095: PUSH
40096: LD_INT 1
40098: ARRAY
40099: PPUSH
40100: LD_VAR 0 14
40104: PUSH
40105: LD_VAR 0 9
40109: ARRAY
40110: PUSH
40111: LD_INT 2
40113: ARRAY
40114: PPUSH
40115: CALL_OW 428
40119: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40120: LD_VAR 0 14
40124: PUSH
40125: LD_VAR 0 9
40129: ARRAY
40130: PUSH
40131: LD_INT 1
40133: ARRAY
40134: PPUSH
40135: LD_VAR 0 14
40139: PUSH
40140: LD_VAR 0 9
40144: ARRAY
40145: PUSH
40146: LD_INT 2
40148: ARRAY
40149: PPUSH
40150: CALL_OW 351
40154: PUSH
40155: LD_VAR 0 14
40159: PUSH
40160: LD_VAR 0 9
40164: ARRAY
40165: PUSH
40166: LD_INT 1
40168: ARRAY
40169: PPUSH
40170: LD_VAR 0 14
40174: PUSH
40175: LD_VAR 0 9
40179: ARRAY
40180: PUSH
40181: LD_INT 2
40183: ARRAY
40184: PPUSH
40185: CALL_OW 488
40189: NOT
40190: OR
40191: PUSH
40192: LD_VAR 0 13
40196: PPUSH
40197: CALL_OW 247
40201: PUSH
40202: LD_INT 3
40204: EQUAL
40205: OR
40206: IFFALSE 40212
// exit ;
40208: POP
40209: POP
40210: GO 40756
// if not tmp then
40212: LD_VAR 0 13
40216: NOT
40217: IFFALSE 40221
// continue ;
40219: GO 40077
// result := true ;
40221: LD_ADDR_VAR 0 8
40225: PUSH
40226: LD_INT 1
40228: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40229: LD_VAR 0 6
40233: PUSH
40234: LD_VAR 0 13
40238: PPUSH
40239: CALL_OW 247
40243: PUSH
40244: LD_INT 2
40246: EQUAL
40247: AND
40248: PUSH
40249: LD_VAR 0 13
40253: PPUSH
40254: CALL_OW 263
40258: PUSH
40259: LD_INT 1
40261: EQUAL
40262: AND
40263: IFFALSE 40427
// begin if IsDrivenBy ( tmp ) then
40265: LD_VAR 0 13
40269: PPUSH
40270: CALL_OW 311
40274: IFFALSE 40278
// continue ;
40276: GO 40077
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40278: LD_VAR 0 6
40282: PPUSH
40283: LD_INT 3
40285: PUSH
40286: LD_INT 60
40288: PUSH
40289: EMPTY
40290: LIST
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 3
40298: PUSH
40299: LD_INT 55
40301: PUSH
40302: EMPTY
40303: LIST
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PPUSH
40313: CALL_OW 72
40317: IFFALSE 40425
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40319: LD_ADDR_VAR 0 18
40323: PUSH
40324: LD_VAR 0 6
40328: PPUSH
40329: LD_INT 3
40331: PUSH
40332: LD_INT 60
40334: PUSH
40335: EMPTY
40336: LIST
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 3
40344: PUSH
40345: LD_INT 55
40347: PUSH
40348: EMPTY
40349: LIST
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PPUSH
40359: CALL_OW 72
40363: PUSH
40364: LD_INT 1
40366: ARRAY
40367: ST_TO_ADDR
// if IsInUnit ( driver ) then
40368: LD_VAR 0 18
40372: PPUSH
40373: CALL_OW 310
40377: IFFALSE 40388
// ComExit ( driver ) ;
40379: LD_VAR 0 18
40383: PPUSH
40384: CALL 65177 0 1
// AddComEnterUnit ( driver , tmp ) ;
40388: LD_VAR 0 18
40392: PPUSH
40393: LD_VAR 0 13
40397: PPUSH
40398: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40402: LD_VAR 0 18
40406: PPUSH
40407: LD_VAR 0 7
40411: PPUSH
40412: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40416: LD_VAR 0 18
40420: PPUSH
40421: CALL_OW 181
// end ; continue ;
40425: GO 40077
// end ; if not cleaners or not tmp in cleaners then
40427: LD_VAR 0 6
40431: NOT
40432: PUSH
40433: LD_VAR 0 13
40437: PUSH
40438: LD_VAR 0 6
40442: IN
40443: NOT
40444: OR
40445: IFFALSE 40752
// begin if dep then
40447: LD_VAR 0 17
40451: IFFALSE 40587
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40453: LD_ADDR_VAR 0 16
40457: PUSH
40458: LD_VAR 0 17
40462: PUSH
40463: LD_INT 1
40465: ARRAY
40466: PPUSH
40467: CALL_OW 250
40471: PPUSH
40472: LD_VAR 0 17
40476: PUSH
40477: LD_INT 1
40479: ARRAY
40480: PPUSH
40481: CALL_OW 254
40485: PPUSH
40486: LD_INT 5
40488: PPUSH
40489: CALL_OW 272
40493: PUSH
40494: LD_VAR 0 17
40498: PUSH
40499: LD_INT 1
40501: ARRAY
40502: PPUSH
40503: CALL_OW 251
40507: PPUSH
40508: LD_VAR 0 17
40512: PUSH
40513: LD_INT 1
40515: ARRAY
40516: PPUSH
40517: CALL_OW 254
40521: PPUSH
40522: LD_INT 5
40524: PPUSH
40525: CALL_OW 273
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40534: LD_VAR 0 16
40538: PUSH
40539: LD_INT 1
40541: ARRAY
40542: PPUSH
40543: LD_VAR 0 16
40547: PUSH
40548: LD_INT 2
40550: ARRAY
40551: PPUSH
40552: CALL_OW 488
40556: IFFALSE 40587
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40558: LD_VAR 0 13
40562: PPUSH
40563: LD_VAR 0 16
40567: PUSH
40568: LD_INT 1
40570: ARRAY
40571: PPUSH
40572: LD_VAR 0 16
40576: PUSH
40577: LD_INT 2
40579: ARRAY
40580: PPUSH
40581: CALL_OW 111
// continue ;
40585: GO 40077
// end ; end ; r := GetDir ( tmp ) ;
40587: LD_ADDR_VAR 0 15
40591: PUSH
40592: LD_VAR 0 13
40596: PPUSH
40597: CALL_OW 254
40601: ST_TO_ADDR
// if r = 5 then
40602: LD_VAR 0 15
40606: PUSH
40607: LD_INT 5
40609: EQUAL
40610: IFFALSE 40620
// r := 0 ;
40612: LD_ADDR_VAR 0 15
40616: PUSH
40617: LD_INT 0
40619: ST_TO_ADDR
// for j = r to 5 do
40620: LD_ADDR_VAR 0 10
40624: PUSH
40625: DOUBLE
40626: LD_VAR 0 15
40630: DEC
40631: ST_TO_ADDR
40632: LD_INT 5
40634: PUSH
40635: FOR_TO
40636: IFFALSE 40750
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40638: LD_ADDR_VAR 0 11
40642: PUSH
40643: LD_VAR 0 13
40647: PPUSH
40648: CALL_OW 250
40652: PPUSH
40653: LD_VAR 0 10
40657: PPUSH
40658: LD_INT 2
40660: PPUSH
40661: CALL_OW 272
40665: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40666: LD_ADDR_VAR 0 12
40670: PUSH
40671: LD_VAR 0 13
40675: PPUSH
40676: CALL_OW 251
40680: PPUSH
40681: LD_VAR 0 10
40685: PPUSH
40686: LD_INT 2
40688: PPUSH
40689: CALL_OW 273
40693: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40694: LD_VAR 0 11
40698: PPUSH
40699: LD_VAR 0 12
40703: PPUSH
40704: CALL_OW 488
40708: PUSH
40709: LD_VAR 0 11
40713: PPUSH
40714: LD_VAR 0 12
40718: PPUSH
40719: CALL_OW 428
40723: NOT
40724: AND
40725: IFFALSE 40748
// begin ComMoveXY ( tmp , _x , _y ) ;
40727: LD_VAR 0 13
40731: PPUSH
40732: LD_VAR 0 11
40736: PPUSH
40737: LD_VAR 0 12
40741: PPUSH
40742: CALL_OW 111
// break ;
40746: GO 40750
// end ; end ;
40748: GO 40635
40750: POP
40751: POP
// end ; end ;
40752: GO 40077
40754: POP
40755: POP
// end ;
40756: LD_VAR 0 8
40760: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40761: LD_INT 0
40763: PPUSH
// result := true ;
40764: LD_ADDR_VAR 0 3
40768: PUSH
40769: LD_INT 1
40771: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40772: LD_VAR 0 2
40776: PUSH
40777: LD_INT 24
40779: DOUBLE
40780: EQUAL
40781: IFTRUE 40791
40783: LD_INT 33
40785: DOUBLE
40786: EQUAL
40787: IFTRUE 40791
40789: GO 40816
40791: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40792: LD_ADDR_VAR 0 3
40796: PUSH
40797: LD_INT 32
40799: PPUSH
40800: LD_VAR 0 1
40804: PPUSH
40805: CALL_OW 321
40809: PUSH
40810: LD_INT 2
40812: EQUAL
40813: ST_TO_ADDR
40814: GO 41136
40816: LD_INT 20
40818: DOUBLE
40819: EQUAL
40820: IFTRUE 40824
40822: GO 40849
40824: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40825: LD_ADDR_VAR 0 3
40829: PUSH
40830: LD_INT 6
40832: PPUSH
40833: LD_VAR 0 1
40837: PPUSH
40838: CALL_OW 321
40842: PUSH
40843: LD_INT 2
40845: EQUAL
40846: ST_TO_ADDR
40847: GO 41136
40849: LD_INT 22
40851: DOUBLE
40852: EQUAL
40853: IFTRUE 40863
40855: LD_INT 36
40857: DOUBLE
40858: EQUAL
40859: IFTRUE 40863
40861: GO 40888
40863: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40864: LD_ADDR_VAR 0 3
40868: PUSH
40869: LD_INT 15
40871: PPUSH
40872: LD_VAR 0 1
40876: PPUSH
40877: CALL_OW 321
40881: PUSH
40882: LD_INT 2
40884: EQUAL
40885: ST_TO_ADDR
40886: GO 41136
40888: LD_INT 30
40890: DOUBLE
40891: EQUAL
40892: IFTRUE 40896
40894: GO 40921
40896: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40897: LD_ADDR_VAR 0 3
40901: PUSH
40902: LD_INT 20
40904: PPUSH
40905: LD_VAR 0 1
40909: PPUSH
40910: CALL_OW 321
40914: PUSH
40915: LD_INT 2
40917: EQUAL
40918: ST_TO_ADDR
40919: GO 41136
40921: LD_INT 28
40923: DOUBLE
40924: EQUAL
40925: IFTRUE 40935
40927: LD_INT 21
40929: DOUBLE
40930: EQUAL
40931: IFTRUE 40935
40933: GO 40960
40935: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40936: LD_ADDR_VAR 0 3
40940: PUSH
40941: LD_INT 21
40943: PPUSH
40944: LD_VAR 0 1
40948: PPUSH
40949: CALL_OW 321
40953: PUSH
40954: LD_INT 2
40956: EQUAL
40957: ST_TO_ADDR
40958: GO 41136
40960: LD_INT 16
40962: DOUBLE
40963: EQUAL
40964: IFTRUE 40968
40966: GO 40995
40968: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40969: LD_ADDR_VAR 0 3
40973: PUSH
40974: LD_EXP 31
40978: PPUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: CALL_OW 321
40988: PUSH
40989: LD_INT 2
40991: EQUAL
40992: ST_TO_ADDR
40993: GO 41136
40995: LD_INT 19
40997: DOUBLE
40998: EQUAL
40999: IFTRUE 41009
41001: LD_INT 23
41003: DOUBLE
41004: EQUAL
41005: IFTRUE 41009
41007: GO 41036
41009: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41010: LD_ADDR_VAR 0 3
41014: PUSH
41015: LD_EXP 30
41019: PPUSH
41020: LD_VAR 0 1
41024: PPUSH
41025: CALL_OW 321
41029: PUSH
41030: LD_INT 2
41032: EQUAL
41033: ST_TO_ADDR
41034: GO 41136
41036: LD_INT 17
41038: DOUBLE
41039: EQUAL
41040: IFTRUE 41044
41042: GO 41069
41044: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41045: LD_ADDR_VAR 0 3
41049: PUSH
41050: LD_INT 39
41052: PPUSH
41053: LD_VAR 0 1
41057: PPUSH
41058: CALL_OW 321
41062: PUSH
41063: LD_INT 2
41065: EQUAL
41066: ST_TO_ADDR
41067: GO 41136
41069: LD_INT 18
41071: DOUBLE
41072: EQUAL
41073: IFTRUE 41077
41075: GO 41102
41077: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41078: LD_ADDR_VAR 0 3
41082: PUSH
41083: LD_INT 40
41085: PPUSH
41086: LD_VAR 0 1
41090: PPUSH
41091: CALL_OW 321
41095: PUSH
41096: LD_INT 2
41098: EQUAL
41099: ST_TO_ADDR
41100: GO 41136
41102: LD_INT 27
41104: DOUBLE
41105: EQUAL
41106: IFTRUE 41110
41108: GO 41135
41110: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41111: LD_ADDR_VAR 0 3
41115: PUSH
41116: LD_INT 35
41118: PPUSH
41119: LD_VAR 0 1
41123: PPUSH
41124: CALL_OW 321
41128: PUSH
41129: LD_INT 2
41131: EQUAL
41132: ST_TO_ADDR
41133: GO 41136
41135: POP
// end ;
41136: LD_VAR 0 3
41140: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41141: LD_INT 0
41143: PPUSH
41144: PPUSH
41145: PPUSH
41146: PPUSH
41147: PPUSH
41148: PPUSH
41149: PPUSH
41150: PPUSH
41151: PPUSH
41152: PPUSH
41153: PPUSH
// result := false ;
41154: LD_ADDR_VAR 0 6
41158: PUSH
41159: LD_INT 0
41161: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41162: LD_VAR 0 1
41166: NOT
41167: PUSH
41168: LD_VAR 0 1
41172: PPUSH
41173: CALL_OW 266
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: IN
41188: NOT
41189: OR
41190: PUSH
41191: LD_VAR 0 2
41195: NOT
41196: OR
41197: PUSH
41198: LD_VAR 0 5
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: LD_INT 3
41214: PUSH
41215: LD_INT 4
41217: PUSH
41218: LD_INT 5
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: IN
41229: NOT
41230: OR
41231: PUSH
41232: LD_VAR 0 3
41236: PPUSH
41237: LD_VAR 0 4
41241: PPUSH
41242: CALL_OW 488
41246: NOT
41247: OR
41248: IFFALSE 41252
// exit ;
41250: GO 41988
// side := GetSide ( depot ) ;
41252: LD_ADDR_VAR 0 9
41256: PUSH
41257: LD_VAR 0 1
41261: PPUSH
41262: CALL_OW 255
41266: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41267: LD_VAR 0 9
41271: PPUSH
41272: LD_VAR 0 2
41276: PPUSH
41277: CALL 40761 0 2
41281: NOT
41282: IFFALSE 41286
// exit ;
41284: GO 41988
// pom := GetBase ( depot ) ;
41286: LD_ADDR_VAR 0 10
41290: PUSH
41291: LD_VAR 0 1
41295: PPUSH
41296: CALL_OW 274
41300: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41301: LD_ADDR_VAR 0 11
41305: PUSH
41306: LD_VAR 0 2
41310: PPUSH
41311: LD_VAR 0 1
41315: PPUSH
41316: CALL_OW 248
41320: PPUSH
41321: CALL_OW 450
41325: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41326: LD_VAR 0 10
41330: PPUSH
41331: LD_INT 1
41333: PPUSH
41334: CALL_OW 275
41338: PUSH
41339: LD_VAR 0 11
41343: PUSH
41344: LD_INT 1
41346: ARRAY
41347: GREATEREQUAL
41348: PUSH
41349: LD_VAR 0 10
41353: PPUSH
41354: LD_INT 2
41356: PPUSH
41357: CALL_OW 275
41361: PUSH
41362: LD_VAR 0 11
41366: PUSH
41367: LD_INT 2
41369: ARRAY
41370: GREATEREQUAL
41371: AND
41372: PUSH
41373: LD_VAR 0 10
41377: PPUSH
41378: LD_INT 3
41380: PPUSH
41381: CALL_OW 275
41385: PUSH
41386: LD_VAR 0 11
41390: PUSH
41391: LD_INT 3
41393: ARRAY
41394: GREATEREQUAL
41395: AND
41396: NOT
41397: IFFALSE 41401
// exit ;
41399: GO 41988
// if GetBType ( depot ) = b_depot then
41401: LD_VAR 0 1
41405: PPUSH
41406: CALL_OW 266
41410: PUSH
41411: LD_INT 0
41413: EQUAL
41414: IFFALSE 41426
// dist := 28 else
41416: LD_ADDR_VAR 0 14
41420: PUSH
41421: LD_INT 28
41423: ST_TO_ADDR
41424: GO 41434
// dist := 36 ;
41426: LD_ADDR_VAR 0 14
41430: PUSH
41431: LD_INT 36
41433: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41434: LD_VAR 0 1
41438: PPUSH
41439: LD_VAR 0 3
41443: PPUSH
41444: LD_VAR 0 4
41448: PPUSH
41449: CALL_OW 297
41453: PUSH
41454: LD_VAR 0 14
41458: GREATER
41459: IFFALSE 41463
// exit ;
41461: GO 41988
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41463: LD_ADDR_VAR 0 12
41467: PUSH
41468: LD_VAR 0 2
41472: PPUSH
41473: LD_VAR 0 3
41477: PPUSH
41478: LD_VAR 0 4
41482: PPUSH
41483: LD_VAR 0 5
41487: PPUSH
41488: LD_VAR 0 1
41492: PPUSH
41493: CALL_OW 248
41497: PPUSH
41498: LD_INT 0
41500: PPUSH
41501: CALL 41993 0 6
41505: ST_TO_ADDR
// if not hexes then
41506: LD_VAR 0 12
41510: NOT
41511: IFFALSE 41515
// exit ;
41513: GO 41988
// hex := GetHexInfo ( x , y ) ;
41515: LD_ADDR_VAR 0 15
41519: PUSH
41520: LD_VAR 0 3
41524: PPUSH
41525: LD_VAR 0 4
41529: PPUSH
41530: CALL_OW 546
41534: ST_TO_ADDR
// if hex [ 1 ] then
41535: LD_VAR 0 15
41539: PUSH
41540: LD_INT 1
41542: ARRAY
41543: IFFALSE 41547
// exit ;
41545: GO 41988
// height := hex [ 2 ] ;
41547: LD_ADDR_VAR 0 13
41551: PUSH
41552: LD_VAR 0 15
41556: PUSH
41557: LD_INT 2
41559: ARRAY
41560: ST_TO_ADDR
// for i = 1 to hexes do
41561: LD_ADDR_VAR 0 7
41565: PUSH
41566: DOUBLE
41567: LD_INT 1
41569: DEC
41570: ST_TO_ADDR
41571: LD_VAR 0 12
41575: PUSH
41576: FOR_TO
41577: IFFALSE 41907
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41579: LD_VAR 0 12
41583: PUSH
41584: LD_VAR 0 7
41588: ARRAY
41589: PUSH
41590: LD_INT 1
41592: ARRAY
41593: PPUSH
41594: LD_VAR 0 12
41598: PUSH
41599: LD_VAR 0 7
41603: ARRAY
41604: PUSH
41605: LD_INT 2
41607: ARRAY
41608: PPUSH
41609: CALL_OW 488
41613: NOT
41614: PUSH
41615: LD_VAR 0 12
41619: PUSH
41620: LD_VAR 0 7
41624: ARRAY
41625: PUSH
41626: LD_INT 1
41628: ARRAY
41629: PPUSH
41630: LD_VAR 0 12
41634: PUSH
41635: LD_VAR 0 7
41639: ARRAY
41640: PUSH
41641: LD_INT 2
41643: ARRAY
41644: PPUSH
41645: CALL_OW 428
41649: PUSH
41650: LD_INT 0
41652: GREATER
41653: OR
41654: PUSH
41655: LD_VAR 0 12
41659: PUSH
41660: LD_VAR 0 7
41664: ARRAY
41665: PUSH
41666: LD_INT 1
41668: ARRAY
41669: PPUSH
41670: LD_VAR 0 12
41674: PUSH
41675: LD_VAR 0 7
41679: ARRAY
41680: PUSH
41681: LD_INT 2
41683: ARRAY
41684: PPUSH
41685: CALL_OW 351
41689: OR
41690: IFFALSE 41696
// exit ;
41692: POP
41693: POP
41694: GO 41988
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41696: LD_ADDR_VAR 0 8
41700: PUSH
41701: LD_VAR 0 12
41705: PUSH
41706: LD_VAR 0 7
41710: ARRAY
41711: PUSH
41712: LD_INT 1
41714: ARRAY
41715: PPUSH
41716: LD_VAR 0 12
41720: PUSH
41721: LD_VAR 0 7
41725: ARRAY
41726: PUSH
41727: LD_INT 2
41729: ARRAY
41730: PPUSH
41731: CALL_OW 546
41735: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41736: LD_VAR 0 8
41740: PUSH
41741: LD_INT 1
41743: ARRAY
41744: PUSH
41745: LD_VAR 0 8
41749: PUSH
41750: LD_INT 2
41752: ARRAY
41753: PUSH
41754: LD_VAR 0 13
41758: PUSH
41759: LD_INT 2
41761: PLUS
41762: GREATER
41763: OR
41764: PUSH
41765: LD_VAR 0 8
41769: PUSH
41770: LD_INT 2
41772: ARRAY
41773: PUSH
41774: LD_VAR 0 13
41778: PUSH
41779: LD_INT 2
41781: MINUS
41782: LESS
41783: OR
41784: PUSH
41785: LD_VAR 0 8
41789: PUSH
41790: LD_INT 3
41792: ARRAY
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: LD_INT 8
41799: PUSH
41800: LD_INT 9
41802: PUSH
41803: LD_INT 10
41805: PUSH
41806: LD_INT 11
41808: PUSH
41809: LD_INT 12
41811: PUSH
41812: LD_INT 13
41814: PUSH
41815: LD_INT 16
41817: PUSH
41818: LD_INT 17
41820: PUSH
41821: LD_INT 18
41823: PUSH
41824: LD_INT 19
41826: PUSH
41827: LD_INT 20
41829: PUSH
41830: LD_INT 21
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: IN
41848: NOT
41849: OR
41850: PUSH
41851: LD_VAR 0 8
41855: PUSH
41856: LD_INT 5
41858: ARRAY
41859: NOT
41860: OR
41861: PUSH
41862: LD_VAR 0 8
41866: PUSH
41867: LD_INT 6
41869: ARRAY
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: LD_INT 7
41879: PUSH
41880: LD_INT 9
41882: PUSH
41883: LD_INT 10
41885: PUSH
41886: LD_INT 11
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: IN
41897: NOT
41898: OR
41899: IFFALSE 41905
// exit ;
41901: POP
41902: POP
41903: GO 41988
// end ;
41905: GO 41576
41907: POP
41908: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41909: LD_VAR 0 9
41913: PPUSH
41914: LD_VAR 0 3
41918: PPUSH
41919: LD_VAR 0 4
41923: PPUSH
41924: LD_INT 20
41926: PPUSH
41927: CALL 33934 0 4
41931: PUSH
41932: LD_INT 4
41934: ARRAY
41935: IFFALSE 41939
// exit ;
41937: GO 41988
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41939: LD_VAR 0 2
41943: PUSH
41944: LD_INT 29
41946: PUSH
41947: LD_INT 30
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: IN
41954: PUSH
41955: LD_VAR 0 3
41959: PPUSH
41960: LD_VAR 0 4
41964: PPUSH
41965: LD_VAR 0 9
41969: PPUSH
41970: CALL_OW 440
41974: NOT
41975: AND
41976: IFFALSE 41980
// exit ;
41978: GO 41988
// result := true ;
41980: LD_ADDR_VAR 0 6
41984: PUSH
41985: LD_INT 1
41987: ST_TO_ADDR
// end ;
41988: LD_VAR 0 6
41992: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41993: LD_INT 0
41995: PPUSH
41996: PPUSH
41997: PPUSH
41998: PPUSH
41999: PPUSH
42000: PPUSH
42001: PPUSH
42002: PPUSH
42003: PPUSH
42004: PPUSH
42005: PPUSH
42006: PPUSH
42007: PPUSH
42008: PPUSH
42009: PPUSH
42010: PPUSH
42011: PPUSH
42012: PPUSH
42013: PPUSH
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
42018: PPUSH
42019: PPUSH
42020: PPUSH
42021: PPUSH
42022: PPUSH
42023: PPUSH
42024: PPUSH
42025: PPUSH
42026: PPUSH
42027: PPUSH
42028: PPUSH
42029: PPUSH
42030: PPUSH
42031: PPUSH
42032: PPUSH
42033: PPUSH
42034: PPUSH
42035: PPUSH
42036: PPUSH
42037: PPUSH
42038: PPUSH
42039: PPUSH
42040: PPUSH
42041: PPUSH
42042: PPUSH
42043: PPUSH
42044: PPUSH
42045: PPUSH
42046: PPUSH
42047: PPUSH
42048: PPUSH
42049: PPUSH
42050: PPUSH
42051: PPUSH
42052: PPUSH
// result = [ ] ;
42053: LD_ADDR_VAR 0 7
42057: PUSH
42058: EMPTY
42059: ST_TO_ADDR
// temp_list = [ ] ;
42060: LD_ADDR_VAR 0 9
42064: PUSH
42065: EMPTY
42066: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42067: LD_VAR 0 4
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: LD_INT 3
42083: PUSH
42084: LD_INT 4
42086: PUSH
42087: LD_INT 5
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: IN
42098: NOT
42099: PUSH
42100: LD_VAR 0 1
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: IN
42115: PUSH
42116: LD_VAR 0 5
42120: PUSH
42121: LD_INT 1
42123: PUSH
42124: LD_INT 2
42126: PUSH
42127: LD_INT 3
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: LIST
42134: IN
42135: NOT
42136: AND
42137: OR
42138: IFFALSE 42142
// exit ;
42140: GO 60533
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42142: LD_VAR 0 1
42146: PUSH
42147: LD_INT 6
42149: PUSH
42150: LD_INT 7
42152: PUSH
42153: LD_INT 8
42155: PUSH
42156: LD_INT 13
42158: PUSH
42159: LD_INT 12
42161: PUSH
42162: LD_INT 15
42164: PUSH
42165: LD_INT 11
42167: PUSH
42168: LD_INT 14
42170: PUSH
42171: LD_INT 10
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: IN
42185: IFFALSE 42195
// btype = b_lab ;
42187: LD_ADDR_VAR 0 1
42191: PUSH
42192: LD_INT 6
42194: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42195: LD_VAR 0 6
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 2
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: IN
42214: NOT
42215: PUSH
42216: LD_VAR 0 1
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: LD_INT 2
42229: PUSH
42230: LD_INT 3
42232: PUSH
42233: LD_INT 6
42235: PUSH
42236: LD_INT 36
42238: PUSH
42239: LD_INT 4
42241: PUSH
42242: LD_INT 5
42244: PUSH
42245: LD_INT 31
42247: PUSH
42248: LD_INT 32
42250: PUSH
42251: LD_INT 33
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: IN
42267: NOT
42268: PUSH
42269: LD_VAR 0 6
42273: PUSH
42274: LD_INT 1
42276: EQUAL
42277: AND
42278: OR
42279: PUSH
42280: LD_VAR 0 1
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: LD_INT 3
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: IN
42295: NOT
42296: PUSH
42297: LD_VAR 0 6
42301: PUSH
42302: LD_INT 2
42304: EQUAL
42305: AND
42306: OR
42307: IFFALSE 42317
// mode = 0 ;
42309: LD_ADDR_VAR 0 6
42313: PUSH
42314: LD_INT 0
42316: ST_TO_ADDR
// case mode of 0 :
42317: LD_VAR 0 6
42321: PUSH
42322: LD_INT 0
42324: DOUBLE
42325: EQUAL
42326: IFTRUE 42330
42328: GO 53783
42330: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42331: LD_ADDR_VAR 0 11
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: LD_INT 2
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: LD_INT 2
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 1
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 3
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 3
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: LD_INT 2
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42524: LD_ADDR_VAR 0 12
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 1
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: NEG
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 2
42658: NEG
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 3
42681: NEG
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 3
42692: NEG
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42720: LD_ADDR_VAR 0 13
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 2
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 2
42843: NEG
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: LD_INT 2
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: NEG
42868: PUSH
42869: LD_INT 3
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 3
42879: NEG
42880: PUSH
42881: LD_INT 2
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 3
42891: NEG
42892: PUSH
42893: LD_INT 3
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42919: LD_ADDR_VAR 0 14
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: LD_INT 3
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 3
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43115: LD_ADDR_VAR 0 15
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: LD_INT 0
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 2
43238: NEG
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 3
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 3
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43308: LD_ADDR_VAR 0 16
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: NEG
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 2
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 2
43443: NEG
43444: PUSH
43445: LD_INT 2
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 3
43455: PUSH
43456: LD_INT 2
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 3
43465: PUSH
43466: LD_INT 3
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 2
43475: PUSH
43476: LD_INT 3
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43501: LD_ADDR_VAR 0 17
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: LD_INT 2
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 2
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: LD_INT 2
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: LD_INT 2
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 2
43677: NEG
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 2
43700: NEG
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43731: LD_ADDR_VAR 0 18
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: LD_INT 2
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 2
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: LD_INT 2
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: NEG
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 2
43918: NEG
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: NEG
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43961: LD_ADDR_VAR 0 19
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: LD_INT 2
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: LD_INT 2
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 2
44148: NEG
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 2
44160: NEG
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44191: LD_ADDR_VAR 0 20
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: LD_INT 2
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: LD_INT 2
44287: NEG
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 2
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 2
44378: NEG
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 2
44390: NEG
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44421: LD_ADDR_VAR 0 21
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44651: LD_ADDR_VAR 0 22
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 2
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 2
44838: NEG
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 2
44850: NEG
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44881: LD_ADDR_VAR 0 23
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: LD_INT 2
44966: NEG
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: LD_INT 2
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 2
45057: NEG
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: LD_INT 3
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: LD_INT 3
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 2
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45161: LD_ADDR_VAR 0 24
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: LD_INT 2
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 2
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 2
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 2
45348: NEG
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: LD_INT 2
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 2
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 3
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 3
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45437: LD_ADDR_VAR 0 25
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 3
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 3
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: LD_INT 3
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: LD_INT 3
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45711: LD_ADDR_VAR 0 26
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 2
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 2
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 2
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 2
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: LD_INT 2
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: LD_INT 3
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 3
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: LD_INT 2
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45987: LD_ADDR_VAR 0 27
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: LD_INT 2
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 3
46220: NEG
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 3
46232: NEG
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46267: LD_ADDR_VAR 0 28
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 2
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: LD_INT 3
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: LD_INT 3
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 3
46502: NEG
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 3
46514: NEG
46515: PUSH
46516: LD_INT 2
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46549: LD_ADDR_VAR 0 29
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: LD_INT 3
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 2
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 3
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 3
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 3
46793: NEG
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46828: LD_ADDR_VAR 0 30
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: LD_INT 2
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: LD_INT 3
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 3
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: LD_INT 3
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 3
47071: NEG
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47106: LD_ADDR_VAR 0 31
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: LD_INT 2
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 3
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 3
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 3
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 3
47349: NEG
47350: PUSH
47351: LD_INT 2
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47384: LD_ADDR_VAR 0 32
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 2
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: LD_INT 3
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: LD_INT 2
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 2
47606: PUSH
47607: LD_INT 3
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 3
47627: NEG
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47662: LD_ADDR_VAR 0 33
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: LD_INT 2
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 2
47817: NEG
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: NEG
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: LD_INT 3
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 2
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 3
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 3
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 3
47906: NEG
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47941: LD_ADDR_VAR 0 34
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: LD_INT 3
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 3
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: LD_INT 3
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: LD_INT 1
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 3
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48221: LD_ADDR_VAR 0 35
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48333: LD_ADDR_VAR 0 36
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48445: LD_ADDR_VAR 0 37
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48557: LD_ADDR_VAR 0 38
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48669: LD_ADDR_VAR 0 39
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48781: LD_ADDR_VAR 0 40
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48893: LD_ADDR_VAR 0 41
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: LD_INT 3
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 3
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 3
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 3
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 3
49136: PUSH
49137: LD_INT 3
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: LD_INT 3
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 3
49167: NEG
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 3
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 3
49190: NEG
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 3
49202: NEG
49203: PUSH
49204: LD_INT 3
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49243: LD_ADDR_VAR 0 42
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: LD_INT 2
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: LD_INT 3
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: LD_INT 3
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 3
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 3
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 3
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: LD_INT 3
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 3
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: LD_INT 3
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 3
49540: NEG
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 3
49552: NEG
49553: PUSH
49554: LD_INT 3
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49593: LD_ADDR_VAR 0 43
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 3
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 3
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: LD_INT 3
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: LD_INT 3
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 2
49878: NEG
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 3
49889: NEG
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49941: LD_ADDR_VAR 0 44
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 2
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 3
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 3
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 3
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 3
50184: PUSH
50185: LD_INT 3
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 3
50215: NEG
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 3
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 3
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 3
50250: NEG
50251: PUSH
50252: LD_INT 3
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50291: LD_ADDR_VAR 0 45
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 2
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 2
50457: NEG
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: LD_INT 3
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: LD_INT 3
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 3
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 3
50527: PUSH
50528: LD_INT 2
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 3
50537: PUSH
50538: LD_INT 3
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: LD_INT 3
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: LD_INT 3
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 3
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: LD_INT 2
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 3
50588: NEG
50589: PUSH
50590: LD_INT 2
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 3
50600: NEG
50601: PUSH
50602: LD_INT 3
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50641: LD_ADDR_VAR 0 46
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 2
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 2
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 2
50807: NEG
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: NEG
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: LD_INT 3
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 3
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 2
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 3
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 3
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 3
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 3
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 3
50937: NEG
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50989: LD_ADDR_VAR 0 47
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: LD_INT 2
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51140: LD_ADDR_VAR 0 48
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51287: LD_ADDR_VAR 0 49
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51431: LD_ADDR_VAR 0 50
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51575: LD_ADDR_VAR 0 51
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51722: LD_ADDR_VAR 0 52
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 2
51826: NEG
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51873: LD_ADDR_VAR 0 53
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 2
52049: NEG
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: LD_INT 2
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52103: LD_ADDR_VAR 0 54
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: LD_INT 2
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52333: LD_ADDR_VAR 0 55
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52563: LD_ADDR_VAR 0 56
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: NEG
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52793: LD_ADDR_VAR 0 57
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: NEG
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53023: LD_ADDR_VAR 0 58
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 2
53222: NEG
53223: PUSH
53224: LD_INT 2
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53253: LD_ADDR_VAR 0 59
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53341: LD_ADDR_VAR 0 60
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53429: LD_ADDR_VAR 0 61
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53517: LD_ADDR_VAR 0 62
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53605: LD_ADDR_VAR 0 63
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53693: LD_ADDR_VAR 0 64
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: ST_TO_ADDR
// end ; 1 :
53781: GO 59678
53783: LD_INT 1
53785: DOUBLE
53786: EQUAL
53787: IFTRUE 53791
53789: GO 56414
53791: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53792: LD_ADDR_VAR 0 11
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: LD_INT 3
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 3
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 2
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: LIST
53835: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53836: LD_ADDR_VAR 0 12
53840: PUSH
53841: LD_INT 2
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 3
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 3
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: LIST
53876: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53877: LD_ADDR_VAR 0 13
53881: PUSH
53882: LD_INT 3
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 3
53894: PUSH
53895: LD_INT 3
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: LD_INT 3
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: LIST
53916: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53917: LD_ADDR_VAR 0 14
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: LD_INT 3
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 3
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: LIST
53957: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53958: LD_ADDR_VAR 0 15
53962: PUSH
53963: LD_INT 2
53965: NEG
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: LD_INT 0
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 3
53987: NEG
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54002: LD_ADDR_VAR 0 16
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 3
54021: NEG
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 3
54033: NEG
54034: PUSH
54035: LD_INT 3
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: LIST
54047: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54048: LD_ADDR_VAR 0 17
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: LIST
54091: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54092: LD_ADDR_VAR 0 18
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 3
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54133: LD_ADDR_VAR 0 19
54137: PUSH
54138: LD_INT 3
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 3
54150: PUSH
54151: LD_INT 3
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: LD_INT 3
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: LIST
54172: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54173: LD_ADDR_VAR 0 20
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 3
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 3
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: LD_INT 2
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: LIST
54213: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54214: LD_ADDR_VAR 0 21
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 3
54232: NEG
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 3
54243: NEG
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: LIST
54257: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54258: LD_ADDR_VAR 0 22
54262: PUSH
54263: LD_INT 2
54265: NEG
54266: PUSH
54267: LD_INT 3
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 3
54277: NEG
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 3
54289: NEG
54290: PUSH
54291: LD_INT 3
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: LIST
54303: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54304: LD_ADDR_VAR 0 23
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: LD_INT 3
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 4
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 3
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: LIST
54347: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54348: LD_ADDR_VAR 0 24
54352: PUSH
54353: LD_INT 3
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 3
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 4
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: LIST
54388: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54389: LD_ADDR_VAR 0 25
54393: PUSH
54394: LD_INT 3
54396: PUSH
54397: LD_INT 3
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 4
54406: PUSH
54407: LD_INT 3
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 3
54416: PUSH
54417: LD_INT 4
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: LIST
54428: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54429: LD_ADDR_VAR 0 26
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 3
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 4
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: LD_INT 3
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: LIST
54469: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54470: LD_ADDR_VAR 0 27
54474: PUSH
54475: LD_INT 3
54477: NEG
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 3
54488: NEG
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 4
54499: NEG
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: LIST
54513: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54514: LD_ADDR_VAR 0 28
54518: PUSH
54519: LD_INT 3
54521: NEG
54522: PUSH
54523: LD_INT 3
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 3
54533: NEG
54534: PUSH
54535: LD_INT 4
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 4
54545: NEG
54546: PUSH
54547: LD_INT 3
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: LIST
54559: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54560: LD_ADDR_VAR 0 29
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: LD_INT 3
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 3
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 2
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: LD_INT 4
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 4
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 3
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: LD_INT 5
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 5
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: LD_INT 4
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 6
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 6
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 5
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54715: LD_ADDR_VAR 0 30
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 3
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 3
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 3
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 4
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 4
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 4
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 5
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 5
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 5
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 6
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 6
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54858: LD_ADDR_VAR 0 31
54862: PUSH
54863: LD_INT 3
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 3
54875: PUSH
54876: LD_INT 3
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: LD_INT 3
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 4
54895: PUSH
54896: LD_INT 3
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 4
54905: PUSH
54906: LD_INT 4
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: PUSH
54916: LD_INT 4
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 5
54925: PUSH
54926: LD_INT 4
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 5
54935: PUSH
54936: LD_INT 5
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 4
54945: PUSH
54946: LD_INT 5
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 6
54955: PUSH
54956: LD_INT 5
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 6
54965: PUSH
54966: LD_INT 6
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 5
54975: PUSH
54976: LD_INT 6
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54997: LD_ADDR_VAR 0 32
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 3
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 3
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 4
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 4
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 3
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: LD_INT 5
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 5
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: LD_INT 4
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: LD_INT 6
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: LD_INT 6
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: LD_INT 5
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55140: LD_ADDR_VAR 0 33
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 3
55169: NEG
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 3
55181: NEG
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 4
55192: NEG
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 4
55203: NEG
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 4
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 5
55226: NEG
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 5
55237: NEG
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 5
55249: NEG
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 6
55260: NEG
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 6
55271: NEG
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55295: LD_ADDR_VAR 0 34
55299: PUSH
55300: LD_INT 2
55302: NEG
55303: PUSH
55304: LD_INT 3
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 3
55314: NEG
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 3
55326: NEG
55327: PUSH
55328: LD_INT 3
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 3
55338: NEG
55339: PUSH
55340: LD_INT 4
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 4
55350: NEG
55351: PUSH
55352: LD_INT 3
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 4
55362: NEG
55363: PUSH
55364: LD_INT 4
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 4
55374: NEG
55375: PUSH
55376: LD_INT 5
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 5
55386: NEG
55387: PUSH
55388: LD_INT 4
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 5
55398: NEG
55399: PUSH
55400: LD_INT 5
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 5
55410: NEG
55411: PUSH
55412: LD_INT 6
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 6
55422: NEG
55423: PUSH
55424: LD_INT 5
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 6
55434: NEG
55435: PUSH
55436: LD_INT 6
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55458: LD_ADDR_VAR 0 41
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 2
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: LD_INT 3
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55502: LD_ADDR_VAR 0 42
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: LIST
55542: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55543: LD_ADDR_VAR 0 43
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: LD_INT 2
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 3
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: LD_INT 3
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: LIST
55582: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55583: LD_ADDR_VAR 0 44
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: LD_INT 3
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: LIST
55623: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55624: LD_ADDR_VAR 0 45
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 3
55653: NEG
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: LIST
55667: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55668: LD_ADDR_VAR 0 46
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: LD_INT 2
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: LD_INT 3
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 3
55699: NEG
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55714: LD_ADDR_VAR 0 47
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: LD_INT 3
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 3
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55747: LD_ADDR_VAR 0 48
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: LD_INT 2
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55778: LD_ADDR_VAR 0 49
55782: PUSH
55783: LD_INT 3
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 3
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55807: LD_ADDR_VAR 0 50
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: LD_INT 3
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 3
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55836: LD_ADDR_VAR 0 51
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 2
55854: NEG
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55867: LD_ADDR_VAR 0 52
55871: PUSH
55872: LD_INT 3
55874: NEG
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 3
55886: NEG
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55900: LD_ADDR_VAR 0 53
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 2
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: LIST
55943: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55944: LD_ADDR_VAR 0 54
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 3
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: LIST
55984: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55985: LD_ADDR_VAR 0 55
55989: PUSH
55990: LD_INT 3
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: PUSH
56003: LD_INT 3
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 2
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: LIST
56024: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56025: LD_ADDR_VAR 0 56
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 3
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 3
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 2
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: LIST
56065: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56066: LD_ADDR_VAR 0 57
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 3
56084: NEG
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 3
56095: NEG
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56110: LD_ADDR_VAR 0 58
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: LD_INT 3
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: LD_INT 2
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: LD_INT 3
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56156: LD_ADDR_VAR 0 59
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: LIST
56199: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56200: LD_ADDR_VAR 0 60
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: LIST
56240: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56241: LD_ADDR_VAR 0 61
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 2
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: LIST
56280: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56281: LD_ADDR_VAR 0 62
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: LD_INT 2
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56322: LD_ADDR_VAR 0 63
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: LIST
56365: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56366: LD_ADDR_VAR 0 64
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: LD_INT 2
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: NEG
56398: PUSH
56399: LD_INT 2
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: LIST
56411: ST_TO_ADDR
// end ; 2 :
56412: GO 59678
56414: LD_INT 2
56416: DOUBLE
56417: EQUAL
56418: IFTRUE 56422
56420: GO 59677
56422: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56423: LD_ADDR_VAR 0 29
56427: PUSH
56428: LD_INT 4
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 4
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 5
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 5
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 4
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 3
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 3
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 3
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 5
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 3
56523: PUSH
56524: LD_INT 3
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 3
56533: PUSH
56534: LD_INT 2
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 4
56543: PUSH
56544: LD_INT 3
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 4
56553: PUSH
56554: LD_INT 4
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 3
56563: PUSH
56564: LD_INT 4
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: LD_INT 3
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: LD_INT 2
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 4
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 2
56603: PUSH
56604: LD_INT 4
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 4
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: LD_INT 4
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 5
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: LD_INT 5
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: LD_INT 4
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: LD_INT 3
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 2
56685: PUSH
56686: LD_INT 5
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: NEG
56696: PUSH
56697: LD_INT 3
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 3
56717: NEG
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 3
56751: NEG
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 4
56762: NEG
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 4
56773: NEG
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 4
56785: NEG
56786: PUSH
56787: LD_INT 2
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 2
56797: NEG
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 4
56808: NEG
56809: PUSH
56810: LD_INT 4
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 4
56820: NEG
56821: PUSH
56822: LD_INT 5
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 3
56832: NEG
56833: PUSH
56834: LD_INT 4
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 3
56844: NEG
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 4
56856: NEG
56857: PUSH
56858: LD_INT 3
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 5
56868: NEG
56869: PUSH
56870: LD_INT 4
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 5
56880: NEG
56881: PUSH
56882: LD_INT 5
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: NEG
56893: PUSH
56894: LD_INT 5
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 5
56904: NEG
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56961: LD_ADDR_VAR 0 30
56965: PUSH
56966: LD_INT 4
56968: PUSH
56969: LD_INT 4
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 4
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 5
56988: PUSH
56989: LD_INT 4
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 5
56998: PUSH
56999: LD_INT 5
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 4
57008: PUSH
57009: LD_INT 5
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 3
57018: PUSH
57019: LD_INT 4
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 3
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 5
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: LD_INT 5
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 2
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: LD_INT 3
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 4
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 4
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: LD_INT 3
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: LD_INT 4
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 4
57151: NEG
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 4
57162: NEG
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 3
57174: NEG
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 4
57196: NEG
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 5
57207: NEG
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 5
57218: NEG
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 5
57230: NEG
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 3
57242: NEG
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 3
57253: NEG
57254: PUSH
57255: LD_INT 3
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 3
57265: NEG
57266: PUSH
57267: LD_INT 4
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: LD_INT 3
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 3
57301: NEG
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 4
57313: NEG
57314: PUSH
57315: LD_INT 3
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 4
57325: NEG
57326: PUSH
57327: LD_INT 4
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: LD_INT 4
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 4
57349: NEG
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 4
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: LD_INT 5
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: LD_INT 4
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: LD_INT 3
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 3
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 4
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: LD_INT 5
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: LD_INT 3
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 2
57451: NEG
57452: PUSH
57453: LD_INT 5
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57508: LD_ADDR_VAR 0 31
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 4
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: LD_INT 3
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: LD_INT 4
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 5
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 5
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: LD_INT 4
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 3
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: LD_INT 5
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 2
57597: NEG
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 3
57608: NEG
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 3
57619: NEG
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 3
57653: NEG
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 4
57664: NEG
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 4
57675: NEG
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 4
57687: NEG
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: NEG
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 4
57710: NEG
57711: PUSH
57712: LD_INT 4
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 4
57722: NEG
57723: PUSH
57724: LD_INT 5
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: LD_INT 4
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: LD_INT 3
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 4
57758: NEG
57759: PUSH
57760: LD_INT 3
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 5
57770: NEG
57771: PUSH
57772: LD_INT 4
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 5
57782: NEG
57783: PUSH
57784: LD_INT 5
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 3
57794: NEG
57795: PUSH
57796: LD_INT 5
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 5
57806: NEG
57807: PUSH
57808: LD_INT 3
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 3
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: LD_INT 4
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: LD_INT 3
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: LD_INT 3
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: NEG
57886: PUSH
57887: LD_INT 4
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: LD_INT 2
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: NEG
57909: PUSH
57910: LD_INT 4
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 4
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 4
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 5
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 5
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 4
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 3
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 3
57992: PUSH
57993: LD_INT 2
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 5
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58058: LD_ADDR_VAR 0 32
58062: PUSH
58063: LD_INT 4
58065: NEG
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 4
58076: NEG
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 3
58099: NEG
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 4
58110: NEG
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 5
58121: NEG
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 5
58132: NEG
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 5
58144: NEG
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 3
58167: NEG
58168: PUSH
58169: LD_INT 3
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 3
58179: NEG
58180: PUSH
58181: LD_INT 4
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 2
58191: NEG
58192: PUSH
58193: LD_INT 3
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 2
58203: NEG
58204: PUSH
58205: LD_INT 2
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 3
58215: NEG
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 4
58227: NEG
58228: PUSH
58229: LD_INT 3
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 4
58239: NEG
58240: PUSH
58241: LD_INT 4
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 2
58251: NEG
58252: PUSH
58253: LD_INT 4
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 4
58263: NEG
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: LD_INT 4
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 5
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: LD_INT 4
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: LD_INT 3
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 4
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: LD_INT 5
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: LD_INT 3
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: NEG
58366: PUSH
58367: LD_INT 5
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 3
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 4
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 4
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 3
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 4
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 4
58470: PUSH
58471: LD_INT 4
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 4
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 5
58490: PUSH
58491: LD_INT 4
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 5
58500: PUSH
58501: LD_INT 5
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 4
58510: PUSH
58511: LD_INT 5
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 3
58520: PUSH
58521: LD_INT 4
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 3
58530: PUSH
58531: LD_INT 3
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 5
58540: PUSH
58541: LD_INT 3
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 3
58550: PUSH
58551: LD_INT 5
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58605: LD_ADDR_VAR 0 33
58609: PUSH
58610: LD_INT 4
58612: NEG
58613: PUSH
58614: LD_INT 4
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 4
58624: NEG
58625: PUSH
58626: LD_INT 5
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 3
58636: NEG
58637: PUSH
58638: LD_INT 4
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 3
58648: NEG
58649: PUSH
58650: LD_INT 3
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 4
58660: NEG
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 5
58672: NEG
58673: PUSH
58674: LD_INT 4
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 5
58684: NEG
58685: PUSH
58686: LD_INT 5
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 3
58696: NEG
58697: PUSH
58698: LD_INT 5
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 5
58708: NEG
58709: PUSH
58710: LD_INT 3
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 3
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: LD_INT 4
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: LD_INT 3
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 3
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: LD_INT 4
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: NEG
58811: PUSH
58812: LD_INT 4
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 4
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 4
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 5
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 5
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 4
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 3
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 3
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 3
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 5
58905: PUSH
58906: LD_INT 2
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 3
58915: PUSH
58916: LD_INT 3
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 3
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 4
58935: PUSH
58936: LD_INT 3
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 4
58945: PUSH
58946: LD_INT 4
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 3
58955: PUSH
58956: LD_INT 4
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: PUSH
58966: LD_INT 3
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 2
58975: PUSH
58976: LD_INT 2
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 4
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: LD_INT 4
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 4
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: LD_INT 3
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: LD_INT 4
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 5
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 5
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 4
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: LD_INT 3
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: LD_INT 5
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: NEG
59088: PUSH
59089: LD_INT 3
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59143: LD_ADDR_VAR 0 34
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 4
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: LD_INT 5
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: LD_INT 4
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: LD_INT 3
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: LD_INT 4
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: LD_INT 5
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: PUSH
59230: LD_INT 3
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: LD_INT 5
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 4
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 4
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 3
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 2
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 2
59324: PUSH
59325: LD_INT 2
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 4
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 4
59345: PUSH
59346: LD_INT 4
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 4
59355: PUSH
59356: LD_INT 3
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 5
59365: PUSH
59366: LD_INT 4
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 5
59375: PUSH
59376: LD_INT 5
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 4
59385: PUSH
59386: LD_INT 5
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 3
59395: PUSH
59396: LD_INT 4
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 3
59405: PUSH
59406: LD_INT 3
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 5
59415: PUSH
59416: LD_INT 3
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: LD_INT 5
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: LD_INT 3
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 2
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 3
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 4
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: LD_INT 4
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: LD_INT 3
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: LD_INT 4
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: NEG
59518: PUSH
59519: LD_INT 2
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 4
59528: NEG
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 4
59539: NEG
59540: PUSH
59541: LD_INT 1
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 3
59551: NEG
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 3
59562: NEG
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 4
59573: NEG
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 5
59584: NEG
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 5
59595: NEG
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 5
59607: NEG
59608: PUSH
59609: LD_INT 2
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 3
59619: NEG
59620: PUSH
59621: LD_INT 2
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: ST_TO_ADDR
// end ; end ;
59675: GO 59678
59677: POP
// case btype of b_depot , b_warehouse :
59678: LD_VAR 0 1
59682: PUSH
59683: LD_INT 0
59685: DOUBLE
59686: EQUAL
59687: IFTRUE 59697
59689: LD_INT 1
59691: DOUBLE
59692: EQUAL
59693: IFTRUE 59697
59695: GO 59898
59697: POP
// case nation of nation_american :
59698: LD_VAR 0 5
59702: PUSH
59703: LD_INT 1
59705: DOUBLE
59706: EQUAL
59707: IFTRUE 59711
59709: GO 59767
59711: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59712: LD_ADDR_VAR 0 9
59716: PUSH
59717: LD_VAR 0 11
59721: PUSH
59722: LD_VAR 0 12
59726: PUSH
59727: LD_VAR 0 13
59731: PUSH
59732: LD_VAR 0 14
59736: PUSH
59737: LD_VAR 0 15
59741: PUSH
59742: LD_VAR 0 16
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: PUSH
59755: LD_VAR 0 4
59759: PUSH
59760: LD_INT 1
59762: PLUS
59763: ARRAY
59764: ST_TO_ADDR
59765: GO 59896
59767: LD_INT 2
59769: DOUBLE
59770: EQUAL
59771: IFTRUE 59775
59773: GO 59831
59775: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59776: LD_ADDR_VAR 0 9
59780: PUSH
59781: LD_VAR 0 17
59785: PUSH
59786: LD_VAR 0 18
59790: PUSH
59791: LD_VAR 0 19
59795: PUSH
59796: LD_VAR 0 20
59800: PUSH
59801: LD_VAR 0 21
59805: PUSH
59806: LD_VAR 0 22
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: PUSH
59819: LD_VAR 0 4
59823: PUSH
59824: LD_INT 1
59826: PLUS
59827: ARRAY
59828: ST_TO_ADDR
59829: GO 59896
59831: LD_INT 3
59833: DOUBLE
59834: EQUAL
59835: IFTRUE 59839
59837: GO 59895
59839: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59840: LD_ADDR_VAR 0 9
59844: PUSH
59845: LD_VAR 0 23
59849: PUSH
59850: LD_VAR 0 24
59854: PUSH
59855: LD_VAR 0 25
59859: PUSH
59860: LD_VAR 0 26
59864: PUSH
59865: LD_VAR 0 27
59869: PUSH
59870: LD_VAR 0 28
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: PUSH
59883: LD_VAR 0 4
59887: PUSH
59888: LD_INT 1
59890: PLUS
59891: ARRAY
59892: ST_TO_ADDR
59893: GO 59896
59895: POP
59896: GO 60451
59898: LD_INT 2
59900: DOUBLE
59901: EQUAL
59902: IFTRUE 59912
59904: LD_INT 3
59906: DOUBLE
59907: EQUAL
59908: IFTRUE 59912
59910: GO 59968
59912: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59913: LD_ADDR_VAR 0 9
59917: PUSH
59918: LD_VAR 0 29
59922: PUSH
59923: LD_VAR 0 30
59927: PUSH
59928: LD_VAR 0 31
59932: PUSH
59933: LD_VAR 0 32
59937: PUSH
59938: LD_VAR 0 33
59942: PUSH
59943: LD_VAR 0 34
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: PUSH
59956: LD_VAR 0 4
59960: PUSH
59961: LD_INT 1
59963: PLUS
59964: ARRAY
59965: ST_TO_ADDR
59966: GO 60451
59968: LD_INT 16
59970: DOUBLE
59971: EQUAL
59972: IFTRUE 60030
59974: LD_INT 17
59976: DOUBLE
59977: EQUAL
59978: IFTRUE 60030
59980: LD_INT 18
59982: DOUBLE
59983: EQUAL
59984: IFTRUE 60030
59986: LD_INT 19
59988: DOUBLE
59989: EQUAL
59990: IFTRUE 60030
59992: LD_INT 22
59994: DOUBLE
59995: EQUAL
59996: IFTRUE 60030
59998: LD_INT 20
60000: DOUBLE
60001: EQUAL
60002: IFTRUE 60030
60004: LD_INT 21
60006: DOUBLE
60007: EQUAL
60008: IFTRUE 60030
60010: LD_INT 23
60012: DOUBLE
60013: EQUAL
60014: IFTRUE 60030
60016: LD_INT 24
60018: DOUBLE
60019: EQUAL
60020: IFTRUE 60030
60022: LD_INT 25
60024: DOUBLE
60025: EQUAL
60026: IFTRUE 60030
60028: GO 60086
60030: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60031: LD_ADDR_VAR 0 9
60035: PUSH
60036: LD_VAR 0 35
60040: PUSH
60041: LD_VAR 0 36
60045: PUSH
60046: LD_VAR 0 37
60050: PUSH
60051: LD_VAR 0 38
60055: PUSH
60056: LD_VAR 0 39
60060: PUSH
60061: LD_VAR 0 40
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: PUSH
60074: LD_VAR 0 4
60078: PUSH
60079: LD_INT 1
60081: PLUS
60082: ARRAY
60083: ST_TO_ADDR
60084: GO 60451
60086: LD_INT 6
60088: DOUBLE
60089: EQUAL
60090: IFTRUE 60142
60092: LD_INT 7
60094: DOUBLE
60095: EQUAL
60096: IFTRUE 60142
60098: LD_INT 8
60100: DOUBLE
60101: EQUAL
60102: IFTRUE 60142
60104: LD_INT 13
60106: DOUBLE
60107: EQUAL
60108: IFTRUE 60142
60110: LD_INT 12
60112: DOUBLE
60113: EQUAL
60114: IFTRUE 60142
60116: LD_INT 15
60118: DOUBLE
60119: EQUAL
60120: IFTRUE 60142
60122: LD_INT 11
60124: DOUBLE
60125: EQUAL
60126: IFTRUE 60142
60128: LD_INT 14
60130: DOUBLE
60131: EQUAL
60132: IFTRUE 60142
60134: LD_INT 10
60136: DOUBLE
60137: EQUAL
60138: IFTRUE 60142
60140: GO 60198
60142: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60143: LD_ADDR_VAR 0 9
60147: PUSH
60148: LD_VAR 0 41
60152: PUSH
60153: LD_VAR 0 42
60157: PUSH
60158: LD_VAR 0 43
60162: PUSH
60163: LD_VAR 0 44
60167: PUSH
60168: LD_VAR 0 45
60172: PUSH
60173: LD_VAR 0 46
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: PUSH
60186: LD_VAR 0 4
60190: PUSH
60191: LD_INT 1
60193: PLUS
60194: ARRAY
60195: ST_TO_ADDR
60196: GO 60451
60198: LD_INT 36
60200: DOUBLE
60201: EQUAL
60202: IFTRUE 60206
60204: GO 60262
60206: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60207: LD_ADDR_VAR 0 9
60211: PUSH
60212: LD_VAR 0 47
60216: PUSH
60217: LD_VAR 0 48
60221: PUSH
60222: LD_VAR 0 49
60226: PUSH
60227: LD_VAR 0 50
60231: PUSH
60232: LD_VAR 0 51
60236: PUSH
60237: LD_VAR 0 52
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: PUSH
60250: LD_VAR 0 4
60254: PUSH
60255: LD_INT 1
60257: PLUS
60258: ARRAY
60259: ST_TO_ADDR
60260: GO 60451
60262: LD_INT 4
60264: DOUBLE
60265: EQUAL
60266: IFTRUE 60288
60268: LD_INT 5
60270: DOUBLE
60271: EQUAL
60272: IFTRUE 60288
60274: LD_INT 34
60276: DOUBLE
60277: EQUAL
60278: IFTRUE 60288
60280: LD_INT 37
60282: DOUBLE
60283: EQUAL
60284: IFTRUE 60288
60286: GO 60344
60288: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60289: LD_ADDR_VAR 0 9
60293: PUSH
60294: LD_VAR 0 53
60298: PUSH
60299: LD_VAR 0 54
60303: PUSH
60304: LD_VAR 0 55
60308: PUSH
60309: LD_VAR 0 56
60313: PUSH
60314: LD_VAR 0 57
60318: PUSH
60319: LD_VAR 0 58
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: PUSH
60332: LD_VAR 0 4
60336: PUSH
60337: LD_INT 1
60339: PLUS
60340: ARRAY
60341: ST_TO_ADDR
60342: GO 60451
60344: LD_INT 31
60346: DOUBLE
60347: EQUAL
60348: IFTRUE 60394
60350: LD_INT 32
60352: DOUBLE
60353: EQUAL
60354: IFTRUE 60394
60356: LD_INT 33
60358: DOUBLE
60359: EQUAL
60360: IFTRUE 60394
60362: LD_INT 27
60364: DOUBLE
60365: EQUAL
60366: IFTRUE 60394
60368: LD_INT 26
60370: DOUBLE
60371: EQUAL
60372: IFTRUE 60394
60374: LD_INT 28
60376: DOUBLE
60377: EQUAL
60378: IFTRUE 60394
60380: LD_INT 29
60382: DOUBLE
60383: EQUAL
60384: IFTRUE 60394
60386: LD_INT 30
60388: DOUBLE
60389: EQUAL
60390: IFTRUE 60394
60392: GO 60450
60394: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60395: LD_ADDR_VAR 0 9
60399: PUSH
60400: LD_VAR 0 59
60404: PUSH
60405: LD_VAR 0 60
60409: PUSH
60410: LD_VAR 0 61
60414: PUSH
60415: LD_VAR 0 62
60419: PUSH
60420: LD_VAR 0 63
60424: PUSH
60425: LD_VAR 0 64
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: PUSH
60438: LD_VAR 0 4
60442: PUSH
60443: LD_INT 1
60445: PLUS
60446: ARRAY
60447: ST_TO_ADDR
60448: GO 60451
60450: POP
// temp_list2 = [ ] ;
60451: LD_ADDR_VAR 0 10
60455: PUSH
60456: EMPTY
60457: ST_TO_ADDR
// for i in temp_list do
60458: LD_ADDR_VAR 0 8
60462: PUSH
60463: LD_VAR 0 9
60467: PUSH
60468: FOR_IN
60469: IFFALSE 60521
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60471: LD_ADDR_VAR 0 10
60475: PUSH
60476: LD_VAR 0 10
60480: PUSH
60481: LD_VAR 0 8
60485: PUSH
60486: LD_INT 1
60488: ARRAY
60489: PUSH
60490: LD_VAR 0 2
60494: PLUS
60495: PUSH
60496: LD_VAR 0 8
60500: PUSH
60501: LD_INT 2
60503: ARRAY
60504: PUSH
60505: LD_VAR 0 3
60509: PLUS
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: EMPTY
60516: LIST
60517: ADD
60518: ST_TO_ADDR
60519: GO 60468
60521: POP
60522: POP
// result = temp_list2 ;
60523: LD_ADDR_VAR 0 7
60527: PUSH
60528: LD_VAR 0 10
60532: ST_TO_ADDR
// end ;
60533: LD_VAR 0 7
60537: RET
// export function EnemyInRange ( unit , dist ) ; begin
60538: LD_INT 0
60540: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60541: LD_ADDR_VAR 0 3
60545: PUSH
60546: LD_VAR 0 1
60550: PPUSH
60551: CALL_OW 255
60555: PPUSH
60556: LD_VAR 0 1
60560: PPUSH
60561: CALL_OW 250
60565: PPUSH
60566: LD_VAR 0 1
60570: PPUSH
60571: CALL_OW 251
60575: PPUSH
60576: LD_VAR 0 2
60580: PPUSH
60581: CALL 33934 0 4
60585: PUSH
60586: LD_INT 4
60588: ARRAY
60589: ST_TO_ADDR
// end ;
60590: LD_VAR 0 3
60594: RET
// export function PlayerSeeMe ( unit ) ; begin
60595: LD_INT 0
60597: PPUSH
// result := See ( your_side , unit ) ;
60598: LD_ADDR_VAR 0 2
60602: PUSH
60603: LD_OWVAR 2
60607: PPUSH
60608: LD_VAR 0 1
60612: PPUSH
60613: CALL_OW 292
60617: ST_TO_ADDR
// end ;
60618: LD_VAR 0 2
60622: RET
// export function ReverseDir ( unit ) ; begin
60623: LD_INT 0
60625: PPUSH
// if not unit then
60626: LD_VAR 0 1
60630: NOT
60631: IFFALSE 60635
// exit ;
60633: GO 60658
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60635: LD_ADDR_VAR 0 2
60639: PUSH
60640: LD_VAR 0 1
60644: PPUSH
60645: CALL_OW 254
60649: PUSH
60650: LD_INT 3
60652: PLUS
60653: PUSH
60654: LD_INT 6
60656: MOD
60657: ST_TO_ADDR
// end ;
60658: LD_VAR 0 2
60662: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60663: LD_INT 0
60665: PPUSH
60666: PPUSH
60667: PPUSH
60668: PPUSH
60669: PPUSH
// if not hexes then
60670: LD_VAR 0 2
60674: NOT
60675: IFFALSE 60679
// exit ;
60677: GO 60827
// dist := 9999 ;
60679: LD_ADDR_VAR 0 5
60683: PUSH
60684: LD_INT 9999
60686: ST_TO_ADDR
// for i = 1 to hexes do
60687: LD_ADDR_VAR 0 4
60691: PUSH
60692: DOUBLE
60693: LD_INT 1
60695: DEC
60696: ST_TO_ADDR
60697: LD_VAR 0 2
60701: PUSH
60702: FOR_TO
60703: IFFALSE 60815
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60705: LD_VAR 0 1
60709: PPUSH
60710: LD_VAR 0 2
60714: PUSH
60715: LD_VAR 0 4
60719: ARRAY
60720: PUSH
60721: LD_INT 1
60723: ARRAY
60724: PPUSH
60725: LD_VAR 0 2
60729: PUSH
60730: LD_VAR 0 4
60734: ARRAY
60735: PUSH
60736: LD_INT 2
60738: ARRAY
60739: PPUSH
60740: CALL_OW 297
60744: PUSH
60745: LD_VAR 0 5
60749: LESS
60750: IFFALSE 60813
// begin hex := hexes [ i ] ;
60752: LD_ADDR_VAR 0 7
60756: PUSH
60757: LD_VAR 0 2
60761: PUSH
60762: LD_VAR 0 4
60766: ARRAY
60767: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60768: LD_ADDR_VAR 0 5
60772: PUSH
60773: LD_VAR 0 1
60777: PPUSH
60778: LD_VAR 0 2
60782: PUSH
60783: LD_VAR 0 4
60787: ARRAY
60788: PUSH
60789: LD_INT 1
60791: ARRAY
60792: PPUSH
60793: LD_VAR 0 2
60797: PUSH
60798: LD_VAR 0 4
60802: ARRAY
60803: PUSH
60804: LD_INT 2
60806: ARRAY
60807: PPUSH
60808: CALL_OW 297
60812: ST_TO_ADDR
// end ; end ;
60813: GO 60702
60815: POP
60816: POP
// result := hex ;
60817: LD_ADDR_VAR 0 3
60821: PUSH
60822: LD_VAR 0 7
60826: ST_TO_ADDR
// end ;
60827: LD_VAR 0 3
60831: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60832: LD_INT 0
60834: PPUSH
60835: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60836: LD_VAR 0 1
60840: NOT
60841: PUSH
60842: LD_VAR 0 1
60846: PUSH
60847: LD_INT 21
60849: PUSH
60850: LD_INT 2
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 23
60859: PUSH
60860: LD_INT 2
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PPUSH
60871: CALL_OW 69
60875: IN
60876: NOT
60877: OR
60878: IFFALSE 60882
// exit ;
60880: GO 60929
// for i = 1 to 3 do
60882: LD_ADDR_VAR 0 3
60886: PUSH
60887: DOUBLE
60888: LD_INT 1
60890: DEC
60891: ST_TO_ADDR
60892: LD_INT 3
60894: PUSH
60895: FOR_TO
60896: IFFALSE 60927
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60898: LD_VAR 0 1
60902: PPUSH
60903: CALL_OW 250
60907: PPUSH
60908: LD_VAR 0 1
60912: PPUSH
60913: CALL_OW 251
60917: PPUSH
60918: LD_INT 1
60920: PPUSH
60921: CALL_OW 453
60925: GO 60895
60927: POP
60928: POP
// end ;
60929: LD_VAR 0 2
60933: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60934: LD_INT 0
60936: PPUSH
60937: PPUSH
60938: PPUSH
60939: PPUSH
60940: PPUSH
60941: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60942: LD_VAR 0 1
60946: NOT
60947: PUSH
60948: LD_VAR 0 2
60952: NOT
60953: OR
60954: PUSH
60955: LD_VAR 0 1
60959: PPUSH
60960: CALL_OW 314
60964: OR
60965: IFFALSE 60969
// exit ;
60967: GO 61410
// x := GetX ( enemy_unit ) ;
60969: LD_ADDR_VAR 0 7
60973: PUSH
60974: LD_VAR 0 2
60978: PPUSH
60979: CALL_OW 250
60983: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60984: LD_ADDR_VAR 0 8
60988: PUSH
60989: LD_VAR 0 2
60993: PPUSH
60994: CALL_OW 251
60998: ST_TO_ADDR
// if not x or not y then
60999: LD_VAR 0 7
61003: NOT
61004: PUSH
61005: LD_VAR 0 8
61009: NOT
61010: OR
61011: IFFALSE 61015
// exit ;
61013: GO 61410
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61015: LD_ADDR_VAR 0 6
61019: PUSH
61020: LD_VAR 0 7
61024: PPUSH
61025: LD_INT 0
61027: PPUSH
61028: LD_INT 4
61030: PPUSH
61031: CALL_OW 272
61035: PUSH
61036: LD_VAR 0 8
61040: PPUSH
61041: LD_INT 0
61043: PPUSH
61044: LD_INT 4
61046: PPUSH
61047: CALL_OW 273
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_VAR 0 7
61060: PPUSH
61061: LD_INT 1
61063: PPUSH
61064: LD_INT 4
61066: PPUSH
61067: CALL_OW 272
61071: PUSH
61072: LD_VAR 0 8
61076: PPUSH
61077: LD_INT 1
61079: PPUSH
61080: LD_INT 4
61082: PPUSH
61083: CALL_OW 273
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_VAR 0 7
61096: PPUSH
61097: LD_INT 2
61099: PPUSH
61100: LD_INT 4
61102: PPUSH
61103: CALL_OW 272
61107: PUSH
61108: LD_VAR 0 8
61112: PPUSH
61113: LD_INT 2
61115: PPUSH
61116: LD_INT 4
61118: PPUSH
61119: CALL_OW 273
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_VAR 0 7
61132: PPUSH
61133: LD_INT 3
61135: PPUSH
61136: LD_INT 4
61138: PPUSH
61139: CALL_OW 272
61143: PUSH
61144: LD_VAR 0 8
61148: PPUSH
61149: LD_INT 3
61151: PPUSH
61152: LD_INT 4
61154: PPUSH
61155: CALL_OW 273
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_VAR 0 7
61168: PPUSH
61169: LD_INT 4
61171: PPUSH
61172: LD_INT 4
61174: PPUSH
61175: CALL_OW 272
61179: PUSH
61180: LD_VAR 0 8
61184: PPUSH
61185: LD_INT 4
61187: PPUSH
61188: LD_INT 4
61190: PPUSH
61191: CALL_OW 273
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_VAR 0 7
61204: PPUSH
61205: LD_INT 5
61207: PPUSH
61208: LD_INT 4
61210: PPUSH
61211: CALL_OW 272
61215: PUSH
61216: LD_VAR 0 8
61220: PPUSH
61221: LD_INT 5
61223: PPUSH
61224: LD_INT 4
61226: PPUSH
61227: CALL_OW 273
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: ST_TO_ADDR
// for i = tmp downto 1 do
61244: LD_ADDR_VAR 0 4
61248: PUSH
61249: DOUBLE
61250: LD_VAR 0 6
61254: INC
61255: ST_TO_ADDR
61256: LD_INT 1
61258: PUSH
61259: FOR_DOWNTO
61260: IFFALSE 61361
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61262: LD_VAR 0 6
61266: PUSH
61267: LD_VAR 0 4
61271: ARRAY
61272: PUSH
61273: LD_INT 1
61275: ARRAY
61276: PPUSH
61277: LD_VAR 0 6
61281: PUSH
61282: LD_VAR 0 4
61286: ARRAY
61287: PUSH
61288: LD_INT 2
61290: ARRAY
61291: PPUSH
61292: CALL_OW 488
61296: NOT
61297: PUSH
61298: LD_VAR 0 6
61302: PUSH
61303: LD_VAR 0 4
61307: ARRAY
61308: PUSH
61309: LD_INT 1
61311: ARRAY
61312: PPUSH
61313: LD_VAR 0 6
61317: PUSH
61318: LD_VAR 0 4
61322: ARRAY
61323: PUSH
61324: LD_INT 2
61326: ARRAY
61327: PPUSH
61328: CALL_OW 428
61332: PUSH
61333: LD_INT 0
61335: NONEQUAL
61336: OR
61337: IFFALSE 61359
// tmp := Delete ( tmp , i ) ;
61339: LD_ADDR_VAR 0 6
61343: PUSH
61344: LD_VAR 0 6
61348: PPUSH
61349: LD_VAR 0 4
61353: PPUSH
61354: CALL_OW 3
61358: ST_TO_ADDR
61359: GO 61259
61361: POP
61362: POP
// j := GetClosestHex ( unit , tmp ) ;
61363: LD_ADDR_VAR 0 5
61367: PUSH
61368: LD_VAR 0 1
61372: PPUSH
61373: LD_VAR 0 6
61377: PPUSH
61378: CALL 60663 0 2
61382: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61383: LD_VAR 0 1
61387: PPUSH
61388: LD_VAR 0 5
61392: PUSH
61393: LD_INT 1
61395: ARRAY
61396: PPUSH
61397: LD_VAR 0 5
61401: PUSH
61402: LD_INT 2
61404: ARRAY
61405: PPUSH
61406: CALL_OW 111
// end ;
61410: LD_VAR 0 3
61414: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61415: LD_INT 0
61417: PPUSH
61418: PPUSH
61419: PPUSH
// uc_side = 0 ;
61420: LD_ADDR_OWVAR 20
61424: PUSH
61425: LD_INT 0
61427: ST_TO_ADDR
// uc_nation = 0 ;
61428: LD_ADDR_OWVAR 21
61432: PUSH
61433: LD_INT 0
61435: ST_TO_ADDR
// InitHc_All ( ) ;
61436: CALL_OW 584
// InitVc ;
61440: CALL_OW 20
// if mastodonts then
61444: LD_VAR 0 6
61448: IFFALSE 61515
// for i = 1 to mastodonts do
61450: LD_ADDR_VAR 0 11
61454: PUSH
61455: DOUBLE
61456: LD_INT 1
61458: DEC
61459: ST_TO_ADDR
61460: LD_VAR 0 6
61464: PUSH
61465: FOR_TO
61466: IFFALSE 61513
// begin vc_chassis := 31 ;
61468: LD_ADDR_OWVAR 37
61472: PUSH
61473: LD_INT 31
61475: ST_TO_ADDR
// vc_control := control_rider ;
61476: LD_ADDR_OWVAR 38
61480: PUSH
61481: LD_INT 4
61483: ST_TO_ADDR
// animal := CreateVehicle ;
61484: LD_ADDR_VAR 0 12
61488: PUSH
61489: CALL_OW 45
61493: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61494: LD_VAR 0 12
61498: PPUSH
61499: LD_VAR 0 8
61503: PPUSH
61504: LD_INT 0
61506: PPUSH
61507: CALL 63703 0 3
// end ;
61511: GO 61465
61513: POP
61514: POP
// if horses then
61515: LD_VAR 0 5
61519: IFFALSE 61586
// for i = 1 to horses do
61521: LD_ADDR_VAR 0 11
61525: PUSH
61526: DOUBLE
61527: LD_INT 1
61529: DEC
61530: ST_TO_ADDR
61531: LD_VAR 0 5
61535: PUSH
61536: FOR_TO
61537: IFFALSE 61584
// begin hc_class := 21 ;
61539: LD_ADDR_OWVAR 28
61543: PUSH
61544: LD_INT 21
61546: ST_TO_ADDR
// hc_gallery :=  ;
61547: LD_ADDR_OWVAR 33
61551: PUSH
61552: LD_STRING 
61554: ST_TO_ADDR
// animal := CreateHuman ;
61555: LD_ADDR_VAR 0 12
61559: PUSH
61560: CALL_OW 44
61564: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61565: LD_VAR 0 12
61569: PPUSH
61570: LD_VAR 0 8
61574: PPUSH
61575: LD_INT 0
61577: PPUSH
61578: CALL 63703 0 3
// end ;
61582: GO 61536
61584: POP
61585: POP
// if birds then
61586: LD_VAR 0 1
61590: IFFALSE 61657
// for i = 1 to birds do
61592: LD_ADDR_VAR 0 11
61596: PUSH
61597: DOUBLE
61598: LD_INT 1
61600: DEC
61601: ST_TO_ADDR
61602: LD_VAR 0 1
61606: PUSH
61607: FOR_TO
61608: IFFALSE 61655
// begin hc_class = 18 ;
61610: LD_ADDR_OWVAR 28
61614: PUSH
61615: LD_INT 18
61617: ST_TO_ADDR
// hc_gallery =  ;
61618: LD_ADDR_OWVAR 33
61622: PUSH
61623: LD_STRING 
61625: ST_TO_ADDR
// animal := CreateHuman ;
61626: LD_ADDR_VAR 0 12
61630: PUSH
61631: CALL_OW 44
61635: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61636: LD_VAR 0 12
61640: PPUSH
61641: LD_VAR 0 8
61645: PPUSH
61646: LD_INT 0
61648: PPUSH
61649: CALL 63703 0 3
// end ;
61653: GO 61607
61655: POP
61656: POP
// if tigers then
61657: LD_VAR 0 2
61661: IFFALSE 61745
// for i = 1 to tigers do
61663: LD_ADDR_VAR 0 11
61667: PUSH
61668: DOUBLE
61669: LD_INT 1
61671: DEC
61672: ST_TO_ADDR
61673: LD_VAR 0 2
61677: PUSH
61678: FOR_TO
61679: IFFALSE 61743
// begin hc_class = class_tiger ;
61681: LD_ADDR_OWVAR 28
61685: PUSH
61686: LD_INT 14
61688: ST_TO_ADDR
// hc_gallery =  ;
61689: LD_ADDR_OWVAR 33
61693: PUSH
61694: LD_STRING 
61696: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61697: LD_ADDR_OWVAR 35
61701: PUSH
61702: LD_INT 7
61704: NEG
61705: PPUSH
61706: LD_INT 7
61708: PPUSH
61709: CALL_OW 12
61713: ST_TO_ADDR
// animal := CreateHuman ;
61714: LD_ADDR_VAR 0 12
61718: PUSH
61719: CALL_OW 44
61723: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61724: LD_VAR 0 12
61728: PPUSH
61729: LD_VAR 0 8
61733: PPUSH
61734: LD_INT 0
61736: PPUSH
61737: CALL 63703 0 3
// end ;
61741: GO 61678
61743: POP
61744: POP
// if apemans then
61745: LD_VAR 0 3
61749: IFFALSE 61872
// for i = 1 to apemans do
61751: LD_ADDR_VAR 0 11
61755: PUSH
61756: DOUBLE
61757: LD_INT 1
61759: DEC
61760: ST_TO_ADDR
61761: LD_VAR 0 3
61765: PUSH
61766: FOR_TO
61767: IFFALSE 61870
// begin hc_class = class_apeman ;
61769: LD_ADDR_OWVAR 28
61773: PUSH
61774: LD_INT 12
61776: ST_TO_ADDR
// hc_gallery =  ;
61777: LD_ADDR_OWVAR 33
61781: PUSH
61782: LD_STRING 
61784: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61785: LD_ADDR_OWVAR 35
61789: PUSH
61790: LD_INT 2
61792: NEG
61793: PPUSH
61794: LD_INT 2
61796: PPUSH
61797: CALL_OW 12
61801: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61802: LD_ADDR_OWVAR 31
61806: PUSH
61807: LD_INT 1
61809: PPUSH
61810: LD_INT 3
61812: PPUSH
61813: CALL_OW 12
61817: PUSH
61818: LD_INT 1
61820: PPUSH
61821: LD_INT 3
61823: PPUSH
61824: CALL_OW 12
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: ST_TO_ADDR
// animal := CreateHuman ;
61841: LD_ADDR_VAR 0 12
61845: PUSH
61846: CALL_OW 44
61850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61851: LD_VAR 0 12
61855: PPUSH
61856: LD_VAR 0 8
61860: PPUSH
61861: LD_INT 0
61863: PPUSH
61864: CALL 63703 0 3
// end ;
61868: GO 61766
61870: POP
61871: POP
// if enchidnas then
61872: LD_VAR 0 4
61876: IFFALSE 61943
// for i = 1 to enchidnas do
61878: LD_ADDR_VAR 0 11
61882: PUSH
61883: DOUBLE
61884: LD_INT 1
61886: DEC
61887: ST_TO_ADDR
61888: LD_VAR 0 4
61892: PUSH
61893: FOR_TO
61894: IFFALSE 61941
// begin hc_class = 13 ;
61896: LD_ADDR_OWVAR 28
61900: PUSH
61901: LD_INT 13
61903: ST_TO_ADDR
// hc_gallery =  ;
61904: LD_ADDR_OWVAR 33
61908: PUSH
61909: LD_STRING 
61911: ST_TO_ADDR
// animal := CreateHuman ;
61912: LD_ADDR_VAR 0 12
61916: PUSH
61917: CALL_OW 44
61921: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61922: LD_VAR 0 12
61926: PPUSH
61927: LD_VAR 0 8
61931: PPUSH
61932: LD_INT 0
61934: PPUSH
61935: CALL 63703 0 3
// end ;
61939: GO 61893
61941: POP
61942: POP
// if fishes then
61943: LD_VAR 0 7
61947: IFFALSE 62014
// for i = 1 to fishes do
61949: LD_ADDR_VAR 0 11
61953: PUSH
61954: DOUBLE
61955: LD_INT 1
61957: DEC
61958: ST_TO_ADDR
61959: LD_VAR 0 7
61963: PUSH
61964: FOR_TO
61965: IFFALSE 62012
// begin hc_class = 20 ;
61967: LD_ADDR_OWVAR 28
61971: PUSH
61972: LD_INT 20
61974: ST_TO_ADDR
// hc_gallery =  ;
61975: LD_ADDR_OWVAR 33
61979: PUSH
61980: LD_STRING 
61982: ST_TO_ADDR
// animal := CreateHuman ;
61983: LD_ADDR_VAR 0 12
61987: PUSH
61988: CALL_OW 44
61992: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61993: LD_VAR 0 12
61997: PPUSH
61998: LD_VAR 0 9
62002: PPUSH
62003: LD_INT 0
62005: PPUSH
62006: CALL 63703 0 3
// end ;
62010: GO 61964
62012: POP
62013: POP
// end ;
62014: LD_VAR 0 10
62018: RET
// export function WantHeal ( sci , unit ) ; begin
62019: LD_INT 0
62021: PPUSH
// if GetTaskList ( sci ) > 0 then
62022: LD_VAR 0 1
62026: PPUSH
62027: CALL_OW 437
62031: PUSH
62032: LD_INT 0
62034: GREATER
62035: IFFALSE 62105
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62037: LD_VAR 0 1
62041: PPUSH
62042: CALL_OW 437
62046: PUSH
62047: LD_INT 1
62049: ARRAY
62050: PUSH
62051: LD_INT 1
62053: ARRAY
62054: PUSH
62055: LD_STRING l
62057: EQUAL
62058: PUSH
62059: LD_VAR 0 1
62063: PPUSH
62064: CALL_OW 437
62068: PUSH
62069: LD_INT 1
62071: ARRAY
62072: PUSH
62073: LD_INT 4
62075: ARRAY
62076: PUSH
62077: LD_VAR 0 2
62081: EQUAL
62082: AND
62083: IFFALSE 62095
// result := true else
62085: LD_ADDR_VAR 0 3
62089: PUSH
62090: LD_INT 1
62092: ST_TO_ADDR
62093: GO 62103
// result := false ;
62095: LD_ADDR_VAR 0 3
62099: PUSH
62100: LD_INT 0
62102: ST_TO_ADDR
// end else
62103: GO 62113
// result := false ;
62105: LD_ADDR_VAR 0 3
62109: PUSH
62110: LD_INT 0
62112: ST_TO_ADDR
// end ;
62113: LD_VAR 0 3
62117: RET
// export function HealTarget ( sci ) ; begin
62118: LD_INT 0
62120: PPUSH
// if not sci then
62121: LD_VAR 0 1
62125: NOT
62126: IFFALSE 62130
// exit ;
62128: GO 62195
// result := 0 ;
62130: LD_ADDR_VAR 0 2
62134: PUSH
62135: LD_INT 0
62137: ST_TO_ADDR
// if GetTaskList ( sci ) then
62138: LD_VAR 0 1
62142: PPUSH
62143: CALL_OW 437
62147: IFFALSE 62195
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62149: LD_VAR 0 1
62153: PPUSH
62154: CALL_OW 437
62158: PUSH
62159: LD_INT 1
62161: ARRAY
62162: PUSH
62163: LD_INT 1
62165: ARRAY
62166: PUSH
62167: LD_STRING l
62169: EQUAL
62170: IFFALSE 62195
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62172: LD_ADDR_VAR 0 2
62176: PUSH
62177: LD_VAR 0 1
62181: PPUSH
62182: CALL_OW 437
62186: PUSH
62187: LD_INT 1
62189: ARRAY
62190: PUSH
62191: LD_INT 4
62193: ARRAY
62194: ST_TO_ADDR
// end ;
62195: LD_VAR 0 2
62199: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62200: LD_INT 0
62202: PPUSH
62203: PPUSH
62204: PPUSH
62205: PPUSH
// if not base_units then
62206: LD_VAR 0 1
62210: NOT
62211: IFFALSE 62215
// exit ;
62213: GO 62302
// result := false ;
62215: LD_ADDR_VAR 0 2
62219: PUSH
62220: LD_INT 0
62222: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62223: LD_ADDR_VAR 0 5
62227: PUSH
62228: LD_VAR 0 1
62232: PPUSH
62233: LD_INT 21
62235: PUSH
62236: LD_INT 3
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PPUSH
62243: CALL_OW 72
62247: ST_TO_ADDR
// if not tmp then
62248: LD_VAR 0 5
62252: NOT
62253: IFFALSE 62257
// exit ;
62255: GO 62302
// for i in tmp do
62257: LD_ADDR_VAR 0 3
62261: PUSH
62262: LD_VAR 0 5
62266: PUSH
62267: FOR_IN
62268: IFFALSE 62300
// begin result := EnemyInRange ( i , 22 ) ;
62270: LD_ADDR_VAR 0 2
62274: PUSH
62275: LD_VAR 0 3
62279: PPUSH
62280: LD_INT 22
62282: PPUSH
62283: CALL 60538 0 2
62287: ST_TO_ADDR
// if result then
62288: LD_VAR 0 2
62292: IFFALSE 62298
// exit ;
62294: POP
62295: POP
62296: GO 62302
// end ;
62298: GO 62267
62300: POP
62301: POP
// end ;
62302: LD_VAR 0 2
62306: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62307: LD_INT 0
62309: PPUSH
62310: PPUSH
// if not units then
62311: LD_VAR 0 1
62315: NOT
62316: IFFALSE 62320
// exit ;
62318: GO 62390
// result := [ ] ;
62320: LD_ADDR_VAR 0 3
62324: PUSH
62325: EMPTY
62326: ST_TO_ADDR
// for i in units do
62327: LD_ADDR_VAR 0 4
62331: PUSH
62332: LD_VAR 0 1
62336: PUSH
62337: FOR_IN
62338: IFFALSE 62388
// if GetTag ( i ) = tag then
62340: LD_VAR 0 4
62344: PPUSH
62345: CALL_OW 110
62349: PUSH
62350: LD_VAR 0 2
62354: EQUAL
62355: IFFALSE 62386
// result := Replace ( result , result + 1 , i ) ;
62357: LD_ADDR_VAR 0 3
62361: PUSH
62362: LD_VAR 0 3
62366: PPUSH
62367: LD_VAR 0 3
62371: PUSH
62372: LD_INT 1
62374: PLUS
62375: PPUSH
62376: LD_VAR 0 4
62380: PPUSH
62381: CALL_OW 1
62385: ST_TO_ADDR
62386: GO 62337
62388: POP
62389: POP
// end ;
62390: LD_VAR 0 3
62394: RET
// export function IsDriver ( un ) ; begin
62395: LD_INT 0
62397: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62398: LD_ADDR_VAR 0 2
62402: PUSH
62403: LD_VAR 0 1
62407: PUSH
62408: LD_INT 55
62410: PUSH
62411: EMPTY
62412: LIST
62413: PPUSH
62414: CALL_OW 69
62418: IN
62419: ST_TO_ADDR
// end ;
62420: LD_VAR 0 2
62424: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62425: LD_INT 0
62427: PPUSH
62428: PPUSH
// list := [ ] ;
62429: LD_ADDR_VAR 0 5
62433: PUSH
62434: EMPTY
62435: ST_TO_ADDR
// case d of 0 :
62436: LD_VAR 0 3
62440: PUSH
62441: LD_INT 0
62443: DOUBLE
62444: EQUAL
62445: IFTRUE 62449
62447: GO 62582
62449: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62450: LD_ADDR_VAR 0 5
62454: PUSH
62455: LD_VAR 0 1
62459: PUSH
62460: LD_INT 4
62462: MINUS
62463: PUSH
62464: LD_VAR 0 2
62468: PUSH
62469: LD_INT 4
62471: MINUS
62472: PUSH
62473: LD_INT 2
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: LIST
62480: PUSH
62481: LD_VAR 0 1
62485: PUSH
62486: LD_INT 3
62488: MINUS
62489: PUSH
62490: LD_VAR 0 2
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: LIST
62502: PUSH
62503: LD_VAR 0 1
62507: PUSH
62508: LD_INT 4
62510: PLUS
62511: PUSH
62512: LD_VAR 0 2
62516: PUSH
62517: LD_INT 4
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: LIST
62524: PUSH
62525: LD_VAR 0 1
62529: PUSH
62530: LD_INT 3
62532: PLUS
62533: PUSH
62534: LD_VAR 0 2
62538: PUSH
62539: LD_INT 3
62541: PLUS
62542: PUSH
62543: LD_INT 5
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: LIST
62550: PUSH
62551: LD_VAR 0 1
62555: PUSH
62556: LD_VAR 0 2
62560: PUSH
62561: LD_INT 4
62563: PLUS
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: LIST
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: ST_TO_ADDR
// end ; 1 :
62580: GO 63280
62582: LD_INT 1
62584: DOUBLE
62585: EQUAL
62586: IFTRUE 62590
62588: GO 62723
62590: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62591: LD_ADDR_VAR 0 5
62595: PUSH
62596: LD_VAR 0 1
62600: PUSH
62601: LD_VAR 0 2
62605: PUSH
62606: LD_INT 4
62608: MINUS
62609: PUSH
62610: LD_INT 3
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: LIST
62617: PUSH
62618: LD_VAR 0 1
62622: PUSH
62623: LD_INT 3
62625: MINUS
62626: PUSH
62627: LD_VAR 0 2
62631: PUSH
62632: LD_INT 3
62634: MINUS
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: LIST
62643: PUSH
62644: LD_VAR 0 1
62648: PUSH
62649: LD_INT 4
62651: MINUS
62652: PUSH
62653: LD_VAR 0 2
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: LIST
62665: PUSH
62666: LD_VAR 0 1
62670: PUSH
62671: LD_VAR 0 2
62675: PUSH
62676: LD_INT 3
62678: PLUS
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: LIST
62687: PUSH
62688: LD_VAR 0 1
62692: PUSH
62693: LD_INT 4
62695: PLUS
62696: PUSH
62697: LD_VAR 0 2
62701: PUSH
62702: LD_INT 4
62704: PLUS
62705: PUSH
62706: LD_INT 5
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: LIST
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: ST_TO_ADDR
// end ; 2 :
62721: GO 63280
62723: LD_INT 2
62725: DOUBLE
62726: EQUAL
62727: IFTRUE 62731
62729: GO 62860
62731: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62732: LD_ADDR_VAR 0 5
62736: PUSH
62737: LD_VAR 0 1
62741: PUSH
62742: LD_VAR 0 2
62746: PUSH
62747: LD_INT 3
62749: MINUS
62750: PUSH
62751: LD_INT 3
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: LIST
62758: PUSH
62759: LD_VAR 0 1
62763: PUSH
62764: LD_INT 4
62766: PLUS
62767: PUSH
62768: LD_VAR 0 2
62772: PUSH
62773: LD_INT 4
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: LIST
62780: PUSH
62781: LD_VAR 0 1
62785: PUSH
62786: LD_VAR 0 2
62790: PUSH
62791: LD_INT 4
62793: PLUS
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: LIST
62802: PUSH
62803: LD_VAR 0 1
62807: PUSH
62808: LD_INT 3
62810: MINUS
62811: PUSH
62812: LD_VAR 0 2
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: LIST
62824: PUSH
62825: LD_VAR 0 1
62829: PUSH
62830: LD_INT 4
62832: MINUS
62833: PUSH
62834: LD_VAR 0 2
62838: PUSH
62839: LD_INT 4
62841: MINUS
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: LIST
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: ST_TO_ADDR
// end ; 3 :
62858: GO 63280
62860: LD_INT 3
62862: DOUBLE
62863: EQUAL
62864: IFTRUE 62868
62866: GO 63001
62868: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62869: LD_ADDR_VAR 0 5
62873: PUSH
62874: LD_VAR 0 1
62878: PUSH
62879: LD_INT 3
62881: PLUS
62882: PUSH
62883: LD_VAR 0 2
62887: PUSH
62888: LD_INT 4
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: LIST
62895: PUSH
62896: LD_VAR 0 1
62900: PUSH
62901: LD_INT 4
62903: PLUS
62904: PUSH
62905: LD_VAR 0 2
62909: PUSH
62910: LD_INT 4
62912: PLUS
62913: PUSH
62914: LD_INT 5
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: LIST
62921: PUSH
62922: LD_VAR 0 1
62926: PUSH
62927: LD_INT 4
62929: MINUS
62930: PUSH
62931: LD_VAR 0 2
62935: PUSH
62936: LD_INT 1
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: LIST
62943: PUSH
62944: LD_VAR 0 1
62948: PUSH
62949: LD_VAR 0 2
62953: PUSH
62954: LD_INT 4
62956: MINUS
62957: PUSH
62958: LD_INT 3
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: LIST
62965: PUSH
62966: LD_VAR 0 1
62970: PUSH
62971: LD_INT 3
62973: MINUS
62974: PUSH
62975: LD_VAR 0 2
62979: PUSH
62980: LD_INT 3
62982: MINUS
62983: PUSH
62984: LD_INT 2
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: ST_TO_ADDR
// end ; 4 :
62999: GO 63280
63001: LD_INT 4
63003: DOUBLE
63004: EQUAL
63005: IFTRUE 63009
63007: GO 63142
63009: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63010: LD_ADDR_VAR 0 5
63014: PUSH
63015: LD_VAR 0 1
63019: PUSH
63020: LD_VAR 0 2
63024: PUSH
63025: LD_INT 4
63027: PLUS
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: LIST
63036: PUSH
63037: LD_VAR 0 1
63041: PUSH
63042: LD_INT 3
63044: PLUS
63045: PUSH
63046: LD_VAR 0 2
63050: PUSH
63051: LD_INT 3
63053: PLUS
63054: PUSH
63055: LD_INT 5
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: LIST
63062: PUSH
63063: LD_VAR 0 1
63067: PUSH
63068: LD_INT 4
63070: PLUS
63071: PUSH
63072: LD_VAR 0 2
63076: PUSH
63077: LD_INT 4
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: LIST
63084: PUSH
63085: LD_VAR 0 1
63089: PUSH
63090: LD_VAR 0 2
63094: PUSH
63095: LD_INT 3
63097: MINUS
63098: PUSH
63099: LD_INT 3
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: PUSH
63107: LD_VAR 0 1
63111: PUSH
63112: LD_INT 4
63114: MINUS
63115: PUSH
63116: LD_VAR 0 2
63120: PUSH
63121: LD_INT 4
63123: MINUS
63124: PUSH
63125: LD_INT 2
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: LIST
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: ST_TO_ADDR
// end ; 5 :
63140: GO 63280
63142: LD_INT 5
63144: DOUBLE
63145: EQUAL
63146: IFTRUE 63150
63148: GO 63279
63150: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63151: LD_ADDR_VAR 0 5
63155: PUSH
63156: LD_VAR 0 1
63160: PUSH
63161: LD_INT 4
63163: MINUS
63164: PUSH
63165: LD_VAR 0 2
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: LIST
63177: PUSH
63178: LD_VAR 0 1
63182: PUSH
63183: LD_VAR 0 2
63187: PUSH
63188: LD_INT 4
63190: MINUS
63191: PUSH
63192: LD_INT 3
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: LIST
63199: PUSH
63200: LD_VAR 0 1
63204: PUSH
63205: LD_INT 4
63207: PLUS
63208: PUSH
63209: LD_VAR 0 2
63213: PUSH
63214: LD_INT 4
63216: PLUS
63217: PUSH
63218: LD_INT 5
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: LIST
63225: PUSH
63226: LD_VAR 0 1
63230: PUSH
63231: LD_INT 3
63233: PLUS
63234: PUSH
63235: LD_VAR 0 2
63239: PUSH
63240: LD_INT 4
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: LIST
63247: PUSH
63248: LD_VAR 0 1
63252: PUSH
63253: LD_VAR 0 2
63257: PUSH
63258: LD_INT 3
63260: PLUS
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: LIST
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: ST_TO_ADDR
// end ; end ;
63277: GO 63280
63279: POP
// result := list ;
63280: LD_ADDR_VAR 0 4
63284: PUSH
63285: LD_VAR 0 5
63289: ST_TO_ADDR
// end ;
63290: LD_VAR 0 4
63294: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63295: LD_INT 0
63297: PPUSH
63298: PPUSH
63299: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63300: LD_VAR 0 1
63304: NOT
63305: PUSH
63306: LD_VAR 0 2
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: LD_INT 2
63316: PUSH
63317: LD_INT 3
63319: PUSH
63320: LD_INT 4
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: IN
63329: NOT
63330: OR
63331: IFFALSE 63335
// exit ;
63333: GO 63427
// tmp := [ ] ;
63335: LD_ADDR_VAR 0 5
63339: PUSH
63340: EMPTY
63341: ST_TO_ADDR
// for i in units do
63342: LD_ADDR_VAR 0 4
63346: PUSH
63347: LD_VAR 0 1
63351: PUSH
63352: FOR_IN
63353: IFFALSE 63396
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63355: LD_ADDR_VAR 0 5
63359: PUSH
63360: LD_VAR 0 5
63364: PPUSH
63365: LD_VAR 0 5
63369: PUSH
63370: LD_INT 1
63372: PLUS
63373: PPUSH
63374: LD_VAR 0 4
63378: PPUSH
63379: LD_VAR 0 2
63383: PPUSH
63384: CALL_OW 259
63388: PPUSH
63389: CALL_OW 2
63393: ST_TO_ADDR
63394: GO 63352
63396: POP
63397: POP
// if not tmp then
63398: LD_VAR 0 5
63402: NOT
63403: IFFALSE 63407
// exit ;
63405: GO 63427
// result := SortListByListDesc ( units , tmp ) ;
63407: LD_ADDR_VAR 0 3
63411: PUSH
63412: LD_VAR 0 1
63416: PPUSH
63417: LD_VAR 0 5
63421: PPUSH
63422: CALL_OW 77
63426: ST_TO_ADDR
// end ;
63427: LD_VAR 0 3
63431: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63432: LD_INT 0
63434: PPUSH
63435: PPUSH
63436: PPUSH
// result := false ;
63437: LD_ADDR_VAR 0 3
63441: PUSH
63442: LD_INT 0
63444: ST_TO_ADDR
// x := GetX ( building ) ;
63445: LD_ADDR_VAR 0 4
63449: PUSH
63450: LD_VAR 0 2
63454: PPUSH
63455: CALL_OW 250
63459: ST_TO_ADDR
// y := GetY ( building ) ;
63460: LD_ADDR_VAR 0 5
63464: PUSH
63465: LD_VAR 0 2
63469: PPUSH
63470: CALL_OW 251
63474: ST_TO_ADDR
// if not building or not x or not y then
63475: LD_VAR 0 2
63479: NOT
63480: PUSH
63481: LD_VAR 0 4
63485: NOT
63486: OR
63487: PUSH
63488: LD_VAR 0 5
63492: NOT
63493: OR
63494: IFFALSE 63498
// exit ;
63496: GO 63590
// if GetTaskList ( unit ) then
63498: LD_VAR 0 1
63502: PPUSH
63503: CALL_OW 437
63507: IFFALSE 63590
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63509: LD_STRING e
63511: PUSH
63512: LD_VAR 0 1
63516: PPUSH
63517: CALL_OW 437
63521: PUSH
63522: LD_INT 1
63524: ARRAY
63525: PUSH
63526: LD_INT 1
63528: ARRAY
63529: EQUAL
63530: PUSH
63531: LD_VAR 0 4
63535: PUSH
63536: LD_VAR 0 1
63540: PPUSH
63541: CALL_OW 437
63545: PUSH
63546: LD_INT 1
63548: ARRAY
63549: PUSH
63550: LD_INT 2
63552: ARRAY
63553: EQUAL
63554: AND
63555: PUSH
63556: LD_VAR 0 5
63560: PUSH
63561: LD_VAR 0 1
63565: PPUSH
63566: CALL_OW 437
63570: PUSH
63571: LD_INT 1
63573: ARRAY
63574: PUSH
63575: LD_INT 3
63577: ARRAY
63578: EQUAL
63579: AND
63580: IFFALSE 63590
// result := true end ;
63582: LD_ADDR_VAR 0 3
63586: PUSH
63587: LD_INT 1
63589: ST_TO_ADDR
// end ;
63590: LD_VAR 0 3
63594: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63595: LD_INT 0
63597: PPUSH
// result := false ;
63598: LD_ADDR_VAR 0 4
63602: PUSH
63603: LD_INT 0
63605: ST_TO_ADDR
// if GetTaskList ( unit ) then
63606: LD_VAR 0 1
63610: PPUSH
63611: CALL_OW 437
63615: IFFALSE 63698
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63617: LD_STRING M
63619: PUSH
63620: LD_VAR 0 1
63624: PPUSH
63625: CALL_OW 437
63629: PUSH
63630: LD_INT 1
63632: ARRAY
63633: PUSH
63634: LD_INT 1
63636: ARRAY
63637: EQUAL
63638: PUSH
63639: LD_VAR 0 2
63643: PUSH
63644: LD_VAR 0 1
63648: PPUSH
63649: CALL_OW 437
63653: PUSH
63654: LD_INT 1
63656: ARRAY
63657: PUSH
63658: LD_INT 2
63660: ARRAY
63661: EQUAL
63662: AND
63663: PUSH
63664: LD_VAR 0 3
63668: PUSH
63669: LD_VAR 0 1
63673: PPUSH
63674: CALL_OW 437
63678: PUSH
63679: LD_INT 1
63681: ARRAY
63682: PUSH
63683: LD_INT 3
63685: ARRAY
63686: EQUAL
63687: AND
63688: IFFALSE 63698
// result := true ;
63690: LD_ADDR_VAR 0 4
63694: PUSH
63695: LD_INT 1
63697: ST_TO_ADDR
// end ; end ;
63698: LD_VAR 0 4
63702: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63703: LD_INT 0
63705: PPUSH
63706: PPUSH
63707: PPUSH
63708: PPUSH
// if not unit or not area then
63709: LD_VAR 0 1
63713: NOT
63714: PUSH
63715: LD_VAR 0 2
63719: NOT
63720: OR
63721: IFFALSE 63725
// exit ;
63723: GO 63889
// tmp := AreaToList ( area , i ) ;
63725: LD_ADDR_VAR 0 6
63729: PUSH
63730: LD_VAR 0 2
63734: PPUSH
63735: LD_VAR 0 5
63739: PPUSH
63740: CALL_OW 517
63744: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63745: LD_ADDR_VAR 0 5
63749: PUSH
63750: DOUBLE
63751: LD_INT 1
63753: DEC
63754: ST_TO_ADDR
63755: LD_VAR 0 6
63759: PUSH
63760: LD_INT 1
63762: ARRAY
63763: PUSH
63764: FOR_TO
63765: IFFALSE 63887
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63767: LD_ADDR_VAR 0 7
63771: PUSH
63772: LD_VAR 0 6
63776: PUSH
63777: LD_INT 1
63779: ARRAY
63780: PUSH
63781: LD_VAR 0 5
63785: ARRAY
63786: PUSH
63787: LD_VAR 0 6
63791: PUSH
63792: LD_INT 2
63794: ARRAY
63795: PUSH
63796: LD_VAR 0 5
63800: ARRAY
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63806: LD_VAR 0 7
63810: PUSH
63811: LD_INT 1
63813: ARRAY
63814: PPUSH
63815: LD_VAR 0 7
63819: PUSH
63820: LD_INT 2
63822: ARRAY
63823: PPUSH
63824: CALL_OW 428
63828: PUSH
63829: LD_INT 0
63831: EQUAL
63832: IFFALSE 63885
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63834: LD_VAR 0 1
63838: PPUSH
63839: LD_VAR 0 7
63843: PUSH
63844: LD_INT 1
63846: ARRAY
63847: PPUSH
63848: LD_VAR 0 7
63852: PUSH
63853: LD_INT 2
63855: ARRAY
63856: PPUSH
63857: LD_VAR 0 3
63861: PPUSH
63862: CALL_OW 48
// result := IsPlaced ( unit ) ;
63866: LD_ADDR_VAR 0 4
63870: PUSH
63871: LD_VAR 0 1
63875: PPUSH
63876: CALL_OW 305
63880: ST_TO_ADDR
// exit ;
63881: POP
63882: POP
63883: GO 63889
// end ; end ;
63885: GO 63764
63887: POP
63888: POP
// end ;
63889: LD_VAR 0 4
63893: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63894: LD_INT 0
63896: PPUSH
63897: PPUSH
63898: PPUSH
// if not side or side > 8 then
63899: LD_VAR 0 1
63903: NOT
63904: PUSH
63905: LD_VAR 0 1
63909: PUSH
63910: LD_INT 8
63912: GREATER
63913: OR
63914: IFFALSE 63918
// exit ;
63916: GO 64105
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63918: LD_ADDR_VAR 0 4
63922: PUSH
63923: LD_INT 22
63925: PUSH
63926: LD_VAR 0 1
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 21
63937: PUSH
63938: LD_INT 3
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PPUSH
63949: CALL_OW 69
63953: ST_TO_ADDR
// if not tmp then
63954: LD_VAR 0 4
63958: NOT
63959: IFFALSE 63963
// exit ;
63961: GO 64105
// enable_addtolog := true ;
63963: LD_ADDR_OWVAR 81
63967: PUSH
63968: LD_INT 1
63970: ST_TO_ADDR
// AddToLog ( [ ) ;
63971: LD_STRING [
63973: PPUSH
63974: CALL_OW 561
// for i in tmp do
63978: LD_ADDR_VAR 0 3
63982: PUSH
63983: LD_VAR 0 4
63987: PUSH
63988: FOR_IN
63989: IFFALSE 64096
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63991: LD_STRING [
63993: PUSH
63994: LD_VAR 0 3
63998: PPUSH
63999: CALL_OW 266
64003: STR
64004: PUSH
64005: LD_STRING , 
64007: STR
64008: PUSH
64009: LD_VAR 0 3
64013: PPUSH
64014: CALL_OW 250
64018: STR
64019: PUSH
64020: LD_STRING , 
64022: STR
64023: PUSH
64024: LD_VAR 0 3
64028: PPUSH
64029: CALL_OW 251
64033: STR
64034: PUSH
64035: LD_STRING , 
64037: STR
64038: PUSH
64039: LD_VAR 0 3
64043: PPUSH
64044: CALL_OW 254
64048: STR
64049: PUSH
64050: LD_STRING , 
64052: STR
64053: PUSH
64054: LD_VAR 0 3
64058: PPUSH
64059: LD_INT 1
64061: PPUSH
64062: CALL_OW 268
64066: STR
64067: PUSH
64068: LD_STRING , 
64070: STR
64071: PUSH
64072: LD_VAR 0 3
64076: PPUSH
64077: LD_INT 2
64079: PPUSH
64080: CALL_OW 268
64084: STR
64085: PUSH
64086: LD_STRING ],
64088: STR
64089: PPUSH
64090: CALL_OW 561
// end ;
64094: GO 63988
64096: POP
64097: POP
// AddToLog ( ]; ) ;
64098: LD_STRING ];
64100: PPUSH
64101: CALL_OW 561
// end ;
64105: LD_VAR 0 2
64109: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64110: LD_INT 0
64112: PPUSH
64113: PPUSH
64114: PPUSH
64115: PPUSH
64116: PPUSH
// if not area or not rate or not max then
64117: LD_VAR 0 1
64121: NOT
64122: PUSH
64123: LD_VAR 0 2
64127: NOT
64128: OR
64129: PUSH
64130: LD_VAR 0 4
64134: NOT
64135: OR
64136: IFFALSE 64140
// exit ;
64138: GO 64332
// while 1 do
64140: LD_INT 1
64142: IFFALSE 64332
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64144: LD_ADDR_VAR 0 9
64148: PUSH
64149: LD_VAR 0 1
64153: PPUSH
64154: LD_INT 1
64156: PPUSH
64157: CALL_OW 287
64161: PUSH
64162: LD_INT 10
64164: MUL
64165: ST_TO_ADDR
// r := rate / 10 ;
64166: LD_ADDR_VAR 0 7
64170: PUSH
64171: LD_VAR 0 2
64175: PUSH
64176: LD_INT 10
64178: DIVREAL
64179: ST_TO_ADDR
// time := 1 1$00 ;
64180: LD_ADDR_VAR 0 8
64184: PUSH
64185: LD_INT 2100
64187: ST_TO_ADDR
// if amount < min then
64188: LD_VAR 0 9
64192: PUSH
64193: LD_VAR 0 3
64197: LESS
64198: IFFALSE 64216
// r := r * 2 else
64200: LD_ADDR_VAR 0 7
64204: PUSH
64205: LD_VAR 0 7
64209: PUSH
64210: LD_INT 2
64212: MUL
64213: ST_TO_ADDR
64214: GO 64242
// if amount > max then
64216: LD_VAR 0 9
64220: PUSH
64221: LD_VAR 0 4
64225: GREATER
64226: IFFALSE 64242
// r := r / 2 ;
64228: LD_ADDR_VAR 0 7
64232: PUSH
64233: LD_VAR 0 7
64237: PUSH
64238: LD_INT 2
64240: DIVREAL
64241: ST_TO_ADDR
// time := time / r ;
64242: LD_ADDR_VAR 0 8
64246: PUSH
64247: LD_VAR 0 8
64251: PUSH
64252: LD_VAR 0 7
64256: DIVREAL
64257: ST_TO_ADDR
// if time < 0 then
64258: LD_VAR 0 8
64262: PUSH
64263: LD_INT 0
64265: LESS
64266: IFFALSE 64283
// time := time * - 1 ;
64268: LD_ADDR_VAR 0 8
64272: PUSH
64273: LD_VAR 0 8
64277: PUSH
64278: LD_INT 1
64280: NEG
64281: MUL
64282: ST_TO_ADDR
// wait ( time ) ;
64283: LD_VAR 0 8
64287: PPUSH
64288: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64292: LD_INT 35
64294: PPUSH
64295: LD_INT 875
64297: PPUSH
64298: CALL_OW 12
64302: PPUSH
64303: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64307: LD_INT 1
64309: PPUSH
64310: LD_INT 5
64312: PPUSH
64313: CALL_OW 12
64317: PPUSH
64318: LD_VAR 0 1
64322: PPUSH
64323: LD_INT 1
64325: PPUSH
64326: CALL_OW 55
// end ;
64330: GO 64140
// end ;
64332: LD_VAR 0 5
64336: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64337: LD_INT 0
64339: PPUSH
64340: PPUSH
64341: PPUSH
64342: PPUSH
64343: PPUSH
64344: PPUSH
64345: PPUSH
64346: PPUSH
// if not turrets or not factories then
64347: LD_VAR 0 1
64351: NOT
64352: PUSH
64353: LD_VAR 0 2
64357: NOT
64358: OR
64359: IFFALSE 64363
// exit ;
64361: GO 64670
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64363: LD_ADDR_VAR 0 10
64367: PUSH
64368: LD_INT 5
64370: PUSH
64371: LD_INT 6
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 2
64380: PUSH
64381: LD_INT 4
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 3
64390: PUSH
64391: LD_INT 5
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 24
64405: PUSH
64406: LD_INT 25
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 23
64415: PUSH
64416: LD_INT 27
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 42
64429: PUSH
64430: LD_INT 43
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 44
64439: PUSH
64440: LD_INT 46
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 45
64449: PUSH
64450: LD_INT 47
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: LIST
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: LIST
64466: ST_TO_ADDR
// result := [ ] ;
64467: LD_ADDR_VAR 0 3
64471: PUSH
64472: EMPTY
64473: ST_TO_ADDR
// for i in turrets do
64474: LD_ADDR_VAR 0 4
64478: PUSH
64479: LD_VAR 0 1
64483: PUSH
64484: FOR_IN
64485: IFFALSE 64668
// begin nat := GetNation ( i ) ;
64487: LD_ADDR_VAR 0 7
64491: PUSH
64492: LD_VAR 0 4
64496: PPUSH
64497: CALL_OW 248
64501: ST_TO_ADDR
// weapon := 0 ;
64502: LD_ADDR_VAR 0 8
64506: PUSH
64507: LD_INT 0
64509: ST_TO_ADDR
// if not nat then
64510: LD_VAR 0 7
64514: NOT
64515: IFFALSE 64519
// continue ;
64517: GO 64484
// for j in list [ nat ] do
64519: LD_ADDR_VAR 0 5
64523: PUSH
64524: LD_VAR 0 10
64528: PUSH
64529: LD_VAR 0 7
64533: ARRAY
64534: PUSH
64535: FOR_IN
64536: IFFALSE 64577
// if GetBWeapon ( i ) = j [ 1 ] then
64538: LD_VAR 0 4
64542: PPUSH
64543: CALL_OW 269
64547: PUSH
64548: LD_VAR 0 5
64552: PUSH
64553: LD_INT 1
64555: ARRAY
64556: EQUAL
64557: IFFALSE 64575
// begin weapon := j [ 2 ] ;
64559: LD_ADDR_VAR 0 8
64563: PUSH
64564: LD_VAR 0 5
64568: PUSH
64569: LD_INT 2
64571: ARRAY
64572: ST_TO_ADDR
// break ;
64573: GO 64577
// end ;
64575: GO 64535
64577: POP
64578: POP
// if not weapon then
64579: LD_VAR 0 8
64583: NOT
64584: IFFALSE 64588
// continue ;
64586: GO 64484
// for k in factories do
64588: LD_ADDR_VAR 0 6
64592: PUSH
64593: LD_VAR 0 2
64597: PUSH
64598: FOR_IN
64599: IFFALSE 64664
// begin weapons := AvailableWeaponList ( k ) ;
64601: LD_ADDR_VAR 0 9
64605: PUSH
64606: LD_VAR 0 6
64610: PPUSH
64611: CALL_OW 478
64615: ST_TO_ADDR
// if not weapons then
64616: LD_VAR 0 9
64620: NOT
64621: IFFALSE 64625
// continue ;
64623: GO 64598
// if weapon in weapons then
64625: LD_VAR 0 8
64629: PUSH
64630: LD_VAR 0 9
64634: IN
64635: IFFALSE 64662
// begin result := [ i , weapon ] ;
64637: LD_ADDR_VAR 0 3
64641: PUSH
64642: LD_VAR 0 4
64646: PUSH
64647: LD_VAR 0 8
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: ST_TO_ADDR
// exit ;
64656: POP
64657: POP
64658: POP
64659: POP
64660: GO 64670
// end ; end ;
64662: GO 64598
64664: POP
64665: POP
// end ;
64666: GO 64484
64668: POP
64669: POP
// end ;
64670: LD_VAR 0 3
64674: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64675: LD_INT 0
64677: PPUSH
// if not side or side > 8 then
64678: LD_VAR 0 3
64682: NOT
64683: PUSH
64684: LD_VAR 0 3
64688: PUSH
64689: LD_INT 8
64691: GREATER
64692: OR
64693: IFFALSE 64697
// exit ;
64695: GO 64756
// if not range then
64697: LD_VAR 0 4
64701: NOT
64702: IFFALSE 64713
// range := - 12 ;
64704: LD_ADDR_VAR 0 4
64708: PUSH
64709: LD_INT 12
64711: NEG
64712: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64713: LD_VAR 0 1
64717: PPUSH
64718: LD_VAR 0 2
64722: PPUSH
64723: LD_VAR 0 3
64727: PPUSH
64728: LD_VAR 0 4
64732: PPUSH
64733: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64737: LD_VAR 0 1
64741: PPUSH
64742: LD_VAR 0 2
64746: PPUSH
64747: LD_VAR 0 3
64751: PPUSH
64752: CALL_OW 331
// end ;
64756: LD_VAR 0 5
64760: RET
// export function Video ( mode ) ; begin
64761: LD_INT 0
64763: PPUSH
// ingame_video = mode ;
64764: LD_ADDR_OWVAR 52
64768: PUSH
64769: LD_VAR 0 1
64773: ST_TO_ADDR
// interface_hidden = mode ;
64774: LD_ADDR_OWVAR 54
64778: PUSH
64779: LD_VAR 0 1
64783: ST_TO_ADDR
// end ;
64784: LD_VAR 0 2
64788: RET
// export function Join ( array , element ) ; begin
64789: LD_INT 0
64791: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64792: LD_ADDR_VAR 0 3
64796: PUSH
64797: LD_VAR 0 1
64801: PPUSH
64802: LD_VAR 0 1
64806: PUSH
64807: LD_INT 1
64809: PLUS
64810: PPUSH
64811: LD_VAR 0 2
64815: PPUSH
64816: CALL_OW 1
64820: ST_TO_ADDR
// end ;
64821: LD_VAR 0 3
64825: RET
// export function JoinUnion ( array , element ) ; begin
64826: LD_INT 0
64828: PPUSH
// result := array union element ;
64829: LD_ADDR_VAR 0 3
64833: PUSH
64834: LD_VAR 0 1
64838: PUSH
64839: LD_VAR 0 2
64843: UNION
64844: ST_TO_ADDR
// end ;
64845: LD_VAR 0 3
64849: RET
// export function GetBehemoths ( side ) ; begin
64850: LD_INT 0
64852: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64853: LD_ADDR_VAR 0 2
64857: PUSH
64858: LD_INT 22
64860: PUSH
64861: LD_VAR 0 1
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 31
64872: PUSH
64873: LD_INT 25
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PPUSH
64884: CALL_OW 69
64888: ST_TO_ADDR
// end ;
64889: LD_VAR 0 2
64893: RET
// export function Shuffle ( array ) ; var i , index ; begin
64894: LD_INT 0
64896: PPUSH
64897: PPUSH
64898: PPUSH
// result := [ ] ;
64899: LD_ADDR_VAR 0 2
64903: PUSH
64904: EMPTY
64905: ST_TO_ADDR
// if not array then
64906: LD_VAR 0 1
64910: NOT
64911: IFFALSE 64915
// exit ;
64913: GO 65014
// Randomize ;
64915: CALL_OW 10
// for i = array downto 1 do
64919: LD_ADDR_VAR 0 3
64923: PUSH
64924: DOUBLE
64925: LD_VAR 0 1
64929: INC
64930: ST_TO_ADDR
64931: LD_INT 1
64933: PUSH
64934: FOR_DOWNTO
64935: IFFALSE 65012
// begin index := rand ( 1 , array ) ;
64937: LD_ADDR_VAR 0 4
64941: PUSH
64942: LD_INT 1
64944: PPUSH
64945: LD_VAR 0 1
64949: PPUSH
64950: CALL_OW 12
64954: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64955: LD_ADDR_VAR 0 2
64959: PUSH
64960: LD_VAR 0 2
64964: PPUSH
64965: LD_VAR 0 2
64969: PUSH
64970: LD_INT 1
64972: PLUS
64973: PPUSH
64974: LD_VAR 0 1
64978: PUSH
64979: LD_VAR 0 4
64983: ARRAY
64984: PPUSH
64985: CALL_OW 2
64989: ST_TO_ADDR
// array := Delete ( array , index ) ;
64990: LD_ADDR_VAR 0 1
64994: PUSH
64995: LD_VAR 0 1
64999: PPUSH
65000: LD_VAR 0 4
65004: PPUSH
65005: CALL_OW 3
65009: ST_TO_ADDR
// end ;
65010: GO 64934
65012: POP
65013: POP
// end ;
65014: LD_VAR 0 2
65018: RET
// export function GetBaseMaterials ( base ) ; begin
65019: LD_INT 0
65021: PPUSH
// result := [ 0 , 0 , 0 ] ;
65022: LD_ADDR_VAR 0 2
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: LIST
65040: ST_TO_ADDR
// if not base then
65041: LD_VAR 0 1
65045: NOT
65046: IFFALSE 65050
// exit ;
65048: GO 65099
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65050: LD_ADDR_VAR 0 2
65054: PUSH
65055: LD_VAR 0 1
65059: PPUSH
65060: LD_INT 1
65062: PPUSH
65063: CALL_OW 275
65067: PUSH
65068: LD_VAR 0 1
65072: PPUSH
65073: LD_INT 2
65075: PPUSH
65076: CALL_OW 275
65080: PUSH
65081: LD_VAR 0 1
65085: PPUSH
65086: LD_INT 3
65088: PPUSH
65089: CALL_OW 275
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: LIST
65098: ST_TO_ADDR
// end ;
65099: LD_VAR 0 2
65103: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65104: LD_INT 0
65106: PPUSH
65107: PPUSH
// result := array ;
65108: LD_ADDR_VAR 0 3
65112: PUSH
65113: LD_VAR 0 1
65117: ST_TO_ADDR
// if size > 0 then
65118: LD_VAR 0 2
65122: PUSH
65123: LD_INT 0
65125: GREATER
65126: IFFALSE 65172
// for i := array downto size do
65128: LD_ADDR_VAR 0 4
65132: PUSH
65133: DOUBLE
65134: LD_VAR 0 1
65138: INC
65139: ST_TO_ADDR
65140: LD_VAR 0 2
65144: PUSH
65145: FOR_DOWNTO
65146: IFFALSE 65170
// result := Delete ( result , result ) ;
65148: LD_ADDR_VAR 0 3
65152: PUSH
65153: LD_VAR 0 3
65157: PPUSH
65158: LD_VAR 0 3
65162: PPUSH
65163: CALL_OW 3
65167: ST_TO_ADDR
65168: GO 65145
65170: POP
65171: POP
// end ;
65172: LD_VAR 0 3
65176: RET
// export function ComExit ( unit ) ; var tmp ; begin
65177: LD_INT 0
65179: PPUSH
65180: PPUSH
// if not IsInUnit ( unit ) then
65181: LD_VAR 0 1
65185: PPUSH
65186: CALL_OW 310
65190: NOT
65191: IFFALSE 65195
// exit ;
65193: GO 65255
// tmp := IsInUnit ( unit ) ;
65195: LD_ADDR_VAR 0 3
65199: PUSH
65200: LD_VAR 0 1
65204: PPUSH
65205: CALL_OW 310
65209: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65210: LD_VAR 0 3
65214: PPUSH
65215: CALL_OW 247
65219: PUSH
65220: LD_INT 2
65222: EQUAL
65223: IFFALSE 65236
// ComExitVehicle ( unit ) else
65225: LD_VAR 0 1
65229: PPUSH
65230: CALL_OW 121
65234: GO 65245
// ComExitBuilding ( unit ) ;
65236: LD_VAR 0 1
65240: PPUSH
65241: CALL_OW 122
// result := tmp ;
65245: LD_ADDR_VAR 0 2
65249: PUSH
65250: LD_VAR 0 3
65254: ST_TO_ADDR
// end ;
65255: LD_VAR 0 2
65259: RET
// export function ComExitAll ( units ) ; var i ; begin
65260: LD_INT 0
65262: PPUSH
65263: PPUSH
// if not units then
65264: LD_VAR 0 1
65268: NOT
65269: IFFALSE 65273
// exit ;
65271: GO 65299
// for i in units do
65273: LD_ADDR_VAR 0 3
65277: PUSH
65278: LD_VAR 0 1
65282: PUSH
65283: FOR_IN
65284: IFFALSE 65297
// ComExit ( i ) ;
65286: LD_VAR 0 3
65290: PPUSH
65291: CALL 65177 0 1
65295: GO 65283
65297: POP
65298: POP
// end ;
65299: LD_VAR 0 2
65303: RET
// export function ResetHc ; begin
65304: LD_INT 0
65306: PPUSH
// InitHc ;
65307: CALL_OW 19
// hc_importance := 0 ;
65311: LD_ADDR_OWVAR 32
65315: PUSH
65316: LD_INT 0
65318: ST_TO_ADDR
// end ;
65319: LD_VAR 0 1
65323: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65324: LD_INT 0
65326: PPUSH
65327: PPUSH
65328: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65329: LD_ADDR_VAR 0 6
65333: PUSH
65334: LD_VAR 0 1
65338: PUSH
65339: LD_VAR 0 3
65343: PLUS
65344: PUSH
65345: LD_INT 2
65347: DIV
65348: ST_TO_ADDR
// if _x < 0 then
65349: LD_VAR 0 6
65353: PUSH
65354: LD_INT 0
65356: LESS
65357: IFFALSE 65374
// _x := _x * - 1 ;
65359: LD_ADDR_VAR 0 6
65363: PUSH
65364: LD_VAR 0 6
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: MUL
65373: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65374: LD_ADDR_VAR 0 7
65378: PUSH
65379: LD_VAR 0 2
65383: PUSH
65384: LD_VAR 0 4
65388: PLUS
65389: PUSH
65390: LD_INT 2
65392: DIV
65393: ST_TO_ADDR
// if _y < 0 then
65394: LD_VAR 0 7
65398: PUSH
65399: LD_INT 0
65401: LESS
65402: IFFALSE 65419
// _y := _y * - 1 ;
65404: LD_ADDR_VAR 0 7
65408: PUSH
65409: LD_VAR 0 7
65413: PUSH
65414: LD_INT 1
65416: NEG
65417: MUL
65418: ST_TO_ADDR
// result := [ _x , _y ] ;
65419: LD_ADDR_VAR 0 5
65423: PUSH
65424: LD_VAR 0 6
65428: PUSH
65429: LD_VAR 0 7
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: ST_TO_ADDR
// end ;
65438: LD_VAR 0 5
65442: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65443: LD_INT 0
65445: PPUSH
65446: PPUSH
65447: PPUSH
65448: PPUSH
// task := GetTaskList ( unit ) ;
65449: LD_ADDR_VAR 0 7
65453: PUSH
65454: LD_VAR 0 1
65458: PPUSH
65459: CALL_OW 437
65463: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65464: LD_VAR 0 7
65468: NOT
65469: PUSH
65470: LD_VAR 0 1
65474: PPUSH
65475: LD_VAR 0 2
65479: PPUSH
65480: CALL_OW 308
65484: NOT
65485: AND
65486: IFFALSE 65490
// exit ;
65488: GO 65608
// if IsInArea ( unit , area ) then
65490: LD_VAR 0 1
65494: PPUSH
65495: LD_VAR 0 2
65499: PPUSH
65500: CALL_OW 308
65504: IFFALSE 65522
// begin ComMoveToArea ( unit , goAway ) ;
65506: LD_VAR 0 1
65510: PPUSH
65511: LD_VAR 0 3
65515: PPUSH
65516: CALL_OW 113
// exit ;
65520: GO 65608
// end ; if task [ 1 ] [ 1 ] <> M then
65522: LD_VAR 0 7
65526: PUSH
65527: LD_INT 1
65529: ARRAY
65530: PUSH
65531: LD_INT 1
65533: ARRAY
65534: PUSH
65535: LD_STRING M
65537: NONEQUAL
65538: IFFALSE 65542
// exit ;
65540: GO 65608
// x := task [ 1 ] [ 2 ] ;
65542: LD_ADDR_VAR 0 5
65546: PUSH
65547: LD_VAR 0 7
65551: PUSH
65552: LD_INT 1
65554: ARRAY
65555: PUSH
65556: LD_INT 2
65558: ARRAY
65559: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65560: LD_ADDR_VAR 0 6
65564: PUSH
65565: LD_VAR 0 7
65569: PUSH
65570: LD_INT 1
65572: ARRAY
65573: PUSH
65574: LD_INT 3
65576: ARRAY
65577: ST_TO_ADDR
// if InArea ( x , y , area ) then
65578: LD_VAR 0 5
65582: PPUSH
65583: LD_VAR 0 6
65587: PPUSH
65588: LD_VAR 0 2
65592: PPUSH
65593: CALL_OW 309
65597: IFFALSE 65608
// ComStop ( unit ) ;
65599: LD_VAR 0 1
65603: PPUSH
65604: CALL_OW 141
// end ;
65608: LD_VAR 0 4
65612: RET
// export function Abs ( value ) ; begin
65613: LD_INT 0
65615: PPUSH
// result := value ;
65616: LD_ADDR_VAR 0 2
65620: PUSH
65621: LD_VAR 0 1
65625: ST_TO_ADDR
// if value < 0 then
65626: LD_VAR 0 1
65630: PUSH
65631: LD_INT 0
65633: LESS
65634: IFFALSE 65651
// result := value * - 1 ;
65636: LD_ADDR_VAR 0 2
65640: PUSH
65641: LD_VAR 0 1
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: MUL
65650: ST_TO_ADDR
// end ;
65651: LD_VAR 0 2
65655: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65656: LD_INT 0
65658: PPUSH
65659: PPUSH
65660: PPUSH
65661: PPUSH
65662: PPUSH
65663: PPUSH
65664: PPUSH
65665: PPUSH
// if not unit or not building then
65666: LD_VAR 0 1
65670: NOT
65671: PUSH
65672: LD_VAR 0 2
65676: NOT
65677: OR
65678: IFFALSE 65682
// exit ;
65680: GO 65908
// x := GetX ( building ) ;
65682: LD_ADDR_VAR 0 4
65686: PUSH
65687: LD_VAR 0 2
65691: PPUSH
65692: CALL_OW 250
65696: ST_TO_ADDR
// y := GetY ( building ) ;
65697: LD_ADDR_VAR 0 6
65701: PUSH
65702: LD_VAR 0 2
65706: PPUSH
65707: CALL_OW 251
65711: ST_TO_ADDR
// d := GetDir ( building ) ;
65712: LD_ADDR_VAR 0 8
65716: PUSH
65717: LD_VAR 0 2
65721: PPUSH
65722: CALL_OW 254
65726: ST_TO_ADDR
// r := 4 ;
65727: LD_ADDR_VAR 0 9
65731: PUSH
65732: LD_INT 4
65734: ST_TO_ADDR
// for i := 1 to 5 do
65735: LD_ADDR_VAR 0 10
65739: PUSH
65740: DOUBLE
65741: LD_INT 1
65743: DEC
65744: ST_TO_ADDR
65745: LD_INT 5
65747: PUSH
65748: FOR_TO
65749: IFFALSE 65906
// begin _x := ShiftX ( x , d , r + i ) ;
65751: LD_ADDR_VAR 0 5
65755: PUSH
65756: LD_VAR 0 4
65760: PPUSH
65761: LD_VAR 0 8
65765: PPUSH
65766: LD_VAR 0 9
65770: PUSH
65771: LD_VAR 0 10
65775: PLUS
65776: PPUSH
65777: CALL_OW 272
65781: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65782: LD_ADDR_VAR 0 7
65786: PUSH
65787: LD_VAR 0 6
65791: PPUSH
65792: LD_VAR 0 8
65796: PPUSH
65797: LD_VAR 0 9
65801: PUSH
65802: LD_VAR 0 10
65806: PLUS
65807: PPUSH
65808: CALL_OW 273
65812: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65813: LD_VAR 0 5
65817: PPUSH
65818: LD_VAR 0 7
65822: PPUSH
65823: CALL_OW 488
65827: PUSH
65828: LD_VAR 0 5
65832: PPUSH
65833: LD_VAR 0 7
65837: PPUSH
65838: CALL_OW 428
65842: PPUSH
65843: CALL_OW 247
65847: PUSH
65848: LD_INT 3
65850: PUSH
65851: LD_INT 2
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: IN
65858: NOT
65859: AND
65860: IFFALSE 65904
// begin ComMoveXY ( unit , _x , _y ) ;
65862: LD_VAR 0 1
65866: PPUSH
65867: LD_VAR 0 5
65871: PPUSH
65872: LD_VAR 0 7
65876: PPUSH
65877: CALL_OW 111
// result := [ _x , _y ] ;
65881: LD_ADDR_VAR 0 3
65885: PUSH
65886: LD_VAR 0 5
65890: PUSH
65891: LD_VAR 0 7
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: ST_TO_ADDR
// exit ;
65900: POP
65901: POP
65902: GO 65908
// end ; end ;
65904: GO 65748
65906: POP
65907: POP
// end ;
65908: LD_VAR 0 3
65912: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65913: LD_INT 0
65915: PPUSH
65916: PPUSH
65917: PPUSH
// result := 0 ;
65918: LD_ADDR_VAR 0 3
65922: PUSH
65923: LD_INT 0
65925: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65926: LD_VAR 0 1
65930: PUSH
65931: LD_INT 0
65933: LESS
65934: PUSH
65935: LD_VAR 0 1
65939: PUSH
65940: LD_INT 8
65942: GREATER
65943: OR
65944: PUSH
65945: LD_VAR 0 2
65949: PUSH
65950: LD_INT 0
65952: LESS
65953: OR
65954: PUSH
65955: LD_VAR 0 2
65959: PUSH
65960: LD_INT 8
65962: GREATER
65963: OR
65964: IFFALSE 65968
// exit ;
65966: GO 66043
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65968: LD_ADDR_VAR 0 4
65972: PUSH
65973: LD_INT 22
65975: PUSH
65976: LD_VAR 0 2
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PPUSH
65985: CALL_OW 69
65989: PUSH
65990: FOR_IN
65991: IFFALSE 66041
// begin un := UnitShoot ( i ) ;
65993: LD_ADDR_VAR 0 5
65997: PUSH
65998: LD_VAR 0 4
66002: PPUSH
66003: CALL_OW 504
66007: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66008: LD_VAR 0 5
66012: PPUSH
66013: CALL_OW 255
66017: PUSH
66018: LD_VAR 0 1
66022: EQUAL
66023: IFFALSE 66039
// begin result := un ;
66025: LD_ADDR_VAR 0 3
66029: PUSH
66030: LD_VAR 0 5
66034: ST_TO_ADDR
// exit ;
66035: POP
66036: POP
66037: GO 66043
// end ; end ;
66039: GO 65990
66041: POP
66042: POP
// end ;
66043: LD_VAR 0 3
66047: RET
// export function GetCargoBay ( units ) ; begin
66048: LD_INT 0
66050: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66051: LD_ADDR_VAR 0 2
66055: PUSH
66056: LD_VAR 0 1
66060: PPUSH
66061: LD_INT 2
66063: PUSH
66064: LD_INT 34
66066: PUSH
66067: LD_INT 12
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 34
66076: PUSH
66077: LD_INT 51
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 34
66086: PUSH
66087: LD_INT 32
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 34
66096: PUSH
66097: LD_EXP 20
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: PPUSH
66113: CALL_OW 72
66117: ST_TO_ADDR
// end ;
66118: LD_VAR 0 2
66122: RET
// export function Negate ( value ) ; begin
66123: LD_INT 0
66125: PPUSH
// result := not value ;
66126: LD_ADDR_VAR 0 2
66130: PUSH
66131: LD_VAR 0 1
66135: NOT
66136: ST_TO_ADDR
// end ;
66137: LD_VAR 0 2
66141: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
66142: LD_INT 0
66144: PPUSH
// if x1 = x2 then
66145: LD_VAR 0 1
66149: PUSH
66150: LD_VAR 0 3
66154: EQUAL
66155: IFFALSE 66189
// begin if y1 > y2 then
66157: LD_VAR 0 2
66161: PUSH
66162: LD_VAR 0 4
66166: GREATER
66167: IFFALSE 66179
// result := 0 else
66169: LD_ADDR_VAR 0 5
66173: PUSH
66174: LD_INT 0
66176: ST_TO_ADDR
66177: GO 66187
// result := 3 ;
66179: LD_ADDR_VAR 0 5
66183: PUSH
66184: LD_INT 3
66186: ST_TO_ADDR
// exit ;
66187: GO 66275
// end ; if y1 = y2 then
66189: LD_VAR 0 2
66193: PUSH
66194: LD_VAR 0 4
66198: EQUAL
66199: IFFALSE 66233
// begin if x1 > x2 then
66201: LD_VAR 0 1
66205: PUSH
66206: LD_VAR 0 3
66210: GREATER
66211: IFFALSE 66223
// result := 1 else
66213: LD_ADDR_VAR 0 5
66217: PUSH
66218: LD_INT 1
66220: ST_TO_ADDR
66221: GO 66231
// result := 4 ;
66223: LD_ADDR_VAR 0 5
66227: PUSH
66228: LD_INT 4
66230: ST_TO_ADDR
// exit ;
66231: GO 66275
// end ; if x1 > x2 and y1 > y2 then
66233: LD_VAR 0 1
66237: PUSH
66238: LD_VAR 0 3
66242: GREATER
66243: PUSH
66244: LD_VAR 0 2
66248: PUSH
66249: LD_VAR 0 4
66253: GREATER
66254: AND
66255: IFFALSE 66267
// result := 2 else
66257: LD_ADDR_VAR 0 5
66261: PUSH
66262: LD_INT 2
66264: ST_TO_ADDR
66265: GO 66275
// result := 5 ;
66267: LD_ADDR_VAR 0 5
66271: PUSH
66272: LD_INT 5
66274: ST_TO_ADDR
// end ;
66275: LD_VAR 0 5
66279: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66280: LD_INT 0
66282: PPUSH
66283: PPUSH
// if not driver or not IsInUnit ( driver ) then
66284: LD_VAR 0 1
66288: NOT
66289: PUSH
66290: LD_VAR 0 1
66294: PPUSH
66295: CALL_OW 310
66299: NOT
66300: OR
66301: IFFALSE 66305
// exit ;
66303: GO 66395
// vehicle := IsInUnit ( driver ) ;
66305: LD_ADDR_VAR 0 3
66309: PUSH
66310: LD_VAR 0 1
66314: PPUSH
66315: CALL_OW 310
66319: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66320: LD_VAR 0 1
66324: PPUSH
66325: LD_STRING \
66327: PUSH
66328: LD_INT 0
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: LD_INT 0
66336: PUSH
66337: LD_INT 0
66339: PUSH
66340: LD_INT 0
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: PUSH
66355: LD_STRING E
66357: PUSH
66358: LD_INT 0
66360: PUSH
66361: LD_INT 0
66363: PUSH
66364: LD_VAR 0 3
66368: PUSH
66369: LD_INT 0
66371: PUSH
66372: LD_INT 0
66374: PUSH
66375: LD_INT 0
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PPUSH
66391: CALL_OW 446
// end ;
66395: LD_VAR 0 2
66399: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66400: LD_INT 0
66402: PPUSH
66403: PPUSH
// if not driver or not IsInUnit ( driver ) then
66404: LD_VAR 0 1
66408: NOT
66409: PUSH
66410: LD_VAR 0 1
66414: PPUSH
66415: CALL_OW 310
66419: NOT
66420: OR
66421: IFFALSE 66425
// exit ;
66423: GO 66515
// vehicle := IsInUnit ( driver ) ;
66425: LD_ADDR_VAR 0 3
66429: PUSH
66430: LD_VAR 0 1
66434: PPUSH
66435: CALL_OW 310
66439: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66440: LD_VAR 0 1
66444: PPUSH
66445: LD_STRING \
66447: PUSH
66448: LD_INT 0
66450: PUSH
66451: LD_INT 0
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: PUSH
66475: LD_STRING E
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: LD_VAR 0 3
66488: PUSH
66489: LD_INT 0
66491: PUSH
66492: LD_INT 0
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PPUSH
66511: CALL_OW 447
// end ;
66515: LD_VAR 0 2
66519: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66520: LD_INT 0
66522: PPUSH
66523: PPUSH
66524: PPUSH
// tmp := [ ] ;
66525: LD_ADDR_VAR 0 5
66529: PUSH
66530: EMPTY
66531: ST_TO_ADDR
// for i in units do
66532: LD_ADDR_VAR 0 4
66536: PUSH
66537: LD_VAR 0 1
66541: PUSH
66542: FOR_IN
66543: IFFALSE 66581
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66545: LD_ADDR_VAR 0 5
66549: PUSH
66550: LD_VAR 0 5
66554: PPUSH
66555: LD_VAR 0 5
66559: PUSH
66560: LD_INT 1
66562: PLUS
66563: PPUSH
66564: LD_VAR 0 4
66568: PPUSH
66569: CALL_OW 256
66573: PPUSH
66574: CALL_OW 2
66578: ST_TO_ADDR
66579: GO 66542
66581: POP
66582: POP
// if not tmp then
66583: LD_VAR 0 5
66587: NOT
66588: IFFALSE 66592
// exit ;
66590: GO 66640
// if asc then
66592: LD_VAR 0 2
66596: IFFALSE 66620
// result := SortListByListAsc ( units , tmp ) else
66598: LD_ADDR_VAR 0 3
66602: PUSH
66603: LD_VAR 0 1
66607: PPUSH
66608: LD_VAR 0 5
66612: PPUSH
66613: CALL_OW 76
66617: ST_TO_ADDR
66618: GO 66640
// result := SortListByListDesc ( units , tmp ) ;
66620: LD_ADDR_VAR 0 3
66624: PUSH
66625: LD_VAR 0 1
66629: PPUSH
66630: LD_VAR 0 5
66634: PPUSH
66635: CALL_OW 77
66639: ST_TO_ADDR
// end ;
66640: LD_VAR 0 3
66644: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66645: LD_INT 0
66647: PPUSH
66648: PPUSH
// task := GetTaskList ( mech ) ;
66649: LD_ADDR_VAR 0 4
66653: PUSH
66654: LD_VAR 0 1
66658: PPUSH
66659: CALL_OW 437
66663: ST_TO_ADDR
// if not task then
66664: LD_VAR 0 4
66668: NOT
66669: IFFALSE 66673
// exit ;
66671: GO 66715
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66673: LD_ADDR_VAR 0 3
66677: PUSH
66678: LD_VAR 0 4
66682: PUSH
66683: LD_INT 1
66685: ARRAY
66686: PUSH
66687: LD_INT 1
66689: ARRAY
66690: PUSH
66691: LD_STRING r
66693: EQUAL
66694: PUSH
66695: LD_VAR 0 4
66699: PUSH
66700: LD_INT 1
66702: ARRAY
66703: PUSH
66704: LD_INT 4
66706: ARRAY
66707: PUSH
66708: LD_VAR 0 2
66712: EQUAL
66713: AND
66714: ST_TO_ADDR
// end ;
66715: LD_VAR 0 3
66719: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66720: LD_INT 0
66722: PPUSH
// SetDir ( unit , d ) ;
66723: LD_VAR 0 1
66727: PPUSH
66728: LD_VAR 0 4
66732: PPUSH
66733: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66737: LD_VAR 0 1
66741: PPUSH
66742: LD_VAR 0 2
66746: PPUSH
66747: LD_VAR 0 3
66751: PPUSH
66752: LD_VAR 0 5
66756: PPUSH
66757: CALL_OW 48
// end ;
66761: LD_VAR 0 6
66765: RET
// export function ToNaturalNumber ( number ) ; begin
66766: LD_INT 0
66768: PPUSH
// result := number div 1 ;
66769: LD_ADDR_VAR 0 2
66773: PUSH
66774: LD_VAR 0 1
66778: PUSH
66779: LD_INT 1
66781: DIV
66782: ST_TO_ADDR
// if number < 0 then
66783: LD_VAR 0 1
66787: PUSH
66788: LD_INT 0
66790: LESS
66791: IFFALSE 66801
// result := 0 ;
66793: LD_ADDR_VAR 0 2
66797: PUSH
66798: LD_INT 0
66800: ST_TO_ADDR
// end ;
66801: LD_VAR 0 2
66805: RET
// export function SortByClass ( units , class ) ; var un ; begin
66806: LD_INT 0
66808: PPUSH
66809: PPUSH
// if not units or not class then
66810: LD_VAR 0 1
66814: NOT
66815: PUSH
66816: LD_VAR 0 2
66820: NOT
66821: OR
66822: IFFALSE 66826
// exit ;
66824: GO 66921
// result := [ ] ;
66826: LD_ADDR_VAR 0 3
66830: PUSH
66831: EMPTY
66832: ST_TO_ADDR
// for un in units do
66833: LD_ADDR_VAR 0 4
66837: PUSH
66838: LD_VAR 0 1
66842: PUSH
66843: FOR_IN
66844: IFFALSE 66919
// if GetClass ( un ) = class then
66846: LD_VAR 0 4
66850: PPUSH
66851: CALL_OW 257
66855: PUSH
66856: LD_VAR 0 2
66860: EQUAL
66861: IFFALSE 66888
// result := Insert ( result , 1 , un ) else
66863: LD_ADDR_VAR 0 3
66867: PUSH
66868: LD_VAR 0 3
66872: PPUSH
66873: LD_INT 1
66875: PPUSH
66876: LD_VAR 0 4
66880: PPUSH
66881: CALL_OW 2
66885: ST_TO_ADDR
66886: GO 66917
// result := Replace ( result , result + 1 , un ) ;
66888: LD_ADDR_VAR 0 3
66892: PUSH
66893: LD_VAR 0 3
66897: PPUSH
66898: LD_VAR 0 3
66902: PUSH
66903: LD_INT 1
66905: PLUS
66906: PPUSH
66907: LD_VAR 0 4
66911: PPUSH
66912: CALL_OW 1
66916: ST_TO_ADDR
66917: GO 66843
66919: POP
66920: POP
// end ;
66921: LD_VAR 0 3
66925: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66926: LD_INT 0
66928: PPUSH
66929: PPUSH
66930: PPUSH
66931: PPUSH
66932: PPUSH
66933: PPUSH
66934: PPUSH
// result := [ ] ;
66935: LD_ADDR_VAR 0 4
66939: PUSH
66940: EMPTY
66941: ST_TO_ADDR
// if x - r < 0 then
66942: LD_VAR 0 1
66946: PUSH
66947: LD_VAR 0 3
66951: MINUS
66952: PUSH
66953: LD_INT 0
66955: LESS
66956: IFFALSE 66968
// min_x := 0 else
66958: LD_ADDR_VAR 0 8
66962: PUSH
66963: LD_INT 0
66965: ST_TO_ADDR
66966: GO 66984
// min_x := x - r ;
66968: LD_ADDR_VAR 0 8
66972: PUSH
66973: LD_VAR 0 1
66977: PUSH
66978: LD_VAR 0 3
66982: MINUS
66983: ST_TO_ADDR
// if y - r < 0 then
66984: LD_VAR 0 2
66988: PUSH
66989: LD_VAR 0 3
66993: MINUS
66994: PUSH
66995: LD_INT 0
66997: LESS
66998: IFFALSE 67010
// min_y := 0 else
67000: LD_ADDR_VAR 0 7
67004: PUSH
67005: LD_INT 0
67007: ST_TO_ADDR
67008: GO 67026
// min_y := y - r ;
67010: LD_ADDR_VAR 0 7
67014: PUSH
67015: LD_VAR 0 2
67019: PUSH
67020: LD_VAR 0 3
67024: MINUS
67025: ST_TO_ADDR
// max_x := x + r ;
67026: LD_ADDR_VAR 0 9
67030: PUSH
67031: LD_VAR 0 1
67035: PUSH
67036: LD_VAR 0 3
67040: PLUS
67041: ST_TO_ADDR
// max_y := y + r ;
67042: LD_ADDR_VAR 0 10
67046: PUSH
67047: LD_VAR 0 2
67051: PUSH
67052: LD_VAR 0 3
67056: PLUS
67057: ST_TO_ADDR
// for _x = min_x to max_x do
67058: LD_ADDR_VAR 0 5
67062: PUSH
67063: DOUBLE
67064: LD_VAR 0 8
67068: DEC
67069: ST_TO_ADDR
67070: LD_VAR 0 9
67074: PUSH
67075: FOR_TO
67076: IFFALSE 67177
// for _y = min_y to max_y do
67078: LD_ADDR_VAR 0 6
67082: PUSH
67083: DOUBLE
67084: LD_VAR 0 7
67088: DEC
67089: ST_TO_ADDR
67090: LD_VAR 0 10
67094: PUSH
67095: FOR_TO
67096: IFFALSE 67173
// begin if not ValidHex ( _x , _y ) then
67098: LD_VAR 0 5
67102: PPUSH
67103: LD_VAR 0 6
67107: PPUSH
67108: CALL_OW 488
67112: NOT
67113: IFFALSE 67117
// continue ;
67115: GO 67095
// if GetResourceTypeXY ( _x , _y ) then
67117: LD_VAR 0 5
67121: PPUSH
67122: LD_VAR 0 6
67126: PPUSH
67127: CALL_OW 283
67131: IFFALSE 67171
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67133: LD_ADDR_VAR 0 4
67137: PUSH
67138: LD_VAR 0 4
67142: PPUSH
67143: LD_VAR 0 4
67147: PUSH
67148: LD_INT 1
67150: PLUS
67151: PPUSH
67152: LD_VAR 0 5
67156: PUSH
67157: LD_VAR 0 6
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PPUSH
67166: CALL_OW 1
67170: ST_TO_ADDR
// end ;
67171: GO 67095
67173: POP
67174: POP
67175: GO 67075
67177: POP
67178: POP
// end ;
67179: LD_VAR 0 4
67183: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
67184: LD_INT 0
67186: PPUSH
67187: PPUSH
67188: PPUSH
67189: PPUSH
67190: PPUSH
67191: PPUSH
// if not units then
67192: LD_VAR 0 1
67196: NOT
67197: IFFALSE 67201
// exit ;
67199: GO 67602
// result := UnitFilter ( units , [ f_ok ] ) ;
67201: LD_ADDR_VAR 0 3
67205: PUSH
67206: LD_VAR 0 1
67210: PPUSH
67211: LD_INT 50
67213: PUSH
67214: EMPTY
67215: LIST
67216: PPUSH
67217: CALL_OW 72
67221: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67222: LD_ADDR_VAR 0 7
67226: PUSH
67227: LD_VAR 0 1
67231: PUSH
67232: LD_INT 1
67234: ARRAY
67235: PPUSH
67236: CALL_OW 255
67240: ST_TO_ADDR
// if not result then
67241: LD_VAR 0 3
67245: NOT
67246: IFFALSE 67250
// exit ;
67248: GO 67602
// for i in result do
67250: LD_ADDR_VAR 0 4
67254: PUSH
67255: LD_VAR 0 3
67259: PUSH
67260: FOR_IN
67261: IFFALSE 67600
// begin tag := GetTag ( i ) + 1 ;
67263: LD_ADDR_VAR 0 8
67267: PUSH
67268: LD_VAR 0 4
67272: PPUSH
67273: CALL_OW 110
67277: PUSH
67278: LD_INT 1
67280: PLUS
67281: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67282: LD_ADDR_VAR 0 6
67286: PUSH
67287: LD_VAR 0 4
67291: PPUSH
67292: CALL_OW 250
67296: PPUSH
67297: LD_VAR 0 4
67301: PPUSH
67302: CALL_OW 251
67306: PPUSH
67307: LD_INT 6
67309: PPUSH
67310: CALL 66926 0 3
67314: ST_TO_ADDR
// if cr then
67315: LD_VAR 0 6
67319: IFFALSE 67358
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67321: LD_VAR 0 4
67325: PPUSH
67326: LD_VAR 0 6
67330: PUSH
67331: LD_INT 1
67333: ARRAY
67334: PUSH
67335: LD_INT 1
67337: ARRAY
67338: PPUSH
67339: LD_VAR 0 6
67343: PUSH
67344: LD_INT 1
67346: ARRAY
67347: PUSH
67348: LD_INT 2
67350: ARRAY
67351: PPUSH
67352: CALL_OW 116
67356: GO 67598
// if path > tag then
67358: LD_VAR 0 2
67362: PUSH
67363: LD_VAR 0 8
67367: GREATER
67368: IFFALSE 67546
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
67370: LD_ADDR_VAR 0 5
67374: PUSH
67375: LD_INT 81
67377: PUSH
67378: LD_VAR 0 7
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 91
67389: PUSH
67390: LD_VAR 0 4
67394: PUSH
67395: LD_INT 12
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: LIST
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PPUSH
67407: CALL_OW 69
67411: ST_TO_ADDR
// if enemy then
67412: LD_VAR 0 5
67416: IFFALSE 67444
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67418: LD_VAR 0 4
67422: PPUSH
67423: LD_VAR 0 5
67427: PPUSH
67428: LD_VAR 0 4
67432: PPUSH
67433: CALL_OW 74
67437: PPUSH
67438: CALL_OW 115
67442: GO 67544
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67444: LD_VAR 0 4
67448: PPUSH
67449: LD_VAR 0 2
67453: PUSH
67454: LD_VAR 0 8
67458: ARRAY
67459: PUSH
67460: LD_INT 1
67462: ARRAY
67463: PPUSH
67464: LD_VAR 0 2
67468: PUSH
67469: LD_VAR 0 8
67473: ARRAY
67474: PUSH
67475: LD_INT 2
67477: ARRAY
67478: PPUSH
67479: CALL_OW 297
67483: PUSH
67484: LD_INT 6
67486: GREATER
67487: IFFALSE 67530
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67489: LD_VAR 0 4
67493: PPUSH
67494: LD_VAR 0 2
67498: PUSH
67499: LD_VAR 0 8
67503: ARRAY
67504: PUSH
67505: LD_INT 1
67507: ARRAY
67508: PPUSH
67509: LD_VAR 0 2
67513: PUSH
67514: LD_VAR 0 8
67518: ARRAY
67519: PUSH
67520: LD_INT 2
67522: ARRAY
67523: PPUSH
67524: CALL_OW 114
67528: GO 67544
// SetTag ( i , tag ) ;
67530: LD_VAR 0 4
67534: PPUSH
67535: LD_VAR 0 8
67539: PPUSH
67540: CALL_OW 109
// end else
67544: GO 67598
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67546: LD_ADDR_VAR 0 5
67550: PUSH
67551: LD_INT 81
67553: PUSH
67554: LD_VAR 0 7
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PPUSH
67563: CALL_OW 69
67567: ST_TO_ADDR
// if enemy then
67568: LD_VAR 0 5
67572: IFFALSE 67598
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67574: LD_VAR 0 4
67578: PPUSH
67579: LD_VAR 0 5
67583: PPUSH
67584: LD_VAR 0 4
67588: PPUSH
67589: CALL_OW 74
67593: PPUSH
67594: CALL_OW 115
// end ; end ;
67598: GO 67260
67600: POP
67601: POP
// end ; end_of_file
67602: LD_VAR 0 3
67606: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67607: LD_VAR 0 1
67611: PUSH
67612: LD_INT 200
67614: DOUBLE
67615: GREATEREQUAL
67616: IFFALSE 67624
67618: LD_INT 299
67620: DOUBLE
67621: LESSEQUAL
67622: IFTRUE 67626
67624: GO 67658
67626: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67627: LD_VAR 0 1
67631: PPUSH
67632: LD_VAR 0 2
67636: PPUSH
67637: LD_VAR 0 3
67641: PPUSH
67642: LD_VAR 0 4
67646: PPUSH
67647: LD_VAR 0 5
67651: PPUSH
67652: CALL 24169 0 5
67656: GO 67735
67658: LD_INT 300
67660: DOUBLE
67661: GREATEREQUAL
67662: IFFALSE 67670
67664: LD_INT 399
67666: DOUBLE
67667: LESSEQUAL
67668: IFTRUE 67672
67670: GO 67734
67672: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67673: LD_VAR 0 1
67677: PPUSH
67678: LD_VAR 0 2
67682: PPUSH
67683: LD_VAR 0 3
67687: PPUSH
67688: LD_VAR 0 4
67692: PPUSH
67693: LD_VAR 0 5
67697: PPUSH
67698: LD_VAR 0 6
67702: PPUSH
67703: LD_VAR 0 7
67707: PPUSH
67708: LD_VAR 0 8
67712: PPUSH
67713: LD_VAR 0 9
67717: PPUSH
67718: LD_VAR 0 10
67722: PPUSH
67723: LD_VAR 0 11
67727: PPUSH
67728: CALL 22057 0 11
67732: GO 67735
67734: POP
// end ;
67735: PPOPN 11
67737: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67738: LD_VAR 0 1
67742: PPUSH
67743: LD_VAR 0 2
67747: PPUSH
67748: LD_VAR 0 3
67752: PPUSH
67753: LD_VAR 0 4
67757: PPUSH
67758: LD_VAR 0 5
67762: PPUSH
67763: CALL 24151 0 5
// end ; end_of_file
67767: PPOPN 5
67769: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67770: LD_VAR 0 1
67774: PPUSH
67775: LD_VAR 0 2
67779: PPUSH
67780: LD_VAR 0 3
67784: PPUSH
67785: LD_VAR 0 4
67789: PPUSH
67790: LD_VAR 0 5
67794: PPUSH
67795: LD_VAR 0 6
67799: PPUSH
67800: CALL 10865 0 6
// end ;
67804: PPOPN 6
67806: END
