// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10993 0 0
// PrepareAmerican ;
  19: CALL 259 0 0
// PrepareRussian ;
  23: CALL 1543 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6585 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := false ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// end ;
 104: LD_VAR 0 1
 108: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_turret ] ] ) >= 15 do
 109: LD_INT 22
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: LD_INT 3
 121: PUSH
 122: LD_INT 57
 124: PUSH
 125: EMPTY
 126: LIST
 127: PUSH
 128: EMPTY
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 30
 134: PUSH
 135: LD_INT 33
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: PPUSH
 147: CALL_OW 69
 151: PUSH
 152: LD_INT 15
 154: GREATEREQUAL
 155: IFFALSE 167
 157: GO 159
 159: DISABLE
// SetAchievement ( ACH_FORT ) ;
 160: LD_STRING ACH_FORT
 162: PPUSH
 163: CALL_OW 543
 167: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 168: LD_INT 22
 170: PUSH
 171: LD_INT 0
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: PUSH
 178: LD_INT 25
 180: PUSH
 181: LD_INT 12
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PPUSH
 192: CALL_OW 69
 196: PUSH
 197: LD_INT 0
 199: EQUAL
 200: IFFALSE 212
 202: GO 204
 204: DISABLE
// SetAchievement ( ACH_APE ) ;
 205: LD_STRING ACH_APE
 207: PPUSH
 208: CALL_OW 543
 212: END
// every 0 0$1 trigger killCounter >= 20 do
 213: LD_EXP 5
 217: PUSH
 218: LD_INT 20
 220: GREATEREQUAL
 221: IFFALSE 233
 223: GO 225
 225: DISABLE
// SetAchievement ( ACH_DOUBLE ) ;
 226: LD_STRING ACH_DOUBLE
 228: PPUSH
 229: CALL_OW 543
 233: END
// every 0 0$1 trigger IsInArea ( JMMVeh , kappaBaseArea ) do
 234: LD_EXP 9
 238: PPUSH
 239: LD_INT 15
 241: PPUSH
 242: CALL_OW 308
 246: IFFALSE 258
 248: GO 250
 250: DISABLE
// SetAchievement ( ACH_AMASHA ) ; end_of_file
 251: LD_STRING ACH_AMASHA
 253: PPUSH
 254: CALL_OW 543
 258: END
// export JMM , JMMVeh , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 259: LD_INT 0
 261: PPUSH
 262: PPUSH
 263: PPUSH
 264: PPUSH
 265: PPUSH
// uc_side := 1 ;
 266: LD_ADDR_OWVAR 20
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// uc_nation := 1 ;
 274: LD_ADDR_OWVAR 21
 278: PUSH
 279: LD_INT 1
 281: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 282: LD_INT 48
 284: PPUSH
 285: LD_STRING deltakappa
 287: PPUSH
 288: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 292: LD_INT 48
 294: PPUSH
 295: CALL_OW 274
 299: PPUSH
 300: LD_INT 1
 302: PPUSH
 303: LD_INT 2000
 305: PUSH
 306: LD_INT 1600
 308: PUSH
 309: LD_INT 1200
 311: PUSH
 312: LD_INT 900
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: PUSH
 321: LD_OWVAR 67
 325: ARRAY
 326: PPUSH
 327: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 331: LD_INT 48
 333: PPUSH
 334: CALL_OW 274
 338: PPUSH
 339: LD_INT 2
 341: PPUSH
 342: LD_INT 20
 344: PPUSH
 345: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 349: LD_INT 48
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 3
 359: PPUSH
 360: LD_INT 100
 362: PPUSH
 363: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 367: LD_ADDR_EXP 8
 371: PUSH
 372: LD_STRING JMM
 374: PPUSH
 375: LD_EXP 1
 379: NOT
 380: PPUSH
 381: LD_STRING 13f_
 383: PPUSH
 384: CALL 33073 0 3
 388: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 389: LD_EXP 8
 393: PPUSH
 394: LD_INT 1
 396: PPUSH
 397: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 401: LD_INT 5
 403: PUSH
 404: LD_INT 5
 406: PUSH
 407: LD_INT 3
 409: PUSH
 410: LD_INT 3
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 9
 433: PUSH
 434: LD_INT 9
 436: PUSH
 437: LD_INT 5
 439: PUSH
 440: LD_INT 5
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: LD_OWVAR 67
 453: ARRAY
 454: PPUSH
 455: LD_INT 100
 457: PPUSH
 458: CALL 38035 0 5
// JMMVeh := CreateVehicle ;
 462: LD_ADDR_EXP 9
 466: PUSH
 467: CALL_OW 45
 471: ST_TO_ADDR
// SetDir ( JMMVeh , 1 ) ;
 472: LD_EXP 9
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL_OW 233
// PlaceUnitXY ( JMMVeh , 6 , 5 , false ) ;
 484: LD_EXP 9
 488: PPUSH
 489: LD_INT 6
 491: PPUSH
 492: LD_INT 5
 494: PPUSH
 495: LD_INT 0
 497: PPUSH
 498: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 502: LD_EXP 8
 506: PPUSH
 507: LD_EXP 9
 511: PPUSH
 512: CALL_OW 52
// SetMark ( JMMVeh , - 1 ) ;
 516: LD_EXP 9
 520: PPUSH
 521: LD_INT 1
 523: NEG
 524: PPUSH
 525: CALL_OW 242
// ComMoveXY ( JMMVeh , 21 , 8 ) ;
 529: LD_EXP 9
 533: PPUSH
 534: LD_INT 21
 536: PPUSH
 537: LD_INT 8
 539: PPUSH
 540: CALL_OW 111
// uc_side := 4 ;
 544: LD_ADDR_OWVAR 20
 548: PUSH
 549: LD_INT 4
 551: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 552: LD_ADDR_EXP 13
 556: PUSH
 557: LD_STRING Powell
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: LD_STRING 
 565: PPUSH
 566: CALL 33073 0 3
 570: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 571: LD_ADDR_EXP 10
 575: PUSH
 576: LD_STRING Joan
 578: PPUSH
 579: LD_EXP 1
 583: NOT
 584: PPUSH
 585: LD_STRING 10c_
 587: PPUSH
 588: CALL 33073 0 3
 592: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 593: LD_ADDR_EXP 11
 597: PUSH
 598: LD_STRING Lisa
 600: PPUSH
 601: LD_EXP 1
 605: NOT
 606: PPUSH
 607: LD_STRING 13s_
 609: PPUSH
 610: CALL 33073 0 3
 614: ST_TO_ADDR
// if Joan then
 615: LD_EXP 10
 619: IFFALSE 658
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 621: LD_EXP 10
 625: PPUSH
 626: LD_INT 4
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 636: LD_EXP 10
 640: PPUSH
 641: LD_INT 4
 643: PPUSH
 644: CALL_OW 336
// JMMGirl = 1 ;
 648: LD_ADDR_EXP 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// end else
 656: GO 749
// if Lisa then
 658: LD_EXP 11
 662: IFFALSE 701
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 664: LD_EXP 11
 668: PPUSH
 669: LD_INT 4
 671: PPUSH
 672: LD_INT 0
 674: PPUSH
 675: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 679: LD_EXP 11
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: CALL_OW 336
// JMMGirl := 2 ;
 691: LD_ADDR_EXP 2
 695: PUSH
 696: LD_INT 2
 698: ST_TO_ADDR
// end else
 699: GO 749
// begin Connie := NewCharacter ( Coonie ) ;
 701: LD_ADDR_EXP 12
 705: PUSH
 706: LD_STRING Coonie
 708: PPUSH
 709: CALL_OW 25
 713: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 714: LD_EXP 12
 718: PPUSH
 719: LD_INT 4
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 729: LD_EXP 12
 733: PPUSH
 734: LD_INT 3
 736: PPUSH
 737: CALL_OW 336
// JMMGirl := 3 ;
 741: LD_ADDR_EXP 2
 745: PUSH
 746: LD_INT 3
 748: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 749: LD_ADDR_VAR 0 2
 753: PUSH
 754: DOUBLE
 755: LD_INT 1
 757: DEC
 758: ST_TO_ADDR
 759: LD_INT 4
 761: PUSH
 762: LD_INT 3
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: PUSH
 777: LD_OWVAR 67
 781: ARRAY
 782: PUSH
 783: FOR_TO
 784: IFFALSE 938
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 786: LD_INT 4
 788: PUSH
 789: LD_INT 3
 791: PUSH
 792: LD_INT 2
 794: PUSH
 795: LD_INT 3
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 2
 808: PUSH
 809: LD_INT 4
 811: MOD
 812: PUSH
 813: LD_INT 1
 815: PLUS
 816: ARRAY
 817: PPUSH
 818: LD_INT 1
 820: PPUSH
 821: LD_INT 2
 823: PPUSH
 824: LD_INT 9
 826: PUSH
 827: LD_INT 7
 829: PUSH
 830: LD_INT 4
 832: PUSH
 833: LD_INT 5
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PUSH
 842: LD_VAR 0 2
 846: PUSH
 847: LD_INT 4
 849: MOD
 850: PUSH
 851: LD_INT 1
 853: PLUS
 854: ARRAY
 855: PPUSH
 856: LD_INT 33
 858: PPUSH
 859: LD_INT 55
 861: PPUSH
 862: CALL_OW 12
 866: PPUSH
 867: CALL 38035 0 5
// veh := CreateVehicle ;
 871: LD_ADDR_VAR 0 4
 875: PUSH
 876: CALL_OW 45
 880: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 881: LD_VAR 0 4
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: LD_INT 5
 891: PPUSH
 892: CALL_OW 12
 896: PPUSH
 897: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 901: LD_VAR 0 4
 905: PPUSH
 906: LD_INT 500
 908: PPUSH
 909: LD_INT 950
 911: PPUSH
 912: CALL_OW 12
 916: PPUSH
 917: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 921: LD_VAR 0 4
 925: PPUSH
 926: LD_INT 5
 928: PPUSH
 929: LD_INT 0
 931: PPUSH
 932: CALL_OW 49
// end ;
 936: GO 783
 938: POP
 939: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 940: LD_ADDR_VAR 0 2
 944: PUSH
 945: DOUBLE
 946: LD_INT 1
 948: DEC
 949: ST_TO_ADDR
 950: LD_INT 3
 952: PUSH
 953: LD_INT 3
 955: PUSH
 956: LD_INT 2
 958: PUSH
 959: LD_INT 2
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: LIST
 966: LIST
 967: PUSH
 968: LD_OWVAR 67
 972: ARRAY
 973: PUSH
 974: FOR_TO
 975: IFFALSE 1097
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 977: LD_INT 3
 979: PUSH
 980: LD_INT 2
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: PUSH
 987: LD_VAR 0 2
 991: PUSH
 992: LD_INT 2
 994: MOD
 995: PUSH
 996: LD_INT 1
 998: PLUS
 999: ARRAY
1000: PPUSH
1001: LD_INT 1
1003: PPUSH
1004: LD_INT 3
1006: PPUSH
1007: LD_INT 9
1009: PUSH
1010: LD_INT 5
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PUSH
1017: LD_VAR 0 2
1021: PUSH
1022: LD_INT 2
1024: MOD
1025: PUSH
1026: LD_INT 1
1028: PLUS
1029: ARRAY
1030: PPUSH
1031: LD_INT 0
1033: PPUSH
1034: CALL 38035 0 5
// veh := CreateVehicle ;
1038: LD_ADDR_VAR 0 4
1042: PUSH
1043: CALL_OW 45
1047: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1048: LD_VAR 0 4
1052: PPUSH
1053: LD_INT 0
1055: PPUSH
1056: LD_INT 5
1058: PPUSH
1059: CALL_OW 12
1063: PPUSH
1064: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1068: LD_VAR 0 4
1072: PPUSH
1073: LD_INT 1000
1075: PPUSH
1076: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1080: LD_VAR 0 4
1084: PPUSH
1085: LD_INT 17
1087: PPUSH
1088: LD_INT 0
1090: PPUSH
1091: CALL_OW 49
// end ;
1095: GO 974
1097: POP
1098: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1099: LD_ADDR_VAR 0 2
1103: PUSH
1104: DOUBLE
1105: LD_INT 1
1107: DEC
1108: ST_TO_ADDR
1109: LD_INT 3
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 1
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_OWVAR 67
1131: ARRAY
1132: PUSH
1133: FOR_TO
1134: IFFALSE 1182
// begin PrepareApeman ( 1 ) ;
1136: LD_INT 1
1138: PPUSH
1139: CALL 67332 0 1
// uc_side := 4 ;
1143: LD_ADDR_OWVAR 20
1147: PUSH
1148: LD_INT 4
1150: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1151: LD_ADDR_OWVAR 28
1155: PUSH
1156: LD_INT 16
1158: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1159: CALL_OW 44
1163: PPUSH
1164: LD_INT 84
1166: PPUSH
1167: LD_INT 127
1169: PPUSH
1170: LD_INT 5
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: CALL_OW 50
// end ;
1180: GO 1133
1182: POP
1183: POP
// uc_side := 4 ;
1184: LD_ADDR_OWVAR 20
1188: PUSH
1189: LD_INT 4
1191: ST_TO_ADDR
// uc_nation := 1 ;
1192: LD_ADDR_OWVAR 21
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1200: LD_INT 2
1202: PPUSH
1203: LD_INT 3
1205: PPUSH
1206: LD_INT 1
1208: PPUSH
1209: LD_INT 12
1211: PPUSH
1212: LD_INT 100
1214: PPUSH
1215: CALL 38035 0 5
// veh := CreateVehicle ;
1219: LD_ADDR_VAR 0 4
1223: PUSH
1224: CALL_OW 45
1228: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1229: LD_VAR 0 4
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: LD_INT 100
1239: PPUSH
1240: CALL_OW 290
// SetLives ( veh , 450 ) ;
1244: LD_VAR 0 4
1248: PPUSH
1249: LD_INT 450
1251: PPUSH
1252: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1256: LD_VAR 0 4
1260: PPUSH
1261: LD_INT 122
1263: PPUSH
1264: LD_INT 118
1266: PPUSH
1267: LD_INT 4
1269: PPUSH
1270: LD_INT 0
1272: PPUSH
1273: CALL 73365 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1277: LD_INT 1
1279: PPUSH
1280: LD_INT 2
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1290: CALL_OW 44
1294: PPUSH
1295: LD_INT 124
1297: PPUSH
1298: LD_INT 120
1300: PPUSH
1301: LD_INT 1
1303: PPUSH
1304: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_INT 18
1315: PPUSH
1316: LD_INT 0
1318: PPUSH
1319: CALL_OW 517
1323: ST_TO_ADDR
// for i := 1 to 4 do
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: DOUBLE
1330: LD_INT 1
1332: DEC
1333: ST_TO_ADDR
1334: LD_INT 4
1336: PUSH
1337: FOR_TO
1338: IFFALSE 1446
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1340: LD_INT 1
1342: PPUSH
1343: LD_INT 1
1345: PUSH
1346: LD_INT 3
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: PUSH
1353: LD_INT 1
1355: PPUSH
1356: LD_INT 2
1358: PPUSH
1359: CALL_OW 12
1363: ARRAY
1364: PPUSH
1365: LD_INT 0
1367: PPUSH
1368: CALL_OW 380
// un := CreateHuman ;
1372: LD_ADDR_VAR 0 3
1376: PUSH
1377: CALL_OW 44
1381: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1382: LD_VAR 0 3
1386: PPUSH
1387: LD_INT 0
1389: PPUSH
1390: LD_INT 5
1392: PPUSH
1393: CALL_OW 12
1397: PPUSH
1398: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1402: LD_VAR 0 3
1406: PPUSH
1407: LD_VAR 0 5
1411: PUSH
1412: LD_INT 1
1414: ARRAY
1415: PUSH
1416: LD_VAR 0 2
1420: ARRAY
1421: PPUSH
1422: LD_VAR 0 5
1426: PUSH
1427: LD_INT 2
1429: ARRAY
1430: PUSH
1431: LD_VAR 0 2
1435: ARRAY
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL_OW 601
// end ;
1444: GO 1337
1446: POP
1447: POP
// end ;
1448: LD_VAR 0 1
1452: RET
// export function ChangeSideKappaBase ; begin
1453: LD_INT 0
1455: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1456: LD_INT 70
1458: PPUSH
1459: LD_INT 138
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: LD_INT 80
1467: NEG
1468: PPUSH
1469: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1473: LD_INT 70
1475: PPUSH
1476: LD_INT 138
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1486: LD_INT 147
1488: PPUSH
1489: LD_INT 122
1491: PPUSH
1492: LD_INT 1
1494: PPUSH
1495: LD_INT 40
1497: NEG
1498: PPUSH
1499: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1503: LD_INT 147
1505: PPUSH
1506: LD_INT 122
1508: PPUSH
1509: LD_INT 1
1511: PPUSH
1512: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1516: LD_INT 22
1518: PUSH
1519: LD_INT 4
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: PPUSH
1531: LD_INT 1
1533: PPUSH
1534: CALL_OW 235
// end ; end_of_file
1538: LD_VAR 0 1
1542: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1543: LD_INT 0
1545: PPUSH
1546: PPUSH
1547: PPUSH
1548: PPUSH
1549: PPUSH
1550: PPUSH
// uc_side := 3 ;
1551: LD_ADDR_OWVAR 20
1555: PUSH
1556: LD_INT 3
1558: ST_TO_ADDR
// uc_nation := 3 ;
1559: LD_ADDR_OWVAR 21
1563: PUSH
1564: LD_INT 3
1566: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1567: LD_ADDR_EXP 15
1571: PUSH
1572: LD_INT 8
1574: PUSH
1575: LD_INT 11
1577: PUSH
1578: LD_INT 14
1580: PUSH
1581: LD_INT 17
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: LD_OWVAR 67
1594: ARRAY
1595: ST_TO_ADDR
// ruMobile := [ ] ;
1596: LD_ADDR_EXP 16
1600: PUSH
1601: EMPTY
1602: ST_TO_ADDR
// ruBuildList := [ ] ;
1603: LD_ADDR_EXP 17
1607: PUSH
1608: EMPTY
1609: ST_TO_ADDR
// ruAttackers := [ ] ;
1610: LD_ADDR_EXP 18
1614: PUSH
1615: EMPTY
1616: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1617: LD_ADDR_EXP 19
1621: PUSH
1622: LD_INT 3
1624: PPUSH
1625: LD_INT 3
1627: PPUSH
1628: LD_INT 1
1630: PPUSH
1631: CALL 33220 0 3
1635: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1636: LD_ADDR_VAR 0 6
1640: PUSH
1641: LD_INT 43
1643: PUSH
1644: LD_INT 46
1646: PUSH
1647: LD_INT 45
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: LIST
1654: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1655: LD_ADDR_EXP 20
1659: PUSH
1660: LD_INT 46
1662: PUSH
1663: LD_INT 70
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 121
1672: PUSH
1673: LD_INT 95
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: LD_INT 68
1682: PUSH
1683: LD_INT 65
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: LIST
1694: ST_TO_ADDR
// if not russianRocketsDisabled then
1695: LD_EXP 6
1699: NOT
1700: IFFALSE 1716
// weapons := weapons ^ ru_rocket ;
1702: LD_ADDR_VAR 0 6
1706: PUSH
1707: LD_VAR 0 6
1711: PUSH
1712: LD_INT 47
1714: ADD
1715: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1716: LD_ADDR_EXP 14
1720: PUSH
1721: LD_STRING Eisenstein
1723: PPUSH
1724: CALL_OW 25
1728: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1729: LD_EXP 14
1733: PPUSH
1734: LD_INT 22
1736: PPUSH
1737: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 2250 , 3500 , 4500 , 5600 ] [ Difficulty ] ) ;
1741: LD_INT 22
1743: PPUSH
1744: CALL_OW 274
1748: PPUSH
1749: LD_INT 1
1751: PPUSH
1752: LD_INT 2250
1754: PUSH
1755: LD_INT 3500
1757: PUSH
1758: LD_INT 4500
1760: PUSH
1761: LD_INT 5600
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: PUSH
1770: LD_OWVAR 67
1774: ARRAY
1775: PPUSH
1776: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1780: LD_INT 22
1782: PPUSH
1783: CALL_OW 274
1787: PPUSH
1788: LD_INT 2
1790: PPUSH
1791: LD_INT 600
1793: PPUSH
1794: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1798: LD_INT 22
1800: PPUSH
1801: CALL_OW 274
1805: PPUSH
1806: LD_INT 3
1808: PPUSH
1809: LD_INT 100
1811: PPUSH
1812: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1816: LD_INT 116
1818: PPUSH
1819: LD_INT 46
1821: PPUSH
1822: LD_INT 70
1824: PPUSH
1825: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1829: LD_ADDR_VAR 0 2
1833: PUSH
1834: LD_INT 22
1836: PUSH
1837: LD_INT 3
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 21
1846: PUSH
1847: LD_INT 3
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PPUSH
1858: CALL_OW 69
1862: PUSH
1863: FOR_IN
1864: IFFALSE 1886
// SetBLevel ( i , 6 + Difficulty ) ;
1866: LD_VAR 0 2
1870: PPUSH
1871: LD_INT 6
1873: PUSH
1874: LD_OWVAR 67
1878: PLUS
1879: PPUSH
1880: CALL_OW 241
1884: GO 1863
1886: POP
1887: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1888: LD_ADDR_VAR 0 4
1892: PUSH
1893: LD_INT 22
1895: PUSH
1896: LD_INT 3
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: PUSH
1903: LD_INT 2
1905: PUSH
1906: LD_INT 30
1908: PUSH
1909: LD_INT 32
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: LD_INT 30
1918: PUSH
1919: LD_INT 33
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: LIST
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PPUSH
1935: CALL_OW 69
1939: ST_TO_ADDR
// if russianRocketsDisabled then
1940: LD_EXP 6
1944: IFFALSE 2020
// begin ruTechList := ruTechList diff tech_advrocket ;
1946: LD_ADDR_EXP 19
1950: PUSH
1951: LD_EXP 19
1955: PUSH
1956: LD_INT 71
1958: DIFF
1959: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: LD_VAR 0 4
1969: PPUSH
1970: LD_INT 35
1972: PUSH
1973: LD_INT 47
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PPUSH
1980: CALL_OW 72
1984: PUSH
1985: FOR_IN
1986: IFFALSE 2018
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: LD_VAR 0 6
1997: PUSH
1998: LD_INT 1
2000: PPUSH
2001: LD_VAR 0 6
2005: PPUSH
2006: CALL_OW 12
2010: ARRAY
2011: PPUSH
2012: CALL_OW 431
2016: GO 1985
2018: POP
2019: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2020: LD_ADDR_VAR 0 2
2024: PUSH
2025: LD_INT 22
2027: PUSH
2028: LD_INT 3
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 30
2037: PUSH
2038: LD_INT 32
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PPUSH
2049: CALL_OW 69
2053: PUSH
2054: FOR_IN
2055: IFFALSE 2104
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2057: LD_INT 0
2059: PPUSH
2060: LD_INT 5
2062: PUSH
2063: LD_INT 6
2065: PUSH
2066: LD_INT 7
2068: PUSH
2069: LD_INT 8
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: LD_OWVAR 67
2082: ARRAY
2083: PPUSH
2084: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2088: CALL_OW 44
2092: PPUSH
2093: LD_VAR 0 2
2097: PPUSH
2098: CALL_OW 52
// end ;
2102: GO 2054
2104: POP
2105: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_INT 22
2113: PUSH
2114: LD_INT 3
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: LD_INT 30
2123: PUSH
2124: LD_INT 5
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PPUSH
2135: CALL_OW 69
2139: PUSH
2140: FOR_IN
2141: IFFALSE 2275
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: DOUBLE
2149: LD_INT 1
2151: DEC
2152: ST_TO_ADDR
2153: LD_INT 2
2155: PUSH
2156: LD_INT 2
2158: PUSH
2159: LD_INT 3
2161: PUSH
2162: LD_INT 3
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: PUSH
2171: LD_OWVAR 67
2175: ARRAY
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2271
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 5
2185: PUSH
2186: LD_INT 6
2188: PUSH
2189: LD_INT 7
2191: PUSH
2192: LD_INT 8
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: LD_OWVAR 67
2205: ARRAY
2206: PPUSH
2207: CALL_OW 381
// un := CreateHuman ;
2211: LD_ADDR_VAR 0 5
2215: PUSH
2216: CALL_OW 44
2220: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_VAR 0 2
2230: PPUSH
2231: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
2235: LD_VAR 0 5
2239: PPUSH
2240: LD_INT 9
2242: PPUSH
2243: CALL_OW 336
// if j = 2 then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 2
2254: EQUAL
2255: IFFALSE 2269
// SetUnitAttackType ( un , 3 ) ;
2257: LD_VAR 0 5
2261: PPUSH
2262: LD_INT 3
2264: PPUSH
2265: CALL_OW 603
// end ;
2269: GO 2177
2271: POP
2272: POP
// end ;
2273: GO 2140
2275: POP
2276: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: DOUBLE
2283: LD_INT 1
2285: DEC
2286: ST_TO_ADDR
2287: LD_INT 5
2289: PUSH
2290: LD_INT 6
2292: PUSH
2293: LD_INT 6
2295: PUSH
2296: LD_INT 6
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: PUSH
2305: LD_OWVAR 67
2309: ARRAY
2310: PUSH
2311: FOR_TO
2312: IFFALSE 2359
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2314: LD_INT 0
2316: PPUSH
2317: LD_INT 6
2319: PUSH
2320: LD_INT 7
2322: PUSH
2323: LD_INT 9
2325: PUSH
2326: LD_INT 10
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: PUSH
2335: LD_OWVAR 67
2339: ARRAY
2340: PPUSH
2341: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2345: CALL_OW 44
2349: PPUSH
2350: LD_INT 22
2352: PPUSH
2353: CALL_OW 52
// end ;
2357: GO 2311
2359: POP
2360: POP
// for i := 1 to 2 do
2361: LD_ADDR_VAR 0 2
2365: PUSH
2366: DOUBLE
2367: LD_INT 1
2369: DEC
2370: ST_TO_ADDR
2371: LD_INT 2
2373: PUSH
2374: FOR_TO
2375: IFFALSE 2455
// for j := 1 to 6 do
2377: LD_ADDR_VAR 0 3
2381: PUSH
2382: DOUBLE
2383: LD_INT 1
2385: DEC
2386: ST_TO_ADDR
2387: LD_INT 6
2389: PUSH
2390: FOR_TO
2391: IFFALSE 2451
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2393: LD_INT 0
2395: PPUSH
2396: LD_INT 6
2398: PUSH
2399: LD_INT 7
2401: PUSH
2402: LD_INT 9
2404: PUSH
2405: LD_INT 10
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: PUSH
2414: LD_OWVAR 67
2418: ARRAY
2419: PPUSH
2420: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2424: CALL_OW 44
2428: PPUSH
2429: LD_INT 1
2431: PUSH
2432: LD_INT 40
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: PUSH
2439: LD_VAR 0 2
2443: ARRAY
2444: PPUSH
2445: CALL_OW 52
// end ;
2449: GO 2390
2451: POP
2452: POP
2453: GO 2374
2455: POP
2456: POP
// for i := 1 to 4 do
2457: LD_ADDR_VAR 0 2
2461: PUSH
2462: DOUBLE
2463: LD_INT 1
2465: DEC
2466: ST_TO_ADDR
2467: LD_INT 4
2469: PUSH
2470: FOR_TO
2471: IFFALSE 2518
// begin PrepareScientist ( false , 6 ) ;
2473: LD_INT 0
2475: PPUSH
2476: LD_INT 6
2478: PPUSH
2479: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2483: CALL_OW 44
2487: PPUSH
2488: LD_INT 14
2490: PUSH
2491: LD_INT 15
2493: PUSH
2494: EMPTY
2495: LIST
2496: LIST
2497: PUSH
2498: LD_VAR 0 2
2502: PUSH
2503: LD_INT 2
2505: MOD
2506: PUSH
2507: LD_INT 1
2509: PLUS
2510: ARRAY
2511: PPUSH
2512: CALL_OW 52
// end ;
2516: GO 2470
2518: POP
2519: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2520: LD_INT 22
2522: PPUSH
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 3
2528: PPUSH
2529: LD_INT 51
2531: PPUSH
2532: LD_INT 100
2534: PPUSH
2535: CALL 38035 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2539: CALL_OW 45
2543: PPUSH
2544: LD_INT 116
2546: PPUSH
2547: LD_INT 58
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: LD_INT 0
2555: PPUSH
2556: CALL_OW 50
// for i := 1 to 2 do
2560: LD_ADDR_VAR 0 2
2564: PUSH
2565: DOUBLE
2566: LD_INT 1
2568: DEC
2569: ST_TO_ADDR
2570: LD_INT 2
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2618
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2576: LD_INT 22
2578: PPUSH
2579: LD_INT 3
2581: PPUSH
2582: LD_INT 3
2584: PPUSH
2585: LD_INT 52
2587: PPUSH
2588: LD_INT 100
2590: PPUSH
2591: CALL 38035 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2595: CALL_OW 45
2599: PPUSH
2600: LD_INT 111
2602: PPUSH
2603: LD_INT 58
2605: PPUSH
2606: LD_INT 4
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: CALL_OW 50
// end ;
2616: GO 2573
2618: POP
2619: POP
// for i := 1 to 4 do
2620: LD_ADDR_VAR 0 2
2624: PUSH
2625: DOUBLE
2626: LD_INT 1
2628: DEC
2629: ST_TO_ADDR
2630: LD_INT 4
2632: PUSH
2633: FOR_TO
2634: IFFALSE 2663
// begin PrepareApemanEngineer ( ) ;
2636: CALL 67230 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2640: CALL_OW 44
2644: PPUSH
2645: LD_INT 118
2647: PPUSH
2648: LD_INT 50
2650: PPUSH
2651: LD_INT 3
2653: PPUSH
2654: LD_INT 0
2656: PPUSH
2657: CALL_OW 50
// end ;
2661: GO 2633
2663: POP
2664: POP
// end ;
2665: LD_VAR 0 1
2669: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2670: LD_EXP 19
2674: IFFALSE 2802
2676: GO 2678
2678: DISABLE
2679: LD_INT 0
2681: PPUSH
2682: PPUSH
2683: PPUSH
// begin enable ;
2684: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2685: LD_ADDR_VAR 0 3
2689: PUSH
2690: LD_INT 14
2692: PUSH
2693: LD_INT 15
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PPUSH
2700: LD_INT 50
2702: PUSH
2703: EMPTY
2704: LIST
2705: PPUSH
2706: CALL_OW 72
2710: ST_TO_ADDR
// if not labs then
2711: LD_VAR 0 3
2715: NOT
2716: IFFALSE 2721
// begin disable ;
2718: DISABLE
// exit ;
2719: GO 2802
// end ; for i in labs do
2721: LD_ADDR_VAR 0 1
2725: PUSH
2726: LD_VAR 0 3
2730: PUSH
2731: FOR_IN
2732: IFFALSE 2800
// if BuildingStatus ( i ) = bs_idle then
2734: LD_VAR 0 1
2738: PPUSH
2739: CALL_OW 461
2743: PUSH
2744: LD_INT 2
2746: EQUAL
2747: IFFALSE 2798
// for t in ruTechList do
2749: LD_ADDR_VAR 0 2
2753: PUSH
2754: LD_EXP 19
2758: PUSH
2759: FOR_IN
2760: IFFALSE 2796
// if CanBeResearched ( i , t ) then
2762: LD_VAR 0 1
2766: PPUSH
2767: LD_VAR 0 2
2771: PPUSH
2772: CALL_OW 430
2776: IFFALSE 2794
// begin ComResearch ( i , t ) ;
2778: LD_VAR 0 1
2782: PPUSH
2783: LD_VAR 0 2
2787: PPUSH
2788: CALL_OW 124
// break ;
2792: GO 2796
// end ;
2794: GO 2759
2796: POP
2797: POP
2798: GO 2731
2800: POP
2801: POP
// end ;
2802: PPOPN 3
2804: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2805: LD_INT 3
2807: PUSH
2808: LD_INT 22
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 32
2824: PUSH
2825: LD_INT 1
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PPUSH
2836: CALL_OW 69
2840: IFFALSE 2924
2842: GO 2844
2844: DISABLE
2845: LD_INT 0
2847: PPUSH
// begin enable ;
2848: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2849: LD_ADDR_VAR 0 1
2853: PUSH
2854: LD_INT 3
2856: PUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: LD_INT 32
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PPUSH
2885: CALL_OW 69
2889: PUSH
2890: FOR_IN
2891: IFFALSE 2922
// if GetFuel ( i ) < 3 then
2893: LD_VAR 0 1
2897: PPUSH
2898: CALL_OW 261
2902: PUSH
2903: LD_INT 3
2905: LESS
2906: IFFALSE 2920
// SetFuel ( i , 3 ) ;
2908: LD_VAR 0 1
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: CALL_OW 240
2920: GO 2890
2922: POP
2923: POP
// end ;
2924: PPOPN 1
2926: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ [ f_not , [ f_empty ] ] , [ f_ok ] ] ) and ruAttackers < [ 6 , 8 , 10 , 12 ] [ Difficulty ] do var i , chassis , weapon ;
2927: LD_INT 1
2929: PUSH
2930: LD_INT 40
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: LD_INT 3
2939: PUSH
2940: LD_INT 58
2942: PUSH
2943: EMPTY
2944: LIST
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: PUSH
2950: LD_INT 50
2952: PUSH
2953: EMPTY
2954: LIST
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: PPUSH
2960: CALL_OW 72
2964: IFFALSE 2997
2966: PUSH
2967: LD_EXP 18
2971: PUSH
2972: LD_INT 6
2974: PUSH
2975: LD_INT 8
2977: PUSH
2978: LD_INT 10
2980: PUSH
2981: LD_INT 12
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: PUSH
2990: LD_OWVAR 67
2994: ARRAY
2995: LESS
2996: AND
2997: IFFALSE 3336
2999: GO 3001
3001: DISABLE
3002: LD_INT 0
3004: PPUSH
3005: PPUSH
3006: PPUSH
// begin enable ;
3007: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
3008: LD_ADDR_VAR 0 1
3012: PUSH
3013: LD_INT 1
3015: PUSH
3016: LD_INT 40
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: LD_INT 50
3025: PUSH
3026: EMPTY
3027: LIST
3028: PPUSH
3029: CALL_OW 72
3033: PUSH
3034: FOR_IN
3035: IFFALSE 3334
// begin if BuildingStatus ( i ) <> bs_idle then
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 461
3046: PUSH
3047: LD_INT 2
3049: NONEQUAL
3050: IFFALSE 3054
// continue ;
3052: GO 3034
// if i = ruFac1 then
3054: LD_VAR 0 1
3058: PUSH
3059: LD_INT 1
3061: EQUAL
3062: IFFALSE 3105
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3064: LD_ADDR_VAR 0 2
3068: PUSH
3069: LD_INT 21
3071: PUSH
3072: LD_INT 22
3074: PUSH
3075: LD_INT 23
3077: PUSH
3078: LD_INT 23
3080: PUSH
3081: LD_INT 24
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: PUSH
3091: LD_INT 1
3093: PPUSH
3094: LD_INT 5
3096: PPUSH
3097: CALL_OW 12
3101: ARRAY
3102: ST_TO_ADDR
3103: GO 3132
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3105: LD_ADDR_VAR 0 2
3109: PUSH
3110: LD_INT 21
3112: PUSH
3113: LD_INT 23
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_INT 2
3125: PPUSH
3126: CALL_OW 12
3130: ARRAY
3131: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3132: LD_ADDR_VAR 0 3
3136: PUSH
3137: LD_INT 49
3139: PUSH
3140: LD_INT 44
3142: PUSH
3143: LD_INT 43
3145: PUSH
3146: LD_INT 46
3148: PUSH
3149: LD_INT 45
3151: PUSH
3152: LD_INT 46
3154: PUSH
3155: LD_INT 45
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: ST_TO_ADDR
// if not russianRocketsDisabled then
3167: LD_EXP 6
3171: NOT
3172: IFFALSE 3192
// weapon := Join ( weapon , ru_rocket ) ;
3174: LD_ADDR_VAR 0 3
3178: PUSH
3179: LD_VAR 0 3
3183: PPUSH
3184: LD_INT 47
3186: PPUSH
3187: CALL 71205 0 2
3191: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , Count ( weapon ) ) ] ;
3192: LD_ADDR_VAR 0 3
3196: PUSH
3197: LD_VAR 0 3
3201: PUSH
3202: LD_INT 1
3204: PPUSH
3205: LD_VAR 0 3
3209: PPUSH
3210: CALL 35273 0 1
3214: PPUSH
3215: CALL_OW 12
3219: ARRAY
3220: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3221: LD_VAR 0 2
3225: PUSH
3226: LD_INT 21
3228: PUSH
3229: LD_INT 22
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: IN
3236: IFFALSE 3255
3238: PUSH
3239: LD_VAR 0 3
3243: PUSH
3244: LD_INT 46
3246: PUSH
3247: LD_INT 47
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: IN
3254: AND
3255: IFFALSE 3288
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3257: LD_ADDR_VAR 0 3
3261: PUSH
3262: LD_INT 44
3264: PUSH
3265: LD_INT 45
3267: PUSH
3268: LD_INT 49
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: LIST
3275: PUSH
3276: LD_INT 1
3278: PPUSH
3279: LD_INT 3
3281: PPUSH
3282: CALL_OW 12
3286: ARRAY
3287: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3288: LD_VAR 0 1
3292: PPUSH
3293: LD_VAR 0 2
3297: PPUSH
3298: LD_INT 1
3300: PUSH
3301: LD_INT 3
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 1
3310: PPUSH
3311: LD_INT 2
3313: PPUSH
3314: CALL_OW 12
3318: ARRAY
3319: PPUSH
3320: LD_INT 3
3322: PPUSH
3323: LD_VAR 0 3
3327: PPUSH
3328: CALL_OW 185
// end ;
3332: GO 3034
3334: POP
3335: POP
// end ;
3336: PPOPN 3
3338: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3339: LD_INT 22
3341: PPUSH
3342: CALL_OW 302
3346: IFFALSE 4227
3348: GO 3350
3350: DISABLE
3351: LD_INT 0
3353: PPUSH
3354: PPUSH
3355: PPUSH
3356: PPUSH
3357: PPUSH
3358: PPUSH
3359: PPUSH
3360: PPUSH
// begin enable ;
3361: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3362: LD_ADDR_VAR 0 3
3366: PUSH
3367: LD_INT 12
3369: PPUSH
3370: LD_INT 3
3372: PUSH
3373: LD_INT 24
3375: PUSH
3376: LD_INT 1000
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: LD_INT 21
3389: PUSH
3390: LD_INT 3
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: PPUSH
3401: CALL_OW 70
3405: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3406: LD_ADDR_VAR 0 4
3410: PUSH
3411: LD_INT 22
3413: PUSH
3414: LD_INT 3
3416: PUSH
3417: EMPTY
3418: LIST
3419: LIST
3420: PUSH
3421: LD_INT 25
3423: PUSH
3424: LD_INT 2
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PPUSH
3435: CALL_OW 69
3439: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3440: LD_ADDR_VAR 0 5
3444: PUSH
3445: LD_INT 22
3447: PUSH
3448: LD_INT 3
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 34
3457: PUSH
3458: LD_INT 52
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 69
3473: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3474: LD_ADDR_VAR 0 7
3478: PUSH
3479: LD_INT 22
3481: PUSH
3482: LD_INT 3
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 25
3491: PUSH
3492: LD_INT 4
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 69
3507: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3508: LD_ADDR_VAR 0 8
3512: PUSH
3513: LD_INT 14
3515: PUSH
3516: LD_INT 15
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3523: LD_VAR 0 7
3527: IFFALSE 3550
3529: PUSH
3530: LD_VAR 0 4
3534: PPUSH
3535: LD_INT 120
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PPUSH
3545: CALL_OW 72
3549: AND
3550: IFFALSE 3563
// ComExitAll ( sci ) else
3552: LD_VAR 0 7
3556: PPUSH
3557: CALL 71686 0 1
3561: GO 3647
// if sci then
3563: LD_VAR 0 7
3567: IFFALSE 3647
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3569: LD_VAR 0 7
3573: PPUSH
3574: LD_INT 3
3576: PUSH
3577: LD_INT 54
3579: PUSH
3580: EMPTY
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PPUSH
3587: CALL_OW 72
3591: IFFALSE 3599
3593: PUSH
3594: LD_VAR 0 8
3598: AND
3599: IFFALSE 3647
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3601: LD_VAR 0 7
3605: PPUSH
3606: LD_INT 3
3608: PUSH
3609: LD_INT 54
3611: PUSH
3612: EMPTY
3613: LIST
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: PPUSH
3619: CALL_OW 72
3623: PPUSH
3624: LD_VAR 0 8
3628: PUSH
3629: LD_INT 1
3631: PPUSH
3632: LD_VAR 0 8
3636: PPUSH
3637: CALL_OW 12
3641: ARRAY
3642: PPUSH
3643: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3647: LD_VAR 0 5
3651: PPUSH
3652: LD_INT 50
3654: PUSH
3655: EMPTY
3656: LIST
3657: PPUSH
3658: CALL_OW 72
3662: IFFALSE 3670
3664: PUSH
3665: LD_VAR 0 3
3669: AND
3670: IFFALSE 3711
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3672: LD_VAR 0 5
3676: PPUSH
3677: LD_INT 50
3679: PUSH
3680: EMPTY
3681: LIST
3682: PPUSH
3683: CALL_OW 72
3687: PPUSH
3688: LD_VAR 0 3
3692: PPUSH
3693: LD_VAR 0 5
3697: PUSH
3698: LD_INT 1
3700: ARRAY
3701: PPUSH
3702: CALL_OW 74
3706: PPUSH
3707: CALL_OW 130
// if eng then
3711: LD_VAR 0 4
3715: IFFALSE 4227
// begin for i in eng do
3717: LD_ADDR_VAR 0 1
3721: PUSH
3722: LD_VAR 0 4
3726: PUSH
3727: FOR_IN
3728: IFFALSE 4225
// begin tag := GetTag ( i ) ;
3730: LD_ADDR_VAR 0 6
3734: PUSH
3735: LD_VAR 0 1
3739: PPUSH
3740: CALL_OW 110
3744: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3745: LD_VAR 0 3
3749: NOT
3750: IFFALSE 3759
3752: PUSH
3753: LD_EXP 17
3757: NOT
3758: AND
3759: IFFALSE 3771
3761: PUSH
3762: LD_VAR 0 6
3766: PUSH
3767: LD_INT 1
3769: EQUAL
3770: AND
3771: IFFALSE 3797
// begin SetTag ( i , 0 ) ;
3773: LD_VAR 0 1
3777: PPUSH
3778: LD_INT 0
3780: PPUSH
3781: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3785: LD_VAR 0 1
3789: PPUSH
3790: LD_INT 22
3792: PPUSH
3793: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3797: LD_VAR 0 3
3801: IFTRUE 3809
3803: PUSH
3804: LD_EXP 17
3808: OR
3809: IFFALSE 3821
3811: PUSH
3812: LD_VAR 0 6
3816: PUSH
3817: LD_INT 0
3819: EQUAL
3820: AND
3821: IFFALSE 3835
// SetTag ( i , 1 ) ;
3823: LD_VAR 0 1
3827: PPUSH
3828: LD_INT 1
3830: PPUSH
3831: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3835: LD_VAR 0 1
3839: PPUSH
3840: CALL_OW 310
3844: IFFALSE 3856
3846: PUSH
3847: LD_VAR 0 6
3851: PUSH
3852: LD_INT 1
3854: EQUAL
3855: AND
3856: IFFALSE 3867
// ComExit ( i ) ;
3858: LD_VAR 0 1
3862: PPUSH
3863: CALL 71603 0 1
// if GetLives ( i ) < 700 and tag = 1 then
3867: LD_VAR 0 1
3871: PPUSH
3872: CALL_OW 256
3876: PUSH
3877: LD_INT 700
3879: LESS
3880: IFFALSE 3892
3882: PUSH
3883: LD_VAR 0 6
3887: PUSH
3888: LD_INT 1
3890: EQUAL
3891: AND
3892: IFFALSE 3906
// SetTag ( i , 2 ) ;
3894: LD_VAR 0 1
3898: PPUSH
3899: LD_INT 2
3901: PPUSH
3902: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3906: LD_VAR 0 1
3910: PPUSH
3911: CALL_OW 256
3915: PUSH
3916: LD_INT 1000
3918: EQUAL
3919: IFFALSE 3931
3921: PUSH
3922: LD_VAR 0 6
3926: PUSH
3927: LD_INT 2
3929: EQUAL
3930: AND
3931: IFFALSE 3945
// SetTag ( i , 1 ) ;
3933: LD_VAR 0 1
3937: PPUSH
3938: LD_INT 1
3940: PPUSH
3941: CALL_OW 109
// if tag = 2 then
3945: LD_VAR 0 6
3949: PUSH
3950: LD_INT 2
3952: EQUAL
3953: IFFALSE 4000
// begin if GetDistUnitXY ( i , 110 , 41 ) > 6 then
3955: LD_VAR 0 1
3959: PPUSH
3960: LD_INT 110
3962: PPUSH
3963: LD_INT 41
3965: PPUSH
3966: CALL_OW 297
3970: PUSH
3971: LD_INT 6
3973: GREATER
3974: IFFALSE 4000
// begin ComMoveXY ( i , 110 , 41 ) ;
3976: LD_VAR 0 1
3980: PPUSH
3981: LD_INT 110
3983: PPUSH
3984: LD_INT 41
3986: PPUSH
3987: CALL_OW 111
// AddComHold ( i ) ;
3991: LD_VAR 0 1
3995: PPUSH
3996: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
4000: LD_VAR 0 1
4004: PPUSH
4005: LD_INT 11
4007: PPUSH
4008: CALL_OW 308
4012: IFFALSE 4026
// ComMoveToArea ( i , ruBaseArea ) ;
4014: LD_VAR 0 1
4018: PPUSH
4019: LD_INT 12
4021: PPUSH
4022: CALL_OW 113
// if tag = 1 then
4026: LD_VAR 0 6
4030: PUSH
4031: LD_INT 1
4033: EQUAL
4034: IFFALSE 4223
// begin if b then
4036: LD_VAR 0 3
4040: IFFALSE 4068
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
4042: LD_VAR 0 1
4046: PPUSH
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 74
4061: PPUSH
4062: CALL_OW 130
4066: GO 4223
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
4068: LD_EXP 17
4072: IFFALSE 4097
4074: PUSH
4075: LD_INT 11
4077: PPUSH
4078: LD_INT 81
4080: PUSH
4081: LD_INT 3
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PPUSH
4088: CALL_OW 70
4092: PUSH
4093: LD_INT 0
4095: EQUAL
4096: AND
4097: IFFALSE 4160
4099: PUSH
4100: LD_INT 22
4102: PPUSH
4103: LD_EXP 17
4107: PUSH
4108: LD_INT 1
4110: ARRAY
4111: PUSH
4112: LD_INT 1
4114: ARRAY
4115: PPUSH
4116: LD_EXP 17
4120: PUSH
4121: LD_INT 1
4123: ARRAY
4124: PUSH
4125: LD_INT 2
4127: ARRAY
4128: PPUSH
4129: LD_EXP 17
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: PUSH
4138: LD_INT 3
4140: ARRAY
4141: PPUSH
4142: LD_EXP 17
4146: PUSH
4147: LD_INT 1
4149: ARRAY
4150: PUSH
4151: LD_INT 4
4153: ARRAY
4154: PPUSH
4155: CALL 46713 0 5
4159: AND
4160: IFFALSE 4223
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4162: LD_VAR 0 1
4166: PPUSH
4167: LD_EXP 17
4171: PUSH
4172: LD_INT 1
4174: ARRAY
4175: PUSH
4176: LD_INT 1
4178: ARRAY
4179: PPUSH
4180: LD_EXP 17
4184: PUSH
4185: LD_INT 1
4187: ARRAY
4188: PUSH
4189: LD_INT 2
4191: ARRAY
4192: PPUSH
4193: LD_EXP 17
4197: PUSH
4198: LD_INT 1
4200: ARRAY
4201: PUSH
4202: LD_INT 3
4204: ARRAY
4205: PPUSH
4206: LD_EXP 17
4210: PUSH
4211: LD_INT 1
4213: ARRAY
4214: PUSH
4215: LD_INT 4
4217: ARRAY
4218: PPUSH
4219: CALL_OW 145
// end ; end ;
4223: GO 3727
4225: POP
4226: POP
// end ; end ;
4227: PPOPN 8
4229: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4230: LD_INT 22
4232: PUSH
4233: LD_INT 3
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 3
4242: PUSH
4243: LD_INT 60
4245: PUSH
4246: EMPTY
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: LD_INT 50
4255: PUSH
4256: EMPTY
4257: LIST
4258: PUSH
4259: LD_INT 25
4261: PUSH
4262: LD_INT 16
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: PPUSH
4275: CALL_OW 69
4279: IFFALSE 4290
4281: PUSH
4282: LD_INT 14
4284: PPUSH
4285: CALL_OW 435
4289: AND
4290: IFFALSE 4402
4292: GO 4294
4294: DISABLE
4295: LD_INT 0
4297: PPUSH
4298: PPUSH
// begin enable ;
4299: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4300: LD_ADDR_VAR 0 2
4304: PUSH
4305: LD_INT 14
4307: PPUSH
4308: CALL_OW 435
4312: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4313: LD_ADDR_VAR 0 1
4317: PUSH
4318: LD_INT 22
4320: PUSH
4321: LD_INT 3
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: PUSH
4328: LD_INT 3
4330: PUSH
4331: LD_INT 60
4333: PUSH
4334: EMPTY
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 50
4343: PUSH
4344: EMPTY
4345: LIST
4346: PUSH
4347: LD_INT 25
4349: PUSH
4350: LD_INT 16
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: PPUSH
4363: CALL_OW 69
4367: PUSH
4368: FOR_IN
4369: IFFALSE 4400
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4371: LD_VAR 0 1
4375: PPUSH
4376: LD_VAR 0 2
4380: PUSH
4381: LD_INT 1
4383: ARRAY
4384: PPUSH
4385: LD_VAR 0 2
4389: PUSH
4390: LD_INT 2
4392: ARRAY
4393: PPUSH
4394: CALL_OW 117
4398: GO 4368
4400: POP
4401: POP
// end ;
4402: PPOPN 2
4404: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4405: LD_INT 22
4407: PUSH
4408: LD_INT 3
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 3
4417: PUSH
4418: LD_INT 60
4420: PUSH
4421: EMPTY
4422: LIST
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 50
4430: PUSH
4431: EMPTY
4432: LIST
4433: PUSH
4434: LD_INT 34
4436: PUSH
4437: LD_INT 51
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: PPUSH
4450: CALL_OW 69
4454: IFFALSE 4465
4456: PUSH
4457: LD_INT 13
4459: PPUSH
4460: CALL_OW 435
4464: AND
4465: IFFALSE 4577
4467: GO 4469
4469: DISABLE
4470: LD_INT 0
4472: PPUSH
4473: PPUSH
// begin enable ;
4474: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4475: LD_ADDR_VAR 0 2
4479: PUSH
4480: LD_INT 13
4482: PPUSH
4483: CALL_OW 435
4487: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4488: LD_ADDR_VAR 0 1
4492: PUSH
4493: LD_INT 22
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 3
4505: PUSH
4506: LD_INT 60
4508: PUSH
4509: EMPTY
4510: LIST
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PUSH
4516: LD_INT 50
4518: PUSH
4519: EMPTY
4520: LIST
4521: PUSH
4522: LD_INT 34
4524: PUSH
4525: LD_INT 51
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: PPUSH
4538: CALL_OW 69
4542: PUSH
4543: FOR_IN
4544: IFFALSE 4575
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4546: LD_VAR 0 1
4550: PPUSH
4551: LD_VAR 0 2
4555: PUSH
4556: LD_INT 1
4558: ARRAY
4559: PPUSH
4560: LD_VAR 0 2
4564: PUSH
4565: LD_INT 2
4567: ARRAY
4568: PPUSH
4569: CALL_OW 117
4573: GO 4543
4575: POP
4576: POP
// end ;
4577: PPOPN 2
4579: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4580: LD_OWVAR 67
4584: PUSH
4585: LD_INT 1
4587: GREATER
4588: IFFALSE 4599
4590: PUSH
4591: LD_INT 1
4593: PPUSH
4594: CALL_OW 302
4598: AND
4599: IFFALSE 4759
4601: GO 4603
4603: DISABLE
4604: LD_INT 0
4606: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4607: LD_ADDR_VAR 0 1
4611: PUSH
4612: DOUBLE
4613: LD_INT 1
4615: DEC
4616: ST_TO_ADDR
4617: LD_INT 3
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: LD_INT 5
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: PUSH
4631: LD_OWVAR 67
4635: PUSH
4636: LD_INT 1
4638: MINUS
4639: ARRAY
4640: PUSH
4641: FOR_TO
4642: IFFALSE 4686
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4644: LD_INT 1
4646: PUSH
4647: LD_INT 40
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: PUSH
4654: LD_VAR 0 1
4658: PUSH
4659: LD_INT 2
4661: MOD
4662: PUSH
4663: LD_INT 1
4665: PLUS
4666: ARRAY
4667: PPUSH
4668: LD_INT 21
4670: PPUSH
4671: LD_INT 3
4673: PPUSH
4674: LD_INT 1
4676: PPUSH
4677: LD_INT 45
4679: PPUSH
4680: CALL_OW 185
// end ;
4684: GO 4641
4686: POP
4687: POP
// repeat wait ( 6 6$00 ) ;
4688: LD_INT 12600
4690: PPUSH
4691: CALL_OW 67
// for i := 1 to 2 do
4695: LD_ADDR_VAR 0 1
4699: PUSH
4700: DOUBLE
4701: LD_INT 1
4703: DEC
4704: ST_TO_ADDR
4705: LD_INT 2
4707: PUSH
4708: FOR_TO
4709: IFFALSE 4732
// AddComConstruct ( ruFac1 , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4711: LD_INT 1
4713: PPUSH
4714: LD_INT 21
4716: PPUSH
4717: LD_INT 3
4719: PPUSH
4720: LD_INT 1
4722: PPUSH
4723: LD_INT 45
4725: PPUSH
4726: CALL_OW 185
4730: GO 4708
4732: POP
4733: POP
// until not IsOk ( ruFac1 ) or UnitsInside ( ruFac1 ) = 0 ;
4734: LD_INT 1
4736: PPUSH
4737: CALL_OW 302
4741: NOT
4742: IFTRUE 4757
4744: PUSH
4745: LD_INT 1
4747: PPUSH
4748: CALL_OW 313
4752: PUSH
4753: LD_INT 0
4755: EQUAL
4756: OR
4757: IFFALSE 4688
// end ;
4759: PPOPN 1
4761: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4762: LD_EXP 16
4766: IFFALSE 5356
4768: GO 4770
4770: DISABLE
4771: LD_INT 0
4773: PPUSH
4774: PPUSH
4775: PPUSH
// begin enable ;
4776: ENABLE
// if not ruMobile then
4777: LD_EXP 16
4781: NOT
4782: IFFALSE 4786
// exit ;
4784: GO 5356
// for i in ruMobile do
4786: LD_ADDR_VAR 0 1
4790: PUSH
4791: LD_EXP 16
4795: PUSH
4796: FOR_IN
4797: IFFALSE 5354
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4799: LD_VAR 0 1
4803: PPUSH
4804: CALL_OW 302
4808: NOT
4809: IFTRUE 4826
4811: PUSH
4812: LD_VAR 0 1
4816: PPUSH
4817: CALL_OW 255
4821: PUSH
4822: LD_INT 3
4824: NONEQUAL
4825: OR
4826: IFFALSE 4846
// begin ruMobile := ruMobile diff i ;
4828: LD_ADDR_EXP 16
4832: PUSH
4833: LD_EXP 16
4837: PUSH
4838: LD_VAR 0 1
4842: DIFF
4843: ST_TO_ADDR
// continue ;
4844: GO 4796
// end ; if GetTag ( i ) = 300 then
4846: LD_VAR 0 1
4850: PPUSH
4851: CALL_OW 110
4855: PUSH
4856: LD_INT 300
4858: EQUAL
4859: IFFALSE 4991
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4861: LD_VAR 0 1
4865: PPUSH
4866: CALL_OW 261
4870: PUSH
4871: LD_INT 50
4873: LESS
4874: IFFALSE 4891
4876: PUSH
4877: LD_VAR 0 1
4881: PPUSH
4882: CALL_OW 262
4886: PUSH
4887: LD_INT 1
4889: EQUAL
4890: AND
4891: IFFALSE 4950
// begin ComMoveXY ( i , 120 , 58 ) ;
4893: LD_VAR 0 1
4897: PPUSH
4898: LD_INT 120
4900: PPUSH
4901: LD_INT 58
4903: PPUSH
4904: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4908: LD_INT 35
4910: PPUSH
4911: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4915: LD_VAR 0 1
4919: PPUSH
4920: LD_INT 120
4922: PPUSH
4923: LD_INT 58
4925: PPUSH
4926: CALL_OW 297
4930: PUSH
4931: LD_INT 4
4933: LESS
4934: IFFALSE 4908
// SetFuel ( i , 100 ) ;
4936: LD_VAR 0 1
4940: PPUSH
4941: LD_INT 100
4943: PPUSH
4944: CALL_OW 240
// end else
4948: GO 4991
// if not IsInArea ( i , ruParkingArea ) then
4950: LD_VAR 0 1
4954: PPUSH
4955: LD_INT 10
4957: PPUSH
4958: CALL_OW 308
4962: NOT
4963: IFFALSE 4979
// ComMoveToArea ( i , ruParkingArea ) else
4965: LD_VAR 0 1
4969: PPUSH
4970: LD_INT 10
4972: PPUSH
4973: CALL_OW 113
4977: GO 4991
// SetTag ( i , 301 ) ;
4979: LD_VAR 0 1
4983: PPUSH
4984: LD_INT 301
4986: PPUSH
4987: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4991: LD_VAR 0 1
4995: PPUSH
4996: CALL_OW 110
5000: PUSH
5001: LD_INT 301
5003: EQUAL
5004: IFFALSE 5134
// begin if GetLives ( i ) < 1000 then
5006: LD_VAR 0 1
5010: PPUSH
5011: CALL_OW 256
5015: PUSH
5016: LD_INT 1000
5018: LESS
5019: IFFALSE 5111
// begin if not IsDrivenBy ( i ) then
5021: LD_VAR 0 1
5025: PPUSH
5026: CALL_OW 311
5030: NOT
5031: IFFALSE 5035
// continue ;
5033: GO 4796
// mech := IsDrivenBy ( i ) ;
5035: LD_ADDR_VAR 0 2
5039: PUSH
5040: LD_VAR 0 1
5044: PPUSH
5045: CALL_OW 311
5049: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
5050: LD_VAR 0 2
5054: PPUSH
5055: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
5059: LD_VAR 0 2
5063: PPUSH
5064: LD_VAR 0 1
5068: PPUSH
5069: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5073: LD_INT 35
5075: PPUSH
5076: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 256
5089: PUSH
5090: LD_INT 1000
5092: EQUAL
5093: IFFALSE 5073
// ComEnterUnit ( mech , i ) ;
5095: LD_VAR 0 2
5099: PPUSH
5100: LD_VAR 0 1
5104: PPUSH
5105: CALL_OW 120
// end else
5109: GO 5134
// if IsDrivenBy ( i ) then
5111: LD_VAR 0 1
5115: PPUSH
5116: CALL_OW 311
5120: IFFALSE 5134
// SetTag ( i , 0 ) ;
5122: LD_VAR 0 1
5126: PPUSH
5127: LD_INT 0
5129: PPUSH
5130: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
5134: LD_VAR 0 1
5138: PPUSH
5139: CALL_OW 110
5143: PUSH
5144: LD_INT 300
5146: LESS
5147: IFFALSE 5352
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
5149: LD_ADDR_VAR 0 3
5153: PUSH
5154: LD_INT 11
5156: PPUSH
5157: LD_INT 81
5159: PUSH
5160: LD_INT 3
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PPUSH
5167: CALL_OW 70
5171: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 256
5181: PUSH
5182: LD_INT 650
5184: LESS
5185: IFFALSE 5210
// begin ComStop ( i ) ;
5187: LD_VAR 0 1
5191: PPUSH
5192: CALL_OW 141
// SetTag ( i , 300 ) ;
5196: LD_VAR 0 1
5200: PPUSH
5201: LD_INT 300
5203: PPUSH
5204: CALL_OW 109
// continue ;
5208: GO 4796
// end ; if enemy then
5210: LD_VAR 0 3
5214: IFFALSE 5254
// begin if not HasTask ( i ) then
5216: LD_VAR 0 1
5220: PPUSH
5221: CALL_OW 314
5225: NOT
5226: IFFALSE 5252
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5228: LD_VAR 0 1
5232: PPUSH
5233: LD_VAR 0 3
5237: PPUSH
5238: LD_VAR 0 1
5242: PPUSH
5243: CALL_OW 74
5247: PPUSH
5248: CALL_OW 115
// end else
5252: GO 5352
// if ruMobile then
5254: LD_EXP 16
5258: IFFALSE 5352
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5260: LD_ADDR_VAR 0 3
5264: PUSH
5265: LD_INT 81
5267: PUSH
5268: LD_INT 3
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PPUSH
5275: CALL_OW 69
5279: ST_TO_ADDR
// if enemy then
5280: LD_VAR 0 3
5284: IFFALSE 5352
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5286: LD_VAR 0 1
5290: PPUSH
5291: LD_INT 113
5293: PUSH
5294: LD_INT 80
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 118
5303: PUSH
5304: LD_INT 100
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 107
5313: PUSH
5314: LD_INT 102
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 114
5323: PUSH
5324: LD_INT 120
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: LD_INT 86
5333: PUSH
5334: LD_INT 116
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: PPUSH
5348: CALL 73971 0 2
// end ; end ; end ;
5352: GO 4796
5354: POP
5355: POP
// end ;
5356: PPOPN 3
5358: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5359: LD_EXP 18
5363: IFFALSE 5409
5365: GO 5367
5367: DISABLE
5368: LD_INT 0
5370: PPUSH
// begin enable ;
5371: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5372: LD_ADDR_VAR 0 1
5376: PUSH
5377: LD_EXP 18
5381: PPUSH
5382: LD_INT 50
5384: PUSH
5385: EMPTY
5386: LIST
5387: PPUSH
5388: CALL_OW 72
5392: ST_TO_ADDR
// ruAttackers := [ ] ;
5393: LD_ADDR_EXP 18
5397: PUSH
5398: EMPTY
5399: ST_TO_ADDR
// SendAttack ( tmp ) ;
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL 5412 0 1
// end ;
5409: PPOPN 1
5411: END
// function SendAttack ( group ) ; var i , tmp ; begin
5412: LD_INT 0
5414: PPUSH
5415: PPUSH
5416: PPUSH
// for i in group do
5417: LD_ADDR_VAR 0 3
5421: PUSH
5422: LD_VAR 0 1
5426: PUSH
5427: FOR_IN
5428: IFFALSE 5494
// begin SetTag ( i , 0 ) ;
5430: LD_VAR 0 3
5434: PPUSH
5435: LD_INT 0
5437: PPUSH
5438: CALL_OW 109
// if Prob ( 30 ) then
5442: LD_INT 30
5444: PPUSH
5445: CALL_OW 13
5449: IFFALSE 5477
// begin SetTag ( i , 1 ) ;
5451: LD_VAR 0 3
5455: PPUSH
5456: LD_INT 1
5458: PPUSH
5459: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5463: LD_VAR 0 3
5467: PPUSH
5468: LD_INT 116
5470: PPUSH
5471: CALL_OW 120
// end else
5475: GO 5492
// ComAgressiveMove ( i , 118 , 93 ) ;
5477: LD_VAR 0 3
5481: PPUSH
5482: LD_INT 118
5484: PPUSH
5485: LD_INT 93
5487: PPUSH
5488: CALL_OW 114
// end ;
5492: GO 5427
5494: POP
5495: POP
// repeat wait ( 0 0$1 ) ;
5496: LD_INT 35
5498: PPUSH
5499: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5503: LD_ADDR_VAR 0 4
5507: PUSH
5508: LD_VAR 0 1
5512: PPUSH
5513: LD_INT 120
5515: PUSH
5516: LD_INT 0
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PPUSH
5523: CALL_OW 72
5527: ST_TO_ADDR
// for i in tmp do
5528: LD_ADDR_VAR 0 3
5532: PUSH
5533: LD_VAR 0 4
5537: PUSH
5538: FOR_IN
5539: IFFALSE 5686
// begin if not IsOk ( i ) then
5541: LD_VAR 0 3
5545: PPUSH
5546: CALL_OW 302
5550: NOT
5551: IFFALSE 5571
// begin tmp := tmp diff i ;
5553: LD_ADDR_VAR 0 4
5557: PUSH
5558: LD_VAR 0 4
5562: PUSH
5563: LD_VAR 0 3
5567: DIFF
5568: ST_TO_ADDR
// continue ;
5569: GO 5538
// end ; if GetDistUnits ( i , usDep ) < 8 then
5571: LD_VAR 0 3
5575: PPUSH
5576: LD_INT 48
5578: PPUSH
5579: CALL_OW 296
5583: PUSH
5584: LD_INT 8
5586: LESS
5587: IFFALSE 5603
// begin ComAttackUnit ( i , usDep ) ;
5589: LD_VAR 0 3
5593: PPUSH
5594: LD_INT 48
5596: PPUSH
5597: CALL_OW 115
// continue ;
5601: GO 5538
// end ; if not See ( 1 , i ) then
5603: LD_INT 1
5605: PPUSH
5606: LD_VAR 0 3
5610: PPUSH
5611: CALL_OW 292
5615: NOT
5616: IFFALSE 5635
// ComAgressiveMove ( i , 86 , 116 ) else
5618: LD_VAR 0 3
5622: PPUSH
5623: LD_INT 86
5625: PPUSH
5626: LD_INT 116
5628: PPUSH
5629: CALL_OW 114
5633: GO 5684
// if GetWeapon ( i ) <> ru_time_lapser then
5635: LD_VAR 0 3
5639: PPUSH
5640: CALL_OW 264
5644: PUSH
5645: LD_INT 49
5647: NONEQUAL
5648: IFFALSE 5684
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5650: LD_VAR 0 3
5654: PPUSH
5655: LD_INT 81
5657: PUSH
5658: LD_INT 3
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: PPUSH
5665: CALL_OW 69
5669: PPUSH
5670: LD_VAR 0 3
5674: PPUSH
5675: CALL_OW 74
5679: PPUSH
5680: CALL_OW 115
// end ;
5684: GO 5538
5686: POP
5687: POP
// until not tmp ;
5688: LD_VAR 0 4
5692: NOT
5693: IFFALSE 5496
// end ; end_of_file
5695: LD_VAR 0 2
5699: RET
// on UnitDestroyed ( unit ) do var i , tmp ;
5700: LD_INT 0
5702: PPUSH
5703: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL 27647 0 1
// if unit = JMM then
5713: LD_VAR 0 1
5717: PUSH
5718: LD_EXP 8
5722: EQUAL
5723: IFFALSE 5732
// YouLost ( JMM ) ;
5725: LD_STRING JMM
5727: PPUSH
5728: CALL_OW 104
// if GetSide ( unit ) = 4 then
5732: LD_VAR 0 1
5736: PPUSH
5737: CALL_OW 255
5741: PUSH
5742: LD_INT 4
5744: EQUAL
5745: IFFALSE 5804
// begin if unit = Joan then
5747: LD_VAR 0 1
5751: PUSH
5752: LD_EXP 10
5756: EQUAL
5757: IFFALSE 5766
// YouLost ( Joan ) ;
5759: LD_STRING Joan
5761: PPUSH
5762: CALL_OW 104
// if unit = Connie then
5766: LD_VAR 0 1
5770: PUSH
5771: LD_EXP 12
5775: EQUAL
5776: IFFALSE 5785
// YouLost ( Connie ) ;
5778: LD_STRING Connie
5780: PPUSH
5781: CALL_OW 104
// if unit = Lisa then
5785: LD_VAR 0 1
5789: PUSH
5790: LD_EXP 11
5794: EQUAL
5795: IFFALSE 5804
// YouLost ( Lisa ) ;
5797: LD_STRING Lisa
5799: PPUSH
5800: CALL_OW 104
// end ; if unit in ruAttackers then
5804: LD_VAR 0 1
5808: PUSH
5809: LD_EXP 18
5813: IN
5814: IFFALSE 5832
// ruAttackers := ruAttackers diff unit ;
5816: LD_ADDR_EXP 18
5820: PUSH
5821: LD_EXP 18
5825: PUSH
5826: LD_VAR 0 1
5830: DIFF
5831: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5832: LD_VAR 0 1
5836: PPUSH
5837: CALL_OW 264
5841: PUSH
5842: LD_INT 51
5844: EQUAL
5845: IFFALSE 5856
5847: PUSH
5848: LD_INT 40
5850: PPUSH
5851: CALL_OW 302
5855: AND
5856: IFFALSE 5896
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5858: LD_INT 40
5860: PPUSH
5861: LD_INT 21
5863: PPUSH
5864: LD_INT 1
5866: PUSH
5867: LD_INT 3
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: LD_INT 1
5876: PPUSH
5877: LD_INT 2
5879: PPUSH
5880: CALL_OW 12
5884: ARRAY
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: LD_INT 51
5891: PPUSH
5892: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5896: LD_VAR 0 1
5900: PPUSH
5901: CALL_OW 264
5905: PUSH
5906: LD_INT 52
5908: EQUAL
5909: IFFALSE 5920
5911: PUSH
5912: LD_INT 40
5914: PPUSH
5915: CALL_OW 302
5919: AND
5920: IFFALSE 5960
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5922: LD_INT 40
5924: PPUSH
5925: LD_INT 21
5927: PPUSH
5928: LD_INT 1
5930: PUSH
5931: LD_INT 3
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: PUSH
5938: LD_INT 1
5940: PPUSH
5941: LD_INT 2
5943: PPUSH
5944: CALL_OW 12
5948: ARRAY
5949: PPUSH
5950: LD_INT 3
5952: PPUSH
5953: LD_INT 52
5955: PPUSH
5956: CALL_OW 185
// if unit in ruMobile then
5960: LD_VAR 0 1
5964: PUSH
5965: LD_EXP 16
5969: IN
5970: IFFALSE 5988
// ruMobile := ruMobile diff i ;
5972: LD_ADDR_EXP 16
5976: PUSH
5977: LD_EXP 16
5981: PUSH
5982: LD_VAR 0 2
5986: DIFF
5987: ST_TO_ADDR
// if unit = ruCommander then
5988: LD_VAR 0 1
5992: PUSH
5993: LD_EXP 14
5997: EQUAL
5998: IFFALSE 6161
// begin repeat wait ( 0 0$2 ) ;
6000: LD_INT 70
6002: PPUSH
6003: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
6007: LD_ADDR_VAR 0 3
6011: PUSH
6012: LD_INT 22
6014: PUSH
6015: LD_INT 3
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PUSH
6022: LD_INT 23
6024: PUSH
6025: LD_INT 3
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: PUSH
6032: LD_INT 50
6034: PUSH
6035: EMPTY
6036: LIST
6037: PUSH
6038: LD_INT 21
6040: PUSH
6041: LD_INT 1
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: PPUSH
6054: CALL_OW 69
6058: ST_TO_ADDR
// if tmp then
6059: LD_VAR 0 3
6063: IFFALSE 6154
// for i in tmp do
6065: LD_ADDR_VAR 0 2
6069: PUSH
6070: LD_VAR 0 3
6074: PUSH
6075: FOR_IN
6076: IFFALSE 6152
// begin if IsInUnit ( i ) then
6078: LD_VAR 0 2
6082: PPUSH
6083: CALL_OW 310
6087: IFFALSE 6098
// ComExit ( i ) ;
6089: LD_VAR 0 2
6093: PPUSH
6094: CALL 71603 0 1
// wait ( 3 ) ;
6098: LD_INT 3
6100: PPUSH
6101: CALL_OW 67
// ComMoveXY ( i , 147 , 18 ) ;
6105: LD_VAR 0 2
6109: PPUSH
6110: LD_INT 147
6112: PPUSH
6113: LD_INT 18
6115: PPUSH
6116: CALL_OW 111
// if GetDistUnitXY ( i , 147 , 18 ) < 3 then
6120: LD_VAR 0 2
6124: PPUSH
6125: LD_INT 147
6127: PPUSH
6128: LD_INT 18
6130: PPUSH
6131: CALL_OW 297
6135: PUSH
6136: LD_INT 3
6138: LESS
6139: IFFALSE 6150
// RemoveUnit ( i ) ;
6141: LD_VAR 0 2
6145: PPUSH
6146: CALL_OW 64
// end ;
6150: GO 6075
6152: POP
6153: POP
// until not tmp ;
6154: LD_VAR 0 3
6158: NOT
6159: IFFALSE 6000
// end ; end ;
6161: PPOPN 3
6163: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
6164: LD_VAR 0 3
6168: PPUSH
6169: CALL_OW 264
6173: PUSH
6174: LD_INT 10
6176: EQUAL
6177: IFFALSE 6194
// killCounter := Inc ( killCounter ) ;
6179: LD_ADDR_EXP 5
6183: PUSH
6184: LD_EXP 5
6188: PPUSH
6189: CALL 72578 0 1
6193: ST_TO_ADDR
// end ;
6194: PPOPN 3
6196: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
6197: LD_VAR 0 2
6201: PPUSH
6202: CALL_OW 255
6206: PUSH
6207: LD_INT 3
6209: EQUAL
6210: IFFALSE 6224
// SetTag ( unit , 0 ) ;
6212: LD_VAR 0 2
6216: PPUSH
6217: LD_INT 0
6219: PPUSH
6220: CALL_OW 109
// end ;
6224: PPOPN 2
6226: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
6227: LD_VAR 0 2
6231: PPUSH
6232: CALL_OW 255
6236: PUSH
6237: LD_INT 3
6239: EQUAL
6240: IFFALSE 6254
6242: PUSH
6243: LD_VAR 0 1
6247: PUSH
6248: LD_EXP 19
6252: IN
6253: AND
6254: IFFALSE 6272
// ruTechList := ruTechList diff tech ;
6256: LD_ADDR_EXP 19
6260: PUSH
6261: LD_EXP 19
6265: PUSH
6266: LD_VAR 0 1
6270: DIFF
6271: ST_TO_ADDR
// end ;
6272: PPOPN 2
6274: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
6275: LD_INT 0
6277: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
6278: LD_VAR 0 1
6282: PPUSH
6283: LD_VAR 0 2
6287: PPUSH
6288: CALL 27705 0 2
// if GetSide ( vehicle ) <> 3 then
6292: LD_VAR 0 1
6296: PPUSH
6297: CALL_OW 255
6301: PUSH
6302: LD_INT 3
6304: NONEQUAL
6305: IFFALSE 6376
// begin if GetWeapon ( vehicle ) = us_double_laser then
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 264
6316: PUSH
6317: LD_INT 10
6319: EQUAL
6320: IFFALSE 6374
// begin amLaserCounter := Inc ( amLaserCounter ) ;
6322: LD_ADDR_EXP 7
6326: PUSH
6327: LD_EXP 7
6331: PPUSH
6332: CALL 72578 0 1
6336: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
6337: LD_ADDR_VAR 0 3
6341: PUSH
6342: LD_VAR 0 2
6346: PPUSH
6347: CALL_OW 313
6351: PUSH
6352: FOR_IN
6353: IFFALSE 6372
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
6355: LD_VAR 0 3
6359: PPUSH
6360: LD_INT 3
6362: PPUSH
6363: LD_INT 1000
6365: PPUSH
6366: CALL_OW 591
6370: GO 6352
6372: POP
6373: POP
// end ; exit ;
6374: GO 6470
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6376: LD_VAR 0 1
6380: PPUSH
6381: CALL_OW 264
6385: PUSH
6386: LD_INT 51
6388: PUSH
6389: LD_INT 52
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: IN
6396: IFFALSE 6400
// exit ;
6398: GO 6470
// if GetControl ( vehicle ) = control_computer then
6400: LD_VAR 0 1
6404: PPUSH
6405: CALL_OW 263
6409: PUSH
6410: LD_INT 3
6412: EQUAL
6413: IFFALSE 6435
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6415: LD_ADDR_EXP 18
6419: PUSH
6420: LD_EXP 18
6424: PPUSH
6425: LD_VAR 0 1
6429: PPUSH
6430: CALL 71205 0 2
6434: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6435: LD_VAR 0 1
6439: PPUSH
6440: CALL_OW 263
6444: PUSH
6445: LD_INT 1
6447: EQUAL
6448: IFFALSE 6470
// ruMobile := Join ( ruMobile , vehicle ) ;
6450: LD_ADDR_EXP 16
6454: PUSH
6455: LD_EXP 16
6459: PPUSH
6460: LD_VAR 0 1
6464: PPUSH
6465: CALL 71205 0 2
6469: ST_TO_ADDR
// end ;
6470: PPOPN 3
6472: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 then
6473: LD_VAR 0 1
6477: PPUSH
6478: CALL_OW 255
6482: PUSH
6483: LD_INT 3
6485: EQUAL
6486: IFFALSE 6503
6488: PUSH
6489: LD_VAR 0 1
6493: PPUSH
6494: CALL_OW 257
6498: PUSH
6499: LD_INT 3
6501: EQUAL
6502: AND
6503: IFFALSE 6570
// if GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) and UnitsInside ( ruFac1 ) < 6 then
6505: LD_INT 1
6507: PPUSH
6508: CALL_OW 255
6512: PUSH
6513: LD_INT 3
6515: EQUAL
6516: IFFALSE 6527
6518: PUSH
6519: LD_INT 1
6521: PPUSH
6522: CALL_OW 302
6526: AND
6527: IFFALSE 6542
6529: PUSH
6530: LD_INT 1
6532: PPUSH
6533: CALL_OW 313
6537: PUSH
6538: LD_INT 6
6540: LESS
6541: AND
6542: IFFALSE 6558
// ComEnterUnit ( human , ruFac1 ) else
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_INT 1
6551: PPUSH
6552: CALL_OW 120
6556: GO 6570
// ComEnterUnit ( human , ruFac2 ) ;
6558: LD_VAR 0 1
6562: PPUSH
6563: LD_INT 40
6565: PPUSH
6566: CALL_OW 120
// end ;
6570: PPOPN 4
6572: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6573: LD_VAR 0 1
6577: PPUSH
6578: CALL 27689 0 1
// end ; end_of_file
6582: PPOPN 1
6584: END
// export function Action ; var dec1 , dec2 , veh ; begin
6585: LD_INT 0
6587: PPUSH
6588: PPUSH
6589: PPUSH
6590: PPUSH
// veh := IsInUnit ( JMM ) ;
6591: LD_ADDR_VAR 0 4
6595: PUSH
6596: LD_EXP 8
6600: PPUSH
6601: CALL_OW 310
6605: ST_TO_ADDR
// InGameOn ;
6606: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6610: LD_VAR 0 4
6614: PPUSH
6615: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6619: LD_VAR 0 4
6623: PPUSH
6624: LD_INT 30
6626: PPUSH
6627: LD_INT 11
6629: PPUSH
6630: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6634: LD_VAR 0 4
6638: PPUSH
6639: LD_INT 69
6641: PPUSH
6642: LD_INT 34
6644: PPUSH
6645: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6649: LD_INT 30
6651: PPUSH
6652: LD_INT 11
6654: PPUSH
6655: CALL_OW 84
// wait ( 0 0$3 ) ;
6659: LD_INT 105
6661: PPUSH
6662: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6666: LD_EXP 13
6670: PPUSH
6671: LD_STRING D1-Pow-1
6673: PPUSH
6674: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6678: LD_EXP 8
6682: PPUSH
6683: CALL_OW 121
// AddComHold ( JMM ) ;
6687: LD_EXP 8
6691: PPUSH
6692: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6696: LD_EXP 8
6700: PPUSH
6701: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6705: LD_EXP 8
6709: PPUSH
6710: LD_STRING D1-JMM-1
6712: PPUSH
6713: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6717: LD_EXP 13
6721: PPUSH
6722: LD_STRING D1-Pow-2
6724: PPUSH
6725: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6729: LD_EXP 8
6733: PPUSH
6734: LD_STRING D1-JMM-2
6736: PPUSH
6737: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6741: LD_EXP 8
6745: PPUSH
6746: LD_VAR 0 4
6750: PPUSH
6751: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6755: LD_STRING M1
6757: PPUSH
6758: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6762: LD_INT 16
6764: PPUSH
6765: LD_INT 1
6767: PPUSH
6768: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6772: LD_INT 35
6774: PPUSH
6775: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6779: LD_EXP 8
6783: PPUSH
6784: LD_VAR 0 4
6788: PPUSH
6789: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6793: LD_VAR 0 4
6797: PPUSH
6798: LD_INT 51
6800: PPUSH
6801: LD_INT 21
6803: PPUSH
6804: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6808: LD_VAR 0 4
6812: PPUSH
6813: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6817: LD_VAR 0 4
6821: PPUSH
6822: LD_INT 51
6824: PPUSH
6825: LD_INT 21
6827: PPUSH
6828: CALL_OW 297
6832: PUSH
6833: LD_INT 6
6835: LESS
6836: IFFALSE 6772
// if JMMGirl = 1 then
6838: LD_EXP 2
6842: PUSH
6843: LD_INT 1
6845: EQUAL
6846: IFFALSE 7145
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6848: LD_EXP 10
6852: PPUSH
6853: LD_STRING D2J-Joan-1
6855: PPUSH
6856: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6860: LD_ADDR_VAR 0 2
6864: PUSH
6865: LD_STRING Q1
6867: PPUSH
6868: CALL_OW 97
6872: ST_TO_ADDR
// if dec1 = 1 then
6873: LD_VAR 0 2
6877: PUSH
6878: LD_INT 1
6880: EQUAL
6881: IFFALSE 7136
// begin ComExitVehicle ( JMM ) ;
6883: LD_EXP 8
6887: PPUSH
6888: CALL_OW 121
// AddComHold ( JMM ) ;
6892: LD_EXP 8
6896: PPUSH
6897: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6901: LD_EXP 8
6905: PPUSH
6906: LD_STRING D2J-JMM-1
6908: PPUSH
6909: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6913: LD_EXP 10
6917: PPUSH
6918: LD_STRING D2J-Joan-2
6920: PPUSH
6921: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6925: LD_EXP 8
6929: PPUSH
6930: LD_STRING D2J-JMM-2
6932: PPUSH
6933: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6937: LD_EXP 10
6941: PPUSH
6942: LD_STRING D2J-Joan-3
6944: PPUSH
6945: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6949: LD_EXP 13
6953: PPUSH
6954: LD_STRING DPowell-Pow-1
6956: PPUSH
6957: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_STRING Q2J
6968: PPUSH
6969: CALL_OW 97
6973: ST_TO_ADDR
// if dec2 = 1 then
6974: LD_VAR 0 3
6978: PUSH
6979: LD_INT 1
6981: EQUAL
6982: IFFALSE 7024
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6984: LD_EXP 8
6988: PPUSH
6989: LD_STRING D2Ja-JMM-1
6991: PPUSH
6992: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6996: LD_EXP 10
7000: PPUSH
7001: LD_STRING D2Ja-Joan-1
7003: PPUSH
7004: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
7008: LD_EXP 8
7012: PPUSH
7013: LD_STRING D2Ja-JMM-2
7015: PPUSH
7016: CALL_OW 88
// InGameOff ;
7020: CALL_OW 9
// end ; if dec2 = 2 then
7024: LD_VAR 0 3
7028: PUSH
7029: LD_INT 2
7031: EQUAL
7032: IFFALSE 7103
// begin Say ( JMM , D2Jb-JMM-1 ) ;
7034: LD_EXP 8
7038: PPUSH
7039: LD_STRING D2Jb-JMM-1
7041: PPUSH
7042: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
7046: LD_EXP 10
7050: PPUSH
7051: LD_STRING D2Jb-Joan-1
7053: PPUSH
7054: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
7058: LD_EXP 8
7062: PPUSH
7063: LD_STRING D2Jb-JMM-2
7065: PPUSH
7066: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
7070: LD_EXP 10
7074: PPUSH
7075: LD_STRING D2Jb-Joan-2
7077: PPUSH
7078: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
7082: LD_EXP 8
7086: PPUSH
7087: LD_STRING D2Jb-JMM-3
7089: PPUSH
7090: CALL_OW 88
// FinishMission ( true ) ;
7094: LD_INT 1
7096: PPUSH
7097: CALL 9993 0 1
// exit ;
7101: GO 7685
// end ; if dec2 = 3 then
7103: LD_VAR 0 3
7107: PUSH
7108: LD_INT 3
7110: EQUAL
7111: IFFALSE 7134
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
7113: LD_EXP 10
7117: PPUSH
7118: LD_STRING D2Jc-Joan-1
7120: PPUSH
7121: CALL_OW 94
// FinishMission ( true ) ;
7125: LD_INT 1
7127: PPUSH
7128: CALL 9993 0 1
// exit ;
7132: GO 7685
// end ; end else
7134: GO 7145
// begin FinishMission ( true ) ;
7136: LD_INT 1
7138: PPUSH
7139: CALL 9993 0 1
// exit ;
7143: GO 7685
// end ; end ; if JMMGirl = 2 then
7145: LD_EXP 2
7149: PUSH
7150: LD_INT 2
7152: EQUAL
7153: IFFALSE 7464
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
7155: LD_EXP 11
7159: PPUSH
7160: LD_STRING D2L-Lisa-1
7162: PPUSH
7163: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7167: LD_ADDR_VAR 0 2
7171: PUSH
7172: LD_STRING Q1
7174: PPUSH
7175: CALL_OW 97
7179: ST_TO_ADDR
// if dec1 = 1 then
7180: LD_VAR 0 2
7184: PUSH
7185: LD_INT 1
7187: EQUAL
7188: IFFALSE 7455
// begin ComExitVehicle ( JMM ) ;
7190: LD_EXP 8
7194: PPUSH
7195: CALL_OW 121
// AddComHold ( JMM ) ;
7199: LD_EXP 8
7203: PPUSH
7204: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
7208: LD_EXP 8
7212: PPUSH
7213: LD_STRING D2L-JMM-1
7215: PPUSH
7216: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
7220: LD_EXP 11
7224: PPUSH
7225: LD_STRING D2L-Lisa-2
7227: PPUSH
7228: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
7232: LD_EXP 8
7236: PPUSH
7237: LD_STRING D2L-JMM-2
7239: PPUSH
7240: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
7244: LD_EXP 11
7248: PPUSH
7249: LD_STRING DL-Lisa-3
7251: PPUSH
7252: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7256: LD_EXP 13
7260: PPUSH
7261: LD_STRING DPowell-Pow-1
7263: PPUSH
7264: CALL_OW 94
// dec2 := Query ( Q2L ) ;
7268: LD_ADDR_VAR 0 3
7272: PUSH
7273: LD_STRING Q2L
7275: PPUSH
7276: CALL_OW 97
7280: ST_TO_ADDR
// if dec2 = 1 then
7281: LD_VAR 0 3
7285: PUSH
7286: LD_INT 1
7288: EQUAL
7289: IFFALSE 7355
// begin Say ( JMM , D2La-JMM-1 ) ;
7291: LD_EXP 8
7295: PPUSH
7296: LD_STRING D2La-JMM-1
7298: PPUSH
7299: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
7303: LD_EXP 11
7307: PPUSH
7308: LD_STRING D2La-Lisa-1
7310: PPUSH
7311: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
7315: LD_EXP 8
7319: PPUSH
7320: LD_STRING D2La-JMM-2
7322: PPUSH
7323: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
7327: LD_EXP 11
7331: PPUSH
7332: LD_STRING D2La-Lisa-2
7334: PPUSH
7335: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
7339: LD_EXP 8
7343: PPUSH
7344: LD_STRING D2La-JMM-3
7346: PPUSH
7347: CALL_OW 88
// InGameOff ;
7351: CALL_OW 9
// end ; if dec2 = 2 then
7355: LD_VAR 0 3
7359: PUSH
7360: LD_INT 2
7362: EQUAL
7363: IFFALSE 7422
// begin Say ( JMM , D2Lb-JMM-1 ) ;
7365: LD_EXP 8
7369: PPUSH
7370: LD_STRING D2Lb-JMM-1
7372: PPUSH
7373: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
7377: LD_EXP 11
7381: PPUSH
7382: LD_STRING D2Lb-Lisa-1
7384: PPUSH
7385: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
7389: LD_EXP 8
7393: PPUSH
7394: LD_STRING D2Lb-JMM-2
7396: PPUSH
7397: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7401: LD_EXP 11
7405: PPUSH
7406: LD_STRING D2Lb-Lisa-2
7408: PPUSH
7409: CALL_OW 94
// FinishMission ( true ) ;
7413: LD_INT 1
7415: PPUSH
7416: CALL 9993 0 1
// exit ;
7420: GO 7685
// end ; if dec2 = 3 then
7422: LD_VAR 0 3
7426: PUSH
7427: LD_INT 3
7429: EQUAL
7430: IFFALSE 7453
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7432: LD_EXP 11
7436: PPUSH
7437: LD_STRING D2Lc-Lisa-1
7439: PPUSH
7440: CALL_OW 94
// FinishMission ( true ) ;
7444: LD_INT 1
7446: PPUSH
7447: CALL 9993 0 1
// exit ;
7451: GO 7685
// end ; end else
7453: GO 7464
// begin FinishMission ( true ) ;
7455: LD_INT 1
7457: PPUSH
7458: CALL 9993 0 1
// exit ;
7462: GO 7685
// end ; end ; if JMMGirl = 3 then
7464: LD_EXP 2
7468: PUSH
7469: LD_INT 3
7471: EQUAL
7472: IFFALSE 7685
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7474: LD_EXP 12
7478: PPUSH
7479: LD_STRING D2X-Con-1
7481: PPUSH
7482: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7486: LD_ADDR_VAR 0 2
7490: PUSH
7491: LD_STRING Q1
7493: PPUSH
7494: CALL_OW 97
7498: ST_TO_ADDR
// if dec1 = 1 then
7499: LD_VAR 0 2
7503: PUSH
7504: LD_INT 1
7506: EQUAL
7507: IFFALSE 7678
// begin ComExitVehicle ( JMM ) ;
7509: LD_EXP 8
7513: PPUSH
7514: CALL_OW 121
// AddComHold ( JMM ) ;
7518: LD_EXP 8
7522: PPUSH
7523: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7527: LD_EXP 8
7531: PPUSH
7532: LD_STRING D2X-JMM-1
7534: PPUSH
7535: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7539: LD_EXP 12
7543: PPUSH
7544: LD_STRING D2X-Con-2
7546: PPUSH
7547: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7551: LD_EXP 13
7555: PPUSH
7556: LD_STRING DPowell-Pow-1
7558: PPUSH
7559: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7563: LD_ADDR_VAR 0 3
7567: PUSH
7568: LD_STRING Q2X
7570: PPUSH
7571: CALL_OW 97
7575: ST_TO_ADDR
// if dec2 = 1 then
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 1
7583: EQUAL
7584: IFFALSE 7602
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7586: LD_EXP 8
7590: PPUSH
7591: LD_STRING D2Xa-JMM-1
7593: PPUSH
7594: CALL_OW 88
// InGameOff ;
7598: CALL_OW 9
// end ; if dec2 = 2 then
7602: LD_VAR 0 3
7606: PUSH
7607: LD_INT 2
7609: EQUAL
7610: IFFALSE 7645
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7612: LD_EXP 8
7616: PPUSH
7617: LD_STRING D2Xb-JMM-1
7619: PPUSH
7620: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7624: LD_EXP 12
7628: PPUSH
7629: LD_STRING D2Xb-Con-1
7631: PPUSH
7632: CALL_OW 94
// FinishMission ( true ) ;
7636: LD_INT 1
7638: PPUSH
7639: CALL 9993 0 1
// exit ;
7643: GO 7685
// end ; if dec2 = 3 then
7645: LD_VAR 0 3
7649: PUSH
7650: LD_INT 3
7652: EQUAL
7653: IFFALSE 7676
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7655: LD_EXP 12
7659: PPUSH
7660: LD_STRING D2Xc-Con-1
7662: PPUSH
7663: CALL_OW 94
// FinishMission ( true ) ;
7667: LD_INT 1
7669: PPUSH
7670: CALL 9993 0 1
// exit ;
7674: GO 7685
// end ; end else
7676: GO 7685
// begin FinishMission ( true ) ;
7678: LD_INT 1
7680: PPUSH
7681: CALL 9993 0 1
// end ; end ; end ;
7685: LD_VAR 0 1
7689: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7690: LD_EXP 8
7694: PPUSH
7695: LD_INT 15
7697: PPUSH
7698: CALL_OW 308
7702: IFFALSE 8950
7704: GO 7706
7706: DISABLE
7707: LD_INT 0
7709: PPUSH
// begin if tick < 5 5$00 then
7710: LD_OWVAR 1
7714: PUSH
7715: LD_INT 10500
7717: LESS
7718: IFFALSE 7970
// begin uc_side := 6 ;
7720: LD_ADDR_OWVAR 20
7724: PUSH
7725: LD_INT 6
7727: ST_TO_ADDR
// uc_nation := 3 ;
7728: LD_ADDR_OWVAR 21
7732: PUSH
7733: LD_INT 3
7735: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7736: LD_INT 1
7738: PPUSH
7739: LD_INT 105
7741: PPUSH
7742: LD_INT 97
7744: PPUSH
7745: CALL_OW 293
7749: NOT
7750: IFFALSE 7814
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7752: LD_INT 22
7754: PPUSH
7755: LD_INT 1
7757: PPUSH
7758: LD_INT 3
7760: PPUSH
7761: LD_INT 44
7763: PPUSH
7764: LD_INT 40
7766: PPUSH
7767: CALL 38035 0 5
// veh := CreateVehicle ;
7771: LD_ADDR_VAR 0 1
7775: PUSH
7776: CALL_OW 45
7780: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7781: LD_VAR 0 1
7785: PPUSH
7786: LD_INT 200
7788: PPUSH
7789: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7793: LD_VAR 0 1
7797: PPUSH
7798: LD_INT 105
7800: PPUSH
7801: LD_INT 97
7803: PPUSH
7804: LD_INT 3
7806: PPUSH
7807: LD_INT 0
7809: PPUSH
7810: CALL 73365 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7814: LD_INT 1
7816: PPUSH
7817: LD_INT 116
7819: PPUSH
7820: LD_INT 120
7822: PPUSH
7823: CALL_OW 293
7827: NOT
7828: IFFALSE 7892
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7830: LD_INT 22
7832: PPUSH
7833: LD_INT 1
7835: PPUSH
7836: LD_INT 3
7838: PPUSH
7839: LD_INT 45
7841: PPUSH
7842: LD_INT 40
7844: PPUSH
7845: CALL 38035 0 5
// veh := CreateVehicle ;
7849: LD_ADDR_VAR 0 1
7853: PUSH
7854: CALL_OW 45
7858: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7859: LD_VAR 0 1
7863: PPUSH
7864: LD_INT 200
7866: PPUSH
7867: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7871: LD_VAR 0 1
7875: PPUSH
7876: LD_INT 116
7878: PPUSH
7879: LD_INT 120
7881: PPUSH
7882: LD_INT 4
7884: PPUSH
7885: LD_INT 0
7887: PPUSH
7888: CALL 73365 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7892: LD_INT 1
7894: PPUSH
7895: LD_INT 116
7897: PPUSH
7898: LD_INT 120
7900: PPUSH
7901: CALL_OW 293
7905: NOT
7906: IFFALSE 7970
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7908: LD_INT 24
7910: PPUSH
7911: LD_INT 1
7913: PPUSH
7914: LD_INT 3
7916: PPUSH
7917: LD_INT 45
7919: PPUSH
7920: LD_INT 30
7922: PPUSH
7923: CALL 38035 0 5
// veh := CreateVehicle ;
7927: LD_ADDR_VAR 0 1
7931: PUSH
7932: CALL_OW 45
7936: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7937: LD_VAR 0 1
7941: PPUSH
7942: LD_INT 200
7944: PPUSH
7945: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7949: LD_VAR 0 1
7953: PPUSH
7954: LD_INT 116
7956: PPUSH
7957: LD_INT 120
7959: PPUSH
7960: LD_INT 4
7962: PPUSH
7963: LD_INT 0
7965: PPUSH
7966: CALL 73365 0 5
// end ; end ; InGameOn ;
7970: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7974: LD_INT 35
7976: PPUSH
7977: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7981: LD_EXP 8
7985: PPUSH
7986: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7990: LD_EXP 8
7994: PPUSH
7995: LD_INT 81
7997: PPUSH
7998: LD_INT 109
8000: PPUSH
8001: CALL_OW 111
// AddComHold ( JMM ) ;
8005: LD_EXP 8
8009: PPUSH
8010: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
8014: LD_EXP 10
8018: PUSH
8019: LD_EXP 11
8023: PUSH
8024: LD_EXP 12
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PPUSH
8034: LD_EXP 8
8038: PPUSH
8039: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
8043: LD_EXP 10
8047: PUSH
8048: LD_EXP 11
8052: PUSH
8053: LD_EXP 12
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: LIST
8062: PPUSH
8063: LD_INT 91
8065: PUSH
8066: LD_EXP 8
8070: PUSH
8071: LD_INT 6
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 72
8083: IFFALSE 7974
// case JMMGirl of 1 :
8085: LD_EXP 2
8089: PUSH
8090: LD_INT 1
8092: DOUBLE
8093: EQUAL
8094: IFTRUE 8098
8096: GO 8383
8098: POP
// begin ChangeSideKappaBase ;
8099: CALL 1453 0 0
// ComTurnUnit ( Joan , JMM ) ;
8103: LD_EXP 10
8107: PPUSH
8108: LD_EXP 8
8112: PPUSH
8113: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
8117: LD_EXP 8
8121: PPUSH
8122: LD_EXP 10
8126: PPUSH
8127: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8131: LD_EXP 10
8135: PUSH
8136: LD_EXP 8
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PPUSH
8145: CALL_OW 87
// wait ( 0 0$1 ) ;
8149: LD_INT 35
8151: PPUSH
8152: CALL_OW 67
// DialogueOn ;
8156: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
8160: LD_EXP 10
8164: PPUSH
8165: LD_STRING D3J-Joan-1
8167: PPUSH
8168: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8172: LD_EXP 8
8176: PPUSH
8177: LD_STRING D3J-JMM-1
8179: PPUSH
8180: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
8184: LD_EXP 10
8188: PPUSH
8189: LD_STRING D3J-Joan-2
8191: PPUSH
8192: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
8196: LD_EXP 8
8200: PPUSH
8201: LD_STRING D3J-JMM-2
8203: PPUSH
8204: CALL_OW 88
// wait ( 0 0$1 ) ;
8208: LD_INT 35
8210: PPUSH
8211: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8215: LD_EXP 8
8219: PPUSH
8220: LD_STRING D4-JMM-1
8222: PPUSH
8223: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
8227: LD_EXP 10
8231: PPUSH
8232: LD_STRING D4-Joan-1
8234: PPUSH
8235: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8239: LD_EXP 8
8243: PPUSH
8244: LD_STRING D4-JMM-2
8246: PPUSH
8247: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
8251: LD_EXP 10
8255: PPUSH
8256: LD_STRING D4-Joan-2
8258: PPUSH
8259: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8263: LD_EXP 8
8267: PPUSH
8268: LD_STRING D4-JMM-3
8270: PPUSH
8271: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8275: LD_INT 10
8277: PPUSH
8278: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8282: LD_EXP 13
8286: PPUSH
8287: LD_STRING D7-Pow-1
8289: PPUSH
8290: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8294: LD_EXP 8
8298: PPUSH
8299: LD_STRING D7-JMM-1
8301: PPUSH
8302: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8306: LD_EXP 13
8310: PPUSH
8311: LD_STRING D7-Pow-2
8313: PPUSH
8314: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8318: LD_EXP 8
8322: PPUSH
8323: LD_STRING D7-JMM-2
8325: PPUSH
8326: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8330: LD_EXP 13
8334: PPUSH
8335: LD_STRING D7-Pow-3
8337: PPUSH
8338: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8342: LD_EXP 8
8346: PPUSH
8347: LD_STRING D7-JMM-3
8349: PPUSH
8350: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8354: LD_EXP 13
8358: PPUSH
8359: LD_STRING D7-Pow-4
8361: PPUSH
8362: CALL_OW 94
// DialogueOff ;
8366: CALL_OW 7
// InGameOff ;
8370: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
8374: LD_STRING M2J
8376: PPUSH
8377: CALL_OW 337
// end ; 2 :
8381: GO 8946
8383: LD_INT 2
8385: DOUBLE
8386: EQUAL
8387: IFTRUE 8391
8389: GO 8676
8391: POP
// begin ChangeSideKappaBase ;
8392: CALL 1453 0 0
// ComTurnUnit ( Lisa , JMM ) ;
8396: LD_EXP 11
8400: PPUSH
8401: LD_EXP 8
8405: PPUSH
8406: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
8410: LD_EXP 8
8414: PPUSH
8415: LD_EXP 11
8419: PPUSH
8420: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
8424: LD_EXP 11
8428: PUSH
8429: LD_EXP 8
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PPUSH
8438: CALL_OW 87
// wait ( 0 0$1 ) ;
8442: LD_INT 35
8444: PPUSH
8445: CALL_OW 67
// DialogueOn ;
8449: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
8453: LD_EXP 11
8457: PPUSH
8458: LD_STRING D3L-Lisa-1
8460: PPUSH
8461: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
8465: LD_EXP 8
8469: PPUSH
8470: LD_STRING D3L-JMM-1
8472: PPUSH
8473: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
8477: LD_EXP 11
8481: PPUSH
8482: LD_STRING D3L-Lisa-2
8484: PPUSH
8485: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
8489: LD_EXP 8
8493: PPUSH
8494: LD_STRING D3L-JMM-2
8496: PPUSH
8497: CALL_OW 88
// wait ( 0 0$1 ) ;
8501: LD_INT 35
8503: PPUSH
8504: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8508: LD_EXP 8
8512: PPUSH
8513: LD_STRING D4-JMM-1
8515: PPUSH
8516: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8520: LD_EXP 11
8524: PPUSH
8525: LD_STRING D4-Lisa-1
8527: PPUSH
8528: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8532: LD_EXP 8
8536: PPUSH
8537: LD_STRING D4-JMM-1
8539: PPUSH
8540: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8544: LD_EXP 11
8548: PPUSH
8549: LD_STRING D4-Lisa-2
8551: PPUSH
8552: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8556: LD_EXP 8
8560: PPUSH
8561: LD_STRING D4-JMM-3
8563: PPUSH
8564: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8568: LD_INT 10
8570: PPUSH
8571: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8575: LD_EXP 13
8579: PPUSH
8580: LD_STRING D7-Pow-1
8582: PPUSH
8583: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8587: LD_EXP 8
8591: PPUSH
8592: LD_STRING D7-JMM-1
8594: PPUSH
8595: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8599: LD_EXP 13
8603: PPUSH
8604: LD_STRING D7-Pow-2
8606: PPUSH
8607: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8611: LD_EXP 8
8615: PPUSH
8616: LD_STRING D7-JMM-2
8618: PPUSH
8619: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8623: LD_EXP 13
8627: PPUSH
8628: LD_STRING D7-Pow-3
8630: PPUSH
8631: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8635: LD_EXP 8
8639: PPUSH
8640: LD_STRING D7-JMM-3
8642: PPUSH
8643: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8647: LD_EXP 13
8651: PPUSH
8652: LD_STRING D7-Pow-4
8654: PPUSH
8655: CALL_OW 94
// DialogueOff ;
8659: CALL_OW 7
// InGameOff ;
8663: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8667: LD_STRING M2L
8669: PPUSH
8670: CALL_OW 337
// end ; 3 :
8674: GO 8946
8676: LD_INT 3
8678: DOUBLE
8679: EQUAL
8680: IFTRUE 8684
8682: GO 8945
8684: POP
// begin ChangeSideKappaBase ;
8685: CALL 1453 0 0
// ComTurnUnit ( Connie , JMM ) ;
8689: LD_EXP 12
8693: PPUSH
8694: LD_EXP 8
8698: PPUSH
8699: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8703: LD_EXP 8
8707: PPUSH
8708: LD_EXP 12
8712: PPUSH
8713: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8717: LD_EXP 10
8721: PUSH
8722: LD_EXP 8
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PPUSH
8731: CALL_OW 87
// wait ( 0 0$1 ) ;
8735: LD_INT 35
8737: PPUSH
8738: CALL_OW 67
// DialogueOn ;
8742: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8746: LD_EXP 12
8750: PPUSH
8751: LD_STRING D3X-Con-1
8753: PPUSH
8754: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8758: LD_EXP 8
8762: PPUSH
8763: LD_STRING D3J-JMM-1
8765: PPUSH
8766: CALL_OW 88
// wait ( 0 0$1 ) ;
8770: LD_INT 35
8772: PPUSH
8773: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8777: LD_EXP 8
8781: PPUSH
8782: LD_STRING D4-JMM-1
8784: PPUSH
8785: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8789: LD_EXP 12
8793: PPUSH
8794: LD_STRING D4-Con-1
8796: PPUSH
8797: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8801: LD_EXP 8
8805: PPUSH
8806: LD_STRING D4-JMM-2
8808: PPUSH
8809: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8813: LD_EXP 12
8817: PPUSH
8818: LD_STRING D4-Con-2
8820: PPUSH
8821: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8825: LD_EXP 8
8829: PPUSH
8830: LD_STRING D4-JMM-3
8832: PPUSH
8833: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8837: LD_INT 10
8839: PPUSH
8840: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8844: LD_EXP 13
8848: PPUSH
8849: LD_STRING D7-Pow-1
8851: PPUSH
8852: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8856: LD_EXP 8
8860: PPUSH
8861: LD_STRING D7-JMM-1
8863: PPUSH
8864: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8868: LD_EXP 13
8872: PPUSH
8873: LD_STRING D7-Pow-2
8875: PPUSH
8876: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8880: LD_EXP 8
8884: PPUSH
8885: LD_STRING D7-JMM-2
8887: PPUSH
8888: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8892: LD_EXP 13
8896: PPUSH
8897: LD_STRING D7-Pow-3
8899: PPUSH
8900: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8904: LD_EXP 8
8908: PPUSH
8909: LD_STRING D7-JMM-3
8911: PPUSH
8912: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8916: LD_EXP 13
8920: PPUSH
8921: LD_STRING D7-Pow-4
8923: PPUSH
8924: CALL_OW 94
// DialogueOff ;
8928: CALL_OW 7
// InGameOff ;
8932: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8936: LD_STRING M2X
8938: PPUSH
8939: CALL_OW 337
// end ; end ;
8943: GO 8946
8945: POP
// SaveForQuickRestart ;
8946: CALL_OW 22
// end ;
8950: PPOPN 1
8952: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8953: LD_INT 32
8955: PPUSH
8956: CALL_OW 306
8960: IFFALSE 9287
8962: GO 8964
8964: DISABLE
// begin case JMMGirl of 1 :
8965: LD_EXP 2
8969: PUSH
8970: LD_INT 1
8972: DOUBLE
8973: EQUAL
8974: IFTRUE 8978
8976: GO 9094
8978: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8979: LD_EXP 8
8983: PPUSH
8984: LD_STRING D6J-JMM-1
8986: PPUSH
8987: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8991: LD_STRING 13f_Denis
8993: PPUSH
8994: CALL_OW 28
8998: IFTRUE 9009
9000: PUSH
9001: LD_STRING 13s_Denis
9003: PPUSH
9004: CALL_OW 28
9008: OR
9009: IFFALSE 9049
// begin Say ( Joan , D6J-Joan-1 ) ;
9011: LD_EXP 10
9015: PPUSH
9016: LD_STRING D6J-Joan-1
9018: PPUSH
9019: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
9023: LD_EXP 8
9027: PPUSH
9028: LD_STRING D6J-JMM-2
9030: PPUSH
9031: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
9035: LD_EXP 10
9039: PPUSH
9040: LD_STRING D6J-Joan-2
9042: PPUSH
9043: CALL_OW 88
// end else
9047: GO 9061
// Say ( Joan , D6J-Joan-2a ) ;
9049: LD_EXP 10
9053: PPUSH
9054: LD_STRING D6J-Joan-2a
9056: PPUSH
9057: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
9061: LD_EXP 8
9065: PPUSH
9066: LD_STRING D6J-JMM-3
9068: PPUSH
9069: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
9073: LD_EXP 10
9077: PPUSH
9078: LD_STRING D6J-Joan-3
9080: PPUSH
9081: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9085: LD_STRING M3
9087: PPUSH
9088: CALL_OW 337
// end ; 2 :
9092: GO 9287
9094: LD_INT 2
9096: DOUBLE
9097: EQUAL
9098: IFTRUE 9102
9100: GO 9160
9102: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
9103: LD_EXP 8
9107: PPUSH
9108: LD_STRING D6L-JMM-1
9110: PPUSH
9111: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
9115: LD_EXP 11
9119: PPUSH
9120: LD_STRING D6L-Lisa-1
9122: PPUSH
9123: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
9127: LD_EXP 8
9131: PPUSH
9132: LD_STRING D6L-JMM-2
9134: PPUSH
9135: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
9139: LD_EXP 11
9143: PPUSH
9144: LD_STRING D6L-Lisa-2
9146: PPUSH
9147: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9151: LD_STRING M3
9153: PPUSH
9154: CALL_OW 337
// end ; 3 :
9158: GO 9287
9160: LD_INT 3
9162: DOUBLE
9163: EQUAL
9164: IFTRUE 9168
9166: GO 9286
9168: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
9169: LD_EXP 8
9173: PPUSH
9174: LD_STRING D6X-JMM-1
9176: PPUSH
9177: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
9181: LD_EXP 12
9185: PPUSH
9186: LD_STRING D6X-Con-1
9188: PPUSH
9189: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
9193: LD_EXP 8
9197: PPUSH
9198: LD_STRING D6X-JMM-2
9200: PPUSH
9201: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
9205: LD_EXP 12
9209: PPUSH
9210: LD_STRING D6X-Con-2
9212: PPUSH
9213: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
9217: LD_EXP 8
9221: PPUSH
9222: LD_STRING D6X-JMM-3
9224: PPUSH
9225: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
9229: LD_EXP 12
9233: PPUSH
9234: LD_STRING D6X-Con-3
9236: PPUSH
9237: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
9241: LD_EXP 8
9245: PPUSH
9246: LD_STRING D6X-JMM-4
9248: PPUSH
9249: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
9253: LD_EXP 12
9257: PPUSH
9258: LD_STRING D6X-Con-4
9260: PPUSH
9261: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
9265: LD_EXP 8
9269: PPUSH
9270: LD_STRING D6X-JMM-5
9272: PPUSH
9273: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9277: LD_STRING M3
9279: PPUSH
9280: CALL_OW 337
// end ; end ;
9284: GO 9287
9286: POP
// end ;
9287: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
9288: LD_INT 22
9290: PUSH
9291: LD_INT 1
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 33
9300: PUSH
9301: LD_INT 2
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 69
9316: PPUSH
9317: CALL_OW 306
9321: IFFALSE 9467
9323: GO 9325
9325: DISABLE
// begin case JMMGirl of 1 :
9326: LD_EXP 2
9330: PUSH
9331: LD_INT 1
9333: DOUBLE
9334: EQUAL
9335: IFTRUE 9339
9337: GO 9376
9339: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9340: LD_EXP 8
9344: PPUSH
9345: LD_STRING D5-JMM-1
9347: PPUSH
9348: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9352: LD_INT 77
9354: PPUSH
9355: LD_INT 87
9357: PPUSH
9358: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
9362: LD_EXP 10
9366: PPUSH
9367: LD_STRING D5-Joan-1
9369: PPUSH
9370: CALL_OW 88
// end ; 2 :
9374: GO 9467
9376: LD_INT 2
9378: DOUBLE
9379: EQUAL
9380: IFTRUE 9384
9382: GO 9421
9384: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9385: LD_EXP 8
9389: PPUSH
9390: LD_STRING D5-JMM-1
9392: PPUSH
9393: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9397: LD_INT 77
9399: PPUSH
9400: LD_INT 87
9402: PPUSH
9403: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
9407: LD_EXP 11
9411: PPUSH
9412: LD_STRING D5-Lisa-1
9414: PPUSH
9415: CALL_OW 88
// end ; 3 :
9419: GO 9467
9421: LD_INT 3
9423: DOUBLE
9424: EQUAL
9425: IFTRUE 9429
9427: GO 9466
9429: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9430: LD_EXP 8
9434: PPUSH
9435: LD_STRING D5-JMM-1
9437: PPUSH
9438: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9442: LD_INT 77
9444: PPUSH
9445: LD_INT 87
9447: PPUSH
9448: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
9452: LD_EXP 12
9456: PPUSH
9457: LD_STRING D5-Con-1
9459: PPUSH
9460: CALL_OW 88
// end ; end ;
9464: GO 9467
9466: POP
// end ;
9467: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
9468: LD_EXP 8
9472: PPUSH
9473: CALL_OW 310
9477: PPUSH
9478: LD_INT 16
9480: PPUSH
9481: CALL_OW 308
9485: IFFALSE 9839
9487: GO 9489
9489: DISABLE
9490: LD_INT 0
9492: PPUSH
9493: PPUSH
// begin enable ;
9494: ENABLE
// if JMMGirl = 1 then
9495: LD_EXP 2
9499: PUSH
9500: LD_INT 1
9502: EQUAL
9503: IFFALSE 9520
// JMMGirlVeh := IsInUnit ( Joan ) ;
9505: LD_ADDR_VAR 0 1
9509: PUSH
9510: LD_EXP 10
9514: PPUSH
9515: CALL_OW 310
9519: ST_TO_ADDR
// if JMMGirl = 2 then
9520: LD_EXP 2
9524: PUSH
9525: LD_INT 2
9527: EQUAL
9528: IFFALSE 9545
// JMMGirlVeh := IsInUnit ( Lisa ) ;
9530: LD_ADDR_VAR 0 1
9534: PUSH
9535: LD_EXP 11
9539: PPUSH
9540: CALL_OW 310
9544: ST_TO_ADDR
// if JMMGirl = 3 then
9545: LD_EXP 2
9549: PUSH
9550: LD_INT 3
9552: EQUAL
9553: IFFALSE 9570
// JMMGirlVeh := IsInUnit ( Connie ) ;
9555: LD_ADDR_VAR 0 1
9559: PUSH
9560: LD_EXP 12
9564: PPUSH
9565: CALL_OW 310
9569: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9570: LD_EXP 8
9574: PPUSH
9575: CALL_OW 310
9579: PPUSH
9580: LD_EXP 10
9584: PPUSH
9585: CALL_OW 310
9589: PPUSH
9590: CALL_OW 296
9594: PUSH
9595: LD_INT 10
9597: LESS
9598: IFTRUE 9630
9600: PUSH
9601: LD_EXP 8
9605: PPUSH
9606: CALL_OW 310
9610: PPUSH
9611: LD_EXP 11
9615: PPUSH
9616: CALL_OW 310
9620: PPUSH
9621: CALL_OW 296
9625: PUSH
9626: LD_INT 10
9628: LESS
9629: OR
9630: IFTRUE 9662
9632: PUSH
9633: LD_EXP 8
9637: PPUSH
9638: CALL_OW 310
9642: PPUSH
9643: LD_EXP 12
9647: PPUSH
9648: CALL_OW 310
9652: PPUSH
9653: CALL_OW 296
9657: PUSH
9658: LD_INT 10
9660: LESS
9661: OR
9662: IFFALSE 9759
// begin case Query ( Q3b ) of 1 :
9664: LD_STRING Q3b
9666: PPUSH
9667: CALL_OW 97
9671: PUSH
9672: LD_INT 1
9674: DOUBLE
9675: EQUAL
9676: IFTRUE 9680
9678: GO 9756
9680: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9681: LD_VAR 0 1
9685: PPUSH
9686: CALL_OW 265
9690: PUSH
9691: EMPTY
9692: LIST
9693: PUSH
9694: LD_VAR 0 1
9698: PPUSH
9699: CALL_OW 262
9703: PUSH
9704: EMPTY
9705: LIST
9706: PUSH
9707: LD_VAR 0 1
9711: PPUSH
9712: CALL_OW 263
9716: PUSH
9717: EMPTY
9718: LIST
9719: PUSH
9720: LD_VAR 0 1
9724: PPUSH
9725: CALL_OW 264
9729: PUSH
9730: EMPTY
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: PPUSH
9739: LD_STRING 14_JMMGirlVeh_1
9741: PPUSH
9742: CALL_OW 39
// FinishMission ( false ) ;
9746: LD_INT 0
9748: PPUSH
9749: CALL 9993 0 1
// disable ;
9753: DISABLE
// end ; end ;
9754: GO 9757
9756: POP
// end else
9757: GO 9839
// begin if JMMGirl = 1 then
9759: LD_EXP 2
9763: PUSH
9764: LD_INT 1
9766: EQUAL
9767: IFFALSE 9784
// dec := Query ( Q3bJ ) else
9769: LD_ADDR_VAR 0 2
9773: PUSH
9774: LD_STRING Q3bJ
9776: PPUSH
9777: CALL_OW 97
9781: ST_TO_ADDR
9782: GO 9822
// if JMMGirl = 2 then
9784: LD_EXP 2
9788: PUSH
9789: LD_INT 2
9791: EQUAL
9792: IFFALSE 9809
// dec := Query ( Q3bL ) else
9794: LD_ADDR_VAR 0 2
9798: PUSH
9799: LD_STRING Q3bL
9801: PPUSH
9802: CALL_OW 97
9806: ST_TO_ADDR
9807: GO 9822
// dec := Query ( Q3bX ) ;
9809: LD_ADDR_VAR 0 2
9813: PUSH
9814: LD_STRING Q3bX
9816: PPUSH
9817: CALL_OW 97
9821: ST_TO_ADDR
// if dec = 1 then
9822: LD_VAR 0 2
9826: PUSH
9827: LD_INT 1
9829: EQUAL
9830: IFFALSE 9839
// FinishMission ( false ) ;
9832: LD_INT 0
9834: PPUSH
9835: CALL 9993 0 1
// end ; end ;
9839: PPOPN 2
9841: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9842: LD_INT 22
9844: PUSH
9845: LD_INT 3
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 23
9854: PUSH
9855: LD_INT 3
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: LD_INT 21
9864: PUSH
9865: LD_INT 1
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: PPUSH
9877: CALL_OW 69
9881: PUSH
9882: LD_INT 0
9884: EQUAL
9885: IFFALSE 9992
9887: GO 9889
9889: DISABLE
// begin DialogueOn ;
9890: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9894: LD_EXP 8
9898: PPUSH
9899: LD_STRING DEnd-JMM-1
9901: PPUSH
9902: CALL_OW 88
// case JMMGirl of 1 :
9906: LD_EXP 2
9910: PUSH
9911: LD_INT 1
9913: DOUBLE
9914: EQUAL
9915: IFTRUE 9919
9917: GO 9934
9919: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9920: LD_EXP 10
9924: PPUSH
9925: LD_STRING DEnd-Joan-1
9927: PPUSH
9928: CALL_OW 88
9932: GO 9981
9934: LD_INT 2
9936: DOUBLE
9937: EQUAL
9938: IFTRUE 9942
9940: GO 9957
9942: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9943: LD_EXP 11
9947: PPUSH
9948: LD_STRING DEnd-Lisa-1
9950: PPUSH
9951: CALL_OW 88
9955: GO 9981
9957: LD_INT 3
9959: DOUBLE
9960: EQUAL
9961: IFTRUE 9965
9963: GO 9980
9965: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9966: LD_EXP 12
9970: PPUSH
9971: LD_STRING DEnd-Con-1
9973: PPUSH
9974: CALL_OW 88
9978: GO 9981
9980: POP
// DialogueOff ;
9981: CALL_OW 7
// FinishMission ( false ) ;
9985: LD_INT 0
9987: PPUSH
9988: CALL 9993 0 1
// end ;
9992: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9993: LD_INT 0
9995: PPUSH
9996: PPUSH
9997: PPUSH
9998: PPUSH
9999: PPUSH
10000: PPUSH
// m1 := false ;
10001: LD_ADDR_VAR 0 4
10005: PUSH
10006: LD_INT 0
10008: ST_TO_ADDR
// m2 := false ;
10009: LD_ADDR_VAR 0 5
10013: PUSH
10014: LD_INT 0
10016: ST_TO_ADDR
// m3 := false ;
10017: LD_ADDR_VAR 0 6
10021: PUSH
10022: LD_INT 0
10024: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
10025: LD_ADDR_VAR 0 7
10029: PUSH
10030: LD_INT 22
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 50
10042: PUSH
10043: EMPTY
10044: LIST
10045: PUSH
10046: LD_INT 23
10048: PUSH
10049: LD_INT 3
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 21
10058: PUSH
10059: LD_INT 1
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: PPUSH
10072: CALL_OW 69
10076: PUSH
10077: LD_INT 0
10079: EQUAL
10080: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
10081: LD_EXP 8
10085: PPUSH
10086: LD_STRING 14_JMM
10088: PPUSH
10089: CALL_OW 38
// if tick <= 50 50$00 then
10093: LD_OWVAR 1
10097: PUSH
10098: LD_INT 105000
10100: LESSEQUAL
10101: IFFALSE 10110
// SetAchievement ( ACH_ASPEED_14 ) ;
10103: LD_STRING ACH_ASPEED_14
10105: PPUSH
10106: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
10110: LD_EXP 8
10114: PPUSH
10115: CALL_OW 310
10119: IFFALSE 10141
10121: PUSH
10122: LD_EXP 8
10126: PPUSH
10127: CALL_OW 310
10131: PPUSH
10132: CALL_OW 247
10136: PUSH
10137: LD_INT 2
10139: EQUAL
10140: AND
10141: IFFALSE 10223
// begin JMMNewVeh = IsInUnit ( JMM ) ;
10143: LD_ADDR_VAR 0 3
10147: PUSH
10148: LD_EXP 8
10152: PPUSH
10153: CALL_OW 310
10157: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
10158: LD_VAR 0 3
10162: PPUSH
10163: CALL_OW 265
10167: PUSH
10168: EMPTY
10169: LIST
10170: PUSH
10171: LD_VAR 0 3
10175: PPUSH
10176: CALL_OW 262
10180: PUSH
10181: EMPTY
10182: LIST
10183: PUSH
10184: LD_VAR 0 3
10188: PPUSH
10189: CALL_OW 263
10193: PUSH
10194: EMPTY
10195: LIST
10196: PUSH
10197: LD_VAR 0 3
10201: PPUSH
10202: CALL_OW 264
10206: PUSH
10207: EMPTY
10208: LIST
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: PPUSH
10216: LD_STRING 14_JMMVeh_1
10218: PPUSH
10219: CALL_OW 39
// end ; if fastEnd then
10223: LD_VAR 0 1
10227: IFFALSE 10318
// begin AddMedal ( fastend , - 1 ) ;
10229: LD_STRING fastend
10231: PPUSH
10232: LD_INT 1
10234: NEG
10235: PPUSH
10236: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10240: LD_STRING fastend
10242: PPUSH
10243: LD_INT 1
10245: NEG
10246: PPUSH
10247: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10251: LD_STRING fastend
10253: PPUSH
10254: LD_INT 1
10256: NEG
10257: PPUSH
10258: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10262: LD_EXP 2
10266: PPUSH
10267: LD_STRING 14_JMMGirl_1
10269: PPUSH
10270: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10274: LD_INT 0
10276: PPUSH
10277: LD_STRING 14_JMMGirlStatus_1
10279: PPUSH
10280: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10284: LD_INT 0
10286: PPUSH
10287: LD_STRING 14_KappaStatus_1
10289: PPUSH
10290: CALL_OW 39
// GiveMedals ( Eliminate ) ;
10294: LD_STRING Eliminate
10296: PPUSH
10297: CALL_OW 102
// RewardPeople ( JMM ) ;
10301: LD_EXP 8
10305: PPUSH
10306: CALL_OW 43
// YouWin ;
10310: CALL_OW 103
// exit ;
10314: GO 10988
// end else
10316: GO 10875
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10318: LD_EXP 2
10322: PPUSH
10323: LD_STRING 14_JMMGirl_1
10325: PPUSH
10326: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
10330: LD_VAR 0 7
10334: PPUSH
10335: LD_STRING 14_KappaStatus_1
10337: PPUSH
10338: CALL_OW 39
// case JMMGirl of 1 :
10342: LD_EXP 2
10346: PUSH
10347: LD_INT 1
10349: DOUBLE
10350: EQUAL
10351: IFTRUE 10355
10353: GO 10489
10355: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10356: LD_EXP 10
10360: PPUSH
10361: CALL_OW 302
10365: IFFALSE 10382
10367: PUSH
10368: LD_EXP 10
10372: PPUSH
10373: CALL_OW 255
10377: PUSH
10378: LD_INT 1
10380: EQUAL
10381: AND
10382: IFFALSE 10422
10384: PUSH
10385: LD_VAR 0 7
10389: IFTRUE 10421
10391: PUSH
10392: LD_EXP 8
10396: PPUSH
10397: CALL_OW 310
10401: PPUSH
10402: LD_EXP 10
10406: PPUSH
10407: CALL_OW 310
10411: PPUSH
10412: CALL_OW 296
10416: PUSH
10417: LD_INT 10
10419: LESS
10420: OR
10421: AND
10422: IFFALSE 10466
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10424: LD_INT 1
10426: PPUSH
10427: LD_STRING 14_JMMGirlStatus_1
10429: PPUSH
10430: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10434: LD_EXP 10
10438: PPUSH
10439: LD_STRING 14_Joan
10441: PPUSH
10442: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10446: LD_STRING protect
10448: PPUSH
10449: LD_INT 1
10451: PPUSH
10452: CALL_OW 101
// m1 := true ;
10456: LD_ADDR_VAR 0 4
10460: PUSH
10461: LD_INT 1
10463: ST_TO_ADDR
// end else
10464: GO 10487
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10466: LD_INT 0
10468: PPUSH
10469: LD_STRING 14_JMMGirlStatus_1
10471: PPUSH
10472: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10476: LD_STRING protect
10478: PPUSH
10479: LD_INT 1
10481: NEG
10482: PPUSH
10483: CALL_OW 101
// end ; end ; 2 :
10487: GO 10774
10489: LD_INT 2
10491: DOUBLE
10492: EQUAL
10493: IFTRUE 10497
10495: GO 10631
10497: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10498: LD_EXP 11
10502: PPUSH
10503: CALL_OW 302
10507: IFFALSE 10524
10509: PUSH
10510: LD_EXP 11
10514: PPUSH
10515: CALL_OW 255
10519: PUSH
10520: LD_INT 1
10522: EQUAL
10523: AND
10524: IFFALSE 10564
10526: PUSH
10527: LD_VAR 0 7
10531: IFTRUE 10563
10533: PUSH
10534: LD_EXP 8
10538: PPUSH
10539: CALL_OW 310
10543: PPUSH
10544: LD_EXP 11
10548: PPUSH
10549: CALL_OW 310
10553: PPUSH
10554: CALL_OW 296
10558: PUSH
10559: LD_INT 10
10561: LESS
10562: OR
10563: AND
10564: IFFALSE 10608
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10566: LD_INT 1
10568: PPUSH
10569: LD_STRING 14_JMMGirlStatus_1
10571: PPUSH
10572: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10576: LD_EXP 11
10580: PPUSH
10581: LD_STRING 14_Lisa
10583: PPUSH
10584: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10588: LD_STRING protect
10590: PPUSH
10591: LD_INT 1
10593: PPUSH
10594: CALL_OW 101
// m1 := true ;
10598: LD_ADDR_VAR 0 4
10602: PUSH
10603: LD_INT 1
10605: ST_TO_ADDR
// end else
10606: GO 10629
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10608: LD_INT 0
10610: PPUSH
10611: LD_STRING 14_JMMGirlStatus_1
10613: PPUSH
10614: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10618: LD_STRING protect
10620: PPUSH
10621: LD_INT 2
10623: NEG
10624: PPUSH
10625: CALL_OW 101
// end ; end ; 3 :
10629: GO 10774
10631: LD_INT 3
10633: DOUBLE
10634: EQUAL
10635: IFTRUE 10639
10637: GO 10773
10639: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10640: LD_EXP 12
10644: PPUSH
10645: CALL_OW 302
10649: IFFALSE 10666
10651: PUSH
10652: LD_EXP 12
10656: PPUSH
10657: CALL_OW 255
10661: PUSH
10662: LD_INT 1
10664: EQUAL
10665: AND
10666: IFFALSE 10706
10668: PUSH
10669: LD_VAR 0 7
10673: IFTRUE 10705
10675: PUSH
10676: LD_EXP 8
10680: PPUSH
10681: CALL_OW 310
10685: PPUSH
10686: LD_EXP 12
10690: PPUSH
10691: CALL_OW 310
10695: PPUSH
10696: CALL_OW 296
10700: PUSH
10701: LD_INT 10
10703: LESS
10704: OR
10705: AND
10706: IFFALSE 10750
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10708: LD_INT 1
10710: PPUSH
10711: LD_STRING 14_JMMGirlStatus_1
10713: PPUSH
10714: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10718: LD_EXP 12
10722: PPUSH
10723: LD_STRING 14_Connie
10725: PPUSH
10726: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10730: LD_STRING protect
10732: PPUSH
10733: LD_INT 1
10735: PPUSH
10736: CALL_OW 101
// m1 := true ;
10740: LD_ADDR_VAR 0 4
10744: PUSH
10745: LD_INT 1
10747: ST_TO_ADDR
// end else
10748: GO 10771
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10750: LD_INT 0
10752: PPUSH
10753: LD_STRING 14_JMMGirlStatus_1
10755: PPUSH
10756: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10760: LD_STRING protect
10762: PPUSH
10763: LD_INT 3
10765: NEG
10766: PPUSH
10767: CALL_OW 101
// end ; end ; end ;
10771: GO 10774
10773: POP
// if amLaserCounter >= 2 then
10774: LD_EXP 7
10778: PUSH
10779: LD_INT 2
10781: GREATEREQUAL
10782: IFFALSE 10804
// begin AddMedal ( double , 1 ) ;
10784: LD_STRING double
10786: PPUSH
10787: LD_INT 1
10789: PPUSH
10790: CALL_OW 101
// m2 := true ;
10794: LD_ADDR_VAR 0 5
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// end else
10802: GO 10838
// begin if amLaserCounter = 1 then
10804: LD_EXP 7
10808: PUSH
10809: LD_INT 1
10811: EQUAL
10812: IFFALSE 10827
// AddMedal ( double , - 2 ) else
10814: LD_STRING double
10816: PPUSH
10817: LD_INT 2
10819: NEG
10820: PPUSH
10821: CALL_OW 101
10825: GO 10838
// AddMedal ( double , - 1 ) ;
10827: LD_STRING double
10829: PPUSH
10830: LD_INT 1
10832: NEG
10833: PPUSH
10834: CALL_OW 101
// end ; if ruEliminated then
10838: LD_VAR 0 7
10842: IFFALSE 10864
// begin AddMedal ( base , 1 ) ;
10844: LD_STRING base
10846: PPUSH
10847: LD_INT 1
10849: PPUSH
10850: CALL_OW 101
// m3 := true ;
10854: LD_ADDR_VAR 0 6
10858: PUSH
10859: LD_INT 1
10861: ST_TO_ADDR
// end else
10862: GO 10875
// AddMedal ( base , - 1 ) ;
10864: LD_STRING base
10866: PPUSH
10867: LD_INT 1
10869: NEG
10870: PPUSH
10871: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10875: LD_VAR 0 4
10879: IFFALSE 10887
10881: PUSH
10882: LD_VAR 0 5
10886: AND
10887: IFFALSE 10895
10889: PUSH
10890: LD_VAR 0 6
10894: AND
10895: IFFALSE 10907
10897: PUSH
10898: LD_OWVAR 67
10902: PUSH
10903: LD_INT 3
10905: GREATEREQUAL
10906: AND
10907: IFFALSE 10919
// SetAchievementEX ( ACH_AMER , 14 ) ;
10909: LD_STRING ACH_AMER
10911: PPUSH
10912: LD_INT 14
10914: PPUSH
10915: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10919: LD_STRING Eliminate
10921: PPUSH
10922: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10926: LD_INT 22
10928: PUSH
10929: LD_INT 1
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 3
10938: PUSH
10939: LD_INT 25
10941: PUSH
10942: LD_INT 12
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 3
10955: PUSH
10956: LD_INT 25
10958: PUSH
10959: LD_INT 16
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: LIST
10974: PPUSH
10975: CALL_OW 69
10979: PPUSH
10980: CALL_OW 43
// YouWin ;
10984: CALL_OW 103
// end ; end_of_file
10988: LD_VAR 0 2
10992: RET
// export function CreateNature ; var i , un ; begin
10993: LD_INT 0
10995: PPUSH
10996: PPUSH
10997: PPUSH
// PrepareEnchidna ;
10998: CALL 67556 0 0
// for i := 1 to 3 do
11002: LD_ADDR_VAR 0 2
11006: PUSH
11007: DOUBLE
11008: LD_INT 1
11010: DEC
11011: ST_TO_ADDR
11012: LD_INT 3
11014: PUSH
11015: FOR_TO
11016: IFFALSE 11065
// begin un := CreateHuman ;
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: CALL_OW 44
11027: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11028: LD_VAR 0 3
11032: PPUSH
11033: LD_INT 0
11035: PPUSH
11036: LD_INT 5
11038: PPUSH
11039: CALL_OW 12
11043: PPUSH
11044: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
11048: LD_VAR 0 3
11052: PPUSH
11053: LD_INT 9
11055: PPUSH
11056: LD_INT 0
11058: PPUSH
11059: CALL_OW 49
// end ;
11063: GO 11015
11065: POP
11066: POP
// PrepareHorse ;
11067: CALL 67764 0 0
// for i := 1 to 2 do
11071: LD_ADDR_VAR 0 2
11075: PUSH
11076: DOUBLE
11077: LD_INT 1
11079: DEC
11080: ST_TO_ADDR
11081: LD_INT 2
11083: PUSH
11084: FOR_TO
11085: IFFALSE 11134
// begin un := CreateHuman ;
11087: LD_ADDR_VAR 0 3
11091: PUSH
11092: CALL_OW 44
11096: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11097: LD_VAR 0 3
11101: PPUSH
11102: LD_INT 0
11104: PPUSH
11105: LD_INT 5
11107: PPUSH
11108: CALL_OW 12
11112: PPUSH
11113: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
11117: LD_VAR 0 3
11121: PPUSH
11122: LD_INT 9
11124: PPUSH
11125: LD_INT 0
11127: PPUSH
11128: CALL_OW 49
// end ;
11132: GO 11084
11134: POP
11135: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
11136: LD_ADDR_VAR 0 2
11140: PUSH
11141: DOUBLE
11142: LD_INT 1
11144: DEC
11145: ST_TO_ADDR
11146: LD_INT 4
11148: PUSH
11149: LD_INT 5
11151: PUSH
11152: LD_INT 5
11154: PUSH
11155: LD_INT 5
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: PUSH
11164: LD_OWVAR 67
11168: ARRAY
11169: PUSH
11170: FOR_TO
11171: IFFALSE 11235
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
11173: LD_INT 0
11175: PPUSH
11176: LD_INT 5
11178: PPUSH
11179: CALL_OW 12
11183: PPUSH
11184: CALL 67332 0 1
// un := CreateHuman ;
11188: LD_ADDR_VAR 0 3
11192: PUSH
11193: CALL_OW 44
11197: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11198: LD_VAR 0 3
11202: PPUSH
11203: LD_INT 0
11205: PPUSH
11206: LD_INT 5
11208: PPUSH
11209: CALL_OW 12
11213: PPUSH
11214: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
11218: LD_VAR 0 3
11222: PPUSH
11223: LD_INT 8
11225: PPUSH
11226: LD_INT 0
11228: PPUSH
11229: CALL_OW 49
// end ;
11233: GO 11170
11235: POP
11236: POP
// PrepareFish ;
11237: CALL 67660 0 0
// for i := 1 to 2 do
11241: LD_ADDR_VAR 0 2
11245: PUSH
11246: DOUBLE
11247: LD_INT 1
11249: DEC
11250: ST_TO_ADDR
11251: LD_INT 2
11253: PUSH
11254: FOR_TO
11255: IFFALSE 11304
// begin un := CreateHuman ;
11257: LD_ADDR_VAR 0 3
11261: PUSH
11262: CALL_OW 44
11266: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11267: LD_VAR 0 3
11271: PPUSH
11272: LD_INT 0
11274: PPUSH
11275: LD_INT 5
11277: PPUSH
11278: CALL_OW 12
11282: PPUSH
11283: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
11287: LD_VAR 0 3
11291: PPUSH
11292: LD_INT 6
11294: PPUSH
11295: LD_INT 0
11297: PPUSH
11298: CALL_OW 49
// end ;
11302: GO 11254
11304: POP
11305: POP
// PrepareFrog ;
11306: CALL 67608 0 0
// for i := 1 to 2 do
11310: LD_ADDR_VAR 0 2
11314: PUSH
11315: DOUBLE
11316: LD_INT 1
11318: DEC
11319: ST_TO_ADDR
11320: LD_INT 2
11322: PUSH
11323: FOR_TO
11324: IFFALSE 11373
// begin un := CreateHuman ;
11326: LD_ADDR_VAR 0 3
11330: PUSH
11331: CALL_OW 44
11335: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11336: LD_VAR 0 3
11340: PPUSH
11341: LD_INT 0
11343: PPUSH
11344: LD_INT 5
11346: PPUSH
11347: CALL_OW 12
11351: PPUSH
11352: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
11356: LD_VAR 0 3
11360: PPUSH
11361: LD_INT 7
11363: PPUSH
11364: LD_INT 0
11366: PPUSH
11367: CALL_OW 49
// end ;
11371: GO 11323
11373: POP
11374: POP
// PrepareMastodont ;
11375: CALL 67816 0 0
// un := CreateVehicle ;
11379: LD_ADDR_VAR 0 3
11383: PUSH
11384: CALL_OW 45
11388: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
11389: LD_VAR 0 3
11393: PPUSH
11394: LD_INT 166
11396: PPUSH
11397: LD_INT 134
11399: PPUSH
11400: LD_INT 1
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL 73365 0 5
// end ; end_of_file
11410: LD_VAR 0 1
11414: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
11415: LD_INT 14
11417: PPUSH
11418: CALL_OW 435
11422: PUSH
11423: LD_INT 20
11425: LESS
11426: IFFALSE 11468
11428: GO 11430
11430: DISABLE
// begin enable ;
11431: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11432: LD_INT 35
11434: PPUSH
11435: LD_INT 735
11437: PPUSH
11438: CALL_OW 12
11442: PPUSH
11443: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
11447: LD_INT 1
11449: PPUSH
11450: LD_INT 5
11452: PPUSH
11453: CALL_OW 12
11457: PPUSH
11458: LD_INT 14
11460: PPUSH
11461: LD_INT 1
11463: PPUSH
11464: CALL_OW 55
// end ;
11468: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11469: LD_INT 13
11471: PPUSH
11472: CALL_OW 435
11476: PUSH
11477: LD_INT 30
11479: LESS
11480: IFFALSE 11522
11482: GO 11484
11484: DISABLE
// begin enable ;
11485: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11486: LD_INT 35
11488: PPUSH
11489: LD_INT 735
11491: PPUSH
11492: CALL_OW 12
11496: PPUSH
11497: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
11501: LD_INT 1
11503: PPUSH
11504: LD_INT 5
11506: PPUSH
11507: CALL_OW 12
11511: PPUSH
11512: LD_INT 13
11514: PPUSH
11515: LD_INT 1
11517: PPUSH
11518: CALL_OW 55
// end ;
11522: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11523: LD_INT 13
11525: PPUSH
11526: CALL_OW 435
11530: PUSH
11531: LD_INT 30
11533: LESS
11534: IFFALSE 11567
11536: GO 11538
11538: DISABLE
// begin enable ;
11539: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
11540: LD_INT 1
11542: PPUSH
11543: LD_INT 5
11545: PPUSH
11546: CALL_OW 12
11550: PPUSH
11551: LD_INT 133
11553: PPUSH
11554: LD_INT 122
11556: PPUSH
11557: LD_INT 20
11559: PPUSH
11560: LD_INT 1
11562: PPUSH
11563: CALL_OW 56
// end ; end_of_file end_of_file
11567: END
// export globalGameSaveCounter ; every 0 0$1 do
11568: GO 11570
11570: DISABLE
// begin enable ;
11571: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11572: LD_STRING updateTimer(
11574: PUSH
11575: LD_OWVAR 1
11579: STR
11580: PUSH
11581: LD_STRING );
11583: STR
11584: PPUSH
11585: CALL_OW 559
// end ;
11589: END
// every 0 0$1 do
11590: GO 11592
11592: DISABLE
// begin globalGameSaveCounter := 0 ;
11593: LD_ADDR_EXP 21
11597: PUSH
11598: LD_INT 0
11600: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11601: LD_STRING setGameSaveCounter(0)
11603: PPUSH
11604: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11608: LD_STRING initStreamRollete();
11610: PPUSH
11611: CALL_OW 559
// InitStreamMode ;
11615: CALL 12960 0 0
// DefineStreamItems ( false ) ;
11619: LD_INT 0
11621: PPUSH
11622: CALL 13424 0 1
// end ;
11626: END
// export function SOS_MapStart ( ) ; begin
11627: LD_INT 0
11629: PPUSH
// if streamModeActive then
11630: LD_EXP 22
11634: IFFALSE 11643
// DefineStreamItems ( true ) ;
11636: LD_INT 1
11638: PPUSH
11639: CALL 13424 0 1
// UpdateLuaVariables ( ) ;
11643: CALL 11660 0 0
// UpdateFactoryWaypoints ( ) ;
11647: CALL 26546 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11651: CALL 26798 0 0
// end ;
11655: LD_VAR 0 1
11659: RET
// function UpdateLuaVariables ( ) ; begin
11660: LD_INT 0
11662: PPUSH
// if globalGameSaveCounter then
11663: LD_EXP 21
11667: IFFALSE 11701
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11669: LD_ADDR_EXP 21
11673: PUSH
11674: LD_EXP 21
11678: PPUSH
11679: CALL 72578 0 1
11683: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11684: LD_STRING setGameSaveCounter(
11686: PUSH
11687: LD_EXP 21
11691: STR
11692: PUSH
11693: LD_STRING )
11695: STR
11696: PPUSH
11697: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11701: LD_STRING setGameDifficulty(
11703: PUSH
11704: LD_OWVAR 67
11708: STR
11709: PUSH
11710: LD_STRING )
11712: STR
11713: PPUSH
11714: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11718: LD_STRING displayDifficulty(
11720: PUSH
11721: LD_OWVAR 67
11725: STR
11726: PUSH
11727: LD_STRING )
11729: STR
11730: PPUSH
11731: CALL_OW 559
// end ;
11735: LD_VAR 0 1
11739: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11740: LD_INT 0
11742: PPUSH
// if p2 = stream_mode then
11743: LD_VAR 0 2
11747: PUSH
11748: LD_INT 100
11750: EQUAL
11751: IFFALSE 12754
// begin if not StreamModeActive then
11753: LD_EXP 22
11757: NOT
11758: IFFALSE 11768
// StreamModeActive := true ;
11760: LD_ADDR_EXP 22
11764: PUSH
11765: LD_INT 1
11767: ST_TO_ADDR
// if p3 = 0 then
11768: LD_VAR 0 3
11772: PUSH
11773: LD_INT 0
11775: EQUAL
11776: IFFALSE 11782
// InitStreamMode ;
11778: CALL 12960 0 0
// if p3 = 1 then
11782: LD_VAR 0 3
11786: PUSH
11787: LD_INT 1
11789: EQUAL
11790: IFFALSE 11800
// sRocket := true ;
11792: LD_ADDR_EXP 27
11796: PUSH
11797: LD_INT 1
11799: ST_TO_ADDR
// if p3 = 2 then
11800: LD_VAR 0 3
11804: PUSH
11805: LD_INT 2
11807: EQUAL
11808: IFFALSE 11818
// sSpeed := true ;
11810: LD_ADDR_EXP 26
11814: PUSH
11815: LD_INT 1
11817: ST_TO_ADDR
// if p3 = 3 then
11818: LD_VAR 0 3
11822: PUSH
11823: LD_INT 3
11825: EQUAL
11826: IFFALSE 11836
// sEngine := true ;
11828: LD_ADDR_EXP 28
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// if p3 = 4 then
11836: LD_VAR 0 3
11840: PUSH
11841: LD_INT 4
11843: EQUAL
11844: IFFALSE 11854
// sSpec := true ;
11846: LD_ADDR_EXP 25
11850: PUSH
11851: LD_INT 1
11853: ST_TO_ADDR
// if p3 = 5 then
11854: LD_VAR 0 3
11858: PUSH
11859: LD_INT 5
11861: EQUAL
11862: IFFALSE 11872
// sLevel := true ;
11864: LD_ADDR_EXP 29
11868: PUSH
11869: LD_INT 1
11871: ST_TO_ADDR
// if p3 = 6 then
11872: LD_VAR 0 3
11876: PUSH
11877: LD_INT 6
11879: EQUAL
11880: IFFALSE 11890
// sArmoury := true ;
11882: LD_ADDR_EXP 30
11886: PUSH
11887: LD_INT 1
11889: ST_TO_ADDR
// if p3 = 7 then
11890: LD_VAR 0 3
11894: PUSH
11895: LD_INT 7
11897: EQUAL
11898: IFFALSE 11908
// sRadar := true ;
11900: LD_ADDR_EXP 31
11904: PUSH
11905: LD_INT 1
11907: ST_TO_ADDR
// if p3 = 8 then
11908: LD_VAR 0 3
11912: PUSH
11913: LD_INT 8
11915: EQUAL
11916: IFFALSE 11926
// sBunker := true ;
11918: LD_ADDR_EXP 32
11922: PUSH
11923: LD_INT 1
11925: ST_TO_ADDR
// if p3 = 9 then
11926: LD_VAR 0 3
11930: PUSH
11931: LD_INT 9
11933: EQUAL
11934: IFFALSE 11944
// sHack := true ;
11936: LD_ADDR_EXP 33
11940: PUSH
11941: LD_INT 1
11943: ST_TO_ADDR
// if p3 = 10 then
11944: LD_VAR 0 3
11948: PUSH
11949: LD_INT 10
11951: EQUAL
11952: IFFALSE 11962
// sFire := true ;
11954: LD_ADDR_EXP 34
11958: PUSH
11959: LD_INT 1
11961: ST_TO_ADDR
// if p3 = 11 then
11962: LD_VAR 0 3
11966: PUSH
11967: LD_INT 11
11969: EQUAL
11970: IFFALSE 11980
// sRefresh := true ;
11972: LD_ADDR_EXP 35
11976: PUSH
11977: LD_INT 1
11979: ST_TO_ADDR
// if p3 = 12 then
11980: LD_VAR 0 3
11984: PUSH
11985: LD_INT 12
11987: EQUAL
11988: IFFALSE 11998
// sExp := true ;
11990: LD_ADDR_EXP 36
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// if p3 = 13 then
11998: LD_VAR 0 3
12002: PUSH
12003: LD_INT 13
12005: EQUAL
12006: IFFALSE 12016
// sDepot := true ;
12008: LD_ADDR_EXP 37
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// if p3 = 14 then
12016: LD_VAR 0 3
12020: PUSH
12021: LD_INT 14
12023: EQUAL
12024: IFFALSE 12034
// sFlag := true ;
12026: LD_ADDR_EXP 38
12030: PUSH
12031: LD_INT 1
12033: ST_TO_ADDR
// if p3 = 15 then
12034: LD_VAR 0 3
12038: PUSH
12039: LD_INT 15
12041: EQUAL
12042: IFFALSE 12052
// sKamikadze := true ;
12044: LD_ADDR_EXP 46
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// if p3 = 16 then
12052: LD_VAR 0 3
12056: PUSH
12057: LD_INT 16
12059: EQUAL
12060: IFFALSE 12070
// sTroll := true ;
12062: LD_ADDR_EXP 47
12066: PUSH
12067: LD_INT 1
12069: ST_TO_ADDR
// if p3 = 17 then
12070: LD_VAR 0 3
12074: PUSH
12075: LD_INT 17
12077: EQUAL
12078: IFFALSE 12088
// sSlow := true ;
12080: LD_ADDR_EXP 48
12084: PUSH
12085: LD_INT 1
12087: ST_TO_ADDR
// if p3 = 18 then
12088: LD_VAR 0 3
12092: PUSH
12093: LD_INT 18
12095: EQUAL
12096: IFFALSE 12106
// sLack := true ;
12098: LD_ADDR_EXP 49
12102: PUSH
12103: LD_INT 1
12105: ST_TO_ADDR
// if p3 = 19 then
12106: LD_VAR 0 3
12110: PUSH
12111: LD_INT 19
12113: EQUAL
12114: IFFALSE 12124
// sTank := true ;
12116: LD_ADDR_EXP 51
12120: PUSH
12121: LD_INT 1
12123: ST_TO_ADDR
// if p3 = 20 then
12124: LD_VAR 0 3
12128: PUSH
12129: LD_INT 20
12131: EQUAL
12132: IFFALSE 12142
// sRemote := true ;
12134: LD_ADDR_EXP 52
12138: PUSH
12139: LD_INT 1
12141: ST_TO_ADDR
// if p3 = 21 then
12142: LD_VAR 0 3
12146: PUSH
12147: LD_INT 21
12149: EQUAL
12150: IFFALSE 12160
// sPowell := true ;
12152: LD_ADDR_EXP 53
12156: PUSH
12157: LD_INT 1
12159: ST_TO_ADDR
// if p3 = 22 then
12160: LD_VAR 0 3
12164: PUSH
12165: LD_INT 22
12167: EQUAL
12168: IFFALSE 12178
// sTeleport := true ;
12170: LD_ADDR_EXP 56
12174: PUSH
12175: LD_INT 1
12177: ST_TO_ADDR
// if p3 = 23 then
12178: LD_VAR 0 3
12182: PUSH
12183: LD_INT 23
12185: EQUAL
12186: IFFALSE 12196
// sOilTower := true ;
12188: LD_ADDR_EXP 58
12192: PUSH
12193: LD_INT 1
12195: ST_TO_ADDR
// if p3 = 24 then
12196: LD_VAR 0 3
12200: PUSH
12201: LD_INT 24
12203: EQUAL
12204: IFFALSE 12214
// sShovel := true ;
12206: LD_ADDR_EXP 59
12210: PUSH
12211: LD_INT 1
12213: ST_TO_ADDR
// if p3 = 25 then
12214: LD_VAR 0 3
12218: PUSH
12219: LD_INT 25
12221: EQUAL
12222: IFFALSE 12232
// sSheik := true ;
12224: LD_ADDR_EXP 60
12228: PUSH
12229: LD_INT 1
12231: ST_TO_ADDR
// if p3 = 26 then
12232: LD_VAR 0 3
12236: PUSH
12237: LD_INT 26
12239: EQUAL
12240: IFFALSE 12250
// sEarthquake := true ;
12242: LD_ADDR_EXP 62
12246: PUSH
12247: LD_INT 1
12249: ST_TO_ADDR
// if p3 = 27 then
12250: LD_VAR 0 3
12254: PUSH
12255: LD_INT 27
12257: EQUAL
12258: IFFALSE 12268
// sAI := true ;
12260: LD_ADDR_EXP 63
12264: PUSH
12265: LD_INT 1
12267: ST_TO_ADDR
// if p3 = 28 then
12268: LD_VAR 0 3
12272: PUSH
12273: LD_INT 28
12275: EQUAL
12276: IFFALSE 12286
// sCargo := true ;
12278: LD_ADDR_EXP 66
12282: PUSH
12283: LD_INT 1
12285: ST_TO_ADDR
// if p3 = 29 then
12286: LD_VAR 0 3
12290: PUSH
12291: LD_INT 29
12293: EQUAL
12294: IFFALSE 12304
// sDLaser := true ;
12296: LD_ADDR_EXP 67
12300: PUSH
12301: LD_INT 1
12303: ST_TO_ADDR
// if p3 = 30 then
12304: LD_VAR 0 3
12308: PUSH
12309: LD_INT 30
12311: EQUAL
12312: IFFALSE 12322
// sExchange := true ;
12314: LD_ADDR_EXP 68
12318: PUSH
12319: LD_INT 1
12321: ST_TO_ADDR
// if p3 = 31 then
12322: LD_VAR 0 3
12326: PUSH
12327: LD_INT 31
12329: EQUAL
12330: IFFALSE 12340
// sFac := true ;
12332: LD_ADDR_EXP 69
12336: PUSH
12337: LD_INT 1
12339: ST_TO_ADDR
// if p3 = 32 then
12340: LD_VAR 0 3
12344: PUSH
12345: LD_INT 32
12347: EQUAL
12348: IFFALSE 12358
// sPower := true ;
12350: LD_ADDR_EXP 70
12354: PUSH
12355: LD_INT 1
12357: ST_TO_ADDR
// if p3 = 33 then
12358: LD_VAR 0 3
12362: PUSH
12363: LD_INT 33
12365: EQUAL
12366: IFFALSE 12376
// sRandom := true ;
12368: LD_ADDR_EXP 71
12372: PUSH
12373: LD_INT 1
12375: ST_TO_ADDR
// if p3 = 34 then
12376: LD_VAR 0 3
12380: PUSH
12381: LD_INT 34
12383: EQUAL
12384: IFFALSE 12394
// sShield := true ;
12386: LD_ADDR_EXP 72
12390: PUSH
12391: LD_INT 1
12393: ST_TO_ADDR
// if p3 = 35 then
12394: LD_VAR 0 3
12398: PUSH
12399: LD_INT 35
12401: EQUAL
12402: IFFALSE 12412
// sTime := true ;
12404: LD_ADDR_EXP 73
12408: PUSH
12409: LD_INT 1
12411: ST_TO_ADDR
// if p3 = 36 then
12412: LD_VAR 0 3
12416: PUSH
12417: LD_INT 36
12419: EQUAL
12420: IFFALSE 12430
// sTools := true ;
12422: LD_ADDR_EXP 74
12426: PUSH
12427: LD_INT 1
12429: ST_TO_ADDR
// if p3 = 101 then
12430: LD_VAR 0 3
12434: PUSH
12435: LD_INT 101
12437: EQUAL
12438: IFFALSE 12448
// sSold := true ;
12440: LD_ADDR_EXP 39
12444: PUSH
12445: LD_INT 1
12447: ST_TO_ADDR
// if p3 = 102 then
12448: LD_VAR 0 3
12452: PUSH
12453: LD_INT 102
12455: EQUAL
12456: IFFALSE 12466
// sDiff := true ;
12458: LD_ADDR_EXP 40
12462: PUSH
12463: LD_INT 1
12465: ST_TO_ADDR
// if p3 = 103 then
12466: LD_VAR 0 3
12470: PUSH
12471: LD_INT 103
12473: EQUAL
12474: IFFALSE 12484
// sFog := true ;
12476: LD_ADDR_EXP 43
12480: PUSH
12481: LD_INT 1
12483: ST_TO_ADDR
// if p3 = 104 then
12484: LD_VAR 0 3
12488: PUSH
12489: LD_INT 104
12491: EQUAL
12492: IFFALSE 12502
// sReset := true ;
12494: LD_ADDR_EXP 44
12498: PUSH
12499: LD_INT 1
12501: ST_TO_ADDR
// if p3 = 105 then
12502: LD_VAR 0 3
12506: PUSH
12507: LD_INT 105
12509: EQUAL
12510: IFFALSE 12520
// sSun := true ;
12512: LD_ADDR_EXP 45
12516: PUSH
12517: LD_INT 1
12519: ST_TO_ADDR
// if p3 = 106 then
12520: LD_VAR 0 3
12524: PUSH
12525: LD_INT 106
12527: EQUAL
12528: IFFALSE 12538
// sTiger := true ;
12530: LD_ADDR_EXP 41
12534: PUSH
12535: LD_INT 1
12537: ST_TO_ADDR
// if p3 = 107 then
12538: LD_VAR 0 3
12542: PUSH
12543: LD_INT 107
12545: EQUAL
12546: IFFALSE 12556
// sBomb := true ;
12548: LD_ADDR_EXP 42
12552: PUSH
12553: LD_INT 1
12555: ST_TO_ADDR
// if p3 = 108 then
12556: LD_VAR 0 3
12560: PUSH
12561: LD_INT 108
12563: EQUAL
12564: IFFALSE 12574
// sWound := true ;
12566: LD_ADDR_EXP 50
12570: PUSH
12571: LD_INT 1
12573: ST_TO_ADDR
// if p3 = 109 then
12574: LD_VAR 0 3
12578: PUSH
12579: LD_INT 109
12581: EQUAL
12582: IFFALSE 12592
// sBetray := true ;
12584: LD_ADDR_EXP 54
12588: PUSH
12589: LD_INT 1
12591: ST_TO_ADDR
// if p3 = 110 then
12592: LD_VAR 0 3
12596: PUSH
12597: LD_INT 110
12599: EQUAL
12600: IFFALSE 12610
// sContamin := true ;
12602: LD_ADDR_EXP 55
12606: PUSH
12607: LD_INT 1
12609: ST_TO_ADDR
// if p3 = 111 then
12610: LD_VAR 0 3
12614: PUSH
12615: LD_INT 111
12617: EQUAL
12618: IFFALSE 12628
// sOil := true ;
12620: LD_ADDR_EXP 57
12624: PUSH
12625: LD_INT 1
12627: ST_TO_ADDR
// if p3 = 112 then
12628: LD_VAR 0 3
12632: PUSH
12633: LD_INT 112
12635: EQUAL
12636: IFFALSE 12646
// sStu := true ;
12638: LD_ADDR_EXP 61
12642: PUSH
12643: LD_INT 1
12645: ST_TO_ADDR
// if p3 = 113 then
12646: LD_VAR 0 3
12650: PUSH
12651: LD_INT 113
12653: EQUAL
12654: IFFALSE 12664
// sBazooka := true ;
12656: LD_ADDR_EXP 64
12660: PUSH
12661: LD_INT 1
12663: ST_TO_ADDR
// if p3 = 114 then
12664: LD_VAR 0 3
12668: PUSH
12669: LD_INT 114
12671: EQUAL
12672: IFFALSE 12682
// sMortar := true ;
12674: LD_ADDR_EXP 65
12678: PUSH
12679: LD_INT 1
12681: ST_TO_ADDR
// if p3 = 115 then
12682: LD_VAR 0 3
12686: PUSH
12687: LD_INT 115
12689: EQUAL
12690: IFFALSE 12700
// sRanger := true ;
12692: LD_ADDR_EXP 75
12696: PUSH
12697: LD_INT 1
12699: ST_TO_ADDR
// if p3 = 116 then
12700: LD_VAR 0 3
12704: PUSH
12705: LD_INT 116
12707: EQUAL
12708: IFFALSE 12718
// sComputer := true ;
12710: LD_ADDR_EXP 76
12714: PUSH
12715: LD_INT 1
12717: ST_TO_ADDR
// if p3 = 117 then
12718: LD_VAR 0 3
12722: PUSH
12723: LD_INT 117
12725: EQUAL
12726: IFFALSE 12736
// s30 := true ;
12728: LD_ADDR_EXP 77
12732: PUSH
12733: LD_INT 1
12735: ST_TO_ADDR
// if p3 = 118 then
12736: LD_VAR 0 3
12740: PUSH
12741: LD_INT 118
12743: EQUAL
12744: IFFALSE 12754
// s60 := true ;
12746: LD_ADDR_EXP 78
12750: PUSH
12751: LD_INT 1
12753: ST_TO_ADDR
// end ; if p2 = hack_mode then
12754: LD_VAR 0 2
12758: PUSH
12759: LD_INT 101
12761: EQUAL
12762: IFFALSE 12890
// begin case p3 of 1 :
12764: LD_VAR 0 3
12768: PUSH
12769: LD_INT 1
12771: DOUBLE
12772: EQUAL
12773: IFTRUE 12777
12775: GO 12784
12777: POP
// hHackUnlimitedResources ; 2 :
12778: CALL 25153 0 0
12782: GO 12890
12784: LD_INT 2
12786: DOUBLE
12787: EQUAL
12788: IFTRUE 12792
12790: GO 12799
12792: POP
// hHackSetLevel10 ; 3 :
12793: CALL 25286 0 0
12797: GO 12890
12799: LD_INT 3
12801: DOUBLE
12802: EQUAL
12803: IFTRUE 12807
12805: GO 12814
12807: POP
// hHackSetLevel10YourUnits ; 4 :
12808: CALL 25371 0 0
12812: GO 12890
12814: LD_INT 4
12816: DOUBLE
12817: EQUAL
12818: IFTRUE 12822
12820: GO 12829
12822: POP
// hHackInvincible ; 5 :
12823: CALL 25819 0 0
12827: GO 12890
12829: LD_INT 5
12831: DOUBLE
12832: EQUAL
12833: IFTRUE 12837
12835: GO 12844
12837: POP
// hHackInvisible ; 6 :
12838: CALL 25930 0 0
12842: GO 12890
12844: LD_INT 6
12846: DOUBLE
12847: EQUAL
12848: IFTRUE 12852
12850: GO 12859
12852: POP
// hHackChangeYourSide ; 7 :
12853: CALL 25987 0 0
12857: GO 12890
12859: LD_INT 7
12861: DOUBLE
12862: EQUAL
12863: IFTRUE 12867
12865: GO 12874
12867: POP
// hHackChangeUnitSide ; 8 :
12868: CALL 26029 0 0
12872: GO 12890
12874: LD_INT 8
12876: DOUBLE
12877: EQUAL
12878: IFTRUE 12882
12880: GO 12889
12882: POP
// hHackFog ; end ;
12883: CALL 26130 0 0
12887: GO 12890
12889: POP
// end ; if p2 = game_save_mode then
12890: LD_VAR 0 2
12894: PUSH
12895: LD_INT 102
12897: EQUAL
12898: IFFALSE 12955
// begin if p3 = 1 then
12900: LD_VAR 0 3
12904: PUSH
12905: LD_INT 1
12907: EQUAL
12908: IFFALSE 12920
// globalGameSaveCounter := p4 ;
12910: LD_ADDR_EXP 21
12914: PUSH
12915: LD_VAR 0 4
12919: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12920: LD_VAR 0 3
12924: PUSH
12925: LD_INT 2
12927: EQUAL
12928: IFFALSE 12936
12930: PUSH
12931: LD_EXP 21
12935: AND
12936: IFFALSE 12955
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12938: LD_STRING setGameSaveCounter(
12940: PUSH
12941: LD_EXP 21
12945: STR
12946: PUSH
12947: LD_STRING )
12949: STR
12950: PPUSH
12951: CALL_OW 559
// end ; end ;
12955: LD_VAR 0 7
12959: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12960: LD_INT 0
12962: PPUSH
// streamModeActive := false ;
12963: LD_ADDR_EXP 22
12967: PUSH
12968: LD_INT 0
12970: ST_TO_ADDR
// normalCounter := 36 ;
12971: LD_ADDR_EXP 23
12975: PUSH
12976: LD_INT 36
12978: ST_TO_ADDR
// hardcoreCounter := 18 ;
12979: LD_ADDR_EXP 24
12983: PUSH
12984: LD_INT 18
12986: ST_TO_ADDR
// sRocket := false ;
12987: LD_ADDR_EXP 27
12991: PUSH
12992: LD_INT 0
12994: ST_TO_ADDR
// sSpeed := false ;
12995: LD_ADDR_EXP 26
12999: PUSH
13000: LD_INT 0
13002: ST_TO_ADDR
// sEngine := false ;
13003: LD_ADDR_EXP 28
13007: PUSH
13008: LD_INT 0
13010: ST_TO_ADDR
// sSpec := false ;
13011: LD_ADDR_EXP 25
13015: PUSH
13016: LD_INT 0
13018: ST_TO_ADDR
// sLevel := false ;
13019: LD_ADDR_EXP 29
13023: PUSH
13024: LD_INT 0
13026: ST_TO_ADDR
// sArmoury := false ;
13027: LD_ADDR_EXP 30
13031: PUSH
13032: LD_INT 0
13034: ST_TO_ADDR
// sRadar := false ;
13035: LD_ADDR_EXP 31
13039: PUSH
13040: LD_INT 0
13042: ST_TO_ADDR
// sBunker := false ;
13043: LD_ADDR_EXP 32
13047: PUSH
13048: LD_INT 0
13050: ST_TO_ADDR
// sHack := false ;
13051: LD_ADDR_EXP 33
13055: PUSH
13056: LD_INT 0
13058: ST_TO_ADDR
// sFire := false ;
13059: LD_ADDR_EXP 34
13063: PUSH
13064: LD_INT 0
13066: ST_TO_ADDR
// sRefresh := false ;
13067: LD_ADDR_EXP 35
13071: PUSH
13072: LD_INT 0
13074: ST_TO_ADDR
// sExp := false ;
13075: LD_ADDR_EXP 36
13079: PUSH
13080: LD_INT 0
13082: ST_TO_ADDR
// sDepot := false ;
13083: LD_ADDR_EXP 37
13087: PUSH
13088: LD_INT 0
13090: ST_TO_ADDR
// sFlag := false ;
13091: LD_ADDR_EXP 38
13095: PUSH
13096: LD_INT 0
13098: ST_TO_ADDR
// sKamikadze := false ;
13099: LD_ADDR_EXP 46
13103: PUSH
13104: LD_INT 0
13106: ST_TO_ADDR
// sTroll := false ;
13107: LD_ADDR_EXP 47
13111: PUSH
13112: LD_INT 0
13114: ST_TO_ADDR
// sSlow := false ;
13115: LD_ADDR_EXP 48
13119: PUSH
13120: LD_INT 0
13122: ST_TO_ADDR
// sLack := false ;
13123: LD_ADDR_EXP 49
13127: PUSH
13128: LD_INT 0
13130: ST_TO_ADDR
// sTank := false ;
13131: LD_ADDR_EXP 51
13135: PUSH
13136: LD_INT 0
13138: ST_TO_ADDR
// sRemote := false ;
13139: LD_ADDR_EXP 52
13143: PUSH
13144: LD_INT 0
13146: ST_TO_ADDR
// sPowell := false ;
13147: LD_ADDR_EXP 53
13151: PUSH
13152: LD_INT 0
13154: ST_TO_ADDR
// sTeleport := false ;
13155: LD_ADDR_EXP 56
13159: PUSH
13160: LD_INT 0
13162: ST_TO_ADDR
// sOilTower := false ;
13163: LD_ADDR_EXP 58
13167: PUSH
13168: LD_INT 0
13170: ST_TO_ADDR
// sShovel := false ;
13171: LD_ADDR_EXP 59
13175: PUSH
13176: LD_INT 0
13178: ST_TO_ADDR
// sSheik := false ;
13179: LD_ADDR_EXP 60
13183: PUSH
13184: LD_INT 0
13186: ST_TO_ADDR
// sEarthquake := false ;
13187: LD_ADDR_EXP 62
13191: PUSH
13192: LD_INT 0
13194: ST_TO_ADDR
// sAI := false ;
13195: LD_ADDR_EXP 63
13199: PUSH
13200: LD_INT 0
13202: ST_TO_ADDR
// sCargo := false ;
13203: LD_ADDR_EXP 66
13207: PUSH
13208: LD_INT 0
13210: ST_TO_ADDR
// sDLaser := false ;
13211: LD_ADDR_EXP 67
13215: PUSH
13216: LD_INT 0
13218: ST_TO_ADDR
// sExchange := false ;
13219: LD_ADDR_EXP 68
13223: PUSH
13224: LD_INT 0
13226: ST_TO_ADDR
// sFac := false ;
13227: LD_ADDR_EXP 69
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// sPower := false ;
13235: LD_ADDR_EXP 70
13239: PUSH
13240: LD_INT 0
13242: ST_TO_ADDR
// sRandom := false ;
13243: LD_ADDR_EXP 71
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// sShield := false ;
13251: LD_ADDR_EXP 72
13255: PUSH
13256: LD_INT 0
13258: ST_TO_ADDR
// sTime := false ;
13259: LD_ADDR_EXP 73
13263: PUSH
13264: LD_INT 0
13266: ST_TO_ADDR
// sTools := false ;
13267: LD_ADDR_EXP 74
13271: PUSH
13272: LD_INT 0
13274: ST_TO_ADDR
// sSold := false ;
13275: LD_ADDR_EXP 39
13279: PUSH
13280: LD_INT 0
13282: ST_TO_ADDR
// sDiff := false ;
13283: LD_ADDR_EXP 40
13287: PUSH
13288: LD_INT 0
13290: ST_TO_ADDR
// sFog := false ;
13291: LD_ADDR_EXP 43
13295: PUSH
13296: LD_INT 0
13298: ST_TO_ADDR
// sReset := false ;
13299: LD_ADDR_EXP 44
13303: PUSH
13304: LD_INT 0
13306: ST_TO_ADDR
// sSun := false ;
13307: LD_ADDR_EXP 45
13311: PUSH
13312: LD_INT 0
13314: ST_TO_ADDR
// sTiger := false ;
13315: LD_ADDR_EXP 41
13319: PUSH
13320: LD_INT 0
13322: ST_TO_ADDR
// sBomb := false ;
13323: LD_ADDR_EXP 42
13327: PUSH
13328: LD_INT 0
13330: ST_TO_ADDR
// sWound := false ;
13331: LD_ADDR_EXP 50
13335: PUSH
13336: LD_INT 0
13338: ST_TO_ADDR
// sBetray := false ;
13339: LD_ADDR_EXP 54
13343: PUSH
13344: LD_INT 0
13346: ST_TO_ADDR
// sContamin := false ;
13347: LD_ADDR_EXP 55
13351: PUSH
13352: LD_INT 0
13354: ST_TO_ADDR
// sOil := false ;
13355: LD_ADDR_EXP 57
13359: PUSH
13360: LD_INT 0
13362: ST_TO_ADDR
// sStu := false ;
13363: LD_ADDR_EXP 61
13367: PUSH
13368: LD_INT 0
13370: ST_TO_ADDR
// sBazooka := false ;
13371: LD_ADDR_EXP 64
13375: PUSH
13376: LD_INT 0
13378: ST_TO_ADDR
// sMortar := false ;
13379: LD_ADDR_EXP 65
13383: PUSH
13384: LD_INT 0
13386: ST_TO_ADDR
// sRanger := false ;
13387: LD_ADDR_EXP 75
13391: PUSH
13392: LD_INT 0
13394: ST_TO_ADDR
// sComputer := false ;
13395: LD_ADDR_EXP 76
13399: PUSH
13400: LD_INT 0
13402: ST_TO_ADDR
// s30 := false ;
13403: LD_ADDR_EXP 77
13407: PUSH
13408: LD_INT 0
13410: ST_TO_ADDR
// s60 := false ;
13411: LD_ADDR_EXP 78
13415: PUSH
13416: LD_INT 0
13418: ST_TO_ADDR
// end ;
13419: LD_VAR 0 1
13423: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13424: LD_INT 0
13426: PPUSH
13427: PPUSH
13428: PPUSH
13429: PPUSH
13430: PPUSH
13431: PPUSH
13432: PPUSH
// result := [ ] ;
13433: LD_ADDR_VAR 0 2
13437: PUSH
13438: EMPTY
13439: ST_TO_ADDR
// if campaign_id = 1 then
13440: LD_OWVAR 69
13444: PUSH
13445: LD_INT 1
13447: EQUAL
13448: IFFALSE 16614
// begin case mission_number of 1 :
13450: LD_OWVAR 70
13454: PUSH
13455: LD_INT 1
13457: DOUBLE
13458: EQUAL
13459: IFTRUE 13463
13461: GO 13539
13463: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13464: LD_ADDR_VAR 0 2
13468: PUSH
13469: LD_INT 2
13471: PUSH
13472: LD_INT 4
13474: PUSH
13475: LD_INT 11
13477: PUSH
13478: LD_INT 12
13480: PUSH
13481: LD_INT 15
13483: PUSH
13484: LD_INT 16
13486: PUSH
13487: LD_INT 22
13489: PUSH
13490: LD_INT 23
13492: PUSH
13493: LD_INT 26
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 101
13509: PUSH
13510: LD_INT 102
13512: PUSH
13513: LD_INT 106
13515: PUSH
13516: LD_INT 116
13518: PUSH
13519: LD_INT 117
13521: PUSH
13522: LD_INT 118
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: ST_TO_ADDR
13537: GO 16612
13539: LD_INT 2
13541: DOUBLE
13542: EQUAL
13543: IFTRUE 13547
13545: GO 13631
13547: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13548: LD_ADDR_VAR 0 2
13552: PUSH
13553: LD_INT 2
13555: PUSH
13556: LD_INT 4
13558: PUSH
13559: LD_INT 11
13561: PUSH
13562: LD_INT 12
13564: PUSH
13565: LD_INT 15
13567: PUSH
13568: LD_INT 16
13570: PUSH
13571: LD_INT 22
13573: PUSH
13574: LD_INT 23
13576: PUSH
13577: LD_INT 26
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 101
13593: PUSH
13594: LD_INT 102
13596: PUSH
13597: LD_INT 105
13599: PUSH
13600: LD_INT 106
13602: PUSH
13603: LD_INT 108
13605: PUSH
13606: LD_INT 116
13608: PUSH
13609: LD_INT 117
13611: PUSH
13612: LD_INT 118
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: ST_TO_ADDR
13629: GO 16612
13631: LD_INT 3
13633: DOUBLE
13634: EQUAL
13635: IFTRUE 13639
13637: GO 13727
13639: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13640: LD_ADDR_VAR 0 2
13644: PUSH
13645: LD_INT 2
13647: PUSH
13648: LD_INT 4
13650: PUSH
13651: LD_INT 5
13653: PUSH
13654: LD_INT 11
13656: PUSH
13657: LD_INT 12
13659: PUSH
13660: LD_INT 15
13662: PUSH
13663: LD_INT 16
13665: PUSH
13666: LD_INT 22
13668: PUSH
13669: LD_INT 26
13671: PUSH
13672: LD_INT 36
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 101
13689: PUSH
13690: LD_INT 102
13692: PUSH
13693: LD_INT 105
13695: PUSH
13696: LD_INT 106
13698: PUSH
13699: LD_INT 108
13701: PUSH
13702: LD_INT 116
13704: PUSH
13705: LD_INT 117
13707: PUSH
13708: LD_INT 118
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: ST_TO_ADDR
13725: GO 16612
13727: LD_INT 4
13729: DOUBLE
13730: EQUAL
13731: IFTRUE 13735
13733: GO 13831
13735: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13736: LD_ADDR_VAR 0 2
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: LD_INT 4
13746: PUSH
13747: LD_INT 5
13749: PUSH
13750: LD_INT 8
13752: PUSH
13753: LD_INT 11
13755: PUSH
13756: LD_INT 12
13758: PUSH
13759: LD_INT 15
13761: PUSH
13762: LD_INT 16
13764: PUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 23
13770: PUSH
13771: LD_INT 26
13773: PUSH
13774: LD_INT 36
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 101
13793: PUSH
13794: LD_INT 102
13796: PUSH
13797: LD_INT 105
13799: PUSH
13800: LD_INT 106
13802: PUSH
13803: LD_INT 108
13805: PUSH
13806: LD_INT 116
13808: PUSH
13809: LD_INT 117
13811: PUSH
13812: LD_INT 118
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: ST_TO_ADDR
13829: GO 16612
13831: LD_INT 5
13833: DOUBLE
13834: EQUAL
13835: IFTRUE 13839
13837: GO 13951
13839: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13840: LD_ADDR_VAR 0 2
13844: PUSH
13845: LD_INT 2
13847: PUSH
13848: LD_INT 4
13850: PUSH
13851: LD_INT 5
13853: PUSH
13854: LD_INT 6
13856: PUSH
13857: LD_INT 8
13859: PUSH
13860: LD_INT 11
13862: PUSH
13863: LD_INT 12
13865: PUSH
13866: LD_INT 15
13868: PUSH
13869: LD_INT 16
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_INT 23
13877: PUSH
13878: LD_INT 25
13880: PUSH
13881: LD_INT 26
13883: PUSH
13884: LD_INT 36
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 101
13905: PUSH
13906: LD_INT 102
13908: PUSH
13909: LD_INT 105
13911: PUSH
13912: LD_INT 106
13914: PUSH
13915: LD_INT 108
13917: PUSH
13918: LD_INT 109
13920: PUSH
13921: LD_INT 112
13923: PUSH
13924: LD_INT 116
13926: PUSH
13927: LD_INT 117
13929: PUSH
13930: LD_INT 118
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: ST_TO_ADDR
13949: GO 16612
13951: LD_INT 6
13953: DOUBLE
13954: EQUAL
13955: IFTRUE 13959
13957: GO 14091
13959: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13960: LD_ADDR_VAR 0 2
13964: PUSH
13965: LD_INT 2
13967: PUSH
13968: LD_INT 4
13970: PUSH
13971: LD_INT 5
13973: PUSH
13974: LD_INT 6
13976: PUSH
13977: LD_INT 8
13979: PUSH
13980: LD_INT 11
13982: PUSH
13983: LD_INT 12
13985: PUSH
13986: LD_INT 15
13988: PUSH
13989: LD_INT 16
13991: PUSH
13992: LD_INT 20
13994: PUSH
13995: LD_INT 21
13997: PUSH
13998: LD_INT 22
14000: PUSH
14001: LD_INT 23
14003: PUSH
14004: LD_INT 25
14006: PUSH
14007: LD_INT 26
14009: PUSH
14010: LD_INT 30
14012: PUSH
14013: LD_INT 31
14015: PUSH
14016: LD_INT 32
14018: PUSH
14019: LD_INT 36
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 101
14045: PUSH
14046: LD_INT 102
14048: PUSH
14049: LD_INT 105
14051: PUSH
14052: LD_INT 106
14054: PUSH
14055: LD_INT 108
14057: PUSH
14058: LD_INT 109
14060: PUSH
14061: LD_INT 112
14063: PUSH
14064: LD_INT 116
14066: PUSH
14067: LD_INT 117
14069: PUSH
14070: LD_INT 118
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: ST_TO_ADDR
14089: GO 16612
14091: LD_INT 7
14093: DOUBLE
14094: EQUAL
14095: IFTRUE 14099
14097: GO 14211
14099: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14100: LD_ADDR_VAR 0 2
14104: PUSH
14105: LD_INT 2
14107: PUSH
14108: LD_INT 4
14110: PUSH
14111: LD_INT 5
14113: PUSH
14114: LD_INT 7
14116: PUSH
14117: LD_INT 11
14119: PUSH
14120: LD_INT 12
14122: PUSH
14123: LD_INT 15
14125: PUSH
14126: LD_INT 16
14128: PUSH
14129: LD_INT 20
14131: PUSH
14132: LD_INT 21
14134: PUSH
14135: LD_INT 22
14137: PUSH
14138: LD_INT 23
14140: PUSH
14141: LD_INT 25
14143: PUSH
14144: LD_INT 26
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: PUSH
14163: LD_INT 101
14165: PUSH
14166: LD_INT 102
14168: PUSH
14169: LD_INT 103
14171: PUSH
14172: LD_INT 105
14174: PUSH
14175: LD_INT 106
14177: PUSH
14178: LD_INT 108
14180: PUSH
14181: LD_INT 112
14183: PUSH
14184: LD_INT 116
14186: PUSH
14187: LD_INT 117
14189: PUSH
14190: LD_INT 118
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: ST_TO_ADDR
14209: GO 16612
14211: LD_INT 8
14213: DOUBLE
14214: EQUAL
14215: IFTRUE 14219
14217: GO 14359
14219: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14220: LD_ADDR_VAR 0 2
14224: PUSH
14225: LD_INT 2
14227: PUSH
14228: LD_INT 4
14230: PUSH
14231: LD_INT 5
14233: PUSH
14234: LD_INT 6
14236: PUSH
14237: LD_INT 7
14239: PUSH
14240: LD_INT 8
14242: PUSH
14243: LD_INT 11
14245: PUSH
14246: LD_INT 12
14248: PUSH
14249: LD_INT 15
14251: PUSH
14252: LD_INT 16
14254: PUSH
14255: LD_INT 20
14257: PUSH
14258: LD_INT 21
14260: PUSH
14261: LD_INT 22
14263: PUSH
14264: LD_INT 23
14266: PUSH
14267: LD_INT 25
14269: PUSH
14270: LD_INT 26
14272: PUSH
14273: LD_INT 30
14275: PUSH
14276: LD_INT 31
14278: PUSH
14279: LD_INT 32
14281: PUSH
14282: LD_INT 36
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 101
14309: PUSH
14310: LD_INT 102
14312: PUSH
14313: LD_INT 103
14315: PUSH
14316: LD_INT 105
14318: PUSH
14319: LD_INT 106
14321: PUSH
14322: LD_INT 108
14324: PUSH
14325: LD_INT 109
14327: PUSH
14328: LD_INT 112
14330: PUSH
14331: LD_INT 116
14333: PUSH
14334: LD_INT 117
14336: PUSH
14337: LD_INT 118
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: ST_TO_ADDR
14357: GO 16612
14359: LD_INT 9
14361: DOUBLE
14362: EQUAL
14363: IFTRUE 14367
14365: GO 14515
14367: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14368: LD_ADDR_VAR 0 2
14372: PUSH
14373: LD_INT 2
14375: PUSH
14376: LD_INT 4
14378: PUSH
14379: LD_INT 5
14381: PUSH
14382: LD_INT 6
14384: PUSH
14385: LD_INT 7
14387: PUSH
14388: LD_INT 8
14390: PUSH
14391: LD_INT 11
14393: PUSH
14394: LD_INT 12
14396: PUSH
14397: LD_INT 15
14399: PUSH
14400: LD_INT 16
14402: PUSH
14403: LD_INT 20
14405: PUSH
14406: LD_INT 21
14408: PUSH
14409: LD_INT 22
14411: PUSH
14412: LD_INT 23
14414: PUSH
14415: LD_INT 25
14417: PUSH
14418: LD_INT 26
14420: PUSH
14421: LD_INT 28
14423: PUSH
14424: LD_INT 30
14426: PUSH
14427: LD_INT 31
14429: PUSH
14430: LD_INT 32
14432: PUSH
14433: LD_INT 36
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 101
14461: PUSH
14462: LD_INT 102
14464: PUSH
14465: LD_INT 103
14467: PUSH
14468: LD_INT 105
14470: PUSH
14471: LD_INT 106
14473: PUSH
14474: LD_INT 108
14476: PUSH
14477: LD_INT 109
14479: PUSH
14480: LD_INT 112
14482: PUSH
14483: LD_INT 114
14485: PUSH
14486: LD_INT 116
14488: PUSH
14489: LD_INT 117
14491: PUSH
14492: LD_INT 118
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: ST_TO_ADDR
14513: GO 16612
14515: LD_INT 10
14517: DOUBLE
14518: EQUAL
14519: IFTRUE 14523
14521: GO 14719
14523: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14524: LD_ADDR_VAR 0 2
14528: PUSH
14529: LD_INT 2
14531: PUSH
14532: LD_INT 4
14534: PUSH
14535: LD_INT 5
14537: PUSH
14538: LD_INT 6
14540: PUSH
14541: LD_INT 7
14543: PUSH
14544: LD_INT 8
14546: PUSH
14547: LD_INT 9
14549: PUSH
14550: LD_INT 10
14552: PUSH
14553: LD_INT 11
14555: PUSH
14556: LD_INT 12
14558: PUSH
14559: LD_INT 13
14561: PUSH
14562: LD_INT 14
14564: PUSH
14565: LD_INT 15
14567: PUSH
14568: LD_INT 16
14570: PUSH
14571: LD_INT 17
14573: PUSH
14574: LD_INT 18
14576: PUSH
14577: LD_INT 19
14579: PUSH
14580: LD_INT 20
14582: PUSH
14583: LD_INT 21
14585: PUSH
14586: LD_INT 22
14588: PUSH
14589: LD_INT 23
14591: PUSH
14592: LD_INT 24
14594: PUSH
14595: LD_INT 25
14597: PUSH
14598: LD_INT 26
14600: PUSH
14601: LD_INT 28
14603: PUSH
14604: LD_INT 30
14606: PUSH
14607: LD_INT 31
14609: PUSH
14610: LD_INT 32
14612: PUSH
14613: LD_INT 36
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 101
14649: PUSH
14650: LD_INT 102
14652: PUSH
14653: LD_INT 103
14655: PUSH
14656: LD_INT 104
14658: PUSH
14659: LD_INT 105
14661: PUSH
14662: LD_INT 106
14664: PUSH
14665: LD_INT 107
14667: PUSH
14668: LD_INT 108
14670: PUSH
14671: LD_INT 109
14673: PUSH
14674: LD_INT 110
14676: PUSH
14677: LD_INT 111
14679: PUSH
14680: LD_INT 112
14682: PUSH
14683: LD_INT 114
14685: PUSH
14686: LD_INT 116
14688: PUSH
14689: LD_INT 117
14691: PUSH
14692: LD_INT 118
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: ST_TO_ADDR
14717: GO 16612
14719: LD_INT 11
14721: DOUBLE
14722: EQUAL
14723: IFTRUE 14727
14725: GO 14931
14727: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14728: LD_ADDR_VAR 0 2
14732: PUSH
14733: LD_INT 2
14735: PUSH
14736: LD_INT 3
14738: PUSH
14739: LD_INT 4
14741: PUSH
14742: LD_INT 5
14744: PUSH
14745: LD_INT 6
14747: PUSH
14748: LD_INT 7
14750: PUSH
14751: LD_INT 8
14753: PUSH
14754: LD_INT 9
14756: PUSH
14757: LD_INT 10
14759: PUSH
14760: LD_INT 11
14762: PUSH
14763: LD_INT 12
14765: PUSH
14766: LD_INT 13
14768: PUSH
14769: LD_INT 14
14771: PUSH
14772: LD_INT 15
14774: PUSH
14775: LD_INT 16
14777: PUSH
14778: LD_INT 17
14780: PUSH
14781: LD_INT 18
14783: PUSH
14784: LD_INT 19
14786: PUSH
14787: LD_INT 20
14789: PUSH
14790: LD_INT 21
14792: PUSH
14793: LD_INT 22
14795: PUSH
14796: LD_INT 23
14798: PUSH
14799: LD_INT 24
14801: PUSH
14802: LD_INT 25
14804: PUSH
14805: LD_INT 26
14807: PUSH
14808: LD_INT 28
14810: PUSH
14811: LD_INT 30
14813: PUSH
14814: LD_INT 31
14816: PUSH
14817: LD_INT 32
14819: PUSH
14820: LD_INT 34
14822: PUSH
14823: LD_INT 36
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 101
14861: PUSH
14862: LD_INT 102
14864: PUSH
14865: LD_INT 103
14867: PUSH
14868: LD_INT 104
14870: PUSH
14871: LD_INT 105
14873: PUSH
14874: LD_INT 106
14876: PUSH
14877: LD_INT 107
14879: PUSH
14880: LD_INT 108
14882: PUSH
14883: LD_INT 109
14885: PUSH
14886: LD_INT 110
14888: PUSH
14889: LD_INT 111
14891: PUSH
14892: LD_INT 112
14894: PUSH
14895: LD_INT 114
14897: PUSH
14898: LD_INT 116
14900: PUSH
14901: LD_INT 117
14903: PUSH
14904: LD_INT 118
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: ST_TO_ADDR
14929: GO 16612
14931: LD_INT 12
14933: DOUBLE
14934: EQUAL
14935: IFTRUE 14939
14937: GO 15159
14939: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14940: LD_ADDR_VAR 0 2
14944: PUSH
14945: LD_INT 1
14947: PUSH
14948: LD_INT 2
14950: PUSH
14951: LD_INT 3
14953: PUSH
14954: LD_INT 4
14956: PUSH
14957: LD_INT 5
14959: PUSH
14960: LD_INT 6
14962: PUSH
14963: LD_INT 7
14965: PUSH
14966: LD_INT 8
14968: PUSH
14969: LD_INT 9
14971: PUSH
14972: LD_INT 10
14974: PUSH
14975: LD_INT 11
14977: PUSH
14978: LD_INT 12
14980: PUSH
14981: LD_INT 13
14983: PUSH
14984: LD_INT 14
14986: PUSH
14987: LD_INT 15
14989: PUSH
14990: LD_INT 16
14992: PUSH
14993: LD_INT 17
14995: PUSH
14996: LD_INT 18
14998: PUSH
14999: LD_INT 19
15001: PUSH
15002: LD_INT 20
15004: PUSH
15005: LD_INT 21
15007: PUSH
15008: LD_INT 22
15010: PUSH
15011: LD_INT 23
15013: PUSH
15014: LD_INT 24
15016: PUSH
15017: LD_INT 25
15019: PUSH
15020: LD_INT 26
15022: PUSH
15023: LD_INT 27
15025: PUSH
15026: LD_INT 28
15028: PUSH
15029: LD_INT 30
15031: PUSH
15032: LD_INT 31
15034: PUSH
15035: LD_INT 32
15037: PUSH
15038: LD_INT 33
15040: PUSH
15041: LD_INT 34
15043: PUSH
15044: LD_INT 36
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 101
15085: PUSH
15086: LD_INT 102
15088: PUSH
15089: LD_INT 103
15091: PUSH
15092: LD_INT 104
15094: PUSH
15095: LD_INT 105
15097: PUSH
15098: LD_INT 106
15100: PUSH
15101: LD_INT 107
15103: PUSH
15104: LD_INT 108
15106: PUSH
15107: LD_INT 109
15109: PUSH
15110: LD_INT 110
15112: PUSH
15113: LD_INT 111
15115: PUSH
15116: LD_INT 112
15118: PUSH
15119: LD_INT 113
15121: PUSH
15122: LD_INT 114
15124: PUSH
15125: LD_INT 116
15127: PUSH
15128: LD_INT 117
15130: PUSH
15131: LD_INT 118
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: ST_TO_ADDR
15157: GO 16612
15159: LD_INT 13
15161: DOUBLE
15162: EQUAL
15163: IFTRUE 15167
15165: GO 15375
15167: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15168: LD_ADDR_VAR 0 2
15172: PUSH
15173: LD_INT 1
15175: PUSH
15176: LD_INT 2
15178: PUSH
15179: LD_INT 3
15181: PUSH
15182: LD_INT 4
15184: PUSH
15185: LD_INT 5
15187: PUSH
15188: LD_INT 8
15190: PUSH
15191: LD_INT 9
15193: PUSH
15194: LD_INT 10
15196: PUSH
15197: LD_INT 11
15199: PUSH
15200: LD_INT 12
15202: PUSH
15203: LD_INT 14
15205: PUSH
15206: LD_INT 15
15208: PUSH
15209: LD_INT 16
15211: PUSH
15212: LD_INT 17
15214: PUSH
15215: LD_INT 18
15217: PUSH
15218: LD_INT 19
15220: PUSH
15221: LD_INT 20
15223: PUSH
15224: LD_INT 21
15226: PUSH
15227: LD_INT 22
15229: PUSH
15230: LD_INT 23
15232: PUSH
15233: LD_INT 24
15235: PUSH
15236: LD_INT 25
15238: PUSH
15239: LD_INT 26
15241: PUSH
15242: LD_INT 27
15244: PUSH
15245: LD_INT 28
15247: PUSH
15248: LD_INT 30
15250: PUSH
15251: LD_INT 31
15253: PUSH
15254: LD_INT 32
15256: PUSH
15257: LD_INT 33
15259: PUSH
15260: LD_INT 34
15262: PUSH
15263: LD_INT 36
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: PUSH
15299: LD_INT 101
15301: PUSH
15302: LD_INT 102
15304: PUSH
15305: LD_INT 103
15307: PUSH
15308: LD_INT 104
15310: PUSH
15311: LD_INT 105
15313: PUSH
15314: LD_INT 106
15316: PUSH
15317: LD_INT 107
15319: PUSH
15320: LD_INT 108
15322: PUSH
15323: LD_INT 109
15325: PUSH
15326: LD_INT 110
15328: PUSH
15329: LD_INT 111
15331: PUSH
15332: LD_INT 112
15334: PUSH
15335: LD_INT 113
15337: PUSH
15338: LD_INT 114
15340: PUSH
15341: LD_INT 116
15343: PUSH
15344: LD_INT 117
15346: PUSH
15347: LD_INT 118
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: ST_TO_ADDR
15373: GO 16612
15375: LD_INT 14
15377: DOUBLE
15378: EQUAL
15379: IFTRUE 15383
15381: GO 15607
15383: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15384: LD_ADDR_VAR 0 2
15388: PUSH
15389: LD_INT 1
15391: PUSH
15392: LD_INT 2
15394: PUSH
15395: LD_INT 3
15397: PUSH
15398: LD_INT 4
15400: PUSH
15401: LD_INT 5
15403: PUSH
15404: LD_INT 6
15406: PUSH
15407: LD_INT 7
15409: PUSH
15410: LD_INT 8
15412: PUSH
15413: LD_INT 9
15415: PUSH
15416: LD_INT 10
15418: PUSH
15419: LD_INT 11
15421: PUSH
15422: LD_INT 12
15424: PUSH
15425: LD_INT 13
15427: PUSH
15428: LD_INT 14
15430: PUSH
15431: LD_INT 15
15433: PUSH
15434: LD_INT 16
15436: PUSH
15437: LD_INT 17
15439: PUSH
15440: LD_INT 18
15442: PUSH
15443: LD_INT 19
15445: PUSH
15446: LD_INT 20
15448: PUSH
15449: LD_INT 21
15451: PUSH
15452: LD_INT 22
15454: PUSH
15455: LD_INT 23
15457: PUSH
15458: LD_INT 24
15460: PUSH
15461: LD_INT 25
15463: PUSH
15464: LD_INT 26
15466: PUSH
15467: LD_INT 27
15469: PUSH
15470: LD_INT 28
15472: PUSH
15473: LD_INT 29
15475: PUSH
15476: LD_INT 30
15478: PUSH
15479: LD_INT 31
15481: PUSH
15482: LD_INT 32
15484: PUSH
15485: LD_INT 33
15487: PUSH
15488: LD_INT 34
15490: PUSH
15491: LD_INT 36
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 101
15533: PUSH
15534: LD_INT 102
15536: PUSH
15537: LD_INT 103
15539: PUSH
15540: LD_INT 104
15542: PUSH
15543: LD_INT 105
15545: PUSH
15546: LD_INT 106
15548: PUSH
15549: LD_INT 107
15551: PUSH
15552: LD_INT 108
15554: PUSH
15555: LD_INT 109
15557: PUSH
15558: LD_INT 110
15560: PUSH
15561: LD_INT 111
15563: PUSH
15564: LD_INT 112
15566: PUSH
15567: LD_INT 113
15569: PUSH
15570: LD_INT 114
15572: PUSH
15573: LD_INT 116
15575: PUSH
15576: LD_INT 117
15578: PUSH
15579: LD_INT 118
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: ST_TO_ADDR
15605: GO 16612
15607: LD_INT 15
15609: DOUBLE
15610: EQUAL
15611: IFTRUE 15615
15613: GO 15839
15615: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15616: LD_ADDR_VAR 0 2
15620: PUSH
15621: LD_INT 1
15623: PUSH
15624: LD_INT 2
15626: PUSH
15627: LD_INT 3
15629: PUSH
15630: LD_INT 4
15632: PUSH
15633: LD_INT 5
15635: PUSH
15636: LD_INT 6
15638: PUSH
15639: LD_INT 7
15641: PUSH
15642: LD_INT 8
15644: PUSH
15645: LD_INT 9
15647: PUSH
15648: LD_INT 10
15650: PUSH
15651: LD_INT 11
15653: PUSH
15654: LD_INT 12
15656: PUSH
15657: LD_INT 13
15659: PUSH
15660: LD_INT 14
15662: PUSH
15663: LD_INT 15
15665: PUSH
15666: LD_INT 16
15668: PUSH
15669: LD_INT 17
15671: PUSH
15672: LD_INT 18
15674: PUSH
15675: LD_INT 19
15677: PUSH
15678: LD_INT 20
15680: PUSH
15681: LD_INT 21
15683: PUSH
15684: LD_INT 22
15686: PUSH
15687: LD_INT 23
15689: PUSH
15690: LD_INT 24
15692: PUSH
15693: LD_INT 25
15695: PUSH
15696: LD_INT 26
15698: PUSH
15699: LD_INT 27
15701: PUSH
15702: LD_INT 28
15704: PUSH
15705: LD_INT 29
15707: PUSH
15708: LD_INT 30
15710: PUSH
15711: LD_INT 31
15713: PUSH
15714: LD_INT 32
15716: PUSH
15717: LD_INT 33
15719: PUSH
15720: LD_INT 34
15722: PUSH
15723: LD_INT 36
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 101
15765: PUSH
15766: LD_INT 102
15768: PUSH
15769: LD_INT 103
15771: PUSH
15772: LD_INT 104
15774: PUSH
15775: LD_INT 105
15777: PUSH
15778: LD_INT 106
15780: PUSH
15781: LD_INT 107
15783: PUSH
15784: LD_INT 108
15786: PUSH
15787: LD_INT 109
15789: PUSH
15790: LD_INT 110
15792: PUSH
15793: LD_INT 111
15795: PUSH
15796: LD_INT 112
15798: PUSH
15799: LD_INT 113
15801: PUSH
15802: LD_INT 114
15804: PUSH
15805: LD_INT 116
15807: PUSH
15808: LD_INT 117
15810: PUSH
15811: LD_INT 118
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: ST_TO_ADDR
15837: GO 16612
15839: LD_INT 16
15841: DOUBLE
15842: EQUAL
15843: IFTRUE 15847
15845: GO 15983
15847: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15848: LD_ADDR_VAR 0 2
15852: PUSH
15853: LD_INT 2
15855: PUSH
15856: LD_INT 4
15858: PUSH
15859: LD_INT 5
15861: PUSH
15862: LD_INT 7
15864: PUSH
15865: LD_INT 11
15867: PUSH
15868: LD_INT 12
15870: PUSH
15871: LD_INT 15
15873: PUSH
15874: LD_INT 16
15876: PUSH
15877: LD_INT 20
15879: PUSH
15880: LD_INT 21
15882: PUSH
15883: LD_INT 22
15885: PUSH
15886: LD_INT 23
15888: PUSH
15889: LD_INT 25
15891: PUSH
15892: LD_INT 26
15894: PUSH
15895: LD_INT 30
15897: PUSH
15898: LD_INT 31
15900: PUSH
15901: LD_INT 32
15903: PUSH
15904: LD_INT 33
15906: PUSH
15907: LD_INT 34
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 101
15933: PUSH
15934: LD_INT 102
15936: PUSH
15937: LD_INT 103
15939: PUSH
15940: LD_INT 106
15942: PUSH
15943: LD_INT 108
15945: PUSH
15946: LD_INT 112
15948: PUSH
15949: LD_INT 113
15951: PUSH
15952: LD_INT 114
15954: PUSH
15955: LD_INT 116
15957: PUSH
15958: LD_INT 117
15960: PUSH
15961: LD_INT 118
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: ST_TO_ADDR
15981: GO 16612
15983: LD_INT 17
15985: DOUBLE
15986: EQUAL
15987: IFTRUE 15991
15989: GO 16215
15991: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15992: LD_ADDR_VAR 0 2
15996: PUSH
15997: LD_INT 1
15999: PUSH
16000: LD_INT 2
16002: PUSH
16003: LD_INT 3
16005: PUSH
16006: LD_INT 4
16008: PUSH
16009: LD_INT 5
16011: PUSH
16012: LD_INT 6
16014: PUSH
16015: LD_INT 7
16017: PUSH
16018: LD_INT 8
16020: PUSH
16021: LD_INT 9
16023: PUSH
16024: LD_INT 10
16026: PUSH
16027: LD_INT 11
16029: PUSH
16030: LD_INT 12
16032: PUSH
16033: LD_INT 13
16035: PUSH
16036: LD_INT 14
16038: PUSH
16039: LD_INT 15
16041: PUSH
16042: LD_INT 16
16044: PUSH
16045: LD_INT 17
16047: PUSH
16048: LD_INT 18
16050: PUSH
16051: LD_INT 19
16053: PUSH
16054: LD_INT 20
16056: PUSH
16057: LD_INT 21
16059: PUSH
16060: LD_INT 22
16062: PUSH
16063: LD_INT 23
16065: PUSH
16066: LD_INT 24
16068: PUSH
16069: LD_INT 25
16071: PUSH
16072: LD_INT 26
16074: PUSH
16075: LD_INT 27
16077: PUSH
16078: LD_INT 28
16080: PUSH
16081: LD_INT 29
16083: PUSH
16084: LD_INT 30
16086: PUSH
16087: LD_INT 31
16089: PUSH
16090: LD_INT 32
16092: PUSH
16093: LD_INT 33
16095: PUSH
16096: LD_INT 34
16098: PUSH
16099: LD_INT 36
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 101
16141: PUSH
16142: LD_INT 102
16144: PUSH
16145: LD_INT 103
16147: PUSH
16148: LD_INT 104
16150: PUSH
16151: LD_INT 105
16153: PUSH
16154: LD_INT 106
16156: PUSH
16157: LD_INT 107
16159: PUSH
16160: LD_INT 108
16162: PUSH
16163: LD_INT 109
16165: PUSH
16166: LD_INT 110
16168: PUSH
16169: LD_INT 111
16171: PUSH
16172: LD_INT 112
16174: PUSH
16175: LD_INT 113
16177: PUSH
16178: LD_INT 114
16180: PUSH
16181: LD_INT 116
16183: PUSH
16184: LD_INT 117
16186: PUSH
16187: LD_INT 118
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: ST_TO_ADDR
16213: GO 16612
16215: LD_INT 18
16217: DOUBLE
16218: EQUAL
16219: IFTRUE 16223
16221: GO 16371
16223: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16224: LD_ADDR_VAR 0 2
16228: PUSH
16229: LD_INT 2
16231: PUSH
16232: LD_INT 4
16234: PUSH
16235: LD_INT 5
16237: PUSH
16238: LD_INT 7
16240: PUSH
16241: LD_INT 11
16243: PUSH
16244: LD_INT 12
16246: PUSH
16247: LD_INT 15
16249: PUSH
16250: LD_INT 16
16252: PUSH
16253: LD_INT 20
16255: PUSH
16256: LD_INT 21
16258: PUSH
16259: LD_INT 22
16261: PUSH
16262: LD_INT 23
16264: PUSH
16265: LD_INT 25
16267: PUSH
16268: LD_INT 26
16270: PUSH
16271: LD_INT 30
16273: PUSH
16274: LD_INT 31
16276: PUSH
16277: LD_INT 32
16279: PUSH
16280: LD_INT 33
16282: PUSH
16283: LD_INT 34
16285: PUSH
16286: LD_INT 35
16288: PUSH
16289: LD_INT 36
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 101
16317: PUSH
16318: LD_INT 102
16320: PUSH
16321: LD_INT 103
16323: PUSH
16324: LD_INT 106
16326: PUSH
16327: LD_INT 108
16329: PUSH
16330: LD_INT 112
16332: PUSH
16333: LD_INT 113
16335: PUSH
16336: LD_INT 114
16338: PUSH
16339: LD_INT 115
16341: PUSH
16342: LD_INT 116
16344: PUSH
16345: LD_INT 117
16347: PUSH
16348: LD_INT 118
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: ST_TO_ADDR
16369: GO 16612
16371: LD_INT 19
16373: DOUBLE
16374: EQUAL
16375: IFTRUE 16379
16377: GO 16611
16379: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16380: LD_ADDR_VAR 0 2
16384: PUSH
16385: LD_INT 1
16387: PUSH
16388: LD_INT 2
16390: PUSH
16391: LD_INT 3
16393: PUSH
16394: LD_INT 4
16396: PUSH
16397: LD_INT 5
16399: PUSH
16400: LD_INT 6
16402: PUSH
16403: LD_INT 7
16405: PUSH
16406: LD_INT 8
16408: PUSH
16409: LD_INT 9
16411: PUSH
16412: LD_INT 10
16414: PUSH
16415: LD_INT 11
16417: PUSH
16418: LD_INT 12
16420: PUSH
16421: LD_INT 13
16423: PUSH
16424: LD_INT 14
16426: PUSH
16427: LD_INT 15
16429: PUSH
16430: LD_INT 16
16432: PUSH
16433: LD_INT 17
16435: PUSH
16436: LD_INT 18
16438: PUSH
16439: LD_INT 19
16441: PUSH
16442: LD_INT 20
16444: PUSH
16445: LD_INT 21
16447: PUSH
16448: LD_INT 22
16450: PUSH
16451: LD_INT 23
16453: PUSH
16454: LD_INT 24
16456: PUSH
16457: LD_INT 25
16459: PUSH
16460: LD_INT 26
16462: PUSH
16463: LD_INT 27
16465: PUSH
16466: LD_INT 28
16468: PUSH
16469: LD_INT 29
16471: PUSH
16472: LD_INT 30
16474: PUSH
16475: LD_INT 31
16477: PUSH
16478: LD_INT 32
16480: PUSH
16481: LD_INT 33
16483: PUSH
16484: LD_INT 34
16486: PUSH
16487: LD_INT 35
16489: PUSH
16490: LD_INT 36
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 101
16533: PUSH
16534: LD_INT 102
16536: PUSH
16537: LD_INT 103
16539: PUSH
16540: LD_INT 104
16542: PUSH
16543: LD_INT 105
16545: PUSH
16546: LD_INT 106
16548: PUSH
16549: LD_INT 107
16551: PUSH
16552: LD_INT 108
16554: PUSH
16555: LD_INT 109
16557: PUSH
16558: LD_INT 110
16560: PUSH
16561: LD_INT 111
16563: PUSH
16564: LD_INT 112
16566: PUSH
16567: LD_INT 113
16569: PUSH
16570: LD_INT 114
16572: PUSH
16573: LD_INT 115
16575: PUSH
16576: LD_INT 116
16578: PUSH
16579: LD_INT 117
16581: PUSH
16582: LD_INT 118
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: ST_TO_ADDR
16609: GO 16612
16611: POP
// end else
16612: GO 16843
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16614: LD_ADDR_VAR 0 2
16618: PUSH
16619: LD_INT 1
16621: PUSH
16622: LD_INT 2
16624: PUSH
16625: LD_INT 3
16627: PUSH
16628: LD_INT 4
16630: PUSH
16631: LD_INT 5
16633: PUSH
16634: LD_INT 6
16636: PUSH
16637: LD_INT 7
16639: PUSH
16640: LD_INT 8
16642: PUSH
16643: LD_INT 9
16645: PUSH
16646: LD_INT 10
16648: PUSH
16649: LD_INT 11
16651: PUSH
16652: LD_INT 12
16654: PUSH
16655: LD_INT 13
16657: PUSH
16658: LD_INT 14
16660: PUSH
16661: LD_INT 15
16663: PUSH
16664: LD_INT 16
16666: PUSH
16667: LD_INT 17
16669: PUSH
16670: LD_INT 18
16672: PUSH
16673: LD_INT 19
16675: PUSH
16676: LD_INT 20
16678: PUSH
16679: LD_INT 21
16681: PUSH
16682: LD_INT 22
16684: PUSH
16685: LD_INT 23
16687: PUSH
16688: LD_INT 24
16690: PUSH
16691: LD_INT 25
16693: PUSH
16694: LD_INT 26
16696: PUSH
16697: LD_INT 27
16699: PUSH
16700: LD_INT 28
16702: PUSH
16703: LD_INT 29
16705: PUSH
16706: LD_INT 30
16708: PUSH
16709: LD_INT 31
16711: PUSH
16712: LD_INT 32
16714: PUSH
16715: LD_INT 33
16717: PUSH
16718: LD_INT 34
16720: PUSH
16721: LD_INT 35
16723: PUSH
16724: LD_INT 36
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 101
16767: PUSH
16768: LD_INT 102
16770: PUSH
16771: LD_INT 103
16773: PUSH
16774: LD_INT 104
16776: PUSH
16777: LD_INT 105
16779: PUSH
16780: LD_INT 106
16782: PUSH
16783: LD_INT 107
16785: PUSH
16786: LD_INT 108
16788: PUSH
16789: LD_INT 109
16791: PUSH
16792: LD_INT 110
16794: PUSH
16795: LD_INT 111
16797: PUSH
16798: LD_INT 112
16800: PUSH
16801: LD_INT 113
16803: PUSH
16804: LD_INT 114
16806: PUSH
16807: LD_INT 115
16809: PUSH
16810: LD_INT 116
16812: PUSH
16813: LD_INT 117
16815: PUSH
16816: LD_INT 118
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: ST_TO_ADDR
// if result then
16843: LD_VAR 0 2
16847: IFFALSE 17633
// begin normal :=  ;
16849: LD_ADDR_VAR 0 5
16853: PUSH
16854: LD_STRING 
16856: ST_TO_ADDR
// hardcore :=  ;
16857: LD_ADDR_VAR 0 6
16861: PUSH
16862: LD_STRING 
16864: ST_TO_ADDR
// active :=  ;
16865: LD_ADDR_VAR 0 7
16869: PUSH
16870: LD_STRING 
16872: ST_TO_ADDR
// for i = 1 to normalCounter do
16873: LD_ADDR_VAR 0 8
16877: PUSH
16878: DOUBLE
16879: LD_INT 1
16881: DEC
16882: ST_TO_ADDR
16883: LD_EXP 23
16887: PUSH
16888: FOR_TO
16889: IFFALSE 16990
// begin tmp := 0 ;
16891: LD_ADDR_VAR 0 3
16895: PUSH
16896: LD_STRING 0
16898: ST_TO_ADDR
// if result [ 1 ] then
16899: LD_VAR 0 2
16903: PUSH
16904: LD_INT 1
16906: ARRAY
16907: IFFALSE 16972
// if result [ 1 ] [ 1 ] = i then
16909: LD_VAR 0 2
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PUSH
16918: LD_INT 1
16920: ARRAY
16921: PUSH
16922: LD_VAR 0 8
16926: EQUAL
16927: IFFALSE 16972
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16929: LD_ADDR_VAR 0 2
16933: PUSH
16934: LD_VAR 0 2
16938: PPUSH
16939: LD_INT 1
16941: PPUSH
16942: LD_VAR 0 2
16946: PUSH
16947: LD_INT 1
16949: ARRAY
16950: PPUSH
16951: LD_INT 1
16953: PPUSH
16954: CALL_OW 3
16958: PPUSH
16959: CALL_OW 1
16963: ST_TO_ADDR
// tmp := 1 ;
16964: LD_ADDR_VAR 0 3
16968: PUSH
16969: LD_STRING 1
16971: ST_TO_ADDR
// end ; normal := normal & tmp ;
16972: LD_ADDR_VAR 0 5
16976: PUSH
16977: LD_VAR 0 5
16981: PUSH
16982: LD_VAR 0 3
16986: STR
16987: ST_TO_ADDR
// end ;
16988: GO 16888
16990: POP
16991: POP
// for i = 1 to hardcoreCounter do
16992: LD_ADDR_VAR 0 8
16996: PUSH
16997: DOUBLE
16998: LD_INT 1
17000: DEC
17001: ST_TO_ADDR
17002: LD_EXP 24
17006: PUSH
17007: FOR_TO
17008: IFFALSE 17113
// begin tmp := 0 ;
17010: LD_ADDR_VAR 0 3
17014: PUSH
17015: LD_STRING 0
17017: ST_TO_ADDR
// if result [ 2 ] then
17018: LD_VAR 0 2
17022: PUSH
17023: LD_INT 2
17025: ARRAY
17026: IFFALSE 17095
// if result [ 2 ] [ 1 ] = 100 + i then
17028: LD_VAR 0 2
17032: PUSH
17033: LD_INT 2
17035: ARRAY
17036: PUSH
17037: LD_INT 1
17039: ARRAY
17040: PUSH
17041: LD_INT 100
17043: PUSH
17044: LD_VAR 0 8
17048: PLUS
17049: EQUAL
17050: IFFALSE 17095
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17052: LD_ADDR_VAR 0 2
17056: PUSH
17057: LD_VAR 0 2
17061: PPUSH
17062: LD_INT 2
17064: PPUSH
17065: LD_VAR 0 2
17069: PUSH
17070: LD_INT 2
17072: ARRAY
17073: PPUSH
17074: LD_INT 1
17076: PPUSH
17077: CALL_OW 3
17081: PPUSH
17082: CALL_OW 1
17086: ST_TO_ADDR
// tmp := 1 ;
17087: LD_ADDR_VAR 0 3
17091: PUSH
17092: LD_STRING 1
17094: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17095: LD_ADDR_VAR 0 6
17099: PUSH
17100: LD_VAR 0 6
17104: PUSH
17105: LD_VAR 0 3
17109: STR
17110: ST_TO_ADDR
// end ;
17111: GO 17007
17113: POP
17114: POP
// if isGameLoad then
17115: LD_VAR 0 1
17119: IFFALSE 17594
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17121: LD_ADDR_VAR 0 4
17125: PUSH
17126: LD_EXP 27
17130: PUSH
17131: LD_EXP 26
17135: PUSH
17136: LD_EXP 28
17140: PUSH
17141: LD_EXP 25
17145: PUSH
17146: LD_EXP 29
17150: PUSH
17151: LD_EXP 30
17155: PUSH
17156: LD_EXP 31
17160: PUSH
17161: LD_EXP 32
17165: PUSH
17166: LD_EXP 33
17170: PUSH
17171: LD_EXP 34
17175: PUSH
17176: LD_EXP 35
17180: PUSH
17181: LD_EXP 36
17185: PUSH
17186: LD_EXP 37
17190: PUSH
17191: LD_EXP 38
17195: PUSH
17196: LD_EXP 46
17200: PUSH
17201: LD_EXP 47
17205: PUSH
17206: LD_EXP 48
17210: PUSH
17211: LD_EXP 49
17215: PUSH
17216: LD_EXP 51
17220: PUSH
17221: LD_EXP 52
17225: PUSH
17226: LD_EXP 53
17230: PUSH
17231: LD_EXP 56
17235: PUSH
17236: LD_EXP 58
17240: PUSH
17241: LD_EXP 59
17245: PUSH
17246: LD_EXP 60
17250: PUSH
17251: LD_EXP 62
17255: PUSH
17256: LD_EXP 63
17260: PUSH
17261: LD_EXP 66
17265: PUSH
17266: LD_EXP 67
17270: PUSH
17271: LD_EXP 68
17275: PUSH
17276: LD_EXP 69
17280: PUSH
17281: LD_EXP 70
17285: PUSH
17286: LD_EXP 71
17290: PUSH
17291: LD_EXP 72
17295: PUSH
17296: LD_EXP 73
17300: PUSH
17301: LD_EXP 74
17305: PUSH
17306: LD_EXP 39
17310: PUSH
17311: LD_EXP 40
17315: PUSH
17316: LD_EXP 43
17320: PUSH
17321: LD_EXP 44
17325: PUSH
17326: LD_EXP 45
17330: PUSH
17331: LD_EXP 41
17335: PUSH
17336: LD_EXP 42
17340: PUSH
17341: LD_EXP 50
17345: PUSH
17346: LD_EXP 54
17350: PUSH
17351: LD_EXP 55
17355: PUSH
17356: LD_EXP 57
17360: PUSH
17361: LD_EXP 61
17365: PUSH
17366: LD_EXP 64
17370: PUSH
17371: LD_EXP 65
17375: PUSH
17376: LD_EXP 75
17380: PUSH
17381: LD_EXP 76
17385: PUSH
17386: LD_EXP 77
17390: PUSH
17391: LD_EXP 78
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: ST_TO_ADDR
// tmp :=  ;
17452: LD_ADDR_VAR 0 3
17456: PUSH
17457: LD_STRING 
17459: ST_TO_ADDR
// for i = 1 to normalCounter do
17460: LD_ADDR_VAR 0 8
17464: PUSH
17465: DOUBLE
17466: LD_INT 1
17468: DEC
17469: ST_TO_ADDR
17470: LD_EXP 23
17474: PUSH
17475: FOR_TO
17476: IFFALSE 17512
// begin if flags [ i ] then
17478: LD_VAR 0 4
17482: PUSH
17483: LD_VAR 0 8
17487: ARRAY
17488: IFFALSE 17510
// tmp := tmp & i & ; ;
17490: LD_ADDR_VAR 0 3
17494: PUSH
17495: LD_VAR 0 3
17499: PUSH
17500: LD_VAR 0 8
17504: STR
17505: PUSH
17506: LD_STRING ;
17508: STR
17509: ST_TO_ADDR
// end ;
17510: GO 17475
17512: POP
17513: POP
// for i = 1 to hardcoreCounter do
17514: LD_ADDR_VAR 0 8
17518: PUSH
17519: DOUBLE
17520: LD_INT 1
17522: DEC
17523: ST_TO_ADDR
17524: LD_EXP 24
17528: PUSH
17529: FOR_TO
17530: IFFALSE 17576
// begin if flags [ normalCounter + i ] then
17532: LD_VAR 0 4
17536: PUSH
17537: LD_EXP 23
17541: PUSH
17542: LD_VAR 0 8
17546: PLUS
17547: ARRAY
17548: IFFALSE 17574
// tmp := tmp & ( 100 + i ) & ; ;
17550: LD_ADDR_VAR 0 3
17554: PUSH
17555: LD_VAR 0 3
17559: PUSH
17560: LD_INT 100
17562: PUSH
17563: LD_VAR 0 8
17567: PLUS
17568: STR
17569: PUSH
17570: LD_STRING ;
17572: STR
17573: ST_TO_ADDR
// end ;
17574: GO 17529
17576: POP
17577: POP
// if tmp then
17578: LD_VAR 0 3
17582: IFFALSE 17594
// active := tmp ;
17584: LD_ADDR_VAR 0 7
17588: PUSH
17589: LD_VAR 0 3
17593: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17594: LD_STRING getStreamItemsFromMission("
17596: PUSH
17597: LD_VAR 0 5
17601: STR
17602: PUSH
17603: LD_STRING ","
17605: STR
17606: PUSH
17607: LD_VAR 0 6
17611: STR
17612: PUSH
17613: LD_STRING ","
17615: STR
17616: PUSH
17617: LD_VAR 0 7
17621: STR
17622: PUSH
17623: LD_STRING ")
17625: STR
17626: PPUSH
17627: CALL_OW 559
// end else
17631: GO 17640
// ToLua ( getStreamItemsFromMission("","","") ) ;
17633: LD_STRING getStreamItemsFromMission("","","")
17635: PPUSH
17636: CALL_OW 559
// end ;
17640: LD_VAR 0 2
17644: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17645: LD_EXP 22
17649: IFFALSE 17657
17651: PUSH
17652: LD_EXP 27
17656: AND
17657: IFFALSE 17781
17659: GO 17661
17661: DISABLE
17662: LD_INT 0
17664: PPUSH
17665: PPUSH
// begin enable ;
17666: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17667: LD_ADDR_VAR 0 2
17671: PUSH
17672: LD_INT 22
17674: PUSH
17675: LD_OWVAR 2
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 2
17686: PUSH
17687: LD_INT 34
17689: PUSH
17690: LD_INT 7
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 34
17699: PUSH
17700: LD_INT 45
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 34
17709: PUSH
17710: LD_INT 28
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 34
17719: PUSH
17720: LD_INT 47
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PPUSH
17738: CALL_OW 69
17742: ST_TO_ADDR
// if not tmp then
17743: LD_VAR 0 2
17747: NOT
17748: IFFALSE 17752
// exit ;
17750: GO 17781
// for i in tmp do
17752: LD_ADDR_VAR 0 1
17756: PUSH
17757: LD_VAR 0 2
17761: PUSH
17762: FOR_IN
17763: IFFALSE 17779
// begin SetLives ( i , 0 ) ;
17765: LD_VAR 0 1
17769: PPUSH
17770: LD_INT 0
17772: PPUSH
17773: CALL_OW 234
// end ;
17777: GO 17762
17779: POP
17780: POP
// end ;
17781: PPOPN 2
17783: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17784: LD_EXP 22
17788: IFFALSE 17796
17790: PUSH
17791: LD_EXP 28
17795: AND
17796: IFFALSE 17880
17798: GO 17800
17800: DISABLE
17801: LD_INT 0
17803: PPUSH
17804: PPUSH
// begin enable ;
17805: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17806: LD_ADDR_VAR 0 2
17810: PUSH
17811: LD_INT 22
17813: PUSH
17814: LD_OWVAR 2
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 32
17825: PUSH
17826: LD_INT 3
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PPUSH
17837: CALL_OW 69
17841: ST_TO_ADDR
// if not tmp then
17842: LD_VAR 0 2
17846: NOT
17847: IFFALSE 17851
// exit ;
17849: GO 17880
// for i in tmp do
17851: LD_ADDR_VAR 0 1
17855: PUSH
17856: LD_VAR 0 2
17860: PUSH
17861: FOR_IN
17862: IFFALSE 17878
// begin SetLives ( i , 0 ) ;
17864: LD_VAR 0 1
17868: PPUSH
17869: LD_INT 0
17871: PPUSH
17872: CALL_OW 234
// end ;
17876: GO 17861
17878: POP
17879: POP
// end ;
17880: PPOPN 2
17882: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17883: LD_EXP 22
17887: IFFALSE 17895
17889: PUSH
17890: LD_EXP 25
17894: AND
17895: IFFALSE 17988
17897: GO 17899
17899: DISABLE
17900: LD_INT 0
17902: PPUSH
// begin enable ;
17903: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17904: LD_ADDR_VAR 0 1
17908: PUSH
17909: LD_INT 22
17911: PUSH
17912: LD_OWVAR 2
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 2
17923: PUSH
17924: LD_INT 25
17926: PUSH
17927: LD_INT 5
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 25
17936: PUSH
17937: LD_INT 9
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 25
17946: PUSH
17947: LD_INT 8
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PPUSH
17964: CALL_OW 69
17968: PUSH
17969: FOR_IN
17970: IFFALSE 17986
// begin SetClass ( i , 1 ) ;
17972: LD_VAR 0 1
17976: PPUSH
17977: LD_INT 1
17979: PPUSH
17980: CALL_OW 336
// end ;
17984: GO 17969
17986: POP
17987: POP
// end ;
17988: PPOPN 1
17990: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17991: LD_EXP 22
17995: IFFALSE 18003
17997: PUSH
17998: LD_EXP 26
18002: AND
18003: IFFALSE 18015
18005: PUSH
18006: LD_OWVAR 65
18010: PUSH
18011: LD_INT 7
18013: LESS
18014: AND
18015: IFFALSE 18029
18017: GO 18019
18019: DISABLE
// begin enable ;
18020: ENABLE
// game_speed := 7 ;
18021: LD_ADDR_OWVAR 65
18025: PUSH
18026: LD_INT 7
18028: ST_TO_ADDR
// end ;
18029: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18030: LD_EXP 22
18034: IFFALSE 18042
18036: PUSH
18037: LD_EXP 29
18041: AND
18042: IFFALSE 18244
18044: GO 18046
18046: DISABLE
18047: LD_INT 0
18049: PPUSH
18050: PPUSH
18051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18052: LD_ADDR_VAR 0 3
18056: PUSH
18057: LD_INT 81
18059: PUSH
18060: LD_OWVAR 2
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 21
18071: PUSH
18072: LD_INT 1
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PPUSH
18083: CALL_OW 69
18087: ST_TO_ADDR
// if not tmp then
18088: LD_VAR 0 3
18092: NOT
18093: IFFALSE 18097
// exit ;
18095: GO 18244
// if tmp > 5 then
18097: LD_VAR 0 3
18101: PUSH
18102: LD_INT 5
18104: GREATER
18105: IFFALSE 18117
// k := 5 else
18107: LD_ADDR_VAR 0 2
18111: PUSH
18112: LD_INT 5
18114: ST_TO_ADDR
18115: GO 18127
// k := tmp ;
18117: LD_ADDR_VAR 0 2
18121: PUSH
18122: LD_VAR 0 3
18126: ST_TO_ADDR
// for i := 1 to k do
18127: LD_ADDR_VAR 0 1
18131: PUSH
18132: DOUBLE
18133: LD_INT 1
18135: DEC
18136: ST_TO_ADDR
18137: LD_VAR 0 2
18141: PUSH
18142: FOR_TO
18143: IFFALSE 18242
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18145: LD_VAR 0 3
18149: PUSH
18150: LD_VAR 0 1
18154: ARRAY
18155: PPUSH
18156: LD_VAR 0 1
18160: PUSH
18161: LD_INT 4
18163: MOD
18164: PUSH
18165: LD_INT 1
18167: PLUS
18168: PPUSH
18169: CALL_OW 259
18173: PUSH
18174: LD_INT 10
18176: LESS
18177: IFFALSE 18240
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18179: LD_VAR 0 3
18183: PUSH
18184: LD_VAR 0 1
18188: ARRAY
18189: PPUSH
18190: LD_VAR 0 1
18194: PUSH
18195: LD_INT 4
18197: MOD
18198: PUSH
18199: LD_INT 1
18201: PLUS
18202: PPUSH
18203: LD_VAR 0 3
18207: PUSH
18208: LD_VAR 0 1
18212: ARRAY
18213: PPUSH
18214: LD_VAR 0 1
18218: PUSH
18219: LD_INT 4
18221: MOD
18222: PUSH
18223: LD_INT 1
18225: PLUS
18226: PPUSH
18227: CALL_OW 259
18231: PUSH
18232: LD_INT 1
18234: PLUS
18235: PPUSH
18236: CALL_OW 237
18240: GO 18142
18242: POP
18243: POP
// end ;
18244: PPOPN 3
18246: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18247: LD_EXP 22
18251: IFFALSE 18259
18253: PUSH
18254: LD_EXP 30
18258: AND
18259: IFFALSE 18279
18261: GO 18263
18263: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18264: LD_INT 4
18266: PPUSH
18267: LD_OWVAR 2
18271: PPUSH
18272: LD_INT 0
18274: PPUSH
18275: CALL_OW 324
18279: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18280: LD_EXP 22
18284: IFFALSE 18292
18286: PUSH
18287: LD_EXP 59
18291: AND
18292: IFFALSE 18312
18294: GO 18296
18296: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18297: LD_INT 19
18299: PPUSH
18300: LD_OWVAR 2
18304: PPUSH
18305: LD_INT 0
18307: PPUSH
18308: CALL_OW 324
18312: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18313: LD_EXP 22
18317: IFFALSE 18325
18319: PUSH
18320: LD_EXP 31
18324: AND
18325: IFFALSE 18427
18327: GO 18329
18329: DISABLE
18330: LD_INT 0
18332: PPUSH
18333: PPUSH
// begin enable ;
18334: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18335: LD_ADDR_VAR 0 2
18339: PUSH
18340: LD_INT 22
18342: PUSH
18343: LD_OWVAR 2
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 2
18354: PUSH
18355: LD_INT 34
18357: PUSH
18358: LD_INT 11
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 34
18367: PUSH
18368: LD_INT 30
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: LIST
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PPUSH
18384: CALL_OW 69
18388: ST_TO_ADDR
// if not tmp then
18389: LD_VAR 0 2
18393: NOT
18394: IFFALSE 18398
// exit ;
18396: GO 18427
// for i in tmp do
18398: LD_ADDR_VAR 0 1
18402: PUSH
18403: LD_VAR 0 2
18407: PUSH
18408: FOR_IN
18409: IFFALSE 18425
// begin SetLives ( i , 0 ) ;
18411: LD_VAR 0 1
18415: PPUSH
18416: LD_INT 0
18418: PPUSH
18419: CALL_OW 234
// end ;
18423: GO 18408
18425: POP
18426: POP
// end ;
18427: PPOPN 2
18429: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18430: LD_EXP 22
18434: IFFALSE 18442
18436: PUSH
18437: LD_EXP 32
18441: AND
18442: IFFALSE 18462
18444: GO 18446
18446: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18447: LD_INT 32
18449: PPUSH
18450: LD_OWVAR 2
18454: PPUSH
18455: LD_INT 0
18457: PPUSH
18458: CALL_OW 324
18462: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18463: LD_EXP 22
18467: IFFALSE 18475
18469: PUSH
18470: LD_EXP 33
18474: AND
18475: IFFALSE 18658
18477: GO 18479
18479: DISABLE
18480: LD_INT 0
18482: PPUSH
18483: PPUSH
18484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18485: LD_ADDR_VAR 0 2
18489: PUSH
18490: LD_INT 22
18492: PUSH
18493: LD_OWVAR 2
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 33
18504: PUSH
18505: LD_INT 3
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PPUSH
18516: CALL_OW 69
18520: ST_TO_ADDR
// if not tmp then
18521: LD_VAR 0 2
18525: NOT
18526: IFFALSE 18530
// exit ;
18528: GO 18658
// side := 0 ;
18530: LD_ADDR_VAR 0 3
18534: PUSH
18535: LD_INT 0
18537: ST_TO_ADDR
// for i := 1 to 8 do
18538: LD_ADDR_VAR 0 1
18542: PUSH
18543: DOUBLE
18544: LD_INT 1
18546: DEC
18547: ST_TO_ADDR
18548: LD_INT 8
18550: PUSH
18551: FOR_TO
18552: IFFALSE 18602
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18554: LD_OWVAR 2
18558: PUSH
18559: LD_VAR 0 1
18563: NONEQUAL
18564: IFFALSE 18586
18566: PUSH
18567: LD_OWVAR 2
18571: PPUSH
18572: LD_VAR 0 1
18576: PPUSH
18577: CALL_OW 81
18581: PUSH
18582: LD_INT 2
18584: EQUAL
18585: AND
18586: IFFALSE 18600
// begin side := i ;
18588: LD_ADDR_VAR 0 3
18592: PUSH
18593: LD_VAR 0 1
18597: ST_TO_ADDR
// break ;
18598: GO 18602
// end ;
18600: GO 18551
18602: POP
18603: POP
// if not side then
18604: LD_VAR 0 3
18608: NOT
18609: IFFALSE 18613
// exit ;
18611: GO 18658
// for i := 1 to tmp do
18613: LD_ADDR_VAR 0 1
18617: PUSH
18618: DOUBLE
18619: LD_INT 1
18621: DEC
18622: ST_TO_ADDR
18623: LD_VAR 0 2
18627: PUSH
18628: FOR_TO
18629: IFFALSE 18656
// if Prob ( 60 ) then
18631: LD_INT 60
18633: PPUSH
18634: CALL_OW 13
18638: IFFALSE 18654
// SetSide ( i , side ) ;
18640: LD_VAR 0 1
18644: PPUSH
18645: LD_VAR 0 3
18649: PPUSH
18650: CALL_OW 235
18654: GO 18628
18656: POP
18657: POP
// end ;
18658: PPOPN 3
18660: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18661: LD_EXP 22
18665: IFFALSE 18673
18667: PUSH
18668: LD_EXP 35
18672: AND
18673: IFFALSE 18792
18675: GO 18677
18677: DISABLE
18678: LD_INT 0
18680: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18681: LD_ADDR_VAR 0 1
18685: PUSH
18686: LD_INT 22
18688: PUSH
18689: LD_OWVAR 2
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 21
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 3
18710: PUSH
18711: LD_INT 23
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: LIST
18729: PPUSH
18730: CALL_OW 69
18734: PUSH
18735: FOR_IN
18736: IFFALSE 18790
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18738: LD_VAR 0 1
18742: PPUSH
18743: CALL_OW 257
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: LD_INT 3
18756: PUSH
18757: LD_INT 4
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: IN
18766: IFFALSE 18788
// SetClass ( un , rand ( 1 , 4 ) ) ;
18768: LD_VAR 0 1
18772: PPUSH
18773: LD_INT 1
18775: PPUSH
18776: LD_INT 4
18778: PPUSH
18779: CALL_OW 12
18783: PPUSH
18784: CALL_OW 336
18788: GO 18735
18790: POP
18791: POP
// end ;
18792: PPOPN 1
18794: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18795: LD_EXP 22
18799: IFFALSE 18807
18801: PUSH
18802: LD_EXP 34
18806: AND
18807: IFFALSE 18886
18809: GO 18811
18811: DISABLE
18812: LD_INT 0
18814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18815: LD_ADDR_VAR 0 1
18819: PUSH
18820: LD_INT 22
18822: PUSH
18823: LD_OWVAR 2
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 21
18834: PUSH
18835: LD_INT 3
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PPUSH
18846: CALL_OW 69
18850: ST_TO_ADDR
// if not tmp then
18851: LD_VAR 0 1
18855: NOT
18856: IFFALSE 18860
// exit ;
18858: GO 18886
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18860: LD_VAR 0 1
18864: PUSH
18865: LD_INT 1
18867: PPUSH
18868: LD_VAR 0 1
18872: PPUSH
18873: CALL_OW 12
18877: ARRAY
18878: PPUSH
18879: LD_INT 100
18881: PPUSH
18882: CALL_OW 234
// end ;
18886: PPOPN 1
18888: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18889: LD_EXP 22
18893: IFFALSE 18901
18895: PUSH
18896: LD_EXP 36
18900: AND
18901: IFFALSE 18999
18903: GO 18905
18905: DISABLE
18906: LD_INT 0
18908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18909: LD_ADDR_VAR 0 1
18913: PUSH
18914: LD_INT 22
18916: PUSH
18917: LD_OWVAR 2
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 21
18928: PUSH
18929: LD_INT 1
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PPUSH
18940: CALL_OW 69
18944: ST_TO_ADDR
// if not tmp then
18945: LD_VAR 0 1
18949: NOT
18950: IFFALSE 18954
// exit ;
18952: GO 18999
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18954: LD_VAR 0 1
18958: PUSH
18959: LD_INT 1
18961: PPUSH
18962: LD_VAR 0 1
18966: PPUSH
18967: CALL_OW 12
18971: ARRAY
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: LD_INT 4
18978: PPUSH
18979: CALL_OW 12
18983: PPUSH
18984: LD_INT 3000
18986: PPUSH
18987: LD_INT 9000
18989: PPUSH
18990: CALL_OW 12
18994: PPUSH
18995: CALL_OW 492
// end ;
18999: PPOPN 1
19001: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19002: LD_EXP 22
19006: IFFALSE 19014
19008: PUSH
19009: LD_EXP 37
19013: AND
19014: IFFALSE 19034
19016: GO 19018
19018: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19019: LD_INT 1
19021: PPUSH
19022: LD_OWVAR 2
19026: PPUSH
19027: LD_INT 0
19029: PPUSH
19030: CALL_OW 324
19034: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19035: LD_EXP 22
19039: IFFALSE 19047
19041: PUSH
19042: LD_EXP 38
19046: AND
19047: IFFALSE 19130
19049: GO 19051
19051: DISABLE
19052: LD_INT 0
19054: PPUSH
19055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19056: LD_ADDR_VAR 0 2
19060: PUSH
19061: LD_INT 22
19063: PUSH
19064: LD_OWVAR 2
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 21
19075: PUSH
19076: LD_INT 3
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PPUSH
19087: CALL_OW 69
19091: ST_TO_ADDR
// if not tmp then
19092: LD_VAR 0 2
19096: NOT
19097: IFFALSE 19101
// exit ;
19099: GO 19130
// for i in tmp do
19101: LD_ADDR_VAR 0 1
19105: PUSH
19106: LD_VAR 0 2
19110: PUSH
19111: FOR_IN
19112: IFFALSE 19128
// SetBLevel ( i , 10 ) ;
19114: LD_VAR 0 1
19118: PPUSH
19119: LD_INT 10
19121: PPUSH
19122: CALL_OW 241
19126: GO 19111
19128: POP
19129: POP
// end ;
19130: PPOPN 2
19132: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19133: LD_EXP 22
19137: IFFALSE 19145
19139: PUSH
19140: LD_EXP 39
19144: AND
19145: IFFALSE 19256
19147: GO 19149
19149: DISABLE
19150: LD_INT 0
19152: PPUSH
19153: PPUSH
19154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19155: LD_ADDR_VAR 0 3
19159: PUSH
19160: LD_INT 22
19162: PUSH
19163: LD_OWVAR 2
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 25
19174: PUSH
19175: LD_INT 1
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PPUSH
19186: CALL_OW 69
19190: ST_TO_ADDR
// if not tmp then
19191: LD_VAR 0 3
19195: NOT
19196: IFFALSE 19200
// exit ;
19198: GO 19256
// un := tmp [ rand ( 1 , tmp ) ] ;
19200: LD_ADDR_VAR 0 2
19204: PUSH
19205: LD_VAR 0 3
19209: PUSH
19210: LD_INT 1
19212: PPUSH
19213: LD_VAR 0 3
19217: PPUSH
19218: CALL_OW 12
19222: ARRAY
19223: ST_TO_ADDR
// if Crawls ( un ) then
19224: LD_VAR 0 2
19228: PPUSH
19229: CALL_OW 318
19233: IFFALSE 19244
// ComWalk ( un ) ;
19235: LD_VAR 0 2
19239: PPUSH
19240: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19244: LD_VAR 0 2
19248: PPUSH
19249: LD_INT 5
19251: PPUSH
19252: CALL_OW 336
// end ;
19256: PPOPN 3
19258: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19259: LD_EXP 22
19263: IFFALSE 19271
19265: PUSH
19266: LD_EXP 40
19270: AND
19271: IFFALSE 19283
19273: PUSH
19274: LD_OWVAR 67
19278: PUSH
19279: LD_INT 4
19281: LESS
19282: AND
19283: IFFALSE 19302
19285: GO 19287
19287: DISABLE
// begin Difficulty := Difficulty + 1 ;
19288: LD_ADDR_OWVAR 67
19292: PUSH
19293: LD_OWVAR 67
19297: PUSH
19298: LD_INT 1
19300: PLUS
19301: ST_TO_ADDR
// end ;
19302: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19303: LD_EXP 22
19307: IFFALSE 19315
19309: PUSH
19310: LD_EXP 41
19314: AND
19315: IFFALSE 19418
19317: GO 19319
19319: DISABLE
19320: LD_INT 0
19322: PPUSH
// begin for i := 1 to 5 do
19323: LD_ADDR_VAR 0 1
19327: PUSH
19328: DOUBLE
19329: LD_INT 1
19331: DEC
19332: ST_TO_ADDR
19333: LD_INT 5
19335: PUSH
19336: FOR_TO
19337: IFFALSE 19416
// begin uc_nation := nation_nature ;
19339: LD_ADDR_OWVAR 21
19343: PUSH
19344: LD_INT 0
19346: ST_TO_ADDR
// uc_side := 0 ;
19347: LD_ADDR_OWVAR 20
19351: PUSH
19352: LD_INT 0
19354: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19355: LD_ADDR_OWVAR 29
19359: PUSH
19360: LD_INT 12
19362: PUSH
19363: LD_INT 12
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: ST_TO_ADDR
// hc_agressivity := 20 ;
19370: LD_ADDR_OWVAR 35
19374: PUSH
19375: LD_INT 20
19377: ST_TO_ADDR
// hc_class := class_tiger ;
19378: LD_ADDR_OWVAR 28
19382: PUSH
19383: LD_INT 14
19385: ST_TO_ADDR
// hc_gallery :=  ;
19386: LD_ADDR_OWVAR 33
19390: PUSH
19391: LD_STRING 
19393: ST_TO_ADDR
// hc_name :=  ;
19394: LD_ADDR_OWVAR 26
19398: PUSH
19399: LD_STRING 
19401: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19402: CALL_OW 44
19406: PPUSH
19407: LD_INT 0
19409: PPUSH
19410: CALL_OW 51
// end ;
19414: GO 19336
19416: POP
19417: POP
// end ;
19418: PPOPN 1
19420: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19421: LD_EXP 22
19425: IFFALSE 19433
19427: PUSH
19428: LD_EXP 42
19432: AND
19433: IFFALSE 19442
19435: GO 19437
19437: DISABLE
// StreamSibBomb ;
19438: CALL 19443 0 0
19442: END
// export function StreamSibBomb ; var i , x , y ; begin
19443: LD_INT 0
19445: PPUSH
19446: PPUSH
19447: PPUSH
19448: PPUSH
// result := false ;
19449: LD_ADDR_VAR 0 1
19453: PUSH
19454: LD_INT 0
19456: ST_TO_ADDR
// for i := 1 to 16 do
19457: LD_ADDR_VAR 0 2
19461: PUSH
19462: DOUBLE
19463: LD_INT 1
19465: DEC
19466: ST_TO_ADDR
19467: LD_INT 16
19469: PUSH
19470: FOR_TO
19471: IFFALSE 19670
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19473: LD_ADDR_VAR 0 3
19477: PUSH
19478: LD_INT 10
19480: PUSH
19481: LD_INT 20
19483: PUSH
19484: LD_INT 30
19486: PUSH
19487: LD_INT 40
19489: PUSH
19490: LD_INT 50
19492: PUSH
19493: LD_INT 60
19495: PUSH
19496: LD_INT 70
19498: PUSH
19499: LD_INT 80
19501: PUSH
19502: LD_INT 90
19504: PUSH
19505: LD_INT 100
19507: PUSH
19508: LD_INT 110
19510: PUSH
19511: LD_INT 120
19513: PUSH
19514: LD_INT 130
19516: PUSH
19517: LD_INT 140
19519: PUSH
19520: LD_INT 150
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 1
19542: PPUSH
19543: LD_INT 15
19545: PPUSH
19546: CALL_OW 12
19550: ARRAY
19551: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19552: LD_ADDR_VAR 0 4
19556: PUSH
19557: LD_INT 10
19559: PUSH
19560: LD_INT 20
19562: PUSH
19563: LD_INT 30
19565: PUSH
19566: LD_INT 40
19568: PUSH
19569: LD_INT 50
19571: PUSH
19572: LD_INT 60
19574: PUSH
19575: LD_INT 70
19577: PUSH
19578: LD_INT 80
19580: PUSH
19581: LD_INT 90
19583: PUSH
19584: LD_INT 100
19586: PUSH
19587: LD_INT 110
19589: PUSH
19590: LD_INT 120
19592: PUSH
19593: LD_INT 130
19595: PUSH
19596: LD_INT 140
19598: PUSH
19599: LD_INT 150
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 1
19621: PPUSH
19622: LD_INT 15
19624: PPUSH
19625: CALL_OW 12
19629: ARRAY
19630: ST_TO_ADDR
// if ValidHex ( x , y ) then
19631: LD_VAR 0 3
19635: PPUSH
19636: LD_VAR 0 4
19640: PPUSH
19641: CALL_OW 488
19645: IFFALSE 19668
// begin result := [ x , y ] ;
19647: LD_ADDR_VAR 0 1
19651: PUSH
19652: LD_VAR 0 3
19656: PUSH
19657: LD_VAR 0 4
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: ST_TO_ADDR
// break ;
19666: GO 19670
// end ; end ;
19668: GO 19470
19670: POP
19671: POP
// if result then
19672: LD_VAR 0 1
19676: IFFALSE 19736
// begin ToLua ( playSibBomb() ) ;
19678: LD_STRING playSibBomb()
19680: PPUSH
19681: CALL_OW 559
// wait ( 0 0$14 ) ;
19685: LD_INT 490
19687: PPUSH
19688: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19692: LD_VAR 0 1
19696: PUSH
19697: LD_INT 1
19699: ARRAY
19700: PPUSH
19701: LD_VAR 0 1
19705: PUSH
19706: LD_INT 2
19708: ARRAY
19709: PPUSH
19710: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19714: LD_VAR 0 1
19718: PUSH
19719: LD_INT 1
19721: ARRAY
19722: PPUSH
19723: LD_VAR 0 1
19727: PUSH
19728: LD_INT 2
19730: ARRAY
19731: PPUSH
19732: CALL_OW 429
// end ; end ;
19736: LD_VAR 0 1
19740: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19741: LD_EXP 22
19745: IFFALSE 19753
19747: PUSH
19748: LD_EXP 44
19752: AND
19753: IFFALSE 19765
19755: GO 19757
19757: DISABLE
// YouLost (  ) ;
19758: LD_STRING 
19760: PPUSH
19761: CALL_OW 104
19765: END
// every 0 0$1 trigger StreamModeActive and sFog do
19766: LD_EXP 22
19770: IFFALSE 19778
19772: PUSH
19773: LD_EXP 43
19777: AND
19778: IFFALSE 19792
19780: GO 19782
19782: DISABLE
// FogOff ( your_side ) ;
19783: LD_OWVAR 2
19787: PPUSH
19788: CALL_OW 344
19792: END
// every 0 0$1 trigger StreamModeActive and sSun do
19793: LD_EXP 22
19797: IFFALSE 19805
19799: PUSH
19800: LD_EXP 45
19804: AND
19805: IFFALSE 19833
19807: GO 19809
19809: DISABLE
// begin solar_recharge_percent := 0 ;
19810: LD_ADDR_OWVAR 79
19814: PUSH
19815: LD_INT 0
19817: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19818: LD_INT 10500
19820: PPUSH
19821: CALL_OW 67
// solar_recharge_percent := 100 ;
19825: LD_ADDR_OWVAR 79
19829: PUSH
19830: LD_INT 100
19832: ST_TO_ADDR
// end ;
19833: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19834: LD_EXP 22
19838: IFFALSE 19846
19840: PUSH
19841: LD_EXP 46
19845: AND
19846: IFFALSE 20085
19848: GO 19850
19850: DISABLE
19851: LD_INT 0
19853: PPUSH
19854: PPUSH
19855: PPUSH
// begin tmp := [ ] ;
19856: LD_ADDR_VAR 0 3
19860: PUSH
19861: EMPTY
19862: ST_TO_ADDR
// for i := 1 to 6 do
19863: LD_ADDR_VAR 0 1
19867: PUSH
19868: DOUBLE
19869: LD_INT 1
19871: DEC
19872: ST_TO_ADDR
19873: LD_INT 6
19875: PUSH
19876: FOR_TO
19877: IFFALSE 19982
// begin uc_nation := nation_nature ;
19879: LD_ADDR_OWVAR 21
19883: PUSH
19884: LD_INT 0
19886: ST_TO_ADDR
// uc_side := 0 ;
19887: LD_ADDR_OWVAR 20
19891: PUSH
19892: LD_INT 0
19894: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19895: LD_ADDR_OWVAR 29
19899: PUSH
19900: LD_INT 12
19902: PUSH
19903: LD_INT 12
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: ST_TO_ADDR
// hc_agressivity := 20 ;
19910: LD_ADDR_OWVAR 35
19914: PUSH
19915: LD_INT 20
19917: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19918: LD_ADDR_OWVAR 28
19922: PUSH
19923: LD_INT 17
19925: ST_TO_ADDR
// hc_gallery :=  ;
19926: LD_ADDR_OWVAR 33
19930: PUSH
19931: LD_STRING 
19933: ST_TO_ADDR
// hc_name :=  ;
19934: LD_ADDR_OWVAR 26
19938: PUSH
19939: LD_STRING 
19941: ST_TO_ADDR
// un := CreateHuman ;
19942: LD_ADDR_VAR 0 2
19946: PUSH
19947: CALL_OW 44
19951: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19952: LD_VAR 0 2
19956: PPUSH
19957: LD_INT 1
19959: PPUSH
19960: CALL_OW 51
// tmp := tmp ^ un ;
19964: LD_ADDR_VAR 0 3
19968: PUSH
19969: LD_VAR 0 3
19973: PUSH
19974: LD_VAR 0 2
19978: ADD
19979: ST_TO_ADDR
// end ;
19980: GO 19876
19982: POP
19983: POP
// repeat wait ( 0 0$1 ) ;
19984: LD_INT 35
19986: PPUSH
19987: CALL_OW 67
// for un in tmp do
19991: LD_ADDR_VAR 0 2
19995: PUSH
19996: LD_VAR 0 3
20000: PUSH
20001: FOR_IN
20002: IFFALSE 20076
// begin if IsDead ( un ) then
20004: LD_VAR 0 2
20008: PPUSH
20009: CALL_OW 301
20013: IFFALSE 20033
// begin tmp := tmp diff un ;
20015: LD_ADDR_VAR 0 3
20019: PUSH
20020: LD_VAR 0 3
20024: PUSH
20025: LD_VAR 0 2
20029: DIFF
20030: ST_TO_ADDR
// continue ;
20031: GO 20001
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20033: LD_VAR 0 2
20037: PPUSH
20038: LD_INT 3
20040: PUSH
20041: LD_INT 22
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PPUSH
20055: CALL_OW 69
20059: PPUSH
20060: LD_VAR 0 2
20064: PPUSH
20065: CALL_OW 74
20069: PPUSH
20070: CALL_OW 115
// end ;
20074: GO 20001
20076: POP
20077: POP
// until not tmp ;
20078: LD_VAR 0 3
20082: NOT
20083: IFFALSE 19984
// end ;
20085: PPOPN 3
20087: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20088: LD_EXP 22
20092: IFFALSE 20100
20094: PUSH
20095: LD_EXP 47
20099: AND
20100: IFFALSE 20154
20102: GO 20104
20104: DISABLE
// begin ToLua ( displayTroll(); ) ;
20105: LD_STRING displayTroll();
20107: PPUSH
20108: CALL_OW 559
// wait ( 3 3$00 ) ;
20112: LD_INT 6300
20114: PPUSH
20115: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20119: LD_STRING hideTroll();
20121: PPUSH
20122: CALL_OW 559
// wait ( 1 1$00 ) ;
20126: LD_INT 2100
20128: PPUSH
20129: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20133: LD_STRING displayTroll();
20135: PPUSH
20136: CALL_OW 559
// wait ( 1 1$00 ) ;
20140: LD_INT 2100
20142: PPUSH
20143: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20147: LD_STRING hideTroll();
20149: PPUSH
20150: CALL_OW 559
// end ;
20154: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20155: LD_EXP 22
20159: IFFALSE 20167
20161: PUSH
20162: LD_EXP 48
20166: AND
20167: IFFALSE 20230
20169: GO 20171
20171: DISABLE
20172: LD_INT 0
20174: PPUSH
// begin p := 0 ;
20175: LD_ADDR_VAR 0 1
20179: PUSH
20180: LD_INT 0
20182: ST_TO_ADDR
// repeat game_speed := 1 ;
20183: LD_ADDR_OWVAR 65
20187: PUSH
20188: LD_INT 1
20190: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20191: LD_INT 35
20193: PPUSH
20194: CALL_OW 67
// p := p + 1 ;
20198: LD_ADDR_VAR 0 1
20202: PUSH
20203: LD_VAR 0 1
20207: PUSH
20208: LD_INT 1
20210: PLUS
20211: ST_TO_ADDR
// until p >= 60 ;
20212: LD_VAR 0 1
20216: PUSH
20217: LD_INT 60
20219: GREATEREQUAL
20220: IFFALSE 20183
// game_speed := 4 ;
20222: LD_ADDR_OWVAR 65
20226: PUSH
20227: LD_INT 4
20229: ST_TO_ADDR
// end ;
20230: PPOPN 1
20232: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20233: LD_EXP 22
20237: IFFALSE 20245
20239: PUSH
20240: LD_EXP 49
20244: AND
20245: IFFALSE 20391
20247: GO 20249
20249: DISABLE
20250: LD_INT 0
20252: PPUSH
20253: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20254: LD_ADDR_VAR 0 1
20258: PUSH
20259: LD_INT 22
20261: PUSH
20262: LD_OWVAR 2
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: LD_INT 30
20276: PUSH
20277: LD_INT 0
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 30
20286: PUSH
20287: LD_INT 1
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: LIST
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PPUSH
20303: CALL_OW 69
20307: ST_TO_ADDR
// if not depot then
20308: LD_VAR 0 1
20312: NOT
20313: IFFALSE 20317
// exit ;
20315: GO 20391
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20317: LD_ADDR_VAR 0 2
20321: PUSH
20322: LD_VAR 0 1
20326: PUSH
20327: LD_INT 1
20329: PPUSH
20330: LD_VAR 0 1
20334: PPUSH
20335: CALL_OW 12
20339: ARRAY
20340: PPUSH
20341: CALL_OW 274
20345: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20346: LD_VAR 0 2
20350: PPUSH
20351: LD_INT 1
20353: PPUSH
20354: LD_INT 0
20356: PPUSH
20357: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20361: LD_VAR 0 2
20365: PPUSH
20366: LD_INT 2
20368: PPUSH
20369: LD_INT 0
20371: PPUSH
20372: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20376: LD_VAR 0 2
20380: PPUSH
20381: LD_INT 3
20383: PPUSH
20384: LD_INT 0
20386: PPUSH
20387: CALL_OW 277
// end ;
20391: PPOPN 2
20393: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20394: LD_EXP 22
20398: IFFALSE 20406
20400: PUSH
20401: LD_EXP 50
20405: AND
20406: IFFALSE 20503
20408: GO 20410
20410: DISABLE
20411: LD_INT 0
20413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20414: LD_ADDR_VAR 0 1
20418: PUSH
20419: LD_INT 22
20421: PUSH
20422: LD_OWVAR 2
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 21
20433: PUSH
20434: LD_INT 1
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 3
20443: PUSH
20444: LD_INT 23
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: LIST
20462: PPUSH
20463: CALL_OW 69
20467: ST_TO_ADDR
// if not tmp then
20468: LD_VAR 0 1
20472: NOT
20473: IFFALSE 20477
// exit ;
20475: GO 20503
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20477: LD_VAR 0 1
20481: PUSH
20482: LD_INT 1
20484: PPUSH
20485: LD_VAR 0 1
20489: PPUSH
20490: CALL_OW 12
20494: ARRAY
20495: PPUSH
20496: LD_INT 200
20498: PPUSH
20499: CALL_OW 234
// end ;
20503: PPOPN 1
20505: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20506: LD_EXP 22
20510: IFFALSE 20518
20512: PUSH
20513: LD_EXP 51
20517: AND
20518: IFFALSE 20597
20520: GO 20522
20522: DISABLE
20523: LD_INT 0
20525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20526: LD_ADDR_VAR 0 1
20530: PUSH
20531: LD_INT 22
20533: PUSH
20534: LD_OWVAR 2
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 21
20545: PUSH
20546: LD_INT 2
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PPUSH
20557: CALL_OW 69
20561: ST_TO_ADDR
// if not tmp then
20562: LD_VAR 0 1
20566: NOT
20567: IFFALSE 20571
// exit ;
20569: GO 20597
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20571: LD_VAR 0 1
20575: PUSH
20576: LD_INT 1
20578: PPUSH
20579: LD_VAR 0 1
20583: PPUSH
20584: CALL_OW 12
20588: ARRAY
20589: PPUSH
20590: LD_INT 60
20592: PPUSH
20593: CALL_OW 234
// end ;
20597: PPOPN 1
20599: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20600: LD_EXP 22
20604: IFFALSE 20612
20606: PUSH
20607: LD_EXP 52
20611: AND
20612: IFFALSE 20711
20614: GO 20616
20616: DISABLE
20617: LD_INT 0
20619: PPUSH
20620: PPUSH
// begin enable ;
20621: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20622: LD_ADDR_VAR 0 1
20626: PUSH
20627: LD_INT 22
20629: PUSH
20630: LD_OWVAR 2
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 61
20641: PUSH
20642: EMPTY
20643: LIST
20644: PUSH
20645: LD_INT 33
20647: PUSH
20648: LD_INT 2
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: PPUSH
20660: CALL_OW 69
20664: ST_TO_ADDR
// if not tmp then
20665: LD_VAR 0 1
20669: NOT
20670: IFFALSE 20674
// exit ;
20672: GO 20711
// for i in tmp do
20674: LD_ADDR_VAR 0 2
20678: PUSH
20679: LD_VAR 0 1
20683: PUSH
20684: FOR_IN
20685: IFFALSE 20709
// if IsControledBy ( i ) then
20687: LD_VAR 0 2
20691: PPUSH
20692: CALL_OW 312
20696: IFFALSE 20707
// ComUnlink ( i ) ;
20698: LD_VAR 0 2
20702: PPUSH
20703: CALL_OW 136
20707: GO 20684
20709: POP
20710: POP
// end ;
20711: PPOPN 2
20713: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20714: LD_EXP 22
20718: IFFALSE 20726
20720: PUSH
20721: LD_EXP 53
20725: AND
20726: IFFALSE 20866
20728: GO 20730
20730: DISABLE
20731: LD_INT 0
20733: PPUSH
20734: PPUSH
// begin ToLua ( displayPowell(); ) ;
20735: LD_STRING displayPowell();
20737: PPUSH
20738: CALL_OW 559
// uc_side := 0 ;
20742: LD_ADDR_OWVAR 20
20746: PUSH
20747: LD_INT 0
20749: ST_TO_ADDR
// uc_nation := 2 ;
20750: LD_ADDR_OWVAR 21
20754: PUSH
20755: LD_INT 2
20757: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20758: LD_ADDR_OWVAR 37
20762: PUSH
20763: LD_INT 14
20765: ST_TO_ADDR
// vc_engine := engine_siberite ;
20766: LD_ADDR_OWVAR 39
20770: PUSH
20771: LD_INT 3
20773: ST_TO_ADDR
// vc_control := control_apeman ;
20774: LD_ADDR_OWVAR 38
20778: PUSH
20779: LD_INT 5
20781: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20782: LD_ADDR_OWVAR 40
20786: PUSH
20787: LD_INT 29
20789: ST_TO_ADDR
// un := CreateVehicle ;
20790: LD_ADDR_VAR 0 2
20794: PUSH
20795: CALL_OW 45
20799: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20800: LD_VAR 0 2
20804: PPUSH
20805: LD_INT 1
20807: PPUSH
20808: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20812: LD_INT 35
20814: PPUSH
20815: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20819: LD_VAR 0 2
20823: PPUSH
20824: LD_INT 22
20826: PUSH
20827: LD_OWVAR 2
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PPUSH
20836: CALL_OW 69
20840: PPUSH
20841: LD_VAR 0 2
20845: PPUSH
20846: CALL_OW 74
20850: PPUSH
20851: CALL_OW 115
// until IsDead ( un ) ;
20855: LD_VAR 0 2
20859: PPUSH
20860: CALL_OW 301
20864: IFFALSE 20812
// end ;
20866: PPOPN 2
20868: END
// every 0 0$1 trigger StreamModeActive and sStu do
20869: LD_EXP 22
20873: IFFALSE 20881
20875: PUSH
20876: LD_EXP 61
20880: AND
20881: IFFALSE 20897
20883: GO 20885
20885: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20886: LD_STRING displayStucuk();
20888: PPUSH
20889: CALL_OW 559
// ResetFog ;
20893: CALL_OW 335
// end ;
20897: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20898: LD_EXP 22
20902: IFFALSE 20910
20904: PUSH
20905: LD_EXP 54
20909: AND
20910: IFFALSE 21051
20912: GO 20914
20914: DISABLE
20915: LD_INT 0
20917: PPUSH
20918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20919: LD_ADDR_VAR 0 2
20923: PUSH
20924: LD_INT 22
20926: PUSH
20927: LD_OWVAR 2
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 21
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PPUSH
20950: CALL_OW 69
20954: ST_TO_ADDR
// if not tmp then
20955: LD_VAR 0 2
20959: NOT
20960: IFFALSE 20964
// exit ;
20962: GO 21051
// un := tmp [ rand ( 1 , tmp ) ] ;
20964: LD_ADDR_VAR 0 1
20968: PUSH
20969: LD_VAR 0 2
20973: PUSH
20974: LD_INT 1
20976: PPUSH
20977: LD_VAR 0 2
20981: PPUSH
20982: CALL_OW 12
20986: ARRAY
20987: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20988: LD_VAR 0 1
20992: PPUSH
20993: LD_INT 0
20995: PPUSH
20996: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21000: LD_VAR 0 1
21004: PPUSH
21005: LD_OWVAR 3
21009: PUSH
21010: LD_VAR 0 1
21014: DIFF
21015: PPUSH
21016: LD_VAR 0 1
21020: PPUSH
21021: CALL_OW 74
21025: PPUSH
21026: CALL_OW 115
// wait ( 0 0$20 ) ;
21030: LD_INT 700
21032: PPUSH
21033: CALL_OW 67
// SetSide ( un , your_side ) ;
21037: LD_VAR 0 1
21041: PPUSH
21042: LD_OWVAR 2
21046: PPUSH
21047: CALL_OW 235
// end ;
21051: PPOPN 2
21053: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21054: LD_EXP 22
21058: IFFALSE 21066
21060: PUSH
21061: LD_EXP 55
21065: AND
21066: IFFALSE 21172
21068: GO 21070
21070: DISABLE
21071: LD_INT 0
21073: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21074: LD_ADDR_VAR 0 1
21078: PUSH
21079: LD_INT 22
21081: PUSH
21082: LD_OWVAR 2
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: LD_INT 30
21096: PUSH
21097: LD_INT 0
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 30
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: LIST
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PPUSH
21123: CALL_OW 69
21127: ST_TO_ADDR
// if not depot then
21128: LD_VAR 0 1
21132: NOT
21133: IFFALSE 21137
// exit ;
21135: GO 21172
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21137: LD_VAR 0 1
21141: PUSH
21142: LD_INT 1
21144: ARRAY
21145: PPUSH
21146: CALL_OW 250
21150: PPUSH
21151: LD_VAR 0 1
21155: PUSH
21156: LD_INT 1
21158: ARRAY
21159: PPUSH
21160: CALL_OW 251
21164: PPUSH
21165: LD_INT 70
21167: PPUSH
21168: CALL_OW 495
// end ;
21172: PPOPN 1
21174: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21175: LD_EXP 22
21179: IFFALSE 21187
21181: PUSH
21182: LD_EXP 56
21186: AND
21187: IFFALSE 21398
21189: GO 21191
21191: DISABLE
21192: LD_INT 0
21194: PPUSH
21195: PPUSH
21196: PPUSH
21197: PPUSH
21198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21199: LD_ADDR_VAR 0 5
21203: PUSH
21204: LD_INT 22
21206: PUSH
21207: LD_OWVAR 2
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 21
21218: PUSH
21219: LD_INT 1
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PPUSH
21230: CALL_OW 69
21234: ST_TO_ADDR
// if not tmp then
21235: LD_VAR 0 5
21239: NOT
21240: IFFALSE 21244
// exit ;
21242: GO 21398
// for i in tmp do
21244: LD_ADDR_VAR 0 1
21248: PUSH
21249: LD_VAR 0 5
21253: PUSH
21254: FOR_IN
21255: IFFALSE 21396
// begin d := rand ( 0 , 5 ) ;
21257: LD_ADDR_VAR 0 4
21261: PUSH
21262: LD_INT 0
21264: PPUSH
21265: LD_INT 5
21267: PPUSH
21268: CALL_OW 12
21272: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21273: LD_ADDR_VAR 0 2
21277: PUSH
21278: LD_VAR 0 1
21282: PPUSH
21283: CALL_OW 250
21287: PPUSH
21288: LD_VAR 0 4
21292: PPUSH
21293: LD_INT 3
21295: PPUSH
21296: LD_INT 12
21298: PPUSH
21299: CALL_OW 12
21303: PPUSH
21304: CALL_OW 272
21308: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21309: LD_ADDR_VAR 0 3
21313: PUSH
21314: LD_VAR 0 1
21318: PPUSH
21319: CALL_OW 251
21323: PPUSH
21324: LD_VAR 0 4
21328: PPUSH
21329: LD_INT 3
21331: PPUSH
21332: LD_INT 12
21334: PPUSH
21335: CALL_OW 12
21339: PPUSH
21340: CALL_OW 273
21344: ST_TO_ADDR
// if ValidHex ( x , y ) then
21345: LD_VAR 0 2
21349: PPUSH
21350: LD_VAR 0 3
21354: PPUSH
21355: CALL_OW 488
21359: IFFALSE 21394
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21361: LD_VAR 0 1
21365: PPUSH
21366: LD_VAR 0 2
21370: PPUSH
21371: LD_VAR 0 3
21375: PPUSH
21376: LD_INT 3
21378: PPUSH
21379: LD_INT 6
21381: PPUSH
21382: CALL_OW 12
21386: PPUSH
21387: LD_INT 1
21389: PPUSH
21390: CALL_OW 483
// end ;
21394: GO 21254
21396: POP
21397: POP
// end ;
21398: PPOPN 5
21400: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21401: LD_EXP 22
21405: IFFALSE 21413
21407: PUSH
21408: LD_EXP 57
21412: AND
21413: IFFALSE 21507
21415: GO 21417
21417: DISABLE
21418: LD_INT 0
21420: PPUSH
21421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21422: LD_ADDR_VAR 0 2
21426: PUSH
21427: LD_INT 22
21429: PUSH
21430: LD_OWVAR 2
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 32
21441: PUSH
21442: LD_INT 1
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 21
21451: PUSH
21452: LD_INT 2
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: LIST
21463: PPUSH
21464: CALL_OW 69
21468: ST_TO_ADDR
// if not tmp then
21469: LD_VAR 0 2
21473: NOT
21474: IFFALSE 21478
// exit ;
21476: GO 21507
// for i in tmp do
21478: LD_ADDR_VAR 0 1
21482: PUSH
21483: LD_VAR 0 2
21487: PUSH
21488: FOR_IN
21489: IFFALSE 21505
// SetFuel ( i , 0 ) ;
21491: LD_VAR 0 1
21495: PPUSH
21496: LD_INT 0
21498: PPUSH
21499: CALL_OW 240
21503: GO 21488
21505: POP
21506: POP
// end ;
21507: PPOPN 2
21509: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21510: LD_EXP 22
21514: IFFALSE 21522
21516: PUSH
21517: LD_EXP 58
21521: AND
21522: IFFALSE 21588
21524: GO 21526
21526: DISABLE
21527: LD_INT 0
21529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21530: LD_ADDR_VAR 0 1
21534: PUSH
21535: LD_INT 22
21537: PUSH
21538: LD_OWVAR 2
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 30
21549: PUSH
21550: LD_INT 29
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PPUSH
21561: CALL_OW 69
21565: ST_TO_ADDR
// if not tmp then
21566: LD_VAR 0 1
21570: NOT
21571: IFFALSE 21575
// exit ;
21573: GO 21588
// DestroyUnit ( tmp [ 1 ] ) ;
21575: LD_VAR 0 1
21579: PUSH
21580: LD_INT 1
21582: ARRAY
21583: PPUSH
21584: CALL_OW 65
// end ;
21588: PPOPN 1
21590: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21591: LD_EXP 22
21595: IFFALSE 21603
21597: PUSH
21598: LD_EXP 60
21602: AND
21603: IFFALSE 21732
21605: GO 21607
21607: DISABLE
21608: LD_INT 0
21610: PPUSH
// begin uc_side := 0 ;
21611: LD_ADDR_OWVAR 20
21615: PUSH
21616: LD_INT 0
21618: ST_TO_ADDR
// uc_nation := nation_arabian ;
21619: LD_ADDR_OWVAR 21
21623: PUSH
21624: LD_INT 2
21626: ST_TO_ADDR
// hc_gallery :=  ;
21627: LD_ADDR_OWVAR 33
21631: PUSH
21632: LD_STRING 
21634: ST_TO_ADDR
// hc_name :=  ;
21635: LD_ADDR_OWVAR 26
21639: PUSH
21640: LD_STRING 
21642: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21643: LD_INT 1
21645: PPUSH
21646: LD_INT 11
21648: PPUSH
21649: LD_INT 10
21651: PPUSH
21652: CALL_OW 380
// un := CreateHuman ;
21656: LD_ADDR_VAR 0 1
21660: PUSH
21661: CALL_OW 44
21665: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21666: LD_VAR 0 1
21670: PPUSH
21671: LD_INT 1
21673: PPUSH
21674: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21678: LD_INT 35
21680: PPUSH
21681: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21685: LD_VAR 0 1
21689: PPUSH
21690: LD_INT 22
21692: PUSH
21693: LD_OWVAR 2
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PPUSH
21702: CALL_OW 69
21706: PPUSH
21707: LD_VAR 0 1
21711: PPUSH
21712: CALL_OW 74
21716: PPUSH
21717: CALL_OW 115
// until IsDead ( un ) ;
21721: LD_VAR 0 1
21725: PPUSH
21726: CALL_OW 301
21730: IFFALSE 21678
// end ;
21732: PPOPN 1
21734: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21735: LD_EXP 22
21739: IFFALSE 21747
21741: PUSH
21742: LD_EXP 62
21746: AND
21747: IFFALSE 21759
21749: GO 21751
21751: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21752: LD_STRING earthquake(getX(game), 0, 32)
21754: PPUSH
21755: CALL_OW 559
21759: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21760: LD_EXP 22
21764: IFFALSE 21772
21766: PUSH
21767: LD_EXP 63
21771: AND
21772: IFFALSE 21863
21774: GO 21776
21776: DISABLE
21777: LD_INT 0
21779: PPUSH
// begin enable ;
21780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21781: LD_ADDR_VAR 0 1
21785: PUSH
21786: LD_INT 22
21788: PUSH
21789: LD_OWVAR 2
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 21
21800: PUSH
21801: LD_INT 2
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 33
21810: PUSH
21811: LD_INT 3
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: PPUSH
21823: CALL_OW 69
21827: ST_TO_ADDR
// if not tmp then
21828: LD_VAR 0 1
21832: NOT
21833: IFFALSE 21837
// exit ;
21835: GO 21863
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21837: LD_VAR 0 1
21841: PUSH
21842: LD_INT 1
21844: PPUSH
21845: LD_VAR 0 1
21849: PPUSH
21850: CALL_OW 12
21854: ARRAY
21855: PPUSH
21856: LD_INT 1
21858: PPUSH
21859: CALL_OW 234
// end ;
21863: PPOPN 1
21865: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21866: LD_EXP 22
21870: IFFALSE 21878
21872: PUSH
21873: LD_EXP 64
21877: AND
21878: IFFALSE 22019
21880: GO 21882
21882: DISABLE
21883: LD_INT 0
21885: PPUSH
21886: PPUSH
21887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21888: LD_ADDR_VAR 0 3
21892: PUSH
21893: LD_INT 22
21895: PUSH
21896: LD_OWVAR 2
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 25
21907: PUSH
21908: LD_INT 1
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PPUSH
21919: CALL_OW 69
21923: ST_TO_ADDR
// if not tmp then
21924: LD_VAR 0 3
21928: NOT
21929: IFFALSE 21933
// exit ;
21931: GO 22019
// un := tmp [ rand ( 1 , tmp ) ] ;
21933: LD_ADDR_VAR 0 2
21937: PUSH
21938: LD_VAR 0 3
21942: PUSH
21943: LD_INT 1
21945: PPUSH
21946: LD_VAR 0 3
21950: PPUSH
21951: CALL_OW 12
21955: ARRAY
21956: ST_TO_ADDR
// if Crawls ( un ) then
21957: LD_VAR 0 2
21961: PPUSH
21962: CALL_OW 318
21966: IFFALSE 21977
// ComWalk ( un ) ;
21968: LD_VAR 0 2
21972: PPUSH
21973: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21977: LD_VAR 0 2
21981: PPUSH
21982: LD_INT 9
21984: PPUSH
21985: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21989: LD_INT 28
21991: PPUSH
21992: LD_OWVAR 2
21996: PPUSH
21997: LD_INT 2
21999: PPUSH
22000: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22004: LD_INT 29
22006: PPUSH
22007: LD_OWVAR 2
22011: PPUSH
22012: LD_INT 2
22014: PPUSH
22015: CALL_OW 322
// end ;
22019: PPOPN 3
22021: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22022: LD_EXP 22
22026: IFFALSE 22034
22028: PUSH
22029: LD_EXP 65
22033: AND
22034: IFFALSE 22145
22036: GO 22038
22038: DISABLE
22039: LD_INT 0
22041: PPUSH
22042: PPUSH
22043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22044: LD_ADDR_VAR 0 3
22048: PUSH
22049: LD_INT 22
22051: PUSH
22052: LD_OWVAR 2
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 25
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PPUSH
22075: CALL_OW 69
22079: ST_TO_ADDR
// if not tmp then
22080: LD_VAR 0 3
22084: NOT
22085: IFFALSE 22089
// exit ;
22087: GO 22145
// un := tmp [ rand ( 1 , tmp ) ] ;
22089: LD_ADDR_VAR 0 2
22093: PUSH
22094: LD_VAR 0 3
22098: PUSH
22099: LD_INT 1
22101: PPUSH
22102: LD_VAR 0 3
22106: PPUSH
22107: CALL_OW 12
22111: ARRAY
22112: ST_TO_ADDR
// if Crawls ( un ) then
22113: LD_VAR 0 2
22117: PPUSH
22118: CALL_OW 318
22122: IFFALSE 22133
// ComWalk ( un ) ;
22124: LD_VAR 0 2
22128: PPUSH
22129: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22133: LD_VAR 0 2
22137: PPUSH
22138: LD_INT 8
22140: PPUSH
22141: CALL_OW 336
// end ;
22145: PPOPN 3
22147: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22148: LD_EXP 22
22152: IFFALSE 22160
22154: PUSH
22155: LD_EXP 66
22159: AND
22160: IFFALSE 22304
22162: GO 22164
22164: DISABLE
22165: LD_INT 0
22167: PPUSH
22168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22169: LD_ADDR_VAR 0 2
22173: PUSH
22174: LD_INT 22
22176: PUSH
22177: LD_OWVAR 2
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 21
22188: PUSH
22189: LD_INT 2
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: LD_INT 34
22201: PUSH
22202: LD_INT 12
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 34
22211: PUSH
22212: LD_INT 51
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 34
22221: PUSH
22222: LD_INT 32
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: LIST
22239: PPUSH
22240: CALL_OW 69
22244: ST_TO_ADDR
// if not tmp then
22245: LD_VAR 0 2
22249: NOT
22250: IFFALSE 22254
// exit ;
22252: GO 22304
// for i in tmp do
22254: LD_ADDR_VAR 0 1
22258: PUSH
22259: LD_VAR 0 2
22263: PUSH
22264: FOR_IN
22265: IFFALSE 22302
// if GetCargo ( i , mat_artifact ) = 0 then
22267: LD_VAR 0 1
22271: PPUSH
22272: LD_INT 4
22274: PPUSH
22275: CALL_OW 289
22279: PUSH
22280: LD_INT 0
22282: EQUAL
22283: IFFALSE 22300
// SetCargo ( i , mat_siberit , 100 ) ;
22285: LD_VAR 0 1
22289: PPUSH
22290: LD_INT 3
22292: PPUSH
22293: LD_INT 100
22295: PPUSH
22296: CALL_OW 290
22300: GO 22264
22302: POP
22303: POP
// end ;
22304: PPOPN 2
22306: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22307: LD_EXP 22
22311: IFFALSE 22319
22313: PUSH
22314: LD_EXP 67
22318: AND
22319: IFFALSE 22502
22321: GO 22323
22323: DISABLE
22324: LD_INT 0
22326: PPUSH
22327: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22328: LD_ADDR_VAR 0 2
22332: PUSH
22333: LD_INT 22
22335: PUSH
22336: LD_OWVAR 2
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PPUSH
22345: CALL_OW 69
22349: ST_TO_ADDR
// if not tmp then
22350: LD_VAR 0 2
22354: NOT
22355: IFFALSE 22359
// exit ;
22357: GO 22502
// for i := 1 to 2 do
22359: LD_ADDR_VAR 0 1
22363: PUSH
22364: DOUBLE
22365: LD_INT 1
22367: DEC
22368: ST_TO_ADDR
22369: LD_INT 2
22371: PUSH
22372: FOR_TO
22373: IFFALSE 22500
// begin uc_side := your_side ;
22375: LD_ADDR_OWVAR 20
22379: PUSH
22380: LD_OWVAR 2
22384: ST_TO_ADDR
// uc_nation := nation_american ;
22385: LD_ADDR_OWVAR 21
22389: PUSH
22390: LD_INT 1
22392: ST_TO_ADDR
// vc_chassis := us_morphling ;
22393: LD_ADDR_OWVAR 37
22397: PUSH
22398: LD_INT 5
22400: ST_TO_ADDR
// vc_engine := engine_siberite ;
22401: LD_ADDR_OWVAR 39
22405: PUSH
22406: LD_INT 3
22408: ST_TO_ADDR
// vc_control := control_computer ;
22409: LD_ADDR_OWVAR 38
22413: PUSH
22414: LD_INT 3
22416: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22417: LD_ADDR_OWVAR 40
22421: PUSH
22422: LD_INT 10
22424: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22425: LD_VAR 0 2
22429: PUSH
22430: LD_INT 1
22432: ARRAY
22433: PPUSH
22434: CALL_OW 310
22438: NOT
22439: IFFALSE 22486
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22441: CALL_OW 45
22445: PPUSH
22446: LD_VAR 0 2
22450: PUSH
22451: LD_INT 1
22453: ARRAY
22454: PPUSH
22455: CALL_OW 250
22459: PPUSH
22460: LD_VAR 0 2
22464: PUSH
22465: LD_INT 1
22467: ARRAY
22468: PPUSH
22469: CALL_OW 251
22473: PPUSH
22474: LD_INT 12
22476: PPUSH
22477: LD_INT 1
22479: PPUSH
22480: CALL_OW 50
22484: GO 22498
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22486: CALL_OW 45
22490: PPUSH
22491: LD_INT 1
22493: PPUSH
22494: CALL_OW 51
// end ;
22498: GO 22372
22500: POP
22501: POP
// end ;
22502: PPOPN 2
22504: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22505: LD_EXP 22
22509: IFFALSE 22517
22511: PUSH
22512: LD_EXP 68
22516: AND
22517: IFFALSE 22739
22519: GO 22521
22521: DISABLE
22522: LD_INT 0
22524: PPUSH
22525: PPUSH
22526: PPUSH
22527: PPUSH
22528: PPUSH
22529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22530: LD_ADDR_VAR 0 6
22534: PUSH
22535: LD_INT 22
22537: PUSH
22538: LD_OWVAR 2
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 21
22549: PUSH
22550: LD_INT 1
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 3
22559: PUSH
22560: LD_INT 23
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: PPUSH
22579: CALL_OW 69
22583: ST_TO_ADDR
// if not tmp then
22584: LD_VAR 0 6
22588: NOT
22589: IFFALSE 22593
// exit ;
22591: GO 22739
// s1 := rand ( 1 , 4 ) ;
22593: LD_ADDR_VAR 0 2
22597: PUSH
22598: LD_INT 1
22600: PPUSH
22601: LD_INT 4
22603: PPUSH
22604: CALL_OW 12
22608: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22609: LD_ADDR_VAR 0 4
22613: PUSH
22614: LD_VAR 0 6
22618: PUSH
22619: LD_INT 1
22621: ARRAY
22622: PPUSH
22623: LD_VAR 0 2
22627: PPUSH
22628: CALL_OW 259
22632: ST_TO_ADDR
// if s1 = 1 then
22633: LD_VAR 0 2
22637: PUSH
22638: LD_INT 1
22640: EQUAL
22641: IFFALSE 22661
// s2 := rand ( 2 , 4 ) else
22643: LD_ADDR_VAR 0 3
22647: PUSH
22648: LD_INT 2
22650: PPUSH
22651: LD_INT 4
22653: PPUSH
22654: CALL_OW 12
22658: ST_TO_ADDR
22659: GO 22669
// s2 := 1 ;
22661: LD_ADDR_VAR 0 3
22665: PUSH
22666: LD_INT 1
22668: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22669: LD_ADDR_VAR 0 5
22673: PUSH
22674: LD_VAR 0 6
22678: PUSH
22679: LD_INT 1
22681: ARRAY
22682: PPUSH
22683: LD_VAR 0 3
22687: PPUSH
22688: CALL_OW 259
22692: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22693: LD_VAR 0 6
22697: PUSH
22698: LD_INT 1
22700: ARRAY
22701: PPUSH
22702: LD_VAR 0 2
22706: PPUSH
22707: LD_VAR 0 5
22711: PPUSH
22712: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22716: LD_VAR 0 6
22720: PUSH
22721: LD_INT 1
22723: ARRAY
22724: PPUSH
22725: LD_VAR 0 3
22729: PPUSH
22730: LD_VAR 0 4
22734: PPUSH
22735: CALL_OW 237
// end ;
22739: PPOPN 6
22741: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22742: LD_EXP 22
22746: IFFALSE 22754
22748: PUSH
22749: LD_EXP 69
22753: AND
22754: IFFALSE 22833
22756: GO 22758
22758: DISABLE
22759: LD_INT 0
22761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22762: LD_ADDR_VAR 0 1
22766: PUSH
22767: LD_INT 22
22769: PUSH
22770: LD_OWVAR 2
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 30
22781: PUSH
22782: LD_INT 3
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PPUSH
22793: CALL_OW 69
22797: ST_TO_ADDR
// if not tmp then
22798: LD_VAR 0 1
22802: NOT
22803: IFFALSE 22807
// exit ;
22805: GO 22833
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22807: LD_VAR 0 1
22811: PUSH
22812: LD_INT 1
22814: PPUSH
22815: LD_VAR 0 1
22819: PPUSH
22820: CALL_OW 12
22824: ARRAY
22825: PPUSH
22826: LD_INT 1
22828: PPUSH
22829: CALL_OW 234
// end ;
22833: PPOPN 1
22835: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22836: LD_EXP 22
22840: IFFALSE 22848
22842: PUSH
22843: LD_EXP 70
22847: AND
22848: IFFALSE 22960
22850: GO 22852
22852: DISABLE
22853: LD_INT 0
22855: PPUSH
22856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22857: LD_ADDR_VAR 0 2
22861: PUSH
22862: LD_INT 22
22864: PUSH
22865: LD_OWVAR 2
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 2
22876: PUSH
22877: LD_INT 30
22879: PUSH
22880: LD_INT 27
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 30
22889: PUSH
22890: LD_INT 26
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 30
22899: PUSH
22900: LD_INT 28
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PPUSH
22917: CALL_OW 69
22921: ST_TO_ADDR
// if not tmp then
22922: LD_VAR 0 2
22926: NOT
22927: IFFALSE 22931
// exit ;
22929: GO 22960
// for i in tmp do
22931: LD_ADDR_VAR 0 1
22935: PUSH
22936: LD_VAR 0 2
22940: PUSH
22941: FOR_IN
22942: IFFALSE 22958
// SetLives ( i , 1 ) ;
22944: LD_VAR 0 1
22948: PPUSH
22949: LD_INT 1
22951: PPUSH
22952: CALL_OW 234
22956: GO 22941
22958: POP
22959: POP
// end ;
22960: PPOPN 2
22962: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22963: LD_EXP 22
22967: IFFALSE 22975
22969: PUSH
22970: LD_EXP 71
22974: AND
22975: IFFALSE 23262
22977: GO 22979
22979: DISABLE
22980: LD_INT 0
22982: PPUSH
22983: PPUSH
22984: PPUSH
// begin i := rand ( 1 , 7 ) ;
22985: LD_ADDR_VAR 0 1
22989: PUSH
22990: LD_INT 1
22992: PPUSH
22993: LD_INT 7
22995: PPUSH
22996: CALL_OW 12
23000: ST_TO_ADDR
// case i of 1 :
23001: LD_VAR 0 1
23005: PUSH
23006: LD_INT 1
23008: DOUBLE
23009: EQUAL
23010: IFTRUE 23014
23012: GO 23024
23014: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23015: LD_STRING earthquake(getX(game), 0, 32)
23017: PPUSH
23018: CALL_OW 559
23022: GO 23262
23024: LD_INT 2
23026: DOUBLE
23027: EQUAL
23028: IFTRUE 23032
23030: GO 23046
23032: POP
// begin ToLua ( displayStucuk(); ) ;
23033: LD_STRING displayStucuk();
23035: PPUSH
23036: CALL_OW 559
// ResetFog ;
23040: CALL_OW 335
// end ; 3 :
23044: GO 23262
23046: LD_INT 3
23048: DOUBLE
23049: EQUAL
23050: IFTRUE 23054
23052: GO 23158
23054: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23055: LD_ADDR_VAR 0 2
23059: PUSH
23060: LD_INT 22
23062: PUSH
23063: LD_OWVAR 2
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 25
23074: PUSH
23075: LD_INT 1
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PPUSH
23086: CALL_OW 69
23090: ST_TO_ADDR
// if not tmp then
23091: LD_VAR 0 2
23095: NOT
23096: IFFALSE 23100
// exit ;
23098: GO 23262
// un := tmp [ rand ( 1 , tmp ) ] ;
23100: LD_ADDR_VAR 0 3
23104: PUSH
23105: LD_VAR 0 2
23109: PUSH
23110: LD_INT 1
23112: PPUSH
23113: LD_VAR 0 2
23117: PPUSH
23118: CALL_OW 12
23122: ARRAY
23123: ST_TO_ADDR
// if Crawls ( un ) then
23124: LD_VAR 0 3
23128: PPUSH
23129: CALL_OW 318
23133: IFFALSE 23144
// ComWalk ( un ) ;
23135: LD_VAR 0 3
23139: PPUSH
23140: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23144: LD_VAR 0 3
23148: PPUSH
23149: LD_INT 8
23151: PPUSH
23152: CALL_OW 336
// end ; 4 :
23156: GO 23262
23158: LD_INT 4
23160: DOUBLE
23161: EQUAL
23162: IFTRUE 23166
23164: GO 23240
23166: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23167: LD_ADDR_VAR 0 2
23171: PUSH
23172: LD_INT 22
23174: PUSH
23175: LD_OWVAR 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 30
23186: PUSH
23187: LD_INT 29
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PPUSH
23198: CALL_OW 69
23202: ST_TO_ADDR
// if not tmp then
23203: LD_VAR 0 2
23207: NOT
23208: IFFALSE 23212
// exit ;
23210: GO 23262
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23212: LD_VAR 0 2
23216: PUSH
23217: LD_INT 1
23219: ARRAY
23220: PPUSH
23221: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23225: LD_VAR 0 2
23229: PUSH
23230: LD_INT 1
23232: ARRAY
23233: PPUSH
23234: CALL_OW 65
// end ; 5 .. 7 :
23238: GO 23262
23240: LD_INT 5
23242: DOUBLE
23243: GREATEREQUAL
23244: IFFALSE 23252
23246: LD_INT 7
23248: DOUBLE
23249: LESSEQUAL
23250: IFTRUE 23254
23252: GO 23261
23254: POP
// StreamSibBomb ; end ;
23255: CALL 19443 0 0
23259: GO 23262
23261: POP
// end ;
23262: PPOPN 3
23264: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23265: LD_EXP 22
23269: IFFALSE 23277
23271: PUSH
23272: LD_EXP 72
23276: AND
23277: IFFALSE 23433
23279: GO 23281
23281: DISABLE
23282: LD_INT 0
23284: PPUSH
23285: PPUSH
23286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23287: LD_ADDR_VAR 0 2
23291: PUSH
23292: LD_INT 81
23294: PUSH
23295: LD_OWVAR 2
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: LD_INT 21
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 21
23319: PUSH
23320: LD_INT 2
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PPUSH
23336: CALL_OW 69
23340: ST_TO_ADDR
// if not tmp then
23341: LD_VAR 0 2
23345: NOT
23346: IFFALSE 23350
// exit ;
23348: GO 23433
// p := 0 ;
23350: LD_ADDR_VAR 0 3
23354: PUSH
23355: LD_INT 0
23357: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23358: LD_INT 35
23360: PPUSH
23361: CALL_OW 67
// p := p + 1 ;
23365: LD_ADDR_VAR 0 3
23369: PUSH
23370: LD_VAR 0 3
23374: PUSH
23375: LD_INT 1
23377: PLUS
23378: ST_TO_ADDR
// for i in tmp do
23379: LD_ADDR_VAR 0 1
23383: PUSH
23384: LD_VAR 0 2
23388: PUSH
23389: FOR_IN
23390: IFFALSE 23421
// if GetLives ( i ) < 1000 then
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL_OW 256
23401: PUSH
23402: LD_INT 1000
23404: LESS
23405: IFFALSE 23419
// SetLives ( i , 1000 ) ;
23407: LD_VAR 0 1
23411: PPUSH
23412: LD_INT 1000
23414: PPUSH
23415: CALL_OW 234
23419: GO 23389
23421: POP
23422: POP
// until p > 20 ;
23423: LD_VAR 0 3
23427: PUSH
23428: LD_INT 20
23430: GREATER
23431: IFFALSE 23358
// end ;
23433: PPOPN 3
23435: END
// every 0 0$1 trigger StreamModeActive and sTime do
23436: LD_EXP 22
23440: IFFALSE 23448
23442: PUSH
23443: LD_EXP 73
23447: AND
23448: IFFALSE 23483
23450: GO 23452
23452: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23453: LD_INT 28
23455: PPUSH
23456: LD_OWVAR 2
23460: PPUSH
23461: LD_INT 2
23463: PPUSH
23464: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23468: LD_INT 30
23470: PPUSH
23471: LD_OWVAR 2
23475: PPUSH
23476: LD_INT 2
23478: PPUSH
23479: CALL_OW 322
// end ;
23483: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23484: LD_EXP 22
23488: IFFALSE 23496
23490: PUSH
23491: LD_EXP 74
23495: AND
23496: IFFALSE 23617
23498: GO 23500
23500: DISABLE
23501: LD_INT 0
23503: PPUSH
23504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23505: LD_ADDR_VAR 0 2
23509: PUSH
23510: LD_INT 22
23512: PUSH
23513: LD_OWVAR 2
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 21
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 3
23534: PUSH
23535: LD_INT 23
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: LIST
23553: PPUSH
23554: CALL_OW 69
23558: ST_TO_ADDR
// if not tmp then
23559: LD_VAR 0 2
23563: NOT
23564: IFFALSE 23568
// exit ;
23566: GO 23617
// for i in tmp do
23568: LD_ADDR_VAR 0 1
23572: PUSH
23573: LD_VAR 0 2
23577: PUSH
23578: FOR_IN
23579: IFFALSE 23615
// begin if Crawls ( i ) then
23581: LD_VAR 0 1
23585: PPUSH
23586: CALL_OW 318
23590: IFFALSE 23601
// ComWalk ( i ) ;
23592: LD_VAR 0 1
23596: PPUSH
23597: CALL_OW 138
// SetClass ( i , 2 ) ;
23601: LD_VAR 0 1
23605: PPUSH
23606: LD_INT 2
23608: PPUSH
23609: CALL_OW 336
// end ;
23613: GO 23578
23615: POP
23616: POP
// end ;
23617: PPOPN 2
23619: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23620: LD_EXP 22
23624: IFFALSE 23632
23626: PUSH
23627: LD_EXP 75
23631: AND
23632: IFFALSE 23922
23634: GO 23636
23636: DISABLE
23637: LD_INT 0
23639: PPUSH
23640: PPUSH
23641: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23642: LD_OWVAR 2
23646: PPUSH
23647: LD_INT 9
23649: PPUSH
23650: LD_INT 1
23652: PPUSH
23653: LD_INT 1
23655: PPUSH
23656: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23660: LD_INT 9
23662: PPUSH
23663: LD_OWVAR 2
23667: PPUSH
23668: CALL_OW 343
// uc_side := 9 ;
23672: LD_ADDR_OWVAR 20
23676: PUSH
23677: LD_INT 9
23679: ST_TO_ADDR
// uc_nation := 2 ;
23680: LD_ADDR_OWVAR 21
23684: PUSH
23685: LD_INT 2
23687: ST_TO_ADDR
// hc_name := Dark Warrior ;
23688: LD_ADDR_OWVAR 26
23692: PUSH
23693: LD_STRING Dark Warrior
23695: ST_TO_ADDR
// hc_gallery :=  ;
23696: LD_ADDR_OWVAR 33
23700: PUSH
23701: LD_STRING 
23703: ST_TO_ADDR
// hc_noskilllimit := true ;
23704: LD_ADDR_OWVAR 76
23708: PUSH
23709: LD_INT 1
23711: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23712: LD_ADDR_OWVAR 31
23716: PUSH
23717: LD_INT 30
23719: PUSH
23720: LD_INT 30
23722: PUSH
23723: LD_INT 30
23725: PUSH
23726: LD_INT 30
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: ST_TO_ADDR
// un := CreateHuman ;
23735: LD_ADDR_VAR 0 3
23739: PUSH
23740: CALL_OW 44
23744: ST_TO_ADDR
// hc_noskilllimit := false ;
23745: LD_ADDR_OWVAR 76
23749: PUSH
23750: LD_INT 0
23752: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23753: LD_VAR 0 3
23757: PPUSH
23758: LD_INT 1
23760: PPUSH
23761: CALL_OW 51
// ToLua ( playRanger() ) ;
23765: LD_STRING playRanger()
23767: PPUSH
23768: CALL_OW 559
// p := 0 ;
23772: LD_ADDR_VAR 0 2
23776: PUSH
23777: LD_INT 0
23779: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23780: LD_INT 35
23782: PPUSH
23783: CALL_OW 67
// p := p + 1 ;
23787: LD_ADDR_VAR 0 2
23791: PUSH
23792: LD_VAR 0 2
23796: PUSH
23797: LD_INT 1
23799: PLUS
23800: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23801: LD_VAR 0 3
23805: PPUSH
23806: CALL_OW 256
23810: PUSH
23811: LD_INT 1000
23813: LESS
23814: IFFALSE 23828
// SetLives ( un , 1000 ) ;
23816: LD_VAR 0 3
23820: PPUSH
23821: LD_INT 1000
23823: PPUSH
23824: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23828: LD_VAR 0 3
23832: PPUSH
23833: LD_INT 81
23835: PUSH
23836: LD_OWVAR 2
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 91
23847: PUSH
23848: LD_VAR 0 3
23852: PUSH
23853: LD_INT 30
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PPUSH
23865: CALL_OW 69
23869: PPUSH
23870: LD_VAR 0 3
23874: PPUSH
23875: CALL_OW 74
23879: PPUSH
23880: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23884: LD_VAR 0 2
23888: PUSH
23889: LD_INT 80
23891: GREATER
23892: IFTRUE 23905
23894: PUSH
23895: LD_VAR 0 3
23899: PPUSH
23900: CALL_OW 301
23904: OR
23905: IFFALSE 23780
// if un then
23907: LD_VAR 0 3
23911: IFFALSE 23922
// RemoveUnit ( un ) ;
23913: LD_VAR 0 3
23917: PPUSH
23918: CALL_OW 64
// end ;
23922: PPOPN 3
23924: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23925: LD_EXP 76
23929: IFFALSE 24045
23931: GO 23933
23933: DISABLE
23934: LD_INT 0
23936: PPUSH
23937: PPUSH
23938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23939: LD_ADDR_VAR 0 2
23943: PUSH
23944: LD_INT 81
23946: PUSH
23947: LD_OWVAR 2
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 21
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PPUSH
23970: CALL_OW 69
23974: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23975: LD_STRING playComputer()
23977: PPUSH
23978: CALL_OW 559
// if not tmp then
23982: LD_VAR 0 2
23986: NOT
23987: IFFALSE 23991
// exit ;
23989: GO 24045
// for i in tmp do
23991: LD_ADDR_VAR 0 1
23995: PUSH
23996: LD_VAR 0 2
24000: PUSH
24001: FOR_IN
24002: IFFALSE 24043
// for j := 1 to 4 do
24004: LD_ADDR_VAR 0 3
24008: PUSH
24009: DOUBLE
24010: LD_INT 1
24012: DEC
24013: ST_TO_ADDR
24014: LD_INT 4
24016: PUSH
24017: FOR_TO
24018: IFFALSE 24039
// SetSkill ( i , j , 10 ) ;
24020: LD_VAR 0 1
24024: PPUSH
24025: LD_VAR 0 3
24029: PPUSH
24030: LD_INT 10
24032: PPUSH
24033: CALL_OW 237
24037: GO 24017
24039: POP
24040: POP
24041: GO 24001
24043: POP
24044: POP
// end ;
24045: PPOPN 3
24047: END
// every 0 0$1 trigger s30 do var i , tmp ;
24048: LD_EXP 77
24052: IFFALSE 24121
24054: GO 24056
24056: DISABLE
24057: LD_INT 0
24059: PPUSH
24060: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24061: LD_ADDR_VAR 0 2
24065: PUSH
24066: LD_INT 22
24068: PUSH
24069: LD_OWVAR 2
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PPUSH
24078: CALL_OW 69
24082: ST_TO_ADDR
// if not tmp then
24083: LD_VAR 0 2
24087: NOT
24088: IFFALSE 24092
// exit ;
24090: GO 24121
// for i in tmp do
24092: LD_ADDR_VAR 0 1
24096: PUSH
24097: LD_VAR 0 2
24101: PUSH
24102: FOR_IN
24103: IFFALSE 24119
// SetLives ( i , 300 ) ;
24105: LD_VAR 0 1
24109: PPUSH
24110: LD_INT 300
24112: PPUSH
24113: CALL_OW 234
24117: GO 24102
24119: POP
24120: POP
// end ;
24121: PPOPN 2
24123: END
// every 0 0$1 trigger s60 do var i , tmp ;
24124: LD_EXP 78
24128: IFFALSE 24197
24130: GO 24132
24132: DISABLE
24133: LD_INT 0
24135: PPUSH
24136: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24137: LD_ADDR_VAR 0 2
24141: PUSH
24142: LD_INT 22
24144: PUSH
24145: LD_OWVAR 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PPUSH
24154: CALL_OW 69
24158: ST_TO_ADDR
// if not tmp then
24159: LD_VAR 0 2
24163: NOT
24164: IFFALSE 24168
// exit ;
24166: GO 24197
// for i in tmp do
24168: LD_ADDR_VAR 0 1
24172: PUSH
24173: LD_VAR 0 2
24177: PUSH
24178: FOR_IN
24179: IFFALSE 24195
// SetLives ( i , 600 ) ;
24181: LD_VAR 0 1
24185: PPUSH
24186: LD_INT 600
24188: PPUSH
24189: CALL_OW 234
24193: GO 24178
24195: POP
24196: POP
// end ;
24197: PPOPN 2
24199: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24200: LD_INT 0
24202: PPUSH
// case cmd of 301 :
24203: LD_VAR 0 1
24207: PUSH
24208: LD_INT 301
24210: DOUBLE
24211: EQUAL
24212: IFTRUE 24216
24214: GO 24248
24216: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24217: LD_VAR 0 6
24221: PPUSH
24222: LD_VAR 0 7
24226: PPUSH
24227: LD_VAR 0 8
24231: PPUSH
24232: LD_VAR 0 4
24236: PPUSH
24237: LD_VAR 0 5
24241: PPUSH
24242: CALL 25461 0 5
24246: GO 24369
24248: LD_INT 302
24250: DOUBLE
24251: EQUAL
24252: IFTRUE 24256
24254: GO 24293
24256: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24257: LD_VAR 0 6
24261: PPUSH
24262: LD_VAR 0 7
24266: PPUSH
24267: LD_VAR 0 8
24271: PPUSH
24272: LD_VAR 0 9
24276: PPUSH
24277: LD_VAR 0 4
24281: PPUSH
24282: LD_VAR 0 5
24286: PPUSH
24287: CALL 25552 0 6
24291: GO 24369
24293: LD_INT 303
24295: DOUBLE
24296: EQUAL
24297: IFTRUE 24301
24299: GO 24338
24301: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24302: LD_VAR 0 6
24306: PPUSH
24307: LD_VAR 0 7
24311: PPUSH
24312: LD_VAR 0 8
24316: PPUSH
24317: LD_VAR 0 9
24321: PPUSH
24322: LD_VAR 0 4
24326: PPUSH
24327: LD_VAR 0 5
24331: PPUSH
24332: CALL 24374 0 6
24336: GO 24369
24338: LD_INT 304
24340: DOUBLE
24341: EQUAL
24342: IFTRUE 24346
24344: GO 24368
24346: POP
// hHackTeleport ( unit , x , y ) ; end ;
24347: LD_VAR 0 2
24351: PPUSH
24352: LD_VAR 0 4
24356: PPUSH
24357: LD_VAR 0 5
24361: PPUSH
24362: CALL 26145 0 3
24366: GO 24369
24368: POP
// end ;
24369: LD_VAR 0 12
24373: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24374: LD_INT 0
24376: PPUSH
24377: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24378: LD_VAR 0 1
24382: PUSH
24383: LD_INT 1
24385: LESS
24386: IFTRUE 24398
24388: PUSH
24389: LD_VAR 0 1
24393: PUSH
24394: LD_INT 3
24396: GREATER
24397: OR
24398: IFTRUE 24416
24400: PUSH
24401: LD_VAR 0 5
24405: PPUSH
24406: LD_VAR 0 6
24410: PPUSH
24411: CALL_OW 428
24415: OR
24416: IFFALSE 24420
// exit ;
24418: GO 25148
// uc_side := your_side ;
24420: LD_ADDR_OWVAR 20
24424: PUSH
24425: LD_OWVAR 2
24429: ST_TO_ADDR
// uc_nation := nation ;
24430: LD_ADDR_OWVAR 21
24434: PUSH
24435: LD_VAR 0 1
24439: ST_TO_ADDR
// bc_level = 1 ;
24440: LD_ADDR_OWVAR 43
24444: PUSH
24445: LD_INT 1
24447: ST_TO_ADDR
// case btype of 1 :
24448: LD_VAR 0 2
24452: PUSH
24453: LD_INT 1
24455: DOUBLE
24456: EQUAL
24457: IFTRUE 24461
24459: GO 24472
24461: POP
// bc_type := b_depot ; 2 :
24462: LD_ADDR_OWVAR 42
24466: PUSH
24467: LD_INT 0
24469: ST_TO_ADDR
24470: GO 25092
24472: LD_INT 2
24474: DOUBLE
24475: EQUAL
24476: IFTRUE 24480
24478: GO 24491
24480: POP
// bc_type := b_warehouse ; 3 :
24481: LD_ADDR_OWVAR 42
24485: PUSH
24486: LD_INT 1
24488: ST_TO_ADDR
24489: GO 25092
24491: LD_INT 3
24493: DOUBLE
24494: EQUAL
24495: IFTRUE 24499
24497: GO 24510
24499: POP
// bc_type := b_lab ; 4 .. 9 :
24500: LD_ADDR_OWVAR 42
24504: PUSH
24505: LD_INT 6
24507: ST_TO_ADDR
24508: GO 25092
24510: LD_INT 4
24512: DOUBLE
24513: GREATEREQUAL
24514: IFFALSE 24522
24516: LD_INT 9
24518: DOUBLE
24519: LESSEQUAL
24520: IFTRUE 24524
24522: GO 24584
24524: POP
// begin bc_type := b_lab_half ;
24525: LD_ADDR_OWVAR 42
24529: PUSH
24530: LD_INT 7
24532: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24533: LD_ADDR_OWVAR 44
24537: PUSH
24538: LD_INT 10
24540: PUSH
24541: LD_INT 11
24543: PUSH
24544: LD_INT 12
24546: PUSH
24547: LD_INT 15
24549: PUSH
24550: LD_INT 14
24552: PUSH
24553: LD_INT 13
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: PUSH
24564: LD_VAR 0 2
24568: PUSH
24569: LD_INT 3
24571: MINUS
24572: ARRAY
24573: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24574: LD_ADDR_OWVAR 45
24578: PUSH
24579: LD_INT 9
24581: ST_TO_ADDR
// end ; 10 .. 13 :
24582: GO 25092
24584: LD_INT 10
24586: DOUBLE
24587: GREATEREQUAL
24588: IFFALSE 24596
24590: LD_INT 13
24592: DOUBLE
24593: LESSEQUAL
24594: IFTRUE 24598
24596: GO 24675
24598: POP
// begin bc_type := b_lab_full ;
24599: LD_ADDR_OWVAR 42
24603: PUSH
24604: LD_INT 8
24606: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24607: LD_ADDR_OWVAR 44
24611: PUSH
24612: LD_INT 10
24614: PUSH
24615: LD_INT 12
24617: PUSH
24618: LD_INT 14
24620: PUSH
24621: LD_INT 13
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: PUSH
24630: LD_VAR 0 2
24634: PUSH
24635: LD_INT 9
24637: MINUS
24638: ARRAY
24639: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24640: LD_ADDR_OWVAR 45
24644: PUSH
24645: LD_INT 11
24647: PUSH
24648: LD_INT 15
24650: PUSH
24651: LD_INT 12
24653: PUSH
24654: LD_INT 15
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: PUSH
24663: LD_VAR 0 2
24667: PUSH
24668: LD_INT 9
24670: MINUS
24671: ARRAY
24672: ST_TO_ADDR
// end ; 14 :
24673: GO 25092
24675: LD_INT 14
24677: DOUBLE
24678: EQUAL
24679: IFTRUE 24683
24681: GO 24694
24683: POP
// bc_type := b_workshop ; 15 :
24684: LD_ADDR_OWVAR 42
24688: PUSH
24689: LD_INT 2
24691: ST_TO_ADDR
24692: GO 25092
24694: LD_INT 15
24696: DOUBLE
24697: EQUAL
24698: IFTRUE 24702
24700: GO 24713
24702: POP
// bc_type := b_factory ; 16 :
24703: LD_ADDR_OWVAR 42
24707: PUSH
24708: LD_INT 3
24710: ST_TO_ADDR
24711: GO 25092
24713: LD_INT 16
24715: DOUBLE
24716: EQUAL
24717: IFTRUE 24721
24719: GO 24732
24721: POP
// bc_type := b_ext_gun ; 17 :
24722: LD_ADDR_OWVAR 42
24726: PUSH
24727: LD_INT 17
24729: ST_TO_ADDR
24730: GO 25092
24732: LD_INT 17
24734: DOUBLE
24735: EQUAL
24736: IFTRUE 24740
24738: GO 24768
24740: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24741: LD_ADDR_OWVAR 42
24745: PUSH
24746: LD_INT 19
24748: PUSH
24749: LD_INT 23
24751: PUSH
24752: LD_INT 19
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: LIST
24759: PUSH
24760: LD_VAR 0 1
24764: ARRAY
24765: ST_TO_ADDR
24766: GO 25092
24768: LD_INT 18
24770: DOUBLE
24771: EQUAL
24772: IFTRUE 24776
24774: GO 24787
24776: POP
// bc_type := b_ext_radar ; 19 :
24777: LD_ADDR_OWVAR 42
24781: PUSH
24782: LD_INT 20
24784: ST_TO_ADDR
24785: GO 25092
24787: LD_INT 19
24789: DOUBLE
24790: EQUAL
24791: IFTRUE 24795
24793: GO 24806
24795: POP
// bc_type := b_ext_radio ; 20 :
24796: LD_ADDR_OWVAR 42
24800: PUSH
24801: LD_INT 22
24803: ST_TO_ADDR
24804: GO 25092
24806: LD_INT 20
24808: DOUBLE
24809: EQUAL
24810: IFTRUE 24814
24812: GO 24825
24814: POP
// bc_type := b_ext_siberium ; 21 :
24815: LD_ADDR_OWVAR 42
24819: PUSH
24820: LD_INT 21
24822: ST_TO_ADDR
24823: GO 25092
24825: LD_INT 21
24827: DOUBLE
24828: EQUAL
24829: IFTRUE 24833
24831: GO 24844
24833: POP
// bc_type := b_ext_computer ; 22 :
24834: LD_ADDR_OWVAR 42
24838: PUSH
24839: LD_INT 24
24841: ST_TO_ADDR
24842: GO 25092
24844: LD_INT 22
24846: DOUBLE
24847: EQUAL
24848: IFTRUE 24852
24850: GO 24863
24852: POP
// bc_type := b_ext_track ; 23 :
24853: LD_ADDR_OWVAR 42
24857: PUSH
24858: LD_INT 16
24860: ST_TO_ADDR
24861: GO 25092
24863: LD_INT 23
24865: DOUBLE
24866: EQUAL
24867: IFTRUE 24871
24869: GO 24882
24871: POP
// bc_type := b_ext_laser ; 24 :
24872: LD_ADDR_OWVAR 42
24876: PUSH
24877: LD_INT 25
24879: ST_TO_ADDR
24880: GO 25092
24882: LD_INT 24
24884: DOUBLE
24885: EQUAL
24886: IFTRUE 24890
24888: GO 24901
24890: POP
// bc_type := b_control_tower ; 25 :
24891: LD_ADDR_OWVAR 42
24895: PUSH
24896: LD_INT 36
24898: ST_TO_ADDR
24899: GO 25092
24901: LD_INT 25
24903: DOUBLE
24904: EQUAL
24905: IFTRUE 24909
24907: GO 24920
24909: POP
// bc_type := b_breastwork ; 26 :
24910: LD_ADDR_OWVAR 42
24914: PUSH
24915: LD_INT 31
24917: ST_TO_ADDR
24918: GO 25092
24920: LD_INT 26
24922: DOUBLE
24923: EQUAL
24924: IFTRUE 24928
24926: GO 24939
24928: POP
// bc_type := b_bunker ; 27 :
24929: LD_ADDR_OWVAR 42
24933: PUSH
24934: LD_INT 32
24936: ST_TO_ADDR
24937: GO 25092
24939: LD_INT 27
24941: DOUBLE
24942: EQUAL
24943: IFTRUE 24947
24945: GO 24958
24947: POP
// bc_type := b_turret ; 28 :
24948: LD_ADDR_OWVAR 42
24952: PUSH
24953: LD_INT 33
24955: ST_TO_ADDR
24956: GO 25092
24958: LD_INT 28
24960: DOUBLE
24961: EQUAL
24962: IFTRUE 24966
24964: GO 24977
24966: POP
// bc_type := b_armoury ; 29 :
24967: LD_ADDR_OWVAR 42
24971: PUSH
24972: LD_INT 4
24974: ST_TO_ADDR
24975: GO 25092
24977: LD_INT 29
24979: DOUBLE
24980: EQUAL
24981: IFTRUE 24985
24983: GO 24996
24985: POP
// bc_type := b_barracks ; 30 :
24986: LD_ADDR_OWVAR 42
24990: PUSH
24991: LD_INT 5
24993: ST_TO_ADDR
24994: GO 25092
24996: LD_INT 30
24998: DOUBLE
24999: EQUAL
25000: IFTRUE 25004
25002: GO 25015
25004: POP
// bc_type := b_solar_power ; 31 :
25005: LD_ADDR_OWVAR 42
25009: PUSH
25010: LD_INT 27
25012: ST_TO_ADDR
25013: GO 25092
25015: LD_INT 31
25017: DOUBLE
25018: EQUAL
25019: IFTRUE 25023
25021: GO 25034
25023: POP
// bc_type := b_oil_power ; 32 :
25024: LD_ADDR_OWVAR 42
25028: PUSH
25029: LD_INT 26
25031: ST_TO_ADDR
25032: GO 25092
25034: LD_INT 32
25036: DOUBLE
25037: EQUAL
25038: IFTRUE 25042
25040: GO 25053
25042: POP
// bc_type := b_siberite_power ; 33 :
25043: LD_ADDR_OWVAR 42
25047: PUSH
25048: LD_INT 28
25050: ST_TO_ADDR
25051: GO 25092
25053: LD_INT 33
25055: DOUBLE
25056: EQUAL
25057: IFTRUE 25061
25059: GO 25072
25061: POP
// bc_type := b_oil_mine ; 34 :
25062: LD_ADDR_OWVAR 42
25066: PUSH
25067: LD_INT 29
25069: ST_TO_ADDR
25070: GO 25092
25072: LD_INT 34
25074: DOUBLE
25075: EQUAL
25076: IFTRUE 25080
25078: GO 25091
25080: POP
// bc_type := b_siberite_mine ; end ;
25081: LD_ADDR_OWVAR 42
25085: PUSH
25086: LD_INT 30
25088: ST_TO_ADDR
25089: GO 25092
25091: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25092: LD_ADDR_VAR 0 8
25096: PUSH
25097: LD_VAR 0 5
25101: PPUSH
25102: LD_VAR 0 6
25106: PPUSH
25107: LD_VAR 0 3
25111: PPUSH
25112: CALL_OW 47
25116: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25117: LD_OWVAR 42
25121: PUSH
25122: LD_INT 32
25124: PUSH
25125: LD_INT 33
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: IN
25132: IFFALSE 25148
// PlaceWeaponTurret ( b , weapon ) ;
25134: LD_VAR 0 8
25138: PPUSH
25139: LD_VAR 0 4
25143: PPUSH
25144: CALL_OW 431
// end ;
25148: LD_VAR 0 7
25152: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25153: LD_INT 0
25155: PPUSH
25156: PPUSH
25157: PPUSH
25158: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25159: LD_ADDR_VAR 0 4
25163: PUSH
25164: LD_INT 22
25166: PUSH
25167: LD_OWVAR 2
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: LD_INT 30
25181: PUSH
25182: LD_INT 0
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 30
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PPUSH
25208: CALL_OW 69
25212: ST_TO_ADDR
// if not tmp then
25213: LD_VAR 0 4
25217: NOT
25218: IFFALSE 25222
// exit ;
25220: GO 25281
// for i in tmp do
25222: LD_ADDR_VAR 0 2
25226: PUSH
25227: LD_VAR 0 4
25231: PUSH
25232: FOR_IN
25233: IFFALSE 25279
// for j = 1 to 3 do
25235: LD_ADDR_VAR 0 3
25239: PUSH
25240: DOUBLE
25241: LD_INT 1
25243: DEC
25244: ST_TO_ADDR
25245: LD_INT 3
25247: PUSH
25248: FOR_TO
25249: IFFALSE 25275
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25251: LD_VAR 0 2
25255: PPUSH
25256: CALL_OW 274
25260: PPUSH
25261: LD_VAR 0 3
25265: PPUSH
25266: LD_INT 99999
25268: PPUSH
25269: CALL_OW 277
25273: GO 25248
25275: POP
25276: POP
25277: GO 25232
25279: POP
25280: POP
// end ;
25281: LD_VAR 0 1
25285: RET
// export function hHackSetLevel10 ; var i , j ; begin
25286: LD_INT 0
25288: PPUSH
25289: PPUSH
25290: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25291: LD_ADDR_VAR 0 2
25295: PUSH
25296: LD_INT 21
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PPUSH
25306: CALL_OW 69
25310: PUSH
25311: FOR_IN
25312: IFFALSE 25364
// if IsSelected ( i ) then
25314: LD_VAR 0 2
25318: PPUSH
25319: CALL_OW 306
25323: IFFALSE 25362
// begin for j := 1 to 4 do
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: DOUBLE
25331: LD_INT 1
25333: DEC
25334: ST_TO_ADDR
25335: LD_INT 4
25337: PUSH
25338: FOR_TO
25339: IFFALSE 25360
// SetSkill ( i , j , 10 ) ;
25341: LD_VAR 0 2
25345: PPUSH
25346: LD_VAR 0 3
25350: PPUSH
25351: LD_INT 10
25353: PPUSH
25354: CALL_OW 237
25358: GO 25338
25360: POP
25361: POP
// end ;
25362: GO 25311
25364: POP
25365: POP
// end ;
25366: LD_VAR 0 1
25370: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25371: LD_INT 0
25373: PPUSH
25374: PPUSH
25375: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25376: LD_ADDR_VAR 0 2
25380: PUSH
25381: LD_INT 22
25383: PUSH
25384: LD_OWVAR 2
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 21
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PPUSH
25407: CALL_OW 69
25411: PUSH
25412: FOR_IN
25413: IFFALSE 25454
// begin for j := 1 to 4 do
25415: LD_ADDR_VAR 0 3
25419: PUSH
25420: DOUBLE
25421: LD_INT 1
25423: DEC
25424: ST_TO_ADDR
25425: LD_INT 4
25427: PUSH
25428: FOR_TO
25429: IFFALSE 25450
// SetSkill ( i , j , 10 ) ;
25431: LD_VAR 0 2
25435: PPUSH
25436: LD_VAR 0 3
25440: PPUSH
25441: LD_INT 10
25443: PPUSH
25444: CALL_OW 237
25448: GO 25428
25450: POP
25451: POP
// end ;
25452: GO 25412
25454: POP
25455: POP
// end ;
25456: LD_VAR 0 1
25460: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25461: LD_INT 0
25463: PPUSH
// uc_side := your_side ;
25464: LD_ADDR_OWVAR 20
25468: PUSH
25469: LD_OWVAR 2
25473: ST_TO_ADDR
// uc_nation := nation ;
25474: LD_ADDR_OWVAR 21
25478: PUSH
25479: LD_VAR 0 1
25483: ST_TO_ADDR
// InitHc ;
25484: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25488: LD_INT 0
25490: PPUSH
25491: LD_VAR 0 2
25495: PPUSH
25496: LD_VAR 0 3
25500: PPUSH
25501: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25505: LD_VAR 0 4
25509: PPUSH
25510: LD_VAR 0 5
25514: PPUSH
25515: CALL_OW 428
25519: PUSH
25520: LD_INT 0
25522: EQUAL
25523: IFFALSE 25547
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25525: CALL_OW 44
25529: PPUSH
25530: LD_VAR 0 4
25534: PPUSH
25535: LD_VAR 0 5
25539: PPUSH
25540: LD_INT 1
25542: PPUSH
25543: CALL_OW 48
// end ;
25547: LD_VAR 0 6
25551: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25552: LD_INT 0
25554: PPUSH
25555: PPUSH
// uc_side := your_side ;
25556: LD_ADDR_OWVAR 20
25560: PUSH
25561: LD_OWVAR 2
25565: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25566: LD_VAR 0 1
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: LD_INT 2
25576: PUSH
25577: LD_INT 3
25579: PUSH
25580: LD_INT 4
25582: PUSH
25583: LD_INT 5
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: IN
25593: IFFALSE 25605
// uc_nation := nation_american else
25595: LD_ADDR_OWVAR 21
25599: PUSH
25600: LD_INT 1
25602: ST_TO_ADDR
25603: GO 25648
// if chassis in [ 11 , 12 , 13 , 14 ] then
25605: LD_VAR 0 1
25609: PUSH
25610: LD_INT 11
25612: PUSH
25613: LD_INT 12
25615: PUSH
25616: LD_INT 13
25618: PUSH
25619: LD_INT 14
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: IN
25628: IFFALSE 25640
// uc_nation := nation_arabian else
25630: LD_ADDR_OWVAR 21
25634: PUSH
25635: LD_INT 2
25637: ST_TO_ADDR
25638: GO 25648
// uc_nation := nation_russian ;
25640: LD_ADDR_OWVAR 21
25644: PUSH
25645: LD_INT 3
25647: ST_TO_ADDR
// vc_chassis := chassis ;
25648: LD_ADDR_OWVAR 37
25652: PUSH
25653: LD_VAR 0 1
25657: ST_TO_ADDR
// vc_engine := engine ;
25658: LD_ADDR_OWVAR 39
25662: PUSH
25663: LD_VAR 0 2
25667: ST_TO_ADDR
// vc_control := control ;
25668: LD_ADDR_OWVAR 38
25672: PUSH
25673: LD_VAR 0 3
25677: ST_TO_ADDR
// vc_weapon := weapon ;
25678: LD_ADDR_OWVAR 40
25682: PUSH
25683: LD_VAR 0 4
25687: ST_TO_ADDR
// un := CreateVehicle ;
25688: LD_ADDR_VAR 0 8
25692: PUSH
25693: CALL_OW 45
25697: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25698: LD_VAR 0 8
25702: PPUSH
25703: LD_INT 0
25705: PPUSH
25706: LD_INT 5
25708: PPUSH
25709: CALL_OW 12
25713: PPUSH
25714: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25718: LD_VAR 0 8
25722: PPUSH
25723: LD_VAR 0 5
25727: PPUSH
25728: LD_VAR 0 6
25732: PPUSH
25733: LD_INT 1
25735: PPUSH
25736: CALL_OW 48
// end ;
25740: LD_VAR 0 7
25744: RET
// export hInvincible ; every 1 do
25745: GO 25747
25747: DISABLE
// hInvincible := [ ] ;
25748: LD_ADDR_EXP 79
25752: PUSH
25753: EMPTY
25754: ST_TO_ADDR
25755: END
// every 10 do var i ;
25756: GO 25758
25758: DISABLE
25759: LD_INT 0
25761: PPUSH
// begin enable ;
25762: ENABLE
// if not hInvincible then
25763: LD_EXP 79
25767: NOT
25768: IFFALSE 25772
// exit ;
25770: GO 25816
// for i in hInvincible do
25772: LD_ADDR_VAR 0 1
25776: PUSH
25777: LD_EXP 79
25781: PUSH
25782: FOR_IN
25783: IFFALSE 25814
// if GetLives ( i ) < 1000 then
25785: LD_VAR 0 1
25789: PPUSH
25790: CALL_OW 256
25794: PUSH
25795: LD_INT 1000
25797: LESS
25798: IFFALSE 25812
// SetLives ( i , 1000 ) ;
25800: LD_VAR 0 1
25804: PPUSH
25805: LD_INT 1000
25807: PPUSH
25808: CALL_OW 234
25812: GO 25782
25814: POP
25815: POP
// end ;
25816: PPOPN 1
25818: END
// export function hHackInvincible ; var i ; begin
25819: LD_INT 0
25821: PPUSH
25822: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25823: LD_ADDR_VAR 0 2
25827: PUSH
25828: LD_INT 2
25830: PUSH
25831: LD_INT 21
25833: PUSH
25834: LD_INT 1
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 21
25843: PUSH
25844: LD_INT 2
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: LIST
25855: PPUSH
25856: CALL_OW 69
25860: PUSH
25861: FOR_IN
25862: IFFALSE 25923
// if IsSelected ( i ) then
25864: LD_VAR 0 2
25868: PPUSH
25869: CALL_OW 306
25873: IFFALSE 25921
// begin if i in hInvincible then
25875: LD_VAR 0 2
25879: PUSH
25880: LD_EXP 79
25884: IN
25885: IFFALSE 25905
// hInvincible := hInvincible diff i else
25887: LD_ADDR_EXP 79
25891: PUSH
25892: LD_EXP 79
25896: PUSH
25897: LD_VAR 0 2
25901: DIFF
25902: ST_TO_ADDR
25903: GO 25921
// hInvincible := hInvincible union i ;
25905: LD_ADDR_EXP 79
25909: PUSH
25910: LD_EXP 79
25914: PUSH
25915: LD_VAR 0 2
25919: UNION
25920: ST_TO_ADDR
// end ;
25921: GO 25861
25923: POP
25924: POP
// end ;
25925: LD_VAR 0 1
25929: RET
// export function hHackInvisible ; var i , j ; begin
25930: LD_INT 0
25932: PPUSH
25933: PPUSH
25934: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25935: LD_ADDR_VAR 0 2
25939: PUSH
25940: LD_INT 21
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PPUSH
25950: CALL_OW 69
25954: PUSH
25955: FOR_IN
25956: IFFALSE 25980
// if IsSelected ( i ) then
25958: LD_VAR 0 2
25962: PPUSH
25963: CALL_OW 306
25967: IFFALSE 25978
// ComForceInvisible ( i ) ;
25969: LD_VAR 0 2
25973: PPUSH
25974: CALL_OW 496
25978: GO 25955
25980: POP
25981: POP
// end ;
25982: LD_VAR 0 1
25986: RET
// export function hHackChangeYourSide ; begin
25987: LD_INT 0
25989: PPUSH
// if your_side = 8 then
25990: LD_OWVAR 2
25994: PUSH
25995: LD_INT 8
25997: EQUAL
25998: IFFALSE 26010
// your_side := 0 else
26000: LD_ADDR_OWVAR 2
26004: PUSH
26005: LD_INT 0
26007: ST_TO_ADDR
26008: GO 26024
// your_side := your_side + 1 ;
26010: LD_ADDR_OWVAR 2
26014: PUSH
26015: LD_OWVAR 2
26019: PUSH
26020: LD_INT 1
26022: PLUS
26023: ST_TO_ADDR
// end ;
26024: LD_VAR 0 1
26028: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26029: LD_INT 0
26031: PPUSH
26032: PPUSH
26033: PPUSH
// for i in all_units do
26034: LD_ADDR_VAR 0 2
26038: PUSH
26039: LD_OWVAR 3
26043: PUSH
26044: FOR_IN
26045: IFFALSE 26123
// if IsSelected ( i ) then
26047: LD_VAR 0 2
26051: PPUSH
26052: CALL_OW 306
26056: IFFALSE 26121
// begin j := GetSide ( i ) ;
26058: LD_ADDR_VAR 0 3
26062: PUSH
26063: LD_VAR 0 2
26067: PPUSH
26068: CALL_OW 255
26072: ST_TO_ADDR
// if j = 8 then
26073: LD_VAR 0 3
26077: PUSH
26078: LD_INT 8
26080: EQUAL
26081: IFFALSE 26093
// j := 0 else
26083: LD_ADDR_VAR 0 3
26087: PUSH
26088: LD_INT 0
26090: ST_TO_ADDR
26091: GO 26107
// j := j + 1 ;
26093: LD_ADDR_VAR 0 3
26097: PUSH
26098: LD_VAR 0 3
26102: PUSH
26103: LD_INT 1
26105: PLUS
26106: ST_TO_ADDR
// SetSide ( i , j ) ;
26107: LD_VAR 0 2
26111: PPUSH
26112: LD_VAR 0 3
26116: PPUSH
26117: CALL_OW 235
// end ;
26121: GO 26044
26123: POP
26124: POP
// end ;
26125: LD_VAR 0 1
26129: RET
// export function hHackFog ; begin
26130: LD_INT 0
26132: PPUSH
// FogOff ( true ) ;
26133: LD_INT 1
26135: PPUSH
26136: CALL_OW 344
// end ;
26140: LD_VAR 0 1
26144: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26145: LD_INT 0
26147: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26148: LD_VAR 0 1
26152: PPUSH
26153: LD_VAR 0 2
26157: PPUSH
26158: LD_VAR 0 3
26162: PPUSH
26163: LD_INT 1
26165: PPUSH
26166: LD_INT 1
26168: PPUSH
26169: CALL_OW 483
// CenterOnXY ( x , y ) ;
26173: LD_VAR 0 2
26177: PPUSH
26178: LD_VAR 0 3
26182: PPUSH
26183: CALL_OW 84
// end ;
26187: LD_VAR 0 4
26191: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26192: LD_INT 0
26194: PPUSH
26195: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26196: LD_VAR 0 1
26200: NOT
26201: IFTRUE 26220
26203: PUSH
26204: LD_VAR 0 2
26208: PPUSH
26209: LD_VAR 0 3
26213: PPUSH
26214: CALL_OW 488
26218: NOT
26219: OR
26220: IFTRUE 26255
26222: PUSH
26223: LD_VAR 0 1
26227: PPUSH
26228: CALL_OW 266
26232: PUSH
26233: LD_INT 3
26235: NONEQUAL
26236: IFFALSE 26254
26238: PUSH
26239: LD_VAR 0 1
26243: PPUSH
26244: CALL_OW 247
26248: PUSH
26249: LD_INT 1
26251: EQUAL
26252: NOT
26253: AND
26254: OR
26255: IFFALSE 26259
// exit ;
26257: GO 26541
// if GetType ( factory ) = unit_human then
26259: LD_VAR 0 1
26263: PPUSH
26264: CALL_OW 247
26268: PUSH
26269: LD_INT 1
26271: EQUAL
26272: IFFALSE 26289
// factory := IsInUnit ( factory ) ;
26274: LD_ADDR_VAR 0 1
26278: PUSH
26279: LD_VAR 0 1
26283: PPUSH
26284: CALL_OW 310
26288: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26289: LD_VAR 0 1
26293: PPUSH
26294: CALL_OW 266
26298: PUSH
26299: LD_INT 3
26301: NONEQUAL
26302: IFFALSE 26306
// exit ;
26304: GO 26541
// for i := 1 to Count ( factoryWaypoints ) do
26306: LD_ADDR_VAR 0 5
26310: PUSH
26311: DOUBLE
26312: LD_INT 1
26314: DEC
26315: ST_TO_ADDR
26316: LD_EXP 80
26320: PPUSH
26321: CALL 35273 0 1
26325: PUSH
26326: FOR_TO
26327: IFFALSE 26489
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26329: LD_VAR 0 2
26333: PPUSH
26334: LD_VAR 0 3
26338: PPUSH
26339: CALL_OW 428
26343: PUSH
26344: LD_EXP 80
26348: PUSH
26349: LD_VAR 0 5
26353: ARRAY
26354: PUSH
26355: LD_INT 2
26357: ARRAY
26358: EQUAL
26359: IFFALSE 26391
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26361: LD_ADDR_EXP 80
26365: PUSH
26366: LD_EXP 80
26370: PPUSH
26371: LD_VAR 0 5
26375: PPUSH
26376: CALL_OW 3
26380: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26381: CALL 26546 0 0
// exit ;
26385: POP
26386: POP
26387: GO 26541
// end else
26389: GO 26487
// if factory = factoryWaypoints [ i ] [ 2 ] then
26391: LD_VAR 0 1
26395: PUSH
26396: LD_EXP 80
26400: PUSH
26401: LD_VAR 0 5
26405: ARRAY
26406: PUSH
26407: LD_INT 2
26409: ARRAY
26410: EQUAL
26411: IFFALSE 26487
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26413: LD_ADDR_EXP 80
26417: PUSH
26418: LD_EXP 80
26422: PPUSH
26423: LD_VAR 0 5
26427: PPUSH
26428: CALL_OW 3
26432: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26433: LD_ADDR_EXP 80
26437: PUSH
26438: LD_EXP 80
26442: PPUSH
26443: LD_VAR 0 1
26447: PPUSH
26448: CALL_OW 255
26452: PUSH
26453: LD_VAR 0 1
26457: PUSH
26458: LD_VAR 0 2
26462: PUSH
26463: LD_VAR 0 3
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: PPUSH
26474: CALL 71205 0 2
26478: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26479: CALL 26546 0 0
// exit ;
26483: POP
26484: POP
26485: GO 26541
// end ; end ;
26487: GO 26326
26489: POP
26490: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26491: LD_ADDR_EXP 80
26495: PUSH
26496: LD_EXP 80
26500: PPUSH
26501: LD_VAR 0 1
26505: PPUSH
26506: CALL_OW 255
26510: PUSH
26511: LD_VAR 0 1
26515: PUSH
26516: LD_VAR 0 2
26520: PUSH
26521: LD_VAR 0 3
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: PPUSH
26532: CALL 71205 0 2
26536: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26537: CALL 26546 0 0
// end ;
26541: LD_VAR 0 4
26545: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26546: LD_INT 0
26548: PPUSH
26549: PPUSH
26550: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26551: LD_STRING resetFactoryWaypoint();
26553: PPUSH
26554: CALL_OW 559
// if factoryWaypoints then
26558: LD_EXP 80
26562: IFFALSE 26683
// begin list := factoryWaypoints ;
26564: LD_ADDR_VAR 0 3
26568: PUSH
26569: LD_EXP 80
26573: ST_TO_ADDR
// for i := 1 to list do
26574: LD_ADDR_VAR 0 2
26578: PUSH
26579: DOUBLE
26580: LD_INT 1
26582: DEC
26583: ST_TO_ADDR
26584: LD_VAR 0 3
26588: PUSH
26589: FOR_TO
26590: IFFALSE 26681
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26592: LD_STRING setFactoryWaypointXY(
26594: PUSH
26595: LD_VAR 0 3
26599: PUSH
26600: LD_VAR 0 2
26604: ARRAY
26605: PUSH
26606: LD_INT 1
26608: ARRAY
26609: STR
26610: PUSH
26611: LD_STRING ,
26613: STR
26614: PUSH
26615: LD_VAR 0 3
26619: PUSH
26620: LD_VAR 0 2
26624: ARRAY
26625: PUSH
26626: LD_INT 2
26628: ARRAY
26629: STR
26630: PUSH
26631: LD_STRING ,
26633: STR
26634: PUSH
26635: LD_VAR 0 3
26639: PUSH
26640: LD_VAR 0 2
26644: ARRAY
26645: PUSH
26646: LD_INT 3
26648: ARRAY
26649: STR
26650: PUSH
26651: LD_STRING ,
26653: STR
26654: PUSH
26655: LD_VAR 0 3
26659: PUSH
26660: LD_VAR 0 2
26664: ARRAY
26665: PUSH
26666: LD_INT 4
26668: ARRAY
26669: STR
26670: PUSH
26671: LD_STRING )
26673: STR
26674: PPUSH
26675: CALL_OW 559
26679: GO 26589
26681: POP
26682: POP
// end ; end ;
26683: LD_VAR 0 1
26687: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26688: LD_INT 0
26690: PPUSH
// if HexInfo ( x , y ) = warehouse then
26691: LD_VAR 0 2
26695: PPUSH
26696: LD_VAR 0 3
26700: PPUSH
26701: CALL_OW 428
26705: PUSH
26706: LD_VAR 0 1
26710: EQUAL
26711: IFFALSE 26738
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26713: LD_ADDR_EXP 82
26717: PUSH
26718: LD_EXP 82
26722: PPUSH
26723: LD_VAR 0 1
26727: PPUSH
26728: LD_INT 0
26730: PPUSH
26731: CALL_OW 1
26735: ST_TO_ADDR
26736: GO 26789
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26738: LD_ADDR_EXP 82
26742: PUSH
26743: LD_EXP 82
26747: PPUSH
26748: LD_VAR 0 1
26752: PPUSH
26753: LD_VAR 0 1
26757: PPUSH
26758: CALL_OW 255
26762: PUSH
26763: LD_VAR 0 1
26767: PUSH
26768: LD_VAR 0 2
26772: PUSH
26773: LD_VAR 0 3
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: PPUSH
26784: CALL_OW 1
26788: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26789: CALL 26798 0 0
// end ;
26793: LD_VAR 0 4
26797: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26798: LD_INT 0
26800: PPUSH
26801: PPUSH
26802: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26803: LD_STRING resetWarehouseGatheringPoints();
26805: PPUSH
26806: CALL_OW 559
// if warehouseGatheringPoints then
26810: LD_EXP 82
26814: IFFALSE 26940
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26816: LD_ADDR_VAR 0 3
26820: PUSH
26821: LD_EXP 82
26825: PPUSH
26826: CALL 75139 0 1
26830: ST_TO_ADDR
// for i := 1 to list do
26831: LD_ADDR_VAR 0 2
26835: PUSH
26836: DOUBLE
26837: LD_INT 1
26839: DEC
26840: ST_TO_ADDR
26841: LD_VAR 0 3
26845: PUSH
26846: FOR_TO
26847: IFFALSE 26938
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26849: LD_STRING setWarehouseGatheringPointXY(
26851: PUSH
26852: LD_VAR 0 3
26856: PUSH
26857: LD_VAR 0 2
26861: ARRAY
26862: PUSH
26863: LD_INT 1
26865: ARRAY
26866: STR
26867: PUSH
26868: LD_STRING ,
26870: STR
26871: PUSH
26872: LD_VAR 0 3
26876: PUSH
26877: LD_VAR 0 2
26881: ARRAY
26882: PUSH
26883: LD_INT 2
26885: ARRAY
26886: STR
26887: PUSH
26888: LD_STRING ,
26890: STR
26891: PUSH
26892: LD_VAR 0 3
26896: PUSH
26897: LD_VAR 0 2
26901: ARRAY
26902: PUSH
26903: LD_INT 3
26905: ARRAY
26906: STR
26907: PUSH
26908: LD_STRING ,
26910: STR
26911: PUSH
26912: LD_VAR 0 3
26916: PUSH
26917: LD_VAR 0 2
26921: ARRAY
26922: PUSH
26923: LD_INT 4
26925: ARRAY
26926: STR
26927: PUSH
26928: LD_STRING )
26930: STR
26931: PPUSH
26932: CALL_OW 559
26936: GO 26846
26938: POP
26939: POP
// end ; end ;
26940: LD_VAR 0 1
26944: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26945: LD_EXP 82
26949: IFFALSE 27644
26951: GO 26953
26953: DISABLE
26954: LD_INT 0
26956: PPUSH
26957: PPUSH
26958: PPUSH
26959: PPUSH
26960: PPUSH
26961: PPUSH
26962: PPUSH
26963: PPUSH
26964: PPUSH
// begin enable ;
26965: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26966: LD_ADDR_VAR 0 3
26970: PUSH
26971: LD_EXP 82
26975: PPUSH
26976: CALL 75139 0 1
26980: ST_TO_ADDR
// if not list then
26981: LD_VAR 0 3
26985: NOT
26986: IFFALSE 26990
// exit ;
26988: GO 27644
// for i := 1 to list do
26990: LD_ADDR_VAR 0 1
26994: PUSH
26995: DOUBLE
26996: LD_INT 1
26998: DEC
26999: ST_TO_ADDR
27000: LD_VAR 0 3
27004: PUSH
27005: FOR_TO
27006: IFFALSE 27642
// begin depot := list [ i ] [ 2 ] ;
27008: LD_ADDR_VAR 0 8
27012: PUSH
27013: LD_VAR 0 3
27017: PUSH
27018: LD_VAR 0 1
27022: ARRAY
27023: PUSH
27024: LD_INT 2
27026: ARRAY
27027: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27028: LD_ADDR_VAR 0 5
27032: PUSH
27033: LD_VAR 0 3
27037: PUSH
27038: LD_VAR 0 1
27042: ARRAY
27043: PUSH
27044: LD_INT 1
27046: ARRAY
27047: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27048: LD_VAR 0 8
27052: PPUSH
27053: CALL_OW 301
27057: IFTRUE 27076
27059: PUSH
27060: LD_VAR 0 5
27064: PUSH
27065: LD_VAR 0 8
27069: PPUSH
27070: CALL_OW 255
27074: NONEQUAL
27075: OR
27076: IFFALSE 27105
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27078: LD_ADDR_EXP 82
27082: PUSH
27083: LD_EXP 82
27087: PPUSH
27088: LD_VAR 0 8
27092: PPUSH
27093: LD_INT 0
27095: PPUSH
27096: CALL_OW 1
27100: ST_TO_ADDR
// exit ;
27101: POP
27102: POP
27103: GO 27644
// end ; x := list [ i ] [ 3 ] ;
27105: LD_ADDR_VAR 0 6
27109: PUSH
27110: LD_VAR 0 3
27114: PUSH
27115: LD_VAR 0 1
27119: ARRAY
27120: PUSH
27121: LD_INT 3
27123: ARRAY
27124: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27125: LD_ADDR_VAR 0 7
27129: PUSH
27130: LD_VAR 0 3
27134: PUSH
27135: LD_VAR 0 1
27139: ARRAY
27140: PUSH
27141: LD_INT 4
27143: ARRAY
27144: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27145: LD_ADDR_VAR 0 9
27149: PUSH
27150: LD_VAR 0 6
27154: PPUSH
27155: LD_VAR 0 7
27159: PPUSH
27160: LD_INT 16
27162: PPUSH
27163: CALL 73713 0 3
27167: ST_TO_ADDR
// if not cratesNearbyPoint then
27168: LD_VAR 0 9
27172: NOT
27173: IFFALSE 27179
// exit ;
27175: POP
27176: POP
27177: GO 27644
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27179: LD_ADDR_VAR 0 4
27183: PUSH
27184: LD_INT 22
27186: PUSH
27187: LD_VAR 0 5
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 3
27198: PUSH
27199: LD_INT 60
27201: PUSH
27202: EMPTY
27203: LIST
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 91
27211: PUSH
27212: LD_VAR 0 8
27216: PUSH
27217: LD_INT 6
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 2
27227: PUSH
27228: LD_INT 25
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 25
27240: PUSH
27241: LD_INT 16
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: LIST
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: PPUSH
27259: CALL_OW 69
27263: PUSH
27264: LD_VAR 0 8
27268: PPUSH
27269: CALL_OW 313
27273: PPUSH
27274: LD_INT 3
27276: PUSH
27277: LD_INT 60
27279: PUSH
27280: EMPTY
27281: LIST
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 2
27289: PUSH
27290: LD_INT 25
27292: PUSH
27293: LD_INT 2
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 25
27302: PUSH
27303: LD_INT 16
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: LIST
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PPUSH
27319: CALL_OW 72
27323: UNION
27324: ST_TO_ADDR
// if tmp then
27325: LD_VAR 0 4
27329: IFFALSE 27409
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27331: LD_ADDR_VAR 0 4
27335: PUSH
27336: LD_VAR 0 4
27340: PPUSH
27341: LD_INT 3
27343: PPUSH
27344: CALL 71520 0 2
27348: ST_TO_ADDR
// for j in tmp do
27349: LD_ADDR_VAR 0 2
27353: PUSH
27354: LD_VAR 0 4
27358: PUSH
27359: FOR_IN
27360: IFFALSE 27403
// begin if IsInUnit ( j ) then
27362: LD_VAR 0 2
27366: PPUSH
27367: CALL_OW 310
27371: IFFALSE 27382
// ComExit ( j ) ;
27373: LD_VAR 0 2
27377: PPUSH
27378: CALL 71603 0 1
// AddComCollect ( j , x , y ) ;
27382: LD_VAR 0 2
27386: PPUSH
27387: LD_VAR 0 6
27391: PPUSH
27392: LD_VAR 0 7
27396: PPUSH
27397: CALL_OW 177
// end ;
27401: GO 27359
27403: POP
27404: POP
// exit ;
27405: POP
27406: POP
27407: GO 27644
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27409: LD_ADDR_VAR 0 4
27413: PUSH
27414: LD_INT 22
27416: PUSH
27417: LD_VAR 0 5
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 91
27428: PUSH
27429: LD_VAR 0 8
27433: PUSH
27434: LD_INT 8
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 2
27444: PUSH
27445: LD_INT 34
27447: PUSH
27448: LD_INT 12
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 34
27457: PUSH
27458: LD_INT 51
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 34
27467: PUSH
27468: LD_INT 32
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 34
27477: PUSH
27478: LD_INT 89
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: LIST
27496: PPUSH
27497: CALL_OW 69
27501: ST_TO_ADDR
// if tmp then
27502: LD_VAR 0 4
27506: IFFALSE 27640
// begin for j in tmp do
27508: LD_ADDR_VAR 0 2
27512: PUSH
27513: LD_VAR 0 4
27517: PUSH
27518: FOR_IN
27519: IFFALSE 27638
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27521: LD_VAR 0 2
27525: PPUSH
27526: CALL_OW 262
27530: PUSH
27531: LD_INT 3
27533: EQUAL
27534: IFTRUE 27551
27536: PUSH
27537: LD_VAR 0 2
27541: PPUSH
27542: CALL_OW 261
27546: PUSH
27547: LD_INT 20
27549: GREATER
27550: OR
27551: IFFALSE 27565
27553: PUSH
27554: LD_VAR 0 2
27558: PPUSH
27559: CALL_OW 314
27563: NOT
27564: AND
27565: IFFALSE 27595
27567: PUSH
27568: LD_VAR 0 2
27572: PPUSH
27573: CALL_OW 263
27577: PUSH
27578: LD_INT 1
27580: NONEQUAL
27581: IFTRUE 27594
27583: PUSH
27584: LD_VAR 0 2
27588: PPUSH
27589: CALL_OW 311
27593: OR
27594: AND
27595: IFFALSE 27636
// begin ComCollect ( j , x , y ) ;
27597: LD_VAR 0 2
27601: PPUSH
27602: LD_VAR 0 6
27606: PPUSH
27607: LD_VAR 0 7
27611: PPUSH
27612: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27616: LD_VAR 0 2
27620: PPUSH
27621: LD_VAR 0 8
27625: PPUSH
27626: CALL_OW 172
// exit ;
27630: POP
27631: POP
27632: POP
27633: POP
27634: GO 27644
// end ;
27636: GO 27518
27638: POP
27639: POP
// end ; end ;
27640: GO 27005
27642: POP
27643: POP
// end ; end_of_file
27644: PPOPN 9
27646: END
// export function SOS_UnitDestroyed ( un ) ; begin
27647: LD_INT 0
27649: PPUSH
// ComRadiation ( un ) ;
27650: LD_VAR 0 1
27654: PPUSH
27655: CALL 28736 0 1
// end ;
27659: LD_VAR 0 2
27663: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27664: LD_INT 0
27666: PPUSH
// ComRadiation ( un ) ;
27667: LD_VAR 0 1
27671: PPUSH
27672: CALL 28736 0 1
// end ;
27676: LD_VAR 0 2
27680: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27681: LD_INT 0
27683: PPUSH
// end ;
27684: LD_VAR 0 4
27688: RET
// export function SOS_Command ( cmd ) ; begin
27689: LD_INT 0
27691: PPUSH
// end ;
27692: LD_VAR 0 2
27696: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27697: LD_INT 0
27699: PPUSH
// end ;
27700: LD_VAR 0 6
27704: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
27705: LD_INT 0
27707: PPUSH
27708: PPUSH
27709: PPUSH
27710: PPUSH
// if not vehicle or not factory then
27711: LD_VAR 0 1
27715: NOT
27716: IFTRUE 27725
27718: PUSH
27719: LD_VAR 0 2
27723: NOT
27724: OR
27725: IFFALSE 27729
// exit ;
27727: GO 28311
// if not factoryWaypoints then
27729: LD_EXP 80
27733: NOT
27734: IFFALSE 27738
// exit ;
27736: GO 28311
// for i := 1 to Count ( factoryWaypoints ) do
27738: LD_ADDR_VAR 0 4
27742: PUSH
27743: DOUBLE
27744: LD_INT 1
27746: DEC
27747: ST_TO_ADDR
27748: LD_EXP 80
27752: PPUSH
27753: CALL 35273 0 1
27757: PUSH
27758: FOR_TO
27759: IFFALSE 28309
// if factoryWaypoints [ i ] [ 2 ] = factory then
27761: LD_EXP 80
27765: PUSH
27766: LD_VAR 0 4
27770: ARRAY
27771: PUSH
27772: LD_INT 2
27774: ARRAY
27775: PUSH
27776: LD_VAR 0 2
27780: EQUAL
27781: IFFALSE 28307
// begin if GetControl ( vehicle ) = control_manual then
27783: LD_VAR 0 1
27787: PPUSH
27788: CALL_OW 263
27792: PUSH
27793: LD_INT 1
27795: EQUAL
27796: IFFALSE 28160
// begin driver := IsDrivenBy ( vehicle ) ;
27798: LD_ADDR_VAR 0 5
27802: PUSH
27803: LD_VAR 0 1
27807: PPUSH
27808: CALL_OW 311
27812: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27813: LD_VAR 0 5
27817: PUSH
27818: LD_EXP 81
27822: IN
27823: IFTRUE 27837
27825: PUSH
27826: LD_VAR 0 1
27830: PUSH
27831: LD_EXP 81
27835: IN
27836: OR
27837: IFFALSE 27843
// exit ;
27839: POP
27840: POP
27841: GO 28311
// if not HasTask ( driver ) then
27843: LD_VAR 0 5
27847: PPUSH
27848: CALL_OW 314
27852: NOT
27853: IFFALSE 28158
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27855: LD_ADDR_EXP 81
27859: PUSH
27860: LD_EXP 81
27864: PPUSH
27865: LD_VAR 0 5
27869: PPUSH
27870: CALL 71205 0 2
27874: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27875: LD_ADDR_EXP 81
27879: PUSH
27880: LD_EXP 81
27884: PPUSH
27885: LD_VAR 0 1
27889: PPUSH
27890: CALL 71205 0 2
27894: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27895: LD_ADDR_VAR 0 6
27899: PUSH
27900: LD_EXP 80
27904: PUSH
27905: LD_VAR 0 4
27909: ARRAY
27910: PUSH
27911: LD_INT 3
27913: ARRAY
27914: PPUSH
27915: LD_EXP 80
27919: PUSH
27920: LD_VAR 0 4
27924: ARRAY
27925: PUSH
27926: LD_INT 4
27928: ARRAY
27929: PPUSH
27930: CALL_OW 428
27934: ST_TO_ADDR
// if hex then
27935: LD_VAR 0 6
27939: IFFALSE 27957
// ComMoveUnit ( driver , hex ) else
27941: LD_VAR 0 5
27945: PPUSH
27946: LD_VAR 0 6
27950: PPUSH
27951: CALL_OW 112
27955: GO 28041
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27957: LD_VAR 0 1
27961: PPUSH
27962: LD_EXP 80
27966: PUSH
27967: LD_VAR 0 4
27971: ARRAY
27972: PUSH
27973: LD_INT 3
27975: ARRAY
27976: PPUSH
27977: LD_EXP 80
27981: PUSH
27982: LD_VAR 0 4
27986: ARRAY
27987: PUSH
27988: LD_INT 4
27990: ARRAY
27991: PPUSH
27992: CALL_OW 297
27996: PUSH
27997: LD_INT 0
27999: GREATER
28000: IFFALSE 28041
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28002: LD_VAR 0 5
28006: PPUSH
28007: LD_EXP 80
28011: PUSH
28012: LD_VAR 0 4
28016: ARRAY
28017: PUSH
28018: LD_INT 3
28020: ARRAY
28021: PPUSH
28022: LD_EXP 80
28026: PUSH
28027: LD_VAR 0 4
28031: ARRAY
28032: PUSH
28033: LD_INT 4
28035: ARRAY
28036: PPUSH
28037: CALL_OW 111
// AddComExitVehicle ( driver ) ;
28041: LD_VAR 0 5
28045: PPUSH
28046: CALL_OW 181
// if Multiplayer then
28050: LD_OWVAR 4
28054: IFFALSE 28103
// begin repeat wait ( 10 ) ;
28056: LD_INT 10
28058: PPUSH
28059: CALL_OW 67
// until not IsInUnit ( driver ) ;
28063: LD_VAR 0 5
28067: PPUSH
28068: CALL_OW 310
28072: NOT
28073: IFFALSE 28056
// if not HasTask ( driver ) then
28075: LD_VAR 0 5
28079: PPUSH
28080: CALL_OW 314
28084: NOT
28085: IFFALSE 28101
// ComEnterUnit ( driver , factory ) ;
28087: LD_VAR 0 5
28091: PPUSH
28092: LD_VAR 0 2
28096: PPUSH
28097: CALL_OW 120
// end else
28101: GO 28117
// AddComEnterUnit ( driver , factory ) ;
28103: LD_VAR 0 5
28107: PPUSH
28108: LD_VAR 0 2
28112: PPUSH
28113: CALL_OW 180
// wait ( 0 0$1 ) ;
28117: LD_INT 35
28119: PPUSH
28120: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
28124: LD_ADDR_EXP 81
28128: PUSH
28129: LD_EXP 81
28133: PUSH
28134: LD_VAR 0 5
28138: DIFF
28139: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
28140: LD_ADDR_EXP 81
28144: PUSH
28145: LD_EXP 81
28149: PUSH
28150: LD_VAR 0 1
28154: DIFF
28155: ST_TO_ADDR
// break ;
28156: GO 28309
// end ; end else
28158: GO 28307
// if GetControl ( vehicle ) = control_remote then
28160: LD_VAR 0 1
28164: PPUSH
28165: CALL_OW 263
28169: PUSH
28170: LD_INT 2
28172: EQUAL
28173: IFFALSE 28259
// begin wait ( 0 0$2 ) ;
28175: LD_INT 70
28177: PPUSH
28178: CALL_OW 67
// repeat wait ( 10 ) ;
28182: LD_INT 10
28184: PPUSH
28185: CALL_OW 67
// Connect ( vehicle ) ;
28189: LD_VAR 0 1
28193: PPUSH
28194: CALL 41517 0 1
// until IsControledBy ( vehicle ) ;
28198: LD_VAR 0 1
28202: PPUSH
28203: CALL_OW 312
28207: IFFALSE 28182
// wait ( 10 ) ;
28209: LD_INT 10
28211: PPUSH
28212: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28216: LD_VAR 0 1
28220: PPUSH
28221: LD_EXP 80
28225: PUSH
28226: LD_VAR 0 4
28230: ARRAY
28231: PUSH
28232: LD_INT 3
28234: ARRAY
28235: PPUSH
28236: LD_EXP 80
28240: PUSH
28241: LD_VAR 0 4
28245: ARRAY
28246: PUSH
28247: LD_INT 4
28249: ARRAY
28250: PPUSH
28251: CALL_OW 111
// break ;
28255: GO 28309
// end else
28257: GO 28307
// begin wait ( 0 0$3 ) ;
28259: LD_INT 105
28261: PPUSH
28262: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28266: LD_VAR 0 1
28270: PPUSH
28271: LD_EXP 80
28275: PUSH
28276: LD_VAR 0 4
28280: ARRAY
28281: PUSH
28282: LD_INT 3
28284: ARRAY
28285: PPUSH
28286: LD_EXP 80
28290: PUSH
28291: LD_VAR 0 4
28295: ARRAY
28296: PUSH
28297: LD_INT 4
28299: ARRAY
28300: PPUSH
28301: CALL_OW 111
// break ;
28305: GO 28309
// end ; end ;
28307: GO 27758
28309: POP
28310: POP
// end ;
28311: LD_VAR 0 3
28315: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28316: LD_INT 0
28318: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28319: LD_VAR 0 1
28323: PUSH
28324: LD_INT 250
28326: EQUAL
28327: IFFALSE 28344
28329: PUSH
28330: LD_VAR 0 2
28334: PPUSH
28335: CALL_OW 264
28339: PUSH
28340: LD_INT 81
28342: EQUAL
28343: AND
28344: IFFALSE 28365
// MinerPlaceMine ( unit , x , y ) ;
28346: LD_VAR 0 2
28350: PPUSH
28351: LD_VAR 0 4
28355: PPUSH
28356: LD_VAR 0 5
28360: PPUSH
28361: CALL 31497 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28365: LD_VAR 0 1
28369: PUSH
28370: LD_INT 251
28372: EQUAL
28373: IFFALSE 28390
28375: PUSH
28376: LD_VAR 0 2
28380: PPUSH
28381: CALL_OW 264
28385: PUSH
28386: LD_INT 81
28388: EQUAL
28389: AND
28390: IFFALSE 28411
// MinerDetonateMine ( unit , x , y ) ;
28392: LD_VAR 0 2
28396: PPUSH
28397: LD_VAR 0 4
28401: PPUSH
28402: LD_VAR 0 5
28406: PPUSH
28407: CALL 31776 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28411: LD_VAR 0 1
28415: PUSH
28416: LD_INT 252
28418: EQUAL
28419: IFFALSE 28436
28421: PUSH
28422: LD_VAR 0 2
28426: PPUSH
28427: CALL_OW 264
28431: PUSH
28432: LD_INT 81
28434: EQUAL
28435: AND
28436: IFFALSE 28457
// MinerCreateMinefield ( unit , x , y ) ;
28438: LD_VAR 0 2
28442: PPUSH
28443: LD_VAR 0 4
28447: PPUSH
28448: LD_VAR 0 5
28452: PPUSH
28453: CALL 32195 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28457: LD_VAR 0 1
28461: PUSH
28462: LD_INT 253
28464: EQUAL
28465: IFFALSE 28482
28467: PUSH
28468: LD_VAR 0 2
28472: PPUSH
28473: CALL_OW 257
28477: PUSH
28478: LD_INT 5
28480: EQUAL
28481: AND
28482: IFFALSE 28503
// ComBinocular ( unit , x , y ) ;
28484: LD_VAR 0 2
28488: PPUSH
28489: LD_VAR 0 4
28493: PPUSH
28494: LD_VAR 0 5
28498: PPUSH
28499: CALL 32570 0 3
// if selectedUnit then
28503: LD_VAR 0 3
28507: IFFALSE 28567
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28509: LD_VAR 0 1
28513: PUSH
28514: LD_INT 254
28516: EQUAL
28517: IFFALSE 28534
28519: PUSH
28520: LD_VAR 0 2
28524: PPUSH
28525: CALL_OW 264
28529: PUSH
28530: LD_INT 99
28532: EQUAL
28533: AND
28534: IFFALSE 28551
28536: PUSH
28537: LD_VAR 0 3
28541: PPUSH
28542: CALL_OW 263
28546: PUSH
28547: LD_INT 3
28549: EQUAL
28550: AND
28551: IFFALSE 28567
// HackDestroyVehicle ( unit , selectedUnit ) ;
28553: LD_VAR 0 2
28557: PPUSH
28558: LD_VAR 0 3
28562: PPUSH
28563: CALL 30857 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28567: LD_VAR 0 1
28571: PUSH
28572: LD_INT 255
28574: EQUAL
28575: IFFALSE 28599
28577: PUSH
28578: LD_VAR 0 2
28582: PPUSH
28583: CALL_OW 264
28587: PUSH
28588: LD_INT 14
28590: PUSH
28591: LD_INT 53
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: IN
28598: AND
28599: IFFALSE 28617
28601: PUSH
28602: LD_VAR 0 4
28606: PPUSH
28607: LD_VAR 0 5
28611: PPUSH
28612: CALL_OW 488
28616: AND
28617: IFFALSE 28641
// CutTreeXYR ( unit , x , y , 12 ) ;
28619: LD_VAR 0 2
28623: PPUSH
28624: LD_VAR 0 4
28628: PPUSH
28629: LD_VAR 0 5
28633: PPUSH
28634: LD_INT 12
28636: PPUSH
28637: CALL 28832 0 4
// if cmd = 256 then
28641: LD_VAR 0 1
28645: PUSH
28646: LD_INT 256
28648: EQUAL
28649: IFFALSE 28670
// SetFactoryWaypoint ( unit , x , y ) ;
28651: LD_VAR 0 2
28655: PPUSH
28656: LD_VAR 0 4
28660: PPUSH
28661: LD_VAR 0 5
28665: PPUSH
28666: CALL 26192 0 3
// if cmd = 257 then
28670: LD_VAR 0 1
28674: PUSH
28675: LD_INT 257
28677: EQUAL
28678: IFFALSE 28699
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28680: LD_VAR 0 2
28684: PPUSH
28685: LD_VAR 0 4
28689: PPUSH
28690: LD_VAR 0 5
28694: PPUSH
28695: CALL 26688 0 3
// if cmd = 258 then
28699: LD_VAR 0 1
28703: PUSH
28704: LD_INT 258
28706: EQUAL
28707: IFFALSE 28731
// BurnTreeXYR ( unit , x , y , 8 ) ;
28709: LD_VAR 0 2
28713: PPUSH
28714: LD_VAR 0 4
28718: PPUSH
28719: LD_VAR 0 5
28723: PPUSH
28724: LD_INT 8
28726: PPUSH
28727: CALL 29232 0 4
// end ;
28731: LD_VAR 0 6
28735: RET
// export function ComRadiation ( un ) ; var eff ; begin
28736: LD_INT 0
28738: PPUSH
28739: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28740: LD_VAR 0 1
28744: PPUSH
28745: CALL_OW 264
28749: PUSH
28750: LD_INT 91
28752: NONEQUAL
28753: IFFALSE 28757
// exit ;
28755: GO 28827
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28757: LD_INT 68
28759: PPUSH
28760: LD_VAR 0 1
28764: PPUSH
28765: CALL_OW 255
28769: PPUSH
28770: CALL_OW 321
28774: PUSH
28775: LD_INT 2
28777: EQUAL
28778: IFFALSE 28790
// eff := 50 else
28780: LD_ADDR_VAR 0 3
28784: PUSH
28785: LD_INT 50
28787: ST_TO_ADDR
28788: GO 28798
// eff := 25 ;
28790: LD_ADDR_VAR 0 3
28794: PUSH
28795: LD_INT 25
28797: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28798: LD_VAR 0 1
28802: PPUSH
28803: CALL_OW 250
28807: PPUSH
28808: LD_VAR 0 1
28812: PPUSH
28813: CALL_OW 251
28817: PPUSH
28818: LD_VAR 0 3
28822: PPUSH
28823: CALL_OW 495
// end ;
28827: LD_VAR 0 2
28831: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28832: LD_INT 0
28834: PPUSH
28835: PPUSH
28836: PPUSH
28837: PPUSH
28838: PPUSH
28839: PPUSH
28840: PPUSH
28841: PPUSH
28842: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28843: LD_VAR 0 1
28847: PPUSH
28848: CALL_OW 302
28852: NOT
28853: IFTRUE 28872
28855: PUSH
28856: LD_VAR 0 2
28860: PPUSH
28861: LD_VAR 0 3
28865: PPUSH
28866: CALL_OW 488
28870: NOT
28871: OR
28872: IFTRUE 28881
28874: PUSH
28875: LD_VAR 0 4
28879: NOT
28880: OR
28881: IFFALSE 28885
// exit ;
28883: GO 29227
// list := [ ] ;
28885: LD_ADDR_VAR 0 13
28889: PUSH
28890: EMPTY
28891: ST_TO_ADDR
// if x - r < 0 then
28892: LD_VAR 0 2
28896: PUSH
28897: LD_VAR 0 4
28901: MINUS
28902: PUSH
28903: LD_INT 0
28905: LESS
28906: IFFALSE 28918
// min_x := 0 else
28908: LD_ADDR_VAR 0 7
28912: PUSH
28913: LD_INT 0
28915: ST_TO_ADDR
28916: GO 28934
// min_x := x - r ;
28918: LD_ADDR_VAR 0 7
28922: PUSH
28923: LD_VAR 0 2
28927: PUSH
28928: LD_VAR 0 4
28932: MINUS
28933: ST_TO_ADDR
// if y - r < 0 then
28934: LD_VAR 0 3
28938: PUSH
28939: LD_VAR 0 4
28943: MINUS
28944: PUSH
28945: LD_INT 0
28947: LESS
28948: IFFALSE 28960
// min_y := 0 else
28950: LD_ADDR_VAR 0 8
28954: PUSH
28955: LD_INT 0
28957: ST_TO_ADDR
28958: GO 28976
// min_y := y - r ;
28960: LD_ADDR_VAR 0 8
28964: PUSH
28965: LD_VAR 0 3
28969: PUSH
28970: LD_VAR 0 4
28974: MINUS
28975: ST_TO_ADDR
// max_x := x + r ;
28976: LD_ADDR_VAR 0 9
28980: PUSH
28981: LD_VAR 0 2
28985: PUSH
28986: LD_VAR 0 4
28990: PLUS
28991: ST_TO_ADDR
// max_y := y + r ;
28992: LD_ADDR_VAR 0 10
28996: PUSH
28997: LD_VAR 0 3
29001: PUSH
29002: LD_VAR 0 4
29006: PLUS
29007: ST_TO_ADDR
// for _x = min_x to max_x do
29008: LD_ADDR_VAR 0 11
29012: PUSH
29013: DOUBLE
29014: LD_VAR 0 7
29018: DEC
29019: ST_TO_ADDR
29020: LD_VAR 0 9
29024: PUSH
29025: FOR_TO
29026: IFFALSE 29145
// for _y = min_y to max_y do
29028: LD_ADDR_VAR 0 12
29032: PUSH
29033: DOUBLE
29034: LD_VAR 0 8
29038: DEC
29039: ST_TO_ADDR
29040: LD_VAR 0 10
29044: PUSH
29045: FOR_TO
29046: IFFALSE 29141
// begin if not ValidHex ( _x , _y ) then
29048: LD_VAR 0 11
29052: PPUSH
29053: LD_VAR 0 12
29057: PPUSH
29058: CALL_OW 488
29062: NOT
29063: IFFALSE 29067
// continue ;
29065: GO 29045
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29067: LD_VAR 0 11
29071: PPUSH
29072: LD_VAR 0 12
29076: PPUSH
29077: CALL_OW 351
29081: IFFALSE 29099
29083: PUSH
29084: LD_VAR 0 11
29088: PPUSH
29089: LD_VAR 0 12
29093: PPUSH
29094: CALL_OW 554
29098: AND
29099: IFFALSE 29139
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29101: LD_ADDR_VAR 0 13
29105: PUSH
29106: LD_VAR 0 13
29110: PPUSH
29111: LD_VAR 0 13
29115: PUSH
29116: LD_INT 1
29118: PLUS
29119: PPUSH
29120: LD_VAR 0 11
29124: PUSH
29125: LD_VAR 0 12
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PPUSH
29134: CALL_OW 2
29138: ST_TO_ADDR
// end ;
29139: GO 29045
29141: POP
29142: POP
29143: GO 29025
29145: POP
29146: POP
// if not list then
29147: LD_VAR 0 13
29151: NOT
29152: IFFALSE 29156
// exit ;
29154: GO 29227
// for i in list do
29156: LD_ADDR_VAR 0 6
29160: PUSH
29161: LD_VAR 0 13
29165: PUSH
29166: FOR_IN
29167: IFFALSE 29225
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29169: LD_VAR 0 1
29173: PPUSH
29174: LD_STRING M
29176: PUSH
29177: LD_VAR 0 6
29181: PUSH
29182: LD_INT 1
29184: ARRAY
29185: PUSH
29186: LD_VAR 0 6
29190: PUSH
29191: LD_INT 2
29193: ARRAY
29194: PUSH
29195: LD_INT 0
29197: PUSH
29198: LD_INT 0
29200: PUSH
29201: LD_INT 0
29203: PUSH
29204: LD_INT 0
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: PUSH
29216: EMPTY
29217: LIST
29218: PPUSH
29219: CALL_OW 447
29223: GO 29166
29225: POP
29226: POP
// end ;
29227: LD_VAR 0 5
29231: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
29232: LD_INT 0
29234: PPUSH
29235: PPUSH
29236: PPUSH
29237: PPUSH
29238: PPUSH
29239: PPUSH
29240: PPUSH
29241: PPUSH
29242: PPUSH
29243: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29244: LD_VAR 0 1
29248: PPUSH
29249: CALL_OW 302
29253: NOT
29254: IFTRUE 29273
29256: PUSH
29257: LD_VAR 0 2
29261: PPUSH
29262: LD_VAR 0 3
29266: PPUSH
29267: CALL_OW 488
29271: NOT
29272: OR
29273: IFTRUE 29282
29275: PUSH
29276: LD_VAR 0 4
29280: NOT
29281: OR
29282: IFFALSE 29286
// exit ;
29284: GO 29803
// list := [ ] ;
29286: LD_ADDR_VAR 0 13
29290: PUSH
29291: EMPTY
29292: ST_TO_ADDR
// if x - r < 0 then
29293: LD_VAR 0 2
29297: PUSH
29298: LD_VAR 0 4
29302: MINUS
29303: PUSH
29304: LD_INT 0
29306: LESS
29307: IFFALSE 29319
// min_x := 0 else
29309: LD_ADDR_VAR 0 7
29313: PUSH
29314: LD_INT 0
29316: ST_TO_ADDR
29317: GO 29335
// min_x := x - r ;
29319: LD_ADDR_VAR 0 7
29323: PUSH
29324: LD_VAR 0 2
29328: PUSH
29329: LD_VAR 0 4
29333: MINUS
29334: ST_TO_ADDR
// if y - r < 0 then
29335: LD_VAR 0 3
29339: PUSH
29340: LD_VAR 0 4
29344: MINUS
29345: PUSH
29346: LD_INT 0
29348: LESS
29349: IFFALSE 29361
// min_y := 0 else
29351: LD_ADDR_VAR 0 8
29355: PUSH
29356: LD_INT 0
29358: ST_TO_ADDR
29359: GO 29377
// min_y := y - r ;
29361: LD_ADDR_VAR 0 8
29365: PUSH
29366: LD_VAR 0 3
29370: PUSH
29371: LD_VAR 0 4
29375: MINUS
29376: ST_TO_ADDR
// max_x := x + r ;
29377: LD_ADDR_VAR 0 9
29381: PUSH
29382: LD_VAR 0 2
29386: PUSH
29387: LD_VAR 0 4
29391: PLUS
29392: ST_TO_ADDR
// max_y := y + r ;
29393: LD_ADDR_VAR 0 10
29397: PUSH
29398: LD_VAR 0 3
29402: PUSH
29403: LD_VAR 0 4
29407: PLUS
29408: ST_TO_ADDR
// for _x = min_x to max_x do
29409: LD_ADDR_VAR 0 11
29413: PUSH
29414: DOUBLE
29415: LD_VAR 0 7
29419: DEC
29420: ST_TO_ADDR
29421: LD_VAR 0 9
29425: PUSH
29426: FOR_TO
29427: IFFALSE 29546
// for _y = min_y to max_y do
29429: LD_ADDR_VAR 0 12
29433: PUSH
29434: DOUBLE
29435: LD_VAR 0 8
29439: DEC
29440: ST_TO_ADDR
29441: LD_VAR 0 10
29445: PUSH
29446: FOR_TO
29447: IFFALSE 29542
// begin if not ValidHex ( _x , _y ) then
29449: LD_VAR 0 11
29453: PPUSH
29454: LD_VAR 0 12
29458: PPUSH
29459: CALL_OW 488
29463: NOT
29464: IFFALSE 29468
// continue ;
29466: GO 29446
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29468: LD_VAR 0 11
29472: PPUSH
29473: LD_VAR 0 12
29477: PPUSH
29478: CALL_OW 351
29482: IFFALSE 29500
29484: PUSH
29485: LD_VAR 0 11
29489: PPUSH
29490: LD_VAR 0 12
29494: PPUSH
29495: CALL_OW 554
29499: AND
29500: IFFALSE 29540
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29502: LD_ADDR_VAR 0 13
29506: PUSH
29507: LD_VAR 0 13
29511: PPUSH
29512: LD_VAR 0 13
29516: PUSH
29517: LD_INT 1
29519: PLUS
29520: PPUSH
29521: LD_VAR 0 11
29525: PUSH
29526: LD_VAR 0 12
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PPUSH
29535: CALL_OW 2
29539: ST_TO_ADDR
// end ;
29540: GO 29446
29542: POP
29543: POP
29544: GO 29426
29546: POP
29547: POP
// if not list then
29548: LD_VAR 0 13
29552: NOT
29553: IFFALSE 29557
// exit ;
29555: GO 29803
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29557: LD_ADDR_VAR 0 13
29561: PUSH
29562: LD_VAR 0 1
29566: PPUSH
29567: LD_VAR 0 13
29571: PPUSH
29572: LD_INT 1
29574: PPUSH
29575: LD_INT 1
29577: PPUSH
29578: CALL 38645 0 4
29582: ST_TO_ADDR
// ComStop ( flame ) ;
29583: LD_VAR 0 1
29587: PPUSH
29588: CALL_OW 141
// for i in list do
29592: LD_ADDR_VAR 0 6
29596: PUSH
29597: LD_VAR 0 13
29601: PUSH
29602: FOR_IN
29603: IFFALSE 29634
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29605: LD_VAR 0 1
29609: PPUSH
29610: LD_VAR 0 6
29614: PUSH
29615: LD_INT 1
29617: ARRAY
29618: PPUSH
29619: LD_VAR 0 6
29623: PUSH
29624: LD_INT 2
29626: ARRAY
29627: PPUSH
29628: CALL_OW 176
29632: GO 29602
29634: POP
29635: POP
// repeat wait ( 0 0$1 ) ;
29636: LD_INT 35
29638: PPUSH
29639: CALL_OW 67
// task := GetTaskList ( flame ) ;
29643: LD_ADDR_VAR 0 14
29647: PUSH
29648: LD_VAR 0 1
29652: PPUSH
29653: CALL_OW 437
29657: ST_TO_ADDR
// if not task then
29658: LD_VAR 0 14
29662: NOT
29663: IFFALSE 29667
// exit ;
29665: GO 29803
// if task [ 1 ] [ 1 ] <> | then
29667: LD_VAR 0 14
29671: PUSH
29672: LD_INT 1
29674: ARRAY
29675: PUSH
29676: LD_INT 1
29678: ARRAY
29679: PUSH
29680: LD_STRING |
29682: NONEQUAL
29683: IFFALSE 29687
// exit ;
29685: GO 29803
// _x := task [ 1 ] [ 2 ] ;
29687: LD_ADDR_VAR 0 11
29691: PUSH
29692: LD_VAR 0 14
29696: PUSH
29697: LD_INT 1
29699: ARRAY
29700: PUSH
29701: LD_INT 2
29703: ARRAY
29704: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29705: LD_ADDR_VAR 0 12
29709: PUSH
29710: LD_VAR 0 14
29714: PUSH
29715: LD_INT 1
29717: ARRAY
29718: PUSH
29719: LD_INT 3
29721: ARRAY
29722: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29723: LD_VAR 0 11
29727: PPUSH
29728: LD_VAR 0 12
29732: PPUSH
29733: CALL_OW 351
29737: NOT
29738: IFTRUE 29757
29740: PUSH
29741: LD_VAR 0 11
29745: PPUSH
29746: LD_VAR 0 12
29750: PPUSH
29751: CALL_OW 554
29755: NOT
29756: OR
29757: IFFALSE 29791
// begin task := Delete ( task , 1 ) ;
29759: LD_ADDR_VAR 0 14
29763: PUSH
29764: LD_VAR 0 14
29768: PPUSH
29769: LD_INT 1
29771: PPUSH
29772: CALL_OW 3
29776: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29777: LD_VAR 0 1
29781: PPUSH
29782: LD_VAR 0 14
29786: PPUSH
29787: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29791: LD_VAR 0 1
29795: PPUSH
29796: CALL_OW 314
29800: NOT
29801: IFFALSE 29636
// end ;
29803: LD_VAR 0 5
29807: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29808: LD_EXP 84
29812: NOT
29813: IFFALSE 29863
29815: GO 29817
29817: DISABLE
// begin initHack := true ;
29818: LD_ADDR_EXP 84
29822: PUSH
29823: LD_INT 1
29825: ST_TO_ADDR
// hackTanks := [ ] ;
29826: LD_ADDR_EXP 85
29830: PUSH
29831: EMPTY
29832: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29833: LD_ADDR_EXP 86
29837: PUSH
29838: EMPTY
29839: ST_TO_ADDR
// hackLimit := 3 ;
29840: LD_ADDR_EXP 87
29844: PUSH
29845: LD_INT 3
29847: ST_TO_ADDR
// hackDist := 12 ;
29848: LD_ADDR_EXP 88
29852: PUSH
29853: LD_INT 12
29855: ST_TO_ADDR
// hackCounter := [ ] ;
29856: LD_ADDR_EXP 89
29860: PUSH
29861: EMPTY
29862: ST_TO_ADDR
// end ;
29863: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29864: LD_EXP 84
29868: IFFALSE 29886
29870: PUSH
29871: LD_INT 34
29873: PUSH
29874: LD_INT 99
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PPUSH
29881: CALL_OW 69
29885: AND
29886: IFFALSE 30139
29888: GO 29890
29890: DISABLE
29891: LD_INT 0
29893: PPUSH
29894: PPUSH
// begin enable ;
29895: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29896: LD_ADDR_VAR 0 1
29900: PUSH
29901: LD_INT 34
29903: PUSH
29904: LD_INT 99
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PPUSH
29911: CALL_OW 69
29915: PUSH
29916: FOR_IN
29917: IFFALSE 30137
// begin if not i in hackTanks then
29919: LD_VAR 0 1
29923: PUSH
29924: LD_EXP 85
29928: IN
29929: NOT
29930: IFFALSE 30013
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29932: LD_ADDR_EXP 85
29936: PUSH
29937: LD_EXP 85
29941: PPUSH
29942: LD_EXP 85
29946: PUSH
29947: LD_INT 1
29949: PLUS
29950: PPUSH
29951: LD_VAR 0 1
29955: PPUSH
29956: CALL_OW 1
29960: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29961: LD_ADDR_EXP 86
29965: PUSH
29966: LD_EXP 86
29970: PPUSH
29971: LD_EXP 86
29975: PUSH
29976: LD_INT 1
29978: PLUS
29979: PPUSH
29980: EMPTY
29981: PPUSH
29982: CALL_OW 1
29986: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29987: LD_ADDR_EXP 89
29991: PUSH
29992: LD_EXP 89
29996: PPUSH
29997: LD_EXP 89
30001: PUSH
30002: LD_INT 1
30004: PLUS
30005: PPUSH
30006: EMPTY
30007: PPUSH
30008: CALL_OW 1
30012: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30013: LD_VAR 0 1
30017: PPUSH
30018: CALL_OW 302
30022: NOT
30023: IFFALSE 30036
// begin HackUnlinkAll ( i ) ;
30025: LD_VAR 0 1
30029: PPUSH
30030: CALL 30142 0 1
// continue ;
30034: GO 29916
// end ; HackCheckCapturedStatus ( i ) ;
30036: LD_VAR 0 1
30040: PPUSH
30041: CALL 30587 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30045: LD_ADDR_VAR 0 2
30049: PUSH
30050: LD_INT 81
30052: PUSH
30053: LD_VAR 0 1
30057: PPUSH
30058: CALL_OW 255
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 33
30069: PUSH
30070: LD_INT 3
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 91
30079: PUSH
30080: LD_VAR 0 1
30084: PUSH
30085: LD_EXP 88
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 50
30097: PUSH
30098: EMPTY
30099: LIST
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: PPUSH
30107: CALL_OW 69
30111: ST_TO_ADDR
// if not tmp then
30112: LD_VAR 0 2
30116: NOT
30117: IFFALSE 30121
// continue ;
30119: GO 29916
// HackLink ( i , tmp ) ;
30121: LD_VAR 0 1
30125: PPUSH
30126: LD_VAR 0 2
30130: PPUSH
30131: CALL 30278 0 2
// end ;
30135: GO 29916
30137: POP
30138: POP
// end ;
30139: PPOPN 2
30141: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30142: LD_INT 0
30144: PPUSH
30145: PPUSH
30146: PPUSH
// if not hack in hackTanks then
30147: LD_VAR 0 1
30151: PUSH
30152: LD_EXP 85
30156: IN
30157: NOT
30158: IFFALSE 30162
// exit ;
30160: GO 30273
// index := GetElementIndex ( hackTanks , hack ) ;
30162: LD_ADDR_VAR 0 4
30166: PUSH
30167: LD_EXP 85
30171: PPUSH
30172: LD_VAR 0 1
30176: PPUSH
30177: CALL 37940 0 2
30181: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30182: LD_EXP 86
30186: PUSH
30187: LD_VAR 0 4
30191: ARRAY
30192: IFFALSE 30273
// begin for i in hackTanksCaptured [ index ] do
30194: LD_ADDR_VAR 0 3
30198: PUSH
30199: LD_EXP 86
30203: PUSH
30204: LD_VAR 0 4
30208: ARRAY
30209: PUSH
30210: FOR_IN
30211: IFFALSE 30237
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30213: LD_VAR 0 3
30217: PUSH
30218: LD_INT 1
30220: ARRAY
30221: PPUSH
30222: LD_VAR 0 3
30226: PUSH
30227: LD_INT 2
30229: ARRAY
30230: PPUSH
30231: CALL_OW 235
30235: GO 30210
30237: POP
30238: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30239: LD_ADDR_EXP 86
30243: PUSH
30244: LD_EXP 86
30248: PPUSH
30249: LD_VAR 0 4
30253: PPUSH
30254: EMPTY
30255: PPUSH
30256: CALL_OW 1
30260: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30261: LD_VAR 0 1
30265: PPUSH
30266: LD_INT 0
30268: PPUSH
30269: CALL_OW 505
// end ; end ;
30273: LD_VAR 0 2
30277: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30278: LD_INT 0
30280: PPUSH
30281: PPUSH
30282: PPUSH
// if not hack in hackTanks or not vehicles then
30283: LD_VAR 0 1
30287: PUSH
30288: LD_EXP 85
30292: IN
30293: NOT
30294: IFTRUE 30303
30296: PUSH
30297: LD_VAR 0 2
30301: NOT
30302: OR
30303: IFFALSE 30307
// exit ;
30305: GO 30582
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30307: LD_ADDR_VAR 0 2
30311: PUSH
30312: LD_VAR 0 1
30316: PPUSH
30317: LD_VAR 0 2
30321: PPUSH
30322: LD_INT 1
30324: PPUSH
30325: LD_INT 1
30327: PPUSH
30328: CALL 38592 0 4
30332: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30333: LD_ADDR_VAR 0 5
30337: PUSH
30338: LD_EXP 85
30342: PPUSH
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL 37940 0 2
30352: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30353: LD_EXP 86
30357: PUSH
30358: LD_VAR 0 5
30362: ARRAY
30363: PUSH
30364: LD_EXP 87
30368: LESS
30369: IFFALSE 30558
// begin for i := 1 to vehicles do
30371: LD_ADDR_VAR 0 4
30375: PUSH
30376: DOUBLE
30377: LD_INT 1
30379: DEC
30380: ST_TO_ADDR
30381: LD_VAR 0 2
30385: PUSH
30386: FOR_TO
30387: IFFALSE 30556
// begin if hackTanksCaptured [ index ] = hackLimit then
30389: LD_EXP 86
30393: PUSH
30394: LD_VAR 0 5
30398: ARRAY
30399: PUSH
30400: LD_EXP 87
30404: EQUAL
30405: IFFALSE 30409
// break ;
30407: GO 30556
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30409: LD_ADDR_EXP 89
30413: PUSH
30414: LD_EXP 89
30418: PPUSH
30419: LD_VAR 0 5
30423: PPUSH
30424: LD_EXP 89
30428: PUSH
30429: LD_VAR 0 5
30433: ARRAY
30434: PUSH
30435: LD_INT 1
30437: PLUS
30438: PPUSH
30439: CALL_OW 1
30443: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30444: LD_ADDR_EXP 86
30448: PUSH
30449: LD_EXP 86
30453: PPUSH
30454: LD_VAR 0 5
30458: PUSH
30459: LD_EXP 86
30463: PUSH
30464: LD_VAR 0 5
30468: ARRAY
30469: PUSH
30470: LD_INT 1
30472: PLUS
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PPUSH
30478: LD_VAR 0 2
30482: PUSH
30483: LD_VAR 0 4
30487: ARRAY
30488: PUSH
30489: LD_VAR 0 2
30493: PUSH
30494: LD_VAR 0 4
30498: ARRAY
30499: PPUSH
30500: CALL_OW 255
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PPUSH
30509: CALL 38157 0 3
30513: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30514: LD_VAR 0 2
30518: PUSH
30519: LD_VAR 0 4
30523: ARRAY
30524: PPUSH
30525: LD_VAR 0 1
30529: PPUSH
30530: CALL_OW 255
30534: PPUSH
30535: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30539: LD_VAR 0 2
30543: PUSH
30544: LD_VAR 0 4
30548: ARRAY
30549: PPUSH
30550: CALL_OW 141
// end ;
30554: GO 30386
30556: POP
30557: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30558: LD_VAR 0 1
30562: PPUSH
30563: LD_EXP 86
30567: PUSH
30568: LD_VAR 0 5
30572: ARRAY
30573: PUSH
30574: LD_INT 0
30576: PLUS
30577: PPUSH
30578: CALL_OW 505
// end ;
30582: LD_VAR 0 3
30586: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30587: LD_INT 0
30589: PPUSH
30590: PPUSH
30591: PPUSH
30592: PPUSH
// if not hack in hackTanks then
30593: LD_VAR 0 1
30597: PUSH
30598: LD_EXP 85
30602: IN
30603: NOT
30604: IFFALSE 30608
// exit ;
30606: GO 30852
// index := GetElementIndex ( hackTanks , hack ) ;
30608: LD_ADDR_VAR 0 4
30612: PUSH
30613: LD_EXP 85
30617: PPUSH
30618: LD_VAR 0 1
30622: PPUSH
30623: CALL 37940 0 2
30627: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30628: LD_ADDR_VAR 0 3
30632: PUSH
30633: DOUBLE
30634: LD_EXP 86
30638: PUSH
30639: LD_VAR 0 4
30643: ARRAY
30644: INC
30645: ST_TO_ADDR
30646: LD_INT 1
30648: PUSH
30649: FOR_DOWNTO
30650: IFFALSE 30826
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30652: LD_ADDR_VAR 0 5
30656: PUSH
30657: LD_EXP 86
30661: PUSH
30662: LD_VAR 0 4
30666: ARRAY
30667: PUSH
30668: LD_VAR 0 3
30672: ARRAY
30673: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30674: LD_VAR 0 5
30678: PUSH
30679: LD_INT 1
30681: ARRAY
30682: PPUSH
30683: CALL_OW 302
30687: NOT
30688: IFTRUE 30716
30690: PUSH
30691: LD_VAR 0 5
30695: PUSH
30696: LD_INT 1
30698: ARRAY
30699: PPUSH
30700: CALL_OW 255
30704: PUSH
30705: LD_VAR 0 1
30709: PPUSH
30710: CALL_OW 255
30714: NONEQUAL
30715: OR
30716: IFFALSE 30824
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30718: LD_VAR 0 5
30722: PUSH
30723: LD_INT 1
30725: ARRAY
30726: PPUSH
30727: CALL_OW 305
30731: IFFALSE 30759
30733: PUSH
30734: LD_VAR 0 5
30738: PUSH
30739: LD_INT 1
30741: ARRAY
30742: PPUSH
30743: CALL_OW 255
30747: PUSH
30748: LD_VAR 0 1
30752: PPUSH
30753: CALL_OW 255
30757: EQUAL
30758: AND
30759: IFFALSE 30783
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30761: LD_VAR 0 5
30765: PUSH
30766: LD_INT 1
30768: ARRAY
30769: PPUSH
30770: LD_VAR 0 5
30774: PUSH
30775: LD_INT 2
30777: ARRAY
30778: PPUSH
30779: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30783: LD_ADDR_EXP 86
30787: PUSH
30788: LD_EXP 86
30792: PPUSH
30793: LD_VAR 0 4
30797: PPUSH
30798: LD_EXP 86
30802: PUSH
30803: LD_VAR 0 4
30807: ARRAY
30808: PPUSH
30809: LD_VAR 0 3
30813: PPUSH
30814: CALL_OW 3
30818: PPUSH
30819: CALL_OW 1
30823: ST_TO_ADDR
// end ; end ;
30824: GO 30649
30826: POP
30827: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30828: LD_VAR 0 1
30832: PPUSH
30833: LD_EXP 86
30837: PUSH
30838: LD_VAR 0 4
30842: ARRAY
30843: PUSH
30844: LD_INT 0
30846: PLUS
30847: PPUSH
30848: CALL_OW 505
// end ;
30852: LD_VAR 0 2
30856: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30857: LD_INT 0
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
// if not hack in hackTanks then
30863: LD_VAR 0 1
30867: PUSH
30868: LD_EXP 85
30872: IN
30873: NOT
30874: IFFALSE 30878
// exit ;
30876: GO 30963
// index := GetElementIndex ( hackTanks , hack ) ;
30878: LD_ADDR_VAR 0 5
30882: PUSH
30883: LD_EXP 85
30887: PPUSH
30888: LD_VAR 0 1
30892: PPUSH
30893: CALL 37940 0 2
30897: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30898: LD_ADDR_VAR 0 4
30902: PUSH
30903: DOUBLE
30904: LD_INT 1
30906: DEC
30907: ST_TO_ADDR
30908: LD_EXP 86
30912: PUSH
30913: LD_VAR 0 5
30917: ARRAY
30918: PUSH
30919: FOR_TO
30920: IFFALSE 30961
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30922: LD_EXP 86
30926: PUSH
30927: LD_VAR 0 5
30931: ARRAY
30932: PUSH
30933: LD_VAR 0 4
30937: ARRAY
30938: PUSH
30939: LD_INT 1
30941: ARRAY
30942: PUSH
30943: LD_VAR 0 2
30947: EQUAL
30948: IFFALSE 30959
// KillUnit ( vehicle ) ;
30950: LD_VAR 0 2
30954: PPUSH
30955: CALL_OW 66
30959: GO 30919
30961: POP
30962: POP
// end ;
30963: LD_VAR 0 3
30967: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30968: LD_EXP 90
30972: NOT
30973: IFFALSE 31008
30975: GO 30977
30977: DISABLE
// begin initMiner := true ;
30978: LD_ADDR_EXP 90
30982: PUSH
30983: LD_INT 1
30985: ST_TO_ADDR
// minersList := [ ] ;
30986: LD_ADDR_EXP 91
30990: PUSH
30991: EMPTY
30992: ST_TO_ADDR
// minerMinesList := [ ] ;
30993: LD_ADDR_EXP 92
30997: PUSH
30998: EMPTY
30999: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31000: LD_ADDR_EXP 93
31004: PUSH
31005: LD_INT 5
31007: ST_TO_ADDR
// end ;
31008: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31009: LD_EXP 90
31013: IFFALSE 31031
31015: PUSH
31016: LD_INT 34
31018: PUSH
31019: LD_INT 81
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PPUSH
31026: CALL_OW 69
31030: AND
31031: IFFALSE 31494
31033: GO 31035
31035: DISABLE
31036: LD_INT 0
31038: PPUSH
31039: PPUSH
31040: PPUSH
31041: PPUSH
// begin enable ;
31042: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31043: LD_ADDR_VAR 0 1
31047: PUSH
31048: LD_INT 34
31050: PUSH
31051: LD_INT 81
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PPUSH
31058: CALL_OW 69
31062: PUSH
31063: FOR_IN
31064: IFFALSE 31136
// begin if not i in minersList then
31066: LD_VAR 0 1
31070: PUSH
31071: LD_EXP 91
31075: IN
31076: NOT
31077: IFFALSE 31134
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31079: LD_ADDR_EXP 91
31083: PUSH
31084: LD_EXP 91
31088: PPUSH
31089: LD_EXP 91
31093: PUSH
31094: LD_INT 1
31096: PLUS
31097: PPUSH
31098: LD_VAR 0 1
31102: PPUSH
31103: CALL_OW 1
31107: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31108: LD_ADDR_EXP 92
31112: PUSH
31113: LD_EXP 92
31117: PPUSH
31118: LD_EXP 92
31122: PUSH
31123: LD_INT 1
31125: PLUS
31126: PPUSH
31127: EMPTY
31128: PPUSH
31129: CALL_OW 1
31133: ST_TO_ADDR
// end end ;
31134: GO 31063
31136: POP
31137: POP
// for i := minerMinesList downto 1 do
31138: LD_ADDR_VAR 0 1
31142: PUSH
31143: DOUBLE
31144: LD_EXP 92
31148: INC
31149: ST_TO_ADDR
31150: LD_INT 1
31152: PUSH
31153: FOR_DOWNTO
31154: IFFALSE 31492
// begin if IsLive ( minersList [ i ] ) then
31156: LD_EXP 91
31160: PUSH
31161: LD_VAR 0 1
31165: ARRAY
31166: PPUSH
31167: CALL_OW 300
31171: IFFALSE 31199
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31173: LD_EXP 91
31177: PUSH
31178: LD_VAR 0 1
31182: ARRAY
31183: PPUSH
31184: LD_EXP 92
31188: PUSH
31189: LD_VAR 0 1
31193: ARRAY
31194: PPUSH
31195: CALL_OW 505
// if not minerMinesList [ i ] then
31199: LD_EXP 92
31203: PUSH
31204: LD_VAR 0 1
31208: ARRAY
31209: NOT
31210: IFFALSE 31214
// continue ;
31212: GO 31153
// for j := minerMinesList [ i ] downto 1 do
31214: LD_ADDR_VAR 0 2
31218: PUSH
31219: DOUBLE
31220: LD_EXP 92
31224: PUSH
31225: LD_VAR 0 1
31229: ARRAY
31230: INC
31231: ST_TO_ADDR
31232: LD_INT 1
31234: PUSH
31235: FOR_DOWNTO
31236: IFFALSE 31488
// begin side := GetSide ( minersList [ i ] ) ;
31238: LD_ADDR_VAR 0 3
31242: PUSH
31243: LD_EXP 91
31247: PUSH
31248: LD_VAR 0 1
31252: ARRAY
31253: PPUSH
31254: CALL_OW 255
31258: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31259: LD_ADDR_VAR 0 4
31263: PUSH
31264: LD_EXP 92
31268: PUSH
31269: LD_VAR 0 1
31273: ARRAY
31274: PUSH
31275: LD_VAR 0 2
31279: ARRAY
31280: PUSH
31281: LD_INT 1
31283: ARRAY
31284: PPUSH
31285: LD_EXP 92
31289: PUSH
31290: LD_VAR 0 1
31294: ARRAY
31295: PUSH
31296: LD_VAR 0 2
31300: ARRAY
31301: PUSH
31302: LD_INT 2
31304: ARRAY
31305: PPUSH
31306: CALL_OW 428
31310: ST_TO_ADDR
// if not tmp then
31311: LD_VAR 0 4
31315: NOT
31316: IFFALSE 31320
// continue ;
31318: GO 31235
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31320: LD_VAR 0 4
31324: PUSH
31325: LD_INT 81
31327: PUSH
31328: LD_VAR 0 3
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PPUSH
31337: CALL_OW 69
31341: IN
31342: IFFALSE 31392
31344: PUSH
31345: LD_EXP 92
31349: PUSH
31350: LD_VAR 0 1
31354: ARRAY
31355: PUSH
31356: LD_VAR 0 2
31360: ARRAY
31361: PUSH
31362: LD_INT 1
31364: ARRAY
31365: PPUSH
31366: LD_EXP 92
31370: PUSH
31371: LD_VAR 0 1
31375: ARRAY
31376: PUSH
31377: LD_VAR 0 2
31381: ARRAY
31382: PUSH
31383: LD_INT 2
31385: ARRAY
31386: PPUSH
31387: CALL_OW 458
31391: AND
31392: IFFALSE 31486
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31394: LD_EXP 92
31398: PUSH
31399: LD_VAR 0 1
31403: ARRAY
31404: PUSH
31405: LD_VAR 0 2
31409: ARRAY
31410: PUSH
31411: LD_INT 1
31413: ARRAY
31414: PPUSH
31415: LD_EXP 92
31419: PUSH
31420: LD_VAR 0 1
31424: ARRAY
31425: PUSH
31426: LD_VAR 0 2
31430: ARRAY
31431: PUSH
31432: LD_INT 2
31434: ARRAY
31435: PPUSH
31436: LD_VAR 0 3
31440: PPUSH
31441: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31445: LD_ADDR_EXP 92
31449: PUSH
31450: LD_EXP 92
31454: PPUSH
31455: LD_VAR 0 1
31459: PPUSH
31460: LD_EXP 92
31464: PUSH
31465: LD_VAR 0 1
31469: ARRAY
31470: PPUSH
31471: LD_VAR 0 2
31475: PPUSH
31476: CALL_OW 3
31480: PPUSH
31481: CALL_OW 1
31485: ST_TO_ADDR
// end ; end ;
31486: GO 31235
31488: POP
31489: POP
// end ;
31490: GO 31153
31492: POP
31493: POP
// end ;
31494: PPOPN 4
31496: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31497: LD_INT 0
31499: PPUSH
31500: PPUSH
// result := false ;
31501: LD_ADDR_VAR 0 4
31505: PUSH
31506: LD_INT 0
31508: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31509: LD_VAR 0 1
31513: PPUSH
31514: CALL_OW 264
31518: PUSH
31519: LD_INT 81
31521: EQUAL
31522: NOT
31523: IFFALSE 31527
// exit ;
31525: GO 31771
// index := GetElementIndex ( minersList , unit ) ;
31527: LD_ADDR_VAR 0 5
31531: PUSH
31532: LD_EXP 91
31536: PPUSH
31537: LD_VAR 0 1
31541: PPUSH
31542: CALL 37940 0 2
31546: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31547: LD_EXP 92
31551: PUSH
31552: LD_VAR 0 5
31556: ARRAY
31557: PUSH
31558: LD_EXP 93
31562: GREATEREQUAL
31563: IFFALSE 31567
// exit ;
31565: GO 31771
// ComMoveXY ( unit , x , y ) ;
31567: LD_VAR 0 1
31571: PPUSH
31572: LD_VAR 0 2
31576: PPUSH
31577: LD_VAR 0 3
31581: PPUSH
31582: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31586: LD_INT 35
31588: PPUSH
31589: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31593: LD_VAR 0 1
31597: PPUSH
31598: LD_VAR 0 2
31602: PPUSH
31603: LD_VAR 0 3
31607: PPUSH
31608: CALL 69986 0 3
31612: NOT
31613: IFFALSE 31626
31615: PUSH
31616: LD_VAR 0 1
31620: PPUSH
31621: CALL_OW 314
31625: AND
31626: IFFALSE 31630
// exit ;
31628: GO 31771
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31630: LD_VAR 0 2
31634: PPUSH
31635: LD_VAR 0 3
31639: PPUSH
31640: CALL_OW 428
31644: PUSH
31645: LD_VAR 0 1
31649: EQUAL
31650: IFFALSE 31664
31652: PUSH
31653: LD_VAR 0 1
31657: PPUSH
31658: CALL_OW 314
31662: NOT
31663: AND
31664: IFFALSE 31586
// PlaySoundXY ( x , y , PlantMine ) ;
31666: LD_VAR 0 2
31670: PPUSH
31671: LD_VAR 0 3
31675: PPUSH
31676: LD_STRING PlantMine
31678: PPUSH
31679: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31683: LD_VAR 0 2
31687: PPUSH
31688: LD_VAR 0 3
31692: PPUSH
31693: LD_VAR 0 1
31697: PPUSH
31698: CALL_OW 255
31702: PPUSH
31703: LD_INT 0
31705: PPUSH
31706: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31710: LD_ADDR_EXP 92
31714: PUSH
31715: LD_EXP 92
31719: PPUSH
31720: LD_VAR 0 5
31724: PUSH
31725: LD_EXP 92
31729: PUSH
31730: LD_VAR 0 5
31734: ARRAY
31735: PUSH
31736: LD_INT 1
31738: PLUS
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PPUSH
31744: LD_VAR 0 2
31748: PUSH
31749: LD_VAR 0 3
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PPUSH
31758: CALL 38157 0 3
31762: ST_TO_ADDR
// result := true ;
31763: LD_ADDR_VAR 0 4
31767: PUSH
31768: LD_INT 1
31770: ST_TO_ADDR
// end ;
31771: LD_VAR 0 4
31775: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31776: LD_INT 0
31778: PPUSH
31779: PPUSH
31780: PPUSH
// if not unit in minersList then
31781: LD_VAR 0 1
31785: PUSH
31786: LD_EXP 91
31790: IN
31791: NOT
31792: IFFALSE 31796
// exit ;
31794: GO 32190
// index := GetElementIndex ( minersList , unit ) ;
31796: LD_ADDR_VAR 0 6
31800: PUSH
31801: LD_EXP 91
31805: PPUSH
31806: LD_VAR 0 1
31810: PPUSH
31811: CALL 37940 0 2
31815: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31816: LD_ADDR_VAR 0 5
31820: PUSH
31821: DOUBLE
31822: LD_EXP 92
31826: PUSH
31827: LD_VAR 0 6
31831: ARRAY
31832: INC
31833: ST_TO_ADDR
31834: LD_INT 1
31836: PUSH
31837: FOR_DOWNTO
31838: IFFALSE 32001
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31840: LD_EXP 92
31844: PUSH
31845: LD_VAR 0 6
31849: ARRAY
31850: PUSH
31851: LD_VAR 0 5
31855: ARRAY
31856: PUSH
31857: LD_INT 1
31859: ARRAY
31860: PUSH
31861: LD_VAR 0 2
31865: EQUAL
31866: IFFALSE 31896
31868: PUSH
31869: LD_EXP 92
31873: PUSH
31874: LD_VAR 0 6
31878: ARRAY
31879: PUSH
31880: LD_VAR 0 5
31884: ARRAY
31885: PUSH
31886: LD_INT 2
31888: ARRAY
31889: PUSH
31890: LD_VAR 0 3
31894: EQUAL
31895: AND
31896: IFFALSE 31999
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31898: LD_EXP 92
31902: PUSH
31903: LD_VAR 0 6
31907: ARRAY
31908: PUSH
31909: LD_VAR 0 5
31913: ARRAY
31914: PUSH
31915: LD_INT 1
31917: ARRAY
31918: PPUSH
31919: LD_EXP 92
31923: PUSH
31924: LD_VAR 0 6
31928: ARRAY
31929: PUSH
31930: LD_VAR 0 5
31934: ARRAY
31935: PUSH
31936: LD_INT 2
31938: ARRAY
31939: PPUSH
31940: LD_VAR 0 1
31944: PPUSH
31945: CALL_OW 255
31949: PPUSH
31950: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31954: LD_ADDR_EXP 92
31958: PUSH
31959: LD_EXP 92
31963: PPUSH
31964: LD_VAR 0 6
31968: PPUSH
31969: LD_EXP 92
31973: PUSH
31974: LD_VAR 0 6
31978: ARRAY
31979: PPUSH
31980: LD_VAR 0 5
31984: PPUSH
31985: CALL_OW 3
31989: PPUSH
31990: CALL_OW 1
31994: ST_TO_ADDR
// exit ;
31995: POP
31996: POP
31997: GO 32190
// end ; end ;
31999: GO 31837
32001: POP
32002: POP
// for i := minerMinesList [ index ] downto 1 do
32003: LD_ADDR_VAR 0 5
32007: PUSH
32008: DOUBLE
32009: LD_EXP 92
32013: PUSH
32014: LD_VAR 0 6
32018: ARRAY
32019: INC
32020: ST_TO_ADDR
32021: LD_INT 1
32023: PUSH
32024: FOR_DOWNTO
32025: IFFALSE 32188
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32027: LD_EXP 92
32031: PUSH
32032: LD_VAR 0 6
32036: ARRAY
32037: PUSH
32038: LD_VAR 0 5
32042: ARRAY
32043: PUSH
32044: LD_INT 1
32046: ARRAY
32047: PPUSH
32048: LD_EXP 92
32052: PUSH
32053: LD_VAR 0 6
32057: ARRAY
32058: PUSH
32059: LD_VAR 0 5
32063: ARRAY
32064: PUSH
32065: LD_INT 2
32067: ARRAY
32068: PPUSH
32069: LD_VAR 0 2
32073: PPUSH
32074: LD_VAR 0 3
32078: PPUSH
32079: CALL_OW 298
32083: PUSH
32084: LD_INT 6
32086: LESS
32087: IFFALSE 32186
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32089: LD_EXP 92
32093: PUSH
32094: LD_VAR 0 6
32098: ARRAY
32099: PUSH
32100: LD_VAR 0 5
32104: ARRAY
32105: PUSH
32106: LD_INT 1
32108: ARRAY
32109: PPUSH
32110: LD_EXP 92
32114: PUSH
32115: LD_VAR 0 6
32119: ARRAY
32120: PUSH
32121: LD_VAR 0 5
32125: ARRAY
32126: PUSH
32127: LD_INT 2
32129: ARRAY
32130: PPUSH
32131: LD_VAR 0 1
32135: PPUSH
32136: CALL_OW 255
32140: PPUSH
32141: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32145: LD_ADDR_EXP 92
32149: PUSH
32150: LD_EXP 92
32154: PPUSH
32155: LD_VAR 0 6
32159: PPUSH
32160: LD_EXP 92
32164: PUSH
32165: LD_VAR 0 6
32169: ARRAY
32170: PPUSH
32171: LD_VAR 0 5
32175: PPUSH
32176: CALL_OW 3
32180: PPUSH
32181: CALL_OW 1
32185: ST_TO_ADDR
// end ; end ;
32186: GO 32024
32188: POP
32189: POP
// end ;
32190: LD_VAR 0 4
32194: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32195: LD_INT 0
32197: PPUSH
32198: PPUSH
32199: PPUSH
32200: PPUSH
32201: PPUSH
32202: PPUSH
32203: PPUSH
32204: PPUSH
32205: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32206: LD_VAR 0 1
32210: PPUSH
32211: CALL_OW 264
32215: PUSH
32216: LD_INT 81
32218: EQUAL
32219: NOT
32220: IFTRUE 32235
32222: PUSH
32223: LD_VAR 0 1
32227: PUSH
32228: LD_EXP 91
32232: IN
32233: NOT
32234: OR
32235: IFFALSE 32239
// exit ;
32237: GO 32565
// index := GetElementIndex ( minersList , unit ) ;
32239: LD_ADDR_VAR 0 6
32243: PUSH
32244: LD_EXP 91
32248: PPUSH
32249: LD_VAR 0 1
32253: PPUSH
32254: CALL 37940 0 2
32258: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32259: LD_ADDR_VAR 0 8
32263: PUSH
32264: LD_EXP 93
32268: PUSH
32269: LD_EXP 92
32273: PUSH
32274: LD_VAR 0 6
32278: ARRAY
32279: MINUS
32280: ST_TO_ADDR
// if not minesFreeAmount then
32281: LD_VAR 0 8
32285: NOT
32286: IFFALSE 32290
// exit ;
32288: GO 32565
// tmp := [ ] ;
32290: LD_ADDR_VAR 0 7
32294: PUSH
32295: EMPTY
32296: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32297: LD_ADDR_VAR 0 5
32301: PUSH
32302: DOUBLE
32303: LD_INT 1
32305: DEC
32306: ST_TO_ADDR
32307: LD_VAR 0 8
32311: PUSH
32312: FOR_TO
32313: IFFALSE 32512
// begin _d := rand ( 0 , 5 ) ;
32315: LD_ADDR_VAR 0 11
32319: PUSH
32320: LD_INT 0
32322: PPUSH
32323: LD_INT 5
32325: PPUSH
32326: CALL_OW 12
32330: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32331: LD_ADDR_VAR 0 12
32335: PUSH
32336: LD_INT 2
32338: PPUSH
32339: LD_INT 6
32341: PPUSH
32342: CALL_OW 12
32346: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32347: LD_ADDR_VAR 0 9
32351: PUSH
32352: LD_VAR 0 2
32356: PPUSH
32357: LD_VAR 0 11
32361: PPUSH
32362: LD_VAR 0 12
32366: PPUSH
32367: CALL_OW 272
32371: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32372: LD_ADDR_VAR 0 10
32376: PUSH
32377: LD_VAR 0 3
32381: PPUSH
32382: LD_VAR 0 11
32386: PPUSH
32387: LD_VAR 0 12
32391: PPUSH
32392: CALL_OW 273
32396: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32397: LD_VAR 0 9
32401: PPUSH
32402: LD_VAR 0 10
32406: PPUSH
32407: CALL_OW 488
32411: IFFALSE 32435
32413: PUSH
32414: LD_VAR 0 9
32418: PUSH
32419: LD_VAR 0 10
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_VAR 0 7
32432: IN
32433: NOT
32434: AND
32435: IFFALSE 32454
32437: PUSH
32438: LD_VAR 0 9
32442: PPUSH
32443: LD_VAR 0 10
32447: PPUSH
32448: CALL_OW 458
32452: NOT
32453: AND
32454: IFFALSE 32496
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32456: LD_ADDR_VAR 0 7
32460: PUSH
32461: LD_VAR 0 7
32465: PPUSH
32466: LD_VAR 0 7
32470: PUSH
32471: LD_INT 1
32473: PLUS
32474: PPUSH
32475: LD_VAR 0 9
32479: PUSH
32480: LD_VAR 0 10
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PPUSH
32489: CALL_OW 1
32493: ST_TO_ADDR
32494: GO 32510
// i := i - 1 ;
32496: LD_ADDR_VAR 0 5
32500: PUSH
32501: LD_VAR 0 5
32505: PUSH
32506: LD_INT 1
32508: MINUS
32509: ST_TO_ADDR
// end ;
32510: GO 32312
32512: POP
32513: POP
// for i in tmp do
32514: LD_ADDR_VAR 0 5
32518: PUSH
32519: LD_VAR 0 7
32523: PUSH
32524: FOR_IN
32525: IFFALSE 32563
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32527: LD_VAR 0 1
32531: PPUSH
32532: LD_VAR 0 5
32536: PUSH
32537: LD_INT 1
32539: ARRAY
32540: PPUSH
32541: LD_VAR 0 5
32545: PUSH
32546: LD_INT 2
32548: ARRAY
32549: PPUSH
32550: CALL 31497 0 3
32554: NOT
32555: IFFALSE 32561
// exit ;
32557: POP
32558: POP
32559: GO 32565
32561: GO 32524
32563: POP
32564: POP
// end ;
32565: LD_VAR 0 4
32569: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32570: LD_INT 0
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
32579: PPUSH
32580: PPUSH
// if GetClass ( unit ) <> class_sniper then
32581: LD_VAR 0 1
32585: PPUSH
32586: CALL_OW 257
32590: PUSH
32591: LD_INT 5
32593: NONEQUAL
32594: IFFALSE 32598
// exit ;
32596: GO 33068
// dist := 8 ;
32598: LD_ADDR_VAR 0 5
32602: PUSH
32603: LD_INT 8
32605: ST_TO_ADDR
// viewRange := 12 ;
32606: LD_ADDR_VAR 0 8
32610: PUSH
32611: LD_INT 12
32613: ST_TO_ADDR
// side := GetSide ( unit ) ;
32614: LD_ADDR_VAR 0 6
32618: PUSH
32619: LD_VAR 0 1
32623: PPUSH
32624: CALL_OW 255
32628: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32629: LD_INT 61
32631: PPUSH
32632: LD_VAR 0 6
32636: PPUSH
32637: CALL_OW 321
32641: PUSH
32642: LD_INT 2
32644: EQUAL
32645: IFFALSE 32655
// viewRange := 16 ;
32647: LD_ADDR_VAR 0 8
32651: PUSH
32652: LD_INT 16
32654: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32655: LD_VAR 0 1
32659: PPUSH
32660: LD_VAR 0 2
32664: PPUSH
32665: LD_VAR 0 3
32669: PPUSH
32670: CALL_OW 297
32674: PUSH
32675: LD_VAR 0 5
32679: GREATER
32680: IFFALSE 32759
// begin ComMoveXY ( unit , x , y ) ;
32682: LD_VAR 0 1
32686: PPUSH
32687: LD_VAR 0 2
32691: PPUSH
32692: LD_VAR 0 3
32696: PPUSH
32697: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32701: LD_INT 35
32703: PPUSH
32704: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32708: LD_VAR 0 1
32712: PPUSH
32713: LD_VAR 0 2
32717: PPUSH
32718: LD_VAR 0 3
32722: PPUSH
32723: CALL 69986 0 3
32727: NOT
32728: IFFALSE 32732
// exit ;
32730: GO 33068
// until GetDistUnitXY ( unit , x , y ) < dist ;
32732: LD_VAR 0 1
32736: PPUSH
32737: LD_VAR 0 2
32741: PPUSH
32742: LD_VAR 0 3
32746: PPUSH
32747: CALL_OW 297
32751: PUSH
32752: LD_VAR 0 5
32756: LESS
32757: IFFALSE 32701
// end ; ComTurnXY ( unit , x , y ) ;
32759: LD_VAR 0 1
32763: PPUSH
32764: LD_VAR 0 2
32768: PPUSH
32769: LD_VAR 0 3
32773: PPUSH
32774: CALL_OW 118
// repeat if Multiplayer then
32778: LD_OWVAR 4
32782: IFFALSE 32793
// wait ( 35 ) else
32784: LD_INT 35
32786: PPUSH
32787: CALL_OW 67
32791: GO 32800
// wait ( 5 ) ;
32793: LD_INT 5
32795: PPUSH
32796: CALL_OW 67
// _d := GetDir ( unit ) ;
32800: LD_ADDR_VAR 0 11
32804: PUSH
32805: LD_VAR 0 1
32809: PPUSH
32810: CALL_OW 254
32814: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32815: LD_ADDR_VAR 0 7
32819: PUSH
32820: LD_VAR 0 1
32824: PPUSH
32825: CALL_OW 250
32829: PPUSH
32830: LD_VAR 0 1
32834: PPUSH
32835: CALL_OW 251
32839: PPUSH
32840: LD_VAR 0 2
32844: PPUSH
32845: LD_VAR 0 3
32849: PPUSH
32850: CALL 72622 0 4
32854: ST_TO_ADDR
// until dir = _d ;
32855: LD_VAR 0 7
32859: PUSH
32860: LD_VAR 0 11
32864: EQUAL
32865: IFFALSE 32778
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32867: LD_ADDR_VAR 0 9
32871: PUSH
32872: LD_VAR 0 1
32876: PPUSH
32877: CALL_OW 250
32881: PPUSH
32882: LD_VAR 0 7
32886: PPUSH
32887: LD_VAR 0 5
32891: PPUSH
32892: CALL_OW 272
32896: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32897: LD_ADDR_VAR 0 10
32901: PUSH
32902: LD_VAR 0 1
32906: PPUSH
32907: CALL_OW 251
32911: PPUSH
32912: LD_VAR 0 7
32916: PPUSH
32917: LD_VAR 0 5
32921: PPUSH
32922: CALL_OW 273
32926: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32927: LD_VAR 0 9
32931: PPUSH
32932: LD_VAR 0 10
32936: PPUSH
32937: CALL_OW 488
32941: NOT
32942: IFFALSE 32946
// exit ;
32944: GO 33068
// ComAnimCustom ( unit , 1 ) ;
32946: LD_VAR 0 1
32950: PPUSH
32951: LD_INT 1
32953: PPUSH
32954: CALL_OW 592
// p := 0 ;
32958: LD_ADDR_VAR 0 12
32962: PUSH
32963: LD_INT 0
32965: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32966: LD_VAR 0 9
32970: PPUSH
32971: LD_VAR 0 10
32975: PPUSH
32976: LD_VAR 0 6
32980: PPUSH
32981: LD_VAR 0 8
32985: PPUSH
32986: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32990: LD_INT 35
32992: PPUSH
32993: CALL_OW 67
// p := Inc ( p ) ;
32997: LD_ADDR_VAR 0 12
33001: PUSH
33002: LD_VAR 0 12
33006: PPUSH
33007: CALL 72578 0 1
33011: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
33012: LD_VAR 0 12
33016: PUSH
33017: LD_INT 3
33019: EQUAL
33020: IFTRUE 33034
33022: PUSH
33023: LD_VAR 0 1
33027: PPUSH
33028: CALL_OW 302
33032: NOT
33033: OR
33034: IFTRUE 33047
33036: PUSH
33037: LD_VAR 0 1
33041: PPUSH
33042: CALL_OW 301
33046: OR
33047: IFFALSE 32990
// RemoveSeeing ( _x , _y , side ) ;
33049: LD_VAR 0 9
33053: PPUSH
33054: LD_VAR 0 10
33058: PPUSH
33059: LD_VAR 0 6
33063: PPUSH
33064: CALL_OW 331
// end ; end_of_file
33068: LD_VAR 0 4
33072: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33073: LD_INT 0
33075: PPUSH
33076: PPUSH
// if exist_mode then
33077: LD_VAR 0 2
33081: IFFALSE 33127
// begin unit := CreateCharacter ( prefix & ident ) ;
33083: LD_ADDR_VAR 0 5
33087: PUSH
33088: LD_VAR 0 3
33092: PUSH
33093: LD_VAR 0 1
33097: STR
33098: PPUSH
33099: CALL_OW 34
33103: ST_TO_ADDR
// if unit then
33104: LD_VAR 0 5
33108: IFFALSE 33125
// DeleteCharacters ( prefix & ident ) ;
33110: LD_VAR 0 3
33114: PUSH
33115: LD_VAR 0 1
33119: STR
33120: PPUSH
33121: CALL_OW 40
// end else
33125: GO 33142
// unit := NewCharacter ( ident ) ;
33127: LD_ADDR_VAR 0 5
33131: PUSH
33132: LD_VAR 0 1
33136: PPUSH
33137: CALL_OW 25
33141: ST_TO_ADDR
// result := unit ;
33142: LD_ADDR_VAR 0 4
33146: PUSH
33147: LD_VAR 0 5
33151: ST_TO_ADDR
// end ;
33152: LD_VAR 0 4
33156: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33157: LD_INT 0
33159: PPUSH
33160: PPUSH
// if exist_mode then
33161: LD_VAR 0 2
33165: IFFALSE 33190
// unit := CreateCharacter ( prefix & ident ) else
33167: LD_ADDR_VAR 0 5
33171: PUSH
33172: LD_VAR 0 3
33176: PUSH
33177: LD_VAR 0 1
33181: STR
33182: PPUSH
33183: CALL_OW 34
33187: ST_TO_ADDR
33188: GO 33205
// unit := NewCharacter ( ident ) ;
33190: LD_ADDR_VAR 0 5
33194: PUSH
33195: LD_VAR 0 1
33199: PPUSH
33200: CALL_OW 25
33204: ST_TO_ADDR
// result := unit ;
33205: LD_ADDR_VAR 0 4
33209: PUSH
33210: LD_VAR 0 5
33214: ST_TO_ADDR
// end ;
33215: LD_VAR 0 4
33219: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33220: LD_INT 0
33222: PPUSH
33223: PPUSH
// if not side or not nation then
33224: LD_VAR 0 1
33228: NOT
33229: IFTRUE 33238
33231: PUSH
33232: LD_VAR 0 2
33236: NOT
33237: OR
33238: IFFALSE 33242
// exit ;
33240: GO 34012
// case nation of nation_american :
33242: LD_VAR 0 2
33246: PUSH
33247: LD_INT 1
33249: DOUBLE
33250: EQUAL
33251: IFTRUE 33255
33253: GO 33469
33255: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33256: LD_ADDR_VAR 0 4
33260: PUSH
33261: LD_INT 35
33263: PUSH
33264: LD_INT 45
33266: PUSH
33267: LD_INT 46
33269: PUSH
33270: LD_INT 47
33272: PUSH
33273: LD_INT 82
33275: PUSH
33276: LD_INT 83
33278: PUSH
33279: LD_INT 84
33281: PUSH
33282: LD_INT 85
33284: PUSH
33285: LD_INT 86
33287: PUSH
33288: LD_INT 1
33290: PUSH
33291: LD_INT 2
33293: PUSH
33294: LD_INT 6
33296: PUSH
33297: LD_INT 15
33299: PUSH
33300: LD_INT 16
33302: PUSH
33303: LD_INT 7
33305: PUSH
33306: LD_INT 12
33308: PUSH
33309: LD_INT 13
33311: PUSH
33312: LD_INT 10
33314: PUSH
33315: LD_INT 14
33317: PUSH
33318: LD_INT 20
33320: PUSH
33321: LD_INT 21
33323: PUSH
33324: LD_INT 22
33326: PUSH
33327: LD_INT 25
33329: PUSH
33330: LD_INT 32
33332: PUSH
33333: LD_INT 27
33335: PUSH
33336: LD_INT 36
33338: PUSH
33339: LD_INT 69
33341: PUSH
33342: LD_INT 39
33344: PUSH
33345: LD_INT 34
33347: PUSH
33348: LD_INT 40
33350: PUSH
33351: LD_INT 48
33353: PUSH
33354: LD_INT 49
33356: PUSH
33357: LD_INT 50
33359: PUSH
33360: LD_INT 51
33362: PUSH
33363: LD_INT 52
33365: PUSH
33366: LD_INT 53
33368: PUSH
33369: LD_INT 54
33371: PUSH
33372: LD_INT 55
33374: PUSH
33375: LD_INT 56
33377: PUSH
33378: LD_INT 57
33380: PUSH
33381: LD_INT 58
33383: PUSH
33384: LD_INT 59
33386: PUSH
33387: LD_INT 60
33389: PUSH
33390: LD_INT 61
33392: PUSH
33393: LD_INT 62
33395: PUSH
33396: LD_INT 80
33398: PUSH
33399: LD_INT 82
33401: PUSH
33402: LD_INT 83
33404: PUSH
33405: LD_INT 84
33407: PUSH
33408: LD_INT 85
33410: PUSH
33411: LD_INT 86
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: ST_TO_ADDR
33467: GO 33934
33469: LD_INT 2
33471: DOUBLE
33472: EQUAL
33473: IFTRUE 33477
33475: GO 33703
33477: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33478: LD_ADDR_VAR 0 4
33482: PUSH
33483: LD_INT 35
33485: PUSH
33486: LD_INT 45
33488: PUSH
33489: LD_INT 46
33491: PUSH
33492: LD_INT 47
33494: PUSH
33495: LD_INT 82
33497: PUSH
33498: LD_INT 83
33500: PUSH
33501: LD_INT 84
33503: PUSH
33504: LD_INT 85
33506: PUSH
33507: LD_INT 87
33509: PUSH
33510: LD_INT 70
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: LD_INT 11
33518: PUSH
33519: LD_INT 3
33521: PUSH
33522: LD_INT 4
33524: PUSH
33525: LD_INT 5
33527: PUSH
33528: LD_INT 6
33530: PUSH
33531: LD_INT 15
33533: PUSH
33534: LD_INT 18
33536: PUSH
33537: LD_INT 7
33539: PUSH
33540: LD_INT 17
33542: PUSH
33543: LD_INT 8
33545: PUSH
33546: LD_INT 20
33548: PUSH
33549: LD_INT 21
33551: PUSH
33552: LD_INT 22
33554: PUSH
33555: LD_INT 72
33557: PUSH
33558: LD_INT 26
33560: PUSH
33561: LD_INT 69
33563: PUSH
33564: LD_INT 39
33566: PUSH
33567: LD_INT 40
33569: PUSH
33570: LD_INT 41
33572: PUSH
33573: LD_INT 42
33575: PUSH
33576: LD_INT 43
33578: PUSH
33579: LD_INT 48
33581: PUSH
33582: LD_INT 49
33584: PUSH
33585: LD_INT 50
33587: PUSH
33588: LD_INT 51
33590: PUSH
33591: LD_INT 52
33593: PUSH
33594: LD_INT 53
33596: PUSH
33597: LD_INT 54
33599: PUSH
33600: LD_INT 55
33602: PUSH
33603: LD_INT 56
33605: PUSH
33606: LD_INT 60
33608: PUSH
33609: LD_INT 61
33611: PUSH
33612: LD_INT 62
33614: PUSH
33615: LD_INT 66
33617: PUSH
33618: LD_INT 67
33620: PUSH
33621: LD_INT 68
33623: PUSH
33624: LD_INT 81
33626: PUSH
33627: LD_INT 82
33629: PUSH
33630: LD_INT 83
33632: PUSH
33633: LD_INT 84
33635: PUSH
33636: LD_INT 85
33638: PUSH
33639: LD_INT 87
33641: PUSH
33642: LD_INT 88
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: ST_TO_ADDR
33701: GO 33934
33703: LD_INT 3
33705: DOUBLE
33706: EQUAL
33707: IFTRUE 33711
33709: GO 33933
33711: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33712: LD_ADDR_VAR 0 4
33716: PUSH
33717: LD_INT 46
33719: PUSH
33720: LD_INT 47
33722: PUSH
33723: LD_INT 1
33725: PUSH
33726: LD_INT 2
33728: PUSH
33729: LD_INT 82
33731: PUSH
33732: LD_INT 83
33734: PUSH
33735: LD_INT 84
33737: PUSH
33738: LD_INT 85
33740: PUSH
33741: LD_INT 86
33743: PUSH
33744: LD_INT 11
33746: PUSH
33747: LD_INT 9
33749: PUSH
33750: LD_INT 20
33752: PUSH
33753: LD_INT 19
33755: PUSH
33756: LD_INT 21
33758: PUSH
33759: LD_INT 24
33761: PUSH
33762: LD_INT 22
33764: PUSH
33765: LD_INT 25
33767: PUSH
33768: LD_INT 28
33770: PUSH
33771: LD_INT 29
33773: PUSH
33774: LD_INT 30
33776: PUSH
33777: LD_INT 31
33779: PUSH
33780: LD_INT 37
33782: PUSH
33783: LD_INT 38
33785: PUSH
33786: LD_INT 32
33788: PUSH
33789: LD_INT 27
33791: PUSH
33792: LD_INT 33
33794: PUSH
33795: LD_INT 69
33797: PUSH
33798: LD_INT 39
33800: PUSH
33801: LD_INT 34
33803: PUSH
33804: LD_INT 40
33806: PUSH
33807: LD_INT 71
33809: PUSH
33810: LD_INT 23
33812: PUSH
33813: LD_INT 44
33815: PUSH
33816: LD_INT 48
33818: PUSH
33819: LD_INT 49
33821: PUSH
33822: LD_INT 50
33824: PUSH
33825: LD_INT 51
33827: PUSH
33828: LD_INT 52
33830: PUSH
33831: LD_INT 53
33833: PUSH
33834: LD_INT 54
33836: PUSH
33837: LD_INT 55
33839: PUSH
33840: LD_INT 56
33842: PUSH
33843: LD_INT 57
33845: PUSH
33846: LD_INT 58
33848: PUSH
33849: LD_INT 59
33851: PUSH
33852: LD_INT 63
33854: PUSH
33855: LD_INT 64
33857: PUSH
33858: LD_INT 65
33860: PUSH
33861: LD_INT 82
33863: PUSH
33864: LD_INT 83
33866: PUSH
33867: LD_INT 84
33869: PUSH
33870: LD_INT 85
33872: PUSH
33873: LD_INT 86
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: ST_TO_ADDR
33931: GO 33934
33933: POP
// if state > - 1 and state < 3 then
33934: LD_VAR 0 3
33938: PUSH
33939: LD_INT 1
33941: NEG
33942: GREATER
33943: IFFALSE 33955
33945: PUSH
33946: LD_VAR 0 3
33950: PUSH
33951: LD_INT 3
33953: LESS
33954: AND
33955: IFFALSE 34012
// for i in result do
33957: LD_ADDR_VAR 0 5
33961: PUSH
33962: LD_VAR 0 4
33966: PUSH
33967: FOR_IN
33968: IFFALSE 34010
// if GetTech ( i , side ) <> state then
33970: LD_VAR 0 5
33974: PPUSH
33975: LD_VAR 0 1
33979: PPUSH
33980: CALL_OW 321
33984: PUSH
33985: LD_VAR 0 3
33989: NONEQUAL
33990: IFFALSE 34008
// result := result diff i ;
33992: LD_ADDR_VAR 0 4
33996: PUSH
33997: LD_VAR 0 4
34001: PUSH
34002: LD_VAR 0 5
34006: DIFF
34007: ST_TO_ADDR
34008: GO 33967
34010: POP
34011: POP
// end ;
34012: LD_VAR 0 4
34016: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34017: LD_INT 0
34019: PPUSH
34020: PPUSH
34021: PPUSH
// result := true ;
34022: LD_ADDR_VAR 0 3
34026: PUSH
34027: LD_INT 1
34029: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34030: LD_ADDR_VAR 0 5
34034: PUSH
34035: LD_VAR 0 2
34039: PPUSH
34040: CALL_OW 480
34044: ST_TO_ADDR
// if not tmp then
34045: LD_VAR 0 5
34049: NOT
34050: IFFALSE 34054
// exit ;
34052: GO 34103
// for i in tmp do
34054: LD_ADDR_VAR 0 4
34058: PUSH
34059: LD_VAR 0 5
34063: PUSH
34064: FOR_IN
34065: IFFALSE 34101
// if GetTech ( i , side ) <> state_researched then
34067: LD_VAR 0 4
34071: PPUSH
34072: LD_VAR 0 1
34076: PPUSH
34077: CALL_OW 321
34081: PUSH
34082: LD_INT 2
34084: NONEQUAL
34085: IFFALSE 34099
// begin result := false ;
34087: LD_ADDR_VAR 0 3
34091: PUSH
34092: LD_INT 0
34094: ST_TO_ADDR
// exit ;
34095: POP
34096: POP
34097: GO 34103
// end ;
34099: GO 34064
34101: POP
34102: POP
// end ;
34103: LD_VAR 0 3
34107: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34108: LD_INT 0
34110: PPUSH
34111: PPUSH
34112: PPUSH
34113: PPUSH
34114: PPUSH
34115: PPUSH
34116: PPUSH
34117: PPUSH
34118: PPUSH
34119: PPUSH
34120: PPUSH
34121: PPUSH
34122: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34123: LD_VAR 0 1
34127: NOT
34128: IFTRUE 34145
34130: PUSH
34131: LD_VAR 0 1
34135: PPUSH
34136: CALL_OW 257
34140: PUSH
34141: LD_INT 9
34143: NONEQUAL
34144: OR
34145: IFFALSE 34149
// exit ;
34147: GO 34728
// side := GetSide ( unit ) ;
34149: LD_ADDR_VAR 0 9
34153: PUSH
34154: LD_VAR 0 1
34158: PPUSH
34159: CALL_OW 255
34163: ST_TO_ADDR
// tech_space := tech_spacanom ;
34164: LD_ADDR_VAR 0 12
34168: PUSH
34169: LD_INT 29
34171: ST_TO_ADDR
// tech_time := tech_taurad ;
34172: LD_ADDR_VAR 0 13
34176: PUSH
34177: LD_INT 28
34179: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34180: LD_ADDR_VAR 0 11
34184: PUSH
34185: LD_VAR 0 1
34189: PPUSH
34190: CALL_OW 310
34194: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34195: LD_VAR 0 11
34199: PPUSH
34200: CALL_OW 247
34204: PUSH
34205: LD_INT 2
34207: EQUAL
34208: IFFALSE 34212
// exit ;
34210: GO 34728
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34212: LD_ADDR_VAR 0 8
34216: PUSH
34217: LD_INT 81
34219: PUSH
34220: LD_VAR 0 9
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 3
34231: PUSH
34232: LD_INT 21
34234: PUSH
34235: LD_INT 3
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PPUSH
34250: CALL_OW 69
34254: ST_TO_ADDR
// if not tmp then
34255: LD_VAR 0 8
34259: NOT
34260: IFFALSE 34264
// exit ;
34262: GO 34728
// if in_unit then
34264: LD_VAR 0 11
34268: IFFALSE 34292
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34270: LD_ADDR_VAR 0 10
34274: PUSH
34275: LD_VAR 0 8
34279: PPUSH
34280: LD_VAR 0 11
34284: PPUSH
34285: CALL_OW 74
34289: ST_TO_ADDR
34290: GO 34312
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34292: LD_ADDR_VAR 0 10
34296: PUSH
34297: LD_VAR 0 8
34301: PPUSH
34302: LD_VAR 0 1
34306: PPUSH
34307: CALL_OW 74
34311: ST_TO_ADDR
// if not enemy then
34312: LD_VAR 0 10
34316: NOT
34317: IFFALSE 34321
// exit ;
34319: GO 34728
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34321: LD_VAR 0 11
34325: IFFALSE 34347
34327: PUSH
34328: LD_VAR 0 11
34332: PPUSH
34333: LD_VAR 0 10
34337: PPUSH
34338: CALL_OW 296
34342: PUSH
34343: LD_INT 13
34345: GREATER
34346: AND
34347: IFTRUE 34369
34349: PUSH
34350: LD_VAR 0 1
34354: PPUSH
34355: LD_VAR 0 10
34359: PPUSH
34360: CALL_OW 296
34364: PUSH
34365: LD_INT 12
34367: GREATER
34368: OR
34369: IFFALSE 34373
// exit ;
34371: GO 34728
// missile := [ 1 ] ;
34373: LD_ADDR_VAR 0 14
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: EMPTY
34382: LIST
34383: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34384: LD_VAR 0 9
34388: PPUSH
34389: LD_VAR 0 12
34393: PPUSH
34394: CALL_OW 325
34398: IFFALSE 34427
// missile := Replace ( missile , missile + 1 , 2 ) ;
34400: LD_ADDR_VAR 0 14
34404: PUSH
34405: LD_VAR 0 14
34409: PPUSH
34410: LD_VAR 0 14
34414: PUSH
34415: LD_INT 1
34417: PLUS
34418: PPUSH
34419: LD_INT 2
34421: PPUSH
34422: CALL_OW 1
34426: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34427: LD_VAR 0 9
34431: PPUSH
34432: LD_VAR 0 13
34436: PPUSH
34437: CALL_OW 325
34441: IFFALSE 34465
34443: PUSH
34444: LD_VAR 0 10
34448: PPUSH
34449: CALL_OW 255
34453: PPUSH
34454: LD_VAR 0 13
34458: PPUSH
34459: CALL_OW 325
34463: NOT
34464: AND
34465: IFFALSE 34494
// missile := Replace ( missile , missile + 1 , 3 ) ;
34467: LD_ADDR_VAR 0 14
34471: PUSH
34472: LD_VAR 0 14
34476: PPUSH
34477: LD_VAR 0 14
34481: PUSH
34482: LD_INT 1
34484: PLUS
34485: PPUSH
34486: LD_INT 3
34488: PPUSH
34489: CALL_OW 1
34493: ST_TO_ADDR
// if missile < 2 then
34494: LD_VAR 0 14
34498: PUSH
34499: LD_INT 2
34501: LESS
34502: IFFALSE 34506
// exit ;
34504: GO 34728
// x := GetX ( enemy ) ;
34506: LD_ADDR_VAR 0 4
34510: PUSH
34511: LD_VAR 0 10
34515: PPUSH
34516: CALL_OW 250
34520: ST_TO_ADDR
// y := GetY ( enemy ) ;
34521: LD_ADDR_VAR 0 5
34525: PUSH
34526: LD_VAR 0 10
34530: PPUSH
34531: CALL_OW 251
34535: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34536: LD_ADDR_VAR 0 6
34540: PUSH
34541: LD_VAR 0 4
34545: PUSH
34546: LD_INT 1
34548: NEG
34549: PPUSH
34550: LD_INT 1
34552: PPUSH
34553: CALL_OW 12
34557: PLUS
34558: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34559: LD_ADDR_VAR 0 7
34563: PUSH
34564: LD_VAR 0 5
34568: PUSH
34569: LD_INT 1
34571: NEG
34572: PPUSH
34573: LD_INT 1
34575: PPUSH
34576: CALL_OW 12
34580: PLUS
34581: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34582: LD_VAR 0 6
34586: PPUSH
34587: LD_VAR 0 7
34591: PPUSH
34592: CALL_OW 488
34596: NOT
34597: IFFALSE 34619
// begin _x := x ;
34599: LD_ADDR_VAR 0 6
34603: PUSH
34604: LD_VAR 0 4
34608: ST_TO_ADDR
// _y := y ;
34609: LD_ADDR_VAR 0 7
34613: PUSH
34614: LD_VAR 0 5
34618: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34619: LD_ADDR_VAR 0 3
34623: PUSH
34624: LD_INT 1
34626: PPUSH
34627: LD_VAR 0 14
34631: PPUSH
34632: CALL_OW 12
34636: ST_TO_ADDR
// case i of 1 :
34637: LD_VAR 0 3
34641: PUSH
34642: LD_INT 1
34644: DOUBLE
34645: EQUAL
34646: IFTRUE 34650
34648: GO 34667
34650: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34651: LD_VAR 0 1
34655: PPUSH
34656: LD_VAR 0 10
34660: PPUSH
34661: CALL_OW 115
34665: GO 34728
34667: LD_INT 2
34669: DOUBLE
34670: EQUAL
34671: IFTRUE 34675
34673: GO 34697
34675: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34676: LD_VAR 0 1
34680: PPUSH
34681: LD_VAR 0 6
34685: PPUSH
34686: LD_VAR 0 7
34690: PPUSH
34691: CALL_OW 153
34695: GO 34728
34697: LD_INT 3
34699: DOUBLE
34700: EQUAL
34701: IFTRUE 34705
34703: GO 34727
34705: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34706: LD_VAR 0 1
34710: PPUSH
34711: LD_VAR 0 6
34715: PPUSH
34716: LD_VAR 0 7
34720: PPUSH
34721: CALL_OW 154
34725: GO 34728
34727: POP
// end ;
34728: LD_VAR 0 2
34732: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34733: LD_INT 0
34735: PPUSH
34736: PPUSH
34737: PPUSH
34738: PPUSH
34739: PPUSH
34740: PPUSH
// if not unit or not building then
34741: LD_VAR 0 1
34745: NOT
34746: IFTRUE 34755
34748: PUSH
34749: LD_VAR 0 2
34753: NOT
34754: OR
34755: IFFALSE 34759
// exit ;
34757: GO 34917
// x := GetX ( building ) ;
34759: LD_ADDR_VAR 0 5
34763: PUSH
34764: LD_VAR 0 2
34768: PPUSH
34769: CALL_OW 250
34773: ST_TO_ADDR
// y := GetY ( building ) ;
34774: LD_ADDR_VAR 0 6
34778: PUSH
34779: LD_VAR 0 2
34783: PPUSH
34784: CALL_OW 251
34788: ST_TO_ADDR
// for i := 0 to 5 do
34789: LD_ADDR_VAR 0 4
34793: PUSH
34794: DOUBLE
34795: LD_INT 0
34797: DEC
34798: ST_TO_ADDR
34799: LD_INT 5
34801: PUSH
34802: FOR_TO
34803: IFFALSE 34915
// begin _x := ShiftX ( x , i , 3 ) ;
34805: LD_ADDR_VAR 0 7
34809: PUSH
34810: LD_VAR 0 5
34814: PPUSH
34815: LD_VAR 0 4
34819: PPUSH
34820: LD_INT 3
34822: PPUSH
34823: CALL_OW 272
34827: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34828: LD_ADDR_VAR 0 8
34832: PUSH
34833: LD_VAR 0 6
34837: PPUSH
34838: LD_VAR 0 4
34842: PPUSH
34843: LD_INT 3
34845: PPUSH
34846: CALL_OW 273
34850: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34851: LD_VAR 0 7
34855: PPUSH
34856: LD_VAR 0 8
34860: PPUSH
34861: CALL_OW 488
34865: NOT
34866: IFFALSE 34870
// continue ;
34868: GO 34802
// if HexInfo ( _x , _y ) = 0 then
34870: LD_VAR 0 7
34874: PPUSH
34875: LD_VAR 0 8
34879: PPUSH
34880: CALL_OW 428
34884: PUSH
34885: LD_INT 0
34887: EQUAL
34888: IFFALSE 34913
// begin ComMoveXY ( unit , _x , _y ) ;
34890: LD_VAR 0 1
34894: PPUSH
34895: LD_VAR 0 7
34899: PPUSH
34900: LD_VAR 0 8
34904: PPUSH
34905: CALL_OW 111
// exit ;
34909: POP
34910: POP
34911: GO 34917
// end ; end ;
34913: GO 34802
34915: POP
34916: POP
// end ;
34917: LD_VAR 0 3
34921: RET
// export function ScanBase ( side , base_area ) ; begin
34922: LD_INT 0
34924: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34925: LD_ADDR_VAR 0 3
34929: PUSH
34930: LD_VAR 0 2
34934: PPUSH
34935: LD_INT 81
34937: PUSH
34938: LD_VAR 0 1
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PPUSH
34947: CALL_OW 70
34951: ST_TO_ADDR
// end ;
34952: LD_VAR 0 3
34956: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34957: LD_INT 0
34959: PPUSH
34960: PPUSH
34961: PPUSH
34962: PPUSH
// result := false ;
34963: LD_ADDR_VAR 0 2
34967: PUSH
34968: LD_INT 0
34970: ST_TO_ADDR
// side := GetSide ( unit ) ;
34971: LD_ADDR_VAR 0 3
34975: PUSH
34976: LD_VAR 0 1
34980: PPUSH
34981: CALL_OW 255
34985: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34986: LD_ADDR_VAR 0 4
34990: PUSH
34991: LD_VAR 0 1
34995: PPUSH
34996: CALL_OW 248
35000: ST_TO_ADDR
// case nat of 1 :
35001: LD_VAR 0 4
35005: PUSH
35006: LD_INT 1
35008: DOUBLE
35009: EQUAL
35010: IFTRUE 35014
35012: GO 35025
35014: POP
// tech := tech_lassight ; 2 :
35015: LD_ADDR_VAR 0 5
35019: PUSH
35020: LD_INT 12
35022: ST_TO_ADDR
35023: GO 35064
35025: LD_INT 2
35027: DOUBLE
35028: EQUAL
35029: IFTRUE 35033
35031: GO 35044
35033: POP
// tech := tech_mortar ; 3 :
35034: LD_ADDR_VAR 0 5
35038: PUSH
35039: LD_INT 41
35041: ST_TO_ADDR
35042: GO 35064
35044: LD_INT 3
35046: DOUBLE
35047: EQUAL
35048: IFTRUE 35052
35050: GO 35063
35052: POP
// tech := tech_bazooka ; end ;
35053: LD_ADDR_VAR 0 5
35057: PUSH
35058: LD_INT 44
35060: ST_TO_ADDR
35061: GO 35064
35063: POP
// if Researched ( side , tech ) then
35064: LD_VAR 0 3
35068: PPUSH
35069: LD_VAR 0 5
35073: PPUSH
35074: CALL_OW 325
35078: IFFALSE 35105
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35080: LD_ADDR_VAR 0 2
35084: PUSH
35085: LD_INT 5
35087: PUSH
35088: LD_INT 8
35090: PUSH
35091: LD_INT 9
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: LIST
35098: PUSH
35099: LD_VAR 0 4
35103: ARRAY
35104: ST_TO_ADDR
// end ;
35105: LD_VAR 0 2
35109: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35110: LD_INT 0
35112: PPUSH
35113: PPUSH
35114: PPUSH
// if not mines then
35115: LD_VAR 0 2
35119: NOT
35120: IFFALSE 35124
// exit ;
35122: GO 35268
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35124: LD_ADDR_VAR 0 5
35128: PUSH
35129: LD_INT 81
35131: PUSH
35132: LD_VAR 0 1
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 3
35143: PUSH
35144: LD_INT 21
35146: PUSH
35147: LD_INT 3
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PPUSH
35162: CALL_OW 69
35166: ST_TO_ADDR
// for i in mines do
35167: LD_ADDR_VAR 0 4
35171: PUSH
35172: LD_VAR 0 2
35176: PUSH
35177: FOR_IN
35178: IFFALSE 35266
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35180: LD_VAR 0 4
35184: PUSH
35185: LD_INT 1
35187: ARRAY
35188: PPUSH
35189: LD_VAR 0 4
35193: PUSH
35194: LD_INT 2
35196: ARRAY
35197: PPUSH
35198: CALL_OW 458
35202: NOT
35203: IFFALSE 35207
// continue ;
35205: GO 35177
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35207: LD_VAR 0 4
35211: PUSH
35212: LD_INT 1
35214: ARRAY
35215: PPUSH
35216: LD_VAR 0 4
35220: PUSH
35221: LD_INT 2
35223: ARRAY
35224: PPUSH
35225: CALL_OW 428
35229: PUSH
35230: LD_VAR 0 5
35234: IN
35235: IFFALSE 35264
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35237: LD_VAR 0 4
35241: PUSH
35242: LD_INT 1
35244: ARRAY
35245: PPUSH
35246: LD_VAR 0 4
35250: PUSH
35251: LD_INT 2
35253: ARRAY
35254: PPUSH
35255: LD_VAR 0 1
35259: PPUSH
35260: CALL_OW 456
// end ;
35264: GO 35177
35266: POP
35267: POP
// end ;
35268: LD_VAR 0 3
35272: RET
// export function Count ( array ) ; begin
35273: LD_INT 0
35275: PPUSH
// result := array + 0 ;
35276: LD_ADDR_VAR 0 2
35280: PUSH
35281: LD_VAR 0 1
35285: PUSH
35286: LD_INT 0
35288: PLUS
35289: ST_TO_ADDR
// end ;
35290: LD_VAR 0 2
35294: RET
// export function IsEmpty ( building ) ; begin
35295: LD_INT 0
35297: PPUSH
// if not building then
35298: LD_VAR 0 1
35302: NOT
35303: IFFALSE 35307
// exit ;
35305: GO 35350
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35307: LD_ADDR_VAR 0 2
35311: PUSH
35312: LD_VAR 0 1
35316: PUSH
35317: LD_INT 22
35319: PUSH
35320: LD_VAR 0 1
35324: PPUSH
35325: CALL_OW 255
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 58
35336: PUSH
35337: EMPTY
35338: LIST
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PPUSH
35344: CALL_OW 69
35348: IN
35349: ST_TO_ADDR
// end ;
35350: LD_VAR 0 2
35354: RET
// export function IsNotFull ( building ) ; var places ; begin
35355: LD_INT 0
35357: PPUSH
35358: PPUSH
// if not building then
35359: LD_VAR 0 1
35363: NOT
35364: IFFALSE 35368
// exit ;
35366: GO 35396
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35368: LD_ADDR_VAR 0 2
35372: PUSH
35373: LD_VAR 0 1
35377: PPUSH
35378: LD_INT 3
35380: PUSH
35381: LD_INT 62
35383: PUSH
35384: EMPTY
35385: LIST
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PPUSH
35391: CALL_OW 72
35395: ST_TO_ADDR
// end ;
35396: LD_VAR 0 2
35400: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35401: LD_INT 0
35403: PPUSH
35404: PPUSH
35405: PPUSH
35406: PPUSH
// tmp := [ ] ;
35407: LD_ADDR_VAR 0 3
35411: PUSH
35412: EMPTY
35413: ST_TO_ADDR
// list := [ ] ;
35414: LD_ADDR_VAR 0 5
35418: PUSH
35419: EMPTY
35420: ST_TO_ADDR
// for i = 16 to 25 do
35421: LD_ADDR_VAR 0 4
35425: PUSH
35426: DOUBLE
35427: LD_INT 16
35429: DEC
35430: ST_TO_ADDR
35431: LD_INT 25
35433: PUSH
35434: FOR_TO
35435: IFFALSE 35508
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35437: LD_ADDR_VAR 0 3
35441: PUSH
35442: LD_VAR 0 3
35446: PUSH
35447: LD_INT 22
35449: PUSH
35450: LD_VAR 0 1
35454: PPUSH
35455: CALL_OW 255
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 91
35466: PUSH
35467: LD_VAR 0 1
35471: PUSH
35472: LD_INT 6
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 30
35482: PUSH
35483: LD_VAR 0 4
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: PUSH
35497: EMPTY
35498: LIST
35499: PPUSH
35500: CALL_OW 69
35504: ADD
35505: ST_TO_ADDR
35506: GO 35434
35508: POP
35509: POP
// for i = 1 to tmp do
35510: LD_ADDR_VAR 0 4
35514: PUSH
35515: DOUBLE
35516: LD_INT 1
35518: DEC
35519: ST_TO_ADDR
35520: LD_VAR 0 3
35524: PUSH
35525: FOR_TO
35526: IFFALSE 35614
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35528: LD_ADDR_VAR 0 5
35532: PUSH
35533: LD_VAR 0 5
35537: PUSH
35538: LD_VAR 0 3
35542: PUSH
35543: LD_VAR 0 4
35547: ARRAY
35548: PPUSH
35549: CALL_OW 266
35553: PUSH
35554: LD_VAR 0 3
35558: PUSH
35559: LD_VAR 0 4
35563: ARRAY
35564: PPUSH
35565: CALL_OW 250
35569: PUSH
35570: LD_VAR 0 3
35574: PUSH
35575: LD_VAR 0 4
35579: ARRAY
35580: PPUSH
35581: CALL_OW 251
35585: PUSH
35586: LD_VAR 0 3
35590: PUSH
35591: LD_VAR 0 4
35595: ARRAY
35596: PPUSH
35597: CALL_OW 254
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: PUSH
35608: EMPTY
35609: LIST
35610: ADD
35611: ST_TO_ADDR
35612: GO 35525
35614: POP
35615: POP
// result := list ;
35616: LD_ADDR_VAR 0 2
35620: PUSH
35621: LD_VAR 0 5
35625: ST_TO_ADDR
// end ;
35626: LD_VAR 0 2
35630: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35631: LD_INT 0
35633: PPUSH
35634: PPUSH
35635: PPUSH
35636: PPUSH
35637: PPUSH
35638: PPUSH
35639: PPUSH
// if not factory then
35640: LD_VAR 0 1
35644: NOT
35645: IFFALSE 35649
// exit ;
35647: GO 36252
// if control = control_apeman then
35649: LD_VAR 0 4
35653: PUSH
35654: LD_INT 5
35656: EQUAL
35657: IFFALSE 35766
// begin tmp := UnitsInside ( factory ) ;
35659: LD_ADDR_VAR 0 8
35663: PUSH
35664: LD_VAR 0 1
35668: PPUSH
35669: CALL_OW 313
35673: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35674: LD_VAR 0 8
35678: PPUSH
35679: LD_INT 25
35681: PUSH
35682: LD_INT 12
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PPUSH
35689: CALL_OW 72
35693: NOT
35694: IFFALSE 35704
// control := control_manual ;
35696: LD_ADDR_VAR 0 4
35700: PUSH
35701: LD_INT 1
35703: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35704: LD_ADDR_VAR 0 8
35708: PUSH
35709: LD_VAR 0 1
35713: PPUSH
35714: CALL 35401 0 1
35718: ST_TO_ADDR
// if tmp then
35719: LD_VAR 0 8
35723: IFFALSE 35766
// begin for i in tmp do
35725: LD_ADDR_VAR 0 7
35729: PUSH
35730: LD_VAR 0 8
35734: PUSH
35735: FOR_IN
35736: IFFALSE 35764
// if i [ 1 ] = b_ext_radio then
35738: LD_VAR 0 7
35742: PUSH
35743: LD_INT 1
35745: ARRAY
35746: PUSH
35747: LD_INT 22
35749: EQUAL
35750: IFFALSE 35762
// begin control := control_remote ;
35752: LD_ADDR_VAR 0 4
35756: PUSH
35757: LD_INT 2
35759: ST_TO_ADDR
// break ;
35760: GO 35764
// end ;
35762: GO 35735
35764: POP
35765: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35766: LD_VAR 0 1
35770: PPUSH
35771: LD_VAR 0 2
35775: PPUSH
35776: LD_VAR 0 3
35780: PPUSH
35781: LD_VAR 0 4
35785: PPUSH
35786: LD_VAR 0 5
35790: PPUSH
35791: CALL_OW 448
35795: IFFALSE 35830
// begin result := [ chassis , engine , control , weapon ] ;
35797: LD_ADDR_VAR 0 6
35801: PUSH
35802: LD_VAR 0 2
35806: PUSH
35807: LD_VAR 0 3
35811: PUSH
35812: LD_VAR 0 4
35816: PUSH
35817: LD_VAR 0 5
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: ST_TO_ADDR
// exit ;
35828: GO 36252
// end ; _chassis := AvailableChassisList ( factory ) ;
35830: LD_ADDR_VAR 0 9
35834: PUSH
35835: LD_VAR 0 1
35839: PPUSH
35840: CALL_OW 475
35844: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35845: LD_ADDR_VAR 0 11
35849: PUSH
35850: LD_VAR 0 1
35854: PPUSH
35855: CALL_OW 476
35859: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35860: LD_ADDR_VAR 0 12
35864: PUSH
35865: LD_VAR 0 1
35869: PPUSH
35870: CALL_OW 477
35874: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35875: LD_ADDR_VAR 0 10
35879: PUSH
35880: LD_VAR 0 1
35884: PPUSH
35885: CALL_OW 478
35889: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35890: LD_VAR 0 9
35894: NOT
35895: IFTRUE 35904
35897: PUSH
35898: LD_VAR 0 11
35902: NOT
35903: OR
35904: IFTRUE 35913
35906: PUSH
35907: LD_VAR 0 12
35911: NOT
35912: OR
35913: IFTRUE 35922
35915: PUSH
35916: LD_VAR 0 10
35920: NOT
35921: OR
35922: IFFALSE 35957
// begin result := [ chassis , engine , control , weapon ] ;
35924: LD_ADDR_VAR 0 6
35928: PUSH
35929: LD_VAR 0 2
35933: PUSH
35934: LD_VAR 0 3
35938: PUSH
35939: LD_VAR 0 4
35943: PUSH
35944: LD_VAR 0 5
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: ST_TO_ADDR
// exit ;
35955: GO 36252
// end ; if not chassis in _chassis then
35957: LD_VAR 0 2
35961: PUSH
35962: LD_VAR 0 9
35966: IN
35967: NOT
35968: IFFALSE 35994
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35970: LD_ADDR_VAR 0 2
35974: PUSH
35975: LD_VAR 0 9
35979: PUSH
35980: LD_INT 1
35982: PPUSH
35983: LD_VAR 0 9
35987: PPUSH
35988: CALL_OW 12
35992: ARRAY
35993: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35994: LD_VAR 0 2
35998: PPUSH
35999: LD_VAR 0 3
36003: PPUSH
36004: CALL 36257 0 2
36008: NOT
36009: IFFALSE 36070
// repeat engine := _engine [ 1 ] ;
36011: LD_ADDR_VAR 0 3
36015: PUSH
36016: LD_VAR 0 11
36020: PUSH
36021: LD_INT 1
36023: ARRAY
36024: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36025: LD_ADDR_VAR 0 11
36029: PUSH
36030: LD_VAR 0 11
36034: PPUSH
36035: LD_INT 1
36037: PPUSH
36038: CALL_OW 3
36042: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36043: LD_VAR 0 2
36047: PPUSH
36048: LD_VAR 0 3
36052: PPUSH
36053: CALL 36257 0 2
36057: IFTRUE 36068
36059: PUSH
36060: LD_VAR 0 11
36064: PUSH
36065: EMPTY
36066: EQUAL
36067: OR
36068: IFFALSE 36011
// if not control in _control then
36070: LD_VAR 0 4
36074: PUSH
36075: LD_VAR 0 12
36079: IN
36080: NOT
36081: IFFALSE 36107
// control := _control [ rand ( 1 , _control ) ] ;
36083: LD_ADDR_VAR 0 4
36087: PUSH
36088: LD_VAR 0 12
36092: PUSH
36093: LD_INT 1
36095: PPUSH
36096: LD_VAR 0 12
36100: PPUSH
36101: CALL_OW 12
36105: ARRAY
36106: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36107: LD_VAR 0 2
36111: PPUSH
36112: LD_VAR 0 5
36116: PPUSH
36117: CALL 36479 0 2
36121: NOT
36122: IFFALSE 36183
// repeat weapon := _weapon [ 1 ] ;
36124: LD_ADDR_VAR 0 5
36128: PUSH
36129: LD_VAR 0 10
36133: PUSH
36134: LD_INT 1
36136: ARRAY
36137: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36138: LD_ADDR_VAR 0 10
36142: PUSH
36143: LD_VAR 0 10
36147: PPUSH
36148: LD_INT 1
36150: PPUSH
36151: CALL_OW 3
36155: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36156: LD_VAR 0 2
36160: PPUSH
36161: LD_VAR 0 5
36165: PPUSH
36166: CALL 36479 0 2
36170: IFTRUE 36181
36172: PUSH
36173: LD_VAR 0 10
36177: PUSH
36178: EMPTY
36179: EQUAL
36180: OR
36181: IFFALSE 36124
// result := [ ] ;
36183: LD_ADDR_VAR 0 6
36187: PUSH
36188: EMPTY
36189: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36190: LD_VAR 0 1
36194: PPUSH
36195: LD_VAR 0 2
36199: PPUSH
36200: LD_VAR 0 3
36204: PPUSH
36205: LD_VAR 0 4
36209: PPUSH
36210: LD_VAR 0 5
36214: PPUSH
36215: CALL_OW 448
36219: IFFALSE 36252
// result := [ chassis , engine , control , weapon ] ;
36221: LD_ADDR_VAR 0 6
36225: PUSH
36226: LD_VAR 0 2
36230: PUSH
36231: LD_VAR 0 3
36235: PUSH
36236: LD_VAR 0 4
36240: PUSH
36241: LD_VAR 0 5
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: ST_TO_ADDR
// end ;
36252: LD_VAR 0 6
36256: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36257: LD_INT 0
36259: PPUSH
// if not chassis or not engine then
36260: LD_VAR 0 1
36264: NOT
36265: IFTRUE 36274
36267: PUSH
36268: LD_VAR 0 2
36272: NOT
36273: OR
36274: IFFALSE 36278
// exit ;
36276: GO 36474
// case engine of engine_solar :
36278: LD_VAR 0 2
36282: PUSH
36283: LD_INT 2
36285: DOUBLE
36286: EQUAL
36287: IFTRUE 36291
36289: GO 36329
36291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36292: LD_ADDR_VAR 0 3
36296: PUSH
36297: LD_INT 11
36299: PUSH
36300: LD_INT 12
36302: PUSH
36303: LD_INT 13
36305: PUSH
36306: LD_INT 14
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: LD_INT 2
36314: PUSH
36315: LD_INT 3
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: ST_TO_ADDR
36327: GO 36458
36329: LD_INT 1
36331: DOUBLE
36332: EQUAL
36333: IFTRUE 36337
36335: GO 36399
36337: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36338: LD_ADDR_VAR 0 3
36342: PUSH
36343: LD_INT 11
36345: PUSH
36346: LD_INT 12
36348: PUSH
36349: LD_INT 13
36351: PUSH
36352: LD_INT 14
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: LD_INT 3
36363: PUSH
36364: LD_INT 4
36366: PUSH
36367: LD_INT 5
36369: PUSH
36370: LD_INT 21
36372: PUSH
36373: LD_INT 23
36375: PUSH
36376: LD_INT 22
36378: PUSH
36379: LD_INT 24
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: ST_TO_ADDR
36397: GO 36458
36399: LD_INT 3
36401: DOUBLE
36402: EQUAL
36403: IFTRUE 36407
36405: GO 36457
36407: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36408: LD_ADDR_VAR 0 3
36412: PUSH
36413: LD_INT 13
36415: PUSH
36416: LD_INT 14
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: LD_INT 3
36424: PUSH
36425: LD_INT 4
36427: PUSH
36428: LD_INT 5
36430: PUSH
36431: LD_INT 21
36433: PUSH
36434: LD_INT 22
36436: PUSH
36437: LD_INT 23
36439: PUSH
36440: LD_INT 24
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: ST_TO_ADDR
36455: GO 36458
36457: POP
// result := ( chassis in result ) ;
36458: LD_ADDR_VAR 0 3
36462: PUSH
36463: LD_VAR 0 1
36467: PUSH
36468: LD_VAR 0 3
36472: IN
36473: ST_TO_ADDR
// end ;
36474: LD_VAR 0 3
36478: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36479: LD_INT 0
36481: PPUSH
// if not chassis or not weapon then
36482: LD_VAR 0 1
36486: NOT
36487: IFTRUE 36496
36489: PUSH
36490: LD_VAR 0 2
36494: NOT
36495: OR
36496: IFFALSE 36500
// exit ;
36498: GO 37560
// case weapon of us_machine_gun :
36500: LD_VAR 0 2
36504: PUSH
36505: LD_INT 2
36507: DOUBLE
36508: EQUAL
36509: IFTRUE 36513
36511: GO 36543
36513: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36514: LD_ADDR_VAR 0 3
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: LD_INT 3
36527: PUSH
36528: LD_INT 4
36530: PUSH
36531: LD_INT 5
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: ST_TO_ADDR
36541: GO 37544
36543: LD_INT 3
36545: DOUBLE
36546: EQUAL
36547: IFTRUE 36551
36549: GO 36581
36551: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36552: LD_ADDR_VAR 0 3
36556: PUSH
36557: LD_INT 1
36559: PUSH
36560: LD_INT 2
36562: PUSH
36563: LD_INT 3
36565: PUSH
36566: LD_INT 4
36568: PUSH
36569: LD_INT 5
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: ST_TO_ADDR
36579: GO 37544
36581: LD_INT 11
36583: DOUBLE
36584: EQUAL
36585: IFTRUE 36589
36587: GO 36619
36589: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36590: LD_ADDR_VAR 0 3
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: LD_INT 2
36600: PUSH
36601: LD_INT 3
36603: PUSH
36604: LD_INT 4
36606: PUSH
36607: LD_INT 5
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: ST_TO_ADDR
36617: GO 37544
36619: LD_INT 4
36621: DOUBLE
36622: EQUAL
36623: IFTRUE 36627
36625: GO 36653
36627: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36628: LD_ADDR_VAR 0 3
36632: PUSH
36633: LD_INT 2
36635: PUSH
36636: LD_INT 3
36638: PUSH
36639: LD_INT 4
36641: PUSH
36642: LD_INT 5
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: ST_TO_ADDR
36651: GO 37544
36653: LD_INT 5
36655: DOUBLE
36656: EQUAL
36657: IFTRUE 36661
36659: GO 36687
36661: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36662: LD_ADDR_VAR 0 3
36666: PUSH
36667: LD_INT 2
36669: PUSH
36670: LD_INT 3
36672: PUSH
36673: LD_INT 4
36675: PUSH
36676: LD_INT 5
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: ST_TO_ADDR
36685: GO 37544
36687: LD_INT 9
36689: DOUBLE
36690: EQUAL
36691: IFTRUE 36695
36693: GO 36721
36695: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36696: LD_ADDR_VAR 0 3
36700: PUSH
36701: LD_INT 2
36703: PUSH
36704: LD_INT 3
36706: PUSH
36707: LD_INT 4
36709: PUSH
36710: LD_INT 5
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: ST_TO_ADDR
36719: GO 37544
36721: LD_INT 7
36723: DOUBLE
36724: EQUAL
36725: IFTRUE 36729
36727: GO 36755
36729: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36730: LD_ADDR_VAR 0 3
36734: PUSH
36735: LD_INT 2
36737: PUSH
36738: LD_INT 3
36740: PUSH
36741: LD_INT 4
36743: PUSH
36744: LD_INT 5
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: ST_TO_ADDR
36753: GO 37544
36755: LD_INT 12
36757: DOUBLE
36758: EQUAL
36759: IFTRUE 36763
36761: GO 36789
36763: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36764: LD_ADDR_VAR 0 3
36768: PUSH
36769: LD_INT 2
36771: PUSH
36772: LD_INT 3
36774: PUSH
36775: LD_INT 4
36777: PUSH
36778: LD_INT 5
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: ST_TO_ADDR
36787: GO 37544
36789: LD_INT 13
36791: DOUBLE
36792: EQUAL
36793: IFTRUE 36797
36795: GO 36823
36797: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36798: LD_ADDR_VAR 0 3
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: LD_INT 3
36808: PUSH
36809: LD_INT 4
36811: PUSH
36812: LD_INT 5
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: ST_TO_ADDR
36821: GO 37544
36823: LD_INT 14
36825: DOUBLE
36826: EQUAL
36827: IFTRUE 36831
36829: GO 36849
36831: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36832: LD_ADDR_VAR 0 3
36836: PUSH
36837: LD_INT 4
36839: PUSH
36840: LD_INT 5
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: ST_TO_ADDR
36847: GO 37544
36849: LD_INT 6
36851: DOUBLE
36852: EQUAL
36853: IFTRUE 36857
36855: GO 36875
36857: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36858: LD_ADDR_VAR 0 3
36862: PUSH
36863: LD_INT 4
36865: PUSH
36866: LD_INT 5
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: ST_TO_ADDR
36873: GO 37544
36875: LD_INT 10
36877: DOUBLE
36878: EQUAL
36879: IFTRUE 36883
36881: GO 36901
36883: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36884: LD_ADDR_VAR 0 3
36888: PUSH
36889: LD_INT 4
36891: PUSH
36892: LD_INT 5
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: ST_TO_ADDR
36899: GO 37544
36901: LD_INT 22
36903: DOUBLE
36904: EQUAL
36905: IFTRUE 36909
36907: GO 36935
36909: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36910: LD_ADDR_VAR 0 3
36914: PUSH
36915: LD_INT 11
36917: PUSH
36918: LD_INT 12
36920: PUSH
36921: LD_INT 13
36923: PUSH
36924: LD_INT 14
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: ST_TO_ADDR
36933: GO 37544
36935: LD_INT 23
36937: DOUBLE
36938: EQUAL
36939: IFTRUE 36943
36941: GO 36969
36943: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36944: LD_ADDR_VAR 0 3
36948: PUSH
36949: LD_INT 11
36951: PUSH
36952: LD_INT 12
36954: PUSH
36955: LD_INT 13
36957: PUSH
36958: LD_INT 14
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: ST_TO_ADDR
36967: GO 37544
36969: LD_INT 24
36971: DOUBLE
36972: EQUAL
36973: IFTRUE 36977
36975: GO 37003
36977: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36978: LD_ADDR_VAR 0 3
36982: PUSH
36983: LD_INT 11
36985: PUSH
36986: LD_INT 12
36988: PUSH
36989: LD_INT 13
36991: PUSH
36992: LD_INT 14
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: ST_TO_ADDR
37001: GO 37544
37003: LD_INT 30
37005: DOUBLE
37006: EQUAL
37007: IFTRUE 37011
37009: GO 37037
37011: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37012: LD_ADDR_VAR 0 3
37016: PUSH
37017: LD_INT 11
37019: PUSH
37020: LD_INT 12
37022: PUSH
37023: LD_INT 13
37025: PUSH
37026: LD_INT 14
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: ST_TO_ADDR
37035: GO 37544
37037: LD_INT 25
37039: DOUBLE
37040: EQUAL
37041: IFTRUE 37045
37043: GO 37063
37045: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37046: LD_ADDR_VAR 0 3
37050: PUSH
37051: LD_INT 13
37053: PUSH
37054: LD_INT 14
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: ST_TO_ADDR
37061: GO 37544
37063: LD_INT 27
37065: DOUBLE
37066: EQUAL
37067: IFTRUE 37071
37069: GO 37089
37071: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37072: LD_ADDR_VAR 0 3
37076: PUSH
37077: LD_INT 13
37079: PUSH
37080: LD_INT 14
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: ST_TO_ADDR
37087: GO 37544
37089: LD_INT 92
37091: DOUBLE
37092: EQUAL
37093: IFTRUE 37097
37095: GO 37123
37097: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37098: LD_ADDR_VAR 0 3
37102: PUSH
37103: LD_INT 11
37105: PUSH
37106: LD_INT 12
37108: PUSH
37109: LD_INT 13
37111: PUSH
37112: LD_INT 14
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: ST_TO_ADDR
37121: GO 37544
37123: LD_INT 28
37125: DOUBLE
37126: EQUAL
37127: IFTRUE 37131
37129: GO 37149
37131: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37132: LD_ADDR_VAR 0 3
37136: PUSH
37137: LD_INT 13
37139: PUSH
37140: LD_INT 14
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: ST_TO_ADDR
37147: GO 37544
37149: LD_INT 29
37151: DOUBLE
37152: EQUAL
37153: IFTRUE 37157
37155: GO 37175
37157: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37158: LD_ADDR_VAR 0 3
37162: PUSH
37163: LD_INT 13
37165: PUSH
37166: LD_INT 14
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: ST_TO_ADDR
37173: GO 37544
37175: LD_INT 31
37177: DOUBLE
37178: EQUAL
37179: IFTRUE 37183
37181: GO 37201
37183: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37184: LD_ADDR_VAR 0 3
37188: PUSH
37189: LD_INT 13
37191: PUSH
37192: LD_INT 14
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: ST_TO_ADDR
37199: GO 37544
37201: LD_INT 26
37203: DOUBLE
37204: EQUAL
37205: IFTRUE 37209
37207: GO 37227
37209: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37210: LD_ADDR_VAR 0 3
37214: PUSH
37215: LD_INT 13
37217: PUSH
37218: LD_INT 14
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: ST_TO_ADDR
37225: GO 37544
37227: LD_INT 42
37229: DOUBLE
37230: EQUAL
37231: IFTRUE 37235
37233: GO 37261
37235: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37236: LD_ADDR_VAR 0 3
37240: PUSH
37241: LD_INT 21
37243: PUSH
37244: LD_INT 22
37246: PUSH
37247: LD_INT 23
37249: PUSH
37250: LD_INT 24
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: ST_TO_ADDR
37259: GO 37544
37261: LD_INT 43
37263: DOUBLE
37264: EQUAL
37265: IFTRUE 37269
37267: GO 37295
37269: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37270: LD_ADDR_VAR 0 3
37274: PUSH
37275: LD_INT 21
37277: PUSH
37278: LD_INT 22
37280: PUSH
37281: LD_INT 23
37283: PUSH
37284: LD_INT 24
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: ST_TO_ADDR
37293: GO 37544
37295: LD_INT 44
37297: DOUBLE
37298: EQUAL
37299: IFTRUE 37303
37301: GO 37329
37303: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37304: LD_ADDR_VAR 0 3
37308: PUSH
37309: LD_INT 21
37311: PUSH
37312: LD_INT 22
37314: PUSH
37315: LD_INT 23
37317: PUSH
37318: LD_INT 24
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: ST_TO_ADDR
37327: GO 37544
37329: LD_INT 45
37331: DOUBLE
37332: EQUAL
37333: IFTRUE 37337
37335: GO 37363
37337: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37338: LD_ADDR_VAR 0 3
37342: PUSH
37343: LD_INT 21
37345: PUSH
37346: LD_INT 22
37348: PUSH
37349: LD_INT 23
37351: PUSH
37352: LD_INT 24
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: ST_TO_ADDR
37361: GO 37544
37363: LD_INT 49
37365: DOUBLE
37366: EQUAL
37367: IFTRUE 37371
37369: GO 37397
37371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37372: LD_ADDR_VAR 0 3
37376: PUSH
37377: LD_INT 21
37379: PUSH
37380: LD_INT 22
37382: PUSH
37383: LD_INT 23
37385: PUSH
37386: LD_INT 24
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: ST_TO_ADDR
37395: GO 37544
37397: LD_INT 51
37399: DOUBLE
37400: EQUAL
37401: IFTRUE 37405
37403: GO 37431
37405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37406: LD_ADDR_VAR 0 3
37410: PUSH
37411: LD_INT 21
37413: PUSH
37414: LD_INT 22
37416: PUSH
37417: LD_INT 23
37419: PUSH
37420: LD_INT 24
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: ST_TO_ADDR
37429: GO 37544
37431: LD_INT 52
37433: DOUBLE
37434: EQUAL
37435: IFTRUE 37439
37437: GO 37465
37439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37440: LD_ADDR_VAR 0 3
37444: PUSH
37445: LD_INT 21
37447: PUSH
37448: LD_INT 22
37450: PUSH
37451: LD_INT 23
37453: PUSH
37454: LD_INT 24
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: ST_TO_ADDR
37463: GO 37544
37465: LD_INT 53
37467: DOUBLE
37468: EQUAL
37469: IFTRUE 37473
37471: GO 37491
37473: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37474: LD_ADDR_VAR 0 3
37478: PUSH
37479: LD_INT 23
37481: PUSH
37482: LD_INT 24
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: ST_TO_ADDR
37489: GO 37544
37491: LD_INT 46
37493: DOUBLE
37494: EQUAL
37495: IFTRUE 37499
37497: GO 37517
37499: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37500: LD_ADDR_VAR 0 3
37504: PUSH
37505: LD_INT 23
37507: PUSH
37508: LD_INT 24
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: ST_TO_ADDR
37515: GO 37544
37517: LD_INT 47
37519: DOUBLE
37520: EQUAL
37521: IFTRUE 37525
37523: GO 37543
37525: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37526: LD_ADDR_VAR 0 3
37530: PUSH
37531: LD_INT 23
37533: PUSH
37534: LD_INT 24
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: ST_TO_ADDR
37541: GO 37544
37543: POP
// result := ( chassis in result ) ;
37544: LD_ADDR_VAR 0 3
37548: PUSH
37549: LD_VAR 0 1
37553: PUSH
37554: LD_VAR 0 3
37558: IN
37559: ST_TO_ADDR
// end ;
37560: LD_VAR 0 3
37564: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37565: LD_INT 0
37567: PPUSH
37568: PPUSH
37569: PPUSH
37570: PPUSH
37571: PPUSH
37572: PPUSH
37573: PPUSH
// result := array ;
37574: LD_ADDR_VAR 0 5
37578: PUSH
37579: LD_VAR 0 1
37583: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37584: LD_VAR 0 1
37588: NOT
37589: IFTRUE 37598
37591: PUSH
37592: LD_VAR 0 2
37596: NOT
37597: OR
37598: IFTRUE 37607
37600: PUSH
37601: LD_VAR 0 3
37605: NOT
37606: OR
37607: IFTRUE 37621
37609: PUSH
37610: LD_VAR 0 2
37614: PUSH
37615: LD_VAR 0 1
37619: GREATER
37620: OR
37621: IFTRUE 37635
37623: PUSH
37624: LD_VAR 0 3
37628: PUSH
37629: LD_VAR 0 1
37633: GREATER
37634: OR
37635: IFFALSE 37639
// exit ;
37637: GO 37935
// if direction then
37639: LD_VAR 0 4
37643: IFFALSE 37707
// begin d := 1 ;
37645: LD_ADDR_VAR 0 9
37649: PUSH
37650: LD_INT 1
37652: ST_TO_ADDR
// if i_from > i_to then
37653: LD_VAR 0 2
37657: PUSH
37658: LD_VAR 0 3
37662: GREATER
37663: IFFALSE 37689
// length := ( array - i_from ) + i_to else
37665: LD_ADDR_VAR 0 11
37669: PUSH
37670: LD_VAR 0 1
37674: PUSH
37675: LD_VAR 0 2
37679: MINUS
37680: PUSH
37681: LD_VAR 0 3
37685: PLUS
37686: ST_TO_ADDR
37687: GO 37705
// length := i_to - i_from ;
37689: LD_ADDR_VAR 0 11
37693: PUSH
37694: LD_VAR 0 3
37698: PUSH
37699: LD_VAR 0 2
37703: MINUS
37704: ST_TO_ADDR
// end else
37705: GO 37768
// begin d := - 1 ;
37707: LD_ADDR_VAR 0 9
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: ST_TO_ADDR
// if i_from > i_to then
37716: LD_VAR 0 2
37720: PUSH
37721: LD_VAR 0 3
37725: GREATER
37726: IFFALSE 37746
// length := i_from - i_to else
37728: LD_ADDR_VAR 0 11
37732: PUSH
37733: LD_VAR 0 2
37737: PUSH
37738: LD_VAR 0 3
37742: MINUS
37743: ST_TO_ADDR
37744: GO 37768
// length := ( array - i_to ) + i_from ;
37746: LD_ADDR_VAR 0 11
37750: PUSH
37751: LD_VAR 0 1
37755: PUSH
37756: LD_VAR 0 3
37760: MINUS
37761: PUSH
37762: LD_VAR 0 2
37766: PLUS
37767: ST_TO_ADDR
// end ; if not length then
37768: LD_VAR 0 11
37772: NOT
37773: IFFALSE 37777
// exit ;
37775: GO 37935
// tmp := array ;
37777: LD_ADDR_VAR 0 10
37781: PUSH
37782: LD_VAR 0 1
37786: ST_TO_ADDR
// for i = 1 to length do
37787: LD_ADDR_VAR 0 6
37791: PUSH
37792: DOUBLE
37793: LD_INT 1
37795: DEC
37796: ST_TO_ADDR
37797: LD_VAR 0 11
37801: PUSH
37802: FOR_TO
37803: IFFALSE 37923
// begin for j = 1 to array do
37805: LD_ADDR_VAR 0 7
37809: PUSH
37810: DOUBLE
37811: LD_INT 1
37813: DEC
37814: ST_TO_ADDR
37815: LD_VAR 0 1
37819: PUSH
37820: FOR_TO
37821: IFFALSE 37909
// begin k := j + d ;
37823: LD_ADDR_VAR 0 8
37827: PUSH
37828: LD_VAR 0 7
37832: PUSH
37833: LD_VAR 0 9
37837: PLUS
37838: ST_TO_ADDR
// if k > array then
37839: LD_VAR 0 8
37843: PUSH
37844: LD_VAR 0 1
37848: GREATER
37849: IFFALSE 37859
// k := 1 ;
37851: LD_ADDR_VAR 0 8
37855: PUSH
37856: LD_INT 1
37858: ST_TO_ADDR
// if not k then
37859: LD_VAR 0 8
37863: NOT
37864: IFFALSE 37876
// k := array ;
37866: LD_ADDR_VAR 0 8
37870: PUSH
37871: LD_VAR 0 1
37875: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37876: LD_ADDR_VAR 0 10
37880: PUSH
37881: LD_VAR 0 10
37885: PPUSH
37886: LD_VAR 0 8
37890: PPUSH
37891: LD_VAR 0 1
37895: PUSH
37896: LD_VAR 0 7
37900: ARRAY
37901: PPUSH
37902: CALL_OW 1
37906: ST_TO_ADDR
// end ;
37907: GO 37820
37909: POP
37910: POP
// array := tmp ;
37911: LD_ADDR_VAR 0 1
37915: PUSH
37916: LD_VAR 0 10
37920: ST_TO_ADDR
// end ;
37921: GO 37802
37923: POP
37924: POP
// result := array ;
37925: LD_ADDR_VAR 0 5
37929: PUSH
37930: LD_VAR 0 1
37934: ST_TO_ADDR
// end ;
37935: LD_VAR 0 5
37939: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37940: LD_INT 0
37942: PPUSH
37943: PPUSH
// result := 0 ;
37944: LD_ADDR_VAR 0 3
37948: PUSH
37949: LD_INT 0
37951: ST_TO_ADDR
// if not array or not value in array then
37952: LD_VAR 0 1
37956: NOT
37957: IFTRUE 37972
37959: PUSH
37960: LD_VAR 0 2
37964: PUSH
37965: LD_VAR 0 1
37969: IN
37970: NOT
37971: OR
37972: IFFALSE 37976
// exit ;
37974: GO 38030
// for i = 1 to array do
37976: LD_ADDR_VAR 0 4
37980: PUSH
37981: DOUBLE
37982: LD_INT 1
37984: DEC
37985: ST_TO_ADDR
37986: LD_VAR 0 1
37990: PUSH
37991: FOR_TO
37992: IFFALSE 38028
// if value = array [ i ] then
37994: LD_VAR 0 2
37998: PUSH
37999: LD_VAR 0 1
38003: PUSH
38004: LD_VAR 0 4
38008: ARRAY
38009: EQUAL
38010: IFFALSE 38026
// begin result := i ;
38012: LD_ADDR_VAR 0 3
38016: PUSH
38017: LD_VAR 0 4
38021: ST_TO_ADDR
// exit ;
38022: POP
38023: POP
38024: GO 38030
// end ;
38026: GO 37991
38028: POP
38029: POP
// end ;
38030: LD_VAR 0 3
38034: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38035: LD_INT 0
38037: PPUSH
// vc_chassis := chassis ;
38038: LD_ADDR_OWVAR 37
38042: PUSH
38043: LD_VAR 0 1
38047: ST_TO_ADDR
// vc_engine := engine ;
38048: LD_ADDR_OWVAR 39
38052: PUSH
38053: LD_VAR 0 2
38057: ST_TO_ADDR
// vc_control := control ;
38058: LD_ADDR_OWVAR 38
38062: PUSH
38063: LD_VAR 0 3
38067: ST_TO_ADDR
// vc_weapon := weapon ;
38068: LD_ADDR_OWVAR 40
38072: PUSH
38073: LD_VAR 0 4
38077: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38078: LD_ADDR_OWVAR 41
38082: PUSH
38083: LD_VAR 0 5
38087: ST_TO_ADDR
// end ;
38088: LD_VAR 0 6
38092: RET
// export function WantPlant ( unit ) ; var task ; begin
38093: LD_INT 0
38095: PPUSH
38096: PPUSH
// result := false ;
38097: LD_ADDR_VAR 0 2
38101: PUSH
38102: LD_INT 0
38104: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38105: LD_ADDR_VAR 0 3
38109: PUSH
38110: LD_VAR 0 1
38114: PPUSH
38115: CALL_OW 437
38119: ST_TO_ADDR
// if task then
38120: LD_VAR 0 3
38124: IFFALSE 38152
// if task [ 1 ] [ 1 ] = p then
38126: LD_VAR 0 3
38130: PUSH
38131: LD_INT 1
38133: ARRAY
38134: PUSH
38135: LD_INT 1
38137: ARRAY
38138: PUSH
38139: LD_STRING p
38141: EQUAL
38142: IFFALSE 38152
// result := true ;
38144: LD_ADDR_VAR 0 2
38148: PUSH
38149: LD_INT 1
38151: ST_TO_ADDR
// end ;
38152: LD_VAR 0 2
38156: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38157: LD_INT 0
38159: PPUSH
38160: PPUSH
38161: PPUSH
38162: PPUSH
// if pos < 1 then
38163: LD_VAR 0 2
38167: PUSH
38168: LD_INT 1
38170: LESS
38171: IFFALSE 38175
// exit ;
38173: GO 38478
// if pos = 1 then
38175: LD_VAR 0 2
38179: PUSH
38180: LD_INT 1
38182: EQUAL
38183: IFFALSE 38216
// result := Replace ( arr , pos [ 1 ] , value ) else
38185: LD_ADDR_VAR 0 4
38189: PUSH
38190: LD_VAR 0 1
38194: PPUSH
38195: LD_VAR 0 2
38199: PUSH
38200: LD_INT 1
38202: ARRAY
38203: PPUSH
38204: LD_VAR 0 3
38208: PPUSH
38209: CALL_OW 1
38213: ST_TO_ADDR
38214: GO 38478
// begin tmp := arr ;
38216: LD_ADDR_VAR 0 6
38220: PUSH
38221: LD_VAR 0 1
38225: ST_TO_ADDR
// s_arr := [ tmp ] ;
38226: LD_ADDR_VAR 0 7
38230: PUSH
38231: LD_VAR 0 6
38235: PUSH
38236: EMPTY
38237: LIST
38238: ST_TO_ADDR
// for i = 1 to pos - 1 do
38239: LD_ADDR_VAR 0 5
38243: PUSH
38244: DOUBLE
38245: LD_INT 1
38247: DEC
38248: ST_TO_ADDR
38249: LD_VAR 0 2
38253: PUSH
38254: LD_INT 1
38256: MINUS
38257: PUSH
38258: FOR_TO
38259: IFFALSE 38304
// begin tmp := tmp [ pos [ i ] ] ;
38261: LD_ADDR_VAR 0 6
38265: PUSH
38266: LD_VAR 0 6
38270: PUSH
38271: LD_VAR 0 2
38275: PUSH
38276: LD_VAR 0 5
38280: ARRAY
38281: ARRAY
38282: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38283: LD_ADDR_VAR 0 7
38287: PUSH
38288: LD_VAR 0 7
38292: PUSH
38293: LD_VAR 0 6
38297: PUSH
38298: EMPTY
38299: LIST
38300: ADD
38301: ST_TO_ADDR
// end ;
38302: GO 38258
38304: POP
38305: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38306: LD_ADDR_VAR 0 6
38310: PUSH
38311: LD_VAR 0 6
38315: PPUSH
38316: LD_VAR 0 2
38320: PUSH
38321: LD_VAR 0 2
38325: ARRAY
38326: PPUSH
38327: LD_VAR 0 3
38331: PPUSH
38332: CALL_OW 1
38336: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38337: LD_ADDR_VAR 0 7
38341: PUSH
38342: LD_VAR 0 7
38346: PPUSH
38347: LD_VAR 0 7
38351: PPUSH
38352: LD_VAR 0 6
38356: PPUSH
38357: CALL_OW 1
38361: ST_TO_ADDR
// for i = s_arr downto 2 do
38362: LD_ADDR_VAR 0 5
38366: PUSH
38367: DOUBLE
38368: LD_VAR 0 7
38372: INC
38373: ST_TO_ADDR
38374: LD_INT 2
38376: PUSH
38377: FOR_DOWNTO
38378: IFFALSE 38462
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38380: LD_ADDR_VAR 0 6
38384: PUSH
38385: LD_VAR 0 7
38389: PUSH
38390: LD_VAR 0 5
38394: PUSH
38395: LD_INT 1
38397: MINUS
38398: ARRAY
38399: PPUSH
38400: LD_VAR 0 2
38404: PUSH
38405: LD_VAR 0 5
38409: PUSH
38410: LD_INT 1
38412: MINUS
38413: ARRAY
38414: PPUSH
38415: LD_VAR 0 7
38419: PUSH
38420: LD_VAR 0 5
38424: ARRAY
38425: PPUSH
38426: CALL_OW 1
38430: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38431: LD_ADDR_VAR 0 7
38435: PUSH
38436: LD_VAR 0 7
38440: PPUSH
38441: LD_VAR 0 5
38445: PUSH
38446: LD_INT 1
38448: MINUS
38449: PPUSH
38450: LD_VAR 0 6
38454: PPUSH
38455: CALL_OW 1
38459: ST_TO_ADDR
// end ;
38460: GO 38377
38462: POP
38463: POP
// result := s_arr [ 1 ] ;
38464: LD_ADDR_VAR 0 4
38468: PUSH
38469: LD_VAR 0 7
38473: PUSH
38474: LD_INT 1
38476: ARRAY
38477: ST_TO_ADDR
// end ; end ;
38478: LD_VAR 0 4
38482: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38483: LD_INT 0
38485: PPUSH
38486: PPUSH
// if not list then
38487: LD_VAR 0 1
38491: NOT
38492: IFFALSE 38496
// exit ;
38494: GO 38587
// i := list [ pos1 ] ;
38496: LD_ADDR_VAR 0 5
38500: PUSH
38501: LD_VAR 0 1
38505: PUSH
38506: LD_VAR 0 2
38510: ARRAY
38511: ST_TO_ADDR
// if not i then
38512: LD_VAR 0 5
38516: NOT
38517: IFFALSE 38521
// exit ;
38519: GO 38587
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38521: LD_ADDR_VAR 0 1
38525: PUSH
38526: LD_VAR 0 1
38530: PPUSH
38531: LD_VAR 0 2
38535: PPUSH
38536: LD_VAR 0 1
38540: PUSH
38541: LD_VAR 0 3
38545: ARRAY
38546: PPUSH
38547: CALL_OW 1
38551: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38552: LD_ADDR_VAR 0 1
38556: PUSH
38557: LD_VAR 0 1
38561: PPUSH
38562: LD_VAR 0 3
38566: PPUSH
38567: LD_VAR 0 5
38571: PPUSH
38572: CALL_OW 1
38576: ST_TO_ADDR
// result := list ;
38577: LD_ADDR_VAR 0 4
38581: PUSH
38582: LD_VAR 0 1
38586: ST_TO_ADDR
// end ;
38587: LD_VAR 0 4
38591: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38592: LD_INT 0
38594: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38595: LD_ADDR_VAR 0 5
38599: PUSH
38600: LD_VAR 0 1
38604: PPUSH
38605: CALL_OW 250
38609: PPUSH
38610: LD_VAR 0 1
38614: PPUSH
38615: CALL_OW 251
38619: PPUSH
38620: LD_VAR 0 2
38624: PPUSH
38625: LD_VAR 0 3
38629: PPUSH
38630: LD_VAR 0 4
38634: PPUSH
38635: CALL 39017 0 5
38639: ST_TO_ADDR
// end ;
38640: LD_VAR 0 5
38644: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38645: LD_INT 0
38647: PPUSH
38648: PPUSH
38649: PPUSH
38650: PPUSH
// if not list or not unit then
38651: LD_VAR 0 2
38655: NOT
38656: IFTRUE 38665
38658: PUSH
38659: LD_VAR 0 1
38663: NOT
38664: OR
38665: IFFALSE 38669
// exit ;
38667: GO 39012
// result := [ ] ;
38669: LD_ADDR_VAR 0 5
38673: PUSH
38674: EMPTY
38675: ST_TO_ADDR
// for i in list do
38676: LD_ADDR_VAR 0 6
38680: PUSH
38681: LD_VAR 0 2
38685: PUSH
38686: FOR_IN
38687: IFFALSE 38905
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38689: LD_ADDR_VAR 0 8
38693: PUSH
38694: LD_VAR 0 1
38698: PPUSH
38699: LD_VAR 0 6
38703: PUSH
38704: LD_INT 1
38706: ARRAY
38707: PPUSH
38708: LD_VAR 0 6
38712: PUSH
38713: LD_INT 2
38715: ARRAY
38716: PPUSH
38717: CALL_OW 297
38721: ST_TO_ADDR
// if not Count ( result ) then
38722: LD_VAR 0 5
38726: PPUSH
38727: CALL 35273 0 1
38731: NOT
38732: IFFALSE 38765
// begin result := Join ( result , [ i , tmp ] ) ;
38734: LD_ADDR_VAR 0 5
38738: PUSH
38739: LD_VAR 0 5
38743: PPUSH
38744: LD_VAR 0 6
38748: PUSH
38749: LD_VAR 0 8
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PPUSH
38758: CALL 71205 0 2
38762: ST_TO_ADDR
// continue ;
38763: GO 38686
// end ; if result [ result ] [ 2 ] <= tmp then
38765: LD_VAR 0 5
38769: PUSH
38770: LD_VAR 0 5
38774: ARRAY
38775: PUSH
38776: LD_INT 2
38778: ARRAY
38779: PUSH
38780: LD_VAR 0 8
38784: LESSEQUAL
38785: IFFALSE 38818
// result := Join ( result , [ i , tmp ] ) else
38787: LD_ADDR_VAR 0 5
38791: PUSH
38792: LD_VAR 0 5
38796: PPUSH
38797: LD_VAR 0 6
38801: PUSH
38802: LD_VAR 0 8
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PPUSH
38811: CALL 71205 0 2
38815: ST_TO_ADDR
38816: GO 38903
// begin for j := 1 to Count ( result ) do
38818: LD_ADDR_VAR 0 7
38822: PUSH
38823: DOUBLE
38824: LD_INT 1
38826: DEC
38827: ST_TO_ADDR
38828: LD_VAR 0 5
38832: PPUSH
38833: CALL 35273 0 1
38837: PUSH
38838: FOR_TO
38839: IFFALSE 38901
// begin if tmp < result [ j ] [ 2 ] then
38841: LD_VAR 0 8
38845: PUSH
38846: LD_VAR 0 5
38850: PUSH
38851: LD_VAR 0 7
38855: ARRAY
38856: PUSH
38857: LD_INT 2
38859: ARRAY
38860: LESS
38861: IFFALSE 38899
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38863: LD_ADDR_VAR 0 5
38867: PUSH
38868: LD_VAR 0 5
38872: PPUSH
38873: LD_VAR 0 7
38877: PPUSH
38878: LD_VAR 0 6
38882: PUSH
38883: LD_VAR 0 8
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PPUSH
38892: CALL_OW 2
38896: ST_TO_ADDR
// break ;
38897: GO 38901
// end ; end ;
38899: GO 38838
38901: POP
38902: POP
// end ; end ;
38903: GO 38686
38905: POP
38906: POP
// if result and not asc then
38907: LD_VAR 0 5
38911: IFFALSE 38920
38913: PUSH
38914: LD_VAR 0 3
38918: NOT
38919: AND
38920: IFFALSE 38937
// result := ReverseArray ( result ) ;
38922: LD_ADDR_VAR 0 5
38926: PUSH
38927: LD_VAR 0 5
38931: PPUSH
38932: CALL 66295 0 1
38936: ST_TO_ADDR
// tmp := [ ] ;
38937: LD_ADDR_VAR 0 8
38941: PUSH
38942: EMPTY
38943: ST_TO_ADDR
// if mode then
38944: LD_VAR 0 4
38948: IFFALSE 39012
// begin for i := 1 to result do
38950: LD_ADDR_VAR 0 6
38954: PUSH
38955: DOUBLE
38956: LD_INT 1
38958: DEC
38959: ST_TO_ADDR
38960: LD_VAR 0 5
38964: PUSH
38965: FOR_TO
38966: IFFALSE 39000
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38968: LD_ADDR_VAR 0 8
38972: PUSH
38973: LD_VAR 0 8
38977: PPUSH
38978: LD_VAR 0 5
38982: PUSH
38983: LD_VAR 0 6
38987: ARRAY
38988: PUSH
38989: LD_INT 1
38991: ARRAY
38992: PPUSH
38993: CALL 71205 0 2
38997: ST_TO_ADDR
38998: GO 38965
39000: POP
39001: POP
// result := tmp ;
39002: LD_ADDR_VAR 0 5
39006: PUSH
39007: LD_VAR 0 8
39011: ST_TO_ADDR
// end ; end ;
39012: LD_VAR 0 5
39016: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39017: LD_INT 0
39019: PPUSH
39020: PPUSH
39021: PPUSH
39022: PPUSH
// if not list then
39023: LD_VAR 0 3
39027: NOT
39028: IFFALSE 39032
// exit ;
39030: GO 39422
// result := [ ] ;
39032: LD_ADDR_VAR 0 6
39036: PUSH
39037: EMPTY
39038: ST_TO_ADDR
// for i in list do
39039: LD_ADDR_VAR 0 7
39043: PUSH
39044: LD_VAR 0 3
39048: PUSH
39049: FOR_IN
39050: IFFALSE 39252
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39052: LD_ADDR_VAR 0 9
39056: PUSH
39057: LD_VAR 0 7
39061: PPUSH
39062: LD_VAR 0 1
39066: PPUSH
39067: LD_VAR 0 2
39071: PPUSH
39072: CALL_OW 297
39076: ST_TO_ADDR
// if not result then
39077: LD_VAR 0 6
39081: NOT
39082: IFFALSE 39108
// result := [ [ i , tmp ] ] else
39084: LD_ADDR_VAR 0 6
39088: PUSH
39089: LD_VAR 0 7
39093: PUSH
39094: LD_VAR 0 9
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: EMPTY
39104: LIST
39105: ST_TO_ADDR
39106: GO 39250
// begin if result [ result ] [ 2 ] <= tmp then
39108: LD_VAR 0 6
39112: PUSH
39113: LD_VAR 0 6
39117: ARRAY
39118: PUSH
39119: LD_INT 2
39121: ARRAY
39122: PUSH
39123: LD_VAR 0 9
39127: LESSEQUAL
39128: IFFALSE 39170
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39130: LD_ADDR_VAR 0 6
39134: PUSH
39135: LD_VAR 0 6
39139: PPUSH
39140: LD_VAR 0 6
39144: PUSH
39145: LD_INT 1
39147: PLUS
39148: PPUSH
39149: LD_VAR 0 7
39153: PUSH
39154: LD_VAR 0 9
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PPUSH
39163: CALL_OW 2
39167: ST_TO_ADDR
39168: GO 39250
// for j := 1 to result do
39170: LD_ADDR_VAR 0 8
39174: PUSH
39175: DOUBLE
39176: LD_INT 1
39178: DEC
39179: ST_TO_ADDR
39180: LD_VAR 0 6
39184: PUSH
39185: FOR_TO
39186: IFFALSE 39248
// begin if tmp < result [ j ] [ 2 ] then
39188: LD_VAR 0 9
39192: PUSH
39193: LD_VAR 0 6
39197: PUSH
39198: LD_VAR 0 8
39202: ARRAY
39203: PUSH
39204: LD_INT 2
39206: ARRAY
39207: LESS
39208: IFFALSE 39246
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39210: LD_ADDR_VAR 0 6
39214: PUSH
39215: LD_VAR 0 6
39219: PPUSH
39220: LD_VAR 0 8
39224: PPUSH
39225: LD_VAR 0 7
39229: PUSH
39230: LD_VAR 0 9
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PPUSH
39239: CALL_OW 2
39243: ST_TO_ADDR
// break ;
39244: GO 39248
// end ; end ;
39246: GO 39185
39248: POP
39249: POP
// end ; end ;
39250: GO 39049
39252: POP
39253: POP
// if result and not asc then
39254: LD_VAR 0 6
39258: IFFALSE 39267
39260: PUSH
39261: LD_VAR 0 4
39265: NOT
39266: AND
39267: IFFALSE 39342
// begin tmp := result ;
39269: LD_ADDR_VAR 0 9
39273: PUSH
39274: LD_VAR 0 6
39278: ST_TO_ADDR
// for i = tmp downto 1 do
39279: LD_ADDR_VAR 0 7
39283: PUSH
39284: DOUBLE
39285: LD_VAR 0 9
39289: INC
39290: ST_TO_ADDR
39291: LD_INT 1
39293: PUSH
39294: FOR_DOWNTO
39295: IFFALSE 39340
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39297: LD_ADDR_VAR 0 6
39301: PUSH
39302: LD_VAR 0 6
39306: PPUSH
39307: LD_VAR 0 9
39311: PUSH
39312: LD_VAR 0 7
39316: MINUS
39317: PUSH
39318: LD_INT 1
39320: PLUS
39321: PPUSH
39322: LD_VAR 0 9
39326: PUSH
39327: LD_VAR 0 7
39331: ARRAY
39332: PPUSH
39333: CALL_OW 1
39337: ST_TO_ADDR
39338: GO 39294
39340: POP
39341: POP
// end ; tmp := [ ] ;
39342: LD_ADDR_VAR 0 9
39346: PUSH
39347: EMPTY
39348: ST_TO_ADDR
// if mode then
39349: LD_VAR 0 5
39353: IFFALSE 39422
// begin for i = 1 to result do
39355: LD_ADDR_VAR 0 7
39359: PUSH
39360: DOUBLE
39361: LD_INT 1
39363: DEC
39364: ST_TO_ADDR
39365: LD_VAR 0 6
39369: PUSH
39370: FOR_TO
39371: IFFALSE 39410
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39373: LD_ADDR_VAR 0 9
39377: PUSH
39378: LD_VAR 0 9
39382: PPUSH
39383: LD_VAR 0 7
39387: PPUSH
39388: LD_VAR 0 6
39392: PUSH
39393: LD_VAR 0 7
39397: ARRAY
39398: PUSH
39399: LD_INT 1
39401: ARRAY
39402: PPUSH
39403: CALL_OW 1
39407: ST_TO_ADDR
39408: GO 39370
39410: POP
39411: POP
// result := tmp ;
39412: LD_ADDR_VAR 0 6
39416: PUSH
39417: LD_VAR 0 9
39421: ST_TO_ADDR
// end ; end ;
39422: LD_VAR 0 6
39426: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39427: LD_INT 0
39429: PPUSH
39430: PPUSH
39431: PPUSH
39432: PPUSH
39433: PPUSH
39434: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39435: LD_ADDR_VAR 0 5
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: ST_TO_ADDR
// if not x or not y then
39457: LD_VAR 0 2
39461: NOT
39462: IFTRUE 39471
39464: PUSH
39465: LD_VAR 0 3
39469: NOT
39470: OR
39471: IFFALSE 39475
// exit ;
39473: GO 41131
// if not range then
39475: LD_VAR 0 4
39479: NOT
39480: IFFALSE 39490
// range := 10 ;
39482: LD_ADDR_VAR 0 4
39486: PUSH
39487: LD_INT 10
39489: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39490: LD_ADDR_VAR 0 8
39494: PUSH
39495: LD_INT 81
39497: PUSH
39498: LD_VAR 0 1
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 92
39509: PUSH
39510: LD_VAR 0 2
39514: PUSH
39515: LD_VAR 0 3
39519: PUSH
39520: LD_VAR 0 4
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 3
39533: PUSH
39534: LD_INT 21
39536: PUSH
39537: LD_INT 3
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: LIST
39552: PPUSH
39553: CALL_OW 69
39557: ST_TO_ADDR
// if not tmp then
39558: LD_VAR 0 8
39562: NOT
39563: IFFALSE 39567
// exit ;
39565: GO 41131
// for i in tmp do
39567: LD_ADDR_VAR 0 6
39571: PUSH
39572: LD_VAR 0 8
39576: PUSH
39577: FOR_IN
39578: IFFALSE 41106
// begin points := [ 0 , 0 , 0 ] ;
39580: LD_ADDR_VAR 0 9
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: ST_TO_ADDR
// bpoints := 1 ;
39599: LD_ADDR_VAR 0 10
39603: PUSH
39604: LD_INT 1
39606: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39607: LD_VAR 0 6
39611: PPUSH
39612: CALL_OW 247
39616: PUSH
39617: LD_INT 1
39619: DOUBLE
39620: EQUAL
39621: IFTRUE 39625
39623: GO 40207
39625: POP
// begin if GetClass ( i ) = 1 then
39626: LD_VAR 0 6
39630: PPUSH
39631: CALL_OW 257
39635: PUSH
39636: LD_INT 1
39638: EQUAL
39639: IFFALSE 39660
// points := [ 10 , 5 , 3 ] ;
39641: LD_ADDR_VAR 0 9
39645: PUSH
39646: LD_INT 10
39648: PUSH
39649: LD_INT 5
39651: PUSH
39652: LD_INT 3
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: LIST
39659: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39660: LD_VAR 0 6
39664: PPUSH
39665: CALL_OW 257
39669: PUSH
39670: LD_INT 2
39672: PUSH
39673: LD_INT 3
39675: PUSH
39676: LD_INT 4
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: LIST
39683: IN
39684: IFFALSE 39705
// points := [ 3 , 2 , 1 ] ;
39686: LD_ADDR_VAR 0 9
39690: PUSH
39691: LD_INT 3
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: LIST
39704: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39705: LD_VAR 0 6
39709: PPUSH
39710: CALL_OW 257
39714: PUSH
39715: LD_INT 5
39717: EQUAL
39718: IFFALSE 39739
// points := [ 130 , 5 , 2 ] ;
39720: LD_ADDR_VAR 0 9
39724: PUSH
39725: LD_INT 130
39727: PUSH
39728: LD_INT 5
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: LIST
39738: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39739: LD_VAR 0 6
39743: PPUSH
39744: CALL_OW 257
39748: PUSH
39749: LD_INT 8
39751: EQUAL
39752: IFFALSE 39773
// points := [ 35 , 35 , 30 ] ;
39754: LD_ADDR_VAR 0 9
39758: PUSH
39759: LD_INT 35
39761: PUSH
39762: LD_INT 35
39764: PUSH
39765: LD_INT 30
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: LIST
39772: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39773: LD_VAR 0 6
39777: PPUSH
39778: CALL_OW 257
39782: PUSH
39783: LD_INT 9
39785: EQUAL
39786: IFFALSE 39807
// points := [ 20 , 55 , 40 ] ;
39788: LD_ADDR_VAR 0 9
39792: PUSH
39793: LD_INT 20
39795: PUSH
39796: LD_INT 55
39798: PUSH
39799: LD_INT 40
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: LIST
39806: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39807: LD_VAR 0 6
39811: PPUSH
39812: CALL_OW 257
39816: PUSH
39817: LD_INT 12
39819: PUSH
39820: LD_INT 16
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: IN
39827: IFFALSE 39848
// points := [ 5 , 3 , 2 ] ;
39829: LD_ADDR_VAR 0 9
39833: PUSH
39834: LD_INT 5
39836: PUSH
39837: LD_INT 3
39839: PUSH
39840: LD_INT 2
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: LIST
39847: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39848: LD_VAR 0 6
39852: PPUSH
39853: CALL_OW 257
39857: PUSH
39858: LD_INT 17
39860: EQUAL
39861: IFFALSE 39882
// points := [ 100 , 50 , 75 ] ;
39863: LD_ADDR_VAR 0 9
39867: PUSH
39868: LD_INT 100
39870: PUSH
39871: LD_INT 50
39873: PUSH
39874: LD_INT 75
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: LIST
39881: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39882: LD_VAR 0 6
39886: PPUSH
39887: CALL_OW 257
39891: PUSH
39892: LD_INT 15
39894: EQUAL
39895: IFFALSE 39916
// points := [ 10 , 5 , 3 ] ;
39897: LD_ADDR_VAR 0 9
39901: PUSH
39902: LD_INT 10
39904: PUSH
39905: LD_INT 5
39907: PUSH
39908: LD_INT 3
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: LIST
39915: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39916: LD_VAR 0 6
39920: PPUSH
39921: CALL_OW 257
39925: PUSH
39926: LD_INT 14
39928: EQUAL
39929: IFFALSE 39950
// points := [ 10 , 0 , 0 ] ;
39931: LD_ADDR_VAR 0 9
39935: PUSH
39936: LD_INT 10
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: LIST
39949: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39950: LD_VAR 0 6
39954: PPUSH
39955: CALL_OW 257
39959: PUSH
39960: LD_INT 11
39962: EQUAL
39963: IFFALSE 39984
// points := [ 30 , 10 , 5 ] ;
39965: LD_ADDR_VAR 0 9
39969: PUSH
39970: LD_INT 30
39972: PUSH
39973: LD_INT 10
39975: PUSH
39976: LD_INT 5
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: LIST
39983: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39984: LD_VAR 0 1
39988: PPUSH
39989: LD_INT 5
39991: PPUSH
39992: CALL_OW 321
39996: PUSH
39997: LD_INT 2
39999: EQUAL
40000: IFFALSE 40017
// bpoints := bpoints * 1.8 ;
40002: LD_ADDR_VAR 0 10
40006: PUSH
40007: LD_VAR 0 10
40011: PUSH
40012: LD_REAL  1.80000000000000E+0000
40015: MUL
40016: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40017: LD_VAR 0 6
40021: PPUSH
40022: CALL_OW 257
40026: PUSH
40027: LD_INT 1
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: LD_INT 3
40035: PUSH
40036: LD_INT 4
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: IN
40045: IFFALSE 40065
40047: PUSH
40048: LD_VAR 0 1
40052: PPUSH
40053: LD_INT 51
40055: PPUSH
40056: CALL_OW 321
40060: PUSH
40061: LD_INT 2
40063: EQUAL
40064: AND
40065: IFFALSE 40082
// bpoints := bpoints * 1.2 ;
40067: LD_ADDR_VAR 0 10
40071: PUSH
40072: LD_VAR 0 10
40076: PUSH
40077: LD_REAL  1.20000000000000E+0000
40080: MUL
40081: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40082: LD_VAR 0 6
40086: PPUSH
40087: CALL_OW 257
40091: PUSH
40092: LD_INT 5
40094: PUSH
40095: LD_INT 7
40097: PUSH
40098: LD_INT 9
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: LIST
40105: IN
40106: IFFALSE 40126
40108: PUSH
40109: LD_VAR 0 1
40113: PPUSH
40114: LD_INT 52
40116: PPUSH
40117: CALL_OW 321
40121: PUSH
40122: LD_INT 2
40124: EQUAL
40125: AND
40126: IFFALSE 40143
// bpoints := bpoints * 1.5 ;
40128: LD_ADDR_VAR 0 10
40132: PUSH
40133: LD_VAR 0 10
40137: PUSH
40138: LD_REAL  1.50000000000000E+0000
40141: MUL
40142: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40143: LD_VAR 0 1
40147: PPUSH
40148: LD_INT 66
40150: PPUSH
40151: CALL_OW 321
40155: PUSH
40156: LD_INT 2
40158: EQUAL
40159: IFFALSE 40176
// bpoints := bpoints * 1.1 ;
40161: LD_ADDR_VAR 0 10
40165: PUSH
40166: LD_VAR 0 10
40170: PUSH
40171: LD_REAL  1.10000000000000E+0000
40174: MUL
40175: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40176: LD_ADDR_VAR 0 10
40180: PUSH
40181: LD_VAR 0 10
40185: PUSH
40186: LD_VAR 0 6
40190: PPUSH
40191: LD_INT 1
40193: PPUSH
40194: CALL_OW 259
40198: PUSH
40199: LD_REAL  1.15000000000000E+0000
40202: MUL
40203: MUL
40204: ST_TO_ADDR
// end ; unit_vehicle :
40205: GO 41035
40207: LD_INT 2
40209: DOUBLE
40210: EQUAL
40211: IFTRUE 40215
40213: GO 41023
40215: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40216: LD_VAR 0 6
40220: PPUSH
40221: CALL_OW 264
40225: PUSH
40226: LD_INT 2
40228: PUSH
40229: LD_INT 42
40231: PUSH
40232: LD_INT 24
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: LIST
40239: IN
40240: IFFALSE 40261
// points := [ 25 , 5 , 3 ] ;
40242: LD_ADDR_VAR 0 9
40246: PUSH
40247: LD_INT 25
40249: PUSH
40250: LD_INT 5
40252: PUSH
40253: LD_INT 3
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: LIST
40260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40261: LD_VAR 0 6
40265: PPUSH
40266: CALL_OW 264
40270: PUSH
40271: LD_INT 4
40273: PUSH
40274: LD_INT 43
40276: PUSH
40277: LD_INT 25
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: IN
40285: IFFALSE 40306
// points := [ 40 , 15 , 5 ] ;
40287: LD_ADDR_VAR 0 9
40291: PUSH
40292: LD_INT 40
40294: PUSH
40295: LD_INT 15
40297: PUSH
40298: LD_INT 5
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: LIST
40305: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40306: LD_VAR 0 6
40310: PPUSH
40311: CALL_OW 264
40315: PUSH
40316: LD_INT 3
40318: PUSH
40319: LD_INT 23
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: IN
40326: IFFALSE 40347
// points := [ 7 , 25 , 8 ] ;
40328: LD_ADDR_VAR 0 9
40332: PUSH
40333: LD_INT 7
40335: PUSH
40336: LD_INT 25
40338: PUSH
40339: LD_INT 8
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: LIST
40346: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40347: LD_VAR 0 6
40351: PPUSH
40352: CALL_OW 264
40356: PUSH
40357: LD_INT 5
40359: PUSH
40360: LD_INT 27
40362: PUSH
40363: LD_INT 44
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: LIST
40370: IN
40371: IFFALSE 40392
// points := [ 14 , 50 , 16 ] ;
40373: LD_ADDR_VAR 0 9
40377: PUSH
40378: LD_INT 14
40380: PUSH
40381: LD_INT 50
40383: PUSH
40384: LD_INT 16
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: LIST
40391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40392: LD_VAR 0 6
40396: PPUSH
40397: CALL_OW 264
40401: PUSH
40402: LD_INT 6
40404: PUSH
40405: LD_INT 46
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: IN
40412: IFFALSE 40433
// points := [ 32 , 120 , 70 ] ;
40414: LD_ADDR_VAR 0 9
40418: PUSH
40419: LD_INT 32
40421: PUSH
40422: LD_INT 120
40424: PUSH
40425: LD_INT 70
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: LIST
40432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40433: LD_VAR 0 6
40437: PPUSH
40438: CALL_OW 264
40442: PUSH
40443: LD_INT 7
40445: PUSH
40446: LD_INT 28
40448: PUSH
40449: LD_INT 45
40451: PUSH
40452: LD_INT 92
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: IN
40461: IFFALSE 40482
// points := [ 35 , 20 , 45 ] ;
40463: LD_ADDR_VAR 0 9
40467: PUSH
40468: LD_INT 35
40470: PUSH
40471: LD_INT 20
40473: PUSH
40474: LD_INT 45
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: LIST
40481: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40482: LD_VAR 0 6
40486: PPUSH
40487: CALL_OW 264
40491: PUSH
40492: LD_INT 47
40494: PUSH
40495: EMPTY
40496: LIST
40497: IN
40498: IFFALSE 40519
// points := [ 67 , 45 , 75 ] ;
40500: LD_ADDR_VAR 0 9
40504: PUSH
40505: LD_INT 67
40507: PUSH
40508: LD_INT 45
40510: PUSH
40511: LD_INT 75
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: LIST
40518: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40519: LD_VAR 0 6
40523: PPUSH
40524: CALL_OW 264
40528: PUSH
40529: LD_INT 26
40531: PUSH
40532: EMPTY
40533: LIST
40534: IN
40535: IFFALSE 40556
// points := [ 120 , 30 , 80 ] ;
40537: LD_ADDR_VAR 0 9
40541: PUSH
40542: LD_INT 120
40544: PUSH
40545: LD_INT 30
40547: PUSH
40548: LD_INT 80
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: LIST
40555: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40556: LD_VAR 0 6
40560: PPUSH
40561: CALL_OW 264
40565: PUSH
40566: LD_INT 22
40568: PUSH
40569: EMPTY
40570: LIST
40571: IN
40572: IFFALSE 40593
// points := [ 40 , 1 , 1 ] ;
40574: LD_ADDR_VAR 0 9
40578: PUSH
40579: LD_INT 40
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40593: LD_VAR 0 6
40597: PPUSH
40598: CALL_OW 264
40602: PUSH
40603: LD_INT 29
40605: PUSH
40606: EMPTY
40607: LIST
40608: IN
40609: IFFALSE 40630
// points := [ 70 , 200 , 400 ] ;
40611: LD_ADDR_VAR 0 9
40615: PUSH
40616: LD_INT 70
40618: PUSH
40619: LD_INT 200
40621: PUSH
40622: LD_INT 400
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: LIST
40629: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40630: LD_VAR 0 6
40634: PPUSH
40635: CALL_OW 264
40639: PUSH
40640: LD_INT 14
40642: PUSH
40643: LD_INT 53
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: IN
40650: IFFALSE 40671
// points := [ 40 , 10 , 20 ] ;
40652: LD_ADDR_VAR 0 9
40656: PUSH
40657: LD_INT 40
40659: PUSH
40660: LD_INT 10
40662: PUSH
40663: LD_INT 20
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: LIST
40670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40671: LD_VAR 0 6
40675: PPUSH
40676: CALL_OW 264
40680: PUSH
40681: LD_INT 9
40683: PUSH
40684: EMPTY
40685: LIST
40686: IN
40687: IFFALSE 40708
// points := [ 5 , 70 , 20 ] ;
40689: LD_ADDR_VAR 0 9
40693: PUSH
40694: LD_INT 5
40696: PUSH
40697: LD_INT 70
40699: PUSH
40700: LD_INT 20
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: LIST
40707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40708: LD_VAR 0 6
40712: PPUSH
40713: CALL_OW 264
40717: PUSH
40718: LD_INT 10
40720: PUSH
40721: EMPTY
40722: LIST
40723: IN
40724: IFFALSE 40745
// points := [ 35 , 110 , 70 ] ;
40726: LD_ADDR_VAR 0 9
40730: PUSH
40731: LD_INT 35
40733: PUSH
40734: LD_INT 110
40736: PUSH
40737: LD_INT 70
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40745: LD_VAR 0 6
40749: PPUSH
40750: CALL_OW 265
40754: PUSH
40755: LD_INT 25
40757: EQUAL
40758: IFFALSE 40779
// points := [ 80 , 65 , 100 ] ;
40760: LD_ADDR_VAR 0 9
40764: PUSH
40765: LD_INT 80
40767: PUSH
40768: LD_INT 65
40770: PUSH
40771: LD_INT 100
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: LIST
40778: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40779: LD_VAR 0 6
40783: PPUSH
40784: CALL_OW 263
40788: PUSH
40789: LD_INT 1
40791: EQUAL
40792: IFFALSE 40827
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40794: LD_ADDR_VAR 0 10
40798: PUSH
40799: LD_VAR 0 10
40803: PUSH
40804: LD_VAR 0 6
40808: PPUSH
40809: CALL_OW 311
40813: PPUSH
40814: LD_INT 3
40816: PPUSH
40817: CALL_OW 259
40821: PUSH
40822: LD_INT 4
40824: MUL
40825: MUL
40826: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40827: LD_VAR 0 6
40831: PPUSH
40832: CALL_OW 263
40836: PUSH
40837: LD_INT 2
40839: EQUAL
40840: IFFALSE 40891
// begin j := IsControledBy ( i ) ;
40842: LD_ADDR_VAR 0 7
40846: PUSH
40847: LD_VAR 0 6
40851: PPUSH
40852: CALL_OW 312
40856: ST_TO_ADDR
// if j then
40857: LD_VAR 0 7
40861: IFFALSE 40891
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40863: LD_ADDR_VAR 0 10
40867: PUSH
40868: LD_VAR 0 10
40872: PUSH
40873: LD_VAR 0 7
40877: PPUSH
40878: LD_INT 3
40880: PPUSH
40881: CALL_OW 259
40885: PUSH
40886: LD_INT 3
40888: MUL
40889: MUL
40890: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40891: LD_VAR 0 6
40895: PPUSH
40896: CALL_OW 264
40900: PUSH
40901: LD_INT 5
40903: PUSH
40904: LD_INT 6
40906: PUSH
40907: LD_INT 46
40909: PUSH
40910: LD_INT 44
40912: PUSH
40913: LD_INT 47
40915: PUSH
40916: LD_INT 45
40918: PUSH
40919: LD_INT 28
40921: PUSH
40922: LD_INT 7
40924: PUSH
40925: LD_INT 27
40927: PUSH
40928: LD_INT 29
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: IN
40943: IFFALSE 40963
40945: PUSH
40946: LD_VAR 0 1
40950: PPUSH
40951: LD_INT 52
40953: PPUSH
40954: CALL_OW 321
40958: PUSH
40959: LD_INT 2
40961: EQUAL
40962: AND
40963: IFFALSE 40980
// bpoints := bpoints * 1.2 ;
40965: LD_ADDR_VAR 0 10
40969: PUSH
40970: LD_VAR 0 10
40974: PUSH
40975: LD_REAL  1.20000000000000E+0000
40978: MUL
40979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40980: LD_VAR 0 6
40984: PPUSH
40985: CALL_OW 264
40989: PUSH
40990: LD_INT 6
40992: PUSH
40993: LD_INT 46
40995: PUSH
40996: LD_INT 47
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: LIST
41003: IN
41004: IFFALSE 41021
// bpoints := bpoints * 1.2 ;
41006: LD_ADDR_VAR 0 10
41010: PUSH
41011: LD_VAR 0 10
41015: PUSH
41016: LD_REAL  1.20000000000000E+0000
41019: MUL
41020: ST_TO_ADDR
// end ; unit_building :
41021: GO 41035
41023: LD_INT 3
41025: DOUBLE
41026: EQUAL
41027: IFTRUE 41031
41029: GO 41034
41031: POP
// ; end ;
41032: GO 41035
41034: POP
// for j = 1 to 3 do
41035: LD_ADDR_VAR 0 7
41039: PUSH
41040: DOUBLE
41041: LD_INT 1
41043: DEC
41044: ST_TO_ADDR
41045: LD_INT 3
41047: PUSH
41048: FOR_TO
41049: IFFALSE 41102
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41051: LD_ADDR_VAR 0 5
41055: PUSH
41056: LD_VAR 0 5
41060: PPUSH
41061: LD_VAR 0 7
41065: PPUSH
41066: LD_VAR 0 5
41070: PUSH
41071: LD_VAR 0 7
41075: ARRAY
41076: PUSH
41077: LD_VAR 0 9
41081: PUSH
41082: LD_VAR 0 7
41086: ARRAY
41087: PUSH
41088: LD_VAR 0 10
41092: MUL
41093: PLUS
41094: PPUSH
41095: CALL_OW 1
41099: ST_TO_ADDR
41100: GO 41048
41102: POP
41103: POP
// end ;
41104: GO 39577
41106: POP
41107: POP
// result := Replace ( result , 4 , tmp ) ;
41108: LD_ADDR_VAR 0 5
41112: PUSH
41113: LD_VAR 0 5
41117: PPUSH
41118: LD_INT 4
41120: PPUSH
41121: LD_VAR 0 8
41125: PPUSH
41126: CALL_OW 1
41130: ST_TO_ADDR
// end ;
41131: LD_VAR 0 5
41135: RET
// export function DangerAtRange ( unit , range ) ; begin
41136: LD_INT 0
41138: PPUSH
// if not unit then
41139: LD_VAR 0 1
41143: NOT
41144: IFFALSE 41148
// exit ;
41146: GO 41193
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41148: LD_ADDR_VAR 0 3
41152: PUSH
41153: LD_VAR 0 1
41157: PPUSH
41158: CALL_OW 255
41162: PPUSH
41163: LD_VAR 0 1
41167: PPUSH
41168: CALL_OW 250
41172: PPUSH
41173: LD_VAR 0 1
41177: PPUSH
41178: CALL_OW 251
41182: PPUSH
41183: LD_VAR 0 2
41187: PPUSH
41188: CALL 39427 0 4
41192: ST_TO_ADDR
// end ;
41193: LD_VAR 0 3
41197: RET
// export function DangerInArea ( side , area ) ; begin
41198: LD_INT 0
41200: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41201: LD_ADDR_VAR 0 3
41205: PUSH
41206: LD_VAR 0 2
41210: PPUSH
41211: LD_INT 81
41213: PUSH
41214: LD_VAR 0 1
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PPUSH
41223: CALL_OW 70
41227: ST_TO_ADDR
// end ;
41228: LD_VAR 0 3
41232: RET
// export function IsExtension ( b ) ; begin
41233: LD_INT 0
41235: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41236: LD_ADDR_VAR 0 2
41240: PUSH
41241: LD_VAR 0 1
41245: PUSH
41246: LD_INT 23
41248: PUSH
41249: LD_INT 20
41251: PUSH
41252: LD_INT 22
41254: PUSH
41255: LD_INT 17
41257: PUSH
41258: LD_INT 24
41260: PUSH
41261: LD_INT 21
41263: PUSH
41264: LD_INT 19
41266: PUSH
41267: LD_INT 16
41269: PUSH
41270: LD_INT 25
41272: PUSH
41273: LD_INT 18
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: IN
41288: ST_TO_ADDR
// end ;
41289: LD_VAR 0 2
41293: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41294: LD_INT 0
41296: PPUSH
41297: PPUSH
41298: PPUSH
// result := [ ] ;
41299: LD_ADDR_VAR 0 4
41303: PUSH
41304: EMPTY
41305: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41306: LD_ADDR_VAR 0 5
41310: PUSH
41311: LD_VAR 0 2
41315: PPUSH
41316: LD_INT 21
41318: PUSH
41319: LD_INT 3
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PPUSH
41326: CALL_OW 70
41330: ST_TO_ADDR
// if not tmp then
41331: LD_VAR 0 5
41335: NOT
41336: IFFALSE 41340
// exit ;
41338: GO 41404
// if checkLink then
41340: LD_VAR 0 3
41344: IFFALSE 41394
// begin for i in tmp do
41346: LD_ADDR_VAR 0 6
41350: PUSH
41351: LD_VAR 0 5
41355: PUSH
41356: FOR_IN
41357: IFFALSE 41392
// if GetBase ( i ) <> base then
41359: LD_VAR 0 6
41363: PPUSH
41364: CALL_OW 274
41368: PUSH
41369: LD_VAR 0 1
41373: NONEQUAL
41374: IFFALSE 41390
// ComLinkToBase ( base , i ) ;
41376: LD_VAR 0 1
41380: PPUSH
41381: LD_VAR 0 6
41385: PPUSH
41386: CALL_OW 169
41390: GO 41356
41392: POP
41393: POP
// end ; result := tmp ;
41394: LD_ADDR_VAR 0 4
41398: PUSH
41399: LD_VAR 0 5
41403: ST_TO_ADDR
// end ;
41404: LD_VAR 0 4
41408: RET
// export function ComComplete ( units , b ) ; var i ; begin
41409: LD_INT 0
41411: PPUSH
41412: PPUSH
// if not units then
41413: LD_VAR 0 1
41417: NOT
41418: IFFALSE 41422
// exit ;
41420: GO 41512
// for i in units do
41422: LD_ADDR_VAR 0 4
41426: PUSH
41427: LD_VAR 0 1
41431: PUSH
41432: FOR_IN
41433: IFFALSE 41510
// if BuildingStatus ( b ) = bs_build then
41435: LD_VAR 0 2
41439: PPUSH
41440: CALL_OW 461
41444: PUSH
41445: LD_INT 1
41447: EQUAL
41448: IFFALSE 41508
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41450: LD_VAR 0 4
41454: PPUSH
41455: LD_STRING h
41457: PUSH
41458: LD_VAR 0 2
41462: PPUSH
41463: CALL_OW 250
41467: PUSH
41468: LD_VAR 0 2
41472: PPUSH
41473: CALL_OW 251
41477: PUSH
41478: LD_VAR 0 2
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: PUSH
41501: EMPTY
41502: LIST
41503: PPUSH
41504: CALL_OW 446
41508: GO 41432
41510: POP
41511: POP
// end ;
41512: LD_VAR 0 3
41516: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41517: LD_INT 0
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
41523: PPUSH
41524: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41525: LD_VAR 0 1
41529: NOT
41530: IFTRUE 41547
41532: PUSH
41533: LD_VAR 0 1
41537: PPUSH
41538: CALL_OW 263
41542: PUSH
41543: LD_INT 2
41545: NONEQUAL
41546: OR
41547: IFFALSE 41551
// exit ;
41549: GO 41867
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41551: LD_ADDR_VAR 0 6
41555: PUSH
41556: LD_INT 22
41558: PUSH
41559: LD_VAR 0 1
41563: PPUSH
41564: CALL_OW 255
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 2
41575: PUSH
41576: LD_INT 30
41578: PUSH
41579: LD_INT 36
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 34
41588: PUSH
41589: LD_INT 31
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PPUSH
41605: CALL_OW 69
41609: ST_TO_ADDR
// if not tmp then
41610: LD_VAR 0 6
41614: NOT
41615: IFFALSE 41619
// exit ;
41617: GO 41867
// result := [ ] ;
41619: LD_ADDR_VAR 0 2
41623: PUSH
41624: EMPTY
41625: ST_TO_ADDR
// for i in tmp do
41626: LD_ADDR_VAR 0 3
41630: PUSH
41631: LD_VAR 0 6
41635: PUSH
41636: FOR_IN
41637: IFFALSE 41708
// begin t := UnitsInside ( i ) ;
41639: LD_ADDR_VAR 0 4
41643: PUSH
41644: LD_VAR 0 3
41648: PPUSH
41649: CALL_OW 313
41653: ST_TO_ADDR
// if t then
41654: LD_VAR 0 4
41658: IFFALSE 41706
// for j in t do
41660: LD_ADDR_VAR 0 7
41664: PUSH
41665: LD_VAR 0 4
41669: PUSH
41670: FOR_IN
41671: IFFALSE 41704
// result := Replace ( result , result + 1 , j ) ;
41673: LD_ADDR_VAR 0 2
41677: PUSH
41678: LD_VAR 0 2
41682: PPUSH
41683: LD_VAR 0 2
41687: PUSH
41688: LD_INT 1
41690: PLUS
41691: PPUSH
41692: LD_VAR 0 7
41696: PPUSH
41697: CALL_OW 1
41701: ST_TO_ADDR
41702: GO 41670
41704: POP
41705: POP
// end ;
41706: GO 41636
41708: POP
41709: POP
// if not result then
41710: LD_VAR 0 2
41714: NOT
41715: IFFALSE 41719
// exit ;
41717: GO 41867
// mech := result [ 1 ] ;
41719: LD_ADDR_VAR 0 5
41723: PUSH
41724: LD_VAR 0 2
41728: PUSH
41729: LD_INT 1
41731: ARRAY
41732: ST_TO_ADDR
// if result > 1 then
41733: LD_VAR 0 2
41737: PUSH
41738: LD_INT 1
41740: GREATER
41741: IFFALSE 41853
// begin for i = 2 to result do
41743: LD_ADDR_VAR 0 3
41747: PUSH
41748: DOUBLE
41749: LD_INT 2
41751: DEC
41752: ST_TO_ADDR
41753: LD_VAR 0 2
41757: PUSH
41758: FOR_TO
41759: IFFALSE 41851
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41761: LD_ADDR_VAR 0 4
41765: PUSH
41766: LD_VAR 0 2
41770: PUSH
41771: LD_VAR 0 3
41775: ARRAY
41776: PPUSH
41777: LD_INT 3
41779: PPUSH
41780: CALL_OW 259
41784: PUSH
41785: LD_VAR 0 2
41789: PUSH
41790: LD_VAR 0 3
41794: ARRAY
41795: PPUSH
41796: CALL_OW 432
41800: MINUS
41801: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41802: LD_VAR 0 4
41806: PUSH
41807: LD_VAR 0 5
41811: PPUSH
41812: LD_INT 3
41814: PPUSH
41815: CALL_OW 259
41819: PUSH
41820: LD_VAR 0 5
41824: PPUSH
41825: CALL_OW 432
41829: MINUS
41830: GREATEREQUAL
41831: IFFALSE 41849
// mech := result [ i ] ;
41833: LD_ADDR_VAR 0 5
41837: PUSH
41838: LD_VAR 0 2
41842: PUSH
41843: LD_VAR 0 3
41847: ARRAY
41848: ST_TO_ADDR
// end ;
41849: GO 41758
41851: POP
41852: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41853: LD_VAR 0 1
41857: PPUSH
41858: LD_VAR 0 5
41862: PPUSH
41863: CALL_OW 135
// end ;
41867: LD_VAR 0 2
41871: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41872: LD_INT 0
41874: PPUSH
41875: PPUSH
41876: PPUSH
41877: PPUSH
41878: PPUSH
41879: PPUSH
41880: PPUSH
41881: PPUSH
41882: PPUSH
41883: PPUSH
41884: PPUSH
41885: PPUSH
41886: PPUSH
// result := [ ] ;
41887: LD_ADDR_VAR 0 7
41891: PUSH
41892: EMPTY
41893: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41894: LD_VAR 0 1
41898: PPUSH
41899: CALL_OW 266
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: IN
41914: NOT
41915: IFFALSE 41919
// exit ;
41917: GO 43559
// if name then
41919: LD_VAR 0 3
41923: IFFALSE 41939
// SetBName ( base_dep , name ) ;
41925: LD_VAR 0 1
41929: PPUSH
41930: LD_VAR 0 3
41934: PPUSH
41935: CALL_OW 500
// base := GetBase ( base_dep ) ;
41939: LD_ADDR_VAR 0 15
41943: PUSH
41944: LD_VAR 0 1
41948: PPUSH
41949: CALL_OW 274
41953: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41954: LD_ADDR_VAR 0 16
41958: PUSH
41959: LD_VAR 0 1
41963: PPUSH
41964: CALL_OW 255
41968: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41969: LD_ADDR_VAR 0 17
41973: PUSH
41974: LD_VAR 0 1
41978: PPUSH
41979: CALL_OW 248
41983: ST_TO_ADDR
// if sources then
41984: LD_VAR 0 5
41988: IFFALSE 42035
// for i = 1 to 3 do
41990: LD_ADDR_VAR 0 8
41994: PUSH
41995: DOUBLE
41996: LD_INT 1
41998: DEC
41999: ST_TO_ADDR
42000: LD_INT 3
42002: PUSH
42003: FOR_TO
42004: IFFALSE 42033
// AddResourceType ( base , i , sources [ i ] ) ;
42006: LD_VAR 0 15
42010: PPUSH
42011: LD_VAR 0 8
42015: PPUSH
42016: LD_VAR 0 5
42020: PUSH
42021: LD_VAR 0 8
42025: ARRAY
42026: PPUSH
42027: CALL_OW 276
42031: GO 42003
42033: POP
42034: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42035: LD_ADDR_VAR 0 18
42039: PUSH
42040: LD_VAR 0 15
42044: PPUSH
42045: LD_VAR 0 2
42049: PPUSH
42050: LD_INT 1
42052: PPUSH
42053: CALL 41294 0 3
42057: ST_TO_ADDR
// InitHc ;
42058: CALL_OW 19
// InitUc ;
42062: CALL_OW 18
// uc_side := side ;
42066: LD_ADDR_OWVAR 20
42070: PUSH
42071: LD_VAR 0 16
42075: ST_TO_ADDR
// uc_nation := nation ;
42076: LD_ADDR_OWVAR 21
42080: PUSH
42081: LD_VAR 0 17
42085: ST_TO_ADDR
// if buildings then
42086: LD_VAR 0 18
42090: IFFALSE 43418
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42092: LD_ADDR_VAR 0 19
42096: PUSH
42097: LD_VAR 0 18
42101: PPUSH
42102: LD_INT 2
42104: PUSH
42105: LD_INT 30
42107: PUSH
42108: LD_INT 29
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 30
42117: PUSH
42118: LD_INT 30
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: PPUSH
42130: CALL_OW 72
42134: ST_TO_ADDR
// if tmp then
42135: LD_VAR 0 19
42139: IFFALSE 42187
// for i in tmp do
42141: LD_ADDR_VAR 0 8
42145: PUSH
42146: LD_VAR 0 19
42150: PUSH
42151: FOR_IN
42152: IFFALSE 42185
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42154: LD_VAR 0 8
42158: PPUSH
42159: CALL_OW 250
42163: PPUSH
42164: LD_VAR 0 8
42168: PPUSH
42169: CALL_OW 251
42173: PPUSH
42174: LD_VAR 0 16
42178: PPUSH
42179: CALL_OW 441
42183: GO 42151
42185: POP
42186: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42187: LD_VAR 0 18
42191: PPUSH
42192: LD_INT 2
42194: PUSH
42195: LD_INT 30
42197: PUSH
42198: LD_INT 32
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 30
42207: PUSH
42208: LD_INT 33
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: LIST
42219: PPUSH
42220: CALL_OW 72
42224: IFFALSE 42312
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42226: LD_ADDR_VAR 0 8
42230: PUSH
42231: LD_VAR 0 18
42235: PPUSH
42236: LD_INT 2
42238: PUSH
42239: LD_INT 30
42241: PUSH
42242: LD_INT 32
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 30
42251: PUSH
42252: LD_INT 33
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: LIST
42263: PPUSH
42264: CALL_OW 72
42268: PUSH
42269: FOR_IN
42270: IFFALSE 42310
// begin if not GetBWeapon ( i ) then
42272: LD_VAR 0 8
42276: PPUSH
42277: CALL_OW 269
42281: NOT
42282: IFFALSE 42308
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42284: LD_VAR 0 8
42288: PPUSH
42289: LD_VAR 0 8
42293: PPUSH
42294: LD_VAR 0 2
42298: PPUSH
42299: CALL 43564 0 2
42303: PPUSH
42304: CALL_OW 431
// end ;
42308: GO 42269
42310: POP
42311: POP
// end ; for i = 1 to personel do
42312: LD_ADDR_VAR 0 8
42316: PUSH
42317: DOUBLE
42318: LD_INT 1
42320: DEC
42321: ST_TO_ADDR
42322: LD_VAR 0 6
42326: PUSH
42327: FOR_TO
42328: IFFALSE 43398
// begin if i > 4 then
42330: LD_VAR 0 8
42334: PUSH
42335: LD_INT 4
42337: GREATER
42338: IFFALSE 42342
// break ;
42340: GO 43398
// case i of 1 :
42342: LD_VAR 0 8
42346: PUSH
42347: LD_INT 1
42349: DOUBLE
42350: EQUAL
42351: IFTRUE 42355
42353: GO 42435
42355: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42356: LD_ADDR_VAR 0 12
42360: PUSH
42361: LD_VAR 0 18
42365: PPUSH
42366: LD_INT 22
42368: PUSH
42369: LD_VAR 0 16
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 58
42380: PUSH
42381: EMPTY
42382: LIST
42383: PUSH
42384: LD_INT 2
42386: PUSH
42387: LD_INT 30
42389: PUSH
42390: LD_INT 32
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 30
42399: PUSH
42400: LD_INT 4
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 30
42409: PUSH
42410: LD_INT 5
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: LIST
42427: PPUSH
42428: CALL_OW 72
42432: ST_TO_ADDR
42433: GO 42657
42435: LD_INT 2
42437: DOUBLE
42438: EQUAL
42439: IFTRUE 42443
42441: GO 42505
42443: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42444: LD_ADDR_VAR 0 12
42448: PUSH
42449: LD_VAR 0 18
42453: PPUSH
42454: LD_INT 22
42456: PUSH
42457: LD_VAR 0 16
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 2
42468: PUSH
42469: LD_INT 30
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 30
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: LIST
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PPUSH
42498: CALL_OW 72
42502: ST_TO_ADDR
42503: GO 42657
42505: LD_INT 3
42507: DOUBLE
42508: EQUAL
42509: IFTRUE 42513
42511: GO 42575
42513: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42514: LD_ADDR_VAR 0 12
42518: PUSH
42519: LD_VAR 0 18
42523: PPUSH
42524: LD_INT 22
42526: PUSH
42527: LD_VAR 0 16
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: LD_INT 30
42541: PUSH
42542: LD_INT 2
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 30
42551: PUSH
42552: LD_INT 3
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: LIST
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PPUSH
42568: CALL_OW 72
42572: ST_TO_ADDR
42573: GO 42657
42575: LD_INT 4
42577: DOUBLE
42578: EQUAL
42579: IFTRUE 42583
42581: GO 42656
42583: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42584: LD_ADDR_VAR 0 12
42588: PUSH
42589: LD_VAR 0 18
42593: PPUSH
42594: LD_INT 22
42596: PUSH
42597: LD_VAR 0 16
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: LD_INT 30
42611: PUSH
42612: LD_INT 6
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 30
42621: PUSH
42622: LD_INT 7
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 30
42631: PUSH
42632: LD_INT 8
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PPUSH
42649: CALL_OW 72
42653: ST_TO_ADDR
42654: GO 42657
42656: POP
// if i = 1 then
42657: LD_VAR 0 8
42661: PUSH
42662: LD_INT 1
42664: EQUAL
42665: IFFALSE 42776
// begin tmp := [ ] ;
42667: LD_ADDR_VAR 0 19
42671: PUSH
42672: EMPTY
42673: ST_TO_ADDR
// for j in f do
42674: LD_ADDR_VAR 0 9
42678: PUSH
42679: LD_VAR 0 12
42683: PUSH
42684: FOR_IN
42685: IFFALSE 42758
// if GetBType ( j ) = b_bunker then
42687: LD_VAR 0 9
42691: PPUSH
42692: CALL_OW 266
42696: PUSH
42697: LD_INT 32
42699: EQUAL
42700: IFFALSE 42727
// tmp := Insert ( tmp , 1 , j ) else
42702: LD_ADDR_VAR 0 19
42706: PUSH
42707: LD_VAR 0 19
42711: PPUSH
42712: LD_INT 1
42714: PPUSH
42715: LD_VAR 0 9
42719: PPUSH
42720: CALL_OW 2
42724: ST_TO_ADDR
42725: GO 42756
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42727: LD_ADDR_VAR 0 19
42731: PUSH
42732: LD_VAR 0 19
42736: PPUSH
42737: LD_VAR 0 19
42741: PUSH
42742: LD_INT 1
42744: PLUS
42745: PPUSH
42746: LD_VAR 0 9
42750: PPUSH
42751: CALL_OW 2
42755: ST_TO_ADDR
42756: GO 42684
42758: POP
42759: POP
// if tmp then
42760: LD_VAR 0 19
42764: IFFALSE 42776
// f := tmp ;
42766: LD_ADDR_VAR 0 12
42770: PUSH
42771: LD_VAR 0 19
42775: ST_TO_ADDR
// end ; x := personel [ i ] ;
42776: LD_ADDR_VAR 0 13
42780: PUSH
42781: LD_VAR 0 6
42785: PUSH
42786: LD_VAR 0 8
42790: ARRAY
42791: ST_TO_ADDR
// if x = - 1 then
42792: LD_VAR 0 13
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: EQUAL
42801: IFFALSE 43012
// begin for j in f do
42803: LD_ADDR_VAR 0 9
42807: PUSH
42808: LD_VAR 0 12
42812: PUSH
42813: FOR_IN
42814: IFFALSE 43008
// repeat InitHc ;
42816: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42820: LD_VAR 0 9
42824: PPUSH
42825: CALL_OW 266
42829: PUSH
42830: LD_INT 5
42832: EQUAL
42833: IFFALSE 42903
// begin if UnitsInside ( j ) < 3 then
42835: LD_VAR 0 9
42839: PPUSH
42840: CALL_OW 313
42844: PUSH
42845: LD_INT 3
42847: LESS
42848: IFFALSE 42884
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42850: LD_INT 0
42852: PPUSH
42853: LD_INT 5
42855: PUSH
42856: LD_INT 8
42858: PUSH
42859: LD_INT 9
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: LIST
42866: PUSH
42867: LD_VAR 0 17
42871: ARRAY
42872: PPUSH
42873: LD_VAR 0 4
42877: PPUSH
42878: CALL_OW 380
42882: GO 42901
// PrepareHuman ( false , i , skill ) ;
42884: LD_INT 0
42886: PPUSH
42887: LD_VAR 0 8
42891: PPUSH
42892: LD_VAR 0 4
42896: PPUSH
42897: CALL_OW 380
// end else
42901: GO 42920
// PrepareHuman ( false , i , skill ) ;
42903: LD_INT 0
42905: PPUSH
42906: LD_VAR 0 8
42910: PPUSH
42911: LD_VAR 0 4
42915: PPUSH
42916: CALL_OW 380
// un := CreateHuman ;
42920: LD_ADDR_VAR 0 14
42924: PUSH
42925: CALL_OW 44
42929: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42930: LD_ADDR_VAR 0 7
42934: PUSH
42935: LD_VAR 0 7
42939: PPUSH
42940: LD_INT 1
42942: PPUSH
42943: LD_VAR 0 14
42947: PPUSH
42948: CALL_OW 2
42952: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42953: LD_VAR 0 14
42957: PPUSH
42958: LD_VAR 0 9
42962: PPUSH
42963: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42967: LD_VAR 0 9
42971: PPUSH
42972: CALL_OW 313
42976: PUSH
42977: LD_INT 6
42979: EQUAL
42980: IFTRUE 43004
42982: PUSH
42983: LD_VAR 0 9
42987: PPUSH
42988: CALL_OW 266
42992: PUSH
42993: LD_INT 32
42995: PUSH
42996: LD_INT 31
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: IN
43003: OR
43004: IFFALSE 42816
43006: GO 42813
43008: POP
43009: POP
// end else
43010: GO 43396
// for j = 1 to x do
43012: LD_ADDR_VAR 0 9
43016: PUSH
43017: DOUBLE
43018: LD_INT 1
43020: DEC
43021: ST_TO_ADDR
43022: LD_VAR 0 13
43026: PUSH
43027: FOR_TO
43028: IFFALSE 43394
// begin InitHc ;
43030: CALL_OW 19
// if not f then
43034: LD_VAR 0 12
43038: NOT
43039: IFFALSE 43128
// begin PrepareHuman ( false , i , skill ) ;
43041: LD_INT 0
43043: PPUSH
43044: LD_VAR 0 8
43048: PPUSH
43049: LD_VAR 0 4
43053: PPUSH
43054: CALL_OW 380
// un := CreateHuman ;
43058: LD_ADDR_VAR 0 14
43062: PUSH
43063: CALL_OW 44
43067: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43068: LD_ADDR_VAR 0 7
43072: PUSH
43073: LD_VAR 0 7
43077: PPUSH
43078: LD_INT 1
43080: PPUSH
43081: LD_VAR 0 14
43085: PPUSH
43086: CALL_OW 2
43090: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43091: LD_VAR 0 14
43095: PPUSH
43096: LD_VAR 0 1
43100: PPUSH
43101: CALL_OW 250
43105: PPUSH
43106: LD_VAR 0 1
43110: PPUSH
43111: CALL_OW 251
43115: PPUSH
43116: LD_INT 10
43118: PPUSH
43119: LD_INT 0
43121: PPUSH
43122: CALL_OW 50
// continue ;
43126: GO 43027
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43128: LD_VAR 0 12
43132: PUSH
43133: LD_INT 1
43135: ARRAY
43136: PPUSH
43137: CALL_OW 313
43141: IFFALSE 43169
43143: PUSH
43144: LD_VAR 0 12
43148: PUSH
43149: LD_INT 1
43151: ARRAY
43152: PPUSH
43153: CALL_OW 266
43157: PUSH
43158: LD_INT 32
43160: PUSH
43161: LD_INT 31
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: IN
43168: AND
43169: IFTRUE 43190
43171: PUSH
43172: LD_VAR 0 12
43176: PUSH
43177: LD_INT 1
43179: ARRAY
43180: PPUSH
43181: CALL_OW 313
43185: PUSH
43186: LD_INT 6
43188: EQUAL
43189: OR
43190: IFFALSE 43210
// f := Delete ( f , 1 ) ;
43192: LD_ADDR_VAR 0 12
43196: PUSH
43197: LD_VAR 0 12
43201: PPUSH
43202: LD_INT 1
43204: PPUSH
43205: CALL_OW 3
43209: ST_TO_ADDR
// if not f then
43210: LD_VAR 0 12
43214: NOT
43215: IFFALSE 43233
// begin x := x + 2 ;
43217: LD_ADDR_VAR 0 13
43221: PUSH
43222: LD_VAR 0 13
43226: PUSH
43227: LD_INT 2
43229: PLUS
43230: ST_TO_ADDR
// continue ;
43231: GO 43027
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43233: LD_VAR 0 12
43237: PUSH
43238: LD_INT 1
43240: ARRAY
43241: PPUSH
43242: CALL_OW 266
43246: PUSH
43247: LD_INT 5
43249: EQUAL
43250: IFFALSE 43324
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43252: LD_VAR 0 12
43256: PUSH
43257: LD_INT 1
43259: ARRAY
43260: PPUSH
43261: CALL_OW 313
43265: PUSH
43266: LD_INT 3
43268: LESS
43269: IFFALSE 43305
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43271: LD_INT 0
43273: PPUSH
43274: LD_INT 5
43276: PUSH
43277: LD_INT 8
43279: PUSH
43280: LD_INT 9
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: LIST
43287: PUSH
43288: LD_VAR 0 17
43292: ARRAY
43293: PPUSH
43294: LD_VAR 0 4
43298: PPUSH
43299: CALL_OW 380
43303: GO 43322
// PrepareHuman ( false , i , skill ) ;
43305: LD_INT 0
43307: PPUSH
43308: LD_VAR 0 8
43312: PPUSH
43313: LD_VAR 0 4
43317: PPUSH
43318: CALL_OW 380
// end else
43322: GO 43341
// PrepareHuman ( false , i , skill ) ;
43324: LD_INT 0
43326: PPUSH
43327: LD_VAR 0 8
43331: PPUSH
43332: LD_VAR 0 4
43336: PPUSH
43337: CALL_OW 380
// un := CreateHuman ;
43341: LD_ADDR_VAR 0 14
43345: PUSH
43346: CALL_OW 44
43350: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43351: LD_ADDR_VAR 0 7
43355: PUSH
43356: LD_VAR 0 7
43360: PPUSH
43361: LD_INT 1
43363: PPUSH
43364: LD_VAR 0 14
43368: PPUSH
43369: CALL_OW 2
43373: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43374: LD_VAR 0 14
43378: PPUSH
43379: LD_VAR 0 12
43383: PUSH
43384: LD_INT 1
43386: ARRAY
43387: PPUSH
43388: CALL_OW 52
// end ;
43392: GO 43027
43394: POP
43395: POP
// end ;
43396: GO 42327
43398: POP
43399: POP
// result := result ^ buildings ;
43400: LD_ADDR_VAR 0 7
43404: PUSH
43405: LD_VAR 0 7
43409: PUSH
43410: LD_VAR 0 18
43414: ADD
43415: ST_TO_ADDR
// end else
43416: GO 43559
// begin for i = 1 to personel do
43418: LD_ADDR_VAR 0 8
43422: PUSH
43423: DOUBLE
43424: LD_INT 1
43426: DEC
43427: ST_TO_ADDR
43428: LD_VAR 0 6
43432: PUSH
43433: FOR_TO
43434: IFFALSE 43557
// begin if i > 4 then
43436: LD_VAR 0 8
43440: PUSH
43441: LD_INT 4
43443: GREATER
43444: IFFALSE 43448
// break ;
43446: GO 43557
// x := personel [ i ] ;
43448: LD_ADDR_VAR 0 13
43452: PUSH
43453: LD_VAR 0 6
43457: PUSH
43458: LD_VAR 0 8
43462: ARRAY
43463: ST_TO_ADDR
// if x = - 1 then
43464: LD_VAR 0 13
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: EQUAL
43473: IFFALSE 43477
// continue ;
43475: GO 43433
// PrepareHuman ( false , i , skill ) ;
43477: LD_INT 0
43479: PPUSH
43480: LD_VAR 0 8
43484: PPUSH
43485: LD_VAR 0 4
43489: PPUSH
43490: CALL_OW 380
// un := CreateHuman ;
43494: LD_ADDR_VAR 0 14
43498: PUSH
43499: CALL_OW 44
43503: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43504: LD_VAR 0 14
43508: PPUSH
43509: LD_VAR 0 1
43513: PPUSH
43514: CALL_OW 250
43518: PPUSH
43519: LD_VAR 0 1
43523: PPUSH
43524: CALL_OW 251
43528: PPUSH
43529: LD_INT 10
43531: PPUSH
43532: LD_INT 0
43534: PPUSH
43535: CALL_OW 50
// result := result ^ un ;
43539: LD_ADDR_VAR 0 7
43543: PUSH
43544: LD_VAR 0 7
43548: PUSH
43549: LD_VAR 0 14
43553: ADD
43554: ST_TO_ADDR
// end ;
43555: GO 43433
43557: POP
43558: POP
// end ; end ;
43559: LD_VAR 0 7
43563: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43564: LD_INT 0
43566: PPUSH
43567: PPUSH
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
43573: PPUSH
43574: PPUSH
43575: PPUSH
43576: PPUSH
43577: PPUSH
43578: PPUSH
43579: PPUSH
43580: PPUSH
43581: PPUSH
// result := false ;
43582: LD_ADDR_VAR 0 3
43586: PUSH
43587: LD_INT 0
43589: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43590: LD_VAR 0 1
43594: NOT
43595: IFTRUE 43620
43597: PUSH
43598: LD_VAR 0 1
43602: PPUSH
43603: CALL_OW 266
43607: PUSH
43608: LD_INT 32
43610: PUSH
43611: LD_INT 33
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: IN
43618: NOT
43619: OR
43620: IFFALSE 43624
// exit ;
43622: GO 44759
// nat := GetNation ( tower ) ;
43624: LD_ADDR_VAR 0 12
43628: PUSH
43629: LD_VAR 0 1
43633: PPUSH
43634: CALL_OW 248
43638: ST_TO_ADDR
// side := GetSide ( tower ) ;
43639: LD_ADDR_VAR 0 16
43643: PUSH
43644: LD_VAR 0 1
43648: PPUSH
43649: CALL_OW 255
43653: ST_TO_ADDR
// x := GetX ( tower ) ;
43654: LD_ADDR_VAR 0 10
43658: PUSH
43659: LD_VAR 0 1
43663: PPUSH
43664: CALL_OW 250
43668: ST_TO_ADDR
// y := GetY ( tower ) ;
43669: LD_ADDR_VAR 0 11
43673: PUSH
43674: LD_VAR 0 1
43678: PPUSH
43679: CALL_OW 251
43683: ST_TO_ADDR
// if not x or not y then
43684: LD_VAR 0 10
43688: NOT
43689: IFTRUE 43698
43691: PUSH
43692: LD_VAR 0 11
43696: NOT
43697: OR
43698: IFFALSE 43702
// exit ;
43700: GO 44759
// weapon := 0 ;
43702: LD_ADDR_VAR 0 18
43706: PUSH
43707: LD_INT 0
43709: ST_TO_ADDR
// fac_list := [ ] ;
43710: LD_ADDR_VAR 0 17
43714: PUSH
43715: EMPTY
43716: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43717: LD_ADDR_VAR 0 6
43721: PUSH
43722: LD_VAR 0 1
43726: PPUSH
43727: CALL_OW 274
43731: PPUSH
43732: LD_VAR 0 2
43736: PPUSH
43737: LD_INT 0
43739: PPUSH
43740: CALL 41294 0 3
43744: PPUSH
43745: LD_INT 30
43747: PUSH
43748: LD_INT 3
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PPUSH
43755: CALL_OW 72
43759: ST_TO_ADDR
// if not factories then
43760: LD_VAR 0 6
43764: NOT
43765: IFFALSE 43769
// exit ;
43767: GO 44759
// for i in factories do
43769: LD_ADDR_VAR 0 8
43773: PUSH
43774: LD_VAR 0 6
43778: PUSH
43779: FOR_IN
43780: IFFALSE 43805
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43782: LD_ADDR_VAR 0 17
43786: PUSH
43787: LD_VAR 0 17
43791: PUSH
43792: LD_VAR 0 8
43796: PPUSH
43797: CALL_OW 478
43801: UNION
43802: ST_TO_ADDR
43803: GO 43779
43805: POP
43806: POP
// if not fac_list then
43807: LD_VAR 0 17
43811: NOT
43812: IFFALSE 43816
// exit ;
43814: GO 44759
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43816: LD_ADDR_VAR 0 5
43820: PUSH
43821: LD_INT 4
43823: PUSH
43824: LD_INT 5
43826: PUSH
43827: LD_INT 9
43829: PUSH
43830: LD_INT 10
43832: PUSH
43833: LD_INT 6
43835: PUSH
43836: LD_INT 7
43838: PUSH
43839: LD_INT 11
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 27
43853: PUSH
43854: LD_INT 28
43856: PUSH
43857: LD_INT 26
43859: PUSH
43860: LD_INT 30
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 43
43871: PUSH
43872: LD_INT 44
43874: PUSH
43875: LD_INT 46
43877: PUSH
43878: LD_INT 45
43880: PUSH
43881: LD_INT 47
43883: PUSH
43884: LD_INT 49
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: LIST
43899: PUSH
43900: LD_VAR 0 12
43904: ARRAY
43905: ST_TO_ADDR
// list := list isect fac_list ;
43906: LD_ADDR_VAR 0 5
43910: PUSH
43911: LD_VAR 0 5
43915: PUSH
43916: LD_VAR 0 17
43920: ISECT
43921: ST_TO_ADDR
// if not list then
43922: LD_VAR 0 5
43926: NOT
43927: IFFALSE 43931
// exit ;
43929: GO 44759
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43931: LD_VAR 0 12
43935: PUSH
43936: LD_INT 3
43938: EQUAL
43939: IFFALSE 43951
43941: PUSH
43942: LD_INT 49
43944: PUSH
43945: LD_VAR 0 5
43949: IN
43950: AND
43951: IFFALSE 43971
43953: PUSH
43954: LD_INT 31
43956: PPUSH
43957: LD_VAR 0 16
43961: PPUSH
43962: CALL_OW 321
43966: PUSH
43967: LD_INT 2
43969: EQUAL
43970: AND
43971: IFFALSE 44031
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43973: LD_INT 22
43975: PUSH
43976: LD_VAR 0 16
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 35
43987: PUSH
43988: LD_INT 49
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 91
43997: PUSH
43998: LD_VAR 0 1
44002: PUSH
44003: LD_INT 10
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: LIST
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: LIST
44015: PPUSH
44016: CALL_OW 69
44020: NOT
44021: IFFALSE 44031
// weapon := ru_time_lapser ;
44023: LD_ADDR_VAR 0 18
44027: PUSH
44028: LD_INT 49
44030: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44031: LD_VAR 0 12
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: IN
44046: IFFALSE 44070
44048: PUSH
44049: LD_INT 11
44051: PUSH
44052: LD_VAR 0 5
44056: IN
44057: IFTRUE 44069
44059: PUSH
44060: LD_INT 30
44062: PUSH
44063: LD_VAR 0 5
44067: IN
44068: OR
44069: AND
44070: IFFALSE 44090
44072: PUSH
44073: LD_INT 6
44075: PPUSH
44076: LD_VAR 0 16
44080: PPUSH
44081: CALL_OW 321
44085: PUSH
44086: LD_INT 2
44088: EQUAL
44089: AND
44090: IFFALSE 44257
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44092: LD_INT 22
44094: PUSH
44095: LD_VAR 0 16
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: LD_INT 35
44109: PUSH
44110: LD_INT 11
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 35
44119: PUSH
44120: LD_INT 30
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 91
44134: PUSH
44135: LD_VAR 0 1
44139: PUSH
44140: LD_INT 18
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: LIST
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: LIST
44152: PPUSH
44153: CALL_OW 69
44157: NOT
44158: IFFALSE 44234
44160: PUSH
44161: LD_INT 22
44163: PUSH
44164: LD_VAR 0 16
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: LD_INT 30
44178: PUSH
44179: LD_INT 32
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 30
44188: PUSH
44189: LD_INT 33
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 91
44203: PUSH
44204: LD_VAR 0 1
44208: PUSH
44209: LD_INT 12
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: LIST
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: LIST
44221: PUSH
44222: EMPTY
44223: LIST
44224: PPUSH
44225: CALL_OW 69
44229: PUSH
44230: LD_INT 2
44232: GREATER
44233: AND
44234: IFFALSE 44257
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44236: LD_ADDR_VAR 0 18
44240: PUSH
44241: LD_INT 11
44243: PUSH
44244: LD_INT 30
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_VAR 0 12
44255: ARRAY
44256: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44257: LD_VAR 0 18
44261: NOT
44262: IFFALSE 44282
44264: PUSH
44265: LD_INT 40
44267: PPUSH
44268: LD_VAR 0 16
44272: PPUSH
44273: CALL_OW 321
44277: PUSH
44278: LD_INT 2
44280: EQUAL
44281: AND
44282: IFFALSE 44318
44284: PUSH
44285: LD_INT 7
44287: PUSH
44288: LD_VAR 0 5
44292: IN
44293: IFTRUE 44305
44295: PUSH
44296: LD_INT 28
44298: PUSH
44299: LD_VAR 0 5
44303: IN
44304: OR
44305: IFTRUE 44317
44307: PUSH
44308: LD_INT 45
44310: PUSH
44311: LD_VAR 0 5
44315: IN
44316: OR
44317: AND
44318: IFFALSE 44572
// begin hex := GetHexInfo ( x , y ) ;
44320: LD_ADDR_VAR 0 4
44324: PUSH
44325: LD_VAR 0 10
44329: PPUSH
44330: LD_VAR 0 11
44334: PPUSH
44335: CALL_OW 546
44339: ST_TO_ADDR
// if hex [ 1 ] then
44340: LD_VAR 0 4
44344: PUSH
44345: LD_INT 1
44347: ARRAY
44348: IFFALSE 44352
// exit ;
44350: GO 44759
// height := hex [ 2 ] ;
44352: LD_ADDR_VAR 0 15
44356: PUSH
44357: LD_VAR 0 4
44361: PUSH
44362: LD_INT 2
44364: ARRAY
44365: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44366: LD_ADDR_VAR 0 14
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: LD_INT 3
44379: PUSH
44380: LD_INT 5
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: ST_TO_ADDR
// for i in tmp do
44389: LD_ADDR_VAR 0 8
44393: PUSH
44394: LD_VAR 0 14
44398: PUSH
44399: FOR_IN
44400: IFFALSE 44570
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44402: LD_ADDR_VAR 0 9
44406: PUSH
44407: LD_VAR 0 10
44411: PPUSH
44412: LD_VAR 0 8
44416: PPUSH
44417: LD_INT 5
44419: PPUSH
44420: CALL_OW 272
44424: PUSH
44425: LD_VAR 0 11
44429: PPUSH
44430: LD_VAR 0 8
44434: PPUSH
44435: LD_INT 5
44437: PPUSH
44438: CALL_OW 273
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44447: LD_VAR 0 9
44451: PUSH
44452: LD_INT 1
44454: ARRAY
44455: PPUSH
44456: LD_VAR 0 9
44460: PUSH
44461: LD_INT 2
44463: ARRAY
44464: PPUSH
44465: CALL_OW 488
44469: IFFALSE 44568
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44471: LD_ADDR_VAR 0 4
44475: PUSH
44476: LD_VAR 0 9
44480: PUSH
44481: LD_INT 1
44483: ARRAY
44484: PPUSH
44485: LD_VAR 0 9
44489: PUSH
44490: LD_INT 2
44492: ARRAY
44493: PPUSH
44494: CALL_OW 546
44498: ST_TO_ADDR
// if hex [ 1 ] then
44499: LD_VAR 0 4
44503: PUSH
44504: LD_INT 1
44506: ARRAY
44507: IFFALSE 44511
// continue ;
44509: GO 44399
// h := hex [ 2 ] ;
44511: LD_ADDR_VAR 0 13
44515: PUSH
44516: LD_VAR 0 4
44520: PUSH
44521: LD_INT 2
44523: ARRAY
44524: ST_TO_ADDR
// if h + 7 < height then
44525: LD_VAR 0 13
44529: PUSH
44530: LD_INT 7
44532: PLUS
44533: PUSH
44534: LD_VAR 0 15
44538: LESS
44539: IFFALSE 44568
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44541: LD_ADDR_VAR 0 18
44545: PUSH
44546: LD_INT 7
44548: PUSH
44549: LD_INT 28
44551: PUSH
44552: LD_INT 45
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: LIST
44559: PUSH
44560: LD_VAR 0 12
44564: ARRAY
44565: ST_TO_ADDR
// break ;
44566: GO 44570
// end ; end ; end ;
44568: GO 44399
44570: POP
44571: POP
// end ; if not weapon then
44572: LD_VAR 0 18
44576: NOT
44577: IFFALSE 44637
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44579: LD_ADDR_VAR 0 5
44583: PUSH
44584: LD_VAR 0 5
44588: PUSH
44589: LD_INT 11
44591: PUSH
44592: LD_INT 30
44594: PUSH
44595: LD_INT 49
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: DIFF
44603: ST_TO_ADDR
// if not list then
44604: LD_VAR 0 5
44608: NOT
44609: IFFALSE 44613
// exit ;
44611: GO 44759
// weapon := list [ rand ( 1 , list ) ] ;
44613: LD_ADDR_VAR 0 18
44617: PUSH
44618: LD_VAR 0 5
44622: PUSH
44623: LD_INT 1
44625: PPUSH
44626: LD_VAR 0 5
44630: PPUSH
44631: CALL_OW 12
44635: ARRAY
44636: ST_TO_ADDR
// end ; if weapon then
44637: LD_VAR 0 18
44641: IFFALSE 44759
// begin tmp := CostOfWeapon ( weapon ) ;
44643: LD_ADDR_VAR 0 14
44647: PUSH
44648: LD_VAR 0 18
44652: PPUSH
44653: CALL_OW 451
44657: ST_TO_ADDR
// j := GetBase ( tower ) ;
44658: LD_ADDR_VAR 0 9
44662: PUSH
44663: LD_VAR 0 1
44667: PPUSH
44668: CALL_OW 274
44672: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44673: LD_VAR 0 9
44677: PPUSH
44678: LD_INT 1
44680: PPUSH
44681: CALL_OW 275
44685: PUSH
44686: LD_VAR 0 14
44690: PUSH
44691: LD_INT 1
44693: ARRAY
44694: GREATEREQUAL
44695: IFFALSE 44721
44697: PUSH
44698: LD_VAR 0 9
44702: PPUSH
44703: LD_INT 2
44705: PPUSH
44706: CALL_OW 275
44710: PUSH
44711: LD_VAR 0 14
44715: PUSH
44716: LD_INT 2
44718: ARRAY
44719: GREATEREQUAL
44720: AND
44721: IFFALSE 44747
44723: PUSH
44724: LD_VAR 0 9
44728: PPUSH
44729: LD_INT 3
44731: PPUSH
44732: CALL_OW 275
44736: PUSH
44737: LD_VAR 0 14
44741: PUSH
44742: LD_INT 3
44744: ARRAY
44745: GREATEREQUAL
44746: AND
44747: IFFALSE 44759
// result := weapon ;
44749: LD_ADDR_VAR 0 3
44753: PUSH
44754: LD_VAR 0 18
44758: ST_TO_ADDR
// end ; end ;
44759: LD_VAR 0 3
44763: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44764: LD_INT 0
44766: PPUSH
44767: PPUSH
// result := true ;
44768: LD_ADDR_VAR 0 3
44772: PUSH
44773: LD_INT 1
44775: ST_TO_ADDR
// if array1 = array2 then
44776: LD_VAR 0 1
44780: PUSH
44781: LD_VAR 0 2
44785: EQUAL
44786: IFFALSE 44846
// begin for i = 1 to array1 do
44788: LD_ADDR_VAR 0 4
44792: PUSH
44793: DOUBLE
44794: LD_INT 1
44796: DEC
44797: ST_TO_ADDR
44798: LD_VAR 0 1
44802: PUSH
44803: FOR_TO
44804: IFFALSE 44842
// if array1 [ i ] <> array2 [ i ] then
44806: LD_VAR 0 1
44810: PUSH
44811: LD_VAR 0 4
44815: ARRAY
44816: PUSH
44817: LD_VAR 0 2
44821: PUSH
44822: LD_VAR 0 4
44826: ARRAY
44827: NONEQUAL
44828: IFFALSE 44840
// begin result := false ;
44830: LD_ADDR_VAR 0 3
44834: PUSH
44835: LD_INT 0
44837: ST_TO_ADDR
// break ;
44838: GO 44842
// end ;
44840: GO 44803
44842: POP
44843: POP
// end else
44844: GO 44854
// result := false ;
44846: LD_ADDR_VAR 0 3
44850: PUSH
44851: LD_INT 0
44853: ST_TO_ADDR
// end ;
44854: LD_VAR 0 3
44858: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44859: LD_INT 0
44861: PPUSH
44862: PPUSH
// if not array1 or not array2 then
44863: LD_VAR 0 1
44867: NOT
44868: IFTRUE 44877
44870: PUSH
44871: LD_VAR 0 2
44875: NOT
44876: OR
44877: IFFALSE 44881
// exit ;
44879: GO 44945
// result := true ;
44881: LD_ADDR_VAR 0 3
44885: PUSH
44886: LD_INT 1
44888: ST_TO_ADDR
// for i = 1 to array1 do
44889: LD_ADDR_VAR 0 4
44893: PUSH
44894: DOUBLE
44895: LD_INT 1
44897: DEC
44898: ST_TO_ADDR
44899: LD_VAR 0 1
44903: PUSH
44904: FOR_TO
44905: IFFALSE 44943
// if array1 [ i ] <> array2 [ i ] then
44907: LD_VAR 0 1
44911: PUSH
44912: LD_VAR 0 4
44916: ARRAY
44917: PUSH
44918: LD_VAR 0 2
44922: PUSH
44923: LD_VAR 0 4
44927: ARRAY
44928: NONEQUAL
44929: IFFALSE 44941
// begin result := false ;
44931: LD_ADDR_VAR 0 3
44935: PUSH
44936: LD_INT 0
44938: ST_TO_ADDR
// break ;
44939: GO 44943
// end ;
44941: GO 44904
44943: POP
44944: POP
// end ;
44945: LD_VAR 0 3
44949: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44950: LD_INT 0
44952: PPUSH
44953: PPUSH
44954: PPUSH
// pom := GetBase ( fac ) ;
44955: LD_ADDR_VAR 0 5
44959: PUSH
44960: LD_VAR 0 1
44964: PPUSH
44965: CALL_OW 274
44969: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44970: LD_ADDR_VAR 0 4
44974: PUSH
44975: LD_VAR 0 2
44979: PUSH
44980: LD_INT 1
44982: ARRAY
44983: PPUSH
44984: LD_VAR 0 2
44988: PUSH
44989: LD_INT 2
44991: ARRAY
44992: PPUSH
44993: LD_VAR 0 2
44997: PUSH
44998: LD_INT 3
45000: ARRAY
45001: PPUSH
45002: LD_VAR 0 2
45006: PUSH
45007: LD_INT 4
45009: ARRAY
45010: PPUSH
45011: CALL_OW 449
45015: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45016: LD_ADDR_VAR 0 3
45020: PUSH
45021: LD_VAR 0 5
45025: PPUSH
45026: LD_INT 1
45028: PPUSH
45029: CALL_OW 275
45033: PUSH
45034: LD_VAR 0 4
45038: PUSH
45039: LD_INT 1
45041: ARRAY
45042: GREATEREQUAL
45043: IFFALSE 45069
45045: PUSH
45046: LD_VAR 0 5
45050: PPUSH
45051: LD_INT 2
45053: PPUSH
45054: CALL_OW 275
45058: PUSH
45059: LD_VAR 0 4
45063: PUSH
45064: LD_INT 2
45066: ARRAY
45067: GREATEREQUAL
45068: AND
45069: IFFALSE 45095
45071: PUSH
45072: LD_VAR 0 5
45076: PPUSH
45077: LD_INT 3
45079: PPUSH
45080: CALL_OW 275
45084: PUSH
45085: LD_VAR 0 4
45089: PUSH
45090: LD_INT 3
45092: ARRAY
45093: GREATEREQUAL
45094: AND
45095: ST_TO_ADDR
// end ;
45096: LD_VAR 0 3
45100: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45101: LD_INT 0
45103: PPUSH
45104: PPUSH
45105: PPUSH
45106: PPUSH
// pom := GetBase ( building ) ;
45107: LD_ADDR_VAR 0 3
45111: PUSH
45112: LD_VAR 0 1
45116: PPUSH
45117: CALL_OW 274
45121: ST_TO_ADDR
// if not pom then
45122: LD_VAR 0 3
45126: NOT
45127: IFFALSE 45131
// exit ;
45129: GO 45305
// btype := GetBType ( building ) ;
45131: LD_ADDR_VAR 0 5
45135: PUSH
45136: LD_VAR 0 1
45140: PPUSH
45141: CALL_OW 266
45145: ST_TO_ADDR
// if btype = b_armoury then
45146: LD_VAR 0 5
45150: PUSH
45151: LD_INT 4
45153: EQUAL
45154: IFFALSE 45164
// btype := b_barracks ;
45156: LD_ADDR_VAR 0 5
45160: PUSH
45161: LD_INT 5
45163: ST_TO_ADDR
// if btype = b_depot then
45164: LD_VAR 0 5
45168: PUSH
45169: LD_INT 0
45171: EQUAL
45172: IFFALSE 45182
// btype := b_warehouse ;
45174: LD_ADDR_VAR 0 5
45178: PUSH
45179: LD_INT 1
45181: ST_TO_ADDR
// if btype = b_workshop then
45182: LD_VAR 0 5
45186: PUSH
45187: LD_INT 2
45189: EQUAL
45190: IFFALSE 45200
// btype := b_factory ;
45192: LD_ADDR_VAR 0 5
45196: PUSH
45197: LD_INT 3
45199: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45200: LD_ADDR_VAR 0 4
45204: PUSH
45205: LD_VAR 0 5
45209: PPUSH
45210: LD_VAR 0 1
45214: PPUSH
45215: CALL_OW 248
45219: PPUSH
45220: CALL_OW 450
45224: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45225: LD_ADDR_VAR 0 2
45229: PUSH
45230: LD_VAR 0 3
45234: PPUSH
45235: LD_INT 1
45237: PPUSH
45238: CALL_OW 275
45242: PUSH
45243: LD_VAR 0 4
45247: PUSH
45248: LD_INT 1
45250: ARRAY
45251: GREATEREQUAL
45252: IFFALSE 45278
45254: PUSH
45255: LD_VAR 0 3
45259: PPUSH
45260: LD_INT 2
45262: PPUSH
45263: CALL_OW 275
45267: PUSH
45268: LD_VAR 0 4
45272: PUSH
45273: LD_INT 2
45275: ARRAY
45276: GREATEREQUAL
45277: AND
45278: IFFALSE 45304
45280: PUSH
45281: LD_VAR 0 3
45285: PPUSH
45286: LD_INT 3
45288: PPUSH
45289: CALL_OW 275
45293: PUSH
45294: LD_VAR 0 4
45298: PUSH
45299: LD_INT 3
45301: ARRAY
45302: GREATEREQUAL
45303: AND
45304: ST_TO_ADDR
// end ;
45305: LD_VAR 0 2
45309: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45310: LD_INT 0
45312: PPUSH
45313: PPUSH
45314: PPUSH
// pom := GetBase ( building ) ;
45315: LD_ADDR_VAR 0 4
45319: PUSH
45320: LD_VAR 0 1
45324: PPUSH
45325: CALL_OW 274
45329: ST_TO_ADDR
// if not pom then
45330: LD_VAR 0 4
45334: NOT
45335: IFFALSE 45339
// exit ;
45337: GO 45444
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45339: LD_ADDR_VAR 0 5
45343: PUSH
45344: LD_VAR 0 2
45348: PPUSH
45349: LD_VAR 0 1
45353: PPUSH
45354: CALL_OW 248
45358: PPUSH
45359: CALL_OW 450
45363: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45364: LD_ADDR_VAR 0 3
45368: PUSH
45369: LD_VAR 0 4
45373: PPUSH
45374: LD_INT 1
45376: PPUSH
45377: CALL_OW 275
45381: PUSH
45382: LD_VAR 0 5
45386: PUSH
45387: LD_INT 1
45389: ARRAY
45390: GREATEREQUAL
45391: IFFALSE 45417
45393: PUSH
45394: LD_VAR 0 4
45398: PPUSH
45399: LD_INT 2
45401: PPUSH
45402: CALL_OW 275
45406: PUSH
45407: LD_VAR 0 5
45411: PUSH
45412: LD_INT 2
45414: ARRAY
45415: GREATEREQUAL
45416: AND
45417: IFFALSE 45443
45419: PUSH
45420: LD_VAR 0 4
45424: PPUSH
45425: LD_INT 3
45427: PPUSH
45428: CALL_OW 275
45432: PUSH
45433: LD_VAR 0 5
45437: PUSH
45438: LD_INT 3
45440: ARRAY
45441: GREATEREQUAL
45442: AND
45443: ST_TO_ADDR
// end ;
45444: LD_VAR 0 3
45448: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45449: LD_INT 0
45451: PPUSH
45452: PPUSH
45453: PPUSH
45454: PPUSH
45455: PPUSH
45456: PPUSH
45457: PPUSH
45458: PPUSH
45459: PPUSH
45460: PPUSH
45461: PPUSH
// result := false ;
45462: LD_ADDR_VAR 0 8
45466: PUSH
45467: LD_INT 0
45469: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45470: LD_VAR 0 5
45474: NOT
45475: IFTRUE 45484
45477: PUSH
45478: LD_VAR 0 1
45482: NOT
45483: OR
45484: IFTRUE 45493
45486: PUSH
45487: LD_VAR 0 2
45491: NOT
45492: OR
45493: IFTRUE 45502
45495: PUSH
45496: LD_VAR 0 3
45500: NOT
45501: OR
45502: IFFALSE 45506
// exit ;
45504: GO 46332
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45506: LD_ADDR_VAR 0 14
45510: PUSH
45511: LD_VAR 0 1
45515: PPUSH
45516: LD_VAR 0 2
45520: PPUSH
45521: LD_VAR 0 3
45525: PPUSH
45526: LD_VAR 0 4
45530: PPUSH
45531: LD_VAR 0 5
45535: PUSH
45536: LD_INT 1
45538: ARRAY
45539: PPUSH
45540: CALL_OW 248
45544: PPUSH
45545: LD_INT 0
45547: PPUSH
45548: CALL 47613 0 6
45552: ST_TO_ADDR
// if not hexes then
45553: LD_VAR 0 14
45557: NOT
45558: IFFALSE 45562
// exit ;
45560: GO 46332
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45562: LD_ADDR_VAR 0 17
45566: PUSH
45567: LD_VAR 0 5
45571: PPUSH
45572: LD_INT 22
45574: PUSH
45575: LD_VAR 0 13
45579: PPUSH
45580: CALL_OW 255
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: LD_INT 30
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 30
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: LIST
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PPUSH
45621: CALL_OW 72
45625: ST_TO_ADDR
// for i = 1 to hexes do
45626: LD_ADDR_VAR 0 9
45630: PUSH
45631: DOUBLE
45632: LD_INT 1
45634: DEC
45635: ST_TO_ADDR
45636: LD_VAR 0 14
45640: PUSH
45641: FOR_TO
45642: IFFALSE 46330
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45644: LD_ADDR_VAR 0 13
45648: PUSH
45649: LD_VAR 0 14
45653: PUSH
45654: LD_VAR 0 9
45658: ARRAY
45659: PUSH
45660: LD_INT 1
45662: ARRAY
45663: PPUSH
45664: LD_VAR 0 14
45668: PUSH
45669: LD_VAR 0 9
45673: ARRAY
45674: PUSH
45675: LD_INT 2
45677: ARRAY
45678: PPUSH
45679: CALL_OW 428
45683: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45684: LD_VAR 0 14
45688: PUSH
45689: LD_VAR 0 9
45693: ARRAY
45694: PUSH
45695: LD_INT 1
45697: ARRAY
45698: PPUSH
45699: LD_VAR 0 14
45703: PUSH
45704: LD_VAR 0 9
45708: ARRAY
45709: PUSH
45710: LD_INT 2
45712: ARRAY
45713: PPUSH
45714: CALL_OW 351
45718: IFTRUE 45757
45720: PUSH
45721: LD_VAR 0 14
45725: PUSH
45726: LD_VAR 0 9
45730: ARRAY
45731: PUSH
45732: LD_INT 1
45734: ARRAY
45735: PPUSH
45736: LD_VAR 0 14
45740: PUSH
45741: LD_VAR 0 9
45745: ARRAY
45746: PUSH
45747: LD_INT 2
45749: ARRAY
45750: PPUSH
45751: CALL_OW 488
45755: NOT
45756: OR
45757: IFTRUE 45774
45759: PUSH
45760: LD_VAR 0 13
45764: PPUSH
45765: CALL_OW 247
45769: PUSH
45770: LD_INT 3
45772: EQUAL
45773: OR
45774: IFFALSE 45780
// exit ;
45776: POP
45777: POP
45778: GO 46332
// if not tmp then
45780: LD_VAR 0 13
45784: NOT
45785: IFFALSE 45789
// continue ;
45787: GO 45641
// result := true ;
45789: LD_ADDR_VAR 0 8
45793: PUSH
45794: LD_INT 1
45796: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45797: LD_VAR 0 6
45801: IFFALSE 45818
45803: PUSH
45804: LD_VAR 0 13
45808: PPUSH
45809: CALL_OW 247
45813: PUSH
45814: LD_INT 2
45816: EQUAL
45817: AND
45818: IFFALSE 45835
45820: PUSH
45821: LD_VAR 0 13
45825: PPUSH
45826: CALL_OW 263
45830: PUSH
45831: LD_INT 1
45833: EQUAL
45834: AND
45835: IFFALSE 45999
// begin if IsDrivenBy ( tmp ) then
45837: LD_VAR 0 13
45841: PPUSH
45842: CALL_OW 311
45846: IFFALSE 45850
// continue ;
45848: GO 45641
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45850: LD_VAR 0 6
45854: PPUSH
45855: LD_INT 3
45857: PUSH
45858: LD_INT 60
45860: PUSH
45861: EMPTY
45862: LIST
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 3
45870: PUSH
45871: LD_INT 55
45873: PUSH
45874: EMPTY
45875: LIST
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PPUSH
45885: CALL_OW 72
45889: IFFALSE 45997
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45891: LD_ADDR_VAR 0 18
45895: PUSH
45896: LD_VAR 0 6
45900: PPUSH
45901: LD_INT 3
45903: PUSH
45904: LD_INT 60
45906: PUSH
45907: EMPTY
45908: LIST
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 3
45916: PUSH
45917: LD_INT 55
45919: PUSH
45920: EMPTY
45921: LIST
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PPUSH
45931: CALL_OW 72
45935: PUSH
45936: LD_INT 1
45938: ARRAY
45939: ST_TO_ADDR
// if IsInUnit ( driver ) then
45940: LD_VAR 0 18
45944: PPUSH
45945: CALL_OW 310
45949: IFFALSE 45960
// ComExit ( driver ) ;
45951: LD_VAR 0 18
45955: PPUSH
45956: CALL 71603 0 1
// AddComEnterUnit ( driver , tmp ) ;
45960: LD_VAR 0 18
45964: PPUSH
45965: LD_VAR 0 13
45969: PPUSH
45970: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45974: LD_VAR 0 18
45978: PPUSH
45979: LD_VAR 0 7
45983: PPUSH
45984: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45988: LD_VAR 0 18
45992: PPUSH
45993: CALL_OW 181
// end ; continue ;
45997: GO 45641
// end ; if not cleaners or not tmp in cleaners then
45999: LD_VAR 0 6
46003: NOT
46004: IFTRUE 46019
46006: PUSH
46007: LD_VAR 0 13
46011: PUSH
46012: LD_VAR 0 6
46016: IN
46017: NOT
46018: OR
46019: IFFALSE 46328
// begin if dep then
46021: LD_VAR 0 17
46025: IFFALSE 46161
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46027: LD_ADDR_VAR 0 16
46031: PUSH
46032: LD_VAR 0 17
46036: PUSH
46037: LD_INT 1
46039: ARRAY
46040: PPUSH
46041: CALL_OW 250
46045: PPUSH
46046: LD_VAR 0 17
46050: PUSH
46051: LD_INT 1
46053: ARRAY
46054: PPUSH
46055: CALL_OW 254
46059: PPUSH
46060: LD_INT 5
46062: PPUSH
46063: CALL_OW 272
46067: PUSH
46068: LD_VAR 0 17
46072: PUSH
46073: LD_INT 1
46075: ARRAY
46076: PPUSH
46077: CALL_OW 251
46081: PPUSH
46082: LD_VAR 0 17
46086: PUSH
46087: LD_INT 1
46089: ARRAY
46090: PPUSH
46091: CALL_OW 254
46095: PPUSH
46096: LD_INT 5
46098: PPUSH
46099: CALL_OW 273
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46108: LD_VAR 0 16
46112: PUSH
46113: LD_INT 1
46115: ARRAY
46116: PPUSH
46117: LD_VAR 0 16
46121: PUSH
46122: LD_INT 2
46124: ARRAY
46125: PPUSH
46126: CALL_OW 488
46130: IFFALSE 46161
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46132: LD_VAR 0 13
46136: PPUSH
46137: LD_VAR 0 16
46141: PUSH
46142: LD_INT 1
46144: ARRAY
46145: PPUSH
46146: LD_VAR 0 16
46150: PUSH
46151: LD_INT 2
46153: ARRAY
46154: PPUSH
46155: CALL_OW 111
// continue ;
46159: GO 45641
// end ; end ; r := GetDir ( tmp ) ;
46161: LD_ADDR_VAR 0 15
46165: PUSH
46166: LD_VAR 0 13
46170: PPUSH
46171: CALL_OW 254
46175: ST_TO_ADDR
// if r = 5 then
46176: LD_VAR 0 15
46180: PUSH
46181: LD_INT 5
46183: EQUAL
46184: IFFALSE 46194
// r := 0 ;
46186: LD_ADDR_VAR 0 15
46190: PUSH
46191: LD_INT 0
46193: ST_TO_ADDR
// for j = r to 5 do
46194: LD_ADDR_VAR 0 10
46198: PUSH
46199: DOUBLE
46200: LD_VAR 0 15
46204: DEC
46205: ST_TO_ADDR
46206: LD_INT 5
46208: PUSH
46209: FOR_TO
46210: IFFALSE 46326
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46212: LD_ADDR_VAR 0 11
46216: PUSH
46217: LD_VAR 0 13
46221: PPUSH
46222: CALL_OW 250
46226: PPUSH
46227: LD_VAR 0 10
46231: PPUSH
46232: LD_INT 2
46234: PPUSH
46235: CALL_OW 272
46239: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46240: LD_ADDR_VAR 0 12
46244: PUSH
46245: LD_VAR 0 13
46249: PPUSH
46250: CALL_OW 251
46254: PPUSH
46255: LD_VAR 0 10
46259: PPUSH
46260: LD_INT 2
46262: PPUSH
46263: CALL_OW 273
46267: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46268: LD_VAR 0 11
46272: PPUSH
46273: LD_VAR 0 12
46277: PPUSH
46278: CALL_OW 488
46282: IFFALSE 46301
46284: PUSH
46285: LD_VAR 0 11
46289: PPUSH
46290: LD_VAR 0 12
46294: PPUSH
46295: CALL_OW 428
46299: NOT
46300: AND
46301: IFFALSE 46324
// begin ComMoveXY ( tmp , _x , _y ) ;
46303: LD_VAR 0 13
46307: PPUSH
46308: LD_VAR 0 11
46312: PPUSH
46313: LD_VAR 0 12
46317: PPUSH
46318: CALL_OW 111
// break ;
46322: GO 46326
// end ; end ;
46324: GO 46209
46326: POP
46327: POP
// end ; end ;
46328: GO 45641
46330: POP
46331: POP
// end ;
46332: LD_VAR 0 8
46336: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46337: LD_INT 0
46339: PPUSH
// result := true ;
46340: LD_ADDR_VAR 0 3
46344: PUSH
46345: LD_INT 1
46347: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46348: LD_VAR 0 2
46352: PUSH
46353: LD_INT 24
46355: DOUBLE
46356: EQUAL
46357: IFTRUE 46367
46359: LD_INT 33
46361: DOUBLE
46362: EQUAL
46363: IFTRUE 46367
46365: GO 46392
46367: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46368: LD_ADDR_VAR 0 3
46372: PUSH
46373: LD_INT 32
46375: PPUSH
46376: LD_VAR 0 1
46380: PPUSH
46381: CALL_OW 321
46385: PUSH
46386: LD_INT 2
46388: EQUAL
46389: ST_TO_ADDR
46390: GO 46708
46392: LD_INT 20
46394: DOUBLE
46395: EQUAL
46396: IFTRUE 46400
46398: GO 46425
46400: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46401: LD_ADDR_VAR 0 3
46405: PUSH
46406: LD_INT 6
46408: PPUSH
46409: LD_VAR 0 1
46413: PPUSH
46414: CALL_OW 321
46418: PUSH
46419: LD_INT 2
46421: EQUAL
46422: ST_TO_ADDR
46423: GO 46708
46425: LD_INT 22
46427: DOUBLE
46428: EQUAL
46429: IFTRUE 46439
46431: LD_INT 36
46433: DOUBLE
46434: EQUAL
46435: IFTRUE 46439
46437: GO 46464
46439: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46440: LD_ADDR_VAR 0 3
46444: PUSH
46445: LD_INT 15
46447: PPUSH
46448: LD_VAR 0 1
46452: PPUSH
46453: CALL_OW 321
46457: PUSH
46458: LD_INT 2
46460: EQUAL
46461: ST_TO_ADDR
46462: GO 46708
46464: LD_INT 30
46466: DOUBLE
46467: EQUAL
46468: IFTRUE 46472
46470: GO 46497
46472: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46473: LD_ADDR_VAR 0 3
46477: PUSH
46478: LD_INT 20
46480: PPUSH
46481: LD_VAR 0 1
46485: PPUSH
46486: CALL_OW 321
46490: PUSH
46491: LD_INT 2
46493: EQUAL
46494: ST_TO_ADDR
46495: GO 46708
46497: LD_INT 28
46499: DOUBLE
46500: EQUAL
46501: IFTRUE 46511
46503: LD_INT 21
46505: DOUBLE
46506: EQUAL
46507: IFTRUE 46511
46509: GO 46536
46511: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46512: LD_ADDR_VAR 0 3
46516: PUSH
46517: LD_INT 21
46519: PPUSH
46520: LD_VAR 0 1
46524: PPUSH
46525: CALL_OW 321
46529: PUSH
46530: LD_INT 2
46532: EQUAL
46533: ST_TO_ADDR
46534: GO 46708
46536: LD_INT 16
46538: DOUBLE
46539: EQUAL
46540: IFTRUE 46544
46542: GO 46569
46544: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46545: LD_ADDR_VAR 0 3
46549: PUSH
46550: LD_INT 84
46552: PPUSH
46553: LD_VAR 0 1
46557: PPUSH
46558: CALL_OW 321
46562: PUSH
46563: LD_INT 2
46565: EQUAL
46566: ST_TO_ADDR
46567: GO 46708
46569: LD_INT 19
46571: DOUBLE
46572: EQUAL
46573: IFTRUE 46583
46575: LD_INT 23
46577: DOUBLE
46578: EQUAL
46579: IFTRUE 46583
46581: GO 46608
46583: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46584: LD_ADDR_VAR 0 3
46588: PUSH
46589: LD_INT 83
46591: PPUSH
46592: LD_VAR 0 1
46596: PPUSH
46597: CALL_OW 321
46601: PUSH
46602: LD_INT 2
46604: EQUAL
46605: ST_TO_ADDR
46606: GO 46708
46608: LD_INT 17
46610: DOUBLE
46611: EQUAL
46612: IFTRUE 46616
46614: GO 46641
46616: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46617: LD_ADDR_VAR 0 3
46621: PUSH
46622: LD_INT 39
46624: PPUSH
46625: LD_VAR 0 1
46629: PPUSH
46630: CALL_OW 321
46634: PUSH
46635: LD_INT 2
46637: EQUAL
46638: ST_TO_ADDR
46639: GO 46708
46641: LD_INT 18
46643: DOUBLE
46644: EQUAL
46645: IFTRUE 46649
46647: GO 46674
46649: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46650: LD_ADDR_VAR 0 3
46654: PUSH
46655: LD_INT 40
46657: PPUSH
46658: LD_VAR 0 1
46662: PPUSH
46663: CALL_OW 321
46667: PUSH
46668: LD_INT 2
46670: EQUAL
46671: ST_TO_ADDR
46672: GO 46708
46674: LD_INT 27
46676: DOUBLE
46677: EQUAL
46678: IFTRUE 46682
46680: GO 46707
46682: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46683: LD_ADDR_VAR 0 3
46687: PUSH
46688: LD_INT 35
46690: PPUSH
46691: LD_VAR 0 1
46695: PPUSH
46696: CALL_OW 321
46700: PUSH
46701: LD_INT 2
46703: EQUAL
46704: ST_TO_ADDR
46705: GO 46708
46707: POP
// end ;
46708: LD_VAR 0 3
46712: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46713: LD_INT 0
46715: PPUSH
46716: PPUSH
46717: PPUSH
46718: PPUSH
46719: PPUSH
46720: PPUSH
46721: PPUSH
46722: PPUSH
46723: PPUSH
46724: PPUSH
46725: PPUSH
// result := false ;
46726: LD_ADDR_VAR 0 6
46730: PUSH
46731: LD_INT 0
46733: ST_TO_ADDR
// if btype = b_depot then
46734: LD_VAR 0 2
46738: PUSH
46739: LD_INT 0
46741: EQUAL
46742: IFFALSE 46754
// begin result := true ;
46744: LD_ADDR_VAR 0 6
46748: PUSH
46749: LD_INT 1
46751: ST_TO_ADDR
// exit ;
46752: GO 47608
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46754: LD_VAR 0 1
46758: NOT
46759: IFTRUE 46784
46761: PUSH
46762: LD_VAR 0 1
46766: PPUSH
46767: CALL_OW 266
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: IN
46782: NOT
46783: OR
46784: IFTRUE 46793
46786: PUSH
46787: LD_VAR 0 2
46791: NOT
46792: OR
46793: IFTRUE 46829
46795: PUSH
46796: LD_VAR 0 5
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: LD_INT 3
46812: PUSH
46813: LD_INT 4
46815: PUSH
46816: LD_INT 5
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: IN
46827: NOT
46828: OR
46829: IFTRUE 46848
46831: PUSH
46832: LD_VAR 0 3
46836: PPUSH
46837: LD_VAR 0 4
46841: PPUSH
46842: CALL_OW 488
46846: NOT
46847: OR
46848: IFFALSE 46852
// exit ;
46850: GO 47608
// side := GetSide ( depot ) ;
46852: LD_ADDR_VAR 0 9
46856: PUSH
46857: LD_VAR 0 1
46861: PPUSH
46862: CALL_OW 255
46866: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46867: LD_VAR 0 9
46871: PPUSH
46872: LD_VAR 0 2
46876: PPUSH
46877: CALL 46337 0 2
46881: NOT
46882: IFFALSE 46886
// exit ;
46884: GO 47608
// pom := GetBase ( depot ) ;
46886: LD_ADDR_VAR 0 10
46890: PUSH
46891: LD_VAR 0 1
46895: PPUSH
46896: CALL_OW 274
46900: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46901: LD_ADDR_VAR 0 11
46905: PUSH
46906: LD_VAR 0 2
46910: PPUSH
46911: LD_VAR 0 1
46915: PPUSH
46916: CALL_OW 248
46920: PPUSH
46921: CALL_OW 450
46925: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46926: LD_VAR 0 10
46930: PPUSH
46931: LD_INT 1
46933: PPUSH
46934: CALL_OW 275
46938: PUSH
46939: LD_VAR 0 11
46943: PUSH
46944: LD_INT 1
46946: ARRAY
46947: GREATEREQUAL
46948: IFFALSE 46974
46950: PUSH
46951: LD_VAR 0 10
46955: PPUSH
46956: LD_INT 2
46958: PPUSH
46959: CALL_OW 275
46963: PUSH
46964: LD_VAR 0 11
46968: PUSH
46969: LD_INT 2
46971: ARRAY
46972: GREATEREQUAL
46973: AND
46974: IFFALSE 47000
46976: PUSH
46977: LD_VAR 0 10
46981: PPUSH
46982: LD_INT 3
46984: PPUSH
46985: CALL_OW 275
46989: PUSH
46990: LD_VAR 0 11
46994: PUSH
46995: LD_INT 3
46997: ARRAY
46998: GREATEREQUAL
46999: AND
47000: NOT
47001: IFFALSE 47005
// exit ;
47003: GO 47608
// if GetBType ( depot ) = b_depot then
47005: LD_VAR 0 1
47009: PPUSH
47010: CALL_OW 266
47014: PUSH
47015: LD_INT 0
47017: EQUAL
47018: IFFALSE 47030
// dist := 28 else
47020: LD_ADDR_VAR 0 14
47024: PUSH
47025: LD_INT 28
47027: ST_TO_ADDR
47028: GO 47038
// dist := 36 ;
47030: LD_ADDR_VAR 0 14
47034: PUSH
47035: LD_INT 36
47037: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47038: LD_VAR 0 1
47042: PPUSH
47043: LD_VAR 0 3
47047: PPUSH
47048: LD_VAR 0 4
47052: PPUSH
47053: CALL_OW 297
47057: PUSH
47058: LD_VAR 0 14
47062: GREATER
47063: IFFALSE 47067
// exit ;
47065: GO 47608
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47067: LD_ADDR_VAR 0 12
47071: PUSH
47072: LD_VAR 0 2
47076: PPUSH
47077: LD_VAR 0 3
47081: PPUSH
47082: LD_VAR 0 4
47086: PPUSH
47087: LD_VAR 0 5
47091: PPUSH
47092: LD_VAR 0 1
47096: PPUSH
47097: CALL_OW 248
47101: PPUSH
47102: LD_INT 0
47104: PPUSH
47105: CALL 47613 0 6
47109: ST_TO_ADDR
// if not hexes then
47110: LD_VAR 0 12
47114: NOT
47115: IFFALSE 47119
// exit ;
47117: GO 47608
// hex := GetHexInfo ( x , y ) ;
47119: LD_ADDR_VAR 0 15
47123: PUSH
47124: LD_VAR 0 3
47128: PPUSH
47129: LD_VAR 0 4
47133: PPUSH
47134: CALL_OW 546
47138: ST_TO_ADDR
// if hex [ 1 ] then
47139: LD_VAR 0 15
47143: PUSH
47144: LD_INT 1
47146: ARRAY
47147: IFFALSE 47151
// exit ;
47149: GO 47608
// height := hex [ 2 ] ;
47151: LD_ADDR_VAR 0 13
47155: PUSH
47156: LD_VAR 0 15
47160: PUSH
47161: LD_INT 2
47163: ARRAY
47164: ST_TO_ADDR
// for i = 1 to hexes do
47165: LD_ADDR_VAR 0 7
47169: PUSH
47170: DOUBLE
47171: LD_INT 1
47173: DEC
47174: ST_TO_ADDR
47175: LD_VAR 0 12
47179: PUSH
47180: FOR_TO
47181: IFFALSE 47525
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47183: LD_VAR 0 12
47187: PUSH
47188: LD_VAR 0 7
47192: ARRAY
47193: PUSH
47194: LD_INT 1
47196: ARRAY
47197: PPUSH
47198: LD_VAR 0 12
47202: PUSH
47203: LD_VAR 0 7
47207: ARRAY
47208: PUSH
47209: LD_INT 2
47211: ARRAY
47212: PPUSH
47213: CALL_OW 488
47217: NOT
47218: IFTRUE 47260
47220: PUSH
47221: LD_VAR 0 12
47225: PUSH
47226: LD_VAR 0 7
47230: ARRAY
47231: PUSH
47232: LD_INT 1
47234: ARRAY
47235: PPUSH
47236: LD_VAR 0 12
47240: PUSH
47241: LD_VAR 0 7
47245: ARRAY
47246: PUSH
47247: LD_INT 2
47249: ARRAY
47250: PPUSH
47251: CALL_OW 428
47255: PUSH
47256: LD_INT 0
47258: GREATER
47259: OR
47260: IFTRUE 47298
47262: PUSH
47263: LD_VAR 0 12
47267: PUSH
47268: LD_VAR 0 7
47272: ARRAY
47273: PUSH
47274: LD_INT 1
47276: ARRAY
47277: PPUSH
47278: LD_VAR 0 12
47282: PUSH
47283: LD_VAR 0 7
47287: ARRAY
47288: PUSH
47289: LD_INT 2
47291: ARRAY
47292: PPUSH
47293: CALL_OW 351
47297: OR
47298: IFFALSE 47304
// exit ;
47300: POP
47301: POP
47302: GO 47608
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47304: LD_ADDR_VAR 0 8
47308: PUSH
47309: LD_VAR 0 12
47313: PUSH
47314: LD_VAR 0 7
47318: ARRAY
47319: PUSH
47320: LD_INT 1
47322: ARRAY
47323: PPUSH
47324: LD_VAR 0 12
47328: PUSH
47329: LD_VAR 0 7
47333: ARRAY
47334: PUSH
47335: LD_INT 2
47337: ARRAY
47338: PPUSH
47339: CALL_OW 546
47343: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47344: LD_VAR 0 8
47348: PUSH
47349: LD_INT 1
47351: ARRAY
47352: IFTRUE 47374
47354: PUSH
47355: LD_VAR 0 8
47359: PUSH
47360: LD_INT 2
47362: ARRAY
47363: PUSH
47364: LD_VAR 0 13
47368: PUSH
47369: LD_INT 2
47371: PLUS
47372: GREATER
47373: OR
47374: IFTRUE 47396
47376: PUSH
47377: LD_VAR 0 8
47381: PUSH
47382: LD_INT 2
47384: ARRAY
47385: PUSH
47386: LD_VAR 0 13
47390: PUSH
47391: LD_INT 2
47393: MINUS
47394: LESS
47395: OR
47396: IFTRUE 47464
47398: PUSH
47399: LD_VAR 0 8
47403: PUSH
47404: LD_INT 3
47406: ARRAY
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 8
47413: PUSH
47414: LD_INT 9
47416: PUSH
47417: LD_INT 10
47419: PUSH
47420: LD_INT 11
47422: PUSH
47423: LD_INT 12
47425: PUSH
47426: LD_INT 13
47428: PUSH
47429: LD_INT 16
47431: PUSH
47432: LD_INT 17
47434: PUSH
47435: LD_INT 18
47437: PUSH
47438: LD_INT 19
47440: PUSH
47441: LD_INT 20
47443: PUSH
47444: LD_INT 21
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: IN
47462: NOT
47463: OR
47464: IFTRUE 47477
47466: PUSH
47467: LD_VAR 0 8
47471: PUSH
47472: LD_INT 5
47474: ARRAY
47475: NOT
47476: OR
47477: IFTRUE 47517
47479: PUSH
47480: LD_VAR 0 8
47484: PUSH
47485: LD_INT 6
47487: ARRAY
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 7
47497: PUSH
47498: LD_INT 9
47500: PUSH
47501: LD_INT 10
47503: PUSH
47504: LD_INT 11
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: IN
47515: NOT
47516: OR
47517: IFFALSE 47523
// exit ;
47519: POP
47520: POP
47521: GO 47608
// end ;
47523: GO 47180
47525: POP
47526: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47527: LD_VAR 0 9
47531: PPUSH
47532: LD_VAR 0 3
47536: PPUSH
47537: LD_VAR 0 4
47541: PPUSH
47542: LD_INT 20
47544: PPUSH
47545: CALL 39427 0 4
47549: PUSH
47550: LD_INT 4
47552: ARRAY
47553: IFFALSE 47557
// exit ;
47555: GO 47608
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47557: LD_VAR 0 2
47561: PUSH
47562: LD_INT 29
47564: PUSH
47565: LD_INT 30
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: IN
47572: IFFALSE 47596
47574: PUSH
47575: LD_VAR 0 3
47579: PPUSH
47580: LD_VAR 0 4
47584: PPUSH
47585: LD_VAR 0 9
47589: PPUSH
47590: CALL_OW 440
47594: NOT
47595: AND
47596: IFFALSE 47600
// exit ;
47598: GO 47608
// result := true ;
47600: LD_ADDR_VAR 0 6
47604: PUSH
47605: LD_INT 1
47607: ST_TO_ADDR
// end ;
47608: LD_VAR 0 6
47612: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47613: LD_INT 0
47615: PPUSH
47616: PPUSH
47617: PPUSH
47618: PPUSH
47619: PPUSH
47620: PPUSH
47621: PPUSH
47622: PPUSH
47623: PPUSH
47624: PPUSH
47625: PPUSH
47626: PPUSH
47627: PPUSH
47628: PPUSH
47629: PPUSH
47630: PPUSH
47631: PPUSH
47632: PPUSH
47633: PPUSH
47634: PPUSH
47635: PPUSH
47636: PPUSH
47637: PPUSH
47638: PPUSH
47639: PPUSH
47640: PPUSH
47641: PPUSH
47642: PPUSH
47643: PPUSH
47644: PPUSH
47645: PPUSH
47646: PPUSH
47647: PPUSH
47648: PPUSH
47649: PPUSH
47650: PPUSH
47651: PPUSH
47652: PPUSH
47653: PPUSH
47654: PPUSH
47655: PPUSH
47656: PPUSH
47657: PPUSH
47658: PPUSH
47659: PPUSH
47660: PPUSH
47661: PPUSH
47662: PPUSH
47663: PPUSH
47664: PPUSH
47665: PPUSH
47666: PPUSH
47667: PPUSH
47668: PPUSH
47669: PPUSH
47670: PPUSH
47671: PPUSH
47672: PPUSH
// result = [ ] ;
47673: LD_ADDR_VAR 0 7
47677: PUSH
47678: EMPTY
47679: ST_TO_ADDR
// temp_list = [ ] ;
47680: LD_ADDR_VAR 0 9
47684: PUSH
47685: EMPTY
47686: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47687: LD_VAR 0 4
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: LD_INT 3
47703: PUSH
47704: LD_INT 4
47706: PUSH
47707: LD_INT 5
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: IN
47718: NOT
47719: IFTRUE 47762
47721: PUSH
47722: LD_VAR 0 1
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: IN
47737: IFFALSE 47761
47739: PUSH
47740: LD_VAR 0 5
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: LIST
47758: IN
47759: NOT
47760: AND
47761: OR
47762: IFFALSE 47766
// exit ;
47764: GO 66165
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47766: LD_VAR 0 1
47770: PUSH
47771: LD_INT 6
47773: PUSH
47774: LD_INT 7
47776: PUSH
47777: LD_INT 8
47779: PUSH
47780: LD_INT 13
47782: PUSH
47783: LD_INT 12
47785: PUSH
47786: LD_INT 15
47788: PUSH
47789: LD_INT 11
47791: PUSH
47792: LD_INT 14
47794: PUSH
47795: LD_INT 10
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: IN
47809: IFFALSE 47819
// btype = b_lab ;
47811: LD_ADDR_VAR 0 1
47815: PUSH
47816: LD_INT 6
47818: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47819: LD_VAR 0 6
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: LIST
47837: IN
47838: NOT
47839: IFTRUE 47907
47841: PUSH
47842: LD_VAR 0 1
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: LD_INT 3
47858: PUSH
47859: LD_INT 6
47861: PUSH
47862: LD_INT 36
47864: PUSH
47865: LD_INT 4
47867: PUSH
47868: LD_INT 5
47870: PUSH
47871: LD_INT 31
47873: PUSH
47874: LD_INT 32
47876: PUSH
47877: LD_INT 33
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: IN
47893: NOT
47894: IFFALSE 47906
47896: PUSH
47897: LD_VAR 0 6
47901: PUSH
47902: LD_INT 1
47904: EQUAL
47905: AND
47906: OR
47907: IFTRUE 47939
47909: PUSH
47910: LD_VAR 0 1
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 3
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: IN
47925: NOT
47926: IFFALSE 47938
47928: PUSH
47929: LD_VAR 0 6
47933: PUSH
47934: LD_INT 2
47936: EQUAL
47937: AND
47938: OR
47939: IFFALSE 47949
// mode = 0 ;
47941: LD_ADDR_VAR 0 6
47945: PUSH
47946: LD_INT 0
47948: ST_TO_ADDR
// case mode of 0 :
47949: LD_VAR 0 6
47953: PUSH
47954: LD_INT 0
47956: DOUBLE
47957: EQUAL
47958: IFTRUE 47962
47960: GO 59415
47962: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47963: LD_ADDR_VAR 0 11
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 2
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: LD_INT 3
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: LD_INT 3
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48156: LD_ADDR_VAR 0 12
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 3
48313: NEG
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 3
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48352: LD_ADDR_VAR 0 13
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: LD_INT 2
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: LD_INT 3
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 3
48511: NEG
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 3
48523: NEG
48524: PUSH
48525: LD_INT 3
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48551: LD_ADDR_VAR 0 14
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: LD_INT 1
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: LD_INT 2
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: LD_INT 2
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: LD_INT 2
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: LD_INT 3
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 3
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48747: LD_ADDR_VAR 0 15
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: NEG
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 3
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48940: LD_ADDR_VAR 0 16
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 2
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: LD_INT 2
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 3
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: LD_INT 3
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: LD_INT 3
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49133: LD_ADDR_VAR 0 17
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 2
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: LD_INT 2
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49363: LD_ADDR_VAR 0 18
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 2
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49593: LD_ADDR_VAR 0 19
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 2
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49823: LD_ADDR_VAR 0 20
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 2
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: NEG
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: LD_INT 2
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50053: LD_ADDR_VAR 0 21
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 2
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 2
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: LD_INT 2
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: NEG
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 2
50240: NEG
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 2
50252: NEG
50253: PUSH
50254: LD_INT 2
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50283: LD_ADDR_VAR 0 22
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 2
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 2
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: PUSH
50419: LD_INT 2
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 2
50482: NEG
50483: PUSH
50484: LD_INT 2
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50513: LD_ADDR_VAR 0 23
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: LD_INT 2
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 2
50689: NEG
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 2
50700: NEG
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: LD_INT 2
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: LD_INT 3
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: LD_INT 2
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50793: LD_ADDR_VAR 0 24
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 2
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: LD_INT 2
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: NEG
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 3
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 3
51036: PUSH
51037: LD_INT 2
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51069: LD_ADDR_VAR 0 25
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: LD_INT 2
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: LD_INT 2
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 2
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: LD_INT 2
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 2
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: NEG
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: NEG
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: LD_INT 2
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 3
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 3
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: LD_INT 3
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: LD_INT 3
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51343: LD_ADDR_VAR 0 26
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 2
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 2
51530: NEG
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: LD_INT 3
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 3
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 2
51585: NEG
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51619: LD_ADDR_VAR 0 27
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 2
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: LD_INT 2
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 2
51818: NEG
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 3
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 3
51864: NEG
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51899: LD_ADDR_VAR 0 28
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: LD_INT 2
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 2
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 2
52075: NEG
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: NEG
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: LD_INT 3
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: LD_INT 3
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 3
52134: NEG
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 3
52146: NEG
52147: PUSH
52148: LD_INT 2
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52181: LD_ADDR_VAR 0 29
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: LD_INT 2
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: NEG
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: LD_INT 3
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 3
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 3
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 3
52425: NEG
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52460: LD_ADDR_VAR 0 30
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 2
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 2
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 2
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 2
52626: NEG
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: LD_INT 3
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: LD_INT 2
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 3
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: LD_INT 3
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 3
52703: NEG
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52738: LD_ADDR_VAR 0 31
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: LD_INT 2
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: LD_INT 3
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 3
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: LD_INT 3
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 3
52981: NEG
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53016: LD_ADDR_VAR 0 32
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 2
53182: NEG
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: LD_INT 3
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: LD_INT 2
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 3
53228: PUSH
53229: LD_INT 2
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 2
53238: PUSH
53239: LD_INT 3
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 2
53248: NEG
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 3
53259: NEG
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53294: LD_ADDR_VAR 0 33
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 2
53484: NEG
53485: PUSH
53486: LD_INT 3
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 3
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 3
53538: NEG
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53573: LD_ADDR_VAR 0 34
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 2
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: LD_INT 2
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: LD_INT 3
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 3
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 3
53818: NEG
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53853: LD_ADDR_VAR 0 35
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53965: LD_ADDR_VAR 0 36
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54077: LD_ADDR_VAR 0 37
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54189: LD_ADDR_VAR 0 38
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: LD_INT 0
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 2
54280: NEG
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54301: LD_ADDR_VAR 0 39
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: LD_INT 2
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54413: LD_ADDR_VAR 0 40
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54525: LD_ADDR_VAR 0 41
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: LD_INT 2
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 2
54680: NEG
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 2
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: LD_INT 2
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: LD_INT 3
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 3
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 3
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 3
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 3
54768: PUSH
54769: LD_INT 3
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 2
54778: PUSH
54779: LD_INT 3
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 3
54799: NEG
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 3
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 3
54822: NEG
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 3
54834: NEG
54835: PUSH
54836: LD_INT 3
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54875: LD_ADDR_VAR 0 42
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 2
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: LD_INT 2
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: LD_INT 2
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: NEG
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: LD_INT 3
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 3
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 3
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 3
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 3
55121: PUSH
55122: LD_INT 3
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 2
55131: PUSH
55132: LD_INT 3
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: LD_INT 3
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 3
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 3
55184: NEG
55185: PUSH
55186: LD_INT 3
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55225: LD_ADDR_VAR 0 43
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 3
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 3
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 3
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 3
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: LD_INT 3
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 3
55521: NEG
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: NEG
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55573: LD_ADDR_VAR 0 44
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: NEG
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: NEG
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: LD_INT 2
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: LD_INT 3
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 3
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: PUSH
55817: LD_INT 3
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: LD_INT 3
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 3
55847: NEG
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 3
55858: NEG
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 3
55870: NEG
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 3
55882: NEG
55883: PUSH
55884: LD_INT 3
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55923: LD_ADDR_VAR 0 45
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: LD_INT 0
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: LD_INT 2
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 2
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: LD_INT 2
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: LD_INT 2
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 2
56089: NEG
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: NEG
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: LD_INT 3
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: LD_INT 3
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 3
56159: PUSH
56160: LD_INT 2
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 3
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 2
56179: PUSH
56180: LD_INT 3
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 3
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 3
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 3
56220: NEG
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 3
56232: NEG
56233: PUSH
56234: LD_INT 3
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56273: LD_ADDR_VAR 0 46
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: LD_INT 2
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: LD_INT 3
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 3
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 3
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 3
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: LD_INT 3
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 3
56569: NEG
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56621: LD_ADDR_VAR 0 47
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: LD_INT 2
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56772: LD_ADDR_VAR 0 48
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56919: LD_ADDR_VAR 0 49
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: LD_INT 2
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: LD_INT 2
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57063: LD_ADDR_VAR 0 50
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: LD_INT 2
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57207: LD_ADDR_VAR 0 51
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: PUSH
57289: LD_INT 2
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: LD_INT 2
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 2
57330: NEG
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57354: LD_ADDR_VAR 0 52
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 2
57458: NEG
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57505: LD_ADDR_VAR 0 53
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: LD_INT 2
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 2
57681: NEG
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: LD_INT 2
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57735: LD_ADDR_VAR 0 54
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: LD_INT 0
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 2
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 2
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: LD_INT 2
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: NEG
57935: PUSH
57936: LD_INT 2
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57965: LD_ADDR_VAR 0 55
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 2
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 2
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 0
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 2
58141: NEG
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 2
58152: NEG
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: LD_INT 2
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58195: LD_ADDR_VAR 0 56
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: LD_INT 1
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: LD_INT 2
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58425: LD_ADDR_VAR 0 57
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: LD_INT 2
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: LD_INT 2
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: NEG
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: NEG
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58655: LD_ADDR_VAR 0 58
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 1
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: LD_INT 2
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58885: LD_ADDR_VAR 0 59
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: LD_INT 1
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58973: LD_ADDR_VAR 0 60
58977: PUSH
58978: LD_INT 0
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 1
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59061: LD_ADDR_VAR 0 61
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: LD_INT 0
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59149: LD_ADDR_VAR 0 62
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: LD_INT 1
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59237: LD_ADDR_VAR 0 63
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59325: LD_ADDR_VAR 0 64
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: NEG
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: ST_TO_ADDR
// end ; 1 :
59413: GO 65310
59415: LD_INT 1
59417: DOUBLE
59418: EQUAL
59419: IFTRUE 59423
59421: GO 62046
59423: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59424: LD_ADDR_VAR 0 11
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: LD_INT 3
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 3
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: LD_INT 2
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: LIST
59467: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59468: LD_ADDR_VAR 0 12
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 3
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 3
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: LIST
59508: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59509: LD_ADDR_VAR 0 13
59513: PUSH
59514: LD_INT 3
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 3
59526: PUSH
59527: LD_INT 3
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: LD_INT 3
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: LIST
59548: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59549: LD_ADDR_VAR 0 14
59553: PUSH
59554: LD_INT 1
59556: PUSH
59557: LD_INT 3
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: LD_INT 3
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: LIST
59589: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59590: LD_ADDR_VAR 0 15
59594: PUSH
59595: LD_INT 2
59597: NEG
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 3
59608: NEG
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 3
59619: NEG
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: LIST
59633: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59634: LD_ADDR_VAR 0 16
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: LD_INT 3
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 3
59653: NEG
59654: PUSH
59655: LD_INT 2
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 3
59665: NEG
59666: PUSH
59667: LD_INT 3
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: LIST
59679: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59680: LD_ADDR_VAR 0 17
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: LD_INT 3
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 3
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: LIST
59723: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59724: LD_ADDR_VAR 0 18
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 3
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 3
59752: PUSH
59753: LD_INT 1
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: LIST
59764: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59765: LD_ADDR_VAR 0 19
59769: PUSH
59770: LD_INT 3
59772: PUSH
59773: LD_INT 2
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 3
59782: PUSH
59783: LD_INT 3
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: LD_INT 3
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: LIST
59804: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59805: LD_ADDR_VAR 0 20
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: LD_INT 3
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 3
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 2
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: LIST
59845: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59846: LD_ADDR_VAR 0 21
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 3
59864: NEG
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 3
59875: NEG
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: LIST
59889: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59890: LD_ADDR_VAR 0 22
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: LD_INT 3
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 3
59909: NEG
59910: PUSH
59911: LD_INT 2
59913: NEG
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 3
59921: NEG
59922: PUSH
59923: LD_INT 3
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: LIST
59935: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59936: LD_ADDR_VAR 0 23
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 3
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 4
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: PUSH
59967: LD_INT 3
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: LIST
59979: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59980: LD_ADDR_VAR 0 24
59984: PUSH
59985: LD_INT 3
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 3
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 4
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60021: LD_ADDR_VAR 0 25
60025: PUSH
60026: LD_INT 3
60028: PUSH
60029: LD_INT 3
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 4
60038: PUSH
60039: LD_INT 3
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 3
60048: PUSH
60049: LD_INT 4
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: LIST
60060: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60061: LD_ADDR_VAR 0 26
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: LD_INT 3
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: LD_INT 4
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: LD_INT 3
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: LIST
60101: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60102: LD_ADDR_VAR 0 27
60106: PUSH
60107: LD_INT 3
60109: NEG
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 3
60120: NEG
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 4
60131: NEG
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: LIST
60145: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60146: LD_ADDR_VAR 0 28
60150: PUSH
60151: LD_INT 3
60153: NEG
60154: PUSH
60155: LD_INT 3
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 3
60165: NEG
60166: PUSH
60167: LD_INT 4
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 4
60177: NEG
60178: PUSH
60179: LD_INT 3
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: LIST
60191: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60192: LD_ADDR_VAR 0 29
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: LD_INT 3
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: LD_INT 3
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: NEG
60234: PUSH
60235: LD_INT 4
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 4
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: LD_INT 3
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: NEG
60268: PUSH
60269: LD_INT 5
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 0
60279: PUSH
60280: LD_INT 5
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: LD_INT 4
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: LD_INT 6
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: LD_INT 6
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: LD_INT 5
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60347: LD_ADDR_VAR 0 30
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 3
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 3
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 3
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 4
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 4
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 4
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 5
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 5
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 5
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 6
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 6
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60490: LD_ADDR_VAR 0 31
60494: PUSH
60495: LD_INT 3
60497: PUSH
60498: LD_INT 2
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 3
60507: PUSH
60508: LD_INT 3
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: LD_INT 3
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 4
60527: PUSH
60528: LD_INT 3
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 4
60537: PUSH
60538: LD_INT 4
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: LD_INT 4
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 5
60557: PUSH
60558: LD_INT 4
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 5
60567: PUSH
60568: LD_INT 5
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 4
60577: PUSH
60578: LD_INT 5
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 6
60587: PUSH
60588: LD_INT 5
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 6
60597: PUSH
60598: LD_INT 6
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 5
60607: PUSH
60608: LD_INT 6
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60629: LD_ADDR_VAR 0 32
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: LD_INT 3
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: LD_INT 3
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: LD_INT 4
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: LD_INT 4
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 3
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: LD_INT 5
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: LD_INT 5
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: LD_INT 4
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: LD_INT 6
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: LD_INT 6
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: LD_INT 5
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60772: LD_ADDR_VAR 0 33
60776: PUSH
60777: LD_INT 2
60779: NEG
60780: PUSH
60781: LD_INT 1
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 3
60790: NEG
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 3
60801: NEG
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 3
60813: NEG
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 4
60824: NEG
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 4
60835: NEG
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 4
60847: NEG
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 5
60858: NEG
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 5
60869: NEG
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 5
60881: NEG
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 6
60892: NEG
60893: PUSH
60894: LD_INT 0
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 6
60903: NEG
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60927: LD_ADDR_VAR 0 34
60931: PUSH
60932: LD_INT 2
60934: NEG
60935: PUSH
60936: LD_INT 3
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 3
60946: NEG
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 3
60958: NEG
60959: PUSH
60960: LD_INT 3
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 3
60970: NEG
60971: PUSH
60972: LD_INT 4
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 4
60982: NEG
60983: PUSH
60984: LD_INT 3
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 4
60994: NEG
60995: PUSH
60996: LD_INT 4
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 4
61006: NEG
61007: PUSH
61008: LD_INT 5
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 5
61018: NEG
61019: PUSH
61020: LD_INT 4
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 5
61030: NEG
61031: PUSH
61032: LD_INT 5
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 5
61042: NEG
61043: PUSH
61044: LD_INT 6
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 6
61054: NEG
61055: PUSH
61056: LD_INT 5
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 6
61066: NEG
61067: PUSH
61068: LD_INT 6
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61090: LD_ADDR_VAR 0 41
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 1
61108: NEG
61109: PUSH
61110: LD_INT 3
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: LIST
61133: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61134: LD_ADDR_VAR 0 42
61138: PUSH
61139: LD_INT 2
61141: PUSH
61142: LD_INT 0
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: LD_INT 1
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 3
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: LIST
61174: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61175: LD_ADDR_VAR 0 43
61179: PUSH
61180: LD_INT 2
61182: PUSH
61183: LD_INT 2
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 3
61192: PUSH
61193: LD_INT 2
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: LD_INT 3
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: LIST
61214: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61215: LD_ADDR_VAR 0 44
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: LIST
61255: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61256: LD_ADDR_VAR 0 45
61260: PUSH
61261: LD_INT 2
61263: NEG
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 2
61274: NEG
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 3
61285: NEG
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: LIST
61299: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61300: LD_ADDR_VAR 0 46
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: LD_INT 2
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 2
61319: NEG
61320: PUSH
61321: LD_INT 3
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 3
61331: NEG
61332: PUSH
61333: LD_INT 2
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: LIST
61345: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61346: LD_ADDR_VAR 0 47
61350: PUSH
61351: LD_INT 2
61353: NEG
61354: PUSH
61355: LD_INT 3
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: NEG
61366: PUSH
61367: LD_INT 3
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61379: LD_ADDR_VAR 0 48
61383: PUSH
61384: LD_INT 1
61386: PUSH
61387: LD_INT 2
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 2
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61410: LD_ADDR_VAR 0 49
61414: PUSH
61415: LD_INT 3
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 3
61427: PUSH
61428: LD_INT 2
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61439: LD_ADDR_VAR 0 50
61443: PUSH
61444: LD_INT 2
61446: PUSH
61447: LD_INT 3
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 1
61456: PUSH
61457: LD_INT 3
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61468: LD_ADDR_VAR 0 51
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: LD_INT 2
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 2
61486: NEG
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61499: LD_ADDR_VAR 0 52
61503: PUSH
61504: LD_INT 3
61506: NEG
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 3
61518: NEG
61519: PUSH
61520: LD_INT 2
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61532: LD_ADDR_VAR 0 53
61536: PUSH
61537: LD_INT 1
61539: NEG
61540: PUSH
61541: LD_INT 3
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 0
61551: PUSH
61552: LD_INT 3
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: LD_INT 2
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: LIST
61575: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61576: LD_ADDR_VAR 0 54
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 3
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 3
61604: PUSH
61605: LD_INT 1
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: LIST
61616: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61617: LD_ADDR_VAR 0 55
61621: PUSH
61622: LD_INT 3
61624: PUSH
61625: LD_INT 2
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 3
61634: PUSH
61635: LD_INT 3
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 2
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: LIST
61656: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61657: LD_ADDR_VAR 0 56
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: LD_INT 3
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: LD_INT 3
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 1
61684: NEG
61685: PUSH
61686: LD_INT 2
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: LIST
61697: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61698: LD_ADDR_VAR 0 57
61702: PUSH
61703: LD_INT 2
61705: NEG
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 3
61716: NEG
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 3
61727: NEG
61728: PUSH
61729: LD_INT 1
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: LIST
61741: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61742: LD_ADDR_VAR 0 58
61746: PUSH
61747: LD_INT 2
61749: NEG
61750: PUSH
61751: LD_INT 3
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 3
61761: NEG
61762: PUSH
61763: LD_INT 2
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 3
61773: NEG
61774: PUSH
61775: LD_INT 3
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: LIST
61787: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61788: LD_ADDR_VAR 0 59
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 2
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: LIST
61831: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61832: LD_ADDR_VAR 0 60
61836: PUSH
61837: LD_INT 1
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 2
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: LD_INT 1
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: LIST
61872: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61873: LD_ADDR_VAR 0 61
61877: PUSH
61878: LD_INT 2
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 2
61890: PUSH
61891: LD_INT 2
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 1
61900: PUSH
61901: LD_INT 2
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61913: LD_ADDR_VAR 0 62
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: LD_INT 2
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 0
61930: PUSH
61931: LD_INT 2
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: LIST
61953: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61954: LD_ADDR_VAR 0 63
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 2
61972: NEG
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 2
61983: NEG
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: LIST
61997: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61998: LD_ADDR_VAR 0 64
62002: PUSH
62003: LD_INT 1
62005: NEG
62006: PUSH
62007: LD_INT 2
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 2
62017: NEG
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: LD_INT 2
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: LIST
62043: ST_TO_ADDR
// end ; 2 :
62044: GO 65310
62046: LD_INT 2
62048: DOUBLE
62049: EQUAL
62050: IFTRUE 62054
62052: GO 65309
62054: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62055: LD_ADDR_VAR 0 29
62059: PUSH
62060: LD_INT 4
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 4
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 5
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 5
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 4
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 3
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 3
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 3
62134: PUSH
62135: LD_INT 2
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 5
62145: PUSH
62146: LD_INT 2
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 3
62155: PUSH
62156: LD_INT 3
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 3
62165: PUSH
62166: LD_INT 2
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 4
62175: PUSH
62176: LD_INT 3
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 4
62185: PUSH
62186: LD_INT 4
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 3
62195: PUSH
62196: LD_INT 4
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 2
62205: PUSH
62206: LD_INT 3
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 2
62215: PUSH
62216: LD_INT 2
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 4
62225: PUSH
62226: LD_INT 2
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 2
62235: PUSH
62236: LD_INT 4
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: LD_INT 4
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: LD_INT 3
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 4
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 5
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 5
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 4
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 3
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 2
62317: PUSH
62318: LD_INT 5
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: LD_INT 3
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 3
62338: NEG
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 3
62349: NEG
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 2
62361: NEG
62362: PUSH
62363: LD_INT 0
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 2
62372: NEG
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 3
62383: NEG
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 4
62394: NEG
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 4
62405: NEG
62406: PUSH
62407: LD_INT 1
62409: NEG
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 4
62417: NEG
62418: PUSH
62419: LD_INT 2
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 2
62429: NEG
62430: PUSH
62431: LD_INT 2
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 4
62440: NEG
62441: PUSH
62442: LD_INT 4
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 4
62452: NEG
62453: PUSH
62454: LD_INT 5
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 3
62464: NEG
62465: PUSH
62466: LD_INT 4
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 3
62476: NEG
62477: PUSH
62478: LD_INT 3
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 4
62488: NEG
62489: PUSH
62490: LD_INT 3
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 5
62500: NEG
62501: PUSH
62502: LD_INT 4
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 5
62512: NEG
62513: PUSH
62514: LD_INT 5
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 3
62524: NEG
62525: PUSH
62526: LD_INT 5
62528: NEG
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 5
62536: NEG
62537: PUSH
62538: LD_INT 3
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62593: LD_ADDR_VAR 0 30
62597: PUSH
62598: LD_INT 4
62600: PUSH
62601: LD_INT 4
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 4
62610: PUSH
62611: LD_INT 3
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 5
62620: PUSH
62621: LD_INT 4
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 5
62630: PUSH
62631: LD_INT 5
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 4
62640: PUSH
62641: LD_INT 5
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 3
62650: PUSH
62651: LD_INT 4
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 3
62660: PUSH
62661: LD_INT 3
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 5
62670: PUSH
62671: LD_INT 3
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 3
62680: PUSH
62681: LD_INT 5
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: LD_INT 3
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: LD_INT 2
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: LD_INT 3
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 1
62720: PUSH
62721: LD_INT 4
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: LD_INT 4
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: LD_INT 3
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 1
62751: NEG
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 2
62762: PUSH
62763: LD_INT 4
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 2
62772: NEG
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 4
62783: NEG
62784: PUSH
62785: LD_INT 0
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 4
62794: NEG
62795: PUSH
62796: LD_INT 1
62798: NEG
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 3
62806: NEG
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 3
62817: NEG
62818: PUSH
62819: LD_INT 1
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 4
62828: NEG
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 5
62839: NEG
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 5
62850: NEG
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 5
62862: NEG
62863: PUSH
62864: LD_INT 2
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 3
62874: NEG
62875: PUSH
62876: LD_INT 2
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 3
62885: NEG
62886: PUSH
62887: LD_INT 3
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 3
62897: NEG
62898: PUSH
62899: LD_INT 4
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 2
62909: NEG
62910: PUSH
62911: LD_INT 3
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 2
62921: NEG
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 3
62933: NEG
62934: PUSH
62935: LD_INT 2
62937: NEG
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 4
62945: NEG
62946: PUSH
62947: LD_INT 3
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 4
62957: NEG
62958: PUSH
62959: LD_INT 4
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 2
62969: NEG
62970: PUSH
62971: LD_INT 4
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 4
62981: NEG
62982: PUSH
62983: LD_INT 2
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: LD_INT 4
62996: NEG
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: LD_INT 5
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 1
63015: PUSH
63016: LD_INT 4
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: LD_INT 3
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 0
63037: PUSH
63038: LD_INT 3
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 1
63048: NEG
63049: PUSH
63050: LD_INT 4
63052: NEG
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: NEG
63061: PUSH
63062: LD_INT 5
63064: NEG
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 2
63072: PUSH
63073: LD_INT 3
63075: NEG
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 2
63083: NEG
63084: PUSH
63085: LD_INT 5
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63140: LD_ADDR_VAR 0 31
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: LD_INT 4
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 0
63157: PUSH
63158: LD_INT 3
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: PUSH
63168: LD_INT 4
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: LD_INT 5
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: LD_INT 5
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 1
63197: NEG
63198: PUSH
63199: LD_INT 4
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 1
63208: NEG
63209: PUSH
63210: LD_INT 3
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 2
63219: PUSH
63220: LD_INT 5
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 2
63229: NEG
63230: PUSH
63231: LD_INT 3
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 3
63240: NEG
63241: PUSH
63242: LD_INT 0
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 3
63251: NEG
63252: PUSH
63253: LD_INT 1
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 2
63263: NEG
63264: PUSH
63265: LD_INT 0
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 2
63274: NEG
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 3
63285: NEG
63286: PUSH
63287: LD_INT 1
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 4
63296: NEG
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 4
63307: NEG
63308: PUSH
63309: LD_INT 1
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 4
63319: NEG
63320: PUSH
63321: LD_INT 2
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 2
63331: NEG
63332: PUSH
63333: LD_INT 2
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 4
63342: NEG
63343: PUSH
63344: LD_INT 4
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 4
63354: NEG
63355: PUSH
63356: LD_INT 5
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 3
63366: NEG
63367: PUSH
63368: LD_INT 4
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 3
63378: NEG
63379: PUSH
63380: LD_INT 3
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 4
63390: NEG
63391: PUSH
63392: LD_INT 3
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 5
63402: NEG
63403: PUSH
63404: LD_INT 4
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 5
63414: NEG
63415: PUSH
63416: LD_INT 5
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 3
63426: NEG
63427: PUSH
63428: LD_INT 5
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 5
63438: NEG
63439: PUSH
63440: LD_INT 3
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_INT 3
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: LD_INT 4
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: PUSH
63473: LD_INT 3
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: LD_INT 2
63497: NEG
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: LD_INT 3
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: LD_INT 4
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 2
63529: PUSH
63530: LD_INT 2
63532: NEG
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 2
63540: NEG
63541: PUSH
63542: LD_INT 4
63544: NEG
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 4
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 4
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 5
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 5
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 4
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 3
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 3
63613: PUSH
63614: LD_INT 1
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 3
63624: PUSH
63625: LD_INT 2
63627: NEG
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 5
63635: PUSH
63636: LD_INT 2
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63690: LD_ADDR_VAR 0 32
63694: PUSH
63695: LD_INT 4
63697: NEG
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 4
63708: NEG
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 3
63720: NEG
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 3
63731: NEG
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 4
63742: NEG
63743: PUSH
63744: LD_INT 1
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 5
63753: NEG
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 5
63764: NEG
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 5
63776: NEG
63777: PUSH
63778: LD_INT 2
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 3
63788: NEG
63789: PUSH
63790: LD_INT 2
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 3
63799: NEG
63800: PUSH
63801: LD_INT 3
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 3
63811: NEG
63812: PUSH
63813: LD_INT 4
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 2
63823: NEG
63824: PUSH
63825: LD_INT 3
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 2
63835: NEG
63836: PUSH
63837: LD_INT 2
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 3
63847: NEG
63848: PUSH
63849: LD_INT 2
63851: NEG
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 4
63859: NEG
63860: PUSH
63861: LD_INT 3
63863: NEG
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 4
63871: NEG
63872: PUSH
63873: LD_INT 4
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: LD_INT 4
63887: NEG
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 4
63895: NEG
63896: PUSH
63897: LD_INT 2
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: LD_INT 4
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 0
63918: PUSH
63919: LD_INT 5
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: PUSH
63930: LD_INT 4
63932: NEG
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: LD_INT 3
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: LD_INT 3
63954: NEG
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 1
63962: NEG
63963: PUSH
63964: LD_INT 4
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 1
63974: NEG
63975: PUSH
63976: LD_INT 5
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: PUSH
63987: LD_INT 3
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 2
63997: NEG
63998: PUSH
63999: LD_INT 5
64001: NEG
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 3
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 3
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 4
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 4
64040: PUSH
64041: LD_INT 1
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 3
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 2
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 2
64070: PUSH
64071: LD_INT 1
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: LD_INT 2
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 4
64092: PUSH
64093: LD_INT 2
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 4
64102: PUSH
64103: LD_INT 4
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 4
64112: PUSH
64113: LD_INT 3
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 5
64122: PUSH
64123: LD_INT 4
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 5
64132: PUSH
64133: LD_INT 5
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 4
64142: PUSH
64143: LD_INT 5
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 3
64152: PUSH
64153: LD_INT 4
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 3
64162: PUSH
64163: LD_INT 3
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 5
64172: PUSH
64173: LD_INT 3
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 3
64182: PUSH
64183: LD_INT 5
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64237: LD_ADDR_VAR 0 33
64241: PUSH
64242: LD_INT 4
64244: NEG
64245: PUSH
64246: LD_INT 4
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 4
64256: NEG
64257: PUSH
64258: LD_INT 5
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 3
64268: NEG
64269: PUSH
64270: LD_INT 4
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 3
64280: NEG
64281: PUSH
64282: LD_INT 3
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 4
64292: NEG
64293: PUSH
64294: LD_INT 3
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 5
64304: NEG
64305: PUSH
64306: LD_INT 4
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 5
64316: NEG
64317: PUSH
64318: LD_INT 5
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 3
64328: NEG
64329: PUSH
64330: LD_INT 5
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 5
64340: NEG
64341: PUSH
64342: LD_INT 3
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: LD_INT 3
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: LD_INT 4
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: LD_INT 3
64377: NEG
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: LD_INT 2
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: LD_INT 2
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: LD_INT 3
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: NEG
64420: PUSH
64421: LD_INT 4
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 2
64431: PUSH
64432: LD_INT 2
64434: NEG
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 2
64442: NEG
64443: PUSH
64444: LD_INT 4
64446: NEG
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 4
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 4
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 5
64475: PUSH
64476: LD_INT 0
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 5
64485: PUSH
64486: LD_INT 1
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 4
64495: PUSH
64496: LD_INT 1
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 3
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 3
64515: PUSH
64516: LD_INT 1
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 3
64526: PUSH
64527: LD_INT 2
64529: NEG
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 5
64537: PUSH
64538: LD_INT 2
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 3
64547: PUSH
64548: LD_INT 3
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 3
64557: PUSH
64558: LD_INT 2
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 4
64567: PUSH
64568: LD_INT 3
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 4
64577: PUSH
64578: LD_INT 4
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 3
64587: PUSH
64588: LD_INT 4
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 2
64597: PUSH
64598: LD_INT 3
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 2
64607: PUSH
64608: LD_INT 2
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 4
64617: PUSH
64618: LD_INT 2
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 2
64627: PUSH
64628: LD_INT 4
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 0
64637: PUSH
64638: LD_INT 4
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 3
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 1
64657: PUSH
64658: LD_INT 4
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: LD_INT 5
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: LD_INT 5
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: LD_INT 4
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 1
64698: NEG
64699: PUSH
64700: LD_INT 3
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 2
64709: PUSH
64710: LD_INT 5
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 2
64719: NEG
64720: PUSH
64721: LD_INT 3
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64775: LD_ADDR_VAR 0 34
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: LD_INT 4
64785: NEG
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: LD_INT 5
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 1
64804: PUSH
64805: LD_INT 4
64807: NEG
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 1
64815: PUSH
64816: LD_INT 3
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 0
64826: PUSH
64827: LD_INT 3
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: NEG
64838: PUSH
64839: LD_INT 4
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 1
64849: NEG
64850: PUSH
64851: LD_INT 5
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: LD_INT 3
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 2
64872: NEG
64873: PUSH
64874: LD_INT 5
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 3
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 3
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 4
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 4
64915: PUSH
64916: LD_INT 1
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 3
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 2
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 2
64945: PUSH
64946: LD_INT 1
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 2
64956: PUSH
64957: LD_INT 2
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 4
64967: PUSH
64968: LD_INT 2
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 4
64977: PUSH
64978: LD_INT 4
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 4
64987: PUSH
64988: LD_INT 3
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 5
64997: PUSH
64998: LD_INT 4
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 5
65007: PUSH
65008: LD_INT 5
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 4
65017: PUSH
65018: LD_INT 5
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 3
65027: PUSH
65028: LD_INT 4
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 3
65037: PUSH
65038: LD_INT 3
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 5
65047: PUSH
65048: LD_INT 3
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 3
65057: PUSH
65058: LD_INT 5
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 0
65067: PUSH
65068: LD_INT 3
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: LD_INT 2
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 1
65087: PUSH
65088: LD_INT 3
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 1
65097: PUSH
65098: LD_INT 4
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 0
65107: PUSH
65108: LD_INT 4
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: NEG
65118: PUSH
65119: LD_INT 3
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 1
65128: NEG
65129: PUSH
65130: LD_INT 2
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 2
65139: PUSH
65140: LD_INT 4
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 2
65149: NEG
65150: PUSH
65151: LD_INT 2
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 4
65160: NEG
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 4
65171: NEG
65172: PUSH
65173: LD_INT 1
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 3
65183: NEG
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 3
65194: NEG
65195: PUSH
65196: LD_INT 1
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 4
65205: NEG
65206: PUSH
65207: LD_INT 1
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 5
65216: NEG
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 5
65227: NEG
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 5
65239: NEG
65240: PUSH
65241: LD_INT 2
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 3
65251: NEG
65252: PUSH
65253: LD_INT 2
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: ST_TO_ADDR
// end ; end ;
65307: GO 65310
65309: POP
// case btype of b_depot , b_warehouse :
65310: LD_VAR 0 1
65314: PUSH
65315: LD_INT 0
65317: DOUBLE
65318: EQUAL
65319: IFTRUE 65329
65321: LD_INT 1
65323: DOUBLE
65324: EQUAL
65325: IFTRUE 65329
65327: GO 65530
65329: POP
// case nation of nation_american :
65330: LD_VAR 0 5
65334: PUSH
65335: LD_INT 1
65337: DOUBLE
65338: EQUAL
65339: IFTRUE 65343
65341: GO 65399
65343: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65344: LD_ADDR_VAR 0 9
65348: PUSH
65349: LD_VAR 0 11
65353: PUSH
65354: LD_VAR 0 12
65358: PUSH
65359: LD_VAR 0 13
65363: PUSH
65364: LD_VAR 0 14
65368: PUSH
65369: LD_VAR 0 15
65373: PUSH
65374: LD_VAR 0 16
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: PUSH
65387: LD_VAR 0 4
65391: PUSH
65392: LD_INT 1
65394: PLUS
65395: ARRAY
65396: ST_TO_ADDR
65397: GO 65528
65399: LD_INT 2
65401: DOUBLE
65402: EQUAL
65403: IFTRUE 65407
65405: GO 65463
65407: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65408: LD_ADDR_VAR 0 9
65412: PUSH
65413: LD_VAR 0 17
65417: PUSH
65418: LD_VAR 0 18
65422: PUSH
65423: LD_VAR 0 19
65427: PUSH
65428: LD_VAR 0 20
65432: PUSH
65433: LD_VAR 0 21
65437: PUSH
65438: LD_VAR 0 22
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: PUSH
65451: LD_VAR 0 4
65455: PUSH
65456: LD_INT 1
65458: PLUS
65459: ARRAY
65460: ST_TO_ADDR
65461: GO 65528
65463: LD_INT 3
65465: DOUBLE
65466: EQUAL
65467: IFTRUE 65471
65469: GO 65527
65471: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65472: LD_ADDR_VAR 0 9
65476: PUSH
65477: LD_VAR 0 23
65481: PUSH
65482: LD_VAR 0 24
65486: PUSH
65487: LD_VAR 0 25
65491: PUSH
65492: LD_VAR 0 26
65496: PUSH
65497: LD_VAR 0 27
65501: PUSH
65502: LD_VAR 0 28
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: PUSH
65515: LD_VAR 0 4
65519: PUSH
65520: LD_INT 1
65522: PLUS
65523: ARRAY
65524: ST_TO_ADDR
65525: GO 65528
65527: POP
65528: GO 66083
65530: LD_INT 2
65532: DOUBLE
65533: EQUAL
65534: IFTRUE 65544
65536: LD_INT 3
65538: DOUBLE
65539: EQUAL
65540: IFTRUE 65544
65542: GO 65600
65544: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65545: LD_ADDR_VAR 0 9
65549: PUSH
65550: LD_VAR 0 29
65554: PUSH
65555: LD_VAR 0 30
65559: PUSH
65560: LD_VAR 0 31
65564: PUSH
65565: LD_VAR 0 32
65569: PUSH
65570: LD_VAR 0 33
65574: PUSH
65575: LD_VAR 0 34
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: PUSH
65588: LD_VAR 0 4
65592: PUSH
65593: LD_INT 1
65595: PLUS
65596: ARRAY
65597: ST_TO_ADDR
65598: GO 66083
65600: LD_INT 16
65602: DOUBLE
65603: EQUAL
65604: IFTRUE 65662
65606: LD_INT 17
65608: DOUBLE
65609: EQUAL
65610: IFTRUE 65662
65612: LD_INT 18
65614: DOUBLE
65615: EQUAL
65616: IFTRUE 65662
65618: LD_INT 19
65620: DOUBLE
65621: EQUAL
65622: IFTRUE 65662
65624: LD_INT 22
65626: DOUBLE
65627: EQUAL
65628: IFTRUE 65662
65630: LD_INT 20
65632: DOUBLE
65633: EQUAL
65634: IFTRUE 65662
65636: LD_INT 21
65638: DOUBLE
65639: EQUAL
65640: IFTRUE 65662
65642: LD_INT 23
65644: DOUBLE
65645: EQUAL
65646: IFTRUE 65662
65648: LD_INT 24
65650: DOUBLE
65651: EQUAL
65652: IFTRUE 65662
65654: LD_INT 25
65656: DOUBLE
65657: EQUAL
65658: IFTRUE 65662
65660: GO 65718
65662: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65663: LD_ADDR_VAR 0 9
65667: PUSH
65668: LD_VAR 0 35
65672: PUSH
65673: LD_VAR 0 36
65677: PUSH
65678: LD_VAR 0 37
65682: PUSH
65683: LD_VAR 0 38
65687: PUSH
65688: LD_VAR 0 39
65692: PUSH
65693: LD_VAR 0 40
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: PUSH
65706: LD_VAR 0 4
65710: PUSH
65711: LD_INT 1
65713: PLUS
65714: ARRAY
65715: ST_TO_ADDR
65716: GO 66083
65718: LD_INT 6
65720: DOUBLE
65721: EQUAL
65722: IFTRUE 65774
65724: LD_INT 7
65726: DOUBLE
65727: EQUAL
65728: IFTRUE 65774
65730: LD_INT 8
65732: DOUBLE
65733: EQUAL
65734: IFTRUE 65774
65736: LD_INT 13
65738: DOUBLE
65739: EQUAL
65740: IFTRUE 65774
65742: LD_INT 12
65744: DOUBLE
65745: EQUAL
65746: IFTRUE 65774
65748: LD_INT 15
65750: DOUBLE
65751: EQUAL
65752: IFTRUE 65774
65754: LD_INT 11
65756: DOUBLE
65757: EQUAL
65758: IFTRUE 65774
65760: LD_INT 14
65762: DOUBLE
65763: EQUAL
65764: IFTRUE 65774
65766: LD_INT 10
65768: DOUBLE
65769: EQUAL
65770: IFTRUE 65774
65772: GO 65830
65774: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65775: LD_ADDR_VAR 0 9
65779: PUSH
65780: LD_VAR 0 41
65784: PUSH
65785: LD_VAR 0 42
65789: PUSH
65790: LD_VAR 0 43
65794: PUSH
65795: LD_VAR 0 44
65799: PUSH
65800: LD_VAR 0 45
65804: PUSH
65805: LD_VAR 0 46
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: PUSH
65818: LD_VAR 0 4
65822: PUSH
65823: LD_INT 1
65825: PLUS
65826: ARRAY
65827: ST_TO_ADDR
65828: GO 66083
65830: LD_INT 36
65832: DOUBLE
65833: EQUAL
65834: IFTRUE 65838
65836: GO 65894
65838: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65839: LD_ADDR_VAR 0 9
65843: PUSH
65844: LD_VAR 0 47
65848: PUSH
65849: LD_VAR 0 48
65853: PUSH
65854: LD_VAR 0 49
65858: PUSH
65859: LD_VAR 0 50
65863: PUSH
65864: LD_VAR 0 51
65868: PUSH
65869: LD_VAR 0 52
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: PUSH
65882: LD_VAR 0 4
65886: PUSH
65887: LD_INT 1
65889: PLUS
65890: ARRAY
65891: ST_TO_ADDR
65892: GO 66083
65894: LD_INT 4
65896: DOUBLE
65897: EQUAL
65898: IFTRUE 65920
65900: LD_INT 5
65902: DOUBLE
65903: EQUAL
65904: IFTRUE 65920
65906: LD_INT 34
65908: DOUBLE
65909: EQUAL
65910: IFTRUE 65920
65912: LD_INT 37
65914: DOUBLE
65915: EQUAL
65916: IFTRUE 65920
65918: GO 65976
65920: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65921: LD_ADDR_VAR 0 9
65925: PUSH
65926: LD_VAR 0 53
65930: PUSH
65931: LD_VAR 0 54
65935: PUSH
65936: LD_VAR 0 55
65940: PUSH
65941: LD_VAR 0 56
65945: PUSH
65946: LD_VAR 0 57
65950: PUSH
65951: LD_VAR 0 58
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: PUSH
65964: LD_VAR 0 4
65968: PUSH
65969: LD_INT 1
65971: PLUS
65972: ARRAY
65973: ST_TO_ADDR
65974: GO 66083
65976: LD_INT 31
65978: DOUBLE
65979: EQUAL
65980: IFTRUE 66026
65982: LD_INT 32
65984: DOUBLE
65985: EQUAL
65986: IFTRUE 66026
65988: LD_INT 33
65990: DOUBLE
65991: EQUAL
65992: IFTRUE 66026
65994: LD_INT 27
65996: DOUBLE
65997: EQUAL
65998: IFTRUE 66026
66000: LD_INT 26
66002: DOUBLE
66003: EQUAL
66004: IFTRUE 66026
66006: LD_INT 28
66008: DOUBLE
66009: EQUAL
66010: IFTRUE 66026
66012: LD_INT 29
66014: DOUBLE
66015: EQUAL
66016: IFTRUE 66026
66018: LD_INT 30
66020: DOUBLE
66021: EQUAL
66022: IFTRUE 66026
66024: GO 66082
66026: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66027: LD_ADDR_VAR 0 9
66031: PUSH
66032: LD_VAR 0 59
66036: PUSH
66037: LD_VAR 0 60
66041: PUSH
66042: LD_VAR 0 61
66046: PUSH
66047: LD_VAR 0 62
66051: PUSH
66052: LD_VAR 0 63
66056: PUSH
66057: LD_VAR 0 64
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: PUSH
66070: LD_VAR 0 4
66074: PUSH
66075: LD_INT 1
66077: PLUS
66078: ARRAY
66079: ST_TO_ADDR
66080: GO 66083
66082: POP
// temp_list2 = [ ] ;
66083: LD_ADDR_VAR 0 10
66087: PUSH
66088: EMPTY
66089: ST_TO_ADDR
// for i in temp_list do
66090: LD_ADDR_VAR 0 8
66094: PUSH
66095: LD_VAR 0 9
66099: PUSH
66100: FOR_IN
66101: IFFALSE 66153
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66103: LD_ADDR_VAR 0 10
66107: PUSH
66108: LD_VAR 0 10
66112: PUSH
66113: LD_VAR 0 8
66117: PUSH
66118: LD_INT 1
66120: ARRAY
66121: PUSH
66122: LD_VAR 0 2
66126: PLUS
66127: PUSH
66128: LD_VAR 0 8
66132: PUSH
66133: LD_INT 2
66135: ARRAY
66136: PUSH
66137: LD_VAR 0 3
66141: PLUS
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: EMPTY
66148: LIST
66149: ADD
66150: ST_TO_ADDR
66151: GO 66100
66153: POP
66154: POP
// result = temp_list2 ;
66155: LD_ADDR_VAR 0 7
66159: PUSH
66160: LD_VAR 0 10
66164: ST_TO_ADDR
// end ;
66165: LD_VAR 0 7
66169: RET
// export function EnemyInRange ( unit , dist ) ; begin
66170: LD_INT 0
66172: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66173: LD_ADDR_VAR 0 3
66177: PUSH
66178: LD_VAR 0 1
66182: PPUSH
66183: CALL_OW 255
66187: PPUSH
66188: LD_VAR 0 1
66192: PPUSH
66193: CALL_OW 250
66197: PPUSH
66198: LD_VAR 0 1
66202: PPUSH
66203: CALL_OW 251
66207: PPUSH
66208: LD_VAR 0 2
66212: PPUSH
66213: CALL 39427 0 4
66217: PUSH
66218: LD_INT 4
66220: ARRAY
66221: ST_TO_ADDR
// end ;
66222: LD_VAR 0 3
66226: RET
// export function PlayerSeeMe ( unit ) ; begin
66227: LD_INT 0
66229: PPUSH
// result := See ( your_side , unit ) ;
66230: LD_ADDR_VAR 0 2
66234: PUSH
66235: LD_OWVAR 2
66239: PPUSH
66240: LD_VAR 0 1
66244: PPUSH
66245: CALL_OW 292
66249: ST_TO_ADDR
// end ;
66250: LD_VAR 0 2
66254: RET
// export function ReverseDir ( unit ) ; begin
66255: LD_INT 0
66257: PPUSH
// if not unit then
66258: LD_VAR 0 1
66262: NOT
66263: IFFALSE 66267
// exit ;
66265: GO 66290
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66267: LD_ADDR_VAR 0 2
66271: PUSH
66272: LD_VAR 0 1
66276: PPUSH
66277: CALL_OW 254
66281: PUSH
66282: LD_INT 3
66284: PLUS
66285: PUSH
66286: LD_INT 6
66288: MOD
66289: ST_TO_ADDR
// end ;
66290: LD_VAR 0 2
66294: RET
// export function ReverseArray ( array ) ; var i ; begin
66295: LD_INT 0
66297: PPUSH
66298: PPUSH
// if not array then
66299: LD_VAR 0 1
66303: NOT
66304: IFFALSE 66308
// exit ;
66306: GO 66363
// result := [ ] ;
66308: LD_ADDR_VAR 0 2
66312: PUSH
66313: EMPTY
66314: ST_TO_ADDR
// for i := array downto 1 do
66315: LD_ADDR_VAR 0 3
66319: PUSH
66320: DOUBLE
66321: LD_VAR 0 1
66325: INC
66326: ST_TO_ADDR
66327: LD_INT 1
66329: PUSH
66330: FOR_DOWNTO
66331: IFFALSE 66361
// result := Join ( result , array [ i ] ) ;
66333: LD_ADDR_VAR 0 2
66337: PUSH
66338: LD_VAR 0 2
66342: PPUSH
66343: LD_VAR 0 1
66347: PUSH
66348: LD_VAR 0 3
66352: ARRAY
66353: PPUSH
66354: CALL 71205 0 2
66358: ST_TO_ADDR
66359: GO 66330
66361: POP
66362: POP
// end ;
66363: LD_VAR 0 2
66367: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66368: LD_INT 0
66370: PPUSH
66371: PPUSH
66372: PPUSH
66373: PPUSH
66374: PPUSH
66375: PPUSH
// if not unit or not hexes then
66376: LD_VAR 0 1
66380: NOT
66381: IFTRUE 66390
66383: PUSH
66384: LD_VAR 0 2
66388: NOT
66389: OR
66390: IFFALSE 66394
// exit ;
66392: GO 66517
// dist := 9999 ;
66394: LD_ADDR_VAR 0 5
66398: PUSH
66399: LD_INT 9999
66401: ST_TO_ADDR
// for i = 1 to hexes do
66402: LD_ADDR_VAR 0 4
66406: PUSH
66407: DOUBLE
66408: LD_INT 1
66410: DEC
66411: ST_TO_ADDR
66412: LD_VAR 0 2
66416: PUSH
66417: FOR_TO
66418: IFFALSE 66505
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66420: LD_ADDR_VAR 0 6
66424: PUSH
66425: LD_VAR 0 1
66429: PPUSH
66430: LD_VAR 0 2
66434: PUSH
66435: LD_VAR 0 4
66439: ARRAY
66440: PUSH
66441: LD_INT 1
66443: ARRAY
66444: PPUSH
66445: LD_VAR 0 2
66449: PUSH
66450: LD_VAR 0 4
66454: ARRAY
66455: PUSH
66456: LD_INT 2
66458: ARRAY
66459: PPUSH
66460: CALL_OW 297
66464: ST_TO_ADDR
// if tdist < dist then
66465: LD_VAR 0 6
66469: PUSH
66470: LD_VAR 0 5
66474: LESS
66475: IFFALSE 66503
// begin hex := hexes [ i ] ;
66477: LD_ADDR_VAR 0 8
66481: PUSH
66482: LD_VAR 0 2
66486: PUSH
66487: LD_VAR 0 4
66491: ARRAY
66492: ST_TO_ADDR
// dist := tdist ;
66493: LD_ADDR_VAR 0 5
66497: PUSH
66498: LD_VAR 0 6
66502: ST_TO_ADDR
// end ; end ;
66503: GO 66417
66505: POP
66506: POP
// result := hex ;
66507: LD_ADDR_VAR 0 3
66511: PUSH
66512: LD_VAR 0 8
66516: ST_TO_ADDR
// end ;
66517: LD_VAR 0 3
66521: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66522: LD_INT 0
66524: PPUSH
66525: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66526: LD_VAR 0 1
66530: NOT
66531: IFTRUE 66570
66533: PUSH
66534: LD_VAR 0 1
66538: PUSH
66539: LD_INT 21
66541: PUSH
66542: LD_INT 2
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 23
66551: PUSH
66552: LD_INT 2
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PPUSH
66563: CALL_OW 69
66567: IN
66568: NOT
66569: OR
66570: IFFALSE 66574
// exit ;
66572: GO 66621
// for i = 1 to 3 do
66574: LD_ADDR_VAR 0 3
66578: PUSH
66579: DOUBLE
66580: LD_INT 1
66582: DEC
66583: ST_TO_ADDR
66584: LD_INT 3
66586: PUSH
66587: FOR_TO
66588: IFFALSE 66619
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66590: LD_VAR 0 1
66594: PPUSH
66595: CALL_OW 250
66599: PPUSH
66600: LD_VAR 0 1
66604: PPUSH
66605: CALL_OW 251
66609: PPUSH
66610: LD_INT 1
66612: PPUSH
66613: CALL_OW 453
66617: GO 66587
66619: POP
66620: POP
// end ;
66621: LD_VAR 0 2
66625: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66626: LD_INT 0
66628: PPUSH
66629: PPUSH
66630: PPUSH
66631: PPUSH
66632: PPUSH
66633: PPUSH
// if not unit or not enemy_unit then
66634: LD_VAR 0 1
66638: NOT
66639: IFTRUE 66648
66641: PUSH
66642: LD_VAR 0 2
66646: NOT
66647: OR
66648: IFFALSE 66652
// exit ;
66650: GO 67123
// if GetLives ( i ) < 250 then
66652: LD_VAR 0 4
66656: PPUSH
66657: CALL_OW 256
66661: PUSH
66662: LD_INT 250
66664: LESS
66665: IFFALSE 66678
// begin ComAutodestruct ( i ) ;
66667: LD_VAR 0 4
66671: PPUSH
66672: CALL 66522 0 1
// exit ;
66676: GO 67123
// end ; x := GetX ( enemy_unit ) ;
66678: LD_ADDR_VAR 0 7
66682: PUSH
66683: LD_VAR 0 2
66687: PPUSH
66688: CALL_OW 250
66692: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66693: LD_ADDR_VAR 0 8
66697: PUSH
66698: LD_VAR 0 2
66702: PPUSH
66703: CALL_OW 251
66707: ST_TO_ADDR
// if not x or not y then
66708: LD_VAR 0 7
66712: NOT
66713: IFTRUE 66722
66715: PUSH
66716: LD_VAR 0 8
66720: NOT
66721: OR
66722: IFFALSE 66726
// exit ;
66724: GO 67123
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66726: LD_ADDR_VAR 0 6
66730: PUSH
66731: LD_VAR 0 7
66735: PPUSH
66736: LD_INT 0
66738: PPUSH
66739: LD_INT 4
66741: PPUSH
66742: CALL_OW 272
66746: PUSH
66747: LD_VAR 0 8
66751: PPUSH
66752: LD_INT 0
66754: PPUSH
66755: LD_INT 4
66757: PPUSH
66758: CALL_OW 273
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_VAR 0 7
66771: PPUSH
66772: LD_INT 1
66774: PPUSH
66775: LD_INT 4
66777: PPUSH
66778: CALL_OW 272
66782: PUSH
66783: LD_VAR 0 8
66787: PPUSH
66788: LD_INT 1
66790: PPUSH
66791: LD_INT 4
66793: PPUSH
66794: CALL_OW 273
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_VAR 0 7
66807: PPUSH
66808: LD_INT 2
66810: PPUSH
66811: LD_INT 4
66813: PPUSH
66814: CALL_OW 272
66818: PUSH
66819: LD_VAR 0 8
66823: PPUSH
66824: LD_INT 2
66826: PPUSH
66827: LD_INT 4
66829: PPUSH
66830: CALL_OW 273
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_VAR 0 7
66843: PPUSH
66844: LD_INT 3
66846: PPUSH
66847: LD_INT 4
66849: PPUSH
66850: CALL_OW 272
66854: PUSH
66855: LD_VAR 0 8
66859: PPUSH
66860: LD_INT 3
66862: PPUSH
66863: LD_INT 4
66865: PPUSH
66866: CALL_OW 273
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_VAR 0 7
66879: PPUSH
66880: LD_INT 4
66882: PPUSH
66883: LD_INT 4
66885: PPUSH
66886: CALL_OW 272
66890: PUSH
66891: LD_VAR 0 8
66895: PPUSH
66896: LD_INT 4
66898: PPUSH
66899: LD_INT 4
66901: PPUSH
66902: CALL_OW 273
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_VAR 0 7
66915: PPUSH
66916: LD_INT 5
66918: PPUSH
66919: LD_INT 4
66921: PPUSH
66922: CALL_OW 272
66926: PUSH
66927: LD_VAR 0 8
66931: PPUSH
66932: LD_INT 5
66934: PPUSH
66935: LD_INT 4
66937: PPUSH
66938: CALL_OW 273
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: ST_TO_ADDR
// for i = tmp downto 1 do
66955: LD_ADDR_VAR 0 4
66959: PUSH
66960: DOUBLE
66961: LD_VAR 0 6
66965: INC
66966: ST_TO_ADDR
66967: LD_INT 1
66969: PUSH
66970: FOR_DOWNTO
66971: IFFALSE 67074
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66973: LD_VAR 0 6
66977: PUSH
66978: LD_VAR 0 4
66982: ARRAY
66983: PUSH
66984: LD_INT 1
66986: ARRAY
66987: PPUSH
66988: LD_VAR 0 6
66992: PUSH
66993: LD_VAR 0 4
66997: ARRAY
66998: PUSH
66999: LD_INT 2
67001: ARRAY
67002: PPUSH
67003: CALL_OW 488
67007: NOT
67008: IFTRUE 67050
67010: PUSH
67011: LD_VAR 0 6
67015: PUSH
67016: LD_VAR 0 4
67020: ARRAY
67021: PUSH
67022: LD_INT 1
67024: ARRAY
67025: PPUSH
67026: LD_VAR 0 6
67030: PUSH
67031: LD_VAR 0 4
67035: ARRAY
67036: PUSH
67037: LD_INT 2
67039: ARRAY
67040: PPUSH
67041: CALL_OW 428
67045: PUSH
67046: LD_INT 0
67048: NONEQUAL
67049: OR
67050: IFFALSE 67072
// tmp := Delete ( tmp , i ) ;
67052: LD_ADDR_VAR 0 6
67056: PUSH
67057: LD_VAR 0 6
67061: PPUSH
67062: LD_VAR 0 4
67066: PPUSH
67067: CALL_OW 3
67071: ST_TO_ADDR
67072: GO 66970
67074: POP
67075: POP
// j := GetClosestHex ( unit , tmp ) ;
67076: LD_ADDR_VAR 0 5
67080: PUSH
67081: LD_VAR 0 1
67085: PPUSH
67086: LD_VAR 0 6
67090: PPUSH
67091: CALL 66368 0 2
67095: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67096: LD_VAR 0 1
67100: PPUSH
67101: LD_VAR 0 5
67105: PUSH
67106: LD_INT 1
67108: ARRAY
67109: PPUSH
67110: LD_VAR 0 5
67114: PUSH
67115: LD_INT 2
67117: ARRAY
67118: PPUSH
67119: CALL_OW 111
// end ;
67123: LD_VAR 0 3
67127: RET
// export function PrepareApemanSoldier ( ) ; begin
67128: LD_INT 0
67130: PPUSH
// uc_nation := 0 ;
67131: LD_ADDR_OWVAR 21
67135: PUSH
67136: LD_INT 0
67138: ST_TO_ADDR
// hc_sex := sex_male ;
67139: LD_ADDR_OWVAR 27
67143: PUSH
67144: LD_INT 1
67146: ST_TO_ADDR
// hc_name :=  ;
67147: LD_ADDR_OWVAR 26
67151: PUSH
67152: LD_STRING 
67154: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67155: LD_ADDR_OWVAR 28
67159: PUSH
67160: LD_INT 15
67162: ST_TO_ADDR
// hc_gallery :=  ;
67163: LD_ADDR_OWVAR 33
67167: PUSH
67168: LD_STRING 
67170: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67171: LD_ADDR_OWVAR 31
67175: PUSH
67176: LD_INT 0
67178: PPUSH
67179: LD_INT 3
67181: PPUSH
67182: CALL_OW 12
67186: PUSH
67187: LD_INT 0
67189: PPUSH
67190: LD_INT 3
67192: PPUSH
67193: CALL_OW 12
67197: PUSH
67198: LD_INT 0
67200: PUSH
67201: LD_INT 0
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67210: LD_ADDR_OWVAR 29
67214: PUSH
67215: LD_INT 12
67217: PUSH
67218: LD_INT 12
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: ST_TO_ADDR
// end ;
67225: LD_VAR 0 1
67229: RET
// export function PrepareApemanEngineer ( ) ; begin
67230: LD_INT 0
67232: PPUSH
// uc_nation := 0 ;
67233: LD_ADDR_OWVAR 21
67237: PUSH
67238: LD_INT 0
67240: ST_TO_ADDR
// hc_sex := sex_male ;
67241: LD_ADDR_OWVAR 27
67245: PUSH
67246: LD_INT 1
67248: ST_TO_ADDR
// hc_name :=  ;
67249: LD_ADDR_OWVAR 26
67253: PUSH
67254: LD_STRING 
67256: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67257: LD_ADDR_OWVAR 28
67261: PUSH
67262: LD_INT 16
67264: ST_TO_ADDR
// hc_gallery :=  ;
67265: LD_ADDR_OWVAR 33
67269: PUSH
67270: LD_STRING 
67272: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67273: LD_ADDR_OWVAR 31
67277: PUSH
67278: LD_INT 0
67280: PPUSH
67281: LD_INT 3
67283: PPUSH
67284: CALL_OW 12
67288: PUSH
67289: LD_INT 0
67291: PPUSH
67292: LD_INT 3
67294: PPUSH
67295: CALL_OW 12
67299: PUSH
67300: LD_INT 0
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67312: LD_ADDR_OWVAR 29
67316: PUSH
67317: LD_INT 12
67319: PUSH
67320: LD_INT 12
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: ST_TO_ADDR
// end ;
67327: LD_VAR 0 1
67331: RET
// export function PrepareApeman ( agressivity ) ; begin
67332: LD_INT 0
67334: PPUSH
// uc_side := 0 ;
67335: LD_ADDR_OWVAR 20
67339: PUSH
67340: LD_INT 0
67342: ST_TO_ADDR
// uc_nation := 0 ;
67343: LD_ADDR_OWVAR 21
67347: PUSH
67348: LD_INT 0
67350: ST_TO_ADDR
// hc_sex := sex_male ;
67351: LD_ADDR_OWVAR 27
67355: PUSH
67356: LD_INT 1
67358: ST_TO_ADDR
// hc_class := class_apeman ;
67359: LD_ADDR_OWVAR 28
67363: PUSH
67364: LD_INT 12
67366: ST_TO_ADDR
// hc_gallery :=  ;
67367: LD_ADDR_OWVAR 33
67371: PUSH
67372: LD_STRING 
67374: ST_TO_ADDR
// hc_name :=  ;
67375: LD_ADDR_OWVAR 26
67379: PUSH
67380: LD_STRING 
67382: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67383: LD_ADDR_OWVAR 29
67387: PUSH
67388: LD_INT 12
67390: PUSH
67391: LD_INT 12
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: ST_TO_ADDR
// if agressivity = 0 then
67398: LD_VAR 0 1
67402: PUSH
67403: LD_INT 0
67405: EQUAL
67406: IFFALSE 67418
// hc_agressivity := 0 else
67408: LD_ADDR_OWVAR 35
67412: PUSH
67413: LD_INT 0
67415: ST_TO_ADDR
67416: GO 67439
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67418: LD_ADDR_OWVAR 35
67422: PUSH
67423: LD_VAR 0 1
67427: NEG
67428: PPUSH
67429: LD_VAR 0 1
67433: PPUSH
67434: CALL_OW 12
67438: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67439: LD_ADDR_OWVAR 31
67443: PUSH
67444: LD_INT 0
67446: PPUSH
67447: LD_INT 3
67449: PPUSH
67450: CALL_OW 12
67454: PUSH
67455: LD_INT 0
67457: PPUSH
67458: LD_INT 3
67460: PPUSH
67461: CALL_OW 12
67465: PUSH
67466: LD_INT 0
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: ST_TO_ADDR
// end ;
67478: LD_VAR 0 2
67482: RET
// export function PrepareTiger ( agressivity ) ; begin
67483: LD_INT 0
67485: PPUSH
// uc_side := 0 ;
67486: LD_ADDR_OWVAR 20
67490: PUSH
67491: LD_INT 0
67493: ST_TO_ADDR
// uc_nation := 0 ;
67494: LD_ADDR_OWVAR 21
67498: PUSH
67499: LD_INT 0
67501: ST_TO_ADDR
// InitHc ;
67502: CALL_OW 19
// hc_class := class_tiger ;
67506: LD_ADDR_OWVAR 28
67510: PUSH
67511: LD_INT 14
67513: ST_TO_ADDR
// hc_gallery :=  ;
67514: LD_ADDR_OWVAR 33
67518: PUSH
67519: LD_STRING 
67521: ST_TO_ADDR
// hc_name :=  ;
67522: LD_ADDR_OWVAR 26
67526: PUSH
67527: LD_STRING 
67529: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67530: LD_ADDR_OWVAR 35
67534: PUSH
67535: LD_VAR 0 1
67539: NEG
67540: PPUSH
67541: LD_VAR 0 1
67545: PPUSH
67546: CALL_OW 12
67550: ST_TO_ADDR
// end ;
67551: LD_VAR 0 2
67555: RET
// export function PrepareEnchidna ( ) ; begin
67556: LD_INT 0
67558: PPUSH
// uc_side := 0 ;
67559: LD_ADDR_OWVAR 20
67563: PUSH
67564: LD_INT 0
67566: ST_TO_ADDR
// uc_nation := 0 ;
67567: LD_ADDR_OWVAR 21
67571: PUSH
67572: LD_INT 0
67574: ST_TO_ADDR
// InitHc ;
67575: CALL_OW 19
// hc_class := class_baggie ;
67579: LD_ADDR_OWVAR 28
67583: PUSH
67584: LD_INT 13
67586: ST_TO_ADDR
// hc_gallery :=  ;
67587: LD_ADDR_OWVAR 33
67591: PUSH
67592: LD_STRING 
67594: ST_TO_ADDR
// hc_name :=  ;
67595: LD_ADDR_OWVAR 26
67599: PUSH
67600: LD_STRING 
67602: ST_TO_ADDR
// end ;
67603: LD_VAR 0 1
67607: RET
// export function PrepareFrog ( ) ; begin
67608: LD_INT 0
67610: PPUSH
// uc_side := 0 ;
67611: LD_ADDR_OWVAR 20
67615: PUSH
67616: LD_INT 0
67618: ST_TO_ADDR
// uc_nation := 0 ;
67619: LD_ADDR_OWVAR 21
67623: PUSH
67624: LD_INT 0
67626: ST_TO_ADDR
// InitHc ;
67627: CALL_OW 19
// hc_class := class_frog ;
67631: LD_ADDR_OWVAR 28
67635: PUSH
67636: LD_INT 19
67638: ST_TO_ADDR
// hc_gallery :=  ;
67639: LD_ADDR_OWVAR 33
67643: PUSH
67644: LD_STRING 
67646: ST_TO_ADDR
// hc_name :=  ;
67647: LD_ADDR_OWVAR 26
67651: PUSH
67652: LD_STRING 
67654: ST_TO_ADDR
// end ;
67655: LD_VAR 0 1
67659: RET
// export function PrepareFish ( ) ; begin
67660: LD_INT 0
67662: PPUSH
// uc_side := 0 ;
67663: LD_ADDR_OWVAR 20
67667: PUSH
67668: LD_INT 0
67670: ST_TO_ADDR
// uc_nation := 0 ;
67671: LD_ADDR_OWVAR 21
67675: PUSH
67676: LD_INT 0
67678: ST_TO_ADDR
// InitHc ;
67679: CALL_OW 19
// hc_class := class_fish ;
67683: LD_ADDR_OWVAR 28
67687: PUSH
67688: LD_INT 20
67690: ST_TO_ADDR
// hc_gallery :=  ;
67691: LD_ADDR_OWVAR 33
67695: PUSH
67696: LD_STRING 
67698: ST_TO_ADDR
// hc_name :=  ;
67699: LD_ADDR_OWVAR 26
67703: PUSH
67704: LD_STRING 
67706: ST_TO_ADDR
// end ;
67707: LD_VAR 0 1
67711: RET
// export function PrepareBird ( ) ; begin
67712: LD_INT 0
67714: PPUSH
// uc_side := 0 ;
67715: LD_ADDR_OWVAR 20
67719: PUSH
67720: LD_INT 0
67722: ST_TO_ADDR
// uc_nation := 0 ;
67723: LD_ADDR_OWVAR 21
67727: PUSH
67728: LD_INT 0
67730: ST_TO_ADDR
// InitHc ;
67731: CALL_OW 19
// hc_class := class_phororhacos ;
67735: LD_ADDR_OWVAR 28
67739: PUSH
67740: LD_INT 18
67742: ST_TO_ADDR
// hc_gallery :=  ;
67743: LD_ADDR_OWVAR 33
67747: PUSH
67748: LD_STRING 
67750: ST_TO_ADDR
// hc_name :=  ;
67751: LD_ADDR_OWVAR 26
67755: PUSH
67756: LD_STRING 
67758: ST_TO_ADDR
// end ;
67759: LD_VAR 0 1
67763: RET
// export function PrepareHorse ( ) ; begin
67764: LD_INT 0
67766: PPUSH
// uc_side := 0 ;
67767: LD_ADDR_OWVAR 20
67771: PUSH
67772: LD_INT 0
67774: ST_TO_ADDR
// uc_nation := 0 ;
67775: LD_ADDR_OWVAR 21
67779: PUSH
67780: LD_INT 0
67782: ST_TO_ADDR
// InitHc ;
67783: CALL_OW 19
// hc_class := class_horse ;
67787: LD_ADDR_OWVAR 28
67791: PUSH
67792: LD_INT 21
67794: ST_TO_ADDR
// hc_gallery :=  ;
67795: LD_ADDR_OWVAR 33
67799: PUSH
67800: LD_STRING 
67802: ST_TO_ADDR
// hc_name :=  ;
67803: LD_ADDR_OWVAR 26
67807: PUSH
67808: LD_STRING 
67810: ST_TO_ADDR
// end ;
67811: LD_VAR 0 1
67815: RET
// export function PrepareMastodont ( ) ; begin
67816: LD_INT 0
67818: PPUSH
// uc_side := 0 ;
67819: LD_ADDR_OWVAR 20
67823: PUSH
67824: LD_INT 0
67826: ST_TO_ADDR
// uc_nation := 0 ;
67827: LD_ADDR_OWVAR 21
67831: PUSH
67832: LD_INT 0
67834: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67835: LD_ADDR_OWVAR 37
67839: PUSH
67840: LD_INT 31
67842: ST_TO_ADDR
// vc_control := control_rider ;
67843: LD_ADDR_OWVAR 38
67847: PUSH
67848: LD_INT 4
67850: ST_TO_ADDR
// end ;
67851: LD_VAR 0 1
67855: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67856: LD_INT 0
67858: PPUSH
67859: PPUSH
67860: PPUSH
// uc_side = 0 ;
67861: LD_ADDR_OWVAR 20
67865: PUSH
67866: LD_INT 0
67868: ST_TO_ADDR
// uc_nation = 0 ;
67869: LD_ADDR_OWVAR 21
67873: PUSH
67874: LD_INT 0
67876: ST_TO_ADDR
// InitHc_All ( ) ;
67877: CALL_OW 584
// InitVc ;
67881: CALL_OW 20
// if mastodonts then
67885: LD_VAR 0 6
67889: IFFALSE 67956
// for i = 1 to mastodonts do
67891: LD_ADDR_VAR 0 11
67895: PUSH
67896: DOUBLE
67897: LD_INT 1
67899: DEC
67900: ST_TO_ADDR
67901: LD_VAR 0 6
67905: PUSH
67906: FOR_TO
67907: IFFALSE 67954
// begin vc_chassis := 31 ;
67909: LD_ADDR_OWVAR 37
67913: PUSH
67914: LD_INT 31
67916: ST_TO_ADDR
// vc_control := control_rider ;
67917: LD_ADDR_OWVAR 38
67921: PUSH
67922: LD_INT 4
67924: ST_TO_ADDR
// animal := CreateVehicle ;
67925: LD_ADDR_VAR 0 12
67929: PUSH
67930: CALL_OW 45
67934: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67935: LD_VAR 0 12
67939: PPUSH
67940: LD_VAR 0 8
67944: PPUSH
67945: LD_INT 0
67947: PPUSH
67948: CALL 70098 0 3
// end ;
67952: GO 67906
67954: POP
67955: POP
// if horses then
67956: LD_VAR 0 5
67960: IFFALSE 68027
// for i = 1 to horses do
67962: LD_ADDR_VAR 0 11
67966: PUSH
67967: DOUBLE
67968: LD_INT 1
67970: DEC
67971: ST_TO_ADDR
67972: LD_VAR 0 5
67976: PUSH
67977: FOR_TO
67978: IFFALSE 68025
// begin hc_class := 21 ;
67980: LD_ADDR_OWVAR 28
67984: PUSH
67985: LD_INT 21
67987: ST_TO_ADDR
// hc_gallery :=  ;
67988: LD_ADDR_OWVAR 33
67992: PUSH
67993: LD_STRING 
67995: ST_TO_ADDR
// animal := CreateHuman ;
67996: LD_ADDR_VAR 0 12
68000: PUSH
68001: CALL_OW 44
68005: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68006: LD_VAR 0 12
68010: PPUSH
68011: LD_VAR 0 8
68015: PPUSH
68016: LD_INT 0
68018: PPUSH
68019: CALL 70098 0 3
// end ;
68023: GO 67977
68025: POP
68026: POP
// if birds then
68027: LD_VAR 0 1
68031: IFFALSE 68098
// for i = 1 to birds do
68033: LD_ADDR_VAR 0 11
68037: PUSH
68038: DOUBLE
68039: LD_INT 1
68041: DEC
68042: ST_TO_ADDR
68043: LD_VAR 0 1
68047: PUSH
68048: FOR_TO
68049: IFFALSE 68096
// begin hc_class := 18 ;
68051: LD_ADDR_OWVAR 28
68055: PUSH
68056: LD_INT 18
68058: ST_TO_ADDR
// hc_gallery =  ;
68059: LD_ADDR_OWVAR 33
68063: PUSH
68064: LD_STRING 
68066: ST_TO_ADDR
// animal := CreateHuman ;
68067: LD_ADDR_VAR 0 12
68071: PUSH
68072: CALL_OW 44
68076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68077: LD_VAR 0 12
68081: PPUSH
68082: LD_VAR 0 8
68086: PPUSH
68087: LD_INT 0
68089: PPUSH
68090: CALL 70098 0 3
// end ;
68094: GO 68048
68096: POP
68097: POP
// if tigers then
68098: LD_VAR 0 2
68102: IFFALSE 68186
// for i = 1 to tigers do
68104: LD_ADDR_VAR 0 11
68108: PUSH
68109: DOUBLE
68110: LD_INT 1
68112: DEC
68113: ST_TO_ADDR
68114: LD_VAR 0 2
68118: PUSH
68119: FOR_TO
68120: IFFALSE 68184
// begin hc_class = class_tiger ;
68122: LD_ADDR_OWVAR 28
68126: PUSH
68127: LD_INT 14
68129: ST_TO_ADDR
// hc_gallery =  ;
68130: LD_ADDR_OWVAR 33
68134: PUSH
68135: LD_STRING 
68137: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68138: LD_ADDR_OWVAR 35
68142: PUSH
68143: LD_INT 7
68145: NEG
68146: PPUSH
68147: LD_INT 7
68149: PPUSH
68150: CALL_OW 12
68154: ST_TO_ADDR
// animal := CreateHuman ;
68155: LD_ADDR_VAR 0 12
68159: PUSH
68160: CALL_OW 44
68164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68165: LD_VAR 0 12
68169: PPUSH
68170: LD_VAR 0 8
68174: PPUSH
68175: LD_INT 0
68177: PPUSH
68178: CALL 70098 0 3
// end ;
68182: GO 68119
68184: POP
68185: POP
// if apemans then
68186: LD_VAR 0 3
68190: IFFALSE 68313
// for i = 1 to apemans do
68192: LD_ADDR_VAR 0 11
68196: PUSH
68197: DOUBLE
68198: LD_INT 1
68200: DEC
68201: ST_TO_ADDR
68202: LD_VAR 0 3
68206: PUSH
68207: FOR_TO
68208: IFFALSE 68311
// begin hc_class = class_apeman ;
68210: LD_ADDR_OWVAR 28
68214: PUSH
68215: LD_INT 12
68217: ST_TO_ADDR
// hc_gallery =  ;
68218: LD_ADDR_OWVAR 33
68222: PUSH
68223: LD_STRING 
68225: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68226: LD_ADDR_OWVAR 35
68230: PUSH
68231: LD_INT 2
68233: NEG
68234: PPUSH
68235: LD_INT 2
68237: PPUSH
68238: CALL_OW 12
68242: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68243: LD_ADDR_OWVAR 31
68247: PUSH
68248: LD_INT 1
68250: PPUSH
68251: LD_INT 3
68253: PPUSH
68254: CALL_OW 12
68258: PUSH
68259: LD_INT 1
68261: PPUSH
68262: LD_INT 3
68264: PPUSH
68265: CALL_OW 12
68269: PUSH
68270: LD_INT 0
68272: PUSH
68273: LD_INT 0
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: ST_TO_ADDR
// animal := CreateHuman ;
68282: LD_ADDR_VAR 0 12
68286: PUSH
68287: CALL_OW 44
68291: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68292: LD_VAR 0 12
68296: PPUSH
68297: LD_VAR 0 8
68301: PPUSH
68302: LD_INT 0
68304: PPUSH
68305: CALL 70098 0 3
// end ;
68309: GO 68207
68311: POP
68312: POP
// if enchidnas then
68313: LD_VAR 0 4
68317: IFFALSE 68384
// for i = 1 to enchidnas do
68319: LD_ADDR_VAR 0 11
68323: PUSH
68324: DOUBLE
68325: LD_INT 1
68327: DEC
68328: ST_TO_ADDR
68329: LD_VAR 0 4
68333: PUSH
68334: FOR_TO
68335: IFFALSE 68382
// begin hc_class = 13 ;
68337: LD_ADDR_OWVAR 28
68341: PUSH
68342: LD_INT 13
68344: ST_TO_ADDR
// hc_gallery =  ;
68345: LD_ADDR_OWVAR 33
68349: PUSH
68350: LD_STRING 
68352: ST_TO_ADDR
// animal := CreateHuman ;
68353: LD_ADDR_VAR 0 12
68357: PUSH
68358: CALL_OW 44
68362: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68363: LD_VAR 0 12
68367: PPUSH
68368: LD_VAR 0 8
68372: PPUSH
68373: LD_INT 0
68375: PPUSH
68376: CALL 70098 0 3
// end ;
68380: GO 68334
68382: POP
68383: POP
// if fishes then
68384: LD_VAR 0 7
68388: IFFALSE 68455
// for i = 1 to fishes do
68390: LD_ADDR_VAR 0 11
68394: PUSH
68395: DOUBLE
68396: LD_INT 1
68398: DEC
68399: ST_TO_ADDR
68400: LD_VAR 0 7
68404: PUSH
68405: FOR_TO
68406: IFFALSE 68453
// begin hc_class = 20 ;
68408: LD_ADDR_OWVAR 28
68412: PUSH
68413: LD_INT 20
68415: ST_TO_ADDR
// hc_gallery =  ;
68416: LD_ADDR_OWVAR 33
68420: PUSH
68421: LD_STRING 
68423: ST_TO_ADDR
// animal := CreateHuman ;
68424: LD_ADDR_VAR 0 12
68428: PUSH
68429: CALL_OW 44
68433: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68434: LD_VAR 0 12
68438: PPUSH
68439: LD_VAR 0 9
68443: PPUSH
68444: LD_INT 0
68446: PPUSH
68447: CALL 70098 0 3
// end ;
68451: GO 68405
68453: POP
68454: POP
// end ;
68455: LD_VAR 0 10
68459: RET
// export function WantHeal ( sci , unit ) ; begin
68460: LD_INT 0
68462: PPUSH
// if GetTaskList ( sci ) > 0 then
68463: LD_VAR 0 1
68467: PPUSH
68468: CALL_OW 437
68472: PUSH
68473: LD_INT 0
68475: GREATER
68476: IFFALSE 68548
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68478: LD_VAR 0 1
68482: PPUSH
68483: CALL_OW 437
68487: PUSH
68488: LD_INT 1
68490: ARRAY
68491: PUSH
68492: LD_INT 1
68494: ARRAY
68495: PUSH
68496: LD_STRING l
68498: EQUAL
68499: IFFALSE 68526
68501: PUSH
68502: LD_VAR 0 1
68506: PPUSH
68507: CALL_OW 437
68511: PUSH
68512: LD_INT 1
68514: ARRAY
68515: PUSH
68516: LD_INT 4
68518: ARRAY
68519: PUSH
68520: LD_VAR 0 2
68524: EQUAL
68525: AND
68526: IFFALSE 68538
// result := true else
68528: LD_ADDR_VAR 0 3
68532: PUSH
68533: LD_INT 1
68535: ST_TO_ADDR
68536: GO 68546
// result := false ;
68538: LD_ADDR_VAR 0 3
68542: PUSH
68543: LD_INT 0
68545: ST_TO_ADDR
// end else
68546: GO 68556
// result := false ;
68548: LD_ADDR_VAR 0 3
68552: PUSH
68553: LD_INT 0
68555: ST_TO_ADDR
// end ;
68556: LD_VAR 0 3
68560: RET
// export function HealTarget ( sci ) ; begin
68561: LD_INT 0
68563: PPUSH
// if not sci then
68564: LD_VAR 0 1
68568: NOT
68569: IFFALSE 68573
// exit ;
68571: GO 68638
// result := 0 ;
68573: LD_ADDR_VAR 0 2
68577: PUSH
68578: LD_INT 0
68580: ST_TO_ADDR
// if GetTaskList ( sci ) then
68581: LD_VAR 0 1
68585: PPUSH
68586: CALL_OW 437
68590: IFFALSE 68638
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68592: LD_VAR 0 1
68596: PPUSH
68597: CALL_OW 437
68601: PUSH
68602: LD_INT 1
68604: ARRAY
68605: PUSH
68606: LD_INT 1
68608: ARRAY
68609: PUSH
68610: LD_STRING l
68612: EQUAL
68613: IFFALSE 68638
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68615: LD_ADDR_VAR 0 2
68619: PUSH
68620: LD_VAR 0 1
68624: PPUSH
68625: CALL_OW 437
68629: PUSH
68630: LD_INT 1
68632: ARRAY
68633: PUSH
68634: LD_INT 4
68636: ARRAY
68637: ST_TO_ADDR
// end ;
68638: LD_VAR 0 2
68642: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68643: LD_INT 0
68645: PPUSH
68646: PPUSH
68647: PPUSH
68648: PPUSH
// if not base_units then
68649: LD_VAR 0 1
68653: NOT
68654: IFFALSE 68658
// exit ;
68656: GO 68745
// result := false ;
68658: LD_ADDR_VAR 0 2
68662: PUSH
68663: LD_INT 0
68665: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68666: LD_ADDR_VAR 0 5
68670: PUSH
68671: LD_VAR 0 1
68675: PPUSH
68676: LD_INT 21
68678: PUSH
68679: LD_INT 3
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PPUSH
68686: CALL_OW 72
68690: ST_TO_ADDR
// if not tmp then
68691: LD_VAR 0 5
68695: NOT
68696: IFFALSE 68700
// exit ;
68698: GO 68745
// for i in tmp do
68700: LD_ADDR_VAR 0 3
68704: PUSH
68705: LD_VAR 0 5
68709: PUSH
68710: FOR_IN
68711: IFFALSE 68743
// begin result := EnemyInRange ( i , 22 ) ;
68713: LD_ADDR_VAR 0 2
68717: PUSH
68718: LD_VAR 0 3
68722: PPUSH
68723: LD_INT 22
68725: PPUSH
68726: CALL 66170 0 2
68730: ST_TO_ADDR
// if result then
68731: LD_VAR 0 2
68735: IFFALSE 68741
// exit ;
68737: POP
68738: POP
68739: GO 68745
// end ;
68741: GO 68710
68743: POP
68744: POP
// end ;
68745: LD_VAR 0 2
68749: RET
// export function FilterByTag ( units , tag ) ; begin
68750: LD_INT 0
68752: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68753: LD_ADDR_VAR 0 3
68757: PUSH
68758: LD_VAR 0 1
68762: PPUSH
68763: LD_INT 120
68765: PUSH
68766: LD_VAR 0 2
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PPUSH
68775: CALL_OW 72
68779: ST_TO_ADDR
// end ;
68780: LD_VAR 0 3
68784: RET
// export function IsDriver ( un ) ; begin
68785: LD_INT 0
68787: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68788: LD_ADDR_VAR 0 2
68792: PUSH
68793: LD_VAR 0 1
68797: PUSH
68798: LD_INT 55
68800: PUSH
68801: EMPTY
68802: LIST
68803: PPUSH
68804: CALL_OW 69
68808: IN
68809: ST_TO_ADDR
// end ;
68810: LD_VAR 0 2
68814: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68815: LD_INT 0
68817: PPUSH
68818: PPUSH
// list := [ ] ;
68819: LD_ADDR_VAR 0 5
68823: PUSH
68824: EMPTY
68825: ST_TO_ADDR
// case d of 0 :
68826: LD_VAR 0 3
68830: PUSH
68831: LD_INT 0
68833: DOUBLE
68834: EQUAL
68835: IFTRUE 68839
68837: GO 68972
68839: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68840: LD_ADDR_VAR 0 5
68844: PUSH
68845: LD_VAR 0 1
68849: PUSH
68850: LD_INT 4
68852: MINUS
68853: PUSH
68854: LD_VAR 0 2
68858: PUSH
68859: LD_INT 4
68861: MINUS
68862: PUSH
68863: LD_INT 2
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: LIST
68870: PUSH
68871: LD_VAR 0 1
68875: PUSH
68876: LD_INT 3
68878: MINUS
68879: PUSH
68880: LD_VAR 0 2
68884: PUSH
68885: LD_INT 1
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: LIST
68892: PUSH
68893: LD_VAR 0 1
68897: PUSH
68898: LD_INT 4
68900: PLUS
68901: PUSH
68902: LD_VAR 0 2
68906: PUSH
68907: LD_INT 4
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: LIST
68914: PUSH
68915: LD_VAR 0 1
68919: PUSH
68920: LD_INT 3
68922: PLUS
68923: PUSH
68924: LD_VAR 0 2
68928: PUSH
68929: LD_INT 3
68931: PLUS
68932: PUSH
68933: LD_INT 5
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: LIST
68940: PUSH
68941: LD_VAR 0 1
68945: PUSH
68946: LD_VAR 0 2
68950: PUSH
68951: LD_INT 4
68953: PLUS
68954: PUSH
68955: LD_INT 0
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: LIST
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: ST_TO_ADDR
// end ; 1 :
68970: GO 69670
68972: LD_INT 1
68974: DOUBLE
68975: EQUAL
68976: IFTRUE 68980
68978: GO 69113
68980: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68981: LD_ADDR_VAR 0 5
68985: PUSH
68986: LD_VAR 0 1
68990: PUSH
68991: LD_VAR 0 2
68995: PUSH
68996: LD_INT 4
68998: MINUS
68999: PUSH
69000: LD_INT 3
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: LIST
69007: PUSH
69008: LD_VAR 0 1
69012: PUSH
69013: LD_INT 3
69015: MINUS
69016: PUSH
69017: LD_VAR 0 2
69021: PUSH
69022: LD_INT 3
69024: MINUS
69025: PUSH
69026: LD_INT 2
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: LIST
69033: PUSH
69034: LD_VAR 0 1
69038: PUSH
69039: LD_INT 4
69041: MINUS
69042: PUSH
69043: LD_VAR 0 2
69047: PUSH
69048: LD_INT 1
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: LIST
69055: PUSH
69056: LD_VAR 0 1
69060: PUSH
69061: LD_VAR 0 2
69065: PUSH
69066: LD_INT 3
69068: PLUS
69069: PUSH
69070: LD_INT 0
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: LIST
69077: PUSH
69078: LD_VAR 0 1
69082: PUSH
69083: LD_INT 4
69085: PLUS
69086: PUSH
69087: LD_VAR 0 2
69091: PUSH
69092: LD_INT 4
69094: PLUS
69095: PUSH
69096: LD_INT 5
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: LIST
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: ST_TO_ADDR
// end ; 2 :
69111: GO 69670
69113: LD_INT 2
69115: DOUBLE
69116: EQUAL
69117: IFTRUE 69121
69119: GO 69250
69121: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69122: LD_ADDR_VAR 0 5
69126: PUSH
69127: LD_VAR 0 1
69131: PUSH
69132: LD_VAR 0 2
69136: PUSH
69137: LD_INT 3
69139: MINUS
69140: PUSH
69141: LD_INT 3
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: LIST
69148: PUSH
69149: LD_VAR 0 1
69153: PUSH
69154: LD_INT 4
69156: PLUS
69157: PUSH
69158: LD_VAR 0 2
69162: PUSH
69163: LD_INT 4
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: LIST
69170: PUSH
69171: LD_VAR 0 1
69175: PUSH
69176: LD_VAR 0 2
69180: PUSH
69181: LD_INT 4
69183: PLUS
69184: PUSH
69185: LD_INT 0
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: LIST
69192: PUSH
69193: LD_VAR 0 1
69197: PUSH
69198: LD_INT 3
69200: MINUS
69201: PUSH
69202: LD_VAR 0 2
69206: PUSH
69207: LD_INT 1
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: LIST
69214: PUSH
69215: LD_VAR 0 1
69219: PUSH
69220: LD_INT 4
69222: MINUS
69223: PUSH
69224: LD_VAR 0 2
69228: PUSH
69229: LD_INT 4
69231: MINUS
69232: PUSH
69233: LD_INT 2
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: LIST
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: ST_TO_ADDR
// end ; 3 :
69248: GO 69670
69250: LD_INT 3
69252: DOUBLE
69253: EQUAL
69254: IFTRUE 69258
69256: GO 69391
69258: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69259: LD_ADDR_VAR 0 5
69263: PUSH
69264: LD_VAR 0 1
69268: PUSH
69269: LD_INT 3
69271: PLUS
69272: PUSH
69273: LD_VAR 0 2
69277: PUSH
69278: LD_INT 4
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: LIST
69285: PUSH
69286: LD_VAR 0 1
69290: PUSH
69291: LD_INT 4
69293: PLUS
69294: PUSH
69295: LD_VAR 0 2
69299: PUSH
69300: LD_INT 4
69302: PLUS
69303: PUSH
69304: LD_INT 5
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: LIST
69311: PUSH
69312: LD_VAR 0 1
69316: PUSH
69317: LD_INT 4
69319: MINUS
69320: PUSH
69321: LD_VAR 0 2
69325: PUSH
69326: LD_INT 1
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: LIST
69333: PUSH
69334: LD_VAR 0 1
69338: PUSH
69339: LD_VAR 0 2
69343: PUSH
69344: LD_INT 4
69346: MINUS
69347: PUSH
69348: LD_INT 3
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: LIST
69355: PUSH
69356: LD_VAR 0 1
69360: PUSH
69361: LD_INT 3
69363: MINUS
69364: PUSH
69365: LD_VAR 0 2
69369: PUSH
69370: LD_INT 3
69372: MINUS
69373: PUSH
69374: LD_INT 2
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: LIST
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: ST_TO_ADDR
// end ; 4 :
69389: GO 69670
69391: LD_INT 4
69393: DOUBLE
69394: EQUAL
69395: IFTRUE 69399
69397: GO 69532
69399: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69400: LD_ADDR_VAR 0 5
69404: PUSH
69405: LD_VAR 0 1
69409: PUSH
69410: LD_VAR 0 2
69414: PUSH
69415: LD_INT 4
69417: PLUS
69418: PUSH
69419: LD_INT 0
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: LIST
69426: PUSH
69427: LD_VAR 0 1
69431: PUSH
69432: LD_INT 3
69434: PLUS
69435: PUSH
69436: LD_VAR 0 2
69440: PUSH
69441: LD_INT 3
69443: PLUS
69444: PUSH
69445: LD_INT 5
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: LIST
69452: PUSH
69453: LD_VAR 0 1
69457: PUSH
69458: LD_INT 4
69460: PLUS
69461: PUSH
69462: LD_VAR 0 2
69466: PUSH
69467: LD_INT 4
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: LIST
69474: PUSH
69475: LD_VAR 0 1
69479: PUSH
69480: LD_VAR 0 2
69484: PUSH
69485: LD_INT 3
69487: MINUS
69488: PUSH
69489: LD_INT 3
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: LIST
69496: PUSH
69497: LD_VAR 0 1
69501: PUSH
69502: LD_INT 4
69504: MINUS
69505: PUSH
69506: LD_VAR 0 2
69510: PUSH
69511: LD_INT 4
69513: MINUS
69514: PUSH
69515: LD_INT 2
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: LIST
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: ST_TO_ADDR
// end ; 5 :
69530: GO 69670
69532: LD_INT 5
69534: DOUBLE
69535: EQUAL
69536: IFTRUE 69540
69538: GO 69669
69540: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69541: LD_ADDR_VAR 0 5
69545: PUSH
69546: LD_VAR 0 1
69550: PUSH
69551: LD_INT 4
69553: MINUS
69554: PUSH
69555: LD_VAR 0 2
69559: PUSH
69560: LD_INT 1
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: LIST
69567: PUSH
69568: LD_VAR 0 1
69572: PUSH
69573: LD_VAR 0 2
69577: PUSH
69578: LD_INT 4
69580: MINUS
69581: PUSH
69582: LD_INT 3
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: LIST
69589: PUSH
69590: LD_VAR 0 1
69594: PUSH
69595: LD_INT 4
69597: PLUS
69598: PUSH
69599: LD_VAR 0 2
69603: PUSH
69604: LD_INT 4
69606: PLUS
69607: PUSH
69608: LD_INT 5
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: LIST
69615: PUSH
69616: LD_VAR 0 1
69620: PUSH
69621: LD_INT 3
69623: PLUS
69624: PUSH
69625: LD_VAR 0 2
69629: PUSH
69630: LD_INT 4
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: LIST
69637: PUSH
69638: LD_VAR 0 1
69642: PUSH
69643: LD_VAR 0 2
69647: PUSH
69648: LD_INT 3
69650: PLUS
69651: PUSH
69652: LD_INT 0
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: LIST
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: ST_TO_ADDR
// end ; end ;
69667: GO 69670
69669: POP
// result := list ;
69670: LD_ADDR_VAR 0 4
69674: PUSH
69675: LD_VAR 0 5
69679: ST_TO_ADDR
// end ;
69680: LD_VAR 0 4
69684: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69685: LD_INT 0
69687: PPUSH
69688: PPUSH
69689: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69690: LD_VAR 0 1
69694: NOT
69695: IFTRUE 69723
69697: PUSH
69698: LD_VAR 0 2
69702: PUSH
69703: LD_INT 1
69705: PUSH
69706: LD_INT 2
69708: PUSH
69709: LD_INT 3
69711: PUSH
69712: LD_INT 4
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: IN
69721: NOT
69722: OR
69723: IFFALSE 69727
// exit ;
69725: GO 69810
// tmp := [ ] ;
69727: LD_ADDR_VAR 0 5
69731: PUSH
69732: EMPTY
69733: ST_TO_ADDR
// for i in units do
69734: LD_ADDR_VAR 0 4
69738: PUSH
69739: LD_VAR 0 1
69743: PUSH
69744: FOR_IN
69745: IFFALSE 69779
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69747: LD_ADDR_VAR 0 5
69751: PUSH
69752: LD_VAR 0 5
69756: PPUSH
69757: LD_VAR 0 4
69761: PPUSH
69762: LD_VAR 0 2
69766: PPUSH
69767: CALL_OW 259
69771: PPUSH
69772: CALL 71205 0 2
69776: ST_TO_ADDR
69777: GO 69744
69779: POP
69780: POP
// if not tmp then
69781: LD_VAR 0 5
69785: NOT
69786: IFFALSE 69790
// exit ;
69788: GO 69810
// result := SortListByListDesc ( units , tmp ) ;
69790: LD_ADDR_VAR 0 3
69794: PUSH
69795: LD_VAR 0 1
69799: PPUSH
69800: LD_VAR 0 5
69804: PPUSH
69805: CALL_OW 77
69809: ST_TO_ADDR
// end ;
69810: LD_VAR 0 3
69814: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69815: LD_INT 0
69817: PPUSH
69818: PPUSH
69819: PPUSH
// result := false ;
69820: LD_ADDR_VAR 0 3
69824: PUSH
69825: LD_INT 0
69827: ST_TO_ADDR
// if not building then
69828: LD_VAR 0 2
69832: NOT
69833: IFFALSE 69837
// exit ;
69835: GO 69981
// x := GetX ( building ) ;
69837: LD_ADDR_VAR 0 4
69841: PUSH
69842: LD_VAR 0 2
69846: PPUSH
69847: CALL_OW 250
69851: ST_TO_ADDR
// y := GetY ( building ) ;
69852: LD_ADDR_VAR 0 5
69856: PUSH
69857: LD_VAR 0 2
69861: PPUSH
69862: CALL_OW 251
69866: ST_TO_ADDR
// if not x or not y then
69867: LD_VAR 0 4
69871: NOT
69872: IFTRUE 69881
69874: PUSH
69875: LD_VAR 0 5
69879: NOT
69880: OR
69881: IFFALSE 69885
// exit ;
69883: GO 69981
// if GetTaskList ( unit ) then
69885: LD_VAR 0 1
69889: PPUSH
69890: CALL_OW 437
69894: IFFALSE 69981
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69896: LD_STRING e
69898: PUSH
69899: LD_VAR 0 1
69903: PPUSH
69904: CALL_OW 437
69908: PUSH
69909: LD_INT 1
69911: ARRAY
69912: PUSH
69913: LD_INT 1
69915: ARRAY
69916: EQUAL
69917: IFFALSE 69944
69919: PUSH
69920: LD_VAR 0 4
69924: PUSH
69925: LD_VAR 0 1
69929: PPUSH
69930: CALL_OW 437
69934: PUSH
69935: LD_INT 1
69937: ARRAY
69938: PUSH
69939: LD_INT 2
69941: ARRAY
69942: EQUAL
69943: AND
69944: IFFALSE 69971
69946: PUSH
69947: LD_VAR 0 5
69951: PUSH
69952: LD_VAR 0 1
69956: PPUSH
69957: CALL_OW 437
69961: PUSH
69962: LD_INT 1
69964: ARRAY
69965: PUSH
69966: LD_INT 3
69968: ARRAY
69969: EQUAL
69970: AND
69971: IFFALSE 69981
// result := true end ;
69973: LD_ADDR_VAR 0 3
69977: PUSH
69978: LD_INT 1
69980: ST_TO_ADDR
// end ;
69981: LD_VAR 0 3
69985: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69986: LD_INT 0
69988: PPUSH
// result := false ;
69989: LD_ADDR_VAR 0 4
69993: PUSH
69994: LD_INT 0
69996: ST_TO_ADDR
// if GetTaskList ( unit ) then
69997: LD_VAR 0 1
70001: PPUSH
70002: CALL_OW 437
70006: IFFALSE 70093
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70008: LD_STRING M
70010: PUSH
70011: LD_VAR 0 1
70015: PPUSH
70016: CALL_OW 437
70020: PUSH
70021: LD_INT 1
70023: ARRAY
70024: PUSH
70025: LD_INT 1
70027: ARRAY
70028: EQUAL
70029: IFFALSE 70056
70031: PUSH
70032: LD_VAR 0 2
70036: PUSH
70037: LD_VAR 0 1
70041: PPUSH
70042: CALL_OW 437
70046: PUSH
70047: LD_INT 1
70049: ARRAY
70050: PUSH
70051: LD_INT 2
70053: ARRAY
70054: EQUAL
70055: AND
70056: IFFALSE 70083
70058: PUSH
70059: LD_VAR 0 3
70063: PUSH
70064: LD_VAR 0 1
70068: PPUSH
70069: CALL_OW 437
70073: PUSH
70074: LD_INT 1
70076: ARRAY
70077: PUSH
70078: LD_INT 3
70080: ARRAY
70081: EQUAL
70082: AND
70083: IFFALSE 70093
// result := true ;
70085: LD_ADDR_VAR 0 4
70089: PUSH
70090: LD_INT 1
70092: ST_TO_ADDR
// end ; end ;
70093: LD_VAR 0 4
70097: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70098: LD_INT 0
70100: PPUSH
70101: PPUSH
70102: PPUSH
70103: PPUSH
// if not unit or not area then
70104: LD_VAR 0 1
70108: NOT
70109: IFTRUE 70118
70111: PUSH
70112: LD_VAR 0 2
70116: NOT
70117: OR
70118: IFFALSE 70122
// exit ;
70120: GO 70298
// tmp := AreaToList ( area , i ) ;
70122: LD_ADDR_VAR 0 6
70126: PUSH
70127: LD_VAR 0 2
70131: PPUSH
70132: LD_VAR 0 5
70136: PPUSH
70137: CALL_OW 517
70141: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70142: LD_ADDR_VAR 0 5
70146: PUSH
70147: DOUBLE
70148: LD_INT 1
70150: DEC
70151: ST_TO_ADDR
70152: LD_VAR 0 6
70156: PUSH
70157: LD_INT 1
70159: ARRAY
70160: PUSH
70161: FOR_TO
70162: IFFALSE 70296
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70164: LD_ADDR_VAR 0 7
70168: PUSH
70169: LD_VAR 0 6
70173: PUSH
70174: LD_INT 1
70176: ARRAY
70177: PUSH
70178: LD_VAR 0 5
70182: ARRAY
70183: PUSH
70184: LD_VAR 0 6
70188: PUSH
70189: LD_INT 2
70191: ARRAY
70192: PUSH
70193: LD_VAR 0 5
70197: ARRAY
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70203: LD_INT 92
70205: PUSH
70206: LD_VAR 0 7
70210: PUSH
70211: LD_INT 1
70213: ARRAY
70214: PUSH
70215: LD_VAR 0 7
70219: PUSH
70220: LD_INT 2
70222: ARRAY
70223: PUSH
70224: LD_INT 2
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: PPUSH
70233: CALL_OW 69
70237: PUSH
70238: LD_INT 0
70240: EQUAL
70241: IFFALSE 70294
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70243: LD_VAR 0 1
70247: PPUSH
70248: LD_VAR 0 7
70252: PUSH
70253: LD_INT 1
70255: ARRAY
70256: PPUSH
70257: LD_VAR 0 7
70261: PUSH
70262: LD_INT 2
70264: ARRAY
70265: PPUSH
70266: LD_VAR 0 3
70270: PPUSH
70271: CALL_OW 48
// result := IsPlaced ( unit ) ;
70275: LD_ADDR_VAR 0 4
70279: PUSH
70280: LD_VAR 0 1
70284: PPUSH
70285: CALL_OW 305
70289: ST_TO_ADDR
// exit ;
70290: POP
70291: POP
70292: GO 70298
// end ; end ;
70294: GO 70161
70296: POP
70297: POP
// end ;
70298: LD_VAR 0 4
70302: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70303: LD_INT 0
70305: PPUSH
70306: PPUSH
70307: PPUSH
// if not side or side > 8 then
70308: LD_VAR 0 1
70312: NOT
70313: IFTRUE 70325
70315: PUSH
70316: LD_VAR 0 1
70320: PUSH
70321: LD_INT 8
70323: GREATER
70324: OR
70325: IFFALSE 70329
// exit ;
70327: GO 70516
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70329: LD_ADDR_VAR 0 4
70333: PUSH
70334: LD_INT 22
70336: PUSH
70337: LD_VAR 0 1
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 21
70348: PUSH
70349: LD_INT 3
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PPUSH
70360: CALL_OW 69
70364: ST_TO_ADDR
// if not tmp then
70365: LD_VAR 0 4
70369: NOT
70370: IFFALSE 70374
// exit ;
70372: GO 70516
// enable_addtolog := true ;
70374: LD_ADDR_OWVAR 81
70378: PUSH
70379: LD_INT 1
70381: ST_TO_ADDR
// AddToLog ( [ ) ;
70382: LD_STRING [
70384: PPUSH
70385: CALL_OW 561
// for i in tmp do
70389: LD_ADDR_VAR 0 3
70393: PUSH
70394: LD_VAR 0 4
70398: PUSH
70399: FOR_IN
70400: IFFALSE 70507
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70402: LD_STRING [
70404: PUSH
70405: LD_VAR 0 3
70409: PPUSH
70410: CALL_OW 266
70414: STR
70415: PUSH
70416: LD_STRING , 
70418: STR
70419: PUSH
70420: LD_VAR 0 3
70424: PPUSH
70425: CALL_OW 250
70429: STR
70430: PUSH
70431: LD_STRING , 
70433: STR
70434: PUSH
70435: LD_VAR 0 3
70439: PPUSH
70440: CALL_OW 251
70444: STR
70445: PUSH
70446: LD_STRING , 
70448: STR
70449: PUSH
70450: LD_VAR 0 3
70454: PPUSH
70455: CALL_OW 254
70459: STR
70460: PUSH
70461: LD_STRING , 
70463: STR
70464: PUSH
70465: LD_VAR 0 3
70469: PPUSH
70470: LD_INT 1
70472: PPUSH
70473: CALL_OW 268
70477: STR
70478: PUSH
70479: LD_STRING , 
70481: STR
70482: PUSH
70483: LD_VAR 0 3
70487: PPUSH
70488: LD_INT 2
70490: PPUSH
70491: CALL_OW 268
70495: STR
70496: PUSH
70497: LD_STRING ],
70499: STR
70500: PPUSH
70501: CALL_OW 561
// end ;
70505: GO 70399
70507: POP
70508: POP
// AddToLog ( ]; ) ;
70509: LD_STRING ];
70511: PPUSH
70512: CALL_OW 561
// end ;
70516: LD_VAR 0 2
70520: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70521: LD_INT 0
70523: PPUSH
70524: PPUSH
70525: PPUSH
70526: PPUSH
70527: PPUSH
// if not area or not rate or not max then
70528: LD_VAR 0 1
70532: NOT
70533: IFTRUE 70542
70535: PUSH
70536: LD_VAR 0 2
70540: NOT
70541: OR
70542: IFTRUE 70551
70544: PUSH
70545: LD_VAR 0 4
70549: NOT
70550: OR
70551: IFFALSE 70555
// exit ;
70553: GO 70744
// while 1 do
70555: LD_INT 1
70557: IFFALSE 70744
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70559: LD_ADDR_VAR 0 9
70563: PUSH
70564: LD_VAR 0 1
70568: PPUSH
70569: LD_INT 1
70571: PPUSH
70572: CALL_OW 287
70576: PUSH
70577: LD_INT 10
70579: MUL
70580: ST_TO_ADDR
// r := rate / 10 ;
70581: LD_ADDR_VAR 0 7
70585: PUSH
70586: LD_VAR 0 2
70590: PUSH
70591: LD_INT 10
70593: DIVREAL
70594: ST_TO_ADDR
// time := 1 1$00 ;
70595: LD_ADDR_VAR 0 8
70599: PUSH
70600: LD_INT 2100
70602: ST_TO_ADDR
// if amount < min then
70603: LD_VAR 0 9
70607: PUSH
70608: LD_VAR 0 3
70612: LESS
70613: IFFALSE 70631
// r := r * 2 else
70615: LD_ADDR_VAR 0 7
70619: PUSH
70620: LD_VAR 0 7
70624: PUSH
70625: LD_INT 2
70627: MUL
70628: ST_TO_ADDR
70629: GO 70657
// if amount > max then
70631: LD_VAR 0 9
70635: PUSH
70636: LD_VAR 0 4
70640: GREATER
70641: IFFALSE 70657
// r := r / 2 ;
70643: LD_ADDR_VAR 0 7
70647: PUSH
70648: LD_VAR 0 7
70652: PUSH
70653: LD_INT 2
70655: DIVREAL
70656: ST_TO_ADDR
// time := time / r ;
70657: LD_ADDR_VAR 0 8
70661: PUSH
70662: LD_VAR 0 8
70666: PUSH
70667: LD_VAR 0 7
70671: DIVREAL
70672: ST_TO_ADDR
// if time < 0 then
70673: LD_VAR 0 8
70677: PUSH
70678: LD_INT 0
70680: LESS
70681: IFFALSE 70698
// time := time * - 1 ;
70683: LD_ADDR_VAR 0 8
70687: PUSH
70688: LD_VAR 0 8
70692: PUSH
70693: LD_INT 1
70695: NEG
70696: MUL
70697: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70698: LD_VAR 0 8
70702: PUSH
70703: LD_INT 35
70705: PPUSH
70706: LD_INT 875
70708: PPUSH
70709: CALL_OW 12
70713: PLUS
70714: PPUSH
70715: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70719: LD_INT 1
70721: PPUSH
70722: LD_INT 5
70724: PPUSH
70725: CALL_OW 12
70729: PPUSH
70730: LD_VAR 0 1
70734: PPUSH
70735: LD_INT 1
70737: PPUSH
70738: CALL_OW 55
// end ;
70742: GO 70555
// end ;
70744: LD_VAR 0 5
70748: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70749: LD_INT 0
70751: PPUSH
70752: PPUSH
70753: PPUSH
70754: PPUSH
70755: PPUSH
70756: PPUSH
70757: PPUSH
70758: PPUSH
// if not turrets or not factories then
70759: LD_VAR 0 1
70763: NOT
70764: IFTRUE 70773
70766: PUSH
70767: LD_VAR 0 2
70771: NOT
70772: OR
70773: IFFALSE 70777
// exit ;
70775: GO 71084
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70777: LD_ADDR_VAR 0 10
70781: PUSH
70782: LD_INT 5
70784: PUSH
70785: LD_INT 6
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 2
70794: PUSH
70795: LD_INT 4
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 3
70804: PUSH
70805: LD_INT 5
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 24
70819: PUSH
70820: LD_INT 25
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 23
70829: PUSH
70830: LD_INT 27
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 42
70843: PUSH
70844: LD_INT 43
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 44
70853: PUSH
70854: LD_INT 46
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 45
70863: PUSH
70864: LD_INT 47
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: LIST
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: LIST
70880: ST_TO_ADDR
// result := [ ] ;
70881: LD_ADDR_VAR 0 3
70885: PUSH
70886: EMPTY
70887: ST_TO_ADDR
// for i in turrets do
70888: LD_ADDR_VAR 0 4
70892: PUSH
70893: LD_VAR 0 1
70897: PUSH
70898: FOR_IN
70899: IFFALSE 71082
// begin nat := GetNation ( i ) ;
70901: LD_ADDR_VAR 0 7
70905: PUSH
70906: LD_VAR 0 4
70910: PPUSH
70911: CALL_OW 248
70915: ST_TO_ADDR
// weapon := 0 ;
70916: LD_ADDR_VAR 0 8
70920: PUSH
70921: LD_INT 0
70923: ST_TO_ADDR
// if not nat then
70924: LD_VAR 0 7
70928: NOT
70929: IFFALSE 70933
// continue ;
70931: GO 70898
// for j in list [ nat ] do
70933: LD_ADDR_VAR 0 5
70937: PUSH
70938: LD_VAR 0 10
70942: PUSH
70943: LD_VAR 0 7
70947: ARRAY
70948: PUSH
70949: FOR_IN
70950: IFFALSE 70991
// if GetBWeapon ( i ) = j [ 1 ] then
70952: LD_VAR 0 4
70956: PPUSH
70957: CALL_OW 269
70961: PUSH
70962: LD_VAR 0 5
70966: PUSH
70967: LD_INT 1
70969: ARRAY
70970: EQUAL
70971: IFFALSE 70989
// begin weapon := j [ 2 ] ;
70973: LD_ADDR_VAR 0 8
70977: PUSH
70978: LD_VAR 0 5
70982: PUSH
70983: LD_INT 2
70985: ARRAY
70986: ST_TO_ADDR
// break ;
70987: GO 70991
// end ;
70989: GO 70949
70991: POP
70992: POP
// if not weapon then
70993: LD_VAR 0 8
70997: NOT
70998: IFFALSE 71002
// continue ;
71000: GO 70898
// for k in factories do
71002: LD_ADDR_VAR 0 6
71006: PUSH
71007: LD_VAR 0 2
71011: PUSH
71012: FOR_IN
71013: IFFALSE 71078
// begin weapons := AvailableWeaponList ( k ) ;
71015: LD_ADDR_VAR 0 9
71019: PUSH
71020: LD_VAR 0 6
71024: PPUSH
71025: CALL_OW 478
71029: ST_TO_ADDR
// if not weapons then
71030: LD_VAR 0 9
71034: NOT
71035: IFFALSE 71039
// continue ;
71037: GO 71012
// if weapon in weapons then
71039: LD_VAR 0 8
71043: PUSH
71044: LD_VAR 0 9
71048: IN
71049: IFFALSE 71076
// begin result := [ i , weapon ] ;
71051: LD_ADDR_VAR 0 3
71055: PUSH
71056: LD_VAR 0 4
71060: PUSH
71061: LD_VAR 0 8
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: ST_TO_ADDR
// exit ;
71070: POP
71071: POP
71072: POP
71073: POP
71074: GO 71084
// end ; end ;
71076: GO 71012
71078: POP
71079: POP
// end ;
71080: GO 70898
71082: POP
71083: POP
// end ;
71084: LD_VAR 0 3
71088: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71089: LD_INT 0
71091: PPUSH
// if not side or side > 8 then
71092: LD_VAR 0 3
71096: NOT
71097: IFTRUE 71109
71099: PUSH
71100: LD_VAR 0 3
71104: PUSH
71105: LD_INT 8
71107: GREATER
71108: OR
71109: IFFALSE 71113
// exit ;
71111: GO 71172
// if not range then
71113: LD_VAR 0 4
71117: NOT
71118: IFFALSE 71129
// range := - 12 ;
71120: LD_ADDR_VAR 0 4
71124: PUSH
71125: LD_INT 12
71127: NEG
71128: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71129: LD_VAR 0 1
71133: PPUSH
71134: LD_VAR 0 2
71138: PPUSH
71139: LD_VAR 0 3
71143: PPUSH
71144: LD_VAR 0 4
71148: PPUSH
71149: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71153: LD_VAR 0 1
71157: PPUSH
71158: LD_VAR 0 2
71162: PPUSH
71163: LD_VAR 0 3
71167: PPUSH
71168: CALL_OW 331
// end ;
71172: LD_VAR 0 5
71176: RET
// export function Video ( mode ) ; begin
71177: LD_INT 0
71179: PPUSH
// ingame_video = mode ;
71180: LD_ADDR_OWVAR 52
71184: PUSH
71185: LD_VAR 0 1
71189: ST_TO_ADDR
// interface_hidden = mode ;
71190: LD_ADDR_OWVAR 54
71194: PUSH
71195: LD_VAR 0 1
71199: ST_TO_ADDR
// end ;
71200: LD_VAR 0 2
71204: RET
// export function Join ( array , element ) ; begin
71205: LD_INT 0
71207: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71208: LD_ADDR_VAR 0 3
71212: PUSH
71213: LD_VAR 0 1
71217: PPUSH
71218: LD_VAR 0 1
71222: PUSH
71223: LD_INT 1
71225: PLUS
71226: PPUSH
71227: LD_VAR 0 2
71231: PPUSH
71232: CALL_OW 1
71236: ST_TO_ADDR
// end ;
71237: LD_VAR 0 3
71241: RET
// export function JoinUnion ( array , element ) ; begin
71242: LD_INT 0
71244: PPUSH
// result := array union element ;
71245: LD_ADDR_VAR 0 3
71249: PUSH
71250: LD_VAR 0 1
71254: PUSH
71255: LD_VAR 0 2
71259: UNION
71260: ST_TO_ADDR
// end ;
71261: LD_VAR 0 3
71265: RET
// export function GetBehemoths ( side ) ; begin
71266: LD_INT 0
71268: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71269: LD_ADDR_VAR 0 2
71273: PUSH
71274: LD_INT 22
71276: PUSH
71277: LD_VAR 0 1
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 31
71288: PUSH
71289: LD_INT 25
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PPUSH
71300: CALL_OW 69
71304: ST_TO_ADDR
// end ;
71305: LD_VAR 0 2
71309: RET
// export function Shuffle ( array ) ; var i , index ; begin
71310: LD_INT 0
71312: PPUSH
71313: PPUSH
71314: PPUSH
// result := [ ] ;
71315: LD_ADDR_VAR 0 2
71319: PUSH
71320: EMPTY
71321: ST_TO_ADDR
// if not array then
71322: LD_VAR 0 1
71326: NOT
71327: IFFALSE 71331
// exit ;
71329: GO 71430
// Randomize ;
71331: CALL_OW 10
// for i = array downto 1 do
71335: LD_ADDR_VAR 0 3
71339: PUSH
71340: DOUBLE
71341: LD_VAR 0 1
71345: INC
71346: ST_TO_ADDR
71347: LD_INT 1
71349: PUSH
71350: FOR_DOWNTO
71351: IFFALSE 71428
// begin index := rand ( 1 , array ) ;
71353: LD_ADDR_VAR 0 4
71357: PUSH
71358: LD_INT 1
71360: PPUSH
71361: LD_VAR 0 1
71365: PPUSH
71366: CALL_OW 12
71370: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71371: LD_ADDR_VAR 0 2
71375: PUSH
71376: LD_VAR 0 2
71380: PPUSH
71381: LD_VAR 0 2
71385: PUSH
71386: LD_INT 1
71388: PLUS
71389: PPUSH
71390: LD_VAR 0 1
71394: PUSH
71395: LD_VAR 0 4
71399: ARRAY
71400: PPUSH
71401: CALL_OW 2
71405: ST_TO_ADDR
// array := Delete ( array , index ) ;
71406: LD_ADDR_VAR 0 1
71410: PUSH
71411: LD_VAR 0 1
71415: PPUSH
71416: LD_VAR 0 4
71420: PPUSH
71421: CALL_OW 3
71425: ST_TO_ADDR
// end ;
71426: GO 71350
71428: POP
71429: POP
// end ;
71430: LD_VAR 0 2
71434: RET
// export function GetBaseMaterials ( base ) ; begin
71435: LD_INT 0
71437: PPUSH
// result := [ 0 , 0 , 0 ] ;
71438: LD_ADDR_VAR 0 2
71442: PUSH
71443: LD_INT 0
71445: PUSH
71446: LD_INT 0
71448: PUSH
71449: LD_INT 0
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: LIST
71456: ST_TO_ADDR
// if not base then
71457: LD_VAR 0 1
71461: NOT
71462: IFFALSE 71466
// exit ;
71464: GO 71515
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71466: LD_ADDR_VAR 0 2
71470: PUSH
71471: LD_VAR 0 1
71475: PPUSH
71476: LD_INT 1
71478: PPUSH
71479: CALL_OW 275
71483: PUSH
71484: LD_VAR 0 1
71488: PPUSH
71489: LD_INT 2
71491: PPUSH
71492: CALL_OW 275
71496: PUSH
71497: LD_VAR 0 1
71501: PPUSH
71502: LD_INT 3
71504: PPUSH
71505: CALL_OW 275
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: LIST
71514: ST_TO_ADDR
// end ;
71515: LD_VAR 0 2
71519: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71520: LD_INT 0
71522: PPUSH
71523: PPUSH
// result := array ;
71524: LD_ADDR_VAR 0 3
71528: PUSH
71529: LD_VAR 0 1
71533: ST_TO_ADDR
// if size >= result then
71534: LD_VAR 0 2
71538: PUSH
71539: LD_VAR 0 3
71543: GREATEREQUAL
71544: IFFALSE 71548
// exit ;
71546: GO 71598
// if size then
71548: LD_VAR 0 2
71552: IFFALSE 71598
// for i := array downto size do
71554: LD_ADDR_VAR 0 4
71558: PUSH
71559: DOUBLE
71560: LD_VAR 0 1
71564: INC
71565: ST_TO_ADDR
71566: LD_VAR 0 2
71570: PUSH
71571: FOR_DOWNTO
71572: IFFALSE 71596
// result := Delete ( result , result ) ;
71574: LD_ADDR_VAR 0 3
71578: PUSH
71579: LD_VAR 0 3
71583: PPUSH
71584: LD_VAR 0 3
71588: PPUSH
71589: CALL_OW 3
71593: ST_TO_ADDR
71594: GO 71571
71596: POP
71597: POP
// end ;
71598: LD_VAR 0 3
71602: RET
// export function ComExit ( unit ) ; var tmp ; begin
71603: LD_INT 0
71605: PPUSH
71606: PPUSH
// if not IsInUnit ( unit ) then
71607: LD_VAR 0 1
71611: PPUSH
71612: CALL_OW 310
71616: NOT
71617: IFFALSE 71621
// exit ;
71619: GO 71681
// tmp := IsInUnit ( unit ) ;
71621: LD_ADDR_VAR 0 3
71625: PUSH
71626: LD_VAR 0 1
71630: PPUSH
71631: CALL_OW 310
71635: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71636: LD_VAR 0 3
71640: PPUSH
71641: CALL_OW 247
71645: PUSH
71646: LD_INT 2
71648: EQUAL
71649: IFFALSE 71662
// ComExitVehicle ( unit ) else
71651: LD_VAR 0 1
71655: PPUSH
71656: CALL_OW 121
71660: GO 71671
// ComExitBuilding ( unit ) ;
71662: LD_VAR 0 1
71666: PPUSH
71667: CALL_OW 122
// result := tmp ;
71671: LD_ADDR_VAR 0 2
71675: PUSH
71676: LD_VAR 0 3
71680: ST_TO_ADDR
// end ;
71681: LD_VAR 0 2
71685: RET
// export function ComExitAll ( units ) ; var i ; begin
71686: LD_INT 0
71688: PPUSH
71689: PPUSH
// if not units then
71690: LD_VAR 0 1
71694: NOT
71695: IFFALSE 71699
// exit ;
71697: GO 71725
// for i in units do
71699: LD_ADDR_VAR 0 3
71703: PUSH
71704: LD_VAR 0 1
71708: PUSH
71709: FOR_IN
71710: IFFALSE 71723
// ComExit ( i ) ;
71712: LD_VAR 0 3
71716: PPUSH
71717: CALL 71603 0 1
71721: GO 71709
71723: POP
71724: POP
// end ;
71725: LD_VAR 0 2
71729: RET
// export function ResetHc ; begin
71730: LD_INT 0
71732: PPUSH
// InitHc ;
71733: CALL_OW 19
// hc_importance := 0 ;
71737: LD_ADDR_OWVAR 32
71741: PUSH
71742: LD_INT 0
71744: ST_TO_ADDR
// end ;
71745: LD_VAR 0 1
71749: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71750: LD_INT 0
71752: PPUSH
71753: PPUSH
71754: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71755: LD_ADDR_VAR 0 6
71759: PUSH
71760: LD_VAR 0 1
71764: PUSH
71765: LD_VAR 0 3
71769: PLUS
71770: PUSH
71771: LD_INT 2
71773: DIV
71774: ST_TO_ADDR
// if _x < 0 then
71775: LD_VAR 0 6
71779: PUSH
71780: LD_INT 0
71782: LESS
71783: IFFALSE 71800
// _x := _x * - 1 ;
71785: LD_ADDR_VAR 0 6
71789: PUSH
71790: LD_VAR 0 6
71794: PUSH
71795: LD_INT 1
71797: NEG
71798: MUL
71799: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71800: LD_ADDR_VAR 0 7
71804: PUSH
71805: LD_VAR 0 2
71809: PUSH
71810: LD_VAR 0 4
71814: PLUS
71815: PUSH
71816: LD_INT 2
71818: DIV
71819: ST_TO_ADDR
// if _y < 0 then
71820: LD_VAR 0 7
71824: PUSH
71825: LD_INT 0
71827: LESS
71828: IFFALSE 71845
// _y := _y * - 1 ;
71830: LD_ADDR_VAR 0 7
71834: PUSH
71835: LD_VAR 0 7
71839: PUSH
71840: LD_INT 1
71842: NEG
71843: MUL
71844: ST_TO_ADDR
// result := [ _x , _y ] ;
71845: LD_ADDR_VAR 0 5
71849: PUSH
71850: LD_VAR 0 6
71854: PUSH
71855: LD_VAR 0 7
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: ST_TO_ADDR
// end ;
71864: LD_VAR 0 5
71868: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71869: LD_INT 0
71871: PPUSH
71872: PPUSH
71873: PPUSH
71874: PPUSH
// task := GetTaskList ( unit ) ;
71875: LD_ADDR_VAR 0 7
71879: PUSH
71880: LD_VAR 0 1
71884: PPUSH
71885: CALL_OW 437
71889: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71890: LD_VAR 0 7
71894: NOT
71895: IFFALSE 71914
71897: PUSH
71898: LD_VAR 0 1
71902: PPUSH
71903: LD_VAR 0 2
71907: PPUSH
71908: CALL_OW 308
71912: NOT
71913: AND
71914: IFFALSE 71918
// exit ;
71916: GO 72036
// if IsInArea ( unit , area ) then
71918: LD_VAR 0 1
71922: PPUSH
71923: LD_VAR 0 2
71927: PPUSH
71928: CALL_OW 308
71932: IFFALSE 71950
// begin ComMoveToArea ( unit , goAway ) ;
71934: LD_VAR 0 1
71938: PPUSH
71939: LD_VAR 0 3
71943: PPUSH
71944: CALL_OW 113
// exit ;
71948: GO 72036
// end ; if task [ 1 ] [ 1 ] <> M then
71950: LD_VAR 0 7
71954: PUSH
71955: LD_INT 1
71957: ARRAY
71958: PUSH
71959: LD_INT 1
71961: ARRAY
71962: PUSH
71963: LD_STRING M
71965: NONEQUAL
71966: IFFALSE 71970
// exit ;
71968: GO 72036
// x := task [ 1 ] [ 2 ] ;
71970: LD_ADDR_VAR 0 5
71974: PUSH
71975: LD_VAR 0 7
71979: PUSH
71980: LD_INT 1
71982: ARRAY
71983: PUSH
71984: LD_INT 2
71986: ARRAY
71987: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71988: LD_ADDR_VAR 0 6
71992: PUSH
71993: LD_VAR 0 7
71997: PUSH
71998: LD_INT 1
72000: ARRAY
72001: PUSH
72002: LD_INT 3
72004: ARRAY
72005: ST_TO_ADDR
// if InArea ( x , y , area ) then
72006: LD_VAR 0 5
72010: PPUSH
72011: LD_VAR 0 6
72015: PPUSH
72016: LD_VAR 0 2
72020: PPUSH
72021: CALL_OW 309
72025: IFFALSE 72036
// ComStop ( unit ) ;
72027: LD_VAR 0 1
72031: PPUSH
72032: CALL_OW 141
// end ;
72036: LD_VAR 0 4
72040: RET
// export function Abs ( value ) ; begin
72041: LD_INT 0
72043: PPUSH
// result := value ;
72044: LD_ADDR_VAR 0 2
72048: PUSH
72049: LD_VAR 0 1
72053: ST_TO_ADDR
// if value < 0 then
72054: LD_VAR 0 1
72058: PUSH
72059: LD_INT 0
72061: LESS
72062: IFFALSE 72079
// result := value * - 1 ;
72064: LD_ADDR_VAR 0 2
72068: PUSH
72069: LD_VAR 0 1
72073: PUSH
72074: LD_INT 1
72076: NEG
72077: MUL
72078: ST_TO_ADDR
// end ;
72079: LD_VAR 0 2
72083: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72084: LD_INT 0
72086: PPUSH
72087: PPUSH
72088: PPUSH
72089: PPUSH
72090: PPUSH
72091: PPUSH
72092: PPUSH
72093: PPUSH
// if not unit or not building then
72094: LD_VAR 0 1
72098: NOT
72099: IFTRUE 72108
72101: PUSH
72102: LD_VAR 0 2
72106: NOT
72107: OR
72108: IFFALSE 72112
// exit ;
72110: GO 72340
// x := GetX ( building ) ;
72112: LD_ADDR_VAR 0 4
72116: PUSH
72117: LD_VAR 0 2
72121: PPUSH
72122: CALL_OW 250
72126: ST_TO_ADDR
// y := GetY ( building ) ;
72127: LD_ADDR_VAR 0 6
72131: PUSH
72132: LD_VAR 0 2
72136: PPUSH
72137: CALL_OW 251
72141: ST_TO_ADDR
// d := GetDir ( building ) ;
72142: LD_ADDR_VAR 0 8
72146: PUSH
72147: LD_VAR 0 2
72151: PPUSH
72152: CALL_OW 254
72156: ST_TO_ADDR
// r := 4 ;
72157: LD_ADDR_VAR 0 9
72161: PUSH
72162: LD_INT 4
72164: ST_TO_ADDR
// for i := 1 to 5 do
72165: LD_ADDR_VAR 0 10
72169: PUSH
72170: DOUBLE
72171: LD_INT 1
72173: DEC
72174: ST_TO_ADDR
72175: LD_INT 5
72177: PUSH
72178: FOR_TO
72179: IFFALSE 72338
// begin _x := ShiftX ( x , d , r + i ) ;
72181: LD_ADDR_VAR 0 5
72185: PUSH
72186: LD_VAR 0 4
72190: PPUSH
72191: LD_VAR 0 8
72195: PPUSH
72196: LD_VAR 0 9
72200: PUSH
72201: LD_VAR 0 10
72205: PLUS
72206: PPUSH
72207: CALL_OW 272
72211: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72212: LD_ADDR_VAR 0 7
72216: PUSH
72217: LD_VAR 0 6
72221: PPUSH
72222: LD_VAR 0 8
72226: PPUSH
72227: LD_VAR 0 9
72231: PUSH
72232: LD_VAR 0 10
72236: PLUS
72237: PPUSH
72238: CALL_OW 273
72242: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72243: LD_VAR 0 5
72247: PPUSH
72248: LD_VAR 0 7
72252: PPUSH
72253: CALL_OW 488
72257: IFFALSE 72292
72259: PUSH
72260: LD_VAR 0 5
72264: PPUSH
72265: LD_VAR 0 7
72269: PPUSH
72270: CALL_OW 428
72274: PPUSH
72275: CALL_OW 247
72279: PUSH
72280: LD_INT 3
72282: PUSH
72283: LD_INT 2
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: IN
72290: NOT
72291: AND
72292: IFFALSE 72336
// begin ComMoveXY ( unit , _x , _y ) ;
72294: LD_VAR 0 1
72298: PPUSH
72299: LD_VAR 0 5
72303: PPUSH
72304: LD_VAR 0 7
72308: PPUSH
72309: CALL_OW 111
// result := [ _x , _y ] ;
72313: LD_ADDR_VAR 0 3
72317: PUSH
72318: LD_VAR 0 5
72322: PUSH
72323: LD_VAR 0 7
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: ST_TO_ADDR
// exit ;
72332: POP
72333: POP
72334: GO 72340
// end ; end ;
72336: GO 72178
72338: POP
72339: POP
// end ;
72340: LD_VAR 0 3
72344: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72345: LD_INT 0
72347: PPUSH
72348: PPUSH
72349: PPUSH
// result := 0 ;
72350: LD_ADDR_VAR 0 3
72354: PUSH
72355: LD_INT 0
72357: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72358: LD_VAR 0 1
72362: PUSH
72363: LD_INT 0
72365: LESS
72366: IFTRUE 72378
72368: PUSH
72369: LD_VAR 0 1
72373: PUSH
72374: LD_INT 8
72376: GREATER
72377: OR
72378: IFTRUE 72390
72380: PUSH
72381: LD_VAR 0 2
72385: PUSH
72386: LD_INT 0
72388: LESS
72389: OR
72390: IFTRUE 72402
72392: PUSH
72393: LD_VAR 0 2
72397: PUSH
72398: LD_INT 8
72400: GREATER
72401: OR
72402: IFFALSE 72406
// exit ;
72404: GO 72481
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72406: LD_ADDR_VAR 0 4
72410: PUSH
72411: LD_INT 22
72413: PUSH
72414: LD_VAR 0 2
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PPUSH
72423: CALL_OW 69
72427: PUSH
72428: FOR_IN
72429: IFFALSE 72479
// begin un := UnitShoot ( i ) ;
72431: LD_ADDR_VAR 0 5
72435: PUSH
72436: LD_VAR 0 4
72440: PPUSH
72441: CALL_OW 504
72445: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72446: LD_VAR 0 5
72450: PPUSH
72451: CALL_OW 255
72455: PUSH
72456: LD_VAR 0 1
72460: EQUAL
72461: IFFALSE 72477
// begin result := un ;
72463: LD_ADDR_VAR 0 3
72467: PUSH
72468: LD_VAR 0 5
72472: ST_TO_ADDR
// exit ;
72473: POP
72474: POP
72475: GO 72481
// end ; end ;
72477: GO 72428
72479: POP
72480: POP
// end ;
72481: LD_VAR 0 3
72485: RET
// export function GetCargoBay ( units ) ; begin
72486: LD_INT 0
72488: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72489: LD_ADDR_VAR 0 2
72493: PUSH
72494: LD_VAR 0 1
72498: PPUSH
72499: LD_INT 2
72501: PUSH
72502: LD_INT 34
72504: PUSH
72505: LD_INT 12
72507: PUSH
72508: EMPTY
72509: LIST
72510: LIST
72511: PUSH
72512: LD_INT 34
72514: PUSH
72515: LD_INT 51
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: LD_INT 34
72524: PUSH
72525: LD_INT 32
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: PUSH
72532: LD_INT 34
72534: PUSH
72535: LD_INT 89
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: LIST
72546: LIST
72547: LIST
72548: PPUSH
72549: CALL_OW 72
72553: ST_TO_ADDR
// end ;
72554: LD_VAR 0 2
72558: RET
// export function Negate ( value ) ; begin
72559: LD_INT 0
72561: PPUSH
// result := not value ;
72562: LD_ADDR_VAR 0 2
72566: PUSH
72567: LD_VAR 0 1
72571: NOT
72572: ST_TO_ADDR
// end ;
72573: LD_VAR 0 2
72577: RET
// export function Inc ( value ) ; begin
72578: LD_INT 0
72580: PPUSH
// result := value + 1 ;
72581: LD_ADDR_VAR 0 2
72585: PUSH
72586: LD_VAR 0 1
72590: PUSH
72591: LD_INT 1
72593: PLUS
72594: ST_TO_ADDR
// end ;
72595: LD_VAR 0 2
72599: RET
// export function Dec ( value ) ; begin
72600: LD_INT 0
72602: PPUSH
// result := value - 1 ;
72603: LD_ADDR_VAR 0 2
72607: PUSH
72608: LD_VAR 0 1
72612: PUSH
72613: LD_INT 1
72615: MINUS
72616: ST_TO_ADDR
// end ;
72617: LD_VAR 0 2
72621: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72622: LD_INT 0
72624: PPUSH
72625: PPUSH
72626: PPUSH
72627: PPUSH
72628: PPUSH
72629: PPUSH
72630: PPUSH
72631: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72632: LD_VAR 0 1
72636: PPUSH
72637: LD_VAR 0 2
72641: PPUSH
72642: CALL_OW 488
72646: NOT
72647: IFTRUE 72666
72649: PUSH
72650: LD_VAR 0 3
72654: PPUSH
72655: LD_VAR 0 4
72659: PPUSH
72660: CALL_OW 488
72664: NOT
72665: OR
72666: IFFALSE 72679
// begin result := - 1 ;
72668: LD_ADDR_VAR 0 5
72672: PUSH
72673: LD_INT 1
72675: NEG
72676: ST_TO_ADDR
// exit ;
72677: GO 72914
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72679: LD_ADDR_VAR 0 12
72683: PUSH
72684: LD_VAR 0 1
72688: PPUSH
72689: LD_VAR 0 2
72693: PPUSH
72694: LD_VAR 0 3
72698: PPUSH
72699: LD_VAR 0 4
72703: PPUSH
72704: CALL 71750 0 4
72708: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72709: LD_ADDR_VAR 0 11
72713: PUSH
72714: LD_VAR 0 1
72718: PPUSH
72719: LD_VAR 0 2
72723: PPUSH
72724: LD_VAR 0 12
72728: PUSH
72729: LD_INT 1
72731: ARRAY
72732: PPUSH
72733: LD_VAR 0 12
72737: PUSH
72738: LD_INT 2
72740: ARRAY
72741: PPUSH
72742: CALL_OW 298
72746: ST_TO_ADDR
// distance := 9999 ;
72747: LD_ADDR_VAR 0 10
72751: PUSH
72752: LD_INT 9999
72754: ST_TO_ADDR
// for i := 0 to 5 do
72755: LD_ADDR_VAR 0 6
72759: PUSH
72760: DOUBLE
72761: LD_INT 0
72763: DEC
72764: ST_TO_ADDR
72765: LD_INT 5
72767: PUSH
72768: FOR_TO
72769: IFFALSE 72912
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72771: LD_ADDR_VAR 0 7
72775: PUSH
72776: LD_VAR 0 1
72780: PPUSH
72781: LD_VAR 0 6
72785: PPUSH
72786: LD_VAR 0 11
72790: PPUSH
72791: CALL_OW 272
72795: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72796: LD_ADDR_VAR 0 8
72800: PUSH
72801: LD_VAR 0 2
72805: PPUSH
72806: LD_VAR 0 6
72810: PPUSH
72811: LD_VAR 0 11
72815: PPUSH
72816: CALL_OW 273
72820: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72821: LD_VAR 0 7
72825: PPUSH
72826: LD_VAR 0 8
72830: PPUSH
72831: CALL_OW 488
72835: NOT
72836: IFFALSE 72840
// continue ;
72838: GO 72768
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72840: LD_ADDR_VAR 0 9
72844: PUSH
72845: LD_VAR 0 12
72849: PUSH
72850: LD_INT 1
72852: ARRAY
72853: PPUSH
72854: LD_VAR 0 12
72858: PUSH
72859: LD_INT 2
72861: ARRAY
72862: PPUSH
72863: LD_VAR 0 7
72867: PPUSH
72868: LD_VAR 0 8
72872: PPUSH
72873: CALL_OW 298
72877: ST_TO_ADDR
// if tmp < distance then
72878: LD_VAR 0 9
72882: PUSH
72883: LD_VAR 0 10
72887: LESS
72888: IFFALSE 72910
// begin result := i ;
72890: LD_ADDR_VAR 0 5
72894: PUSH
72895: LD_VAR 0 6
72899: ST_TO_ADDR
// distance := tmp ;
72900: LD_ADDR_VAR 0 10
72904: PUSH
72905: LD_VAR 0 9
72909: ST_TO_ADDR
// end ; end ;
72910: GO 72768
72912: POP
72913: POP
// end ;
72914: LD_VAR 0 5
72918: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72919: LD_INT 0
72921: PPUSH
72922: PPUSH
// if not driver or not IsInUnit ( driver ) then
72923: LD_VAR 0 1
72927: NOT
72928: IFTRUE 72942
72930: PUSH
72931: LD_VAR 0 1
72935: PPUSH
72936: CALL_OW 310
72940: NOT
72941: OR
72942: IFFALSE 72946
// exit ;
72944: GO 73036
// vehicle := IsInUnit ( driver ) ;
72946: LD_ADDR_VAR 0 3
72950: PUSH
72951: LD_VAR 0 1
72955: PPUSH
72956: CALL_OW 310
72960: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72961: LD_VAR 0 1
72965: PPUSH
72966: LD_STRING \
72968: PUSH
72969: LD_INT 0
72971: PUSH
72972: LD_INT 0
72974: PUSH
72975: LD_INT 0
72977: PUSH
72978: LD_INT 0
72980: PUSH
72981: LD_INT 0
72983: PUSH
72984: LD_INT 0
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: LIST
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: PUSH
72996: LD_STRING E
72998: PUSH
72999: LD_INT 0
73001: PUSH
73002: LD_INT 0
73004: PUSH
73005: LD_VAR 0 3
73009: PUSH
73010: LD_INT 0
73012: PUSH
73013: LD_INT 0
73015: PUSH
73016: LD_INT 0
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PPUSH
73032: CALL_OW 446
// end ;
73036: LD_VAR 0 2
73040: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73041: LD_INT 0
73043: PPUSH
73044: PPUSH
// if not driver or not IsInUnit ( driver ) then
73045: LD_VAR 0 1
73049: NOT
73050: IFTRUE 73064
73052: PUSH
73053: LD_VAR 0 1
73057: PPUSH
73058: CALL_OW 310
73062: NOT
73063: OR
73064: IFFALSE 73068
// exit ;
73066: GO 73158
// vehicle := IsInUnit ( driver ) ;
73068: LD_ADDR_VAR 0 3
73072: PUSH
73073: LD_VAR 0 1
73077: PPUSH
73078: CALL_OW 310
73082: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73083: LD_VAR 0 1
73087: PPUSH
73088: LD_STRING \
73090: PUSH
73091: LD_INT 0
73093: PUSH
73094: LD_INT 0
73096: PUSH
73097: LD_INT 0
73099: PUSH
73100: LD_INT 0
73102: PUSH
73103: LD_INT 0
73105: PUSH
73106: LD_INT 0
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: PUSH
73118: LD_STRING E
73120: PUSH
73121: LD_INT 0
73123: PUSH
73124: LD_INT 0
73126: PUSH
73127: LD_VAR 0 3
73131: PUSH
73132: LD_INT 0
73134: PUSH
73135: LD_INT 0
73137: PUSH
73138: LD_INT 0
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: PPUSH
73154: CALL_OW 447
// end ;
73158: LD_VAR 0 2
73162: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73163: LD_INT 0
73165: PPUSH
73166: PPUSH
73167: PPUSH
// tmp := [ ] ;
73168: LD_ADDR_VAR 0 5
73172: PUSH
73173: EMPTY
73174: ST_TO_ADDR
// for i in units do
73175: LD_ADDR_VAR 0 4
73179: PUSH
73180: LD_VAR 0 1
73184: PUSH
73185: FOR_IN
73186: IFFALSE 73224
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73188: LD_ADDR_VAR 0 5
73192: PUSH
73193: LD_VAR 0 5
73197: PPUSH
73198: LD_VAR 0 5
73202: PUSH
73203: LD_INT 1
73205: PLUS
73206: PPUSH
73207: LD_VAR 0 4
73211: PPUSH
73212: CALL_OW 256
73216: PPUSH
73217: CALL_OW 2
73221: ST_TO_ADDR
73222: GO 73185
73224: POP
73225: POP
// if not tmp then
73226: LD_VAR 0 5
73230: NOT
73231: IFFALSE 73235
// exit ;
73233: GO 73283
// if asc then
73235: LD_VAR 0 2
73239: IFFALSE 73263
// result := SortListByListAsc ( units , tmp ) else
73241: LD_ADDR_VAR 0 3
73245: PUSH
73246: LD_VAR 0 1
73250: PPUSH
73251: LD_VAR 0 5
73255: PPUSH
73256: CALL_OW 76
73260: ST_TO_ADDR
73261: GO 73283
// result := SortListByListDesc ( units , tmp ) ;
73263: LD_ADDR_VAR 0 3
73267: PUSH
73268: LD_VAR 0 1
73272: PPUSH
73273: LD_VAR 0 5
73277: PPUSH
73278: CALL_OW 77
73282: ST_TO_ADDR
// end ;
73283: LD_VAR 0 3
73287: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73288: LD_INT 0
73290: PPUSH
73291: PPUSH
// task := GetTaskList ( mech ) ;
73292: LD_ADDR_VAR 0 4
73296: PUSH
73297: LD_VAR 0 1
73301: PPUSH
73302: CALL_OW 437
73306: ST_TO_ADDR
// if not task then
73307: LD_VAR 0 4
73311: NOT
73312: IFFALSE 73316
// exit ;
73314: GO 73360
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73316: LD_ADDR_VAR 0 3
73320: PUSH
73321: LD_VAR 0 4
73325: PUSH
73326: LD_INT 1
73328: ARRAY
73329: PUSH
73330: LD_INT 1
73332: ARRAY
73333: PUSH
73334: LD_STRING r
73336: EQUAL
73337: IFFALSE 73359
73339: PUSH
73340: LD_VAR 0 4
73344: PUSH
73345: LD_INT 1
73347: ARRAY
73348: PUSH
73349: LD_INT 4
73351: ARRAY
73352: PUSH
73353: LD_VAR 0 2
73357: EQUAL
73358: AND
73359: ST_TO_ADDR
// end ;
73360: LD_VAR 0 3
73364: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73365: LD_INT 0
73367: PPUSH
// SetDir ( unit , d ) ;
73368: LD_VAR 0 1
73372: PPUSH
73373: LD_VAR 0 4
73377: PPUSH
73378: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73382: LD_ADDR_VAR 0 6
73386: PUSH
73387: LD_VAR 0 1
73391: PPUSH
73392: LD_VAR 0 2
73396: PPUSH
73397: LD_VAR 0 3
73401: PPUSH
73402: LD_VAR 0 5
73406: PPUSH
73407: CALL_OW 48
73411: ST_TO_ADDR
// end ;
73412: LD_VAR 0 6
73416: RET
// export function ToNaturalNumber ( number ) ; begin
73417: LD_INT 0
73419: PPUSH
// result := number div 1 ;
73420: LD_ADDR_VAR 0 2
73424: PUSH
73425: LD_VAR 0 1
73429: PUSH
73430: LD_INT 1
73432: DIV
73433: ST_TO_ADDR
// if number < 0 then
73434: LD_VAR 0 1
73438: PUSH
73439: LD_INT 0
73441: LESS
73442: IFFALSE 73452
// result := 0 ;
73444: LD_ADDR_VAR 0 2
73448: PUSH
73449: LD_INT 0
73451: ST_TO_ADDR
// end ;
73452: LD_VAR 0 2
73456: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
73457: LD_INT 0
73459: PPUSH
73460: PPUSH
73461: PPUSH
// if not buildings then
73462: LD_VAR 0 1
73466: NOT
73467: IFFALSE 73471
// exit ;
73469: GO 73586
// tmp := [ ] ;
73471: LD_ADDR_VAR 0 5
73475: PUSH
73476: EMPTY
73477: ST_TO_ADDR
// for b in buildings do
73478: LD_ADDR_VAR 0 4
73482: PUSH
73483: LD_VAR 0 1
73487: PUSH
73488: FOR_IN
73489: IFFALSE 73527
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
73491: LD_ADDR_VAR 0 5
73495: PUSH
73496: LD_VAR 0 5
73500: PPUSH
73501: LD_VAR 0 5
73505: PUSH
73506: LD_INT 1
73508: PLUS
73509: PPUSH
73510: LD_VAR 0 4
73514: PPUSH
73515: CALL_OW 266
73519: PPUSH
73520: CALL_OW 1
73524: ST_TO_ADDR
73525: GO 73488
73527: POP
73528: POP
// if not tmp then
73529: LD_VAR 0 5
73533: NOT
73534: IFFALSE 73538
// exit ;
73536: GO 73586
// if asc then
73538: LD_VAR 0 2
73542: IFFALSE 73566
// result := SortListByListAsc ( buildings , tmp ) else
73544: LD_ADDR_VAR 0 3
73548: PUSH
73549: LD_VAR 0 1
73553: PPUSH
73554: LD_VAR 0 5
73558: PPUSH
73559: CALL_OW 76
73563: ST_TO_ADDR
73564: GO 73586
// result := SortListByListDesc ( buildings , tmp ) ;
73566: LD_ADDR_VAR 0 3
73570: PUSH
73571: LD_VAR 0 1
73575: PPUSH
73576: LD_VAR 0 5
73580: PPUSH
73581: CALL_OW 77
73585: ST_TO_ADDR
// end ;
73586: LD_VAR 0 3
73590: RET
// export function SortByClass ( units , class ) ; var un ; begin
73591: LD_INT 0
73593: PPUSH
73594: PPUSH
// if not units or not class then
73595: LD_VAR 0 1
73599: NOT
73600: IFTRUE 73609
73602: PUSH
73603: LD_VAR 0 2
73607: NOT
73608: OR
73609: IFFALSE 73613
// exit ;
73611: GO 73708
// result := [ ] ;
73613: LD_ADDR_VAR 0 3
73617: PUSH
73618: EMPTY
73619: ST_TO_ADDR
// for un in units do
73620: LD_ADDR_VAR 0 4
73624: PUSH
73625: LD_VAR 0 1
73629: PUSH
73630: FOR_IN
73631: IFFALSE 73706
// if GetClass ( un ) = class then
73633: LD_VAR 0 4
73637: PPUSH
73638: CALL_OW 257
73642: PUSH
73643: LD_VAR 0 2
73647: EQUAL
73648: IFFALSE 73675
// result := Insert ( result , 1 , un ) else
73650: LD_ADDR_VAR 0 3
73654: PUSH
73655: LD_VAR 0 3
73659: PPUSH
73660: LD_INT 1
73662: PPUSH
73663: LD_VAR 0 4
73667: PPUSH
73668: CALL_OW 2
73672: ST_TO_ADDR
73673: GO 73704
// result := Replace ( result , result + 1 , un ) ;
73675: LD_ADDR_VAR 0 3
73679: PUSH
73680: LD_VAR 0 3
73684: PPUSH
73685: LD_VAR 0 3
73689: PUSH
73690: LD_INT 1
73692: PLUS
73693: PPUSH
73694: LD_VAR 0 4
73698: PPUSH
73699: CALL_OW 1
73703: ST_TO_ADDR
73704: GO 73630
73706: POP
73707: POP
// end ;
73708: LD_VAR 0 3
73712: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73713: LD_INT 0
73715: PPUSH
73716: PPUSH
73717: PPUSH
73718: PPUSH
73719: PPUSH
73720: PPUSH
73721: PPUSH
// result := [ ] ;
73722: LD_ADDR_VAR 0 4
73726: PUSH
73727: EMPTY
73728: ST_TO_ADDR
// if x - r < 0 then
73729: LD_VAR 0 1
73733: PUSH
73734: LD_VAR 0 3
73738: MINUS
73739: PUSH
73740: LD_INT 0
73742: LESS
73743: IFFALSE 73755
// min_x := 0 else
73745: LD_ADDR_VAR 0 8
73749: PUSH
73750: LD_INT 0
73752: ST_TO_ADDR
73753: GO 73771
// min_x := x - r ;
73755: LD_ADDR_VAR 0 8
73759: PUSH
73760: LD_VAR 0 1
73764: PUSH
73765: LD_VAR 0 3
73769: MINUS
73770: ST_TO_ADDR
// if y - r < 0 then
73771: LD_VAR 0 2
73775: PUSH
73776: LD_VAR 0 3
73780: MINUS
73781: PUSH
73782: LD_INT 0
73784: LESS
73785: IFFALSE 73797
// min_y := 0 else
73787: LD_ADDR_VAR 0 7
73791: PUSH
73792: LD_INT 0
73794: ST_TO_ADDR
73795: GO 73813
// min_y := y - r ;
73797: LD_ADDR_VAR 0 7
73801: PUSH
73802: LD_VAR 0 2
73806: PUSH
73807: LD_VAR 0 3
73811: MINUS
73812: ST_TO_ADDR
// max_x := x + r ;
73813: LD_ADDR_VAR 0 9
73817: PUSH
73818: LD_VAR 0 1
73822: PUSH
73823: LD_VAR 0 3
73827: PLUS
73828: ST_TO_ADDR
// max_y := y + r ;
73829: LD_ADDR_VAR 0 10
73833: PUSH
73834: LD_VAR 0 2
73838: PUSH
73839: LD_VAR 0 3
73843: PLUS
73844: ST_TO_ADDR
// for _x = min_x to max_x do
73845: LD_ADDR_VAR 0 5
73849: PUSH
73850: DOUBLE
73851: LD_VAR 0 8
73855: DEC
73856: ST_TO_ADDR
73857: LD_VAR 0 9
73861: PUSH
73862: FOR_TO
73863: IFFALSE 73964
// for _y = min_y to max_y do
73865: LD_ADDR_VAR 0 6
73869: PUSH
73870: DOUBLE
73871: LD_VAR 0 7
73875: DEC
73876: ST_TO_ADDR
73877: LD_VAR 0 10
73881: PUSH
73882: FOR_TO
73883: IFFALSE 73960
// begin if not ValidHex ( _x , _y ) then
73885: LD_VAR 0 5
73889: PPUSH
73890: LD_VAR 0 6
73894: PPUSH
73895: CALL_OW 488
73899: NOT
73900: IFFALSE 73904
// continue ;
73902: GO 73882
// if GetResourceTypeXY ( _x , _y ) then
73904: LD_VAR 0 5
73908: PPUSH
73909: LD_VAR 0 6
73913: PPUSH
73914: CALL_OW 283
73918: IFFALSE 73958
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73920: LD_ADDR_VAR 0 4
73924: PUSH
73925: LD_VAR 0 4
73929: PPUSH
73930: LD_VAR 0 4
73934: PUSH
73935: LD_INT 1
73937: PLUS
73938: PPUSH
73939: LD_VAR 0 5
73943: PUSH
73944: LD_VAR 0 6
73948: PUSH
73949: EMPTY
73950: LIST
73951: LIST
73952: PPUSH
73953: CALL_OW 1
73957: ST_TO_ADDR
// end ;
73958: GO 73882
73960: POP
73961: POP
73962: GO 73862
73964: POP
73965: POP
// end ;
73966: LD_VAR 0 4
73970: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73971: LD_INT 0
73973: PPUSH
73974: PPUSH
73975: PPUSH
73976: PPUSH
73977: PPUSH
73978: PPUSH
73979: PPUSH
73980: PPUSH
// if not units then
73981: LD_VAR 0 1
73985: NOT
73986: IFFALSE 73990
// exit ;
73988: GO 74522
// result := UnitFilter ( units , [ f_ok ] ) ;
73990: LD_ADDR_VAR 0 3
73994: PUSH
73995: LD_VAR 0 1
73999: PPUSH
74000: LD_INT 50
74002: PUSH
74003: EMPTY
74004: LIST
74005: PPUSH
74006: CALL_OW 72
74010: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74011: LD_ADDR_VAR 0 8
74015: PUSH
74016: LD_VAR 0 1
74020: PUSH
74021: LD_INT 1
74023: ARRAY
74024: PPUSH
74025: CALL_OW 255
74029: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74030: LD_ADDR_VAR 0 10
74034: PUSH
74035: LD_INT 29
74037: PUSH
74038: LD_INT 91
74040: PUSH
74041: LD_INT 49
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: LIST
74048: ST_TO_ADDR
// if not result then
74049: LD_VAR 0 3
74053: NOT
74054: IFFALSE 74058
// exit ;
74056: GO 74522
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74058: LD_ADDR_VAR 0 5
74062: PUSH
74063: LD_INT 81
74065: PUSH
74066: LD_VAR 0 8
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: PPUSH
74075: CALL_OW 69
74079: ST_TO_ADDR
// for i in result do
74080: LD_ADDR_VAR 0 4
74084: PUSH
74085: LD_VAR 0 3
74089: PUSH
74090: FOR_IN
74091: IFFALSE 74520
// begin tag := GetTag ( i ) + 1 ;
74093: LD_ADDR_VAR 0 9
74097: PUSH
74098: LD_VAR 0 4
74102: PPUSH
74103: CALL_OW 110
74107: PUSH
74108: LD_INT 1
74110: PLUS
74111: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74112: LD_ADDR_VAR 0 7
74116: PUSH
74117: LD_VAR 0 4
74121: PPUSH
74122: CALL_OW 250
74126: PPUSH
74127: LD_VAR 0 4
74131: PPUSH
74132: CALL_OW 251
74136: PPUSH
74137: LD_INT 4
74139: PPUSH
74140: CALL 73713 0 3
74144: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74145: LD_VAR 0 4
74149: PPUSH
74150: CALL_OW 247
74154: PUSH
74155: LD_INT 2
74157: EQUAL
74158: IFFALSE 74170
74160: PUSH
74161: LD_VAR 0 7
74165: PUSH
74166: LD_INT 2
74168: GREATER
74169: AND
74170: IFFALSE 74190
74172: PUSH
74173: LD_VAR 0 4
74177: PPUSH
74178: CALL_OW 264
74182: PUSH
74183: LD_VAR 0 10
74187: IN
74188: NOT
74189: AND
74190: IFFALSE 74229
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74192: LD_VAR 0 4
74196: PPUSH
74197: LD_VAR 0 7
74201: PUSH
74202: LD_INT 1
74204: ARRAY
74205: PUSH
74206: LD_INT 1
74208: ARRAY
74209: PPUSH
74210: LD_VAR 0 7
74214: PUSH
74215: LD_INT 1
74217: ARRAY
74218: PUSH
74219: LD_INT 2
74221: ARRAY
74222: PPUSH
74223: CALL_OW 116
74227: GO 74518
// if path > tag then
74229: LD_VAR 0 2
74233: PUSH
74234: LD_VAR 0 9
74238: GREATER
74239: IFFALSE 74447
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74241: LD_ADDR_VAR 0 6
74245: PUSH
74246: LD_VAR 0 5
74250: PPUSH
74251: LD_INT 91
74253: PUSH
74254: LD_VAR 0 4
74258: PUSH
74259: LD_INT 8
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: LIST
74266: PPUSH
74267: CALL_OW 72
74271: ST_TO_ADDR
// if nearEnemy then
74272: LD_VAR 0 6
74276: IFFALSE 74345
// begin if GetWeapon ( i ) = ru_time_lapser then
74278: LD_VAR 0 4
74282: PPUSH
74283: CALL_OW 264
74287: PUSH
74288: LD_INT 49
74290: EQUAL
74291: IFFALSE 74319
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74293: LD_VAR 0 4
74297: PPUSH
74298: LD_VAR 0 6
74302: PPUSH
74303: LD_VAR 0 4
74307: PPUSH
74308: CALL_OW 74
74312: PPUSH
74313: CALL_OW 112
74317: GO 74343
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74319: LD_VAR 0 4
74323: PPUSH
74324: LD_VAR 0 6
74328: PPUSH
74329: LD_VAR 0 4
74333: PPUSH
74334: CALL_OW 74
74338: PPUSH
74339: CALL 75603 0 2
// end else
74343: GO 74445
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74345: LD_VAR 0 4
74349: PPUSH
74350: LD_VAR 0 2
74354: PUSH
74355: LD_VAR 0 9
74359: ARRAY
74360: PUSH
74361: LD_INT 1
74363: ARRAY
74364: PPUSH
74365: LD_VAR 0 2
74369: PUSH
74370: LD_VAR 0 9
74374: ARRAY
74375: PUSH
74376: LD_INT 2
74378: ARRAY
74379: PPUSH
74380: CALL_OW 297
74384: PUSH
74385: LD_INT 6
74387: GREATER
74388: IFFALSE 74431
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74390: LD_VAR 0 4
74394: PPUSH
74395: LD_VAR 0 2
74399: PUSH
74400: LD_VAR 0 9
74404: ARRAY
74405: PUSH
74406: LD_INT 1
74408: ARRAY
74409: PPUSH
74410: LD_VAR 0 2
74414: PUSH
74415: LD_VAR 0 9
74419: ARRAY
74420: PUSH
74421: LD_INT 2
74423: ARRAY
74424: PPUSH
74425: CALL_OW 114
74429: GO 74445
// SetTag ( i , tag ) ;
74431: LD_VAR 0 4
74435: PPUSH
74436: LD_VAR 0 9
74440: PPUSH
74441: CALL_OW 109
// end else
74445: GO 74518
// if enemy then
74447: LD_VAR 0 5
74451: IFFALSE 74518
// begin if GetWeapon ( i ) = ru_time_lapser then
74453: LD_VAR 0 4
74457: PPUSH
74458: CALL_OW 264
74462: PUSH
74463: LD_INT 49
74465: EQUAL
74466: IFFALSE 74494
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74468: LD_VAR 0 4
74472: PPUSH
74473: LD_VAR 0 5
74477: PPUSH
74478: LD_VAR 0 4
74482: PPUSH
74483: CALL_OW 74
74487: PPUSH
74488: CALL_OW 112
74492: GO 74518
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74494: LD_VAR 0 4
74498: PPUSH
74499: LD_VAR 0 5
74503: PPUSH
74504: LD_VAR 0 4
74508: PPUSH
74509: CALL_OW 74
74513: PPUSH
74514: CALL 75603 0 2
// end ; end ;
74518: GO 74090
74520: POP
74521: POP
// end ;
74522: LD_VAR 0 3
74526: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74527: LD_INT 0
74529: PPUSH
74530: PPUSH
74531: PPUSH
// if not unit or IsInUnit ( unit ) then
74532: LD_VAR 0 1
74536: NOT
74537: IFTRUE 74550
74539: PUSH
74540: LD_VAR 0 1
74544: PPUSH
74545: CALL_OW 310
74549: OR
74550: IFFALSE 74554
// exit ;
74552: GO 74645
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74554: LD_ADDR_VAR 0 4
74558: PUSH
74559: LD_VAR 0 1
74563: PPUSH
74564: CALL_OW 250
74568: PPUSH
74569: LD_VAR 0 2
74573: PPUSH
74574: LD_INT 1
74576: PPUSH
74577: CALL_OW 272
74581: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74582: LD_ADDR_VAR 0 5
74586: PUSH
74587: LD_VAR 0 1
74591: PPUSH
74592: CALL_OW 251
74596: PPUSH
74597: LD_VAR 0 2
74601: PPUSH
74602: LD_INT 1
74604: PPUSH
74605: CALL_OW 273
74609: ST_TO_ADDR
// if ValidHex ( x , y ) then
74610: LD_VAR 0 4
74614: PPUSH
74615: LD_VAR 0 5
74619: PPUSH
74620: CALL_OW 488
74624: IFFALSE 74645
// ComTurnXY ( unit , x , y ) ;
74626: LD_VAR 0 1
74630: PPUSH
74631: LD_VAR 0 4
74635: PPUSH
74636: LD_VAR 0 5
74640: PPUSH
74641: CALL_OW 118
// end ;
74645: LD_VAR 0 3
74649: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74650: LD_INT 0
74652: PPUSH
74653: PPUSH
// result := false ;
74654: LD_ADDR_VAR 0 3
74658: PUSH
74659: LD_INT 0
74661: ST_TO_ADDR
// if not units then
74662: LD_VAR 0 2
74666: NOT
74667: IFFALSE 74671
// exit ;
74669: GO 74716
// for i in units do
74671: LD_ADDR_VAR 0 4
74675: PUSH
74676: LD_VAR 0 2
74680: PUSH
74681: FOR_IN
74682: IFFALSE 74714
// if See ( side , i ) then
74684: LD_VAR 0 1
74688: PPUSH
74689: LD_VAR 0 4
74693: PPUSH
74694: CALL_OW 292
74698: IFFALSE 74712
// begin result := true ;
74700: LD_ADDR_VAR 0 3
74704: PUSH
74705: LD_INT 1
74707: ST_TO_ADDR
// exit ;
74708: POP
74709: POP
74710: GO 74716
// end ;
74712: GO 74681
74714: POP
74715: POP
// end ;
74716: LD_VAR 0 3
74720: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74721: LD_INT 0
74723: PPUSH
74724: PPUSH
74725: PPUSH
74726: PPUSH
// if not unit or not points then
74727: LD_VAR 0 1
74731: NOT
74732: IFTRUE 74741
74734: PUSH
74735: LD_VAR 0 2
74739: NOT
74740: OR
74741: IFFALSE 74745
// exit ;
74743: GO 74835
// dist := 99999 ;
74745: LD_ADDR_VAR 0 5
74749: PUSH
74750: LD_INT 99999
74752: ST_TO_ADDR
// for i in points do
74753: LD_ADDR_VAR 0 4
74757: PUSH
74758: LD_VAR 0 2
74762: PUSH
74763: FOR_IN
74764: IFFALSE 74833
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74766: LD_ADDR_VAR 0 6
74770: PUSH
74771: LD_VAR 0 1
74775: PPUSH
74776: LD_VAR 0 4
74780: PUSH
74781: LD_INT 1
74783: ARRAY
74784: PPUSH
74785: LD_VAR 0 4
74789: PUSH
74790: LD_INT 2
74792: ARRAY
74793: PPUSH
74794: CALL_OW 297
74798: ST_TO_ADDR
// if tmpDist < dist then
74799: LD_VAR 0 6
74803: PUSH
74804: LD_VAR 0 5
74808: LESS
74809: IFFALSE 74831
// begin result := i ;
74811: LD_ADDR_VAR 0 3
74815: PUSH
74816: LD_VAR 0 4
74820: ST_TO_ADDR
// dist := tmpDist ;
74821: LD_ADDR_VAR 0 5
74825: PUSH
74826: LD_VAR 0 6
74830: ST_TO_ADDR
// end ; end ;
74831: GO 74763
74833: POP
74834: POP
// end ;
74835: LD_VAR 0 3
74839: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74840: LD_INT 0
74842: PPUSH
// uc_side := side ;
74843: LD_ADDR_OWVAR 20
74847: PUSH
74848: LD_VAR 0 1
74852: ST_TO_ADDR
// uc_nation := 3 ;
74853: LD_ADDR_OWVAR 21
74857: PUSH
74858: LD_INT 3
74860: ST_TO_ADDR
// vc_chassis := 25 ;
74861: LD_ADDR_OWVAR 37
74865: PUSH
74866: LD_INT 25
74868: ST_TO_ADDR
// vc_engine := engine_siberite ;
74869: LD_ADDR_OWVAR 39
74873: PUSH
74874: LD_INT 3
74876: ST_TO_ADDR
// vc_control := control_computer ;
74877: LD_ADDR_OWVAR 38
74881: PUSH
74882: LD_INT 3
74884: ST_TO_ADDR
// vc_weapon := 59 ;
74885: LD_ADDR_OWVAR 40
74889: PUSH
74890: LD_INT 59
74892: ST_TO_ADDR
// result := CreateVehicle ;
74893: LD_ADDR_VAR 0 5
74897: PUSH
74898: CALL_OW 45
74902: ST_TO_ADDR
// SetDir ( result , d ) ;
74903: LD_VAR 0 5
74907: PPUSH
74908: LD_VAR 0 4
74912: PPUSH
74913: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74917: LD_VAR 0 5
74921: PPUSH
74922: LD_VAR 0 2
74926: PPUSH
74927: LD_VAR 0 3
74931: PPUSH
74932: LD_INT 0
74934: PPUSH
74935: CALL_OW 48
// end ;
74939: LD_VAR 0 5
74943: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74944: LD_INT 0
74946: PPUSH
74947: PPUSH
74948: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74949: LD_ADDR_VAR 0 2
74953: PUSH
74954: LD_INT 0
74956: PUSH
74957: LD_INT 0
74959: PUSH
74960: LD_INT 0
74962: PUSH
74963: LD_INT 0
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74972: LD_VAR 0 1
74976: NOT
74977: IFTRUE 75010
74979: PUSH
74980: LD_VAR 0 1
74984: PPUSH
74985: CALL_OW 264
74989: PUSH
74990: LD_INT 12
74992: PUSH
74993: LD_INT 51
74995: PUSH
74996: LD_INT 32
74998: PUSH
74999: LD_INT 89
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: IN
75008: NOT
75009: OR
75010: IFFALSE 75014
// exit ;
75012: GO 75112
// for i := 1 to 3 do
75014: LD_ADDR_VAR 0 3
75018: PUSH
75019: DOUBLE
75020: LD_INT 1
75022: DEC
75023: ST_TO_ADDR
75024: LD_INT 3
75026: PUSH
75027: FOR_TO
75028: IFFALSE 75110
// begin tmp := GetCargo ( cargo , i ) ;
75030: LD_ADDR_VAR 0 4
75034: PUSH
75035: LD_VAR 0 1
75039: PPUSH
75040: LD_VAR 0 3
75044: PPUSH
75045: CALL_OW 289
75049: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75050: LD_ADDR_VAR 0 2
75054: PUSH
75055: LD_VAR 0 2
75059: PPUSH
75060: LD_VAR 0 3
75064: PPUSH
75065: LD_VAR 0 4
75069: PPUSH
75070: CALL_OW 1
75074: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75075: LD_ADDR_VAR 0 2
75079: PUSH
75080: LD_VAR 0 2
75084: PPUSH
75085: LD_INT 4
75087: PPUSH
75088: LD_VAR 0 2
75092: PUSH
75093: LD_INT 4
75095: ARRAY
75096: PUSH
75097: LD_VAR 0 4
75101: PLUS
75102: PPUSH
75103: CALL_OW 1
75107: ST_TO_ADDR
// end ;
75108: GO 75027
75110: POP
75111: POP
// end ;
75112: LD_VAR 0 2
75116: RET
// export function Length ( array ) ; begin
75117: LD_INT 0
75119: PPUSH
// result := array + 0 ;
75120: LD_ADDR_VAR 0 2
75124: PUSH
75125: LD_VAR 0 1
75129: PUSH
75130: LD_INT 0
75132: PLUS
75133: ST_TO_ADDR
// end ;
75134: LD_VAR 0 2
75138: RET
// export function PrepareArray ( array ) ; begin
75139: LD_INT 0
75141: PPUSH
// result := array diff 0 ;
75142: LD_ADDR_VAR 0 2
75146: PUSH
75147: LD_VAR 0 1
75151: PUSH
75152: LD_INT 0
75154: DIFF
75155: ST_TO_ADDR
// if not result [ 1 ] then
75156: LD_VAR 0 2
75160: PUSH
75161: LD_INT 1
75163: ARRAY
75164: NOT
75165: IFFALSE 75185
// result := Delete ( result , 1 ) ;
75167: LD_ADDR_VAR 0 2
75171: PUSH
75172: LD_VAR 0 2
75176: PPUSH
75177: LD_INT 1
75179: PPUSH
75180: CALL_OW 3
75184: ST_TO_ADDR
// end ;
75185: LD_VAR 0 2
75189: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75190: LD_INT 0
75192: PPUSH
75193: PPUSH
75194: PPUSH
75195: PPUSH
// sibRocketRange := 25 ;
75196: LD_ADDR_VAR 0 6
75200: PUSH
75201: LD_INT 25
75203: ST_TO_ADDR
// result := false ;
75204: LD_ADDR_VAR 0 4
75208: PUSH
75209: LD_INT 0
75211: ST_TO_ADDR
// for i := 0 to 5 do
75212: LD_ADDR_VAR 0 5
75216: PUSH
75217: DOUBLE
75218: LD_INT 0
75220: DEC
75221: ST_TO_ADDR
75222: LD_INT 5
75224: PUSH
75225: FOR_TO
75226: IFFALSE 75293
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75228: LD_VAR 0 1
75232: PPUSH
75233: LD_VAR 0 5
75237: PPUSH
75238: LD_VAR 0 6
75242: PPUSH
75243: CALL_OW 272
75247: PPUSH
75248: LD_VAR 0 2
75252: PPUSH
75253: LD_VAR 0 5
75257: PPUSH
75258: LD_VAR 0 6
75262: PPUSH
75263: CALL_OW 273
75267: PPUSH
75268: LD_VAR 0 3
75272: PPUSH
75273: CALL_OW 309
75277: IFFALSE 75291
// begin result := true ;
75279: LD_ADDR_VAR 0 4
75283: PUSH
75284: LD_INT 1
75286: ST_TO_ADDR
// exit ;
75287: POP
75288: POP
75289: GO 75295
// end ;
75291: GO 75225
75293: POP
75294: POP
// end ;
75295: LD_VAR 0 4
75299: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75300: LD_INT 0
75302: PPUSH
75303: PPUSH
75304: PPUSH
// if btype = b_depot then
75305: LD_VAR 0 2
75309: PUSH
75310: LD_INT 0
75312: EQUAL
75313: IFFALSE 75325
// begin result := true ;
75315: LD_ADDR_VAR 0 3
75319: PUSH
75320: LD_INT 1
75322: ST_TO_ADDR
// exit ;
75323: GO 75445
// end ; pom := GetBase ( depot ) ;
75325: LD_ADDR_VAR 0 4
75329: PUSH
75330: LD_VAR 0 1
75334: PPUSH
75335: CALL_OW 274
75339: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75340: LD_ADDR_VAR 0 5
75344: PUSH
75345: LD_VAR 0 2
75349: PPUSH
75350: LD_VAR 0 1
75354: PPUSH
75355: CALL_OW 248
75359: PPUSH
75360: CALL_OW 450
75364: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75365: LD_ADDR_VAR 0 3
75369: PUSH
75370: LD_VAR 0 4
75374: PPUSH
75375: LD_INT 1
75377: PPUSH
75378: CALL_OW 275
75382: PUSH
75383: LD_VAR 0 5
75387: PUSH
75388: LD_INT 1
75390: ARRAY
75391: GREATEREQUAL
75392: IFFALSE 75418
75394: PUSH
75395: LD_VAR 0 4
75399: PPUSH
75400: LD_INT 2
75402: PPUSH
75403: CALL_OW 275
75407: PUSH
75408: LD_VAR 0 5
75412: PUSH
75413: LD_INT 2
75415: ARRAY
75416: GREATEREQUAL
75417: AND
75418: IFFALSE 75444
75420: PUSH
75421: LD_VAR 0 4
75425: PPUSH
75426: LD_INT 3
75428: PPUSH
75429: CALL_OW 275
75433: PUSH
75434: LD_VAR 0 5
75438: PUSH
75439: LD_INT 3
75441: ARRAY
75442: GREATEREQUAL
75443: AND
75444: ST_TO_ADDR
// end ;
75445: LD_VAR 0 3
75449: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75450: LD_INT 0
75452: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75453: LD_VAR 0 1
75457: PPUSH
75458: LD_VAR 0 2
75462: PPUSH
75463: LD_INT 0
75465: PPUSH
75466: LD_INT 0
75468: PPUSH
75469: LD_INT 1
75471: PPUSH
75472: LD_INT 0
75474: PPUSH
75475: CALL_OW 587
// end ;
75479: LD_VAR 0 3
75483: RET
// export function CenterOnNow ( unit ) ; begin
75484: LD_INT 0
75486: PPUSH
// result := IsInUnit ( unit ) ;
75487: LD_ADDR_VAR 0 2
75491: PUSH
75492: LD_VAR 0 1
75496: PPUSH
75497: CALL_OW 310
75501: ST_TO_ADDR
// if not result then
75502: LD_VAR 0 2
75506: NOT
75507: IFFALSE 75519
// result := unit ;
75509: LD_ADDR_VAR 0 2
75513: PUSH
75514: LD_VAR 0 1
75518: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75519: LD_VAR 0 1
75523: PPUSH
75524: CALL_OW 87
// end ;
75528: LD_VAR 0 2
75532: RET
// export function ComMoveHex ( unit , hex ) ; begin
75533: LD_INT 0
75535: PPUSH
// if not hex then
75536: LD_VAR 0 2
75540: NOT
75541: IFFALSE 75545
// exit ;
75543: GO 75598
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75545: LD_VAR 0 2
75549: PUSH
75550: LD_INT 1
75552: ARRAY
75553: PPUSH
75554: LD_VAR 0 2
75558: PUSH
75559: LD_INT 2
75561: ARRAY
75562: PPUSH
75563: CALL_OW 428
75567: IFFALSE 75571
// exit ;
75569: GO 75598
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75571: LD_VAR 0 1
75575: PPUSH
75576: LD_VAR 0 2
75580: PUSH
75581: LD_INT 1
75583: ARRAY
75584: PPUSH
75585: LD_VAR 0 2
75589: PUSH
75590: LD_INT 2
75592: ARRAY
75593: PPUSH
75594: CALL_OW 111
// end ;
75598: LD_VAR 0 3
75602: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
75603: LD_INT 0
75605: PPUSH
75606: PPUSH
75607: PPUSH
// if not unit or not enemy then
75608: LD_VAR 0 1
75612: NOT
75613: IFTRUE 75622
75615: PUSH
75616: LD_VAR 0 2
75620: NOT
75621: OR
75622: IFFALSE 75626
// exit ;
75624: GO 75752
// x := GetX ( enemy ) ;
75626: LD_ADDR_VAR 0 4
75630: PUSH
75631: LD_VAR 0 2
75635: PPUSH
75636: CALL_OW 250
75640: ST_TO_ADDR
// y := GetY ( enemy ) ;
75641: LD_ADDR_VAR 0 5
75645: PUSH
75646: LD_VAR 0 2
75650: PPUSH
75651: CALL_OW 251
75655: ST_TO_ADDR
// if ValidHex ( x , y ) then
75656: LD_VAR 0 4
75660: PPUSH
75661: LD_VAR 0 5
75665: PPUSH
75666: CALL_OW 488
75670: IFFALSE 75752
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
75672: LD_VAR 0 2
75676: PPUSH
75677: CALL_OW 247
75681: PUSH
75682: LD_INT 3
75684: PUSH
75685: LD_INT 2
75687: PUSH
75688: EMPTY
75689: LIST
75690: LIST
75691: IN
75692: IFTRUE 75715
75694: PUSH
75695: LD_VAR 0 1
75699: PPUSH
75700: CALL_OW 255
75704: PPUSH
75705: LD_VAR 0 2
75709: PPUSH
75710: CALL_OW 292
75714: OR
75715: IFFALSE 75733
// ComAttackUnit ( unit , enemy ) else
75717: LD_VAR 0 1
75721: PPUSH
75722: LD_VAR 0 2
75726: PPUSH
75727: CALL_OW 115
75731: GO 75752
// ComAgressiveMove ( unit , x , y ) ;
75733: LD_VAR 0 1
75737: PPUSH
75738: LD_VAR 0 4
75742: PPUSH
75743: LD_VAR 0 5
75747: PPUSH
75748: CALL_OW 114
// end ;
75752: LD_VAR 0 3
75756: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
75757: LD_INT 0
75759: PPUSH
75760: PPUSH
75761: PPUSH
// list := AreaToList ( area , 0 ) ;
75762: LD_ADDR_VAR 0 5
75766: PUSH
75767: LD_VAR 0 1
75771: PPUSH
75772: LD_INT 0
75774: PPUSH
75775: CALL_OW 517
75779: ST_TO_ADDR
// if not list then
75780: LD_VAR 0 5
75784: NOT
75785: IFFALSE 75789
// exit ;
75787: GO 75919
// if all then
75789: LD_VAR 0 2
75793: IFFALSE 75881
// begin for i := 1 to list [ 1 ] do
75795: LD_ADDR_VAR 0 4
75799: PUSH
75800: DOUBLE
75801: LD_INT 1
75803: DEC
75804: ST_TO_ADDR
75805: LD_VAR 0 5
75809: PUSH
75810: LD_INT 1
75812: ARRAY
75813: PUSH
75814: FOR_TO
75815: IFFALSE 75877
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
75817: LD_ADDR_VAR 0 3
75821: PUSH
75822: LD_VAR 0 3
75826: PPUSH
75827: LD_VAR 0 3
75831: PUSH
75832: LD_INT 1
75834: PLUS
75835: PPUSH
75836: LD_VAR 0 5
75840: PUSH
75841: LD_INT 1
75843: ARRAY
75844: PUSH
75845: LD_VAR 0 4
75849: ARRAY
75850: PUSH
75851: LD_VAR 0 5
75855: PUSH
75856: LD_INT 2
75858: ARRAY
75859: PUSH
75860: LD_VAR 0 4
75864: ARRAY
75865: PUSH
75866: EMPTY
75867: LIST
75868: LIST
75869: PPUSH
75870: CALL_OW 1
75874: ST_TO_ADDR
75875: GO 75814
75877: POP
75878: POP
// exit ;
75879: GO 75919
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
75881: LD_ADDR_VAR 0 3
75885: PUSH
75886: LD_VAR 0 5
75890: PUSH
75891: LD_INT 1
75893: ARRAY
75894: PUSH
75895: LD_INT 1
75897: ARRAY
75898: PUSH
75899: LD_VAR 0 5
75903: PUSH
75904: LD_INT 2
75906: ARRAY
75907: PUSH
75908: LD_INT 1
75910: ARRAY
75911: PUSH
75912: EMPTY
75913: LIST
75914: LIST
75915: PUSH
75916: EMPTY
75917: LIST
75918: ST_TO_ADDR
// end ;
75919: LD_VAR 0 3
75923: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75924: LD_INT 0
75926: PPUSH
75927: PPUSH
// list := AreaToList ( area , 0 ) ;
75928: LD_ADDR_VAR 0 4
75932: PUSH
75933: LD_VAR 0 1
75937: PPUSH
75938: LD_INT 0
75940: PPUSH
75941: CALL_OW 517
75945: ST_TO_ADDR
// if not list then
75946: LD_VAR 0 4
75950: NOT
75951: IFFALSE 75955
// exit ;
75953: GO 75996
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75955: LD_ADDR_VAR 0 3
75959: PUSH
75960: LD_VAR 0 4
75964: PUSH
75965: LD_INT 1
75967: ARRAY
75968: PUSH
75969: LD_INT 1
75971: ARRAY
75972: PUSH
75973: LD_VAR 0 4
75977: PUSH
75978: LD_INT 2
75980: ARRAY
75981: PUSH
75982: LD_INT 1
75984: ARRAY
75985: PUSH
75986: LD_VAR 0 2
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: LIST
75995: ST_TO_ADDR
// end ;
75996: LD_VAR 0 3
76000: RET
// export function First ( array ) ; begin
76001: LD_INT 0
76003: PPUSH
// if not array then
76004: LD_VAR 0 1
76008: NOT
76009: IFFALSE 76013
// exit ;
76011: GO 76027
// result := array [ 1 ] ;
76013: LD_ADDR_VAR 0 2
76017: PUSH
76018: LD_VAR 0 1
76022: PUSH
76023: LD_INT 1
76025: ARRAY
76026: ST_TO_ADDR
// end ;
76027: LD_VAR 0 2
76031: RET
// export function Last ( array ) ; begin
76032: LD_INT 0
76034: PPUSH
// if not array then
76035: LD_VAR 0 1
76039: NOT
76040: IFFALSE 76044
// exit ;
76042: GO 76060
// result := array [ array ] ;
76044: LD_ADDR_VAR 0 2
76048: PUSH
76049: LD_VAR 0 1
76053: PUSH
76054: LD_VAR 0 1
76058: ARRAY
76059: ST_TO_ADDR
// end ;
76060: LD_VAR 0 2
76064: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76065: LD_INT 0
76067: PPUSH
76068: PPUSH
// result := [ ] ;
76069: LD_ADDR_VAR 0 5
76073: PUSH
76074: EMPTY
76075: ST_TO_ADDR
// if not array then
76076: LD_VAR 0 1
76080: NOT
76081: IFFALSE 76085
// exit ;
76083: GO 76197
// for i := 1 to array do
76085: LD_ADDR_VAR 0 6
76089: PUSH
76090: DOUBLE
76091: LD_INT 1
76093: DEC
76094: ST_TO_ADDR
76095: LD_VAR 0 1
76099: PUSH
76100: FOR_TO
76101: IFFALSE 76195
// if array [ i ] [ index ] = value then
76103: LD_VAR 0 1
76107: PUSH
76108: LD_VAR 0 6
76112: ARRAY
76113: PUSH
76114: LD_VAR 0 2
76118: ARRAY
76119: PUSH
76120: LD_VAR 0 3
76124: EQUAL
76125: IFFALSE 76193
// begin if indexColumn then
76127: LD_VAR 0 4
76131: IFFALSE 76167
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76133: LD_ADDR_VAR 0 5
76137: PUSH
76138: LD_VAR 0 5
76142: PPUSH
76143: LD_VAR 0 1
76147: PUSH
76148: LD_VAR 0 6
76152: ARRAY
76153: PUSH
76154: LD_VAR 0 4
76158: ARRAY
76159: PPUSH
76160: CALL 71205 0 2
76164: ST_TO_ADDR
76165: GO 76193
// result := Join ( result , array [ i ] ) ;
76167: LD_ADDR_VAR 0 5
76171: PUSH
76172: LD_VAR 0 5
76176: PPUSH
76177: LD_VAR 0 1
76181: PUSH
76182: LD_VAR 0 6
76186: ARRAY
76187: PPUSH
76188: CALL 71205 0 2
76192: ST_TO_ADDR
// end ;
76193: GO 76100
76195: POP
76196: POP
// end ;
76197: LD_VAR 0 5
76201: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76202: LD_INT 0
76204: PPUSH
// if not vehicles or not parkingPoint then
76205: LD_VAR 0 1
76209: NOT
76210: IFTRUE 76219
76212: PUSH
76213: LD_VAR 0 2
76217: NOT
76218: OR
76219: IFFALSE 76223
// exit ;
76221: GO 76321
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76223: LD_ADDR_VAR 0 1
76227: PUSH
76228: LD_VAR 0 1
76232: PPUSH
76233: LD_INT 50
76235: PUSH
76236: EMPTY
76237: LIST
76238: PUSH
76239: LD_INT 3
76241: PUSH
76242: LD_INT 92
76244: PUSH
76245: LD_VAR 0 2
76249: PUSH
76250: LD_INT 1
76252: ARRAY
76253: PUSH
76254: LD_VAR 0 2
76258: PUSH
76259: LD_INT 2
76261: ARRAY
76262: PUSH
76263: LD_INT 8
76265: PUSH
76266: EMPTY
76267: LIST
76268: LIST
76269: LIST
76270: LIST
76271: PUSH
76272: EMPTY
76273: LIST
76274: LIST
76275: PUSH
76276: EMPTY
76277: LIST
76278: LIST
76279: PPUSH
76280: CALL_OW 72
76284: ST_TO_ADDR
// if not vehicles then
76285: LD_VAR 0 1
76289: NOT
76290: IFFALSE 76294
// exit ;
76292: GO 76321
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76294: LD_VAR 0 1
76298: PPUSH
76299: LD_VAR 0 2
76303: PUSH
76304: LD_INT 1
76306: ARRAY
76307: PPUSH
76308: LD_VAR 0 2
76312: PUSH
76313: LD_INT 2
76315: ARRAY
76316: PPUSH
76317: CALL_OW 111
// end ;
76321: LD_VAR 0 3
76325: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76326: LD_INT 0
76328: PPUSH
76329: PPUSH
76330: PPUSH
// if not side or not area then
76331: LD_VAR 0 1
76335: NOT
76336: IFTRUE 76345
76338: PUSH
76339: LD_VAR 0 2
76343: NOT
76344: OR
76345: IFFALSE 76349
// exit ;
76347: GO 76468
// tmp := AreaToList ( area , 0 ) ;
76349: LD_ADDR_VAR 0 5
76353: PUSH
76354: LD_VAR 0 2
76358: PPUSH
76359: LD_INT 0
76361: PPUSH
76362: CALL_OW 517
76366: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76367: LD_ADDR_VAR 0 4
76371: PUSH
76372: DOUBLE
76373: LD_INT 1
76375: DEC
76376: ST_TO_ADDR
76377: LD_VAR 0 5
76381: PUSH
76382: LD_INT 1
76384: ARRAY
76385: PUSH
76386: FOR_TO
76387: IFFALSE 76466
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76389: LD_VAR 0 5
76393: PUSH
76394: LD_INT 1
76396: ARRAY
76397: PUSH
76398: LD_VAR 0 4
76402: ARRAY
76403: PPUSH
76404: LD_VAR 0 5
76408: PUSH
76409: LD_INT 2
76411: ARRAY
76412: PUSH
76413: LD_VAR 0 4
76417: ARRAY
76418: PPUSH
76419: CALL_OW 351
76423: IFFALSE 76464
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76425: LD_VAR 0 5
76429: PUSH
76430: LD_INT 1
76432: ARRAY
76433: PUSH
76434: LD_VAR 0 4
76438: ARRAY
76439: PPUSH
76440: LD_VAR 0 5
76444: PUSH
76445: LD_INT 2
76447: ARRAY
76448: PUSH
76449: LD_VAR 0 4
76453: ARRAY
76454: PPUSH
76455: LD_VAR 0 1
76459: PPUSH
76460: CALL_OW 244
// end ;
76464: GO 76386
76466: POP
76467: POP
// end ;
76468: LD_VAR 0 3
76472: RET
// export function UniqueArray ( array ) ; var i ; begin
76473: LD_INT 0
76475: PPUSH
76476: PPUSH
// result := [ ] ;
76477: LD_ADDR_VAR 0 2
76481: PUSH
76482: EMPTY
76483: ST_TO_ADDR
// if not array then
76484: LD_VAR 0 1
76488: NOT
76489: IFFALSE 76493
// exit ;
76491: GO 76554
// for i := 1 to array do
76493: LD_ADDR_VAR 0 3
76497: PUSH
76498: DOUBLE
76499: LD_INT 1
76501: DEC
76502: ST_TO_ADDR
76503: LD_VAR 0 1
76507: PUSH
76508: FOR_TO
76509: IFFALSE 76552
// if not array [ i ] in result then
76511: LD_VAR 0 1
76515: PUSH
76516: LD_VAR 0 3
76520: ARRAY
76521: PUSH
76522: LD_VAR 0 2
76526: IN
76527: NOT
76528: IFFALSE 76550
// result := Join ( result , i ) ;
76530: LD_ADDR_VAR 0 2
76534: PUSH
76535: LD_VAR 0 2
76539: PPUSH
76540: LD_VAR 0 3
76544: PPUSH
76545: CALL 71205 0 2
76549: ST_TO_ADDR
76550: GO 76508
76552: POP
76553: POP
// end ; end_of_file
76554: LD_VAR 0 2
76558: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76559: LD_VAR 0 1
76563: PUSH
76564: LD_INT 200
76566: DOUBLE
76567: GREATEREQUAL
76568: IFFALSE 76576
76570: LD_INT 299
76572: DOUBLE
76573: LESSEQUAL
76574: IFTRUE 76578
76576: GO 76610
76578: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76579: LD_VAR 0 1
76583: PPUSH
76584: LD_VAR 0 2
76588: PPUSH
76589: LD_VAR 0 3
76593: PPUSH
76594: LD_VAR 0 4
76598: PPUSH
76599: LD_VAR 0 5
76603: PPUSH
76604: CALL 28316 0 5
76608: GO 76687
76610: LD_INT 300
76612: DOUBLE
76613: GREATEREQUAL
76614: IFFALSE 76622
76616: LD_INT 399
76618: DOUBLE
76619: LESSEQUAL
76620: IFTRUE 76624
76622: GO 76686
76624: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76625: LD_VAR 0 1
76629: PPUSH
76630: LD_VAR 0 2
76634: PPUSH
76635: LD_VAR 0 3
76639: PPUSH
76640: LD_VAR 0 4
76644: PPUSH
76645: LD_VAR 0 5
76649: PPUSH
76650: LD_VAR 0 6
76654: PPUSH
76655: LD_VAR 0 7
76659: PPUSH
76660: LD_VAR 0 8
76664: PPUSH
76665: LD_VAR 0 9
76669: PPUSH
76670: LD_VAR 0 10
76674: PPUSH
76675: LD_VAR 0 11
76679: PPUSH
76680: CALL 24200 0 11
76684: GO 76687
76686: POP
// end ;
76687: PPOPN 11
76689: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76690: LD_VAR 0 1
76694: PPUSH
76695: LD_VAR 0 2
76699: PPUSH
76700: LD_VAR 0 3
76704: PPUSH
76705: LD_VAR 0 4
76709: PPUSH
76710: LD_VAR 0 5
76714: PPUSH
76715: CALL 27697 0 5
// end ; end_of_file
76719: PPOPN 5
76721: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76722: LD_VAR 0 1
76726: PPUSH
76727: LD_VAR 0 2
76731: PPUSH
76732: LD_VAR 0 3
76736: PPUSH
76737: LD_VAR 0 4
76741: PPUSH
76742: LD_VAR 0 5
76746: PPUSH
76747: LD_VAR 0 6
76751: PPUSH
76752: CALL 11740 0 6
// end ;
76756: PPOPN 6
76758: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76759: LD_INT 0
76761: PPUSH
// begin if not units then
76762: LD_VAR 0 1
76766: NOT
76767: IFFALSE 76771
// exit ;
76769: GO 76771
// end ;
76771: PPOPN 7
76773: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76774: CALL 11627 0 0
// end ;
76778: PPOPN 1
76780: END
