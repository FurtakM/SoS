// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10844 0 0
// PrepareAmerican ;
  19: CALL 245 0 0
// PrepareRussian ;
  23: CALL 1529 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6486 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := false ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// end ;
 104: LD_VAR 0 1
 108: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 109: LD_INT 22
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: LD_INT 30
 121: PUSH
 122: LD_INT 33
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: PPUSH
 133: CALL_OW 69
 137: PUSH
 138: LD_INT 15
 140: GREATEREQUAL
 141: IFFALSE 153
 143: GO 145
 145: DISABLE
// SetAchievement ( ACH_FORT ) ;
 146: LD_STRING ACH_FORT
 148: PPUSH
 149: CALL_OW 543
 153: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 154: LD_INT 22
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 25
 166: PUSH
 167: LD_INT 12
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: PPUSH
 178: CALL_OW 69
 182: PUSH
 183: LD_INT 0
 185: EQUAL
 186: IFFALSE 198
 188: GO 190
 190: DISABLE
// SetAchievement ( ACH_APE ) ;
 191: LD_STRING ACH_APE
 193: PPUSH
 194: CALL_OW 543
 198: END
// every 0 0$1 trigger killCounter >= 20 do
 199: LD_EXP 5
 203: PUSH
 204: LD_INT 20
 206: GREATEREQUAL
 207: IFFALSE 219
 209: GO 211
 211: DISABLE
// SetAchievement ( ACH_DOUBLE ) ;
 212: LD_STRING ACH_DOUBLE
 214: PPUSH
 215: CALL_OW 543
 219: END
// every 0 0$1 trigger IsInArea ( JMMVeh , kappaBaseArea ) do
 220: LD_EXP 9
 224: PPUSH
 225: LD_INT 15
 227: PPUSH
 228: CALL_OW 308
 232: IFFALSE 244
 234: GO 236
 236: DISABLE
// SetAchievement ( ACH_AMASHA ) ; end_of_file
 237: LD_STRING ACH_AMASHA
 239: PPUSH
 240: CALL_OW 543
 244: END
// export JMM , JMMVeh , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 245: LD_INT 0
 247: PPUSH
 248: PPUSH
 249: PPUSH
 250: PPUSH
 251: PPUSH
// uc_side := 1 ;
 252: LD_ADDR_OWVAR 20
 256: PUSH
 257: LD_INT 1
 259: ST_TO_ADDR
// uc_nation := 1 ;
 260: LD_ADDR_OWVAR 21
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 268: LD_INT 48
 270: PPUSH
 271: LD_STRING deltakappa
 273: PPUSH
 274: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 278: LD_INT 48
 280: PPUSH
 281: CALL_OW 274
 285: PPUSH
 286: LD_INT 1
 288: PPUSH
 289: LD_INT 2000
 291: PUSH
 292: LD_INT 1600
 294: PUSH
 295: LD_INT 1200
 297: PUSH
 298: LD_INT 900
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: LIST
 305: LIST
 306: PUSH
 307: LD_OWVAR 67
 311: ARRAY
 312: PPUSH
 313: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 317: LD_INT 48
 319: PPUSH
 320: CALL_OW 274
 324: PPUSH
 325: LD_INT 2
 327: PPUSH
 328: LD_INT 20
 330: PPUSH
 331: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 335: LD_INT 48
 337: PPUSH
 338: CALL_OW 274
 342: PPUSH
 343: LD_INT 3
 345: PPUSH
 346: LD_INT 100
 348: PPUSH
 349: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 353: LD_ADDR_EXP 8
 357: PUSH
 358: LD_STRING JMM
 360: PPUSH
 361: LD_EXP 1
 365: NOT
 366: PPUSH
 367: LD_STRING 13f_
 369: PPUSH
 370: CALL 31502 0 3
 374: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 375: LD_EXP 8
 379: PPUSH
 380: LD_INT 1
 382: PPUSH
 383: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 387: LD_INT 5
 389: PUSH
 390: LD_INT 5
 392: PUSH
 393: LD_INT 3
 395: PUSH
 396: LD_INT 3
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: PUSH
 405: LD_OWVAR 67
 409: ARRAY
 410: PPUSH
 411: LD_INT 3
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: LD_INT 9
 419: PUSH
 420: LD_INT 9
 422: PUSH
 423: LD_INT 5
 425: PUSH
 426: LD_INT 5
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_OWVAR 67
 439: ARRAY
 440: PPUSH
 441: LD_INT 100
 443: PPUSH
 444: CALL 36342 0 5
// JMMVeh := CreateVehicle ;
 448: LD_ADDR_EXP 9
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// SetDir ( JMMVeh , 1 ) ;
 458: LD_EXP 9
 462: PPUSH
 463: LD_INT 1
 465: PPUSH
 466: CALL_OW 233
// PlaceUnitXY ( JMMVeh , 6 , 5 , false ) ;
 470: LD_EXP 9
 474: PPUSH
 475: LD_INT 6
 477: PPUSH
 478: LD_INT 5
 480: PPUSH
 481: LD_INT 0
 483: PPUSH
 484: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 488: LD_EXP 8
 492: PPUSH
 493: LD_EXP 9
 497: PPUSH
 498: CALL_OW 52
// SetMark ( JMMVeh , - 1 ) ;
 502: LD_EXP 9
 506: PPUSH
 507: LD_INT 1
 509: NEG
 510: PPUSH
 511: CALL_OW 242
// ComMoveXY ( JMMVeh , 21 , 8 ) ;
 515: LD_EXP 9
 519: PPUSH
 520: LD_INT 21
 522: PPUSH
 523: LD_INT 8
 525: PPUSH
 526: CALL_OW 111
// uc_side := 4 ;
 530: LD_ADDR_OWVAR 20
 534: PUSH
 535: LD_INT 4
 537: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 538: LD_ADDR_EXP 13
 542: PUSH
 543: LD_STRING Powell
 545: PPUSH
 546: LD_INT 0
 548: PPUSH
 549: LD_STRING 
 551: PPUSH
 552: CALL 31502 0 3
 556: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 557: LD_ADDR_EXP 10
 561: PUSH
 562: LD_STRING Joan
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_STRING 10c_
 573: PPUSH
 574: CALL 31502 0 3
 578: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 579: LD_ADDR_EXP 11
 583: PUSH
 584: LD_STRING Lisa
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_STRING 13s_
 595: PPUSH
 596: CALL 31502 0 3
 600: ST_TO_ADDR
// if Joan then
 601: LD_EXP 10
 605: IFFALSE 644
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 607: LD_EXP 10
 611: PPUSH
 612: LD_INT 4
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 622: LD_EXP 10
 626: PPUSH
 627: LD_INT 4
 629: PPUSH
 630: CALL_OW 336
// JMMGirl = 1 ;
 634: LD_ADDR_EXP 2
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// end else
 642: GO 735
// if Lisa then
 644: LD_EXP 11
 648: IFFALSE 687
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 650: LD_EXP 11
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_INT 0
 660: PPUSH
 661: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 665: LD_EXP 11
 669: PPUSH
 670: LD_INT 1
 672: PPUSH
 673: CALL_OW 336
// JMMGirl := 2 ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_INT 2
 684: ST_TO_ADDR
// end else
 685: GO 735
// begin Connie := NewCharacter ( Coonie ) ;
 687: LD_ADDR_EXP 12
 691: PUSH
 692: LD_STRING Coonie
 694: PPUSH
 695: CALL_OW 25
 699: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 700: LD_EXP 12
 704: PPUSH
 705: LD_INT 4
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 715: LD_EXP 12
 719: PPUSH
 720: LD_INT 3
 722: PPUSH
 723: CALL_OW 336
// JMMGirl := 3 ;
 727: LD_ADDR_EXP 2
 731: PUSH
 732: LD_INT 3
 734: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 735: LD_ADDR_VAR 0 2
 739: PUSH
 740: DOUBLE
 741: LD_INT 1
 743: DEC
 744: ST_TO_ADDR
 745: LD_INT 4
 747: PUSH
 748: LD_INT 3
 750: PUSH
 751: LD_INT 3
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: PUSH
 763: LD_OWVAR 67
 767: ARRAY
 768: PUSH
 769: FOR_TO
 770: IFFALSE 924
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 772: LD_INT 4
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: LD_INT 2
 780: PUSH
 781: LD_INT 3
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 4
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: LD_INT 9
 812: PUSH
 813: LD_INT 7
 815: PUSH
 816: LD_INT 4
 818: PUSH
 819: LD_INT 5
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: PUSH
 828: LD_VAR 0 2
 832: PUSH
 833: LD_INT 4
 835: MOD
 836: PUSH
 837: LD_INT 1
 839: PLUS
 840: ARRAY
 841: PPUSH
 842: LD_INT 33
 844: PPUSH
 845: LD_INT 55
 847: PPUSH
 848: CALL_OW 12
 852: PPUSH
 853: CALL 36342 0 5
// veh := CreateVehicle ;
 857: LD_ADDR_VAR 0 4
 861: PUSH
 862: CALL_OW 45
 866: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 867: LD_VAR 0 4
 871: PPUSH
 872: LD_INT 0
 874: PPUSH
 875: LD_INT 5
 877: PPUSH
 878: CALL_OW 12
 882: PPUSH
 883: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 887: LD_VAR 0 4
 891: PPUSH
 892: LD_INT 500
 894: PPUSH
 895: LD_INT 950
 897: PPUSH
 898: CALL_OW 12
 902: PPUSH
 903: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 907: LD_VAR 0 4
 911: PPUSH
 912: LD_INT 5
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// end ;
 922: GO 769
 924: POP
 925: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: DOUBLE
 932: LD_INT 1
 934: DEC
 935: ST_TO_ADDR
 936: LD_INT 3
 938: PUSH
 939: LD_INT 3
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: LD_INT 2
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_OWVAR 67
 958: ARRAY
 959: PUSH
 960: FOR_TO
 961: IFFALSE 1083
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 963: LD_INT 3
 965: PUSH
 966: LD_INT 2
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 2
 980: MOD
 981: PUSH
 982: LD_INT 1
 984: PLUS
 985: ARRAY
 986: PPUSH
 987: LD_INT 1
 989: PPUSH
 990: LD_INT 3
 992: PPUSH
 993: LD_INT 9
 995: PUSH
 996: LD_INT 5
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PUSH
1003: LD_VAR 0 2
1007: PUSH
1008: LD_INT 2
1010: MOD
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: ARRAY
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 36342 0 5
// veh := CreateVehicle ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: CALL_OW 45
1033: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1034: LD_VAR 0 4
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: LD_INT 5
1044: PPUSH
1045: CALL_OW 12
1049: PPUSH
1050: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1054: LD_VAR 0 4
1058: PPUSH
1059: LD_INT 1000
1061: PPUSH
1062: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1066: LD_VAR 0 4
1070: PPUSH
1071: LD_INT 17
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 960
1083: POP
1084: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_INT 3
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_OWVAR 67
1117: ARRAY
1118: PUSH
1119: FOR_TO
1120: IFFALSE 1168
// begin PrepareApeman ( 1 ) ;
1122: LD_INT 1
1124: PPUSH
1125: CALL 65075 0 1
// uc_side := 4 ;
1129: LD_ADDR_OWVAR 20
1133: PUSH
1134: LD_INT 4
1136: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1137: LD_ADDR_OWVAR 28
1141: PUSH
1142: LD_INT 16
1144: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1145: CALL_OW 44
1149: PPUSH
1150: LD_INT 84
1152: PPUSH
1153: LD_INT 127
1155: PPUSH
1156: LD_INT 5
1158: PPUSH
1159: LD_INT 0
1161: PPUSH
1162: CALL_OW 50
// end ;
1166: GO 1119
1168: POP
1169: POP
// uc_side := 4 ;
1170: LD_ADDR_OWVAR 20
1174: PUSH
1175: LD_INT 4
1177: ST_TO_ADDR
// uc_nation := 1 ;
1178: LD_ADDR_OWVAR 21
1182: PUSH
1183: LD_INT 1
1185: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1186: LD_INT 2
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 1
1194: PPUSH
1195: LD_INT 12
1197: PPUSH
1198: LD_INT 100
1200: PPUSH
1201: CALL 36342 0 5
// veh := CreateVehicle ;
1205: LD_ADDR_VAR 0 4
1209: PUSH
1210: CALL_OW 45
1214: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1215: LD_VAR 0 4
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: LD_INT 100
1225: PPUSH
1226: CALL_OW 290
// SetLives ( veh , 450 ) ;
1230: LD_VAR 0 4
1234: PPUSH
1235: LD_INT 450
1237: PPUSH
1238: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1242: LD_VAR 0 4
1246: PPUSH
1247: LD_INT 122
1249: PPUSH
1250: LD_INT 118
1252: PPUSH
1253: LD_INT 4
1255: PPUSH
1256: LD_INT 0
1258: PPUSH
1259: CALL 70934 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1276: CALL_OW 44
1280: PPUSH
1281: LD_INT 124
1283: PPUSH
1284: LD_INT 120
1286: PPUSH
1287: LD_INT 1
1289: PPUSH
1290: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_INT 18
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 517
1309: ST_TO_ADDR
// for i := 1 to 4 do
1310: LD_ADDR_VAR 0 2
1314: PUSH
1315: DOUBLE
1316: LD_INT 1
1318: DEC
1319: ST_TO_ADDR
1320: LD_INT 4
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1432
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1326: LD_INT 1
1328: PPUSH
1329: LD_INT 1
1331: PUSH
1332: LD_INT 3
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 1
1341: PPUSH
1342: LD_INT 2
1344: PPUSH
1345: CALL_OW 12
1349: ARRAY
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 380
// un := CreateHuman ;
1358: LD_ADDR_VAR 0 3
1362: PUSH
1363: CALL_OW 44
1367: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1368: LD_VAR 0 3
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 5
1378: PPUSH
1379: CALL_OW 12
1383: PPUSH
1384: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1388: LD_VAR 0 3
1392: PPUSH
1393: LD_VAR 0 5
1397: PUSH
1398: LD_INT 1
1400: ARRAY
1401: PUSH
1402: LD_VAR 0 2
1406: ARRAY
1407: PPUSH
1408: LD_VAR 0 5
1412: PUSH
1413: LD_INT 2
1415: ARRAY
1416: PUSH
1417: LD_VAR 0 2
1421: ARRAY
1422: PPUSH
1423: LD_INT 1
1425: PPUSH
1426: CALL_OW 601
// end ;
1430: GO 1323
1432: POP
1433: POP
// end ;
1434: LD_VAR 0 1
1438: RET
// export function ChangeSideKappaBase ; begin
1439: LD_INT 0
1441: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1442: LD_INT 70
1444: PPUSH
1445: LD_INT 138
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: LD_INT 80
1453: NEG
1454: PPUSH
1455: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1459: LD_INT 70
1461: PPUSH
1462: LD_INT 138
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1472: LD_INT 147
1474: PPUSH
1475: LD_INT 122
1477: PPUSH
1478: LD_INT 1
1480: PPUSH
1481: LD_INT 40
1483: NEG
1484: PPUSH
1485: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1489: LD_INT 147
1491: PPUSH
1492: LD_INT 122
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1502: LD_INT 22
1504: PUSH
1505: LD_INT 4
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: PPUSH
1517: LD_INT 1
1519: PPUSH
1520: CALL_OW 235
// end ; end_of_file
1524: LD_VAR 0 1
1528: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1529: LD_INT 0
1531: PPUSH
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side := 3 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 3
1544: ST_TO_ADDR
// uc_nation := 3 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1553: LD_ADDR_EXP 15
1557: PUSH
1558: LD_INT 8
1560: PUSH
1561: LD_INT 11
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: LD_INT 17
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_OWVAR 67
1580: ARRAY
1581: ST_TO_ADDR
// ruMobile := [ ] ;
1582: LD_ADDR_EXP 16
1586: PUSH
1587: EMPTY
1588: ST_TO_ADDR
// ruBuildList := [ ] ;
1589: LD_ADDR_EXP 17
1593: PUSH
1594: EMPTY
1595: ST_TO_ADDR
// ruAttackers := [ ] ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: EMPTY
1602: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1603: LD_ADDR_EXP 19
1607: PUSH
1608: LD_INT 3
1610: PPUSH
1611: LD_INT 3
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: CALL 31565 0 3
1621: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1622: LD_ADDR_VAR 0 6
1626: PUSH
1627: LD_INT 43
1629: PUSH
1630: LD_INT 46
1632: PUSH
1633: LD_INT 45
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1641: LD_ADDR_EXP 20
1645: PUSH
1646: LD_INT 46
1648: PUSH
1649: LD_INT 70
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 121
1658: PUSH
1659: LD_INT 95
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 68
1668: PUSH
1669: LD_INT 65
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: ST_TO_ADDR
// if not russianRocketsDisabled then
1681: LD_EXP 6
1685: NOT
1686: IFFALSE 1702
// weapons := weapons ^ ru_rocket ;
1688: LD_ADDR_VAR 0 6
1692: PUSH
1693: LD_VAR 0 6
1697: PUSH
1698: LD_INT 47
1700: ADD
1701: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1702: LD_ADDR_EXP 14
1706: PUSH
1707: LD_STRING Eisenstein
1709: PPUSH
1710: CALL_OW 25
1714: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1715: LD_EXP 14
1719: PPUSH
1720: LD_INT 22
1722: PPUSH
1723: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 1250 , 2500 , 3500 , 5000 ] [ Difficulty ] ) ;
1727: LD_INT 22
1729: PPUSH
1730: CALL_OW 274
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 1250
1740: PUSH
1741: LD_INT 2500
1743: PUSH
1744: LD_INT 3500
1746: PUSH
1747: LD_INT 5000
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_OWVAR 67
1760: ARRAY
1761: PPUSH
1762: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1766: LD_INT 22
1768: PPUSH
1769: CALL_OW 274
1773: PPUSH
1774: LD_INT 2
1776: PPUSH
1777: LD_INT 600
1779: PPUSH
1780: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1784: LD_INT 22
1786: PPUSH
1787: CALL_OW 274
1791: PPUSH
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 100
1797: PPUSH
1798: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1802: LD_INT 116
1804: PPUSH
1805: LD_INT 46
1807: PPUSH
1808: LD_INT 70
1810: PPUSH
1811: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1815: LD_ADDR_VAR 0 2
1819: PUSH
1820: LD_INT 22
1822: PUSH
1823: LD_INT 3
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 21
1832: PUSH
1833: LD_INT 3
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PPUSH
1844: CALL_OW 69
1848: PUSH
1849: FOR_IN
1850: IFFALSE 1872
// SetBLevel ( i , 6 + Difficulty ) ;
1852: LD_VAR 0 2
1856: PPUSH
1857: LD_INT 6
1859: PUSH
1860: LD_OWVAR 67
1864: PLUS
1865: PPUSH
1866: CALL_OW 241
1870: GO 1849
1872: POP
1873: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: LD_INT 22
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 30
1894: PUSH
1895: LD_INT 32
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 30
1904: PUSH
1905: LD_INT 33
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: ST_TO_ADDR
// if russianRocketsDisabled then
1926: LD_EXP 6
1930: IFFALSE 2006
// begin ruTechList := ruTechList diff tech_advrocket ;
1932: LD_ADDR_EXP 19
1936: PUSH
1937: LD_EXP 19
1941: PUSH
1942: LD_INT 71
1944: DIFF
1945: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1946: LD_ADDR_VAR 0 2
1950: PUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 35
1958: PUSH
1959: LD_INT 47
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PPUSH
1966: CALL_OW 72
1970: PUSH
1971: FOR_IN
1972: IFFALSE 2004
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_VAR 0 6
1983: PUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_VAR 0 6
1991: PPUSH
1992: CALL_OW 12
1996: ARRAY
1997: PPUSH
1998: CALL_OW 431
2002: GO 1971
2004: POP
2005: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2006: LD_ADDR_VAR 0 2
2010: PUSH
2011: LD_INT 22
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 30
2023: PUSH
2024: LD_INT 32
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PPUSH
2035: CALL_OW 69
2039: PUSH
2040: FOR_IN
2041: IFFALSE 2090
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2043: LD_INT 0
2045: PPUSH
2046: LD_INT 5
2048: PUSH
2049: LD_INT 6
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: LD_INT 8
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: LD_OWVAR 67
2068: ARRAY
2069: PPUSH
2070: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2074: CALL_OW 44
2078: PPUSH
2079: LD_VAR 0 2
2083: PPUSH
2084: CALL_OW 52
// end ;
2088: GO 2040
2090: POP
2091: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2092: LD_ADDR_VAR 0 2
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 3
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 69
2125: PUSH
2126: FOR_IN
2127: IFFALSE 2261
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: DOUBLE
2135: LD_INT 1
2137: DEC
2138: ST_TO_ADDR
2139: LD_INT 2
2141: PUSH
2142: LD_INT 2
2144: PUSH
2145: LD_INT 3
2147: PUSH
2148: LD_INT 3
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: PUSH
2157: LD_OWVAR 67
2161: ARRAY
2162: PUSH
2163: FOR_TO
2164: IFFALSE 2257
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2166: LD_INT 0
2168: PPUSH
2169: LD_INT 5
2171: PUSH
2172: LD_INT 6
2174: PUSH
2175: LD_INT 7
2177: PUSH
2178: LD_INT 8
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_OWVAR 67
2191: ARRAY
2192: PPUSH
2193: CALL_OW 381
// un := CreateHuman ;
2197: LD_ADDR_VAR 0 5
2201: PUSH
2202: CALL_OW 44
2206: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2207: LD_VAR 0 5
2211: PPUSH
2212: LD_VAR 0 2
2216: PPUSH
2217: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_INT 9
2228: PPUSH
2229: CALL_OW 336
// if j = 2 then
2233: LD_VAR 0 3
2237: PUSH
2238: LD_INT 2
2240: EQUAL
2241: IFFALSE 2255
// SetUnitAttackType ( un , 3 ) ;
2243: LD_VAR 0 5
2247: PPUSH
2248: LD_INT 3
2250: PPUSH
2251: CALL_OW 603
// end ;
2255: GO 2163
2257: POP
2258: POP
// end ;
2259: GO 2126
2261: POP
2262: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2263: LD_ADDR_VAR 0 2
2267: PUSH
2268: DOUBLE
2269: LD_INT 1
2271: DEC
2272: ST_TO_ADDR
2273: LD_INT 5
2275: PUSH
2276: LD_INT 6
2278: PUSH
2279: LD_INT 6
2281: PUSH
2282: LD_INT 6
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_OWVAR 67
2295: ARRAY
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2345
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2300: LD_INT 0
2302: PPUSH
2303: LD_INT 6
2305: PUSH
2306: LD_INT 7
2308: PUSH
2309: LD_INT 9
2311: PUSH
2312: LD_INT 10
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: PUSH
2321: LD_OWVAR 67
2325: ARRAY
2326: PPUSH
2327: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2331: CALL_OW 44
2335: PPUSH
2336: LD_INT 22
2338: PPUSH
2339: CALL_OW 52
// end ;
2343: GO 2297
2345: POP
2346: POP
// for i := 1 to 2 do
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: DOUBLE
2353: LD_INT 1
2355: DEC
2356: ST_TO_ADDR
2357: LD_INT 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2441
// for j := 1 to 6 do
2363: LD_ADDR_VAR 0 3
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_INT 6
2375: PUSH
2376: FOR_TO
2377: IFFALSE 2437
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2379: LD_INT 0
2381: PPUSH
2382: LD_INT 6
2384: PUSH
2385: LD_INT 7
2387: PUSH
2388: LD_INT 9
2390: PUSH
2391: LD_INT 10
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: PUSH
2400: LD_OWVAR 67
2404: ARRAY
2405: PPUSH
2406: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2410: CALL_OW 44
2414: PPUSH
2415: LD_INT 1
2417: PUSH
2418: LD_INT 40
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: LD_VAR 0 2
2429: ARRAY
2430: PPUSH
2431: CALL_OW 52
// end ;
2435: GO 2376
2437: POP
2438: POP
2439: GO 2360
2441: POP
2442: POP
// for i := 1 to 4 do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: DOUBLE
2449: LD_INT 1
2451: DEC
2452: ST_TO_ADDR
2453: LD_INT 4
2455: PUSH
2456: FOR_TO
2457: IFFALSE 2504
// begin PrepareScientist ( false , 6 ) ;
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 6
2464: PPUSH
2465: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2469: CALL_OW 44
2473: PPUSH
2474: LD_INT 14
2476: PUSH
2477: LD_INT 15
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 2
2491: MOD
2492: PUSH
2493: LD_INT 1
2495: PLUS
2496: ARRAY
2497: PPUSH
2498: CALL_OW 52
// end ;
2502: GO 2456
2504: POP
2505: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2506: LD_INT 22
2508: PPUSH
2509: LD_INT 3
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: LD_INT 51
2517: PPUSH
2518: LD_INT 100
2520: PPUSH
2521: CALL 36342 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2525: CALL_OW 45
2529: PPUSH
2530: LD_INT 116
2532: PPUSH
2533: LD_INT 58
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: CALL_OW 50
// for i := 1 to 2 do
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: DOUBLE
2552: LD_INT 1
2554: DEC
2555: ST_TO_ADDR
2556: LD_INT 2
2558: PUSH
2559: FOR_TO
2560: IFFALSE 2604
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2562: LD_INT 22
2564: PPUSH
2565: LD_INT 3
2567: PPUSH
2568: LD_INT 3
2570: PPUSH
2571: LD_INT 52
2573: PPUSH
2574: LD_INT 100
2576: PPUSH
2577: CALL 36342 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2581: CALL_OW 45
2585: PPUSH
2586: LD_INT 111
2588: PPUSH
2589: LD_INT 58
2591: PPUSH
2592: LD_INT 4
2594: PPUSH
2595: LD_INT 0
2597: PPUSH
2598: CALL_OW 50
// end ;
2602: GO 2559
2604: POP
2605: POP
// for i := 1 to 4 do
2606: LD_ADDR_VAR 0 2
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_INT 4
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2649
// begin PrepareApemanEngineer ( ) ;
2622: CALL 64996 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2626: CALL_OW 44
2630: PPUSH
2631: LD_INT 118
2633: PPUSH
2634: LD_INT 50
2636: PPUSH
2637: LD_INT 3
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: CALL_OW 50
// end ;
2647: GO 2619
2649: POP
2650: POP
// end ;
2651: LD_VAR 0 1
2655: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2656: LD_EXP 19
2660: IFFALSE 2788
2662: GO 2664
2664: DISABLE
2665: LD_INT 0
2667: PPUSH
2668: PPUSH
2669: PPUSH
// begin enable ;
2670: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: LD_INT 14
2678: PUSH
2679: LD_INT 15
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PPUSH
2686: LD_INT 50
2688: PUSH
2689: EMPTY
2690: LIST
2691: PPUSH
2692: CALL_OW 72
2696: ST_TO_ADDR
// if not labs then
2697: LD_VAR 0 3
2701: NOT
2702: IFFALSE 2707
// begin disable ;
2704: DISABLE
// exit ;
2705: GO 2788
// end ; for i in labs do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_VAR 0 3
2716: PUSH
2717: FOR_IN
2718: IFFALSE 2786
// if BuildingStatus ( i ) = bs_idle then
2720: LD_VAR 0 1
2724: PPUSH
2725: CALL_OW 461
2729: PUSH
2730: LD_INT 2
2732: EQUAL
2733: IFFALSE 2784
// for t in ruTechList do
2735: LD_ADDR_VAR 0 2
2739: PUSH
2740: LD_EXP 19
2744: PUSH
2745: FOR_IN
2746: IFFALSE 2782
// if CanBeResearched ( i , t ) then
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL_OW 430
2762: IFFALSE 2780
// begin ComResearch ( i , t ) ;
2764: LD_VAR 0 1
2768: PPUSH
2769: LD_VAR 0 2
2773: PPUSH
2774: CALL_OW 124
// break ;
2778: GO 2782
// end ;
2780: GO 2745
2782: POP
2783: POP
2784: GO 2717
2786: POP
2787: POP
// end ;
2788: PPOPN 3
2790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2791: LD_INT 3
2793: PUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 1
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: EMPTY
2805: LIST
2806: LIST
2807: PUSH
2808: LD_INT 32
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PPUSH
2822: CALL_OW 69
2826: IFFALSE 2910
2828: GO 2830
2830: DISABLE
2831: LD_INT 0
2833: PPUSH
// begin enable ;
2834: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2835: LD_ADDR_VAR 0 1
2839: PUSH
2840: LD_INT 3
2842: PUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 1
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 32
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PPUSH
2871: CALL_OW 69
2875: PUSH
2876: FOR_IN
2877: IFFALSE 2908
// if GetFuel ( i ) < 3 then
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL_OW 261
2888: PUSH
2889: LD_INT 3
2891: LESS
2892: IFFALSE 2906
// SetFuel ( i , 3 ) ;
2894: LD_VAR 0 1
2898: PPUSH
2899: LD_INT 3
2901: PPUSH
2902: CALL_OW 240
2906: GO 2876
2908: POP
2909: POP
// end ;
2910: PPOPN 1
2912: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ [ f_not , [ f_full ] ] , [ f_ok ] ] ) and ruAttackers < [ 6 , 8 , 10 , 12 ] [ Difficulty ] do var i , chassis , weapon ;
2913: LD_INT 1
2915: PUSH
2916: LD_INT 40
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PPUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 62
2928: PUSH
2929: EMPTY
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: LD_INT 50
2938: PUSH
2939: EMPTY
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PPUSH
2946: CALL_OW 72
2950: PUSH
2951: LD_EXP 18
2955: PUSH
2956: LD_INT 6
2958: PUSH
2959: LD_INT 8
2961: PUSH
2962: LD_INT 10
2964: PUSH
2965: LD_INT 12
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: PUSH
2974: LD_OWVAR 67
2978: ARRAY
2979: LESS
2980: AND
2981: IFFALSE 3318
2983: GO 2985
2985: DISABLE
2986: LD_INT 0
2988: PPUSH
2989: PPUSH
2990: PPUSH
// begin enable ;
2991: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
2992: LD_ADDR_VAR 0 1
2996: PUSH
2997: LD_INT 1
2999: PUSH
3000: LD_INT 40
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PPUSH
3007: LD_INT 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: PPUSH
3013: CALL_OW 72
3017: PUSH
3018: FOR_IN
3019: IFFALSE 3316
// begin if BuildingStatus ( i ) <> bs_idle then
3021: LD_VAR 0 1
3025: PPUSH
3026: CALL_OW 461
3030: PUSH
3031: LD_INT 2
3033: NONEQUAL
3034: IFFALSE 3038
// continue ;
3036: GO 3018
// if i = ruFac1 then
3038: LD_VAR 0 1
3042: PUSH
3043: LD_INT 1
3045: EQUAL
3046: IFFALSE 3089
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3048: LD_ADDR_VAR 0 2
3052: PUSH
3053: LD_INT 21
3055: PUSH
3056: LD_INT 22
3058: PUSH
3059: LD_INT 23
3061: PUSH
3062: LD_INT 23
3064: PUSH
3065: LD_INT 24
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: PUSH
3075: LD_INT 1
3077: PPUSH
3078: LD_INT 5
3080: PPUSH
3081: CALL_OW 12
3085: ARRAY
3086: ST_TO_ADDR
3087: GO 3116
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: LD_INT 21
3096: PUSH
3097: LD_INT 23
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 2
3109: PPUSH
3110: CALL_OW 12
3114: ARRAY
3115: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_INT 49
3123: PUSH
3124: LD_INT 44
3126: PUSH
3127: LD_INT 43
3129: PUSH
3130: LD_INT 46
3132: PUSH
3133: LD_INT 45
3135: PUSH
3136: LD_INT 46
3138: PUSH
3139: LD_INT 45
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: ST_TO_ADDR
// if not russianRocketsDisabled then
3151: LD_EXP 6
3155: NOT
3156: IFFALSE 3176
// weapon := Join ( weapon , ru_rocket ) ;
3158: LD_ADDR_VAR 0 3
3162: PUSH
3163: LD_VAR 0 3
3167: PPUSH
3168: LD_INT 47
3170: PPUSH
3171: CALL 68794 0 2
3175: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , Count ( weapon ) ) ] ;
3176: LD_ADDR_VAR 0 3
3180: PUSH
3181: LD_VAR 0 3
3185: PUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_VAR 0 3
3193: PPUSH
3194: CALL 33604 0 1
3198: PPUSH
3199: CALL_OW 12
3203: ARRAY
3204: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3205: LD_VAR 0 2
3209: PUSH
3210: LD_INT 21
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: IN
3220: PUSH
3221: LD_VAR 0 3
3225: PUSH
3226: LD_INT 46
3228: PUSH
3229: LD_INT 47
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: IN
3236: AND
3237: IFFALSE 3270
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3239: LD_ADDR_VAR 0 3
3243: PUSH
3244: LD_INT 44
3246: PUSH
3247: LD_INT 45
3249: PUSH
3250: LD_INT 49
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 1
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: CALL_OW 12
3268: ARRAY
3269: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3270: LD_VAR 0 1
3274: PPUSH
3275: LD_VAR 0 2
3279: PPUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 3
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 2
3295: PPUSH
3296: CALL_OW 12
3300: ARRAY
3301: PPUSH
3302: LD_INT 3
3304: PPUSH
3305: LD_VAR 0 3
3309: PPUSH
3310: CALL_OW 185
// end ;
3314: GO 3018
3316: POP
3317: POP
// end ;
3318: PPOPN 3
3320: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3321: LD_INT 22
3323: PPUSH
3324: CALL_OW 302
3328: IFFALSE 4185
3330: GO 3332
3332: DISABLE
3333: LD_INT 0
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
3339: PPUSH
3340: PPUSH
3341: PPUSH
3342: PPUSH
// begin enable ;
3343: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3344: LD_ADDR_VAR 0 3
3348: PUSH
3349: LD_INT 12
3351: PPUSH
3352: LD_INT 3
3354: PUSH
3355: LD_INT 24
3357: PUSH
3358: LD_INT 1000
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 21
3371: PUSH
3372: LD_INT 3
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 70
3387: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3388: LD_ADDR_VAR 0 4
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 25
3405: PUSH
3406: LD_INT 2
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 69
3421: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3422: LD_ADDR_VAR 0 5
3426: PUSH
3427: LD_INT 22
3429: PUSH
3430: LD_INT 3
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 34
3439: PUSH
3440: LD_INT 52
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3456: LD_ADDR_VAR 0 7
3460: PUSH
3461: LD_INT 22
3463: PUSH
3464: LD_INT 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 25
3473: PUSH
3474: LD_INT 4
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3490: LD_ADDR_VAR 0 8
3494: PUSH
3495: LD_INT 14
3497: PUSH
3498: LD_INT 15
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3505: LD_VAR 0 7
3509: PUSH
3510: LD_VAR 0 4
3514: PPUSH
3515: LD_INT 120
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PPUSH
3525: CALL_OW 72
3529: AND
3530: IFFALSE 3543
// ComExitAll ( sci ) else
3532: LD_VAR 0 7
3536: PPUSH
3537: CALL 69275 0 1
3541: GO 3625
// if sci then
3543: LD_VAR 0 7
3547: IFFALSE 3625
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3549: LD_VAR 0 7
3553: PPUSH
3554: LD_INT 3
3556: PUSH
3557: LD_INT 54
3559: PUSH
3560: EMPTY
3561: LIST
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: PPUSH
3567: CALL_OW 72
3571: PUSH
3572: LD_VAR 0 8
3576: AND
3577: IFFALSE 3625
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3579: LD_VAR 0 7
3583: PPUSH
3584: LD_INT 3
3586: PUSH
3587: LD_INT 54
3589: PUSH
3590: EMPTY
3591: LIST
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PPUSH
3597: CALL_OW 72
3601: PPUSH
3602: LD_VAR 0 8
3606: PUSH
3607: LD_INT 1
3609: PPUSH
3610: LD_VAR 0 8
3614: PPUSH
3615: CALL_OW 12
3619: ARRAY
3620: PPUSH
3621: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3625: LD_VAR 0 5
3629: PPUSH
3630: LD_INT 50
3632: PUSH
3633: EMPTY
3634: LIST
3635: PPUSH
3636: CALL_OW 72
3640: PUSH
3641: LD_VAR 0 3
3645: AND
3646: IFFALSE 3687
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3648: LD_VAR 0 5
3652: PPUSH
3653: LD_INT 50
3655: PUSH
3656: EMPTY
3657: LIST
3658: PPUSH
3659: CALL_OW 72
3663: PPUSH
3664: LD_VAR 0 3
3668: PPUSH
3669: LD_VAR 0 5
3673: PUSH
3674: LD_INT 1
3676: ARRAY
3677: PPUSH
3678: CALL_OW 74
3682: PPUSH
3683: CALL_OW 130
// if eng then
3687: LD_VAR 0 4
3691: IFFALSE 4185
// begin for i in eng do
3693: LD_ADDR_VAR 0 1
3697: PUSH
3698: LD_VAR 0 4
3702: PUSH
3703: FOR_IN
3704: IFFALSE 4183
// begin tag := GetTag ( i ) ;
3706: LD_ADDR_VAR 0 6
3710: PUSH
3711: LD_VAR 0 1
3715: PPUSH
3716: CALL_OW 110
3720: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3721: LD_VAR 0 3
3725: NOT
3726: PUSH
3727: LD_EXP 17
3731: NOT
3732: AND
3733: PUSH
3734: LD_VAR 0 6
3738: PUSH
3739: LD_INT 1
3741: EQUAL
3742: AND
3743: IFFALSE 3769
// begin SetTag ( i , 0 ) ;
3745: LD_VAR 0 1
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3757: LD_VAR 0 1
3761: PPUSH
3762: LD_INT 22
3764: PPUSH
3765: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3769: LD_VAR 0 3
3773: PUSH
3774: LD_EXP 17
3778: OR
3779: PUSH
3780: LD_VAR 0 6
3784: PUSH
3785: LD_INT 0
3787: EQUAL
3788: AND
3789: IFFALSE 3803
// SetTag ( i , 1 ) ;
3791: LD_VAR 0 1
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 310
3812: PUSH
3813: LD_VAR 0 6
3817: PUSH
3818: LD_INT 1
3820: EQUAL
3821: AND
3822: IFFALSE 3833
// ComExit ( i ) ;
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL 69192 0 1
// if GetLives ( i ) < 700 and tag = 1 then
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 256
3842: PUSH
3843: LD_INT 700
3845: LESS
3846: PUSH
3847: LD_VAR 0 6
3851: PUSH
3852: LD_INT 1
3854: EQUAL
3855: AND
3856: IFFALSE 3870
// SetTag ( i , 2 ) ;
3858: LD_VAR 0 1
3862: PPUSH
3863: LD_INT 2
3865: PPUSH
3866: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 256
3879: PUSH
3880: LD_INT 1000
3882: EQUAL
3883: PUSH
3884: LD_VAR 0 6
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: AND
3893: IFFALSE 3907
// SetTag ( i , 1 ) ;
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 109
// if tag = 2 then
3907: LD_VAR 0 6
3911: PUSH
3912: LD_INT 2
3914: EQUAL
3915: IFFALSE 3962
// begin if GetDistUnitXY ( i , 110 , 41 ) > 6 then
3917: LD_VAR 0 1
3921: PPUSH
3922: LD_INT 110
3924: PPUSH
3925: LD_INT 41
3927: PPUSH
3928: CALL_OW 297
3932: PUSH
3933: LD_INT 6
3935: GREATER
3936: IFFALSE 3962
// begin ComMoveXY ( i , 110 , 41 ) ;
3938: LD_VAR 0 1
3942: PPUSH
3943: LD_INT 110
3945: PPUSH
3946: LD_INT 41
3948: PPUSH
3949: CALL_OW 111
// AddComHold ( i ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 11
3969: PPUSH
3970: CALL_OW 308
3974: IFFALSE 3988
// ComMoveToArea ( i , ruBaseArea ) ;
3976: LD_VAR 0 1
3980: PPUSH
3981: LD_INT 12
3983: PPUSH
3984: CALL_OW 113
// if tag = 1 then
3988: LD_VAR 0 6
3992: PUSH
3993: LD_INT 1
3995: EQUAL
3996: IFFALSE 4181
// begin if b then
3998: LD_VAR 0 3
4002: IFFALSE 4030
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
4004: LD_VAR 0 1
4008: PPUSH
4009: LD_VAR 0 3
4013: PPUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: CALL_OW 74
4023: PPUSH
4024: CALL_OW 130
4028: GO 4181
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
4030: LD_EXP 17
4034: PUSH
4035: LD_INT 11
4037: PPUSH
4038: LD_INT 81
4040: PUSH
4041: LD_INT 3
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 70
4052: PUSH
4053: LD_INT 0
4055: EQUAL
4056: AND
4057: PUSH
4058: LD_INT 22
4060: PPUSH
4061: LD_EXP 17
4065: PUSH
4066: LD_INT 1
4068: ARRAY
4069: PUSH
4070: LD_INT 1
4072: ARRAY
4073: PPUSH
4074: LD_EXP 17
4078: PUSH
4079: LD_INT 1
4081: ARRAY
4082: PUSH
4083: LD_INT 2
4085: ARRAY
4086: PPUSH
4087: LD_EXP 17
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 3
4098: ARRAY
4099: PPUSH
4100: LD_EXP 17
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PUSH
4109: LD_INT 4
4111: ARRAY
4112: PPUSH
4113: CALL 44561 0 5
4117: AND
4118: IFFALSE 4181
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4120: LD_VAR 0 1
4124: PPUSH
4125: LD_EXP 17
4129: PUSH
4130: LD_INT 1
4132: ARRAY
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: PPUSH
4138: LD_EXP 17
4142: PUSH
4143: LD_INT 1
4145: ARRAY
4146: PUSH
4147: LD_INT 2
4149: ARRAY
4150: PPUSH
4151: LD_EXP 17
4155: PUSH
4156: LD_INT 1
4158: ARRAY
4159: PUSH
4160: LD_INT 3
4162: ARRAY
4163: PPUSH
4164: LD_EXP 17
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PUSH
4173: LD_INT 4
4175: ARRAY
4176: PPUSH
4177: CALL_OW 145
// end ; end ;
4181: GO 3703
4183: POP
4184: POP
// end ; end ;
4185: PPOPN 8
4187: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4188: LD_INT 22
4190: PUSH
4191: LD_INT 3
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 3
4200: PUSH
4201: LD_INT 60
4203: PUSH
4204: EMPTY
4205: LIST
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 50
4213: PUSH
4214: EMPTY
4215: LIST
4216: PUSH
4217: LD_INT 25
4219: PUSH
4220: LD_INT 16
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: PPUSH
4233: CALL_OW 69
4237: PUSH
4238: LD_INT 14
4240: PPUSH
4241: CALL_OW 435
4245: AND
4246: IFFALSE 4358
4248: GO 4250
4250: DISABLE
4251: LD_INT 0
4253: PPUSH
4254: PPUSH
// begin enable ;
4255: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4256: LD_ADDR_VAR 0 2
4260: PUSH
4261: LD_INT 14
4263: PPUSH
4264: CALL_OW 435
4268: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4269: LD_ADDR_VAR 0 1
4273: PUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 3
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 3
4286: PUSH
4287: LD_INT 60
4289: PUSH
4290: EMPTY
4291: LIST
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 50
4299: PUSH
4300: EMPTY
4301: LIST
4302: PUSH
4303: LD_INT 25
4305: PUSH
4306: LD_INT 16
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PUSH
4324: FOR_IN
4325: IFFALSE 4356
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4327: LD_VAR 0 1
4331: PPUSH
4332: LD_VAR 0 2
4336: PUSH
4337: LD_INT 1
4339: ARRAY
4340: PPUSH
4341: LD_VAR 0 2
4345: PUSH
4346: LD_INT 2
4348: ARRAY
4349: PPUSH
4350: CALL_OW 117
4354: GO 4324
4356: POP
4357: POP
// end ;
4358: PPOPN 2
4360: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4361: LD_INT 22
4363: PUSH
4364: LD_INT 3
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 60
4376: PUSH
4377: EMPTY
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 50
4386: PUSH
4387: EMPTY
4388: LIST
4389: PUSH
4390: LD_INT 34
4392: PUSH
4393: LD_INT 51
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 69
4410: PUSH
4411: LD_INT 13
4413: PPUSH
4414: CALL_OW 435
4418: AND
4419: IFFALSE 4531
4421: GO 4423
4423: DISABLE
4424: LD_INT 0
4426: PPUSH
4427: PPUSH
// begin enable ;
4428: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_INT 13
4436: PPUSH
4437: CALL_OW 435
4441: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4442: LD_ADDR_VAR 0 1
4446: PUSH
4447: LD_INT 22
4449: PUSH
4450: LD_INT 3
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: LD_INT 60
4462: PUSH
4463: EMPTY
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 50
4472: PUSH
4473: EMPTY
4474: LIST
4475: PUSH
4476: LD_INT 34
4478: PUSH
4479: LD_INT 51
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PPUSH
4492: CALL_OW 69
4496: PUSH
4497: FOR_IN
4498: IFFALSE 4529
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_VAR 0 2
4509: PUSH
4510: LD_INT 1
4512: ARRAY
4513: PPUSH
4514: LD_VAR 0 2
4518: PUSH
4519: LD_INT 2
4521: ARRAY
4522: PPUSH
4523: CALL_OW 117
4527: GO 4497
4529: POP
4530: POP
// end ;
4531: PPOPN 2
4533: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4534: LD_OWVAR 67
4538: PUSH
4539: LD_INT 1
4541: GREATER
4542: PUSH
4543: LD_INT 1
4545: PPUSH
4546: CALL_OW 302
4550: AND
4551: IFFALSE 4709
4553: GO 4555
4555: DISABLE
4556: LD_INT 0
4558: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4559: LD_ADDR_VAR 0 1
4563: PUSH
4564: DOUBLE
4565: LD_INT 1
4567: DEC
4568: ST_TO_ADDR
4569: LD_INT 3
4571: PUSH
4572: LD_INT 4
4574: PUSH
4575: LD_INT 5
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: LD_OWVAR 67
4587: PUSH
4588: LD_INT 1
4590: MINUS
4591: ARRAY
4592: PUSH
4593: FOR_TO
4594: IFFALSE 4638
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4596: LD_INT 1
4598: PUSH
4599: LD_INT 40
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_VAR 0 1
4610: PUSH
4611: LD_INT 2
4613: MOD
4614: PUSH
4615: LD_INT 1
4617: PLUS
4618: ARRAY
4619: PPUSH
4620: LD_INT 21
4622: PPUSH
4623: LD_INT 3
4625: PPUSH
4626: LD_INT 1
4628: PPUSH
4629: LD_INT 45
4631: PPUSH
4632: CALL_OW 185
// end ;
4636: GO 4593
4638: POP
4639: POP
// repeat wait ( 6 6$00 ) ;
4640: LD_INT 12600
4642: PPUSH
4643: CALL_OW 67
// for i := 1 to 2 do
4647: LD_ADDR_VAR 0 1
4651: PUSH
4652: DOUBLE
4653: LD_INT 1
4655: DEC
4656: ST_TO_ADDR
4657: LD_INT 2
4659: PUSH
4660: FOR_TO
4661: IFFALSE 4684
// AddComConstruct ( ruFac1 , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4663: LD_INT 1
4665: PPUSH
4666: LD_INT 21
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 45
4677: PPUSH
4678: CALL_OW 185
4682: GO 4660
4684: POP
4685: POP
// until not IsOk ( ruFac1 ) or UnitsInside ( ruFac1 ) = 0 ;
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 302
4693: NOT
4694: PUSH
4695: LD_INT 1
4697: PPUSH
4698: CALL_OW 313
4702: PUSH
4703: LD_INT 0
4705: EQUAL
4706: OR
4707: IFFALSE 4640
// end ;
4709: PPOPN 1
4711: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4712: LD_EXP 16
4716: IFFALSE 5302
4718: GO 4720
4720: DISABLE
4721: LD_INT 0
4723: PPUSH
4724: PPUSH
4725: PPUSH
// begin enable ;
4726: ENABLE
// if not ruMobile then
4727: LD_EXP 16
4731: NOT
4732: IFFALSE 4736
// exit ;
4734: GO 5302
// for i in ruMobile do
4736: LD_ADDR_VAR 0 1
4740: PUSH
4741: LD_EXP 16
4745: PUSH
4746: FOR_IN
4747: IFFALSE 5300
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4749: LD_VAR 0 1
4753: PPUSH
4754: CALL_OW 302
4758: NOT
4759: PUSH
4760: LD_VAR 0 1
4764: PPUSH
4765: CALL_OW 255
4769: PUSH
4770: LD_INT 3
4772: NONEQUAL
4773: OR
4774: IFFALSE 4794
// begin ruMobile := ruMobile diff i ;
4776: LD_ADDR_EXP 16
4780: PUSH
4781: LD_EXP 16
4785: PUSH
4786: LD_VAR 0 1
4790: DIFF
4791: ST_TO_ADDR
// continue ;
4792: GO 4746
// end ; if GetTag ( i ) = 300 then
4794: LD_VAR 0 1
4798: PPUSH
4799: CALL_OW 110
4803: PUSH
4804: LD_INT 300
4806: EQUAL
4807: IFFALSE 4937
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4809: LD_VAR 0 1
4813: PPUSH
4814: CALL_OW 261
4818: PUSH
4819: LD_INT 50
4821: LESS
4822: PUSH
4823: LD_VAR 0 1
4827: PPUSH
4828: CALL_OW 262
4832: PUSH
4833: LD_INT 1
4835: EQUAL
4836: AND
4837: IFFALSE 4896
// begin ComMoveXY ( i , 120 , 58 ) ;
4839: LD_VAR 0 1
4843: PPUSH
4844: LD_INT 120
4846: PPUSH
4847: LD_INT 58
4849: PPUSH
4850: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4854: LD_INT 35
4856: PPUSH
4857: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4861: LD_VAR 0 1
4865: PPUSH
4866: LD_INT 120
4868: PPUSH
4869: LD_INT 58
4871: PPUSH
4872: CALL_OW 297
4876: PUSH
4877: LD_INT 4
4879: LESS
4880: IFFALSE 4854
// SetFuel ( i , 100 ) ;
4882: LD_VAR 0 1
4886: PPUSH
4887: LD_INT 100
4889: PPUSH
4890: CALL_OW 240
// end else
4894: GO 4937
// if not IsInArea ( i , ruParkingArea ) then
4896: LD_VAR 0 1
4900: PPUSH
4901: LD_INT 10
4903: PPUSH
4904: CALL_OW 308
4908: NOT
4909: IFFALSE 4925
// ComMoveToArea ( i , ruParkingArea ) else
4911: LD_VAR 0 1
4915: PPUSH
4916: LD_INT 10
4918: PPUSH
4919: CALL_OW 113
4923: GO 4937
// SetTag ( i , 301 ) ;
4925: LD_VAR 0 1
4929: PPUSH
4930: LD_INT 301
4932: PPUSH
4933: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4937: LD_VAR 0 1
4941: PPUSH
4942: CALL_OW 110
4946: PUSH
4947: LD_INT 301
4949: EQUAL
4950: IFFALSE 5080
// begin if GetLives ( i ) < 1000 then
4952: LD_VAR 0 1
4956: PPUSH
4957: CALL_OW 256
4961: PUSH
4962: LD_INT 1000
4964: LESS
4965: IFFALSE 5057
// begin if not IsDrivenBy ( i ) then
4967: LD_VAR 0 1
4971: PPUSH
4972: CALL_OW 311
4976: NOT
4977: IFFALSE 4981
// continue ;
4979: GO 4746
// mech := IsDrivenBy ( i ) ;
4981: LD_ADDR_VAR 0 2
4985: PUSH
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 311
4995: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
4996: LD_VAR 0 2
5000: PPUSH
5001: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
5005: LD_VAR 0 2
5009: PPUSH
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5026: LD_VAR 0 1
5030: PPUSH
5031: CALL_OW 256
5035: PUSH
5036: LD_INT 1000
5038: EQUAL
5039: IFFALSE 5019
// ComEnterUnit ( mech , i ) ;
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL_OW 120
// end else
5055: GO 5080
// if IsDrivenBy ( i ) then
5057: LD_VAR 0 1
5061: PPUSH
5062: CALL_OW 311
5066: IFFALSE 5080
// SetTag ( i , 0 ) ;
5068: LD_VAR 0 1
5072: PPUSH
5073: LD_INT 0
5075: PPUSH
5076: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 110
5089: PUSH
5090: LD_INT 300
5092: LESS
5093: IFFALSE 5298
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: LD_INT 11
5102: PPUSH
5103: LD_INT 81
5105: PUSH
5106: LD_INT 3
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PPUSH
5113: CALL_OW 70
5117: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5118: LD_VAR 0 1
5122: PPUSH
5123: CALL_OW 256
5127: PUSH
5128: LD_INT 650
5130: LESS
5131: IFFALSE 5156
// begin ComStop ( i ) ;
5133: LD_VAR 0 1
5137: PPUSH
5138: CALL_OW 141
// SetTag ( i , 300 ) ;
5142: LD_VAR 0 1
5146: PPUSH
5147: LD_INT 300
5149: PPUSH
5150: CALL_OW 109
// continue ;
5154: GO 4746
// end ; if enemy then
5156: LD_VAR 0 3
5160: IFFALSE 5200
// begin if not HasTask ( i ) then
5162: LD_VAR 0 1
5166: PPUSH
5167: CALL_OW 314
5171: NOT
5172: IFFALSE 5198
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5174: LD_VAR 0 1
5178: PPUSH
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_VAR 0 1
5188: PPUSH
5189: CALL_OW 74
5193: PPUSH
5194: CALL_OW 115
// end else
5198: GO 5298
// if ruMobile then
5200: LD_EXP 16
5204: IFFALSE 5298
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5206: LD_ADDR_VAR 0 3
5210: PUSH
5211: LD_INT 81
5213: PUSH
5214: LD_INT 3
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: ST_TO_ADDR
// if enemy then
5226: LD_VAR 0 3
5230: IFFALSE 5298
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5232: LD_VAR 0 1
5236: PPUSH
5237: LD_INT 113
5239: PUSH
5240: LD_INT 80
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 118
5249: PUSH
5250: LD_INT 100
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: LD_INT 107
5259: PUSH
5260: LD_INT 102
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 114
5269: PUSH
5270: LD_INT 120
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 86
5279: PUSH
5280: LD_INT 116
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: PPUSH
5294: CALL 71398 0 2
// end ; end ; end ;
5298: GO 4746
5300: POP
5301: POP
// end ;
5302: PPOPN 3
5304: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5305: LD_EXP 18
5309: IFFALSE 5355
5311: GO 5313
5313: DISABLE
5314: LD_INT 0
5316: PPUSH
// begin enable ;
5317: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5318: LD_ADDR_VAR 0 1
5322: PUSH
5323: LD_EXP 18
5327: PPUSH
5328: LD_INT 50
5330: PUSH
5331: EMPTY
5332: LIST
5333: PPUSH
5334: CALL_OW 72
5338: ST_TO_ADDR
// ruAttackers := [ ] ;
5339: LD_ADDR_EXP 18
5343: PUSH
5344: EMPTY
5345: ST_TO_ADDR
// SendAttack ( tmp ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: CALL 5358 0 1
// end ;
5355: PPOPN 1
5357: END
// function SendAttack ( group ) ; var i , tmp ; begin
5358: LD_INT 0
5360: PPUSH
5361: PPUSH
5362: PPUSH
// for i in group do
5363: LD_ADDR_VAR 0 3
5367: PUSH
5368: LD_VAR 0 1
5372: PUSH
5373: FOR_IN
5374: IFFALSE 5440
// begin SetTag ( i , 0 ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: LD_INT 0
5383: PPUSH
5384: CALL_OW 109
// if Prob ( 30 ) then
5388: LD_INT 30
5390: PPUSH
5391: CALL_OW 13
5395: IFFALSE 5423
// begin SetTag ( i , 1 ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5409: LD_VAR 0 3
5413: PPUSH
5414: LD_INT 116
5416: PPUSH
5417: CALL_OW 120
// end else
5421: GO 5438
// ComAgressiveMove ( i , 118 , 93 ) ;
5423: LD_VAR 0 3
5427: PPUSH
5428: LD_INT 118
5430: PPUSH
5431: LD_INT 93
5433: PPUSH
5434: CALL_OW 114
// end ;
5438: GO 5373
5440: POP
5441: POP
// repeat wait ( 0 0$1 ) ;
5442: LD_INT 35
5444: PPUSH
5445: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5449: LD_ADDR_VAR 0 4
5453: PUSH
5454: LD_VAR 0 1
5458: PPUSH
5459: LD_INT 120
5461: PUSH
5462: LD_INT 0
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 72
5473: ST_TO_ADDR
// for i in tmp do
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: LD_VAR 0 4
5483: PUSH
5484: FOR_IN
5485: IFFALSE 5632
// begin if not IsOk ( i ) then
5487: LD_VAR 0 3
5491: PPUSH
5492: CALL_OW 302
5496: NOT
5497: IFFALSE 5517
// begin tmp := tmp diff i ;
5499: LD_ADDR_VAR 0 4
5503: PUSH
5504: LD_VAR 0 4
5508: PUSH
5509: LD_VAR 0 3
5513: DIFF
5514: ST_TO_ADDR
// continue ;
5515: GO 5484
// end ; if GetDistUnits ( i , usDep ) < 8 then
5517: LD_VAR 0 3
5521: PPUSH
5522: LD_INT 48
5524: PPUSH
5525: CALL_OW 296
5529: PUSH
5530: LD_INT 8
5532: LESS
5533: IFFALSE 5549
// begin ComAttackUnit ( i , usDep ) ;
5535: LD_VAR 0 3
5539: PPUSH
5540: LD_INT 48
5542: PPUSH
5543: CALL_OW 115
// continue ;
5547: GO 5484
// end ; if not See ( 1 , i ) then
5549: LD_INT 1
5551: PPUSH
5552: LD_VAR 0 3
5556: PPUSH
5557: CALL_OW 292
5561: NOT
5562: IFFALSE 5581
// ComAgressiveMove ( i , 86 , 116 ) else
5564: LD_VAR 0 3
5568: PPUSH
5569: LD_INT 86
5571: PPUSH
5572: LD_INT 116
5574: PPUSH
5575: CALL_OW 114
5579: GO 5630
// if GetWeapon ( i ) <> ru_time_lapser then
5581: LD_VAR 0 3
5585: PPUSH
5586: CALL_OW 264
5590: PUSH
5591: LD_INT 49
5593: NONEQUAL
5594: IFFALSE 5630
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5596: LD_VAR 0 3
5600: PPUSH
5601: LD_INT 81
5603: PUSH
5604: LD_INT 3
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PPUSH
5611: CALL_OW 69
5615: PPUSH
5616: LD_VAR 0 3
5620: PPUSH
5621: CALL_OW 74
5625: PPUSH
5626: CALL_OW 115
// end ;
5630: GO 5484
5632: POP
5633: POP
// until not tmp ;
5634: LD_VAR 0 4
5638: NOT
5639: IFFALSE 5442
// end ; end_of_file
5641: LD_VAR 0 2
5645: RET
// on UnitDestroyed ( unit ) do var i , tmp ;
5646: LD_INT 0
5648: PPUSH
5649: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5650: LD_VAR 0 1
5654: PPUSH
5655: CALL 27213 0 1
// if unit = JMM then
5659: LD_VAR 0 1
5663: PUSH
5664: LD_EXP 8
5668: EQUAL
5669: IFFALSE 5678
// YouLost ( JMM ) ;
5671: LD_STRING JMM
5673: PPUSH
5674: CALL_OW 104
// if GetSide ( unit ) = 4 then
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 255
5687: PUSH
5688: LD_INT 4
5690: EQUAL
5691: IFFALSE 5750
// begin if unit = Joan then
5693: LD_VAR 0 1
5697: PUSH
5698: LD_EXP 10
5702: EQUAL
5703: IFFALSE 5712
// YouLost ( Joan ) ;
5705: LD_STRING Joan
5707: PPUSH
5708: CALL_OW 104
// if unit = Connie then
5712: LD_VAR 0 1
5716: PUSH
5717: LD_EXP 12
5721: EQUAL
5722: IFFALSE 5731
// YouLost ( Connie ) ;
5724: LD_STRING Connie
5726: PPUSH
5727: CALL_OW 104
// if unit = Lisa then
5731: LD_VAR 0 1
5735: PUSH
5736: LD_EXP 11
5740: EQUAL
5741: IFFALSE 5750
// YouLost ( Lisa ) ;
5743: LD_STRING Lisa
5745: PPUSH
5746: CALL_OW 104
// end ; if unit in ruAttackers then
5750: LD_VAR 0 1
5754: PUSH
5755: LD_EXP 18
5759: IN
5760: IFFALSE 5778
// ruAttackers := ruAttackers diff unit ;
5762: LD_ADDR_EXP 18
5766: PUSH
5767: LD_EXP 18
5771: PUSH
5772: LD_VAR 0 1
5776: DIFF
5777: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5778: LD_VAR 0 1
5782: PPUSH
5783: CALL_OW 264
5787: PUSH
5788: LD_INT 51
5790: EQUAL
5791: PUSH
5792: LD_INT 40
5794: PPUSH
5795: CALL_OW 302
5799: AND
5800: IFFALSE 5840
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5802: LD_INT 40
5804: PPUSH
5805: LD_INT 21
5807: PPUSH
5808: LD_INT 1
5810: PUSH
5811: LD_INT 3
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 1
5820: PPUSH
5821: LD_INT 2
5823: PPUSH
5824: CALL_OW 12
5828: ARRAY
5829: PPUSH
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 51
5835: PPUSH
5836: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 264
5849: PUSH
5850: LD_INT 52
5852: EQUAL
5853: PUSH
5854: LD_INT 40
5856: PPUSH
5857: CALL_OW 302
5861: AND
5862: IFFALSE 5902
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5864: LD_INT 40
5866: PPUSH
5867: LD_INT 21
5869: PPUSH
5870: LD_INT 1
5872: PUSH
5873: LD_INT 3
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 1
5882: PPUSH
5883: LD_INT 2
5885: PPUSH
5886: CALL_OW 12
5890: ARRAY
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: LD_INT 52
5897: PPUSH
5898: CALL_OW 185
// if unit in ruMobile then
5902: LD_VAR 0 1
5906: PUSH
5907: LD_EXP 16
5911: IN
5912: IFFALSE 5930
// ruMobile := ruMobile diff i ;
5914: LD_ADDR_EXP 16
5918: PUSH
5919: LD_EXP 16
5923: PUSH
5924: LD_VAR 0 2
5928: DIFF
5929: ST_TO_ADDR
// if unit = ruCommander then
5930: LD_VAR 0 1
5934: PUSH
5935: LD_EXP 14
5939: EQUAL
5940: IFFALSE 6103
// begin repeat wait ( 0 0$2 ) ;
5942: LD_INT 70
5944: PPUSH
5945: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 23
5966: PUSH
5967: LD_INT 3
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 50
5976: PUSH
5977: EMPTY
5978: LIST
5979: PUSH
5980: LD_INT 21
5982: PUSH
5983: LD_INT 1
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 69
6000: ST_TO_ADDR
// if tmp then
6001: LD_VAR 0 3
6005: IFFALSE 6096
// for i in tmp do
6007: LD_ADDR_VAR 0 2
6011: PUSH
6012: LD_VAR 0 3
6016: PUSH
6017: FOR_IN
6018: IFFALSE 6094
// begin if IsInUnit ( i ) then
6020: LD_VAR 0 2
6024: PPUSH
6025: CALL_OW 310
6029: IFFALSE 6040
// ComExit ( i ) ;
6031: LD_VAR 0 2
6035: PPUSH
6036: CALL 69192 0 1
// wait ( 3 ) ;
6040: LD_INT 3
6042: PPUSH
6043: CALL_OW 67
// ComMoveXY ( i , 147 , 18 ) ;
6047: LD_VAR 0 2
6051: PPUSH
6052: LD_INT 147
6054: PPUSH
6055: LD_INT 18
6057: PPUSH
6058: CALL_OW 111
// if GetDistUnitXY ( i , 147 , 18 ) < 3 then
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_INT 147
6069: PPUSH
6070: LD_INT 18
6072: PPUSH
6073: CALL_OW 297
6077: PUSH
6078: LD_INT 3
6080: LESS
6081: IFFALSE 6092
// RemoveUnit ( i ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: CALL_OW 64
// end ;
6092: GO 6017
6094: POP
6095: POP
// until not tmp ;
6096: LD_VAR 0 3
6100: NOT
6101: IFFALSE 5942
// end ; end ;
6103: PPOPN 3
6105: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
6106: LD_VAR 0 2
6110: PPUSH
6111: CALL_OW 255
6115: PUSH
6116: LD_INT 3
6118: EQUAL
6119: IFFALSE 6133
// SetTag ( unit , 0 ) ;
6121: LD_VAR 0 2
6125: PPUSH
6126: LD_INT 0
6128: PPUSH
6129: CALL_OW 109
// end ;
6133: PPOPN 2
6135: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
6136: LD_VAR 0 2
6140: PPUSH
6141: CALL_OW 255
6145: PUSH
6146: LD_INT 3
6148: EQUAL
6149: PUSH
6150: LD_VAR 0 1
6154: PUSH
6155: LD_EXP 19
6159: IN
6160: AND
6161: IFFALSE 6179
// ruTechList := ruTechList diff tech ;
6163: LD_ADDR_EXP 19
6167: PUSH
6168: LD_EXP 19
6172: PUSH
6173: LD_VAR 0 1
6177: DIFF
6178: ST_TO_ADDR
// end ;
6179: PPOPN 2
6181: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
6182: LD_INT 0
6184: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
6185: LD_VAR 0 1
6189: PPUSH
6190: LD_VAR 0 2
6194: PPUSH
6195: CALL 27333 0 2
// if GetSide ( vehicle ) <> 3 then
6199: LD_VAR 0 1
6203: PPUSH
6204: CALL_OW 255
6208: PUSH
6209: LD_INT 3
6211: NONEQUAL
6212: IFFALSE 6283
// begin if GetWeapon ( vehicle ) = us_double_laser then
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 264
6223: PUSH
6224: LD_INT 10
6226: EQUAL
6227: IFFALSE 6281
// begin amLaserCounter := Inc ( amLaserCounter ) ;
6229: LD_ADDR_EXP 7
6233: PUSH
6234: LD_EXP 7
6238: PPUSH
6239: CALL 70155 0 1
6243: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
6244: LD_ADDR_VAR 0 3
6248: PUSH
6249: LD_VAR 0 2
6253: PPUSH
6254: CALL_OW 313
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6279
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
6262: LD_VAR 0 3
6266: PPUSH
6267: LD_INT 3
6269: PPUSH
6270: LD_INT 1000
6272: PPUSH
6273: CALL_OW 591
6277: GO 6259
6279: POP
6280: POP
// end ; exit ;
6281: GO 6377
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6283: LD_VAR 0 1
6287: PPUSH
6288: CALL_OW 264
6292: PUSH
6293: LD_INT 51
6295: PUSH
6296: LD_INT 52
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: IN
6303: IFFALSE 6307
// exit ;
6305: GO 6377
// if GetControl ( vehicle ) = control_computer then
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 263
6316: PUSH
6317: LD_INT 3
6319: EQUAL
6320: IFFALSE 6342
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6322: LD_ADDR_EXP 18
6326: PUSH
6327: LD_EXP 18
6331: PPUSH
6332: LD_VAR 0 1
6336: PPUSH
6337: CALL 68794 0 2
6341: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6342: LD_VAR 0 1
6346: PPUSH
6347: CALL_OW 263
6351: PUSH
6352: LD_INT 1
6354: EQUAL
6355: IFFALSE 6377
// ruMobile := Join ( ruMobile , vehicle ) ;
6357: LD_ADDR_EXP 16
6361: PUSH
6362: LD_EXP 16
6366: PPUSH
6367: LD_VAR 0 1
6371: PPUSH
6372: CALL 68794 0 2
6376: ST_TO_ADDR
// end ;
6377: PPOPN 3
6379: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 then
6380: LD_VAR 0 1
6384: PPUSH
6385: CALL_OW 255
6389: PUSH
6390: LD_INT 3
6392: EQUAL
6393: PUSH
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 257
6403: PUSH
6404: LD_INT 3
6406: EQUAL
6407: AND
6408: IFFALSE 6471
// if GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) and UnitsInside ( ruFac1 ) < 6 then
6410: LD_INT 1
6412: PPUSH
6413: CALL_OW 255
6417: PUSH
6418: LD_INT 3
6420: EQUAL
6421: PUSH
6422: LD_INT 1
6424: PPUSH
6425: CALL_OW 302
6429: AND
6430: PUSH
6431: LD_INT 1
6433: PPUSH
6434: CALL_OW 313
6438: PUSH
6439: LD_INT 6
6441: LESS
6442: AND
6443: IFFALSE 6459
// ComEnterUnit ( human , ruFac1 ) else
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 1
6452: PPUSH
6453: CALL_OW 120
6457: GO 6471
// ComEnterUnit ( human , ruFac2 ) ;
6459: LD_VAR 0 1
6463: PPUSH
6464: LD_INT 40
6466: PPUSH
6467: CALL_OW 120
// end ;
6471: PPOPN 4
6473: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL 27317 0 1
// end ; end_of_file
6483: PPOPN 1
6485: END
// export function Action ; var dec1 , dec2 , veh ; begin
6486: LD_INT 0
6488: PPUSH
6489: PPUSH
6490: PPUSH
6491: PPUSH
// veh := IsInUnit ( JMM ) ;
6492: LD_ADDR_VAR 0 4
6496: PUSH
6497: LD_EXP 8
6501: PPUSH
6502: CALL_OW 310
6506: ST_TO_ADDR
// InGameOn ;
6507: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6520: LD_VAR 0 4
6524: PPUSH
6525: LD_INT 30
6527: PPUSH
6528: LD_INT 11
6530: PPUSH
6531: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6535: LD_VAR 0 4
6539: PPUSH
6540: LD_INT 69
6542: PPUSH
6543: LD_INT 34
6545: PPUSH
6546: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6550: LD_INT 30
6552: PPUSH
6553: LD_INT 11
6555: PPUSH
6556: CALL_OW 84
// wait ( 0 0$3 ) ;
6560: LD_INT 105
6562: PPUSH
6563: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6567: LD_EXP 13
6571: PPUSH
6572: LD_STRING D1-Pow-1
6574: PPUSH
6575: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6579: LD_EXP 8
6583: PPUSH
6584: CALL_OW 121
// AddComHold ( JMM ) ;
6588: LD_EXP 8
6592: PPUSH
6593: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6597: LD_EXP 8
6601: PPUSH
6602: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6606: LD_EXP 8
6610: PPUSH
6611: LD_STRING D1-JMM-1
6613: PPUSH
6614: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6618: LD_EXP 13
6622: PPUSH
6623: LD_STRING D1-Pow-2
6625: PPUSH
6626: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6630: LD_EXP 8
6634: PPUSH
6635: LD_STRING D1-JMM-2
6637: PPUSH
6638: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6642: LD_EXP 8
6646: PPUSH
6647: LD_VAR 0 4
6651: PPUSH
6652: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6656: LD_STRING M1
6658: PPUSH
6659: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6663: LD_INT 16
6665: PPUSH
6666: LD_INT 1
6668: PPUSH
6669: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6673: LD_INT 35
6675: PPUSH
6676: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6680: LD_EXP 8
6684: PPUSH
6685: LD_VAR 0 4
6689: PPUSH
6690: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6694: LD_VAR 0 4
6698: PPUSH
6699: LD_INT 51
6701: PPUSH
6702: LD_INT 21
6704: PPUSH
6705: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6709: LD_VAR 0 4
6713: PPUSH
6714: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6718: LD_VAR 0 4
6722: PPUSH
6723: LD_INT 51
6725: PPUSH
6726: LD_INT 21
6728: PPUSH
6729: CALL_OW 297
6733: PUSH
6734: LD_INT 6
6736: LESS
6737: IFFALSE 6673
// if JMMGirl = 1 then
6739: LD_EXP 2
6743: PUSH
6744: LD_INT 1
6746: EQUAL
6747: IFFALSE 7046
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6749: LD_EXP 10
6753: PPUSH
6754: LD_STRING D2J-Joan-1
6756: PPUSH
6757: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6761: LD_ADDR_VAR 0 2
6765: PUSH
6766: LD_STRING Q1
6768: PPUSH
6769: CALL_OW 97
6773: ST_TO_ADDR
// if dec1 = 1 then
6774: LD_VAR 0 2
6778: PUSH
6779: LD_INT 1
6781: EQUAL
6782: IFFALSE 7037
// begin ComExitVehicle ( JMM ) ;
6784: LD_EXP 8
6788: PPUSH
6789: CALL_OW 121
// AddComHold ( JMM ) ;
6793: LD_EXP 8
6797: PPUSH
6798: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6802: LD_EXP 8
6806: PPUSH
6807: LD_STRING D2J-JMM-1
6809: PPUSH
6810: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6814: LD_EXP 10
6818: PPUSH
6819: LD_STRING D2J-Joan-2
6821: PPUSH
6822: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6826: LD_EXP 8
6830: PPUSH
6831: LD_STRING D2J-JMM-2
6833: PPUSH
6834: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6838: LD_EXP 10
6842: PPUSH
6843: LD_STRING D2J-Joan-3
6845: PPUSH
6846: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6850: LD_EXP 13
6854: PPUSH
6855: LD_STRING DPowell-Pow-1
6857: PPUSH
6858: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6862: LD_ADDR_VAR 0 3
6866: PUSH
6867: LD_STRING Q2J
6869: PPUSH
6870: CALL_OW 97
6874: ST_TO_ADDR
// if dec2 = 1 then
6875: LD_VAR 0 3
6879: PUSH
6880: LD_INT 1
6882: EQUAL
6883: IFFALSE 6925
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6885: LD_EXP 8
6889: PPUSH
6890: LD_STRING D2Ja-JMM-1
6892: PPUSH
6893: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6897: LD_EXP 10
6901: PPUSH
6902: LD_STRING D2Ja-Joan-1
6904: PPUSH
6905: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
6909: LD_EXP 8
6913: PPUSH
6914: LD_STRING D2Ja-JMM-2
6916: PPUSH
6917: CALL_OW 88
// InGameOff ;
6921: CALL_OW 9
// end ; if dec2 = 2 then
6925: LD_VAR 0 3
6929: PUSH
6930: LD_INT 2
6932: EQUAL
6933: IFFALSE 7004
// begin Say ( JMM , D2Jb-JMM-1 ) ;
6935: LD_EXP 8
6939: PPUSH
6940: LD_STRING D2Jb-JMM-1
6942: PPUSH
6943: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
6947: LD_EXP 10
6951: PPUSH
6952: LD_STRING D2Jb-Joan-1
6954: PPUSH
6955: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
6959: LD_EXP 8
6963: PPUSH
6964: LD_STRING D2Jb-JMM-2
6966: PPUSH
6967: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
6971: LD_EXP 10
6975: PPUSH
6976: LD_STRING D2Jb-Joan-2
6978: PPUSH
6979: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
6983: LD_EXP 8
6987: PPUSH
6988: LD_STRING D2Jb-JMM-3
6990: PPUSH
6991: CALL_OW 88
// FinishMission ( true ) ;
6995: LD_INT 1
6997: PPUSH
6998: CALL 9888 0 1
// exit ;
7002: GO 7586
// end ; if dec2 = 3 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 3
7011: EQUAL
7012: IFFALSE 7035
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
7014: LD_EXP 10
7018: PPUSH
7019: LD_STRING D2Jc-Joan-1
7021: PPUSH
7022: CALL_OW 94
// FinishMission ( true ) ;
7026: LD_INT 1
7028: PPUSH
7029: CALL 9888 0 1
// exit ;
7033: GO 7586
// end ; end else
7035: GO 7046
// begin FinishMission ( true ) ;
7037: LD_INT 1
7039: PPUSH
7040: CALL 9888 0 1
// exit ;
7044: GO 7586
// end ; end ; if JMMGirl = 2 then
7046: LD_EXP 2
7050: PUSH
7051: LD_INT 2
7053: EQUAL
7054: IFFALSE 7365
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
7056: LD_EXP 11
7060: PPUSH
7061: LD_STRING D2L-Lisa-1
7063: PPUSH
7064: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_STRING Q1
7075: PPUSH
7076: CALL_OW 97
7080: ST_TO_ADDR
// if dec1 = 1 then
7081: LD_VAR 0 2
7085: PUSH
7086: LD_INT 1
7088: EQUAL
7089: IFFALSE 7356
// begin ComExitVehicle ( JMM ) ;
7091: LD_EXP 8
7095: PPUSH
7096: CALL_OW 121
// AddComHold ( JMM ) ;
7100: LD_EXP 8
7104: PPUSH
7105: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
7109: LD_EXP 8
7113: PPUSH
7114: LD_STRING D2L-JMM-1
7116: PPUSH
7117: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
7121: LD_EXP 11
7125: PPUSH
7126: LD_STRING D2L-Lisa-2
7128: PPUSH
7129: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
7133: LD_EXP 8
7137: PPUSH
7138: LD_STRING D2L-JMM-2
7140: PPUSH
7141: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
7145: LD_EXP 11
7149: PPUSH
7150: LD_STRING DL-Lisa-3
7152: PPUSH
7153: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7157: LD_EXP 13
7161: PPUSH
7162: LD_STRING DPowell-Pow-1
7164: PPUSH
7165: CALL_OW 94
// dec2 := Query ( Q2L ) ;
7169: LD_ADDR_VAR 0 3
7173: PUSH
7174: LD_STRING Q2L
7176: PPUSH
7177: CALL_OW 97
7181: ST_TO_ADDR
// if dec2 = 1 then
7182: LD_VAR 0 3
7186: PUSH
7187: LD_INT 1
7189: EQUAL
7190: IFFALSE 7256
// begin Say ( JMM , D2La-JMM-1 ) ;
7192: LD_EXP 8
7196: PPUSH
7197: LD_STRING D2La-JMM-1
7199: PPUSH
7200: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
7204: LD_EXP 11
7208: PPUSH
7209: LD_STRING D2La-Lisa-1
7211: PPUSH
7212: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
7216: LD_EXP 8
7220: PPUSH
7221: LD_STRING D2La-JMM-2
7223: PPUSH
7224: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
7228: LD_EXP 11
7232: PPUSH
7233: LD_STRING D2La-Lisa-2
7235: PPUSH
7236: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
7240: LD_EXP 8
7244: PPUSH
7245: LD_STRING D2La-JMM-3
7247: PPUSH
7248: CALL_OW 88
// InGameOff ;
7252: CALL_OW 9
// end ; if dec2 = 2 then
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 2
7263: EQUAL
7264: IFFALSE 7323
// begin Say ( JMM , D2Lb-JMM-1 ) ;
7266: LD_EXP 8
7270: PPUSH
7271: LD_STRING D2Lb-JMM-1
7273: PPUSH
7274: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
7278: LD_EXP 11
7282: PPUSH
7283: LD_STRING D2Lb-Lisa-1
7285: PPUSH
7286: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
7290: LD_EXP 8
7294: PPUSH
7295: LD_STRING D2Lb-JMM-2
7297: PPUSH
7298: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7302: LD_EXP 11
7306: PPUSH
7307: LD_STRING D2Lb-Lisa-2
7309: PPUSH
7310: CALL_OW 94
// FinishMission ( true ) ;
7314: LD_INT 1
7316: PPUSH
7317: CALL 9888 0 1
// exit ;
7321: GO 7586
// end ; if dec2 = 3 then
7323: LD_VAR 0 3
7327: PUSH
7328: LD_INT 3
7330: EQUAL
7331: IFFALSE 7354
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7333: LD_EXP 11
7337: PPUSH
7338: LD_STRING D2Lc-Lisa-1
7340: PPUSH
7341: CALL_OW 94
// FinishMission ( true ) ;
7345: LD_INT 1
7347: PPUSH
7348: CALL 9888 0 1
// exit ;
7352: GO 7586
// end ; end else
7354: GO 7365
// begin FinishMission ( true ) ;
7356: LD_INT 1
7358: PPUSH
7359: CALL 9888 0 1
// exit ;
7363: GO 7586
// end ; end ; if JMMGirl = 3 then
7365: LD_EXP 2
7369: PUSH
7370: LD_INT 3
7372: EQUAL
7373: IFFALSE 7586
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7375: LD_EXP 12
7379: PPUSH
7380: LD_STRING D2X-Con-1
7382: PPUSH
7383: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7387: LD_ADDR_VAR 0 2
7391: PUSH
7392: LD_STRING Q1
7394: PPUSH
7395: CALL_OW 97
7399: ST_TO_ADDR
// if dec1 = 1 then
7400: LD_VAR 0 2
7404: PUSH
7405: LD_INT 1
7407: EQUAL
7408: IFFALSE 7579
// begin ComExitVehicle ( JMM ) ;
7410: LD_EXP 8
7414: PPUSH
7415: CALL_OW 121
// AddComHold ( JMM ) ;
7419: LD_EXP 8
7423: PPUSH
7424: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7428: LD_EXP 8
7432: PPUSH
7433: LD_STRING D2X-JMM-1
7435: PPUSH
7436: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7440: LD_EXP 12
7444: PPUSH
7445: LD_STRING D2X-Con-2
7447: PPUSH
7448: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7452: LD_EXP 13
7456: PPUSH
7457: LD_STRING DPowell-Pow-1
7459: PPUSH
7460: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_STRING Q2X
7471: PPUSH
7472: CALL_OW 97
7476: ST_TO_ADDR
// if dec2 = 1 then
7477: LD_VAR 0 3
7481: PUSH
7482: LD_INT 1
7484: EQUAL
7485: IFFALSE 7503
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7487: LD_EXP 8
7491: PPUSH
7492: LD_STRING D2Xa-JMM-1
7494: PPUSH
7495: CALL_OW 88
// InGameOff ;
7499: CALL_OW 9
// end ; if dec2 = 2 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 2
7510: EQUAL
7511: IFFALSE 7546
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7513: LD_EXP 8
7517: PPUSH
7518: LD_STRING D2Xb-JMM-1
7520: PPUSH
7521: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7525: LD_EXP 12
7529: PPUSH
7530: LD_STRING D2Xb-Con-1
7532: PPUSH
7533: CALL_OW 94
// FinishMission ( true ) ;
7537: LD_INT 1
7539: PPUSH
7540: CALL 9888 0 1
// exit ;
7544: GO 7586
// end ; if dec2 = 3 then
7546: LD_VAR 0 3
7550: PUSH
7551: LD_INT 3
7553: EQUAL
7554: IFFALSE 7577
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7556: LD_EXP 12
7560: PPUSH
7561: LD_STRING D2Xc-Con-1
7563: PPUSH
7564: CALL_OW 94
// FinishMission ( true ) ;
7568: LD_INT 1
7570: PPUSH
7571: CALL 9888 0 1
// exit ;
7575: GO 7586
// end ; end else
7577: GO 7586
// begin FinishMission ( true ) ;
7579: LD_INT 1
7581: PPUSH
7582: CALL 9888 0 1
// end ; end ; end ;
7586: LD_VAR 0 1
7590: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7591: LD_EXP 8
7595: PPUSH
7596: LD_INT 15
7598: PPUSH
7599: CALL_OW 308
7603: IFFALSE 8851
7605: GO 7607
7607: DISABLE
7608: LD_INT 0
7610: PPUSH
// begin if tick < 5 5$00 then
7611: LD_OWVAR 1
7615: PUSH
7616: LD_INT 10500
7618: LESS
7619: IFFALSE 7871
// begin uc_side := 6 ;
7621: LD_ADDR_OWVAR 20
7625: PUSH
7626: LD_INT 6
7628: ST_TO_ADDR
// uc_nation := 3 ;
7629: LD_ADDR_OWVAR 21
7633: PUSH
7634: LD_INT 3
7636: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7637: LD_INT 1
7639: PPUSH
7640: LD_INT 105
7642: PPUSH
7643: LD_INT 97
7645: PPUSH
7646: CALL_OW 293
7650: NOT
7651: IFFALSE 7715
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7653: LD_INT 22
7655: PPUSH
7656: LD_INT 1
7658: PPUSH
7659: LD_INT 3
7661: PPUSH
7662: LD_INT 44
7664: PPUSH
7665: LD_INT 40
7667: PPUSH
7668: CALL 36342 0 5
// veh := CreateVehicle ;
7672: LD_ADDR_VAR 0 1
7676: PUSH
7677: CALL_OW 45
7681: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7682: LD_VAR 0 1
7686: PPUSH
7687: LD_INT 200
7689: PPUSH
7690: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7694: LD_VAR 0 1
7698: PPUSH
7699: LD_INT 105
7701: PPUSH
7702: LD_INT 97
7704: PPUSH
7705: LD_INT 3
7707: PPUSH
7708: LD_INT 0
7710: PPUSH
7711: CALL 70934 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7715: LD_INT 1
7717: PPUSH
7718: LD_INT 116
7720: PPUSH
7721: LD_INT 120
7723: PPUSH
7724: CALL_OW 293
7728: NOT
7729: IFFALSE 7793
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7731: LD_INT 22
7733: PPUSH
7734: LD_INT 1
7736: PPUSH
7737: LD_INT 3
7739: PPUSH
7740: LD_INT 45
7742: PPUSH
7743: LD_INT 40
7745: PPUSH
7746: CALL 36342 0 5
// veh := CreateVehicle ;
7750: LD_ADDR_VAR 0 1
7754: PUSH
7755: CALL_OW 45
7759: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7760: LD_VAR 0 1
7764: PPUSH
7765: LD_INT 200
7767: PPUSH
7768: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7772: LD_VAR 0 1
7776: PPUSH
7777: LD_INT 116
7779: PPUSH
7780: LD_INT 120
7782: PPUSH
7783: LD_INT 4
7785: PPUSH
7786: LD_INT 0
7788: PPUSH
7789: CALL 70934 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7793: LD_INT 1
7795: PPUSH
7796: LD_INT 116
7798: PPUSH
7799: LD_INT 120
7801: PPUSH
7802: CALL_OW 293
7806: NOT
7807: IFFALSE 7871
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7809: LD_INT 24
7811: PPUSH
7812: LD_INT 1
7814: PPUSH
7815: LD_INT 3
7817: PPUSH
7818: LD_INT 45
7820: PPUSH
7821: LD_INT 30
7823: PPUSH
7824: CALL 36342 0 5
// veh := CreateVehicle ;
7828: LD_ADDR_VAR 0 1
7832: PUSH
7833: CALL_OW 45
7837: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 200
7845: PPUSH
7846: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7850: LD_VAR 0 1
7854: PPUSH
7855: LD_INT 116
7857: PPUSH
7858: LD_INT 120
7860: PPUSH
7861: LD_INT 4
7863: PPUSH
7864: LD_INT 0
7866: PPUSH
7867: CALL 70934 0 5
// end ; end ; InGameOn ;
7871: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7875: LD_INT 35
7877: PPUSH
7878: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7882: LD_EXP 8
7886: PPUSH
7887: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7891: LD_EXP 8
7895: PPUSH
7896: LD_INT 81
7898: PPUSH
7899: LD_INT 109
7901: PPUSH
7902: CALL_OW 111
// AddComHold ( JMM ) ;
7906: LD_EXP 8
7910: PPUSH
7911: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
7915: LD_EXP 10
7919: PUSH
7920: LD_EXP 11
7924: PUSH
7925: LD_EXP 12
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: PPUSH
7935: LD_EXP 8
7939: PPUSH
7940: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
7944: LD_EXP 10
7948: PUSH
7949: LD_EXP 11
7953: PUSH
7954: LD_EXP 12
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PPUSH
7964: LD_INT 91
7966: PUSH
7967: LD_EXP 8
7971: PUSH
7972: LD_INT 6
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 72
7984: IFFALSE 7875
// case JMMGirl of 1 :
7986: LD_EXP 2
7990: PUSH
7991: LD_INT 1
7993: DOUBLE
7994: EQUAL
7995: IFTRUE 7999
7997: GO 8284
7999: POP
// begin ChangeSideKappaBase ;
8000: CALL 1439 0 0
// ComTurnUnit ( Joan , JMM ) ;
8004: LD_EXP 10
8008: PPUSH
8009: LD_EXP 8
8013: PPUSH
8014: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
8018: LD_EXP 8
8022: PPUSH
8023: LD_EXP 10
8027: PPUSH
8028: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8032: LD_EXP 10
8036: PUSH
8037: LD_EXP 8
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 87
// wait ( 0 0$1 ) ;
8050: LD_INT 35
8052: PPUSH
8053: CALL_OW 67
// DialogueOn ;
8057: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
8061: LD_EXP 10
8065: PPUSH
8066: LD_STRING D3J-Joan-1
8068: PPUSH
8069: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8073: LD_EXP 8
8077: PPUSH
8078: LD_STRING D3J-JMM-1
8080: PPUSH
8081: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
8085: LD_EXP 10
8089: PPUSH
8090: LD_STRING D3J-Joan-2
8092: PPUSH
8093: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
8097: LD_EXP 8
8101: PPUSH
8102: LD_STRING D3J-JMM-2
8104: PPUSH
8105: CALL_OW 88
// wait ( 0 0$1 ) ;
8109: LD_INT 35
8111: PPUSH
8112: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8116: LD_EXP 8
8120: PPUSH
8121: LD_STRING D4-JMM-1
8123: PPUSH
8124: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
8128: LD_EXP 10
8132: PPUSH
8133: LD_STRING D4-Joan-1
8135: PPUSH
8136: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8140: LD_EXP 8
8144: PPUSH
8145: LD_STRING D4-JMM-2
8147: PPUSH
8148: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
8152: LD_EXP 10
8156: PPUSH
8157: LD_STRING D4-Joan-2
8159: PPUSH
8160: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8164: LD_EXP 8
8168: PPUSH
8169: LD_STRING D4-JMM-3
8171: PPUSH
8172: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8176: LD_INT 10
8178: PPUSH
8179: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8183: LD_EXP 13
8187: PPUSH
8188: LD_STRING D7-Pow-1
8190: PPUSH
8191: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8195: LD_EXP 8
8199: PPUSH
8200: LD_STRING D7-JMM-1
8202: PPUSH
8203: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8207: LD_EXP 13
8211: PPUSH
8212: LD_STRING D7-Pow-2
8214: PPUSH
8215: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8219: LD_EXP 8
8223: PPUSH
8224: LD_STRING D7-JMM-2
8226: PPUSH
8227: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8231: LD_EXP 13
8235: PPUSH
8236: LD_STRING D7-Pow-3
8238: PPUSH
8239: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8243: LD_EXP 8
8247: PPUSH
8248: LD_STRING D7-JMM-3
8250: PPUSH
8251: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8255: LD_EXP 13
8259: PPUSH
8260: LD_STRING D7-Pow-4
8262: PPUSH
8263: CALL_OW 94
// DialogueOff ;
8267: CALL_OW 7
// InGameOff ;
8271: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
8275: LD_STRING M2J
8277: PPUSH
8278: CALL_OW 337
// end ; 2 :
8282: GO 8847
8284: LD_INT 2
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8292
8290: GO 8577
8292: POP
// begin ChangeSideKappaBase ;
8293: CALL 1439 0 0
// ComTurnUnit ( Lisa , JMM ) ;
8297: LD_EXP 11
8301: PPUSH
8302: LD_EXP 8
8306: PPUSH
8307: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
8311: LD_EXP 8
8315: PPUSH
8316: LD_EXP 11
8320: PPUSH
8321: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
8325: LD_EXP 11
8329: PUSH
8330: LD_EXP 8
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 87
// wait ( 0 0$1 ) ;
8343: LD_INT 35
8345: PPUSH
8346: CALL_OW 67
// DialogueOn ;
8350: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
8354: LD_EXP 11
8358: PPUSH
8359: LD_STRING D3L-Lisa-1
8361: PPUSH
8362: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
8366: LD_EXP 8
8370: PPUSH
8371: LD_STRING D3L-JMM-1
8373: PPUSH
8374: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
8378: LD_EXP 11
8382: PPUSH
8383: LD_STRING D3L-Lisa-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
8390: LD_EXP 8
8394: PPUSH
8395: LD_STRING D3L-JMM-2
8397: PPUSH
8398: CALL_OW 88
// wait ( 0 0$1 ) ;
8402: LD_INT 35
8404: PPUSH
8405: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8409: LD_EXP 8
8413: PPUSH
8414: LD_STRING D4-JMM-1
8416: PPUSH
8417: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8421: LD_EXP 11
8425: PPUSH
8426: LD_STRING D4-Lisa-1
8428: PPUSH
8429: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8433: LD_EXP 8
8437: PPUSH
8438: LD_STRING D4-JMM-1
8440: PPUSH
8441: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8445: LD_EXP 11
8449: PPUSH
8450: LD_STRING D4-Lisa-2
8452: PPUSH
8453: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8457: LD_EXP 8
8461: PPUSH
8462: LD_STRING D4-JMM-3
8464: PPUSH
8465: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8469: LD_INT 10
8471: PPUSH
8472: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8476: LD_EXP 13
8480: PPUSH
8481: LD_STRING D7-Pow-1
8483: PPUSH
8484: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8488: LD_EXP 8
8492: PPUSH
8493: LD_STRING D7-JMM-1
8495: PPUSH
8496: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8500: LD_EXP 13
8504: PPUSH
8505: LD_STRING D7-Pow-2
8507: PPUSH
8508: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8512: LD_EXP 8
8516: PPUSH
8517: LD_STRING D7-JMM-2
8519: PPUSH
8520: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8524: LD_EXP 13
8528: PPUSH
8529: LD_STRING D7-Pow-3
8531: PPUSH
8532: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8536: LD_EXP 8
8540: PPUSH
8541: LD_STRING D7-JMM-3
8543: PPUSH
8544: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8548: LD_EXP 13
8552: PPUSH
8553: LD_STRING D7-Pow-4
8555: PPUSH
8556: CALL_OW 94
// DialogueOff ;
8560: CALL_OW 7
// InGameOff ;
8564: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8568: LD_STRING M2L
8570: PPUSH
8571: CALL_OW 337
// end ; 3 :
8575: GO 8847
8577: LD_INT 3
8579: DOUBLE
8580: EQUAL
8581: IFTRUE 8585
8583: GO 8846
8585: POP
// begin ChangeSideKappaBase ;
8586: CALL 1439 0 0
// ComTurnUnit ( Connie , JMM ) ;
8590: LD_EXP 12
8594: PPUSH
8595: LD_EXP 8
8599: PPUSH
8600: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8604: LD_EXP 8
8608: PPUSH
8609: LD_EXP 12
8613: PPUSH
8614: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8618: LD_EXP 10
8622: PUSH
8623: LD_EXP 8
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PPUSH
8632: CALL_OW 87
// wait ( 0 0$1 ) ;
8636: LD_INT 35
8638: PPUSH
8639: CALL_OW 67
// DialogueOn ;
8643: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8647: LD_EXP 12
8651: PPUSH
8652: LD_STRING D3X-Con-1
8654: PPUSH
8655: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8659: LD_EXP 8
8663: PPUSH
8664: LD_STRING D3J-JMM-1
8666: PPUSH
8667: CALL_OW 88
// wait ( 0 0$1 ) ;
8671: LD_INT 35
8673: PPUSH
8674: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8678: LD_EXP 8
8682: PPUSH
8683: LD_STRING D4-JMM-1
8685: PPUSH
8686: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8690: LD_EXP 12
8694: PPUSH
8695: LD_STRING D4-Con-1
8697: PPUSH
8698: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8702: LD_EXP 8
8706: PPUSH
8707: LD_STRING D4-JMM-2
8709: PPUSH
8710: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8714: LD_EXP 12
8718: PPUSH
8719: LD_STRING D4-Con-2
8721: PPUSH
8722: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8726: LD_EXP 8
8730: PPUSH
8731: LD_STRING D4-JMM-3
8733: PPUSH
8734: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8738: LD_INT 10
8740: PPUSH
8741: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8745: LD_EXP 13
8749: PPUSH
8750: LD_STRING D7-Pow-1
8752: PPUSH
8753: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8757: LD_EXP 8
8761: PPUSH
8762: LD_STRING D7-JMM-1
8764: PPUSH
8765: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8769: LD_EXP 13
8773: PPUSH
8774: LD_STRING D7-Pow-2
8776: PPUSH
8777: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8781: LD_EXP 8
8785: PPUSH
8786: LD_STRING D7-JMM-2
8788: PPUSH
8789: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8793: LD_EXP 13
8797: PPUSH
8798: LD_STRING D7-Pow-3
8800: PPUSH
8801: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8805: LD_EXP 8
8809: PPUSH
8810: LD_STRING D7-JMM-3
8812: PPUSH
8813: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8817: LD_EXP 13
8821: PPUSH
8822: LD_STRING D7-Pow-4
8824: PPUSH
8825: CALL_OW 94
// DialogueOff ;
8829: CALL_OW 7
// InGameOff ;
8833: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8837: LD_STRING M2X
8839: PPUSH
8840: CALL_OW 337
// end ; end ;
8844: GO 8847
8846: POP
// SaveForQuickRestart ;
8847: CALL_OW 22
// end ;
8851: PPOPN 1
8853: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8854: LD_INT 32
8856: PPUSH
8857: CALL_OW 306
8861: IFFALSE 9186
8863: GO 8865
8865: DISABLE
// begin case JMMGirl of 1 :
8866: LD_EXP 2
8870: PUSH
8871: LD_INT 1
8873: DOUBLE
8874: EQUAL
8875: IFTRUE 8879
8877: GO 8993
8879: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8880: LD_EXP 8
8884: PPUSH
8885: LD_STRING D6J-JMM-1
8887: PPUSH
8888: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8892: LD_STRING 13f_Denis
8894: PPUSH
8895: CALL_OW 28
8899: PUSH
8900: LD_STRING 13s_Denis
8902: PPUSH
8903: CALL_OW 28
8907: OR
8908: IFFALSE 8948
// begin Say ( Joan , D6J-Joan-1 ) ;
8910: LD_EXP 10
8914: PPUSH
8915: LD_STRING D6J-Joan-1
8917: PPUSH
8918: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
8922: LD_EXP 8
8926: PPUSH
8927: LD_STRING D6J-JMM-2
8929: PPUSH
8930: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
8934: LD_EXP 10
8938: PPUSH
8939: LD_STRING D6J-Joan-2
8941: PPUSH
8942: CALL_OW 88
// end else
8946: GO 8960
// Say ( Joan , D6J-Joan-2a ) ;
8948: LD_EXP 10
8952: PPUSH
8953: LD_STRING D6J-Joan-2a
8955: PPUSH
8956: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
8960: LD_EXP 8
8964: PPUSH
8965: LD_STRING D6J-JMM-3
8967: PPUSH
8968: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
8972: LD_EXP 10
8976: PPUSH
8977: LD_STRING D6J-Joan-3
8979: PPUSH
8980: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8984: LD_STRING M3
8986: PPUSH
8987: CALL_OW 337
// end ; 2 :
8991: GO 9186
8993: LD_INT 2
8995: DOUBLE
8996: EQUAL
8997: IFTRUE 9001
8999: GO 9059
9001: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
9002: LD_EXP 8
9006: PPUSH
9007: LD_STRING D6L-JMM-1
9009: PPUSH
9010: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
9014: LD_EXP 11
9018: PPUSH
9019: LD_STRING D6L-Lisa-1
9021: PPUSH
9022: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
9026: LD_EXP 8
9030: PPUSH
9031: LD_STRING D6L-JMM-2
9033: PPUSH
9034: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
9038: LD_EXP 11
9042: PPUSH
9043: LD_STRING D6L-Lisa-2
9045: PPUSH
9046: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9050: LD_STRING M3
9052: PPUSH
9053: CALL_OW 337
// end ; 3 :
9057: GO 9186
9059: LD_INT 3
9061: DOUBLE
9062: EQUAL
9063: IFTRUE 9067
9065: GO 9185
9067: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
9068: LD_EXP 8
9072: PPUSH
9073: LD_STRING D6X-JMM-1
9075: PPUSH
9076: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
9080: LD_EXP 12
9084: PPUSH
9085: LD_STRING D6X-Con-1
9087: PPUSH
9088: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
9092: LD_EXP 8
9096: PPUSH
9097: LD_STRING D6X-JMM-2
9099: PPUSH
9100: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
9104: LD_EXP 12
9108: PPUSH
9109: LD_STRING D6X-Con-2
9111: PPUSH
9112: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
9116: LD_EXP 8
9120: PPUSH
9121: LD_STRING D6X-JMM-3
9123: PPUSH
9124: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
9128: LD_EXP 12
9132: PPUSH
9133: LD_STRING D6X-Con-3
9135: PPUSH
9136: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
9140: LD_EXP 8
9144: PPUSH
9145: LD_STRING D6X-JMM-4
9147: PPUSH
9148: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
9152: LD_EXP 12
9156: PPUSH
9157: LD_STRING D6X-Con-4
9159: PPUSH
9160: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
9164: LD_EXP 8
9168: PPUSH
9169: LD_STRING D6X-JMM-5
9171: PPUSH
9172: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9176: LD_STRING M3
9178: PPUSH
9179: CALL_OW 337
// end ; end ;
9183: GO 9186
9185: POP
// end ;
9186: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
9187: LD_INT 22
9189: PUSH
9190: LD_INT 1
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 33
9199: PUSH
9200: LD_INT 2
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PPUSH
9211: CALL_OW 69
9215: PPUSH
9216: CALL_OW 306
9220: IFFALSE 9366
9222: GO 9224
9224: DISABLE
// begin case JMMGirl of 1 :
9225: LD_EXP 2
9229: PUSH
9230: LD_INT 1
9232: DOUBLE
9233: EQUAL
9234: IFTRUE 9238
9236: GO 9275
9238: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9239: LD_EXP 8
9243: PPUSH
9244: LD_STRING D5-JMM-1
9246: PPUSH
9247: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9251: LD_INT 77
9253: PPUSH
9254: LD_INT 87
9256: PPUSH
9257: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
9261: LD_EXP 10
9265: PPUSH
9266: LD_STRING D5-Joan-1
9268: PPUSH
9269: CALL_OW 88
// end ; 2 :
9273: GO 9366
9275: LD_INT 2
9277: DOUBLE
9278: EQUAL
9279: IFTRUE 9283
9281: GO 9320
9283: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9284: LD_EXP 8
9288: PPUSH
9289: LD_STRING D5-JMM-1
9291: PPUSH
9292: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9296: LD_INT 77
9298: PPUSH
9299: LD_INT 87
9301: PPUSH
9302: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
9306: LD_EXP 11
9310: PPUSH
9311: LD_STRING D5-Lisa-1
9313: PPUSH
9314: CALL_OW 88
// end ; 3 :
9318: GO 9366
9320: LD_INT 3
9322: DOUBLE
9323: EQUAL
9324: IFTRUE 9328
9326: GO 9365
9328: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9329: LD_EXP 8
9333: PPUSH
9334: LD_STRING D5-JMM-1
9336: PPUSH
9337: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9341: LD_INT 77
9343: PPUSH
9344: LD_INT 87
9346: PPUSH
9347: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
9351: LD_EXP 12
9355: PPUSH
9356: LD_STRING D5-Con-1
9358: PPUSH
9359: CALL_OW 88
// end ; end ;
9363: GO 9366
9365: POP
// end ;
9366: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
9367: LD_EXP 8
9371: PPUSH
9372: CALL_OW 310
9376: PPUSH
9377: LD_INT 16
9379: PPUSH
9380: CALL_OW 308
9384: IFFALSE 9734
9386: GO 9388
9388: DISABLE
9389: LD_INT 0
9391: PPUSH
9392: PPUSH
// begin enable ;
9393: ENABLE
// if JMMGirl = 1 then
9394: LD_EXP 2
9398: PUSH
9399: LD_INT 1
9401: EQUAL
9402: IFFALSE 9419
// JMMGirlVeh := IsInUnit ( Joan ) ;
9404: LD_ADDR_VAR 0 1
9408: PUSH
9409: LD_EXP 10
9413: PPUSH
9414: CALL_OW 310
9418: ST_TO_ADDR
// if JMMGirl = 2 then
9419: LD_EXP 2
9423: PUSH
9424: LD_INT 2
9426: EQUAL
9427: IFFALSE 9444
// JMMGirlVeh := IsInUnit ( Lisa ) ;
9429: LD_ADDR_VAR 0 1
9433: PUSH
9434: LD_EXP 11
9438: PPUSH
9439: CALL_OW 310
9443: ST_TO_ADDR
// if JMMGirl = 3 then
9444: LD_EXP 2
9448: PUSH
9449: LD_INT 3
9451: EQUAL
9452: IFFALSE 9469
// JMMGirlVeh := IsInUnit ( Connie ) ;
9454: LD_ADDR_VAR 0 1
9458: PUSH
9459: LD_EXP 12
9463: PPUSH
9464: CALL_OW 310
9468: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9469: LD_EXP 8
9473: PPUSH
9474: CALL_OW 310
9478: PPUSH
9479: LD_EXP 10
9483: PPUSH
9484: CALL_OW 310
9488: PPUSH
9489: CALL_OW 296
9493: PUSH
9494: LD_INT 10
9496: LESS
9497: PUSH
9498: LD_EXP 8
9502: PPUSH
9503: CALL_OW 310
9507: PPUSH
9508: LD_EXP 11
9512: PPUSH
9513: CALL_OW 310
9517: PPUSH
9518: CALL_OW 296
9522: PUSH
9523: LD_INT 10
9525: LESS
9526: OR
9527: PUSH
9528: LD_EXP 8
9532: PPUSH
9533: CALL_OW 310
9537: PPUSH
9538: LD_EXP 12
9542: PPUSH
9543: CALL_OW 310
9547: PPUSH
9548: CALL_OW 296
9552: PUSH
9553: LD_INT 10
9555: LESS
9556: OR
9557: IFFALSE 9654
// begin case Query ( Q3b ) of 1 :
9559: LD_STRING Q3b
9561: PPUSH
9562: CALL_OW 97
9566: PUSH
9567: LD_INT 1
9569: DOUBLE
9570: EQUAL
9571: IFTRUE 9575
9573: GO 9651
9575: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9576: LD_VAR 0 1
9580: PPUSH
9581: CALL_OW 265
9585: PUSH
9586: EMPTY
9587: LIST
9588: PUSH
9589: LD_VAR 0 1
9593: PPUSH
9594: CALL_OW 262
9598: PUSH
9599: EMPTY
9600: LIST
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 263
9611: PUSH
9612: EMPTY
9613: LIST
9614: PUSH
9615: LD_VAR 0 1
9619: PPUSH
9620: CALL_OW 264
9624: PUSH
9625: EMPTY
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PPUSH
9634: LD_STRING 14_JMMGirlVeh_1
9636: PPUSH
9637: CALL_OW 39
// FinishMission ( false ) ;
9641: LD_INT 0
9643: PPUSH
9644: CALL 9888 0 1
// disable ;
9648: DISABLE
// end ; end ;
9649: GO 9652
9651: POP
// end else
9652: GO 9734
// begin if JMMGirl = 1 then
9654: LD_EXP 2
9658: PUSH
9659: LD_INT 1
9661: EQUAL
9662: IFFALSE 9679
// dec := Query ( Q3bJ ) else
9664: LD_ADDR_VAR 0 2
9668: PUSH
9669: LD_STRING Q3bJ
9671: PPUSH
9672: CALL_OW 97
9676: ST_TO_ADDR
9677: GO 9717
// if JMMGirl = 2 then
9679: LD_EXP 2
9683: PUSH
9684: LD_INT 2
9686: EQUAL
9687: IFFALSE 9704
// dec := Query ( Q3bL ) else
9689: LD_ADDR_VAR 0 2
9693: PUSH
9694: LD_STRING Q3bL
9696: PPUSH
9697: CALL_OW 97
9701: ST_TO_ADDR
9702: GO 9717
// dec := Query ( Q3bX ) ;
9704: LD_ADDR_VAR 0 2
9708: PUSH
9709: LD_STRING Q3bX
9711: PPUSH
9712: CALL_OW 97
9716: ST_TO_ADDR
// if dec = 1 then
9717: LD_VAR 0 2
9721: PUSH
9722: LD_INT 1
9724: EQUAL
9725: IFFALSE 9734
// FinishMission ( false ) ;
9727: LD_INT 0
9729: PPUSH
9730: CALL 9888 0 1
// end ; end ;
9734: PPOPN 2
9736: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9737: LD_INT 22
9739: PUSH
9740: LD_INT 3
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: LD_INT 23
9749: PUSH
9750: LD_INT 3
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 21
9759: PUSH
9760: LD_INT 1
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 69
9776: PUSH
9777: LD_INT 0
9779: EQUAL
9780: IFFALSE 9887
9782: GO 9784
9784: DISABLE
// begin DialogueOn ;
9785: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9789: LD_EXP 8
9793: PPUSH
9794: LD_STRING DEnd-JMM-1
9796: PPUSH
9797: CALL_OW 88
// case JMMGirl of 1 :
9801: LD_EXP 2
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9829
9814: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9815: LD_EXP 10
9819: PPUSH
9820: LD_STRING DEnd-Joan-1
9822: PPUSH
9823: CALL_OW 88
9827: GO 9876
9829: LD_INT 2
9831: DOUBLE
9832: EQUAL
9833: IFTRUE 9837
9835: GO 9852
9837: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9838: LD_EXP 11
9842: PPUSH
9843: LD_STRING DEnd-Lisa-1
9845: PPUSH
9846: CALL_OW 88
9850: GO 9876
9852: LD_INT 3
9854: DOUBLE
9855: EQUAL
9856: IFTRUE 9860
9858: GO 9875
9860: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9861: LD_EXP 12
9865: PPUSH
9866: LD_STRING DEnd-Con-1
9868: PPUSH
9869: CALL_OW 88
9873: GO 9876
9875: POP
// DialogueOff ;
9876: CALL_OW 7
// FinishMission ( false ) ;
9880: LD_INT 0
9882: PPUSH
9883: CALL 9888 0 1
// end ;
9887: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9888: LD_INT 0
9890: PPUSH
9891: PPUSH
9892: PPUSH
9893: PPUSH
9894: PPUSH
9895: PPUSH
// m1 := false ;
9896: LD_ADDR_VAR 0 4
9900: PUSH
9901: LD_INT 0
9903: ST_TO_ADDR
// m2 := false ;
9904: LD_ADDR_VAR 0 5
9908: PUSH
9909: LD_INT 0
9911: ST_TO_ADDR
// m3 := false ;
9912: LD_ADDR_VAR 0 6
9916: PUSH
9917: LD_INT 0
9919: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
9920: LD_ADDR_VAR 0 7
9924: PUSH
9925: LD_INT 22
9927: PUSH
9928: LD_INT 3
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 21
9937: PUSH
9938: LD_INT 1
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PPUSH
9949: CALL_OW 69
9953: PUSH
9954: LD_INT 0
9956: EQUAL
9957: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9958: LD_EXP 8
9962: PPUSH
9963: LD_STRING 14_JMM
9965: PPUSH
9966: CALL_OW 38
// if tick <= 50 50$00 then
9970: LD_OWVAR 1
9974: PUSH
9975: LD_INT 105000
9977: LESSEQUAL
9978: IFFALSE 9987
// SetAchievement ( ACH_ASPEED_14 ) ;
9980: LD_STRING ACH_ASPEED_14
9982: PPUSH
9983: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9987: LD_EXP 8
9991: PPUSH
9992: CALL_OW 310
9996: PUSH
9997: LD_EXP 8
10001: PPUSH
10002: CALL_OW 310
10006: PPUSH
10007: CALL_OW 247
10011: PUSH
10012: LD_INT 2
10014: EQUAL
10015: AND
10016: IFFALSE 10098
// begin JMMNewVeh = IsInUnit ( JMM ) ;
10018: LD_ADDR_VAR 0 3
10022: PUSH
10023: LD_EXP 8
10027: PPUSH
10028: CALL_OW 310
10032: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
10033: LD_VAR 0 3
10037: PPUSH
10038: CALL_OW 265
10042: PUSH
10043: EMPTY
10044: LIST
10045: PUSH
10046: LD_VAR 0 3
10050: PPUSH
10051: CALL_OW 262
10055: PUSH
10056: EMPTY
10057: LIST
10058: PUSH
10059: LD_VAR 0 3
10063: PPUSH
10064: CALL_OW 263
10068: PUSH
10069: EMPTY
10070: LIST
10071: PUSH
10072: LD_VAR 0 3
10076: PPUSH
10077: CALL_OW 264
10081: PUSH
10082: EMPTY
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: PPUSH
10091: LD_STRING 14_JMMVeh_1
10093: PPUSH
10094: CALL_OW 39
// end ; if fastEnd then
10098: LD_VAR 0 1
10102: IFFALSE 10193
// begin AddMedal ( fastend , - 1 ) ;
10104: LD_STRING fastend
10106: PPUSH
10107: LD_INT 1
10109: NEG
10110: PPUSH
10111: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10115: LD_STRING fastend
10117: PPUSH
10118: LD_INT 1
10120: NEG
10121: PPUSH
10122: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10126: LD_STRING fastend
10128: PPUSH
10129: LD_INT 1
10131: NEG
10132: PPUSH
10133: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10137: LD_EXP 2
10141: PPUSH
10142: LD_STRING 14_JMMGirl_1
10144: PPUSH
10145: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10149: LD_INT 0
10151: PPUSH
10152: LD_STRING 14_JMMGirlStatus_1
10154: PPUSH
10155: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10159: LD_INT 0
10161: PPUSH
10162: LD_STRING 14_KappaStatus_1
10164: PPUSH
10165: CALL_OW 39
// GiveMedals ( Eliminate ) ;
10169: LD_STRING Eliminate
10171: PPUSH
10172: CALL_OW 102
// RewardPeople ( JMM ) ;
10176: LD_EXP 8
10180: PPUSH
10181: CALL_OW 43
// YouWin ;
10185: CALL_OW 103
// exit ;
10189: GO 10839
// end else
10191: GO 10732
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10193: LD_EXP 2
10197: PPUSH
10198: LD_STRING 14_JMMGirl_1
10200: PPUSH
10201: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
10205: LD_VAR 0 7
10209: PPUSH
10210: LD_STRING 14_KappaStatus_1
10212: PPUSH
10213: CALL_OW 39
// case JMMGirl of 1 :
10217: LD_EXP 2
10221: PUSH
10222: LD_INT 1
10224: DOUBLE
10225: EQUAL
10226: IFTRUE 10230
10228: GO 10358
10230: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10231: LD_EXP 10
10235: PPUSH
10236: CALL_OW 302
10240: PUSH
10241: LD_EXP 10
10245: PPUSH
10246: CALL_OW 255
10250: PUSH
10251: LD_INT 1
10253: EQUAL
10254: AND
10255: PUSH
10256: LD_VAR 0 7
10260: PUSH
10261: LD_EXP 8
10265: PPUSH
10266: CALL_OW 310
10270: PPUSH
10271: LD_EXP 10
10275: PPUSH
10276: CALL_OW 310
10280: PPUSH
10281: CALL_OW 296
10285: PUSH
10286: LD_INT 10
10288: LESS
10289: OR
10290: AND
10291: IFFALSE 10335
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10293: LD_INT 1
10295: PPUSH
10296: LD_STRING 14_JMMGirlStatus_1
10298: PPUSH
10299: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10303: LD_EXP 10
10307: PPUSH
10308: LD_STRING 14_Joan
10310: PPUSH
10311: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10315: LD_STRING protect
10317: PPUSH
10318: LD_INT 1
10320: PPUSH
10321: CALL_OW 101
// m1 := true ;
10325: LD_ADDR_VAR 0 4
10329: PUSH
10330: LD_INT 1
10332: ST_TO_ADDR
// end else
10333: GO 10356
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10335: LD_INT 0
10337: PPUSH
10338: LD_STRING 14_JMMGirlStatus_1
10340: PPUSH
10341: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10345: LD_STRING protect
10347: PPUSH
10348: LD_INT 1
10350: NEG
10351: PPUSH
10352: CALL_OW 101
// end ; end ; 2 :
10356: GO 10631
10358: LD_INT 2
10360: DOUBLE
10361: EQUAL
10362: IFTRUE 10366
10364: GO 10494
10366: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10367: LD_EXP 11
10371: PPUSH
10372: CALL_OW 302
10376: PUSH
10377: LD_EXP 11
10381: PPUSH
10382: CALL_OW 255
10386: PUSH
10387: LD_INT 1
10389: EQUAL
10390: AND
10391: PUSH
10392: LD_VAR 0 7
10396: PUSH
10397: LD_EXP 8
10401: PPUSH
10402: CALL_OW 310
10406: PPUSH
10407: LD_EXP 11
10411: PPUSH
10412: CALL_OW 310
10416: PPUSH
10417: CALL_OW 296
10421: PUSH
10422: LD_INT 10
10424: LESS
10425: OR
10426: AND
10427: IFFALSE 10471
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10429: LD_INT 1
10431: PPUSH
10432: LD_STRING 14_JMMGirlStatus_1
10434: PPUSH
10435: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10439: LD_EXP 11
10443: PPUSH
10444: LD_STRING 14_Lisa
10446: PPUSH
10447: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10451: LD_STRING protect
10453: PPUSH
10454: LD_INT 1
10456: PPUSH
10457: CALL_OW 101
// m1 := true ;
10461: LD_ADDR_VAR 0 4
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// end else
10469: GO 10492
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10471: LD_INT 0
10473: PPUSH
10474: LD_STRING 14_JMMGirlStatus_1
10476: PPUSH
10477: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10481: LD_STRING protect
10483: PPUSH
10484: LD_INT 2
10486: NEG
10487: PPUSH
10488: CALL_OW 101
// end ; end ; 3 :
10492: GO 10631
10494: LD_INT 3
10496: DOUBLE
10497: EQUAL
10498: IFTRUE 10502
10500: GO 10630
10502: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10503: LD_EXP 12
10507: PPUSH
10508: CALL_OW 302
10512: PUSH
10513: LD_EXP 12
10517: PPUSH
10518: CALL_OW 255
10522: PUSH
10523: LD_INT 1
10525: EQUAL
10526: AND
10527: PUSH
10528: LD_VAR 0 7
10532: PUSH
10533: LD_EXP 8
10537: PPUSH
10538: CALL_OW 310
10542: PPUSH
10543: LD_EXP 12
10547: PPUSH
10548: CALL_OW 310
10552: PPUSH
10553: CALL_OW 296
10557: PUSH
10558: LD_INT 10
10560: LESS
10561: OR
10562: AND
10563: IFFALSE 10607
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10565: LD_INT 1
10567: PPUSH
10568: LD_STRING 14_JMMGirlStatus_1
10570: PPUSH
10571: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10575: LD_EXP 12
10579: PPUSH
10580: LD_STRING 14_Connie
10582: PPUSH
10583: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10587: LD_STRING protect
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 101
// m1 := true ;
10597: LD_ADDR_VAR 0 4
10601: PUSH
10602: LD_INT 1
10604: ST_TO_ADDR
// end else
10605: GO 10628
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10607: LD_INT 0
10609: PPUSH
10610: LD_STRING 14_JMMGirlStatus_1
10612: PPUSH
10613: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10617: LD_STRING protect
10619: PPUSH
10620: LD_INT 3
10622: NEG
10623: PPUSH
10624: CALL_OW 101
// end ; end ; end ;
10628: GO 10631
10630: POP
// if amLaserCounter >= 2 then
10631: LD_EXP 7
10635: PUSH
10636: LD_INT 2
10638: GREATEREQUAL
10639: IFFALSE 10661
// begin AddMedal ( double , 1 ) ;
10641: LD_STRING double
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: CALL_OW 101
// m2 := true ;
10651: LD_ADDR_VAR 0 5
10655: PUSH
10656: LD_INT 1
10658: ST_TO_ADDR
// end else
10659: GO 10695
// begin if amLaserCounter = 1 then
10661: LD_EXP 7
10665: PUSH
10666: LD_INT 1
10668: EQUAL
10669: IFFALSE 10684
// AddMedal ( double , - 2 ) else
10671: LD_STRING double
10673: PPUSH
10674: LD_INT 2
10676: NEG
10677: PPUSH
10678: CALL_OW 101
10682: GO 10695
// AddMedal ( double , - 1 ) ;
10684: LD_STRING double
10686: PPUSH
10687: LD_INT 1
10689: NEG
10690: PPUSH
10691: CALL_OW 101
// end ; if ruEliminated then
10695: LD_VAR 0 7
10699: IFFALSE 10721
// begin AddMedal ( base , 1 ) ;
10701: LD_STRING base
10703: PPUSH
10704: LD_INT 1
10706: PPUSH
10707: CALL_OW 101
// m3 := true ;
10711: LD_ADDR_VAR 0 6
10715: PUSH
10716: LD_INT 1
10718: ST_TO_ADDR
// end else
10719: GO 10732
// AddMedal ( base , - 1 ) ;
10721: LD_STRING base
10723: PPUSH
10724: LD_INT 1
10726: NEG
10727: PPUSH
10728: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10732: LD_VAR 0 4
10736: PUSH
10737: LD_VAR 0 5
10741: AND
10742: PUSH
10743: LD_VAR 0 6
10747: AND
10748: PUSH
10749: LD_OWVAR 67
10753: PUSH
10754: LD_INT 3
10756: GREATEREQUAL
10757: AND
10758: IFFALSE 10770
// SetAchievementEX ( ACH_AMER , 14 ) ;
10760: LD_STRING ACH_AMER
10762: PPUSH
10763: LD_INT 14
10765: PPUSH
10766: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10770: LD_STRING Eliminate
10772: PPUSH
10773: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10777: LD_INT 22
10779: PUSH
10780: LD_INT 1
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 3
10789: PUSH
10790: LD_INT 25
10792: PUSH
10793: LD_INT 12
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 3
10806: PUSH
10807: LD_INT 25
10809: PUSH
10810: LD_INT 16
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: LIST
10825: PPUSH
10826: CALL_OW 69
10830: PPUSH
10831: CALL_OW 43
// YouWin ;
10835: CALL_OW 103
// end ; end_of_file
10839: LD_VAR 0 2
10843: RET
// export function CreateNature ; var i , un ; begin
10844: LD_INT 0
10846: PPUSH
10847: PPUSH
10848: PPUSH
// PrepareEnchidna ;
10849: CALL 65244 0 0
// for i := 1 to 3 do
10853: LD_ADDR_VAR 0 2
10857: PUSH
10858: DOUBLE
10859: LD_INT 1
10861: DEC
10862: ST_TO_ADDR
10863: LD_INT 3
10865: PUSH
10866: FOR_TO
10867: IFFALSE 10916
// begin un := CreateHuman ;
10869: LD_ADDR_VAR 0 3
10873: PUSH
10874: CALL_OW 44
10878: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10879: LD_VAR 0 3
10883: PPUSH
10884: LD_INT 0
10886: PPUSH
10887: LD_INT 5
10889: PPUSH
10890: CALL_OW 12
10894: PPUSH
10895: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10899: LD_VAR 0 3
10903: PPUSH
10904: LD_INT 9
10906: PPUSH
10907: LD_INT 0
10909: PPUSH
10910: CALL_OW 49
// end ;
10914: GO 10866
10916: POP
10917: POP
// PrepareHorse ;
10918: CALL 65404 0 0
// for i := 1 to 2 do
10922: LD_ADDR_VAR 0 2
10926: PUSH
10927: DOUBLE
10928: LD_INT 1
10930: DEC
10931: ST_TO_ADDR
10932: LD_INT 2
10934: PUSH
10935: FOR_TO
10936: IFFALSE 10985
// begin un := CreateHuman ;
10938: LD_ADDR_VAR 0 3
10942: PUSH
10943: CALL_OW 44
10947: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10948: LD_VAR 0 3
10952: PPUSH
10953: LD_INT 0
10955: PPUSH
10956: LD_INT 5
10958: PPUSH
10959: CALL_OW 12
10963: PPUSH
10964: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10968: LD_VAR 0 3
10972: PPUSH
10973: LD_INT 9
10975: PPUSH
10976: LD_INT 0
10978: PPUSH
10979: CALL_OW 49
// end ;
10983: GO 10935
10985: POP
10986: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
10987: LD_ADDR_VAR 0 2
10991: PUSH
10992: DOUBLE
10993: LD_INT 1
10995: DEC
10996: ST_TO_ADDR
10997: LD_INT 4
10999: PUSH
11000: LD_INT 5
11002: PUSH
11003: LD_INT 5
11005: PUSH
11006: LD_INT 5
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_OWVAR 67
11019: ARRAY
11020: PUSH
11021: FOR_TO
11022: IFFALSE 11086
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
11024: LD_INT 0
11026: PPUSH
11027: LD_INT 5
11029: PPUSH
11030: CALL_OW 12
11034: PPUSH
11035: CALL 65075 0 1
// un := CreateHuman ;
11039: LD_ADDR_VAR 0 3
11043: PUSH
11044: CALL_OW 44
11048: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11049: LD_VAR 0 3
11053: PPUSH
11054: LD_INT 0
11056: PPUSH
11057: LD_INT 5
11059: PPUSH
11060: CALL_OW 12
11064: PPUSH
11065: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
11069: LD_VAR 0 3
11073: PPUSH
11074: LD_INT 8
11076: PPUSH
11077: LD_INT 0
11079: PPUSH
11080: CALL_OW 49
// end ;
11084: GO 11021
11086: POP
11087: POP
// PrepareFish ;
11088: CALL 65324 0 0
// for i := 1 to 2 do
11092: LD_ADDR_VAR 0 2
11096: PUSH
11097: DOUBLE
11098: LD_INT 1
11100: DEC
11101: ST_TO_ADDR
11102: LD_INT 2
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11155
// begin un := CreateHuman ;
11108: LD_ADDR_VAR 0 3
11112: PUSH
11113: CALL_OW 44
11117: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11118: LD_VAR 0 3
11122: PPUSH
11123: LD_INT 0
11125: PPUSH
11126: LD_INT 5
11128: PPUSH
11129: CALL_OW 12
11133: PPUSH
11134: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_INT 6
11145: PPUSH
11146: LD_INT 0
11148: PPUSH
11149: CALL_OW 49
// end ;
11153: GO 11105
11155: POP
11156: POP
// PrepareFrog ;
11157: CALL 65284 0 0
// for i := 1 to 2 do
11161: LD_ADDR_VAR 0 2
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_INT 2
11173: PUSH
11174: FOR_TO
11175: IFFALSE 11224
// begin un := CreateHuman ;
11177: LD_ADDR_VAR 0 3
11181: PUSH
11182: CALL_OW 44
11186: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11187: LD_VAR 0 3
11191: PPUSH
11192: LD_INT 0
11194: PPUSH
11195: LD_INT 5
11197: PPUSH
11198: CALL_OW 12
11202: PPUSH
11203: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
11207: LD_VAR 0 3
11211: PPUSH
11212: LD_INT 7
11214: PPUSH
11215: LD_INT 0
11217: PPUSH
11218: CALL_OW 49
// end ;
11222: GO 11174
11224: POP
11225: POP
// PrepareMastodont ;
11226: CALL 65444 0 0
// un := CreateVehicle ;
11230: LD_ADDR_VAR 0 3
11234: PUSH
11235: CALL_OW 45
11239: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
11240: LD_VAR 0 3
11244: PPUSH
11245: LD_INT 166
11247: PPUSH
11248: LD_INT 134
11250: PPUSH
11251: LD_INT 1
11253: PPUSH
11254: LD_INT 0
11256: PPUSH
11257: CALL 70934 0 5
// end ; end_of_file
11261: LD_VAR 0 1
11265: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
11266: LD_INT 14
11268: PPUSH
11269: CALL_OW 435
11273: PUSH
11274: LD_INT 20
11276: LESS
11277: IFFALSE 11319
11279: GO 11281
11281: DISABLE
// begin enable ;
11282: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11283: LD_INT 35
11285: PPUSH
11286: LD_INT 735
11288: PPUSH
11289: CALL_OW 12
11293: PPUSH
11294: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 5
11303: PPUSH
11304: CALL_OW 12
11308: PPUSH
11309: LD_INT 14
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 55
// end ;
11319: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11320: LD_INT 13
11322: PPUSH
11323: CALL_OW 435
11327: PUSH
11328: LD_INT 30
11330: LESS
11331: IFFALSE 11373
11333: GO 11335
11335: DISABLE
// begin enable ;
11336: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11337: LD_INT 35
11339: PPUSH
11340: LD_INT 735
11342: PPUSH
11343: CALL_OW 12
11347: PPUSH
11348: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
11352: LD_INT 1
11354: PPUSH
11355: LD_INT 5
11357: PPUSH
11358: CALL_OW 12
11362: PPUSH
11363: LD_INT 13
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 55
// end ;
11373: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11374: LD_INT 13
11376: PPUSH
11377: CALL_OW 435
11381: PUSH
11382: LD_INT 30
11384: LESS
11385: IFFALSE 11418
11387: GO 11389
11389: DISABLE
// begin enable ;
11390: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
11391: LD_INT 1
11393: PPUSH
11394: LD_INT 5
11396: PPUSH
11397: CALL_OW 12
11401: PPUSH
11402: LD_INT 133
11404: PPUSH
11405: LD_INT 122
11407: PPUSH
11408: LD_INT 20
11410: PPUSH
11411: LD_INT 1
11413: PPUSH
11414: CALL_OW 56
// end ; end_of_file end_of_file
11418: END
// export globalGameSaveCounter ; every 0 0$1 do
11419: GO 11421
11421: DISABLE
// begin enable ;
11422: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11423: LD_STRING updateTimer(
11425: PUSH
11426: LD_OWVAR 1
11430: STR
11431: PUSH
11432: LD_STRING );
11434: STR
11435: PPUSH
11436: CALL_OW 559
// end ;
11440: END
// every 0 0$1 do
11441: GO 11443
11443: DISABLE
// begin globalGameSaveCounter := 0 ;
11444: LD_ADDR_EXP 21
11448: PUSH
11449: LD_INT 0
11451: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11452: LD_STRING setGameSaveCounter(0)
11454: PPUSH
11455: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11459: LD_STRING initStreamRollete();
11461: PPUSH
11462: CALL_OW 559
// InitStreamMode ;
11466: CALL 12792 0 0
// DefineStreamItems ( false ) ;
11470: LD_INT 0
11472: PPUSH
11473: CALL 13256 0 1
// end ;
11477: END
// export function SOS_MapStart ( ) ; begin
11478: LD_INT 0
11480: PPUSH
// if streamModeActive then
11481: LD_EXP 22
11485: IFFALSE 11494
// DefineStreamItems ( true ) ;
11487: LD_INT 1
11489: PPUSH
11490: CALL 13256 0 1
// UpdateLuaVariables ( ) ;
11494: CALL 11511 0 0
// UpdateFactoryWaypoints ( ) ;
11498: CALL 26117 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11502: CALL 26374 0 0
// end ;
11506: LD_VAR 0 1
11510: RET
// function UpdateLuaVariables ( ) ; begin
11511: LD_INT 0
11513: PPUSH
// if globalGameSaveCounter then
11514: LD_EXP 21
11518: IFFALSE 11552
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11520: LD_ADDR_EXP 21
11524: PUSH
11525: LD_EXP 21
11529: PPUSH
11530: CALL 70155 0 1
11534: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11535: LD_STRING setGameSaveCounter(
11537: PUSH
11538: LD_EXP 21
11542: STR
11543: PUSH
11544: LD_STRING )
11546: STR
11547: PPUSH
11548: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11552: LD_STRING setGameDifficulty(
11554: PUSH
11555: LD_OWVAR 67
11559: STR
11560: PUSH
11561: LD_STRING )
11563: STR
11564: PPUSH
11565: CALL_OW 559
// end ;
11569: LD_VAR 0 1
11573: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11574: LD_INT 0
11576: PPUSH
// if p2 = stream_mode then
11577: LD_VAR 0 2
11581: PUSH
11582: LD_INT 100
11584: EQUAL
11585: IFFALSE 12588
// begin if not StreamModeActive then
11587: LD_EXP 22
11591: NOT
11592: IFFALSE 11602
// StreamModeActive := true ;
11594: LD_ADDR_EXP 22
11598: PUSH
11599: LD_INT 1
11601: ST_TO_ADDR
// if p3 = 0 then
11602: LD_VAR 0 3
11606: PUSH
11607: LD_INT 0
11609: EQUAL
11610: IFFALSE 11616
// InitStreamMode ;
11612: CALL 12792 0 0
// if p3 = 1 then
11616: LD_VAR 0 3
11620: PUSH
11621: LD_INT 1
11623: EQUAL
11624: IFFALSE 11634
// sRocket := true ;
11626: LD_ADDR_EXP 27
11630: PUSH
11631: LD_INT 1
11633: ST_TO_ADDR
// if p3 = 2 then
11634: LD_VAR 0 3
11638: PUSH
11639: LD_INT 2
11641: EQUAL
11642: IFFALSE 11652
// sSpeed := true ;
11644: LD_ADDR_EXP 26
11648: PUSH
11649: LD_INT 1
11651: ST_TO_ADDR
// if p3 = 3 then
11652: LD_VAR 0 3
11656: PUSH
11657: LD_INT 3
11659: EQUAL
11660: IFFALSE 11670
// sEngine := true ;
11662: LD_ADDR_EXP 28
11666: PUSH
11667: LD_INT 1
11669: ST_TO_ADDR
// if p3 = 4 then
11670: LD_VAR 0 3
11674: PUSH
11675: LD_INT 4
11677: EQUAL
11678: IFFALSE 11688
// sSpec := true ;
11680: LD_ADDR_EXP 25
11684: PUSH
11685: LD_INT 1
11687: ST_TO_ADDR
// if p3 = 5 then
11688: LD_VAR 0 3
11692: PUSH
11693: LD_INT 5
11695: EQUAL
11696: IFFALSE 11706
// sLevel := true ;
11698: LD_ADDR_EXP 29
11702: PUSH
11703: LD_INT 1
11705: ST_TO_ADDR
// if p3 = 6 then
11706: LD_VAR 0 3
11710: PUSH
11711: LD_INT 6
11713: EQUAL
11714: IFFALSE 11724
// sArmoury := true ;
11716: LD_ADDR_EXP 30
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// if p3 = 7 then
11724: LD_VAR 0 3
11728: PUSH
11729: LD_INT 7
11731: EQUAL
11732: IFFALSE 11742
// sRadar := true ;
11734: LD_ADDR_EXP 31
11738: PUSH
11739: LD_INT 1
11741: ST_TO_ADDR
// if p3 = 8 then
11742: LD_VAR 0 3
11746: PUSH
11747: LD_INT 8
11749: EQUAL
11750: IFFALSE 11760
// sBunker := true ;
11752: LD_ADDR_EXP 32
11756: PUSH
11757: LD_INT 1
11759: ST_TO_ADDR
// if p3 = 9 then
11760: LD_VAR 0 3
11764: PUSH
11765: LD_INT 9
11767: EQUAL
11768: IFFALSE 11778
// sHack := true ;
11770: LD_ADDR_EXP 33
11774: PUSH
11775: LD_INT 1
11777: ST_TO_ADDR
// if p3 = 10 then
11778: LD_VAR 0 3
11782: PUSH
11783: LD_INT 10
11785: EQUAL
11786: IFFALSE 11796
// sFire := true ;
11788: LD_ADDR_EXP 34
11792: PUSH
11793: LD_INT 1
11795: ST_TO_ADDR
// if p3 = 11 then
11796: LD_VAR 0 3
11800: PUSH
11801: LD_INT 11
11803: EQUAL
11804: IFFALSE 11814
// sRefresh := true ;
11806: LD_ADDR_EXP 35
11810: PUSH
11811: LD_INT 1
11813: ST_TO_ADDR
// if p3 = 12 then
11814: LD_VAR 0 3
11818: PUSH
11819: LD_INT 12
11821: EQUAL
11822: IFFALSE 11832
// sExp := true ;
11824: LD_ADDR_EXP 36
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// if p3 = 13 then
11832: LD_VAR 0 3
11836: PUSH
11837: LD_INT 13
11839: EQUAL
11840: IFFALSE 11850
// sDepot := true ;
11842: LD_ADDR_EXP 37
11846: PUSH
11847: LD_INT 1
11849: ST_TO_ADDR
// if p3 = 14 then
11850: LD_VAR 0 3
11854: PUSH
11855: LD_INT 14
11857: EQUAL
11858: IFFALSE 11868
// sFlag := true ;
11860: LD_ADDR_EXP 38
11864: PUSH
11865: LD_INT 1
11867: ST_TO_ADDR
// if p3 = 15 then
11868: LD_VAR 0 3
11872: PUSH
11873: LD_INT 15
11875: EQUAL
11876: IFFALSE 11886
// sKamikadze := true ;
11878: LD_ADDR_EXP 46
11882: PUSH
11883: LD_INT 1
11885: ST_TO_ADDR
// if p3 = 16 then
11886: LD_VAR 0 3
11890: PUSH
11891: LD_INT 16
11893: EQUAL
11894: IFFALSE 11904
// sTroll := true ;
11896: LD_ADDR_EXP 47
11900: PUSH
11901: LD_INT 1
11903: ST_TO_ADDR
// if p3 = 17 then
11904: LD_VAR 0 3
11908: PUSH
11909: LD_INT 17
11911: EQUAL
11912: IFFALSE 11922
// sSlow := true ;
11914: LD_ADDR_EXP 48
11918: PUSH
11919: LD_INT 1
11921: ST_TO_ADDR
// if p3 = 18 then
11922: LD_VAR 0 3
11926: PUSH
11927: LD_INT 18
11929: EQUAL
11930: IFFALSE 11940
// sLack := true ;
11932: LD_ADDR_EXP 49
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// if p3 = 19 then
11940: LD_VAR 0 3
11944: PUSH
11945: LD_INT 19
11947: EQUAL
11948: IFFALSE 11958
// sTank := true ;
11950: LD_ADDR_EXP 51
11954: PUSH
11955: LD_INT 1
11957: ST_TO_ADDR
// if p3 = 20 then
11958: LD_VAR 0 3
11962: PUSH
11963: LD_INT 20
11965: EQUAL
11966: IFFALSE 11976
// sRemote := true ;
11968: LD_ADDR_EXP 52
11972: PUSH
11973: LD_INT 1
11975: ST_TO_ADDR
// if p3 = 21 then
11976: LD_VAR 0 3
11980: PUSH
11981: LD_INT 21
11983: EQUAL
11984: IFFALSE 11994
// sPowell := true ;
11986: LD_ADDR_EXP 53
11990: PUSH
11991: LD_INT 1
11993: ST_TO_ADDR
// if p3 = 22 then
11994: LD_VAR 0 3
11998: PUSH
11999: LD_INT 22
12001: EQUAL
12002: IFFALSE 12012
// sTeleport := true ;
12004: LD_ADDR_EXP 56
12008: PUSH
12009: LD_INT 1
12011: ST_TO_ADDR
// if p3 = 23 then
12012: LD_VAR 0 3
12016: PUSH
12017: LD_INT 23
12019: EQUAL
12020: IFFALSE 12030
// sOilTower := true ;
12022: LD_ADDR_EXP 58
12026: PUSH
12027: LD_INT 1
12029: ST_TO_ADDR
// if p3 = 24 then
12030: LD_VAR 0 3
12034: PUSH
12035: LD_INT 24
12037: EQUAL
12038: IFFALSE 12048
// sShovel := true ;
12040: LD_ADDR_EXP 59
12044: PUSH
12045: LD_INT 1
12047: ST_TO_ADDR
// if p3 = 25 then
12048: LD_VAR 0 3
12052: PUSH
12053: LD_INT 25
12055: EQUAL
12056: IFFALSE 12066
// sSheik := true ;
12058: LD_ADDR_EXP 60
12062: PUSH
12063: LD_INT 1
12065: ST_TO_ADDR
// if p3 = 26 then
12066: LD_VAR 0 3
12070: PUSH
12071: LD_INT 26
12073: EQUAL
12074: IFFALSE 12084
// sEarthquake := true ;
12076: LD_ADDR_EXP 62
12080: PUSH
12081: LD_INT 1
12083: ST_TO_ADDR
// if p3 = 27 then
12084: LD_VAR 0 3
12088: PUSH
12089: LD_INT 27
12091: EQUAL
12092: IFFALSE 12102
// sAI := true ;
12094: LD_ADDR_EXP 63
12098: PUSH
12099: LD_INT 1
12101: ST_TO_ADDR
// if p3 = 28 then
12102: LD_VAR 0 3
12106: PUSH
12107: LD_INT 28
12109: EQUAL
12110: IFFALSE 12120
// sCargo := true ;
12112: LD_ADDR_EXP 66
12116: PUSH
12117: LD_INT 1
12119: ST_TO_ADDR
// if p3 = 29 then
12120: LD_VAR 0 3
12124: PUSH
12125: LD_INT 29
12127: EQUAL
12128: IFFALSE 12138
// sDLaser := true ;
12130: LD_ADDR_EXP 67
12134: PUSH
12135: LD_INT 1
12137: ST_TO_ADDR
// if p3 = 30 then
12138: LD_VAR 0 3
12142: PUSH
12143: LD_INT 30
12145: EQUAL
12146: IFFALSE 12156
// sExchange := true ;
12148: LD_ADDR_EXP 68
12152: PUSH
12153: LD_INT 1
12155: ST_TO_ADDR
// if p3 = 31 then
12156: LD_VAR 0 3
12160: PUSH
12161: LD_INT 31
12163: EQUAL
12164: IFFALSE 12174
// sFac := true ;
12166: LD_ADDR_EXP 69
12170: PUSH
12171: LD_INT 1
12173: ST_TO_ADDR
// if p3 = 32 then
12174: LD_VAR 0 3
12178: PUSH
12179: LD_INT 32
12181: EQUAL
12182: IFFALSE 12192
// sPower := true ;
12184: LD_ADDR_EXP 70
12188: PUSH
12189: LD_INT 1
12191: ST_TO_ADDR
// if p3 = 33 then
12192: LD_VAR 0 3
12196: PUSH
12197: LD_INT 33
12199: EQUAL
12200: IFFALSE 12210
// sRandom := true ;
12202: LD_ADDR_EXP 71
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// if p3 = 34 then
12210: LD_VAR 0 3
12214: PUSH
12215: LD_INT 34
12217: EQUAL
12218: IFFALSE 12228
// sShield := true ;
12220: LD_ADDR_EXP 72
12224: PUSH
12225: LD_INT 1
12227: ST_TO_ADDR
// if p3 = 35 then
12228: LD_VAR 0 3
12232: PUSH
12233: LD_INT 35
12235: EQUAL
12236: IFFALSE 12246
// sTime := true ;
12238: LD_ADDR_EXP 73
12242: PUSH
12243: LD_INT 1
12245: ST_TO_ADDR
// if p3 = 36 then
12246: LD_VAR 0 3
12250: PUSH
12251: LD_INT 36
12253: EQUAL
12254: IFFALSE 12264
// sTools := true ;
12256: LD_ADDR_EXP 74
12260: PUSH
12261: LD_INT 1
12263: ST_TO_ADDR
// if p3 = 101 then
12264: LD_VAR 0 3
12268: PUSH
12269: LD_INT 101
12271: EQUAL
12272: IFFALSE 12282
// sSold := true ;
12274: LD_ADDR_EXP 39
12278: PUSH
12279: LD_INT 1
12281: ST_TO_ADDR
// if p3 = 102 then
12282: LD_VAR 0 3
12286: PUSH
12287: LD_INT 102
12289: EQUAL
12290: IFFALSE 12300
// sDiff := true ;
12292: LD_ADDR_EXP 40
12296: PUSH
12297: LD_INT 1
12299: ST_TO_ADDR
// if p3 = 103 then
12300: LD_VAR 0 3
12304: PUSH
12305: LD_INT 103
12307: EQUAL
12308: IFFALSE 12318
// sFog := true ;
12310: LD_ADDR_EXP 43
12314: PUSH
12315: LD_INT 1
12317: ST_TO_ADDR
// if p3 = 104 then
12318: LD_VAR 0 3
12322: PUSH
12323: LD_INT 104
12325: EQUAL
12326: IFFALSE 12336
// sReset := true ;
12328: LD_ADDR_EXP 44
12332: PUSH
12333: LD_INT 1
12335: ST_TO_ADDR
// if p3 = 105 then
12336: LD_VAR 0 3
12340: PUSH
12341: LD_INT 105
12343: EQUAL
12344: IFFALSE 12354
// sSun := true ;
12346: LD_ADDR_EXP 45
12350: PUSH
12351: LD_INT 1
12353: ST_TO_ADDR
// if p3 = 106 then
12354: LD_VAR 0 3
12358: PUSH
12359: LD_INT 106
12361: EQUAL
12362: IFFALSE 12372
// sTiger := true ;
12364: LD_ADDR_EXP 41
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// if p3 = 107 then
12372: LD_VAR 0 3
12376: PUSH
12377: LD_INT 107
12379: EQUAL
12380: IFFALSE 12390
// sBomb := true ;
12382: LD_ADDR_EXP 42
12386: PUSH
12387: LD_INT 1
12389: ST_TO_ADDR
// if p3 = 108 then
12390: LD_VAR 0 3
12394: PUSH
12395: LD_INT 108
12397: EQUAL
12398: IFFALSE 12408
// sWound := true ;
12400: LD_ADDR_EXP 50
12404: PUSH
12405: LD_INT 1
12407: ST_TO_ADDR
// if p3 = 109 then
12408: LD_VAR 0 3
12412: PUSH
12413: LD_INT 109
12415: EQUAL
12416: IFFALSE 12426
// sBetray := true ;
12418: LD_ADDR_EXP 54
12422: PUSH
12423: LD_INT 1
12425: ST_TO_ADDR
// if p3 = 110 then
12426: LD_VAR 0 3
12430: PUSH
12431: LD_INT 110
12433: EQUAL
12434: IFFALSE 12444
// sContamin := true ;
12436: LD_ADDR_EXP 55
12440: PUSH
12441: LD_INT 1
12443: ST_TO_ADDR
// if p3 = 111 then
12444: LD_VAR 0 3
12448: PUSH
12449: LD_INT 111
12451: EQUAL
12452: IFFALSE 12462
// sOil := true ;
12454: LD_ADDR_EXP 57
12458: PUSH
12459: LD_INT 1
12461: ST_TO_ADDR
// if p3 = 112 then
12462: LD_VAR 0 3
12466: PUSH
12467: LD_INT 112
12469: EQUAL
12470: IFFALSE 12480
// sStu := true ;
12472: LD_ADDR_EXP 61
12476: PUSH
12477: LD_INT 1
12479: ST_TO_ADDR
// if p3 = 113 then
12480: LD_VAR 0 3
12484: PUSH
12485: LD_INT 113
12487: EQUAL
12488: IFFALSE 12498
// sBazooka := true ;
12490: LD_ADDR_EXP 64
12494: PUSH
12495: LD_INT 1
12497: ST_TO_ADDR
// if p3 = 114 then
12498: LD_VAR 0 3
12502: PUSH
12503: LD_INT 114
12505: EQUAL
12506: IFFALSE 12516
// sMortar := true ;
12508: LD_ADDR_EXP 65
12512: PUSH
12513: LD_INT 1
12515: ST_TO_ADDR
// if p3 = 115 then
12516: LD_VAR 0 3
12520: PUSH
12521: LD_INT 115
12523: EQUAL
12524: IFFALSE 12534
// sRanger := true ;
12526: LD_ADDR_EXP 75
12530: PUSH
12531: LD_INT 1
12533: ST_TO_ADDR
// if p3 = 116 then
12534: LD_VAR 0 3
12538: PUSH
12539: LD_INT 116
12541: EQUAL
12542: IFFALSE 12552
// sComputer := true ;
12544: LD_ADDR_EXP 76
12548: PUSH
12549: LD_INT 1
12551: ST_TO_ADDR
// if p3 = 117 then
12552: LD_VAR 0 3
12556: PUSH
12557: LD_INT 117
12559: EQUAL
12560: IFFALSE 12570
// s30 := true ;
12562: LD_ADDR_EXP 77
12566: PUSH
12567: LD_INT 1
12569: ST_TO_ADDR
// if p3 = 118 then
12570: LD_VAR 0 3
12574: PUSH
12575: LD_INT 118
12577: EQUAL
12578: IFFALSE 12588
// s60 := true ;
12580: LD_ADDR_EXP 78
12584: PUSH
12585: LD_INT 1
12587: ST_TO_ADDR
// end ; if p2 = hack_mode then
12588: LD_VAR 0 2
12592: PUSH
12593: LD_INT 101
12595: EQUAL
12596: IFFALSE 12724
// begin case p3 of 1 :
12598: LD_VAR 0 3
12602: PUSH
12603: LD_INT 1
12605: DOUBLE
12606: EQUAL
12607: IFTRUE 12611
12609: GO 12618
12611: POP
// hHackUnlimitedResources ; 2 :
12612: CALL 24863 0 0
12616: GO 12724
12618: LD_INT 2
12620: DOUBLE
12621: EQUAL
12622: IFTRUE 12626
12624: GO 12633
12626: POP
// hHackSetLevel10 ; 3 :
12627: CALL 24996 0 0
12631: GO 12724
12633: LD_INT 3
12635: DOUBLE
12636: EQUAL
12637: IFTRUE 12641
12639: GO 12648
12641: POP
// hHackSetLevel10YourUnits ; 4 :
12642: CALL 25081 0 0
12646: GO 12724
12648: LD_INT 4
12650: DOUBLE
12651: EQUAL
12652: IFTRUE 12656
12654: GO 12663
12656: POP
// hHackInvincible ; 5 :
12657: CALL 25529 0 0
12661: GO 12724
12663: LD_INT 5
12665: DOUBLE
12666: EQUAL
12667: IFTRUE 12671
12669: GO 12678
12671: POP
// hHackInvisible ; 6 :
12672: CALL 25640 0 0
12676: GO 12724
12678: LD_INT 6
12680: DOUBLE
12681: EQUAL
12682: IFTRUE 12686
12684: GO 12693
12686: POP
// hHackChangeYourSide ; 7 :
12687: CALL 25697 0 0
12691: GO 12724
12693: LD_INT 7
12695: DOUBLE
12696: EQUAL
12697: IFTRUE 12701
12699: GO 12708
12701: POP
// hHackChangeUnitSide ; 8 :
12702: CALL 25739 0 0
12706: GO 12724
12708: LD_INT 8
12710: DOUBLE
12711: EQUAL
12712: IFTRUE 12716
12714: GO 12723
12716: POP
// hHackFog ; end ;
12717: CALL 25840 0 0
12721: GO 12724
12723: POP
// end ; if p2 = game_save_mode then
12724: LD_VAR 0 2
12728: PUSH
12729: LD_INT 102
12731: EQUAL
12732: IFFALSE 12787
// begin if p3 = 1 then
12734: LD_VAR 0 3
12738: PUSH
12739: LD_INT 1
12741: EQUAL
12742: IFFALSE 12754
// globalGameSaveCounter := p4 ;
12744: LD_ADDR_EXP 21
12748: PUSH
12749: LD_VAR 0 4
12753: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12754: LD_VAR 0 3
12758: PUSH
12759: LD_INT 2
12761: EQUAL
12762: PUSH
12763: LD_EXP 21
12767: AND
12768: IFFALSE 12787
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12770: LD_STRING setGameSaveCounter(
12772: PUSH
12773: LD_EXP 21
12777: STR
12778: PUSH
12779: LD_STRING )
12781: STR
12782: PPUSH
12783: CALL_OW 559
// end ; end ;
12787: LD_VAR 0 7
12791: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12792: LD_INT 0
12794: PPUSH
// streamModeActive := false ;
12795: LD_ADDR_EXP 22
12799: PUSH
12800: LD_INT 0
12802: ST_TO_ADDR
// normalCounter := 36 ;
12803: LD_ADDR_EXP 23
12807: PUSH
12808: LD_INT 36
12810: ST_TO_ADDR
// hardcoreCounter := 18 ;
12811: LD_ADDR_EXP 24
12815: PUSH
12816: LD_INT 18
12818: ST_TO_ADDR
// sRocket := false ;
12819: LD_ADDR_EXP 27
12823: PUSH
12824: LD_INT 0
12826: ST_TO_ADDR
// sSpeed := false ;
12827: LD_ADDR_EXP 26
12831: PUSH
12832: LD_INT 0
12834: ST_TO_ADDR
// sEngine := false ;
12835: LD_ADDR_EXP 28
12839: PUSH
12840: LD_INT 0
12842: ST_TO_ADDR
// sSpec := false ;
12843: LD_ADDR_EXP 25
12847: PUSH
12848: LD_INT 0
12850: ST_TO_ADDR
// sLevel := false ;
12851: LD_ADDR_EXP 29
12855: PUSH
12856: LD_INT 0
12858: ST_TO_ADDR
// sArmoury := false ;
12859: LD_ADDR_EXP 30
12863: PUSH
12864: LD_INT 0
12866: ST_TO_ADDR
// sRadar := false ;
12867: LD_ADDR_EXP 31
12871: PUSH
12872: LD_INT 0
12874: ST_TO_ADDR
// sBunker := false ;
12875: LD_ADDR_EXP 32
12879: PUSH
12880: LD_INT 0
12882: ST_TO_ADDR
// sHack := false ;
12883: LD_ADDR_EXP 33
12887: PUSH
12888: LD_INT 0
12890: ST_TO_ADDR
// sFire := false ;
12891: LD_ADDR_EXP 34
12895: PUSH
12896: LD_INT 0
12898: ST_TO_ADDR
// sRefresh := false ;
12899: LD_ADDR_EXP 35
12903: PUSH
12904: LD_INT 0
12906: ST_TO_ADDR
// sExp := false ;
12907: LD_ADDR_EXP 36
12911: PUSH
12912: LD_INT 0
12914: ST_TO_ADDR
// sDepot := false ;
12915: LD_ADDR_EXP 37
12919: PUSH
12920: LD_INT 0
12922: ST_TO_ADDR
// sFlag := false ;
12923: LD_ADDR_EXP 38
12927: PUSH
12928: LD_INT 0
12930: ST_TO_ADDR
// sKamikadze := false ;
12931: LD_ADDR_EXP 46
12935: PUSH
12936: LD_INT 0
12938: ST_TO_ADDR
// sTroll := false ;
12939: LD_ADDR_EXP 47
12943: PUSH
12944: LD_INT 0
12946: ST_TO_ADDR
// sSlow := false ;
12947: LD_ADDR_EXP 48
12951: PUSH
12952: LD_INT 0
12954: ST_TO_ADDR
// sLack := false ;
12955: LD_ADDR_EXP 49
12959: PUSH
12960: LD_INT 0
12962: ST_TO_ADDR
// sTank := false ;
12963: LD_ADDR_EXP 51
12967: PUSH
12968: LD_INT 0
12970: ST_TO_ADDR
// sRemote := false ;
12971: LD_ADDR_EXP 52
12975: PUSH
12976: LD_INT 0
12978: ST_TO_ADDR
// sPowell := false ;
12979: LD_ADDR_EXP 53
12983: PUSH
12984: LD_INT 0
12986: ST_TO_ADDR
// sTeleport := false ;
12987: LD_ADDR_EXP 56
12991: PUSH
12992: LD_INT 0
12994: ST_TO_ADDR
// sOilTower := false ;
12995: LD_ADDR_EXP 58
12999: PUSH
13000: LD_INT 0
13002: ST_TO_ADDR
// sShovel := false ;
13003: LD_ADDR_EXP 59
13007: PUSH
13008: LD_INT 0
13010: ST_TO_ADDR
// sSheik := false ;
13011: LD_ADDR_EXP 60
13015: PUSH
13016: LD_INT 0
13018: ST_TO_ADDR
// sEarthquake := false ;
13019: LD_ADDR_EXP 62
13023: PUSH
13024: LD_INT 0
13026: ST_TO_ADDR
// sAI := false ;
13027: LD_ADDR_EXP 63
13031: PUSH
13032: LD_INT 0
13034: ST_TO_ADDR
// sCargo := false ;
13035: LD_ADDR_EXP 66
13039: PUSH
13040: LD_INT 0
13042: ST_TO_ADDR
// sDLaser := false ;
13043: LD_ADDR_EXP 67
13047: PUSH
13048: LD_INT 0
13050: ST_TO_ADDR
// sExchange := false ;
13051: LD_ADDR_EXP 68
13055: PUSH
13056: LD_INT 0
13058: ST_TO_ADDR
// sFac := false ;
13059: LD_ADDR_EXP 69
13063: PUSH
13064: LD_INT 0
13066: ST_TO_ADDR
// sPower := false ;
13067: LD_ADDR_EXP 70
13071: PUSH
13072: LD_INT 0
13074: ST_TO_ADDR
// sRandom := false ;
13075: LD_ADDR_EXP 71
13079: PUSH
13080: LD_INT 0
13082: ST_TO_ADDR
// sShield := false ;
13083: LD_ADDR_EXP 72
13087: PUSH
13088: LD_INT 0
13090: ST_TO_ADDR
// sTime := false ;
13091: LD_ADDR_EXP 73
13095: PUSH
13096: LD_INT 0
13098: ST_TO_ADDR
// sTools := false ;
13099: LD_ADDR_EXP 74
13103: PUSH
13104: LD_INT 0
13106: ST_TO_ADDR
// sSold := false ;
13107: LD_ADDR_EXP 39
13111: PUSH
13112: LD_INT 0
13114: ST_TO_ADDR
// sDiff := false ;
13115: LD_ADDR_EXP 40
13119: PUSH
13120: LD_INT 0
13122: ST_TO_ADDR
// sFog := false ;
13123: LD_ADDR_EXP 43
13127: PUSH
13128: LD_INT 0
13130: ST_TO_ADDR
// sReset := false ;
13131: LD_ADDR_EXP 44
13135: PUSH
13136: LD_INT 0
13138: ST_TO_ADDR
// sSun := false ;
13139: LD_ADDR_EXP 45
13143: PUSH
13144: LD_INT 0
13146: ST_TO_ADDR
// sTiger := false ;
13147: LD_ADDR_EXP 41
13151: PUSH
13152: LD_INT 0
13154: ST_TO_ADDR
// sBomb := false ;
13155: LD_ADDR_EXP 42
13159: PUSH
13160: LD_INT 0
13162: ST_TO_ADDR
// sWound := false ;
13163: LD_ADDR_EXP 50
13167: PUSH
13168: LD_INT 0
13170: ST_TO_ADDR
// sBetray := false ;
13171: LD_ADDR_EXP 54
13175: PUSH
13176: LD_INT 0
13178: ST_TO_ADDR
// sContamin := false ;
13179: LD_ADDR_EXP 55
13183: PUSH
13184: LD_INT 0
13186: ST_TO_ADDR
// sOil := false ;
13187: LD_ADDR_EXP 57
13191: PUSH
13192: LD_INT 0
13194: ST_TO_ADDR
// sStu := false ;
13195: LD_ADDR_EXP 61
13199: PUSH
13200: LD_INT 0
13202: ST_TO_ADDR
// sBazooka := false ;
13203: LD_ADDR_EXP 64
13207: PUSH
13208: LD_INT 0
13210: ST_TO_ADDR
// sMortar := false ;
13211: LD_ADDR_EXP 65
13215: PUSH
13216: LD_INT 0
13218: ST_TO_ADDR
// sRanger := false ;
13219: LD_ADDR_EXP 75
13223: PUSH
13224: LD_INT 0
13226: ST_TO_ADDR
// sComputer := false ;
13227: LD_ADDR_EXP 76
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// s30 := false ;
13235: LD_ADDR_EXP 77
13239: PUSH
13240: LD_INT 0
13242: ST_TO_ADDR
// s60 := false ;
13243: LD_ADDR_EXP 78
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// end ;
13251: LD_VAR 0 1
13255: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13256: LD_INT 0
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
13262: PPUSH
13263: PPUSH
13264: PPUSH
// result := [ ] ;
13265: LD_ADDR_VAR 0 2
13269: PUSH
13270: EMPTY
13271: ST_TO_ADDR
// if campaign_id = 1 then
13272: LD_OWVAR 69
13276: PUSH
13277: LD_INT 1
13279: EQUAL
13280: IFFALSE 16446
// begin case mission_number of 1 :
13282: LD_OWVAR 70
13286: PUSH
13287: LD_INT 1
13289: DOUBLE
13290: EQUAL
13291: IFTRUE 13295
13293: GO 13371
13295: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13296: LD_ADDR_VAR 0 2
13300: PUSH
13301: LD_INT 2
13303: PUSH
13304: LD_INT 4
13306: PUSH
13307: LD_INT 11
13309: PUSH
13310: LD_INT 12
13312: PUSH
13313: LD_INT 15
13315: PUSH
13316: LD_INT 16
13318: PUSH
13319: LD_INT 22
13321: PUSH
13322: LD_INT 23
13324: PUSH
13325: LD_INT 26
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 101
13341: PUSH
13342: LD_INT 102
13344: PUSH
13345: LD_INT 106
13347: PUSH
13348: LD_INT 116
13350: PUSH
13351: LD_INT 117
13353: PUSH
13354: LD_INT 118
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: ST_TO_ADDR
13369: GO 16444
13371: LD_INT 2
13373: DOUBLE
13374: EQUAL
13375: IFTRUE 13379
13377: GO 13463
13379: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13380: LD_ADDR_VAR 0 2
13384: PUSH
13385: LD_INT 2
13387: PUSH
13388: LD_INT 4
13390: PUSH
13391: LD_INT 11
13393: PUSH
13394: LD_INT 12
13396: PUSH
13397: LD_INT 15
13399: PUSH
13400: LD_INT 16
13402: PUSH
13403: LD_INT 22
13405: PUSH
13406: LD_INT 23
13408: PUSH
13409: LD_INT 26
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 101
13425: PUSH
13426: LD_INT 102
13428: PUSH
13429: LD_INT 105
13431: PUSH
13432: LD_INT 106
13434: PUSH
13435: LD_INT 108
13437: PUSH
13438: LD_INT 116
13440: PUSH
13441: LD_INT 117
13443: PUSH
13444: LD_INT 118
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: ST_TO_ADDR
13461: GO 16444
13463: LD_INT 3
13465: DOUBLE
13466: EQUAL
13467: IFTRUE 13471
13469: GO 13559
13471: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13472: LD_ADDR_VAR 0 2
13476: PUSH
13477: LD_INT 2
13479: PUSH
13480: LD_INT 4
13482: PUSH
13483: LD_INT 5
13485: PUSH
13486: LD_INT 11
13488: PUSH
13489: LD_INT 12
13491: PUSH
13492: LD_INT 15
13494: PUSH
13495: LD_INT 16
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 26
13503: PUSH
13504: LD_INT 36
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 101
13521: PUSH
13522: LD_INT 102
13524: PUSH
13525: LD_INT 105
13527: PUSH
13528: LD_INT 106
13530: PUSH
13531: LD_INT 108
13533: PUSH
13534: LD_INT 116
13536: PUSH
13537: LD_INT 117
13539: PUSH
13540: LD_INT 118
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: ST_TO_ADDR
13557: GO 16444
13559: LD_INT 4
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13663
13567: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13568: LD_ADDR_VAR 0 2
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: LD_INT 4
13578: PUSH
13579: LD_INT 5
13581: PUSH
13582: LD_INT 8
13584: PUSH
13585: LD_INT 11
13587: PUSH
13588: LD_INT 12
13590: PUSH
13591: LD_INT 15
13593: PUSH
13594: LD_INT 16
13596: PUSH
13597: LD_INT 22
13599: PUSH
13600: LD_INT 23
13602: PUSH
13603: LD_INT 26
13605: PUSH
13606: LD_INT 36
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 101
13625: PUSH
13626: LD_INT 102
13628: PUSH
13629: LD_INT 105
13631: PUSH
13632: LD_INT 106
13634: PUSH
13635: LD_INT 108
13637: PUSH
13638: LD_INT 116
13640: PUSH
13641: LD_INT 117
13643: PUSH
13644: LD_INT 118
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: ST_TO_ADDR
13661: GO 16444
13663: LD_INT 5
13665: DOUBLE
13666: EQUAL
13667: IFTRUE 13671
13669: GO 13783
13671: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13672: LD_ADDR_VAR 0 2
13676: PUSH
13677: LD_INT 2
13679: PUSH
13680: LD_INT 4
13682: PUSH
13683: LD_INT 5
13685: PUSH
13686: LD_INT 6
13688: PUSH
13689: LD_INT 8
13691: PUSH
13692: LD_INT 11
13694: PUSH
13695: LD_INT 12
13697: PUSH
13698: LD_INT 15
13700: PUSH
13701: LD_INT 16
13703: PUSH
13704: LD_INT 22
13706: PUSH
13707: LD_INT 23
13709: PUSH
13710: LD_INT 25
13712: PUSH
13713: LD_INT 26
13715: PUSH
13716: LD_INT 36
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 101
13737: PUSH
13738: LD_INT 102
13740: PUSH
13741: LD_INT 105
13743: PUSH
13744: LD_INT 106
13746: PUSH
13747: LD_INT 108
13749: PUSH
13750: LD_INT 109
13752: PUSH
13753: LD_INT 112
13755: PUSH
13756: LD_INT 116
13758: PUSH
13759: LD_INT 117
13761: PUSH
13762: LD_INT 118
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: ST_TO_ADDR
13781: GO 16444
13783: LD_INT 6
13785: DOUBLE
13786: EQUAL
13787: IFTRUE 13791
13789: GO 13923
13791: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13792: LD_ADDR_VAR 0 2
13796: PUSH
13797: LD_INT 2
13799: PUSH
13800: LD_INT 4
13802: PUSH
13803: LD_INT 5
13805: PUSH
13806: LD_INT 6
13808: PUSH
13809: LD_INT 8
13811: PUSH
13812: LD_INT 11
13814: PUSH
13815: LD_INT 12
13817: PUSH
13818: LD_INT 15
13820: PUSH
13821: LD_INT 16
13823: PUSH
13824: LD_INT 20
13826: PUSH
13827: LD_INT 21
13829: PUSH
13830: LD_INT 22
13832: PUSH
13833: LD_INT 23
13835: PUSH
13836: LD_INT 25
13838: PUSH
13839: LD_INT 26
13841: PUSH
13842: LD_INT 30
13844: PUSH
13845: LD_INT 31
13847: PUSH
13848: LD_INT 32
13850: PUSH
13851: LD_INT 36
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 101
13877: PUSH
13878: LD_INT 102
13880: PUSH
13881: LD_INT 105
13883: PUSH
13884: LD_INT 106
13886: PUSH
13887: LD_INT 108
13889: PUSH
13890: LD_INT 109
13892: PUSH
13893: LD_INT 112
13895: PUSH
13896: LD_INT 116
13898: PUSH
13899: LD_INT 117
13901: PUSH
13902: LD_INT 118
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: ST_TO_ADDR
13921: GO 16444
13923: LD_INT 7
13925: DOUBLE
13926: EQUAL
13927: IFTRUE 13931
13929: GO 14043
13931: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13932: LD_ADDR_VAR 0 2
13936: PUSH
13937: LD_INT 2
13939: PUSH
13940: LD_INT 4
13942: PUSH
13943: LD_INT 5
13945: PUSH
13946: LD_INT 7
13948: PUSH
13949: LD_INT 11
13951: PUSH
13952: LD_INT 12
13954: PUSH
13955: LD_INT 15
13957: PUSH
13958: LD_INT 16
13960: PUSH
13961: LD_INT 20
13963: PUSH
13964: LD_INT 21
13966: PUSH
13967: LD_INT 22
13969: PUSH
13970: LD_INT 23
13972: PUSH
13973: LD_INT 25
13975: PUSH
13976: LD_INT 26
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 101
13997: PUSH
13998: LD_INT 102
14000: PUSH
14001: LD_INT 103
14003: PUSH
14004: LD_INT 105
14006: PUSH
14007: LD_INT 106
14009: PUSH
14010: LD_INT 108
14012: PUSH
14013: LD_INT 112
14015: PUSH
14016: LD_INT 116
14018: PUSH
14019: LD_INT 117
14021: PUSH
14022: LD_INT 118
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: ST_TO_ADDR
14041: GO 16444
14043: LD_INT 8
14045: DOUBLE
14046: EQUAL
14047: IFTRUE 14051
14049: GO 14191
14051: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14052: LD_ADDR_VAR 0 2
14056: PUSH
14057: LD_INT 2
14059: PUSH
14060: LD_INT 4
14062: PUSH
14063: LD_INT 5
14065: PUSH
14066: LD_INT 6
14068: PUSH
14069: LD_INT 7
14071: PUSH
14072: LD_INT 8
14074: PUSH
14075: LD_INT 11
14077: PUSH
14078: LD_INT 12
14080: PUSH
14081: LD_INT 15
14083: PUSH
14084: LD_INT 16
14086: PUSH
14087: LD_INT 20
14089: PUSH
14090: LD_INT 21
14092: PUSH
14093: LD_INT 22
14095: PUSH
14096: LD_INT 23
14098: PUSH
14099: LD_INT 25
14101: PUSH
14102: LD_INT 26
14104: PUSH
14105: LD_INT 30
14107: PUSH
14108: LD_INT 31
14110: PUSH
14111: LD_INT 32
14113: PUSH
14114: LD_INT 36
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 101
14141: PUSH
14142: LD_INT 102
14144: PUSH
14145: LD_INT 103
14147: PUSH
14148: LD_INT 105
14150: PUSH
14151: LD_INT 106
14153: PUSH
14154: LD_INT 108
14156: PUSH
14157: LD_INT 109
14159: PUSH
14160: LD_INT 112
14162: PUSH
14163: LD_INT 116
14165: PUSH
14166: LD_INT 117
14168: PUSH
14169: LD_INT 118
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: ST_TO_ADDR
14189: GO 16444
14191: LD_INT 9
14193: DOUBLE
14194: EQUAL
14195: IFTRUE 14199
14197: GO 14347
14199: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14200: LD_ADDR_VAR 0 2
14204: PUSH
14205: LD_INT 2
14207: PUSH
14208: LD_INT 4
14210: PUSH
14211: LD_INT 5
14213: PUSH
14214: LD_INT 6
14216: PUSH
14217: LD_INT 7
14219: PUSH
14220: LD_INT 8
14222: PUSH
14223: LD_INT 11
14225: PUSH
14226: LD_INT 12
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 16
14234: PUSH
14235: LD_INT 20
14237: PUSH
14238: LD_INT 21
14240: PUSH
14241: LD_INT 22
14243: PUSH
14244: LD_INT 23
14246: PUSH
14247: LD_INT 25
14249: PUSH
14250: LD_INT 26
14252: PUSH
14253: LD_INT 28
14255: PUSH
14256: LD_INT 30
14258: PUSH
14259: LD_INT 31
14261: PUSH
14262: LD_INT 32
14264: PUSH
14265: LD_INT 36
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 101
14293: PUSH
14294: LD_INT 102
14296: PUSH
14297: LD_INT 103
14299: PUSH
14300: LD_INT 105
14302: PUSH
14303: LD_INT 106
14305: PUSH
14306: LD_INT 108
14308: PUSH
14309: LD_INT 109
14311: PUSH
14312: LD_INT 112
14314: PUSH
14315: LD_INT 114
14317: PUSH
14318: LD_INT 116
14320: PUSH
14321: LD_INT 117
14323: PUSH
14324: LD_INT 118
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: ST_TO_ADDR
14345: GO 16444
14347: LD_INT 10
14349: DOUBLE
14350: EQUAL
14351: IFTRUE 14355
14353: GO 14551
14355: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14356: LD_ADDR_VAR 0 2
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: LD_INT 4
14366: PUSH
14367: LD_INT 5
14369: PUSH
14370: LD_INT 6
14372: PUSH
14373: LD_INT 7
14375: PUSH
14376: LD_INT 8
14378: PUSH
14379: LD_INT 9
14381: PUSH
14382: LD_INT 10
14384: PUSH
14385: LD_INT 11
14387: PUSH
14388: LD_INT 12
14390: PUSH
14391: LD_INT 13
14393: PUSH
14394: LD_INT 14
14396: PUSH
14397: LD_INT 15
14399: PUSH
14400: LD_INT 16
14402: PUSH
14403: LD_INT 17
14405: PUSH
14406: LD_INT 18
14408: PUSH
14409: LD_INT 19
14411: PUSH
14412: LD_INT 20
14414: PUSH
14415: LD_INT 21
14417: PUSH
14418: LD_INT 22
14420: PUSH
14421: LD_INT 23
14423: PUSH
14424: LD_INT 24
14426: PUSH
14427: LD_INT 25
14429: PUSH
14430: LD_INT 26
14432: PUSH
14433: LD_INT 28
14435: PUSH
14436: LD_INT 30
14438: PUSH
14439: LD_INT 31
14441: PUSH
14442: LD_INT 32
14444: PUSH
14445: LD_INT 36
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: PUSH
14479: LD_INT 101
14481: PUSH
14482: LD_INT 102
14484: PUSH
14485: LD_INT 103
14487: PUSH
14488: LD_INT 104
14490: PUSH
14491: LD_INT 105
14493: PUSH
14494: LD_INT 106
14496: PUSH
14497: LD_INT 107
14499: PUSH
14500: LD_INT 108
14502: PUSH
14503: LD_INT 109
14505: PUSH
14506: LD_INT 110
14508: PUSH
14509: LD_INT 111
14511: PUSH
14512: LD_INT 112
14514: PUSH
14515: LD_INT 114
14517: PUSH
14518: LD_INT 116
14520: PUSH
14521: LD_INT 117
14523: PUSH
14524: LD_INT 118
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: ST_TO_ADDR
14549: GO 16444
14551: LD_INT 11
14553: DOUBLE
14554: EQUAL
14555: IFTRUE 14559
14557: GO 14763
14559: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14560: LD_ADDR_VAR 0 2
14564: PUSH
14565: LD_INT 2
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: LD_INT 4
14573: PUSH
14574: LD_INT 5
14576: PUSH
14577: LD_INT 6
14579: PUSH
14580: LD_INT 7
14582: PUSH
14583: LD_INT 8
14585: PUSH
14586: LD_INT 9
14588: PUSH
14589: LD_INT 10
14591: PUSH
14592: LD_INT 11
14594: PUSH
14595: LD_INT 12
14597: PUSH
14598: LD_INT 13
14600: PUSH
14601: LD_INT 14
14603: PUSH
14604: LD_INT 15
14606: PUSH
14607: LD_INT 16
14609: PUSH
14610: LD_INT 17
14612: PUSH
14613: LD_INT 18
14615: PUSH
14616: LD_INT 19
14618: PUSH
14619: LD_INT 20
14621: PUSH
14622: LD_INT 21
14624: PUSH
14625: LD_INT 22
14627: PUSH
14628: LD_INT 23
14630: PUSH
14631: LD_INT 24
14633: PUSH
14634: LD_INT 25
14636: PUSH
14637: LD_INT 26
14639: PUSH
14640: LD_INT 28
14642: PUSH
14643: LD_INT 30
14645: PUSH
14646: LD_INT 31
14648: PUSH
14649: LD_INT 32
14651: PUSH
14652: LD_INT 34
14654: PUSH
14655: LD_INT 36
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 101
14693: PUSH
14694: LD_INT 102
14696: PUSH
14697: LD_INT 103
14699: PUSH
14700: LD_INT 104
14702: PUSH
14703: LD_INT 105
14705: PUSH
14706: LD_INT 106
14708: PUSH
14709: LD_INT 107
14711: PUSH
14712: LD_INT 108
14714: PUSH
14715: LD_INT 109
14717: PUSH
14718: LD_INT 110
14720: PUSH
14721: LD_INT 111
14723: PUSH
14724: LD_INT 112
14726: PUSH
14727: LD_INT 114
14729: PUSH
14730: LD_INT 116
14732: PUSH
14733: LD_INT 117
14735: PUSH
14736: LD_INT 118
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: ST_TO_ADDR
14761: GO 16444
14763: LD_INT 12
14765: DOUBLE
14766: EQUAL
14767: IFTRUE 14771
14769: GO 14991
14771: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14772: LD_ADDR_VAR 0 2
14776: PUSH
14777: LD_INT 1
14779: PUSH
14780: LD_INT 2
14782: PUSH
14783: LD_INT 3
14785: PUSH
14786: LD_INT 4
14788: PUSH
14789: LD_INT 5
14791: PUSH
14792: LD_INT 6
14794: PUSH
14795: LD_INT 7
14797: PUSH
14798: LD_INT 8
14800: PUSH
14801: LD_INT 9
14803: PUSH
14804: LD_INT 10
14806: PUSH
14807: LD_INT 11
14809: PUSH
14810: LD_INT 12
14812: PUSH
14813: LD_INT 13
14815: PUSH
14816: LD_INT 14
14818: PUSH
14819: LD_INT 15
14821: PUSH
14822: LD_INT 16
14824: PUSH
14825: LD_INT 17
14827: PUSH
14828: LD_INT 18
14830: PUSH
14831: LD_INT 19
14833: PUSH
14834: LD_INT 20
14836: PUSH
14837: LD_INT 21
14839: PUSH
14840: LD_INT 22
14842: PUSH
14843: LD_INT 23
14845: PUSH
14846: LD_INT 24
14848: PUSH
14849: LD_INT 25
14851: PUSH
14852: LD_INT 26
14854: PUSH
14855: LD_INT 27
14857: PUSH
14858: LD_INT 28
14860: PUSH
14861: LD_INT 30
14863: PUSH
14864: LD_INT 31
14866: PUSH
14867: LD_INT 32
14869: PUSH
14870: LD_INT 33
14872: PUSH
14873: LD_INT 34
14875: PUSH
14876: LD_INT 36
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 101
14917: PUSH
14918: LD_INT 102
14920: PUSH
14921: LD_INT 103
14923: PUSH
14924: LD_INT 104
14926: PUSH
14927: LD_INT 105
14929: PUSH
14930: LD_INT 106
14932: PUSH
14933: LD_INT 107
14935: PUSH
14936: LD_INT 108
14938: PUSH
14939: LD_INT 109
14941: PUSH
14942: LD_INT 110
14944: PUSH
14945: LD_INT 111
14947: PUSH
14948: LD_INT 112
14950: PUSH
14951: LD_INT 113
14953: PUSH
14954: LD_INT 114
14956: PUSH
14957: LD_INT 116
14959: PUSH
14960: LD_INT 117
14962: PUSH
14963: LD_INT 118
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: ST_TO_ADDR
14989: GO 16444
14991: LD_INT 13
14993: DOUBLE
14994: EQUAL
14995: IFTRUE 14999
14997: GO 15207
14999: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15000: LD_ADDR_VAR 0 2
15004: PUSH
15005: LD_INT 1
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: LD_INT 3
15013: PUSH
15014: LD_INT 4
15016: PUSH
15017: LD_INT 5
15019: PUSH
15020: LD_INT 8
15022: PUSH
15023: LD_INT 9
15025: PUSH
15026: LD_INT 10
15028: PUSH
15029: LD_INT 11
15031: PUSH
15032: LD_INT 12
15034: PUSH
15035: LD_INT 14
15037: PUSH
15038: LD_INT 15
15040: PUSH
15041: LD_INT 16
15043: PUSH
15044: LD_INT 17
15046: PUSH
15047: LD_INT 18
15049: PUSH
15050: LD_INT 19
15052: PUSH
15053: LD_INT 20
15055: PUSH
15056: LD_INT 21
15058: PUSH
15059: LD_INT 22
15061: PUSH
15062: LD_INT 23
15064: PUSH
15065: LD_INT 24
15067: PUSH
15068: LD_INT 25
15070: PUSH
15071: LD_INT 26
15073: PUSH
15074: LD_INT 27
15076: PUSH
15077: LD_INT 28
15079: PUSH
15080: LD_INT 30
15082: PUSH
15083: LD_INT 31
15085: PUSH
15086: LD_INT 32
15088: PUSH
15089: LD_INT 33
15091: PUSH
15092: LD_INT 34
15094: PUSH
15095: LD_INT 36
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 101
15133: PUSH
15134: LD_INT 102
15136: PUSH
15137: LD_INT 103
15139: PUSH
15140: LD_INT 104
15142: PUSH
15143: LD_INT 105
15145: PUSH
15146: LD_INT 106
15148: PUSH
15149: LD_INT 107
15151: PUSH
15152: LD_INT 108
15154: PUSH
15155: LD_INT 109
15157: PUSH
15158: LD_INT 110
15160: PUSH
15161: LD_INT 111
15163: PUSH
15164: LD_INT 112
15166: PUSH
15167: LD_INT 113
15169: PUSH
15170: LD_INT 114
15172: PUSH
15173: LD_INT 116
15175: PUSH
15176: LD_INT 117
15178: PUSH
15179: LD_INT 118
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: ST_TO_ADDR
15205: GO 16444
15207: LD_INT 14
15209: DOUBLE
15210: EQUAL
15211: IFTRUE 15215
15213: GO 15439
15215: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15216: LD_ADDR_VAR 0 2
15220: PUSH
15221: LD_INT 1
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: LD_INT 3
15229: PUSH
15230: LD_INT 4
15232: PUSH
15233: LD_INT 5
15235: PUSH
15236: LD_INT 6
15238: PUSH
15239: LD_INT 7
15241: PUSH
15242: LD_INT 8
15244: PUSH
15245: LD_INT 9
15247: PUSH
15248: LD_INT 10
15250: PUSH
15251: LD_INT 11
15253: PUSH
15254: LD_INT 12
15256: PUSH
15257: LD_INT 13
15259: PUSH
15260: LD_INT 14
15262: PUSH
15263: LD_INT 15
15265: PUSH
15266: LD_INT 16
15268: PUSH
15269: LD_INT 17
15271: PUSH
15272: LD_INT 18
15274: PUSH
15275: LD_INT 19
15277: PUSH
15278: LD_INT 20
15280: PUSH
15281: LD_INT 21
15283: PUSH
15284: LD_INT 22
15286: PUSH
15287: LD_INT 23
15289: PUSH
15290: LD_INT 24
15292: PUSH
15293: LD_INT 25
15295: PUSH
15296: LD_INT 26
15298: PUSH
15299: LD_INT 27
15301: PUSH
15302: LD_INT 28
15304: PUSH
15305: LD_INT 29
15307: PUSH
15308: LD_INT 30
15310: PUSH
15311: LD_INT 31
15313: PUSH
15314: LD_INT 32
15316: PUSH
15317: LD_INT 33
15319: PUSH
15320: LD_INT 34
15322: PUSH
15323: LD_INT 36
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 101
15365: PUSH
15366: LD_INT 102
15368: PUSH
15369: LD_INT 103
15371: PUSH
15372: LD_INT 104
15374: PUSH
15375: LD_INT 105
15377: PUSH
15378: LD_INT 106
15380: PUSH
15381: LD_INT 107
15383: PUSH
15384: LD_INT 108
15386: PUSH
15387: LD_INT 109
15389: PUSH
15390: LD_INT 110
15392: PUSH
15393: LD_INT 111
15395: PUSH
15396: LD_INT 112
15398: PUSH
15399: LD_INT 113
15401: PUSH
15402: LD_INT 114
15404: PUSH
15405: LD_INT 116
15407: PUSH
15408: LD_INT 117
15410: PUSH
15411: LD_INT 118
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: ST_TO_ADDR
15437: GO 16444
15439: LD_INT 15
15441: DOUBLE
15442: EQUAL
15443: IFTRUE 15447
15445: GO 15671
15447: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15448: LD_ADDR_VAR 0 2
15452: PUSH
15453: LD_INT 1
15455: PUSH
15456: LD_INT 2
15458: PUSH
15459: LD_INT 3
15461: PUSH
15462: LD_INT 4
15464: PUSH
15465: LD_INT 5
15467: PUSH
15468: LD_INT 6
15470: PUSH
15471: LD_INT 7
15473: PUSH
15474: LD_INT 8
15476: PUSH
15477: LD_INT 9
15479: PUSH
15480: LD_INT 10
15482: PUSH
15483: LD_INT 11
15485: PUSH
15486: LD_INT 12
15488: PUSH
15489: LD_INT 13
15491: PUSH
15492: LD_INT 14
15494: PUSH
15495: LD_INT 15
15497: PUSH
15498: LD_INT 16
15500: PUSH
15501: LD_INT 17
15503: PUSH
15504: LD_INT 18
15506: PUSH
15507: LD_INT 19
15509: PUSH
15510: LD_INT 20
15512: PUSH
15513: LD_INT 21
15515: PUSH
15516: LD_INT 22
15518: PUSH
15519: LD_INT 23
15521: PUSH
15522: LD_INT 24
15524: PUSH
15525: LD_INT 25
15527: PUSH
15528: LD_INT 26
15530: PUSH
15531: LD_INT 27
15533: PUSH
15534: LD_INT 28
15536: PUSH
15537: LD_INT 29
15539: PUSH
15540: LD_INT 30
15542: PUSH
15543: LD_INT 31
15545: PUSH
15546: LD_INT 32
15548: PUSH
15549: LD_INT 33
15551: PUSH
15552: LD_INT 34
15554: PUSH
15555: LD_INT 36
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 101
15597: PUSH
15598: LD_INT 102
15600: PUSH
15601: LD_INT 103
15603: PUSH
15604: LD_INT 104
15606: PUSH
15607: LD_INT 105
15609: PUSH
15610: LD_INT 106
15612: PUSH
15613: LD_INT 107
15615: PUSH
15616: LD_INT 108
15618: PUSH
15619: LD_INT 109
15621: PUSH
15622: LD_INT 110
15624: PUSH
15625: LD_INT 111
15627: PUSH
15628: LD_INT 112
15630: PUSH
15631: LD_INT 113
15633: PUSH
15634: LD_INT 114
15636: PUSH
15637: LD_INT 116
15639: PUSH
15640: LD_INT 117
15642: PUSH
15643: LD_INT 118
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: ST_TO_ADDR
15669: GO 16444
15671: LD_INT 16
15673: DOUBLE
15674: EQUAL
15675: IFTRUE 15679
15677: GO 15815
15679: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15680: LD_ADDR_VAR 0 2
15684: PUSH
15685: LD_INT 2
15687: PUSH
15688: LD_INT 4
15690: PUSH
15691: LD_INT 5
15693: PUSH
15694: LD_INT 7
15696: PUSH
15697: LD_INT 11
15699: PUSH
15700: LD_INT 12
15702: PUSH
15703: LD_INT 15
15705: PUSH
15706: LD_INT 16
15708: PUSH
15709: LD_INT 20
15711: PUSH
15712: LD_INT 21
15714: PUSH
15715: LD_INT 22
15717: PUSH
15718: LD_INT 23
15720: PUSH
15721: LD_INT 25
15723: PUSH
15724: LD_INT 26
15726: PUSH
15727: LD_INT 30
15729: PUSH
15730: LD_INT 31
15732: PUSH
15733: LD_INT 32
15735: PUSH
15736: LD_INT 33
15738: PUSH
15739: LD_INT 34
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 101
15765: PUSH
15766: LD_INT 102
15768: PUSH
15769: LD_INT 103
15771: PUSH
15772: LD_INT 106
15774: PUSH
15775: LD_INT 108
15777: PUSH
15778: LD_INT 112
15780: PUSH
15781: LD_INT 113
15783: PUSH
15784: LD_INT 114
15786: PUSH
15787: LD_INT 116
15789: PUSH
15790: LD_INT 117
15792: PUSH
15793: LD_INT 118
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: ST_TO_ADDR
15813: GO 16444
15815: LD_INT 17
15817: DOUBLE
15818: EQUAL
15819: IFTRUE 15823
15821: GO 16047
15823: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15824: LD_ADDR_VAR 0 2
15828: PUSH
15829: LD_INT 1
15831: PUSH
15832: LD_INT 2
15834: PUSH
15835: LD_INT 3
15837: PUSH
15838: LD_INT 4
15840: PUSH
15841: LD_INT 5
15843: PUSH
15844: LD_INT 6
15846: PUSH
15847: LD_INT 7
15849: PUSH
15850: LD_INT 8
15852: PUSH
15853: LD_INT 9
15855: PUSH
15856: LD_INT 10
15858: PUSH
15859: LD_INT 11
15861: PUSH
15862: LD_INT 12
15864: PUSH
15865: LD_INT 13
15867: PUSH
15868: LD_INT 14
15870: PUSH
15871: LD_INT 15
15873: PUSH
15874: LD_INT 16
15876: PUSH
15877: LD_INT 17
15879: PUSH
15880: LD_INT 18
15882: PUSH
15883: LD_INT 19
15885: PUSH
15886: LD_INT 20
15888: PUSH
15889: LD_INT 21
15891: PUSH
15892: LD_INT 22
15894: PUSH
15895: LD_INT 23
15897: PUSH
15898: LD_INT 24
15900: PUSH
15901: LD_INT 25
15903: PUSH
15904: LD_INT 26
15906: PUSH
15907: LD_INT 27
15909: PUSH
15910: LD_INT 28
15912: PUSH
15913: LD_INT 29
15915: PUSH
15916: LD_INT 30
15918: PUSH
15919: LD_INT 31
15921: PUSH
15922: LD_INT 32
15924: PUSH
15925: LD_INT 33
15927: PUSH
15928: LD_INT 34
15930: PUSH
15931: LD_INT 36
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 101
15973: PUSH
15974: LD_INT 102
15976: PUSH
15977: LD_INT 103
15979: PUSH
15980: LD_INT 104
15982: PUSH
15983: LD_INT 105
15985: PUSH
15986: LD_INT 106
15988: PUSH
15989: LD_INT 107
15991: PUSH
15992: LD_INT 108
15994: PUSH
15995: LD_INT 109
15997: PUSH
15998: LD_INT 110
16000: PUSH
16001: LD_INT 111
16003: PUSH
16004: LD_INT 112
16006: PUSH
16007: LD_INT 113
16009: PUSH
16010: LD_INT 114
16012: PUSH
16013: LD_INT 116
16015: PUSH
16016: LD_INT 117
16018: PUSH
16019: LD_INT 118
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: ST_TO_ADDR
16045: GO 16444
16047: LD_INT 18
16049: DOUBLE
16050: EQUAL
16051: IFTRUE 16055
16053: GO 16203
16055: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16056: LD_ADDR_VAR 0 2
16060: PUSH
16061: LD_INT 2
16063: PUSH
16064: LD_INT 4
16066: PUSH
16067: LD_INT 5
16069: PUSH
16070: LD_INT 7
16072: PUSH
16073: LD_INT 11
16075: PUSH
16076: LD_INT 12
16078: PUSH
16079: LD_INT 15
16081: PUSH
16082: LD_INT 16
16084: PUSH
16085: LD_INT 20
16087: PUSH
16088: LD_INT 21
16090: PUSH
16091: LD_INT 22
16093: PUSH
16094: LD_INT 23
16096: PUSH
16097: LD_INT 25
16099: PUSH
16100: LD_INT 26
16102: PUSH
16103: LD_INT 30
16105: PUSH
16106: LD_INT 31
16108: PUSH
16109: LD_INT 32
16111: PUSH
16112: LD_INT 33
16114: PUSH
16115: LD_INT 34
16117: PUSH
16118: LD_INT 35
16120: PUSH
16121: LD_INT 36
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 101
16149: PUSH
16150: LD_INT 102
16152: PUSH
16153: LD_INT 103
16155: PUSH
16156: LD_INT 106
16158: PUSH
16159: LD_INT 108
16161: PUSH
16162: LD_INT 112
16164: PUSH
16165: LD_INT 113
16167: PUSH
16168: LD_INT 114
16170: PUSH
16171: LD_INT 115
16173: PUSH
16174: LD_INT 116
16176: PUSH
16177: LD_INT 117
16179: PUSH
16180: LD_INT 118
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: ST_TO_ADDR
16201: GO 16444
16203: LD_INT 19
16205: DOUBLE
16206: EQUAL
16207: IFTRUE 16211
16209: GO 16443
16211: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16212: LD_ADDR_VAR 0 2
16216: PUSH
16217: LD_INT 1
16219: PUSH
16220: LD_INT 2
16222: PUSH
16223: LD_INT 3
16225: PUSH
16226: LD_INT 4
16228: PUSH
16229: LD_INT 5
16231: PUSH
16232: LD_INT 6
16234: PUSH
16235: LD_INT 7
16237: PUSH
16238: LD_INT 8
16240: PUSH
16241: LD_INT 9
16243: PUSH
16244: LD_INT 10
16246: PUSH
16247: LD_INT 11
16249: PUSH
16250: LD_INT 12
16252: PUSH
16253: LD_INT 13
16255: PUSH
16256: LD_INT 14
16258: PUSH
16259: LD_INT 15
16261: PUSH
16262: LD_INT 16
16264: PUSH
16265: LD_INT 17
16267: PUSH
16268: LD_INT 18
16270: PUSH
16271: LD_INT 19
16273: PUSH
16274: LD_INT 20
16276: PUSH
16277: LD_INT 21
16279: PUSH
16280: LD_INT 22
16282: PUSH
16283: LD_INT 23
16285: PUSH
16286: LD_INT 24
16288: PUSH
16289: LD_INT 25
16291: PUSH
16292: LD_INT 26
16294: PUSH
16295: LD_INT 27
16297: PUSH
16298: LD_INT 28
16300: PUSH
16301: LD_INT 29
16303: PUSH
16304: LD_INT 30
16306: PUSH
16307: LD_INT 31
16309: PUSH
16310: LD_INT 32
16312: PUSH
16313: LD_INT 33
16315: PUSH
16316: LD_INT 34
16318: PUSH
16319: LD_INT 35
16321: PUSH
16322: LD_INT 36
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 101
16365: PUSH
16366: LD_INT 102
16368: PUSH
16369: LD_INT 103
16371: PUSH
16372: LD_INT 104
16374: PUSH
16375: LD_INT 105
16377: PUSH
16378: LD_INT 106
16380: PUSH
16381: LD_INT 107
16383: PUSH
16384: LD_INT 108
16386: PUSH
16387: LD_INT 109
16389: PUSH
16390: LD_INT 110
16392: PUSH
16393: LD_INT 111
16395: PUSH
16396: LD_INT 112
16398: PUSH
16399: LD_INT 113
16401: PUSH
16402: LD_INT 114
16404: PUSH
16405: LD_INT 115
16407: PUSH
16408: LD_INT 116
16410: PUSH
16411: LD_INT 117
16413: PUSH
16414: LD_INT 118
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: ST_TO_ADDR
16441: GO 16444
16443: POP
// end else
16444: GO 16675
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16446: LD_ADDR_VAR 0 2
16450: PUSH
16451: LD_INT 1
16453: PUSH
16454: LD_INT 2
16456: PUSH
16457: LD_INT 3
16459: PUSH
16460: LD_INT 4
16462: PUSH
16463: LD_INT 5
16465: PUSH
16466: LD_INT 6
16468: PUSH
16469: LD_INT 7
16471: PUSH
16472: LD_INT 8
16474: PUSH
16475: LD_INT 9
16477: PUSH
16478: LD_INT 10
16480: PUSH
16481: LD_INT 11
16483: PUSH
16484: LD_INT 12
16486: PUSH
16487: LD_INT 13
16489: PUSH
16490: LD_INT 14
16492: PUSH
16493: LD_INT 15
16495: PUSH
16496: LD_INT 16
16498: PUSH
16499: LD_INT 17
16501: PUSH
16502: LD_INT 18
16504: PUSH
16505: LD_INT 19
16507: PUSH
16508: LD_INT 20
16510: PUSH
16511: LD_INT 21
16513: PUSH
16514: LD_INT 22
16516: PUSH
16517: LD_INT 23
16519: PUSH
16520: LD_INT 24
16522: PUSH
16523: LD_INT 25
16525: PUSH
16526: LD_INT 26
16528: PUSH
16529: LD_INT 27
16531: PUSH
16532: LD_INT 28
16534: PUSH
16535: LD_INT 29
16537: PUSH
16538: LD_INT 30
16540: PUSH
16541: LD_INT 31
16543: PUSH
16544: LD_INT 32
16546: PUSH
16547: LD_INT 33
16549: PUSH
16550: LD_INT 34
16552: PUSH
16553: LD_INT 35
16555: PUSH
16556: LD_INT 36
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 101
16599: PUSH
16600: LD_INT 102
16602: PUSH
16603: LD_INT 103
16605: PUSH
16606: LD_INT 104
16608: PUSH
16609: LD_INT 105
16611: PUSH
16612: LD_INT 106
16614: PUSH
16615: LD_INT 107
16617: PUSH
16618: LD_INT 108
16620: PUSH
16621: LD_INT 109
16623: PUSH
16624: LD_INT 110
16626: PUSH
16627: LD_INT 111
16629: PUSH
16630: LD_INT 112
16632: PUSH
16633: LD_INT 113
16635: PUSH
16636: LD_INT 114
16638: PUSH
16639: LD_INT 115
16641: PUSH
16642: LD_INT 116
16644: PUSH
16645: LD_INT 117
16647: PUSH
16648: LD_INT 118
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: ST_TO_ADDR
// if result then
16675: LD_VAR 0 2
16679: IFFALSE 17465
// begin normal :=  ;
16681: LD_ADDR_VAR 0 5
16685: PUSH
16686: LD_STRING 
16688: ST_TO_ADDR
// hardcore :=  ;
16689: LD_ADDR_VAR 0 6
16693: PUSH
16694: LD_STRING 
16696: ST_TO_ADDR
// active :=  ;
16697: LD_ADDR_VAR 0 7
16701: PUSH
16702: LD_STRING 
16704: ST_TO_ADDR
// for i = 1 to normalCounter do
16705: LD_ADDR_VAR 0 8
16709: PUSH
16710: DOUBLE
16711: LD_INT 1
16713: DEC
16714: ST_TO_ADDR
16715: LD_EXP 23
16719: PUSH
16720: FOR_TO
16721: IFFALSE 16822
// begin tmp := 0 ;
16723: LD_ADDR_VAR 0 3
16727: PUSH
16728: LD_STRING 0
16730: ST_TO_ADDR
// if result [ 1 ] then
16731: LD_VAR 0 2
16735: PUSH
16736: LD_INT 1
16738: ARRAY
16739: IFFALSE 16804
// if result [ 1 ] [ 1 ] = i then
16741: LD_VAR 0 2
16745: PUSH
16746: LD_INT 1
16748: ARRAY
16749: PUSH
16750: LD_INT 1
16752: ARRAY
16753: PUSH
16754: LD_VAR 0 8
16758: EQUAL
16759: IFFALSE 16804
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16761: LD_ADDR_VAR 0 2
16765: PUSH
16766: LD_VAR 0 2
16770: PPUSH
16771: LD_INT 1
16773: PPUSH
16774: LD_VAR 0 2
16778: PUSH
16779: LD_INT 1
16781: ARRAY
16782: PPUSH
16783: LD_INT 1
16785: PPUSH
16786: CALL_OW 3
16790: PPUSH
16791: CALL_OW 1
16795: ST_TO_ADDR
// tmp := 1 ;
16796: LD_ADDR_VAR 0 3
16800: PUSH
16801: LD_STRING 1
16803: ST_TO_ADDR
// end ; normal := normal & tmp ;
16804: LD_ADDR_VAR 0 5
16808: PUSH
16809: LD_VAR 0 5
16813: PUSH
16814: LD_VAR 0 3
16818: STR
16819: ST_TO_ADDR
// end ;
16820: GO 16720
16822: POP
16823: POP
// for i = 1 to hardcoreCounter do
16824: LD_ADDR_VAR 0 8
16828: PUSH
16829: DOUBLE
16830: LD_INT 1
16832: DEC
16833: ST_TO_ADDR
16834: LD_EXP 24
16838: PUSH
16839: FOR_TO
16840: IFFALSE 16945
// begin tmp := 0 ;
16842: LD_ADDR_VAR 0 3
16846: PUSH
16847: LD_STRING 0
16849: ST_TO_ADDR
// if result [ 2 ] then
16850: LD_VAR 0 2
16854: PUSH
16855: LD_INT 2
16857: ARRAY
16858: IFFALSE 16927
// if result [ 2 ] [ 1 ] = 100 + i then
16860: LD_VAR 0 2
16864: PUSH
16865: LD_INT 2
16867: ARRAY
16868: PUSH
16869: LD_INT 1
16871: ARRAY
16872: PUSH
16873: LD_INT 100
16875: PUSH
16876: LD_VAR 0 8
16880: PLUS
16881: EQUAL
16882: IFFALSE 16927
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16884: LD_ADDR_VAR 0 2
16888: PUSH
16889: LD_VAR 0 2
16893: PPUSH
16894: LD_INT 2
16896: PPUSH
16897: LD_VAR 0 2
16901: PUSH
16902: LD_INT 2
16904: ARRAY
16905: PPUSH
16906: LD_INT 1
16908: PPUSH
16909: CALL_OW 3
16913: PPUSH
16914: CALL_OW 1
16918: ST_TO_ADDR
// tmp := 1 ;
16919: LD_ADDR_VAR 0 3
16923: PUSH
16924: LD_STRING 1
16926: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16927: LD_ADDR_VAR 0 6
16931: PUSH
16932: LD_VAR 0 6
16936: PUSH
16937: LD_VAR 0 3
16941: STR
16942: ST_TO_ADDR
// end ;
16943: GO 16839
16945: POP
16946: POP
// if isGameLoad then
16947: LD_VAR 0 1
16951: IFFALSE 17426
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16953: LD_ADDR_VAR 0 4
16957: PUSH
16958: LD_EXP 27
16962: PUSH
16963: LD_EXP 26
16967: PUSH
16968: LD_EXP 28
16972: PUSH
16973: LD_EXP 25
16977: PUSH
16978: LD_EXP 29
16982: PUSH
16983: LD_EXP 30
16987: PUSH
16988: LD_EXP 31
16992: PUSH
16993: LD_EXP 32
16997: PUSH
16998: LD_EXP 33
17002: PUSH
17003: LD_EXP 34
17007: PUSH
17008: LD_EXP 35
17012: PUSH
17013: LD_EXP 36
17017: PUSH
17018: LD_EXP 37
17022: PUSH
17023: LD_EXP 38
17027: PUSH
17028: LD_EXP 46
17032: PUSH
17033: LD_EXP 47
17037: PUSH
17038: LD_EXP 48
17042: PUSH
17043: LD_EXP 49
17047: PUSH
17048: LD_EXP 51
17052: PUSH
17053: LD_EXP 52
17057: PUSH
17058: LD_EXP 53
17062: PUSH
17063: LD_EXP 56
17067: PUSH
17068: LD_EXP 58
17072: PUSH
17073: LD_EXP 59
17077: PUSH
17078: LD_EXP 60
17082: PUSH
17083: LD_EXP 62
17087: PUSH
17088: LD_EXP 63
17092: PUSH
17093: LD_EXP 66
17097: PUSH
17098: LD_EXP 67
17102: PUSH
17103: LD_EXP 68
17107: PUSH
17108: LD_EXP 69
17112: PUSH
17113: LD_EXP 70
17117: PUSH
17118: LD_EXP 71
17122: PUSH
17123: LD_EXP 72
17127: PUSH
17128: LD_EXP 73
17132: PUSH
17133: LD_EXP 74
17137: PUSH
17138: LD_EXP 39
17142: PUSH
17143: LD_EXP 40
17147: PUSH
17148: LD_EXP 43
17152: PUSH
17153: LD_EXP 44
17157: PUSH
17158: LD_EXP 45
17162: PUSH
17163: LD_EXP 41
17167: PUSH
17168: LD_EXP 42
17172: PUSH
17173: LD_EXP 50
17177: PUSH
17178: LD_EXP 54
17182: PUSH
17183: LD_EXP 55
17187: PUSH
17188: LD_EXP 57
17192: PUSH
17193: LD_EXP 61
17197: PUSH
17198: LD_EXP 64
17202: PUSH
17203: LD_EXP 65
17207: PUSH
17208: LD_EXP 75
17212: PUSH
17213: LD_EXP 76
17217: PUSH
17218: LD_EXP 77
17222: PUSH
17223: LD_EXP 78
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: ST_TO_ADDR
// tmp :=  ;
17284: LD_ADDR_VAR 0 3
17288: PUSH
17289: LD_STRING 
17291: ST_TO_ADDR
// for i = 1 to normalCounter do
17292: LD_ADDR_VAR 0 8
17296: PUSH
17297: DOUBLE
17298: LD_INT 1
17300: DEC
17301: ST_TO_ADDR
17302: LD_EXP 23
17306: PUSH
17307: FOR_TO
17308: IFFALSE 17344
// begin if flags [ i ] then
17310: LD_VAR 0 4
17314: PUSH
17315: LD_VAR 0 8
17319: ARRAY
17320: IFFALSE 17342
// tmp := tmp & i & ; ;
17322: LD_ADDR_VAR 0 3
17326: PUSH
17327: LD_VAR 0 3
17331: PUSH
17332: LD_VAR 0 8
17336: STR
17337: PUSH
17338: LD_STRING ;
17340: STR
17341: ST_TO_ADDR
// end ;
17342: GO 17307
17344: POP
17345: POP
// for i = 1 to hardcoreCounter do
17346: LD_ADDR_VAR 0 8
17350: PUSH
17351: DOUBLE
17352: LD_INT 1
17354: DEC
17355: ST_TO_ADDR
17356: LD_EXP 24
17360: PUSH
17361: FOR_TO
17362: IFFALSE 17408
// begin if flags [ normalCounter + i ] then
17364: LD_VAR 0 4
17368: PUSH
17369: LD_EXP 23
17373: PUSH
17374: LD_VAR 0 8
17378: PLUS
17379: ARRAY
17380: IFFALSE 17406
// tmp := tmp & ( 100 + i ) & ; ;
17382: LD_ADDR_VAR 0 3
17386: PUSH
17387: LD_VAR 0 3
17391: PUSH
17392: LD_INT 100
17394: PUSH
17395: LD_VAR 0 8
17399: PLUS
17400: STR
17401: PUSH
17402: LD_STRING ;
17404: STR
17405: ST_TO_ADDR
// end ;
17406: GO 17361
17408: POP
17409: POP
// if tmp then
17410: LD_VAR 0 3
17414: IFFALSE 17426
// active := tmp ;
17416: LD_ADDR_VAR 0 7
17420: PUSH
17421: LD_VAR 0 3
17425: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17426: LD_STRING getStreamItemsFromMission("
17428: PUSH
17429: LD_VAR 0 5
17433: STR
17434: PUSH
17435: LD_STRING ","
17437: STR
17438: PUSH
17439: LD_VAR 0 6
17443: STR
17444: PUSH
17445: LD_STRING ","
17447: STR
17448: PUSH
17449: LD_VAR 0 7
17453: STR
17454: PUSH
17455: LD_STRING ")
17457: STR
17458: PPUSH
17459: CALL_OW 559
// end else
17463: GO 17472
// ToLua ( getStreamItemsFromMission("","","") ) ;
17465: LD_STRING getStreamItemsFromMission("","","")
17467: PPUSH
17468: CALL_OW 559
// end ;
17472: LD_VAR 0 2
17476: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17477: LD_EXP 22
17481: PUSH
17482: LD_EXP 27
17486: AND
17487: IFFALSE 17611
17489: GO 17491
17491: DISABLE
17492: LD_INT 0
17494: PPUSH
17495: PPUSH
// begin enable ;
17496: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17497: LD_ADDR_VAR 0 2
17501: PUSH
17502: LD_INT 22
17504: PUSH
17505: LD_OWVAR 2
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 2
17516: PUSH
17517: LD_INT 34
17519: PUSH
17520: LD_INT 7
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 34
17529: PUSH
17530: LD_INT 45
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 34
17539: PUSH
17540: LD_INT 28
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 34
17549: PUSH
17550: LD_INT 47
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PPUSH
17568: CALL_OW 69
17572: ST_TO_ADDR
// if not tmp then
17573: LD_VAR 0 2
17577: NOT
17578: IFFALSE 17582
// exit ;
17580: GO 17611
// for i in tmp do
17582: LD_ADDR_VAR 0 1
17586: PUSH
17587: LD_VAR 0 2
17591: PUSH
17592: FOR_IN
17593: IFFALSE 17609
// begin SetLives ( i , 0 ) ;
17595: LD_VAR 0 1
17599: PPUSH
17600: LD_INT 0
17602: PPUSH
17603: CALL_OW 234
// end ;
17607: GO 17592
17609: POP
17610: POP
// end ;
17611: PPOPN 2
17613: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17614: LD_EXP 22
17618: PUSH
17619: LD_EXP 28
17623: AND
17624: IFFALSE 17708
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
17632: PPUSH
// begin enable ;
17633: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17634: LD_ADDR_VAR 0 2
17638: PUSH
17639: LD_INT 22
17641: PUSH
17642: LD_OWVAR 2
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 32
17653: PUSH
17654: LD_INT 3
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PPUSH
17665: CALL_OW 69
17669: ST_TO_ADDR
// if not tmp then
17670: LD_VAR 0 2
17674: NOT
17675: IFFALSE 17679
// exit ;
17677: GO 17708
// for i in tmp do
17679: LD_ADDR_VAR 0 1
17683: PUSH
17684: LD_VAR 0 2
17688: PUSH
17689: FOR_IN
17690: IFFALSE 17706
// begin SetLives ( i , 0 ) ;
17692: LD_VAR 0 1
17696: PPUSH
17697: LD_INT 0
17699: PPUSH
17700: CALL_OW 234
// end ;
17704: GO 17689
17706: POP
17707: POP
// end ;
17708: PPOPN 2
17710: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17711: LD_EXP 22
17715: PUSH
17716: LD_EXP 25
17720: AND
17721: IFFALSE 17814
17723: GO 17725
17725: DISABLE
17726: LD_INT 0
17728: PPUSH
// begin enable ;
17729: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17730: LD_ADDR_VAR 0 1
17734: PUSH
17735: LD_INT 22
17737: PUSH
17738: LD_OWVAR 2
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 25
17752: PUSH
17753: LD_INT 5
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 25
17762: PUSH
17763: LD_INT 9
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 25
17772: PUSH
17773: LD_INT 8
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PPUSH
17790: CALL_OW 69
17794: PUSH
17795: FOR_IN
17796: IFFALSE 17812
// begin SetClass ( i , 1 ) ;
17798: LD_VAR 0 1
17802: PPUSH
17803: LD_INT 1
17805: PPUSH
17806: CALL_OW 336
// end ;
17810: GO 17795
17812: POP
17813: POP
// end ;
17814: PPOPN 1
17816: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17817: LD_EXP 22
17821: PUSH
17822: LD_EXP 26
17826: AND
17827: PUSH
17828: LD_OWVAR 65
17832: PUSH
17833: LD_INT 7
17835: LESS
17836: AND
17837: IFFALSE 17851
17839: GO 17841
17841: DISABLE
// begin enable ;
17842: ENABLE
// game_speed := 7 ;
17843: LD_ADDR_OWVAR 65
17847: PUSH
17848: LD_INT 7
17850: ST_TO_ADDR
// end ;
17851: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17852: LD_EXP 22
17856: PUSH
17857: LD_EXP 29
17861: AND
17862: IFFALSE 18064
17864: GO 17866
17866: DISABLE
17867: LD_INT 0
17869: PPUSH
17870: PPUSH
17871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17872: LD_ADDR_VAR 0 3
17876: PUSH
17877: LD_INT 81
17879: PUSH
17880: LD_OWVAR 2
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 21
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PPUSH
17903: CALL_OW 69
17907: ST_TO_ADDR
// if not tmp then
17908: LD_VAR 0 3
17912: NOT
17913: IFFALSE 17917
// exit ;
17915: GO 18064
// if tmp > 5 then
17917: LD_VAR 0 3
17921: PUSH
17922: LD_INT 5
17924: GREATER
17925: IFFALSE 17937
// k := 5 else
17927: LD_ADDR_VAR 0 2
17931: PUSH
17932: LD_INT 5
17934: ST_TO_ADDR
17935: GO 17947
// k := tmp ;
17937: LD_ADDR_VAR 0 2
17941: PUSH
17942: LD_VAR 0 3
17946: ST_TO_ADDR
// for i := 1 to k do
17947: LD_ADDR_VAR 0 1
17951: PUSH
17952: DOUBLE
17953: LD_INT 1
17955: DEC
17956: ST_TO_ADDR
17957: LD_VAR 0 2
17961: PUSH
17962: FOR_TO
17963: IFFALSE 18062
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17965: LD_VAR 0 3
17969: PUSH
17970: LD_VAR 0 1
17974: ARRAY
17975: PPUSH
17976: LD_VAR 0 1
17980: PUSH
17981: LD_INT 4
17983: MOD
17984: PUSH
17985: LD_INT 1
17987: PLUS
17988: PPUSH
17989: CALL_OW 259
17993: PUSH
17994: LD_INT 10
17996: LESS
17997: IFFALSE 18060
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17999: LD_VAR 0 3
18003: PUSH
18004: LD_VAR 0 1
18008: ARRAY
18009: PPUSH
18010: LD_VAR 0 1
18014: PUSH
18015: LD_INT 4
18017: MOD
18018: PUSH
18019: LD_INT 1
18021: PLUS
18022: PPUSH
18023: LD_VAR 0 3
18027: PUSH
18028: LD_VAR 0 1
18032: ARRAY
18033: PPUSH
18034: LD_VAR 0 1
18038: PUSH
18039: LD_INT 4
18041: MOD
18042: PUSH
18043: LD_INT 1
18045: PLUS
18046: PPUSH
18047: CALL_OW 259
18051: PUSH
18052: LD_INT 1
18054: PLUS
18055: PPUSH
18056: CALL_OW 237
18060: GO 17962
18062: POP
18063: POP
// end ;
18064: PPOPN 3
18066: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18067: LD_EXP 22
18071: PUSH
18072: LD_EXP 30
18076: AND
18077: IFFALSE 18097
18079: GO 18081
18081: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18082: LD_INT 4
18084: PPUSH
18085: LD_OWVAR 2
18089: PPUSH
18090: LD_INT 0
18092: PPUSH
18093: CALL_OW 324
18097: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18098: LD_EXP 22
18102: PUSH
18103: LD_EXP 59
18107: AND
18108: IFFALSE 18128
18110: GO 18112
18112: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18113: LD_INT 19
18115: PPUSH
18116: LD_OWVAR 2
18120: PPUSH
18121: LD_INT 0
18123: PPUSH
18124: CALL_OW 324
18128: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18129: LD_EXP 22
18133: PUSH
18134: LD_EXP 31
18138: AND
18139: IFFALSE 18241
18141: GO 18143
18143: DISABLE
18144: LD_INT 0
18146: PPUSH
18147: PPUSH
// begin enable ;
18148: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18149: LD_ADDR_VAR 0 2
18153: PUSH
18154: LD_INT 22
18156: PUSH
18157: LD_OWVAR 2
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 2
18168: PUSH
18169: LD_INT 34
18171: PUSH
18172: LD_INT 11
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 34
18181: PUSH
18182: LD_INT 30
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PPUSH
18198: CALL_OW 69
18202: ST_TO_ADDR
// if not tmp then
18203: LD_VAR 0 2
18207: NOT
18208: IFFALSE 18212
// exit ;
18210: GO 18241
// for i in tmp do
18212: LD_ADDR_VAR 0 1
18216: PUSH
18217: LD_VAR 0 2
18221: PUSH
18222: FOR_IN
18223: IFFALSE 18239
// begin SetLives ( i , 0 ) ;
18225: LD_VAR 0 1
18229: PPUSH
18230: LD_INT 0
18232: PPUSH
18233: CALL_OW 234
// end ;
18237: GO 18222
18239: POP
18240: POP
// end ;
18241: PPOPN 2
18243: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18244: LD_EXP 22
18248: PUSH
18249: LD_EXP 32
18253: AND
18254: IFFALSE 18274
18256: GO 18258
18258: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18259: LD_INT 32
18261: PPUSH
18262: LD_OWVAR 2
18266: PPUSH
18267: LD_INT 0
18269: PPUSH
18270: CALL_OW 324
18274: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18275: LD_EXP 22
18279: PUSH
18280: LD_EXP 33
18284: AND
18285: IFFALSE 18466
18287: GO 18289
18289: DISABLE
18290: LD_INT 0
18292: PPUSH
18293: PPUSH
18294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18295: LD_ADDR_VAR 0 2
18299: PUSH
18300: LD_INT 22
18302: PUSH
18303: LD_OWVAR 2
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 33
18314: PUSH
18315: LD_INT 3
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PPUSH
18326: CALL_OW 69
18330: ST_TO_ADDR
// if not tmp then
18331: LD_VAR 0 2
18335: NOT
18336: IFFALSE 18340
// exit ;
18338: GO 18466
// side := 0 ;
18340: LD_ADDR_VAR 0 3
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// for i := 1 to 8 do
18348: LD_ADDR_VAR 0 1
18352: PUSH
18353: DOUBLE
18354: LD_INT 1
18356: DEC
18357: ST_TO_ADDR
18358: LD_INT 8
18360: PUSH
18361: FOR_TO
18362: IFFALSE 18410
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18364: LD_OWVAR 2
18368: PUSH
18369: LD_VAR 0 1
18373: NONEQUAL
18374: PUSH
18375: LD_OWVAR 2
18379: PPUSH
18380: LD_VAR 0 1
18384: PPUSH
18385: CALL_OW 81
18389: PUSH
18390: LD_INT 2
18392: EQUAL
18393: AND
18394: IFFALSE 18408
// begin side := i ;
18396: LD_ADDR_VAR 0 3
18400: PUSH
18401: LD_VAR 0 1
18405: ST_TO_ADDR
// break ;
18406: GO 18410
// end ;
18408: GO 18361
18410: POP
18411: POP
// if not side then
18412: LD_VAR 0 3
18416: NOT
18417: IFFALSE 18421
// exit ;
18419: GO 18466
// for i := 1 to tmp do
18421: LD_ADDR_VAR 0 1
18425: PUSH
18426: DOUBLE
18427: LD_INT 1
18429: DEC
18430: ST_TO_ADDR
18431: LD_VAR 0 2
18435: PUSH
18436: FOR_TO
18437: IFFALSE 18464
// if Prob ( 60 ) then
18439: LD_INT 60
18441: PPUSH
18442: CALL_OW 13
18446: IFFALSE 18462
// SetSide ( i , side ) ;
18448: LD_VAR 0 1
18452: PPUSH
18453: LD_VAR 0 3
18457: PPUSH
18458: CALL_OW 235
18462: GO 18436
18464: POP
18465: POP
// end ;
18466: PPOPN 3
18468: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18469: LD_EXP 22
18473: PUSH
18474: LD_EXP 35
18478: AND
18479: IFFALSE 18598
18481: GO 18483
18483: DISABLE
18484: LD_INT 0
18486: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18487: LD_ADDR_VAR 0 1
18491: PUSH
18492: LD_INT 22
18494: PUSH
18495: LD_OWVAR 2
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 21
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 3
18516: PUSH
18517: LD_INT 23
18519: PUSH
18520: LD_INT 0
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: PPUSH
18536: CALL_OW 69
18540: PUSH
18541: FOR_IN
18542: IFFALSE 18596
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18544: LD_VAR 0 1
18548: PPUSH
18549: CALL_OW 257
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: LD_INT 2
18559: PUSH
18560: LD_INT 3
18562: PUSH
18563: LD_INT 4
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: IN
18572: IFFALSE 18594
// SetClass ( un , rand ( 1 , 4 ) ) ;
18574: LD_VAR 0 1
18578: PPUSH
18579: LD_INT 1
18581: PPUSH
18582: LD_INT 4
18584: PPUSH
18585: CALL_OW 12
18589: PPUSH
18590: CALL_OW 336
18594: GO 18541
18596: POP
18597: POP
// end ;
18598: PPOPN 1
18600: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18601: LD_EXP 22
18605: PUSH
18606: LD_EXP 34
18610: AND
18611: IFFALSE 18690
18613: GO 18615
18615: DISABLE
18616: LD_INT 0
18618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18619: LD_ADDR_VAR 0 1
18623: PUSH
18624: LD_INT 22
18626: PUSH
18627: LD_OWVAR 2
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 21
18638: PUSH
18639: LD_INT 3
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PPUSH
18650: CALL_OW 69
18654: ST_TO_ADDR
// if not tmp then
18655: LD_VAR 0 1
18659: NOT
18660: IFFALSE 18664
// exit ;
18662: GO 18690
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18664: LD_VAR 0 1
18668: PUSH
18669: LD_INT 1
18671: PPUSH
18672: LD_VAR 0 1
18676: PPUSH
18677: CALL_OW 12
18681: ARRAY
18682: PPUSH
18683: LD_INT 100
18685: PPUSH
18686: CALL_OW 234
// end ;
18690: PPOPN 1
18692: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18693: LD_EXP 22
18697: PUSH
18698: LD_EXP 36
18702: AND
18703: IFFALSE 18801
18705: GO 18707
18707: DISABLE
18708: LD_INT 0
18710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18711: LD_ADDR_VAR 0 1
18715: PUSH
18716: LD_INT 22
18718: PUSH
18719: LD_OWVAR 2
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 21
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PPUSH
18742: CALL_OW 69
18746: ST_TO_ADDR
// if not tmp then
18747: LD_VAR 0 1
18751: NOT
18752: IFFALSE 18756
// exit ;
18754: GO 18801
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18756: LD_VAR 0 1
18760: PUSH
18761: LD_INT 1
18763: PPUSH
18764: LD_VAR 0 1
18768: PPUSH
18769: CALL_OW 12
18773: ARRAY
18774: PPUSH
18775: LD_INT 1
18777: PPUSH
18778: LD_INT 4
18780: PPUSH
18781: CALL_OW 12
18785: PPUSH
18786: LD_INT 3000
18788: PPUSH
18789: LD_INT 9000
18791: PPUSH
18792: CALL_OW 12
18796: PPUSH
18797: CALL_OW 492
// end ;
18801: PPOPN 1
18803: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18804: LD_EXP 22
18808: PUSH
18809: LD_EXP 37
18813: AND
18814: IFFALSE 18834
18816: GO 18818
18818: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18819: LD_INT 1
18821: PPUSH
18822: LD_OWVAR 2
18826: PPUSH
18827: LD_INT 0
18829: PPUSH
18830: CALL_OW 324
18834: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18835: LD_EXP 22
18839: PUSH
18840: LD_EXP 38
18844: AND
18845: IFFALSE 18928
18847: GO 18849
18849: DISABLE
18850: LD_INT 0
18852: PPUSH
18853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18854: LD_ADDR_VAR 0 2
18858: PUSH
18859: LD_INT 22
18861: PUSH
18862: LD_OWVAR 2
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 21
18873: PUSH
18874: LD_INT 3
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PPUSH
18885: CALL_OW 69
18889: ST_TO_ADDR
// if not tmp then
18890: LD_VAR 0 2
18894: NOT
18895: IFFALSE 18899
// exit ;
18897: GO 18928
// for i in tmp do
18899: LD_ADDR_VAR 0 1
18903: PUSH
18904: LD_VAR 0 2
18908: PUSH
18909: FOR_IN
18910: IFFALSE 18926
// SetBLevel ( i , 10 ) ;
18912: LD_VAR 0 1
18916: PPUSH
18917: LD_INT 10
18919: PPUSH
18920: CALL_OW 241
18924: GO 18909
18926: POP
18927: POP
// end ;
18928: PPOPN 2
18930: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18931: LD_EXP 22
18935: PUSH
18936: LD_EXP 39
18940: AND
18941: IFFALSE 19052
18943: GO 18945
18945: DISABLE
18946: LD_INT 0
18948: PPUSH
18949: PPUSH
18950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18951: LD_ADDR_VAR 0 3
18955: PUSH
18956: LD_INT 22
18958: PUSH
18959: LD_OWVAR 2
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 25
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PPUSH
18982: CALL_OW 69
18986: ST_TO_ADDR
// if not tmp then
18987: LD_VAR 0 3
18991: NOT
18992: IFFALSE 18996
// exit ;
18994: GO 19052
// un := tmp [ rand ( 1 , tmp ) ] ;
18996: LD_ADDR_VAR 0 2
19000: PUSH
19001: LD_VAR 0 3
19005: PUSH
19006: LD_INT 1
19008: PPUSH
19009: LD_VAR 0 3
19013: PPUSH
19014: CALL_OW 12
19018: ARRAY
19019: ST_TO_ADDR
// if Crawls ( un ) then
19020: LD_VAR 0 2
19024: PPUSH
19025: CALL_OW 318
19029: IFFALSE 19040
// ComWalk ( un ) ;
19031: LD_VAR 0 2
19035: PPUSH
19036: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19040: LD_VAR 0 2
19044: PPUSH
19045: LD_INT 5
19047: PPUSH
19048: CALL_OW 336
// end ;
19052: PPOPN 3
19054: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19055: LD_EXP 22
19059: PUSH
19060: LD_EXP 40
19064: AND
19065: PUSH
19066: LD_OWVAR 67
19070: PUSH
19071: LD_INT 4
19073: LESS
19074: AND
19075: IFFALSE 19094
19077: GO 19079
19079: DISABLE
// begin Difficulty := Difficulty + 1 ;
19080: LD_ADDR_OWVAR 67
19084: PUSH
19085: LD_OWVAR 67
19089: PUSH
19090: LD_INT 1
19092: PLUS
19093: ST_TO_ADDR
// end ;
19094: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19095: LD_EXP 22
19099: PUSH
19100: LD_EXP 41
19104: AND
19105: IFFALSE 19208
19107: GO 19109
19109: DISABLE
19110: LD_INT 0
19112: PPUSH
// begin for i := 1 to 5 do
19113: LD_ADDR_VAR 0 1
19117: PUSH
19118: DOUBLE
19119: LD_INT 1
19121: DEC
19122: ST_TO_ADDR
19123: LD_INT 5
19125: PUSH
19126: FOR_TO
19127: IFFALSE 19206
// begin uc_nation := nation_nature ;
19129: LD_ADDR_OWVAR 21
19133: PUSH
19134: LD_INT 0
19136: ST_TO_ADDR
// uc_side := 0 ;
19137: LD_ADDR_OWVAR 20
19141: PUSH
19142: LD_INT 0
19144: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19145: LD_ADDR_OWVAR 29
19149: PUSH
19150: LD_INT 12
19152: PUSH
19153: LD_INT 12
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: ST_TO_ADDR
// hc_agressivity := 20 ;
19160: LD_ADDR_OWVAR 35
19164: PUSH
19165: LD_INT 20
19167: ST_TO_ADDR
// hc_class := class_tiger ;
19168: LD_ADDR_OWVAR 28
19172: PUSH
19173: LD_INT 14
19175: ST_TO_ADDR
// hc_gallery :=  ;
19176: LD_ADDR_OWVAR 33
19180: PUSH
19181: LD_STRING 
19183: ST_TO_ADDR
// hc_name :=  ;
19184: LD_ADDR_OWVAR 26
19188: PUSH
19189: LD_STRING 
19191: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19192: CALL_OW 44
19196: PPUSH
19197: LD_INT 0
19199: PPUSH
19200: CALL_OW 51
// end ;
19204: GO 19126
19206: POP
19207: POP
// end ;
19208: PPOPN 1
19210: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19211: LD_EXP 22
19215: PUSH
19216: LD_EXP 42
19220: AND
19221: IFFALSE 19230
19223: GO 19225
19225: DISABLE
// StreamSibBomb ;
19226: CALL 19231 0 0
19230: END
// export function StreamSibBomb ; var i , x , y ; begin
19231: LD_INT 0
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
// result := false ;
19237: LD_ADDR_VAR 0 1
19241: PUSH
19242: LD_INT 0
19244: ST_TO_ADDR
// for i := 1 to 16 do
19245: LD_ADDR_VAR 0 2
19249: PUSH
19250: DOUBLE
19251: LD_INT 1
19253: DEC
19254: ST_TO_ADDR
19255: LD_INT 16
19257: PUSH
19258: FOR_TO
19259: IFFALSE 19458
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19261: LD_ADDR_VAR 0 3
19265: PUSH
19266: LD_INT 10
19268: PUSH
19269: LD_INT 20
19271: PUSH
19272: LD_INT 30
19274: PUSH
19275: LD_INT 40
19277: PUSH
19278: LD_INT 50
19280: PUSH
19281: LD_INT 60
19283: PUSH
19284: LD_INT 70
19286: PUSH
19287: LD_INT 80
19289: PUSH
19290: LD_INT 90
19292: PUSH
19293: LD_INT 100
19295: PUSH
19296: LD_INT 110
19298: PUSH
19299: LD_INT 120
19301: PUSH
19302: LD_INT 130
19304: PUSH
19305: LD_INT 140
19307: PUSH
19308: LD_INT 150
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 1
19330: PPUSH
19331: LD_INT 15
19333: PPUSH
19334: CALL_OW 12
19338: ARRAY
19339: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19340: LD_ADDR_VAR 0 4
19344: PUSH
19345: LD_INT 10
19347: PUSH
19348: LD_INT 20
19350: PUSH
19351: LD_INT 30
19353: PUSH
19354: LD_INT 40
19356: PUSH
19357: LD_INT 50
19359: PUSH
19360: LD_INT 60
19362: PUSH
19363: LD_INT 70
19365: PUSH
19366: LD_INT 80
19368: PUSH
19369: LD_INT 90
19371: PUSH
19372: LD_INT 100
19374: PUSH
19375: LD_INT 110
19377: PUSH
19378: LD_INT 120
19380: PUSH
19381: LD_INT 130
19383: PUSH
19384: LD_INT 140
19386: PUSH
19387: LD_INT 150
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 1
19409: PPUSH
19410: LD_INT 15
19412: PPUSH
19413: CALL_OW 12
19417: ARRAY
19418: ST_TO_ADDR
// if ValidHex ( x , y ) then
19419: LD_VAR 0 3
19423: PPUSH
19424: LD_VAR 0 4
19428: PPUSH
19429: CALL_OW 488
19433: IFFALSE 19456
// begin result := [ x , y ] ;
19435: LD_ADDR_VAR 0 1
19439: PUSH
19440: LD_VAR 0 3
19444: PUSH
19445: LD_VAR 0 4
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: ST_TO_ADDR
// break ;
19454: GO 19458
// end ; end ;
19456: GO 19258
19458: POP
19459: POP
// if result then
19460: LD_VAR 0 1
19464: IFFALSE 19524
// begin ToLua ( playSibBomb() ) ;
19466: LD_STRING playSibBomb()
19468: PPUSH
19469: CALL_OW 559
// wait ( 0 0$14 ) ;
19473: LD_INT 490
19475: PPUSH
19476: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19480: LD_VAR 0 1
19484: PUSH
19485: LD_INT 1
19487: ARRAY
19488: PPUSH
19489: LD_VAR 0 1
19493: PUSH
19494: LD_INT 2
19496: ARRAY
19497: PPUSH
19498: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19502: LD_VAR 0 1
19506: PUSH
19507: LD_INT 1
19509: ARRAY
19510: PPUSH
19511: LD_VAR 0 1
19515: PUSH
19516: LD_INT 2
19518: ARRAY
19519: PPUSH
19520: CALL_OW 429
// end ; end ;
19524: LD_VAR 0 1
19528: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19529: LD_EXP 22
19533: PUSH
19534: LD_EXP 44
19538: AND
19539: IFFALSE 19551
19541: GO 19543
19543: DISABLE
// YouLost (  ) ;
19544: LD_STRING 
19546: PPUSH
19547: CALL_OW 104
19551: END
// every 0 0$1 trigger StreamModeActive and sFog do
19552: LD_EXP 22
19556: PUSH
19557: LD_EXP 43
19561: AND
19562: IFFALSE 19576
19564: GO 19566
19566: DISABLE
// FogOff ( your_side ) ;
19567: LD_OWVAR 2
19571: PPUSH
19572: CALL_OW 344
19576: END
// every 0 0$1 trigger StreamModeActive and sSun do
19577: LD_EXP 22
19581: PUSH
19582: LD_EXP 45
19586: AND
19587: IFFALSE 19615
19589: GO 19591
19591: DISABLE
// begin solar_recharge_percent := 0 ;
19592: LD_ADDR_OWVAR 79
19596: PUSH
19597: LD_INT 0
19599: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19600: LD_INT 10500
19602: PPUSH
19603: CALL_OW 67
// solar_recharge_percent := 100 ;
19607: LD_ADDR_OWVAR 79
19611: PUSH
19612: LD_INT 100
19614: ST_TO_ADDR
// end ;
19615: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19616: LD_EXP 22
19620: PUSH
19621: LD_EXP 46
19625: AND
19626: IFFALSE 19865
19628: GO 19630
19630: DISABLE
19631: LD_INT 0
19633: PPUSH
19634: PPUSH
19635: PPUSH
// begin tmp := [ ] ;
19636: LD_ADDR_VAR 0 3
19640: PUSH
19641: EMPTY
19642: ST_TO_ADDR
// for i := 1 to 6 do
19643: LD_ADDR_VAR 0 1
19647: PUSH
19648: DOUBLE
19649: LD_INT 1
19651: DEC
19652: ST_TO_ADDR
19653: LD_INT 6
19655: PUSH
19656: FOR_TO
19657: IFFALSE 19762
// begin uc_nation := nation_nature ;
19659: LD_ADDR_OWVAR 21
19663: PUSH
19664: LD_INT 0
19666: ST_TO_ADDR
// uc_side := 0 ;
19667: LD_ADDR_OWVAR 20
19671: PUSH
19672: LD_INT 0
19674: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19675: LD_ADDR_OWVAR 29
19679: PUSH
19680: LD_INT 12
19682: PUSH
19683: LD_INT 12
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: ST_TO_ADDR
// hc_agressivity := 20 ;
19690: LD_ADDR_OWVAR 35
19694: PUSH
19695: LD_INT 20
19697: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19698: LD_ADDR_OWVAR 28
19702: PUSH
19703: LD_INT 17
19705: ST_TO_ADDR
// hc_gallery :=  ;
19706: LD_ADDR_OWVAR 33
19710: PUSH
19711: LD_STRING 
19713: ST_TO_ADDR
// hc_name :=  ;
19714: LD_ADDR_OWVAR 26
19718: PUSH
19719: LD_STRING 
19721: ST_TO_ADDR
// un := CreateHuman ;
19722: LD_ADDR_VAR 0 2
19726: PUSH
19727: CALL_OW 44
19731: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19732: LD_VAR 0 2
19736: PPUSH
19737: LD_INT 1
19739: PPUSH
19740: CALL_OW 51
// tmp := tmp ^ un ;
19744: LD_ADDR_VAR 0 3
19748: PUSH
19749: LD_VAR 0 3
19753: PUSH
19754: LD_VAR 0 2
19758: ADD
19759: ST_TO_ADDR
// end ;
19760: GO 19656
19762: POP
19763: POP
// repeat wait ( 0 0$1 ) ;
19764: LD_INT 35
19766: PPUSH
19767: CALL_OW 67
// for un in tmp do
19771: LD_ADDR_VAR 0 2
19775: PUSH
19776: LD_VAR 0 3
19780: PUSH
19781: FOR_IN
19782: IFFALSE 19856
// begin if IsDead ( un ) then
19784: LD_VAR 0 2
19788: PPUSH
19789: CALL_OW 301
19793: IFFALSE 19813
// begin tmp := tmp diff un ;
19795: LD_ADDR_VAR 0 3
19799: PUSH
19800: LD_VAR 0 3
19804: PUSH
19805: LD_VAR 0 2
19809: DIFF
19810: ST_TO_ADDR
// continue ;
19811: GO 19781
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19813: LD_VAR 0 2
19817: PPUSH
19818: LD_INT 3
19820: PUSH
19821: LD_INT 22
19823: PUSH
19824: LD_INT 0
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PPUSH
19835: CALL_OW 69
19839: PPUSH
19840: LD_VAR 0 2
19844: PPUSH
19845: CALL_OW 74
19849: PPUSH
19850: CALL_OW 115
// end ;
19854: GO 19781
19856: POP
19857: POP
// until not tmp ;
19858: LD_VAR 0 3
19862: NOT
19863: IFFALSE 19764
// end ;
19865: PPOPN 3
19867: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19868: LD_EXP 22
19872: PUSH
19873: LD_EXP 47
19877: AND
19878: IFFALSE 19932
19880: GO 19882
19882: DISABLE
// begin ToLua ( displayTroll(); ) ;
19883: LD_STRING displayTroll();
19885: PPUSH
19886: CALL_OW 559
// wait ( 3 3$00 ) ;
19890: LD_INT 6300
19892: PPUSH
19893: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19897: LD_STRING hideTroll();
19899: PPUSH
19900: CALL_OW 559
// wait ( 1 1$00 ) ;
19904: LD_INT 2100
19906: PPUSH
19907: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19911: LD_STRING displayTroll();
19913: PPUSH
19914: CALL_OW 559
// wait ( 1 1$00 ) ;
19918: LD_INT 2100
19920: PPUSH
19921: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19925: LD_STRING hideTroll();
19927: PPUSH
19928: CALL_OW 559
// end ;
19932: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19933: LD_EXP 22
19937: PUSH
19938: LD_EXP 48
19942: AND
19943: IFFALSE 20006
19945: GO 19947
19947: DISABLE
19948: LD_INT 0
19950: PPUSH
// begin p := 0 ;
19951: LD_ADDR_VAR 0 1
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// repeat game_speed := 1 ;
19959: LD_ADDR_OWVAR 65
19963: PUSH
19964: LD_INT 1
19966: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19967: LD_INT 35
19969: PPUSH
19970: CALL_OW 67
// p := p + 1 ;
19974: LD_ADDR_VAR 0 1
19978: PUSH
19979: LD_VAR 0 1
19983: PUSH
19984: LD_INT 1
19986: PLUS
19987: ST_TO_ADDR
// until p >= 60 ;
19988: LD_VAR 0 1
19992: PUSH
19993: LD_INT 60
19995: GREATEREQUAL
19996: IFFALSE 19959
// game_speed := 4 ;
19998: LD_ADDR_OWVAR 65
20002: PUSH
20003: LD_INT 4
20005: ST_TO_ADDR
// end ;
20006: PPOPN 1
20008: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20009: LD_EXP 22
20013: PUSH
20014: LD_EXP 49
20018: AND
20019: IFFALSE 20165
20021: GO 20023
20023: DISABLE
20024: LD_INT 0
20026: PPUSH
20027: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20028: LD_ADDR_VAR 0 1
20032: PUSH
20033: LD_INT 22
20035: PUSH
20036: LD_OWVAR 2
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 30
20050: PUSH
20051: LD_INT 0
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 30
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PPUSH
20077: CALL_OW 69
20081: ST_TO_ADDR
// if not depot then
20082: LD_VAR 0 1
20086: NOT
20087: IFFALSE 20091
// exit ;
20089: GO 20165
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20091: LD_ADDR_VAR 0 2
20095: PUSH
20096: LD_VAR 0 1
20100: PUSH
20101: LD_INT 1
20103: PPUSH
20104: LD_VAR 0 1
20108: PPUSH
20109: CALL_OW 12
20113: ARRAY
20114: PPUSH
20115: CALL_OW 274
20119: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20120: LD_VAR 0 2
20124: PPUSH
20125: LD_INT 1
20127: PPUSH
20128: LD_INT 0
20130: PPUSH
20131: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20135: LD_VAR 0 2
20139: PPUSH
20140: LD_INT 2
20142: PPUSH
20143: LD_INT 0
20145: PPUSH
20146: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20150: LD_VAR 0 2
20154: PPUSH
20155: LD_INT 3
20157: PPUSH
20158: LD_INT 0
20160: PPUSH
20161: CALL_OW 277
// end ;
20165: PPOPN 2
20167: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20168: LD_EXP 22
20172: PUSH
20173: LD_EXP 50
20177: AND
20178: IFFALSE 20275
20180: GO 20182
20182: DISABLE
20183: LD_INT 0
20185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20186: LD_ADDR_VAR 0 1
20190: PUSH
20191: LD_INT 22
20193: PUSH
20194: LD_OWVAR 2
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 21
20205: PUSH
20206: LD_INT 1
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 3
20215: PUSH
20216: LD_INT 23
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: LIST
20234: PPUSH
20235: CALL_OW 69
20239: ST_TO_ADDR
// if not tmp then
20240: LD_VAR 0 1
20244: NOT
20245: IFFALSE 20249
// exit ;
20247: GO 20275
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20249: LD_VAR 0 1
20253: PUSH
20254: LD_INT 1
20256: PPUSH
20257: LD_VAR 0 1
20261: PPUSH
20262: CALL_OW 12
20266: ARRAY
20267: PPUSH
20268: LD_INT 200
20270: PPUSH
20271: CALL_OW 234
// end ;
20275: PPOPN 1
20277: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20278: LD_EXP 22
20282: PUSH
20283: LD_EXP 51
20287: AND
20288: IFFALSE 20367
20290: GO 20292
20292: DISABLE
20293: LD_INT 0
20295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20296: LD_ADDR_VAR 0 1
20300: PUSH
20301: LD_INT 22
20303: PUSH
20304: LD_OWVAR 2
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 21
20315: PUSH
20316: LD_INT 2
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PPUSH
20327: CALL_OW 69
20331: ST_TO_ADDR
// if not tmp then
20332: LD_VAR 0 1
20336: NOT
20337: IFFALSE 20341
// exit ;
20339: GO 20367
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20341: LD_VAR 0 1
20345: PUSH
20346: LD_INT 1
20348: PPUSH
20349: LD_VAR 0 1
20353: PPUSH
20354: CALL_OW 12
20358: ARRAY
20359: PPUSH
20360: LD_INT 60
20362: PPUSH
20363: CALL_OW 234
// end ;
20367: PPOPN 1
20369: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20370: LD_EXP 22
20374: PUSH
20375: LD_EXP 52
20379: AND
20380: IFFALSE 20479
20382: GO 20384
20384: DISABLE
20385: LD_INT 0
20387: PPUSH
20388: PPUSH
// begin enable ;
20389: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20390: LD_ADDR_VAR 0 1
20394: PUSH
20395: LD_INT 22
20397: PUSH
20398: LD_OWVAR 2
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 61
20409: PUSH
20410: EMPTY
20411: LIST
20412: PUSH
20413: LD_INT 33
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: LIST
20427: PPUSH
20428: CALL_OW 69
20432: ST_TO_ADDR
// if not tmp then
20433: LD_VAR 0 1
20437: NOT
20438: IFFALSE 20442
// exit ;
20440: GO 20479
// for i in tmp do
20442: LD_ADDR_VAR 0 2
20446: PUSH
20447: LD_VAR 0 1
20451: PUSH
20452: FOR_IN
20453: IFFALSE 20477
// if IsControledBy ( i ) then
20455: LD_VAR 0 2
20459: PPUSH
20460: CALL_OW 312
20464: IFFALSE 20475
// ComUnlink ( i ) ;
20466: LD_VAR 0 2
20470: PPUSH
20471: CALL_OW 136
20475: GO 20452
20477: POP
20478: POP
// end ;
20479: PPOPN 2
20481: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20482: LD_EXP 22
20486: PUSH
20487: LD_EXP 53
20491: AND
20492: IFFALSE 20632
20494: GO 20496
20496: DISABLE
20497: LD_INT 0
20499: PPUSH
20500: PPUSH
// begin ToLua ( displayPowell(); ) ;
20501: LD_STRING displayPowell();
20503: PPUSH
20504: CALL_OW 559
// uc_side := 0 ;
20508: LD_ADDR_OWVAR 20
20512: PUSH
20513: LD_INT 0
20515: ST_TO_ADDR
// uc_nation := 2 ;
20516: LD_ADDR_OWVAR 21
20520: PUSH
20521: LD_INT 2
20523: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20524: LD_ADDR_OWVAR 37
20528: PUSH
20529: LD_INT 14
20531: ST_TO_ADDR
// vc_engine := engine_siberite ;
20532: LD_ADDR_OWVAR 39
20536: PUSH
20537: LD_INT 3
20539: ST_TO_ADDR
// vc_control := control_apeman ;
20540: LD_ADDR_OWVAR 38
20544: PUSH
20545: LD_INT 5
20547: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20548: LD_ADDR_OWVAR 40
20552: PUSH
20553: LD_INT 29
20555: ST_TO_ADDR
// un := CreateVehicle ;
20556: LD_ADDR_VAR 0 2
20560: PUSH
20561: CALL_OW 45
20565: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20566: LD_VAR 0 2
20570: PPUSH
20571: LD_INT 1
20573: PPUSH
20574: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20578: LD_INT 35
20580: PPUSH
20581: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20585: LD_VAR 0 2
20589: PPUSH
20590: LD_INT 22
20592: PUSH
20593: LD_OWVAR 2
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PPUSH
20602: CALL_OW 69
20606: PPUSH
20607: LD_VAR 0 2
20611: PPUSH
20612: CALL_OW 74
20616: PPUSH
20617: CALL_OW 115
// until IsDead ( un ) ;
20621: LD_VAR 0 2
20625: PPUSH
20626: CALL_OW 301
20630: IFFALSE 20578
// end ;
20632: PPOPN 2
20634: END
// every 0 0$1 trigger StreamModeActive and sStu do
20635: LD_EXP 22
20639: PUSH
20640: LD_EXP 61
20644: AND
20645: IFFALSE 20661
20647: GO 20649
20649: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20650: LD_STRING displayStucuk();
20652: PPUSH
20653: CALL_OW 559
// ResetFog ;
20657: CALL_OW 335
// end ;
20661: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20662: LD_EXP 22
20666: PUSH
20667: LD_EXP 54
20671: AND
20672: IFFALSE 20813
20674: GO 20676
20676: DISABLE
20677: LD_INT 0
20679: PPUSH
20680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20681: LD_ADDR_VAR 0 2
20685: PUSH
20686: LD_INT 22
20688: PUSH
20689: LD_OWVAR 2
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 21
20700: PUSH
20701: LD_INT 1
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PPUSH
20712: CALL_OW 69
20716: ST_TO_ADDR
// if not tmp then
20717: LD_VAR 0 2
20721: NOT
20722: IFFALSE 20726
// exit ;
20724: GO 20813
// un := tmp [ rand ( 1 , tmp ) ] ;
20726: LD_ADDR_VAR 0 1
20730: PUSH
20731: LD_VAR 0 2
20735: PUSH
20736: LD_INT 1
20738: PPUSH
20739: LD_VAR 0 2
20743: PPUSH
20744: CALL_OW 12
20748: ARRAY
20749: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20750: LD_VAR 0 1
20754: PPUSH
20755: LD_INT 0
20757: PPUSH
20758: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20762: LD_VAR 0 1
20766: PPUSH
20767: LD_OWVAR 3
20771: PUSH
20772: LD_VAR 0 1
20776: DIFF
20777: PPUSH
20778: LD_VAR 0 1
20782: PPUSH
20783: CALL_OW 74
20787: PPUSH
20788: CALL_OW 115
// wait ( 0 0$20 ) ;
20792: LD_INT 700
20794: PPUSH
20795: CALL_OW 67
// SetSide ( un , your_side ) ;
20799: LD_VAR 0 1
20803: PPUSH
20804: LD_OWVAR 2
20808: PPUSH
20809: CALL_OW 235
// end ;
20813: PPOPN 2
20815: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20816: LD_EXP 22
20820: PUSH
20821: LD_EXP 55
20825: AND
20826: IFFALSE 20932
20828: GO 20830
20830: DISABLE
20831: LD_INT 0
20833: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20834: LD_ADDR_VAR 0 1
20838: PUSH
20839: LD_INT 22
20841: PUSH
20842: LD_OWVAR 2
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 2
20853: PUSH
20854: LD_INT 30
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 30
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PPUSH
20883: CALL_OW 69
20887: ST_TO_ADDR
// if not depot then
20888: LD_VAR 0 1
20892: NOT
20893: IFFALSE 20897
// exit ;
20895: GO 20932
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20897: LD_VAR 0 1
20901: PUSH
20902: LD_INT 1
20904: ARRAY
20905: PPUSH
20906: CALL_OW 250
20910: PPUSH
20911: LD_VAR 0 1
20915: PUSH
20916: LD_INT 1
20918: ARRAY
20919: PPUSH
20920: CALL_OW 251
20924: PPUSH
20925: LD_INT 70
20927: PPUSH
20928: CALL_OW 495
// end ;
20932: PPOPN 1
20934: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20935: LD_EXP 22
20939: PUSH
20940: LD_EXP 56
20944: AND
20945: IFFALSE 21156
20947: GO 20949
20949: DISABLE
20950: LD_INT 0
20952: PPUSH
20953: PPUSH
20954: PPUSH
20955: PPUSH
20956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20957: LD_ADDR_VAR 0 5
20961: PUSH
20962: LD_INT 22
20964: PUSH
20965: LD_OWVAR 2
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 21
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PPUSH
20988: CALL_OW 69
20992: ST_TO_ADDR
// if not tmp then
20993: LD_VAR 0 5
20997: NOT
20998: IFFALSE 21002
// exit ;
21000: GO 21156
// for i in tmp do
21002: LD_ADDR_VAR 0 1
21006: PUSH
21007: LD_VAR 0 5
21011: PUSH
21012: FOR_IN
21013: IFFALSE 21154
// begin d := rand ( 0 , 5 ) ;
21015: LD_ADDR_VAR 0 4
21019: PUSH
21020: LD_INT 0
21022: PPUSH
21023: LD_INT 5
21025: PPUSH
21026: CALL_OW 12
21030: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21031: LD_ADDR_VAR 0 2
21035: PUSH
21036: LD_VAR 0 1
21040: PPUSH
21041: CALL_OW 250
21045: PPUSH
21046: LD_VAR 0 4
21050: PPUSH
21051: LD_INT 3
21053: PPUSH
21054: LD_INT 12
21056: PPUSH
21057: CALL_OW 12
21061: PPUSH
21062: CALL_OW 272
21066: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21067: LD_ADDR_VAR 0 3
21071: PUSH
21072: LD_VAR 0 1
21076: PPUSH
21077: CALL_OW 251
21081: PPUSH
21082: LD_VAR 0 4
21086: PPUSH
21087: LD_INT 3
21089: PPUSH
21090: LD_INT 12
21092: PPUSH
21093: CALL_OW 12
21097: PPUSH
21098: CALL_OW 273
21102: ST_TO_ADDR
// if ValidHex ( x , y ) then
21103: LD_VAR 0 2
21107: PPUSH
21108: LD_VAR 0 3
21112: PPUSH
21113: CALL_OW 488
21117: IFFALSE 21152
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21119: LD_VAR 0 1
21123: PPUSH
21124: LD_VAR 0 2
21128: PPUSH
21129: LD_VAR 0 3
21133: PPUSH
21134: LD_INT 3
21136: PPUSH
21137: LD_INT 6
21139: PPUSH
21140: CALL_OW 12
21144: PPUSH
21145: LD_INT 1
21147: PPUSH
21148: CALL_OW 483
// end ;
21152: GO 21012
21154: POP
21155: POP
// end ;
21156: PPOPN 5
21158: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21159: LD_EXP 22
21163: PUSH
21164: LD_EXP 57
21168: AND
21169: IFFALSE 21263
21171: GO 21173
21173: DISABLE
21174: LD_INT 0
21176: PPUSH
21177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21178: LD_ADDR_VAR 0 2
21182: PUSH
21183: LD_INT 22
21185: PUSH
21186: LD_OWVAR 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 32
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 21
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: LIST
21219: PPUSH
21220: CALL_OW 69
21224: ST_TO_ADDR
// if not tmp then
21225: LD_VAR 0 2
21229: NOT
21230: IFFALSE 21234
// exit ;
21232: GO 21263
// for i in tmp do
21234: LD_ADDR_VAR 0 1
21238: PUSH
21239: LD_VAR 0 2
21243: PUSH
21244: FOR_IN
21245: IFFALSE 21261
// SetFuel ( i , 0 ) ;
21247: LD_VAR 0 1
21251: PPUSH
21252: LD_INT 0
21254: PPUSH
21255: CALL_OW 240
21259: GO 21244
21261: POP
21262: POP
// end ;
21263: PPOPN 2
21265: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21266: LD_EXP 22
21270: PUSH
21271: LD_EXP 58
21275: AND
21276: IFFALSE 21342
21278: GO 21280
21280: DISABLE
21281: LD_INT 0
21283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21284: LD_ADDR_VAR 0 1
21288: PUSH
21289: LD_INT 22
21291: PUSH
21292: LD_OWVAR 2
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 30
21303: PUSH
21304: LD_INT 29
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PPUSH
21315: CALL_OW 69
21319: ST_TO_ADDR
// if not tmp then
21320: LD_VAR 0 1
21324: NOT
21325: IFFALSE 21329
// exit ;
21327: GO 21342
// DestroyUnit ( tmp [ 1 ] ) ;
21329: LD_VAR 0 1
21333: PUSH
21334: LD_INT 1
21336: ARRAY
21337: PPUSH
21338: CALL_OW 65
// end ;
21342: PPOPN 1
21344: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21345: LD_EXP 22
21349: PUSH
21350: LD_EXP 60
21354: AND
21355: IFFALSE 21484
21357: GO 21359
21359: DISABLE
21360: LD_INT 0
21362: PPUSH
// begin uc_side := 0 ;
21363: LD_ADDR_OWVAR 20
21367: PUSH
21368: LD_INT 0
21370: ST_TO_ADDR
// uc_nation := nation_arabian ;
21371: LD_ADDR_OWVAR 21
21375: PUSH
21376: LD_INT 2
21378: ST_TO_ADDR
// hc_gallery :=  ;
21379: LD_ADDR_OWVAR 33
21383: PUSH
21384: LD_STRING 
21386: ST_TO_ADDR
// hc_name :=  ;
21387: LD_ADDR_OWVAR 26
21391: PUSH
21392: LD_STRING 
21394: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21395: LD_INT 1
21397: PPUSH
21398: LD_INT 11
21400: PPUSH
21401: LD_INT 10
21403: PPUSH
21404: CALL_OW 380
// un := CreateHuman ;
21408: LD_ADDR_VAR 0 1
21412: PUSH
21413: CALL_OW 44
21417: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21418: LD_VAR 0 1
21422: PPUSH
21423: LD_INT 1
21425: PPUSH
21426: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21430: LD_INT 35
21432: PPUSH
21433: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21437: LD_VAR 0 1
21441: PPUSH
21442: LD_INT 22
21444: PUSH
21445: LD_OWVAR 2
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PPUSH
21454: CALL_OW 69
21458: PPUSH
21459: LD_VAR 0 1
21463: PPUSH
21464: CALL_OW 74
21468: PPUSH
21469: CALL_OW 115
// until IsDead ( un ) ;
21473: LD_VAR 0 1
21477: PPUSH
21478: CALL_OW 301
21482: IFFALSE 21430
// end ;
21484: PPOPN 1
21486: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21487: LD_EXP 22
21491: PUSH
21492: LD_EXP 62
21496: AND
21497: IFFALSE 21509
21499: GO 21501
21501: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21502: LD_STRING earthquake(getX(game), 0, 32)
21504: PPUSH
21505: CALL_OW 559
21509: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21510: LD_EXP 22
21514: PUSH
21515: LD_EXP 63
21519: AND
21520: IFFALSE 21611
21522: GO 21524
21524: DISABLE
21525: LD_INT 0
21527: PPUSH
// begin enable ;
21528: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21529: LD_ADDR_VAR 0 1
21533: PUSH
21534: LD_INT 22
21536: PUSH
21537: LD_OWVAR 2
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 21
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 33
21558: PUSH
21559: LD_INT 3
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: LIST
21570: PPUSH
21571: CALL_OW 69
21575: ST_TO_ADDR
// if not tmp then
21576: LD_VAR 0 1
21580: NOT
21581: IFFALSE 21585
// exit ;
21583: GO 21611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21585: LD_VAR 0 1
21589: PUSH
21590: LD_INT 1
21592: PPUSH
21593: LD_VAR 0 1
21597: PPUSH
21598: CALL_OW 12
21602: ARRAY
21603: PPUSH
21604: LD_INT 1
21606: PPUSH
21607: CALL_OW 234
// end ;
21611: PPOPN 1
21613: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21614: LD_EXP 22
21618: PUSH
21619: LD_EXP 64
21623: AND
21624: IFFALSE 21765
21626: GO 21628
21628: DISABLE
21629: LD_INT 0
21631: PPUSH
21632: PPUSH
21633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21634: LD_ADDR_VAR 0 3
21638: PUSH
21639: LD_INT 22
21641: PUSH
21642: LD_OWVAR 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 25
21653: PUSH
21654: LD_INT 1
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PPUSH
21665: CALL_OW 69
21669: ST_TO_ADDR
// if not tmp then
21670: LD_VAR 0 3
21674: NOT
21675: IFFALSE 21679
// exit ;
21677: GO 21765
// un := tmp [ rand ( 1 , tmp ) ] ;
21679: LD_ADDR_VAR 0 2
21683: PUSH
21684: LD_VAR 0 3
21688: PUSH
21689: LD_INT 1
21691: PPUSH
21692: LD_VAR 0 3
21696: PPUSH
21697: CALL_OW 12
21701: ARRAY
21702: ST_TO_ADDR
// if Crawls ( un ) then
21703: LD_VAR 0 2
21707: PPUSH
21708: CALL_OW 318
21712: IFFALSE 21723
// ComWalk ( un ) ;
21714: LD_VAR 0 2
21718: PPUSH
21719: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21723: LD_VAR 0 2
21727: PPUSH
21728: LD_INT 9
21730: PPUSH
21731: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21735: LD_INT 28
21737: PPUSH
21738: LD_OWVAR 2
21742: PPUSH
21743: LD_INT 2
21745: PPUSH
21746: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21750: LD_INT 29
21752: PPUSH
21753: LD_OWVAR 2
21757: PPUSH
21758: LD_INT 2
21760: PPUSH
21761: CALL_OW 322
// end ;
21765: PPOPN 3
21767: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21768: LD_EXP 22
21772: PUSH
21773: LD_EXP 65
21777: AND
21778: IFFALSE 21889
21780: GO 21782
21782: DISABLE
21783: LD_INT 0
21785: PPUSH
21786: PPUSH
21787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21788: LD_ADDR_VAR 0 3
21792: PUSH
21793: LD_INT 22
21795: PUSH
21796: LD_OWVAR 2
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 25
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PPUSH
21819: CALL_OW 69
21823: ST_TO_ADDR
// if not tmp then
21824: LD_VAR 0 3
21828: NOT
21829: IFFALSE 21833
// exit ;
21831: GO 21889
// un := tmp [ rand ( 1 , tmp ) ] ;
21833: LD_ADDR_VAR 0 2
21837: PUSH
21838: LD_VAR 0 3
21842: PUSH
21843: LD_INT 1
21845: PPUSH
21846: LD_VAR 0 3
21850: PPUSH
21851: CALL_OW 12
21855: ARRAY
21856: ST_TO_ADDR
// if Crawls ( un ) then
21857: LD_VAR 0 2
21861: PPUSH
21862: CALL_OW 318
21866: IFFALSE 21877
// ComWalk ( un ) ;
21868: LD_VAR 0 2
21872: PPUSH
21873: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21877: LD_VAR 0 2
21881: PPUSH
21882: LD_INT 8
21884: PPUSH
21885: CALL_OW 336
// end ;
21889: PPOPN 3
21891: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21892: LD_EXP 22
21896: PUSH
21897: LD_EXP 66
21901: AND
21902: IFFALSE 22046
21904: GO 21906
21906: DISABLE
21907: LD_INT 0
21909: PPUSH
21910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21911: LD_ADDR_VAR 0 2
21915: PUSH
21916: LD_INT 22
21918: PUSH
21919: LD_OWVAR 2
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 21
21930: PUSH
21931: LD_INT 2
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 2
21940: PUSH
21941: LD_INT 34
21943: PUSH
21944: LD_INT 12
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 34
21953: PUSH
21954: LD_INT 51
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 34
21963: PUSH
21964: LD_INT 32
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: PPUSH
21982: CALL_OW 69
21986: ST_TO_ADDR
// if not tmp then
21987: LD_VAR 0 2
21991: NOT
21992: IFFALSE 21996
// exit ;
21994: GO 22046
// for i in tmp do
21996: LD_ADDR_VAR 0 1
22000: PUSH
22001: LD_VAR 0 2
22005: PUSH
22006: FOR_IN
22007: IFFALSE 22044
// if GetCargo ( i , mat_artifact ) = 0 then
22009: LD_VAR 0 1
22013: PPUSH
22014: LD_INT 4
22016: PPUSH
22017: CALL_OW 289
22021: PUSH
22022: LD_INT 0
22024: EQUAL
22025: IFFALSE 22042
// SetCargo ( i , mat_siberit , 100 ) ;
22027: LD_VAR 0 1
22031: PPUSH
22032: LD_INT 3
22034: PPUSH
22035: LD_INT 100
22037: PPUSH
22038: CALL_OW 290
22042: GO 22006
22044: POP
22045: POP
// end ;
22046: PPOPN 2
22048: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22049: LD_EXP 22
22053: PUSH
22054: LD_EXP 67
22058: AND
22059: IFFALSE 22242
22061: GO 22063
22063: DISABLE
22064: LD_INT 0
22066: PPUSH
22067: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22068: LD_ADDR_VAR 0 2
22072: PUSH
22073: LD_INT 22
22075: PUSH
22076: LD_OWVAR 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PPUSH
22085: CALL_OW 69
22089: ST_TO_ADDR
// if not tmp then
22090: LD_VAR 0 2
22094: NOT
22095: IFFALSE 22099
// exit ;
22097: GO 22242
// for i := 1 to 2 do
22099: LD_ADDR_VAR 0 1
22103: PUSH
22104: DOUBLE
22105: LD_INT 1
22107: DEC
22108: ST_TO_ADDR
22109: LD_INT 2
22111: PUSH
22112: FOR_TO
22113: IFFALSE 22240
// begin uc_side := your_side ;
22115: LD_ADDR_OWVAR 20
22119: PUSH
22120: LD_OWVAR 2
22124: ST_TO_ADDR
// uc_nation := nation_american ;
22125: LD_ADDR_OWVAR 21
22129: PUSH
22130: LD_INT 1
22132: ST_TO_ADDR
// vc_chassis := us_morphling ;
22133: LD_ADDR_OWVAR 37
22137: PUSH
22138: LD_INT 5
22140: ST_TO_ADDR
// vc_engine := engine_siberite ;
22141: LD_ADDR_OWVAR 39
22145: PUSH
22146: LD_INT 3
22148: ST_TO_ADDR
// vc_control := control_computer ;
22149: LD_ADDR_OWVAR 38
22153: PUSH
22154: LD_INT 3
22156: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22157: LD_ADDR_OWVAR 40
22161: PUSH
22162: LD_INT 10
22164: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22165: LD_VAR 0 2
22169: PUSH
22170: LD_INT 1
22172: ARRAY
22173: PPUSH
22174: CALL_OW 310
22178: NOT
22179: IFFALSE 22226
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22181: CALL_OW 45
22185: PPUSH
22186: LD_VAR 0 2
22190: PUSH
22191: LD_INT 1
22193: ARRAY
22194: PPUSH
22195: CALL_OW 250
22199: PPUSH
22200: LD_VAR 0 2
22204: PUSH
22205: LD_INT 1
22207: ARRAY
22208: PPUSH
22209: CALL_OW 251
22213: PPUSH
22214: LD_INT 12
22216: PPUSH
22217: LD_INT 1
22219: PPUSH
22220: CALL_OW 50
22224: GO 22238
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22226: CALL_OW 45
22230: PPUSH
22231: LD_INT 1
22233: PPUSH
22234: CALL_OW 51
// end ;
22238: GO 22112
22240: POP
22241: POP
// end ;
22242: PPOPN 2
22244: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22245: LD_EXP 22
22249: PUSH
22250: LD_EXP 68
22254: AND
22255: IFFALSE 22477
22257: GO 22259
22259: DISABLE
22260: LD_INT 0
22262: PPUSH
22263: PPUSH
22264: PPUSH
22265: PPUSH
22266: PPUSH
22267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22268: LD_ADDR_VAR 0 6
22272: PUSH
22273: LD_INT 22
22275: PUSH
22276: LD_OWVAR 2
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 21
22287: PUSH
22288: LD_INT 1
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 3
22297: PUSH
22298: LD_INT 23
22300: PUSH
22301: LD_INT 0
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: PPUSH
22317: CALL_OW 69
22321: ST_TO_ADDR
// if not tmp then
22322: LD_VAR 0 6
22326: NOT
22327: IFFALSE 22331
// exit ;
22329: GO 22477
// s1 := rand ( 1 , 4 ) ;
22331: LD_ADDR_VAR 0 2
22335: PUSH
22336: LD_INT 1
22338: PPUSH
22339: LD_INT 4
22341: PPUSH
22342: CALL_OW 12
22346: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22347: LD_ADDR_VAR 0 4
22351: PUSH
22352: LD_VAR 0 6
22356: PUSH
22357: LD_INT 1
22359: ARRAY
22360: PPUSH
22361: LD_VAR 0 2
22365: PPUSH
22366: CALL_OW 259
22370: ST_TO_ADDR
// if s1 = 1 then
22371: LD_VAR 0 2
22375: PUSH
22376: LD_INT 1
22378: EQUAL
22379: IFFALSE 22399
// s2 := rand ( 2 , 4 ) else
22381: LD_ADDR_VAR 0 3
22385: PUSH
22386: LD_INT 2
22388: PPUSH
22389: LD_INT 4
22391: PPUSH
22392: CALL_OW 12
22396: ST_TO_ADDR
22397: GO 22407
// s2 := 1 ;
22399: LD_ADDR_VAR 0 3
22403: PUSH
22404: LD_INT 1
22406: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22407: LD_ADDR_VAR 0 5
22411: PUSH
22412: LD_VAR 0 6
22416: PUSH
22417: LD_INT 1
22419: ARRAY
22420: PPUSH
22421: LD_VAR 0 3
22425: PPUSH
22426: CALL_OW 259
22430: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22431: LD_VAR 0 6
22435: PUSH
22436: LD_INT 1
22438: ARRAY
22439: PPUSH
22440: LD_VAR 0 2
22444: PPUSH
22445: LD_VAR 0 5
22449: PPUSH
22450: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22454: LD_VAR 0 6
22458: PUSH
22459: LD_INT 1
22461: ARRAY
22462: PPUSH
22463: LD_VAR 0 3
22467: PPUSH
22468: LD_VAR 0 4
22472: PPUSH
22473: CALL_OW 237
// end ;
22477: PPOPN 6
22479: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22480: LD_EXP 22
22484: PUSH
22485: LD_EXP 69
22489: AND
22490: IFFALSE 22569
22492: GO 22494
22494: DISABLE
22495: LD_INT 0
22497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22498: LD_ADDR_VAR 0 1
22502: PUSH
22503: LD_INT 22
22505: PUSH
22506: LD_OWVAR 2
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 30
22517: PUSH
22518: LD_INT 3
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PPUSH
22529: CALL_OW 69
22533: ST_TO_ADDR
// if not tmp then
22534: LD_VAR 0 1
22538: NOT
22539: IFFALSE 22543
// exit ;
22541: GO 22569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22543: LD_VAR 0 1
22547: PUSH
22548: LD_INT 1
22550: PPUSH
22551: LD_VAR 0 1
22555: PPUSH
22556: CALL_OW 12
22560: ARRAY
22561: PPUSH
22562: LD_INT 1
22564: PPUSH
22565: CALL_OW 234
// end ;
22569: PPOPN 1
22571: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22572: LD_EXP 22
22576: PUSH
22577: LD_EXP 70
22581: AND
22582: IFFALSE 22694
22584: GO 22586
22586: DISABLE
22587: LD_INT 0
22589: PPUSH
22590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22591: LD_ADDR_VAR 0 2
22595: PUSH
22596: LD_INT 22
22598: PUSH
22599: LD_OWVAR 2
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 2
22610: PUSH
22611: LD_INT 30
22613: PUSH
22614: LD_INT 27
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 30
22623: PUSH
22624: LD_INT 26
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 30
22633: PUSH
22634: LD_INT 28
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PPUSH
22651: CALL_OW 69
22655: ST_TO_ADDR
// if not tmp then
22656: LD_VAR 0 2
22660: NOT
22661: IFFALSE 22665
// exit ;
22663: GO 22694
// for i in tmp do
22665: LD_ADDR_VAR 0 1
22669: PUSH
22670: LD_VAR 0 2
22674: PUSH
22675: FOR_IN
22676: IFFALSE 22692
// SetLives ( i , 1 ) ;
22678: LD_VAR 0 1
22682: PPUSH
22683: LD_INT 1
22685: PPUSH
22686: CALL_OW 234
22690: GO 22675
22692: POP
22693: POP
// end ;
22694: PPOPN 2
22696: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22697: LD_EXP 22
22701: PUSH
22702: LD_EXP 71
22706: AND
22707: IFFALSE 22994
22709: GO 22711
22711: DISABLE
22712: LD_INT 0
22714: PPUSH
22715: PPUSH
22716: PPUSH
// begin i := rand ( 1 , 7 ) ;
22717: LD_ADDR_VAR 0 1
22721: PUSH
22722: LD_INT 1
22724: PPUSH
22725: LD_INT 7
22727: PPUSH
22728: CALL_OW 12
22732: ST_TO_ADDR
// case i of 1 :
22733: LD_VAR 0 1
22737: PUSH
22738: LD_INT 1
22740: DOUBLE
22741: EQUAL
22742: IFTRUE 22746
22744: GO 22756
22746: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22747: LD_STRING earthquake(getX(game), 0, 32)
22749: PPUSH
22750: CALL_OW 559
22754: GO 22994
22756: LD_INT 2
22758: DOUBLE
22759: EQUAL
22760: IFTRUE 22764
22762: GO 22778
22764: POP
// begin ToLua ( displayStucuk(); ) ;
22765: LD_STRING displayStucuk();
22767: PPUSH
22768: CALL_OW 559
// ResetFog ;
22772: CALL_OW 335
// end ; 3 :
22776: GO 22994
22778: LD_INT 3
22780: DOUBLE
22781: EQUAL
22782: IFTRUE 22786
22784: GO 22890
22786: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22787: LD_ADDR_VAR 0 2
22791: PUSH
22792: LD_INT 22
22794: PUSH
22795: LD_OWVAR 2
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 25
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PPUSH
22818: CALL_OW 69
22822: ST_TO_ADDR
// if not tmp then
22823: LD_VAR 0 2
22827: NOT
22828: IFFALSE 22832
// exit ;
22830: GO 22994
// un := tmp [ rand ( 1 , tmp ) ] ;
22832: LD_ADDR_VAR 0 3
22836: PUSH
22837: LD_VAR 0 2
22841: PUSH
22842: LD_INT 1
22844: PPUSH
22845: LD_VAR 0 2
22849: PPUSH
22850: CALL_OW 12
22854: ARRAY
22855: ST_TO_ADDR
// if Crawls ( un ) then
22856: LD_VAR 0 3
22860: PPUSH
22861: CALL_OW 318
22865: IFFALSE 22876
// ComWalk ( un ) ;
22867: LD_VAR 0 3
22871: PPUSH
22872: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22876: LD_VAR 0 3
22880: PPUSH
22881: LD_INT 8
22883: PPUSH
22884: CALL_OW 336
// end ; 4 :
22888: GO 22994
22890: LD_INT 4
22892: DOUBLE
22893: EQUAL
22894: IFTRUE 22898
22896: GO 22972
22898: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_OWVAR 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 30
22918: PUSH
22919: LD_INT 29
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 69
22934: ST_TO_ADDR
// if not tmp then
22935: LD_VAR 0 2
22939: NOT
22940: IFFALSE 22944
// exit ;
22942: GO 22994
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22944: LD_VAR 0 2
22948: PUSH
22949: LD_INT 1
22951: ARRAY
22952: PPUSH
22953: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22957: LD_VAR 0 2
22961: PUSH
22962: LD_INT 1
22964: ARRAY
22965: PPUSH
22966: CALL_OW 65
// end ; 5 .. 7 :
22970: GO 22994
22972: LD_INT 5
22974: DOUBLE
22975: GREATEREQUAL
22976: IFFALSE 22984
22978: LD_INT 7
22980: DOUBLE
22981: LESSEQUAL
22982: IFTRUE 22986
22984: GO 22993
22986: POP
// StreamSibBomb ; end ;
22987: CALL 19231 0 0
22991: GO 22994
22993: POP
// end ;
22994: PPOPN 3
22996: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22997: LD_EXP 22
23001: PUSH
23002: LD_EXP 72
23006: AND
23007: IFFALSE 23163
23009: GO 23011
23011: DISABLE
23012: LD_INT 0
23014: PPUSH
23015: PPUSH
23016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23017: LD_ADDR_VAR 0 2
23021: PUSH
23022: LD_INT 81
23024: PUSH
23025: LD_OWVAR 2
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 2
23036: PUSH
23037: LD_INT 21
23039: PUSH
23040: LD_INT 1
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 21
23049: PUSH
23050: LD_INT 2
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PPUSH
23066: CALL_OW 69
23070: ST_TO_ADDR
// if not tmp then
23071: LD_VAR 0 2
23075: NOT
23076: IFFALSE 23080
// exit ;
23078: GO 23163
// p := 0 ;
23080: LD_ADDR_VAR 0 3
23084: PUSH
23085: LD_INT 0
23087: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23088: LD_INT 35
23090: PPUSH
23091: CALL_OW 67
// p := p + 1 ;
23095: LD_ADDR_VAR 0 3
23099: PUSH
23100: LD_VAR 0 3
23104: PUSH
23105: LD_INT 1
23107: PLUS
23108: ST_TO_ADDR
// for i in tmp do
23109: LD_ADDR_VAR 0 1
23113: PUSH
23114: LD_VAR 0 2
23118: PUSH
23119: FOR_IN
23120: IFFALSE 23151
// if GetLives ( i ) < 1000 then
23122: LD_VAR 0 1
23126: PPUSH
23127: CALL_OW 256
23131: PUSH
23132: LD_INT 1000
23134: LESS
23135: IFFALSE 23149
// SetLives ( i , 1000 ) ;
23137: LD_VAR 0 1
23141: PPUSH
23142: LD_INT 1000
23144: PPUSH
23145: CALL_OW 234
23149: GO 23119
23151: POP
23152: POP
// until p > 20 ;
23153: LD_VAR 0 3
23157: PUSH
23158: LD_INT 20
23160: GREATER
23161: IFFALSE 23088
// end ;
23163: PPOPN 3
23165: END
// every 0 0$1 trigger StreamModeActive and sTime do
23166: LD_EXP 22
23170: PUSH
23171: LD_EXP 73
23175: AND
23176: IFFALSE 23211
23178: GO 23180
23180: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23181: LD_INT 28
23183: PPUSH
23184: LD_OWVAR 2
23188: PPUSH
23189: LD_INT 2
23191: PPUSH
23192: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23196: LD_INT 30
23198: PPUSH
23199: LD_OWVAR 2
23203: PPUSH
23204: LD_INT 2
23206: PPUSH
23207: CALL_OW 322
// end ;
23211: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23212: LD_EXP 22
23216: PUSH
23217: LD_EXP 74
23221: AND
23222: IFFALSE 23343
23224: GO 23226
23226: DISABLE
23227: LD_INT 0
23229: PPUSH
23230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23231: LD_ADDR_VAR 0 2
23235: PUSH
23236: LD_INT 22
23238: PUSH
23239: LD_OWVAR 2
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 21
23250: PUSH
23251: LD_INT 1
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 3
23260: PUSH
23261: LD_INT 23
23263: PUSH
23264: LD_INT 0
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: PPUSH
23280: CALL_OW 69
23284: ST_TO_ADDR
// if not tmp then
23285: LD_VAR 0 2
23289: NOT
23290: IFFALSE 23294
// exit ;
23292: GO 23343
// for i in tmp do
23294: LD_ADDR_VAR 0 1
23298: PUSH
23299: LD_VAR 0 2
23303: PUSH
23304: FOR_IN
23305: IFFALSE 23341
// begin if Crawls ( i ) then
23307: LD_VAR 0 1
23311: PPUSH
23312: CALL_OW 318
23316: IFFALSE 23327
// ComWalk ( i ) ;
23318: LD_VAR 0 1
23322: PPUSH
23323: CALL_OW 138
// SetClass ( i , 2 ) ;
23327: LD_VAR 0 1
23331: PPUSH
23332: LD_INT 2
23334: PPUSH
23335: CALL_OW 336
// end ;
23339: GO 23304
23341: POP
23342: POP
// end ;
23343: PPOPN 2
23345: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23346: LD_EXP 22
23350: PUSH
23351: LD_EXP 75
23355: AND
23356: IFFALSE 23644
23358: GO 23360
23360: DISABLE
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
23365: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23366: LD_OWVAR 2
23370: PPUSH
23371: LD_INT 9
23373: PPUSH
23374: LD_INT 1
23376: PPUSH
23377: LD_INT 1
23379: PPUSH
23380: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23384: LD_INT 9
23386: PPUSH
23387: LD_OWVAR 2
23391: PPUSH
23392: CALL_OW 343
// uc_side := 9 ;
23396: LD_ADDR_OWVAR 20
23400: PUSH
23401: LD_INT 9
23403: ST_TO_ADDR
// uc_nation := 2 ;
23404: LD_ADDR_OWVAR 21
23408: PUSH
23409: LD_INT 2
23411: ST_TO_ADDR
// hc_name := Dark Warrior ;
23412: LD_ADDR_OWVAR 26
23416: PUSH
23417: LD_STRING Dark Warrior
23419: ST_TO_ADDR
// hc_gallery :=  ;
23420: LD_ADDR_OWVAR 33
23424: PUSH
23425: LD_STRING 
23427: ST_TO_ADDR
// hc_noskilllimit := true ;
23428: LD_ADDR_OWVAR 76
23432: PUSH
23433: LD_INT 1
23435: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23436: LD_ADDR_OWVAR 31
23440: PUSH
23441: LD_INT 30
23443: PUSH
23444: LD_INT 30
23446: PUSH
23447: LD_INT 30
23449: PUSH
23450: LD_INT 30
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: ST_TO_ADDR
// un := CreateHuman ;
23459: LD_ADDR_VAR 0 3
23463: PUSH
23464: CALL_OW 44
23468: ST_TO_ADDR
// hc_noskilllimit := false ;
23469: LD_ADDR_OWVAR 76
23473: PUSH
23474: LD_INT 0
23476: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23477: LD_VAR 0 3
23481: PPUSH
23482: LD_INT 1
23484: PPUSH
23485: CALL_OW 51
// ToLua ( playRanger() ) ;
23489: LD_STRING playRanger()
23491: PPUSH
23492: CALL_OW 559
// p := 0 ;
23496: LD_ADDR_VAR 0 2
23500: PUSH
23501: LD_INT 0
23503: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23504: LD_INT 35
23506: PPUSH
23507: CALL_OW 67
// p := p + 1 ;
23511: LD_ADDR_VAR 0 2
23515: PUSH
23516: LD_VAR 0 2
23520: PUSH
23521: LD_INT 1
23523: PLUS
23524: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23525: LD_VAR 0 3
23529: PPUSH
23530: CALL_OW 256
23534: PUSH
23535: LD_INT 1000
23537: LESS
23538: IFFALSE 23552
// SetLives ( un , 1000 ) ;
23540: LD_VAR 0 3
23544: PPUSH
23545: LD_INT 1000
23547: PPUSH
23548: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23552: LD_VAR 0 3
23556: PPUSH
23557: LD_INT 81
23559: PUSH
23560: LD_OWVAR 2
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 91
23571: PUSH
23572: LD_VAR 0 3
23576: PUSH
23577: LD_INT 30
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: LIST
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PPUSH
23589: CALL_OW 69
23593: PPUSH
23594: LD_VAR 0 3
23598: PPUSH
23599: CALL_OW 74
23603: PPUSH
23604: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23608: LD_VAR 0 2
23612: PUSH
23613: LD_INT 80
23615: GREATER
23616: PUSH
23617: LD_VAR 0 3
23621: PPUSH
23622: CALL_OW 301
23626: OR
23627: IFFALSE 23504
// if un then
23629: LD_VAR 0 3
23633: IFFALSE 23644
// RemoveUnit ( un ) ;
23635: LD_VAR 0 3
23639: PPUSH
23640: CALL_OW 64
// end ;
23644: PPOPN 3
23646: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23647: LD_EXP 76
23651: IFFALSE 23767
23653: GO 23655
23655: DISABLE
23656: LD_INT 0
23658: PPUSH
23659: PPUSH
23660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23661: LD_ADDR_VAR 0 2
23665: PUSH
23666: LD_INT 81
23668: PUSH
23669: LD_OWVAR 2
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 21
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PPUSH
23692: CALL_OW 69
23696: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23697: LD_STRING playComputer()
23699: PPUSH
23700: CALL_OW 559
// if not tmp then
23704: LD_VAR 0 2
23708: NOT
23709: IFFALSE 23713
// exit ;
23711: GO 23767
// for i in tmp do
23713: LD_ADDR_VAR 0 1
23717: PUSH
23718: LD_VAR 0 2
23722: PUSH
23723: FOR_IN
23724: IFFALSE 23765
// for j := 1 to 4 do
23726: LD_ADDR_VAR 0 3
23730: PUSH
23731: DOUBLE
23732: LD_INT 1
23734: DEC
23735: ST_TO_ADDR
23736: LD_INT 4
23738: PUSH
23739: FOR_TO
23740: IFFALSE 23761
// SetSkill ( i , j , 10 ) ;
23742: LD_VAR 0 1
23746: PPUSH
23747: LD_VAR 0 3
23751: PPUSH
23752: LD_INT 10
23754: PPUSH
23755: CALL_OW 237
23759: GO 23739
23761: POP
23762: POP
23763: GO 23723
23765: POP
23766: POP
// end ;
23767: PPOPN 3
23769: END
// every 0 0$1 trigger s30 do var i , tmp ;
23770: LD_EXP 77
23774: IFFALSE 23843
23776: GO 23778
23778: DISABLE
23779: LD_INT 0
23781: PPUSH
23782: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23783: LD_ADDR_VAR 0 2
23787: PUSH
23788: LD_INT 22
23790: PUSH
23791: LD_OWVAR 2
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PPUSH
23800: CALL_OW 69
23804: ST_TO_ADDR
// if not tmp then
23805: LD_VAR 0 2
23809: NOT
23810: IFFALSE 23814
// exit ;
23812: GO 23843
// for i in tmp do
23814: LD_ADDR_VAR 0 1
23818: PUSH
23819: LD_VAR 0 2
23823: PUSH
23824: FOR_IN
23825: IFFALSE 23841
// SetLives ( i , 300 ) ;
23827: LD_VAR 0 1
23831: PPUSH
23832: LD_INT 300
23834: PPUSH
23835: CALL_OW 234
23839: GO 23824
23841: POP
23842: POP
// end ;
23843: PPOPN 2
23845: END
// every 0 0$1 trigger s60 do var i , tmp ;
23846: LD_EXP 78
23850: IFFALSE 23919
23852: GO 23854
23854: DISABLE
23855: LD_INT 0
23857: PPUSH
23858: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23859: LD_ADDR_VAR 0 2
23863: PUSH
23864: LD_INT 22
23866: PUSH
23867: LD_OWVAR 2
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PPUSH
23876: CALL_OW 69
23880: ST_TO_ADDR
// if not tmp then
23881: LD_VAR 0 2
23885: NOT
23886: IFFALSE 23890
// exit ;
23888: GO 23919
// for i in tmp do
23890: LD_ADDR_VAR 0 1
23894: PUSH
23895: LD_VAR 0 2
23899: PUSH
23900: FOR_IN
23901: IFFALSE 23917
// SetLives ( i , 600 ) ;
23903: LD_VAR 0 1
23907: PPUSH
23908: LD_INT 600
23910: PPUSH
23911: CALL_OW 234
23915: GO 23900
23917: POP
23918: POP
// end ;
23919: PPOPN 2
23921: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23922: LD_INT 0
23924: PPUSH
// case cmd of 301 :
23925: LD_VAR 0 1
23929: PUSH
23930: LD_INT 301
23932: DOUBLE
23933: EQUAL
23934: IFTRUE 23938
23936: GO 23970
23938: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23939: LD_VAR 0 6
23943: PPUSH
23944: LD_VAR 0 7
23948: PPUSH
23949: LD_VAR 0 8
23953: PPUSH
23954: LD_VAR 0 4
23958: PPUSH
23959: LD_VAR 0 5
23963: PPUSH
23964: CALL 25171 0 5
23968: GO 24091
23970: LD_INT 302
23972: DOUBLE
23973: EQUAL
23974: IFTRUE 23978
23976: GO 24015
23978: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23979: LD_VAR 0 6
23983: PPUSH
23984: LD_VAR 0 7
23988: PPUSH
23989: LD_VAR 0 8
23993: PPUSH
23994: LD_VAR 0 9
23998: PPUSH
23999: LD_VAR 0 4
24003: PPUSH
24004: LD_VAR 0 5
24008: PPUSH
24009: CALL 25262 0 6
24013: GO 24091
24015: LD_INT 303
24017: DOUBLE
24018: EQUAL
24019: IFTRUE 24023
24021: GO 24060
24023: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24024: LD_VAR 0 6
24028: PPUSH
24029: LD_VAR 0 7
24033: PPUSH
24034: LD_VAR 0 8
24038: PPUSH
24039: LD_VAR 0 9
24043: PPUSH
24044: LD_VAR 0 4
24048: PPUSH
24049: LD_VAR 0 5
24053: PPUSH
24054: CALL 24096 0 6
24058: GO 24091
24060: LD_INT 304
24062: DOUBLE
24063: EQUAL
24064: IFTRUE 24068
24066: GO 24090
24068: POP
// hHackTeleport ( unit , x , y ) ; end ;
24069: LD_VAR 0 2
24073: PPUSH
24074: LD_VAR 0 4
24078: PPUSH
24079: LD_VAR 0 5
24083: PPUSH
24084: CALL 25855 0 3
24088: GO 24091
24090: POP
// end ;
24091: LD_VAR 0 12
24095: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24096: LD_INT 0
24098: PPUSH
24099: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24100: LD_VAR 0 1
24104: PUSH
24105: LD_INT 1
24107: LESS
24108: PUSH
24109: LD_VAR 0 1
24113: PUSH
24114: LD_INT 3
24116: GREATER
24117: OR
24118: PUSH
24119: LD_VAR 0 5
24123: PPUSH
24124: LD_VAR 0 6
24128: PPUSH
24129: CALL_OW 428
24133: OR
24134: IFFALSE 24138
// exit ;
24136: GO 24858
// uc_side := your_side ;
24138: LD_ADDR_OWVAR 20
24142: PUSH
24143: LD_OWVAR 2
24147: ST_TO_ADDR
// uc_nation := nation ;
24148: LD_ADDR_OWVAR 21
24152: PUSH
24153: LD_VAR 0 1
24157: ST_TO_ADDR
// bc_level = 1 ;
24158: LD_ADDR_OWVAR 43
24162: PUSH
24163: LD_INT 1
24165: ST_TO_ADDR
// case btype of 1 :
24166: LD_VAR 0 2
24170: PUSH
24171: LD_INT 1
24173: DOUBLE
24174: EQUAL
24175: IFTRUE 24179
24177: GO 24190
24179: POP
// bc_type := b_depot ; 2 :
24180: LD_ADDR_OWVAR 42
24184: PUSH
24185: LD_INT 0
24187: ST_TO_ADDR
24188: GO 24802
24190: LD_INT 2
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24209
24198: POP
// bc_type := b_warehouse ; 3 :
24199: LD_ADDR_OWVAR 42
24203: PUSH
24204: LD_INT 1
24206: ST_TO_ADDR
24207: GO 24802
24209: LD_INT 3
24211: DOUBLE
24212: EQUAL
24213: IFTRUE 24217
24215: GO 24228
24217: POP
// bc_type := b_lab ; 4 .. 9 :
24218: LD_ADDR_OWVAR 42
24222: PUSH
24223: LD_INT 6
24225: ST_TO_ADDR
24226: GO 24802
24228: LD_INT 4
24230: DOUBLE
24231: GREATEREQUAL
24232: IFFALSE 24240
24234: LD_INT 9
24236: DOUBLE
24237: LESSEQUAL
24238: IFTRUE 24242
24240: GO 24294
24242: POP
// begin bc_type := b_lab_half ;
24243: LD_ADDR_OWVAR 42
24247: PUSH
24248: LD_INT 7
24250: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24251: LD_ADDR_OWVAR 44
24255: PUSH
24256: LD_INT 10
24258: PUSH
24259: LD_INT 11
24261: PUSH
24262: LD_INT 12
24264: PUSH
24265: LD_INT 15
24267: PUSH
24268: LD_INT 14
24270: PUSH
24271: LD_INT 13
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: PUSH
24282: LD_VAR 0 2
24286: PUSH
24287: LD_INT 3
24289: MINUS
24290: ARRAY
24291: ST_TO_ADDR
// end ; 10 .. 13 :
24292: GO 24802
24294: LD_INT 10
24296: DOUBLE
24297: GREATEREQUAL
24298: IFFALSE 24306
24300: LD_INT 13
24302: DOUBLE
24303: LESSEQUAL
24304: IFTRUE 24308
24306: GO 24385
24308: POP
// begin bc_type := b_lab_full ;
24309: LD_ADDR_OWVAR 42
24313: PUSH
24314: LD_INT 8
24316: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24317: LD_ADDR_OWVAR 44
24321: PUSH
24322: LD_INT 10
24324: PUSH
24325: LD_INT 12
24327: PUSH
24328: LD_INT 14
24330: PUSH
24331: LD_INT 13
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: PUSH
24340: LD_VAR 0 2
24344: PUSH
24345: LD_INT 9
24347: MINUS
24348: ARRAY
24349: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24350: LD_ADDR_OWVAR 45
24354: PUSH
24355: LD_INT 11
24357: PUSH
24358: LD_INT 15
24360: PUSH
24361: LD_INT 12
24363: PUSH
24364: LD_INT 15
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: PUSH
24373: LD_VAR 0 2
24377: PUSH
24378: LD_INT 9
24380: MINUS
24381: ARRAY
24382: ST_TO_ADDR
// end ; 14 :
24383: GO 24802
24385: LD_INT 14
24387: DOUBLE
24388: EQUAL
24389: IFTRUE 24393
24391: GO 24404
24393: POP
// bc_type := b_workshop ; 15 :
24394: LD_ADDR_OWVAR 42
24398: PUSH
24399: LD_INT 2
24401: ST_TO_ADDR
24402: GO 24802
24404: LD_INT 15
24406: DOUBLE
24407: EQUAL
24408: IFTRUE 24412
24410: GO 24423
24412: POP
// bc_type := b_factory ; 16 :
24413: LD_ADDR_OWVAR 42
24417: PUSH
24418: LD_INT 3
24420: ST_TO_ADDR
24421: GO 24802
24423: LD_INT 16
24425: DOUBLE
24426: EQUAL
24427: IFTRUE 24431
24429: GO 24442
24431: POP
// bc_type := b_ext_gun ; 17 :
24432: LD_ADDR_OWVAR 42
24436: PUSH
24437: LD_INT 17
24439: ST_TO_ADDR
24440: GO 24802
24442: LD_INT 17
24444: DOUBLE
24445: EQUAL
24446: IFTRUE 24450
24448: GO 24478
24450: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24451: LD_ADDR_OWVAR 42
24455: PUSH
24456: LD_INT 19
24458: PUSH
24459: LD_INT 23
24461: PUSH
24462: LD_INT 19
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: LIST
24469: PUSH
24470: LD_VAR 0 1
24474: ARRAY
24475: ST_TO_ADDR
24476: GO 24802
24478: LD_INT 18
24480: DOUBLE
24481: EQUAL
24482: IFTRUE 24486
24484: GO 24497
24486: POP
// bc_type := b_ext_radar ; 19 :
24487: LD_ADDR_OWVAR 42
24491: PUSH
24492: LD_INT 20
24494: ST_TO_ADDR
24495: GO 24802
24497: LD_INT 19
24499: DOUBLE
24500: EQUAL
24501: IFTRUE 24505
24503: GO 24516
24505: POP
// bc_type := b_ext_radio ; 20 :
24506: LD_ADDR_OWVAR 42
24510: PUSH
24511: LD_INT 22
24513: ST_TO_ADDR
24514: GO 24802
24516: LD_INT 20
24518: DOUBLE
24519: EQUAL
24520: IFTRUE 24524
24522: GO 24535
24524: POP
// bc_type := b_ext_siberium ; 21 :
24525: LD_ADDR_OWVAR 42
24529: PUSH
24530: LD_INT 21
24532: ST_TO_ADDR
24533: GO 24802
24535: LD_INT 21
24537: DOUBLE
24538: EQUAL
24539: IFTRUE 24543
24541: GO 24554
24543: POP
// bc_type := b_ext_computer ; 22 :
24544: LD_ADDR_OWVAR 42
24548: PUSH
24549: LD_INT 24
24551: ST_TO_ADDR
24552: GO 24802
24554: LD_INT 22
24556: DOUBLE
24557: EQUAL
24558: IFTRUE 24562
24560: GO 24573
24562: POP
// bc_type := b_ext_track ; 23 :
24563: LD_ADDR_OWVAR 42
24567: PUSH
24568: LD_INT 16
24570: ST_TO_ADDR
24571: GO 24802
24573: LD_INT 23
24575: DOUBLE
24576: EQUAL
24577: IFTRUE 24581
24579: GO 24592
24581: POP
// bc_type := b_ext_laser ; 24 :
24582: LD_ADDR_OWVAR 42
24586: PUSH
24587: LD_INT 25
24589: ST_TO_ADDR
24590: GO 24802
24592: LD_INT 24
24594: DOUBLE
24595: EQUAL
24596: IFTRUE 24600
24598: GO 24611
24600: POP
// bc_type := b_control_tower ; 25 :
24601: LD_ADDR_OWVAR 42
24605: PUSH
24606: LD_INT 36
24608: ST_TO_ADDR
24609: GO 24802
24611: LD_INT 25
24613: DOUBLE
24614: EQUAL
24615: IFTRUE 24619
24617: GO 24630
24619: POP
// bc_type := b_breastwork ; 26 :
24620: LD_ADDR_OWVAR 42
24624: PUSH
24625: LD_INT 31
24627: ST_TO_ADDR
24628: GO 24802
24630: LD_INT 26
24632: DOUBLE
24633: EQUAL
24634: IFTRUE 24638
24636: GO 24649
24638: POP
// bc_type := b_bunker ; 27 :
24639: LD_ADDR_OWVAR 42
24643: PUSH
24644: LD_INT 32
24646: ST_TO_ADDR
24647: GO 24802
24649: LD_INT 27
24651: DOUBLE
24652: EQUAL
24653: IFTRUE 24657
24655: GO 24668
24657: POP
// bc_type := b_turret ; 28 :
24658: LD_ADDR_OWVAR 42
24662: PUSH
24663: LD_INT 33
24665: ST_TO_ADDR
24666: GO 24802
24668: LD_INT 28
24670: DOUBLE
24671: EQUAL
24672: IFTRUE 24676
24674: GO 24687
24676: POP
// bc_type := b_armoury ; 29 :
24677: LD_ADDR_OWVAR 42
24681: PUSH
24682: LD_INT 4
24684: ST_TO_ADDR
24685: GO 24802
24687: LD_INT 29
24689: DOUBLE
24690: EQUAL
24691: IFTRUE 24695
24693: GO 24706
24695: POP
// bc_type := b_barracks ; 30 :
24696: LD_ADDR_OWVAR 42
24700: PUSH
24701: LD_INT 5
24703: ST_TO_ADDR
24704: GO 24802
24706: LD_INT 30
24708: DOUBLE
24709: EQUAL
24710: IFTRUE 24714
24712: GO 24725
24714: POP
// bc_type := b_solar_power ; 31 :
24715: LD_ADDR_OWVAR 42
24719: PUSH
24720: LD_INT 27
24722: ST_TO_ADDR
24723: GO 24802
24725: LD_INT 31
24727: DOUBLE
24728: EQUAL
24729: IFTRUE 24733
24731: GO 24744
24733: POP
// bc_type := b_oil_power ; 32 :
24734: LD_ADDR_OWVAR 42
24738: PUSH
24739: LD_INT 26
24741: ST_TO_ADDR
24742: GO 24802
24744: LD_INT 32
24746: DOUBLE
24747: EQUAL
24748: IFTRUE 24752
24750: GO 24763
24752: POP
// bc_type := b_siberite_power ; 33 :
24753: LD_ADDR_OWVAR 42
24757: PUSH
24758: LD_INT 28
24760: ST_TO_ADDR
24761: GO 24802
24763: LD_INT 33
24765: DOUBLE
24766: EQUAL
24767: IFTRUE 24771
24769: GO 24782
24771: POP
// bc_type := b_oil_mine ; 34 :
24772: LD_ADDR_OWVAR 42
24776: PUSH
24777: LD_INT 29
24779: ST_TO_ADDR
24780: GO 24802
24782: LD_INT 34
24784: DOUBLE
24785: EQUAL
24786: IFTRUE 24790
24788: GO 24801
24790: POP
// bc_type := b_siberite_mine ; end ;
24791: LD_ADDR_OWVAR 42
24795: PUSH
24796: LD_INT 30
24798: ST_TO_ADDR
24799: GO 24802
24801: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24802: LD_ADDR_VAR 0 8
24806: PUSH
24807: LD_VAR 0 5
24811: PPUSH
24812: LD_VAR 0 6
24816: PPUSH
24817: LD_VAR 0 3
24821: PPUSH
24822: CALL_OW 47
24826: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24827: LD_OWVAR 42
24831: PUSH
24832: LD_INT 32
24834: PUSH
24835: LD_INT 33
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: IN
24842: IFFALSE 24858
// PlaceWeaponTurret ( b , weapon ) ;
24844: LD_VAR 0 8
24848: PPUSH
24849: LD_VAR 0 4
24853: PPUSH
24854: CALL_OW 431
// end ;
24858: LD_VAR 0 7
24862: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24863: LD_INT 0
24865: PPUSH
24866: PPUSH
24867: PPUSH
24868: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24869: LD_ADDR_VAR 0 4
24873: PUSH
24874: LD_INT 22
24876: PUSH
24877: LD_OWVAR 2
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 2
24888: PUSH
24889: LD_INT 30
24891: PUSH
24892: LD_INT 0
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 30
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: LIST
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PPUSH
24918: CALL_OW 69
24922: ST_TO_ADDR
// if not tmp then
24923: LD_VAR 0 4
24927: NOT
24928: IFFALSE 24932
// exit ;
24930: GO 24991
// for i in tmp do
24932: LD_ADDR_VAR 0 2
24936: PUSH
24937: LD_VAR 0 4
24941: PUSH
24942: FOR_IN
24943: IFFALSE 24989
// for j = 1 to 3 do
24945: LD_ADDR_VAR 0 3
24949: PUSH
24950: DOUBLE
24951: LD_INT 1
24953: DEC
24954: ST_TO_ADDR
24955: LD_INT 3
24957: PUSH
24958: FOR_TO
24959: IFFALSE 24985
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24961: LD_VAR 0 2
24965: PPUSH
24966: CALL_OW 274
24970: PPUSH
24971: LD_VAR 0 3
24975: PPUSH
24976: LD_INT 99999
24978: PPUSH
24979: CALL_OW 277
24983: GO 24958
24985: POP
24986: POP
24987: GO 24942
24989: POP
24990: POP
// end ;
24991: LD_VAR 0 1
24995: RET
// export function hHackSetLevel10 ; var i , j ; begin
24996: LD_INT 0
24998: PPUSH
24999: PPUSH
25000: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25001: LD_ADDR_VAR 0 2
25005: PUSH
25006: LD_INT 21
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PPUSH
25016: CALL_OW 69
25020: PUSH
25021: FOR_IN
25022: IFFALSE 25074
// if IsSelected ( i ) then
25024: LD_VAR 0 2
25028: PPUSH
25029: CALL_OW 306
25033: IFFALSE 25072
// begin for j := 1 to 4 do
25035: LD_ADDR_VAR 0 3
25039: PUSH
25040: DOUBLE
25041: LD_INT 1
25043: DEC
25044: ST_TO_ADDR
25045: LD_INT 4
25047: PUSH
25048: FOR_TO
25049: IFFALSE 25070
// SetSkill ( i , j , 10 ) ;
25051: LD_VAR 0 2
25055: PPUSH
25056: LD_VAR 0 3
25060: PPUSH
25061: LD_INT 10
25063: PPUSH
25064: CALL_OW 237
25068: GO 25048
25070: POP
25071: POP
// end ;
25072: GO 25021
25074: POP
25075: POP
// end ;
25076: LD_VAR 0 1
25080: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25081: LD_INT 0
25083: PPUSH
25084: PPUSH
25085: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25086: LD_ADDR_VAR 0 2
25090: PUSH
25091: LD_INT 22
25093: PUSH
25094: LD_OWVAR 2
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 21
25105: PUSH
25106: LD_INT 1
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PPUSH
25117: CALL_OW 69
25121: PUSH
25122: FOR_IN
25123: IFFALSE 25164
// begin for j := 1 to 4 do
25125: LD_ADDR_VAR 0 3
25129: PUSH
25130: DOUBLE
25131: LD_INT 1
25133: DEC
25134: ST_TO_ADDR
25135: LD_INT 4
25137: PUSH
25138: FOR_TO
25139: IFFALSE 25160
// SetSkill ( i , j , 10 ) ;
25141: LD_VAR 0 2
25145: PPUSH
25146: LD_VAR 0 3
25150: PPUSH
25151: LD_INT 10
25153: PPUSH
25154: CALL_OW 237
25158: GO 25138
25160: POP
25161: POP
// end ;
25162: GO 25122
25164: POP
25165: POP
// end ;
25166: LD_VAR 0 1
25170: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25171: LD_INT 0
25173: PPUSH
// uc_side := your_side ;
25174: LD_ADDR_OWVAR 20
25178: PUSH
25179: LD_OWVAR 2
25183: ST_TO_ADDR
// uc_nation := nation ;
25184: LD_ADDR_OWVAR 21
25188: PUSH
25189: LD_VAR 0 1
25193: ST_TO_ADDR
// InitHc ;
25194: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25198: LD_INT 0
25200: PPUSH
25201: LD_VAR 0 2
25205: PPUSH
25206: LD_VAR 0 3
25210: PPUSH
25211: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25215: LD_VAR 0 4
25219: PPUSH
25220: LD_VAR 0 5
25224: PPUSH
25225: CALL_OW 428
25229: PUSH
25230: LD_INT 0
25232: EQUAL
25233: IFFALSE 25257
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25235: CALL_OW 44
25239: PPUSH
25240: LD_VAR 0 4
25244: PPUSH
25245: LD_VAR 0 5
25249: PPUSH
25250: LD_INT 1
25252: PPUSH
25253: CALL_OW 48
// end ;
25257: LD_VAR 0 6
25261: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25262: LD_INT 0
25264: PPUSH
25265: PPUSH
// uc_side := your_side ;
25266: LD_ADDR_OWVAR 20
25270: PUSH
25271: LD_OWVAR 2
25275: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25276: LD_VAR 0 1
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 3
25289: PUSH
25290: LD_INT 4
25292: PUSH
25293: LD_INT 5
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: IN
25303: IFFALSE 25315
// uc_nation := nation_american else
25305: LD_ADDR_OWVAR 21
25309: PUSH
25310: LD_INT 1
25312: ST_TO_ADDR
25313: GO 25358
// if chassis in [ 11 , 12 , 13 , 14 ] then
25315: LD_VAR 0 1
25319: PUSH
25320: LD_INT 11
25322: PUSH
25323: LD_INT 12
25325: PUSH
25326: LD_INT 13
25328: PUSH
25329: LD_INT 14
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: IN
25338: IFFALSE 25350
// uc_nation := nation_arabian else
25340: LD_ADDR_OWVAR 21
25344: PUSH
25345: LD_INT 2
25347: ST_TO_ADDR
25348: GO 25358
// uc_nation := nation_russian ;
25350: LD_ADDR_OWVAR 21
25354: PUSH
25355: LD_INT 3
25357: ST_TO_ADDR
// vc_chassis := chassis ;
25358: LD_ADDR_OWVAR 37
25362: PUSH
25363: LD_VAR 0 1
25367: ST_TO_ADDR
// vc_engine := engine ;
25368: LD_ADDR_OWVAR 39
25372: PUSH
25373: LD_VAR 0 2
25377: ST_TO_ADDR
// vc_control := control ;
25378: LD_ADDR_OWVAR 38
25382: PUSH
25383: LD_VAR 0 3
25387: ST_TO_ADDR
// vc_weapon := weapon ;
25388: LD_ADDR_OWVAR 40
25392: PUSH
25393: LD_VAR 0 4
25397: ST_TO_ADDR
// un := CreateVehicle ;
25398: LD_ADDR_VAR 0 8
25402: PUSH
25403: CALL_OW 45
25407: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25408: LD_VAR 0 8
25412: PPUSH
25413: LD_INT 0
25415: PPUSH
25416: LD_INT 5
25418: PPUSH
25419: CALL_OW 12
25423: PPUSH
25424: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25428: LD_VAR 0 8
25432: PPUSH
25433: LD_VAR 0 5
25437: PPUSH
25438: LD_VAR 0 6
25442: PPUSH
25443: LD_INT 1
25445: PPUSH
25446: CALL_OW 48
// end ;
25450: LD_VAR 0 7
25454: RET
// export hInvincible ; every 1 do
25455: GO 25457
25457: DISABLE
// hInvincible := [ ] ;
25458: LD_ADDR_EXP 79
25462: PUSH
25463: EMPTY
25464: ST_TO_ADDR
25465: END
// every 10 do var i ;
25466: GO 25468
25468: DISABLE
25469: LD_INT 0
25471: PPUSH
// begin enable ;
25472: ENABLE
// if not hInvincible then
25473: LD_EXP 79
25477: NOT
25478: IFFALSE 25482
// exit ;
25480: GO 25526
// for i in hInvincible do
25482: LD_ADDR_VAR 0 1
25486: PUSH
25487: LD_EXP 79
25491: PUSH
25492: FOR_IN
25493: IFFALSE 25524
// if GetLives ( i ) < 1000 then
25495: LD_VAR 0 1
25499: PPUSH
25500: CALL_OW 256
25504: PUSH
25505: LD_INT 1000
25507: LESS
25508: IFFALSE 25522
// SetLives ( i , 1000 ) ;
25510: LD_VAR 0 1
25514: PPUSH
25515: LD_INT 1000
25517: PPUSH
25518: CALL_OW 234
25522: GO 25492
25524: POP
25525: POP
// end ;
25526: PPOPN 1
25528: END
// export function hHackInvincible ; var i ; begin
25529: LD_INT 0
25531: PPUSH
25532: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25533: LD_ADDR_VAR 0 2
25537: PUSH
25538: LD_INT 2
25540: PUSH
25541: LD_INT 21
25543: PUSH
25544: LD_INT 1
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 21
25553: PUSH
25554: LD_INT 2
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: LIST
25565: PPUSH
25566: CALL_OW 69
25570: PUSH
25571: FOR_IN
25572: IFFALSE 25633
// if IsSelected ( i ) then
25574: LD_VAR 0 2
25578: PPUSH
25579: CALL_OW 306
25583: IFFALSE 25631
// begin if i in hInvincible then
25585: LD_VAR 0 2
25589: PUSH
25590: LD_EXP 79
25594: IN
25595: IFFALSE 25615
// hInvincible := hInvincible diff i else
25597: LD_ADDR_EXP 79
25601: PUSH
25602: LD_EXP 79
25606: PUSH
25607: LD_VAR 0 2
25611: DIFF
25612: ST_TO_ADDR
25613: GO 25631
// hInvincible := hInvincible union i ;
25615: LD_ADDR_EXP 79
25619: PUSH
25620: LD_EXP 79
25624: PUSH
25625: LD_VAR 0 2
25629: UNION
25630: ST_TO_ADDR
// end ;
25631: GO 25571
25633: POP
25634: POP
// end ;
25635: LD_VAR 0 1
25639: RET
// export function hHackInvisible ; var i , j ; begin
25640: LD_INT 0
25642: PPUSH
25643: PPUSH
25644: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25645: LD_ADDR_VAR 0 2
25649: PUSH
25650: LD_INT 21
25652: PUSH
25653: LD_INT 1
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PPUSH
25660: CALL_OW 69
25664: PUSH
25665: FOR_IN
25666: IFFALSE 25690
// if IsSelected ( i ) then
25668: LD_VAR 0 2
25672: PPUSH
25673: CALL_OW 306
25677: IFFALSE 25688
// ComForceInvisible ( i ) ;
25679: LD_VAR 0 2
25683: PPUSH
25684: CALL_OW 496
25688: GO 25665
25690: POP
25691: POP
// end ;
25692: LD_VAR 0 1
25696: RET
// export function hHackChangeYourSide ; begin
25697: LD_INT 0
25699: PPUSH
// if your_side = 8 then
25700: LD_OWVAR 2
25704: PUSH
25705: LD_INT 8
25707: EQUAL
25708: IFFALSE 25720
// your_side := 0 else
25710: LD_ADDR_OWVAR 2
25714: PUSH
25715: LD_INT 0
25717: ST_TO_ADDR
25718: GO 25734
// your_side := your_side + 1 ;
25720: LD_ADDR_OWVAR 2
25724: PUSH
25725: LD_OWVAR 2
25729: PUSH
25730: LD_INT 1
25732: PLUS
25733: ST_TO_ADDR
// end ;
25734: LD_VAR 0 1
25738: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25739: LD_INT 0
25741: PPUSH
25742: PPUSH
25743: PPUSH
// for i in all_units do
25744: LD_ADDR_VAR 0 2
25748: PUSH
25749: LD_OWVAR 3
25753: PUSH
25754: FOR_IN
25755: IFFALSE 25833
// if IsSelected ( i ) then
25757: LD_VAR 0 2
25761: PPUSH
25762: CALL_OW 306
25766: IFFALSE 25831
// begin j := GetSide ( i ) ;
25768: LD_ADDR_VAR 0 3
25772: PUSH
25773: LD_VAR 0 2
25777: PPUSH
25778: CALL_OW 255
25782: ST_TO_ADDR
// if j = 8 then
25783: LD_VAR 0 3
25787: PUSH
25788: LD_INT 8
25790: EQUAL
25791: IFFALSE 25803
// j := 0 else
25793: LD_ADDR_VAR 0 3
25797: PUSH
25798: LD_INT 0
25800: ST_TO_ADDR
25801: GO 25817
// j := j + 1 ;
25803: LD_ADDR_VAR 0 3
25807: PUSH
25808: LD_VAR 0 3
25812: PUSH
25813: LD_INT 1
25815: PLUS
25816: ST_TO_ADDR
// SetSide ( i , j ) ;
25817: LD_VAR 0 2
25821: PPUSH
25822: LD_VAR 0 3
25826: PPUSH
25827: CALL_OW 235
// end ;
25831: GO 25754
25833: POP
25834: POP
// end ;
25835: LD_VAR 0 1
25839: RET
// export function hHackFog ; begin
25840: LD_INT 0
25842: PPUSH
// FogOff ( true ) ;
25843: LD_INT 1
25845: PPUSH
25846: CALL_OW 344
// end ;
25850: LD_VAR 0 1
25854: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25855: LD_INT 0
25857: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25858: LD_VAR 0 1
25862: PPUSH
25863: LD_VAR 0 2
25867: PPUSH
25868: LD_VAR 0 3
25872: PPUSH
25873: LD_INT 1
25875: PPUSH
25876: LD_INT 1
25878: PPUSH
25879: CALL_OW 483
// CenterOnXY ( x , y ) ;
25883: LD_VAR 0 2
25887: PPUSH
25888: LD_VAR 0 3
25892: PPUSH
25893: CALL_OW 84
// end ;
25897: LD_VAR 0 4
25901: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25902: LD_INT 0
25904: PPUSH
25905: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25906: LD_VAR 0 1
25910: NOT
25911: PUSH
25912: LD_VAR 0 2
25916: PPUSH
25917: LD_VAR 0 3
25921: PPUSH
25922: CALL_OW 488
25926: NOT
25927: OR
25928: PUSH
25929: LD_VAR 0 1
25933: PPUSH
25934: CALL_OW 266
25938: PUSH
25939: LD_INT 3
25941: NONEQUAL
25942: PUSH
25943: LD_VAR 0 1
25947: PPUSH
25948: CALL_OW 247
25952: PUSH
25953: LD_INT 1
25955: EQUAL
25956: NOT
25957: AND
25958: OR
25959: IFFALSE 25963
// exit ;
25961: GO 26112
// if GetType ( factory ) = unit_human then
25963: LD_VAR 0 1
25967: PPUSH
25968: CALL_OW 247
25972: PUSH
25973: LD_INT 1
25975: EQUAL
25976: IFFALSE 25993
// factory := IsInUnit ( factory ) ;
25978: LD_ADDR_VAR 0 1
25982: PUSH
25983: LD_VAR 0 1
25987: PPUSH
25988: CALL_OW 310
25992: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25993: LD_VAR 0 1
25997: PPUSH
25998: CALL_OW 266
26002: PUSH
26003: LD_INT 3
26005: NONEQUAL
26006: IFFALSE 26010
// exit ;
26008: GO 26112
// if HexInfo ( x , y ) = factory then
26010: LD_VAR 0 2
26014: PPUSH
26015: LD_VAR 0 3
26019: PPUSH
26020: CALL_OW 428
26024: PUSH
26025: LD_VAR 0 1
26029: EQUAL
26030: IFFALSE 26057
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26032: LD_ADDR_EXP 80
26036: PUSH
26037: LD_EXP 80
26041: PPUSH
26042: LD_VAR 0 1
26046: PPUSH
26047: LD_INT 0
26049: PPUSH
26050: CALL_OW 1
26054: ST_TO_ADDR
26055: GO 26108
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26057: LD_ADDR_EXP 80
26061: PUSH
26062: LD_EXP 80
26066: PPUSH
26067: LD_VAR 0 1
26071: PPUSH
26072: LD_VAR 0 1
26076: PPUSH
26077: CALL_OW 255
26081: PUSH
26082: LD_VAR 0 1
26086: PUSH
26087: LD_VAR 0 2
26091: PUSH
26092: LD_VAR 0 3
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: PPUSH
26103: CALL_OW 1
26107: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26108: CALL 26117 0 0
// end ;
26112: LD_VAR 0 4
26116: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26117: LD_INT 0
26119: PPUSH
26120: PPUSH
26121: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26122: LD_STRING resetFactoryWaypoint();
26124: PPUSH
26125: CALL_OW 559
// if factoryWaypoints then
26129: LD_EXP 80
26133: IFFALSE 26259
// begin list := PrepareArray ( factoryWaypoints ) ;
26135: LD_ADDR_VAR 0 3
26139: PUSH
26140: LD_EXP 80
26144: PPUSH
26145: CALL 72552 0 1
26149: ST_TO_ADDR
// for i := 1 to list do
26150: LD_ADDR_VAR 0 2
26154: PUSH
26155: DOUBLE
26156: LD_INT 1
26158: DEC
26159: ST_TO_ADDR
26160: LD_VAR 0 3
26164: PUSH
26165: FOR_TO
26166: IFFALSE 26257
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26168: LD_STRING setFactoryWaypointXY(
26170: PUSH
26171: LD_VAR 0 3
26175: PUSH
26176: LD_VAR 0 2
26180: ARRAY
26181: PUSH
26182: LD_INT 1
26184: ARRAY
26185: STR
26186: PUSH
26187: LD_STRING ,
26189: STR
26190: PUSH
26191: LD_VAR 0 3
26195: PUSH
26196: LD_VAR 0 2
26200: ARRAY
26201: PUSH
26202: LD_INT 2
26204: ARRAY
26205: STR
26206: PUSH
26207: LD_STRING ,
26209: STR
26210: PUSH
26211: LD_VAR 0 3
26215: PUSH
26216: LD_VAR 0 2
26220: ARRAY
26221: PUSH
26222: LD_INT 3
26224: ARRAY
26225: STR
26226: PUSH
26227: LD_STRING ,
26229: STR
26230: PUSH
26231: LD_VAR 0 3
26235: PUSH
26236: LD_VAR 0 2
26240: ARRAY
26241: PUSH
26242: LD_INT 4
26244: ARRAY
26245: STR
26246: PUSH
26247: LD_STRING )
26249: STR
26250: PPUSH
26251: CALL_OW 559
26255: GO 26165
26257: POP
26258: POP
// end ; end ;
26259: LD_VAR 0 1
26263: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26264: LD_INT 0
26266: PPUSH
// if HexInfo ( x , y ) = warehouse then
26267: LD_VAR 0 2
26271: PPUSH
26272: LD_VAR 0 3
26276: PPUSH
26277: CALL_OW 428
26281: PUSH
26282: LD_VAR 0 1
26286: EQUAL
26287: IFFALSE 26314
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26289: LD_ADDR_EXP 81
26293: PUSH
26294: LD_EXP 81
26298: PPUSH
26299: LD_VAR 0 1
26303: PPUSH
26304: LD_INT 0
26306: PPUSH
26307: CALL_OW 1
26311: ST_TO_ADDR
26312: GO 26365
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26314: LD_ADDR_EXP 81
26318: PUSH
26319: LD_EXP 81
26323: PPUSH
26324: LD_VAR 0 1
26328: PPUSH
26329: LD_VAR 0 1
26333: PPUSH
26334: CALL_OW 255
26338: PUSH
26339: LD_VAR 0 1
26343: PUSH
26344: LD_VAR 0 2
26348: PUSH
26349: LD_VAR 0 3
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: PPUSH
26360: CALL_OW 1
26364: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26365: CALL 26374 0 0
// end ;
26369: LD_VAR 0 4
26373: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26374: LD_INT 0
26376: PPUSH
26377: PPUSH
26378: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26379: LD_STRING resetWarehouseGatheringPoints();
26381: PPUSH
26382: CALL_OW 559
// if warehouseGatheringPoints then
26386: LD_EXP 81
26390: IFFALSE 26516
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26392: LD_ADDR_VAR 0 3
26396: PUSH
26397: LD_EXP 81
26401: PPUSH
26402: CALL 72552 0 1
26406: ST_TO_ADDR
// for i := 1 to list do
26407: LD_ADDR_VAR 0 2
26411: PUSH
26412: DOUBLE
26413: LD_INT 1
26415: DEC
26416: ST_TO_ADDR
26417: LD_VAR 0 3
26421: PUSH
26422: FOR_TO
26423: IFFALSE 26514
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26425: LD_STRING setWarehouseGatheringPointXY(
26427: PUSH
26428: LD_VAR 0 3
26432: PUSH
26433: LD_VAR 0 2
26437: ARRAY
26438: PUSH
26439: LD_INT 1
26441: ARRAY
26442: STR
26443: PUSH
26444: LD_STRING ,
26446: STR
26447: PUSH
26448: LD_VAR 0 3
26452: PUSH
26453: LD_VAR 0 2
26457: ARRAY
26458: PUSH
26459: LD_INT 2
26461: ARRAY
26462: STR
26463: PUSH
26464: LD_STRING ,
26466: STR
26467: PUSH
26468: LD_VAR 0 3
26472: PUSH
26473: LD_VAR 0 2
26477: ARRAY
26478: PUSH
26479: LD_INT 3
26481: ARRAY
26482: STR
26483: PUSH
26484: LD_STRING ,
26486: STR
26487: PUSH
26488: LD_VAR 0 3
26492: PUSH
26493: LD_VAR 0 2
26497: ARRAY
26498: PUSH
26499: LD_INT 4
26501: ARRAY
26502: STR
26503: PUSH
26504: LD_STRING )
26506: STR
26507: PPUSH
26508: CALL_OW 559
26512: GO 26422
26514: POP
26515: POP
// end ; end ;
26516: LD_VAR 0 1
26520: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26521: LD_EXP 81
26525: IFFALSE 27210
26527: GO 26529
26529: DISABLE
26530: LD_INT 0
26532: PPUSH
26533: PPUSH
26534: PPUSH
26535: PPUSH
26536: PPUSH
26537: PPUSH
26538: PPUSH
26539: PPUSH
26540: PPUSH
// begin enable ;
26541: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26542: LD_ADDR_VAR 0 3
26546: PUSH
26547: LD_EXP 81
26551: PPUSH
26552: CALL 72552 0 1
26556: ST_TO_ADDR
// if not list then
26557: LD_VAR 0 3
26561: NOT
26562: IFFALSE 26566
// exit ;
26564: GO 27210
// for i := 1 to list do
26566: LD_ADDR_VAR 0 1
26570: PUSH
26571: DOUBLE
26572: LD_INT 1
26574: DEC
26575: ST_TO_ADDR
26576: LD_VAR 0 3
26580: PUSH
26581: FOR_TO
26582: IFFALSE 27208
// begin depot := list [ i ] [ 2 ] ;
26584: LD_ADDR_VAR 0 8
26588: PUSH
26589: LD_VAR 0 3
26593: PUSH
26594: LD_VAR 0 1
26598: ARRAY
26599: PUSH
26600: LD_INT 2
26602: ARRAY
26603: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26604: LD_ADDR_VAR 0 5
26608: PUSH
26609: LD_VAR 0 3
26613: PUSH
26614: LD_VAR 0 1
26618: ARRAY
26619: PUSH
26620: LD_INT 1
26622: ARRAY
26623: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26624: LD_VAR 0 8
26628: PPUSH
26629: CALL_OW 301
26633: PUSH
26634: LD_VAR 0 5
26638: PUSH
26639: LD_VAR 0 8
26643: PPUSH
26644: CALL_OW 255
26648: NONEQUAL
26649: OR
26650: IFFALSE 26679
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26652: LD_ADDR_EXP 81
26656: PUSH
26657: LD_EXP 81
26661: PPUSH
26662: LD_VAR 0 8
26666: PPUSH
26667: LD_INT 0
26669: PPUSH
26670: CALL_OW 1
26674: ST_TO_ADDR
// exit ;
26675: POP
26676: POP
26677: GO 27210
// end ; x := list [ i ] [ 3 ] ;
26679: LD_ADDR_VAR 0 6
26683: PUSH
26684: LD_VAR 0 3
26688: PUSH
26689: LD_VAR 0 1
26693: ARRAY
26694: PUSH
26695: LD_INT 3
26697: ARRAY
26698: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26699: LD_ADDR_VAR 0 7
26703: PUSH
26704: LD_VAR 0 3
26708: PUSH
26709: LD_VAR 0 1
26713: ARRAY
26714: PUSH
26715: LD_INT 4
26717: ARRAY
26718: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26719: LD_ADDR_VAR 0 9
26723: PUSH
26724: LD_VAR 0 6
26728: PPUSH
26729: LD_VAR 0 7
26733: PPUSH
26734: LD_INT 16
26736: PPUSH
26737: CALL 71140 0 3
26741: ST_TO_ADDR
// if not cratesNearbyPoint then
26742: LD_VAR 0 9
26746: NOT
26747: IFFALSE 26753
// exit ;
26749: POP
26750: POP
26751: GO 27210
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26753: LD_ADDR_VAR 0 4
26757: PUSH
26758: LD_INT 22
26760: PUSH
26761: LD_VAR 0 5
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 3
26772: PUSH
26773: LD_INT 60
26775: PUSH
26776: EMPTY
26777: LIST
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 91
26785: PUSH
26786: LD_VAR 0 8
26790: PUSH
26791: LD_INT 6
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 2
26801: PUSH
26802: LD_INT 25
26804: PUSH
26805: LD_INT 2
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 25
26814: PUSH
26815: LD_INT 16
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: LIST
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: PPUSH
26833: CALL_OW 69
26837: PUSH
26838: LD_VAR 0 8
26842: PPUSH
26843: CALL_OW 313
26847: PPUSH
26848: LD_INT 3
26850: PUSH
26851: LD_INT 60
26853: PUSH
26854: EMPTY
26855: LIST
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 2
26863: PUSH
26864: LD_INT 25
26866: PUSH
26867: LD_INT 2
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 25
26876: PUSH
26877: LD_INT 16
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: LIST
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PPUSH
26893: CALL_OW 72
26897: UNION
26898: ST_TO_ADDR
// if tmp then
26899: LD_VAR 0 4
26903: IFFALSE 26983
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26905: LD_ADDR_VAR 0 4
26909: PUSH
26910: LD_VAR 0 4
26914: PPUSH
26915: LD_INT 3
26917: PPUSH
26918: CALL 69109 0 2
26922: ST_TO_ADDR
// for j in tmp do
26923: LD_ADDR_VAR 0 2
26927: PUSH
26928: LD_VAR 0 4
26932: PUSH
26933: FOR_IN
26934: IFFALSE 26977
// begin if IsInUnit ( j ) then
26936: LD_VAR 0 2
26940: PPUSH
26941: CALL_OW 310
26945: IFFALSE 26956
// ComExit ( j ) ;
26947: LD_VAR 0 2
26951: PPUSH
26952: CALL 69192 0 1
// AddComCollect ( j , x , y ) ;
26956: LD_VAR 0 2
26960: PPUSH
26961: LD_VAR 0 6
26965: PPUSH
26966: LD_VAR 0 7
26970: PPUSH
26971: CALL_OW 177
// end ;
26975: GO 26933
26977: POP
26978: POP
// exit ;
26979: POP
26980: POP
26981: GO 27210
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26983: LD_ADDR_VAR 0 4
26987: PUSH
26988: LD_INT 22
26990: PUSH
26991: LD_VAR 0 5
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 91
27002: PUSH
27003: LD_VAR 0 8
27007: PUSH
27008: LD_INT 8
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 2
27018: PUSH
27019: LD_INT 34
27021: PUSH
27022: LD_INT 12
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 34
27031: PUSH
27032: LD_INT 51
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 34
27041: PUSH
27042: LD_INT 32
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 34
27051: PUSH
27052: LD_INT 89
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: LIST
27070: PPUSH
27071: CALL_OW 69
27075: ST_TO_ADDR
// if tmp then
27076: LD_VAR 0 4
27080: IFFALSE 27206
// begin for j in tmp do
27082: LD_ADDR_VAR 0 2
27086: PUSH
27087: LD_VAR 0 4
27091: PUSH
27092: FOR_IN
27093: IFFALSE 27204
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27095: LD_VAR 0 2
27099: PPUSH
27100: CALL_OW 262
27104: PUSH
27105: LD_INT 3
27107: EQUAL
27108: PUSH
27109: LD_VAR 0 2
27113: PPUSH
27114: CALL_OW 261
27118: PUSH
27119: LD_INT 20
27121: GREATER
27122: OR
27123: PUSH
27124: LD_VAR 0 2
27128: PPUSH
27129: CALL_OW 314
27133: NOT
27134: AND
27135: PUSH
27136: LD_VAR 0 2
27140: PPUSH
27141: CALL_OW 263
27145: PUSH
27146: LD_INT 1
27148: NONEQUAL
27149: PUSH
27150: LD_VAR 0 2
27154: PPUSH
27155: CALL_OW 311
27159: OR
27160: AND
27161: IFFALSE 27202
// begin ComCollect ( j , x , y ) ;
27163: LD_VAR 0 2
27167: PPUSH
27168: LD_VAR 0 6
27172: PPUSH
27173: LD_VAR 0 7
27177: PPUSH
27178: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27182: LD_VAR 0 2
27186: PPUSH
27187: LD_VAR 0 8
27191: PPUSH
27192: CALL_OW 172
// exit ;
27196: POP
27197: POP
27198: POP
27199: POP
27200: GO 27210
// end ;
27202: GO 27092
27204: POP
27205: POP
// end ; end ;
27206: GO 26581
27208: POP
27209: POP
// end ; end_of_file
27210: PPOPN 9
27212: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27213: LD_INT 0
27215: PPUSH
27216: PPUSH
27217: PPUSH
27218: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27219: LD_VAR 0 1
27223: PPUSH
27224: CALL_OW 264
27228: PUSH
27229: LD_INT 91
27231: EQUAL
27232: IFFALSE 27304
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27234: LD_INT 68
27236: PPUSH
27237: LD_VAR 0 1
27241: PPUSH
27242: CALL_OW 255
27246: PPUSH
27247: CALL_OW 321
27251: PUSH
27252: LD_INT 2
27254: EQUAL
27255: IFFALSE 27267
// eff := 70 else
27257: LD_ADDR_VAR 0 4
27261: PUSH
27262: LD_INT 70
27264: ST_TO_ADDR
27265: GO 27275
// eff := 30 ;
27267: LD_ADDR_VAR 0 4
27271: PUSH
27272: LD_INT 30
27274: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27275: LD_VAR 0 1
27279: PPUSH
27280: CALL_OW 250
27284: PPUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 251
27294: PPUSH
27295: LD_VAR 0 4
27299: PPUSH
27300: CALL_OW 495
// end ; end ;
27304: LD_VAR 0 2
27308: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27309: LD_INT 0
27311: PPUSH
// end ;
27312: LD_VAR 0 4
27316: RET
// export function SOS_Command ( cmd ) ; begin
27317: LD_INT 0
27319: PPUSH
// end ;
27320: LD_VAR 0 2
27324: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27325: LD_INT 0
27327: PPUSH
// end ;
27328: LD_VAR 0 6
27332: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27333: LD_INT 0
27335: PPUSH
27336: PPUSH
// if not vehicle or not factory then
27337: LD_VAR 0 1
27341: NOT
27342: PUSH
27343: LD_VAR 0 2
27347: NOT
27348: OR
27349: IFFALSE 27353
// exit ;
27351: GO 27584
// if factoryWaypoints >= factory then
27353: LD_EXP 80
27357: PUSH
27358: LD_VAR 0 2
27362: GREATEREQUAL
27363: IFFALSE 27584
// if factoryWaypoints [ factory ] then
27365: LD_EXP 80
27369: PUSH
27370: LD_VAR 0 2
27374: ARRAY
27375: IFFALSE 27584
// begin if GetControl ( vehicle ) = control_manual then
27377: LD_VAR 0 1
27381: PPUSH
27382: CALL_OW 263
27386: PUSH
27387: LD_INT 1
27389: EQUAL
27390: IFFALSE 27471
// begin driver := IsDrivenBy ( vehicle ) ;
27392: LD_ADDR_VAR 0 4
27396: PUSH
27397: LD_VAR 0 1
27401: PPUSH
27402: CALL_OW 311
27406: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27407: LD_VAR 0 4
27411: PPUSH
27412: LD_EXP 80
27416: PUSH
27417: LD_VAR 0 2
27421: ARRAY
27422: PUSH
27423: LD_INT 3
27425: ARRAY
27426: PPUSH
27427: LD_EXP 80
27431: PUSH
27432: LD_VAR 0 2
27436: ARRAY
27437: PUSH
27438: LD_INT 4
27440: ARRAY
27441: PPUSH
27442: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27446: LD_VAR 0 4
27450: PPUSH
27451: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27455: LD_VAR 0 4
27459: PPUSH
27460: LD_VAR 0 2
27464: PPUSH
27465: CALL_OW 180
// end else
27469: GO 27584
// if GetControl ( vehicle ) = control_remote then
27471: LD_VAR 0 1
27475: PPUSH
27476: CALL_OW 263
27480: PUSH
27481: LD_INT 2
27483: EQUAL
27484: IFFALSE 27545
// begin wait ( 0 0$2 ) ;
27486: LD_INT 70
27488: PPUSH
27489: CALL_OW 67
// if Connect ( vehicle ) then
27493: LD_VAR 0 1
27497: PPUSH
27498: CALL 39433 0 1
27502: IFFALSE 27543
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27504: LD_VAR 0 1
27508: PPUSH
27509: LD_EXP 80
27513: PUSH
27514: LD_VAR 0 2
27518: ARRAY
27519: PUSH
27520: LD_INT 3
27522: ARRAY
27523: PPUSH
27524: LD_EXP 80
27528: PUSH
27529: LD_VAR 0 2
27533: ARRAY
27534: PUSH
27535: LD_INT 4
27537: ARRAY
27538: PPUSH
27539: CALL_OW 171
// end else
27543: GO 27584
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27545: LD_VAR 0 1
27549: PPUSH
27550: LD_EXP 80
27554: PUSH
27555: LD_VAR 0 2
27559: ARRAY
27560: PUSH
27561: LD_INT 3
27563: ARRAY
27564: PPUSH
27565: LD_EXP 80
27569: PUSH
27570: LD_VAR 0 2
27574: ARRAY
27575: PUSH
27576: LD_INT 4
27578: ARRAY
27579: PPUSH
27580: CALL_OW 171
// end ; end ;
27584: LD_VAR 0 3
27588: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27589: LD_INT 0
27591: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27592: LD_VAR 0 1
27596: PUSH
27597: LD_INT 250
27599: EQUAL
27600: PUSH
27601: LD_VAR 0 2
27605: PPUSH
27606: CALL_OW 264
27610: PUSH
27611: LD_INT 81
27613: EQUAL
27614: AND
27615: IFFALSE 27636
// MinerPlaceMine ( unit , x , y ) ;
27617: LD_VAR 0 2
27621: PPUSH
27622: LD_VAR 0 4
27626: PPUSH
27627: LD_VAR 0 5
27631: PPUSH
27632: CALL 30021 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27636: LD_VAR 0 1
27640: PUSH
27641: LD_INT 251
27643: EQUAL
27644: PUSH
27645: LD_VAR 0 2
27649: PPUSH
27650: CALL_OW 264
27654: PUSH
27655: LD_INT 81
27657: EQUAL
27658: AND
27659: IFFALSE 27680
// MinerDetonateMine ( unit , x , y ) ;
27661: LD_VAR 0 2
27665: PPUSH
27666: LD_VAR 0 4
27670: PPUSH
27671: LD_VAR 0 5
27675: PPUSH
27676: CALL 30296 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27680: LD_VAR 0 1
27684: PUSH
27685: LD_INT 252
27687: EQUAL
27688: PUSH
27689: LD_VAR 0 2
27693: PPUSH
27694: CALL_OW 264
27698: PUSH
27699: LD_INT 81
27701: EQUAL
27702: AND
27703: IFFALSE 27724
// MinerCreateMinefield ( unit , x , y ) ;
27705: LD_VAR 0 2
27709: PPUSH
27710: LD_VAR 0 4
27714: PPUSH
27715: LD_VAR 0 5
27719: PPUSH
27720: CALL 30713 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27724: LD_VAR 0 1
27728: PUSH
27729: LD_INT 253
27731: EQUAL
27732: PUSH
27733: LD_VAR 0 2
27737: PPUSH
27738: CALL_OW 257
27742: PUSH
27743: LD_INT 5
27745: EQUAL
27746: AND
27747: IFFALSE 27768
// ComBinocular ( unit , x , y ) ;
27749: LD_VAR 0 2
27753: PPUSH
27754: LD_VAR 0 4
27758: PPUSH
27759: LD_VAR 0 5
27763: PPUSH
27764: CALL 31082 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27768: LD_VAR 0 1
27772: PUSH
27773: LD_INT 254
27775: EQUAL
27776: PUSH
27777: LD_VAR 0 2
27781: PPUSH
27782: CALL_OW 264
27786: PUSH
27787: LD_INT 99
27789: EQUAL
27790: AND
27791: PUSH
27792: LD_VAR 0 3
27796: PPUSH
27797: CALL_OW 263
27801: PUSH
27802: LD_INT 3
27804: EQUAL
27805: AND
27806: IFFALSE 27822
// HackDestroyVehicle ( unit , selectedUnit ) ;
27808: LD_VAR 0 2
27812: PPUSH
27813: LD_VAR 0 3
27817: PPUSH
27818: CALL 29385 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27822: LD_VAR 0 1
27826: PUSH
27827: LD_INT 255
27829: EQUAL
27830: PUSH
27831: LD_VAR 0 2
27835: PPUSH
27836: CALL_OW 264
27840: PUSH
27841: LD_INT 14
27843: PUSH
27844: LD_INT 53
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: IN
27851: AND
27852: PUSH
27853: LD_VAR 0 4
27857: PPUSH
27858: LD_VAR 0 5
27862: PPUSH
27863: CALL_OW 488
27867: AND
27868: IFFALSE 27892
// CutTreeXYR ( unit , x , y , 12 ) ;
27870: LD_VAR 0 2
27874: PPUSH
27875: LD_VAR 0 4
27879: PPUSH
27880: LD_VAR 0 5
27884: PPUSH
27885: LD_INT 12
27887: PPUSH
27888: CALL 27955 0 4
// if cmd = 256 then
27892: LD_VAR 0 1
27896: PUSH
27897: LD_INT 256
27899: EQUAL
27900: IFFALSE 27921
// SetFactoryWaypoint ( unit , x , y ) ;
27902: LD_VAR 0 2
27906: PPUSH
27907: LD_VAR 0 4
27911: PPUSH
27912: LD_VAR 0 5
27916: PPUSH
27917: CALL 25902 0 3
// if cmd = 257 then
27921: LD_VAR 0 1
27925: PUSH
27926: LD_INT 257
27928: EQUAL
27929: IFFALSE 27950
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27931: LD_VAR 0 2
27935: PPUSH
27936: LD_VAR 0 4
27940: PPUSH
27941: LD_VAR 0 5
27945: PPUSH
27946: CALL 26264 0 3
// end ;
27950: LD_VAR 0 6
27954: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27955: LD_INT 0
27957: PPUSH
27958: PPUSH
27959: PPUSH
27960: PPUSH
27961: PPUSH
27962: PPUSH
27963: PPUSH
27964: PPUSH
27965: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27966: LD_VAR 0 1
27970: NOT
27971: PUSH
27972: LD_VAR 0 2
27976: PPUSH
27977: LD_VAR 0 3
27981: PPUSH
27982: CALL_OW 488
27986: NOT
27987: OR
27988: PUSH
27989: LD_VAR 0 4
27993: NOT
27994: OR
27995: IFFALSE 27999
// exit ;
27997: GO 28339
// list := [ ] ;
27999: LD_ADDR_VAR 0 13
28003: PUSH
28004: EMPTY
28005: ST_TO_ADDR
// if x - r < 0 then
28006: LD_VAR 0 2
28010: PUSH
28011: LD_VAR 0 4
28015: MINUS
28016: PUSH
28017: LD_INT 0
28019: LESS
28020: IFFALSE 28032
// min_x := 0 else
28022: LD_ADDR_VAR 0 7
28026: PUSH
28027: LD_INT 0
28029: ST_TO_ADDR
28030: GO 28048
// min_x := x - r ;
28032: LD_ADDR_VAR 0 7
28036: PUSH
28037: LD_VAR 0 2
28041: PUSH
28042: LD_VAR 0 4
28046: MINUS
28047: ST_TO_ADDR
// if y - r < 0 then
28048: LD_VAR 0 3
28052: PUSH
28053: LD_VAR 0 4
28057: MINUS
28058: PUSH
28059: LD_INT 0
28061: LESS
28062: IFFALSE 28074
// min_y := 0 else
28064: LD_ADDR_VAR 0 8
28068: PUSH
28069: LD_INT 0
28071: ST_TO_ADDR
28072: GO 28090
// min_y := y - r ;
28074: LD_ADDR_VAR 0 8
28078: PUSH
28079: LD_VAR 0 3
28083: PUSH
28084: LD_VAR 0 4
28088: MINUS
28089: ST_TO_ADDR
// max_x := x + r ;
28090: LD_ADDR_VAR 0 9
28094: PUSH
28095: LD_VAR 0 2
28099: PUSH
28100: LD_VAR 0 4
28104: PLUS
28105: ST_TO_ADDR
// max_y := y + r ;
28106: LD_ADDR_VAR 0 10
28110: PUSH
28111: LD_VAR 0 3
28115: PUSH
28116: LD_VAR 0 4
28120: PLUS
28121: ST_TO_ADDR
// for _x = min_x to max_x do
28122: LD_ADDR_VAR 0 11
28126: PUSH
28127: DOUBLE
28128: LD_VAR 0 7
28132: DEC
28133: ST_TO_ADDR
28134: LD_VAR 0 9
28138: PUSH
28139: FOR_TO
28140: IFFALSE 28257
// for _y = min_y to max_y do
28142: LD_ADDR_VAR 0 12
28146: PUSH
28147: DOUBLE
28148: LD_VAR 0 8
28152: DEC
28153: ST_TO_ADDR
28154: LD_VAR 0 10
28158: PUSH
28159: FOR_TO
28160: IFFALSE 28253
// begin if not ValidHex ( _x , _y ) then
28162: LD_VAR 0 11
28166: PPUSH
28167: LD_VAR 0 12
28171: PPUSH
28172: CALL_OW 488
28176: NOT
28177: IFFALSE 28181
// continue ;
28179: GO 28159
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28181: LD_VAR 0 11
28185: PPUSH
28186: LD_VAR 0 12
28190: PPUSH
28191: CALL_OW 351
28195: PUSH
28196: LD_VAR 0 11
28200: PPUSH
28201: LD_VAR 0 12
28205: PPUSH
28206: CALL_OW 554
28210: AND
28211: IFFALSE 28251
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28213: LD_ADDR_VAR 0 13
28217: PUSH
28218: LD_VAR 0 13
28222: PPUSH
28223: LD_VAR 0 13
28227: PUSH
28228: LD_INT 1
28230: PLUS
28231: PPUSH
28232: LD_VAR 0 11
28236: PUSH
28237: LD_VAR 0 12
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PPUSH
28246: CALL_OW 2
28250: ST_TO_ADDR
// end ;
28251: GO 28159
28253: POP
28254: POP
28255: GO 28139
28257: POP
28258: POP
// if not list then
28259: LD_VAR 0 13
28263: NOT
28264: IFFALSE 28268
// exit ;
28266: GO 28339
// for i in list do
28268: LD_ADDR_VAR 0 6
28272: PUSH
28273: LD_VAR 0 13
28277: PUSH
28278: FOR_IN
28279: IFFALSE 28337
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28281: LD_VAR 0 1
28285: PPUSH
28286: LD_STRING M
28288: PUSH
28289: LD_VAR 0 6
28293: PUSH
28294: LD_INT 1
28296: ARRAY
28297: PUSH
28298: LD_VAR 0 6
28302: PUSH
28303: LD_INT 2
28305: ARRAY
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: LD_INT 0
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: PUSH
28328: EMPTY
28329: LIST
28330: PPUSH
28331: CALL_OW 447
28335: GO 28278
28337: POP
28338: POP
// end ;
28339: LD_VAR 0 5
28343: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28344: LD_EXP 83
28348: NOT
28349: IFFALSE 28399
28351: GO 28353
28353: DISABLE
// begin initHack := true ;
28354: LD_ADDR_EXP 83
28358: PUSH
28359: LD_INT 1
28361: ST_TO_ADDR
// hackTanks := [ ] ;
28362: LD_ADDR_EXP 84
28366: PUSH
28367: EMPTY
28368: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28369: LD_ADDR_EXP 85
28373: PUSH
28374: EMPTY
28375: ST_TO_ADDR
// hackLimit := 3 ;
28376: LD_ADDR_EXP 86
28380: PUSH
28381: LD_INT 3
28383: ST_TO_ADDR
// hackDist := 12 ;
28384: LD_ADDR_EXP 87
28388: PUSH
28389: LD_INT 12
28391: ST_TO_ADDR
// hackCounter := [ ] ;
28392: LD_ADDR_EXP 88
28396: PUSH
28397: EMPTY
28398: ST_TO_ADDR
// end ;
28399: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28400: LD_EXP 83
28404: PUSH
28405: LD_INT 34
28407: PUSH
28408: LD_INT 99
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PPUSH
28415: CALL_OW 69
28419: AND
28420: IFFALSE 28673
28422: GO 28424
28424: DISABLE
28425: LD_INT 0
28427: PPUSH
28428: PPUSH
// begin enable ;
28429: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28430: LD_ADDR_VAR 0 1
28434: PUSH
28435: LD_INT 34
28437: PUSH
28438: LD_INT 99
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PPUSH
28445: CALL_OW 69
28449: PUSH
28450: FOR_IN
28451: IFFALSE 28671
// begin if not i in hackTanks then
28453: LD_VAR 0 1
28457: PUSH
28458: LD_EXP 84
28462: IN
28463: NOT
28464: IFFALSE 28547
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28466: LD_ADDR_EXP 84
28470: PUSH
28471: LD_EXP 84
28475: PPUSH
28476: LD_EXP 84
28480: PUSH
28481: LD_INT 1
28483: PLUS
28484: PPUSH
28485: LD_VAR 0 1
28489: PPUSH
28490: CALL_OW 1
28494: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28495: LD_ADDR_EXP 85
28499: PUSH
28500: LD_EXP 85
28504: PPUSH
28505: LD_EXP 85
28509: PUSH
28510: LD_INT 1
28512: PLUS
28513: PPUSH
28514: EMPTY
28515: PPUSH
28516: CALL_OW 1
28520: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28521: LD_ADDR_EXP 88
28525: PUSH
28526: LD_EXP 88
28530: PPUSH
28531: LD_EXP 88
28535: PUSH
28536: LD_INT 1
28538: PLUS
28539: PPUSH
28540: EMPTY
28541: PPUSH
28542: CALL_OW 1
28546: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28547: LD_VAR 0 1
28551: PPUSH
28552: CALL_OW 302
28556: NOT
28557: IFFALSE 28570
// begin HackUnlinkAll ( i ) ;
28559: LD_VAR 0 1
28563: PPUSH
28564: CALL 28676 0 1
// continue ;
28568: GO 28450
// end ; HackCheckCapturedStatus ( i ) ;
28570: LD_VAR 0 1
28574: PPUSH
28575: CALL 29119 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28579: LD_ADDR_VAR 0 2
28583: PUSH
28584: LD_INT 81
28586: PUSH
28587: LD_VAR 0 1
28591: PPUSH
28592: CALL_OW 255
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 33
28603: PUSH
28604: LD_INT 3
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 91
28613: PUSH
28614: LD_VAR 0 1
28618: PUSH
28619: LD_EXP 87
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 50
28631: PUSH
28632: EMPTY
28633: LIST
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: PPUSH
28641: CALL_OW 69
28645: ST_TO_ADDR
// if not tmp then
28646: LD_VAR 0 2
28650: NOT
28651: IFFALSE 28655
// continue ;
28653: GO 28450
// HackLink ( i , tmp ) ;
28655: LD_VAR 0 1
28659: PPUSH
28660: LD_VAR 0 2
28664: PPUSH
28665: CALL 28812 0 2
// end ;
28669: GO 28450
28671: POP
28672: POP
// end ;
28673: PPOPN 2
28675: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28676: LD_INT 0
28678: PPUSH
28679: PPUSH
28680: PPUSH
// if not hack in hackTanks then
28681: LD_VAR 0 1
28685: PUSH
28686: LD_EXP 84
28690: IN
28691: NOT
28692: IFFALSE 28696
// exit ;
28694: GO 28807
// index := GetElementIndex ( hackTanks , hack ) ;
28696: LD_ADDR_VAR 0 4
28700: PUSH
28701: LD_EXP 84
28705: PPUSH
28706: LD_VAR 0 1
28710: PPUSH
28711: CALL 36249 0 2
28715: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28716: LD_EXP 85
28720: PUSH
28721: LD_VAR 0 4
28725: ARRAY
28726: IFFALSE 28807
// begin for i in hackTanksCaptured [ index ] do
28728: LD_ADDR_VAR 0 3
28732: PUSH
28733: LD_EXP 85
28737: PUSH
28738: LD_VAR 0 4
28742: ARRAY
28743: PUSH
28744: FOR_IN
28745: IFFALSE 28771
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28747: LD_VAR 0 3
28751: PUSH
28752: LD_INT 1
28754: ARRAY
28755: PPUSH
28756: LD_VAR 0 3
28760: PUSH
28761: LD_INT 2
28763: ARRAY
28764: PPUSH
28765: CALL_OW 235
28769: GO 28744
28771: POP
28772: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28773: LD_ADDR_EXP 85
28777: PUSH
28778: LD_EXP 85
28782: PPUSH
28783: LD_VAR 0 4
28787: PPUSH
28788: EMPTY
28789: PPUSH
28790: CALL_OW 1
28794: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28795: LD_VAR 0 1
28799: PPUSH
28800: LD_INT 0
28802: PPUSH
28803: CALL_OW 505
// end ; end ;
28807: LD_VAR 0 2
28811: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28812: LD_INT 0
28814: PPUSH
28815: PPUSH
28816: PPUSH
// if not hack in hackTanks or not vehicles then
28817: LD_VAR 0 1
28821: PUSH
28822: LD_EXP 84
28826: IN
28827: NOT
28828: PUSH
28829: LD_VAR 0 2
28833: NOT
28834: OR
28835: IFFALSE 28839
// exit ;
28837: GO 29114
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28839: LD_ADDR_VAR 0 2
28843: PUSH
28844: LD_VAR 0 1
28848: PPUSH
28849: LD_VAR 0 2
28853: PPUSH
28854: LD_INT 1
28856: PPUSH
28857: LD_INT 1
28859: PPUSH
28860: CALL 36899 0 4
28864: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28865: LD_ADDR_VAR 0 5
28869: PUSH
28870: LD_EXP 84
28874: PPUSH
28875: LD_VAR 0 1
28879: PPUSH
28880: CALL 36249 0 2
28884: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28885: LD_EXP 85
28889: PUSH
28890: LD_VAR 0 5
28894: ARRAY
28895: PUSH
28896: LD_EXP 86
28900: LESS
28901: IFFALSE 29090
// begin for i := 1 to vehicles do
28903: LD_ADDR_VAR 0 4
28907: PUSH
28908: DOUBLE
28909: LD_INT 1
28911: DEC
28912: ST_TO_ADDR
28913: LD_VAR 0 2
28917: PUSH
28918: FOR_TO
28919: IFFALSE 29088
// begin if hackTanksCaptured [ index ] = hackLimit then
28921: LD_EXP 85
28925: PUSH
28926: LD_VAR 0 5
28930: ARRAY
28931: PUSH
28932: LD_EXP 86
28936: EQUAL
28937: IFFALSE 28941
// break ;
28939: GO 29088
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28941: LD_ADDR_EXP 88
28945: PUSH
28946: LD_EXP 88
28950: PPUSH
28951: LD_VAR 0 5
28955: PPUSH
28956: LD_EXP 88
28960: PUSH
28961: LD_VAR 0 5
28965: ARRAY
28966: PUSH
28967: LD_INT 1
28969: PLUS
28970: PPUSH
28971: CALL_OW 1
28975: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28976: LD_ADDR_EXP 85
28980: PUSH
28981: LD_EXP 85
28985: PPUSH
28986: LD_VAR 0 5
28990: PUSH
28991: LD_EXP 85
28995: PUSH
28996: LD_VAR 0 5
29000: ARRAY
29001: PUSH
29002: LD_INT 1
29004: PLUS
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PPUSH
29010: LD_VAR 0 2
29014: PUSH
29015: LD_VAR 0 4
29019: ARRAY
29020: PUSH
29021: LD_VAR 0 2
29025: PUSH
29026: LD_VAR 0 4
29030: ARRAY
29031: PPUSH
29032: CALL_OW 255
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PPUSH
29041: CALL 36464 0 3
29045: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29046: LD_VAR 0 2
29050: PUSH
29051: LD_VAR 0 4
29055: ARRAY
29056: PPUSH
29057: LD_VAR 0 1
29061: PPUSH
29062: CALL_OW 255
29066: PPUSH
29067: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29071: LD_VAR 0 2
29075: PUSH
29076: LD_VAR 0 4
29080: ARRAY
29081: PPUSH
29082: CALL_OW 141
// end ;
29086: GO 28918
29088: POP
29089: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29090: LD_VAR 0 1
29094: PPUSH
29095: LD_EXP 85
29099: PUSH
29100: LD_VAR 0 5
29104: ARRAY
29105: PUSH
29106: LD_INT 0
29108: PLUS
29109: PPUSH
29110: CALL_OW 505
// end ;
29114: LD_VAR 0 3
29118: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29119: LD_INT 0
29121: PPUSH
29122: PPUSH
29123: PPUSH
29124: PPUSH
// if not hack in hackTanks then
29125: LD_VAR 0 1
29129: PUSH
29130: LD_EXP 84
29134: IN
29135: NOT
29136: IFFALSE 29140
// exit ;
29138: GO 29380
// index := GetElementIndex ( hackTanks , hack ) ;
29140: LD_ADDR_VAR 0 4
29144: PUSH
29145: LD_EXP 84
29149: PPUSH
29150: LD_VAR 0 1
29154: PPUSH
29155: CALL 36249 0 2
29159: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29160: LD_ADDR_VAR 0 3
29164: PUSH
29165: DOUBLE
29166: LD_EXP 85
29170: PUSH
29171: LD_VAR 0 4
29175: ARRAY
29176: INC
29177: ST_TO_ADDR
29178: LD_INT 1
29180: PUSH
29181: FOR_DOWNTO
29182: IFFALSE 29354
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29184: LD_ADDR_VAR 0 5
29188: PUSH
29189: LD_EXP 85
29193: PUSH
29194: LD_VAR 0 4
29198: ARRAY
29199: PUSH
29200: LD_VAR 0 3
29204: ARRAY
29205: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29206: LD_VAR 0 5
29210: PUSH
29211: LD_INT 1
29213: ARRAY
29214: PPUSH
29215: CALL_OW 302
29219: NOT
29220: PUSH
29221: LD_VAR 0 5
29225: PUSH
29226: LD_INT 1
29228: ARRAY
29229: PPUSH
29230: CALL_OW 255
29234: PUSH
29235: LD_VAR 0 1
29239: PPUSH
29240: CALL_OW 255
29244: NONEQUAL
29245: OR
29246: IFFALSE 29352
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29248: LD_VAR 0 5
29252: PUSH
29253: LD_INT 1
29255: ARRAY
29256: PPUSH
29257: CALL_OW 305
29261: PUSH
29262: LD_VAR 0 5
29266: PUSH
29267: LD_INT 1
29269: ARRAY
29270: PPUSH
29271: CALL_OW 255
29275: PUSH
29276: LD_VAR 0 1
29280: PPUSH
29281: CALL_OW 255
29285: EQUAL
29286: AND
29287: IFFALSE 29311
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29289: LD_VAR 0 5
29293: PUSH
29294: LD_INT 1
29296: ARRAY
29297: PPUSH
29298: LD_VAR 0 5
29302: PUSH
29303: LD_INT 2
29305: ARRAY
29306: PPUSH
29307: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29311: LD_ADDR_EXP 85
29315: PUSH
29316: LD_EXP 85
29320: PPUSH
29321: LD_VAR 0 4
29325: PPUSH
29326: LD_EXP 85
29330: PUSH
29331: LD_VAR 0 4
29335: ARRAY
29336: PPUSH
29337: LD_VAR 0 3
29341: PPUSH
29342: CALL_OW 3
29346: PPUSH
29347: CALL_OW 1
29351: ST_TO_ADDR
// end ; end ;
29352: GO 29181
29354: POP
29355: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29356: LD_VAR 0 1
29360: PPUSH
29361: LD_EXP 85
29365: PUSH
29366: LD_VAR 0 4
29370: ARRAY
29371: PUSH
29372: LD_INT 0
29374: PLUS
29375: PPUSH
29376: CALL_OW 505
// end ;
29380: LD_VAR 0 2
29384: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29385: LD_INT 0
29387: PPUSH
29388: PPUSH
29389: PPUSH
29390: PPUSH
// if not hack in hackTanks then
29391: LD_VAR 0 1
29395: PUSH
29396: LD_EXP 84
29400: IN
29401: NOT
29402: IFFALSE 29406
// exit ;
29404: GO 29491
// index := GetElementIndex ( hackTanks , hack ) ;
29406: LD_ADDR_VAR 0 5
29410: PUSH
29411: LD_EXP 84
29415: PPUSH
29416: LD_VAR 0 1
29420: PPUSH
29421: CALL 36249 0 2
29425: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29426: LD_ADDR_VAR 0 4
29430: PUSH
29431: DOUBLE
29432: LD_INT 1
29434: DEC
29435: ST_TO_ADDR
29436: LD_EXP 85
29440: PUSH
29441: LD_VAR 0 5
29445: ARRAY
29446: PUSH
29447: FOR_TO
29448: IFFALSE 29489
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29450: LD_EXP 85
29454: PUSH
29455: LD_VAR 0 5
29459: ARRAY
29460: PUSH
29461: LD_VAR 0 4
29465: ARRAY
29466: PUSH
29467: LD_INT 1
29469: ARRAY
29470: PUSH
29471: LD_VAR 0 2
29475: EQUAL
29476: IFFALSE 29487
// KillUnit ( vehicle ) ;
29478: LD_VAR 0 2
29482: PPUSH
29483: CALL_OW 66
29487: GO 29447
29489: POP
29490: POP
// end ;
29491: LD_VAR 0 3
29495: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29496: LD_EXP 89
29500: NOT
29501: IFFALSE 29536
29503: GO 29505
29505: DISABLE
// begin initMiner := true ;
29506: LD_ADDR_EXP 89
29510: PUSH
29511: LD_INT 1
29513: ST_TO_ADDR
// minersList := [ ] ;
29514: LD_ADDR_EXP 90
29518: PUSH
29519: EMPTY
29520: ST_TO_ADDR
// minerMinesList := [ ] ;
29521: LD_ADDR_EXP 91
29525: PUSH
29526: EMPTY
29527: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29528: LD_ADDR_EXP 92
29532: PUSH
29533: LD_INT 5
29535: ST_TO_ADDR
// end ;
29536: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29537: LD_EXP 89
29541: PUSH
29542: LD_INT 34
29544: PUSH
29545: LD_INT 81
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PPUSH
29552: CALL_OW 69
29556: AND
29557: IFFALSE 30018
29559: GO 29561
29561: DISABLE
29562: LD_INT 0
29564: PPUSH
29565: PPUSH
29566: PPUSH
29567: PPUSH
// begin enable ;
29568: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29569: LD_ADDR_VAR 0 1
29573: PUSH
29574: LD_INT 34
29576: PUSH
29577: LD_INT 81
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PPUSH
29584: CALL_OW 69
29588: PUSH
29589: FOR_IN
29590: IFFALSE 29662
// begin if not i in minersList then
29592: LD_VAR 0 1
29596: PUSH
29597: LD_EXP 90
29601: IN
29602: NOT
29603: IFFALSE 29660
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29605: LD_ADDR_EXP 90
29609: PUSH
29610: LD_EXP 90
29614: PPUSH
29615: LD_EXP 90
29619: PUSH
29620: LD_INT 1
29622: PLUS
29623: PPUSH
29624: LD_VAR 0 1
29628: PPUSH
29629: CALL_OW 1
29633: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29634: LD_ADDR_EXP 91
29638: PUSH
29639: LD_EXP 91
29643: PPUSH
29644: LD_EXP 91
29648: PUSH
29649: LD_INT 1
29651: PLUS
29652: PPUSH
29653: EMPTY
29654: PPUSH
29655: CALL_OW 1
29659: ST_TO_ADDR
// end end ;
29660: GO 29589
29662: POP
29663: POP
// for i := minerMinesList downto 1 do
29664: LD_ADDR_VAR 0 1
29668: PUSH
29669: DOUBLE
29670: LD_EXP 91
29674: INC
29675: ST_TO_ADDR
29676: LD_INT 1
29678: PUSH
29679: FOR_DOWNTO
29680: IFFALSE 30016
// begin if IsLive ( minersList [ i ] ) then
29682: LD_EXP 90
29686: PUSH
29687: LD_VAR 0 1
29691: ARRAY
29692: PPUSH
29693: CALL_OW 300
29697: IFFALSE 29725
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29699: LD_EXP 90
29703: PUSH
29704: LD_VAR 0 1
29708: ARRAY
29709: PPUSH
29710: LD_EXP 91
29714: PUSH
29715: LD_VAR 0 1
29719: ARRAY
29720: PPUSH
29721: CALL_OW 505
// if not minerMinesList [ i ] then
29725: LD_EXP 91
29729: PUSH
29730: LD_VAR 0 1
29734: ARRAY
29735: NOT
29736: IFFALSE 29740
// continue ;
29738: GO 29679
// for j := minerMinesList [ i ] downto 1 do
29740: LD_ADDR_VAR 0 2
29744: PUSH
29745: DOUBLE
29746: LD_EXP 91
29750: PUSH
29751: LD_VAR 0 1
29755: ARRAY
29756: INC
29757: ST_TO_ADDR
29758: LD_INT 1
29760: PUSH
29761: FOR_DOWNTO
29762: IFFALSE 30012
// begin side := GetSide ( minersList [ i ] ) ;
29764: LD_ADDR_VAR 0 3
29768: PUSH
29769: LD_EXP 90
29773: PUSH
29774: LD_VAR 0 1
29778: ARRAY
29779: PPUSH
29780: CALL_OW 255
29784: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29785: LD_ADDR_VAR 0 4
29789: PUSH
29790: LD_EXP 91
29794: PUSH
29795: LD_VAR 0 1
29799: ARRAY
29800: PUSH
29801: LD_VAR 0 2
29805: ARRAY
29806: PUSH
29807: LD_INT 1
29809: ARRAY
29810: PPUSH
29811: LD_EXP 91
29815: PUSH
29816: LD_VAR 0 1
29820: ARRAY
29821: PUSH
29822: LD_VAR 0 2
29826: ARRAY
29827: PUSH
29828: LD_INT 2
29830: ARRAY
29831: PPUSH
29832: CALL_OW 428
29836: ST_TO_ADDR
// if not tmp then
29837: LD_VAR 0 4
29841: NOT
29842: IFFALSE 29846
// continue ;
29844: GO 29761
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29846: LD_VAR 0 4
29850: PUSH
29851: LD_INT 81
29853: PUSH
29854: LD_VAR 0 3
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PPUSH
29863: CALL_OW 69
29867: IN
29868: PUSH
29869: LD_EXP 91
29873: PUSH
29874: LD_VAR 0 1
29878: ARRAY
29879: PUSH
29880: LD_VAR 0 2
29884: ARRAY
29885: PUSH
29886: LD_INT 1
29888: ARRAY
29889: PPUSH
29890: LD_EXP 91
29894: PUSH
29895: LD_VAR 0 1
29899: ARRAY
29900: PUSH
29901: LD_VAR 0 2
29905: ARRAY
29906: PUSH
29907: LD_INT 2
29909: ARRAY
29910: PPUSH
29911: CALL_OW 458
29915: AND
29916: IFFALSE 30010
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29918: LD_EXP 91
29922: PUSH
29923: LD_VAR 0 1
29927: ARRAY
29928: PUSH
29929: LD_VAR 0 2
29933: ARRAY
29934: PUSH
29935: LD_INT 1
29937: ARRAY
29938: PPUSH
29939: LD_EXP 91
29943: PUSH
29944: LD_VAR 0 1
29948: ARRAY
29949: PUSH
29950: LD_VAR 0 2
29954: ARRAY
29955: PUSH
29956: LD_INT 2
29958: ARRAY
29959: PPUSH
29960: LD_VAR 0 3
29964: PPUSH
29965: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29969: LD_ADDR_EXP 91
29973: PUSH
29974: LD_EXP 91
29978: PPUSH
29979: LD_VAR 0 1
29983: PPUSH
29984: LD_EXP 91
29988: PUSH
29989: LD_VAR 0 1
29993: ARRAY
29994: PPUSH
29995: LD_VAR 0 2
29999: PPUSH
30000: CALL_OW 3
30004: PPUSH
30005: CALL_OW 1
30009: ST_TO_ADDR
// end ; end ;
30010: GO 29761
30012: POP
30013: POP
// end ;
30014: GO 29679
30016: POP
30017: POP
// end ;
30018: PPOPN 4
30020: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30021: LD_INT 0
30023: PPUSH
30024: PPUSH
// result := false ;
30025: LD_ADDR_VAR 0 4
30029: PUSH
30030: LD_INT 0
30032: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30033: LD_VAR 0 1
30037: PPUSH
30038: CALL_OW 264
30042: PUSH
30043: LD_INT 81
30045: EQUAL
30046: NOT
30047: IFFALSE 30051
// exit ;
30049: GO 30291
// index := GetElementIndex ( minersList , unit ) ;
30051: LD_ADDR_VAR 0 5
30055: PUSH
30056: LD_EXP 90
30060: PPUSH
30061: LD_VAR 0 1
30065: PPUSH
30066: CALL 36249 0 2
30070: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30071: LD_EXP 91
30075: PUSH
30076: LD_VAR 0 5
30080: ARRAY
30081: PUSH
30082: LD_EXP 92
30086: GREATEREQUAL
30087: IFFALSE 30091
// exit ;
30089: GO 30291
// ComMoveXY ( unit , x , y ) ;
30091: LD_VAR 0 1
30095: PPUSH
30096: LD_VAR 0 2
30100: PPUSH
30101: LD_VAR 0 3
30105: PPUSH
30106: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30110: LD_INT 35
30112: PPUSH
30113: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30117: LD_VAR 0 1
30121: PPUSH
30122: LD_VAR 0 2
30126: PPUSH
30127: LD_VAR 0 3
30131: PPUSH
30132: CALL 67604 0 3
30136: NOT
30137: PUSH
30138: LD_VAR 0 1
30142: PPUSH
30143: CALL_OW 314
30147: AND
30148: IFFALSE 30152
// exit ;
30150: GO 30291
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30152: LD_VAR 0 2
30156: PPUSH
30157: LD_VAR 0 3
30161: PPUSH
30162: CALL_OW 428
30166: PUSH
30167: LD_VAR 0 1
30171: EQUAL
30172: PUSH
30173: LD_VAR 0 1
30177: PPUSH
30178: CALL_OW 314
30182: NOT
30183: AND
30184: IFFALSE 30110
// PlaySoundXY ( x , y , PlantMine ) ;
30186: LD_VAR 0 2
30190: PPUSH
30191: LD_VAR 0 3
30195: PPUSH
30196: LD_STRING PlantMine
30198: PPUSH
30199: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30203: LD_VAR 0 2
30207: PPUSH
30208: LD_VAR 0 3
30212: PPUSH
30213: LD_VAR 0 1
30217: PPUSH
30218: CALL_OW 255
30222: PPUSH
30223: LD_INT 0
30225: PPUSH
30226: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30230: LD_ADDR_EXP 91
30234: PUSH
30235: LD_EXP 91
30239: PPUSH
30240: LD_VAR 0 5
30244: PUSH
30245: LD_EXP 91
30249: PUSH
30250: LD_VAR 0 5
30254: ARRAY
30255: PUSH
30256: LD_INT 1
30258: PLUS
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PPUSH
30264: LD_VAR 0 2
30268: PUSH
30269: LD_VAR 0 3
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PPUSH
30278: CALL 36464 0 3
30282: ST_TO_ADDR
// result := true ;
30283: LD_ADDR_VAR 0 4
30287: PUSH
30288: LD_INT 1
30290: ST_TO_ADDR
// end ;
30291: LD_VAR 0 4
30295: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30296: LD_INT 0
30298: PPUSH
30299: PPUSH
30300: PPUSH
// if not unit in minersList then
30301: LD_VAR 0 1
30305: PUSH
30306: LD_EXP 90
30310: IN
30311: NOT
30312: IFFALSE 30316
// exit ;
30314: GO 30708
// index := GetElementIndex ( minersList , unit ) ;
30316: LD_ADDR_VAR 0 6
30320: PUSH
30321: LD_EXP 90
30325: PPUSH
30326: LD_VAR 0 1
30330: PPUSH
30331: CALL 36249 0 2
30335: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30336: LD_ADDR_VAR 0 5
30340: PUSH
30341: DOUBLE
30342: LD_EXP 91
30346: PUSH
30347: LD_VAR 0 6
30351: ARRAY
30352: INC
30353: ST_TO_ADDR
30354: LD_INT 1
30356: PUSH
30357: FOR_DOWNTO
30358: IFFALSE 30519
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30360: LD_EXP 91
30364: PUSH
30365: LD_VAR 0 6
30369: ARRAY
30370: PUSH
30371: LD_VAR 0 5
30375: ARRAY
30376: PUSH
30377: LD_INT 1
30379: ARRAY
30380: PUSH
30381: LD_VAR 0 2
30385: EQUAL
30386: PUSH
30387: LD_EXP 91
30391: PUSH
30392: LD_VAR 0 6
30396: ARRAY
30397: PUSH
30398: LD_VAR 0 5
30402: ARRAY
30403: PUSH
30404: LD_INT 2
30406: ARRAY
30407: PUSH
30408: LD_VAR 0 3
30412: EQUAL
30413: AND
30414: IFFALSE 30517
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30416: LD_EXP 91
30420: PUSH
30421: LD_VAR 0 6
30425: ARRAY
30426: PUSH
30427: LD_VAR 0 5
30431: ARRAY
30432: PUSH
30433: LD_INT 1
30435: ARRAY
30436: PPUSH
30437: LD_EXP 91
30441: PUSH
30442: LD_VAR 0 6
30446: ARRAY
30447: PUSH
30448: LD_VAR 0 5
30452: ARRAY
30453: PUSH
30454: LD_INT 2
30456: ARRAY
30457: PPUSH
30458: LD_VAR 0 1
30462: PPUSH
30463: CALL_OW 255
30467: PPUSH
30468: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30472: LD_ADDR_EXP 91
30476: PUSH
30477: LD_EXP 91
30481: PPUSH
30482: LD_VAR 0 6
30486: PPUSH
30487: LD_EXP 91
30491: PUSH
30492: LD_VAR 0 6
30496: ARRAY
30497: PPUSH
30498: LD_VAR 0 5
30502: PPUSH
30503: CALL_OW 3
30507: PPUSH
30508: CALL_OW 1
30512: ST_TO_ADDR
// exit ;
30513: POP
30514: POP
30515: GO 30708
// end ; end ;
30517: GO 30357
30519: POP
30520: POP
// for i := minerMinesList [ index ] downto 1 do
30521: LD_ADDR_VAR 0 5
30525: PUSH
30526: DOUBLE
30527: LD_EXP 91
30531: PUSH
30532: LD_VAR 0 6
30536: ARRAY
30537: INC
30538: ST_TO_ADDR
30539: LD_INT 1
30541: PUSH
30542: FOR_DOWNTO
30543: IFFALSE 30706
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30545: LD_EXP 91
30549: PUSH
30550: LD_VAR 0 6
30554: ARRAY
30555: PUSH
30556: LD_VAR 0 5
30560: ARRAY
30561: PUSH
30562: LD_INT 1
30564: ARRAY
30565: PPUSH
30566: LD_EXP 91
30570: PUSH
30571: LD_VAR 0 6
30575: ARRAY
30576: PUSH
30577: LD_VAR 0 5
30581: ARRAY
30582: PUSH
30583: LD_INT 2
30585: ARRAY
30586: PPUSH
30587: LD_VAR 0 2
30591: PPUSH
30592: LD_VAR 0 3
30596: PPUSH
30597: CALL_OW 298
30601: PUSH
30602: LD_INT 6
30604: LESS
30605: IFFALSE 30704
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30607: LD_EXP 91
30611: PUSH
30612: LD_VAR 0 6
30616: ARRAY
30617: PUSH
30618: LD_VAR 0 5
30622: ARRAY
30623: PUSH
30624: LD_INT 1
30626: ARRAY
30627: PPUSH
30628: LD_EXP 91
30632: PUSH
30633: LD_VAR 0 6
30637: ARRAY
30638: PUSH
30639: LD_VAR 0 5
30643: ARRAY
30644: PUSH
30645: LD_INT 2
30647: ARRAY
30648: PPUSH
30649: LD_VAR 0 1
30653: PPUSH
30654: CALL_OW 255
30658: PPUSH
30659: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30663: LD_ADDR_EXP 91
30667: PUSH
30668: LD_EXP 91
30672: PPUSH
30673: LD_VAR 0 6
30677: PPUSH
30678: LD_EXP 91
30682: PUSH
30683: LD_VAR 0 6
30687: ARRAY
30688: PPUSH
30689: LD_VAR 0 5
30693: PPUSH
30694: CALL_OW 3
30698: PPUSH
30699: CALL_OW 1
30703: ST_TO_ADDR
// end ; end ;
30704: GO 30542
30706: POP
30707: POP
// end ;
30708: LD_VAR 0 4
30712: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30713: LD_INT 0
30715: PPUSH
30716: PPUSH
30717: PPUSH
30718: PPUSH
30719: PPUSH
30720: PPUSH
30721: PPUSH
30722: PPUSH
30723: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30724: LD_VAR 0 1
30728: PPUSH
30729: CALL_OW 264
30733: PUSH
30734: LD_INT 81
30736: EQUAL
30737: NOT
30738: PUSH
30739: LD_VAR 0 1
30743: PUSH
30744: LD_EXP 90
30748: IN
30749: NOT
30750: OR
30751: IFFALSE 30755
// exit ;
30753: GO 31077
// index := GetElementIndex ( minersList , unit ) ;
30755: LD_ADDR_VAR 0 6
30759: PUSH
30760: LD_EXP 90
30764: PPUSH
30765: LD_VAR 0 1
30769: PPUSH
30770: CALL 36249 0 2
30774: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30775: LD_ADDR_VAR 0 8
30779: PUSH
30780: LD_EXP 92
30784: PUSH
30785: LD_EXP 91
30789: PUSH
30790: LD_VAR 0 6
30794: ARRAY
30795: MINUS
30796: ST_TO_ADDR
// if not minesFreeAmount then
30797: LD_VAR 0 8
30801: NOT
30802: IFFALSE 30806
// exit ;
30804: GO 31077
// tmp := [ ] ;
30806: LD_ADDR_VAR 0 7
30810: PUSH
30811: EMPTY
30812: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30813: LD_ADDR_VAR 0 5
30817: PUSH
30818: DOUBLE
30819: LD_INT 1
30821: DEC
30822: ST_TO_ADDR
30823: LD_VAR 0 8
30827: PUSH
30828: FOR_TO
30829: IFFALSE 31024
// begin _d := rand ( 0 , 5 ) ;
30831: LD_ADDR_VAR 0 11
30835: PUSH
30836: LD_INT 0
30838: PPUSH
30839: LD_INT 5
30841: PPUSH
30842: CALL_OW 12
30846: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30847: LD_ADDR_VAR 0 12
30851: PUSH
30852: LD_INT 2
30854: PPUSH
30855: LD_INT 6
30857: PPUSH
30858: CALL_OW 12
30862: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30863: LD_ADDR_VAR 0 9
30867: PUSH
30868: LD_VAR 0 2
30872: PPUSH
30873: LD_VAR 0 11
30877: PPUSH
30878: LD_VAR 0 12
30882: PPUSH
30883: CALL_OW 272
30887: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30888: LD_ADDR_VAR 0 10
30892: PUSH
30893: LD_VAR 0 3
30897: PPUSH
30898: LD_VAR 0 11
30902: PPUSH
30903: LD_VAR 0 12
30907: PPUSH
30908: CALL_OW 273
30912: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30913: LD_VAR 0 9
30917: PPUSH
30918: LD_VAR 0 10
30922: PPUSH
30923: CALL_OW 488
30927: PUSH
30928: LD_VAR 0 9
30932: PUSH
30933: LD_VAR 0 10
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_VAR 0 7
30946: IN
30947: NOT
30948: AND
30949: PUSH
30950: LD_VAR 0 9
30954: PPUSH
30955: LD_VAR 0 10
30959: PPUSH
30960: CALL_OW 458
30964: NOT
30965: AND
30966: IFFALSE 31008
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30968: LD_ADDR_VAR 0 7
30972: PUSH
30973: LD_VAR 0 7
30977: PPUSH
30978: LD_VAR 0 7
30982: PUSH
30983: LD_INT 1
30985: PLUS
30986: PPUSH
30987: LD_VAR 0 9
30991: PUSH
30992: LD_VAR 0 10
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PPUSH
31001: CALL_OW 1
31005: ST_TO_ADDR
31006: GO 31022
// i := i - 1 ;
31008: LD_ADDR_VAR 0 5
31012: PUSH
31013: LD_VAR 0 5
31017: PUSH
31018: LD_INT 1
31020: MINUS
31021: ST_TO_ADDR
// end ;
31022: GO 30828
31024: POP
31025: POP
// for i in tmp do
31026: LD_ADDR_VAR 0 5
31030: PUSH
31031: LD_VAR 0 7
31035: PUSH
31036: FOR_IN
31037: IFFALSE 31075
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31039: LD_VAR 0 1
31043: PPUSH
31044: LD_VAR 0 5
31048: PUSH
31049: LD_INT 1
31051: ARRAY
31052: PPUSH
31053: LD_VAR 0 5
31057: PUSH
31058: LD_INT 2
31060: ARRAY
31061: PPUSH
31062: CALL 30021 0 3
31066: NOT
31067: IFFALSE 31073
// exit ;
31069: POP
31070: POP
31071: GO 31077
31073: GO 31036
31075: POP
31076: POP
// end ;
31077: LD_VAR 0 4
31081: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31082: LD_INT 0
31084: PPUSH
31085: PPUSH
31086: PPUSH
31087: PPUSH
31088: PPUSH
31089: PPUSH
31090: PPUSH
// if not GetClass ( unit ) = class_sniper then
31091: LD_VAR 0 1
31095: PPUSH
31096: CALL_OW 257
31100: PUSH
31101: LD_INT 5
31103: EQUAL
31104: NOT
31105: IFFALSE 31109
// exit ;
31107: GO 31497
// dist := 8 ;
31109: LD_ADDR_VAR 0 5
31113: PUSH
31114: LD_INT 8
31116: ST_TO_ADDR
// viewRange := 12 ;
31117: LD_ADDR_VAR 0 7
31121: PUSH
31122: LD_INT 12
31124: ST_TO_ADDR
// side := GetSide ( unit ) ;
31125: LD_ADDR_VAR 0 6
31129: PUSH
31130: LD_VAR 0 1
31134: PPUSH
31135: CALL_OW 255
31139: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31140: LD_INT 61
31142: PPUSH
31143: LD_VAR 0 6
31147: PPUSH
31148: CALL_OW 321
31152: PUSH
31153: LD_INT 2
31155: EQUAL
31156: IFFALSE 31166
// viewRange := 16 ;
31158: LD_ADDR_VAR 0 7
31162: PUSH
31163: LD_INT 16
31165: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31166: LD_VAR 0 1
31170: PPUSH
31171: LD_VAR 0 2
31175: PPUSH
31176: LD_VAR 0 3
31180: PPUSH
31181: CALL_OW 297
31185: PUSH
31186: LD_VAR 0 5
31190: GREATER
31191: IFFALSE 31270
// begin ComMoveXY ( unit , x , y ) ;
31193: LD_VAR 0 1
31197: PPUSH
31198: LD_VAR 0 2
31202: PPUSH
31203: LD_VAR 0 3
31207: PPUSH
31208: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31212: LD_INT 35
31214: PPUSH
31215: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31219: LD_VAR 0 1
31223: PPUSH
31224: LD_VAR 0 2
31228: PPUSH
31229: LD_VAR 0 3
31233: PPUSH
31234: CALL 67604 0 3
31238: NOT
31239: IFFALSE 31243
// exit ;
31241: GO 31497
// until GetDistUnitXY ( unit , x , y ) < dist ;
31243: LD_VAR 0 1
31247: PPUSH
31248: LD_VAR 0 2
31252: PPUSH
31253: LD_VAR 0 3
31257: PPUSH
31258: CALL_OW 297
31262: PUSH
31263: LD_VAR 0 5
31267: LESS
31268: IFFALSE 31212
// end ; ComTurnXY ( unit , x , y ) ;
31270: LD_VAR 0 1
31274: PPUSH
31275: LD_VAR 0 2
31279: PPUSH
31280: LD_VAR 0 3
31284: PPUSH
31285: CALL_OW 118
// wait ( 5 ) ;
31289: LD_INT 5
31291: PPUSH
31292: CALL_OW 67
// _d := GetDir ( unit ) ;
31296: LD_ADDR_VAR 0 10
31300: PUSH
31301: LD_VAR 0 1
31305: PPUSH
31306: CALL_OW 254
31310: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31311: LD_ADDR_VAR 0 8
31315: PUSH
31316: LD_VAR 0 1
31320: PPUSH
31321: CALL_OW 250
31325: PPUSH
31326: LD_VAR 0 10
31330: PPUSH
31331: LD_VAR 0 5
31335: PPUSH
31336: CALL_OW 272
31340: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31341: LD_ADDR_VAR 0 9
31345: PUSH
31346: LD_VAR 0 1
31350: PPUSH
31351: CALL_OW 251
31355: PPUSH
31356: LD_VAR 0 10
31360: PPUSH
31361: LD_VAR 0 5
31365: PPUSH
31366: CALL_OW 273
31370: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31371: LD_VAR 0 8
31375: PPUSH
31376: LD_VAR 0 9
31380: PPUSH
31381: CALL_OW 488
31385: NOT
31386: IFFALSE 31390
// exit ;
31388: GO 31497
// ComAnimCustom ( unit , 1 ) ;
31390: LD_VAR 0 1
31394: PPUSH
31395: LD_INT 1
31397: PPUSH
31398: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31402: LD_VAR 0 8
31406: PPUSH
31407: LD_VAR 0 9
31411: PPUSH
31412: LD_VAR 0 6
31416: PPUSH
31417: LD_VAR 0 7
31421: PPUSH
31422: CALL_OW 330
// repeat wait ( 1 ) ;
31426: LD_INT 1
31428: PPUSH
31429: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31433: LD_VAR 0 1
31437: PPUSH
31438: CALL_OW 316
31442: PUSH
31443: LD_VAR 0 1
31447: PPUSH
31448: CALL_OW 314
31452: OR
31453: PUSH
31454: LD_VAR 0 1
31458: PPUSH
31459: CALL_OW 302
31463: NOT
31464: OR
31465: PUSH
31466: LD_VAR 0 1
31470: PPUSH
31471: CALL_OW 301
31475: OR
31476: IFFALSE 31426
// RemoveSeeing ( _x , _y , side ) ;
31478: LD_VAR 0 8
31482: PPUSH
31483: LD_VAR 0 9
31487: PPUSH
31488: LD_VAR 0 6
31492: PPUSH
31493: CALL_OW 331
// end ; end_of_file
31497: LD_VAR 0 4
31501: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31502: LD_INT 0
31504: PPUSH
31505: PPUSH
// if exist_mode then
31506: LD_VAR 0 2
31510: IFFALSE 31535
// unit := CreateCharacter ( prefix & ident ) else
31512: LD_ADDR_VAR 0 5
31516: PUSH
31517: LD_VAR 0 3
31521: PUSH
31522: LD_VAR 0 1
31526: STR
31527: PPUSH
31528: CALL_OW 34
31532: ST_TO_ADDR
31533: GO 31550
// unit := NewCharacter ( ident ) ;
31535: LD_ADDR_VAR 0 5
31539: PUSH
31540: LD_VAR 0 1
31544: PPUSH
31545: CALL_OW 25
31549: ST_TO_ADDR
// result := unit ;
31550: LD_ADDR_VAR 0 4
31554: PUSH
31555: LD_VAR 0 5
31559: ST_TO_ADDR
// end ;
31560: LD_VAR 0 4
31564: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31565: LD_INT 0
31567: PPUSH
31568: PPUSH
// if not side or not nation then
31569: LD_VAR 0 1
31573: NOT
31574: PUSH
31575: LD_VAR 0 2
31579: NOT
31580: OR
31581: IFFALSE 31585
// exit ;
31583: GO 32353
// case nation of nation_american :
31585: LD_VAR 0 2
31589: PUSH
31590: LD_INT 1
31592: DOUBLE
31593: EQUAL
31594: IFTRUE 31598
31596: GO 31812
31598: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31599: LD_ADDR_VAR 0 4
31603: PUSH
31604: LD_INT 35
31606: PUSH
31607: LD_INT 45
31609: PUSH
31610: LD_INT 46
31612: PUSH
31613: LD_INT 47
31615: PUSH
31616: LD_INT 82
31618: PUSH
31619: LD_INT 83
31621: PUSH
31622: LD_INT 84
31624: PUSH
31625: LD_INT 85
31627: PUSH
31628: LD_INT 86
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: LD_INT 6
31639: PUSH
31640: LD_INT 15
31642: PUSH
31643: LD_INT 16
31645: PUSH
31646: LD_INT 7
31648: PUSH
31649: LD_INT 12
31651: PUSH
31652: LD_INT 13
31654: PUSH
31655: LD_INT 10
31657: PUSH
31658: LD_INT 14
31660: PUSH
31661: LD_INT 20
31663: PUSH
31664: LD_INT 21
31666: PUSH
31667: LD_INT 22
31669: PUSH
31670: LD_INT 25
31672: PUSH
31673: LD_INT 32
31675: PUSH
31676: LD_INT 27
31678: PUSH
31679: LD_INT 36
31681: PUSH
31682: LD_INT 69
31684: PUSH
31685: LD_INT 39
31687: PUSH
31688: LD_INT 34
31690: PUSH
31691: LD_INT 40
31693: PUSH
31694: LD_INT 48
31696: PUSH
31697: LD_INT 49
31699: PUSH
31700: LD_INT 50
31702: PUSH
31703: LD_INT 51
31705: PUSH
31706: LD_INT 52
31708: PUSH
31709: LD_INT 53
31711: PUSH
31712: LD_INT 54
31714: PUSH
31715: LD_INT 55
31717: PUSH
31718: LD_INT 56
31720: PUSH
31721: LD_INT 57
31723: PUSH
31724: LD_INT 58
31726: PUSH
31727: LD_INT 59
31729: PUSH
31730: LD_INT 60
31732: PUSH
31733: LD_INT 61
31735: PUSH
31736: LD_INT 62
31738: PUSH
31739: LD_INT 80
31741: PUSH
31742: LD_INT 82
31744: PUSH
31745: LD_INT 83
31747: PUSH
31748: LD_INT 84
31750: PUSH
31751: LD_INT 85
31753: PUSH
31754: LD_INT 86
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: ST_TO_ADDR
31810: GO 32277
31812: LD_INT 2
31814: DOUBLE
31815: EQUAL
31816: IFTRUE 31820
31818: GO 32046
31820: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31821: LD_ADDR_VAR 0 4
31825: PUSH
31826: LD_INT 35
31828: PUSH
31829: LD_INT 45
31831: PUSH
31832: LD_INT 46
31834: PUSH
31835: LD_INT 47
31837: PUSH
31838: LD_INT 82
31840: PUSH
31841: LD_INT 83
31843: PUSH
31844: LD_INT 84
31846: PUSH
31847: LD_INT 85
31849: PUSH
31850: LD_INT 87
31852: PUSH
31853: LD_INT 70
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: LD_INT 11
31861: PUSH
31862: LD_INT 3
31864: PUSH
31865: LD_INT 4
31867: PUSH
31868: LD_INT 5
31870: PUSH
31871: LD_INT 6
31873: PUSH
31874: LD_INT 15
31876: PUSH
31877: LD_INT 18
31879: PUSH
31880: LD_INT 7
31882: PUSH
31883: LD_INT 17
31885: PUSH
31886: LD_INT 8
31888: PUSH
31889: LD_INT 20
31891: PUSH
31892: LD_INT 21
31894: PUSH
31895: LD_INT 22
31897: PUSH
31898: LD_INT 72
31900: PUSH
31901: LD_INT 26
31903: PUSH
31904: LD_INT 69
31906: PUSH
31907: LD_INT 39
31909: PUSH
31910: LD_INT 40
31912: PUSH
31913: LD_INT 41
31915: PUSH
31916: LD_INT 42
31918: PUSH
31919: LD_INT 43
31921: PUSH
31922: LD_INT 48
31924: PUSH
31925: LD_INT 49
31927: PUSH
31928: LD_INT 50
31930: PUSH
31931: LD_INT 51
31933: PUSH
31934: LD_INT 52
31936: PUSH
31937: LD_INT 53
31939: PUSH
31940: LD_INT 54
31942: PUSH
31943: LD_INT 55
31945: PUSH
31946: LD_INT 56
31948: PUSH
31949: LD_INT 60
31951: PUSH
31952: LD_INT 61
31954: PUSH
31955: LD_INT 62
31957: PUSH
31958: LD_INT 66
31960: PUSH
31961: LD_INT 67
31963: PUSH
31964: LD_INT 68
31966: PUSH
31967: LD_INT 81
31969: PUSH
31970: LD_INT 82
31972: PUSH
31973: LD_INT 83
31975: PUSH
31976: LD_INT 84
31978: PUSH
31979: LD_INT 85
31981: PUSH
31982: LD_INT 87
31984: PUSH
31985: LD_INT 88
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: ST_TO_ADDR
32044: GO 32277
32046: LD_INT 3
32048: DOUBLE
32049: EQUAL
32050: IFTRUE 32054
32052: GO 32276
32054: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32055: LD_ADDR_VAR 0 4
32059: PUSH
32060: LD_INT 46
32062: PUSH
32063: LD_INT 47
32065: PUSH
32066: LD_INT 1
32068: PUSH
32069: LD_INT 2
32071: PUSH
32072: LD_INT 82
32074: PUSH
32075: LD_INT 83
32077: PUSH
32078: LD_INT 84
32080: PUSH
32081: LD_INT 85
32083: PUSH
32084: LD_INT 86
32086: PUSH
32087: LD_INT 11
32089: PUSH
32090: LD_INT 9
32092: PUSH
32093: LD_INT 20
32095: PUSH
32096: LD_INT 19
32098: PUSH
32099: LD_INT 21
32101: PUSH
32102: LD_INT 24
32104: PUSH
32105: LD_INT 22
32107: PUSH
32108: LD_INT 25
32110: PUSH
32111: LD_INT 28
32113: PUSH
32114: LD_INT 29
32116: PUSH
32117: LD_INT 30
32119: PUSH
32120: LD_INT 31
32122: PUSH
32123: LD_INT 37
32125: PUSH
32126: LD_INT 38
32128: PUSH
32129: LD_INT 32
32131: PUSH
32132: LD_INT 27
32134: PUSH
32135: LD_INT 33
32137: PUSH
32138: LD_INT 69
32140: PUSH
32141: LD_INT 39
32143: PUSH
32144: LD_INT 34
32146: PUSH
32147: LD_INT 40
32149: PUSH
32150: LD_INT 71
32152: PUSH
32153: LD_INT 23
32155: PUSH
32156: LD_INT 44
32158: PUSH
32159: LD_INT 48
32161: PUSH
32162: LD_INT 49
32164: PUSH
32165: LD_INT 50
32167: PUSH
32168: LD_INT 51
32170: PUSH
32171: LD_INT 52
32173: PUSH
32174: LD_INT 53
32176: PUSH
32177: LD_INT 54
32179: PUSH
32180: LD_INT 55
32182: PUSH
32183: LD_INT 56
32185: PUSH
32186: LD_INT 57
32188: PUSH
32189: LD_INT 58
32191: PUSH
32192: LD_INT 59
32194: PUSH
32195: LD_INT 63
32197: PUSH
32198: LD_INT 64
32200: PUSH
32201: LD_INT 65
32203: PUSH
32204: LD_INT 82
32206: PUSH
32207: LD_INT 83
32209: PUSH
32210: LD_INT 84
32212: PUSH
32213: LD_INT 85
32215: PUSH
32216: LD_INT 86
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: ST_TO_ADDR
32274: GO 32277
32276: POP
// if state > - 1 and state < 3 then
32277: LD_VAR 0 3
32281: PUSH
32282: LD_INT 1
32284: NEG
32285: GREATER
32286: PUSH
32287: LD_VAR 0 3
32291: PUSH
32292: LD_INT 3
32294: LESS
32295: AND
32296: IFFALSE 32353
// for i in result do
32298: LD_ADDR_VAR 0 5
32302: PUSH
32303: LD_VAR 0 4
32307: PUSH
32308: FOR_IN
32309: IFFALSE 32351
// if GetTech ( i , side ) <> state then
32311: LD_VAR 0 5
32315: PPUSH
32316: LD_VAR 0 1
32320: PPUSH
32321: CALL_OW 321
32325: PUSH
32326: LD_VAR 0 3
32330: NONEQUAL
32331: IFFALSE 32349
// result := result diff i ;
32333: LD_ADDR_VAR 0 4
32337: PUSH
32338: LD_VAR 0 4
32342: PUSH
32343: LD_VAR 0 5
32347: DIFF
32348: ST_TO_ADDR
32349: GO 32308
32351: POP
32352: POP
// end ;
32353: LD_VAR 0 4
32357: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32358: LD_INT 0
32360: PPUSH
32361: PPUSH
32362: PPUSH
// result := true ;
32363: LD_ADDR_VAR 0 3
32367: PUSH
32368: LD_INT 1
32370: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32371: LD_ADDR_VAR 0 5
32375: PUSH
32376: LD_VAR 0 2
32380: PPUSH
32381: CALL_OW 480
32385: ST_TO_ADDR
// if not tmp then
32386: LD_VAR 0 5
32390: NOT
32391: IFFALSE 32395
// exit ;
32393: GO 32444
// for i in tmp do
32395: LD_ADDR_VAR 0 4
32399: PUSH
32400: LD_VAR 0 5
32404: PUSH
32405: FOR_IN
32406: IFFALSE 32442
// if GetTech ( i , side ) <> state_researched then
32408: LD_VAR 0 4
32412: PPUSH
32413: LD_VAR 0 1
32417: PPUSH
32418: CALL_OW 321
32422: PUSH
32423: LD_INT 2
32425: NONEQUAL
32426: IFFALSE 32440
// begin result := false ;
32428: LD_ADDR_VAR 0 3
32432: PUSH
32433: LD_INT 0
32435: ST_TO_ADDR
// exit ;
32436: POP
32437: POP
32438: GO 32444
// end ;
32440: GO 32405
32442: POP
32443: POP
// end ;
32444: LD_VAR 0 3
32448: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32449: LD_INT 0
32451: PPUSH
32452: PPUSH
32453: PPUSH
32454: PPUSH
32455: PPUSH
32456: PPUSH
32457: PPUSH
32458: PPUSH
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
32463: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32464: LD_VAR 0 1
32468: NOT
32469: PUSH
32470: LD_VAR 0 1
32474: PPUSH
32475: CALL_OW 257
32479: PUSH
32480: LD_INT 9
32482: NONEQUAL
32483: OR
32484: IFFALSE 32488
// exit ;
32486: GO 33061
// side := GetSide ( unit ) ;
32488: LD_ADDR_VAR 0 9
32492: PUSH
32493: LD_VAR 0 1
32497: PPUSH
32498: CALL_OW 255
32502: ST_TO_ADDR
// tech_space := tech_spacanom ;
32503: LD_ADDR_VAR 0 12
32507: PUSH
32508: LD_INT 29
32510: ST_TO_ADDR
// tech_time := tech_taurad ;
32511: LD_ADDR_VAR 0 13
32515: PUSH
32516: LD_INT 28
32518: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32519: LD_ADDR_VAR 0 11
32523: PUSH
32524: LD_VAR 0 1
32528: PPUSH
32529: CALL_OW 310
32533: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32534: LD_VAR 0 11
32538: PPUSH
32539: CALL_OW 247
32543: PUSH
32544: LD_INT 2
32546: EQUAL
32547: IFFALSE 32551
// exit ;
32549: GO 33061
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32551: LD_ADDR_VAR 0 8
32555: PUSH
32556: LD_INT 81
32558: PUSH
32559: LD_VAR 0 9
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 3
32570: PUSH
32571: LD_INT 21
32573: PUSH
32574: LD_INT 3
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PPUSH
32589: CALL_OW 69
32593: ST_TO_ADDR
// if not tmp then
32594: LD_VAR 0 8
32598: NOT
32599: IFFALSE 32603
// exit ;
32601: GO 33061
// if in_unit then
32603: LD_VAR 0 11
32607: IFFALSE 32631
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32609: LD_ADDR_VAR 0 10
32613: PUSH
32614: LD_VAR 0 8
32618: PPUSH
32619: LD_VAR 0 11
32623: PPUSH
32624: CALL_OW 74
32628: ST_TO_ADDR
32629: GO 32651
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32631: LD_ADDR_VAR 0 10
32635: PUSH
32636: LD_VAR 0 8
32640: PPUSH
32641: LD_VAR 0 1
32645: PPUSH
32646: CALL_OW 74
32650: ST_TO_ADDR
// if not enemy then
32651: LD_VAR 0 10
32655: NOT
32656: IFFALSE 32660
// exit ;
32658: GO 33061
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32660: LD_VAR 0 11
32664: PUSH
32665: LD_VAR 0 11
32669: PPUSH
32670: LD_VAR 0 10
32674: PPUSH
32675: CALL_OW 296
32679: PUSH
32680: LD_INT 13
32682: GREATER
32683: AND
32684: PUSH
32685: LD_VAR 0 1
32689: PPUSH
32690: LD_VAR 0 10
32694: PPUSH
32695: CALL_OW 296
32699: PUSH
32700: LD_INT 12
32702: GREATER
32703: OR
32704: IFFALSE 32708
// exit ;
32706: GO 33061
// missile := [ 1 ] ;
32708: LD_ADDR_VAR 0 14
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: EMPTY
32717: LIST
32718: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32719: LD_VAR 0 9
32723: PPUSH
32724: LD_VAR 0 12
32728: PPUSH
32729: CALL_OW 325
32733: IFFALSE 32762
// missile := Replace ( missile , missile + 1 , 2 ) ;
32735: LD_ADDR_VAR 0 14
32739: PUSH
32740: LD_VAR 0 14
32744: PPUSH
32745: LD_VAR 0 14
32749: PUSH
32750: LD_INT 1
32752: PLUS
32753: PPUSH
32754: LD_INT 2
32756: PPUSH
32757: CALL_OW 1
32761: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32762: LD_VAR 0 9
32766: PPUSH
32767: LD_VAR 0 13
32771: PPUSH
32772: CALL_OW 325
32776: PUSH
32777: LD_VAR 0 10
32781: PPUSH
32782: CALL_OW 255
32786: PPUSH
32787: LD_VAR 0 13
32791: PPUSH
32792: CALL_OW 325
32796: NOT
32797: AND
32798: IFFALSE 32827
// missile := Replace ( missile , missile + 1 , 3 ) ;
32800: LD_ADDR_VAR 0 14
32804: PUSH
32805: LD_VAR 0 14
32809: PPUSH
32810: LD_VAR 0 14
32814: PUSH
32815: LD_INT 1
32817: PLUS
32818: PPUSH
32819: LD_INT 3
32821: PPUSH
32822: CALL_OW 1
32826: ST_TO_ADDR
// if missile < 2 then
32827: LD_VAR 0 14
32831: PUSH
32832: LD_INT 2
32834: LESS
32835: IFFALSE 32839
// exit ;
32837: GO 33061
// x := GetX ( enemy ) ;
32839: LD_ADDR_VAR 0 4
32843: PUSH
32844: LD_VAR 0 10
32848: PPUSH
32849: CALL_OW 250
32853: ST_TO_ADDR
// y := GetY ( enemy ) ;
32854: LD_ADDR_VAR 0 5
32858: PUSH
32859: LD_VAR 0 10
32863: PPUSH
32864: CALL_OW 251
32868: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32869: LD_ADDR_VAR 0 6
32873: PUSH
32874: LD_VAR 0 4
32878: PUSH
32879: LD_INT 1
32881: NEG
32882: PPUSH
32883: LD_INT 1
32885: PPUSH
32886: CALL_OW 12
32890: PLUS
32891: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32892: LD_ADDR_VAR 0 7
32896: PUSH
32897: LD_VAR 0 5
32901: PUSH
32902: LD_INT 1
32904: NEG
32905: PPUSH
32906: LD_INT 1
32908: PPUSH
32909: CALL_OW 12
32913: PLUS
32914: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32915: LD_VAR 0 6
32919: PPUSH
32920: LD_VAR 0 7
32924: PPUSH
32925: CALL_OW 488
32929: NOT
32930: IFFALSE 32952
// begin _x := x ;
32932: LD_ADDR_VAR 0 6
32936: PUSH
32937: LD_VAR 0 4
32941: ST_TO_ADDR
// _y := y ;
32942: LD_ADDR_VAR 0 7
32946: PUSH
32947: LD_VAR 0 5
32951: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32952: LD_ADDR_VAR 0 3
32956: PUSH
32957: LD_INT 1
32959: PPUSH
32960: LD_VAR 0 14
32964: PPUSH
32965: CALL_OW 12
32969: ST_TO_ADDR
// case i of 1 :
32970: LD_VAR 0 3
32974: PUSH
32975: LD_INT 1
32977: DOUBLE
32978: EQUAL
32979: IFTRUE 32983
32981: GO 33000
32983: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32984: LD_VAR 0 1
32988: PPUSH
32989: LD_VAR 0 10
32993: PPUSH
32994: CALL_OW 115
32998: GO 33061
33000: LD_INT 2
33002: DOUBLE
33003: EQUAL
33004: IFTRUE 33008
33006: GO 33030
33008: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33009: LD_VAR 0 1
33013: PPUSH
33014: LD_VAR 0 6
33018: PPUSH
33019: LD_VAR 0 7
33023: PPUSH
33024: CALL_OW 153
33028: GO 33061
33030: LD_INT 3
33032: DOUBLE
33033: EQUAL
33034: IFTRUE 33038
33036: GO 33060
33038: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33039: LD_VAR 0 1
33043: PPUSH
33044: LD_VAR 0 6
33048: PPUSH
33049: LD_VAR 0 7
33053: PPUSH
33054: CALL_OW 154
33058: GO 33061
33060: POP
// end ;
33061: LD_VAR 0 2
33065: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33066: LD_INT 0
33068: PPUSH
33069: PPUSH
33070: PPUSH
33071: PPUSH
33072: PPUSH
33073: PPUSH
// if not unit or not building then
33074: LD_VAR 0 1
33078: NOT
33079: PUSH
33080: LD_VAR 0 2
33084: NOT
33085: OR
33086: IFFALSE 33090
// exit ;
33088: GO 33248
// x := GetX ( building ) ;
33090: LD_ADDR_VAR 0 5
33094: PUSH
33095: LD_VAR 0 2
33099: PPUSH
33100: CALL_OW 250
33104: ST_TO_ADDR
// y := GetY ( building ) ;
33105: LD_ADDR_VAR 0 6
33109: PUSH
33110: LD_VAR 0 2
33114: PPUSH
33115: CALL_OW 251
33119: ST_TO_ADDR
// for i = 0 to 5 do
33120: LD_ADDR_VAR 0 4
33124: PUSH
33125: DOUBLE
33126: LD_INT 0
33128: DEC
33129: ST_TO_ADDR
33130: LD_INT 5
33132: PUSH
33133: FOR_TO
33134: IFFALSE 33246
// begin _x := ShiftX ( x , i , 3 ) ;
33136: LD_ADDR_VAR 0 7
33140: PUSH
33141: LD_VAR 0 5
33145: PPUSH
33146: LD_VAR 0 4
33150: PPUSH
33151: LD_INT 3
33153: PPUSH
33154: CALL_OW 272
33158: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33159: LD_ADDR_VAR 0 8
33163: PUSH
33164: LD_VAR 0 6
33168: PPUSH
33169: LD_VAR 0 4
33173: PPUSH
33174: LD_INT 3
33176: PPUSH
33177: CALL_OW 273
33181: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33182: LD_VAR 0 7
33186: PPUSH
33187: LD_VAR 0 8
33191: PPUSH
33192: CALL_OW 488
33196: NOT
33197: IFFALSE 33201
// continue ;
33199: GO 33133
// if HexInfo ( _x , _y ) = 0 then
33201: LD_VAR 0 7
33205: PPUSH
33206: LD_VAR 0 8
33210: PPUSH
33211: CALL_OW 428
33215: PUSH
33216: LD_INT 0
33218: EQUAL
33219: IFFALSE 33244
// begin ComMoveXY ( unit , _x , _y ) ;
33221: LD_VAR 0 1
33225: PPUSH
33226: LD_VAR 0 7
33230: PPUSH
33231: LD_VAR 0 8
33235: PPUSH
33236: CALL_OW 111
// exit ;
33240: POP
33241: POP
33242: GO 33248
// end ; end ;
33244: GO 33133
33246: POP
33247: POP
// end ;
33248: LD_VAR 0 3
33252: RET
// export function ScanBase ( side , base_area ) ; begin
33253: LD_INT 0
33255: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33256: LD_ADDR_VAR 0 3
33260: PUSH
33261: LD_VAR 0 2
33265: PPUSH
33266: LD_INT 81
33268: PUSH
33269: LD_VAR 0 1
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PPUSH
33278: CALL_OW 70
33282: ST_TO_ADDR
// end ;
33283: LD_VAR 0 3
33287: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33288: LD_INT 0
33290: PPUSH
33291: PPUSH
33292: PPUSH
33293: PPUSH
// result := false ;
33294: LD_ADDR_VAR 0 2
33298: PUSH
33299: LD_INT 0
33301: ST_TO_ADDR
// side := GetSide ( unit ) ;
33302: LD_ADDR_VAR 0 3
33306: PUSH
33307: LD_VAR 0 1
33311: PPUSH
33312: CALL_OW 255
33316: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33317: LD_ADDR_VAR 0 4
33321: PUSH
33322: LD_VAR 0 1
33326: PPUSH
33327: CALL_OW 248
33331: ST_TO_ADDR
// case nat of 1 :
33332: LD_VAR 0 4
33336: PUSH
33337: LD_INT 1
33339: DOUBLE
33340: EQUAL
33341: IFTRUE 33345
33343: GO 33356
33345: POP
// tech := tech_lassight ; 2 :
33346: LD_ADDR_VAR 0 5
33350: PUSH
33351: LD_INT 12
33353: ST_TO_ADDR
33354: GO 33395
33356: LD_INT 2
33358: DOUBLE
33359: EQUAL
33360: IFTRUE 33364
33362: GO 33375
33364: POP
// tech := tech_mortar ; 3 :
33365: LD_ADDR_VAR 0 5
33369: PUSH
33370: LD_INT 41
33372: ST_TO_ADDR
33373: GO 33395
33375: LD_INT 3
33377: DOUBLE
33378: EQUAL
33379: IFTRUE 33383
33381: GO 33394
33383: POP
// tech := tech_bazooka ; end ;
33384: LD_ADDR_VAR 0 5
33388: PUSH
33389: LD_INT 44
33391: ST_TO_ADDR
33392: GO 33395
33394: POP
// if Researched ( side , tech ) then
33395: LD_VAR 0 3
33399: PPUSH
33400: LD_VAR 0 5
33404: PPUSH
33405: CALL_OW 325
33409: IFFALSE 33436
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33411: LD_ADDR_VAR 0 2
33415: PUSH
33416: LD_INT 5
33418: PUSH
33419: LD_INT 8
33421: PUSH
33422: LD_INT 9
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: LIST
33429: PUSH
33430: LD_VAR 0 4
33434: ARRAY
33435: ST_TO_ADDR
// end ;
33436: LD_VAR 0 2
33440: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33441: LD_INT 0
33443: PPUSH
33444: PPUSH
33445: PPUSH
// if not mines then
33446: LD_VAR 0 2
33450: NOT
33451: IFFALSE 33455
// exit ;
33453: GO 33599
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33455: LD_ADDR_VAR 0 5
33459: PUSH
33460: LD_INT 81
33462: PUSH
33463: LD_VAR 0 1
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 3
33474: PUSH
33475: LD_INT 21
33477: PUSH
33478: LD_INT 3
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PPUSH
33493: CALL_OW 69
33497: ST_TO_ADDR
// for i in mines do
33498: LD_ADDR_VAR 0 4
33502: PUSH
33503: LD_VAR 0 2
33507: PUSH
33508: FOR_IN
33509: IFFALSE 33597
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33511: LD_VAR 0 4
33515: PUSH
33516: LD_INT 1
33518: ARRAY
33519: PPUSH
33520: LD_VAR 0 4
33524: PUSH
33525: LD_INT 2
33527: ARRAY
33528: PPUSH
33529: CALL_OW 458
33533: NOT
33534: IFFALSE 33538
// continue ;
33536: GO 33508
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33538: LD_VAR 0 4
33542: PUSH
33543: LD_INT 1
33545: ARRAY
33546: PPUSH
33547: LD_VAR 0 4
33551: PUSH
33552: LD_INT 2
33554: ARRAY
33555: PPUSH
33556: CALL_OW 428
33560: PUSH
33561: LD_VAR 0 5
33565: IN
33566: IFFALSE 33595
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33568: LD_VAR 0 4
33572: PUSH
33573: LD_INT 1
33575: ARRAY
33576: PPUSH
33577: LD_VAR 0 4
33581: PUSH
33582: LD_INT 2
33584: ARRAY
33585: PPUSH
33586: LD_VAR 0 1
33590: PPUSH
33591: CALL_OW 456
// end ;
33595: GO 33508
33597: POP
33598: POP
// end ;
33599: LD_VAR 0 3
33603: RET
// export function Count ( array ) ; begin
33604: LD_INT 0
33606: PPUSH
// result := array + 0 ;
33607: LD_ADDR_VAR 0 2
33611: PUSH
33612: LD_VAR 0 1
33616: PUSH
33617: LD_INT 0
33619: PLUS
33620: ST_TO_ADDR
// end ;
33621: LD_VAR 0 2
33625: RET
// export function IsEmpty ( building ) ; begin
33626: LD_INT 0
33628: PPUSH
// if not building then
33629: LD_VAR 0 1
33633: NOT
33634: IFFALSE 33638
// exit ;
33636: GO 33681
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33638: LD_ADDR_VAR 0 2
33642: PUSH
33643: LD_VAR 0 1
33647: PUSH
33648: LD_INT 22
33650: PUSH
33651: LD_VAR 0 1
33655: PPUSH
33656: CALL_OW 255
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 58
33667: PUSH
33668: EMPTY
33669: LIST
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PPUSH
33675: CALL_OW 69
33679: IN
33680: ST_TO_ADDR
// end ;
33681: LD_VAR 0 2
33685: RET
// export function IsNotFull ( building ) ; var places ; begin
33686: LD_INT 0
33688: PPUSH
33689: PPUSH
// if not building then
33690: LD_VAR 0 1
33694: NOT
33695: IFFALSE 33699
// exit ;
33697: GO 33727
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33699: LD_ADDR_VAR 0 2
33703: PUSH
33704: LD_VAR 0 1
33708: PPUSH
33709: LD_INT 3
33711: PUSH
33712: LD_INT 62
33714: PUSH
33715: EMPTY
33716: LIST
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PPUSH
33722: CALL_OW 72
33726: ST_TO_ADDR
// end ;
33727: LD_VAR 0 2
33731: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33732: LD_INT 0
33734: PPUSH
33735: PPUSH
33736: PPUSH
33737: PPUSH
// tmp := [ ] ;
33738: LD_ADDR_VAR 0 3
33742: PUSH
33743: EMPTY
33744: ST_TO_ADDR
// list := [ ] ;
33745: LD_ADDR_VAR 0 5
33749: PUSH
33750: EMPTY
33751: ST_TO_ADDR
// for i = 16 to 25 do
33752: LD_ADDR_VAR 0 4
33756: PUSH
33757: DOUBLE
33758: LD_INT 16
33760: DEC
33761: ST_TO_ADDR
33762: LD_INT 25
33764: PUSH
33765: FOR_TO
33766: IFFALSE 33839
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33768: LD_ADDR_VAR 0 3
33772: PUSH
33773: LD_VAR 0 3
33777: PUSH
33778: LD_INT 22
33780: PUSH
33781: LD_VAR 0 1
33785: PPUSH
33786: CALL_OW 255
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 91
33797: PUSH
33798: LD_VAR 0 1
33802: PUSH
33803: LD_INT 6
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 30
33813: PUSH
33814: LD_VAR 0 4
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: LIST
33827: PUSH
33828: EMPTY
33829: LIST
33830: PPUSH
33831: CALL_OW 69
33835: ADD
33836: ST_TO_ADDR
33837: GO 33765
33839: POP
33840: POP
// for i = 1 to tmp do
33841: LD_ADDR_VAR 0 4
33845: PUSH
33846: DOUBLE
33847: LD_INT 1
33849: DEC
33850: ST_TO_ADDR
33851: LD_VAR 0 3
33855: PUSH
33856: FOR_TO
33857: IFFALSE 33945
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33859: LD_ADDR_VAR 0 5
33863: PUSH
33864: LD_VAR 0 5
33868: PUSH
33869: LD_VAR 0 3
33873: PUSH
33874: LD_VAR 0 4
33878: ARRAY
33879: PPUSH
33880: CALL_OW 266
33884: PUSH
33885: LD_VAR 0 3
33889: PUSH
33890: LD_VAR 0 4
33894: ARRAY
33895: PPUSH
33896: CALL_OW 250
33900: PUSH
33901: LD_VAR 0 3
33905: PUSH
33906: LD_VAR 0 4
33910: ARRAY
33911: PPUSH
33912: CALL_OW 251
33916: PUSH
33917: LD_VAR 0 3
33921: PUSH
33922: LD_VAR 0 4
33926: ARRAY
33927: PPUSH
33928: CALL_OW 254
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: PUSH
33939: EMPTY
33940: LIST
33941: ADD
33942: ST_TO_ADDR
33943: GO 33856
33945: POP
33946: POP
// result := list ;
33947: LD_ADDR_VAR 0 2
33951: PUSH
33952: LD_VAR 0 5
33956: ST_TO_ADDR
// end ;
33957: LD_VAR 0 2
33961: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33962: LD_INT 0
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
33970: PPUSH
// if not factory then
33971: LD_VAR 0 1
33975: NOT
33976: IFFALSE 33980
// exit ;
33978: GO 34573
// if control = control_apeman then
33980: LD_VAR 0 4
33984: PUSH
33985: LD_INT 5
33987: EQUAL
33988: IFFALSE 34097
// begin tmp := UnitsInside ( factory ) ;
33990: LD_ADDR_VAR 0 8
33994: PUSH
33995: LD_VAR 0 1
33999: PPUSH
34000: CALL_OW 313
34004: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34005: LD_VAR 0 8
34009: PPUSH
34010: LD_INT 25
34012: PUSH
34013: LD_INT 12
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PPUSH
34020: CALL_OW 72
34024: NOT
34025: IFFALSE 34035
// control := control_manual ;
34027: LD_ADDR_VAR 0 4
34031: PUSH
34032: LD_INT 1
34034: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34035: LD_ADDR_VAR 0 8
34039: PUSH
34040: LD_VAR 0 1
34044: PPUSH
34045: CALL 33732 0 1
34049: ST_TO_ADDR
// if tmp then
34050: LD_VAR 0 8
34054: IFFALSE 34097
// begin for i in tmp do
34056: LD_ADDR_VAR 0 7
34060: PUSH
34061: LD_VAR 0 8
34065: PUSH
34066: FOR_IN
34067: IFFALSE 34095
// if i [ 1 ] = b_ext_radio then
34069: LD_VAR 0 7
34073: PUSH
34074: LD_INT 1
34076: ARRAY
34077: PUSH
34078: LD_INT 22
34080: EQUAL
34081: IFFALSE 34093
// begin control := control_remote ;
34083: LD_ADDR_VAR 0 4
34087: PUSH
34088: LD_INT 2
34090: ST_TO_ADDR
// break ;
34091: GO 34095
// end ;
34093: GO 34066
34095: POP
34096: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34097: LD_VAR 0 1
34101: PPUSH
34102: LD_VAR 0 2
34106: PPUSH
34107: LD_VAR 0 3
34111: PPUSH
34112: LD_VAR 0 4
34116: PPUSH
34117: LD_VAR 0 5
34121: PPUSH
34122: CALL_OW 448
34126: IFFALSE 34161
// begin result := [ chassis , engine , control , weapon ] ;
34128: LD_ADDR_VAR 0 6
34132: PUSH
34133: LD_VAR 0 2
34137: PUSH
34138: LD_VAR 0 3
34142: PUSH
34143: LD_VAR 0 4
34147: PUSH
34148: LD_VAR 0 5
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: ST_TO_ADDR
// exit ;
34159: GO 34573
// end ; _chassis := AvailableChassisList ( factory ) ;
34161: LD_ADDR_VAR 0 9
34165: PUSH
34166: LD_VAR 0 1
34170: PPUSH
34171: CALL_OW 475
34175: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34176: LD_ADDR_VAR 0 11
34180: PUSH
34181: LD_VAR 0 1
34185: PPUSH
34186: CALL_OW 476
34190: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34191: LD_ADDR_VAR 0 12
34195: PUSH
34196: LD_VAR 0 1
34200: PPUSH
34201: CALL_OW 477
34205: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34206: LD_ADDR_VAR 0 10
34210: PUSH
34211: LD_VAR 0 1
34215: PPUSH
34216: CALL_OW 478
34220: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34221: LD_VAR 0 9
34225: NOT
34226: PUSH
34227: LD_VAR 0 11
34231: NOT
34232: OR
34233: PUSH
34234: LD_VAR 0 12
34238: NOT
34239: OR
34240: PUSH
34241: LD_VAR 0 10
34245: NOT
34246: OR
34247: IFFALSE 34282
// begin result := [ chassis , engine , control , weapon ] ;
34249: LD_ADDR_VAR 0 6
34253: PUSH
34254: LD_VAR 0 2
34258: PUSH
34259: LD_VAR 0 3
34263: PUSH
34264: LD_VAR 0 4
34268: PUSH
34269: LD_VAR 0 5
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: ST_TO_ADDR
// exit ;
34280: GO 34573
// end ; if not chassis in _chassis then
34282: LD_VAR 0 2
34286: PUSH
34287: LD_VAR 0 9
34291: IN
34292: NOT
34293: IFFALSE 34319
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34295: LD_ADDR_VAR 0 2
34299: PUSH
34300: LD_VAR 0 9
34304: PUSH
34305: LD_INT 1
34307: PPUSH
34308: LD_VAR 0 9
34312: PPUSH
34313: CALL_OW 12
34317: ARRAY
34318: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34319: LD_VAR 0 2
34323: PPUSH
34324: LD_VAR 0 3
34328: PPUSH
34329: CALL 34578 0 2
34333: NOT
34334: IFFALSE 34393
// repeat engine := _engine [ 1 ] ;
34336: LD_ADDR_VAR 0 3
34340: PUSH
34341: LD_VAR 0 11
34345: PUSH
34346: LD_INT 1
34348: ARRAY
34349: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34350: LD_ADDR_VAR 0 11
34354: PUSH
34355: LD_VAR 0 11
34359: PPUSH
34360: LD_INT 1
34362: PPUSH
34363: CALL_OW 3
34367: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34368: LD_VAR 0 2
34372: PPUSH
34373: LD_VAR 0 3
34377: PPUSH
34378: CALL 34578 0 2
34382: PUSH
34383: LD_VAR 0 11
34387: PUSH
34388: EMPTY
34389: EQUAL
34390: OR
34391: IFFALSE 34336
// if not control in _control then
34393: LD_VAR 0 4
34397: PUSH
34398: LD_VAR 0 12
34402: IN
34403: NOT
34404: IFFALSE 34430
// control := _control [ rand ( 1 , _control ) ] ;
34406: LD_ADDR_VAR 0 4
34410: PUSH
34411: LD_VAR 0 12
34415: PUSH
34416: LD_INT 1
34418: PPUSH
34419: LD_VAR 0 12
34423: PPUSH
34424: CALL_OW 12
34428: ARRAY
34429: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34430: LD_VAR 0 2
34434: PPUSH
34435: LD_VAR 0 5
34439: PPUSH
34440: CALL 34798 0 2
34444: NOT
34445: IFFALSE 34504
// repeat weapon := _weapon [ 1 ] ;
34447: LD_ADDR_VAR 0 5
34451: PUSH
34452: LD_VAR 0 10
34456: PUSH
34457: LD_INT 1
34459: ARRAY
34460: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34461: LD_ADDR_VAR 0 10
34465: PUSH
34466: LD_VAR 0 10
34470: PPUSH
34471: LD_INT 1
34473: PPUSH
34474: CALL_OW 3
34478: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34479: LD_VAR 0 2
34483: PPUSH
34484: LD_VAR 0 5
34488: PPUSH
34489: CALL 34798 0 2
34493: PUSH
34494: LD_VAR 0 10
34498: PUSH
34499: EMPTY
34500: EQUAL
34501: OR
34502: IFFALSE 34447
// result := [ ] ;
34504: LD_ADDR_VAR 0 6
34508: PUSH
34509: EMPTY
34510: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34511: LD_VAR 0 1
34515: PPUSH
34516: LD_VAR 0 2
34520: PPUSH
34521: LD_VAR 0 3
34525: PPUSH
34526: LD_VAR 0 4
34530: PPUSH
34531: LD_VAR 0 5
34535: PPUSH
34536: CALL_OW 448
34540: IFFALSE 34573
// result := [ chassis , engine , control , weapon ] ;
34542: LD_ADDR_VAR 0 6
34546: PUSH
34547: LD_VAR 0 2
34551: PUSH
34552: LD_VAR 0 3
34556: PUSH
34557: LD_VAR 0 4
34561: PUSH
34562: LD_VAR 0 5
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: ST_TO_ADDR
// end ;
34573: LD_VAR 0 6
34577: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34578: LD_INT 0
34580: PPUSH
// if not chassis or not engine then
34581: LD_VAR 0 1
34585: NOT
34586: PUSH
34587: LD_VAR 0 2
34591: NOT
34592: OR
34593: IFFALSE 34597
// exit ;
34595: GO 34793
// case engine of engine_solar :
34597: LD_VAR 0 2
34601: PUSH
34602: LD_INT 2
34604: DOUBLE
34605: EQUAL
34606: IFTRUE 34610
34608: GO 34648
34610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34611: LD_ADDR_VAR 0 3
34615: PUSH
34616: LD_INT 11
34618: PUSH
34619: LD_INT 12
34621: PUSH
34622: LD_INT 13
34624: PUSH
34625: LD_INT 14
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: LD_INT 3
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: ST_TO_ADDR
34646: GO 34777
34648: LD_INT 1
34650: DOUBLE
34651: EQUAL
34652: IFTRUE 34656
34654: GO 34718
34656: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34657: LD_ADDR_VAR 0 3
34661: PUSH
34662: LD_INT 11
34664: PUSH
34665: LD_INT 12
34667: PUSH
34668: LD_INT 13
34670: PUSH
34671: LD_INT 14
34673: PUSH
34674: LD_INT 1
34676: PUSH
34677: LD_INT 2
34679: PUSH
34680: LD_INT 3
34682: PUSH
34683: LD_INT 4
34685: PUSH
34686: LD_INT 5
34688: PUSH
34689: LD_INT 21
34691: PUSH
34692: LD_INT 23
34694: PUSH
34695: LD_INT 22
34697: PUSH
34698: LD_INT 24
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: ST_TO_ADDR
34716: GO 34777
34718: LD_INT 3
34720: DOUBLE
34721: EQUAL
34722: IFTRUE 34726
34724: GO 34776
34726: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34727: LD_ADDR_VAR 0 3
34731: PUSH
34732: LD_INT 13
34734: PUSH
34735: LD_INT 14
34737: PUSH
34738: LD_INT 2
34740: PUSH
34741: LD_INT 3
34743: PUSH
34744: LD_INT 4
34746: PUSH
34747: LD_INT 5
34749: PUSH
34750: LD_INT 21
34752: PUSH
34753: LD_INT 22
34755: PUSH
34756: LD_INT 23
34758: PUSH
34759: LD_INT 24
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: ST_TO_ADDR
34774: GO 34777
34776: POP
// result := ( chassis in result ) ;
34777: LD_ADDR_VAR 0 3
34781: PUSH
34782: LD_VAR 0 1
34786: PUSH
34787: LD_VAR 0 3
34791: IN
34792: ST_TO_ADDR
// end ;
34793: LD_VAR 0 3
34797: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34798: LD_INT 0
34800: PPUSH
// if not chassis or not weapon then
34801: LD_VAR 0 1
34805: NOT
34806: PUSH
34807: LD_VAR 0 2
34811: NOT
34812: OR
34813: IFFALSE 34817
// exit ;
34815: GO 35877
// case weapon of us_machine_gun :
34817: LD_VAR 0 2
34821: PUSH
34822: LD_INT 2
34824: DOUBLE
34825: EQUAL
34826: IFTRUE 34830
34828: GO 34860
34830: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34831: LD_ADDR_VAR 0 3
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: LD_INT 3
34844: PUSH
34845: LD_INT 4
34847: PUSH
34848: LD_INT 5
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: ST_TO_ADDR
34858: GO 35861
34860: LD_INT 3
34862: DOUBLE
34863: EQUAL
34864: IFTRUE 34868
34866: GO 34898
34868: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34869: LD_ADDR_VAR 0 3
34873: PUSH
34874: LD_INT 1
34876: PUSH
34877: LD_INT 2
34879: PUSH
34880: LD_INT 3
34882: PUSH
34883: LD_INT 4
34885: PUSH
34886: LD_INT 5
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: ST_TO_ADDR
34896: GO 35861
34898: LD_INT 11
34900: DOUBLE
34901: EQUAL
34902: IFTRUE 34906
34904: GO 34936
34906: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34907: LD_ADDR_VAR 0 3
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: LD_INT 2
34917: PUSH
34918: LD_INT 3
34920: PUSH
34921: LD_INT 4
34923: PUSH
34924: LD_INT 5
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: ST_TO_ADDR
34934: GO 35861
34936: LD_INT 4
34938: DOUBLE
34939: EQUAL
34940: IFTRUE 34944
34942: GO 34970
34944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34945: LD_ADDR_VAR 0 3
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: LD_INT 3
34955: PUSH
34956: LD_INT 4
34958: PUSH
34959: LD_INT 5
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: ST_TO_ADDR
34968: GO 35861
34970: LD_INT 5
34972: DOUBLE
34973: EQUAL
34974: IFTRUE 34978
34976: GO 35004
34978: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34979: LD_ADDR_VAR 0 3
34983: PUSH
34984: LD_INT 2
34986: PUSH
34987: LD_INT 3
34989: PUSH
34990: LD_INT 4
34992: PUSH
34993: LD_INT 5
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: ST_TO_ADDR
35002: GO 35861
35004: LD_INT 9
35006: DOUBLE
35007: EQUAL
35008: IFTRUE 35012
35010: GO 35038
35012: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35013: LD_ADDR_VAR 0 3
35017: PUSH
35018: LD_INT 2
35020: PUSH
35021: LD_INT 3
35023: PUSH
35024: LD_INT 4
35026: PUSH
35027: LD_INT 5
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: ST_TO_ADDR
35036: GO 35861
35038: LD_INT 7
35040: DOUBLE
35041: EQUAL
35042: IFTRUE 35046
35044: GO 35072
35046: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35047: LD_ADDR_VAR 0 3
35051: PUSH
35052: LD_INT 2
35054: PUSH
35055: LD_INT 3
35057: PUSH
35058: LD_INT 4
35060: PUSH
35061: LD_INT 5
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: ST_TO_ADDR
35070: GO 35861
35072: LD_INT 12
35074: DOUBLE
35075: EQUAL
35076: IFTRUE 35080
35078: GO 35106
35080: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35081: LD_ADDR_VAR 0 3
35085: PUSH
35086: LD_INT 2
35088: PUSH
35089: LD_INT 3
35091: PUSH
35092: LD_INT 4
35094: PUSH
35095: LD_INT 5
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: ST_TO_ADDR
35104: GO 35861
35106: LD_INT 13
35108: DOUBLE
35109: EQUAL
35110: IFTRUE 35114
35112: GO 35140
35114: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35115: LD_ADDR_VAR 0 3
35119: PUSH
35120: LD_INT 2
35122: PUSH
35123: LD_INT 3
35125: PUSH
35126: LD_INT 4
35128: PUSH
35129: LD_INT 5
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: ST_TO_ADDR
35138: GO 35861
35140: LD_INT 14
35142: DOUBLE
35143: EQUAL
35144: IFTRUE 35148
35146: GO 35166
35148: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35149: LD_ADDR_VAR 0 3
35153: PUSH
35154: LD_INT 4
35156: PUSH
35157: LD_INT 5
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: ST_TO_ADDR
35164: GO 35861
35166: LD_INT 6
35168: DOUBLE
35169: EQUAL
35170: IFTRUE 35174
35172: GO 35192
35174: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35175: LD_ADDR_VAR 0 3
35179: PUSH
35180: LD_INT 4
35182: PUSH
35183: LD_INT 5
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: ST_TO_ADDR
35190: GO 35861
35192: LD_INT 10
35194: DOUBLE
35195: EQUAL
35196: IFTRUE 35200
35198: GO 35218
35200: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35201: LD_ADDR_VAR 0 3
35205: PUSH
35206: LD_INT 4
35208: PUSH
35209: LD_INT 5
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: ST_TO_ADDR
35216: GO 35861
35218: LD_INT 22
35220: DOUBLE
35221: EQUAL
35222: IFTRUE 35226
35224: GO 35252
35226: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35227: LD_ADDR_VAR 0 3
35231: PUSH
35232: LD_INT 11
35234: PUSH
35235: LD_INT 12
35237: PUSH
35238: LD_INT 13
35240: PUSH
35241: LD_INT 14
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: ST_TO_ADDR
35250: GO 35861
35252: LD_INT 23
35254: DOUBLE
35255: EQUAL
35256: IFTRUE 35260
35258: GO 35286
35260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35261: LD_ADDR_VAR 0 3
35265: PUSH
35266: LD_INT 11
35268: PUSH
35269: LD_INT 12
35271: PUSH
35272: LD_INT 13
35274: PUSH
35275: LD_INT 14
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: ST_TO_ADDR
35284: GO 35861
35286: LD_INT 24
35288: DOUBLE
35289: EQUAL
35290: IFTRUE 35294
35292: GO 35320
35294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35295: LD_ADDR_VAR 0 3
35299: PUSH
35300: LD_INT 11
35302: PUSH
35303: LD_INT 12
35305: PUSH
35306: LD_INT 13
35308: PUSH
35309: LD_INT 14
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: ST_TO_ADDR
35318: GO 35861
35320: LD_INT 30
35322: DOUBLE
35323: EQUAL
35324: IFTRUE 35328
35326: GO 35354
35328: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35329: LD_ADDR_VAR 0 3
35333: PUSH
35334: LD_INT 11
35336: PUSH
35337: LD_INT 12
35339: PUSH
35340: LD_INT 13
35342: PUSH
35343: LD_INT 14
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: ST_TO_ADDR
35352: GO 35861
35354: LD_INT 25
35356: DOUBLE
35357: EQUAL
35358: IFTRUE 35362
35360: GO 35380
35362: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35363: LD_ADDR_VAR 0 3
35367: PUSH
35368: LD_INT 13
35370: PUSH
35371: LD_INT 14
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: ST_TO_ADDR
35378: GO 35861
35380: LD_INT 27
35382: DOUBLE
35383: EQUAL
35384: IFTRUE 35388
35386: GO 35406
35388: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35389: LD_ADDR_VAR 0 3
35393: PUSH
35394: LD_INT 13
35396: PUSH
35397: LD_INT 14
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: ST_TO_ADDR
35404: GO 35861
35406: LD_INT 92
35408: DOUBLE
35409: EQUAL
35410: IFTRUE 35414
35412: GO 35440
35414: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35415: LD_ADDR_VAR 0 3
35419: PUSH
35420: LD_INT 11
35422: PUSH
35423: LD_INT 12
35425: PUSH
35426: LD_INT 13
35428: PUSH
35429: LD_INT 14
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: ST_TO_ADDR
35438: GO 35861
35440: LD_INT 28
35442: DOUBLE
35443: EQUAL
35444: IFTRUE 35448
35446: GO 35466
35448: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35449: LD_ADDR_VAR 0 3
35453: PUSH
35454: LD_INT 13
35456: PUSH
35457: LD_INT 14
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: ST_TO_ADDR
35464: GO 35861
35466: LD_INT 29
35468: DOUBLE
35469: EQUAL
35470: IFTRUE 35474
35472: GO 35492
35474: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35475: LD_ADDR_VAR 0 3
35479: PUSH
35480: LD_INT 13
35482: PUSH
35483: LD_INT 14
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: ST_TO_ADDR
35490: GO 35861
35492: LD_INT 31
35494: DOUBLE
35495: EQUAL
35496: IFTRUE 35500
35498: GO 35518
35500: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35501: LD_ADDR_VAR 0 3
35505: PUSH
35506: LD_INT 13
35508: PUSH
35509: LD_INT 14
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: ST_TO_ADDR
35516: GO 35861
35518: LD_INT 26
35520: DOUBLE
35521: EQUAL
35522: IFTRUE 35526
35524: GO 35544
35526: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35527: LD_ADDR_VAR 0 3
35531: PUSH
35532: LD_INT 13
35534: PUSH
35535: LD_INT 14
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: ST_TO_ADDR
35542: GO 35861
35544: LD_INT 42
35546: DOUBLE
35547: EQUAL
35548: IFTRUE 35552
35550: GO 35578
35552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35553: LD_ADDR_VAR 0 3
35557: PUSH
35558: LD_INT 21
35560: PUSH
35561: LD_INT 22
35563: PUSH
35564: LD_INT 23
35566: PUSH
35567: LD_INT 24
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: ST_TO_ADDR
35576: GO 35861
35578: LD_INT 43
35580: DOUBLE
35581: EQUAL
35582: IFTRUE 35586
35584: GO 35612
35586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35587: LD_ADDR_VAR 0 3
35591: PUSH
35592: LD_INT 21
35594: PUSH
35595: LD_INT 22
35597: PUSH
35598: LD_INT 23
35600: PUSH
35601: LD_INT 24
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: ST_TO_ADDR
35610: GO 35861
35612: LD_INT 44
35614: DOUBLE
35615: EQUAL
35616: IFTRUE 35620
35618: GO 35646
35620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35621: LD_ADDR_VAR 0 3
35625: PUSH
35626: LD_INT 21
35628: PUSH
35629: LD_INT 22
35631: PUSH
35632: LD_INT 23
35634: PUSH
35635: LD_INT 24
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: ST_TO_ADDR
35644: GO 35861
35646: LD_INT 45
35648: DOUBLE
35649: EQUAL
35650: IFTRUE 35654
35652: GO 35680
35654: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35655: LD_ADDR_VAR 0 3
35659: PUSH
35660: LD_INT 21
35662: PUSH
35663: LD_INT 22
35665: PUSH
35666: LD_INT 23
35668: PUSH
35669: LD_INT 24
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: ST_TO_ADDR
35678: GO 35861
35680: LD_INT 49
35682: DOUBLE
35683: EQUAL
35684: IFTRUE 35688
35686: GO 35714
35688: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35689: LD_ADDR_VAR 0 3
35693: PUSH
35694: LD_INT 21
35696: PUSH
35697: LD_INT 22
35699: PUSH
35700: LD_INT 23
35702: PUSH
35703: LD_INT 24
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: ST_TO_ADDR
35712: GO 35861
35714: LD_INT 51
35716: DOUBLE
35717: EQUAL
35718: IFTRUE 35722
35720: GO 35748
35722: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35723: LD_ADDR_VAR 0 3
35727: PUSH
35728: LD_INT 21
35730: PUSH
35731: LD_INT 22
35733: PUSH
35734: LD_INT 23
35736: PUSH
35737: LD_INT 24
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: ST_TO_ADDR
35746: GO 35861
35748: LD_INT 52
35750: DOUBLE
35751: EQUAL
35752: IFTRUE 35756
35754: GO 35782
35756: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35757: LD_ADDR_VAR 0 3
35761: PUSH
35762: LD_INT 21
35764: PUSH
35765: LD_INT 22
35767: PUSH
35768: LD_INT 23
35770: PUSH
35771: LD_INT 24
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: ST_TO_ADDR
35780: GO 35861
35782: LD_INT 53
35784: DOUBLE
35785: EQUAL
35786: IFTRUE 35790
35788: GO 35808
35790: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35791: LD_ADDR_VAR 0 3
35795: PUSH
35796: LD_INT 23
35798: PUSH
35799: LD_INT 24
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: ST_TO_ADDR
35806: GO 35861
35808: LD_INT 46
35810: DOUBLE
35811: EQUAL
35812: IFTRUE 35816
35814: GO 35834
35816: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35817: LD_ADDR_VAR 0 3
35821: PUSH
35822: LD_INT 23
35824: PUSH
35825: LD_INT 24
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: ST_TO_ADDR
35832: GO 35861
35834: LD_INT 47
35836: DOUBLE
35837: EQUAL
35838: IFTRUE 35842
35840: GO 35860
35842: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35843: LD_ADDR_VAR 0 3
35847: PUSH
35848: LD_INT 23
35850: PUSH
35851: LD_INT 24
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: ST_TO_ADDR
35858: GO 35861
35860: POP
// result := ( chassis in result ) ;
35861: LD_ADDR_VAR 0 3
35865: PUSH
35866: LD_VAR 0 1
35870: PUSH
35871: LD_VAR 0 3
35875: IN
35876: ST_TO_ADDR
// end ;
35877: LD_VAR 0 3
35881: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35882: LD_INT 0
35884: PPUSH
35885: PPUSH
35886: PPUSH
35887: PPUSH
35888: PPUSH
35889: PPUSH
35890: PPUSH
// result := array ;
35891: LD_ADDR_VAR 0 5
35895: PUSH
35896: LD_VAR 0 1
35900: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35901: LD_VAR 0 1
35905: NOT
35906: PUSH
35907: LD_VAR 0 2
35911: NOT
35912: OR
35913: PUSH
35914: LD_VAR 0 3
35918: NOT
35919: OR
35920: PUSH
35921: LD_VAR 0 2
35925: PUSH
35926: LD_VAR 0 1
35930: GREATER
35931: OR
35932: PUSH
35933: LD_VAR 0 3
35937: PUSH
35938: LD_VAR 0 1
35942: GREATER
35943: OR
35944: IFFALSE 35948
// exit ;
35946: GO 36244
// if direction then
35948: LD_VAR 0 4
35952: IFFALSE 36016
// begin d := 1 ;
35954: LD_ADDR_VAR 0 9
35958: PUSH
35959: LD_INT 1
35961: ST_TO_ADDR
// if i_from > i_to then
35962: LD_VAR 0 2
35966: PUSH
35967: LD_VAR 0 3
35971: GREATER
35972: IFFALSE 35998
// length := ( array - i_from ) + i_to else
35974: LD_ADDR_VAR 0 11
35978: PUSH
35979: LD_VAR 0 1
35983: PUSH
35984: LD_VAR 0 2
35988: MINUS
35989: PUSH
35990: LD_VAR 0 3
35994: PLUS
35995: ST_TO_ADDR
35996: GO 36014
// length := i_to - i_from ;
35998: LD_ADDR_VAR 0 11
36002: PUSH
36003: LD_VAR 0 3
36007: PUSH
36008: LD_VAR 0 2
36012: MINUS
36013: ST_TO_ADDR
// end else
36014: GO 36077
// begin d := - 1 ;
36016: LD_ADDR_VAR 0 9
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: ST_TO_ADDR
// if i_from > i_to then
36025: LD_VAR 0 2
36029: PUSH
36030: LD_VAR 0 3
36034: GREATER
36035: IFFALSE 36055
// length := i_from - i_to else
36037: LD_ADDR_VAR 0 11
36041: PUSH
36042: LD_VAR 0 2
36046: PUSH
36047: LD_VAR 0 3
36051: MINUS
36052: ST_TO_ADDR
36053: GO 36077
// length := ( array - i_to ) + i_from ;
36055: LD_ADDR_VAR 0 11
36059: PUSH
36060: LD_VAR 0 1
36064: PUSH
36065: LD_VAR 0 3
36069: MINUS
36070: PUSH
36071: LD_VAR 0 2
36075: PLUS
36076: ST_TO_ADDR
// end ; if not length then
36077: LD_VAR 0 11
36081: NOT
36082: IFFALSE 36086
// exit ;
36084: GO 36244
// tmp := array ;
36086: LD_ADDR_VAR 0 10
36090: PUSH
36091: LD_VAR 0 1
36095: ST_TO_ADDR
// for i = 1 to length do
36096: LD_ADDR_VAR 0 6
36100: PUSH
36101: DOUBLE
36102: LD_INT 1
36104: DEC
36105: ST_TO_ADDR
36106: LD_VAR 0 11
36110: PUSH
36111: FOR_TO
36112: IFFALSE 36232
// begin for j = 1 to array do
36114: LD_ADDR_VAR 0 7
36118: PUSH
36119: DOUBLE
36120: LD_INT 1
36122: DEC
36123: ST_TO_ADDR
36124: LD_VAR 0 1
36128: PUSH
36129: FOR_TO
36130: IFFALSE 36218
// begin k := j + d ;
36132: LD_ADDR_VAR 0 8
36136: PUSH
36137: LD_VAR 0 7
36141: PUSH
36142: LD_VAR 0 9
36146: PLUS
36147: ST_TO_ADDR
// if k > array then
36148: LD_VAR 0 8
36152: PUSH
36153: LD_VAR 0 1
36157: GREATER
36158: IFFALSE 36168
// k := 1 ;
36160: LD_ADDR_VAR 0 8
36164: PUSH
36165: LD_INT 1
36167: ST_TO_ADDR
// if not k then
36168: LD_VAR 0 8
36172: NOT
36173: IFFALSE 36185
// k := array ;
36175: LD_ADDR_VAR 0 8
36179: PUSH
36180: LD_VAR 0 1
36184: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36185: LD_ADDR_VAR 0 10
36189: PUSH
36190: LD_VAR 0 10
36194: PPUSH
36195: LD_VAR 0 8
36199: PPUSH
36200: LD_VAR 0 1
36204: PUSH
36205: LD_VAR 0 7
36209: ARRAY
36210: PPUSH
36211: CALL_OW 1
36215: ST_TO_ADDR
// end ;
36216: GO 36129
36218: POP
36219: POP
// array := tmp ;
36220: LD_ADDR_VAR 0 1
36224: PUSH
36225: LD_VAR 0 10
36229: ST_TO_ADDR
// end ;
36230: GO 36111
36232: POP
36233: POP
// result := array ;
36234: LD_ADDR_VAR 0 5
36238: PUSH
36239: LD_VAR 0 1
36243: ST_TO_ADDR
// end ;
36244: LD_VAR 0 5
36248: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36249: LD_INT 0
36251: PPUSH
36252: PPUSH
// result := 0 ;
36253: LD_ADDR_VAR 0 3
36257: PUSH
36258: LD_INT 0
36260: ST_TO_ADDR
// if not array or not value in array then
36261: LD_VAR 0 1
36265: NOT
36266: PUSH
36267: LD_VAR 0 2
36271: PUSH
36272: LD_VAR 0 1
36276: IN
36277: NOT
36278: OR
36279: IFFALSE 36283
// exit ;
36281: GO 36337
// for i = 1 to array do
36283: LD_ADDR_VAR 0 4
36287: PUSH
36288: DOUBLE
36289: LD_INT 1
36291: DEC
36292: ST_TO_ADDR
36293: LD_VAR 0 1
36297: PUSH
36298: FOR_TO
36299: IFFALSE 36335
// if value = array [ i ] then
36301: LD_VAR 0 2
36305: PUSH
36306: LD_VAR 0 1
36310: PUSH
36311: LD_VAR 0 4
36315: ARRAY
36316: EQUAL
36317: IFFALSE 36333
// begin result := i ;
36319: LD_ADDR_VAR 0 3
36323: PUSH
36324: LD_VAR 0 4
36328: ST_TO_ADDR
// exit ;
36329: POP
36330: POP
36331: GO 36337
// end ;
36333: GO 36298
36335: POP
36336: POP
// end ;
36337: LD_VAR 0 3
36341: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36342: LD_INT 0
36344: PPUSH
// vc_chassis := chassis ;
36345: LD_ADDR_OWVAR 37
36349: PUSH
36350: LD_VAR 0 1
36354: ST_TO_ADDR
// vc_engine := engine ;
36355: LD_ADDR_OWVAR 39
36359: PUSH
36360: LD_VAR 0 2
36364: ST_TO_ADDR
// vc_control := control ;
36365: LD_ADDR_OWVAR 38
36369: PUSH
36370: LD_VAR 0 3
36374: ST_TO_ADDR
// vc_weapon := weapon ;
36375: LD_ADDR_OWVAR 40
36379: PUSH
36380: LD_VAR 0 4
36384: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36385: LD_ADDR_OWVAR 41
36389: PUSH
36390: LD_VAR 0 5
36394: ST_TO_ADDR
// end ;
36395: LD_VAR 0 6
36399: RET
// export function WantPlant ( unit ) ; var task ; begin
36400: LD_INT 0
36402: PPUSH
36403: PPUSH
// result := false ;
36404: LD_ADDR_VAR 0 2
36408: PUSH
36409: LD_INT 0
36411: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36412: LD_ADDR_VAR 0 3
36416: PUSH
36417: LD_VAR 0 1
36421: PPUSH
36422: CALL_OW 437
36426: ST_TO_ADDR
// if task then
36427: LD_VAR 0 3
36431: IFFALSE 36459
// if task [ 1 ] [ 1 ] = p then
36433: LD_VAR 0 3
36437: PUSH
36438: LD_INT 1
36440: ARRAY
36441: PUSH
36442: LD_INT 1
36444: ARRAY
36445: PUSH
36446: LD_STRING p
36448: EQUAL
36449: IFFALSE 36459
// result := true ;
36451: LD_ADDR_VAR 0 2
36455: PUSH
36456: LD_INT 1
36458: ST_TO_ADDR
// end ;
36459: LD_VAR 0 2
36463: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36464: LD_INT 0
36466: PPUSH
36467: PPUSH
36468: PPUSH
36469: PPUSH
// if pos < 1 then
36470: LD_VAR 0 2
36474: PUSH
36475: LD_INT 1
36477: LESS
36478: IFFALSE 36482
// exit ;
36480: GO 36785
// if pos = 1 then
36482: LD_VAR 0 2
36486: PUSH
36487: LD_INT 1
36489: EQUAL
36490: IFFALSE 36523
// result := Replace ( arr , pos [ 1 ] , value ) else
36492: LD_ADDR_VAR 0 4
36496: PUSH
36497: LD_VAR 0 1
36501: PPUSH
36502: LD_VAR 0 2
36506: PUSH
36507: LD_INT 1
36509: ARRAY
36510: PPUSH
36511: LD_VAR 0 3
36515: PPUSH
36516: CALL_OW 1
36520: ST_TO_ADDR
36521: GO 36785
// begin tmp := arr ;
36523: LD_ADDR_VAR 0 6
36527: PUSH
36528: LD_VAR 0 1
36532: ST_TO_ADDR
// s_arr := [ tmp ] ;
36533: LD_ADDR_VAR 0 7
36537: PUSH
36538: LD_VAR 0 6
36542: PUSH
36543: EMPTY
36544: LIST
36545: ST_TO_ADDR
// for i = 1 to pos - 1 do
36546: LD_ADDR_VAR 0 5
36550: PUSH
36551: DOUBLE
36552: LD_INT 1
36554: DEC
36555: ST_TO_ADDR
36556: LD_VAR 0 2
36560: PUSH
36561: LD_INT 1
36563: MINUS
36564: PUSH
36565: FOR_TO
36566: IFFALSE 36611
// begin tmp := tmp [ pos [ i ] ] ;
36568: LD_ADDR_VAR 0 6
36572: PUSH
36573: LD_VAR 0 6
36577: PUSH
36578: LD_VAR 0 2
36582: PUSH
36583: LD_VAR 0 5
36587: ARRAY
36588: ARRAY
36589: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36590: LD_ADDR_VAR 0 7
36594: PUSH
36595: LD_VAR 0 7
36599: PUSH
36600: LD_VAR 0 6
36604: PUSH
36605: EMPTY
36606: LIST
36607: ADD
36608: ST_TO_ADDR
// end ;
36609: GO 36565
36611: POP
36612: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36613: LD_ADDR_VAR 0 6
36617: PUSH
36618: LD_VAR 0 6
36622: PPUSH
36623: LD_VAR 0 2
36627: PUSH
36628: LD_VAR 0 2
36632: ARRAY
36633: PPUSH
36634: LD_VAR 0 3
36638: PPUSH
36639: CALL_OW 1
36643: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36644: LD_ADDR_VAR 0 7
36648: PUSH
36649: LD_VAR 0 7
36653: PPUSH
36654: LD_VAR 0 7
36658: PPUSH
36659: LD_VAR 0 6
36663: PPUSH
36664: CALL_OW 1
36668: ST_TO_ADDR
// for i = s_arr downto 2 do
36669: LD_ADDR_VAR 0 5
36673: PUSH
36674: DOUBLE
36675: LD_VAR 0 7
36679: INC
36680: ST_TO_ADDR
36681: LD_INT 2
36683: PUSH
36684: FOR_DOWNTO
36685: IFFALSE 36769
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36687: LD_ADDR_VAR 0 6
36691: PUSH
36692: LD_VAR 0 7
36696: PUSH
36697: LD_VAR 0 5
36701: PUSH
36702: LD_INT 1
36704: MINUS
36705: ARRAY
36706: PPUSH
36707: LD_VAR 0 2
36711: PUSH
36712: LD_VAR 0 5
36716: PUSH
36717: LD_INT 1
36719: MINUS
36720: ARRAY
36721: PPUSH
36722: LD_VAR 0 7
36726: PUSH
36727: LD_VAR 0 5
36731: ARRAY
36732: PPUSH
36733: CALL_OW 1
36737: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36738: LD_ADDR_VAR 0 7
36742: PUSH
36743: LD_VAR 0 7
36747: PPUSH
36748: LD_VAR 0 5
36752: PUSH
36753: LD_INT 1
36755: MINUS
36756: PPUSH
36757: LD_VAR 0 6
36761: PPUSH
36762: CALL_OW 1
36766: ST_TO_ADDR
// end ;
36767: GO 36684
36769: POP
36770: POP
// result := s_arr [ 1 ] ;
36771: LD_ADDR_VAR 0 4
36775: PUSH
36776: LD_VAR 0 7
36780: PUSH
36781: LD_INT 1
36783: ARRAY
36784: ST_TO_ADDR
// end ; end ;
36785: LD_VAR 0 4
36789: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36790: LD_INT 0
36792: PPUSH
36793: PPUSH
// if not list then
36794: LD_VAR 0 1
36798: NOT
36799: IFFALSE 36803
// exit ;
36801: GO 36894
// i := list [ pos1 ] ;
36803: LD_ADDR_VAR 0 5
36807: PUSH
36808: LD_VAR 0 1
36812: PUSH
36813: LD_VAR 0 2
36817: ARRAY
36818: ST_TO_ADDR
// if not i then
36819: LD_VAR 0 5
36823: NOT
36824: IFFALSE 36828
// exit ;
36826: GO 36894
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36828: LD_ADDR_VAR 0 1
36832: PUSH
36833: LD_VAR 0 1
36837: PPUSH
36838: LD_VAR 0 2
36842: PPUSH
36843: LD_VAR 0 1
36847: PUSH
36848: LD_VAR 0 3
36852: ARRAY
36853: PPUSH
36854: CALL_OW 1
36858: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36859: LD_ADDR_VAR 0 1
36863: PUSH
36864: LD_VAR 0 1
36868: PPUSH
36869: LD_VAR 0 3
36873: PPUSH
36874: LD_VAR 0 5
36878: PPUSH
36879: CALL_OW 1
36883: ST_TO_ADDR
// result := list ;
36884: LD_ADDR_VAR 0 4
36888: PUSH
36889: LD_VAR 0 1
36893: ST_TO_ADDR
// end ;
36894: LD_VAR 0 4
36898: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36899: LD_INT 0
36901: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36902: LD_ADDR_VAR 0 5
36906: PUSH
36907: LD_VAR 0 1
36911: PPUSH
36912: CALL_OW 250
36916: PPUSH
36917: LD_VAR 0 1
36921: PPUSH
36922: CALL_OW 251
36926: PPUSH
36927: LD_VAR 0 2
36931: PPUSH
36932: LD_VAR 0 3
36936: PPUSH
36937: LD_VAR 0 4
36941: PPUSH
36942: CALL 36952 0 5
36946: ST_TO_ADDR
// end ;
36947: LD_VAR 0 5
36951: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36952: LD_INT 0
36954: PPUSH
36955: PPUSH
36956: PPUSH
36957: PPUSH
// if not list then
36958: LD_VAR 0 3
36962: NOT
36963: IFFALSE 36967
// exit ;
36965: GO 37355
// result := [ ] ;
36967: LD_ADDR_VAR 0 6
36971: PUSH
36972: EMPTY
36973: ST_TO_ADDR
// for i in list do
36974: LD_ADDR_VAR 0 7
36978: PUSH
36979: LD_VAR 0 3
36983: PUSH
36984: FOR_IN
36985: IFFALSE 37187
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36987: LD_ADDR_VAR 0 9
36991: PUSH
36992: LD_VAR 0 7
36996: PPUSH
36997: LD_VAR 0 1
37001: PPUSH
37002: LD_VAR 0 2
37006: PPUSH
37007: CALL_OW 297
37011: ST_TO_ADDR
// if not result then
37012: LD_VAR 0 6
37016: NOT
37017: IFFALSE 37043
// result := [ [ i , tmp ] ] else
37019: LD_ADDR_VAR 0 6
37023: PUSH
37024: LD_VAR 0 7
37028: PUSH
37029: LD_VAR 0 9
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: EMPTY
37039: LIST
37040: ST_TO_ADDR
37041: GO 37185
// begin if result [ result ] [ 2 ] < tmp then
37043: LD_VAR 0 6
37047: PUSH
37048: LD_VAR 0 6
37052: ARRAY
37053: PUSH
37054: LD_INT 2
37056: ARRAY
37057: PUSH
37058: LD_VAR 0 9
37062: LESS
37063: IFFALSE 37105
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37065: LD_ADDR_VAR 0 6
37069: PUSH
37070: LD_VAR 0 6
37074: PPUSH
37075: LD_VAR 0 6
37079: PUSH
37080: LD_INT 1
37082: PLUS
37083: PPUSH
37084: LD_VAR 0 7
37088: PUSH
37089: LD_VAR 0 9
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PPUSH
37098: CALL_OW 2
37102: ST_TO_ADDR
37103: GO 37185
// for j = 1 to result do
37105: LD_ADDR_VAR 0 8
37109: PUSH
37110: DOUBLE
37111: LD_INT 1
37113: DEC
37114: ST_TO_ADDR
37115: LD_VAR 0 6
37119: PUSH
37120: FOR_TO
37121: IFFALSE 37183
// begin if tmp < result [ j ] [ 2 ] then
37123: LD_VAR 0 9
37127: PUSH
37128: LD_VAR 0 6
37132: PUSH
37133: LD_VAR 0 8
37137: ARRAY
37138: PUSH
37139: LD_INT 2
37141: ARRAY
37142: LESS
37143: IFFALSE 37181
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37145: LD_ADDR_VAR 0 6
37149: PUSH
37150: LD_VAR 0 6
37154: PPUSH
37155: LD_VAR 0 8
37159: PPUSH
37160: LD_VAR 0 7
37164: PUSH
37165: LD_VAR 0 9
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PPUSH
37174: CALL_OW 2
37178: ST_TO_ADDR
// break ;
37179: GO 37183
// end ; end ;
37181: GO 37120
37183: POP
37184: POP
// end ; end ;
37185: GO 36984
37187: POP
37188: POP
// if result and not asc then
37189: LD_VAR 0 6
37193: PUSH
37194: LD_VAR 0 4
37198: NOT
37199: AND
37200: IFFALSE 37275
// begin tmp := result ;
37202: LD_ADDR_VAR 0 9
37206: PUSH
37207: LD_VAR 0 6
37211: ST_TO_ADDR
// for i = tmp downto 1 do
37212: LD_ADDR_VAR 0 7
37216: PUSH
37217: DOUBLE
37218: LD_VAR 0 9
37222: INC
37223: ST_TO_ADDR
37224: LD_INT 1
37226: PUSH
37227: FOR_DOWNTO
37228: IFFALSE 37273
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37230: LD_ADDR_VAR 0 6
37234: PUSH
37235: LD_VAR 0 6
37239: PPUSH
37240: LD_VAR 0 9
37244: PUSH
37245: LD_VAR 0 7
37249: MINUS
37250: PUSH
37251: LD_INT 1
37253: PLUS
37254: PPUSH
37255: LD_VAR 0 9
37259: PUSH
37260: LD_VAR 0 7
37264: ARRAY
37265: PPUSH
37266: CALL_OW 1
37270: ST_TO_ADDR
37271: GO 37227
37273: POP
37274: POP
// end ; tmp := [ ] ;
37275: LD_ADDR_VAR 0 9
37279: PUSH
37280: EMPTY
37281: ST_TO_ADDR
// if mode then
37282: LD_VAR 0 5
37286: IFFALSE 37355
// begin for i = 1 to result do
37288: LD_ADDR_VAR 0 7
37292: PUSH
37293: DOUBLE
37294: LD_INT 1
37296: DEC
37297: ST_TO_ADDR
37298: LD_VAR 0 6
37302: PUSH
37303: FOR_TO
37304: IFFALSE 37343
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37306: LD_ADDR_VAR 0 9
37310: PUSH
37311: LD_VAR 0 9
37315: PPUSH
37316: LD_VAR 0 7
37320: PPUSH
37321: LD_VAR 0 6
37325: PUSH
37326: LD_VAR 0 7
37330: ARRAY
37331: PUSH
37332: LD_INT 1
37334: ARRAY
37335: PPUSH
37336: CALL_OW 1
37340: ST_TO_ADDR
37341: GO 37303
37343: POP
37344: POP
// result := tmp ;
37345: LD_ADDR_VAR 0 6
37349: PUSH
37350: LD_VAR 0 9
37354: ST_TO_ADDR
// end ; end ;
37355: LD_VAR 0 6
37359: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37360: LD_INT 0
37362: PPUSH
37363: PPUSH
37364: PPUSH
37365: PPUSH
37366: PPUSH
37367: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37368: LD_ADDR_VAR 0 5
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: EMPTY
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: ST_TO_ADDR
// if not x or not y then
37390: LD_VAR 0 2
37394: NOT
37395: PUSH
37396: LD_VAR 0 3
37400: NOT
37401: OR
37402: IFFALSE 37406
// exit ;
37404: GO 39056
// if not range then
37406: LD_VAR 0 4
37410: NOT
37411: IFFALSE 37421
// range := 10 ;
37413: LD_ADDR_VAR 0 4
37417: PUSH
37418: LD_INT 10
37420: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37421: LD_ADDR_VAR 0 8
37425: PUSH
37426: LD_INT 81
37428: PUSH
37429: LD_VAR 0 1
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 92
37440: PUSH
37441: LD_VAR 0 2
37445: PUSH
37446: LD_VAR 0 3
37450: PUSH
37451: LD_VAR 0 4
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 3
37464: PUSH
37465: LD_INT 21
37467: PUSH
37468: LD_INT 3
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: LIST
37483: PPUSH
37484: CALL_OW 69
37488: ST_TO_ADDR
// if not tmp then
37489: LD_VAR 0 8
37493: NOT
37494: IFFALSE 37498
// exit ;
37496: GO 39056
// for i in tmp do
37498: LD_ADDR_VAR 0 6
37502: PUSH
37503: LD_VAR 0 8
37507: PUSH
37508: FOR_IN
37509: IFFALSE 39031
// begin points := [ 0 , 0 , 0 ] ;
37511: LD_ADDR_VAR 0 9
37515: PUSH
37516: LD_INT 0
37518: PUSH
37519: LD_INT 0
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: LIST
37529: ST_TO_ADDR
// bpoints := 1 ;
37530: LD_ADDR_VAR 0 10
37534: PUSH
37535: LD_INT 1
37537: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37538: LD_VAR 0 6
37542: PPUSH
37543: CALL_OW 247
37547: PUSH
37548: LD_INT 1
37550: DOUBLE
37551: EQUAL
37552: IFTRUE 37556
37554: GO 38134
37556: POP
// begin if GetClass ( i ) = 1 then
37557: LD_VAR 0 6
37561: PPUSH
37562: CALL_OW 257
37566: PUSH
37567: LD_INT 1
37569: EQUAL
37570: IFFALSE 37591
// points := [ 10 , 5 , 3 ] ;
37572: LD_ADDR_VAR 0 9
37576: PUSH
37577: LD_INT 10
37579: PUSH
37580: LD_INT 5
37582: PUSH
37583: LD_INT 3
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37591: LD_VAR 0 6
37595: PPUSH
37596: CALL_OW 257
37600: PUSH
37601: LD_INT 2
37603: PUSH
37604: LD_INT 3
37606: PUSH
37607: LD_INT 4
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: LIST
37614: IN
37615: IFFALSE 37636
// points := [ 3 , 2 , 1 ] ;
37617: LD_ADDR_VAR 0 9
37621: PUSH
37622: LD_INT 3
37624: PUSH
37625: LD_INT 2
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: LIST
37635: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37636: LD_VAR 0 6
37640: PPUSH
37641: CALL_OW 257
37645: PUSH
37646: LD_INT 5
37648: EQUAL
37649: IFFALSE 37670
// points := [ 130 , 5 , 2 ] ;
37651: LD_ADDR_VAR 0 9
37655: PUSH
37656: LD_INT 130
37658: PUSH
37659: LD_INT 5
37661: PUSH
37662: LD_INT 2
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: LIST
37669: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37670: LD_VAR 0 6
37674: PPUSH
37675: CALL_OW 257
37679: PUSH
37680: LD_INT 8
37682: EQUAL
37683: IFFALSE 37704
// points := [ 35 , 35 , 30 ] ;
37685: LD_ADDR_VAR 0 9
37689: PUSH
37690: LD_INT 35
37692: PUSH
37693: LD_INT 35
37695: PUSH
37696: LD_INT 30
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: LIST
37703: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37704: LD_VAR 0 6
37708: PPUSH
37709: CALL_OW 257
37713: PUSH
37714: LD_INT 9
37716: EQUAL
37717: IFFALSE 37738
// points := [ 20 , 55 , 40 ] ;
37719: LD_ADDR_VAR 0 9
37723: PUSH
37724: LD_INT 20
37726: PUSH
37727: LD_INT 55
37729: PUSH
37730: LD_INT 40
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: LIST
37737: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37738: LD_VAR 0 6
37742: PPUSH
37743: CALL_OW 257
37747: PUSH
37748: LD_INT 12
37750: PUSH
37751: LD_INT 16
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: IN
37758: IFFALSE 37779
// points := [ 5 , 3 , 2 ] ;
37760: LD_ADDR_VAR 0 9
37764: PUSH
37765: LD_INT 5
37767: PUSH
37768: LD_INT 3
37770: PUSH
37771: LD_INT 2
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: LIST
37778: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37779: LD_VAR 0 6
37783: PPUSH
37784: CALL_OW 257
37788: PUSH
37789: LD_INT 17
37791: EQUAL
37792: IFFALSE 37813
// points := [ 100 , 50 , 75 ] ;
37794: LD_ADDR_VAR 0 9
37798: PUSH
37799: LD_INT 100
37801: PUSH
37802: LD_INT 50
37804: PUSH
37805: LD_INT 75
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: LIST
37812: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37813: LD_VAR 0 6
37817: PPUSH
37818: CALL_OW 257
37822: PUSH
37823: LD_INT 15
37825: EQUAL
37826: IFFALSE 37847
// points := [ 10 , 5 , 3 ] ;
37828: LD_ADDR_VAR 0 9
37832: PUSH
37833: LD_INT 10
37835: PUSH
37836: LD_INT 5
37838: PUSH
37839: LD_INT 3
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37847: LD_VAR 0 6
37851: PPUSH
37852: CALL_OW 257
37856: PUSH
37857: LD_INT 14
37859: EQUAL
37860: IFFALSE 37881
// points := [ 10 , 0 , 0 ] ;
37862: LD_ADDR_VAR 0 9
37866: PUSH
37867: LD_INT 10
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37881: LD_VAR 0 6
37885: PPUSH
37886: CALL_OW 257
37890: PUSH
37891: LD_INT 11
37893: EQUAL
37894: IFFALSE 37915
// points := [ 30 , 10 , 5 ] ;
37896: LD_ADDR_VAR 0 9
37900: PUSH
37901: LD_INT 30
37903: PUSH
37904: LD_INT 10
37906: PUSH
37907: LD_INT 5
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: LIST
37914: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37915: LD_VAR 0 1
37919: PPUSH
37920: LD_INT 5
37922: PPUSH
37923: CALL_OW 321
37927: PUSH
37928: LD_INT 2
37930: EQUAL
37931: IFFALSE 37948
// bpoints := bpoints * 1.8 ;
37933: LD_ADDR_VAR 0 10
37937: PUSH
37938: LD_VAR 0 10
37942: PUSH
37943: LD_REAL  1.80000000000000E+0000
37946: MUL
37947: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37948: LD_VAR 0 6
37952: PPUSH
37953: CALL_OW 257
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: LD_INT 3
37966: PUSH
37967: LD_INT 4
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: IN
37976: PUSH
37977: LD_VAR 0 1
37981: PPUSH
37982: LD_INT 51
37984: PPUSH
37985: CALL_OW 321
37989: PUSH
37990: LD_INT 2
37992: EQUAL
37993: AND
37994: IFFALSE 38011
// bpoints := bpoints * 1.2 ;
37996: LD_ADDR_VAR 0 10
38000: PUSH
38001: LD_VAR 0 10
38005: PUSH
38006: LD_REAL  1.20000000000000E+0000
38009: MUL
38010: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38011: LD_VAR 0 6
38015: PPUSH
38016: CALL_OW 257
38020: PUSH
38021: LD_INT 5
38023: PUSH
38024: LD_INT 7
38026: PUSH
38027: LD_INT 9
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: LIST
38034: IN
38035: PUSH
38036: LD_VAR 0 1
38040: PPUSH
38041: LD_INT 52
38043: PPUSH
38044: CALL_OW 321
38048: PUSH
38049: LD_INT 2
38051: EQUAL
38052: AND
38053: IFFALSE 38070
// bpoints := bpoints * 1.5 ;
38055: LD_ADDR_VAR 0 10
38059: PUSH
38060: LD_VAR 0 10
38064: PUSH
38065: LD_REAL  1.50000000000000E+0000
38068: MUL
38069: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38070: LD_VAR 0 1
38074: PPUSH
38075: LD_INT 66
38077: PPUSH
38078: CALL_OW 321
38082: PUSH
38083: LD_INT 2
38085: EQUAL
38086: IFFALSE 38103
// bpoints := bpoints * 1.1 ;
38088: LD_ADDR_VAR 0 10
38092: PUSH
38093: LD_VAR 0 10
38097: PUSH
38098: LD_REAL  1.10000000000000E+0000
38101: MUL
38102: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38103: LD_ADDR_VAR 0 10
38107: PUSH
38108: LD_VAR 0 10
38112: PUSH
38113: LD_VAR 0 6
38117: PPUSH
38118: LD_INT 1
38120: PPUSH
38121: CALL_OW 259
38125: PUSH
38126: LD_REAL  1.15000000000000E+0000
38129: MUL
38130: MUL
38131: ST_TO_ADDR
// end ; unit_vehicle :
38132: GO 38960
38134: LD_INT 2
38136: DOUBLE
38137: EQUAL
38138: IFTRUE 38142
38140: GO 38948
38142: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38143: LD_VAR 0 6
38147: PPUSH
38148: CALL_OW 264
38152: PUSH
38153: LD_INT 2
38155: PUSH
38156: LD_INT 42
38158: PUSH
38159: LD_INT 24
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: LIST
38166: IN
38167: IFFALSE 38188
// points := [ 25 , 5 , 3 ] ;
38169: LD_ADDR_VAR 0 9
38173: PUSH
38174: LD_INT 25
38176: PUSH
38177: LD_INT 5
38179: PUSH
38180: LD_INT 3
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: LIST
38187: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38188: LD_VAR 0 6
38192: PPUSH
38193: CALL_OW 264
38197: PUSH
38198: LD_INT 4
38200: PUSH
38201: LD_INT 43
38203: PUSH
38204: LD_INT 25
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: LIST
38211: IN
38212: IFFALSE 38233
// points := [ 40 , 15 , 5 ] ;
38214: LD_ADDR_VAR 0 9
38218: PUSH
38219: LD_INT 40
38221: PUSH
38222: LD_INT 15
38224: PUSH
38225: LD_INT 5
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38233: LD_VAR 0 6
38237: PPUSH
38238: CALL_OW 264
38242: PUSH
38243: LD_INT 3
38245: PUSH
38246: LD_INT 23
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: IN
38253: IFFALSE 38274
// points := [ 7 , 25 , 8 ] ;
38255: LD_ADDR_VAR 0 9
38259: PUSH
38260: LD_INT 7
38262: PUSH
38263: LD_INT 25
38265: PUSH
38266: LD_INT 8
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38274: LD_VAR 0 6
38278: PPUSH
38279: CALL_OW 264
38283: PUSH
38284: LD_INT 5
38286: PUSH
38287: LD_INT 27
38289: PUSH
38290: LD_INT 44
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: LIST
38297: IN
38298: IFFALSE 38319
// points := [ 14 , 50 , 16 ] ;
38300: LD_ADDR_VAR 0 9
38304: PUSH
38305: LD_INT 14
38307: PUSH
38308: LD_INT 50
38310: PUSH
38311: LD_INT 16
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: LIST
38318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38319: LD_VAR 0 6
38323: PPUSH
38324: CALL_OW 264
38328: PUSH
38329: LD_INT 6
38331: PUSH
38332: LD_INT 46
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: IN
38339: IFFALSE 38360
// points := [ 32 , 120 , 70 ] ;
38341: LD_ADDR_VAR 0 9
38345: PUSH
38346: LD_INT 32
38348: PUSH
38349: LD_INT 120
38351: PUSH
38352: LD_INT 70
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: LIST
38359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38360: LD_VAR 0 6
38364: PPUSH
38365: CALL_OW 264
38369: PUSH
38370: LD_INT 7
38372: PUSH
38373: LD_INT 28
38375: PUSH
38376: LD_INT 45
38378: PUSH
38379: LD_INT 92
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: IN
38388: IFFALSE 38409
// points := [ 35 , 20 , 45 ] ;
38390: LD_ADDR_VAR 0 9
38394: PUSH
38395: LD_INT 35
38397: PUSH
38398: LD_INT 20
38400: PUSH
38401: LD_INT 45
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: LIST
38408: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38409: LD_VAR 0 6
38413: PPUSH
38414: CALL_OW 264
38418: PUSH
38419: LD_INT 47
38421: PUSH
38422: EMPTY
38423: LIST
38424: IN
38425: IFFALSE 38446
// points := [ 67 , 45 , 75 ] ;
38427: LD_ADDR_VAR 0 9
38431: PUSH
38432: LD_INT 67
38434: PUSH
38435: LD_INT 45
38437: PUSH
38438: LD_INT 75
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38446: LD_VAR 0 6
38450: PPUSH
38451: CALL_OW 264
38455: PUSH
38456: LD_INT 26
38458: PUSH
38459: EMPTY
38460: LIST
38461: IN
38462: IFFALSE 38483
// points := [ 120 , 30 , 80 ] ;
38464: LD_ADDR_VAR 0 9
38468: PUSH
38469: LD_INT 120
38471: PUSH
38472: LD_INT 30
38474: PUSH
38475: LD_INT 80
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: LIST
38482: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38483: LD_VAR 0 6
38487: PPUSH
38488: CALL_OW 264
38492: PUSH
38493: LD_INT 22
38495: PUSH
38496: EMPTY
38497: LIST
38498: IN
38499: IFFALSE 38520
// points := [ 40 , 1 , 1 ] ;
38501: LD_ADDR_VAR 0 9
38505: PUSH
38506: LD_INT 40
38508: PUSH
38509: LD_INT 1
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38520: LD_VAR 0 6
38524: PPUSH
38525: CALL_OW 264
38529: PUSH
38530: LD_INT 29
38532: PUSH
38533: EMPTY
38534: LIST
38535: IN
38536: IFFALSE 38557
// points := [ 70 , 200 , 400 ] ;
38538: LD_ADDR_VAR 0 9
38542: PUSH
38543: LD_INT 70
38545: PUSH
38546: LD_INT 200
38548: PUSH
38549: LD_INT 400
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: LIST
38556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38557: LD_VAR 0 6
38561: PPUSH
38562: CALL_OW 264
38566: PUSH
38567: LD_INT 14
38569: PUSH
38570: LD_INT 53
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: IN
38577: IFFALSE 38598
// points := [ 40 , 10 , 20 ] ;
38579: LD_ADDR_VAR 0 9
38583: PUSH
38584: LD_INT 40
38586: PUSH
38587: LD_INT 10
38589: PUSH
38590: LD_INT 20
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: LIST
38597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38598: LD_VAR 0 6
38602: PPUSH
38603: CALL_OW 264
38607: PUSH
38608: LD_INT 9
38610: PUSH
38611: EMPTY
38612: LIST
38613: IN
38614: IFFALSE 38635
// points := [ 5 , 70 , 20 ] ;
38616: LD_ADDR_VAR 0 9
38620: PUSH
38621: LD_INT 5
38623: PUSH
38624: LD_INT 70
38626: PUSH
38627: LD_INT 20
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: LIST
38634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38635: LD_VAR 0 6
38639: PPUSH
38640: CALL_OW 264
38644: PUSH
38645: LD_INT 10
38647: PUSH
38648: EMPTY
38649: LIST
38650: IN
38651: IFFALSE 38672
// points := [ 35 , 110 , 70 ] ;
38653: LD_ADDR_VAR 0 9
38657: PUSH
38658: LD_INT 35
38660: PUSH
38661: LD_INT 110
38663: PUSH
38664: LD_INT 70
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: LIST
38671: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38672: LD_VAR 0 6
38676: PPUSH
38677: CALL_OW 265
38681: PUSH
38682: LD_INT 25
38684: EQUAL
38685: IFFALSE 38706
// points := [ 80 , 65 , 100 ] ;
38687: LD_ADDR_VAR 0 9
38691: PUSH
38692: LD_INT 80
38694: PUSH
38695: LD_INT 65
38697: PUSH
38698: LD_INT 100
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: LIST
38705: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38706: LD_VAR 0 6
38710: PPUSH
38711: CALL_OW 263
38715: PUSH
38716: LD_INT 1
38718: EQUAL
38719: IFFALSE 38754
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38721: LD_ADDR_VAR 0 10
38725: PUSH
38726: LD_VAR 0 10
38730: PUSH
38731: LD_VAR 0 6
38735: PPUSH
38736: CALL_OW 311
38740: PPUSH
38741: LD_INT 3
38743: PPUSH
38744: CALL_OW 259
38748: PUSH
38749: LD_INT 4
38751: MUL
38752: MUL
38753: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38754: LD_VAR 0 6
38758: PPUSH
38759: CALL_OW 263
38763: PUSH
38764: LD_INT 2
38766: EQUAL
38767: IFFALSE 38818
// begin j := IsControledBy ( i ) ;
38769: LD_ADDR_VAR 0 7
38773: PUSH
38774: LD_VAR 0 6
38778: PPUSH
38779: CALL_OW 312
38783: ST_TO_ADDR
// if j then
38784: LD_VAR 0 7
38788: IFFALSE 38818
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38790: LD_ADDR_VAR 0 10
38794: PUSH
38795: LD_VAR 0 10
38799: PUSH
38800: LD_VAR 0 7
38804: PPUSH
38805: LD_INT 3
38807: PPUSH
38808: CALL_OW 259
38812: PUSH
38813: LD_INT 3
38815: MUL
38816: MUL
38817: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38818: LD_VAR 0 6
38822: PPUSH
38823: CALL_OW 264
38827: PUSH
38828: LD_INT 5
38830: PUSH
38831: LD_INT 6
38833: PUSH
38834: LD_INT 46
38836: PUSH
38837: LD_INT 44
38839: PUSH
38840: LD_INT 47
38842: PUSH
38843: LD_INT 45
38845: PUSH
38846: LD_INT 28
38848: PUSH
38849: LD_INT 7
38851: PUSH
38852: LD_INT 27
38854: PUSH
38855: LD_INT 29
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: IN
38870: PUSH
38871: LD_VAR 0 1
38875: PPUSH
38876: LD_INT 52
38878: PPUSH
38879: CALL_OW 321
38883: PUSH
38884: LD_INT 2
38886: EQUAL
38887: AND
38888: IFFALSE 38905
// bpoints := bpoints * 1.2 ;
38890: LD_ADDR_VAR 0 10
38894: PUSH
38895: LD_VAR 0 10
38899: PUSH
38900: LD_REAL  1.20000000000000E+0000
38903: MUL
38904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38905: LD_VAR 0 6
38909: PPUSH
38910: CALL_OW 264
38914: PUSH
38915: LD_INT 6
38917: PUSH
38918: LD_INT 46
38920: PUSH
38921: LD_INT 47
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: LIST
38928: IN
38929: IFFALSE 38946
// bpoints := bpoints * 1.2 ;
38931: LD_ADDR_VAR 0 10
38935: PUSH
38936: LD_VAR 0 10
38940: PUSH
38941: LD_REAL  1.20000000000000E+0000
38944: MUL
38945: ST_TO_ADDR
// end ; unit_building :
38946: GO 38960
38948: LD_INT 3
38950: DOUBLE
38951: EQUAL
38952: IFTRUE 38956
38954: GO 38959
38956: POP
// ; end ;
38957: GO 38960
38959: POP
// for j = 1 to 3 do
38960: LD_ADDR_VAR 0 7
38964: PUSH
38965: DOUBLE
38966: LD_INT 1
38968: DEC
38969: ST_TO_ADDR
38970: LD_INT 3
38972: PUSH
38973: FOR_TO
38974: IFFALSE 39027
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38976: LD_ADDR_VAR 0 5
38980: PUSH
38981: LD_VAR 0 5
38985: PPUSH
38986: LD_VAR 0 7
38990: PPUSH
38991: LD_VAR 0 5
38995: PUSH
38996: LD_VAR 0 7
39000: ARRAY
39001: PUSH
39002: LD_VAR 0 9
39006: PUSH
39007: LD_VAR 0 7
39011: ARRAY
39012: PUSH
39013: LD_VAR 0 10
39017: MUL
39018: PLUS
39019: PPUSH
39020: CALL_OW 1
39024: ST_TO_ADDR
39025: GO 38973
39027: POP
39028: POP
// end ;
39029: GO 37508
39031: POP
39032: POP
// result := Replace ( result , 4 , tmp ) ;
39033: LD_ADDR_VAR 0 5
39037: PUSH
39038: LD_VAR 0 5
39042: PPUSH
39043: LD_INT 4
39045: PPUSH
39046: LD_VAR 0 8
39050: PPUSH
39051: CALL_OW 1
39055: ST_TO_ADDR
// end ;
39056: LD_VAR 0 5
39060: RET
// export function DangerAtRange ( unit , range ) ; begin
39061: LD_INT 0
39063: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39064: LD_ADDR_VAR 0 3
39068: PUSH
39069: LD_VAR 0 1
39073: PPUSH
39074: CALL_OW 255
39078: PPUSH
39079: LD_VAR 0 1
39083: PPUSH
39084: CALL_OW 250
39088: PPUSH
39089: LD_VAR 0 1
39093: PPUSH
39094: CALL_OW 251
39098: PPUSH
39099: LD_VAR 0 2
39103: PPUSH
39104: CALL 37360 0 4
39108: ST_TO_ADDR
// end ;
39109: LD_VAR 0 3
39113: RET
// export function DangerInArea ( side , area ) ; begin
39114: LD_INT 0
39116: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39117: LD_ADDR_VAR 0 3
39121: PUSH
39122: LD_VAR 0 2
39126: PPUSH
39127: LD_INT 81
39129: PUSH
39130: LD_VAR 0 1
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PPUSH
39139: CALL_OW 70
39143: ST_TO_ADDR
// end ;
39144: LD_VAR 0 3
39148: RET
// export function IsExtension ( b ) ; begin
39149: LD_INT 0
39151: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39152: LD_ADDR_VAR 0 2
39156: PUSH
39157: LD_VAR 0 1
39161: PUSH
39162: LD_INT 23
39164: PUSH
39165: LD_INT 20
39167: PUSH
39168: LD_INT 22
39170: PUSH
39171: LD_INT 17
39173: PUSH
39174: LD_INT 24
39176: PUSH
39177: LD_INT 21
39179: PUSH
39180: LD_INT 19
39182: PUSH
39183: LD_INT 16
39185: PUSH
39186: LD_INT 25
39188: PUSH
39189: LD_INT 18
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: IN
39204: ST_TO_ADDR
// end ;
39205: LD_VAR 0 2
39209: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39210: LD_INT 0
39212: PPUSH
39213: PPUSH
39214: PPUSH
// result := [ ] ;
39215: LD_ADDR_VAR 0 4
39219: PUSH
39220: EMPTY
39221: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39222: LD_ADDR_VAR 0 5
39226: PUSH
39227: LD_VAR 0 2
39231: PPUSH
39232: LD_INT 21
39234: PUSH
39235: LD_INT 3
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PPUSH
39242: CALL_OW 70
39246: ST_TO_ADDR
// if not tmp then
39247: LD_VAR 0 5
39251: NOT
39252: IFFALSE 39256
// exit ;
39254: GO 39320
// if checkLink then
39256: LD_VAR 0 3
39260: IFFALSE 39310
// begin for i in tmp do
39262: LD_ADDR_VAR 0 6
39266: PUSH
39267: LD_VAR 0 5
39271: PUSH
39272: FOR_IN
39273: IFFALSE 39308
// if GetBase ( i ) <> base then
39275: LD_VAR 0 6
39279: PPUSH
39280: CALL_OW 274
39284: PUSH
39285: LD_VAR 0 1
39289: NONEQUAL
39290: IFFALSE 39306
// ComLinkToBase ( base , i ) ;
39292: LD_VAR 0 1
39296: PPUSH
39297: LD_VAR 0 6
39301: PPUSH
39302: CALL_OW 169
39306: GO 39272
39308: POP
39309: POP
// end ; result := tmp ;
39310: LD_ADDR_VAR 0 4
39314: PUSH
39315: LD_VAR 0 5
39319: ST_TO_ADDR
// end ;
39320: LD_VAR 0 4
39324: RET
// export function ComComplete ( units , b ) ; var i ; begin
39325: LD_INT 0
39327: PPUSH
39328: PPUSH
// if not units then
39329: LD_VAR 0 1
39333: NOT
39334: IFFALSE 39338
// exit ;
39336: GO 39428
// for i in units do
39338: LD_ADDR_VAR 0 4
39342: PUSH
39343: LD_VAR 0 1
39347: PUSH
39348: FOR_IN
39349: IFFALSE 39426
// if BuildingStatus ( b ) = bs_build then
39351: LD_VAR 0 2
39355: PPUSH
39356: CALL_OW 461
39360: PUSH
39361: LD_INT 1
39363: EQUAL
39364: IFFALSE 39424
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39366: LD_VAR 0 4
39370: PPUSH
39371: LD_STRING h
39373: PUSH
39374: LD_VAR 0 2
39378: PPUSH
39379: CALL_OW 250
39383: PUSH
39384: LD_VAR 0 2
39388: PPUSH
39389: CALL_OW 251
39393: PUSH
39394: LD_VAR 0 2
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: PUSH
39417: EMPTY
39418: LIST
39419: PPUSH
39420: CALL_OW 446
39424: GO 39348
39426: POP
39427: POP
// end ;
39428: LD_VAR 0 3
39432: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39433: LD_INT 0
39435: PPUSH
39436: PPUSH
39437: PPUSH
39438: PPUSH
39439: PPUSH
39440: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39441: LD_VAR 0 1
39445: NOT
39446: PUSH
39447: LD_VAR 0 1
39451: PPUSH
39452: CALL_OW 263
39456: PUSH
39457: LD_INT 2
39459: NONEQUAL
39460: OR
39461: IFFALSE 39465
// exit ;
39463: GO 39781
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39465: LD_ADDR_VAR 0 6
39469: PUSH
39470: LD_INT 22
39472: PUSH
39473: LD_VAR 0 1
39477: PPUSH
39478: CALL_OW 255
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 2
39489: PUSH
39490: LD_INT 30
39492: PUSH
39493: LD_INT 36
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 34
39502: PUSH
39503: LD_INT 31
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: LIST
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PPUSH
39519: CALL_OW 69
39523: ST_TO_ADDR
// if not tmp then
39524: LD_VAR 0 6
39528: NOT
39529: IFFALSE 39533
// exit ;
39531: GO 39781
// result := [ ] ;
39533: LD_ADDR_VAR 0 2
39537: PUSH
39538: EMPTY
39539: ST_TO_ADDR
// for i in tmp do
39540: LD_ADDR_VAR 0 3
39544: PUSH
39545: LD_VAR 0 6
39549: PUSH
39550: FOR_IN
39551: IFFALSE 39622
// begin t := UnitsInside ( i ) ;
39553: LD_ADDR_VAR 0 4
39557: PUSH
39558: LD_VAR 0 3
39562: PPUSH
39563: CALL_OW 313
39567: ST_TO_ADDR
// if t then
39568: LD_VAR 0 4
39572: IFFALSE 39620
// for j in t do
39574: LD_ADDR_VAR 0 7
39578: PUSH
39579: LD_VAR 0 4
39583: PUSH
39584: FOR_IN
39585: IFFALSE 39618
// result := Replace ( result , result + 1 , j ) ;
39587: LD_ADDR_VAR 0 2
39591: PUSH
39592: LD_VAR 0 2
39596: PPUSH
39597: LD_VAR 0 2
39601: PUSH
39602: LD_INT 1
39604: PLUS
39605: PPUSH
39606: LD_VAR 0 7
39610: PPUSH
39611: CALL_OW 1
39615: ST_TO_ADDR
39616: GO 39584
39618: POP
39619: POP
// end ;
39620: GO 39550
39622: POP
39623: POP
// if not result then
39624: LD_VAR 0 2
39628: NOT
39629: IFFALSE 39633
// exit ;
39631: GO 39781
// mech := result [ 1 ] ;
39633: LD_ADDR_VAR 0 5
39637: PUSH
39638: LD_VAR 0 2
39642: PUSH
39643: LD_INT 1
39645: ARRAY
39646: ST_TO_ADDR
// if result > 1 then
39647: LD_VAR 0 2
39651: PUSH
39652: LD_INT 1
39654: GREATER
39655: IFFALSE 39767
// begin for i = 2 to result do
39657: LD_ADDR_VAR 0 3
39661: PUSH
39662: DOUBLE
39663: LD_INT 2
39665: DEC
39666: ST_TO_ADDR
39667: LD_VAR 0 2
39671: PUSH
39672: FOR_TO
39673: IFFALSE 39765
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39675: LD_ADDR_VAR 0 4
39679: PUSH
39680: LD_VAR 0 2
39684: PUSH
39685: LD_VAR 0 3
39689: ARRAY
39690: PPUSH
39691: LD_INT 3
39693: PPUSH
39694: CALL_OW 259
39698: PUSH
39699: LD_VAR 0 2
39703: PUSH
39704: LD_VAR 0 3
39708: ARRAY
39709: PPUSH
39710: CALL_OW 432
39714: MINUS
39715: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39716: LD_VAR 0 4
39720: PUSH
39721: LD_VAR 0 5
39725: PPUSH
39726: LD_INT 3
39728: PPUSH
39729: CALL_OW 259
39733: PUSH
39734: LD_VAR 0 5
39738: PPUSH
39739: CALL_OW 432
39743: MINUS
39744: GREATEREQUAL
39745: IFFALSE 39763
// mech := result [ i ] ;
39747: LD_ADDR_VAR 0 5
39751: PUSH
39752: LD_VAR 0 2
39756: PUSH
39757: LD_VAR 0 3
39761: ARRAY
39762: ST_TO_ADDR
// end ;
39763: GO 39672
39765: POP
39766: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39767: LD_VAR 0 1
39771: PPUSH
39772: LD_VAR 0 5
39776: PPUSH
39777: CALL_OW 135
// end ;
39781: LD_VAR 0 2
39785: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39786: LD_INT 0
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
39793: PPUSH
39794: PPUSH
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
39799: PPUSH
39800: PPUSH
// result := [ ] ;
39801: LD_ADDR_VAR 0 7
39805: PUSH
39806: EMPTY
39807: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39808: LD_VAR 0 1
39812: PPUSH
39813: CALL_OW 266
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: IN
39828: NOT
39829: IFFALSE 39833
// exit ;
39831: GO 41467
// if name then
39833: LD_VAR 0 3
39837: IFFALSE 39853
// SetBName ( base_dep , name ) ;
39839: LD_VAR 0 1
39843: PPUSH
39844: LD_VAR 0 3
39848: PPUSH
39849: CALL_OW 500
// base := GetBase ( base_dep ) ;
39853: LD_ADDR_VAR 0 15
39857: PUSH
39858: LD_VAR 0 1
39862: PPUSH
39863: CALL_OW 274
39867: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39868: LD_ADDR_VAR 0 16
39872: PUSH
39873: LD_VAR 0 1
39877: PPUSH
39878: CALL_OW 255
39882: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39883: LD_ADDR_VAR 0 17
39887: PUSH
39888: LD_VAR 0 1
39892: PPUSH
39893: CALL_OW 248
39897: ST_TO_ADDR
// if sources then
39898: LD_VAR 0 5
39902: IFFALSE 39949
// for i = 1 to 3 do
39904: LD_ADDR_VAR 0 8
39908: PUSH
39909: DOUBLE
39910: LD_INT 1
39912: DEC
39913: ST_TO_ADDR
39914: LD_INT 3
39916: PUSH
39917: FOR_TO
39918: IFFALSE 39947
// AddResourceType ( base , i , sources [ i ] ) ;
39920: LD_VAR 0 15
39924: PPUSH
39925: LD_VAR 0 8
39929: PPUSH
39930: LD_VAR 0 5
39934: PUSH
39935: LD_VAR 0 8
39939: ARRAY
39940: PPUSH
39941: CALL_OW 276
39945: GO 39917
39947: POP
39948: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39949: LD_ADDR_VAR 0 18
39953: PUSH
39954: LD_VAR 0 15
39958: PPUSH
39959: LD_VAR 0 2
39963: PPUSH
39964: LD_INT 1
39966: PPUSH
39967: CALL 39210 0 3
39971: ST_TO_ADDR
// InitHc ;
39972: CALL_OW 19
// InitUc ;
39976: CALL_OW 18
// uc_side := side ;
39980: LD_ADDR_OWVAR 20
39984: PUSH
39985: LD_VAR 0 16
39989: ST_TO_ADDR
// uc_nation := nation ;
39990: LD_ADDR_OWVAR 21
39994: PUSH
39995: LD_VAR 0 17
39999: ST_TO_ADDR
// if buildings then
40000: LD_VAR 0 18
40004: IFFALSE 41326
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40006: LD_ADDR_VAR 0 19
40010: PUSH
40011: LD_VAR 0 18
40015: PPUSH
40016: LD_INT 2
40018: PUSH
40019: LD_INT 30
40021: PUSH
40022: LD_INT 29
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 30
40031: PUSH
40032: LD_INT 30
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: LIST
40043: PPUSH
40044: CALL_OW 72
40048: ST_TO_ADDR
// if tmp then
40049: LD_VAR 0 19
40053: IFFALSE 40101
// for i in tmp do
40055: LD_ADDR_VAR 0 8
40059: PUSH
40060: LD_VAR 0 19
40064: PUSH
40065: FOR_IN
40066: IFFALSE 40099
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40068: LD_VAR 0 8
40072: PPUSH
40073: CALL_OW 250
40077: PPUSH
40078: LD_VAR 0 8
40082: PPUSH
40083: CALL_OW 251
40087: PPUSH
40088: LD_VAR 0 16
40092: PPUSH
40093: CALL_OW 441
40097: GO 40065
40099: POP
40100: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40101: LD_VAR 0 18
40105: PPUSH
40106: LD_INT 2
40108: PUSH
40109: LD_INT 30
40111: PUSH
40112: LD_INT 32
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 30
40121: PUSH
40122: LD_INT 33
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: PPUSH
40134: CALL_OW 72
40138: IFFALSE 40226
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40140: LD_ADDR_VAR 0 8
40144: PUSH
40145: LD_VAR 0 18
40149: PPUSH
40150: LD_INT 2
40152: PUSH
40153: LD_INT 30
40155: PUSH
40156: LD_INT 32
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 30
40165: PUSH
40166: LD_INT 33
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: LIST
40177: PPUSH
40178: CALL_OW 72
40182: PUSH
40183: FOR_IN
40184: IFFALSE 40224
// begin if not GetBWeapon ( i ) then
40186: LD_VAR 0 8
40190: PPUSH
40191: CALL_OW 269
40195: NOT
40196: IFFALSE 40222
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40198: LD_VAR 0 8
40202: PPUSH
40203: LD_VAR 0 8
40207: PPUSH
40208: LD_VAR 0 2
40212: PPUSH
40213: CALL 41472 0 2
40217: PPUSH
40218: CALL_OW 431
// end ;
40222: GO 40183
40224: POP
40225: POP
// end ; for i = 1 to personel do
40226: LD_ADDR_VAR 0 8
40230: PUSH
40231: DOUBLE
40232: LD_INT 1
40234: DEC
40235: ST_TO_ADDR
40236: LD_VAR 0 6
40240: PUSH
40241: FOR_TO
40242: IFFALSE 41306
// begin if i > 4 then
40244: LD_VAR 0 8
40248: PUSH
40249: LD_INT 4
40251: GREATER
40252: IFFALSE 40256
// break ;
40254: GO 41306
// case i of 1 :
40256: LD_VAR 0 8
40260: PUSH
40261: LD_INT 1
40263: DOUBLE
40264: EQUAL
40265: IFTRUE 40269
40267: GO 40349
40269: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40270: LD_ADDR_VAR 0 12
40274: PUSH
40275: LD_VAR 0 18
40279: PPUSH
40280: LD_INT 22
40282: PUSH
40283: LD_VAR 0 16
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 58
40294: PUSH
40295: EMPTY
40296: LIST
40297: PUSH
40298: LD_INT 2
40300: PUSH
40301: LD_INT 30
40303: PUSH
40304: LD_INT 32
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 30
40313: PUSH
40314: LD_INT 4
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 30
40323: PUSH
40324: LD_INT 5
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: LIST
40341: PPUSH
40342: CALL_OW 72
40346: ST_TO_ADDR
40347: GO 40571
40349: LD_INT 2
40351: DOUBLE
40352: EQUAL
40353: IFTRUE 40357
40355: GO 40419
40357: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40358: LD_ADDR_VAR 0 12
40362: PUSH
40363: LD_VAR 0 18
40367: PPUSH
40368: LD_INT 22
40370: PUSH
40371: LD_VAR 0 16
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: PUSH
40383: LD_INT 30
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 30
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: LIST
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PPUSH
40412: CALL_OW 72
40416: ST_TO_ADDR
40417: GO 40571
40419: LD_INT 3
40421: DOUBLE
40422: EQUAL
40423: IFTRUE 40427
40425: GO 40489
40427: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40428: LD_ADDR_VAR 0 12
40432: PUSH
40433: LD_VAR 0 18
40437: PPUSH
40438: LD_INT 22
40440: PUSH
40441: LD_VAR 0 16
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: LD_INT 30
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 30
40465: PUSH
40466: LD_INT 3
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: LIST
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PPUSH
40482: CALL_OW 72
40486: ST_TO_ADDR
40487: GO 40571
40489: LD_INT 4
40491: DOUBLE
40492: EQUAL
40493: IFTRUE 40497
40495: GO 40570
40497: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40498: LD_ADDR_VAR 0 12
40502: PUSH
40503: LD_VAR 0 18
40507: PPUSH
40508: LD_INT 22
40510: PUSH
40511: LD_VAR 0 16
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: LD_INT 30
40525: PUSH
40526: LD_INT 6
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 30
40535: PUSH
40536: LD_INT 7
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 30
40545: PUSH
40546: LD_INT 8
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PPUSH
40563: CALL_OW 72
40567: ST_TO_ADDR
40568: GO 40571
40570: POP
// if i = 1 then
40571: LD_VAR 0 8
40575: PUSH
40576: LD_INT 1
40578: EQUAL
40579: IFFALSE 40690
// begin tmp := [ ] ;
40581: LD_ADDR_VAR 0 19
40585: PUSH
40586: EMPTY
40587: ST_TO_ADDR
// for j in f do
40588: LD_ADDR_VAR 0 9
40592: PUSH
40593: LD_VAR 0 12
40597: PUSH
40598: FOR_IN
40599: IFFALSE 40672
// if GetBType ( j ) = b_bunker then
40601: LD_VAR 0 9
40605: PPUSH
40606: CALL_OW 266
40610: PUSH
40611: LD_INT 32
40613: EQUAL
40614: IFFALSE 40641
// tmp := Insert ( tmp , 1 , j ) else
40616: LD_ADDR_VAR 0 19
40620: PUSH
40621: LD_VAR 0 19
40625: PPUSH
40626: LD_INT 1
40628: PPUSH
40629: LD_VAR 0 9
40633: PPUSH
40634: CALL_OW 2
40638: ST_TO_ADDR
40639: GO 40670
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40641: LD_ADDR_VAR 0 19
40645: PUSH
40646: LD_VAR 0 19
40650: PPUSH
40651: LD_VAR 0 19
40655: PUSH
40656: LD_INT 1
40658: PLUS
40659: PPUSH
40660: LD_VAR 0 9
40664: PPUSH
40665: CALL_OW 2
40669: ST_TO_ADDR
40670: GO 40598
40672: POP
40673: POP
// if tmp then
40674: LD_VAR 0 19
40678: IFFALSE 40690
// f := tmp ;
40680: LD_ADDR_VAR 0 12
40684: PUSH
40685: LD_VAR 0 19
40689: ST_TO_ADDR
// end ; x := personel [ i ] ;
40690: LD_ADDR_VAR 0 13
40694: PUSH
40695: LD_VAR 0 6
40699: PUSH
40700: LD_VAR 0 8
40704: ARRAY
40705: ST_TO_ADDR
// if x = - 1 then
40706: LD_VAR 0 13
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: EQUAL
40715: IFFALSE 40924
// begin for j in f do
40717: LD_ADDR_VAR 0 9
40721: PUSH
40722: LD_VAR 0 12
40726: PUSH
40727: FOR_IN
40728: IFFALSE 40920
// repeat InitHc ;
40730: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40734: LD_VAR 0 9
40738: PPUSH
40739: CALL_OW 266
40743: PUSH
40744: LD_INT 5
40746: EQUAL
40747: IFFALSE 40817
// begin if UnitsInside ( j ) < 3 then
40749: LD_VAR 0 9
40753: PPUSH
40754: CALL_OW 313
40758: PUSH
40759: LD_INT 3
40761: LESS
40762: IFFALSE 40798
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40764: LD_INT 0
40766: PPUSH
40767: LD_INT 5
40769: PUSH
40770: LD_INT 8
40772: PUSH
40773: LD_INT 9
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: LIST
40780: PUSH
40781: LD_VAR 0 17
40785: ARRAY
40786: PPUSH
40787: LD_VAR 0 4
40791: PPUSH
40792: CALL_OW 380
40796: GO 40815
// PrepareHuman ( false , i , skill ) ;
40798: LD_INT 0
40800: PPUSH
40801: LD_VAR 0 8
40805: PPUSH
40806: LD_VAR 0 4
40810: PPUSH
40811: CALL_OW 380
// end else
40815: GO 40834
// PrepareHuman ( false , i , skill ) ;
40817: LD_INT 0
40819: PPUSH
40820: LD_VAR 0 8
40824: PPUSH
40825: LD_VAR 0 4
40829: PPUSH
40830: CALL_OW 380
// un := CreateHuman ;
40834: LD_ADDR_VAR 0 14
40838: PUSH
40839: CALL_OW 44
40843: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40844: LD_ADDR_VAR 0 7
40848: PUSH
40849: LD_VAR 0 7
40853: PPUSH
40854: LD_INT 1
40856: PPUSH
40857: LD_VAR 0 14
40861: PPUSH
40862: CALL_OW 2
40866: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40867: LD_VAR 0 14
40871: PPUSH
40872: LD_VAR 0 9
40876: PPUSH
40877: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40881: LD_VAR 0 9
40885: PPUSH
40886: CALL_OW 313
40890: PUSH
40891: LD_INT 6
40893: EQUAL
40894: PUSH
40895: LD_VAR 0 9
40899: PPUSH
40900: CALL_OW 266
40904: PUSH
40905: LD_INT 32
40907: PUSH
40908: LD_INT 31
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: IN
40915: OR
40916: IFFALSE 40730
40918: GO 40727
40920: POP
40921: POP
// end else
40922: GO 41304
// for j = 1 to x do
40924: LD_ADDR_VAR 0 9
40928: PUSH
40929: DOUBLE
40930: LD_INT 1
40932: DEC
40933: ST_TO_ADDR
40934: LD_VAR 0 13
40938: PUSH
40939: FOR_TO
40940: IFFALSE 41302
// begin InitHc ;
40942: CALL_OW 19
// if not f then
40946: LD_VAR 0 12
40950: NOT
40951: IFFALSE 41040
// begin PrepareHuman ( false , i , skill ) ;
40953: LD_INT 0
40955: PPUSH
40956: LD_VAR 0 8
40960: PPUSH
40961: LD_VAR 0 4
40965: PPUSH
40966: CALL_OW 380
// un := CreateHuman ;
40970: LD_ADDR_VAR 0 14
40974: PUSH
40975: CALL_OW 44
40979: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40980: LD_ADDR_VAR 0 7
40984: PUSH
40985: LD_VAR 0 7
40989: PPUSH
40990: LD_INT 1
40992: PPUSH
40993: LD_VAR 0 14
40997: PPUSH
40998: CALL_OW 2
41002: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41003: LD_VAR 0 14
41007: PPUSH
41008: LD_VAR 0 1
41012: PPUSH
41013: CALL_OW 250
41017: PPUSH
41018: LD_VAR 0 1
41022: PPUSH
41023: CALL_OW 251
41027: PPUSH
41028: LD_INT 10
41030: PPUSH
41031: LD_INT 0
41033: PPUSH
41034: CALL_OW 50
// continue ;
41038: GO 40939
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41040: LD_VAR 0 12
41044: PUSH
41045: LD_INT 1
41047: ARRAY
41048: PPUSH
41049: CALL_OW 313
41053: PUSH
41054: LD_VAR 0 12
41058: PUSH
41059: LD_INT 1
41061: ARRAY
41062: PPUSH
41063: CALL_OW 266
41067: PUSH
41068: LD_INT 32
41070: PUSH
41071: LD_INT 31
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: IN
41078: AND
41079: PUSH
41080: LD_VAR 0 12
41084: PUSH
41085: LD_INT 1
41087: ARRAY
41088: PPUSH
41089: CALL_OW 313
41093: PUSH
41094: LD_INT 6
41096: EQUAL
41097: OR
41098: IFFALSE 41118
// f := Delete ( f , 1 ) ;
41100: LD_ADDR_VAR 0 12
41104: PUSH
41105: LD_VAR 0 12
41109: PPUSH
41110: LD_INT 1
41112: PPUSH
41113: CALL_OW 3
41117: ST_TO_ADDR
// if not f then
41118: LD_VAR 0 12
41122: NOT
41123: IFFALSE 41141
// begin x := x + 2 ;
41125: LD_ADDR_VAR 0 13
41129: PUSH
41130: LD_VAR 0 13
41134: PUSH
41135: LD_INT 2
41137: PLUS
41138: ST_TO_ADDR
// continue ;
41139: GO 40939
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41141: LD_VAR 0 12
41145: PUSH
41146: LD_INT 1
41148: ARRAY
41149: PPUSH
41150: CALL_OW 266
41154: PUSH
41155: LD_INT 5
41157: EQUAL
41158: IFFALSE 41232
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41160: LD_VAR 0 12
41164: PUSH
41165: LD_INT 1
41167: ARRAY
41168: PPUSH
41169: CALL_OW 313
41173: PUSH
41174: LD_INT 3
41176: LESS
41177: IFFALSE 41213
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41179: LD_INT 0
41181: PPUSH
41182: LD_INT 5
41184: PUSH
41185: LD_INT 8
41187: PUSH
41188: LD_INT 9
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: LIST
41195: PUSH
41196: LD_VAR 0 17
41200: ARRAY
41201: PPUSH
41202: LD_VAR 0 4
41206: PPUSH
41207: CALL_OW 380
41211: GO 41230
// PrepareHuman ( false , i , skill ) ;
41213: LD_INT 0
41215: PPUSH
41216: LD_VAR 0 8
41220: PPUSH
41221: LD_VAR 0 4
41225: PPUSH
41226: CALL_OW 380
// end else
41230: GO 41249
// PrepareHuman ( false , i , skill ) ;
41232: LD_INT 0
41234: PPUSH
41235: LD_VAR 0 8
41239: PPUSH
41240: LD_VAR 0 4
41244: PPUSH
41245: CALL_OW 380
// un := CreateHuman ;
41249: LD_ADDR_VAR 0 14
41253: PUSH
41254: CALL_OW 44
41258: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41259: LD_ADDR_VAR 0 7
41263: PUSH
41264: LD_VAR 0 7
41268: PPUSH
41269: LD_INT 1
41271: PPUSH
41272: LD_VAR 0 14
41276: PPUSH
41277: CALL_OW 2
41281: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41282: LD_VAR 0 14
41286: PPUSH
41287: LD_VAR 0 12
41291: PUSH
41292: LD_INT 1
41294: ARRAY
41295: PPUSH
41296: CALL_OW 52
// end ;
41300: GO 40939
41302: POP
41303: POP
// end ;
41304: GO 40241
41306: POP
41307: POP
// result := result ^ buildings ;
41308: LD_ADDR_VAR 0 7
41312: PUSH
41313: LD_VAR 0 7
41317: PUSH
41318: LD_VAR 0 18
41322: ADD
41323: ST_TO_ADDR
// end else
41324: GO 41467
// begin for i = 1 to personel do
41326: LD_ADDR_VAR 0 8
41330: PUSH
41331: DOUBLE
41332: LD_INT 1
41334: DEC
41335: ST_TO_ADDR
41336: LD_VAR 0 6
41340: PUSH
41341: FOR_TO
41342: IFFALSE 41465
// begin if i > 4 then
41344: LD_VAR 0 8
41348: PUSH
41349: LD_INT 4
41351: GREATER
41352: IFFALSE 41356
// break ;
41354: GO 41465
// x := personel [ i ] ;
41356: LD_ADDR_VAR 0 13
41360: PUSH
41361: LD_VAR 0 6
41365: PUSH
41366: LD_VAR 0 8
41370: ARRAY
41371: ST_TO_ADDR
// if x = - 1 then
41372: LD_VAR 0 13
41376: PUSH
41377: LD_INT 1
41379: NEG
41380: EQUAL
41381: IFFALSE 41385
// continue ;
41383: GO 41341
// PrepareHuman ( false , i , skill ) ;
41385: LD_INT 0
41387: PPUSH
41388: LD_VAR 0 8
41392: PPUSH
41393: LD_VAR 0 4
41397: PPUSH
41398: CALL_OW 380
// un := CreateHuman ;
41402: LD_ADDR_VAR 0 14
41406: PUSH
41407: CALL_OW 44
41411: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41412: LD_VAR 0 14
41416: PPUSH
41417: LD_VAR 0 1
41421: PPUSH
41422: CALL_OW 250
41426: PPUSH
41427: LD_VAR 0 1
41431: PPUSH
41432: CALL_OW 251
41436: PPUSH
41437: LD_INT 10
41439: PPUSH
41440: LD_INT 0
41442: PPUSH
41443: CALL_OW 50
// result := result ^ un ;
41447: LD_ADDR_VAR 0 7
41451: PUSH
41452: LD_VAR 0 7
41456: PUSH
41457: LD_VAR 0 14
41461: ADD
41462: ST_TO_ADDR
// end ;
41463: GO 41341
41465: POP
41466: POP
// end ; end ;
41467: LD_VAR 0 7
41471: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41472: LD_INT 0
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
41481: PPUSH
41482: PPUSH
41483: PPUSH
41484: PPUSH
41485: PPUSH
41486: PPUSH
41487: PPUSH
41488: PPUSH
41489: PPUSH
// result := false ;
41490: LD_ADDR_VAR 0 3
41494: PUSH
41495: LD_INT 0
41497: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41498: LD_VAR 0 1
41502: NOT
41503: PUSH
41504: LD_VAR 0 1
41508: PPUSH
41509: CALL_OW 266
41513: PUSH
41514: LD_INT 32
41516: PUSH
41517: LD_INT 33
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: IN
41524: NOT
41525: OR
41526: IFFALSE 41530
// exit ;
41528: GO 42639
// nat := GetNation ( tower ) ;
41530: LD_ADDR_VAR 0 12
41534: PUSH
41535: LD_VAR 0 1
41539: PPUSH
41540: CALL_OW 248
41544: ST_TO_ADDR
// side := GetSide ( tower ) ;
41545: LD_ADDR_VAR 0 16
41549: PUSH
41550: LD_VAR 0 1
41554: PPUSH
41555: CALL_OW 255
41559: ST_TO_ADDR
// x := GetX ( tower ) ;
41560: LD_ADDR_VAR 0 10
41564: PUSH
41565: LD_VAR 0 1
41569: PPUSH
41570: CALL_OW 250
41574: ST_TO_ADDR
// y := GetY ( tower ) ;
41575: LD_ADDR_VAR 0 11
41579: PUSH
41580: LD_VAR 0 1
41584: PPUSH
41585: CALL_OW 251
41589: ST_TO_ADDR
// if not x or not y then
41590: LD_VAR 0 10
41594: NOT
41595: PUSH
41596: LD_VAR 0 11
41600: NOT
41601: OR
41602: IFFALSE 41606
// exit ;
41604: GO 42639
// weapon := 0 ;
41606: LD_ADDR_VAR 0 18
41610: PUSH
41611: LD_INT 0
41613: ST_TO_ADDR
// fac_list := [ ] ;
41614: LD_ADDR_VAR 0 17
41618: PUSH
41619: EMPTY
41620: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41621: LD_ADDR_VAR 0 6
41625: PUSH
41626: LD_VAR 0 1
41630: PPUSH
41631: CALL_OW 274
41635: PPUSH
41636: LD_VAR 0 2
41640: PPUSH
41641: LD_INT 0
41643: PPUSH
41644: CALL 39210 0 3
41648: PPUSH
41649: LD_INT 30
41651: PUSH
41652: LD_INT 3
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PPUSH
41659: CALL_OW 72
41663: ST_TO_ADDR
// if not factories then
41664: LD_VAR 0 6
41668: NOT
41669: IFFALSE 41673
// exit ;
41671: GO 42639
// for i in factories do
41673: LD_ADDR_VAR 0 8
41677: PUSH
41678: LD_VAR 0 6
41682: PUSH
41683: FOR_IN
41684: IFFALSE 41709
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41686: LD_ADDR_VAR 0 17
41690: PUSH
41691: LD_VAR 0 17
41695: PUSH
41696: LD_VAR 0 8
41700: PPUSH
41701: CALL_OW 478
41705: UNION
41706: ST_TO_ADDR
41707: GO 41683
41709: POP
41710: POP
// if not fac_list then
41711: LD_VAR 0 17
41715: NOT
41716: IFFALSE 41720
// exit ;
41718: GO 42639
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41720: LD_ADDR_VAR 0 5
41724: PUSH
41725: LD_INT 4
41727: PUSH
41728: LD_INT 5
41730: PUSH
41731: LD_INT 9
41733: PUSH
41734: LD_INT 10
41736: PUSH
41737: LD_INT 6
41739: PUSH
41740: LD_INT 7
41742: PUSH
41743: LD_INT 11
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 27
41757: PUSH
41758: LD_INT 28
41760: PUSH
41761: LD_INT 26
41763: PUSH
41764: LD_INT 30
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 43
41775: PUSH
41776: LD_INT 44
41778: PUSH
41779: LD_INT 46
41781: PUSH
41782: LD_INT 45
41784: PUSH
41785: LD_INT 47
41787: PUSH
41788: LD_INT 49
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: LIST
41803: PUSH
41804: LD_VAR 0 12
41808: ARRAY
41809: ST_TO_ADDR
// list := list isect fac_list ;
41810: LD_ADDR_VAR 0 5
41814: PUSH
41815: LD_VAR 0 5
41819: PUSH
41820: LD_VAR 0 17
41824: ISECT
41825: ST_TO_ADDR
// if not list then
41826: LD_VAR 0 5
41830: NOT
41831: IFFALSE 41835
// exit ;
41833: GO 42639
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41835: LD_VAR 0 12
41839: PUSH
41840: LD_INT 3
41842: EQUAL
41843: PUSH
41844: LD_INT 49
41846: PUSH
41847: LD_VAR 0 5
41851: IN
41852: AND
41853: PUSH
41854: LD_INT 31
41856: PPUSH
41857: LD_VAR 0 16
41861: PPUSH
41862: CALL_OW 321
41866: PUSH
41867: LD_INT 2
41869: EQUAL
41870: AND
41871: IFFALSE 41931
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41873: LD_INT 22
41875: PUSH
41876: LD_VAR 0 16
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 35
41887: PUSH
41888: LD_INT 49
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 91
41897: PUSH
41898: LD_VAR 0 1
41902: PUSH
41903: LD_INT 10
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: LIST
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: LIST
41915: PPUSH
41916: CALL_OW 69
41920: NOT
41921: IFFALSE 41931
// weapon := ru_time_lapser ;
41923: LD_ADDR_VAR 0 18
41927: PUSH
41928: LD_INT 49
41930: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41931: LD_VAR 0 12
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: IN
41946: PUSH
41947: LD_INT 11
41949: PUSH
41950: LD_VAR 0 5
41954: IN
41955: PUSH
41956: LD_INT 30
41958: PUSH
41959: LD_VAR 0 5
41963: IN
41964: OR
41965: AND
41966: PUSH
41967: LD_INT 6
41969: PPUSH
41970: LD_VAR 0 16
41974: PPUSH
41975: CALL_OW 321
41979: PUSH
41980: LD_INT 2
41982: EQUAL
41983: AND
41984: IFFALSE 42149
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41986: LD_INT 22
41988: PUSH
41989: LD_VAR 0 16
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: LD_INT 35
42003: PUSH
42004: LD_INT 11
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 35
42013: PUSH
42014: LD_INT 30
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 91
42028: PUSH
42029: LD_VAR 0 1
42033: PUSH
42034: LD_INT 18
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: LIST
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: LIST
42046: PPUSH
42047: CALL_OW 69
42051: NOT
42052: PUSH
42053: LD_INT 22
42055: PUSH
42056: LD_VAR 0 16
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: LD_INT 30
42070: PUSH
42071: LD_INT 32
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 30
42080: PUSH
42081: LD_INT 33
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 91
42095: PUSH
42096: LD_VAR 0 1
42100: PUSH
42101: LD_INT 12
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: LIST
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: LIST
42113: PUSH
42114: EMPTY
42115: LIST
42116: PPUSH
42117: CALL_OW 69
42121: PUSH
42122: LD_INT 2
42124: GREATER
42125: AND
42126: IFFALSE 42149
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42128: LD_ADDR_VAR 0 18
42132: PUSH
42133: LD_INT 11
42135: PUSH
42136: LD_INT 30
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_VAR 0 12
42147: ARRAY
42148: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42149: LD_VAR 0 18
42153: NOT
42154: PUSH
42155: LD_INT 40
42157: PPUSH
42158: LD_VAR 0 16
42162: PPUSH
42163: CALL_OW 321
42167: PUSH
42168: LD_INT 2
42170: EQUAL
42171: AND
42172: PUSH
42173: LD_INT 7
42175: PUSH
42176: LD_VAR 0 5
42180: IN
42181: PUSH
42182: LD_INT 28
42184: PUSH
42185: LD_VAR 0 5
42189: IN
42190: OR
42191: PUSH
42192: LD_INT 45
42194: PUSH
42195: LD_VAR 0 5
42199: IN
42200: OR
42201: AND
42202: IFFALSE 42456
// begin hex := GetHexInfo ( x , y ) ;
42204: LD_ADDR_VAR 0 4
42208: PUSH
42209: LD_VAR 0 10
42213: PPUSH
42214: LD_VAR 0 11
42218: PPUSH
42219: CALL_OW 546
42223: ST_TO_ADDR
// if hex [ 1 ] then
42224: LD_VAR 0 4
42228: PUSH
42229: LD_INT 1
42231: ARRAY
42232: IFFALSE 42236
// exit ;
42234: GO 42639
// height := hex [ 2 ] ;
42236: LD_ADDR_VAR 0 15
42240: PUSH
42241: LD_VAR 0 4
42245: PUSH
42246: LD_INT 2
42248: ARRAY
42249: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42250: LD_ADDR_VAR 0 14
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 2
42260: PUSH
42261: LD_INT 3
42263: PUSH
42264: LD_INT 5
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: ST_TO_ADDR
// for i in tmp do
42273: LD_ADDR_VAR 0 8
42277: PUSH
42278: LD_VAR 0 14
42282: PUSH
42283: FOR_IN
42284: IFFALSE 42454
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42286: LD_ADDR_VAR 0 9
42290: PUSH
42291: LD_VAR 0 10
42295: PPUSH
42296: LD_VAR 0 8
42300: PPUSH
42301: LD_INT 5
42303: PPUSH
42304: CALL_OW 272
42308: PUSH
42309: LD_VAR 0 11
42313: PPUSH
42314: LD_VAR 0 8
42318: PPUSH
42319: LD_INT 5
42321: PPUSH
42322: CALL_OW 273
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42331: LD_VAR 0 9
42335: PUSH
42336: LD_INT 1
42338: ARRAY
42339: PPUSH
42340: LD_VAR 0 9
42344: PUSH
42345: LD_INT 2
42347: ARRAY
42348: PPUSH
42349: CALL_OW 488
42353: IFFALSE 42452
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42355: LD_ADDR_VAR 0 4
42359: PUSH
42360: LD_VAR 0 9
42364: PUSH
42365: LD_INT 1
42367: ARRAY
42368: PPUSH
42369: LD_VAR 0 9
42373: PUSH
42374: LD_INT 2
42376: ARRAY
42377: PPUSH
42378: CALL_OW 546
42382: ST_TO_ADDR
// if hex [ 1 ] then
42383: LD_VAR 0 4
42387: PUSH
42388: LD_INT 1
42390: ARRAY
42391: IFFALSE 42395
// continue ;
42393: GO 42283
// h := hex [ 2 ] ;
42395: LD_ADDR_VAR 0 13
42399: PUSH
42400: LD_VAR 0 4
42404: PUSH
42405: LD_INT 2
42407: ARRAY
42408: ST_TO_ADDR
// if h + 7 < height then
42409: LD_VAR 0 13
42413: PUSH
42414: LD_INT 7
42416: PLUS
42417: PUSH
42418: LD_VAR 0 15
42422: LESS
42423: IFFALSE 42452
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42425: LD_ADDR_VAR 0 18
42429: PUSH
42430: LD_INT 7
42432: PUSH
42433: LD_INT 28
42435: PUSH
42436: LD_INT 45
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: LIST
42443: PUSH
42444: LD_VAR 0 12
42448: ARRAY
42449: ST_TO_ADDR
// break ;
42450: GO 42454
// end ; end ; end ;
42452: GO 42283
42454: POP
42455: POP
// end ; if not weapon then
42456: LD_VAR 0 18
42460: NOT
42461: IFFALSE 42521
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42463: LD_ADDR_VAR 0 5
42467: PUSH
42468: LD_VAR 0 5
42472: PUSH
42473: LD_INT 11
42475: PUSH
42476: LD_INT 30
42478: PUSH
42479: LD_INT 49
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: LIST
42486: DIFF
42487: ST_TO_ADDR
// if not list then
42488: LD_VAR 0 5
42492: NOT
42493: IFFALSE 42497
// exit ;
42495: GO 42639
// weapon := list [ rand ( 1 , list ) ] ;
42497: LD_ADDR_VAR 0 18
42501: PUSH
42502: LD_VAR 0 5
42506: PUSH
42507: LD_INT 1
42509: PPUSH
42510: LD_VAR 0 5
42514: PPUSH
42515: CALL_OW 12
42519: ARRAY
42520: ST_TO_ADDR
// end ; if weapon then
42521: LD_VAR 0 18
42525: IFFALSE 42639
// begin tmp := CostOfWeapon ( weapon ) ;
42527: LD_ADDR_VAR 0 14
42531: PUSH
42532: LD_VAR 0 18
42536: PPUSH
42537: CALL_OW 451
42541: ST_TO_ADDR
// j := GetBase ( tower ) ;
42542: LD_ADDR_VAR 0 9
42546: PUSH
42547: LD_VAR 0 1
42551: PPUSH
42552: CALL_OW 274
42556: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42557: LD_VAR 0 9
42561: PPUSH
42562: LD_INT 1
42564: PPUSH
42565: CALL_OW 275
42569: PUSH
42570: LD_VAR 0 14
42574: PUSH
42575: LD_INT 1
42577: ARRAY
42578: GREATEREQUAL
42579: PUSH
42580: LD_VAR 0 9
42584: PPUSH
42585: LD_INT 2
42587: PPUSH
42588: CALL_OW 275
42592: PUSH
42593: LD_VAR 0 14
42597: PUSH
42598: LD_INT 2
42600: ARRAY
42601: GREATEREQUAL
42602: AND
42603: PUSH
42604: LD_VAR 0 9
42608: PPUSH
42609: LD_INT 3
42611: PPUSH
42612: CALL_OW 275
42616: PUSH
42617: LD_VAR 0 14
42621: PUSH
42622: LD_INT 3
42624: ARRAY
42625: GREATEREQUAL
42626: AND
42627: IFFALSE 42639
// result := weapon ;
42629: LD_ADDR_VAR 0 3
42633: PUSH
42634: LD_VAR 0 18
42638: ST_TO_ADDR
// end ; end ;
42639: LD_VAR 0 3
42643: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42644: LD_INT 0
42646: PPUSH
42647: PPUSH
// result := true ;
42648: LD_ADDR_VAR 0 3
42652: PUSH
42653: LD_INT 1
42655: ST_TO_ADDR
// if array1 = array2 then
42656: LD_VAR 0 1
42660: PUSH
42661: LD_VAR 0 2
42665: EQUAL
42666: IFFALSE 42726
// begin for i = 1 to array1 do
42668: LD_ADDR_VAR 0 4
42672: PUSH
42673: DOUBLE
42674: LD_INT 1
42676: DEC
42677: ST_TO_ADDR
42678: LD_VAR 0 1
42682: PUSH
42683: FOR_TO
42684: IFFALSE 42722
// if array1 [ i ] <> array2 [ i ] then
42686: LD_VAR 0 1
42690: PUSH
42691: LD_VAR 0 4
42695: ARRAY
42696: PUSH
42697: LD_VAR 0 2
42701: PUSH
42702: LD_VAR 0 4
42706: ARRAY
42707: NONEQUAL
42708: IFFALSE 42720
// begin result := false ;
42710: LD_ADDR_VAR 0 3
42714: PUSH
42715: LD_INT 0
42717: ST_TO_ADDR
// break ;
42718: GO 42722
// end ;
42720: GO 42683
42722: POP
42723: POP
// end else
42724: GO 42734
// result := false ;
42726: LD_ADDR_VAR 0 3
42730: PUSH
42731: LD_INT 0
42733: ST_TO_ADDR
// end ;
42734: LD_VAR 0 3
42738: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42739: LD_INT 0
42741: PPUSH
42742: PPUSH
// if not array1 or not array2 then
42743: LD_VAR 0 1
42747: NOT
42748: PUSH
42749: LD_VAR 0 2
42753: NOT
42754: OR
42755: IFFALSE 42759
// exit ;
42757: GO 42823
// result := true ;
42759: LD_ADDR_VAR 0 3
42763: PUSH
42764: LD_INT 1
42766: ST_TO_ADDR
// for i = 1 to array1 do
42767: LD_ADDR_VAR 0 4
42771: PUSH
42772: DOUBLE
42773: LD_INT 1
42775: DEC
42776: ST_TO_ADDR
42777: LD_VAR 0 1
42781: PUSH
42782: FOR_TO
42783: IFFALSE 42821
// if array1 [ i ] <> array2 [ i ] then
42785: LD_VAR 0 1
42789: PUSH
42790: LD_VAR 0 4
42794: ARRAY
42795: PUSH
42796: LD_VAR 0 2
42800: PUSH
42801: LD_VAR 0 4
42805: ARRAY
42806: NONEQUAL
42807: IFFALSE 42819
// begin result := false ;
42809: LD_ADDR_VAR 0 3
42813: PUSH
42814: LD_INT 0
42816: ST_TO_ADDR
// break ;
42817: GO 42821
// end ;
42819: GO 42782
42821: POP
42822: POP
// end ;
42823: LD_VAR 0 3
42827: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42828: LD_INT 0
42830: PPUSH
42831: PPUSH
42832: PPUSH
// pom := GetBase ( fac ) ;
42833: LD_ADDR_VAR 0 5
42837: PUSH
42838: LD_VAR 0 1
42842: PPUSH
42843: CALL_OW 274
42847: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42848: LD_ADDR_VAR 0 4
42852: PUSH
42853: LD_VAR 0 2
42857: PUSH
42858: LD_INT 1
42860: ARRAY
42861: PPUSH
42862: LD_VAR 0 2
42866: PUSH
42867: LD_INT 2
42869: ARRAY
42870: PPUSH
42871: LD_VAR 0 2
42875: PUSH
42876: LD_INT 3
42878: ARRAY
42879: PPUSH
42880: LD_VAR 0 2
42884: PUSH
42885: LD_INT 4
42887: ARRAY
42888: PPUSH
42889: CALL_OW 449
42893: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42894: LD_ADDR_VAR 0 3
42898: PUSH
42899: LD_VAR 0 5
42903: PPUSH
42904: LD_INT 1
42906: PPUSH
42907: CALL_OW 275
42911: PUSH
42912: LD_VAR 0 4
42916: PUSH
42917: LD_INT 1
42919: ARRAY
42920: GREATEREQUAL
42921: PUSH
42922: LD_VAR 0 5
42926: PPUSH
42927: LD_INT 2
42929: PPUSH
42930: CALL_OW 275
42934: PUSH
42935: LD_VAR 0 4
42939: PUSH
42940: LD_INT 2
42942: ARRAY
42943: GREATEREQUAL
42944: AND
42945: PUSH
42946: LD_VAR 0 5
42950: PPUSH
42951: LD_INT 3
42953: PPUSH
42954: CALL_OW 275
42958: PUSH
42959: LD_VAR 0 4
42963: PUSH
42964: LD_INT 3
42966: ARRAY
42967: GREATEREQUAL
42968: AND
42969: ST_TO_ADDR
// end ;
42970: LD_VAR 0 3
42974: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42975: LD_INT 0
42977: PPUSH
42978: PPUSH
42979: PPUSH
42980: PPUSH
// pom := GetBase ( building ) ;
42981: LD_ADDR_VAR 0 3
42985: PUSH
42986: LD_VAR 0 1
42990: PPUSH
42991: CALL_OW 274
42995: ST_TO_ADDR
// if not pom then
42996: LD_VAR 0 3
43000: NOT
43001: IFFALSE 43005
// exit ;
43003: GO 43175
// btype := GetBType ( building ) ;
43005: LD_ADDR_VAR 0 5
43009: PUSH
43010: LD_VAR 0 1
43014: PPUSH
43015: CALL_OW 266
43019: ST_TO_ADDR
// if btype = b_armoury then
43020: LD_VAR 0 5
43024: PUSH
43025: LD_INT 4
43027: EQUAL
43028: IFFALSE 43038
// btype := b_barracks ;
43030: LD_ADDR_VAR 0 5
43034: PUSH
43035: LD_INT 5
43037: ST_TO_ADDR
// if btype = b_depot then
43038: LD_VAR 0 5
43042: PUSH
43043: LD_INT 0
43045: EQUAL
43046: IFFALSE 43056
// btype := b_warehouse ;
43048: LD_ADDR_VAR 0 5
43052: PUSH
43053: LD_INT 1
43055: ST_TO_ADDR
// if btype = b_workshop then
43056: LD_VAR 0 5
43060: PUSH
43061: LD_INT 2
43063: EQUAL
43064: IFFALSE 43074
// btype := b_factory ;
43066: LD_ADDR_VAR 0 5
43070: PUSH
43071: LD_INT 3
43073: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43074: LD_ADDR_VAR 0 4
43078: PUSH
43079: LD_VAR 0 5
43083: PPUSH
43084: LD_VAR 0 1
43088: PPUSH
43089: CALL_OW 248
43093: PPUSH
43094: CALL_OW 450
43098: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43099: LD_ADDR_VAR 0 2
43103: PUSH
43104: LD_VAR 0 3
43108: PPUSH
43109: LD_INT 1
43111: PPUSH
43112: CALL_OW 275
43116: PUSH
43117: LD_VAR 0 4
43121: PUSH
43122: LD_INT 1
43124: ARRAY
43125: GREATEREQUAL
43126: PUSH
43127: LD_VAR 0 3
43131: PPUSH
43132: LD_INT 2
43134: PPUSH
43135: CALL_OW 275
43139: PUSH
43140: LD_VAR 0 4
43144: PUSH
43145: LD_INT 2
43147: ARRAY
43148: GREATEREQUAL
43149: AND
43150: PUSH
43151: LD_VAR 0 3
43155: PPUSH
43156: LD_INT 3
43158: PPUSH
43159: CALL_OW 275
43163: PUSH
43164: LD_VAR 0 4
43168: PUSH
43169: LD_INT 3
43171: ARRAY
43172: GREATEREQUAL
43173: AND
43174: ST_TO_ADDR
// end ;
43175: LD_VAR 0 2
43179: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43180: LD_INT 0
43182: PPUSH
43183: PPUSH
43184: PPUSH
// pom := GetBase ( building ) ;
43185: LD_ADDR_VAR 0 4
43189: PUSH
43190: LD_VAR 0 1
43194: PPUSH
43195: CALL_OW 274
43199: ST_TO_ADDR
// if not pom then
43200: LD_VAR 0 4
43204: NOT
43205: IFFALSE 43209
// exit ;
43207: GO 43310
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43209: LD_ADDR_VAR 0 5
43213: PUSH
43214: LD_VAR 0 2
43218: PPUSH
43219: LD_VAR 0 1
43223: PPUSH
43224: CALL_OW 248
43228: PPUSH
43229: CALL_OW 450
43233: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43234: LD_ADDR_VAR 0 3
43238: PUSH
43239: LD_VAR 0 4
43243: PPUSH
43244: LD_INT 1
43246: PPUSH
43247: CALL_OW 275
43251: PUSH
43252: LD_VAR 0 5
43256: PUSH
43257: LD_INT 1
43259: ARRAY
43260: GREATEREQUAL
43261: PUSH
43262: LD_VAR 0 4
43266: PPUSH
43267: LD_INT 2
43269: PPUSH
43270: CALL_OW 275
43274: PUSH
43275: LD_VAR 0 5
43279: PUSH
43280: LD_INT 2
43282: ARRAY
43283: GREATEREQUAL
43284: AND
43285: PUSH
43286: LD_VAR 0 4
43290: PPUSH
43291: LD_INT 3
43293: PPUSH
43294: CALL_OW 275
43298: PUSH
43299: LD_VAR 0 5
43303: PUSH
43304: LD_INT 3
43306: ARRAY
43307: GREATEREQUAL
43308: AND
43309: ST_TO_ADDR
// end ;
43310: LD_VAR 0 3
43314: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43315: LD_INT 0
43317: PPUSH
43318: PPUSH
43319: PPUSH
43320: PPUSH
43321: PPUSH
43322: PPUSH
43323: PPUSH
43324: PPUSH
43325: PPUSH
43326: PPUSH
43327: PPUSH
// result := false ;
43328: LD_ADDR_VAR 0 8
43332: PUSH
43333: LD_INT 0
43335: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43336: LD_VAR 0 5
43340: NOT
43341: PUSH
43342: LD_VAR 0 1
43346: NOT
43347: OR
43348: PUSH
43349: LD_VAR 0 2
43353: NOT
43354: OR
43355: PUSH
43356: LD_VAR 0 3
43360: NOT
43361: OR
43362: IFFALSE 43366
// exit ;
43364: GO 44180
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43366: LD_ADDR_VAR 0 14
43370: PUSH
43371: LD_VAR 0 1
43375: PPUSH
43376: LD_VAR 0 2
43380: PPUSH
43381: LD_VAR 0 3
43385: PPUSH
43386: LD_VAR 0 4
43390: PPUSH
43391: LD_VAR 0 5
43395: PUSH
43396: LD_INT 1
43398: ARRAY
43399: PPUSH
43400: CALL_OW 248
43404: PPUSH
43405: LD_INT 0
43407: PPUSH
43408: CALL 45413 0 6
43412: ST_TO_ADDR
// if not hexes then
43413: LD_VAR 0 14
43417: NOT
43418: IFFALSE 43422
// exit ;
43420: GO 44180
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43422: LD_ADDR_VAR 0 17
43426: PUSH
43427: LD_VAR 0 5
43431: PPUSH
43432: LD_INT 22
43434: PUSH
43435: LD_VAR 0 13
43439: PPUSH
43440: CALL_OW 255
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: LD_INT 30
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 30
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: LIST
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PPUSH
43481: CALL_OW 72
43485: ST_TO_ADDR
// for i = 1 to hexes do
43486: LD_ADDR_VAR 0 9
43490: PUSH
43491: DOUBLE
43492: LD_INT 1
43494: DEC
43495: ST_TO_ADDR
43496: LD_VAR 0 14
43500: PUSH
43501: FOR_TO
43502: IFFALSE 44178
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43504: LD_ADDR_VAR 0 13
43508: PUSH
43509: LD_VAR 0 14
43513: PUSH
43514: LD_VAR 0 9
43518: ARRAY
43519: PUSH
43520: LD_INT 1
43522: ARRAY
43523: PPUSH
43524: LD_VAR 0 14
43528: PUSH
43529: LD_VAR 0 9
43533: ARRAY
43534: PUSH
43535: LD_INT 2
43537: ARRAY
43538: PPUSH
43539: CALL_OW 428
43543: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43544: LD_VAR 0 14
43548: PUSH
43549: LD_VAR 0 9
43553: ARRAY
43554: PUSH
43555: LD_INT 1
43557: ARRAY
43558: PPUSH
43559: LD_VAR 0 14
43563: PUSH
43564: LD_VAR 0 9
43568: ARRAY
43569: PUSH
43570: LD_INT 2
43572: ARRAY
43573: PPUSH
43574: CALL_OW 351
43578: PUSH
43579: LD_VAR 0 14
43583: PUSH
43584: LD_VAR 0 9
43588: ARRAY
43589: PUSH
43590: LD_INT 1
43592: ARRAY
43593: PPUSH
43594: LD_VAR 0 14
43598: PUSH
43599: LD_VAR 0 9
43603: ARRAY
43604: PUSH
43605: LD_INT 2
43607: ARRAY
43608: PPUSH
43609: CALL_OW 488
43613: NOT
43614: OR
43615: PUSH
43616: LD_VAR 0 13
43620: PPUSH
43621: CALL_OW 247
43625: PUSH
43626: LD_INT 3
43628: EQUAL
43629: OR
43630: IFFALSE 43636
// exit ;
43632: POP
43633: POP
43634: GO 44180
// if not tmp then
43636: LD_VAR 0 13
43640: NOT
43641: IFFALSE 43645
// continue ;
43643: GO 43501
// result := true ;
43645: LD_ADDR_VAR 0 8
43649: PUSH
43650: LD_INT 1
43652: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43653: LD_VAR 0 6
43657: PUSH
43658: LD_VAR 0 13
43662: PPUSH
43663: CALL_OW 247
43667: PUSH
43668: LD_INT 2
43670: EQUAL
43671: AND
43672: PUSH
43673: LD_VAR 0 13
43677: PPUSH
43678: CALL_OW 263
43682: PUSH
43683: LD_INT 1
43685: EQUAL
43686: AND
43687: IFFALSE 43851
// begin if IsDrivenBy ( tmp ) then
43689: LD_VAR 0 13
43693: PPUSH
43694: CALL_OW 311
43698: IFFALSE 43702
// continue ;
43700: GO 43501
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43702: LD_VAR 0 6
43706: PPUSH
43707: LD_INT 3
43709: PUSH
43710: LD_INT 60
43712: PUSH
43713: EMPTY
43714: LIST
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 3
43722: PUSH
43723: LD_INT 55
43725: PUSH
43726: EMPTY
43727: LIST
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PPUSH
43737: CALL_OW 72
43741: IFFALSE 43849
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43743: LD_ADDR_VAR 0 18
43747: PUSH
43748: LD_VAR 0 6
43752: PPUSH
43753: LD_INT 3
43755: PUSH
43756: LD_INT 60
43758: PUSH
43759: EMPTY
43760: LIST
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 3
43768: PUSH
43769: LD_INT 55
43771: PUSH
43772: EMPTY
43773: LIST
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PPUSH
43783: CALL_OW 72
43787: PUSH
43788: LD_INT 1
43790: ARRAY
43791: ST_TO_ADDR
// if IsInUnit ( driver ) then
43792: LD_VAR 0 18
43796: PPUSH
43797: CALL_OW 310
43801: IFFALSE 43812
// ComExit ( driver ) ;
43803: LD_VAR 0 18
43807: PPUSH
43808: CALL 69192 0 1
// AddComEnterUnit ( driver , tmp ) ;
43812: LD_VAR 0 18
43816: PPUSH
43817: LD_VAR 0 13
43821: PPUSH
43822: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43826: LD_VAR 0 18
43830: PPUSH
43831: LD_VAR 0 7
43835: PPUSH
43836: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43840: LD_VAR 0 18
43844: PPUSH
43845: CALL_OW 181
// end ; continue ;
43849: GO 43501
// end ; if not cleaners or not tmp in cleaners then
43851: LD_VAR 0 6
43855: NOT
43856: PUSH
43857: LD_VAR 0 13
43861: PUSH
43862: LD_VAR 0 6
43866: IN
43867: NOT
43868: OR
43869: IFFALSE 44176
// begin if dep then
43871: LD_VAR 0 17
43875: IFFALSE 44011
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43877: LD_ADDR_VAR 0 16
43881: PUSH
43882: LD_VAR 0 17
43886: PUSH
43887: LD_INT 1
43889: ARRAY
43890: PPUSH
43891: CALL_OW 250
43895: PPUSH
43896: LD_VAR 0 17
43900: PUSH
43901: LD_INT 1
43903: ARRAY
43904: PPUSH
43905: CALL_OW 254
43909: PPUSH
43910: LD_INT 5
43912: PPUSH
43913: CALL_OW 272
43917: PUSH
43918: LD_VAR 0 17
43922: PUSH
43923: LD_INT 1
43925: ARRAY
43926: PPUSH
43927: CALL_OW 251
43931: PPUSH
43932: LD_VAR 0 17
43936: PUSH
43937: LD_INT 1
43939: ARRAY
43940: PPUSH
43941: CALL_OW 254
43945: PPUSH
43946: LD_INT 5
43948: PPUSH
43949: CALL_OW 273
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43958: LD_VAR 0 16
43962: PUSH
43963: LD_INT 1
43965: ARRAY
43966: PPUSH
43967: LD_VAR 0 16
43971: PUSH
43972: LD_INT 2
43974: ARRAY
43975: PPUSH
43976: CALL_OW 488
43980: IFFALSE 44011
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43982: LD_VAR 0 13
43986: PPUSH
43987: LD_VAR 0 16
43991: PUSH
43992: LD_INT 1
43994: ARRAY
43995: PPUSH
43996: LD_VAR 0 16
44000: PUSH
44001: LD_INT 2
44003: ARRAY
44004: PPUSH
44005: CALL_OW 111
// continue ;
44009: GO 43501
// end ; end ; r := GetDir ( tmp ) ;
44011: LD_ADDR_VAR 0 15
44015: PUSH
44016: LD_VAR 0 13
44020: PPUSH
44021: CALL_OW 254
44025: ST_TO_ADDR
// if r = 5 then
44026: LD_VAR 0 15
44030: PUSH
44031: LD_INT 5
44033: EQUAL
44034: IFFALSE 44044
// r := 0 ;
44036: LD_ADDR_VAR 0 15
44040: PUSH
44041: LD_INT 0
44043: ST_TO_ADDR
// for j = r to 5 do
44044: LD_ADDR_VAR 0 10
44048: PUSH
44049: DOUBLE
44050: LD_VAR 0 15
44054: DEC
44055: ST_TO_ADDR
44056: LD_INT 5
44058: PUSH
44059: FOR_TO
44060: IFFALSE 44174
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44062: LD_ADDR_VAR 0 11
44066: PUSH
44067: LD_VAR 0 13
44071: PPUSH
44072: CALL_OW 250
44076: PPUSH
44077: LD_VAR 0 10
44081: PPUSH
44082: LD_INT 2
44084: PPUSH
44085: CALL_OW 272
44089: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44090: LD_ADDR_VAR 0 12
44094: PUSH
44095: LD_VAR 0 13
44099: PPUSH
44100: CALL_OW 251
44104: PPUSH
44105: LD_VAR 0 10
44109: PPUSH
44110: LD_INT 2
44112: PPUSH
44113: CALL_OW 273
44117: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44118: LD_VAR 0 11
44122: PPUSH
44123: LD_VAR 0 12
44127: PPUSH
44128: CALL_OW 488
44132: PUSH
44133: LD_VAR 0 11
44137: PPUSH
44138: LD_VAR 0 12
44142: PPUSH
44143: CALL_OW 428
44147: NOT
44148: AND
44149: IFFALSE 44172
// begin ComMoveXY ( tmp , _x , _y ) ;
44151: LD_VAR 0 13
44155: PPUSH
44156: LD_VAR 0 11
44160: PPUSH
44161: LD_VAR 0 12
44165: PPUSH
44166: CALL_OW 111
// break ;
44170: GO 44174
// end ; end ;
44172: GO 44059
44174: POP
44175: POP
// end ; end ;
44176: GO 43501
44178: POP
44179: POP
// end ;
44180: LD_VAR 0 8
44184: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44185: LD_INT 0
44187: PPUSH
// result := true ;
44188: LD_ADDR_VAR 0 3
44192: PUSH
44193: LD_INT 1
44195: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44196: LD_VAR 0 2
44200: PUSH
44201: LD_INT 24
44203: DOUBLE
44204: EQUAL
44205: IFTRUE 44215
44207: LD_INT 33
44209: DOUBLE
44210: EQUAL
44211: IFTRUE 44215
44213: GO 44240
44215: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44216: LD_ADDR_VAR 0 3
44220: PUSH
44221: LD_INT 32
44223: PPUSH
44224: LD_VAR 0 1
44228: PPUSH
44229: CALL_OW 321
44233: PUSH
44234: LD_INT 2
44236: EQUAL
44237: ST_TO_ADDR
44238: GO 44556
44240: LD_INT 20
44242: DOUBLE
44243: EQUAL
44244: IFTRUE 44248
44246: GO 44273
44248: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44249: LD_ADDR_VAR 0 3
44253: PUSH
44254: LD_INT 6
44256: PPUSH
44257: LD_VAR 0 1
44261: PPUSH
44262: CALL_OW 321
44266: PUSH
44267: LD_INT 2
44269: EQUAL
44270: ST_TO_ADDR
44271: GO 44556
44273: LD_INT 22
44275: DOUBLE
44276: EQUAL
44277: IFTRUE 44287
44279: LD_INT 36
44281: DOUBLE
44282: EQUAL
44283: IFTRUE 44287
44285: GO 44312
44287: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44288: LD_ADDR_VAR 0 3
44292: PUSH
44293: LD_INT 15
44295: PPUSH
44296: LD_VAR 0 1
44300: PPUSH
44301: CALL_OW 321
44305: PUSH
44306: LD_INT 2
44308: EQUAL
44309: ST_TO_ADDR
44310: GO 44556
44312: LD_INT 30
44314: DOUBLE
44315: EQUAL
44316: IFTRUE 44320
44318: GO 44345
44320: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44321: LD_ADDR_VAR 0 3
44325: PUSH
44326: LD_INT 20
44328: PPUSH
44329: LD_VAR 0 1
44333: PPUSH
44334: CALL_OW 321
44338: PUSH
44339: LD_INT 2
44341: EQUAL
44342: ST_TO_ADDR
44343: GO 44556
44345: LD_INT 28
44347: DOUBLE
44348: EQUAL
44349: IFTRUE 44359
44351: LD_INT 21
44353: DOUBLE
44354: EQUAL
44355: IFTRUE 44359
44357: GO 44384
44359: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44360: LD_ADDR_VAR 0 3
44364: PUSH
44365: LD_INT 21
44367: PPUSH
44368: LD_VAR 0 1
44372: PPUSH
44373: CALL_OW 321
44377: PUSH
44378: LD_INT 2
44380: EQUAL
44381: ST_TO_ADDR
44382: GO 44556
44384: LD_INT 16
44386: DOUBLE
44387: EQUAL
44388: IFTRUE 44392
44390: GO 44417
44392: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44393: LD_ADDR_VAR 0 3
44397: PUSH
44398: LD_INT 84
44400: PPUSH
44401: LD_VAR 0 1
44405: PPUSH
44406: CALL_OW 321
44410: PUSH
44411: LD_INT 2
44413: EQUAL
44414: ST_TO_ADDR
44415: GO 44556
44417: LD_INT 19
44419: DOUBLE
44420: EQUAL
44421: IFTRUE 44431
44423: LD_INT 23
44425: DOUBLE
44426: EQUAL
44427: IFTRUE 44431
44429: GO 44456
44431: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44432: LD_ADDR_VAR 0 3
44436: PUSH
44437: LD_INT 83
44439: PPUSH
44440: LD_VAR 0 1
44444: PPUSH
44445: CALL_OW 321
44449: PUSH
44450: LD_INT 2
44452: EQUAL
44453: ST_TO_ADDR
44454: GO 44556
44456: LD_INT 17
44458: DOUBLE
44459: EQUAL
44460: IFTRUE 44464
44462: GO 44489
44464: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44465: LD_ADDR_VAR 0 3
44469: PUSH
44470: LD_INT 39
44472: PPUSH
44473: LD_VAR 0 1
44477: PPUSH
44478: CALL_OW 321
44482: PUSH
44483: LD_INT 2
44485: EQUAL
44486: ST_TO_ADDR
44487: GO 44556
44489: LD_INT 18
44491: DOUBLE
44492: EQUAL
44493: IFTRUE 44497
44495: GO 44522
44497: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44498: LD_ADDR_VAR 0 3
44502: PUSH
44503: LD_INT 40
44505: PPUSH
44506: LD_VAR 0 1
44510: PPUSH
44511: CALL_OW 321
44515: PUSH
44516: LD_INT 2
44518: EQUAL
44519: ST_TO_ADDR
44520: GO 44556
44522: LD_INT 27
44524: DOUBLE
44525: EQUAL
44526: IFTRUE 44530
44528: GO 44555
44530: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44531: LD_ADDR_VAR 0 3
44535: PUSH
44536: LD_INT 35
44538: PPUSH
44539: LD_VAR 0 1
44543: PPUSH
44544: CALL_OW 321
44548: PUSH
44549: LD_INT 2
44551: EQUAL
44552: ST_TO_ADDR
44553: GO 44556
44555: POP
// end ;
44556: LD_VAR 0 3
44560: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44561: LD_INT 0
44563: PPUSH
44564: PPUSH
44565: PPUSH
44566: PPUSH
44567: PPUSH
44568: PPUSH
44569: PPUSH
44570: PPUSH
44571: PPUSH
44572: PPUSH
44573: PPUSH
// result := false ;
44574: LD_ADDR_VAR 0 6
44578: PUSH
44579: LD_INT 0
44581: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44582: LD_VAR 0 1
44586: NOT
44587: PUSH
44588: LD_VAR 0 1
44592: PPUSH
44593: CALL_OW 266
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: IN
44608: NOT
44609: OR
44610: PUSH
44611: LD_VAR 0 2
44615: NOT
44616: OR
44617: PUSH
44618: LD_VAR 0 5
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: LD_INT 3
44634: PUSH
44635: LD_INT 4
44637: PUSH
44638: LD_INT 5
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: IN
44649: NOT
44650: OR
44651: PUSH
44652: LD_VAR 0 3
44656: PPUSH
44657: LD_VAR 0 4
44661: PPUSH
44662: CALL_OW 488
44666: NOT
44667: OR
44668: IFFALSE 44672
// exit ;
44670: GO 45408
// side := GetSide ( depot ) ;
44672: LD_ADDR_VAR 0 9
44676: PUSH
44677: LD_VAR 0 1
44681: PPUSH
44682: CALL_OW 255
44686: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44687: LD_VAR 0 9
44691: PPUSH
44692: LD_VAR 0 2
44696: PPUSH
44697: CALL 44185 0 2
44701: NOT
44702: IFFALSE 44706
// exit ;
44704: GO 45408
// pom := GetBase ( depot ) ;
44706: LD_ADDR_VAR 0 10
44710: PUSH
44711: LD_VAR 0 1
44715: PPUSH
44716: CALL_OW 274
44720: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44721: LD_ADDR_VAR 0 11
44725: PUSH
44726: LD_VAR 0 2
44730: PPUSH
44731: LD_VAR 0 1
44735: PPUSH
44736: CALL_OW 248
44740: PPUSH
44741: CALL_OW 450
44745: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44746: LD_VAR 0 10
44750: PPUSH
44751: LD_INT 1
44753: PPUSH
44754: CALL_OW 275
44758: PUSH
44759: LD_VAR 0 11
44763: PUSH
44764: LD_INT 1
44766: ARRAY
44767: GREATEREQUAL
44768: PUSH
44769: LD_VAR 0 10
44773: PPUSH
44774: LD_INT 2
44776: PPUSH
44777: CALL_OW 275
44781: PUSH
44782: LD_VAR 0 11
44786: PUSH
44787: LD_INT 2
44789: ARRAY
44790: GREATEREQUAL
44791: AND
44792: PUSH
44793: LD_VAR 0 10
44797: PPUSH
44798: LD_INT 3
44800: PPUSH
44801: CALL_OW 275
44805: PUSH
44806: LD_VAR 0 11
44810: PUSH
44811: LD_INT 3
44813: ARRAY
44814: GREATEREQUAL
44815: AND
44816: NOT
44817: IFFALSE 44821
// exit ;
44819: GO 45408
// if GetBType ( depot ) = b_depot then
44821: LD_VAR 0 1
44825: PPUSH
44826: CALL_OW 266
44830: PUSH
44831: LD_INT 0
44833: EQUAL
44834: IFFALSE 44846
// dist := 28 else
44836: LD_ADDR_VAR 0 14
44840: PUSH
44841: LD_INT 28
44843: ST_TO_ADDR
44844: GO 44854
// dist := 36 ;
44846: LD_ADDR_VAR 0 14
44850: PUSH
44851: LD_INT 36
44853: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44854: LD_VAR 0 1
44858: PPUSH
44859: LD_VAR 0 3
44863: PPUSH
44864: LD_VAR 0 4
44868: PPUSH
44869: CALL_OW 297
44873: PUSH
44874: LD_VAR 0 14
44878: GREATER
44879: IFFALSE 44883
// exit ;
44881: GO 45408
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44883: LD_ADDR_VAR 0 12
44887: PUSH
44888: LD_VAR 0 2
44892: PPUSH
44893: LD_VAR 0 3
44897: PPUSH
44898: LD_VAR 0 4
44902: PPUSH
44903: LD_VAR 0 5
44907: PPUSH
44908: LD_VAR 0 1
44912: PPUSH
44913: CALL_OW 248
44917: PPUSH
44918: LD_INT 0
44920: PPUSH
44921: CALL 45413 0 6
44925: ST_TO_ADDR
// if not hexes then
44926: LD_VAR 0 12
44930: NOT
44931: IFFALSE 44935
// exit ;
44933: GO 45408
// hex := GetHexInfo ( x , y ) ;
44935: LD_ADDR_VAR 0 15
44939: PUSH
44940: LD_VAR 0 3
44944: PPUSH
44945: LD_VAR 0 4
44949: PPUSH
44950: CALL_OW 546
44954: ST_TO_ADDR
// if hex [ 1 ] then
44955: LD_VAR 0 15
44959: PUSH
44960: LD_INT 1
44962: ARRAY
44963: IFFALSE 44967
// exit ;
44965: GO 45408
// height := hex [ 2 ] ;
44967: LD_ADDR_VAR 0 13
44971: PUSH
44972: LD_VAR 0 15
44976: PUSH
44977: LD_INT 2
44979: ARRAY
44980: ST_TO_ADDR
// for i = 1 to hexes do
44981: LD_ADDR_VAR 0 7
44985: PUSH
44986: DOUBLE
44987: LD_INT 1
44989: DEC
44990: ST_TO_ADDR
44991: LD_VAR 0 12
44995: PUSH
44996: FOR_TO
44997: IFFALSE 45327
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44999: LD_VAR 0 12
45003: PUSH
45004: LD_VAR 0 7
45008: ARRAY
45009: PUSH
45010: LD_INT 1
45012: ARRAY
45013: PPUSH
45014: LD_VAR 0 12
45018: PUSH
45019: LD_VAR 0 7
45023: ARRAY
45024: PUSH
45025: LD_INT 2
45027: ARRAY
45028: PPUSH
45029: CALL_OW 488
45033: NOT
45034: PUSH
45035: LD_VAR 0 12
45039: PUSH
45040: LD_VAR 0 7
45044: ARRAY
45045: PUSH
45046: LD_INT 1
45048: ARRAY
45049: PPUSH
45050: LD_VAR 0 12
45054: PUSH
45055: LD_VAR 0 7
45059: ARRAY
45060: PUSH
45061: LD_INT 2
45063: ARRAY
45064: PPUSH
45065: CALL_OW 428
45069: PUSH
45070: LD_INT 0
45072: GREATER
45073: OR
45074: PUSH
45075: LD_VAR 0 12
45079: PUSH
45080: LD_VAR 0 7
45084: ARRAY
45085: PUSH
45086: LD_INT 1
45088: ARRAY
45089: PPUSH
45090: LD_VAR 0 12
45094: PUSH
45095: LD_VAR 0 7
45099: ARRAY
45100: PUSH
45101: LD_INT 2
45103: ARRAY
45104: PPUSH
45105: CALL_OW 351
45109: OR
45110: IFFALSE 45116
// exit ;
45112: POP
45113: POP
45114: GO 45408
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45116: LD_ADDR_VAR 0 8
45120: PUSH
45121: LD_VAR 0 12
45125: PUSH
45126: LD_VAR 0 7
45130: ARRAY
45131: PUSH
45132: LD_INT 1
45134: ARRAY
45135: PPUSH
45136: LD_VAR 0 12
45140: PUSH
45141: LD_VAR 0 7
45145: ARRAY
45146: PUSH
45147: LD_INT 2
45149: ARRAY
45150: PPUSH
45151: CALL_OW 546
45155: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45156: LD_VAR 0 8
45160: PUSH
45161: LD_INT 1
45163: ARRAY
45164: PUSH
45165: LD_VAR 0 8
45169: PUSH
45170: LD_INT 2
45172: ARRAY
45173: PUSH
45174: LD_VAR 0 13
45178: PUSH
45179: LD_INT 2
45181: PLUS
45182: GREATER
45183: OR
45184: PUSH
45185: LD_VAR 0 8
45189: PUSH
45190: LD_INT 2
45192: ARRAY
45193: PUSH
45194: LD_VAR 0 13
45198: PUSH
45199: LD_INT 2
45201: MINUS
45202: LESS
45203: OR
45204: PUSH
45205: LD_VAR 0 8
45209: PUSH
45210: LD_INT 3
45212: ARRAY
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: LD_INT 8
45219: PUSH
45220: LD_INT 9
45222: PUSH
45223: LD_INT 10
45225: PUSH
45226: LD_INT 11
45228: PUSH
45229: LD_INT 12
45231: PUSH
45232: LD_INT 13
45234: PUSH
45235: LD_INT 16
45237: PUSH
45238: LD_INT 17
45240: PUSH
45241: LD_INT 18
45243: PUSH
45244: LD_INT 19
45246: PUSH
45247: LD_INT 20
45249: PUSH
45250: LD_INT 21
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: IN
45268: NOT
45269: OR
45270: PUSH
45271: LD_VAR 0 8
45275: PUSH
45276: LD_INT 5
45278: ARRAY
45279: NOT
45280: OR
45281: PUSH
45282: LD_VAR 0 8
45286: PUSH
45287: LD_INT 6
45289: ARRAY
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: LD_INT 7
45299: PUSH
45300: LD_INT 9
45302: PUSH
45303: LD_INT 10
45305: PUSH
45306: LD_INT 11
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: IN
45317: NOT
45318: OR
45319: IFFALSE 45325
// exit ;
45321: POP
45322: POP
45323: GO 45408
// end ;
45325: GO 44996
45327: POP
45328: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45329: LD_VAR 0 9
45333: PPUSH
45334: LD_VAR 0 3
45338: PPUSH
45339: LD_VAR 0 4
45343: PPUSH
45344: LD_INT 20
45346: PPUSH
45347: CALL 37360 0 4
45351: PUSH
45352: LD_INT 4
45354: ARRAY
45355: IFFALSE 45359
// exit ;
45357: GO 45408
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45359: LD_VAR 0 2
45363: PUSH
45364: LD_INT 29
45366: PUSH
45367: LD_INT 30
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: IN
45374: PUSH
45375: LD_VAR 0 3
45379: PPUSH
45380: LD_VAR 0 4
45384: PPUSH
45385: LD_VAR 0 9
45389: PPUSH
45390: CALL_OW 440
45394: NOT
45395: AND
45396: IFFALSE 45400
// exit ;
45398: GO 45408
// result := true ;
45400: LD_ADDR_VAR 0 6
45404: PUSH
45405: LD_INT 1
45407: ST_TO_ADDR
// end ;
45408: LD_VAR 0 6
45412: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45413: LD_INT 0
45415: PPUSH
45416: PPUSH
45417: PPUSH
45418: PPUSH
45419: PPUSH
45420: PPUSH
45421: PPUSH
45422: PPUSH
45423: PPUSH
45424: PPUSH
45425: PPUSH
45426: PPUSH
45427: PPUSH
45428: PPUSH
45429: PPUSH
45430: PPUSH
45431: PPUSH
45432: PPUSH
45433: PPUSH
45434: PPUSH
45435: PPUSH
45436: PPUSH
45437: PPUSH
45438: PPUSH
45439: PPUSH
45440: PPUSH
45441: PPUSH
45442: PPUSH
45443: PPUSH
45444: PPUSH
45445: PPUSH
45446: PPUSH
45447: PPUSH
45448: PPUSH
45449: PPUSH
45450: PPUSH
45451: PPUSH
45452: PPUSH
45453: PPUSH
45454: PPUSH
45455: PPUSH
45456: PPUSH
45457: PPUSH
45458: PPUSH
45459: PPUSH
45460: PPUSH
45461: PPUSH
45462: PPUSH
45463: PPUSH
45464: PPUSH
45465: PPUSH
45466: PPUSH
45467: PPUSH
45468: PPUSH
45469: PPUSH
45470: PPUSH
45471: PPUSH
45472: PPUSH
// result = [ ] ;
45473: LD_ADDR_VAR 0 7
45477: PUSH
45478: EMPTY
45479: ST_TO_ADDR
// temp_list = [ ] ;
45480: LD_ADDR_VAR 0 9
45484: PUSH
45485: EMPTY
45486: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45487: LD_VAR 0 4
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: LD_INT 3
45503: PUSH
45504: LD_INT 4
45506: PUSH
45507: LD_INT 5
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: IN
45518: NOT
45519: PUSH
45520: LD_VAR 0 1
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: IN
45535: PUSH
45536: LD_VAR 0 5
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 2
45546: PUSH
45547: LD_INT 3
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: IN
45555: NOT
45556: AND
45557: OR
45558: IFFALSE 45562
// exit ;
45560: GO 63953
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45562: LD_VAR 0 1
45566: PUSH
45567: LD_INT 6
45569: PUSH
45570: LD_INT 7
45572: PUSH
45573: LD_INT 8
45575: PUSH
45576: LD_INT 13
45578: PUSH
45579: LD_INT 12
45581: PUSH
45582: LD_INT 15
45584: PUSH
45585: LD_INT 11
45587: PUSH
45588: LD_INT 14
45590: PUSH
45591: LD_INT 10
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: IN
45605: IFFALSE 45615
// btype = b_lab ;
45607: LD_ADDR_VAR 0 1
45611: PUSH
45612: LD_INT 6
45614: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45615: LD_VAR 0 6
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: LIST
45633: IN
45634: NOT
45635: PUSH
45636: LD_VAR 0 1
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: LD_INT 3
45652: PUSH
45653: LD_INT 6
45655: PUSH
45656: LD_INT 36
45658: PUSH
45659: LD_INT 4
45661: PUSH
45662: LD_INT 5
45664: PUSH
45665: LD_INT 31
45667: PUSH
45668: LD_INT 32
45670: PUSH
45671: LD_INT 33
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: IN
45687: NOT
45688: PUSH
45689: LD_VAR 0 6
45693: PUSH
45694: LD_INT 1
45696: EQUAL
45697: AND
45698: OR
45699: PUSH
45700: LD_VAR 0 1
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: LD_INT 3
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: IN
45715: NOT
45716: PUSH
45717: LD_VAR 0 6
45721: PUSH
45722: LD_INT 2
45724: EQUAL
45725: AND
45726: OR
45727: IFFALSE 45737
// mode = 0 ;
45729: LD_ADDR_VAR 0 6
45733: PUSH
45734: LD_INT 0
45736: ST_TO_ADDR
// case mode of 0 :
45737: LD_VAR 0 6
45741: PUSH
45742: LD_INT 0
45744: DOUBLE
45745: EQUAL
45746: IFTRUE 45750
45748: GO 57203
45750: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45751: LD_ADDR_VAR 0 11
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: LD_INT 2
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 3
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 3
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45944: LD_ADDR_VAR 0 12
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 3
46101: NEG
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 3
46112: NEG
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46140: LD_ADDR_VAR 0 13
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: LD_INT 2
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: NEG
46288: PUSH
46289: LD_INT 3
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 3
46299: NEG
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 3
46311: NEG
46312: PUSH
46313: LD_INT 3
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46339: LD_ADDR_VAR 0 14
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 2
46435: NEG
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: LD_INT 3
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 3
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: LD_INT 2
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46535: LD_ADDR_VAR 0 15
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 3
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46728: LD_ADDR_VAR 0 16
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 3
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 3
46885: PUSH
46886: LD_INT 3
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: LD_INT 3
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46921: LD_ADDR_VAR 0 17
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 2
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 2
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 2
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: NEG
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47151: LD_ADDR_VAR 0 18
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: LD_INT 2
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47381: LD_ADDR_VAR 0 19
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 2
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 2
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: NEG
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47611: LD_ADDR_VAR 0 20
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: LD_INT 2
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 2
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 2
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47841: LD_ADDR_VAR 0 21
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 1
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: NEG
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48071: LD_ADDR_VAR 0 22
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 2
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48301: LD_ADDR_VAR 0 23
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: NEG
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: LD_INT 3
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: LD_INT 3
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48581: LD_ADDR_VAR 0 24
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 2
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 2
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 2
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 2
48768: NEG
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 2
48780: NEG
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 3
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 3
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48857: LD_ADDR_VAR 0 25
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: LD_INT 1
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: LD_INT 2
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 3
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49131: LD_ADDR_VAR 0 26
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: LD_INT 2
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: LD_INT 3
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: LD_INT 3
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 2
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49407: LD_ADDR_VAR 0 27
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: NEG
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 3
49640: NEG
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 3
49652: NEG
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49687: LD_ADDR_VAR 0 28
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 2
49874: NEG
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: LD_INT 3
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 3
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 3
49922: NEG
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 3
49934: NEG
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49969: LD_ADDR_VAR 0 29
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 2
50147: NEG
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: LD_INT 3
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 3
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: LD_INT 3
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 3
50213: NEG
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50248: LD_ADDR_VAR 0 30
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: LD_INT 2
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: LD_INT 1
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 2
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 2
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: LD_INT 2
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: NEG
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 3
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 3
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: PUSH
50471: LD_INT 3
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 3
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50526: LD_ADDR_VAR 0 31
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 2
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: LD_INT 3
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 3
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: LD_INT 3
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 3
50769: NEG
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50804: LD_ADDR_VAR 0 32
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 3
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 2
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 3
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: LD_INT 3
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 3
51047: NEG
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51082: LD_ADDR_VAR 0 33
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 2
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: NEG
51273: PUSH
51274: LD_INT 3
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: NEG
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51361: LD_ADDR_VAR 0 34
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 2
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: LD_INT 2
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 1
51506: NEG
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: NEG
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: LD_INT 2
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 3
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 2
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 3
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: LD_INT 3
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 2
51595: NEG
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 3
51606: NEG
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51641: LD_ADDR_VAR 0 35
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51753: LD_ADDR_VAR 0 36
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51865: LD_ADDR_VAR 0 37
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51977: LD_ADDR_VAR 0 38
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52089: LD_ADDR_VAR 0 39
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52201: LD_ADDR_VAR 0 40
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: NEG
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52313: LD_ADDR_VAR 0 41
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 2
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: LD_INT 3
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 3
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 3
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 3
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 3
52556: PUSH
52557: LD_INT 3
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 3
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 3
52587: NEG
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 3
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 3
52610: NEG
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 3
52622: NEG
52623: PUSH
52624: LD_INT 3
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52663: LD_ADDR_VAR 0 42
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 2
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: LD_INT 2
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 2
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: NEG
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: LD_INT 3
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 3
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 3
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 3
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: LD_INT 3
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: LD_INT 3
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: LD_INT 3
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 3
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: LD_INT 2
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 3
52960: NEG
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 3
52972: NEG
52973: PUSH
52974: LD_INT 3
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53013: LD_ADDR_VAR 0 43
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 2
53179: NEG
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 2
53190: NEG
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: LD_INT 3
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 3
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 3
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: LD_INT 3
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 3
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 3
53320: NEG
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53361: LD_ADDR_VAR 0 44
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 2
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 2
53551: NEG
53552: PUSH
53553: LD_INT 3
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 3
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 3
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 3
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 3
53604: PUSH
53605: LD_INT 3
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: LD_INT 3
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 3
53635: NEG
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 3
53646: NEG
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 3
53658: NEG
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 3
53670: NEG
53671: PUSH
53672: LD_INT 3
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53711: LD_ADDR_VAR 0 45
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: LD_INT 2
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: LD_INT 2
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 2
53877: NEG
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 2
53889: NEG
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 2
53901: NEG
53902: PUSH
53903: LD_INT 3
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: LD_INT 3
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: LD_INT 3
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 3
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 3
53957: PUSH
53958: LD_INT 3
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 2
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 3
54008: NEG
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 3
54020: NEG
54021: PUSH
54022: LD_INT 3
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54061: LD_ADDR_VAR 0 46
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: LD_INT 2
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 2
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: LD_INT 3
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 3
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 2
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 3
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 3
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: LD_INT 3
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: LD_INT 2
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 3
54357: NEG
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 3
54368: NEG
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54409: LD_ADDR_VAR 0 47
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 2
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 2
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: LD_INT 2
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54560: LD_ADDR_VAR 0 48
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54707: LD_ADDR_VAR 0 49
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54851: LD_ADDR_VAR 0 50
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 2
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54995: LD_ADDR_VAR 0 51
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: LD_INT 2
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55142: LD_ADDR_VAR 0 52
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55293: LD_ADDR_VAR 0 53
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: LD_INT 0
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 2
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 2
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55523: LD_ADDR_VAR 0 54
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 2
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: LD_INT 1
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 2
55710: NEG
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 2
55722: NEG
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55753: LD_ADDR_VAR 0 55
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: LD_INT 2
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: NEG
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 2
55952: NEG
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55983: LD_ADDR_VAR 0 56
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 2
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 2
56182: NEG
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56213: LD_ADDR_VAR 0 57
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 2
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 2
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: NEG
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56443: LD_ADDR_VAR 0 58
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: LD_INT 2
56528: NEG
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 2
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 2
56578: PUSH
56579: LD_INT 2
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 2
56619: NEG
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: NEG
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56673: LD_ADDR_VAR 0 59
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56761: LD_ADDR_VAR 0 60
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 1
56819: NEG
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56849: LD_ADDR_VAR 0 61
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: LD_INT 0
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56937: LD_ADDR_VAR 0 62
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57025: LD_ADDR_VAR 0 63
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57113: LD_ADDR_VAR 0 64
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: ST_TO_ADDR
// end ; 1 :
57201: GO 63098
57203: LD_INT 1
57205: DOUBLE
57206: EQUAL
57207: IFTRUE 57211
57209: GO 59834
57211: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57212: LD_ADDR_VAR 0 11
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 3
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 2
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57256: LD_ADDR_VAR 0 12
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 3
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 3
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: LIST
57296: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57297: LD_ADDR_VAR 0 13
57301: PUSH
57302: LD_INT 3
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 3
57314: PUSH
57315: LD_INT 3
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57337: LD_ADDR_VAR 0 14
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 3
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 2
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: LIST
57377: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57378: LD_ADDR_VAR 0 15
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: NEG
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57422: LD_ADDR_VAR 0 16
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: LD_INT 3
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: NEG
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 3
57453: NEG
57454: PUSH
57455: LD_INT 3
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57468: LD_ADDR_VAR 0 17
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: LD_INT 3
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 3
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: LIST
57511: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57512: LD_ADDR_VAR 0 18
57516: PUSH
57517: LD_INT 2
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 3
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 3
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: LIST
57552: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57553: LD_ADDR_VAR 0 19
57557: PUSH
57558: LD_INT 3
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 3
57570: PUSH
57571: LD_INT 3
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: LD_INT 3
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57593: LD_ADDR_VAR 0 20
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: LIST
57633: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57634: LD_ADDR_VAR 0 21
57638: PUSH
57639: LD_INT 2
57641: NEG
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 3
57652: NEG
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 3
57663: NEG
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: LIST
57677: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57678: LD_ADDR_VAR 0 22
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 3
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 3
57697: NEG
57698: PUSH
57699: LD_INT 2
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 3
57709: NEG
57710: PUSH
57711: LD_INT 3
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: LIST
57723: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57724: LD_ADDR_VAR 0 23
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 4
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: LD_INT 3
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: LIST
57767: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57768: LD_ADDR_VAR 0 24
57772: PUSH
57773: LD_INT 3
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 3
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 4
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: LIST
57808: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57809: LD_ADDR_VAR 0 25
57813: PUSH
57814: LD_INT 3
57816: PUSH
57817: LD_INT 3
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 4
57826: PUSH
57827: LD_INT 3
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: PUSH
57837: LD_INT 4
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: LIST
57848: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57849: LD_ADDR_VAR 0 26
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 3
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 4
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: LD_INT 3
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57890: LD_ADDR_VAR 0 27
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 3
57908: NEG
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 4
57919: NEG
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: LIST
57933: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57934: LD_ADDR_VAR 0 28
57938: PUSH
57939: LD_INT 3
57941: NEG
57942: PUSH
57943: LD_INT 3
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 3
57953: NEG
57954: PUSH
57955: LD_INT 4
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 4
57965: NEG
57966: PUSH
57967: LD_INT 3
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57980: LD_ADDR_VAR 0 29
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: LD_INT 3
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: LD_INT 2
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: LD_INT 4
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 4
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: LD_INT 3
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: LD_INT 5
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: LD_INT 5
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: PUSH
58079: LD_INT 4
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: LD_INT 6
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: LD_INT 6
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: LD_INT 5
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58135: LD_ADDR_VAR 0 30
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 3
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 3
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 3
58173: PUSH
58174: LD_INT 1
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 4
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 4
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 4
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 5
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 5
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 5
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 6
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 6
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58278: LD_ADDR_VAR 0 31
58282: PUSH
58283: LD_INT 3
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 3
58295: PUSH
58296: LD_INT 3
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: LD_INT 3
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 4
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 4
58325: PUSH
58326: LD_INT 4
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 3
58335: PUSH
58336: LD_INT 4
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 5
58345: PUSH
58346: LD_INT 4
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 5
58355: PUSH
58356: LD_INT 5
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 4
58365: PUSH
58366: LD_INT 5
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 6
58375: PUSH
58376: LD_INT 5
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 6
58385: PUSH
58386: LD_INT 6
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 5
58395: PUSH
58396: LD_INT 6
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58417: LD_ADDR_VAR 0 32
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 3
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: LD_INT 3
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: LD_INT 4
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 4
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: LD_INT 3
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: LD_INT 5
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: LD_INT 5
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: NEG
58507: PUSH
58508: LD_INT 4
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: LD_INT 6
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: LD_INT 6
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: LD_INT 5
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58560: LD_ADDR_VAR 0 33
58564: PUSH
58565: LD_INT 2
58567: NEG
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 3
58578: NEG
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 3
58589: NEG
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 3
58601: NEG
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 4
58612: NEG
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 4
58623: NEG
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 4
58635: NEG
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 5
58646: NEG
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 5
58657: NEG
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 5
58669: NEG
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 6
58680: NEG
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 6
58691: NEG
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58715: LD_ADDR_VAR 0 34
58719: PUSH
58720: LD_INT 2
58722: NEG
58723: PUSH
58724: LD_INT 3
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 3
58734: NEG
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 3
58746: NEG
58747: PUSH
58748: LD_INT 3
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 3
58758: NEG
58759: PUSH
58760: LD_INT 4
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 4
58770: NEG
58771: PUSH
58772: LD_INT 3
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 4
58782: NEG
58783: PUSH
58784: LD_INT 4
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 4
58794: NEG
58795: PUSH
58796: LD_INT 5
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 5
58806: NEG
58807: PUSH
58808: LD_INT 4
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 5
58818: NEG
58819: PUSH
58820: LD_INT 5
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 5
58830: NEG
58831: PUSH
58832: LD_INT 6
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 6
58842: NEG
58843: PUSH
58844: LD_INT 5
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 6
58854: NEG
58855: PUSH
58856: LD_INT 6
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58878: LD_ADDR_VAR 0 41
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: LIST
58921: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58922: LD_ADDR_VAR 0 42
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: LIST
58962: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58963: LD_ADDR_VAR 0 43
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: LD_INT 2
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 3
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: LD_INT 3
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: LIST
59002: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59003: LD_ADDR_VAR 0 44
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: LD_INT 3
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: LIST
59043: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59044: LD_ADDR_VAR 0 45
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 3
59073: NEG
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: LIST
59087: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59088: LD_ADDR_VAR 0 46
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PUSH
59097: LD_INT 2
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: LD_INT 3
59111: NEG
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 3
59119: NEG
59120: PUSH
59121: LD_INT 2
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: LIST
59133: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59134: LD_ADDR_VAR 0 47
59138: PUSH
59139: LD_INT 2
59141: NEG
59142: PUSH
59143: LD_INT 3
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: LD_INT 3
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59167: LD_ADDR_VAR 0 48
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: LD_INT 2
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59198: LD_ADDR_VAR 0 49
59202: PUSH
59203: LD_INT 3
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 3
59215: PUSH
59216: LD_INT 2
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59227: LD_ADDR_VAR 0 50
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: LD_INT 3
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: LD_INT 3
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59256: LD_ADDR_VAR 0 51
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 2
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: NEG
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59287: LD_ADDR_VAR 0 52
59291: PUSH
59292: LD_INT 3
59294: NEG
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 3
59306: NEG
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59320: LD_ADDR_VAR 0 53
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: LD_INT 3
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: LIST
59363: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59364: LD_ADDR_VAR 0 54
59368: PUSH
59369: LD_INT 2
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 3
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: LIST
59404: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59405: LD_ADDR_VAR 0 55
59409: PUSH
59410: LD_INT 3
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: PUSH
59423: LD_INT 3
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 3
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: LIST
59444: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59445: LD_ADDR_VAR 0 56
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 3
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 3
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 2
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: LIST
59485: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59486: LD_ADDR_VAR 0 57
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 3
59504: NEG
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 3
59515: NEG
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: LIST
59529: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59530: LD_ADDR_VAR 0 58
59534: PUSH
59535: LD_INT 2
59537: NEG
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 3
59549: NEG
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 3
59561: NEG
59562: PUSH
59563: LD_INT 3
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59576: LD_ADDR_VAR 0 59
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: LD_INT 2
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: LIST
59619: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59620: LD_ADDR_VAR 0 60
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 2
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 2
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: LIST
59660: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59661: LD_ADDR_VAR 0 61
59665: PUSH
59666: LD_INT 2
59668: PUSH
59669: LD_INT 1
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 2
59678: PUSH
59679: LD_INT 2
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: LD_INT 2
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: LIST
59700: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59701: LD_ADDR_VAR 0 62
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59742: LD_ADDR_VAR 0 63
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: LIST
59785: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59786: LD_ADDR_VAR 0 64
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: NEG
59818: PUSH
59819: LD_INT 2
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: ST_TO_ADDR
// end ; 2 :
59832: GO 63098
59834: LD_INT 2
59836: DOUBLE
59837: EQUAL
59838: IFTRUE 59842
59840: GO 63097
59842: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59843: LD_ADDR_VAR 0 29
59847: PUSH
59848: LD_INT 4
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 4
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 5
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 5
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 4
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 3
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 3
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 3
59922: PUSH
59923: LD_INT 2
59925: NEG
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 5
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 3
59943: PUSH
59944: LD_INT 3
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: PUSH
59954: LD_INT 2
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 4
59963: PUSH
59964: LD_INT 3
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 4
59973: PUSH
59974: LD_INT 4
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 3
59983: PUSH
59984: LD_INT 4
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 2
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 4
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: LD_INT 4
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 0
60033: PUSH
60034: LD_INT 4
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 0
60043: PUSH
60044: LD_INT 3
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: LD_INT 4
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: LD_INT 5
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: LD_INT 5
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: LD_INT 4
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: LD_INT 3
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 2
60105: PUSH
60106: LD_INT 5
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 2
60115: NEG
60116: PUSH
60117: LD_INT 3
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 3
60126: NEG
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 3
60137: NEG
60138: PUSH
60139: LD_INT 1
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 2
60149: NEG
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 2
60160: NEG
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 3
60171: NEG
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 4
60182: NEG
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 4
60193: NEG
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 4
60205: NEG
60206: PUSH
60207: LD_INT 2
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 2
60217: NEG
60218: PUSH
60219: LD_INT 2
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 4
60228: NEG
60229: PUSH
60230: LD_INT 4
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 4
60240: NEG
60241: PUSH
60242: LD_INT 5
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 3
60252: NEG
60253: PUSH
60254: LD_INT 4
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 3
60264: NEG
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 4
60276: NEG
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 5
60288: NEG
60289: PUSH
60290: LD_INT 4
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 5
60300: NEG
60301: PUSH
60302: LD_INT 5
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 3
60312: NEG
60313: PUSH
60314: LD_INT 5
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 5
60324: NEG
60325: PUSH
60326: LD_INT 3
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60381: LD_ADDR_VAR 0 30
60385: PUSH
60386: LD_INT 4
60388: PUSH
60389: LD_INT 4
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 4
60398: PUSH
60399: LD_INT 3
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 5
60408: PUSH
60409: LD_INT 4
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 5
60418: PUSH
60419: LD_INT 5
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 4
60428: PUSH
60429: LD_INT 5
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 3
60438: PUSH
60439: LD_INT 4
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 3
60448: PUSH
60449: LD_INT 3
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 5
60458: PUSH
60459: LD_INT 3
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 3
60468: PUSH
60469: LD_INT 5
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: LD_INT 3
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: LD_INT 2
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: LD_INT 4
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: LD_INT 3
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: NEG
60540: PUSH
60541: LD_INT 2
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: LD_INT 4
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 2
60560: NEG
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 4
60571: NEG
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 4
60582: NEG
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 3
60605: NEG
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 4
60616: NEG
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 5
60627: NEG
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 5
60638: NEG
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 5
60650: NEG
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 3
60662: NEG
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 3
60673: NEG
60674: PUSH
60675: LD_INT 3
60677: NEG
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 3
60685: NEG
60686: PUSH
60687: LD_INT 4
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 2
60697: NEG
60698: PUSH
60699: LD_INT 3
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 2
60709: NEG
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 3
60721: NEG
60722: PUSH
60723: LD_INT 2
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 4
60733: NEG
60734: PUSH
60735: LD_INT 3
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 4
60745: NEG
60746: PUSH
60747: LD_INT 4
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 2
60757: NEG
60758: PUSH
60759: LD_INT 4
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 4
60769: NEG
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: LD_INT 4
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_INT 5
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: LD_INT 4
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: LD_INT 3
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 3
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: LD_INT 4
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: LD_INT 5
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 2
60860: PUSH
60861: LD_INT 3
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 2
60871: NEG
60872: PUSH
60873: LD_INT 5
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60928: LD_ADDR_VAR 0 31
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: LD_INT 4
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: LD_INT 3
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 4
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: LD_INT 5
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 5
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 4
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: LD_INT 3
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: LD_INT 5
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: LD_INT 3
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 3
61028: NEG
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 3
61039: NEG
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 2
61051: NEG
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 2
61062: NEG
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 3
61073: NEG
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 4
61084: NEG
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 4
61095: NEG
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 4
61107: NEG
61108: PUSH
61109: LD_INT 2
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 4
61130: NEG
61131: PUSH
61132: LD_INT 4
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 4
61142: NEG
61143: PUSH
61144: LD_INT 5
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 3
61154: NEG
61155: PUSH
61156: LD_INT 4
61158: NEG
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 3
61166: NEG
61167: PUSH
61168: LD_INT 3
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 4
61178: NEG
61179: PUSH
61180: LD_INT 3
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 5
61190: NEG
61191: PUSH
61192: LD_INT 4
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 5
61202: NEG
61203: PUSH
61204: LD_INT 5
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 3
61214: NEG
61215: PUSH
61216: LD_INT 5
61218: NEG
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 5
61226: NEG
61227: PUSH
61228: LD_INT 3
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: LD_INT 3
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 4
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: LD_INT 2
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: LD_INT 3
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: LD_INT 4
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 2
61317: PUSH
61318: LD_INT 2
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 2
61328: NEG
61329: PUSH
61330: LD_INT 4
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 4
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 4
61350: PUSH
61351: LD_INT 1
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 5
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 5
61371: PUSH
61372: LD_INT 1
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 4
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 3
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 3
61401: PUSH
61402: LD_INT 1
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 5
61423: PUSH
61424: LD_INT 2
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61478: LD_ADDR_VAR 0 32
61482: PUSH
61483: LD_INT 4
61485: NEG
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 4
61496: NEG
61497: PUSH
61498: LD_INT 1
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 3
61508: NEG
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 3
61519: NEG
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 4
61530: NEG
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 5
61541: NEG
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 5
61552: NEG
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 5
61564: NEG
61565: PUSH
61566: LD_INT 2
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 3
61576: NEG
61577: PUSH
61578: LD_INT 2
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 3
61587: NEG
61588: PUSH
61589: LD_INT 3
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 3
61599: NEG
61600: PUSH
61601: LD_INT 4
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 2
61611: NEG
61612: PUSH
61613: LD_INT 3
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: LD_INT 2
61627: NEG
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 3
61635: NEG
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 4
61647: NEG
61648: PUSH
61649: LD_INT 3
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 4
61659: NEG
61660: PUSH
61661: LD_INT 4
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 2
61671: NEG
61672: PUSH
61673: LD_INT 4
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 4
61683: NEG
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: LD_INT 4
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: LD_INT 5
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: LD_INT 4
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: LD_INT 3
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: LD_INT 3
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: LD_INT 4
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 1
61762: NEG
61763: PUSH
61764: LD_INT 5
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 2
61774: PUSH
61775: LD_INT 3
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 2
61785: NEG
61786: PUSH
61787: LD_INT 5
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 3
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 3
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 4
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 4
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 3
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 2
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 2
61858: PUSH
61859: LD_INT 1
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 2
61869: PUSH
61870: LD_INT 2
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 4
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 4
61890: PUSH
61891: LD_INT 4
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 4
61900: PUSH
61901: LD_INT 3
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 5
61910: PUSH
61911: LD_INT 4
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 5
61920: PUSH
61921: LD_INT 5
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 4
61930: PUSH
61931: LD_INT 5
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 3
61940: PUSH
61941: LD_INT 4
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 3
61950: PUSH
61951: LD_INT 3
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 5
61960: PUSH
61961: LD_INT 3
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 3
61970: PUSH
61971: LD_INT 5
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62025: LD_ADDR_VAR 0 33
62029: PUSH
62030: LD_INT 4
62032: NEG
62033: PUSH
62034: LD_INT 4
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 4
62044: NEG
62045: PUSH
62046: LD_INT 5
62048: NEG
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 3
62056: NEG
62057: PUSH
62058: LD_INT 4
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 3
62068: NEG
62069: PUSH
62070: LD_INT 3
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 4
62080: NEG
62081: PUSH
62082: LD_INT 3
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 5
62092: NEG
62093: PUSH
62094: LD_INT 4
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 5
62104: NEG
62105: PUSH
62106: LD_INT 5
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 3
62116: NEG
62117: PUSH
62118: LD_INT 5
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 5
62128: NEG
62129: PUSH
62130: LD_INT 3
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: LD_INT 3
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: LD_INT 4
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: LD_INT 3
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: LD_INT 2
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: LD_INT 2
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: LD_INT 3
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: LD_INT 4
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: PUSH
62220: LD_INT 2
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 2
62230: NEG
62231: PUSH
62232: LD_INT 4
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 4
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 4
62252: PUSH
62253: LD_INT 1
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 5
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 5
62273: PUSH
62274: LD_INT 1
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 4
62283: PUSH
62284: LD_INT 1
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 3
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 3
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 3
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 5
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 3
62335: PUSH
62336: LD_INT 3
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 3
62345: PUSH
62346: LD_INT 2
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 4
62355: PUSH
62356: LD_INT 3
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 4
62365: PUSH
62366: LD_INT 4
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 3
62375: PUSH
62376: LD_INT 4
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: LD_INT 3
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 2
62395: PUSH
62396: LD_INT 2
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 4
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: LD_INT 4
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: LD_INT 4
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: LD_INT 3
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 1
62445: PUSH
62446: LD_INT 4
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 1
62455: PUSH
62456: LD_INT 5
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: LD_INT 5
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: LD_INT 4
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: LD_INT 3
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 2
62497: PUSH
62498: LD_INT 5
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 2
62507: NEG
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62563: LD_ADDR_VAR 0 34
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: LD_INT 4
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 0
62581: PUSH
62582: LD_INT 5
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: LD_INT 4
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: LD_INT 3
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: LD_INT 3
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: LD_INT 4
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: LD_INT 5
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 2
62649: PUSH
62650: LD_INT 3
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 2
62660: NEG
62661: PUSH
62662: LD_INT 5
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 3
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 3
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 4
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 4
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 3
62713: PUSH
62714: LD_INT 1
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 2
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 2
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: LD_INT 2
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 4
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 4
62765: PUSH
62766: LD_INT 4
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 4
62775: PUSH
62776: LD_INT 3
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 5
62785: PUSH
62786: LD_INT 4
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 5
62795: PUSH
62796: LD_INT 5
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 4
62805: PUSH
62806: LD_INT 5
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 3
62815: PUSH
62816: LD_INT 4
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 3
62825: PUSH
62826: LD_INT 3
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 5
62835: PUSH
62836: LD_INT 3
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 3
62845: PUSH
62846: LD_INT 5
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: LD_INT 3
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: LD_INT 3
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 1
62885: PUSH
62886: LD_INT 4
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: LD_INT 4
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: LD_INT 3
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: LD_INT 2
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 2
62927: PUSH
62928: LD_INT 4
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 2
62937: NEG
62938: PUSH
62939: LD_INT 2
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 4
62948: NEG
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 4
62959: NEG
62960: PUSH
62961: LD_INT 1
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 3
62971: NEG
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 3
62982: NEG
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 4
62993: NEG
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 5
63004: NEG
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 5
63015: NEG
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 5
63027: NEG
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 3
63039: NEG
63040: PUSH
63041: LD_INT 2
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: ST_TO_ADDR
// end ; end ;
63095: GO 63098
63097: POP
// case btype of b_depot , b_warehouse :
63098: LD_VAR 0 1
63102: PUSH
63103: LD_INT 0
63105: DOUBLE
63106: EQUAL
63107: IFTRUE 63117
63109: LD_INT 1
63111: DOUBLE
63112: EQUAL
63113: IFTRUE 63117
63115: GO 63318
63117: POP
// case nation of nation_american :
63118: LD_VAR 0 5
63122: PUSH
63123: LD_INT 1
63125: DOUBLE
63126: EQUAL
63127: IFTRUE 63131
63129: GO 63187
63131: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63132: LD_ADDR_VAR 0 9
63136: PUSH
63137: LD_VAR 0 11
63141: PUSH
63142: LD_VAR 0 12
63146: PUSH
63147: LD_VAR 0 13
63151: PUSH
63152: LD_VAR 0 14
63156: PUSH
63157: LD_VAR 0 15
63161: PUSH
63162: LD_VAR 0 16
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: PUSH
63175: LD_VAR 0 4
63179: PUSH
63180: LD_INT 1
63182: PLUS
63183: ARRAY
63184: ST_TO_ADDR
63185: GO 63316
63187: LD_INT 2
63189: DOUBLE
63190: EQUAL
63191: IFTRUE 63195
63193: GO 63251
63195: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63196: LD_ADDR_VAR 0 9
63200: PUSH
63201: LD_VAR 0 17
63205: PUSH
63206: LD_VAR 0 18
63210: PUSH
63211: LD_VAR 0 19
63215: PUSH
63216: LD_VAR 0 20
63220: PUSH
63221: LD_VAR 0 21
63225: PUSH
63226: LD_VAR 0 22
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: PUSH
63239: LD_VAR 0 4
63243: PUSH
63244: LD_INT 1
63246: PLUS
63247: ARRAY
63248: ST_TO_ADDR
63249: GO 63316
63251: LD_INT 3
63253: DOUBLE
63254: EQUAL
63255: IFTRUE 63259
63257: GO 63315
63259: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63260: LD_ADDR_VAR 0 9
63264: PUSH
63265: LD_VAR 0 23
63269: PUSH
63270: LD_VAR 0 24
63274: PUSH
63275: LD_VAR 0 25
63279: PUSH
63280: LD_VAR 0 26
63284: PUSH
63285: LD_VAR 0 27
63289: PUSH
63290: LD_VAR 0 28
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: PUSH
63303: LD_VAR 0 4
63307: PUSH
63308: LD_INT 1
63310: PLUS
63311: ARRAY
63312: ST_TO_ADDR
63313: GO 63316
63315: POP
63316: GO 63871
63318: LD_INT 2
63320: DOUBLE
63321: EQUAL
63322: IFTRUE 63332
63324: LD_INT 3
63326: DOUBLE
63327: EQUAL
63328: IFTRUE 63332
63330: GO 63388
63332: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63333: LD_ADDR_VAR 0 9
63337: PUSH
63338: LD_VAR 0 29
63342: PUSH
63343: LD_VAR 0 30
63347: PUSH
63348: LD_VAR 0 31
63352: PUSH
63353: LD_VAR 0 32
63357: PUSH
63358: LD_VAR 0 33
63362: PUSH
63363: LD_VAR 0 34
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: PUSH
63376: LD_VAR 0 4
63380: PUSH
63381: LD_INT 1
63383: PLUS
63384: ARRAY
63385: ST_TO_ADDR
63386: GO 63871
63388: LD_INT 16
63390: DOUBLE
63391: EQUAL
63392: IFTRUE 63450
63394: LD_INT 17
63396: DOUBLE
63397: EQUAL
63398: IFTRUE 63450
63400: LD_INT 18
63402: DOUBLE
63403: EQUAL
63404: IFTRUE 63450
63406: LD_INT 19
63408: DOUBLE
63409: EQUAL
63410: IFTRUE 63450
63412: LD_INT 22
63414: DOUBLE
63415: EQUAL
63416: IFTRUE 63450
63418: LD_INT 20
63420: DOUBLE
63421: EQUAL
63422: IFTRUE 63450
63424: LD_INT 21
63426: DOUBLE
63427: EQUAL
63428: IFTRUE 63450
63430: LD_INT 23
63432: DOUBLE
63433: EQUAL
63434: IFTRUE 63450
63436: LD_INT 24
63438: DOUBLE
63439: EQUAL
63440: IFTRUE 63450
63442: LD_INT 25
63444: DOUBLE
63445: EQUAL
63446: IFTRUE 63450
63448: GO 63506
63450: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63451: LD_ADDR_VAR 0 9
63455: PUSH
63456: LD_VAR 0 35
63460: PUSH
63461: LD_VAR 0 36
63465: PUSH
63466: LD_VAR 0 37
63470: PUSH
63471: LD_VAR 0 38
63475: PUSH
63476: LD_VAR 0 39
63480: PUSH
63481: LD_VAR 0 40
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: PUSH
63494: LD_VAR 0 4
63498: PUSH
63499: LD_INT 1
63501: PLUS
63502: ARRAY
63503: ST_TO_ADDR
63504: GO 63871
63506: LD_INT 6
63508: DOUBLE
63509: EQUAL
63510: IFTRUE 63562
63512: LD_INT 7
63514: DOUBLE
63515: EQUAL
63516: IFTRUE 63562
63518: LD_INT 8
63520: DOUBLE
63521: EQUAL
63522: IFTRUE 63562
63524: LD_INT 13
63526: DOUBLE
63527: EQUAL
63528: IFTRUE 63562
63530: LD_INT 12
63532: DOUBLE
63533: EQUAL
63534: IFTRUE 63562
63536: LD_INT 15
63538: DOUBLE
63539: EQUAL
63540: IFTRUE 63562
63542: LD_INT 11
63544: DOUBLE
63545: EQUAL
63546: IFTRUE 63562
63548: LD_INT 14
63550: DOUBLE
63551: EQUAL
63552: IFTRUE 63562
63554: LD_INT 10
63556: DOUBLE
63557: EQUAL
63558: IFTRUE 63562
63560: GO 63618
63562: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63563: LD_ADDR_VAR 0 9
63567: PUSH
63568: LD_VAR 0 41
63572: PUSH
63573: LD_VAR 0 42
63577: PUSH
63578: LD_VAR 0 43
63582: PUSH
63583: LD_VAR 0 44
63587: PUSH
63588: LD_VAR 0 45
63592: PUSH
63593: LD_VAR 0 46
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: PUSH
63606: LD_VAR 0 4
63610: PUSH
63611: LD_INT 1
63613: PLUS
63614: ARRAY
63615: ST_TO_ADDR
63616: GO 63871
63618: LD_INT 36
63620: DOUBLE
63621: EQUAL
63622: IFTRUE 63626
63624: GO 63682
63626: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63627: LD_ADDR_VAR 0 9
63631: PUSH
63632: LD_VAR 0 47
63636: PUSH
63637: LD_VAR 0 48
63641: PUSH
63642: LD_VAR 0 49
63646: PUSH
63647: LD_VAR 0 50
63651: PUSH
63652: LD_VAR 0 51
63656: PUSH
63657: LD_VAR 0 52
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: PUSH
63670: LD_VAR 0 4
63674: PUSH
63675: LD_INT 1
63677: PLUS
63678: ARRAY
63679: ST_TO_ADDR
63680: GO 63871
63682: LD_INT 4
63684: DOUBLE
63685: EQUAL
63686: IFTRUE 63708
63688: LD_INT 5
63690: DOUBLE
63691: EQUAL
63692: IFTRUE 63708
63694: LD_INT 34
63696: DOUBLE
63697: EQUAL
63698: IFTRUE 63708
63700: LD_INT 37
63702: DOUBLE
63703: EQUAL
63704: IFTRUE 63708
63706: GO 63764
63708: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63709: LD_ADDR_VAR 0 9
63713: PUSH
63714: LD_VAR 0 53
63718: PUSH
63719: LD_VAR 0 54
63723: PUSH
63724: LD_VAR 0 55
63728: PUSH
63729: LD_VAR 0 56
63733: PUSH
63734: LD_VAR 0 57
63738: PUSH
63739: LD_VAR 0 58
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: PUSH
63752: LD_VAR 0 4
63756: PUSH
63757: LD_INT 1
63759: PLUS
63760: ARRAY
63761: ST_TO_ADDR
63762: GO 63871
63764: LD_INT 31
63766: DOUBLE
63767: EQUAL
63768: IFTRUE 63814
63770: LD_INT 32
63772: DOUBLE
63773: EQUAL
63774: IFTRUE 63814
63776: LD_INT 33
63778: DOUBLE
63779: EQUAL
63780: IFTRUE 63814
63782: LD_INT 27
63784: DOUBLE
63785: EQUAL
63786: IFTRUE 63814
63788: LD_INT 26
63790: DOUBLE
63791: EQUAL
63792: IFTRUE 63814
63794: LD_INT 28
63796: DOUBLE
63797: EQUAL
63798: IFTRUE 63814
63800: LD_INT 29
63802: DOUBLE
63803: EQUAL
63804: IFTRUE 63814
63806: LD_INT 30
63808: DOUBLE
63809: EQUAL
63810: IFTRUE 63814
63812: GO 63870
63814: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63815: LD_ADDR_VAR 0 9
63819: PUSH
63820: LD_VAR 0 59
63824: PUSH
63825: LD_VAR 0 60
63829: PUSH
63830: LD_VAR 0 61
63834: PUSH
63835: LD_VAR 0 62
63839: PUSH
63840: LD_VAR 0 63
63844: PUSH
63845: LD_VAR 0 64
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: PUSH
63858: LD_VAR 0 4
63862: PUSH
63863: LD_INT 1
63865: PLUS
63866: ARRAY
63867: ST_TO_ADDR
63868: GO 63871
63870: POP
// temp_list2 = [ ] ;
63871: LD_ADDR_VAR 0 10
63875: PUSH
63876: EMPTY
63877: ST_TO_ADDR
// for i in temp_list do
63878: LD_ADDR_VAR 0 8
63882: PUSH
63883: LD_VAR 0 9
63887: PUSH
63888: FOR_IN
63889: IFFALSE 63941
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63891: LD_ADDR_VAR 0 10
63895: PUSH
63896: LD_VAR 0 10
63900: PUSH
63901: LD_VAR 0 8
63905: PUSH
63906: LD_INT 1
63908: ARRAY
63909: PUSH
63910: LD_VAR 0 2
63914: PLUS
63915: PUSH
63916: LD_VAR 0 8
63920: PUSH
63921: LD_INT 2
63923: ARRAY
63924: PUSH
63925: LD_VAR 0 3
63929: PLUS
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: EMPTY
63936: LIST
63937: ADD
63938: ST_TO_ADDR
63939: GO 63888
63941: POP
63942: POP
// result = temp_list2 ;
63943: LD_ADDR_VAR 0 7
63947: PUSH
63948: LD_VAR 0 10
63952: ST_TO_ADDR
// end ;
63953: LD_VAR 0 7
63957: RET
// export function EnemyInRange ( unit , dist ) ; begin
63958: LD_INT 0
63960: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63961: LD_ADDR_VAR 0 3
63965: PUSH
63966: LD_VAR 0 1
63970: PPUSH
63971: CALL_OW 255
63975: PPUSH
63976: LD_VAR 0 1
63980: PPUSH
63981: CALL_OW 250
63985: PPUSH
63986: LD_VAR 0 1
63990: PPUSH
63991: CALL_OW 251
63995: PPUSH
63996: LD_VAR 0 2
64000: PPUSH
64001: CALL 37360 0 4
64005: PUSH
64006: LD_INT 4
64008: ARRAY
64009: ST_TO_ADDR
// end ;
64010: LD_VAR 0 3
64014: RET
// export function PlayerSeeMe ( unit ) ; begin
64015: LD_INT 0
64017: PPUSH
// result := See ( your_side , unit ) ;
64018: LD_ADDR_VAR 0 2
64022: PUSH
64023: LD_OWVAR 2
64027: PPUSH
64028: LD_VAR 0 1
64032: PPUSH
64033: CALL_OW 292
64037: ST_TO_ADDR
// end ;
64038: LD_VAR 0 2
64042: RET
// export function ReverseDir ( unit ) ; begin
64043: LD_INT 0
64045: PPUSH
// if not unit then
64046: LD_VAR 0 1
64050: NOT
64051: IFFALSE 64055
// exit ;
64053: GO 64078
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64055: LD_ADDR_VAR 0 2
64059: PUSH
64060: LD_VAR 0 1
64064: PPUSH
64065: CALL_OW 254
64069: PUSH
64070: LD_INT 3
64072: PLUS
64073: PUSH
64074: LD_INT 6
64076: MOD
64077: ST_TO_ADDR
// end ;
64078: LD_VAR 0 2
64082: RET
// export function ReverseArray ( array ) ; var i ; begin
64083: LD_INT 0
64085: PPUSH
64086: PPUSH
// if not array then
64087: LD_VAR 0 1
64091: NOT
64092: IFFALSE 64096
// exit ;
64094: GO 64151
// result := [ ] ;
64096: LD_ADDR_VAR 0 2
64100: PUSH
64101: EMPTY
64102: ST_TO_ADDR
// for i := array downto 1 do
64103: LD_ADDR_VAR 0 3
64107: PUSH
64108: DOUBLE
64109: LD_VAR 0 1
64113: INC
64114: ST_TO_ADDR
64115: LD_INT 1
64117: PUSH
64118: FOR_DOWNTO
64119: IFFALSE 64149
// result := Join ( result , array [ i ] ) ;
64121: LD_ADDR_VAR 0 2
64125: PUSH
64126: LD_VAR 0 2
64130: PPUSH
64131: LD_VAR 0 1
64135: PUSH
64136: LD_VAR 0 3
64140: ARRAY
64141: PPUSH
64142: CALL 68794 0 2
64146: ST_TO_ADDR
64147: GO 64118
64149: POP
64150: POP
// end ;
64151: LD_VAR 0 2
64155: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64156: LD_INT 0
64158: PPUSH
64159: PPUSH
64160: PPUSH
64161: PPUSH
64162: PPUSH
64163: PPUSH
// if not unit or not hexes then
64164: LD_VAR 0 1
64168: NOT
64169: PUSH
64170: LD_VAR 0 2
64174: NOT
64175: OR
64176: IFFALSE 64180
// exit ;
64178: GO 64303
// dist := 9999 ;
64180: LD_ADDR_VAR 0 5
64184: PUSH
64185: LD_INT 9999
64187: ST_TO_ADDR
// for i = 1 to hexes do
64188: LD_ADDR_VAR 0 4
64192: PUSH
64193: DOUBLE
64194: LD_INT 1
64196: DEC
64197: ST_TO_ADDR
64198: LD_VAR 0 2
64202: PUSH
64203: FOR_TO
64204: IFFALSE 64291
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64206: LD_ADDR_VAR 0 6
64210: PUSH
64211: LD_VAR 0 1
64215: PPUSH
64216: LD_VAR 0 2
64220: PUSH
64221: LD_VAR 0 4
64225: ARRAY
64226: PUSH
64227: LD_INT 1
64229: ARRAY
64230: PPUSH
64231: LD_VAR 0 2
64235: PUSH
64236: LD_VAR 0 4
64240: ARRAY
64241: PUSH
64242: LD_INT 2
64244: ARRAY
64245: PPUSH
64246: CALL_OW 297
64250: ST_TO_ADDR
// if tdist < dist then
64251: LD_VAR 0 6
64255: PUSH
64256: LD_VAR 0 5
64260: LESS
64261: IFFALSE 64289
// begin hex := hexes [ i ] ;
64263: LD_ADDR_VAR 0 8
64267: PUSH
64268: LD_VAR 0 2
64272: PUSH
64273: LD_VAR 0 4
64277: ARRAY
64278: ST_TO_ADDR
// dist := tdist ;
64279: LD_ADDR_VAR 0 5
64283: PUSH
64284: LD_VAR 0 6
64288: ST_TO_ADDR
// end ; end ;
64289: GO 64203
64291: POP
64292: POP
// result := hex ;
64293: LD_ADDR_VAR 0 3
64297: PUSH
64298: LD_VAR 0 8
64302: ST_TO_ADDR
// end ;
64303: LD_VAR 0 3
64307: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64308: LD_INT 0
64310: PPUSH
64311: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64312: LD_VAR 0 1
64316: NOT
64317: PUSH
64318: LD_VAR 0 1
64322: PUSH
64323: LD_INT 21
64325: PUSH
64326: LD_INT 2
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 23
64335: PUSH
64336: LD_INT 2
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PPUSH
64347: CALL_OW 69
64351: IN
64352: NOT
64353: OR
64354: IFFALSE 64358
// exit ;
64356: GO 64405
// for i = 1 to 3 do
64358: LD_ADDR_VAR 0 3
64362: PUSH
64363: DOUBLE
64364: LD_INT 1
64366: DEC
64367: ST_TO_ADDR
64368: LD_INT 3
64370: PUSH
64371: FOR_TO
64372: IFFALSE 64403
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64374: LD_VAR 0 1
64378: PPUSH
64379: CALL_OW 250
64383: PPUSH
64384: LD_VAR 0 1
64388: PPUSH
64389: CALL_OW 251
64393: PPUSH
64394: LD_INT 1
64396: PPUSH
64397: CALL_OW 453
64401: GO 64371
64403: POP
64404: POP
// end ;
64405: LD_VAR 0 2
64409: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64410: LD_INT 0
64412: PPUSH
64413: PPUSH
64414: PPUSH
64415: PPUSH
64416: PPUSH
64417: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64418: LD_VAR 0 1
64422: NOT
64423: PUSH
64424: LD_VAR 0 2
64428: NOT
64429: OR
64430: PUSH
64431: LD_VAR 0 1
64435: PPUSH
64436: CALL_OW 314
64440: OR
64441: IFFALSE 64445
// exit ;
64443: GO 64912
// if GetLives ( i ) < 250 then
64445: LD_VAR 0 4
64449: PPUSH
64450: CALL_OW 256
64454: PUSH
64455: LD_INT 250
64457: LESS
64458: IFFALSE 64471
// begin ComAutodestruct ( i ) ;
64460: LD_VAR 0 4
64464: PPUSH
64465: CALL 64308 0 1
// exit ;
64469: GO 64912
// end ; x := GetX ( enemy_unit ) ;
64471: LD_ADDR_VAR 0 7
64475: PUSH
64476: LD_VAR 0 2
64480: PPUSH
64481: CALL_OW 250
64485: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64486: LD_ADDR_VAR 0 8
64490: PUSH
64491: LD_VAR 0 2
64495: PPUSH
64496: CALL_OW 251
64500: ST_TO_ADDR
// if not x or not y then
64501: LD_VAR 0 7
64505: NOT
64506: PUSH
64507: LD_VAR 0 8
64511: NOT
64512: OR
64513: IFFALSE 64517
// exit ;
64515: GO 64912
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64517: LD_ADDR_VAR 0 6
64521: PUSH
64522: LD_VAR 0 7
64526: PPUSH
64527: LD_INT 0
64529: PPUSH
64530: LD_INT 4
64532: PPUSH
64533: CALL_OW 272
64537: PUSH
64538: LD_VAR 0 8
64542: PPUSH
64543: LD_INT 0
64545: PPUSH
64546: LD_INT 4
64548: PPUSH
64549: CALL_OW 273
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_VAR 0 7
64562: PPUSH
64563: LD_INT 1
64565: PPUSH
64566: LD_INT 4
64568: PPUSH
64569: CALL_OW 272
64573: PUSH
64574: LD_VAR 0 8
64578: PPUSH
64579: LD_INT 1
64581: PPUSH
64582: LD_INT 4
64584: PPUSH
64585: CALL_OW 273
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_VAR 0 7
64598: PPUSH
64599: LD_INT 2
64601: PPUSH
64602: LD_INT 4
64604: PPUSH
64605: CALL_OW 272
64609: PUSH
64610: LD_VAR 0 8
64614: PPUSH
64615: LD_INT 2
64617: PPUSH
64618: LD_INT 4
64620: PPUSH
64621: CALL_OW 273
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_VAR 0 7
64634: PPUSH
64635: LD_INT 3
64637: PPUSH
64638: LD_INT 4
64640: PPUSH
64641: CALL_OW 272
64645: PUSH
64646: LD_VAR 0 8
64650: PPUSH
64651: LD_INT 3
64653: PPUSH
64654: LD_INT 4
64656: PPUSH
64657: CALL_OW 273
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_VAR 0 7
64670: PPUSH
64671: LD_INT 4
64673: PPUSH
64674: LD_INT 4
64676: PPUSH
64677: CALL_OW 272
64681: PUSH
64682: LD_VAR 0 8
64686: PPUSH
64687: LD_INT 4
64689: PPUSH
64690: LD_INT 4
64692: PPUSH
64693: CALL_OW 273
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_VAR 0 7
64706: PPUSH
64707: LD_INT 5
64709: PPUSH
64710: LD_INT 4
64712: PPUSH
64713: CALL_OW 272
64717: PUSH
64718: LD_VAR 0 8
64722: PPUSH
64723: LD_INT 5
64725: PPUSH
64726: LD_INT 4
64728: PPUSH
64729: CALL_OW 273
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: ST_TO_ADDR
// for i = tmp downto 1 do
64746: LD_ADDR_VAR 0 4
64750: PUSH
64751: DOUBLE
64752: LD_VAR 0 6
64756: INC
64757: ST_TO_ADDR
64758: LD_INT 1
64760: PUSH
64761: FOR_DOWNTO
64762: IFFALSE 64863
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64764: LD_VAR 0 6
64768: PUSH
64769: LD_VAR 0 4
64773: ARRAY
64774: PUSH
64775: LD_INT 1
64777: ARRAY
64778: PPUSH
64779: LD_VAR 0 6
64783: PUSH
64784: LD_VAR 0 4
64788: ARRAY
64789: PUSH
64790: LD_INT 2
64792: ARRAY
64793: PPUSH
64794: CALL_OW 488
64798: NOT
64799: PUSH
64800: LD_VAR 0 6
64804: PUSH
64805: LD_VAR 0 4
64809: ARRAY
64810: PUSH
64811: LD_INT 1
64813: ARRAY
64814: PPUSH
64815: LD_VAR 0 6
64819: PUSH
64820: LD_VAR 0 4
64824: ARRAY
64825: PUSH
64826: LD_INT 2
64828: ARRAY
64829: PPUSH
64830: CALL_OW 428
64834: PUSH
64835: LD_INT 0
64837: NONEQUAL
64838: OR
64839: IFFALSE 64861
// tmp := Delete ( tmp , i ) ;
64841: LD_ADDR_VAR 0 6
64845: PUSH
64846: LD_VAR 0 6
64850: PPUSH
64851: LD_VAR 0 4
64855: PPUSH
64856: CALL_OW 3
64860: ST_TO_ADDR
64861: GO 64761
64863: POP
64864: POP
// j := GetClosestHex ( unit , tmp ) ;
64865: LD_ADDR_VAR 0 5
64869: PUSH
64870: LD_VAR 0 1
64874: PPUSH
64875: LD_VAR 0 6
64879: PPUSH
64880: CALL 64156 0 2
64884: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64885: LD_VAR 0 1
64889: PPUSH
64890: LD_VAR 0 5
64894: PUSH
64895: LD_INT 1
64897: ARRAY
64898: PPUSH
64899: LD_VAR 0 5
64903: PUSH
64904: LD_INT 2
64906: ARRAY
64907: PPUSH
64908: CALL_OW 111
// end ;
64912: LD_VAR 0 3
64916: RET
// export function PrepareApemanSoldier ( ) ; begin
64917: LD_INT 0
64919: PPUSH
// uc_nation := 0 ;
64920: LD_ADDR_OWVAR 21
64924: PUSH
64925: LD_INT 0
64927: ST_TO_ADDR
// hc_sex := sex_male ;
64928: LD_ADDR_OWVAR 27
64932: PUSH
64933: LD_INT 1
64935: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64936: LD_ADDR_OWVAR 28
64940: PUSH
64941: LD_INT 15
64943: ST_TO_ADDR
// hc_gallery :=  ;
64944: LD_ADDR_OWVAR 33
64948: PUSH
64949: LD_STRING 
64951: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64952: LD_ADDR_OWVAR 31
64956: PUSH
64957: LD_INT 0
64959: PPUSH
64960: LD_INT 3
64962: PPUSH
64963: CALL_OW 12
64967: PUSH
64968: LD_INT 0
64970: PPUSH
64971: LD_INT 3
64973: PPUSH
64974: CALL_OW 12
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: ST_TO_ADDR
// end ;
64991: LD_VAR 0 1
64995: RET
// export function PrepareApemanEngineer ( ) ; begin
64996: LD_INT 0
64998: PPUSH
// uc_nation := 0 ;
64999: LD_ADDR_OWVAR 21
65003: PUSH
65004: LD_INT 0
65006: ST_TO_ADDR
// hc_sex := sex_male ;
65007: LD_ADDR_OWVAR 27
65011: PUSH
65012: LD_INT 1
65014: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65015: LD_ADDR_OWVAR 28
65019: PUSH
65020: LD_INT 16
65022: ST_TO_ADDR
// hc_gallery :=  ;
65023: LD_ADDR_OWVAR 33
65027: PUSH
65028: LD_STRING 
65030: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65031: LD_ADDR_OWVAR 31
65035: PUSH
65036: LD_INT 0
65038: PPUSH
65039: LD_INT 3
65041: PPUSH
65042: CALL_OW 12
65046: PUSH
65047: LD_INT 0
65049: PPUSH
65050: LD_INT 3
65052: PPUSH
65053: CALL_OW 12
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: ST_TO_ADDR
// end ;
65070: LD_VAR 0 1
65074: RET
// export function PrepareApeman ( agressivity ) ; begin
65075: LD_INT 0
65077: PPUSH
// uc_side := 0 ;
65078: LD_ADDR_OWVAR 20
65082: PUSH
65083: LD_INT 0
65085: ST_TO_ADDR
// uc_nation := 0 ;
65086: LD_ADDR_OWVAR 21
65090: PUSH
65091: LD_INT 0
65093: ST_TO_ADDR
// hc_sex := sex_male ;
65094: LD_ADDR_OWVAR 27
65098: PUSH
65099: LD_INT 1
65101: ST_TO_ADDR
// hc_class := class_apeman ;
65102: LD_ADDR_OWVAR 28
65106: PUSH
65107: LD_INT 12
65109: ST_TO_ADDR
// hc_gallery :=  ;
65110: LD_ADDR_OWVAR 33
65114: PUSH
65115: LD_STRING 
65117: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65118: LD_ADDR_OWVAR 35
65122: PUSH
65123: LD_VAR 0 1
65127: NEG
65128: PPUSH
65129: LD_VAR 0 1
65133: PPUSH
65134: CALL_OW 12
65138: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65139: LD_ADDR_OWVAR 31
65143: PUSH
65144: LD_INT 0
65146: PPUSH
65147: LD_INT 3
65149: PPUSH
65150: CALL_OW 12
65154: PUSH
65155: LD_INT 0
65157: PPUSH
65158: LD_INT 3
65160: PPUSH
65161: CALL_OW 12
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: LD_INT 0
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: ST_TO_ADDR
// end ;
65178: LD_VAR 0 2
65182: RET
// export function PrepareTiger ( agressivity ) ; begin
65183: LD_INT 0
65185: PPUSH
// uc_side := 0 ;
65186: LD_ADDR_OWVAR 20
65190: PUSH
65191: LD_INT 0
65193: ST_TO_ADDR
// uc_nation := 0 ;
65194: LD_ADDR_OWVAR 21
65198: PUSH
65199: LD_INT 0
65201: ST_TO_ADDR
// hc_class := class_tiger ;
65202: LD_ADDR_OWVAR 28
65206: PUSH
65207: LD_INT 14
65209: ST_TO_ADDR
// hc_gallery :=  ;
65210: LD_ADDR_OWVAR 33
65214: PUSH
65215: LD_STRING 
65217: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65218: LD_ADDR_OWVAR 35
65222: PUSH
65223: LD_VAR 0 1
65227: NEG
65228: PPUSH
65229: LD_VAR 0 1
65233: PPUSH
65234: CALL_OW 12
65238: ST_TO_ADDR
// end ;
65239: LD_VAR 0 2
65243: RET
// export function PrepareEnchidna ( ) ; begin
65244: LD_INT 0
65246: PPUSH
// uc_side := 0 ;
65247: LD_ADDR_OWVAR 20
65251: PUSH
65252: LD_INT 0
65254: ST_TO_ADDR
// uc_nation := 0 ;
65255: LD_ADDR_OWVAR 21
65259: PUSH
65260: LD_INT 0
65262: ST_TO_ADDR
// hc_class := class_baggie ;
65263: LD_ADDR_OWVAR 28
65267: PUSH
65268: LD_INT 13
65270: ST_TO_ADDR
// hc_gallery :=  ;
65271: LD_ADDR_OWVAR 33
65275: PUSH
65276: LD_STRING 
65278: ST_TO_ADDR
// end ;
65279: LD_VAR 0 1
65283: RET
// export function PrepareFrog ( ) ; begin
65284: LD_INT 0
65286: PPUSH
// uc_side := 0 ;
65287: LD_ADDR_OWVAR 20
65291: PUSH
65292: LD_INT 0
65294: ST_TO_ADDR
// uc_nation := 0 ;
65295: LD_ADDR_OWVAR 21
65299: PUSH
65300: LD_INT 0
65302: ST_TO_ADDR
// hc_class := class_frog ;
65303: LD_ADDR_OWVAR 28
65307: PUSH
65308: LD_INT 19
65310: ST_TO_ADDR
// hc_gallery :=  ;
65311: LD_ADDR_OWVAR 33
65315: PUSH
65316: LD_STRING 
65318: ST_TO_ADDR
// end ;
65319: LD_VAR 0 1
65323: RET
// export function PrepareFish ( ) ; begin
65324: LD_INT 0
65326: PPUSH
// uc_side := 0 ;
65327: LD_ADDR_OWVAR 20
65331: PUSH
65332: LD_INT 0
65334: ST_TO_ADDR
// uc_nation := 0 ;
65335: LD_ADDR_OWVAR 21
65339: PUSH
65340: LD_INT 0
65342: ST_TO_ADDR
// hc_class := class_fish ;
65343: LD_ADDR_OWVAR 28
65347: PUSH
65348: LD_INT 20
65350: ST_TO_ADDR
// hc_gallery :=  ;
65351: LD_ADDR_OWVAR 33
65355: PUSH
65356: LD_STRING 
65358: ST_TO_ADDR
// end ;
65359: LD_VAR 0 1
65363: RET
// export function PrepareBird ( ) ; begin
65364: LD_INT 0
65366: PPUSH
// uc_side := 0 ;
65367: LD_ADDR_OWVAR 20
65371: PUSH
65372: LD_INT 0
65374: ST_TO_ADDR
// uc_nation := 0 ;
65375: LD_ADDR_OWVAR 21
65379: PUSH
65380: LD_INT 0
65382: ST_TO_ADDR
// hc_class := class_phororhacos ;
65383: LD_ADDR_OWVAR 28
65387: PUSH
65388: LD_INT 18
65390: ST_TO_ADDR
// hc_gallery :=  ;
65391: LD_ADDR_OWVAR 33
65395: PUSH
65396: LD_STRING 
65398: ST_TO_ADDR
// end ;
65399: LD_VAR 0 1
65403: RET
// export function PrepareHorse ( ) ; begin
65404: LD_INT 0
65406: PPUSH
// uc_side := 0 ;
65407: LD_ADDR_OWVAR 20
65411: PUSH
65412: LD_INT 0
65414: ST_TO_ADDR
// uc_nation := 0 ;
65415: LD_ADDR_OWVAR 21
65419: PUSH
65420: LD_INT 0
65422: ST_TO_ADDR
// hc_class := class_horse ;
65423: LD_ADDR_OWVAR 28
65427: PUSH
65428: LD_INT 21
65430: ST_TO_ADDR
// hc_gallery :=  ;
65431: LD_ADDR_OWVAR 33
65435: PUSH
65436: LD_STRING 
65438: ST_TO_ADDR
// end ;
65439: LD_VAR 0 1
65443: RET
// export function PrepareMastodont ( ) ; begin
65444: LD_INT 0
65446: PPUSH
// uc_side := 0 ;
65447: LD_ADDR_OWVAR 20
65451: PUSH
65452: LD_INT 0
65454: ST_TO_ADDR
// uc_nation := 0 ;
65455: LD_ADDR_OWVAR 21
65459: PUSH
65460: LD_INT 0
65462: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65463: LD_ADDR_OWVAR 37
65467: PUSH
65468: LD_INT 31
65470: ST_TO_ADDR
// vc_control := control_rider ;
65471: LD_ADDR_OWVAR 38
65475: PUSH
65476: LD_INT 4
65478: ST_TO_ADDR
// end ;
65479: LD_VAR 0 1
65483: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65484: LD_INT 0
65486: PPUSH
65487: PPUSH
65488: PPUSH
// uc_side = 0 ;
65489: LD_ADDR_OWVAR 20
65493: PUSH
65494: LD_INT 0
65496: ST_TO_ADDR
// uc_nation = 0 ;
65497: LD_ADDR_OWVAR 21
65501: PUSH
65502: LD_INT 0
65504: ST_TO_ADDR
// InitHc_All ( ) ;
65505: CALL_OW 584
// InitVc ;
65509: CALL_OW 20
// if mastodonts then
65513: LD_VAR 0 6
65517: IFFALSE 65584
// for i = 1 to mastodonts do
65519: LD_ADDR_VAR 0 11
65523: PUSH
65524: DOUBLE
65525: LD_INT 1
65527: DEC
65528: ST_TO_ADDR
65529: LD_VAR 0 6
65533: PUSH
65534: FOR_TO
65535: IFFALSE 65582
// begin vc_chassis := 31 ;
65537: LD_ADDR_OWVAR 37
65541: PUSH
65542: LD_INT 31
65544: ST_TO_ADDR
// vc_control := control_rider ;
65545: LD_ADDR_OWVAR 38
65549: PUSH
65550: LD_INT 4
65552: ST_TO_ADDR
// animal := CreateVehicle ;
65553: LD_ADDR_VAR 0 12
65557: PUSH
65558: CALL_OW 45
65562: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65563: LD_VAR 0 12
65567: PPUSH
65568: LD_VAR 0 8
65572: PPUSH
65573: LD_INT 0
65575: PPUSH
65576: CALL 67712 0 3
// end ;
65580: GO 65534
65582: POP
65583: POP
// if horses then
65584: LD_VAR 0 5
65588: IFFALSE 65655
// for i = 1 to horses do
65590: LD_ADDR_VAR 0 11
65594: PUSH
65595: DOUBLE
65596: LD_INT 1
65598: DEC
65599: ST_TO_ADDR
65600: LD_VAR 0 5
65604: PUSH
65605: FOR_TO
65606: IFFALSE 65653
// begin hc_class := 21 ;
65608: LD_ADDR_OWVAR 28
65612: PUSH
65613: LD_INT 21
65615: ST_TO_ADDR
// hc_gallery :=  ;
65616: LD_ADDR_OWVAR 33
65620: PUSH
65621: LD_STRING 
65623: ST_TO_ADDR
// animal := CreateHuman ;
65624: LD_ADDR_VAR 0 12
65628: PUSH
65629: CALL_OW 44
65633: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65634: LD_VAR 0 12
65638: PPUSH
65639: LD_VAR 0 8
65643: PPUSH
65644: LD_INT 0
65646: PPUSH
65647: CALL 67712 0 3
// end ;
65651: GO 65605
65653: POP
65654: POP
// if birds then
65655: LD_VAR 0 1
65659: IFFALSE 65726
// for i = 1 to birds do
65661: LD_ADDR_VAR 0 11
65665: PUSH
65666: DOUBLE
65667: LD_INT 1
65669: DEC
65670: ST_TO_ADDR
65671: LD_VAR 0 1
65675: PUSH
65676: FOR_TO
65677: IFFALSE 65724
// begin hc_class = 18 ;
65679: LD_ADDR_OWVAR 28
65683: PUSH
65684: LD_INT 18
65686: ST_TO_ADDR
// hc_gallery =  ;
65687: LD_ADDR_OWVAR 33
65691: PUSH
65692: LD_STRING 
65694: ST_TO_ADDR
// animal := CreateHuman ;
65695: LD_ADDR_VAR 0 12
65699: PUSH
65700: CALL_OW 44
65704: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65705: LD_VAR 0 12
65709: PPUSH
65710: LD_VAR 0 8
65714: PPUSH
65715: LD_INT 0
65717: PPUSH
65718: CALL 67712 0 3
// end ;
65722: GO 65676
65724: POP
65725: POP
// if tigers then
65726: LD_VAR 0 2
65730: IFFALSE 65814
// for i = 1 to tigers do
65732: LD_ADDR_VAR 0 11
65736: PUSH
65737: DOUBLE
65738: LD_INT 1
65740: DEC
65741: ST_TO_ADDR
65742: LD_VAR 0 2
65746: PUSH
65747: FOR_TO
65748: IFFALSE 65812
// begin hc_class = class_tiger ;
65750: LD_ADDR_OWVAR 28
65754: PUSH
65755: LD_INT 14
65757: ST_TO_ADDR
// hc_gallery =  ;
65758: LD_ADDR_OWVAR 33
65762: PUSH
65763: LD_STRING 
65765: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65766: LD_ADDR_OWVAR 35
65770: PUSH
65771: LD_INT 7
65773: NEG
65774: PPUSH
65775: LD_INT 7
65777: PPUSH
65778: CALL_OW 12
65782: ST_TO_ADDR
// animal := CreateHuman ;
65783: LD_ADDR_VAR 0 12
65787: PUSH
65788: CALL_OW 44
65792: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65793: LD_VAR 0 12
65797: PPUSH
65798: LD_VAR 0 8
65802: PPUSH
65803: LD_INT 0
65805: PPUSH
65806: CALL 67712 0 3
// end ;
65810: GO 65747
65812: POP
65813: POP
// if apemans then
65814: LD_VAR 0 3
65818: IFFALSE 65941
// for i = 1 to apemans do
65820: LD_ADDR_VAR 0 11
65824: PUSH
65825: DOUBLE
65826: LD_INT 1
65828: DEC
65829: ST_TO_ADDR
65830: LD_VAR 0 3
65834: PUSH
65835: FOR_TO
65836: IFFALSE 65939
// begin hc_class = class_apeman ;
65838: LD_ADDR_OWVAR 28
65842: PUSH
65843: LD_INT 12
65845: ST_TO_ADDR
// hc_gallery =  ;
65846: LD_ADDR_OWVAR 33
65850: PUSH
65851: LD_STRING 
65853: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65854: LD_ADDR_OWVAR 35
65858: PUSH
65859: LD_INT 2
65861: NEG
65862: PPUSH
65863: LD_INT 2
65865: PPUSH
65866: CALL_OW 12
65870: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65871: LD_ADDR_OWVAR 31
65875: PUSH
65876: LD_INT 1
65878: PPUSH
65879: LD_INT 3
65881: PPUSH
65882: CALL_OW 12
65886: PUSH
65887: LD_INT 1
65889: PPUSH
65890: LD_INT 3
65892: PPUSH
65893: CALL_OW 12
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: LD_INT 0
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: ST_TO_ADDR
// animal := CreateHuman ;
65910: LD_ADDR_VAR 0 12
65914: PUSH
65915: CALL_OW 44
65919: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65920: LD_VAR 0 12
65924: PPUSH
65925: LD_VAR 0 8
65929: PPUSH
65930: LD_INT 0
65932: PPUSH
65933: CALL 67712 0 3
// end ;
65937: GO 65835
65939: POP
65940: POP
// if enchidnas then
65941: LD_VAR 0 4
65945: IFFALSE 66012
// for i = 1 to enchidnas do
65947: LD_ADDR_VAR 0 11
65951: PUSH
65952: DOUBLE
65953: LD_INT 1
65955: DEC
65956: ST_TO_ADDR
65957: LD_VAR 0 4
65961: PUSH
65962: FOR_TO
65963: IFFALSE 66010
// begin hc_class = 13 ;
65965: LD_ADDR_OWVAR 28
65969: PUSH
65970: LD_INT 13
65972: ST_TO_ADDR
// hc_gallery =  ;
65973: LD_ADDR_OWVAR 33
65977: PUSH
65978: LD_STRING 
65980: ST_TO_ADDR
// animal := CreateHuman ;
65981: LD_ADDR_VAR 0 12
65985: PUSH
65986: CALL_OW 44
65990: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65991: LD_VAR 0 12
65995: PPUSH
65996: LD_VAR 0 8
66000: PPUSH
66001: LD_INT 0
66003: PPUSH
66004: CALL 67712 0 3
// end ;
66008: GO 65962
66010: POP
66011: POP
// if fishes then
66012: LD_VAR 0 7
66016: IFFALSE 66083
// for i = 1 to fishes do
66018: LD_ADDR_VAR 0 11
66022: PUSH
66023: DOUBLE
66024: LD_INT 1
66026: DEC
66027: ST_TO_ADDR
66028: LD_VAR 0 7
66032: PUSH
66033: FOR_TO
66034: IFFALSE 66081
// begin hc_class = 20 ;
66036: LD_ADDR_OWVAR 28
66040: PUSH
66041: LD_INT 20
66043: ST_TO_ADDR
// hc_gallery =  ;
66044: LD_ADDR_OWVAR 33
66048: PUSH
66049: LD_STRING 
66051: ST_TO_ADDR
// animal := CreateHuman ;
66052: LD_ADDR_VAR 0 12
66056: PUSH
66057: CALL_OW 44
66061: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66062: LD_VAR 0 12
66066: PPUSH
66067: LD_VAR 0 9
66071: PPUSH
66072: LD_INT 0
66074: PPUSH
66075: CALL 67712 0 3
// end ;
66079: GO 66033
66081: POP
66082: POP
// end ;
66083: LD_VAR 0 10
66087: RET
// export function WantHeal ( sci , unit ) ; begin
66088: LD_INT 0
66090: PPUSH
// if GetTaskList ( sci ) > 0 then
66091: LD_VAR 0 1
66095: PPUSH
66096: CALL_OW 437
66100: PUSH
66101: LD_INT 0
66103: GREATER
66104: IFFALSE 66174
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66106: LD_VAR 0 1
66110: PPUSH
66111: CALL_OW 437
66115: PUSH
66116: LD_INT 1
66118: ARRAY
66119: PUSH
66120: LD_INT 1
66122: ARRAY
66123: PUSH
66124: LD_STRING l
66126: EQUAL
66127: PUSH
66128: LD_VAR 0 1
66132: PPUSH
66133: CALL_OW 437
66137: PUSH
66138: LD_INT 1
66140: ARRAY
66141: PUSH
66142: LD_INT 4
66144: ARRAY
66145: PUSH
66146: LD_VAR 0 2
66150: EQUAL
66151: AND
66152: IFFALSE 66164
// result := true else
66154: LD_ADDR_VAR 0 3
66158: PUSH
66159: LD_INT 1
66161: ST_TO_ADDR
66162: GO 66172
// result := false ;
66164: LD_ADDR_VAR 0 3
66168: PUSH
66169: LD_INT 0
66171: ST_TO_ADDR
// end else
66172: GO 66182
// result := false ;
66174: LD_ADDR_VAR 0 3
66178: PUSH
66179: LD_INT 0
66181: ST_TO_ADDR
// end ;
66182: LD_VAR 0 3
66186: RET
// export function HealTarget ( sci ) ; begin
66187: LD_INT 0
66189: PPUSH
// if not sci then
66190: LD_VAR 0 1
66194: NOT
66195: IFFALSE 66199
// exit ;
66197: GO 66264
// result := 0 ;
66199: LD_ADDR_VAR 0 2
66203: PUSH
66204: LD_INT 0
66206: ST_TO_ADDR
// if GetTaskList ( sci ) then
66207: LD_VAR 0 1
66211: PPUSH
66212: CALL_OW 437
66216: IFFALSE 66264
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66218: LD_VAR 0 1
66222: PPUSH
66223: CALL_OW 437
66227: PUSH
66228: LD_INT 1
66230: ARRAY
66231: PUSH
66232: LD_INT 1
66234: ARRAY
66235: PUSH
66236: LD_STRING l
66238: EQUAL
66239: IFFALSE 66264
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66241: LD_ADDR_VAR 0 2
66245: PUSH
66246: LD_VAR 0 1
66250: PPUSH
66251: CALL_OW 437
66255: PUSH
66256: LD_INT 1
66258: ARRAY
66259: PUSH
66260: LD_INT 4
66262: ARRAY
66263: ST_TO_ADDR
// end ;
66264: LD_VAR 0 2
66268: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66269: LD_INT 0
66271: PPUSH
66272: PPUSH
66273: PPUSH
66274: PPUSH
// if not base_units then
66275: LD_VAR 0 1
66279: NOT
66280: IFFALSE 66284
// exit ;
66282: GO 66371
// result := false ;
66284: LD_ADDR_VAR 0 2
66288: PUSH
66289: LD_INT 0
66291: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66292: LD_ADDR_VAR 0 5
66296: PUSH
66297: LD_VAR 0 1
66301: PPUSH
66302: LD_INT 21
66304: PUSH
66305: LD_INT 3
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PPUSH
66312: CALL_OW 72
66316: ST_TO_ADDR
// if not tmp then
66317: LD_VAR 0 5
66321: NOT
66322: IFFALSE 66326
// exit ;
66324: GO 66371
// for i in tmp do
66326: LD_ADDR_VAR 0 3
66330: PUSH
66331: LD_VAR 0 5
66335: PUSH
66336: FOR_IN
66337: IFFALSE 66369
// begin result := EnemyInRange ( i , 22 ) ;
66339: LD_ADDR_VAR 0 2
66343: PUSH
66344: LD_VAR 0 3
66348: PPUSH
66349: LD_INT 22
66351: PPUSH
66352: CALL 63958 0 2
66356: ST_TO_ADDR
// if result then
66357: LD_VAR 0 2
66361: IFFALSE 66367
// exit ;
66363: POP
66364: POP
66365: GO 66371
// end ;
66367: GO 66336
66369: POP
66370: POP
// end ;
66371: LD_VAR 0 2
66375: RET
// export function FilterByTag ( units , tag ) ; begin
66376: LD_INT 0
66378: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66379: LD_ADDR_VAR 0 3
66383: PUSH
66384: LD_VAR 0 1
66388: PPUSH
66389: LD_INT 120
66391: PUSH
66392: LD_VAR 0 2
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PPUSH
66401: CALL_OW 72
66405: ST_TO_ADDR
// end ;
66406: LD_VAR 0 3
66410: RET
// export function IsDriver ( un ) ; begin
66411: LD_INT 0
66413: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66414: LD_ADDR_VAR 0 2
66418: PUSH
66419: LD_VAR 0 1
66423: PUSH
66424: LD_INT 55
66426: PUSH
66427: EMPTY
66428: LIST
66429: PPUSH
66430: CALL_OW 69
66434: IN
66435: ST_TO_ADDR
// end ;
66436: LD_VAR 0 2
66440: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66441: LD_INT 0
66443: PPUSH
66444: PPUSH
// list := [ ] ;
66445: LD_ADDR_VAR 0 5
66449: PUSH
66450: EMPTY
66451: ST_TO_ADDR
// case d of 0 :
66452: LD_VAR 0 3
66456: PUSH
66457: LD_INT 0
66459: DOUBLE
66460: EQUAL
66461: IFTRUE 66465
66463: GO 66598
66465: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66466: LD_ADDR_VAR 0 5
66470: PUSH
66471: LD_VAR 0 1
66475: PUSH
66476: LD_INT 4
66478: MINUS
66479: PUSH
66480: LD_VAR 0 2
66484: PUSH
66485: LD_INT 4
66487: MINUS
66488: PUSH
66489: LD_INT 2
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: LIST
66496: PUSH
66497: LD_VAR 0 1
66501: PUSH
66502: LD_INT 3
66504: MINUS
66505: PUSH
66506: LD_VAR 0 2
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: LIST
66518: PUSH
66519: LD_VAR 0 1
66523: PUSH
66524: LD_INT 4
66526: PLUS
66527: PUSH
66528: LD_VAR 0 2
66532: PUSH
66533: LD_INT 4
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: LIST
66540: PUSH
66541: LD_VAR 0 1
66545: PUSH
66546: LD_INT 3
66548: PLUS
66549: PUSH
66550: LD_VAR 0 2
66554: PUSH
66555: LD_INT 3
66557: PLUS
66558: PUSH
66559: LD_INT 5
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: LIST
66566: PUSH
66567: LD_VAR 0 1
66571: PUSH
66572: LD_VAR 0 2
66576: PUSH
66577: LD_INT 4
66579: PLUS
66580: PUSH
66581: LD_INT 0
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: LIST
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: ST_TO_ADDR
// end ; 1 :
66596: GO 67296
66598: LD_INT 1
66600: DOUBLE
66601: EQUAL
66602: IFTRUE 66606
66604: GO 66739
66606: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66607: LD_ADDR_VAR 0 5
66611: PUSH
66612: LD_VAR 0 1
66616: PUSH
66617: LD_VAR 0 2
66621: PUSH
66622: LD_INT 4
66624: MINUS
66625: PUSH
66626: LD_INT 3
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: LIST
66633: PUSH
66634: LD_VAR 0 1
66638: PUSH
66639: LD_INT 3
66641: MINUS
66642: PUSH
66643: LD_VAR 0 2
66647: PUSH
66648: LD_INT 3
66650: MINUS
66651: PUSH
66652: LD_INT 2
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: LIST
66659: PUSH
66660: LD_VAR 0 1
66664: PUSH
66665: LD_INT 4
66667: MINUS
66668: PUSH
66669: LD_VAR 0 2
66673: PUSH
66674: LD_INT 1
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: LIST
66681: PUSH
66682: LD_VAR 0 1
66686: PUSH
66687: LD_VAR 0 2
66691: PUSH
66692: LD_INT 3
66694: PLUS
66695: PUSH
66696: LD_INT 0
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: LIST
66703: PUSH
66704: LD_VAR 0 1
66708: PUSH
66709: LD_INT 4
66711: PLUS
66712: PUSH
66713: LD_VAR 0 2
66717: PUSH
66718: LD_INT 4
66720: PLUS
66721: PUSH
66722: LD_INT 5
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: LIST
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: ST_TO_ADDR
// end ; 2 :
66737: GO 67296
66739: LD_INT 2
66741: DOUBLE
66742: EQUAL
66743: IFTRUE 66747
66745: GO 66876
66747: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66748: LD_ADDR_VAR 0 5
66752: PUSH
66753: LD_VAR 0 1
66757: PUSH
66758: LD_VAR 0 2
66762: PUSH
66763: LD_INT 3
66765: MINUS
66766: PUSH
66767: LD_INT 3
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: LIST
66774: PUSH
66775: LD_VAR 0 1
66779: PUSH
66780: LD_INT 4
66782: PLUS
66783: PUSH
66784: LD_VAR 0 2
66788: PUSH
66789: LD_INT 4
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: LIST
66796: PUSH
66797: LD_VAR 0 1
66801: PUSH
66802: LD_VAR 0 2
66806: PUSH
66807: LD_INT 4
66809: PLUS
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: LIST
66818: PUSH
66819: LD_VAR 0 1
66823: PUSH
66824: LD_INT 3
66826: MINUS
66827: PUSH
66828: LD_VAR 0 2
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: LIST
66840: PUSH
66841: LD_VAR 0 1
66845: PUSH
66846: LD_INT 4
66848: MINUS
66849: PUSH
66850: LD_VAR 0 2
66854: PUSH
66855: LD_INT 4
66857: MINUS
66858: PUSH
66859: LD_INT 2
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: LIST
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: ST_TO_ADDR
// end ; 3 :
66874: GO 67296
66876: LD_INT 3
66878: DOUBLE
66879: EQUAL
66880: IFTRUE 66884
66882: GO 67017
66884: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66885: LD_ADDR_VAR 0 5
66889: PUSH
66890: LD_VAR 0 1
66894: PUSH
66895: LD_INT 3
66897: PLUS
66898: PUSH
66899: LD_VAR 0 2
66903: PUSH
66904: LD_INT 4
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: LIST
66911: PUSH
66912: LD_VAR 0 1
66916: PUSH
66917: LD_INT 4
66919: PLUS
66920: PUSH
66921: LD_VAR 0 2
66925: PUSH
66926: LD_INT 4
66928: PLUS
66929: PUSH
66930: LD_INT 5
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: LIST
66937: PUSH
66938: LD_VAR 0 1
66942: PUSH
66943: LD_INT 4
66945: MINUS
66946: PUSH
66947: LD_VAR 0 2
66951: PUSH
66952: LD_INT 1
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: LIST
66959: PUSH
66960: LD_VAR 0 1
66964: PUSH
66965: LD_VAR 0 2
66969: PUSH
66970: LD_INT 4
66972: MINUS
66973: PUSH
66974: LD_INT 3
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: LIST
66981: PUSH
66982: LD_VAR 0 1
66986: PUSH
66987: LD_INT 3
66989: MINUS
66990: PUSH
66991: LD_VAR 0 2
66995: PUSH
66996: LD_INT 3
66998: MINUS
66999: PUSH
67000: LD_INT 2
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: LIST
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: ST_TO_ADDR
// end ; 4 :
67015: GO 67296
67017: LD_INT 4
67019: DOUBLE
67020: EQUAL
67021: IFTRUE 67025
67023: GO 67158
67025: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67026: LD_ADDR_VAR 0 5
67030: PUSH
67031: LD_VAR 0 1
67035: PUSH
67036: LD_VAR 0 2
67040: PUSH
67041: LD_INT 4
67043: PLUS
67044: PUSH
67045: LD_INT 0
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: LIST
67052: PUSH
67053: LD_VAR 0 1
67057: PUSH
67058: LD_INT 3
67060: PLUS
67061: PUSH
67062: LD_VAR 0 2
67066: PUSH
67067: LD_INT 3
67069: PLUS
67070: PUSH
67071: LD_INT 5
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: LIST
67078: PUSH
67079: LD_VAR 0 1
67083: PUSH
67084: LD_INT 4
67086: PLUS
67087: PUSH
67088: LD_VAR 0 2
67092: PUSH
67093: LD_INT 4
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: LIST
67100: PUSH
67101: LD_VAR 0 1
67105: PUSH
67106: LD_VAR 0 2
67110: PUSH
67111: LD_INT 3
67113: MINUS
67114: PUSH
67115: LD_INT 3
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: LIST
67122: PUSH
67123: LD_VAR 0 1
67127: PUSH
67128: LD_INT 4
67130: MINUS
67131: PUSH
67132: LD_VAR 0 2
67136: PUSH
67137: LD_INT 4
67139: MINUS
67140: PUSH
67141: LD_INT 2
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: ST_TO_ADDR
// end ; 5 :
67156: GO 67296
67158: LD_INT 5
67160: DOUBLE
67161: EQUAL
67162: IFTRUE 67166
67164: GO 67295
67166: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67167: LD_ADDR_VAR 0 5
67171: PUSH
67172: LD_VAR 0 1
67176: PUSH
67177: LD_INT 4
67179: MINUS
67180: PUSH
67181: LD_VAR 0 2
67185: PUSH
67186: LD_INT 1
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: LIST
67193: PUSH
67194: LD_VAR 0 1
67198: PUSH
67199: LD_VAR 0 2
67203: PUSH
67204: LD_INT 4
67206: MINUS
67207: PUSH
67208: LD_INT 3
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: LIST
67215: PUSH
67216: LD_VAR 0 1
67220: PUSH
67221: LD_INT 4
67223: PLUS
67224: PUSH
67225: LD_VAR 0 2
67229: PUSH
67230: LD_INT 4
67232: PLUS
67233: PUSH
67234: LD_INT 5
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: LIST
67241: PUSH
67242: LD_VAR 0 1
67246: PUSH
67247: LD_INT 3
67249: PLUS
67250: PUSH
67251: LD_VAR 0 2
67255: PUSH
67256: LD_INT 4
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: LIST
67263: PUSH
67264: LD_VAR 0 1
67268: PUSH
67269: LD_VAR 0 2
67273: PUSH
67274: LD_INT 3
67276: PLUS
67277: PUSH
67278: LD_INT 0
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: LIST
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: ST_TO_ADDR
// end ; end ;
67293: GO 67296
67295: POP
// result := list ;
67296: LD_ADDR_VAR 0 4
67300: PUSH
67301: LD_VAR 0 5
67305: ST_TO_ADDR
// end ;
67306: LD_VAR 0 4
67310: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67311: LD_INT 0
67313: PPUSH
67314: PPUSH
67315: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67316: LD_VAR 0 1
67320: NOT
67321: PUSH
67322: LD_VAR 0 2
67326: PUSH
67327: LD_INT 1
67329: PUSH
67330: LD_INT 2
67332: PUSH
67333: LD_INT 3
67335: PUSH
67336: LD_INT 4
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: IN
67345: NOT
67346: OR
67347: IFFALSE 67351
// exit ;
67349: GO 67434
// tmp := [ ] ;
67351: LD_ADDR_VAR 0 5
67355: PUSH
67356: EMPTY
67357: ST_TO_ADDR
// for i in units do
67358: LD_ADDR_VAR 0 4
67362: PUSH
67363: LD_VAR 0 1
67367: PUSH
67368: FOR_IN
67369: IFFALSE 67403
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67371: LD_ADDR_VAR 0 5
67375: PUSH
67376: LD_VAR 0 5
67380: PPUSH
67381: LD_VAR 0 4
67385: PPUSH
67386: LD_VAR 0 2
67390: PPUSH
67391: CALL_OW 259
67395: PPUSH
67396: CALL 68794 0 2
67400: ST_TO_ADDR
67401: GO 67368
67403: POP
67404: POP
// if not tmp then
67405: LD_VAR 0 5
67409: NOT
67410: IFFALSE 67414
// exit ;
67412: GO 67434
// result := SortListByListDesc ( units , tmp ) ;
67414: LD_ADDR_VAR 0 3
67418: PUSH
67419: LD_VAR 0 1
67423: PPUSH
67424: LD_VAR 0 5
67428: PPUSH
67429: CALL_OW 77
67433: ST_TO_ADDR
// end ;
67434: LD_VAR 0 3
67438: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67439: LD_INT 0
67441: PPUSH
67442: PPUSH
67443: PPUSH
// result := false ;
67444: LD_ADDR_VAR 0 3
67448: PUSH
67449: LD_INT 0
67451: ST_TO_ADDR
// if not building then
67452: LD_VAR 0 2
67456: NOT
67457: IFFALSE 67461
// exit ;
67459: GO 67599
// x := GetX ( building ) ;
67461: LD_ADDR_VAR 0 4
67465: PUSH
67466: LD_VAR 0 2
67470: PPUSH
67471: CALL_OW 250
67475: ST_TO_ADDR
// y := GetY ( building ) ;
67476: LD_ADDR_VAR 0 5
67480: PUSH
67481: LD_VAR 0 2
67485: PPUSH
67486: CALL_OW 251
67490: ST_TO_ADDR
// if not x or not y then
67491: LD_VAR 0 4
67495: NOT
67496: PUSH
67497: LD_VAR 0 5
67501: NOT
67502: OR
67503: IFFALSE 67507
// exit ;
67505: GO 67599
// if GetTaskList ( unit ) then
67507: LD_VAR 0 1
67511: PPUSH
67512: CALL_OW 437
67516: IFFALSE 67599
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67518: LD_STRING e
67520: PUSH
67521: LD_VAR 0 1
67525: PPUSH
67526: CALL_OW 437
67530: PUSH
67531: LD_INT 1
67533: ARRAY
67534: PUSH
67535: LD_INT 1
67537: ARRAY
67538: EQUAL
67539: PUSH
67540: LD_VAR 0 4
67544: PUSH
67545: LD_VAR 0 1
67549: PPUSH
67550: CALL_OW 437
67554: PUSH
67555: LD_INT 1
67557: ARRAY
67558: PUSH
67559: LD_INT 2
67561: ARRAY
67562: EQUAL
67563: AND
67564: PUSH
67565: LD_VAR 0 5
67569: PUSH
67570: LD_VAR 0 1
67574: PPUSH
67575: CALL_OW 437
67579: PUSH
67580: LD_INT 1
67582: ARRAY
67583: PUSH
67584: LD_INT 3
67586: ARRAY
67587: EQUAL
67588: AND
67589: IFFALSE 67599
// result := true end ;
67591: LD_ADDR_VAR 0 3
67595: PUSH
67596: LD_INT 1
67598: ST_TO_ADDR
// end ;
67599: LD_VAR 0 3
67603: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67604: LD_INT 0
67606: PPUSH
// result := false ;
67607: LD_ADDR_VAR 0 4
67611: PUSH
67612: LD_INT 0
67614: ST_TO_ADDR
// if GetTaskList ( unit ) then
67615: LD_VAR 0 1
67619: PPUSH
67620: CALL_OW 437
67624: IFFALSE 67707
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67626: LD_STRING M
67628: PUSH
67629: LD_VAR 0 1
67633: PPUSH
67634: CALL_OW 437
67638: PUSH
67639: LD_INT 1
67641: ARRAY
67642: PUSH
67643: LD_INT 1
67645: ARRAY
67646: EQUAL
67647: PUSH
67648: LD_VAR 0 2
67652: PUSH
67653: LD_VAR 0 1
67657: PPUSH
67658: CALL_OW 437
67662: PUSH
67663: LD_INT 1
67665: ARRAY
67666: PUSH
67667: LD_INT 2
67669: ARRAY
67670: EQUAL
67671: AND
67672: PUSH
67673: LD_VAR 0 3
67677: PUSH
67678: LD_VAR 0 1
67682: PPUSH
67683: CALL_OW 437
67687: PUSH
67688: LD_INT 1
67690: ARRAY
67691: PUSH
67692: LD_INT 3
67694: ARRAY
67695: EQUAL
67696: AND
67697: IFFALSE 67707
// result := true ;
67699: LD_ADDR_VAR 0 4
67703: PUSH
67704: LD_INT 1
67706: ST_TO_ADDR
// end ; end ;
67707: LD_VAR 0 4
67711: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67712: LD_INT 0
67714: PPUSH
67715: PPUSH
67716: PPUSH
67717: PPUSH
// if not unit or not area then
67718: LD_VAR 0 1
67722: NOT
67723: PUSH
67724: LD_VAR 0 2
67728: NOT
67729: OR
67730: IFFALSE 67734
// exit ;
67732: GO 67897
// tmp := AreaToList ( area , i ) ;
67734: LD_ADDR_VAR 0 6
67738: PUSH
67739: LD_VAR 0 2
67743: PPUSH
67744: LD_VAR 0 5
67748: PPUSH
67749: CALL_OW 517
67753: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67754: LD_ADDR_VAR 0 5
67758: PUSH
67759: DOUBLE
67760: LD_INT 1
67762: DEC
67763: ST_TO_ADDR
67764: LD_VAR 0 6
67768: PUSH
67769: LD_INT 1
67771: ARRAY
67772: PUSH
67773: FOR_TO
67774: IFFALSE 67895
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67776: LD_ADDR_VAR 0 7
67780: PUSH
67781: LD_VAR 0 6
67785: PUSH
67786: LD_INT 1
67788: ARRAY
67789: PUSH
67790: LD_VAR 0 5
67794: ARRAY
67795: PUSH
67796: LD_VAR 0 6
67800: PUSH
67801: LD_INT 2
67803: ARRAY
67804: PUSH
67805: LD_VAR 0 5
67809: ARRAY
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
67815: LD_INT 92
67817: PUSH
67818: LD_VAR 0 7
67822: PUSH
67823: LD_INT 1
67825: ARRAY
67826: PUSH
67827: LD_VAR 0 7
67831: PUSH
67832: LD_INT 2
67834: ARRAY
67835: PUSH
67836: LD_INT 3
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: PPUSH
67845: CALL_OW 69
67849: PUSH
67850: LD_INT 0
67852: EQUAL
67853: IFFALSE 67893
// begin PlaceUnitArea ( unit , area , mode ) ;
67855: LD_VAR 0 1
67859: PPUSH
67860: LD_VAR 0 2
67864: PPUSH
67865: LD_VAR 0 3
67869: PPUSH
67870: CALL_OW 49
// result := IsPlaced ( unit ) ;
67874: LD_ADDR_VAR 0 4
67878: PUSH
67879: LD_VAR 0 1
67883: PPUSH
67884: CALL_OW 305
67888: ST_TO_ADDR
// exit ;
67889: POP
67890: POP
67891: GO 67897
// end ; end ;
67893: GO 67773
67895: POP
67896: POP
// end ;
67897: LD_VAR 0 4
67901: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67902: LD_INT 0
67904: PPUSH
67905: PPUSH
67906: PPUSH
// if not side or side > 8 then
67907: LD_VAR 0 1
67911: NOT
67912: PUSH
67913: LD_VAR 0 1
67917: PUSH
67918: LD_INT 8
67920: GREATER
67921: OR
67922: IFFALSE 67926
// exit ;
67924: GO 68113
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67926: LD_ADDR_VAR 0 4
67930: PUSH
67931: LD_INT 22
67933: PUSH
67934: LD_VAR 0 1
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 21
67945: PUSH
67946: LD_INT 3
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PPUSH
67957: CALL_OW 69
67961: ST_TO_ADDR
// if not tmp then
67962: LD_VAR 0 4
67966: NOT
67967: IFFALSE 67971
// exit ;
67969: GO 68113
// enable_addtolog := true ;
67971: LD_ADDR_OWVAR 81
67975: PUSH
67976: LD_INT 1
67978: ST_TO_ADDR
// AddToLog ( [ ) ;
67979: LD_STRING [
67981: PPUSH
67982: CALL_OW 561
// for i in tmp do
67986: LD_ADDR_VAR 0 3
67990: PUSH
67991: LD_VAR 0 4
67995: PUSH
67996: FOR_IN
67997: IFFALSE 68104
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67999: LD_STRING [
68001: PUSH
68002: LD_VAR 0 3
68006: PPUSH
68007: CALL_OW 266
68011: STR
68012: PUSH
68013: LD_STRING , 
68015: STR
68016: PUSH
68017: LD_VAR 0 3
68021: PPUSH
68022: CALL_OW 250
68026: STR
68027: PUSH
68028: LD_STRING , 
68030: STR
68031: PUSH
68032: LD_VAR 0 3
68036: PPUSH
68037: CALL_OW 251
68041: STR
68042: PUSH
68043: LD_STRING , 
68045: STR
68046: PUSH
68047: LD_VAR 0 3
68051: PPUSH
68052: CALL_OW 254
68056: STR
68057: PUSH
68058: LD_STRING , 
68060: STR
68061: PUSH
68062: LD_VAR 0 3
68066: PPUSH
68067: LD_INT 1
68069: PPUSH
68070: CALL_OW 268
68074: STR
68075: PUSH
68076: LD_STRING , 
68078: STR
68079: PUSH
68080: LD_VAR 0 3
68084: PPUSH
68085: LD_INT 2
68087: PPUSH
68088: CALL_OW 268
68092: STR
68093: PUSH
68094: LD_STRING ],
68096: STR
68097: PPUSH
68098: CALL_OW 561
// end ;
68102: GO 67996
68104: POP
68105: POP
// AddToLog ( ]; ) ;
68106: LD_STRING ];
68108: PPUSH
68109: CALL_OW 561
// end ;
68113: LD_VAR 0 2
68117: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68118: LD_INT 0
68120: PPUSH
68121: PPUSH
68122: PPUSH
68123: PPUSH
68124: PPUSH
// if not area or not rate or not max then
68125: LD_VAR 0 1
68129: NOT
68130: PUSH
68131: LD_VAR 0 2
68135: NOT
68136: OR
68137: PUSH
68138: LD_VAR 0 4
68142: NOT
68143: OR
68144: IFFALSE 68148
// exit ;
68146: GO 68337
// while 1 do
68148: LD_INT 1
68150: IFFALSE 68337
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68152: LD_ADDR_VAR 0 9
68156: PUSH
68157: LD_VAR 0 1
68161: PPUSH
68162: LD_INT 1
68164: PPUSH
68165: CALL_OW 287
68169: PUSH
68170: LD_INT 10
68172: MUL
68173: ST_TO_ADDR
// r := rate / 10 ;
68174: LD_ADDR_VAR 0 7
68178: PUSH
68179: LD_VAR 0 2
68183: PUSH
68184: LD_INT 10
68186: DIVREAL
68187: ST_TO_ADDR
// time := 1 1$00 ;
68188: LD_ADDR_VAR 0 8
68192: PUSH
68193: LD_INT 2100
68195: ST_TO_ADDR
// if amount < min then
68196: LD_VAR 0 9
68200: PUSH
68201: LD_VAR 0 3
68205: LESS
68206: IFFALSE 68224
// r := r * 2 else
68208: LD_ADDR_VAR 0 7
68212: PUSH
68213: LD_VAR 0 7
68217: PUSH
68218: LD_INT 2
68220: MUL
68221: ST_TO_ADDR
68222: GO 68250
// if amount > max then
68224: LD_VAR 0 9
68228: PUSH
68229: LD_VAR 0 4
68233: GREATER
68234: IFFALSE 68250
// r := r / 2 ;
68236: LD_ADDR_VAR 0 7
68240: PUSH
68241: LD_VAR 0 7
68245: PUSH
68246: LD_INT 2
68248: DIVREAL
68249: ST_TO_ADDR
// time := time / r ;
68250: LD_ADDR_VAR 0 8
68254: PUSH
68255: LD_VAR 0 8
68259: PUSH
68260: LD_VAR 0 7
68264: DIVREAL
68265: ST_TO_ADDR
// if time < 0 then
68266: LD_VAR 0 8
68270: PUSH
68271: LD_INT 0
68273: LESS
68274: IFFALSE 68291
// time := time * - 1 ;
68276: LD_ADDR_VAR 0 8
68280: PUSH
68281: LD_VAR 0 8
68285: PUSH
68286: LD_INT 1
68288: NEG
68289: MUL
68290: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68291: LD_VAR 0 8
68295: PUSH
68296: LD_INT 35
68298: PPUSH
68299: LD_INT 875
68301: PPUSH
68302: CALL_OW 12
68306: PLUS
68307: PPUSH
68308: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68312: LD_INT 1
68314: PPUSH
68315: LD_INT 5
68317: PPUSH
68318: CALL_OW 12
68322: PPUSH
68323: LD_VAR 0 1
68327: PPUSH
68328: LD_INT 1
68330: PPUSH
68331: CALL_OW 55
// end ;
68335: GO 68148
// end ;
68337: LD_VAR 0 5
68341: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68342: LD_INT 0
68344: PPUSH
68345: PPUSH
68346: PPUSH
68347: PPUSH
68348: PPUSH
68349: PPUSH
68350: PPUSH
68351: PPUSH
// if not turrets or not factories then
68352: LD_VAR 0 1
68356: NOT
68357: PUSH
68358: LD_VAR 0 2
68362: NOT
68363: OR
68364: IFFALSE 68368
// exit ;
68366: GO 68675
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68368: LD_ADDR_VAR 0 10
68372: PUSH
68373: LD_INT 5
68375: PUSH
68376: LD_INT 6
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 2
68385: PUSH
68386: LD_INT 4
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 3
68395: PUSH
68396: LD_INT 5
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 24
68410: PUSH
68411: LD_INT 25
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 23
68420: PUSH
68421: LD_INT 27
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 42
68434: PUSH
68435: LD_INT 43
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 44
68444: PUSH
68445: LD_INT 46
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 45
68454: PUSH
68455: LD_INT 47
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: LIST
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: LIST
68471: ST_TO_ADDR
// result := [ ] ;
68472: LD_ADDR_VAR 0 3
68476: PUSH
68477: EMPTY
68478: ST_TO_ADDR
// for i in turrets do
68479: LD_ADDR_VAR 0 4
68483: PUSH
68484: LD_VAR 0 1
68488: PUSH
68489: FOR_IN
68490: IFFALSE 68673
// begin nat := GetNation ( i ) ;
68492: LD_ADDR_VAR 0 7
68496: PUSH
68497: LD_VAR 0 4
68501: PPUSH
68502: CALL_OW 248
68506: ST_TO_ADDR
// weapon := 0 ;
68507: LD_ADDR_VAR 0 8
68511: PUSH
68512: LD_INT 0
68514: ST_TO_ADDR
// if not nat then
68515: LD_VAR 0 7
68519: NOT
68520: IFFALSE 68524
// continue ;
68522: GO 68489
// for j in list [ nat ] do
68524: LD_ADDR_VAR 0 5
68528: PUSH
68529: LD_VAR 0 10
68533: PUSH
68534: LD_VAR 0 7
68538: ARRAY
68539: PUSH
68540: FOR_IN
68541: IFFALSE 68582
// if GetBWeapon ( i ) = j [ 1 ] then
68543: LD_VAR 0 4
68547: PPUSH
68548: CALL_OW 269
68552: PUSH
68553: LD_VAR 0 5
68557: PUSH
68558: LD_INT 1
68560: ARRAY
68561: EQUAL
68562: IFFALSE 68580
// begin weapon := j [ 2 ] ;
68564: LD_ADDR_VAR 0 8
68568: PUSH
68569: LD_VAR 0 5
68573: PUSH
68574: LD_INT 2
68576: ARRAY
68577: ST_TO_ADDR
// break ;
68578: GO 68582
// end ;
68580: GO 68540
68582: POP
68583: POP
// if not weapon then
68584: LD_VAR 0 8
68588: NOT
68589: IFFALSE 68593
// continue ;
68591: GO 68489
// for k in factories do
68593: LD_ADDR_VAR 0 6
68597: PUSH
68598: LD_VAR 0 2
68602: PUSH
68603: FOR_IN
68604: IFFALSE 68669
// begin weapons := AvailableWeaponList ( k ) ;
68606: LD_ADDR_VAR 0 9
68610: PUSH
68611: LD_VAR 0 6
68615: PPUSH
68616: CALL_OW 478
68620: ST_TO_ADDR
// if not weapons then
68621: LD_VAR 0 9
68625: NOT
68626: IFFALSE 68630
// continue ;
68628: GO 68603
// if weapon in weapons then
68630: LD_VAR 0 8
68634: PUSH
68635: LD_VAR 0 9
68639: IN
68640: IFFALSE 68667
// begin result := [ i , weapon ] ;
68642: LD_ADDR_VAR 0 3
68646: PUSH
68647: LD_VAR 0 4
68651: PUSH
68652: LD_VAR 0 8
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: ST_TO_ADDR
// exit ;
68661: POP
68662: POP
68663: POP
68664: POP
68665: GO 68675
// end ; end ;
68667: GO 68603
68669: POP
68670: POP
// end ;
68671: GO 68489
68673: POP
68674: POP
// end ;
68675: LD_VAR 0 3
68679: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68680: LD_INT 0
68682: PPUSH
// if not side or side > 8 then
68683: LD_VAR 0 3
68687: NOT
68688: PUSH
68689: LD_VAR 0 3
68693: PUSH
68694: LD_INT 8
68696: GREATER
68697: OR
68698: IFFALSE 68702
// exit ;
68700: GO 68761
// if not range then
68702: LD_VAR 0 4
68706: NOT
68707: IFFALSE 68718
// range := - 12 ;
68709: LD_ADDR_VAR 0 4
68713: PUSH
68714: LD_INT 12
68716: NEG
68717: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68718: LD_VAR 0 1
68722: PPUSH
68723: LD_VAR 0 2
68727: PPUSH
68728: LD_VAR 0 3
68732: PPUSH
68733: LD_VAR 0 4
68737: PPUSH
68738: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68742: LD_VAR 0 1
68746: PPUSH
68747: LD_VAR 0 2
68751: PPUSH
68752: LD_VAR 0 3
68756: PPUSH
68757: CALL_OW 331
// end ;
68761: LD_VAR 0 5
68765: RET
// export function Video ( mode ) ; begin
68766: LD_INT 0
68768: PPUSH
// ingame_video = mode ;
68769: LD_ADDR_OWVAR 52
68773: PUSH
68774: LD_VAR 0 1
68778: ST_TO_ADDR
// interface_hidden = mode ;
68779: LD_ADDR_OWVAR 54
68783: PUSH
68784: LD_VAR 0 1
68788: ST_TO_ADDR
// end ;
68789: LD_VAR 0 2
68793: RET
// export function Join ( array , element ) ; begin
68794: LD_INT 0
68796: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68797: LD_ADDR_VAR 0 3
68801: PUSH
68802: LD_VAR 0 1
68806: PPUSH
68807: LD_VAR 0 1
68811: PUSH
68812: LD_INT 1
68814: PLUS
68815: PPUSH
68816: LD_VAR 0 2
68820: PPUSH
68821: CALL_OW 1
68825: ST_TO_ADDR
// end ;
68826: LD_VAR 0 3
68830: RET
// export function JoinUnion ( array , element ) ; begin
68831: LD_INT 0
68833: PPUSH
// result := array union element ;
68834: LD_ADDR_VAR 0 3
68838: PUSH
68839: LD_VAR 0 1
68843: PUSH
68844: LD_VAR 0 2
68848: UNION
68849: ST_TO_ADDR
// end ;
68850: LD_VAR 0 3
68854: RET
// export function GetBehemoths ( side ) ; begin
68855: LD_INT 0
68857: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68858: LD_ADDR_VAR 0 2
68862: PUSH
68863: LD_INT 22
68865: PUSH
68866: LD_VAR 0 1
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 31
68877: PUSH
68878: LD_INT 25
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PPUSH
68889: CALL_OW 69
68893: ST_TO_ADDR
// end ;
68894: LD_VAR 0 2
68898: RET
// export function Shuffle ( array ) ; var i , index ; begin
68899: LD_INT 0
68901: PPUSH
68902: PPUSH
68903: PPUSH
// result := [ ] ;
68904: LD_ADDR_VAR 0 2
68908: PUSH
68909: EMPTY
68910: ST_TO_ADDR
// if not array then
68911: LD_VAR 0 1
68915: NOT
68916: IFFALSE 68920
// exit ;
68918: GO 69019
// Randomize ;
68920: CALL_OW 10
// for i = array downto 1 do
68924: LD_ADDR_VAR 0 3
68928: PUSH
68929: DOUBLE
68930: LD_VAR 0 1
68934: INC
68935: ST_TO_ADDR
68936: LD_INT 1
68938: PUSH
68939: FOR_DOWNTO
68940: IFFALSE 69017
// begin index := rand ( 1 , array ) ;
68942: LD_ADDR_VAR 0 4
68946: PUSH
68947: LD_INT 1
68949: PPUSH
68950: LD_VAR 0 1
68954: PPUSH
68955: CALL_OW 12
68959: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68960: LD_ADDR_VAR 0 2
68964: PUSH
68965: LD_VAR 0 2
68969: PPUSH
68970: LD_VAR 0 2
68974: PUSH
68975: LD_INT 1
68977: PLUS
68978: PPUSH
68979: LD_VAR 0 1
68983: PUSH
68984: LD_VAR 0 4
68988: ARRAY
68989: PPUSH
68990: CALL_OW 2
68994: ST_TO_ADDR
// array := Delete ( array , index ) ;
68995: LD_ADDR_VAR 0 1
68999: PUSH
69000: LD_VAR 0 1
69004: PPUSH
69005: LD_VAR 0 4
69009: PPUSH
69010: CALL_OW 3
69014: ST_TO_ADDR
// end ;
69015: GO 68939
69017: POP
69018: POP
// end ;
69019: LD_VAR 0 2
69023: RET
// export function GetBaseMaterials ( base ) ; begin
69024: LD_INT 0
69026: PPUSH
// result := [ 0 , 0 , 0 ] ;
69027: LD_ADDR_VAR 0 2
69031: PUSH
69032: LD_INT 0
69034: PUSH
69035: LD_INT 0
69037: PUSH
69038: LD_INT 0
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: LIST
69045: ST_TO_ADDR
// if not base then
69046: LD_VAR 0 1
69050: NOT
69051: IFFALSE 69055
// exit ;
69053: GO 69104
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69055: LD_ADDR_VAR 0 2
69059: PUSH
69060: LD_VAR 0 1
69064: PPUSH
69065: LD_INT 1
69067: PPUSH
69068: CALL_OW 275
69072: PUSH
69073: LD_VAR 0 1
69077: PPUSH
69078: LD_INT 2
69080: PPUSH
69081: CALL_OW 275
69085: PUSH
69086: LD_VAR 0 1
69090: PPUSH
69091: LD_INT 3
69093: PPUSH
69094: CALL_OW 275
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: LIST
69103: ST_TO_ADDR
// end ;
69104: LD_VAR 0 2
69108: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69109: LD_INT 0
69111: PPUSH
69112: PPUSH
// result := array ;
69113: LD_ADDR_VAR 0 3
69117: PUSH
69118: LD_VAR 0 1
69122: ST_TO_ADDR
// if size >= result then
69123: LD_VAR 0 2
69127: PUSH
69128: LD_VAR 0 3
69132: GREATEREQUAL
69133: IFFALSE 69137
// exit ;
69135: GO 69187
// if size then
69137: LD_VAR 0 2
69141: IFFALSE 69187
// for i := array downto size do
69143: LD_ADDR_VAR 0 4
69147: PUSH
69148: DOUBLE
69149: LD_VAR 0 1
69153: INC
69154: ST_TO_ADDR
69155: LD_VAR 0 2
69159: PUSH
69160: FOR_DOWNTO
69161: IFFALSE 69185
// result := Delete ( result , result ) ;
69163: LD_ADDR_VAR 0 3
69167: PUSH
69168: LD_VAR 0 3
69172: PPUSH
69173: LD_VAR 0 3
69177: PPUSH
69178: CALL_OW 3
69182: ST_TO_ADDR
69183: GO 69160
69185: POP
69186: POP
// end ;
69187: LD_VAR 0 3
69191: RET
// export function ComExit ( unit ) ; var tmp ; begin
69192: LD_INT 0
69194: PPUSH
69195: PPUSH
// if not IsInUnit ( unit ) then
69196: LD_VAR 0 1
69200: PPUSH
69201: CALL_OW 310
69205: NOT
69206: IFFALSE 69210
// exit ;
69208: GO 69270
// tmp := IsInUnit ( unit ) ;
69210: LD_ADDR_VAR 0 3
69214: PUSH
69215: LD_VAR 0 1
69219: PPUSH
69220: CALL_OW 310
69224: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69225: LD_VAR 0 3
69229: PPUSH
69230: CALL_OW 247
69234: PUSH
69235: LD_INT 2
69237: EQUAL
69238: IFFALSE 69251
// ComExitVehicle ( unit ) else
69240: LD_VAR 0 1
69244: PPUSH
69245: CALL_OW 121
69249: GO 69260
// ComExitBuilding ( unit ) ;
69251: LD_VAR 0 1
69255: PPUSH
69256: CALL_OW 122
// result := tmp ;
69260: LD_ADDR_VAR 0 2
69264: PUSH
69265: LD_VAR 0 3
69269: ST_TO_ADDR
// end ;
69270: LD_VAR 0 2
69274: RET
// export function ComExitAll ( units ) ; var i ; begin
69275: LD_INT 0
69277: PPUSH
69278: PPUSH
// if not units then
69279: LD_VAR 0 1
69283: NOT
69284: IFFALSE 69288
// exit ;
69286: GO 69314
// for i in units do
69288: LD_ADDR_VAR 0 3
69292: PUSH
69293: LD_VAR 0 1
69297: PUSH
69298: FOR_IN
69299: IFFALSE 69312
// ComExit ( i ) ;
69301: LD_VAR 0 3
69305: PPUSH
69306: CALL 69192 0 1
69310: GO 69298
69312: POP
69313: POP
// end ;
69314: LD_VAR 0 2
69318: RET
// export function ResetHc ; begin
69319: LD_INT 0
69321: PPUSH
// InitHc ;
69322: CALL_OW 19
// hc_importance := 0 ;
69326: LD_ADDR_OWVAR 32
69330: PUSH
69331: LD_INT 0
69333: ST_TO_ADDR
// end ;
69334: LD_VAR 0 1
69338: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69339: LD_INT 0
69341: PPUSH
69342: PPUSH
69343: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69344: LD_ADDR_VAR 0 6
69348: PUSH
69349: LD_VAR 0 1
69353: PUSH
69354: LD_VAR 0 3
69358: PLUS
69359: PUSH
69360: LD_INT 2
69362: DIV
69363: ST_TO_ADDR
// if _x < 0 then
69364: LD_VAR 0 6
69368: PUSH
69369: LD_INT 0
69371: LESS
69372: IFFALSE 69389
// _x := _x * - 1 ;
69374: LD_ADDR_VAR 0 6
69378: PUSH
69379: LD_VAR 0 6
69383: PUSH
69384: LD_INT 1
69386: NEG
69387: MUL
69388: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69389: LD_ADDR_VAR 0 7
69393: PUSH
69394: LD_VAR 0 2
69398: PUSH
69399: LD_VAR 0 4
69403: PLUS
69404: PUSH
69405: LD_INT 2
69407: DIV
69408: ST_TO_ADDR
// if _y < 0 then
69409: LD_VAR 0 7
69413: PUSH
69414: LD_INT 0
69416: LESS
69417: IFFALSE 69434
// _y := _y * - 1 ;
69419: LD_ADDR_VAR 0 7
69423: PUSH
69424: LD_VAR 0 7
69428: PUSH
69429: LD_INT 1
69431: NEG
69432: MUL
69433: ST_TO_ADDR
// result := [ _x , _y ] ;
69434: LD_ADDR_VAR 0 5
69438: PUSH
69439: LD_VAR 0 6
69443: PUSH
69444: LD_VAR 0 7
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: ST_TO_ADDR
// end ;
69453: LD_VAR 0 5
69457: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69458: LD_INT 0
69460: PPUSH
69461: PPUSH
69462: PPUSH
69463: PPUSH
// task := GetTaskList ( unit ) ;
69464: LD_ADDR_VAR 0 7
69468: PUSH
69469: LD_VAR 0 1
69473: PPUSH
69474: CALL_OW 437
69478: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69479: LD_VAR 0 7
69483: NOT
69484: PUSH
69485: LD_VAR 0 1
69489: PPUSH
69490: LD_VAR 0 2
69494: PPUSH
69495: CALL_OW 308
69499: NOT
69500: AND
69501: IFFALSE 69505
// exit ;
69503: GO 69623
// if IsInArea ( unit , area ) then
69505: LD_VAR 0 1
69509: PPUSH
69510: LD_VAR 0 2
69514: PPUSH
69515: CALL_OW 308
69519: IFFALSE 69537
// begin ComMoveToArea ( unit , goAway ) ;
69521: LD_VAR 0 1
69525: PPUSH
69526: LD_VAR 0 3
69530: PPUSH
69531: CALL_OW 113
// exit ;
69535: GO 69623
// end ; if task [ 1 ] [ 1 ] <> M then
69537: LD_VAR 0 7
69541: PUSH
69542: LD_INT 1
69544: ARRAY
69545: PUSH
69546: LD_INT 1
69548: ARRAY
69549: PUSH
69550: LD_STRING M
69552: NONEQUAL
69553: IFFALSE 69557
// exit ;
69555: GO 69623
// x := task [ 1 ] [ 2 ] ;
69557: LD_ADDR_VAR 0 5
69561: PUSH
69562: LD_VAR 0 7
69566: PUSH
69567: LD_INT 1
69569: ARRAY
69570: PUSH
69571: LD_INT 2
69573: ARRAY
69574: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69575: LD_ADDR_VAR 0 6
69579: PUSH
69580: LD_VAR 0 7
69584: PUSH
69585: LD_INT 1
69587: ARRAY
69588: PUSH
69589: LD_INT 3
69591: ARRAY
69592: ST_TO_ADDR
// if InArea ( x , y , area ) then
69593: LD_VAR 0 5
69597: PPUSH
69598: LD_VAR 0 6
69602: PPUSH
69603: LD_VAR 0 2
69607: PPUSH
69608: CALL_OW 309
69612: IFFALSE 69623
// ComStop ( unit ) ;
69614: LD_VAR 0 1
69618: PPUSH
69619: CALL_OW 141
// end ;
69623: LD_VAR 0 4
69627: RET
// export function Abs ( value ) ; begin
69628: LD_INT 0
69630: PPUSH
// result := value ;
69631: LD_ADDR_VAR 0 2
69635: PUSH
69636: LD_VAR 0 1
69640: ST_TO_ADDR
// if value < 0 then
69641: LD_VAR 0 1
69645: PUSH
69646: LD_INT 0
69648: LESS
69649: IFFALSE 69666
// result := value * - 1 ;
69651: LD_ADDR_VAR 0 2
69655: PUSH
69656: LD_VAR 0 1
69660: PUSH
69661: LD_INT 1
69663: NEG
69664: MUL
69665: ST_TO_ADDR
// end ;
69666: LD_VAR 0 2
69670: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69671: LD_INT 0
69673: PPUSH
69674: PPUSH
69675: PPUSH
69676: PPUSH
69677: PPUSH
69678: PPUSH
69679: PPUSH
69680: PPUSH
// if not unit or not building then
69681: LD_VAR 0 1
69685: NOT
69686: PUSH
69687: LD_VAR 0 2
69691: NOT
69692: OR
69693: IFFALSE 69697
// exit ;
69695: GO 69923
// x := GetX ( building ) ;
69697: LD_ADDR_VAR 0 4
69701: PUSH
69702: LD_VAR 0 2
69706: PPUSH
69707: CALL_OW 250
69711: ST_TO_ADDR
// y := GetY ( building ) ;
69712: LD_ADDR_VAR 0 6
69716: PUSH
69717: LD_VAR 0 2
69721: PPUSH
69722: CALL_OW 251
69726: ST_TO_ADDR
// d := GetDir ( building ) ;
69727: LD_ADDR_VAR 0 8
69731: PUSH
69732: LD_VAR 0 2
69736: PPUSH
69737: CALL_OW 254
69741: ST_TO_ADDR
// r := 4 ;
69742: LD_ADDR_VAR 0 9
69746: PUSH
69747: LD_INT 4
69749: ST_TO_ADDR
// for i := 1 to 5 do
69750: LD_ADDR_VAR 0 10
69754: PUSH
69755: DOUBLE
69756: LD_INT 1
69758: DEC
69759: ST_TO_ADDR
69760: LD_INT 5
69762: PUSH
69763: FOR_TO
69764: IFFALSE 69921
// begin _x := ShiftX ( x , d , r + i ) ;
69766: LD_ADDR_VAR 0 5
69770: PUSH
69771: LD_VAR 0 4
69775: PPUSH
69776: LD_VAR 0 8
69780: PPUSH
69781: LD_VAR 0 9
69785: PUSH
69786: LD_VAR 0 10
69790: PLUS
69791: PPUSH
69792: CALL_OW 272
69796: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69797: LD_ADDR_VAR 0 7
69801: PUSH
69802: LD_VAR 0 6
69806: PPUSH
69807: LD_VAR 0 8
69811: PPUSH
69812: LD_VAR 0 9
69816: PUSH
69817: LD_VAR 0 10
69821: PLUS
69822: PPUSH
69823: CALL_OW 273
69827: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69828: LD_VAR 0 5
69832: PPUSH
69833: LD_VAR 0 7
69837: PPUSH
69838: CALL_OW 488
69842: PUSH
69843: LD_VAR 0 5
69847: PPUSH
69848: LD_VAR 0 7
69852: PPUSH
69853: CALL_OW 428
69857: PPUSH
69858: CALL_OW 247
69862: PUSH
69863: LD_INT 3
69865: PUSH
69866: LD_INT 2
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: IN
69873: NOT
69874: AND
69875: IFFALSE 69919
// begin ComMoveXY ( unit , _x , _y ) ;
69877: LD_VAR 0 1
69881: PPUSH
69882: LD_VAR 0 5
69886: PPUSH
69887: LD_VAR 0 7
69891: PPUSH
69892: CALL_OW 111
// result := [ _x , _y ] ;
69896: LD_ADDR_VAR 0 3
69900: PUSH
69901: LD_VAR 0 5
69905: PUSH
69906: LD_VAR 0 7
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: ST_TO_ADDR
// exit ;
69915: POP
69916: POP
69917: GO 69923
// end ; end ;
69919: GO 69763
69921: POP
69922: POP
// end ;
69923: LD_VAR 0 3
69927: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69928: LD_INT 0
69930: PPUSH
69931: PPUSH
69932: PPUSH
// result := 0 ;
69933: LD_ADDR_VAR 0 3
69937: PUSH
69938: LD_INT 0
69940: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69941: LD_VAR 0 1
69945: PUSH
69946: LD_INT 0
69948: LESS
69949: PUSH
69950: LD_VAR 0 1
69954: PUSH
69955: LD_INT 8
69957: GREATER
69958: OR
69959: PUSH
69960: LD_VAR 0 2
69964: PUSH
69965: LD_INT 0
69967: LESS
69968: OR
69969: PUSH
69970: LD_VAR 0 2
69974: PUSH
69975: LD_INT 8
69977: GREATER
69978: OR
69979: IFFALSE 69983
// exit ;
69981: GO 70058
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69983: LD_ADDR_VAR 0 4
69987: PUSH
69988: LD_INT 22
69990: PUSH
69991: LD_VAR 0 2
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PPUSH
70000: CALL_OW 69
70004: PUSH
70005: FOR_IN
70006: IFFALSE 70056
// begin un := UnitShoot ( i ) ;
70008: LD_ADDR_VAR 0 5
70012: PUSH
70013: LD_VAR 0 4
70017: PPUSH
70018: CALL_OW 504
70022: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70023: LD_VAR 0 5
70027: PPUSH
70028: CALL_OW 255
70032: PUSH
70033: LD_VAR 0 1
70037: EQUAL
70038: IFFALSE 70054
// begin result := un ;
70040: LD_ADDR_VAR 0 3
70044: PUSH
70045: LD_VAR 0 5
70049: ST_TO_ADDR
// exit ;
70050: POP
70051: POP
70052: GO 70058
// end ; end ;
70054: GO 70005
70056: POP
70057: POP
// end ;
70058: LD_VAR 0 3
70062: RET
// export function GetCargoBay ( units ) ; begin
70063: LD_INT 0
70065: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70066: LD_ADDR_VAR 0 2
70070: PUSH
70071: LD_VAR 0 1
70075: PPUSH
70076: LD_INT 2
70078: PUSH
70079: LD_INT 34
70081: PUSH
70082: LD_INT 12
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 34
70091: PUSH
70092: LD_INT 51
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 34
70101: PUSH
70102: LD_INT 32
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 34
70111: PUSH
70112: LD_INT 89
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: PPUSH
70126: CALL_OW 72
70130: ST_TO_ADDR
// end ;
70131: LD_VAR 0 2
70135: RET
// export function Negate ( value ) ; begin
70136: LD_INT 0
70138: PPUSH
// result := not value ;
70139: LD_ADDR_VAR 0 2
70143: PUSH
70144: LD_VAR 0 1
70148: NOT
70149: ST_TO_ADDR
// end ;
70150: LD_VAR 0 2
70154: RET
// export function Inc ( value ) ; begin
70155: LD_INT 0
70157: PPUSH
// result := value + 1 ;
70158: LD_ADDR_VAR 0 2
70162: PUSH
70163: LD_VAR 0 1
70167: PUSH
70168: LD_INT 1
70170: PLUS
70171: ST_TO_ADDR
// end ;
70172: LD_VAR 0 2
70176: RET
// export function Dec ( value ) ; begin
70177: LD_INT 0
70179: PPUSH
// result := value - 1 ;
70180: LD_ADDR_VAR 0 2
70184: PUSH
70185: LD_VAR 0 1
70189: PUSH
70190: LD_INT 1
70192: MINUS
70193: ST_TO_ADDR
// end ;
70194: LD_VAR 0 2
70198: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70199: LD_INT 0
70201: PPUSH
70202: PPUSH
70203: PPUSH
70204: PPUSH
70205: PPUSH
70206: PPUSH
70207: PPUSH
70208: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70209: LD_VAR 0 1
70213: PPUSH
70214: LD_VAR 0 2
70218: PPUSH
70219: CALL_OW 488
70223: NOT
70224: PUSH
70225: LD_VAR 0 3
70229: PPUSH
70230: LD_VAR 0 4
70234: PPUSH
70235: CALL_OW 488
70239: NOT
70240: OR
70241: IFFALSE 70254
// begin result := - 1 ;
70243: LD_ADDR_VAR 0 5
70247: PUSH
70248: LD_INT 1
70250: NEG
70251: ST_TO_ADDR
// exit ;
70252: GO 70489
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70254: LD_ADDR_VAR 0 12
70258: PUSH
70259: LD_VAR 0 1
70263: PPUSH
70264: LD_VAR 0 2
70268: PPUSH
70269: LD_VAR 0 3
70273: PPUSH
70274: LD_VAR 0 4
70278: PPUSH
70279: CALL 69339 0 4
70283: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70284: LD_ADDR_VAR 0 11
70288: PUSH
70289: LD_VAR 0 1
70293: PPUSH
70294: LD_VAR 0 2
70298: PPUSH
70299: LD_VAR 0 12
70303: PUSH
70304: LD_INT 1
70306: ARRAY
70307: PPUSH
70308: LD_VAR 0 12
70312: PUSH
70313: LD_INT 2
70315: ARRAY
70316: PPUSH
70317: CALL_OW 298
70321: ST_TO_ADDR
// distance := 9999 ;
70322: LD_ADDR_VAR 0 10
70326: PUSH
70327: LD_INT 9999
70329: ST_TO_ADDR
// for i := 0 to 5 do
70330: LD_ADDR_VAR 0 6
70334: PUSH
70335: DOUBLE
70336: LD_INT 0
70338: DEC
70339: ST_TO_ADDR
70340: LD_INT 5
70342: PUSH
70343: FOR_TO
70344: IFFALSE 70487
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70346: LD_ADDR_VAR 0 7
70350: PUSH
70351: LD_VAR 0 1
70355: PPUSH
70356: LD_VAR 0 6
70360: PPUSH
70361: LD_VAR 0 11
70365: PPUSH
70366: CALL_OW 272
70370: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70371: LD_ADDR_VAR 0 8
70375: PUSH
70376: LD_VAR 0 2
70380: PPUSH
70381: LD_VAR 0 6
70385: PPUSH
70386: LD_VAR 0 11
70390: PPUSH
70391: CALL_OW 273
70395: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70396: LD_VAR 0 7
70400: PPUSH
70401: LD_VAR 0 8
70405: PPUSH
70406: CALL_OW 488
70410: NOT
70411: IFFALSE 70415
// continue ;
70413: GO 70343
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70415: LD_ADDR_VAR 0 9
70419: PUSH
70420: LD_VAR 0 12
70424: PUSH
70425: LD_INT 1
70427: ARRAY
70428: PPUSH
70429: LD_VAR 0 12
70433: PUSH
70434: LD_INT 2
70436: ARRAY
70437: PPUSH
70438: LD_VAR 0 7
70442: PPUSH
70443: LD_VAR 0 8
70447: PPUSH
70448: CALL_OW 298
70452: ST_TO_ADDR
// if tmp < distance then
70453: LD_VAR 0 9
70457: PUSH
70458: LD_VAR 0 10
70462: LESS
70463: IFFALSE 70485
// begin result := i ;
70465: LD_ADDR_VAR 0 5
70469: PUSH
70470: LD_VAR 0 6
70474: ST_TO_ADDR
// distance := tmp ;
70475: LD_ADDR_VAR 0 10
70479: PUSH
70480: LD_VAR 0 9
70484: ST_TO_ADDR
// end ; end ;
70485: GO 70343
70487: POP
70488: POP
// end ;
70489: LD_VAR 0 5
70493: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70494: LD_INT 0
70496: PPUSH
70497: PPUSH
// if not driver or not IsInUnit ( driver ) then
70498: LD_VAR 0 1
70502: NOT
70503: PUSH
70504: LD_VAR 0 1
70508: PPUSH
70509: CALL_OW 310
70513: NOT
70514: OR
70515: IFFALSE 70519
// exit ;
70517: GO 70609
// vehicle := IsInUnit ( driver ) ;
70519: LD_ADDR_VAR 0 3
70523: PUSH
70524: LD_VAR 0 1
70528: PPUSH
70529: CALL_OW 310
70533: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70534: LD_VAR 0 1
70538: PPUSH
70539: LD_STRING \
70541: PUSH
70542: LD_INT 0
70544: PUSH
70545: LD_INT 0
70547: PUSH
70548: LD_INT 0
70550: PUSH
70551: LD_INT 0
70553: PUSH
70554: LD_INT 0
70556: PUSH
70557: LD_INT 0
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: PUSH
70569: LD_STRING E
70571: PUSH
70572: LD_INT 0
70574: PUSH
70575: LD_INT 0
70577: PUSH
70578: LD_VAR 0 3
70582: PUSH
70583: LD_INT 0
70585: PUSH
70586: LD_INT 0
70588: PUSH
70589: LD_INT 0
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PPUSH
70605: CALL_OW 446
// end ;
70609: LD_VAR 0 2
70613: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70614: LD_INT 0
70616: PPUSH
70617: PPUSH
// if not driver or not IsInUnit ( driver ) then
70618: LD_VAR 0 1
70622: NOT
70623: PUSH
70624: LD_VAR 0 1
70628: PPUSH
70629: CALL_OW 310
70633: NOT
70634: OR
70635: IFFALSE 70639
// exit ;
70637: GO 70729
// vehicle := IsInUnit ( driver ) ;
70639: LD_ADDR_VAR 0 3
70643: PUSH
70644: LD_VAR 0 1
70648: PPUSH
70649: CALL_OW 310
70653: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70654: LD_VAR 0 1
70658: PPUSH
70659: LD_STRING \
70661: PUSH
70662: LD_INT 0
70664: PUSH
70665: LD_INT 0
70667: PUSH
70668: LD_INT 0
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: LD_INT 0
70676: PUSH
70677: LD_INT 0
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: PUSH
70689: LD_STRING E
70691: PUSH
70692: LD_INT 0
70694: PUSH
70695: LD_INT 0
70697: PUSH
70698: LD_VAR 0 3
70702: PUSH
70703: LD_INT 0
70705: PUSH
70706: LD_INT 0
70708: PUSH
70709: LD_INT 0
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PPUSH
70725: CALL_OW 447
// end ;
70729: LD_VAR 0 2
70733: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70734: LD_INT 0
70736: PPUSH
70737: PPUSH
70738: PPUSH
// tmp := [ ] ;
70739: LD_ADDR_VAR 0 5
70743: PUSH
70744: EMPTY
70745: ST_TO_ADDR
// for i in units do
70746: LD_ADDR_VAR 0 4
70750: PUSH
70751: LD_VAR 0 1
70755: PUSH
70756: FOR_IN
70757: IFFALSE 70795
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70759: LD_ADDR_VAR 0 5
70763: PUSH
70764: LD_VAR 0 5
70768: PPUSH
70769: LD_VAR 0 5
70773: PUSH
70774: LD_INT 1
70776: PLUS
70777: PPUSH
70778: LD_VAR 0 4
70782: PPUSH
70783: CALL_OW 256
70787: PPUSH
70788: CALL_OW 2
70792: ST_TO_ADDR
70793: GO 70756
70795: POP
70796: POP
// if not tmp then
70797: LD_VAR 0 5
70801: NOT
70802: IFFALSE 70806
// exit ;
70804: GO 70854
// if asc then
70806: LD_VAR 0 2
70810: IFFALSE 70834
// result := SortListByListAsc ( units , tmp ) else
70812: LD_ADDR_VAR 0 3
70816: PUSH
70817: LD_VAR 0 1
70821: PPUSH
70822: LD_VAR 0 5
70826: PPUSH
70827: CALL_OW 76
70831: ST_TO_ADDR
70832: GO 70854
// result := SortListByListDesc ( units , tmp ) ;
70834: LD_ADDR_VAR 0 3
70838: PUSH
70839: LD_VAR 0 1
70843: PPUSH
70844: LD_VAR 0 5
70848: PPUSH
70849: CALL_OW 77
70853: ST_TO_ADDR
// end ;
70854: LD_VAR 0 3
70858: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70859: LD_INT 0
70861: PPUSH
70862: PPUSH
// task := GetTaskList ( mech ) ;
70863: LD_ADDR_VAR 0 4
70867: PUSH
70868: LD_VAR 0 1
70872: PPUSH
70873: CALL_OW 437
70877: ST_TO_ADDR
// if not task then
70878: LD_VAR 0 4
70882: NOT
70883: IFFALSE 70887
// exit ;
70885: GO 70929
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70887: LD_ADDR_VAR 0 3
70891: PUSH
70892: LD_VAR 0 4
70896: PUSH
70897: LD_INT 1
70899: ARRAY
70900: PUSH
70901: LD_INT 1
70903: ARRAY
70904: PUSH
70905: LD_STRING r
70907: EQUAL
70908: PUSH
70909: LD_VAR 0 4
70913: PUSH
70914: LD_INT 1
70916: ARRAY
70917: PUSH
70918: LD_INT 4
70920: ARRAY
70921: PUSH
70922: LD_VAR 0 2
70926: EQUAL
70927: AND
70928: ST_TO_ADDR
// end ;
70929: LD_VAR 0 3
70933: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70934: LD_INT 0
70936: PPUSH
// SetDir ( unit , d ) ;
70937: LD_VAR 0 1
70941: PPUSH
70942: LD_VAR 0 4
70946: PPUSH
70947: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70951: LD_VAR 0 1
70955: PPUSH
70956: LD_VAR 0 2
70960: PPUSH
70961: LD_VAR 0 3
70965: PPUSH
70966: LD_VAR 0 5
70970: PPUSH
70971: CALL_OW 48
// end ;
70975: LD_VAR 0 6
70979: RET
// export function ToNaturalNumber ( number ) ; begin
70980: LD_INT 0
70982: PPUSH
// result := number div 1 ;
70983: LD_ADDR_VAR 0 2
70987: PUSH
70988: LD_VAR 0 1
70992: PUSH
70993: LD_INT 1
70995: DIV
70996: ST_TO_ADDR
// if number < 0 then
70997: LD_VAR 0 1
71001: PUSH
71002: LD_INT 0
71004: LESS
71005: IFFALSE 71015
// result := 0 ;
71007: LD_ADDR_VAR 0 2
71011: PUSH
71012: LD_INT 0
71014: ST_TO_ADDR
// end ;
71015: LD_VAR 0 2
71019: RET
// export function SortByClass ( units , class ) ; var un ; begin
71020: LD_INT 0
71022: PPUSH
71023: PPUSH
// if not units or not class then
71024: LD_VAR 0 1
71028: NOT
71029: PUSH
71030: LD_VAR 0 2
71034: NOT
71035: OR
71036: IFFALSE 71040
// exit ;
71038: GO 71135
// result := [ ] ;
71040: LD_ADDR_VAR 0 3
71044: PUSH
71045: EMPTY
71046: ST_TO_ADDR
// for un in units do
71047: LD_ADDR_VAR 0 4
71051: PUSH
71052: LD_VAR 0 1
71056: PUSH
71057: FOR_IN
71058: IFFALSE 71133
// if GetClass ( un ) = class then
71060: LD_VAR 0 4
71064: PPUSH
71065: CALL_OW 257
71069: PUSH
71070: LD_VAR 0 2
71074: EQUAL
71075: IFFALSE 71102
// result := Insert ( result , 1 , un ) else
71077: LD_ADDR_VAR 0 3
71081: PUSH
71082: LD_VAR 0 3
71086: PPUSH
71087: LD_INT 1
71089: PPUSH
71090: LD_VAR 0 4
71094: PPUSH
71095: CALL_OW 2
71099: ST_TO_ADDR
71100: GO 71131
// result := Replace ( result , result + 1 , un ) ;
71102: LD_ADDR_VAR 0 3
71106: PUSH
71107: LD_VAR 0 3
71111: PPUSH
71112: LD_VAR 0 3
71116: PUSH
71117: LD_INT 1
71119: PLUS
71120: PPUSH
71121: LD_VAR 0 4
71125: PPUSH
71126: CALL_OW 1
71130: ST_TO_ADDR
71131: GO 71057
71133: POP
71134: POP
// end ;
71135: LD_VAR 0 3
71139: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71140: LD_INT 0
71142: PPUSH
71143: PPUSH
71144: PPUSH
71145: PPUSH
71146: PPUSH
71147: PPUSH
71148: PPUSH
// result := [ ] ;
71149: LD_ADDR_VAR 0 4
71153: PUSH
71154: EMPTY
71155: ST_TO_ADDR
// if x - r < 0 then
71156: LD_VAR 0 1
71160: PUSH
71161: LD_VAR 0 3
71165: MINUS
71166: PUSH
71167: LD_INT 0
71169: LESS
71170: IFFALSE 71182
// min_x := 0 else
71172: LD_ADDR_VAR 0 8
71176: PUSH
71177: LD_INT 0
71179: ST_TO_ADDR
71180: GO 71198
// min_x := x - r ;
71182: LD_ADDR_VAR 0 8
71186: PUSH
71187: LD_VAR 0 1
71191: PUSH
71192: LD_VAR 0 3
71196: MINUS
71197: ST_TO_ADDR
// if y - r < 0 then
71198: LD_VAR 0 2
71202: PUSH
71203: LD_VAR 0 3
71207: MINUS
71208: PUSH
71209: LD_INT 0
71211: LESS
71212: IFFALSE 71224
// min_y := 0 else
71214: LD_ADDR_VAR 0 7
71218: PUSH
71219: LD_INT 0
71221: ST_TO_ADDR
71222: GO 71240
// min_y := y - r ;
71224: LD_ADDR_VAR 0 7
71228: PUSH
71229: LD_VAR 0 2
71233: PUSH
71234: LD_VAR 0 3
71238: MINUS
71239: ST_TO_ADDR
// max_x := x + r ;
71240: LD_ADDR_VAR 0 9
71244: PUSH
71245: LD_VAR 0 1
71249: PUSH
71250: LD_VAR 0 3
71254: PLUS
71255: ST_TO_ADDR
// max_y := y + r ;
71256: LD_ADDR_VAR 0 10
71260: PUSH
71261: LD_VAR 0 2
71265: PUSH
71266: LD_VAR 0 3
71270: PLUS
71271: ST_TO_ADDR
// for _x = min_x to max_x do
71272: LD_ADDR_VAR 0 5
71276: PUSH
71277: DOUBLE
71278: LD_VAR 0 8
71282: DEC
71283: ST_TO_ADDR
71284: LD_VAR 0 9
71288: PUSH
71289: FOR_TO
71290: IFFALSE 71391
// for _y = min_y to max_y do
71292: LD_ADDR_VAR 0 6
71296: PUSH
71297: DOUBLE
71298: LD_VAR 0 7
71302: DEC
71303: ST_TO_ADDR
71304: LD_VAR 0 10
71308: PUSH
71309: FOR_TO
71310: IFFALSE 71387
// begin if not ValidHex ( _x , _y ) then
71312: LD_VAR 0 5
71316: PPUSH
71317: LD_VAR 0 6
71321: PPUSH
71322: CALL_OW 488
71326: NOT
71327: IFFALSE 71331
// continue ;
71329: GO 71309
// if GetResourceTypeXY ( _x , _y ) then
71331: LD_VAR 0 5
71335: PPUSH
71336: LD_VAR 0 6
71340: PPUSH
71341: CALL_OW 283
71345: IFFALSE 71385
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71347: LD_ADDR_VAR 0 4
71351: PUSH
71352: LD_VAR 0 4
71356: PPUSH
71357: LD_VAR 0 4
71361: PUSH
71362: LD_INT 1
71364: PLUS
71365: PPUSH
71366: LD_VAR 0 5
71370: PUSH
71371: LD_VAR 0 6
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PPUSH
71380: CALL_OW 1
71384: ST_TO_ADDR
// end ;
71385: GO 71309
71387: POP
71388: POP
71389: GO 71289
71391: POP
71392: POP
// end ;
71393: LD_VAR 0 4
71397: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71398: LD_INT 0
71400: PPUSH
71401: PPUSH
71402: PPUSH
71403: PPUSH
71404: PPUSH
71405: PPUSH
71406: PPUSH
71407: PPUSH
// if not units then
71408: LD_VAR 0 1
71412: NOT
71413: IFFALSE 71417
// exit ;
71415: GO 71941
// result := UnitFilter ( units , [ f_ok ] ) ;
71417: LD_ADDR_VAR 0 3
71421: PUSH
71422: LD_VAR 0 1
71426: PPUSH
71427: LD_INT 50
71429: PUSH
71430: EMPTY
71431: LIST
71432: PPUSH
71433: CALL_OW 72
71437: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71438: LD_ADDR_VAR 0 8
71442: PUSH
71443: LD_VAR 0 1
71447: PUSH
71448: LD_INT 1
71450: ARRAY
71451: PPUSH
71452: CALL_OW 255
71456: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71457: LD_ADDR_VAR 0 10
71461: PUSH
71462: LD_INT 29
71464: PUSH
71465: LD_INT 91
71467: PUSH
71468: LD_INT 49
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: LIST
71475: ST_TO_ADDR
// if not result then
71476: LD_VAR 0 3
71480: NOT
71481: IFFALSE 71485
// exit ;
71483: GO 71941
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71485: LD_ADDR_VAR 0 5
71489: PUSH
71490: LD_INT 81
71492: PUSH
71493: LD_VAR 0 8
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PPUSH
71502: CALL_OW 69
71506: ST_TO_ADDR
// for i in result do
71507: LD_ADDR_VAR 0 4
71511: PUSH
71512: LD_VAR 0 3
71516: PUSH
71517: FOR_IN
71518: IFFALSE 71939
// begin tag := GetTag ( i ) + 1 ;
71520: LD_ADDR_VAR 0 9
71524: PUSH
71525: LD_VAR 0 4
71529: PPUSH
71530: CALL_OW 110
71534: PUSH
71535: LD_INT 1
71537: PLUS
71538: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71539: LD_ADDR_VAR 0 7
71543: PUSH
71544: LD_VAR 0 4
71548: PPUSH
71549: CALL_OW 250
71553: PPUSH
71554: LD_VAR 0 4
71558: PPUSH
71559: CALL_OW 251
71563: PPUSH
71564: LD_INT 6
71566: PPUSH
71567: CALL 71140 0 3
71571: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71572: LD_VAR 0 4
71576: PPUSH
71577: CALL_OW 247
71581: PUSH
71582: LD_INT 2
71584: EQUAL
71585: PUSH
71586: LD_VAR 0 7
71590: AND
71591: PUSH
71592: LD_VAR 0 4
71596: PPUSH
71597: CALL_OW 264
71601: PUSH
71602: LD_VAR 0 10
71606: IN
71607: NOT
71608: AND
71609: IFFALSE 71648
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71611: LD_VAR 0 4
71615: PPUSH
71616: LD_VAR 0 7
71620: PUSH
71621: LD_INT 1
71623: ARRAY
71624: PUSH
71625: LD_INT 1
71627: ARRAY
71628: PPUSH
71629: LD_VAR 0 7
71633: PUSH
71634: LD_INT 1
71636: ARRAY
71637: PUSH
71638: LD_INT 2
71640: ARRAY
71641: PPUSH
71642: CALL_OW 116
71646: GO 71937
// if path > tag then
71648: LD_VAR 0 2
71652: PUSH
71653: LD_VAR 0 9
71657: GREATER
71658: IFFALSE 71866
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71660: LD_ADDR_VAR 0 6
71664: PUSH
71665: LD_VAR 0 5
71669: PPUSH
71670: LD_INT 91
71672: PUSH
71673: LD_VAR 0 4
71677: PUSH
71678: LD_INT 8
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: LIST
71685: PPUSH
71686: CALL_OW 72
71690: ST_TO_ADDR
// if nearEnemy then
71691: LD_VAR 0 6
71695: IFFALSE 71764
// begin if GetWeapon ( i ) = ru_time_lapser then
71697: LD_VAR 0 4
71701: PPUSH
71702: CALL_OW 264
71706: PUSH
71707: LD_INT 49
71709: EQUAL
71710: IFFALSE 71738
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71712: LD_VAR 0 4
71716: PPUSH
71717: LD_VAR 0 6
71721: PPUSH
71722: LD_VAR 0 4
71726: PPUSH
71727: CALL_OW 74
71731: PPUSH
71732: CALL_OW 112
71736: GO 71762
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71738: LD_VAR 0 4
71742: PPUSH
71743: LD_VAR 0 6
71747: PPUSH
71748: LD_VAR 0 4
71752: PPUSH
71753: CALL_OW 74
71757: PPUSH
71758: CALL_OW 115
// end else
71762: GO 71864
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71764: LD_VAR 0 4
71768: PPUSH
71769: LD_VAR 0 2
71773: PUSH
71774: LD_VAR 0 9
71778: ARRAY
71779: PUSH
71780: LD_INT 1
71782: ARRAY
71783: PPUSH
71784: LD_VAR 0 2
71788: PUSH
71789: LD_VAR 0 9
71793: ARRAY
71794: PUSH
71795: LD_INT 2
71797: ARRAY
71798: PPUSH
71799: CALL_OW 297
71803: PUSH
71804: LD_INT 6
71806: GREATER
71807: IFFALSE 71850
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71809: LD_VAR 0 4
71813: PPUSH
71814: LD_VAR 0 2
71818: PUSH
71819: LD_VAR 0 9
71823: ARRAY
71824: PUSH
71825: LD_INT 1
71827: ARRAY
71828: PPUSH
71829: LD_VAR 0 2
71833: PUSH
71834: LD_VAR 0 9
71838: ARRAY
71839: PUSH
71840: LD_INT 2
71842: ARRAY
71843: PPUSH
71844: CALL_OW 114
71848: GO 71864
// SetTag ( i , tag ) ;
71850: LD_VAR 0 4
71854: PPUSH
71855: LD_VAR 0 9
71859: PPUSH
71860: CALL_OW 109
// end else
71864: GO 71937
// if enemy then
71866: LD_VAR 0 5
71870: IFFALSE 71937
// begin if GetWeapon ( i ) = ru_time_lapser then
71872: LD_VAR 0 4
71876: PPUSH
71877: CALL_OW 264
71881: PUSH
71882: LD_INT 49
71884: EQUAL
71885: IFFALSE 71913
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71887: LD_VAR 0 4
71891: PPUSH
71892: LD_VAR 0 5
71896: PPUSH
71897: LD_VAR 0 4
71901: PPUSH
71902: CALL_OW 74
71906: PPUSH
71907: CALL_OW 112
71911: GO 71937
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71913: LD_VAR 0 4
71917: PPUSH
71918: LD_VAR 0 5
71922: PPUSH
71923: LD_VAR 0 4
71927: PPUSH
71928: CALL_OW 74
71932: PPUSH
71933: CALL_OW 115
// end ; end ;
71937: GO 71517
71939: POP
71940: POP
// end ;
71941: LD_VAR 0 3
71945: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71946: LD_INT 0
71948: PPUSH
71949: PPUSH
71950: PPUSH
// if not unit or IsInUnit ( unit ) then
71951: LD_VAR 0 1
71955: NOT
71956: PUSH
71957: LD_VAR 0 1
71961: PPUSH
71962: CALL_OW 310
71966: OR
71967: IFFALSE 71971
// exit ;
71969: GO 72062
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71971: LD_ADDR_VAR 0 4
71975: PUSH
71976: LD_VAR 0 1
71980: PPUSH
71981: CALL_OW 250
71985: PPUSH
71986: LD_VAR 0 2
71990: PPUSH
71991: LD_INT 1
71993: PPUSH
71994: CALL_OW 272
71998: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71999: LD_ADDR_VAR 0 5
72003: PUSH
72004: LD_VAR 0 1
72008: PPUSH
72009: CALL_OW 251
72013: PPUSH
72014: LD_VAR 0 2
72018: PPUSH
72019: LD_INT 1
72021: PPUSH
72022: CALL_OW 273
72026: ST_TO_ADDR
// if ValidHex ( x , y ) then
72027: LD_VAR 0 4
72031: PPUSH
72032: LD_VAR 0 5
72036: PPUSH
72037: CALL_OW 488
72041: IFFALSE 72062
// ComTurnXY ( unit , x , y ) ;
72043: LD_VAR 0 1
72047: PPUSH
72048: LD_VAR 0 4
72052: PPUSH
72053: LD_VAR 0 5
72057: PPUSH
72058: CALL_OW 118
// end ;
72062: LD_VAR 0 3
72066: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72067: LD_INT 0
72069: PPUSH
72070: PPUSH
// result := false ;
72071: LD_ADDR_VAR 0 3
72075: PUSH
72076: LD_INT 0
72078: ST_TO_ADDR
// if not units then
72079: LD_VAR 0 2
72083: NOT
72084: IFFALSE 72088
// exit ;
72086: GO 72133
// for i in units do
72088: LD_ADDR_VAR 0 4
72092: PUSH
72093: LD_VAR 0 2
72097: PUSH
72098: FOR_IN
72099: IFFALSE 72131
// if See ( side , i ) then
72101: LD_VAR 0 1
72105: PPUSH
72106: LD_VAR 0 4
72110: PPUSH
72111: CALL_OW 292
72115: IFFALSE 72129
// begin result := true ;
72117: LD_ADDR_VAR 0 3
72121: PUSH
72122: LD_INT 1
72124: ST_TO_ADDR
// exit ;
72125: POP
72126: POP
72127: GO 72133
// end ;
72129: GO 72098
72131: POP
72132: POP
// end ;
72133: LD_VAR 0 3
72137: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72138: LD_INT 0
72140: PPUSH
72141: PPUSH
72142: PPUSH
72143: PPUSH
// if not unit or not points then
72144: LD_VAR 0 1
72148: NOT
72149: PUSH
72150: LD_VAR 0 2
72154: NOT
72155: OR
72156: IFFALSE 72160
// exit ;
72158: GO 72250
// dist := 99999 ;
72160: LD_ADDR_VAR 0 5
72164: PUSH
72165: LD_INT 99999
72167: ST_TO_ADDR
// for i in points do
72168: LD_ADDR_VAR 0 4
72172: PUSH
72173: LD_VAR 0 2
72177: PUSH
72178: FOR_IN
72179: IFFALSE 72248
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72181: LD_ADDR_VAR 0 6
72185: PUSH
72186: LD_VAR 0 1
72190: PPUSH
72191: LD_VAR 0 4
72195: PUSH
72196: LD_INT 1
72198: ARRAY
72199: PPUSH
72200: LD_VAR 0 4
72204: PUSH
72205: LD_INT 2
72207: ARRAY
72208: PPUSH
72209: CALL_OW 297
72213: ST_TO_ADDR
// if tmpDist < dist then
72214: LD_VAR 0 6
72218: PUSH
72219: LD_VAR 0 5
72223: LESS
72224: IFFALSE 72246
// begin result := i ;
72226: LD_ADDR_VAR 0 3
72230: PUSH
72231: LD_VAR 0 4
72235: ST_TO_ADDR
// dist := tmpDist ;
72236: LD_ADDR_VAR 0 5
72240: PUSH
72241: LD_VAR 0 6
72245: ST_TO_ADDR
// end ; end ;
72246: GO 72178
72248: POP
72249: POP
// end ;
72250: LD_VAR 0 3
72254: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72255: LD_INT 0
72257: PPUSH
// uc_side := side ;
72258: LD_ADDR_OWVAR 20
72262: PUSH
72263: LD_VAR 0 1
72267: ST_TO_ADDR
// uc_nation := 3 ;
72268: LD_ADDR_OWVAR 21
72272: PUSH
72273: LD_INT 3
72275: ST_TO_ADDR
// vc_chassis := 25 ;
72276: LD_ADDR_OWVAR 37
72280: PUSH
72281: LD_INT 25
72283: ST_TO_ADDR
// vc_engine := engine_siberite ;
72284: LD_ADDR_OWVAR 39
72288: PUSH
72289: LD_INT 3
72291: ST_TO_ADDR
// vc_control := control_computer ;
72292: LD_ADDR_OWVAR 38
72296: PUSH
72297: LD_INT 3
72299: ST_TO_ADDR
// vc_weapon := 59 ;
72300: LD_ADDR_OWVAR 40
72304: PUSH
72305: LD_INT 59
72307: ST_TO_ADDR
// result := CreateVehicle ;
72308: LD_ADDR_VAR 0 5
72312: PUSH
72313: CALL_OW 45
72317: ST_TO_ADDR
// SetDir ( result , d ) ;
72318: LD_VAR 0 5
72322: PPUSH
72323: LD_VAR 0 4
72327: PPUSH
72328: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72332: LD_VAR 0 5
72336: PPUSH
72337: LD_VAR 0 2
72341: PPUSH
72342: LD_VAR 0 3
72346: PPUSH
72347: LD_INT 0
72349: PPUSH
72350: CALL_OW 48
// end ;
72354: LD_VAR 0 5
72358: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72359: LD_INT 0
72361: PPUSH
72362: PPUSH
72363: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72364: LD_ADDR_VAR 0 2
72368: PUSH
72369: LD_INT 0
72371: PUSH
72372: LD_INT 0
72374: PUSH
72375: LD_INT 0
72377: PUSH
72378: LD_INT 0
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: LIST
72385: LIST
72386: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72387: LD_VAR 0 1
72391: NOT
72392: PUSH
72393: LD_VAR 0 1
72397: PPUSH
72398: CALL_OW 264
72402: PUSH
72403: LD_INT 12
72405: PUSH
72406: LD_INT 51
72408: PUSH
72409: LD_INT 32
72411: PUSH
72412: LD_INT 89
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: LIST
72419: LIST
72420: IN
72421: NOT
72422: OR
72423: IFFALSE 72427
// exit ;
72425: GO 72525
// for i := 1 to 3 do
72427: LD_ADDR_VAR 0 3
72431: PUSH
72432: DOUBLE
72433: LD_INT 1
72435: DEC
72436: ST_TO_ADDR
72437: LD_INT 3
72439: PUSH
72440: FOR_TO
72441: IFFALSE 72523
// begin tmp := GetCargo ( cargo , i ) ;
72443: LD_ADDR_VAR 0 4
72447: PUSH
72448: LD_VAR 0 1
72452: PPUSH
72453: LD_VAR 0 3
72457: PPUSH
72458: CALL_OW 289
72462: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72463: LD_ADDR_VAR 0 2
72467: PUSH
72468: LD_VAR 0 2
72472: PPUSH
72473: LD_VAR 0 3
72477: PPUSH
72478: LD_VAR 0 4
72482: PPUSH
72483: CALL_OW 1
72487: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72488: LD_ADDR_VAR 0 2
72492: PUSH
72493: LD_VAR 0 2
72497: PPUSH
72498: LD_INT 4
72500: PPUSH
72501: LD_VAR 0 2
72505: PUSH
72506: LD_INT 4
72508: ARRAY
72509: PUSH
72510: LD_VAR 0 4
72514: PLUS
72515: PPUSH
72516: CALL_OW 1
72520: ST_TO_ADDR
// end ;
72521: GO 72440
72523: POP
72524: POP
// end ;
72525: LD_VAR 0 2
72529: RET
// export function Length ( array ) ; begin
72530: LD_INT 0
72532: PPUSH
// result := array + 0 ;
72533: LD_ADDR_VAR 0 2
72537: PUSH
72538: LD_VAR 0 1
72542: PUSH
72543: LD_INT 0
72545: PLUS
72546: ST_TO_ADDR
// end ;
72547: LD_VAR 0 2
72551: RET
// export function PrepareArray ( array ) ; begin
72552: LD_INT 0
72554: PPUSH
// result := array diff 0 ;
72555: LD_ADDR_VAR 0 2
72559: PUSH
72560: LD_VAR 0 1
72564: PUSH
72565: LD_INT 0
72567: DIFF
72568: ST_TO_ADDR
// if not result [ 1 ] then
72569: LD_VAR 0 2
72573: PUSH
72574: LD_INT 1
72576: ARRAY
72577: NOT
72578: IFFALSE 72598
// result := Delete ( result , 1 ) ;
72580: LD_ADDR_VAR 0 2
72584: PUSH
72585: LD_VAR 0 2
72589: PPUSH
72590: LD_INT 1
72592: PPUSH
72593: CALL_OW 3
72597: ST_TO_ADDR
// end ;
72598: LD_VAR 0 2
72602: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72603: LD_INT 0
72605: PPUSH
72606: PPUSH
72607: PPUSH
72608: PPUSH
// sibRocketRange := 25 ;
72609: LD_ADDR_VAR 0 6
72613: PUSH
72614: LD_INT 25
72616: ST_TO_ADDR
// result := false ;
72617: LD_ADDR_VAR 0 4
72621: PUSH
72622: LD_INT 0
72624: ST_TO_ADDR
// for i := 0 to 5 do
72625: LD_ADDR_VAR 0 5
72629: PUSH
72630: DOUBLE
72631: LD_INT 0
72633: DEC
72634: ST_TO_ADDR
72635: LD_INT 5
72637: PUSH
72638: FOR_TO
72639: IFFALSE 72706
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72641: LD_VAR 0 1
72645: PPUSH
72646: LD_VAR 0 5
72650: PPUSH
72651: LD_VAR 0 6
72655: PPUSH
72656: CALL_OW 272
72660: PPUSH
72661: LD_VAR 0 2
72665: PPUSH
72666: LD_VAR 0 5
72670: PPUSH
72671: LD_VAR 0 6
72675: PPUSH
72676: CALL_OW 273
72680: PPUSH
72681: LD_VAR 0 3
72685: PPUSH
72686: CALL_OW 309
72690: IFFALSE 72704
// begin result := true ;
72692: LD_ADDR_VAR 0 4
72696: PUSH
72697: LD_INT 1
72699: ST_TO_ADDR
// exit ;
72700: POP
72701: POP
72702: GO 72708
// end ;
72704: GO 72638
72706: POP
72707: POP
// end ;
72708: LD_VAR 0 4
72712: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72713: LD_INT 0
72715: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72716: LD_VAR 0 1
72720: PPUSH
72721: LD_VAR 0 2
72725: PPUSH
72726: LD_INT 0
72728: PPUSH
72729: LD_INT 0
72731: PPUSH
72732: LD_INT 1
72734: PPUSH
72735: LD_INT 0
72737: PPUSH
72738: CALL_OW 587
// end ;
72742: LD_VAR 0 3
72746: RET
// export function CenterOnNow ( unit ) ; begin
72747: LD_INT 0
72749: PPUSH
// result := IsInUnit ( unit ) ;
72750: LD_ADDR_VAR 0 2
72754: PUSH
72755: LD_VAR 0 1
72759: PPUSH
72760: CALL_OW 310
72764: ST_TO_ADDR
// if not result then
72765: LD_VAR 0 2
72769: NOT
72770: IFFALSE 72782
// result := unit ;
72772: LD_ADDR_VAR 0 2
72776: PUSH
72777: LD_VAR 0 1
72781: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72782: LD_VAR 0 1
72786: PPUSH
72787: CALL_OW 87
// end ; end_of_file
72791: LD_VAR 0 2
72795: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72796: LD_VAR 0 1
72800: PUSH
72801: LD_INT 200
72803: DOUBLE
72804: GREATEREQUAL
72805: IFFALSE 72813
72807: LD_INT 299
72809: DOUBLE
72810: LESSEQUAL
72811: IFTRUE 72815
72813: GO 72847
72815: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72816: LD_VAR 0 1
72820: PPUSH
72821: LD_VAR 0 2
72825: PPUSH
72826: LD_VAR 0 3
72830: PPUSH
72831: LD_VAR 0 4
72835: PPUSH
72836: LD_VAR 0 5
72840: PPUSH
72841: CALL 27589 0 5
72845: GO 72924
72847: LD_INT 300
72849: DOUBLE
72850: GREATEREQUAL
72851: IFFALSE 72859
72853: LD_INT 399
72855: DOUBLE
72856: LESSEQUAL
72857: IFTRUE 72861
72859: GO 72923
72861: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72862: LD_VAR 0 1
72866: PPUSH
72867: LD_VAR 0 2
72871: PPUSH
72872: LD_VAR 0 3
72876: PPUSH
72877: LD_VAR 0 4
72881: PPUSH
72882: LD_VAR 0 5
72886: PPUSH
72887: LD_VAR 0 6
72891: PPUSH
72892: LD_VAR 0 7
72896: PPUSH
72897: LD_VAR 0 8
72901: PPUSH
72902: LD_VAR 0 9
72906: PPUSH
72907: LD_VAR 0 10
72911: PPUSH
72912: LD_VAR 0 11
72916: PPUSH
72917: CALL 23922 0 11
72921: GO 72924
72923: POP
// end ;
72924: PPOPN 11
72926: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72927: LD_VAR 0 1
72931: PPUSH
72932: LD_VAR 0 2
72936: PPUSH
72937: LD_VAR 0 3
72941: PPUSH
72942: LD_VAR 0 4
72946: PPUSH
72947: LD_VAR 0 5
72951: PPUSH
72952: CALL 27325 0 5
// end ; end_of_file
72956: PPOPN 5
72958: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72959: LD_VAR 0 1
72963: PPUSH
72964: LD_VAR 0 2
72968: PPUSH
72969: LD_VAR 0 3
72973: PPUSH
72974: LD_VAR 0 4
72978: PPUSH
72979: LD_VAR 0 5
72983: PPUSH
72984: LD_VAR 0 6
72988: PPUSH
72989: CALL 11574 0 6
// end ;
72993: PPOPN 6
72995: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72996: LD_INT 0
72998: PPUSH
// begin if not units then
72999: LD_VAR 0 1
73003: NOT
73004: IFFALSE 73008
// exit ;
73006: GO 73008
// end ;
73008: PPOPN 7
73010: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73011: CALL 11478 0 0
// end ;
73015: PPOPN 1
73017: END
