// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10862 0 0
// PrepareAmerican ;
  19: CALL 245 0 0
// PrepareRussian ;
  23: CALL 1529 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6486 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := false ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// end ;
 104: LD_VAR 0 1
 108: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 109: LD_INT 22
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: LD_INT 30
 121: PUSH
 122: LD_INT 33
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: PPUSH
 133: CALL_OW 69
 137: PUSH
 138: LD_INT 15
 140: GREATEREQUAL
 141: IFFALSE 153
 143: GO 145
 145: DISABLE
// SetAchievement ( ACH_FORT ) ;
 146: LD_STRING ACH_FORT
 148: PPUSH
 149: CALL_OW 543
 153: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 154: LD_INT 22
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 25
 166: PUSH
 167: LD_INT 12
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: PPUSH
 178: CALL_OW 69
 182: PUSH
 183: LD_INT 0
 185: EQUAL
 186: IFFALSE 198
 188: GO 190
 190: DISABLE
// SetAchievement ( ACH_APE ) ;
 191: LD_STRING ACH_APE
 193: PPUSH
 194: CALL_OW 543
 198: END
// every 0 0$1 trigger killCounter >= 20 do
 199: LD_EXP 5
 203: PUSH
 204: LD_INT 20
 206: GREATEREQUAL
 207: IFFALSE 219
 209: GO 211
 211: DISABLE
// SetAchievement ( ACH_DOUBLE ) ;
 212: LD_STRING ACH_DOUBLE
 214: PPUSH
 215: CALL_OW 543
 219: END
// every 0 0$1 trigger IsInArea ( JMMVeh , kappaBaseArea ) do
 220: LD_EXP 9
 224: PPUSH
 225: LD_INT 15
 227: PPUSH
 228: CALL_OW 308
 232: IFFALSE 244
 234: GO 236
 236: DISABLE
// SetAchievement ( ACH_AMASHA ) ; end_of_file
 237: LD_STRING ACH_AMASHA
 239: PPUSH
 240: CALL_OW 543
 244: END
// export JMM , JMMVeh , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 245: LD_INT 0
 247: PPUSH
 248: PPUSH
 249: PPUSH
 250: PPUSH
 251: PPUSH
// uc_side := 1 ;
 252: LD_ADDR_OWVAR 20
 256: PUSH
 257: LD_INT 1
 259: ST_TO_ADDR
// uc_nation := 1 ;
 260: LD_ADDR_OWVAR 21
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 268: LD_INT 48
 270: PPUSH
 271: LD_STRING deltakappa
 273: PPUSH
 274: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 278: LD_INT 48
 280: PPUSH
 281: CALL_OW 274
 285: PPUSH
 286: LD_INT 1
 288: PPUSH
 289: LD_INT 2000
 291: PUSH
 292: LD_INT 1600
 294: PUSH
 295: LD_INT 1200
 297: PUSH
 298: LD_INT 900
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: LIST
 305: LIST
 306: PUSH
 307: LD_OWVAR 67
 311: ARRAY
 312: PPUSH
 313: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 317: LD_INT 48
 319: PPUSH
 320: CALL_OW 274
 324: PPUSH
 325: LD_INT 2
 327: PPUSH
 328: LD_INT 20
 330: PPUSH
 331: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 335: LD_INT 48
 337: PPUSH
 338: CALL_OW 274
 342: PPUSH
 343: LD_INT 3
 345: PPUSH
 346: LD_INT 100
 348: PPUSH
 349: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 353: LD_ADDR_EXP 8
 357: PUSH
 358: LD_STRING JMM
 360: PPUSH
 361: LD_EXP 1
 365: NOT
 366: PPUSH
 367: LD_STRING 13f_
 369: PPUSH
 370: CALL 32668 0 3
 374: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 375: LD_EXP 8
 379: PPUSH
 380: LD_INT 1
 382: PPUSH
 383: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 387: LD_INT 5
 389: PUSH
 390: LD_INT 5
 392: PUSH
 393: LD_INT 3
 395: PUSH
 396: LD_INT 3
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: PUSH
 405: LD_OWVAR 67
 409: ARRAY
 410: PPUSH
 411: LD_INT 3
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: LD_INT 9
 419: PUSH
 420: LD_INT 9
 422: PUSH
 423: LD_INT 5
 425: PUSH
 426: LD_INT 5
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_OWVAR 67
 439: ARRAY
 440: PPUSH
 441: LD_INT 100
 443: PPUSH
 444: CALL 37592 0 5
// JMMVeh := CreateVehicle ;
 448: LD_ADDR_EXP 9
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// SetDir ( JMMVeh , 1 ) ;
 458: LD_EXP 9
 462: PPUSH
 463: LD_INT 1
 465: PPUSH
 466: CALL_OW 233
// PlaceUnitXY ( JMMVeh , 6 , 5 , false ) ;
 470: LD_EXP 9
 474: PPUSH
 475: LD_INT 6
 477: PPUSH
 478: LD_INT 5
 480: PPUSH
 481: LD_INT 0
 483: PPUSH
 484: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 488: LD_EXP 8
 492: PPUSH
 493: LD_EXP 9
 497: PPUSH
 498: CALL_OW 52
// SetMark ( JMMVeh , - 1 ) ;
 502: LD_EXP 9
 506: PPUSH
 507: LD_INT 1
 509: NEG
 510: PPUSH
 511: CALL_OW 242
// ComMoveXY ( JMMVeh , 21 , 8 ) ;
 515: LD_EXP 9
 519: PPUSH
 520: LD_INT 21
 522: PPUSH
 523: LD_INT 8
 525: PPUSH
 526: CALL_OW 111
// uc_side := 4 ;
 530: LD_ADDR_OWVAR 20
 534: PUSH
 535: LD_INT 4
 537: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 538: LD_ADDR_EXP 13
 542: PUSH
 543: LD_STRING Powell
 545: PPUSH
 546: LD_INT 0
 548: PPUSH
 549: LD_STRING 
 551: PPUSH
 552: CALL 32668 0 3
 556: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 557: LD_ADDR_EXP 10
 561: PUSH
 562: LD_STRING Joan
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_STRING 10c_
 573: PPUSH
 574: CALL 32668 0 3
 578: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 579: LD_ADDR_EXP 11
 583: PUSH
 584: LD_STRING Lisa
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_STRING 13s_
 595: PPUSH
 596: CALL 32668 0 3
 600: ST_TO_ADDR
// if Joan then
 601: LD_EXP 10
 605: IFFALSE 644
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 607: LD_EXP 10
 611: PPUSH
 612: LD_INT 4
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 622: LD_EXP 10
 626: PPUSH
 627: LD_INT 4
 629: PPUSH
 630: CALL_OW 336
// JMMGirl = 1 ;
 634: LD_ADDR_EXP 2
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// end else
 642: GO 735
// if Lisa then
 644: LD_EXP 11
 648: IFFALSE 687
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 650: LD_EXP 11
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_INT 0
 660: PPUSH
 661: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 665: LD_EXP 11
 669: PPUSH
 670: LD_INT 1
 672: PPUSH
 673: CALL_OW 336
// JMMGirl := 2 ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_INT 2
 684: ST_TO_ADDR
// end else
 685: GO 735
// begin Connie := NewCharacter ( Coonie ) ;
 687: LD_ADDR_EXP 12
 691: PUSH
 692: LD_STRING Coonie
 694: PPUSH
 695: CALL_OW 25
 699: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 700: LD_EXP 12
 704: PPUSH
 705: LD_INT 4
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 715: LD_EXP 12
 719: PPUSH
 720: LD_INT 3
 722: PPUSH
 723: CALL_OW 336
// JMMGirl := 3 ;
 727: LD_ADDR_EXP 2
 731: PUSH
 732: LD_INT 3
 734: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 735: LD_ADDR_VAR 0 2
 739: PUSH
 740: DOUBLE
 741: LD_INT 1
 743: DEC
 744: ST_TO_ADDR
 745: LD_INT 4
 747: PUSH
 748: LD_INT 3
 750: PUSH
 751: LD_INT 3
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: PUSH
 763: LD_OWVAR 67
 767: ARRAY
 768: PUSH
 769: FOR_TO
 770: IFFALSE 924
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 772: LD_INT 4
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: LD_INT 2
 780: PUSH
 781: LD_INT 3
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 4
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: LD_INT 9
 812: PUSH
 813: LD_INT 7
 815: PUSH
 816: LD_INT 4
 818: PUSH
 819: LD_INT 5
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: PUSH
 828: LD_VAR 0 2
 832: PUSH
 833: LD_INT 4
 835: MOD
 836: PUSH
 837: LD_INT 1
 839: PLUS
 840: ARRAY
 841: PPUSH
 842: LD_INT 33
 844: PPUSH
 845: LD_INT 55
 847: PPUSH
 848: CALL_OW 12
 852: PPUSH
 853: CALL 37592 0 5
// veh := CreateVehicle ;
 857: LD_ADDR_VAR 0 4
 861: PUSH
 862: CALL_OW 45
 866: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 867: LD_VAR 0 4
 871: PPUSH
 872: LD_INT 0
 874: PPUSH
 875: LD_INT 5
 877: PPUSH
 878: CALL_OW 12
 882: PPUSH
 883: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 887: LD_VAR 0 4
 891: PPUSH
 892: LD_INT 500
 894: PPUSH
 895: LD_INT 950
 897: PPUSH
 898: CALL_OW 12
 902: PPUSH
 903: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 907: LD_VAR 0 4
 911: PPUSH
 912: LD_INT 5
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// end ;
 922: GO 769
 924: POP
 925: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: DOUBLE
 932: LD_INT 1
 934: DEC
 935: ST_TO_ADDR
 936: LD_INT 3
 938: PUSH
 939: LD_INT 3
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: LD_INT 2
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_OWVAR 67
 958: ARRAY
 959: PUSH
 960: FOR_TO
 961: IFFALSE 1083
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 963: LD_INT 3
 965: PUSH
 966: LD_INT 2
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 2
 980: MOD
 981: PUSH
 982: LD_INT 1
 984: PLUS
 985: ARRAY
 986: PPUSH
 987: LD_INT 1
 989: PPUSH
 990: LD_INT 3
 992: PPUSH
 993: LD_INT 9
 995: PUSH
 996: LD_INT 5
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PUSH
1003: LD_VAR 0 2
1007: PUSH
1008: LD_INT 2
1010: MOD
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: ARRAY
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 37592 0 5
// veh := CreateVehicle ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: CALL_OW 45
1033: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1034: LD_VAR 0 4
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: LD_INT 5
1044: PPUSH
1045: CALL_OW 12
1049: PPUSH
1050: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1054: LD_VAR 0 4
1058: PPUSH
1059: LD_INT 1000
1061: PPUSH
1062: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1066: LD_VAR 0 4
1070: PPUSH
1071: LD_INT 17
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 960
1083: POP
1084: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_INT 3
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_OWVAR 67
1117: ARRAY
1118: PUSH
1119: FOR_TO
1120: IFFALSE 1168
// begin PrepareApeman ( 1 ) ;
1122: LD_INT 1
1124: PPUSH
1125: CALL 66711 0 1
// uc_side := 4 ;
1129: LD_ADDR_OWVAR 20
1133: PUSH
1134: LD_INT 4
1136: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1137: LD_ADDR_OWVAR 28
1141: PUSH
1142: LD_INT 16
1144: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1145: CALL_OW 44
1149: PPUSH
1150: LD_INT 84
1152: PPUSH
1153: LD_INT 127
1155: PPUSH
1156: LD_INT 5
1158: PPUSH
1159: LD_INT 0
1161: PPUSH
1162: CALL_OW 50
// end ;
1166: GO 1119
1168: POP
1169: POP
// uc_side := 4 ;
1170: LD_ADDR_OWVAR 20
1174: PUSH
1175: LD_INT 4
1177: ST_TO_ADDR
// uc_nation := 1 ;
1178: LD_ADDR_OWVAR 21
1182: PUSH
1183: LD_INT 1
1185: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1186: LD_INT 2
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 1
1194: PPUSH
1195: LD_INT 12
1197: PPUSH
1198: LD_INT 100
1200: PPUSH
1201: CALL 37592 0 5
// veh := CreateVehicle ;
1205: LD_ADDR_VAR 0 4
1209: PUSH
1210: CALL_OW 45
1214: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1215: LD_VAR 0 4
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: LD_INT 100
1225: PPUSH
1226: CALL_OW 290
// SetLives ( veh , 450 ) ;
1230: LD_VAR 0 4
1234: PPUSH
1235: LD_INT 450
1237: PPUSH
1238: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1242: LD_VAR 0 4
1246: PPUSH
1247: LD_INT 122
1249: PPUSH
1250: LD_INT 118
1252: PPUSH
1253: LD_INT 4
1255: PPUSH
1256: LD_INT 0
1258: PPUSH
1259: CALL 72603 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1276: CALL_OW 44
1280: PPUSH
1281: LD_INT 124
1283: PPUSH
1284: LD_INT 120
1286: PPUSH
1287: LD_INT 1
1289: PPUSH
1290: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_INT 18
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 517
1309: ST_TO_ADDR
// for i := 1 to 4 do
1310: LD_ADDR_VAR 0 2
1314: PUSH
1315: DOUBLE
1316: LD_INT 1
1318: DEC
1319: ST_TO_ADDR
1320: LD_INT 4
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1432
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1326: LD_INT 1
1328: PPUSH
1329: LD_INT 1
1331: PUSH
1332: LD_INT 3
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 1
1341: PPUSH
1342: LD_INT 2
1344: PPUSH
1345: CALL_OW 12
1349: ARRAY
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 380
// un := CreateHuman ;
1358: LD_ADDR_VAR 0 3
1362: PUSH
1363: CALL_OW 44
1367: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1368: LD_VAR 0 3
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 5
1378: PPUSH
1379: CALL_OW 12
1383: PPUSH
1384: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1388: LD_VAR 0 3
1392: PPUSH
1393: LD_VAR 0 5
1397: PUSH
1398: LD_INT 1
1400: ARRAY
1401: PUSH
1402: LD_VAR 0 2
1406: ARRAY
1407: PPUSH
1408: LD_VAR 0 5
1412: PUSH
1413: LD_INT 2
1415: ARRAY
1416: PUSH
1417: LD_VAR 0 2
1421: ARRAY
1422: PPUSH
1423: LD_INT 1
1425: PPUSH
1426: CALL_OW 601
// end ;
1430: GO 1323
1432: POP
1433: POP
// end ;
1434: LD_VAR 0 1
1438: RET
// export function ChangeSideKappaBase ; begin
1439: LD_INT 0
1441: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1442: LD_INT 70
1444: PPUSH
1445: LD_INT 138
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: LD_INT 80
1453: NEG
1454: PPUSH
1455: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1459: LD_INT 70
1461: PPUSH
1462: LD_INT 138
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1472: LD_INT 147
1474: PPUSH
1475: LD_INT 122
1477: PPUSH
1478: LD_INT 1
1480: PPUSH
1481: LD_INT 40
1483: NEG
1484: PPUSH
1485: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1489: LD_INT 147
1491: PPUSH
1492: LD_INT 122
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1502: LD_INT 22
1504: PUSH
1505: LD_INT 4
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: PPUSH
1517: LD_INT 1
1519: PPUSH
1520: CALL_OW 235
// end ; end_of_file
1524: LD_VAR 0 1
1528: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1529: LD_INT 0
1531: PPUSH
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side := 3 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 3
1544: ST_TO_ADDR
// uc_nation := 3 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1553: LD_ADDR_EXP 15
1557: PUSH
1558: LD_INT 8
1560: PUSH
1561: LD_INT 11
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: LD_INT 17
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_OWVAR 67
1580: ARRAY
1581: ST_TO_ADDR
// ruMobile := [ ] ;
1582: LD_ADDR_EXP 16
1586: PUSH
1587: EMPTY
1588: ST_TO_ADDR
// ruBuildList := [ ] ;
1589: LD_ADDR_EXP 17
1593: PUSH
1594: EMPTY
1595: ST_TO_ADDR
// ruAttackers := [ ] ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: EMPTY
1602: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1603: LD_ADDR_EXP 19
1607: PUSH
1608: LD_INT 3
1610: PPUSH
1611: LD_INT 3
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: CALL 32815 0 3
1621: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1622: LD_ADDR_VAR 0 6
1626: PUSH
1627: LD_INT 43
1629: PUSH
1630: LD_INT 46
1632: PUSH
1633: LD_INT 45
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1641: LD_ADDR_EXP 20
1645: PUSH
1646: LD_INT 46
1648: PUSH
1649: LD_INT 70
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 121
1658: PUSH
1659: LD_INT 95
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 68
1668: PUSH
1669: LD_INT 65
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: ST_TO_ADDR
// if not russianRocketsDisabled then
1681: LD_EXP 6
1685: NOT
1686: IFFALSE 1702
// weapons := weapons ^ ru_rocket ;
1688: LD_ADDR_VAR 0 6
1692: PUSH
1693: LD_VAR 0 6
1697: PUSH
1698: LD_INT 47
1700: ADD
1701: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1702: LD_ADDR_EXP 14
1706: PUSH
1707: LD_STRING Eisenstein
1709: PPUSH
1710: CALL_OW 25
1714: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1715: LD_EXP 14
1719: PPUSH
1720: LD_INT 22
1722: PPUSH
1723: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 2250 , 3500 , 4500 , 5600 ] [ Difficulty ] ) ;
1727: LD_INT 22
1729: PPUSH
1730: CALL_OW 274
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 2250
1740: PUSH
1741: LD_INT 3500
1743: PUSH
1744: LD_INT 4500
1746: PUSH
1747: LD_INT 5600
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_OWVAR 67
1760: ARRAY
1761: PPUSH
1762: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1766: LD_INT 22
1768: PPUSH
1769: CALL_OW 274
1773: PPUSH
1774: LD_INT 2
1776: PPUSH
1777: LD_INT 600
1779: PPUSH
1780: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1784: LD_INT 22
1786: PPUSH
1787: CALL_OW 274
1791: PPUSH
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 100
1797: PPUSH
1798: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1802: LD_INT 116
1804: PPUSH
1805: LD_INT 46
1807: PPUSH
1808: LD_INT 70
1810: PPUSH
1811: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1815: LD_ADDR_VAR 0 2
1819: PUSH
1820: LD_INT 22
1822: PUSH
1823: LD_INT 3
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 21
1832: PUSH
1833: LD_INT 3
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PPUSH
1844: CALL_OW 69
1848: PUSH
1849: FOR_IN
1850: IFFALSE 1872
// SetBLevel ( i , 6 + Difficulty ) ;
1852: LD_VAR 0 2
1856: PPUSH
1857: LD_INT 6
1859: PUSH
1860: LD_OWVAR 67
1864: PLUS
1865: PPUSH
1866: CALL_OW 241
1870: GO 1849
1872: POP
1873: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: LD_INT 22
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 30
1894: PUSH
1895: LD_INT 32
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 30
1904: PUSH
1905: LD_INT 33
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: ST_TO_ADDR
// if russianRocketsDisabled then
1926: LD_EXP 6
1930: IFFALSE 2006
// begin ruTechList := ruTechList diff tech_advrocket ;
1932: LD_ADDR_EXP 19
1936: PUSH
1937: LD_EXP 19
1941: PUSH
1942: LD_INT 71
1944: DIFF
1945: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1946: LD_ADDR_VAR 0 2
1950: PUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 35
1958: PUSH
1959: LD_INT 47
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PPUSH
1966: CALL_OW 72
1970: PUSH
1971: FOR_IN
1972: IFFALSE 2004
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_VAR 0 6
1983: PUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_VAR 0 6
1991: PPUSH
1992: CALL_OW 12
1996: ARRAY
1997: PPUSH
1998: CALL_OW 431
2002: GO 1971
2004: POP
2005: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2006: LD_ADDR_VAR 0 2
2010: PUSH
2011: LD_INT 22
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 30
2023: PUSH
2024: LD_INT 32
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PPUSH
2035: CALL_OW 69
2039: PUSH
2040: FOR_IN
2041: IFFALSE 2090
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2043: LD_INT 0
2045: PPUSH
2046: LD_INT 5
2048: PUSH
2049: LD_INT 6
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: LD_INT 8
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: LD_OWVAR 67
2068: ARRAY
2069: PPUSH
2070: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2074: CALL_OW 44
2078: PPUSH
2079: LD_VAR 0 2
2083: PPUSH
2084: CALL_OW 52
// end ;
2088: GO 2040
2090: POP
2091: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2092: LD_ADDR_VAR 0 2
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 3
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 69
2125: PUSH
2126: FOR_IN
2127: IFFALSE 2261
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: DOUBLE
2135: LD_INT 1
2137: DEC
2138: ST_TO_ADDR
2139: LD_INT 2
2141: PUSH
2142: LD_INT 2
2144: PUSH
2145: LD_INT 3
2147: PUSH
2148: LD_INT 3
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: PUSH
2157: LD_OWVAR 67
2161: ARRAY
2162: PUSH
2163: FOR_TO
2164: IFFALSE 2257
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2166: LD_INT 0
2168: PPUSH
2169: LD_INT 5
2171: PUSH
2172: LD_INT 6
2174: PUSH
2175: LD_INT 7
2177: PUSH
2178: LD_INT 8
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_OWVAR 67
2191: ARRAY
2192: PPUSH
2193: CALL_OW 381
// un := CreateHuman ;
2197: LD_ADDR_VAR 0 5
2201: PUSH
2202: CALL_OW 44
2206: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2207: LD_VAR 0 5
2211: PPUSH
2212: LD_VAR 0 2
2216: PPUSH
2217: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_INT 9
2228: PPUSH
2229: CALL_OW 336
// if j = 2 then
2233: LD_VAR 0 3
2237: PUSH
2238: LD_INT 2
2240: EQUAL
2241: IFFALSE 2255
// SetUnitAttackType ( un , 3 ) ;
2243: LD_VAR 0 5
2247: PPUSH
2248: LD_INT 3
2250: PPUSH
2251: CALL_OW 603
// end ;
2255: GO 2163
2257: POP
2258: POP
// end ;
2259: GO 2126
2261: POP
2262: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2263: LD_ADDR_VAR 0 2
2267: PUSH
2268: DOUBLE
2269: LD_INT 1
2271: DEC
2272: ST_TO_ADDR
2273: LD_INT 5
2275: PUSH
2276: LD_INT 6
2278: PUSH
2279: LD_INT 6
2281: PUSH
2282: LD_INT 6
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_OWVAR 67
2295: ARRAY
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2345
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2300: LD_INT 0
2302: PPUSH
2303: LD_INT 6
2305: PUSH
2306: LD_INT 7
2308: PUSH
2309: LD_INT 9
2311: PUSH
2312: LD_INT 10
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: PUSH
2321: LD_OWVAR 67
2325: ARRAY
2326: PPUSH
2327: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2331: CALL_OW 44
2335: PPUSH
2336: LD_INT 22
2338: PPUSH
2339: CALL_OW 52
// end ;
2343: GO 2297
2345: POP
2346: POP
// for i := 1 to 2 do
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: DOUBLE
2353: LD_INT 1
2355: DEC
2356: ST_TO_ADDR
2357: LD_INT 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2441
// for j := 1 to 6 do
2363: LD_ADDR_VAR 0 3
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_INT 6
2375: PUSH
2376: FOR_TO
2377: IFFALSE 2437
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2379: LD_INT 0
2381: PPUSH
2382: LD_INT 6
2384: PUSH
2385: LD_INT 7
2387: PUSH
2388: LD_INT 9
2390: PUSH
2391: LD_INT 10
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: PUSH
2400: LD_OWVAR 67
2404: ARRAY
2405: PPUSH
2406: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2410: CALL_OW 44
2414: PPUSH
2415: LD_INT 1
2417: PUSH
2418: LD_INT 40
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: LD_VAR 0 2
2429: ARRAY
2430: PPUSH
2431: CALL_OW 52
// end ;
2435: GO 2376
2437: POP
2438: POP
2439: GO 2360
2441: POP
2442: POP
// for i := 1 to 4 do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: DOUBLE
2449: LD_INT 1
2451: DEC
2452: ST_TO_ADDR
2453: LD_INT 4
2455: PUSH
2456: FOR_TO
2457: IFFALSE 2504
// begin PrepareScientist ( false , 6 ) ;
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 6
2464: PPUSH
2465: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2469: CALL_OW 44
2473: PPUSH
2474: LD_INT 14
2476: PUSH
2477: LD_INT 15
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 2
2491: MOD
2492: PUSH
2493: LD_INT 1
2495: PLUS
2496: ARRAY
2497: PPUSH
2498: CALL_OW 52
// end ;
2502: GO 2456
2504: POP
2505: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2506: LD_INT 22
2508: PPUSH
2509: LD_INT 3
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: LD_INT 51
2517: PPUSH
2518: LD_INT 100
2520: PPUSH
2521: CALL 37592 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2525: CALL_OW 45
2529: PPUSH
2530: LD_INT 116
2532: PPUSH
2533: LD_INT 58
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: CALL_OW 50
// for i := 1 to 2 do
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: DOUBLE
2552: LD_INT 1
2554: DEC
2555: ST_TO_ADDR
2556: LD_INT 2
2558: PUSH
2559: FOR_TO
2560: IFFALSE 2604
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2562: LD_INT 22
2564: PPUSH
2565: LD_INT 3
2567: PPUSH
2568: LD_INT 3
2570: PPUSH
2571: LD_INT 52
2573: PPUSH
2574: LD_INT 100
2576: PPUSH
2577: CALL 37592 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2581: CALL_OW 45
2585: PPUSH
2586: LD_INT 111
2588: PPUSH
2589: LD_INT 58
2591: PPUSH
2592: LD_INT 4
2594: PPUSH
2595: LD_INT 0
2597: PPUSH
2598: CALL_OW 50
// end ;
2602: GO 2559
2604: POP
2605: POP
// for i := 1 to 4 do
2606: LD_ADDR_VAR 0 2
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_INT 4
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2649
// begin PrepareApemanEngineer ( ) ;
2622: CALL 66632 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2626: CALL_OW 44
2630: PPUSH
2631: LD_INT 118
2633: PPUSH
2634: LD_INT 50
2636: PPUSH
2637: LD_INT 3
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: CALL_OW 50
// end ;
2647: GO 2619
2649: POP
2650: POP
// end ;
2651: LD_VAR 0 1
2655: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2656: LD_EXP 19
2660: IFFALSE 2788
2662: GO 2664
2664: DISABLE
2665: LD_INT 0
2667: PPUSH
2668: PPUSH
2669: PPUSH
// begin enable ;
2670: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: LD_INT 14
2678: PUSH
2679: LD_INT 15
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PPUSH
2686: LD_INT 50
2688: PUSH
2689: EMPTY
2690: LIST
2691: PPUSH
2692: CALL_OW 72
2696: ST_TO_ADDR
// if not labs then
2697: LD_VAR 0 3
2701: NOT
2702: IFFALSE 2707
// begin disable ;
2704: DISABLE
// exit ;
2705: GO 2788
// end ; for i in labs do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_VAR 0 3
2716: PUSH
2717: FOR_IN
2718: IFFALSE 2786
// if BuildingStatus ( i ) = bs_idle then
2720: LD_VAR 0 1
2724: PPUSH
2725: CALL_OW 461
2729: PUSH
2730: LD_INT 2
2732: EQUAL
2733: IFFALSE 2784
// for t in ruTechList do
2735: LD_ADDR_VAR 0 2
2739: PUSH
2740: LD_EXP 19
2744: PUSH
2745: FOR_IN
2746: IFFALSE 2782
// if CanBeResearched ( i , t ) then
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL_OW 430
2762: IFFALSE 2780
// begin ComResearch ( i , t ) ;
2764: LD_VAR 0 1
2768: PPUSH
2769: LD_VAR 0 2
2773: PPUSH
2774: CALL_OW 124
// break ;
2778: GO 2782
// end ;
2780: GO 2745
2782: POP
2783: POP
2784: GO 2717
2786: POP
2787: POP
// end ;
2788: PPOPN 3
2790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2791: LD_INT 3
2793: PUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 1
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: EMPTY
2805: LIST
2806: LIST
2807: PUSH
2808: LD_INT 32
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PPUSH
2822: CALL_OW 69
2826: IFFALSE 2910
2828: GO 2830
2830: DISABLE
2831: LD_INT 0
2833: PPUSH
// begin enable ;
2834: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2835: LD_ADDR_VAR 0 1
2839: PUSH
2840: LD_INT 3
2842: PUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 1
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 32
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PPUSH
2871: CALL_OW 69
2875: PUSH
2876: FOR_IN
2877: IFFALSE 2908
// if GetFuel ( i ) < 3 then
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL_OW 261
2888: PUSH
2889: LD_INT 3
2891: LESS
2892: IFFALSE 2906
// SetFuel ( i , 3 ) ;
2894: LD_VAR 0 1
2898: PPUSH
2899: LD_INT 3
2901: PPUSH
2902: CALL_OW 240
2906: GO 2876
2908: POP
2909: POP
// end ;
2910: PPOPN 1
2912: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ [ f_not , [ f_empty ] ] , [ f_ok ] ] ) and ruAttackers < [ 6 , 8 , 10 , 12 ] [ Difficulty ] do var i , chassis , weapon ;
2913: LD_INT 1
2915: PUSH
2916: LD_INT 40
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PPUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 58
2928: PUSH
2929: EMPTY
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: LD_INT 50
2938: PUSH
2939: EMPTY
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PPUSH
2946: CALL_OW 72
2950: PUSH
2951: LD_EXP 18
2955: PUSH
2956: LD_INT 6
2958: PUSH
2959: LD_INT 8
2961: PUSH
2962: LD_INT 10
2964: PUSH
2965: LD_INT 12
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: PUSH
2974: LD_OWVAR 67
2978: ARRAY
2979: LESS
2980: AND
2981: IFFALSE 3318
2983: GO 2985
2985: DISABLE
2986: LD_INT 0
2988: PPUSH
2989: PPUSH
2990: PPUSH
// begin enable ;
2991: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
2992: LD_ADDR_VAR 0 1
2996: PUSH
2997: LD_INT 1
2999: PUSH
3000: LD_INT 40
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PPUSH
3007: LD_INT 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: PPUSH
3013: CALL_OW 72
3017: PUSH
3018: FOR_IN
3019: IFFALSE 3316
// begin if BuildingStatus ( i ) <> bs_idle then
3021: LD_VAR 0 1
3025: PPUSH
3026: CALL_OW 461
3030: PUSH
3031: LD_INT 2
3033: NONEQUAL
3034: IFFALSE 3038
// continue ;
3036: GO 3018
// if i = ruFac1 then
3038: LD_VAR 0 1
3042: PUSH
3043: LD_INT 1
3045: EQUAL
3046: IFFALSE 3089
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3048: LD_ADDR_VAR 0 2
3052: PUSH
3053: LD_INT 21
3055: PUSH
3056: LD_INT 22
3058: PUSH
3059: LD_INT 23
3061: PUSH
3062: LD_INT 23
3064: PUSH
3065: LD_INT 24
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: PUSH
3075: LD_INT 1
3077: PPUSH
3078: LD_INT 5
3080: PPUSH
3081: CALL_OW 12
3085: ARRAY
3086: ST_TO_ADDR
3087: GO 3116
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: LD_INT 21
3096: PUSH
3097: LD_INT 23
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 2
3109: PPUSH
3110: CALL_OW 12
3114: ARRAY
3115: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_INT 49
3123: PUSH
3124: LD_INT 44
3126: PUSH
3127: LD_INT 43
3129: PUSH
3130: LD_INT 46
3132: PUSH
3133: LD_INT 45
3135: PUSH
3136: LD_INT 46
3138: PUSH
3139: LD_INT 45
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: ST_TO_ADDR
// if not russianRocketsDisabled then
3151: LD_EXP 6
3155: NOT
3156: IFFALSE 3176
// weapon := Join ( weapon , ru_rocket ) ;
3158: LD_ADDR_VAR 0 3
3162: PUSH
3163: LD_VAR 0 3
3167: PPUSH
3168: LD_INT 47
3170: PPUSH
3171: CALL 70463 0 2
3175: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , Count ( weapon ) ) ] ;
3176: LD_ADDR_VAR 0 3
3180: PUSH
3181: LD_VAR 0 3
3185: PUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_VAR 0 3
3193: PPUSH
3194: CALL 34854 0 1
3198: PPUSH
3199: CALL_OW 12
3203: ARRAY
3204: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3205: LD_VAR 0 2
3209: PUSH
3210: LD_INT 21
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: IN
3220: PUSH
3221: LD_VAR 0 3
3225: PUSH
3226: LD_INT 46
3228: PUSH
3229: LD_INT 47
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: IN
3236: AND
3237: IFFALSE 3270
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3239: LD_ADDR_VAR 0 3
3243: PUSH
3244: LD_INT 44
3246: PUSH
3247: LD_INT 45
3249: PUSH
3250: LD_INT 49
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 1
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: CALL_OW 12
3268: ARRAY
3269: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3270: LD_VAR 0 1
3274: PPUSH
3275: LD_VAR 0 2
3279: PPUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 3
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 2
3295: PPUSH
3296: CALL_OW 12
3300: ARRAY
3301: PPUSH
3302: LD_INT 3
3304: PPUSH
3305: LD_VAR 0 3
3309: PPUSH
3310: CALL_OW 185
// end ;
3314: GO 3018
3316: POP
3317: POP
// end ;
3318: PPOPN 3
3320: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3321: LD_INT 22
3323: PPUSH
3324: CALL_OW 302
3328: IFFALSE 4185
3330: GO 3332
3332: DISABLE
3333: LD_INT 0
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
3339: PPUSH
3340: PPUSH
3341: PPUSH
3342: PPUSH
// begin enable ;
3343: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3344: LD_ADDR_VAR 0 3
3348: PUSH
3349: LD_INT 12
3351: PPUSH
3352: LD_INT 3
3354: PUSH
3355: LD_INT 24
3357: PUSH
3358: LD_INT 1000
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 21
3371: PUSH
3372: LD_INT 3
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 70
3387: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3388: LD_ADDR_VAR 0 4
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 25
3405: PUSH
3406: LD_INT 2
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 69
3421: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3422: LD_ADDR_VAR 0 5
3426: PUSH
3427: LD_INT 22
3429: PUSH
3430: LD_INT 3
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 34
3439: PUSH
3440: LD_INT 52
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3456: LD_ADDR_VAR 0 7
3460: PUSH
3461: LD_INT 22
3463: PUSH
3464: LD_INT 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 25
3473: PUSH
3474: LD_INT 4
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3490: LD_ADDR_VAR 0 8
3494: PUSH
3495: LD_INT 14
3497: PUSH
3498: LD_INT 15
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3505: LD_VAR 0 7
3509: PUSH
3510: LD_VAR 0 4
3514: PPUSH
3515: LD_INT 120
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PPUSH
3525: CALL_OW 72
3529: AND
3530: IFFALSE 3543
// ComExitAll ( sci ) else
3532: LD_VAR 0 7
3536: PPUSH
3537: CALL 70944 0 1
3541: GO 3625
// if sci then
3543: LD_VAR 0 7
3547: IFFALSE 3625
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3549: LD_VAR 0 7
3553: PPUSH
3554: LD_INT 3
3556: PUSH
3557: LD_INT 54
3559: PUSH
3560: EMPTY
3561: LIST
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: PPUSH
3567: CALL_OW 72
3571: PUSH
3572: LD_VAR 0 8
3576: AND
3577: IFFALSE 3625
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3579: LD_VAR 0 7
3583: PPUSH
3584: LD_INT 3
3586: PUSH
3587: LD_INT 54
3589: PUSH
3590: EMPTY
3591: LIST
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PPUSH
3597: CALL_OW 72
3601: PPUSH
3602: LD_VAR 0 8
3606: PUSH
3607: LD_INT 1
3609: PPUSH
3610: LD_VAR 0 8
3614: PPUSH
3615: CALL_OW 12
3619: ARRAY
3620: PPUSH
3621: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3625: LD_VAR 0 5
3629: PPUSH
3630: LD_INT 50
3632: PUSH
3633: EMPTY
3634: LIST
3635: PPUSH
3636: CALL_OW 72
3640: PUSH
3641: LD_VAR 0 3
3645: AND
3646: IFFALSE 3687
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3648: LD_VAR 0 5
3652: PPUSH
3653: LD_INT 50
3655: PUSH
3656: EMPTY
3657: LIST
3658: PPUSH
3659: CALL_OW 72
3663: PPUSH
3664: LD_VAR 0 3
3668: PPUSH
3669: LD_VAR 0 5
3673: PUSH
3674: LD_INT 1
3676: ARRAY
3677: PPUSH
3678: CALL_OW 74
3682: PPUSH
3683: CALL_OW 130
// if eng then
3687: LD_VAR 0 4
3691: IFFALSE 4185
// begin for i in eng do
3693: LD_ADDR_VAR 0 1
3697: PUSH
3698: LD_VAR 0 4
3702: PUSH
3703: FOR_IN
3704: IFFALSE 4183
// begin tag := GetTag ( i ) ;
3706: LD_ADDR_VAR 0 6
3710: PUSH
3711: LD_VAR 0 1
3715: PPUSH
3716: CALL_OW 110
3720: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3721: LD_VAR 0 3
3725: NOT
3726: PUSH
3727: LD_EXP 17
3731: NOT
3732: AND
3733: PUSH
3734: LD_VAR 0 6
3738: PUSH
3739: LD_INT 1
3741: EQUAL
3742: AND
3743: IFFALSE 3769
// begin SetTag ( i , 0 ) ;
3745: LD_VAR 0 1
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3757: LD_VAR 0 1
3761: PPUSH
3762: LD_INT 22
3764: PPUSH
3765: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3769: LD_VAR 0 3
3773: PUSH
3774: LD_EXP 17
3778: OR
3779: PUSH
3780: LD_VAR 0 6
3784: PUSH
3785: LD_INT 0
3787: EQUAL
3788: AND
3789: IFFALSE 3803
// SetTag ( i , 1 ) ;
3791: LD_VAR 0 1
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 310
3812: PUSH
3813: LD_VAR 0 6
3817: PUSH
3818: LD_INT 1
3820: EQUAL
3821: AND
3822: IFFALSE 3833
// ComExit ( i ) ;
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL 70861 0 1
// if GetLives ( i ) < 700 and tag = 1 then
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 256
3842: PUSH
3843: LD_INT 700
3845: LESS
3846: PUSH
3847: LD_VAR 0 6
3851: PUSH
3852: LD_INT 1
3854: EQUAL
3855: AND
3856: IFFALSE 3870
// SetTag ( i , 2 ) ;
3858: LD_VAR 0 1
3862: PPUSH
3863: LD_INT 2
3865: PPUSH
3866: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 256
3879: PUSH
3880: LD_INT 1000
3882: EQUAL
3883: PUSH
3884: LD_VAR 0 6
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: AND
3893: IFFALSE 3907
// SetTag ( i , 1 ) ;
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 109
// if tag = 2 then
3907: LD_VAR 0 6
3911: PUSH
3912: LD_INT 2
3914: EQUAL
3915: IFFALSE 3962
// begin if GetDistUnitXY ( i , 110 , 41 ) > 6 then
3917: LD_VAR 0 1
3921: PPUSH
3922: LD_INT 110
3924: PPUSH
3925: LD_INT 41
3927: PPUSH
3928: CALL_OW 297
3932: PUSH
3933: LD_INT 6
3935: GREATER
3936: IFFALSE 3962
// begin ComMoveXY ( i , 110 , 41 ) ;
3938: LD_VAR 0 1
3942: PPUSH
3943: LD_INT 110
3945: PPUSH
3946: LD_INT 41
3948: PPUSH
3949: CALL_OW 111
// AddComHold ( i ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 11
3969: PPUSH
3970: CALL_OW 308
3974: IFFALSE 3988
// ComMoveToArea ( i , ruBaseArea ) ;
3976: LD_VAR 0 1
3980: PPUSH
3981: LD_INT 12
3983: PPUSH
3984: CALL_OW 113
// if tag = 1 then
3988: LD_VAR 0 6
3992: PUSH
3993: LD_INT 1
3995: EQUAL
3996: IFFALSE 4181
// begin if b then
3998: LD_VAR 0 3
4002: IFFALSE 4030
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
4004: LD_VAR 0 1
4008: PPUSH
4009: LD_VAR 0 3
4013: PPUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: CALL_OW 74
4023: PPUSH
4024: CALL_OW 130
4028: GO 4181
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
4030: LD_EXP 17
4034: PUSH
4035: LD_INT 11
4037: PPUSH
4038: LD_INT 81
4040: PUSH
4041: LD_INT 3
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 70
4052: PUSH
4053: LD_INT 0
4055: EQUAL
4056: AND
4057: PUSH
4058: LD_INT 22
4060: PPUSH
4061: LD_EXP 17
4065: PUSH
4066: LD_INT 1
4068: ARRAY
4069: PUSH
4070: LD_INT 1
4072: ARRAY
4073: PPUSH
4074: LD_EXP 17
4078: PUSH
4079: LD_INT 1
4081: ARRAY
4082: PUSH
4083: LD_INT 2
4085: ARRAY
4086: PPUSH
4087: LD_EXP 17
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 3
4098: ARRAY
4099: PPUSH
4100: LD_EXP 17
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PUSH
4109: LD_INT 4
4111: ARRAY
4112: PPUSH
4113: CALL 46188 0 5
4117: AND
4118: IFFALSE 4181
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4120: LD_VAR 0 1
4124: PPUSH
4125: LD_EXP 17
4129: PUSH
4130: LD_INT 1
4132: ARRAY
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: PPUSH
4138: LD_EXP 17
4142: PUSH
4143: LD_INT 1
4145: ARRAY
4146: PUSH
4147: LD_INT 2
4149: ARRAY
4150: PPUSH
4151: LD_EXP 17
4155: PUSH
4156: LD_INT 1
4158: ARRAY
4159: PUSH
4160: LD_INT 3
4162: ARRAY
4163: PPUSH
4164: LD_EXP 17
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PUSH
4173: LD_INT 4
4175: ARRAY
4176: PPUSH
4177: CALL_OW 145
// end ; end ;
4181: GO 3703
4183: POP
4184: POP
// end ; end ;
4185: PPOPN 8
4187: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4188: LD_INT 22
4190: PUSH
4191: LD_INT 3
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 3
4200: PUSH
4201: LD_INT 60
4203: PUSH
4204: EMPTY
4205: LIST
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 50
4213: PUSH
4214: EMPTY
4215: LIST
4216: PUSH
4217: LD_INT 25
4219: PUSH
4220: LD_INT 16
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: PPUSH
4233: CALL_OW 69
4237: PUSH
4238: LD_INT 14
4240: PPUSH
4241: CALL_OW 435
4245: AND
4246: IFFALSE 4358
4248: GO 4250
4250: DISABLE
4251: LD_INT 0
4253: PPUSH
4254: PPUSH
// begin enable ;
4255: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4256: LD_ADDR_VAR 0 2
4260: PUSH
4261: LD_INT 14
4263: PPUSH
4264: CALL_OW 435
4268: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4269: LD_ADDR_VAR 0 1
4273: PUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 3
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 3
4286: PUSH
4287: LD_INT 60
4289: PUSH
4290: EMPTY
4291: LIST
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 50
4299: PUSH
4300: EMPTY
4301: LIST
4302: PUSH
4303: LD_INT 25
4305: PUSH
4306: LD_INT 16
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PUSH
4324: FOR_IN
4325: IFFALSE 4356
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4327: LD_VAR 0 1
4331: PPUSH
4332: LD_VAR 0 2
4336: PUSH
4337: LD_INT 1
4339: ARRAY
4340: PPUSH
4341: LD_VAR 0 2
4345: PUSH
4346: LD_INT 2
4348: ARRAY
4349: PPUSH
4350: CALL_OW 117
4354: GO 4324
4356: POP
4357: POP
// end ;
4358: PPOPN 2
4360: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4361: LD_INT 22
4363: PUSH
4364: LD_INT 3
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 60
4376: PUSH
4377: EMPTY
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 50
4386: PUSH
4387: EMPTY
4388: LIST
4389: PUSH
4390: LD_INT 34
4392: PUSH
4393: LD_INT 51
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 69
4410: PUSH
4411: LD_INT 13
4413: PPUSH
4414: CALL_OW 435
4418: AND
4419: IFFALSE 4531
4421: GO 4423
4423: DISABLE
4424: LD_INT 0
4426: PPUSH
4427: PPUSH
// begin enable ;
4428: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_INT 13
4436: PPUSH
4437: CALL_OW 435
4441: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4442: LD_ADDR_VAR 0 1
4446: PUSH
4447: LD_INT 22
4449: PUSH
4450: LD_INT 3
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: LD_INT 60
4462: PUSH
4463: EMPTY
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 50
4472: PUSH
4473: EMPTY
4474: LIST
4475: PUSH
4476: LD_INT 34
4478: PUSH
4479: LD_INT 51
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PPUSH
4492: CALL_OW 69
4496: PUSH
4497: FOR_IN
4498: IFFALSE 4529
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_VAR 0 2
4509: PUSH
4510: LD_INT 1
4512: ARRAY
4513: PPUSH
4514: LD_VAR 0 2
4518: PUSH
4519: LD_INT 2
4521: ARRAY
4522: PPUSH
4523: CALL_OW 117
4527: GO 4497
4529: POP
4530: POP
// end ;
4531: PPOPN 2
4533: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4534: LD_OWVAR 67
4538: PUSH
4539: LD_INT 1
4541: GREATER
4542: PUSH
4543: LD_INT 1
4545: PPUSH
4546: CALL_OW 302
4550: AND
4551: IFFALSE 4709
4553: GO 4555
4555: DISABLE
4556: LD_INT 0
4558: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4559: LD_ADDR_VAR 0 1
4563: PUSH
4564: DOUBLE
4565: LD_INT 1
4567: DEC
4568: ST_TO_ADDR
4569: LD_INT 3
4571: PUSH
4572: LD_INT 4
4574: PUSH
4575: LD_INT 5
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: LD_OWVAR 67
4587: PUSH
4588: LD_INT 1
4590: MINUS
4591: ARRAY
4592: PUSH
4593: FOR_TO
4594: IFFALSE 4638
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4596: LD_INT 1
4598: PUSH
4599: LD_INT 40
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_VAR 0 1
4610: PUSH
4611: LD_INT 2
4613: MOD
4614: PUSH
4615: LD_INT 1
4617: PLUS
4618: ARRAY
4619: PPUSH
4620: LD_INT 21
4622: PPUSH
4623: LD_INT 3
4625: PPUSH
4626: LD_INT 1
4628: PPUSH
4629: LD_INT 45
4631: PPUSH
4632: CALL_OW 185
// end ;
4636: GO 4593
4638: POP
4639: POP
// repeat wait ( 6 6$00 ) ;
4640: LD_INT 12600
4642: PPUSH
4643: CALL_OW 67
// for i := 1 to 2 do
4647: LD_ADDR_VAR 0 1
4651: PUSH
4652: DOUBLE
4653: LD_INT 1
4655: DEC
4656: ST_TO_ADDR
4657: LD_INT 2
4659: PUSH
4660: FOR_TO
4661: IFFALSE 4684
// AddComConstruct ( ruFac1 , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4663: LD_INT 1
4665: PPUSH
4666: LD_INT 21
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 45
4677: PPUSH
4678: CALL_OW 185
4682: GO 4660
4684: POP
4685: POP
// until not IsOk ( ruFac1 ) or UnitsInside ( ruFac1 ) = 0 ;
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 302
4693: NOT
4694: PUSH
4695: LD_INT 1
4697: PPUSH
4698: CALL_OW 313
4702: PUSH
4703: LD_INT 0
4705: EQUAL
4706: OR
4707: IFFALSE 4640
// end ;
4709: PPOPN 1
4711: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4712: LD_EXP 16
4716: IFFALSE 5302
4718: GO 4720
4720: DISABLE
4721: LD_INT 0
4723: PPUSH
4724: PPUSH
4725: PPUSH
// begin enable ;
4726: ENABLE
// if not ruMobile then
4727: LD_EXP 16
4731: NOT
4732: IFFALSE 4736
// exit ;
4734: GO 5302
// for i in ruMobile do
4736: LD_ADDR_VAR 0 1
4740: PUSH
4741: LD_EXP 16
4745: PUSH
4746: FOR_IN
4747: IFFALSE 5300
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4749: LD_VAR 0 1
4753: PPUSH
4754: CALL_OW 302
4758: NOT
4759: PUSH
4760: LD_VAR 0 1
4764: PPUSH
4765: CALL_OW 255
4769: PUSH
4770: LD_INT 3
4772: NONEQUAL
4773: OR
4774: IFFALSE 4794
// begin ruMobile := ruMobile diff i ;
4776: LD_ADDR_EXP 16
4780: PUSH
4781: LD_EXP 16
4785: PUSH
4786: LD_VAR 0 1
4790: DIFF
4791: ST_TO_ADDR
// continue ;
4792: GO 4746
// end ; if GetTag ( i ) = 300 then
4794: LD_VAR 0 1
4798: PPUSH
4799: CALL_OW 110
4803: PUSH
4804: LD_INT 300
4806: EQUAL
4807: IFFALSE 4937
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4809: LD_VAR 0 1
4813: PPUSH
4814: CALL_OW 261
4818: PUSH
4819: LD_INT 50
4821: LESS
4822: PUSH
4823: LD_VAR 0 1
4827: PPUSH
4828: CALL_OW 262
4832: PUSH
4833: LD_INT 1
4835: EQUAL
4836: AND
4837: IFFALSE 4896
// begin ComMoveXY ( i , 120 , 58 ) ;
4839: LD_VAR 0 1
4843: PPUSH
4844: LD_INT 120
4846: PPUSH
4847: LD_INT 58
4849: PPUSH
4850: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4854: LD_INT 35
4856: PPUSH
4857: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4861: LD_VAR 0 1
4865: PPUSH
4866: LD_INT 120
4868: PPUSH
4869: LD_INT 58
4871: PPUSH
4872: CALL_OW 297
4876: PUSH
4877: LD_INT 4
4879: LESS
4880: IFFALSE 4854
// SetFuel ( i , 100 ) ;
4882: LD_VAR 0 1
4886: PPUSH
4887: LD_INT 100
4889: PPUSH
4890: CALL_OW 240
// end else
4894: GO 4937
// if not IsInArea ( i , ruParkingArea ) then
4896: LD_VAR 0 1
4900: PPUSH
4901: LD_INT 10
4903: PPUSH
4904: CALL_OW 308
4908: NOT
4909: IFFALSE 4925
// ComMoveToArea ( i , ruParkingArea ) else
4911: LD_VAR 0 1
4915: PPUSH
4916: LD_INT 10
4918: PPUSH
4919: CALL_OW 113
4923: GO 4937
// SetTag ( i , 301 ) ;
4925: LD_VAR 0 1
4929: PPUSH
4930: LD_INT 301
4932: PPUSH
4933: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4937: LD_VAR 0 1
4941: PPUSH
4942: CALL_OW 110
4946: PUSH
4947: LD_INT 301
4949: EQUAL
4950: IFFALSE 5080
// begin if GetLives ( i ) < 1000 then
4952: LD_VAR 0 1
4956: PPUSH
4957: CALL_OW 256
4961: PUSH
4962: LD_INT 1000
4964: LESS
4965: IFFALSE 5057
// begin if not IsDrivenBy ( i ) then
4967: LD_VAR 0 1
4971: PPUSH
4972: CALL_OW 311
4976: NOT
4977: IFFALSE 4981
// continue ;
4979: GO 4746
// mech := IsDrivenBy ( i ) ;
4981: LD_ADDR_VAR 0 2
4985: PUSH
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 311
4995: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
4996: LD_VAR 0 2
5000: PPUSH
5001: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
5005: LD_VAR 0 2
5009: PPUSH
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5026: LD_VAR 0 1
5030: PPUSH
5031: CALL_OW 256
5035: PUSH
5036: LD_INT 1000
5038: EQUAL
5039: IFFALSE 5019
// ComEnterUnit ( mech , i ) ;
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL_OW 120
// end else
5055: GO 5080
// if IsDrivenBy ( i ) then
5057: LD_VAR 0 1
5061: PPUSH
5062: CALL_OW 311
5066: IFFALSE 5080
// SetTag ( i , 0 ) ;
5068: LD_VAR 0 1
5072: PPUSH
5073: LD_INT 0
5075: PPUSH
5076: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 110
5089: PUSH
5090: LD_INT 300
5092: LESS
5093: IFFALSE 5298
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: LD_INT 11
5102: PPUSH
5103: LD_INT 81
5105: PUSH
5106: LD_INT 3
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PPUSH
5113: CALL_OW 70
5117: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5118: LD_VAR 0 1
5122: PPUSH
5123: CALL_OW 256
5127: PUSH
5128: LD_INT 650
5130: LESS
5131: IFFALSE 5156
// begin ComStop ( i ) ;
5133: LD_VAR 0 1
5137: PPUSH
5138: CALL_OW 141
// SetTag ( i , 300 ) ;
5142: LD_VAR 0 1
5146: PPUSH
5147: LD_INT 300
5149: PPUSH
5150: CALL_OW 109
// continue ;
5154: GO 4746
// end ; if enemy then
5156: LD_VAR 0 3
5160: IFFALSE 5200
// begin if not HasTask ( i ) then
5162: LD_VAR 0 1
5166: PPUSH
5167: CALL_OW 314
5171: NOT
5172: IFFALSE 5198
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5174: LD_VAR 0 1
5178: PPUSH
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_VAR 0 1
5188: PPUSH
5189: CALL_OW 74
5193: PPUSH
5194: CALL_OW 115
// end else
5198: GO 5298
// if ruMobile then
5200: LD_EXP 16
5204: IFFALSE 5298
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5206: LD_ADDR_VAR 0 3
5210: PUSH
5211: LD_INT 81
5213: PUSH
5214: LD_INT 3
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: ST_TO_ADDR
// if enemy then
5226: LD_VAR 0 3
5230: IFFALSE 5298
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5232: LD_VAR 0 1
5236: PPUSH
5237: LD_INT 113
5239: PUSH
5240: LD_INT 80
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 118
5249: PUSH
5250: LD_INT 100
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: LD_INT 107
5259: PUSH
5260: LD_INT 102
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 114
5269: PUSH
5270: LD_INT 120
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 86
5279: PUSH
5280: LD_INT 116
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: PPUSH
5294: CALL 73073 0 2
// end ; end ; end ;
5298: GO 4746
5300: POP
5301: POP
// end ;
5302: PPOPN 3
5304: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5305: LD_EXP 18
5309: IFFALSE 5355
5311: GO 5313
5313: DISABLE
5314: LD_INT 0
5316: PPUSH
// begin enable ;
5317: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5318: LD_ADDR_VAR 0 1
5322: PUSH
5323: LD_EXP 18
5327: PPUSH
5328: LD_INT 50
5330: PUSH
5331: EMPTY
5332: LIST
5333: PPUSH
5334: CALL_OW 72
5338: ST_TO_ADDR
// ruAttackers := [ ] ;
5339: LD_ADDR_EXP 18
5343: PUSH
5344: EMPTY
5345: ST_TO_ADDR
// SendAttack ( tmp ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: CALL 5358 0 1
// end ;
5355: PPOPN 1
5357: END
// function SendAttack ( group ) ; var i , tmp ; begin
5358: LD_INT 0
5360: PPUSH
5361: PPUSH
5362: PPUSH
// for i in group do
5363: LD_ADDR_VAR 0 3
5367: PUSH
5368: LD_VAR 0 1
5372: PUSH
5373: FOR_IN
5374: IFFALSE 5440
// begin SetTag ( i , 0 ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: LD_INT 0
5383: PPUSH
5384: CALL_OW 109
// if Prob ( 30 ) then
5388: LD_INT 30
5390: PPUSH
5391: CALL_OW 13
5395: IFFALSE 5423
// begin SetTag ( i , 1 ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5409: LD_VAR 0 3
5413: PPUSH
5414: LD_INT 116
5416: PPUSH
5417: CALL_OW 120
// end else
5421: GO 5438
// ComAgressiveMove ( i , 118 , 93 ) ;
5423: LD_VAR 0 3
5427: PPUSH
5428: LD_INT 118
5430: PPUSH
5431: LD_INT 93
5433: PPUSH
5434: CALL_OW 114
// end ;
5438: GO 5373
5440: POP
5441: POP
// repeat wait ( 0 0$1 ) ;
5442: LD_INT 35
5444: PPUSH
5445: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5449: LD_ADDR_VAR 0 4
5453: PUSH
5454: LD_VAR 0 1
5458: PPUSH
5459: LD_INT 120
5461: PUSH
5462: LD_INT 0
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 72
5473: ST_TO_ADDR
// for i in tmp do
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: LD_VAR 0 4
5483: PUSH
5484: FOR_IN
5485: IFFALSE 5632
// begin if not IsOk ( i ) then
5487: LD_VAR 0 3
5491: PPUSH
5492: CALL_OW 302
5496: NOT
5497: IFFALSE 5517
// begin tmp := tmp diff i ;
5499: LD_ADDR_VAR 0 4
5503: PUSH
5504: LD_VAR 0 4
5508: PUSH
5509: LD_VAR 0 3
5513: DIFF
5514: ST_TO_ADDR
// continue ;
5515: GO 5484
// end ; if GetDistUnits ( i , usDep ) < 8 then
5517: LD_VAR 0 3
5521: PPUSH
5522: LD_INT 48
5524: PPUSH
5525: CALL_OW 296
5529: PUSH
5530: LD_INT 8
5532: LESS
5533: IFFALSE 5549
// begin ComAttackUnit ( i , usDep ) ;
5535: LD_VAR 0 3
5539: PPUSH
5540: LD_INT 48
5542: PPUSH
5543: CALL_OW 115
// continue ;
5547: GO 5484
// end ; if not See ( 1 , i ) then
5549: LD_INT 1
5551: PPUSH
5552: LD_VAR 0 3
5556: PPUSH
5557: CALL_OW 292
5561: NOT
5562: IFFALSE 5581
// ComAgressiveMove ( i , 86 , 116 ) else
5564: LD_VAR 0 3
5568: PPUSH
5569: LD_INT 86
5571: PPUSH
5572: LD_INT 116
5574: PPUSH
5575: CALL_OW 114
5579: GO 5630
// if GetWeapon ( i ) <> ru_time_lapser then
5581: LD_VAR 0 3
5585: PPUSH
5586: CALL_OW 264
5590: PUSH
5591: LD_INT 49
5593: NONEQUAL
5594: IFFALSE 5630
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5596: LD_VAR 0 3
5600: PPUSH
5601: LD_INT 81
5603: PUSH
5604: LD_INT 3
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PPUSH
5611: CALL_OW 69
5615: PPUSH
5616: LD_VAR 0 3
5620: PPUSH
5621: CALL_OW 74
5625: PPUSH
5626: CALL_OW 115
// end ;
5630: GO 5484
5632: POP
5633: POP
// until not tmp ;
5634: LD_VAR 0 4
5638: NOT
5639: IFFALSE 5442
// end ; end_of_file
5641: LD_VAR 0 2
5645: RET
// on UnitDestroyed ( unit ) do var i , tmp ;
5646: LD_INT 0
5648: PPUSH
5649: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5650: LD_VAR 0 1
5654: PPUSH
5655: CALL 27384 0 1
// if unit = JMM then
5659: LD_VAR 0 1
5663: PUSH
5664: LD_EXP 8
5668: EQUAL
5669: IFFALSE 5678
// YouLost ( JMM ) ;
5671: LD_STRING JMM
5673: PPUSH
5674: CALL_OW 104
// if GetSide ( unit ) = 4 then
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 255
5687: PUSH
5688: LD_INT 4
5690: EQUAL
5691: IFFALSE 5750
// begin if unit = Joan then
5693: LD_VAR 0 1
5697: PUSH
5698: LD_EXP 10
5702: EQUAL
5703: IFFALSE 5712
// YouLost ( Joan ) ;
5705: LD_STRING Joan
5707: PPUSH
5708: CALL_OW 104
// if unit = Connie then
5712: LD_VAR 0 1
5716: PUSH
5717: LD_EXP 12
5721: EQUAL
5722: IFFALSE 5731
// YouLost ( Connie ) ;
5724: LD_STRING Connie
5726: PPUSH
5727: CALL_OW 104
// if unit = Lisa then
5731: LD_VAR 0 1
5735: PUSH
5736: LD_EXP 11
5740: EQUAL
5741: IFFALSE 5750
// YouLost ( Lisa ) ;
5743: LD_STRING Lisa
5745: PPUSH
5746: CALL_OW 104
// end ; if unit in ruAttackers then
5750: LD_VAR 0 1
5754: PUSH
5755: LD_EXP 18
5759: IN
5760: IFFALSE 5778
// ruAttackers := ruAttackers diff unit ;
5762: LD_ADDR_EXP 18
5766: PUSH
5767: LD_EXP 18
5771: PUSH
5772: LD_VAR 0 1
5776: DIFF
5777: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5778: LD_VAR 0 1
5782: PPUSH
5783: CALL_OW 264
5787: PUSH
5788: LD_INT 51
5790: EQUAL
5791: PUSH
5792: LD_INT 40
5794: PPUSH
5795: CALL_OW 302
5799: AND
5800: IFFALSE 5840
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5802: LD_INT 40
5804: PPUSH
5805: LD_INT 21
5807: PPUSH
5808: LD_INT 1
5810: PUSH
5811: LD_INT 3
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 1
5820: PPUSH
5821: LD_INT 2
5823: PPUSH
5824: CALL_OW 12
5828: ARRAY
5829: PPUSH
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 51
5835: PPUSH
5836: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 264
5849: PUSH
5850: LD_INT 52
5852: EQUAL
5853: PUSH
5854: LD_INT 40
5856: PPUSH
5857: CALL_OW 302
5861: AND
5862: IFFALSE 5902
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5864: LD_INT 40
5866: PPUSH
5867: LD_INT 21
5869: PPUSH
5870: LD_INT 1
5872: PUSH
5873: LD_INT 3
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 1
5882: PPUSH
5883: LD_INT 2
5885: PPUSH
5886: CALL_OW 12
5890: ARRAY
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: LD_INT 52
5897: PPUSH
5898: CALL_OW 185
// if unit in ruMobile then
5902: LD_VAR 0 1
5906: PUSH
5907: LD_EXP 16
5911: IN
5912: IFFALSE 5930
// ruMobile := ruMobile diff i ;
5914: LD_ADDR_EXP 16
5918: PUSH
5919: LD_EXP 16
5923: PUSH
5924: LD_VAR 0 2
5928: DIFF
5929: ST_TO_ADDR
// if unit = ruCommander then
5930: LD_VAR 0 1
5934: PUSH
5935: LD_EXP 14
5939: EQUAL
5940: IFFALSE 6103
// begin repeat wait ( 0 0$2 ) ;
5942: LD_INT 70
5944: PPUSH
5945: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 23
5966: PUSH
5967: LD_INT 3
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 50
5976: PUSH
5977: EMPTY
5978: LIST
5979: PUSH
5980: LD_INT 21
5982: PUSH
5983: LD_INT 1
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 69
6000: ST_TO_ADDR
// if tmp then
6001: LD_VAR 0 3
6005: IFFALSE 6096
// for i in tmp do
6007: LD_ADDR_VAR 0 2
6011: PUSH
6012: LD_VAR 0 3
6016: PUSH
6017: FOR_IN
6018: IFFALSE 6094
// begin if IsInUnit ( i ) then
6020: LD_VAR 0 2
6024: PPUSH
6025: CALL_OW 310
6029: IFFALSE 6040
// ComExit ( i ) ;
6031: LD_VAR 0 2
6035: PPUSH
6036: CALL 70861 0 1
// wait ( 3 ) ;
6040: LD_INT 3
6042: PPUSH
6043: CALL_OW 67
// ComMoveXY ( i , 147 , 18 ) ;
6047: LD_VAR 0 2
6051: PPUSH
6052: LD_INT 147
6054: PPUSH
6055: LD_INT 18
6057: PPUSH
6058: CALL_OW 111
// if GetDistUnitXY ( i , 147 , 18 ) < 3 then
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_INT 147
6069: PPUSH
6070: LD_INT 18
6072: PPUSH
6073: CALL_OW 297
6077: PUSH
6078: LD_INT 3
6080: LESS
6081: IFFALSE 6092
// RemoveUnit ( i ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: CALL_OW 64
// end ;
6092: GO 6017
6094: POP
6095: POP
// until not tmp ;
6096: LD_VAR 0 3
6100: NOT
6101: IFFALSE 5942
// end ; end ;
6103: PPOPN 3
6105: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
6106: LD_VAR 0 2
6110: PPUSH
6111: CALL_OW 255
6115: PUSH
6116: LD_INT 3
6118: EQUAL
6119: IFFALSE 6133
// SetTag ( unit , 0 ) ;
6121: LD_VAR 0 2
6125: PPUSH
6126: LD_INT 0
6128: PPUSH
6129: CALL_OW 109
// end ;
6133: PPOPN 2
6135: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
6136: LD_VAR 0 2
6140: PPUSH
6141: CALL_OW 255
6145: PUSH
6146: LD_INT 3
6148: EQUAL
6149: PUSH
6150: LD_VAR 0 1
6154: PUSH
6155: LD_EXP 19
6159: IN
6160: AND
6161: IFFALSE 6179
// ruTechList := ruTechList diff tech ;
6163: LD_ADDR_EXP 19
6167: PUSH
6168: LD_EXP 19
6172: PUSH
6173: LD_VAR 0 1
6177: DIFF
6178: ST_TO_ADDR
// end ;
6179: PPOPN 2
6181: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
6182: LD_INT 0
6184: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
6185: LD_VAR 0 1
6189: PPUSH
6190: LD_VAR 0 2
6194: PPUSH
6195: CALL 27442 0 2
// if GetSide ( vehicle ) <> 3 then
6199: LD_VAR 0 1
6203: PPUSH
6204: CALL_OW 255
6208: PUSH
6209: LD_INT 3
6211: NONEQUAL
6212: IFFALSE 6283
// begin if GetWeapon ( vehicle ) = us_double_laser then
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 264
6223: PUSH
6224: LD_INT 10
6226: EQUAL
6227: IFFALSE 6281
// begin amLaserCounter := Inc ( amLaserCounter ) ;
6229: LD_ADDR_EXP 7
6233: PUSH
6234: LD_EXP 7
6238: PPUSH
6239: CALL 71824 0 1
6243: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
6244: LD_ADDR_VAR 0 3
6248: PUSH
6249: LD_VAR 0 2
6253: PPUSH
6254: CALL_OW 313
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6279
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
6262: LD_VAR 0 3
6266: PPUSH
6267: LD_INT 3
6269: PPUSH
6270: LD_INT 1000
6272: PPUSH
6273: CALL_OW 591
6277: GO 6259
6279: POP
6280: POP
// end ; exit ;
6281: GO 6377
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6283: LD_VAR 0 1
6287: PPUSH
6288: CALL_OW 264
6292: PUSH
6293: LD_INT 51
6295: PUSH
6296: LD_INT 52
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: IN
6303: IFFALSE 6307
// exit ;
6305: GO 6377
// if GetControl ( vehicle ) = control_computer then
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 263
6316: PUSH
6317: LD_INT 3
6319: EQUAL
6320: IFFALSE 6342
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6322: LD_ADDR_EXP 18
6326: PUSH
6327: LD_EXP 18
6331: PPUSH
6332: LD_VAR 0 1
6336: PPUSH
6337: CALL 70463 0 2
6341: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6342: LD_VAR 0 1
6346: PPUSH
6347: CALL_OW 263
6351: PUSH
6352: LD_INT 1
6354: EQUAL
6355: IFFALSE 6377
// ruMobile := Join ( ruMobile , vehicle ) ;
6357: LD_ADDR_EXP 16
6361: PUSH
6362: LD_EXP 16
6366: PPUSH
6367: LD_VAR 0 1
6371: PPUSH
6372: CALL 70463 0 2
6376: ST_TO_ADDR
// end ;
6377: PPOPN 3
6379: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 then
6380: LD_VAR 0 1
6384: PPUSH
6385: CALL_OW 255
6389: PUSH
6390: LD_INT 3
6392: EQUAL
6393: PUSH
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 257
6403: PUSH
6404: LD_INT 3
6406: EQUAL
6407: AND
6408: IFFALSE 6471
// if GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) and UnitsInside ( ruFac1 ) < 6 then
6410: LD_INT 1
6412: PPUSH
6413: CALL_OW 255
6417: PUSH
6418: LD_INT 3
6420: EQUAL
6421: PUSH
6422: LD_INT 1
6424: PPUSH
6425: CALL_OW 302
6429: AND
6430: PUSH
6431: LD_INT 1
6433: PPUSH
6434: CALL_OW 313
6438: PUSH
6439: LD_INT 6
6441: LESS
6442: AND
6443: IFFALSE 6459
// ComEnterUnit ( human , ruFac1 ) else
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 1
6452: PPUSH
6453: CALL_OW 120
6457: GO 6471
// ComEnterUnit ( human , ruFac2 ) ;
6459: LD_VAR 0 1
6463: PPUSH
6464: LD_INT 40
6466: PPUSH
6467: CALL_OW 120
// end ;
6471: PPOPN 4
6473: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL 27426 0 1
// end ; end_of_file
6483: PPOPN 1
6485: END
// export function Action ; var dec1 , dec2 , veh ; begin
6486: LD_INT 0
6488: PPUSH
6489: PPUSH
6490: PPUSH
6491: PPUSH
// veh := IsInUnit ( JMM ) ;
6492: LD_ADDR_VAR 0 4
6496: PUSH
6497: LD_EXP 8
6501: PPUSH
6502: CALL_OW 310
6506: ST_TO_ADDR
// InGameOn ;
6507: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6520: LD_VAR 0 4
6524: PPUSH
6525: LD_INT 30
6527: PPUSH
6528: LD_INT 11
6530: PPUSH
6531: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6535: LD_VAR 0 4
6539: PPUSH
6540: LD_INT 69
6542: PPUSH
6543: LD_INT 34
6545: PPUSH
6546: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6550: LD_INT 30
6552: PPUSH
6553: LD_INT 11
6555: PPUSH
6556: CALL_OW 84
// wait ( 0 0$3 ) ;
6560: LD_INT 105
6562: PPUSH
6563: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6567: LD_EXP 13
6571: PPUSH
6572: LD_STRING D1-Pow-1
6574: PPUSH
6575: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6579: LD_EXP 8
6583: PPUSH
6584: CALL_OW 121
// AddComHold ( JMM ) ;
6588: LD_EXP 8
6592: PPUSH
6593: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6597: LD_EXP 8
6601: PPUSH
6602: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6606: LD_EXP 8
6610: PPUSH
6611: LD_STRING D1-JMM-1
6613: PPUSH
6614: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6618: LD_EXP 13
6622: PPUSH
6623: LD_STRING D1-Pow-2
6625: PPUSH
6626: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6630: LD_EXP 8
6634: PPUSH
6635: LD_STRING D1-JMM-2
6637: PPUSH
6638: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6642: LD_EXP 8
6646: PPUSH
6647: LD_VAR 0 4
6651: PPUSH
6652: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6656: LD_STRING M1
6658: PPUSH
6659: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6663: LD_INT 16
6665: PPUSH
6666: LD_INT 1
6668: PPUSH
6669: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6673: LD_INT 35
6675: PPUSH
6676: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6680: LD_EXP 8
6684: PPUSH
6685: LD_VAR 0 4
6689: PPUSH
6690: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6694: LD_VAR 0 4
6698: PPUSH
6699: LD_INT 51
6701: PPUSH
6702: LD_INT 21
6704: PPUSH
6705: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6709: LD_VAR 0 4
6713: PPUSH
6714: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6718: LD_VAR 0 4
6722: PPUSH
6723: LD_INT 51
6725: PPUSH
6726: LD_INT 21
6728: PPUSH
6729: CALL_OW 297
6733: PUSH
6734: LD_INT 6
6736: LESS
6737: IFFALSE 6673
// if JMMGirl = 1 then
6739: LD_EXP 2
6743: PUSH
6744: LD_INT 1
6746: EQUAL
6747: IFFALSE 7046
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6749: LD_EXP 10
6753: PPUSH
6754: LD_STRING D2J-Joan-1
6756: PPUSH
6757: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6761: LD_ADDR_VAR 0 2
6765: PUSH
6766: LD_STRING Q1
6768: PPUSH
6769: CALL_OW 97
6773: ST_TO_ADDR
// if dec1 = 1 then
6774: LD_VAR 0 2
6778: PUSH
6779: LD_INT 1
6781: EQUAL
6782: IFFALSE 7037
// begin ComExitVehicle ( JMM ) ;
6784: LD_EXP 8
6788: PPUSH
6789: CALL_OW 121
// AddComHold ( JMM ) ;
6793: LD_EXP 8
6797: PPUSH
6798: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6802: LD_EXP 8
6806: PPUSH
6807: LD_STRING D2J-JMM-1
6809: PPUSH
6810: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6814: LD_EXP 10
6818: PPUSH
6819: LD_STRING D2J-Joan-2
6821: PPUSH
6822: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6826: LD_EXP 8
6830: PPUSH
6831: LD_STRING D2J-JMM-2
6833: PPUSH
6834: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6838: LD_EXP 10
6842: PPUSH
6843: LD_STRING D2J-Joan-3
6845: PPUSH
6846: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6850: LD_EXP 13
6854: PPUSH
6855: LD_STRING DPowell-Pow-1
6857: PPUSH
6858: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6862: LD_ADDR_VAR 0 3
6866: PUSH
6867: LD_STRING Q2J
6869: PPUSH
6870: CALL_OW 97
6874: ST_TO_ADDR
// if dec2 = 1 then
6875: LD_VAR 0 3
6879: PUSH
6880: LD_INT 1
6882: EQUAL
6883: IFFALSE 6925
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6885: LD_EXP 8
6889: PPUSH
6890: LD_STRING D2Ja-JMM-1
6892: PPUSH
6893: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6897: LD_EXP 10
6901: PPUSH
6902: LD_STRING D2Ja-Joan-1
6904: PPUSH
6905: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
6909: LD_EXP 8
6913: PPUSH
6914: LD_STRING D2Ja-JMM-2
6916: PPUSH
6917: CALL_OW 88
// InGameOff ;
6921: CALL_OW 9
// end ; if dec2 = 2 then
6925: LD_VAR 0 3
6929: PUSH
6930: LD_INT 2
6932: EQUAL
6933: IFFALSE 7004
// begin Say ( JMM , D2Jb-JMM-1 ) ;
6935: LD_EXP 8
6939: PPUSH
6940: LD_STRING D2Jb-JMM-1
6942: PPUSH
6943: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
6947: LD_EXP 10
6951: PPUSH
6952: LD_STRING D2Jb-Joan-1
6954: PPUSH
6955: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
6959: LD_EXP 8
6963: PPUSH
6964: LD_STRING D2Jb-JMM-2
6966: PPUSH
6967: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
6971: LD_EXP 10
6975: PPUSH
6976: LD_STRING D2Jb-Joan-2
6978: PPUSH
6979: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
6983: LD_EXP 8
6987: PPUSH
6988: LD_STRING D2Jb-JMM-3
6990: PPUSH
6991: CALL_OW 88
// FinishMission ( true ) ;
6995: LD_INT 1
6997: PPUSH
6998: CALL 9888 0 1
// exit ;
7002: GO 7586
// end ; if dec2 = 3 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 3
7011: EQUAL
7012: IFFALSE 7035
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
7014: LD_EXP 10
7018: PPUSH
7019: LD_STRING D2Jc-Joan-1
7021: PPUSH
7022: CALL_OW 94
// FinishMission ( true ) ;
7026: LD_INT 1
7028: PPUSH
7029: CALL 9888 0 1
// exit ;
7033: GO 7586
// end ; end else
7035: GO 7046
// begin FinishMission ( true ) ;
7037: LD_INT 1
7039: PPUSH
7040: CALL 9888 0 1
// exit ;
7044: GO 7586
// end ; end ; if JMMGirl = 2 then
7046: LD_EXP 2
7050: PUSH
7051: LD_INT 2
7053: EQUAL
7054: IFFALSE 7365
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
7056: LD_EXP 11
7060: PPUSH
7061: LD_STRING D2L-Lisa-1
7063: PPUSH
7064: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_STRING Q1
7075: PPUSH
7076: CALL_OW 97
7080: ST_TO_ADDR
// if dec1 = 1 then
7081: LD_VAR 0 2
7085: PUSH
7086: LD_INT 1
7088: EQUAL
7089: IFFALSE 7356
// begin ComExitVehicle ( JMM ) ;
7091: LD_EXP 8
7095: PPUSH
7096: CALL_OW 121
// AddComHold ( JMM ) ;
7100: LD_EXP 8
7104: PPUSH
7105: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
7109: LD_EXP 8
7113: PPUSH
7114: LD_STRING D2L-JMM-1
7116: PPUSH
7117: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
7121: LD_EXP 11
7125: PPUSH
7126: LD_STRING D2L-Lisa-2
7128: PPUSH
7129: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
7133: LD_EXP 8
7137: PPUSH
7138: LD_STRING D2L-JMM-2
7140: PPUSH
7141: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
7145: LD_EXP 11
7149: PPUSH
7150: LD_STRING DL-Lisa-3
7152: PPUSH
7153: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7157: LD_EXP 13
7161: PPUSH
7162: LD_STRING DPowell-Pow-1
7164: PPUSH
7165: CALL_OW 94
// dec2 := Query ( Q2L ) ;
7169: LD_ADDR_VAR 0 3
7173: PUSH
7174: LD_STRING Q2L
7176: PPUSH
7177: CALL_OW 97
7181: ST_TO_ADDR
// if dec2 = 1 then
7182: LD_VAR 0 3
7186: PUSH
7187: LD_INT 1
7189: EQUAL
7190: IFFALSE 7256
// begin Say ( JMM , D2La-JMM-1 ) ;
7192: LD_EXP 8
7196: PPUSH
7197: LD_STRING D2La-JMM-1
7199: PPUSH
7200: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
7204: LD_EXP 11
7208: PPUSH
7209: LD_STRING D2La-Lisa-1
7211: PPUSH
7212: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
7216: LD_EXP 8
7220: PPUSH
7221: LD_STRING D2La-JMM-2
7223: PPUSH
7224: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
7228: LD_EXP 11
7232: PPUSH
7233: LD_STRING D2La-Lisa-2
7235: PPUSH
7236: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
7240: LD_EXP 8
7244: PPUSH
7245: LD_STRING D2La-JMM-3
7247: PPUSH
7248: CALL_OW 88
// InGameOff ;
7252: CALL_OW 9
// end ; if dec2 = 2 then
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 2
7263: EQUAL
7264: IFFALSE 7323
// begin Say ( JMM , D2Lb-JMM-1 ) ;
7266: LD_EXP 8
7270: PPUSH
7271: LD_STRING D2Lb-JMM-1
7273: PPUSH
7274: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
7278: LD_EXP 11
7282: PPUSH
7283: LD_STRING D2Lb-Lisa-1
7285: PPUSH
7286: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
7290: LD_EXP 8
7294: PPUSH
7295: LD_STRING D2Lb-JMM-2
7297: PPUSH
7298: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7302: LD_EXP 11
7306: PPUSH
7307: LD_STRING D2Lb-Lisa-2
7309: PPUSH
7310: CALL_OW 94
// FinishMission ( true ) ;
7314: LD_INT 1
7316: PPUSH
7317: CALL 9888 0 1
// exit ;
7321: GO 7586
// end ; if dec2 = 3 then
7323: LD_VAR 0 3
7327: PUSH
7328: LD_INT 3
7330: EQUAL
7331: IFFALSE 7354
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7333: LD_EXP 11
7337: PPUSH
7338: LD_STRING D2Lc-Lisa-1
7340: PPUSH
7341: CALL_OW 94
// FinishMission ( true ) ;
7345: LD_INT 1
7347: PPUSH
7348: CALL 9888 0 1
// exit ;
7352: GO 7586
// end ; end else
7354: GO 7365
// begin FinishMission ( true ) ;
7356: LD_INT 1
7358: PPUSH
7359: CALL 9888 0 1
// exit ;
7363: GO 7586
// end ; end ; if JMMGirl = 3 then
7365: LD_EXP 2
7369: PUSH
7370: LD_INT 3
7372: EQUAL
7373: IFFALSE 7586
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7375: LD_EXP 12
7379: PPUSH
7380: LD_STRING D2X-Con-1
7382: PPUSH
7383: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7387: LD_ADDR_VAR 0 2
7391: PUSH
7392: LD_STRING Q1
7394: PPUSH
7395: CALL_OW 97
7399: ST_TO_ADDR
// if dec1 = 1 then
7400: LD_VAR 0 2
7404: PUSH
7405: LD_INT 1
7407: EQUAL
7408: IFFALSE 7579
// begin ComExitVehicle ( JMM ) ;
7410: LD_EXP 8
7414: PPUSH
7415: CALL_OW 121
// AddComHold ( JMM ) ;
7419: LD_EXP 8
7423: PPUSH
7424: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7428: LD_EXP 8
7432: PPUSH
7433: LD_STRING D2X-JMM-1
7435: PPUSH
7436: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7440: LD_EXP 12
7444: PPUSH
7445: LD_STRING D2X-Con-2
7447: PPUSH
7448: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7452: LD_EXP 13
7456: PPUSH
7457: LD_STRING DPowell-Pow-1
7459: PPUSH
7460: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_STRING Q2X
7471: PPUSH
7472: CALL_OW 97
7476: ST_TO_ADDR
// if dec2 = 1 then
7477: LD_VAR 0 3
7481: PUSH
7482: LD_INT 1
7484: EQUAL
7485: IFFALSE 7503
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7487: LD_EXP 8
7491: PPUSH
7492: LD_STRING D2Xa-JMM-1
7494: PPUSH
7495: CALL_OW 88
// InGameOff ;
7499: CALL_OW 9
// end ; if dec2 = 2 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 2
7510: EQUAL
7511: IFFALSE 7546
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7513: LD_EXP 8
7517: PPUSH
7518: LD_STRING D2Xb-JMM-1
7520: PPUSH
7521: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7525: LD_EXP 12
7529: PPUSH
7530: LD_STRING D2Xb-Con-1
7532: PPUSH
7533: CALL_OW 94
// FinishMission ( true ) ;
7537: LD_INT 1
7539: PPUSH
7540: CALL 9888 0 1
// exit ;
7544: GO 7586
// end ; if dec2 = 3 then
7546: LD_VAR 0 3
7550: PUSH
7551: LD_INT 3
7553: EQUAL
7554: IFFALSE 7577
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7556: LD_EXP 12
7560: PPUSH
7561: LD_STRING D2Xc-Con-1
7563: PPUSH
7564: CALL_OW 94
// FinishMission ( true ) ;
7568: LD_INT 1
7570: PPUSH
7571: CALL 9888 0 1
// exit ;
7575: GO 7586
// end ; end else
7577: GO 7586
// begin FinishMission ( true ) ;
7579: LD_INT 1
7581: PPUSH
7582: CALL 9888 0 1
// end ; end ; end ;
7586: LD_VAR 0 1
7590: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7591: LD_EXP 8
7595: PPUSH
7596: LD_INT 15
7598: PPUSH
7599: CALL_OW 308
7603: IFFALSE 8851
7605: GO 7607
7607: DISABLE
7608: LD_INT 0
7610: PPUSH
// begin if tick < 5 5$00 then
7611: LD_OWVAR 1
7615: PUSH
7616: LD_INT 10500
7618: LESS
7619: IFFALSE 7871
// begin uc_side := 6 ;
7621: LD_ADDR_OWVAR 20
7625: PUSH
7626: LD_INT 6
7628: ST_TO_ADDR
// uc_nation := 3 ;
7629: LD_ADDR_OWVAR 21
7633: PUSH
7634: LD_INT 3
7636: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7637: LD_INT 1
7639: PPUSH
7640: LD_INT 105
7642: PPUSH
7643: LD_INT 97
7645: PPUSH
7646: CALL_OW 293
7650: NOT
7651: IFFALSE 7715
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7653: LD_INT 22
7655: PPUSH
7656: LD_INT 1
7658: PPUSH
7659: LD_INT 3
7661: PPUSH
7662: LD_INT 44
7664: PPUSH
7665: LD_INT 40
7667: PPUSH
7668: CALL 37592 0 5
// veh := CreateVehicle ;
7672: LD_ADDR_VAR 0 1
7676: PUSH
7677: CALL_OW 45
7681: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7682: LD_VAR 0 1
7686: PPUSH
7687: LD_INT 200
7689: PPUSH
7690: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7694: LD_VAR 0 1
7698: PPUSH
7699: LD_INT 105
7701: PPUSH
7702: LD_INT 97
7704: PPUSH
7705: LD_INT 3
7707: PPUSH
7708: LD_INT 0
7710: PPUSH
7711: CALL 72603 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7715: LD_INT 1
7717: PPUSH
7718: LD_INT 116
7720: PPUSH
7721: LD_INT 120
7723: PPUSH
7724: CALL_OW 293
7728: NOT
7729: IFFALSE 7793
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7731: LD_INT 22
7733: PPUSH
7734: LD_INT 1
7736: PPUSH
7737: LD_INT 3
7739: PPUSH
7740: LD_INT 45
7742: PPUSH
7743: LD_INT 40
7745: PPUSH
7746: CALL 37592 0 5
// veh := CreateVehicle ;
7750: LD_ADDR_VAR 0 1
7754: PUSH
7755: CALL_OW 45
7759: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7760: LD_VAR 0 1
7764: PPUSH
7765: LD_INT 200
7767: PPUSH
7768: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7772: LD_VAR 0 1
7776: PPUSH
7777: LD_INT 116
7779: PPUSH
7780: LD_INT 120
7782: PPUSH
7783: LD_INT 4
7785: PPUSH
7786: LD_INT 0
7788: PPUSH
7789: CALL 72603 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7793: LD_INT 1
7795: PPUSH
7796: LD_INT 116
7798: PPUSH
7799: LD_INT 120
7801: PPUSH
7802: CALL_OW 293
7806: NOT
7807: IFFALSE 7871
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7809: LD_INT 24
7811: PPUSH
7812: LD_INT 1
7814: PPUSH
7815: LD_INT 3
7817: PPUSH
7818: LD_INT 45
7820: PPUSH
7821: LD_INT 30
7823: PPUSH
7824: CALL 37592 0 5
// veh := CreateVehicle ;
7828: LD_ADDR_VAR 0 1
7832: PUSH
7833: CALL_OW 45
7837: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 200
7845: PPUSH
7846: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7850: LD_VAR 0 1
7854: PPUSH
7855: LD_INT 116
7857: PPUSH
7858: LD_INT 120
7860: PPUSH
7861: LD_INT 4
7863: PPUSH
7864: LD_INT 0
7866: PPUSH
7867: CALL 72603 0 5
// end ; end ; InGameOn ;
7871: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7875: LD_INT 35
7877: PPUSH
7878: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7882: LD_EXP 8
7886: PPUSH
7887: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7891: LD_EXP 8
7895: PPUSH
7896: LD_INT 81
7898: PPUSH
7899: LD_INT 109
7901: PPUSH
7902: CALL_OW 111
// AddComHold ( JMM ) ;
7906: LD_EXP 8
7910: PPUSH
7911: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
7915: LD_EXP 10
7919: PUSH
7920: LD_EXP 11
7924: PUSH
7925: LD_EXP 12
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: PPUSH
7935: LD_EXP 8
7939: PPUSH
7940: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
7944: LD_EXP 10
7948: PUSH
7949: LD_EXP 11
7953: PUSH
7954: LD_EXP 12
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PPUSH
7964: LD_INT 91
7966: PUSH
7967: LD_EXP 8
7971: PUSH
7972: LD_INT 6
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 72
7984: IFFALSE 7875
// case JMMGirl of 1 :
7986: LD_EXP 2
7990: PUSH
7991: LD_INT 1
7993: DOUBLE
7994: EQUAL
7995: IFTRUE 7999
7997: GO 8284
7999: POP
// begin ChangeSideKappaBase ;
8000: CALL 1439 0 0
// ComTurnUnit ( Joan , JMM ) ;
8004: LD_EXP 10
8008: PPUSH
8009: LD_EXP 8
8013: PPUSH
8014: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
8018: LD_EXP 8
8022: PPUSH
8023: LD_EXP 10
8027: PPUSH
8028: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8032: LD_EXP 10
8036: PUSH
8037: LD_EXP 8
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 87
// wait ( 0 0$1 ) ;
8050: LD_INT 35
8052: PPUSH
8053: CALL_OW 67
// DialogueOn ;
8057: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
8061: LD_EXP 10
8065: PPUSH
8066: LD_STRING D3J-Joan-1
8068: PPUSH
8069: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8073: LD_EXP 8
8077: PPUSH
8078: LD_STRING D3J-JMM-1
8080: PPUSH
8081: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
8085: LD_EXP 10
8089: PPUSH
8090: LD_STRING D3J-Joan-2
8092: PPUSH
8093: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
8097: LD_EXP 8
8101: PPUSH
8102: LD_STRING D3J-JMM-2
8104: PPUSH
8105: CALL_OW 88
// wait ( 0 0$1 ) ;
8109: LD_INT 35
8111: PPUSH
8112: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8116: LD_EXP 8
8120: PPUSH
8121: LD_STRING D4-JMM-1
8123: PPUSH
8124: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
8128: LD_EXP 10
8132: PPUSH
8133: LD_STRING D4-Joan-1
8135: PPUSH
8136: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8140: LD_EXP 8
8144: PPUSH
8145: LD_STRING D4-JMM-2
8147: PPUSH
8148: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
8152: LD_EXP 10
8156: PPUSH
8157: LD_STRING D4-Joan-2
8159: PPUSH
8160: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8164: LD_EXP 8
8168: PPUSH
8169: LD_STRING D4-JMM-3
8171: PPUSH
8172: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8176: LD_INT 10
8178: PPUSH
8179: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8183: LD_EXP 13
8187: PPUSH
8188: LD_STRING D7-Pow-1
8190: PPUSH
8191: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8195: LD_EXP 8
8199: PPUSH
8200: LD_STRING D7-JMM-1
8202: PPUSH
8203: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8207: LD_EXP 13
8211: PPUSH
8212: LD_STRING D7-Pow-2
8214: PPUSH
8215: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8219: LD_EXP 8
8223: PPUSH
8224: LD_STRING D7-JMM-2
8226: PPUSH
8227: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8231: LD_EXP 13
8235: PPUSH
8236: LD_STRING D7-Pow-3
8238: PPUSH
8239: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8243: LD_EXP 8
8247: PPUSH
8248: LD_STRING D7-JMM-3
8250: PPUSH
8251: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8255: LD_EXP 13
8259: PPUSH
8260: LD_STRING D7-Pow-4
8262: PPUSH
8263: CALL_OW 94
// DialogueOff ;
8267: CALL_OW 7
// InGameOff ;
8271: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
8275: LD_STRING M2J
8277: PPUSH
8278: CALL_OW 337
// end ; 2 :
8282: GO 8847
8284: LD_INT 2
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8292
8290: GO 8577
8292: POP
// begin ChangeSideKappaBase ;
8293: CALL 1439 0 0
// ComTurnUnit ( Lisa , JMM ) ;
8297: LD_EXP 11
8301: PPUSH
8302: LD_EXP 8
8306: PPUSH
8307: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
8311: LD_EXP 8
8315: PPUSH
8316: LD_EXP 11
8320: PPUSH
8321: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
8325: LD_EXP 11
8329: PUSH
8330: LD_EXP 8
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 87
// wait ( 0 0$1 ) ;
8343: LD_INT 35
8345: PPUSH
8346: CALL_OW 67
// DialogueOn ;
8350: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
8354: LD_EXP 11
8358: PPUSH
8359: LD_STRING D3L-Lisa-1
8361: PPUSH
8362: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
8366: LD_EXP 8
8370: PPUSH
8371: LD_STRING D3L-JMM-1
8373: PPUSH
8374: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
8378: LD_EXP 11
8382: PPUSH
8383: LD_STRING D3L-Lisa-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
8390: LD_EXP 8
8394: PPUSH
8395: LD_STRING D3L-JMM-2
8397: PPUSH
8398: CALL_OW 88
// wait ( 0 0$1 ) ;
8402: LD_INT 35
8404: PPUSH
8405: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8409: LD_EXP 8
8413: PPUSH
8414: LD_STRING D4-JMM-1
8416: PPUSH
8417: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8421: LD_EXP 11
8425: PPUSH
8426: LD_STRING D4-Lisa-1
8428: PPUSH
8429: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8433: LD_EXP 8
8437: PPUSH
8438: LD_STRING D4-JMM-1
8440: PPUSH
8441: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8445: LD_EXP 11
8449: PPUSH
8450: LD_STRING D4-Lisa-2
8452: PPUSH
8453: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8457: LD_EXP 8
8461: PPUSH
8462: LD_STRING D4-JMM-3
8464: PPUSH
8465: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8469: LD_INT 10
8471: PPUSH
8472: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8476: LD_EXP 13
8480: PPUSH
8481: LD_STRING D7-Pow-1
8483: PPUSH
8484: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8488: LD_EXP 8
8492: PPUSH
8493: LD_STRING D7-JMM-1
8495: PPUSH
8496: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8500: LD_EXP 13
8504: PPUSH
8505: LD_STRING D7-Pow-2
8507: PPUSH
8508: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8512: LD_EXP 8
8516: PPUSH
8517: LD_STRING D7-JMM-2
8519: PPUSH
8520: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8524: LD_EXP 13
8528: PPUSH
8529: LD_STRING D7-Pow-3
8531: PPUSH
8532: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8536: LD_EXP 8
8540: PPUSH
8541: LD_STRING D7-JMM-3
8543: PPUSH
8544: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8548: LD_EXP 13
8552: PPUSH
8553: LD_STRING D7-Pow-4
8555: PPUSH
8556: CALL_OW 94
// DialogueOff ;
8560: CALL_OW 7
// InGameOff ;
8564: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8568: LD_STRING M2L
8570: PPUSH
8571: CALL_OW 337
// end ; 3 :
8575: GO 8847
8577: LD_INT 3
8579: DOUBLE
8580: EQUAL
8581: IFTRUE 8585
8583: GO 8846
8585: POP
// begin ChangeSideKappaBase ;
8586: CALL 1439 0 0
// ComTurnUnit ( Connie , JMM ) ;
8590: LD_EXP 12
8594: PPUSH
8595: LD_EXP 8
8599: PPUSH
8600: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8604: LD_EXP 8
8608: PPUSH
8609: LD_EXP 12
8613: PPUSH
8614: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8618: LD_EXP 10
8622: PUSH
8623: LD_EXP 8
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PPUSH
8632: CALL_OW 87
// wait ( 0 0$1 ) ;
8636: LD_INT 35
8638: PPUSH
8639: CALL_OW 67
// DialogueOn ;
8643: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8647: LD_EXP 12
8651: PPUSH
8652: LD_STRING D3X-Con-1
8654: PPUSH
8655: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8659: LD_EXP 8
8663: PPUSH
8664: LD_STRING D3J-JMM-1
8666: PPUSH
8667: CALL_OW 88
// wait ( 0 0$1 ) ;
8671: LD_INT 35
8673: PPUSH
8674: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8678: LD_EXP 8
8682: PPUSH
8683: LD_STRING D4-JMM-1
8685: PPUSH
8686: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8690: LD_EXP 12
8694: PPUSH
8695: LD_STRING D4-Con-1
8697: PPUSH
8698: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8702: LD_EXP 8
8706: PPUSH
8707: LD_STRING D4-JMM-2
8709: PPUSH
8710: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8714: LD_EXP 12
8718: PPUSH
8719: LD_STRING D4-Con-2
8721: PPUSH
8722: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8726: LD_EXP 8
8730: PPUSH
8731: LD_STRING D4-JMM-3
8733: PPUSH
8734: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8738: LD_INT 10
8740: PPUSH
8741: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8745: LD_EXP 13
8749: PPUSH
8750: LD_STRING D7-Pow-1
8752: PPUSH
8753: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8757: LD_EXP 8
8761: PPUSH
8762: LD_STRING D7-JMM-1
8764: PPUSH
8765: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8769: LD_EXP 13
8773: PPUSH
8774: LD_STRING D7-Pow-2
8776: PPUSH
8777: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8781: LD_EXP 8
8785: PPUSH
8786: LD_STRING D7-JMM-2
8788: PPUSH
8789: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8793: LD_EXP 13
8797: PPUSH
8798: LD_STRING D7-Pow-3
8800: PPUSH
8801: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8805: LD_EXP 8
8809: PPUSH
8810: LD_STRING D7-JMM-3
8812: PPUSH
8813: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8817: LD_EXP 13
8821: PPUSH
8822: LD_STRING D7-Pow-4
8824: PPUSH
8825: CALL_OW 94
// DialogueOff ;
8829: CALL_OW 7
// InGameOff ;
8833: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8837: LD_STRING M2X
8839: PPUSH
8840: CALL_OW 337
// end ; end ;
8844: GO 8847
8846: POP
// SaveForQuickRestart ;
8847: CALL_OW 22
// end ;
8851: PPOPN 1
8853: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8854: LD_INT 32
8856: PPUSH
8857: CALL_OW 306
8861: IFFALSE 9186
8863: GO 8865
8865: DISABLE
// begin case JMMGirl of 1 :
8866: LD_EXP 2
8870: PUSH
8871: LD_INT 1
8873: DOUBLE
8874: EQUAL
8875: IFTRUE 8879
8877: GO 8993
8879: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8880: LD_EXP 8
8884: PPUSH
8885: LD_STRING D6J-JMM-1
8887: PPUSH
8888: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8892: LD_STRING 13f_Denis
8894: PPUSH
8895: CALL_OW 28
8899: PUSH
8900: LD_STRING 13s_Denis
8902: PPUSH
8903: CALL_OW 28
8907: OR
8908: IFFALSE 8948
// begin Say ( Joan , D6J-Joan-1 ) ;
8910: LD_EXP 10
8914: PPUSH
8915: LD_STRING D6J-Joan-1
8917: PPUSH
8918: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
8922: LD_EXP 8
8926: PPUSH
8927: LD_STRING D6J-JMM-2
8929: PPUSH
8930: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
8934: LD_EXP 10
8938: PPUSH
8939: LD_STRING D6J-Joan-2
8941: PPUSH
8942: CALL_OW 88
// end else
8946: GO 8960
// Say ( Joan , D6J-Joan-2a ) ;
8948: LD_EXP 10
8952: PPUSH
8953: LD_STRING D6J-Joan-2a
8955: PPUSH
8956: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
8960: LD_EXP 8
8964: PPUSH
8965: LD_STRING D6J-JMM-3
8967: PPUSH
8968: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
8972: LD_EXP 10
8976: PPUSH
8977: LD_STRING D6J-Joan-3
8979: PPUSH
8980: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8984: LD_STRING M3
8986: PPUSH
8987: CALL_OW 337
// end ; 2 :
8991: GO 9186
8993: LD_INT 2
8995: DOUBLE
8996: EQUAL
8997: IFTRUE 9001
8999: GO 9059
9001: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
9002: LD_EXP 8
9006: PPUSH
9007: LD_STRING D6L-JMM-1
9009: PPUSH
9010: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
9014: LD_EXP 11
9018: PPUSH
9019: LD_STRING D6L-Lisa-1
9021: PPUSH
9022: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
9026: LD_EXP 8
9030: PPUSH
9031: LD_STRING D6L-JMM-2
9033: PPUSH
9034: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
9038: LD_EXP 11
9042: PPUSH
9043: LD_STRING D6L-Lisa-2
9045: PPUSH
9046: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9050: LD_STRING M3
9052: PPUSH
9053: CALL_OW 337
// end ; 3 :
9057: GO 9186
9059: LD_INT 3
9061: DOUBLE
9062: EQUAL
9063: IFTRUE 9067
9065: GO 9185
9067: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
9068: LD_EXP 8
9072: PPUSH
9073: LD_STRING D6X-JMM-1
9075: PPUSH
9076: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
9080: LD_EXP 12
9084: PPUSH
9085: LD_STRING D6X-Con-1
9087: PPUSH
9088: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
9092: LD_EXP 8
9096: PPUSH
9097: LD_STRING D6X-JMM-2
9099: PPUSH
9100: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
9104: LD_EXP 12
9108: PPUSH
9109: LD_STRING D6X-Con-2
9111: PPUSH
9112: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
9116: LD_EXP 8
9120: PPUSH
9121: LD_STRING D6X-JMM-3
9123: PPUSH
9124: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
9128: LD_EXP 12
9132: PPUSH
9133: LD_STRING D6X-Con-3
9135: PPUSH
9136: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
9140: LD_EXP 8
9144: PPUSH
9145: LD_STRING D6X-JMM-4
9147: PPUSH
9148: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
9152: LD_EXP 12
9156: PPUSH
9157: LD_STRING D6X-Con-4
9159: PPUSH
9160: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
9164: LD_EXP 8
9168: PPUSH
9169: LD_STRING D6X-JMM-5
9171: PPUSH
9172: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9176: LD_STRING M3
9178: PPUSH
9179: CALL_OW 337
// end ; end ;
9183: GO 9186
9185: POP
// end ;
9186: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
9187: LD_INT 22
9189: PUSH
9190: LD_INT 1
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 33
9199: PUSH
9200: LD_INT 2
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PPUSH
9211: CALL_OW 69
9215: PPUSH
9216: CALL_OW 306
9220: IFFALSE 9366
9222: GO 9224
9224: DISABLE
// begin case JMMGirl of 1 :
9225: LD_EXP 2
9229: PUSH
9230: LD_INT 1
9232: DOUBLE
9233: EQUAL
9234: IFTRUE 9238
9236: GO 9275
9238: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9239: LD_EXP 8
9243: PPUSH
9244: LD_STRING D5-JMM-1
9246: PPUSH
9247: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9251: LD_INT 77
9253: PPUSH
9254: LD_INT 87
9256: PPUSH
9257: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
9261: LD_EXP 10
9265: PPUSH
9266: LD_STRING D5-Joan-1
9268: PPUSH
9269: CALL_OW 88
// end ; 2 :
9273: GO 9366
9275: LD_INT 2
9277: DOUBLE
9278: EQUAL
9279: IFTRUE 9283
9281: GO 9320
9283: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9284: LD_EXP 8
9288: PPUSH
9289: LD_STRING D5-JMM-1
9291: PPUSH
9292: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9296: LD_INT 77
9298: PPUSH
9299: LD_INT 87
9301: PPUSH
9302: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
9306: LD_EXP 11
9310: PPUSH
9311: LD_STRING D5-Lisa-1
9313: PPUSH
9314: CALL_OW 88
// end ; 3 :
9318: GO 9366
9320: LD_INT 3
9322: DOUBLE
9323: EQUAL
9324: IFTRUE 9328
9326: GO 9365
9328: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9329: LD_EXP 8
9333: PPUSH
9334: LD_STRING D5-JMM-1
9336: PPUSH
9337: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9341: LD_INT 77
9343: PPUSH
9344: LD_INT 87
9346: PPUSH
9347: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
9351: LD_EXP 12
9355: PPUSH
9356: LD_STRING D5-Con-1
9358: PPUSH
9359: CALL_OW 88
// end ; end ;
9363: GO 9366
9365: POP
// end ;
9366: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
9367: LD_EXP 8
9371: PPUSH
9372: CALL_OW 310
9376: PPUSH
9377: LD_INT 16
9379: PPUSH
9380: CALL_OW 308
9384: IFFALSE 9734
9386: GO 9388
9388: DISABLE
9389: LD_INT 0
9391: PPUSH
9392: PPUSH
// begin enable ;
9393: ENABLE
// if JMMGirl = 1 then
9394: LD_EXP 2
9398: PUSH
9399: LD_INT 1
9401: EQUAL
9402: IFFALSE 9419
// JMMGirlVeh := IsInUnit ( Joan ) ;
9404: LD_ADDR_VAR 0 1
9408: PUSH
9409: LD_EXP 10
9413: PPUSH
9414: CALL_OW 310
9418: ST_TO_ADDR
// if JMMGirl = 2 then
9419: LD_EXP 2
9423: PUSH
9424: LD_INT 2
9426: EQUAL
9427: IFFALSE 9444
// JMMGirlVeh := IsInUnit ( Lisa ) ;
9429: LD_ADDR_VAR 0 1
9433: PUSH
9434: LD_EXP 11
9438: PPUSH
9439: CALL_OW 310
9443: ST_TO_ADDR
// if JMMGirl = 3 then
9444: LD_EXP 2
9448: PUSH
9449: LD_INT 3
9451: EQUAL
9452: IFFALSE 9469
// JMMGirlVeh := IsInUnit ( Connie ) ;
9454: LD_ADDR_VAR 0 1
9458: PUSH
9459: LD_EXP 12
9463: PPUSH
9464: CALL_OW 310
9468: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9469: LD_EXP 8
9473: PPUSH
9474: CALL_OW 310
9478: PPUSH
9479: LD_EXP 10
9483: PPUSH
9484: CALL_OW 310
9488: PPUSH
9489: CALL_OW 296
9493: PUSH
9494: LD_INT 10
9496: LESS
9497: PUSH
9498: LD_EXP 8
9502: PPUSH
9503: CALL_OW 310
9507: PPUSH
9508: LD_EXP 11
9512: PPUSH
9513: CALL_OW 310
9517: PPUSH
9518: CALL_OW 296
9522: PUSH
9523: LD_INT 10
9525: LESS
9526: OR
9527: PUSH
9528: LD_EXP 8
9532: PPUSH
9533: CALL_OW 310
9537: PPUSH
9538: LD_EXP 12
9542: PPUSH
9543: CALL_OW 310
9547: PPUSH
9548: CALL_OW 296
9552: PUSH
9553: LD_INT 10
9555: LESS
9556: OR
9557: IFFALSE 9654
// begin case Query ( Q3b ) of 1 :
9559: LD_STRING Q3b
9561: PPUSH
9562: CALL_OW 97
9566: PUSH
9567: LD_INT 1
9569: DOUBLE
9570: EQUAL
9571: IFTRUE 9575
9573: GO 9651
9575: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9576: LD_VAR 0 1
9580: PPUSH
9581: CALL_OW 265
9585: PUSH
9586: EMPTY
9587: LIST
9588: PUSH
9589: LD_VAR 0 1
9593: PPUSH
9594: CALL_OW 262
9598: PUSH
9599: EMPTY
9600: LIST
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 263
9611: PUSH
9612: EMPTY
9613: LIST
9614: PUSH
9615: LD_VAR 0 1
9619: PPUSH
9620: CALL_OW 264
9624: PUSH
9625: EMPTY
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PPUSH
9634: LD_STRING 14_JMMGirlVeh_1
9636: PPUSH
9637: CALL_OW 39
// FinishMission ( false ) ;
9641: LD_INT 0
9643: PPUSH
9644: CALL 9888 0 1
// disable ;
9648: DISABLE
// end ; end ;
9649: GO 9652
9651: POP
// end else
9652: GO 9734
// begin if JMMGirl = 1 then
9654: LD_EXP 2
9658: PUSH
9659: LD_INT 1
9661: EQUAL
9662: IFFALSE 9679
// dec := Query ( Q3bJ ) else
9664: LD_ADDR_VAR 0 2
9668: PUSH
9669: LD_STRING Q3bJ
9671: PPUSH
9672: CALL_OW 97
9676: ST_TO_ADDR
9677: GO 9717
// if JMMGirl = 2 then
9679: LD_EXP 2
9683: PUSH
9684: LD_INT 2
9686: EQUAL
9687: IFFALSE 9704
// dec := Query ( Q3bL ) else
9689: LD_ADDR_VAR 0 2
9693: PUSH
9694: LD_STRING Q3bL
9696: PPUSH
9697: CALL_OW 97
9701: ST_TO_ADDR
9702: GO 9717
// dec := Query ( Q3bX ) ;
9704: LD_ADDR_VAR 0 2
9708: PUSH
9709: LD_STRING Q3bX
9711: PPUSH
9712: CALL_OW 97
9716: ST_TO_ADDR
// if dec = 1 then
9717: LD_VAR 0 2
9721: PUSH
9722: LD_INT 1
9724: EQUAL
9725: IFFALSE 9734
// FinishMission ( false ) ;
9727: LD_INT 0
9729: PPUSH
9730: CALL 9888 0 1
// end ; end ;
9734: PPOPN 2
9736: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9737: LD_INT 22
9739: PUSH
9740: LD_INT 3
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: LD_INT 23
9749: PUSH
9750: LD_INT 3
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 21
9759: PUSH
9760: LD_INT 1
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 69
9776: PUSH
9777: LD_INT 0
9779: EQUAL
9780: IFFALSE 9887
9782: GO 9784
9784: DISABLE
// begin DialogueOn ;
9785: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9789: LD_EXP 8
9793: PPUSH
9794: LD_STRING DEnd-JMM-1
9796: PPUSH
9797: CALL_OW 88
// case JMMGirl of 1 :
9801: LD_EXP 2
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9829
9814: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9815: LD_EXP 10
9819: PPUSH
9820: LD_STRING DEnd-Joan-1
9822: PPUSH
9823: CALL_OW 88
9827: GO 9876
9829: LD_INT 2
9831: DOUBLE
9832: EQUAL
9833: IFTRUE 9837
9835: GO 9852
9837: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9838: LD_EXP 11
9842: PPUSH
9843: LD_STRING DEnd-Lisa-1
9845: PPUSH
9846: CALL_OW 88
9850: GO 9876
9852: LD_INT 3
9854: DOUBLE
9855: EQUAL
9856: IFTRUE 9860
9858: GO 9875
9860: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9861: LD_EXP 12
9865: PPUSH
9866: LD_STRING DEnd-Con-1
9868: PPUSH
9869: CALL_OW 88
9873: GO 9876
9875: POP
// DialogueOff ;
9876: CALL_OW 7
// FinishMission ( false ) ;
9880: LD_INT 0
9882: PPUSH
9883: CALL 9888 0 1
// end ;
9887: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9888: LD_INT 0
9890: PPUSH
9891: PPUSH
9892: PPUSH
9893: PPUSH
9894: PPUSH
9895: PPUSH
// m1 := false ;
9896: LD_ADDR_VAR 0 4
9900: PUSH
9901: LD_INT 0
9903: ST_TO_ADDR
// m2 := false ;
9904: LD_ADDR_VAR 0 5
9908: PUSH
9909: LD_INT 0
9911: ST_TO_ADDR
// m3 := false ;
9912: LD_ADDR_VAR 0 6
9916: PUSH
9917: LD_INT 0
9919: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
9920: LD_ADDR_VAR 0 7
9924: PUSH
9925: LD_INT 22
9927: PUSH
9928: LD_INT 3
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 50
9937: PUSH
9938: EMPTY
9939: LIST
9940: PUSH
9941: LD_INT 23
9943: PUSH
9944: LD_INT 3
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 21
9953: PUSH
9954: LD_INT 1
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: PPUSH
9967: CALL_OW 69
9971: PUSH
9972: LD_INT 0
9974: EQUAL
9975: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9976: LD_EXP 8
9980: PPUSH
9981: LD_STRING 14_JMM
9983: PPUSH
9984: CALL_OW 38
// if tick <= 50 50$00 then
9988: LD_OWVAR 1
9992: PUSH
9993: LD_INT 105000
9995: LESSEQUAL
9996: IFFALSE 10005
// SetAchievement ( ACH_ASPEED_14 ) ;
9998: LD_STRING ACH_ASPEED_14
10000: PPUSH
10001: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
10005: LD_EXP 8
10009: PPUSH
10010: CALL_OW 310
10014: PUSH
10015: LD_EXP 8
10019: PPUSH
10020: CALL_OW 310
10024: PPUSH
10025: CALL_OW 247
10029: PUSH
10030: LD_INT 2
10032: EQUAL
10033: AND
10034: IFFALSE 10116
// begin JMMNewVeh = IsInUnit ( JMM ) ;
10036: LD_ADDR_VAR 0 3
10040: PUSH
10041: LD_EXP 8
10045: PPUSH
10046: CALL_OW 310
10050: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
10051: LD_VAR 0 3
10055: PPUSH
10056: CALL_OW 265
10060: PUSH
10061: EMPTY
10062: LIST
10063: PUSH
10064: LD_VAR 0 3
10068: PPUSH
10069: CALL_OW 262
10073: PUSH
10074: EMPTY
10075: LIST
10076: PUSH
10077: LD_VAR 0 3
10081: PPUSH
10082: CALL_OW 263
10086: PUSH
10087: EMPTY
10088: LIST
10089: PUSH
10090: LD_VAR 0 3
10094: PPUSH
10095: CALL_OW 264
10099: PUSH
10100: EMPTY
10101: LIST
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: PPUSH
10109: LD_STRING 14_JMMVeh_1
10111: PPUSH
10112: CALL_OW 39
// end ; if fastEnd then
10116: LD_VAR 0 1
10120: IFFALSE 10211
// begin AddMedal ( fastend , - 1 ) ;
10122: LD_STRING fastend
10124: PPUSH
10125: LD_INT 1
10127: NEG
10128: PPUSH
10129: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10133: LD_STRING fastend
10135: PPUSH
10136: LD_INT 1
10138: NEG
10139: PPUSH
10140: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10144: LD_STRING fastend
10146: PPUSH
10147: LD_INT 1
10149: NEG
10150: PPUSH
10151: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10155: LD_EXP 2
10159: PPUSH
10160: LD_STRING 14_JMMGirl_1
10162: PPUSH
10163: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10167: LD_INT 0
10169: PPUSH
10170: LD_STRING 14_JMMGirlStatus_1
10172: PPUSH
10173: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10177: LD_INT 0
10179: PPUSH
10180: LD_STRING 14_KappaStatus_1
10182: PPUSH
10183: CALL_OW 39
// GiveMedals ( Eliminate ) ;
10187: LD_STRING Eliminate
10189: PPUSH
10190: CALL_OW 102
// RewardPeople ( JMM ) ;
10194: LD_EXP 8
10198: PPUSH
10199: CALL_OW 43
// YouWin ;
10203: CALL_OW 103
// exit ;
10207: GO 10857
// end else
10209: GO 10750
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10211: LD_EXP 2
10215: PPUSH
10216: LD_STRING 14_JMMGirl_1
10218: PPUSH
10219: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
10223: LD_VAR 0 7
10227: PPUSH
10228: LD_STRING 14_KappaStatus_1
10230: PPUSH
10231: CALL_OW 39
// case JMMGirl of 1 :
10235: LD_EXP 2
10239: PUSH
10240: LD_INT 1
10242: DOUBLE
10243: EQUAL
10244: IFTRUE 10248
10246: GO 10376
10248: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10249: LD_EXP 10
10253: PPUSH
10254: CALL_OW 302
10258: PUSH
10259: LD_EXP 10
10263: PPUSH
10264: CALL_OW 255
10268: PUSH
10269: LD_INT 1
10271: EQUAL
10272: AND
10273: PUSH
10274: LD_VAR 0 7
10278: PUSH
10279: LD_EXP 8
10283: PPUSH
10284: CALL_OW 310
10288: PPUSH
10289: LD_EXP 10
10293: PPUSH
10294: CALL_OW 310
10298: PPUSH
10299: CALL_OW 296
10303: PUSH
10304: LD_INT 10
10306: LESS
10307: OR
10308: AND
10309: IFFALSE 10353
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10311: LD_INT 1
10313: PPUSH
10314: LD_STRING 14_JMMGirlStatus_1
10316: PPUSH
10317: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10321: LD_EXP 10
10325: PPUSH
10326: LD_STRING 14_Joan
10328: PPUSH
10329: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10333: LD_STRING protect
10335: PPUSH
10336: LD_INT 1
10338: PPUSH
10339: CALL_OW 101
// m1 := true ;
10343: LD_ADDR_VAR 0 4
10347: PUSH
10348: LD_INT 1
10350: ST_TO_ADDR
// end else
10351: GO 10374
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10353: LD_INT 0
10355: PPUSH
10356: LD_STRING 14_JMMGirlStatus_1
10358: PPUSH
10359: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10363: LD_STRING protect
10365: PPUSH
10366: LD_INT 1
10368: NEG
10369: PPUSH
10370: CALL_OW 101
// end ; end ; 2 :
10374: GO 10649
10376: LD_INT 2
10378: DOUBLE
10379: EQUAL
10380: IFTRUE 10384
10382: GO 10512
10384: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10385: LD_EXP 11
10389: PPUSH
10390: CALL_OW 302
10394: PUSH
10395: LD_EXP 11
10399: PPUSH
10400: CALL_OW 255
10404: PUSH
10405: LD_INT 1
10407: EQUAL
10408: AND
10409: PUSH
10410: LD_VAR 0 7
10414: PUSH
10415: LD_EXP 8
10419: PPUSH
10420: CALL_OW 310
10424: PPUSH
10425: LD_EXP 11
10429: PPUSH
10430: CALL_OW 310
10434: PPUSH
10435: CALL_OW 296
10439: PUSH
10440: LD_INT 10
10442: LESS
10443: OR
10444: AND
10445: IFFALSE 10489
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10447: LD_INT 1
10449: PPUSH
10450: LD_STRING 14_JMMGirlStatus_1
10452: PPUSH
10453: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10457: LD_EXP 11
10461: PPUSH
10462: LD_STRING 14_Lisa
10464: PPUSH
10465: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10469: LD_STRING protect
10471: PPUSH
10472: LD_INT 1
10474: PPUSH
10475: CALL_OW 101
// m1 := true ;
10479: LD_ADDR_VAR 0 4
10483: PUSH
10484: LD_INT 1
10486: ST_TO_ADDR
// end else
10487: GO 10510
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10489: LD_INT 0
10491: PPUSH
10492: LD_STRING 14_JMMGirlStatus_1
10494: PPUSH
10495: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10499: LD_STRING protect
10501: PPUSH
10502: LD_INT 2
10504: NEG
10505: PPUSH
10506: CALL_OW 101
// end ; end ; 3 :
10510: GO 10649
10512: LD_INT 3
10514: DOUBLE
10515: EQUAL
10516: IFTRUE 10520
10518: GO 10648
10520: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10521: LD_EXP 12
10525: PPUSH
10526: CALL_OW 302
10530: PUSH
10531: LD_EXP 12
10535: PPUSH
10536: CALL_OW 255
10540: PUSH
10541: LD_INT 1
10543: EQUAL
10544: AND
10545: PUSH
10546: LD_VAR 0 7
10550: PUSH
10551: LD_EXP 8
10555: PPUSH
10556: CALL_OW 310
10560: PPUSH
10561: LD_EXP 12
10565: PPUSH
10566: CALL_OW 310
10570: PPUSH
10571: CALL_OW 296
10575: PUSH
10576: LD_INT 10
10578: LESS
10579: OR
10580: AND
10581: IFFALSE 10625
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10583: LD_INT 1
10585: PPUSH
10586: LD_STRING 14_JMMGirlStatus_1
10588: PPUSH
10589: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10593: LD_EXP 12
10597: PPUSH
10598: LD_STRING 14_Connie
10600: PPUSH
10601: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10605: LD_STRING protect
10607: PPUSH
10608: LD_INT 1
10610: PPUSH
10611: CALL_OW 101
// m1 := true ;
10615: LD_ADDR_VAR 0 4
10619: PUSH
10620: LD_INT 1
10622: ST_TO_ADDR
// end else
10623: GO 10646
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10625: LD_INT 0
10627: PPUSH
10628: LD_STRING 14_JMMGirlStatus_1
10630: PPUSH
10631: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10635: LD_STRING protect
10637: PPUSH
10638: LD_INT 3
10640: NEG
10641: PPUSH
10642: CALL_OW 101
// end ; end ; end ;
10646: GO 10649
10648: POP
// if amLaserCounter >= 2 then
10649: LD_EXP 7
10653: PUSH
10654: LD_INT 2
10656: GREATEREQUAL
10657: IFFALSE 10679
// begin AddMedal ( double , 1 ) ;
10659: LD_STRING double
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: CALL_OW 101
// m2 := true ;
10669: LD_ADDR_VAR 0 5
10673: PUSH
10674: LD_INT 1
10676: ST_TO_ADDR
// end else
10677: GO 10713
// begin if amLaserCounter = 1 then
10679: LD_EXP 7
10683: PUSH
10684: LD_INT 1
10686: EQUAL
10687: IFFALSE 10702
// AddMedal ( double , - 2 ) else
10689: LD_STRING double
10691: PPUSH
10692: LD_INT 2
10694: NEG
10695: PPUSH
10696: CALL_OW 101
10700: GO 10713
// AddMedal ( double , - 1 ) ;
10702: LD_STRING double
10704: PPUSH
10705: LD_INT 1
10707: NEG
10708: PPUSH
10709: CALL_OW 101
// end ; if ruEliminated then
10713: LD_VAR 0 7
10717: IFFALSE 10739
// begin AddMedal ( base , 1 ) ;
10719: LD_STRING base
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 101
// m3 := true ;
10729: LD_ADDR_VAR 0 6
10733: PUSH
10734: LD_INT 1
10736: ST_TO_ADDR
// end else
10737: GO 10750
// AddMedal ( base , - 1 ) ;
10739: LD_STRING base
10741: PPUSH
10742: LD_INT 1
10744: NEG
10745: PPUSH
10746: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10750: LD_VAR 0 4
10754: PUSH
10755: LD_VAR 0 5
10759: AND
10760: PUSH
10761: LD_VAR 0 6
10765: AND
10766: PUSH
10767: LD_OWVAR 67
10771: PUSH
10772: LD_INT 3
10774: GREATEREQUAL
10775: AND
10776: IFFALSE 10788
// SetAchievementEX ( ACH_AMER , 14 ) ;
10778: LD_STRING ACH_AMER
10780: PPUSH
10781: LD_INT 14
10783: PPUSH
10784: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10788: LD_STRING Eliminate
10790: PPUSH
10791: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10795: LD_INT 22
10797: PUSH
10798: LD_INT 1
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: LD_INT 3
10807: PUSH
10808: LD_INT 25
10810: PUSH
10811: LD_INT 12
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 3
10824: PUSH
10825: LD_INT 25
10827: PUSH
10828: LD_INT 16
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: PPUSH
10844: CALL_OW 69
10848: PPUSH
10849: CALL_OW 43
// YouWin ;
10853: CALL_OW 103
// end ; end_of_file
10857: LD_VAR 0 2
10861: RET
// export function CreateNature ; var i , un ; begin
10862: LD_INT 0
10864: PPUSH
10865: PPUSH
10866: PPUSH
// PrepareEnchidna ;
10867: CALL 66900 0 0
// for i := 1 to 3 do
10871: LD_ADDR_VAR 0 2
10875: PUSH
10876: DOUBLE
10877: LD_INT 1
10879: DEC
10880: ST_TO_ADDR
10881: LD_INT 3
10883: PUSH
10884: FOR_TO
10885: IFFALSE 10934
// begin un := CreateHuman ;
10887: LD_ADDR_VAR 0 3
10891: PUSH
10892: CALL_OW 44
10896: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10897: LD_VAR 0 3
10901: PPUSH
10902: LD_INT 0
10904: PPUSH
10905: LD_INT 5
10907: PPUSH
10908: CALL_OW 12
10912: PPUSH
10913: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10917: LD_VAR 0 3
10921: PPUSH
10922: LD_INT 9
10924: PPUSH
10925: LD_INT 0
10927: PPUSH
10928: CALL_OW 49
// end ;
10932: GO 10884
10934: POP
10935: POP
// PrepareHorse ;
10936: CALL 67060 0 0
// for i := 1 to 2 do
10940: LD_ADDR_VAR 0 2
10944: PUSH
10945: DOUBLE
10946: LD_INT 1
10948: DEC
10949: ST_TO_ADDR
10950: LD_INT 2
10952: PUSH
10953: FOR_TO
10954: IFFALSE 11003
// begin un := CreateHuman ;
10956: LD_ADDR_VAR 0 3
10960: PUSH
10961: CALL_OW 44
10965: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10966: LD_VAR 0 3
10970: PPUSH
10971: LD_INT 0
10973: PPUSH
10974: LD_INT 5
10976: PPUSH
10977: CALL_OW 12
10981: PPUSH
10982: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10986: LD_VAR 0 3
10990: PPUSH
10991: LD_INT 9
10993: PPUSH
10994: LD_INT 0
10996: PPUSH
10997: CALL_OW 49
// end ;
11001: GO 10953
11003: POP
11004: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
11005: LD_ADDR_VAR 0 2
11009: PUSH
11010: DOUBLE
11011: LD_INT 1
11013: DEC
11014: ST_TO_ADDR
11015: LD_INT 4
11017: PUSH
11018: LD_INT 5
11020: PUSH
11021: LD_INT 5
11023: PUSH
11024: LD_INT 5
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: PUSH
11033: LD_OWVAR 67
11037: ARRAY
11038: PUSH
11039: FOR_TO
11040: IFFALSE 11104
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
11042: LD_INT 0
11044: PPUSH
11045: LD_INT 5
11047: PPUSH
11048: CALL_OW 12
11052: PPUSH
11053: CALL 66711 0 1
// un := CreateHuman ;
11057: LD_ADDR_VAR 0 3
11061: PUSH
11062: CALL_OW 44
11066: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11067: LD_VAR 0 3
11071: PPUSH
11072: LD_INT 0
11074: PPUSH
11075: LD_INT 5
11077: PPUSH
11078: CALL_OW 12
11082: PPUSH
11083: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
11087: LD_VAR 0 3
11091: PPUSH
11092: LD_INT 8
11094: PPUSH
11095: LD_INT 0
11097: PPUSH
11098: CALL_OW 49
// end ;
11102: GO 11039
11104: POP
11105: POP
// PrepareFish ;
11106: CALL 66980 0 0
// for i := 1 to 2 do
11110: LD_ADDR_VAR 0 2
11114: PUSH
11115: DOUBLE
11116: LD_INT 1
11118: DEC
11119: ST_TO_ADDR
11120: LD_INT 2
11122: PUSH
11123: FOR_TO
11124: IFFALSE 11173
// begin un := CreateHuman ;
11126: LD_ADDR_VAR 0 3
11130: PUSH
11131: CALL_OW 44
11135: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11136: LD_VAR 0 3
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: LD_INT 5
11146: PPUSH
11147: CALL_OW 12
11151: PPUSH
11152: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
11156: LD_VAR 0 3
11160: PPUSH
11161: LD_INT 6
11163: PPUSH
11164: LD_INT 0
11166: PPUSH
11167: CALL_OW 49
// end ;
11171: GO 11123
11173: POP
11174: POP
// PrepareFrog ;
11175: CALL 66940 0 0
// for i := 1 to 2 do
11179: LD_ADDR_VAR 0 2
11183: PUSH
11184: DOUBLE
11185: LD_INT 1
11187: DEC
11188: ST_TO_ADDR
11189: LD_INT 2
11191: PUSH
11192: FOR_TO
11193: IFFALSE 11242
// begin un := CreateHuman ;
11195: LD_ADDR_VAR 0 3
11199: PUSH
11200: CALL_OW 44
11204: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11205: LD_VAR 0 3
11209: PPUSH
11210: LD_INT 0
11212: PPUSH
11213: LD_INT 5
11215: PPUSH
11216: CALL_OW 12
11220: PPUSH
11221: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
11225: LD_VAR 0 3
11229: PPUSH
11230: LD_INT 7
11232: PPUSH
11233: LD_INT 0
11235: PPUSH
11236: CALL_OW 49
// end ;
11240: GO 11192
11242: POP
11243: POP
// PrepareMastodont ;
11244: CALL 67100 0 0
// un := CreateVehicle ;
11248: LD_ADDR_VAR 0 3
11252: PUSH
11253: CALL_OW 45
11257: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
11258: LD_VAR 0 3
11262: PPUSH
11263: LD_INT 166
11265: PPUSH
11266: LD_INT 134
11268: PPUSH
11269: LD_INT 1
11271: PPUSH
11272: LD_INT 0
11274: PPUSH
11275: CALL 72603 0 5
// end ; end_of_file
11279: LD_VAR 0 1
11283: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
11284: LD_INT 14
11286: PPUSH
11287: CALL_OW 435
11291: PUSH
11292: LD_INT 20
11294: LESS
11295: IFFALSE 11337
11297: GO 11299
11299: DISABLE
// begin enable ;
11300: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11301: LD_INT 35
11303: PPUSH
11304: LD_INT 735
11306: PPUSH
11307: CALL_OW 12
11311: PPUSH
11312: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
11316: LD_INT 1
11318: PPUSH
11319: LD_INT 5
11321: PPUSH
11322: CALL_OW 12
11326: PPUSH
11327: LD_INT 14
11329: PPUSH
11330: LD_INT 1
11332: PPUSH
11333: CALL_OW 55
// end ;
11337: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11338: LD_INT 13
11340: PPUSH
11341: CALL_OW 435
11345: PUSH
11346: LD_INT 30
11348: LESS
11349: IFFALSE 11391
11351: GO 11353
11353: DISABLE
// begin enable ;
11354: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11355: LD_INT 35
11357: PPUSH
11358: LD_INT 735
11360: PPUSH
11361: CALL_OW 12
11365: PPUSH
11366: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
11370: LD_INT 1
11372: PPUSH
11373: LD_INT 5
11375: PPUSH
11376: CALL_OW 12
11380: PPUSH
11381: LD_INT 13
11383: PPUSH
11384: LD_INT 1
11386: PPUSH
11387: CALL_OW 55
// end ;
11391: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11392: LD_INT 13
11394: PPUSH
11395: CALL_OW 435
11399: PUSH
11400: LD_INT 30
11402: LESS
11403: IFFALSE 11436
11405: GO 11407
11407: DISABLE
// begin enable ;
11408: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
11409: LD_INT 1
11411: PPUSH
11412: LD_INT 5
11414: PPUSH
11415: CALL_OW 12
11419: PPUSH
11420: LD_INT 133
11422: PPUSH
11423: LD_INT 122
11425: PPUSH
11426: LD_INT 20
11428: PPUSH
11429: LD_INT 1
11431: PPUSH
11432: CALL_OW 56
// end ; end_of_file end_of_file
11436: END
// export globalGameSaveCounter ; every 0 0$1 do
11437: GO 11439
11439: DISABLE
// begin enable ;
11440: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11441: LD_STRING updateTimer(
11443: PUSH
11444: LD_OWVAR 1
11448: STR
11449: PUSH
11450: LD_STRING );
11452: STR
11453: PPUSH
11454: CALL_OW 559
// end ;
11458: END
// every 0 0$1 do
11459: GO 11461
11461: DISABLE
// begin globalGameSaveCounter := 0 ;
11462: LD_ADDR_EXP 21
11466: PUSH
11467: LD_INT 0
11469: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11470: LD_STRING setGameSaveCounter(0)
11472: PPUSH
11473: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11477: LD_STRING initStreamRollete();
11479: PPUSH
11480: CALL_OW 559
// InitStreamMode ;
11484: CALL 12827 0 0
// DefineStreamItems ( false ) ;
11488: LD_INT 0
11490: PPUSH
11491: CALL 13291 0 1
// end ;
11495: END
// export function SOS_MapStart ( ) ; begin
11496: LD_INT 0
11498: PPUSH
// if streamModeActive then
11499: LD_EXP 22
11503: IFFALSE 11512
// DefineStreamItems ( true ) ;
11505: LD_INT 1
11507: PPUSH
11508: CALL 13291 0 1
// UpdateLuaVariables ( ) ;
11512: CALL 11529 0 0
// UpdateFactoryWaypoints ( ) ;
11516: CALL 26293 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11520: CALL 26545 0 0
// end ;
11524: LD_VAR 0 1
11528: RET
// function UpdateLuaVariables ( ) ; begin
11529: LD_INT 0
11531: PPUSH
// if globalGameSaveCounter then
11532: LD_EXP 21
11536: IFFALSE 11570
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11538: LD_ADDR_EXP 21
11542: PUSH
11543: LD_EXP 21
11547: PPUSH
11548: CALL 71824 0 1
11552: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11553: LD_STRING setGameSaveCounter(
11555: PUSH
11556: LD_EXP 21
11560: STR
11561: PUSH
11562: LD_STRING )
11564: STR
11565: PPUSH
11566: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11570: LD_STRING setGameDifficulty(
11572: PUSH
11573: LD_OWVAR 67
11577: STR
11578: PUSH
11579: LD_STRING )
11581: STR
11582: PPUSH
11583: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11587: LD_STRING displayDifficulty(
11589: PUSH
11590: LD_OWVAR 67
11594: STR
11595: PUSH
11596: LD_STRING )
11598: STR
11599: PPUSH
11600: CALL_OW 559
// end ;
11604: LD_VAR 0 1
11608: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11609: LD_INT 0
11611: PPUSH
// if p2 = stream_mode then
11612: LD_VAR 0 2
11616: PUSH
11617: LD_INT 100
11619: EQUAL
11620: IFFALSE 12623
// begin if not StreamModeActive then
11622: LD_EXP 22
11626: NOT
11627: IFFALSE 11637
// StreamModeActive := true ;
11629: LD_ADDR_EXP 22
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// if p3 = 0 then
11637: LD_VAR 0 3
11641: PUSH
11642: LD_INT 0
11644: EQUAL
11645: IFFALSE 11651
// InitStreamMode ;
11647: CALL 12827 0 0
// if p3 = 1 then
11651: LD_VAR 0 3
11655: PUSH
11656: LD_INT 1
11658: EQUAL
11659: IFFALSE 11669
// sRocket := true ;
11661: LD_ADDR_EXP 27
11665: PUSH
11666: LD_INT 1
11668: ST_TO_ADDR
// if p3 = 2 then
11669: LD_VAR 0 3
11673: PUSH
11674: LD_INT 2
11676: EQUAL
11677: IFFALSE 11687
// sSpeed := true ;
11679: LD_ADDR_EXP 26
11683: PUSH
11684: LD_INT 1
11686: ST_TO_ADDR
// if p3 = 3 then
11687: LD_VAR 0 3
11691: PUSH
11692: LD_INT 3
11694: EQUAL
11695: IFFALSE 11705
// sEngine := true ;
11697: LD_ADDR_EXP 28
11701: PUSH
11702: LD_INT 1
11704: ST_TO_ADDR
// if p3 = 4 then
11705: LD_VAR 0 3
11709: PUSH
11710: LD_INT 4
11712: EQUAL
11713: IFFALSE 11723
// sSpec := true ;
11715: LD_ADDR_EXP 25
11719: PUSH
11720: LD_INT 1
11722: ST_TO_ADDR
// if p3 = 5 then
11723: LD_VAR 0 3
11727: PUSH
11728: LD_INT 5
11730: EQUAL
11731: IFFALSE 11741
// sLevel := true ;
11733: LD_ADDR_EXP 29
11737: PUSH
11738: LD_INT 1
11740: ST_TO_ADDR
// if p3 = 6 then
11741: LD_VAR 0 3
11745: PUSH
11746: LD_INT 6
11748: EQUAL
11749: IFFALSE 11759
// sArmoury := true ;
11751: LD_ADDR_EXP 30
11755: PUSH
11756: LD_INT 1
11758: ST_TO_ADDR
// if p3 = 7 then
11759: LD_VAR 0 3
11763: PUSH
11764: LD_INT 7
11766: EQUAL
11767: IFFALSE 11777
// sRadar := true ;
11769: LD_ADDR_EXP 31
11773: PUSH
11774: LD_INT 1
11776: ST_TO_ADDR
// if p3 = 8 then
11777: LD_VAR 0 3
11781: PUSH
11782: LD_INT 8
11784: EQUAL
11785: IFFALSE 11795
// sBunker := true ;
11787: LD_ADDR_EXP 32
11791: PUSH
11792: LD_INT 1
11794: ST_TO_ADDR
// if p3 = 9 then
11795: LD_VAR 0 3
11799: PUSH
11800: LD_INT 9
11802: EQUAL
11803: IFFALSE 11813
// sHack := true ;
11805: LD_ADDR_EXP 33
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// if p3 = 10 then
11813: LD_VAR 0 3
11817: PUSH
11818: LD_INT 10
11820: EQUAL
11821: IFFALSE 11831
// sFire := true ;
11823: LD_ADDR_EXP 34
11827: PUSH
11828: LD_INT 1
11830: ST_TO_ADDR
// if p3 = 11 then
11831: LD_VAR 0 3
11835: PUSH
11836: LD_INT 11
11838: EQUAL
11839: IFFALSE 11849
// sRefresh := true ;
11841: LD_ADDR_EXP 35
11845: PUSH
11846: LD_INT 1
11848: ST_TO_ADDR
// if p3 = 12 then
11849: LD_VAR 0 3
11853: PUSH
11854: LD_INT 12
11856: EQUAL
11857: IFFALSE 11867
// sExp := true ;
11859: LD_ADDR_EXP 36
11863: PUSH
11864: LD_INT 1
11866: ST_TO_ADDR
// if p3 = 13 then
11867: LD_VAR 0 3
11871: PUSH
11872: LD_INT 13
11874: EQUAL
11875: IFFALSE 11885
// sDepot := true ;
11877: LD_ADDR_EXP 37
11881: PUSH
11882: LD_INT 1
11884: ST_TO_ADDR
// if p3 = 14 then
11885: LD_VAR 0 3
11889: PUSH
11890: LD_INT 14
11892: EQUAL
11893: IFFALSE 11903
// sFlag := true ;
11895: LD_ADDR_EXP 38
11899: PUSH
11900: LD_INT 1
11902: ST_TO_ADDR
// if p3 = 15 then
11903: LD_VAR 0 3
11907: PUSH
11908: LD_INT 15
11910: EQUAL
11911: IFFALSE 11921
// sKamikadze := true ;
11913: LD_ADDR_EXP 46
11917: PUSH
11918: LD_INT 1
11920: ST_TO_ADDR
// if p3 = 16 then
11921: LD_VAR 0 3
11925: PUSH
11926: LD_INT 16
11928: EQUAL
11929: IFFALSE 11939
// sTroll := true ;
11931: LD_ADDR_EXP 47
11935: PUSH
11936: LD_INT 1
11938: ST_TO_ADDR
// if p3 = 17 then
11939: LD_VAR 0 3
11943: PUSH
11944: LD_INT 17
11946: EQUAL
11947: IFFALSE 11957
// sSlow := true ;
11949: LD_ADDR_EXP 48
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// if p3 = 18 then
11957: LD_VAR 0 3
11961: PUSH
11962: LD_INT 18
11964: EQUAL
11965: IFFALSE 11975
// sLack := true ;
11967: LD_ADDR_EXP 49
11971: PUSH
11972: LD_INT 1
11974: ST_TO_ADDR
// if p3 = 19 then
11975: LD_VAR 0 3
11979: PUSH
11980: LD_INT 19
11982: EQUAL
11983: IFFALSE 11993
// sTank := true ;
11985: LD_ADDR_EXP 51
11989: PUSH
11990: LD_INT 1
11992: ST_TO_ADDR
// if p3 = 20 then
11993: LD_VAR 0 3
11997: PUSH
11998: LD_INT 20
12000: EQUAL
12001: IFFALSE 12011
// sRemote := true ;
12003: LD_ADDR_EXP 52
12007: PUSH
12008: LD_INT 1
12010: ST_TO_ADDR
// if p3 = 21 then
12011: LD_VAR 0 3
12015: PUSH
12016: LD_INT 21
12018: EQUAL
12019: IFFALSE 12029
// sPowell := true ;
12021: LD_ADDR_EXP 53
12025: PUSH
12026: LD_INT 1
12028: ST_TO_ADDR
// if p3 = 22 then
12029: LD_VAR 0 3
12033: PUSH
12034: LD_INT 22
12036: EQUAL
12037: IFFALSE 12047
// sTeleport := true ;
12039: LD_ADDR_EXP 56
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// if p3 = 23 then
12047: LD_VAR 0 3
12051: PUSH
12052: LD_INT 23
12054: EQUAL
12055: IFFALSE 12065
// sOilTower := true ;
12057: LD_ADDR_EXP 58
12061: PUSH
12062: LD_INT 1
12064: ST_TO_ADDR
// if p3 = 24 then
12065: LD_VAR 0 3
12069: PUSH
12070: LD_INT 24
12072: EQUAL
12073: IFFALSE 12083
// sShovel := true ;
12075: LD_ADDR_EXP 59
12079: PUSH
12080: LD_INT 1
12082: ST_TO_ADDR
// if p3 = 25 then
12083: LD_VAR 0 3
12087: PUSH
12088: LD_INT 25
12090: EQUAL
12091: IFFALSE 12101
// sSheik := true ;
12093: LD_ADDR_EXP 60
12097: PUSH
12098: LD_INT 1
12100: ST_TO_ADDR
// if p3 = 26 then
12101: LD_VAR 0 3
12105: PUSH
12106: LD_INT 26
12108: EQUAL
12109: IFFALSE 12119
// sEarthquake := true ;
12111: LD_ADDR_EXP 62
12115: PUSH
12116: LD_INT 1
12118: ST_TO_ADDR
// if p3 = 27 then
12119: LD_VAR 0 3
12123: PUSH
12124: LD_INT 27
12126: EQUAL
12127: IFFALSE 12137
// sAI := true ;
12129: LD_ADDR_EXP 63
12133: PUSH
12134: LD_INT 1
12136: ST_TO_ADDR
// if p3 = 28 then
12137: LD_VAR 0 3
12141: PUSH
12142: LD_INT 28
12144: EQUAL
12145: IFFALSE 12155
// sCargo := true ;
12147: LD_ADDR_EXP 66
12151: PUSH
12152: LD_INT 1
12154: ST_TO_ADDR
// if p3 = 29 then
12155: LD_VAR 0 3
12159: PUSH
12160: LD_INT 29
12162: EQUAL
12163: IFFALSE 12173
// sDLaser := true ;
12165: LD_ADDR_EXP 67
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// if p3 = 30 then
12173: LD_VAR 0 3
12177: PUSH
12178: LD_INT 30
12180: EQUAL
12181: IFFALSE 12191
// sExchange := true ;
12183: LD_ADDR_EXP 68
12187: PUSH
12188: LD_INT 1
12190: ST_TO_ADDR
// if p3 = 31 then
12191: LD_VAR 0 3
12195: PUSH
12196: LD_INT 31
12198: EQUAL
12199: IFFALSE 12209
// sFac := true ;
12201: LD_ADDR_EXP 69
12205: PUSH
12206: LD_INT 1
12208: ST_TO_ADDR
// if p3 = 32 then
12209: LD_VAR 0 3
12213: PUSH
12214: LD_INT 32
12216: EQUAL
12217: IFFALSE 12227
// sPower := true ;
12219: LD_ADDR_EXP 70
12223: PUSH
12224: LD_INT 1
12226: ST_TO_ADDR
// if p3 = 33 then
12227: LD_VAR 0 3
12231: PUSH
12232: LD_INT 33
12234: EQUAL
12235: IFFALSE 12245
// sRandom := true ;
12237: LD_ADDR_EXP 71
12241: PUSH
12242: LD_INT 1
12244: ST_TO_ADDR
// if p3 = 34 then
12245: LD_VAR 0 3
12249: PUSH
12250: LD_INT 34
12252: EQUAL
12253: IFFALSE 12263
// sShield := true ;
12255: LD_ADDR_EXP 72
12259: PUSH
12260: LD_INT 1
12262: ST_TO_ADDR
// if p3 = 35 then
12263: LD_VAR 0 3
12267: PUSH
12268: LD_INT 35
12270: EQUAL
12271: IFFALSE 12281
// sTime := true ;
12273: LD_ADDR_EXP 73
12277: PUSH
12278: LD_INT 1
12280: ST_TO_ADDR
// if p3 = 36 then
12281: LD_VAR 0 3
12285: PUSH
12286: LD_INT 36
12288: EQUAL
12289: IFFALSE 12299
// sTools := true ;
12291: LD_ADDR_EXP 74
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// if p3 = 101 then
12299: LD_VAR 0 3
12303: PUSH
12304: LD_INT 101
12306: EQUAL
12307: IFFALSE 12317
// sSold := true ;
12309: LD_ADDR_EXP 39
12313: PUSH
12314: LD_INT 1
12316: ST_TO_ADDR
// if p3 = 102 then
12317: LD_VAR 0 3
12321: PUSH
12322: LD_INT 102
12324: EQUAL
12325: IFFALSE 12335
// sDiff := true ;
12327: LD_ADDR_EXP 40
12331: PUSH
12332: LD_INT 1
12334: ST_TO_ADDR
// if p3 = 103 then
12335: LD_VAR 0 3
12339: PUSH
12340: LD_INT 103
12342: EQUAL
12343: IFFALSE 12353
// sFog := true ;
12345: LD_ADDR_EXP 43
12349: PUSH
12350: LD_INT 1
12352: ST_TO_ADDR
// if p3 = 104 then
12353: LD_VAR 0 3
12357: PUSH
12358: LD_INT 104
12360: EQUAL
12361: IFFALSE 12371
// sReset := true ;
12363: LD_ADDR_EXP 44
12367: PUSH
12368: LD_INT 1
12370: ST_TO_ADDR
// if p3 = 105 then
12371: LD_VAR 0 3
12375: PUSH
12376: LD_INT 105
12378: EQUAL
12379: IFFALSE 12389
// sSun := true ;
12381: LD_ADDR_EXP 45
12385: PUSH
12386: LD_INT 1
12388: ST_TO_ADDR
// if p3 = 106 then
12389: LD_VAR 0 3
12393: PUSH
12394: LD_INT 106
12396: EQUAL
12397: IFFALSE 12407
// sTiger := true ;
12399: LD_ADDR_EXP 41
12403: PUSH
12404: LD_INT 1
12406: ST_TO_ADDR
// if p3 = 107 then
12407: LD_VAR 0 3
12411: PUSH
12412: LD_INT 107
12414: EQUAL
12415: IFFALSE 12425
// sBomb := true ;
12417: LD_ADDR_EXP 42
12421: PUSH
12422: LD_INT 1
12424: ST_TO_ADDR
// if p3 = 108 then
12425: LD_VAR 0 3
12429: PUSH
12430: LD_INT 108
12432: EQUAL
12433: IFFALSE 12443
// sWound := true ;
12435: LD_ADDR_EXP 50
12439: PUSH
12440: LD_INT 1
12442: ST_TO_ADDR
// if p3 = 109 then
12443: LD_VAR 0 3
12447: PUSH
12448: LD_INT 109
12450: EQUAL
12451: IFFALSE 12461
// sBetray := true ;
12453: LD_ADDR_EXP 54
12457: PUSH
12458: LD_INT 1
12460: ST_TO_ADDR
// if p3 = 110 then
12461: LD_VAR 0 3
12465: PUSH
12466: LD_INT 110
12468: EQUAL
12469: IFFALSE 12479
// sContamin := true ;
12471: LD_ADDR_EXP 55
12475: PUSH
12476: LD_INT 1
12478: ST_TO_ADDR
// if p3 = 111 then
12479: LD_VAR 0 3
12483: PUSH
12484: LD_INT 111
12486: EQUAL
12487: IFFALSE 12497
// sOil := true ;
12489: LD_ADDR_EXP 57
12493: PUSH
12494: LD_INT 1
12496: ST_TO_ADDR
// if p3 = 112 then
12497: LD_VAR 0 3
12501: PUSH
12502: LD_INT 112
12504: EQUAL
12505: IFFALSE 12515
// sStu := true ;
12507: LD_ADDR_EXP 61
12511: PUSH
12512: LD_INT 1
12514: ST_TO_ADDR
// if p3 = 113 then
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 113
12522: EQUAL
12523: IFFALSE 12533
// sBazooka := true ;
12525: LD_ADDR_EXP 64
12529: PUSH
12530: LD_INT 1
12532: ST_TO_ADDR
// if p3 = 114 then
12533: LD_VAR 0 3
12537: PUSH
12538: LD_INT 114
12540: EQUAL
12541: IFFALSE 12551
// sMortar := true ;
12543: LD_ADDR_EXP 65
12547: PUSH
12548: LD_INT 1
12550: ST_TO_ADDR
// if p3 = 115 then
12551: LD_VAR 0 3
12555: PUSH
12556: LD_INT 115
12558: EQUAL
12559: IFFALSE 12569
// sRanger := true ;
12561: LD_ADDR_EXP 75
12565: PUSH
12566: LD_INT 1
12568: ST_TO_ADDR
// if p3 = 116 then
12569: LD_VAR 0 3
12573: PUSH
12574: LD_INT 116
12576: EQUAL
12577: IFFALSE 12587
// sComputer := true ;
12579: LD_ADDR_EXP 76
12583: PUSH
12584: LD_INT 1
12586: ST_TO_ADDR
// if p3 = 117 then
12587: LD_VAR 0 3
12591: PUSH
12592: LD_INT 117
12594: EQUAL
12595: IFFALSE 12605
// s30 := true ;
12597: LD_ADDR_EXP 77
12601: PUSH
12602: LD_INT 1
12604: ST_TO_ADDR
// if p3 = 118 then
12605: LD_VAR 0 3
12609: PUSH
12610: LD_INT 118
12612: EQUAL
12613: IFFALSE 12623
// s60 := true ;
12615: LD_ADDR_EXP 78
12619: PUSH
12620: LD_INT 1
12622: ST_TO_ADDR
// end ; if p2 = hack_mode then
12623: LD_VAR 0 2
12627: PUSH
12628: LD_INT 101
12630: EQUAL
12631: IFFALSE 12759
// begin case p3 of 1 :
12633: LD_VAR 0 3
12637: PUSH
12638: LD_INT 1
12640: DOUBLE
12641: EQUAL
12642: IFTRUE 12646
12644: GO 12653
12646: POP
// hHackUnlimitedResources ; 2 :
12647: CALL 24906 0 0
12651: GO 12759
12653: LD_INT 2
12655: DOUBLE
12656: EQUAL
12657: IFTRUE 12661
12659: GO 12668
12661: POP
// hHackSetLevel10 ; 3 :
12662: CALL 25039 0 0
12666: GO 12759
12668: LD_INT 3
12670: DOUBLE
12671: EQUAL
12672: IFTRUE 12676
12674: GO 12683
12676: POP
// hHackSetLevel10YourUnits ; 4 :
12677: CALL 25124 0 0
12681: GO 12759
12683: LD_INT 4
12685: DOUBLE
12686: EQUAL
12687: IFTRUE 12691
12689: GO 12698
12691: POP
// hHackInvincible ; 5 :
12692: CALL 25572 0 0
12696: GO 12759
12698: LD_INT 5
12700: DOUBLE
12701: EQUAL
12702: IFTRUE 12706
12704: GO 12713
12706: POP
// hHackInvisible ; 6 :
12707: CALL 25683 0 0
12711: GO 12759
12713: LD_INT 6
12715: DOUBLE
12716: EQUAL
12717: IFTRUE 12721
12719: GO 12728
12721: POP
// hHackChangeYourSide ; 7 :
12722: CALL 25740 0 0
12726: GO 12759
12728: LD_INT 7
12730: DOUBLE
12731: EQUAL
12732: IFTRUE 12736
12734: GO 12743
12736: POP
// hHackChangeUnitSide ; 8 :
12737: CALL 25782 0 0
12741: GO 12759
12743: LD_INT 8
12745: DOUBLE
12746: EQUAL
12747: IFTRUE 12751
12749: GO 12758
12751: POP
// hHackFog ; end ;
12752: CALL 25883 0 0
12756: GO 12759
12758: POP
// end ; if p2 = game_save_mode then
12759: LD_VAR 0 2
12763: PUSH
12764: LD_INT 102
12766: EQUAL
12767: IFFALSE 12822
// begin if p3 = 1 then
12769: LD_VAR 0 3
12773: PUSH
12774: LD_INT 1
12776: EQUAL
12777: IFFALSE 12789
// globalGameSaveCounter := p4 ;
12779: LD_ADDR_EXP 21
12783: PUSH
12784: LD_VAR 0 4
12788: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12789: LD_VAR 0 3
12793: PUSH
12794: LD_INT 2
12796: EQUAL
12797: PUSH
12798: LD_EXP 21
12802: AND
12803: IFFALSE 12822
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12805: LD_STRING setGameSaveCounter(
12807: PUSH
12808: LD_EXP 21
12812: STR
12813: PUSH
12814: LD_STRING )
12816: STR
12817: PPUSH
12818: CALL_OW 559
// end ; end ;
12822: LD_VAR 0 7
12826: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12827: LD_INT 0
12829: PPUSH
// streamModeActive := false ;
12830: LD_ADDR_EXP 22
12834: PUSH
12835: LD_INT 0
12837: ST_TO_ADDR
// normalCounter := 36 ;
12838: LD_ADDR_EXP 23
12842: PUSH
12843: LD_INT 36
12845: ST_TO_ADDR
// hardcoreCounter := 18 ;
12846: LD_ADDR_EXP 24
12850: PUSH
12851: LD_INT 18
12853: ST_TO_ADDR
// sRocket := false ;
12854: LD_ADDR_EXP 27
12858: PUSH
12859: LD_INT 0
12861: ST_TO_ADDR
// sSpeed := false ;
12862: LD_ADDR_EXP 26
12866: PUSH
12867: LD_INT 0
12869: ST_TO_ADDR
// sEngine := false ;
12870: LD_ADDR_EXP 28
12874: PUSH
12875: LD_INT 0
12877: ST_TO_ADDR
// sSpec := false ;
12878: LD_ADDR_EXP 25
12882: PUSH
12883: LD_INT 0
12885: ST_TO_ADDR
// sLevel := false ;
12886: LD_ADDR_EXP 29
12890: PUSH
12891: LD_INT 0
12893: ST_TO_ADDR
// sArmoury := false ;
12894: LD_ADDR_EXP 30
12898: PUSH
12899: LD_INT 0
12901: ST_TO_ADDR
// sRadar := false ;
12902: LD_ADDR_EXP 31
12906: PUSH
12907: LD_INT 0
12909: ST_TO_ADDR
// sBunker := false ;
12910: LD_ADDR_EXP 32
12914: PUSH
12915: LD_INT 0
12917: ST_TO_ADDR
// sHack := false ;
12918: LD_ADDR_EXP 33
12922: PUSH
12923: LD_INT 0
12925: ST_TO_ADDR
// sFire := false ;
12926: LD_ADDR_EXP 34
12930: PUSH
12931: LD_INT 0
12933: ST_TO_ADDR
// sRefresh := false ;
12934: LD_ADDR_EXP 35
12938: PUSH
12939: LD_INT 0
12941: ST_TO_ADDR
// sExp := false ;
12942: LD_ADDR_EXP 36
12946: PUSH
12947: LD_INT 0
12949: ST_TO_ADDR
// sDepot := false ;
12950: LD_ADDR_EXP 37
12954: PUSH
12955: LD_INT 0
12957: ST_TO_ADDR
// sFlag := false ;
12958: LD_ADDR_EXP 38
12962: PUSH
12963: LD_INT 0
12965: ST_TO_ADDR
// sKamikadze := false ;
12966: LD_ADDR_EXP 46
12970: PUSH
12971: LD_INT 0
12973: ST_TO_ADDR
// sTroll := false ;
12974: LD_ADDR_EXP 47
12978: PUSH
12979: LD_INT 0
12981: ST_TO_ADDR
// sSlow := false ;
12982: LD_ADDR_EXP 48
12986: PUSH
12987: LD_INT 0
12989: ST_TO_ADDR
// sLack := false ;
12990: LD_ADDR_EXP 49
12994: PUSH
12995: LD_INT 0
12997: ST_TO_ADDR
// sTank := false ;
12998: LD_ADDR_EXP 51
13002: PUSH
13003: LD_INT 0
13005: ST_TO_ADDR
// sRemote := false ;
13006: LD_ADDR_EXP 52
13010: PUSH
13011: LD_INT 0
13013: ST_TO_ADDR
// sPowell := false ;
13014: LD_ADDR_EXP 53
13018: PUSH
13019: LD_INT 0
13021: ST_TO_ADDR
// sTeleport := false ;
13022: LD_ADDR_EXP 56
13026: PUSH
13027: LD_INT 0
13029: ST_TO_ADDR
// sOilTower := false ;
13030: LD_ADDR_EXP 58
13034: PUSH
13035: LD_INT 0
13037: ST_TO_ADDR
// sShovel := false ;
13038: LD_ADDR_EXP 59
13042: PUSH
13043: LD_INT 0
13045: ST_TO_ADDR
// sSheik := false ;
13046: LD_ADDR_EXP 60
13050: PUSH
13051: LD_INT 0
13053: ST_TO_ADDR
// sEarthquake := false ;
13054: LD_ADDR_EXP 62
13058: PUSH
13059: LD_INT 0
13061: ST_TO_ADDR
// sAI := false ;
13062: LD_ADDR_EXP 63
13066: PUSH
13067: LD_INT 0
13069: ST_TO_ADDR
// sCargo := false ;
13070: LD_ADDR_EXP 66
13074: PUSH
13075: LD_INT 0
13077: ST_TO_ADDR
// sDLaser := false ;
13078: LD_ADDR_EXP 67
13082: PUSH
13083: LD_INT 0
13085: ST_TO_ADDR
// sExchange := false ;
13086: LD_ADDR_EXP 68
13090: PUSH
13091: LD_INT 0
13093: ST_TO_ADDR
// sFac := false ;
13094: LD_ADDR_EXP 69
13098: PUSH
13099: LD_INT 0
13101: ST_TO_ADDR
// sPower := false ;
13102: LD_ADDR_EXP 70
13106: PUSH
13107: LD_INT 0
13109: ST_TO_ADDR
// sRandom := false ;
13110: LD_ADDR_EXP 71
13114: PUSH
13115: LD_INT 0
13117: ST_TO_ADDR
// sShield := false ;
13118: LD_ADDR_EXP 72
13122: PUSH
13123: LD_INT 0
13125: ST_TO_ADDR
// sTime := false ;
13126: LD_ADDR_EXP 73
13130: PUSH
13131: LD_INT 0
13133: ST_TO_ADDR
// sTools := false ;
13134: LD_ADDR_EXP 74
13138: PUSH
13139: LD_INT 0
13141: ST_TO_ADDR
// sSold := false ;
13142: LD_ADDR_EXP 39
13146: PUSH
13147: LD_INT 0
13149: ST_TO_ADDR
// sDiff := false ;
13150: LD_ADDR_EXP 40
13154: PUSH
13155: LD_INT 0
13157: ST_TO_ADDR
// sFog := false ;
13158: LD_ADDR_EXP 43
13162: PUSH
13163: LD_INT 0
13165: ST_TO_ADDR
// sReset := false ;
13166: LD_ADDR_EXP 44
13170: PUSH
13171: LD_INT 0
13173: ST_TO_ADDR
// sSun := false ;
13174: LD_ADDR_EXP 45
13178: PUSH
13179: LD_INT 0
13181: ST_TO_ADDR
// sTiger := false ;
13182: LD_ADDR_EXP 41
13186: PUSH
13187: LD_INT 0
13189: ST_TO_ADDR
// sBomb := false ;
13190: LD_ADDR_EXP 42
13194: PUSH
13195: LD_INT 0
13197: ST_TO_ADDR
// sWound := false ;
13198: LD_ADDR_EXP 50
13202: PUSH
13203: LD_INT 0
13205: ST_TO_ADDR
// sBetray := false ;
13206: LD_ADDR_EXP 54
13210: PUSH
13211: LD_INT 0
13213: ST_TO_ADDR
// sContamin := false ;
13214: LD_ADDR_EXP 55
13218: PUSH
13219: LD_INT 0
13221: ST_TO_ADDR
// sOil := false ;
13222: LD_ADDR_EXP 57
13226: PUSH
13227: LD_INT 0
13229: ST_TO_ADDR
// sStu := false ;
13230: LD_ADDR_EXP 61
13234: PUSH
13235: LD_INT 0
13237: ST_TO_ADDR
// sBazooka := false ;
13238: LD_ADDR_EXP 64
13242: PUSH
13243: LD_INT 0
13245: ST_TO_ADDR
// sMortar := false ;
13246: LD_ADDR_EXP 65
13250: PUSH
13251: LD_INT 0
13253: ST_TO_ADDR
// sRanger := false ;
13254: LD_ADDR_EXP 75
13258: PUSH
13259: LD_INT 0
13261: ST_TO_ADDR
// sComputer := false ;
13262: LD_ADDR_EXP 76
13266: PUSH
13267: LD_INT 0
13269: ST_TO_ADDR
// s30 := false ;
13270: LD_ADDR_EXP 77
13274: PUSH
13275: LD_INT 0
13277: ST_TO_ADDR
// s60 := false ;
13278: LD_ADDR_EXP 78
13282: PUSH
13283: LD_INT 0
13285: ST_TO_ADDR
// end ;
13286: LD_VAR 0 1
13290: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13291: LD_INT 0
13293: PPUSH
13294: PPUSH
13295: PPUSH
13296: PPUSH
13297: PPUSH
13298: PPUSH
13299: PPUSH
// result := [ ] ;
13300: LD_ADDR_VAR 0 2
13304: PUSH
13305: EMPTY
13306: ST_TO_ADDR
// if campaign_id = 1 then
13307: LD_OWVAR 69
13311: PUSH
13312: LD_INT 1
13314: EQUAL
13315: IFFALSE 16481
// begin case mission_number of 1 :
13317: LD_OWVAR 70
13321: PUSH
13322: LD_INT 1
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13406
13330: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13331: LD_ADDR_VAR 0 2
13335: PUSH
13336: LD_INT 2
13338: PUSH
13339: LD_INT 4
13341: PUSH
13342: LD_INT 11
13344: PUSH
13345: LD_INT 12
13347: PUSH
13348: LD_INT 15
13350: PUSH
13351: LD_INT 16
13353: PUSH
13354: LD_INT 22
13356: PUSH
13357: LD_INT 23
13359: PUSH
13360: LD_INT 26
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 101
13376: PUSH
13377: LD_INT 102
13379: PUSH
13380: LD_INT 106
13382: PUSH
13383: LD_INT 116
13385: PUSH
13386: LD_INT 117
13388: PUSH
13389: LD_INT 118
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: ST_TO_ADDR
13404: GO 16479
13406: LD_INT 2
13408: DOUBLE
13409: EQUAL
13410: IFTRUE 13414
13412: GO 13498
13414: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13415: LD_ADDR_VAR 0 2
13419: PUSH
13420: LD_INT 2
13422: PUSH
13423: LD_INT 4
13425: PUSH
13426: LD_INT 11
13428: PUSH
13429: LD_INT 12
13431: PUSH
13432: LD_INT 15
13434: PUSH
13435: LD_INT 16
13437: PUSH
13438: LD_INT 22
13440: PUSH
13441: LD_INT 23
13443: PUSH
13444: LD_INT 26
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 101
13460: PUSH
13461: LD_INT 102
13463: PUSH
13464: LD_INT 105
13466: PUSH
13467: LD_INT 106
13469: PUSH
13470: LD_INT 108
13472: PUSH
13473: LD_INT 116
13475: PUSH
13476: LD_INT 117
13478: PUSH
13479: LD_INT 118
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: ST_TO_ADDR
13496: GO 16479
13498: LD_INT 3
13500: DOUBLE
13501: EQUAL
13502: IFTRUE 13506
13504: GO 13594
13506: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13507: LD_ADDR_VAR 0 2
13511: PUSH
13512: LD_INT 2
13514: PUSH
13515: LD_INT 4
13517: PUSH
13518: LD_INT 5
13520: PUSH
13521: LD_INT 11
13523: PUSH
13524: LD_INT 12
13526: PUSH
13527: LD_INT 15
13529: PUSH
13530: LD_INT 16
13532: PUSH
13533: LD_INT 22
13535: PUSH
13536: LD_INT 26
13538: PUSH
13539: LD_INT 36
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 101
13556: PUSH
13557: LD_INT 102
13559: PUSH
13560: LD_INT 105
13562: PUSH
13563: LD_INT 106
13565: PUSH
13566: LD_INT 108
13568: PUSH
13569: LD_INT 116
13571: PUSH
13572: LD_INT 117
13574: PUSH
13575: LD_INT 118
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: ST_TO_ADDR
13592: GO 16479
13594: LD_INT 4
13596: DOUBLE
13597: EQUAL
13598: IFTRUE 13602
13600: GO 13698
13602: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13603: LD_ADDR_VAR 0 2
13607: PUSH
13608: LD_INT 2
13610: PUSH
13611: LD_INT 4
13613: PUSH
13614: LD_INT 5
13616: PUSH
13617: LD_INT 8
13619: PUSH
13620: LD_INT 11
13622: PUSH
13623: LD_INT 12
13625: PUSH
13626: LD_INT 15
13628: PUSH
13629: LD_INT 16
13631: PUSH
13632: LD_INT 22
13634: PUSH
13635: LD_INT 23
13637: PUSH
13638: LD_INT 26
13640: PUSH
13641: LD_INT 36
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 101
13660: PUSH
13661: LD_INT 102
13663: PUSH
13664: LD_INT 105
13666: PUSH
13667: LD_INT 106
13669: PUSH
13670: LD_INT 108
13672: PUSH
13673: LD_INT 116
13675: PUSH
13676: LD_INT 117
13678: PUSH
13679: LD_INT 118
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: ST_TO_ADDR
13696: GO 16479
13698: LD_INT 5
13700: DOUBLE
13701: EQUAL
13702: IFTRUE 13706
13704: GO 13818
13706: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13707: LD_ADDR_VAR 0 2
13711: PUSH
13712: LD_INT 2
13714: PUSH
13715: LD_INT 4
13717: PUSH
13718: LD_INT 5
13720: PUSH
13721: LD_INT 6
13723: PUSH
13724: LD_INT 8
13726: PUSH
13727: LD_INT 11
13729: PUSH
13730: LD_INT 12
13732: PUSH
13733: LD_INT 15
13735: PUSH
13736: LD_INT 16
13738: PUSH
13739: LD_INT 22
13741: PUSH
13742: LD_INT 23
13744: PUSH
13745: LD_INT 25
13747: PUSH
13748: LD_INT 26
13750: PUSH
13751: LD_INT 36
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 101
13772: PUSH
13773: LD_INT 102
13775: PUSH
13776: LD_INT 105
13778: PUSH
13779: LD_INT 106
13781: PUSH
13782: LD_INT 108
13784: PUSH
13785: LD_INT 109
13787: PUSH
13788: LD_INT 112
13790: PUSH
13791: LD_INT 116
13793: PUSH
13794: LD_INT 117
13796: PUSH
13797: LD_INT 118
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: ST_TO_ADDR
13816: GO 16479
13818: LD_INT 6
13820: DOUBLE
13821: EQUAL
13822: IFTRUE 13826
13824: GO 13958
13826: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13827: LD_ADDR_VAR 0 2
13831: PUSH
13832: LD_INT 2
13834: PUSH
13835: LD_INT 4
13837: PUSH
13838: LD_INT 5
13840: PUSH
13841: LD_INT 6
13843: PUSH
13844: LD_INT 8
13846: PUSH
13847: LD_INT 11
13849: PUSH
13850: LD_INT 12
13852: PUSH
13853: LD_INT 15
13855: PUSH
13856: LD_INT 16
13858: PUSH
13859: LD_INT 20
13861: PUSH
13862: LD_INT 21
13864: PUSH
13865: LD_INT 22
13867: PUSH
13868: LD_INT 23
13870: PUSH
13871: LD_INT 25
13873: PUSH
13874: LD_INT 26
13876: PUSH
13877: LD_INT 30
13879: PUSH
13880: LD_INT 31
13882: PUSH
13883: LD_INT 32
13885: PUSH
13886: LD_INT 36
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 101
13912: PUSH
13913: LD_INT 102
13915: PUSH
13916: LD_INT 105
13918: PUSH
13919: LD_INT 106
13921: PUSH
13922: LD_INT 108
13924: PUSH
13925: LD_INT 109
13927: PUSH
13928: LD_INT 112
13930: PUSH
13931: LD_INT 116
13933: PUSH
13934: LD_INT 117
13936: PUSH
13937: LD_INT 118
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: ST_TO_ADDR
13956: GO 16479
13958: LD_INT 7
13960: DOUBLE
13961: EQUAL
13962: IFTRUE 13966
13964: GO 14078
13966: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13967: LD_ADDR_VAR 0 2
13971: PUSH
13972: LD_INT 2
13974: PUSH
13975: LD_INT 4
13977: PUSH
13978: LD_INT 5
13980: PUSH
13981: LD_INT 7
13983: PUSH
13984: LD_INT 11
13986: PUSH
13987: LD_INT 12
13989: PUSH
13990: LD_INT 15
13992: PUSH
13993: LD_INT 16
13995: PUSH
13996: LD_INT 20
13998: PUSH
13999: LD_INT 21
14001: PUSH
14002: LD_INT 22
14004: PUSH
14005: LD_INT 23
14007: PUSH
14008: LD_INT 25
14010: PUSH
14011: LD_INT 26
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 101
14032: PUSH
14033: LD_INT 102
14035: PUSH
14036: LD_INT 103
14038: PUSH
14039: LD_INT 105
14041: PUSH
14042: LD_INT 106
14044: PUSH
14045: LD_INT 108
14047: PUSH
14048: LD_INT 112
14050: PUSH
14051: LD_INT 116
14053: PUSH
14054: LD_INT 117
14056: PUSH
14057: LD_INT 118
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: ST_TO_ADDR
14076: GO 16479
14078: LD_INT 8
14080: DOUBLE
14081: EQUAL
14082: IFTRUE 14086
14084: GO 14226
14086: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14087: LD_ADDR_VAR 0 2
14091: PUSH
14092: LD_INT 2
14094: PUSH
14095: LD_INT 4
14097: PUSH
14098: LD_INT 5
14100: PUSH
14101: LD_INT 6
14103: PUSH
14104: LD_INT 7
14106: PUSH
14107: LD_INT 8
14109: PUSH
14110: LD_INT 11
14112: PUSH
14113: LD_INT 12
14115: PUSH
14116: LD_INT 15
14118: PUSH
14119: LD_INT 16
14121: PUSH
14122: LD_INT 20
14124: PUSH
14125: LD_INT 21
14127: PUSH
14128: LD_INT 22
14130: PUSH
14131: LD_INT 23
14133: PUSH
14134: LD_INT 25
14136: PUSH
14137: LD_INT 26
14139: PUSH
14140: LD_INT 30
14142: PUSH
14143: LD_INT 31
14145: PUSH
14146: LD_INT 32
14148: PUSH
14149: LD_INT 36
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 101
14176: PUSH
14177: LD_INT 102
14179: PUSH
14180: LD_INT 103
14182: PUSH
14183: LD_INT 105
14185: PUSH
14186: LD_INT 106
14188: PUSH
14189: LD_INT 108
14191: PUSH
14192: LD_INT 109
14194: PUSH
14195: LD_INT 112
14197: PUSH
14198: LD_INT 116
14200: PUSH
14201: LD_INT 117
14203: PUSH
14204: LD_INT 118
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: ST_TO_ADDR
14224: GO 16479
14226: LD_INT 9
14228: DOUBLE
14229: EQUAL
14230: IFTRUE 14234
14232: GO 14382
14234: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14235: LD_ADDR_VAR 0 2
14239: PUSH
14240: LD_INT 2
14242: PUSH
14243: LD_INT 4
14245: PUSH
14246: LD_INT 5
14248: PUSH
14249: LD_INT 6
14251: PUSH
14252: LD_INT 7
14254: PUSH
14255: LD_INT 8
14257: PUSH
14258: LD_INT 11
14260: PUSH
14261: LD_INT 12
14263: PUSH
14264: LD_INT 15
14266: PUSH
14267: LD_INT 16
14269: PUSH
14270: LD_INT 20
14272: PUSH
14273: LD_INT 21
14275: PUSH
14276: LD_INT 22
14278: PUSH
14279: LD_INT 23
14281: PUSH
14282: LD_INT 25
14284: PUSH
14285: LD_INT 26
14287: PUSH
14288: LD_INT 28
14290: PUSH
14291: LD_INT 30
14293: PUSH
14294: LD_INT 31
14296: PUSH
14297: LD_INT 32
14299: PUSH
14300: LD_INT 36
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 101
14328: PUSH
14329: LD_INT 102
14331: PUSH
14332: LD_INT 103
14334: PUSH
14335: LD_INT 105
14337: PUSH
14338: LD_INT 106
14340: PUSH
14341: LD_INT 108
14343: PUSH
14344: LD_INT 109
14346: PUSH
14347: LD_INT 112
14349: PUSH
14350: LD_INT 114
14352: PUSH
14353: LD_INT 116
14355: PUSH
14356: LD_INT 117
14358: PUSH
14359: LD_INT 118
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: ST_TO_ADDR
14380: GO 16479
14382: LD_INT 10
14384: DOUBLE
14385: EQUAL
14386: IFTRUE 14390
14388: GO 14586
14390: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14391: LD_ADDR_VAR 0 2
14395: PUSH
14396: LD_INT 2
14398: PUSH
14399: LD_INT 4
14401: PUSH
14402: LD_INT 5
14404: PUSH
14405: LD_INT 6
14407: PUSH
14408: LD_INT 7
14410: PUSH
14411: LD_INT 8
14413: PUSH
14414: LD_INT 9
14416: PUSH
14417: LD_INT 10
14419: PUSH
14420: LD_INT 11
14422: PUSH
14423: LD_INT 12
14425: PUSH
14426: LD_INT 13
14428: PUSH
14429: LD_INT 14
14431: PUSH
14432: LD_INT 15
14434: PUSH
14435: LD_INT 16
14437: PUSH
14438: LD_INT 17
14440: PUSH
14441: LD_INT 18
14443: PUSH
14444: LD_INT 19
14446: PUSH
14447: LD_INT 20
14449: PUSH
14450: LD_INT 21
14452: PUSH
14453: LD_INT 22
14455: PUSH
14456: LD_INT 23
14458: PUSH
14459: LD_INT 24
14461: PUSH
14462: LD_INT 25
14464: PUSH
14465: LD_INT 26
14467: PUSH
14468: LD_INT 28
14470: PUSH
14471: LD_INT 30
14473: PUSH
14474: LD_INT 31
14476: PUSH
14477: LD_INT 32
14479: PUSH
14480: LD_INT 36
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 101
14516: PUSH
14517: LD_INT 102
14519: PUSH
14520: LD_INT 103
14522: PUSH
14523: LD_INT 104
14525: PUSH
14526: LD_INT 105
14528: PUSH
14529: LD_INT 106
14531: PUSH
14532: LD_INT 107
14534: PUSH
14535: LD_INT 108
14537: PUSH
14538: LD_INT 109
14540: PUSH
14541: LD_INT 110
14543: PUSH
14544: LD_INT 111
14546: PUSH
14547: LD_INT 112
14549: PUSH
14550: LD_INT 114
14552: PUSH
14553: LD_INT 116
14555: PUSH
14556: LD_INT 117
14558: PUSH
14559: LD_INT 118
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: ST_TO_ADDR
14584: GO 16479
14586: LD_INT 11
14588: DOUBLE
14589: EQUAL
14590: IFTRUE 14594
14592: GO 14798
14594: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14595: LD_ADDR_VAR 0 2
14599: PUSH
14600: LD_INT 2
14602: PUSH
14603: LD_INT 3
14605: PUSH
14606: LD_INT 4
14608: PUSH
14609: LD_INT 5
14611: PUSH
14612: LD_INT 6
14614: PUSH
14615: LD_INT 7
14617: PUSH
14618: LD_INT 8
14620: PUSH
14621: LD_INT 9
14623: PUSH
14624: LD_INT 10
14626: PUSH
14627: LD_INT 11
14629: PUSH
14630: LD_INT 12
14632: PUSH
14633: LD_INT 13
14635: PUSH
14636: LD_INT 14
14638: PUSH
14639: LD_INT 15
14641: PUSH
14642: LD_INT 16
14644: PUSH
14645: LD_INT 17
14647: PUSH
14648: LD_INT 18
14650: PUSH
14651: LD_INT 19
14653: PUSH
14654: LD_INT 20
14656: PUSH
14657: LD_INT 21
14659: PUSH
14660: LD_INT 22
14662: PUSH
14663: LD_INT 23
14665: PUSH
14666: LD_INT 24
14668: PUSH
14669: LD_INT 25
14671: PUSH
14672: LD_INT 26
14674: PUSH
14675: LD_INT 28
14677: PUSH
14678: LD_INT 30
14680: PUSH
14681: LD_INT 31
14683: PUSH
14684: LD_INT 32
14686: PUSH
14687: LD_INT 34
14689: PUSH
14690: LD_INT 36
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: PUSH
14726: LD_INT 101
14728: PUSH
14729: LD_INT 102
14731: PUSH
14732: LD_INT 103
14734: PUSH
14735: LD_INT 104
14737: PUSH
14738: LD_INT 105
14740: PUSH
14741: LD_INT 106
14743: PUSH
14744: LD_INT 107
14746: PUSH
14747: LD_INT 108
14749: PUSH
14750: LD_INT 109
14752: PUSH
14753: LD_INT 110
14755: PUSH
14756: LD_INT 111
14758: PUSH
14759: LD_INT 112
14761: PUSH
14762: LD_INT 114
14764: PUSH
14765: LD_INT 116
14767: PUSH
14768: LD_INT 117
14770: PUSH
14771: LD_INT 118
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: ST_TO_ADDR
14796: GO 16479
14798: LD_INT 12
14800: DOUBLE
14801: EQUAL
14802: IFTRUE 14806
14804: GO 15026
14806: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14807: LD_ADDR_VAR 0 2
14811: PUSH
14812: LD_INT 1
14814: PUSH
14815: LD_INT 2
14817: PUSH
14818: LD_INT 3
14820: PUSH
14821: LD_INT 4
14823: PUSH
14824: LD_INT 5
14826: PUSH
14827: LD_INT 6
14829: PUSH
14830: LD_INT 7
14832: PUSH
14833: LD_INT 8
14835: PUSH
14836: LD_INT 9
14838: PUSH
14839: LD_INT 10
14841: PUSH
14842: LD_INT 11
14844: PUSH
14845: LD_INT 12
14847: PUSH
14848: LD_INT 13
14850: PUSH
14851: LD_INT 14
14853: PUSH
14854: LD_INT 15
14856: PUSH
14857: LD_INT 16
14859: PUSH
14860: LD_INT 17
14862: PUSH
14863: LD_INT 18
14865: PUSH
14866: LD_INT 19
14868: PUSH
14869: LD_INT 20
14871: PUSH
14872: LD_INT 21
14874: PUSH
14875: LD_INT 22
14877: PUSH
14878: LD_INT 23
14880: PUSH
14881: LD_INT 24
14883: PUSH
14884: LD_INT 25
14886: PUSH
14887: LD_INT 26
14889: PUSH
14890: LD_INT 27
14892: PUSH
14893: LD_INT 28
14895: PUSH
14896: LD_INT 30
14898: PUSH
14899: LD_INT 31
14901: PUSH
14902: LD_INT 32
14904: PUSH
14905: LD_INT 33
14907: PUSH
14908: LD_INT 34
14910: PUSH
14911: LD_INT 36
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 101
14952: PUSH
14953: LD_INT 102
14955: PUSH
14956: LD_INT 103
14958: PUSH
14959: LD_INT 104
14961: PUSH
14962: LD_INT 105
14964: PUSH
14965: LD_INT 106
14967: PUSH
14968: LD_INT 107
14970: PUSH
14971: LD_INT 108
14973: PUSH
14974: LD_INT 109
14976: PUSH
14977: LD_INT 110
14979: PUSH
14980: LD_INT 111
14982: PUSH
14983: LD_INT 112
14985: PUSH
14986: LD_INT 113
14988: PUSH
14989: LD_INT 114
14991: PUSH
14992: LD_INT 116
14994: PUSH
14995: LD_INT 117
14997: PUSH
14998: LD_INT 118
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: ST_TO_ADDR
15024: GO 16479
15026: LD_INT 13
15028: DOUBLE
15029: EQUAL
15030: IFTRUE 15034
15032: GO 15242
15034: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15035: LD_ADDR_VAR 0 2
15039: PUSH
15040: LD_INT 1
15042: PUSH
15043: LD_INT 2
15045: PUSH
15046: LD_INT 3
15048: PUSH
15049: LD_INT 4
15051: PUSH
15052: LD_INT 5
15054: PUSH
15055: LD_INT 8
15057: PUSH
15058: LD_INT 9
15060: PUSH
15061: LD_INT 10
15063: PUSH
15064: LD_INT 11
15066: PUSH
15067: LD_INT 12
15069: PUSH
15070: LD_INT 14
15072: PUSH
15073: LD_INT 15
15075: PUSH
15076: LD_INT 16
15078: PUSH
15079: LD_INT 17
15081: PUSH
15082: LD_INT 18
15084: PUSH
15085: LD_INT 19
15087: PUSH
15088: LD_INT 20
15090: PUSH
15091: LD_INT 21
15093: PUSH
15094: LD_INT 22
15096: PUSH
15097: LD_INT 23
15099: PUSH
15100: LD_INT 24
15102: PUSH
15103: LD_INT 25
15105: PUSH
15106: LD_INT 26
15108: PUSH
15109: LD_INT 27
15111: PUSH
15112: LD_INT 28
15114: PUSH
15115: LD_INT 30
15117: PUSH
15118: LD_INT 31
15120: PUSH
15121: LD_INT 32
15123: PUSH
15124: LD_INT 33
15126: PUSH
15127: LD_INT 34
15129: PUSH
15130: LD_INT 36
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: PUSH
15166: LD_INT 101
15168: PUSH
15169: LD_INT 102
15171: PUSH
15172: LD_INT 103
15174: PUSH
15175: LD_INT 104
15177: PUSH
15178: LD_INT 105
15180: PUSH
15181: LD_INT 106
15183: PUSH
15184: LD_INT 107
15186: PUSH
15187: LD_INT 108
15189: PUSH
15190: LD_INT 109
15192: PUSH
15193: LD_INT 110
15195: PUSH
15196: LD_INT 111
15198: PUSH
15199: LD_INT 112
15201: PUSH
15202: LD_INT 113
15204: PUSH
15205: LD_INT 114
15207: PUSH
15208: LD_INT 116
15210: PUSH
15211: LD_INT 117
15213: PUSH
15214: LD_INT 118
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: ST_TO_ADDR
15240: GO 16479
15242: LD_INT 14
15244: DOUBLE
15245: EQUAL
15246: IFTRUE 15250
15248: GO 15474
15250: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15251: LD_ADDR_VAR 0 2
15255: PUSH
15256: LD_INT 1
15258: PUSH
15259: LD_INT 2
15261: PUSH
15262: LD_INT 3
15264: PUSH
15265: LD_INT 4
15267: PUSH
15268: LD_INT 5
15270: PUSH
15271: LD_INT 6
15273: PUSH
15274: LD_INT 7
15276: PUSH
15277: LD_INT 8
15279: PUSH
15280: LD_INT 9
15282: PUSH
15283: LD_INT 10
15285: PUSH
15286: LD_INT 11
15288: PUSH
15289: LD_INT 12
15291: PUSH
15292: LD_INT 13
15294: PUSH
15295: LD_INT 14
15297: PUSH
15298: LD_INT 15
15300: PUSH
15301: LD_INT 16
15303: PUSH
15304: LD_INT 17
15306: PUSH
15307: LD_INT 18
15309: PUSH
15310: LD_INT 19
15312: PUSH
15313: LD_INT 20
15315: PUSH
15316: LD_INT 21
15318: PUSH
15319: LD_INT 22
15321: PUSH
15322: LD_INT 23
15324: PUSH
15325: LD_INT 24
15327: PUSH
15328: LD_INT 25
15330: PUSH
15331: LD_INT 26
15333: PUSH
15334: LD_INT 27
15336: PUSH
15337: LD_INT 28
15339: PUSH
15340: LD_INT 29
15342: PUSH
15343: LD_INT 30
15345: PUSH
15346: LD_INT 31
15348: PUSH
15349: LD_INT 32
15351: PUSH
15352: LD_INT 33
15354: PUSH
15355: LD_INT 34
15357: PUSH
15358: LD_INT 36
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 101
15400: PUSH
15401: LD_INT 102
15403: PUSH
15404: LD_INT 103
15406: PUSH
15407: LD_INT 104
15409: PUSH
15410: LD_INT 105
15412: PUSH
15413: LD_INT 106
15415: PUSH
15416: LD_INT 107
15418: PUSH
15419: LD_INT 108
15421: PUSH
15422: LD_INT 109
15424: PUSH
15425: LD_INT 110
15427: PUSH
15428: LD_INT 111
15430: PUSH
15431: LD_INT 112
15433: PUSH
15434: LD_INT 113
15436: PUSH
15437: LD_INT 114
15439: PUSH
15440: LD_INT 116
15442: PUSH
15443: LD_INT 117
15445: PUSH
15446: LD_INT 118
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: ST_TO_ADDR
15472: GO 16479
15474: LD_INT 15
15476: DOUBLE
15477: EQUAL
15478: IFTRUE 15482
15480: GO 15706
15482: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15483: LD_ADDR_VAR 0 2
15487: PUSH
15488: LD_INT 1
15490: PUSH
15491: LD_INT 2
15493: PUSH
15494: LD_INT 3
15496: PUSH
15497: LD_INT 4
15499: PUSH
15500: LD_INT 5
15502: PUSH
15503: LD_INT 6
15505: PUSH
15506: LD_INT 7
15508: PUSH
15509: LD_INT 8
15511: PUSH
15512: LD_INT 9
15514: PUSH
15515: LD_INT 10
15517: PUSH
15518: LD_INT 11
15520: PUSH
15521: LD_INT 12
15523: PUSH
15524: LD_INT 13
15526: PUSH
15527: LD_INT 14
15529: PUSH
15530: LD_INT 15
15532: PUSH
15533: LD_INT 16
15535: PUSH
15536: LD_INT 17
15538: PUSH
15539: LD_INT 18
15541: PUSH
15542: LD_INT 19
15544: PUSH
15545: LD_INT 20
15547: PUSH
15548: LD_INT 21
15550: PUSH
15551: LD_INT 22
15553: PUSH
15554: LD_INT 23
15556: PUSH
15557: LD_INT 24
15559: PUSH
15560: LD_INT 25
15562: PUSH
15563: LD_INT 26
15565: PUSH
15566: LD_INT 27
15568: PUSH
15569: LD_INT 28
15571: PUSH
15572: LD_INT 29
15574: PUSH
15575: LD_INT 30
15577: PUSH
15578: LD_INT 31
15580: PUSH
15581: LD_INT 32
15583: PUSH
15584: LD_INT 33
15586: PUSH
15587: LD_INT 34
15589: PUSH
15590: LD_INT 36
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 101
15632: PUSH
15633: LD_INT 102
15635: PUSH
15636: LD_INT 103
15638: PUSH
15639: LD_INT 104
15641: PUSH
15642: LD_INT 105
15644: PUSH
15645: LD_INT 106
15647: PUSH
15648: LD_INT 107
15650: PUSH
15651: LD_INT 108
15653: PUSH
15654: LD_INT 109
15656: PUSH
15657: LD_INT 110
15659: PUSH
15660: LD_INT 111
15662: PUSH
15663: LD_INT 112
15665: PUSH
15666: LD_INT 113
15668: PUSH
15669: LD_INT 114
15671: PUSH
15672: LD_INT 116
15674: PUSH
15675: LD_INT 117
15677: PUSH
15678: LD_INT 118
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: ST_TO_ADDR
15704: GO 16479
15706: LD_INT 16
15708: DOUBLE
15709: EQUAL
15710: IFTRUE 15714
15712: GO 15850
15714: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15715: LD_ADDR_VAR 0 2
15719: PUSH
15720: LD_INT 2
15722: PUSH
15723: LD_INT 4
15725: PUSH
15726: LD_INT 5
15728: PUSH
15729: LD_INT 7
15731: PUSH
15732: LD_INT 11
15734: PUSH
15735: LD_INT 12
15737: PUSH
15738: LD_INT 15
15740: PUSH
15741: LD_INT 16
15743: PUSH
15744: LD_INT 20
15746: PUSH
15747: LD_INT 21
15749: PUSH
15750: LD_INT 22
15752: PUSH
15753: LD_INT 23
15755: PUSH
15756: LD_INT 25
15758: PUSH
15759: LD_INT 26
15761: PUSH
15762: LD_INT 30
15764: PUSH
15765: LD_INT 31
15767: PUSH
15768: LD_INT 32
15770: PUSH
15771: LD_INT 33
15773: PUSH
15774: LD_INT 34
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: PUSH
15798: LD_INT 101
15800: PUSH
15801: LD_INT 102
15803: PUSH
15804: LD_INT 103
15806: PUSH
15807: LD_INT 106
15809: PUSH
15810: LD_INT 108
15812: PUSH
15813: LD_INT 112
15815: PUSH
15816: LD_INT 113
15818: PUSH
15819: LD_INT 114
15821: PUSH
15822: LD_INT 116
15824: PUSH
15825: LD_INT 117
15827: PUSH
15828: LD_INT 118
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: ST_TO_ADDR
15848: GO 16479
15850: LD_INT 17
15852: DOUBLE
15853: EQUAL
15854: IFTRUE 15858
15856: GO 16082
15858: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15859: LD_ADDR_VAR 0 2
15863: PUSH
15864: LD_INT 1
15866: PUSH
15867: LD_INT 2
15869: PUSH
15870: LD_INT 3
15872: PUSH
15873: LD_INT 4
15875: PUSH
15876: LD_INT 5
15878: PUSH
15879: LD_INT 6
15881: PUSH
15882: LD_INT 7
15884: PUSH
15885: LD_INT 8
15887: PUSH
15888: LD_INT 9
15890: PUSH
15891: LD_INT 10
15893: PUSH
15894: LD_INT 11
15896: PUSH
15897: LD_INT 12
15899: PUSH
15900: LD_INT 13
15902: PUSH
15903: LD_INT 14
15905: PUSH
15906: LD_INT 15
15908: PUSH
15909: LD_INT 16
15911: PUSH
15912: LD_INT 17
15914: PUSH
15915: LD_INT 18
15917: PUSH
15918: LD_INT 19
15920: PUSH
15921: LD_INT 20
15923: PUSH
15924: LD_INT 21
15926: PUSH
15927: LD_INT 22
15929: PUSH
15930: LD_INT 23
15932: PUSH
15933: LD_INT 24
15935: PUSH
15936: LD_INT 25
15938: PUSH
15939: LD_INT 26
15941: PUSH
15942: LD_INT 27
15944: PUSH
15945: LD_INT 28
15947: PUSH
15948: LD_INT 29
15950: PUSH
15951: LD_INT 30
15953: PUSH
15954: LD_INT 31
15956: PUSH
15957: LD_INT 32
15959: PUSH
15960: LD_INT 33
15962: PUSH
15963: LD_INT 34
15965: PUSH
15966: LD_INT 36
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 101
16008: PUSH
16009: LD_INT 102
16011: PUSH
16012: LD_INT 103
16014: PUSH
16015: LD_INT 104
16017: PUSH
16018: LD_INT 105
16020: PUSH
16021: LD_INT 106
16023: PUSH
16024: LD_INT 107
16026: PUSH
16027: LD_INT 108
16029: PUSH
16030: LD_INT 109
16032: PUSH
16033: LD_INT 110
16035: PUSH
16036: LD_INT 111
16038: PUSH
16039: LD_INT 112
16041: PUSH
16042: LD_INT 113
16044: PUSH
16045: LD_INT 114
16047: PUSH
16048: LD_INT 116
16050: PUSH
16051: LD_INT 117
16053: PUSH
16054: LD_INT 118
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: ST_TO_ADDR
16080: GO 16479
16082: LD_INT 18
16084: DOUBLE
16085: EQUAL
16086: IFTRUE 16090
16088: GO 16238
16090: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16091: LD_ADDR_VAR 0 2
16095: PUSH
16096: LD_INT 2
16098: PUSH
16099: LD_INT 4
16101: PUSH
16102: LD_INT 5
16104: PUSH
16105: LD_INT 7
16107: PUSH
16108: LD_INT 11
16110: PUSH
16111: LD_INT 12
16113: PUSH
16114: LD_INT 15
16116: PUSH
16117: LD_INT 16
16119: PUSH
16120: LD_INT 20
16122: PUSH
16123: LD_INT 21
16125: PUSH
16126: LD_INT 22
16128: PUSH
16129: LD_INT 23
16131: PUSH
16132: LD_INT 25
16134: PUSH
16135: LD_INT 26
16137: PUSH
16138: LD_INT 30
16140: PUSH
16141: LD_INT 31
16143: PUSH
16144: LD_INT 32
16146: PUSH
16147: LD_INT 33
16149: PUSH
16150: LD_INT 34
16152: PUSH
16153: LD_INT 35
16155: PUSH
16156: LD_INT 36
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 101
16184: PUSH
16185: LD_INT 102
16187: PUSH
16188: LD_INT 103
16190: PUSH
16191: LD_INT 106
16193: PUSH
16194: LD_INT 108
16196: PUSH
16197: LD_INT 112
16199: PUSH
16200: LD_INT 113
16202: PUSH
16203: LD_INT 114
16205: PUSH
16206: LD_INT 115
16208: PUSH
16209: LD_INT 116
16211: PUSH
16212: LD_INT 117
16214: PUSH
16215: LD_INT 118
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: ST_TO_ADDR
16236: GO 16479
16238: LD_INT 19
16240: DOUBLE
16241: EQUAL
16242: IFTRUE 16246
16244: GO 16478
16246: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16247: LD_ADDR_VAR 0 2
16251: PUSH
16252: LD_INT 1
16254: PUSH
16255: LD_INT 2
16257: PUSH
16258: LD_INT 3
16260: PUSH
16261: LD_INT 4
16263: PUSH
16264: LD_INT 5
16266: PUSH
16267: LD_INT 6
16269: PUSH
16270: LD_INT 7
16272: PUSH
16273: LD_INT 8
16275: PUSH
16276: LD_INT 9
16278: PUSH
16279: LD_INT 10
16281: PUSH
16282: LD_INT 11
16284: PUSH
16285: LD_INT 12
16287: PUSH
16288: LD_INT 13
16290: PUSH
16291: LD_INT 14
16293: PUSH
16294: LD_INT 15
16296: PUSH
16297: LD_INT 16
16299: PUSH
16300: LD_INT 17
16302: PUSH
16303: LD_INT 18
16305: PUSH
16306: LD_INT 19
16308: PUSH
16309: LD_INT 20
16311: PUSH
16312: LD_INT 21
16314: PUSH
16315: LD_INT 22
16317: PUSH
16318: LD_INT 23
16320: PUSH
16321: LD_INT 24
16323: PUSH
16324: LD_INT 25
16326: PUSH
16327: LD_INT 26
16329: PUSH
16330: LD_INT 27
16332: PUSH
16333: LD_INT 28
16335: PUSH
16336: LD_INT 29
16338: PUSH
16339: LD_INT 30
16341: PUSH
16342: LD_INT 31
16344: PUSH
16345: LD_INT 32
16347: PUSH
16348: LD_INT 33
16350: PUSH
16351: LD_INT 34
16353: PUSH
16354: LD_INT 35
16356: PUSH
16357: LD_INT 36
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: PUSH
16398: LD_INT 101
16400: PUSH
16401: LD_INT 102
16403: PUSH
16404: LD_INT 103
16406: PUSH
16407: LD_INT 104
16409: PUSH
16410: LD_INT 105
16412: PUSH
16413: LD_INT 106
16415: PUSH
16416: LD_INT 107
16418: PUSH
16419: LD_INT 108
16421: PUSH
16422: LD_INT 109
16424: PUSH
16425: LD_INT 110
16427: PUSH
16428: LD_INT 111
16430: PUSH
16431: LD_INT 112
16433: PUSH
16434: LD_INT 113
16436: PUSH
16437: LD_INT 114
16439: PUSH
16440: LD_INT 115
16442: PUSH
16443: LD_INT 116
16445: PUSH
16446: LD_INT 117
16448: PUSH
16449: LD_INT 118
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: ST_TO_ADDR
16476: GO 16479
16478: POP
// end else
16479: GO 16710
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16481: LD_ADDR_VAR 0 2
16485: PUSH
16486: LD_INT 1
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: LD_INT 3
16494: PUSH
16495: LD_INT 4
16497: PUSH
16498: LD_INT 5
16500: PUSH
16501: LD_INT 6
16503: PUSH
16504: LD_INT 7
16506: PUSH
16507: LD_INT 8
16509: PUSH
16510: LD_INT 9
16512: PUSH
16513: LD_INT 10
16515: PUSH
16516: LD_INT 11
16518: PUSH
16519: LD_INT 12
16521: PUSH
16522: LD_INT 13
16524: PUSH
16525: LD_INT 14
16527: PUSH
16528: LD_INT 15
16530: PUSH
16531: LD_INT 16
16533: PUSH
16534: LD_INT 17
16536: PUSH
16537: LD_INT 18
16539: PUSH
16540: LD_INT 19
16542: PUSH
16543: LD_INT 20
16545: PUSH
16546: LD_INT 21
16548: PUSH
16549: LD_INT 22
16551: PUSH
16552: LD_INT 23
16554: PUSH
16555: LD_INT 24
16557: PUSH
16558: LD_INT 25
16560: PUSH
16561: LD_INT 26
16563: PUSH
16564: LD_INT 27
16566: PUSH
16567: LD_INT 28
16569: PUSH
16570: LD_INT 29
16572: PUSH
16573: LD_INT 30
16575: PUSH
16576: LD_INT 31
16578: PUSH
16579: LD_INT 32
16581: PUSH
16582: LD_INT 33
16584: PUSH
16585: LD_INT 34
16587: PUSH
16588: LD_INT 35
16590: PUSH
16591: LD_INT 36
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 101
16634: PUSH
16635: LD_INT 102
16637: PUSH
16638: LD_INT 103
16640: PUSH
16641: LD_INT 104
16643: PUSH
16644: LD_INT 105
16646: PUSH
16647: LD_INT 106
16649: PUSH
16650: LD_INT 107
16652: PUSH
16653: LD_INT 108
16655: PUSH
16656: LD_INT 109
16658: PUSH
16659: LD_INT 110
16661: PUSH
16662: LD_INT 111
16664: PUSH
16665: LD_INT 112
16667: PUSH
16668: LD_INT 113
16670: PUSH
16671: LD_INT 114
16673: PUSH
16674: LD_INT 115
16676: PUSH
16677: LD_INT 116
16679: PUSH
16680: LD_INT 117
16682: PUSH
16683: LD_INT 118
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: ST_TO_ADDR
// if result then
16710: LD_VAR 0 2
16714: IFFALSE 17500
// begin normal :=  ;
16716: LD_ADDR_VAR 0 5
16720: PUSH
16721: LD_STRING 
16723: ST_TO_ADDR
// hardcore :=  ;
16724: LD_ADDR_VAR 0 6
16728: PUSH
16729: LD_STRING 
16731: ST_TO_ADDR
// active :=  ;
16732: LD_ADDR_VAR 0 7
16736: PUSH
16737: LD_STRING 
16739: ST_TO_ADDR
// for i = 1 to normalCounter do
16740: LD_ADDR_VAR 0 8
16744: PUSH
16745: DOUBLE
16746: LD_INT 1
16748: DEC
16749: ST_TO_ADDR
16750: LD_EXP 23
16754: PUSH
16755: FOR_TO
16756: IFFALSE 16857
// begin tmp := 0 ;
16758: LD_ADDR_VAR 0 3
16762: PUSH
16763: LD_STRING 0
16765: ST_TO_ADDR
// if result [ 1 ] then
16766: LD_VAR 0 2
16770: PUSH
16771: LD_INT 1
16773: ARRAY
16774: IFFALSE 16839
// if result [ 1 ] [ 1 ] = i then
16776: LD_VAR 0 2
16780: PUSH
16781: LD_INT 1
16783: ARRAY
16784: PUSH
16785: LD_INT 1
16787: ARRAY
16788: PUSH
16789: LD_VAR 0 8
16793: EQUAL
16794: IFFALSE 16839
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16796: LD_ADDR_VAR 0 2
16800: PUSH
16801: LD_VAR 0 2
16805: PPUSH
16806: LD_INT 1
16808: PPUSH
16809: LD_VAR 0 2
16813: PUSH
16814: LD_INT 1
16816: ARRAY
16817: PPUSH
16818: LD_INT 1
16820: PPUSH
16821: CALL_OW 3
16825: PPUSH
16826: CALL_OW 1
16830: ST_TO_ADDR
// tmp := 1 ;
16831: LD_ADDR_VAR 0 3
16835: PUSH
16836: LD_STRING 1
16838: ST_TO_ADDR
// end ; normal := normal & tmp ;
16839: LD_ADDR_VAR 0 5
16843: PUSH
16844: LD_VAR 0 5
16848: PUSH
16849: LD_VAR 0 3
16853: STR
16854: ST_TO_ADDR
// end ;
16855: GO 16755
16857: POP
16858: POP
// for i = 1 to hardcoreCounter do
16859: LD_ADDR_VAR 0 8
16863: PUSH
16864: DOUBLE
16865: LD_INT 1
16867: DEC
16868: ST_TO_ADDR
16869: LD_EXP 24
16873: PUSH
16874: FOR_TO
16875: IFFALSE 16980
// begin tmp := 0 ;
16877: LD_ADDR_VAR 0 3
16881: PUSH
16882: LD_STRING 0
16884: ST_TO_ADDR
// if result [ 2 ] then
16885: LD_VAR 0 2
16889: PUSH
16890: LD_INT 2
16892: ARRAY
16893: IFFALSE 16962
// if result [ 2 ] [ 1 ] = 100 + i then
16895: LD_VAR 0 2
16899: PUSH
16900: LD_INT 2
16902: ARRAY
16903: PUSH
16904: LD_INT 1
16906: ARRAY
16907: PUSH
16908: LD_INT 100
16910: PUSH
16911: LD_VAR 0 8
16915: PLUS
16916: EQUAL
16917: IFFALSE 16962
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16919: LD_ADDR_VAR 0 2
16923: PUSH
16924: LD_VAR 0 2
16928: PPUSH
16929: LD_INT 2
16931: PPUSH
16932: LD_VAR 0 2
16936: PUSH
16937: LD_INT 2
16939: ARRAY
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: CALL_OW 3
16948: PPUSH
16949: CALL_OW 1
16953: ST_TO_ADDR
// tmp := 1 ;
16954: LD_ADDR_VAR 0 3
16958: PUSH
16959: LD_STRING 1
16961: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16962: LD_ADDR_VAR 0 6
16966: PUSH
16967: LD_VAR 0 6
16971: PUSH
16972: LD_VAR 0 3
16976: STR
16977: ST_TO_ADDR
// end ;
16978: GO 16874
16980: POP
16981: POP
// if isGameLoad then
16982: LD_VAR 0 1
16986: IFFALSE 17461
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16988: LD_ADDR_VAR 0 4
16992: PUSH
16993: LD_EXP 27
16997: PUSH
16998: LD_EXP 26
17002: PUSH
17003: LD_EXP 28
17007: PUSH
17008: LD_EXP 25
17012: PUSH
17013: LD_EXP 29
17017: PUSH
17018: LD_EXP 30
17022: PUSH
17023: LD_EXP 31
17027: PUSH
17028: LD_EXP 32
17032: PUSH
17033: LD_EXP 33
17037: PUSH
17038: LD_EXP 34
17042: PUSH
17043: LD_EXP 35
17047: PUSH
17048: LD_EXP 36
17052: PUSH
17053: LD_EXP 37
17057: PUSH
17058: LD_EXP 38
17062: PUSH
17063: LD_EXP 46
17067: PUSH
17068: LD_EXP 47
17072: PUSH
17073: LD_EXP 48
17077: PUSH
17078: LD_EXP 49
17082: PUSH
17083: LD_EXP 51
17087: PUSH
17088: LD_EXP 52
17092: PUSH
17093: LD_EXP 53
17097: PUSH
17098: LD_EXP 56
17102: PUSH
17103: LD_EXP 58
17107: PUSH
17108: LD_EXP 59
17112: PUSH
17113: LD_EXP 60
17117: PUSH
17118: LD_EXP 62
17122: PUSH
17123: LD_EXP 63
17127: PUSH
17128: LD_EXP 66
17132: PUSH
17133: LD_EXP 67
17137: PUSH
17138: LD_EXP 68
17142: PUSH
17143: LD_EXP 69
17147: PUSH
17148: LD_EXP 70
17152: PUSH
17153: LD_EXP 71
17157: PUSH
17158: LD_EXP 72
17162: PUSH
17163: LD_EXP 73
17167: PUSH
17168: LD_EXP 74
17172: PUSH
17173: LD_EXP 39
17177: PUSH
17178: LD_EXP 40
17182: PUSH
17183: LD_EXP 43
17187: PUSH
17188: LD_EXP 44
17192: PUSH
17193: LD_EXP 45
17197: PUSH
17198: LD_EXP 41
17202: PUSH
17203: LD_EXP 42
17207: PUSH
17208: LD_EXP 50
17212: PUSH
17213: LD_EXP 54
17217: PUSH
17218: LD_EXP 55
17222: PUSH
17223: LD_EXP 57
17227: PUSH
17228: LD_EXP 61
17232: PUSH
17233: LD_EXP 64
17237: PUSH
17238: LD_EXP 65
17242: PUSH
17243: LD_EXP 75
17247: PUSH
17248: LD_EXP 76
17252: PUSH
17253: LD_EXP 77
17257: PUSH
17258: LD_EXP 78
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: ST_TO_ADDR
// tmp :=  ;
17319: LD_ADDR_VAR 0 3
17323: PUSH
17324: LD_STRING 
17326: ST_TO_ADDR
// for i = 1 to normalCounter do
17327: LD_ADDR_VAR 0 8
17331: PUSH
17332: DOUBLE
17333: LD_INT 1
17335: DEC
17336: ST_TO_ADDR
17337: LD_EXP 23
17341: PUSH
17342: FOR_TO
17343: IFFALSE 17379
// begin if flags [ i ] then
17345: LD_VAR 0 4
17349: PUSH
17350: LD_VAR 0 8
17354: ARRAY
17355: IFFALSE 17377
// tmp := tmp & i & ; ;
17357: LD_ADDR_VAR 0 3
17361: PUSH
17362: LD_VAR 0 3
17366: PUSH
17367: LD_VAR 0 8
17371: STR
17372: PUSH
17373: LD_STRING ;
17375: STR
17376: ST_TO_ADDR
// end ;
17377: GO 17342
17379: POP
17380: POP
// for i = 1 to hardcoreCounter do
17381: LD_ADDR_VAR 0 8
17385: PUSH
17386: DOUBLE
17387: LD_INT 1
17389: DEC
17390: ST_TO_ADDR
17391: LD_EXP 24
17395: PUSH
17396: FOR_TO
17397: IFFALSE 17443
// begin if flags [ normalCounter + i ] then
17399: LD_VAR 0 4
17403: PUSH
17404: LD_EXP 23
17408: PUSH
17409: LD_VAR 0 8
17413: PLUS
17414: ARRAY
17415: IFFALSE 17441
// tmp := tmp & ( 100 + i ) & ; ;
17417: LD_ADDR_VAR 0 3
17421: PUSH
17422: LD_VAR 0 3
17426: PUSH
17427: LD_INT 100
17429: PUSH
17430: LD_VAR 0 8
17434: PLUS
17435: STR
17436: PUSH
17437: LD_STRING ;
17439: STR
17440: ST_TO_ADDR
// end ;
17441: GO 17396
17443: POP
17444: POP
// if tmp then
17445: LD_VAR 0 3
17449: IFFALSE 17461
// active := tmp ;
17451: LD_ADDR_VAR 0 7
17455: PUSH
17456: LD_VAR 0 3
17460: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17461: LD_STRING getStreamItemsFromMission("
17463: PUSH
17464: LD_VAR 0 5
17468: STR
17469: PUSH
17470: LD_STRING ","
17472: STR
17473: PUSH
17474: LD_VAR 0 6
17478: STR
17479: PUSH
17480: LD_STRING ","
17482: STR
17483: PUSH
17484: LD_VAR 0 7
17488: STR
17489: PUSH
17490: LD_STRING ")
17492: STR
17493: PPUSH
17494: CALL_OW 559
// end else
17498: GO 17507
// ToLua ( getStreamItemsFromMission("","","") ) ;
17500: LD_STRING getStreamItemsFromMission("","","")
17502: PPUSH
17503: CALL_OW 559
// end ;
17507: LD_VAR 0 2
17511: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17512: LD_EXP 22
17516: PUSH
17517: LD_EXP 27
17521: AND
17522: IFFALSE 17646
17524: GO 17526
17526: DISABLE
17527: LD_INT 0
17529: PPUSH
17530: PPUSH
// begin enable ;
17531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17532: LD_ADDR_VAR 0 2
17536: PUSH
17537: LD_INT 22
17539: PUSH
17540: LD_OWVAR 2
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 2
17551: PUSH
17552: LD_INT 34
17554: PUSH
17555: LD_INT 7
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 34
17564: PUSH
17565: LD_INT 45
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 34
17574: PUSH
17575: LD_INT 28
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 34
17584: PUSH
17585: LD_INT 47
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PPUSH
17603: CALL_OW 69
17607: ST_TO_ADDR
// if not tmp then
17608: LD_VAR 0 2
17612: NOT
17613: IFFALSE 17617
// exit ;
17615: GO 17646
// for i in tmp do
17617: LD_ADDR_VAR 0 1
17621: PUSH
17622: LD_VAR 0 2
17626: PUSH
17627: FOR_IN
17628: IFFALSE 17644
// begin SetLives ( i , 0 ) ;
17630: LD_VAR 0 1
17634: PPUSH
17635: LD_INT 0
17637: PPUSH
17638: CALL_OW 234
// end ;
17642: GO 17627
17644: POP
17645: POP
// end ;
17646: PPOPN 2
17648: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17649: LD_EXP 22
17653: PUSH
17654: LD_EXP 28
17658: AND
17659: IFFALSE 17743
17661: GO 17663
17663: DISABLE
17664: LD_INT 0
17666: PPUSH
17667: PPUSH
// begin enable ;
17668: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17669: LD_ADDR_VAR 0 2
17673: PUSH
17674: LD_INT 22
17676: PUSH
17677: LD_OWVAR 2
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 32
17688: PUSH
17689: LD_INT 3
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 69
17704: ST_TO_ADDR
// if not tmp then
17705: LD_VAR 0 2
17709: NOT
17710: IFFALSE 17714
// exit ;
17712: GO 17743
// for i in tmp do
17714: LD_ADDR_VAR 0 1
17718: PUSH
17719: LD_VAR 0 2
17723: PUSH
17724: FOR_IN
17725: IFFALSE 17741
// begin SetLives ( i , 0 ) ;
17727: LD_VAR 0 1
17731: PPUSH
17732: LD_INT 0
17734: PPUSH
17735: CALL_OW 234
// end ;
17739: GO 17724
17741: POP
17742: POP
// end ;
17743: PPOPN 2
17745: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17746: LD_EXP 22
17750: PUSH
17751: LD_EXP 25
17755: AND
17756: IFFALSE 17849
17758: GO 17760
17760: DISABLE
17761: LD_INT 0
17763: PPUSH
// begin enable ;
17764: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17765: LD_ADDR_VAR 0 1
17769: PUSH
17770: LD_INT 22
17772: PUSH
17773: LD_OWVAR 2
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 2
17784: PUSH
17785: LD_INT 25
17787: PUSH
17788: LD_INT 5
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 25
17797: PUSH
17798: LD_INT 9
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 25
17807: PUSH
17808: LD_INT 8
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PPUSH
17825: CALL_OW 69
17829: PUSH
17830: FOR_IN
17831: IFFALSE 17847
// begin SetClass ( i , 1 ) ;
17833: LD_VAR 0 1
17837: PPUSH
17838: LD_INT 1
17840: PPUSH
17841: CALL_OW 336
// end ;
17845: GO 17830
17847: POP
17848: POP
// end ;
17849: PPOPN 1
17851: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17852: LD_EXP 22
17856: PUSH
17857: LD_EXP 26
17861: AND
17862: PUSH
17863: LD_OWVAR 65
17867: PUSH
17868: LD_INT 7
17870: LESS
17871: AND
17872: IFFALSE 17886
17874: GO 17876
17876: DISABLE
// begin enable ;
17877: ENABLE
// game_speed := 7 ;
17878: LD_ADDR_OWVAR 65
17882: PUSH
17883: LD_INT 7
17885: ST_TO_ADDR
// end ;
17886: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17887: LD_EXP 22
17891: PUSH
17892: LD_EXP 29
17896: AND
17897: IFFALSE 18099
17899: GO 17901
17901: DISABLE
17902: LD_INT 0
17904: PPUSH
17905: PPUSH
17906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17907: LD_ADDR_VAR 0 3
17911: PUSH
17912: LD_INT 81
17914: PUSH
17915: LD_OWVAR 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 21
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 69
17942: ST_TO_ADDR
// if not tmp then
17943: LD_VAR 0 3
17947: NOT
17948: IFFALSE 17952
// exit ;
17950: GO 18099
// if tmp > 5 then
17952: LD_VAR 0 3
17956: PUSH
17957: LD_INT 5
17959: GREATER
17960: IFFALSE 17972
// k := 5 else
17962: LD_ADDR_VAR 0 2
17966: PUSH
17967: LD_INT 5
17969: ST_TO_ADDR
17970: GO 17982
// k := tmp ;
17972: LD_ADDR_VAR 0 2
17976: PUSH
17977: LD_VAR 0 3
17981: ST_TO_ADDR
// for i := 1 to k do
17982: LD_ADDR_VAR 0 1
17986: PUSH
17987: DOUBLE
17988: LD_INT 1
17990: DEC
17991: ST_TO_ADDR
17992: LD_VAR 0 2
17996: PUSH
17997: FOR_TO
17998: IFFALSE 18097
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18000: LD_VAR 0 3
18004: PUSH
18005: LD_VAR 0 1
18009: ARRAY
18010: PPUSH
18011: LD_VAR 0 1
18015: PUSH
18016: LD_INT 4
18018: MOD
18019: PUSH
18020: LD_INT 1
18022: PLUS
18023: PPUSH
18024: CALL_OW 259
18028: PUSH
18029: LD_INT 10
18031: LESS
18032: IFFALSE 18095
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18034: LD_VAR 0 3
18038: PUSH
18039: LD_VAR 0 1
18043: ARRAY
18044: PPUSH
18045: LD_VAR 0 1
18049: PUSH
18050: LD_INT 4
18052: MOD
18053: PUSH
18054: LD_INT 1
18056: PLUS
18057: PPUSH
18058: LD_VAR 0 3
18062: PUSH
18063: LD_VAR 0 1
18067: ARRAY
18068: PPUSH
18069: LD_VAR 0 1
18073: PUSH
18074: LD_INT 4
18076: MOD
18077: PUSH
18078: LD_INT 1
18080: PLUS
18081: PPUSH
18082: CALL_OW 259
18086: PUSH
18087: LD_INT 1
18089: PLUS
18090: PPUSH
18091: CALL_OW 237
18095: GO 17997
18097: POP
18098: POP
// end ;
18099: PPOPN 3
18101: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18102: LD_EXP 22
18106: PUSH
18107: LD_EXP 30
18111: AND
18112: IFFALSE 18132
18114: GO 18116
18116: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18117: LD_INT 4
18119: PPUSH
18120: LD_OWVAR 2
18124: PPUSH
18125: LD_INT 0
18127: PPUSH
18128: CALL_OW 324
18132: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18133: LD_EXP 22
18137: PUSH
18138: LD_EXP 59
18142: AND
18143: IFFALSE 18163
18145: GO 18147
18147: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18148: LD_INT 19
18150: PPUSH
18151: LD_OWVAR 2
18155: PPUSH
18156: LD_INT 0
18158: PPUSH
18159: CALL_OW 324
18163: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18164: LD_EXP 22
18168: PUSH
18169: LD_EXP 31
18173: AND
18174: IFFALSE 18276
18176: GO 18178
18178: DISABLE
18179: LD_INT 0
18181: PPUSH
18182: PPUSH
// begin enable ;
18183: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18184: LD_ADDR_VAR 0 2
18188: PUSH
18189: LD_INT 22
18191: PUSH
18192: LD_OWVAR 2
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 2
18203: PUSH
18204: LD_INT 34
18206: PUSH
18207: LD_INT 11
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 34
18216: PUSH
18217: LD_INT 30
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: LIST
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PPUSH
18233: CALL_OW 69
18237: ST_TO_ADDR
// if not tmp then
18238: LD_VAR 0 2
18242: NOT
18243: IFFALSE 18247
// exit ;
18245: GO 18276
// for i in tmp do
18247: LD_ADDR_VAR 0 1
18251: PUSH
18252: LD_VAR 0 2
18256: PUSH
18257: FOR_IN
18258: IFFALSE 18274
// begin SetLives ( i , 0 ) ;
18260: LD_VAR 0 1
18264: PPUSH
18265: LD_INT 0
18267: PPUSH
18268: CALL_OW 234
// end ;
18272: GO 18257
18274: POP
18275: POP
// end ;
18276: PPOPN 2
18278: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18279: LD_EXP 22
18283: PUSH
18284: LD_EXP 32
18288: AND
18289: IFFALSE 18309
18291: GO 18293
18293: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18294: LD_INT 32
18296: PPUSH
18297: LD_OWVAR 2
18301: PPUSH
18302: LD_INT 0
18304: PPUSH
18305: CALL_OW 324
18309: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18310: LD_EXP 22
18314: PUSH
18315: LD_EXP 33
18319: AND
18320: IFFALSE 18501
18322: GO 18324
18324: DISABLE
18325: LD_INT 0
18327: PPUSH
18328: PPUSH
18329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18330: LD_ADDR_VAR 0 2
18334: PUSH
18335: LD_INT 22
18337: PUSH
18338: LD_OWVAR 2
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 33
18349: PUSH
18350: LD_INT 3
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PPUSH
18361: CALL_OW 69
18365: ST_TO_ADDR
// if not tmp then
18366: LD_VAR 0 2
18370: NOT
18371: IFFALSE 18375
// exit ;
18373: GO 18501
// side := 0 ;
18375: LD_ADDR_VAR 0 3
18379: PUSH
18380: LD_INT 0
18382: ST_TO_ADDR
// for i := 1 to 8 do
18383: LD_ADDR_VAR 0 1
18387: PUSH
18388: DOUBLE
18389: LD_INT 1
18391: DEC
18392: ST_TO_ADDR
18393: LD_INT 8
18395: PUSH
18396: FOR_TO
18397: IFFALSE 18445
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18399: LD_OWVAR 2
18403: PUSH
18404: LD_VAR 0 1
18408: NONEQUAL
18409: PUSH
18410: LD_OWVAR 2
18414: PPUSH
18415: LD_VAR 0 1
18419: PPUSH
18420: CALL_OW 81
18424: PUSH
18425: LD_INT 2
18427: EQUAL
18428: AND
18429: IFFALSE 18443
// begin side := i ;
18431: LD_ADDR_VAR 0 3
18435: PUSH
18436: LD_VAR 0 1
18440: ST_TO_ADDR
// break ;
18441: GO 18445
// end ;
18443: GO 18396
18445: POP
18446: POP
// if not side then
18447: LD_VAR 0 3
18451: NOT
18452: IFFALSE 18456
// exit ;
18454: GO 18501
// for i := 1 to tmp do
18456: LD_ADDR_VAR 0 1
18460: PUSH
18461: DOUBLE
18462: LD_INT 1
18464: DEC
18465: ST_TO_ADDR
18466: LD_VAR 0 2
18470: PUSH
18471: FOR_TO
18472: IFFALSE 18499
// if Prob ( 60 ) then
18474: LD_INT 60
18476: PPUSH
18477: CALL_OW 13
18481: IFFALSE 18497
// SetSide ( i , side ) ;
18483: LD_VAR 0 1
18487: PPUSH
18488: LD_VAR 0 3
18492: PPUSH
18493: CALL_OW 235
18497: GO 18471
18499: POP
18500: POP
// end ;
18501: PPOPN 3
18503: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18504: LD_EXP 22
18508: PUSH
18509: LD_EXP 35
18513: AND
18514: IFFALSE 18633
18516: GO 18518
18518: DISABLE
18519: LD_INT 0
18521: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18522: LD_ADDR_VAR 0 1
18526: PUSH
18527: LD_INT 22
18529: PUSH
18530: LD_OWVAR 2
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 21
18541: PUSH
18542: LD_INT 1
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 3
18551: PUSH
18552: LD_INT 23
18554: PUSH
18555: LD_INT 0
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: PPUSH
18571: CALL_OW 69
18575: PUSH
18576: FOR_IN
18577: IFFALSE 18631
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18579: LD_VAR 0 1
18583: PPUSH
18584: CALL_OW 257
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: LD_INT 2
18594: PUSH
18595: LD_INT 3
18597: PUSH
18598: LD_INT 4
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: IN
18607: IFFALSE 18629
// SetClass ( un , rand ( 1 , 4 ) ) ;
18609: LD_VAR 0 1
18613: PPUSH
18614: LD_INT 1
18616: PPUSH
18617: LD_INT 4
18619: PPUSH
18620: CALL_OW 12
18624: PPUSH
18625: CALL_OW 336
18629: GO 18576
18631: POP
18632: POP
// end ;
18633: PPOPN 1
18635: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18636: LD_EXP 22
18640: PUSH
18641: LD_EXP 34
18645: AND
18646: IFFALSE 18725
18648: GO 18650
18650: DISABLE
18651: LD_INT 0
18653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18654: LD_ADDR_VAR 0 1
18658: PUSH
18659: LD_INT 22
18661: PUSH
18662: LD_OWVAR 2
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 21
18673: PUSH
18674: LD_INT 3
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PPUSH
18685: CALL_OW 69
18689: ST_TO_ADDR
// if not tmp then
18690: LD_VAR 0 1
18694: NOT
18695: IFFALSE 18699
// exit ;
18697: GO 18725
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18699: LD_VAR 0 1
18703: PUSH
18704: LD_INT 1
18706: PPUSH
18707: LD_VAR 0 1
18711: PPUSH
18712: CALL_OW 12
18716: ARRAY
18717: PPUSH
18718: LD_INT 100
18720: PPUSH
18721: CALL_OW 234
// end ;
18725: PPOPN 1
18727: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18728: LD_EXP 22
18732: PUSH
18733: LD_EXP 36
18737: AND
18738: IFFALSE 18836
18740: GO 18742
18742: DISABLE
18743: LD_INT 0
18745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18746: LD_ADDR_VAR 0 1
18750: PUSH
18751: LD_INT 22
18753: PUSH
18754: LD_OWVAR 2
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 21
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PPUSH
18777: CALL_OW 69
18781: ST_TO_ADDR
// if not tmp then
18782: LD_VAR 0 1
18786: NOT
18787: IFFALSE 18791
// exit ;
18789: GO 18836
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18791: LD_VAR 0 1
18795: PUSH
18796: LD_INT 1
18798: PPUSH
18799: LD_VAR 0 1
18803: PPUSH
18804: CALL_OW 12
18808: ARRAY
18809: PPUSH
18810: LD_INT 1
18812: PPUSH
18813: LD_INT 4
18815: PPUSH
18816: CALL_OW 12
18820: PPUSH
18821: LD_INT 3000
18823: PPUSH
18824: LD_INT 9000
18826: PPUSH
18827: CALL_OW 12
18831: PPUSH
18832: CALL_OW 492
// end ;
18836: PPOPN 1
18838: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18839: LD_EXP 22
18843: PUSH
18844: LD_EXP 37
18848: AND
18849: IFFALSE 18869
18851: GO 18853
18853: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18854: LD_INT 1
18856: PPUSH
18857: LD_OWVAR 2
18861: PPUSH
18862: LD_INT 0
18864: PPUSH
18865: CALL_OW 324
18869: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18870: LD_EXP 22
18874: PUSH
18875: LD_EXP 38
18879: AND
18880: IFFALSE 18963
18882: GO 18884
18884: DISABLE
18885: LD_INT 0
18887: PPUSH
18888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18889: LD_ADDR_VAR 0 2
18893: PUSH
18894: LD_INT 22
18896: PUSH
18897: LD_OWVAR 2
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 21
18908: PUSH
18909: LD_INT 3
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PPUSH
18920: CALL_OW 69
18924: ST_TO_ADDR
// if not tmp then
18925: LD_VAR 0 2
18929: NOT
18930: IFFALSE 18934
// exit ;
18932: GO 18963
// for i in tmp do
18934: LD_ADDR_VAR 0 1
18938: PUSH
18939: LD_VAR 0 2
18943: PUSH
18944: FOR_IN
18945: IFFALSE 18961
// SetBLevel ( i , 10 ) ;
18947: LD_VAR 0 1
18951: PPUSH
18952: LD_INT 10
18954: PPUSH
18955: CALL_OW 241
18959: GO 18944
18961: POP
18962: POP
// end ;
18963: PPOPN 2
18965: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18966: LD_EXP 22
18970: PUSH
18971: LD_EXP 39
18975: AND
18976: IFFALSE 19087
18978: GO 18980
18980: DISABLE
18981: LD_INT 0
18983: PPUSH
18984: PPUSH
18985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18986: LD_ADDR_VAR 0 3
18990: PUSH
18991: LD_INT 22
18993: PUSH
18994: LD_OWVAR 2
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 25
19005: PUSH
19006: LD_INT 1
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PPUSH
19017: CALL_OW 69
19021: ST_TO_ADDR
// if not tmp then
19022: LD_VAR 0 3
19026: NOT
19027: IFFALSE 19031
// exit ;
19029: GO 19087
// un := tmp [ rand ( 1 , tmp ) ] ;
19031: LD_ADDR_VAR 0 2
19035: PUSH
19036: LD_VAR 0 3
19040: PUSH
19041: LD_INT 1
19043: PPUSH
19044: LD_VAR 0 3
19048: PPUSH
19049: CALL_OW 12
19053: ARRAY
19054: ST_TO_ADDR
// if Crawls ( un ) then
19055: LD_VAR 0 2
19059: PPUSH
19060: CALL_OW 318
19064: IFFALSE 19075
// ComWalk ( un ) ;
19066: LD_VAR 0 2
19070: PPUSH
19071: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19075: LD_VAR 0 2
19079: PPUSH
19080: LD_INT 5
19082: PPUSH
19083: CALL_OW 336
// end ;
19087: PPOPN 3
19089: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19090: LD_EXP 22
19094: PUSH
19095: LD_EXP 40
19099: AND
19100: PUSH
19101: LD_OWVAR 67
19105: PUSH
19106: LD_INT 4
19108: LESS
19109: AND
19110: IFFALSE 19129
19112: GO 19114
19114: DISABLE
// begin Difficulty := Difficulty + 1 ;
19115: LD_ADDR_OWVAR 67
19119: PUSH
19120: LD_OWVAR 67
19124: PUSH
19125: LD_INT 1
19127: PLUS
19128: ST_TO_ADDR
// end ;
19129: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19130: LD_EXP 22
19134: PUSH
19135: LD_EXP 41
19139: AND
19140: IFFALSE 19243
19142: GO 19144
19144: DISABLE
19145: LD_INT 0
19147: PPUSH
// begin for i := 1 to 5 do
19148: LD_ADDR_VAR 0 1
19152: PUSH
19153: DOUBLE
19154: LD_INT 1
19156: DEC
19157: ST_TO_ADDR
19158: LD_INT 5
19160: PUSH
19161: FOR_TO
19162: IFFALSE 19241
// begin uc_nation := nation_nature ;
19164: LD_ADDR_OWVAR 21
19168: PUSH
19169: LD_INT 0
19171: ST_TO_ADDR
// uc_side := 0 ;
19172: LD_ADDR_OWVAR 20
19176: PUSH
19177: LD_INT 0
19179: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19180: LD_ADDR_OWVAR 29
19184: PUSH
19185: LD_INT 12
19187: PUSH
19188: LD_INT 12
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: ST_TO_ADDR
// hc_agressivity := 20 ;
19195: LD_ADDR_OWVAR 35
19199: PUSH
19200: LD_INT 20
19202: ST_TO_ADDR
// hc_class := class_tiger ;
19203: LD_ADDR_OWVAR 28
19207: PUSH
19208: LD_INT 14
19210: ST_TO_ADDR
// hc_gallery :=  ;
19211: LD_ADDR_OWVAR 33
19215: PUSH
19216: LD_STRING 
19218: ST_TO_ADDR
// hc_name :=  ;
19219: LD_ADDR_OWVAR 26
19223: PUSH
19224: LD_STRING 
19226: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19227: CALL_OW 44
19231: PPUSH
19232: LD_INT 0
19234: PPUSH
19235: CALL_OW 51
// end ;
19239: GO 19161
19241: POP
19242: POP
// end ;
19243: PPOPN 1
19245: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19246: LD_EXP 22
19250: PUSH
19251: LD_EXP 42
19255: AND
19256: IFFALSE 19265
19258: GO 19260
19260: DISABLE
// StreamSibBomb ;
19261: CALL 19266 0 0
19265: END
// export function StreamSibBomb ; var i , x , y ; begin
19266: LD_INT 0
19268: PPUSH
19269: PPUSH
19270: PPUSH
19271: PPUSH
// result := false ;
19272: LD_ADDR_VAR 0 1
19276: PUSH
19277: LD_INT 0
19279: ST_TO_ADDR
// for i := 1 to 16 do
19280: LD_ADDR_VAR 0 2
19284: PUSH
19285: DOUBLE
19286: LD_INT 1
19288: DEC
19289: ST_TO_ADDR
19290: LD_INT 16
19292: PUSH
19293: FOR_TO
19294: IFFALSE 19493
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19296: LD_ADDR_VAR 0 3
19300: PUSH
19301: LD_INT 10
19303: PUSH
19304: LD_INT 20
19306: PUSH
19307: LD_INT 30
19309: PUSH
19310: LD_INT 40
19312: PUSH
19313: LD_INT 50
19315: PUSH
19316: LD_INT 60
19318: PUSH
19319: LD_INT 70
19321: PUSH
19322: LD_INT 80
19324: PUSH
19325: LD_INT 90
19327: PUSH
19328: LD_INT 100
19330: PUSH
19331: LD_INT 110
19333: PUSH
19334: LD_INT 120
19336: PUSH
19337: LD_INT 130
19339: PUSH
19340: LD_INT 140
19342: PUSH
19343: LD_INT 150
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: PPUSH
19366: LD_INT 15
19368: PPUSH
19369: CALL_OW 12
19373: ARRAY
19374: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19375: LD_ADDR_VAR 0 4
19379: PUSH
19380: LD_INT 10
19382: PUSH
19383: LD_INT 20
19385: PUSH
19386: LD_INT 30
19388: PUSH
19389: LD_INT 40
19391: PUSH
19392: LD_INT 50
19394: PUSH
19395: LD_INT 60
19397: PUSH
19398: LD_INT 70
19400: PUSH
19401: LD_INT 80
19403: PUSH
19404: LD_INT 90
19406: PUSH
19407: LD_INT 100
19409: PUSH
19410: LD_INT 110
19412: PUSH
19413: LD_INT 120
19415: PUSH
19416: LD_INT 130
19418: PUSH
19419: LD_INT 140
19421: PUSH
19422: LD_INT 150
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 1
19444: PPUSH
19445: LD_INT 15
19447: PPUSH
19448: CALL_OW 12
19452: ARRAY
19453: ST_TO_ADDR
// if ValidHex ( x , y ) then
19454: LD_VAR 0 3
19458: PPUSH
19459: LD_VAR 0 4
19463: PPUSH
19464: CALL_OW 488
19468: IFFALSE 19491
// begin result := [ x , y ] ;
19470: LD_ADDR_VAR 0 1
19474: PUSH
19475: LD_VAR 0 3
19479: PUSH
19480: LD_VAR 0 4
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: ST_TO_ADDR
// break ;
19489: GO 19493
// end ; end ;
19491: GO 19293
19493: POP
19494: POP
// if result then
19495: LD_VAR 0 1
19499: IFFALSE 19559
// begin ToLua ( playSibBomb() ) ;
19501: LD_STRING playSibBomb()
19503: PPUSH
19504: CALL_OW 559
// wait ( 0 0$14 ) ;
19508: LD_INT 490
19510: PPUSH
19511: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19515: LD_VAR 0 1
19519: PUSH
19520: LD_INT 1
19522: ARRAY
19523: PPUSH
19524: LD_VAR 0 1
19528: PUSH
19529: LD_INT 2
19531: ARRAY
19532: PPUSH
19533: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19537: LD_VAR 0 1
19541: PUSH
19542: LD_INT 1
19544: ARRAY
19545: PPUSH
19546: LD_VAR 0 1
19550: PUSH
19551: LD_INT 2
19553: ARRAY
19554: PPUSH
19555: CALL_OW 429
// end ; end ;
19559: LD_VAR 0 1
19563: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19564: LD_EXP 22
19568: PUSH
19569: LD_EXP 44
19573: AND
19574: IFFALSE 19586
19576: GO 19578
19578: DISABLE
// YouLost (  ) ;
19579: LD_STRING 
19581: PPUSH
19582: CALL_OW 104
19586: END
// every 0 0$1 trigger StreamModeActive and sFog do
19587: LD_EXP 22
19591: PUSH
19592: LD_EXP 43
19596: AND
19597: IFFALSE 19611
19599: GO 19601
19601: DISABLE
// FogOff ( your_side ) ;
19602: LD_OWVAR 2
19606: PPUSH
19607: CALL_OW 344
19611: END
// every 0 0$1 trigger StreamModeActive and sSun do
19612: LD_EXP 22
19616: PUSH
19617: LD_EXP 45
19621: AND
19622: IFFALSE 19650
19624: GO 19626
19626: DISABLE
// begin solar_recharge_percent := 0 ;
19627: LD_ADDR_OWVAR 79
19631: PUSH
19632: LD_INT 0
19634: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19635: LD_INT 10500
19637: PPUSH
19638: CALL_OW 67
// solar_recharge_percent := 100 ;
19642: LD_ADDR_OWVAR 79
19646: PUSH
19647: LD_INT 100
19649: ST_TO_ADDR
// end ;
19650: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19651: LD_EXP 22
19655: PUSH
19656: LD_EXP 46
19660: AND
19661: IFFALSE 19900
19663: GO 19665
19665: DISABLE
19666: LD_INT 0
19668: PPUSH
19669: PPUSH
19670: PPUSH
// begin tmp := [ ] ;
19671: LD_ADDR_VAR 0 3
19675: PUSH
19676: EMPTY
19677: ST_TO_ADDR
// for i := 1 to 6 do
19678: LD_ADDR_VAR 0 1
19682: PUSH
19683: DOUBLE
19684: LD_INT 1
19686: DEC
19687: ST_TO_ADDR
19688: LD_INT 6
19690: PUSH
19691: FOR_TO
19692: IFFALSE 19797
// begin uc_nation := nation_nature ;
19694: LD_ADDR_OWVAR 21
19698: PUSH
19699: LD_INT 0
19701: ST_TO_ADDR
// uc_side := 0 ;
19702: LD_ADDR_OWVAR 20
19706: PUSH
19707: LD_INT 0
19709: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19710: LD_ADDR_OWVAR 29
19714: PUSH
19715: LD_INT 12
19717: PUSH
19718: LD_INT 12
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: ST_TO_ADDR
// hc_agressivity := 20 ;
19725: LD_ADDR_OWVAR 35
19729: PUSH
19730: LD_INT 20
19732: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19733: LD_ADDR_OWVAR 28
19737: PUSH
19738: LD_INT 17
19740: ST_TO_ADDR
// hc_gallery :=  ;
19741: LD_ADDR_OWVAR 33
19745: PUSH
19746: LD_STRING 
19748: ST_TO_ADDR
// hc_name :=  ;
19749: LD_ADDR_OWVAR 26
19753: PUSH
19754: LD_STRING 
19756: ST_TO_ADDR
// un := CreateHuman ;
19757: LD_ADDR_VAR 0 2
19761: PUSH
19762: CALL_OW 44
19766: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19767: LD_VAR 0 2
19771: PPUSH
19772: LD_INT 1
19774: PPUSH
19775: CALL_OW 51
// tmp := tmp ^ un ;
19779: LD_ADDR_VAR 0 3
19783: PUSH
19784: LD_VAR 0 3
19788: PUSH
19789: LD_VAR 0 2
19793: ADD
19794: ST_TO_ADDR
// end ;
19795: GO 19691
19797: POP
19798: POP
// repeat wait ( 0 0$1 ) ;
19799: LD_INT 35
19801: PPUSH
19802: CALL_OW 67
// for un in tmp do
19806: LD_ADDR_VAR 0 2
19810: PUSH
19811: LD_VAR 0 3
19815: PUSH
19816: FOR_IN
19817: IFFALSE 19891
// begin if IsDead ( un ) then
19819: LD_VAR 0 2
19823: PPUSH
19824: CALL_OW 301
19828: IFFALSE 19848
// begin tmp := tmp diff un ;
19830: LD_ADDR_VAR 0 3
19834: PUSH
19835: LD_VAR 0 3
19839: PUSH
19840: LD_VAR 0 2
19844: DIFF
19845: ST_TO_ADDR
// continue ;
19846: GO 19816
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19848: LD_VAR 0 2
19852: PPUSH
19853: LD_INT 3
19855: PUSH
19856: LD_INT 22
19858: PUSH
19859: LD_INT 0
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PPUSH
19870: CALL_OW 69
19874: PPUSH
19875: LD_VAR 0 2
19879: PPUSH
19880: CALL_OW 74
19884: PPUSH
19885: CALL_OW 115
// end ;
19889: GO 19816
19891: POP
19892: POP
// until not tmp ;
19893: LD_VAR 0 3
19897: NOT
19898: IFFALSE 19799
// end ;
19900: PPOPN 3
19902: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19903: LD_EXP 22
19907: PUSH
19908: LD_EXP 47
19912: AND
19913: IFFALSE 19967
19915: GO 19917
19917: DISABLE
// begin ToLua ( displayTroll(); ) ;
19918: LD_STRING displayTroll();
19920: PPUSH
19921: CALL_OW 559
// wait ( 3 3$00 ) ;
19925: LD_INT 6300
19927: PPUSH
19928: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19932: LD_STRING hideTroll();
19934: PPUSH
19935: CALL_OW 559
// wait ( 1 1$00 ) ;
19939: LD_INT 2100
19941: PPUSH
19942: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19946: LD_STRING displayTroll();
19948: PPUSH
19949: CALL_OW 559
// wait ( 1 1$00 ) ;
19953: LD_INT 2100
19955: PPUSH
19956: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19960: LD_STRING hideTroll();
19962: PPUSH
19963: CALL_OW 559
// end ;
19967: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19968: LD_EXP 22
19972: PUSH
19973: LD_EXP 48
19977: AND
19978: IFFALSE 20041
19980: GO 19982
19982: DISABLE
19983: LD_INT 0
19985: PPUSH
// begin p := 0 ;
19986: LD_ADDR_VAR 0 1
19990: PUSH
19991: LD_INT 0
19993: ST_TO_ADDR
// repeat game_speed := 1 ;
19994: LD_ADDR_OWVAR 65
19998: PUSH
19999: LD_INT 1
20001: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20002: LD_INT 35
20004: PPUSH
20005: CALL_OW 67
// p := p + 1 ;
20009: LD_ADDR_VAR 0 1
20013: PUSH
20014: LD_VAR 0 1
20018: PUSH
20019: LD_INT 1
20021: PLUS
20022: ST_TO_ADDR
// until p >= 60 ;
20023: LD_VAR 0 1
20027: PUSH
20028: LD_INT 60
20030: GREATEREQUAL
20031: IFFALSE 19994
// game_speed := 4 ;
20033: LD_ADDR_OWVAR 65
20037: PUSH
20038: LD_INT 4
20040: ST_TO_ADDR
// end ;
20041: PPOPN 1
20043: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20044: LD_EXP 22
20048: PUSH
20049: LD_EXP 49
20053: AND
20054: IFFALSE 20200
20056: GO 20058
20058: DISABLE
20059: LD_INT 0
20061: PPUSH
20062: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20063: LD_ADDR_VAR 0 1
20067: PUSH
20068: LD_INT 22
20070: PUSH
20071: LD_OWVAR 2
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 30
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 30
20095: PUSH
20096: LD_INT 1
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: LIST
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PPUSH
20112: CALL_OW 69
20116: ST_TO_ADDR
// if not depot then
20117: LD_VAR 0 1
20121: NOT
20122: IFFALSE 20126
// exit ;
20124: GO 20200
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20126: LD_ADDR_VAR 0 2
20130: PUSH
20131: LD_VAR 0 1
20135: PUSH
20136: LD_INT 1
20138: PPUSH
20139: LD_VAR 0 1
20143: PPUSH
20144: CALL_OW 12
20148: ARRAY
20149: PPUSH
20150: CALL_OW 274
20154: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20155: LD_VAR 0 2
20159: PPUSH
20160: LD_INT 1
20162: PPUSH
20163: LD_INT 0
20165: PPUSH
20166: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20170: LD_VAR 0 2
20174: PPUSH
20175: LD_INT 2
20177: PPUSH
20178: LD_INT 0
20180: PPUSH
20181: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20185: LD_VAR 0 2
20189: PPUSH
20190: LD_INT 3
20192: PPUSH
20193: LD_INT 0
20195: PPUSH
20196: CALL_OW 277
// end ;
20200: PPOPN 2
20202: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20203: LD_EXP 22
20207: PUSH
20208: LD_EXP 50
20212: AND
20213: IFFALSE 20310
20215: GO 20217
20217: DISABLE
20218: LD_INT 0
20220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20221: LD_ADDR_VAR 0 1
20225: PUSH
20226: LD_INT 22
20228: PUSH
20229: LD_OWVAR 2
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 21
20240: PUSH
20241: LD_INT 1
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 3
20250: PUSH
20251: LD_INT 23
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: LIST
20269: PPUSH
20270: CALL_OW 69
20274: ST_TO_ADDR
// if not tmp then
20275: LD_VAR 0 1
20279: NOT
20280: IFFALSE 20284
// exit ;
20282: GO 20310
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20284: LD_VAR 0 1
20288: PUSH
20289: LD_INT 1
20291: PPUSH
20292: LD_VAR 0 1
20296: PPUSH
20297: CALL_OW 12
20301: ARRAY
20302: PPUSH
20303: LD_INT 200
20305: PPUSH
20306: CALL_OW 234
// end ;
20310: PPOPN 1
20312: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20313: LD_EXP 22
20317: PUSH
20318: LD_EXP 51
20322: AND
20323: IFFALSE 20402
20325: GO 20327
20327: DISABLE
20328: LD_INT 0
20330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20331: LD_ADDR_VAR 0 1
20335: PUSH
20336: LD_INT 22
20338: PUSH
20339: LD_OWVAR 2
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 21
20350: PUSH
20351: LD_INT 2
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PPUSH
20362: CALL_OW 69
20366: ST_TO_ADDR
// if not tmp then
20367: LD_VAR 0 1
20371: NOT
20372: IFFALSE 20376
// exit ;
20374: GO 20402
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20376: LD_VAR 0 1
20380: PUSH
20381: LD_INT 1
20383: PPUSH
20384: LD_VAR 0 1
20388: PPUSH
20389: CALL_OW 12
20393: ARRAY
20394: PPUSH
20395: LD_INT 60
20397: PPUSH
20398: CALL_OW 234
// end ;
20402: PPOPN 1
20404: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20405: LD_EXP 22
20409: PUSH
20410: LD_EXP 52
20414: AND
20415: IFFALSE 20514
20417: GO 20419
20419: DISABLE
20420: LD_INT 0
20422: PPUSH
20423: PPUSH
// begin enable ;
20424: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20425: LD_ADDR_VAR 0 1
20429: PUSH
20430: LD_INT 22
20432: PUSH
20433: LD_OWVAR 2
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 61
20444: PUSH
20445: EMPTY
20446: LIST
20447: PUSH
20448: LD_INT 33
20450: PUSH
20451: LD_INT 2
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: LIST
20462: PPUSH
20463: CALL_OW 69
20467: ST_TO_ADDR
// if not tmp then
20468: LD_VAR 0 1
20472: NOT
20473: IFFALSE 20477
// exit ;
20475: GO 20514
// for i in tmp do
20477: LD_ADDR_VAR 0 2
20481: PUSH
20482: LD_VAR 0 1
20486: PUSH
20487: FOR_IN
20488: IFFALSE 20512
// if IsControledBy ( i ) then
20490: LD_VAR 0 2
20494: PPUSH
20495: CALL_OW 312
20499: IFFALSE 20510
// ComUnlink ( i ) ;
20501: LD_VAR 0 2
20505: PPUSH
20506: CALL_OW 136
20510: GO 20487
20512: POP
20513: POP
// end ;
20514: PPOPN 2
20516: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20517: LD_EXP 22
20521: PUSH
20522: LD_EXP 53
20526: AND
20527: IFFALSE 20667
20529: GO 20531
20531: DISABLE
20532: LD_INT 0
20534: PPUSH
20535: PPUSH
// begin ToLua ( displayPowell(); ) ;
20536: LD_STRING displayPowell();
20538: PPUSH
20539: CALL_OW 559
// uc_side := 0 ;
20543: LD_ADDR_OWVAR 20
20547: PUSH
20548: LD_INT 0
20550: ST_TO_ADDR
// uc_nation := 2 ;
20551: LD_ADDR_OWVAR 21
20555: PUSH
20556: LD_INT 2
20558: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20559: LD_ADDR_OWVAR 37
20563: PUSH
20564: LD_INT 14
20566: ST_TO_ADDR
// vc_engine := engine_siberite ;
20567: LD_ADDR_OWVAR 39
20571: PUSH
20572: LD_INT 3
20574: ST_TO_ADDR
// vc_control := control_apeman ;
20575: LD_ADDR_OWVAR 38
20579: PUSH
20580: LD_INT 5
20582: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20583: LD_ADDR_OWVAR 40
20587: PUSH
20588: LD_INT 29
20590: ST_TO_ADDR
// un := CreateVehicle ;
20591: LD_ADDR_VAR 0 2
20595: PUSH
20596: CALL_OW 45
20600: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20601: LD_VAR 0 2
20605: PPUSH
20606: LD_INT 1
20608: PPUSH
20609: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20613: LD_INT 35
20615: PPUSH
20616: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20620: LD_VAR 0 2
20624: PPUSH
20625: LD_INT 22
20627: PUSH
20628: LD_OWVAR 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PPUSH
20637: CALL_OW 69
20641: PPUSH
20642: LD_VAR 0 2
20646: PPUSH
20647: CALL_OW 74
20651: PPUSH
20652: CALL_OW 115
// until IsDead ( un ) ;
20656: LD_VAR 0 2
20660: PPUSH
20661: CALL_OW 301
20665: IFFALSE 20613
// end ;
20667: PPOPN 2
20669: END
// every 0 0$1 trigger StreamModeActive and sStu do
20670: LD_EXP 22
20674: PUSH
20675: LD_EXP 61
20679: AND
20680: IFFALSE 20696
20682: GO 20684
20684: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20685: LD_STRING displayStucuk();
20687: PPUSH
20688: CALL_OW 559
// ResetFog ;
20692: CALL_OW 335
// end ;
20696: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20697: LD_EXP 22
20701: PUSH
20702: LD_EXP 54
20706: AND
20707: IFFALSE 20848
20709: GO 20711
20711: DISABLE
20712: LD_INT 0
20714: PPUSH
20715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20716: LD_ADDR_VAR 0 2
20720: PUSH
20721: LD_INT 22
20723: PUSH
20724: LD_OWVAR 2
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 21
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PPUSH
20747: CALL_OW 69
20751: ST_TO_ADDR
// if not tmp then
20752: LD_VAR 0 2
20756: NOT
20757: IFFALSE 20761
// exit ;
20759: GO 20848
// un := tmp [ rand ( 1 , tmp ) ] ;
20761: LD_ADDR_VAR 0 1
20765: PUSH
20766: LD_VAR 0 2
20770: PUSH
20771: LD_INT 1
20773: PPUSH
20774: LD_VAR 0 2
20778: PPUSH
20779: CALL_OW 12
20783: ARRAY
20784: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20785: LD_VAR 0 1
20789: PPUSH
20790: LD_INT 0
20792: PPUSH
20793: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20797: LD_VAR 0 1
20801: PPUSH
20802: LD_OWVAR 3
20806: PUSH
20807: LD_VAR 0 1
20811: DIFF
20812: PPUSH
20813: LD_VAR 0 1
20817: PPUSH
20818: CALL_OW 74
20822: PPUSH
20823: CALL_OW 115
// wait ( 0 0$20 ) ;
20827: LD_INT 700
20829: PPUSH
20830: CALL_OW 67
// SetSide ( un , your_side ) ;
20834: LD_VAR 0 1
20838: PPUSH
20839: LD_OWVAR 2
20843: PPUSH
20844: CALL_OW 235
// end ;
20848: PPOPN 2
20850: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20851: LD_EXP 22
20855: PUSH
20856: LD_EXP 55
20860: AND
20861: IFFALSE 20967
20863: GO 20865
20865: DISABLE
20866: LD_INT 0
20868: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20869: LD_ADDR_VAR 0 1
20873: PUSH
20874: LD_INT 22
20876: PUSH
20877: LD_OWVAR 2
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 2
20888: PUSH
20889: LD_INT 30
20891: PUSH
20892: LD_INT 0
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 30
20901: PUSH
20902: LD_INT 1
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PPUSH
20918: CALL_OW 69
20922: ST_TO_ADDR
// if not depot then
20923: LD_VAR 0 1
20927: NOT
20928: IFFALSE 20932
// exit ;
20930: GO 20967
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20932: LD_VAR 0 1
20936: PUSH
20937: LD_INT 1
20939: ARRAY
20940: PPUSH
20941: CALL_OW 250
20945: PPUSH
20946: LD_VAR 0 1
20950: PUSH
20951: LD_INT 1
20953: ARRAY
20954: PPUSH
20955: CALL_OW 251
20959: PPUSH
20960: LD_INT 70
20962: PPUSH
20963: CALL_OW 495
// end ;
20967: PPOPN 1
20969: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20970: LD_EXP 22
20974: PUSH
20975: LD_EXP 56
20979: AND
20980: IFFALSE 21191
20982: GO 20984
20984: DISABLE
20985: LD_INT 0
20987: PPUSH
20988: PPUSH
20989: PPUSH
20990: PPUSH
20991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20992: LD_ADDR_VAR 0 5
20996: PUSH
20997: LD_INT 22
20999: PUSH
21000: LD_OWVAR 2
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 21
21011: PUSH
21012: LD_INT 1
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PPUSH
21023: CALL_OW 69
21027: ST_TO_ADDR
// if not tmp then
21028: LD_VAR 0 5
21032: NOT
21033: IFFALSE 21037
// exit ;
21035: GO 21191
// for i in tmp do
21037: LD_ADDR_VAR 0 1
21041: PUSH
21042: LD_VAR 0 5
21046: PUSH
21047: FOR_IN
21048: IFFALSE 21189
// begin d := rand ( 0 , 5 ) ;
21050: LD_ADDR_VAR 0 4
21054: PUSH
21055: LD_INT 0
21057: PPUSH
21058: LD_INT 5
21060: PPUSH
21061: CALL_OW 12
21065: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21066: LD_ADDR_VAR 0 2
21070: PUSH
21071: LD_VAR 0 1
21075: PPUSH
21076: CALL_OW 250
21080: PPUSH
21081: LD_VAR 0 4
21085: PPUSH
21086: LD_INT 3
21088: PPUSH
21089: LD_INT 12
21091: PPUSH
21092: CALL_OW 12
21096: PPUSH
21097: CALL_OW 272
21101: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21102: LD_ADDR_VAR 0 3
21106: PUSH
21107: LD_VAR 0 1
21111: PPUSH
21112: CALL_OW 251
21116: PPUSH
21117: LD_VAR 0 4
21121: PPUSH
21122: LD_INT 3
21124: PPUSH
21125: LD_INT 12
21127: PPUSH
21128: CALL_OW 12
21132: PPUSH
21133: CALL_OW 273
21137: ST_TO_ADDR
// if ValidHex ( x , y ) then
21138: LD_VAR 0 2
21142: PPUSH
21143: LD_VAR 0 3
21147: PPUSH
21148: CALL_OW 488
21152: IFFALSE 21187
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21154: LD_VAR 0 1
21158: PPUSH
21159: LD_VAR 0 2
21163: PPUSH
21164: LD_VAR 0 3
21168: PPUSH
21169: LD_INT 3
21171: PPUSH
21172: LD_INT 6
21174: PPUSH
21175: CALL_OW 12
21179: PPUSH
21180: LD_INT 1
21182: PPUSH
21183: CALL_OW 483
// end ;
21187: GO 21047
21189: POP
21190: POP
// end ;
21191: PPOPN 5
21193: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21194: LD_EXP 22
21198: PUSH
21199: LD_EXP 57
21203: AND
21204: IFFALSE 21298
21206: GO 21208
21208: DISABLE
21209: LD_INT 0
21211: PPUSH
21212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21213: LD_ADDR_VAR 0 2
21217: PUSH
21218: LD_INT 22
21220: PUSH
21221: LD_OWVAR 2
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 32
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 21
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: LIST
21254: PPUSH
21255: CALL_OW 69
21259: ST_TO_ADDR
// if not tmp then
21260: LD_VAR 0 2
21264: NOT
21265: IFFALSE 21269
// exit ;
21267: GO 21298
// for i in tmp do
21269: LD_ADDR_VAR 0 1
21273: PUSH
21274: LD_VAR 0 2
21278: PUSH
21279: FOR_IN
21280: IFFALSE 21296
// SetFuel ( i , 0 ) ;
21282: LD_VAR 0 1
21286: PPUSH
21287: LD_INT 0
21289: PPUSH
21290: CALL_OW 240
21294: GO 21279
21296: POP
21297: POP
// end ;
21298: PPOPN 2
21300: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21301: LD_EXP 22
21305: PUSH
21306: LD_EXP 58
21310: AND
21311: IFFALSE 21377
21313: GO 21315
21315: DISABLE
21316: LD_INT 0
21318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21319: LD_ADDR_VAR 0 1
21323: PUSH
21324: LD_INT 22
21326: PUSH
21327: LD_OWVAR 2
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 30
21338: PUSH
21339: LD_INT 29
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PPUSH
21350: CALL_OW 69
21354: ST_TO_ADDR
// if not tmp then
21355: LD_VAR 0 1
21359: NOT
21360: IFFALSE 21364
// exit ;
21362: GO 21377
// DestroyUnit ( tmp [ 1 ] ) ;
21364: LD_VAR 0 1
21368: PUSH
21369: LD_INT 1
21371: ARRAY
21372: PPUSH
21373: CALL_OW 65
// end ;
21377: PPOPN 1
21379: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21380: LD_EXP 22
21384: PUSH
21385: LD_EXP 60
21389: AND
21390: IFFALSE 21519
21392: GO 21394
21394: DISABLE
21395: LD_INT 0
21397: PPUSH
// begin uc_side := 0 ;
21398: LD_ADDR_OWVAR 20
21402: PUSH
21403: LD_INT 0
21405: ST_TO_ADDR
// uc_nation := nation_arabian ;
21406: LD_ADDR_OWVAR 21
21410: PUSH
21411: LD_INT 2
21413: ST_TO_ADDR
// hc_gallery :=  ;
21414: LD_ADDR_OWVAR 33
21418: PUSH
21419: LD_STRING 
21421: ST_TO_ADDR
// hc_name :=  ;
21422: LD_ADDR_OWVAR 26
21426: PUSH
21427: LD_STRING 
21429: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21430: LD_INT 1
21432: PPUSH
21433: LD_INT 11
21435: PPUSH
21436: LD_INT 10
21438: PPUSH
21439: CALL_OW 380
// un := CreateHuman ;
21443: LD_ADDR_VAR 0 1
21447: PUSH
21448: CALL_OW 44
21452: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21453: LD_VAR 0 1
21457: PPUSH
21458: LD_INT 1
21460: PPUSH
21461: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21465: LD_INT 35
21467: PPUSH
21468: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21472: LD_VAR 0 1
21476: PPUSH
21477: LD_INT 22
21479: PUSH
21480: LD_OWVAR 2
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PPUSH
21489: CALL_OW 69
21493: PPUSH
21494: LD_VAR 0 1
21498: PPUSH
21499: CALL_OW 74
21503: PPUSH
21504: CALL_OW 115
// until IsDead ( un ) ;
21508: LD_VAR 0 1
21512: PPUSH
21513: CALL_OW 301
21517: IFFALSE 21465
// end ;
21519: PPOPN 1
21521: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21522: LD_EXP 22
21526: PUSH
21527: LD_EXP 62
21531: AND
21532: IFFALSE 21544
21534: GO 21536
21536: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21537: LD_STRING earthquake(getX(game), 0, 32)
21539: PPUSH
21540: CALL_OW 559
21544: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21545: LD_EXP 22
21549: PUSH
21550: LD_EXP 63
21554: AND
21555: IFFALSE 21646
21557: GO 21559
21559: DISABLE
21560: LD_INT 0
21562: PPUSH
// begin enable ;
21563: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21564: LD_ADDR_VAR 0 1
21568: PUSH
21569: LD_INT 22
21571: PUSH
21572: LD_OWVAR 2
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 21
21583: PUSH
21584: LD_INT 2
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 33
21593: PUSH
21594: LD_INT 3
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: PPUSH
21606: CALL_OW 69
21610: ST_TO_ADDR
// if not tmp then
21611: LD_VAR 0 1
21615: NOT
21616: IFFALSE 21620
// exit ;
21618: GO 21646
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21620: LD_VAR 0 1
21624: PUSH
21625: LD_INT 1
21627: PPUSH
21628: LD_VAR 0 1
21632: PPUSH
21633: CALL_OW 12
21637: ARRAY
21638: PPUSH
21639: LD_INT 1
21641: PPUSH
21642: CALL_OW 234
// end ;
21646: PPOPN 1
21648: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21649: LD_EXP 22
21653: PUSH
21654: LD_EXP 64
21658: AND
21659: IFFALSE 21800
21661: GO 21663
21663: DISABLE
21664: LD_INT 0
21666: PPUSH
21667: PPUSH
21668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21669: LD_ADDR_VAR 0 3
21673: PUSH
21674: LD_INT 22
21676: PUSH
21677: LD_OWVAR 2
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 25
21688: PUSH
21689: LD_INT 1
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PPUSH
21700: CALL_OW 69
21704: ST_TO_ADDR
// if not tmp then
21705: LD_VAR 0 3
21709: NOT
21710: IFFALSE 21714
// exit ;
21712: GO 21800
// un := tmp [ rand ( 1 , tmp ) ] ;
21714: LD_ADDR_VAR 0 2
21718: PUSH
21719: LD_VAR 0 3
21723: PUSH
21724: LD_INT 1
21726: PPUSH
21727: LD_VAR 0 3
21731: PPUSH
21732: CALL_OW 12
21736: ARRAY
21737: ST_TO_ADDR
// if Crawls ( un ) then
21738: LD_VAR 0 2
21742: PPUSH
21743: CALL_OW 318
21747: IFFALSE 21758
// ComWalk ( un ) ;
21749: LD_VAR 0 2
21753: PPUSH
21754: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21758: LD_VAR 0 2
21762: PPUSH
21763: LD_INT 9
21765: PPUSH
21766: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21770: LD_INT 28
21772: PPUSH
21773: LD_OWVAR 2
21777: PPUSH
21778: LD_INT 2
21780: PPUSH
21781: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21785: LD_INT 29
21787: PPUSH
21788: LD_OWVAR 2
21792: PPUSH
21793: LD_INT 2
21795: PPUSH
21796: CALL_OW 322
// end ;
21800: PPOPN 3
21802: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21803: LD_EXP 22
21807: PUSH
21808: LD_EXP 65
21812: AND
21813: IFFALSE 21924
21815: GO 21817
21817: DISABLE
21818: LD_INT 0
21820: PPUSH
21821: PPUSH
21822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21823: LD_ADDR_VAR 0 3
21827: PUSH
21828: LD_INT 22
21830: PUSH
21831: LD_OWVAR 2
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 25
21842: PUSH
21843: LD_INT 1
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PPUSH
21854: CALL_OW 69
21858: ST_TO_ADDR
// if not tmp then
21859: LD_VAR 0 3
21863: NOT
21864: IFFALSE 21868
// exit ;
21866: GO 21924
// un := tmp [ rand ( 1 , tmp ) ] ;
21868: LD_ADDR_VAR 0 2
21872: PUSH
21873: LD_VAR 0 3
21877: PUSH
21878: LD_INT 1
21880: PPUSH
21881: LD_VAR 0 3
21885: PPUSH
21886: CALL_OW 12
21890: ARRAY
21891: ST_TO_ADDR
// if Crawls ( un ) then
21892: LD_VAR 0 2
21896: PPUSH
21897: CALL_OW 318
21901: IFFALSE 21912
// ComWalk ( un ) ;
21903: LD_VAR 0 2
21907: PPUSH
21908: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21912: LD_VAR 0 2
21916: PPUSH
21917: LD_INT 8
21919: PPUSH
21920: CALL_OW 336
// end ;
21924: PPOPN 3
21926: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21927: LD_EXP 22
21931: PUSH
21932: LD_EXP 66
21936: AND
21937: IFFALSE 22081
21939: GO 21941
21941: DISABLE
21942: LD_INT 0
21944: PPUSH
21945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21946: LD_ADDR_VAR 0 2
21950: PUSH
21951: LD_INT 22
21953: PUSH
21954: LD_OWVAR 2
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 21
21965: PUSH
21966: LD_INT 2
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 2
21975: PUSH
21976: LD_INT 34
21978: PUSH
21979: LD_INT 12
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 34
21988: PUSH
21989: LD_INT 51
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 34
21998: PUSH
21999: LD_INT 32
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: PPUSH
22017: CALL_OW 69
22021: ST_TO_ADDR
// if not tmp then
22022: LD_VAR 0 2
22026: NOT
22027: IFFALSE 22031
// exit ;
22029: GO 22081
// for i in tmp do
22031: LD_ADDR_VAR 0 1
22035: PUSH
22036: LD_VAR 0 2
22040: PUSH
22041: FOR_IN
22042: IFFALSE 22079
// if GetCargo ( i , mat_artifact ) = 0 then
22044: LD_VAR 0 1
22048: PPUSH
22049: LD_INT 4
22051: PPUSH
22052: CALL_OW 289
22056: PUSH
22057: LD_INT 0
22059: EQUAL
22060: IFFALSE 22077
// SetCargo ( i , mat_siberit , 100 ) ;
22062: LD_VAR 0 1
22066: PPUSH
22067: LD_INT 3
22069: PPUSH
22070: LD_INT 100
22072: PPUSH
22073: CALL_OW 290
22077: GO 22041
22079: POP
22080: POP
// end ;
22081: PPOPN 2
22083: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22084: LD_EXP 22
22088: PUSH
22089: LD_EXP 67
22093: AND
22094: IFFALSE 22277
22096: GO 22098
22098: DISABLE
22099: LD_INT 0
22101: PPUSH
22102: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22103: LD_ADDR_VAR 0 2
22107: PUSH
22108: LD_INT 22
22110: PUSH
22111: LD_OWVAR 2
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PPUSH
22120: CALL_OW 69
22124: ST_TO_ADDR
// if not tmp then
22125: LD_VAR 0 2
22129: NOT
22130: IFFALSE 22134
// exit ;
22132: GO 22277
// for i := 1 to 2 do
22134: LD_ADDR_VAR 0 1
22138: PUSH
22139: DOUBLE
22140: LD_INT 1
22142: DEC
22143: ST_TO_ADDR
22144: LD_INT 2
22146: PUSH
22147: FOR_TO
22148: IFFALSE 22275
// begin uc_side := your_side ;
22150: LD_ADDR_OWVAR 20
22154: PUSH
22155: LD_OWVAR 2
22159: ST_TO_ADDR
// uc_nation := nation_american ;
22160: LD_ADDR_OWVAR 21
22164: PUSH
22165: LD_INT 1
22167: ST_TO_ADDR
// vc_chassis := us_morphling ;
22168: LD_ADDR_OWVAR 37
22172: PUSH
22173: LD_INT 5
22175: ST_TO_ADDR
// vc_engine := engine_siberite ;
22176: LD_ADDR_OWVAR 39
22180: PUSH
22181: LD_INT 3
22183: ST_TO_ADDR
// vc_control := control_computer ;
22184: LD_ADDR_OWVAR 38
22188: PUSH
22189: LD_INT 3
22191: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22192: LD_ADDR_OWVAR 40
22196: PUSH
22197: LD_INT 10
22199: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22200: LD_VAR 0 2
22204: PUSH
22205: LD_INT 1
22207: ARRAY
22208: PPUSH
22209: CALL_OW 310
22213: NOT
22214: IFFALSE 22261
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22216: CALL_OW 45
22220: PPUSH
22221: LD_VAR 0 2
22225: PUSH
22226: LD_INT 1
22228: ARRAY
22229: PPUSH
22230: CALL_OW 250
22234: PPUSH
22235: LD_VAR 0 2
22239: PUSH
22240: LD_INT 1
22242: ARRAY
22243: PPUSH
22244: CALL_OW 251
22248: PPUSH
22249: LD_INT 12
22251: PPUSH
22252: LD_INT 1
22254: PPUSH
22255: CALL_OW 50
22259: GO 22273
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22261: CALL_OW 45
22265: PPUSH
22266: LD_INT 1
22268: PPUSH
22269: CALL_OW 51
// end ;
22273: GO 22147
22275: POP
22276: POP
// end ;
22277: PPOPN 2
22279: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22280: LD_EXP 22
22284: PUSH
22285: LD_EXP 68
22289: AND
22290: IFFALSE 22512
22292: GO 22294
22294: DISABLE
22295: LD_INT 0
22297: PPUSH
22298: PPUSH
22299: PPUSH
22300: PPUSH
22301: PPUSH
22302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22303: LD_ADDR_VAR 0 6
22307: PUSH
22308: LD_INT 22
22310: PUSH
22311: LD_OWVAR 2
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 21
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 3
22332: PUSH
22333: LD_INT 23
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: LIST
22351: PPUSH
22352: CALL_OW 69
22356: ST_TO_ADDR
// if not tmp then
22357: LD_VAR 0 6
22361: NOT
22362: IFFALSE 22366
// exit ;
22364: GO 22512
// s1 := rand ( 1 , 4 ) ;
22366: LD_ADDR_VAR 0 2
22370: PUSH
22371: LD_INT 1
22373: PPUSH
22374: LD_INT 4
22376: PPUSH
22377: CALL_OW 12
22381: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22382: LD_ADDR_VAR 0 4
22386: PUSH
22387: LD_VAR 0 6
22391: PUSH
22392: LD_INT 1
22394: ARRAY
22395: PPUSH
22396: LD_VAR 0 2
22400: PPUSH
22401: CALL_OW 259
22405: ST_TO_ADDR
// if s1 = 1 then
22406: LD_VAR 0 2
22410: PUSH
22411: LD_INT 1
22413: EQUAL
22414: IFFALSE 22434
// s2 := rand ( 2 , 4 ) else
22416: LD_ADDR_VAR 0 3
22420: PUSH
22421: LD_INT 2
22423: PPUSH
22424: LD_INT 4
22426: PPUSH
22427: CALL_OW 12
22431: ST_TO_ADDR
22432: GO 22442
// s2 := 1 ;
22434: LD_ADDR_VAR 0 3
22438: PUSH
22439: LD_INT 1
22441: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22442: LD_ADDR_VAR 0 5
22446: PUSH
22447: LD_VAR 0 6
22451: PUSH
22452: LD_INT 1
22454: ARRAY
22455: PPUSH
22456: LD_VAR 0 3
22460: PPUSH
22461: CALL_OW 259
22465: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22466: LD_VAR 0 6
22470: PUSH
22471: LD_INT 1
22473: ARRAY
22474: PPUSH
22475: LD_VAR 0 2
22479: PPUSH
22480: LD_VAR 0 5
22484: PPUSH
22485: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22489: LD_VAR 0 6
22493: PUSH
22494: LD_INT 1
22496: ARRAY
22497: PPUSH
22498: LD_VAR 0 3
22502: PPUSH
22503: LD_VAR 0 4
22507: PPUSH
22508: CALL_OW 237
// end ;
22512: PPOPN 6
22514: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22515: LD_EXP 22
22519: PUSH
22520: LD_EXP 69
22524: AND
22525: IFFALSE 22604
22527: GO 22529
22529: DISABLE
22530: LD_INT 0
22532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22533: LD_ADDR_VAR 0 1
22537: PUSH
22538: LD_INT 22
22540: PUSH
22541: LD_OWVAR 2
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 30
22552: PUSH
22553: LD_INT 3
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PPUSH
22564: CALL_OW 69
22568: ST_TO_ADDR
// if not tmp then
22569: LD_VAR 0 1
22573: NOT
22574: IFFALSE 22578
// exit ;
22576: GO 22604
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22578: LD_VAR 0 1
22582: PUSH
22583: LD_INT 1
22585: PPUSH
22586: LD_VAR 0 1
22590: PPUSH
22591: CALL_OW 12
22595: ARRAY
22596: PPUSH
22597: LD_INT 1
22599: PPUSH
22600: CALL_OW 234
// end ;
22604: PPOPN 1
22606: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22607: LD_EXP 22
22611: PUSH
22612: LD_EXP 70
22616: AND
22617: IFFALSE 22729
22619: GO 22621
22621: DISABLE
22622: LD_INT 0
22624: PPUSH
22625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22626: LD_ADDR_VAR 0 2
22630: PUSH
22631: LD_INT 22
22633: PUSH
22634: LD_OWVAR 2
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: LD_INT 30
22648: PUSH
22649: LD_INT 27
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 30
22658: PUSH
22659: LD_INT 26
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 30
22668: PUSH
22669: LD_INT 28
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PPUSH
22686: CALL_OW 69
22690: ST_TO_ADDR
// if not tmp then
22691: LD_VAR 0 2
22695: NOT
22696: IFFALSE 22700
// exit ;
22698: GO 22729
// for i in tmp do
22700: LD_ADDR_VAR 0 1
22704: PUSH
22705: LD_VAR 0 2
22709: PUSH
22710: FOR_IN
22711: IFFALSE 22727
// SetLives ( i , 1 ) ;
22713: LD_VAR 0 1
22717: PPUSH
22718: LD_INT 1
22720: PPUSH
22721: CALL_OW 234
22725: GO 22710
22727: POP
22728: POP
// end ;
22729: PPOPN 2
22731: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22732: LD_EXP 22
22736: PUSH
22737: LD_EXP 71
22741: AND
22742: IFFALSE 23029
22744: GO 22746
22746: DISABLE
22747: LD_INT 0
22749: PPUSH
22750: PPUSH
22751: PPUSH
// begin i := rand ( 1 , 7 ) ;
22752: LD_ADDR_VAR 0 1
22756: PUSH
22757: LD_INT 1
22759: PPUSH
22760: LD_INT 7
22762: PPUSH
22763: CALL_OW 12
22767: ST_TO_ADDR
// case i of 1 :
22768: LD_VAR 0 1
22772: PUSH
22773: LD_INT 1
22775: DOUBLE
22776: EQUAL
22777: IFTRUE 22781
22779: GO 22791
22781: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22782: LD_STRING earthquake(getX(game), 0, 32)
22784: PPUSH
22785: CALL_OW 559
22789: GO 23029
22791: LD_INT 2
22793: DOUBLE
22794: EQUAL
22795: IFTRUE 22799
22797: GO 22813
22799: POP
// begin ToLua ( displayStucuk(); ) ;
22800: LD_STRING displayStucuk();
22802: PPUSH
22803: CALL_OW 559
// ResetFog ;
22807: CALL_OW 335
// end ; 3 :
22811: GO 23029
22813: LD_INT 3
22815: DOUBLE
22816: EQUAL
22817: IFTRUE 22821
22819: GO 22925
22821: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22822: LD_ADDR_VAR 0 2
22826: PUSH
22827: LD_INT 22
22829: PUSH
22830: LD_OWVAR 2
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 25
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PPUSH
22853: CALL_OW 69
22857: ST_TO_ADDR
// if not tmp then
22858: LD_VAR 0 2
22862: NOT
22863: IFFALSE 22867
// exit ;
22865: GO 23029
// un := tmp [ rand ( 1 , tmp ) ] ;
22867: LD_ADDR_VAR 0 3
22871: PUSH
22872: LD_VAR 0 2
22876: PUSH
22877: LD_INT 1
22879: PPUSH
22880: LD_VAR 0 2
22884: PPUSH
22885: CALL_OW 12
22889: ARRAY
22890: ST_TO_ADDR
// if Crawls ( un ) then
22891: LD_VAR 0 3
22895: PPUSH
22896: CALL_OW 318
22900: IFFALSE 22911
// ComWalk ( un ) ;
22902: LD_VAR 0 3
22906: PPUSH
22907: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22911: LD_VAR 0 3
22915: PPUSH
22916: LD_INT 8
22918: PPUSH
22919: CALL_OW 336
// end ; 4 :
22923: GO 23029
22925: LD_INT 4
22927: DOUBLE
22928: EQUAL
22929: IFTRUE 22933
22931: GO 23007
22933: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22934: LD_ADDR_VAR 0 2
22938: PUSH
22939: LD_INT 22
22941: PUSH
22942: LD_OWVAR 2
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 30
22953: PUSH
22954: LD_INT 29
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PPUSH
22965: CALL_OW 69
22969: ST_TO_ADDR
// if not tmp then
22970: LD_VAR 0 2
22974: NOT
22975: IFFALSE 22979
// exit ;
22977: GO 23029
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22979: LD_VAR 0 2
22983: PUSH
22984: LD_INT 1
22986: ARRAY
22987: PPUSH
22988: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22992: LD_VAR 0 2
22996: PUSH
22997: LD_INT 1
22999: ARRAY
23000: PPUSH
23001: CALL_OW 65
// end ; 5 .. 7 :
23005: GO 23029
23007: LD_INT 5
23009: DOUBLE
23010: GREATEREQUAL
23011: IFFALSE 23019
23013: LD_INT 7
23015: DOUBLE
23016: LESSEQUAL
23017: IFTRUE 23021
23019: GO 23028
23021: POP
// StreamSibBomb ; end ;
23022: CALL 19266 0 0
23026: GO 23029
23028: POP
// end ;
23029: PPOPN 3
23031: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23032: LD_EXP 22
23036: PUSH
23037: LD_EXP 72
23041: AND
23042: IFFALSE 23198
23044: GO 23046
23046: DISABLE
23047: LD_INT 0
23049: PPUSH
23050: PPUSH
23051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23052: LD_ADDR_VAR 0 2
23056: PUSH
23057: LD_INT 81
23059: PUSH
23060: LD_OWVAR 2
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 2
23071: PUSH
23072: LD_INT 21
23074: PUSH
23075: LD_INT 1
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 21
23084: PUSH
23085: LD_INT 2
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: LIST
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: ST_TO_ADDR
// if not tmp then
23106: LD_VAR 0 2
23110: NOT
23111: IFFALSE 23115
// exit ;
23113: GO 23198
// p := 0 ;
23115: LD_ADDR_VAR 0 3
23119: PUSH
23120: LD_INT 0
23122: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23123: LD_INT 35
23125: PPUSH
23126: CALL_OW 67
// p := p + 1 ;
23130: LD_ADDR_VAR 0 3
23134: PUSH
23135: LD_VAR 0 3
23139: PUSH
23140: LD_INT 1
23142: PLUS
23143: ST_TO_ADDR
// for i in tmp do
23144: LD_ADDR_VAR 0 1
23148: PUSH
23149: LD_VAR 0 2
23153: PUSH
23154: FOR_IN
23155: IFFALSE 23186
// if GetLives ( i ) < 1000 then
23157: LD_VAR 0 1
23161: PPUSH
23162: CALL_OW 256
23166: PUSH
23167: LD_INT 1000
23169: LESS
23170: IFFALSE 23184
// SetLives ( i , 1000 ) ;
23172: LD_VAR 0 1
23176: PPUSH
23177: LD_INT 1000
23179: PPUSH
23180: CALL_OW 234
23184: GO 23154
23186: POP
23187: POP
// until p > 20 ;
23188: LD_VAR 0 3
23192: PUSH
23193: LD_INT 20
23195: GREATER
23196: IFFALSE 23123
// end ;
23198: PPOPN 3
23200: END
// every 0 0$1 trigger StreamModeActive and sTime do
23201: LD_EXP 22
23205: PUSH
23206: LD_EXP 73
23210: AND
23211: IFFALSE 23246
23213: GO 23215
23215: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23216: LD_INT 28
23218: PPUSH
23219: LD_OWVAR 2
23223: PPUSH
23224: LD_INT 2
23226: PPUSH
23227: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23231: LD_INT 30
23233: PPUSH
23234: LD_OWVAR 2
23238: PPUSH
23239: LD_INT 2
23241: PPUSH
23242: CALL_OW 322
// end ;
23246: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23247: LD_EXP 22
23251: PUSH
23252: LD_EXP 74
23256: AND
23257: IFFALSE 23378
23259: GO 23261
23261: DISABLE
23262: LD_INT 0
23264: PPUSH
23265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23266: LD_ADDR_VAR 0 2
23270: PUSH
23271: LD_INT 22
23273: PUSH
23274: LD_OWVAR 2
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 21
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 3
23295: PUSH
23296: LD_INT 23
23298: PUSH
23299: LD_INT 0
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: LIST
23314: PPUSH
23315: CALL_OW 69
23319: ST_TO_ADDR
// if not tmp then
23320: LD_VAR 0 2
23324: NOT
23325: IFFALSE 23329
// exit ;
23327: GO 23378
// for i in tmp do
23329: LD_ADDR_VAR 0 1
23333: PUSH
23334: LD_VAR 0 2
23338: PUSH
23339: FOR_IN
23340: IFFALSE 23376
// begin if Crawls ( i ) then
23342: LD_VAR 0 1
23346: PPUSH
23347: CALL_OW 318
23351: IFFALSE 23362
// ComWalk ( i ) ;
23353: LD_VAR 0 1
23357: PPUSH
23358: CALL_OW 138
// SetClass ( i , 2 ) ;
23362: LD_VAR 0 1
23366: PPUSH
23367: LD_INT 2
23369: PPUSH
23370: CALL_OW 336
// end ;
23374: GO 23339
23376: POP
23377: POP
// end ;
23378: PPOPN 2
23380: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23381: LD_EXP 22
23385: PUSH
23386: LD_EXP 75
23390: AND
23391: IFFALSE 23679
23393: GO 23395
23395: DISABLE
23396: LD_INT 0
23398: PPUSH
23399: PPUSH
23400: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23401: LD_OWVAR 2
23405: PPUSH
23406: LD_INT 9
23408: PPUSH
23409: LD_INT 1
23411: PPUSH
23412: LD_INT 1
23414: PPUSH
23415: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23419: LD_INT 9
23421: PPUSH
23422: LD_OWVAR 2
23426: PPUSH
23427: CALL_OW 343
// uc_side := 9 ;
23431: LD_ADDR_OWVAR 20
23435: PUSH
23436: LD_INT 9
23438: ST_TO_ADDR
// uc_nation := 2 ;
23439: LD_ADDR_OWVAR 21
23443: PUSH
23444: LD_INT 2
23446: ST_TO_ADDR
// hc_name := Dark Warrior ;
23447: LD_ADDR_OWVAR 26
23451: PUSH
23452: LD_STRING Dark Warrior
23454: ST_TO_ADDR
// hc_gallery :=  ;
23455: LD_ADDR_OWVAR 33
23459: PUSH
23460: LD_STRING 
23462: ST_TO_ADDR
// hc_noskilllimit := true ;
23463: LD_ADDR_OWVAR 76
23467: PUSH
23468: LD_INT 1
23470: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23471: LD_ADDR_OWVAR 31
23475: PUSH
23476: LD_INT 30
23478: PUSH
23479: LD_INT 30
23481: PUSH
23482: LD_INT 30
23484: PUSH
23485: LD_INT 30
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: ST_TO_ADDR
// un := CreateHuman ;
23494: LD_ADDR_VAR 0 3
23498: PUSH
23499: CALL_OW 44
23503: ST_TO_ADDR
// hc_noskilllimit := false ;
23504: LD_ADDR_OWVAR 76
23508: PUSH
23509: LD_INT 0
23511: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23512: LD_VAR 0 3
23516: PPUSH
23517: LD_INT 1
23519: PPUSH
23520: CALL_OW 51
// ToLua ( playRanger() ) ;
23524: LD_STRING playRanger()
23526: PPUSH
23527: CALL_OW 559
// p := 0 ;
23531: LD_ADDR_VAR 0 2
23535: PUSH
23536: LD_INT 0
23538: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23539: LD_INT 35
23541: PPUSH
23542: CALL_OW 67
// p := p + 1 ;
23546: LD_ADDR_VAR 0 2
23550: PUSH
23551: LD_VAR 0 2
23555: PUSH
23556: LD_INT 1
23558: PLUS
23559: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23560: LD_VAR 0 3
23564: PPUSH
23565: CALL_OW 256
23569: PUSH
23570: LD_INT 1000
23572: LESS
23573: IFFALSE 23587
// SetLives ( un , 1000 ) ;
23575: LD_VAR 0 3
23579: PPUSH
23580: LD_INT 1000
23582: PPUSH
23583: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23587: LD_VAR 0 3
23591: PPUSH
23592: LD_INT 81
23594: PUSH
23595: LD_OWVAR 2
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 91
23606: PUSH
23607: LD_VAR 0 3
23611: PUSH
23612: LD_INT 30
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: LIST
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PPUSH
23624: CALL_OW 69
23628: PPUSH
23629: LD_VAR 0 3
23633: PPUSH
23634: CALL_OW 74
23638: PPUSH
23639: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23643: LD_VAR 0 2
23647: PUSH
23648: LD_INT 80
23650: GREATER
23651: PUSH
23652: LD_VAR 0 3
23656: PPUSH
23657: CALL_OW 301
23661: OR
23662: IFFALSE 23539
// if un then
23664: LD_VAR 0 3
23668: IFFALSE 23679
// RemoveUnit ( un ) ;
23670: LD_VAR 0 3
23674: PPUSH
23675: CALL_OW 64
// end ;
23679: PPOPN 3
23681: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23682: LD_EXP 76
23686: IFFALSE 23802
23688: GO 23690
23690: DISABLE
23691: LD_INT 0
23693: PPUSH
23694: PPUSH
23695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23696: LD_ADDR_VAR 0 2
23700: PUSH
23701: LD_INT 81
23703: PUSH
23704: LD_OWVAR 2
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 21
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PPUSH
23727: CALL_OW 69
23731: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23732: LD_STRING playComputer()
23734: PPUSH
23735: CALL_OW 559
// if not tmp then
23739: LD_VAR 0 2
23743: NOT
23744: IFFALSE 23748
// exit ;
23746: GO 23802
// for i in tmp do
23748: LD_ADDR_VAR 0 1
23752: PUSH
23753: LD_VAR 0 2
23757: PUSH
23758: FOR_IN
23759: IFFALSE 23800
// for j := 1 to 4 do
23761: LD_ADDR_VAR 0 3
23765: PUSH
23766: DOUBLE
23767: LD_INT 1
23769: DEC
23770: ST_TO_ADDR
23771: LD_INT 4
23773: PUSH
23774: FOR_TO
23775: IFFALSE 23796
// SetSkill ( i , j , 10 ) ;
23777: LD_VAR 0 1
23781: PPUSH
23782: LD_VAR 0 3
23786: PPUSH
23787: LD_INT 10
23789: PPUSH
23790: CALL_OW 237
23794: GO 23774
23796: POP
23797: POP
23798: GO 23758
23800: POP
23801: POP
// end ;
23802: PPOPN 3
23804: END
// every 0 0$1 trigger s30 do var i , tmp ;
23805: LD_EXP 77
23809: IFFALSE 23878
23811: GO 23813
23813: DISABLE
23814: LD_INT 0
23816: PPUSH
23817: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23818: LD_ADDR_VAR 0 2
23822: PUSH
23823: LD_INT 22
23825: PUSH
23826: LD_OWVAR 2
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PPUSH
23835: CALL_OW 69
23839: ST_TO_ADDR
// if not tmp then
23840: LD_VAR 0 2
23844: NOT
23845: IFFALSE 23849
// exit ;
23847: GO 23878
// for i in tmp do
23849: LD_ADDR_VAR 0 1
23853: PUSH
23854: LD_VAR 0 2
23858: PUSH
23859: FOR_IN
23860: IFFALSE 23876
// SetLives ( i , 300 ) ;
23862: LD_VAR 0 1
23866: PPUSH
23867: LD_INT 300
23869: PPUSH
23870: CALL_OW 234
23874: GO 23859
23876: POP
23877: POP
// end ;
23878: PPOPN 2
23880: END
// every 0 0$1 trigger s60 do var i , tmp ;
23881: LD_EXP 78
23885: IFFALSE 23954
23887: GO 23889
23889: DISABLE
23890: LD_INT 0
23892: PPUSH
23893: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23894: LD_ADDR_VAR 0 2
23898: PUSH
23899: LD_INT 22
23901: PUSH
23902: LD_OWVAR 2
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PPUSH
23911: CALL_OW 69
23915: ST_TO_ADDR
// if not tmp then
23916: LD_VAR 0 2
23920: NOT
23921: IFFALSE 23925
// exit ;
23923: GO 23954
// for i in tmp do
23925: LD_ADDR_VAR 0 1
23929: PUSH
23930: LD_VAR 0 2
23934: PUSH
23935: FOR_IN
23936: IFFALSE 23952
// SetLives ( i , 600 ) ;
23938: LD_VAR 0 1
23942: PPUSH
23943: LD_INT 600
23945: PPUSH
23946: CALL_OW 234
23950: GO 23935
23952: POP
23953: POP
// end ;
23954: PPOPN 2
23956: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23957: LD_INT 0
23959: PPUSH
// case cmd of 301 :
23960: LD_VAR 0 1
23964: PUSH
23965: LD_INT 301
23967: DOUBLE
23968: EQUAL
23969: IFTRUE 23973
23971: GO 24005
23973: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23974: LD_VAR 0 6
23978: PPUSH
23979: LD_VAR 0 7
23983: PPUSH
23984: LD_VAR 0 8
23988: PPUSH
23989: LD_VAR 0 4
23993: PPUSH
23994: LD_VAR 0 5
23998: PPUSH
23999: CALL 25214 0 5
24003: GO 24126
24005: LD_INT 302
24007: DOUBLE
24008: EQUAL
24009: IFTRUE 24013
24011: GO 24050
24013: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24014: LD_VAR 0 6
24018: PPUSH
24019: LD_VAR 0 7
24023: PPUSH
24024: LD_VAR 0 8
24028: PPUSH
24029: LD_VAR 0 9
24033: PPUSH
24034: LD_VAR 0 4
24038: PPUSH
24039: LD_VAR 0 5
24043: PPUSH
24044: CALL 25305 0 6
24048: GO 24126
24050: LD_INT 303
24052: DOUBLE
24053: EQUAL
24054: IFTRUE 24058
24056: GO 24095
24058: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24059: LD_VAR 0 6
24063: PPUSH
24064: LD_VAR 0 7
24068: PPUSH
24069: LD_VAR 0 8
24073: PPUSH
24074: LD_VAR 0 9
24078: PPUSH
24079: LD_VAR 0 4
24083: PPUSH
24084: LD_VAR 0 5
24088: PPUSH
24089: CALL 24131 0 6
24093: GO 24126
24095: LD_INT 304
24097: DOUBLE
24098: EQUAL
24099: IFTRUE 24103
24101: GO 24125
24103: POP
// hHackTeleport ( unit , x , y ) ; end ;
24104: LD_VAR 0 2
24108: PPUSH
24109: LD_VAR 0 4
24113: PPUSH
24114: LD_VAR 0 5
24118: PPUSH
24119: CALL 25898 0 3
24123: GO 24126
24125: POP
// end ;
24126: LD_VAR 0 12
24130: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24131: LD_INT 0
24133: PPUSH
24134: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24135: LD_VAR 0 1
24139: PUSH
24140: LD_INT 1
24142: LESS
24143: PUSH
24144: LD_VAR 0 1
24148: PUSH
24149: LD_INT 3
24151: GREATER
24152: OR
24153: PUSH
24154: LD_VAR 0 5
24158: PPUSH
24159: LD_VAR 0 6
24163: PPUSH
24164: CALL_OW 428
24168: OR
24169: IFFALSE 24173
// exit ;
24171: GO 24901
// uc_side := your_side ;
24173: LD_ADDR_OWVAR 20
24177: PUSH
24178: LD_OWVAR 2
24182: ST_TO_ADDR
// uc_nation := nation ;
24183: LD_ADDR_OWVAR 21
24187: PUSH
24188: LD_VAR 0 1
24192: ST_TO_ADDR
// bc_level = 1 ;
24193: LD_ADDR_OWVAR 43
24197: PUSH
24198: LD_INT 1
24200: ST_TO_ADDR
// case btype of 1 :
24201: LD_VAR 0 2
24205: PUSH
24206: LD_INT 1
24208: DOUBLE
24209: EQUAL
24210: IFTRUE 24214
24212: GO 24225
24214: POP
// bc_type := b_depot ; 2 :
24215: LD_ADDR_OWVAR 42
24219: PUSH
24220: LD_INT 0
24222: ST_TO_ADDR
24223: GO 24845
24225: LD_INT 2
24227: DOUBLE
24228: EQUAL
24229: IFTRUE 24233
24231: GO 24244
24233: POP
// bc_type := b_warehouse ; 3 :
24234: LD_ADDR_OWVAR 42
24238: PUSH
24239: LD_INT 1
24241: ST_TO_ADDR
24242: GO 24845
24244: LD_INT 3
24246: DOUBLE
24247: EQUAL
24248: IFTRUE 24252
24250: GO 24263
24252: POP
// bc_type := b_lab ; 4 .. 9 :
24253: LD_ADDR_OWVAR 42
24257: PUSH
24258: LD_INT 6
24260: ST_TO_ADDR
24261: GO 24845
24263: LD_INT 4
24265: DOUBLE
24266: GREATEREQUAL
24267: IFFALSE 24275
24269: LD_INT 9
24271: DOUBLE
24272: LESSEQUAL
24273: IFTRUE 24277
24275: GO 24337
24277: POP
// begin bc_type := b_lab_half ;
24278: LD_ADDR_OWVAR 42
24282: PUSH
24283: LD_INT 7
24285: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24286: LD_ADDR_OWVAR 44
24290: PUSH
24291: LD_INT 10
24293: PUSH
24294: LD_INT 11
24296: PUSH
24297: LD_INT 12
24299: PUSH
24300: LD_INT 15
24302: PUSH
24303: LD_INT 14
24305: PUSH
24306: LD_INT 13
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: PUSH
24317: LD_VAR 0 2
24321: PUSH
24322: LD_INT 3
24324: MINUS
24325: ARRAY
24326: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24327: LD_ADDR_OWVAR 45
24331: PUSH
24332: LD_INT 9
24334: ST_TO_ADDR
// end ; 10 .. 13 :
24335: GO 24845
24337: LD_INT 10
24339: DOUBLE
24340: GREATEREQUAL
24341: IFFALSE 24349
24343: LD_INT 13
24345: DOUBLE
24346: LESSEQUAL
24347: IFTRUE 24351
24349: GO 24428
24351: POP
// begin bc_type := b_lab_full ;
24352: LD_ADDR_OWVAR 42
24356: PUSH
24357: LD_INT 8
24359: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24360: LD_ADDR_OWVAR 44
24364: PUSH
24365: LD_INT 10
24367: PUSH
24368: LD_INT 12
24370: PUSH
24371: LD_INT 14
24373: PUSH
24374: LD_INT 13
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: PUSH
24383: LD_VAR 0 2
24387: PUSH
24388: LD_INT 9
24390: MINUS
24391: ARRAY
24392: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24393: LD_ADDR_OWVAR 45
24397: PUSH
24398: LD_INT 11
24400: PUSH
24401: LD_INT 15
24403: PUSH
24404: LD_INT 12
24406: PUSH
24407: LD_INT 15
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: PUSH
24416: LD_VAR 0 2
24420: PUSH
24421: LD_INT 9
24423: MINUS
24424: ARRAY
24425: ST_TO_ADDR
// end ; 14 :
24426: GO 24845
24428: LD_INT 14
24430: DOUBLE
24431: EQUAL
24432: IFTRUE 24436
24434: GO 24447
24436: POP
// bc_type := b_workshop ; 15 :
24437: LD_ADDR_OWVAR 42
24441: PUSH
24442: LD_INT 2
24444: ST_TO_ADDR
24445: GO 24845
24447: LD_INT 15
24449: DOUBLE
24450: EQUAL
24451: IFTRUE 24455
24453: GO 24466
24455: POP
// bc_type := b_factory ; 16 :
24456: LD_ADDR_OWVAR 42
24460: PUSH
24461: LD_INT 3
24463: ST_TO_ADDR
24464: GO 24845
24466: LD_INT 16
24468: DOUBLE
24469: EQUAL
24470: IFTRUE 24474
24472: GO 24485
24474: POP
// bc_type := b_ext_gun ; 17 :
24475: LD_ADDR_OWVAR 42
24479: PUSH
24480: LD_INT 17
24482: ST_TO_ADDR
24483: GO 24845
24485: LD_INT 17
24487: DOUBLE
24488: EQUAL
24489: IFTRUE 24493
24491: GO 24521
24493: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24494: LD_ADDR_OWVAR 42
24498: PUSH
24499: LD_INT 19
24501: PUSH
24502: LD_INT 23
24504: PUSH
24505: LD_INT 19
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: LIST
24512: PUSH
24513: LD_VAR 0 1
24517: ARRAY
24518: ST_TO_ADDR
24519: GO 24845
24521: LD_INT 18
24523: DOUBLE
24524: EQUAL
24525: IFTRUE 24529
24527: GO 24540
24529: POP
// bc_type := b_ext_radar ; 19 :
24530: LD_ADDR_OWVAR 42
24534: PUSH
24535: LD_INT 20
24537: ST_TO_ADDR
24538: GO 24845
24540: LD_INT 19
24542: DOUBLE
24543: EQUAL
24544: IFTRUE 24548
24546: GO 24559
24548: POP
// bc_type := b_ext_radio ; 20 :
24549: LD_ADDR_OWVAR 42
24553: PUSH
24554: LD_INT 22
24556: ST_TO_ADDR
24557: GO 24845
24559: LD_INT 20
24561: DOUBLE
24562: EQUAL
24563: IFTRUE 24567
24565: GO 24578
24567: POP
// bc_type := b_ext_siberium ; 21 :
24568: LD_ADDR_OWVAR 42
24572: PUSH
24573: LD_INT 21
24575: ST_TO_ADDR
24576: GO 24845
24578: LD_INT 21
24580: DOUBLE
24581: EQUAL
24582: IFTRUE 24586
24584: GO 24597
24586: POP
// bc_type := b_ext_computer ; 22 :
24587: LD_ADDR_OWVAR 42
24591: PUSH
24592: LD_INT 24
24594: ST_TO_ADDR
24595: GO 24845
24597: LD_INT 22
24599: DOUBLE
24600: EQUAL
24601: IFTRUE 24605
24603: GO 24616
24605: POP
// bc_type := b_ext_track ; 23 :
24606: LD_ADDR_OWVAR 42
24610: PUSH
24611: LD_INT 16
24613: ST_TO_ADDR
24614: GO 24845
24616: LD_INT 23
24618: DOUBLE
24619: EQUAL
24620: IFTRUE 24624
24622: GO 24635
24624: POP
// bc_type := b_ext_laser ; 24 :
24625: LD_ADDR_OWVAR 42
24629: PUSH
24630: LD_INT 25
24632: ST_TO_ADDR
24633: GO 24845
24635: LD_INT 24
24637: DOUBLE
24638: EQUAL
24639: IFTRUE 24643
24641: GO 24654
24643: POP
// bc_type := b_control_tower ; 25 :
24644: LD_ADDR_OWVAR 42
24648: PUSH
24649: LD_INT 36
24651: ST_TO_ADDR
24652: GO 24845
24654: LD_INT 25
24656: DOUBLE
24657: EQUAL
24658: IFTRUE 24662
24660: GO 24673
24662: POP
// bc_type := b_breastwork ; 26 :
24663: LD_ADDR_OWVAR 42
24667: PUSH
24668: LD_INT 31
24670: ST_TO_ADDR
24671: GO 24845
24673: LD_INT 26
24675: DOUBLE
24676: EQUAL
24677: IFTRUE 24681
24679: GO 24692
24681: POP
// bc_type := b_bunker ; 27 :
24682: LD_ADDR_OWVAR 42
24686: PUSH
24687: LD_INT 32
24689: ST_TO_ADDR
24690: GO 24845
24692: LD_INT 27
24694: DOUBLE
24695: EQUAL
24696: IFTRUE 24700
24698: GO 24711
24700: POP
// bc_type := b_turret ; 28 :
24701: LD_ADDR_OWVAR 42
24705: PUSH
24706: LD_INT 33
24708: ST_TO_ADDR
24709: GO 24845
24711: LD_INT 28
24713: DOUBLE
24714: EQUAL
24715: IFTRUE 24719
24717: GO 24730
24719: POP
// bc_type := b_armoury ; 29 :
24720: LD_ADDR_OWVAR 42
24724: PUSH
24725: LD_INT 4
24727: ST_TO_ADDR
24728: GO 24845
24730: LD_INT 29
24732: DOUBLE
24733: EQUAL
24734: IFTRUE 24738
24736: GO 24749
24738: POP
// bc_type := b_barracks ; 30 :
24739: LD_ADDR_OWVAR 42
24743: PUSH
24744: LD_INT 5
24746: ST_TO_ADDR
24747: GO 24845
24749: LD_INT 30
24751: DOUBLE
24752: EQUAL
24753: IFTRUE 24757
24755: GO 24768
24757: POP
// bc_type := b_solar_power ; 31 :
24758: LD_ADDR_OWVAR 42
24762: PUSH
24763: LD_INT 27
24765: ST_TO_ADDR
24766: GO 24845
24768: LD_INT 31
24770: DOUBLE
24771: EQUAL
24772: IFTRUE 24776
24774: GO 24787
24776: POP
// bc_type := b_oil_power ; 32 :
24777: LD_ADDR_OWVAR 42
24781: PUSH
24782: LD_INT 26
24784: ST_TO_ADDR
24785: GO 24845
24787: LD_INT 32
24789: DOUBLE
24790: EQUAL
24791: IFTRUE 24795
24793: GO 24806
24795: POP
// bc_type := b_siberite_power ; 33 :
24796: LD_ADDR_OWVAR 42
24800: PUSH
24801: LD_INT 28
24803: ST_TO_ADDR
24804: GO 24845
24806: LD_INT 33
24808: DOUBLE
24809: EQUAL
24810: IFTRUE 24814
24812: GO 24825
24814: POP
// bc_type := b_oil_mine ; 34 :
24815: LD_ADDR_OWVAR 42
24819: PUSH
24820: LD_INT 29
24822: ST_TO_ADDR
24823: GO 24845
24825: LD_INT 34
24827: DOUBLE
24828: EQUAL
24829: IFTRUE 24833
24831: GO 24844
24833: POP
// bc_type := b_siberite_mine ; end ;
24834: LD_ADDR_OWVAR 42
24838: PUSH
24839: LD_INT 30
24841: ST_TO_ADDR
24842: GO 24845
24844: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24845: LD_ADDR_VAR 0 8
24849: PUSH
24850: LD_VAR 0 5
24854: PPUSH
24855: LD_VAR 0 6
24859: PPUSH
24860: LD_VAR 0 3
24864: PPUSH
24865: CALL_OW 47
24869: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24870: LD_OWVAR 42
24874: PUSH
24875: LD_INT 32
24877: PUSH
24878: LD_INT 33
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: IN
24885: IFFALSE 24901
// PlaceWeaponTurret ( b , weapon ) ;
24887: LD_VAR 0 8
24891: PPUSH
24892: LD_VAR 0 4
24896: PPUSH
24897: CALL_OW 431
// end ;
24901: LD_VAR 0 7
24905: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24906: LD_INT 0
24908: PPUSH
24909: PPUSH
24910: PPUSH
24911: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24912: LD_ADDR_VAR 0 4
24916: PUSH
24917: LD_INT 22
24919: PUSH
24920: LD_OWVAR 2
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: PUSH
24932: LD_INT 30
24934: PUSH
24935: LD_INT 0
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 30
24944: PUSH
24945: LD_INT 1
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: LIST
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PPUSH
24961: CALL_OW 69
24965: ST_TO_ADDR
// if not tmp then
24966: LD_VAR 0 4
24970: NOT
24971: IFFALSE 24975
// exit ;
24973: GO 25034
// for i in tmp do
24975: LD_ADDR_VAR 0 2
24979: PUSH
24980: LD_VAR 0 4
24984: PUSH
24985: FOR_IN
24986: IFFALSE 25032
// for j = 1 to 3 do
24988: LD_ADDR_VAR 0 3
24992: PUSH
24993: DOUBLE
24994: LD_INT 1
24996: DEC
24997: ST_TO_ADDR
24998: LD_INT 3
25000: PUSH
25001: FOR_TO
25002: IFFALSE 25028
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25004: LD_VAR 0 2
25008: PPUSH
25009: CALL_OW 274
25013: PPUSH
25014: LD_VAR 0 3
25018: PPUSH
25019: LD_INT 99999
25021: PPUSH
25022: CALL_OW 277
25026: GO 25001
25028: POP
25029: POP
25030: GO 24985
25032: POP
25033: POP
// end ;
25034: LD_VAR 0 1
25038: RET
// export function hHackSetLevel10 ; var i , j ; begin
25039: LD_INT 0
25041: PPUSH
25042: PPUSH
25043: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25044: LD_ADDR_VAR 0 2
25048: PUSH
25049: LD_INT 21
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PPUSH
25059: CALL_OW 69
25063: PUSH
25064: FOR_IN
25065: IFFALSE 25117
// if IsSelected ( i ) then
25067: LD_VAR 0 2
25071: PPUSH
25072: CALL_OW 306
25076: IFFALSE 25115
// begin for j := 1 to 4 do
25078: LD_ADDR_VAR 0 3
25082: PUSH
25083: DOUBLE
25084: LD_INT 1
25086: DEC
25087: ST_TO_ADDR
25088: LD_INT 4
25090: PUSH
25091: FOR_TO
25092: IFFALSE 25113
// SetSkill ( i , j , 10 ) ;
25094: LD_VAR 0 2
25098: PPUSH
25099: LD_VAR 0 3
25103: PPUSH
25104: LD_INT 10
25106: PPUSH
25107: CALL_OW 237
25111: GO 25091
25113: POP
25114: POP
// end ;
25115: GO 25064
25117: POP
25118: POP
// end ;
25119: LD_VAR 0 1
25123: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25124: LD_INT 0
25126: PPUSH
25127: PPUSH
25128: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25129: LD_ADDR_VAR 0 2
25133: PUSH
25134: LD_INT 22
25136: PUSH
25137: LD_OWVAR 2
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 21
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PPUSH
25160: CALL_OW 69
25164: PUSH
25165: FOR_IN
25166: IFFALSE 25207
// begin for j := 1 to 4 do
25168: LD_ADDR_VAR 0 3
25172: PUSH
25173: DOUBLE
25174: LD_INT 1
25176: DEC
25177: ST_TO_ADDR
25178: LD_INT 4
25180: PUSH
25181: FOR_TO
25182: IFFALSE 25203
// SetSkill ( i , j , 10 ) ;
25184: LD_VAR 0 2
25188: PPUSH
25189: LD_VAR 0 3
25193: PPUSH
25194: LD_INT 10
25196: PPUSH
25197: CALL_OW 237
25201: GO 25181
25203: POP
25204: POP
// end ;
25205: GO 25165
25207: POP
25208: POP
// end ;
25209: LD_VAR 0 1
25213: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25214: LD_INT 0
25216: PPUSH
// uc_side := your_side ;
25217: LD_ADDR_OWVAR 20
25221: PUSH
25222: LD_OWVAR 2
25226: ST_TO_ADDR
// uc_nation := nation ;
25227: LD_ADDR_OWVAR 21
25231: PUSH
25232: LD_VAR 0 1
25236: ST_TO_ADDR
// InitHc ;
25237: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25241: LD_INT 0
25243: PPUSH
25244: LD_VAR 0 2
25248: PPUSH
25249: LD_VAR 0 3
25253: PPUSH
25254: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25258: LD_VAR 0 4
25262: PPUSH
25263: LD_VAR 0 5
25267: PPUSH
25268: CALL_OW 428
25272: PUSH
25273: LD_INT 0
25275: EQUAL
25276: IFFALSE 25300
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25278: CALL_OW 44
25282: PPUSH
25283: LD_VAR 0 4
25287: PPUSH
25288: LD_VAR 0 5
25292: PPUSH
25293: LD_INT 1
25295: PPUSH
25296: CALL_OW 48
// end ;
25300: LD_VAR 0 6
25304: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25305: LD_INT 0
25307: PPUSH
25308: PPUSH
// uc_side := your_side ;
25309: LD_ADDR_OWVAR 20
25313: PUSH
25314: LD_OWVAR 2
25318: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25319: LD_VAR 0 1
25323: PUSH
25324: LD_INT 1
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: LD_INT 3
25332: PUSH
25333: LD_INT 4
25335: PUSH
25336: LD_INT 5
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: IN
25346: IFFALSE 25358
// uc_nation := nation_american else
25348: LD_ADDR_OWVAR 21
25352: PUSH
25353: LD_INT 1
25355: ST_TO_ADDR
25356: GO 25401
// if chassis in [ 11 , 12 , 13 , 14 ] then
25358: LD_VAR 0 1
25362: PUSH
25363: LD_INT 11
25365: PUSH
25366: LD_INT 12
25368: PUSH
25369: LD_INT 13
25371: PUSH
25372: LD_INT 14
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: IN
25381: IFFALSE 25393
// uc_nation := nation_arabian else
25383: LD_ADDR_OWVAR 21
25387: PUSH
25388: LD_INT 2
25390: ST_TO_ADDR
25391: GO 25401
// uc_nation := nation_russian ;
25393: LD_ADDR_OWVAR 21
25397: PUSH
25398: LD_INT 3
25400: ST_TO_ADDR
// vc_chassis := chassis ;
25401: LD_ADDR_OWVAR 37
25405: PUSH
25406: LD_VAR 0 1
25410: ST_TO_ADDR
// vc_engine := engine ;
25411: LD_ADDR_OWVAR 39
25415: PUSH
25416: LD_VAR 0 2
25420: ST_TO_ADDR
// vc_control := control ;
25421: LD_ADDR_OWVAR 38
25425: PUSH
25426: LD_VAR 0 3
25430: ST_TO_ADDR
// vc_weapon := weapon ;
25431: LD_ADDR_OWVAR 40
25435: PUSH
25436: LD_VAR 0 4
25440: ST_TO_ADDR
// un := CreateVehicle ;
25441: LD_ADDR_VAR 0 8
25445: PUSH
25446: CALL_OW 45
25450: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25451: LD_VAR 0 8
25455: PPUSH
25456: LD_INT 0
25458: PPUSH
25459: LD_INT 5
25461: PPUSH
25462: CALL_OW 12
25466: PPUSH
25467: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25471: LD_VAR 0 8
25475: PPUSH
25476: LD_VAR 0 5
25480: PPUSH
25481: LD_VAR 0 6
25485: PPUSH
25486: LD_INT 1
25488: PPUSH
25489: CALL_OW 48
// end ;
25493: LD_VAR 0 7
25497: RET
// export hInvincible ; every 1 do
25498: GO 25500
25500: DISABLE
// hInvincible := [ ] ;
25501: LD_ADDR_EXP 79
25505: PUSH
25506: EMPTY
25507: ST_TO_ADDR
25508: END
// every 10 do var i ;
25509: GO 25511
25511: DISABLE
25512: LD_INT 0
25514: PPUSH
// begin enable ;
25515: ENABLE
// if not hInvincible then
25516: LD_EXP 79
25520: NOT
25521: IFFALSE 25525
// exit ;
25523: GO 25569
// for i in hInvincible do
25525: LD_ADDR_VAR 0 1
25529: PUSH
25530: LD_EXP 79
25534: PUSH
25535: FOR_IN
25536: IFFALSE 25567
// if GetLives ( i ) < 1000 then
25538: LD_VAR 0 1
25542: PPUSH
25543: CALL_OW 256
25547: PUSH
25548: LD_INT 1000
25550: LESS
25551: IFFALSE 25565
// SetLives ( i , 1000 ) ;
25553: LD_VAR 0 1
25557: PPUSH
25558: LD_INT 1000
25560: PPUSH
25561: CALL_OW 234
25565: GO 25535
25567: POP
25568: POP
// end ;
25569: PPOPN 1
25571: END
// export function hHackInvincible ; var i ; begin
25572: LD_INT 0
25574: PPUSH
25575: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25576: LD_ADDR_VAR 0 2
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: LD_INT 21
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 21
25596: PUSH
25597: LD_INT 2
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: LIST
25608: PPUSH
25609: CALL_OW 69
25613: PUSH
25614: FOR_IN
25615: IFFALSE 25676
// if IsSelected ( i ) then
25617: LD_VAR 0 2
25621: PPUSH
25622: CALL_OW 306
25626: IFFALSE 25674
// begin if i in hInvincible then
25628: LD_VAR 0 2
25632: PUSH
25633: LD_EXP 79
25637: IN
25638: IFFALSE 25658
// hInvincible := hInvincible diff i else
25640: LD_ADDR_EXP 79
25644: PUSH
25645: LD_EXP 79
25649: PUSH
25650: LD_VAR 0 2
25654: DIFF
25655: ST_TO_ADDR
25656: GO 25674
// hInvincible := hInvincible union i ;
25658: LD_ADDR_EXP 79
25662: PUSH
25663: LD_EXP 79
25667: PUSH
25668: LD_VAR 0 2
25672: UNION
25673: ST_TO_ADDR
// end ;
25674: GO 25614
25676: POP
25677: POP
// end ;
25678: LD_VAR 0 1
25682: RET
// export function hHackInvisible ; var i , j ; begin
25683: LD_INT 0
25685: PPUSH
25686: PPUSH
25687: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25688: LD_ADDR_VAR 0 2
25692: PUSH
25693: LD_INT 21
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PPUSH
25703: CALL_OW 69
25707: PUSH
25708: FOR_IN
25709: IFFALSE 25733
// if IsSelected ( i ) then
25711: LD_VAR 0 2
25715: PPUSH
25716: CALL_OW 306
25720: IFFALSE 25731
// ComForceInvisible ( i ) ;
25722: LD_VAR 0 2
25726: PPUSH
25727: CALL_OW 496
25731: GO 25708
25733: POP
25734: POP
// end ;
25735: LD_VAR 0 1
25739: RET
// export function hHackChangeYourSide ; begin
25740: LD_INT 0
25742: PPUSH
// if your_side = 8 then
25743: LD_OWVAR 2
25747: PUSH
25748: LD_INT 8
25750: EQUAL
25751: IFFALSE 25763
// your_side := 0 else
25753: LD_ADDR_OWVAR 2
25757: PUSH
25758: LD_INT 0
25760: ST_TO_ADDR
25761: GO 25777
// your_side := your_side + 1 ;
25763: LD_ADDR_OWVAR 2
25767: PUSH
25768: LD_OWVAR 2
25772: PUSH
25773: LD_INT 1
25775: PLUS
25776: ST_TO_ADDR
// end ;
25777: LD_VAR 0 1
25781: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25782: LD_INT 0
25784: PPUSH
25785: PPUSH
25786: PPUSH
// for i in all_units do
25787: LD_ADDR_VAR 0 2
25791: PUSH
25792: LD_OWVAR 3
25796: PUSH
25797: FOR_IN
25798: IFFALSE 25876
// if IsSelected ( i ) then
25800: LD_VAR 0 2
25804: PPUSH
25805: CALL_OW 306
25809: IFFALSE 25874
// begin j := GetSide ( i ) ;
25811: LD_ADDR_VAR 0 3
25815: PUSH
25816: LD_VAR 0 2
25820: PPUSH
25821: CALL_OW 255
25825: ST_TO_ADDR
// if j = 8 then
25826: LD_VAR 0 3
25830: PUSH
25831: LD_INT 8
25833: EQUAL
25834: IFFALSE 25846
// j := 0 else
25836: LD_ADDR_VAR 0 3
25840: PUSH
25841: LD_INT 0
25843: ST_TO_ADDR
25844: GO 25860
// j := j + 1 ;
25846: LD_ADDR_VAR 0 3
25850: PUSH
25851: LD_VAR 0 3
25855: PUSH
25856: LD_INT 1
25858: PLUS
25859: ST_TO_ADDR
// SetSide ( i , j ) ;
25860: LD_VAR 0 2
25864: PPUSH
25865: LD_VAR 0 3
25869: PPUSH
25870: CALL_OW 235
// end ;
25874: GO 25797
25876: POP
25877: POP
// end ;
25878: LD_VAR 0 1
25882: RET
// export function hHackFog ; begin
25883: LD_INT 0
25885: PPUSH
// FogOff ( true ) ;
25886: LD_INT 1
25888: PPUSH
25889: CALL_OW 344
// end ;
25893: LD_VAR 0 1
25897: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25898: LD_INT 0
25900: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25901: LD_VAR 0 1
25905: PPUSH
25906: LD_VAR 0 2
25910: PPUSH
25911: LD_VAR 0 3
25915: PPUSH
25916: LD_INT 1
25918: PPUSH
25919: LD_INT 1
25921: PPUSH
25922: CALL_OW 483
// CenterOnXY ( x , y ) ;
25926: LD_VAR 0 2
25930: PPUSH
25931: LD_VAR 0 3
25935: PPUSH
25936: CALL_OW 84
// end ;
25940: LD_VAR 0 4
25944: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25945: LD_INT 0
25947: PPUSH
25948: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25949: LD_VAR 0 1
25953: NOT
25954: PUSH
25955: LD_VAR 0 2
25959: PPUSH
25960: LD_VAR 0 3
25964: PPUSH
25965: CALL_OW 488
25969: NOT
25970: OR
25971: PUSH
25972: LD_VAR 0 1
25976: PPUSH
25977: CALL_OW 266
25981: PUSH
25982: LD_INT 3
25984: NONEQUAL
25985: PUSH
25986: LD_VAR 0 1
25990: PPUSH
25991: CALL_OW 247
25995: PUSH
25996: LD_INT 1
25998: EQUAL
25999: NOT
26000: AND
26001: OR
26002: IFFALSE 26006
// exit ;
26004: GO 26288
// if GetType ( factory ) = unit_human then
26006: LD_VAR 0 1
26010: PPUSH
26011: CALL_OW 247
26015: PUSH
26016: LD_INT 1
26018: EQUAL
26019: IFFALSE 26036
// factory := IsInUnit ( factory ) ;
26021: LD_ADDR_VAR 0 1
26025: PUSH
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL_OW 310
26035: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26036: LD_VAR 0 1
26040: PPUSH
26041: CALL_OW 266
26045: PUSH
26046: LD_INT 3
26048: NONEQUAL
26049: IFFALSE 26053
// exit ;
26051: GO 26288
// for i := 1 to Count ( factoryWaypoints ) do
26053: LD_ADDR_VAR 0 5
26057: PUSH
26058: DOUBLE
26059: LD_INT 1
26061: DEC
26062: ST_TO_ADDR
26063: LD_EXP 80
26067: PPUSH
26068: CALL 34854 0 1
26072: PUSH
26073: FOR_TO
26074: IFFALSE 26236
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26076: LD_VAR 0 2
26080: PPUSH
26081: LD_VAR 0 3
26085: PPUSH
26086: CALL_OW 428
26090: PUSH
26091: LD_EXP 80
26095: PUSH
26096: LD_VAR 0 5
26100: ARRAY
26101: PUSH
26102: LD_INT 2
26104: ARRAY
26105: EQUAL
26106: IFFALSE 26138
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26108: LD_ADDR_EXP 80
26112: PUSH
26113: LD_EXP 80
26117: PPUSH
26118: LD_VAR 0 5
26122: PPUSH
26123: CALL_OW 3
26127: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26128: CALL 26293 0 0
// exit ;
26132: POP
26133: POP
26134: GO 26288
// end else
26136: GO 26234
// if factory = factoryWaypoints [ i ] [ 2 ] then
26138: LD_VAR 0 1
26142: PUSH
26143: LD_EXP 80
26147: PUSH
26148: LD_VAR 0 5
26152: ARRAY
26153: PUSH
26154: LD_INT 2
26156: ARRAY
26157: EQUAL
26158: IFFALSE 26234
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26160: LD_ADDR_EXP 80
26164: PUSH
26165: LD_EXP 80
26169: PPUSH
26170: LD_VAR 0 5
26174: PPUSH
26175: CALL_OW 3
26179: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26180: LD_ADDR_EXP 80
26184: PUSH
26185: LD_EXP 80
26189: PPUSH
26190: LD_VAR 0 1
26194: PPUSH
26195: CALL_OW 255
26199: PUSH
26200: LD_VAR 0 1
26204: PUSH
26205: LD_VAR 0 2
26209: PUSH
26210: LD_VAR 0 3
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: PPUSH
26221: CALL 70463 0 2
26225: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26226: CALL 26293 0 0
// exit ;
26230: POP
26231: POP
26232: GO 26288
// end ; end ;
26234: GO 26073
26236: POP
26237: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26238: LD_ADDR_EXP 80
26242: PUSH
26243: LD_EXP 80
26247: PPUSH
26248: LD_VAR 0 1
26252: PPUSH
26253: CALL_OW 255
26257: PUSH
26258: LD_VAR 0 1
26262: PUSH
26263: LD_VAR 0 2
26267: PUSH
26268: LD_VAR 0 3
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: PPUSH
26279: CALL 70463 0 2
26283: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26284: CALL 26293 0 0
// end ;
26288: LD_VAR 0 4
26292: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26293: LD_INT 0
26295: PPUSH
26296: PPUSH
26297: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26298: LD_STRING resetFactoryWaypoint();
26300: PPUSH
26301: CALL_OW 559
// if factoryWaypoints then
26305: LD_EXP 80
26309: IFFALSE 26430
// begin list := factoryWaypoints ;
26311: LD_ADDR_VAR 0 3
26315: PUSH
26316: LD_EXP 80
26320: ST_TO_ADDR
// for i := 1 to list do
26321: LD_ADDR_VAR 0 2
26325: PUSH
26326: DOUBLE
26327: LD_INT 1
26329: DEC
26330: ST_TO_ADDR
26331: LD_VAR 0 3
26335: PUSH
26336: FOR_TO
26337: IFFALSE 26428
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26339: LD_STRING setFactoryWaypointXY(
26341: PUSH
26342: LD_VAR 0 3
26346: PUSH
26347: LD_VAR 0 2
26351: ARRAY
26352: PUSH
26353: LD_INT 1
26355: ARRAY
26356: STR
26357: PUSH
26358: LD_STRING ,
26360: STR
26361: PUSH
26362: LD_VAR 0 3
26366: PUSH
26367: LD_VAR 0 2
26371: ARRAY
26372: PUSH
26373: LD_INT 2
26375: ARRAY
26376: STR
26377: PUSH
26378: LD_STRING ,
26380: STR
26381: PUSH
26382: LD_VAR 0 3
26386: PUSH
26387: LD_VAR 0 2
26391: ARRAY
26392: PUSH
26393: LD_INT 3
26395: ARRAY
26396: STR
26397: PUSH
26398: LD_STRING ,
26400: STR
26401: PUSH
26402: LD_VAR 0 3
26406: PUSH
26407: LD_VAR 0 2
26411: ARRAY
26412: PUSH
26413: LD_INT 4
26415: ARRAY
26416: STR
26417: PUSH
26418: LD_STRING )
26420: STR
26421: PPUSH
26422: CALL_OW 559
26426: GO 26336
26428: POP
26429: POP
// end ; end ;
26430: LD_VAR 0 1
26434: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26435: LD_INT 0
26437: PPUSH
// if HexInfo ( x , y ) = warehouse then
26438: LD_VAR 0 2
26442: PPUSH
26443: LD_VAR 0 3
26447: PPUSH
26448: CALL_OW 428
26452: PUSH
26453: LD_VAR 0 1
26457: EQUAL
26458: IFFALSE 26485
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26460: LD_ADDR_EXP 81
26464: PUSH
26465: LD_EXP 81
26469: PPUSH
26470: LD_VAR 0 1
26474: PPUSH
26475: LD_INT 0
26477: PPUSH
26478: CALL_OW 1
26482: ST_TO_ADDR
26483: GO 26536
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26485: LD_ADDR_EXP 81
26489: PUSH
26490: LD_EXP 81
26494: PPUSH
26495: LD_VAR 0 1
26499: PPUSH
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 255
26509: PUSH
26510: LD_VAR 0 1
26514: PUSH
26515: LD_VAR 0 2
26519: PUSH
26520: LD_VAR 0 3
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: PPUSH
26531: CALL_OW 1
26535: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26536: CALL 26545 0 0
// end ;
26540: LD_VAR 0 4
26544: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26545: LD_INT 0
26547: PPUSH
26548: PPUSH
26549: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26550: LD_STRING resetWarehouseGatheringPoints();
26552: PPUSH
26553: CALL_OW 559
// if warehouseGatheringPoints then
26557: LD_EXP 81
26561: IFFALSE 26687
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26563: LD_ADDR_VAR 0 3
26567: PUSH
26568: LD_EXP 81
26572: PPUSH
26573: CALL 74231 0 1
26577: ST_TO_ADDR
// for i := 1 to list do
26578: LD_ADDR_VAR 0 2
26582: PUSH
26583: DOUBLE
26584: LD_INT 1
26586: DEC
26587: ST_TO_ADDR
26588: LD_VAR 0 3
26592: PUSH
26593: FOR_TO
26594: IFFALSE 26685
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26596: LD_STRING setWarehouseGatheringPointXY(
26598: PUSH
26599: LD_VAR 0 3
26603: PUSH
26604: LD_VAR 0 2
26608: ARRAY
26609: PUSH
26610: LD_INT 1
26612: ARRAY
26613: STR
26614: PUSH
26615: LD_STRING ,
26617: STR
26618: PUSH
26619: LD_VAR 0 3
26623: PUSH
26624: LD_VAR 0 2
26628: ARRAY
26629: PUSH
26630: LD_INT 2
26632: ARRAY
26633: STR
26634: PUSH
26635: LD_STRING ,
26637: STR
26638: PUSH
26639: LD_VAR 0 3
26643: PUSH
26644: LD_VAR 0 2
26648: ARRAY
26649: PUSH
26650: LD_INT 3
26652: ARRAY
26653: STR
26654: PUSH
26655: LD_STRING ,
26657: STR
26658: PUSH
26659: LD_VAR 0 3
26663: PUSH
26664: LD_VAR 0 2
26668: ARRAY
26669: PUSH
26670: LD_INT 4
26672: ARRAY
26673: STR
26674: PUSH
26675: LD_STRING )
26677: STR
26678: PPUSH
26679: CALL_OW 559
26683: GO 26593
26685: POP
26686: POP
// end ; end ;
26687: LD_VAR 0 1
26691: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26692: LD_EXP 81
26696: IFFALSE 27381
26698: GO 26700
26700: DISABLE
26701: LD_INT 0
26703: PPUSH
26704: PPUSH
26705: PPUSH
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
// begin enable ;
26712: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26713: LD_ADDR_VAR 0 3
26717: PUSH
26718: LD_EXP 81
26722: PPUSH
26723: CALL 74231 0 1
26727: ST_TO_ADDR
// if not list then
26728: LD_VAR 0 3
26732: NOT
26733: IFFALSE 26737
// exit ;
26735: GO 27381
// for i := 1 to list do
26737: LD_ADDR_VAR 0 1
26741: PUSH
26742: DOUBLE
26743: LD_INT 1
26745: DEC
26746: ST_TO_ADDR
26747: LD_VAR 0 3
26751: PUSH
26752: FOR_TO
26753: IFFALSE 27379
// begin depot := list [ i ] [ 2 ] ;
26755: LD_ADDR_VAR 0 8
26759: PUSH
26760: LD_VAR 0 3
26764: PUSH
26765: LD_VAR 0 1
26769: ARRAY
26770: PUSH
26771: LD_INT 2
26773: ARRAY
26774: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26775: LD_ADDR_VAR 0 5
26779: PUSH
26780: LD_VAR 0 3
26784: PUSH
26785: LD_VAR 0 1
26789: ARRAY
26790: PUSH
26791: LD_INT 1
26793: ARRAY
26794: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26795: LD_VAR 0 8
26799: PPUSH
26800: CALL_OW 301
26804: PUSH
26805: LD_VAR 0 5
26809: PUSH
26810: LD_VAR 0 8
26814: PPUSH
26815: CALL_OW 255
26819: NONEQUAL
26820: OR
26821: IFFALSE 26850
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26823: LD_ADDR_EXP 81
26827: PUSH
26828: LD_EXP 81
26832: PPUSH
26833: LD_VAR 0 8
26837: PPUSH
26838: LD_INT 0
26840: PPUSH
26841: CALL_OW 1
26845: ST_TO_ADDR
// exit ;
26846: POP
26847: POP
26848: GO 27381
// end ; x := list [ i ] [ 3 ] ;
26850: LD_ADDR_VAR 0 6
26854: PUSH
26855: LD_VAR 0 3
26859: PUSH
26860: LD_VAR 0 1
26864: ARRAY
26865: PUSH
26866: LD_INT 3
26868: ARRAY
26869: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26870: LD_ADDR_VAR 0 7
26874: PUSH
26875: LD_VAR 0 3
26879: PUSH
26880: LD_VAR 0 1
26884: ARRAY
26885: PUSH
26886: LD_INT 4
26888: ARRAY
26889: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26890: LD_ADDR_VAR 0 9
26894: PUSH
26895: LD_VAR 0 6
26899: PPUSH
26900: LD_VAR 0 7
26904: PPUSH
26905: LD_INT 16
26907: PPUSH
26908: CALL 72815 0 3
26912: ST_TO_ADDR
// if not cratesNearbyPoint then
26913: LD_VAR 0 9
26917: NOT
26918: IFFALSE 26924
// exit ;
26920: POP
26921: POP
26922: GO 27381
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26924: LD_ADDR_VAR 0 4
26928: PUSH
26929: LD_INT 22
26931: PUSH
26932: LD_VAR 0 5
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 3
26943: PUSH
26944: LD_INT 60
26946: PUSH
26947: EMPTY
26948: LIST
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 91
26956: PUSH
26957: LD_VAR 0 8
26961: PUSH
26962: LD_INT 6
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 2
26972: PUSH
26973: LD_INT 25
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 25
26985: PUSH
26986: LD_INT 16
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: LIST
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: PPUSH
27004: CALL_OW 69
27008: PUSH
27009: LD_VAR 0 8
27013: PPUSH
27014: CALL_OW 313
27018: PPUSH
27019: LD_INT 3
27021: PUSH
27022: LD_INT 60
27024: PUSH
27025: EMPTY
27026: LIST
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 2
27034: PUSH
27035: LD_INT 25
27037: PUSH
27038: LD_INT 2
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 25
27047: PUSH
27048: LD_INT 16
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: LIST
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PPUSH
27064: CALL_OW 72
27068: UNION
27069: ST_TO_ADDR
// if tmp then
27070: LD_VAR 0 4
27074: IFFALSE 27154
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27076: LD_ADDR_VAR 0 4
27080: PUSH
27081: LD_VAR 0 4
27085: PPUSH
27086: LD_INT 3
27088: PPUSH
27089: CALL 70778 0 2
27093: ST_TO_ADDR
// for j in tmp do
27094: LD_ADDR_VAR 0 2
27098: PUSH
27099: LD_VAR 0 4
27103: PUSH
27104: FOR_IN
27105: IFFALSE 27148
// begin if IsInUnit ( j ) then
27107: LD_VAR 0 2
27111: PPUSH
27112: CALL_OW 310
27116: IFFALSE 27127
// ComExit ( j ) ;
27118: LD_VAR 0 2
27122: PPUSH
27123: CALL 70861 0 1
// AddComCollect ( j , x , y ) ;
27127: LD_VAR 0 2
27131: PPUSH
27132: LD_VAR 0 6
27136: PPUSH
27137: LD_VAR 0 7
27141: PPUSH
27142: CALL_OW 177
// end ;
27146: GO 27104
27148: POP
27149: POP
// exit ;
27150: POP
27151: POP
27152: GO 27381
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27154: LD_ADDR_VAR 0 4
27158: PUSH
27159: LD_INT 22
27161: PUSH
27162: LD_VAR 0 5
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 91
27173: PUSH
27174: LD_VAR 0 8
27178: PUSH
27179: LD_INT 8
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 2
27189: PUSH
27190: LD_INT 34
27192: PUSH
27193: LD_INT 12
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 34
27202: PUSH
27203: LD_INT 51
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 34
27212: PUSH
27213: LD_INT 32
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 34
27222: PUSH
27223: LD_INT 89
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: LIST
27241: PPUSH
27242: CALL_OW 69
27246: ST_TO_ADDR
// if tmp then
27247: LD_VAR 0 4
27251: IFFALSE 27377
// begin for j in tmp do
27253: LD_ADDR_VAR 0 2
27257: PUSH
27258: LD_VAR 0 4
27262: PUSH
27263: FOR_IN
27264: IFFALSE 27375
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27266: LD_VAR 0 2
27270: PPUSH
27271: CALL_OW 262
27275: PUSH
27276: LD_INT 3
27278: EQUAL
27279: PUSH
27280: LD_VAR 0 2
27284: PPUSH
27285: CALL_OW 261
27289: PUSH
27290: LD_INT 20
27292: GREATER
27293: OR
27294: PUSH
27295: LD_VAR 0 2
27299: PPUSH
27300: CALL_OW 314
27304: NOT
27305: AND
27306: PUSH
27307: LD_VAR 0 2
27311: PPUSH
27312: CALL_OW 263
27316: PUSH
27317: LD_INT 1
27319: NONEQUAL
27320: PUSH
27321: LD_VAR 0 2
27325: PPUSH
27326: CALL_OW 311
27330: OR
27331: AND
27332: IFFALSE 27373
// begin ComCollect ( j , x , y ) ;
27334: LD_VAR 0 2
27338: PPUSH
27339: LD_VAR 0 6
27343: PPUSH
27344: LD_VAR 0 7
27348: PPUSH
27349: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27353: LD_VAR 0 2
27357: PPUSH
27358: LD_VAR 0 8
27362: PPUSH
27363: CALL_OW 172
// exit ;
27367: POP
27368: POP
27369: POP
27370: POP
27371: GO 27381
// end ;
27373: GO 27263
27375: POP
27376: POP
// end ; end ;
27377: GO 26752
27379: POP
27380: POP
// end ; end_of_file
27381: PPOPN 9
27383: END
// export function SOS_UnitDestroyed ( un ) ; begin
27384: LD_INT 0
27386: PPUSH
// ComRadiation ( un ) ;
27387: LD_VAR 0 1
27391: PPUSH
27392: CALL 28373 0 1
// end ;
27396: LD_VAR 0 2
27400: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27401: LD_INT 0
27403: PPUSH
// ComRadiation ( un ) ;
27404: LD_VAR 0 1
27408: PPUSH
27409: CALL 28373 0 1
// end ;
27413: LD_VAR 0 2
27417: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27418: LD_INT 0
27420: PPUSH
// end ;
27421: LD_VAR 0 4
27425: RET
// export function SOS_Command ( cmd ) ; begin
27426: LD_INT 0
27428: PPUSH
// end ;
27429: LD_VAR 0 2
27433: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27434: LD_INT 0
27436: PPUSH
// end ;
27437: LD_VAR 0 6
27441: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
27442: LD_INT 0
27444: PPUSH
27445: PPUSH
27446: PPUSH
27447: PPUSH
27448: PPUSH
// if not vehicle or not factory then
27449: LD_VAR 0 1
27453: NOT
27454: PUSH
27455: LD_VAR 0 2
27459: NOT
27460: OR
27461: IFFALSE 27465
// exit ;
27463: GO 27964
// if not factoryWaypoints then
27465: LD_EXP 80
27469: NOT
27470: IFFALSE 27474
// exit ;
27472: GO 27964
// for i := 1 to Count ( factoryWaypoints ) do
27474: LD_ADDR_VAR 0 4
27478: PUSH
27479: DOUBLE
27480: LD_INT 1
27482: DEC
27483: ST_TO_ADDR
27484: LD_EXP 80
27488: PPUSH
27489: CALL 34854 0 1
27493: PUSH
27494: FOR_TO
27495: IFFALSE 27962
// if factoryWaypoints [ i ] [ 2 ] = factory then
27497: LD_EXP 80
27501: PUSH
27502: LD_VAR 0 4
27506: ARRAY
27507: PUSH
27508: LD_INT 2
27510: ARRAY
27511: PUSH
27512: LD_VAR 0 2
27516: EQUAL
27517: IFFALSE 27960
// begin if GetControl ( vehicle ) = control_manual then
27519: LD_VAR 0 1
27523: PPUSH
27524: CALL_OW 263
27528: PUSH
27529: LD_INT 1
27531: EQUAL
27532: IFFALSE 27843
// begin driver := IsDrivenBy ( vehicle ) ;
27534: LD_ADDR_VAR 0 6
27538: PUSH
27539: LD_VAR 0 1
27543: PPUSH
27544: CALL_OW 311
27548: ST_TO_ADDR
// tag := GetTag ( driver ) ;
27549: LD_ADDR_VAR 0 5
27553: PUSH
27554: LD_VAR 0 6
27558: PPUSH
27559: CALL_OW 110
27563: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
27564: LD_VAR 0 5
27568: PUSH
27569: LD_INT 501
27571: EQUAL
27572: PUSH
27573: LD_VAR 0 1
27577: PPUSH
27578: CALL_OW 110
27582: PUSH
27583: LD_INT 501
27585: EQUAL
27586: OR
27587: IFFALSE 27593
// exit ;
27589: POP
27590: POP
27591: GO 27964
// if not HasTask ( driver ) then
27593: LD_VAR 0 6
27597: PPUSH
27598: CALL_OW 314
27602: NOT
27603: IFFALSE 27841
// begin SetTag ( driver , tDriver ) ;
27605: LD_VAR 0 6
27609: PPUSH
27610: LD_INT 501
27612: PPUSH
27613: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
27617: LD_VAR 0 1
27621: PPUSH
27622: LD_INT 501
27624: PPUSH
27625: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27629: LD_ADDR_VAR 0 7
27633: PUSH
27634: LD_EXP 80
27638: PUSH
27639: LD_VAR 0 4
27643: ARRAY
27644: PUSH
27645: LD_INT 3
27647: ARRAY
27648: PPUSH
27649: LD_EXP 80
27653: PUSH
27654: LD_VAR 0 4
27658: ARRAY
27659: PUSH
27660: LD_INT 4
27662: ARRAY
27663: PPUSH
27664: CALL_OW 428
27668: ST_TO_ADDR
// if hex then
27669: LD_VAR 0 7
27673: IFFALSE 27691
// ComMoveUnit ( driver , hex ) else
27675: LD_VAR 0 6
27679: PPUSH
27680: LD_VAR 0 7
27684: PPUSH
27685: CALL_OW 112
27689: GO 27730
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27691: LD_VAR 0 6
27695: PPUSH
27696: LD_EXP 80
27700: PUSH
27701: LD_VAR 0 4
27705: ARRAY
27706: PUSH
27707: LD_INT 3
27709: ARRAY
27710: PPUSH
27711: LD_EXP 80
27715: PUSH
27716: LD_VAR 0 4
27720: ARRAY
27721: PUSH
27722: LD_INT 4
27724: ARRAY
27725: PPUSH
27726: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27730: LD_VAR 0 6
27734: PPUSH
27735: CALL_OW 181
// if Multiplayer then
27739: LD_OWVAR 4
27743: IFFALSE 27792
// begin repeat wait ( 10 ) ;
27745: LD_INT 10
27747: PPUSH
27748: CALL_OW 67
// until not IsInUnit ( driver ) ;
27752: LD_VAR 0 6
27756: PPUSH
27757: CALL_OW 310
27761: NOT
27762: IFFALSE 27745
// if not HasTask ( driver ) then
27764: LD_VAR 0 6
27768: PPUSH
27769: CALL_OW 314
27773: NOT
27774: IFFALSE 27790
// ComEnterUnit ( driver , factory ) ;
27776: LD_VAR 0 6
27780: PPUSH
27781: LD_VAR 0 2
27785: PPUSH
27786: CALL_OW 120
// end else
27790: GO 27806
// AddComEnterUnit ( driver , factory ) ;
27792: LD_VAR 0 6
27796: PPUSH
27797: LD_VAR 0 2
27801: PPUSH
27802: CALL_OW 180
// wait ( 0 0$1 ) ;
27806: LD_INT 35
27808: PPUSH
27809: CALL_OW 67
// SetTag ( driver , tag ) ;
27813: LD_VAR 0 6
27817: PPUSH
27818: LD_VAR 0 5
27822: PPUSH
27823: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
27827: LD_VAR 0 1
27831: PPUSH
27832: LD_INT 0
27834: PPUSH
27835: CALL_OW 109
// break ;
27839: GO 27962
// end ; end else
27841: GO 27960
// if GetControl ( vehicle ) = control_remote then
27843: LD_VAR 0 1
27847: PPUSH
27848: CALL_OW 263
27852: PUSH
27853: LD_INT 2
27855: EQUAL
27856: IFFALSE 27919
// begin wait ( 0 0$2 ) ;
27858: LD_INT 70
27860: PPUSH
27861: CALL_OW 67
// if Connect ( vehicle ) then
27865: LD_VAR 0 1
27869: PPUSH
27870: CALL 41060 0 1
27874: IFFALSE 27915
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27876: LD_VAR 0 1
27880: PPUSH
27881: LD_EXP 80
27885: PUSH
27886: LD_VAR 0 4
27890: ARRAY
27891: PUSH
27892: LD_INT 3
27894: ARRAY
27895: PPUSH
27896: LD_EXP 80
27900: PUSH
27901: LD_VAR 0 4
27905: ARRAY
27906: PUSH
27907: LD_INT 4
27909: ARRAY
27910: PPUSH
27911: CALL_OW 171
// break ;
27915: GO 27962
// end else
27917: GO 27960
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27919: LD_VAR 0 1
27923: PPUSH
27924: LD_EXP 80
27928: PUSH
27929: LD_VAR 0 4
27933: ARRAY
27934: PUSH
27935: LD_INT 3
27937: ARRAY
27938: PPUSH
27939: LD_EXP 80
27943: PUSH
27944: LD_VAR 0 4
27948: ARRAY
27949: PUSH
27950: LD_INT 4
27952: ARRAY
27953: PPUSH
27954: CALL_OW 171
// break ;
27958: GO 27962
// end ; end ;
27960: GO 27494
27962: POP
27963: POP
// end ;
27964: LD_VAR 0 3
27968: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27969: LD_INT 0
27971: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27972: LD_VAR 0 1
27976: PUSH
27977: LD_INT 250
27979: EQUAL
27980: PUSH
27981: LD_VAR 0 2
27985: PPUSH
27986: CALL_OW 264
27990: PUSH
27991: LD_INT 81
27993: EQUAL
27994: AND
27995: IFFALSE 28016
// MinerPlaceMine ( unit , x , y ) ;
27997: LD_VAR 0 2
28001: PPUSH
28002: LD_VAR 0 4
28006: PPUSH
28007: LD_VAR 0 5
28011: PPUSH
28012: CALL 31108 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28016: LD_VAR 0 1
28020: PUSH
28021: LD_INT 251
28023: EQUAL
28024: PUSH
28025: LD_VAR 0 2
28029: PPUSH
28030: CALL_OW 264
28034: PUSH
28035: LD_INT 81
28037: EQUAL
28038: AND
28039: IFFALSE 28060
// MinerDetonateMine ( unit , x , y ) ;
28041: LD_VAR 0 2
28045: PPUSH
28046: LD_VAR 0 4
28050: PPUSH
28051: LD_VAR 0 5
28055: PPUSH
28056: CALL 31383 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28060: LD_VAR 0 1
28064: PUSH
28065: LD_INT 252
28067: EQUAL
28068: PUSH
28069: LD_VAR 0 2
28073: PPUSH
28074: CALL_OW 264
28078: PUSH
28079: LD_INT 81
28081: EQUAL
28082: AND
28083: IFFALSE 28104
// MinerCreateMinefield ( unit , x , y ) ;
28085: LD_VAR 0 2
28089: PPUSH
28090: LD_VAR 0 4
28094: PPUSH
28095: LD_VAR 0 5
28099: PPUSH
28100: CALL 31800 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28104: LD_VAR 0 1
28108: PUSH
28109: LD_INT 253
28111: EQUAL
28112: PUSH
28113: LD_VAR 0 2
28117: PPUSH
28118: CALL_OW 257
28122: PUSH
28123: LD_INT 5
28125: EQUAL
28126: AND
28127: IFFALSE 28148
// ComBinocular ( unit , x , y ) ;
28129: LD_VAR 0 2
28133: PPUSH
28134: LD_VAR 0 4
28138: PPUSH
28139: LD_VAR 0 5
28143: PPUSH
28144: CALL 32169 0 3
// if selectedUnit then
28148: LD_VAR 0 3
28152: IFFALSE 28208
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28154: LD_VAR 0 1
28158: PUSH
28159: LD_INT 254
28161: EQUAL
28162: PUSH
28163: LD_VAR 0 2
28167: PPUSH
28168: CALL_OW 264
28172: PUSH
28173: LD_INT 99
28175: EQUAL
28176: AND
28177: PUSH
28178: LD_VAR 0 3
28182: PPUSH
28183: CALL_OW 263
28187: PUSH
28188: LD_INT 3
28190: EQUAL
28191: AND
28192: IFFALSE 28208
// HackDestroyVehicle ( unit , selectedUnit ) ;
28194: LD_VAR 0 2
28198: PPUSH
28199: LD_VAR 0 3
28203: PPUSH
28204: CALL 30472 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28208: LD_VAR 0 1
28212: PUSH
28213: LD_INT 255
28215: EQUAL
28216: PUSH
28217: LD_VAR 0 2
28221: PPUSH
28222: CALL_OW 264
28226: PUSH
28227: LD_INT 14
28229: PUSH
28230: LD_INT 53
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: IN
28237: AND
28238: PUSH
28239: LD_VAR 0 4
28243: PPUSH
28244: LD_VAR 0 5
28248: PPUSH
28249: CALL_OW 488
28253: AND
28254: IFFALSE 28278
// CutTreeXYR ( unit , x , y , 12 ) ;
28256: LD_VAR 0 2
28260: PPUSH
28261: LD_VAR 0 4
28265: PPUSH
28266: LD_VAR 0 5
28270: PPUSH
28271: LD_INT 12
28273: PPUSH
28274: CALL 28469 0 4
// if cmd = 256 then
28278: LD_VAR 0 1
28282: PUSH
28283: LD_INT 256
28285: EQUAL
28286: IFFALSE 28307
// SetFactoryWaypoint ( unit , x , y ) ;
28288: LD_VAR 0 2
28292: PPUSH
28293: LD_VAR 0 4
28297: PPUSH
28298: LD_VAR 0 5
28302: PPUSH
28303: CALL 25945 0 3
// if cmd = 257 then
28307: LD_VAR 0 1
28311: PUSH
28312: LD_INT 257
28314: EQUAL
28315: IFFALSE 28336
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28317: LD_VAR 0 2
28321: PPUSH
28322: LD_VAR 0 4
28326: PPUSH
28327: LD_VAR 0 5
28331: PPUSH
28332: CALL 26435 0 3
// if cmd = 258 then
28336: LD_VAR 0 1
28340: PUSH
28341: LD_INT 258
28343: EQUAL
28344: IFFALSE 28368
// BurnTreeXYR ( unit , x , y , 8 ) ;
28346: LD_VAR 0 2
28350: PPUSH
28351: LD_VAR 0 4
28355: PPUSH
28356: LD_VAR 0 5
28360: PPUSH
28361: LD_INT 8
28363: PPUSH
28364: CALL 28863 0 4
// end ;
28368: LD_VAR 0 6
28372: RET
// export function ComRadiation ( un ) ; var eff ; begin
28373: LD_INT 0
28375: PPUSH
28376: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28377: LD_VAR 0 1
28381: PPUSH
28382: CALL_OW 264
28386: PUSH
28387: LD_INT 91
28389: NONEQUAL
28390: IFFALSE 28394
// exit ;
28392: GO 28464
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28394: LD_INT 68
28396: PPUSH
28397: LD_VAR 0 1
28401: PPUSH
28402: CALL_OW 255
28406: PPUSH
28407: CALL_OW 321
28411: PUSH
28412: LD_INT 2
28414: EQUAL
28415: IFFALSE 28427
// eff := 70 else
28417: LD_ADDR_VAR 0 3
28421: PUSH
28422: LD_INT 70
28424: ST_TO_ADDR
28425: GO 28435
// eff := 30 ;
28427: LD_ADDR_VAR 0 3
28431: PUSH
28432: LD_INT 30
28434: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28435: LD_VAR 0 1
28439: PPUSH
28440: CALL_OW 250
28444: PPUSH
28445: LD_VAR 0 1
28449: PPUSH
28450: CALL_OW 251
28454: PPUSH
28455: LD_VAR 0 3
28459: PPUSH
28460: CALL_OW 495
// end ;
28464: LD_VAR 0 2
28468: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28469: LD_INT 0
28471: PPUSH
28472: PPUSH
28473: PPUSH
28474: PPUSH
28475: PPUSH
28476: PPUSH
28477: PPUSH
28478: PPUSH
28479: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28480: LD_VAR 0 1
28484: PPUSH
28485: CALL_OW 302
28489: NOT
28490: PUSH
28491: LD_VAR 0 2
28495: PPUSH
28496: LD_VAR 0 3
28500: PPUSH
28501: CALL_OW 488
28505: NOT
28506: OR
28507: PUSH
28508: LD_VAR 0 4
28512: NOT
28513: OR
28514: IFFALSE 28518
// exit ;
28516: GO 28858
// list := [ ] ;
28518: LD_ADDR_VAR 0 13
28522: PUSH
28523: EMPTY
28524: ST_TO_ADDR
// if x - r < 0 then
28525: LD_VAR 0 2
28529: PUSH
28530: LD_VAR 0 4
28534: MINUS
28535: PUSH
28536: LD_INT 0
28538: LESS
28539: IFFALSE 28551
// min_x := 0 else
28541: LD_ADDR_VAR 0 7
28545: PUSH
28546: LD_INT 0
28548: ST_TO_ADDR
28549: GO 28567
// min_x := x - r ;
28551: LD_ADDR_VAR 0 7
28555: PUSH
28556: LD_VAR 0 2
28560: PUSH
28561: LD_VAR 0 4
28565: MINUS
28566: ST_TO_ADDR
// if y - r < 0 then
28567: LD_VAR 0 3
28571: PUSH
28572: LD_VAR 0 4
28576: MINUS
28577: PUSH
28578: LD_INT 0
28580: LESS
28581: IFFALSE 28593
// min_y := 0 else
28583: LD_ADDR_VAR 0 8
28587: PUSH
28588: LD_INT 0
28590: ST_TO_ADDR
28591: GO 28609
// min_y := y - r ;
28593: LD_ADDR_VAR 0 8
28597: PUSH
28598: LD_VAR 0 3
28602: PUSH
28603: LD_VAR 0 4
28607: MINUS
28608: ST_TO_ADDR
// max_x := x + r ;
28609: LD_ADDR_VAR 0 9
28613: PUSH
28614: LD_VAR 0 2
28618: PUSH
28619: LD_VAR 0 4
28623: PLUS
28624: ST_TO_ADDR
// max_y := y + r ;
28625: LD_ADDR_VAR 0 10
28629: PUSH
28630: LD_VAR 0 3
28634: PUSH
28635: LD_VAR 0 4
28639: PLUS
28640: ST_TO_ADDR
// for _x = min_x to max_x do
28641: LD_ADDR_VAR 0 11
28645: PUSH
28646: DOUBLE
28647: LD_VAR 0 7
28651: DEC
28652: ST_TO_ADDR
28653: LD_VAR 0 9
28657: PUSH
28658: FOR_TO
28659: IFFALSE 28776
// for _y = min_y to max_y do
28661: LD_ADDR_VAR 0 12
28665: PUSH
28666: DOUBLE
28667: LD_VAR 0 8
28671: DEC
28672: ST_TO_ADDR
28673: LD_VAR 0 10
28677: PUSH
28678: FOR_TO
28679: IFFALSE 28772
// begin if not ValidHex ( _x , _y ) then
28681: LD_VAR 0 11
28685: PPUSH
28686: LD_VAR 0 12
28690: PPUSH
28691: CALL_OW 488
28695: NOT
28696: IFFALSE 28700
// continue ;
28698: GO 28678
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28700: LD_VAR 0 11
28704: PPUSH
28705: LD_VAR 0 12
28709: PPUSH
28710: CALL_OW 351
28714: PUSH
28715: LD_VAR 0 11
28719: PPUSH
28720: LD_VAR 0 12
28724: PPUSH
28725: CALL_OW 554
28729: AND
28730: IFFALSE 28770
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28732: LD_ADDR_VAR 0 13
28736: PUSH
28737: LD_VAR 0 13
28741: PPUSH
28742: LD_VAR 0 13
28746: PUSH
28747: LD_INT 1
28749: PLUS
28750: PPUSH
28751: LD_VAR 0 11
28755: PUSH
28756: LD_VAR 0 12
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PPUSH
28765: CALL_OW 2
28769: ST_TO_ADDR
// end ;
28770: GO 28678
28772: POP
28773: POP
28774: GO 28658
28776: POP
28777: POP
// if not list then
28778: LD_VAR 0 13
28782: NOT
28783: IFFALSE 28787
// exit ;
28785: GO 28858
// for i in list do
28787: LD_ADDR_VAR 0 6
28791: PUSH
28792: LD_VAR 0 13
28796: PUSH
28797: FOR_IN
28798: IFFALSE 28856
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28800: LD_VAR 0 1
28804: PPUSH
28805: LD_STRING M
28807: PUSH
28808: LD_VAR 0 6
28812: PUSH
28813: LD_INT 1
28815: ARRAY
28816: PUSH
28817: LD_VAR 0 6
28821: PUSH
28822: LD_INT 2
28824: ARRAY
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: LD_INT 0
28834: PUSH
28835: LD_INT 0
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: PUSH
28847: EMPTY
28848: LIST
28849: PPUSH
28850: CALL_OW 447
28854: GO 28797
28856: POP
28857: POP
// end ;
28858: LD_VAR 0 5
28862: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
28863: LD_INT 0
28865: PPUSH
28866: PPUSH
28867: PPUSH
28868: PPUSH
28869: PPUSH
28870: PPUSH
28871: PPUSH
28872: PPUSH
28873: PPUSH
28874: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28875: LD_VAR 0 1
28879: PPUSH
28880: CALL_OW 302
28884: NOT
28885: PUSH
28886: LD_VAR 0 2
28890: PPUSH
28891: LD_VAR 0 3
28895: PPUSH
28896: CALL_OW 488
28900: NOT
28901: OR
28902: PUSH
28903: LD_VAR 0 4
28907: NOT
28908: OR
28909: IFFALSE 28913
// exit ;
28911: GO 29426
// list := [ ] ;
28913: LD_ADDR_VAR 0 13
28917: PUSH
28918: EMPTY
28919: ST_TO_ADDR
// if x - r < 0 then
28920: LD_VAR 0 2
28924: PUSH
28925: LD_VAR 0 4
28929: MINUS
28930: PUSH
28931: LD_INT 0
28933: LESS
28934: IFFALSE 28946
// min_x := 0 else
28936: LD_ADDR_VAR 0 7
28940: PUSH
28941: LD_INT 0
28943: ST_TO_ADDR
28944: GO 28962
// min_x := x - r ;
28946: LD_ADDR_VAR 0 7
28950: PUSH
28951: LD_VAR 0 2
28955: PUSH
28956: LD_VAR 0 4
28960: MINUS
28961: ST_TO_ADDR
// if y - r < 0 then
28962: LD_VAR 0 3
28966: PUSH
28967: LD_VAR 0 4
28971: MINUS
28972: PUSH
28973: LD_INT 0
28975: LESS
28976: IFFALSE 28988
// min_y := 0 else
28978: LD_ADDR_VAR 0 8
28982: PUSH
28983: LD_INT 0
28985: ST_TO_ADDR
28986: GO 29004
// min_y := y - r ;
28988: LD_ADDR_VAR 0 8
28992: PUSH
28993: LD_VAR 0 3
28997: PUSH
28998: LD_VAR 0 4
29002: MINUS
29003: ST_TO_ADDR
// max_x := x + r ;
29004: LD_ADDR_VAR 0 9
29008: PUSH
29009: LD_VAR 0 2
29013: PUSH
29014: LD_VAR 0 4
29018: PLUS
29019: ST_TO_ADDR
// max_y := y + r ;
29020: LD_ADDR_VAR 0 10
29024: PUSH
29025: LD_VAR 0 3
29029: PUSH
29030: LD_VAR 0 4
29034: PLUS
29035: ST_TO_ADDR
// for _x = min_x to max_x do
29036: LD_ADDR_VAR 0 11
29040: PUSH
29041: DOUBLE
29042: LD_VAR 0 7
29046: DEC
29047: ST_TO_ADDR
29048: LD_VAR 0 9
29052: PUSH
29053: FOR_TO
29054: IFFALSE 29171
// for _y = min_y to max_y do
29056: LD_ADDR_VAR 0 12
29060: PUSH
29061: DOUBLE
29062: LD_VAR 0 8
29066: DEC
29067: ST_TO_ADDR
29068: LD_VAR 0 10
29072: PUSH
29073: FOR_TO
29074: IFFALSE 29167
// begin if not ValidHex ( _x , _y ) then
29076: LD_VAR 0 11
29080: PPUSH
29081: LD_VAR 0 12
29085: PPUSH
29086: CALL_OW 488
29090: NOT
29091: IFFALSE 29095
// continue ;
29093: GO 29073
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29095: LD_VAR 0 11
29099: PPUSH
29100: LD_VAR 0 12
29104: PPUSH
29105: CALL_OW 351
29109: PUSH
29110: LD_VAR 0 11
29114: PPUSH
29115: LD_VAR 0 12
29119: PPUSH
29120: CALL_OW 554
29124: AND
29125: IFFALSE 29165
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29127: LD_ADDR_VAR 0 13
29131: PUSH
29132: LD_VAR 0 13
29136: PPUSH
29137: LD_VAR 0 13
29141: PUSH
29142: LD_INT 1
29144: PLUS
29145: PPUSH
29146: LD_VAR 0 11
29150: PUSH
29151: LD_VAR 0 12
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PPUSH
29160: CALL_OW 2
29164: ST_TO_ADDR
// end ;
29165: GO 29073
29167: POP
29168: POP
29169: GO 29053
29171: POP
29172: POP
// if not list then
29173: LD_VAR 0 13
29177: NOT
29178: IFFALSE 29182
// exit ;
29180: GO 29426
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29182: LD_ADDR_VAR 0 13
29186: PUSH
29187: LD_VAR 0 1
29191: PPUSH
29192: LD_VAR 0 13
29196: PPUSH
29197: LD_INT 1
29199: PPUSH
29200: LD_INT 1
29202: PPUSH
29203: CALL 38202 0 4
29207: ST_TO_ADDR
// ComStop ( flame ) ;
29208: LD_VAR 0 1
29212: PPUSH
29213: CALL_OW 141
// for i in list do
29217: LD_ADDR_VAR 0 6
29221: PUSH
29222: LD_VAR 0 13
29226: PUSH
29227: FOR_IN
29228: IFFALSE 29259
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29230: LD_VAR 0 1
29234: PPUSH
29235: LD_VAR 0 6
29239: PUSH
29240: LD_INT 1
29242: ARRAY
29243: PPUSH
29244: LD_VAR 0 6
29248: PUSH
29249: LD_INT 2
29251: ARRAY
29252: PPUSH
29253: CALL_OW 176
29257: GO 29227
29259: POP
29260: POP
// repeat wait ( 0 0$1 ) ;
29261: LD_INT 35
29263: PPUSH
29264: CALL_OW 67
// task := GetTaskList ( flame ) ;
29268: LD_ADDR_VAR 0 14
29272: PUSH
29273: LD_VAR 0 1
29277: PPUSH
29278: CALL_OW 437
29282: ST_TO_ADDR
// if not task then
29283: LD_VAR 0 14
29287: NOT
29288: IFFALSE 29292
// exit ;
29290: GO 29426
// if task [ 1 ] [ 1 ] <> | then
29292: LD_VAR 0 14
29296: PUSH
29297: LD_INT 1
29299: ARRAY
29300: PUSH
29301: LD_INT 1
29303: ARRAY
29304: PUSH
29305: LD_STRING |
29307: NONEQUAL
29308: IFFALSE 29312
// exit ;
29310: GO 29426
// _x := task [ 1 ] [ 2 ] ;
29312: LD_ADDR_VAR 0 11
29316: PUSH
29317: LD_VAR 0 14
29321: PUSH
29322: LD_INT 1
29324: ARRAY
29325: PUSH
29326: LD_INT 2
29328: ARRAY
29329: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29330: LD_ADDR_VAR 0 12
29334: PUSH
29335: LD_VAR 0 14
29339: PUSH
29340: LD_INT 1
29342: ARRAY
29343: PUSH
29344: LD_INT 3
29346: ARRAY
29347: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29348: LD_VAR 0 11
29352: PPUSH
29353: LD_VAR 0 12
29357: PPUSH
29358: CALL_OW 351
29362: NOT
29363: PUSH
29364: LD_VAR 0 11
29368: PPUSH
29369: LD_VAR 0 12
29373: PPUSH
29374: CALL_OW 554
29378: NOT
29379: OR
29380: IFFALSE 29414
// begin task := Delete ( task , 1 ) ;
29382: LD_ADDR_VAR 0 14
29386: PUSH
29387: LD_VAR 0 14
29391: PPUSH
29392: LD_INT 1
29394: PPUSH
29395: CALL_OW 3
29399: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29400: LD_VAR 0 1
29404: PPUSH
29405: LD_VAR 0 14
29409: PPUSH
29410: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29414: LD_VAR 0 1
29418: PPUSH
29419: CALL_OW 314
29423: NOT
29424: IFFALSE 29261
// end ;
29426: LD_VAR 0 5
29430: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29431: LD_EXP 83
29435: NOT
29436: IFFALSE 29486
29438: GO 29440
29440: DISABLE
// begin initHack := true ;
29441: LD_ADDR_EXP 83
29445: PUSH
29446: LD_INT 1
29448: ST_TO_ADDR
// hackTanks := [ ] ;
29449: LD_ADDR_EXP 84
29453: PUSH
29454: EMPTY
29455: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29456: LD_ADDR_EXP 85
29460: PUSH
29461: EMPTY
29462: ST_TO_ADDR
// hackLimit := 3 ;
29463: LD_ADDR_EXP 86
29467: PUSH
29468: LD_INT 3
29470: ST_TO_ADDR
// hackDist := 12 ;
29471: LD_ADDR_EXP 87
29475: PUSH
29476: LD_INT 12
29478: ST_TO_ADDR
// hackCounter := [ ] ;
29479: LD_ADDR_EXP 88
29483: PUSH
29484: EMPTY
29485: ST_TO_ADDR
// end ;
29486: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29487: LD_EXP 83
29491: PUSH
29492: LD_INT 34
29494: PUSH
29495: LD_INT 99
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PPUSH
29502: CALL_OW 69
29506: AND
29507: IFFALSE 29760
29509: GO 29511
29511: DISABLE
29512: LD_INT 0
29514: PPUSH
29515: PPUSH
// begin enable ;
29516: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29517: LD_ADDR_VAR 0 1
29521: PUSH
29522: LD_INT 34
29524: PUSH
29525: LD_INT 99
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PPUSH
29532: CALL_OW 69
29536: PUSH
29537: FOR_IN
29538: IFFALSE 29758
// begin if not i in hackTanks then
29540: LD_VAR 0 1
29544: PUSH
29545: LD_EXP 84
29549: IN
29550: NOT
29551: IFFALSE 29634
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29553: LD_ADDR_EXP 84
29557: PUSH
29558: LD_EXP 84
29562: PPUSH
29563: LD_EXP 84
29567: PUSH
29568: LD_INT 1
29570: PLUS
29571: PPUSH
29572: LD_VAR 0 1
29576: PPUSH
29577: CALL_OW 1
29581: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29582: LD_ADDR_EXP 85
29586: PUSH
29587: LD_EXP 85
29591: PPUSH
29592: LD_EXP 85
29596: PUSH
29597: LD_INT 1
29599: PLUS
29600: PPUSH
29601: EMPTY
29602: PPUSH
29603: CALL_OW 1
29607: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29608: LD_ADDR_EXP 88
29612: PUSH
29613: LD_EXP 88
29617: PPUSH
29618: LD_EXP 88
29622: PUSH
29623: LD_INT 1
29625: PLUS
29626: PPUSH
29627: EMPTY
29628: PPUSH
29629: CALL_OW 1
29633: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29634: LD_VAR 0 1
29638: PPUSH
29639: CALL_OW 302
29643: NOT
29644: IFFALSE 29657
// begin HackUnlinkAll ( i ) ;
29646: LD_VAR 0 1
29650: PPUSH
29651: CALL 29763 0 1
// continue ;
29655: GO 29537
// end ; HackCheckCapturedStatus ( i ) ;
29657: LD_VAR 0 1
29661: PPUSH
29662: CALL 30206 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29666: LD_ADDR_VAR 0 2
29670: PUSH
29671: LD_INT 81
29673: PUSH
29674: LD_VAR 0 1
29678: PPUSH
29679: CALL_OW 255
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 33
29690: PUSH
29691: LD_INT 3
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 91
29700: PUSH
29701: LD_VAR 0 1
29705: PUSH
29706: LD_EXP 87
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 50
29718: PUSH
29719: EMPTY
29720: LIST
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: PPUSH
29728: CALL_OW 69
29732: ST_TO_ADDR
// if not tmp then
29733: LD_VAR 0 2
29737: NOT
29738: IFFALSE 29742
// continue ;
29740: GO 29537
// HackLink ( i , tmp ) ;
29742: LD_VAR 0 1
29746: PPUSH
29747: LD_VAR 0 2
29751: PPUSH
29752: CALL 29899 0 2
// end ;
29756: GO 29537
29758: POP
29759: POP
// end ;
29760: PPOPN 2
29762: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29763: LD_INT 0
29765: PPUSH
29766: PPUSH
29767: PPUSH
// if not hack in hackTanks then
29768: LD_VAR 0 1
29772: PUSH
29773: LD_EXP 84
29777: IN
29778: NOT
29779: IFFALSE 29783
// exit ;
29781: GO 29894
// index := GetElementIndex ( hackTanks , hack ) ;
29783: LD_ADDR_VAR 0 4
29787: PUSH
29788: LD_EXP 84
29792: PPUSH
29793: LD_VAR 0 1
29797: PPUSH
29798: CALL 37499 0 2
29802: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29803: LD_EXP 85
29807: PUSH
29808: LD_VAR 0 4
29812: ARRAY
29813: IFFALSE 29894
// begin for i in hackTanksCaptured [ index ] do
29815: LD_ADDR_VAR 0 3
29819: PUSH
29820: LD_EXP 85
29824: PUSH
29825: LD_VAR 0 4
29829: ARRAY
29830: PUSH
29831: FOR_IN
29832: IFFALSE 29858
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29834: LD_VAR 0 3
29838: PUSH
29839: LD_INT 1
29841: ARRAY
29842: PPUSH
29843: LD_VAR 0 3
29847: PUSH
29848: LD_INT 2
29850: ARRAY
29851: PPUSH
29852: CALL_OW 235
29856: GO 29831
29858: POP
29859: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29860: LD_ADDR_EXP 85
29864: PUSH
29865: LD_EXP 85
29869: PPUSH
29870: LD_VAR 0 4
29874: PPUSH
29875: EMPTY
29876: PPUSH
29877: CALL_OW 1
29881: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29882: LD_VAR 0 1
29886: PPUSH
29887: LD_INT 0
29889: PPUSH
29890: CALL_OW 505
// end ; end ;
29894: LD_VAR 0 2
29898: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29899: LD_INT 0
29901: PPUSH
29902: PPUSH
29903: PPUSH
// if not hack in hackTanks or not vehicles then
29904: LD_VAR 0 1
29908: PUSH
29909: LD_EXP 84
29913: IN
29914: NOT
29915: PUSH
29916: LD_VAR 0 2
29920: NOT
29921: OR
29922: IFFALSE 29926
// exit ;
29924: GO 30201
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29926: LD_ADDR_VAR 0 2
29930: PUSH
29931: LD_VAR 0 1
29935: PPUSH
29936: LD_VAR 0 2
29940: PPUSH
29941: LD_INT 1
29943: PPUSH
29944: LD_INT 1
29946: PPUSH
29947: CALL 38149 0 4
29951: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29952: LD_ADDR_VAR 0 5
29956: PUSH
29957: LD_EXP 84
29961: PPUSH
29962: LD_VAR 0 1
29966: PPUSH
29967: CALL 37499 0 2
29971: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29972: LD_EXP 85
29976: PUSH
29977: LD_VAR 0 5
29981: ARRAY
29982: PUSH
29983: LD_EXP 86
29987: LESS
29988: IFFALSE 30177
// begin for i := 1 to vehicles do
29990: LD_ADDR_VAR 0 4
29994: PUSH
29995: DOUBLE
29996: LD_INT 1
29998: DEC
29999: ST_TO_ADDR
30000: LD_VAR 0 2
30004: PUSH
30005: FOR_TO
30006: IFFALSE 30175
// begin if hackTanksCaptured [ index ] = hackLimit then
30008: LD_EXP 85
30012: PUSH
30013: LD_VAR 0 5
30017: ARRAY
30018: PUSH
30019: LD_EXP 86
30023: EQUAL
30024: IFFALSE 30028
// break ;
30026: GO 30175
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30028: LD_ADDR_EXP 88
30032: PUSH
30033: LD_EXP 88
30037: PPUSH
30038: LD_VAR 0 5
30042: PPUSH
30043: LD_EXP 88
30047: PUSH
30048: LD_VAR 0 5
30052: ARRAY
30053: PUSH
30054: LD_INT 1
30056: PLUS
30057: PPUSH
30058: CALL_OW 1
30062: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30063: LD_ADDR_EXP 85
30067: PUSH
30068: LD_EXP 85
30072: PPUSH
30073: LD_VAR 0 5
30077: PUSH
30078: LD_EXP 85
30082: PUSH
30083: LD_VAR 0 5
30087: ARRAY
30088: PUSH
30089: LD_INT 1
30091: PLUS
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PPUSH
30097: LD_VAR 0 2
30101: PUSH
30102: LD_VAR 0 4
30106: ARRAY
30107: PUSH
30108: LD_VAR 0 2
30112: PUSH
30113: LD_VAR 0 4
30117: ARRAY
30118: PPUSH
30119: CALL_OW 255
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PPUSH
30128: CALL 37714 0 3
30132: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30133: LD_VAR 0 2
30137: PUSH
30138: LD_VAR 0 4
30142: ARRAY
30143: PPUSH
30144: LD_VAR 0 1
30148: PPUSH
30149: CALL_OW 255
30153: PPUSH
30154: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30158: LD_VAR 0 2
30162: PUSH
30163: LD_VAR 0 4
30167: ARRAY
30168: PPUSH
30169: CALL_OW 141
// end ;
30173: GO 30005
30175: POP
30176: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30177: LD_VAR 0 1
30181: PPUSH
30182: LD_EXP 85
30186: PUSH
30187: LD_VAR 0 5
30191: ARRAY
30192: PUSH
30193: LD_INT 0
30195: PLUS
30196: PPUSH
30197: CALL_OW 505
// end ;
30201: LD_VAR 0 3
30205: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30206: LD_INT 0
30208: PPUSH
30209: PPUSH
30210: PPUSH
30211: PPUSH
// if not hack in hackTanks then
30212: LD_VAR 0 1
30216: PUSH
30217: LD_EXP 84
30221: IN
30222: NOT
30223: IFFALSE 30227
// exit ;
30225: GO 30467
// index := GetElementIndex ( hackTanks , hack ) ;
30227: LD_ADDR_VAR 0 4
30231: PUSH
30232: LD_EXP 84
30236: PPUSH
30237: LD_VAR 0 1
30241: PPUSH
30242: CALL 37499 0 2
30246: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30247: LD_ADDR_VAR 0 3
30251: PUSH
30252: DOUBLE
30253: LD_EXP 85
30257: PUSH
30258: LD_VAR 0 4
30262: ARRAY
30263: INC
30264: ST_TO_ADDR
30265: LD_INT 1
30267: PUSH
30268: FOR_DOWNTO
30269: IFFALSE 30441
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30271: LD_ADDR_VAR 0 5
30275: PUSH
30276: LD_EXP 85
30280: PUSH
30281: LD_VAR 0 4
30285: ARRAY
30286: PUSH
30287: LD_VAR 0 3
30291: ARRAY
30292: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30293: LD_VAR 0 5
30297: PUSH
30298: LD_INT 1
30300: ARRAY
30301: PPUSH
30302: CALL_OW 302
30306: NOT
30307: PUSH
30308: LD_VAR 0 5
30312: PUSH
30313: LD_INT 1
30315: ARRAY
30316: PPUSH
30317: CALL_OW 255
30321: PUSH
30322: LD_VAR 0 1
30326: PPUSH
30327: CALL_OW 255
30331: NONEQUAL
30332: OR
30333: IFFALSE 30439
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30335: LD_VAR 0 5
30339: PUSH
30340: LD_INT 1
30342: ARRAY
30343: PPUSH
30344: CALL_OW 305
30348: PUSH
30349: LD_VAR 0 5
30353: PUSH
30354: LD_INT 1
30356: ARRAY
30357: PPUSH
30358: CALL_OW 255
30362: PUSH
30363: LD_VAR 0 1
30367: PPUSH
30368: CALL_OW 255
30372: EQUAL
30373: AND
30374: IFFALSE 30398
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30376: LD_VAR 0 5
30380: PUSH
30381: LD_INT 1
30383: ARRAY
30384: PPUSH
30385: LD_VAR 0 5
30389: PUSH
30390: LD_INT 2
30392: ARRAY
30393: PPUSH
30394: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30398: LD_ADDR_EXP 85
30402: PUSH
30403: LD_EXP 85
30407: PPUSH
30408: LD_VAR 0 4
30412: PPUSH
30413: LD_EXP 85
30417: PUSH
30418: LD_VAR 0 4
30422: ARRAY
30423: PPUSH
30424: LD_VAR 0 3
30428: PPUSH
30429: CALL_OW 3
30433: PPUSH
30434: CALL_OW 1
30438: ST_TO_ADDR
// end ; end ;
30439: GO 30268
30441: POP
30442: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30443: LD_VAR 0 1
30447: PPUSH
30448: LD_EXP 85
30452: PUSH
30453: LD_VAR 0 4
30457: ARRAY
30458: PUSH
30459: LD_INT 0
30461: PLUS
30462: PPUSH
30463: CALL_OW 505
// end ;
30467: LD_VAR 0 2
30471: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30472: LD_INT 0
30474: PPUSH
30475: PPUSH
30476: PPUSH
30477: PPUSH
// if not hack in hackTanks then
30478: LD_VAR 0 1
30482: PUSH
30483: LD_EXP 84
30487: IN
30488: NOT
30489: IFFALSE 30493
// exit ;
30491: GO 30578
// index := GetElementIndex ( hackTanks , hack ) ;
30493: LD_ADDR_VAR 0 5
30497: PUSH
30498: LD_EXP 84
30502: PPUSH
30503: LD_VAR 0 1
30507: PPUSH
30508: CALL 37499 0 2
30512: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30513: LD_ADDR_VAR 0 4
30517: PUSH
30518: DOUBLE
30519: LD_INT 1
30521: DEC
30522: ST_TO_ADDR
30523: LD_EXP 85
30527: PUSH
30528: LD_VAR 0 5
30532: ARRAY
30533: PUSH
30534: FOR_TO
30535: IFFALSE 30576
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30537: LD_EXP 85
30541: PUSH
30542: LD_VAR 0 5
30546: ARRAY
30547: PUSH
30548: LD_VAR 0 4
30552: ARRAY
30553: PUSH
30554: LD_INT 1
30556: ARRAY
30557: PUSH
30558: LD_VAR 0 2
30562: EQUAL
30563: IFFALSE 30574
// KillUnit ( vehicle ) ;
30565: LD_VAR 0 2
30569: PPUSH
30570: CALL_OW 66
30574: GO 30534
30576: POP
30577: POP
// end ;
30578: LD_VAR 0 3
30582: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30583: LD_EXP 89
30587: NOT
30588: IFFALSE 30623
30590: GO 30592
30592: DISABLE
// begin initMiner := true ;
30593: LD_ADDR_EXP 89
30597: PUSH
30598: LD_INT 1
30600: ST_TO_ADDR
// minersList := [ ] ;
30601: LD_ADDR_EXP 90
30605: PUSH
30606: EMPTY
30607: ST_TO_ADDR
// minerMinesList := [ ] ;
30608: LD_ADDR_EXP 91
30612: PUSH
30613: EMPTY
30614: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30615: LD_ADDR_EXP 92
30619: PUSH
30620: LD_INT 5
30622: ST_TO_ADDR
// end ;
30623: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30624: LD_EXP 89
30628: PUSH
30629: LD_INT 34
30631: PUSH
30632: LD_INT 81
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PPUSH
30639: CALL_OW 69
30643: AND
30644: IFFALSE 31105
30646: GO 30648
30648: DISABLE
30649: LD_INT 0
30651: PPUSH
30652: PPUSH
30653: PPUSH
30654: PPUSH
// begin enable ;
30655: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30656: LD_ADDR_VAR 0 1
30660: PUSH
30661: LD_INT 34
30663: PUSH
30664: LD_INT 81
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PPUSH
30671: CALL_OW 69
30675: PUSH
30676: FOR_IN
30677: IFFALSE 30749
// begin if not i in minersList then
30679: LD_VAR 0 1
30683: PUSH
30684: LD_EXP 90
30688: IN
30689: NOT
30690: IFFALSE 30747
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30692: LD_ADDR_EXP 90
30696: PUSH
30697: LD_EXP 90
30701: PPUSH
30702: LD_EXP 90
30706: PUSH
30707: LD_INT 1
30709: PLUS
30710: PPUSH
30711: LD_VAR 0 1
30715: PPUSH
30716: CALL_OW 1
30720: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30721: LD_ADDR_EXP 91
30725: PUSH
30726: LD_EXP 91
30730: PPUSH
30731: LD_EXP 91
30735: PUSH
30736: LD_INT 1
30738: PLUS
30739: PPUSH
30740: EMPTY
30741: PPUSH
30742: CALL_OW 1
30746: ST_TO_ADDR
// end end ;
30747: GO 30676
30749: POP
30750: POP
// for i := minerMinesList downto 1 do
30751: LD_ADDR_VAR 0 1
30755: PUSH
30756: DOUBLE
30757: LD_EXP 91
30761: INC
30762: ST_TO_ADDR
30763: LD_INT 1
30765: PUSH
30766: FOR_DOWNTO
30767: IFFALSE 31103
// begin if IsLive ( minersList [ i ] ) then
30769: LD_EXP 90
30773: PUSH
30774: LD_VAR 0 1
30778: ARRAY
30779: PPUSH
30780: CALL_OW 300
30784: IFFALSE 30812
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30786: LD_EXP 90
30790: PUSH
30791: LD_VAR 0 1
30795: ARRAY
30796: PPUSH
30797: LD_EXP 91
30801: PUSH
30802: LD_VAR 0 1
30806: ARRAY
30807: PPUSH
30808: CALL_OW 505
// if not minerMinesList [ i ] then
30812: LD_EXP 91
30816: PUSH
30817: LD_VAR 0 1
30821: ARRAY
30822: NOT
30823: IFFALSE 30827
// continue ;
30825: GO 30766
// for j := minerMinesList [ i ] downto 1 do
30827: LD_ADDR_VAR 0 2
30831: PUSH
30832: DOUBLE
30833: LD_EXP 91
30837: PUSH
30838: LD_VAR 0 1
30842: ARRAY
30843: INC
30844: ST_TO_ADDR
30845: LD_INT 1
30847: PUSH
30848: FOR_DOWNTO
30849: IFFALSE 31099
// begin side := GetSide ( minersList [ i ] ) ;
30851: LD_ADDR_VAR 0 3
30855: PUSH
30856: LD_EXP 90
30860: PUSH
30861: LD_VAR 0 1
30865: ARRAY
30866: PPUSH
30867: CALL_OW 255
30871: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30872: LD_ADDR_VAR 0 4
30876: PUSH
30877: LD_EXP 91
30881: PUSH
30882: LD_VAR 0 1
30886: ARRAY
30887: PUSH
30888: LD_VAR 0 2
30892: ARRAY
30893: PUSH
30894: LD_INT 1
30896: ARRAY
30897: PPUSH
30898: LD_EXP 91
30902: PUSH
30903: LD_VAR 0 1
30907: ARRAY
30908: PUSH
30909: LD_VAR 0 2
30913: ARRAY
30914: PUSH
30915: LD_INT 2
30917: ARRAY
30918: PPUSH
30919: CALL_OW 428
30923: ST_TO_ADDR
// if not tmp then
30924: LD_VAR 0 4
30928: NOT
30929: IFFALSE 30933
// continue ;
30931: GO 30848
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30933: LD_VAR 0 4
30937: PUSH
30938: LD_INT 81
30940: PUSH
30941: LD_VAR 0 3
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PPUSH
30950: CALL_OW 69
30954: IN
30955: PUSH
30956: LD_EXP 91
30960: PUSH
30961: LD_VAR 0 1
30965: ARRAY
30966: PUSH
30967: LD_VAR 0 2
30971: ARRAY
30972: PUSH
30973: LD_INT 1
30975: ARRAY
30976: PPUSH
30977: LD_EXP 91
30981: PUSH
30982: LD_VAR 0 1
30986: ARRAY
30987: PUSH
30988: LD_VAR 0 2
30992: ARRAY
30993: PUSH
30994: LD_INT 2
30996: ARRAY
30997: PPUSH
30998: CALL_OW 458
31002: AND
31003: IFFALSE 31097
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31005: LD_EXP 91
31009: PUSH
31010: LD_VAR 0 1
31014: ARRAY
31015: PUSH
31016: LD_VAR 0 2
31020: ARRAY
31021: PUSH
31022: LD_INT 1
31024: ARRAY
31025: PPUSH
31026: LD_EXP 91
31030: PUSH
31031: LD_VAR 0 1
31035: ARRAY
31036: PUSH
31037: LD_VAR 0 2
31041: ARRAY
31042: PUSH
31043: LD_INT 2
31045: ARRAY
31046: PPUSH
31047: LD_VAR 0 3
31051: PPUSH
31052: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31056: LD_ADDR_EXP 91
31060: PUSH
31061: LD_EXP 91
31065: PPUSH
31066: LD_VAR 0 1
31070: PPUSH
31071: LD_EXP 91
31075: PUSH
31076: LD_VAR 0 1
31080: ARRAY
31081: PPUSH
31082: LD_VAR 0 2
31086: PPUSH
31087: CALL_OW 3
31091: PPUSH
31092: CALL_OW 1
31096: ST_TO_ADDR
// end ; end ;
31097: GO 30848
31099: POP
31100: POP
// end ;
31101: GO 30766
31103: POP
31104: POP
// end ;
31105: PPOPN 4
31107: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31108: LD_INT 0
31110: PPUSH
31111: PPUSH
// result := false ;
31112: LD_ADDR_VAR 0 4
31116: PUSH
31117: LD_INT 0
31119: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31120: LD_VAR 0 1
31124: PPUSH
31125: CALL_OW 264
31129: PUSH
31130: LD_INT 81
31132: EQUAL
31133: NOT
31134: IFFALSE 31138
// exit ;
31136: GO 31378
// index := GetElementIndex ( minersList , unit ) ;
31138: LD_ADDR_VAR 0 5
31142: PUSH
31143: LD_EXP 90
31147: PPUSH
31148: LD_VAR 0 1
31152: PPUSH
31153: CALL 37499 0 2
31157: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31158: LD_EXP 91
31162: PUSH
31163: LD_VAR 0 5
31167: ARRAY
31168: PUSH
31169: LD_EXP 92
31173: GREATEREQUAL
31174: IFFALSE 31178
// exit ;
31176: GO 31378
// ComMoveXY ( unit , x , y ) ;
31178: LD_VAR 0 1
31182: PPUSH
31183: LD_VAR 0 2
31187: PPUSH
31188: LD_VAR 0 3
31192: PPUSH
31193: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31197: LD_INT 35
31199: PPUSH
31200: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31204: LD_VAR 0 1
31208: PPUSH
31209: LD_VAR 0 2
31213: PPUSH
31214: LD_VAR 0 3
31218: PPUSH
31219: CALL 69260 0 3
31223: NOT
31224: PUSH
31225: LD_VAR 0 1
31229: PPUSH
31230: CALL_OW 314
31234: AND
31235: IFFALSE 31239
// exit ;
31237: GO 31378
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31239: LD_VAR 0 2
31243: PPUSH
31244: LD_VAR 0 3
31248: PPUSH
31249: CALL_OW 428
31253: PUSH
31254: LD_VAR 0 1
31258: EQUAL
31259: PUSH
31260: LD_VAR 0 1
31264: PPUSH
31265: CALL_OW 314
31269: NOT
31270: AND
31271: IFFALSE 31197
// PlaySoundXY ( x , y , PlantMine ) ;
31273: LD_VAR 0 2
31277: PPUSH
31278: LD_VAR 0 3
31282: PPUSH
31283: LD_STRING PlantMine
31285: PPUSH
31286: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31290: LD_VAR 0 2
31294: PPUSH
31295: LD_VAR 0 3
31299: PPUSH
31300: LD_VAR 0 1
31304: PPUSH
31305: CALL_OW 255
31309: PPUSH
31310: LD_INT 0
31312: PPUSH
31313: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31317: LD_ADDR_EXP 91
31321: PUSH
31322: LD_EXP 91
31326: PPUSH
31327: LD_VAR 0 5
31331: PUSH
31332: LD_EXP 91
31336: PUSH
31337: LD_VAR 0 5
31341: ARRAY
31342: PUSH
31343: LD_INT 1
31345: PLUS
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PPUSH
31351: LD_VAR 0 2
31355: PUSH
31356: LD_VAR 0 3
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PPUSH
31365: CALL 37714 0 3
31369: ST_TO_ADDR
// result := true ;
31370: LD_ADDR_VAR 0 4
31374: PUSH
31375: LD_INT 1
31377: ST_TO_ADDR
// end ;
31378: LD_VAR 0 4
31382: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31383: LD_INT 0
31385: PPUSH
31386: PPUSH
31387: PPUSH
// if not unit in minersList then
31388: LD_VAR 0 1
31392: PUSH
31393: LD_EXP 90
31397: IN
31398: NOT
31399: IFFALSE 31403
// exit ;
31401: GO 31795
// index := GetElementIndex ( minersList , unit ) ;
31403: LD_ADDR_VAR 0 6
31407: PUSH
31408: LD_EXP 90
31412: PPUSH
31413: LD_VAR 0 1
31417: PPUSH
31418: CALL 37499 0 2
31422: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31423: LD_ADDR_VAR 0 5
31427: PUSH
31428: DOUBLE
31429: LD_EXP 91
31433: PUSH
31434: LD_VAR 0 6
31438: ARRAY
31439: INC
31440: ST_TO_ADDR
31441: LD_INT 1
31443: PUSH
31444: FOR_DOWNTO
31445: IFFALSE 31606
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31447: LD_EXP 91
31451: PUSH
31452: LD_VAR 0 6
31456: ARRAY
31457: PUSH
31458: LD_VAR 0 5
31462: ARRAY
31463: PUSH
31464: LD_INT 1
31466: ARRAY
31467: PUSH
31468: LD_VAR 0 2
31472: EQUAL
31473: PUSH
31474: LD_EXP 91
31478: PUSH
31479: LD_VAR 0 6
31483: ARRAY
31484: PUSH
31485: LD_VAR 0 5
31489: ARRAY
31490: PUSH
31491: LD_INT 2
31493: ARRAY
31494: PUSH
31495: LD_VAR 0 3
31499: EQUAL
31500: AND
31501: IFFALSE 31604
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31503: LD_EXP 91
31507: PUSH
31508: LD_VAR 0 6
31512: ARRAY
31513: PUSH
31514: LD_VAR 0 5
31518: ARRAY
31519: PUSH
31520: LD_INT 1
31522: ARRAY
31523: PPUSH
31524: LD_EXP 91
31528: PUSH
31529: LD_VAR 0 6
31533: ARRAY
31534: PUSH
31535: LD_VAR 0 5
31539: ARRAY
31540: PUSH
31541: LD_INT 2
31543: ARRAY
31544: PPUSH
31545: LD_VAR 0 1
31549: PPUSH
31550: CALL_OW 255
31554: PPUSH
31555: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31559: LD_ADDR_EXP 91
31563: PUSH
31564: LD_EXP 91
31568: PPUSH
31569: LD_VAR 0 6
31573: PPUSH
31574: LD_EXP 91
31578: PUSH
31579: LD_VAR 0 6
31583: ARRAY
31584: PPUSH
31585: LD_VAR 0 5
31589: PPUSH
31590: CALL_OW 3
31594: PPUSH
31595: CALL_OW 1
31599: ST_TO_ADDR
// exit ;
31600: POP
31601: POP
31602: GO 31795
// end ; end ;
31604: GO 31444
31606: POP
31607: POP
// for i := minerMinesList [ index ] downto 1 do
31608: LD_ADDR_VAR 0 5
31612: PUSH
31613: DOUBLE
31614: LD_EXP 91
31618: PUSH
31619: LD_VAR 0 6
31623: ARRAY
31624: INC
31625: ST_TO_ADDR
31626: LD_INT 1
31628: PUSH
31629: FOR_DOWNTO
31630: IFFALSE 31793
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31632: LD_EXP 91
31636: PUSH
31637: LD_VAR 0 6
31641: ARRAY
31642: PUSH
31643: LD_VAR 0 5
31647: ARRAY
31648: PUSH
31649: LD_INT 1
31651: ARRAY
31652: PPUSH
31653: LD_EXP 91
31657: PUSH
31658: LD_VAR 0 6
31662: ARRAY
31663: PUSH
31664: LD_VAR 0 5
31668: ARRAY
31669: PUSH
31670: LD_INT 2
31672: ARRAY
31673: PPUSH
31674: LD_VAR 0 2
31678: PPUSH
31679: LD_VAR 0 3
31683: PPUSH
31684: CALL_OW 298
31688: PUSH
31689: LD_INT 6
31691: LESS
31692: IFFALSE 31791
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31694: LD_EXP 91
31698: PUSH
31699: LD_VAR 0 6
31703: ARRAY
31704: PUSH
31705: LD_VAR 0 5
31709: ARRAY
31710: PUSH
31711: LD_INT 1
31713: ARRAY
31714: PPUSH
31715: LD_EXP 91
31719: PUSH
31720: LD_VAR 0 6
31724: ARRAY
31725: PUSH
31726: LD_VAR 0 5
31730: ARRAY
31731: PUSH
31732: LD_INT 2
31734: ARRAY
31735: PPUSH
31736: LD_VAR 0 1
31740: PPUSH
31741: CALL_OW 255
31745: PPUSH
31746: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31750: LD_ADDR_EXP 91
31754: PUSH
31755: LD_EXP 91
31759: PPUSH
31760: LD_VAR 0 6
31764: PPUSH
31765: LD_EXP 91
31769: PUSH
31770: LD_VAR 0 6
31774: ARRAY
31775: PPUSH
31776: LD_VAR 0 5
31780: PPUSH
31781: CALL_OW 3
31785: PPUSH
31786: CALL_OW 1
31790: ST_TO_ADDR
// end ; end ;
31791: GO 31629
31793: POP
31794: POP
// end ;
31795: LD_VAR 0 4
31799: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31800: LD_INT 0
31802: PPUSH
31803: PPUSH
31804: PPUSH
31805: PPUSH
31806: PPUSH
31807: PPUSH
31808: PPUSH
31809: PPUSH
31810: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31811: LD_VAR 0 1
31815: PPUSH
31816: CALL_OW 264
31820: PUSH
31821: LD_INT 81
31823: EQUAL
31824: NOT
31825: PUSH
31826: LD_VAR 0 1
31830: PUSH
31831: LD_EXP 90
31835: IN
31836: NOT
31837: OR
31838: IFFALSE 31842
// exit ;
31840: GO 32164
// index := GetElementIndex ( minersList , unit ) ;
31842: LD_ADDR_VAR 0 6
31846: PUSH
31847: LD_EXP 90
31851: PPUSH
31852: LD_VAR 0 1
31856: PPUSH
31857: CALL 37499 0 2
31861: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31862: LD_ADDR_VAR 0 8
31866: PUSH
31867: LD_EXP 92
31871: PUSH
31872: LD_EXP 91
31876: PUSH
31877: LD_VAR 0 6
31881: ARRAY
31882: MINUS
31883: ST_TO_ADDR
// if not minesFreeAmount then
31884: LD_VAR 0 8
31888: NOT
31889: IFFALSE 31893
// exit ;
31891: GO 32164
// tmp := [ ] ;
31893: LD_ADDR_VAR 0 7
31897: PUSH
31898: EMPTY
31899: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31900: LD_ADDR_VAR 0 5
31904: PUSH
31905: DOUBLE
31906: LD_INT 1
31908: DEC
31909: ST_TO_ADDR
31910: LD_VAR 0 8
31914: PUSH
31915: FOR_TO
31916: IFFALSE 32111
// begin _d := rand ( 0 , 5 ) ;
31918: LD_ADDR_VAR 0 11
31922: PUSH
31923: LD_INT 0
31925: PPUSH
31926: LD_INT 5
31928: PPUSH
31929: CALL_OW 12
31933: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31934: LD_ADDR_VAR 0 12
31938: PUSH
31939: LD_INT 2
31941: PPUSH
31942: LD_INT 6
31944: PPUSH
31945: CALL_OW 12
31949: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31950: LD_ADDR_VAR 0 9
31954: PUSH
31955: LD_VAR 0 2
31959: PPUSH
31960: LD_VAR 0 11
31964: PPUSH
31965: LD_VAR 0 12
31969: PPUSH
31970: CALL_OW 272
31974: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31975: LD_ADDR_VAR 0 10
31979: PUSH
31980: LD_VAR 0 3
31984: PPUSH
31985: LD_VAR 0 11
31989: PPUSH
31990: LD_VAR 0 12
31994: PPUSH
31995: CALL_OW 273
31999: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32000: LD_VAR 0 9
32004: PPUSH
32005: LD_VAR 0 10
32009: PPUSH
32010: CALL_OW 488
32014: PUSH
32015: LD_VAR 0 9
32019: PUSH
32020: LD_VAR 0 10
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_VAR 0 7
32033: IN
32034: NOT
32035: AND
32036: PUSH
32037: LD_VAR 0 9
32041: PPUSH
32042: LD_VAR 0 10
32046: PPUSH
32047: CALL_OW 458
32051: NOT
32052: AND
32053: IFFALSE 32095
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32055: LD_ADDR_VAR 0 7
32059: PUSH
32060: LD_VAR 0 7
32064: PPUSH
32065: LD_VAR 0 7
32069: PUSH
32070: LD_INT 1
32072: PLUS
32073: PPUSH
32074: LD_VAR 0 9
32078: PUSH
32079: LD_VAR 0 10
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PPUSH
32088: CALL_OW 1
32092: ST_TO_ADDR
32093: GO 32109
// i := i - 1 ;
32095: LD_ADDR_VAR 0 5
32099: PUSH
32100: LD_VAR 0 5
32104: PUSH
32105: LD_INT 1
32107: MINUS
32108: ST_TO_ADDR
// end ;
32109: GO 31915
32111: POP
32112: POP
// for i in tmp do
32113: LD_ADDR_VAR 0 5
32117: PUSH
32118: LD_VAR 0 7
32122: PUSH
32123: FOR_IN
32124: IFFALSE 32162
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32126: LD_VAR 0 1
32130: PPUSH
32131: LD_VAR 0 5
32135: PUSH
32136: LD_INT 1
32138: ARRAY
32139: PPUSH
32140: LD_VAR 0 5
32144: PUSH
32145: LD_INT 2
32147: ARRAY
32148: PPUSH
32149: CALL 31108 0 3
32153: NOT
32154: IFFALSE 32160
// exit ;
32156: POP
32157: POP
32158: GO 32164
32160: GO 32123
32162: POP
32163: POP
// end ;
32164: LD_VAR 0 4
32168: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32169: LD_INT 0
32171: PPUSH
32172: PPUSH
32173: PPUSH
32174: PPUSH
32175: PPUSH
32176: PPUSH
32177: PPUSH
32178: PPUSH
32179: PPUSH
// if GetClass ( unit ) <> class_sniper then
32180: LD_VAR 0 1
32184: PPUSH
32185: CALL_OW 257
32189: PUSH
32190: LD_INT 5
32192: NONEQUAL
32193: IFFALSE 32197
// exit ;
32195: GO 32663
// dist := 8 ;
32197: LD_ADDR_VAR 0 5
32201: PUSH
32202: LD_INT 8
32204: ST_TO_ADDR
// viewRange := 12 ;
32205: LD_ADDR_VAR 0 8
32209: PUSH
32210: LD_INT 12
32212: ST_TO_ADDR
// side := GetSide ( unit ) ;
32213: LD_ADDR_VAR 0 6
32217: PUSH
32218: LD_VAR 0 1
32222: PPUSH
32223: CALL_OW 255
32227: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32228: LD_INT 61
32230: PPUSH
32231: LD_VAR 0 6
32235: PPUSH
32236: CALL_OW 321
32240: PUSH
32241: LD_INT 2
32243: EQUAL
32244: IFFALSE 32254
// viewRange := 16 ;
32246: LD_ADDR_VAR 0 8
32250: PUSH
32251: LD_INT 16
32253: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32254: LD_VAR 0 1
32258: PPUSH
32259: LD_VAR 0 2
32263: PPUSH
32264: LD_VAR 0 3
32268: PPUSH
32269: CALL_OW 297
32273: PUSH
32274: LD_VAR 0 5
32278: GREATER
32279: IFFALSE 32358
// begin ComMoveXY ( unit , x , y ) ;
32281: LD_VAR 0 1
32285: PPUSH
32286: LD_VAR 0 2
32290: PPUSH
32291: LD_VAR 0 3
32295: PPUSH
32296: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32300: LD_INT 35
32302: PPUSH
32303: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32307: LD_VAR 0 1
32311: PPUSH
32312: LD_VAR 0 2
32316: PPUSH
32317: LD_VAR 0 3
32321: PPUSH
32322: CALL 69260 0 3
32326: NOT
32327: IFFALSE 32331
// exit ;
32329: GO 32663
// until GetDistUnitXY ( unit , x , y ) < dist ;
32331: LD_VAR 0 1
32335: PPUSH
32336: LD_VAR 0 2
32340: PPUSH
32341: LD_VAR 0 3
32345: PPUSH
32346: CALL_OW 297
32350: PUSH
32351: LD_VAR 0 5
32355: LESS
32356: IFFALSE 32300
// end ; ComTurnXY ( unit , x , y ) ;
32358: LD_VAR 0 1
32362: PPUSH
32363: LD_VAR 0 2
32367: PPUSH
32368: LD_VAR 0 3
32372: PPUSH
32373: CALL_OW 118
// repeat if Multiplayer then
32377: LD_OWVAR 4
32381: IFFALSE 32392
// wait ( 35 ) else
32383: LD_INT 35
32385: PPUSH
32386: CALL_OW 67
32390: GO 32399
// wait ( 5 ) ;
32392: LD_INT 5
32394: PPUSH
32395: CALL_OW 67
// _d := GetDir ( unit ) ;
32399: LD_ADDR_VAR 0 11
32403: PUSH
32404: LD_VAR 0 1
32408: PPUSH
32409: CALL_OW 254
32413: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32414: LD_ADDR_VAR 0 7
32418: PUSH
32419: LD_VAR 0 1
32423: PPUSH
32424: CALL_OW 250
32428: PPUSH
32429: LD_VAR 0 1
32433: PPUSH
32434: CALL_OW 251
32438: PPUSH
32439: LD_VAR 0 2
32443: PPUSH
32444: LD_VAR 0 3
32448: PPUSH
32449: CALL 71868 0 4
32453: ST_TO_ADDR
// until dir = _d ;
32454: LD_VAR 0 7
32458: PUSH
32459: LD_VAR 0 11
32463: EQUAL
32464: IFFALSE 32377
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32466: LD_ADDR_VAR 0 9
32470: PUSH
32471: LD_VAR 0 1
32475: PPUSH
32476: CALL_OW 250
32480: PPUSH
32481: LD_VAR 0 7
32485: PPUSH
32486: LD_VAR 0 5
32490: PPUSH
32491: CALL_OW 272
32495: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32496: LD_ADDR_VAR 0 10
32500: PUSH
32501: LD_VAR 0 1
32505: PPUSH
32506: CALL_OW 251
32510: PPUSH
32511: LD_VAR 0 7
32515: PPUSH
32516: LD_VAR 0 5
32520: PPUSH
32521: CALL_OW 273
32525: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32526: LD_VAR 0 9
32530: PPUSH
32531: LD_VAR 0 10
32535: PPUSH
32536: CALL_OW 488
32540: NOT
32541: IFFALSE 32545
// exit ;
32543: GO 32663
// ComAnimCustom ( unit , 1 ) ;
32545: LD_VAR 0 1
32549: PPUSH
32550: LD_INT 1
32552: PPUSH
32553: CALL_OW 592
// p := 0 ;
32557: LD_ADDR_VAR 0 12
32561: PUSH
32562: LD_INT 0
32564: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32565: LD_VAR 0 9
32569: PPUSH
32570: LD_VAR 0 10
32574: PPUSH
32575: LD_VAR 0 6
32579: PPUSH
32580: LD_VAR 0 8
32584: PPUSH
32585: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32589: LD_INT 35
32591: PPUSH
32592: CALL_OW 67
// p := Inc ( p ) ;
32596: LD_ADDR_VAR 0 12
32600: PUSH
32601: LD_VAR 0 12
32605: PPUSH
32606: CALL 71824 0 1
32610: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32611: LD_VAR 0 12
32615: PUSH
32616: LD_INT 3
32618: EQUAL
32619: PUSH
32620: LD_VAR 0 1
32624: PPUSH
32625: CALL_OW 302
32629: NOT
32630: OR
32631: PUSH
32632: LD_VAR 0 1
32636: PPUSH
32637: CALL_OW 301
32641: OR
32642: IFFALSE 32589
// RemoveSeeing ( _x , _y , side ) ;
32644: LD_VAR 0 9
32648: PPUSH
32649: LD_VAR 0 10
32653: PPUSH
32654: LD_VAR 0 6
32658: PPUSH
32659: CALL_OW 331
// end ; end_of_file
32663: LD_VAR 0 4
32667: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32668: LD_INT 0
32670: PPUSH
32671: PPUSH
// if exist_mode then
32672: LD_VAR 0 2
32676: IFFALSE 32722
// begin unit := CreateCharacter ( prefix & ident ) ;
32678: LD_ADDR_VAR 0 5
32682: PUSH
32683: LD_VAR 0 3
32687: PUSH
32688: LD_VAR 0 1
32692: STR
32693: PPUSH
32694: CALL_OW 34
32698: ST_TO_ADDR
// if unit then
32699: LD_VAR 0 5
32703: IFFALSE 32720
// DeleteCharacters ( prefix & ident ) ;
32705: LD_VAR 0 3
32709: PUSH
32710: LD_VAR 0 1
32714: STR
32715: PPUSH
32716: CALL_OW 40
// end else
32720: GO 32737
// unit := NewCharacter ( ident ) ;
32722: LD_ADDR_VAR 0 5
32726: PUSH
32727: LD_VAR 0 1
32731: PPUSH
32732: CALL_OW 25
32736: ST_TO_ADDR
// result := unit ;
32737: LD_ADDR_VAR 0 4
32741: PUSH
32742: LD_VAR 0 5
32746: ST_TO_ADDR
// end ;
32747: LD_VAR 0 4
32751: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
32752: LD_INT 0
32754: PPUSH
32755: PPUSH
// if exist_mode then
32756: LD_VAR 0 2
32760: IFFALSE 32785
// unit := CreateCharacter ( prefix & ident ) else
32762: LD_ADDR_VAR 0 5
32766: PUSH
32767: LD_VAR 0 3
32771: PUSH
32772: LD_VAR 0 1
32776: STR
32777: PPUSH
32778: CALL_OW 34
32782: ST_TO_ADDR
32783: GO 32800
// unit := NewCharacter ( ident ) ;
32785: LD_ADDR_VAR 0 5
32789: PUSH
32790: LD_VAR 0 1
32794: PPUSH
32795: CALL_OW 25
32799: ST_TO_ADDR
// result := unit ;
32800: LD_ADDR_VAR 0 4
32804: PUSH
32805: LD_VAR 0 5
32809: ST_TO_ADDR
// end ;
32810: LD_VAR 0 4
32814: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32815: LD_INT 0
32817: PPUSH
32818: PPUSH
// if not side or not nation then
32819: LD_VAR 0 1
32823: NOT
32824: PUSH
32825: LD_VAR 0 2
32829: NOT
32830: OR
32831: IFFALSE 32835
// exit ;
32833: GO 33603
// case nation of nation_american :
32835: LD_VAR 0 2
32839: PUSH
32840: LD_INT 1
32842: DOUBLE
32843: EQUAL
32844: IFTRUE 32848
32846: GO 33062
32848: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32849: LD_ADDR_VAR 0 4
32853: PUSH
32854: LD_INT 35
32856: PUSH
32857: LD_INT 45
32859: PUSH
32860: LD_INT 46
32862: PUSH
32863: LD_INT 47
32865: PUSH
32866: LD_INT 82
32868: PUSH
32869: LD_INT 83
32871: PUSH
32872: LD_INT 84
32874: PUSH
32875: LD_INT 85
32877: PUSH
32878: LD_INT 86
32880: PUSH
32881: LD_INT 1
32883: PUSH
32884: LD_INT 2
32886: PUSH
32887: LD_INT 6
32889: PUSH
32890: LD_INT 15
32892: PUSH
32893: LD_INT 16
32895: PUSH
32896: LD_INT 7
32898: PUSH
32899: LD_INT 12
32901: PUSH
32902: LD_INT 13
32904: PUSH
32905: LD_INT 10
32907: PUSH
32908: LD_INT 14
32910: PUSH
32911: LD_INT 20
32913: PUSH
32914: LD_INT 21
32916: PUSH
32917: LD_INT 22
32919: PUSH
32920: LD_INT 25
32922: PUSH
32923: LD_INT 32
32925: PUSH
32926: LD_INT 27
32928: PUSH
32929: LD_INT 36
32931: PUSH
32932: LD_INT 69
32934: PUSH
32935: LD_INT 39
32937: PUSH
32938: LD_INT 34
32940: PUSH
32941: LD_INT 40
32943: PUSH
32944: LD_INT 48
32946: PUSH
32947: LD_INT 49
32949: PUSH
32950: LD_INT 50
32952: PUSH
32953: LD_INT 51
32955: PUSH
32956: LD_INT 52
32958: PUSH
32959: LD_INT 53
32961: PUSH
32962: LD_INT 54
32964: PUSH
32965: LD_INT 55
32967: PUSH
32968: LD_INT 56
32970: PUSH
32971: LD_INT 57
32973: PUSH
32974: LD_INT 58
32976: PUSH
32977: LD_INT 59
32979: PUSH
32980: LD_INT 60
32982: PUSH
32983: LD_INT 61
32985: PUSH
32986: LD_INT 62
32988: PUSH
32989: LD_INT 80
32991: PUSH
32992: LD_INT 82
32994: PUSH
32995: LD_INT 83
32997: PUSH
32998: LD_INT 84
33000: PUSH
33001: LD_INT 85
33003: PUSH
33004: LD_INT 86
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: ST_TO_ADDR
33060: GO 33527
33062: LD_INT 2
33064: DOUBLE
33065: EQUAL
33066: IFTRUE 33070
33068: GO 33296
33070: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33071: LD_ADDR_VAR 0 4
33075: PUSH
33076: LD_INT 35
33078: PUSH
33079: LD_INT 45
33081: PUSH
33082: LD_INT 46
33084: PUSH
33085: LD_INT 47
33087: PUSH
33088: LD_INT 82
33090: PUSH
33091: LD_INT 83
33093: PUSH
33094: LD_INT 84
33096: PUSH
33097: LD_INT 85
33099: PUSH
33100: LD_INT 87
33102: PUSH
33103: LD_INT 70
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: LD_INT 11
33111: PUSH
33112: LD_INT 3
33114: PUSH
33115: LD_INT 4
33117: PUSH
33118: LD_INT 5
33120: PUSH
33121: LD_INT 6
33123: PUSH
33124: LD_INT 15
33126: PUSH
33127: LD_INT 18
33129: PUSH
33130: LD_INT 7
33132: PUSH
33133: LD_INT 17
33135: PUSH
33136: LD_INT 8
33138: PUSH
33139: LD_INT 20
33141: PUSH
33142: LD_INT 21
33144: PUSH
33145: LD_INT 22
33147: PUSH
33148: LD_INT 72
33150: PUSH
33151: LD_INT 26
33153: PUSH
33154: LD_INT 69
33156: PUSH
33157: LD_INT 39
33159: PUSH
33160: LD_INT 40
33162: PUSH
33163: LD_INT 41
33165: PUSH
33166: LD_INT 42
33168: PUSH
33169: LD_INT 43
33171: PUSH
33172: LD_INT 48
33174: PUSH
33175: LD_INT 49
33177: PUSH
33178: LD_INT 50
33180: PUSH
33181: LD_INT 51
33183: PUSH
33184: LD_INT 52
33186: PUSH
33187: LD_INT 53
33189: PUSH
33190: LD_INT 54
33192: PUSH
33193: LD_INT 55
33195: PUSH
33196: LD_INT 56
33198: PUSH
33199: LD_INT 60
33201: PUSH
33202: LD_INT 61
33204: PUSH
33205: LD_INT 62
33207: PUSH
33208: LD_INT 66
33210: PUSH
33211: LD_INT 67
33213: PUSH
33214: LD_INT 68
33216: PUSH
33217: LD_INT 81
33219: PUSH
33220: LD_INT 82
33222: PUSH
33223: LD_INT 83
33225: PUSH
33226: LD_INT 84
33228: PUSH
33229: LD_INT 85
33231: PUSH
33232: LD_INT 87
33234: PUSH
33235: LD_INT 88
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: ST_TO_ADDR
33294: GO 33527
33296: LD_INT 3
33298: DOUBLE
33299: EQUAL
33300: IFTRUE 33304
33302: GO 33526
33304: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33305: LD_ADDR_VAR 0 4
33309: PUSH
33310: LD_INT 46
33312: PUSH
33313: LD_INT 47
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: LD_INT 2
33321: PUSH
33322: LD_INT 82
33324: PUSH
33325: LD_INT 83
33327: PUSH
33328: LD_INT 84
33330: PUSH
33331: LD_INT 85
33333: PUSH
33334: LD_INT 86
33336: PUSH
33337: LD_INT 11
33339: PUSH
33340: LD_INT 9
33342: PUSH
33343: LD_INT 20
33345: PUSH
33346: LD_INT 19
33348: PUSH
33349: LD_INT 21
33351: PUSH
33352: LD_INT 24
33354: PUSH
33355: LD_INT 22
33357: PUSH
33358: LD_INT 25
33360: PUSH
33361: LD_INT 28
33363: PUSH
33364: LD_INT 29
33366: PUSH
33367: LD_INT 30
33369: PUSH
33370: LD_INT 31
33372: PUSH
33373: LD_INT 37
33375: PUSH
33376: LD_INT 38
33378: PUSH
33379: LD_INT 32
33381: PUSH
33382: LD_INT 27
33384: PUSH
33385: LD_INT 33
33387: PUSH
33388: LD_INT 69
33390: PUSH
33391: LD_INT 39
33393: PUSH
33394: LD_INT 34
33396: PUSH
33397: LD_INT 40
33399: PUSH
33400: LD_INT 71
33402: PUSH
33403: LD_INT 23
33405: PUSH
33406: LD_INT 44
33408: PUSH
33409: LD_INT 48
33411: PUSH
33412: LD_INT 49
33414: PUSH
33415: LD_INT 50
33417: PUSH
33418: LD_INT 51
33420: PUSH
33421: LD_INT 52
33423: PUSH
33424: LD_INT 53
33426: PUSH
33427: LD_INT 54
33429: PUSH
33430: LD_INT 55
33432: PUSH
33433: LD_INT 56
33435: PUSH
33436: LD_INT 57
33438: PUSH
33439: LD_INT 58
33441: PUSH
33442: LD_INT 59
33444: PUSH
33445: LD_INT 63
33447: PUSH
33448: LD_INT 64
33450: PUSH
33451: LD_INT 65
33453: PUSH
33454: LD_INT 82
33456: PUSH
33457: LD_INT 83
33459: PUSH
33460: LD_INT 84
33462: PUSH
33463: LD_INT 85
33465: PUSH
33466: LD_INT 86
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: ST_TO_ADDR
33524: GO 33527
33526: POP
// if state > - 1 and state < 3 then
33527: LD_VAR 0 3
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: GREATER
33536: PUSH
33537: LD_VAR 0 3
33541: PUSH
33542: LD_INT 3
33544: LESS
33545: AND
33546: IFFALSE 33603
// for i in result do
33548: LD_ADDR_VAR 0 5
33552: PUSH
33553: LD_VAR 0 4
33557: PUSH
33558: FOR_IN
33559: IFFALSE 33601
// if GetTech ( i , side ) <> state then
33561: LD_VAR 0 5
33565: PPUSH
33566: LD_VAR 0 1
33570: PPUSH
33571: CALL_OW 321
33575: PUSH
33576: LD_VAR 0 3
33580: NONEQUAL
33581: IFFALSE 33599
// result := result diff i ;
33583: LD_ADDR_VAR 0 4
33587: PUSH
33588: LD_VAR 0 4
33592: PUSH
33593: LD_VAR 0 5
33597: DIFF
33598: ST_TO_ADDR
33599: GO 33558
33601: POP
33602: POP
// end ;
33603: LD_VAR 0 4
33607: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33608: LD_INT 0
33610: PPUSH
33611: PPUSH
33612: PPUSH
// result := true ;
33613: LD_ADDR_VAR 0 3
33617: PUSH
33618: LD_INT 1
33620: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33621: LD_ADDR_VAR 0 5
33625: PUSH
33626: LD_VAR 0 2
33630: PPUSH
33631: CALL_OW 480
33635: ST_TO_ADDR
// if not tmp then
33636: LD_VAR 0 5
33640: NOT
33641: IFFALSE 33645
// exit ;
33643: GO 33694
// for i in tmp do
33645: LD_ADDR_VAR 0 4
33649: PUSH
33650: LD_VAR 0 5
33654: PUSH
33655: FOR_IN
33656: IFFALSE 33692
// if GetTech ( i , side ) <> state_researched then
33658: LD_VAR 0 4
33662: PPUSH
33663: LD_VAR 0 1
33667: PPUSH
33668: CALL_OW 321
33672: PUSH
33673: LD_INT 2
33675: NONEQUAL
33676: IFFALSE 33690
// begin result := false ;
33678: LD_ADDR_VAR 0 3
33682: PUSH
33683: LD_INT 0
33685: ST_TO_ADDR
// exit ;
33686: POP
33687: POP
33688: GO 33694
// end ;
33690: GO 33655
33692: POP
33693: POP
// end ;
33694: LD_VAR 0 3
33698: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33699: LD_INT 0
33701: PPUSH
33702: PPUSH
33703: PPUSH
33704: PPUSH
33705: PPUSH
33706: PPUSH
33707: PPUSH
33708: PPUSH
33709: PPUSH
33710: PPUSH
33711: PPUSH
33712: PPUSH
33713: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33714: LD_VAR 0 1
33718: NOT
33719: PUSH
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL_OW 257
33729: PUSH
33730: LD_INT 9
33732: NONEQUAL
33733: OR
33734: IFFALSE 33738
// exit ;
33736: GO 34311
// side := GetSide ( unit ) ;
33738: LD_ADDR_VAR 0 9
33742: PUSH
33743: LD_VAR 0 1
33747: PPUSH
33748: CALL_OW 255
33752: ST_TO_ADDR
// tech_space := tech_spacanom ;
33753: LD_ADDR_VAR 0 12
33757: PUSH
33758: LD_INT 29
33760: ST_TO_ADDR
// tech_time := tech_taurad ;
33761: LD_ADDR_VAR 0 13
33765: PUSH
33766: LD_INT 28
33768: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33769: LD_ADDR_VAR 0 11
33773: PUSH
33774: LD_VAR 0 1
33778: PPUSH
33779: CALL_OW 310
33783: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33784: LD_VAR 0 11
33788: PPUSH
33789: CALL_OW 247
33793: PUSH
33794: LD_INT 2
33796: EQUAL
33797: IFFALSE 33801
// exit ;
33799: GO 34311
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33801: LD_ADDR_VAR 0 8
33805: PUSH
33806: LD_INT 81
33808: PUSH
33809: LD_VAR 0 9
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 3
33820: PUSH
33821: LD_INT 21
33823: PUSH
33824: LD_INT 3
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PPUSH
33839: CALL_OW 69
33843: ST_TO_ADDR
// if not tmp then
33844: LD_VAR 0 8
33848: NOT
33849: IFFALSE 33853
// exit ;
33851: GO 34311
// if in_unit then
33853: LD_VAR 0 11
33857: IFFALSE 33881
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33859: LD_ADDR_VAR 0 10
33863: PUSH
33864: LD_VAR 0 8
33868: PPUSH
33869: LD_VAR 0 11
33873: PPUSH
33874: CALL_OW 74
33878: ST_TO_ADDR
33879: GO 33901
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33881: LD_ADDR_VAR 0 10
33885: PUSH
33886: LD_VAR 0 8
33890: PPUSH
33891: LD_VAR 0 1
33895: PPUSH
33896: CALL_OW 74
33900: ST_TO_ADDR
// if not enemy then
33901: LD_VAR 0 10
33905: NOT
33906: IFFALSE 33910
// exit ;
33908: GO 34311
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33910: LD_VAR 0 11
33914: PUSH
33915: LD_VAR 0 11
33919: PPUSH
33920: LD_VAR 0 10
33924: PPUSH
33925: CALL_OW 296
33929: PUSH
33930: LD_INT 13
33932: GREATER
33933: AND
33934: PUSH
33935: LD_VAR 0 1
33939: PPUSH
33940: LD_VAR 0 10
33944: PPUSH
33945: CALL_OW 296
33949: PUSH
33950: LD_INT 12
33952: GREATER
33953: OR
33954: IFFALSE 33958
// exit ;
33956: GO 34311
// missile := [ 1 ] ;
33958: LD_ADDR_VAR 0 14
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33969: LD_VAR 0 9
33973: PPUSH
33974: LD_VAR 0 12
33978: PPUSH
33979: CALL_OW 325
33983: IFFALSE 34012
// missile := Replace ( missile , missile + 1 , 2 ) ;
33985: LD_ADDR_VAR 0 14
33989: PUSH
33990: LD_VAR 0 14
33994: PPUSH
33995: LD_VAR 0 14
33999: PUSH
34000: LD_INT 1
34002: PLUS
34003: PPUSH
34004: LD_INT 2
34006: PPUSH
34007: CALL_OW 1
34011: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34012: LD_VAR 0 9
34016: PPUSH
34017: LD_VAR 0 13
34021: PPUSH
34022: CALL_OW 325
34026: PUSH
34027: LD_VAR 0 10
34031: PPUSH
34032: CALL_OW 255
34036: PPUSH
34037: LD_VAR 0 13
34041: PPUSH
34042: CALL_OW 325
34046: NOT
34047: AND
34048: IFFALSE 34077
// missile := Replace ( missile , missile + 1 , 3 ) ;
34050: LD_ADDR_VAR 0 14
34054: PUSH
34055: LD_VAR 0 14
34059: PPUSH
34060: LD_VAR 0 14
34064: PUSH
34065: LD_INT 1
34067: PLUS
34068: PPUSH
34069: LD_INT 3
34071: PPUSH
34072: CALL_OW 1
34076: ST_TO_ADDR
// if missile < 2 then
34077: LD_VAR 0 14
34081: PUSH
34082: LD_INT 2
34084: LESS
34085: IFFALSE 34089
// exit ;
34087: GO 34311
// x := GetX ( enemy ) ;
34089: LD_ADDR_VAR 0 4
34093: PUSH
34094: LD_VAR 0 10
34098: PPUSH
34099: CALL_OW 250
34103: ST_TO_ADDR
// y := GetY ( enemy ) ;
34104: LD_ADDR_VAR 0 5
34108: PUSH
34109: LD_VAR 0 10
34113: PPUSH
34114: CALL_OW 251
34118: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34119: LD_ADDR_VAR 0 6
34123: PUSH
34124: LD_VAR 0 4
34128: PUSH
34129: LD_INT 1
34131: NEG
34132: PPUSH
34133: LD_INT 1
34135: PPUSH
34136: CALL_OW 12
34140: PLUS
34141: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34142: LD_ADDR_VAR 0 7
34146: PUSH
34147: LD_VAR 0 5
34151: PUSH
34152: LD_INT 1
34154: NEG
34155: PPUSH
34156: LD_INT 1
34158: PPUSH
34159: CALL_OW 12
34163: PLUS
34164: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34165: LD_VAR 0 6
34169: PPUSH
34170: LD_VAR 0 7
34174: PPUSH
34175: CALL_OW 488
34179: NOT
34180: IFFALSE 34202
// begin _x := x ;
34182: LD_ADDR_VAR 0 6
34186: PUSH
34187: LD_VAR 0 4
34191: ST_TO_ADDR
// _y := y ;
34192: LD_ADDR_VAR 0 7
34196: PUSH
34197: LD_VAR 0 5
34201: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34202: LD_ADDR_VAR 0 3
34206: PUSH
34207: LD_INT 1
34209: PPUSH
34210: LD_VAR 0 14
34214: PPUSH
34215: CALL_OW 12
34219: ST_TO_ADDR
// case i of 1 :
34220: LD_VAR 0 3
34224: PUSH
34225: LD_INT 1
34227: DOUBLE
34228: EQUAL
34229: IFTRUE 34233
34231: GO 34250
34233: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34234: LD_VAR 0 1
34238: PPUSH
34239: LD_VAR 0 10
34243: PPUSH
34244: CALL_OW 115
34248: GO 34311
34250: LD_INT 2
34252: DOUBLE
34253: EQUAL
34254: IFTRUE 34258
34256: GO 34280
34258: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34259: LD_VAR 0 1
34263: PPUSH
34264: LD_VAR 0 6
34268: PPUSH
34269: LD_VAR 0 7
34273: PPUSH
34274: CALL_OW 153
34278: GO 34311
34280: LD_INT 3
34282: DOUBLE
34283: EQUAL
34284: IFTRUE 34288
34286: GO 34310
34288: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34289: LD_VAR 0 1
34293: PPUSH
34294: LD_VAR 0 6
34298: PPUSH
34299: LD_VAR 0 7
34303: PPUSH
34304: CALL_OW 154
34308: GO 34311
34310: POP
// end ;
34311: LD_VAR 0 2
34315: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34316: LD_INT 0
34318: PPUSH
34319: PPUSH
34320: PPUSH
34321: PPUSH
34322: PPUSH
34323: PPUSH
// if not unit or not building then
34324: LD_VAR 0 1
34328: NOT
34329: PUSH
34330: LD_VAR 0 2
34334: NOT
34335: OR
34336: IFFALSE 34340
// exit ;
34338: GO 34498
// x := GetX ( building ) ;
34340: LD_ADDR_VAR 0 5
34344: PUSH
34345: LD_VAR 0 2
34349: PPUSH
34350: CALL_OW 250
34354: ST_TO_ADDR
// y := GetY ( building ) ;
34355: LD_ADDR_VAR 0 6
34359: PUSH
34360: LD_VAR 0 2
34364: PPUSH
34365: CALL_OW 251
34369: ST_TO_ADDR
// for i = 0 to 5 do
34370: LD_ADDR_VAR 0 4
34374: PUSH
34375: DOUBLE
34376: LD_INT 0
34378: DEC
34379: ST_TO_ADDR
34380: LD_INT 5
34382: PUSH
34383: FOR_TO
34384: IFFALSE 34496
// begin _x := ShiftX ( x , i , 3 ) ;
34386: LD_ADDR_VAR 0 7
34390: PUSH
34391: LD_VAR 0 5
34395: PPUSH
34396: LD_VAR 0 4
34400: PPUSH
34401: LD_INT 3
34403: PPUSH
34404: CALL_OW 272
34408: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34409: LD_ADDR_VAR 0 8
34413: PUSH
34414: LD_VAR 0 6
34418: PPUSH
34419: LD_VAR 0 4
34423: PPUSH
34424: LD_INT 3
34426: PPUSH
34427: CALL_OW 273
34431: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34432: LD_VAR 0 7
34436: PPUSH
34437: LD_VAR 0 8
34441: PPUSH
34442: CALL_OW 488
34446: NOT
34447: IFFALSE 34451
// continue ;
34449: GO 34383
// if HexInfo ( _x , _y ) = 0 then
34451: LD_VAR 0 7
34455: PPUSH
34456: LD_VAR 0 8
34460: PPUSH
34461: CALL_OW 428
34465: PUSH
34466: LD_INT 0
34468: EQUAL
34469: IFFALSE 34494
// begin ComMoveXY ( unit , _x , _y ) ;
34471: LD_VAR 0 1
34475: PPUSH
34476: LD_VAR 0 7
34480: PPUSH
34481: LD_VAR 0 8
34485: PPUSH
34486: CALL_OW 111
// exit ;
34490: POP
34491: POP
34492: GO 34498
// end ; end ;
34494: GO 34383
34496: POP
34497: POP
// end ;
34498: LD_VAR 0 3
34502: RET
// export function ScanBase ( side , base_area ) ; begin
34503: LD_INT 0
34505: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34506: LD_ADDR_VAR 0 3
34510: PUSH
34511: LD_VAR 0 2
34515: PPUSH
34516: LD_INT 81
34518: PUSH
34519: LD_VAR 0 1
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PPUSH
34528: CALL_OW 70
34532: ST_TO_ADDR
// end ;
34533: LD_VAR 0 3
34537: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34538: LD_INT 0
34540: PPUSH
34541: PPUSH
34542: PPUSH
34543: PPUSH
// result := false ;
34544: LD_ADDR_VAR 0 2
34548: PUSH
34549: LD_INT 0
34551: ST_TO_ADDR
// side := GetSide ( unit ) ;
34552: LD_ADDR_VAR 0 3
34556: PUSH
34557: LD_VAR 0 1
34561: PPUSH
34562: CALL_OW 255
34566: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34567: LD_ADDR_VAR 0 4
34571: PUSH
34572: LD_VAR 0 1
34576: PPUSH
34577: CALL_OW 248
34581: ST_TO_ADDR
// case nat of 1 :
34582: LD_VAR 0 4
34586: PUSH
34587: LD_INT 1
34589: DOUBLE
34590: EQUAL
34591: IFTRUE 34595
34593: GO 34606
34595: POP
// tech := tech_lassight ; 2 :
34596: LD_ADDR_VAR 0 5
34600: PUSH
34601: LD_INT 12
34603: ST_TO_ADDR
34604: GO 34645
34606: LD_INT 2
34608: DOUBLE
34609: EQUAL
34610: IFTRUE 34614
34612: GO 34625
34614: POP
// tech := tech_mortar ; 3 :
34615: LD_ADDR_VAR 0 5
34619: PUSH
34620: LD_INT 41
34622: ST_TO_ADDR
34623: GO 34645
34625: LD_INT 3
34627: DOUBLE
34628: EQUAL
34629: IFTRUE 34633
34631: GO 34644
34633: POP
// tech := tech_bazooka ; end ;
34634: LD_ADDR_VAR 0 5
34638: PUSH
34639: LD_INT 44
34641: ST_TO_ADDR
34642: GO 34645
34644: POP
// if Researched ( side , tech ) then
34645: LD_VAR 0 3
34649: PPUSH
34650: LD_VAR 0 5
34654: PPUSH
34655: CALL_OW 325
34659: IFFALSE 34686
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34661: LD_ADDR_VAR 0 2
34665: PUSH
34666: LD_INT 5
34668: PUSH
34669: LD_INT 8
34671: PUSH
34672: LD_INT 9
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: LIST
34679: PUSH
34680: LD_VAR 0 4
34684: ARRAY
34685: ST_TO_ADDR
// end ;
34686: LD_VAR 0 2
34690: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34691: LD_INT 0
34693: PPUSH
34694: PPUSH
34695: PPUSH
// if not mines then
34696: LD_VAR 0 2
34700: NOT
34701: IFFALSE 34705
// exit ;
34703: GO 34849
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34705: LD_ADDR_VAR 0 5
34709: PUSH
34710: LD_INT 81
34712: PUSH
34713: LD_VAR 0 1
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 3
34724: PUSH
34725: LD_INT 21
34727: PUSH
34728: LD_INT 3
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PPUSH
34743: CALL_OW 69
34747: ST_TO_ADDR
// for i in mines do
34748: LD_ADDR_VAR 0 4
34752: PUSH
34753: LD_VAR 0 2
34757: PUSH
34758: FOR_IN
34759: IFFALSE 34847
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34761: LD_VAR 0 4
34765: PUSH
34766: LD_INT 1
34768: ARRAY
34769: PPUSH
34770: LD_VAR 0 4
34774: PUSH
34775: LD_INT 2
34777: ARRAY
34778: PPUSH
34779: CALL_OW 458
34783: NOT
34784: IFFALSE 34788
// continue ;
34786: GO 34758
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34788: LD_VAR 0 4
34792: PUSH
34793: LD_INT 1
34795: ARRAY
34796: PPUSH
34797: LD_VAR 0 4
34801: PUSH
34802: LD_INT 2
34804: ARRAY
34805: PPUSH
34806: CALL_OW 428
34810: PUSH
34811: LD_VAR 0 5
34815: IN
34816: IFFALSE 34845
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34818: LD_VAR 0 4
34822: PUSH
34823: LD_INT 1
34825: ARRAY
34826: PPUSH
34827: LD_VAR 0 4
34831: PUSH
34832: LD_INT 2
34834: ARRAY
34835: PPUSH
34836: LD_VAR 0 1
34840: PPUSH
34841: CALL_OW 456
// end ;
34845: GO 34758
34847: POP
34848: POP
// end ;
34849: LD_VAR 0 3
34853: RET
// export function Count ( array ) ; begin
34854: LD_INT 0
34856: PPUSH
// result := array + 0 ;
34857: LD_ADDR_VAR 0 2
34861: PUSH
34862: LD_VAR 0 1
34866: PUSH
34867: LD_INT 0
34869: PLUS
34870: ST_TO_ADDR
// end ;
34871: LD_VAR 0 2
34875: RET
// export function IsEmpty ( building ) ; begin
34876: LD_INT 0
34878: PPUSH
// if not building then
34879: LD_VAR 0 1
34883: NOT
34884: IFFALSE 34888
// exit ;
34886: GO 34931
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34888: LD_ADDR_VAR 0 2
34892: PUSH
34893: LD_VAR 0 1
34897: PUSH
34898: LD_INT 22
34900: PUSH
34901: LD_VAR 0 1
34905: PPUSH
34906: CALL_OW 255
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 58
34917: PUSH
34918: EMPTY
34919: LIST
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PPUSH
34925: CALL_OW 69
34929: IN
34930: ST_TO_ADDR
// end ;
34931: LD_VAR 0 2
34935: RET
// export function IsNotFull ( building ) ; var places ; begin
34936: LD_INT 0
34938: PPUSH
34939: PPUSH
// if not building then
34940: LD_VAR 0 1
34944: NOT
34945: IFFALSE 34949
// exit ;
34947: GO 34977
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34949: LD_ADDR_VAR 0 2
34953: PUSH
34954: LD_VAR 0 1
34958: PPUSH
34959: LD_INT 3
34961: PUSH
34962: LD_INT 62
34964: PUSH
34965: EMPTY
34966: LIST
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PPUSH
34972: CALL_OW 72
34976: ST_TO_ADDR
// end ;
34977: LD_VAR 0 2
34981: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34982: LD_INT 0
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
// tmp := [ ] ;
34988: LD_ADDR_VAR 0 3
34992: PUSH
34993: EMPTY
34994: ST_TO_ADDR
// list := [ ] ;
34995: LD_ADDR_VAR 0 5
34999: PUSH
35000: EMPTY
35001: ST_TO_ADDR
// for i = 16 to 25 do
35002: LD_ADDR_VAR 0 4
35006: PUSH
35007: DOUBLE
35008: LD_INT 16
35010: DEC
35011: ST_TO_ADDR
35012: LD_INT 25
35014: PUSH
35015: FOR_TO
35016: IFFALSE 35089
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35018: LD_ADDR_VAR 0 3
35022: PUSH
35023: LD_VAR 0 3
35027: PUSH
35028: LD_INT 22
35030: PUSH
35031: LD_VAR 0 1
35035: PPUSH
35036: CALL_OW 255
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 91
35047: PUSH
35048: LD_VAR 0 1
35052: PUSH
35053: LD_INT 6
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 30
35063: PUSH
35064: LD_VAR 0 4
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: LIST
35077: PUSH
35078: EMPTY
35079: LIST
35080: PPUSH
35081: CALL_OW 69
35085: ADD
35086: ST_TO_ADDR
35087: GO 35015
35089: POP
35090: POP
// for i = 1 to tmp do
35091: LD_ADDR_VAR 0 4
35095: PUSH
35096: DOUBLE
35097: LD_INT 1
35099: DEC
35100: ST_TO_ADDR
35101: LD_VAR 0 3
35105: PUSH
35106: FOR_TO
35107: IFFALSE 35195
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35109: LD_ADDR_VAR 0 5
35113: PUSH
35114: LD_VAR 0 5
35118: PUSH
35119: LD_VAR 0 3
35123: PUSH
35124: LD_VAR 0 4
35128: ARRAY
35129: PPUSH
35130: CALL_OW 266
35134: PUSH
35135: LD_VAR 0 3
35139: PUSH
35140: LD_VAR 0 4
35144: ARRAY
35145: PPUSH
35146: CALL_OW 250
35150: PUSH
35151: LD_VAR 0 3
35155: PUSH
35156: LD_VAR 0 4
35160: ARRAY
35161: PPUSH
35162: CALL_OW 251
35166: PUSH
35167: LD_VAR 0 3
35171: PUSH
35172: LD_VAR 0 4
35176: ARRAY
35177: PPUSH
35178: CALL_OW 254
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: PUSH
35189: EMPTY
35190: LIST
35191: ADD
35192: ST_TO_ADDR
35193: GO 35106
35195: POP
35196: POP
// result := list ;
35197: LD_ADDR_VAR 0 2
35201: PUSH
35202: LD_VAR 0 5
35206: ST_TO_ADDR
// end ;
35207: LD_VAR 0 2
35211: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35212: LD_INT 0
35214: PPUSH
35215: PPUSH
35216: PPUSH
35217: PPUSH
35218: PPUSH
35219: PPUSH
35220: PPUSH
// if not factory then
35221: LD_VAR 0 1
35225: NOT
35226: IFFALSE 35230
// exit ;
35228: GO 35823
// if control = control_apeman then
35230: LD_VAR 0 4
35234: PUSH
35235: LD_INT 5
35237: EQUAL
35238: IFFALSE 35347
// begin tmp := UnitsInside ( factory ) ;
35240: LD_ADDR_VAR 0 8
35244: PUSH
35245: LD_VAR 0 1
35249: PPUSH
35250: CALL_OW 313
35254: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35255: LD_VAR 0 8
35259: PPUSH
35260: LD_INT 25
35262: PUSH
35263: LD_INT 12
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PPUSH
35270: CALL_OW 72
35274: NOT
35275: IFFALSE 35285
// control := control_manual ;
35277: LD_ADDR_VAR 0 4
35281: PUSH
35282: LD_INT 1
35284: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35285: LD_ADDR_VAR 0 8
35289: PUSH
35290: LD_VAR 0 1
35294: PPUSH
35295: CALL 34982 0 1
35299: ST_TO_ADDR
// if tmp then
35300: LD_VAR 0 8
35304: IFFALSE 35347
// begin for i in tmp do
35306: LD_ADDR_VAR 0 7
35310: PUSH
35311: LD_VAR 0 8
35315: PUSH
35316: FOR_IN
35317: IFFALSE 35345
// if i [ 1 ] = b_ext_radio then
35319: LD_VAR 0 7
35323: PUSH
35324: LD_INT 1
35326: ARRAY
35327: PUSH
35328: LD_INT 22
35330: EQUAL
35331: IFFALSE 35343
// begin control := control_remote ;
35333: LD_ADDR_VAR 0 4
35337: PUSH
35338: LD_INT 2
35340: ST_TO_ADDR
// break ;
35341: GO 35345
// end ;
35343: GO 35316
35345: POP
35346: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35347: LD_VAR 0 1
35351: PPUSH
35352: LD_VAR 0 2
35356: PPUSH
35357: LD_VAR 0 3
35361: PPUSH
35362: LD_VAR 0 4
35366: PPUSH
35367: LD_VAR 0 5
35371: PPUSH
35372: CALL_OW 448
35376: IFFALSE 35411
// begin result := [ chassis , engine , control , weapon ] ;
35378: LD_ADDR_VAR 0 6
35382: PUSH
35383: LD_VAR 0 2
35387: PUSH
35388: LD_VAR 0 3
35392: PUSH
35393: LD_VAR 0 4
35397: PUSH
35398: LD_VAR 0 5
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: ST_TO_ADDR
// exit ;
35409: GO 35823
// end ; _chassis := AvailableChassisList ( factory ) ;
35411: LD_ADDR_VAR 0 9
35415: PUSH
35416: LD_VAR 0 1
35420: PPUSH
35421: CALL_OW 475
35425: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35426: LD_ADDR_VAR 0 11
35430: PUSH
35431: LD_VAR 0 1
35435: PPUSH
35436: CALL_OW 476
35440: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35441: LD_ADDR_VAR 0 12
35445: PUSH
35446: LD_VAR 0 1
35450: PPUSH
35451: CALL_OW 477
35455: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35456: LD_ADDR_VAR 0 10
35460: PUSH
35461: LD_VAR 0 1
35465: PPUSH
35466: CALL_OW 478
35470: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35471: LD_VAR 0 9
35475: NOT
35476: PUSH
35477: LD_VAR 0 11
35481: NOT
35482: OR
35483: PUSH
35484: LD_VAR 0 12
35488: NOT
35489: OR
35490: PUSH
35491: LD_VAR 0 10
35495: NOT
35496: OR
35497: IFFALSE 35532
// begin result := [ chassis , engine , control , weapon ] ;
35499: LD_ADDR_VAR 0 6
35503: PUSH
35504: LD_VAR 0 2
35508: PUSH
35509: LD_VAR 0 3
35513: PUSH
35514: LD_VAR 0 4
35518: PUSH
35519: LD_VAR 0 5
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: ST_TO_ADDR
// exit ;
35530: GO 35823
// end ; if not chassis in _chassis then
35532: LD_VAR 0 2
35536: PUSH
35537: LD_VAR 0 9
35541: IN
35542: NOT
35543: IFFALSE 35569
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35545: LD_ADDR_VAR 0 2
35549: PUSH
35550: LD_VAR 0 9
35554: PUSH
35555: LD_INT 1
35557: PPUSH
35558: LD_VAR 0 9
35562: PPUSH
35563: CALL_OW 12
35567: ARRAY
35568: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35569: LD_VAR 0 2
35573: PPUSH
35574: LD_VAR 0 3
35578: PPUSH
35579: CALL 35828 0 2
35583: NOT
35584: IFFALSE 35643
// repeat engine := _engine [ 1 ] ;
35586: LD_ADDR_VAR 0 3
35590: PUSH
35591: LD_VAR 0 11
35595: PUSH
35596: LD_INT 1
35598: ARRAY
35599: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35600: LD_ADDR_VAR 0 11
35604: PUSH
35605: LD_VAR 0 11
35609: PPUSH
35610: LD_INT 1
35612: PPUSH
35613: CALL_OW 3
35617: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35618: LD_VAR 0 2
35622: PPUSH
35623: LD_VAR 0 3
35627: PPUSH
35628: CALL 35828 0 2
35632: PUSH
35633: LD_VAR 0 11
35637: PUSH
35638: EMPTY
35639: EQUAL
35640: OR
35641: IFFALSE 35586
// if not control in _control then
35643: LD_VAR 0 4
35647: PUSH
35648: LD_VAR 0 12
35652: IN
35653: NOT
35654: IFFALSE 35680
// control := _control [ rand ( 1 , _control ) ] ;
35656: LD_ADDR_VAR 0 4
35660: PUSH
35661: LD_VAR 0 12
35665: PUSH
35666: LD_INT 1
35668: PPUSH
35669: LD_VAR 0 12
35673: PPUSH
35674: CALL_OW 12
35678: ARRAY
35679: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35680: LD_VAR 0 2
35684: PPUSH
35685: LD_VAR 0 5
35689: PPUSH
35690: CALL 36048 0 2
35694: NOT
35695: IFFALSE 35754
// repeat weapon := _weapon [ 1 ] ;
35697: LD_ADDR_VAR 0 5
35701: PUSH
35702: LD_VAR 0 10
35706: PUSH
35707: LD_INT 1
35709: ARRAY
35710: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35711: LD_ADDR_VAR 0 10
35715: PUSH
35716: LD_VAR 0 10
35720: PPUSH
35721: LD_INT 1
35723: PPUSH
35724: CALL_OW 3
35728: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35729: LD_VAR 0 2
35733: PPUSH
35734: LD_VAR 0 5
35738: PPUSH
35739: CALL 36048 0 2
35743: PUSH
35744: LD_VAR 0 10
35748: PUSH
35749: EMPTY
35750: EQUAL
35751: OR
35752: IFFALSE 35697
// result := [ ] ;
35754: LD_ADDR_VAR 0 6
35758: PUSH
35759: EMPTY
35760: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35761: LD_VAR 0 1
35765: PPUSH
35766: LD_VAR 0 2
35770: PPUSH
35771: LD_VAR 0 3
35775: PPUSH
35776: LD_VAR 0 4
35780: PPUSH
35781: LD_VAR 0 5
35785: PPUSH
35786: CALL_OW 448
35790: IFFALSE 35823
// result := [ chassis , engine , control , weapon ] ;
35792: LD_ADDR_VAR 0 6
35796: PUSH
35797: LD_VAR 0 2
35801: PUSH
35802: LD_VAR 0 3
35806: PUSH
35807: LD_VAR 0 4
35811: PUSH
35812: LD_VAR 0 5
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: ST_TO_ADDR
// end ;
35823: LD_VAR 0 6
35827: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35828: LD_INT 0
35830: PPUSH
// if not chassis or not engine then
35831: LD_VAR 0 1
35835: NOT
35836: PUSH
35837: LD_VAR 0 2
35841: NOT
35842: OR
35843: IFFALSE 35847
// exit ;
35845: GO 36043
// case engine of engine_solar :
35847: LD_VAR 0 2
35851: PUSH
35852: LD_INT 2
35854: DOUBLE
35855: EQUAL
35856: IFTRUE 35860
35858: GO 35898
35860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35861: LD_ADDR_VAR 0 3
35865: PUSH
35866: LD_INT 11
35868: PUSH
35869: LD_INT 12
35871: PUSH
35872: LD_INT 13
35874: PUSH
35875: LD_INT 14
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: LD_INT 2
35883: PUSH
35884: LD_INT 3
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: ST_TO_ADDR
35896: GO 36027
35898: LD_INT 1
35900: DOUBLE
35901: EQUAL
35902: IFTRUE 35906
35904: GO 35968
35906: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35907: LD_ADDR_VAR 0 3
35911: PUSH
35912: LD_INT 11
35914: PUSH
35915: LD_INT 12
35917: PUSH
35918: LD_INT 13
35920: PUSH
35921: LD_INT 14
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: LD_INT 2
35929: PUSH
35930: LD_INT 3
35932: PUSH
35933: LD_INT 4
35935: PUSH
35936: LD_INT 5
35938: PUSH
35939: LD_INT 21
35941: PUSH
35942: LD_INT 23
35944: PUSH
35945: LD_INT 22
35947: PUSH
35948: LD_INT 24
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: ST_TO_ADDR
35966: GO 36027
35968: LD_INT 3
35970: DOUBLE
35971: EQUAL
35972: IFTRUE 35976
35974: GO 36026
35976: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35977: LD_ADDR_VAR 0 3
35981: PUSH
35982: LD_INT 13
35984: PUSH
35985: LD_INT 14
35987: PUSH
35988: LD_INT 2
35990: PUSH
35991: LD_INT 3
35993: PUSH
35994: LD_INT 4
35996: PUSH
35997: LD_INT 5
35999: PUSH
36000: LD_INT 21
36002: PUSH
36003: LD_INT 22
36005: PUSH
36006: LD_INT 23
36008: PUSH
36009: LD_INT 24
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: ST_TO_ADDR
36024: GO 36027
36026: POP
// result := ( chassis in result ) ;
36027: LD_ADDR_VAR 0 3
36031: PUSH
36032: LD_VAR 0 1
36036: PUSH
36037: LD_VAR 0 3
36041: IN
36042: ST_TO_ADDR
// end ;
36043: LD_VAR 0 3
36047: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36048: LD_INT 0
36050: PPUSH
// if not chassis or not weapon then
36051: LD_VAR 0 1
36055: NOT
36056: PUSH
36057: LD_VAR 0 2
36061: NOT
36062: OR
36063: IFFALSE 36067
// exit ;
36065: GO 37127
// case weapon of us_machine_gun :
36067: LD_VAR 0 2
36071: PUSH
36072: LD_INT 2
36074: DOUBLE
36075: EQUAL
36076: IFTRUE 36080
36078: GO 36110
36080: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36081: LD_ADDR_VAR 0 3
36085: PUSH
36086: LD_INT 1
36088: PUSH
36089: LD_INT 2
36091: PUSH
36092: LD_INT 3
36094: PUSH
36095: LD_INT 4
36097: PUSH
36098: LD_INT 5
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: ST_TO_ADDR
36108: GO 37111
36110: LD_INT 3
36112: DOUBLE
36113: EQUAL
36114: IFTRUE 36118
36116: GO 36148
36118: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36119: LD_ADDR_VAR 0 3
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: LD_INT 3
36132: PUSH
36133: LD_INT 4
36135: PUSH
36136: LD_INT 5
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: ST_TO_ADDR
36146: GO 37111
36148: LD_INT 11
36150: DOUBLE
36151: EQUAL
36152: IFTRUE 36156
36154: GO 36186
36156: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36157: LD_ADDR_VAR 0 3
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: LD_INT 3
36170: PUSH
36171: LD_INT 4
36173: PUSH
36174: LD_INT 5
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: ST_TO_ADDR
36184: GO 37111
36186: LD_INT 4
36188: DOUBLE
36189: EQUAL
36190: IFTRUE 36194
36192: GO 36220
36194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36195: LD_ADDR_VAR 0 3
36199: PUSH
36200: LD_INT 2
36202: PUSH
36203: LD_INT 3
36205: PUSH
36206: LD_INT 4
36208: PUSH
36209: LD_INT 5
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: ST_TO_ADDR
36218: GO 37111
36220: LD_INT 5
36222: DOUBLE
36223: EQUAL
36224: IFTRUE 36228
36226: GO 36254
36228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36229: LD_ADDR_VAR 0 3
36233: PUSH
36234: LD_INT 2
36236: PUSH
36237: LD_INT 3
36239: PUSH
36240: LD_INT 4
36242: PUSH
36243: LD_INT 5
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: ST_TO_ADDR
36252: GO 37111
36254: LD_INT 9
36256: DOUBLE
36257: EQUAL
36258: IFTRUE 36262
36260: GO 36288
36262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36263: LD_ADDR_VAR 0 3
36267: PUSH
36268: LD_INT 2
36270: PUSH
36271: LD_INT 3
36273: PUSH
36274: LD_INT 4
36276: PUSH
36277: LD_INT 5
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: ST_TO_ADDR
36286: GO 37111
36288: LD_INT 7
36290: DOUBLE
36291: EQUAL
36292: IFTRUE 36296
36294: GO 36322
36296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36297: LD_ADDR_VAR 0 3
36301: PUSH
36302: LD_INT 2
36304: PUSH
36305: LD_INT 3
36307: PUSH
36308: LD_INT 4
36310: PUSH
36311: LD_INT 5
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: ST_TO_ADDR
36320: GO 37111
36322: LD_INT 12
36324: DOUBLE
36325: EQUAL
36326: IFTRUE 36330
36328: GO 36356
36330: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36331: LD_ADDR_VAR 0 3
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: LD_INT 3
36341: PUSH
36342: LD_INT 4
36344: PUSH
36345: LD_INT 5
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: ST_TO_ADDR
36354: GO 37111
36356: LD_INT 13
36358: DOUBLE
36359: EQUAL
36360: IFTRUE 36364
36362: GO 36390
36364: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36365: LD_ADDR_VAR 0 3
36369: PUSH
36370: LD_INT 2
36372: PUSH
36373: LD_INT 3
36375: PUSH
36376: LD_INT 4
36378: PUSH
36379: LD_INT 5
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: ST_TO_ADDR
36388: GO 37111
36390: LD_INT 14
36392: DOUBLE
36393: EQUAL
36394: IFTRUE 36398
36396: GO 36416
36398: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36399: LD_ADDR_VAR 0 3
36403: PUSH
36404: LD_INT 4
36406: PUSH
36407: LD_INT 5
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: ST_TO_ADDR
36414: GO 37111
36416: LD_INT 6
36418: DOUBLE
36419: EQUAL
36420: IFTRUE 36424
36422: GO 36442
36424: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36425: LD_ADDR_VAR 0 3
36429: PUSH
36430: LD_INT 4
36432: PUSH
36433: LD_INT 5
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: ST_TO_ADDR
36440: GO 37111
36442: LD_INT 10
36444: DOUBLE
36445: EQUAL
36446: IFTRUE 36450
36448: GO 36468
36450: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36451: LD_ADDR_VAR 0 3
36455: PUSH
36456: LD_INT 4
36458: PUSH
36459: LD_INT 5
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: ST_TO_ADDR
36466: GO 37111
36468: LD_INT 22
36470: DOUBLE
36471: EQUAL
36472: IFTRUE 36476
36474: GO 36502
36476: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36477: LD_ADDR_VAR 0 3
36481: PUSH
36482: LD_INT 11
36484: PUSH
36485: LD_INT 12
36487: PUSH
36488: LD_INT 13
36490: PUSH
36491: LD_INT 14
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: ST_TO_ADDR
36500: GO 37111
36502: LD_INT 23
36504: DOUBLE
36505: EQUAL
36506: IFTRUE 36510
36508: GO 36536
36510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36511: LD_ADDR_VAR 0 3
36515: PUSH
36516: LD_INT 11
36518: PUSH
36519: LD_INT 12
36521: PUSH
36522: LD_INT 13
36524: PUSH
36525: LD_INT 14
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: ST_TO_ADDR
36534: GO 37111
36536: LD_INT 24
36538: DOUBLE
36539: EQUAL
36540: IFTRUE 36544
36542: GO 36570
36544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36545: LD_ADDR_VAR 0 3
36549: PUSH
36550: LD_INT 11
36552: PUSH
36553: LD_INT 12
36555: PUSH
36556: LD_INT 13
36558: PUSH
36559: LD_INT 14
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: ST_TO_ADDR
36568: GO 37111
36570: LD_INT 30
36572: DOUBLE
36573: EQUAL
36574: IFTRUE 36578
36576: GO 36604
36578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36579: LD_ADDR_VAR 0 3
36583: PUSH
36584: LD_INT 11
36586: PUSH
36587: LD_INT 12
36589: PUSH
36590: LD_INT 13
36592: PUSH
36593: LD_INT 14
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: ST_TO_ADDR
36602: GO 37111
36604: LD_INT 25
36606: DOUBLE
36607: EQUAL
36608: IFTRUE 36612
36610: GO 36630
36612: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36613: LD_ADDR_VAR 0 3
36617: PUSH
36618: LD_INT 13
36620: PUSH
36621: LD_INT 14
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: ST_TO_ADDR
36628: GO 37111
36630: LD_INT 27
36632: DOUBLE
36633: EQUAL
36634: IFTRUE 36638
36636: GO 36656
36638: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36639: LD_ADDR_VAR 0 3
36643: PUSH
36644: LD_INT 13
36646: PUSH
36647: LD_INT 14
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: ST_TO_ADDR
36654: GO 37111
36656: LD_INT 92
36658: DOUBLE
36659: EQUAL
36660: IFTRUE 36664
36662: GO 36690
36664: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36665: LD_ADDR_VAR 0 3
36669: PUSH
36670: LD_INT 11
36672: PUSH
36673: LD_INT 12
36675: PUSH
36676: LD_INT 13
36678: PUSH
36679: LD_INT 14
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: ST_TO_ADDR
36688: GO 37111
36690: LD_INT 28
36692: DOUBLE
36693: EQUAL
36694: IFTRUE 36698
36696: GO 36716
36698: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36699: LD_ADDR_VAR 0 3
36703: PUSH
36704: LD_INT 13
36706: PUSH
36707: LD_INT 14
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: ST_TO_ADDR
36714: GO 37111
36716: LD_INT 29
36718: DOUBLE
36719: EQUAL
36720: IFTRUE 36724
36722: GO 36742
36724: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36725: LD_ADDR_VAR 0 3
36729: PUSH
36730: LD_INT 13
36732: PUSH
36733: LD_INT 14
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: ST_TO_ADDR
36740: GO 37111
36742: LD_INT 31
36744: DOUBLE
36745: EQUAL
36746: IFTRUE 36750
36748: GO 36768
36750: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36751: LD_ADDR_VAR 0 3
36755: PUSH
36756: LD_INT 13
36758: PUSH
36759: LD_INT 14
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: ST_TO_ADDR
36766: GO 37111
36768: LD_INT 26
36770: DOUBLE
36771: EQUAL
36772: IFTRUE 36776
36774: GO 36794
36776: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36777: LD_ADDR_VAR 0 3
36781: PUSH
36782: LD_INT 13
36784: PUSH
36785: LD_INT 14
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: ST_TO_ADDR
36792: GO 37111
36794: LD_INT 42
36796: DOUBLE
36797: EQUAL
36798: IFTRUE 36802
36800: GO 36828
36802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36803: LD_ADDR_VAR 0 3
36807: PUSH
36808: LD_INT 21
36810: PUSH
36811: LD_INT 22
36813: PUSH
36814: LD_INT 23
36816: PUSH
36817: LD_INT 24
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: ST_TO_ADDR
36826: GO 37111
36828: LD_INT 43
36830: DOUBLE
36831: EQUAL
36832: IFTRUE 36836
36834: GO 36862
36836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36837: LD_ADDR_VAR 0 3
36841: PUSH
36842: LD_INT 21
36844: PUSH
36845: LD_INT 22
36847: PUSH
36848: LD_INT 23
36850: PUSH
36851: LD_INT 24
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: ST_TO_ADDR
36860: GO 37111
36862: LD_INT 44
36864: DOUBLE
36865: EQUAL
36866: IFTRUE 36870
36868: GO 36896
36870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36871: LD_ADDR_VAR 0 3
36875: PUSH
36876: LD_INT 21
36878: PUSH
36879: LD_INT 22
36881: PUSH
36882: LD_INT 23
36884: PUSH
36885: LD_INT 24
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: ST_TO_ADDR
36894: GO 37111
36896: LD_INT 45
36898: DOUBLE
36899: EQUAL
36900: IFTRUE 36904
36902: GO 36930
36904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36905: LD_ADDR_VAR 0 3
36909: PUSH
36910: LD_INT 21
36912: PUSH
36913: LD_INT 22
36915: PUSH
36916: LD_INT 23
36918: PUSH
36919: LD_INT 24
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: ST_TO_ADDR
36928: GO 37111
36930: LD_INT 49
36932: DOUBLE
36933: EQUAL
36934: IFTRUE 36938
36936: GO 36964
36938: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36939: LD_ADDR_VAR 0 3
36943: PUSH
36944: LD_INT 21
36946: PUSH
36947: LD_INT 22
36949: PUSH
36950: LD_INT 23
36952: PUSH
36953: LD_INT 24
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: ST_TO_ADDR
36962: GO 37111
36964: LD_INT 51
36966: DOUBLE
36967: EQUAL
36968: IFTRUE 36972
36970: GO 36998
36972: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36973: LD_ADDR_VAR 0 3
36977: PUSH
36978: LD_INT 21
36980: PUSH
36981: LD_INT 22
36983: PUSH
36984: LD_INT 23
36986: PUSH
36987: LD_INT 24
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: ST_TO_ADDR
36996: GO 37111
36998: LD_INT 52
37000: DOUBLE
37001: EQUAL
37002: IFTRUE 37006
37004: GO 37032
37006: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37007: LD_ADDR_VAR 0 3
37011: PUSH
37012: LD_INT 21
37014: PUSH
37015: LD_INT 22
37017: PUSH
37018: LD_INT 23
37020: PUSH
37021: LD_INT 24
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: ST_TO_ADDR
37030: GO 37111
37032: LD_INT 53
37034: DOUBLE
37035: EQUAL
37036: IFTRUE 37040
37038: GO 37058
37040: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37041: LD_ADDR_VAR 0 3
37045: PUSH
37046: LD_INT 23
37048: PUSH
37049: LD_INT 24
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: ST_TO_ADDR
37056: GO 37111
37058: LD_INT 46
37060: DOUBLE
37061: EQUAL
37062: IFTRUE 37066
37064: GO 37084
37066: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37067: LD_ADDR_VAR 0 3
37071: PUSH
37072: LD_INT 23
37074: PUSH
37075: LD_INT 24
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: ST_TO_ADDR
37082: GO 37111
37084: LD_INT 47
37086: DOUBLE
37087: EQUAL
37088: IFTRUE 37092
37090: GO 37110
37092: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37093: LD_ADDR_VAR 0 3
37097: PUSH
37098: LD_INT 23
37100: PUSH
37101: LD_INT 24
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: ST_TO_ADDR
37108: GO 37111
37110: POP
// result := ( chassis in result ) ;
37111: LD_ADDR_VAR 0 3
37115: PUSH
37116: LD_VAR 0 1
37120: PUSH
37121: LD_VAR 0 3
37125: IN
37126: ST_TO_ADDR
// end ;
37127: LD_VAR 0 3
37131: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37132: LD_INT 0
37134: PPUSH
37135: PPUSH
37136: PPUSH
37137: PPUSH
37138: PPUSH
37139: PPUSH
37140: PPUSH
// result := array ;
37141: LD_ADDR_VAR 0 5
37145: PUSH
37146: LD_VAR 0 1
37150: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37151: LD_VAR 0 1
37155: NOT
37156: PUSH
37157: LD_VAR 0 2
37161: NOT
37162: OR
37163: PUSH
37164: LD_VAR 0 3
37168: NOT
37169: OR
37170: PUSH
37171: LD_VAR 0 2
37175: PUSH
37176: LD_VAR 0 1
37180: GREATER
37181: OR
37182: PUSH
37183: LD_VAR 0 3
37187: PUSH
37188: LD_VAR 0 1
37192: GREATER
37193: OR
37194: IFFALSE 37198
// exit ;
37196: GO 37494
// if direction then
37198: LD_VAR 0 4
37202: IFFALSE 37266
// begin d := 1 ;
37204: LD_ADDR_VAR 0 9
37208: PUSH
37209: LD_INT 1
37211: ST_TO_ADDR
// if i_from > i_to then
37212: LD_VAR 0 2
37216: PUSH
37217: LD_VAR 0 3
37221: GREATER
37222: IFFALSE 37248
// length := ( array - i_from ) + i_to else
37224: LD_ADDR_VAR 0 11
37228: PUSH
37229: LD_VAR 0 1
37233: PUSH
37234: LD_VAR 0 2
37238: MINUS
37239: PUSH
37240: LD_VAR 0 3
37244: PLUS
37245: ST_TO_ADDR
37246: GO 37264
// length := i_to - i_from ;
37248: LD_ADDR_VAR 0 11
37252: PUSH
37253: LD_VAR 0 3
37257: PUSH
37258: LD_VAR 0 2
37262: MINUS
37263: ST_TO_ADDR
// end else
37264: GO 37327
// begin d := - 1 ;
37266: LD_ADDR_VAR 0 9
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: ST_TO_ADDR
// if i_from > i_to then
37275: LD_VAR 0 2
37279: PUSH
37280: LD_VAR 0 3
37284: GREATER
37285: IFFALSE 37305
// length := i_from - i_to else
37287: LD_ADDR_VAR 0 11
37291: PUSH
37292: LD_VAR 0 2
37296: PUSH
37297: LD_VAR 0 3
37301: MINUS
37302: ST_TO_ADDR
37303: GO 37327
// length := ( array - i_to ) + i_from ;
37305: LD_ADDR_VAR 0 11
37309: PUSH
37310: LD_VAR 0 1
37314: PUSH
37315: LD_VAR 0 3
37319: MINUS
37320: PUSH
37321: LD_VAR 0 2
37325: PLUS
37326: ST_TO_ADDR
// end ; if not length then
37327: LD_VAR 0 11
37331: NOT
37332: IFFALSE 37336
// exit ;
37334: GO 37494
// tmp := array ;
37336: LD_ADDR_VAR 0 10
37340: PUSH
37341: LD_VAR 0 1
37345: ST_TO_ADDR
// for i = 1 to length do
37346: LD_ADDR_VAR 0 6
37350: PUSH
37351: DOUBLE
37352: LD_INT 1
37354: DEC
37355: ST_TO_ADDR
37356: LD_VAR 0 11
37360: PUSH
37361: FOR_TO
37362: IFFALSE 37482
// begin for j = 1 to array do
37364: LD_ADDR_VAR 0 7
37368: PUSH
37369: DOUBLE
37370: LD_INT 1
37372: DEC
37373: ST_TO_ADDR
37374: LD_VAR 0 1
37378: PUSH
37379: FOR_TO
37380: IFFALSE 37468
// begin k := j + d ;
37382: LD_ADDR_VAR 0 8
37386: PUSH
37387: LD_VAR 0 7
37391: PUSH
37392: LD_VAR 0 9
37396: PLUS
37397: ST_TO_ADDR
// if k > array then
37398: LD_VAR 0 8
37402: PUSH
37403: LD_VAR 0 1
37407: GREATER
37408: IFFALSE 37418
// k := 1 ;
37410: LD_ADDR_VAR 0 8
37414: PUSH
37415: LD_INT 1
37417: ST_TO_ADDR
// if not k then
37418: LD_VAR 0 8
37422: NOT
37423: IFFALSE 37435
// k := array ;
37425: LD_ADDR_VAR 0 8
37429: PUSH
37430: LD_VAR 0 1
37434: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37435: LD_ADDR_VAR 0 10
37439: PUSH
37440: LD_VAR 0 10
37444: PPUSH
37445: LD_VAR 0 8
37449: PPUSH
37450: LD_VAR 0 1
37454: PUSH
37455: LD_VAR 0 7
37459: ARRAY
37460: PPUSH
37461: CALL_OW 1
37465: ST_TO_ADDR
// end ;
37466: GO 37379
37468: POP
37469: POP
// array := tmp ;
37470: LD_ADDR_VAR 0 1
37474: PUSH
37475: LD_VAR 0 10
37479: ST_TO_ADDR
// end ;
37480: GO 37361
37482: POP
37483: POP
// result := array ;
37484: LD_ADDR_VAR 0 5
37488: PUSH
37489: LD_VAR 0 1
37493: ST_TO_ADDR
// end ;
37494: LD_VAR 0 5
37498: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37499: LD_INT 0
37501: PPUSH
37502: PPUSH
// result := 0 ;
37503: LD_ADDR_VAR 0 3
37507: PUSH
37508: LD_INT 0
37510: ST_TO_ADDR
// if not array or not value in array then
37511: LD_VAR 0 1
37515: NOT
37516: PUSH
37517: LD_VAR 0 2
37521: PUSH
37522: LD_VAR 0 1
37526: IN
37527: NOT
37528: OR
37529: IFFALSE 37533
// exit ;
37531: GO 37587
// for i = 1 to array do
37533: LD_ADDR_VAR 0 4
37537: PUSH
37538: DOUBLE
37539: LD_INT 1
37541: DEC
37542: ST_TO_ADDR
37543: LD_VAR 0 1
37547: PUSH
37548: FOR_TO
37549: IFFALSE 37585
// if value = array [ i ] then
37551: LD_VAR 0 2
37555: PUSH
37556: LD_VAR 0 1
37560: PUSH
37561: LD_VAR 0 4
37565: ARRAY
37566: EQUAL
37567: IFFALSE 37583
// begin result := i ;
37569: LD_ADDR_VAR 0 3
37573: PUSH
37574: LD_VAR 0 4
37578: ST_TO_ADDR
// exit ;
37579: POP
37580: POP
37581: GO 37587
// end ;
37583: GO 37548
37585: POP
37586: POP
// end ;
37587: LD_VAR 0 3
37591: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37592: LD_INT 0
37594: PPUSH
// vc_chassis := chassis ;
37595: LD_ADDR_OWVAR 37
37599: PUSH
37600: LD_VAR 0 1
37604: ST_TO_ADDR
// vc_engine := engine ;
37605: LD_ADDR_OWVAR 39
37609: PUSH
37610: LD_VAR 0 2
37614: ST_TO_ADDR
// vc_control := control ;
37615: LD_ADDR_OWVAR 38
37619: PUSH
37620: LD_VAR 0 3
37624: ST_TO_ADDR
// vc_weapon := weapon ;
37625: LD_ADDR_OWVAR 40
37629: PUSH
37630: LD_VAR 0 4
37634: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37635: LD_ADDR_OWVAR 41
37639: PUSH
37640: LD_VAR 0 5
37644: ST_TO_ADDR
// end ;
37645: LD_VAR 0 6
37649: RET
// export function WantPlant ( unit ) ; var task ; begin
37650: LD_INT 0
37652: PPUSH
37653: PPUSH
// result := false ;
37654: LD_ADDR_VAR 0 2
37658: PUSH
37659: LD_INT 0
37661: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37662: LD_ADDR_VAR 0 3
37666: PUSH
37667: LD_VAR 0 1
37671: PPUSH
37672: CALL_OW 437
37676: ST_TO_ADDR
// if task then
37677: LD_VAR 0 3
37681: IFFALSE 37709
// if task [ 1 ] [ 1 ] = p then
37683: LD_VAR 0 3
37687: PUSH
37688: LD_INT 1
37690: ARRAY
37691: PUSH
37692: LD_INT 1
37694: ARRAY
37695: PUSH
37696: LD_STRING p
37698: EQUAL
37699: IFFALSE 37709
// result := true ;
37701: LD_ADDR_VAR 0 2
37705: PUSH
37706: LD_INT 1
37708: ST_TO_ADDR
// end ;
37709: LD_VAR 0 2
37713: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37714: LD_INT 0
37716: PPUSH
37717: PPUSH
37718: PPUSH
37719: PPUSH
// if pos < 1 then
37720: LD_VAR 0 2
37724: PUSH
37725: LD_INT 1
37727: LESS
37728: IFFALSE 37732
// exit ;
37730: GO 38035
// if pos = 1 then
37732: LD_VAR 0 2
37736: PUSH
37737: LD_INT 1
37739: EQUAL
37740: IFFALSE 37773
// result := Replace ( arr , pos [ 1 ] , value ) else
37742: LD_ADDR_VAR 0 4
37746: PUSH
37747: LD_VAR 0 1
37751: PPUSH
37752: LD_VAR 0 2
37756: PUSH
37757: LD_INT 1
37759: ARRAY
37760: PPUSH
37761: LD_VAR 0 3
37765: PPUSH
37766: CALL_OW 1
37770: ST_TO_ADDR
37771: GO 38035
// begin tmp := arr ;
37773: LD_ADDR_VAR 0 6
37777: PUSH
37778: LD_VAR 0 1
37782: ST_TO_ADDR
// s_arr := [ tmp ] ;
37783: LD_ADDR_VAR 0 7
37787: PUSH
37788: LD_VAR 0 6
37792: PUSH
37793: EMPTY
37794: LIST
37795: ST_TO_ADDR
// for i = 1 to pos - 1 do
37796: LD_ADDR_VAR 0 5
37800: PUSH
37801: DOUBLE
37802: LD_INT 1
37804: DEC
37805: ST_TO_ADDR
37806: LD_VAR 0 2
37810: PUSH
37811: LD_INT 1
37813: MINUS
37814: PUSH
37815: FOR_TO
37816: IFFALSE 37861
// begin tmp := tmp [ pos [ i ] ] ;
37818: LD_ADDR_VAR 0 6
37822: PUSH
37823: LD_VAR 0 6
37827: PUSH
37828: LD_VAR 0 2
37832: PUSH
37833: LD_VAR 0 5
37837: ARRAY
37838: ARRAY
37839: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37840: LD_ADDR_VAR 0 7
37844: PUSH
37845: LD_VAR 0 7
37849: PUSH
37850: LD_VAR 0 6
37854: PUSH
37855: EMPTY
37856: LIST
37857: ADD
37858: ST_TO_ADDR
// end ;
37859: GO 37815
37861: POP
37862: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37863: LD_ADDR_VAR 0 6
37867: PUSH
37868: LD_VAR 0 6
37872: PPUSH
37873: LD_VAR 0 2
37877: PUSH
37878: LD_VAR 0 2
37882: ARRAY
37883: PPUSH
37884: LD_VAR 0 3
37888: PPUSH
37889: CALL_OW 1
37893: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37894: LD_ADDR_VAR 0 7
37898: PUSH
37899: LD_VAR 0 7
37903: PPUSH
37904: LD_VAR 0 7
37908: PPUSH
37909: LD_VAR 0 6
37913: PPUSH
37914: CALL_OW 1
37918: ST_TO_ADDR
// for i = s_arr downto 2 do
37919: LD_ADDR_VAR 0 5
37923: PUSH
37924: DOUBLE
37925: LD_VAR 0 7
37929: INC
37930: ST_TO_ADDR
37931: LD_INT 2
37933: PUSH
37934: FOR_DOWNTO
37935: IFFALSE 38019
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37937: LD_ADDR_VAR 0 6
37941: PUSH
37942: LD_VAR 0 7
37946: PUSH
37947: LD_VAR 0 5
37951: PUSH
37952: LD_INT 1
37954: MINUS
37955: ARRAY
37956: PPUSH
37957: LD_VAR 0 2
37961: PUSH
37962: LD_VAR 0 5
37966: PUSH
37967: LD_INT 1
37969: MINUS
37970: ARRAY
37971: PPUSH
37972: LD_VAR 0 7
37976: PUSH
37977: LD_VAR 0 5
37981: ARRAY
37982: PPUSH
37983: CALL_OW 1
37987: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37988: LD_ADDR_VAR 0 7
37992: PUSH
37993: LD_VAR 0 7
37997: PPUSH
37998: LD_VAR 0 5
38002: PUSH
38003: LD_INT 1
38005: MINUS
38006: PPUSH
38007: LD_VAR 0 6
38011: PPUSH
38012: CALL_OW 1
38016: ST_TO_ADDR
// end ;
38017: GO 37934
38019: POP
38020: POP
// result := s_arr [ 1 ] ;
38021: LD_ADDR_VAR 0 4
38025: PUSH
38026: LD_VAR 0 7
38030: PUSH
38031: LD_INT 1
38033: ARRAY
38034: ST_TO_ADDR
// end ; end ;
38035: LD_VAR 0 4
38039: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38040: LD_INT 0
38042: PPUSH
38043: PPUSH
// if not list then
38044: LD_VAR 0 1
38048: NOT
38049: IFFALSE 38053
// exit ;
38051: GO 38144
// i := list [ pos1 ] ;
38053: LD_ADDR_VAR 0 5
38057: PUSH
38058: LD_VAR 0 1
38062: PUSH
38063: LD_VAR 0 2
38067: ARRAY
38068: ST_TO_ADDR
// if not i then
38069: LD_VAR 0 5
38073: NOT
38074: IFFALSE 38078
// exit ;
38076: GO 38144
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38078: LD_ADDR_VAR 0 1
38082: PUSH
38083: LD_VAR 0 1
38087: PPUSH
38088: LD_VAR 0 2
38092: PPUSH
38093: LD_VAR 0 1
38097: PUSH
38098: LD_VAR 0 3
38102: ARRAY
38103: PPUSH
38104: CALL_OW 1
38108: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38109: LD_ADDR_VAR 0 1
38113: PUSH
38114: LD_VAR 0 1
38118: PPUSH
38119: LD_VAR 0 3
38123: PPUSH
38124: LD_VAR 0 5
38128: PPUSH
38129: CALL_OW 1
38133: ST_TO_ADDR
// result := list ;
38134: LD_ADDR_VAR 0 4
38138: PUSH
38139: LD_VAR 0 1
38143: ST_TO_ADDR
// end ;
38144: LD_VAR 0 4
38148: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38149: LD_INT 0
38151: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38152: LD_ADDR_VAR 0 5
38156: PUSH
38157: LD_VAR 0 1
38161: PPUSH
38162: CALL_OW 250
38166: PPUSH
38167: LD_VAR 0 1
38171: PPUSH
38172: CALL_OW 251
38176: PPUSH
38177: LD_VAR 0 2
38181: PPUSH
38182: LD_VAR 0 3
38186: PPUSH
38187: LD_VAR 0 4
38191: PPUSH
38192: CALL 38570 0 5
38196: ST_TO_ADDR
// end ;
38197: LD_VAR 0 5
38201: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38202: LD_INT 0
38204: PPUSH
38205: PPUSH
38206: PPUSH
38207: PPUSH
// if not list or not unit then
38208: LD_VAR 0 2
38212: NOT
38213: PUSH
38214: LD_VAR 0 1
38218: NOT
38219: OR
38220: IFFALSE 38224
// exit ;
38222: GO 38565
// result := [ ] ;
38224: LD_ADDR_VAR 0 5
38228: PUSH
38229: EMPTY
38230: ST_TO_ADDR
// for i in list do
38231: LD_ADDR_VAR 0 6
38235: PUSH
38236: LD_VAR 0 2
38240: PUSH
38241: FOR_IN
38242: IFFALSE 38460
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38244: LD_ADDR_VAR 0 8
38248: PUSH
38249: LD_VAR 0 1
38253: PPUSH
38254: LD_VAR 0 6
38258: PUSH
38259: LD_INT 1
38261: ARRAY
38262: PPUSH
38263: LD_VAR 0 6
38267: PUSH
38268: LD_INT 2
38270: ARRAY
38271: PPUSH
38272: CALL_OW 297
38276: ST_TO_ADDR
// if not Count ( result ) then
38277: LD_VAR 0 5
38281: PPUSH
38282: CALL 34854 0 1
38286: NOT
38287: IFFALSE 38320
// begin result := Join ( result , [ i , tmp ] ) ;
38289: LD_ADDR_VAR 0 5
38293: PUSH
38294: LD_VAR 0 5
38298: PPUSH
38299: LD_VAR 0 6
38303: PUSH
38304: LD_VAR 0 8
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PPUSH
38313: CALL 70463 0 2
38317: ST_TO_ADDR
// continue ;
38318: GO 38241
// end ; if result [ result ] [ 2 ] <= tmp then
38320: LD_VAR 0 5
38324: PUSH
38325: LD_VAR 0 5
38329: ARRAY
38330: PUSH
38331: LD_INT 2
38333: ARRAY
38334: PUSH
38335: LD_VAR 0 8
38339: LESSEQUAL
38340: IFFALSE 38373
// result := Join ( result , [ i , tmp ] ) else
38342: LD_ADDR_VAR 0 5
38346: PUSH
38347: LD_VAR 0 5
38351: PPUSH
38352: LD_VAR 0 6
38356: PUSH
38357: LD_VAR 0 8
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PPUSH
38366: CALL 70463 0 2
38370: ST_TO_ADDR
38371: GO 38458
// begin for j := 1 to Count ( result ) do
38373: LD_ADDR_VAR 0 7
38377: PUSH
38378: DOUBLE
38379: LD_INT 1
38381: DEC
38382: ST_TO_ADDR
38383: LD_VAR 0 5
38387: PPUSH
38388: CALL 34854 0 1
38392: PUSH
38393: FOR_TO
38394: IFFALSE 38456
// begin if tmp < result [ j ] [ 2 ] then
38396: LD_VAR 0 8
38400: PUSH
38401: LD_VAR 0 5
38405: PUSH
38406: LD_VAR 0 7
38410: ARRAY
38411: PUSH
38412: LD_INT 2
38414: ARRAY
38415: LESS
38416: IFFALSE 38454
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38418: LD_ADDR_VAR 0 5
38422: PUSH
38423: LD_VAR 0 5
38427: PPUSH
38428: LD_VAR 0 7
38432: PPUSH
38433: LD_VAR 0 6
38437: PUSH
38438: LD_VAR 0 8
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PPUSH
38447: CALL_OW 2
38451: ST_TO_ADDR
// break ;
38452: GO 38456
// end ; end ;
38454: GO 38393
38456: POP
38457: POP
// end ; end ;
38458: GO 38241
38460: POP
38461: POP
// if result and not asc then
38462: LD_VAR 0 5
38466: PUSH
38467: LD_VAR 0 3
38471: NOT
38472: AND
38473: IFFALSE 38490
// result := ReverseArray ( result ) ;
38475: LD_ADDR_VAR 0 5
38479: PUSH
38480: LD_VAR 0 5
38484: PPUSH
38485: CALL 65730 0 1
38489: ST_TO_ADDR
// tmp := [ ] ;
38490: LD_ADDR_VAR 0 8
38494: PUSH
38495: EMPTY
38496: ST_TO_ADDR
// if mode then
38497: LD_VAR 0 4
38501: IFFALSE 38565
// begin for i := 1 to result do
38503: LD_ADDR_VAR 0 6
38507: PUSH
38508: DOUBLE
38509: LD_INT 1
38511: DEC
38512: ST_TO_ADDR
38513: LD_VAR 0 5
38517: PUSH
38518: FOR_TO
38519: IFFALSE 38553
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38521: LD_ADDR_VAR 0 8
38525: PUSH
38526: LD_VAR 0 8
38530: PPUSH
38531: LD_VAR 0 5
38535: PUSH
38536: LD_VAR 0 6
38540: ARRAY
38541: PUSH
38542: LD_INT 1
38544: ARRAY
38545: PPUSH
38546: CALL 70463 0 2
38550: ST_TO_ADDR
38551: GO 38518
38553: POP
38554: POP
// result := tmp ;
38555: LD_ADDR_VAR 0 5
38559: PUSH
38560: LD_VAR 0 8
38564: ST_TO_ADDR
// end ; end ;
38565: LD_VAR 0 5
38569: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38570: LD_INT 0
38572: PPUSH
38573: PPUSH
38574: PPUSH
38575: PPUSH
// if not list then
38576: LD_VAR 0 3
38580: NOT
38581: IFFALSE 38585
// exit ;
38583: GO 38973
// result := [ ] ;
38585: LD_ADDR_VAR 0 6
38589: PUSH
38590: EMPTY
38591: ST_TO_ADDR
// for i in list do
38592: LD_ADDR_VAR 0 7
38596: PUSH
38597: LD_VAR 0 3
38601: PUSH
38602: FOR_IN
38603: IFFALSE 38805
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38605: LD_ADDR_VAR 0 9
38609: PUSH
38610: LD_VAR 0 7
38614: PPUSH
38615: LD_VAR 0 1
38619: PPUSH
38620: LD_VAR 0 2
38624: PPUSH
38625: CALL_OW 297
38629: ST_TO_ADDR
// if not result then
38630: LD_VAR 0 6
38634: NOT
38635: IFFALSE 38661
// result := [ [ i , tmp ] ] else
38637: LD_ADDR_VAR 0 6
38641: PUSH
38642: LD_VAR 0 7
38646: PUSH
38647: LD_VAR 0 9
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: EMPTY
38657: LIST
38658: ST_TO_ADDR
38659: GO 38803
// begin if result [ result ] [ 2 ] <= tmp then
38661: LD_VAR 0 6
38665: PUSH
38666: LD_VAR 0 6
38670: ARRAY
38671: PUSH
38672: LD_INT 2
38674: ARRAY
38675: PUSH
38676: LD_VAR 0 9
38680: LESSEQUAL
38681: IFFALSE 38723
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38683: LD_ADDR_VAR 0 6
38687: PUSH
38688: LD_VAR 0 6
38692: PPUSH
38693: LD_VAR 0 6
38697: PUSH
38698: LD_INT 1
38700: PLUS
38701: PPUSH
38702: LD_VAR 0 7
38706: PUSH
38707: LD_VAR 0 9
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PPUSH
38716: CALL_OW 2
38720: ST_TO_ADDR
38721: GO 38803
// for j := 1 to result do
38723: LD_ADDR_VAR 0 8
38727: PUSH
38728: DOUBLE
38729: LD_INT 1
38731: DEC
38732: ST_TO_ADDR
38733: LD_VAR 0 6
38737: PUSH
38738: FOR_TO
38739: IFFALSE 38801
// begin if tmp < result [ j ] [ 2 ] then
38741: LD_VAR 0 9
38745: PUSH
38746: LD_VAR 0 6
38750: PUSH
38751: LD_VAR 0 8
38755: ARRAY
38756: PUSH
38757: LD_INT 2
38759: ARRAY
38760: LESS
38761: IFFALSE 38799
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38763: LD_ADDR_VAR 0 6
38767: PUSH
38768: LD_VAR 0 6
38772: PPUSH
38773: LD_VAR 0 8
38777: PPUSH
38778: LD_VAR 0 7
38782: PUSH
38783: LD_VAR 0 9
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PPUSH
38792: CALL_OW 2
38796: ST_TO_ADDR
// break ;
38797: GO 38801
// end ; end ;
38799: GO 38738
38801: POP
38802: POP
// end ; end ;
38803: GO 38602
38805: POP
38806: POP
// if result and not asc then
38807: LD_VAR 0 6
38811: PUSH
38812: LD_VAR 0 4
38816: NOT
38817: AND
38818: IFFALSE 38893
// begin tmp := result ;
38820: LD_ADDR_VAR 0 9
38824: PUSH
38825: LD_VAR 0 6
38829: ST_TO_ADDR
// for i = tmp downto 1 do
38830: LD_ADDR_VAR 0 7
38834: PUSH
38835: DOUBLE
38836: LD_VAR 0 9
38840: INC
38841: ST_TO_ADDR
38842: LD_INT 1
38844: PUSH
38845: FOR_DOWNTO
38846: IFFALSE 38891
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38848: LD_ADDR_VAR 0 6
38852: PUSH
38853: LD_VAR 0 6
38857: PPUSH
38858: LD_VAR 0 9
38862: PUSH
38863: LD_VAR 0 7
38867: MINUS
38868: PUSH
38869: LD_INT 1
38871: PLUS
38872: PPUSH
38873: LD_VAR 0 9
38877: PUSH
38878: LD_VAR 0 7
38882: ARRAY
38883: PPUSH
38884: CALL_OW 1
38888: ST_TO_ADDR
38889: GO 38845
38891: POP
38892: POP
// end ; tmp := [ ] ;
38893: LD_ADDR_VAR 0 9
38897: PUSH
38898: EMPTY
38899: ST_TO_ADDR
// if mode then
38900: LD_VAR 0 5
38904: IFFALSE 38973
// begin for i = 1 to result do
38906: LD_ADDR_VAR 0 7
38910: PUSH
38911: DOUBLE
38912: LD_INT 1
38914: DEC
38915: ST_TO_ADDR
38916: LD_VAR 0 6
38920: PUSH
38921: FOR_TO
38922: IFFALSE 38961
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38924: LD_ADDR_VAR 0 9
38928: PUSH
38929: LD_VAR 0 9
38933: PPUSH
38934: LD_VAR 0 7
38938: PPUSH
38939: LD_VAR 0 6
38943: PUSH
38944: LD_VAR 0 7
38948: ARRAY
38949: PUSH
38950: LD_INT 1
38952: ARRAY
38953: PPUSH
38954: CALL_OW 1
38958: ST_TO_ADDR
38959: GO 38921
38961: POP
38962: POP
// result := tmp ;
38963: LD_ADDR_VAR 0 6
38967: PUSH
38968: LD_VAR 0 9
38972: ST_TO_ADDR
// end ; end ;
38973: LD_VAR 0 6
38977: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38978: LD_INT 0
38980: PPUSH
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38986: LD_ADDR_VAR 0 5
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: EMPTY
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: ST_TO_ADDR
// if not x or not y then
39008: LD_VAR 0 2
39012: NOT
39013: PUSH
39014: LD_VAR 0 3
39018: NOT
39019: OR
39020: IFFALSE 39024
// exit ;
39022: GO 40674
// if not range then
39024: LD_VAR 0 4
39028: NOT
39029: IFFALSE 39039
// range := 10 ;
39031: LD_ADDR_VAR 0 4
39035: PUSH
39036: LD_INT 10
39038: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39039: LD_ADDR_VAR 0 8
39043: PUSH
39044: LD_INT 81
39046: PUSH
39047: LD_VAR 0 1
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 92
39058: PUSH
39059: LD_VAR 0 2
39063: PUSH
39064: LD_VAR 0 3
39068: PUSH
39069: LD_VAR 0 4
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 3
39082: PUSH
39083: LD_INT 21
39085: PUSH
39086: LD_INT 3
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: LIST
39101: PPUSH
39102: CALL_OW 69
39106: ST_TO_ADDR
// if not tmp then
39107: LD_VAR 0 8
39111: NOT
39112: IFFALSE 39116
// exit ;
39114: GO 40674
// for i in tmp do
39116: LD_ADDR_VAR 0 6
39120: PUSH
39121: LD_VAR 0 8
39125: PUSH
39126: FOR_IN
39127: IFFALSE 40649
// begin points := [ 0 , 0 , 0 ] ;
39129: LD_ADDR_VAR 0 9
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: LIST
39147: ST_TO_ADDR
// bpoints := 1 ;
39148: LD_ADDR_VAR 0 10
39152: PUSH
39153: LD_INT 1
39155: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39156: LD_VAR 0 6
39160: PPUSH
39161: CALL_OW 247
39165: PUSH
39166: LD_INT 1
39168: DOUBLE
39169: EQUAL
39170: IFTRUE 39174
39172: GO 39752
39174: POP
// begin if GetClass ( i ) = 1 then
39175: LD_VAR 0 6
39179: PPUSH
39180: CALL_OW 257
39184: PUSH
39185: LD_INT 1
39187: EQUAL
39188: IFFALSE 39209
// points := [ 10 , 5 , 3 ] ;
39190: LD_ADDR_VAR 0 9
39194: PUSH
39195: LD_INT 10
39197: PUSH
39198: LD_INT 5
39200: PUSH
39201: LD_INT 3
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: LIST
39208: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39209: LD_VAR 0 6
39213: PPUSH
39214: CALL_OW 257
39218: PUSH
39219: LD_INT 2
39221: PUSH
39222: LD_INT 3
39224: PUSH
39225: LD_INT 4
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: LIST
39232: IN
39233: IFFALSE 39254
// points := [ 3 , 2 , 1 ] ;
39235: LD_ADDR_VAR 0 9
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: LD_INT 2
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: LIST
39253: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39254: LD_VAR 0 6
39258: PPUSH
39259: CALL_OW 257
39263: PUSH
39264: LD_INT 5
39266: EQUAL
39267: IFFALSE 39288
// points := [ 130 , 5 , 2 ] ;
39269: LD_ADDR_VAR 0 9
39273: PUSH
39274: LD_INT 130
39276: PUSH
39277: LD_INT 5
39279: PUSH
39280: LD_INT 2
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39288: LD_VAR 0 6
39292: PPUSH
39293: CALL_OW 257
39297: PUSH
39298: LD_INT 8
39300: EQUAL
39301: IFFALSE 39322
// points := [ 35 , 35 , 30 ] ;
39303: LD_ADDR_VAR 0 9
39307: PUSH
39308: LD_INT 35
39310: PUSH
39311: LD_INT 35
39313: PUSH
39314: LD_INT 30
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: LIST
39321: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39322: LD_VAR 0 6
39326: PPUSH
39327: CALL_OW 257
39331: PUSH
39332: LD_INT 9
39334: EQUAL
39335: IFFALSE 39356
// points := [ 20 , 55 , 40 ] ;
39337: LD_ADDR_VAR 0 9
39341: PUSH
39342: LD_INT 20
39344: PUSH
39345: LD_INT 55
39347: PUSH
39348: LD_INT 40
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: LIST
39355: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39356: LD_VAR 0 6
39360: PPUSH
39361: CALL_OW 257
39365: PUSH
39366: LD_INT 12
39368: PUSH
39369: LD_INT 16
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: IN
39376: IFFALSE 39397
// points := [ 5 , 3 , 2 ] ;
39378: LD_ADDR_VAR 0 9
39382: PUSH
39383: LD_INT 5
39385: PUSH
39386: LD_INT 3
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: LIST
39396: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39397: LD_VAR 0 6
39401: PPUSH
39402: CALL_OW 257
39406: PUSH
39407: LD_INT 17
39409: EQUAL
39410: IFFALSE 39431
// points := [ 100 , 50 , 75 ] ;
39412: LD_ADDR_VAR 0 9
39416: PUSH
39417: LD_INT 100
39419: PUSH
39420: LD_INT 50
39422: PUSH
39423: LD_INT 75
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: LIST
39430: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39431: LD_VAR 0 6
39435: PPUSH
39436: CALL_OW 257
39440: PUSH
39441: LD_INT 15
39443: EQUAL
39444: IFFALSE 39465
// points := [ 10 , 5 , 3 ] ;
39446: LD_ADDR_VAR 0 9
39450: PUSH
39451: LD_INT 10
39453: PUSH
39454: LD_INT 5
39456: PUSH
39457: LD_INT 3
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39465: LD_VAR 0 6
39469: PPUSH
39470: CALL_OW 257
39474: PUSH
39475: LD_INT 14
39477: EQUAL
39478: IFFALSE 39499
// points := [ 10 , 0 , 0 ] ;
39480: LD_ADDR_VAR 0 9
39484: PUSH
39485: LD_INT 10
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: LIST
39498: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39499: LD_VAR 0 6
39503: PPUSH
39504: CALL_OW 257
39508: PUSH
39509: LD_INT 11
39511: EQUAL
39512: IFFALSE 39533
// points := [ 30 , 10 , 5 ] ;
39514: LD_ADDR_VAR 0 9
39518: PUSH
39519: LD_INT 30
39521: PUSH
39522: LD_INT 10
39524: PUSH
39525: LD_INT 5
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: LIST
39532: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39533: LD_VAR 0 1
39537: PPUSH
39538: LD_INT 5
39540: PPUSH
39541: CALL_OW 321
39545: PUSH
39546: LD_INT 2
39548: EQUAL
39549: IFFALSE 39566
// bpoints := bpoints * 1.8 ;
39551: LD_ADDR_VAR 0 10
39555: PUSH
39556: LD_VAR 0 10
39560: PUSH
39561: LD_REAL  1.80000000000000E+0000
39564: MUL
39565: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39566: LD_VAR 0 6
39570: PPUSH
39571: CALL_OW 257
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: LD_INT 3
39584: PUSH
39585: LD_INT 4
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: IN
39594: PUSH
39595: LD_VAR 0 1
39599: PPUSH
39600: LD_INT 51
39602: PPUSH
39603: CALL_OW 321
39607: PUSH
39608: LD_INT 2
39610: EQUAL
39611: AND
39612: IFFALSE 39629
// bpoints := bpoints * 1.2 ;
39614: LD_ADDR_VAR 0 10
39618: PUSH
39619: LD_VAR 0 10
39623: PUSH
39624: LD_REAL  1.20000000000000E+0000
39627: MUL
39628: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39629: LD_VAR 0 6
39633: PPUSH
39634: CALL_OW 257
39638: PUSH
39639: LD_INT 5
39641: PUSH
39642: LD_INT 7
39644: PUSH
39645: LD_INT 9
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: LIST
39652: IN
39653: PUSH
39654: LD_VAR 0 1
39658: PPUSH
39659: LD_INT 52
39661: PPUSH
39662: CALL_OW 321
39666: PUSH
39667: LD_INT 2
39669: EQUAL
39670: AND
39671: IFFALSE 39688
// bpoints := bpoints * 1.5 ;
39673: LD_ADDR_VAR 0 10
39677: PUSH
39678: LD_VAR 0 10
39682: PUSH
39683: LD_REAL  1.50000000000000E+0000
39686: MUL
39687: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39688: LD_VAR 0 1
39692: PPUSH
39693: LD_INT 66
39695: PPUSH
39696: CALL_OW 321
39700: PUSH
39701: LD_INT 2
39703: EQUAL
39704: IFFALSE 39721
// bpoints := bpoints * 1.1 ;
39706: LD_ADDR_VAR 0 10
39710: PUSH
39711: LD_VAR 0 10
39715: PUSH
39716: LD_REAL  1.10000000000000E+0000
39719: MUL
39720: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39721: LD_ADDR_VAR 0 10
39725: PUSH
39726: LD_VAR 0 10
39730: PUSH
39731: LD_VAR 0 6
39735: PPUSH
39736: LD_INT 1
39738: PPUSH
39739: CALL_OW 259
39743: PUSH
39744: LD_REAL  1.15000000000000E+0000
39747: MUL
39748: MUL
39749: ST_TO_ADDR
// end ; unit_vehicle :
39750: GO 40578
39752: LD_INT 2
39754: DOUBLE
39755: EQUAL
39756: IFTRUE 39760
39758: GO 40566
39760: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39761: LD_VAR 0 6
39765: PPUSH
39766: CALL_OW 264
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: LD_INT 42
39776: PUSH
39777: LD_INT 24
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: LIST
39784: IN
39785: IFFALSE 39806
// points := [ 25 , 5 , 3 ] ;
39787: LD_ADDR_VAR 0 9
39791: PUSH
39792: LD_INT 25
39794: PUSH
39795: LD_INT 5
39797: PUSH
39798: LD_INT 3
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: LIST
39805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39806: LD_VAR 0 6
39810: PPUSH
39811: CALL_OW 264
39815: PUSH
39816: LD_INT 4
39818: PUSH
39819: LD_INT 43
39821: PUSH
39822: LD_INT 25
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: IN
39830: IFFALSE 39851
// points := [ 40 , 15 , 5 ] ;
39832: LD_ADDR_VAR 0 9
39836: PUSH
39837: LD_INT 40
39839: PUSH
39840: LD_INT 15
39842: PUSH
39843: LD_INT 5
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39851: LD_VAR 0 6
39855: PPUSH
39856: CALL_OW 264
39860: PUSH
39861: LD_INT 3
39863: PUSH
39864: LD_INT 23
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: IN
39871: IFFALSE 39892
// points := [ 7 , 25 , 8 ] ;
39873: LD_ADDR_VAR 0 9
39877: PUSH
39878: LD_INT 7
39880: PUSH
39881: LD_INT 25
39883: PUSH
39884: LD_INT 8
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: LIST
39891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39892: LD_VAR 0 6
39896: PPUSH
39897: CALL_OW 264
39901: PUSH
39902: LD_INT 5
39904: PUSH
39905: LD_INT 27
39907: PUSH
39908: LD_INT 44
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: LIST
39915: IN
39916: IFFALSE 39937
// points := [ 14 , 50 , 16 ] ;
39918: LD_ADDR_VAR 0 9
39922: PUSH
39923: LD_INT 14
39925: PUSH
39926: LD_INT 50
39928: PUSH
39929: LD_INT 16
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39937: LD_VAR 0 6
39941: PPUSH
39942: CALL_OW 264
39946: PUSH
39947: LD_INT 6
39949: PUSH
39950: LD_INT 46
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: IN
39957: IFFALSE 39978
// points := [ 32 , 120 , 70 ] ;
39959: LD_ADDR_VAR 0 9
39963: PUSH
39964: LD_INT 32
39966: PUSH
39967: LD_INT 120
39969: PUSH
39970: LD_INT 70
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: LIST
39977: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39978: LD_VAR 0 6
39982: PPUSH
39983: CALL_OW 264
39987: PUSH
39988: LD_INT 7
39990: PUSH
39991: LD_INT 28
39993: PUSH
39994: LD_INT 45
39996: PUSH
39997: LD_INT 92
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: IN
40006: IFFALSE 40027
// points := [ 35 , 20 , 45 ] ;
40008: LD_ADDR_VAR 0 9
40012: PUSH
40013: LD_INT 35
40015: PUSH
40016: LD_INT 20
40018: PUSH
40019: LD_INT 45
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: LIST
40026: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40027: LD_VAR 0 6
40031: PPUSH
40032: CALL_OW 264
40036: PUSH
40037: LD_INT 47
40039: PUSH
40040: EMPTY
40041: LIST
40042: IN
40043: IFFALSE 40064
// points := [ 67 , 45 , 75 ] ;
40045: LD_ADDR_VAR 0 9
40049: PUSH
40050: LD_INT 67
40052: PUSH
40053: LD_INT 45
40055: PUSH
40056: LD_INT 75
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: LIST
40063: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40064: LD_VAR 0 6
40068: PPUSH
40069: CALL_OW 264
40073: PUSH
40074: LD_INT 26
40076: PUSH
40077: EMPTY
40078: LIST
40079: IN
40080: IFFALSE 40101
// points := [ 120 , 30 , 80 ] ;
40082: LD_ADDR_VAR 0 9
40086: PUSH
40087: LD_INT 120
40089: PUSH
40090: LD_INT 30
40092: PUSH
40093: LD_INT 80
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: LIST
40100: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40101: LD_VAR 0 6
40105: PPUSH
40106: CALL_OW 264
40110: PUSH
40111: LD_INT 22
40113: PUSH
40114: EMPTY
40115: LIST
40116: IN
40117: IFFALSE 40138
// points := [ 40 , 1 , 1 ] ;
40119: LD_ADDR_VAR 0 9
40123: PUSH
40124: LD_INT 40
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: LIST
40137: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40138: LD_VAR 0 6
40142: PPUSH
40143: CALL_OW 264
40147: PUSH
40148: LD_INT 29
40150: PUSH
40151: EMPTY
40152: LIST
40153: IN
40154: IFFALSE 40175
// points := [ 70 , 200 , 400 ] ;
40156: LD_ADDR_VAR 0 9
40160: PUSH
40161: LD_INT 70
40163: PUSH
40164: LD_INT 200
40166: PUSH
40167: LD_INT 400
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40175: LD_VAR 0 6
40179: PPUSH
40180: CALL_OW 264
40184: PUSH
40185: LD_INT 14
40187: PUSH
40188: LD_INT 53
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: IN
40195: IFFALSE 40216
// points := [ 40 , 10 , 20 ] ;
40197: LD_ADDR_VAR 0 9
40201: PUSH
40202: LD_INT 40
40204: PUSH
40205: LD_INT 10
40207: PUSH
40208: LD_INT 20
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: LIST
40215: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40216: LD_VAR 0 6
40220: PPUSH
40221: CALL_OW 264
40225: PUSH
40226: LD_INT 9
40228: PUSH
40229: EMPTY
40230: LIST
40231: IN
40232: IFFALSE 40253
// points := [ 5 , 70 , 20 ] ;
40234: LD_ADDR_VAR 0 9
40238: PUSH
40239: LD_INT 5
40241: PUSH
40242: LD_INT 70
40244: PUSH
40245: LD_INT 20
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40253: LD_VAR 0 6
40257: PPUSH
40258: CALL_OW 264
40262: PUSH
40263: LD_INT 10
40265: PUSH
40266: EMPTY
40267: LIST
40268: IN
40269: IFFALSE 40290
// points := [ 35 , 110 , 70 ] ;
40271: LD_ADDR_VAR 0 9
40275: PUSH
40276: LD_INT 35
40278: PUSH
40279: LD_INT 110
40281: PUSH
40282: LD_INT 70
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: LIST
40289: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40290: LD_VAR 0 6
40294: PPUSH
40295: CALL_OW 265
40299: PUSH
40300: LD_INT 25
40302: EQUAL
40303: IFFALSE 40324
// points := [ 80 , 65 , 100 ] ;
40305: LD_ADDR_VAR 0 9
40309: PUSH
40310: LD_INT 80
40312: PUSH
40313: LD_INT 65
40315: PUSH
40316: LD_INT 100
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: LIST
40323: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40324: LD_VAR 0 6
40328: PPUSH
40329: CALL_OW 263
40333: PUSH
40334: LD_INT 1
40336: EQUAL
40337: IFFALSE 40372
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40339: LD_ADDR_VAR 0 10
40343: PUSH
40344: LD_VAR 0 10
40348: PUSH
40349: LD_VAR 0 6
40353: PPUSH
40354: CALL_OW 311
40358: PPUSH
40359: LD_INT 3
40361: PPUSH
40362: CALL_OW 259
40366: PUSH
40367: LD_INT 4
40369: MUL
40370: MUL
40371: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40372: LD_VAR 0 6
40376: PPUSH
40377: CALL_OW 263
40381: PUSH
40382: LD_INT 2
40384: EQUAL
40385: IFFALSE 40436
// begin j := IsControledBy ( i ) ;
40387: LD_ADDR_VAR 0 7
40391: PUSH
40392: LD_VAR 0 6
40396: PPUSH
40397: CALL_OW 312
40401: ST_TO_ADDR
// if j then
40402: LD_VAR 0 7
40406: IFFALSE 40436
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40408: LD_ADDR_VAR 0 10
40412: PUSH
40413: LD_VAR 0 10
40417: PUSH
40418: LD_VAR 0 7
40422: PPUSH
40423: LD_INT 3
40425: PPUSH
40426: CALL_OW 259
40430: PUSH
40431: LD_INT 3
40433: MUL
40434: MUL
40435: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40436: LD_VAR 0 6
40440: PPUSH
40441: CALL_OW 264
40445: PUSH
40446: LD_INT 5
40448: PUSH
40449: LD_INT 6
40451: PUSH
40452: LD_INT 46
40454: PUSH
40455: LD_INT 44
40457: PUSH
40458: LD_INT 47
40460: PUSH
40461: LD_INT 45
40463: PUSH
40464: LD_INT 28
40466: PUSH
40467: LD_INT 7
40469: PUSH
40470: LD_INT 27
40472: PUSH
40473: LD_INT 29
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: IN
40488: PUSH
40489: LD_VAR 0 1
40493: PPUSH
40494: LD_INT 52
40496: PPUSH
40497: CALL_OW 321
40501: PUSH
40502: LD_INT 2
40504: EQUAL
40505: AND
40506: IFFALSE 40523
// bpoints := bpoints * 1.2 ;
40508: LD_ADDR_VAR 0 10
40512: PUSH
40513: LD_VAR 0 10
40517: PUSH
40518: LD_REAL  1.20000000000000E+0000
40521: MUL
40522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40523: LD_VAR 0 6
40527: PPUSH
40528: CALL_OW 264
40532: PUSH
40533: LD_INT 6
40535: PUSH
40536: LD_INT 46
40538: PUSH
40539: LD_INT 47
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: LIST
40546: IN
40547: IFFALSE 40564
// bpoints := bpoints * 1.2 ;
40549: LD_ADDR_VAR 0 10
40553: PUSH
40554: LD_VAR 0 10
40558: PUSH
40559: LD_REAL  1.20000000000000E+0000
40562: MUL
40563: ST_TO_ADDR
// end ; unit_building :
40564: GO 40578
40566: LD_INT 3
40568: DOUBLE
40569: EQUAL
40570: IFTRUE 40574
40572: GO 40577
40574: POP
// ; end ;
40575: GO 40578
40577: POP
// for j = 1 to 3 do
40578: LD_ADDR_VAR 0 7
40582: PUSH
40583: DOUBLE
40584: LD_INT 1
40586: DEC
40587: ST_TO_ADDR
40588: LD_INT 3
40590: PUSH
40591: FOR_TO
40592: IFFALSE 40645
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40594: LD_ADDR_VAR 0 5
40598: PUSH
40599: LD_VAR 0 5
40603: PPUSH
40604: LD_VAR 0 7
40608: PPUSH
40609: LD_VAR 0 5
40613: PUSH
40614: LD_VAR 0 7
40618: ARRAY
40619: PUSH
40620: LD_VAR 0 9
40624: PUSH
40625: LD_VAR 0 7
40629: ARRAY
40630: PUSH
40631: LD_VAR 0 10
40635: MUL
40636: PLUS
40637: PPUSH
40638: CALL_OW 1
40642: ST_TO_ADDR
40643: GO 40591
40645: POP
40646: POP
// end ;
40647: GO 39126
40649: POP
40650: POP
// result := Replace ( result , 4 , tmp ) ;
40651: LD_ADDR_VAR 0 5
40655: PUSH
40656: LD_VAR 0 5
40660: PPUSH
40661: LD_INT 4
40663: PPUSH
40664: LD_VAR 0 8
40668: PPUSH
40669: CALL_OW 1
40673: ST_TO_ADDR
// end ;
40674: LD_VAR 0 5
40678: RET
// export function DangerAtRange ( unit , range ) ; begin
40679: LD_INT 0
40681: PPUSH
// if not unit then
40682: LD_VAR 0 1
40686: NOT
40687: IFFALSE 40691
// exit ;
40689: GO 40736
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40691: LD_ADDR_VAR 0 3
40695: PUSH
40696: LD_VAR 0 1
40700: PPUSH
40701: CALL_OW 255
40705: PPUSH
40706: LD_VAR 0 1
40710: PPUSH
40711: CALL_OW 250
40715: PPUSH
40716: LD_VAR 0 1
40720: PPUSH
40721: CALL_OW 251
40725: PPUSH
40726: LD_VAR 0 2
40730: PPUSH
40731: CALL 38978 0 4
40735: ST_TO_ADDR
// end ;
40736: LD_VAR 0 3
40740: RET
// export function DangerInArea ( side , area ) ; begin
40741: LD_INT 0
40743: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40744: LD_ADDR_VAR 0 3
40748: PUSH
40749: LD_VAR 0 2
40753: PPUSH
40754: LD_INT 81
40756: PUSH
40757: LD_VAR 0 1
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PPUSH
40766: CALL_OW 70
40770: ST_TO_ADDR
// end ;
40771: LD_VAR 0 3
40775: RET
// export function IsExtension ( b ) ; begin
40776: LD_INT 0
40778: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40779: LD_ADDR_VAR 0 2
40783: PUSH
40784: LD_VAR 0 1
40788: PUSH
40789: LD_INT 23
40791: PUSH
40792: LD_INT 20
40794: PUSH
40795: LD_INT 22
40797: PUSH
40798: LD_INT 17
40800: PUSH
40801: LD_INT 24
40803: PUSH
40804: LD_INT 21
40806: PUSH
40807: LD_INT 19
40809: PUSH
40810: LD_INT 16
40812: PUSH
40813: LD_INT 25
40815: PUSH
40816: LD_INT 18
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: IN
40831: ST_TO_ADDR
// end ;
40832: LD_VAR 0 2
40836: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40837: LD_INT 0
40839: PPUSH
40840: PPUSH
40841: PPUSH
// result := [ ] ;
40842: LD_ADDR_VAR 0 4
40846: PUSH
40847: EMPTY
40848: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40849: LD_ADDR_VAR 0 5
40853: PUSH
40854: LD_VAR 0 2
40858: PPUSH
40859: LD_INT 21
40861: PUSH
40862: LD_INT 3
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PPUSH
40869: CALL_OW 70
40873: ST_TO_ADDR
// if not tmp then
40874: LD_VAR 0 5
40878: NOT
40879: IFFALSE 40883
// exit ;
40881: GO 40947
// if checkLink then
40883: LD_VAR 0 3
40887: IFFALSE 40937
// begin for i in tmp do
40889: LD_ADDR_VAR 0 6
40893: PUSH
40894: LD_VAR 0 5
40898: PUSH
40899: FOR_IN
40900: IFFALSE 40935
// if GetBase ( i ) <> base then
40902: LD_VAR 0 6
40906: PPUSH
40907: CALL_OW 274
40911: PUSH
40912: LD_VAR 0 1
40916: NONEQUAL
40917: IFFALSE 40933
// ComLinkToBase ( base , i ) ;
40919: LD_VAR 0 1
40923: PPUSH
40924: LD_VAR 0 6
40928: PPUSH
40929: CALL_OW 169
40933: GO 40899
40935: POP
40936: POP
// end ; result := tmp ;
40937: LD_ADDR_VAR 0 4
40941: PUSH
40942: LD_VAR 0 5
40946: ST_TO_ADDR
// end ;
40947: LD_VAR 0 4
40951: RET
// export function ComComplete ( units , b ) ; var i ; begin
40952: LD_INT 0
40954: PPUSH
40955: PPUSH
// if not units then
40956: LD_VAR 0 1
40960: NOT
40961: IFFALSE 40965
// exit ;
40963: GO 41055
// for i in units do
40965: LD_ADDR_VAR 0 4
40969: PUSH
40970: LD_VAR 0 1
40974: PUSH
40975: FOR_IN
40976: IFFALSE 41053
// if BuildingStatus ( b ) = bs_build then
40978: LD_VAR 0 2
40982: PPUSH
40983: CALL_OW 461
40987: PUSH
40988: LD_INT 1
40990: EQUAL
40991: IFFALSE 41051
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40993: LD_VAR 0 4
40997: PPUSH
40998: LD_STRING h
41000: PUSH
41001: LD_VAR 0 2
41005: PPUSH
41006: CALL_OW 250
41010: PUSH
41011: LD_VAR 0 2
41015: PPUSH
41016: CALL_OW 251
41020: PUSH
41021: LD_VAR 0 2
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: PUSH
41044: EMPTY
41045: LIST
41046: PPUSH
41047: CALL_OW 446
41051: GO 40975
41053: POP
41054: POP
// end ;
41055: LD_VAR 0 3
41059: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41060: LD_INT 0
41062: PPUSH
41063: PPUSH
41064: PPUSH
41065: PPUSH
41066: PPUSH
41067: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41068: LD_VAR 0 1
41072: NOT
41073: PUSH
41074: LD_VAR 0 1
41078: PPUSH
41079: CALL_OW 263
41083: PUSH
41084: LD_INT 2
41086: NONEQUAL
41087: OR
41088: IFFALSE 41092
// exit ;
41090: GO 41408
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41092: LD_ADDR_VAR 0 6
41096: PUSH
41097: LD_INT 22
41099: PUSH
41100: LD_VAR 0 1
41104: PPUSH
41105: CALL_OW 255
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: LD_INT 30
41119: PUSH
41120: LD_INT 36
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 34
41129: PUSH
41130: LD_INT 31
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: LIST
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PPUSH
41146: CALL_OW 69
41150: ST_TO_ADDR
// if not tmp then
41151: LD_VAR 0 6
41155: NOT
41156: IFFALSE 41160
// exit ;
41158: GO 41408
// result := [ ] ;
41160: LD_ADDR_VAR 0 2
41164: PUSH
41165: EMPTY
41166: ST_TO_ADDR
// for i in tmp do
41167: LD_ADDR_VAR 0 3
41171: PUSH
41172: LD_VAR 0 6
41176: PUSH
41177: FOR_IN
41178: IFFALSE 41249
// begin t := UnitsInside ( i ) ;
41180: LD_ADDR_VAR 0 4
41184: PUSH
41185: LD_VAR 0 3
41189: PPUSH
41190: CALL_OW 313
41194: ST_TO_ADDR
// if t then
41195: LD_VAR 0 4
41199: IFFALSE 41247
// for j in t do
41201: LD_ADDR_VAR 0 7
41205: PUSH
41206: LD_VAR 0 4
41210: PUSH
41211: FOR_IN
41212: IFFALSE 41245
// result := Replace ( result , result + 1 , j ) ;
41214: LD_ADDR_VAR 0 2
41218: PUSH
41219: LD_VAR 0 2
41223: PPUSH
41224: LD_VAR 0 2
41228: PUSH
41229: LD_INT 1
41231: PLUS
41232: PPUSH
41233: LD_VAR 0 7
41237: PPUSH
41238: CALL_OW 1
41242: ST_TO_ADDR
41243: GO 41211
41245: POP
41246: POP
// end ;
41247: GO 41177
41249: POP
41250: POP
// if not result then
41251: LD_VAR 0 2
41255: NOT
41256: IFFALSE 41260
// exit ;
41258: GO 41408
// mech := result [ 1 ] ;
41260: LD_ADDR_VAR 0 5
41264: PUSH
41265: LD_VAR 0 2
41269: PUSH
41270: LD_INT 1
41272: ARRAY
41273: ST_TO_ADDR
// if result > 1 then
41274: LD_VAR 0 2
41278: PUSH
41279: LD_INT 1
41281: GREATER
41282: IFFALSE 41394
// begin for i = 2 to result do
41284: LD_ADDR_VAR 0 3
41288: PUSH
41289: DOUBLE
41290: LD_INT 2
41292: DEC
41293: ST_TO_ADDR
41294: LD_VAR 0 2
41298: PUSH
41299: FOR_TO
41300: IFFALSE 41392
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41302: LD_ADDR_VAR 0 4
41306: PUSH
41307: LD_VAR 0 2
41311: PUSH
41312: LD_VAR 0 3
41316: ARRAY
41317: PPUSH
41318: LD_INT 3
41320: PPUSH
41321: CALL_OW 259
41325: PUSH
41326: LD_VAR 0 2
41330: PUSH
41331: LD_VAR 0 3
41335: ARRAY
41336: PPUSH
41337: CALL_OW 432
41341: MINUS
41342: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41343: LD_VAR 0 4
41347: PUSH
41348: LD_VAR 0 5
41352: PPUSH
41353: LD_INT 3
41355: PPUSH
41356: CALL_OW 259
41360: PUSH
41361: LD_VAR 0 5
41365: PPUSH
41366: CALL_OW 432
41370: MINUS
41371: GREATEREQUAL
41372: IFFALSE 41390
// mech := result [ i ] ;
41374: LD_ADDR_VAR 0 5
41378: PUSH
41379: LD_VAR 0 2
41383: PUSH
41384: LD_VAR 0 3
41388: ARRAY
41389: ST_TO_ADDR
// end ;
41390: GO 41299
41392: POP
41393: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41394: LD_VAR 0 1
41398: PPUSH
41399: LD_VAR 0 5
41403: PPUSH
41404: CALL_OW 135
// end ;
41408: LD_VAR 0 2
41412: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41413: LD_INT 0
41415: PPUSH
41416: PPUSH
41417: PPUSH
41418: PPUSH
41419: PPUSH
41420: PPUSH
41421: PPUSH
41422: PPUSH
41423: PPUSH
41424: PPUSH
41425: PPUSH
41426: PPUSH
41427: PPUSH
// result := [ ] ;
41428: LD_ADDR_VAR 0 7
41432: PUSH
41433: EMPTY
41434: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41435: LD_VAR 0 1
41439: PPUSH
41440: CALL_OW 266
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: IN
41455: NOT
41456: IFFALSE 41460
// exit ;
41458: GO 43094
// if name then
41460: LD_VAR 0 3
41464: IFFALSE 41480
// SetBName ( base_dep , name ) ;
41466: LD_VAR 0 1
41470: PPUSH
41471: LD_VAR 0 3
41475: PPUSH
41476: CALL_OW 500
// base := GetBase ( base_dep ) ;
41480: LD_ADDR_VAR 0 15
41484: PUSH
41485: LD_VAR 0 1
41489: PPUSH
41490: CALL_OW 274
41494: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41495: LD_ADDR_VAR 0 16
41499: PUSH
41500: LD_VAR 0 1
41504: PPUSH
41505: CALL_OW 255
41509: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41510: LD_ADDR_VAR 0 17
41514: PUSH
41515: LD_VAR 0 1
41519: PPUSH
41520: CALL_OW 248
41524: ST_TO_ADDR
// if sources then
41525: LD_VAR 0 5
41529: IFFALSE 41576
// for i = 1 to 3 do
41531: LD_ADDR_VAR 0 8
41535: PUSH
41536: DOUBLE
41537: LD_INT 1
41539: DEC
41540: ST_TO_ADDR
41541: LD_INT 3
41543: PUSH
41544: FOR_TO
41545: IFFALSE 41574
// AddResourceType ( base , i , sources [ i ] ) ;
41547: LD_VAR 0 15
41551: PPUSH
41552: LD_VAR 0 8
41556: PPUSH
41557: LD_VAR 0 5
41561: PUSH
41562: LD_VAR 0 8
41566: ARRAY
41567: PPUSH
41568: CALL_OW 276
41572: GO 41544
41574: POP
41575: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41576: LD_ADDR_VAR 0 18
41580: PUSH
41581: LD_VAR 0 15
41585: PPUSH
41586: LD_VAR 0 2
41590: PPUSH
41591: LD_INT 1
41593: PPUSH
41594: CALL 40837 0 3
41598: ST_TO_ADDR
// InitHc ;
41599: CALL_OW 19
// InitUc ;
41603: CALL_OW 18
// uc_side := side ;
41607: LD_ADDR_OWVAR 20
41611: PUSH
41612: LD_VAR 0 16
41616: ST_TO_ADDR
// uc_nation := nation ;
41617: LD_ADDR_OWVAR 21
41621: PUSH
41622: LD_VAR 0 17
41626: ST_TO_ADDR
// if buildings then
41627: LD_VAR 0 18
41631: IFFALSE 42953
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41633: LD_ADDR_VAR 0 19
41637: PUSH
41638: LD_VAR 0 18
41642: PPUSH
41643: LD_INT 2
41645: PUSH
41646: LD_INT 30
41648: PUSH
41649: LD_INT 29
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 30
41658: PUSH
41659: LD_INT 30
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: LIST
41670: PPUSH
41671: CALL_OW 72
41675: ST_TO_ADDR
// if tmp then
41676: LD_VAR 0 19
41680: IFFALSE 41728
// for i in tmp do
41682: LD_ADDR_VAR 0 8
41686: PUSH
41687: LD_VAR 0 19
41691: PUSH
41692: FOR_IN
41693: IFFALSE 41726
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41695: LD_VAR 0 8
41699: PPUSH
41700: CALL_OW 250
41704: PPUSH
41705: LD_VAR 0 8
41709: PPUSH
41710: CALL_OW 251
41714: PPUSH
41715: LD_VAR 0 16
41719: PPUSH
41720: CALL_OW 441
41724: GO 41692
41726: POP
41727: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41728: LD_VAR 0 18
41732: PPUSH
41733: LD_INT 2
41735: PUSH
41736: LD_INT 30
41738: PUSH
41739: LD_INT 32
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 30
41748: PUSH
41749: LD_INT 33
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: LIST
41760: PPUSH
41761: CALL_OW 72
41765: IFFALSE 41853
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41767: LD_ADDR_VAR 0 8
41771: PUSH
41772: LD_VAR 0 18
41776: PPUSH
41777: LD_INT 2
41779: PUSH
41780: LD_INT 30
41782: PUSH
41783: LD_INT 32
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 30
41792: PUSH
41793: LD_INT 33
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: LIST
41804: PPUSH
41805: CALL_OW 72
41809: PUSH
41810: FOR_IN
41811: IFFALSE 41851
// begin if not GetBWeapon ( i ) then
41813: LD_VAR 0 8
41817: PPUSH
41818: CALL_OW 269
41822: NOT
41823: IFFALSE 41849
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41825: LD_VAR 0 8
41829: PPUSH
41830: LD_VAR 0 8
41834: PPUSH
41835: LD_VAR 0 2
41839: PPUSH
41840: CALL 43099 0 2
41844: PPUSH
41845: CALL_OW 431
// end ;
41849: GO 41810
41851: POP
41852: POP
// end ; for i = 1 to personel do
41853: LD_ADDR_VAR 0 8
41857: PUSH
41858: DOUBLE
41859: LD_INT 1
41861: DEC
41862: ST_TO_ADDR
41863: LD_VAR 0 6
41867: PUSH
41868: FOR_TO
41869: IFFALSE 42933
// begin if i > 4 then
41871: LD_VAR 0 8
41875: PUSH
41876: LD_INT 4
41878: GREATER
41879: IFFALSE 41883
// break ;
41881: GO 42933
// case i of 1 :
41883: LD_VAR 0 8
41887: PUSH
41888: LD_INT 1
41890: DOUBLE
41891: EQUAL
41892: IFTRUE 41896
41894: GO 41976
41896: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41897: LD_ADDR_VAR 0 12
41901: PUSH
41902: LD_VAR 0 18
41906: PPUSH
41907: LD_INT 22
41909: PUSH
41910: LD_VAR 0 16
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 58
41921: PUSH
41922: EMPTY
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 30
41930: PUSH
41931: LD_INT 32
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 30
41940: PUSH
41941: LD_INT 4
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 30
41950: PUSH
41951: LD_INT 5
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: LIST
41968: PPUSH
41969: CALL_OW 72
41973: ST_TO_ADDR
41974: GO 42198
41976: LD_INT 2
41978: DOUBLE
41979: EQUAL
41980: IFTRUE 41984
41982: GO 42046
41984: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41985: LD_ADDR_VAR 0 12
41989: PUSH
41990: LD_VAR 0 18
41994: PPUSH
41995: LD_INT 22
41997: PUSH
41998: LD_VAR 0 16
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: LD_INT 30
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 30
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PPUSH
42039: CALL_OW 72
42043: ST_TO_ADDR
42044: GO 42198
42046: LD_INT 3
42048: DOUBLE
42049: EQUAL
42050: IFTRUE 42054
42052: GO 42116
42054: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42055: LD_ADDR_VAR 0 12
42059: PUSH
42060: LD_VAR 0 18
42064: PPUSH
42065: LD_INT 22
42067: PUSH
42068: LD_VAR 0 16
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 2
42079: PUSH
42080: LD_INT 30
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 30
42092: PUSH
42093: LD_INT 3
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: LIST
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PPUSH
42109: CALL_OW 72
42113: ST_TO_ADDR
42114: GO 42198
42116: LD_INT 4
42118: DOUBLE
42119: EQUAL
42120: IFTRUE 42124
42122: GO 42197
42124: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42125: LD_ADDR_VAR 0 12
42129: PUSH
42130: LD_VAR 0 18
42134: PPUSH
42135: LD_INT 22
42137: PUSH
42138: LD_VAR 0 16
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: LD_INT 30
42152: PUSH
42153: LD_INT 6
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 30
42162: PUSH
42163: LD_INT 7
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 30
42172: PUSH
42173: LD_INT 8
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PPUSH
42190: CALL_OW 72
42194: ST_TO_ADDR
42195: GO 42198
42197: POP
// if i = 1 then
42198: LD_VAR 0 8
42202: PUSH
42203: LD_INT 1
42205: EQUAL
42206: IFFALSE 42317
// begin tmp := [ ] ;
42208: LD_ADDR_VAR 0 19
42212: PUSH
42213: EMPTY
42214: ST_TO_ADDR
// for j in f do
42215: LD_ADDR_VAR 0 9
42219: PUSH
42220: LD_VAR 0 12
42224: PUSH
42225: FOR_IN
42226: IFFALSE 42299
// if GetBType ( j ) = b_bunker then
42228: LD_VAR 0 9
42232: PPUSH
42233: CALL_OW 266
42237: PUSH
42238: LD_INT 32
42240: EQUAL
42241: IFFALSE 42268
// tmp := Insert ( tmp , 1 , j ) else
42243: LD_ADDR_VAR 0 19
42247: PUSH
42248: LD_VAR 0 19
42252: PPUSH
42253: LD_INT 1
42255: PPUSH
42256: LD_VAR 0 9
42260: PPUSH
42261: CALL_OW 2
42265: ST_TO_ADDR
42266: GO 42297
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42268: LD_ADDR_VAR 0 19
42272: PUSH
42273: LD_VAR 0 19
42277: PPUSH
42278: LD_VAR 0 19
42282: PUSH
42283: LD_INT 1
42285: PLUS
42286: PPUSH
42287: LD_VAR 0 9
42291: PPUSH
42292: CALL_OW 2
42296: ST_TO_ADDR
42297: GO 42225
42299: POP
42300: POP
// if tmp then
42301: LD_VAR 0 19
42305: IFFALSE 42317
// f := tmp ;
42307: LD_ADDR_VAR 0 12
42311: PUSH
42312: LD_VAR 0 19
42316: ST_TO_ADDR
// end ; x := personel [ i ] ;
42317: LD_ADDR_VAR 0 13
42321: PUSH
42322: LD_VAR 0 6
42326: PUSH
42327: LD_VAR 0 8
42331: ARRAY
42332: ST_TO_ADDR
// if x = - 1 then
42333: LD_VAR 0 13
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: EQUAL
42342: IFFALSE 42551
// begin for j in f do
42344: LD_ADDR_VAR 0 9
42348: PUSH
42349: LD_VAR 0 12
42353: PUSH
42354: FOR_IN
42355: IFFALSE 42547
// repeat InitHc ;
42357: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42361: LD_VAR 0 9
42365: PPUSH
42366: CALL_OW 266
42370: PUSH
42371: LD_INT 5
42373: EQUAL
42374: IFFALSE 42444
// begin if UnitsInside ( j ) < 3 then
42376: LD_VAR 0 9
42380: PPUSH
42381: CALL_OW 313
42385: PUSH
42386: LD_INT 3
42388: LESS
42389: IFFALSE 42425
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42391: LD_INT 0
42393: PPUSH
42394: LD_INT 5
42396: PUSH
42397: LD_INT 8
42399: PUSH
42400: LD_INT 9
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: PUSH
42408: LD_VAR 0 17
42412: ARRAY
42413: PPUSH
42414: LD_VAR 0 4
42418: PPUSH
42419: CALL_OW 380
42423: GO 42442
// PrepareHuman ( false , i , skill ) ;
42425: LD_INT 0
42427: PPUSH
42428: LD_VAR 0 8
42432: PPUSH
42433: LD_VAR 0 4
42437: PPUSH
42438: CALL_OW 380
// end else
42442: GO 42461
// PrepareHuman ( false , i , skill ) ;
42444: LD_INT 0
42446: PPUSH
42447: LD_VAR 0 8
42451: PPUSH
42452: LD_VAR 0 4
42456: PPUSH
42457: CALL_OW 380
// un := CreateHuman ;
42461: LD_ADDR_VAR 0 14
42465: PUSH
42466: CALL_OW 44
42470: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42471: LD_ADDR_VAR 0 7
42475: PUSH
42476: LD_VAR 0 7
42480: PPUSH
42481: LD_INT 1
42483: PPUSH
42484: LD_VAR 0 14
42488: PPUSH
42489: CALL_OW 2
42493: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42494: LD_VAR 0 14
42498: PPUSH
42499: LD_VAR 0 9
42503: PPUSH
42504: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42508: LD_VAR 0 9
42512: PPUSH
42513: CALL_OW 313
42517: PUSH
42518: LD_INT 6
42520: EQUAL
42521: PUSH
42522: LD_VAR 0 9
42526: PPUSH
42527: CALL_OW 266
42531: PUSH
42532: LD_INT 32
42534: PUSH
42535: LD_INT 31
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: IN
42542: OR
42543: IFFALSE 42357
42545: GO 42354
42547: POP
42548: POP
// end else
42549: GO 42931
// for j = 1 to x do
42551: LD_ADDR_VAR 0 9
42555: PUSH
42556: DOUBLE
42557: LD_INT 1
42559: DEC
42560: ST_TO_ADDR
42561: LD_VAR 0 13
42565: PUSH
42566: FOR_TO
42567: IFFALSE 42929
// begin InitHc ;
42569: CALL_OW 19
// if not f then
42573: LD_VAR 0 12
42577: NOT
42578: IFFALSE 42667
// begin PrepareHuman ( false , i , skill ) ;
42580: LD_INT 0
42582: PPUSH
42583: LD_VAR 0 8
42587: PPUSH
42588: LD_VAR 0 4
42592: PPUSH
42593: CALL_OW 380
// un := CreateHuman ;
42597: LD_ADDR_VAR 0 14
42601: PUSH
42602: CALL_OW 44
42606: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42607: LD_ADDR_VAR 0 7
42611: PUSH
42612: LD_VAR 0 7
42616: PPUSH
42617: LD_INT 1
42619: PPUSH
42620: LD_VAR 0 14
42624: PPUSH
42625: CALL_OW 2
42629: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42630: LD_VAR 0 14
42634: PPUSH
42635: LD_VAR 0 1
42639: PPUSH
42640: CALL_OW 250
42644: PPUSH
42645: LD_VAR 0 1
42649: PPUSH
42650: CALL_OW 251
42654: PPUSH
42655: LD_INT 10
42657: PPUSH
42658: LD_INT 0
42660: PPUSH
42661: CALL_OW 50
// continue ;
42665: GO 42566
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42667: LD_VAR 0 12
42671: PUSH
42672: LD_INT 1
42674: ARRAY
42675: PPUSH
42676: CALL_OW 313
42680: PUSH
42681: LD_VAR 0 12
42685: PUSH
42686: LD_INT 1
42688: ARRAY
42689: PPUSH
42690: CALL_OW 266
42694: PUSH
42695: LD_INT 32
42697: PUSH
42698: LD_INT 31
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: IN
42705: AND
42706: PUSH
42707: LD_VAR 0 12
42711: PUSH
42712: LD_INT 1
42714: ARRAY
42715: PPUSH
42716: CALL_OW 313
42720: PUSH
42721: LD_INT 6
42723: EQUAL
42724: OR
42725: IFFALSE 42745
// f := Delete ( f , 1 ) ;
42727: LD_ADDR_VAR 0 12
42731: PUSH
42732: LD_VAR 0 12
42736: PPUSH
42737: LD_INT 1
42739: PPUSH
42740: CALL_OW 3
42744: ST_TO_ADDR
// if not f then
42745: LD_VAR 0 12
42749: NOT
42750: IFFALSE 42768
// begin x := x + 2 ;
42752: LD_ADDR_VAR 0 13
42756: PUSH
42757: LD_VAR 0 13
42761: PUSH
42762: LD_INT 2
42764: PLUS
42765: ST_TO_ADDR
// continue ;
42766: GO 42566
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42768: LD_VAR 0 12
42772: PUSH
42773: LD_INT 1
42775: ARRAY
42776: PPUSH
42777: CALL_OW 266
42781: PUSH
42782: LD_INT 5
42784: EQUAL
42785: IFFALSE 42859
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42787: LD_VAR 0 12
42791: PUSH
42792: LD_INT 1
42794: ARRAY
42795: PPUSH
42796: CALL_OW 313
42800: PUSH
42801: LD_INT 3
42803: LESS
42804: IFFALSE 42840
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42806: LD_INT 0
42808: PPUSH
42809: LD_INT 5
42811: PUSH
42812: LD_INT 8
42814: PUSH
42815: LD_INT 9
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: PUSH
42823: LD_VAR 0 17
42827: ARRAY
42828: PPUSH
42829: LD_VAR 0 4
42833: PPUSH
42834: CALL_OW 380
42838: GO 42857
// PrepareHuman ( false , i , skill ) ;
42840: LD_INT 0
42842: PPUSH
42843: LD_VAR 0 8
42847: PPUSH
42848: LD_VAR 0 4
42852: PPUSH
42853: CALL_OW 380
// end else
42857: GO 42876
// PrepareHuman ( false , i , skill ) ;
42859: LD_INT 0
42861: PPUSH
42862: LD_VAR 0 8
42866: PPUSH
42867: LD_VAR 0 4
42871: PPUSH
42872: CALL_OW 380
// un := CreateHuman ;
42876: LD_ADDR_VAR 0 14
42880: PUSH
42881: CALL_OW 44
42885: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42886: LD_ADDR_VAR 0 7
42890: PUSH
42891: LD_VAR 0 7
42895: PPUSH
42896: LD_INT 1
42898: PPUSH
42899: LD_VAR 0 14
42903: PPUSH
42904: CALL_OW 2
42908: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42909: LD_VAR 0 14
42913: PPUSH
42914: LD_VAR 0 12
42918: PUSH
42919: LD_INT 1
42921: ARRAY
42922: PPUSH
42923: CALL_OW 52
// end ;
42927: GO 42566
42929: POP
42930: POP
// end ;
42931: GO 41868
42933: POP
42934: POP
// result := result ^ buildings ;
42935: LD_ADDR_VAR 0 7
42939: PUSH
42940: LD_VAR 0 7
42944: PUSH
42945: LD_VAR 0 18
42949: ADD
42950: ST_TO_ADDR
// end else
42951: GO 43094
// begin for i = 1 to personel do
42953: LD_ADDR_VAR 0 8
42957: PUSH
42958: DOUBLE
42959: LD_INT 1
42961: DEC
42962: ST_TO_ADDR
42963: LD_VAR 0 6
42967: PUSH
42968: FOR_TO
42969: IFFALSE 43092
// begin if i > 4 then
42971: LD_VAR 0 8
42975: PUSH
42976: LD_INT 4
42978: GREATER
42979: IFFALSE 42983
// break ;
42981: GO 43092
// x := personel [ i ] ;
42983: LD_ADDR_VAR 0 13
42987: PUSH
42988: LD_VAR 0 6
42992: PUSH
42993: LD_VAR 0 8
42997: ARRAY
42998: ST_TO_ADDR
// if x = - 1 then
42999: LD_VAR 0 13
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: EQUAL
43008: IFFALSE 43012
// continue ;
43010: GO 42968
// PrepareHuman ( false , i , skill ) ;
43012: LD_INT 0
43014: PPUSH
43015: LD_VAR 0 8
43019: PPUSH
43020: LD_VAR 0 4
43024: PPUSH
43025: CALL_OW 380
// un := CreateHuman ;
43029: LD_ADDR_VAR 0 14
43033: PUSH
43034: CALL_OW 44
43038: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43039: LD_VAR 0 14
43043: PPUSH
43044: LD_VAR 0 1
43048: PPUSH
43049: CALL_OW 250
43053: PPUSH
43054: LD_VAR 0 1
43058: PPUSH
43059: CALL_OW 251
43063: PPUSH
43064: LD_INT 10
43066: PPUSH
43067: LD_INT 0
43069: PPUSH
43070: CALL_OW 50
// result := result ^ un ;
43074: LD_ADDR_VAR 0 7
43078: PUSH
43079: LD_VAR 0 7
43083: PUSH
43084: LD_VAR 0 14
43088: ADD
43089: ST_TO_ADDR
// end ;
43090: GO 42968
43092: POP
43093: POP
// end ; end ;
43094: LD_VAR 0 7
43098: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43099: LD_INT 0
43101: PPUSH
43102: PPUSH
43103: PPUSH
43104: PPUSH
43105: PPUSH
43106: PPUSH
43107: PPUSH
43108: PPUSH
43109: PPUSH
43110: PPUSH
43111: PPUSH
43112: PPUSH
43113: PPUSH
43114: PPUSH
43115: PPUSH
43116: PPUSH
// result := false ;
43117: LD_ADDR_VAR 0 3
43121: PUSH
43122: LD_INT 0
43124: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43125: LD_VAR 0 1
43129: NOT
43130: PUSH
43131: LD_VAR 0 1
43135: PPUSH
43136: CALL_OW 266
43140: PUSH
43141: LD_INT 32
43143: PUSH
43144: LD_INT 33
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: IN
43151: NOT
43152: OR
43153: IFFALSE 43157
// exit ;
43155: GO 44266
// nat := GetNation ( tower ) ;
43157: LD_ADDR_VAR 0 12
43161: PUSH
43162: LD_VAR 0 1
43166: PPUSH
43167: CALL_OW 248
43171: ST_TO_ADDR
// side := GetSide ( tower ) ;
43172: LD_ADDR_VAR 0 16
43176: PUSH
43177: LD_VAR 0 1
43181: PPUSH
43182: CALL_OW 255
43186: ST_TO_ADDR
// x := GetX ( tower ) ;
43187: LD_ADDR_VAR 0 10
43191: PUSH
43192: LD_VAR 0 1
43196: PPUSH
43197: CALL_OW 250
43201: ST_TO_ADDR
// y := GetY ( tower ) ;
43202: LD_ADDR_VAR 0 11
43206: PUSH
43207: LD_VAR 0 1
43211: PPUSH
43212: CALL_OW 251
43216: ST_TO_ADDR
// if not x or not y then
43217: LD_VAR 0 10
43221: NOT
43222: PUSH
43223: LD_VAR 0 11
43227: NOT
43228: OR
43229: IFFALSE 43233
// exit ;
43231: GO 44266
// weapon := 0 ;
43233: LD_ADDR_VAR 0 18
43237: PUSH
43238: LD_INT 0
43240: ST_TO_ADDR
// fac_list := [ ] ;
43241: LD_ADDR_VAR 0 17
43245: PUSH
43246: EMPTY
43247: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43248: LD_ADDR_VAR 0 6
43252: PUSH
43253: LD_VAR 0 1
43257: PPUSH
43258: CALL_OW 274
43262: PPUSH
43263: LD_VAR 0 2
43267: PPUSH
43268: LD_INT 0
43270: PPUSH
43271: CALL 40837 0 3
43275: PPUSH
43276: LD_INT 30
43278: PUSH
43279: LD_INT 3
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PPUSH
43286: CALL_OW 72
43290: ST_TO_ADDR
// if not factories then
43291: LD_VAR 0 6
43295: NOT
43296: IFFALSE 43300
// exit ;
43298: GO 44266
// for i in factories do
43300: LD_ADDR_VAR 0 8
43304: PUSH
43305: LD_VAR 0 6
43309: PUSH
43310: FOR_IN
43311: IFFALSE 43336
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43313: LD_ADDR_VAR 0 17
43317: PUSH
43318: LD_VAR 0 17
43322: PUSH
43323: LD_VAR 0 8
43327: PPUSH
43328: CALL_OW 478
43332: UNION
43333: ST_TO_ADDR
43334: GO 43310
43336: POP
43337: POP
// if not fac_list then
43338: LD_VAR 0 17
43342: NOT
43343: IFFALSE 43347
// exit ;
43345: GO 44266
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43347: LD_ADDR_VAR 0 5
43351: PUSH
43352: LD_INT 4
43354: PUSH
43355: LD_INT 5
43357: PUSH
43358: LD_INT 9
43360: PUSH
43361: LD_INT 10
43363: PUSH
43364: LD_INT 6
43366: PUSH
43367: LD_INT 7
43369: PUSH
43370: LD_INT 11
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 27
43384: PUSH
43385: LD_INT 28
43387: PUSH
43388: LD_INT 26
43390: PUSH
43391: LD_INT 30
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 43
43402: PUSH
43403: LD_INT 44
43405: PUSH
43406: LD_INT 46
43408: PUSH
43409: LD_INT 45
43411: PUSH
43412: LD_INT 47
43414: PUSH
43415: LD_INT 49
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: PUSH
43431: LD_VAR 0 12
43435: ARRAY
43436: ST_TO_ADDR
// list := list isect fac_list ;
43437: LD_ADDR_VAR 0 5
43441: PUSH
43442: LD_VAR 0 5
43446: PUSH
43447: LD_VAR 0 17
43451: ISECT
43452: ST_TO_ADDR
// if not list then
43453: LD_VAR 0 5
43457: NOT
43458: IFFALSE 43462
// exit ;
43460: GO 44266
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43462: LD_VAR 0 12
43466: PUSH
43467: LD_INT 3
43469: EQUAL
43470: PUSH
43471: LD_INT 49
43473: PUSH
43474: LD_VAR 0 5
43478: IN
43479: AND
43480: PUSH
43481: LD_INT 31
43483: PPUSH
43484: LD_VAR 0 16
43488: PPUSH
43489: CALL_OW 321
43493: PUSH
43494: LD_INT 2
43496: EQUAL
43497: AND
43498: IFFALSE 43558
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43500: LD_INT 22
43502: PUSH
43503: LD_VAR 0 16
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 35
43514: PUSH
43515: LD_INT 49
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 91
43524: PUSH
43525: LD_VAR 0 1
43529: PUSH
43530: LD_INT 10
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: LIST
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: LIST
43542: PPUSH
43543: CALL_OW 69
43547: NOT
43548: IFFALSE 43558
// weapon := ru_time_lapser ;
43550: LD_ADDR_VAR 0 18
43554: PUSH
43555: LD_INT 49
43557: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43558: LD_VAR 0 12
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: IN
43573: PUSH
43574: LD_INT 11
43576: PUSH
43577: LD_VAR 0 5
43581: IN
43582: PUSH
43583: LD_INT 30
43585: PUSH
43586: LD_VAR 0 5
43590: IN
43591: OR
43592: AND
43593: PUSH
43594: LD_INT 6
43596: PPUSH
43597: LD_VAR 0 16
43601: PPUSH
43602: CALL_OW 321
43606: PUSH
43607: LD_INT 2
43609: EQUAL
43610: AND
43611: IFFALSE 43776
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43613: LD_INT 22
43615: PUSH
43616: LD_VAR 0 16
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: PUSH
43628: LD_INT 35
43630: PUSH
43631: LD_INT 11
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 35
43640: PUSH
43641: LD_INT 30
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 91
43655: PUSH
43656: LD_VAR 0 1
43660: PUSH
43661: LD_INT 18
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: LIST
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: LIST
43673: PPUSH
43674: CALL_OW 69
43678: NOT
43679: PUSH
43680: LD_INT 22
43682: PUSH
43683: LD_VAR 0 16
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 2
43694: PUSH
43695: LD_INT 30
43697: PUSH
43698: LD_INT 32
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 30
43707: PUSH
43708: LD_INT 33
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 91
43722: PUSH
43723: LD_VAR 0 1
43727: PUSH
43728: LD_INT 12
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: LIST
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: LIST
43740: PUSH
43741: EMPTY
43742: LIST
43743: PPUSH
43744: CALL_OW 69
43748: PUSH
43749: LD_INT 2
43751: GREATER
43752: AND
43753: IFFALSE 43776
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43755: LD_ADDR_VAR 0 18
43759: PUSH
43760: LD_INT 11
43762: PUSH
43763: LD_INT 30
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_VAR 0 12
43774: ARRAY
43775: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43776: LD_VAR 0 18
43780: NOT
43781: PUSH
43782: LD_INT 40
43784: PPUSH
43785: LD_VAR 0 16
43789: PPUSH
43790: CALL_OW 321
43794: PUSH
43795: LD_INT 2
43797: EQUAL
43798: AND
43799: PUSH
43800: LD_INT 7
43802: PUSH
43803: LD_VAR 0 5
43807: IN
43808: PUSH
43809: LD_INT 28
43811: PUSH
43812: LD_VAR 0 5
43816: IN
43817: OR
43818: PUSH
43819: LD_INT 45
43821: PUSH
43822: LD_VAR 0 5
43826: IN
43827: OR
43828: AND
43829: IFFALSE 44083
// begin hex := GetHexInfo ( x , y ) ;
43831: LD_ADDR_VAR 0 4
43835: PUSH
43836: LD_VAR 0 10
43840: PPUSH
43841: LD_VAR 0 11
43845: PPUSH
43846: CALL_OW 546
43850: ST_TO_ADDR
// if hex [ 1 ] then
43851: LD_VAR 0 4
43855: PUSH
43856: LD_INT 1
43858: ARRAY
43859: IFFALSE 43863
// exit ;
43861: GO 44266
// height := hex [ 2 ] ;
43863: LD_ADDR_VAR 0 15
43867: PUSH
43868: LD_VAR 0 4
43872: PUSH
43873: LD_INT 2
43875: ARRAY
43876: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43877: LD_ADDR_VAR 0 14
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: LD_INT 3
43890: PUSH
43891: LD_INT 5
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: ST_TO_ADDR
// for i in tmp do
43900: LD_ADDR_VAR 0 8
43904: PUSH
43905: LD_VAR 0 14
43909: PUSH
43910: FOR_IN
43911: IFFALSE 44081
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43913: LD_ADDR_VAR 0 9
43917: PUSH
43918: LD_VAR 0 10
43922: PPUSH
43923: LD_VAR 0 8
43927: PPUSH
43928: LD_INT 5
43930: PPUSH
43931: CALL_OW 272
43935: PUSH
43936: LD_VAR 0 11
43940: PPUSH
43941: LD_VAR 0 8
43945: PPUSH
43946: LD_INT 5
43948: PPUSH
43949: CALL_OW 273
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43958: LD_VAR 0 9
43962: PUSH
43963: LD_INT 1
43965: ARRAY
43966: PPUSH
43967: LD_VAR 0 9
43971: PUSH
43972: LD_INT 2
43974: ARRAY
43975: PPUSH
43976: CALL_OW 488
43980: IFFALSE 44079
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43982: LD_ADDR_VAR 0 4
43986: PUSH
43987: LD_VAR 0 9
43991: PUSH
43992: LD_INT 1
43994: ARRAY
43995: PPUSH
43996: LD_VAR 0 9
44000: PUSH
44001: LD_INT 2
44003: ARRAY
44004: PPUSH
44005: CALL_OW 546
44009: ST_TO_ADDR
// if hex [ 1 ] then
44010: LD_VAR 0 4
44014: PUSH
44015: LD_INT 1
44017: ARRAY
44018: IFFALSE 44022
// continue ;
44020: GO 43910
// h := hex [ 2 ] ;
44022: LD_ADDR_VAR 0 13
44026: PUSH
44027: LD_VAR 0 4
44031: PUSH
44032: LD_INT 2
44034: ARRAY
44035: ST_TO_ADDR
// if h + 7 < height then
44036: LD_VAR 0 13
44040: PUSH
44041: LD_INT 7
44043: PLUS
44044: PUSH
44045: LD_VAR 0 15
44049: LESS
44050: IFFALSE 44079
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44052: LD_ADDR_VAR 0 18
44056: PUSH
44057: LD_INT 7
44059: PUSH
44060: LD_INT 28
44062: PUSH
44063: LD_INT 45
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: PUSH
44071: LD_VAR 0 12
44075: ARRAY
44076: ST_TO_ADDR
// break ;
44077: GO 44081
// end ; end ; end ;
44079: GO 43910
44081: POP
44082: POP
// end ; if not weapon then
44083: LD_VAR 0 18
44087: NOT
44088: IFFALSE 44148
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44090: LD_ADDR_VAR 0 5
44094: PUSH
44095: LD_VAR 0 5
44099: PUSH
44100: LD_INT 11
44102: PUSH
44103: LD_INT 30
44105: PUSH
44106: LD_INT 49
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: LIST
44113: DIFF
44114: ST_TO_ADDR
// if not list then
44115: LD_VAR 0 5
44119: NOT
44120: IFFALSE 44124
// exit ;
44122: GO 44266
// weapon := list [ rand ( 1 , list ) ] ;
44124: LD_ADDR_VAR 0 18
44128: PUSH
44129: LD_VAR 0 5
44133: PUSH
44134: LD_INT 1
44136: PPUSH
44137: LD_VAR 0 5
44141: PPUSH
44142: CALL_OW 12
44146: ARRAY
44147: ST_TO_ADDR
// end ; if weapon then
44148: LD_VAR 0 18
44152: IFFALSE 44266
// begin tmp := CostOfWeapon ( weapon ) ;
44154: LD_ADDR_VAR 0 14
44158: PUSH
44159: LD_VAR 0 18
44163: PPUSH
44164: CALL_OW 451
44168: ST_TO_ADDR
// j := GetBase ( tower ) ;
44169: LD_ADDR_VAR 0 9
44173: PUSH
44174: LD_VAR 0 1
44178: PPUSH
44179: CALL_OW 274
44183: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44184: LD_VAR 0 9
44188: PPUSH
44189: LD_INT 1
44191: PPUSH
44192: CALL_OW 275
44196: PUSH
44197: LD_VAR 0 14
44201: PUSH
44202: LD_INT 1
44204: ARRAY
44205: GREATEREQUAL
44206: PUSH
44207: LD_VAR 0 9
44211: PPUSH
44212: LD_INT 2
44214: PPUSH
44215: CALL_OW 275
44219: PUSH
44220: LD_VAR 0 14
44224: PUSH
44225: LD_INT 2
44227: ARRAY
44228: GREATEREQUAL
44229: AND
44230: PUSH
44231: LD_VAR 0 9
44235: PPUSH
44236: LD_INT 3
44238: PPUSH
44239: CALL_OW 275
44243: PUSH
44244: LD_VAR 0 14
44248: PUSH
44249: LD_INT 3
44251: ARRAY
44252: GREATEREQUAL
44253: AND
44254: IFFALSE 44266
// result := weapon ;
44256: LD_ADDR_VAR 0 3
44260: PUSH
44261: LD_VAR 0 18
44265: ST_TO_ADDR
// end ; end ;
44266: LD_VAR 0 3
44270: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44271: LD_INT 0
44273: PPUSH
44274: PPUSH
// result := true ;
44275: LD_ADDR_VAR 0 3
44279: PUSH
44280: LD_INT 1
44282: ST_TO_ADDR
// if array1 = array2 then
44283: LD_VAR 0 1
44287: PUSH
44288: LD_VAR 0 2
44292: EQUAL
44293: IFFALSE 44353
// begin for i = 1 to array1 do
44295: LD_ADDR_VAR 0 4
44299: PUSH
44300: DOUBLE
44301: LD_INT 1
44303: DEC
44304: ST_TO_ADDR
44305: LD_VAR 0 1
44309: PUSH
44310: FOR_TO
44311: IFFALSE 44349
// if array1 [ i ] <> array2 [ i ] then
44313: LD_VAR 0 1
44317: PUSH
44318: LD_VAR 0 4
44322: ARRAY
44323: PUSH
44324: LD_VAR 0 2
44328: PUSH
44329: LD_VAR 0 4
44333: ARRAY
44334: NONEQUAL
44335: IFFALSE 44347
// begin result := false ;
44337: LD_ADDR_VAR 0 3
44341: PUSH
44342: LD_INT 0
44344: ST_TO_ADDR
// break ;
44345: GO 44349
// end ;
44347: GO 44310
44349: POP
44350: POP
// end else
44351: GO 44361
// result := false ;
44353: LD_ADDR_VAR 0 3
44357: PUSH
44358: LD_INT 0
44360: ST_TO_ADDR
// end ;
44361: LD_VAR 0 3
44365: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44366: LD_INT 0
44368: PPUSH
44369: PPUSH
// if not array1 or not array2 then
44370: LD_VAR 0 1
44374: NOT
44375: PUSH
44376: LD_VAR 0 2
44380: NOT
44381: OR
44382: IFFALSE 44386
// exit ;
44384: GO 44450
// result := true ;
44386: LD_ADDR_VAR 0 3
44390: PUSH
44391: LD_INT 1
44393: ST_TO_ADDR
// for i = 1 to array1 do
44394: LD_ADDR_VAR 0 4
44398: PUSH
44399: DOUBLE
44400: LD_INT 1
44402: DEC
44403: ST_TO_ADDR
44404: LD_VAR 0 1
44408: PUSH
44409: FOR_TO
44410: IFFALSE 44448
// if array1 [ i ] <> array2 [ i ] then
44412: LD_VAR 0 1
44416: PUSH
44417: LD_VAR 0 4
44421: ARRAY
44422: PUSH
44423: LD_VAR 0 2
44427: PUSH
44428: LD_VAR 0 4
44432: ARRAY
44433: NONEQUAL
44434: IFFALSE 44446
// begin result := false ;
44436: LD_ADDR_VAR 0 3
44440: PUSH
44441: LD_INT 0
44443: ST_TO_ADDR
// break ;
44444: GO 44448
// end ;
44446: GO 44409
44448: POP
44449: POP
// end ;
44450: LD_VAR 0 3
44454: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44455: LD_INT 0
44457: PPUSH
44458: PPUSH
44459: PPUSH
// pom := GetBase ( fac ) ;
44460: LD_ADDR_VAR 0 5
44464: PUSH
44465: LD_VAR 0 1
44469: PPUSH
44470: CALL_OW 274
44474: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44475: LD_ADDR_VAR 0 4
44479: PUSH
44480: LD_VAR 0 2
44484: PUSH
44485: LD_INT 1
44487: ARRAY
44488: PPUSH
44489: LD_VAR 0 2
44493: PUSH
44494: LD_INT 2
44496: ARRAY
44497: PPUSH
44498: LD_VAR 0 2
44502: PUSH
44503: LD_INT 3
44505: ARRAY
44506: PPUSH
44507: LD_VAR 0 2
44511: PUSH
44512: LD_INT 4
44514: ARRAY
44515: PPUSH
44516: CALL_OW 449
44520: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44521: LD_ADDR_VAR 0 3
44525: PUSH
44526: LD_VAR 0 5
44530: PPUSH
44531: LD_INT 1
44533: PPUSH
44534: CALL_OW 275
44538: PUSH
44539: LD_VAR 0 4
44543: PUSH
44544: LD_INT 1
44546: ARRAY
44547: GREATEREQUAL
44548: PUSH
44549: LD_VAR 0 5
44553: PPUSH
44554: LD_INT 2
44556: PPUSH
44557: CALL_OW 275
44561: PUSH
44562: LD_VAR 0 4
44566: PUSH
44567: LD_INT 2
44569: ARRAY
44570: GREATEREQUAL
44571: AND
44572: PUSH
44573: LD_VAR 0 5
44577: PPUSH
44578: LD_INT 3
44580: PPUSH
44581: CALL_OW 275
44585: PUSH
44586: LD_VAR 0 4
44590: PUSH
44591: LD_INT 3
44593: ARRAY
44594: GREATEREQUAL
44595: AND
44596: ST_TO_ADDR
// end ;
44597: LD_VAR 0 3
44601: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44602: LD_INT 0
44604: PPUSH
44605: PPUSH
44606: PPUSH
44607: PPUSH
// pom := GetBase ( building ) ;
44608: LD_ADDR_VAR 0 3
44612: PUSH
44613: LD_VAR 0 1
44617: PPUSH
44618: CALL_OW 274
44622: ST_TO_ADDR
// if not pom then
44623: LD_VAR 0 3
44627: NOT
44628: IFFALSE 44632
// exit ;
44630: GO 44802
// btype := GetBType ( building ) ;
44632: LD_ADDR_VAR 0 5
44636: PUSH
44637: LD_VAR 0 1
44641: PPUSH
44642: CALL_OW 266
44646: ST_TO_ADDR
// if btype = b_armoury then
44647: LD_VAR 0 5
44651: PUSH
44652: LD_INT 4
44654: EQUAL
44655: IFFALSE 44665
// btype := b_barracks ;
44657: LD_ADDR_VAR 0 5
44661: PUSH
44662: LD_INT 5
44664: ST_TO_ADDR
// if btype = b_depot then
44665: LD_VAR 0 5
44669: PUSH
44670: LD_INT 0
44672: EQUAL
44673: IFFALSE 44683
// btype := b_warehouse ;
44675: LD_ADDR_VAR 0 5
44679: PUSH
44680: LD_INT 1
44682: ST_TO_ADDR
// if btype = b_workshop then
44683: LD_VAR 0 5
44687: PUSH
44688: LD_INT 2
44690: EQUAL
44691: IFFALSE 44701
// btype := b_factory ;
44693: LD_ADDR_VAR 0 5
44697: PUSH
44698: LD_INT 3
44700: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44701: LD_ADDR_VAR 0 4
44705: PUSH
44706: LD_VAR 0 5
44710: PPUSH
44711: LD_VAR 0 1
44715: PPUSH
44716: CALL_OW 248
44720: PPUSH
44721: CALL_OW 450
44725: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44726: LD_ADDR_VAR 0 2
44730: PUSH
44731: LD_VAR 0 3
44735: PPUSH
44736: LD_INT 1
44738: PPUSH
44739: CALL_OW 275
44743: PUSH
44744: LD_VAR 0 4
44748: PUSH
44749: LD_INT 1
44751: ARRAY
44752: GREATEREQUAL
44753: PUSH
44754: LD_VAR 0 3
44758: PPUSH
44759: LD_INT 2
44761: PPUSH
44762: CALL_OW 275
44766: PUSH
44767: LD_VAR 0 4
44771: PUSH
44772: LD_INT 2
44774: ARRAY
44775: GREATEREQUAL
44776: AND
44777: PUSH
44778: LD_VAR 0 3
44782: PPUSH
44783: LD_INT 3
44785: PPUSH
44786: CALL_OW 275
44790: PUSH
44791: LD_VAR 0 4
44795: PUSH
44796: LD_INT 3
44798: ARRAY
44799: GREATEREQUAL
44800: AND
44801: ST_TO_ADDR
// end ;
44802: LD_VAR 0 2
44806: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44807: LD_INT 0
44809: PPUSH
44810: PPUSH
44811: PPUSH
// pom := GetBase ( building ) ;
44812: LD_ADDR_VAR 0 4
44816: PUSH
44817: LD_VAR 0 1
44821: PPUSH
44822: CALL_OW 274
44826: ST_TO_ADDR
// if not pom then
44827: LD_VAR 0 4
44831: NOT
44832: IFFALSE 44836
// exit ;
44834: GO 44937
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44836: LD_ADDR_VAR 0 5
44840: PUSH
44841: LD_VAR 0 2
44845: PPUSH
44846: LD_VAR 0 1
44850: PPUSH
44851: CALL_OW 248
44855: PPUSH
44856: CALL_OW 450
44860: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44861: LD_ADDR_VAR 0 3
44865: PUSH
44866: LD_VAR 0 4
44870: PPUSH
44871: LD_INT 1
44873: PPUSH
44874: CALL_OW 275
44878: PUSH
44879: LD_VAR 0 5
44883: PUSH
44884: LD_INT 1
44886: ARRAY
44887: GREATEREQUAL
44888: PUSH
44889: LD_VAR 0 4
44893: PPUSH
44894: LD_INT 2
44896: PPUSH
44897: CALL_OW 275
44901: PUSH
44902: LD_VAR 0 5
44906: PUSH
44907: LD_INT 2
44909: ARRAY
44910: GREATEREQUAL
44911: AND
44912: PUSH
44913: LD_VAR 0 4
44917: PPUSH
44918: LD_INT 3
44920: PPUSH
44921: CALL_OW 275
44925: PUSH
44926: LD_VAR 0 5
44930: PUSH
44931: LD_INT 3
44933: ARRAY
44934: GREATEREQUAL
44935: AND
44936: ST_TO_ADDR
// end ;
44937: LD_VAR 0 3
44941: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44942: LD_INT 0
44944: PPUSH
44945: PPUSH
44946: PPUSH
44947: PPUSH
44948: PPUSH
44949: PPUSH
44950: PPUSH
44951: PPUSH
44952: PPUSH
44953: PPUSH
44954: PPUSH
// result := false ;
44955: LD_ADDR_VAR 0 8
44959: PUSH
44960: LD_INT 0
44962: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44963: LD_VAR 0 5
44967: NOT
44968: PUSH
44969: LD_VAR 0 1
44973: NOT
44974: OR
44975: PUSH
44976: LD_VAR 0 2
44980: NOT
44981: OR
44982: PUSH
44983: LD_VAR 0 3
44987: NOT
44988: OR
44989: IFFALSE 44993
// exit ;
44991: GO 45807
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44993: LD_ADDR_VAR 0 14
44997: PUSH
44998: LD_VAR 0 1
45002: PPUSH
45003: LD_VAR 0 2
45007: PPUSH
45008: LD_VAR 0 3
45012: PPUSH
45013: LD_VAR 0 4
45017: PPUSH
45018: LD_VAR 0 5
45022: PUSH
45023: LD_INT 1
45025: ARRAY
45026: PPUSH
45027: CALL_OW 248
45031: PPUSH
45032: LD_INT 0
45034: PPUSH
45035: CALL 47060 0 6
45039: ST_TO_ADDR
// if not hexes then
45040: LD_VAR 0 14
45044: NOT
45045: IFFALSE 45049
// exit ;
45047: GO 45807
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45049: LD_ADDR_VAR 0 17
45053: PUSH
45054: LD_VAR 0 5
45058: PPUSH
45059: LD_INT 22
45061: PUSH
45062: LD_VAR 0 13
45066: PPUSH
45067: CALL_OW 255
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: LD_INT 30
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 30
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: LIST
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PPUSH
45108: CALL_OW 72
45112: ST_TO_ADDR
// for i = 1 to hexes do
45113: LD_ADDR_VAR 0 9
45117: PUSH
45118: DOUBLE
45119: LD_INT 1
45121: DEC
45122: ST_TO_ADDR
45123: LD_VAR 0 14
45127: PUSH
45128: FOR_TO
45129: IFFALSE 45805
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45131: LD_ADDR_VAR 0 13
45135: PUSH
45136: LD_VAR 0 14
45140: PUSH
45141: LD_VAR 0 9
45145: ARRAY
45146: PUSH
45147: LD_INT 1
45149: ARRAY
45150: PPUSH
45151: LD_VAR 0 14
45155: PUSH
45156: LD_VAR 0 9
45160: ARRAY
45161: PUSH
45162: LD_INT 2
45164: ARRAY
45165: PPUSH
45166: CALL_OW 428
45170: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45171: LD_VAR 0 14
45175: PUSH
45176: LD_VAR 0 9
45180: ARRAY
45181: PUSH
45182: LD_INT 1
45184: ARRAY
45185: PPUSH
45186: LD_VAR 0 14
45190: PUSH
45191: LD_VAR 0 9
45195: ARRAY
45196: PUSH
45197: LD_INT 2
45199: ARRAY
45200: PPUSH
45201: CALL_OW 351
45205: PUSH
45206: LD_VAR 0 14
45210: PUSH
45211: LD_VAR 0 9
45215: ARRAY
45216: PUSH
45217: LD_INT 1
45219: ARRAY
45220: PPUSH
45221: LD_VAR 0 14
45225: PUSH
45226: LD_VAR 0 9
45230: ARRAY
45231: PUSH
45232: LD_INT 2
45234: ARRAY
45235: PPUSH
45236: CALL_OW 488
45240: NOT
45241: OR
45242: PUSH
45243: LD_VAR 0 13
45247: PPUSH
45248: CALL_OW 247
45252: PUSH
45253: LD_INT 3
45255: EQUAL
45256: OR
45257: IFFALSE 45263
// exit ;
45259: POP
45260: POP
45261: GO 45807
// if not tmp then
45263: LD_VAR 0 13
45267: NOT
45268: IFFALSE 45272
// continue ;
45270: GO 45128
// result := true ;
45272: LD_ADDR_VAR 0 8
45276: PUSH
45277: LD_INT 1
45279: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45280: LD_VAR 0 6
45284: PUSH
45285: LD_VAR 0 13
45289: PPUSH
45290: CALL_OW 247
45294: PUSH
45295: LD_INT 2
45297: EQUAL
45298: AND
45299: PUSH
45300: LD_VAR 0 13
45304: PPUSH
45305: CALL_OW 263
45309: PUSH
45310: LD_INT 1
45312: EQUAL
45313: AND
45314: IFFALSE 45478
// begin if IsDrivenBy ( tmp ) then
45316: LD_VAR 0 13
45320: PPUSH
45321: CALL_OW 311
45325: IFFALSE 45329
// continue ;
45327: GO 45128
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45329: LD_VAR 0 6
45333: PPUSH
45334: LD_INT 3
45336: PUSH
45337: LD_INT 60
45339: PUSH
45340: EMPTY
45341: LIST
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 3
45349: PUSH
45350: LD_INT 55
45352: PUSH
45353: EMPTY
45354: LIST
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PPUSH
45364: CALL_OW 72
45368: IFFALSE 45476
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45370: LD_ADDR_VAR 0 18
45374: PUSH
45375: LD_VAR 0 6
45379: PPUSH
45380: LD_INT 3
45382: PUSH
45383: LD_INT 60
45385: PUSH
45386: EMPTY
45387: LIST
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 3
45395: PUSH
45396: LD_INT 55
45398: PUSH
45399: EMPTY
45400: LIST
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PPUSH
45410: CALL_OW 72
45414: PUSH
45415: LD_INT 1
45417: ARRAY
45418: ST_TO_ADDR
// if IsInUnit ( driver ) then
45419: LD_VAR 0 18
45423: PPUSH
45424: CALL_OW 310
45428: IFFALSE 45439
// ComExit ( driver ) ;
45430: LD_VAR 0 18
45434: PPUSH
45435: CALL 70861 0 1
// AddComEnterUnit ( driver , tmp ) ;
45439: LD_VAR 0 18
45443: PPUSH
45444: LD_VAR 0 13
45448: PPUSH
45449: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45453: LD_VAR 0 18
45457: PPUSH
45458: LD_VAR 0 7
45462: PPUSH
45463: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45467: LD_VAR 0 18
45471: PPUSH
45472: CALL_OW 181
// end ; continue ;
45476: GO 45128
// end ; if not cleaners or not tmp in cleaners then
45478: LD_VAR 0 6
45482: NOT
45483: PUSH
45484: LD_VAR 0 13
45488: PUSH
45489: LD_VAR 0 6
45493: IN
45494: NOT
45495: OR
45496: IFFALSE 45803
// begin if dep then
45498: LD_VAR 0 17
45502: IFFALSE 45638
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45504: LD_ADDR_VAR 0 16
45508: PUSH
45509: LD_VAR 0 17
45513: PUSH
45514: LD_INT 1
45516: ARRAY
45517: PPUSH
45518: CALL_OW 250
45522: PPUSH
45523: LD_VAR 0 17
45527: PUSH
45528: LD_INT 1
45530: ARRAY
45531: PPUSH
45532: CALL_OW 254
45536: PPUSH
45537: LD_INT 5
45539: PPUSH
45540: CALL_OW 272
45544: PUSH
45545: LD_VAR 0 17
45549: PUSH
45550: LD_INT 1
45552: ARRAY
45553: PPUSH
45554: CALL_OW 251
45558: PPUSH
45559: LD_VAR 0 17
45563: PUSH
45564: LD_INT 1
45566: ARRAY
45567: PPUSH
45568: CALL_OW 254
45572: PPUSH
45573: LD_INT 5
45575: PPUSH
45576: CALL_OW 273
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45585: LD_VAR 0 16
45589: PUSH
45590: LD_INT 1
45592: ARRAY
45593: PPUSH
45594: LD_VAR 0 16
45598: PUSH
45599: LD_INT 2
45601: ARRAY
45602: PPUSH
45603: CALL_OW 488
45607: IFFALSE 45638
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45609: LD_VAR 0 13
45613: PPUSH
45614: LD_VAR 0 16
45618: PUSH
45619: LD_INT 1
45621: ARRAY
45622: PPUSH
45623: LD_VAR 0 16
45627: PUSH
45628: LD_INT 2
45630: ARRAY
45631: PPUSH
45632: CALL_OW 111
// continue ;
45636: GO 45128
// end ; end ; r := GetDir ( tmp ) ;
45638: LD_ADDR_VAR 0 15
45642: PUSH
45643: LD_VAR 0 13
45647: PPUSH
45648: CALL_OW 254
45652: ST_TO_ADDR
// if r = 5 then
45653: LD_VAR 0 15
45657: PUSH
45658: LD_INT 5
45660: EQUAL
45661: IFFALSE 45671
// r := 0 ;
45663: LD_ADDR_VAR 0 15
45667: PUSH
45668: LD_INT 0
45670: ST_TO_ADDR
// for j = r to 5 do
45671: LD_ADDR_VAR 0 10
45675: PUSH
45676: DOUBLE
45677: LD_VAR 0 15
45681: DEC
45682: ST_TO_ADDR
45683: LD_INT 5
45685: PUSH
45686: FOR_TO
45687: IFFALSE 45801
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45689: LD_ADDR_VAR 0 11
45693: PUSH
45694: LD_VAR 0 13
45698: PPUSH
45699: CALL_OW 250
45703: PPUSH
45704: LD_VAR 0 10
45708: PPUSH
45709: LD_INT 2
45711: PPUSH
45712: CALL_OW 272
45716: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45717: LD_ADDR_VAR 0 12
45721: PUSH
45722: LD_VAR 0 13
45726: PPUSH
45727: CALL_OW 251
45731: PPUSH
45732: LD_VAR 0 10
45736: PPUSH
45737: LD_INT 2
45739: PPUSH
45740: CALL_OW 273
45744: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45745: LD_VAR 0 11
45749: PPUSH
45750: LD_VAR 0 12
45754: PPUSH
45755: CALL_OW 488
45759: PUSH
45760: LD_VAR 0 11
45764: PPUSH
45765: LD_VAR 0 12
45769: PPUSH
45770: CALL_OW 428
45774: NOT
45775: AND
45776: IFFALSE 45799
// begin ComMoveXY ( tmp , _x , _y ) ;
45778: LD_VAR 0 13
45782: PPUSH
45783: LD_VAR 0 11
45787: PPUSH
45788: LD_VAR 0 12
45792: PPUSH
45793: CALL_OW 111
// break ;
45797: GO 45801
// end ; end ;
45799: GO 45686
45801: POP
45802: POP
// end ; end ;
45803: GO 45128
45805: POP
45806: POP
// end ;
45807: LD_VAR 0 8
45811: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45812: LD_INT 0
45814: PPUSH
// result := true ;
45815: LD_ADDR_VAR 0 3
45819: PUSH
45820: LD_INT 1
45822: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45823: LD_VAR 0 2
45827: PUSH
45828: LD_INT 24
45830: DOUBLE
45831: EQUAL
45832: IFTRUE 45842
45834: LD_INT 33
45836: DOUBLE
45837: EQUAL
45838: IFTRUE 45842
45840: GO 45867
45842: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45843: LD_ADDR_VAR 0 3
45847: PUSH
45848: LD_INT 32
45850: PPUSH
45851: LD_VAR 0 1
45855: PPUSH
45856: CALL_OW 321
45860: PUSH
45861: LD_INT 2
45863: EQUAL
45864: ST_TO_ADDR
45865: GO 46183
45867: LD_INT 20
45869: DOUBLE
45870: EQUAL
45871: IFTRUE 45875
45873: GO 45900
45875: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45876: LD_ADDR_VAR 0 3
45880: PUSH
45881: LD_INT 6
45883: PPUSH
45884: LD_VAR 0 1
45888: PPUSH
45889: CALL_OW 321
45893: PUSH
45894: LD_INT 2
45896: EQUAL
45897: ST_TO_ADDR
45898: GO 46183
45900: LD_INT 22
45902: DOUBLE
45903: EQUAL
45904: IFTRUE 45914
45906: LD_INT 36
45908: DOUBLE
45909: EQUAL
45910: IFTRUE 45914
45912: GO 45939
45914: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45915: LD_ADDR_VAR 0 3
45919: PUSH
45920: LD_INT 15
45922: PPUSH
45923: LD_VAR 0 1
45927: PPUSH
45928: CALL_OW 321
45932: PUSH
45933: LD_INT 2
45935: EQUAL
45936: ST_TO_ADDR
45937: GO 46183
45939: LD_INT 30
45941: DOUBLE
45942: EQUAL
45943: IFTRUE 45947
45945: GO 45972
45947: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45948: LD_ADDR_VAR 0 3
45952: PUSH
45953: LD_INT 20
45955: PPUSH
45956: LD_VAR 0 1
45960: PPUSH
45961: CALL_OW 321
45965: PUSH
45966: LD_INT 2
45968: EQUAL
45969: ST_TO_ADDR
45970: GO 46183
45972: LD_INT 28
45974: DOUBLE
45975: EQUAL
45976: IFTRUE 45986
45978: LD_INT 21
45980: DOUBLE
45981: EQUAL
45982: IFTRUE 45986
45984: GO 46011
45986: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45987: LD_ADDR_VAR 0 3
45991: PUSH
45992: LD_INT 21
45994: PPUSH
45995: LD_VAR 0 1
45999: PPUSH
46000: CALL_OW 321
46004: PUSH
46005: LD_INT 2
46007: EQUAL
46008: ST_TO_ADDR
46009: GO 46183
46011: LD_INT 16
46013: DOUBLE
46014: EQUAL
46015: IFTRUE 46019
46017: GO 46044
46019: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46020: LD_ADDR_VAR 0 3
46024: PUSH
46025: LD_INT 84
46027: PPUSH
46028: LD_VAR 0 1
46032: PPUSH
46033: CALL_OW 321
46037: PUSH
46038: LD_INT 2
46040: EQUAL
46041: ST_TO_ADDR
46042: GO 46183
46044: LD_INT 19
46046: DOUBLE
46047: EQUAL
46048: IFTRUE 46058
46050: LD_INT 23
46052: DOUBLE
46053: EQUAL
46054: IFTRUE 46058
46056: GO 46083
46058: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46059: LD_ADDR_VAR 0 3
46063: PUSH
46064: LD_INT 83
46066: PPUSH
46067: LD_VAR 0 1
46071: PPUSH
46072: CALL_OW 321
46076: PUSH
46077: LD_INT 2
46079: EQUAL
46080: ST_TO_ADDR
46081: GO 46183
46083: LD_INT 17
46085: DOUBLE
46086: EQUAL
46087: IFTRUE 46091
46089: GO 46116
46091: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46092: LD_ADDR_VAR 0 3
46096: PUSH
46097: LD_INT 39
46099: PPUSH
46100: LD_VAR 0 1
46104: PPUSH
46105: CALL_OW 321
46109: PUSH
46110: LD_INT 2
46112: EQUAL
46113: ST_TO_ADDR
46114: GO 46183
46116: LD_INT 18
46118: DOUBLE
46119: EQUAL
46120: IFTRUE 46124
46122: GO 46149
46124: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46125: LD_ADDR_VAR 0 3
46129: PUSH
46130: LD_INT 40
46132: PPUSH
46133: LD_VAR 0 1
46137: PPUSH
46138: CALL_OW 321
46142: PUSH
46143: LD_INT 2
46145: EQUAL
46146: ST_TO_ADDR
46147: GO 46183
46149: LD_INT 27
46151: DOUBLE
46152: EQUAL
46153: IFTRUE 46157
46155: GO 46182
46157: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46158: LD_ADDR_VAR 0 3
46162: PUSH
46163: LD_INT 35
46165: PPUSH
46166: LD_VAR 0 1
46170: PPUSH
46171: CALL_OW 321
46175: PUSH
46176: LD_INT 2
46178: EQUAL
46179: ST_TO_ADDR
46180: GO 46183
46182: POP
// end ;
46183: LD_VAR 0 3
46187: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46188: LD_INT 0
46190: PPUSH
46191: PPUSH
46192: PPUSH
46193: PPUSH
46194: PPUSH
46195: PPUSH
46196: PPUSH
46197: PPUSH
46198: PPUSH
46199: PPUSH
46200: PPUSH
// result := false ;
46201: LD_ADDR_VAR 0 6
46205: PUSH
46206: LD_INT 0
46208: ST_TO_ADDR
// if btype = b_depot then
46209: LD_VAR 0 2
46213: PUSH
46214: LD_INT 0
46216: EQUAL
46217: IFFALSE 46229
// begin result := true ;
46219: LD_ADDR_VAR 0 6
46223: PUSH
46224: LD_INT 1
46226: ST_TO_ADDR
// exit ;
46227: GO 47055
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46229: LD_VAR 0 1
46233: NOT
46234: PUSH
46235: LD_VAR 0 1
46239: PPUSH
46240: CALL_OW 266
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: IN
46255: NOT
46256: OR
46257: PUSH
46258: LD_VAR 0 2
46262: NOT
46263: OR
46264: PUSH
46265: LD_VAR 0 5
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: LD_INT 2
46278: PUSH
46279: LD_INT 3
46281: PUSH
46282: LD_INT 4
46284: PUSH
46285: LD_INT 5
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: IN
46296: NOT
46297: OR
46298: PUSH
46299: LD_VAR 0 3
46303: PPUSH
46304: LD_VAR 0 4
46308: PPUSH
46309: CALL_OW 488
46313: NOT
46314: OR
46315: IFFALSE 46319
// exit ;
46317: GO 47055
// side := GetSide ( depot ) ;
46319: LD_ADDR_VAR 0 9
46323: PUSH
46324: LD_VAR 0 1
46328: PPUSH
46329: CALL_OW 255
46333: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46334: LD_VAR 0 9
46338: PPUSH
46339: LD_VAR 0 2
46343: PPUSH
46344: CALL 45812 0 2
46348: NOT
46349: IFFALSE 46353
// exit ;
46351: GO 47055
// pom := GetBase ( depot ) ;
46353: LD_ADDR_VAR 0 10
46357: PUSH
46358: LD_VAR 0 1
46362: PPUSH
46363: CALL_OW 274
46367: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46368: LD_ADDR_VAR 0 11
46372: PUSH
46373: LD_VAR 0 2
46377: PPUSH
46378: LD_VAR 0 1
46382: PPUSH
46383: CALL_OW 248
46387: PPUSH
46388: CALL_OW 450
46392: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46393: LD_VAR 0 10
46397: PPUSH
46398: LD_INT 1
46400: PPUSH
46401: CALL_OW 275
46405: PUSH
46406: LD_VAR 0 11
46410: PUSH
46411: LD_INT 1
46413: ARRAY
46414: GREATEREQUAL
46415: PUSH
46416: LD_VAR 0 10
46420: PPUSH
46421: LD_INT 2
46423: PPUSH
46424: CALL_OW 275
46428: PUSH
46429: LD_VAR 0 11
46433: PUSH
46434: LD_INT 2
46436: ARRAY
46437: GREATEREQUAL
46438: AND
46439: PUSH
46440: LD_VAR 0 10
46444: PPUSH
46445: LD_INT 3
46447: PPUSH
46448: CALL_OW 275
46452: PUSH
46453: LD_VAR 0 11
46457: PUSH
46458: LD_INT 3
46460: ARRAY
46461: GREATEREQUAL
46462: AND
46463: NOT
46464: IFFALSE 46468
// exit ;
46466: GO 47055
// if GetBType ( depot ) = b_depot then
46468: LD_VAR 0 1
46472: PPUSH
46473: CALL_OW 266
46477: PUSH
46478: LD_INT 0
46480: EQUAL
46481: IFFALSE 46493
// dist := 28 else
46483: LD_ADDR_VAR 0 14
46487: PUSH
46488: LD_INT 28
46490: ST_TO_ADDR
46491: GO 46501
// dist := 36 ;
46493: LD_ADDR_VAR 0 14
46497: PUSH
46498: LD_INT 36
46500: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46501: LD_VAR 0 1
46505: PPUSH
46506: LD_VAR 0 3
46510: PPUSH
46511: LD_VAR 0 4
46515: PPUSH
46516: CALL_OW 297
46520: PUSH
46521: LD_VAR 0 14
46525: GREATER
46526: IFFALSE 46530
// exit ;
46528: GO 47055
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46530: LD_ADDR_VAR 0 12
46534: PUSH
46535: LD_VAR 0 2
46539: PPUSH
46540: LD_VAR 0 3
46544: PPUSH
46545: LD_VAR 0 4
46549: PPUSH
46550: LD_VAR 0 5
46554: PPUSH
46555: LD_VAR 0 1
46559: PPUSH
46560: CALL_OW 248
46564: PPUSH
46565: LD_INT 0
46567: PPUSH
46568: CALL 47060 0 6
46572: ST_TO_ADDR
// if not hexes then
46573: LD_VAR 0 12
46577: NOT
46578: IFFALSE 46582
// exit ;
46580: GO 47055
// hex := GetHexInfo ( x , y ) ;
46582: LD_ADDR_VAR 0 15
46586: PUSH
46587: LD_VAR 0 3
46591: PPUSH
46592: LD_VAR 0 4
46596: PPUSH
46597: CALL_OW 546
46601: ST_TO_ADDR
// if hex [ 1 ] then
46602: LD_VAR 0 15
46606: PUSH
46607: LD_INT 1
46609: ARRAY
46610: IFFALSE 46614
// exit ;
46612: GO 47055
// height := hex [ 2 ] ;
46614: LD_ADDR_VAR 0 13
46618: PUSH
46619: LD_VAR 0 15
46623: PUSH
46624: LD_INT 2
46626: ARRAY
46627: ST_TO_ADDR
// for i = 1 to hexes do
46628: LD_ADDR_VAR 0 7
46632: PUSH
46633: DOUBLE
46634: LD_INT 1
46636: DEC
46637: ST_TO_ADDR
46638: LD_VAR 0 12
46642: PUSH
46643: FOR_TO
46644: IFFALSE 46974
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46646: LD_VAR 0 12
46650: PUSH
46651: LD_VAR 0 7
46655: ARRAY
46656: PUSH
46657: LD_INT 1
46659: ARRAY
46660: PPUSH
46661: LD_VAR 0 12
46665: PUSH
46666: LD_VAR 0 7
46670: ARRAY
46671: PUSH
46672: LD_INT 2
46674: ARRAY
46675: PPUSH
46676: CALL_OW 488
46680: NOT
46681: PUSH
46682: LD_VAR 0 12
46686: PUSH
46687: LD_VAR 0 7
46691: ARRAY
46692: PUSH
46693: LD_INT 1
46695: ARRAY
46696: PPUSH
46697: LD_VAR 0 12
46701: PUSH
46702: LD_VAR 0 7
46706: ARRAY
46707: PUSH
46708: LD_INT 2
46710: ARRAY
46711: PPUSH
46712: CALL_OW 428
46716: PUSH
46717: LD_INT 0
46719: GREATER
46720: OR
46721: PUSH
46722: LD_VAR 0 12
46726: PUSH
46727: LD_VAR 0 7
46731: ARRAY
46732: PUSH
46733: LD_INT 1
46735: ARRAY
46736: PPUSH
46737: LD_VAR 0 12
46741: PUSH
46742: LD_VAR 0 7
46746: ARRAY
46747: PUSH
46748: LD_INT 2
46750: ARRAY
46751: PPUSH
46752: CALL_OW 351
46756: OR
46757: IFFALSE 46763
// exit ;
46759: POP
46760: POP
46761: GO 47055
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46763: LD_ADDR_VAR 0 8
46767: PUSH
46768: LD_VAR 0 12
46772: PUSH
46773: LD_VAR 0 7
46777: ARRAY
46778: PUSH
46779: LD_INT 1
46781: ARRAY
46782: PPUSH
46783: LD_VAR 0 12
46787: PUSH
46788: LD_VAR 0 7
46792: ARRAY
46793: PUSH
46794: LD_INT 2
46796: ARRAY
46797: PPUSH
46798: CALL_OW 546
46802: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46803: LD_VAR 0 8
46807: PUSH
46808: LD_INT 1
46810: ARRAY
46811: PUSH
46812: LD_VAR 0 8
46816: PUSH
46817: LD_INT 2
46819: ARRAY
46820: PUSH
46821: LD_VAR 0 13
46825: PUSH
46826: LD_INT 2
46828: PLUS
46829: GREATER
46830: OR
46831: PUSH
46832: LD_VAR 0 8
46836: PUSH
46837: LD_INT 2
46839: ARRAY
46840: PUSH
46841: LD_VAR 0 13
46845: PUSH
46846: LD_INT 2
46848: MINUS
46849: LESS
46850: OR
46851: PUSH
46852: LD_VAR 0 8
46856: PUSH
46857: LD_INT 3
46859: ARRAY
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 8
46866: PUSH
46867: LD_INT 9
46869: PUSH
46870: LD_INT 10
46872: PUSH
46873: LD_INT 11
46875: PUSH
46876: LD_INT 12
46878: PUSH
46879: LD_INT 13
46881: PUSH
46882: LD_INT 16
46884: PUSH
46885: LD_INT 17
46887: PUSH
46888: LD_INT 18
46890: PUSH
46891: LD_INT 19
46893: PUSH
46894: LD_INT 20
46896: PUSH
46897: LD_INT 21
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: IN
46915: NOT
46916: OR
46917: PUSH
46918: LD_VAR 0 8
46922: PUSH
46923: LD_INT 5
46925: ARRAY
46926: NOT
46927: OR
46928: PUSH
46929: LD_VAR 0 8
46933: PUSH
46934: LD_INT 6
46936: ARRAY
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 7
46946: PUSH
46947: LD_INT 9
46949: PUSH
46950: LD_INT 10
46952: PUSH
46953: LD_INT 11
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: IN
46964: NOT
46965: OR
46966: IFFALSE 46972
// exit ;
46968: POP
46969: POP
46970: GO 47055
// end ;
46972: GO 46643
46974: POP
46975: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46976: LD_VAR 0 9
46980: PPUSH
46981: LD_VAR 0 3
46985: PPUSH
46986: LD_VAR 0 4
46990: PPUSH
46991: LD_INT 20
46993: PPUSH
46994: CALL 38978 0 4
46998: PUSH
46999: LD_INT 4
47001: ARRAY
47002: IFFALSE 47006
// exit ;
47004: GO 47055
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47006: LD_VAR 0 2
47010: PUSH
47011: LD_INT 29
47013: PUSH
47014: LD_INT 30
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: IN
47021: PUSH
47022: LD_VAR 0 3
47026: PPUSH
47027: LD_VAR 0 4
47031: PPUSH
47032: LD_VAR 0 9
47036: PPUSH
47037: CALL_OW 440
47041: NOT
47042: AND
47043: IFFALSE 47047
// exit ;
47045: GO 47055
// result := true ;
47047: LD_ADDR_VAR 0 6
47051: PUSH
47052: LD_INT 1
47054: ST_TO_ADDR
// end ;
47055: LD_VAR 0 6
47059: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47060: LD_INT 0
47062: PPUSH
47063: PPUSH
47064: PPUSH
47065: PPUSH
47066: PPUSH
47067: PPUSH
47068: PPUSH
47069: PPUSH
47070: PPUSH
47071: PPUSH
47072: PPUSH
47073: PPUSH
47074: PPUSH
47075: PPUSH
47076: PPUSH
47077: PPUSH
47078: PPUSH
47079: PPUSH
47080: PPUSH
47081: PPUSH
47082: PPUSH
47083: PPUSH
47084: PPUSH
47085: PPUSH
47086: PPUSH
47087: PPUSH
47088: PPUSH
47089: PPUSH
47090: PPUSH
47091: PPUSH
47092: PPUSH
47093: PPUSH
47094: PPUSH
47095: PPUSH
47096: PPUSH
47097: PPUSH
47098: PPUSH
47099: PPUSH
47100: PPUSH
47101: PPUSH
47102: PPUSH
47103: PPUSH
47104: PPUSH
47105: PPUSH
47106: PPUSH
47107: PPUSH
47108: PPUSH
47109: PPUSH
47110: PPUSH
47111: PPUSH
47112: PPUSH
47113: PPUSH
47114: PPUSH
47115: PPUSH
47116: PPUSH
47117: PPUSH
47118: PPUSH
47119: PPUSH
// result = [ ] ;
47120: LD_ADDR_VAR 0 7
47124: PUSH
47125: EMPTY
47126: ST_TO_ADDR
// temp_list = [ ] ;
47127: LD_ADDR_VAR 0 9
47131: PUSH
47132: EMPTY
47133: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47134: LD_VAR 0 4
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: LD_INT 3
47150: PUSH
47151: LD_INT 4
47153: PUSH
47154: LD_INT 5
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: IN
47165: NOT
47166: PUSH
47167: LD_VAR 0 1
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: IN
47182: PUSH
47183: LD_VAR 0 5
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: LD_INT 3
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: LIST
47201: IN
47202: NOT
47203: AND
47204: OR
47205: IFFALSE 47209
// exit ;
47207: GO 65600
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47209: LD_VAR 0 1
47213: PUSH
47214: LD_INT 6
47216: PUSH
47217: LD_INT 7
47219: PUSH
47220: LD_INT 8
47222: PUSH
47223: LD_INT 13
47225: PUSH
47226: LD_INT 12
47228: PUSH
47229: LD_INT 15
47231: PUSH
47232: LD_INT 11
47234: PUSH
47235: LD_INT 14
47237: PUSH
47238: LD_INT 10
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: IN
47252: IFFALSE 47262
// btype = b_lab ;
47254: LD_ADDR_VAR 0 1
47258: PUSH
47259: LD_INT 6
47261: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47262: LD_VAR 0 6
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 2
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: LIST
47280: IN
47281: NOT
47282: PUSH
47283: LD_VAR 0 1
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: LD_INT 3
47299: PUSH
47300: LD_INT 6
47302: PUSH
47303: LD_INT 36
47305: PUSH
47306: LD_INT 4
47308: PUSH
47309: LD_INT 5
47311: PUSH
47312: LD_INT 31
47314: PUSH
47315: LD_INT 32
47317: PUSH
47318: LD_INT 33
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: IN
47334: NOT
47335: PUSH
47336: LD_VAR 0 6
47340: PUSH
47341: LD_INT 1
47343: EQUAL
47344: AND
47345: OR
47346: PUSH
47347: LD_VAR 0 1
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: LD_INT 3
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: IN
47362: NOT
47363: PUSH
47364: LD_VAR 0 6
47368: PUSH
47369: LD_INT 2
47371: EQUAL
47372: AND
47373: OR
47374: IFFALSE 47384
// mode = 0 ;
47376: LD_ADDR_VAR 0 6
47380: PUSH
47381: LD_INT 0
47383: ST_TO_ADDR
// case mode of 0 :
47384: LD_VAR 0 6
47388: PUSH
47389: LD_INT 0
47391: DOUBLE
47392: EQUAL
47393: IFTRUE 47397
47395: GO 58850
47397: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47398: LD_ADDR_VAR 0 11
47402: PUSH
47403: LD_INT 0
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: LD_INT 2
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: LD_INT 3
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 3
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47591: LD_ADDR_VAR 0 12
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 3
47748: NEG
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 3
47759: NEG
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47787: LD_ADDR_VAR 0 13
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: NEG
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: LD_INT 3
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 3
47946: NEG
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 3
47958: NEG
47959: PUSH
47960: LD_INT 3
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47986: LD_ADDR_VAR 0 14
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 2
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: LD_INT 3
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 3
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48182: LD_ADDR_VAR 0 15
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 2
48316: NEG
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 3
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 3
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48375: LD_ADDR_VAR 0 16
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 3
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 3
48532: PUSH
48533: LD_INT 3
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48568: LD_ADDR_VAR 0 17
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48798: LD_ADDR_VAR 0 18
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: LD_INT 2
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 2
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: LD_INT 2
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 2
48974: NEG
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49028: LD_ADDR_VAR 0 19
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 2
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 2
49204: NEG
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49258: LD_ADDR_VAR 0 20
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49488: LD_ADDR_VAR 0 21
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 0
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 2
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 2
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: NEG
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49718: LD_ADDR_VAR 0 22
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49948: LD_ADDR_VAR 0 23
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: PUSH
50084: LD_INT 2
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 2
50124: NEG
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 2
50147: NEG
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: LD_INT 3
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: LD_INT 3
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 2
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50228: LD_ADDR_VAR 0 24
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 2
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 2
50415: NEG
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 2
50427: NEG
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 3
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 3
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50504: LD_ADDR_VAR 0 25
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 3
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 3
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: LD_INT 3
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50778: LD_ADDR_VAR 0 26
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 2
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: LD_INT 1
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: LD_INT 3
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: LD_INT 3
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: LD_INT 2
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51054: LD_ADDR_VAR 0 27
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 2
51230: NEG
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 2
51241: NEG
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: LD_INT 2
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: LD_INT 2
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 3
51299: NEG
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51334: LD_ADDR_VAR 0 28
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: LD_INT 2
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 2
51533: NEG
51534: PUSH
51535: LD_INT 2
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 3
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 3
51569: NEG
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 3
51581: NEG
51582: PUSH
51583: LD_INT 2
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51616: LD_ADDR_VAR 0 29
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 0
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: LD_INT 2
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: LD_INT 3
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 3
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: LD_INT 3
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 3
51860: NEG
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51895: LD_ADDR_VAR 0 30
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 2
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 2
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: NEG
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 3
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: LD_INT 3
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 2
52127: NEG
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 3
52138: NEG
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52173: LD_ADDR_VAR 0 31
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 2
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 2
52338: NEG
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: LD_INT 3
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 3
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 3
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: NEG
52406: PUSH
52407: LD_INT 2
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 3
52416: NEG
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52451: LD_ADDR_VAR 0 32
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: LD_INT 3
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: LD_INT 2
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 3
52694: NEG
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52729: LD_ADDR_VAR 0 33
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: NEG
52920: PUSH
52921: LD_INT 3
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 3
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 3
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 3
52973: NEG
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53008: LD_ADDR_VAR 0 34
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 2
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: LD_INT 3
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 3
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 2
53232: PUSH
53233: LD_INT 3
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 3
53253: NEG
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53288: LD_ADDR_VAR 0 35
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: NEG
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53400: LD_ADDR_VAR 0 36
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53512: LD_ADDR_VAR 0 37
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53624: LD_ADDR_VAR 0 38
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 2
53715: NEG
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53736: LD_ADDR_VAR 0 39
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 2
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53848: LD_ADDR_VAR 0 40
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53960: LD_ADDR_VAR 0 41
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 2
54115: NEG
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: LD_INT 3
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 3
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 3
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 3
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: PUSH
54204: LD_INT 3
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: LD_INT 3
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 3
54234: NEG
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 3
54245: NEG
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 3
54257: NEG
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 3
54269: NEG
54270: PUSH
54271: LD_INT 3
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54310: LD_ADDR_VAR 0 42
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: LD_INT 1
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 2
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 2
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: LD_INT 3
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: LD_INT 3
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 3
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 3
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 3
54556: PUSH
54557: LD_INT 3
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: LD_INT 3
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: LD_INT 3
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 3
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 3
54607: NEG
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 3
54619: NEG
54620: PUSH
54621: LD_INT 3
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54660: LD_ADDR_VAR 0 43
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: LD_INT 3
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: LD_INT 3
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 3
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 3
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: LD_INT 3
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 3
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: LD_INT 2
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 3
54956: NEG
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 3
54967: NEG
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55008: LD_ADDR_VAR 0 44
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 2
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: LD_INT 3
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 3
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 3
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 3
55251: PUSH
55252: LD_INT 3
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 2
55261: PUSH
55262: LD_INT 3
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: NEG
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 3
55282: NEG
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 3
55293: NEG
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: NEG
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 3
55317: NEG
55318: PUSH
55319: LD_INT 3
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55358: LD_ADDR_VAR 0 45
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 0
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: LD_INT 3
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 3
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 3
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: LD_INT 3
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: LD_INT 3
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 3
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 3
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 3
55655: NEG
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 3
55667: NEG
55668: PUSH
55669: LD_INT 3
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55708: LD_ADDR_VAR 0 46
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: LD_INT 2
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 3
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 3
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 3
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 3
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 3
56004: NEG
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 3
56015: NEG
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56056: LD_ADDR_VAR 0 47
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 2
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56207: LD_ADDR_VAR 0 48
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: LD_INT 2
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: LD_INT 1
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56354: LD_ADDR_VAR 0 49
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: LD_INT 2
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: LD_INT 2
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56498: LD_ADDR_VAR 0 50
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: LD_INT 1
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56642: LD_ADDR_VAR 0 51
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: NEG
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56789: LD_ADDR_VAR 0 52
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: NEG
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56940: LD_ADDR_VAR 0 53
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: LD_INT 0
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 2
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: LD_INT 2
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 2
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57170: LD_ADDR_VAR 0 54
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 2
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: LD_INT 1
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 2
57357: NEG
57358: PUSH
57359: LD_INT 1
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 2
57369: NEG
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57400: LD_ADDR_VAR 0 55
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: PUSH
57536: LD_INT 2
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 2
57576: NEG
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 2
57599: NEG
57600: PUSH
57601: LD_INT 2
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57630: LD_ADDR_VAR 0 56
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 2
57829: NEG
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57860: LD_ADDR_VAR 0 57
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 2
57975: PUSH
57976: LD_INT 0
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: LD_INT 1
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58090: LD_ADDR_VAR 0 58
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: LD_INT 0
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 2
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58320: LD_ADDR_VAR 0 59
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58408: LD_ADDR_VAR 0 60
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58496: LD_ADDR_VAR 0 61
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58584: LD_ADDR_VAR 0 62
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: LD_INT 1
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: LD_INT 1
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58672: LD_ADDR_VAR 0 63
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58760: LD_ADDR_VAR 0 64
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: ST_TO_ADDR
// end ; 1 :
58848: GO 64745
58850: LD_INT 1
58852: DOUBLE
58853: EQUAL
58854: IFTRUE 58858
58856: GO 61481
58858: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58859: LD_ADDR_VAR 0 11
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: LD_INT 3
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 3
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: LIST
58902: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58903: LD_ADDR_VAR 0 12
58907: PUSH
58908: LD_INT 2
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 3
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 3
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: LIST
58943: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58944: LD_ADDR_VAR 0 13
58948: PUSH
58949: LD_INT 3
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 3
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: LD_INT 3
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: LIST
58983: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58984: LD_ADDR_VAR 0 14
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: LD_INT 3
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 3
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: LIST
59024: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59025: LD_ADDR_VAR 0 15
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 3
59043: NEG
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 3
59054: NEG
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: LIST
59068: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59069: LD_ADDR_VAR 0 16
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: LD_INT 3
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 3
59088: NEG
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 3
59100: NEG
59101: PUSH
59102: LD_INT 3
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: LIST
59114: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59115: LD_ADDR_VAR 0 17
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: LD_INT 3
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: LD_INT 3
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 2
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: LIST
59158: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59159: LD_ADDR_VAR 0 18
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: LIST
59199: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59200: LD_ADDR_VAR 0 19
59204: PUSH
59205: LD_INT 3
59207: PUSH
59208: LD_INT 2
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 3
59217: PUSH
59218: LD_INT 3
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: LD_INT 3
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: LIST
59239: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59240: LD_ADDR_VAR 0 20
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: LD_INT 3
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: LD_INT 3
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 1
59267: NEG
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: LIST
59280: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59281: LD_ADDR_VAR 0 21
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: NEG
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 3
59310: NEG
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: LIST
59324: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59325: LD_ADDR_VAR 0 22
59329: PUSH
59330: LD_INT 2
59332: NEG
59333: PUSH
59334: LD_INT 3
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 3
59344: NEG
59345: PUSH
59346: LD_INT 2
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 3
59356: NEG
59357: PUSH
59358: LD_INT 3
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: LIST
59370: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59371: LD_ADDR_VAR 0 23
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_INT 3
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 4
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: PUSH
59402: LD_INT 3
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: LIST
59414: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59415: LD_ADDR_VAR 0 24
59419: PUSH
59420: LD_INT 3
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 3
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 4
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: LIST
59455: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59456: LD_ADDR_VAR 0 25
59460: PUSH
59461: LD_INT 3
59463: PUSH
59464: LD_INT 3
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 4
59473: PUSH
59474: LD_INT 3
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: LD_INT 4
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: LIST
59495: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59496: LD_ADDR_VAR 0 26
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: LD_INT 3
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: LD_INT 4
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: LD_INT 3
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: LIST
59536: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59537: LD_ADDR_VAR 0 27
59541: PUSH
59542: LD_INT 3
59544: NEG
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 4
59566: NEG
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: LIST
59580: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59581: LD_ADDR_VAR 0 28
59585: PUSH
59586: LD_INT 3
59588: NEG
59589: PUSH
59590: LD_INT 3
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 3
59600: NEG
59601: PUSH
59602: LD_INT 4
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 4
59612: NEG
59613: PUSH
59614: LD_INT 3
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: LIST
59626: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59627: LD_ADDR_VAR 0 29
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: LD_INT 3
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 3
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: LD_INT 2
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: LD_INT 4
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: LD_INT 4
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: LD_INT 3
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: LD_INT 5
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 5
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: PUSH
59726: LD_INT 4
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: LD_INT 6
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 6
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: LD_INT 5
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59782: LD_ADDR_VAR 0 30
59786: PUSH
59787: LD_INT 2
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 3
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 3
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 4
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 4
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 4
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 5
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 5
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 5
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 6
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 6
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59925: LD_ADDR_VAR 0 31
59929: PUSH
59930: LD_INT 3
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 3
59942: PUSH
59943: LD_INT 3
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: PUSH
59953: LD_INT 3
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 4
59962: PUSH
59963: LD_INT 3
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 4
59972: PUSH
59973: LD_INT 4
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 3
59982: PUSH
59983: LD_INT 4
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 5
59992: PUSH
59993: LD_INT 4
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 5
60002: PUSH
60003: LD_INT 5
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 4
60012: PUSH
60013: LD_INT 5
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 6
60022: PUSH
60023: LD_INT 5
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 6
60032: PUSH
60033: LD_INT 6
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 5
60042: PUSH
60043: LD_INT 6
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60064: LD_ADDR_VAR 0 32
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: LD_INT 3
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: LD_INT 3
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: PUSH
60103: LD_INT 4
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: LD_INT 4
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: LD_INT 3
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: PUSH
60134: LD_INT 5
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: LD_INT 5
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: LD_INT 4
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: PUSH
60165: LD_INT 6
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 6
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 1
60184: NEG
60185: PUSH
60186: LD_INT 5
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60207: LD_ADDR_VAR 0 33
60211: PUSH
60212: LD_INT 2
60214: NEG
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 3
60236: NEG
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 3
60248: NEG
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 4
60259: NEG
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 4
60270: NEG
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 4
60282: NEG
60283: PUSH
60284: LD_INT 1
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 5
60293: NEG
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 5
60304: NEG
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 5
60316: NEG
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 6
60327: NEG
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 6
60338: NEG
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60362: LD_ADDR_VAR 0 34
60366: PUSH
60367: LD_INT 2
60369: NEG
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 3
60381: NEG
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 3
60393: NEG
60394: PUSH
60395: LD_INT 3
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 3
60405: NEG
60406: PUSH
60407: LD_INT 4
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 4
60417: NEG
60418: PUSH
60419: LD_INT 3
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 4
60429: NEG
60430: PUSH
60431: LD_INT 4
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 4
60441: NEG
60442: PUSH
60443: LD_INT 5
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 5
60453: NEG
60454: PUSH
60455: LD_INT 4
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 5
60465: NEG
60466: PUSH
60467: LD_INT 5
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 5
60477: NEG
60478: PUSH
60479: LD_INT 6
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 6
60489: NEG
60490: PUSH
60491: LD_INT 5
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 6
60501: NEG
60502: PUSH
60503: LD_INT 6
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60525: LD_ADDR_VAR 0 41
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: LD_INT 3
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: LIST
60568: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60569: LD_ADDR_VAR 0 42
60573: PUSH
60574: LD_INT 2
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 2
60586: PUSH
60587: LD_INT 1
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 3
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: LIST
60609: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60610: LD_ADDR_VAR 0 43
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: LD_INT 2
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 3
60627: PUSH
60628: LD_INT 2
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: LD_INT 3
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: LIST
60649: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60650: LD_ADDR_VAR 0 44
60654: PUSH
60655: LD_INT 0
60657: PUSH
60658: LD_INT 2
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: LD_INT 3
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: NEG
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: LIST
60690: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60691: LD_ADDR_VAR 0 45
60695: PUSH
60696: LD_INT 2
60698: NEG
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 2
60709: NEG
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 3
60720: NEG
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: LIST
60734: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60735: LD_ADDR_VAR 0 46
60739: PUSH
60740: LD_INT 2
60742: NEG
60743: PUSH
60744: LD_INT 2
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 2
60754: NEG
60755: PUSH
60756: LD_INT 3
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 3
60766: NEG
60767: PUSH
60768: LD_INT 2
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: LIST
60780: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60781: LD_ADDR_VAR 0 47
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: LD_INT 3
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: LD_INT 3
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60814: LD_ADDR_VAR 0 48
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: LD_INT 2
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60845: LD_ADDR_VAR 0 49
60849: PUSH
60850: LD_INT 3
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 3
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60874: LD_ADDR_VAR 0 50
60878: PUSH
60879: LD_INT 2
60881: PUSH
60882: LD_INT 3
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: LD_INT 3
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60903: LD_ADDR_VAR 0 51
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: LD_INT 2
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 2
60921: NEG
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60934: LD_ADDR_VAR 0 52
60938: PUSH
60939: LD_INT 3
60941: NEG
60942: PUSH
60943: LD_INT 1
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 3
60953: NEG
60954: PUSH
60955: LD_INT 2
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60967: LD_ADDR_VAR 0 53
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: LD_INT 3
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 3
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 1
60997: PUSH
60998: LD_INT 2
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: LIST
61010: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61011: LD_ADDR_VAR 0 54
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 3
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 3
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: LIST
61051: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61052: LD_ADDR_VAR 0 55
61056: PUSH
61057: LD_INT 3
61059: PUSH
61060: LD_INT 2
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 3
61069: PUSH
61070: LD_INT 3
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 2
61079: PUSH
61080: LD_INT 3
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: LIST
61091: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61092: LD_ADDR_VAR 0 56
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: LD_INT 3
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: LD_INT 3
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61133: LD_ADDR_VAR 0 57
61137: PUSH
61138: LD_INT 2
61140: NEG
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 3
61151: NEG
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 3
61162: NEG
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: LIST
61176: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61177: LD_ADDR_VAR 0 58
61181: PUSH
61182: LD_INT 2
61184: NEG
61185: PUSH
61186: LD_INT 3
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 3
61196: NEG
61197: PUSH
61198: LD_INT 2
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 3
61208: NEG
61209: PUSH
61210: LD_INT 3
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: LIST
61222: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61223: LD_ADDR_VAR 0 59
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: LD_INT 2
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: LIST
61266: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61267: LD_ADDR_VAR 0 60
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: LIST
61307: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61308: LD_ADDR_VAR 0 61
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: LD_INT 2
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: LD_INT 2
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: LIST
61347: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61348: LD_ADDR_VAR 0 62
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: NEG
61376: PUSH
61377: LD_INT 1
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: LIST
61388: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61389: LD_ADDR_VAR 0 63
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 2
61418: NEG
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: LIST
61432: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61433: LD_ADDR_VAR 0 64
61437: PUSH
61438: LD_INT 1
61440: NEG
61441: PUSH
61442: LD_INT 2
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 2
61452: NEG
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 2
61464: NEG
61465: PUSH
61466: LD_INT 2
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: LIST
61478: ST_TO_ADDR
// end ; 2 :
61479: GO 64745
61481: LD_INT 2
61483: DOUBLE
61484: EQUAL
61485: IFTRUE 61489
61487: GO 64744
61489: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61490: LD_ADDR_VAR 0 29
61494: PUSH
61495: LD_INT 4
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 4
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 5
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 5
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 4
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 3
61548: PUSH
61549: LD_INT 0
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 3
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 3
61569: PUSH
61570: LD_INT 2
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 5
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 3
61590: PUSH
61591: LD_INT 3
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 3
61600: PUSH
61601: LD_INT 2
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 4
61610: PUSH
61611: LD_INT 3
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 4
61620: PUSH
61621: LD_INT 4
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 3
61630: PUSH
61631: LD_INT 4
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 4
61660: PUSH
61661: LD_INT 2
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: LD_INT 4
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: LD_INT 4
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 0
61690: PUSH
61691: LD_INT 3
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 1
61700: PUSH
61701: LD_INT 4
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: LD_INT 5
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 0
61720: PUSH
61721: LD_INT 5
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: NEG
61731: PUSH
61732: LD_INT 4
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 1
61741: NEG
61742: PUSH
61743: LD_INT 3
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 2
61752: PUSH
61753: LD_INT 5
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 2
61762: NEG
61763: PUSH
61764: LD_INT 3
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 3
61773: NEG
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 2
61796: NEG
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 2
61807: NEG
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 3
61818: NEG
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 4
61829: NEG
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 4
61840: NEG
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 4
61852: NEG
61853: PUSH
61854: LD_INT 2
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: NEG
61865: PUSH
61866: LD_INT 2
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 4
61875: NEG
61876: PUSH
61877: LD_INT 4
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 4
61887: NEG
61888: PUSH
61889: LD_INT 5
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 3
61899: NEG
61900: PUSH
61901: LD_INT 4
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 3
61911: NEG
61912: PUSH
61913: LD_INT 3
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 4
61923: NEG
61924: PUSH
61925: LD_INT 3
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 5
61935: NEG
61936: PUSH
61937: LD_INT 4
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 5
61947: NEG
61948: PUSH
61949: LD_INT 5
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 3
61959: NEG
61960: PUSH
61961: LD_INT 5
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 5
61971: NEG
61972: PUSH
61973: LD_INT 3
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62028: LD_ADDR_VAR 0 30
62032: PUSH
62033: LD_INT 4
62035: PUSH
62036: LD_INT 4
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 4
62045: PUSH
62046: LD_INT 3
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 5
62055: PUSH
62056: LD_INT 4
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 5
62065: PUSH
62066: LD_INT 5
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 4
62075: PUSH
62076: LD_INT 5
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 3
62085: PUSH
62086: LD_INT 4
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 3
62095: PUSH
62096: LD_INT 3
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 5
62105: PUSH
62106: LD_INT 3
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 3
62115: PUSH
62116: LD_INT 5
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: LD_INT 3
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: LD_INT 2
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 1
62145: PUSH
62146: LD_INT 3
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: LD_INT 4
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: LD_INT 4
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: LD_INT 3
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: NEG
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 2
62197: PUSH
62198: LD_INT 4
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: NEG
62208: PUSH
62209: LD_INT 2
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 4
62218: NEG
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 4
62229: NEG
62230: PUSH
62231: LD_INT 1
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 3
62241: NEG
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 3
62252: NEG
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 4
62263: NEG
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 5
62274: NEG
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 5
62285: NEG
62286: PUSH
62287: LD_INT 1
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 5
62297: NEG
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 3
62309: NEG
62310: PUSH
62311: LD_INT 2
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 3
62320: NEG
62321: PUSH
62322: LD_INT 3
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 3
62332: NEG
62333: PUSH
62334: LD_INT 4
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 2
62344: NEG
62345: PUSH
62346: LD_INT 3
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 2
62356: NEG
62357: PUSH
62358: LD_INT 2
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 3
62368: NEG
62369: PUSH
62370: LD_INT 2
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 4
62380: NEG
62381: PUSH
62382: LD_INT 3
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 4
62392: NEG
62393: PUSH
62394: LD_INT 4
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 2
62404: NEG
62405: PUSH
62406: LD_INT 4
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 4
62416: NEG
62417: PUSH
62418: LD_INT 2
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: LD_INT 4
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: LD_INT 5
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: LD_INT 4
62453: NEG
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: PUSH
62462: LD_INT 3
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 3
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: NEG
62484: PUSH
62485: LD_INT 4
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 1
62495: NEG
62496: PUSH
62497: LD_INT 5
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 2
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 2
62518: NEG
62519: PUSH
62520: LD_INT 5
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62575: LD_ADDR_VAR 0 31
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: LD_INT 4
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 0
62592: PUSH
62593: LD_INT 3
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: LD_INT 4
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: LD_INT 5
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 0
62622: PUSH
62623: LD_INT 5
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 1
62632: NEG
62633: PUSH
62634: LD_INT 4
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: LD_INT 3
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 2
62654: PUSH
62655: LD_INT 5
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 2
62664: NEG
62665: PUSH
62666: LD_INT 3
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 3
62675: NEG
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 3
62686: NEG
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 2
62698: NEG
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 2
62709: NEG
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 3
62720: NEG
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 4
62731: NEG
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 4
62742: NEG
62743: PUSH
62744: LD_INT 1
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 4
62754: NEG
62755: PUSH
62756: LD_INT 2
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 2
62766: NEG
62767: PUSH
62768: LD_INT 2
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 4
62777: NEG
62778: PUSH
62779: LD_INT 4
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 4
62789: NEG
62790: PUSH
62791: LD_INT 5
62793: NEG
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 3
62801: NEG
62802: PUSH
62803: LD_INT 4
62805: NEG
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 3
62813: NEG
62814: PUSH
62815: LD_INT 3
62817: NEG
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 4
62825: NEG
62826: PUSH
62827: LD_INT 3
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 5
62837: NEG
62838: PUSH
62839: LD_INT 4
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 5
62849: NEG
62850: PUSH
62851: LD_INT 5
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 3
62861: NEG
62862: PUSH
62863: LD_INT 5
62865: NEG
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 5
62873: NEG
62874: PUSH
62875: LD_INT 3
62877: NEG
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: LD_INT 3
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: LD_INT 4
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 1
62907: PUSH
62908: LD_INT 3
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 1
62918: PUSH
62919: LD_INT 2
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: LD_INT 2
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: LD_INT 3
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: NEG
62953: PUSH
62954: LD_INT 4
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: LD_INT 2
62967: NEG
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 2
62975: NEG
62976: PUSH
62977: LD_INT 4
62979: NEG
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 4
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 4
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 5
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 5
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 4
63028: PUSH
63029: LD_INT 1
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 3
63038: PUSH
63039: LD_INT 0
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 3
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 3
63059: PUSH
63060: LD_INT 2
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 5
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63125: LD_ADDR_VAR 0 32
63129: PUSH
63130: LD_INT 4
63132: NEG
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 4
63143: NEG
63144: PUSH
63145: LD_INT 1
63147: NEG
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 3
63155: NEG
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 3
63166: NEG
63167: PUSH
63168: LD_INT 1
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 4
63177: NEG
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 5
63188: NEG
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 5
63199: NEG
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 5
63211: NEG
63212: PUSH
63213: LD_INT 2
63215: NEG
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 3
63223: NEG
63224: PUSH
63225: LD_INT 2
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 3
63234: NEG
63235: PUSH
63236: LD_INT 3
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 3
63246: NEG
63247: PUSH
63248: LD_INT 4
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: LD_INT 3
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 2
63270: NEG
63271: PUSH
63272: LD_INT 2
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 3
63282: NEG
63283: PUSH
63284: LD_INT 2
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 4
63294: NEG
63295: PUSH
63296: LD_INT 3
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 4
63306: NEG
63307: PUSH
63308: LD_INT 4
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 2
63318: NEG
63319: PUSH
63320: LD_INT 4
63322: NEG
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 4
63330: NEG
63331: PUSH
63332: LD_INT 2
63334: NEG
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 0
63342: PUSH
63343: LD_INT 4
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: LD_INT 5
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: PUSH
63365: LD_INT 4
63367: NEG
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 1
63375: PUSH
63376: LD_INT 3
63378: NEG
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 0
63386: PUSH
63387: LD_INT 3
63389: NEG
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: LD_INT 4
63401: NEG
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: LD_INT 5
63413: NEG
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: LD_INT 3
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 2
63432: NEG
63433: PUSH
63434: LD_INT 5
63436: NEG
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 3
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 3
63454: PUSH
63455: LD_INT 1
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 4
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 4
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 3
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 2
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 2
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 2
63516: PUSH
63517: LD_INT 2
63519: NEG
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 4
63527: PUSH
63528: LD_INT 2
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 4
63537: PUSH
63538: LD_INT 4
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 4
63547: PUSH
63548: LD_INT 3
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 5
63557: PUSH
63558: LD_INT 4
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 5
63567: PUSH
63568: LD_INT 5
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 4
63577: PUSH
63578: LD_INT 5
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 3
63587: PUSH
63588: LD_INT 4
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 3
63597: PUSH
63598: LD_INT 3
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 5
63607: PUSH
63608: LD_INT 3
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 3
63617: PUSH
63618: LD_INT 5
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63672: LD_ADDR_VAR 0 33
63676: PUSH
63677: LD_INT 4
63679: NEG
63680: PUSH
63681: LD_INT 4
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 4
63691: NEG
63692: PUSH
63693: LD_INT 5
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 3
63703: NEG
63704: PUSH
63705: LD_INT 4
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 3
63715: NEG
63716: PUSH
63717: LD_INT 3
63719: NEG
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 4
63727: NEG
63728: PUSH
63729: LD_INT 3
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 5
63739: NEG
63740: PUSH
63741: LD_INT 4
63743: NEG
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 5
63751: NEG
63752: PUSH
63753: LD_INT 5
63755: NEG
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 3
63763: NEG
63764: PUSH
63765: LD_INT 5
63767: NEG
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 5
63775: NEG
63776: PUSH
63777: LD_INT 3
63779: NEG
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: LD_INT 3
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: LD_INT 4
63801: NEG
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 1
63809: PUSH
63810: LD_INT 3
63812: NEG
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 1
63820: PUSH
63821: LD_INT 2
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 0
63831: PUSH
63832: LD_INT 2
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: LD_INT 3
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: LD_INT 4
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 2
63866: PUSH
63867: LD_INT 2
63869: NEG
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 2
63877: NEG
63878: PUSH
63879: LD_INT 4
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 4
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 4
63899: PUSH
63900: LD_INT 1
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 5
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 5
63920: PUSH
63921: LD_INT 1
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 4
63930: PUSH
63931: LD_INT 1
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 3
63940: PUSH
63941: LD_INT 0
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 3
63950: PUSH
63951: LD_INT 1
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 3
63961: PUSH
63962: LD_INT 2
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 5
63972: PUSH
63973: LD_INT 2
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 3
63982: PUSH
63983: LD_INT 3
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 3
63992: PUSH
63993: LD_INT 2
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PUSH
64000: LD_INT 4
64002: PUSH
64003: LD_INT 3
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 4
64012: PUSH
64013: LD_INT 4
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 3
64022: PUSH
64023: LD_INT 4
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 2
64032: PUSH
64033: LD_INT 3
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 2
64042: PUSH
64043: LD_INT 2
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 4
64052: PUSH
64053: LD_INT 2
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 2
64062: PUSH
64063: LD_INT 4
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 0
64072: PUSH
64073: LD_INT 4
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: LD_INT 3
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: LD_INT 4
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 1
64102: PUSH
64103: LD_INT 5
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 0
64112: PUSH
64113: LD_INT 5
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 1
64122: NEG
64123: PUSH
64124: LD_INT 4
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: LD_INT 3
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 2
64144: PUSH
64145: LD_INT 5
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 2
64154: NEG
64155: PUSH
64156: LD_INT 3
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64210: LD_ADDR_VAR 0 34
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: LD_INT 4
64220: NEG
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: LD_INT 5
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 4
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: LD_INT 3
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: LD_INT 3
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: LD_INT 4
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 1
64284: NEG
64285: PUSH
64286: LD_INT 5
64288: NEG
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 2
64296: PUSH
64297: LD_INT 3
64299: NEG
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 2
64307: NEG
64308: PUSH
64309: LD_INT 5
64311: NEG
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 3
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 3
64329: PUSH
64330: LD_INT 1
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 4
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 4
64350: PUSH
64351: LD_INT 1
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 3
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 2
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 2
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 2
64391: PUSH
64392: LD_INT 2
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 4
64402: PUSH
64403: LD_INT 2
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 4
64412: PUSH
64413: LD_INT 4
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 4
64422: PUSH
64423: LD_INT 3
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 5
64432: PUSH
64433: LD_INT 4
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 5
64442: PUSH
64443: LD_INT 5
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 4
64452: PUSH
64453: LD_INT 5
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 3
64462: PUSH
64463: LD_INT 4
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 3
64472: PUSH
64473: LD_INT 3
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 5
64482: PUSH
64483: LD_INT 3
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 3
64492: PUSH
64493: LD_INT 5
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 3
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 0
64512: PUSH
64513: LD_INT 2
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 1
64522: PUSH
64523: LD_INT 3
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 1
64532: PUSH
64533: LD_INT 4
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 0
64542: PUSH
64543: LD_INT 4
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 1
64552: NEG
64553: PUSH
64554: LD_INT 3
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 2
64574: PUSH
64575: LD_INT 4
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 2
64584: NEG
64585: PUSH
64586: LD_INT 2
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 4
64595: NEG
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 4
64606: NEG
64607: PUSH
64608: LD_INT 1
64610: NEG
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 3
64618: NEG
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 3
64629: NEG
64630: PUSH
64631: LD_INT 1
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 4
64640: NEG
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 5
64651: NEG
64652: PUSH
64653: LD_INT 0
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 5
64662: NEG
64663: PUSH
64664: LD_INT 1
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 5
64674: NEG
64675: PUSH
64676: LD_INT 2
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 3
64686: NEG
64687: PUSH
64688: LD_INT 2
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: ST_TO_ADDR
// end ; end ;
64742: GO 64745
64744: POP
// case btype of b_depot , b_warehouse :
64745: LD_VAR 0 1
64749: PUSH
64750: LD_INT 0
64752: DOUBLE
64753: EQUAL
64754: IFTRUE 64764
64756: LD_INT 1
64758: DOUBLE
64759: EQUAL
64760: IFTRUE 64764
64762: GO 64965
64764: POP
// case nation of nation_american :
64765: LD_VAR 0 5
64769: PUSH
64770: LD_INT 1
64772: DOUBLE
64773: EQUAL
64774: IFTRUE 64778
64776: GO 64834
64778: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64779: LD_ADDR_VAR 0 9
64783: PUSH
64784: LD_VAR 0 11
64788: PUSH
64789: LD_VAR 0 12
64793: PUSH
64794: LD_VAR 0 13
64798: PUSH
64799: LD_VAR 0 14
64803: PUSH
64804: LD_VAR 0 15
64808: PUSH
64809: LD_VAR 0 16
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: PUSH
64822: LD_VAR 0 4
64826: PUSH
64827: LD_INT 1
64829: PLUS
64830: ARRAY
64831: ST_TO_ADDR
64832: GO 64963
64834: LD_INT 2
64836: DOUBLE
64837: EQUAL
64838: IFTRUE 64842
64840: GO 64898
64842: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64843: LD_ADDR_VAR 0 9
64847: PUSH
64848: LD_VAR 0 17
64852: PUSH
64853: LD_VAR 0 18
64857: PUSH
64858: LD_VAR 0 19
64862: PUSH
64863: LD_VAR 0 20
64867: PUSH
64868: LD_VAR 0 21
64872: PUSH
64873: LD_VAR 0 22
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: PUSH
64886: LD_VAR 0 4
64890: PUSH
64891: LD_INT 1
64893: PLUS
64894: ARRAY
64895: ST_TO_ADDR
64896: GO 64963
64898: LD_INT 3
64900: DOUBLE
64901: EQUAL
64902: IFTRUE 64906
64904: GO 64962
64906: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64907: LD_ADDR_VAR 0 9
64911: PUSH
64912: LD_VAR 0 23
64916: PUSH
64917: LD_VAR 0 24
64921: PUSH
64922: LD_VAR 0 25
64926: PUSH
64927: LD_VAR 0 26
64931: PUSH
64932: LD_VAR 0 27
64936: PUSH
64937: LD_VAR 0 28
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: PUSH
64950: LD_VAR 0 4
64954: PUSH
64955: LD_INT 1
64957: PLUS
64958: ARRAY
64959: ST_TO_ADDR
64960: GO 64963
64962: POP
64963: GO 65518
64965: LD_INT 2
64967: DOUBLE
64968: EQUAL
64969: IFTRUE 64979
64971: LD_INT 3
64973: DOUBLE
64974: EQUAL
64975: IFTRUE 64979
64977: GO 65035
64979: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64980: LD_ADDR_VAR 0 9
64984: PUSH
64985: LD_VAR 0 29
64989: PUSH
64990: LD_VAR 0 30
64994: PUSH
64995: LD_VAR 0 31
64999: PUSH
65000: LD_VAR 0 32
65004: PUSH
65005: LD_VAR 0 33
65009: PUSH
65010: LD_VAR 0 34
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: PUSH
65023: LD_VAR 0 4
65027: PUSH
65028: LD_INT 1
65030: PLUS
65031: ARRAY
65032: ST_TO_ADDR
65033: GO 65518
65035: LD_INT 16
65037: DOUBLE
65038: EQUAL
65039: IFTRUE 65097
65041: LD_INT 17
65043: DOUBLE
65044: EQUAL
65045: IFTRUE 65097
65047: LD_INT 18
65049: DOUBLE
65050: EQUAL
65051: IFTRUE 65097
65053: LD_INT 19
65055: DOUBLE
65056: EQUAL
65057: IFTRUE 65097
65059: LD_INT 22
65061: DOUBLE
65062: EQUAL
65063: IFTRUE 65097
65065: LD_INT 20
65067: DOUBLE
65068: EQUAL
65069: IFTRUE 65097
65071: LD_INT 21
65073: DOUBLE
65074: EQUAL
65075: IFTRUE 65097
65077: LD_INT 23
65079: DOUBLE
65080: EQUAL
65081: IFTRUE 65097
65083: LD_INT 24
65085: DOUBLE
65086: EQUAL
65087: IFTRUE 65097
65089: LD_INT 25
65091: DOUBLE
65092: EQUAL
65093: IFTRUE 65097
65095: GO 65153
65097: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65098: LD_ADDR_VAR 0 9
65102: PUSH
65103: LD_VAR 0 35
65107: PUSH
65108: LD_VAR 0 36
65112: PUSH
65113: LD_VAR 0 37
65117: PUSH
65118: LD_VAR 0 38
65122: PUSH
65123: LD_VAR 0 39
65127: PUSH
65128: LD_VAR 0 40
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: PUSH
65141: LD_VAR 0 4
65145: PUSH
65146: LD_INT 1
65148: PLUS
65149: ARRAY
65150: ST_TO_ADDR
65151: GO 65518
65153: LD_INT 6
65155: DOUBLE
65156: EQUAL
65157: IFTRUE 65209
65159: LD_INT 7
65161: DOUBLE
65162: EQUAL
65163: IFTRUE 65209
65165: LD_INT 8
65167: DOUBLE
65168: EQUAL
65169: IFTRUE 65209
65171: LD_INT 13
65173: DOUBLE
65174: EQUAL
65175: IFTRUE 65209
65177: LD_INT 12
65179: DOUBLE
65180: EQUAL
65181: IFTRUE 65209
65183: LD_INT 15
65185: DOUBLE
65186: EQUAL
65187: IFTRUE 65209
65189: LD_INT 11
65191: DOUBLE
65192: EQUAL
65193: IFTRUE 65209
65195: LD_INT 14
65197: DOUBLE
65198: EQUAL
65199: IFTRUE 65209
65201: LD_INT 10
65203: DOUBLE
65204: EQUAL
65205: IFTRUE 65209
65207: GO 65265
65209: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65210: LD_ADDR_VAR 0 9
65214: PUSH
65215: LD_VAR 0 41
65219: PUSH
65220: LD_VAR 0 42
65224: PUSH
65225: LD_VAR 0 43
65229: PUSH
65230: LD_VAR 0 44
65234: PUSH
65235: LD_VAR 0 45
65239: PUSH
65240: LD_VAR 0 46
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: PUSH
65253: LD_VAR 0 4
65257: PUSH
65258: LD_INT 1
65260: PLUS
65261: ARRAY
65262: ST_TO_ADDR
65263: GO 65518
65265: LD_INT 36
65267: DOUBLE
65268: EQUAL
65269: IFTRUE 65273
65271: GO 65329
65273: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65274: LD_ADDR_VAR 0 9
65278: PUSH
65279: LD_VAR 0 47
65283: PUSH
65284: LD_VAR 0 48
65288: PUSH
65289: LD_VAR 0 49
65293: PUSH
65294: LD_VAR 0 50
65298: PUSH
65299: LD_VAR 0 51
65303: PUSH
65304: LD_VAR 0 52
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: PUSH
65317: LD_VAR 0 4
65321: PUSH
65322: LD_INT 1
65324: PLUS
65325: ARRAY
65326: ST_TO_ADDR
65327: GO 65518
65329: LD_INT 4
65331: DOUBLE
65332: EQUAL
65333: IFTRUE 65355
65335: LD_INT 5
65337: DOUBLE
65338: EQUAL
65339: IFTRUE 65355
65341: LD_INT 34
65343: DOUBLE
65344: EQUAL
65345: IFTRUE 65355
65347: LD_INT 37
65349: DOUBLE
65350: EQUAL
65351: IFTRUE 65355
65353: GO 65411
65355: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65356: LD_ADDR_VAR 0 9
65360: PUSH
65361: LD_VAR 0 53
65365: PUSH
65366: LD_VAR 0 54
65370: PUSH
65371: LD_VAR 0 55
65375: PUSH
65376: LD_VAR 0 56
65380: PUSH
65381: LD_VAR 0 57
65385: PUSH
65386: LD_VAR 0 58
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: PUSH
65399: LD_VAR 0 4
65403: PUSH
65404: LD_INT 1
65406: PLUS
65407: ARRAY
65408: ST_TO_ADDR
65409: GO 65518
65411: LD_INT 31
65413: DOUBLE
65414: EQUAL
65415: IFTRUE 65461
65417: LD_INT 32
65419: DOUBLE
65420: EQUAL
65421: IFTRUE 65461
65423: LD_INT 33
65425: DOUBLE
65426: EQUAL
65427: IFTRUE 65461
65429: LD_INT 27
65431: DOUBLE
65432: EQUAL
65433: IFTRUE 65461
65435: LD_INT 26
65437: DOUBLE
65438: EQUAL
65439: IFTRUE 65461
65441: LD_INT 28
65443: DOUBLE
65444: EQUAL
65445: IFTRUE 65461
65447: LD_INT 29
65449: DOUBLE
65450: EQUAL
65451: IFTRUE 65461
65453: LD_INT 30
65455: DOUBLE
65456: EQUAL
65457: IFTRUE 65461
65459: GO 65517
65461: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65462: LD_ADDR_VAR 0 9
65466: PUSH
65467: LD_VAR 0 59
65471: PUSH
65472: LD_VAR 0 60
65476: PUSH
65477: LD_VAR 0 61
65481: PUSH
65482: LD_VAR 0 62
65486: PUSH
65487: LD_VAR 0 63
65491: PUSH
65492: LD_VAR 0 64
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: PUSH
65505: LD_VAR 0 4
65509: PUSH
65510: LD_INT 1
65512: PLUS
65513: ARRAY
65514: ST_TO_ADDR
65515: GO 65518
65517: POP
// temp_list2 = [ ] ;
65518: LD_ADDR_VAR 0 10
65522: PUSH
65523: EMPTY
65524: ST_TO_ADDR
// for i in temp_list do
65525: LD_ADDR_VAR 0 8
65529: PUSH
65530: LD_VAR 0 9
65534: PUSH
65535: FOR_IN
65536: IFFALSE 65588
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65538: LD_ADDR_VAR 0 10
65542: PUSH
65543: LD_VAR 0 10
65547: PUSH
65548: LD_VAR 0 8
65552: PUSH
65553: LD_INT 1
65555: ARRAY
65556: PUSH
65557: LD_VAR 0 2
65561: PLUS
65562: PUSH
65563: LD_VAR 0 8
65567: PUSH
65568: LD_INT 2
65570: ARRAY
65571: PUSH
65572: LD_VAR 0 3
65576: PLUS
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: EMPTY
65583: LIST
65584: ADD
65585: ST_TO_ADDR
65586: GO 65535
65588: POP
65589: POP
// result = temp_list2 ;
65590: LD_ADDR_VAR 0 7
65594: PUSH
65595: LD_VAR 0 10
65599: ST_TO_ADDR
// end ;
65600: LD_VAR 0 7
65604: RET
// export function EnemyInRange ( unit , dist ) ; begin
65605: LD_INT 0
65607: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65608: LD_ADDR_VAR 0 3
65612: PUSH
65613: LD_VAR 0 1
65617: PPUSH
65618: CALL_OW 255
65622: PPUSH
65623: LD_VAR 0 1
65627: PPUSH
65628: CALL_OW 250
65632: PPUSH
65633: LD_VAR 0 1
65637: PPUSH
65638: CALL_OW 251
65642: PPUSH
65643: LD_VAR 0 2
65647: PPUSH
65648: CALL 38978 0 4
65652: PUSH
65653: LD_INT 4
65655: ARRAY
65656: ST_TO_ADDR
// end ;
65657: LD_VAR 0 3
65661: RET
// export function PlayerSeeMe ( unit ) ; begin
65662: LD_INT 0
65664: PPUSH
// result := See ( your_side , unit ) ;
65665: LD_ADDR_VAR 0 2
65669: PUSH
65670: LD_OWVAR 2
65674: PPUSH
65675: LD_VAR 0 1
65679: PPUSH
65680: CALL_OW 292
65684: ST_TO_ADDR
// end ;
65685: LD_VAR 0 2
65689: RET
// export function ReverseDir ( unit ) ; begin
65690: LD_INT 0
65692: PPUSH
// if not unit then
65693: LD_VAR 0 1
65697: NOT
65698: IFFALSE 65702
// exit ;
65700: GO 65725
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65702: LD_ADDR_VAR 0 2
65706: PUSH
65707: LD_VAR 0 1
65711: PPUSH
65712: CALL_OW 254
65716: PUSH
65717: LD_INT 3
65719: PLUS
65720: PUSH
65721: LD_INT 6
65723: MOD
65724: ST_TO_ADDR
// end ;
65725: LD_VAR 0 2
65729: RET
// export function ReverseArray ( array ) ; var i ; begin
65730: LD_INT 0
65732: PPUSH
65733: PPUSH
// if not array then
65734: LD_VAR 0 1
65738: NOT
65739: IFFALSE 65743
// exit ;
65741: GO 65798
// result := [ ] ;
65743: LD_ADDR_VAR 0 2
65747: PUSH
65748: EMPTY
65749: ST_TO_ADDR
// for i := array downto 1 do
65750: LD_ADDR_VAR 0 3
65754: PUSH
65755: DOUBLE
65756: LD_VAR 0 1
65760: INC
65761: ST_TO_ADDR
65762: LD_INT 1
65764: PUSH
65765: FOR_DOWNTO
65766: IFFALSE 65796
// result := Join ( result , array [ i ] ) ;
65768: LD_ADDR_VAR 0 2
65772: PUSH
65773: LD_VAR 0 2
65777: PPUSH
65778: LD_VAR 0 1
65782: PUSH
65783: LD_VAR 0 3
65787: ARRAY
65788: PPUSH
65789: CALL 70463 0 2
65793: ST_TO_ADDR
65794: GO 65765
65796: POP
65797: POP
// end ;
65798: LD_VAR 0 2
65802: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65803: LD_INT 0
65805: PPUSH
65806: PPUSH
65807: PPUSH
65808: PPUSH
65809: PPUSH
65810: PPUSH
// if not unit or not hexes then
65811: LD_VAR 0 1
65815: NOT
65816: PUSH
65817: LD_VAR 0 2
65821: NOT
65822: OR
65823: IFFALSE 65827
// exit ;
65825: GO 65950
// dist := 9999 ;
65827: LD_ADDR_VAR 0 5
65831: PUSH
65832: LD_INT 9999
65834: ST_TO_ADDR
// for i = 1 to hexes do
65835: LD_ADDR_VAR 0 4
65839: PUSH
65840: DOUBLE
65841: LD_INT 1
65843: DEC
65844: ST_TO_ADDR
65845: LD_VAR 0 2
65849: PUSH
65850: FOR_TO
65851: IFFALSE 65938
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65853: LD_ADDR_VAR 0 6
65857: PUSH
65858: LD_VAR 0 1
65862: PPUSH
65863: LD_VAR 0 2
65867: PUSH
65868: LD_VAR 0 4
65872: ARRAY
65873: PUSH
65874: LD_INT 1
65876: ARRAY
65877: PPUSH
65878: LD_VAR 0 2
65882: PUSH
65883: LD_VAR 0 4
65887: ARRAY
65888: PUSH
65889: LD_INT 2
65891: ARRAY
65892: PPUSH
65893: CALL_OW 297
65897: ST_TO_ADDR
// if tdist < dist then
65898: LD_VAR 0 6
65902: PUSH
65903: LD_VAR 0 5
65907: LESS
65908: IFFALSE 65936
// begin hex := hexes [ i ] ;
65910: LD_ADDR_VAR 0 8
65914: PUSH
65915: LD_VAR 0 2
65919: PUSH
65920: LD_VAR 0 4
65924: ARRAY
65925: ST_TO_ADDR
// dist := tdist ;
65926: LD_ADDR_VAR 0 5
65930: PUSH
65931: LD_VAR 0 6
65935: ST_TO_ADDR
// end ; end ;
65936: GO 65850
65938: POP
65939: POP
// result := hex ;
65940: LD_ADDR_VAR 0 3
65944: PUSH
65945: LD_VAR 0 8
65949: ST_TO_ADDR
// end ;
65950: LD_VAR 0 3
65954: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65955: LD_INT 0
65957: PPUSH
65958: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65959: LD_VAR 0 1
65963: NOT
65964: PUSH
65965: LD_VAR 0 1
65969: PUSH
65970: LD_INT 21
65972: PUSH
65973: LD_INT 2
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 23
65982: PUSH
65983: LD_INT 2
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PPUSH
65994: CALL_OW 69
65998: IN
65999: NOT
66000: OR
66001: IFFALSE 66005
// exit ;
66003: GO 66052
// for i = 1 to 3 do
66005: LD_ADDR_VAR 0 3
66009: PUSH
66010: DOUBLE
66011: LD_INT 1
66013: DEC
66014: ST_TO_ADDR
66015: LD_INT 3
66017: PUSH
66018: FOR_TO
66019: IFFALSE 66050
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66021: LD_VAR 0 1
66025: PPUSH
66026: CALL_OW 250
66030: PPUSH
66031: LD_VAR 0 1
66035: PPUSH
66036: CALL_OW 251
66040: PPUSH
66041: LD_INT 1
66043: PPUSH
66044: CALL_OW 453
66048: GO 66018
66050: POP
66051: POP
// end ;
66052: LD_VAR 0 2
66056: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66057: LD_INT 0
66059: PPUSH
66060: PPUSH
66061: PPUSH
66062: PPUSH
66063: PPUSH
66064: PPUSH
// if not unit or not enemy_unit then
66065: LD_VAR 0 1
66069: NOT
66070: PUSH
66071: LD_VAR 0 2
66075: NOT
66076: OR
66077: IFFALSE 66081
// exit ;
66079: GO 66548
// if GetLives ( i ) < 250 then
66081: LD_VAR 0 4
66085: PPUSH
66086: CALL_OW 256
66090: PUSH
66091: LD_INT 250
66093: LESS
66094: IFFALSE 66107
// begin ComAutodestruct ( i ) ;
66096: LD_VAR 0 4
66100: PPUSH
66101: CALL 65955 0 1
// exit ;
66105: GO 66548
// end ; x := GetX ( enemy_unit ) ;
66107: LD_ADDR_VAR 0 7
66111: PUSH
66112: LD_VAR 0 2
66116: PPUSH
66117: CALL_OW 250
66121: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66122: LD_ADDR_VAR 0 8
66126: PUSH
66127: LD_VAR 0 2
66131: PPUSH
66132: CALL_OW 251
66136: ST_TO_ADDR
// if not x or not y then
66137: LD_VAR 0 7
66141: NOT
66142: PUSH
66143: LD_VAR 0 8
66147: NOT
66148: OR
66149: IFFALSE 66153
// exit ;
66151: GO 66548
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66153: LD_ADDR_VAR 0 6
66157: PUSH
66158: LD_VAR 0 7
66162: PPUSH
66163: LD_INT 0
66165: PPUSH
66166: LD_INT 4
66168: PPUSH
66169: CALL_OW 272
66173: PUSH
66174: LD_VAR 0 8
66178: PPUSH
66179: LD_INT 0
66181: PPUSH
66182: LD_INT 4
66184: PPUSH
66185: CALL_OW 273
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_VAR 0 7
66198: PPUSH
66199: LD_INT 1
66201: PPUSH
66202: LD_INT 4
66204: PPUSH
66205: CALL_OW 272
66209: PUSH
66210: LD_VAR 0 8
66214: PPUSH
66215: LD_INT 1
66217: PPUSH
66218: LD_INT 4
66220: PPUSH
66221: CALL_OW 273
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_VAR 0 7
66234: PPUSH
66235: LD_INT 2
66237: PPUSH
66238: LD_INT 4
66240: PPUSH
66241: CALL_OW 272
66245: PUSH
66246: LD_VAR 0 8
66250: PPUSH
66251: LD_INT 2
66253: PPUSH
66254: LD_INT 4
66256: PPUSH
66257: CALL_OW 273
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_VAR 0 7
66270: PPUSH
66271: LD_INT 3
66273: PPUSH
66274: LD_INT 4
66276: PPUSH
66277: CALL_OW 272
66281: PUSH
66282: LD_VAR 0 8
66286: PPUSH
66287: LD_INT 3
66289: PPUSH
66290: LD_INT 4
66292: PPUSH
66293: CALL_OW 273
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_VAR 0 7
66306: PPUSH
66307: LD_INT 4
66309: PPUSH
66310: LD_INT 4
66312: PPUSH
66313: CALL_OW 272
66317: PUSH
66318: LD_VAR 0 8
66322: PPUSH
66323: LD_INT 4
66325: PPUSH
66326: LD_INT 4
66328: PPUSH
66329: CALL_OW 273
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_VAR 0 7
66342: PPUSH
66343: LD_INT 5
66345: PPUSH
66346: LD_INT 4
66348: PPUSH
66349: CALL_OW 272
66353: PUSH
66354: LD_VAR 0 8
66358: PPUSH
66359: LD_INT 5
66361: PPUSH
66362: LD_INT 4
66364: PPUSH
66365: CALL_OW 273
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: ST_TO_ADDR
// for i = tmp downto 1 do
66382: LD_ADDR_VAR 0 4
66386: PUSH
66387: DOUBLE
66388: LD_VAR 0 6
66392: INC
66393: ST_TO_ADDR
66394: LD_INT 1
66396: PUSH
66397: FOR_DOWNTO
66398: IFFALSE 66499
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66400: LD_VAR 0 6
66404: PUSH
66405: LD_VAR 0 4
66409: ARRAY
66410: PUSH
66411: LD_INT 1
66413: ARRAY
66414: PPUSH
66415: LD_VAR 0 6
66419: PUSH
66420: LD_VAR 0 4
66424: ARRAY
66425: PUSH
66426: LD_INT 2
66428: ARRAY
66429: PPUSH
66430: CALL_OW 488
66434: NOT
66435: PUSH
66436: LD_VAR 0 6
66440: PUSH
66441: LD_VAR 0 4
66445: ARRAY
66446: PUSH
66447: LD_INT 1
66449: ARRAY
66450: PPUSH
66451: LD_VAR 0 6
66455: PUSH
66456: LD_VAR 0 4
66460: ARRAY
66461: PUSH
66462: LD_INT 2
66464: ARRAY
66465: PPUSH
66466: CALL_OW 428
66470: PUSH
66471: LD_INT 0
66473: NONEQUAL
66474: OR
66475: IFFALSE 66497
// tmp := Delete ( tmp , i ) ;
66477: LD_ADDR_VAR 0 6
66481: PUSH
66482: LD_VAR 0 6
66486: PPUSH
66487: LD_VAR 0 4
66491: PPUSH
66492: CALL_OW 3
66496: ST_TO_ADDR
66497: GO 66397
66499: POP
66500: POP
// j := GetClosestHex ( unit , tmp ) ;
66501: LD_ADDR_VAR 0 5
66505: PUSH
66506: LD_VAR 0 1
66510: PPUSH
66511: LD_VAR 0 6
66515: PPUSH
66516: CALL 65803 0 2
66520: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66521: LD_VAR 0 1
66525: PPUSH
66526: LD_VAR 0 5
66530: PUSH
66531: LD_INT 1
66533: ARRAY
66534: PPUSH
66535: LD_VAR 0 5
66539: PUSH
66540: LD_INT 2
66542: ARRAY
66543: PPUSH
66544: CALL_OW 111
// end ;
66548: LD_VAR 0 3
66552: RET
// export function PrepareApemanSoldier ( ) ; begin
66553: LD_INT 0
66555: PPUSH
// uc_nation := 0 ;
66556: LD_ADDR_OWVAR 21
66560: PUSH
66561: LD_INT 0
66563: ST_TO_ADDR
// hc_sex := sex_male ;
66564: LD_ADDR_OWVAR 27
66568: PUSH
66569: LD_INT 1
66571: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66572: LD_ADDR_OWVAR 28
66576: PUSH
66577: LD_INT 15
66579: ST_TO_ADDR
// hc_gallery :=  ;
66580: LD_ADDR_OWVAR 33
66584: PUSH
66585: LD_STRING 
66587: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66588: LD_ADDR_OWVAR 31
66592: PUSH
66593: LD_INT 0
66595: PPUSH
66596: LD_INT 3
66598: PPUSH
66599: CALL_OW 12
66603: PUSH
66604: LD_INT 0
66606: PPUSH
66607: LD_INT 3
66609: PPUSH
66610: CALL_OW 12
66614: PUSH
66615: LD_INT 0
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: ST_TO_ADDR
// end ;
66627: LD_VAR 0 1
66631: RET
// export function PrepareApemanEngineer ( ) ; begin
66632: LD_INT 0
66634: PPUSH
// uc_nation := 0 ;
66635: LD_ADDR_OWVAR 21
66639: PUSH
66640: LD_INT 0
66642: ST_TO_ADDR
// hc_sex := sex_male ;
66643: LD_ADDR_OWVAR 27
66647: PUSH
66648: LD_INT 1
66650: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66651: LD_ADDR_OWVAR 28
66655: PUSH
66656: LD_INT 16
66658: ST_TO_ADDR
// hc_gallery :=  ;
66659: LD_ADDR_OWVAR 33
66663: PUSH
66664: LD_STRING 
66666: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66667: LD_ADDR_OWVAR 31
66671: PUSH
66672: LD_INT 0
66674: PPUSH
66675: LD_INT 3
66677: PPUSH
66678: CALL_OW 12
66682: PUSH
66683: LD_INT 0
66685: PPUSH
66686: LD_INT 3
66688: PPUSH
66689: CALL_OW 12
66693: PUSH
66694: LD_INT 0
66696: PUSH
66697: LD_INT 0
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: ST_TO_ADDR
// end ;
66706: LD_VAR 0 1
66710: RET
// export function PrepareApeman ( agressivity ) ; begin
66711: LD_INT 0
66713: PPUSH
// uc_side := 0 ;
66714: LD_ADDR_OWVAR 20
66718: PUSH
66719: LD_INT 0
66721: ST_TO_ADDR
// uc_nation := 0 ;
66722: LD_ADDR_OWVAR 21
66726: PUSH
66727: LD_INT 0
66729: ST_TO_ADDR
// hc_sex := sex_male ;
66730: LD_ADDR_OWVAR 27
66734: PUSH
66735: LD_INT 1
66737: ST_TO_ADDR
// hc_class := class_apeman ;
66738: LD_ADDR_OWVAR 28
66742: PUSH
66743: LD_INT 12
66745: ST_TO_ADDR
// hc_gallery :=  ;
66746: LD_ADDR_OWVAR 33
66750: PUSH
66751: LD_STRING 
66753: ST_TO_ADDR
// if agressivity = 0 then
66754: LD_VAR 0 1
66758: PUSH
66759: LD_INT 0
66761: EQUAL
66762: IFFALSE 66774
// hc_agressivity := 0 else
66764: LD_ADDR_OWVAR 35
66768: PUSH
66769: LD_INT 0
66771: ST_TO_ADDR
66772: GO 66795
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66774: LD_ADDR_OWVAR 35
66778: PUSH
66779: LD_VAR 0 1
66783: NEG
66784: PPUSH
66785: LD_VAR 0 1
66789: PPUSH
66790: CALL_OW 12
66794: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66795: LD_ADDR_OWVAR 31
66799: PUSH
66800: LD_INT 0
66802: PPUSH
66803: LD_INT 3
66805: PPUSH
66806: CALL_OW 12
66810: PUSH
66811: LD_INT 0
66813: PPUSH
66814: LD_INT 3
66816: PPUSH
66817: CALL_OW 12
66821: PUSH
66822: LD_INT 0
66824: PUSH
66825: LD_INT 0
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: ST_TO_ADDR
// end ;
66834: LD_VAR 0 2
66838: RET
// export function PrepareTiger ( agressivity ) ; begin
66839: LD_INT 0
66841: PPUSH
// uc_side := 0 ;
66842: LD_ADDR_OWVAR 20
66846: PUSH
66847: LD_INT 0
66849: ST_TO_ADDR
// uc_nation := 0 ;
66850: LD_ADDR_OWVAR 21
66854: PUSH
66855: LD_INT 0
66857: ST_TO_ADDR
// hc_class := class_tiger ;
66858: LD_ADDR_OWVAR 28
66862: PUSH
66863: LD_INT 14
66865: ST_TO_ADDR
// hc_gallery :=  ;
66866: LD_ADDR_OWVAR 33
66870: PUSH
66871: LD_STRING 
66873: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66874: LD_ADDR_OWVAR 35
66878: PUSH
66879: LD_VAR 0 1
66883: NEG
66884: PPUSH
66885: LD_VAR 0 1
66889: PPUSH
66890: CALL_OW 12
66894: ST_TO_ADDR
// end ;
66895: LD_VAR 0 2
66899: RET
// export function PrepareEnchidna ( ) ; begin
66900: LD_INT 0
66902: PPUSH
// uc_side := 0 ;
66903: LD_ADDR_OWVAR 20
66907: PUSH
66908: LD_INT 0
66910: ST_TO_ADDR
// uc_nation := 0 ;
66911: LD_ADDR_OWVAR 21
66915: PUSH
66916: LD_INT 0
66918: ST_TO_ADDR
// hc_class := class_baggie ;
66919: LD_ADDR_OWVAR 28
66923: PUSH
66924: LD_INT 13
66926: ST_TO_ADDR
// hc_gallery :=  ;
66927: LD_ADDR_OWVAR 33
66931: PUSH
66932: LD_STRING 
66934: ST_TO_ADDR
// end ;
66935: LD_VAR 0 1
66939: RET
// export function PrepareFrog ( ) ; begin
66940: LD_INT 0
66942: PPUSH
// uc_side := 0 ;
66943: LD_ADDR_OWVAR 20
66947: PUSH
66948: LD_INT 0
66950: ST_TO_ADDR
// uc_nation := 0 ;
66951: LD_ADDR_OWVAR 21
66955: PUSH
66956: LD_INT 0
66958: ST_TO_ADDR
// hc_class := class_frog ;
66959: LD_ADDR_OWVAR 28
66963: PUSH
66964: LD_INT 19
66966: ST_TO_ADDR
// hc_gallery :=  ;
66967: LD_ADDR_OWVAR 33
66971: PUSH
66972: LD_STRING 
66974: ST_TO_ADDR
// end ;
66975: LD_VAR 0 1
66979: RET
// export function PrepareFish ( ) ; begin
66980: LD_INT 0
66982: PPUSH
// uc_side := 0 ;
66983: LD_ADDR_OWVAR 20
66987: PUSH
66988: LD_INT 0
66990: ST_TO_ADDR
// uc_nation := 0 ;
66991: LD_ADDR_OWVAR 21
66995: PUSH
66996: LD_INT 0
66998: ST_TO_ADDR
// hc_class := class_fish ;
66999: LD_ADDR_OWVAR 28
67003: PUSH
67004: LD_INT 20
67006: ST_TO_ADDR
// hc_gallery :=  ;
67007: LD_ADDR_OWVAR 33
67011: PUSH
67012: LD_STRING 
67014: ST_TO_ADDR
// end ;
67015: LD_VAR 0 1
67019: RET
// export function PrepareBird ( ) ; begin
67020: LD_INT 0
67022: PPUSH
// uc_side := 0 ;
67023: LD_ADDR_OWVAR 20
67027: PUSH
67028: LD_INT 0
67030: ST_TO_ADDR
// uc_nation := 0 ;
67031: LD_ADDR_OWVAR 21
67035: PUSH
67036: LD_INT 0
67038: ST_TO_ADDR
// hc_class := class_phororhacos ;
67039: LD_ADDR_OWVAR 28
67043: PUSH
67044: LD_INT 18
67046: ST_TO_ADDR
// hc_gallery :=  ;
67047: LD_ADDR_OWVAR 33
67051: PUSH
67052: LD_STRING 
67054: ST_TO_ADDR
// end ;
67055: LD_VAR 0 1
67059: RET
// export function PrepareHorse ( ) ; begin
67060: LD_INT 0
67062: PPUSH
// uc_side := 0 ;
67063: LD_ADDR_OWVAR 20
67067: PUSH
67068: LD_INT 0
67070: ST_TO_ADDR
// uc_nation := 0 ;
67071: LD_ADDR_OWVAR 21
67075: PUSH
67076: LD_INT 0
67078: ST_TO_ADDR
// hc_class := class_horse ;
67079: LD_ADDR_OWVAR 28
67083: PUSH
67084: LD_INT 21
67086: ST_TO_ADDR
// hc_gallery :=  ;
67087: LD_ADDR_OWVAR 33
67091: PUSH
67092: LD_STRING 
67094: ST_TO_ADDR
// end ;
67095: LD_VAR 0 1
67099: RET
// export function PrepareMastodont ( ) ; begin
67100: LD_INT 0
67102: PPUSH
// uc_side := 0 ;
67103: LD_ADDR_OWVAR 20
67107: PUSH
67108: LD_INT 0
67110: ST_TO_ADDR
// uc_nation := 0 ;
67111: LD_ADDR_OWVAR 21
67115: PUSH
67116: LD_INT 0
67118: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67119: LD_ADDR_OWVAR 37
67123: PUSH
67124: LD_INT 31
67126: ST_TO_ADDR
// vc_control := control_rider ;
67127: LD_ADDR_OWVAR 38
67131: PUSH
67132: LD_INT 4
67134: ST_TO_ADDR
// end ;
67135: LD_VAR 0 1
67139: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67140: LD_INT 0
67142: PPUSH
67143: PPUSH
67144: PPUSH
// uc_side = 0 ;
67145: LD_ADDR_OWVAR 20
67149: PUSH
67150: LD_INT 0
67152: ST_TO_ADDR
// uc_nation = 0 ;
67153: LD_ADDR_OWVAR 21
67157: PUSH
67158: LD_INT 0
67160: ST_TO_ADDR
// InitHc_All ( ) ;
67161: CALL_OW 584
// InitVc ;
67165: CALL_OW 20
// if mastodonts then
67169: LD_VAR 0 6
67173: IFFALSE 67240
// for i = 1 to mastodonts do
67175: LD_ADDR_VAR 0 11
67179: PUSH
67180: DOUBLE
67181: LD_INT 1
67183: DEC
67184: ST_TO_ADDR
67185: LD_VAR 0 6
67189: PUSH
67190: FOR_TO
67191: IFFALSE 67238
// begin vc_chassis := 31 ;
67193: LD_ADDR_OWVAR 37
67197: PUSH
67198: LD_INT 31
67200: ST_TO_ADDR
// vc_control := control_rider ;
67201: LD_ADDR_OWVAR 38
67205: PUSH
67206: LD_INT 4
67208: ST_TO_ADDR
// animal := CreateVehicle ;
67209: LD_ADDR_VAR 0 12
67213: PUSH
67214: CALL_OW 45
67218: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67219: LD_VAR 0 12
67223: PPUSH
67224: LD_VAR 0 8
67228: PPUSH
67229: LD_INT 0
67231: PPUSH
67232: CALL 69368 0 3
// end ;
67236: GO 67190
67238: POP
67239: POP
// if horses then
67240: LD_VAR 0 5
67244: IFFALSE 67311
// for i = 1 to horses do
67246: LD_ADDR_VAR 0 11
67250: PUSH
67251: DOUBLE
67252: LD_INT 1
67254: DEC
67255: ST_TO_ADDR
67256: LD_VAR 0 5
67260: PUSH
67261: FOR_TO
67262: IFFALSE 67309
// begin hc_class := 21 ;
67264: LD_ADDR_OWVAR 28
67268: PUSH
67269: LD_INT 21
67271: ST_TO_ADDR
// hc_gallery :=  ;
67272: LD_ADDR_OWVAR 33
67276: PUSH
67277: LD_STRING 
67279: ST_TO_ADDR
// animal := CreateHuman ;
67280: LD_ADDR_VAR 0 12
67284: PUSH
67285: CALL_OW 44
67289: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67290: LD_VAR 0 12
67294: PPUSH
67295: LD_VAR 0 8
67299: PPUSH
67300: LD_INT 0
67302: PPUSH
67303: CALL 69368 0 3
// end ;
67307: GO 67261
67309: POP
67310: POP
// if birds then
67311: LD_VAR 0 1
67315: IFFALSE 67382
// for i = 1 to birds do
67317: LD_ADDR_VAR 0 11
67321: PUSH
67322: DOUBLE
67323: LD_INT 1
67325: DEC
67326: ST_TO_ADDR
67327: LD_VAR 0 1
67331: PUSH
67332: FOR_TO
67333: IFFALSE 67380
// begin hc_class := 18 ;
67335: LD_ADDR_OWVAR 28
67339: PUSH
67340: LD_INT 18
67342: ST_TO_ADDR
// hc_gallery =  ;
67343: LD_ADDR_OWVAR 33
67347: PUSH
67348: LD_STRING 
67350: ST_TO_ADDR
// animal := CreateHuman ;
67351: LD_ADDR_VAR 0 12
67355: PUSH
67356: CALL_OW 44
67360: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67361: LD_VAR 0 12
67365: PPUSH
67366: LD_VAR 0 8
67370: PPUSH
67371: LD_INT 0
67373: PPUSH
67374: CALL 69368 0 3
// end ;
67378: GO 67332
67380: POP
67381: POP
// if tigers then
67382: LD_VAR 0 2
67386: IFFALSE 67470
// for i = 1 to tigers do
67388: LD_ADDR_VAR 0 11
67392: PUSH
67393: DOUBLE
67394: LD_INT 1
67396: DEC
67397: ST_TO_ADDR
67398: LD_VAR 0 2
67402: PUSH
67403: FOR_TO
67404: IFFALSE 67468
// begin hc_class = class_tiger ;
67406: LD_ADDR_OWVAR 28
67410: PUSH
67411: LD_INT 14
67413: ST_TO_ADDR
// hc_gallery =  ;
67414: LD_ADDR_OWVAR 33
67418: PUSH
67419: LD_STRING 
67421: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67422: LD_ADDR_OWVAR 35
67426: PUSH
67427: LD_INT 7
67429: NEG
67430: PPUSH
67431: LD_INT 7
67433: PPUSH
67434: CALL_OW 12
67438: ST_TO_ADDR
// animal := CreateHuman ;
67439: LD_ADDR_VAR 0 12
67443: PUSH
67444: CALL_OW 44
67448: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67449: LD_VAR 0 12
67453: PPUSH
67454: LD_VAR 0 8
67458: PPUSH
67459: LD_INT 0
67461: PPUSH
67462: CALL 69368 0 3
// end ;
67466: GO 67403
67468: POP
67469: POP
// if apemans then
67470: LD_VAR 0 3
67474: IFFALSE 67597
// for i = 1 to apemans do
67476: LD_ADDR_VAR 0 11
67480: PUSH
67481: DOUBLE
67482: LD_INT 1
67484: DEC
67485: ST_TO_ADDR
67486: LD_VAR 0 3
67490: PUSH
67491: FOR_TO
67492: IFFALSE 67595
// begin hc_class = class_apeman ;
67494: LD_ADDR_OWVAR 28
67498: PUSH
67499: LD_INT 12
67501: ST_TO_ADDR
// hc_gallery =  ;
67502: LD_ADDR_OWVAR 33
67506: PUSH
67507: LD_STRING 
67509: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67510: LD_ADDR_OWVAR 35
67514: PUSH
67515: LD_INT 2
67517: NEG
67518: PPUSH
67519: LD_INT 2
67521: PPUSH
67522: CALL_OW 12
67526: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67527: LD_ADDR_OWVAR 31
67531: PUSH
67532: LD_INT 1
67534: PPUSH
67535: LD_INT 3
67537: PPUSH
67538: CALL_OW 12
67542: PUSH
67543: LD_INT 1
67545: PPUSH
67546: LD_INT 3
67548: PPUSH
67549: CALL_OW 12
67553: PUSH
67554: LD_INT 0
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: ST_TO_ADDR
// animal := CreateHuman ;
67566: LD_ADDR_VAR 0 12
67570: PUSH
67571: CALL_OW 44
67575: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67576: LD_VAR 0 12
67580: PPUSH
67581: LD_VAR 0 8
67585: PPUSH
67586: LD_INT 0
67588: PPUSH
67589: CALL 69368 0 3
// end ;
67593: GO 67491
67595: POP
67596: POP
// if enchidnas then
67597: LD_VAR 0 4
67601: IFFALSE 67668
// for i = 1 to enchidnas do
67603: LD_ADDR_VAR 0 11
67607: PUSH
67608: DOUBLE
67609: LD_INT 1
67611: DEC
67612: ST_TO_ADDR
67613: LD_VAR 0 4
67617: PUSH
67618: FOR_TO
67619: IFFALSE 67666
// begin hc_class = 13 ;
67621: LD_ADDR_OWVAR 28
67625: PUSH
67626: LD_INT 13
67628: ST_TO_ADDR
// hc_gallery =  ;
67629: LD_ADDR_OWVAR 33
67633: PUSH
67634: LD_STRING 
67636: ST_TO_ADDR
// animal := CreateHuman ;
67637: LD_ADDR_VAR 0 12
67641: PUSH
67642: CALL_OW 44
67646: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67647: LD_VAR 0 12
67651: PPUSH
67652: LD_VAR 0 8
67656: PPUSH
67657: LD_INT 0
67659: PPUSH
67660: CALL 69368 0 3
// end ;
67664: GO 67618
67666: POP
67667: POP
// if fishes then
67668: LD_VAR 0 7
67672: IFFALSE 67739
// for i = 1 to fishes do
67674: LD_ADDR_VAR 0 11
67678: PUSH
67679: DOUBLE
67680: LD_INT 1
67682: DEC
67683: ST_TO_ADDR
67684: LD_VAR 0 7
67688: PUSH
67689: FOR_TO
67690: IFFALSE 67737
// begin hc_class = 20 ;
67692: LD_ADDR_OWVAR 28
67696: PUSH
67697: LD_INT 20
67699: ST_TO_ADDR
// hc_gallery =  ;
67700: LD_ADDR_OWVAR 33
67704: PUSH
67705: LD_STRING 
67707: ST_TO_ADDR
// animal := CreateHuman ;
67708: LD_ADDR_VAR 0 12
67712: PUSH
67713: CALL_OW 44
67717: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67718: LD_VAR 0 12
67722: PPUSH
67723: LD_VAR 0 9
67727: PPUSH
67728: LD_INT 0
67730: PPUSH
67731: CALL 69368 0 3
// end ;
67735: GO 67689
67737: POP
67738: POP
// end ;
67739: LD_VAR 0 10
67743: RET
// export function WantHeal ( sci , unit ) ; begin
67744: LD_INT 0
67746: PPUSH
// if GetTaskList ( sci ) > 0 then
67747: LD_VAR 0 1
67751: PPUSH
67752: CALL_OW 437
67756: PUSH
67757: LD_INT 0
67759: GREATER
67760: IFFALSE 67830
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67762: LD_VAR 0 1
67766: PPUSH
67767: CALL_OW 437
67771: PUSH
67772: LD_INT 1
67774: ARRAY
67775: PUSH
67776: LD_INT 1
67778: ARRAY
67779: PUSH
67780: LD_STRING l
67782: EQUAL
67783: PUSH
67784: LD_VAR 0 1
67788: PPUSH
67789: CALL_OW 437
67793: PUSH
67794: LD_INT 1
67796: ARRAY
67797: PUSH
67798: LD_INT 4
67800: ARRAY
67801: PUSH
67802: LD_VAR 0 2
67806: EQUAL
67807: AND
67808: IFFALSE 67820
// result := true else
67810: LD_ADDR_VAR 0 3
67814: PUSH
67815: LD_INT 1
67817: ST_TO_ADDR
67818: GO 67828
// result := false ;
67820: LD_ADDR_VAR 0 3
67824: PUSH
67825: LD_INT 0
67827: ST_TO_ADDR
// end else
67828: GO 67838
// result := false ;
67830: LD_ADDR_VAR 0 3
67834: PUSH
67835: LD_INT 0
67837: ST_TO_ADDR
// end ;
67838: LD_VAR 0 3
67842: RET
// export function HealTarget ( sci ) ; begin
67843: LD_INT 0
67845: PPUSH
// if not sci then
67846: LD_VAR 0 1
67850: NOT
67851: IFFALSE 67855
// exit ;
67853: GO 67920
// result := 0 ;
67855: LD_ADDR_VAR 0 2
67859: PUSH
67860: LD_INT 0
67862: ST_TO_ADDR
// if GetTaskList ( sci ) then
67863: LD_VAR 0 1
67867: PPUSH
67868: CALL_OW 437
67872: IFFALSE 67920
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67874: LD_VAR 0 1
67878: PPUSH
67879: CALL_OW 437
67883: PUSH
67884: LD_INT 1
67886: ARRAY
67887: PUSH
67888: LD_INT 1
67890: ARRAY
67891: PUSH
67892: LD_STRING l
67894: EQUAL
67895: IFFALSE 67920
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67897: LD_ADDR_VAR 0 2
67901: PUSH
67902: LD_VAR 0 1
67906: PPUSH
67907: CALL_OW 437
67911: PUSH
67912: LD_INT 1
67914: ARRAY
67915: PUSH
67916: LD_INT 4
67918: ARRAY
67919: ST_TO_ADDR
// end ;
67920: LD_VAR 0 2
67924: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67925: LD_INT 0
67927: PPUSH
67928: PPUSH
67929: PPUSH
67930: PPUSH
// if not base_units then
67931: LD_VAR 0 1
67935: NOT
67936: IFFALSE 67940
// exit ;
67938: GO 68027
// result := false ;
67940: LD_ADDR_VAR 0 2
67944: PUSH
67945: LD_INT 0
67947: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67948: LD_ADDR_VAR 0 5
67952: PUSH
67953: LD_VAR 0 1
67957: PPUSH
67958: LD_INT 21
67960: PUSH
67961: LD_INT 3
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PPUSH
67968: CALL_OW 72
67972: ST_TO_ADDR
// if not tmp then
67973: LD_VAR 0 5
67977: NOT
67978: IFFALSE 67982
// exit ;
67980: GO 68027
// for i in tmp do
67982: LD_ADDR_VAR 0 3
67986: PUSH
67987: LD_VAR 0 5
67991: PUSH
67992: FOR_IN
67993: IFFALSE 68025
// begin result := EnemyInRange ( i , 22 ) ;
67995: LD_ADDR_VAR 0 2
67999: PUSH
68000: LD_VAR 0 3
68004: PPUSH
68005: LD_INT 22
68007: PPUSH
68008: CALL 65605 0 2
68012: ST_TO_ADDR
// if result then
68013: LD_VAR 0 2
68017: IFFALSE 68023
// exit ;
68019: POP
68020: POP
68021: GO 68027
// end ;
68023: GO 67992
68025: POP
68026: POP
// end ;
68027: LD_VAR 0 2
68031: RET
// export function FilterByTag ( units , tag ) ; begin
68032: LD_INT 0
68034: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68035: LD_ADDR_VAR 0 3
68039: PUSH
68040: LD_VAR 0 1
68044: PPUSH
68045: LD_INT 120
68047: PUSH
68048: LD_VAR 0 2
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PPUSH
68057: CALL_OW 72
68061: ST_TO_ADDR
// end ;
68062: LD_VAR 0 3
68066: RET
// export function IsDriver ( un ) ; begin
68067: LD_INT 0
68069: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68070: LD_ADDR_VAR 0 2
68074: PUSH
68075: LD_VAR 0 1
68079: PUSH
68080: LD_INT 55
68082: PUSH
68083: EMPTY
68084: LIST
68085: PPUSH
68086: CALL_OW 69
68090: IN
68091: ST_TO_ADDR
// end ;
68092: LD_VAR 0 2
68096: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68097: LD_INT 0
68099: PPUSH
68100: PPUSH
// list := [ ] ;
68101: LD_ADDR_VAR 0 5
68105: PUSH
68106: EMPTY
68107: ST_TO_ADDR
// case d of 0 :
68108: LD_VAR 0 3
68112: PUSH
68113: LD_INT 0
68115: DOUBLE
68116: EQUAL
68117: IFTRUE 68121
68119: GO 68254
68121: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68122: LD_ADDR_VAR 0 5
68126: PUSH
68127: LD_VAR 0 1
68131: PUSH
68132: LD_INT 4
68134: MINUS
68135: PUSH
68136: LD_VAR 0 2
68140: PUSH
68141: LD_INT 4
68143: MINUS
68144: PUSH
68145: LD_INT 2
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: LIST
68152: PUSH
68153: LD_VAR 0 1
68157: PUSH
68158: LD_INT 3
68160: MINUS
68161: PUSH
68162: LD_VAR 0 2
68166: PUSH
68167: LD_INT 1
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: LIST
68174: PUSH
68175: LD_VAR 0 1
68179: PUSH
68180: LD_INT 4
68182: PLUS
68183: PUSH
68184: LD_VAR 0 2
68188: PUSH
68189: LD_INT 4
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: LIST
68196: PUSH
68197: LD_VAR 0 1
68201: PUSH
68202: LD_INT 3
68204: PLUS
68205: PUSH
68206: LD_VAR 0 2
68210: PUSH
68211: LD_INT 3
68213: PLUS
68214: PUSH
68215: LD_INT 5
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: LIST
68222: PUSH
68223: LD_VAR 0 1
68227: PUSH
68228: LD_VAR 0 2
68232: PUSH
68233: LD_INT 4
68235: PLUS
68236: PUSH
68237: LD_INT 0
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: LIST
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: ST_TO_ADDR
// end ; 1 :
68252: GO 68952
68254: LD_INT 1
68256: DOUBLE
68257: EQUAL
68258: IFTRUE 68262
68260: GO 68395
68262: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68263: LD_ADDR_VAR 0 5
68267: PUSH
68268: LD_VAR 0 1
68272: PUSH
68273: LD_VAR 0 2
68277: PUSH
68278: LD_INT 4
68280: MINUS
68281: PUSH
68282: LD_INT 3
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: LIST
68289: PUSH
68290: LD_VAR 0 1
68294: PUSH
68295: LD_INT 3
68297: MINUS
68298: PUSH
68299: LD_VAR 0 2
68303: PUSH
68304: LD_INT 3
68306: MINUS
68307: PUSH
68308: LD_INT 2
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: LIST
68315: PUSH
68316: LD_VAR 0 1
68320: PUSH
68321: LD_INT 4
68323: MINUS
68324: PUSH
68325: LD_VAR 0 2
68329: PUSH
68330: LD_INT 1
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: LIST
68337: PUSH
68338: LD_VAR 0 1
68342: PUSH
68343: LD_VAR 0 2
68347: PUSH
68348: LD_INT 3
68350: PLUS
68351: PUSH
68352: LD_INT 0
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: LIST
68359: PUSH
68360: LD_VAR 0 1
68364: PUSH
68365: LD_INT 4
68367: PLUS
68368: PUSH
68369: LD_VAR 0 2
68373: PUSH
68374: LD_INT 4
68376: PLUS
68377: PUSH
68378: LD_INT 5
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: LIST
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: ST_TO_ADDR
// end ; 2 :
68393: GO 68952
68395: LD_INT 2
68397: DOUBLE
68398: EQUAL
68399: IFTRUE 68403
68401: GO 68532
68403: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68404: LD_ADDR_VAR 0 5
68408: PUSH
68409: LD_VAR 0 1
68413: PUSH
68414: LD_VAR 0 2
68418: PUSH
68419: LD_INT 3
68421: MINUS
68422: PUSH
68423: LD_INT 3
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: LIST
68430: PUSH
68431: LD_VAR 0 1
68435: PUSH
68436: LD_INT 4
68438: PLUS
68439: PUSH
68440: LD_VAR 0 2
68444: PUSH
68445: LD_INT 4
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: LIST
68452: PUSH
68453: LD_VAR 0 1
68457: PUSH
68458: LD_VAR 0 2
68462: PUSH
68463: LD_INT 4
68465: PLUS
68466: PUSH
68467: LD_INT 0
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: LIST
68474: PUSH
68475: LD_VAR 0 1
68479: PUSH
68480: LD_INT 3
68482: MINUS
68483: PUSH
68484: LD_VAR 0 2
68488: PUSH
68489: LD_INT 1
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: LIST
68496: PUSH
68497: LD_VAR 0 1
68501: PUSH
68502: LD_INT 4
68504: MINUS
68505: PUSH
68506: LD_VAR 0 2
68510: PUSH
68511: LD_INT 4
68513: MINUS
68514: PUSH
68515: LD_INT 2
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: LIST
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: ST_TO_ADDR
// end ; 3 :
68530: GO 68952
68532: LD_INT 3
68534: DOUBLE
68535: EQUAL
68536: IFTRUE 68540
68538: GO 68673
68540: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68541: LD_ADDR_VAR 0 5
68545: PUSH
68546: LD_VAR 0 1
68550: PUSH
68551: LD_INT 3
68553: PLUS
68554: PUSH
68555: LD_VAR 0 2
68559: PUSH
68560: LD_INT 4
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: LIST
68567: PUSH
68568: LD_VAR 0 1
68572: PUSH
68573: LD_INT 4
68575: PLUS
68576: PUSH
68577: LD_VAR 0 2
68581: PUSH
68582: LD_INT 4
68584: PLUS
68585: PUSH
68586: LD_INT 5
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: LIST
68593: PUSH
68594: LD_VAR 0 1
68598: PUSH
68599: LD_INT 4
68601: MINUS
68602: PUSH
68603: LD_VAR 0 2
68607: PUSH
68608: LD_INT 1
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: LIST
68615: PUSH
68616: LD_VAR 0 1
68620: PUSH
68621: LD_VAR 0 2
68625: PUSH
68626: LD_INT 4
68628: MINUS
68629: PUSH
68630: LD_INT 3
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: LIST
68637: PUSH
68638: LD_VAR 0 1
68642: PUSH
68643: LD_INT 3
68645: MINUS
68646: PUSH
68647: LD_VAR 0 2
68651: PUSH
68652: LD_INT 3
68654: MINUS
68655: PUSH
68656: LD_INT 2
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: LIST
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: ST_TO_ADDR
// end ; 4 :
68671: GO 68952
68673: LD_INT 4
68675: DOUBLE
68676: EQUAL
68677: IFTRUE 68681
68679: GO 68814
68681: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68682: LD_ADDR_VAR 0 5
68686: PUSH
68687: LD_VAR 0 1
68691: PUSH
68692: LD_VAR 0 2
68696: PUSH
68697: LD_INT 4
68699: PLUS
68700: PUSH
68701: LD_INT 0
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: LIST
68708: PUSH
68709: LD_VAR 0 1
68713: PUSH
68714: LD_INT 3
68716: PLUS
68717: PUSH
68718: LD_VAR 0 2
68722: PUSH
68723: LD_INT 3
68725: PLUS
68726: PUSH
68727: LD_INT 5
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: LIST
68734: PUSH
68735: LD_VAR 0 1
68739: PUSH
68740: LD_INT 4
68742: PLUS
68743: PUSH
68744: LD_VAR 0 2
68748: PUSH
68749: LD_INT 4
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: LIST
68756: PUSH
68757: LD_VAR 0 1
68761: PUSH
68762: LD_VAR 0 2
68766: PUSH
68767: LD_INT 3
68769: MINUS
68770: PUSH
68771: LD_INT 3
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: LIST
68778: PUSH
68779: LD_VAR 0 1
68783: PUSH
68784: LD_INT 4
68786: MINUS
68787: PUSH
68788: LD_VAR 0 2
68792: PUSH
68793: LD_INT 4
68795: MINUS
68796: PUSH
68797: LD_INT 2
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: LIST
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: ST_TO_ADDR
// end ; 5 :
68812: GO 68952
68814: LD_INT 5
68816: DOUBLE
68817: EQUAL
68818: IFTRUE 68822
68820: GO 68951
68822: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68823: LD_ADDR_VAR 0 5
68827: PUSH
68828: LD_VAR 0 1
68832: PUSH
68833: LD_INT 4
68835: MINUS
68836: PUSH
68837: LD_VAR 0 2
68841: PUSH
68842: LD_INT 1
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: LIST
68849: PUSH
68850: LD_VAR 0 1
68854: PUSH
68855: LD_VAR 0 2
68859: PUSH
68860: LD_INT 4
68862: MINUS
68863: PUSH
68864: LD_INT 3
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: LIST
68871: PUSH
68872: LD_VAR 0 1
68876: PUSH
68877: LD_INT 4
68879: PLUS
68880: PUSH
68881: LD_VAR 0 2
68885: PUSH
68886: LD_INT 4
68888: PLUS
68889: PUSH
68890: LD_INT 5
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: LIST
68897: PUSH
68898: LD_VAR 0 1
68902: PUSH
68903: LD_INT 3
68905: PLUS
68906: PUSH
68907: LD_VAR 0 2
68911: PUSH
68912: LD_INT 4
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: LIST
68919: PUSH
68920: LD_VAR 0 1
68924: PUSH
68925: LD_VAR 0 2
68929: PUSH
68930: LD_INT 3
68932: PLUS
68933: PUSH
68934: LD_INT 0
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: LIST
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: ST_TO_ADDR
// end ; end ;
68949: GO 68952
68951: POP
// result := list ;
68952: LD_ADDR_VAR 0 4
68956: PUSH
68957: LD_VAR 0 5
68961: ST_TO_ADDR
// end ;
68962: LD_VAR 0 4
68966: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68967: LD_INT 0
68969: PPUSH
68970: PPUSH
68971: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68972: LD_VAR 0 1
68976: NOT
68977: PUSH
68978: LD_VAR 0 2
68982: PUSH
68983: LD_INT 1
68985: PUSH
68986: LD_INT 2
68988: PUSH
68989: LD_INT 3
68991: PUSH
68992: LD_INT 4
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: IN
69001: NOT
69002: OR
69003: IFFALSE 69007
// exit ;
69005: GO 69090
// tmp := [ ] ;
69007: LD_ADDR_VAR 0 5
69011: PUSH
69012: EMPTY
69013: ST_TO_ADDR
// for i in units do
69014: LD_ADDR_VAR 0 4
69018: PUSH
69019: LD_VAR 0 1
69023: PUSH
69024: FOR_IN
69025: IFFALSE 69059
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69027: LD_ADDR_VAR 0 5
69031: PUSH
69032: LD_VAR 0 5
69036: PPUSH
69037: LD_VAR 0 4
69041: PPUSH
69042: LD_VAR 0 2
69046: PPUSH
69047: CALL_OW 259
69051: PPUSH
69052: CALL 70463 0 2
69056: ST_TO_ADDR
69057: GO 69024
69059: POP
69060: POP
// if not tmp then
69061: LD_VAR 0 5
69065: NOT
69066: IFFALSE 69070
// exit ;
69068: GO 69090
// result := SortListByListDesc ( units , tmp ) ;
69070: LD_ADDR_VAR 0 3
69074: PUSH
69075: LD_VAR 0 1
69079: PPUSH
69080: LD_VAR 0 5
69084: PPUSH
69085: CALL_OW 77
69089: ST_TO_ADDR
// end ;
69090: LD_VAR 0 3
69094: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69095: LD_INT 0
69097: PPUSH
69098: PPUSH
69099: PPUSH
// result := false ;
69100: LD_ADDR_VAR 0 3
69104: PUSH
69105: LD_INT 0
69107: ST_TO_ADDR
// if not building then
69108: LD_VAR 0 2
69112: NOT
69113: IFFALSE 69117
// exit ;
69115: GO 69255
// x := GetX ( building ) ;
69117: LD_ADDR_VAR 0 4
69121: PUSH
69122: LD_VAR 0 2
69126: PPUSH
69127: CALL_OW 250
69131: ST_TO_ADDR
// y := GetY ( building ) ;
69132: LD_ADDR_VAR 0 5
69136: PUSH
69137: LD_VAR 0 2
69141: PPUSH
69142: CALL_OW 251
69146: ST_TO_ADDR
// if not x or not y then
69147: LD_VAR 0 4
69151: NOT
69152: PUSH
69153: LD_VAR 0 5
69157: NOT
69158: OR
69159: IFFALSE 69163
// exit ;
69161: GO 69255
// if GetTaskList ( unit ) then
69163: LD_VAR 0 1
69167: PPUSH
69168: CALL_OW 437
69172: IFFALSE 69255
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69174: LD_STRING e
69176: PUSH
69177: LD_VAR 0 1
69181: PPUSH
69182: CALL_OW 437
69186: PUSH
69187: LD_INT 1
69189: ARRAY
69190: PUSH
69191: LD_INT 1
69193: ARRAY
69194: EQUAL
69195: PUSH
69196: LD_VAR 0 4
69200: PUSH
69201: LD_VAR 0 1
69205: PPUSH
69206: CALL_OW 437
69210: PUSH
69211: LD_INT 1
69213: ARRAY
69214: PUSH
69215: LD_INT 2
69217: ARRAY
69218: EQUAL
69219: AND
69220: PUSH
69221: LD_VAR 0 5
69225: PUSH
69226: LD_VAR 0 1
69230: PPUSH
69231: CALL_OW 437
69235: PUSH
69236: LD_INT 1
69238: ARRAY
69239: PUSH
69240: LD_INT 3
69242: ARRAY
69243: EQUAL
69244: AND
69245: IFFALSE 69255
// result := true end ;
69247: LD_ADDR_VAR 0 3
69251: PUSH
69252: LD_INT 1
69254: ST_TO_ADDR
// end ;
69255: LD_VAR 0 3
69259: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69260: LD_INT 0
69262: PPUSH
// result := false ;
69263: LD_ADDR_VAR 0 4
69267: PUSH
69268: LD_INT 0
69270: ST_TO_ADDR
// if GetTaskList ( unit ) then
69271: LD_VAR 0 1
69275: PPUSH
69276: CALL_OW 437
69280: IFFALSE 69363
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69282: LD_STRING M
69284: PUSH
69285: LD_VAR 0 1
69289: PPUSH
69290: CALL_OW 437
69294: PUSH
69295: LD_INT 1
69297: ARRAY
69298: PUSH
69299: LD_INT 1
69301: ARRAY
69302: EQUAL
69303: PUSH
69304: LD_VAR 0 2
69308: PUSH
69309: LD_VAR 0 1
69313: PPUSH
69314: CALL_OW 437
69318: PUSH
69319: LD_INT 1
69321: ARRAY
69322: PUSH
69323: LD_INT 2
69325: ARRAY
69326: EQUAL
69327: AND
69328: PUSH
69329: LD_VAR 0 3
69333: PUSH
69334: LD_VAR 0 1
69338: PPUSH
69339: CALL_OW 437
69343: PUSH
69344: LD_INT 1
69346: ARRAY
69347: PUSH
69348: LD_INT 3
69350: ARRAY
69351: EQUAL
69352: AND
69353: IFFALSE 69363
// result := true ;
69355: LD_ADDR_VAR 0 4
69359: PUSH
69360: LD_INT 1
69362: ST_TO_ADDR
// end ; end ;
69363: LD_VAR 0 4
69367: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69368: LD_INT 0
69370: PPUSH
69371: PPUSH
69372: PPUSH
69373: PPUSH
// if not unit or not area then
69374: LD_VAR 0 1
69378: NOT
69379: PUSH
69380: LD_VAR 0 2
69384: NOT
69385: OR
69386: IFFALSE 69390
// exit ;
69388: GO 69566
// tmp := AreaToList ( area , i ) ;
69390: LD_ADDR_VAR 0 6
69394: PUSH
69395: LD_VAR 0 2
69399: PPUSH
69400: LD_VAR 0 5
69404: PPUSH
69405: CALL_OW 517
69409: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69410: LD_ADDR_VAR 0 5
69414: PUSH
69415: DOUBLE
69416: LD_INT 1
69418: DEC
69419: ST_TO_ADDR
69420: LD_VAR 0 6
69424: PUSH
69425: LD_INT 1
69427: ARRAY
69428: PUSH
69429: FOR_TO
69430: IFFALSE 69564
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69432: LD_ADDR_VAR 0 7
69436: PUSH
69437: LD_VAR 0 6
69441: PUSH
69442: LD_INT 1
69444: ARRAY
69445: PUSH
69446: LD_VAR 0 5
69450: ARRAY
69451: PUSH
69452: LD_VAR 0 6
69456: PUSH
69457: LD_INT 2
69459: ARRAY
69460: PUSH
69461: LD_VAR 0 5
69465: ARRAY
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
69471: LD_INT 92
69473: PUSH
69474: LD_VAR 0 7
69478: PUSH
69479: LD_INT 1
69481: ARRAY
69482: PUSH
69483: LD_VAR 0 7
69487: PUSH
69488: LD_INT 2
69490: ARRAY
69491: PUSH
69492: LD_INT 2
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: PPUSH
69501: CALL_OW 69
69505: PUSH
69506: LD_INT 0
69508: EQUAL
69509: IFFALSE 69562
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69511: LD_VAR 0 1
69515: PPUSH
69516: LD_VAR 0 7
69520: PUSH
69521: LD_INT 1
69523: ARRAY
69524: PPUSH
69525: LD_VAR 0 7
69529: PUSH
69530: LD_INT 2
69532: ARRAY
69533: PPUSH
69534: LD_VAR 0 3
69538: PPUSH
69539: CALL_OW 48
// result := IsPlaced ( unit ) ;
69543: LD_ADDR_VAR 0 4
69547: PUSH
69548: LD_VAR 0 1
69552: PPUSH
69553: CALL_OW 305
69557: ST_TO_ADDR
// exit ;
69558: POP
69559: POP
69560: GO 69566
// end ; end ;
69562: GO 69429
69564: POP
69565: POP
// end ;
69566: LD_VAR 0 4
69570: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69571: LD_INT 0
69573: PPUSH
69574: PPUSH
69575: PPUSH
// if not side or side > 8 then
69576: LD_VAR 0 1
69580: NOT
69581: PUSH
69582: LD_VAR 0 1
69586: PUSH
69587: LD_INT 8
69589: GREATER
69590: OR
69591: IFFALSE 69595
// exit ;
69593: GO 69782
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69595: LD_ADDR_VAR 0 4
69599: PUSH
69600: LD_INT 22
69602: PUSH
69603: LD_VAR 0 1
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 21
69614: PUSH
69615: LD_INT 3
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PPUSH
69626: CALL_OW 69
69630: ST_TO_ADDR
// if not tmp then
69631: LD_VAR 0 4
69635: NOT
69636: IFFALSE 69640
// exit ;
69638: GO 69782
// enable_addtolog := true ;
69640: LD_ADDR_OWVAR 81
69644: PUSH
69645: LD_INT 1
69647: ST_TO_ADDR
// AddToLog ( [ ) ;
69648: LD_STRING [
69650: PPUSH
69651: CALL_OW 561
// for i in tmp do
69655: LD_ADDR_VAR 0 3
69659: PUSH
69660: LD_VAR 0 4
69664: PUSH
69665: FOR_IN
69666: IFFALSE 69773
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69668: LD_STRING [
69670: PUSH
69671: LD_VAR 0 3
69675: PPUSH
69676: CALL_OW 266
69680: STR
69681: PUSH
69682: LD_STRING , 
69684: STR
69685: PUSH
69686: LD_VAR 0 3
69690: PPUSH
69691: CALL_OW 250
69695: STR
69696: PUSH
69697: LD_STRING , 
69699: STR
69700: PUSH
69701: LD_VAR 0 3
69705: PPUSH
69706: CALL_OW 251
69710: STR
69711: PUSH
69712: LD_STRING , 
69714: STR
69715: PUSH
69716: LD_VAR 0 3
69720: PPUSH
69721: CALL_OW 254
69725: STR
69726: PUSH
69727: LD_STRING , 
69729: STR
69730: PUSH
69731: LD_VAR 0 3
69735: PPUSH
69736: LD_INT 1
69738: PPUSH
69739: CALL_OW 268
69743: STR
69744: PUSH
69745: LD_STRING , 
69747: STR
69748: PUSH
69749: LD_VAR 0 3
69753: PPUSH
69754: LD_INT 2
69756: PPUSH
69757: CALL_OW 268
69761: STR
69762: PUSH
69763: LD_STRING ],
69765: STR
69766: PPUSH
69767: CALL_OW 561
// end ;
69771: GO 69665
69773: POP
69774: POP
// AddToLog ( ]; ) ;
69775: LD_STRING ];
69777: PPUSH
69778: CALL_OW 561
// end ;
69782: LD_VAR 0 2
69786: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69787: LD_INT 0
69789: PPUSH
69790: PPUSH
69791: PPUSH
69792: PPUSH
69793: PPUSH
// if not area or not rate or not max then
69794: LD_VAR 0 1
69798: NOT
69799: PUSH
69800: LD_VAR 0 2
69804: NOT
69805: OR
69806: PUSH
69807: LD_VAR 0 4
69811: NOT
69812: OR
69813: IFFALSE 69817
// exit ;
69815: GO 70006
// while 1 do
69817: LD_INT 1
69819: IFFALSE 70006
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69821: LD_ADDR_VAR 0 9
69825: PUSH
69826: LD_VAR 0 1
69830: PPUSH
69831: LD_INT 1
69833: PPUSH
69834: CALL_OW 287
69838: PUSH
69839: LD_INT 10
69841: MUL
69842: ST_TO_ADDR
// r := rate / 10 ;
69843: LD_ADDR_VAR 0 7
69847: PUSH
69848: LD_VAR 0 2
69852: PUSH
69853: LD_INT 10
69855: DIVREAL
69856: ST_TO_ADDR
// time := 1 1$00 ;
69857: LD_ADDR_VAR 0 8
69861: PUSH
69862: LD_INT 2100
69864: ST_TO_ADDR
// if amount < min then
69865: LD_VAR 0 9
69869: PUSH
69870: LD_VAR 0 3
69874: LESS
69875: IFFALSE 69893
// r := r * 2 else
69877: LD_ADDR_VAR 0 7
69881: PUSH
69882: LD_VAR 0 7
69886: PUSH
69887: LD_INT 2
69889: MUL
69890: ST_TO_ADDR
69891: GO 69919
// if amount > max then
69893: LD_VAR 0 9
69897: PUSH
69898: LD_VAR 0 4
69902: GREATER
69903: IFFALSE 69919
// r := r / 2 ;
69905: LD_ADDR_VAR 0 7
69909: PUSH
69910: LD_VAR 0 7
69914: PUSH
69915: LD_INT 2
69917: DIVREAL
69918: ST_TO_ADDR
// time := time / r ;
69919: LD_ADDR_VAR 0 8
69923: PUSH
69924: LD_VAR 0 8
69928: PUSH
69929: LD_VAR 0 7
69933: DIVREAL
69934: ST_TO_ADDR
// if time < 0 then
69935: LD_VAR 0 8
69939: PUSH
69940: LD_INT 0
69942: LESS
69943: IFFALSE 69960
// time := time * - 1 ;
69945: LD_ADDR_VAR 0 8
69949: PUSH
69950: LD_VAR 0 8
69954: PUSH
69955: LD_INT 1
69957: NEG
69958: MUL
69959: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69960: LD_VAR 0 8
69964: PUSH
69965: LD_INT 35
69967: PPUSH
69968: LD_INT 875
69970: PPUSH
69971: CALL_OW 12
69975: PLUS
69976: PPUSH
69977: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69981: LD_INT 1
69983: PPUSH
69984: LD_INT 5
69986: PPUSH
69987: CALL_OW 12
69991: PPUSH
69992: LD_VAR 0 1
69996: PPUSH
69997: LD_INT 1
69999: PPUSH
70000: CALL_OW 55
// end ;
70004: GO 69817
// end ;
70006: LD_VAR 0 5
70010: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70011: LD_INT 0
70013: PPUSH
70014: PPUSH
70015: PPUSH
70016: PPUSH
70017: PPUSH
70018: PPUSH
70019: PPUSH
70020: PPUSH
// if not turrets or not factories then
70021: LD_VAR 0 1
70025: NOT
70026: PUSH
70027: LD_VAR 0 2
70031: NOT
70032: OR
70033: IFFALSE 70037
// exit ;
70035: GO 70344
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70037: LD_ADDR_VAR 0 10
70041: PUSH
70042: LD_INT 5
70044: PUSH
70045: LD_INT 6
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 2
70054: PUSH
70055: LD_INT 4
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 3
70064: PUSH
70065: LD_INT 5
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 24
70079: PUSH
70080: LD_INT 25
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 23
70089: PUSH
70090: LD_INT 27
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 42
70103: PUSH
70104: LD_INT 43
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 44
70113: PUSH
70114: LD_INT 46
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 45
70123: PUSH
70124: LD_INT 47
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: LIST
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: LIST
70140: ST_TO_ADDR
// result := [ ] ;
70141: LD_ADDR_VAR 0 3
70145: PUSH
70146: EMPTY
70147: ST_TO_ADDR
// for i in turrets do
70148: LD_ADDR_VAR 0 4
70152: PUSH
70153: LD_VAR 0 1
70157: PUSH
70158: FOR_IN
70159: IFFALSE 70342
// begin nat := GetNation ( i ) ;
70161: LD_ADDR_VAR 0 7
70165: PUSH
70166: LD_VAR 0 4
70170: PPUSH
70171: CALL_OW 248
70175: ST_TO_ADDR
// weapon := 0 ;
70176: LD_ADDR_VAR 0 8
70180: PUSH
70181: LD_INT 0
70183: ST_TO_ADDR
// if not nat then
70184: LD_VAR 0 7
70188: NOT
70189: IFFALSE 70193
// continue ;
70191: GO 70158
// for j in list [ nat ] do
70193: LD_ADDR_VAR 0 5
70197: PUSH
70198: LD_VAR 0 10
70202: PUSH
70203: LD_VAR 0 7
70207: ARRAY
70208: PUSH
70209: FOR_IN
70210: IFFALSE 70251
// if GetBWeapon ( i ) = j [ 1 ] then
70212: LD_VAR 0 4
70216: PPUSH
70217: CALL_OW 269
70221: PUSH
70222: LD_VAR 0 5
70226: PUSH
70227: LD_INT 1
70229: ARRAY
70230: EQUAL
70231: IFFALSE 70249
// begin weapon := j [ 2 ] ;
70233: LD_ADDR_VAR 0 8
70237: PUSH
70238: LD_VAR 0 5
70242: PUSH
70243: LD_INT 2
70245: ARRAY
70246: ST_TO_ADDR
// break ;
70247: GO 70251
// end ;
70249: GO 70209
70251: POP
70252: POP
// if not weapon then
70253: LD_VAR 0 8
70257: NOT
70258: IFFALSE 70262
// continue ;
70260: GO 70158
// for k in factories do
70262: LD_ADDR_VAR 0 6
70266: PUSH
70267: LD_VAR 0 2
70271: PUSH
70272: FOR_IN
70273: IFFALSE 70338
// begin weapons := AvailableWeaponList ( k ) ;
70275: LD_ADDR_VAR 0 9
70279: PUSH
70280: LD_VAR 0 6
70284: PPUSH
70285: CALL_OW 478
70289: ST_TO_ADDR
// if not weapons then
70290: LD_VAR 0 9
70294: NOT
70295: IFFALSE 70299
// continue ;
70297: GO 70272
// if weapon in weapons then
70299: LD_VAR 0 8
70303: PUSH
70304: LD_VAR 0 9
70308: IN
70309: IFFALSE 70336
// begin result := [ i , weapon ] ;
70311: LD_ADDR_VAR 0 3
70315: PUSH
70316: LD_VAR 0 4
70320: PUSH
70321: LD_VAR 0 8
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: ST_TO_ADDR
// exit ;
70330: POP
70331: POP
70332: POP
70333: POP
70334: GO 70344
// end ; end ;
70336: GO 70272
70338: POP
70339: POP
// end ;
70340: GO 70158
70342: POP
70343: POP
// end ;
70344: LD_VAR 0 3
70348: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70349: LD_INT 0
70351: PPUSH
// if not side or side > 8 then
70352: LD_VAR 0 3
70356: NOT
70357: PUSH
70358: LD_VAR 0 3
70362: PUSH
70363: LD_INT 8
70365: GREATER
70366: OR
70367: IFFALSE 70371
// exit ;
70369: GO 70430
// if not range then
70371: LD_VAR 0 4
70375: NOT
70376: IFFALSE 70387
// range := - 12 ;
70378: LD_ADDR_VAR 0 4
70382: PUSH
70383: LD_INT 12
70385: NEG
70386: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70387: LD_VAR 0 1
70391: PPUSH
70392: LD_VAR 0 2
70396: PPUSH
70397: LD_VAR 0 3
70401: PPUSH
70402: LD_VAR 0 4
70406: PPUSH
70407: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70411: LD_VAR 0 1
70415: PPUSH
70416: LD_VAR 0 2
70420: PPUSH
70421: LD_VAR 0 3
70425: PPUSH
70426: CALL_OW 331
// end ;
70430: LD_VAR 0 5
70434: RET
// export function Video ( mode ) ; begin
70435: LD_INT 0
70437: PPUSH
// ingame_video = mode ;
70438: LD_ADDR_OWVAR 52
70442: PUSH
70443: LD_VAR 0 1
70447: ST_TO_ADDR
// interface_hidden = mode ;
70448: LD_ADDR_OWVAR 54
70452: PUSH
70453: LD_VAR 0 1
70457: ST_TO_ADDR
// end ;
70458: LD_VAR 0 2
70462: RET
// export function Join ( array , element ) ; begin
70463: LD_INT 0
70465: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70466: LD_ADDR_VAR 0 3
70470: PUSH
70471: LD_VAR 0 1
70475: PPUSH
70476: LD_VAR 0 1
70480: PUSH
70481: LD_INT 1
70483: PLUS
70484: PPUSH
70485: LD_VAR 0 2
70489: PPUSH
70490: CALL_OW 1
70494: ST_TO_ADDR
// end ;
70495: LD_VAR 0 3
70499: RET
// export function JoinUnion ( array , element ) ; begin
70500: LD_INT 0
70502: PPUSH
// result := array union element ;
70503: LD_ADDR_VAR 0 3
70507: PUSH
70508: LD_VAR 0 1
70512: PUSH
70513: LD_VAR 0 2
70517: UNION
70518: ST_TO_ADDR
// end ;
70519: LD_VAR 0 3
70523: RET
// export function GetBehemoths ( side ) ; begin
70524: LD_INT 0
70526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70527: LD_ADDR_VAR 0 2
70531: PUSH
70532: LD_INT 22
70534: PUSH
70535: LD_VAR 0 1
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 31
70546: PUSH
70547: LD_INT 25
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PPUSH
70558: CALL_OW 69
70562: ST_TO_ADDR
// end ;
70563: LD_VAR 0 2
70567: RET
// export function Shuffle ( array ) ; var i , index ; begin
70568: LD_INT 0
70570: PPUSH
70571: PPUSH
70572: PPUSH
// result := [ ] ;
70573: LD_ADDR_VAR 0 2
70577: PUSH
70578: EMPTY
70579: ST_TO_ADDR
// if not array then
70580: LD_VAR 0 1
70584: NOT
70585: IFFALSE 70589
// exit ;
70587: GO 70688
// Randomize ;
70589: CALL_OW 10
// for i = array downto 1 do
70593: LD_ADDR_VAR 0 3
70597: PUSH
70598: DOUBLE
70599: LD_VAR 0 1
70603: INC
70604: ST_TO_ADDR
70605: LD_INT 1
70607: PUSH
70608: FOR_DOWNTO
70609: IFFALSE 70686
// begin index := rand ( 1 , array ) ;
70611: LD_ADDR_VAR 0 4
70615: PUSH
70616: LD_INT 1
70618: PPUSH
70619: LD_VAR 0 1
70623: PPUSH
70624: CALL_OW 12
70628: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70629: LD_ADDR_VAR 0 2
70633: PUSH
70634: LD_VAR 0 2
70638: PPUSH
70639: LD_VAR 0 2
70643: PUSH
70644: LD_INT 1
70646: PLUS
70647: PPUSH
70648: LD_VAR 0 1
70652: PUSH
70653: LD_VAR 0 4
70657: ARRAY
70658: PPUSH
70659: CALL_OW 2
70663: ST_TO_ADDR
// array := Delete ( array , index ) ;
70664: LD_ADDR_VAR 0 1
70668: PUSH
70669: LD_VAR 0 1
70673: PPUSH
70674: LD_VAR 0 4
70678: PPUSH
70679: CALL_OW 3
70683: ST_TO_ADDR
// end ;
70684: GO 70608
70686: POP
70687: POP
// end ;
70688: LD_VAR 0 2
70692: RET
// export function GetBaseMaterials ( base ) ; begin
70693: LD_INT 0
70695: PPUSH
// result := [ 0 , 0 , 0 ] ;
70696: LD_ADDR_VAR 0 2
70700: PUSH
70701: LD_INT 0
70703: PUSH
70704: LD_INT 0
70706: PUSH
70707: LD_INT 0
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: LIST
70714: ST_TO_ADDR
// if not base then
70715: LD_VAR 0 1
70719: NOT
70720: IFFALSE 70724
// exit ;
70722: GO 70773
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70724: LD_ADDR_VAR 0 2
70728: PUSH
70729: LD_VAR 0 1
70733: PPUSH
70734: LD_INT 1
70736: PPUSH
70737: CALL_OW 275
70741: PUSH
70742: LD_VAR 0 1
70746: PPUSH
70747: LD_INT 2
70749: PPUSH
70750: CALL_OW 275
70754: PUSH
70755: LD_VAR 0 1
70759: PPUSH
70760: LD_INT 3
70762: PPUSH
70763: CALL_OW 275
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: LIST
70772: ST_TO_ADDR
// end ;
70773: LD_VAR 0 2
70777: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70778: LD_INT 0
70780: PPUSH
70781: PPUSH
// result := array ;
70782: LD_ADDR_VAR 0 3
70786: PUSH
70787: LD_VAR 0 1
70791: ST_TO_ADDR
// if size >= result then
70792: LD_VAR 0 2
70796: PUSH
70797: LD_VAR 0 3
70801: GREATEREQUAL
70802: IFFALSE 70806
// exit ;
70804: GO 70856
// if size then
70806: LD_VAR 0 2
70810: IFFALSE 70856
// for i := array downto size do
70812: LD_ADDR_VAR 0 4
70816: PUSH
70817: DOUBLE
70818: LD_VAR 0 1
70822: INC
70823: ST_TO_ADDR
70824: LD_VAR 0 2
70828: PUSH
70829: FOR_DOWNTO
70830: IFFALSE 70854
// result := Delete ( result , result ) ;
70832: LD_ADDR_VAR 0 3
70836: PUSH
70837: LD_VAR 0 3
70841: PPUSH
70842: LD_VAR 0 3
70846: PPUSH
70847: CALL_OW 3
70851: ST_TO_ADDR
70852: GO 70829
70854: POP
70855: POP
// end ;
70856: LD_VAR 0 3
70860: RET
// export function ComExit ( unit ) ; var tmp ; begin
70861: LD_INT 0
70863: PPUSH
70864: PPUSH
// if not IsInUnit ( unit ) then
70865: LD_VAR 0 1
70869: PPUSH
70870: CALL_OW 310
70874: NOT
70875: IFFALSE 70879
// exit ;
70877: GO 70939
// tmp := IsInUnit ( unit ) ;
70879: LD_ADDR_VAR 0 3
70883: PUSH
70884: LD_VAR 0 1
70888: PPUSH
70889: CALL_OW 310
70893: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70894: LD_VAR 0 3
70898: PPUSH
70899: CALL_OW 247
70903: PUSH
70904: LD_INT 2
70906: EQUAL
70907: IFFALSE 70920
// ComExitVehicle ( unit ) else
70909: LD_VAR 0 1
70913: PPUSH
70914: CALL_OW 121
70918: GO 70929
// ComExitBuilding ( unit ) ;
70920: LD_VAR 0 1
70924: PPUSH
70925: CALL_OW 122
// result := tmp ;
70929: LD_ADDR_VAR 0 2
70933: PUSH
70934: LD_VAR 0 3
70938: ST_TO_ADDR
// end ;
70939: LD_VAR 0 2
70943: RET
// export function ComExitAll ( units ) ; var i ; begin
70944: LD_INT 0
70946: PPUSH
70947: PPUSH
// if not units then
70948: LD_VAR 0 1
70952: NOT
70953: IFFALSE 70957
// exit ;
70955: GO 70983
// for i in units do
70957: LD_ADDR_VAR 0 3
70961: PUSH
70962: LD_VAR 0 1
70966: PUSH
70967: FOR_IN
70968: IFFALSE 70981
// ComExit ( i ) ;
70970: LD_VAR 0 3
70974: PPUSH
70975: CALL 70861 0 1
70979: GO 70967
70981: POP
70982: POP
// end ;
70983: LD_VAR 0 2
70987: RET
// export function ResetHc ; begin
70988: LD_INT 0
70990: PPUSH
// InitHc ;
70991: CALL_OW 19
// hc_importance := 0 ;
70995: LD_ADDR_OWVAR 32
70999: PUSH
71000: LD_INT 0
71002: ST_TO_ADDR
// end ;
71003: LD_VAR 0 1
71007: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71008: LD_INT 0
71010: PPUSH
71011: PPUSH
71012: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71013: LD_ADDR_VAR 0 6
71017: PUSH
71018: LD_VAR 0 1
71022: PUSH
71023: LD_VAR 0 3
71027: PLUS
71028: PUSH
71029: LD_INT 2
71031: DIV
71032: ST_TO_ADDR
// if _x < 0 then
71033: LD_VAR 0 6
71037: PUSH
71038: LD_INT 0
71040: LESS
71041: IFFALSE 71058
// _x := _x * - 1 ;
71043: LD_ADDR_VAR 0 6
71047: PUSH
71048: LD_VAR 0 6
71052: PUSH
71053: LD_INT 1
71055: NEG
71056: MUL
71057: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71058: LD_ADDR_VAR 0 7
71062: PUSH
71063: LD_VAR 0 2
71067: PUSH
71068: LD_VAR 0 4
71072: PLUS
71073: PUSH
71074: LD_INT 2
71076: DIV
71077: ST_TO_ADDR
// if _y < 0 then
71078: LD_VAR 0 7
71082: PUSH
71083: LD_INT 0
71085: LESS
71086: IFFALSE 71103
// _y := _y * - 1 ;
71088: LD_ADDR_VAR 0 7
71092: PUSH
71093: LD_VAR 0 7
71097: PUSH
71098: LD_INT 1
71100: NEG
71101: MUL
71102: ST_TO_ADDR
// result := [ _x , _y ] ;
71103: LD_ADDR_VAR 0 5
71107: PUSH
71108: LD_VAR 0 6
71112: PUSH
71113: LD_VAR 0 7
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: ST_TO_ADDR
// end ;
71122: LD_VAR 0 5
71126: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71127: LD_INT 0
71129: PPUSH
71130: PPUSH
71131: PPUSH
71132: PPUSH
// task := GetTaskList ( unit ) ;
71133: LD_ADDR_VAR 0 7
71137: PUSH
71138: LD_VAR 0 1
71142: PPUSH
71143: CALL_OW 437
71147: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71148: LD_VAR 0 7
71152: NOT
71153: PUSH
71154: LD_VAR 0 1
71158: PPUSH
71159: LD_VAR 0 2
71163: PPUSH
71164: CALL_OW 308
71168: NOT
71169: AND
71170: IFFALSE 71174
// exit ;
71172: GO 71292
// if IsInArea ( unit , area ) then
71174: LD_VAR 0 1
71178: PPUSH
71179: LD_VAR 0 2
71183: PPUSH
71184: CALL_OW 308
71188: IFFALSE 71206
// begin ComMoveToArea ( unit , goAway ) ;
71190: LD_VAR 0 1
71194: PPUSH
71195: LD_VAR 0 3
71199: PPUSH
71200: CALL_OW 113
// exit ;
71204: GO 71292
// end ; if task [ 1 ] [ 1 ] <> M then
71206: LD_VAR 0 7
71210: PUSH
71211: LD_INT 1
71213: ARRAY
71214: PUSH
71215: LD_INT 1
71217: ARRAY
71218: PUSH
71219: LD_STRING M
71221: NONEQUAL
71222: IFFALSE 71226
// exit ;
71224: GO 71292
// x := task [ 1 ] [ 2 ] ;
71226: LD_ADDR_VAR 0 5
71230: PUSH
71231: LD_VAR 0 7
71235: PUSH
71236: LD_INT 1
71238: ARRAY
71239: PUSH
71240: LD_INT 2
71242: ARRAY
71243: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71244: LD_ADDR_VAR 0 6
71248: PUSH
71249: LD_VAR 0 7
71253: PUSH
71254: LD_INT 1
71256: ARRAY
71257: PUSH
71258: LD_INT 3
71260: ARRAY
71261: ST_TO_ADDR
// if InArea ( x , y , area ) then
71262: LD_VAR 0 5
71266: PPUSH
71267: LD_VAR 0 6
71271: PPUSH
71272: LD_VAR 0 2
71276: PPUSH
71277: CALL_OW 309
71281: IFFALSE 71292
// ComStop ( unit ) ;
71283: LD_VAR 0 1
71287: PPUSH
71288: CALL_OW 141
// end ;
71292: LD_VAR 0 4
71296: RET
// export function Abs ( value ) ; begin
71297: LD_INT 0
71299: PPUSH
// result := value ;
71300: LD_ADDR_VAR 0 2
71304: PUSH
71305: LD_VAR 0 1
71309: ST_TO_ADDR
// if value < 0 then
71310: LD_VAR 0 1
71314: PUSH
71315: LD_INT 0
71317: LESS
71318: IFFALSE 71335
// result := value * - 1 ;
71320: LD_ADDR_VAR 0 2
71324: PUSH
71325: LD_VAR 0 1
71329: PUSH
71330: LD_INT 1
71332: NEG
71333: MUL
71334: ST_TO_ADDR
// end ;
71335: LD_VAR 0 2
71339: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71340: LD_INT 0
71342: PPUSH
71343: PPUSH
71344: PPUSH
71345: PPUSH
71346: PPUSH
71347: PPUSH
71348: PPUSH
71349: PPUSH
// if not unit or not building then
71350: LD_VAR 0 1
71354: NOT
71355: PUSH
71356: LD_VAR 0 2
71360: NOT
71361: OR
71362: IFFALSE 71366
// exit ;
71364: GO 71592
// x := GetX ( building ) ;
71366: LD_ADDR_VAR 0 4
71370: PUSH
71371: LD_VAR 0 2
71375: PPUSH
71376: CALL_OW 250
71380: ST_TO_ADDR
// y := GetY ( building ) ;
71381: LD_ADDR_VAR 0 6
71385: PUSH
71386: LD_VAR 0 2
71390: PPUSH
71391: CALL_OW 251
71395: ST_TO_ADDR
// d := GetDir ( building ) ;
71396: LD_ADDR_VAR 0 8
71400: PUSH
71401: LD_VAR 0 2
71405: PPUSH
71406: CALL_OW 254
71410: ST_TO_ADDR
// r := 4 ;
71411: LD_ADDR_VAR 0 9
71415: PUSH
71416: LD_INT 4
71418: ST_TO_ADDR
// for i := 1 to 5 do
71419: LD_ADDR_VAR 0 10
71423: PUSH
71424: DOUBLE
71425: LD_INT 1
71427: DEC
71428: ST_TO_ADDR
71429: LD_INT 5
71431: PUSH
71432: FOR_TO
71433: IFFALSE 71590
// begin _x := ShiftX ( x , d , r + i ) ;
71435: LD_ADDR_VAR 0 5
71439: PUSH
71440: LD_VAR 0 4
71444: PPUSH
71445: LD_VAR 0 8
71449: PPUSH
71450: LD_VAR 0 9
71454: PUSH
71455: LD_VAR 0 10
71459: PLUS
71460: PPUSH
71461: CALL_OW 272
71465: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71466: LD_ADDR_VAR 0 7
71470: PUSH
71471: LD_VAR 0 6
71475: PPUSH
71476: LD_VAR 0 8
71480: PPUSH
71481: LD_VAR 0 9
71485: PUSH
71486: LD_VAR 0 10
71490: PLUS
71491: PPUSH
71492: CALL_OW 273
71496: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71497: LD_VAR 0 5
71501: PPUSH
71502: LD_VAR 0 7
71506: PPUSH
71507: CALL_OW 488
71511: PUSH
71512: LD_VAR 0 5
71516: PPUSH
71517: LD_VAR 0 7
71521: PPUSH
71522: CALL_OW 428
71526: PPUSH
71527: CALL_OW 247
71531: PUSH
71532: LD_INT 3
71534: PUSH
71535: LD_INT 2
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: IN
71542: NOT
71543: AND
71544: IFFALSE 71588
// begin ComMoveXY ( unit , _x , _y ) ;
71546: LD_VAR 0 1
71550: PPUSH
71551: LD_VAR 0 5
71555: PPUSH
71556: LD_VAR 0 7
71560: PPUSH
71561: CALL_OW 111
// result := [ _x , _y ] ;
71565: LD_ADDR_VAR 0 3
71569: PUSH
71570: LD_VAR 0 5
71574: PUSH
71575: LD_VAR 0 7
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: ST_TO_ADDR
// exit ;
71584: POP
71585: POP
71586: GO 71592
// end ; end ;
71588: GO 71432
71590: POP
71591: POP
// end ;
71592: LD_VAR 0 3
71596: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71597: LD_INT 0
71599: PPUSH
71600: PPUSH
71601: PPUSH
// result := 0 ;
71602: LD_ADDR_VAR 0 3
71606: PUSH
71607: LD_INT 0
71609: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71610: LD_VAR 0 1
71614: PUSH
71615: LD_INT 0
71617: LESS
71618: PUSH
71619: LD_VAR 0 1
71623: PUSH
71624: LD_INT 8
71626: GREATER
71627: OR
71628: PUSH
71629: LD_VAR 0 2
71633: PUSH
71634: LD_INT 0
71636: LESS
71637: OR
71638: PUSH
71639: LD_VAR 0 2
71643: PUSH
71644: LD_INT 8
71646: GREATER
71647: OR
71648: IFFALSE 71652
// exit ;
71650: GO 71727
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71652: LD_ADDR_VAR 0 4
71656: PUSH
71657: LD_INT 22
71659: PUSH
71660: LD_VAR 0 2
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PPUSH
71669: CALL_OW 69
71673: PUSH
71674: FOR_IN
71675: IFFALSE 71725
// begin un := UnitShoot ( i ) ;
71677: LD_ADDR_VAR 0 5
71681: PUSH
71682: LD_VAR 0 4
71686: PPUSH
71687: CALL_OW 504
71691: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71692: LD_VAR 0 5
71696: PPUSH
71697: CALL_OW 255
71701: PUSH
71702: LD_VAR 0 1
71706: EQUAL
71707: IFFALSE 71723
// begin result := un ;
71709: LD_ADDR_VAR 0 3
71713: PUSH
71714: LD_VAR 0 5
71718: ST_TO_ADDR
// exit ;
71719: POP
71720: POP
71721: GO 71727
// end ; end ;
71723: GO 71674
71725: POP
71726: POP
// end ;
71727: LD_VAR 0 3
71731: RET
// export function GetCargoBay ( units ) ; begin
71732: LD_INT 0
71734: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71735: LD_ADDR_VAR 0 2
71739: PUSH
71740: LD_VAR 0 1
71744: PPUSH
71745: LD_INT 2
71747: PUSH
71748: LD_INT 34
71750: PUSH
71751: LD_INT 12
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 34
71760: PUSH
71761: LD_INT 51
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 34
71770: PUSH
71771: LD_INT 32
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 34
71780: PUSH
71781: LD_INT 89
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: LIST
71792: LIST
71793: LIST
71794: PPUSH
71795: CALL_OW 72
71799: ST_TO_ADDR
// end ;
71800: LD_VAR 0 2
71804: RET
// export function Negate ( value ) ; begin
71805: LD_INT 0
71807: PPUSH
// result := not value ;
71808: LD_ADDR_VAR 0 2
71812: PUSH
71813: LD_VAR 0 1
71817: NOT
71818: ST_TO_ADDR
// end ;
71819: LD_VAR 0 2
71823: RET
// export function Inc ( value ) ; begin
71824: LD_INT 0
71826: PPUSH
// result := value + 1 ;
71827: LD_ADDR_VAR 0 2
71831: PUSH
71832: LD_VAR 0 1
71836: PUSH
71837: LD_INT 1
71839: PLUS
71840: ST_TO_ADDR
// end ;
71841: LD_VAR 0 2
71845: RET
// export function Dec ( value ) ; begin
71846: LD_INT 0
71848: PPUSH
// result := value - 1 ;
71849: LD_ADDR_VAR 0 2
71853: PUSH
71854: LD_VAR 0 1
71858: PUSH
71859: LD_INT 1
71861: MINUS
71862: ST_TO_ADDR
// end ;
71863: LD_VAR 0 2
71867: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71868: LD_INT 0
71870: PPUSH
71871: PPUSH
71872: PPUSH
71873: PPUSH
71874: PPUSH
71875: PPUSH
71876: PPUSH
71877: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71878: LD_VAR 0 1
71882: PPUSH
71883: LD_VAR 0 2
71887: PPUSH
71888: CALL_OW 488
71892: NOT
71893: PUSH
71894: LD_VAR 0 3
71898: PPUSH
71899: LD_VAR 0 4
71903: PPUSH
71904: CALL_OW 488
71908: NOT
71909: OR
71910: IFFALSE 71923
// begin result := - 1 ;
71912: LD_ADDR_VAR 0 5
71916: PUSH
71917: LD_INT 1
71919: NEG
71920: ST_TO_ADDR
// exit ;
71921: GO 72158
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71923: LD_ADDR_VAR 0 12
71927: PUSH
71928: LD_VAR 0 1
71932: PPUSH
71933: LD_VAR 0 2
71937: PPUSH
71938: LD_VAR 0 3
71942: PPUSH
71943: LD_VAR 0 4
71947: PPUSH
71948: CALL 71008 0 4
71952: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71953: LD_ADDR_VAR 0 11
71957: PUSH
71958: LD_VAR 0 1
71962: PPUSH
71963: LD_VAR 0 2
71967: PPUSH
71968: LD_VAR 0 12
71972: PUSH
71973: LD_INT 1
71975: ARRAY
71976: PPUSH
71977: LD_VAR 0 12
71981: PUSH
71982: LD_INT 2
71984: ARRAY
71985: PPUSH
71986: CALL_OW 298
71990: ST_TO_ADDR
// distance := 9999 ;
71991: LD_ADDR_VAR 0 10
71995: PUSH
71996: LD_INT 9999
71998: ST_TO_ADDR
// for i := 0 to 5 do
71999: LD_ADDR_VAR 0 6
72003: PUSH
72004: DOUBLE
72005: LD_INT 0
72007: DEC
72008: ST_TO_ADDR
72009: LD_INT 5
72011: PUSH
72012: FOR_TO
72013: IFFALSE 72156
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72015: LD_ADDR_VAR 0 7
72019: PUSH
72020: LD_VAR 0 1
72024: PPUSH
72025: LD_VAR 0 6
72029: PPUSH
72030: LD_VAR 0 11
72034: PPUSH
72035: CALL_OW 272
72039: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72040: LD_ADDR_VAR 0 8
72044: PUSH
72045: LD_VAR 0 2
72049: PPUSH
72050: LD_VAR 0 6
72054: PPUSH
72055: LD_VAR 0 11
72059: PPUSH
72060: CALL_OW 273
72064: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72065: LD_VAR 0 7
72069: PPUSH
72070: LD_VAR 0 8
72074: PPUSH
72075: CALL_OW 488
72079: NOT
72080: IFFALSE 72084
// continue ;
72082: GO 72012
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72084: LD_ADDR_VAR 0 9
72088: PUSH
72089: LD_VAR 0 12
72093: PUSH
72094: LD_INT 1
72096: ARRAY
72097: PPUSH
72098: LD_VAR 0 12
72102: PUSH
72103: LD_INT 2
72105: ARRAY
72106: PPUSH
72107: LD_VAR 0 7
72111: PPUSH
72112: LD_VAR 0 8
72116: PPUSH
72117: CALL_OW 298
72121: ST_TO_ADDR
// if tmp < distance then
72122: LD_VAR 0 9
72126: PUSH
72127: LD_VAR 0 10
72131: LESS
72132: IFFALSE 72154
// begin result := i ;
72134: LD_ADDR_VAR 0 5
72138: PUSH
72139: LD_VAR 0 6
72143: ST_TO_ADDR
// distance := tmp ;
72144: LD_ADDR_VAR 0 10
72148: PUSH
72149: LD_VAR 0 9
72153: ST_TO_ADDR
// end ; end ;
72154: GO 72012
72156: POP
72157: POP
// end ;
72158: LD_VAR 0 5
72162: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72163: LD_INT 0
72165: PPUSH
72166: PPUSH
// if not driver or not IsInUnit ( driver ) then
72167: LD_VAR 0 1
72171: NOT
72172: PUSH
72173: LD_VAR 0 1
72177: PPUSH
72178: CALL_OW 310
72182: NOT
72183: OR
72184: IFFALSE 72188
// exit ;
72186: GO 72278
// vehicle := IsInUnit ( driver ) ;
72188: LD_ADDR_VAR 0 3
72192: PUSH
72193: LD_VAR 0 1
72197: PPUSH
72198: CALL_OW 310
72202: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72203: LD_VAR 0 1
72207: PPUSH
72208: LD_STRING \
72210: PUSH
72211: LD_INT 0
72213: PUSH
72214: LD_INT 0
72216: PUSH
72217: LD_INT 0
72219: PUSH
72220: LD_INT 0
72222: PUSH
72223: LD_INT 0
72225: PUSH
72226: LD_INT 0
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: PUSH
72238: LD_STRING E
72240: PUSH
72241: LD_INT 0
72243: PUSH
72244: LD_INT 0
72246: PUSH
72247: LD_VAR 0 3
72251: PUSH
72252: LD_INT 0
72254: PUSH
72255: LD_INT 0
72257: PUSH
72258: LD_INT 0
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PPUSH
72274: CALL_OW 446
// end ;
72278: LD_VAR 0 2
72282: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72283: LD_INT 0
72285: PPUSH
72286: PPUSH
// if not driver or not IsInUnit ( driver ) then
72287: LD_VAR 0 1
72291: NOT
72292: PUSH
72293: LD_VAR 0 1
72297: PPUSH
72298: CALL_OW 310
72302: NOT
72303: OR
72304: IFFALSE 72308
// exit ;
72306: GO 72398
// vehicle := IsInUnit ( driver ) ;
72308: LD_ADDR_VAR 0 3
72312: PUSH
72313: LD_VAR 0 1
72317: PPUSH
72318: CALL_OW 310
72322: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72323: LD_VAR 0 1
72327: PPUSH
72328: LD_STRING \
72330: PUSH
72331: LD_INT 0
72333: PUSH
72334: LD_INT 0
72336: PUSH
72337: LD_INT 0
72339: PUSH
72340: LD_INT 0
72342: PUSH
72343: LD_INT 0
72345: PUSH
72346: LD_INT 0
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: PUSH
72358: LD_STRING E
72360: PUSH
72361: LD_INT 0
72363: PUSH
72364: LD_INT 0
72366: PUSH
72367: LD_VAR 0 3
72371: PUSH
72372: LD_INT 0
72374: PUSH
72375: LD_INT 0
72377: PUSH
72378: LD_INT 0
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: LIST
72385: LIST
72386: LIST
72387: LIST
72388: LIST
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PPUSH
72394: CALL_OW 447
// end ;
72398: LD_VAR 0 2
72402: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72403: LD_INT 0
72405: PPUSH
72406: PPUSH
72407: PPUSH
// tmp := [ ] ;
72408: LD_ADDR_VAR 0 5
72412: PUSH
72413: EMPTY
72414: ST_TO_ADDR
// for i in units do
72415: LD_ADDR_VAR 0 4
72419: PUSH
72420: LD_VAR 0 1
72424: PUSH
72425: FOR_IN
72426: IFFALSE 72464
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72428: LD_ADDR_VAR 0 5
72432: PUSH
72433: LD_VAR 0 5
72437: PPUSH
72438: LD_VAR 0 5
72442: PUSH
72443: LD_INT 1
72445: PLUS
72446: PPUSH
72447: LD_VAR 0 4
72451: PPUSH
72452: CALL_OW 256
72456: PPUSH
72457: CALL_OW 2
72461: ST_TO_ADDR
72462: GO 72425
72464: POP
72465: POP
// if not tmp then
72466: LD_VAR 0 5
72470: NOT
72471: IFFALSE 72475
// exit ;
72473: GO 72523
// if asc then
72475: LD_VAR 0 2
72479: IFFALSE 72503
// result := SortListByListAsc ( units , tmp ) else
72481: LD_ADDR_VAR 0 3
72485: PUSH
72486: LD_VAR 0 1
72490: PPUSH
72491: LD_VAR 0 5
72495: PPUSH
72496: CALL_OW 76
72500: ST_TO_ADDR
72501: GO 72523
// result := SortListByListDesc ( units , tmp ) ;
72503: LD_ADDR_VAR 0 3
72507: PUSH
72508: LD_VAR 0 1
72512: PPUSH
72513: LD_VAR 0 5
72517: PPUSH
72518: CALL_OW 77
72522: ST_TO_ADDR
// end ;
72523: LD_VAR 0 3
72527: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72528: LD_INT 0
72530: PPUSH
72531: PPUSH
// task := GetTaskList ( mech ) ;
72532: LD_ADDR_VAR 0 4
72536: PUSH
72537: LD_VAR 0 1
72541: PPUSH
72542: CALL_OW 437
72546: ST_TO_ADDR
// if not task then
72547: LD_VAR 0 4
72551: NOT
72552: IFFALSE 72556
// exit ;
72554: GO 72598
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72556: LD_ADDR_VAR 0 3
72560: PUSH
72561: LD_VAR 0 4
72565: PUSH
72566: LD_INT 1
72568: ARRAY
72569: PUSH
72570: LD_INT 1
72572: ARRAY
72573: PUSH
72574: LD_STRING r
72576: EQUAL
72577: PUSH
72578: LD_VAR 0 4
72582: PUSH
72583: LD_INT 1
72585: ARRAY
72586: PUSH
72587: LD_INT 4
72589: ARRAY
72590: PUSH
72591: LD_VAR 0 2
72595: EQUAL
72596: AND
72597: ST_TO_ADDR
// end ;
72598: LD_VAR 0 3
72602: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72603: LD_INT 0
72605: PPUSH
// SetDir ( unit , d ) ;
72606: LD_VAR 0 1
72610: PPUSH
72611: LD_VAR 0 4
72615: PPUSH
72616: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
72620: LD_ADDR_VAR 0 6
72624: PUSH
72625: LD_VAR 0 1
72629: PPUSH
72630: LD_VAR 0 2
72634: PPUSH
72635: LD_VAR 0 3
72639: PPUSH
72640: LD_VAR 0 5
72644: PPUSH
72645: CALL_OW 48
72649: ST_TO_ADDR
// end ;
72650: LD_VAR 0 6
72654: RET
// export function ToNaturalNumber ( number ) ; begin
72655: LD_INT 0
72657: PPUSH
// result := number div 1 ;
72658: LD_ADDR_VAR 0 2
72662: PUSH
72663: LD_VAR 0 1
72667: PUSH
72668: LD_INT 1
72670: DIV
72671: ST_TO_ADDR
// if number < 0 then
72672: LD_VAR 0 1
72676: PUSH
72677: LD_INT 0
72679: LESS
72680: IFFALSE 72690
// result := 0 ;
72682: LD_ADDR_VAR 0 2
72686: PUSH
72687: LD_INT 0
72689: ST_TO_ADDR
// end ;
72690: LD_VAR 0 2
72694: RET
// export function SortByClass ( units , class ) ; var un ; begin
72695: LD_INT 0
72697: PPUSH
72698: PPUSH
// if not units or not class then
72699: LD_VAR 0 1
72703: NOT
72704: PUSH
72705: LD_VAR 0 2
72709: NOT
72710: OR
72711: IFFALSE 72715
// exit ;
72713: GO 72810
// result := [ ] ;
72715: LD_ADDR_VAR 0 3
72719: PUSH
72720: EMPTY
72721: ST_TO_ADDR
// for un in units do
72722: LD_ADDR_VAR 0 4
72726: PUSH
72727: LD_VAR 0 1
72731: PUSH
72732: FOR_IN
72733: IFFALSE 72808
// if GetClass ( un ) = class then
72735: LD_VAR 0 4
72739: PPUSH
72740: CALL_OW 257
72744: PUSH
72745: LD_VAR 0 2
72749: EQUAL
72750: IFFALSE 72777
// result := Insert ( result , 1 , un ) else
72752: LD_ADDR_VAR 0 3
72756: PUSH
72757: LD_VAR 0 3
72761: PPUSH
72762: LD_INT 1
72764: PPUSH
72765: LD_VAR 0 4
72769: PPUSH
72770: CALL_OW 2
72774: ST_TO_ADDR
72775: GO 72806
// result := Replace ( result , result + 1 , un ) ;
72777: LD_ADDR_VAR 0 3
72781: PUSH
72782: LD_VAR 0 3
72786: PPUSH
72787: LD_VAR 0 3
72791: PUSH
72792: LD_INT 1
72794: PLUS
72795: PPUSH
72796: LD_VAR 0 4
72800: PPUSH
72801: CALL_OW 1
72805: ST_TO_ADDR
72806: GO 72732
72808: POP
72809: POP
// end ;
72810: LD_VAR 0 3
72814: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72815: LD_INT 0
72817: PPUSH
72818: PPUSH
72819: PPUSH
72820: PPUSH
72821: PPUSH
72822: PPUSH
72823: PPUSH
// result := [ ] ;
72824: LD_ADDR_VAR 0 4
72828: PUSH
72829: EMPTY
72830: ST_TO_ADDR
// if x - r < 0 then
72831: LD_VAR 0 1
72835: PUSH
72836: LD_VAR 0 3
72840: MINUS
72841: PUSH
72842: LD_INT 0
72844: LESS
72845: IFFALSE 72857
// min_x := 0 else
72847: LD_ADDR_VAR 0 8
72851: PUSH
72852: LD_INT 0
72854: ST_TO_ADDR
72855: GO 72873
// min_x := x - r ;
72857: LD_ADDR_VAR 0 8
72861: PUSH
72862: LD_VAR 0 1
72866: PUSH
72867: LD_VAR 0 3
72871: MINUS
72872: ST_TO_ADDR
// if y - r < 0 then
72873: LD_VAR 0 2
72877: PUSH
72878: LD_VAR 0 3
72882: MINUS
72883: PUSH
72884: LD_INT 0
72886: LESS
72887: IFFALSE 72899
// min_y := 0 else
72889: LD_ADDR_VAR 0 7
72893: PUSH
72894: LD_INT 0
72896: ST_TO_ADDR
72897: GO 72915
// min_y := y - r ;
72899: LD_ADDR_VAR 0 7
72903: PUSH
72904: LD_VAR 0 2
72908: PUSH
72909: LD_VAR 0 3
72913: MINUS
72914: ST_TO_ADDR
// max_x := x + r ;
72915: LD_ADDR_VAR 0 9
72919: PUSH
72920: LD_VAR 0 1
72924: PUSH
72925: LD_VAR 0 3
72929: PLUS
72930: ST_TO_ADDR
// max_y := y + r ;
72931: LD_ADDR_VAR 0 10
72935: PUSH
72936: LD_VAR 0 2
72940: PUSH
72941: LD_VAR 0 3
72945: PLUS
72946: ST_TO_ADDR
// for _x = min_x to max_x do
72947: LD_ADDR_VAR 0 5
72951: PUSH
72952: DOUBLE
72953: LD_VAR 0 8
72957: DEC
72958: ST_TO_ADDR
72959: LD_VAR 0 9
72963: PUSH
72964: FOR_TO
72965: IFFALSE 73066
// for _y = min_y to max_y do
72967: LD_ADDR_VAR 0 6
72971: PUSH
72972: DOUBLE
72973: LD_VAR 0 7
72977: DEC
72978: ST_TO_ADDR
72979: LD_VAR 0 10
72983: PUSH
72984: FOR_TO
72985: IFFALSE 73062
// begin if not ValidHex ( _x , _y ) then
72987: LD_VAR 0 5
72991: PPUSH
72992: LD_VAR 0 6
72996: PPUSH
72997: CALL_OW 488
73001: NOT
73002: IFFALSE 73006
// continue ;
73004: GO 72984
// if GetResourceTypeXY ( _x , _y ) then
73006: LD_VAR 0 5
73010: PPUSH
73011: LD_VAR 0 6
73015: PPUSH
73016: CALL_OW 283
73020: IFFALSE 73060
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73022: LD_ADDR_VAR 0 4
73026: PUSH
73027: LD_VAR 0 4
73031: PPUSH
73032: LD_VAR 0 4
73036: PUSH
73037: LD_INT 1
73039: PLUS
73040: PPUSH
73041: LD_VAR 0 5
73045: PUSH
73046: LD_VAR 0 6
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: PPUSH
73055: CALL_OW 1
73059: ST_TO_ADDR
// end ;
73060: GO 72984
73062: POP
73063: POP
73064: GO 72964
73066: POP
73067: POP
// end ;
73068: LD_VAR 0 4
73072: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73073: LD_INT 0
73075: PPUSH
73076: PPUSH
73077: PPUSH
73078: PPUSH
73079: PPUSH
73080: PPUSH
73081: PPUSH
73082: PPUSH
// if not units then
73083: LD_VAR 0 1
73087: NOT
73088: IFFALSE 73092
// exit ;
73090: GO 73620
// result := UnitFilter ( units , [ f_ok ] ) ;
73092: LD_ADDR_VAR 0 3
73096: PUSH
73097: LD_VAR 0 1
73101: PPUSH
73102: LD_INT 50
73104: PUSH
73105: EMPTY
73106: LIST
73107: PPUSH
73108: CALL_OW 72
73112: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73113: LD_ADDR_VAR 0 8
73117: PUSH
73118: LD_VAR 0 1
73122: PUSH
73123: LD_INT 1
73125: ARRAY
73126: PPUSH
73127: CALL_OW 255
73131: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73132: LD_ADDR_VAR 0 10
73136: PUSH
73137: LD_INT 29
73139: PUSH
73140: LD_INT 91
73142: PUSH
73143: LD_INT 49
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: LIST
73150: ST_TO_ADDR
// if not result then
73151: LD_VAR 0 3
73155: NOT
73156: IFFALSE 73160
// exit ;
73158: GO 73620
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73160: LD_ADDR_VAR 0 5
73164: PUSH
73165: LD_INT 81
73167: PUSH
73168: LD_VAR 0 8
73172: PUSH
73173: EMPTY
73174: LIST
73175: LIST
73176: PPUSH
73177: CALL_OW 69
73181: ST_TO_ADDR
// for i in result do
73182: LD_ADDR_VAR 0 4
73186: PUSH
73187: LD_VAR 0 3
73191: PUSH
73192: FOR_IN
73193: IFFALSE 73618
// begin tag := GetTag ( i ) + 1 ;
73195: LD_ADDR_VAR 0 9
73199: PUSH
73200: LD_VAR 0 4
73204: PPUSH
73205: CALL_OW 110
73209: PUSH
73210: LD_INT 1
73212: PLUS
73213: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
73214: LD_ADDR_VAR 0 7
73218: PUSH
73219: LD_VAR 0 4
73223: PPUSH
73224: CALL_OW 250
73228: PPUSH
73229: LD_VAR 0 4
73233: PPUSH
73234: CALL_OW 251
73238: PPUSH
73239: LD_INT 4
73241: PPUSH
73242: CALL 72815 0 3
73246: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
73247: LD_VAR 0 4
73251: PPUSH
73252: CALL_OW 247
73256: PUSH
73257: LD_INT 2
73259: EQUAL
73260: PUSH
73261: LD_VAR 0 7
73265: PUSH
73266: LD_INT 2
73268: GREATER
73269: AND
73270: PUSH
73271: LD_VAR 0 4
73275: PPUSH
73276: CALL_OW 264
73280: PUSH
73281: LD_VAR 0 10
73285: IN
73286: NOT
73287: AND
73288: IFFALSE 73327
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73290: LD_VAR 0 4
73294: PPUSH
73295: LD_VAR 0 7
73299: PUSH
73300: LD_INT 1
73302: ARRAY
73303: PUSH
73304: LD_INT 1
73306: ARRAY
73307: PPUSH
73308: LD_VAR 0 7
73312: PUSH
73313: LD_INT 1
73315: ARRAY
73316: PUSH
73317: LD_INT 2
73319: ARRAY
73320: PPUSH
73321: CALL_OW 116
73325: GO 73616
// if path > tag then
73327: LD_VAR 0 2
73331: PUSH
73332: LD_VAR 0 9
73336: GREATER
73337: IFFALSE 73545
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73339: LD_ADDR_VAR 0 6
73343: PUSH
73344: LD_VAR 0 5
73348: PPUSH
73349: LD_INT 91
73351: PUSH
73352: LD_VAR 0 4
73356: PUSH
73357: LD_INT 8
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: LIST
73364: PPUSH
73365: CALL_OW 72
73369: ST_TO_ADDR
// if nearEnemy then
73370: LD_VAR 0 6
73374: IFFALSE 73443
// begin if GetWeapon ( i ) = ru_time_lapser then
73376: LD_VAR 0 4
73380: PPUSH
73381: CALL_OW 264
73385: PUSH
73386: LD_INT 49
73388: EQUAL
73389: IFFALSE 73417
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73391: LD_VAR 0 4
73395: PPUSH
73396: LD_VAR 0 6
73400: PPUSH
73401: LD_VAR 0 4
73405: PPUSH
73406: CALL_OW 74
73410: PPUSH
73411: CALL_OW 112
73415: GO 73441
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73417: LD_VAR 0 4
73421: PPUSH
73422: LD_VAR 0 6
73426: PPUSH
73427: LD_VAR 0 4
73431: PPUSH
73432: CALL_OW 74
73436: PPUSH
73437: CALL 74691 0 2
// end else
73441: GO 73543
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73443: LD_VAR 0 4
73447: PPUSH
73448: LD_VAR 0 2
73452: PUSH
73453: LD_VAR 0 9
73457: ARRAY
73458: PUSH
73459: LD_INT 1
73461: ARRAY
73462: PPUSH
73463: LD_VAR 0 2
73467: PUSH
73468: LD_VAR 0 9
73472: ARRAY
73473: PUSH
73474: LD_INT 2
73476: ARRAY
73477: PPUSH
73478: CALL_OW 297
73482: PUSH
73483: LD_INT 6
73485: GREATER
73486: IFFALSE 73529
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73488: LD_VAR 0 4
73492: PPUSH
73493: LD_VAR 0 2
73497: PUSH
73498: LD_VAR 0 9
73502: ARRAY
73503: PUSH
73504: LD_INT 1
73506: ARRAY
73507: PPUSH
73508: LD_VAR 0 2
73512: PUSH
73513: LD_VAR 0 9
73517: ARRAY
73518: PUSH
73519: LD_INT 2
73521: ARRAY
73522: PPUSH
73523: CALL_OW 114
73527: GO 73543
// SetTag ( i , tag ) ;
73529: LD_VAR 0 4
73533: PPUSH
73534: LD_VAR 0 9
73538: PPUSH
73539: CALL_OW 109
// end else
73543: GO 73616
// if enemy then
73545: LD_VAR 0 5
73549: IFFALSE 73616
// begin if GetWeapon ( i ) = ru_time_lapser then
73551: LD_VAR 0 4
73555: PPUSH
73556: CALL_OW 264
73560: PUSH
73561: LD_INT 49
73563: EQUAL
73564: IFFALSE 73592
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73566: LD_VAR 0 4
73570: PPUSH
73571: LD_VAR 0 5
73575: PPUSH
73576: LD_VAR 0 4
73580: PPUSH
73581: CALL_OW 74
73585: PPUSH
73586: CALL_OW 112
73590: GO 73616
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73592: LD_VAR 0 4
73596: PPUSH
73597: LD_VAR 0 5
73601: PPUSH
73602: LD_VAR 0 4
73606: PPUSH
73607: CALL_OW 74
73611: PPUSH
73612: CALL 74691 0 2
// end ; end ;
73616: GO 73192
73618: POP
73619: POP
// end ;
73620: LD_VAR 0 3
73624: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73625: LD_INT 0
73627: PPUSH
73628: PPUSH
73629: PPUSH
// if not unit or IsInUnit ( unit ) then
73630: LD_VAR 0 1
73634: NOT
73635: PUSH
73636: LD_VAR 0 1
73640: PPUSH
73641: CALL_OW 310
73645: OR
73646: IFFALSE 73650
// exit ;
73648: GO 73741
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73650: LD_ADDR_VAR 0 4
73654: PUSH
73655: LD_VAR 0 1
73659: PPUSH
73660: CALL_OW 250
73664: PPUSH
73665: LD_VAR 0 2
73669: PPUSH
73670: LD_INT 1
73672: PPUSH
73673: CALL_OW 272
73677: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73678: LD_ADDR_VAR 0 5
73682: PUSH
73683: LD_VAR 0 1
73687: PPUSH
73688: CALL_OW 251
73692: PPUSH
73693: LD_VAR 0 2
73697: PPUSH
73698: LD_INT 1
73700: PPUSH
73701: CALL_OW 273
73705: ST_TO_ADDR
// if ValidHex ( x , y ) then
73706: LD_VAR 0 4
73710: PPUSH
73711: LD_VAR 0 5
73715: PPUSH
73716: CALL_OW 488
73720: IFFALSE 73741
// ComTurnXY ( unit , x , y ) ;
73722: LD_VAR 0 1
73726: PPUSH
73727: LD_VAR 0 4
73731: PPUSH
73732: LD_VAR 0 5
73736: PPUSH
73737: CALL_OW 118
// end ;
73741: LD_VAR 0 3
73745: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73746: LD_INT 0
73748: PPUSH
73749: PPUSH
// result := false ;
73750: LD_ADDR_VAR 0 3
73754: PUSH
73755: LD_INT 0
73757: ST_TO_ADDR
// if not units then
73758: LD_VAR 0 2
73762: NOT
73763: IFFALSE 73767
// exit ;
73765: GO 73812
// for i in units do
73767: LD_ADDR_VAR 0 4
73771: PUSH
73772: LD_VAR 0 2
73776: PUSH
73777: FOR_IN
73778: IFFALSE 73810
// if See ( side , i ) then
73780: LD_VAR 0 1
73784: PPUSH
73785: LD_VAR 0 4
73789: PPUSH
73790: CALL_OW 292
73794: IFFALSE 73808
// begin result := true ;
73796: LD_ADDR_VAR 0 3
73800: PUSH
73801: LD_INT 1
73803: ST_TO_ADDR
// exit ;
73804: POP
73805: POP
73806: GO 73812
// end ;
73808: GO 73777
73810: POP
73811: POP
// end ;
73812: LD_VAR 0 3
73816: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73817: LD_INT 0
73819: PPUSH
73820: PPUSH
73821: PPUSH
73822: PPUSH
// if not unit or not points then
73823: LD_VAR 0 1
73827: NOT
73828: PUSH
73829: LD_VAR 0 2
73833: NOT
73834: OR
73835: IFFALSE 73839
// exit ;
73837: GO 73929
// dist := 99999 ;
73839: LD_ADDR_VAR 0 5
73843: PUSH
73844: LD_INT 99999
73846: ST_TO_ADDR
// for i in points do
73847: LD_ADDR_VAR 0 4
73851: PUSH
73852: LD_VAR 0 2
73856: PUSH
73857: FOR_IN
73858: IFFALSE 73927
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73860: LD_ADDR_VAR 0 6
73864: PUSH
73865: LD_VAR 0 1
73869: PPUSH
73870: LD_VAR 0 4
73874: PUSH
73875: LD_INT 1
73877: ARRAY
73878: PPUSH
73879: LD_VAR 0 4
73883: PUSH
73884: LD_INT 2
73886: ARRAY
73887: PPUSH
73888: CALL_OW 297
73892: ST_TO_ADDR
// if tmpDist < dist then
73893: LD_VAR 0 6
73897: PUSH
73898: LD_VAR 0 5
73902: LESS
73903: IFFALSE 73925
// begin result := i ;
73905: LD_ADDR_VAR 0 3
73909: PUSH
73910: LD_VAR 0 4
73914: ST_TO_ADDR
// dist := tmpDist ;
73915: LD_ADDR_VAR 0 5
73919: PUSH
73920: LD_VAR 0 6
73924: ST_TO_ADDR
// end ; end ;
73925: GO 73857
73927: POP
73928: POP
// end ;
73929: LD_VAR 0 3
73933: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73934: LD_INT 0
73936: PPUSH
// uc_side := side ;
73937: LD_ADDR_OWVAR 20
73941: PUSH
73942: LD_VAR 0 1
73946: ST_TO_ADDR
// uc_nation := 3 ;
73947: LD_ADDR_OWVAR 21
73951: PUSH
73952: LD_INT 3
73954: ST_TO_ADDR
// vc_chassis := 25 ;
73955: LD_ADDR_OWVAR 37
73959: PUSH
73960: LD_INT 25
73962: ST_TO_ADDR
// vc_engine := engine_siberite ;
73963: LD_ADDR_OWVAR 39
73967: PUSH
73968: LD_INT 3
73970: ST_TO_ADDR
// vc_control := control_computer ;
73971: LD_ADDR_OWVAR 38
73975: PUSH
73976: LD_INT 3
73978: ST_TO_ADDR
// vc_weapon := 59 ;
73979: LD_ADDR_OWVAR 40
73983: PUSH
73984: LD_INT 59
73986: ST_TO_ADDR
// result := CreateVehicle ;
73987: LD_ADDR_VAR 0 5
73991: PUSH
73992: CALL_OW 45
73996: ST_TO_ADDR
// SetDir ( result , d ) ;
73997: LD_VAR 0 5
74001: PPUSH
74002: LD_VAR 0 4
74006: PPUSH
74007: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74011: LD_VAR 0 5
74015: PPUSH
74016: LD_VAR 0 2
74020: PPUSH
74021: LD_VAR 0 3
74025: PPUSH
74026: LD_INT 0
74028: PPUSH
74029: CALL_OW 48
// end ;
74033: LD_VAR 0 5
74037: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74038: LD_INT 0
74040: PPUSH
74041: PPUSH
74042: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74043: LD_ADDR_VAR 0 2
74047: PUSH
74048: LD_INT 0
74050: PUSH
74051: LD_INT 0
74053: PUSH
74054: LD_INT 0
74056: PUSH
74057: LD_INT 0
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: LIST
74064: LIST
74065: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74066: LD_VAR 0 1
74070: NOT
74071: PUSH
74072: LD_VAR 0 1
74076: PPUSH
74077: CALL_OW 264
74081: PUSH
74082: LD_INT 12
74084: PUSH
74085: LD_INT 51
74087: PUSH
74088: LD_INT 32
74090: PUSH
74091: LD_INT 89
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: IN
74100: NOT
74101: OR
74102: IFFALSE 74106
// exit ;
74104: GO 74204
// for i := 1 to 3 do
74106: LD_ADDR_VAR 0 3
74110: PUSH
74111: DOUBLE
74112: LD_INT 1
74114: DEC
74115: ST_TO_ADDR
74116: LD_INT 3
74118: PUSH
74119: FOR_TO
74120: IFFALSE 74202
// begin tmp := GetCargo ( cargo , i ) ;
74122: LD_ADDR_VAR 0 4
74126: PUSH
74127: LD_VAR 0 1
74131: PPUSH
74132: LD_VAR 0 3
74136: PPUSH
74137: CALL_OW 289
74141: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74142: LD_ADDR_VAR 0 2
74146: PUSH
74147: LD_VAR 0 2
74151: PPUSH
74152: LD_VAR 0 3
74156: PPUSH
74157: LD_VAR 0 4
74161: PPUSH
74162: CALL_OW 1
74166: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74167: LD_ADDR_VAR 0 2
74171: PUSH
74172: LD_VAR 0 2
74176: PPUSH
74177: LD_INT 4
74179: PPUSH
74180: LD_VAR 0 2
74184: PUSH
74185: LD_INT 4
74187: ARRAY
74188: PUSH
74189: LD_VAR 0 4
74193: PLUS
74194: PPUSH
74195: CALL_OW 1
74199: ST_TO_ADDR
// end ;
74200: GO 74119
74202: POP
74203: POP
// end ;
74204: LD_VAR 0 2
74208: RET
// export function Length ( array ) ; begin
74209: LD_INT 0
74211: PPUSH
// result := array + 0 ;
74212: LD_ADDR_VAR 0 2
74216: PUSH
74217: LD_VAR 0 1
74221: PUSH
74222: LD_INT 0
74224: PLUS
74225: ST_TO_ADDR
// end ;
74226: LD_VAR 0 2
74230: RET
// export function PrepareArray ( array ) ; begin
74231: LD_INT 0
74233: PPUSH
// result := array diff 0 ;
74234: LD_ADDR_VAR 0 2
74238: PUSH
74239: LD_VAR 0 1
74243: PUSH
74244: LD_INT 0
74246: DIFF
74247: ST_TO_ADDR
// if not result [ 1 ] then
74248: LD_VAR 0 2
74252: PUSH
74253: LD_INT 1
74255: ARRAY
74256: NOT
74257: IFFALSE 74277
// result := Delete ( result , 1 ) ;
74259: LD_ADDR_VAR 0 2
74263: PUSH
74264: LD_VAR 0 2
74268: PPUSH
74269: LD_INT 1
74271: PPUSH
74272: CALL_OW 3
74276: ST_TO_ADDR
// end ;
74277: LD_VAR 0 2
74281: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74282: LD_INT 0
74284: PPUSH
74285: PPUSH
74286: PPUSH
74287: PPUSH
// sibRocketRange := 25 ;
74288: LD_ADDR_VAR 0 6
74292: PUSH
74293: LD_INT 25
74295: ST_TO_ADDR
// result := false ;
74296: LD_ADDR_VAR 0 4
74300: PUSH
74301: LD_INT 0
74303: ST_TO_ADDR
// for i := 0 to 5 do
74304: LD_ADDR_VAR 0 5
74308: PUSH
74309: DOUBLE
74310: LD_INT 0
74312: DEC
74313: ST_TO_ADDR
74314: LD_INT 5
74316: PUSH
74317: FOR_TO
74318: IFFALSE 74385
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74320: LD_VAR 0 1
74324: PPUSH
74325: LD_VAR 0 5
74329: PPUSH
74330: LD_VAR 0 6
74334: PPUSH
74335: CALL_OW 272
74339: PPUSH
74340: LD_VAR 0 2
74344: PPUSH
74345: LD_VAR 0 5
74349: PPUSH
74350: LD_VAR 0 6
74354: PPUSH
74355: CALL_OW 273
74359: PPUSH
74360: LD_VAR 0 3
74364: PPUSH
74365: CALL_OW 309
74369: IFFALSE 74383
// begin result := true ;
74371: LD_ADDR_VAR 0 4
74375: PUSH
74376: LD_INT 1
74378: ST_TO_ADDR
// exit ;
74379: POP
74380: POP
74381: GO 74387
// end ;
74383: GO 74317
74385: POP
74386: POP
// end ;
74387: LD_VAR 0 4
74391: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
74392: LD_INT 0
74394: PPUSH
74395: PPUSH
74396: PPUSH
// if btype = b_depot then
74397: LD_VAR 0 2
74401: PUSH
74402: LD_INT 0
74404: EQUAL
74405: IFFALSE 74417
// begin result := true ;
74407: LD_ADDR_VAR 0 3
74411: PUSH
74412: LD_INT 1
74414: ST_TO_ADDR
// exit ;
74415: GO 74533
// end ; pom := GetBase ( depot ) ;
74417: LD_ADDR_VAR 0 4
74421: PUSH
74422: LD_VAR 0 1
74426: PPUSH
74427: CALL_OW 274
74431: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
74432: LD_ADDR_VAR 0 5
74436: PUSH
74437: LD_VAR 0 2
74441: PPUSH
74442: LD_VAR 0 1
74446: PPUSH
74447: CALL_OW 248
74451: PPUSH
74452: CALL_OW 450
74456: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
74457: LD_ADDR_VAR 0 3
74461: PUSH
74462: LD_VAR 0 4
74466: PPUSH
74467: LD_INT 1
74469: PPUSH
74470: CALL_OW 275
74474: PUSH
74475: LD_VAR 0 5
74479: PUSH
74480: LD_INT 1
74482: ARRAY
74483: GREATEREQUAL
74484: PUSH
74485: LD_VAR 0 4
74489: PPUSH
74490: LD_INT 2
74492: PPUSH
74493: CALL_OW 275
74497: PUSH
74498: LD_VAR 0 5
74502: PUSH
74503: LD_INT 2
74505: ARRAY
74506: GREATEREQUAL
74507: AND
74508: PUSH
74509: LD_VAR 0 4
74513: PPUSH
74514: LD_INT 3
74516: PPUSH
74517: CALL_OW 275
74521: PUSH
74522: LD_VAR 0 5
74526: PUSH
74527: LD_INT 3
74529: ARRAY
74530: GREATEREQUAL
74531: AND
74532: ST_TO_ADDR
// end ;
74533: LD_VAR 0 3
74537: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74538: LD_INT 0
74540: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74541: LD_VAR 0 1
74545: PPUSH
74546: LD_VAR 0 2
74550: PPUSH
74551: LD_INT 0
74553: PPUSH
74554: LD_INT 0
74556: PPUSH
74557: LD_INT 1
74559: PPUSH
74560: LD_INT 0
74562: PPUSH
74563: CALL_OW 587
// end ;
74567: LD_VAR 0 3
74571: RET
// export function CenterOnNow ( unit ) ; begin
74572: LD_INT 0
74574: PPUSH
// result := IsInUnit ( unit ) ;
74575: LD_ADDR_VAR 0 2
74579: PUSH
74580: LD_VAR 0 1
74584: PPUSH
74585: CALL_OW 310
74589: ST_TO_ADDR
// if not result then
74590: LD_VAR 0 2
74594: NOT
74595: IFFALSE 74607
// result := unit ;
74597: LD_ADDR_VAR 0 2
74601: PUSH
74602: LD_VAR 0 1
74606: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74607: LD_VAR 0 1
74611: PPUSH
74612: CALL_OW 87
// end ;
74616: LD_VAR 0 2
74620: RET
// export function ComMoveHex ( unit , hex ) ; begin
74621: LD_INT 0
74623: PPUSH
// if not hex then
74624: LD_VAR 0 2
74628: NOT
74629: IFFALSE 74633
// exit ;
74631: GO 74686
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74633: LD_VAR 0 2
74637: PUSH
74638: LD_INT 1
74640: ARRAY
74641: PPUSH
74642: LD_VAR 0 2
74646: PUSH
74647: LD_INT 2
74649: ARRAY
74650: PPUSH
74651: CALL_OW 428
74655: IFFALSE 74659
// exit ;
74657: GO 74686
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74659: LD_VAR 0 1
74663: PPUSH
74664: LD_VAR 0 2
74668: PUSH
74669: LD_INT 1
74671: ARRAY
74672: PPUSH
74673: LD_VAR 0 2
74677: PUSH
74678: LD_INT 2
74680: ARRAY
74681: PPUSH
74682: CALL_OW 111
// end ;
74686: LD_VAR 0 3
74690: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74691: LD_INT 0
74693: PPUSH
74694: PPUSH
74695: PPUSH
// if not unit or not enemy then
74696: LD_VAR 0 1
74700: NOT
74701: PUSH
74702: LD_VAR 0 2
74706: NOT
74707: OR
74708: IFFALSE 74712
// exit ;
74710: GO 74836
// x := GetX ( enemy ) ;
74712: LD_ADDR_VAR 0 4
74716: PUSH
74717: LD_VAR 0 2
74721: PPUSH
74722: CALL_OW 250
74726: ST_TO_ADDR
// y := GetY ( enemy ) ;
74727: LD_ADDR_VAR 0 5
74731: PUSH
74732: LD_VAR 0 2
74736: PPUSH
74737: CALL_OW 251
74741: ST_TO_ADDR
// if ValidHex ( x , y ) then
74742: LD_VAR 0 4
74746: PPUSH
74747: LD_VAR 0 5
74751: PPUSH
74752: CALL_OW 488
74756: IFFALSE 74836
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
74758: LD_VAR 0 2
74762: PPUSH
74763: CALL_OW 247
74767: PUSH
74768: LD_INT 3
74770: PUSH
74771: LD_INT 2
74773: PUSH
74774: EMPTY
74775: LIST
74776: LIST
74777: IN
74778: PUSH
74779: LD_VAR 0 1
74783: PPUSH
74784: CALL_OW 255
74788: PPUSH
74789: LD_VAR 0 2
74793: PPUSH
74794: CALL_OW 292
74798: OR
74799: IFFALSE 74817
// ComAttackUnit ( unit , enemy ) else
74801: LD_VAR 0 1
74805: PPUSH
74806: LD_VAR 0 2
74810: PPUSH
74811: CALL_OW 115
74815: GO 74836
// ComAgressiveMove ( unit , x , y ) ;
74817: LD_VAR 0 1
74821: PPUSH
74822: LD_VAR 0 4
74826: PPUSH
74827: LD_VAR 0 5
74831: PPUSH
74832: CALL_OW 114
// end ;
74836: LD_VAR 0 3
74840: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74841: LD_INT 0
74843: PPUSH
74844: PPUSH
74845: PPUSH
// list := AreaToList ( area , 0 ) ;
74846: LD_ADDR_VAR 0 5
74850: PUSH
74851: LD_VAR 0 1
74855: PPUSH
74856: LD_INT 0
74858: PPUSH
74859: CALL_OW 517
74863: ST_TO_ADDR
// if not list then
74864: LD_VAR 0 5
74868: NOT
74869: IFFALSE 74873
// exit ;
74871: GO 75003
// if all then
74873: LD_VAR 0 2
74877: IFFALSE 74965
// begin for i := 1 to list [ 1 ] do
74879: LD_ADDR_VAR 0 4
74883: PUSH
74884: DOUBLE
74885: LD_INT 1
74887: DEC
74888: ST_TO_ADDR
74889: LD_VAR 0 5
74893: PUSH
74894: LD_INT 1
74896: ARRAY
74897: PUSH
74898: FOR_TO
74899: IFFALSE 74961
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74901: LD_ADDR_VAR 0 3
74905: PUSH
74906: LD_VAR 0 3
74910: PPUSH
74911: LD_VAR 0 3
74915: PUSH
74916: LD_INT 1
74918: PLUS
74919: PPUSH
74920: LD_VAR 0 5
74924: PUSH
74925: LD_INT 1
74927: ARRAY
74928: PUSH
74929: LD_VAR 0 4
74933: ARRAY
74934: PUSH
74935: LD_VAR 0 5
74939: PUSH
74940: LD_INT 2
74942: ARRAY
74943: PUSH
74944: LD_VAR 0 4
74948: ARRAY
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: PPUSH
74954: CALL_OW 1
74958: ST_TO_ADDR
74959: GO 74898
74961: POP
74962: POP
// exit ;
74963: GO 75003
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
74965: LD_ADDR_VAR 0 3
74969: PUSH
74970: LD_VAR 0 5
74974: PUSH
74975: LD_INT 1
74977: ARRAY
74978: PUSH
74979: LD_INT 1
74981: ARRAY
74982: PUSH
74983: LD_VAR 0 5
74987: PUSH
74988: LD_INT 2
74990: ARRAY
74991: PUSH
74992: LD_INT 1
74994: ARRAY
74995: PUSH
74996: EMPTY
74997: LIST
74998: LIST
74999: PUSH
75000: EMPTY
75001: LIST
75002: ST_TO_ADDR
// end ;
75003: LD_VAR 0 3
75007: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75008: LD_INT 0
75010: PPUSH
75011: PPUSH
// list := AreaToList ( area , 0 ) ;
75012: LD_ADDR_VAR 0 4
75016: PUSH
75017: LD_VAR 0 1
75021: PPUSH
75022: LD_INT 0
75024: PPUSH
75025: CALL_OW 517
75029: ST_TO_ADDR
// if not list then
75030: LD_VAR 0 4
75034: NOT
75035: IFFALSE 75039
// exit ;
75037: GO 75080
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75039: LD_ADDR_VAR 0 3
75043: PUSH
75044: LD_VAR 0 4
75048: PUSH
75049: LD_INT 1
75051: ARRAY
75052: PUSH
75053: LD_INT 1
75055: ARRAY
75056: PUSH
75057: LD_VAR 0 4
75061: PUSH
75062: LD_INT 2
75064: ARRAY
75065: PUSH
75066: LD_INT 1
75068: ARRAY
75069: PUSH
75070: LD_VAR 0 2
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: LIST
75079: ST_TO_ADDR
// end ;
75080: LD_VAR 0 3
75084: RET
// export function First ( array ) ; begin
75085: LD_INT 0
75087: PPUSH
// if not array then
75088: LD_VAR 0 1
75092: NOT
75093: IFFALSE 75097
// exit ;
75095: GO 75111
// result := array [ 1 ] ;
75097: LD_ADDR_VAR 0 2
75101: PUSH
75102: LD_VAR 0 1
75106: PUSH
75107: LD_INT 1
75109: ARRAY
75110: ST_TO_ADDR
// end ;
75111: LD_VAR 0 2
75115: RET
// export function Last ( array ) ; begin
75116: LD_INT 0
75118: PPUSH
// if not array then
75119: LD_VAR 0 1
75123: NOT
75124: IFFALSE 75128
// exit ;
75126: GO 75144
// result := array [ array ] ;
75128: LD_ADDR_VAR 0 2
75132: PUSH
75133: LD_VAR 0 1
75137: PUSH
75138: LD_VAR 0 1
75142: ARRAY
75143: ST_TO_ADDR
// end ;
75144: LD_VAR 0 2
75148: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
75149: LD_INT 0
75151: PPUSH
75152: PPUSH
// result := [ ] ;
75153: LD_ADDR_VAR 0 5
75157: PUSH
75158: EMPTY
75159: ST_TO_ADDR
// if not array then
75160: LD_VAR 0 1
75164: NOT
75165: IFFALSE 75169
// exit ;
75167: GO 75281
// for i := 1 to array do
75169: LD_ADDR_VAR 0 6
75173: PUSH
75174: DOUBLE
75175: LD_INT 1
75177: DEC
75178: ST_TO_ADDR
75179: LD_VAR 0 1
75183: PUSH
75184: FOR_TO
75185: IFFALSE 75279
// if array [ i ] [ index ] = value then
75187: LD_VAR 0 1
75191: PUSH
75192: LD_VAR 0 6
75196: ARRAY
75197: PUSH
75198: LD_VAR 0 2
75202: ARRAY
75203: PUSH
75204: LD_VAR 0 3
75208: EQUAL
75209: IFFALSE 75277
// begin if indexColumn then
75211: LD_VAR 0 4
75215: IFFALSE 75251
// result := Join ( result , array [ i ] [ indexColumn ] ) else
75217: LD_ADDR_VAR 0 5
75221: PUSH
75222: LD_VAR 0 5
75226: PPUSH
75227: LD_VAR 0 1
75231: PUSH
75232: LD_VAR 0 6
75236: ARRAY
75237: PUSH
75238: LD_VAR 0 4
75242: ARRAY
75243: PPUSH
75244: CALL 70463 0 2
75248: ST_TO_ADDR
75249: GO 75277
// result := Join ( result , array [ i ] ) ;
75251: LD_ADDR_VAR 0 5
75255: PUSH
75256: LD_VAR 0 5
75260: PPUSH
75261: LD_VAR 0 1
75265: PUSH
75266: LD_VAR 0 6
75270: ARRAY
75271: PPUSH
75272: CALL 70463 0 2
75276: ST_TO_ADDR
// end ;
75277: GO 75184
75279: POP
75280: POP
// end ;
75281: LD_VAR 0 5
75285: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
75286: LD_INT 0
75288: PPUSH
// if not vehicles or not parkingPoint then
75289: LD_VAR 0 1
75293: NOT
75294: PUSH
75295: LD_VAR 0 2
75299: NOT
75300: OR
75301: IFFALSE 75305
// exit ;
75303: GO 75403
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
75305: LD_ADDR_VAR 0 1
75309: PUSH
75310: LD_VAR 0 1
75314: PPUSH
75315: LD_INT 50
75317: PUSH
75318: EMPTY
75319: LIST
75320: PUSH
75321: LD_INT 3
75323: PUSH
75324: LD_INT 92
75326: PUSH
75327: LD_VAR 0 2
75331: PUSH
75332: LD_INT 1
75334: ARRAY
75335: PUSH
75336: LD_VAR 0 2
75340: PUSH
75341: LD_INT 2
75343: ARRAY
75344: PUSH
75345: LD_INT 8
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: PPUSH
75362: CALL_OW 72
75366: ST_TO_ADDR
// if not vehicles then
75367: LD_VAR 0 1
75371: NOT
75372: IFFALSE 75376
// exit ;
75374: GO 75403
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
75376: LD_VAR 0 1
75380: PPUSH
75381: LD_VAR 0 2
75385: PUSH
75386: LD_INT 1
75388: ARRAY
75389: PPUSH
75390: LD_VAR 0 2
75394: PUSH
75395: LD_INT 2
75397: ARRAY
75398: PPUSH
75399: CALL_OW 111
// end ;
75403: LD_VAR 0 3
75407: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
75408: LD_INT 0
75410: PPUSH
75411: PPUSH
75412: PPUSH
// if not side or not area then
75413: LD_VAR 0 1
75417: NOT
75418: PUSH
75419: LD_VAR 0 2
75423: NOT
75424: OR
75425: IFFALSE 75429
// exit ;
75427: GO 75548
// tmp := AreaToList ( area , 0 ) ;
75429: LD_ADDR_VAR 0 5
75433: PUSH
75434: LD_VAR 0 2
75438: PPUSH
75439: LD_INT 0
75441: PPUSH
75442: CALL_OW 517
75446: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
75447: LD_ADDR_VAR 0 4
75451: PUSH
75452: DOUBLE
75453: LD_INT 1
75455: DEC
75456: ST_TO_ADDR
75457: LD_VAR 0 5
75461: PUSH
75462: LD_INT 1
75464: ARRAY
75465: PUSH
75466: FOR_TO
75467: IFFALSE 75546
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
75469: LD_VAR 0 5
75473: PUSH
75474: LD_INT 1
75476: ARRAY
75477: PUSH
75478: LD_VAR 0 4
75482: ARRAY
75483: PPUSH
75484: LD_VAR 0 5
75488: PUSH
75489: LD_INT 2
75491: ARRAY
75492: PUSH
75493: LD_VAR 0 4
75497: ARRAY
75498: PPUSH
75499: CALL_OW 351
75503: IFFALSE 75544
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
75505: LD_VAR 0 5
75509: PUSH
75510: LD_INT 1
75512: ARRAY
75513: PUSH
75514: LD_VAR 0 4
75518: ARRAY
75519: PPUSH
75520: LD_VAR 0 5
75524: PUSH
75525: LD_INT 2
75527: ARRAY
75528: PUSH
75529: LD_VAR 0 4
75533: ARRAY
75534: PPUSH
75535: LD_VAR 0 1
75539: PPUSH
75540: CALL_OW 244
// end ;
75544: GO 75466
75546: POP
75547: POP
// end ; end_of_file
75548: LD_VAR 0 3
75552: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75553: LD_VAR 0 1
75557: PUSH
75558: LD_INT 200
75560: DOUBLE
75561: GREATEREQUAL
75562: IFFALSE 75570
75564: LD_INT 299
75566: DOUBLE
75567: LESSEQUAL
75568: IFTRUE 75572
75570: GO 75604
75572: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75573: LD_VAR 0 1
75577: PPUSH
75578: LD_VAR 0 2
75582: PPUSH
75583: LD_VAR 0 3
75587: PPUSH
75588: LD_VAR 0 4
75592: PPUSH
75593: LD_VAR 0 5
75597: PPUSH
75598: CALL 27969 0 5
75602: GO 75681
75604: LD_INT 300
75606: DOUBLE
75607: GREATEREQUAL
75608: IFFALSE 75616
75610: LD_INT 399
75612: DOUBLE
75613: LESSEQUAL
75614: IFTRUE 75618
75616: GO 75680
75618: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75619: LD_VAR 0 1
75623: PPUSH
75624: LD_VAR 0 2
75628: PPUSH
75629: LD_VAR 0 3
75633: PPUSH
75634: LD_VAR 0 4
75638: PPUSH
75639: LD_VAR 0 5
75643: PPUSH
75644: LD_VAR 0 6
75648: PPUSH
75649: LD_VAR 0 7
75653: PPUSH
75654: LD_VAR 0 8
75658: PPUSH
75659: LD_VAR 0 9
75663: PPUSH
75664: LD_VAR 0 10
75668: PPUSH
75669: LD_VAR 0 11
75673: PPUSH
75674: CALL 23957 0 11
75678: GO 75681
75680: POP
// end ;
75681: PPOPN 11
75683: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75684: LD_VAR 0 1
75688: PPUSH
75689: LD_VAR 0 2
75693: PPUSH
75694: LD_VAR 0 3
75698: PPUSH
75699: LD_VAR 0 4
75703: PPUSH
75704: LD_VAR 0 5
75708: PPUSH
75709: CALL 27434 0 5
// end ; end_of_file
75713: PPOPN 5
75715: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75716: LD_VAR 0 1
75720: PPUSH
75721: LD_VAR 0 2
75725: PPUSH
75726: LD_VAR 0 3
75730: PPUSH
75731: LD_VAR 0 4
75735: PPUSH
75736: LD_VAR 0 5
75740: PPUSH
75741: LD_VAR 0 6
75745: PPUSH
75746: CALL 11609 0 6
// end ;
75750: PPOPN 6
75752: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75753: LD_INT 0
75755: PPUSH
// begin if not units then
75756: LD_VAR 0 1
75760: NOT
75761: IFFALSE 75765
// exit ;
75763: GO 75765
// end ;
75765: PPOPN 7
75767: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75768: CALL 11496 0 0
// end ;
75772: PPOPN 1
75774: END
