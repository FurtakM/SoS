// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10979 0 0
// PrepareAmerican ;
  19: CALL 245 0 0
// PrepareRussian ;
  23: CALL 1529 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6571 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := false ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// end ;
 104: LD_VAR 0 1
 108: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 109: LD_INT 22
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: LD_INT 30
 121: PUSH
 122: LD_INT 33
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: PPUSH
 133: CALL_OW 69
 137: PUSH
 138: LD_INT 15
 140: GREATEREQUAL
 141: IFFALSE 153
 143: GO 145
 145: DISABLE
// SetAchievement ( ACH_FORT ) ;
 146: LD_STRING ACH_FORT
 148: PPUSH
 149: CALL_OW 543
 153: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 154: LD_INT 22
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 25
 166: PUSH
 167: LD_INT 12
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: PPUSH
 178: CALL_OW 69
 182: PUSH
 183: LD_INT 0
 185: EQUAL
 186: IFFALSE 198
 188: GO 190
 190: DISABLE
// SetAchievement ( ACH_APE ) ;
 191: LD_STRING ACH_APE
 193: PPUSH
 194: CALL_OW 543
 198: END
// every 0 0$1 trigger killCounter >= 20 do
 199: LD_EXP 5
 203: PUSH
 204: LD_INT 20
 206: GREATEREQUAL
 207: IFFALSE 219
 209: GO 211
 211: DISABLE
// SetAchievement ( ACH_DOUBLE ) ;
 212: LD_STRING ACH_DOUBLE
 214: PPUSH
 215: CALL_OW 543
 219: END
// every 0 0$1 trigger IsInArea ( JMMVeh , kappaBaseArea ) do
 220: LD_EXP 9
 224: PPUSH
 225: LD_INT 15
 227: PPUSH
 228: CALL_OW 308
 232: IFFALSE 244
 234: GO 236
 236: DISABLE
// SetAchievement ( ACH_AMASHA ) ; end_of_file
 237: LD_STRING ACH_AMASHA
 239: PPUSH
 240: CALL_OW 543
 244: END
// export JMM , JMMVeh , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 245: LD_INT 0
 247: PPUSH
 248: PPUSH
 249: PPUSH
 250: PPUSH
 251: PPUSH
// uc_side := 1 ;
 252: LD_ADDR_OWVAR 20
 256: PUSH
 257: LD_INT 1
 259: ST_TO_ADDR
// uc_nation := 1 ;
 260: LD_ADDR_OWVAR 21
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 268: LD_INT 48
 270: PPUSH
 271: LD_STRING deltakappa
 273: PPUSH
 274: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 278: LD_INT 48
 280: PPUSH
 281: CALL_OW 274
 285: PPUSH
 286: LD_INT 1
 288: PPUSH
 289: LD_INT 2000
 291: PUSH
 292: LD_INT 1600
 294: PUSH
 295: LD_INT 1200
 297: PUSH
 298: LD_INT 900
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: LIST
 305: LIST
 306: PUSH
 307: LD_OWVAR 67
 311: ARRAY
 312: PPUSH
 313: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 317: LD_INT 48
 319: PPUSH
 320: CALL_OW 274
 324: PPUSH
 325: LD_INT 2
 327: PPUSH
 328: LD_INT 20
 330: PPUSH
 331: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 335: LD_INT 48
 337: PPUSH
 338: CALL_OW 274
 342: PPUSH
 343: LD_INT 3
 345: PPUSH
 346: LD_INT 100
 348: PPUSH
 349: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 353: LD_ADDR_EXP 8
 357: PUSH
 358: LD_STRING JMM
 360: PPUSH
 361: LD_EXP 1
 365: NOT
 366: PPUSH
 367: LD_STRING 13f_
 369: PPUSH
 370: CALL 33059 0 3
 374: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 375: LD_EXP 8
 379: PPUSH
 380: LD_INT 1
 382: PPUSH
 383: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 387: LD_INT 5
 389: PUSH
 390: LD_INT 5
 392: PUSH
 393: LD_INT 3
 395: PUSH
 396: LD_INT 3
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: PUSH
 405: LD_OWVAR 67
 409: ARRAY
 410: PPUSH
 411: LD_INT 3
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: LD_INT 9
 419: PUSH
 420: LD_INT 9
 422: PUSH
 423: LD_INT 5
 425: PUSH
 426: LD_INT 5
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_OWVAR 67
 439: ARRAY
 440: PPUSH
 441: LD_INT 100
 443: PPUSH
 444: CALL 38021 0 5
// JMMVeh := CreateVehicle ;
 448: LD_ADDR_EXP 9
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// SetDir ( JMMVeh , 1 ) ;
 458: LD_EXP 9
 462: PPUSH
 463: LD_INT 1
 465: PPUSH
 466: CALL_OW 233
// PlaceUnitXY ( JMMVeh , 6 , 5 , false ) ;
 470: LD_EXP 9
 474: PPUSH
 475: LD_INT 6
 477: PPUSH
 478: LD_INT 5
 480: PPUSH
 481: LD_INT 0
 483: PPUSH
 484: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 488: LD_EXP 8
 492: PPUSH
 493: LD_EXP 9
 497: PPUSH
 498: CALL_OW 52
// SetMark ( JMMVeh , - 1 ) ;
 502: LD_EXP 9
 506: PPUSH
 507: LD_INT 1
 509: NEG
 510: PPUSH
 511: CALL_OW 242
// ComMoveXY ( JMMVeh , 21 , 8 ) ;
 515: LD_EXP 9
 519: PPUSH
 520: LD_INT 21
 522: PPUSH
 523: LD_INT 8
 525: PPUSH
 526: CALL_OW 111
// uc_side := 4 ;
 530: LD_ADDR_OWVAR 20
 534: PUSH
 535: LD_INT 4
 537: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 538: LD_ADDR_EXP 13
 542: PUSH
 543: LD_STRING Powell
 545: PPUSH
 546: LD_INT 0
 548: PPUSH
 549: LD_STRING 
 551: PPUSH
 552: CALL 33059 0 3
 556: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 557: LD_ADDR_EXP 10
 561: PUSH
 562: LD_STRING Joan
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_STRING 10c_
 573: PPUSH
 574: CALL 33059 0 3
 578: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 579: LD_ADDR_EXP 11
 583: PUSH
 584: LD_STRING Lisa
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_STRING 13s_
 595: PPUSH
 596: CALL 33059 0 3
 600: ST_TO_ADDR
// if Joan then
 601: LD_EXP 10
 605: IFFALSE 644
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 607: LD_EXP 10
 611: PPUSH
 612: LD_INT 4
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 622: LD_EXP 10
 626: PPUSH
 627: LD_INT 4
 629: PPUSH
 630: CALL_OW 336
// JMMGirl = 1 ;
 634: LD_ADDR_EXP 2
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// end else
 642: GO 735
// if Lisa then
 644: LD_EXP 11
 648: IFFALSE 687
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 650: LD_EXP 11
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_INT 0
 660: PPUSH
 661: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 665: LD_EXP 11
 669: PPUSH
 670: LD_INT 1
 672: PPUSH
 673: CALL_OW 336
// JMMGirl := 2 ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_INT 2
 684: ST_TO_ADDR
// end else
 685: GO 735
// begin Connie := NewCharacter ( Coonie ) ;
 687: LD_ADDR_EXP 12
 691: PUSH
 692: LD_STRING Coonie
 694: PPUSH
 695: CALL_OW 25
 699: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 700: LD_EXP 12
 704: PPUSH
 705: LD_INT 4
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 715: LD_EXP 12
 719: PPUSH
 720: LD_INT 3
 722: PPUSH
 723: CALL_OW 336
// JMMGirl := 3 ;
 727: LD_ADDR_EXP 2
 731: PUSH
 732: LD_INT 3
 734: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 735: LD_ADDR_VAR 0 2
 739: PUSH
 740: DOUBLE
 741: LD_INT 1
 743: DEC
 744: ST_TO_ADDR
 745: LD_INT 4
 747: PUSH
 748: LD_INT 3
 750: PUSH
 751: LD_INT 3
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: PUSH
 763: LD_OWVAR 67
 767: ARRAY
 768: PUSH
 769: FOR_TO
 770: IFFALSE 924
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 772: LD_INT 4
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: LD_INT 2
 780: PUSH
 781: LD_INT 3
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 4
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: LD_INT 9
 812: PUSH
 813: LD_INT 7
 815: PUSH
 816: LD_INT 4
 818: PUSH
 819: LD_INT 5
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: PUSH
 828: LD_VAR 0 2
 832: PUSH
 833: LD_INT 4
 835: MOD
 836: PUSH
 837: LD_INT 1
 839: PLUS
 840: ARRAY
 841: PPUSH
 842: LD_INT 33
 844: PPUSH
 845: LD_INT 55
 847: PPUSH
 848: CALL_OW 12
 852: PPUSH
 853: CALL 38021 0 5
// veh := CreateVehicle ;
 857: LD_ADDR_VAR 0 4
 861: PUSH
 862: CALL_OW 45
 866: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 867: LD_VAR 0 4
 871: PPUSH
 872: LD_INT 0
 874: PPUSH
 875: LD_INT 5
 877: PPUSH
 878: CALL_OW 12
 882: PPUSH
 883: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 887: LD_VAR 0 4
 891: PPUSH
 892: LD_INT 500
 894: PPUSH
 895: LD_INT 950
 897: PPUSH
 898: CALL_OW 12
 902: PPUSH
 903: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 907: LD_VAR 0 4
 911: PPUSH
 912: LD_INT 5
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// end ;
 922: GO 769
 924: POP
 925: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: DOUBLE
 932: LD_INT 1
 934: DEC
 935: ST_TO_ADDR
 936: LD_INT 3
 938: PUSH
 939: LD_INT 3
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: LD_INT 2
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_OWVAR 67
 958: ARRAY
 959: PUSH
 960: FOR_TO
 961: IFFALSE 1083
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 963: LD_INT 3
 965: PUSH
 966: LD_INT 2
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 2
 980: MOD
 981: PUSH
 982: LD_INT 1
 984: PLUS
 985: ARRAY
 986: PPUSH
 987: LD_INT 1
 989: PPUSH
 990: LD_INT 3
 992: PPUSH
 993: LD_INT 9
 995: PUSH
 996: LD_INT 5
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PUSH
1003: LD_VAR 0 2
1007: PUSH
1008: LD_INT 2
1010: MOD
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: ARRAY
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 38021 0 5
// veh := CreateVehicle ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: CALL_OW 45
1033: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1034: LD_VAR 0 4
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: LD_INT 5
1044: PPUSH
1045: CALL_OW 12
1049: PPUSH
1050: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1054: LD_VAR 0 4
1058: PPUSH
1059: LD_INT 1000
1061: PPUSH
1062: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1066: LD_VAR 0 4
1070: PPUSH
1071: LD_INT 17
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 960
1083: POP
1084: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_INT 3
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_OWVAR 67
1117: ARRAY
1118: PUSH
1119: FOR_TO
1120: IFFALSE 1168
// begin PrepareApeman ( 1 ) ;
1122: LD_INT 1
1124: PPUSH
1125: CALL 67318 0 1
// uc_side := 4 ;
1129: LD_ADDR_OWVAR 20
1133: PUSH
1134: LD_INT 4
1136: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1137: LD_ADDR_OWVAR 28
1141: PUSH
1142: LD_INT 16
1144: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1145: CALL_OW 44
1149: PPUSH
1150: LD_INT 84
1152: PPUSH
1153: LD_INT 127
1155: PPUSH
1156: LD_INT 5
1158: PPUSH
1159: LD_INT 0
1161: PPUSH
1162: CALL_OW 50
// end ;
1166: GO 1119
1168: POP
1169: POP
// uc_side := 4 ;
1170: LD_ADDR_OWVAR 20
1174: PUSH
1175: LD_INT 4
1177: ST_TO_ADDR
// uc_nation := 1 ;
1178: LD_ADDR_OWVAR 21
1182: PUSH
1183: LD_INT 1
1185: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1186: LD_INT 2
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 1
1194: PPUSH
1195: LD_INT 12
1197: PPUSH
1198: LD_INT 100
1200: PPUSH
1201: CALL 38021 0 5
// veh := CreateVehicle ;
1205: LD_ADDR_VAR 0 4
1209: PUSH
1210: CALL_OW 45
1214: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1215: LD_VAR 0 4
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: LD_INT 100
1225: PPUSH
1226: CALL_OW 290
// SetLives ( veh , 450 ) ;
1230: LD_VAR 0 4
1234: PPUSH
1235: LD_INT 450
1237: PPUSH
1238: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1242: LD_VAR 0 4
1246: PPUSH
1247: LD_INT 122
1249: PPUSH
1250: LD_INT 118
1252: PPUSH
1253: LD_INT 4
1255: PPUSH
1256: LD_INT 0
1258: PPUSH
1259: CALL 73351 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1276: CALL_OW 44
1280: PPUSH
1281: LD_INT 124
1283: PPUSH
1284: LD_INT 120
1286: PPUSH
1287: LD_INT 1
1289: PPUSH
1290: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_INT 18
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 517
1309: ST_TO_ADDR
// for i := 1 to 4 do
1310: LD_ADDR_VAR 0 2
1314: PUSH
1315: DOUBLE
1316: LD_INT 1
1318: DEC
1319: ST_TO_ADDR
1320: LD_INT 4
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1432
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1326: LD_INT 1
1328: PPUSH
1329: LD_INT 1
1331: PUSH
1332: LD_INT 3
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 1
1341: PPUSH
1342: LD_INT 2
1344: PPUSH
1345: CALL_OW 12
1349: ARRAY
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 380
// un := CreateHuman ;
1358: LD_ADDR_VAR 0 3
1362: PUSH
1363: CALL_OW 44
1367: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1368: LD_VAR 0 3
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 5
1378: PPUSH
1379: CALL_OW 12
1383: PPUSH
1384: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1388: LD_VAR 0 3
1392: PPUSH
1393: LD_VAR 0 5
1397: PUSH
1398: LD_INT 1
1400: ARRAY
1401: PUSH
1402: LD_VAR 0 2
1406: ARRAY
1407: PPUSH
1408: LD_VAR 0 5
1412: PUSH
1413: LD_INT 2
1415: ARRAY
1416: PUSH
1417: LD_VAR 0 2
1421: ARRAY
1422: PPUSH
1423: LD_INT 1
1425: PPUSH
1426: CALL_OW 601
// end ;
1430: GO 1323
1432: POP
1433: POP
// end ;
1434: LD_VAR 0 1
1438: RET
// export function ChangeSideKappaBase ; begin
1439: LD_INT 0
1441: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1442: LD_INT 70
1444: PPUSH
1445: LD_INT 138
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: LD_INT 80
1453: NEG
1454: PPUSH
1455: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1459: LD_INT 70
1461: PPUSH
1462: LD_INT 138
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1472: LD_INT 147
1474: PPUSH
1475: LD_INT 122
1477: PPUSH
1478: LD_INT 1
1480: PPUSH
1481: LD_INT 40
1483: NEG
1484: PPUSH
1485: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1489: LD_INT 147
1491: PPUSH
1492: LD_INT 122
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1502: LD_INT 22
1504: PUSH
1505: LD_INT 4
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: PPUSH
1517: LD_INT 1
1519: PPUSH
1520: CALL_OW 235
// end ; end_of_file
1524: LD_VAR 0 1
1528: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1529: LD_INT 0
1531: PPUSH
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side := 3 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 3
1544: ST_TO_ADDR
// uc_nation := 3 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1553: LD_ADDR_EXP 15
1557: PUSH
1558: LD_INT 8
1560: PUSH
1561: LD_INT 11
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: LD_INT 17
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_OWVAR 67
1580: ARRAY
1581: ST_TO_ADDR
// ruMobile := [ ] ;
1582: LD_ADDR_EXP 16
1586: PUSH
1587: EMPTY
1588: ST_TO_ADDR
// ruBuildList := [ ] ;
1589: LD_ADDR_EXP 17
1593: PUSH
1594: EMPTY
1595: ST_TO_ADDR
// ruAttackers := [ ] ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: EMPTY
1602: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1603: LD_ADDR_EXP 19
1607: PUSH
1608: LD_INT 3
1610: PPUSH
1611: LD_INT 3
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: CALL 33206 0 3
1621: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1622: LD_ADDR_VAR 0 6
1626: PUSH
1627: LD_INT 43
1629: PUSH
1630: LD_INT 46
1632: PUSH
1633: LD_INT 45
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1641: LD_ADDR_EXP 20
1645: PUSH
1646: LD_INT 46
1648: PUSH
1649: LD_INT 70
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 121
1658: PUSH
1659: LD_INT 95
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 68
1668: PUSH
1669: LD_INT 65
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: ST_TO_ADDR
// if not russianRocketsDisabled then
1681: LD_EXP 6
1685: NOT
1686: IFFALSE 1702
// weapons := weapons ^ ru_rocket ;
1688: LD_ADDR_VAR 0 6
1692: PUSH
1693: LD_VAR 0 6
1697: PUSH
1698: LD_INT 47
1700: ADD
1701: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1702: LD_ADDR_EXP 14
1706: PUSH
1707: LD_STRING Eisenstein
1709: PPUSH
1710: CALL_OW 25
1714: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1715: LD_EXP 14
1719: PPUSH
1720: LD_INT 22
1722: PPUSH
1723: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 2250 , 3500 , 4500 , 5600 ] [ Difficulty ] ) ;
1727: LD_INT 22
1729: PPUSH
1730: CALL_OW 274
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 2250
1740: PUSH
1741: LD_INT 3500
1743: PUSH
1744: LD_INT 4500
1746: PUSH
1747: LD_INT 5600
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_OWVAR 67
1760: ARRAY
1761: PPUSH
1762: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1766: LD_INT 22
1768: PPUSH
1769: CALL_OW 274
1773: PPUSH
1774: LD_INT 2
1776: PPUSH
1777: LD_INT 600
1779: PPUSH
1780: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1784: LD_INT 22
1786: PPUSH
1787: CALL_OW 274
1791: PPUSH
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 100
1797: PPUSH
1798: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1802: LD_INT 116
1804: PPUSH
1805: LD_INT 46
1807: PPUSH
1808: LD_INT 70
1810: PPUSH
1811: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1815: LD_ADDR_VAR 0 2
1819: PUSH
1820: LD_INT 22
1822: PUSH
1823: LD_INT 3
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 21
1832: PUSH
1833: LD_INT 3
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PPUSH
1844: CALL_OW 69
1848: PUSH
1849: FOR_IN
1850: IFFALSE 1872
// SetBLevel ( i , 6 + Difficulty ) ;
1852: LD_VAR 0 2
1856: PPUSH
1857: LD_INT 6
1859: PUSH
1860: LD_OWVAR 67
1864: PLUS
1865: PPUSH
1866: CALL_OW 241
1870: GO 1849
1872: POP
1873: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: LD_INT 22
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 30
1894: PUSH
1895: LD_INT 32
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 30
1904: PUSH
1905: LD_INT 33
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: ST_TO_ADDR
// if russianRocketsDisabled then
1926: LD_EXP 6
1930: IFFALSE 2006
// begin ruTechList := ruTechList diff tech_advrocket ;
1932: LD_ADDR_EXP 19
1936: PUSH
1937: LD_EXP 19
1941: PUSH
1942: LD_INT 71
1944: DIFF
1945: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1946: LD_ADDR_VAR 0 2
1950: PUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 35
1958: PUSH
1959: LD_INT 47
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PPUSH
1966: CALL_OW 72
1970: PUSH
1971: FOR_IN
1972: IFFALSE 2004
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_VAR 0 6
1983: PUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_VAR 0 6
1991: PPUSH
1992: CALL_OW 12
1996: ARRAY
1997: PPUSH
1998: CALL_OW 431
2002: GO 1971
2004: POP
2005: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2006: LD_ADDR_VAR 0 2
2010: PUSH
2011: LD_INT 22
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 30
2023: PUSH
2024: LD_INT 32
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PPUSH
2035: CALL_OW 69
2039: PUSH
2040: FOR_IN
2041: IFFALSE 2090
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2043: LD_INT 0
2045: PPUSH
2046: LD_INT 5
2048: PUSH
2049: LD_INT 6
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: LD_INT 8
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: LD_OWVAR 67
2068: ARRAY
2069: PPUSH
2070: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2074: CALL_OW 44
2078: PPUSH
2079: LD_VAR 0 2
2083: PPUSH
2084: CALL_OW 52
// end ;
2088: GO 2040
2090: POP
2091: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2092: LD_ADDR_VAR 0 2
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 3
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 69
2125: PUSH
2126: FOR_IN
2127: IFFALSE 2261
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: DOUBLE
2135: LD_INT 1
2137: DEC
2138: ST_TO_ADDR
2139: LD_INT 2
2141: PUSH
2142: LD_INT 2
2144: PUSH
2145: LD_INT 3
2147: PUSH
2148: LD_INT 3
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: PUSH
2157: LD_OWVAR 67
2161: ARRAY
2162: PUSH
2163: FOR_TO
2164: IFFALSE 2257
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2166: LD_INT 0
2168: PPUSH
2169: LD_INT 5
2171: PUSH
2172: LD_INT 6
2174: PUSH
2175: LD_INT 7
2177: PUSH
2178: LD_INT 8
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_OWVAR 67
2191: ARRAY
2192: PPUSH
2193: CALL_OW 381
// un := CreateHuman ;
2197: LD_ADDR_VAR 0 5
2201: PUSH
2202: CALL_OW 44
2206: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2207: LD_VAR 0 5
2211: PPUSH
2212: LD_VAR 0 2
2216: PPUSH
2217: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_INT 9
2228: PPUSH
2229: CALL_OW 336
// if j = 2 then
2233: LD_VAR 0 3
2237: PUSH
2238: LD_INT 2
2240: EQUAL
2241: IFFALSE 2255
// SetUnitAttackType ( un , 3 ) ;
2243: LD_VAR 0 5
2247: PPUSH
2248: LD_INT 3
2250: PPUSH
2251: CALL_OW 603
// end ;
2255: GO 2163
2257: POP
2258: POP
// end ;
2259: GO 2126
2261: POP
2262: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2263: LD_ADDR_VAR 0 2
2267: PUSH
2268: DOUBLE
2269: LD_INT 1
2271: DEC
2272: ST_TO_ADDR
2273: LD_INT 5
2275: PUSH
2276: LD_INT 6
2278: PUSH
2279: LD_INT 6
2281: PUSH
2282: LD_INT 6
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_OWVAR 67
2295: ARRAY
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2345
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2300: LD_INT 0
2302: PPUSH
2303: LD_INT 6
2305: PUSH
2306: LD_INT 7
2308: PUSH
2309: LD_INT 9
2311: PUSH
2312: LD_INT 10
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: PUSH
2321: LD_OWVAR 67
2325: ARRAY
2326: PPUSH
2327: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2331: CALL_OW 44
2335: PPUSH
2336: LD_INT 22
2338: PPUSH
2339: CALL_OW 52
// end ;
2343: GO 2297
2345: POP
2346: POP
// for i := 1 to 2 do
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: DOUBLE
2353: LD_INT 1
2355: DEC
2356: ST_TO_ADDR
2357: LD_INT 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2441
// for j := 1 to 6 do
2363: LD_ADDR_VAR 0 3
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_INT 6
2375: PUSH
2376: FOR_TO
2377: IFFALSE 2437
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2379: LD_INT 0
2381: PPUSH
2382: LD_INT 6
2384: PUSH
2385: LD_INT 7
2387: PUSH
2388: LD_INT 9
2390: PUSH
2391: LD_INT 10
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: PUSH
2400: LD_OWVAR 67
2404: ARRAY
2405: PPUSH
2406: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2410: CALL_OW 44
2414: PPUSH
2415: LD_INT 1
2417: PUSH
2418: LD_INT 40
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: LD_VAR 0 2
2429: ARRAY
2430: PPUSH
2431: CALL_OW 52
// end ;
2435: GO 2376
2437: POP
2438: POP
2439: GO 2360
2441: POP
2442: POP
// for i := 1 to 4 do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: DOUBLE
2449: LD_INT 1
2451: DEC
2452: ST_TO_ADDR
2453: LD_INT 4
2455: PUSH
2456: FOR_TO
2457: IFFALSE 2504
// begin PrepareScientist ( false , 6 ) ;
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 6
2464: PPUSH
2465: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2469: CALL_OW 44
2473: PPUSH
2474: LD_INT 14
2476: PUSH
2477: LD_INT 15
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 2
2491: MOD
2492: PUSH
2493: LD_INT 1
2495: PLUS
2496: ARRAY
2497: PPUSH
2498: CALL_OW 52
// end ;
2502: GO 2456
2504: POP
2505: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2506: LD_INT 22
2508: PPUSH
2509: LD_INT 3
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: LD_INT 51
2517: PPUSH
2518: LD_INT 100
2520: PPUSH
2521: CALL 38021 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2525: CALL_OW 45
2529: PPUSH
2530: LD_INT 116
2532: PPUSH
2533: LD_INT 58
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: CALL_OW 50
// for i := 1 to 2 do
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: DOUBLE
2552: LD_INT 1
2554: DEC
2555: ST_TO_ADDR
2556: LD_INT 2
2558: PUSH
2559: FOR_TO
2560: IFFALSE 2604
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2562: LD_INT 22
2564: PPUSH
2565: LD_INT 3
2567: PPUSH
2568: LD_INT 3
2570: PPUSH
2571: LD_INT 52
2573: PPUSH
2574: LD_INT 100
2576: PPUSH
2577: CALL 38021 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2581: CALL_OW 45
2585: PPUSH
2586: LD_INT 111
2588: PPUSH
2589: LD_INT 58
2591: PPUSH
2592: LD_INT 4
2594: PPUSH
2595: LD_INT 0
2597: PPUSH
2598: CALL_OW 50
// end ;
2602: GO 2559
2604: POP
2605: POP
// for i := 1 to 4 do
2606: LD_ADDR_VAR 0 2
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_INT 4
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2649
// begin PrepareApemanEngineer ( ) ;
2622: CALL 67216 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2626: CALL_OW 44
2630: PPUSH
2631: LD_INT 118
2633: PPUSH
2634: LD_INT 50
2636: PPUSH
2637: LD_INT 3
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: CALL_OW 50
// end ;
2647: GO 2619
2649: POP
2650: POP
// end ;
2651: LD_VAR 0 1
2655: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2656: LD_EXP 19
2660: IFFALSE 2788
2662: GO 2664
2664: DISABLE
2665: LD_INT 0
2667: PPUSH
2668: PPUSH
2669: PPUSH
// begin enable ;
2670: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: LD_INT 14
2678: PUSH
2679: LD_INT 15
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PPUSH
2686: LD_INT 50
2688: PUSH
2689: EMPTY
2690: LIST
2691: PPUSH
2692: CALL_OW 72
2696: ST_TO_ADDR
// if not labs then
2697: LD_VAR 0 3
2701: NOT
2702: IFFALSE 2707
// begin disable ;
2704: DISABLE
// exit ;
2705: GO 2788
// end ; for i in labs do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_VAR 0 3
2716: PUSH
2717: FOR_IN
2718: IFFALSE 2786
// if BuildingStatus ( i ) = bs_idle then
2720: LD_VAR 0 1
2724: PPUSH
2725: CALL_OW 461
2729: PUSH
2730: LD_INT 2
2732: EQUAL
2733: IFFALSE 2784
// for t in ruTechList do
2735: LD_ADDR_VAR 0 2
2739: PUSH
2740: LD_EXP 19
2744: PUSH
2745: FOR_IN
2746: IFFALSE 2782
// if CanBeResearched ( i , t ) then
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL_OW 430
2762: IFFALSE 2780
// begin ComResearch ( i , t ) ;
2764: LD_VAR 0 1
2768: PPUSH
2769: LD_VAR 0 2
2773: PPUSH
2774: CALL_OW 124
// break ;
2778: GO 2782
// end ;
2780: GO 2745
2782: POP
2783: POP
2784: GO 2717
2786: POP
2787: POP
// end ;
2788: PPOPN 3
2790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2791: LD_INT 3
2793: PUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 1
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: EMPTY
2805: LIST
2806: LIST
2807: PUSH
2808: LD_INT 32
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PPUSH
2822: CALL_OW 69
2826: IFFALSE 2910
2828: GO 2830
2830: DISABLE
2831: LD_INT 0
2833: PPUSH
// begin enable ;
2834: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2835: LD_ADDR_VAR 0 1
2839: PUSH
2840: LD_INT 3
2842: PUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 1
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 32
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PPUSH
2871: CALL_OW 69
2875: PUSH
2876: FOR_IN
2877: IFFALSE 2908
// if GetFuel ( i ) < 3 then
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL_OW 261
2888: PUSH
2889: LD_INT 3
2891: LESS
2892: IFFALSE 2906
// SetFuel ( i , 3 ) ;
2894: LD_VAR 0 1
2898: PPUSH
2899: LD_INT 3
2901: PPUSH
2902: CALL_OW 240
2906: GO 2876
2908: POP
2909: POP
// end ;
2910: PPOPN 1
2912: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ [ f_not , [ f_empty ] ] , [ f_ok ] ] ) and ruAttackers < [ 6 , 8 , 10 , 12 ] [ Difficulty ] do var i , chassis , weapon ;
2913: LD_INT 1
2915: PUSH
2916: LD_INT 40
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PPUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 58
2928: PUSH
2929: EMPTY
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: LD_INT 50
2938: PUSH
2939: EMPTY
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PPUSH
2946: CALL_OW 72
2950: IFFALSE 2983
2952: PUSH
2953: LD_EXP 18
2957: PUSH
2958: LD_INT 6
2960: PUSH
2961: LD_INT 8
2963: PUSH
2964: LD_INT 10
2966: PUSH
2967: LD_INT 12
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: LIST
2974: LIST
2975: PUSH
2976: LD_OWVAR 67
2980: ARRAY
2981: LESS
2982: AND
2983: IFFALSE 3322
2985: GO 2987
2987: DISABLE
2988: LD_INT 0
2990: PPUSH
2991: PPUSH
2992: PPUSH
// begin enable ;
2993: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
2994: LD_ADDR_VAR 0 1
2998: PUSH
2999: LD_INT 1
3001: PUSH
3002: LD_INT 40
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PPUSH
3009: LD_INT 50
3011: PUSH
3012: EMPTY
3013: LIST
3014: PPUSH
3015: CALL_OW 72
3019: PUSH
3020: FOR_IN
3021: IFFALSE 3320
// begin if BuildingStatus ( i ) <> bs_idle then
3023: LD_VAR 0 1
3027: PPUSH
3028: CALL_OW 461
3032: PUSH
3033: LD_INT 2
3035: NONEQUAL
3036: IFFALSE 3040
// continue ;
3038: GO 3020
// if i = ruFac1 then
3040: LD_VAR 0 1
3044: PUSH
3045: LD_INT 1
3047: EQUAL
3048: IFFALSE 3091
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3050: LD_ADDR_VAR 0 2
3054: PUSH
3055: LD_INT 21
3057: PUSH
3058: LD_INT 22
3060: PUSH
3061: LD_INT 23
3063: PUSH
3064: LD_INT 23
3066: PUSH
3067: LD_INT 24
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: PUSH
3077: LD_INT 1
3079: PPUSH
3080: LD_INT 5
3082: PPUSH
3083: CALL_OW 12
3087: ARRAY
3088: ST_TO_ADDR
3089: GO 3118
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3091: LD_ADDR_VAR 0 2
3095: PUSH
3096: LD_INT 21
3098: PUSH
3099: LD_INT 23
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: CALL_OW 12
3116: ARRAY
3117: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3118: LD_ADDR_VAR 0 3
3122: PUSH
3123: LD_INT 49
3125: PUSH
3126: LD_INT 44
3128: PUSH
3129: LD_INT 43
3131: PUSH
3132: LD_INT 46
3134: PUSH
3135: LD_INT 45
3137: PUSH
3138: LD_INT 46
3140: PUSH
3141: LD_INT 45
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: ST_TO_ADDR
// if not russianRocketsDisabled then
3153: LD_EXP 6
3157: NOT
3158: IFFALSE 3178
// weapon := Join ( weapon , ru_rocket ) ;
3160: LD_ADDR_VAR 0 3
3164: PUSH
3165: LD_VAR 0 3
3169: PPUSH
3170: LD_INT 47
3172: PPUSH
3173: CALL 71191 0 2
3177: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , Count ( weapon ) ) ] ;
3178: LD_ADDR_VAR 0 3
3182: PUSH
3183: LD_VAR 0 3
3187: PUSH
3188: LD_INT 1
3190: PPUSH
3191: LD_VAR 0 3
3195: PPUSH
3196: CALL 35259 0 1
3200: PPUSH
3201: CALL_OW 12
3205: ARRAY
3206: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3207: LD_VAR 0 2
3211: PUSH
3212: LD_INT 21
3214: PUSH
3215: LD_INT 22
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: IN
3222: IFFALSE 3241
3224: PUSH
3225: LD_VAR 0 3
3229: PUSH
3230: LD_INT 46
3232: PUSH
3233: LD_INT 47
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: IN
3240: AND
3241: IFFALSE 3274
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3243: LD_ADDR_VAR 0 3
3247: PUSH
3248: LD_INT 44
3250: PUSH
3251: LD_INT 45
3253: PUSH
3254: LD_INT 49
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: PUSH
3262: LD_INT 1
3264: PPUSH
3265: LD_INT 3
3267: PPUSH
3268: CALL_OW 12
3272: ARRAY
3273: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3274: LD_VAR 0 1
3278: PPUSH
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_INT 1
3286: PUSH
3287: LD_INT 3
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: LD_INT 1
3296: PPUSH
3297: LD_INT 2
3299: PPUSH
3300: CALL_OW 12
3304: ARRAY
3305: PPUSH
3306: LD_INT 3
3308: PPUSH
3309: LD_VAR 0 3
3313: PPUSH
3314: CALL_OW 185
// end ;
3318: GO 3020
3320: POP
3321: POP
// end ;
3322: PPOPN 3
3324: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3325: LD_INT 22
3327: PPUSH
3328: CALL_OW 302
3332: IFFALSE 4213
3334: GO 3336
3336: DISABLE
3337: LD_INT 0
3339: PPUSH
3340: PPUSH
3341: PPUSH
3342: PPUSH
3343: PPUSH
3344: PPUSH
3345: PPUSH
3346: PPUSH
// begin enable ;
3347: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3348: LD_ADDR_VAR 0 3
3352: PUSH
3353: LD_INT 12
3355: PPUSH
3356: LD_INT 3
3358: PUSH
3359: LD_INT 24
3361: PUSH
3362: LD_INT 1000
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PUSH
3373: LD_INT 21
3375: PUSH
3376: LD_INT 3
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PPUSH
3387: CALL_OW 70
3391: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3392: LD_ADDR_VAR 0 4
3396: PUSH
3397: LD_INT 22
3399: PUSH
3400: LD_INT 3
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: PUSH
3407: LD_INT 25
3409: PUSH
3410: LD_INT 2
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PUSH
3417: EMPTY
3418: LIST
3419: LIST
3420: PPUSH
3421: CALL_OW 69
3425: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3426: LD_ADDR_VAR 0 5
3430: PUSH
3431: LD_INT 22
3433: PUSH
3434: LD_INT 3
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PUSH
3441: LD_INT 34
3443: PUSH
3444: LD_INT 52
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3460: LD_ADDR_VAR 0 7
3464: PUSH
3465: LD_INT 22
3467: PUSH
3468: LD_INT 3
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 25
3477: PUSH
3478: LD_INT 4
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: PPUSH
3489: CALL_OW 69
3493: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3494: LD_ADDR_VAR 0 8
3498: PUSH
3499: LD_INT 14
3501: PUSH
3502: LD_INT 15
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3509: LD_VAR 0 7
3513: IFFALSE 3536
3515: PUSH
3516: LD_VAR 0 4
3520: PPUSH
3521: LD_INT 120
3523: PUSH
3524: LD_INT 2
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PPUSH
3531: CALL_OW 72
3535: AND
3536: IFFALSE 3549
// ComExitAll ( sci ) else
3538: LD_VAR 0 7
3542: PPUSH
3543: CALL 71672 0 1
3547: GO 3633
// if sci then
3549: LD_VAR 0 7
3553: IFFALSE 3633
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3555: LD_VAR 0 7
3559: PPUSH
3560: LD_INT 3
3562: PUSH
3563: LD_INT 54
3565: PUSH
3566: EMPTY
3567: LIST
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PPUSH
3573: CALL_OW 72
3577: IFFALSE 3585
3579: PUSH
3580: LD_VAR 0 8
3584: AND
3585: IFFALSE 3633
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3587: LD_VAR 0 7
3591: PPUSH
3592: LD_INT 3
3594: PUSH
3595: LD_INT 54
3597: PUSH
3598: EMPTY
3599: LIST
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: PPUSH
3605: CALL_OW 72
3609: PPUSH
3610: LD_VAR 0 8
3614: PUSH
3615: LD_INT 1
3617: PPUSH
3618: LD_VAR 0 8
3622: PPUSH
3623: CALL_OW 12
3627: ARRAY
3628: PPUSH
3629: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3633: LD_VAR 0 5
3637: PPUSH
3638: LD_INT 50
3640: PUSH
3641: EMPTY
3642: LIST
3643: PPUSH
3644: CALL_OW 72
3648: IFFALSE 3656
3650: PUSH
3651: LD_VAR 0 3
3655: AND
3656: IFFALSE 3697
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3658: LD_VAR 0 5
3662: PPUSH
3663: LD_INT 50
3665: PUSH
3666: EMPTY
3667: LIST
3668: PPUSH
3669: CALL_OW 72
3673: PPUSH
3674: LD_VAR 0 3
3678: PPUSH
3679: LD_VAR 0 5
3683: PUSH
3684: LD_INT 1
3686: ARRAY
3687: PPUSH
3688: CALL_OW 74
3692: PPUSH
3693: CALL_OW 130
// if eng then
3697: LD_VAR 0 4
3701: IFFALSE 4213
// begin for i in eng do
3703: LD_ADDR_VAR 0 1
3707: PUSH
3708: LD_VAR 0 4
3712: PUSH
3713: FOR_IN
3714: IFFALSE 4211
// begin tag := GetTag ( i ) ;
3716: LD_ADDR_VAR 0 6
3720: PUSH
3721: LD_VAR 0 1
3725: PPUSH
3726: CALL_OW 110
3730: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3731: LD_VAR 0 3
3735: NOT
3736: IFFALSE 3745
3738: PUSH
3739: LD_EXP 17
3743: NOT
3744: AND
3745: IFFALSE 3757
3747: PUSH
3748: LD_VAR 0 6
3752: PUSH
3753: LD_INT 1
3755: EQUAL
3756: AND
3757: IFFALSE 3783
// begin SetTag ( i , 0 ) ;
3759: LD_VAR 0 1
3763: PPUSH
3764: LD_INT 0
3766: PPUSH
3767: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3771: LD_VAR 0 1
3775: PPUSH
3776: LD_INT 22
3778: PPUSH
3779: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3783: LD_VAR 0 3
3787: IFTRUE 3795
3789: PUSH
3790: LD_EXP 17
3794: OR
3795: IFFALSE 3807
3797: PUSH
3798: LD_VAR 0 6
3802: PUSH
3803: LD_INT 0
3805: EQUAL
3806: AND
3807: IFFALSE 3821
// SetTag ( i , 1 ) ;
3809: LD_VAR 0 1
3813: PPUSH
3814: LD_INT 1
3816: PPUSH
3817: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3821: LD_VAR 0 1
3825: PPUSH
3826: CALL_OW 310
3830: IFFALSE 3842
3832: PUSH
3833: LD_VAR 0 6
3837: PUSH
3838: LD_INT 1
3840: EQUAL
3841: AND
3842: IFFALSE 3853
// ComExit ( i ) ;
3844: LD_VAR 0 1
3848: PPUSH
3849: CALL 71589 0 1
// if GetLives ( i ) < 700 and tag = 1 then
3853: LD_VAR 0 1
3857: PPUSH
3858: CALL_OW 256
3862: PUSH
3863: LD_INT 700
3865: LESS
3866: IFFALSE 3878
3868: PUSH
3869: LD_VAR 0 6
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: AND
3878: IFFALSE 3892
// SetTag ( i , 2 ) ;
3880: LD_VAR 0 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3892: LD_VAR 0 1
3896: PPUSH
3897: CALL_OW 256
3901: PUSH
3902: LD_INT 1000
3904: EQUAL
3905: IFFALSE 3917
3907: PUSH
3908: LD_VAR 0 6
3912: PUSH
3913: LD_INT 2
3915: EQUAL
3916: AND
3917: IFFALSE 3931
// SetTag ( i , 1 ) ;
3919: LD_VAR 0 1
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: CALL_OW 109
// if tag = 2 then
3931: LD_VAR 0 6
3935: PUSH
3936: LD_INT 2
3938: EQUAL
3939: IFFALSE 3986
// begin if GetDistUnitXY ( i , 110 , 41 ) > 6 then
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_INT 110
3948: PPUSH
3949: LD_INT 41
3951: PPUSH
3952: CALL_OW 297
3956: PUSH
3957: LD_INT 6
3959: GREATER
3960: IFFALSE 3986
// begin ComMoveXY ( i , 110 , 41 ) ;
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 110
3969: PPUSH
3970: LD_INT 41
3972: PPUSH
3973: CALL_OW 111
// AddComHold ( i ) ;
3977: LD_VAR 0 1
3981: PPUSH
3982: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
3986: LD_VAR 0 1
3990: PPUSH
3991: LD_INT 11
3993: PPUSH
3994: CALL_OW 308
3998: IFFALSE 4012
// ComMoveToArea ( i , ruBaseArea ) ;
4000: LD_VAR 0 1
4004: PPUSH
4005: LD_INT 12
4007: PPUSH
4008: CALL_OW 113
// if tag = 1 then
4012: LD_VAR 0 6
4016: PUSH
4017: LD_INT 1
4019: EQUAL
4020: IFFALSE 4209
// begin if b then
4022: LD_VAR 0 3
4026: IFFALSE 4054
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
4028: LD_VAR 0 1
4032: PPUSH
4033: LD_VAR 0 3
4037: PPUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 74
4047: PPUSH
4048: CALL_OW 130
4052: GO 4209
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
4054: LD_EXP 17
4058: IFFALSE 4083
4060: PUSH
4061: LD_INT 11
4063: PPUSH
4064: LD_INT 81
4066: PUSH
4067: LD_INT 3
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PPUSH
4074: CALL_OW 70
4078: PUSH
4079: LD_INT 0
4081: EQUAL
4082: AND
4083: IFFALSE 4146
4085: PUSH
4086: LD_INT 22
4088: PPUSH
4089: LD_EXP 17
4093: PUSH
4094: LD_INT 1
4096: ARRAY
4097: PUSH
4098: LD_INT 1
4100: ARRAY
4101: PPUSH
4102: LD_EXP 17
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PUSH
4111: LD_INT 2
4113: ARRAY
4114: PPUSH
4115: LD_EXP 17
4119: PUSH
4120: LD_INT 1
4122: ARRAY
4123: PUSH
4124: LD_INT 3
4126: ARRAY
4127: PPUSH
4128: LD_EXP 17
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PUSH
4137: LD_INT 4
4139: ARRAY
4140: PPUSH
4141: CALL 46699 0 5
4145: AND
4146: IFFALSE 4209
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4148: LD_VAR 0 1
4152: PPUSH
4153: LD_EXP 17
4157: PUSH
4158: LD_INT 1
4160: ARRAY
4161: PUSH
4162: LD_INT 1
4164: ARRAY
4165: PPUSH
4166: LD_EXP 17
4170: PUSH
4171: LD_INT 1
4173: ARRAY
4174: PUSH
4175: LD_INT 2
4177: ARRAY
4178: PPUSH
4179: LD_EXP 17
4183: PUSH
4184: LD_INT 1
4186: ARRAY
4187: PUSH
4188: LD_INT 3
4190: ARRAY
4191: PPUSH
4192: LD_EXP 17
4196: PUSH
4197: LD_INT 1
4199: ARRAY
4200: PUSH
4201: LD_INT 4
4203: ARRAY
4204: PPUSH
4205: CALL_OW 145
// end ; end ;
4209: GO 3713
4211: POP
4212: POP
// end ; end ;
4213: PPOPN 8
4215: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4216: LD_INT 22
4218: PUSH
4219: LD_INT 3
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: LD_INT 3
4228: PUSH
4229: LD_INT 60
4231: PUSH
4232: EMPTY
4233: LIST
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: PUSH
4239: LD_INT 50
4241: PUSH
4242: EMPTY
4243: LIST
4244: PUSH
4245: LD_INT 25
4247: PUSH
4248: LD_INT 16
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: PPUSH
4261: CALL_OW 69
4265: IFFALSE 4276
4267: PUSH
4268: LD_INT 14
4270: PPUSH
4271: CALL_OW 435
4275: AND
4276: IFFALSE 4388
4278: GO 4280
4280: DISABLE
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
// begin enable ;
4285: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4286: LD_ADDR_VAR 0 2
4290: PUSH
4291: LD_INT 14
4293: PPUSH
4294: CALL_OW 435
4298: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4299: LD_ADDR_VAR 0 1
4303: PUSH
4304: LD_INT 22
4306: PUSH
4307: LD_INT 3
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PUSH
4314: LD_INT 3
4316: PUSH
4317: LD_INT 60
4319: PUSH
4320: EMPTY
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 50
4329: PUSH
4330: EMPTY
4331: LIST
4332: PUSH
4333: LD_INT 25
4335: PUSH
4336: LD_INT 16
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: PPUSH
4349: CALL_OW 69
4353: PUSH
4354: FOR_IN
4355: IFFALSE 4386
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4357: LD_VAR 0 1
4361: PPUSH
4362: LD_VAR 0 2
4366: PUSH
4367: LD_INT 1
4369: ARRAY
4370: PPUSH
4371: LD_VAR 0 2
4375: PUSH
4376: LD_INT 2
4378: ARRAY
4379: PPUSH
4380: CALL_OW 117
4384: GO 4354
4386: POP
4387: POP
// end ;
4388: PPOPN 2
4390: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4391: LD_INT 22
4393: PUSH
4394: LD_INT 3
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: LD_INT 3
4403: PUSH
4404: LD_INT 60
4406: PUSH
4407: EMPTY
4408: LIST
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: PUSH
4414: LD_INT 50
4416: PUSH
4417: EMPTY
4418: LIST
4419: PUSH
4420: LD_INT 34
4422: PUSH
4423: LD_INT 51
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: PPUSH
4436: CALL_OW 69
4440: IFFALSE 4451
4442: PUSH
4443: LD_INT 13
4445: PPUSH
4446: CALL_OW 435
4450: AND
4451: IFFALSE 4563
4453: GO 4455
4455: DISABLE
4456: LD_INT 0
4458: PPUSH
4459: PPUSH
// begin enable ;
4460: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: LD_INT 13
4468: PPUSH
4469: CALL_OW 435
4473: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4474: LD_ADDR_VAR 0 1
4478: PUSH
4479: LD_INT 22
4481: PUSH
4482: LD_INT 3
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: PUSH
4489: LD_INT 3
4491: PUSH
4492: LD_INT 60
4494: PUSH
4495: EMPTY
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 50
4504: PUSH
4505: EMPTY
4506: LIST
4507: PUSH
4508: LD_INT 34
4510: PUSH
4511: LD_INT 51
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: PPUSH
4524: CALL_OW 69
4528: PUSH
4529: FOR_IN
4530: IFFALSE 4561
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4532: LD_VAR 0 1
4536: PPUSH
4537: LD_VAR 0 2
4541: PUSH
4542: LD_INT 1
4544: ARRAY
4545: PPUSH
4546: LD_VAR 0 2
4550: PUSH
4551: LD_INT 2
4553: ARRAY
4554: PPUSH
4555: CALL_OW 117
4559: GO 4529
4561: POP
4562: POP
// end ;
4563: PPOPN 2
4565: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4566: LD_OWVAR 67
4570: PUSH
4571: LD_INT 1
4573: GREATER
4574: IFFALSE 4585
4576: PUSH
4577: LD_INT 1
4579: PPUSH
4580: CALL_OW 302
4584: AND
4585: IFFALSE 4745
4587: GO 4589
4589: DISABLE
4590: LD_INT 0
4592: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4593: LD_ADDR_VAR 0 1
4597: PUSH
4598: DOUBLE
4599: LD_INT 1
4601: DEC
4602: ST_TO_ADDR
4603: LD_INT 3
4605: PUSH
4606: LD_INT 4
4608: PUSH
4609: LD_INT 5
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: PUSH
4617: LD_OWVAR 67
4621: PUSH
4622: LD_INT 1
4624: MINUS
4625: ARRAY
4626: PUSH
4627: FOR_TO
4628: IFFALSE 4672
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4630: LD_INT 1
4632: PUSH
4633: LD_INT 40
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: LD_VAR 0 1
4644: PUSH
4645: LD_INT 2
4647: MOD
4648: PUSH
4649: LD_INT 1
4651: PLUS
4652: ARRAY
4653: PPUSH
4654: LD_INT 21
4656: PPUSH
4657: LD_INT 3
4659: PPUSH
4660: LD_INT 1
4662: PPUSH
4663: LD_INT 45
4665: PPUSH
4666: CALL_OW 185
// end ;
4670: GO 4627
4672: POP
4673: POP
// repeat wait ( 6 6$00 ) ;
4674: LD_INT 12600
4676: PPUSH
4677: CALL_OW 67
// for i := 1 to 2 do
4681: LD_ADDR_VAR 0 1
4685: PUSH
4686: DOUBLE
4687: LD_INT 1
4689: DEC
4690: ST_TO_ADDR
4691: LD_INT 2
4693: PUSH
4694: FOR_TO
4695: IFFALSE 4718
// AddComConstruct ( ruFac1 , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4697: LD_INT 1
4699: PPUSH
4700: LD_INT 21
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: LD_INT 1
4708: PPUSH
4709: LD_INT 45
4711: PPUSH
4712: CALL_OW 185
4716: GO 4694
4718: POP
4719: POP
// until not IsOk ( ruFac1 ) or UnitsInside ( ruFac1 ) = 0 ;
4720: LD_INT 1
4722: PPUSH
4723: CALL_OW 302
4727: NOT
4728: IFTRUE 4743
4730: PUSH
4731: LD_INT 1
4733: PPUSH
4734: CALL_OW 313
4738: PUSH
4739: LD_INT 0
4741: EQUAL
4742: OR
4743: IFFALSE 4674
// end ;
4745: PPOPN 1
4747: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4748: LD_EXP 16
4752: IFFALSE 5342
4754: GO 4756
4756: DISABLE
4757: LD_INT 0
4759: PPUSH
4760: PPUSH
4761: PPUSH
// begin enable ;
4762: ENABLE
// if not ruMobile then
4763: LD_EXP 16
4767: NOT
4768: IFFALSE 4772
// exit ;
4770: GO 5342
// for i in ruMobile do
4772: LD_ADDR_VAR 0 1
4776: PUSH
4777: LD_EXP 16
4781: PUSH
4782: FOR_IN
4783: IFFALSE 5340
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4785: LD_VAR 0 1
4789: PPUSH
4790: CALL_OW 302
4794: NOT
4795: IFTRUE 4812
4797: PUSH
4798: LD_VAR 0 1
4802: PPUSH
4803: CALL_OW 255
4807: PUSH
4808: LD_INT 3
4810: NONEQUAL
4811: OR
4812: IFFALSE 4832
// begin ruMobile := ruMobile diff i ;
4814: LD_ADDR_EXP 16
4818: PUSH
4819: LD_EXP 16
4823: PUSH
4824: LD_VAR 0 1
4828: DIFF
4829: ST_TO_ADDR
// continue ;
4830: GO 4782
// end ; if GetTag ( i ) = 300 then
4832: LD_VAR 0 1
4836: PPUSH
4837: CALL_OW 110
4841: PUSH
4842: LD_INT 300
4844: EQUAL
4845: IFFALSE 4977
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4847: LD_VAR 0 1
4851: PPUSH
4852: CALL_OW 261
4856: PUSH
4857: LD_INT 50
4859: LESS
4860: IFFALSE 4877
4862: PUSH
4863: LD_VAR 0 1
4867: PPUSH
4868: CALL_OW 262
4872: PUSH
4873: LD_INT 1
4875: EQUAL
4876: AND
4877: IFFALSE 4936
// begin ComMoveXY ( i , 120 , 58 ) ;
4879: LD_VAR 0 1
4883: PPUSH
4884: LD_INT 120
4886: PPUSH
4887: LD_INT 58
4889: PPUSH
4890: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4894: LD_INT 35
4896: PPUSH
4897: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4901: LD_VAR 0 1
4905: PPUSH
4906: LD_INT 120
4908: PPUSH
4909: LD_INT 58
4911: PPUSH
4912: CALL_OW 297
4916: PUSH
4917: LD_INT 4
4919: LESS
4920: IFFALSE 4894
// SetFuel ( i , 100 ) ;
4922: LD_VAR 0 1
4926: PPUSH
4927: LD_INT 100
4929: PPUSH
4930: CALL_OW 240
// end else
4934: GO 4977
// if not IsInArea ( i , ruParkingArea ) then
4936: LD_VAR 0 1
4940: PPUSH
4941: LD_INT 10
4943: PPUSH
4944: CALL_OW 308
4948: NOT
4949: IFFALSE 4965
// ComMoveToArea ( i , ruParkingArea ) else
4951: LD_VAR 0 1
4955: PPUSH
4956: LD_INT 10
4958: PPUSH
4959: CALL_OW 113
4963: GO 4977
// SetTag ( i , 301 ) ;
4965: LD_VAR 0 1
4969: PPUSH
4970: LD_INT 301
4972: PPUSH
4973: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4977: LD_VAR 0 1
4981: PPUSH
4982: CALL_OW 110
4986: PUSH
4987: LD_INT 301
4989: EQUAL
4990: IFFALSE 5120
// begin if GetLives ( i ) < 1000 then
4992: LD_VAR 0 1
4996: PPUSH
4997: CALL_OW 256
5001: PUSH
5002: LD_INT 1000
5004: LESS
5005: IFFALSE 5097
// begin if not IsDrivenBy ( i ) then
5007: LD_VAR 0 1
5011: PPUSH
5012: CALL_OW 311
5016: NOT
5017: IFFALSE 5021
// continue ;
5019: GO 4782
// mech := IsDrivenBy ( i ) ;
5021: LD_ADDR_VAR 0 2
5025: PUSH
5026: LD_VAR 0 1
5030: PPUSH
5031: CALL_OW 311
5035: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
5036: LD_VAR 0 2
5040: PPUSH
5041: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
5045: LD_VAR 0 2
5049: PPUSH
5050: LD_VAR 0 1
5054: PPUSH
5055: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5059: LD_INT 35
5061: PPUSH
5062: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5066: LD_VAR 0 1
5070: PPUSH
5071: CALL_OW 256
5075: PUSH
5076: LD_INT 1000
5078: EQUAL
5079: IFFALSE 5059
// ComEnterUnit ( mech , i ) ;
5081: LD_VAR 0 2
5085: PPUSH
5086: LD_VAR 0 1
5090: PPUSH
5091: CALL_OW 120
// end else
5095: GO 5120
// if IsDrivenBy ( i ) then
5097: LD_VAR 0 1
5101: PPUSH
5102: CALL_OW 311
5106: IFFALSE 5120
// SetTag ( i , 0 ) ;
5108: LD_VAR 0 1
5112: PPUSH
5113: LD_INT 0
5115: PPUSH
5116: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
5120: LD_VAR 0 1
5124: PPUSH
5125: CALL_OW 110
5129: PUSH
5130: LD_INT 300
5132: LESS
5133: IFFALSE 5338
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
5135: LD_ADDR_VAR 0 3
5139: PUSH
5140: LD_INT 11
5142: PPUSH
5143: LD_INT 81
5145: PUSH
5146: LD_INT 3
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PPUSH
5153: CALL_OW 70
5157: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL_OW 256
5167: PUSH
5168: LD_INT 650
5170: LESS
5171: IFFALSE 5196
// begin ComStop ( i ) ;
5173: LD_VAR 0 1
5177: PPUSH
5178: CALL_OW 141
// SetTag ( i , 300 ) ;
5182: LD_VAR 0 1
5186: PPUSH
5187: LD_INT 300
5189: PPUSH
5190: CALL_OW 109
// continue ;
5194: GO 4782
// end ; if enemy then
5196: LD_VAR 0 3
5200: IFFALSE 5240
// begin if not HasTask ( i ) then
5202: LD_VAR 0 1
5206: PPUSH
5207: CALL_OW 314
5211: NOT
5212: IFFALSE 5238
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5214: LD_VAR 0 1
5218: PPUSH
5219: LD_VAR 0 3
5223: PPUSH
5224: LD_VAR 0 1
5228: PPUSH
5229: CALL_OW 74
5233: PPUSH
5234: CALL_OW 115
// end else
5238: GO 5338
// if ruMobile then
5240: LD_EXP 16
5244: IFFALSE 5338
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5246: LD_ADDR_VAR 0 3
5250: PUSH
5251: LD_INT 81
5253: PUSH
5254: LD_INT 3
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PPUSH
5261: CALL_OW 69
5265: ST_TO_ADDR
// if enemy then
5266: LD_VAR 0 3
5270: IFFALSE 5338
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5272: LD_VAR 0 1
5276: PPUSH
5277: LD_INT 113
5279: PUSH
5280: LD_INT 80
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: LD_INT 118
5289: PUSH
5290: LD_INT 100
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 107
5299: PUSH
5300: LD_INT 102
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PUSH
5307: LD_INT 114
5309: PUSH
5310: LD_INT 120
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: PUSH
5317: LD_INT 86
5319: PUSH
5320: LD_INT 116
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: PPUSH
5334: CALL 73957 0 2
// end ; end ; end ;
5338: GO 4782
5340: POP
5341: POP
// end ;
5342: PPOPN 3
5344: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5345: LD_EXP 18
5349: IFFALSE 5395
5351: GO 5353
5353: DISABLE
5354: LD_INT 0
5356: PPUSH
// begin enable ;
5357: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5358: LD_ADDR_VAR 0 1
5362: PUSH
5363: LD_EXP 18
5367: PPUSH
5368: LD_INT 50
5370: PUSH
5371: EMPTY
5372: LIST
5373: PPUSH
5374: CALL_OW 72
5378: ST_TO_ADDR
// ruAttackers := [ ] ;
5379: LD_ADDR_EXP 18
5383: PUSH
5384: EMPTY
5385: ST_TO_ADDR
// SendAttack ( tmp ) ;
5386: LD_VAR 0 1
5390: PPUSH
5391: CALL 5398 0 1
// end ;
5395: PPOPN 1
5397: END
// function SendAttack ( group ) ; var i , tmp ; begin
5398: LD_INT 0
5400: PPUSH
5401: PPUSH
5402: PPUSH
// for i in group do
5403: LD_ADDR_VAR 0 3
5407: PUSH
5408: LD_VAR 0 1
5412: PUSH
5413: FOR_IN
5414: IFFALSE 5480
// begin SetTag ( i , 0 ) ;
5416: LD_VAR 0 3
5420: PPUSH
5421: LD_INT 0
5423: PPUSH
5424: CALL_OW 109
// if Prob ( 30 ) then
5428: LD_INT 30
5430: PPUSH
5431: CALL_OW 13
5435: IFFALSE 5463
// begin SetTag ( i , 1 ) ;
5437: LD_VAR 0 3
5441: PPUSH
5442: LD_INT 1
5444: PPUSH
5445: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5449: LD_VAR 0 3
5453: PPUSH
5454: LD_INT 116
5456: PPUSH
5457: CALL_OW 120
// end else
5461: GO 5478
// ComAgressiveMove ( i , 118 , 93 ) ;
5463: LD_VAR 0 3
5467: PPUSH
5468: LD_INT 118
5470: PPUSH
5471: LD_INT 93
5473: PPUSH
5474: CALL_OW 114
// end ;
5478: GO 5413
5480: POP
5481: POP
// repeat wait ( 0 0$1 ) ;
5482: LD_INT 35
5484: PPUSH
5485: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5489: LD_ADDR_VAR 0 4
5493: PUSH
5494: LD_VAR 0 1
5498: PPUSH
5499: LD_INT 120
5501: PUSH
5502: LD_INT 0
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PPUSH
5509: CALL_OW 72
5513: ST_TO_ADDR
// for i in tmp do
5514: LD_ADDR_VAR 0 3
5518: PUSH
5519: LD_VAR 0 4
5523: PUSH
5524: FOR_IN
5525: IFFALSE 5672
// begin if not IsOk ( i ) then
5527: LD_VAR 0 3
5531: PPUSH
5532: CALL_OW 302
5536: NOT
5537: IFFALSE 5557
// begin tmp := tmp diff i ;
5539: LD_ADDR_VAR 0 4
5543: PUSH
5544: LD_VAR 0 4
5548: PUSH
5549: LD_VAR 0 3
5553: DIFF
5554: ST_TO_ADDR
// continue ;
5555: GO 5524
// end ; if GetDistUnits ( i , usDep ) < 8 then
5557: LD_VAR 0 3
5561: PPUSH
5562: LD_INT 48
5564: PPUSH
5565: CALL_OW 296
5569: PUSH
5570: LD_INT 8
5572: LESS
5573: IFFALSE 5589
// begin ComAttackUnit ( i , usDep ) ;
5575: LD_VAR 0 3
5579: PPUSH
5580: LD_INT 48
5582: PPUSH
5583: CALL_OW 115
// continue ;
5587: GO 5524
// end ; if not See ( 1 , i ) then
5589: LD_INT 1
5591: PPUSH
5592: LD_VAR 0 3
5596: PPUSH
5597: CALL_OW 292
5601: NOT
5602: IFFALSE 5621
// ComAgressiveMove ( i , 86 , 116 ) else
5604: LD_VAR 0 3
5608: PPUSH
5609: LD_INT 86
5611: PPUSH
5612: LD_INT 116
5614: PPUSH
5615: CALL_OW 114
5619: GO 5670
// if GetWeapon ( i ) <> ru_time_lapser then
5621: LD_VAR 0 3
5625: PPUSH
5626: CALL_OW 264
5630: PUSH
5631: LD_INT 49
5633: NONEQUAL
5634: IFFALSE 5670
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5636: LD_VAR 0 3
5640: PPUSH
5641: LD_INT 81
5643: PUSH
5644: LD_INT 3
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PPUSH
5651: CALL_OW 69
5655: PPUSH
5656: LD_VAR 0 3
5660: PPUSH
5661: CALL_OW 74
5665: PPUSH
5666: CALL_OW 115
// end ;
5670: GO 5524
5672: POP
5673: POP
// until not tmp ;
5674: LD_VAR 0 4
5678: NOT
5679: IFFALSE 5482
// end ; end_of_file
5681: LD_VAR 0 2
5685: RET
// on UnitDestroyed ( unit ) do var i , tmp ;
5686: LD_INT 0
5688: PPUSH
5689: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5690: LD_VAR 0 1
5694: PPUSH
5695: CALL 27633 0 1
// if unit = JMM then
5699: LD_VAR 0 1
5703: PUSH
5704: LD_EXP 8
5708: EQUAL
5709: IFFALSE 5718
// YouLost ( JMM ) ;
5711: LD_STRING JMM
5713: PPUSH
5714: CALL_OW 104
// if GetSide ( unit ) = 4 then
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 255
5727: PUSH
5728: LD_INT 4
5730: EQUAL
5731: IFFALSE 5790
// begin if unit = Joan then
5733: LD_VAR 0 1
5737: PUSH
5738: LD_EXP 10
5742: EQUAL
5743: IFFALSE 5752
// YouLost ( Joan ) ;
5745: LD_STRING Joan
5747: PPUSH
5748: CALL_OW 104
// if unit = Connie then
5752: LD_VAR 0 1
5756: PUSH
5757: LD_EXP 12
5761: EQUAL
5762: IFFALSE 5771
// YouLost ( Connie ) ;
5764: LD_STRING Connie
5766: PPUSH
5767: CALL_OW 104
// if unit = Lisa then
5771: LD_VAR 0 1
5775: PUSH
5776: LD_EXP 11
5780: EQUAL
5781: IFFALSE 5790
// YouLost ( Lisa ) ;
5783: LD_STRING Lisa
5785: PPUSH
5786: CALL_OW 104
// end ; if unit in ruAttackers then
5790: LD_VAR 0 1
5794: PUSH
5795: LD_EXP 18
5799: IN
5800: IFFALSE 5818
// ruAttackers := ruAttackers diff unit ;
5802: LD_ADDR_EXP 18
5806: PUSH
5807: LD_EXP 18
5811: PUSH
5812: LD_VAR 0 1
5816: DIFF
5817: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5818: LD_VAR 0 1
5822: PPUSH
5823: CALL_OW 264
5827: PUSH
5828: LD_INT 51
5830: EQUAL
5831: IFFALSE 5842
5833: PUSH
5834: LD_INT 40
5836: PPUSH
5837: CALL_OW 302
5841: AND
5842: IFFALSE 5882
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5844: LD_INT 40
5846: PPUSH
5847: LD_INT 21
5849: PPUSH
5850: LD_INT 1
5852: PUSH
5853: LD_INT 3
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 1
5862: PPUSH
5863: LD_INT 2
5865: PPUSH
5866: CALL_OW 12
5870: ARRAY
5871: PPUSH
5872: LD_INT 3
5874: PPUSH
5875: LD_INT 51
5877: PPUSH
5878: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5882: LD_VAR 0 1
5886: PPUSH
5887: CALL_OW 264
5891: PUSH
5892: LD_INT 52
5894: EQUAL
5895: IFFALSE 5906
5897: PUSH
5898: LD_INT 40
5900: PPUSH
5901: CALL_OW 302
5905: AND
5906: IFFALSE 5946
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5908: LD_INT 40
5910: PPUSH
5911: LD_INT 21
5913: PPUSH
5914: LD_INT 1
5916: PUSH
5917: LD_INT 3
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: LD_INT 1
5926: PPUSH
5927: LD_INT 2
5929: PPUSH
5930: CALL_OW 12
5934: ARRAY
5935: PPUSH
5936: LD_INT 3
5938: PPUSH
5939: LD_INT 52
5941: PPUSH
5942: CALL_OW 185
// if unit in ruMobile then
5946: LD_VAR 0 1
5950: PUSH
5951: LD_EXP 16
5955: IN
5956: IFFALSE 5974
// ruMobile := ruMobile diff i ;
5958: LD_ADDR_EXP 16
5962: PUSH
5963: LD_EXP 16
5967: PUSH
5968: LD_VAR 0 2
5972: DIFF
5973: ST_TO_ADDR
// if unit = ruCommander then
5974: LD_VAR 0 1
5978: PUSH
5979: LD_EXP 14
5983: EQUAL
5984: IFFALSE 6147
// begin repeat wait ( 0 0$2 ) ;
5986: LD_INT 70
5988: PPUSH
5989: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
5993: LD_ADDR_VAR 0 3
5997: PUSH
5998: LD_INT 22
6000: PUSH
6001: LD_INT 3
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: LD_INT 23
6010: PUSH
6011: LD_INT 3
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PUSH
6018: LD_INT 50
6020: PUSH
6021: EMPTY
6022: LIST
6023: PUSH
6024: LD_INT 21
6026: PUSH
6027: LD_INT 1
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 69
6044: ST_TO_ADDR
// if tmp then
6045: LD_VAR 0 3
6049: IFFALSE 6140
// for i in tmp do
6051: LD_ADDR_VAR 0 2
6055: PUSH
6056: LD_VAR 0 3
6060: PUSH
6061: FOR_IN
6062: IFFALSE 6138
// begin if IsInUnit ( i ) then
6064: LD_VAR 0 2
6068: PPUSH
6069: CALL_OW 310
6073: IFFALSE 6084
// ComExit ( i ) ;
6075: LD_VAR 0 2
6079: PPUSH
6080: CALL 71589 0 1
// wait ( 3 ) ;
6084: LD_INT 3
6086: PPUSH
6087: CALL_OW 67
// ComMoveXY ( i , 147 , 18 ) ;
6091: LD_VAR 0 2
6095: PPUSH
6096: LD_INT 147
6098: PPUSH
6099: LD_INT 18
6101: PPUSH
6102: CALL_OW 111
// if GetDistUnitXY ( i , 147 , 18 ) < 3 then
6106: LD_VAR 0 2
6110: PPUSH
6111: LD_INT 147
6113: PPUSH
6114: LD_INT 18
6116: PPUSH
6117: CALL_OW 297
6121: PUSH
6122: LD_INT 3
6124: LESS
6125: IFFALSE 6136
// RemoveUnit ( i ) ;
6127: LD_VAR 0 2
6131: PPUSH
6132: CALL_OW 64
// end ;
6136: GO 6061
6138: POP
6139: POP
// until not tmp ;
6140: LD_VAR 0 3
6144: NOT
6145: IFFALSE 5986
// end ; end ;
6147: PPOPN 3
6149: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
6150: LD_VAR 0 3
6154: PPUSH
6155: CALL_OW 264
6159: PUSH
6160: LD_INT 10
6162: EQUAL
6163: IFFALSE 6180
// killCounter := Inc ( killCounter ) ;
6165: LD_ADDR_EXP 5
6169: PUSH
6170: LD_EXP 5
6174: PPUSH
6175: CALL 72564 0 1
6179: ST_TO_ADDR
// end ;
6180: PPOPN 3
6182: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
6183: LD_VAR 0 2
6187: PPUSH
6188: CALL_OW 255
6192: PUSH
6193: LD_INT 3
6195: EQUAL
6196: IFFALSE 6210
// SetTag ( unit , 0 ) ;
6198: LD_VAR 0 2
6202: PPUSH
6203: LD_INT 0
6205: PPUSH
6206: CALL_OW 109
// end ;
6210: PPOPN 2
6212: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
6213: LD_VAR 0 2
6217: PPUSH
6218: CALL_OW 255
6222: PUSH
6223: LD_INT 3
6225: EQUAL
6226: IFFALSE 6240
6228: PUSH
6229: LD_VAR 0 1
6233: PUSH
6234: LD_EXP 19
6238: IN
6239: AND
6240: IFFALSE 6258
// ruTechList := ruTechList diff tech ;
6242: LD_ADDR_EXP 19
6246: PUSH
6247: LD_EXP 19
6251: PUSH
6252: LD_VAR 0 1
6256: DIFF
6257: ST_TO_ADDR
// end ;
6258: PPOPN 2
6260: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
6261: LD_INT 0
6263: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
6264: LD_VAR 0 1
6268: PPUSH
6269: LD_VAR 0 2
6273: PPUSH
6274: CALL 27691 0 2
// if GetSide ( vehicle ) <> 3 then
6278: LD_VAR 0 1
6282: PPUSH
6283: CALL_OW 255
6287: PUSH
6288: LD_INT 3
6290: NONEQUAL
6291: IFFALSE 6362
// begin if GetWeapon ( vehicle ) = us_double_laser then
6293: LD_VAR 0 1
6297: PPUSH
6298: CALL_OW 264
6302: PUSH
6303: LD_INT 10
6305: EQUAL
6306: IFFALSE 6360
// begin amLaserCounter := Inc ( amLaserCounter ) ;
6308: LD_ADDR_EXP 7
6312: PUSH
6313: LD_EXP 7
6317: PPUSH
6318: CALL 72564 0 1
6322: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
6323: LD_ADDR_VAR 0 3
6327: PUSH
6328: LD_VAR 0 2
6332: PPUSH
6333: CALL_OW 313
6337: PUSH
6338: FOR_IN
6339: IFFALSE 6358
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
6341: LD_VAR 0 3
6345: PPUSH
6346: LD_INT 3
6348: PPUSH
6349: LD_INT 1000
6351: PPUSH
6352: CALL_OW 591
6356: GO 6338
6358: POP
6359: POP
// end ; exit ;
6360: GO 6456
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6362: LD_VAR 0 1
6366: PPUSH
6367: CALL_OW 264
6371: PUSH
6372: LD_INT 51
6374: PUSH
6375: LD_INT 52
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: IN
6382: IFFALSE 6386
// exit ;
6384: GO 6456
// if GetControl ( vehicle ) = control_computer then
6386: LD_VAR 0 1
6390: PPUSH
6391: CALL_OW 263
6395: PUSH
6396: LD_INT 3
6398: EQUAL
6399: IFFALSE 6421
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6401: LD_ADDR_EXP 18
6405: PUSH
6406: LD_EXP 18
6410: PPUSH
6411: LD_VAR 0 1
6415: PPUSH
6416: CALL 71191 0 2
6420: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6421: LD_VAR 0 1
6425: PPUSH
6426: CALL_OW 263
6430: PUSH
6431: LD_INT 1
6433: EQUAL
6434: IFFALSE 6456
// ruMobile := Join ( ruMobile , vehicle ) ;
6436: LD_ADDR_EXP 16
6440: PUSH
6441: LD_EXP 16
6445: PPUSH
6446: LD_VAR 0 1
6450: PPUSH
6451: CALL 71191 0 2
6455: ST_TO_ADDR
// end ;
6456: PPOPN 3
6458: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 then
6459: LD_VAR 0 1
6463: PPUSH
6464: CALL_OW 255
6468: PUSH
6469: LD_INT 3
6471: EQUAL
6472: IFFALSE 6489
6474: PUSH
6475: LD_VAR 0 1
6479: PPUSH
6480: CALL_OW 257
6484: PUSH
6485: LD_INT 3
6487: EQUAL
6488: AND
6489: IFFALSE 6556
// if GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) and UnitsInside ( ruFac1 ) < 6 then
6491: LD_INT 1
6493: PPUSH
6494: CALL_OW 255
6498: PUSH
6499: LD_INT 3
6501: EQUAL
6502: IFFALSE 6513
6504: PUSH
6505: LD_INT 1
6507: PPUSH
6508: CALL_OW 302
6512: AND
6513: IFFALSE 6528
6515: PUSH
6516: LD_INT 1
6518: PPUSH
6519: CALL_OW 313
6523: PUSH
6524: LD_INT 6
6526: LESS
6527: AND
6528: IFFALSE 6544
// ComEnterUnit ( human , ruFac1 ) else
6530: LD_VAR 0 1
6534: PPUSH
6535: LD_INT 1
6537: PPUSH
6538: CALL_OW 120
6542: GO 6556
// ComEnterUnit ( human , ruFac2 ) ;
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_INT 40
6551: PPUSH
6552: CALL_OW 120
// end ;
6556: PPOPN 4
6558: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6559: LD_VAR 0 1
6563: PPUSH
6564: CALL 27675 0 1
// end ; end_of_file
6568: PPOPN 1
6570: END
// export function Action ; var dec1 , dec2 , veh ; begin
6571: LD_INT 0
6573: PPUSH
6574: PPUSH
6575: PPUSH
6576: PPUSH
// veh := IsInUnit ( JMM ) ;
6577: LD_ADDR_VAR 0 4
6581: PUSH
6582: LD_EXP 8
6586: PPUSH
6587: CALL_OW 310
6591: ST_TO_ADDR
// InGameOn ;
6592: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6596: LD_VAR 0 4
6600: PPUSH
6601: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6605: LD_VAR 0 4
6609: PPUSH
6610: LD_INT 30
6612: PPUSH
6613: LD_INT 11
6615: PPUSH
6616: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6620: LD_VAR 0 4
6624: PPUSH
6625: LD_INT 69
6627: PPUSH
6628: LD_INT 34
6630: PPUSH
6631: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6635: LD_INT 30
6637: PPUSH
6638: LD_INT 11
6640: PPUSH
6641: CALL_OW 84
// wait ( 0 0$3 ) ;
6645: LD_INT 105
6647: PPUSH
6648: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6652: LD_EXP 13
6656: PPUSH
6657: LD_STRING D1-Pow-1
6659: PPUSH
6660: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6664: LD_EXP 8
6668: PPUSH
6669: CALL_OW 121
// AddComHold ( JMM ) ;
6673: LD_EXP 8
6677: PPUSH
6678: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6682: LD_EXP 8
6686: PPUSH
6687: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6691: LD_EXP 8
6695: PPUSH
6696: LD_STRING D1-JMM-1
6698: PPUSH
6699: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6703: LD_EXP 13
6707: PPUSH
6708: LD_STRING D1-Pow-2
6710: PPUSH
6711: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6715: LD_EXP 8
6719: PPUSH
6720: LD_STRING D1-JMM-2
6722: PPUSH
6723: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6727: LD_EXP 8
6731: PPUSH
6732: LD_VAR 0 4
6736: PPUSH
6737: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6741: LD_STRING M1
6743: PPUSH
6744: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6748: LD_INT 16
6750: PPUSH
6751: LD_INT 1
6753: PPUSH
6754: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6758: LD_INT 35
6760: PPUSH
6761: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6765: LD_EXP 8
6769: PPUSH
6770: LD_VAR 0 4
6774: PPUSH
6775: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6779: LD_VAR 0 4
6783: PPUSH
6784: LD_INT 51
6786: PPUSH
6787: LD_INT 21
6789: PPUSH
6790: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6794: LD_VAR 0 4
6798: PPUSH
6799: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6803: LD_VAR 0 4
6807: PPUSH
6808: LD_INT 51
6810: PPUSH
6811: LD_INT 21
6813: PPUSH
6814: CALL_OW 297
6818: PUSH
6819: LD_INT 6
6821: LESS
6822: IFFALSE 6758
// if JMMGirl = 1 then
6824: LD_EXP 2
6828: PUSH
6829: LD_INT 1
6831: EQUAL
6832: IFFALSE 7131
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6834: LD_EXP 10
6838: PPUSH
6839: LD_STRING D2J-Joan-1
6841: PPUSH
6842: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6846: LD_ADDR_VAR 0 2
6850: PUSH
6851: LD_STRING Q1
6853: PPUSH
6854: CALL_OW 97
6858: ST_TO_ADDR
// if dec1 = 1 then
6859: LD_VAR 0 2
6863: PUSH
6864: LD_INT 1
6866: EQUAL
6867: IFFALSE 7122
// begin ComExitVehicle ( JMM ) ;
6869: LD_EXP 8
6873: PPUSH
6874: CALL_OW 121
// AddComHold ( JMM ) ;
6878: LD_EXP 8
6882: PPUSH
6883: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6887: LD_EXP 8
6891: PPUSH
6892: LD_STRING D2J-JMM-1
6894: PPUSH
6895: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6899: LD_EXP 10
6903: PPUSH
6904: LD_STRING D2J-Joan-2
6906: PPUSH
6907: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6911: LD_EXP 8
6915: PPUSH
6916: LD_STRING D2J-JMM-2
6918: PPUSH
6919: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6923: LD_EXP 10
6927: PPUSH
6928: LD_STRING D2J-Joan-3
6930: PPUSH
6931: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6935: LD_EXP 13
6939: PPUSH
6940: LD_STRING DPowell-Pow-1
6942: PPUSH
6943: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6947: LD_ADDR_VAR 0 3
6951: PUSH
6952: LD_STRING Q2J
6954: PPUSH
6955: CALL_OW 97
6959: ST_TO_ADDR
// if dec2 = 1 then
6960: LD_VAR 0 3
6964: PUSH
6965: LD_INT 1
6967: EQUAL
6968: IFFALSE 7010
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6970: LD_EXP 8
6974: PPUSH
6975: LD_STRING D2Ja-JMM-1
6977: PPUSH
6978: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6982: LD_EXP 10
6986: PPUSH
6987: LD_STRING D2Ja-Joan-1
6989: PPUSH
6990: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
6994: LD_EXP 8
6998: PPUSH
6999: LD_STRING D2Ja-JMM-2
7001: PPUSH
7002: CALL_OW 88
// InGameOff ;
7006: CALL_OW 9
// end ; if dec2 = 2 then
7010: LD_VAR 0 3
7014: PUSH
7015: LD_INT 2
7017: EQUAL
7018: IFFALSE 7089
// begin Say ( JMM , D2Jb-JMM-1 ) ;
7020: LD_EXP 8
7024: PPUSH
7025: LD_STRING D2Jb-JMM-1
7027: PPUSH
7028: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
7032: LD_EXP 10
7036: PPUSH
7037: LD_STRING D2Jb-Joan-1
7039: PPUSH
7040: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
7044: LD_EXP 8
7048: PPUSH
7049: LD_STRING D2Jb-JMM-2
7051: PPUSH
7052: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
7056: LD_EXP 10
7060: PPUSH
7061: LD_STRING D2Jb-Joan-2
7063: PPUSH
7064: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
7068: LD_EXP 8
7072: PPUSH
7073: LD_STRING D2Jb-JMM-3
7075: PPUSH
7076: CALL_OW 88
// FinishMission ( true ) ;
7080: LD_INT 1
7082: PPUSH
7083: CALL 9979 0 1
// exit ;
7087: GO 7671
// end ; if dec2 = 3 then
7089: LD_VAR 0 3
7093: PUSH
7094: LD_INT 3
7096: EQUAL
7097: IFFALSE 7120
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
7099: LD_EXP 10
7103: PPUSH
7104: LD_STRING D2Jc-Joan-1
7106: PPUSH
7107: CALL_OW 94
// FinishMission ( true ) ;
7111: LD_INT 1
7113: PPUSH
7114: CALL 9979 0 1
// exit ;
7118: GO 7671
// end ; end else
7120: GO 7131
// begin FinishMission ( true ) ;
7122: LD_INT 1
7124: PPUSH
7125: CALL 9979 0 1
// exit ;
7129: GO 7671
// end ; end ; if JMMGirl = 2 then
7131: LD_EXP 2
7135: PUSH
7136: LD_INT 2
7138: EQUAL
7139: IFFALSE 7450
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
7141: LD_EXP 11
7145: PPUSH
7146: LD_STRING D2L-Lisa-1
7148: PPUSH
7149: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7153: LD_ADDR_VAR 0 2
7157: PUSH
7158: LD_STRING Q1
7160: PPUSH
7161: CALL_OW 97
7165: ST_TO_ADDR
// if dec1 = 1 then
7166: LD_VAR 0 2
7170: PUSH
7171: LD_INT 1
7173: EQUAL
7174: IFFALSE 7441
// begin ComExitVehicle ( JMM ) ;
7176: LD_EXP 8
7180: PPUSH
7181: CALL_OW 121
// AddComHold ( JMM ) ;
7185: LD_EXP 8
7189: PPUSH
7190: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
7194: LD_EXP 8
7198: PPUSH
7199: LD_STRING D2L-JMM-1
7201: PPUSH
7202: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
7206: LD_EXP 11
7210: PPUSH
7211: LD_STRING D2L-Lisa-2
7213: PPUSH
7214: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
7218: LD_EXP 8
7222: PPUSH
7223: LD_STRING D2L-JMM-2
7225: PPUSH
7226: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
7230: LD_EXP 11
7234: PPUSH
7235: LD_STRING DL-Lisa-3
7237: PPUSH
7238: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7242: LD_EXP 13
7246: PPUSH
7247: LD_STRING DPowell-Pow-1
7249: PPUSH
7250: CALL_OW 94
// dec2 := Query ( Q2L ) ;
7254: LD_ADDR_VAR 0 3
7258: PUSH
7259: LD_STRING Q2L
7261: PPUSH
7262: CALL_OW 97
7266: ST_TO_ADDR
// if dec2 = 1 then
7267: LD_VAR 0 3
7271: PUSH
7272: LD_INT 1
7274: EQUAL
7275: IFFALSE 7341
// begin Say ( JMM , D2La-JMM-1 ) ;
7277: LD_EXP 8
7281: PPUSH
7282: LD_STRING D2La-JMM-1
7284: PPUSH
7285: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
7289: LD_EXP 11
7293: PPUSH
7294: LD_STRING D2La-Lisa-1
7296: PPUSH
7297: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
7301: LD_EXP 8
7305: PPUSH
7306: LD_STRING D2La-JMM-2
7308: PPUSH
7309: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
7313: LD_EXP 11
7317: PPUSH
7318: LD_STRING D2La-Lisa-2
7320: PPUSH
7321: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
7325: LD_EXP 8
7329: PPUSH
7330: LD_STRING D2La-JMM-3
7332: PPUSH
7333: CALL_OW 88
// InGameOff ;
7337: CALL_OW 9
// end ; if dec2 = 2 then
7341: LD_VAR 0 3
7345: PUSH
7346: LD_INT 2
7348: EQUAL
7349: IFFALSE 7408
// begin Say ( JMM , D2Lb-JMM-1 ) ;
7351: LD_EXP 8
7355: PPUSH
7356: LD_STRING D2Lb-JMM-1
7358: PPUSH
7359: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
7363: LD_EXP 11
7367: PPUSH
7368: LD_STRING D2Lb-Lisa-1
7370: PPUSH
7371: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
7375: LD_EXP 8
7379: PPUSH
7380: LD_STRING D2Lb-JMM-2
7382: PPUSH
7383: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7387: LD_EXP 11
7391: PPUSH
7392: LD_STRING D2Lb-Lisa-2
7394: PPUSH
7395: CALL_OW 94
// FinishMission ( true ) ;
7399: LD_INT 1
7401: PPUSH
7402: CALL 9979 0 1
// exit ;
7406: GO 7671
// end ; if dec2 = 3 then
7408: LD_VAR 0 3
7412: PUSH
7413: LD_INT 3
7415: EQUAL
7416: IFFALSE 7439
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7418: LD_EXP 11
7422: PPUSH
7423: LD_STRING D2Lc-Lisa-1
7425: PPUSH
7426: CALL_OW 94
// FinishMission ( true ) ;
7430: LD_INT 1
7432: PPUSH
7433: CALL 9979 0 1
// exit ;
7437: GO 7671
// end ; end else
7439: GO 7450
// begin FinishMission ( true ) ;
7441: LD_INT 1
7443: PPUSH
7444: CALL 9979 0 1
// exit ;
7448: GO 7671
// end ; end ; if JMMGirl = 3 then
7450: LD_EXP 2
7454: PUSH
7455: LD_INT 3
7457: EQUAL
7458: IFFALSE 7671
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7460: LD_EXP 12
7464: PPUSH
7465: LD_STRING D2X-Con-1
7467: PPUSH
7468: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7472: LD_ADDR_VAR 0 2
7476: PUSH
7477: LD_STRING Q1
7479: PPUSH
7480: CALL_OW 97
7484: ST_TO_ADDR
// if dec1 = 1 then
7485: LD_VAR 0 2
7489: PUSH
7490: LD_INT 1
7492: EQUAL
7493: IFFALSE 7664
// begin ComExitVehicle ( JMM ) ;
7495: LD_EXP 8
7499: PPUSH
7500: CALL_OW 121
// AddComHold ( JMM ) ;
7504: LD_EXP 8
7508: PPUSH
7509: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7513: LD_EXP 8
7517: PPUSH
7518: LD_STRING D2X-JMM-1
7520: PPUSH
7521: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7525: LD_EXP 12
7529: PPUSH
7530: LD_STRING D2X-Con-2
7532: PPUSH
7533: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7537: LD_EXP 13
7541: PPUSH
7542: LD_STRING DPowell-Pow-1
7544: PPUSH
7545: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7549: LD_ADDR_VAR 0 3
7553: PUSH
7554: LD_STRING Q2X
7556: PPUSH
7557: CALL_OW 97
7561: ST_TO_ADDR
// if dec2 = 1 then
7562: LD_VAR 0 3
7566: PUSH
7567: LD_INT 1
7569: EQUAL
7570: IFFALSE 7588
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7572: LD_EXP 8
7576: PPUSH
7577: LD_STRING D2Xa-JMM-1
7579: PPUSH
7580: CALL_OW 88
// InGameOff ;
7584: CALL_OW 9
// end ; if dec2 = 2 then
7588: LD_VAR 0 3
7592: PUSH
7593: LD_INT 2
7595: EQUAL
7596: IFFALSE 7631
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7598: LD_EXP 8
7602: PPUSH
7603: LD_STRING D2Xb-JMM-1
7605: PPUSH
7606: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7610: LD_EXP 12
7614: PPUSH
7615: LD_STRING D2Xb-Con-1
7617: PPUSH
7618: CALL_OW 94
// FinishMission ( true ) ;
7622: LD_INT 1
7624: PPUSH
7625: CALL 9979 0 1
// exit ;
7629: GO 7671
// end ; if dec2 = 3 then
7631: LD_VAR 0 3
7635: PUSH
7636: LD_INT 3
7638: EQUAL
7639: IFFALSE 7662
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7641: LD_EXP 12
7645: PPUSH
7646: LD_STRING D2Xc-Con-1
7648: PPUSH
7649: CALL_OW 94
// FinishMission ( true ) ;
7653: LD_INT 1
7655: PPUSH
7656: CALL 9979 0 1
// exit ;
7660: GO 7671
// end ; end else
7662: GO 7671
// begin FinishMission ( true ) ;
7664: LD_INT 1
7666: PPUSH
7667: CALL 9979 0 1
// end ; end ; end ;
7671: LD_VAR 0 1
7675: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7676: LD_EXP 8
7680: PPUSH
7681: LD_INT 15
7683: PPUSH
7684: CALL_OW 308
7688: IFFALSE 8936
7690: GO 7692
7692: DISABLE
7693: LD_INT 0
7695: PPUSH
// begin if tick < 5 5$00 then
7696: LD_OWVAR 1
7700: PUSH
7701: LD_INT 10500
7703: LESS
7704: IFFALSE 7956
// begin uc_side := 6 ;
7706: LD_ADDR_OWVAR 20
7710: PUSH
7711: LD_INT 6
7713: ST_TO_ADDR
// uc_nation := 3 ;
7714: LD_ADDR_OWVAR 21
7718: PUSH
7719: LD_INT 3
7721: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7722: LD_INT 1
7724: PPUSH
7725: LD_INT 105
7727: PPUSH
7728: LD_INT 97
7730: PPUSH
7731: CALL_OW 293
7735: NOT
7736: IFFALSE 7800
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7738: LD_INT 22
7740: PPUSH
7741: LD_INT 1
7743: PPUSH
7744: LD_INT 3
7746: PPUSH
7747: LD_INT 44
7749: PPUSH
7750: LD_INT 40
7752: PPUSH
7753: CALL 38021 0 5
// veh := CreateVehicle ;
7757: LD_ADDR_VAR 0 1
7761: PUSH
7762: CALL_OW 45
7766: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7767: LD_VAR 0 1
7771: PPUSH
7772: LD_INT 200
7774: PPUSH
7775: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7779: LD_VAR 0 1
7783: PPUSH
7784: LD_INT 105
7786: PPUSH
7787: LD_INT 97
7789: PPUSH
7790: LD_INT 3
7792: PPUSH
7793: LD_INT 0
7795: PPUSH
7796: CALL 73351 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7800: LD_INT 1
7802: PPUSH
7803: LD_INT 116
7805: PPUSH
7806: LD_INT 120
7808: PPUSH
7809: CALL_OW 293
7813: NOT
7814: IFFALSE 7878
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7816: LD_INT 22
7818: PPUSH
7819: LD_INT 1
7821: PPUSH
7822: LD_INT 3
7824: PPUSH
7825: LD_INT 45
7827: PPUSH
7828: LD_INT 40
7830: PPUSH
7831: CALL 38021 0 5
// veh := CreateVehicle ;
7835: LD_ADDR_VAR 0 1
7839: PUSH
7840: CALL_OW 45
7844: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7845: LD_VAR 0 1
7849: PPUSH
7850: LD_INT 200
7852: PPUSH
7853: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7857: LD_VAR 0 1
7861: PPUSH
7862: LD_INT 116
7864: PPUSH
7865: LD_INT 120
7867: PPUSH
7868: LD_INT 4
7870: PPUSH
7871: LD_INT 0
7873: PPUSH
7874: CALL 73351 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7878: LD_INT 1
7880: PPUSH
7881: LD_INT 116
7883: PPUSH
7884: LD_INT 120
7886: PPUSH
7887: CALL_OW 293
7891: NOT
7892: IFFALSE 7956
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7894: LD_INT 24
7896: PPUSH
7897: LD_INT 1
7899: PPUSH
7900: LD_INT 3
7902: PPUSH
7903: LD_INT 45
7905: PPUSH
7906: LD_INT 30
7908: PPUSH
7909: CALL 38021 0 5
// veh := CreateVehicle ;
7913: LD_ADDR_VAR 0 1
7917: PUSH
7918: CALL_OW 45
7922: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7923: LD_VAR 0 1
7927: PPUSH
7928: LD_INT 200
7930: PPUSH
7931: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7935: LD_VAR 0 1
7939: PPUSH
7940: LD_INT 116
7942: PPUSH
7943: LD_INT 120
7945: PPUSH
7946: LD_INT 4
7948: PPUSH
7949: LD_INT 0
7951: PPUSH
7952: CALL 73351 0 5
// end ; end ; InGameOn ;
7956: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7960: LD_INT 35
7962: PPUSH
7963: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7967: LD_EXP 8
7971: PPUSH
7972: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7976: LD_EXP 8
7980: PPUSH
7981: LD_INT 81
7983: PPUSH
7984: LD_INT 109
7986: PPUSH
7987: CALL_OW 111
// AddComHold ( JMM ) ;
7991: LD_EXP 8
7995: PPUSH
7996: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
8000: LD_EXP 10
8004: PUSH
8005: LD_EXP 11
8009: PUSH
8010: LD_EXP 12
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: LIST
8019: PPUSH
8020: LD_EXP 8
8024: PPUSH
8025: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
8029: LD_EXP 10
8033: PUSH
8034: LD_EXP 11
8038: PUSH
8039: LD_EXP 12
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: LIST
8048: PPUSH
8049: LD_INT 91
8051: PUSH
8052: LD_EXP 8
8056: PUSH
8057: LD_INT 6
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: LIST
8064: PPUSH
8065: CALL_OW 72
8069: IFFALSE 7960
// case JMMGirl of 1 :
8071: LD_EXP 2
8075: PUSH
8076: LD_INT 1
8078: DOUBLE
8079: EQUAL
8080: IFTRUE 8084
8082: GO 8369
8084: POP
// begin ChangeSideKappaBase ;
8085: CALL 1439 0 0
// ComTurnUnit ( Joan , JMM ) ;
8089: LD_EXP 10
8093: PPUSH
8094: LD_EXP 8
8098: PPUSH
8099: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
8103: LD_EXP 8
8107: PPUSH
8108: LD_EXP 10
8112: PPUSH
8113: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8117: LD_EXP 10
8121: PUSH
8122: LD_EXP 8
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PPUSH
8131: CALL_OW 87
// wait ( 0 0$1 ) ;
8135: LD_INT 35
8137: PPUSH
8138: CALL_OW 67
// DialogueOn ;
8142: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
8146: LD_EXP 10
8150: PPUSH
8151: LD_STRING D3J-Joan-1
8153: PPUSH
8154: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8158: LD_EXP 8
8162: PPUSH
8163: LD_STRING D3J-JMM-1
8165: PPUSH
8166: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
8170: LD_EXP 10
8174: PPUSH
8175: LD_STRING D3J-Joan-2
8177: PPUSH
8178: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
8182: LD_EXP 8
8186: PPUSH
8187: LD_STRING D3J-JMM-2
8189: PPUSH
8190: CALL_OW 88
// wait ( 0 0$1 ) ;
8194: LD_INT 35
8196: PPUSH
8197: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8201: LD_EXP 8
8205: PPUSH
8206: LD_STRING D4-JMM-1
8208: PPUSH
8209: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
8213: LD_EXP 10
8217: PPUSH
8218: LD_STRING D4-Joan-1
8220: PPUSH
8221: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8225: LD_EXP 8
8229: PPUSH
8230: LD_STRING D4-JMM-2
8232: PPUSH
8233: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
8237: LD_EXP 10
8241: PPUSH
8242: LD_STRING D4-Joan-2
8244: PPUSH
8245: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8249: LD_EXP 8
8253: PPUSH
8254: LD_STRING D4-JMM-3
8256: PPUSH
8257: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8261: LD_INT 10
8263: PPUSH
8264: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8268: LD_EXP 13
8272: PPUSH
8273: LD_STRING D7-Pow-1
8275: PPUSH
8276: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8280: LD_EXP 8
8284: PPUSH
8285: LD_STRING D7-JMM-1
8287: PPUSH
8288: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8292: LD_EXP 13
8296: PPUSH
8297: LD_STRING D7-Pow-2
8299: PPUSH
8300: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8304: LD_EXP 8
8308: PPUSH
8309: LD_STRING D7-JMM-2
8311: PPUSH
8312: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8316: LD_EXP 13
8320: PPUSH
8321: LD_STRING D7-Pow-3
8323: PPUSH
8324: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8328: LD_EXP 8
8332: PPUSH
8333: LD_STRING D7-JMM-3
8335: PPUSH
8336: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8340: LD_EXP 13
8344: PPUSH
8345: LD_STRING D7-Pow-4
8347: PPUSH
8348: CALL_OW 94
// DialogueOff ;
8352: CALL_OW 7
// InGameOff ;
8356: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
8360: LD_STRING M2J
8362: PPUSH
8363: CALL_OW 337
// end ; 2 :
8367: GO 8932
8369: LD_INT 2
8371: DOUBLE
8372: EQUAL
8373: IFTRUE 8377
8375: GO 8662
8377: POP
// begin ChangeSideKappaBase ;
8378: CALL 1439 0 0
// ComTurnUnit ( Lisa , JMM ) ;
8382: LD_EXP 11
8386: PPUSH
8387: LD_EXP 8
8391: PPUSH
8392: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
8396: LD_EXP 8
8400: PPUSH
8401: LD_EXP 11
8405: PPUSH
8406: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
8410: LD_EXP 11
8414: PUSH
8415: LD_EXP 8
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PPUSH
8424: CALL_OW 87
// wait ( 0 0$1 ) ;
8428: LD_INT 35
8430: PPUSH
8431: CALL_OW 67
// DialogueOn ;
8435: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
8439: LD_EXP 11
8443: PPUSH
8444: LD_STRING D3L-Lisa-1
8446: PPUSH
8447: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
8451: LD_EXP 8
8455: PPUSH
8456: LD_STRING D3L-JMM-1
8458: PPUSH
8459: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
8463: LD_EXP 11
8467: PPUSH
8468: LD_STRING D3L-Lisa-2
8470: PPUSH
8471: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
8475: LD_EXP 8
8479: PPUSH
8480: LD_STRING D3L-JMM-2
8482: PPUSH
8483: CALL_OW 88
// wait ( 0 0$1 ) ;
8487: LD_INT 35
8489: PPUSH
8490: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8494: LD_EXP 8
8498: PPUSH
8499: LD_STRING D4-JMM-1
8501: PPUSH
8502: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8506: LD_EXP 11
8510: PPUSH
8511: LD_STRING D4-Lisa-1
8513: PPUSH
8514: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8518: LD_EXP 8
8522: PPUSH
8523: LD_STRING D4-JMM-1
8525: PPUSH
8526: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8530: LD_EXP 11
8534: PPUSH
8535: LD_STRING D4-Lisa-2
8537: PPUSH
8538: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8542: LD_EXP 8
8546: PPUSH
8547: LD_STRING D4-JMM-3
8549: PPUSH
8550: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8554: LD_INT 10
8556: PPUSH
8557: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8561: LD_EXP 13
8565: PPUSH
8566: LD_STRING D7-Pow-1
8568: PPUSH
8569: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8573: LD_EXP 8
8577: PPUSH
8578: LD_STRING D7-JMM-1
8580: PPUSH
8581: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8585: LD_EXP 13
8589: PPUSH
8590: LD_STRING D7-Pow-2
8592: PPUSH
8593: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8597: LD_EXP 8
8601: PPUSH
8602: LD_STRING D7-JMM-2
8604: PPUSH
8605: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8609: LD_EXP 13
8613: PPUSH
8614: LD_STRING D7-Pow-3
8616: PPUSH
8617: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8621: LD_EXP 8
8625: PPUSH
8626: LD_STRING D7-JMM-3
8628: PPUSH
8629: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8633: LD_EXP 13
8637: PPUSH
8638: LD_STRING D7-Pow-4
8640: PPUSH
8641: CALL_OW 94
// DialogueOff ;
8645: CALL_OW 7
// InGameOff ;
8649: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8653: LD_STRING M2L
8655: PPUSH
8656: CALL_OW 337
// end ; 3 :
8660: GO 8932
8662: LD_INT 3
8664: DOUBLE
8665: EQUAL
8666: IFTRUE 8670
8668: GO 8931
8670: POP
// begin ChangeSideKappaBase ;
8671: CALL 1439 0 0
// ComTurnUnit ( Connie , JMM ) ;
8675: LD_EXP 12
8679: PPUSH
8680: LD_EXP 8
8684: PPUSH
8685: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8689: LD_EXP 8
8693: PPUSH
8694: LD_EXP 12
8698: PPUSH
8699: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8703: LD_EXP 10
8707: PUSH
8708: LD_EXP 8
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PPUSH
8717: CALL_OW 87
// wait ( 0 0$1 ) ;
8721: LD_INT 35
8723: PPUSH
8724: CALL_OW 67
// DialogueOn ;
8728: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8732: LD_EXP 12
8736: PPUSH
8737: LD_STRING D3X-Con-1
8739: PPUSH
8740: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8744: LD_EXP 8
8748: PPUSH
8749: LD_STRING D3J-JMM-1
8751: PPUSH
8752: CALL_OW 88
// wait ( 0 0$1 ) ;
8756: LD_INT 35
8758: PPUSH
8759: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8763: LD_EXP 8
8767: PPUSH
8768: LD_STRING D4-JMM-1
8770: PPUSH
8771: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8775: LD_EXP 12
8779: PPUSH
8780: LD_STRING D4-Con-1
8782: PPUSH
8783: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8787: LD_EXP 8
8791: PPUSH
8792: LD_STRING D4-JMM-2
8794: PPUSH
8795: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8799: LD_EXP 12
8803: PPUSH
8804: LD_STRING D4-Con-2
8806: PPUSH
8807: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8811: LD_EXP 8
8815: PPUSH
8816: LD_STRING D4-JMM-3
8818: PPUSH
8819: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8823: LD_INT 10
8825: PPUSH
8826: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8830: LD_EXP 13
8834: PPUSH
8835: LD_STRING D7-Pow-1
8837: PPUSH
8838: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8842: LD_EXP 8
8846: PPUSH
8847: LD_STRING D7-JMM-1
8849: PPUSH
8850: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8854: LD_EXP 13
8858: PPUSH
8859: LD_STRING D7-Pow-2
8861: PPUSH
8862: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8866: LD_EXP 8
8870: PPUSH
8871: LD_STRING D7-JMM-2
8873: PPUSH
8874: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8878: LD_EXP 13
8882: PPUSH
8883: LD_STRING D7-Pow-3
8885: PPUSH
8886: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8890: LD_EXP 8
8894: PPUSH
8895: LD_STRING D7-JMM-3
8897: PPUSH
8898: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8902: LD_EXP 13
8906: PPUSH
8907: LD_STRING D7-Pow-4
8909: PPUSH
8910: CALL_OW 94
// DialogueOff ;
8914: CALL_OW 7
// InGameOff ;
8918: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8922: LD_STRING M2X
8924: PPUSH
8925: CALL_OW 337
// end ; end ;
8929: GO 8932
8931: POP
// SaveForQuickRestart ;
8932: CALL_OW 22
// end ;
8936: PPOPN 1
8938: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8939: LD_INT 32
8941: PPUSH
8942: CALL_OW 306
8946: IFFALSE 9273
8948: GO 8950
8950: DISABLE
// begin case JMMGirl of 1 :
8951: LD_EXP 2
8955: PUSH
8956: LD_INT 1
8958: DOUBLE
8959: EQUAL
8960: IFTRUE 8964
8962: GO 9080
8964: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8965: LD_EXP 8
8969: PPUSH
8970: LD_STRING D6J-JMM-1
8972: PPUSH
8973: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8977: LD_STRING 13f_Denis
8979: PPUSH
8980: CALL_OW 28
8984: IFTRUE 8995
8986: PUSH
8987: LD_STRING 13s_Denis
8989: PPUSH
8990: CALL_OW 28
8994: OR
8995: IFFALSE 9035
// begin Say ( Joan , D6J-Joan-1 ) ;
8997: LD_EXP 10
9001: PPUSH
9002: LD_STRING D6J-Joan-1
9004: PPUSH
9005: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
9009: LD_EXP 8
9013: PPUSH
9014: LD_STRING D6J-JMM-2
9016: PPUSH
9017: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
9021: LD_EXP 10
9025: PPUSH
9026: LD_STRING D6J-Joan-2
9028: PPUSH
9029: CALL_OW 88
// end else
9033: GO 9047
// Say ( Joan , D6J-Joan-2a ) ;
9035: LD_EXP 10
9039: PPUSH
9040: LD_STRING D6J-Joan-2a
9042: PPUSH
9043: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
9047: LD_EXP 8
9051: PPUSH
9052: LD_STRING D6J-JMM-3
9054: PPUSH
9055: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
9059: LD_EXP 10
9063: PPUSH
9064: LD_STRING D6J-Joan-3
9066: PPUSH
9067: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9071: LD_STRING M3
9073: PPUSH
9074: CALL_OW 337
// end ; 2 :
9078: GO 9273
9080: LD_INT 2
9082: DOUBLE
9083: EQUAL
9084: IFTRUE 9088
9086: GO 9146
9088: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
9089: LD_EXP 8
9093: PPUSH
9094: LD_STRING D6L-JMM-1
9096: PPUSH
9097: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
9101: LD_EXP 11
9105: PPUSH
9106: LD_STRING D6L-Lisa-1
9108: PPUSH
9109: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
9113: LD_EXP 8
9117: PPUSH
9118: LD_STRING D6L-JMM-2
9120: PPUSH
9121: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
9125: LD_EXP 11
9129: PPUSH
9130: LD_STRING D6L-Lisa-2
9132: PPUSH
9133: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9137: LD_STRING M3
9139: PPUSH
9140: CALL_OW 337
// end ; 3 :
9144: GO 9273
9146: LD_INT 3
9148: DOUBLE
9149: EQUAL
9150: IFTRUE 9154
9152: GO 9272
9154: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
9155: LD_EXP 8
9159: PPUSH
9160: LD_STRING D6X-JMM-1
9162: PPUSH
9163: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
9167: LD_EXP 12
9171: PPUSH
9172: LD_STRING D6X-Con-1
9174: PPUSH
9175: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
9179: LD_EXP 8
9183: PPUSH
9184: LD_STRING D6X-JMM-2
9186: PPUSH
9187: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
9191: LD_EXP 12
9195: PPUSH
9196: LD_STRING D6X-Con-2
9198: PPUSH
9199: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
9203: LD_EXP 8
9207: PPUSH
9208: LD_STRING D6X-JMM-3
9210: PPUSH
9211: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
9215: LD_EXP 12
9219: PPUSH
9220: LD_STRING D6X-Con-3
9222: PPUSH
9223: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
9227: LD_EXP 8
9231: PPUSH
9232: LD_STRING D6X-JMM-4
9234: PPUSH
9235: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
9239: LD_EXP 12
9243: PPUSH
9244: LD_STRING D6X-Con-4
9246: PPUSH
9247: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
9251: LD_EXP 8
9255: PPUSH
9256: LD_STRING D6X-JMM-5
9258: PPUSH
9259: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9263: LD_STRING M3
9265: PPUSH
9266: CALL_OW 337
// end ; end ;
9270: GO 9273
9272: POP
// end ;
9273: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
9274: LD_INT 22
9276: PUSH
9277: LD_INT 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 33
9286: PUSH
9287: LD_INT 2
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PPUSH
9298: CALL_OW 69
9302: PPUSH
9303: CALL_OW 306
9307: IFFALSE 9453
9309: GO 9311
9311: DISABLE
// begin case JMMGirl of 1 :
9312: LD_EXP 2
9316: PUSH
9317: LD_INT 1
9319: DOUBLE
9320: EQUAL
9321: IFTRUE 9325
9323: GO 9362
9325: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9326: LD_EXP 8
9330: PPUSH
9331: LD_STRING D5-JMM-1
9333: PPUSH
9334: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9338: LD_INT 77
9340: PPUSH
9341: LD_INT 87
9343: PPUSH
9344: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
9348: LD_EXP 10
9352: PPUSH
9353: LD_STRING D5-Joan-1
9355: PPUSH
9356: CALL_OW 88
// end ; 2 :
9360: GO 9453
9362: LD_INT 2
9364: DOUBLE
9365: EQUAL
9366: IFTRUE 9370
9368: GO 9407
9370: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9371: LD_EXP 8
9375: PPUSH
9376: LD_STRING D5-JMM-1
9378: PPUSH
9379: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9383: LD_INT 77
9385: PPUSH
9386: LD_INT 87
9388: PPUSH
9389: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
9393: LD_EXP 11
9397: PPUSH
9398: LD_STRING D5-Lisa-1
9400: PPUSH
9401: CALL_OW 88
// end ; 3 :
9405: GO 9453
9407: LD_INT 3
9409: DOUBLE
9410: EQUAL
9411: IFTRUE 9415
9413: GO 9452
9415: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9416: LD_EXP 8
9420: PPUSH
9421: LD_STRING D5-JMM-1
9423: PPUSH
9424: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9428: LD_INT 77
9430: PPUSH
9431: LD_INT 87
9433: PPUSH
9434: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
9438: LD_EXP 12
9442: PPUSH
9443: LD_STRING D5-Con-1
9445: PPUSH
9446: CALL_OW 88
// end ; end ;
9450: GO 9453
9452: POP
// end ;
9453: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
9454: LD_EXP 8
9458: PPUSH
9459: CALL_OW 310
9463: PPUSH
9464: LD_INT 16
9466: PPUSH
9467: CALL_OW 308
9471: IFFALSE 9825
9473: GO 9475
9475: DISABLE
9476: LD_INT 0
9478: PPUSH
9479: PPUSH
// begin enable ;
9480: ENABLE
// if JMMGirl = 1 then
9481: LD_EXP 2
9485: PUSH
9486: LD_INT 1
9488: EQUAL
9489: IFFALSE 9506
// JMMGirlVeh := IsInUnit ( Joan ) ;
9491: LD_ADDR_VAR 0 1
9495: PUSH
9496: LD_EXP 10
9500: PPUSH
9501: CALL_OW 310
9505: ST_TO_ADDR
// if JMMGirl = 2 then
9506: LD_EXP 2
9510: PUSH
9511: LD_INT 2
9513: EQUAL
9514: IFFALSE 9531
// JMMGirlVeh := IsInUnit ( Lisa ) ;
9516: LD_ADDR_VAR 0 1
9520: PUSH
9521: LD_EXP 11
9525: PPUSH
9526: CALL_OW 310
9530: ST_TO_ADDR
// if JMMGirl = 3 then
9531: LD_EXP 2
9535: PUSH
9536: LD_INT 3
9538: EQUAL
9539: IFFALSE 9556
// JMMGirlVeh := IsInUnit ( Connie ) ;
9541: LD_ADDR_VAR 0 1
9545: PUSH
9546: LD_EXP 12
9550: PPUSH
9551: CALL_OW 310
9555: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9556: LD_EXP 8
9560: PPUSH
9561: CALL_OW 310
9565: PPUSH
9566: LD_EXP 10
9570: PPUSH
9571: CALL_OW 310
9575: PPUSH
9576: CALL_OW 296
9580: PUSH
9581: LD_INT 10
9583: LESS
9584: IFTRUE 9616
9586: PUSH
9587: LD_EXP 8
9591: PPUSH
9592: CALL_OW 310
9596: PPUSH
9597: LD_EXP 11
9601: PPUSH
9602: CALL_OW 310
9606: PPUSH
9607: CALL_OW 296
9611: PUSH
9612: LD_INT 10
9614: LESS
9615: OR
9616: IFTRUE 9648
9618: PUSH
9619: LD_EXP 8
9623: PPUSH
9624: CALL_OW 310
9628: PPUSH
9629: LD_EXP 12
9633: PPUSH
9634: CALL_OW 310
9638: PPUSH
9639: CALL_OW 296
9643: PUSH
9644: LD_INT 10
9646: LESS
9647: OR
9648: IFFALSE 9745
// begin case Query ( Q3b ) of 1 :
9650: LD_STRING Q3b
9652: PPUSH
9653: CALL_OW 97
9657: PUSH
9658: LD_INT 1
9660: DOUBLE
9661: EQUAL
9662: IFTRUE 9666
9664: GO 9742
9666: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9667: LD_VAR 0 1
9671: PPUSH
9672: CALL_OW 265
9676: PUSH
9677: EMPTY
9678: LIST
9679: PUSH
9680: LD_VAR 0 1
9684: PPUSH
9685: CALL_OW 262
9689: PUSH
9690: EMPTY
9691: LIST
9692: PUSH
9693: LD_VAR 0 1
9697: PPUSH
9698: CALL_OW 263
9702: PUSH
9703: EMPTY
9704: LIST
9705: PUSH
9706: LD_VAR 0 1
9710: PPUSH
9711: CALL_OW 264
9715: PUSH
9716: EMPTY
9717: LIST
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: PPUSH
9725: LD_STRING 14_JMMGirlVeh_1
9727: PPUSH
9728: CALL_OW 39
// FinishMission ( false ) ;
9732: LD_INT 0
9734: PPUSH
9735: CALL 9979 0 1
// disable ;
9739: DISABLE
// end ; end ;
9740: GO 9743
9742: POP
// end else
9743: GO 9825
// begin if JMMGirl = 1 then
9745: LD_EXP 2
9749: PUSH
9750: LD_INT 1
9752: EQUAL
9753: IFFALSE 9770
// dec := Query ( Q3bJ ) else
9755: LD_ADDR_VAR 0 2
9759: PUSH
9760: LD_STRING Q3bJ
9762: PPUSH
9763: CALL_OW 97
9767: ST_TO_ADDR
9768: GO 9808
// if JMMGirl = 2 then
9770: LD_EXP 2
9774: PUSH
9775: LD_INT 2
9777: EQUAL
9778: IFFALSE 9795
// dec := Query ( Q3bL ) else
9780: LD_ADDR_VAR 0 2
9784: PUSH
9785: LD_STRING Q3bL
9787: PPUSH
9788: CALL_OW 97
9792: ST_TO_ADDR
9793: GO 9808
// dec := Query ( Q3bX ) ;
9795: LD_ADDR_VAR 0 2
9799: PUSH
9800: LD_STRING Q3bX
9802: PPUSH
9803: CALL_OW 97
9807: ST_TO_ADDR
// if dec = 1 then
9808: LD_VAR 0 2
9812: PUSH
9813: LD_INT 1
9815: EQUAL
9816: IFFALSE 9825
// FinishMission ( false ) ;
9818: LD_INT 0
9820: PPUSH
9821: CALL 9979 0 1
// end ; end ;
9825: PPOPN 2
9827: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9828: LD_INT 22
9830: PUSH
9831: LD_INT 3
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 23
9840: PUSH
9841: LD_INT 3
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 21
9850: PUSH
9851: LD_INT 1
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: LIST
9862: PPUSH
9863: CALL_OW 69
9867: PUSH
9868: LD_INT 0
9870: EQUAL
9871: IFFALSE 9978
9873: GO 9875
9875: DISABLE
// begin DialogueOn ;
9876: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9880: LD_EXP 8
9884: PPUSH
9885: LD_STRING DEnd-JMM-1
9887: PPUSH
9888: CALL_OW 88
// case JMMGirl of 1 :
9892: LD_EXP 2
9896: PUSH
9897: LD_INT 1
9899: DOUBLE
9900: EQUAL
9901: IFTRUE 9905
9903: GO 9920
9905: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9906: LD_EXP 10
9910: PPUSH
9911: LD_STRING DEnd-Joan-1
9913: PPUSH
9914: CALL_OW 88
9918: GO 9967
9920: LD_INT 2
9922: DOUBLE
9923: EQUAL
9924: IFTRUE 9928
9926: GO 9943
9928: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9929: LD_EXP 11
9933: PPUSH
9934: LD_STRING DEnd-Lisa-1
9936: PPUSH
9937: CALL_OW 88
9941: GO 9967
9943: LD_INT 3
9945: DOUBLE
9946: EQUAL
9947: IFTRUE 9951
9949: GO 9966
9951: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9952: LD_EXP 12
9956: PPUSH
9957: LD_STRING DEnd-Con-1
9959: PPUSH
9960: CALL_OW 88
9964: GO 9967
9966: POP
// DialogueOff ;
9967: CALL_OW 7
// FinishMission ( false ) ;
9971: LD_INT 0
9973: PPUSH
9974: CALL 9979 0 1
// end ;
9978: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9979: LD_INT 0
9981: PPUSH
9982: PPUSH
9983: PPUSH
9984: PPUSH
9985: PPUSH
9986: PPUSH
// m1 := false ;
9987: LD_ADDR_VAR 0 4
9991: PUSH
9992: LD_INT 0
9994: ST_TO_ADDR
// m2 := false ;
9995: LD_ADDR_VAR 0 5
9999: PUSH
10000: LD_INT 0
10002: ST_TO_ADDR
// m3 := false ;
10003: LD_ADDR_VAR 0 6
10007: PUSH
10008: LD_INT 0
10010: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
10011: LD_ADDR_VAR 0 7
10015: PUSH
10016: LD_INT 22
10018: PUSH
10019: LD_INT 3
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: LD_INT 50
10028: PUSH
10029: EMPTY
10030: LIST
10031: PUSH
10032: LD_INT 23
10034: PUSH
10035: LD_INT 3
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 21
10044: PUSH
10045: LD_INT 1
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: PPUSH
10058: CALL_OW 69
10062: PUSH
10063: LD_INT 0
10065: EQUAL
10066: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
10067: LD_EXP 8
10071: PPUSH
10072: LD_STRING 14_JMM
10074: PPUSH
10075: CALL_OW 38
// if tick <= 50 50$00 then
10079: LD_OWVAR 1
10083: PUSH
10084: LD_INT 105000
10086: LESSEQUAL
10087: IFFALSE 10096
// SetAchievement ( ACH_ASPEED_14 ) ;
10089: LD_STRING ACH_ASPEED_14
10091: PPUSH
10092: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
10096: LD_EXP 8
10100: PPUSH
10101: CALL_OW 310
10105: IFFALSE 10127
10107: PUSH
10108: LD_EXP 8
10112: PPUSH
10113: CALL_OW 310
10117: PPUSH
10118: CALL_OW 247
10122: PUSH
10123: LD_INT 2
10125: EQUAL
10126: AND
10127: IFFALSE 10209
// begin JMMNewVeh = IsInUnit ( JMM ) ;
10129: LD_ADDR_VAR 0 3
10133: PUSH
10134: LD_EXP 8
10138: PPUSH
10139: CALL_OW 310
10143: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
10144: LD_VAR 0 3
10148: PPUSH
10149: CALL_OW 265
10153: PUSH
10154: EMPTY
10155: LIST
10156: PUSH
10157: LD_VAR 0 3
10161: PPUSH
10162: CALL_OW 262
10166: PUSH
10167: EMPTY
10168: LIST
10169: PUSH
10170: LD_VAR 0 3
10174: PPUSH
10175: CALL_OW 263
10179: PUSH
10180: EMPTY
10181: LIST
10182: PUSH
10183: LD_VAR 0 3
10187: PPUSH
10188: CALL_OW 264
10192: PUSH
10193: EMPTY
10194: LIST
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: PPUSH
10202: LD_STRING 14_JMMVeh_1
10204: PPUSH
10205: CALL_OW 39
// end ; if fastEnd then
10209: LD_VAR 0 1
10213: IFFALSE 10304
// begin AddMedal ( fastend , - 1 ) ;
10215: LD_STRING fastend
10217: PPUSH
10218: LD_INT 1
10220: NEG
10221: PPUSH
10222: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10226: LD_STRING fastend
10228: PPUSH
10229: LD_INT 1
10231: NEG
10232: PPUSH
10233: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10237: LD_STRING fastend
10239: PPUSH
10240: LD_INT 1
10242: NEG
10243: PPUSH
10244: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10248: LD_EXP 2
10252: PPUSH
10253: LD_STRING 14_JMMGirl_1
10255: PPUSH
10256: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10260: LD_INT 0
10262: PPUSH
10263: LD_STRING 14_JMMGirlStatus_1
10265: PPUSH
10266: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10270: LD_INT 0
10272: PPUSH
10273: LD_STRING 14_KappaStatus_1
10275: PPUSH
10276: CALL_OW 39
// GiveMedals ( Eliminate ) ;
10280: LD_STRING Eliminate
10282: PPUSH
10283: CALL_OW 102
// RewardPeople ( JMM ) ;
10287: LD_EXP 8
10291: PPUSH
10292: CALL_OW 43
// YouWin ;
10296: CALL_OW 103
// exit ;
10300: GO 10974
// end else
10302: GO 10861
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10304: LD_EXP 2
10308: PPUSH
10309: LD_STRING 14_JMMGirl_1
10311: PPUSH
10312: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
10316: LD_VAR 0 7
10320: PPUSH
10321: LD_STRING 14_KappaStatus_1
10323: PPUSH
10324: CALL_OW 39
// case JMMGirl of 1 :
10328: LD_EXP 2
10332: PUSH
10333: LD_INT 1
10335: DOUBLE
10336: EQUAL
10337: IFTRUE 10341
10339: GO 10475
10341: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10342: LD_EXP 10
10346: PPUSH
10347: CALL_OW 302
10351: IFFALSE 10368
10353: PUSH
10354: LD_EXP 10
10358: PPUSH
10359: CALL_OW 255
10363: PUSH
10364: LD_INT 1
10366: EQUAL
10367: AND
10368: IFFALSE 10408
10370: PUSH
10371: LD_VAR 0 7
10375: IFTRUE 10407
10377: PUSH
10378: LD_EXP 8
10382: PPUSH
10383: CALL_OW 310
10387: PPUSH
10388: LD_EXP 10
10392: PPUSH
10393: CALL_OW 310
10397: PPUSH
10398: CALL_OW 296
10402: PUSH
10403: LD_INT 10
10405: LESS
10406: OR
10407: AND
10408: IFFALSE 10452
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10410: LD_INT 1
10412: PPUSH
10413: LD_STRING 14_JMMGirlStatus_1
10415: PPUSH
10416: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10420: LD_EXP 10
10424: PPUSH
10425: LD_STRING 14_Joan
10427: PPUSH
10428: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10432: LD_STRING protect
10434: PPUSH
10435: LD_INT 1
10437: PPUSH
10438: CALL_OW 101
// m1 := true ;
10442: LD_ADDR_VAR 0 4
10446: PUSH
10447: LD_INT 1
10449: ST_TO_ADDR
// end else
10450: GO 10473
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10452: LD_INT 0
10454: PPUSH
10455: LD_STRING 14_JMMGirlStatus_1
10457: PPUSH
10458: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10462: LD_STRING protect
10464: PPUSH
10465: LD_INT 1
10467: NEG
10468: PPUSH
10469: CALL_OW 101
// end ; end ; 2 :
10473: GO 10760
10475: LD_INT 2
10477: DOUBLE
10478: EQUAL
10479: IFTRUE 10483
10481: GO 10617
10483: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10484: LD_EXP 11
10488: PPUSH
10489: CALL_OW 302
10493: IFFALSE 10510
10495: PUSH
10496: LD_EXP 11
10500: PPUSH
10501: CALL_OW 255
10505: PUSH
10506: LD_INT 1
10508: EQUAL
10509: AND
10510: IFFALSE 10550
10512: PUSH
10513: LD_VAR 0 7
10517: IFTRUE 10549
10519: PUSH
10520: LD_EXP 8
10524: PPUSH
10525: CALL_OW 310
10529: PPUSH
10530: LD_EXP 11
10534: PPUSH
10535: CALL_OW 310
10539: PPUSH
10540: CALL_OW 296
10544: PUSH
10545: LD_INT 10
10547: LESS
10548: OR
10549: AND
10550: IFFALSE 10594
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10552: LD_INT 1
10554: PPUSH
10555: LD_STRING 14_JMMGirlStatus_1
10557: PPUSH
10558: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10562: LD_EXP 11
10566: PPUSH
10567: LD_STRING 14_Lisa
10569: PPUSH
10570: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10574: LD_STRING protect
10576: PPUSH
10577: LD_INT 1
10579: PPUSH
10580: CALL_OW 101
// m1 := true ;
10584: LD_ADDR_VAR 0 4
10588: PUSH
10589: LD_INT 1
10591: ST_TO_ADDR
// end else
10592: GO 10615
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10594: LD_INT 0
10596: PPUSH
10597: LD_STRING 14_JMMGirlStatus_1
10599: PPUSH
10600: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10604: LD_STRING protect
10606: PPUSH
10607: LD_INT 2
10609: NEG
10610: PPUSH
10611: CALL_OW 101
// end ; end ; 3 :
10615: GO 10760
10617: LD_INT 3
10619: DOUBLE
10620: EQUAL
10621: IFTRUE 10625
10623: GO 10759
10625: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10626: LD_EXP 12
10630: PPUSH
10631: CALL_OW 302
10635: IFFALSE 10652
10637: PUSH
10638: LD_EXP 12
10642: PPUSH
10643: CALL_OW 255
10647: PUSH
10648: LD_INT 1
10650: EQUAL
10651: AND
10652: IFFALSE 10692
10654: PUSH
10655: LD_VAR 0 7
10659: IFTRUE 10691
10661: PUSH
10662: LD_EXP 8
10666: PPUSH
10667: CALL_OW 310
10671: PPUSH
10672: LD_EXP 12
10676: PPUSH
10677: CALL_OW 310
10681: PPUSH
10682: CALL_OW 296
10686: PUSH
10687: LD_INT 10
10689: LESS
10690: OR
10691: AND
10692: IFFALSE 10736
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10694: LD_INT 1
10696: PPUSH
10697: LD_STRING 14_JMMGirlStatus_1
10699: PPUSH
10700: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10704: LD_EXP 12
10708: PPUSH
10709: LD_STRING 14_Connie
10711: PPUSH
10712: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10716: LD_STRING protect
10718: PPUSH
10719: LD_INT 1
10721: PPUSH
10722: CALL_OW 101
// m1 := true ;
10726: LD_ADDR_VAR 0 4
10730: PUSH
10731: LD_INT 1
10733: ST_TO_ADDR
// end else
10734: GO 10757
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10736: LD_INT 0
10738: PPUSH
10739: LD_STRING 14_JMMGirlStatus_1
10741: PPUSH
10742: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10746: LD_STRING protect
10748: PPUSH
10749: LD_INT 3
10751: NEG
10752: PPUSH
10753: CALL_OW 101
// end ; end ; end ;
10757: GO 10760
10759: POP
// if amLaserCounter >= 2 then
10760: LD_EXP 7
10764: PUSH
10765: LD_INT 2
10767: GREATEREQUAL
10768: IFFALSE 10790
// begin AddMedal ( double , 1 ) ;
10770: LD_STRING double
10772: PPUSH
10773: LD_INT 1
10775: PPUSH
10776: CALL_OW 101
// m2 := true ;
10780: LD_ADDR_VAR 0 5
10784: PUSH
10785: LD_INT 1
10787: ST_TO_ADDR
// end else
10788: GO 10824
// begin if amLaserCounter = 1 then
10790: LD_EXP 7
10794: PUSH
10795: LD_INT 1
10797: EQUAL
10798: IFFALSE 10813
// AddMedal ( double , - 2 ) else
10800: LD_STRING double
10802: PPUSH
10803: LD_INT 2
10805: NEG
10806: PPUSH
10807: CALL_OW 101
10811: GO 10824
// AddMedal ( double , - 1 ) ;
10813: LD_STRING double
10815: PPUSH
10816: LD_INT 1
10818: NEG
10819: PPUSH
10820: CALL_OW 101
// end ; if ruEliminated then
10824: LD_VAR 0 7
10828: IFFALSE 10850
// begin AddMedal ( base , 1 ) ;
10830: LD_STRING base
10832: PPUSH
10833: LD_INT 1
10835: PPUSH
10836: CALL_OW 101
// m3 := true ;
10840: LD_ADDR_VAR 0 6
10844: PUSH
10845: LD_INT 1
10847: ST_TO_ADDR
// end else
10848: GO 10861
// AddMedal ( base , - 1 ) ;
10850: LD_STRING base
10852: PPUSH
10853: LD_INT 1
10855: NEG
10856: PPUSH
10857: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10861: LD_VAR 0 4
10865: IFFALSE 10873
10867: PUSH
10868: LD_VAR 0 5
10872: AND
10873: IFFALSE 10881
10875: PUSH
10876: LD_VAR 0 6
10880: AND
10881: IFFALSE 10893
10883: PUSH
10884: LD_OWVAR 67
10888: PUSH
10889: LD_INT 3
10891: GREATEREQUAL
10892: AND
10893: IFFALSE 10905
// SetAchievementEX ( ACH_AMER , 14 ) ;
10895: LD_STRING ACH_AMER
10897: PPUSH
10898: LD_INT 14
10900: PPUSH
10901: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10905: LD_STRING Eliminate
10907: PPUSH
10908: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10912: LD_INT 22
10914: PUSH
10915: LD_INT 1
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 3
10924: PUSH
10925: LD_INT 25
10927: PUSH
10928: LD_INT 12
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 3
10941: PUSH
10942: LD_INT 25
10944: PUSH
10945: LD_INT 16
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: LIST
10960: PPUSH
10961: CALL_OW 69
10965: PPUSH
10966: CALL_OW 43
// YouWin ;
10970: CALL_OW 103
// end ; end_of_file
10974: LD_VAR 0 2
10978: RET
// export function CreateNature ; var i , un ; begin
10979: LD_INT 0
10981: PPUSH
10982: PPUSH
10983: PPUSH
// PrepareEnchidna ;
10984: CALL 67542 0 0
// for i := 1 to 3 do
10988: LD_ADDR_VAR 0 2
10992: PUSH
10993: DOUBLE
10994: LD_INT 1
10996: DEC
10997: ST_TO_ADDR
10998: LD_INT 3
11000: PUSH
11001: FOR_TO
11002: IFFALSE 11051
// begin un := CreateHuman ;
11004: LD_ADDR_VAR 0 3
11008: PUSH
11009: CALL_OW 44
11013: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11014: LD_VAR 0 3
11018: PPUSH
11019: LD_INT 0
11021: PPUSH
11022: LD_INT 5
11024: PPUSH
11025: CALL_OW 12
11029: PPUSH
11030: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
11034: LD_VAR 0 3
11038: PPUSH
11039: LD_INT 9
11041: PPUSH
11042: LD_INT 0
11044: PPUSH
11045: CALL_OW 49
// end ;
11049: GO 11001
11051: POP
11052: POP
// PrepareHorse ;
11053: CALL 67750 0 0
// for i := 1 to 2 do
11057: LD_ADDR_VAR 0 2
11061: PUSH
11062: DOUBLE
11063: LD_INT 1
11065: DEC
11066: ST_TO_ADDR
11067: LD_INT 2
11069: PUSH
11070: FOR_TO
11071: IFFALSE 11120
// begin un := CreateHuman ;
11073: LD_ADDR_VAR 0 3
11077: PUSH
11078: CALL_OW 44
11082: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11083: LD_VAR 0 3
11087: PPUSH
11088: LD_INT 0
11090: PPUSH
11091: LD_INT 5
11093: PPUSH
11094: CALL_OW 12
11098: PPUSH
11099: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
11103: LD_VAR 0 3
11107: PPUSH
11108: LD_INT 9
11110: PPUSH
11111: LD_INT 0
11113: PPUSH
11114: CALL_OW 49
// end ;
11118: GO 11070
11120: POP
11121: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
11122: LD_ADDR_VAR 0 2
11126: PUSH
11127: DOUBLE
11128: LD_INT 1
11130: DEC
11131: ST_TO_ADDR
11132: LD_INT 4
11134: PUSH
11135: LD_INT 5
11137: PUSH
11138: LD_INT 5
11140: PUSH
11141: LD_INT 5
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: PUSH
11150: LD_OWVAR 67
11154: ARRAY
11155: PUSH
11156: FOR_TO
11157: IFFALSE 11221
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
11159: LD_INT 0
11161: PPUSH
11162: LD_INT 5
11164: PPUSH
11165: CALL_OW 12
11169: PPUSH
11170: CALL 67318 0 1
// un := CreateHuman ;
11174: LD_ADDR_VAR 0 3
11178: PUSH
11179: CALL_OW 44
11183: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11184: LD_VAR 0 3
11188: PPUSH
11189: LD_INT 0
11191: PPUSH
11192: LD_INT 5
11194: PPUSH
11195: CALL_OW 12
11199: PPUSH
11200: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
11204: LD_VAR 0 3
11208: PPUSH
11209: LD_INT 8
11211: PPUSH
11212: LD_INT 0
11214: PPUSH
11215: CALL_OW 49
// end ;
11219: GO 11156
11221: POP
11222: POP
// PrepareFish ;
11223: CALL 67646 0 0
// for i := 1 to 2 do
11227: LD_ADDR_VAR 0 2
11231: PUSH
11232: DOUBLE
11233: LD_INT 1
11235: DEC
11236: ST_TO_ADDR
11237: LD_INT 2
11239: PUSH
11240: FOR_TO
11241: IFFALSE 11290
// begin un := CreateHuman ;
11243: LD_ADDR_VAR 0 3
11247: PUSH
11248: CALL_OW 44
11252: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11253: LD_VAR 0 3
11257: PPUSH
11258: LD_INT 0
11260: PPUSH
11261: LD_INT 5
11263: PPUSH
11264: CALL_OW 12
11268: PPUSH
11269: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
11273: LD_VAR 0 3
11277: PPUSH
11278: LD_INT 6
11280: PPUSH
11281: LD_INT 0
11283: PPUSH
11284: CALL_OW 49
// end ;
11288: GO 11240
11290: POP
11291: POP
// PrepareFrog ;
11292: CALL 67594 0 0
// for i := 1 to 2 do
11296: LD_ADDR_VAR 0 2
11300: PUSH
11301: DOUBLE
11302: LD_INT 1
11304: DEC
11305: ST_TO_ADDR
11306: LD_INT 2
11308: PUSH
11309: FOR_TO
11310: IFFALSE 11359
// begin un := CreateHuman ;
11312: LD_ADDR_VAR 0 3
11316: PUSH
11317: CALL_OW 44
11321: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11322: LD_VAR 0 3
11326: PPUSH
11327: LD_INT 0
11329: PPUSH
11330: LD_INT 5
11332: PPUSH
11333: CALL_OW 12
11337: PPUSH
11338: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
11342: LD_VAR 0 3
11346: PPUSH
11347: LD_INT 7
11349: PPUSH
11350: LD_INT 0
11352: PPUSH
11353: CALL_OW 49
// end ;
11357: GO 11309
11359: POP
11360: POP
// PrepareMastodont ;
11361: CALL 67802 0 0
// un := CreateVehicle ;
11365: LD_ADDR_VAR 0 3
11369: PUSH
11370: CALL_OW 45
11374: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
11375: LD_VAR 0 3
11379: PPUSH
11380: LD_INT 166
11382: PPUSH
11383: LD_INT 134
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: LD_INT 0
11391: PPUSH
11392: CALL 73351 0 5
// end ; end_of_file
11396: LD_VAR 0 1
11400: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
11401: LD_INT 14
11403: PPUSH
11404: CALL_OW 435
11408: PUSH
11409: LD_INT 20
11411: LESS
11412: IFFALSE 11454
11414: GO 11416
11416: DISABLE
// begin enable ;
11417: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11418: LD_INT 35
11420: PPUSH
11421: LD_INT 735
11423: PPUSH
11424: CALL_OW 12
11428: PPUSH
11429: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
11433: LD_INT 1
11435: PPUSH
11436: LD_INT 5
11438: PPUSH
11439: CALL_OW 12
11443: PPUSH
11444: LD_INT 14
11446: PPUSH
11447: LD_INT 1
11449: PPUSH
11450: CALL_OW 55
// end ;
11454: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11455: LD_INT 13
11457: PPUSH
11458: CALL_OW 435
11462: PUSH
11463: LD_INT 30
11465: LESS
11466: IFFALSE 11508
11468: GO 11470
11470: DISABLE
// begin enable ;
11471: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11472: LD_INT 35
11474: PPUSH
11475: LD_INT 735
11477: PPUSH
11478: CALL_OW 12
11482: PPUSH
11483: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
11487: LD_INT 1
11489: PPUSH
11490: LD_INT 5
11492: PPUSH
11493: CALL_OW 12
11497: PPUSH
11498: LD_INT 13
11500: PPUSH
11501: LD_INT 1
11503: PPUSH
11504: CALL_OW 55
// end ;
11508: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11509: LD_INT 13
11511: PPUSH
11512: CALL_OW 435
11516: PUSH
11517: LD_INT 30
11519: LESS
11520: IFFALSE 11553
11522: GO 11524
11524: DISABLE
// begin enable ;
11525: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
11526: LD_INT 1
11528: PPUSH
11529: LD_INT 5
11531: PPUSH
11532: CALL_OW 12
11536: PPUSH
11537: LD_INT 133
11539: PPUSH
11540: LD_INT 122
11542: PPUSH
11543: LD_INT 20
11545: PPUSH
11546: LD_INT 1
11548: PPUSH
11549: CALL_OW 56
// end ; end_of_file end_of_file
11553: END
// export globalGameSaveCounter ; every 0 0$1 do
11554: GO 11556
11556: DISABLE
// begin enable ;
11557: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11558: LD_STRING updateTimer(
11560: PUSH
11561: LD_OWVAR 1
11565: STR
11566: PUSH
11567: LD_STRING );
11569: STR
11570: PPUSH
11571: CALL_OW 559
// end ;
11575: END
// every 0 0$1 do
11576: GO 11578
11578: DISABLE
// begin globalGameSaveCounter := 0 ;
11579: LD_ADDR_EXP 21
11583: PUSH
11584: LD_INT 0
11586: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11587: LD_STRING setGameSaveCounter(0)
11589: PPUSH
11590: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11594: LD_STRING initStreamRollete();
11596: PPUSH
11597: CALL_OW 559
// InitStreamMode ;
11601: CALL 12946 0 0
// DefineStreamItems ( false ) ;
11605: LD_INT 0
11607: PPUSH
11608: CALL 13410 0 1
// end ;
11612: END
// export function SOS_MapStart ( ) ; begin
11613: LD_INT 0
11615: PPUSH
// if streamModeActive then
11616: LD_EXP 22
11620: IFFALSE 11629
// DefineStreamItems ( true ) ;
11622: LD_INT 1
11624: PPUSH
11625: CALL 13410 0 1
// UpdateLuaVariables ( ) ;
11629: CALL 11646 0 0
// UpdateFactoryWaypoints ( ) ;
11633: CALL 26532 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11637: CALL 26784 0 0
// end ;
11641: LD_VAR 0 1
11645: RET
// function UpdateLuaVariables ( ) ; begin
11646: LD_INT 0
11648: PPUSH
// if globalGameSaveCounter then
11649: LD_EXP 21
11653: IFFALSE 11687
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11655: LD_ADDR_EXP 21
11659: PUSH
11660: LD_EXP 21
11664: PPUSH
11665: CALL 72564 0 1
11669: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11670: LD_STRING setGameSaveCounter(
11672: PUSH
11673: LD_EXP 21
11677: STR
11678: PUSH
11679: LD_STRING )
11681: STR
11682: PPUSH
11683: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11687: LD_STRING setGameDifficulty(
11689: PUSH
11690: LD_OWVAR 67
11694: STR
11695: PUSH
11696: LD_STRING )
11698: STR
11699: PPUSH
11700: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11704: LD_STRING displayDifficulty(
11706: PUSH
11707: LD_OWVAR 67
11711: STR
11712: PUSH
11713: LD_STRING )
11715: STR
11716: PPUSH
11717: CALL_OW 559
// end ;
11721: LD_VAR 0 1
11725: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11726: LD_INT 0
11728: PPUSH
// if p2 = stream_mode then
11729: LD_VAR 0 2
11733: PUSH
11734: LD_INT 100
11736: EQUAL
11737: IFFALSE 12740
// begin if not StreamModeActive then
11739: LD_EXP 22
11743: NOT
11744: IFFALSE 11754
// StreamModeActive := true ;
11746: LD_ADDR_EXP 22
11750: PUSH
11751: LD_INT 1
11753: ST_TO_ADDR
// if p3 = 0 then
11754: LD_VAR 0 3
11758: PUSH
11759: LD_INT 0
11761: EQUAL
11762: IFFALSE 11768
// InitStreamMode ;
11764: CALL 12946 0 0
// if p3 = 1 then
11768: LD_VAR 0 3
11772: PUSH
11773: LD_INT 1
11775: EQUAL
11776: IFFALSE 11786
// sRocket := true ;
11778: LD_ADDR_EXP 27
11782: PUSH
11783: LD_INT 1
11785: ST_TO_ADDR
// if p3 = 2 then
11786: LD_VAR 0 3
11790: PUSH
11791: LD_INT 2
11793: EQUAL
11794: IFFALSE 11804
// sSpeed := true ;
11796: LD_ADDR_EXP 26
11800: PUSH
11801: LD_INT 1
11803: ST_TO_ADDR
// if p3 = 3 then
11804: LD_VAR 0 3
11808: PUSH
11809: LD_INT 3
11811: EQUAL
11812: IFFALSE 11822
// sEngine := true ;
11814: LD_ADDR_EXP 28
11818: PUSH
11819: LD_INT 1
11821: ST_TO_ADDR
// if p3 = 4 then
11822: LD_VAR 0 3
11826: PUSH
11827: LD_INT 4
11829: EQUAL
11830: IFFALSE 11840
// sSpec := true ;
11832: LD_ADDR_EXP 25
11836: PUSH
11837: LD_INT 1
11839: ST_TO_ADDR
// if p3 = 5 then
11840: LD_VAR 0 3
11844: PUSH
11845: LD_INT 5
11847: EQUAL
11848: IFFALSE 11858
// sLevel := true ;
11850: LD_ADDR_EXP 29
11854: PUSH
11855: LD_INT 1
11857: ST_TO_ADDR
// if p3 = 6 then
11858: LD_VAR 0 3
11862: PUSH
11863: LD_INT 6
11865: EQUAL
11866: IFFALSE 11876
// sArmoury := true ;
11868: LD_ADDR_EXP 30
11872: PUSH
11873: LD_INT 1
11875: ST_TO_ADDR
// if p3 = 7 then
11876: LD_VAR 0 3
11880: PUSH
11881: LD_INT 7
11883: EQUAL
11884: IFFALSE 11894
// sRadar := true ;
11886: LD_ADDR_EXP 31
11890: PUSH
11891: LD_INT 1
11893: ST_TO_ADDR
// if p3 = 8 then
11894: LD_VAR 0 3
11898: PUSH
11899: LD_INT 8
11901: EQUAL
11902: IFFALSE 11912
// sBunker := true ;
11904: LD_ADDR_EXP 32
11908: PUSH
11909: LD_INT 1
11911: ST_TO_ADDR
// if p3 = 9 then
11912: LD_VAR 0 3
11916: PUSH
11917: LD_INT 9
11919: EQUAL
11920: IFFALSE 11930
// sHack := true ;
11922: LD_ADDR_EXP 33
11926: PUSH
11927: LD_INT 1
11929: ST_TO_ADDR
// if p3 = 10 then
11930: LD_VAR 0 3
11934: PUSH
11935: LD_INT 10
11937: EQUAL
11938: IFFALSE 11948
// sFire := true ;
11940: LD_ADDR_EXP 34
11944: PUSH
11945: LD_INT 1
11947: ST_TO_ADDR
// if p3 = 11 then
11948: LD_VAR 0 3
11952: PUSH
11953: LD_INT 11
11955: EQUAL
11956: IFFALSE 11966
// sRefresh := true ;
11958: LD_ADDR_EXP 35
11962: PUSH
11963: LD_INT 1
11965: ST_TO_ADDR
// if p3 = 12 then
11966: LD_VAR 0 3
11970: PUSH
11971: LD_INT 12
11973: EQUAL
11974: IFFALSE 11984
// sExp := true ;
11976: LD_ADDR_EXP 36
11980: PUSH
11981: LD_INT 1
11983: ST_TO_ADDR
// if p3 = 13 then
11984: LD_VAR 0 3
11988: PUSH
11989: LD_INT 13
11991: EQUAL
11992: IFFALSE 12002
// sDepot := true ;
11994: LD_ADDR_EXP 37
11998: PUSH
11999: LD_INT 1
12001: ST_TO_ADDR
// if p3 = 14 then
12002: LD_VAR 0 3
12006: PUSH
12007: LD_INT 14
12009: EQUAL
12010: IFFALSE 12020
// sFlag := true ;
12012: LD_ADDR_EXP 38
12016: PUSH
12017: LD_INT 1
12019: ST_TO_ADDR
// if p3 = 15 then
12020: LD_VAR 0 3
12024: PUSH
12025: LD_INT 15
12027: EQUAL
12028: IFFALSE 12038
// sKamikadze := true ;
12030: LD_ADDR_EXP 46
12034: PUSH
12035: LD_INT 1
12037: ST_TO_ADDR
// if p3 = 16 then
12038: LD_VAR 0 3
12042: PUSH
12043: LD_INT 16
12045: EQUAL
12046: IFFALSE 12056
// sTroll := true ;
12048: LD_ADDR_EXP 47
12052: PUSH
12053: LD_INT 1
12055: ST_TO_ADDR
// if p3 = 17 then
12056: LD_VAR 0 3
12060: PUSH
12061: LD_INT 17
12063: EQUAL
12064: IFFALSE 12074
// sSlow := true ;
12066: LD_ADDR_EXP 48
12070: PUSH
12071: LD_INT 1
12073: ST_TO_ADDR
// if p3 = 18 then
12074: LD_VAR 0 3
12078: PUSH
12079: LD_INT 18
12081: EQUAL
12082: IFFALSE 12092
// sLack := true ;
12084: LD_ADDR_EXP 49
12088: PUSH
12089: LD_INT 1
12091: ST_TO_ADDR
// if p3 = 19 then
12092: LD_VAR 0 3
12096: PUSH
12097: LD_INT 19
12099: EQUAL
12100: IFFALSE 12110
// sTank := true ;
12102: LD_ADDR_EXP 51
12106: PUSH
12107: LD_INT 1
12109: ST_TO_ADDR
// if p3 = 20 then
12110: LD_VAR 0 3
12114: PUSH
12115: LD_INT 20
12117: EQUAL
12118: IFFALSE 12128
// sRemote := true ;
12120: LD_ADDR_EXP 52
12124: PUSH
12125: LD_INT 1
12127: ST_TO_ADDR
// if p3 = 21 then
12128: LD_VAR 0 3
12132: PUSH
12133: LD_INT 21
12135: EQUAL
12136: IFFALSE 12146
// sPowell := true ;
12138: LD_ADDR_EXP 53
12142: PUSH
12143: LD_INT 1
12145: ST_TO_ADDR
// if p3 = 22 then
12146: LD_VAR 0 3
12150: PUSH
12151: LD_INT 22
12153: EQUAL
12154: IFFALSE 12164
// sTeleport := true ;
12156: LD_ADDR_EXP 56
12160: PUSH
12161: LD_INT 1
12163: ST_TO_ADDR
// if p3 = 23 then
12164: LD_VAR 0 3
12168: PUSH
12169: LD_INT 23
12171: EQUAL
12172: IFFALSE 12182
// sOilTower := true ;
12174: LD_ADDR_EXP 58
12178: PUSH
12179: LD_INT 1
12181: ST_TO_ADDR
// if p3 = 24 then
12182: LD_VAR 0 3
12186: PUSH
12187: LD_INT 24
12189: EQUAL
12190: IFFALSE 12200
// sShovel := true ;
12192: LD_ADDR_EXP 59
12196: PUSH
12197: LD_INT 1
12199: ST_TO_ADDR
// if p3 = 25 then
12200: LD_VAR 0 3
12204: PUSH
12205: LD_INT 25
12207: EQUAL
12208: IFFALSE 12218
// sSheik := true ;
12210: LD_ADDR_EXP 60
12214: PUSH
12215: LD_INT 1
12217: ST_TO_ADDR
// if p3 = 26 then
12218: LD_VAR 0 3
12222: PUSH
12223: LD_INT 26
12225: EQUAL
12226: IFFALSE 12236
// sEarthquake := true ;
12228: LD_ADDR_EXP 62
12232: PUSH
12233: LD_INT 1
12235: ST_TO_ADDR
// if p3 = 27 then
12236: LD_VAR 0 3
12240: PUSH
12241: LD_INT 27
12243: EQUAL
12244: IFFALSE 12254
// sAI := true ;
12246: LD_ADDR_EXP 63
12250: PUSH
12251: LD_INT 1
12253: ST_TO_ADDR
// if p3 = 28 then
12254: LD_VAR 0 3
12258: PUSH
12259: LD_INT 28
12261: EQUAL
12262: IFFALSE 12272
// sCargo := true ;
12264: LD_ADDR_EXP 66
12268: PUSH
12269: LD_INT 1
12271: ST_TO_ADDR
// if p3 = 29 then
12272: LD_VAR 0 3
12276: PUSH
12277: LD_INT 29
12279: EQUAL
12280: IFFALSE 12290
// sDLaser := true ;
12282: LD_ADDR_EXP 67
12286: PUSH
12287: LD_INT 1
12289: ST_TO_ADDR
// if p3 = 30 then
12290: LD_VAR 0 3
12294: PUSH
12295: LD_INT 30
12297: EQUAL
12298: IFFALSE 12308
// sExchange := true ;
12300: LD_ADDR_EXP 68
12304: PUSH
12305: LD_INT 1
12307: ST_TO_ADDR
// if p3 = 31 then
12308: LD_VAR 0 3
12312: PUSH
12313: LD_INT 31
12315: EQUAL
12316: IFFALSE 12326
// sFac := true ;
12318: LD_ADDR_EXP 69
12322: PUSH
12323: LD_INT 1
12325: ST_TO_ADDR
// if p3 = 32 then
12326: LD_VAR 0 3
12330: PUSH
12331: LD_INT 32
12333: EQUAL
12334: IFFALSE 12344
// sPower := true ;
12336: LD_ADDR_EXP 70
12340: PUSH
12341: LD_INT 1
12343: ST_TO_ADDR
// if p3 = 33 then
12344: LD_VAR 0 3
12348: PUSH
12349: LD_INT 33
12351: EQUAL
12352: IFFALSE 12362
// sRandom := true ;
12354: LD_ADDR_EXP 71
12358: PUSH
12359: LD_INT 1
12361: ST_TO_ADDR
// if p3 = 34 then
12362: LD_VAR 0 3
12366: PUSH
12367: LD_INT 34
12369: EQUAL
12370: IFFALSE 12380
// sShield := true ;
12372: LD_ADDR_EXP 72
12376: PUSH
12377: LD_INT 1
12379: ST_TO_ADDR
// if p3 = 35 then
12380: LD_VAR 0 3
12384: PUSH
12385: LD_INT 35
12387: EQUAL
12388: IFFALSE 12398
// sTime := true ;
12390: LD_ADDR_EXP 73
12394: PUSH
12395: LD_INT 1
12397: ST_TO_ADDR
// if p3 = 36 then
12398: LD_VAR 0 3
12402: PUSH
12403: LD_INT 36
12405: EQUAL
12406: IFFALSE 12416
// sTools := true ;
12408: LD_ADDR_EXP 74
12412: PUSH
12413: LD_INT 1
12415: ST_TO_ADDR
// if p3 = 101 then
12416: LD_VAR 0 3
12420: PUSH
12421: LD_INT 101
12423: EQUAL
12424: IFFALSE 12434
// sSold := true ;
12426: LD_ADDR_EXP 39
12430: PUSH
12431: LD_INT 1
12433: ST_TO_ADDR
// if p3 = 102 then
12434: LD_VAR 0 3
12438: PUSH
12439: LD_INT 102
12441: EQUAL
12442: IFFALSE 12452
// sDiff := true ;
12444: LD_ADDR_EXP 40
12448: PUSH
12449: LD_INT 1
12451: ST_TO_ADDR
// if p3 = 103 then
12452: LD_VAR 0 3
12456: PUSH
12457: LD_INT 103
12459: EQUAL
12460: IFFALSE 12470
// sFog := true ;
12462: LD_ADDR_EXP 43
12466: PUSH
12467: LD_INT 1
12469: ST_TO_ADDR
// if p3 = 104 then
12470: LD_VAR 0 3
12474: PUSH
12475: LD_INT 104
12477: EQUAL
12478: IFFALSE 12488
// sReset := true ;
12480: LD_ADDR_EXP 44
12484: PUSH
12485: LD_INT 1
12487: ST_TO_ADDR
// if p3 = 105 then
12488: LD_VAR 0 3
12492: PUSH
12493: LD_INT 105
12495: EQUAL
12496: IFFALSE 12506
// sSun := true ;
12498: LD_ADDR_EXP 45
12502: PUSH
12503: LD_INT 1
12505: ST_TO_ADDR
// if p3 = 106 then
12506: LD_VAR 0 3
12510: PUSH
12511: LD_INT 106
12513: EQUAL
12514: IFFALSE 12524
// sTiger := true ;
12516: LD_ADDR_EXP 41
12520: PUSH
12521: LD_INT 1
12523: ST_TO_ADDR
// if p3 = 107 then
12524: LD_VAR 0 3
12528: PUSH
12529: LD_INT 107
12531: EQUAL
12532: IFFALSE 12542
// sBomb := true ;
12534: LD_ADDR_EXP 42
12538: PUSH
12539: LD_INT 1
12541: ST_TO_ADDR
// if p3 = 108 then
12542: LD_VAR 0 3
12546: PUSH
12547: LD_INT 108
12549: EQUAL
12550: IFFALSE 12560
// sWound := true ;
12552: LD_ADDR_EXP 50
12556: PUSH
12557: LD_INT 1
12559: ST_TO_ADDR
// if p3 = 109 then
12560: LD_VAR 0 3
12564: PUSH
12565: LD_INT 109
12567: EQUAL
12568: IFFALSE 12578
// sBetray := true ;
12570: LD_ADDR_EXP 54
12574: PUSH
12575: LD_INT 1
12577: ST_TO_ADDR
// if p3 = 110 then
12578: LD_VAR 0 3
12582: PUSH
12583: LD_INT 110
12585: EQUAL
12586: IFFALSE 12596
// sContamin := true ;
12588: LD_ADDR_EXP 55
12592: PUSH
12593: LD_INT 1
12595: ST_TO_ADDR
// if p3 = 111 then
12596: LD_VAR 0 3
12600: PUSH
12601: LD_INT 111
12603: EQUAL
12604: IFFALSE 12614
// sOil := true ;
12606: LD_ADDR_EXP 57
12610: PUSH
12611: LD_INT 1
12613: ST_TO_ADDR
// if p3 = 112 then
12614: LD_VAR 0 3
12618: PUSH
12619: LD_INT 112
12621: EQUAL
12622: IFFALSE 12632
// sStu := true ;
12624: LD_ADDR_EXP 61
12628: PUSH
12629: LD_INT 1
12631: ST_TO_ADDR
// if p3 = 113 then
12632: LD_VAR 0 3
12636: PUSH
12637: LD_INT 113
12639: EQUAL
12640: IFFALSE 12650
// sBazooka := true ;
12642: LD_ADDR_EXP 64
12646: PUSH
12647: LD_INT 1
12649: ST_TO_ADDR
// if p3 = 114 then
12650: LD_VAR 0 3
12654: PUSH
12655: LD_INT 114
12657: EQUAL
12658: IFFALSE 12668
// sMortar := true ;
12660: LD_ADDR_EXP 65
12664: PUSH
12665: LD_INT 1
12667: ST_TO_ADDR
// if p3 = 115 then
12668: LD_VAR 0 3
12672: PUSH
12673: LD_INT 115
12675: EQUAL
12676: IFFALSE 12686
// sRanger := true ;
12678: LD_ADDR_EXP 75
12682: PUSH
12683: LD_INT 1
12685: ST_TO_ADDR
// if p3 = 116 then
12686: LD_VAR 0 3
12690: PUSH
12691: LD_INT 116
12693: EQUAL
12694: IFFALSE 12704
// sComputer := true ;
12696: LD_ADDR_EXP 76
12700: PUSH
12701: LD_INT 1
12703: ST_TO_ADDR
// if p3 = 117 then
12704: LD_VAR 0 3
12708: PUSH
12709: LD_INT 117
12711: EQUAL
12712: IFFALSE 12722
// s30 := true ;
12714: LD_ADDR_EXP 77
12718: PUSH
12719: LD_INT 1
12721: ST_TO_ADDR
// if p3 = 118 then
12722: LD_VAR 0 3
12726: PUSH
12727: LD_INT 118
12729: EQUAL
12730: IFFALSE 12740
// s60 := true ;
12732: LD_ADDR_EXP 78
12736: PUSH
12737: LD_INT 1
12739: ST_TO_ADDR
// end ; if p2 = hack_mode then
12740: LD_VAR 0 2
12744: PUSH
12745: LD_INT 101
12747: EQUAL
12748: IFFALSE 12876
// begin case p3 of 1 :
12750: LD_VAR 0 3
12754: PUSH
12755: LD_INT 1
12757: DOUBLE
12758: EQUAL
12759: IFTRUE 12763
12761: GO 12770
12763: POP
// hHackUnlimitedResources ; 2 :
12764: CALL 25139 0 0
12768: GO 12876
12770: LD_INT 2
12772: DOUBLE
12773: EQUAL
12774: IFTRUE 12778
12776: GO 12785
12778: POP
// hHackSetLevel10 ; 3 :
12779: CALL 25272 0 0
12783: GO 12876
12785: LD_INT 3
12787: DOUBLE
12788: EQUAL
12789: IFTRUE 12793
12791: GO 12800
12793: POP
// hHackSetLevel10YourUnits ; 4 :
12794: CALL 25357 0 0
12798: GO 12876
12800: LD_INT 4
12802: DOUBLE
12803: EQUAL
12804: IFTRUE 12808
12806: GO 12815
12808: POP
// hHackInvincible ; 5 :
12809: CALL 25805 0 0
12813: GO 12876
12815: LD_INT 5
12817: DOUBLE
12818: EQUAL
12819: IFTRUE 12823
12821: GO 12830
12823: POP
// hHackInvisible ; 6 :
12824: CALL 25916 0 0
12828: GO 12876
12830: LD_INT 6
12832: DOUBLE
12833: EQUAL
12834: IFTRUE 12838
12836: GO 12845
12838: POP
// hHackChangeYourSide ; 7 :
12839: CALL 25973 0 0
12843: GO 12876
12845: LD_INT 7
12847: DOUBLE
12848: EQUAL
12849: IFTRUE 12853
12851: GO 12860
12853: POP
// hHackChangeUnitSide ; 8 :
12854: CALL 26015 0 0
12858: GO 12876
12860: LD_INT 8
12862: DOUBLE
12863: EQUAL
12864: IFTRUE 12868
12866: GO 12875
12868: POP
// hHackFog ; end ;
12869: CALL 26116 0 0
12873: GO 12876
12875: POP
// end ; if p2 = game_save_mode then
12876: LD_VAR 0 2
12880: PUSH
12881: LD_INT 102
12883: EQUAL
12884: IFFALSE 12941
// begin if p3 = 1 then
12886: LD_VAR 0 3
12890: PUSH
12891: LD_INT 1
12893: EQUAL
12894: IFFALSE 12906
// globalGameSaveCounter := p4 ;
12896: LD_ADDR_EXP 21
12900: PUSH
12901: LD_VAR 0 4
12905: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12906: LD_VAR 0 3
12910: PUSH
12911: LD_INT 2
12913: EQUAL
12914: IFFALSE 12922
12916: PUSH
12917: LD_EXP 21
12921: AND
12922: IFFALSE 12941
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12924: LD_STRING setGameSaveCounter(
12926: PUSH
12927: LD_EXP 21
12931: STR
12932: PUSH
12933: LD_STRING )
12935: STR
12936: PPUSH
12937: CALL_OW 559
// end ; end ;
12941: LD_VAR 0 7
12945: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12946: LD_INT 0
12948: PPUSH
// streamModeActive := false ;
12949: LD_ADDR_EXP 22
12953: PUSH
12954: LD_INT 0
12956: ST_TO_ADDR
// normalCounter := 36 ;
12957: LD_ADDR_EXP 23
12961: PUSH
12962: LD_INT 36
12964: ST_TO_ADDR
// hardcoreCounter := 18 ;
12965: LD_ADDR_EXP 24
12969: PUSH
12970: LD_INT 18
12972: ST_TO_ADDR
// sRocket := false ;
12973: LD_ADDR_EXP 27
12977: PUSH
12978: LD_INT 0
12980: ST_TO_ADDR
// sSpeed := false ;
12981: LD_ADDR_EXP 26
12985: PUSH
12986: LD_INT 0
12988: ST_TO_ADDR
// sEngine := false ;
12989: LD_ADDR_EXP 28
12993: PUSH
12994: LD_INT 0
12996: ST_TO_ADDR
// sSpec := false ;
12997: LD_ADDR_EXP 25
13001: PUSH
13002: LD_INT 0
13004: ST_TO_ADDR
// sLevel := false ;
13005: LD_ADDR_EXP 29
13009: PUSH
13010: LD_INT 0
13012: ST_TO_ADDR
// sArmoury := false ;
13013: LD_ADDR_EXP 30
13017: PUSH
13018: LD_INT 0
13020: ST_TO_ADDR
// sRadar := false ;
13021: LD_ADDR_EXP 31
13025: PUSH
13026: LD_INT 0
13028: ST_TO_ADDR
// sBunker := false ;
13029: LD_ADDR_EXP 32
13033: PUSH
13034: LD_INT 0
13036: ST_TO_ADDR
// sHack := false ;
13037: LD_ADDR_EXP 33
13041: PUSH
13042: LD_INT 0
13044: ST_TO_ADDR
// sFire := false ;
13045: LD_ADDR_EXP 34
13049: PUSH
13050: LD_INT 0
13052: ST_TO_ADDR
// sRefresh := false ;
13053: LD_ADDR_EXP 35
13057: PUSH
13058: LD_INT 0
13060: ST_TO_ADDR
// sExp := false ;
13061: LD_ADDR_EXP 36
13065: PUSH
13066: LD_INT 0
13068: ST_TO_ADDR
// sDepot := false ;
13069: LD_ADDR_EXP 37
13073: PUSH
13074: LD_INT 0
13076: ST_TO_ADDR
// sFlag := false ;
13077: LD_ADDR_EXP 38
13081: PUSH
13082: LD_INT 0
13084: ST_TO_ADDR
// sKamikadze := false ;
13085: LD_ADDR_EXP 46
13089: PUSH
13090: LD_INT 0
13092: ST_TO_ADDR
// sTroll := false ;
13093: LD_ADDR_EXP 47
13097: PUSH
13098: LD_INT 0
13100: ST_TO_ADDR
// sSlow := false ;
13101: LD_ADDR_EXP 48
13105: PUSH
13106: LD_INT 0
13108: ST_TO_ADDR
// sLack := false ;
13109: LD_ADDR_EXP 49
13113: PUSH
13114: LD_INT 0
13116: ST_TO_ADDR
// sTank := false ;
13117: LD_ADDR_EXP 51
13121: PUSH
13122: LD_INT 0
13124: ST_TO_ADDR
// sRemote := false ;
13125: LD_ADDR_EXP 52
13129: PUSH
13130: LD_INT 0
13132: ST_TO_ADDR
// sPowell := false ;
13133: LD_ADDR_EXP 53
13137: PUSH
13138: LD_INT 0
13140: ST_TO_ADDR
// sTeleport := false ;
13141: LD_ADDR_EXP 56
13145: PUSH
13146: LD_INT 0
13148: ST_TO_ADDR
// sOilTower := false ;
13149: LD_ADDR_EXP 58
13153: PUSH
13154: LD_INT 0
13156: ST_TO_ADDR
// sShovel := false ;
13157: LD_ADDR_EXP 59
13161: PUSH
13162: LD_INT 0
13164: ST_TO_ADDR
// sSheik := false ;
13165: LD_ADDR_EXP 60
13169: PUSH
13170: LD_INT 0
13172: ST_TO_ADDR
// sEarthquake := false ;
13173: LD_ADDR_EXP 62
13177: PUSH
13178: LD_INT 0
13180: ST_TO_ADDR
// sAI := false ;
13181: LD_ADDR_EXP 63
13185: PUSH
13186: LD_INT 0
13188: ST_TO_ADDR
// sCargo := false ;
13189: LD_ADDR_EXP 66
13193: PUSH
13194: LD_INT 0
13196: ST_TO_ADDR
// sDLaser := false ;
13197: LD_ADDR_EXP 67
13201: PUSH
13202: LD_INT 0
13204: ST_TO_ADDR
// sExchange := false ;
13205: LD_ADDR_EXP 68
13209: PUSH
13210: LD_INT 0
13212: ST_TO_ADDR
// sFac := false ;
13213: LD_ADDR_EXP 69
13217: PUSH
13218: LD_INT 0
13220: ST_TO_ADDR
// sPower := false ;
13221: LD_ADDR_EXP 70
13225: PUSH
13226: LD_INT 0
13228: ST_TO_ADDR
// sRandom := false ;
13229: LD_ADDR_EXP 71
13233: PUSH
13234: LD_INT 0
13236: ST_TO_ADDR
// sShield := false ;
13237: LD_ADDR_EXP 72
13241: PUSH
13242: LD_INT 0
13244: ST_TO_ADDR
// sTime := false ;
13245: LD_ADDR_EXP 73
13249: PUSH
13250: LD_INT 0
13252: ST_TO_ADDR
// sTools := false ;
13253: LD_ADDR_EXP 74
13257: PUSH
13258: LD_INT 0
13260: ST_TO_ADDR
// sSold := false ;
13261: LD_ADDR_EXP 39
13265: PUSH
13266: LD_INT 0
13268: ST_TO_ADDR
// sDiff := false ;
13269: LD_ADDR_EXP 40
13273: PUSH
13274: LD_INT 0
13276: ST_TO_ADDR
// sFog := false ;
13277: LD_ADDR_EXP 43
13281: PUSH
13282: LD_INT 0
13284: ST_TO_ADDR
// sReset := false ;
13285: LD_ADDR_EXP 44
13289: PUSH
13290: LD_INT 0
13292: ST_TO_ADDR
// sSun := false ;
13293: LD_ADDR_EXP 45
13297: PUSH
13298: LD_INT 0
13300: ST_TO_ADDR
// sTiger := false ;
13301: LD_ADDR_EXP 41
13305: PUSH
13306: LD_INT 0
13308: ST_TO_ADDR
// sBomb := false ;
13309: LD_ADDR_EXP 42
13313: PUSH
13314: LD_INT 0
13316: ST_TO_ADDR
// sWound := false ;
13317: LD_ADDR_EXP 50
13321: PUSH
13322: LD_INT 0
13324: ST_TO_ADDR
// sBetray := false ;
13325: LD_ADDR_EXP 54
13329: PUSH
13330: LD_INT 0
13332: ST_TO_ADDR
// sContamin := false ;
13333: LD_ADDR_EXP 55
13337: PUSH
13338: LD_INT 0
13340: ST_TO_ADDR
// sOil := false ;
13341: LD_ADDR_EXP 57
13345: PUSH
13346: LD_INT 0
13348: ST_TO_ADDR
// sStu := false ;
13349: LD_ADDR_EXP 61
13353: PUSH
13354: LD_INT 0
13356: ST_TO_ADDR
// sBazooka := false ;
13357: LD_ADDR_EXP 64
13361: PUSH
13362: LD_INT 0
13364: ST_TO_ADDR
// sMortar := false ;
13365: LD_ADDR_EXP 65
13369: PUSH
13370: LD_INT 0
13372: ST_TO_ADDR
// sRanger := false ;
13373: LD_ADDR_EXP 75
13377: PUSH
13378: LD_INT 0
13380: ST_TO_ADDR
// sComputer := false ;
13381: LD_ADDR_EXP 76
13385: PUSH
13386: LD_INT 0
13388: ST_TO_ADDR
// s30 := false ;
13389: LD_ADDR_EXP 77
13393: PUSH
13394: LD_INT 0
13396: ST_TO_ADDR
// s60 := false ;
13397: LD_ADDR_EXP 78
13401: PUSH
13402: LD_INT 0
13404: ST_TO_ADDR
// end ;
13405: LD_VAR 0 1
13409: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13410: LD_INT 0
13412: PPUSH
13413: PPUSH
13414: PPUSH
13415: PPUSH
13416: PPUSH
13417: PPUSH
13418: PPUSH
// result := [ ] ;
13419: LD_ADDR_VAR 0 2
13423: PUSH
13424: EMPTY
13425: ST_TO_ADDR
// if campaign_id = 1 then
13426: LD_OWVAR 69
13430: PUSH
13431: LD_INT 1
13433: EQUAL
13434: IFFALSE 16600
// begin case mission_number of 1 :
13436: LD_OWVAR 70
13440: PUSH
13441: LD_INT 1
13443: DOUBLE
13444: EQUAL
13445: IFTRUE 13449
13447: GO 13525
13449: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13450: LD_ADDR_VAR 0 2
13454: PUSH
13455: LD_INT 2
13457: PUSH
13458: LD_INT 4
13460: PUSH
13461: LD_INT 11
13463: PUSH
13464: LD_INT 12
13466: PUSH
13467: LD_INT 15
13469: PUSH
13470: LD_INT 16
13472: PUSH
13473: LD_INT 22
13475: PUSH
13476: LD_INT 23
13478: PUSH
13479: LD_INT 26
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 101
13495: PUSH
13496: LD_INT 102
13498: PUSH
13499: LD_INT 106
13501: PUSH
13502: LD_INT 116
13504: PUSH
13505: LD_INT 117
13507: PUSH
13508: LD_INT 118
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: ST_TO_ADDR
13523: GO 16598
13525: LD_INT 2
13527: DOUBLE
13528: EQUAL
13529: IFTRUE 13533
13531: GO 13617
13533: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13534: LD_ADDR_VAR 0 2
13538: PUSH
13539: LD_INT 2
13541: PUSH
13542: LD_INT 4
13544: PUSH
13545: LD_INT 11
13547: PUSH
13548: LD_INT 12
13550: PUSH
13551: LD_INT 15
13553: PUSH
13554: LD_INT 16
13556: PUSH
13557: LD_INT 22
13559: PUSH
13560: LD_INT 23
13562: PUSH
13563: LD_INT 26
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 101
13579: PUSH
13580: LD_INT 102
13582: PUSH
13583: LD_INT 105
13585: PUSH
13586: LD_INT 106
13588: PUSH
13589: LD_INT 108
13591: PUSH
13592: LD_INT 116
13594: PUSH
13595: LD_INT 117
13597: PUSH
13598: LD_INT 118
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: ST_TO_ADDR
13615: GO 16598
13617: LD_INT 3
13619: DOUBLE
13620: EQUAL
13621: IFTRUE 13625
13623: GO 13713
13625: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13626: LD_ADDR_VAR 0 2
13630: PUSH
13631: LD_INT 2
13633: PUSH
13634: LD_INT 4
13636: PUSH
13637: LD_INT 5
13639: PUSH
13640: LD_INT 11
13642: PUSH
13643: LD_INT 12
13645: PUSH
13646: LD_INT 15
13648: PUSH
13649: LD_INT 16
13651: PUSH
13652: LD_INT 22
13654: PUSH
13655: LD_INT 26
13657: PUSH
13658: LD_INT 36
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 101
13675: PUSH
13676: LD_INT 102
13678: PUSH
13679: LD_INT 105
13681: PUSH
13682: LD_INT 106
13684: PUSH
13685: LD_INT 108
13687: PUSH
13688: LD_INT 116
13690: PUSH
13691: LD_INT 117
13693: PUSH
13694: LD_INT 118
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: ST_TO_ADDR
13711: GO 16598
13713: LD_INT 4
13715: DOUBLE
13716: EQUAL
13717: IFTRUE 13721
13719: GO 13817
13721: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13722: LD_ADDR_VAR 0 2
13726: PUSH
13727: LD_INT 2
13729: PUSH
13730: LD_INT 4
13732: PUSH
13733: LD_INT 5
13735: PUSH
13736: LD_INT 8
13738: PUSH
13739: LD_INT 11
13741: PUSH
13742: LD_INT 12
13744: PUSH
13745: LD_INT 15
13747: PUSH
13748: LD_INT 16
13750: PUSH
13751: LD_INT 22
13753: PUSH
13754: LD_INT 23
13756: PUSH
13757: LD_INT 26
13759: PUSH
13760: LD_INT 36
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 101
13779: PUSH
13780: LD_INT 102
13782: PUSH
13783: LD_INT 105
13785: PUSH
13786: LD_INT 106
13788: PUSH
13789: LD_INT 108
13791: PUSH
13792: LD_INT 116
13794: PUSH
13795: LD_INT 117
13797: PUSH
13798: LD_INT 118
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: ST_TO_ADDR
13815: GO 16598
13817: LD_INT 5
13819: DOUBLE
13820: EQUAL
13821: IFTRUE 13825
13823: GO 13937
13825: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13826: LD_ADDR_VAR 0 2
13830: PUSH
13831: LD_INT 2
13833: PUSH
13834: LD_INT 4
13836: PUSH
13837: LD_INT 5
13839: PUSH
13840: LD_INT 6
13842: PUSH
13843: LD_INT 8
13845: PUSH
13846: LD_INT 11
13848: PUSH
13849: LD_INT 12
13851: PUSH
13852: LD_INT 15
13854: PUSH
13855: LD_INT 16
13857: PUSH
13858: LD_INT 22
13860: PUSH
13861: LD_INT 23
13863: PUSH
13864: LD_INT 25
13866: PUSH
13867: LD_INT 26
13869: PUSH
13870: LD_INT 36
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: PUSH
13889: LD_INT 101
13891: PUSH
13892: LD_INT 102
13894: PUSH
13895: LD_INT 105
13897: PUSH
13898: LD_INT 106
13900: PUSH
13901: LD_INT 108
13903: PUSH
13904: LD_INT 109
13906: PUSH
13907: LD_INT 112
13909: PUSH
13910: LD_INT 116
13912: PUSH
13913: LD_INT 117
13915: PUSH
13916: LD_INT 118
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: ST_TO_ADDR
13935: GO 16598
13937: LD_INT 6
13939: DOUBLE
13940: EQUAL
13941: IFTRUE 13945
13943: GO 14077
13945: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13946: LD_ADDR_VAR 0 2
13950: PUSH
13951: LD_INT 2
13953: PUSH
13954: LD_INT 4
13956: PUSH
13957: LD_INT 5
13959: PUSH
13960: LD_INT 6
13962: PUSH
13963: LD_INT 8
13965: PUSH
13966: LD_INT 11
13968: PUSH
13969: LD_INT 12
13971: PUSH
13972: LD_INT 15
13974: PUSH
13975: LD_INT 16
13977: PUSH
13978: LD_INT 20
13980: PUSH
13981: LD_INT 21
13983: PUSH
13984: LD_INT 22
13986: PUSH
13987: LD_INT 23
13989: PUSH
13990: LD_INT 25
13992: PUSH
13993: LD_INT 26
13995: PUSH
13996: LD_INT 30
13998: PUSH
13999: LD_INT 31
14001: PUSH
14002: LD_INT 32
14004: PUSH
14005: LD_INT 36
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 101
14031: PUSH
14032: LD_INT 102
14034: PUSH
14035: LD_INT 105
14037: PUSH
14038: LD_INT 106
14040: PUSH
14041: LD_INT 108
14043: PUSH
14044: LD_INT 109
14046: PUSH
14047: LD_INT 112
14049: PUSH
14050: LD_INT 116
14052: PUSH
14053: LD_INT 117
14055: PUSH
14056: LD_INT 118
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: ST_TO_ADDR
14075: GO 16598
14077: LD_INT 7
14079: DOUBLE
14080: EQUAL
14081: IFTRUE 14085
14083: GO 14197
14085: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14086: LD_ADDR_VAR 0 2
14090: PUSH
14091: LD_INT 2
14093: PUSH
14094: LD_INT 4
14096: PUSH
14097: LD_INT 5
14099: PUSH
14100: LD_INT 7
14102: PUSH
14103: LD_INT 11
14105: PUSH
14106: LD_INT 12
14108: PUSH
14109: LD_INT 15
14111: PUSH
14112: LD_INT 16
14114: PUSH
14115: LD_INT 20
14117: PUSH
14118: LD_INT 21
14120: PUSH
14121: LD_INT 22
14123: PUSH
14124: LD_INT 23
14126: PUSH
14127: LD_INT 25
14129: PUSH
14130: LD_INT 26
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 101
14151: PUSH
14152: LD_INT 102
14154: PUSH
14155: LD_INT 103
14157: PUSH
14158: LD_INT 105
14160: PUSH
14161: LD_INT 106
14163: PUSH
14164: LD_INT 108
14166: PUSH
14167: LD_INT 112
14169: PUSH
14170: LD_INT 116
14172: PUSH
14173: LD_INT 117
14175: PUSH
14176: LD_INT 118
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: ST_TO_ADDR
14195: GO 16598
14197: LD_INT 8
14199: DOUBLE
14200: EQUAL
14201: IFTRUE 14205
14203: GO 14345
14205: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14206: LD_ADDR_VAR 0 2
14210: PUSH
14211: LD_INT 2
14213: PUSH
14214: LD_INT 4
14216: PUSH
14217: LD_INT 5
14219: PUSH
14220: LD_INT 6
14222: PUSH
14223: LD_INT 7
14225: PUSH
14226: LD_INT 8
14228: PUSH
14229: LD_INT 11
14231: PUSH
14232: LD_INT 12
14234: PUSH
14235: LD_INT 15
14237: PUSH
14238: LD_INT 16
14240: PUSH
14241: LD_INT 20
14243: PUSH
14244: LD_INT 21
14246: PUSH
14247: LD_INT 22
14249: PUSH
14250: LD_INT 23
14252: PUSH
14253: LD_INT 25
14255: PUSH
14256: LD_INT 26
14258: PUSH
14259: LD_INT 30
14261: PUSH
14262: LD_INT 31
14264: PUSH
14265: LD_INT 32
14267: PUSH
14268: LD_INT 36
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 101
14295: PUSH
14296: LD_INT 102
14298: PUSH
14299: LD_INT 103
14301: PUSH
14302: LD_INT 105
14304: PUSH
14305: LD_INT 106
14307: PUSH
14308: LD_INT 108
14310: PUSH
14311: LD_INT 109
14313: PUSH
14314: LD_INT 112
14316: PUSH
14317: LD_INT 116
14319: PUSH
14320: LD_INT 117
14322: PUSH
14323: LD_INT 118
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: ST_TO_ADDR
14343: GO 16598
14345: LD_INT 9
14347: DOUBLE
14348: EQUAL
14349: IFTRUE 14353
14351: GO 14501
14353: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14354: LD_ADDR_VAR 0 2
14358: PUSH
14359: LD_INT 2
14361: PUSH
14362: LD_INT 4
14364: PUSH
14365: LD_INT 5
14367: PUSH
14368: LD_INT 6
14370: PUSH
14371: LD_INT 7
14373: PUSH
14374: LD_INT 8
14376: PUSH
14377: LD_INT 11
14379: PUSH
14380: LD_INT 12
14382: PUSH
14383: LD_INT 15
14385: PUSH
14386: LD_INT 16
14388: PUSH
14389: LD_INT 20
14391: PUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 22
14397: PUSH
14398: LD_INT 23
14400: PUSH
14401: LD_INT 25
14403: PUSH
14404: LD_INT 26
14406: PUSH
14407: LD_INT 28
14409: PUSH
14410: LD_INT 30
14412: PUSH
14413: LD_INT 31
14415: PUSH
14416: LD_INT 32
14418: PUSH
14419: LD_INT 36
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 101
14447: PUSH
14448: LD_INT 102
14450: PUSH
14451: LD_INT 103
14453: PUSH
14454: LD_INT 105
14456: PUSH
14457: LD_INT 106
14459: PUSH
14460: LD_INT 108
14462: PUSH
14463: LD_INT 109
14465: PUSH
14466: LD_INT 112
14468: PUSH
14469: LD_INT 114
14471: PUSH
14472: LD_INT 116
14474: PUSH
14475: LD_INT 117
14477: PUSH
14478: LD_INT 118
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: ST_TO_ADDR
14499: GO 16598
14501: LD_INT 10
14503: DOUBLE
14504: EQUAL
14505: IFTRUE 14509
14507: GO 14705
14509: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14510: LD_ADDR_VAR 0 2
14514: PUSH
14515: LD_INT 2
14517: PUSH
14518: LD_INT 4
14520: PUSH
14521: LD_INT 5
14523: PUSH
14524: LD_INT 6
14526: PUSH
14527: LD_INT 7
14529: PUSH
14530: LD_INT 8
14532: PUSH
14533: LD_INT 9
14535: PUSH
14536: LD_INT 10
14538: PUSH
14539: LD_INT 11
14541: PUSH
14542: LD_INT 12
14544: PUSH
14545: LD_INT 13
14547: PUSH
14548: LD_INT 14
14550: PUSH
14551: LD_INT 15
14553: PUSH
14554: LD_INT 16
14556: PUSH
14557: LD_INT 17
14559: PUSH
14560: LD_INT 18
14562: PUSH
14563: LD_INT 19
14565: PUSH
14566: LD_INT 20
14568: PUSH
14569: LD_INT 21
14571: PUSH
14572: LD_INT 22
14574: PUSH
14575: LD_INT 23
14577: PUSH
14578: LD_INT 24
14580: PUSH
14581: LD_INT 25
14583: PUSH
14584: LD_INT 26
14586: PUSH
14587: LD_INT 28
14589: PUSH
14590: LD_INT 30
14592: PUSH
14593: LD_INT 31
14595: PUSH
14596: LD_INT 32
14598: PUSH
14599: LD_INT 36
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 101
14635: PUSH
14636: LD_INT 102
14638: PUSH
14639: LD_INT 103
14641: PUSH
14642: LD_INT 104
14644: PUSH
14645: LD_INT 105
14647: PUSH
14648: LD_INT 106
14650: PUSH
14651: LD_INT 107
14653: PUSH
14654: LD_INT 108
14656: PUSH
14657: LD_INT 109
14659: PUSH
14660: LD_INT 110
14662: PUSH
14663: LD_INT 111
14665: PUSH
14666: LD_INT 112
14668: PUSH
14669: LD_INT 114
14671: PUSH
14672: LD_INT 116
14674: PUSH
14675: LD_INT 117
14677: PUSH
14678: LD_INT 118
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: ST_TO_ADDR
14703: GO 16598
14705: LD_INT 11
14707: DOUBLE
14708: EQUAL
14709: IFTRUE 14713
14711: GO 14917
14713: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14714: LD_ADDR_VAR 0 2
14718: PUSH
14719: LD_INT 2
14721: PUSH
14722: LD_INT 3
14724: PUSH
14725: LD_INT 4
14727: PUSH
14728: LD_INT 5
14730: PUSH
14731: LD_INT 6
14733: PUSH
14734: LD_INT 7
14736: PUSH
14737: LD_INT 8
14739: PUSH
14740: LD_INT 9
14742: PUSH
14743: LD_INT 10
14745: PUSH
14746: LD_INT 11
14748: PUSH
14749: LD_INT 12
14751: PUSH
14752: LD_INT 13
14754: PUSH
14755: LD_INT 14
14757: PUSH
14758: LD_INT 15
14760: PUSH
14761: LD_INT 16
14763: PUSH
14764: LD_INT 17
14766: PUSH
14767: LD_INT 18
14769: PUSH
14770: LD_INT 19
14772: PUSH
14773: LD_INT 20
14775: PUSH
14776: LD_INT 21
14778: PUSH
14779: LD_INT 22
14781: PUSH
14782: LD_INT 23
14784: PUSH
14785: LD_INT 24
14787: PUSH
14788: LD_INT 25
14790: PUSH
14791: LD_INT 26
14793: PUSH
14794: LD_INT 28
14796: PUSH
14797: LD_INT 30
14799: PUSH
14800: LD_INT 31
14802: PUSH
14803: LD_INT 32
14805: PUSH
14806: LD_INT 34
14808: PUSH
14809: LD_INT 36
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 101
14847: PUSH
14848: LD_INT 102
14850: PUSH
14851: LD_INT 103
14853: PUSH
14854: LD_INT 104
14856: PUSH
14857: LD_INT 105
14859: PUSH
14860: LD_INT 106
14862: PUSH
14863: LD_INT 107
14865: PUSH
14866: LD_INT 108
14868: PUSH
14869: LD_INT 109
14871: PUSH
14872: LD_INT 110
14874: PUSH
14875: LD_INT 111
14877: PUSH
14878: LD_INT 112
14880: PUSH
14881: LD_INT 114
14883: PUSH
14884: LD_INT 116
14886: PUSH
14887: LD_INT 117
14889: PUSH
14890: LD_INT 118
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: ST_TO_ADDR
14915: GO 16598
14917: LD_INT 12
14919: DOUBLE
14920: EQUAL
14921: IFTRUE 14925
14923: GO 15145
14925: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14926: LD_ADDR_VAR 0 2
14930: PUSH
14931: LD_INT 1
14933: PUSH
14934: LD_INT 2
14936: PUSH
14937: LD_INT 3
14939: PUSH
14940: LD_INT 4
14942: PUSH
14943: LD_INT 5
14945: PUSH
14946: LD_INT 6
14948: PUSH
14949: LD_INT 7
14951: PUSH
14952: LD_INT 8
14954: PUSH
14955: LD_INT 9
14957: PUSH
14958: LD_INT 10
14960: PUSH
14961: LD_INT 11
14963: PUSH
14964: LD_INT 12
14966: PUSH
14967: LD_INT 13
14969: PUSH
14970: LD_INT 14
14972: PUSH
14973: LD_INT 15
14975: PUSH
14976: LD_INT 16
14978: PUSH
14979: LD_INT 17
14981: PUSH
14982: LD_INT 18
14984: PUSH
14985: LD_INT 19
14987: PUSH
14988: LD_INT 20
14990: PUSH
14991: LD_INT 21
14993: PUSH
14994: LD_INT 22
14996: PUSH
14997: LD_INT 23
14999: PUSH
15000: LD_INT 24
15002: PUSH
15003: LD_INT 25
15005: PUSH
15006: LD_INT 26
15008: PUSH
15009: LD_INT 27
15011: PUSH
15012: LD_INT 28
15014: PUSH
15015: LD_INT 30
15017: PUSH
15018: LD_INT 31
15020: PUSH
15021: LD_INT 32
15023: PUSH
15024: LD_INT 33
15026: PUSH
15027: LD_INT 34
15029: PUSH
15030: LD_INT 36
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 101
15071: PUSH
15072: LD_INT 102
15074: PUSH
15075: LD_INT 103
15077: PUSH
15078: LD_INT 104
15080: PUSH
15081: LD_INT 105
15083: PUSH
15084: LD_INT 106
15086: PUSH
15087: LD_INT 107
15089: PUSH
15090: LD_INT 108
15092: PUSH
15093: LD_INT 109
15095: PUSH
15096: LD_INT 110
15098: PUSH
15099: LD_INT 111
15101: PUSH
15102: LD_INT 112
15104: PUSH
15105: LD_INT 113
15107: PUSH
15108: LD_INT 114
15110: PUSH
15111: LD_INT 116
15113: PUSH
15114: LD_INT 117
15116: PUSH
15117: LD_INT 118
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: ST_TO_ADDR
15143: GO 16598
15145: LD_INT 13
15147: DOUBLE
15148: EQUAL
15149: IFTRUE 15153
15151: GO 15361
15153: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15154: LD_ADDR_VAR 0 2
15158: PUSH
15159: LD_INT 1
15161: PUSH
15162: LD_INT 2
15164: PUSH
15165: LD_INT 3
15167: PUSH
15168: LD_INT 4
15170: PUSH
15171: LD_INT 5
15173: PUSH
15174: LD_INT 8
15176: PUSH
15177: LD_INT 9
15179: PUSH
15180: LD_INT 10
15182: PUSH
15183: LD_INT 11
15185: PUSH
15186: LD_INT 12
15188: PUSH
15189: LD_INT 14
15191: PUSH
15192: LD_INT 15
15194: PUSH
15195: LD_INT 16
15197: PUSH
15198: LD_INT 17
15200: PUSH
15201: LD_INT 18
15203: PUSH
15204: LD_INT 19
15206: PUSH
15207: LD_INT 20
15209: PUSH
15210: LD_INT 21
15212: PUSH
15213: LD_INT 22
15215: PUSH
15216: LD_INT 23
15218: PUSH
15219: LD_INT 24
15221: PUSH
15222: LD_INT 25
15224: PUSH
15225: LD_INT 26
15227: PUSH
15228: LD_INT 27
15230: PUSH
15231: LD_INT 28
15233: PUSH
15234: LD_INT 30
15236: PUSH
15237: LD_INT 31
15239: PUSH
15240: LD_INT 32
15242: PUSH
15243: LD_INT 33
15245: PUSH
15246: LD_INT 34
15248: PUSH
15249: LD_INT 36
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: PUSH
15285: LD_INT 101
15287: PUSH
15288: LD_INT 102
15290: PUSH
15291: LD_INT 103
15293: PUSH
15294: LD_INT 104
15296: PUSH
15297: LD_INT 105
15299: PUSH
15300: LD_INT 106
15302: PUSH
15303: LD_INT 107
15305: PUSH
15306: LD_INT 108
15308: PUSH
15309: LD_INT 109
15311: PUSH
15312: LD_INT 110
15314: PUSH
15315: LD_INT 111
15317: PUSH
15318: LD_INT 112
15320: PUSH
15321: LD_INT 113
15323: PUSH
15324: LD_INT 114
15326: PUSH
15327: LD_INT 116
15329: PUSH
15330: LD_INT 117
15332: PUSH
15333: LD_INT 118
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: ST_TO_ADDR
15359: GO 16598
15361: LD_INT 14
15363: DOUBLE
15364: EQUAL
15365: IFTRUE 15369
15367: GO 15593
15369: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15370: LD_ADDR_VAR 0 2
15374: PUSH
15375: LD_INT 1
15377: PUSH
15378: LD_INT 2
15380: PUSH
15381: LD_INT 3
15383: PUSH
15384: LD_INT 4
15386: PUSH
15387: LD_INT 5
15389: PUSH
15390: LD_INT 6
15392: PUSH
15393: LD_INT 7
15395: PUSH
15396: LD_INT 8
15398: PUSH
15399: LD_INT 9
15401: PUSH
15402: LD_INT 10
15404: PUSH
15405: LD_INT 11
15407: PUSH
15408: LD_INT 12
15410: PUSH
15411: LD_INT 13
15413: PUSH
15414: LD_INT 14
15416: PUSH
15417: LD_INT 15
15419: PUSH
15420: LD_INT 16
15422: PUSH
15423: LD_INT 17
15425: PUSH
15426: LD_INT 18
15428: PUSH
15429: LD_INT 19
15431: PUSH
15432: LD_INT 20
15434: PUSH
15435: LD_INT 21
15437: PUSH
15438: LD_INT 22
15440: PUSH
15441: LD_INT 23
15443: PUSH
15444: LD_INT 24
15446: PUSH
15447: LD_INT 25
15449: PUSH
15450: LD_INT 26
15452: PUSH
15453: LD_INT 27
15455: PUSH
15456: LD_INT 28
15458: PUSH
15459: LD_INT 29
15461: PUSH
15462: LD_INT 30
15464: PUSH
15465: LD_INT 31
15467: PUSH
15468: LD_INT 32
15470: PUSH
15471: LD_INT 33
15473: PUSH
15474: LD_INT 34
15476: PUSH
15477: LD_INT 36
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: PUSH
15517: LD_INT 101
15519: PUSH
15520: LD_INT 102
15522: PUSH
15523: LD_INT 103
15525: PUSH
15526: LD_INT 104
15528: PUSH
15529: LD_INT 105
15531: PUSH
15532: LD_INT 106
15534: PUSH
15535: LD_INT 107
15537: PUSH
15538: LD_INT 108
15540: PUSH
15541: LD_INT 109
15543: PUSH
15544: LD_INT 110
15546: PUSH
15547: LD_INT 111
15549: PUSH
15550: LD_INT 112
15552: PUSH
15553: LD_INT 113
15555: PUSH
15556: LD_INT 114
15558: PUSH
15559: LD_INT 116
15561: PUSH
15562: LD_INT 117
15564: PUSH
15565: LD_INT 118
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: ST_TO_ADDR
15591: GO 16598
15593: LD_INT 15
15595: DOUBLE
15596: EQUAL
15597: IFTRUE 15601
15599: GO 15825
15601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15602: LD_ADDR_VAR 0 2
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: LD_INT 2
15612: PUSH
15613: LD_INT 3
15615: PUSH
15616: LD_INT 4
15618: PUSH
15619: LD_INT 5
15621: PUSH
15622: LD_INT 6
15624: PUSH
15625: LD_INT 7
15627: PUSH
15628: LD_INT 8
15630: PUSH
15631: LD_INT 9
15633: PUSH
15634: LD_INT 10
15636: PUSH
15637: LD_INT 11
15639: PUSH
15640: LD_INT 12
15642: PUSH
15643: LD_INT 13
15645: PUSH
15646: LD_INT 14
15648: PUSH
15649: LD_INT 15
15651: PUSH
15652: LD_INT 16
15654: PUSH
15655: LD_INT 17
15657: PUSH
15658: LD_INT 18
15660: PUSH
15661: LD_INT 19
15663: PUSH
15664: LD_INT 20
15666: PUSH
15667: LD_INT 21
15669: PUSH
15670: LD_INT 22
15672: PUSH
15673: LD_INT 23
15675: PUSH
15676: LD_INT 24
15678: PUSH
15679: LD_INT 25
15681: PUSH
15682: LD_INT 26
15684: PUSH
15685: LD_INT 27
15687: PUSH
15688: LD_INT 28
15690: PUSH
15691: LD_INT 29
15693: PUSH
15694: LD_INT 30
15696: PUSH
15697: LD_INT 31
15699: PUSH
15700: LD_INT 32
15702: PUSH
15703: LD_INT 33
15705: PUSH
15706: LD_INT 34
15708: PUSH
15709: LD_INT 36
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 101
15751: PUSH
15752: LD_INT 102
15754: PUSH
15755: LD_INT 103
15757: PUSH
15758: LD_INT 104
15760: PUSH
15761: LD_INT 105
15763: PUSH
15764: LD_INT 106
15766: PUSH
15767: LD_INT 107
15769: PUSH
15770: LD_INT 108
15772: PUSH
15773: LD_INT 109
15775: PUSH
15776: LD_INT 110
15778: PUSH
15779: LD_INT 111
15781: PUSH
15782: LD_INT 112
15784: PUSH
15785: LD_INT 113
15787: PUSH
15788: LD_INT 114
15790: PUSH
15791: LD_INT 116
15793: PUSH
15794: LD_INT 117
15796: PUSH
15797: LD_INT 118
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: ST_TO_ADDR
15823: GO 16598
15825: LD_INT 16
15827: DOUBLE
15828: EQUAL
15829: IFTRUE 15833
15831: GO 15969
15833: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15834: LD_ADDR_VAR 0 2
15838: PUSH
15839: LD_INT 2
15841: PUSH
15842: LD_INT 4
15844: PUSH
15845: LD_INT 5
15847: PUSH
15848: LD_INT 7
15850: PUSH
15851: LD_INT 11
15853: PUSH
15854: LD_INT 12
15856: PUSH
15857: LD_INT 15
15859: PUSH
15860: LD_INT 16
15862: PUSH
15863: LD_INT 20
15865: PUSH
15866: LD_INT 21
15868: PUSH
15869: LD_INT 22
15871: PUSH
15872: LD_INT 23
15874: PUSH
15875: LD_INT 25
15877: PUSH
15878: LD_INT 26
15880: PUSH
15881: LD_INT 30
15883: PUSH
15884: LD_INT 31
15886: PUSH
15887: LD_INT 32
15889: PUSH
15890: LD_INT 33
15892: PUSH
15893: LD_INT 34
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 101
15919: PUSH
15920: LD_INT 102
15922: PUSH
15923: LD_INT 103
15925: PUSH
15926: LD_INT 106
15928: PUSH
15929: LD_INT 108
15931: PUSH
15932: LD_INT 112
15934: PUSH
15935: LD_INT 113
15937: PUSH
15938: LD_INT 114
15940: PUSH
15941: LD_INT 116
15943: PUSH
15944: LD_INT 117
15946: PUSH
15947: LD_INT 118
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: ST_TO_ADDR
15967: GO 16598
15969: LD_INT 17
15971: DOUBLE
15972: EQUAL
15973: IFTRUE 15977
15975: GO 16201
15977: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15978: LD_ADDR_VAR 0 2
15982: PUSH
15983: LD_INT 1
15985: PUSH
15986: LD_INT 2
15988: PUSH
15989: LD_INT 3
15991: PUSH
15992: LD_INT 4
15994: PUSH
15995: LD_INT 5
15997: PUSH
15998: LD_INT 6
16000: PUSH
16001: LD_INT 7
16003: PUSH
16004: LD_INT 8
16006: PUSH
16007: LD_INT 9
16009: PUSH
16010: LD_INT 10
16012: PUSH
16013: LD_INT 11
16015: PUSH
16016: LD_INT 12
16018: PUSH
16019: LD_INT 13
16021: PUSH
16022: LD_INT 14
16024: PUSH
16025: LD_INT 15
16027: PUSH
16028: LD_INT 16
16030: PUSH
16031: LD_INT 17
16033: PUSH
16034: LD_INT 18
16036: PUSH
16037: LD_INT 19
16039: PUSH
16040: LD_INT 20
16042: PUSH
16043: LD_INT 21
16045: PUSH
16046: LD_INT 22
16048: PUSH
16049: LD_INT 23
16051: PUSH
16052: LD_INT 24
16054: PUSH
16055: LD_INT 25
16057: PUSH
16058: LD_INT 26
16060: PUSH
16061: LD_INT 27
16063: PUSH
16064: LD_INT 28
16066: PUSH
16067: LD_INT 29
16069: PUSH
16070: LD_INT 30
16072: PUSH
16073: LD_INT 31
16075: PUSH
16076: LD_INT 32
16078: PUSH
16079: LD_INT 33
16081: PUSH
16082: LD_INT 34
16084: PUSH
16085: LD_INT 36
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 101
16127: PUSH
16128: LD_INT 102
16130: PUSH
16131: LD_INT 103
16133: PUSH
16134: LD_INT 104
16136: PUSH
16137: LD_INT 105
16139: PUSH
16140: LD_INT 106
16142: PUSH
16143: LD_INT 107
16145: PUSH
16146: LD_INT 108
16148: PUSH
16149: LD_INT 109
16151: PUSH
16152: LD_INT 110
16154: PUSH
16155: LD_INT 111
16157: PUSH
16158: LD_INT 112
16160: PUSH
16161: LD_INT 113
16163: PUSH
16164: LD_INT 114
16166: PUSH
16167: LD_INT 116
16169: PUSH
16170: LD_INT 117
16172: PUSH
16173: LD_INT 118
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: ST_TO_ADDR
16199: GO 16598
16201: LD_INT 18
16203: DOUBLE
16204: EQUAL
16205: IFTRUE 16209
16207: GO 16357
16209: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16210: LD_ADDR_VAR 0 2
16214: PUSH
16215: LD_INT 2
16217: PUSH
16218: LD_INT 4
16220: PUSH
16221: LD_INT 5
16223: PUSH
16224: LD_INT 7
16226: PUSH
16227: LD_INT 11
16229: PUSH
16230: LD_INT 12
16232: PUSH
16233: LD_INT 15
16235: PUSH
16236: LD_INT 16
16238: PUSH
16239: LD_INT 20
16241: PUSH
16242: LD_INT 21
16244: PUSH
16245: LD_INT 22
16247: PUSH
16248: LD_INT 23
16250: PUSH
16251: LD_INT 25
16253: PUSH
16254: LD_INT 26
16256: PUSH
16257: LD_INT 30
16259: PUSH
16260: LD_INT 31
16262: PUSH
16263: LD_INT 32
16265: PUSH
16266: LD_INT 33
16268: PUSH
16269: LD_INT 34
16271: PUSH
16272: LD_INT 35
16274: PUSH
16275: LD_INT 36
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 101
16303: PUSH
16304: LD_INT 102
16306: PUSH
16307: LD_INT 103
16309: PUSH
16310: LD_INT 106
16312: PUSH
16313: LD_INT 108
16315: PUSH
16316: LD_INT 112
16318: PUSH
16319: LD_INT 113
16321: PUSH
16322: LD_INT 114
16324: PUSH
16325: LD_INT 115
16327: PUSH
16328: LD_INT 116
16330: PUSH
16331: LD_INT 117
16333: PUSH
16334: LD_INT 118
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: ST_TO_ADDR
16355: GO 16598
16357: LD_INT 19
16359: DOUBLE
16360: EQUAL
16361: IFTRUE 16365
16363: GO 16597
16365: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16366: LD_ADDR_VAR 0 2
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: LD_INT 2
16376: PUSH
16377: LD_INT 3
16379: PUSH
16380: LD_INT 4
16382: PUSH
16383: LD_INT 5
16385: PUSH
16386: LD_INT 6
16388: PUSH
16389: LD_INT 7
16391: PUSH
16392: LD_INT 8
16394: PUSH
16395: LD_INT 9
16397: PUSH
16398: LD_INT 10
16400: PUSH
16401: LD_INT 11
16403: PUSH
16404: LD_INT 12
16406: PUSH
16407: LD_INT 13
16409: PUSH
16410: LD_INT 14
16412: PUSH
16413: LD_INT 15
16415: PUSH
16416: LD_INT 16
16418: PUSH
16419: LD_INT 17
16421: PUSH
16422: LD_INT 18
16424: PUSH
16425: LD_INT 19
16427: PUSH
16428: LD_INT 20
16430: PUSH
16431: LD_INT 21
16433: PUSH
16434: LD_INT 22
16436: PUSH
16437: LD_INT 23
16439: PUSH
16440: LD_INT 24
16442: PUSH
16443: LD_INT 25
16445: PUSH
16446: LD_INT 26
16448: PUSH
16449: LD_INT 27
16451: PUSH
16452: LD_INT 28
16454: PUSH
16455: LD_INT 29
16457: PUSH
16458: LD_INT 30
16460: PUSH
16461: LD_INT 31
16463: PUSH
16464: LD_INT 32
16466: PUSH
16467: LD_INT 33
16469: PUSH
16470: LD_INT 34
16472: PUSH
16473: LD_INT 35
16475: PUSH
16476: LD_INT 36
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 101
16519: PUSH
16520: LD_INT 102
16522: PUSH
16523: LD_INT 103
16525: PUSH
16526: LD_INT 104
16528: PUSH
16529: LD_INT 105
16531: PUSH
16532: LD_INT 106
16534: PUSH
16535: LD_INT 107
16537: PUSH
16538: LD_INT 108
16540: PUSH
16541: LD_INT 109
16543: PUSH
16544: LD_INT 110
16546: PUSH
16547: LD_INT 111
16549: PUSH
16550: LD_INT 112
16552: PUSH
16553: LD_INT 113
16555: PUSH
16556: LD_INT 114
16558: PUSH
16559: LD_INT 115
16561: PUSH
16562: LD_INT 116
16564: PUSH
16565: LD_INT 117
16567: PUSH
16568: LD_INT 118
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: ST_TO_ADDR
16595: GO 16598
16597: POP
// end else
16598: GO 16829
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16600: LD_ADDR_VAR 0 2
16604: PUSH
16605: LD_INT 1
16607: PUSH
16608: LD_INT 2
16610: PUSH
16611: LD_INT 3
16613: PUSH
16614: LD_INT 4
16616: PUSH
16617: LD_INT 5
16619: PUSH
16620: LD_INT 6
16622: PUSH
16623: LD_INT 7
16625: PUSH
16626: LD_INT 8
16628: PUSH
16629: LD_INT 9
16631: PUSH
16632: LD_INT 10
16634: PUSH
16635: LD_INT 11
16637: PUSH
16638: LD_INT 12
16640: PUSH
16641: LD_INT 13
16643: PUSH
16644: LD_INT 14
16646: PUSH
16647: LD_INT 15
16649: PUSH
16650: LD_INT 16
16652: PUSH
16653: LD_INT 17
16655: PUSH
16656: LD_INT 18
16658: PUSH
16659: LD_INT 19
16661: PUSH
16662: LD_INT 20
16664: PUSH
16665: LD_INT 21
16667: PUSH
16668: LD_INT 22
16670: PUSH
16671: LD_INT 23
16673: PUSH
16674: LD_INT 24
16676: PUSH
16677: LD_INT 25
16679: PUSH
16680: LD_INT 26
16682: PUSH
16683: LD_INT 27
16685: PUSH
16686: LD_INT 28
16688: PUSH
16689: LD_INT 29
16691: PUSH
16692: LD_INT 30
16694: PUSH
16695: LD_INT 31
16697: PUSH
16698: LD_INT 32
16700: PUSH
16701: LD_INT 33
16703: PUSH
16704: LD_INT 34
16706: PUSH
16707: LD_INT 35
16709: PUSH
16710: LD_INT 36
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 101
16753: PUSH
16754: LD_INT 102
16756: PUSH
16757: LD_INT 103
16759: PUSH
16760: LD_INT 104
16762: PUSH
16763: LD_INT 105
16765: PUSH
16766: LD_INT 106
16768: PUSH
16769: LD_INT 107
16771: PUSH
16772: LD_INT 108
16774: PUSH
16775: LD_INT 109
16777: PUSH
16778: LD_INT 110
16780: PUSH
16781: LD_INT 111
16783: PUSH
16784: LD_INT 112
16786: PUSH
16787: LD_INT 113
16789: PUSH
16790: LD_INT 114
16792: PUSH
16793: LD_INT 115
16795: PUSH
16796: LD_INT 116
16798: PUSH
16799: LD_INT 117
16801: PUSH
16802: LD_INT 118
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: ST_TO_ADDR
// if result then
16829: LD_VAR 0 2
16833: IFFALSE 17619
// begin normal :=  ;
16835: LD_ADDR_VAR 0 5
16839: PUSH
16840: LD_STRING 
16842: ST_TO_ADDR
// hardcore :=  ;
16843: LD_ADDR_VAR 0 6
16847: PUSH
16848: LD_STRING 
16850: ST_TO_ADDR
// active :=  ;
16851: LD_ADDR_VAR 0 7
16855: PUSH
16856: LD_STRING 
16858: ST_TO_ADDR
// for i = 1 to normalCounter do
16859: LD_ADDR_VAR 0 8
16863: PUSH
16864: DOUBLE
16865: LD_INT 1
16867: DEC
16868: ST_TO_ADDR
16869: LD_EXP 23
16873: PUSH
16874: FOR_TO
16875: IFFALSE 16976
// begin tmp := 0 ;
16877: LD_ADDR_VAR 0 3
16881: PUSH
16882: LD_STRING 0
16884: ST_TO_ADDR
// if result [ 1 ] then
16885: LD_VAR 0 2
16889: PUSH
16890: LD_INT 1
16892: ARRAY
16893: IFFALSE 16958
// if result [ 1 ] [ 1 ] = i then
16895: LD_VAR 0 2
16899: PUSH
16900: LD_INT 1
16902: ARRAY
16903: PUSH
16904: LD_INT 1
16906: ARRAY
16907: PUSH
16908: LD_VAR 0 8
16912: EQUAL
16913: IFFALSE 16958
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16915: LD_ADDR_VAR 0 2
16919: PUSH
16920: LD_VAR 0 2
16924: PPUSH
16925: LD_INT 1
16927: PPUSH
16928: LD_VAR 0 2
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_INT 1
16939: PPUSH
16940: CALL_OW 3
16944: PPUSH
16945: CALL_OW 1
16949: ST_TO_ADDR
// tmp := 1 ;
16950: LD_ADDR_VAR 0 3
16954: PUSH
16955: LD_STRING 1
16957: ST_TO_ADDR
// end ; normal := normal & tmp ;
16958: LD_ADDR_VAR 0 5
16962: PUSH
16963: LD_VAR 0 5
16967: PUSH
16968: LD_VAR 0 3
16972: STR
16973: ST_TO_ADDR
// end ;
16974: GO 16874
16976: POP
16977: POP
// for i = 1 to hardcoreCounter do
16978: LD_ADDR_VAR 0 8
16982: PUSH
16983: DOUBLE
16984: LD_INT 1
16986: DEC
16987: ST_TO_ADDR
16988: LD_EXP 24
16992: PUSH
16993: FOR_TO
16994: IFFALSE 17099
// begin tmp := 0 ;
16996: LD_ADDR_VAR 0 3
17000: PUSH
17001: LD_STRING 0
17003: ST_TO_ADDR
// if result [ 2 ] then
17004: LD_VAR 0 2
17008: PUSH
17009: LD_INT 2
17011: ARRAY
17012: IFFALSE 17081
// if result [ 2 ] [ 1 ] = 100 + i then
17014: LD_VAR 0 2
17018: PUSH
17019: LD_INT 2
17021: ARRAY
17022: PUSH
17023: LD_INT 1
17025: ARRAY
17026: PUSH
17027: LD_INT 100
17029: PUSH
17030: LD_VAR 0 8
17034: PLUS
17035: EQUAL
17036: IFFALSE 17081
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17038: LD_ADDR_VAR 0 2
17042: PUSH
17043: LD_VAR 0 2
17047: PPUSH
17048: LD_INT 2
17050: PPUSH
17051: LD_VAR 0 2
17055: PUSH
17056: LD_INT 2
17058: ARRAY
17059: PPUSH
17060: LD_INT 1
17062: PPUSH
17063: CALL_OW 3
17067: PPUSH
17068: CALL_OW 1
17072: ST_TO_ADDR
// tmp := 1 ;
17073: LD_ADDR_VAR 0 3
17077: PUSH
17078: LD_STRING 1
17080: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17081: LD_ADDR_VAR 0 6
17085: PUSH
17086: LD_VAR 0 6
17090: PUSH
17091: LD_VAR 0 3
17095: STR
17096: ST_TO_ADDR
// end ;
17097: GO 16993
17099: POP
17100: POP
// if isGameLoad then
17101: LD_VAR 0 1
17105: IFFALSE 17580
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17107: LD_ADDR_VAR 0 4
17111: PUSH
17112: LD_EXP 27
17116: PUSH
17117: LD_EXP 26
17121: PUSH
17122: LD_EXP 28
17126: PUSH
17127: LD_EXP 25
17131: PUSH
17132: LD_EXP 29
17136: PUSH
17137: LD_EXP 30
17141: PUSH
17142: LD_EXP 31
17146: PUSH
17147: LD_EXP 32
17151: PUSH
17152: LD_EXP 33
17156: PUSH
17157: LD_EXP 34
17161: PUSH
17162: LD_EXP 35
17166: PUSH
17167: LD_EXP 36
17171: PUSH
17172: LD_EXP 37
17176: PUSH
17177: LD_EXP 38
17181: PUSH
17182: LD_EXP 46
17186: PUSH
17187: LD_EXP 47
17191: PUSH
17192: LD_EXP 48
17196: PUSH
17197: LD_EXP 49
17201: PUSH
17202: LD_EXP 51
17206: PUSH
17207: LD_EXP 52
17211: PUSH
17212: LD_EXP 53
17216: PUSH
17217: LD_EXP 56
17221: PUSH
17222: LD_EXP 58
17226: PUSH
17227: LD_EXP 59
17231: PUSH
17232: LD_EXP 60
17236: PUSH
17237: LD_EXP 62
17241: PUSH
17242: LD_EXP 63
17246: PUSH
17247: LD_EXP 66
17251: PUSH
17252: LD_EXP 67
17256: PUSH
17257: LD_EXP 68
17261: PUSH
17262: LD_EXP 69
17266: PUSH
17267: LD_EXP 70
17271: PUSH
17272: LD_EXP 71
17276: PUSH
17277: LD_EXP 72
17281: PUSH
17282: LD_EXP 73
17286: PUSH
17287: LD_EXP 74
17291: PUSH
17292: LD_EXP 39
17296: PUSH
17297: LD_EXP 40
17301: PUSH
17302: LD_EXP 43
17306: PUSH
17307: LD_EXP 44
17311: PUSH
17312: LD_EXP 45
17316: PUSH
17317: LD_EXP 41
17321: PUSH
17322: LD_EXP 42
17326: PUSH
17327: LD_EXP 50
17331: PUSH
17332: LD_EXP 54
17336: PUSH
17337: LD_EXP 55
17341: PUSH
17342: LD_EXP 57
17346: PUSH
17347: LD_EXP 61
17351: PUSH
17352: LD_EXP 64
17356: PUSH
17357: LD_EXP 65
17361: PUSH
17362: LD_EXP 75
17366: PUSH
17367: LD_EXP 76
17371: PUSH
17372: LD_EXP 77
17376: PUSH
17377: LD_EXP 78
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: ST_TO_ADDR
// tmp :=  ;
17438: LD_ADDR_VAR 0 3
17442: PUSH
17443: LD_STRING 
17445: ST_TO_ADDR
// for i = 1 to normalCounter do
17446: LD_ADDR_VAR 0 8
17450: PUSH
17451: DOUBLE
17452: LD_INT 1
17454: DEC
17455: ST_TO_ADDR
17456: LD_EXP 23
17460: PUSH
17461: FOR_TO
17462: IFFALSE 17498
// begin if flags [ i ] then
17464: LD_VAR 0 4
17468: PUSH
17469: LD_VAR 0 8
17473: ARRAY
17474: IFFALSE 17496
// tmp := tmp & i & ; ;
17476: LD_ADDR_VAR 0 3
17480: PUSH
17481: LD_VAR 0 3
17485: PUSH
17486: LD_VAR 0 8
17490: STR
17491: PUSH
17492: LD_STRING ;
17494: STR
17495: ST_TO_ADDR
// end ;
17496: GO 17461
17498: POP
17499: POP
// for i = 1 to hardcoreCounter do
17500: LD_ADDR_VAR 0 8
17504: PUSH
17505: DOUBLE
17506: LD_INT 1
17508: DEC
17509: ST_TO_ADDR
17510: LD_EXP 24
17514: PUSH
17515: FOR_TO
17516: IFFALSE 17562
// begin if flags [ normalCounter + i ] then
17518: LD_VAR 0 4
17522: PUSH
17523: LD_EXP 23
17527: PUSH
17528: LD_VAR 0 8
17532: PLUS
17533: ARRAY
17534: IFFALSE 17560
// tmp := tmp & ( 100 + i ) & ; ;
17536: LD_ADDR_VAR 0 3
17540: PUSH
17541: LD_VAR 0 3
17545: PUSH
17546: LD_INT 100
17548: PUSH
17549: LD_VAR 0 8
17553: PLUS
17554: STR
17555: PUSH
17556: LD_STRING ;
17558: STR
17559: ST_TO_ADDR
// end ;
17560: GO 17515
17562: POP
17563: POP
// if tmp then
17564: LD_VAR 0 3
17568: IFFALSE 17580
// active := tmp ;
17570: LD_ADDR_VAR 0 7
17574: PUSH
17575: LD_VAR 0 3
17579: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17580: LD_STRING getStreamItemsFromMission("
17582: PUSH
17583: LD_VAR 0 5
17587: STR
17588: PUSH
17589: LD_STRING ","
17591: STR
17592: PUSH
17593: LD_VAR 0 6
17597: STR
17598: PUSH
17599: LD_STRING ","
17601: STR
17602: PUSH
17603: LD_VAR 0 7
17607: STR
17608: PUSH
17609: LD_STRING ")
17611: STR
17612: PPUSH
17613: CALL_OW 559
// end else
17617: GO 17626
// ToLua ( getStreamItemsFromMission("","","") ) ;
17619: LD_STRING getStreamItemsFromMission("","","")
17621: PPUSH
17622: CALL_OW 559
// end ;
17626: LD_VAR 0 2
17630: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17631: LD_EXP 22
17635: IFFALSE 17643
17637: PUSH
17638: LD_EXP 27
17642: AND
17643: IFFALSE 17767
17645: GO 17647
17647: DISABLE
17648: LD_INT 0
17650: PPUSH
17651: PPUSH
// begin enable ;
17652: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17653: LD_ADDR_VAR 0 2
17657: PUSH
17658: LD_INT 22
17660: PUSH
17661: LD_OWVAR 2
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 2
17672: PUSH
17673: LD_INT 34
17675: PUSH
17676: LD_INT 7
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 34
17685: PUSH
17686: LD_INT 45
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 34
17695: PUSH
17696: LD_INT 28
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 34
17705: PUSH
17706: LD_INT 47
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PPUSH
17724: CALL_OW 69
17728: ST_TO_ADDR
// if not tmp then
17729: LD_VAR 0 2
17733: NOT
17734: IFFALSE 17738
// exit ;
17736: GO 17767
// for i in tmp do
17738: LD_ADDR_VAR 0 1
17742: PUSH
17743: LD_VAR 0 2
17747: PUSH
17748: FOR_IN
17749: IFFALSE 17765
// begin SetLives ( i , 0 ) ;
17751: LD_VAR 0 1
17755: PPUSH
17756: LD_INT 0
17758: PPUSH
17759: CALL_OW 234
// end ;
17763: GO 17748
17765: POP
17766: POP
// end ;
17767: PPOPN 2
17769: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17770: LD_EXP 22
17774: IFFALSE 17782
17776: PUSH
17777: LD_EXP 28
17781: AND
17782: IFFALSE 17866
17784: GO 17786
17786: DISABLE
17787: LD_INT 0
17789: PPUSH
17790: PPUSH
// begin enable ;
17791: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17792: LD_ADDR_VAR 0 2
17796: PUSH
17797: LD_INT 22
17799: PUSH
17800: LD_OWVAR 2
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 32
17811: PUSH
17812: LD_INT 3
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PPUSH
17823: CALL_OW 69
17827: ST_TO_ADDR
// if not tmp then
17828: LD_VAR 0 2
17832: NOT
17833: IFFALSE 17837
// exit ;
17835: GO 17866
// for i in tmp do
17837: LD_ADDR_VAR 0 1
17841: PUSH
17842: LD_VAR 0 2
17846: PUSH
17847: FOR_IN
17848: IFFALSE 17864
// begin SetLives ( i , 0 ) ;
17850: LD_VAR 0 1
17854: PPUSH
17855: LD_INT 0
17857: PPUSH
17858: CALL_OW 234
// end ;
17862: GO 17847
17864: POP
17865: POP
// end ;
17866: PPOPN 2
17868: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17869: LD_EXP 22
17873: IFFALSE 17881
17875: PUSH
17876: LD_EXP 25
17880: AND
17881: IFFALSE 17974
17883: GO 17885
17885: DISABLE
17886: LD_INT 0
17888: PPUSH
// begin enable ;
17889: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17890: LD_ADDR_VAR 0 1
17894: PUSH
17895: LD_INT 22
17897: PUSH
17898: LD_OWVAR 2
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 2
17909: PUSH
17910: LD_INT 25
17912: PUSH
17913: LD_INT 5
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 25
17922: PUSH
17923: LD_INT 9
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 25
17932: PUSH
17933: LD_INT 8
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PPUSH
17950: CALL_OW 69
17954: PUSH
17955: FOR_IN
17956: IFFALSE 17972
// begin SetClass ( i , 1 ) ;
17958: LD_VAR 0 1
17962: PPUSH
17963: LD_INT 1
17965: PPUSH
17966: CALL_OW 336
// end ;
17970: GO 17955
17972: POP
17973: POP
// end ;
17974: PPOPN 1
17976: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17977: LD_EXP 22
17981: IFFALSE 17989
17983: PUSH
17984: LD_EXP 26
17988: AND
17989: IFFALSE 18001
17991: PUSH
17992: LD_OWVAR 65
17996: PUSH
17997: LD_INT 7
17999: LESS
18000: AND
18001: IFFALSE 18015
18003: GO 18005
18005: DISABLE
// begin enable ;
18006: ENABLE
// game_speed := 7 ;
18007: LD_ADDR_OWVAR 65
18011: PUSH
18012: LD_INT 7
18014: ST_TO_ADDR
// end ;
18015: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18016: LD_EXP 22
18020: IFFALSE 18028
18022: PUSH
18023: LD_EXP 29
18027: AND
18028: IFFALSE 18230
18030: GO 18032
18032: DISABLE
18033: LD_INT 0
18035: PPUSH
18036: PPUSH
18037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18038: LD_ADDR_VAR 0 3
18042: PUSH
18043: LD_INT 81
18045: PUSH
18046: LD_OWVAR 2
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 21
18057: PUSH
18058: LD_INT 1
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PPUSH
18069: CALL_OW 69
18073: ST_TO_ADDR
// if not tmp then
18074: LD_VAR 0 3
18078: NOT
18079: IFFALSE 18083
// exit ;
18081: GO 18230
// if tmp > 5 then
18083: LD_VAR 0 3
18087: PUSH
18088: LD_INT 5
18090: GREATER
18091: IFFALSE 18103
// k := 5 else
18093: LD_ADDR_VAR 0 2
18097: PUSH
18098: LD_INT 5
18100: ST_TO_ADDR
18101: GO 18113
// k := tmp ;
18103: LD_ADDR_VAR 0 2
18107: PUSH
18108: LD_VAR 0 3
18112: ST_TO_ADDR
// for i := 1 to k do
18113: LD_ADDR_VAR 0 1
18117: PUSH
18118: DOUBLE
18119: LD_INT 1
18121: DEC
18122: ST_TO_ADDR
18123: LD_VAR 0 2
18127: PUSH
18128: FOR_TO
18129: IFFALSE 18228
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18131: LD_VAR 0 3
18135: PUSH
18136: LD_VAR 0 1
18140: ARRAY
18141: PPUSH
18142: LD_VAR 0 1
18146: PUSH
18147: LD_INT 4
18149: MOD
18150: PUSH
18151: LD_INT 1
18153: PLUS
18154: PPUSH
18155: CALL_OW 259
18159: PUSH
18160: LD_INT 10
18162: LESS
18163: IFFALSE 18226
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18165: LD_VAR 0 3
18169: PUSH
18170: LD_VAR 0 1
18174: ARRAY
18175: PPUSH
18176: LD_VAR 0 1
18180: PUSH
18181: LD_INT 4
18183: MOD
18184: PUSH
18185: LD_INT 1
18187: PLUS
18188: PPUSH
18189: LD_VAR 0 3
18193: PUSH
18194: LD_VAR 0 1
18198: ARRAY
18199: PPUSH
18200: LD_VAR 0 1
18204: PUSH
18205: LD_INT 4
18207: MOD
18208: PUSH
18209: LD_INT 1
18211: PLUS
18212: PPUSH
18213: CALL_OW 259
18217: PUSH
18218: LD_INT 1
18220: PLUS
18221: PPUSH
18222: CALL_OW 237
18226: GO 18128
18228: POP
18229: POP
// end ;
18230: PPOPN 3
18232: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18233: LD_EXP 22
18237: IFFALSE 18245
18239: PUSH
18240: LD_EXP 30
18244: AND
18245: IFFALSE 18265
18247: GO 18249
18249: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18250: LD_INT 4
18252: PPUSH
18253: LD_OWVAR 2
18257: PPUSH
18258: LD_INT 0
18260: PPUSH
18261: CALL_OW 324
18265: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18266: LD_EXP 22
18270: IFFALSE 18278
18272: PUSH
18273: LD_EXP 59
18277: AND
18278: IFFALSE 18298
18280: GO 18282
18282: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18283: LD_INT 19
18285: PPUSH
18286: LD_OWVAR 2
18290: PPUSH
18291: LD_INT 0
18293: PPUSH
18294: CALL_OW 324
18298: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18299: LD_EXP 22
18303: IFFALSE 18311
18305: PUSH
18306: LD_EXP 31
18310: AND
18311: IFFALSE 18413
18313: GO 18315
18315: DISABLE
18316: LD_INT 0
18318: PPUSH
18319: PPUSH
// begin enable ;
18320: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18321: LD_ADDR_VAR 0 2
18325: PUSH
18326: LD_INT 22
18328: PUSH
18329: LD_OWVAR 2
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 34
18343: PUSH
18344: LD_INT 11
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 34
18353: PUSH
18354: LD_INT 30
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: LIST
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PPUSH
18370: CALL_OW 69
18374: ST_TO_ADDR
// if not tmp then
18375: LD_VAR 0 2
18379: NOT
18380: IFFALSE 18384
// exit ;
18382: GO 18413
// for i in tmp do
18384: LD_ADDR_VAR 0 1
18388: PUSH
18389: LD_VAR 0 2
18393: PUSH
18394: FOR_IN
18395: IFFALSE 18411
// begin SetLives ( i , 0 ) ;
18397: LD_VAR 0 1
18401: PPUSH
18402: LD_INT 0
18404: PPUSH
18405: CALL_OW 234
// end ;
18409: GO 18394
18411: POP
18412: POP
// end ;
18413: PPOPN 2
18415: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18416: LD_EXP 22
18420: IFFALSE 18428
18422: PUSH
18423: LD_EXP 32
18427: AND
18428: IFFALSE 18448
18430: GO 18432
18432: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18433: LD_INT 32
18435: PPUSH
18436: LD_OWVAR 2
18440: PPUSH
18441: LD_INT 0
18443: PPUSH
18444: CALL_OW 324
18448: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18449: LD_EXP 22
18453: IFFALSE 18461
18455: PUSH
18456: LD_EXP 33
18460: AND
18461: IFFALSE 18644
18463: GO 18465
18465: DISABLE
18466: LD_INT 0
18468: PPUSH
18469: PPUSH
18470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18471: LD_ADDR_VAR 0 2
18475: PUSH
18476: LD_INT 22
18478: PUSH
18479: LD_OWVAR 2
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 33
18490: PUSH
18491: LD_INT 3
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PPUSH
18502: CALL_OW 69
18506: ST_TO_ADDR
// if not tmp then
18507: LD_VAR 0 2
18511: NOT
18512: IFFALSE 18516
// exit ;
18514: GO 18644
// side := 0 ;
18516: LD_ADDR_VAR 0 3
18520: PUSH
18521: LD_INT 0
18523: ST_TO_ADDR
// for i := 1 to 8 do
18524: LD_ADDR_VAR 0 1
18528: PUSH
18529: DOUBLE
18530: LD_INT 1
18532: DEC
18533: ST_TO_ADDR
18534: LD_INT 8
18536: PUSH
18537: FOR_TO
18538: IFFALSE 18588
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18540: LD_OWVAR 2
18544: PUSH
18545: LD_VAR 0 1
18549: NONEQUAL
18550: IFFALSE 18572
18552: PUSH
18553: LD_OWVAR 2
18557: PPUSH
18558: LD_VAR 0 1
18562: PPUSH
18563: CALL_OW 81
18567: PUSH
18568: LD_INT 2
18570: EQUAL
18571: AND
18572: IFFALSE 18586
// begin side := i ;
18574: LD_ADDR_VAR 0 3
18578: PUSH
18579: LD_VAR 0 1
18583: ST_TO_ADDR
// break ;
18584: GO 18588
// end ;
18586: GO 18537
18588: POP
18589: POP
// if not side then
18590: LD_VAR 0 3
18594: NOT
18595: IFFALSE 18599
// exit ;
18597: GO 18644
// for i := 1 to tmp do
18599: LD_ADDR_VAR 0 1
18603: PUSH
18604: DOUBLE
18605: LD_INT 1
18607: DEC
18608: ST_TO_ADDR
18609: LD_VAR 0 2
18613: PUSH
18614: FOR_TO
18615: IFFALSE 18642
// if Prob ( 60 ) then
18617: LD_INT 60
18619: PPUSH
18620: CALL_OW 13
18624: IFFALSE 18640
// SetSide ( i , side ) ;
18626: LD_VAR 0 1
18630: PPUSH
18631: LD_VAR 0 3
18635: PPUSH
18636: CALL_OW 235
18640: GO 18614
18642: POP
18643: POP
// end ;
18644: PPOPN 3
18646: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18647: LD_EXP 22
18651: IFFALSE 18659
18653: PUSH
18654: LD_EXP 35
18658: AND
18659: IFFALSE 18778
18661: GO 18663
18663: DISABLE
18664: LD_INT 0
18666: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18667: LD_ADDR_VAR 0 1
18671: PUSH
18672: LD_INT 22
18674: PUSH
18675: LD_OWVAR 2
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 21
18686: PUSH
18687: LD_INT 1
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 3
18696: PUSH
18697: LD_INT 23
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: LIST
18715: PPUSH
18716: CALL_OW 69
18720: PUSH
18721: FOR_IN
18722: IFFALSE 18776
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18724: LD_VAR 0 1
18728: PPUSH
18729: CALL_OW 257
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: LD_INT 3
18742: PUSH
18743: LD_INT 4
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: IN
18752: IFFALSE 18774
// SetClass ( un , rand ( 1 , 4 ) ) ;
18754: LD_VAR 0 1
18758: PPUSH
18759: LD_INT 1
18761: PPUSH
18762: LD_INT 4
18764: PPUSH
18765: CALL_OW 12
18769: PPUSH
18770: CALL_OW 336
18774: GO 18721
18776: POP
18777: POP
// end ;
18778: PPOPN 1
18780: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18781: LD_EXP 22
18785: IFFALSE 18793
18787: PUSH
18788: LD_EXP 34
18792: AND
18793: IFFALSE 18872
18795: GO 18797
18797: DISABLE
18798: LD_INT 0
18800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18801: LD_ADDR_VAR 0 1
18805: PUSH
18806: LD_INT 22
18808: PUSH
18809: LD_OWVAR 2
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 21
18820: PUSH
18821: LD_INT 3
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PPUSH
18832: CALL_OW 69
18836: ST_TO_ADDR
// if not tmp then
18837: LD_VAR 0 1
18841: NOT
18842: IFFALSE 18846
// exit ;
18844: GO 18872
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18846: LD_VAR 0 1
18850: PUSH
18851: LD_INT 1
18853: PPUSH
18854: LD_VAR 0 1
18858: PPUSH
18859: CALL_OW 12
18863: ARRAY
18864: PPUSH
18865: LD_INT 100
18867: PPUSH
18868: CALL_OW 234
// end ;
18872: PPOPN 1
18874: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18875: LD_EXP 22
18879: IFFALSE 18887
18881: PUSH
18882: LD_EXP 36
18886: AND
18887: IFFALSE 18985
18889: GO 18891
18891: DISABLE
18892: LD_INT 0
18894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18895: LD_ADDR_VAR 0 1
18899: PUSH
18900: LD_INT 22
18902: PUSH
18903: LD_OWVAR 2
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 21
18914: PUSH
18915: LD_INT 1
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PPUSH
18926: CALL_OW 69
18930: ST_TO_ADDR
// if not tmp then
18931: LD_VAR 0 1
18935: NOT
18936: IFFALSE 18940
// exit ;
18938: GO 18985
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18940: LD_VAR 0 1
18944: PUSH
18945: LD_INT 1
18947: PPUSH
18948: LD_VAR 0 1
18952: PPUSH
18953: CALL_OW 12
18957: ARRAY
18958: PPUSH
18959: LD_INT 1
18961: PPUSH
18962: LD_INT 4
18964: PPUSH
18965: CALL_OW 12
18969: PPUSH
18970: LD_INT 3000
18972: PPUSH
18973: LD_INT 9000
18975: PPUSH
18976: CALL_OW 12
18980: PPUSH
18981: CALL_OW 492
// end ;
18985: PPOPN 1
18987: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18988: LD_EXP 22
18992: IFFALSE 19000
18994: PUSH
18995: LD_EXP 37
18999: AND
19000: IFFALSE 19020
19002: GO 19004
19004: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19005: LD_INT 1
19007: PPUSH
19008: LD_OWVAR 2
19012: PPUSH
19013: LD_INT 0
19015: PPUSH
19016: CALL_OW 324
19020: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19021: LD_EXP 22
19025: IFFALSE 19033
19027: PUSH
19028: LD_EXP 38
19032: AND
19033: IFFALSE 19116
19035: GO 19037
19037: DISABLE
19038: LD_INT 0
19040: PPUSH
19041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19042: LD_ADDR_VAR 0 2
19046: PUSH
19047: LD_INT 22
19049: PUSH
19050: LD_OWVAR 2
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 21
19061: PUSH
19062: LD_INT 3
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PPUSH
19073: CALL_OW 69
19077: ST_TO_ADDR
// if not tmp then
19078: LD_VAR 0 2
19082: NOT
19083: IFFALSE 19087
// exit ;
19085: GO 19116
// for i in tmp do
19087: LD_ADDR_VAR 0 1
19091: PUSH
19092: LD_VAR 0 2
19096: PUSH
19097: FOR_IN
19098: IFFALSE 19114
// SetBLevel ( i , 10 ) ;
19100: LD_VAR 0 1
19104: PPUSH
19105: LD_INT 10
19107: PPUSH
19108: CALL_OW 241
19112: GO 19097
19114: POP
19115: POP
// end ;
19116: PPOPN 2
19118: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19119: LD_EXP 22
19123: IFFALSE 19131
19125: PUSH
19126: LD_EXP 39
19130: AND
19131: IFFALSE 19242
19133: GO 19135
19135: DISABLE
19136: LD_INT 0
19138: PPUSH
19139: PPUSH
19140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19141: LD_ADDR_VAR 0 3
19145: PUSH
19146: LD_INT 22
19148: PUSH
19149: LD_OWVAR 2
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 25
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PPUSH
19172: CALL_OW 69
19176: ST_TO_ADDR
// if not tmp then
19177: LD_VAR 0 3
19181: NOT
19182: IFFALSE 19186
// exit ;
19184: GO 19242
// un := tmp [ rand ( 1 , tmp ) ] ;
19186: LD_ADDR_VAR 0 2
19190: PUSH
19191: LD_VAR 0 3
19195: PUSH
19196: LD_INT 1
19198: PPUSH
19199: LD_VAR 0 3
19203: PPUSH
19204: CALL_OW 12
19208: ARRAY
19209: ST_TO_ADDR
// if Crawls ( un ) then
19210: LD_VAR 0 2
19214: PPUSH
19215: CALL_OW 318
19219: IFFALSE 19230
// ComWalk ( un ) ;
19221: LD_VAR 0 2
19225: PPUSH
19226: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19230: LD_VAR 0 2
19234: PPUSH
19235: LD_INT 5
19237: PPUSH
19238: CALL_OW 336
// end ;
19242: PPOPN 3
19244: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19245: LD_EXP 22
19249: IFFALSE 19257
19251: PUSH
19252: LD_EXP 40
19256: AND
19257: IFFALSE 19269
19259: PUSH
19260: LD_OWVAR 67
19264: PUSH
19265: LD_INT 4
19267: LESS
19268: AND
19269: IFFALSE 19288
19271: GO 19273
19273: DISABLE
// begin Difficulty := Difficulty + 1 ;
19274: LD_ADDR_OWVAR 67
19278: PUSH
19279: LD_OWVAR 67
19283: PUSH
19284: LD_INT 1
19286: PLUS
19287: ST_TO_ADDR
// end ;
19288: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19289: LD_EXP 22
19293: IFFALSE 19301
19295: PUSH
19296: LD_EXP 41
19300: AND
19301: IFFALSE 19404
19303: GO 19305
19305: DISABLE
19306: LD_INT 0
19308: PPUSH
// begin for i := 1 to 5 do
19309: LD_ADDR_VAR 0 1
19313: PUSH
19314: DOUBLE
19315: LD_INT 1
19317: DEC
19318: ST_TO_ADDR
19319: LD_INT 5
19321: PUSH
19322: FOR_TO
19323: IFFALSE 19402
// begin uc_nation := nation_nature ;
19325: LD_ADDR_OWVAR 21
19329: PUSH
19330: LD_INT 0
19332: ST_TO_ADDR
// uc_side := 0 ;
19333: LD_ADDR_OWVAR 20
19337: PUSH
19338: LD_INT 0
19340: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19341: LD_ADDR_OWVAR 29
19345: PUSH
19346: LD_INT 12
19348: PUSH
19349: LD_INT 12
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: ST_TO_ADDR
// hc_agressivity := 20 ;
19356: LD_ADDR_OWVAR 35
19360: PUSH
19361: LD_INT 20
19363: ST_TO_ADDR
// hc_class := class_tiger ;
19364: LD_ADDR_OWVAR 28
19368: PUSH
19369: LD_INT 14
19371: ST_TO_ADDR
// hc_gallery :=  ;
19372: LD_ADDR_OWVAR 33
19376: PUSH
19377: LD_STRING 
19379: ST_TO_ADDR
// hc_name :=  ;
19380: LD_ADDR_OWVAR 26
19384: PUSH
19385: LD_STRING 
19387: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19388: CALL_OW 44
19392: PPUSH
19393: LD_INT 0
19395: PPUSH
19396: CALL_OW 51
// end ;
19400: GO 19322
19402: POP
19403: POP
// end ;
19404: PPOPN 1
19406: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19407: LD_EXP 22
19411: IFFALSE 19419
19413: PUSH
19414: LD_EXP 42
19418: AND
19419: IFFALSE 19428
19421: GO 19423
19423: DISABLE
// StreamSibBomb ;
19424: CALL 19429 0 0
19428: END
// export function StreamSibBomb ; var i , x , y ; begin
19429: LD_INT 0
19431: PPUSH
19432: PPUSH
19433: PPUSH
19434: PPUSH
// result := false ;
19435: LD_ADDR_VAR 0 1
19439: PUSH
19440: LD_INT 0
19442: ST_TO_ADDR
// for i := 1 to 16 do
19443: LD_ADDR_VAR 0 2
19447: PUSH
19448: DOUBLE
19449: LD_INT 1
19451: DEC
19452: ST_TO_ADDR
19453: LD_INT 16
19455: PUSH
19456: FOR_TO
19457: IFFALSE 19656
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19459: LD_ADDR_VAR 0 3
19463: PUSH
19464: LD_INT 10
19466: PUSH
19467: LD_INT 20
19469: PUSH
19470: LD_INT 30
19472: PUSH
19473: LD_INT 40
19475: PUSH
19476: LD_INT 50
19478: PUSH
19479: LD_INT 60
19481: PUSH
19482: LD_INT 70
19484: PUSH
19485: LD_INT 80
19487: PUSH
19488: LD_INT 90
19490: PUSH
19491: LD_INT 100
19493: PUSH
19494: LD_INT 110
19496: PUSH
19497: LD_INT 120
19499: PUSH
19500: LD_INT 130
19502: PUSH
19503: LD_INT 140
19505: PUSH
19506: LD_INT 150
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 1
19528: PPUSH
19529: LD_INT 15
19531: PPUSH
19532: CALL_OW 12
19536: ARRAY
19537: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19538: LD_ADDR_VAR 0 4
19542: PUSH
19543: LD_INT 10
19545: PUSH
19546: LD_INT 20
19548: PUSH
19549: LD_INT 30
19551: PUSH
19552: LD_INT 40
19554: PUSH
19555: LD_INT 50
19557: PUSH
19558: LD_INT 60
19560: PUSH
19561: LD_INT 70
19563: PUSH
19564: LD_INT 80
19566: PUSH
19567: LD_INT 90
19569: PUSH
19570: LD_INT 100
19572: PUSH
19573: LD_INT 110
19575: PUSH
19576: LD_INT 120
19578: PUSH
19579: LD_INT 130
19581: PUSH
19582: LD_INT 140
19584: PUSH
19585: LD_INT 150
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 1
19607: PPUSH
19608: LD_INT 15
19610: PPUSH
19611: CALL_OW 12
19615: ARRAY
19616: ST_TO_ADDR
// if ValidHex ( x , y ) then
19617: LD_VAR 0 3
19621: PPUSH
19622: LD_VAR 0 4
19626: PPUSH
19627: CALL_OW 488
19631: IFFALSE 19654
// begin result := [ x , y ] ;
19633: LD_ADDR_VAR 0 1
19637: PUSH
19638: LD_VAR 0 3
19642: PUSH
19643: LD_VAR 0 4
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: ST_TO_ADDR
// break ;
19652: GO 19656
// end ; end ;
19654: GO 19456
19656: POP
19657: POP
// if result then
19658: LD_VAR 0 1
19662: IFFALSE 19722
// begin ToLua ( playSibBomb() ) ;
19664: LD_STRING playSibBomb()
19666: PPUSH
19667: CALL_OW 559
// wait ( 0 0$14 ) ;
19671: LD_INT 490
19673: PPUSH
19674: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19678: LD_VAR 0 1
19682: PUSH
19683: LD_INT 1
19685: ARRAY
19686: PPUSH
19687: LD_VAR 0 1
19691: PUSH
19692: LD_INT 2
19694: ARRAY
19695: PPUSH
19696: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19700: LD_VAR 0 1
19704: PUSH
19705: LD_INT 1
19707: ARRAY
19708: PPUSH
19709: LD_VAR 0 1
19713: PUSH
19714: LD_INT 2
19716: ARRAY
19717: PPUSH
19718: CALL_OW 429
// end ; end ;
19722: LD_VAR 0 1
19726: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19727: LD_EXP 22
19731: IFFALSE 19739
19733: PUSH
19734: LD_EXP 44
19738: AND
19739: IFFALSE 19751
19741: GO 19743
19743: DISABLE
// YouLost (  ) ;
19744: LD_STRING 
19746: PPUSH
19747: CALL_OW 104
19751: END
// every 0 0$1 trigger StreamModeActive and sFog do
19752: LD_EXP 22
19756: IFFALSE 19764
19758: PUSH
19759: LD_EXP 43
19763: AND
19764: IFFALSE 19778
19766: GO 19768
19768: DISABLE
// FogOff ( your_side ) ;
19769: LD_OWVAR 2
19773: PPUSH
19774: CALL_OW 344
19778: END
// every 0 0$1 trigger StreamModeActive and sSun do
19779: LD_EXP 22
19783: IFFALSE 19791
19785: PUSH
19786: LD_EXP 45
19790: AND
19791: IFFALSE 19819
19793: GO 19795
19795: DISABLE
// begin solar_recharge_percent := 0 ;
19796: LD_ADDR_OWVAR 79
19800: PUSH
19801: LD_INT 0
19803: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19804: LD_INT 10500
19806: PPUSH
19807: CALL_OW 67
// solar_recharge_percent := 100 ;
19811: LD_ADDR_OWVAR 79
19815: PUSH
19816: LD_INT 100
19818: ST_TO_ADDR
// end ;
19819: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19820: LD_EXP 22
19824: IFFALSE 19832
19826: PUSH
19827: LD_EXP 46
19831: AND
19832: IFFALSE 20071
19834: GO 19836
19836: DISABLE
19837: LD_INT 0
19839: PPUSH
19840: PPUSH
19841: PPUSH
// begin tmp := [ ] ;
19842: LD_ADDR_VAR 0 3
19846: PUSH
19847: EMPTY
19848: ST_TO_ADDR
// for i := 1 to 6 do
19849: LD_ADDR_VAR 0 1
19853: PUSH
19854: DOUBLE
19855: LD_INT 1
19857: DEC
19858: ST_TO_ADDR
19859: LD_INT 6
19861: PUSH
19862: FOR_TO
19863: IFFALSE 19968
// begin uc_nation := nation_nature ;
19865: LD_ADDR_OWVAR 21
19869: PUSH
19870: LD_INT 0
19872: ST_TO_ADDR
// uc_side := 0 ;
19873: LD_ADDR_OWVAR 20
19877: PUSH
19878: LD_INT 0
19880: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19881: LD_ADDR_OWVAR 29
19885: PUSH
19886: LD_INT 12
19888: PUSH
19889: LD_INT 12
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: ST_TO_ADDR
// hc_agressivity := 20 ;
19896: LD_ADDR_OWVAR 35
19900: PUSH
19901: LD_INT 20
19903: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19904: LD_ADDR_OWVAR 28
19908: PUSH
19909: LD_INT 17
19911: ST_TO_ADDR
// hc_gallery :=  ;
19912: LD_ADDR_OWVAR 33
19916: PUSH
19917: LD_STRING 
19919: ST_TO_ADDR
// hc_name :=  ;
19920: LD_ADDR_OWVAR 26
19924: PUSH
19925: LD_STRING 
19927: ST_TO_ADDR
// un := CreateHuman ;
19928: LD_ADDR_VAR 0 2
19932: PUSH
19933: CALL_OW 44
19937: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19938: LD_VAR 0 2
19942: PPUSH
19943: LD_INT 1
19945: PPUSH
19946: CALL_OW 51
// tmp := tmp ^ un ;
19950: LD_ADDR_VAR 0 3
19954: PUSH
19955: LD_VAR 0 3
19959: PUSH
19960: LD_VAR 0 2
19964: ADD
19965: ST_TO_ADDR
// end ;
19966: GO 19862
19968: POP
19969: POP
// repeat wait ( 0 0$1 ) ;
19970: LD_INT 35
19972: PPUSH
19973: CALL_OW 67
// for un in tmp do
19977: LD_ADDR_VAR 0 2
19981: PUSH
19982: LD_VAR 0 3
19986: PUSH
19987: FOR_IN
19988: IFFALSE 20062
// begin if IsDead ( un ) then
19990: LD_VAR 0 2
19994: PPUSH
19995: CALL_OW 301
19999: IFFALSE 20019
// begin tmp := tmp diff un ;
20001: LD_ADDR_VAR 0 3
20005: PUSH
20006: LD_VAR 0 3
20010: PUSH
20011: LD_VAR 0 2
20015: DIFF
20016: ST_TO_ADDR
// continue ;
20017: GO 19987
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20019: LD_VAR 0 2
20023: PPUSH
20024: LD_INT 3
20026: PUSH
20027: LD_INT 22
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PPUSH
20041: CALL_OW 69
20045: PPUSH
20046: LD_VAR 0 2
20050: PPUSH
20051: CALL_OW 74
20055: PPUSH
20056: CALL_OW 115
// end ;
20060: GO 19987
20062: POP
20063: POP
// until not tmp ;
20064: LD_VAR 0 3
20068: NOT
20069: IFFALSE 19970
// end ;
20071: PPOPN 3
20073: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20074: LD_EXP 22
20078: IFFALSE 20086
20080: PUSH
20081: LD_EXP 47
20085: AND
20086: IFFALSE 20140
20088: GO 20090
20090: DISABLE
// begin ToLua ( displayTroll(); ) ;
20091: LD_STRING displayTroll();
20093: PPUSH
20094: CALL_OW 559
// wait ( 3 3$00 ) ;
20098: LD_INT 6300
20100: PPUSH
20101: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20105: LD_STRING hideTroll();
20107: PPUSH
20108: CALL_OW 559
// wait ( 1 1$00 ) ;
20112: LD_INT 2100
20114: PPUSH
20115: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20119: LD_STRING displayTroll();
20121: PPUSH
20122: CALL_OW 559
// wait ( 1 1$00 ) ;
20126: LD_INT 2100
20128: PPUSH
20129: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20133: LD_STRING hideTroll();
20135: PPUSH
20136: CALL_OW 559
// end ;
20140: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20141: LD_EXP 22
20145: IFFALSE 20153
20147: PUSH
20148: LD_EXP 48
20152: AND
20153: IFFALSE 20216
20155: GO 20157
20157: DISABLE
20158: LD_INT 0
20160: PPUSH
// begin p := 0 ;
20161: LD_ADDR_VAR 0 1
20165: PUSH
20166: LD_INT 0
20168: ST_TO_ADDR
// repeat game_speed := 1 ;
20169: LD_ADDR_OWVAR 65
20173: PUSH
20174: LD_INT 1
20176: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20177: LD_INT 35
20179: PPUSH
20180: CALL_OW 67
// p := p + 1 ;
20184: LD_ADDR_VAR 0 1
20188: PUSH
20189: LD_VAR 0 1
20193: PUSH
20194: LD_INT 1
20196: PLUS
20197: ST_TO_ADDR
// until p >= 60 ;
20198: LD_VAR 0 1
20202: PUSH
20203: LD_INT 60
20205: GREATEREQUAL
20206: IFFALSE 20169
// game_speed := 4 ;
20208: LD_ADDR_OWVAR 65
20212: PUSH
20213: LD_INT 4
20215: ST_TO_ADDR
// end ;
20216: PPOPN 1
20218: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20219: LD_EXP 22
20223: IFFALSE 20231
20225: PUSH
20226: LD_EXP 49
20230: AND
20231: IFFALSE 20377
20233: GO 20235
20235: DISABLE
20236: LD_INT 0
20238: PPUSH
20239: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20240: LD_ADDR_VAR 0 1
20244: PUSH
20245: LD_INT 22
20247: PUSH
20248: LD_OWVAR 2
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 2
20259: PUSH
20260: LD_INT 30
20262: PUSH
20263: LD_INT 0
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 30
20272: PUSH
20273: LD_INT 1
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: LIST
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PPUSH
20289: CALL_OW 69
20293: ST_TO_ADDR
// if not depot then
20294: LD_VAR 0 1
20298: NOT
20299: IFFALSE 20303
// exit ;
20301: GO 20377
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20303: LD_ADDR_VAR 0 2
20307: PUSH
20308: LD_VAR 0 1
20312: PUSH
20313: LD_INT 1
20315: PPUSH
20316: LD_VAR 0 1
20320: PPUSH
20321: CALL_OW 12
20325: ARRAY
20326: PPUSH
20327: CALL_OW 274
20331: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20332: LD_VAR 0 2
20336: PPUSH
20337: LD_INT 1
20339: PPUSH
20340: LD_INT 0
20342: PPUSH
20343: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20347: LD_VAR 0 2
20351: PPUSH
20352: LD_INT 2
20354: PPUSH
20355: LD_INT 0
20357: PPUSH
20358: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20362: LD_VAR 0 2
20366: PPUSH
20367: LD_INT 3
20369: PPUSH
20370: LD_INT 0
20372: PPUSH
20373: CALL_OW 277
// end ;
20377: PPOPN 2
20379: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20380: LD_EXP 22
20384: IFFALSE 20392
20386: PUSH
20387: LD_EXP 50
20391: AND
20392: IFFALSE 20489
20394: GO 20396
20396: DISABLE
20397: LD_INT 0
20399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20400: LD_ADDR_VAR 0 1
20404: PUSH
20405: LD_INT 22
20407: PUSH
20408: LD_OWVAR 2
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 21
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 3
20429: PUSH
20430: LD_INT 23
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: LIST
20448: PPUSH
20449: CALL_OW 69
20453: ST_TO_ADDR
// if not tmp then
20454: LD_VAR 0 1
20458: NOT
20459: IFFALSE 20463
// exit ;
20461: GO 20489
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20463: LD_VAR 0 1
20467: PUSH
20468: LD_INT 1
20470: PPUSH
20471: LD_VAR 0 1
20475: PPUSH
20476: CALL_OW 12
20480: ARRAY
20481: PPUSH
20482: LD_INT 200
20484: PPUSH
20485: CALL_OW 234
// end ;
20489: PPOPN 1
20491: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20492: LD_EXP 22
20496: IFFALSE 20504
20498: PUSH
20499: LD_EXP 51
20503: AND
20504: IFFALSE 20583
20506: GO 20508
20508: DISABLE
20509: LD_INT 0
20511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20512: LD_ADDR_VAR 0 1
20516: PUSH
20517: LD_INT 22
20519: PUSH
20520: LD_OWVAR 2
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 21
20531: PUSH
20532: LD_INT 2
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PPUSH
20543: CALL_OW 69
20547: ST_TO_ADDR
// if not tmp then
20548: LD_VAR 0 1
20552: NOT
20553: IFFALSE 20557
// exit ;
20555: GO 20583
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20557: LD_VAR 0 1
20561: PUSH
20562: LD_INT 1
20564: PPUSH
20565: LD_VAR 0 1
20569: PPUSH
20570: CALL_OW 12
20574: ARRAY
20575: PPUSH
20576: LD_INT 60
20578: PPUSH
20579: CALL_OW 234
// end ;
20583: PPOPN 1
20585: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20586: LD_EXP 22
20590: IFFALSE 20598
20592: PUSH
20593: LD_EXP 52
20597: AND
20598: IFFALSE 20697
20600: GO 20602
20602: DISABLE
20603: LD_INT 0
20605: PPUSH
20606: PPUSH
// begin enable ;
20607: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20608: LD_ADDR_VAR 0 1
20612: PUSH
20613: LD_INT 22
20615: PUSH
20616: LD_OWVAR 2
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 61
20627: PUSH
20628: EMPTY
20629: LIST
20630: PUSH
20631: LD_INT 33
20633: PUSH
20634: LD_INT 2
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: LIST
20645: PPUSH
20646: CALL_OW 69
20650: ST_TO_ADDR
// if not tmp then
20651: LD_VAR 0 1
20655: NOT
20656: IFFALSE 20660
// exit ;
20658: GO 20697
// for i in tmp do
20660: LD_ADDR_VAR 0 2
20664: PUSH
20665: LD_VAR 0 1
20669: PUSH
20670: FOR_IN
20671: IFFALSE 20695
// if IsControledBy ( i ) then
20673: LD_VAR 0 2
20677: PPUSH
20678: CALL_OW 312
20682: IFFALSE 20693
// ComUnlink ( i ) ;
20684: LD_VAR 0 2
20688: PPUSH
20689: CALL_OW 136
20693: GO 20670
20695: POP
20696: POP
// end ;
20697: PPOPN 2
20699: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20700: LD_EXP 22
20704: IFFALSE 20712
20706: PUSH
20707: LD_EXP 53
20711: AND
20712: IFFALSE 20852
20714: GO 20716
20716: DISABLE
20717: LD_INT 0
20719: PPUSH
20720: PPUSH
// begin ToLua ( displayPowell(); ) ;
20721: LD_STRING displayPowell();
20723: PPUSH
20724: CALL_OW 559
// uc_side := 0 ;
20728: LD_ADDR_OWVAR 20
20732: PUSH
20733: LD_INT 0
20735: ST_TO_ADDR
// uc_nation := 2 ;
20736: LD_ADDR_OWVAR 21
20740: PUSH
20741: LD_INT 2
20743: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20744: LD_ADDR_OWVAR 37
20748: PUSH
20749: LD_INT 14
20751: ST_TO_ADDR
// vc_engine := engine_siberite ;
20752: LD_ADDR_OWVAR 39
20756: PUSH
20757: LD_INT 3
20759: ST_TO_ADDR
// vc_control := control_apeman ;
20760: LD_ADDR_OWVAR 38
20764: PUSH
20765: LD_INT 5
20767: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20768: LD_ADDR_OWVAR 40
20772: PUSH
20773: LD_INT 29
20775: ST_TO_ADDR
// un := CreateVehicle ;
20776: LD_ADDR_VAR 0 2
20780: PUSH
20781: CALL_OW 45
20785: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20786: LD_VAR 0 2
20790: PPUSH
20791: LD_INT 1
20793: PPUSH
20794: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20798: LD_INT 35
20800: PPUSH
20801: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20805: LD_VAR 0 2
20809: PPUSH
20810: LD_INT 22
20812: PUSH
20813: LD_OWVAR 2
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PPUSH
20822: CALL_OW 69
20826: PPUSH
20827: LD_VAR 0 2
20831: PPUSH
20832: CALL_OW 74
20836: PPUSH
20837: CALL_OW 115
// until IsDead ( un ) ;
20841: LD_VAR 0 2
20845: PPUSH
20846: CALL_OW 301
20850: IFFALSE 20798
// end ;
20852: PPOPN 2
20854: END
// every 0 0$1 trigger StreamModeActive and sStu do
20855: LD_EXP 22
20859: IFFALSE 20867
20861: PUSH
20862: LD_EXP 61
20866: AND
20867: IFFALSE 20883
20869: GO 20871
20871: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20872: LD_STRING displayStucuk();
20874: PPUSH
20875: CALL_OW 559
// ResetFog ;
20879: CALL_OW 335
// end ;
20883: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20884: LD_EXP 22
20888: IFFALSE 20896
20890: PUSH
20891: LD_EXP 54
20895: AND
20896: IFFALSE 21037
20898: GO 20900
20900: DISABLE
20901: LD_INT 0
20903: PPUSH
20904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20905: LD_ADDR_VAR 0 2
20909: PUSH
20910: LD_INT 22
20912: PUSH
20913: LD_OWVAR 2
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 21
20924: PUSH
20925: LD_INT 1
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PPUSH
20936: CALL_OW 69
20940: ST_TO_ADDR
// if not tmp then
20941: LD_VAR 0 2
20945: NOT
20946: IFFALSE 20950
// exit ;
20948: GO 21037
// un := tmp [ rand ( 1 , tmp ) ] ;
20950: LD_ADDR_VAR 0 1
20954: PUSH
20955: LD_VAR 0 2
20959: PUSH
20960: LD_INT 1
20962: PPUSH
20963: LD_VAR 0 2
20967: PPUSH
20968: CALL_OW 12
20972: ARRAY
20973: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20974: LD_VAR 0 1
20978: PPUSH
20979: LD_INT 0
20981: PPUSH
20982: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20986: LD_VAR 0 1
20990: PPUSH
20991: LD_OWVAR 3
20995: PUSH
20996: LD_VAR 0 1
21000: DIFF
21001: PPUSH
21002: LD_VAR 0 1
21006: PPUSH
21007: CALL_OW 74
21011: PPUSH
21012: CALL_OW 115
// wait ( 0 0$20 ) ;
21016: LD_INT 700
21018: PPUSH
21019: CALL_OW 67
// SetSide ( un , your_side ) ;
21023: LD_VAR 0 1
21027: PPUSH
21028: LD_OWVAR 2
21032: PPUSH
21033: CALL_OW 235
// end ;
21037: PPOPN 2
21039: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21040: LD_EXP 22
21044: IFFALSE 21052
21046: PUSH
21047: LD_EXP 55
21051: AND
21052: IFFALSE 21158
21054: GO 21056
21056: DISABLE
21057: LD_INT 0
21059: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21060: LD_ADDR_VAR 0 1
21064: PUSH
21065: LD_INT 22
21067: PUSH
21068: LD_OWVAR 2
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 2
21079: PUSH
21080: LD_INT 30
21082: PUSH
21083: LD_INT 0
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 30
21092: PUSH
21093: LD_INT 1
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: LIST
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PPUSH
21109: CALL_OW 69
21113: ST_TO_ADDR
// if not depot then
21114: LD_VAR 0 1
21118: NOT
21119: IFFALSE 21123
// exit ;
21121: GO 21158
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21123: LD_VAR 0 1
21127: PUSH
21128: LD_INT 1
21130: ARRAY
21131: PPUSH
21132: CALL_OW 250
21136: PPUSH
21137: LD_VAR 0 1
21141: PUSH
21142: LD_INT 1
21144: ARRAY
21145: PPUSH
21146: CALL_OW 251
21150: PPUSH
21151: LD_INT 70
21153: PPUSH
21154: CALL_OW 495
// end ;
21158: PPOPN 1
21160: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21161: LD_EXP 22
21165: IFFALSE 21173
21167: PUSH
21168: LD_EXP 56
21172: AND
21173: IFFALSE 21384
21175: GO 21177
21177: DISABLE
21178: LD_INT 0
21180: PPUSH
21181: PPUSH
21182: PPUSH
21183: PPUSH
21184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21185: LD_ADDR_VAR 0 5
21189: PUSH
21190: LD_INT 22
21192: PUSH
21193: LD_OWVAR 2
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 21
21204: PUSH
21205: LD_INT 1
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PPUSH
21216: CALL_OW 69
21220: ST_TO_ADDR
// if not tmp then
21221: LD_VAR 0 5
21225: NOT
21226: IFFALSE 21230
// exit ;
21228: GO 21384
// for i in tmp do
21230: LD_ADDR_VAR 0 1
21234: PUSH
21235: LD_VAR 0 5
21239: PUSH
21240: FOR_IN
21241: IFFALSE 21382
// begin d := rand ( 0 , 5 ) ;
21243: LD_ADDR_VAR 0 4
21247: PUSH
21248: LD_INT 0
21250: PPUSH
21251: LD_INT 5
21253: PPUSH
21254: CALL_OW 12
21258: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21259: LD_ADDR_VAR 0 2
21263: PUSH
21264: LD_VAR 0 1
21268: PPUSH
21269: CALL_OW 250
21273: PPUSH
21274: LD_VAR 0 4
21278: PPUSH
21279: LD_INT 3
21281: PPUSH
21282: LD_INT 12
21284: PPUSH
21285: CALL_OW 12
21289: PPUSH
21290: CALL_OW 272
21294: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21295: LD_ADDR_VAR 0 3
21299: PUSH
21300: LD_VAR 0 1
21304: PPUSH
21305: CALL_OW 251
21309: PPUSH
21310: LD_VAR 0 4
21314: PPUSH
21315: LD_INT 3
21317: PPUSH
21318: LD_INT 12
21320: PPUSH
21321: CALL_OW 12
21325: PPUSH
21326: CALL_OW 273
21330: ST_TO_ADDR
// if ValidHex ( x , y ) then
21331: LD_VAR 0 2
21335: PPUSH
21336: LD_VAR 0 3
21340: PPUSH
21341: CALL_OW 488
21345: IFFALSE 21380
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21347: LD_VAR 0 1
21351: PPUSH
21352: LD_VAR 0 2
21356: PPUSH
21357: LD_VAR 0 3
21361: PPUSH
21362: LD_INT 3
21364: PPUSH
21365: LD_INT 6
21367: PPUSH
21368: CALL_OW 12
21372: PPUSH
21373: LD_INT 1
21375: PPUSH
21376: CALL_OW 483
// end ;
21380: GO 21240
21382: POP
21383: POP
// end ;
21384: PPOPN 5
21386: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21387: LD_EXP 22
21391: IFFALSE 21399
21393: PUSH
21394: LD_EXP 57
21398: AND
21399: IFFALSE 21493
21401: GO 21403
21403: DISABLE
21404: LD_INT 0
21406: PPUSH
21407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21408: LD_ADDR_VAR 0 2
21412: PUSH
21413: LD_INT 22
21415: PUSH
21416: LD_OWVAR 2
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 32
21427: PUSH
21428: LD_INT 1
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 21
21437: PUSH
21438: LD_INT 2
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: LIST
21449: PPUSH
21450: CALL_OW 69
21454: ST_TO_ADDR
// if not tmp then
21455: LD_VAR 0 2
21459: NOT
21460: IFFALSE 21464
// exit ;
21462: GO 21493
// for i in tmp do
21464: LD_ADDR_VAR 0 1
21468: PUSH
21469: LD_VAR 0 2
21473: PUSH
21474: FOR_IN
21475: IFFALSE 21491
// SetFuel ( i , 0 ) ;
21477: LD_VAR 0 1
21481: PPUSH
21482: LD_INT 0
21484: PPUSH
21485: CALL_OW 240
21489: GO 21474
21491: POP
21492: POP
// end ;
21493: PPOPN 2
21495: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21496: LD_EXP 22
21500: IFFALSE 21508
21502: PUSH
21503: LD_EXP 58
21507: AND
21508: IFFALSE 21574
21510: GO 21512
21512: DISABLE
21513: LD_INT 0
21515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21516: LD_ADDR_VAR 0 1
21520: PUSH
21521: LD_INT 22
21523: PUSH
21524: LD_OWVAR 2
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 30
21535: PUSH
21536: LD_INT 29
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PPUSH
21547: CALL_OW 69
21551: ST_TO_ADDR
// if not tmp then
21552: LD_VAR 0 1
21556: NOT
21557: IFFALSE 21561
// exit ;
21559: GO 21574
// DestroyUnit ( tmp [ 1 ] ) ;
21561: LD_VAR 0 1
21565: PUSH
21566: LD_INT 1
21568: ARRAY
21569: PPUSH
21570: CALL_OW 65
// end ;
21574: PPOPN 1
21576: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21577: LD_EXP 22
21581: IFFALSE 21589
21583: PUSH
21584: LD_EXP 60
21588: AND
21589: IFFALSE 21718
21591: GO 21593
21593: DISABLE
21594: LD_INT 0
21596: PPUSH
// begin uc_side := 0 ;
21597: LD_ADDR_OWVAR 20
21601: PUSH
21602: LD_INT 0
21604: ST_TO_ADDR
// uc_nation := nation_arabian ;
21605: LD_ADDR_OWVAR 21
21609: PUSH
21610: LD_INT 2
21612: ST_TO_ADDR
// hc_gallery :=  ;
21613: LD_ADDR_OWVAR 33
21617: PUSH
21618: LD_STRING 
21620: ST_TO_ADDR
// hc_name :=  ;
21621: LD_ADDR_OWVAR 26
21625: PUSH
21626: LD_STRING 
21628: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21629: LD_INT 1
21631: PPUSH
21632: LD_INT 11
21634: PPUSH
21635: LD_INT 10
21637: PPUSH
21638: CALL_OW 380
// un := CreateHuman ;
21642: LD_ADDR_VAR 0 1
21646: PUSH
21647: CALL_OW 44
21651: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21652: LD_VAR 0 1
21656: PPUSH
21657: LD_INT 1
21659: PPUSH
21660: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21664: LD_INT 35
21666: PPUSH
21667: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21671: LD_VAR 0 1
21675: PPUSH
21676: LD_INT 22
21678: PUSH
21679: LD_OWVAR 2
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PPUSH
21688: CALL_OW 69
21692: PPUSH
21693: LD_VAR 0 1
21697: PPUSH
21698: CALL_OW 74
21702: PPUSH
21703: CALL_OW 115
// until IsDead ( un ) ;
21707: LD_VAR 0 1
21711: PPUSH
21712: CALL_OW 301
21716: IFFALSE 21664
// end ;
21718: PPOPN 1
21720: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21721: LD_EXP 22
21725: IFFALSE 21733
21727: PUSH
21728: LD_EXP 62
21732: AND
21733: IFFALSE 21745
21735: GO 21737
21737: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21738: LD_STRING earthquake(getX(game), 0, 32)
21740: PPUSH
21741: CALL_OW 559
21745: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21746: LD_EXP 22
21750: IFFALSE 21758
21752: PUSH
21753: LD_EXP 63
21757: AND
21758: IFFALSE 21849
21760: GO 21762
21762: DISABLE
21763: LD_INT 0
21765: PPUSH
// begin enable ;
21766: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21767: LD_ADDR_VAR 0 1
21771: PUSH
21772: LD_INT 22
21774: PUSH
21775: LD_OWVAR 2
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 21
21786: PUSH
21787: LD_INT 2
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 33
21796: PUSH
21797: LD_INT 3
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: PPUSH
21809: CALL_OW 69
21813: ST_TO_ADDR
// if not tmp then
21814: LD_VAR 0 1
21818: NOT
21819: IFFALSE 21823
// exit ;
21821: GO 21849
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21823: LD_VAR 0 1
21827: PUSH
21828: LD_INT 1
21830: PPUSH
21831: LD_VAR 0 1
21835: PPUSH
21836: CALL_OW 12
21840: ARRAY
21841: PPUSH
21842: LD_INT 1
21844: PPUSH
21845: CALL_OW 234
// end ;
21849: PPOPN 1
21851: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21852: LD_EXP 22
21856: IFFALSE 21864
21858: PUSH
21859: LD_EXP 64
21863: AND
21864: IFFALSE 22005
21866: GO 21868
21868: DISABLE
21869: LD_INT 0
21871: PPUSH
21872: PPUSH
21873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21874: LD_ADDR_VAR 0 3
21878: PUSH
21879: LD_INT 22
21881: PUSH
21882: LD_OWVAR 2
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 25
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PPUSH
21905: CALL_OW 69
21909: ST_TO_ADDR
// if not tmp then
21910: LD_VAR 0 3
21914: NOT
21915: IFFALSE 21919
// exit ;
21917: GO 22005
// un := tmp [ rand ( 1 , tmp ) ] ;
21919: LD_ADDR_VAR 0 2
21923: PUSH
21924: LD_VAR 0 3
21928: PUSH
21929: LD_INT 1
21931: PPUSH
21932: LD_VAR 0 3
21936: PPUSH
21937: CALL_OW 12
21941: ARRAY
21942: ST_TO_ADDR
// if Crawls ( un ) then
21943: LD_VAR 0 2
21947: PPUSH
21948: CALL_OW 318
21952: IFFALSE 21963
// ComWalk ( un ) ;
21954: LD_VAR 0 2
21958: PPUSH
21959: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21963: LD_VAR 0 2
21967: PPUSH
21968: LD_INT 9
21970: PPUSH
21971: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21975: LD_INT 28
21977: PPUSH
21978: LD_OWVAR 2
21982: PPUSH
21983: LD_INT 2
21985: PPUSH
21986: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21990: LD_INT 29
21992: PPUSH
21993: LD_OWVAR 2
21997: PPUSH
21998: LD_INT 2
22000: PPUSH
22001: CALL_OW 322
// end ;
22005: PPOPN 3
22007: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22008: LD_EXP 22
22012: IFFALSE 22020
22014: PUSH
22015: LD_EXP 65
22019: AND
22020: IFFALSE 22131
22022: GO 22024
22024: DISABLE
22025: LD_INT 0
22027: PPUSH
22028: PPUSH
22029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22030: LD_ADDR_VAR 0 3
22034: PUSH
22035: LD_INT 22
22037: PUSH
22038: LD_OWVAR 2
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 25
22049: PUSH
22050: LD_INT 1
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PPUSH
22061: CALL_OW 69
22065: ST_TO_ADDR
// if not tmp then
22066: LD_VAR 0 3
22070: NOT
22071: IFFALSE 22075
// exit ;
22073: GO 22131
// un := tmp [ rand ( 1 , tmp ) ] ;
22075: LD_ADDR_VAR 0 2
22079: PUSH
22080: LD_VAR 0 3
22084: PUSH
22085: LD_INT 1
22087: PPUSH
22088: LD_VAR 0 3
22092: PPUSH
22093: CALL_OW 12
22097: ARRAY
22098: ST_TO_ADDR
// if Crawls ( un ) then
22099: LD_VAR 0 2
22103: PPUSH
22104: CALL_OW 318
22108: IFFALSE 22119
// ComWalk ( un ) ;
22110: LD_VAR 0 2
22114: PPUSH
22115: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22119: LD_VAR 0 2
22123: PPUSH
22124: LD_INT 8
22126: PPUSH
22127: CALL_OW 336
// end ;
22131: PPOPN 3
22133: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22134: LD_EXP 22
22138: IFFALSE 22146
22140: PUSH
22141: LD_EXP 66
22145: AND
22146: IFFALSE 22290
22148: GO 22150
22150: DISABLE
22151: LD_INT 0
22153: PPUSH
22154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22155: LD_ADDR_VAR 0 2
22159: PUSH
22160: LD_INT 22
22162: PUSH
22163: LD_OWVAR 2
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 21
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 2
22184: PUSH
22185: LD_INT 34
22187: PUSH
22188: LD_INT 12
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 34
22197: PUSH
22198: LD_INT 51
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 34
22207: PUSH
22208: LD_INT 32
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: LIST
22225: PPUSH
22226: CALL_OW 69
22230: ST_TO_ADDR
// if not tmp then
22231: LD_VAR 0 2
22235: NOT
22236: IFFALSE 22240
// exit ;
22238: GO 22290
// for i in tmp do
22240: LD_ADDR_VAR 0 1
22244: PUSH
22245: LD_VAR 0 2
22249: PUSH
22250: FOR_IN
22251: IFFALSE 22288
// if GetCargo ( i , mat_artifact ) = 0 then
22253: LD_VAR 0 1
22257: PPUSH
22258: LD_INT 4
22260: PPUSH
22261: CALL_OW 289
22265: PUSH
22266: LD_INT 0
22268: EQUAL
22269: IFFALSE 22286
// SetCargo ( i , mat_siberit , 100 ) ;
22271: LD_VAR 0 1
22275: PPUSH
22276: LD_INT 3
22278: PPUSH
22279: LD_INT 100
22281: PPUSH
22282: CALL_OW 290
22286: GO 22250
22288: POP
22289: POP
// end ;
22290: PPOPN 2
22292: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22293: LD_EXP 22
22297: IFFALSE 22305
22299: PUSH
22300: LD_EXP 67
22304: AND
22305: IFFALSE 22488
22307: GO 22309
22309: DISABLE
22310: LD_INT 0
22312: PPUSH
22313: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22314: LD_ADDR_VAR 0 2
22318: PUSH
22319: LD_INT 22
22321: PUSH
22322: LD_OWVAR 2
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PPUSH
22331: CALL_OW 69
22335: ST_TO_ADDR
// if not tmp then
22336: LD_VAR 0 2
22340: NOT
22341: IFFALSE 22345
// exit ;
22343: GO 22488
// for i := 1 to 2 do
22345: LD_ADDR_VAR 0 1
22349: PUSH
22350: DOUBLE
22351: LD_INT 1
22353: DEC
22354: ST_TO_ADDR
22355: LD_INT 2
22357: PUSH
22358: FOR_TO
22359: IFFALSE 22486
// begin uc_side := your_side ;
22361: LD_ADDR_OWVAR 20
22365: PUSH
22366: LD_OWVAR 2
22370: ST_TO_ADDR
// uc_nation := nation_american ;
22371: LD_ADDR_OWVAR 21
22375: PUSH
22376: LD_INT 1
22378: ST_TO_ADDR
// vc_chassis := us_morphling ;
22379: LD_ADDR_OWVAR 37
22383: PUSH
22384: LD_INT 5
22386: ST_TO_ADDR
// vc_engine := engine_siberite ;
22387: LD_ADDR_OWVAR 39
22391: PUSH
22392: LD_INT 3
22394: ST_TO_ADDR
// vc_control := control_computer ;
22395: LD_ADDR_OWVAR 38
22399: PUSH
22400: LD_INT 3
22402: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22403: LD_ADDR_OWVAR 40
22407: PUSH
22408: LD_INT 10
22410: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22411: LD_VAR 0 2
22415: PUSH
22416: LD_INT 1
22418: ARRAY
22419: PPUSH
22420: CALL_OW 310
22424: NOT
22425: IFFALSE 22472
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22427: CALL_OW 45
22431: PPUSH
22432: LD_VAR 0 2
22436: PUSH
22437: LD_INT 1
22439: ARRAY
22440: PPUSH
22441: CALL_OW 250
22445: PPUSH
22446: LD_VAR 0 2
22450: PUSH
22451: LD_INT 1
22453: ARRAY
22454: PPUSH
22455: CALL_OW 251
22459: PPUSH
22460: LD_INT 12
22462: PPUSH
22463: LD_INT 1
22465: PPUSH
22466: CALL_OW 50
22470: GO 22484
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22472: CALL_OW 45
22476: PPUSH
22477: LD_INT 1
22479: PPUSH
22480: CALL_OW 51
// end ;
22484: GO 22358
22486: POP
22487: POP
// end ;
22488: PPOPN 2
22490: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22491: LD_EXP 22
22495: IFFALSE 22503
22497: PUSH
22498: LD_EXP 68
22502: AND
22503: IFFALSE 22725
22505: GO 22507
22507: DISABLE
22508: LD_INT 0
22510: PPUSH
22511: PPUSH
22512: PPUSH
22513: PPUSH
22514: PPUSH
22515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22516: LD_ADDR_VAR 0 6
22520: PUSH
22521: LD_INT 22
22523: PUSH
22524: LD_OWVAR 2
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 21
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 3
22545: PUSH
22546: LD_INT 23
22548: PUSH
22549: LD_INT 0
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: PPUSH
22565: CALL_OW 69
22569: ST_TO_ADDR
// if not tmp then
22570: LD_VAR 0 6
22574: NOT
22575: IFFALSE 22579
// exit ;
22577: GO 22725
// s1 := rand ( 1 , 4 ) ;
22579: LD_ADDR_VAR 0 2
22583: PUSH
22584: LD_INT 1
22586: PPUSH
22587: LD_INT 4
22589: PPUSH
22590: CALL_OW 12
22594: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22595: LD_ADDR_VAR 0 4
22599: PUSH
22600: LD_VAR 0 6
22604: PUSH
22605: LD_INT 1
22607: ARRAY
22608: PPUSH
22609: LD_VAR 0 2
22613: PPUSH
22614: CALL_OW 259
22618: ST_TO_ADDR
// if s1 = 1 then
22619: LD_VAR 0 2
22623: PUSH
22624: LD_INT 1
22626: EQUAL
22627: IFFALSE 22647
// s2 := rand ( 2 , 4 ) else
22629: LD_ADDR_VAR 0 3
22633: PUSH
22634: LD_INT 2
22636: PPUSH
22637: LD_INT 4
22639: PPUSH
22640: CALL_OW 12
22644: ST_TO_ADDR
22645: GO 22655
// s2 := 1 ;
22647: LD_ADDR_VAR 0 3
22651: PUSH
22652: LD_INT 1
22654: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22655: LD_ADDR_VAR 0 5
22659: PUSH
22660: LD_VAR 0 6
22664: PUSH
22665: LD_INT 1
22667: ARRAY
22668: PPUSH
22669: LD_VAR 0 3
22673: PPUSH
22674: CALL_OW 259
22678: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22679: LD_VAR 0 6
22683: PUSH
22684: LD_INT 1
22686: ARRAY
22687: PPUSH
22688: LD_VAR 0 2
22692: PPUSH
22693: LD_VAR 0 5
22697: PPUSH
22698: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22702: LD_VAR 0 6
22706: PUSH
22707: LD_INT 1
22709: ARRAY
22710: PPUSH
22711: LD_VAR 0 3
22715: PPUSH
22716: LD_VAR 0 4
22720: PPUSH
22721: CALL_OW 237
// end ;
22725: PPOPN 6
22727: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22728: LD_EXP 22
22732: IFFALSE 22740
22734: PUSH
22735: LD_EXP 69
22739: AND
22740: IFFALSE 22819
22742: GO 22744
22744: DISABLE
22745: LD_INT 0
22747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22748: LD_ADDR_VAR 0 1
22752: PUSH
22753: LD_INT 22
22755: PUSH
22756: LD_OWVAR 2
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 30
22767: PUSH
22768: LD_INT 3
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PPUSH
22779: CALL_OW 69
22783: ST_TO_ADDR
// if not tmp then
22784: LD_VAR 0 1
22788: NOT
22789: IFFALSE 22793
// exit ;
22791: GO 22819
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22793: LD_VAR 0 1
22797: PUSH
22798: LD_INT 1
22800: PPUSH
22801: LD_VAR 0 1
22805: PPUSH
22806: CALL_OW 12
22810: ARRAY
22811: PPUSH
22812: LD_INT 1
22814: PPUSH
22815: CALL_OW 234
// end ;
22819: PPOPN 1
22821: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22822: LD_EXP 22
22826: IFFALSE 22834
22828: PUSH
22829: LD_EXP 70
22833: AND
22834: IFFALSE 22946
22836: GO 22838
22838: DISABLE
22839: LD_INT 0
22841: PPUSH
22842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22843: LD_ADDR_VAR 0 2
22847: PUSH
22848: LD_INT 22
22850: PUSH
22851: LD_OWVAR 2
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: LD_INT 30
22865: PUSH
22866: LD_INT 27
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 30
22875: PUSH
22876: LD_INT 26
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 30
22885: PUSH
22886: LD_INT 28
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PPUSH
22903: CALL_OW 69
22907: ST_TO_ADDR
// if not tmp then
22908: LD_VAR 0 2
22912: NOT
22913: IFFALSE 22917
// exit ;
22915: GO 22946
// for i in tmp do
22917: LD_ADDR_VAR 0 1
22921: PUSH
22922: LD_VAR 0 2
22926: PUSH
22927: FOR_IN
22928: IFFALSE 22944
// SetLives ( i , 1 ) ;
22930: LD_VAR 0 1
22934: PPUSH
22935: LD_INT 1
22937: PPUSH
22938: CALL_OW 234
22942: GO 22927
22944: POP
22945: POP
// end ;
22946: PPOPN 2
22948: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22949: LD_EXP 22
22953: IFFALSE 22961
22955: PUSH
22956: LD_EXP 71
22960: AND
22961: IFFALSE 23248
22963: GO 22965
22965: DISABLE
22966: LD_INT 0
22968: PPUSH
22969: PPUSH
22970: PPUSH
// begin i := rand ( 1 , 7 ) ;
22971: LD_ADDR_VAR 0 1
22975: PUSH
22976: LD_INT 1
22978: PPUSH
22979: LD_INT 7
22981: PPUSH
22982: CALL_OW 12
22986: ST_TO_ADDR
// case i of 1 :
22987: LD_VAR 0 1
22991: PUSH
22992: LD_INT 1
22994: DOUBLE
22995: EQUAL
22996: IFTRUE 23000
22998: GO 23010
23000: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23001: LD_STRING earthquake(getX(game), 0, 32)
23003: PPUSH
23004: CALL_OW 559
23008: GO 23248
23010: LD_INT 2
23012: DOUBLE
23013: EQUAL
23014: IFTRUE 23018
23016: GO 23032
23018: POP
// begin ToLua ( displayStucuk(); ) ;
23019: LD_STRING displayStucuk();
23021: PPUSH
23022: CALL_OW 559
// ResetFog ;
23026: CALL_OW 335
// end ; 3 :
23030: GO 23248
23032: LD_INT 3
23034: DOUBLE
23035: EQUAL
23036: IFTRUE 23040
23038: GO 23144
23040: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23041: LD_ADDR_VAR 0 2
23045: PUSH
23046: LD_INT 22
23048: PUSH
23049: LD_OWVAR 2
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 25
23060: PUSH
23061: LD_INT 1
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PPUSH
23072: CALL_OW 69
23076: ST_TO_ADDR
// if not tmp then
23077: LD_VAR 0 2
23081: NOT
23082: IFFALSE 23086
// exit ;
23084: GO 23248
// un := tmp [ rand ( 1 , tmp ) ] ;
23086: LD_ADDR_VAR 0 3
23090: PUSH
23091: LD_VAR 0 2
23095: PUSH
23096: LD_INT 1
23098: PPUSH
23099: LD_VAR 0 2
23103: PPUSH
23104: CALL_OW 12
23108: ARRAY
23109: ST_TO_ADDR
// if Crawls ( un ) then
23110: LD_VAR 0 3
23114: PPUSH
23115: CALL_OW 318
23119: IFFALSE 23130
// ComWalk ( un ) ;
23121: LD_VAR 0 3
23125: PPUSH
23126: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23130: LD_VAR 0 3
23134: PPUSH
23135: LD_INT 8
23137: PPUSH
23138: CALL_OW 336
// end ; 4 :
23142: GO 23248
23144: LD_INT 4
23146: DOUBLE
23147: EQUAL
23148: IFTRUE 23152
23150: GO 23226
23152: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23153: LD_ADDR_VAR 0 2
23157: PUSH
23158: LD_INT 22
23160: PUSH
23161: LD_OWVAR 2
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 30
23172: PUSH
23173: LD_INT 29
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PPUSH
23184: CALL_OW 69
23188: ST_TO_ADDR
// if not tmp then
23189: LD_VAR 0 2
23193: NOT
23194: IFFALSE 23198
// exit ;
23196: GO 23248
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23198: LD_VAR 0 2
23202: PUSH
23203: LD_INT 1
23205: ARRAY
23206: PPUSH
23207: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23211: LD_VAR 0 2
23215: PUSH
23216: LD_INT 1
23218: ARRAY
23219: PPUSH
23220: CALL_OW 65
// end ; 5 .. 7 :
23224: GO 23248
23226: LD_INT 5
23228: DOUBLE
23229: GREATEREQUAL
23230: IFFALSE 23238
23232: LD_INT 7
23234: DOUBLE
23235: LESSEQUAL
23236: IFTRUE 23240
23238: GO 23247
23240: POP
// StreamSibBomb ; end ;
23241: CALL 19429 0 0
23245: GO 23248
23247: POP
// end ;
23248: PPOPN 3
23250: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23251: LD_EXP 22
23255: IFFALSE 23263
23257: PUSH
23258: LD_EXP 72
23262: AND
23263: IFFALSE 23419
23265: GO 23267
23267: DISABLE
23268: LD_INT 0
23270: PPUSH
23271: PPUSH
23272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23273: LD_ADDR_VAR 0 2
23277: PUSH
23278: LD_INT 81
23280: PUSH
23281: LD_OWVAR 2
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 2
23292: PUSH
23293: LD_INT 21
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 21
23305: PUSH
23306: LD_INT 2
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: LIST
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PPUSH
23322: CALL_OW 69
23326: ST_TO_ADDR
// if not tmp then
23327: LD_VAR 0 2
23331: NOT
23332: IFFALSE 23336
// exit ;
23334: GO 23419
// p := 0 ;
23336: LD_ADDR_VAR 0 3
23340: PUSH
23341: LD_INT 0
23343: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23344: LD_INT 35
23346: PPUSH
23347: CALL_OW 67
// p := p + 1 ;
23351: LD_ADDR_VAR 0 3
23355: PUSH
23356: LD_VAR 0 3
23360: PUSH
23361: LD_INT 1
23363: PLUS
23364: ST_TO_ADDR
// for i in tmp do
23365: LD_ADDR_VAR 0 1
23369: PUSH
23370: LD_VAR 0 2
23374: PUSH
23375: FOR_IN
23376: IFFALSE 23407
// if GetLives ( i ) < 1000 then
23378: LD_VAR 0 1
23382: PPUSH
23383: CALL_OW 256
23387: PUSH
23388: LD_INT 1000
23390: LESS
23391: IFFALSE 23405
// SetLives ( i , 1000 ) ;
23393: LD_VAR 0 1
23397: PPUSH
23398: LD_INT 1000
23400: PPUSH
23401: CALL_OW 234
23405: GO 23375
23407: POP
23408: POP
// until p > 20 ;
23409: LD_VAR 0 3
23413: PUSH
23414: LD_INT 20
23416: GREATER
23417: IFFALSE 23344
// end ;
23419: PPOPN 3
23421: END
// every 0 0$1 trigger StreamModeActive and sTime do
23422: LD_EXP 22
23426: IFFALSE 23434
23428: PUSH
23429: LD_EXP 73
23433: AND
23434: IFFALSE 23469
23436: GO 23438
23438: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23439: LD_INT 28
23441: PPUSH
23442: LD_OWVAR 2
23446: PPUSH
23447: LD_INT 2
23449: PPUSH
23450: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23454: LD_INT 30
23456: PPUSH
23457: LD_OWVAR 2
23461: PPUSH
23462: LD_INT 2
23464: PPUSH
23465: CALL_OW 322
// end ;
23469: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23470: LD_EXP 22
23474: IFFALSE 23482
23476: PUSH
23477: LD_EXP 74
23481: AND
23482: IFFALSE 23603
23484: GO 23486
23486: DISABLE
23487: LD_INT 0
23489: PPUSH
23490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23491: LD_ADDR_VAR 0 2
23495: PUSH
23496: LD_INT 22
23498: PUSH
23499: LD_OWVAR 2
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 21
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 3
23520: PUSH
23521: LD_INT 23
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: LIST
23539: PPUSH
23540: CALL_OW 69
23544: ST_TO_ADDR
// if not tmp then
23545: LD_VAR 0 2
23549: NOT
23550: IFFALSE 23554
// exit ;
23552: GO 23603
// for i in tmp do
23554: LD_ADDR_VAR 0 1
23558: PUSH
23559: LD_VAR 0 2
23563: PUSH
23564: FOR_IN
23565: IFFALSE 23601
// begin if Crawls ( i ) then
23567: LD_VAR 0 1
23571: PPUSH
23572: CALL_OW 318
23576: IFFALSE 23587
// ComWalk ( i ) ;
23578: LD_VAR 0 1
23582: PPUSH
23583: CALL_OW 138
// SetClass ( i , 2 ) ;
23587: LD_VAR 0 1
23591: PPUSH
23592: LD_INT 2
23594: PPUSH
23595: CALL_OW 336
// end ;
23599: GO 23564
23601: POP
23602: POP
// end ;
23603: PPOPN 2
23605: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23606: LD_EXP 22
23610: IFFALSE 23618
23612: PUSH
23613: LD_EXP 75
23617: AND
23618: IFFALSE 23908
23620: GO 23622
23622: DISABLE
23623: LD_INT 0
23625: PPUSH
23626: PPUSH
23627: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23628: LD_OWVAR 2
23632: PPUSH
23633: LD_INT 9
23635: PPUSH
23636: LD_INT 1
23638: PPUSH
23639: LD_INT 1
23641: PPUSH
23642: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23646: LD_INT 9
23648: PPUSH
23649: LD_OWVAR 2
23653: PPUSH
23654: CALL_OW 343
// uc_side := 9 ;
23658: LD_ADDR_OWVAR 20
23662: PUSH
23663: LD_INT 9
23665: ST_TO_ADDR
// uc_nation := 2 ;
23666: LD_ADDR_OWVAR 21
23670: PUSH
23671: LD_INT 2
23673: ST_TO_ADDR
// hc_name := Dark Warrior ;
23674: LD_ADDR_OWVAR 26
23678: PUSH
23679: LD_STRING Dark Warrior
23681: ST_TO_ADDR
// hc_gallery :=  ;
23682: LD_ADDR_OWVAR 33
23686: PUSH
23687: LD_STRING 
23689: ST_TO_ADDR
// hc_noskilllimit := true ;
23690: LD_ADDR_OWVAR 76
23694: PUSH
23695: LD_INT 1
23697: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23698: LD_ADDR_OWVAR 31
23702: PUSH
23703: LD_INT 30
23705: PUSH
23706: LD_INT 30
23708: PUSH
23709: LD_INT 30
23711: PUSH
23712: LD_INT 30
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: ST_TO_ADDR
// un := CreateHuman ;
23721: LD_ADDR_VAR 0 3
23725: PUSH
23726: CALL_OW 44
23730: ST_TO_ADDR
// hc_noskilllimit := false ;
23731: LD_ADDR_OWVAR 76
23735: PUSH
23736: LD_INT 0
23738: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23739: LD_VAR 0 3
23743: PPUSH
23744: LD_INT 1
23746: PPUSH
23747: CALL_OW 51
// ToLua ( playRanger() ) ;
23751: LD_STRING playRanger()
23753: PPUSH
23754: CALL_OW 559
// p := 0 ;
23758: LD_ADDR_VAR 0 2
23762: PUSH
23763: LD_INT 0
23765: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23766: LD_INT 35
23768: PPUSH
23769: CALL_OW 67
// p := p + 1 ;
23773: LD_ADDR_VAR 0 2
23777: PUSH
23778: LD_VAR 0 2
23782: PUSH
23783: LD_INT 1
23785: PLUS
23786: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23787: LD_VAR 0 3
23791: PPUSH
23792: CALL_OW 256
23796: PUSH
23797: LD_INT 1000
23799: LESS
23800: IFFALSE 23814
// SetLives ( un , 1000 ) ;
23802: LD_VAR 0 3
23806: PPUSH
23807: LD_INT 1000
23809: PPUSH
23810: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23814: LD_VAR 0 3
23818: PPUSH
23819: LD_INT 81
23821: PUSH
23822: LD_OWVAR 2
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 91
23833: PUSH
23834: LD_VAR 0 3
23838: PUSH
23839: LD_INT 30
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: LIST
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PPUSH
23851: CALL_OW 69
23855: PPUSH
23856: LD_VAR 0 3
23860: PPUSH
23861: CALL_OW 74
23865: PPUSH
23866: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23870: LD_VAR 0 2
23874: PUSH
23875: LD_INT 80
23877: GREATER
23878: IFTRUE 23891
23880: PUSH
23881: LD_VAR 0 3
23885: PPUSH
23886: CALL_OW 301
23890: OR
23891: IFFALSE 23766
// if un then
23893: LD_VAR 0 3
23897: IFFALSE 23908
// RemoveUnit ( un ) ;
23899: LD_VAR 0 3
23903: PPUSH
23904: CALL_OW 64
// end ;
23908: PPOPN 3
23910: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23911: LD_EXP 76
23915: IFFALSE 24031
23917: GO 23919
23919: DISABLE
23920: LD_INT 0
23922: PPUSH
23923: PPUSH
23924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23925: LD_ADDR_VAR 0 2
23929: PUSH
23930: LD_INT 81
23932: PUSH
23933: LD_OWVAR 2
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 21
23944: PUSH
23945: LD_INT 1
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PPUSH
23956: CALL_OW 69
23960: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23961: LD_STRING playComputer()
23963: PPUSH
23964: CALL_OW 559
// if not tmp then
23968: LD_VAR 0 2
23972: NOT
23973: IFFALSE 23977
// exit ;
23975: GO 24031
// for i in tmp do
23977: LD_ADDR_VAR 0 1
23981: PUSH
23982: LD_VAR 0 2
23986: PUSH
23987: FOR_IN
23988: IFFALSE 24029
// for j := 1 to 4 do
23990: LD_ADDR_VAR 0 3
23994: PUSH
23995: DOUBLE
23996: LD_INT 1
23998: DEC
23999: ST_TO_ADDR
24000: LD_INT 4
24002: PUSH
24003: FOR_TO
24004: IFFALSE 24025
// SetSkill ( i , j , 10 ) ;
24006: LD_VAR 0 1
24010: PPUSH
24011: LD_VAR 0 3
24015: PPUSH
24016: LD_INT 10
24018: PPUSH
24019: CALL_OW 237
24023: GO 24003
24025: POP
24026: POP
24027: GO 23987
24029: POP
24030: POP
// end ;
24031: PPOPN 3
24033: END
// every 0 0$1 trigger s30 do var i , tmp ;
24034: LD_EXP 77
24038: IFFALSE 24107
24040: GO 24042
24042: DISABLE
24043: LD_INT 0
24045: PPUSH
24046: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24047: LD_ADDR_VAR 0 2
24051: PUSH
24052: LD_INT 22
24054: PUSH
24055: LD_OWVAR 2
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PPUSH
24064: CALL_OW 69
24068: ST_TO_ADDR
// if not tmp then
24069: LD_VAR 0 2
24073: NOT
24074: IFFALSE 24078
// exit ;
24076: GO 24107
// for i in tmp do
24078: LD_ADDR_VAR 0 1
24082: PUSH
24083: LD_VAR 0 2
24087: PUSH
24088: FOR_IN
24089: IFFALSE 24105
// SetLives ( i , 300 ) ;
24091: LD_VAR 0 1
24095: PPUSH
24096: LD_INT 300
24098: PPUSH
24099: CALL_OW 234
24103: GO 24088
24105: POP
24106: POP
// end ;
24107: PPOPN 2
24109: END
// every 0 0$1 trigger s60 do var i , tmp ;
24110: LD_EXP 78
24114: IFFALSE 24183
24116: GO 24118
24118: DISABLE
24119: LD_INT 0
24121: PPUSH
24122: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24123: LD_ADDR_VAR 0 2
24127: PUSH
24128: LD_INT 22
24130: PUSH
24131: LD_OWVAR 2
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PPUSH
24140: CALL_OW 69
24144: ST_TO_ADDR
// if not tmp then
24145: LD_VAR 0 2
24149: NOT
24150: IFFALSE 24154
// exit ;
24152: GO 24183
// for i in tmp do
24154: LD_ADDR_VAR 0 1
24158: PUSH
24159: LD_VAR 0 2
24163: PUSH
24164: FOR_IN
24165: IFFALSE 24181
// SetLives ( i , 600 ) ;
24167: LD_VAR 0 1
24171: PPUSH
24172: LD_INT 600
24174: PPUSH
24175: CALL_OW 234
24179: GO 24164
24181: POP
24182: POP
// end ;
24183: PPOPN 2
24185: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24186: LD_INT 0
24188: PPUSH
// case cmd of 301 :
24189: LD_VAR 0 1
24193: PUSH
24194: LD_INT 301
24196: DOUBLE
24197: EQUAL
24198: IFTRUE 24202
24200: GO 24234
24202: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24203: LD_VAR 0 6
24207: PPUSH
24208: LD_VAR 0 7
24212: PPUSH
24213: LD_VAR 0 8
24217: PPUSH
24218: LD_VAR 0 4
24222: PPUSH
24223: LD_VAR 0 5
24227: PPUSH
24228: CALL 25447 0 5
24232: GO 24355
24234: LD_INT 302
24236: DOUBLE
24237: EQUAL
24238: IFTRUE 24242
24240: GO 24279
24242: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24243: LD_VAR 0 6
24247: PPUSH
24248: LD_VAR 0 7
24252: PPUSH
24253: LD_VAR 0 8
24257: PPUSH
24258: LD_VAR 0 9
24262: PPUSH
24263: LD_VAR 0 4
24267: PPUSH
24268: LD_VAR 0 5
24272: PPUSH
24273: CALL 25538 0 6
24277: GO 24355
24279: LD_INT 303
24281: DOUBLE
24282: EQUAL
24283: IFTRUE 24287
24285: GO 24324
24287: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24288: LD_VAR 0 6
24292: PPUSH
24293: LD_VAR 0 7
24297: PPUSH
24298: LD_VAR 0 8
24302: PPUSH
24303: LD_VAR 0 9
24307: PPUSH
24308: LD_VAR 0 4
24312: PPUSH
24313: LD_VAR 0 5
24317: PPUSH
24318: CALL 24360 0 6
24322: GO 24355
24324: LD_INT 304
24326: DOUBLE
24327: EQUAL
24328: IFTRUE 24332
24330: GO 24354
24332: POP
// hHackTeleport ( unit , x , y ) ; end ;
24333: LD_VAR 0 2
24337: PPUSH
24338: LD_VAR 0 4
24342: PPUSH
24343: LD_VAR 0 5
24347: PPUSH
24348: CALL 26131 0 3
24352: GO 24355
24354: POP
// end ;
24355: LD_VAR 0 12
24359: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24360: LD_INT 0
24362: PPUSH
24363: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24364: LD_VAR 0 1
24368: PUSH
24369: LD_INT 1
24371: LESS
24372: IFTRUE 24384
24374: PUSH
24375: LD_VAR 0 1
24379: PUSH
24380: LD_INT 3
24382: GREATER
24383: OR
24384: IFTRUE 24402
24386: PUSH
24387: LD_VAR 0 5
24391: PPUSH
24392: LD_VAR 0 6
24396: PPUSH
24397: CALL_OW 428
24401: OR
24402: IFFALSE 24406
// exit ;
24404: GO 25134
// uc_side := your_side ;
24406: LD_ADDR_OWVAR 20
24410: PUSH
24411: LD_OWVAR 2
24415: ST_TO_ADDR
// uc_nation := nation ;
24416: LD_ADDR_OWVAR 21
24420: PUSH
24421: LD_VAR 0 1
24425: ST_TO_ADDR
// bc_level = 1 ;
24426: LD_ADDR_OWVAR 43
24430: PUSH
24431: LD_INT 1
24433: ST_TO_ADDR
// case btype of 1 :
24434: LD_VAR 0 2
24438: PUSH
24439: LD_INT 1
24441: DOUBLE
24442: EQUAL
24443: IFTRUE 24447
24445: GO 24458
24447: POP
// bc_type := b_depot ; 2 :
24448: LD_ADDR_OWVAR 42
24452: PUSH
24453: LD_INT 0
24455: ST_TO_ADDR
24456: GO 25078
24458: LD_INT 2
24460: DOUBLE
24461: EQUAL
24462: IFTRUE 24466
24464: GO 24477
24466: POP
// bc_type := b_warehouse ; 3 :
24467: LD_ADDR_OWVAR 42
24471: PUSH
24472: LD_INT 1
24474: ST_TO_ADDR
24475: GO 25078
24477: LD_INT 3
24479: DOUBLE
24480: EQUAL
24481: IFTRUE 24485
24483: GO 24496
24485: POP
// bc_type := b_lab ; 4 .. 9 :
24486: LD_ADDR_OWVAR 42
24490: PUSH
24491: LD_INT 6
24493: ST_TO_ADDR
24494: GO 25078
24496: LD_INT 4
24498: DOUBLE
24499: GREATEREQUAL
24500: IFFALSE 24508
24502: LD_INT 9
24504: DOUBLE
24505: LESSEQUAL
24506: IFTRUE 24510
24508: GO 24570
24510: POP
// begin bc_type := b_lab_half ;
24511: LD_ADDR_OWVAR 42
24515: PUSH
24516: LD_INT 7
24518: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24519: LD_ADDR_OWVAR 44
24523: PUSH
24524: LD_INT 10
24526: PUSH
24527: LD_INT 11
24529: PUSH
24530: LD_INT 12
24532: PUSH
24533: LD_INT 15
24535: PUSH
24536: LD_INT 14
24538: PUSH
24539: LD_INT 13
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: PUSH
24550: LD_VAR 0 2
24554: PUSH
24555: LD_INT 3
24557: MINUS
24558: ARRAY
24559: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24560: LD_ADDR_OWVAR 45
24564: PUSH
24565: LD_INT 9
24567: ST_TO_ADDR
// end ; 10 .. 13 :
24568: GO 25078
24570: LD_INT 10
24572: DOUBLE
24573: GREATEREQUAL
24574: IFFALSE 24582
24576: LD_INT 13
24578: DOUBLE
24579: LESSEQUAL
24580: IFTRUE 24584
24582: GO 24661
24584: POP
// begin bc_type := b_lab_full ;
24585: LD_ADDR_OWVAR 42
24589: PUSH
24590: LD_INT 8
24592: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24593: LD_ADDR_OWVAR 44
24597: PUSH
24598: LD_INT 10
24600: PUSH
24601: LD_INT 12
24603: PUSH
24604: LD_INT 14
24606: PUSH
24607: LD_INT 13
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: PUSH
24616: LD_VAR 0 2
24620: PUSH
24621: LD_INT 9
24623: MINUS
24624: ARRAY
24625: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24626: LD_ADDR_OWVAR 45
24630: PUSH
24631: LD_INT 11
24633: PUSH
24634: LD_INT 15
24636: PUSH
24637: LD_INT 12
24639: PUSH
24640: LD_INT 15
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: PUSH
24649: LD_VAR 0 2
24653: PUSH
24654: LD_INT 9
24656: MINUS
24657: ARRAY
24658: ST_TO_ADDR
// end ; 14 :
24659: GO 25078
24661: LD_INT 14
24663: DOUBLE
24664: EQUAL
24665: IFTRUE 24669
24667: GO 24680
24669: POP
// bc_type := b_workshop ; 15 :
24670: LD_ADDR_OWVAR 42
24674: PUSH
24675: LD_INT 2
24677: ST_TO_ADDR
24678: GO 25078
24680: LD_INT 15
24682: DOUBLE
24683: EQUAL
24684: IFTRUE 24688
24686: GO 24699
24688: POP
// bc_type := b_factory ; 16 :
24689: LD_ADDR_OWVAR 42
24693: PUSH
24694: LD_INT 3
24696: ST_TO_ADDR
24697: GO 25078
24699: LD_INT 16
24701: DOUBLE
24702: EQUAL
24703: IFTRUE 24707
24705: GO 24718
24707: POP
// bc_type := b_ext_gun ; 17 :
24708: LD_ADDR_OWVAR 42
24712: PUSH
24713: LD_INT 17
24715: ST_TO_ADDR
24716: GO 25078
24718: LD_INT 17
24720: DOUBLE
24721: EQUAL
24722: IFTRUE 24726
24724: GO 24754
24726: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24727: LD_ADDR_OWVAR 42
24731: PUSH
24732: LD_INT 19
24734: PUSH
24735: LD_INT 23
24737: PUSH
24738: LD_INT 19
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: LIST
24745: PUSH
24746: LD_VAR 0 1
24750: ARRAY
24751: ST_TO_ADDR
24752: GO 25078
24754: LD_INT 18
24756: DOUBLE
24757: EQUAL
24758: IFTRUE 24762
24760: GO 24773
24762: POP
// bc_type := b_ext_radar ; 19 :
24763: LD_ADDR_OWVAR 42
24767: PUSH
24768: LD_INT 20
24770: ST_TO_ADDR
24771: GO 25078
24773: LD_INT 19
24775: DOUBLE
24776: EQUAL
24777: IFTRUE 24781
24779: GO 24792
24781: POP
// bc_type := b_ext_radio ; 20 :
24782: LD_ADDR_OWVAR 42
24786: PUSH
24787: LD_INT 22
24789: ST_TO_ADDR
24790: GO 25078
24792: LD_INT 20
24794: DOUBLE
24795: EQUAL
24796: IFTRUE 24800
24798: GO 24811
24800: POP
// bc_type := b_ext_siberium ; 21 :
24801: LD_ADDR_OWVAR 42
24805: PUSH
24806: LD_INT 21
24808: ST_TO_ADDR
24809: GO 25078
24811: LD_INT 21
24813: DOUBLE
24814: EQUAL
24815: IFTRUE 24819
24817: GO 24830
24819: POP
// bc_type := b_ext_computer ; 22 :
24820: LD_ADDR_OWVAR 42
24824: PUSH
24825: LD_INT 24
24827: ST_TO_ADDR
24828: GO 25078
24830: LD_INT 22
24832: DOUBLE
24833: EQUAL
24834: IFTRUE 24838
24836: GO 24849
24838: POP
// bc_type := b_ext_track ; 23 :
24839: LD_ADDR_OWVAR 42
24843: PUSH
24844: LD_INT 16
24846: ST_TO_ADDR
24847: GO 25078
24849: LD_INT 23
24851: DOUBLE
24852: EQUAL
24853: IFTRUE 24857
24855: GO 24868
24857: POP
// bc_type := b_ext_laser ; 24 :
24858: LD_ADDR_OWVAR 42
24862: PUSH
24863: LD_INT 25
24865: ST_TO_ADDR
24866: GO 25078
24868: LD_INT 24
24870: DOUBLE
24871: EQUAL
24872: IFTRUE 24876
24874: GO 24887
24876: POP
// bc_type := b_control_tower ; 25 :
24877: LD_ADDR_OWVAR 42
24881: PUSH
24882: LD_INT 36
24884: ST_TO_ADDR
24885: GO 25078
24887: LD_INT 25
24889: DOUBLE
24890: EQUAL
24891: IFTRUE 24895
24893: GO 24906
24895: POP
// bc_type := b_breastwork ; 26 :
24896: LD_ADDR_OWVAR 42
24900: PUSH
24901: LD_INT 31
24903: ST_TO_ADDR
24904: GO 25078
24906: LD_INT 26
24908: DOUBLE
24909: EQUAL
24910: IFTRUE 24914
24912: GO 24925
24914: POP
// bc_type := b_bunker ; 27 :
24915: LD_ADDR_OWVAR 42
24919: PUSH
24920: LD_INT 32
24922: ST_TO_ADDR
24923: GO 25078
24925: LD_INT 27
24927: DOUBLE
24928: EQUAL
24929: IFTRUE 24933
24931: GO 24944
24933: POP
// bc_type := b_turret ; 28 :
24934: LD_ADDR_OWVAR 42
24938: PUSH
24939: LD_INT 33
24941: ST_TO_ADDR
24942: GO 25078
24944: LD_INT 28
24946: DOUBLE
24947: EQUAL
24948: IFTRUE 24952
24950: GO 24963
24952: POP
// bc_type := b_armoury ; 29 :
24953: LD_ADDR_OWVAR 42
24957: PUSH
24958: LD_INT 4
24960: ST_TO_ADDR
24961: GO 25078
24963: LD_INT 29
24965: DOUBLE
24966: EQUAL
24967: IFTRUE 24971
24969: GO 24982
24971: POP
// bc_type := b_barracks ; 30 :
24972: LD_ADDR_OWVAR 42
24976: PUSH
24977: LD_INT 5
24979: ST_TO_ADDR
24980: GO 25078
24982: LD_INT 30
24984: DOUBLE
24985: EQUAL
24986: IFTRUE 24990
24988: GO 25001
24990: POP
// bc_type := b_solar_power ; 31 :
24991: LD_ADDR_OWVAR 42
24995: PUSH
24996: LD_INT 27
24998: ST_TO_ADDR
24999: GO 25078
25001: LD_INT 31
25003: DOUBLE
25004: EQUAL
25005: IFTRUE 25009
25007: GO 25020
25009: POP
// bc_type := b_oil_power ; 32 :
25010: LD_ADDR_OWVAR 42
25014: PUSH
25015: LD_INT 26
25017: ST_TO_ADDR
25018: GO 25078
25020: LD_INT 32
25022: DOUBLE
25023: EQUAL
25024: IFTRUE 25028
25026: GO 25039
25028: POP
// bc_type := b_siberite_power ; 33 :
25029: LD_ADDR_OWVAR 42
25033: PUSH
25034: LD_INT 28
25036: ST_TO_ADDR
25037: GO 25078
25039: LD_INT 33
25041: DOUBLE
25042: EQUAL
25043: IFTRUE 25047
25045: GO 25058
25047: POP
// bc_type := b_oil_mine ; 34 :
25048: LD_ADDR_OWVAR 42
25052: PUSH
25053: LD_INT 29
25055: ST_TO_ADDR
25056: GO 25078
25058: LD_INT 34
25060: DOUBLE
25061: EQUAL
25062: IFTRUE 25066
25064: GO 25077
25066: POP
// bc_type := b_siberite_mine ; end ;
25067: LD_ADDR_OWVAR 42
25071: PUSH
25072: LD_INT 30
25074: ST_TO_ADDR
25075: GO 25078
25077: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25078: LD_ADDR_VAR 0 8
25082: PUSH
25083: LD_VAR 0 5
25087: PPUSH
25088: LD_VAR 0 6
25092: PPUSH
25093: LD_VAR 0 3
25097: PPUSH
25098: CALL_OW 47
25102: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25103: LD_OWVAR 42
25107: PUSH
25108: LD_INT 32
25110: PUSH
25111: LD_INT 33
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: IN
25118: IFFALSE 25134
// PlaceWeaponTurret ( b , weapon ) ;
25120: LD_VAR 0 8
25124: PPUSH
25125: LD_VAR 0 4
25129: PPUSH
25130: CALL_OW 431
// end ;
25134: LD_VAR 0 7
25138: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25139: LD_INT 0
25141: PPUSH
25142: PPUSH
25143: PPUSH
25144: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25145: LD_ADDR_VAR 0 4
25149: PUSH
25150: LD_INT 22
25152: PUSH
25153: LD_OWVAR 2
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 2
25164: PUSH
25165: LD_INT 30
25167: PUSH
25168: LD_INT 0
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 30
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: LIST
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PPUSH
25194: CALL_OW 69
25198: ST_TO_ADDR
// if not tmp then
25199: LD_VAR 0 4
25203: NOT
25204: IFFALSE 25208
// exit ;
25206: GO 25267
// for i in tmp do
25208: LD_ADDR_VAR 0 2
25212: PUSH
25213: LD_VAR 0 4
25217: PUSH
25218: FOR_IN
25219: IFFALSE 25265
// for j = 1 to 3 do
25221: LD_ADDR_VAR 0 3
25225: PUSH
25226: DOUBLE
25227: LD_INT 1
25229: DEC
25230: ST_TO_ADDR
25231: LD_INT 3
25233: PUSH
25234: FOR_TO
25235: IFFALSE 25261
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25237: LD_VAR 0 2
25241: PPUSH
25242: CALL_OW 274
25246: PPUSH
25247: LD_VAR 0 3
25251: PPUSH
25252: LD_INT 99999
25254: PPUSH
25255: CALL_OW 277
25259: GO 25234
25261: POP
25262: POP
25263: GO 25218
25265: POP
25266: POP
// end ;
25267: LD_VAR 0 1
25271: RET
// export function hHackSetLevel10 ; var i , j ; begin
25272: LD_INT 0
25274: PPUSH
25275: PPUSH
25276: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25277: LD_ADDR_VAR 0 2
25281: PUSH
25282: LD_INT 21
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PPUSH
25292: CALL_OW 69
25296: PUSH
25297: FOR_IN
25298: IFFALSE 25350
// if IsSelected ( i ) then
25300: LD_VAR 0 2
25304: PPUSH
25305: CALL_OW 306
25309: IFFALSE 25348
// begin for j := 1 to 4 do
25311: LD_ADDR_VAR 0 3
25315: PUSH
25316: DOUBLE
25317: LD_INT 1
25319: DEC
25320: ST_TO_ADDR
25321: LD_INT 4
25323: PUSH
25324: FOR_TO
25325: IFFALSE 25346
// SetSkill ( i , j , 10 ) ;
25327: LD_VAR 0 2
25331: PPUSH
25332: LD_VAR 0 3
25336: PPUSH
25337: LD_INT 10
25339: PPUSH
25340: CALL_OW 237
25344: GO 25324
25346: POP
25347: POP
// end ;
25348: GO 25297
25350: POP
25351: POP
// end ;
25352: LD_VAR 0 1
25356: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25357: LD_INT 0
25359: PPUSH
25360: PPUSH
25361: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25362: LD_ADDR_VAR 0 2
25366: PUSH
25367: LD_INT 22
25369: PUSH
25370: LD_OWVAR 2
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 21
25381: PUSH
25382: LD_INT 1
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PPUSH
25393: CALL_OW 69
25397: PUSH
25398: FOR_IN
25399: IFFALSE 25440
// begin for j := 1 to 4 do
25401: LD_ADDR_VAR 0 3
25405: PUSH
25406: DOUBLE
25407: LD_INT 1
25409: DEC
25410: ST_TO_ADDR
25411: LD_INT 4
25413: PUSH
25414: FOR_TO
25415: IFFALSE 25436
// SetSkill ( i , j , 10 ) ;
25417: LD_VAR 0 2
25421: PPUSH
25422: LD_VAR 0 3
25426: PPUSH
25427: LD_INT 10
25429: PPUSH
25430: CALL_OW 237
25434: GO 25414
25436: POP
25437: POP
// end ;
25438: GO 25398
25440: POP
25441: POP
// end ;
25442: LD_VAR 0 1
25446: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25447: LD_INT 0
25449: PPUSH
// uc_side := your_side ;
25450: LD_ADDR_OWVAR 20
25454: PUSH
25455: LD_OWVAR 2
25459: ST_TO_ADDR
// uc_nation := nation ;
25460: LD_ADDR_OWVAR 21
25464: PUSH
25465: LD_VAR 0 1
25469: ST_TO_ADDR
// InitHc ;
25470: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25474: LD_INT 0
25476: PPUSH
25477: LD_VAR 0 2
25481: PPUSH
25482: LD_VAR 0 3
25486: PPUSH
25487: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25491: LD_VAR 0 4
25495: PPUSH
25496: LD_VAR 0 5
25500: PPUSH
25501: CALL_OW 428
25505: PUSH
25506: LD_INT 0
25508: EQUAL
25509: IFFALSE 25533
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25511: CALL_OW 44
25515: PPUSH
25516: LD_VAR 0 4
25520: PPUSH
25521: LD_VAR 0 5
25525: PPUSH
25526: LD_INT 1
25528: PPUSH
25529: CALL_OW 48
// end ;
25533: LD_VAR 0 6
25537: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25538: LD_INT 0
25540: PPUSH
25541: PPUSH
// uc_side := your_side ;
25542: LD_ADDR_OWVAR 20
25546: PUSH
25547: LD_OWVAR 2
25551: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25552: LD_VAR 0 1
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: LD_INT 2
25562: PUSH
25563: LD_INT 3
25565: PUSH
25566: LD_INT 4
25568: PUSH
25569: LD_INT 5
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: IN
25579: IFFALSE 25591
// uc_nation := nation_american else
25581: LD_ADDR_OWVAR 21
25585: PUSH
25586: LD_INT 1
25588: ST_TO_ADDR
25589: GO 25634
// if chassis in [ 11 , 12 , 13 , 14 ] then
25591: LD_VAR 0 1
25595: PUSH
25596: LD_INT 11
25598: PUSH
25599: LD_INT 12
25601: PUSH
25602: LD_INT 13
25604: PUSH
25605: LD_INT 14
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: IN
25614: IFFALSE 25626
// uc_nation := nation_arabian else
25616: LD_ADDR_OWVAR 21
25620: PUSH
25621: LD_INT 2
25623: ST_TO_ADDR
25624: GO 25634
// uc_nation := nation_russian ;
25626: LD_ADDR_OWVAR 21
25630: PUSH
25631: LD_INT 3
25633: ST_TO_ADDR
// vc_chassis := chassis ;
25634: LD_ADDR_OWVAR 37
25638: PUSH
25639: LD_VAR 0 1
25643: ST_TO_ADDR
// vc_engine := engine ;
25644: LD_ADDR_OWVAR 39
25648: PUSH
25649: LD_VAR 0 2
25653: ST_TO_ADDR
// vc_control := control ;
25654: LD_ADDR_OWVAR 38
25658: PUSH
25659: LD_VAR 0 3
25663: ST_TO_ADDR
// vc_weapon := weapon ;
25664: LD_ADDR_OWVAR 40
25668: PUSH
25669: LD_VAR 0 4
25673: ST_TO_ADDR
// un := CreateVehicle ;
25674: LD_ADDR_VAR 0 8
25678: PUSH
25679: CALL_OW 45
25683: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25684: LD_VAR 0 8
25688: PPUSH
25689: LD_INT 0
25691: PPUSH
25692: LD_INT 5
25694: PPUSH
25695: CALL_OW 12
25699: PPUSH
25700: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25704: LD_VAR 0 8
25708: PPUSH
25709: LD_VAR 0 5
25713: PPUSH
25714: LD_VAR 0 6
25718: PPUSH
25719: LD_INT 1
25721: PPUSH
25722: CALL_OW 48
// end ;
25726: LD_VAR 0 7
25730: RET
// export hInvincible ; every 1 do
25731: GO 25733
25733: DISABLE
// hInvincible := [ ] ;
25734: LD_ADDR_EXP 79
25738: PUSH
25739: EMPTY
25740: ST_TO_ADDR
25741: END
// every 10 do var i ;
25742: GO 25744
25744: DISABLE
25745: LD_INT 0
25747: PPUSH
// begin enable ;
25748: ENABLE
// if not hInvincible then
25749: LD_EXP 79
25753: NOT
25754: IFFALSE 25758
// exit ;
25756: GO 25802
// for i in hInvincible do
25758: LD_ADDR_VAR 0 1
25762: PUSH
25763: LD_EXP 79
25767: PUSH
25768: FOR_IN
25769: IFFALSE 25800
// if GetLives ( i ) < 1000 then
25771: LD_VAR 0 1
25775: PPUSH
25776: CALL_OW 256
25780: PUSH
25781: LD_INT 1000
25783: LESS
25784: IFFALSE 25798
// SetLives ( i , 1000 ) ;
25786: LD_VAR 0 1
25790: PPUSH
25791: LD_INT 1000
25793: PPUSH
25794: CALL_OW 234
25798: GO 25768
25800: POP
25801: POP
// end ;
25802: PPOPN 1
25804: END
// export function hHackInvincible ; var i ; begin
25805: LD_INT 0
25807: PPUSH
25808: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25809: LD_ADDR_VAR 0 2
25813: PUSH
25814: LD_INT 2
25816: PUSH
25817: LD_INT 21
25819: PUSH
25820: LD_INT 1
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 21
25829: PUSH
25830: LD_INT 2
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: LIST
25841: PPUSH
25842: CALL_OW 69
25846: PUSH
25847: FOR_IN
25848: IFFALSE 25909
// if IsSelected ( i ) then
25850: LD_VAR 0 2
25854: PPUSH
25855: CALL_OW 306
25859: IFFALSE 25907
// begin if i in hInvincible then
25861: LD_VAR 0 2
25865: PUSH
25866: LD_EXP 79
25870: IN
25871: IFFALSE 25891
// hInvincible := hInvincible diff i else
25873: LD_ADDR_EXP 79
25877: PUSH
25878: LD_EXP 79
25882: PUSH
25883: LD_VAR 0 2
25887: DIFF
25888: ST_TO_ADDR
25889: GO 25907
// hInvincible := hInvincible union i ;
25891: LD_ADDR_EXP 79
25895: PUSH
25896: LD_EXP 79
25900: PUSH
25901: LD_VAR 0 2
25905: UNION
25906: ST_TO_ADDR
// end ;
25907: GO 25847
25909: POP
25910: POP
// end ;
25911: LD_VAR 0 1
25915: RET
// export function hHackInvisible ; var i , j ; begin
25916: LD_INT 0
25918: PPUSH
25919: PPUSH
25920: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25921: LD_ADDR_VAR 0 2
25925: PUSH
25926: LD_INT 21
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PPUSH
25936: CALL_OW 69
25940: PUSH
25941: FOR_IN
25942: IFFALSE 25966
// if IsSelected ( i ) then
25944: LD_VAR 0 2
25948: PPUSH
25949: CALL_OW 306
25953: IFFALSE 25964
// ComForceInvisible ( i ) ;
25955: LD_VAR 0 2
25959: PPUSH
25960: CALL_OW 496
25964: GO 25941
25966: POP
25967: POP
// end ;
25968: LD_VAR 0 1
25972: RET
// export function hHackChangeYourSide ; begin
25973: LD_INT 0
25975: PPUSH
// if your_side = 8 then
25976: LD_OWVAR 2
25980: PUSH
25981: LD_INT 8
25983: EQUAL
25984: IFFALSE 25996
// your_side := 0 else
25986: LD_ADDR_OWVAR 2
25990: PUSH
25991: LD_INT 0
25993: ST_TO_ADDR
25994: GO 26010
// your_side := your_side + 1 ;
25996: LD_ADDR_OWVAR 2
26000: PUSH
26001: LD_OWVAR 2
26005: PUSH
26006: LD_INT 1
26008: PLUS
26009: ST_TO_ADDR
// end ;
26010: LD_VAR 0 1
26014: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26015: LD_INT 0
26017: PPUSH
26018: PPUSH
26019: PPUSH
// for i in all_units do
26020: LD_ADDR_VAR 0 2
26024: PUSH
26025: LD_OWVAR 3
26029: PUSH
26030: FOR_IN
26031: IFFALSE 26109
// if IsSelected ( i ) then
26033: LD_VAR 0 2
26037: PPUSH
26038: CALL_OW 306
26042: IFFALSE 26107
// begin j := GetSide ( i ) ;
26044: LD_ADDR_VAR 0 3
26048: PUSH
26049: LD_VAR 0 2
26053: PPUSH
26054: CALL_OW 255
26058: ST_TO_ADDR
// if j = 8 then
26059: LD_VAR 0 3
26063: PUSH
26064: LD_INT 8
26066: EQUAL
26067: IFFALSE 26079
// j := 0 else
26069: LD_ADDR_VAR 0 3
26073: PUSH
26074: LD_INT 0
26076: ST_TO_ADDR
26077: GO 26093
// j := j + 1 ;
26079: LD_ADDR_VAR 0 3
26083: PUSH
26084: LD_VAR 0 3
26088: PUSH
26089: LD_INT 1
26091: PLUS
26092: ST_TO_ADDR
// SetSide ( i , j ) ;
26093: LD_VAR 0 2
26097: PPUSH
26098: LD_VAR 0 3
26102: PPUSH
26103: CALL_OW 235
// end ;
26107: GO 26030
26109: POP
26110: POP
// end ;
26111: LD_VAR 0 1
26115: RET
// export function hHackFog ; begin
26116: LD_INT 0
26118: PPUSH
// FogOff ( true ) ;
26119: LD_INT 1
26121: PPUSH
26122: CALL_OW 344
// end ;
26126: LD_VAR 0 1
26130: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26131: LD_INT 0
26133: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26134: LD_VAR 0 1
26138: PPUSH
26139: LD_VAR 0 2
26143: PPUSH
26144: LD_VAR 0 3
26148: PPUSH
26149: LD_INT 1
26151: PPUSH
26152: LD_INT 1
26154: PPUSH
26155: CALL_OW 483
// CenterOnXY ( x , y ) ;
26159: LD_VAR 0 2
26163: PPUSH
26164: LD_VAR 0 3
26168: PPUSH
26169: CALL_OW 84
// end ;
26173: LD_VAR 0 4
26177: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26178: LD_INT 0
26180: PPUSH
26181: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26182: LD_VAR 0 1
26186: NOT
26187: IFTRUE 26206
26189: PUSH
26190: LD_VAR 0 2
26194: PPUSH
26195: LD_VAR 0 3
26199: PPUSH
26200: CALL_OW 488
26204: NOT
26205: OR
26206: IFTRUE 26241
26208: PUSH
26209: LD_VAR 0 1
26213: PPUSH
26214: CALL_OW 266
26218: PUSH
26219: LD_INT 3
26221: NONEQUAL
26222: IFFALSE 26240
26224: PUSH
26225: LD_VAR 0 1
26229: PPUSH
26230: CALL_OW 247
26234: PUSH
26235: LD_INT 1
26237: EQUAL
26238: NOT
26239: AND
26240: OR
26241: IFFALSE 26245
// exit ;
26243: GO 26527
// if GetType ( factory ) = unit_human then
26245: LD_VAR 0 1
26249: PPUSH
26250: CALL_OW 247
26254: PUSH
26255: LD_INT 1
26257: EQUAL
26258: IFFALSE 26275
// factory := IsInUnit ( factory ) ;
26260: LD_ADDR_VAR 0 1
26264: PUSH
26265: LD_VAR 0 1
26269: PPUSH
26270: CALL_OW 310
26274: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26275: LD_VAR 0 1
26279: PPUSH
26280: CALL_OW 266
26284: PUSH
26285: LD_INT 3
26287: NONEQUAL
26288: IFFALSE 26292
// exit ;
26290: GO 26527
// for i := 1 to Count ( factoryWaypoints ) do
26292: LD_ADDR_VAR 0 5
26296: PUSH
26297: DOUBLE
26298: LD_INT 1
26300: DEC
26301: ST_TO_ADDR
26302: LD_EXP 80
26306: PPUSH
26307: CALL 35259 0 1
26311: PUSH
26312: FOR_TO
26313: IFFALSE 26475
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26315: LD_VAR 0 2
26319: PPUSH
26320: LD_VAR 0 3
26324: PPUSH
26325: CALL_OW 428
26329: PUSH
26330: LD_EXP 80
26334: PUSH
26335: LD_VAR 0 5
26339: ARRAY
26340: PUSH
26341: LD_INT 2
26343: ARRAY
26344: EQUAL
26345: IFFALSE 26377
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26347: LD_ADDR_EXP 80
26351: PUSH
26352: LD_EXP 80
26356: PPUSH
26357: LD_VAR 0 5
26361: PPUSH
26362: CALL_OW 3
26366: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26367: CALL 26532 0 0
// exit ;
26371: POP
26372: POP
26373: GO 26527
// end else
26375: GO 26473
// if factory = factoryWaypoints [ i ] [ 2 ] then
26377: LD_VAR 0 1
26381: PUSH
26382: LD_EXP 80
26386: PUSH
26387: LD_VAR 0 5
26391: ARRAY
26392: PUSH
26393: LD_INT 2
26395: ARRAY
26396: EQUAL
26397: IFFALSE 26473
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26399: LD_ADDR_EXP 80
26403: PUSH
26404: LD_EXP 80
26408: PPUSH
26409: LD_VAR 0 5
26413: PPUSH
26414: CALL_OW 3
26418: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26419: LD_ADDR_EXP 80
26423: PUSH
26424: LD_EXP 80
26428: PPUSH
26429: LD_VAR 0 1
26433: PPUSH
26434: CALL_OW 255
26438: PUSH
26439: LD_VAR 0 1
26443: PUSH
26444: LD_VAR 0 2
26448: PUSH
26449: LD_VAR 0 3
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: PPUSH
26460: CALL 71191 0 2
26464: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26465: CALL 26532 0 0
// exit ;
26469: POP
26470: POP
26471: GO 26527
// end ; end ;
26473: GO 26312
26475: POP
26476: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26477: LD_ADDR_EXP 80
26481: PUSH
26482: LD_EXP 80
26486: PPUSH
26487: LD_VAR 0 1
26491: PPUSH
26492: CALL_OW 255
26496: PUSH
26497: LD_VAR 0 1
26501: PUSH
26502: LD_VAR 0 2
26506: PUSH
26507: LD_VAR 0 3
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: PPUSH
26518: CALL 71191 0 2
26522: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26523: CALL 26532 0 0
// end ;
26527: LD_VAR 0 4
26531: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26532: LD_INT 0
26534: PPUSH
26535: PPUSH
26536: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26537: LD_STRING resetFactoryWaypoint();
26539: PPUSH
26540: CALL_OW 559
// if factoryWaypoints then
26544: LD_EXP 80
26548: IFFALSE 26669
// begin list := factoryWaypoints ;
26550: LD_ADDR_VAR 0 3
26554: PUSH
26555: LD_EXP 80
26559: ST_TO_ADDR
// for i := 1 to list do
26560: LD_ADDR_VAR 0 2
26564: PUSH
26565: DOUBLE
26566: LD_INT 1
26568: DEC
26569: ST_TO_ADDR
26570: LD_VAR 0 3
26574: PUSH
26575: FOR_TO
26576: IFFALSE 26667
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26578: LD_STRING setFactoryWaypointXY(
26580: PUSH
26581: LD_VAR 0 3
26585: PUSH
26586: LD_VAR 0 2
26590: ARRAY
26591: PUSH
26592: LD_INT 1
26594: ARRAY
26595: STR
26596: PUSH
26597: LD_STRING ,
26599: STR
26600: PUSH
26601: LD_VAR 0 3
26605: PUSH
26606: LD_VAR 0 2
26610: ARRAY
26611: PUSH
26612: LD_INT 2
26614: ARRAY
26615: STR
26616: PUSH
26617: LD_STRING ,
26619: STR
26620: PUSH
26621: LD_VAR 0 3
26625: PUSH
26626: LD_VAR 0 2
26630: ARRAY
26631: PUSH
26632: LD_INT 3
26634: ARRAY
26635: STR
26636: PUSH
26637: LD_STRING ,
26639: STR
26640: PUSH
26641: LD_VAR 0 3
26645: PUSH
26646: LD_VAR 0 2
26650: ARRAY
26651: PUSH
26652: LD_INT 4
26654: ARRAY
26655: STR
26656: PUSH
26657: LD_STRING )
26659: STR
26660: PPUSH
26661: CALL_OW 559
26665: GO 26575
26667: POP
26668: POP
// end ; end ;
26669: LD_VAR 0 1
26673: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26674: LD_INT 0
26676: PPUSH
// if HexInfo ( x , y ) = warehouse then
26677: LD_VAR 0 2
26681: PPUSH
26682: LD_VAR 0 3
26686: PPUSH
26687: CALL_OW 428
26691: PUSH
26692: LD_VAR 0 1
26696: EQUAL
26697: IFFALSE 26724
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26699: LD_ADDR_EXP 82
26703: PUSH
26704: LD_EXP 82
26708: PPUSH
26709: LD_VAR 0 1
26713: PPUSH
26714: LD_INT 0
26716: PPUSH
26717: CALL_OW 1
26721: ST_TO_ADDR
26722: GO 26775
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26724: LD_ADDR_EXP 82
26728: PUSH
26729: LD_EXP 82
26733: PPUSH
26734: LD_VAR 0 1
26738: PPUSH
26739: LD_VAR 0 1
26743: PPUSH
26744: CALL_OW 255
26748: PUSH
26749: LD_VAR 0 1
26753: PUSH
26754: LD_VAR 0 2
26758: PUSH
26759: LD_VAR 0 3
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: PPUSH
26770: CALL_OW 1
26774: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26775: CALL 26784 0 0
// end ;
26779: LD_VAR 0 4
26783: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26784: LD_INT 0
26786: PPUSH
26787: PPUSH
26788: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26789: LD_STRING resetWarehouseGatheringPoints();
26791: PPUSH
26792: CALL_OW 559
// if warehouseGatheringPoints then
26796: LD_EXP 82
26800: IFFALSE 26926
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26802: LD_ADDR_VAR 0 3
26806: PUSH
26807: LD_EXP 82
26811: PPUSH
26812: CALL 75125 0 1
26816: ST_TO_ADDR
// for i := 1 to list do
26817: LD_ADDR_VAR 0 2
26821: PUSH
26822: DOUBLE
26823: LD_INT 1
26825: DEC
26826: ST_TO_ADDR
26827: LD_VAR 0 3
26831: PUSH
26832: FOR_TO
26833: IFFALSE 26924
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26835: LD_STRING setWarehouseGatheringPointXY(
26837: PUSH
26838: LD_VAR 0 3
26842: PUSH
26843: LD_VAR 0 2
26847: ARRAY
26848: PUSH
26849: LD_INT 1
26851: ARRAY
26852: STR
26853: PUSH
26854: LD_STRING ,
26856: STR
26857: PUSH
26858: LD_VAR 0 3
26862: PUSH
26863: LD_VAR 0 2
26867: ARRAY
26868: PUSH
26869: LD_INT 2
26871: ARRAY
26872: STR
26873: PUSH
26874: LD_STRING ,
26876: STR
26877: PUSH
26878: LD_VAR 0 3
26882: PUSH
26883: LD_VAR 0 2
26887: ARRAY
26888: PUSH
26889: LD_INT 3
26891: ARRAY
26892: STR
26893: PUSH
26894: LD_STRING ,
26896: STR
26897: PUSH
26898: LD_VAR 0 3
26902: PUSH
26903: LD_VAR 0 2
26907: ARRAY
26908: PUSH
26909: LD_INT 4
26911: ARRAY
26912: STR
26913: PUSH
26914: LD_STRING )
26916: STR
26917: PPUSH
26918: CALL_OW 559
26922: GO 26832
26924: POP
26925: POP
// end ; end ;
26926: LD_VAR 0 1
26930: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26931: LD_EXP 82
26935: IFFALSE 27630
26937: GO 26939
26939: DISABLE
26940: LD_INT 0
26942: PPUSH
26943: PPUSH
26944: PPUSH
26945: PPUSH
26946: PPUSH
26947: PPUSH
26948: PPUSH
26949: PPUSH
26950: PPUSH
// begin enable ;
26951: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26952: LD_ADDR_VAR 0 3
26956: PUSH
26957: LD_EXP 82
26961: PPUSH
26962: CALL 75125 0 1
26966: ST_TO_ADDR
// if not list then
26967: LD_VAR 0 3
26971: NOT
26972: IFFALSE 26976
// exit ;
26974: GO 27630
// for i := 1 to list do
26976: LD_ADDR_VAR 0 1
26980: PUSH
26981: DOUBLE
26982: LD_INT 1
26984: DEC
26985: ST_TO_ADDR
26986: LD_VAR 0 3
26990: PUSH
26991: FOR_TO
26992: IFFALSE 27628
// begin depot := list [ i ] [ 2 ] ;
26994: LD_ADDR_VAR 0 8
26998: PUSH
26999: LD_VAR 0 3
27003: PUSH
27004: LD_VAR 0 1
27008: ARRAY
27009: PUSH
27010: LD_INT 2
27012: ARRAY
27013: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27014: LD_ADDR_VAR 0 5
27018: PUSH
27019: LD_VAR 0 3
27023: PUSH
27024: LD_VAR 0 1
27028: ARRAY
27029: PUSH
27030: LD_INT 1
27032: ARRAY
27033: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27034: LD_VAR 0 8
27038: PPUSH
27039: CALL_OW 301
27043: IFTRUE 27062
27045: PUSH
27046: LD_VAR 0 5
27050: PUSH
27051: LD_VAR 0 8
27055: PPUSH
27056: CALL_OW 255
27060: NONEQUAL
27061: OR
27062: IFFALSE 27091
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27064: LD_ADDR_EXP 82
27068: PUSH
27069: LD_EXP 82
27073: PPUSH
27074: LD_VAR 0 8
27078: PPUSH
27079: LD_INT 0
27081: PPUSH
27082: CALL_OW 1
27086: ST_TO_ADDR
// exit ;
27087: POP
27088: POP
27089: GO 27630
// end ; x := list [ i ] [ 3 ] ;
27091: LD_ADDR_VAR 0 6
27095: PUSH
27096: LD_VAR 0 3
27100: PUSH
27101: LD_VAR 0 1
27105: ARRAY
27106: PUSH
27107: LD_INT 3
27109: ARRAY
27110: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27111: LD_ADDR_VAR 0 7
27115: PUSH
27116: LD_VAR 0 3
27120: PUSH
27121: LD_VAR 0 1
27125: ARRAY
27126: PUSH
27127: LD_INT 4
27129: ARRAY
27130: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27131: LD_ADDR_VAR 0 9
27135: PUSH
27136: LD_VAR 0 6
27140: PPUSH
27141: LD_VAR 0 7
27145: PPUSH
27146: LD_INT 16
27148: PPUSH
27149: CALL 73699 0 3
27153: ST_TO_ADDR
// if not cratesNearbyPoint then
27154: LD_VAR 0 9
27158: NOT
27159: IFFALSE 27165
// exit ;
27161: POP
27162: POP
27163: GO 27630
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27165: LD_ADDR_VAR 0 4
27169: PUSH
27170: LD_INT 22
27172: PUSH
27173: LD_VAR 0 5
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 3
27184: PUSH
27185: LD_INT 60
27187: PUSH
27188: EMPTY
27189: LIST
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 91
27197: PUSH
27198: LD_VAR 0 8
27202: PUSH
27203: LD_INT 6
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 2
27213: PUSH
27214: LD_INT 25
27216: PUSH
27217: LD_INT 2
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 25
27226: PUSH
27227: LD_INT 16
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: LIST
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: PPUSH
27245: CALL_OW 69
27249: PUSH
27250: LD_VAR 0 8
27254: PPUSH
27255: CALL_OW 313
27259: PPUSH
27260: LD_INT 3
27262: PUSH
27263: LD_INT 60
27265: PUSH
27266: EMPTY
27267: LIST
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 2
27275: PUSH
27276: LD_INT 25
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 25
27288: PUSH
27289: LD_INT 16
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: LIST
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PPUSH
27305: CALL_OW 72
27309: UNION
27310: ST_TO_ADDR
// if tmp then
27311: LD_VAR 0 4
27315: IFFALSE 27395
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27317: LD_ADDR_VAR 0 4
27321: PUSH
27322: LD_VAR 0 4
27326: PPUSH
27327: LD_INT 3
27329: PPUSH
27330: CALL 71506 0 2
27334: ST_TO_ADDR
// for j in tmp do
27335: LD_ADDR_VAR 0 2
27339: PUSH
27340: LD_VAR 0 4
27344: PUSH
27345: FOR_IN
27346: IFFALSE 27389
// begin if IsInUnit ( j ) then
27348: LD_VAR 0 2
27352: PPUSH
27353: CALL_OW 310
27357: IFFALSE 27368
// ComExit ( j ) ;
27359: LD_VAR 0 2
27363: PPUSH
27364: CALL 71589 0 1
// AddComCollect ( j , x , y ) ;
27368: LD_VAR 0 2
27372: PPUSH
27373: LD_VAR 0 6
27377: PPUSH
27378: LD_VAR 0 7
27382: PPUSH
27383: CALL_OW 177
// end ;
27387: GO 27345
27389: POP
27390: POP
// exit ;
27391: POP
27392: POP
27393: GO 27630
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27395: LD_ADDR_VAR 0 4
27399: PUSH
27400: LD_INT 22
27402: PUSH
27403: LD_VAR 0 5
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 91
27414: PUSH
27415: LD_VAR 0 8
27419: PUSH
27420: LD_INT 8
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 2
27430: PUSH
27431: LD_INT 34
27433: PUSH
27434: LD_INT 12
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 34
27443: PUSH
27444: LD_INT 51
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 34
27453: PUSH
27454: LD_INT 32
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 34
27463: PUSH
27464: LD_INT 89
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: PPUSH
27483: CALL_OW 69
27487: ST_TO_ADDR
// if tmp then
27488: LD_VAR 0 4
27492: IFFALSE 27626
// begin for j in tmp do
27494: LD_ADDR_VAR 0 2
27498: PUSH
27499: LD_VAR 0 4
27503: PUSH
27504: FOR_IN
27505: IFFALSE 27624
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27507: LD_VAR 0 2
27511: PPUSH
27512: CALL_OW 262
27516: PUSH
27517: LD_INT 3
27519: EQUAL
27520: IFTRUE 27537
27522: PUSH
27523: LD_VAR 0 2
27527: PPUSH
27528: CALL_OW 261
27532: PUSH
27533: LD_INT 20
27535: GREATER
27536: OR
27537: IFFALSE 27551
27539: PUSH
27540: LD_VAR 0 2
27544: PPUSH
27545: CALL_OW 314
27549: NOT
27550: AND
27551: IFFALSE 27581
27553: PUSH
27554: LD_VAR 0 2
27558: PPUSH
27559: CALL_OW 263
27563: PUSH
27564: LD_INT 1
27566: NONEQUAL
27567: IFTRUE 27580
27569: PUSH
27570: LD_VAR 0 2
27574: PPUSH
27575: CALL_OW 311
27579: OR
27580: AND
27581: IFFALSE 27622
// begin ComCollect ( j , x , y ) ;
27583: LD_VAR 0 2
27587: PPUSH
27588: LD_VAR 0 6
27592: PPUSH
27593: LD_VAR 0 7
27597: PPUSH
27598: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27602: LD_VAR 0 2
27606: PPUSH
27607: LD_VAR 0 8
27611: PPUSH
27612: CALL_OW 172
// exit ;
27616: POP
27617: POP
27618: POP
27619: POP
27620: GO 27630
// end ;
27622: GO 27504
27624: POP
27625: POP
// end ; end ;
27626: GO 26991
27628: POP
27629: POP
// end ; end_of_file
27630: PPOPN 9
27632: END
// export function SOS_UnitDestroyed ( un ) ; begin
27633: LD_INT 0
27635: PPUSH
// ComRadiation ( un ) ;
27636: LD_VAR 0 1
27640: PPUSH
27641: CALL 28722 0 1
// end ;
27645: LD_VAR 0 2
27649: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27650: LD_INT 0
27652: PPUSH
// ComRadiation ( un ) ;
27653: LD_VAR 0 1
27657: PPUSH
27658: CALL 28722 0 1
// end ;
27662: LD_VAR 0 2
27666: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27667: LD_INT 0
27669: PPUSH
// end ;
27670: LD_VAR 0 4
27674: RET
// export function SOS_Command ( cmd ) ; begin
27675: LD_INT 0
27677: PPUSH
// end ;
27678: LD_VAR 0 2
27682: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27683: LD_INT 0
27685: PPUSH
// end ;
27686: LD_VAR 0 6
27690: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
27691: LD_INT 0
27693: PPUSH
27694: PPUSH
27695: PPUSH
27696: PPUSH
// if not vehicle or not factory then
27697: LD_VAR 0 1
27701: NOT
27702: IFTRUE 27711
27704: PUSH
27705: LD_VAR 0 2
27709: NOT
27710: OR
27711: IFFALSE 27715
// exit ;
27713: GO 28297
// if not factoryWaypoints then
27715: LD_EXP 80
27719: NOT
27720: IFFALSE 27724
// exit ;
27722: GO 28297
// for i := 1 to Count ( factoryWaypoints ) do
27724: LD_ADDR_VAR 0 4
27728: PUSH
27729: DOUBLE
27730: LD_INT 1
27732: DEC
27733: ST_TO_ADDR
27734: LD_EXP 80
27738: PPUSH
27739: CALL 35259 0 1
27743: PUSH
27744: FOR_TO
27745: IFFALSE 28295
// if factoryWaypoints [ i ] [ 2 ] = factory then
27747: LD_EXP 80
27751: PUSH
27752: LD_VAR 0 4
27756: ARRAY
27757: PUSH
27758: LD_INT 2
27760: ARRAY
27761: PUSH
27762: LD_VAR 0 2
27766: EQUAL
27767: IFFALSE 28293
// begin if GetControl ( vehicle ) = control_manual then
27769: LD_VAR 0 1
27773: PPUSH
27774: CALL_OW 263
27778: PUSH
27779: LD_INT 1
27781: EQUAL
27782: IFFALSE 28146
// begin driver := IsDrivenBy ( vehicle ) ;
27784: LD_ADDR_VAR 0 5
27788: PUSH
27789: LD_VAR 0 1
27793: PPUSH
27794: CALL_OW 311
27798: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27799: LD_VAR 0 5
27803: PUSH
27804: LD_EXP 81
27808: IN
27809: IFTRUE 27823
27811: PUSH
27812: LD_VAR 0 1
27816: PUSH
27817: LD_EXP 81
27821: IN
27822: OR
27823: IFFALSE 27829
// exit ;
27825: POP
27826: POP
27827: GO 28297
// if not HasTask ( driver ) then
27829: LD_VAR 0 5
27833: PPUSH
27834: CALL_OW 314
27838: NOT
27839: IFFALSE 28144
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27841: LD_ADDR_EXP 81
27845: PUSH
27846: LD_EXP 81
27850: PPUSH
27851: LD_VAR 0 5
27855: PPUSH
27856: CALL 71191 0 2
27860: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27861: LD_ADDR_EXP 81
27865: PUSH
27866: LD_EXP 81
27870: PPUSH
27871: LD_VAR 0 1
27875: PPUSH
27876: CALL 71191 0 2
27880: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27881: LD_ADDR_VAR 0 6
27885: PUSH
27886: LD_EXP 80
27890: PUSH
27891: LD_VAR 0 4
27895: ARRAY
27896: PUSH
27897: LD_INT 3
27899: ARRAY
27900: PPUSH
27901: LD_EXP 80
27905: PUSH
27906: LD_VAR 0 4
27910: ARRAY
27911: PUSH
27912: LD_INT 4
27914: ARRAY
27915: PPUSH
27916: CALL_OW 428
27920: ST_TO_ADDR
// if hex then
27921: LD_VAR 0 6
27925: IFFALSE 27943
// ComMoveUnit ( driver , hex ) else
27927: LD_VAR 0 5
27931: PPUSH
27932: LD_VAR 0 6
27936: PPUSH
27937: CALL_OW 112
27941: GO 28027
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27943: LD_VAR 0 1
27947: PPUSH
27948: LD_EXP 80
27952: PUSH
27953: LD_VAR 0 4
27957: ARRAY
27958: PUSH
27959: LD_INT 3
27961: ARRAY
27962: PPUSH
27963: LD_EXP 80
27967: PUSH
27968: LD_VAR 0 4
27972: ARRAY
27973: PUSH
27974: LD_INT 4
27976: ARRAY
27977: PPUSH
27978: CALL_OW 297
27982: PUSH
27983: LD_INT 0
27985: GREATER
27986: IFFALSE 28027
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27988: LD_VAR 0 5
27992: PPUSH
27993: LD_EXP 80
27997: PUSH
27998: LD_VAR 0 4
28002: ARRAY
28003: PUSH
28004: LD_INT 3
28006: ARRAY
28007: PPUSH
28008: LD_EXP 80
28012: PUSH
28013: LD_VAR 0 4
28017: ARRAY
28018: PUSH
28019: LD_INT 4
28021: ARRAY
28022: PPUSH
28023: CALL_OW 111
// AddComExitVehicle ( driver ) ;
28027: LD_VAR 0 5
28031: PPUSH
28032: CALL_OW 181
// if Multiplayer then
28036: LD_OWVAR 4
28040: IFFALSE 28089
// begin repeat wait ( 10 ) ;
28042: LD_INT 10
28044: PPUSH
28045: CALL_OW 67
// until not IsInUnit ( driver ) ;
28049: LD_VAR 0 5
28053: PPUSH
28054: CALL_OW 310
28058: NOT
28059: IFFALSE 28042
// if not HasTask ( driver ) then
28061: LD_VAR 0 5
28065: PPUSH
28066: CALL_OW 314
28070: NOT
28071: IFFALSE 28087
// ComEnterUnit ( driver , factory ) ;
28073: LD_VAR 0 5
28077: PPUSH
28078: LD_VAR 0 2
28082: PPUSH
28083: CALL_OW 120
// end else
28087: GO 28103
// AddComEnterUnit ( driver , factory ) ;
28089: LD_VAR 0 5
28093: PPUSH
28094: LD_VAR 0 2
28098: PPUSH
28099: CALL_OW 180
// wait ( 0 0$1 ) ;
28103: LD_INT 35
28105: PPUSH
28106: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
28110: LD_ADDR_EXP 81
28114: PUSH
28115: LD_EXP 81
28119: PUSH
28120: LD_VAR 0 5
28124: DIFF
28125: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
28126: LD_ADDR_EXP 81
28130: PUSH
28131: LD_EXP 81
28135: PUSH
28136: LD_VAR 0 1
28140: DIFF
28141: ST_TO_ADDR
// break ;
28142: GO 28295
// end ; end else
28144: GO 28293
// if GetControl ( vehicle ) = control_remote then
28146: LD_VAR 0 1
28150: PPUSH
28151: CALL_OW 263
28155: PUSH
28156: LD_INT 2
28158: EQUAL
28159: IFFALSE 28245
// begin wait ( 0 0$2 ) ;
28161: LD_INT 70
28163: PPUSH
28164: CALL_OW 67
// repeat wait ( 10 ) ;
28168: LD_INT 10
28170: PPUSH
28171: CALL_OW 67
// Connect ( vehicle ) ;
28175: LD_VAR 0 1
28179: PPUSH
28180: CALL 41503 0 1
// until IsControledBy ( vehicle ) ;
28184: LD_VAR 0 1
28188: PPUSH
28189: CALL_OW 312
28193: IFFALSE 28168
// wait ( 10 ) ;
28195: LD_INT 10
28197: PPUSH
28198: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28202: LD_VAR 0 1
28206: PPUSH
28207: LD_EXP 80
28211: PUSH
28212: LD_VAR 0 4
28216: ARRAY
28217: PUSH
28218: LD_INT 3
28220: ARRAY
28221: PPUSH
28222: LD_EXP 80
28226: PUSH
28227: LD_VAR 0 4
28231: ARRAY
28232: PUSH
28233: LD_INT 4
28235: ARRAY
28236: PPUSH
28237: CALL_OW 111
// break ;
28241: GO 28295
// end else
28243: GO 28293
// begin wait ( 0 0$3 ) ;
28245: LD_INT 105
28247: PPUSH
28248: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28252: LD_VAR 0 1
28256: PPUSH
28257: LD_EXP 80
28261: PUSH
28262: LD_VAR 0 4
28266: ARRAY
28267: PUSH
28268: LD_INT 3
28270: ARRAY
28271: PPUSH
28272: LD_EXP 80
28276: PUSH
28277: LD_VAR 0 4
28281: ARRAY
28282: PUSH
28283: LD_INT 4
28285: ARRAY
28286: PPUSH
28287: CALL_OW 111
// break ;
28291: GO 28295
// end ; end ;
28293: GO 27744
28295: POP
28296: POP
// end ;
28297: LD_VAR 0 3
28301: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28302: LD_INT 0
28304: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28305: LD_VAR 0 1
28309: PUSH
28310: LD_INT 250
28312: EQUAL
28313: IFFALSE 28330
28315: PUSH
28316: LD_VAR 0 2
28320: PPUSH
28321: CALL_OW 264
28325: PUSH
28326: LD_INT 81
28328: EQUAL
28329: AND
28330: IFFALSE 28351
// MinerPlaceMine ( unit , x , y ) ;
28332: LD_VAR 0 2
28336: PPUSH
28337: LD_VAR 0 4
28341: PPUSH
28342: LD_VAR 0 5
28346: PPUSH
28347: CALL 31483 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28351: LD_VAR 0 1
28355: PUSH
28356: LD_INT 251
28358: EQUAL
28359: IFFALSE 28376
28361: PUSH
28362: LD_VAR 0 2
28366: PPUSH
28367: CALL_OW 264
28371: PUSH
28372: LD_INT 81
28374: EQUAL
28375: AND
28376: IFFALSE 28397
// MinerDetonateMine ( unit , x , y ) ;
28378: LD_VAR 0 2
28382: PPUSH
28383: LD_VAR 0 4
28387: PPUSH
28388: LD_VAR 0 5
28392: PPUSH
28393: CALL 31762 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28397: LD_VAR 0 1
28401: PUSH
28402: LD_INT 252
28404: EQUAL
28405: IFFALSE 28422
28407: PUSH
28408: LD_VAR 0 2
28412: PPUSH
28413: CALL_OW 264
28417: PUSH
28418: LD_INT 81
28420: EQUAL
28421: AND
28422: IFFALSE 28443
// MinerCreateMinefield ( unit , x , y ) ;
28424: LD_VAR 0 2
28428: PPUSH
28429: LD_VAR 0 4
28433: PPUSH
28434: LD_VAR 0 5
28438: PPUSH
28439: CALL 32181 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28443: LD_VAR 0 1
28447: PUSH
28448: LD_INT 253
28450: EQUAL
28451: IFFALSE 28468
28453: PUSH
28454: LD_VAR 0 2
28458: PPUSH
28459: CALL_OW 257
28463: PUSH
28464: LD_INT 5
28466: EQUAL
28467: AND
28468: IFFALSE 28489
// ComBinocular ( unit , x , y ) ;
28470: LD_VAR 0 2
28474: PPUSH
28475: LD_VAR 0 4
28479: PPUSH
28480: LD_VAR 0 5
28484: PPUSH
28485: CALL 32556 0 3
// if selectedUnit then
28489: LD_VAR 0 3
28493: IFFALSE 28553
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28495: LD_VAR 0 1
28499: PUSH
28500: LD_INT 254
28502: EQUAL
28503: IFFALSE 28520
28505: PUSH
28506: LD_VAR 0 2
28510: PPUSH
28511: CALL_OW 264
28515: PUSH
28516: LD_INT 99
28518: EQUAL
28519: AND
28520: IFFALSE 28537
28522: PUSH
28523: LD_VAR 0 3
28527: PPUSH
28528: CALL_OW 263
28532: PUSH
28533: LD_INT 3
28535: EQUAL
28536: AND
28537: IFFALSE 28553
// HackDestroyVehicle ( unit , selectedUnit ) ;
28539: LD_VAR 0 2
28543: PPUSH
28544: LD_VAR 0 3
28548: PPUSH
28549: CALL 30843 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28553: LD_VAR 0 1
28557: PUSH
28558: LD_INT 255
28560: EQUAL
28561: IFFALSE 28585
28563: PUSH
28564: LD_VAR 0 2
28568: PPUSH
28569: CALL_OW 264
28573: PUSH
28574: LD_INT 14
28576: PUSH
28577: LD_INT 53
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: IN
28584: AND
28585: IFFALSE 28603
28587: PUSH
28588: LD_VAR 0 4
28592: PPUSH
28593: LD_VAR 0 5
28597: PPUSH
28598: CALL_OW 488
28602: AND
28603: IFFALSE 28627
// CutTreeXYR ( unit , x , y , 12 ) ;
28605: LD_VAR 0 2
28609: PPUSH
28610: LD_VAR 0 4
28614: PPUSH
28615: LD_VAR 0 5
28619: PPUSH
28620: LD_INT 12
28622: PPUSH
28623: CALL 28818 0 4
// if cmd = 256 then
28627: LD_VAR 0 1
28631: PUSH
28632: LD_INT 256
28634: EQUAL
28635: IFFALSE 28656
// SetFactoryWaypoint ( unit , x , y ) ;
28637: LD_VAR 0 2
28641: PPUSH
28642: LD_VAR 0 4
28646: PPUSH
28647: LD_VAR 0 5
28651: PPUSH
28652: CALL 26178 0 3
// if cmd = 257 then
28656: LD_VAR 0 1
28660: PUSH
28661: LD_INT 257
28663: EQUAL
28664: IFFALSE 28685
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28666: LD_VAR 0 2
28670: PPUSH
28671: LD_VAR 0 4
28675: PPUSH
28676: LD_VAR 0 5
28680: PPUSH
28681: CALL 26674 0 3
// if cmd = 258 then
28685: LD_VAR 0 1
28689: PUSH
28690: LD_INT 258
28692: EQUAL
28693: IFFALSE 28717
// BurnTreeXYR ( unit , x , y , 8 ) ;
28695: LD_VAR 0 2
28699: PPUSH
28700: LD_VAR 0 4
28704: PPUSH
28705: LD_VAR 0 5
28709: PPUSH
28710: LD_INT 8
28712: PPUSH
28713: CALL 29218 0 4
// end ;
28717: LD_VAR 0 6
28721: RET
// export function ComRadiation ( un ) ; var eff ; begin
28722: LD_INT 0
28724: PPUSH
28725: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28726: LD_VAR 0 1
28730: PPUSH
28731: CALL_OW 264
28735: PUSH
28736: LD_INT 91
28738: NONEQUAL
28739: IFFALSE 28743
// exit ;
28741: GO 28813
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28743: LD_INT 68
28745: PPUSH
28746: LD_VAR 0 1
28750: PPUSH
28751: CALL_OW 255
28755: PPUSH
28756: CALL_OW 321
28760: PUSH
28761: LD_INT 2
28763: EQUAL
28764: IFFALSE 28776
// eff := 50 else
28766: LD_ADDR_VAR 0 3
28770: PUSH
28771: LD_INT 50
28773: ST_TO_ADDR
28774: GO 28784
// eff := 25 ;
28776: LD_ADDR_VAR 0 3
28780: PUSH
28781: LD_INT 25
28783: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28784: LD_VAR 0 1
28788: PPUSH
28789: CALL_OW 250
28793: PPUSH
28794: LD_VAR 0 1
28798: PPUSH
28799: CALL_OW 251
28803: PPUSH
28804: LD_VAR 0 3
28808: PPUSH
28809: CALL_OW 495
// end ;
28813: LD_VAR 0 2
28817: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28818: LD_INT 0
28820: PPUSH
28821: PPUSH
28822: PPUSH
28823: PPUSH
28824: PPUSH
28825: PPUSH
28826: PPUSH
28827: PPUSH
28828: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28829: LD_VAR 0 1
28833: PPUSH
28834: CALL_OW 302
28838: NOT
28839: IFTRUE 28858
28841: PUSH
28842: LD_VAR 0 2
28846: PPUSH
28847: LD_VAR 0 3
28851: PPUSH
28852: CALL_OW 488
28856: NOT
28857: OR
28858: IFTRUE 28867
28860: PUSH
28861: LD_VAR 0 4
28865: NOT
28866: OR
28867: IFFALSE 28871
// exit ;
28869: GO 29213
// list := [ ] ;
28871: LD_ADDR_VAR 0 13
28875: PUSH
28876: EMPTY
28877: ST_TO_ADDR
// if x - r < 0 then
28878: LD_VAR 0 2
28882: PUSH
28883: LD_VAR 0 4
28887: MINUS
28888: PUSH
28889: LD_INT 0
28891: LESS
28892: IFFALSE 28904
// min_x := 0 else
28894: LD_ADDR_VAR 0 7
28898: PUSH
28899: LD_INT 0
28901: ST_TO_ADDR
28902: GO 28920
// min_x := x - r ;
28904: LD_ADDR_VAR 0 7
28908: PUSH
28909: LD_VAR 0 2
28913: PUSH
28914: LD_VAR 0 4
28918: MINUS
28919: ST_TO_ADDR
// if y - r < 0 then
28920: LD_VAR 0 3
28924: PUSH
28925: LD_VAR 0 4
28929: MINUS
28930: PUSH
28931: LD_INT 0
28933: LESS
28934: IFFALSE 28946
// min_y := 0 else
28936: LD_ADDR_VAR 0 8
28940: PUSH
28941: LD_INT 0
28943: ST_TO_ADDR
28944: GO 28962
// min_y := y - r ;
28946: LD_ADDR_VAR 0 8
28950: PUSH
28951: LD_VAR 0 3
28955: PUSH
28956: LD_VAR 0 4
28960: MINUS
28961: ST_TO_ADDR
// max_x := x + r ;
28962: LD_ADDR_VAR 0 9
28966: PUSH
28967: LD_VAR 0 2
28971: PUSH
28972: LD_VAR 0 4
28976: PLUS
28977: ST_TO_ADDR
// max_y := y + r ;
28978: LD_ADDR_VAR 0 10
28982: PUSH
28983: LD_VAR 0 3
28987: PUSH
28988: LD_VAR 0 4
28992: PLUS
28993: ST_TO_ADDR
// for _x = min_x to max_x do
28994: LD_ADDR_VAR 0 11
28998: PUSH
28999: DOUBLE
29000: LD_VAR 0 7
29004: DEC
29005: ST_TO_ADDR
29006: LD_VAR 0 9
29010: PUSH
29011: FOR_TO
29012: IFFALSE 29131
// for _y = min_y to max_y do
29014: LD_ADDR_VAR 0 12
29018: PUSH
29019: DOUBLE
29020: LD_VAR 0 8
29024: DEC
29025: ST_TO_ADDR
29026: LD_VAR 0 10
29030: PUSH
29031: FOR_TO
29032: IFFALSE 29127
// begin if not ValidHex ( _x , _y ) then
29034: LD_VAR 0 11
29038: PPUSH
29039: LD_VAR 0 12
29043: PPUSH
29044: CALL_OW 488
29048: NOT
29049: IFFALSE 29053
// continue ;
29051: GO 29031
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29053: LD_VAR 0 11
29057: PPUSH
29058: LD_VAR 0 12
29062: PPUSH
29063: CALL_OW 351
29067: IFFALSE 29085
29069: PUSH
29070: LD_VAR 0 11
29074: PPUSH
29075: LD_VAR 0 12
29079: PPUSH
29080: CALL_OW 554
29084: AND
29085: IFFALSE 29125
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29087: LD_ADDR_VAR 0 13
29091: PUSH
29092: LD_VAR 0 13
29096: PPUSH
29097: LD_VAR 0 13
29101: PUSH
29102: LD_INT 1
29104: PLUS
29105: PPUSH
29106: LD_VAR 0 11
29110: PUSH
29111: LD_VAR 0 12
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PPUSH
29120: CALL_OW 2
29124: ST_TO_ADDR
// end ;
29125: GO 29031
29127: POP
29128: POP
29129: GO 29011
29131: POP
29132: POP
// if not list then
29133: LD_VAR 0 13
29137: NOT
29138: IFFALSE 29142
// exit ;
29140: GO 29213
// for i in list do
29142: LD_ADDR_VAR 0 6
29146: PUSH
29147: LD_VAR 0 13
29151: PUSH
29152: FOR_IN
29153: IFFALSE 29211
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29155: LD_VAR 0 1
29159: PPUSH
29160: LD_STRING M
29162: PUSH
29163: LD_VAR 0 6
29167: PUSH
29168: LD_INT 1
29170: ARRAY
29171: PUSH
29172: LD_VAR 0 6
29176: PUSH
29177: LD_INT 2
29179: ARRAY
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: LD_INT 0
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: PUSH
29202: EMPTY
29203: LIST
29204: PPUSH
29205: CALL_OW 447
29209: GO 29152
29211: POP
29212: POP
// end ;
29213: LD_VAR 0 5
29217: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
29218: LD_INT 0
29220: PPUSH
29221: PPUSH
29222: PPUSH
29223: PPUSH
29224: PPUSH
29225: PPUSH
29226: PPUSH
29227: PPUSH
29228: PPUSH
29229: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29230: LD_VAR 0 1
29234: PPUSH
29235: CALL_OW 302
29239: NOT
29240: IFTRUE 29259
29242: PUSH
29243: LD_VAR 0 2
29247: PPUSH
29248: LD_VAR 0 3
29252: PPUSH
29253: CALL_OW 488
29257: NOT
29258: OR
29259: IFTRUE 29268
29261: PUSH
29262: LD_VAR 0 4
29266: NOT
29267: OR
29268: IFFALSE 29272
// exit ;
29270: GO 29789
// list := [ ] ;
29272: LD_ADDR_VAR 0 13
29276: PUSH
29277: EMPTY
29278: ST_TO_ADDR
// if x - r < 0 then
29279: LD_VAR 0 2
29283: PUSH
29284: LD_VAR 0 4
29288: MINUS
29289: PUSH
29290: LD_INT 0
29292: LESS
29293: IFFALSE 29305
// min_x := 0 else
29295: LD_ADDR_VAR 0 7
29299: PUSH
29300: LD_INT 0
29302: ST_TO_ADDR
29303: GO 29321
// min_x := x - r ;
29305: LD_ADDR_VAR 0 7
29309: PUSH
29310: LD_VAR 0 2
29314: PUSH
29315: LD_VAR 0 4
29319: MINUS
29320: ST_TO_ADDR
// if y - r < 0 then
29321: LD_VAR 0 3
29325: PUSH
29326: LD_VAR 0 4
29330: MINUS
29331: PUSH
29332: LD_INT 0
29334: LESS
29335: IFFALSE 29347
// min_y := 0 else
29337: LD_ADDR_VAR 0 8
29341: PUSH
29342: LD_INT 0
29344: ST_TO_ADDR
29345: GO 29363
// min_y := y - r ;
29347: LD_ADDR_VAR 0 8
29351: PUSH
29352: LD_VAR 0 3
29356: PUSH
29357: LD_VAR 0 4
29361: MINUS
29362: ST_TO_ADDR
// max_x := x + r ;
29363: LD_ADDR_VAR 0 9
29367: PUSH
29368: LD_VAR 0 2
29372: PUSH
29373: LD_VAR 0 4
29377: PLUS
29378: ST_TO_ADDR
// max_y := y + r ;
29379: LD_ADDR_VAR 0 10
29383: PUSH
29384: LD_VAR 0 3
29388: PUSH
29389: LD_VAR 0 4
29393: PLUS
29394: ST_TO_ADDR
// for _x = min_x to max_x do
29395: LD_ADDR_VAR 0 11
29399: PUSH
29400: DOUBLE
29401: LD_VAR 0 7
29405: DEC
29406: ST_TO_ADDR
29407: LD_VAR 0 9
29411: PUSH
29412: FOR_TO
29413: IFFALSE 29532
// for _y = min_y to max_y do
29415: LD_ADDR_VAR 0 12
29419: PUSH
29420: DOUBLE
29421: LD_VAR 0 8
29425: DEC
29426: ST_TO_ADDR
29427: LD_VAR 0 10
29431: PUSH
29432: FOR_TO
29433: IFFALSE 29528
// begin if not ValidHex ( _x , _y ) then
29435: LD_VAR 0 11
29439: PPUSH
29440: LD_VAR 0 12
29444: PPUSH
29445: CALL_OW 488
29449: NOT
29450: IFFALSE 29454
// continue ;
29452: GO 29432
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29454: LD_VAR 0 11
29458: PPUSH
29459: LD_VAR 0 12
29463: PPUSH
29464: CALL_OW 351
29468: IFFALSE 29486
29470: PUSH
29471: LD_VAR 0 11
29475: PPUSH
29476: LD_VAR 0 12
29480: PPUSH
29481: CALL_OW 554
29485: AND
29486: IFFALSE 29526
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29488: LD_ADDR_VAR 0 13
29492: PUSH
29493: LD_VAR 0 13
29497: PPUSH
29498: LD_VAR 0 13
29502: PUSH
29503: LD_INT 1
29505: PLUS
29506: PPUSH
29507: LD_VAR 0 11
29511: PUSH
29512: LD_VAR 0 12
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PPUSH
29521: CALL_OW 2
29525: ST_TO_ADDR
// end ;
29526: GO 29432
29528: POP
29529: POP
29530: GO 29412
29532: POP
29533: POP
// if not list then
29534: LD_VAR 0 13
29538: NOT
29539: IFFALSE 29543
// exit ;
29541: GO 29789
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29543: LD_ADDR_VAR 0 13
29547: PUSH
29548: LD_VAR 0 1
29552: PPUSH
29553: LD_VAR 0 13
29557: PPUSH
29558: LD_INT 1
29560: PPUSH
29561: LD_INT 1
29563: PPUSH
29564: CALL 38631 0 4
29568: ST_TO_ADDR
// ComStop ( flame ) ;
29569: LD_VAR 0 1
29573: PPUSH
29574: CALL_OW 141
// for i in list do
29578: LD_ADDR_VAR 0 6
29582: PUSH
29583: LD_VAR 0 13
29587: PUSH
29588: FOR_IN
29589: IFFALSE 29620
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29591: LD_VAR 0 1
29595: PPUSH
29596: LD_VAR 0 6
29600: PUSH
29601: LD_INT 1
29603: ARRAY
29604: PPUSH
29605: LD_VAR 0 6
29609: PUSH
29610: LD_INT 2
29612: ARRAY
29613: PPUSH
29614: CALL_OW 176
29618: GO 29588
29620: POP
29621: POP
// repeat wait ( 0 0$1 ) ;
29622: LD_INT 35
29624: PPUSH
29625: CALL_OW 67
// task := GetTaskList ( flame ) ;
29629: LD_ADDR_VAR 0 14
29633: PUSH
29634: LD_VAR 0 1
29638: PPUSH
29639: CALL_OW 437
29643: ST_TO_ADDR
// if not task then
29644: LD_VAR 0 14
29648: NOT
29649: IFFALSE 29653
// exit ;
29651: GO 29789
// if task [ 1 ] [ 1 ] <> | then
29653: LD_VAR 0 14
29657: PUSH
29658: LD_INT 1
29660: ARRAY
29661: PUSH
29662: LD_INT 1
29664: ARRAY
29665: PUSH
29666: LD_STRING |
29668: NONEQUAL
29669: IFFALSE 29673
// exit ;
29671: GO 29789
// _x := task [ 1 ] [ 2 ] ;
29673: LD_ADDR_VAR 0 11
29677: PUSH
29678: LD_VAR 0 14
29682: PUSH
29683: LD_INT 1
29685: ARRAY
29686: PUSH
29687: LD_INT 2
29689: ARRAY
29690: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29691: LD_ADDR_VAR 0 12
29695: PUSH
29696: LD_VAR 0 14
29700: PUSH
29701: LD_INT 1
29703: ARRAY
29704: PUSH
29705: LD_INT 3
29707: ARRAY
29708: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29709: LD_VAR 0 11
29713: PPUSH
29714: LD_VAR 0 12
29718: PPUSH
29719: CALL_OW 351
29723: NOT
29724: IFTRUE 29743
29726: PUSH
29727: LD_VAR 0 11
29731: PPUSH
29732: LD_VAR 0 12
29736: PPUSH
29737: CALL_OW 554
29741: NOT
29742: OR
29743: IFFALSE 29777
// begin task := Delete ( task , 1 ) ;
29745: LD_ADDR_VAR 0 14
29749: PUSH
29750: LD_VAR 0 14
29754: PPUSH
29755: LD_INT 1
29757: PPUSH
29758: CALL_OW 3
29762: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29763: LD_VAR 0 1
29767: PPUSH
29768: LD_VAR 0 14
29772: PPUSH
29773: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29777: LD_VAR 0 1
29781: PPUSH
29782: CALL_OW 314
29786: NOT
29787: IFFALSE 29622
// end ;
29789: LD_VAR 0 5
29793: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29794: LD_EXP 84
29798: NOT
29799: IFFALSE 29849
29801: GO 29803
29803: DISABLE
// begin initHack := true ;
29804: LD_ADDR_EXP 84
29808: PUSH
29809: LD_INT 1
29811: ST_TO_ADDR
// hackTanks := [ ] ;
29812: LD_ADDR_EXP 85
29816: PUSH
29817: EMPTY
29818: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29819: LD_ADDR_EXP 86
29823: PUSH
29824: EMPTY
29825: ST_TO_ADDR
// hackLimit := 3 ;
29826: LD_ADDR_EXP 87
29830: PUSH
29831: LD_INT 3
29833: ST_TO_ADDR
// hackDist := 12 ;
29834: LD_ADDR_EXP 88
29838: PUSH
29839: LD_INT 12
29841: ST_TO_ADDR
// hackCounter := [ ] ;
29842: LD_ADDR_EXP 89
29846: PUSH
29847: EMPTY
29848: ST_TO_ADDR
// end ;
29849: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29850: LD_EXP 84
29854: IFFALSE 29872
29856: PUSH
29857: LD_INT 34
29859: PUSH
29860: LD_INT 99
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PPUSH
29867: CALL_OW 69
29871: AND
29872: IFFALSE 30125
29874: GO 29876
29876: DISABLE
29877: LD_INT 0
29879: PPUSH
29880: PPUSH
// begin enable ;
29881: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29882: LD_ADDR_VAR 0 1
29886: PUSH
29887: LD_INT 34
29889: PUSH
29890: LD_INT 99
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PPUSH
29897: CALL_OW 69
29901: PUSH
29902: FOR_IN
29903: IFFALSE 30123
// begin if not i in hackTanks then
29905: LD_VAR 0 1
29909: PUSH
29910: LD_EXP 85
29914: IN
29915: NOT
29916: IFFALSE 29999
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29918: LD_ADDR_EXP 85
29922: PUSH
29923: LD_EXP 85
29927: PPUSH
29928: LD_EXP 85
29932: PUSH
29933: LD_INT 1
29935: PLUS
29936: PPUSH
29937: LD_VAR 0 1
29941: PPUSH
29942: CALL_OW 1
29946: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29947: LD_ADDR_EXP 86
29951: PUSH
29952: LD_EXP 86
29956: PPUSH
29957: LD_EXP 86
29961: PUSH
29962: LD_INT 1
29964: PLUS
29965: PPUSH
29966: EMPTY
29967: PPUSH
29968: CALL_OW 1
29972: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29973: LD_ADDR_EXP 89
29977: PUSH
29978: LD_EXP 89
29982: PPUSH
29983: LD_EXP 89
29987: PUSH
29988: LD_INT 1
29990: PLUS
29991: PPUSH
29992: EMPTY
29993: PPUSH
29994: CALL_OW 1
29998: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29999: LD_VAR 0 1
30003: PPUSH
30004: CALL_OW 302
30008: NOT
30009: IFFALSE 30022
// begin HackUnlinkAll ( i ) ;
30011: LD_VAR 0 1
30015: PPUSH
30016: CALL 30128 0 1
// continue ;
30020: GO 29902
// end ; HackCheckCapturedStatus ( i ) ;
30022: LD_VAR 0 1
30026: PPUSH
30027: CALL 30573 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30031: LD_ADDR_VAR 0 2
30035: PUSH
30036: LD_INT 81
30038: PUSH
30039: LD_VAR 0 1
30043: PPUSH
30044: CALL_OW 255
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 33
30055: PUSH
30056: LD_INT 3
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 91
30065: PUSH
30066: LD_VAR 0 1
30070: PUSH
30071: LD_EXP 88
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 50
30083: PUSH
30084: EMPTY
30085: LIST
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: PPUSH
30093: CALL_OW 69
30097: ST_TO_ADDR
// if not tmp then
30098: LD_VAR 0 2
30102: NOT
30103: IFFALSE 30107
// continue ;
30105: GO 29902
// HackLink ( i , tmp ) ;
30107: LD_VAR 0 1
30111: PPUSH
30112: LD_VAR 0 2
30116: PPUSH
30117: CALL 30264 0 2
// end ;
30121: GO 29902
30123: POP
30124: POP
// end ;
30125: PPOPN 2
30127: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30128: LD_INT 0
30130: PPUSH
30131: PPUSH
30132: PPUSH
// if not hack in hackTanks then
30133: LD_VAR 0 1
30137: PUSH
30138: LD_EXP 85
30142: IN
30143: NOT
30144: IFFALSE 30148
// exit ;
30146: GO 30259
// index := GetElementIndex ( hackTanks , hack ) ;
30148: LD_ADDR_VAR 0 4
30152: PUSH
30153: LD_EXP 85
30157: PPUSH
30158: LD_VAR 0 1
30162: PPUSH
30163: CALL 37926 0 2
30167: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30168: LD_EXP 86
30172: PUSH
30173: LD_VAR 0 4
30177: ARRAY
30178: IFFALSE 30259
// begin for i in hackTanksCaptured [ index ] do
30180: LD_ADDR_VAR 0 3
30184: PUSH
30185: LD_EXP 86
30189: PUSH
30190: LD_VAR 0 4
30194: ARRAY
30195: PUSH
30196: FOR_IN
30197: IFFALSE 30223
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30199: LD_VAR 0 3
30203: PUSH
30204: LD_INT 1
30206: ARRAY
30207: PPUSH
30208: LD_VAR 0 3
30212: PUSH
30213: LD_INT 2
30215: ARRAY
30216: PPUSH
30217: CALL_OW 235
30221: GO 30196
30223: POP
30224: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30225: LD_ADDR_EXP 86
30229: PUSH
30230: LD_EXP 86
30234: PPUSH
30235: LD_VAR 0 4
30239: PPUSH
30240: EMPTY
30241: PPUSH
30242: CALL_OW 1
30246: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30247: LD_VAR 0 1
30251: PPUSH
30252: LD_INT 0
30254: PPUSH
30255: CALL_OW 505
// end ; end ;
30259: LD_VAR 0 2
30263: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30264: LD_INT 0
30266: PPUSH
30267: PPUSH
30268: PPUSH
// if not hack in hackTanks or not vehicles then
30269: LD_VAR 0 1
30273: PUSH
30274: LD_EXP 85
30278: IN
30279: NOT
30280: IFTRUE 30289
30282: PUSH
30283: LD_VAR 0 2
30287: NOT
30288: OR
30289: IFFALSE 30293
// exit ;
30291: GO 30568
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30293: LD_ADDR_VAR 0 2
30297: PUSH
30298: LD_VAR 0 1
30302: PPUSH
30303: LD_VAR 0 2
30307: PPUSH
30308: LD_INT 1
30310: PPUSH
30311: LD_INT 1
30313: PPUSH
30314: CALL 38578 0 4
30318: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30319: LD_ADDR_VAR 0 5
30323: PUSH
30324: LD_EXP 85
30328: PPUSH
30329: LD_VAR 0 1
30333: PPUSH
30334: CALL 37926 0 2
30338: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30339: LD_EXP 86
30343: PUSH
30344: LD_VAR 0 5
30348: ARRAY
30349: PUSH
30350: LD_EXP 87
30354: LESS
30355: IFFALSE 30544
// begin for i := 1 to vehicles do
30357: LD_ADDR_VAR 0 4
30361: PUSH
30362: DOUBLE
30363: LD_INT 1
30365: DEC
30366: ST_TO_ADDR
30367: LD_VAR 0 2
30371: PUSH
30372: FOR_TO
30373: IFFALSE 30542
// begin if hackTanksCaptured [ index ] = hackLimit then
30375: LD_EXP 86
30379: PUSH
30380: LD_VAR 0 5
30384: ARRAY
30385: PUSH
30386: LD_EXP 87
30390: EQUAL
30391: IFFALSE 30395
// break ;
30393: GO 30542
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30395: LD_ADDR_EXP 89
30399: PUSH
30400: LD_EXP 89
30404: PPUSH
30405: LD_VAR 0 5
30409: PPUSH
30410: LD_EXP 89
30414: PUSH
30415: LD_VAR 0 5
30419: ARRAY
30420: PUSH
30421: LD_INT 1
30423: PLUS
30424: PPUSH
30425: CALL_OW 1
30429: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30430: LD_ADDR_EXP 86
30434: PUSH
30435: LD_EXP 86
30439: PPUSH
30440: LD_VAR 0 5
30444: PUSH
30445: LD_EXP 86
30449: PUSH
30450: LD_VAR 0 5
30454: ARRAY
30455: PUSH
30456: LD_INT 1
30458: PLUS
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PPUSH
30464: LD_VAR 0 2
30468: PUSH
30469: LD_VAR 0 4
30473: ARRAY
30474: PUSH
30475: LD_VAR 0 2
30479: PUSH
30480: LD_VAR 0 4
30484: ARRAY
30485: PPUSH
30486: CALL_OW 255
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PPUSH
30495: CALL 38143 0 3
30499: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30500: LD_VAR 0 2
30504: PUSH
30505: LD_VAR 0 4
30509: ARRAY
30510: PPUSH
30511: LD_VAR 0 1
30515: PPUSH
30516: CALL_OW 255
30520: PPUSH
30521: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30525: LD_VAR 0 2
30529: PUSH
30530: LD_VAR 0 4
30534: ARRAY
30535: PPUSH
30536: CALL_OW 141
// end ;
30540: GO 30372
30542: POP
30543: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30544: LD_VAR 0 1
30548: PPUSH
30549: LD_EXP 86
30553: PUSH
30554: LD_VAR 0 5
30558: ARRAY
30559: PUSH
30560: LD_INT 0
30562: PLUS
30563: PPUSH
30564: CALL_OW 505
// end ;
30568: LD_VAR 0 3
30572: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30573: LD_INT 0
30575: PPUSH
30576: PPUSH
30577: PPUSH
30578: PPUSH
// if not hack in hackTanks then
30579: LD_VAR 0 1
30583: PUSH
30584: LD_EXP 85
30588: IN
30589: NOT
30590: IFFALSE 30594
// exit ;
30592: GO 30838
// index := GetElementIndex ( hackTanks , hack ) ;
30594: LD_ADDR_VAR 0 4
30598: PUSH
30599: LD_EXP 85
30603: PPUSH
30604: LD_VAR 0 1
30608: PPUSH
30609: CALL 37926 0 2
30613: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30614: LD_ADDR_VAR 0 3
30618: PUSH
30619: DOUBLE
30620: LD_EXP 86
30624: PUSH
30625: LD_VAR 0 4
30629: ARRAY
30630: INC
30631: ST_TO_ADDR
30632: LD_INT 1
30634: PUSH
30635: FOR_DOWNTO
30636: IFFALSE 30812
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30638: LD_ADDR_VAR 0 5
30642: PUSH
30643: LD_EXP 86
30647: PUSH
30648: LD_VAR 0 4
30652: ARRAY
30653: PUSH
30654: LD_VAR 0 3
30658: ARRAY
30659: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30660: LD_VAR 0 5
30664: PUSH
30665: LD_INT 1
30667: ARRAY
30668: PPUSH
30669: CALL_OW 302
30673: NOT
30674: IFTRUE 30702
30676: PUSH
30677: LD_VAR 0 5
30681: PUSH
30682: LD_INT 1
30684: ARRAY
30685: PPUSH
30686: CALL_OW 255
30690: PUSH
30691: LD_VAR 0 1
30695: PPUSH
30696: CALL_OW 255
30700: NONEQUAL
30701: OR
30702: IFFALSE 30810
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30704: LD_VAR 0 5
30708: PUSH
30709: LD_INT 1
30711: ARRAY
30712: PPUSH
30713: CALL_OW 305
30717: IFFALSE 30745
30719: PUSH
30720: LD_VAR 0 5
30724: PUSH
30725: LD_INT 1
30727: ARRAY
30728: PPUSH
30729: CALL_OW 255
30733: PUSH
30734: LD_VAR 0 1
30738: PPUSH
30739: CALL_OW 255
30743: EQUAL
30744: AND
30745: IFFALSE 30769
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30747: LD_VAR 0 5
30751: PUSH
30752: LD_INT 1
30754: ARRAY
30755: PPUSH
30756: LD_VAR 0 5
30760: PUSH
30761: LD_INT 2
30763: ARRAY
30764: PPUSH
30765: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30769: LD_ADDR_EXP 86
30773: PUSH
30774: LD_EXP 86
30778: PPUSH
30779: LD_VAR 0 4
30783: PPUSH
30784: LD_EXP 86
30788: PUSH
30789: LD_VAR 0 4
30793: ARRAY
30794: PPUSH
30795: LD_VAR 0 3
30799: PPUSH
30800: CALL_OW 3
30804: PPUSH
30805: CALL_OW 1
30809: ST_TO_ADDR
// end ; end ;
30810: GO 30635
30812: POP
30813: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30814: LD_VAR 0 1
30818: PPUSH
30819: LD_EXP 86
30823: PUSH
30824: LD_VAR 0 4
30828: ARRAY
30829: PUSH
30830: LD_INT 0
30832: PLUS
30833: PPUSH
30834: CALL_OW 505
// end ;
30838: LD_VAR 0 2
30842: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30843: LD_INT 0
30845: PPUSH
30846: PPUSH
30847: PPUSH
30848: PPUSH
// if not hack in hackTanks then
30849: LD_VAR 0 1
30853: PUSH
30854: LD_EXP 85
30858: IN
30859: NOT
30860: IFFALSE 30864
// exit ;
30862: GO 30949
// index := GetElementIndex ( hackTanks , hack ) ;
30864: LD_ADDR_VAR 0 5
30868: PUSH
30869: LD_EXP 85
30873: PPUSH
30874: LD_VAR 0 1
30878: PPUSH
30879: CALL 37926 0 2
30883: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30884: LD_ADDR_VAR 0 4
30888: PUSH
30889: DOUBLE
30890: LD_INT 1
30892: DEC
30893: ST_TO_ADDR
30894: LD_EXP 86
30898: PUSH
30899: LD_VAR 0 5
30903: ARRAY
30904: PUSH
30905: FOR_TO
30906: IFFALSE 30947
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30908: LD_EXP 86
30912: PUSH
30913: LD_VAR 0 5
30917: ARRAY
30918: PUSH
30919: LD_VAR 0 4
30923: ARRAY
30924: PUSH
30925: LD_INT 1
30927: ARRAY
30928: PUSH
30929: LD_VAR 0 2
30933: EQUAL
30934: IFFALSE 30945
// KillUnit ( vehicle ) ;
30936: LD_VAR 0 2
30940: PPUSH
30941: CALL_OW 66
30945: GO 30905
30947: POP
30948: POP
// end ;
30949: LD_VAR 0 3
30953: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30954: LD_EXP 90
30958: NOT
30959: IFFALSE 30994
30961: GO 30963
30963: DISABLE
// begin initMiner := true ;
30964: LD_ADDR_EXP 90
30968: PUSH
30969: LD_INT 1
30971: ST_TO_ADDR
// minersList := [ ] ;
30972: LD_ADDR_EXP 91
30976: PUSH
30977: EMPTY
30978: ST_TO_ADDR
// minerMinesList := [ ] ;
30979: LD_ADDR_EXP 92
30983: PUSH
30984: EMPTY
30985: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30986: LD_ADDR_EXP 93
30990: PUSH
30991: LD_INT 5
30993: ST_TO_ADDR
// end ;
30994: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30995: LD_EXP 90
30999: IFFALSE 31017
31001: PUSH
31002: LD_INT 34
31004: PUSH
31005: LD_INT 81
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PPUSH
31012: CALL_OW 69
31016: AND
31017: IFFALSE 31480
31019: GO 31021
31021: DISABLE
31022: LD_INT 0
31024: PPUSH
31025: PPUSH
31026: PPUSH
31027: PPUSH
// begin enable ;
31028: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31029: LD_ADDR_VAR 0 1
31033: PUSH
31034: LD_INT 34
31036: PUSH
31037: LD_INT 81
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PPUSH
31044: CALL_OW 69
31048: PUSH
31049: FOR_IN
31050: IFFALSE 31122
// begin if not i in minersList then
31052: LD_VAR 0 1
31056: PUSH
31057: LD_EXP 91
31061: IN
31062: NOT
31063: IFFALSE 31120
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31065: LD_ADDR_EXP 91
31069: PUSH
31070: LD_EXP 91
31074: PPUSH
31075: LD_EXP 91
31079: PUSH
31080: LD_INT 1
31082: PLUS
31083: PPUSH
31084: LD_VAR 0 1
31088: PPUSH
31089: CALL_OW 1
31093: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31094: LD_ADDR_EXP 92
31098: PUSH
31099: LD_EXP 92
31103: PPUSH
31104: LD_EXP 92
31108: PUSH
31109: LD_INT 1
31111: PLUS
31112: PPUSH
31113: EMPTY
31114: PPUSH
31115: CALL_OW 1
31119: ST_TO_ADDR
// end end ;
31120: GO 31049
31122: POP
31123: POP
// for i := minerMinesList downto 1 do
31124: LD_ADDR_VAR 0 1
31128: PUSH
31129: DOUBLE
31130: LD_EXP 92
31134: INC
31135: ST_TO_ADDR
31136: LD_INT 1
31138: PUSH
31139: FOR_DOWNTO
31140: IFFALSE 31478
// begin if IsLive ( minersList [ i ] ) then
31142: LD_EXP 91
31146: PUSH
31147: LD_VAR 0 1
31151: ARRAY
31152: PPUSH
31153: CALL_OW 300
31157: IFFALSE 31185
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31159: LD_EXP 91
31163: PUSH
31164: LD_VAR 0 1
31168: ARRAY
31169: PPUSH
31170: LD_EXP 92
31174: PUSH
31175: LD_VAR 0 1
31179: ARRAY
31180: PPUSH
31181: CALL_OW 505
// if not minerMinesList [ i ] then
31185: LD_EXP 92
31189: PUSH
31190: LD_VAR 0 1
31194: ARRAY
31195: NOT
31196: IFFALSE 31200
// continue ;
31198: GO 31139
// for j := minerMinesList [ i ] downto 1 do
31200: LD_ADDR_VAR 0 2
31204: PUSH
31205: DOUBLE
31206: LD_EXP 92
31210: PUSH
31211: LD_VAR 0 1
31215: ARRAY
31216: INC
31217: ST_TO_ADDR
31218: LD_INT 1
31220: PUSH
31221: FOR_DOWNTO
31222: IFFALSE 31474
// begin side := GetSide ( minersList [ i ] ) ;
31224: LD_ADDR_VAR 0 3
31228: PUSH
31229: LD_EXP 91
31233: PUSH
31234: LD_VAR 0 1
31238: ARRAY
31239: PPUSH
31240: CALL_OW 255
31244: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31245: LD_ADDR_VAR 0 4
31249: PUSH
31250: LD_EXP 92
31254: PUSH
31255: LD_VAR 0 1
31259: ARRAY
31260: PUSH
31261: LD_VAR 0 2
31265: ARRAY
31266: PUSH
31267: LD_INT 1
31269: ARRAY
31270: PPUSH
31271: LD_EXP 92
31275: PUSH
31276: LD_VAR 0 1
31280: ARRAY
31281: PUSH
31282: LD_VAR 0 2
31286: ARRAY
31287: PUSH
31288: LD_INT 2
31290: ARRAY
31291: PPUSH
31292: CALL_OW 428
31296: ST_TO_ADDR
// if not tmp then
31297: LD_VAR 0 4
31301: NOT
31302: IFFALSE 31306
// continue ;
31304: GO 31221
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31306: LD_VAR 0 4
31310: PUSH
31311: LD_INT 81
31313: PUSH
31314: LD_VAR 0 3
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PPUSH
31323: CALL_OW 69
31327: IN
31328: IFFALSE 31378
31330: PUSH
31331: LD_EXP 92
31335: PUSH
31336: LD_VAR 0 1
31340: ARRAY
31341: PUSH
31342: LD_VAR 0 2
31346: ARRAY
31347: PUSH
31348: LD_INT 1
31350: ARRAY
31351: PPUSH
31352: LD_EXP 92
31356: PUSH
31357: LD_VAR 0 1
31361: ARRAY
31362: PUSH
31363: LD_VAR 0 2
31367: ARRAY
31368: PUSH
31369: LD_INT 2
31371: ARRAY
31372: PPUSH
31373: CALL_OW 458
31377: AND
31378: IFFALSE 31472
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31380: LD_EXP 92
31384: PUSH
31385: LD_VAR 0 1
31389: ARRAY
31390: PUSH
31391: LD_VAR 0 2
31395: ARRAY
31396: PUSH
31397: LD_INT 1
31399: ARRAY
31400: PPUSH
31401: LD_EXP 92
31405: PUSH
31406: LD_VAR 0 1
31410: ARRAY
31411: PUSH
31412: LD_VAR 0 2
31416: ARRAY
31417: PUSH
31418: LD_INT 2
31420: ARRAY
31421: PPUSH
31422: LD_VAR 0 3
31426: PPUSH
31427: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31431: LD_ADDR_EXP 92
31435: PUSH
31436: LD_EXP 92
31440: PPUSH
31441: LD_VAR 0 1
31445: PPUSH
31446: LD_EXP 92
31450: PUSH
31451: LD_VAR 0 1
31455: ARRAY
31456: PPUSH
31457: LD_VAR 0 2
31461: PPUSH
31462: CALL_OW 3
31466: PPUSH
31467: CALL_OW 1
31471: ST_TO_ADDR
// end ; end ;
31472: GO 31221
31474: POP
31475: POP
// end ;
31476: GO 31139
31478: POP
31479: POP
// end ;
31480: PPOPN 4
31482: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31483: LD_INT 0
31485: PPUSH
31486: PPUSH
// result := false ;
31487: LD_ADDR_VAR 0 4
31491: PUSH
31492: LD_INT 0
31494: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31495: LD_VAR 0 1
31499: PPUSH
31500: CALL_OW 264
31504: PUSH
31505: LD_INT 81
31507: EQUAL
31508: NOT
31509: IFFALSE 31513
// exit ;
31511: GO 31757
// index := GetElementIndex ( minersList , unit ) ;
31513: LD_ADDR_VAR 0 5
31517: PUSH
31518: LD_EXP 91
31522: PPUSH
31523: LD_VAR 0 1
31527: PPUSH
31528: CALL 37926 0 2
31532: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31533: LD_EXP 92
31537: PUSH
31538: LD_VAR 0 5
31542: ARRAY
31543: PUSH
31544: LD_EXP 93
31548: GREATEREQUAL
31549: IFFALSE 31553
// exit ;
31551: GO 31757
// ComMoveXY ( unit , x , y ) ;
31553: LD_VAR 0 1
31557: PPUSH
31558: LD_VAR 0 2
31562: PPUSH
31563: LD_VAR 0 3
31567: PPUSH
31568: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31572: LD_INT 35
31574: PPUSH
31575: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31579: LD_VAR 0 1
31583: PPUSH
31584: LD_VAR 0 2
31588: PPUSH
31589: LD_VAR 0 3
31593: PPUSH
31594: CALL 69972 0 3
31598: NOT
31599: IFFALSE 31612
31601: PUSH
31602: LD_VAR 0 1
31606: PPUSH
31607: CALL_OW 314
31611: AND
31612: IFFALSE 31616
// exit ;
31614: GO 31757
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31616: LD_VAR 0 2
31620: PPUSH
31621: LD_VAR 0 3
31625: PPUSH
31626: CALL_OW 428
31630: PUSH
31631: LD_VAR 0 1
31635: EQUAL
31636: IFFALSE 31650
31638: PUSH
31639: LD_VAR 0 1
31643: PPUSH
31644: CALL_OW 314
31648: NOT
31649: AND
31650: IFFALSE 31572
// PlaySoundXY ( x , y , PlantMine ) ;
31652: LD_VAR 0 2
31656: PPUSH
31657: LD_VAR 0 3
31661: PPUSH
31662: LD_STRING PlantMine
31664: PPUSH
31665: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31669: LD_VAR 0 2
31673: PPUSH
31674: LD_VAR 0 3
31678: PPUSH
31679: LD_VAR 0 1
31683: PPUSH
31684: CALL_OW 255
31688: PPUSH
31689: LD_INT 0
31691: PPUSH
31692: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31696: LD_ADDR_EXP 92
31700: PUSH
31701: LD_EXP 92
31705: PPUSH
31706: LD_VAR 0 5
31710: PUSH
31711: LD_EXP 92
31715: PUSH
31716: LD_VAR 0 5
31720: ARRAY
31721: PUSH
31722: LD_INT 1
31724: PLUS
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PPUSH
31730: LD_VAR 0 2
31734: PUSH
31735: LD_VAR 0 3
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PPUSH
31744: CALL 38143 0 3
31748: ST_TO_ADDR
// result := true ;
31749: LD_ADDR_VAR 0 4
31753: PUSH
31754: LD_INT 1
31756: ST_TO_ADDR
// end ;
31757: LD_VAR 0 4
31761: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31762: LD_INT 0
31764: PPUSH
31765: PPUSH
31766: PPUSH
// if not unit in minersList then
31767: LD_VAR 0 1
31771: PUSH
31772: LD_EXP 91
31776: IN
31777: NOT
31778: IFFALSE 31782
// exit ;
31780: GO 32176
// index := GetElementIndex ( minersList , unit ) ;
31782: LD_ADDR_VAR 0 6
31786: PUSH
31787: LD_EXP 91
31791: PPUSH
31792: LD_VAR 0 1
31796: PPUSH
31797: CALL 37926 0 2
31801: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31802: LD_ADDR_VAR 0 5
31806: PUSH
31807: DOUBLE
31808: LD_EXP 92
31812: PUSH
31813: LD_VAR 0 6
31817: ARRAY
31818: INC
31819: ST_TO_ADDR
31820: LD_INT 1
31822: PUSH
31823: FOR_DOWNTO
31824: IFFALSE 31987
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31826: LD_EXP 92
31830: PUSH
31831: LD_VAR 0 6
31835: ARRAY
31836: PUSH
31837: LD_VAR 0 5
31841: ARRAY
31842: PUSH
31843: LD_INT 1
31845: ARRAY
31846: PUSH
31847: LD_VAR 0 2
31851: EQUAL
31852: IFFALSE 31882
31854: PUSH
31855: LD_EXP 92
31859: PUSH
31860: LD_VAR 0 6
31864: ARRAY
31865: PUSH
31866: LD_VAR 0 5
31870: ARRAY
31871: PUSH
31872: LD_INT 2
31874: ARRAY
31875: PUSH
31876: LD_VAR 0 3
31880: EQUAL
31881: AND
31882: IFFALSE 31985
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31884: LD_EXP 92
31888: PUSH
31889: LD_VAR 0 6
31893: ARRAY
31894: PUSH
31895: LD_VAR 0 5
31899: ARRAY
31900: PUSH
31901: LD_INT 1
31903: ARRAY
31904: PPUSH
31905: LD_EXP 92
31909: PUSH
31910: LD_VAR 0 6
31914: ARRAY
31915: PUSH
31916: LD_VAR 0 5
31920: ARRAY
31921: PUSH
31922: LD_INT 2
31924: ARRAY
31925: PPUSH
31926: LD_VAR 0 1
31930: PPUSH
31931: CALL_OW 255
31935: PPUSH
31936: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31940: LD_ADDR_EXP 92
31944: PUSH
31945: LD_EXP 92
31949: PPUSH
31950: LD_VAR 0 6
31954: PPUSH
31955: LD_EXP 92
31959: PUSH
31960: LD_VAR 0 6
31964: ARRAY
31965: PPUSH
31966: LD_VAR 0 5
31970: PPUSH
31971: CALL_OW 3
31975: PPUSH
31976: CALL_OW 1
31980: ST_TO_ADDR
// exit ;
31981: POP
31982: POP
31983: GO 32176
// end ; end ;
31985: GO 31823
31987: POP
31988: POP
// for i := minerMinesList [ index ] downto 1 do
31989: LD_ADDR_VAR 0 5
31993: PUSH
31994: DOUBLE
31995: LD_EXP 92
31999: PUSH
32000: LD_VAR 0 6
32004: ARRAY
32005: INC
32006: ST_TO_ADDR
32007: LD_INT 1
32009: PUSH
32010: FOR_DOWNTO
32011: IFFALSE 32174
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32013: LD_EXP 92
32017: PUSH
32018: LD_VAR 0 6
32022: ARRAY
32023: PUSH
32024: LD_VAR 0 5
32028: ARRAY
32029: PUSH
32030: LD_INT 1
32032: ARRAY
32033: PPUSH
32034: LD_EXP 92
32038: PUSH
32039: LD_VAR 0 6
32043: ARRAY
32044: PUSH
32045: LD_VAR 0 5
32049: ARRAY
32050: PUSH
32051: LD_INT 2
32053: ARRAY
32054: PPUSH
32055: LD_VAR 0 2
32059: PPUSH
32060: LD_VAR 0 3
32064: PPUSH
32065: CALL_OW 298
32069: PUSH
32070: LD_INT 6
32072: LESS
32073: IFFALSE 32172
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32075: LD_EXP 92
32079: PUSH
32080: LD_VAR 0 6
32084: ARRAY
32085: PUSH
32086: LD_VAR 0 5
32090: ARRAY
32091: PUSH
32092: LD_INT 1
32094: ARRAY
32095: PPUSH
32096: LD_EXP 92
32100: PUSH
32101: LD_VAR 0 6
32105: ARRAY
32106: PUSH
32107: LD_VAR 0 5
32111: ARRAY
32112: PUSH
32113: LD_INT 2
32115: ARRAY
32116: PPUSH
32117: LD_VAR 0 1
32121: PPUSH
32122: CALL_OW 255
32126: PPUSH
32127: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32131: LD_ADDR_EXP 92
32135: PUSH
32136: LD_EXP 92
32140: PPUSH
32141: LD_VAR 0 6
32145: PPUSH
32146: LD_EXP 92
32150: PUSH
32151: LD_VAR 0 6
32155: ARRAY
32156: PPUSH
32157: LD_VAR 0 5
32161: PPUSH
32162: CALL_OW 3
32166: PPUSH
32167: CALL_OW 1
32171: ST_TO_ADDR
// end ; end ;
32172: GO 32010
32174: POP
32175: POP
// end ;
32176: LD_VAR 0 4
32180: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32181: LD_INT 0
32183: PPUSH
32184: PPUSH
32185: PPUSH
32186: PPUSH
32187: PPUSH
32188: PPUSH
32189: PPUSH
32190: PPUSH
32191: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32192: LD_VAR 0 1
32196: PPUSH
32197: CALL_OW 264
32201: PUSH
32202: LD_INT 81
32204: EQUAL
32205: NOT
32206: IFTRUE 32221
32208: PUSH
32209: LD_VAR 0 1
32213: PUSH
32214: LD_EXP 91
32218: IN
32219: NOT
32220: OR
32221: IFFALSE 32225
// exit ;
32223: GO 32551
// index := GetElementIndex ( minersList , unit ) ;
32225: LD_ADDR_VAR 0 6
32229: PUSH
32230: LD_EXP 91
32234: PPUSH
32235: LD_VAR 0 1
32239: PPUSH
32240: CALL 37926 0 2
32244: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32245: LD_ADDR_VAR 0 8
32249: PUSH
32250: LD_EXP 93
32254: PUSH
32255: LD_EXP 92
32259: PUSH
32260: LD_VAR 0 6
32264: ARRAY
32265: MINUS
32266: ST_TO_ADDR
// if not minesFreeAmount then
32267: LD_VAR 0 8
32271: NOT
32272: IFFALSE 32276
// exit ;
32274: GO 32551
// tmp := [ ] ;
32276: LD_ADDR_VAR 0 7
32280: PUSH
32281: EMPTY
32282: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32283: LD_ADDR_VAR 0 5
32287: PUSH
32288: DOUBLE
32289: LD_INT 1
32291: DEC
32292: ST_TO_ADDR
32293: LD_VAR 0 8
32297: PUSH
32298: FOR_TO
32299: IFFALSE 32498
// begin _d := rand ( 0 , 5 ) ;
32301: LD_ADDR_VAR 0 11
32305: PUSH
32306: LD_INT 0
32308: PPUSH
32309: LD_INT 5
32311: PPUSH
32312: CALL_OW 12
32316: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32317: LD_ADDR_VAR 0 12
32321: PUSH
32322: LD_INT 2
32324: PPUSH
32325: LD_INT 6
32327: PPUSH
32328: CALL_OW 12
32332: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32333: LD_ADDR_VAR 0 9
32337: PUSH
32338: LD_VAR 0 2
32342: PPUSH
32343: LD_VAR 0 11
32347: PPUSH
32348: LD_VAR 0 12
32352: PPUSH
32353: CALL_OW 272
32357: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32358: LD_ADDR_VAR 0 10
32362: PUSH
32363: LD_VAR 0 3
32367: PPUSH
32368: LD_VAR 0 11
32372: PPUSH
32373: LD_VAR 0 12
32377: PPUSH
32378: CALL_OW 273
32382: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32383: LD_VAR 0 9
32387: PPUSH
32388: LD_VAR 0 10
32392: PPUSH
32393: CALL_OW 488
32397: IFFALSE 32421
32399: PUSH
32400: LD_VAR 0 9
32404: PUSH
32405: LD_VAR 0 10
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_VAR 0 7
32418: IN
32419: NOT
32420: AND
32421: IFFALSE 32440
32423: PUSH
32424: LD_VAR 0 9
32428: PPUSH
32429: LD_VAR 0 10
32433: PPUSH
32434: CALL_OW 458
32438: NOT
32439: AND
32440: IFFALSE 32482
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32442: LD_ADDR_VAR 0 7
32446: PUSH
32447: LD_VAR 0 7
32451: PPUSH
32452: LD_VAR 0 7
32456: PUSH
32457: LD_INT 1
32459: PLUS
32460: PPUSH
32461: LD_VAR 0 9
32465: PUSH
32466: LD_VAR 0 10
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PPUSH
32475: CALL_OW 1
32479: ST_TO_ADDR
32480: GO 32496
// i := i - 1 ;
32482: LD_ADDR_VAR 0 5
32486: PUSH
32487: LD_VAR 0 5
32491: PUSH
32492: LD_INT 1
32494: MINUS
32495: ST_TO_ADDR
// end ;
32496: GO 32298
32498: POP
32499: POP
// for i in tmp do
32500: LD_ADDR_VAR 0 5
32504: PUSH
32505: LD_VAR 0 7
32509: PUSH
32510: FOR_IN
32511: IFFALSE 32549
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32513: LD_VAR 0 1
32517: PPUSH
32518: LD_VAR 0 5
32522: PUSH
32523: LD_INT 1
32525: ARRAY
32526: PPUSH
32527: LD_VAR 0 5
32531: PUSH
32532: LD_INT 2
32534: ARRAY
32535: PPUSH
32536: CALL 31483 0 3
32540: NOT
32541: IFFALSE 32547
// exit ;
32543: POP
32544: POP
32545: GO 32551
32547: GO 32510
32549: POP
32550: POP
// end ;
32551: LD_VAR 0 4
32555: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32556: LD_INT 0
32558: PPUSH
32559: PPUSH
32560: PPUSH
32561: PPUSH
32562: PPUSH
32563: PPUSH
32564: PPUSH
32565: PPUSH
32566: PPUSH
// if GetClass ( unit ) <> class_sniper then
32567: LD_VAR 0 1
32571: PPUSH
32572: CALL_OW 257
32576: PUSH
32577: LD_INT 5
32579: NONEQUAL
32580: IFFALSE 32584
// exit ;
32582: GO 33054
// dist := 8 ;
32584: LD_ADDR_VAR 0 5
32588: PUSH
32589: LD_INT 8
32591: ST_TO_ADDR
// viewRange := 12 ;
32592: LD_ADDR_VAR 0 8
32596: PUSH
32597: LD_INT 12
32599: ST_TO_ADDR
// side := GetSide ( unit ) ;
32600: LD_ADDR_VAR 0 6
32604: PUSH
32605: LD_VAR 0 1
32609: PPUSH
32610: CALL_OW 255
32614: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32615: LD_INT 61
32617: PPUSH
32618: LD_VAR 0 6
32622: PPUSH
32623: CALL_OW 321
32627: PUSH
32628: LD_INT 2
32630: EQUAL
32631: IFFALSE 32641
// viewRange := 16 ;
32633: LD_ADDR_VAR 0 8
32637: PUSH
32638: LD_INT 16
32640: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32641: LD_VAR 0 1
32645: PPUSH
32646: LD_VAR 0 2
32650: PPUSH
32651: LD_VAR 0 3
32655: PPUSH
32656: CALL_OW 297
32660: PUSH
32661: LD_VAR 0 5
32665: GREATER
32666: IFFALSE 32745
// begin ComMoveXY ( unit , x , y ) ;
32668: LD_VAR 0 1
32672: PPUSH
32673: LD_VAR 0 2
32677: PPUSH
32678: LD_VAR 0 3
32682: PPUSH
32683: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32687: LD_INT 35
32689: PPUSH
32690: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32694: LD_VAR 0 1
32698: PPUSH
32699: LD_VAR 0 2
32703: PPUSH
32704: LD_VAR 0 3
32708: PPUSH
32709: CALL 69972 0 3
32713: NOT
32714: IFFALSE 32718
// exit ;
32716: GO 33054
// until GetDistUnitXY ( unit , x , y ) < dist ;
32718: LD_VAR 0 1
32722: PPUSH
32723: LD_VAR 0 2
32727: PPUSH
32728: LD_VAR 0 3
32732: PPUSH
32733: CALL_OW 297
32737: PUSH
32738: LD_VAR 0 5
32742: LESS
32743: IFFALSE 32687
// end ; ComTurnXY ( unit , x , y ) ;
32745: LD_VAR 0 1
32749: PPUSH
32750: LD_VAR 0 2
32754: PPUSH
32755: LD_VAR 0 3
32759: PPUSH
32760: CALL_OW 118
// repeat if Multiplayer then
32764: LD_OWVAR 4
32768: IFFALSE 32779
// wait ( 35 ) else
32770: LD_INT 35
32772: PPUSH
32773: CALL_OW 67
32777: GO 32786
// wait ( 5 ) ;
32779: LD_INT 5
32781: PPUSH
32782: CALL_OW 67
// _d := GetDir ( unit ) ;
32786: LD_ADDR_VAR 0 11
32790: PUSH
32791: LD_VAR 0 1
32795: PPUSH
32796: CALL_OW 254
32800: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32801: LD_ADDR_VAR 0 7
32805: PUSH
32806: LD_VAR 0 1
32810: PPUSH
32811: CALL_OW 250
32815: PPUSH
32816: LD_VAR 0 1
32820: PPUSH
32821: CALL_OW 251
32825: PPUSH
32826: LD_VAR 0 2
32830: PPUSH
32831: LD_VAR 0 3
32835: PPUSH
32836: CALL 72608 0 4
32840: ST_TO_ADDR
// until dir = _d ;
32841: LD_VAR 0 7
32845: PUSH
32846: LD_VAR 0 11
32850: EQUAL
32851: IFFALSE 32764
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32853: LD_ADDR_VAR 0 9
32857: PUSH
32858: LD_VAR 0 1
32862: PPUSH
32863: CALL_OW 250
32867: PPUSH
32868: LD_VAR 0 7
32872: PPUSH
32873: LD_VAR 0 5
32877: PPUSH
32878: CALL_OW 272
32882: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32883: LD_ADDR_VAR 0 10
32887: PUSH
32888: LD_VAR 0 1
32892: PPUSH
32893: CALL_OW 251
32897: PPUSH
32898: LD_VAR 0 7
32902: PPUSH
32903: LD_VAR 0 5
32907: PPUSH
32908: CALL_OW 273
32912: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32913: LD_VAR 0 9
32917: PPUSH
32918: LD_VAR 0 10
32922: PPUSH
32923: CALL_OW 488
32927: NOT
32928: IFFALSE 32932
// exit ;
32930: GO 33054
// ComAnimCustom ( unit , 1 ) ;
32932: LD_VAR 0 1
32936: PPUSH
32937: LD_INT 1
32939: PPUSH
32940: CALL_OW 592
// p := 0 ;
32944: LD_ADDR_VAR 0 12
32948: PUSH
32949: LD_INT 0
32951: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32952: LD_VAR 0 9
32956: PPUSH
32957: LD_VAR 0 10
32961: PPUSH
32962: LD_VAR 0 6
32966: PPUSH
32967: LD_VAR 0 8
32971: PPUSH
32972: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32976: LD_INT 35
32978: PPUSH
32979: CALL_OW 67
// p := Inc ( p ) ;
32983: LD_ADDR_VAR 0 12
32987: PUSH
32988: LD_VAR 0 12
32992: PPUSH
32993: CALL 72564 0 1
32997: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32998: LD_VAR 0 12
33002: PUSH
33003: LD_INT 3
33005: EQUAL
33006: IFTRUE 33020
33008: PUSH
33009: LD_VAR 0 1
33013: PPUSH
33014: CALL_OW 302
33018: NOT
33019: OR
33020: IFTRUE 33033
33022: PUSH
33023: LD_VAR 0 1
33027: PPUSH
33028: CALL_OW 301
33032: OR
33033: IFFALSE 32976
// RemoveSeeing ( _x , _y , side ) ;
33035: LD_VAR 0 9
33039: PPUSH
33040: LD_VAR 0 10
33044: PPUSH
33045: LD_VAR 0 6
33049: PPUSH
33050: CALL_OW 331
// end ; end_of_file
33054: LD_VAR 0 4
33058: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33059: LD_INT 0
33061: PPUSH
33062: PPUSH
// if exist_mode then
33063: LD_VAR 0 2
33067: IFFALSE 33113
// begin unit := CreateCharacter ( prefix & ident ) ;
33069: LD_ADDR_VAR 0 5
33073: PUSH
33074: LD_VAR 0 3
33078: PUSH
33079: LD_VAR 0 1
33083: STR
33084: PPUSH
33085: CALL_OW 34
33089: ST_TO_ADDR
// if unit then
33090: LD_VAR 0 5
33094: IFFALSE 33111
// DeleteCharacters ( prefix & ident ) ;
33096: LD_VAR 0 3
33100: PUSH
33101: LD_VAR 0 1
33105: STR
33106: PPUSH
33107: CALL_OW 40
// end else
33111: GO 33128
// unit := NewCharacter ( ident ) ;
33113: LD_ADDR_VAR 0 5
33117: PUSH
33118: LD_VAR 0 1
33122: PPUSH
33123: CALL_OW 25
33127: ST_TO_ADDR
// result := unit ;
33128: LD_ADDR_VAR 0 4
33132: PUSH
33133: LD_VAR 0 5
33137: ST_TO_ADDR
// end ;
33138: LD_VAR 0 4
33142: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33143: LD_INT 0
33145: PPUSH
33146: PPUSH
// if exist_mode then
33147: LD_VAR 0 2
33151: IFFALSE 33176
// unit := CreateCharacter ( prefix & ident ) else
33153: LD_ADDR_VAR 0 5
33157: PUSH
33158: LD_VAR 0 3
33162: PUSH
33163: LD_VAR 0 1
33167: STR
33168: PPUSH
33169: CALL_OW 34
33173: ST_TO_ADDR
33174: GO 33191
// unit := NewCharacter ( ident ) ;
33176: LD_ADDR_VAR 0 5
33180: PUSH
33181: LD_VAR 0 1
33185: PPUSH
33186: CALL_OW 25
33190: ST_TO_ADDR
// result := unit ;
33191: LD_ADDR_VAR 0 4
33195: PUSH
33196: LD_VAR 0 5
33200: ST_TO_ADDR
// end ;
33201: LD_VAR 0 4
33205: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33206: LD_INT 0
33208: PPUSH
33209: PPUSH
// if not side or not nation then
33210: LD_VAR 0 1
33214: NOT
33215: IFTRUE 33224
33217: PUSH
33218: LD_VAR 0 2
33222: NOT
33223: OR
33224: IFFALSE 33228
// exit ;
33226: GO 33998
// case nation of nation_american :
33228: LD_VAR 0 2
33232: PUSH
33233: LD_INT 1
33235: DOUBLE
33236: EQUAL
33237: IFTRUE 33241
33239: GO 33455
33241: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33242: LD_ADDR_VAR 0 4
33246: PUSH
33247: LD_INT 35
33249: PUSH
33250: LD_INT 45
33252: PUSH
33253: LD_INT 46
33255: PUSH
33256: LD_INT 47
33258: PUSH
33259: LD_INT 82
33261: PUSH
33262: LD_INT 83
33264: PUSH
33265: LD_INT 84
33267: PUSH
33268: LD_INT 85
33270: PUSH
33271: LD_INT 86
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: LD_INT 2
33279: PUSH
33280: LD_INT 6
33282: PUSH
33283: LD_INT 15
33285: PUSH
33286: LD_INT 16
33288: PUSH
33289: LD_INT 7
33291: PUSH
33292: LD_INT 12
33294: PUSH
33295: LD_INT 13
33297: PUSH
33298: LD_INT 10
33300: PUSH
33301: LD_INT 14
33303: PUSH
33304: LD_INT 20
33306: PUSH
33307: LD_INT 21
33309: PUSH
33310: LD_INT 22
33312: PUSH
33313: LD_INT 25
33315: PUSH
33316: LD_INT 32
33318: PUSH
33319: LD_INT 27
33321: PUSH
33322: LD_INT 36
33324: PUSH
33325: LD_INT 69
33327: PUSH
33328: LD_INT 39
33330: PUSH
33331: LD_INT 34
33333: PUSH
33334: LD_INT 40
33336: PUSH
33337: LD_INT 48
33339: PUSH
33340: LD_INT 49
33342: PUSH
33343: LD_INT 50
33345: PUSH
33346: LD_INT 51
33348: PUSH
33349: LD_INT 52
33351: PUSH
33352: LD_INT 53
33354: PUSH
33355: LD_INT 54
33357: PUSH
33358: LD_INT 55
33360: PUSH
33361: LD_INT 56
33363: PUSH
33364: LD_INT 57
33366: PUSH
33367: LD_INT 58
33369: PUSH
33370: LD_INT 59
33372: PUSH
33373: LD_INT 60
33375: PUSH
33376: LD_INT 61
33378: PUSH
33379: LD_INT 62
33381: PUSH
33382: LD_INT 80
33384: PUSH
33385: LD_INT 82
33387: PUSH
33388: LD_INT 83
33390: PUSH
33391: LD_INT 84
33393: PUSH
33394: LD_INT 85
33396: PUSH
33397: LD_INT 86
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: ST_TO_ADDR
33453: GO 33920
33455: LD_INT 2
33457: DOUBLE
33458: EQUAL
33459: IFTRUE 33463
33461: GO 33689
33463: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33464: LD_ADDR_VAR 0 4
33468: PUSH
33469: LD_INT 35
33471: PUSH
33472: LD_INT 45
33474: PUSH
33475: LD_INT 46
33477: PUSH
33478: LD_INT 47
33480: PUSH
33481: LD_INT 82
33483: PUSH
33484: LD_INT 83
33486: PUSH
33487: LD_INT 84
33489: PUSH
33490: LD_INT 85
33492: PUSH
33493: LD_INT 87
33495: PUSH
33496: LD_INT 70
33498: PUSH
33499: LD_INT 1
33501: PUSH
33502: LD_INT 11
33504: PUSH
33505: LD_INT 3
33507: PUSH
33508: LD_INT 4
33510: PUSH
33511: LD_INT 5
33513: PUSH
33514: LD_INT 6
33516: PUSH
33517: LD_INT 15
33519: PUSH
33520: LD_INT 18
33522: PUSH
33523: LD_INT 7
33525: PUSH
33526: LD_INT 17
33528: PUSH
33529: LD_INT 8
33531: PUSH
33532: LD_INT 20
33534: PUSH
33535: LD_INT 21
33537: PUSH
33538: LD_INT 22
33540: PUSH
33541: LD_INT 72
33543: PUSH
33544: LD_INT 26
33546: PUSH
33547: LD_INT 69
33549: PUSH
33550: LD_INT 39
33552: PUSH
33553: LD_INT 40
33555: PUSH
33556: LD_INT 41
33558: PUSH
33559: LD_INT 42
33561: PUSH
33562: LD_INT 43
33564: PUSH
33565: LD_INT 48
33567: PUSH
33568: LD_INT 49
33570: PUSH
33571: LD_INT 50
33573: PUSH
33574: LD_INT 51
33576: PUSH
33577: LD_INT 52
33579: PUSH
33580: LD_INT 53
33582: PUSH
33583: LD_INT 54
33585: PUSH
33586: LD_INT 55
33588: PUSH
33589: LD_INT 56
33591: PUSH
33592: LD_INT 60
33594: PUSH
33595: LD_INT 61
33597: PUSH
33598: LD_INT 62
33600: PUSH
33601: LD_INT 66
33603: PUSH
33604: LD_INT 67
33606: PUSH
33607: LD_INT 68
33609: PUSH
33610: LD_INT 81
33612: PUSH
33613: LD_INT 82
33615: PUSH
33616: LD_INT 83
33618: PUSH
33619: LD_INT 84
33621: PUSH
33622: LD_INT 85
33624: PUSH
33625: LD_INT 87
33627: PUSH
33628: LD_INT 88
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: ST_TO_ADDR
33687: GO 33920
33689: LD_INT 3
33691: DOUBLE
33692: EQUAL
33693: IFTRUE 33697
33695: GO 33919
33697: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33698: LD_ADDR_VAR 0 4
33702: PUSH
33703: LD_INT 46
33705: PUSH
33706: LD_INT 47
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: LD_INT 82
33717: PUSH
33718: LD_INT 83
33720: PUSH
33721: LD_INT 84
33723: PUSH
33724: LD_INT 85
33726: PUSH
33727: LD_INT 86
33729: PUSH
33730: LD_INT 11
33732: PUSH
33733: LD_INT 9
33735: PUSH
33736: LD_INT 20
33738: PUSH
33739: LD_INT 19
33741: PUSH
33742: LD_INT 21
33744: PUSH
33745: LD_INT 24
33747: PUSH
33748: LD_INT 22
33750: PUSH
33751: LD_INT 25
33753: PUSH
33754: LD_INT 28
33756: PUSH
33757: LD_INT 29
33759: PUSH
33760: LD_INT 30
33762: PUSH
33763: LD_INT 31
33765: PUSH
33766: LD_INT 37
33768: PUSH
33769: LD_INT 38
33771: PUSH
33772: LD_INT 32
33774: PUSH
33775: LD_INT 27
33777: PUSH
33778: LD_INT 33
33780: PUSH
33781: LD_INT 69
33783: PUSH
33784: LD_INT 39
33786: PUSH
33787: LD_INT 34
33789: PUSH
33790: LD_INT 40
33792: PUSH
33793: LD_INT 71
33795: PUSH
33796: LD_INT 23
33798: PUSH
33799: LD_INT 44
33801: PUSH
33802: LD_INT 48
33804: PUSH
33805: LD_INT 49
33807: PUSH
33808: LD_INT 50
33810: PUSH
33811: LD_INT 51
33813: PUSH
33814: LD_INT 52
33816: PUSH
33817: LD_INT 53
33819: PUSH
33820: LD_INT 54
33822: PUSH
33823: LD_INT 55
33825: PUSH
33826: LD_INT 56
33828: PUSH
33829: LD_INT 57
33831: PUSH
33832: LD_INT 58
33834: PUSH
33835: LD_INT 59
33837: PUSH
33838: LD_INT 63
33840: PUSH
33841: LD_INT 64
33843: PUSH
33844: LD_INT 65
33846: PUSH
33847: LD_INT 82
33849: PUSH
33850: LD_INT 83
33852: PUSH
33853: LD_INT 84
33855: PUSH
33856: LD_INT 85
33858: PUSH
33859: LD_INT 86
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: ST_TO_ADDR
33917: GO 33920
33919: POP
// if state > - 1 and state < 3 then
33920: LD_VAR 0 3
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: GREATER
33929: IFFALSE 33941
33931: PUSH
33932: LD_VAR 0 3
33936: PUSH
33937: LD_INT 3
33939: LESS
33940: AND
33941: IFFALSE 33998
// for i in result do
33943: LD_ADDR_VAR 0 5
33947: PUSH
33948: LD_VAR 0 4
33952: PUSH
33953: FOR_IN
33954: IFFALSE 33996
// if GetTech ( i , side ) <> state then
33956: LD_VAR 0 5
33960: PPUSH
33961: LD_VAR 0 1
33965: PPUSH
33966: CALL_OW 321
33970: PUSH
33971: LD_VAR 0 3
33975: NONEQUAL
33976: IFFALSE 33994
// result := result diff i ;
33978: LD_ADDR_VAR 0 4
33982: PUSH
33983: LD_VAR 0 4
33987: PUSH
33988: LD_VAR 0 5
33992: DIFF
33993: ST_TO_ADDR
33994: GO 33953
33996: POP
33997: POP
// end ;
33998: LD_VAR 0 4
34002: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34003: LD_INT 0
34005: PPUSH
34006: PPUSH
34007: PPUSH
// result := true ;
34008: LD_ADDR_VAR 0 3
34012: PUSH
34013: LD_INT 1
34015: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34016: LD_ADDR_VAR 0 5
34020: PUSH
34021: LD_VAR 0 2
34025: PPUSH
34026: CALL_OW 480
34030: ST_TO_ADDR
// if not tmp then
34031: LD_VAR 0 5
34035: NOT
34036: IFFALSE 34040
// exit ;
34038: GO 34089
// for i in tmp do
34040: LD_ADDR_VAR 0 4
34044: PUSH
34045: LD_VAR 0 5
34049: PUSH
34050: FOR_IN
34051: IFFALSE 34087
// if GetTech ( i , side ) <> state_researched then
34053: LD_VAR 0 4
34057: PPUSH
34058: LD_VAR 0 1
34062: PPUSH
34063: CALL_OW 321
34067: PUSH
34068: LD_INT 2
34070: NONEQUAL
34071: IFFALSE 34085
// begin result := false ;
34073: LD_ADDR_VAR 0 3
34077: PUSH
34078: LD_INT 0
34080: ST_TO_ADDR
// exit ;
34081: POP
34082: POP
34083: GO 34089
// end ;
34085: GO 34050
34087: POP
34088: POP
// end ;
34089: LD_VAR 0 3
34093: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34094: LD_INT 0
34096: PPUSH
34097: PPUSH
34098: PPUSH
34099: PPUSH
34100: PPUSH
34101: PPUSH
34102: PPUSH
34103: PPUSH
34104: PPUSH
34105: PPUSH
34106: PPUSH
34107: PPUSH
34108: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34109: LD_VAR 0 1
34113: NOT
34114: IFTRUE 34131
34116: PUSH
34117: LD_VAR 0 1
34121: PPUSH
34122: CALL_OW 257
34126: PUSH
34127: LD_INT 9
34129: NONEQUAL
34130: OR
34131: IFFALSE 34135
// exit ;
34133: GO 34714
// side := GetSide ( unit ) ;
34135: LD_ADDR_VAR 0 9
34139: PUSH
34140: LD_VAR 0 1
34144: PPUSH
34145: CALL_OW 255
34149: ST_TO_ADDR
// tech_space := tech_spacanom ;
34150: LD_ADDR_VAR 0 12
34154: PUSH
34155: LD_INT 29
34157: ST_TO_ADDR
// tech_time := tech_taurad ;
34158: LD_ADDR_VAR 0 13
34162: PUSH
34163: LD_INT 28
34165: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34166: LD_ADDR_VAR 0 11
34170: PUSH
34171: LD_VAR 0 1
34175: PPUSH
34176: CALL_OW 310
34180: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34181: LD_VAR 0 11
34185: PPUSH
34186: CALL_OW 247
34190: PUSH
34191: LD_INT 2
34193: EQUAL
34194: IFFALSE 34198
// exit ;
34196: GO 34714
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34198: LD_ADDR_VAR 0 8
34202: PUSH
34203: LD_INT 81
34205: PUSH
34206: LD_VAR 0 9
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 3
34217: PUSH
34218: LD_INT 21
34220: PUSH
34221: LD_INT 3
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PPUSH
34236: CALL_OW 69
34240: ST_TO_ADDR
// if not tmp then
34241: LD_VAR 0 8
34245: NOT
34246: IFFALSE 34250
// exit ;
34248: GO 34714
// if in_unit then
34250: LD_VAR 0 11
34254: IFFALSE 34278
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34256: LD_ADDR_VAR 0 10
34260: PUSH
34261: LD_VAR 0 8
34265: PPUSH
34266: LD_VAR 0 11
34270: PPUSH
34271: CALL_OW 74
34275: ST_TO_ADDR
34276: GO 34298
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34278: LD_ADDR_VAR 0 10
34282: PUSH
34283: LD_VAR 0 8
34287: PPUSH
34288: LD_VAR 0 1
34292: PPUSH
34293: CALL_OW 74
34297: ST_TO_ADDR
// if not enemy then
34298: LD_VAR 0 10
34302: NOT
34303: IFFALSE 34307
// exit ;
34305: GO 34714
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34307: LD_VAR 0 11
34311: IFFALSE 34333
34313: PUSH
34314: LD_VAR 0 11
34318: PPUSH
34319: LD_VAR 0 10
34323: PPUSH
34324: CALL_OW 296
34328: PUSH
34329: LD_INT 13
34331: GREATER
34332: AND
34333: IFTRUE 34355
34335: PUSH
34336: LD_VAR 0 1
34340: PPUSH
34341: LD_VAR 0 10
34345: PPUSH
34346: CALL_OW 296
34350: PUSH
34351: LD_INT 12
34353: GREATER
34354: OR
34355: IFFALSE 34359
// exit ;
34357: GO 34714
// missile := [ 1 ] ;
34359: LD_ADDR_VAR 0 14
34363: PUSH
34364: LD_INT 1
34366: PUSH
34367: EMPTY
34368: LIST
34369: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34370: LD_VAR 0 9
34374: PPUSH
34375: LD_VAR 0 12
34379: PPUSH
34380: CALL_OW 325
34384: IFFALSE 34413
// missile := Replace ( missile , missile + 1 , 2 ) ;
34386: LD_ADDR_VAR 0 14
34390: PUSH
34391: LD_VAR 0 14
34395: PPUSH
34396: LD_VAR 0 14
34400: PUSH
34401: LD_INT 1
34403: PLUS
34404: PPUSH
34405: LD_INT 2
34407: PPUSH
34408: CALL_OW 1
34412: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34413: LD_VAR 0 9
34417: PPUSH
34418: LD_VAR 0 13
34422: PPUSH
34423: CALL_OW 325
34427: IFFALSE 34451
34429: PUSH
34430: LD_VAR 0 10
34434: PPUSH
34435: CALL_OW 255
34439: PPUSH
34440: LD_VAR 0 13
34444: PPUSH
34445: CALL_OW 325
34449: NOT
34450: AND
34451: IFFALSE 34480
// missile := Replace ( missile , missile + 1 , 3 ) ;
34453: LD_ADDR_VAR 0 14
34457: PUSH
34458: LD_VAR 0 14
34462: PPUSH
34463: LD_VAR 0 14
34467: PUSH
34468: LD_INT 1
34470: PLUS
34471: PPUSH
34472: LD_INT 3
34474: PPUSH
34475: CALL_OW 1
34479: ST_TO_ADDR
// if missile < 2 then
34480: LD_VAR 0 14
34484: PUSH
34485: LD_INT 2
34487: LESS
34488: IFFALSE 34492
// exit ;
34490: GO 34714
// x := GetX ( enemy ) ;
34492: LD_ADDR_VAR 0 4
34496: PUSH
34497: LD_VAR 0 10
34501: PPUSH
34502: CALL_OW 250
34506: ST_TO_ADDR
// y := GetY ( enemy ) ;
34507: LD_ADDR_VAR 0 5
34511: PUSH
34512: LD_VAR 0 10
34516: PPUSH
34517: CALL_OW 251
34521: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34522: LD_ADDR_VAR 0 6
34526: PUSH
34527: LD_VAR 0 4
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PPUSH
34536: LD_INT 1
34538: PPUSH
34539: CALL_OW 12
34543: PLUS
34544: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34545: LD_ADDR_VAR 0 7
34549: PUSH
34550: LD_VAR 0 5
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PPUSH
34559: LD_INT 1
34561: PPUSH
34562: CALL_OW 12
34566: PLUS
34567: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34568: LD_VAR 0 6
34572: PPUSH
34573: LD_VAR 0 7
34577: PPUSH
34578: CALL_OW 488
34582: NOT
34583: IFFALSE 34605
// begin _x := x ;
34585: LD_ADDR_VAR 0 6
34589: PUSH
34590: LD_VAR 0 4
34594: ST_TO_ADDR
// _y := y ;
34595: LD_ADDR_VAR 0 7
34599: PUSH
34600: LD_VAR 0 5
34604: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34605: LD_ADDR_VAR 0 3
34609: PUSH
34610: LD_INT 1
34612: PPUSH
34613: LD_VAR 0 14
34617: PPUSH
34618: CALL_OW 12
34622: ST_TO_ADDR
// case i of 1 :
34623: LD_VAR 0 3
34627: PUSH
34628: LD_INT 1
34630: DOUBLE
34631: EQUAL
34632: IFTRUE 34636
34634: GO 34653
34636: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34637: LD_VAR 0 1
34641: PPUSH
34642: LD_VAR 0 10
34646: PPUSH
34647: CALL_OW 115
34651: GO 34714
34653: LD_INT 2
34655: DOUBLE
34656: EQUAL
34657: IFTRUE 34661
34659: GO 34683
34661: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34662: LD_VAR 0 1
34666: PPUSH
34667: LD_VAR 0 6
34671: PPUSH
34672: LD_VAR 0 7
34676: PPUSH
34677: CALL_OW 153
34681: GO 34714
34683: LD_INT 3
34685: DOUBLE
34686: EQUAL
34687: IFTRUE 34691
34689: GO 34713
34691: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34692: LD_VAR 0 1
34696: PPUSH
34697: LD_VAR 0 6
34701: PPUSH
34702: LD_VAR 0 7
34706: PPUSH
34707: CALL_OW 154
34711: GO 34714
34713: POP
// end ;
34714: LD_VAR 0 2
34718: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34719: LD_INT 0
34721: PPUSH
34722: PPUSH
34723: PPUSH
34724: PPUSH
34725: PPUSH
34726: PPUSH
// if not unit or not building then
34727: LD_VAR 0 1
34731: NOT
34732: IFTRUE 34741
34734: PUSH
34735: LD_VAR 0 2
34739: NOT
34740: OR
34741: IFFALSE 34745
// exit ;
34743: GO 34903
// x := GetX ( building ) ;
34745: LD_ADDR_VAR 0 5
34749: PUSH
34750: LD_VAR 0 2
34754: PPUSH
34755: CALL_OW 250
34759: ST_TO_ADDR
// y := GetY ( building ) ;
34760: LD_ADDR_VAR 0 6
34764: PUSH
34765: LD_VAR 0 2
34769: PPUSH
34770: CALL_OW 251
34774: ST_TO_ADDR
// for i := 0 to 5 do
34775: LD_ADDR_VAR 0 4
34779: PUSH
34780: DOUBLE
34781: LD_INT 0
34783: DEC
34784: ST_TO_ADDR
34785: LD_INT 5
34787: PUSH
34788: FOR_TO
34789: IFFALSE 34901
// begin _x := ShiftX ( x , i , 3 ) ;
34791: LD_ADDR_VAR 0 7
34795: PUSH
34796: LD_VAR 0 5
34800: PPUSH
34801: LD_VAR 0 4
34805: PPUSH
34806: LD_INT 3
34808: PPUSH
34809: CALL_OW 272
34813: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34814: LD_ADDR_VAR 0 8
34818: PUSH
34819: LD_VAR 0 6
34823: PPUSH
34824: LD_VAR 0 4
34828: PPUSH
34829: LD_INT 3
34831: PPUSH
34832: CALL_OW 273
34836: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34837: LD_VAR 0 7
34841: PPUSH
34842: LD_VAR 0 8
34846: PPUSH
34847: CALL_OW 488
34851: NOT
34852: IFFALSE 34856
// continue ;
34854: GO 34788
// if HexInfo ( _x , _y ) = 0 then
34856: LD_VAR 0 7
34860: PPUSH
34861: LD_VAR 0 8
34865: PPUSH
34866: CALL_OW 428
34870: PUSH
34871: LD_INT 0
34873: EQUAL
34874: IFFALSE 34899
// begin ComMoveXY ( unit , _x , _y ) ;
34876: LD_VAR 0 1
34880: PPUSH
34881: LD_VAR 0 7
34885: PPUSH
34886: LD_VAR 0 8
34890: PPUSH
34891: CALL_OW 111
// exit ;
34895: POP
34896: POP
34897: GO 34903
// end ; end ;
34899: GO 34788
34901: POP
34902: POP
// end ;
34903: LD_VAR 0 3
34907: RET
// export function ScanBase ( side , base_area ) ; begin
34908: LD_INT 0
34910: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34911: LD_ADDR_VAR 0 3
34915: PUSH
34916: LD_VAR 0 2
34920: PPUSH
34921: LD_INT 81
34923: PUSH
34924: LD_VAR 0 1
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PPUSH
34933: CALL_OW 70
34937: ST_TO_ADDR
// end ;
34938: LD_VAR 0 3
34942: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34943: LD_INT 0
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
// result := false ;
34949: LD_ADDR_VAR 0 2
34953: PUSH
34954: LD_INT 0
34956: ST_TO_ADDR
// side := GetSide ( unit ) ;
34957: LD_ADDR_VAR 0 3
34961: PUSH
34962: LD_VAR 0 1
34966: PPUSH
34967: CALL_OW 255
34971: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34972: LD_ADDR_VAR 0 4
34976: PUSH
34977: LD_VAR 0 1
34981: PPUSH
34982: CALL_OW 248
34986: ST_TO_ADDR
// case nat of 1 :
34987: LD_VAR 0 4
34991: PUSH
34992: LD_INT 1
34994: DOUBLE
34995: EQUAL
34996: IFTRUE 35000
34998: GO 35011
35000: POP
// tech := tech_lassight ; 2 :
35001: LD_ADDR_VAR 0 5
35005: PUSH
35006: LD_INT 12
35008: ST_TO_ADDR
35009: GO 35050
35011: LD_INT 2
35013: DOUBLE
35014: EQUAL
35015: IFTRUE 35019
35017: GO 35030
35019: POP
// tech := tech_mortar ; 3 :
35020: LD_ADDR_VAR 0 5
35024: PUSH
35025: LD_INT 41
35027: ST_TO_ADDR
35028: GO 35050
35030: LD_INT 3
35032: DOUBLE
35033: EQUAL
35034: IFTRUE 35038
35036: GO 35049
35038: POP
// tech := tech_bazooka ; end ;
35039: LD_ADDR_VAR 0 5
35043: PUSH
35044: LD_INT 44
35046: ST_TO_ADDR
35047: GO 35050
35049: POP
// if Researched ( side , tech ) then
35050: LD_VAR 0 3
35054: PPUSH
35055: LD_VAR 0 5
35059: PPUSH
35060: CALL_OW 325
35064: IFFALSE 35091
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35066: LD_ADDR_VAR 0 2
35070: PUSH
35071: LD_INT 5
35073: PUSH
35074: LD_INT 8
35076: PUSH
35077: LD_INT 9
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: LIST
35084: PUSH
35085: LD_VAR 0 4
35089: ARRAY
35090: ST_TO_ADDR
// end ;
35091: LD_VAR 0 2
35095: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35096: LD_INT 0
35098: PPUSH
35099: PPUSH
35100: PPUSH
// if not mines then
35101: LD_VAR 0 2
35105: NOT
35106: IFFALSE 35110
// exit ;
35108: GO 35254
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35110: LD_ADDR_VAR 0 5
35114: PUSH
35115: LD_INT 81
35117: PUSH
35118: LD_VAR 0 1
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 3
35129: PUSH
35130: LD_INT 21
35132: PUSH
35133: LD_INT 3
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PPUSH
35148: CALL_OW 69
35152: ST_TO_ADDR
// for i in mines do
35153: LD_ADDR_VAR 0 4
35157: PUSH
35158: LD_VAR 0 2
35162: PUSH
35163: FOR_IN
35164: IFFALSE 35252
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35166: LD_VAR 0 4
35170: PUSH
35171: LD_INT 1
35173: ARRAY
35174: PPUSH
35175: LD_VAR 0 4
35179: PUSH
35180: LD_INT 2
35182: ARRAY
35183: PPUSH
35184: CALL_OW 458
35188: NOT
35189: IFFALSE 35193
// continue ;
35191: GO 35163
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35193: LD_VAR 0 4
35197: PUSH
35198: LD_INT 1
35200: ARRAY
35201: PPUSH
35202: LD_VAR 0 4
35206: PUSH
35207: LD_INT 2
35209: ARRAY
35210: PPUSH
35211: CALL_OW 428
35215: PUSH
35216: LD_VAR 0 5
35220: IN
35221: IFFALSE 35250
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35223: LD_VAR 0 4
35227: PUSH
35228: LD_INT 1
35230: ARRAY
35231: PPUSH
35232: LD_VAR 0 4
35236: PUSH
35237: LD_INT 2
35239: ARRAY
35240: PPUSH
35241: LD_VAR 0 1
35245: PPUSH
35246: CALL_OW 456
// end ;
35250: GO 35163
35252: POP
35253: POP
// end ;
35254: LD_VAR 0 3
35258: RET
// export function Count ( array ) ; begin
35259: LD_INT 0
35261: PPUSH
// result := array + 0 ;
35262: LD_ADDR_VAR 0 2
35266: PUSH
35267: LD_VAR 0 1
35271: PUSH
35272: LD_INT 0
35274: PLUS
35275: ST_TO_ADDR
// end ;
35276: LD_VAR 0 2
35280: RET
// export function IsEmpty ( building ) ; begin
35281: LD_INT 0
35283: PPUSH
// if not building then
35284: LD_VAR 0 1
35288: NOT
35289: IFFALSE 35293
// exit ;
35291: GO 35336
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35293: LD_ADDR_VAR 0 2
35297: PUSH
35298: LD_VAR 0 1
35302: PUSH
35303: LD_INT 22
35305: PUSH
35306: LD_VAR 0 1
35310: PPUSH
35311: CALL_OW 255
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 58
35322: PUSH
35323: EMPTY
35324: LIST
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PPUSH
35330: CALL_OW 69
35334: IN
35335: ST_TO_ADDR
// end ;
35336: LD_VAR 0 2
35340: RET
// export function IsNotFull ( building ) ; var places ; begin
35341: LD_INT 0
35343: PPUSH
35344: PPUSH
// if not building then
35345: LD_VAR 0 1
35349: NOT
35350: IFFALSE 35354
// exit ;
35352: GO 35382
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35354: LD_ADDR_VAR 0 2
35358: PUSH
35359: LD_VAR 0 1
35363: PPUSH
35364: LD_INT 3
35366: PUSH
35367: LD_INT 62
35369: PUSH
35370: EMPTY
35371: LIST
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PPUSH
35377: CALL_OW 72
35381: ST_TO_ADDR
// end ;
35382: LD_VAR 0 2
35386: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35387: LD_INT 0
35389: PPUSH
35390: PPUSH
35391: PPUSH
35392: PPUSH
// tmp := [ ] ;
35393: LD_ADDR_VAR 0 3
35397: PUSH
35398: EMPTY
35399: ST_TO_ADDR
// list := [ ] ;
35400: LD_ADDR_VAR 0 5
35404: PUSH
35405: EMPTY
35406: ST_TO_ADDR
// for i = 16 to 25 do
35407: LD_ADDR_VAR 0 4
35411: PUSH
35412: DOUBLE
35413: LD_INT 16
35415: DEC
35416: ST_TO_ADDR
35417: LD_INT 25
35419: PUSH
35420: FOR_TO
35421: IFFALSE 35494
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35423: LD_ADDR_VAR 0 3
35427: PUSH
35428: LD_VAR 0 3
35432: PUSH
35433: LD_INT 22
35435: PUSH
35436: LD_VAR 0 1
35440: PPUSH
35441: CALL_OW 255
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 91
35452: PUSH
35453: LD_VAR 0 1
35457: PUSH
35458: LD_INT 6
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 30
35468: PUSH
35469: LD_VAR 0 4
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: LIST
35482: PUSH
35483: EMPTY
35484: LIST
35485: PPUSH
35486: CALL_OW 69
35490: ADD
35491: ST_TO_ADDR
35492: GO 35420
35494: POP
35495: POP
// for i = 1 to tmp do
35496: LD_ADDR_VAR 0 4
35500: PUSH
35501: DOUBLE
35502: LD_INT 1
35504: DEC
35505: ST_TO_ADDR
35506: LD_VAR 0 3
35510: PUSH
35511: FOR_TO
35512: IFFALSE 35600
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35514: LD_ADDR_VAR 0 5
35518: PUSH
35519: LD_VAR 0 5
35523: PUSH
35524: LD_VAR 0 3
35528: PUSH
35529: LD_VAR 0 4
35533: ARRAY
35534: PPUSH
35535: CALL_OW 266
35539: PUSH
35540: LD_VAR 0 3
35544: PUSH
35545: LD_VAR 0 4
35549: ARRAY
35550: PPUSH
35551: CALL_OW 250
35555: PUSH
35556: LD_VAR 0 3
35560: PUSH
35561: LD_VAR 0 4
35565: ARRAY
35566: PPUSH
35567: CALL_OW 251
35571: PUSH
35572: LD_VAR 0 3
35576: PUSH
35577: LD_VAR 0 4
35581: ARRAY
35582: PPUSH
35583: CALL_OW 254
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: PUSH
35594: EMPTY
35595: LIST
35596: ADD
35597: ST_TO_ADDR
35598: GO 35511
35600: POP
35601: POP
// result := list ;
35602: LD_ADDR_VAR 0 2
35606: PUSH
35607: LD_VAR 0 5
35611: ST_TO_ADDR
// end ;
35612: LD_VAR 0 2
35616: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35617: LD_INT 0
35619: PPUSH
35620: PPUSH
35621: PPUSH
35622: PPUSH
35623: PPUSH
35624: PPUSH
35625: PPUSH
// if not factory then
35626: LD_VAR 0 1
35630: NOT
35631: IFFALSE 35635
// exit ;
35633: GO 36238
// if control = control_apeman then
35635: LD_VAR 0 4
35639: PUSH
35640: LD_INT 5
35642: EQUAL
35643: IFFALSE 35752
// begin tmp := UnitsInside ( factory ) ;
35645: LD_ADDR_VAR 0 8
35649: PUSH
35650: LD_VAR 0 1
35654: PPUSH
35655: CALL_OW 313
35659: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35660: LD_VAR 0 8
35664: PPUSH
35665: LD_INT 25
35667: PUSH
35668: LD_INT 12
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PPUSH
35675: CALL_OW 72
35679: NOT
35680: IFFALSE 35690
// control := control_manual ;
35682: LD_ADDR_VAR 0 4
35686: PUSH
35687: LD_INT 1
35689: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35690: LD_ADDR_VAR 0 8
35694: PUSH
35695: LD_VAR 0 1
35699: PPUSH
35700: CALL 35387 0 1
35704: ST_TO_ADDR
// if tmp then
35705: LD_VAR 0 8
35709: IFFALSE 35752
// begin for i in tmp do
35711: LD_ADDR_VAR 0 7
35715: PUSH
35716: LD_VAR 0 8
35720: PUSH
35721: FOR_IN
35722: IFFALSE 35750
// if i [ 1 ] = b_ext_radio then
35724: LD_VAR 0 7
35728: PUSH
35729: LD_INT 1
35731: ARRAY
35732: PUSH
35733: LD_INT 22
35735: EQUAL
35736: IFFALSE 35748
// begin control := control_remote ;
35738: LD_ADDR_VAR 0 4
35742: PUSH
35743: LD_INT 2
35745: ST_TO_ADDR
// break ;
35746: GO 35750
// end ;
35748: GO 35721
35750: POP
35751: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35752: LD_VAR 0 1
35756: PPUSH
35757: LD_VAR 0 2
35761: PPUSH
35762: LD_VAR 0 3
35766: PPUSH
35767: LD_VAR 0 4
35771: PPUSH
35772: LD_VAR 0 5
35776: PPUSH
35777: CALL_OW 448
35781: IFFALSE 35816
// begin result := [ chassis , engine , control , weapon ] ;
35783: LD_ADDR_VAR 0 6
35787: PUSH
35788: LD_VAR 0 2
35792: PUSH
35793: LD_VAR 0 3
35797: PUSH
35798: LD_VAR 0 4
35802: PUSH
35803: LD_VAR 0 5
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: ST_TO_ADDR
// exit ;
35814: GO 36238
// end ; _chassis := AvailableChassisList ( factory ) ;
35816: LD_ADDR_VAR 0 9
35820: PUSH
35821: LD_VAR 0 1
35825: PPUSH
35826: CALL_OW 475
35830: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35831: LD_ADDR_VAR 0 11
35835: PUSH
35836: LD_VAR 0 1
35840: PPUSH
35841: CALL_OW 476
35845: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35846: LD_ADDR_VAR 0 12
35850: PUSH
35851: LD_VAR 0 1
35855: PPUSH
35856: CALL_OW 477
35860: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35861: LD_ADDR_VAR 0 10
35865: PUSH
35866: LD_VAR 0 1
35870: PPUSH
35871: CALL_OW 478
35875: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35876: LD_VAR 0 9
35880: NOT
35881: IFTRUE 35890
35883: PUSH
35884: LD_VAR 0 11
35888: NOT
35889: OR
35890: IFTRUE 35899
35892: PUSH
35893: LD_VAR 0 12
35897: NOT
35898: OR
35899: IFTRUE 35908
35901: PUSH
35902: LD_VAR 0 10
35906: NOT
35907: OR
35908: IFFALSE 35943
// begin result := [ chassis , engine , control , weapon ] ;
35910: LD_ADDR_VAR 0 6
35914: PUSH
35915: LD_VAR 0 2
35919: PUSH
35920: LD_VAR 0 3
35924: PUSH
35925: LD_VAR 0 4
35929: PUSH
35930: LD_VAR 0 5
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: ST_TO_ADDR
// exit ;
35941: GO 36238
// end ; if not chassis in _chassis then
35943: LD_VAR 0 2
35947: PUSH
35948: LD_VAR 0 9
35952: IN
35953: NOT
35954: IFFALSE 35980
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35956: LD_ADDR_VAR 0 2
35960: PUSH
35961: LD_VAR 0 9
35965: PUSH
35966: LD_INT 1
35968: PPUSH
35969: LD_VAR 0 9
35973: PPUSH
35974: CALL_OW 12
35978: ARRAY
35979: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35980: LD_VAR 0 2
35984: PPUSH
35985: LD_VAR 0 3
35989: PPUSH
35990: CALL 36243 0 2
35994: NOT
35995: IFFALSE 36056
// repeat engine := _engine [ 1 ] ;
35997: LD_ADDR_VAR 0 3
36001: PUSH
36002: LD_VAR 0 11
36006: PUSH
36007: LD_INT 1
36009: ARRAY
36010: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36011: LD_ADDR_VAR 0 11
36015: PUSH
36016: LD_VAR 0 11
36020: PPUSH
36021: LD_INT 1
36023: PPUSH
36024: CALL_OW 3
36028: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36029: LD_VAR 0 2
36033: PPUSH
36034: LD_VAR 0 3
36038: PPUSH
36039: CALL 36243 0 2
36043: IFTRUE 36054
36045: PUSH
36046: LD_VAR 0 11
36050: PUSH
36051: EMPTY
36052: EQUAL
36053: OR
36054: IFFALSE 35997
// if not control in _control then
36056: LD_VAR 0 4
36060: PUSH
36061: LD_VAR 0 12
36065: IN
36066: NOT
36067: IFFALSE 36093
// control := _control [ rand ( 1 , _control ) ] ;
36069: LD_ADDR_VAR 0 4
36073: PUSH
36074: LD_VAR 0 12
36078: PUSH
36079: LD_INT 1
36081: PPUSH
36082: LD_VAR 0 12
36086: PPUSH
36087: CALL_OW 12
36091: ARRAY
36092: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36093: LD_VAR 0 2
36097: PPUSH
36098: LD_VAR 0 5
36102: PPUSH
36103: CALL 36465 0 2
36107: NOT
36108: IFFALSE 36169
// repeat weapon := _weapon [ 1 ] ;
36110: LD_ADDR_VAR 0 5
36114: PUSH
36115: LD_VAR 0 10
36119: PUSH
36120: LD_INT 1
36122: ARRAY
36123: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36124: LD_ADDR_VAR 0 10
36128: PUSH
36129: LD_VAR 0 10
36133: PPUSH
36134: LD_INT 1
36136: PPUSH
36137: CALL_OW 3
36141: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36142: LD_VAR 0 2
36146: PPUSH
36147: LD_VAR 0 5
36151: PPUSH
36152: CALL 36465 0 2
36156: IFTRUE 36167
36158: PUSH
36159: LD_VAR 0 10
36163: PUSH
36164: EMPTY
36165: EQUAL
36166: OR
36167: IFFALSE 36110
// result := [ ] ;
36169: LD_ADDR_VAR 0 6
36173: PUSH
36174: EMPTY
36175: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36176: LD_VAR 0 1
36180: PPUSH
36181: LD_VAR 0 2
36185: PPUSH
36186: LD_VAR 0 3
36190: PPUSH
36191: LD_VAR 0 4
36195: PPUSH
36196: LD_VAR 0 5
36200: PPUSH
36201: CALL_OW 448
36205: IFFALSE 36238
// result := [ chassis , engine , control , weapon ] ;
36207: LD_ADDR_VAR 0 6
36211: PUSH
36212: LD_VAR 0 2
36216: PUSH
36217: LD_VAR 0 3
36221: PUSH
36222: LD_VAR 0 4
36226: PUSH
36227: LD_VAR 0 5
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: ST_TO_ADDR
// end ;
36238: LD_VAR 0 6
36242: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36243: LD_INT 0
36245: PPUSH
// if not chassis or not engine then
36246: LD_VAR 0 1
36250: NOT
36251: IFTRUE 36260
36253: PUSH
36254: LD_VAR 0 2
36258: NOT
36259: OR
36260: IFFALSE 36264
// exit ;
36262: GO 36460
// case engine of engine_solar :
36264: LD_VAR 0 2
36268: PUSH
36269: LD_INT 2
36271: DOUBLE
36272: EQUAL
36273: IFTRUE 36277
36275: GO 36315
36277: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36278: LD_ADDR_VAR 0 3
36282: PUSH
36283: LD_INT 11
36285: PUSH
36286: LD_INT 12
36288: PUSH
36289: LD_INT 13
36291: PUSH
36292: LD_INT 14
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: LD_INT 2
36300: PUSH
36301: LD_INT 3
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: ST_TO_ADDR
36313: GO 36444
36315: LD_INT 1
36317: DOUBLE
36318: EQUAL
36319: IFTRUE 36323
36321: GO 36385
36323: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36324: LD_ADDR_VAR 0 3
36328: PUSH
36329: LD_INT 11
36331: PUSH
36332: LD_INT 12
36334: PUSH
36335: LD_INT 13
36337: PUSH
36338: LD_INT 14
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: LD_INT 2
36346: PUSH
36347: LD_INT 3
36349: PUSH
36350: LD_INT 4
36352: PUSH
36353: LD_INT 5
36355: PUSH
36356: LD_INT 21
36358: PUSH
36359: LD_INT 23
36361: PUSH
36362: LD_INT 22
36364: PUSH
36365: LD_INT 24
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: ST_TO_ADDR
36383: GO 36444
36385: LD_INT 3
36387: DOUBLE
36388: EQUAL
36389: IFTRUE 36393
36391: GO 36443
36393: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36394: LD_ADDR_VAR 0 3
36398: PUSH
36399: LD_INT 13
36401: PUSH
36402: LD_INT 14
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: LD_INT 3
36410: PUSH
36411: LD_INT 4
36413: PUSH
36414: LD_INT 5
36416: PUSH
36417: LD_INT 21
36419: PUSH
36420: LD_INT 22
36422: PUSH
36423: LD_INT 23
36425: PUSH
36426: LD_INT 24
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: ST_TO_ADDR
36441: GO 36444
36443: POP
// result := ( chassis in result ) ;
36444: LD_ADDR_VAR 0 3
36448: PUSH
36449: LD_VAR 0 1
36453: PUSH
36454: LD_VAR 0 3
36458: IN
36459: ST_TO_ADDR
// end ;
36460: LD_VAR 0 3
36464: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36465: LD_INT 0
36467: PPUSH
// if not chassis or not weapon then
36468: LD_VAR 0 1
36472: NOT
36473: IFTRUE 36482
36475: PUSH
36476: LD_VAR 0 2
36480: NOT
36481: OR
36482: IFFALSE 36486
// exit ;
36484: GO 37546
// case weapon of us_machine_gun :
36486: LD_VAR 0 2
36490: PUSH
36491: LD_INT 2
36493: DOUBLE
36494: EQUAL
36495: IFTRUE 36499
36497: GO 36529
36499: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36500: LD_ADDR_VAR 0 3
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: LD_INT 2
36510: PUSH
36511: LD_INT 3
36513: PUSH
36514: LD_INT 4
36516: PUSH
36517: LD_INT 5
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: ST_TO_ADDR
36527: GO 37530
36529: LD_INT 3
36531: DOUBLE
36532: EQUAL
36533: IFTRUE 36537
36535: GO 36567
36537: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36538: LD_ADDR_VAR 0 3
36542: PUSH
36543: LD_INT 1
36545: PUSH
36546: LD_INT 2
36548: PUSH
36549: LD_INT 3
36551: PUSH
36552: LD_INT 4
36554: PUSH
36555: LD_INT 5
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: ST_TO_ADDR
36565: GO 37530
36567: LD_INT 11
36569: DOUBLE
36570: EQUAL
36571: IFTRUE 36575
36573: GO 36605
36575: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36576: LD_ADDR_VAR 0 3
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: LD_INT 2
36586: PUSH
36587: LD_INT 3
36589: PUSH
36590: LD_INT 4
36592: PUSH
36593: LD_INT 5
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: ST_TO_ADDR
36603: GO 37530
36605: LD_INT 4
36607: DOUBLE
36608: EQUAL
36609: IFTRUE 36613
36611: GO 36639
36613: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36614: LD_ADDR_VAR 0 3
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: LD_INT 3
36624: PUSH
36625: LD_INT 4
36627: PUSH
36628: LD_INT 5
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: ST_TO_ADDR
36637: GO 37530
36639: LD_INT 5
36641: DOUBLE
36642: EQUAL
36643: IFTRUE 36647
36645: GO 36673
36647: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36648: LD_ADDR_VAR 0 3
36652: PUSH
36653: LD_INT 2
36655: PUSH
36656: LD_INT 3
36658: PUSH
36659: LD_INT 4
36661: PUSH
36662: LD_INT 5
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: ST_TO_ADDR
36671: GO 37530
36673: LD_INT 9
36675: DOUBLE
36676: EQUAL
36677: IFTRUE 36681
36679: GO 36707
36681: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36682: LD_ADDR_VAR 0 3
36686: PUSH
36687: LD_INT 2
36689: PUSH
36690: LD_INT 3
36692: PUSH
36693: LD_INT 4
36695: PUSH
36696: LD_INT 5
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: ST_TO_ADDR
36705: GO 37530
36707: LD_INT 7
36709: DOUBLE
36710: EQUAL
36711: IFTRUE 36715
36713: GO 36741
36715: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36716: LD_ADDR_VAR 0 3
36720: PUSH
36721: LD_INT 2
36723: PUSH
36724: LD_INT 3
36726: PUSH
36727: LD_INT 4
36729: PUSH
36730: LD_INT 5
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: ST_TO_ADDR
36739: GO 37530
36741: LD_INT 12
36743: DOUBLE
36744: EQUAL
36745: IFTRUE 36749
36747: GO 36775
36749: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36750: LD_ADDR_VAR 0 3
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: LD_INT 3
36760: PUSH
36761: LD_INT 4
36763: PUSH
36764: LD_INT 5
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: ST_TO_ADDR
36773: GO 37530
36775: LD_INT 13
36777: DOUBLE
36778: EQUAL
36779: IFTRUE 36783
36781: GO 36809
36783: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36784: LD_ADDR_VAR 0 3
36788: PUSH
36789: LD_INT 2
36791: PUSH
36792: LD_INT 3
36794: PUSH
36795: LD_INT 4
36797: PUSH
36798: LD_INT 5
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: ST_TO_ADDR
36807: GO 37530
36809: LD_INT 14
36811: DOUBLE
36812: EQUAL
36813: IFTRUE 36817
36815: GO 36835
36817: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36818: LD_ADDR_VAR 0 3
36822: PUSH
36823: LD_INT 4
36825: PUSH
36826: LD_INT 5
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: ST_TO_ADDR
36833: GO 37530
36835: LD_INT 6
36837: DOUBLE
36838: EQUAL
36839: IFTRUE 36843
36841: GO 36861
36843: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36844: LD_ADDR_VAR 0 3
36848: PUSH
36849: LD_INT 4
36851: PUSH
36852: LD_INT 5
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: ST_TO_ADDR
36859: GO 37530
36861: LD_INT 10
36863: DOUBLE
36864: EQUAL
36865: IFTRUE 36869
36867: GO 36887
36869: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36870: LD_ADDR_VAR 0 3
36874: PUSH
36875: LD_INT 4
36877: PUSH
36878: LD_INT 5
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: ST_TO_ADDR
36885: GO 37530
36887: LD_INT 22
36889: DOUBLE
36890: EQUAL
36891: IFTRUE 36895
36893: GO 36921
36895: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36896: LD_ADDR_VAR 0 3
36900: PUSH
36901: LD_INT 11
36903: PUSH
36904: LD_INT 12
36906: PUSH
36907: LD_INT 13
36909: PUSH
36910: LD_INT 14
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: ST_TO_ADDR
36919: GO 37530
36921: LD_INT 23
36923: DOUBLE
36924: EQUAL
36925: IFTRUE 36929
36927: GO 36955
36929: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36930: LD_ADDR_VAR 0 3
36934: PUSH
36935: LD_INT 11
36937: PUSH
36938: LD_INT 12
36940: PUSH
36941: LD_INT 13
36943: PUSH
36944: LD_INT 14
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: ST_TO_ADDR
36953: GO 37530
36955: LD_INT 24
36957: DOUBLE
36958: EQUAL
36959: IFTRUE 36963
36961: GO 36989
36963: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36964: LD_ADDR_VAR 0 3
36968: PUSH
36969: LD_INT 11
36971: PUSH
36972: LD_INT 12
36974: PUSH
36975: LD_INT 13
36977: PUSH
36978: LD_INT 14
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: ST_TO_ADDR
36987: GO 37530
36989: LD_INT 30
36991: DOUBLE
36992: EQUAL
36993: IFTRUE 36997
36995: GO 37023
36997: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36998: LD_ADDR_VAR 0 3
37002: PUSH
37003: LD_INT 11
37005: PUSH
37006: LD_INT 12
37008: PUSH
37009: LD_INT 13
37011: PUSH
37012: LD_INT 14
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: ST_TO_ADDR
37021: GO 37530
37023: LD_INT 25
37025: DOUBLE
37026: EQUAL
37027: IFTRUE 37031
37029: GO 37049
37031: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37032: LD_ADDR_VAR 0 3
37036: PUSH
37037: LD_INT 13
37039: PUSH
37040: LD_INT 14
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: ST_TO_ADDR
37047: GO 37530
37049: LD_INT 27
37051: DOUBLE
37052: EQUAL
37053: IFTRUE 37057
37055: GO 37075
37057: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37058: LD_ADDR_VAR 0 3
37062: PUSH
37063: LD_INT 13
37065: PUSH
37066: LD_INT 14
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: ST_TO_ADDR
37073: GO 37530
37075: LD_INT 92
37077: DOUBLE
37078: EQUAL
37079: IFTRUE 37083
37081: GO 37109
37083: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37084: LD_ADDR_VAR 0 3
37088: PUSH
37089: LD_INT 11
37091: PUSH
37092: LD_INT 12
37094: PUSH
37095: LD_INT 13
37097: PUSH
37098: LD_INT 14
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: ST_TO_ADDR
37107: GO 37530
37109: LD_INT 28
37111: DOUBLE
37112: EQUAL
37113: IFTRUE 37117
37115: GO 37135
37117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37118: LD_ADDR_VAR 0 3
37122: PUSH
37123: LD_INT 13
37125: PUSH
37126: LD_INT 14
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: ST_TO_ADDR
37133: GO 37530
37135: LD_INT 29
37137: DOUBLE
37138: EQUAL
37139: IFTRUE 37143
37141: GO 37161
37143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37144: LD_ADDR_VAR 0 3
37148: PUSH
37149: LD_INT 13
37151: PUSH
37152: LD_INT 14
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: ST_TO_ADDR
37159: GO 37530
37161: LD_INT 31
37163: DOUBLE
37164: EQUAL
37165: IFTRUE 37169
37167: GO 37187
37169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37170: LD_ADDR_VAR 0 3
37174: PUSH
37175: LD_INT 13
37177: PUSH
37178: LD_INT 14
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: ST_TO_ADDR
37185: GO 37530
37187: LD_INT 26
37189: DOUBLE
37190: EQUAL
37191: IFTRUE 37195
37193: GO 37213
37195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37196: LD_ADDR_VAR 0 3
37200: PUSH
37201: LD_INT 13
37203: PUSH
37204: LD_INT 14
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: ST_TO_ADDR
37211: GO 37530
37213: LD_INT 42
37215: DOUBLE
37216: EQUAL
37217: IFTRUE 37221
37219: GO 37247
37221: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37222: LD_ADDR_VAR 0 3
37226: PUSH
37227: LD_INT 21
37229: PUSH
37230: LD_INT 22
37232: PUSH
37233: LD_INT 23
37235: PUSH
37236: LD_INT 24
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: ST_TO_ADDR
37245: GO 37530
37247: LD_INT 43
37249: DOUBLE
37250: EQUAL
37251: IFTRUE 37255
37253: GO 37281
37255: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37256: LD_ADDR_VAR 0 3
37260: PUSH
37261: LD_INT 21
37263: PUSH
37264: LD_INT 22
37266: PUSH
37267: LD_INT 23
37269: PUSH
37270: LD_INT 24
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: ST_TO_ADDR
37279: GO 37530
37281: LD_INT 44
37283: DOUBLE
37284: EQUAL
37285: IFTRUE 37289
37287: GO 37315
37289: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37290: LD_ADDR_VAR 0 3
37294: PUSH
37295: LD_INT 21
37297: PUSH
37298: LD_INT 22
37300: PUSH
37301: LD_INT 23
37303: PUSH
37304: LD_INT 24
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: ST_TO_ADDR
37313: GO 37530
37315: LD_INT 45
37317: DOUBLE
37318: EQUAL
37319: IFTRUE 37323
37321: GO 37349
37323: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37324: LD_ADDR_VAR 0 3
37328: PUSH
37329: LD_INT 21
37331: PUSH
37332: LD_INT 22
37334: PUSH
37335: LD_INT 23
37337: PUSH
37338: LD_INT 24
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: ST_TO_ADDR
37347: GO 37530
37349: LD_INT 49
37351: DOUBLE
37352: EQUAL
37353: IFTRUE 37357
37355: GO 37383
37357: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37358: LD_ADDR_VAR 0 3
37362: PUSH
37363: LD_INT 21
37365: PUSH
37366: LD_INT 22
37368: PUSH
37369: LD_INT 23
37371: PUSH
37372: LD_INT 24
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: ST_TO_ADDR
37381: GO 37530
37383: LD_INT 51
37385: DOUBLE
37386: EQUAL
37387: IFTRUE 37391
37389: GO 37417
37391: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37392: LD_ADDR_VAR 0 3
37396: PUSH
37397: LD_INT 21
37399: PUSH
37400: LD_INT 22
37402: PUSH
37403: LD_INT 23
37405: PUSH
37406: LD_INT 24
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: ST_TO_ADDR
37415: GO 37530
37417: LD_INT 52
37419: DOUBLE
37420: EQUAL
37421: IFTRUE 37425
37423: GO 37451
37425: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37426: LD_ADDR_VAR 0 3
37430: PUSH
37431: LD_INT 21
37433: PUSH
37434: LD_INT 22
37436: PUSH
37437: LD_INT 23
37439: PUSH
37440: LD_INT 24
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: ST_TO_ADDR
37449: GO 37530
37451: LD_INT 53
37453: DOUBLE
37454: EQUAL
37455: IFTRUE 37459
37457: GO 37477
37459: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37460: LD_ADDR_VAR 0 3
37464: PUSH
37465: LD_INT 23
37467: PUSH
37468: LD_INT 24
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: ST_TO_ADDR
37475: GO 37530
37477: LD_INT 46
37479: DOUBLE
37480: EQUAL
37481: IFTRUE 37485
37483: GO 37503
37485: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37486: LD_ADDR_VAR 0 3
37490: PUSH
37491: LD_INT 23
37493: PUSH
37494: LD_INT 24
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: ST_TO_ADDR
37501: GO 37530
37503: LD_INT 47
37505: DOUBLE
37506: EQUAL
37507: IFTRUE 37511
37509: GO 37529
37511: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37512: LD_ADDR_VAR 0 3
37516: PUSH
37517: LD_INT 23
37519: PUSH
37520: LD_INT 24
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: ST_TO_ADDR
37527: GO 37530
37529: POP
// result := ( chassis in result ) ;
37530: LD_ADDR_VAR 0 3
37534: PUSH
37535: LD_VAR 0 1
37539: PUSH
37540: LD_VAR 0 3
37544: IN
37545: ST_TO_ADDR
// end ;
37546: LD_VAR 0 3
37550: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37551: LD_INT 0
37553: PPUSH
37554: PPUSH
37555: PPUSH
37556: PPUSH
37557: PPUSH
37558: PPUSH
37559: PPUSH
// result := array ;
37560: LD_ADDR_VAR 0 5
37564: PUSH
37565: LD_VAR 0 1
37569: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37570: LD_VAR 0 1
37574: NOT
37575: IFTRUE 37584
37577: PUSH
37578: LD_VAR 0 2
37582: NOT
37583: OR
37584: IFTRUE 37593
37586: PUSH
37587: LD_VAR 0 3
37591: NOT
37592: OR
37593: IFTRUE 37607
37595: PUSH
37596: LD_VAR 0 2
37600: PUSH
37601: LD_VAR 0 1
37605: GREATER
37606: OR
37607: IFTRUE 37621
37609: PUSH
37610: LD_VAR 0 3
37614: PUSH
37615: LD_VAR 0 1
37619: GREATER
37620: OR
37621: IFFALSE 37625
// exit ;
37623: GO 37921
// if direction then
37625: LD_VAR 0 4
37629: IFFALSE 37693
// begin d := 1 ;
37631: LD_ADDR_VAR 0 9
37635: PUSH
37636: LD_INT 1
37638: ST_TO_ADDR
// if i_from > i_to then
37639: LD_VAR 0 2
37643: PUSH
37644: LD_VAR 0 3
37648: GREATER
37649: IFFALSE 37675
// length := ( array - i_from ) + i_to else
37651: LD_ADDR_VAR 0 11
37655: PUSH
37656: LD_VAR 0 1
37660: PUSH
37661: LD_VAR 0 2
37665: MINUS
37666: PUSH
37667: LD_VAR 0 3
37671: PLUS
37672: ST_TO_ADDR
37673: GO 37691
// length := i_to - i_from ;
37675: LD_ADDR_VAR 0 11
37679: PUSH
37680: LD_VAR 0 3
37684: PUSH
37685: LD_VAR 0 2
37689: MINUS
37690: ST_TO_ADDR
// end else
37691: GO 37754
// begin d := - 1 ;
37693: LD_ADDR_VAR 0 9
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: ST_TO_ADDR
// if i_from > i_to then
37702: LD_VAR 0 2
37706: PUSH
37707: LD_VAR 0 3
37711: GREATER
37712: IFFALSE 37732
// length := i_from - i_to else
37714: LD_ADDR_VAR 0 11
37718: PUSH
37719: LD_VAR 0 2
37723: PUSH
37724: LD_VAR 0 3
37728: MINUS
37729: ST_TO_ADDR
37730: GO 37754
// length := ( array - i_to ) + i_from ;
37732: LD_ADDR_VAR 0 11
37736: PUSH
37737: LD_VAR 0 1
37741: PUSH
37742: LD_VAR 0 3
37746: MINUS
37747: PUSH
37748: LD_VAR 0 2
37752: PLUS
37753: ST_TO_ADDR
// end ; if not length then
37754: LD_VAR 0 11
37758: NOT
37759: IFFALSE 37763
// exit ;
37761: GO 37921
// tmp := array ;
37763: LD_ADDR_VAR 0 10
37767: PUSH
37768: LD_VAR 0 1
37772: ST_TO_ADDR
// for i = 1 to length do
37773: LD_ADDR_VAR 0 6
37777: PUSH
37778: DOUBLE
37779: LD_INT 1
37781: DEC
37782: ST_TO_ADDR
37783: LD_VAR 0 11
37787: PUSH
37788: FOR_TO
37789: IFFALSE 37909
// begin for j = 1 to array do
37791: LD_ADDR_VAR 0 7
37795: PUSH
37796: DOUBLE
37797: LD_INT 1
37799: DEC
37800: ST_TO_ADDR
37801: LD_VAR 0 1
37805: PUSH
37806: FOR_TO
37807: IFFALSE 37895
// begin k := j + d ;
37809: LD_ADDR_VAR 0 8
37813: PUSH
37814: LD_VAR 0 7
37818: PUSH
37819: LD_VAR 0 9
37823: PLUS
37824: ST_TO_ADDR
// if k > array then
37825: LD_VAR 0 8
37829: PUSH
37830: LD_VAR 0 1
37834: GREATER
37835: IFFALSE 37845
// k := 1 ;
37837: LD_ADDR_VAR 0 8
37841: PUSH
37842: LD_INT 1
37844: ST_TO_ADDR
// if not k then
37845: LD_VAR 0 8
37849: NOT
37850: IFFALSE 37862
// k := array ;
37852: LD_ADDR_VAR 0 8
37856: PUSH
37857: LD_VAR 0 1
37861: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37862: LD_ADDR_VAR 0 10
37866: PUSH
37867: LD_VAR 0 10
37871: PPUSH
37872: LD_VAR 0 8
37876: PPUSH
37877: LD_VAR 0 1
37881: PUSH
37882: LD_VAR 0 7
37886: ARRAY
37887: PPUSH
37888: CALL_OW 1
37892: ST_TO_ADDR
// end ;
37893: GO 37806
37895: POP
37896: POP
// array := tmp ;
37897: LD_ADDR_VAR 0 1
37901: PUSH
37902: LD_VAR 0 10
37906: ST_TO_ADDR
// end ;
37907: GO 37788
37909: POP
37910: POP
// result := array ;
37911: LD_ADDR_VAR 0 5
37915: PUSH
37916: LD_VAR 0 1
37920: ST_TO_ADDR
// end ;
37921: LD_VAR 0 5
37925: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37926: LD_INT 0
37928: PPUSH
37929: PPUSH
// result := 0 ;
37930: LD_ADDR_VAR 0 3
37934: PUSH
37935: LD_INT 0
37937: ST_TO_ADDR
// if not array or not value in array then
37938: LD_VAR 0 1
37942: NOT
37943: IFTRUE 37958
37945: PUSH
37946: LD_VAR 0 2
37950: PUSH
37951: LD_VAR 0 1
37955: IN
37956: NOT
37957: OR
37958: IFFALSE 37962
// exit ;
37960: GO 38016
// for i = 1 to array do
37962: LD_ADDR_VAR 0 4
37966: PUSH
37967: DOUBLE
37968: LD_INT 1
37970: DEC
37971: ST_TO_ADDR
37972: LD_VAR 0 1
37976: PUSH
37977: FOR_TO
37978: IFFALSE 38014
// if value = array [ i ] then
37980: LD_VAR 0 2
37984: PUSH
37985: LD_VAR 0 1
37989: PUSH
37990: LD_VAR 0 4
37994: ARRAY
37995: EQUAL
37996: IFFALSE 38012
// begin result := i ;
37998: LD_ADDR_VAR 0 3
38002: PUSH
38003: LD_VAR 0 4
38007: ST_TO_ADDR
// exit ;
38008: POP
38009: POP
38010: GO 38016
// end ;
38012: GO 37977
38014: POP
38015: POP
// end ;
38016: LD_VAR 0 3
38020: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38021: LD_INT 0
38023: PPUSH
// vc_chassis := chassis ;
38024: LD_ADDR_OWVAR 37
38028: PUSH
38029: LD_VAR 0 1
38033: ST_TO_ADDR
// vc_engine := engine ;
38034: LD_ADDR_OWVAR 39
38038: PUSH
38039: LD_VAR 0 2
38043: ST_TO_ADDR
// vc_control := control ;
38044: LD_ADDR_OWVAR 38
38048: PUSH
38049: LD_VAR 0 3
38053: ST_TO_ADDR
// vc_weapon := weapon ;
38054: LD_ADDR_OWVAR 40
38058: PUSH
38059: LD_VAR 0 4
38063: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38064: LD_ADDR_OWVAR 41
38068: PUSH
38069: LD_VAR 0 5
38073: ST_TO_ADDR
// end ;
38074: LD_VAR 0 6
38078: RET
// export function WantPlant ( unit ) ; var task ; begin
38079: LD_INT 0
38081: PPUSH
38082: PPUSH
// result := false ;
38083: LD_ADDR_VAR 0 2
38087: PUSH
38088: LD_INT 0
38090: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38091: LD_ADDR_VAR 0 3
38095: PUSH
38096: LD_VAR 0 1
38100: PPUSH
38101: CALL_OW 437
38105: ST_TO_ADDR
// if task then
38106: LD_VAR 0 3
38110: IFFALSE 38138
// if task [ 1 ] [ 1 ] = p then
38112: LD_VAR 0 3
38116: PUSH
38117: LD_INT 1
38119: ARRAY
38120: PUSH
38121: LD_INT 1
38123: ARRAY
38124: PUSH
38125: LD_STRING p
38127: EQUAL
38128: IFFALSE 38138
// result := true ;
38130: LD_ADDR_VAR 0 2
38134: PUSH
38135: LD_INT 1
38137: ST_TO_ADDR
// end ;
38138: LD_VAR 0 2
38142: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38143: LD_INT 0
38145: PPUSH
38146: PPUSH
38147: PPUSH
38148: PPUSH
// if pos < 1 then
38149: LD_VAR 0 2
38153: PUSH
38154: LD_INT 1
38156: LESS
38157: IFFALSE 38161
// exit ;
38159: GO 38464
// if pos = 1 then
38161: LD_VAR 0 2
38165: PUSH
38166: LD_INT 1
38168: EQUAL
38169: IFFALSE 38202
// result := Replace ( arr , pos [ 1 ] , value ) else
38171: LD_ADDR_VAR 0 4
38175: PUSH
38176: LD_VAR 0 1
38180: PPUSH
38181: LD_VAR 0 2
38185: PUSH
38186: LD_INT 1
38188: ARRAY
38189: PPUSH
38190: LD_VAR 0 3
38194: PPUSH
38195: CALL_OW 1
38199: ST_TO_ADDR
38200: GO 38464
// begin tmp := arr ;
38202: LD_ADDR_VAR 0 6
38206: PUSH
38207: LD_VAR 0 1
38211: ST_TO_ADDR
// s_arr := [ tmp ] ;
38212: LD_ADDR_VAR 0 7
38216: PUSH
38217: LD_VAR 0 6
38221: PUSH
38222: EMPTY
38223: LIST
38224: ST_TO_ADDR
// for i = 1 to pos - 1 do
38225: LD_ADDR_VAR 0 5
38229: PUSH
38230: DOUBLE
38231: LD_INT 1
38233: DEC
38234: ST_TO_ADDR
38235: LD_VAR 0 2
38239: PUSH
38240: LD_INT 1
38242: MINUS
38243: PUSH
38244: FOR_TO
38245: IFFALSE 38290
// begin tmp := tmp [ pos [ i ] ] ;
38247: LD_ADDR_VAR 0 6
38251: PUSH
38252: LD_VAR 0 6
38256: PUSH
38257: LD_VAR 0 2
38261: PUSH
38262: LD_VAR 0 5
38266: ARRAY
38267: ARRAY
38268: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38269: LD_ADDR_VAR 0 7
38273: PUSH
38274: LD_VAR 0 7
38278: PUSH
38279: LD_VAR 0 6
38283: PUSH
38284: EMPTY
38285: LIST
38286: ADD
38287: ST_TO_ADDR
// end ;
38288: GO 38244
38290: POP
38291: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38292: LD_ADDR_VAR 0 6
38296: PUSH
38297: LD_VAR 0 6
38301: PPUSH
38302: LD_VAR 0 2
38306: PUSH
38307: LD_VAR 0 2
38311: ARRAY
38312: PPUSH
38313: LD_VAR 0 3
38317: PPUSH
38318: CALL_OW 1
38322: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38323: LD_ADDR_VAR 0 7
38327: PUSH
38328: LD_VAR 0 7
38332: PPUSH
38333: LD_VAR 0 7
38337: PPUSH
38338: LD_VAR 0 6
38342: PPUSH
38343: CALL_OW 1
38347: ST_TO_ADDR
// for i = s_arr downto 2 do
38348: LD_ADDR_VAR 0 5
38352: PUSH
38353: DOUBLE
38354: LD_VAR 0 7
38358: INC
38359: ST_TO_ADDR
38360: LD_INT 2
38362: PUSH
38363: FOR_DOWNTO
38364: IFFALSE 38448
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38366: LD_ADDR_VAR 0 6
38370: PUSH
38371: LD_VAR 0 7
38375: PUSH
38376: LD_VAR 0 5
38380: PUSH
38381: LD_INT 1
38383: MINUS
38384: ARRAY
38385: PPUSH
38386: LD_VAR 0 2
38390: PUSH
38391: LD_VAR 0 5
38395: PUSH
38396: LD_INT 1
38398: MINUS
38399: ARRAY
38400: PPUSH
38401: LD_VAR 0 7
38405: PUSH
38406: LD_VAR 0 5
38410: ARRAY
38411: PPUSH
38412: CALL_OW 1
38416: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38417: LD_ADDR_VAR 0 7
38421: PUSH
38422: LD_VAR 0 7
38426: PPUSH
38427: LD_VAR 0 5
38431: PUSH
38432: LD_INT 1
38434: MINUS
38435: PPUSH
38436: LD_VAR 0 6
38440: PPUSH
38441: CALL_OW 1
38445: ST_TO_ADDR
// end ;
38446: GO 38363
38448: POP
38449: POP
// result := s_arr [ 1 ] ;
38450: LD_ADDR_VAR 0 4
38454: PUSH
38455: LD_VAR 0 7
38459: PUSH
38460: LD_INT 1
38462: ARRAY
38463: ST_TO_ADDR
// end ; end ;
38464: LD_VAR 0 4
38468: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38469: LD_INT 0
38471: PPUSH
38472: PPUSH
// if not list then
38473: LD_VAR 0 1
38477: NOT
38478: IFFALSE 38482
// exit ;
38480: GO 38573
// i := list [ pos1 ] ;
38482: LD_ADDR_VAR 0 5
38486: PUSH
38487: LD_VAR 0 1
38491: PUSH
38492: LD_VAR 0 2
38496: ARRAY
38497: ST_TO_ADDR
// if not i then
38498: LD_VAR 0 5
38502: NOT
38503: IFFALSE 38507
// exit ;
38505: GO 38573
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38507: LD_ADDR_VAR 0 1
38511: PUSH
38512: LD_VAR 0 1
38516: PPUSH
38517: LD_VAR 0 2
38521: PPUSH
38522: LD_VAR 0 1
38526: PUSH
38527: LD_VAR 0 3
38531: ARRAY
38532: PPUSH
38533: CALL_OW 1
38537: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38538: LD_ADDR_VAR 0 1
38542: PUSH
38543: LD_VAR 0 1
38547: PPUSH
38548: LD_VAR 0 3
38552: PPUSH
38553: LD_VAR 0 5
38557: PPUSH
38558: CALL_OW 1
38562: ST_TO_ADDR
// result := list ;
38563: LD_ADDR_VAR 0 4
38567: PUSH
38568: LD_VAR 0 1
38572: ST_TO_ADDR
// end ;
38573: LD_VAR 0 4
38577: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38578: LD_INT 0
38580: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38581: LD_ADDR_VAR 0 5
38585: PUSH
38586: LD_VAR 0 1
38590: PPUSH
38591: CALL_OW 250
38595: PPUSH
38596: LD_VAR 0 1
38600: PPUSH
38601: CALL_OW 251
38605: PPUSH
38606: LD_VAR 0 2
38610: PPUSH
38611: LD_VAR 0 3
38615: PPUSH
38616: LD_VAR 0 4
38620: PPUSH
38621: CALL 39003 0 5
38625: ST_TO_ADDR
// end ;
38626: LD_VAR 0 5
38630: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38631: LD_INT 0
38633: PPUSH
38634: PPUSH
38635: PPUSH
38636: PPUSH
// if not list or not unit then
38637: LD_VAR 0 2
38641: NOT
38642: IFTRUE 38651
38644: PUSH
38645: LD_VAR 0 1
38649: NOT
38650: OR
38651: IFFALSE 38655
// exit ;
38653: GO 38998
// result := [ ] ;
38655: LD_ADDR_VAR 0 5
38659: PUSH
38660: EMPTY
38661: ST_TO_ADDR
// for i in list do
38662: LD_ADDR_VAR 0 6
38666: PUSH
38667: LD_VAR 0 2
38671: PUSH
38672: FOR_IN
38673: IFFALSE 38891
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38675: LD_ADDR_VAR 0 8
38679: PUSH
38680: LD_VAR 0 1
38684: PPUSH
38685: LD_VAR 0 6
38689: PUSH
38690: LD_INT 1
38692: ARRAY
38693: PPUSH
38694: LD_VAR 0 6
38698: PUSH
38699: LD_INT 2
38701: ARRAY
38702: PPUSH
38703: CALL_OW 297
38707: ST_TO_ADDR
// if not Count ( result ) then
38708: LD_VAR 0 5
38712: PPUSH
38713: CALL 35259 0 1
38717: NOT
38718: IFFALSE 38751
// begin result := Join ( result , [ i , tmp ] ) ;
38720: LD_ADDR_VAR 0 5
38724: PUSH
38725: LD_VAR 0 5
38729: PPUSH
38730: LD_VAR 0 6
38734: PUSH
38735: LD_VAR 0 8
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PPUSH
38744: CALL 71191 0 2
38748: ST_TO_ADDR
// continue ;
38749: GO 38672
// end ; if result [ result ] [ 2 ] <= tmp then
38751: LD_VAR 0 5
38755: PUSH
38756: LD_VAR 0 5
38760: ARRAY
38761: PUSH
38762: LD_INT 2
38764: ARRAY
38765: PUSH
38766: LD_VAR 0 8
38770: LESSEQUAL
38771: IFFALSE 38804
// result := Join ( result , [ i , tmp ] ) else
38773: LD_ADDR_VAR 0 5
38777: PUSH
38778: LD_VAR 0 5
38782: PPUSH
38783: LD_VAR 0 6
38787: PUSH
38788: LD_VAR 0 8
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PPUSH
38797: CALL 71191 0 2
38801: ST_TO_ADDR
38802: GO 38889
// begin for j := 1 to Count ( result ) do
38804: LD_ADDR_VAR 0 7
38808: PUSH
38809: DOUBLE
38810: LD_INT 1
38812: DEC
38813: ST_TO_ADDR
38814: LD_VAR 0 5
38818: PPUSH
38819: CALL 35259 0 1
38823: PUSH
38824: FOR_TO
38825: IFFALSE 38887
// begin if tmp < result [ j ] [ 2 ] then
38827: LD_VAR 0 8
38831: PUSH
38832: LD_VAR 0 5
38836: PUSH
38837: LD_VAR 0 7
38841: ARRAY
38842: PUSH
38843: LD_INT 2
38845: ARRAY
38846: LESS
38847: IFFALSE 38885
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38849: LD_ADDR_VAR 0 5
38853: PUSH
38854: LD_VAR 0 5
38858: PPUSH
38859: LD_VAR 0 7
38863: PPUSH
38864: LD_VAR 0 6
38868: PUSH
38869: LD_VAR 0 8
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PPUSH
38878: CALL_OW 2
38882: ST_TO_ADDR
// break ;
38883: GO 38887
// end ; end ;
38885: GO 38824
38887: POP
38888: POP
// end ; end ;
38889: GO 38672
38891: POP
38892: POP
// if result and not asc then
38893: LD_VAR 0 5
38897: IFFALSE 38906
38899: PUSH
38900: LD_VAR 0 3
38904: NOT
38905: AND
38906: IFFALSE 38923
// result := ReverseArray ( result ) ;
38908: LD_ADDR_VAR 0 5
38912: PUSH
38913: LD_VAR 0 5
38917: PPUSH
38918: CALL 66281 0 1
38922: ST_TO_ADDR
// tmp := [ ] ;
38923: LD_ADDR_VAR 0 8
38927: PUSH
38928: EMPTY
38929: ST_TO_ADDR
// if mode then
38930: LD_VAR 0 4
38934: IFFALSE 38998
// begin for i := 1 to result do
38936: LD_ADDR_VAR 0 6
38940: PUSH
38941: DOUBLE
38942: LD_INT 1
38944: DEC
38945: ST_TO_ADDR
38946: LD_VAR 0 5
38950: PUSH
38951: FOR_TO
38952: IFFALSE 38986
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38954: LD_ADDR_VAR 0 8
38958: PUSH
38959: LD_VAR 0 8
38963: PPUSH
38964: LD_VAR 0 5
38968: PUSH
38969: LD_VAR 0 6
38973: ARRAY
38974: PUSH
38975: LD_INT 1
38977: ARRAY
38978: PPUSH
38979: CALL 71191 0 2
38983: ST_TO_ADDR
38984: GO 38951
38986: POP
38987: POP
// result := tmp ;
38988: LD_ADDR_VAR 0 5
38992: PUSH
38993: LD_VAR 0 8
38997: ST_TO_ADDR
// end ; end ;
38998: LD_VAR 0 5
39002: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39003: LD_INT 0
39005: PPUSH
39006: PPUSH
39007: PPUSH
39008: PPUSH
// if not list then
39009: LD_VAR 0 3
39013: NOT
39014: IFFALSE 39018
// exit ;
39016: GO 39408
// result := [ ] ;
39018: LD_ADDR_VAR 0 6
39022: PUSH
39023: EMPTY
39024: ST_TO_ADDR
// for i in list do
39025: LD_ADDR_VAR 0 7
39029: PUSH
39030: LD_VAR 0 3
39034: PUSH
39035: FOR_IN
39036: IFFALSE 39238
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39038: LD_ADDR_VAR 0 9
39042: PUSH
39043: LD_VAR 0 7
39047: PPUSH
39048: LD_VAR 0 1
39052: PPUSH
39053: LD_VAR 0 2
39057: PPUSH
39058: CALL_OW 297
39062: ST_TO_ADDR
// if not result then
39063: LD_VAR 0 6
39067: NOT
39068: IFFALSE 39094
// result := [ [ i , tmp ] ] else
39070: LD_ADDR_VAR 0 6
39074: PUSH
39075: LD_VAR 0 7
39079: PUSH
39080: LD_VAR 0 9
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: EMPTY
39090: LIST
39091: ST_TO_ADDR
39092: GO 39236
// begin if result [ result ] [ 2 ] <= tmp then
39094: LD_VAR 0 6
39098: PUSH
39099: LD_VAR 0 6
39103: ARRAY
39104: PUSH
39105: LD_INT 2
39107: ARRAY
39108: PUSH
39109: LD_VAR 0 9
39113: LESSEQUAL
39114: IFFALSE 39156
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39116: LD_ADDR_VAR 0 6
39120: PUSH
39121: LD_VAR 0 6
39125: PPUSH
39126: LD_VAR 0 6
39130: PUSH
39131: LD_INT 1
39133: PLUS
39134: PPUSH
39135: LD_VAR 0 7
39139: PUSH
39140: LD_VAR 0 9
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PPUSH
39149: CALL_OW 2
39153: ST_TO_ADDR
39154: GO 39236
// for j := 1 to result do
39156: LD_ADDR_VAR 0 8
39160: PUSH
39161: DOUBLE
39162: LD_INT 1
39164: DEC
39165: ST_TO_ADDR
39166: LD_VAR 0 6
39170: PUSH
39171: FOR_TO
39172: IFFALSE 39234
// begin if tmp < result [ j ] [ 2 ] then
39174: LD_VAR 0 9
39178: PUSH
39179: LD_VAR 0 6
39183: PUSH
39184: LD_VAR 0 8
39188: ARRAY
39189: PUSH
39190: LD_INT 2
39192: ARRAY
39193: LESS
39194: IFFALSE 39232
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39196: LD_ADDR_VAR 0 6
39200: PUSH
39201: LD_VAR 0 6
39205: PPUSH
39206: LD_VAR 0 8
39210: PPUSH
39211: LD_VAR 0 7
39215: PUSH
39216: LD_VAR 0 9
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PPUSH
39225: CALL_OW 2
39229: ST_TO_ADDR
// break ;
39230: GO 39234
// end ; end ;
39232: GO 39171
39234: POP
39235: POP
// end ; end ;
39236: GO 39035
39238: POP
39239: POP
// if result and not asc then
39240: LD_VAR 0 6
39244: IFFALSE 39253
39246: PUSH
39247: LD_VAR 0 4
39251: NOT
39252: AND
39253: IFFALSE 39328
// begin tmp := result ;
39255: LD_ADDR_VAR 0 9
39259: PUSH
39260: LD_VAR 0 6
39264: ST_TO_ADDR
// for i = tmp downto 1 do
39265: LD_ADDR_VAR 0 7
39269: PUSH
39270: DOUBLE
39271: LD_VAR 0 9
39275: INC
39276: ST_TO_ADDR
39277: LD_INT 1
39279: PUSH
39280: FOR_DOWNTO
39281: IFFALSE 39326
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39283: LD_ADDR_VAR 0 6
39287: PUSH
39288: LD_VAR 0 6
39292: PPUSH
39293: LD_VAR 0 9
39297: PUSH
39298: LD_VAR 0 7
39302: MINUS
39303: PUSH
39304: LD_INT 1
39306: PLUS
39307: PPUSH
39308: LD_VAR 0 9
39312: PUSH
39313: LD_VAR 0 7
39317: ARRAY
39318: PPUSH
39319: CALL_OW 1
39323: ST_TO_ADDR
39324: GO 39280
39326: POP
39327: POP
// end ; tmp := [ ] ;
39328: LD_ADDR_VAR 0 9
39332: PUSH
39333: EMPTY
39334: ST_TO_ADDR
// if mode then
39335: LD_VAR 0 5
39339: IFFALSE 39408
// begin for i = 1 to result do
39341: LD_ADDR_VAR 0 7
39345: PUSH
39346: DOUBLE
39347: LD_INT 1
39349: DEC
39350: ST_TO_ADDR
39351: LD_VAR 0 6
39355: PUSH
39356: FOR_TO
39357: IFFALSE 39396
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39359: LD_ADDR_VAR 0 9
39363: PUSH
39364: LD_VAR 0 9
39368: PPUSH
39369: LD_VAR 0 7
39373: PPUSH
39374: LD_VAR 0 6
39378: PUSH
39379: LD_VAR 0 7
39383: ARRAY
39384: PUSH
39385: LD_INT 1
39387: ARRAY
39388: PPUSH
39389: CALL_OW 1
39393: ST_TO_ADDR
39394: GO 39356
39396: POP
39397: POP
// result := tmp ;
39398: LD_ADDR_VAR 0 6
39402: PUSH
39403: LD_VAR 0 9
39407: ST_TO_ADDR
// end ; end ;
39408: LD_VAR 0 6
39412: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39413: LD_INT 0
39415: PPUSH
39416: PPUSH
39417: PPUSH
39418: PPUSH
39419: PPUSH
39420: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39421: LD_ADDR_VAR 0 5
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: EMPTY
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: ST_TO_ADDR
// if not x or not y then
39443: LD_VAR 0 2
39447: NOT
39448: IFTRUE 39457
39450: PUSH
39451: LD_VAR 0 3
39455: NOT
39456: OR
39457: IFFALSE 39461
// exit ;
39459: GO 41117
// if not range then
39461: LD_VAR 0 4
39465: NOT
39466: IFFALSE 39476
// range := 10 ;
39468: LD_ADDR_VAR 0 4
39472: PUSH
39473: LD_INT 10
39475: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39476: LD_ADDR_VAR 0 8
39480: PUSH
39481: LD_INT 81
39483: PUSH
39484: LD_VAR 0 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 92
39495: PUSH
39496: LD_VAR 0 2
39500: PUSH
39501: LD_VAR 0 3
39505: PUSH
39506: LD_VAR 0 4
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 3
39519: PUSH
39520: LD_INT 21
39522: PUSH
39523: LD_INT 3
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: LIST
39538: PPUSH
39539: CALL_OW 69
39543: ST_TO_ADDR
// if not tmp then
39544: LD_VAR 0 8
39548: NOT
39549: IFFALSE 39553
// exit ;
39551: GO 41117
// for i in tmp do
39553: LD_ADDR_VAR 0 6
39557: PUSH
39558: LD_VAR 0 8
39562: PUSH
39563: FOR_IN
39564: IFFALSE 41092
// begin points := [ 0 , 0 , 0 ] ;
39566: LD_ADDR_VAR 0 9
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: LD_INT 0
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: LIST
39584: ST_TO_ADDR
// bpoints := 1 ;
39585: LD_ADDR_VAR 0 10
39589: PUSH
39590: LD_INT 1
39592: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39593: LD_VAR 0 6
39597: PPUSH
39598: CALL_OW 247
39602: PUSH
39603: LD_INT 1
39605: DOUBLE
39606: EQUAL
39607: IFTRUE 39611
39609: GO 40193
39611: POP
// begin if GetClass ( i ) = 1 then
39612: LD_VAR 0 6
39616: PPUSH
39617: CALL_OW 257
39621: PUSH
39622: LD_INT 1
39624: EQUAL
39625: IFFALSE 39646
// points := [ 10 , 5 , 3 ] ;
39627: LD_ADDR_VAR 0 9
39631: PUSH
39632: LD_INT 10
39634: PUSH
39635: LD_INT 5
39637: PUSH
39638: LD_INT 3
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: LIST
39645: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39646: LD_VAR 0 6
39650: PPUSH
39651: CALL_OW 257
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: LD_INT 3
39661: PUSH
39662: LD_INT 4
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: LIST
39669: IN
39670: IFFALSE 39691
// points := [ 3 , 2 , 1 ] ;
39672: LD_ADDR_VAR 0 9
39676: PUSH
39677: LD_INT 3
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: LIST
39690: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39691: LD_VAR 0 6
39695: PPUSH
39696: CALL_OW 257
39700: PUSH
39701: LD_INT 5
39703: EQUAL
39704: IFFALSE 39725
// points := [ 130 , 5 , 2 ] ;
39706: LD_ADDR_VAR 0 9
39710: PUSH
39711: LD_INT 130
39713: PUSH
39714: LD_INT 5
39716: PUSH
39717: LD_INT 2
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: LIST
39724: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39725: LD_VAR 0 6
39729: PPUSH
39730: CALL_OW 257
39734: PUSH
39735: LD_INT 8
39737: EQUAL
39738: IFFALSE 39759
// points := [ 35 , 35 , 30 ] ;
39740: LD_ADDR_VAR 0 9
39744: PUSH
39745: LD_INT 35
39747: PUSH
39748: LD_INT 35
39750: PUSH
39751: LD_INT 30
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: LIST
39758: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39759: LD_VAR 0 6
39763: PPUSH
39764: CALL_OW 257
39768: PUSH
39769: LD_INT 9
39771: EQUAL
39772: IFFALSE 39793
// points := [ 20 , 55 , 40 ] ;
39774: LD_ADDR_VAR 0 9
39778: PUSH
39779: LD_INT 20
39781: PUSH
39782: LD_INT 55
39784: PUSH
39785: LD_INT 40
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: LIST
39792: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39793: LD_VAR 0 6
39797: PPUSH
39798: CALL_OW 257
39802: PUSH
39803: LD_INT 12
39805: PUSH
39806: LD_INT 16
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: IN
39813: IFFALSE 39834
// points := [ 5 , 3 , 2 ] ;
39815: LD_ADDR_VAR 0 9
39819: PUSH
39820: LD_INT 5
39822: PUSH
39823: LD_INT 3
39825: PUSH
39826: LD_INT 2
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39834: LD_VAR 0 6
39838: PPUSH
39839: CALL_OW 257
39843: PUSH
39844: LD_INT 17
39846: EQUAL
39847: IFFALSE 39868
// points := [ 100 , 50 , 75 ] ;
39849: LD_ADDR_VAR 0 9
39853: PUSH
39854: LD_INT 100
39856: PUSH
39857: LD_INT 50
39859: PUSH
39860: LD_INT 75
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: LIST
39867: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39868: LD_VAR 0 6
39872: PPUSH
39873: CALL_OW 257
39877: PUSH
39878: LD_INT 15
39880: EQUAL
39881: IFFALSE 39902
// points := [ 10 , 5 , 3 ] ;
39883: LD_ADDR_VAR 0 9
39887: PUSH
39888: LD_INT 10
39890: PUSH
39891: LD_INT 5
39893: PUSH
39894: LD_INT 3
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: LIST
39901: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39902: LD_VAR 0 6
39906: PPUSH
39907: CALL_OW 257
39911: PUSH
39912: LD_INT 14
39914: EQUAL
39915: IFFALSE 39936
// points := [ 10 , 0 , 0 ] ;
39917: LD_ADDR_VAR 0 9
39921: PUSH
39922: LD_INT 10
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: LIST
39935: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39936: LD_VAR 0 6
39940: PPUSH
39941: CALL_OW 257
39945: PUSH
39946: LD_INT 11
39948: EQUAL
39949: IFFALSE 39970
// points := [ 30 , 10 , 5 ] ;
39951: LD_ADDR_VAR 0 9
39955: PUSH
39956: LD_INT 30
39958: PUSH
39959: LD_INT 10
39961: PUSH
39962: LD_INT 5
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: LIST
39969: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39970: LD_VAR 0 1
39974: PPUSH
39975: LD_INT 5
39977: PPUSH
39978: CALL_OW 321
39982: PUSH
39983: LD_INT 2
39985: EQUAL
39986: IFFALSE 40003
// bpoints := bpoints * 1.8 ;
39988: LD_ADDR_VAR 0 10
39992: PUSH
39993: LD_VAR 0 10
39997: PUSH
39998: LD_REAL  1.80000000000000E+0000
40001: MUL
40002: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40003: LD_VAR 0 6
40007: PPUSH
40008: CALL_OW 257
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: LD_INT 2
40018: PUSH
40019: LD_INT 3
40021: PUSH
40022: LD_INT 4
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: IN
40031: IFFALSE 40051
40033: PUSH
40034: LD_VAR 0 1
40038: PPUSH
40039: LD_INT 51
40041: PPUSH
40042: CALL_OW 321
40046: PUSH
40047: LD_INT 2
40049: EQUAL
40050: AND
40051: IFFALSE 40068
// bpoints := bpoints * 1.2 ;
40053: LD_ADDR_VAR 0 10
40057: PUSH
40058: LD_VAR 0 10
40062: PUSH
40063: LD_REAL  1.20000000000000E+0000
40066: MUL
40067: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40068: LD_VAR 0 6
40072: PPUSH
40073: CALL_OW 257
40077: PUSH
40078: LD_INT 5
40080: PUSH
40081: LD_INT 7
40083: PUSH
40084: LD_INT 9
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: IN
40092: IFFALSE 40112
40094: PUSH
40095: LD_VAR 0 1
40099: PPUSH
40100: LD_INT 52
40102: PPUSH
40103: CALL_OW 321
40107: PUSH
40108: LD_INT 2
40110: EQUAL
40111: AND
40112: IFFALSE 40129
// bpoints := bpoints * 1.5 ;
40114: LD_ADDR_VAR 0 10
40118: PUSH
40119: LD_VAR 0 10
40123: PUSH
40124: LD_REAL  1.50000000000000E+0000
40127: MUL
40128: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40129: LD_VAR 0 1
40133: PPUSH
40134: LD_INT 66
40136: PPUSH
40137: CALL_OW 321
40141: PUSH
40142: LD_INT 2
40144: EQUAL
40145: IFFALSE 40162
// bpoints := bpoints * 1.1 ;
40147: LD_ADDR_VAR 0 10
40151: PUSH
40152: LD_VAR 0 10
40156: PUSH
40157: LD_REAL  1.10000000000000E+0000
40160: MUL
40161: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40162: LD_ADDR_VAR 0 10
40166: PUSH
40167: LD_VAR 0 10
40171: PUSH
40172: LD_VAR 0 6
40176: PPUSH
40177: LD_INT 1
40179: PPUSH
40180: CALL_OW 259
40184: PUSH
40185: LD_REAL  1.15000000000000E+0000
40188: MUL
40189: MUL
40190: ST_TO_ADDR
// end ; unit_vehicle :
40191: GO 41021
40193: LD_INT 2
40195: DOUBLE
40196: EQUAL
40197: IFTRUE 40201
40199: GO 41009
40201: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40202: LD_VAR 0 6
40206: PPUSH
40207: CALL_OW 264
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 42
40217: PUSH
40218: LD_INT 24
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: LIST
40225: IN
40226: IFFALSE 40247
// points := [ 25 , 5 , 3 ] ;
40228: LD_ADDR_VAR 0 9
40232: PUSH
40233: LD_INT 25
40235: PUSH
40236: LD_INT 5
40238: PUSH
40239: LD_INT 3
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: LIST
40246: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40247: LD_VAR 0 6
40251: PPUSH
40252: CALL_OW 264
40256: PUSH
40257: LD_INT 4
40259: PUSH
40260: LD_INT 43
40262: PUSH
40263: LD_INT 25
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: LIST
40270: IN
40271: IFFALSE 40292
// points := [ 40 , 15 , 5 ] ;
40273: LD_ADDR_VAR 0 9
40277: PUSH
40278: LD_INT 40
40280: PUSH
40281: LD_INT 15
40283: PUSH
40284: LD_INT 5
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: LIST
40291: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40292: LD_VAR 0 6
40296: PPUSH
40297: CALL_OW 264
40301: PUSH
40302: LD_INT 3
40304: PUSH
40305: LD_INT 23
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: IN
40312: IFFALSE 40333
// points := [ 7 , 25 , 8 ] ;
40314: LD_ADDR_VAR 0 9
40318: PUSH
40319: LD_INT 7
40321: PUSH
40322: LD_INT 25
40324: PUSH
40325: LD_INT 8
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: LIST
40332: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40333: LD_VAR 0 6
40337: PPUSH
40338: CALL_OW 264
40342: PUSH
40343: LD_INT 5
40345: PUSH
40346: LD_INT 27
40348: PUSH
40349: LD_INT 44
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: LIST
40356: IN
40357: IFFALSE 40378
// points := [ 14 , 50 , 16 ] ;
40359: LD_ADDR_VAR 0 9
40363: PUSH
40364: LD_INT 14
40366: PUSH
40367: LD_INT 50
40369: PUSH
40370: LD_INT 16
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: LIST
40377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40378: LD_VAR 0 6
40382: PPUSH
40383: CALL_OW 264
40387: PUSH
40388: LD_INT 6
40390: PUSH
40391: LD_INT 46
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: IN
40398: IFFALSE 40419
// points := [ 32 , 120 , 70 ] ;
40400: LD_ADDR_VAR 0 9
40404: PUSH
40405: LD_INT 32
40407: PUSH
40408: LD_INT 120
40410: PUSH
40411: LD_INT 70
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: LIST
40418: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40419: LD_VAR 0 6
40423: PPUSH
40424: CALL_OW 264
40428: PUSH
40429: LD_INT 7
40431: PUSH
40432: LD_INT 28
40434: PUSH
40435: LD_INT 45
40437: PUSH
40438: LD_INT 92
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: IN
40447: IFFALSE 40468
// points := [ 35 , 20 , 45 ] ;
40449: LD_ADDR_VAR 0 9
40453: PUSH
40454: LD_INT 35
40456: PUSH
40457: LD_INT 20
40459: PUSH
40460: LD_INT 45
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: LIST
40467: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40468: LD_VAR 0 6
40472: PPUSH
40473: CALL_OW 264
40477: PUSH
40478: LD_INT 47
40480: PUSH
40481: EMPTY
40482: LIST
40483: IN
40484: IFFALSE 40505
// points := [ 67 , 45 , 75 ] ;
40486: LD_ADDR_VAR 0 9
40490: PUSH
40491: LD_INT 67
40493: PUSH
40494: LD_INT 45
40496: PUSH
40497: LD_INT 75
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: LIST
40504: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40505: LD_VAR 0 6
40509: PPUSH
40510: CALL_OW 264
40514: PUSH
40515: LD_INT 26
40517: PUSH
40518: EMPTY
40519: LIST
40520: IN
40521: IFFALSE 40542
// points := [ 120 , 30 , 80 ] ;
40523: LD_ADDR_VAR 0 9
40527: PUSH
40528: LD_INT 120
40530: PUSH
40531: LD_INT 30
40533: PUSH
40534: LD_INT 80
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40542: LD_VAR 0 6
40546: PPUSH
40547: CALL_OW 264
40551: PUSH
40552: LD_INT 22
40554: PUSH
40555: EMPTY
40556: LIST
40557: IN
40558: IFFALSE 40579
// points := [ 40 , 1 , 1 ] ;
40560: LD_ADDR_VAR 0 9
40564: PUSH
40565: LD_INT 40
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: LIST
40578: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40579: LD_VAR 0 6
40583: PPUSH
40584: CALL_OW 264
40588: PUSH
40589: LD_INT 29
40591: PUSH
40592: EMPTY
40593: LIST
40594: IN
40595: IFFALSE 40616
// points := [ 70 , 200 , 400 ] ;
40597: LD_ADDR_VAR 0 9
40601: PUSH
40602: LD_INT 70
40604: PUSH
40605: LD_INT 200
40607: PUSH
40608: LD_INT 400
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: LIST
40615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40616: LD_VAR 0 6
40620: PPUSH
40621: CALL_OW 264
40625: PUSH
40626: LD_INT 14
40628: PUSH
40629: LD_INT 53
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: IN
40636: IFFALSE 40657
// points := [ 40 , 10 , 20 ] ;
40638: LD_ADDR_VAR 0 9
40642: PUSH
40643: LD_INT 40
40645: PUSH
40646: LD_INT 10
40648: PUSH
40649: LD_INT 20
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: LIST
40656: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40657: LD_VAR 0 6
40661: PPUSH
40662: CALL_OW 264
40666: PUSH
40667: LD_INT 9
40669: PUSH
40670: EMPTY
40671: LIST
40672: IN
40673: IFFALSE 40694
// points := [ 5 , 70 , 20 ] ;
40675: LD_ADDR_VAR 0 9
40679: PUSH
40680: LD_INT 5
40682: PUSH
40683: LD_INT 70
40685: PUSH
40686: LD_INT 20
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: LIST
40693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40694: LD_VAR 0 6
40698: PPUSH
40699: CALL_OW 264
40703: PUSH
40704: LD_INT 10
40706: PUSH
40707: EMPTY
40708: LIST
40709: IN
40710: IFFALSE 40731
// points := [ 35 , 110 , 70 ] ;
40712: LD_ADDR_VAR 0 9
40716: PUSH
40717: LD_INT 35
40719: PUSH
40720: LD_INT 110
40722: PUSH
40723: LD_INT 70
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: LIST
40730: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40731: LD_VAR 0 6
40735: PPUSH
40736: CALL_OW 265
40740: PUSH
40741: LD_INT 25
40743: EQUAL
40744: IFFALSE 40765
// points := [ 80 , 65 , 100 ] ;
40746: LD_ADDR_VAR 0 9
40750: PUSH
40751: LD_INT 80
40753: PUSH
40754: LD_INT 65
40756: PUSH
40757: LD_INT 100
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: LIST
40764: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40765: LD_VAR 0 6
40769: PPUSH
40770: CALL_OW 263
40774: PUSH
40775: LD_INT 1
40777: EQUAL
40778: IFFALSE 40813
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40780: LD_ADDR_VAR 0 10
40784: PUSH
40785: LD_VAR 0 10
40789: PUSH
40790: LD_VAR 0 6
40794: PPUSH
40795: CALL_OW 311
40799: PPUSH
40800: LD_INT 3
40802: PPUSH
40803: CALL_OW 259
40807: PUSH
40808: LD_INT 4
40810: MUL
40811: MUL
40812: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40813: LD_VAR 0 6
40817: PPUSH
40818: CALL_OW 263
40822: PUSH
40823: LD_INT 2
40825: EQUAL
40826: IFFALSE 40877
// begin j := IsControledBy ( i ) ;
40828: LD_ADDR_VAR 0 7
40832: PUSH
40833: LD_VAR 0 6
40837: PPUSH
40838: CALL_OW 312
40842: ST_TO_ADDR
// if j then
40843: LD_VAR 0 7
40847: IFFALSE 40877
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40849: LD_ADDR_VAR 0 10
40853: PUSH
40854: LD_VAR 0 10
40858: PUSH
40859: LD_VAR 0 7
40863: PPUSH
40864: LD_INT 3
40866: PPUSH
40867: CALL_OW 259
40871: PUSH
40872: LD_INT 3
40874: MUL
40875: MUL
40876: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40877: LD_VAR 0 6
40881: PPUSH
40882: CALL_OW 264
40886: PUSH
40887: LD_INT 5
40889: PUSH
40890: LD_INT 6
40892: PUSH
40893: LD_INT 46
40895: PUSH
40896: LD_INT 44
40898: PUSH
40899: LD_INT 47
40901: PUSH
40902: LD_INT 45
40904: PUSH
40905: LD_INT 28
40907: PUSH
40908: LD_INT 7
40910: PUSH
40911: LD_INT 27
40913: PUSH
40914: LD_INT 29
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: IN
40929: IFFALSE 40949
40931: PUSH
40932: LD_VAR 0 1
40936: PPUSH
40937: LD_INT 52
40939: PPUSH
40940: CALL_OW 321
40944: PUSH
40945: LD_INT 2
40947: EQUAL
40948: AND
40949: IFFALSE 40966
// bpoints := bpoints * 1.2 ;
40951: LD_ADDR_VAR 0 10
40955: PUSH
40956: LD_VAR 0 10
40960: PUSH
40961: LD_REAL  1.20000000000000E+0000
40964: MUL
40965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40966: LD_VAR 0 6
40970: PPUSH
40971: CALL_OW 264
40975: PUSH
40976: LD_INT 6
40978: PUSH
40979: LD_INT 46
40981: PUSH
40982: LD_INT 47
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: LIST
40989: IN
40990: IFFALSE 41007
// bpoints := bpoints * 1.2 ;
40992: LD_ADDR_VAR 0 10
40996: PUSH
40997: LD_VAR 0 10
41001: PUSH
41002: LD_REAL  1.20000000000000E+0000
41005: MUL
41006: ST_TO_ADDR
// end ; unit_building :
41007: GO 41021
41009: LD_INT 3
41011: DOUBLE
41012: EQUAL
41013: IFTRUE 41017
41015: GO 41020
41017: POP
// ; end ;
41018: GO 41021
41020: POP
// for j = 1 to 3 do
41021: LD_ADDR_VAR 0 7
41025: PUSH
41026: DOUBLE
41027: LD_INT 1
41029: DEC
41030: ST_TO_ADDR
41031: LD_INT 3
41033: PUSH
41034: FOR_TO
41035: IFFALSE 41088
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41037: LD_ADDR_VAR 0 5
41041: PUSH
41042: LD_VAR 0 5
41046: PPUSH
41047: LD_VAR 0 7
41051: PPUSH
41052: LD_VAR 0 5
41056: PUSH
41057: LD_VAR 0 7
41061: ARRAY
41062: PUSH
41063: LD_VAR 0 9
41067: PUSH
41068: LD_VAR 0 7
41072: ARRAY
41073: PUSH
41074: LD_VAR 0 10
41078: MUL
41079: PLUS
41080: PPUSH
41081: CALL_OW 1
41085: ST_TO_ADDR
41086: GO 41034
41088: POP
41089: POP
// end ;
41090: GO 39563
41092: POP
41093: POP
// result := Replace ( result , 4 , tmp ) ;
41094: LD_ADDR_VAR 0 5
41098: PUSH
41099: LD_VAR 0 5
41103: PPUSH
41104: LD_INT 4
41106: PPUSH
41107: LD_VAR 0 8
41111: PPUSH
41112: CALL_OW 1
41116: ST_TO_ADDR
// end ;
41117: LD_VAR 0 5
41121: RET
// export function DangerAtRange ( unit , range ) ; begin
41122: LD_INT 0
41124: PPUSH
// if not unit then
41125: LD_VAR 0 1
41129: NOT
41130: IFFALSE 41134
// exit ;
41132: GO 41179
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41134: LD_ADDR_VAR 0 3
41138: PUSH
41139: LD_VAR 0 1
41143: PPUSH
41144: CALL_OW 255
41148: PPUSH
41149: LD_VAR 0 1
41153: PPUSH
41154: CALL_OW 250
41158: PPUSH
41159: LD_VAR 0 1
41163: PPUSH
41164: CALL_OW 251
41168: PPUSH
41169: LD_VAR 0 2
41173: PPUSH
41174: CALL 39413 0 4
41178: ST_TO_ADDR
// end ;
41179: LD_VAR 0 3
41183: RET
// export function DangerInArea ( side , area ) ; begin
41184: LD_INT 0
41186: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41187: LD_ADDR_VAR 0 3
41191: PUSH
41192: LD_VAR 0 2
41196: PPUSH
41197: LD_INT 81
41199: PUSH
41200: LD_VAR 0 1
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PPUSH
41209: CALL_OW 70
41213: ST_TO_ADDR
// end ;
41214: LD_VAR 0 3
41218: RET
// export function IsExtension ( b ) ; begin
41219: LD_INT 0
41221: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41222: LD_ADDR_VAR 0 2
41226: PUSH
41227: LD_VAR 0 1
41231: PUSH
41232: LD_INT 23
41234: PUSH
41235: LD_INT 20
41237: PUSH
41238: LD_INT 22
41240: PUSH
41241: LD_INT 17
41243: PUSH
41244: LD_INT 24
41246: PUSH
41247: LD_INT 21
41249: PUSH
41250: LD_INT 19
41252: PUSH
41253: LD_INT 16
41255: PUSH
41256: LD_INT 25
41258: PUSH
41259: LD_INT 18
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: IN
41274: ST_TO_ADDR
// end ;
41275: LD_VAR 0 2
41279: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41280: LD_INT 0
41282: PPUSH
41283: PPUSH
41284: PPUSH
// result := [ ] ;
41285: LD_ADDR_VAR 0 4
41289: PUSH
41290: EMPTY
41291: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41292: LD_ADDR_VAR 0 5
41296: PUSH
41297: LD_VAR 0 2
41301: PPUSH
41302: LD_INT 21
41304: PUSH
41305: LD_INT 3
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PPUSH
41312: CALL_OW 70
41316: ST_TO_ADDR
// if not tmp then
41317: LD_VAR 0 5
41321: NOT
41322: IFFALSE 41326
// exit ;
41324: GO 41390
// if checkLink then
41326: LD_VAR 0 3
41330: IFFALSE 41380
// begin for i in tmp do
41332: LD_ADDR_VAR 0 6
41336: PUSH
41337: LD_VAR 0 5
41341: PUSH
41342: FOR_IN
41343: IFFALSE 41378
// if GetBase ( i ) <> base then
41345: LD_VAR 0 6
41349: PPUSH
41350: CALL_OW 274
41354: PUSH
41355: LD_VAR 0 1
41359: NONEQUAL
41360: IFFALSE 41376
// ComLinkToBase ( base , i ) ;
41362: LD_VAR 0 1
41366: PPUSH
41367: LD_VAR 0 6
41371: PPUSH
41372: CALL_OW 169
41376: GO 41342
41378: POP
41379: POP
// end ; result := tmp ;
41380: LD_ADDR_VAR 0 4
41384: PUSH
41385: LD_VAR 0 5
41389: ST_TO_ADDR
// end ;
41390: LD_VAR 0 4
41394: RET
// export function ComComplete ( units , b ) ; var i ; begin
41395: LD_INT 0
41397: PPUSH
41398: PPUSH
// if not units then
41399: LD_VAR 0 1
41403: NOT
41404: IFFALSE 41408
// exit ;
41406: GO 41498
// for i in units do
41408: LD_ADDR_VAR 0 4
41412: PUSH
41413: LD_VAR 0 1
41417: PUSH
41418: FOR_IN
41419: IFFALSE 41496
// if BuildingStatus ( b ) = bs_build then
41421: LD_VAR 0 2
41425: PPUSH
41426: CALL_OW 461
41430: PUSH
41431: LD_INT 1
41433: EQUAL
41434: IFFALSE 41494
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41436: LD_VAR 0 4
41440: PPUSH
41441: LD_STRING h
41443: PUSH
41444: LD_VAR 0 2
41448: PPUSH
41449: CALL_OW 250
41453: PUSH
41454: LD_VAR 0 2
41458: PPUSH
41459: CALL_OW 251
41463: PUSH
41464: LD_VAR 0 2
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: PUSH
41487: EMPTY
41488: LIST
41489: PPUSH
41490: CALL_OW 446
41494: GO 41418
41496: POP
41497: POP
// end ;
41498: LD_VAR 0 3
41502: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41503: LD_INT 0
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41511: LD_VAR 0 1
41515: NOT
41516: IFTRUE 41533
41518: PUSH
41519: LD_VAR 0 1
41523: PPUSH
41524: CALL_OW 263
41528: PUSH
41529: LD_INT 2
41531: NONEQUAL
41532: OR
41533: IFFALSE 41537
// exit ;
41535: GO 41853
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41537: LD_ADDR_VAR 0 6
41541: PUSH
41542: LD_INT 22
41544: PUSH
41545: LD_VAR 0 1
41549: PPUSH
41550: CALL_OW 255
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: LD_INT 30
41564: PUSH
41565: LD_INT 36
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 34
41574: PUSH
41575: LD_INT 31
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: LIST
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PPUSH
41591: CALL_OW 69
41595: ST_TO_ADDR
// if not tmp then
41596: LD_VAR 0 6
41600: NOT
41601: IFFALSE 41605
// exit ;
41603: GO 41853
// result := [ ] ;
41605: LD_ADDR_VAR 0 2
41609: PUSH
41610: EMPTY
41611: ST_TO_ADDR
// for i in tmp do
41612: LD_ADDR_VAR 0 3
41616: PUSH
41617: LD_VAR 0 6
41621: PUSH
41622: FOR_IN
41623: IFFALSE 41694
// begin t := UnitsInside ( i ) ;
41625: LD_ADDR_VAR 0 4
41629: PUSH
41630: LD_VAR 0 3
41634: PPUSH
41635: CALL_OW 313
41639: ST_TO_ADDR
// if t then
41640: LD_VAR 0 4
41644: IFFALSE 41692
// for j in t do
41646: LD_ADDR_VAR 0 7
41650: PUSH
41651: LD_VAR 0 4
41655: PUSH
41656: FOR_IN
41657: IFFALSE 41690
// result := Replace ( result , result + 1 , j ) ;
41659: LD_ADDR_VAR 0 2
41663: PUSH
41664: LD_VAR 0 2
41668: PPUSH
41669: LD_VAR 0 2
41673: PUSH
41674: LD_INT 1
41676: PLUS
41677: PPUSH
41678: LD_VAR 0 7
41682: PPUSH
41683: CALL_OW 1
41687: ST_TO_ADDR
41688: GO 41656
41690: POP
41691: POP
// end ;
41692: GO 41622
41694: POP
41695: POP
// if not result then
41696: LD_VAR 0 2
41700: NOT
41701: IFFALSE 41705
// exit ;
41703: GO 41853
// mech := result [ 1 ] ;
41705: LD_ADDR_VAR 0 5
41709: PUSH
41710: LD_VAR 0 2
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: ST_TO_ADDR
// if result > 1 then
41719: LD_VAR 0 2
41723: PUSH
41724: LD_INT 1
41726: GREATER
41727: IFFALSE 41839
// begin for i = 2 to result do
41729: LD_ADDR_VAR 0 3
41733: PUSH
41734: DOUBLE
41735: LD_INT 2
41737: DEC
41738: ST_TO_ADDR
41739: LD_VAR 0 2
41743: PUSH
41744: FOR_TO
41745: IFFALSE 41837
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41747: LD_ADDR_VAR 0 4
41751: PUSH
41752: LD_VAR 0 2
41756: PUSH
41757: LD_VAR 0 3
41761: ARRAY
41762: PPUSH
41763: LD_INT 3
41765: PPUSH
41766: CALL_OW 259
41770: PUSH
41771: LD_VAR 0 2
41775: PUSH
41776: LD_VAR 0 3
41780: ARRAY
41781: PPUSH
41782: CALL_OW 432
41786: MINUS
41787: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41788: LD_VAR 0 4
41792: PUSH
41793: LD_VAR 0 5
41797: PPUSH
41798: LD_INT 3
41800: PPUSH
41801: CALL_OW 259
41805: PUSH
41806: LD_VAR 0 5
41810: PPUSH
41811: CALL_OW 432
41815: MINUS
41816: GREATEREQUAL
41817: IFFALSE 41835
// mech := result [ i ] ;
41819: LD_ADDR_VAR 0 5
41823: PUSH
41824: LD_VAR 0 2
41828: PUSH
41829: LD_VAR 0 3
41833: ARRAY
41834: ST_TO_ADDR
// end ;
41835: GO 41744
41837: POP
41838: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41839: LD_VAR 0 1
41843: PPUSH
41844: LD_VAR 0 5
41848: PPUSH
41849: CALL_OW 135
// end ;
41853: LD_VAR 0 2
41857: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41858: LD_INT 0
41860: PPUSH
41861: PPUSH
41862: PPUSH
41863: PPUSH
41864: PPUSH
41865: PPUSH
41866: PPUSH
41867: PPUSH
41868: PPUSH
41869: PPUSH
41870: PPUSH
41871: PPUSH
41872: PPUSH
// result := [ ] ;
41873: LD_ADDR_VAR 0 7
41877: PUSH
41878: EMPTY
41879: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41880: LD_VAR 0 1
41884: PPUSH
41885: CALL_OW 266
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: IN
41900: NOT
41901: IFFALSE 41905
// exit ;
41903: GO 43545
// if name then
41905: LD_VAR 0 3
41909: IFFALSE 41925
// SetBName ( base_dep , name ) ;
41911: LD_VAR 0 1
41915: PPUSH
41916: LD_VAR 0 3
41920: PPUSH
41921: CALL_OW 500
// base := GetBase ( base_dep ) ;
41925: LD_ADDR_VAR 0 15
41929: PUSH
41930: LD_VAR 0 1
41934: PPUSH
41935: CALL_OW 274
41939: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41940: LD_ADDR_VAR 0 16
41944: PUSH
41945: LD_VAR 0 1
41949: PPUSH
41950: CALL_OW 255
41954: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41955: LD_ADDR_VAR 0 17
41959: PUSH
41960: LD_VAR 0 1
41964: PPUSH
41965: CALL_OW 248
41969: ST_TO_ADDR
// if sources then
41970: LD_VAR 0 5
41974: IFFALSE 42021
// for i = 1 to 3 do
41976: LD_ADDR_VAR 0 8
41980: PUSH
41981: DOUBLE
41982: LD_INT 1
41984: DEC
41985: ST_TO_ADDR
41986: LD_INT 3
41988: PUSH
41989: FOR_TO
41990: IFFALSE 42019
// AddResourceType ( base , i , sources [ i ] ) ;
41992: LD_VAR 0 15
41996: PPUSH
41997: LD_VAR 0 8
42001: PPUSH
42002: LD_VAR 0 5
42006: PUSH
42007: LD_VAR 0 8
42011: ARRAY
42012: PPUSH
42013: CALL_OW 276
42017: GO 41989
42019: POP
42020: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42021: LD_ADDR_VAR 0 18
42025: PUSH
42026: LD_VAR 0 15
42030: PPUSH
42031: LD_VAR 0 2
42035: PPUSH
42036: LD_INT 1
42038: PPUSH
42039: CALL 41280 0 3
42043: ST_TO_ADDR
// InitHc ;
42044: CALL_OW 19
// InitUc ;
42048: CALL_OW 18
// uc_side := side ;
42052: LD_ADDR_OWVAR 20
42056: PUSH
42057: LD_VAR 0 16
42061: ST_TO_ADDR
// uc_nation := nation ;
42062: LD_ADDR_OWVAR 21
42066: PUSH
42067: LD_VAR 0 17
42071: ST_TO_ADDR
// if buildings then
42072: LD_VAR 0 18
42076: IFFALSE 43404
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42078: LD_ADDR_VAR 0 19
42082: PUSH
42083: LD_VAR 0 18
42087: PPUSH
42088: LD_INT 2
42090: PUSH
42091: LD_INT 30
42093: PUSH
42094: LD_INT 29
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 30
42103: PUSH
42104: LD_INT 30
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: LIST
42115: PPUSH
42116: CALL_OW 72
42120: ST_TO_ADDR
// if tmp then
42121: LD_VAR 0 19
42125: IFFALSE 42173
// for i in tmp do
42127: LD_ADDR_VAR 0 8
42131: PUSH
42132: LD_VAR 0 19
42136: PUSH
42137: FOR_IN
42138: IFFALSE 42171
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42140: LD_VAR 0 8
42144: PPUSH
42145: CALL_OW 250
42149: PPUSH
42150: LD_VAR 0 8
42154: PPUSH
42155: CALL_OW 251
42159: PPUSH
42160: LD_VAR 0 16
42164: PPUSH
42165: CALL_OW 441
42169: GO 42137
42171: POP
42172: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42173: LD_VAR 0 18
42177: PPUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 30
42183: PUSH
42184: LD_INT 32
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 30
42193: PUSH
42194: LD_INT 33
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: LIST
42205: PPUSH
42206: CALL_OW 72
42210: IFFALSE 42298
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42212: LD_ADDR_VAR 0 8
42216: PUSH
42217: LD_VAR 0 18
42221: PPUSH
42222: LD_INT 2
42224: PUSH
42225: LD_INT 30
42227: PUSH
42228: LD_INT 32
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 30
42237: PUSH
42238: LD_INT 33
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: LIST
42249: PPUSH
42250: CALL_OW 72
42254: PUSH
42255: FOR_IN
42256: IFFALSE 42296
// begin if not GetBWeapon ( i ) then
42258: LD_VAR 0 8
42262: PPUSH
42263: CALL_OW 269
42267: NOT
42268: IFFALSE 42294
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42270: LD_VAR 0 8
42274: PPUSH
42275: LD_VAR 0 8
42279: PPUSH
42280: LD_VAR 0 2
42284: PPUSH
42285: CALL 43550 0 2
42289: PPUSH
42290: CALL_OW 431
// end ;
42294: GO 42255
42296: POP
42297: POP
// end ; for i = 1 to personel do
42298: LD_ADDR_VAR 0 8
42302: PUSH
42303: DOUBLE
42304: LD_INT 1
42306: DEC
42307: ST_TO_ADDR
42308: LD_VAR 0 6
42312: PUSH
42313: FOR_TO
42314: IFFALSE 43384
// begin if i > 4 then
42316: LD_VAR 0 8
42320: PUSH
42321: LD_INT 4
42323: GREATER
42324: IFFALSE 42328
// break ;
42326: GO 43384
// case i of 1 :
42328: LD_VAR 0 8
42332: PUSH
42333: LD_INT 1
42335: DOUBLE
42336: EQUAL
42337: IFTRUE 42341
42339: GO 42421
42341: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42342: LD_ADDR_VAR 0 12
42346: PUSH
42347: LD_VAR 0 18
42351: PPUSH
42352: LD_INT 22
42354: PUSH
42355: LD_VAR 0 16
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 58
42366: PUSH
42367: EMPTY
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: LD_INT 30
42375: PUSH
42376: LD_INT 32
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 30
42385: PUSH
42386: LD_INT 4
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 30
42395: PUSH
42396: LD_INT 5
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: LIST
42413: PPUSH
42414: CALL_OW 72
42418: ST_TO_ADDR
42419: GO 42643
42421: LD_INT 2
42423: DOUBLE
42424: EQUAL
42425: IFTRUE 42429
42427: GO 42491
42429: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42430: LD_ADDR_VAR 0 12
42434: PUSH
42435: LD_VAR 0 18
42439: PPUSH
42440: LD_INT 22
42442: PUSH
42443: LD_VAR 0 16
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 2
42454: PUSH
42455: LD_INT 30
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 30
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: LIST
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PPUSH
42484: CALL_OW 72
42488: ST_TO_ADDR
42489: GO 42643
42491: LD_INT 3
42493: DOUBLE
42494: EQUAL
42495: IFTRUE 42499
42497: GO 42561
42499: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42500: LD_ADDR_VAR 0 12
42504: PUSH
42505: LD_VAR 0 18
42509: PPUSH
42510: LD_INT 22
42512: PUSH
42513: LD_VAR 0 16
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: PUSH
42525: LD_INT 30
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 30
42537: PUSH
42538: LD_INT 3
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: LIST
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PPUSH
42554: CALL_OW 72
42558: ST_TO_ADDR
42559: GO 42643
42561: LD_INT 4
42563: DOUBLE
42564: EQUAL
42565: IFTRUE 42569
42567: GO 42642
42569: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42570: LD_ADDR_VAR 0 12
42574: PUSH
42575: LD_VAR 0 18
42579: PPUSH
42580: LD_INT 22
42582: PUSH
42583: LD_VAR 0 16
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 2
42594: PUSH
42595: LD_INT 30
42597: PUSH
42598: LD_INT 6
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 30
42607: PUSH
42608: LD_INT 7
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 30
42617: PUSH
42618: LD_INT 8
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PPUSH
42635: CALL_OW 72
42639: ST_TO_ADDR
42640: GO 42643
42642: POP
// if i = 1 then
42643: LD_VAR 0 8
42647: PUSH
42648: LD_INT 1
42650: EQUAL
42651: IFFALSE 42762
// begin tmp := [ ] ;
42653: LD_ADDR_VAR 0 19
42657: PUSH
42658: EMPTY
42659: ST_TO_ADDR
// for j in f do
42660: LD_ADDR_VAR 0 9
42664: PUSH
42665: LD_VAR 0 12
42669: PUSH
42670: FOR_IN
42671: IFFALSE 42744
// if GetBType ( j ) = b_bunker then
42673: LD_VAR 0 9
42677: PPUSH
42678: CALL_OW 266
42682: PUSH
42683: LD_INT 32
42685: EQUAL
42686: IFFALSE 42713
// tmp := Insert ( tmp , 1 , j ) else
42688: LD_ADDR_VAR 0 19
42692: PUSH
42693: LD_VAR 0 19
42697: PPUSH
42698: LD_INT 1
42700: PPUSH
42701: LD_VAR 0 9
42705: PPUSH
42706: CALL_OW 2
42710: ST_TO_ADDR
42711: GO 42742
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42713: LD_ADDR_VAR 0 19
42717: PUSH
42718: LD_VAR 0 19
42722: PPUSH
42723: LD_VAR 0 19
42727: PUSH
42728: LD_INT 1
42730: PLUS
42731: PPUSH
42732: LD_VAR 0 9
42736: PPUSH
42737: CALL_OW 2
42741: ST_TO_ADDR
42742: GO 42670
42744: POP
42745: POP
// if tmp then
42746: LD_VAR 0 19
42750: IFFALSE 42762
// f := tmp ;
42752: LD_ADDR_VAR 0 12
42756: PUSH
42757: LD_VAR 0 19
42761: ST_TO_ADDR
// end ; x := personel [ i ] ;
42762: LD_ADDR_VAR 0 13
42766: PUSH
42767: LD_VAR 0 6
42771: PUSH
42772: LD_VAR 0 8
42776: ARRAY
42777: ST_TO_ADDR
// if x = - 1 then
42778: LD_VAR 0 13
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: EQUAL
42787: IFFALSE 42998
// begin for j in f do
42789: LD_ADDR_VAR 0 9
42793: PUSH
42794: LD_VAR 0 12
42798: PUSH
42799: FOR_IN
42800: IFFALSE 42994
// repeat InitHc ;
42802: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42806: LD_VAR 0 9
42810: PPUSH
42811: CALL_OW 266
42815: PUSH
42816: LD_INT 5
42818: EQUAL
42819: IFFALSE 42889
// begin if UnitsInside ( j ) < 3 then
42821: LD_VAR 0 9
42825: PPUSH
42826: CALL_OW 313
42830: PUSH
42831: LD_INT 3
42833: LESS
42834: IFFALSE 42870
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42836: LD_INT 0
42838: PPUSH
42839: LD_INT 5
42841: PUSH
42842: LD_INT 8
42844: PUSH
42845: LD_INT 9
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: LIST
42852: PUSH
42853: LD_VAR 0 17
42857: ARRAY
42858: PPUSH
42859: LD_VAR 0 4
42863: PPUSH
42864: CALL_OW 380
42868: GO 42887
// PrepareHuman ( false , i , skill ) ;
42870: LD_INT 0
42872: PPUSH
42873: LD_VAR 0 8
42877: PPUSH
42878: LD_VAR 0 4
42882: PPUSH
42883: CALL_OW 380
// end else
42887: GO 42906
// PrepareHuman ( false , i , skill ) ;
42889: LD_INT 0
42891: PPUSH
42892: LD_VAR 0 8
42896: PPUSH
42897: LD_VAR 0 4
42901: PPUSH
42902: CALL_OW 380
// un := CreateHuman ;
42906: LD_ADDR_VAR 0 14
42910: PUSH
42911: CALL_OW 44
42915: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42916: LD_ADDR_VAR 0 7
42920: PUSH
42921: LD_VAR 0 7
42925: PPUSH
42926: LD_INT 1
42928: PPUSH
42929: LD_VAR 0 14
42933: PPUSH
42934: CALL_OW 2
42938: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42939: LD_VAR 0 14
42943: PPUSH
42944: LD_VAR 0 9
42948: PPUSH
42949: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42953: LD_VAR 0 9
42957: PPUSH
42958: CALL_OW 313
42962: PUSH
42963: LD_INT 6
42965: EQUAL
42966: IFTRUE 42990
42968: PUSH
42969: LD_VAR 0 9
42973: PPUSH
42974: CALL_OW 266
42978: PUSH
42979: LD_INT 32
42981: PUSH
42982: LD_INT 31
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: IN
42989: OR
42990: IFFALSE 42802
42992: GO 42799
42994: POP
42995: POP
// end else
42996: GO 43382
// for j = 1 to x do
42998: LD_ADDR_VAR 0 9
43002: PUSH
43003: DOUBLE
43004: LD_INT 1
43006: DEC
43007: ST_TO_ADDR
43008: LD_VAR 0 13
43012: PUSH
43013: FOR_TO
43014: IFFALSE 43380
// begin InitHc ;
43016: CALL_OW 19
// if not f then
43020: LD_VAR 0 12
43024: NOT
43025: IFFALSE 43114
// begin PrepareHuman ( false , i , skill ) ;
43027: LD_INT 0
43029: PPUSH
43030: LD_VAR 0 8
43034: PPUSH
43035: LD_VAR 0 4
43039: PPUSH
43040: CALL_OW 380
// un := CreateHuman ;
43044: LD_ADDR_VAR 0 14
43048: PUSH
43049: CALL_OW 44
43053: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43054: LD_ADDR_VAR 0 7
43058: PUSH
43059: LD_VAR 0 7
43063: PPUSH
43064: LD_INT 1
43066: PPUSH
43067: LD_VAR 0 14
43071: PPUSH
43072: CALL_OW 2
43076: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43077: LD_VAR 0 14
43081: PPUSH
43082: LD_VAR 0 1
43086: PPUSH
43087: CALL_OW 250
43091: PPUSH
43092: LD_VAR 0 1
43096: PPUSH
43097: CALL_OW 251
43101: PPUSH
43102: LD_INT 10
43104: PPUSH
43105: LD_INT 0
43107: PPUSH
43108: CALL_OW 50
// continue ;
43112: GO 43013
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43114: LD_VAR 0 12
43118: PUSH
43119: LD_INT 1
43121: ARRAY
43122: PPUSH
43123: CALL_OW 313
43127: IFFALSE 43155
43129: PUSH
43130: LD_VAR 0 12
43134: PUSH
43135: LD_INT 1
43137: ARRAY
43138: PPUSH
43139: CALL_OW 266
43143: PUSH
43144: LD_INT 32
43146: PUSH
43147: LD_INT 31
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: IN
43154: AND
43155: IFTRUE 43176
43157: PUSH
43158: LD_VAR 0 12
43162: PUSH
43163: LD_INT 1
43165: ARRAY
43166: PPUSH
43167: CALL_OW 313
43171: PUSH
43172: LD_INT 6
43174: EQUAL
43175: OR
43176: IFFALSE 43196
// f := Delete ( f , 1 ) ;
43178: LD_ADDR_VAR 0 12
43182: PUSH
43183: LD_VAR 0 12
43187: PPUSH
43188: LD_INT 1
43190: PPUSH
43191: CALL_OW 3
43195: ST_TO_ADDR
// if not f then
43196: LD_VAR 0 12
43200: NOT
43201: IFFALSE 43219
// begin x := x + 2 ;
43203: LD_ADDR_VAR 0 13
43207: PUSH
43208: LD_VAR 0 13
43212: PUSH
43213: LD_INT 2
43215: PLUS
43216: ST_TO_ADDR
// continue ;
43217: GO 43013
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43219: LD_VAR 0 12
43223: PUSH
43224: LD_INT 1
43226: ARRAY
43227: PPUSH
43228: CALL_OW 266
43232: PUSH
43233: LD_INT 5
43235: EQUAL
43236: IFFALSE 43310
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43238: LD_VAR 0 12
43242: PUSH
43243: LD_INT 1
43245: ARRAY
43246: PPUSH
43247: CALL_OW 313
43251: PUSH
43252: LD_INT 3
43254: LESS
43255: IFFALSE 43291
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43257: LD_INT 0
43259: PPUSH
43260: LD_INT 5
43262: PUSH
43263: LD_INT 8
43265: PUSH
43266: LD_INT 9
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: LIST
43273: PUSH
43274: LD_VAR 0 17
43278: ARRAY
43279: PPUSH
43280: LD_VAR 0 4
43284: PPUSH
43285: CALL_OW 380
43289: GO 43308
// PrepareHuman ( false , i , skill ) ;
43291: LD_INT 0
43293: PPUSH
43294: LD_VAR 0 8
43298: PPUSH
43299: LD_VAR 0 4
43303: PPUSH
43304: CALL_OW 380
// end else
43308: GO 43327
// PrepareHuman ( false , i , skill ) ;
43310: LD_INT 0
43312: PPUSH
43313: LD_VAR 0 8
43317: PPUSH
43318: LD_VAR 0 4
43322: PPUSH
43323: CALL_OW 380
// un := CreateHuman ;
43327: LD_ADDR_VAR 0 14
43331: PUSH
43332: CALL_OW 44
43336: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43337: LD_ADDR_VAR 0 7
43341: PUSH
43342: LD_VAR 0 7
43346: PPUSH
43347: LD_INT 1
43349: PPUSH
43350: LD_VAR 0 14
43354: PPUSH
43355: CALL_OW 2
43359: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43360: LD_VAR 0 14
43364: PPUSH
43365: LD_VAR 0 12
43369: PUSH
43370: LD_INT 1
43372: ARRAY
43373: PPUSH
43374: CALL_OW 52
// end ;
43378: GO 43013
43380: POP
43381: POP
// end ;
43382: GO 42313
43384: POP
43385: POP
// result := result ^ buildings ;
43386: LD_ADDR_VAR 0 7
43390: PUSH
43391: LD_VAR 0 7
43395: PUSH
43396: LD_VAR 0 18
43400: ADD
43401: ST_TO_ADDR
// end else
43402: GO 43545
// begin for i = 1 to personel do
43404: LD_ADDR_VAR 0 8
43408: PUSH
43409: DOUBLE
43410: LD_INT 1
43412: DEC
43413: ST_TO_ADDR
43414: LD_VAR 0 6
43418: PUSH
43419: FOR_TO
43420: IFFALSE 43543
// begin if i > 4 then
43422: LD_VAR 0 8
43426: PUSH
43427: LD_INT 4
43429: GREATER
43430: IFFALSE 43434
// break ;
43432: GO 43543
// x := personel [ i ] ;
43434: LD_ADDR_VAR 0 13
43438: PUSH
43439: LD_VAR 0 6
43443: PUSH
43444: LD_VAR 0 8
43448: ARRAY
43449: ST_TO_ADDR
// if x = - 1 then
43450: LD_VAR 0 13
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: EQUAL
43459: IFFALSE 43463
// continue ;
43461: GO 43419
// PrepareHuman ( false , i , skill ) ;
43463: LD_INT 0
43465: PPUSH
43466: LD_VAR 0 8
43470: PPUSH
43471: LD_VAR 0 4
43475: PPUSH
43476: CALL_OW 380
// un := CreateHuman ;
43480: LD_ADDR_VAR 0 14
43484: PUSH
43485: CALL_OW 44
43489: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43490: LD_VAR 0 14
43494: PPUSH
43495: LD_VAR 0 1
43499: PPUSH
43500: CALL_OW 250
43504: PPUSH
43505: LD_VAR 0 1
43509: PPUSH
43510: CALL_OW 251
43514: PPUSH
43515: LD_INT 10
43517: PPUSH
43518: LD_INT 0
43520: PPUSH
43521: CALL_OW 50
// result := result ^ un ;
43525: LD_ADDR_VAR 0 7
43529: PUSH
43530: LD_VAR 0 7
43534: PUSH
43535: LD_VAR 0 14
43539: ADD
43540: ST_TO_ADDR
// end ;
43541: GO 43419
43543: POP
43544: POP
// end ; end ;
43545: LD_VAR 0 7
43549: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43550: LD_INT 0
43552: PPUSH
43553: PPUSH
43554: PPUSH
43555: PPUSH
43556: PPUSH
43557: PPUSH
43558: PPUSH
43559: PPUSH
43560: PPUSH
43561: PPUSH
43562: PPUSH
43563: PPUSH
43564: PPUSH
43565: PPUSH
43566: PPUSH
43567: PPUSH
// result := false ;
43568: LD_ADDR_VAR 0 3
43572: PUSH
43573: LD_INT 0
43575: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43576: LD_VAR 0 1
43580: NOT
43581: IFTRUE 43606
43583: PUSH
43584: LD_VAR 0 1
43588: PPUSH
43589: CALL_OW 266
43593: PUSH
43594: LD_INT 32
43596: PUSH
43597: LD_INT 33
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: IN
43604: NOT
43605: OR
43606: IFFALSE 43610
// exit ;
43608: GO 44745
// nat := GetNation ( tower ) ;
43610: LD_ADDR_VAR 0 12
43614: PUSH
43615: LD_VAR 0 1
43619: PPUSH
43620: CALL_OW 248
43624: ST_TO_ADDR
// side := GetSide ( tower ) ;
43625: LD_ADDR_VAR 0 16
43629: PUSH
43630: LD_VAR 0 1
43634: PPUSH
43635: CALL_OW 255
43639: ST_TO_ADDR
// x := GetX ( tower ) ;
43640: LD_ADDR_VAR 0 10
43644: PUSH
43645: LD_VAR 0 1
43649: PPUSH
43650: CALL_OW 250
43654: ST_TO_ADDR
// y := GetY ( tower ) ;
43655: LD_ADDR_VAR 0 11
43659: PUSH
43660: LD_VAR 0 1
43664: PPUSH
43665: CALL_OW 251
43669: ST_TO_ADDR
// if not x or not y then
43670: LD_VAR 0 10
43674: NOT
43675: IFTRUE 43684
43677: PUSH
43678: LD_VAR 0 11
43682: NOT
43683: OR
43684: IFFALSE 43688
// exit ;
43686: GO 44745
// weapon := 0 ;
43688: LD_ADDR_VAR 0 18
43692: PUSH
43693: LD_INT 0
43695: ST_TO_ADDR
// fac_list := [ ] ;
43696: LD_ADDR_VAR 0 17
43700: PUSH
43701: EMPTY
43702: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43703: LD_ADDR_VAR 0 6
43707: PUSH
43708: LD_VAR 0 1
43712: PPUSH
43713: CALL_OW 274
43717: PPUSH
43718: LD_VAR 0 2
43722: PPUSH
43723: LD_INT 0
43725: PPUSH
43726: CALL 41280 0 3
43730: PPUSH
43731: LD_INT 30
43733: PUSH
43734: LD_INT 3
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PPUSH
43741: CALL_OW 72
43745: ST_TO_ADDR
// if not factories then
43746: LD_VAR 0 6
43750: NOT
43751: IFFALSE 43755
// exit ;
43753: GO 44745
// for i in factories do
43755: LD_ADDR_VAR 0 8
43759: PUSH
43760: LD_VAR 0 6
43764: PUSH
43765: FOR_IN
43766: IFFALSE 43791
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43768: LD_ADDR_VAR 0 17
43772: PUSH
43773: LD_VAR 0 17
43777: PUSH
43778: LD_VAR 0 8
43782: PPUSH
43783: CALL_OW 478
43787: UNION
43788: ST_TO_ADDR
43789: GO 43765
43791: POP
43792: POP
// if not fac_list then
43793: LD_VAR 0 17
43797: NOT
43798: IFFALSE 43802
// exit ;
43800: GO 44745
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43802: LD_ADDR_VAR 0 5
43806: PUSH
43807: LD_INT 4
43809: PUSH
43810: LD_INT 5
43812: PUSH
43813: LD_INT 9
43815: PUSH
43816: LD_INT 10
43818: PUSH
43819: LD_INT 6
43821: PUSH
43822: LD_INT 7
43824: PUSH
43825: LD_INT 11
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 27
43839: PUSH
43840: LD_INT 28
43842: PUSH
43843: LD_INT 26
43845: PUSH
43846: LD_INT 30
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 43
43857: PUSH
43858: LD_INT 44
43860: PUSH
43861: LD_INT 46
43863: PUSH
43864: LD_INT 45
43866: PUSH
43867: LD_INT 47
43869: PUSH
43870: LD_INT 49
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: LIST
43885: PUSH
43886: LD_VAR 0 12
43890: ARRAY
43891: ST_TO_ADDR
// list := list isect fac_list ;
43892: LD_ADDR_VAR 0 5
43896: PUSH
43897: LD_VAR 0 5
43901: PUSH
43902: LD_VAR 0 17
43906: ISECT
43907: ST_TO_ADDR
// if not list then
43908: LD_VAR 0 5
43912: NOT
43913: IFFALSE 43917
// exit ;
43915: GO 44745
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43917: LD_VAR 0 12
43921: PUSH
43922: LD_INT 3
43924: EQUAL
43925: IFFALSE 43937
43927: PUSH
43928: LD_INT 49
43930: PUSH
43931: LD_VAR 0 5
43935: IN
43936: AND
43937: IFFALSE 43957
43939: PUSH
43940: LD_INT 31
43942: PPUSH
43943: LD_VAR 0 16
43947: PPUSH
43948: CALL_OW 321
43952: PUSH
43953: LD_INT 2
43955: EQUAL
43956: AND
43957: IFFALSE 44017
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43959: LD_INT 22
43961: PUSH
43962: LD_VAR 0 16
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 35
43973: PUSH
43974: LD_INT 49
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 91
43983: PUSH
43984: LD_VAR 0 1
43988: PUSH
43989: LD_INT 10
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: LIST
44001: PPUSH
44002: CALL_OW 69
44006: NOT
44007: IFFALSE 44017
// weapon := ru_time_lapser ;
44009: LD_ADDR_VAR 0 18
44013: PUSH
44014: LD_INT 49
44016: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44017: LD_VAR 0 12
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 2
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: IN
44032: IFFALSE 44056
44034: PUSH
44035: LD_INT 11
44037: PUSH
44038: LD_VAR 0 5
44042: IN
44043: IFTRUE 44055
44045: PUSH
44046: LD_INT 30
44048: PUSH
44049: LD_VAR 0 5
44053: IN
44054: OR
44055: AND
44056: IFFALSE 44076
44058: PUSH
44059: LD_INT 6
44061: PPUSH
44062: LD_VAR 0 16
44066: PPUSH
44067: CALL_OW 321
44071: PUSH
44072: LD_INT 2
44074: EQUAL
44075: AND
44076: IFFALSE 44243
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44078: LD_INT 22
44080: PUSH
44081: LD_VAR 0 16
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: LD_INT 35
44095: PUSH
44096: LD_INT 11
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 35
44105: PUSH
44106: LD_INT 30
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 91
44120: PUSH
44121: LD_VAR 0 1
44125: PUSH
44126: LD_INT 18
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: LIST
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: PPUSH
44139: CALL_OW 69
44143: NOT
44144: IFFALSE 44220
44146: PUSH
44147: LD_INT 22
44149: PUSH
44150: LD_VAR 0 16
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: LD_INT 30
44164: PUSH
44165: LD_INT 32
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 30
44174: PUSH
44175: LD_INT 33
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 91
44189: PUSH
44190: LD_VAR 0 1
44194: PUSH
44195: LD_INT 12
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: LIST
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: LIST
44207: PUSH
44208: EMPTY
44209: LIST
44210: PPUSH
44211: CALL_OW 69
44215: PUSH
44216: LD_INT 2
44218: GREATER
44219: AND
44220: IFFALSE 44243
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44222: LD_ADDR_VAR 0 18
44226: PUSH
44227: LD_INT 11
44229: PUSH
44230: LD_INT 30
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_VAR 0 12
44241: ARRAY
44242: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44243: LD_VAR 0 18
44247: NOT
44248: IFFALSE 44268
44250: PUSH
44251: LD_INT 40
44253: PPUSH
44254: LD_VAR 0 16
44258: PPUSH
44259: CALL_OW 321
44263: PUSH
44264: LD_INT 2
44266: EQUAL
44267: AND
44268: IFFALSE 44304
44270: PUSH
44271: LD_INT 7
44273: PUSH
44274: LD_VAR 0 5
44278: IN
44279: IFTRUE 44291
44281: PUSH
44282: LD_INT 28
44284: PUSH
44285: LD_VAR 0 5
44289: IN
44290: OR
44291: IFTRUE 44303
44293: PUSH
44294: LD_INT 45
44296: PUSH
44297: LD_VAR 0 5
44301: IN
44302: OR
44303: AND
44304: IFFALSE 44558
// begin hex := GetHexInfo ( x , y ) ;
44306: LD_ADDR_VAR 0 4
44310: PUSH
44311: LD_VAR 0 10
44315: PPUSH
44316: LD_VAR 0 11
44320: PPUSH
44321: CALL_OW 546
44325: ST_TO_ADDR
// if hex [ 1 ] then
44326: LD_VAR 0 4
44330: PUSH
44331: LD_INT 1
44333: ARRAY
44334: IFFALSE 44338
// exit ;
44336: GO 44745
// height := hex [ 2 ] ;
44338: LD_ADDR_VAR 0 15
44342: PUSH
44343: LD_VAR 0 4
44347: PUSH
44348: LD_INT 2
44350: ARRAY
44351: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44352: LD_ADDR_VAR 0 14
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: LD_INT 3
44365: PUSH
44366: LD_INT 5
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: ST_TO_ADDR
// for i in tmp do
44375: LD_ADDR_VAR 0 8
44379: PUSH
44380: LD_VAR 0 14
44384: PUSH
44385: FOR_IN
44386: IFFALSE 44556
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44388: LD_ADDR_VAR 0 9
44392: PUSH
44393: LD_VAR 0 10
44397: PPUSH
44398: LD_VAR 0 8
44402: PPUSH
44403: LD_INT 5
44405: PPUSH
44406: CALL_OW 272
44410: PUSH
44411: LD_VAR 0 11
44415: PPUSH
44416: LD_VAR 0 8
44420: PPUSH
44421: LD_INT 5
44423: PPUSH
44424: CALL_OW 273
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44433: LD_VAR 0 9
44437: PUSH
44438: LD_INT 1
44440: ARRAY
44441: PPUSH
44442: LD_VAR 0 9
44446: PUSH
44447: LD_INT 2
44449: ARRAY
44450: PPUSH
44451: CALL_OW 488
44455: IFFALSE 44554
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44457: LD_ADDR_VAR 0 4
44461: PUSH
44462: LD_VAR 0 9
44466: PUSH
44467: LD_INT 1
44469: ARRAY
44470: PPUSH
44471: LD_VAR 0 9
44475: PUSH
44476: LD_INT 2
44478: ARRAY
44479: PPUSH
44480: CALL_OW 546
44484: ST_TO_ADDR
// if hex [ 1 ] then
44485: LD_VAR 0 4
44489: PUSH
44490: LD_INT 1
44492: ARRAY
44493: IFFALSE 44497
// continue ;
44495: GO 44385
// h := hex [ 2 ] ;
44497: LD_ADDR_VAR 0 13
44501: PUSH
44502: LD_VAR 0 4
44506: PUSH
44507: LD_INT 2
44509: ARRAY
44510: ST_TO_ADDR
// if h + 7 < height then
44511: LD_VAR 0 13
44515: PUSH
44516: LD_INT 7
44518: PLUS
44519: PUSH
44520: LD_VAR 0 15
44524: LESS
44525: IFFALSE 44554
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44527: LD_ADDR_VAR 0 18
44531: PUSH
44532: LD_INT 7
44534: PUSH
44535: LD_INT 28
44537: PUSH
44538: LD_INT 45
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: LIST
44545: PUSH
44546: LD_VAR 0 12
44550: ARRAY
44551: ST_TO_ADDR
// break ;
44552: GO 44556
// end ; end ; end ;
44554: GO 44385
44556: POP
44557: POP
// end ; if not weapon then
44558: LD_VAR 0 18
44562: NOT
44563: IFFALSE 44623
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44565: LD_ADDR_VAR 0 5
44569: PUSH
44570: LD_VAR 0 5
44574: PUSH
44575: LD_INT 11
44577: PUSH
44578: LD_INT 30
44580: PUSH
44581: LD_INT 49
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: LIST
44588: DIFF
44589: ST_TO_ADDR
// if not list then
44590: LD_VAR 0 5
44594: NOT
44595: IFFALSE 44599
// exit ;
44597: GO 44745
// weapon := list [ rand ( 1 , list ) ] ;
44599: LD_ADDR_VAR 0 18
44603: PUSH
44604: LD_VAR 0 5
44608: PUSH
44609: LD_INT 1
44611: PPUSH
44612: LD_VAR 0 5
44616: PPUSH
44617: CALL_OW 12
44621: ARRAY
44622: ST_TO_ADDR
// end ; if weapon then
44623: LD_VAR 0 18
44627: IFFALSE 44745
// begin tmp := CostOfWeapon ( weapon ) ;
44629: LD_ADDR_VAR 0 14
44633: PUSH
44634: LD_VAR 0 18
44638: PPUSH
44639: CALL_OW 451
44643: ST_TO_ADDR
// j := GetBase ( tower ) ;
44644: LD_ADDR_VAR 0 9
44648: PUSH
44649: LD_VAR 0 1
44653: PPUSH
44654: CALL_OW 274
44658: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44659: LD_VAR 0 9
44663: PPUSH
44664: LD_INT 1
44666: PPUSH
44667: CALL_OW 275
44671: PUSH
44672: LD_VAR 0 14
44676: PUSH
44677: LD_INT 1
44679: ARRAY
44680: GREATEREQUAL
44681: IFFALSE 44707
44683: PUSH
44684: LD_VAR 0 9
44688: PPUSH
44689: LD_INT 2
44691: PPUSH
44692: CALL_OW 275
44696: PUSH
44697: LD_VAR 0 14
44701: PUSH
44702: LD_INT 2
44704: ARRAY
44705: GREATEREQUAL
44706: AND
44707: IFFALSE 44733
44709: PUSH
44710: LD_VAR 0 9
44714: PPUSH
44715: LD_INT 3
44717: PPUSH
44718: CALL_OW 275
44722: PUSH
44723: LD_VAR 0 14
44727: PUSH
44728: LD_INT 3
44730: ARRAY
44731: GREATEREQUAL
44732: AND
44733: IFFALSE 44745
// result := weapon ;
44735: LD_ADDR_VAR 0 3
44739: PUSH
44740: LD_VAR 0 18
44744: ST_TO_ADDR
// end ; end ;
44745: LD_VAR 0 3
44749: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44750: LD_INT 0
44752: PPUSH
44753: PPUSH
// result := true ;
44754: LD_ADDR_VAR 0 3
44758: PUSH
44759: LD_INT 1
44761: ST_TO_ADDR
// if array1 = array2 then
44762: LD_VAR 0 1
44766: PUSH
44767: LD_VAR 0 2
44771: EQUAL
44772: IFFALSE 44832
// begin for i = 1 to array1 do
44774: LD_ADDR_VAR 0 4
44778: PUSH
44779: DOUBLE
44780: LD_INT 1
44782: DEC
44783: ST_TO_ADDR
44784: LD_VAR 0 1
44788: PUSH
44789: FOR_TO
44790: IFFALSE 44828
// if array1 [ i ] <> array2 [ i ] then
44792: LD_VAR 0 1
44796: PUSH
44797: LD_VAR 0 4
44801: ARRAY
44802: PUSH
44803: LD_VAR 0 2
44807: PUSH
44808: LD_VAR 0 4
44812: ARRAY
44813: NONEQUAL
44814: IFFALSE 44826
// begin result := false ;
44816: LD_ADDR_VAR 0 3
44820: PUSH
44821: LD_INT 0
44823: ST_TO_ADDR
// break ;
44824: GO 44828
// end ;
44826: GO 44789
44828: POP
44829: POP
// end else
44830: GO 44840
// result := false ;
44832: LD_ADDR_VAR 0 3
44836: PUSH
44837: LD_INT 0
44839: ST_TO_ADDR
// end ;
44840: LD_VAR 0 3
44844: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44845: LD_INT 0
44847: PPUSH
44848: PPUSH
// if not array1 or not array2 then
44849: LD_VAR 0 1
44853: NOT
44854: IFTRUE 44863
44856: PUSH
44857: LD_VAR 0 2
44861: NOT
44862: OR
44863: IFFALSE 44867
// exit ;
44865: GO 44931
// result := true ;
44867: LD_ADDR_VAR 0 3
44871: PUSH
44872: LD_INT 1
44874: ST_TO_ADDR
// for i = 1 to array1 do
44875: LD_ADDR_VAR 0 4
44879: PUSH
44880: DOUBLE
44881: LD_INT 1
44883: DEC
44884: ST_TO_ADDR
44885: LD_VAR 0 1
44889: PUSH
44890: FOR_TO
44891: IFFALSE 44929
// if array1 [ i ] <> array2 [ i ] then
44893: LD_VAR 0 1
44897: PUSH
44898: LD_VAR 0 4
44902: ARRAY
44903: PUSH
44904: LD_VAR 0 2
44908: PUSH
44909: LD_VAR 0 4
44913: ARRAY
44914: NONEQUAL
44915: IFFALSE 44927
// begin result := false ;
44917: LD_ADDR_VAR 0 3
44921: PUSH
44922: LD_INT 0
44924: ST_TO_ADDR
// break ;
44925: GO 44929
// end ;
44927: GO 44890
44929: POP
44930: POP
// end ;
44931: LD_VAR 0 3
44935: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44936: LD_INT 0
44938: PPUSH
44939: PPUSH
44940: PPUSH
// pom := GetBase ( fac ) ;
44941: LD_ADDR_VAR 0 5
44945: PUSH
44946: LD_VAR 0 1
44950: PPUSH
44951: CALL_OW 274
44955: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44956: LD_ADDR_VAR 0 4
44960: PUSH
44961: LD_VAR 0 2
44965: PUSH
44966: LD_INT 1
44968: ARRAY
44969: PPUSH
44970: LD_VAR 0 2
44974: PUSH
44975: LD_INT 2
44977: ARRAY
44978: PPUSH
44979: LD_VAR 0 2
44983: PUSH
44984: LD_INT 3
44986: ARRAY
44987: PPUSH
44988: LD_VAR 0 2
44992: PUSH
44993: LD_INT 4
44995: ARRAY
44996: PPUSH
44997: CALL_OW 449
45001: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45002: LD_ADDR_VAR 0 3
45006: PUSH
45007: LD_VAR 0 5
45011: PPUSH
45012: LD_INT 1
45014: PPUSH
45015: CALL_OW 275
45019: PUSH
45020: LD_VAR 0 4
45024: PUSH
45025: LD_INT 1
45027: ARRAY
45028: GREATEREQUAL
45029: IFFALSE 45055
45031: PUSH
45032: LD_VAR 0 5
45036: PPUSH
45037: LD_INT 2
45039: PPUSH
45040: CALL_OW 275
45044: PUSH
45045: LD_VAR 0 4
45049: PUSH
45050: LD_INT 2
45052: ARRAY
45053: GREATEREQUAL
45054: AND
45055: IFFALSE 45081
45057: PUSH
45058: LD_VAR 0 5
45062: PPUSH
45063: LD_INT 3
45065: PPUSH
45066: CALL_OW 275
45070: PUSH
45071: LD_VAR 0 4
45075: PUSH
45076: LD_INT 3
45078: ARRAY
45079: GREATEREQUAL
45080: AND
45081: ST_TO_ADDR
// end ;
45082: LD_VAR 0 3
45086: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45087: LD_INT 0
45089: PPUSH
45090: PPUSH
45091: PPUSH
45092: PPUSH
// pom := GetBase ( building ) ;
45093: LD_ADDR_VAR 0 3
45097: PUSH
45098: LD_VAR 0 1
45102: PPUSH
45103: CALL_OW 274
45107: ST_TO_ADDR
// if not pom then
45108: LD_VAR 0 3
45112: NOT
45113: IFFALSE 45117
// exit ;
45115: GO 45291
// btype := GetBType ( building ) ;
45117: LD_ADDR_VAR 0 5
45121: PUSH
45122: LD_VAR 0 1
45126: PPUSH
45127: CALL_OW 266
45131: ST_TO_ADDR
// if btype = b_armoury then
45132: LD_VAR 0 5
45136: PUSH
45137: LD_INT 4
45139: EQUAL
45140: IFFALSE 45150
// btype := b_barracks ;
45142: LD_ADDR_VAR 0 5
45146: PUSH
45147: LD_INT 5
45149: ST_TO_ADDR
// if btype = b_depot then
45150: LD_VAR 0 5
45154: PUSH
45155: LD_INT 0
45157: EQUAL
45158: IFFALSE 45168
// btype := b_warehouse ;
45160: LD_ADDR_VAR 0 5
45164: PUSH
45165: LD_INT 1
45167: ST_TO_ADDR
// if btype = b_workshop then
45168: LD_VAR 0 5
45172: PUSH
45173: LD_INT 2
45175: EQUAL
45176: IFFALSE 45186
// btype := b_factory ;
45178: LD_ADDR_VAR 0 5
45182: PUSH
45183: LD_INT 3
45185: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45186: LD_ADDR_VAR 0 4
45190: PUSH
45191: LD_VAR 0 5
45195: PPUSH
45196: LD_VAR 0 1
45200: PPUSH
45201: CALL_OW 248
45205: PPUSH
45206: CALL_OW 450
45210: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45211: LD_ADDR_VAR 0 2
45215: PUSH
45216: LD_VAR 0 3
45220: PPUSH
45221: LD_INT 1
45223: PPUSH
45224: CALL_OW 275
45228: PUSH
45229: LD_VAR 0 4
45233: PUSH
45234: LD_INT 1
45236: ARRAY
45237: GREATEREQUAL
45238: IFFALSE 45264
45240: PUSH
45241: LD_VAR 0 3
45245: PPUSH
45246: LD_INT 2
45248: PPUSH
45249: CALL_OW 275
45253: PUSH
45254: LD_VAR 0 4
45258: PUSH
45259: LD_INT 2
45261: ARRAY
45262: GREATEREQUAL
45263: AND
45264: IFFALSE 45290
45266: PUSH
45267: LD_VAR 0 3
45271: PPUSH
45272: LD_INT 3
45274: PPUSH
45275: CALL_OW 275
45279: PUSH
45280: LD_VAR 0 4
45284: PUSH
45285: LD_INT 3
45287: ARRAY
45288: GREATEREQUAL
45289: AND
45290: ST_TO_ADDR
// end ;
45291: LD_VAR 0 2
45295: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45296: LD_INT 0
45298: PPUSH
45299: PPUSH
45300: PPUSH
// pom := GetBase ( building ) ;
45301: LD_ADDR_VAR 0 4
45305: PUSH
45306: LD_VAR 0 1
45310: PPUSH
45311: CALL_OW 274
45315: ST_TO_ADDR
// if not pom then
45316: LD_VAR 0 4
45320: NOT
45321: IFFALSE 45325
// exit ;
45323: GO 45430
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45325: LD_ADDR_VAR 0 5
45329: PUSH
45330: LD_VAR 0 2
45334: PPUSH
45335: LD_VAR 0 1
45339: PPUSH
45340: CALL_OW 248
45344: PPUSH
45345: CALL_OW 450
45349: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45350: LD_ADDR_VAR 0 3
45354: PUSH
45355: LD_VAR 0 4
45359: PPUSH
45360: LD_INT 1
45362: PPUSH
45363: CALL_OW 275
45367: PUSH
45368: LD_VAR 0 5
45372: PUSH
45373: LD_INT 1
45375: ARRAY
45376: GREATEREQUAL
45377: IFFALSE 45403
45379: PUSH
45380: LD_VAR 0 4
45384: PPUSH
45385: LD_INT 2
45387: PPUSH
45388: CALL_OW 275
45392: PUSH
45393: LD_VAR 0 5
45397: PUSH
45398: LD_INT 2
45400: ARRAY
45401: GREATEREQUAL
45402: AND
45403: IFFALSE 45429
45405: PUSH
45406: LD_VAR 0 4
45410: PPUSH
45411: LD_INT 3
45413: PPUSH
45414: CALL_OW 275
45418: PUSH
45419: LD_VAR 0 5
45423: PUSH
45424: LD_INT 3
45426: ARRAY
45427: GREATEREQUAL
45428: AND
45429: ST_TO_ADDR
// end ;
45430: LD_VAR 0 3
45434: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45435: LD_INT 0
45437: PPUSH
45438: PPUSH
45439: PPUSH
45440: PPUSH
45441: PPUSH
45442: PPUSH
45443: PPUSH
45444: PPUSH
45445: PPUSH
45446: PPUSH
45447: PPUSH
// result := false ;
45448: LD_ADDR_VAR 0 8
45452: PUSH
45453: LD_INT 0
45455: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45456: LD_VAR 0 5
45460: NOT
45461: IFTRUE 45470
45463: PUSH
45464: LD_VAR 0 1
45468: NOT
45469: OR
45470: IFTRUE 45479
45472: PUSH
45473: LD_VAR 0 2
45477: NOT
45478: OR
45479: IFTRUE 45488
45481: PUSH
45482: LD_VAR 0 3
45486: NOT
45487: OR
45488: IFFALSE 45492
// exit ;
45490: GO 46318
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45492: LD_ADDR_VAR 0 14
45496: PUSH
45497: LD_VAR 0 1
45501: PPUSH
45502: LD_VAR 0 2
45506: PPUSH
45507: LD_VAR 0 3
45511: PPUSH
45512: LD_VAR 0 4
45516: PPUSH
45517: LD_VAR 0 5
45521: PUSH
45522: LD_INT 1
45524: ARRAY
45525: PPUSH
45526: CALL_OW 248
45530: PPUSH
45531: LD_INT 0
45533: PPUSH
45534: CALL 47599 0 6
45538: ST_TO_ADDR
// if not hexes then
45539: LD_VAR 0 14
45543: NOT
45544: IFFALSE 45548
// exit ;
45546: GO 46318
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45548: LD_ADDR_VAR 0 17
45552: PUSH
45553: LD_VAR 0 5
45557: PPUSH
45558: LD_INT 22
45560: PUSH
45561: LD_VAR 0 13
45565: PPUSH
45566: CALL_OW 255
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: LD_INT 30
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 30
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: LIST
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PPUSH
45607: CALL_OW 72
45611: ST_TO_ADDR
// for i = 1 to hexes do
45612: LD_ADDR_VAR 0 9
45616: PUSH
45617: DOUBLE
45618: LD_INT 1
45620: DEC
45621: ST_TO_ADDR
45622: LD_VAR 0 14
45626: PUSH
45627: FOR_TO
45628: IFFALSE 46316
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45630: LD_ADDR_VAR 0 13
45634: PUSH
45635: LD_VAR 0 14
45639: PUSH
45640: LD_VAR 0 9
45644: ARRAY
45645: PUSH
45646: LD_INT 1
45648: ARRAY
45649: PPUSH
45650: LD_VAR 0 14
45654: PUSH
45655: LD_VAR 0 9
45659: ARRAY
45660: PUSH
45661: LD_INT 2
45663: ARRAY
45664: PPUSH
45665: CALL_OW 428
45669: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45670: LD_VAR 0 14
45674: PUSH
45675: LD_VAR 0 9
45679: ARRAY
45680: PUSH
45681: LD_INT 1
45683: ARRAY
45684: PPUSH
45685: LD_VAR 0 14
45689: PUSH
45690: LD_VAR 0 9
45694: ARRAY
45695: PUSH
45696: LD_INT 2
45698: ARRAY
45699: PPUSH
45700: CALL_OW 351
45704: IFTRUE 45743
45706: PUSH
45707: LD_VAR 0 14
45711: PUSH
45712: LD_VAR 0 9
45716: ARRAY
45717: PUSH
45718: LD_INT 1
45720: ARRAY
45721: PPUSH
45722: LD_VAR 0 14
45726: PUSH
45727: LD_VAR 0 9
45731: ARRAY
45732: PUSH
45733: LD_INT 2
45735: ARRAY
45736: PPUSH
45737: CALL_OW 488
45741: NOT
45742: OR
45743: IFTRUE 45760
45745: PUSH
45746: LD_VAR 0 13
45750: PPUSH
45751: CALL_OW 247
45755: PUSH
45756: LD_INT 3
45758: EQUAL
45759: OR
45760: IFFALSE 45766
// exit ;
45762: POP
45763: POP
45764: GO 46318
// if not tmp then
45766: LD_VAR 0 13
45770: NOT
45771: IFFALSE 45775
// continue ;
45773: GO 45627
// result := true ;
45775: LD_ADDR_VAR 0 8
45779: PUSH
45780: LD_INT 1
45782: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45783: LD_VAR 0 6
45787: IFFALSE 45804
45789: PUSH
45790: LD_VAR 0 13
45794: PPUSH
45795: CALL_OW 247
45799: PUSH
45800: LD_INT 2
45802: EQUAL
45803: AND
45804: IFFALSE 45821
45806: PUSH
45807: LD_VAR 0 13
45811: PPUSH
45812: CALL_OW 263
45816: PUSH
45817: LD_INT 1
45819: EQUAL
45820: AND
45821: IFFALSE 45985
// begin if IsDrivenBy ( tmp ) then
45823: LD_VAR 0 13
45827: PPUSH
45828: CALL_OW 311
45832: IFFALSE 45836
// continue ;
45834: GO 45627
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45836: LD_VAR 0 6
45840: PPUSH
45841: LD_INT 3
45843: PUSH
45844: LD_INT 60
45846: PUSH
45847: EMPTY
45848: LIST
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 3
45856: PUSH
45857: LD_INT 55
45859: PUSH
45860: EMPTY
45861: LIST
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PPUSH
45871: CALL_OW 72
45875: IFFALSE 45983
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45877: LD_ADDR_VAR 0 18
45881: PUSH
45882: LD_VAR 0 6
45886: PPUSH
45887: LD_INT 3
45889: PUSH
45890: LD_INT 60
45892: PUSH
45893: EMPTY
45894: LIST
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 3
45902: PUSH
45903: LD_INT 55
45905: PUSH
45906: EMPTY
45907: LIST
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PPUSH
45917: CALL_OW 72
45921: PUSH
45922: LD_INT 1
45924: ARRAY
45925: ST_TO_ADDR
// if IsInUnit ( driver ) then
45926: LD_VAR 0 18
45930: PPUSH
45931: CALL_OW 310
45935: IFFALSE 45946
// ComExit ( driver ) ;
45937: LD_VAR 0 18
45941: PPUSH
45942: CALL 71589 0 1
// AddComEnterUnit ( driver , tmp ) ;
45946: LD_VAR 0 18
45950: PPUSH
45951: LD_VAR 0 13
45955: PPUSH
45956: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45960: LD_VAR 0 18
45964: PPUSH
45965: LD_VAR 0 7
45969: PPUSH
45970: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45974: LD_VAR 0 18
45978: PPUSH
45979: CALL_OW 181
// end ; continue ;
45983: GO 45627
// end ; if not cleaners or not tmp in cleaners then
45985: LD_VAR 0 6
45989: NOT
45990: IFTRUE 46005
45992: PUSH
45993: LD_VAR 0 13
45997: PUSH
45998: LD_VAR 0 6
46002: IN
46003: NOT
46004: OR
46005: IFFALSE 46314
// begin if dep then
46007: LD_VAR 0 17
46011: IFFALSE 46147
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46013: LD_ADDR_VAR 0 16
46017: PUSH
46018: LD_VAR 0 17
46022: PUSH
46023: LD_INT 1
46025: ARRAY
46026: PPUSH
46027: CALL_OW 250
46031: PPUSH
46032: LD_VAR 0 17
46036: PUSH
46037: LD_INT 1
46039: ARRAY
46040: PPUSH
46041: CALL_OW 254
46045: PPUSH
46046: LD_INT 5
46048: PPUSH
46049: CALL_OW 272
46053: PUSH
46054: LD_VAR 0 17
46058: PUSH
46059: LD_INT 1
46061: ARRAY
46062: PPUSH
46063: CALL_OW 251
46067: PPUSH
46068: LD_VAR 0 17
46072: PUSH
46073: LD_INT 1
46075: ARRAY
46076: PPUSH
46077: CALL_OW 254
46081: PPUSH
46082: LD_INT 5
46084: PPUSH
46085: CALL_OW 273
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46094: LD_VAR 0 16
46098: PUSH
46099: LD_INT 1
46101: ARRAY
46102: PPUSH
46103: LD_VAR 0 16
46107: PUSH
46108: LD_INT 2
46110: ARRAY
46111: PPUSH
46112: CALL_OW 488
46116: IFFALSE 46147
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46118: LD_VAR 0 13
46122: PPUSH
46123: LD_VAR 0 16
46127: PUSH
46128: LD_INT 1
46130: ARRAY
46131: PPUSH
46132: LD_VAR 0 16
46136: PUSH
46137: LD_INT 2
46139: ARRAY
46140: PPUSH
46141: CALL_OW 111
// continue ;
46145: GO 45627
// end ; end ; r := GetDir ( tmp ) ;
46147: LD_ADDR_VAR 0 15
46151: PUSH
46152: LD_VAR 0 13
46156: PPUSH
46157: CALL_OW 254
46161: ST_TO_ADDR
// if r = 5 then
46162: LD_VAR 0 15
46166: PUSH
46167: LD_INT 5
46169: EQUAL
46170: IFFALSE 46180
// r := 0 ;
46172: LD_ADDR_VAR 0 15
46176: PUSH
46177: LD_INT 0
46179: ST_TO_ADDR
// for j = r to 5 do
46180: LD_ADDR_VAR 0 10
46184: PUSH
46185: DOUBLE
46186: LD_VAR 0 15
46190: DEC
46191: ST_TO_ADDR
46192: LD_INT 5
46194: PUSH
46195: FOR_TO
46196: IFFALSE 46312
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46198: LD_ADDR_VAR 0 11
46202: PUSH
46203: LD_VAR 0 13
46207: PPUSH
46208: CALL_OW 250
46212: PPUSH
46213: LD_VAR 0 10
46217: PPUSH
46218: LD_INT 2
46220: PPUSH
46221: CALL_OW 272
46225: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46226: LD_ADDR_VAR 0 12
46230: PUSH
46231: LD_VAR 0 13
46235: PPUSH
46236: CALL_OW 251
46240: PPUSH
46241: LD_VAR 0 10
46245: PPUSH
46246: LD_INT 2
46248: PPUSH
46249: CALL_OW 273
46253: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46254: LD_VAR 0 11
46258: PPUSH
46259: LD_VAR 0 12
46263: PPUSH
46264: CALL_OW 488
46268: IFFALSE 46287
46270: PUSH
46271: LD_VAR 0 11
46275: PPUSH
46276: LD_VAR 0 12
46280: PPUSH
46281: CALL_OW 428
46285: NOT
46286: AND
46287: IFFALSE 46310
// begin ComMoveXY ( tmp , _x , _y ) ;
46289: LD_VAR 0 13
46293: PPUSH
46294: LD_VAR 0 11
46298: PPUSH
46299: LD_VAR 0 12
46303: PPUSH
46304: CALL_OW 111
// break ;
46308: GO 46312
// end ; end ;
46310: GO 46195
46312: POP
46313: POP
// end ; end ;
46314: GO 45627
46316: POP
46317: POP
// end ;
46318: LD_VAR 0 8
46322: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46323: LD_INT 0
46325: PPUSH
// result := true ;
46326: LD_ADDR_VAR 0 3
46330: PUSH
46331: LD_INT 1
46333: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46334: LD_VAR 0 2
46338: PUSH
46339: LD_INT 24
46341: DOUBLE
46342: EQUAL
46343: IFTRUE 46353
46345: LD_INT 33
46347: DOUBLE
46348: EQUAL
46349: IFTRUE 46353
46351: GO 46378
46353: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46354: LD_ADDR_VAR 0 3
46358: PUSH
46359: LD_INT 32
46361: PPUSH
46362: LD_VAR 0 1
46366: PPUSH
46367: CALL_OW 321
46371: PUSH
46372: LD_INT 2
46374: EQUAL
46375: ST_TO_ADDR
46376: GO 46694
46378: LD_INT 20
46380: DOUBLE
46381: EQUAL
46382: IFTRUE 46386
46384: GO 46411
46386: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46387: LD_ADDR_VAR 0 3
46391: PUSH
46392: LD_INT 6
46394: PPUSH
46395: LD_VAR 0 1
46399: PPUSH
46400: CALL_OW 321
46404: PUSH
46405: LD_INT 2
46407: EQUAL
46408: ST_TO_ADDR
46409: GO 46694
46411: LD_INT 22
46413: DOUBLE
46414: EQUAL
46415: IFTRUE 46425
46417: LD_INT 36
46419: DOUBLE
46420: EQUAL
46421: IFTRUE 46425
46423: GO 46450
46425: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46426: LD_ADDR_VAR 0 3
46430: PUSH
46431: LD_INT 15
46433: PPUSH
46434: LD_VAR 0 1
46438: PPUSH
46439: CALL_OW 321
46443: PUSH
46444: LD_INT 2
46446: EQUAL
46447: ST_TO_ADDR
46448: GO 46694
46450: LD_INT 30
46452: DOUBLE
46453: EQUAL
46454: IFTRUE 46458
46456: GO 46483
46458: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46459: LD_ADDR_VAR 0 3
46463: PUSH
46464: LD_INT 20
46466: PPUSH
46467: LD_VAR 0 1
46471: PPUSH
46472: CALL_OW 321
46476: PUSH
46477: LD_INT 2
46479: EQUAL
46480: ST_TO_ADDR
46481: GO 46694
46483: LD_INT 28
46485: DOUBLE
46486: EQUAL
46487: IFTRUE 46497
46489: LD_INT 21
46491: DOUBLE
46492: EQUAL
46493: IFTRUE 46497
46495: GO 46522
46497: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46498: LD_ADDR_VAR 0 3
46502: PUSH
46503: LD_INT 21
46505: PPUSH
46506: LD_VAR 0 1
46510: PPUSH
46511: CALL_OW 321
46515: PUSH
46516: LD_INT 2
46518: EQUAL
46519: ST_TO_ADDR
46520: GO 46694
46522: LD_INT 16
46524: DOUBLE
46525: EQUAL
46526: IFTRUE 46530
46528: GO 46555
46530: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46531: LD_ADDR_VAR 0 3
46535: PUSH
46536: LD_INT 84
46538: PPUSH
46539: LD_VAR 0 1
46543: PPUSH
46544: CALL_OW 321
46548: PUSH
46549: LD_INT 2
46551: EQUAL
46552: ST_TO_ADDR
46553: GO 46694
46555: LD_INT 19
46557: DOUBLE
46558: EQUAL
46559: IFTRUE 46569
46561: LD_INT 23
46563: DOUBLE
46564: EQUAL
46565: IFTRUE 46569
46567: GO 46594
46569: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46570: LD_ADDR_VAR 0 3
46574: PUSH
46575: LD_INT 83
46577: PPUSH
46578: LD_VAR 0 1
46582: PPUSH
46583: CALL_OW 321
46587: PUSH
46588: LD_INT 2
46590: EQUAL
46591: ST_TO_ADDR
46592: GO 46694
46594: LD_INT 17
46596: DOUBLE
46597: EQUAL
46598: IFTRUE 46602
46600: GO 46627
46602: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46603: LD_ADDR_VAR 0 3
46607: PUSH
46608: LD_INT 39
46610: PPUSH
46611: LD_VAR 0 1
46615: PPUSH
46616: CALL_OW 321
46620: PUSH
46621: LD_INT 2
46623: EQUAL
46624: ST_TO_ADDR
46625: GO 46694
46627: LD_INT 18
46629: DOUBLE
46630: EQUAL
46631: IFTRUE 46635
46633: GO 46660
46635: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46636: LD_ADDR_VAR 0 3
46640: PUSH
46641: LD_INT 40
46643: PPUSH
46644: LD_VAR 0 1
46648: PPUSH
46649: CALL_OW 321
46653: PUSH
46654: LD_INT 2
46656: EQUAL
46657: ST_TO_ADDR
46658: GO 46694
46660: LD_INT 27
46662: DOUBLE
46663: EQUAL
46664: IFTRUE 46668
46666: GO 46693
46668: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46669: LD_ADDR_VAR 0 3
46673: PUSH
46674: LD_INT 35
46676: PPUSH
46677: LD_VAR 0 1
46681: PPUSH
46682: CALL_OW 321
46686: PUSH
46687: LD_INT 2
46689: EQUAL
46690: ST_TO_ADDR
46691: GO 46694
46693: POP
// end ;
46694: LD_VAR 0 3
46698: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46699: LD_INT 0
46701: PPUSH
46702: PPUSH
46703: PPUSH
46704: PPUSH
46705: PPUSH
46706: PPUSH
46707: PPUSH
46708: PPUSH
46709: PPUSH
46710: PPUSH
46711: PPUSH
// result := false ;
46712: LD_ADDR_VAR 0 6
46716: PUSH
46717: LD_INT 0
46719: ST_TO_ADDR
// if btype = b_depot then
46720: LD_VAR 0 2
46724: PUSH
46725: LD_INT 0
46727: EQUAL
46728: IFFALSE 46740
// begin result := true ;
46730: LD_ADDR_VAR 0 6
46734: PUSH
46735: LD_INT 1
46737: ST_TO_ADDR
// exit ;
46738: GO 47594
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46740: LD_VAR 0 1
46744: NOT
46745: IFTRUE 46770
46747: PUSH
46748: LD_VAR 0 1
46752: PPUSH
46753: CALL_OW 266
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: IN
46768: NOT
46769: OR
46770: IFTRUE 46779
46772: PUSH
46773: LD_VAR 0 2
46777: NOT
46778: OR
46779: IFTRUE 46815
46781: PUSH
46782: LD_VAR 0 5
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: LD_INT 3
46798: PUSH
46799: LD_INT 4
46801: PUSH
46802: LD_INT 5
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: IN
46813: NOT
46814: OR
46815: IFTRUE 46834
46817: PUSH
46818: LD_VAR 0 3
46822: PPUSH
46823: LD_VAR 0 4
46827: PPUSH
46828: CALL_OW 488
46832: NOT
46833: OR
46834: IFFALSE 46838
// exit ;
46836: GO 47594
// side := GetSide ( depot ) ;
46838: LD_ADDR_VAR 0 9
46842: PUSH
46843: LD_VAR 0 1
46847: PPUSH
46848: CALL_OW 255
46852: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46853: LD_VAR 0 9
46857: PPUSH
46858: LD_VAR 0 2
46862: PPUSH
46863: CALL 46323 0 2
46867: NOT
46868: IFFALSE 46872
// exit ;
46870: GO 47594
// pom := GetBase ( depot ) ;
46872: LD_ADDR_VAR 0 10
46876: PUSH
46877: LD_VAR 0 1
46881: PPUSH
46882: CALL_OW 274
46886: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46887: LD_ADDR_VAR 0 11
46891: PUSH
46892: LD_VAR 0 2
46896: PPUSH
46897: LD_VAR 0 1
46901: PPUSH
46902: CALL_OW 248
46906: PPUSH
46907: CALL_OW 450
46911: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46912: LD_VAR 0 10
46916: PPUSH
46917: LD_INT 1
46919: PPUSH
46920: CALL_OW 275
46924: PUSH
46925: LD_VAR 0 11
46929: PUSH
46930: LD_INT 1
46932: ARRAY
46933: GREATEREQUAL
46934: IFFALSE 46960
46936: PUSH
46937: LD_VAR 0 10
46941: PPUSH
46942: LD_INT 2
46944: PPUSH
46945: CALL_OW 275
46949: PUSH
46950: LD_VAR 0 11
46954: PUSH
46955: LD_INT 2
46957: ARRAY
46958: GREATEREQUAL
46959: AND
46960: IFFALSE 46986
46962: PUSH
46963: LD_VAR 0 10
46967: PPUSH
46968: LD_INT 3
46970: PPUSH
46971: CALL_OW 275
46975: PUSH
46976: LD_VAR 0 11
46980: PUSH
46981: LD_INT 3
46983: ARRAY
46984: GREATEREQUAL
46985: AND
46986: NOT
46987: IFFALSE 46991
// exit ;
46989: GO 47594
// if GetBType ( depot ) = b_depot then
46991: LD_VAR 0 1
46995: PPUSH
46996: CALL_OW 266
47000: PUSH
47001: LD_INT 0
47003: EQUAL
47004: IFFALSE 47016
// dist := 28 else
47006: LD_ADDR_VAR 0 14
47010: PUSH
47011: LD_INT 28
47013: ST_TO_ADDR
47014: GO 47024
// dist := 36 ;
47016: LD_ADDR_VAR 0 14
47020: PUSH
47021: LD_INT 36
47023: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47024: LD_VAR 0 1
47028: PPUSH
47029: LD_VAR 0 3
47033: PPUSH
47034: LD_VAR 0 4
47038: PPUSH
47039: CALL_OW 297
47043: PUSH
47044: LD_VAR 0 14
47048: GREATER
47049: IFFALSE 47053
// exit ;
47051: GO 47594
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47053: LD_ADDR_VAR 0 12
47057: PUSH
47058: LD_VAR 0 2
47062: PPUSH
47063: LD_VAR 0 3
47067: PPUSH
47068: LD_VAR 0 4
47072: PPUSH
47073: LD_VAR 0 5
47077: PPUSH
47078: LD_VAR 0 1
47082: PPUSH
47083: CALL_OW 248
47087: PPUSH
47088: LD_INT 0
47090: PPUSH
47091: CALL 47599 0 6
47095: ST_TO_ADDR
// if not hexes then
47096: LD_VAR 0 12
47100: NOT
47101: IFFALSE 47105
// exit ;
47103: GO 47594
// hex := GetHexInfo ( x , y ) ;
47105: LD_ADDR_VAR 0 15
47109: PUSH
47110: LD_VAR 0 3
47114: PPUSH
47115: LD_VAR 0 4
47119: PPUSH
47120: CALL_OW 546
47124: ST_TO_ADDR
// if hex [ 1 ] then
47125: LD_VAR 0 15
47129: PUSH
47130: LD_INT 1
47132: ARRAY
47133: IFFALSE 47137
// exit ;
47135: GO 47594
// height := hex [ 2 ] ;
47137: LD_ADDR_VAR 0 13
47141: PUSH
47142: LD_VAR 0 15
47146: PUSH
47147: LD_INT 2
47149: ARRAY
47150: ST_TO_ADDR
// for i = 1 to hexes do
47151: LD_ADDR_VAR 0 7
47155: PUSH
47156: DOUBLE
47157: LD_INT 1
47159: DEC
47160: ST_TO_ADDR
47161: LD_VAR 0 12
47165: PUSH
47166: FOR_TO
47167: IFFALSE 47511
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47169: LD_VAR 0 12
47173: PUSH
47174: LD_VAR 0 7
47178: ARRAY
47179: PUSH
47180: LD_INT 1
47182: ARRAY
47183: PPUSH
47184: LD_VAR 0 12
47188: PUSH
47189: LD_VAR 0 7
47193: ARRAY
47194: PUSH
47195: LD_INT 2
47197: ARRAY
47198: PPUSH
47199: CALL_OW 488
47203: NOT
47204: IFTRUE 47246
47206: PUSH
47207: LD_VAR 0 12
47211: PUSH
47212: LD_VAR 0 7
47216: ARRAY
47217: PUSH
47218: LD_INT 1
47220: ARRAY
47221: PPUSH
47222: LD_VAR 0 12
47226: PUSH
47227: LD_VAR 0 7
47231: ARRAY
47232: PUSH
47233: LD_INT 2
47235: ARRAY
47236: PPUSH
47237: CALL_OW 428
47241: PUSH
47242: LD_INT 0
47244: GREATER
47245: OR
47246: IFTRUE 47284
47248: PUSH
47249: LD_VAR 0 12
47253: PUSH
47254: LD_VAR 0 7
47258: ARRAY
47259: PUSH
47260: LD_INT 1
47262: ARRAY
47263: PPUSH
47264: LD_VAR 0 12
47268: PUSH
47269: LD_VAR 0 7
47273: ARRAY
47274: PUSH
47275: LD_INT 2
47277: ARRAY
47278: PPUSH
47279: CALL_OW 351
47283: OR
47284: IFFALSE 47290
// exit ;
47286: POP
47287: POP
47288: GO 47594
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47290: LD_ADDR_VAR 0 8
47294: PUSH
47295: LD_VAR 0 12
47299: PUSH
47300: LD_VAR 0 7
47304: ARRAY
47305: PUSH
47306: LD_INT 1
47308: ARRAY
47309: PPUSH
47310: LD_VAR 0 12
47314: PUSH
47315: LD_VAR 0 7
47319: ARRAY
47320: PUSH
47321: LD_INT 2
47323: ARRAY
47324: PPUSH
47325: CALL_OW 546
47329: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47330: LD_VAR 0 8
47334: PUSH
47335: LD_INT 1
47337: ARRAY
47338: IFTRUE 47360
47340: PUSH
47341: LD_VAR 0 8
47345: PUSH
47346: LD_INT 2
47348: ARRAY
47349: PUSH
47350: LD_VAR 0 13
47354: PUSH
47355: LD_INT 2
47357: PLUS
47358: GREATER
47359: OR
47360: IFTRUE 47382
47362: PUSH
47363: LD_VAR 0 8
47367: PUSH
47368: LD_INT 2
47370: ARRAY
47371: PUSH
47372: LD_VAR 0 13
47376: PUSH
47377: LD_INT 2
47379: MINUS
47380: LESS
47381: OR
47382: IFTRUE 47450
47384: PUSH
47385: LD_VAR 0 8
47389: PUSH
47390: LD_INT 3
47392: ARRAY
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 8
47399: PUSH
47400: LD_INT 9
47402: PUSH
47403: LD_INT 10
47405: PUSH
47406: LD_INT 11
47408: PUSH
47409: LD_INT 12
47411: PUSH
47412: LD_INT 13
47414: PUSH
47415: LD_INT 16
47417: PUSH
47418: LD_INT 17
47420: PUSH
47421: LD_INT 18
47423: PUSH
47424: LD_INT 19
47426: PUSH
47427: LD_INT 20
47429: PUSH
47430: LD_INT 21
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: IN
47448: NOT
47449: OR
47450: IFTRUE 47463
47452: PUSH
47453: LD_VAR 0 8
47457: PUSH
47458: LD_INT 5
47460: ARRAY
47461: NOT
47462: OR
47463: IFTRUE 47503
47465: PUSH
47466: LD_VAR 0 8
47470: PUSH
47471: LD_INT 6
47473: ARRAY
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: LD_INT 7
47483: PUSH
47484: LD_INT 9
47486: PUSH
47487: LD_INT 10
47489: PUSH
47490: LD_INT 11
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: IN
47501: NOT
47502: OR
47503: IFFALSE 47509
// exit ;
47505: POP
47506: POP
47507: GO 47594
// end ;
47509: GO 47166
47511: POP
47512: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47513: LD_VAR 0 9
47517: PPUSH
47518: LD_VAR 0 3
47522: PPUSH
47523: LD_VAR 0 4
47527: PPUSH
47528: LD_INT 20
47530: PPUSH
47531: CALL 39413 0 4
47535: PUSH
47536: LD_INT 4
47538: ARRAY
47539: IFFALSE 47543
// exit ;
47541: GO 47594
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47543: LD_VAR 0 2
47547: PUSH
47548: LD_INT 29
47550: PUSH
47551: LD_INT 30
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: IN
47558: IFFALSE 47582
47560: PUSH
47561: LD_VAR 0 3
47565: PPUSH
47566: LD_VAR 0 4
47570: PPUSH
47571: LD_VAR 0 9
47575: PPUSH
47576: CALL_OW 440
47580: NOT
47581: AND
47582: IFFALSE 47586
// exit ;
47584: GO 47594
// result := true ;
47586: LD_ADDR_VAR 0 6
47590: PUSH
47591: LD_INT 1
47593: ST_TO_ADDR
// end ;
47594: LD_VAR 0 6
47598: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47599: LD_INT 0
47601: PPUSH
47602: PPUSH
47603: PPUSH
47604: PPUSH
47605: PPUSH
47606: PPUSH
47607: PPUSH
47608: PPUSH
47609: PPUSH
47610: PPUSH
47611: PPUSH
47612: PPUSH
47613: PPUSH
47614: PPUSH
47615: PPUSH
47616: PPUSH
47617: PPUSH
47618: PPUSH
47619: PPUSH
47620: PPUSH
47621: PPUSH
47622: PPUSH
47623: PPUSH
47624: PPUSH
47625: PPUSH
47626: PPUSH
47627: PPUSH
47628: PPUSH
47629: PPUSH
47630: PPUSH
47631: PPUSH
47632: PPUSH
47633: PPUSH
47634: PPUSH
47635: PPUSH
47636: PPUSH
47637: PPUSH
47638: PPUSH
47639: PPUSH
47640: PPUSH
47641: PPUSH
47642: PPUSH
47643: PPUSH
47644: PPUSH
47645: PPUSH
47646: PPUSH
47647: PPUSH
47648: PPUSH
47649: PPUSH
47650: PPUSH
47651: PPUSH
47652: PPUSH
47653: PPUSH
47654: PPUSH
47655: PPUSH
47656: PPUSH
47657: PPUSH
47658: PPUSH
// result = [ ] ;
47659: LD_ADDR_VAR 0 7
47663: PUSH
47664: EMPTY
47665: ST_TO_ADDR
// temp_list = [ ] ;
47666: LD_ADDR_VAR 0 9
47670: PUSH
47671: EMPTY
47672: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47673: LD_VAR 0 4
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: LD_INT 3
47689: PUSH
47690: LD_INT 4
47692: PUSH
47693: LD_INT 5
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: IN
47704: NOT
47705: IFTRUE 47748
47707: PUSH
47708: LD_VAR 0 1
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: IN
47723: IFFALSE 47747
47725: PUSH
47726: LD_VAR 0 5
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: LD_INT 3
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: IN
47745: NOT
47746: AND
47747: OR
47748: IFFALSE 47752
// exit ;
47750: GO 66151
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47752: LD_VAR 0 1
47756: PUSH
47757: LD_INT 6
47759: PUSH
47760: LD_INT 7
47762: PUSH
47763: LD_INT 8
47765: PUSH
47766: LD_INT 13
47768: PUSH
47769: LD_INT 12
47771: PUSH
47772: LD_INT 15
47774: PUSH
47775: LD_INT 11
47777: PUSH
47778: LD_INT 14
47780: PUSH
47781: LD_INT 10
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: IN
47795: IFFALSE 47805
// btype = b_lab ;
47797: LD_ADDR_VAR 0 1
47801: PUSH
47802: LD_INT 6
47804: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47805: LD_VAR 0 6
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: LIST
47823: IN
47824: NOT
47825: IFTRUE 47893
47827: PUSH
47828: LD_VAR 0 1
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: LD_INT 6
47847: PUSH
47848: LD_INT 36
47850: PUSH
47851: LD_INT 4
47853: PUSH
47854: LD_INT 5
47856: PUSH
47857: LD_INT 31
47859: PUSH
47860: LD_INT 32
47862: PUSH
47863: LD_INT 33
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: IN
47879: NOT
47880: IFFALSE 47892
47882: PUSH
47883: LD_VAR 0 6
47887: PUSH
47888: LD_INT 1
47890: EQUAL
47891: AND
47892: OR
47893: IFTRUE 47925
47895: PUSH
47896: LD_VAR 0 1
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: LD_INT 3
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: IN
47911: NOT
47912: IFFALSE 47924
47914: PUSH
47915: LD_VAR 0 6
47919: PUSH
47920: LD_INT 2
47922: EQUAL
47923: AND
47924: OR
47925: IFFALSE 47935
// mode = 0 ;
47927: LD_ADDR_VAR 0 6
47931: PUSH
47932: LD_INT 0
47934: ST_TO_ADDR
// case mode of 0 :
47935: LD_VAR 0 6
47939: PUSH
47940: LD_INT 0
47942: DOUBLE
47943: EQUAL
47944: IFTRUE 47948
47946: GO 59401
47948: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47949: LD_ADDR_VAR 0 11
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 2
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: LD_INT 2
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: LD_INT 3
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 3
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48142: LD_ADDR_VAR 0 12
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: NEG
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 2
48265: NEG
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: NEG
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: NEG
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 3
48299: NEG
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 3
48310: NEG
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48338: LD_ADDR_VAR 0 13
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: NEG
48486: PUSH
48487: LD_INT 3
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 3
48497: NEG
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 3
48509: NEG
48510: PUSH
48511: LD_INT 3
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48537: LD_ADDR_VAR 0 14
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 3
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 3
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: LD_INT 2
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48733: LD_ADDR_VAR 0 15
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 3
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 3
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48926: LD_ADDR_VAR 0 16
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: LD_INT 2
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: NEG
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: PUSH
49074: LD_INT 2
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 3
49083: PUSH
49084: LD_INT 3
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: LD_INT 3
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49119: LD_ADDR_VAR 0 17
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 2
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49349: LD_ADDR_VAR 0 18
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49579: LD_ADDR_VAR 0 19
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: LD_INT 2
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: NEG
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49809: LD_ADDR_VAR 0 20
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 2
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 2
50008: NEG
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50039: LD_ADDR_VAR 0 21
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: LD_INT 1
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 2
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 2
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 2
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 2
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50269: LD_ADDR_VAR 0 22
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 2
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50499: LD_ADDR_VAR 0 23
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: LD_INT 3
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: LD_INT 3
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50779: LD_ADDR_VAR 0 24
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: LD_INT 2
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: LD_INT 2
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 3
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 3
51022: PUSH
51023: LD_INT 2
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51055: LD_ADDR_VAR 0 25
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: LD_INT 2
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 2
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: LD_INT 0
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 3
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 3
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: LD_INT 3
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: LD_INT 3
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51329: LD_ADDR_VAR 0 26
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: LD_INT 2
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: LD_INT 2
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: PUSH
51465: LD_INT 2
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 2
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51605: LD_ADDR_VAR 0 27
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: NEG
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: LD_INT 2
51808: NEG
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: NEG
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 3
51838: NEG
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 3
51850: NEG
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51885: LD_ADDR_VAR 0 28
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 2
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 2
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 2
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: NEG
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: NEG
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: NEG
52097: PUSH
52098: LD_INT 3
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: LD_INT 3
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 3
52132: NEG
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52167: LD_ADDR_VAR 0 29
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 2
52333: NEG
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: NEG
52358: PUSH
52359: LD_INT 3
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 3
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 3
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 2
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 3
52411: NEG
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52446: LD_ADDR_VAR 0 30
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 3
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 3
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: LD_INT 3
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 3
52689: NEG
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52724: LD_ADDR_VAR 0 31
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 2
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: NEG
52914: PUSH
52915: LD_INT 3
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 3
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: LD_INT 3
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 3
52967: NEG
52968: PUSH
52969: LD_INT 2
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53002: LD_ADDR_VAR 0 32
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 1
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: LD_INT 2
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: NEG
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 2
53179: NEG
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 3
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 3
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: LD_INT 3
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 3
53245: NEG
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53280: LD_ADDR_VAR 0 33
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: LD_INT 2
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 2
53446: NEG
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 2
53470: NEG
53471: PUSH
53472: LD_INT 3
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 3
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 3
53524: NEG
53525: PUSH
53526: LD_INT 2
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53559: LD_ADDR_VAR 0 34
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: LD_INT 2
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 2
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: NEG
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 2
53715: NEG
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: NEG
53739: PUSH
53740: LD_INT 2
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 3
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 3
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: LD_INT 3
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 3
53804: NEG
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53839: LD_ADDR_VAR 0 35
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53951: LD_ADDR_VAR 0 36
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: LD_INT 2
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54063: LD_ADDR_VAR 0 37
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: LD_INT 1
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54175: LD_ADDR_VAR 0 38
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54287: LD_ADDR_VAR 0 39
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: LD_INT 2
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54399: LD_ADDR_VAR 0 40
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54511: LD_ADDR_VAR 0 41
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: LD_INT 3
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 3
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 3
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 3
54754: PUSH
54755: LD_INT 3
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: PUSH
54765: LD_INT 3
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 3
54785: NEG
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 3
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 3
54808: NEG
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 3
54820: NEG
54821: PUSH
54822: LD_INT 3
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54861: LD_ADDR_VAR 0 42
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 2
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 2
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 2
55027: NEG
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 2
55039: NEG
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: LD_INT 3
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: LD_INT 3
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 3
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 3
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 3
55107: PUSH
55108: LD_INT 3
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: PUSH
55118: LD_INT 3
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: LD_INT 3
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: LD_INT 3
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: LD_INT 2
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 3
55170: NEG
55171: PUSH
55172: LD_INT 3
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55211: LD_ADDR_VAR 0 43
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: LD_INT 2
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: LD_INT 3
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 3
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 3
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 3
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 3
55507: NEG
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 3
55518: NEG
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55559: LD_ADDR_VAR 0 44
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: LD_INT 3
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 3
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 3
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: LD_INT 3
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: LD_INT 3
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 3
55833: NEG
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 3
55844: NEG
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 3
55856: NEG
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 3
55868: NEG
55869: PUSH
55870: LD_INT 3
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55909: LD_ADDR_VAR 0 45
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: NEG
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 2
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 2
56087: NEG
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: LD_INT 3
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 3
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 3
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 3
56155: PUSH
56156: LD_INT 3
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: LD_INT 3
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: LD_INT 3
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 3
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 3
56206: NEG
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 3
56218: NEG
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56259: LD_ADDR_VAR 0 46
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 3
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 3
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 2
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 3
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 3
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 3
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 3
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 3
56555: NEG
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 3
56566: NEG
56567: PUSH
56568: LD_INT 1
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56607: LD_ADDR_VAR 0 47
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: LD_INT 2
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 2
56734: NEG
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56758: LD_ADDR_VAR 0 48
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 2
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56905: LD_ADDR_VAR 0 49
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 2
57017: PUSH
57018: LD_INT 2
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: LD_INT 2
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57049: LD_ADDR_VAR 0 50
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 0
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: LD_INT 2
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: LD_INT 2
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57193: LD_ADDR_VAR 0 51
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 2
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: LD_INT 2
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 1
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: NEG
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57340: LD_ADDR_VAR 0 52
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 2
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57491: LD_ADDR_VAR 0 53
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: NEG
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: LD_INT 2
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 2
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 2
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: PUSH
57637: LD_INT 2
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: LD_INT 2
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: NEG
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 2
57667: NEG
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 2
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 2
57690: NEG
57691: PUSH
57692: LD_INT 2
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57721: LD_ADDR_VAR 0 54
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: LD_INT 2
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: NEG
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: NEG
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 2
57920: NEG
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57951: LD_ADDR_VAR 0 55
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 2
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: LD_INT 2
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: LD_INT 2
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58181: LD_ADDR_VAR 0 56
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: NEG
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58411: LD_ADDR_VAR 0 57
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: LD_INT 2
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 2
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: LD_INT 2
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 2
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: NEG
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: LD_INT 2
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58641: LD_ADDR_VAR 0 58
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 2
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 1
58806: NEG
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 2
58817: NEG
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58871: LD_ADDR_VAR 0 59
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58959: LD_ADDR_VAR 0 60
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 1
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59047: LD_ADDR_VAR 0 61
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 1
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59135: LD_ADDR_VAR 0 62
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59223: LD_ADDR_VAR 0 63
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 0
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59311: LD_ADDR_VAR 0 64
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: LD_INT 0
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: ST_TO_ADDR
// end ; 1 :
59399: GO 65296
59401: LD_INT 1
59403: DOUBLE
59404: EQUAL
59405: IFTRUE 59409
59407: GO 62032
59409: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59410: LD_ADDR_VAR 0 11
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: LD_INT 3
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: LD_INT 3
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: LD_INT 2
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: LIST
59453: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59454: LD_ADDR_VAR 0 12
59458: PUSH
59459: LD_INT 2
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 3
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 3
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: LIST
59494: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59495: LD_ADDR_VAR 0 13
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 3
59512: PUSH
59513: LD_INT 3
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: LD_INT 3
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: LIST
59534: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59535: LD_ADDR_VAR 0 14
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: LD_INT 3
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: LD_INT 3
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: LD_INT 2
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59576: LD_ADDR_VAR 0 15
59580: PUSH
59581: LD_INT 2
59583: NEG
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 3
59594: NEG
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 3
59605: NEG
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: LIST
59619: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59620: LD_ADDR_VAR 0 16
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: LD_INT 3
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 3
59639: NEG
59640: PUSH
59641: LD_INT 2
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 3
59651: NEG
59652: PUSH
59653: LD_INT 3
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59666: LD_ADDR_VAR 0 17
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: LD_INT 3
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: LD_INT 3
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: LD_INT 2
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: LIST
59709: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59710: LD_ADDR_VAR 0 18
59714: PUSH
59715: LD_INT 2
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 3
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 3
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: LIST
59750: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59751: LD_ADDR_VAR 0 19
59755: PUSH
59756: LD_INT 3
59758: PUSH
59759: LD_INT 2
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 3
59768: PUSH
59769: LD_INT 3
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: LD_INT 3
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: LIST
59790: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59791: LD_ADDR_VAR 0 20
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 3
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: LD_INT 3
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59832: LD_ADDR_VAR 0 21
59836: PUSH
59837: LD_INT 2
59839: NEG
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 3
59850: NEG
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 3
59861: NEG
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: LIST
59875: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59876: LD_ADDR_VAR 0 22
59880: PUSH
59881: LD_INT 2
59883: NEG
59884: PUSH
59885: LD_INT 3
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 3
59895: NEG
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 3
59907: NEG
59908: PUSH
59909: LD_INT 3
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: LIST
59921: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59922: LD_ADDR_VAR 0 23
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: LD_INT 3
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: LD_INT 4
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: LD_INT 3
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: LIST
59965: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59966: LD_ADDR_VAR 0 24
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 3
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 4
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60007: LD_ADDR_VAR 0 25
60011: PUSH
60012: LD_INT 3
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 4
60024: PUSH
60025: LD_INT 3
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 3
60034: PUSH
60035: LD_INT 4
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: LIST
60046: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60047: LD_ADDR_VAR 0 26
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: LD_INT 3
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: LD_INT 4
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: LD_INT 3
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: LIST
60087: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60088: LD_ADDR_VAR 0 27
60092: PUSH
60093: LD_INT 3
60095: NEG
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 3
60106: NEG
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 4
60117: NEG
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: LIST
60131: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60132: LD_ADDR_VAR 0 28
60136: PUSH
60137: LD_INT 3
60139: NEG
60140: PUSH
60141: LD_INT 3
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 3
60151: NEG
60152: PUSH
60153: LD_INT 4
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 4
60163: NEG
60164: PUSH
60165: LD_INT 3
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: LIST
60177: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60178: LD_ADDR_VAR 0 29
60182: PUSH
60183: LD_INT 1
60185: NEG
60186: PUSH
60187: LD_INT 3
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: LD_INT 3
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: LD_INT 2
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: NEG
60220: PUSH
60221: LD_INT 4
60223: NEG
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 4
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 3
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: LD_INT 5
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: LD_INT 5
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: PUSH
60277: LD_INT 4
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 6
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 6
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: LD_INT 5
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60333: LD_ADDR_VAR 0 30
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 3
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 3
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 4
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 4
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 4
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 5
60413: PUSH
60414: LD_INT 0
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 5
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 5
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 6
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 6
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60476: LD_ADDR_VAR 0 31
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: LD_INT 2
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 3
60493: PUSH
60494: LD_INT 3
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: LD_INT 3
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 4
60513: PUSH
60514: LD_INT 3
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 4
60523: PUSH
60524: LD_INT 4
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 3
60533: PUSH
60534: LD_INT 4
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 5
60543: PUSH
60544: LD_INT 4
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 5
60553: PUSH
60554: LD_INT 5
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 4
60563: PUSH
60564: LD_INT 5
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 6
60573: PUSH
60574: LD_INT 5
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 6
60583: PUSH
60584: LD_INT 6
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 5
60593: PUSH
60594: LD_INT 6
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60615: LD_ADDR_VAR 0 32
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: LD_INT 3
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: LD_INT 3
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: LD_INT 2
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: LD_INT 4
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: LD_INT 4
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: NEG
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: LD_INT 5
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: LD_INT 5
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: NEG
60705: PUSH
60706: LD_INT 4
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: LD_INT 6
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: LD_INT 6
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: LD_INT 5
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60758: LD_ADDR_VAR 0 33
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: LD_INT 1
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 3
60776: NEG
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: NEG
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 3
60799: NEG
60800: PUSH
60801: LD_INT 1
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 4
60810: NEG
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 4
60821: NEG
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 4
60833: NEG
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 5
60844: NEG
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 5
60855: NEG
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 5
60867: NEG
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 6
60878: NEG
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 6
60889: NEG
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60913: LD_ADDR_VAR 0 34
60917: PUSH
60918: LD_INT 2
60920: NEG
60921: PUSH
60922: LD_INT 3
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 3
60932: NEG
60933: PUSH
60934: LD_INT 2
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 3
60944: NEG
60945: PUSH
60946: LD_INT 3
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 3
60956: NEG
60957: PUSH
60958: LD_INT 4
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 4
60968: NEG
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 4
60980: NEG
60981: PUSH
60982: LD_INT 4
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 4
60992: NEG
60993: PUSH
60994: LD_INT 5
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 5
61004: NEG
61005: PUSH
61006: LD_INT 4
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 5
61016: NEG
61017: PUSH
61018: LD_INT 5
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 5
61028: NEG
61029: PUSH
61030: LD_INT 6
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 6
61040: NEG
61041: PUSH
61042: LD_INT 5
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 6
61052: NEG
61053: PUSH
61054: LD_INT 6
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61076: LD_ADDR_VAR 0 41
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: LD_INT 2
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: LD_INT 3
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: LD_INT 2
61109: NEG
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: LIST
61119: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61120: LD_ADDR_VAR 0 42
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 2
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 3
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: LIST
61160: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61161: LD_ADDR_VAR 0 43
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 3
61178: PUSH
61179: LD_INT 2
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: PUSH
61189: LD_INT 3
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61201: LD_ADDR_VAR 0 44
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 2
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: LD_INT 3
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 1
61228: NEG
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: LIST
61241: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61242: LD_ADDR_VAR 0 45
61246: PUSH
61247: LD_INT 2
61249: NEG
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 2
61260: NEG
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 3
61271: NEG
61272: PUSH
61273: LD_INT 1
61275: NEG
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: LIST
61285: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61286: LD_ADDR_VAR 0 46
61290: PUSH
61291: LD_INT 2
61293: NEG
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: LD_INT 3
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 3
61317: NEG
61318: PUSH
61319: LD_INT 2
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: LIST
61331: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61332: LD_ADDR_VAR 0 47
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: LD_INT 3
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: LD_INT 3
61355: NEG
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61365: LD_ADDR_VAR 0 48
61369: PUSH
61370: LD_INT 1
61372: PUSH
61373: LD_INT 2
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 2
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61396: LD_ADDR_VAR 0 49
61400: PUSH
61401: LD_INT 3
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 3
61413: PUSH
61414: LD_INT 2
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61425: LD_ADDR_VAR 0 50
61429: PUSH
61430: LD_INT 2
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: LD_INT 3
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61454: LD_ADDR_VAR 0 51
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: LD_INT 2
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 2
61472: NEG
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61485: LD_ADDR_VAR 0 52
61489: PUSH
61490: LD_INT 3
61492: NEG
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 3
61504: NEG
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61518: LD_ADDR_VAR 0 53
61522: PUSH
61523: LD_INT 1
61525: NEG
61526: PUSH
61527: LD_INT 3
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 0
61537: PUSH
61538: LD_INT 3
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: LD_INT 2
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: LIST
61561: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61562: LD_ADDR_VAR 0 54
61566: PUSH
61567: LD_INT 2
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 3
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 3
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: LIST
61602: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61603: LD_ADDR_VAR 0 55
61607: PUSH
61608: LD_INT 3
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 3
61620: PUSH
61621: LD_INT 3
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: LD_INT 3
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: LIST
61642: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61643: LD_ADDR_VAR 0 56
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: LD_INT 3
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: LD_INT 3
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: NEG
61671: PUSH
61672: LD_INT 2
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: LIST
61683: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61684: LD_ADDR_VAR 0 57
61688: PUSH
61689: LD_INT 2
61691: NEG
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 3
61702: NEG
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 3
61713: NEG
61714: PUSH
61715: LD_INT 1
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: LIST
61727: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61728: LD_ADDR_VAR 0 58
61732: PUSH
61733: LD_INT 2
61735: NEG
61736: PUSH
61737: LD_INT 3
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 3
61747: NEG
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 3
61759: NEG
61760: PUSH
61761: LD_INT 3
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: LIST
61773: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61774: LD_ADDR_VAR 0 59
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: LD_INT 2
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: LD_INT 2
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: LD_INT 1
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: LIST
61817: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61818: LD_ADDR_VAR 0 60
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: LD_INT 1
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 2
61846: PUSH
61847: LD_INT 1
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: LIST
61858: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61859: LD_ADDR_VAR 0 61
61863: PUSH
61864: LD_INT 2
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: LD_INT 2
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: LIST
61898: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61899: LD_ADDR_VAR 0 62
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: LD_INT 1
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: LIST
61939: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61940: LD_ADDR_VAR 0 63
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: LD_INT 1
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 2
61958: NEG
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 2
61969: NEG
61970: PUSH
61971: LD_INT 1
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: LIST
61983: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61984: LD_ADDR_VAR 0 64
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 2
62003: NEG
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 2
62015: NEG
62016: PUSH
62017: LD_INT 2
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: LIST
62029: ST_TO_ADDR
// end ; 2 :
62030: GO 65296
62032: LD_INT 2
62034: DOUBLE
62035: EQUAL
62036: IFTRUE 62040
62038: GO 65295
62040: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62041: LD_ADDR_VAR 0 29
62045: PUSH
62046: LD_INT 4
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 4
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 5
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 5
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 4
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 3
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 3
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 3
62120: PUSH
62121: LD_INT 2
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 5
62131: PUSH
62132: LD_INT 2
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 3
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 3
62151: PUSH
62152: LD_INT 2
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 4
62161: PUSH
62162: LD_INT 3
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 4
62171: PUSH
62172: LD_INT 4
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 3
62181: PUSH
62182: LD_INT 4
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: PUSH
62192: LD_INT 3
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 2
62201: PUSH
62202: LD_INT 2
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 4
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: PUSH
62222: LD_INT 4
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: LD_INT 4
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: LD_INT 3
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: LD_INT 4
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: LD_INT 5
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: LD_INT 5
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: LD_INT 4
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: LD_INT 3
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: PUSH
62304: LD_INT 5
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 2
62313: NEG
62314: PUSH
62315: LD_INT 3
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 3
62324: NEG
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 3
62335: NEG
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 2
62347: NEG
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 2
62358: NEG
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 3
62369: NEG
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 4
62380: NEG
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 4
62391: NEG
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 4
62403: NEG
62404: PUSH
62405: LD_INT 2
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: LD_INT 2
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 4
62426: NEG
62427: PUSH
62428: LD_INT 4
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 4
62438: NEG
62439: PUSH
62440: LD_INT 5
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 3
62450: NEG
62451: PUSH
62452: LD_INT 4
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 3
62462: NEG
62463: PUSH
62464: LD_INT 3
62466: NEG
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 4
62474: NEG
62475: PUSH
62476: LD_INT 3
62478: NEG
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 5
62486: NEG
62487: PUSH
62488: LD_INT 4
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 5
62498: NEG
62499: PUSH
62500: LD_INT 5
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: LD_INT 5
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 5
62522: NEG
62523: PUSH
62524: LD_INT 3
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62579: LD_ADDR_VAR 0 30
62583: PUSH
62584: LD_INT 4
62586: PUSH
62587: LD_INT 4
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 4
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 5
62606: PUSH
62607: LD_INT 4
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 5
62616: PUSH
62617: LD_INT 5
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 4
62626: PUSH
62627: LD_INT 5
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 3
62636: PUSH
62637: LD_INT 4
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 3
62646: PUSH
62647: LD_INT 3
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 5
62656: PUSH
62657: LD_INT 3
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 3
62666: PUSH
62667: LD_INT 5
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: LD_INT 3
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: LD_INT 2
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: PUSH
62697: LD_INT 3
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: LD_INT 4
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 4
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: LD_INT 3
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: NEG
62738: PUSH
62739: LD_INT 2
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 2
62748: PUSH
62749: LD_INT 4
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 2
62758: NEG
62759: PUSH
62760: LD_INT 2
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 4
62769: NEG
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 4
62780: NEG
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 3
62792: NEG
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 3
62803: NEG
62804: PUSH
62805: LD_INT 1
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 4
62814: NEG
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 5
62825: NEG
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 5
62836: NEG
62837: PUSH
62838: LD_INT 1
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 5
62848: NEG
62849: PUSH
62850: LD_INT 2
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 3
62860: NEG
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 3
62871: NEG
62872: PUSH
62873: LD_INT 3
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 3
62883: NEG
62884: PUSH
62885: LD_INT 4
62887: NEG
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 2
62895: NEG
62896: PUSH
62897: LD_INT 3
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 2
62907: NEG
62908: PUSH
62909: LD_INT 2
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 3
62919: NEG
62920: PUSH
62921: LD_INT 2
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 4
62931: NEG
62932: PUSH
62933: LD_INT 3
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 4
62943: NEG
62944: PUSH
62945: LD_INT 4
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 2
62955: NEG
62956: PUSH
62957: LD_INT 4
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 4
62967: NEG
62968: PUSH
62969: LD_INT 2
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: LD_INT 4
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 0
62990: PUSH
62991: LD_INT 5
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: LD_INT 4
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: LD_INT 3
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: LD_INT 3
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 1
63034: NEG
63035: PUSH
63036: LD_INT 4
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: LD_INT 5
63050: NEG
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 2
63058: PUSH
63059: LD_INT 3
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 2
63069: NEG
63070: PUSH
63071: LD_INT 5
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63126: LD_ADDR_VAR 0 31
63130: PUSH
63131: LD_INT 0
63133: PUSH
63134: LD_INT 4
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: LD_INT 3
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: PUSH
63154: LD_INT 4
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 1
63163: PUSH
63164: LD_INT 5
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: LD_INT 5
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: LD_INT 4
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 1
63194: NEG
63195: PUSH
63196: LD_INT 3
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 2
63205: PUSH
63206: LD_INT 5
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 2
63215: NEG
63216: PUSH
63217: LD_INT 3
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 3
63226: NEG
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 3
63237: NEG
63238: PUSH
63239: LD_INT 1
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 2
63249: NEG
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 2
63260: NEG
63261: PUSH
63262: LD_INT 1
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 3
63271: NEG
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 4
63282: NEG
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 4
63293: NEG
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 4
63305: NEG
63306: PUSH
63307: LD_INT 2
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 2
63317: NEG
63318: PUSH
63319: LD_INT 2
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 4
63328: NEG
63329: PUSH
63330: LD_INT 4
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 4
63340: NEG
63341: PUSH
63342: LD_INT 5
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 3
63352: NEG
63353: PUSH
63354: LD_INT 4
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 3
63364: NEG
63365: PUSH
63366: LD_INT 3
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 4
63376: NEG
63377: PUSH
63378: LD_INT 3
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 5
63388: NEG
63389: PUSH
63390: LD_INT 4
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 5
63400: NEG
63401: PUSH
63402: LD_INT 5
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 3
63412: NEG
63413: PUSH
63414: LD_INT 5
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 5
63424: NEG
63425: PUSH
63426: LD_INT 3
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: LD_INT 3
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: LD_INT 4
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 1
63458: PUSH
63459: LD_INT 3
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 1
63469: PUSH
63470: LD_INT 2
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 2
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: NEG
63492: PUSH
63493: LD_INT 3
63495: NEG
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: LD_INT 4
63507: NEG
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 2
63515: PUSH
63516: LD_INT 2
63518: NEG
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 2
63526: NEG
63527: PUSH
63528: LD_INT 4
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 4
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 4
63548: PUSH
63549: LD_INT 1
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 5
63559: PUSH
63560: LD_INT 0
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 5
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 4
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 3
63589: PUSH
63590: LD_INT 0
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 3
63599: PUSH
63600: LD_INT 1
63602: NEG
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 3
63610: PUSH
63611: LD_INT 2
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 5
63621: PUSH
63622: LD_INT 2
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63676: LD_ADDR_VAR 0 32
63680: PUSH
63681: LD_INT 4
63683: NEG
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 4
63694: NEG
63695: PUSH
63696: LD_INT 1
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 3
63706: NEG
63707: PUSH
63708: LD_INT 0
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 3
63717: NEG
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 4
63728: NEG
63729: PUSH
63730: LD_INT 1
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 5
63739: NEG
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 5
63750: NEG
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 5
63762: NEG
63763: PUSH
63764: LD_INT 2
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 3
63774: NEG
63775: PUSH
63776: LD_INT 2
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 3
63785: NEG
63786: PUSH
63787: LD_INT 3
63789: NEG
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 3
63797: NEG
63798: PUSH
63799: LD_INT 4
63801: NEG
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 2
63809: NEG
63810: PUSH
63811: LD_INT 3
63813: NEG
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 2
63821: NEG
63822: PUSH
63823: LD_INT 2
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 3
63833: NEG
63834: PUSH
63835: LD_INT 2
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 4
63845: NEG
63846: PUSH
63847: LD_INT 3
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 4
63857: NEG
63858: PUSH
63859: LD_INT 4
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 2
63869: NEG
63870: PUSH
63871: LD_INT 4
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 4
63881: NEG
63882: PUSH
63883: LD_INT 2
63885: NEG
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: LD_INT 4
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: LD_INT 5
63907: NEG
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: LD_INT 4
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: PUSH
63927: LD_INT 3
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: LD_INT 3
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 1
63948: NEG
63949: PUSH
63950: LD_INT 4
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: LD_INT 5
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 2
63972: PUSH
63973: LD_INT 3
63975: NEG
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: NEG
63984: PUSH
63985: LD_INT 5
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 3
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 3
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 4
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 4
64026: PUSH
64027: LD_INT 1
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 3
64036: PUSH
64037: LD_INT 1
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 2
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 2
64056: PUSH
64057: LD_INT 1
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 2
64067: PUSH
64068: LD_INT 2
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 4
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 4
64088: PUSH
64089: LD_INT 4
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 4
64098: PUSH
64099: LD_INT 3
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 5
64108: PUSH
64109: LD_INT 4
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 5
64118: PUSH
64119: LD_INT 5
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 4
64128: PUSH
64129: LD_INT 5
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 3
64138: PUSH
64139: LD_INT 4
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 3
64148: PUSH
64149: LD_INT 3
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 5
64158: PUSH
64159: LD_INT 3
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 3
64168: PUSH
64169: LD_INT 5
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64223: LD_ADDR_VAR 0 33
64227: PUSH
64228: LD_INT 4
64230: NEG
64231: PUSH
64232: LD_INT 4
64234: NEG
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 4
64242: NEG
64243: PUSH
64244: LD_INT 5
64246: NEG
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 3
64254: NEG
64255: PUSH
64256: LD_INT 4
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 3
64266: NEG
64267: PUSH
64268: LD_INT 3
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 4
64278: NEG
64279: PUSH
64280: LD_INT 3
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 5
64290: NEG
64291: PUSH
64292: LD_INT 4
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 5
64302: NEG
64303: PUSH
64304: LD_INT 5
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 3
64314: NEG
64315: PUSH
64316: LD_INT 5
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 5
64326: NEG
64327: PUSH
64328: LD_INT 3
64330: NEG
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: LD_INT 3
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: LD_INT 4
64352: NEG
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: PUSH
64361: LD_INT 3
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: LD_INT 2
64374: NEG
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 0
64382: PUSH
64383: LD_INT 2
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 1
64393: NEG
64394: PUSH
64395: LD_INT 3
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 1
64405: NEG
64406: PUSH
64407: LD_INT 4
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 2
64417: PUSH
64418: LD_INT 2
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 2
64428: NEG
64429: PUSH
64430: LD_INT 4
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 4
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 4
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 5
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 5
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 4
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 3
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 3
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 3
64512: PUSH
64513: LD_INT 2
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 5
64523: PUSH
64524: LD_INT 2
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 3
64533: PUSH
64534: LD_INT 3
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 3
64543: PUSH
64544: LD_INT 2
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 4
64553: PUSH
64554: LD_INT 3
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 4
64563: PUSH
64564: LD_INT 4
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 3
64573: PUSH
64574: LD_INT 4
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 2
64583: PUSH
64584: LD_INT 3
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 2
64593: PUSH
64594: LD_INT 2
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 4
64603: PUSH
64604: LD_INT 2
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 2
64613: PUSH
64614: LD_INT 4
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 0
64623: PUSH
64624: LD_INT 4
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: LD_INT 3
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 1
64643: PUSH
64644: LD_INT 4
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 1
64653: PUSH
64654: LD_INT 5
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: LD_INT 5
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 1
64673: NEG
64674: PUSH
64675: LD_INT 4
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 1
64684: NEG
64685: PUSH
64686: LD_INT 3
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 2
64695: PUSH
64696: LD_INT 5
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 2
64705: NEG
64706: PUSH
64707: LD_INT 3
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64761: LD_ADDR_VAR 0 34
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: LD_INT 4
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: LD_INT 5
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 1
64790: PUSH
64791: LD_INT 4
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: LD_INT 3
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: LD_INT 3
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: LD_INT 4
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: LD_INT 5
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 2
64847: PUSH
64848: LD_INT 3
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 2
64858: NEG
64859: PUSH
64860: LD_INT 5
64862: NEG
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 3
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 3
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 4
64891: PUSH
64892: LD_INT 0
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 4
64901: PUSH
64902: LD_INT 1
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 3
64911: PUSH
64912: LD_INT 1
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 2
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 2
64931: PUSH
64932: LD_INT 1
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 2
64942: PUSH
64943: LD_INT 2
64945: NEG
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 4
64953: PUSH
64954: LD_INT 2
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 4
64963: PUSH
64964: LD_INT 4
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 4
64973: PUSH
64974: LD_INT 3
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 5
64983: PUSH
64984: LD_INT 4
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 5
64993: PUSH
64994: LD_INT 5
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 4
65003: PUSH
65004: LD_INT 5
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 3
65013: PUSH
65014: LD_INT 4
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 3
65023: PUSH
65024: LD_INT 3
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 5
65033: PUSH
65034: LD_INT 3
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 3
65043: PUSH
65044: LD_INT 5
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 0
65053: PUSH
65054: LD_INT 3
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: LD_INT 2
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: LD_INT 3
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: PUSH
65084: LD_INT 4
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 0
65093: PUSH
65094: LD_INT 4
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 1
65103: NEG
65104: PUSH
65105: LD_INT 3
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 1
65114: NEG
65115: PUSH
65116: LD_INT 2
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 2
65125: PUSH
65126: LD_INT 4
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 2
65135: NEG
65136: PUSH
65137: LD_INT 2
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 4
65146: NEG
65147: PUSH
65148: LD_INT 0
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 4
65157: NEG
65158: PUSH
65159: LD_INT 1
65161: NEG
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 3
65169: NEG
65170: PUSH
65171: LD_INT 0
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 3
65180: NEG
65181: PUSH
65182: LD_INT 1
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 4
65191: NEG
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 5
65202: NEG
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 5
65213: NEG
65214: PUSH
65215: LD_INT 1
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 5
65225: NEG
65226: PUSH
65227: LD_INT 2
65229: NEG
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 3
65237: NEG
65238: PUSH
65239: LD_INT 2
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: ST_TO_ADDR
// end ; end ;
65293: GO 65296
65295: POP
// case btype of b_depot , b_warehouse :
65296: LD_VAR 0 1
65300: PUSH
65301: LD_INT 0
65303: DOUBLE
65304: EQUAL
65305: IFTRUE 65315
65307: LD_INT 1
65309: DOUBLE
65310: EQUAL
65311: IFTRUE 65315
65313: GO 65516
65315: POP
// case nation of nation_american :
65316: LD_VAR 0 5
65320: PUSH
65321: LD_INT 1
65323: DOUBLE
65324: EQUAL
65325: IFTRUE 65329
65327: GO 65385
65329: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65330: LD_ADDR_VAR 0 9
65334: PUSH
65335: LD_VAR 0 11
65339: PUSH
65340: LD_VAR 0 12
65344: PUSH
65345: LD_VAR 0 13
65349: PUSH
65350: LD_VAR 0 14
65354: PUSH
65355: LD_VAR 0 15
65359: PUSH
65360: LD_VAR 0 16
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: PUSH
65373: LD_VAR 0 4
65377: PUSH
65378: LD_INT 1
65380: PLUS
65381: ARRAY
65382: ST_TO_ADDR
65383: GO 65514
65385: LD_INT 2
65387: DOUBLE
65388: EQUAL
65389: IFTRUE 65393
65391: GO 65449
65393: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65394: LD_ADDR_VAR 0 9
65398: PUSH
65399: LD_VAR 0 17
65403: PUSH
65404: LD_VAR 0 18
65408: PUSH
65409: LD_VAR 0 19
65413: PUSH
65414: LD_VAR 0 20
65418: PUSH
65419: LD_VAR 0 21
65423: PUSH
65424: LD_VAR 0 22
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: PUSH
65437: LD_VAR 0 4
65441: PUSH
65442: LD_INT 1
65444: PLUS
65445: ARRAY
65446: ST_TO_ADDR
65447: GO 65514
65449: LD_INT 3
65451: DOUBLE
65452: EQUAL
65453: IFTRUE 65457
65455: GO 65513
65457: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65458: LD_ADDR_VAR 0 9
65462: PUSH
65463: LD_VAR 0 23
65467: PUSH
65468: LD_VAR 0 24
65472: PUSH
65473: LD_VAR 0 25
65477: PUSH
65478: LD_VAR 0 26
65482: PUSH
65483: LD_VAR 0 27
65487: PUSH
65488: LD_VAR 0 28
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: PUSH
65501: LD_VAR 0 4
65505: PUSH
65506: LD_INT 1
65508: PLUS
65509: ARRAY
65510: ST_TO_ADDR
65511: GO 65514
65513: POP
65514: GO 66069
65516: LD_INT 2
65518: DOUBLE
65519: EQUAL
65520: IFTRUE 65530
65522: LD_INT 3
65524: DOUBLE
65525: EQUAL
65526: IFTRUE 65530
65528: GO 65586
65530: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65531: LD_ADDR_VAR 0 9
65535: PUSH
65536: LD_VAR 0 29
65540: PUSH
65541: LD_VAR 0 30
65545: PUSH
65546: LD_VAR 0 31
65550: PUSH
65551: LD_VAR 0 32
65555: PUSH
65556: LD_VAR 0 33
65560: PUSH
65561: LD_VAR 0 34
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: PUSH
65574: LD_VAR 0 4
65578: PUSH
65579: LD_INT 1
65581: PLUS
65582: ARRAY
65583: ST_TO_ADDR
65584: GO 66069
65586: LD_INT 16
65588: DOUBLE
65589: EQUAL
65590: IFTRUE 65648
65592: LD_INT 17
65594: DOUBLE
65595: EQUAL
65596: IFTRUE 65648
65598: LD_INT 18
65600: DOUBLE
65601: EQUAL
65602: IFTRUE 65648
65604: LD_INT 19
65606: DOUBLE
65607: EQUAL
65608: IFTRUE 65648
65610: LD_INT 22
65612: DOUBLE
65613: EQUAL
65614: IFTRUE 65648
65616: LD_INT 20
65618: DOUBLE
65619: EQUAL
65620: IFTRUE 65648
65622: LD_INT 21
65624: DOUBLE
65625: EQUAL
65626: IFTRUE 65648
65628: LD_INT 23
65630: DOUBLE
65631: EQUAL
65632: IFTRUE 65648
65634: LD_INT 24
65636: DOUBLE
65637: EQUAL
65638: IFTRUE 65648
65640: LD_INT 25
65642: DOUBLE
65643: EQUAL
65644: IFTRUE 65648
65646: GO 65704
65648: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65649: LD_ADDR_VAR 0 9
65653: PUSH
65654: LD_VAR 0 35
65658: PUSH
65659: LD_VAR 0 36
65663: PUSH
65664: LD_VAR 0 37
65668: PUSH
65669: LD_VAR 0 38
65673: PUSH
65674: LD_VAR 0 39
65678: PUSH
65679: LD_VAR 0 40
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: PUSH
65692: LD_VAR 0 4
65696: PUSH
65697: LD_INT 1
65699: PLUS
65700: ARRAY
65701: ST_TO_ADDR
65702: GO 66069
65704: LD_INT 6
65706: DOUBLE
65707: EQUAL
65708: IFTRUE 65760
65710: LD_INT 7
65712: DOUBLE
65713: EQUAL
65714: IFTRUE 65760
65716: LD_INT 8
65718: DOUBLE
65719: EQUAL
65720: IFTRUE 65760
65722: LD_INT 13
65724: DOUBLE
65725: EQUAL
65726: IFTRUE 65760
65728: LD_INT 12
65730: DOUBLE
65731: EQUAL
65732: IFTRUE 65760
65734: LD_INT 15
65736: DOUBLE
65737: EQUAL
65738: IFTRUE 65760
65740: LD_INT 11
65742: DOUBLE
65743: EQUAL
65744: IFTRUE 65760
65746: LD_INT 14
65748: DOUBLE
65749: EQUAL
65750: IFTRUE 65760
65752: LD_INT 10
65754: DOUBLE
65755: EQUAL
65756: IFTRUE 65760
65758: GO 65816
65760: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65761: LD_ADDR_VAR 0 9
65765: PUSH
65766: LD_VAR 0 41
65770: PUSH
65771: LD_VAR 0 42
65775: PUSH
65776: LD_VAR 0 43
65780: PUSH
65781: LD_VAR 0 44
65785: PUSH
65786: LD_VAR 0 45
65790: PUSH
65791: LD_VAR 0 46
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: PUSH
65804: LD_VAR 0 4
65808: PUSH
65809: LD_INT 1
65811: PLUS
65812: ARRAY
65813: ST_TO_ADDR
65814: GO 66069
65816: LD_INT 36
65818: DOUBLE
65819: EQUAL
65820: IFTRUE 65824
65822: GO 65880
65824: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65825: LD_ADDR_VAR 0 9
65829: PUSH
65830: LD_VAR 0 47
65834: PUSH
65835: LD_VAR 0 48
65839: PUSH
65840: LD_VAR 0 49
65844: PUSH
65845: LD_VAR 0 50
65849: PUSH
65850: LD_VAR 0 51
65854: PUSH
65855: LD_VAR 0 52
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: PUSH
65868: LD_VAR 0 4
65872: PUSH
65873: LD_INT 1
65875: PLUS
65876: ARRAY
65877: ST_TO_ADDR
65878: GO 66069
65880: LD_INT 4
65882: DOUBLE
65883: EQUAL
65884: IFTRUE 65906
65886: LD_INT 5
65888: DOUBLE
65889: EQUAL
65890: IFTRUE 65906
65892: LD_INT 34
65894: DOUBLE
65895: EQUAL
65896: IFTRUE 65906
65898: LD_INT 37
65900: DOUBLE
65901: EQUAL
65902: IFTRUE 65906
65904: GO 65962
65906: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65907: LD_ADDR_VAR 0 9
65911: PUSH
65912: LD_VAR 0 53
65916: PUSH
65917: LD_VAR 0 54
65921: PUSH
65922: LD_VAR 0 55
65926: PUSH
65927: LD_VAR 0 56
65931: PUSH
65932: LD_VAR 0 57
65936: PUSH
65937: LD_VAR 0 58
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: PUSH
65950: LD_VAR 0 4
65954: PUSH
65955: LD_INT 1
65957: PLUS
65958: ARRAY
65959: ST_TO_ADDR
65960: GO 66069
65962: LD_INT 31
65964: DOUBLE
65965: EQUAL
65966: IFTRUE 66012
65968: LD_INT 32
65970: DOUBLE
65971: EQUAL
65972: IFTRUE 66012
65974: LD_INT 33
65976: DOUBLE
65977: EQUAL
65978: IFTRUE 66012
65980: LD_INT 27
65982: DOUBLE
65983: EQUAL
65984: IFTRUE 66012
65986: LD_INT 26
65988: DOUBLE
65989: EQUAL
65990: IFTRUE 66012
65992: LD_INT 28
65994: DOUBLE
65995: EQUAL
65996: IFTRUE 66012
65998: LD_INT 29
66000: DOUBLE
66001: EQUAL
66002: IFTRUE 66012
66004: LD_INT 30
66006: DOUBLE
66007: EQUAL
66008: IFTRUE 66012
66010: GO 66068
66012: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66013: LD_ADDR_VAR 0 9
66017: PUSH
66018: LD_VAR 0 59
66022: PUSH
66023: LD_VAR 0 60
66027: PUSH
66028: LD_VAR 0 61
66032: PUSH
66033: LD_VAR 0 62
66037: PUSH
66038: LD_VAR 0 63
66042: PUSH
66043: LD_VAR 0 64
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: PUSH
66056: LD_VAR 0 4
66060: PUSH
66061: LD_INT 1
66063: PLUS
66064: ARRAY
66065: ST_TO_ADDR
66066: GO 66069
66068: POP
// temp_list2 = [ ] ;
66069: LD_ADDR_VAR 0 10
66073: PUSH
66074: EMPTY
66075: ST_TO_ADDR
// for i in temp_list do
66076: LD_ADDR_VAR 0 8
66080: PUSH
66081: LD_VAR 0 9
66085: PUSH
66086: FOR_IN
66087: IFFALSE 66139
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66089: LD_ADDR_VAR 0 10
66093: PUSH
66094: LD_VAR 0 10
66098: PUSH
66099: LD_VAR 0 8
66103: PUSH
66104: LD_INT 1
66106: ARRAY
66107: PUSH
66108: LD_VAR 0 2
66112: PLUS
66113: PUSH
66114: LD_VAR 0 8
66118: PUSH
66119: LD_INT 2
66121: ARRAY
66122: PUSH
66123: LD_VAR 0 3
66127: PLUS
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: EMPTY
66134: LIST
66135: ADD
66136: ST_TO_ADDR
66137: GO 66086
66139: POP
66140: POP
// result = temp_list2 ;
66141: LD_ADDR_VAR 0 7
66145: PUSH
66146: LD_VAR 0 10
66150: ST_TO_ADDR
// end ;
66151: LD_VAR 0 7
66155: RET
// export function EnemyInRange ( unit , dist ) ; begin
66156: LD_INT 0
66158: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66159: LD_ADDR_VAR 0 3
66163: PUSH
66164: LD_VAR 0 1
66168: PPUSH
66169: CALL_OW 255
66173: PPUSH
66174: LD_VAR 0 1
66178: PPUSH
66179: CALL_OW 250
66183: PPUSH
66184: LD_VAR 0 1
66188: PPUSH
66189: CALL_OW 251
66193: PPUSH
66194: LD_VAR 0 2
66198: PPUSH
66199: CALL 39413 0 4
66203: PUSH
66204: LD_INT 4
66206: ARRAY
66207: ST_TO_ADDR
// end ;
66208: LD_VAR 0 3
66212: RET
// export function PlayerSeeMe ( unit ) ; begin
66213: LD_INT 0
66215: PPUSH
// result := See ( your_side , unit ) ;
66216: LD_ADDR_VAR 0 2
66220: PUSH
66221: LD_OWVAR 2
66225: PPUSH
66226: LD_VAR 0 1
66230: PPUSH
66231: CALL_OW 292
66235: ST_TO_ADDR
// end ;
66236: LD_VAR 0 2
66240: RET
// export function ReverseDir ( unit ) ; begin
66241: LD_INT 0
66243: PPUSH
// if not unit then
66244: LD_VAR 0 1
66248: NOT
66249: IFFALSE 66253
// exit ;
66251: GO 66276
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66253: LD_ADDR_VAR 0 2
66257: PUSH
66258: LD_VAR 0 1
66262: PPUSH
66263: CALL_OW 254
66267: PUSH
66268: LD_INT 3
66270: PLUS
66271: PUSH
66272: LD_INT 6
66274: MOD
66275: ST_TO_ADDR
// end ;
66276: LD_VAR 0 2
66280: RET
// export function ReverseArray ( array ) ; var i ; begin
66281: LD_INT 0
66283: PPUSH
66284: PPUSH
// if not array then
66285: LD_VAR 0 1
66289: NOT
66290: IFFALSE 66294
// exit ;
66292: GO 66349
// result := [ ] ;
66294: LD_ADDR_VAR 0 2
66298: PUSH
66299: EMPTY
66300: ST_TO_ADDR
// for i := array downto 1 do
66301: LD_ADDR_VAR 0 3
66305: PUSH
66306: DOUBLE
66307: LD_VAR 0 1
66311: INC
66312: ST_TO_ADDR
66313: LD_INT 1
66315: PUSH
66316: FOR_DOWNTO
66317: IFFALSE 66347
// result := Join ( result , array [ i ] ) ;
66319: LD_ADDR_VAR 0 2
66323: PUSH
66324: LD_VAR 0 2
66328: PPUSH
66329: LD_VAR 0 1
66333: PUSH
66334: LD_VAR 0 3
66338: ARRAY
66339: PPUSH
66340: CALL 71191 0 2
66344: ST_TO_ADDR
66345: GO 66316
66347: POP
66348: POP
// end ;
66349: LD_VAR 0 2
66353: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66354: LD_INT 0
66356: PPUSH
66357: PPUSH
66358: PPUSH
66359: PPUSH
66360: PPUSH
66361: PPUSH
// if not unit or not hexes then
66362: LD_VAR 0 1
66366: NOT
66367: IFTRUE 66376
66369: PUSH
66370: LD_VAR 0 2
66374: NOT
66375: OR
66376: IFFALSE 66380
// exit ;
66378: GO 66503
// dist := 9999 ;
66380: LD_ADDR_VAR 0 5
66384: PUSH
66385: LD_INT 9999
66387: ST_TO_ADDR
// for i = 1 to hexes do
66388: LD_ADDR_VAR 0 4
66392: PUSH
66393: DOUBLE
66394: LD_INT 1
66396: DEC
66397: ST_TO_ADDR
66398: LD_VAR 0 2
66402: PUSH
66403: FOR_TO
66404: IFFALSE 66491
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66406: LD_ADDR_VAR 0 6
66410: PUSH
66411: LD_VAR 0 1
66415: PPUSH
66416: LD_VAR 0 2
66420: PUSH
66421: LD_VAR 0 4
66425: ARRAY
66426: PUSH
66427: LD_INT 1
66429: ARRAY
66430: PPUSH
66431: LD_VAR 0 2
66435: PUSH
66436: LD_VAR 0 4
66440: ARRAY
66441: PUSH
66442: LD_INT 2
66444: ARRAY
66445: PPUSH
66446: CALL_OW 297
66450: ST_TO_ADDR
// if tdist < dist then
66451: LD_VAR 0 6
66455: PUSH
66456: LD_VAR 0 5
66460: LESS
66461: IFFALSE 66489
// begin hex := hexes [ i ] ;
66463: LD_ADDR_VAR 0 8
66467: PUSH
66468: LD_VAR 0 2
66472: PUSH
66473: LD_VAR 0 4
66477: ARRAY
66478: ST_TO_ADDR
// dist := tdist ;
66479: LD_ADDR_VAR 0 5
66483: PUSH
66484: LD_VAR 0 6
66488: ST_TO_ADDR
// end ; end ;
66489: GO 66403
66491: POP
66492: POP
// result := hex ;
66493: LD_ADDR_VAR 0 3
66497: PUSH
66498: LD_VAR 0 8
66502: ST_TO_ADDR
// end ;
66503: LD_VAR 0 3
66507: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66508: LD_INT 0
66510: PPUSH
66511: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66512: LD_VAR 0 1
66516: NOT
66517: IFTRUE 66556
66519: PUSH
66520: LD_VAR 0 1
66524: PUSH
66525: LD_INT 21
66527: PUSH
66528: LD_INT 2
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 23
66537: PUSH
66538: LD_INT 2
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PPUSH
66549: CALL_OW 69
66553: IN
66554: NOT
66555: OR
66556: IFFALSE 66560
// exit ;
66558: GO 66607
// for i = 1 to 3 do
66560: LD_ADDR_VAR 0 3
66564: PUSH
66565: DOUBLE
66566: LD_INT 1
66568: DEC
66569: ST_TO_ADDR
66570: LD_INT 3
66572: PUSH
66573: FOR_TO
66574: IFFALSE 66605
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66576: LD_VAR 0 1
66580: PPUSH
66581: CALL_OW 250
66585: PPUSH
66586: LD_VAR 0 1
66590: PPUSH
66591: CALL_OW 251
66595: PPUSH
66596: LD_INT 1
66598: PPUSH
66599: CALL_OW 453
66603: GO 66573
66605: POP
66606: POP
// end ;
66607: LD_VAR 0 2
66611: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66612: LD_INT 0
66614: PPUSH
66615: PPUSH
66616: PPUSH
66617: PPUSH
66618: PPUSH
66619: PPUSH
// if not unit or not enemy_unit then
66620: LD_VAR 0 1
66624: NOT
66625: IFTRUE 66634
66627: PUSH
66628: LD_VAR 0 2
66632: NOT
66633: OR
66634: IFFALSE 66638
// exit ;
66636: GO 67109
// if GetLives ( i ) < 250 then
66638: LD_VAR 0 4
66642: PPUSH
66643: CALL_OW 256
66647: PUSH
66648: LD_INT 250
66650: LESS
66651: IFFALSE 66664
// begin ComAutodestruct ( i ) ;
66653: LD_VAR 0 4
66657: PPUSH
66658: CALL 66508 0 1
// exit ;
66662: GO 67109
// end ; x := GetX ( enemy_unit ) ;
66664: LD_ADDR_VAR 0 7
66668: PUSH
66669: LD_VAR 0 2
66673: PPUSH
66674: CALL_OW 250
66678: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66679: LD_ADDR_VAR 0 8
66683: PUSH
66684: LD_VAR 0 2
66688: PPUSH
66689: CALL_OW 251
66693: ST_TO_ADDR
// if not x or not y then
66694: LD_VAR 0 7
66698: NOT
66699: IFTRUE 66708
66701: PUSH
66702: LD_VAR 0 8
66706: NOT
66707: OR
66708: IFFALSE 66712
// exit ;
66710: GO 67109
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66712: LD_ADDR_VAR 0 6
66716: PUSH
66717: LD_VAR 0 7
66721: PPUSH
66722: LD_INT 0
66724: PPUSH
66725: LD_INT 4
66727: PPUSH
66728: CALL_OW 272
66732: PUSH
66733: LD_VAR 0 8
66737: PPUSH
66738: LD_INT 0
66740: PPUSH
66741: LD_INT 4
66743: PPUSH
66744: CALL_OW 273
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_VAR 0 7
66757: PPUSH
66758: LD_INT 1
66760: PPUSH
66761: LD_INT 4
66763: PPUSH
66764: CALL_OW 272
66768: PUSH
66769: LD_VAR 0 8
66773: PPUSH
66774: LD_INT 1
66776: PPUSH
66777: LD_INT 4
66779: PPUSH
66780: CALL_OW 273
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_VAR 0 7
66793: PPUSH
66794: LD_INT 2
66796: PPUSH
66797: LD_INT 4
66799: PPUSH
66800: CALL_OW 272
66804: PUSH
66805: LD_VAR 0 8
66809: PPUSH
66810: LD_INT 2
66812: PPUSH
66813: LD_INT 4
66815: PPUSH
66816: CALL_OW 273
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_VAR 0 7
66829: PPUSH
66830: LD_INT 3
66832: PPUSH
66833: LD_INT 4
66835: PPUSH
66836: CALL_OW 272
66840: PUSH
66841: LD_VAR 0 8
66845: PPUSH
66846: LD_INT 3
66848: PPUSH
66849: LD_INT 4
66851: PPUSH
66852: CALL_OW 273
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_VAR 0 7
66865: PPUSH
66866: LD_INT 4
66868: PPUSH
66869: LD_INT 4
66871: PPUSH
66872: CALL_OW 272
66876: PUSH
66877: LD_VAR 0 8
66881: PPUSH
66882: LD_INT 4
66884: PPUSH
66885: LD_INT 4
66887: PPUSH
66888: CALL_OW 273
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_VAR 0 7
66901: PPUSH
66902: LD_INT 5
66904: PPUSH
66905: LD_INT 4
66907: PPUSH
66908: CALL_OW 272
66912: PUSH
66913: LD_VAR 0 8
66917: PPUSH
66918: LD_INT 5
66920: PPUSH
66921: LD_INT 4
66923: PPUSH
66924: CALL_OW 273
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: ST_TO_ADDR
// for i = tmp downto 1 do
66941: LD_ADDR_VAR 0 4
66945: PUSH
66946: DOUBLE
66947: LD_VAR 0 6
66951: INC
66952: ST_TO_ADDR
66953: LD_INT 1
66955: PUSH
66956: FOR_DOWNTO
66957: IFFALSE 67060
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66959: LD_VAR 0 6
66963: PUSH
66964: LD_VAR 0 4
66968: ARRAY
66969: PUSH
66970: LD_INT 1
66972: ARRAY
66973: PPUSH
66974: LD_VAR 0 6
66978: PUSH
66979: LD_VAR 0 4
66983: ARRAY
66984: PUSH
66985: LD_INT 2
66987: ARRAY
66988: PPUSH
66989: CALL_OW 488
66993: NOT
66994: IFTRUE 67036
66996: PUSH
66997: LD_VAR 0 6
67001: PUSH
67002: LD_VAR 0 4
67006: ARRAY
67007: PUSH
67008: LD_INT 1
67010: ARRAY
67011: PPUSH
67012: LD_VAR 0 6
67016: PUSH
67017: LD_VAR 0 4
67021: ARRAY
67022: PUSH
67023: LD_INT 2
67025: ARRAY
67026: PPUSH
67027: CALL_OW 428
67031: PUSH
67032: LD_INT 0
67034: NONEQUAL
67035: OR
67036: IFFALSE 67058
// tmp := Delete ( tmp , i ) ;
67038: LD_ADDR_VAR 0 6
67042: PUSH
67043: LD_VAR 0 6
67047: PPUSH
67048: LD_VAR 0 4
67052: PPUSH
67053: CALL_OW 3
67057: ST_TO_ADDR
67058: GO 66956
67060: POP
67061: POP
// j := GetClosestHex ( unit , tmp ) ;
67062: LD_ADDR_VAR 0 5
67066: PUSH
67067: LD_VAR 0 1
67071: PPUSH
67072: LD_VAR 0 6
67076: PPUSH
67077: CALL 66354 0 2
67081: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67082: LD_VAR 0 1
67086: PPUSH
67087: LD_VAR 0 5
67091: PUSH
67092: LD_INT 1
67094: ARRAY
67095: PPUSH
67096: LD_VAR 0 5
67100: PUSH
67101: LD_INT 2
67103: ARRAY
67104: PPUSH
67105: CALL_OW 111
// end ;
67109: LD_VAR 0 3
67113: RET
// export function PrepareApemanSoldier ( ) ; begin
67114: LD_INT 0
67116: PPUSH
// uc_nation := 0 ;
67117: LD_ADDR_OWVAR 21
67121: PUSH
67122: LD_INT 0
67124: ST_TO_ADDR
// hc_sex := sex_male ;
67125: LD_ADDR_OWVAR 27
67129: PUSH
67130: LD_INT 1
67132: ST_TO_ADDR
// hc_name :=  ;
67133: LD_ADDR_OWVAR 26
67137: PUSH
67138: LD_STRING 
67140: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67141: LD_ADDR_OWVAR 28
67145: PUSH
67146: LD_INT 15
67148: ST_TO_ADDR
// hc_gallery :=  ;
67149: LD_ADDR_OWVAR 33
67153: PUSH
67154: LD_STRING 
67156: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67157: LD_ADDR_OWVAR 31
67161: PUSH
67162: LD_INT 0
67164: PPUSH
67165: LD_INT 3
67167: PPUSH
67168: CALL_OW 12
67172: PUSH
67173: LD_INT 0
67175: PPUSH
67176: LD_INT 3
67178: PPUSH
67179: CALL_OW 12
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: LD_INT 0
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67196: LD_ADDR_OWVAR 29
67200: PUSH
67201: LD_INT 12
67203: PUSH
67204: LD_INT 12
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: ST_TO_ADDR
// end ;
67211: LD_VAR 0 1
67215: RET
// export function PrepareApemanEngineer ( ) ; begin
67216: LD_INT 0
67218: PPUSH
// uc_nation := 0 ;
67219: LD_ADDR_OWVAR 21
67223: PUSH
67224: LD_INT 0
67226: ST_TO_ADDR
// hc_sex := sex_male ;
67227: LD_ADDR_OWVAR 27
67231: PUSH
67232: LD_INT 1
67234: ST_TO_ADDR
// hc_name :=  ;
67235: LD_ADDR_OWVAR 26
67239: PUSH
67240: LD_STRING 
67242: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67243: LD_ADDR_OWVAR 28
67247: PUSH
67248: LD_INT 16
67250: ST_TO_ADDR
// hc_gallery :=  ;
67251: LD_ADDR_OWVAR 33
67255: PUSH
67256: LD_STRING 
67258: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67259: LD_ADDR_OWVAR 31
67263: PUSH
67264: LD_INT 0
67266: PPUSH
67267: LD_INT 3
67269: PPUSH
67270: CALL_OW 12
67274: PUSH
67275: LD_INT 0
67277: PPUSH
67278: LD_INT 3
67280: PPUSH
67281: CALL_OW 12
67285: PUSH
67286: LD_INT 0
67288: PUSH
67289: LD_INT 0
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67298: LD_ADDR_OWVAR 29
67302: PUSH
67303: LD_INT 12
67305: PUSH
67306: LD_INT 12
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: ST_TO_ADDR
// end ;
67313: LD_VAR 0 1
67317: RET
// export function PrepareApeman ( agressivity ) ; begin
67318: LD_INT 0
67320: PPUSH
// uc_side := 0 ;
67321: LD_ADDR_OWVAR 20
67325: PUSH
67326: LD_INT 0
67328: ST_TO_ADDR
// uc_nation := 0 ;
67329: LD_ADDR_OWVAR 21
67333: PUSH
67334: LD_INT 0
67336: ST_TO_ADDR
// hc_sex := sex_male ;
67337: LD_ADDR_OWVAR 27
67341: PUSH
67342: LD_INT 1
67344: ST_TO_ADDR
// hc_class := class_apeman ;
67345: LD_ADDR_OWVAR 28
67349: PUSH
67350: LD_INT 12
67352: ST_TO_ADDR
// hc_gallery :=  ;
67353: LD_ADDR_OWVAR 33
67357: PUSH
67358: LD_STRING 
67360: ST_TO_ADDR
// hc_name :=  ;
67361: LD_ADDR_OWVAR 26
67365: PUSH
67366: LD_STRING 
67368: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67369: LD_ADDR_OWVAR 29
67373: PUSH
67374: LD_INT 12
67376: PUSH
67377: LD_INT 12
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: ST_TO_ADDR
// if agressivity = 0 then
67384: LD_VAR 0 1
67388: PUSH
67389: LD_INT 0
67391: EQUAL
67392: IFFALSE 67404
// hc_agressivity := 0 else
67394: LD_ADDR_OWVAR 35
67398: PUSH
67399: LD_INT 0
67401: ST_TO_ADDR
67402: GO 67425
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67404: LD_ADDR_OWVAR 35
67408: PUSH
67409: LD_VAR 0 1
67413: NEG
67414: PPUSH
67415: LD_VAR 0 1
67419: PPUSH
67420: CALL_OW 12
67424: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67425: LD_ADDR_OWVAR 31
67429: PUSH
67430: LD_INT 0
67432: PPUSH
67433: LD_INT 3
67435: PPUSH
67436: CALL_OW 12
67440: PUSH
67441: LD_INT 0
67443: PPUSH
67444: LD_INT 3
67446: PPUSH
67447: CALL_OW 12
67451: PUSH
67452: LD_INT 0
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: ST_TO_ADDR
// end ;
67464: LD_VAR 0 2
67468: RET
// export function PrepareTiger ( agressivity ) ; begin
67469: LD_INT 0
67471: PPUSH
// uc_side := 0 ;
67472: LD_ADDR_OWVAR 20
67476: PUSH
67477: LD_INT 0
67479: ST_TO_ADDR
// uc_nation := 0 ;
67480: LD_ADDR_OWVAR 21
67484: PUSH
67485: LD_INT 0
67487: ST_TO_ADDR
// InitHc ;
67488: CALL_OW 19
// hc_class := class_tiger ;
67492: LD_ADDR_OWVAR 28
67496: PUSH
67497: LD_INT 14
67499: ST_TO_ADDR
// hc_gallery :=  ;
67500: LD_ADDR_OWVAR 33
67504: PUSH
67505: LD_STRING 
67507: ST_TO_ADDR
// hc_name :=  ;
67508: LD_ADDR_OWVAR 26
67512: PUSH
67513: LD_STRING 
67515: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67516: LD_ADDR_OWVAR 35
67520: PUSH
67521: LD_VAR 0 1
67525: NEG
67526: PPUSH
67527: LD_VAR 0 1
67531: PPUSH
67532: CALL_OW 12
67536: ST_TO_ADDR
// end ;
67537: LD_VAR 0 2
67541: RET
// export function PrepareEnchidna ( ) ; begin
67542: LD_INT 0
67544: PPUSH
// uc_side := 0 ;
67545: LD_ADDR_OWVAR 20
67549: PUSH
67550: LD_INT 0
67552: ST_TO_ADDR
// uc_nation := 0 ;
67553: LD_ADDR_OWVAR 21
67557: PUSH
67558: LD_INT 0
67560: ST_TO_ADDR
// InitHc ;
67561: CALL_OW 19
// hc_class := class_baggie ;
67565: LD_ADDR_OWVAR 28
67569: PUSH
67570: LD_INT 13
67572: ST_TO_ADDR
// hc_gallery :=  ;
67573: LD_ADDR_OWVAR 33
67577: PUSH
67578: LD_STRING 
67580: ST_TO_ADDR
// hc_name :=  ;
67581: LD_ADDR_OWVAR 26
67585: PUSH
67586: LD_STRING 
67588: ST_TO_ADDR
// end ;
67589: LD_VAR 0 1
67593: RET
// export function PrepareFrog ( ) ; begin
67594: LD_INT 0
67596: PPUSH
// uc_side := 0 ;
67597: LD_ADDR_OWVAR 20
67601: PUSH
67602: LD_INT 0
67604: ST_TO_ADDR
// uc_nation := 0 ;
67605: LD_ADDR_OWVAR 21
67609: PUSH
67610: LD_INT 0
67612: ST_TO_ADDR
// InitHc ;
67613: CALL_OW 19
// hc_class := class_frog ;
67617: LD_ADDR_OWVAR 28
67621: PUSH
67622: LD_INT 19
67624: ST_TO_ADDR
// hc_gallery :=  ;
67625: LD_ADDR_OWVAR 33
67629: PUSH
67630: LD_STRING 
67632: ST_TO_ADDR
// hc_name :=  ;
67633: LD_ADDR_OWVAR 26
67637: PUSH
67638: LD_STRING 
67640: ST_TO_ADDR
// end ;
67641: LD_VAR 0 1
67645: RET
// export function PrepareFish ( ) ; begin
67646: LD_INT 0
67648: PPUSH
// uc_side := 0 ;
67649: LD_ADDR_OWVAR 20
67653: PUSH
67654: LD_INT 0
67656: ST_TO_ADDR
// uc_nation := 0 ;
67657: LD_ADDR_OWVAR 21
67661: PUSH
67662: LD_INT 0
67664: ST_TO_ADDR
// InitHc ;
67665: CALL_OW 19
// hc_class := class_fish ;
67669: LD_ADDR_OWVAR 28
67673: PUSH
67674: LD_INT 20
67676: ST_TO_ADDR
// hc_gallery :=  ;
67677: LD_ADDR_OWVAR 33
67681: PUSH
67682: LD_STRING 
67684: ST_TO_ADDR
// hc_name :=  ;
67685: LD_ADDR_OWVAR 26
67689: PUSH
67690: LD_STRING 
67692: ST_TO_ADDR
// end ;
67693: LD_VAR 0 1
67697: RET
// export function PrepareBird ( ) ; begin
67698: LD_INT 0
67700: PPUSH
// uc_side := 0 ;
67701: LD_ADDR_OWVAR 20
67705: PUSH
67706: LD_INT 0
67708: ST_TO_ADDR
// uc_nation := 0 ;
67709: LD_ADDR_OWVAR 21
67713: PUSH
67714: LD_INT 0
67716: ST_TO_ADDR
// InitHc ;
67717: CALL_OW 19
// hc_class := class_phororhacos ;
67721: LD_ADDR_OWVAR 28
67725: PUSH
67726: LD_INT 18
67728: ST_TO_ADDR
// hc_gallery :=  ;
67729: LD_ADDR_OWVAR 33
67733: PUSH
67734: LD_STRING 
67736: ST_TO_ADDR
// hc_name :=  ;
67737: LD_ADDR_OWVAR 26
67741: PUSH
67742: LD_STRING 
67744: ST_TO_ADDR
// end ;
67745: LD_VAR 0 1
67749: RET
// export function PrepareHorse ( ) ; begin
67750: LD_INT 0
67752: PPUSH
// uc_side := 0 ;
67753: LD_ADDR_OWVAR 20
67757: PUSH
67758: LD_INT 0
67760: ST_TO_ADDR
// uc_nation := 0 ;
67761: LD_ADDR_OWVAR 21
67765: PUSH
67766: LD_INT 0
67768: ST_TO_ADDR
// InitHc ;
67769: CALL_OW 19
// hc_class := class_horse ;
67773: LD_ADDR_OWVAR 28
67777: PUSH
67778: LD_INT 21
67780: ST_TO_ADDR
// hc_gallery :=  ;
67781: LD_ADDR_OWVAR 33
67785: PUSH
67786: LD_STRING 
67788: ST_TO_ADDR
// hc_name :=  ;
67789: LD_ADDR_OWVAR 26
67793: PUSH
67794: LD_STRING 
67796: ST_TO_ADDR
// end ;
67797: LD_VAR 0 1
67801: RET
// export function PrepareMastodont ( ) ; begin
67802: LD_INT 0
67804: PPUSH
// uc_side := 0 ;
67805: LD_ADDR_OWVAR 20
67809: PUSH
67810: LD_INT 0
67812: ST_TO_ADDR
// uc_nation := 0 ;
67813: LD_ADDR_OWVAR 21
67817: PUSH
67818: LD_INT 0
67820: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67821: LD_ADDR_OWVAR 37
67825: PUSH
67826: LD_INT 31
67828: ST_TO_ADDR
// vc_control := control_rider ;
67829: LD_ADDR_OWVAR 38
67833: PUSH
67834: LD_INT 4
67836: ST_TO_ADDR
// end ;
67837: LD_VAR 0 1
67841: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67842: LD_INT 0
67844: PPUSH
67845: PPUSH
67846: PPUSH
// uc_side = 0 ;
67847: LD_ADDR_OWVAR 20
67851: PUSH
67852: LD_INT 0
67854: ST_TO_ADDR
// uc_nation = 0 ;
67855: LD_ADDR_OWVAR 21
67859: PUSH
67860: LD_INT 0
67862: ST_TO_ADDR
// InitHc_All ( ) ;
67863: CALL_OW 584
// InitVc ;
67867: CALL_OW 20
// if mastodonts then
67871: LD_VAR 0 6
67875: IFFALSE 67942
// for i = 1 to mastodonts do
67877: LD_ADDR_VAR 0 11
67881: PUSH
67882: DOUBLE
67883: LD_INT 1
67885: DEC
67886: ST_TO_ADDR
67887: LD_VAR 0 6
67891: PUSH
67892: FOR_TO
67893: IFFALSE 67940
// begin vc_chassis := 31 ;
67895: LD_ADDR_OWVAR 37
67899: PUSH
67900: LD_INT 31
67902: ST_TO_ADDR
// vc_control := control_rider ;
67903: LD_ADDR_OWVAR 38
67907: PUSH
67908: LD_INT 4
67910: ST_TO_ADDR
// animal := CreateVehicle ;
67911: LD_ADDR_VAR 0 12
67915: PUSH
67916: CALL_OW 45
67920: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67921: LD_VAR 0 12
67925: PPUSH
67926: LD_VAR 0 8
67930: PPUSH
67931: LD_INT 0
67933: PPUSH
67934: CALL 70084 0 3
// end ;
67938: GO 67892
67940: POP
67941: POP
// if horses then
67942: LD_VAR 0 5
67946: IFFALSE 68013
// for i = 1 to horses do
67948: LD_ADDR_VAR 0 11
67952: PUSH
67953: DOUBLE
67954: LD_INT 1
67956: DEC
67957: ST_TO_ADDR
67958: LD_VAR 0 5
67962: PUSH
67963: FOR_TO
67964: IFFALSE 68011
// begin hc_class := 21 ;
67966: LD_ADDR_OWVAR 28
67970: PUSH
67971: LD_INT 21
67973: ST_TO_ADDR
// hc_gallery :=  ;
67974: LD_ADDR_OWVAR 33
67978: PUSH
67979: LD_STRING 
67981: ST_TO_ADDR
// animal := CreateHuman ;
67982: LD_ADDR_VAR 0 12
67986: PUSH
67987: CALL_OW 44
67991: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67992: LD_VAR 0 12
67996: PPUSH
67997: LD_VAR 0 8
68001: PPUSH
68002: LD_INT 0
68004: PPUSH
68005: CALL 70084 0 3
// end ;
68009: GO 67963
68011: POP
68012: POP
// if birds then
68013: LD_VAR 0 1
68017: IFFALSE 68084
// for i = 1 to birds do
68019: LD_ADDR_VAR 0 11
68023: PUSH
68024: DOUBLE
68025: LD_INT 1
68027: DEC
68028: ST_TO_ADDR
68029: LD_VAR 0 1
68033: PUSH
68034: FOR_TO
68035: IFFALSE 68082
// begin hc_class := 18 ;
68037: LD_ADDR_OWVAR 28
68041: PUSH
68042: LD_INT 18
68044: ST_TO_ADDR
// hc_gallery =  ;
68045: LD_ADDR_OWVAR 33
68049: PUSH
68050: LD_STRING 
68052: ST_TO_ADDR
// animal := CreateHuman ;
68053: LD_ADDR_VAR 0 12
68057: PUSH
68058: CALL_OW 44
68062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68063: LD_VAR 0 12
68067: PPUSH
68068: LD_VAR 0 8
68072: PPUSH
68073: LD_INT 0
68075: PPUSH
68076: CALL 70084 0 3
// end ;
68080: GO 68034
68082: POP
68083: POP
// if tigers then
68084: LD_VAR 0 2
68088: IFFALSE 68172
// for i = 1 to tigers do
68090: LD_ADDR_VAR 0 11
68094: PUSH
68095: DOUBLE
68096: LD_INT 1
68098: DEC
68099: ST_TO_ADDR
68100: LD_VAR 0 2
68104: PUSH
68105: FOR_TO
68106: IFFALSE 68170
// begin hc_class = class_tiger ;
68108: LD_ADDR_OWVAR 28
68112: PUSH
68113: LD_INT 14
68115: ST_TO_ADDR
// hc_gallery =  ;
68116: LD_ADDR_OWVAR 33
68120: PUSH
68121: LD_STRING 
68123: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68124: LD_ADDR_OWVAR 35
68128: PUSH
68129: LD_INT 7
68131: NEG
68132: PPUSH
68133: LD_INT 7
68135: PPUSH
68136: CALL_OW 12
68140: ST_TO_ADDR
// animal := CreateHuman ;
68141: LD_ADDR_VAR 0 12
68145: PUSH
68146: CALL_OW 44
68150: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68151: LD_VAR 0 12
68155: PPUSH
68156: LD_VAR 0 8
68160: PPUSH
68161: LD_INT 0
68163: PPUSH
68164: CALL 70084 0 3
// end ;
68168: GO 68105
68170: POP
68171: POP
// if apemans then
68172: LD_VAR 0 3
68176: IFFALSE 68299
// for i = 1 to apemans do
68178: LD_ADDR_VAR 0 11
68182: PUSH
68183: DOUBLE
68184: LD_INT 1
68186: DEC
68187: ST_TO_ADDR
68188: LD_VAR 0 3
68192: PUSH
68193: FOR_TO
68194: IFFALSE 68297
// begin hc_class = class_apeman ;
68196: LD_ADDR_OWVAR 28
68200: PUSH
68201: LD_INT 12
68203: ST_TO_ADDR
// hc_gallery =  ;
68204: LD_ADDR_OWVAR 33
68208: PUSH
68209: LD_STRING 
68211: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68212: LD_ADDR_OWVAR 35
68216: PUSH
68217: LD_INT 2
68219: NEG
68220: PPUSH
68221: LD_INT 2
68223: PPUSH
68224: CALL_OW 12
68228: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68229: LD_ADDR_OWVAR 31
68233: PUSH
68234: LD_INT 1
68236: PPUSH
68237: LD_INT 3
68239: PPUSH
68240: CALL_OW 12
68244: PUSH
68245: LD_INT 1
68247: PPUSH
68248: LD_INT 3
68250: PPUSH
68251: CALL_OW 12
68255: PUSH
68256: LD_INT 0
68258: PUSH
68259: LD_INT 0
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: ST_TO_ADDR
// animal := CreateHuman ;
68268: LD_ADDR_VAR 0 12
68272: PUSH
68273: CALL_OW 44
68277: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68278: LD_VAR 0 12
68282: PPUSH
68283: LD_VAR 0 8
68287: PPUSH
68288: LD_INT 0
68290: PPUSH
68291: CALL 70084 0 3
// end ;
68295: GO 68193
68297: POP
68298: POP
// if enchidnas then
68299: LD_VAR 0 4
68303: IFFALSE 68370
// for i = 1 to enchidnas do
68305: LD_ADDR_VAR 0 11
68309: PUSH
68310: DOUBLE
68311: LD_INT 1
68313: DEC
68314: ST_TO_ADDR
68315: LD_VAR 0 4
68319: PUSH
68320: FOR_TO
68321: IFFALSE 68368
// begin hc_class = 13 ;
68323: LD_ADDR_OWVAR 28
68327: PUSH
68328: LD_INT 13
68330: ST_TO_ADDR
// hc_gallery =  ;
68331: LD_ADDR_OWVAR 33
68335: PUSH
68336: LD_STRING 
68338: ST_TO_ADDR
// animal := CreateHuman ;
68339: LD_ADDR_VAR 0 12
68343: PUSH
68344: CALL_OW 44
68348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68349: LD_VAR 0 12
68353: PPUSH
68354: LD_VAR 0 8
68358: PPUSH
68359: LD_INT 0
68361: PPUSH
68362: CALL 70084 0 3
// end ;
68366: GO 68320
68368: POP
68369: POP
// if fishes then
68370: LD_VAR 0 7
68374: IFFALSE 68441
// for i = 1 to fishes do
68376: LD_ADDR_VAR 0 11
68380: PUSH
68381: DOUBLE
68382: LD_INT 1
68384: DEC
68385: ST_TO_ADDR
68386: LD_VAR 0 7
68390: PUSH
68391: FOR_TO
68392: IFFALSE 68439
// begin hc_class = 20 ;
68394: LD_ADDR_OWVAR 28
68398: PUSH
68399: LD_INT 20
68401: ST_TO_ADDR
// hc_gallery =  ;
68402: LD_ADDR_OWVAR 33
68406: PUSH
68407: LD_STRING 
68409: ST_TO_ADDR
// animal := CreateHuman ;
68410: LD_ADDR_VAR 0 12
68414: PUSH
68415: CALL_OW 44
68419: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68420: LD_VAR 0 12
68424: PPUSH
68425: LD_VAR 0 9
68429: PPUSH
68430: LD_INT 0
68432: PPUSH
68433: CALL 70084 0 3
// end ;
68437: GO 68391
68439: POP
68440: POP
// end ;
68441: LD_VAR 0 10
68445: RET
// export function WantHeal ( sci , unit ) ; begin
68446: LD_INT 0
68448: PPUSH
// if GetTaskList ( sci ) > 0 then
68449: LD_VAR 0 1
68453: PPUSH
68454: CALL_OW 437
68458: PUSH
68459: LD_INT 0
68461: GREATER
68462: IFFALSE 68534
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68464: LD_VAR 0 1
68468: PPUSH
68469: CALL_OW 437
68473: PUSH
68474: LD_INT 1
68476: ARRAY
68477: PUSH
68478: LD_INT 1
68480: ARRAY
68481: PUSH
68482: LD_STRING l
68484: EQUAL
68485: IFFALSE 68512
68487: PUSH
68488: LD_VAR 0 1
68492: PPUSH
68493: CALL_OW 437
68497: PUSH
68498: LD_INT 1
68500: ARRAY
68501: PUSH
68502: LD_INT 4
68504: ARRAY
68505: PUSH
68506: LD_VAR 0 2
68510: EQUAL
68511: AND
68512: IFFALSE 68524
// result := true else
68514: LD_ADDR_VAR 0 3
68518: PUSH
68519: LD_INT 1
68521: ST_TO_ADDR
68522: GO 68532
// result := false ;
68524: LD_ADDR_VAR 0 3
68528: PUSH
68529: LD_INT 0
68531: ST_TO_ADDR
// end else
68532: GO 68542
// result := false ;
68534: LD_ADDR_VAR 0 3
68538: PUSH
68539: LD_INT 0
68541: ST_TO_ADDR
// end ;
68542: LD_VAR 0 3
68546: RET
// export function HealTarget ( sci ) ; begin
68547: LD_INT 0
68549: PPUSH
// if not sci then
68550: LD_VAR 0 1
68554: NOT
68555: IFFALSE 68559
// exit ;
68557: GO 68624
// result := 0 ;
68559: LD_ADDR_VAR 0 2
68563: PUSH
68564: LD_INT 0
68566: ST_TO_ADDR
// if GetTaskList ( sci ) then
68567: LD_VAR 0 1
68571: PPUSH
68572: CALL_OW 437
68576: IFFALSE 68624
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68578: LD_VAR 0 1
68582: PPUSH
68583: CALL_OW 437
68587: PUSH
68588: LD_INT 1
68590: ARRAY
68591: PUSH
68592: LD_INT 1
68594: ARRAY
68595: PUSH
68596: LD_STRING l
68598: EQUAL
68599: IFFALSE 68624
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68601: LD_ADDR_VAR 0 2
68605: PUSH
68606: LD_VAR 0 1
68610: PPUSH
68611: CALL_OW 437
68615: PUSH
68616: LD_INT 1
68618: ARRAY
68619: PUSH
68620: LD_INT 4
68622: ARRAY
68623: ST_TO_ADDR
// end ;
68624: LD_VAR 0 2
68628: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68629: LD_INT 0
68631: PPUSH
68632: PPUSH
68633: PPUSH
68634: PPUSH
// if not base_units then
68635: LD_VAR 0 1
68639: NOT
68640: IFFALSE 68644
// exit ;
68642: GO 68731
// result := false ;
68644: LD_ADDR_VAR 0 2
68648: PUSH
68649: LD_INT 0
68651: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68652: LD_ADDR_VAR 0 5
68656: PUSH
68657: LD_VAR 0 1
68661: PPUSH
68662: LD_INT 21
68664: PUSH
68665: LD_INT 3
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PPUSH
68672: CALL_OW 72
68676: ST_TO_ADDR
// if not tmp then
68677: LD_VAR 0 5
68681: NOT
68682: IFFALSE 68686
// exit ;
68684: GO 68731
// for i in tmp do
68686: LD_ADDR_VAR 0 3
68690: PUSH
68691: LD_VAR 0 5
68695: PUSH
68696: FOR_IN
68697: IFFALSE 68729
// begin result := EnemyInRange ( i , 22 ) ;
68699: LD_ADDR_VAR 0 2
68703: PUSH
68704: LD_VAR 0 3
68708: PPUSH
68709: LD_INT 22
68711: PPUSH
68712: CALL 66156 0 2
68716: ST_TO_ADDR
// if result then
68717: LD_VAR 0 2
68721: IFFALSE 68727
// exit ;
68723: POP
68724: POP
68725: GO 68731
// end ;
68727: GO 68696
68729: POP
68730: POP
// end ;
68731: LD_VAR 0 2
68735: RET
// export function FilterByTag ( units , tag ) ; begin
68736: LD_INT 0
68738: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68739: LD_ADDR_VAR 0 3
68743: PUSH
68744: LD_VAR 0 1
68748: PPUSH
68749: LD_INT 120
68751: PUSH
68752: LD_VAR 0 2
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PPUSH
68761: CALL_OW 72
68765: ST_TO_ADDR
// end ;
68766: LD_VAR 0 3
68770: RET
// export function IsDriver ( un ) ; begin
68771: LD_INT 0
68773: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68774: LD_ADDR_VAR 0 2
68778: PUSH
68779: LD_VAR 0 1
68783: PUSH
68784: LD_INT 55
68786: PUSH
68787: EMPTY
68788: LIST
68789: PPUSH
68790: CALL_OW 69
68794: IN
68795: ST_TO_ADDR
// end ;
68796: LD_VAR 0 2
68800: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68801: LD_INT 0
68803: PPUSH
68804: PPUSH
// list := [ ] ;
68805: LD_ADDR_VAR 0 5
68809: PUSH
68810: EMPTY
68811: ST_TO_ADDR
// case d of 0 :
68812: LD_VAR 0 3
68816: PUSH
68817: LD_INT 0
68819: DOUBLE
68820: EQUAL
68821: IFTRUE 68825
68823: GO 68958
68825: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68826: LD_ADDR_VAR 0 5
68830: PUSH
68831: LD_VAR 0 1
68835: PUSH
68836: LD_INT 4
68838: MINUS
68839: PUSH
68840: LD_VAR 0 2
68844: PUSH
68845: LD_INT 4
68847: MINUS
68848: PUSH
68849: LD_INT 2
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: LIST
68856: PUSH
68857: LD_VAR 0 1
68861: PUSH
68862: LD_INT 3
68864: MINUS
68865: PUSH
68866: LD_VAR 0 2
68870: PUSH
68871: LD_INT 1
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: LIST
68878: PUSH
68879: LD_VAR 0 1
68883: PUSH
68884: LD_INT 4
68886: PLUS
68887: PUSH
68888: LD_VAR 0 2
68892: PUSH
68893: LD_INT 4
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: LIST
68900: PUSH
68901: LD_VAR 0 1
68905: PUSH
68906: LD_INT 3
68908: PLUS
68909: PUSH
68910: LD_VAR 0 2
68914: PUSH
68915: LD_INT 3
68917: PLUS
68918: PUSH
68919: LD_INT 5
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: LIST
68926: PUSH
68927: LD_VAR 0 1
68931: PUSH
68932: LD_VAR 0 2
68936: PUSH
68937: LD_INT 4
68939: PLUS
68940: PUSH
68941: LD_INT 0
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: LIST
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: ST_TO_ADDR
// end ; 1 :
68956: GO 69656
68958: LD_INT 1
68960: DOUBLE
68961: EQUAL
68962: IFTRUE 68966
68964: GO 69099
68966: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68967: LD_ADDR_VAR 0 5
68971: PUSH
68972: LD_VAR 0 1
68976: PUSH
68977: LD_VAR 0 2
68981: PUSH
68982: LD_INT 4
68984: MINUS
68985: PUSH
68986: LD_INT 3
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: LIST
68993: PUSH
68994: LD_VAR 0 1
68998: PUSH
68999: LD_INT 3
69001: MINUS
69002: PUSH
69003: LD_VAR 0 2
69007: PUSH
69008: LD_INT 3
69010: MINUS
69011: PUSH
69012: LD_INT 2
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: LIST
69019: PUSH
69020: LD_VAR 0 1
69024: PUSH
69025: LD_INT 4
69027: MINUS
69028: PUSH
69029: LD_VAR 0 2
69033: PUSH
69034: LD_INT 1
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: LIST
69041: PUSH
69042: LD_VAR 0 1
69046: PUSH
69047: LD_VAR 0 2
69051: PUSH
69052: LD_INT 3
69054: PLUS
69055: PUSH
69056: LD_INT 0
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: LIST
69063: PUSH
69064: LD_VAR 0 1
69068: PUSH
69069: LD_INT 4
69071: PLUS
69072: PUSH
69073: LD_VAR 0 2
69077: PUSH
69078: LD_INT 4
69080: PLUS
69081: PUSH
69082: LD_INT 5
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: LIST
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: ST_TO_ADDR
// end ; 2 :
69097: GO 69656
69099: LD_INT 2
69101: DOUBLE
69102: EQUAL
69103: IFTRUE 69107
69105: GO 69236
69107: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69108: LD_ADDR_VAR 0 5
69112: PUSH
69113: LD_VAR 0 1
69117: PUSH
69118: LD_VAR 0 2
69122: PUSH
69123: LD_INT 3
69125: MINUS
69126: PUSH
69127: LD_INT 3
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: LIST
69134: PUSH
69135: LD_VAR 0 1
69139: PUSH
69140: LD_INT 4
69142: PLUS
69143: PUSH
69144: LD_VAR 0 2
69148: PUSH
69149: LD_INT 4
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: LIST
69156: PUSH
69157: LD_VAR 0 1
69161: PUSH
69162: LD_VAR 0 2
69166: PUSH
69167: LD_INT 4
69169: PLUS
69170: PUSH
69171: LD_INT 0
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: LIST
69178: PUSH
69179: LD_VAR 0 1
69183: PUSH
69184: LD_INT 3
69186: MINUS
69187: PUSH
69188: LD_VAR 0 2
69192: PUSH
69193: LD_INT 1
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: LIST
69200: PUSH
69201: LD_VAR 0 1
69205: PUSH
69206: LD_INT 4
69208: MINUS
69209: PUSH
69210: LD_VAR 0 2
69214: PUSH
69215: LD_INT 4
69217: MINUS
69218: PUSH
69219: LD_INT 2
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: LIST
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: ST_TO_ADDR
// end ; 3 :
69234: GO 69656
69236: LD_INT 3
69238: DOUBLE
69239: EQUAL
69240: IFTRUE 69244
69242: GO 69377
69244: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69245: LD_ADDR_VAR 0 5
69249: PUSH
69250: LD_VAR 0 1
69254: PUSH
69255: LD_INT 3
69257: PLUS
69258: PUSH
69259: LD_VAR 0 2
69263: PUSH
69264: LD_INT 4
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: LIST
69271: PUSH
69272: LD_VAR 0 1
69276: PUSH
69277: LD_INT 4
69279: PLUS
69280: PUSH
69281: LD_VAR 0 2
69285: PUSH
69286: LD_INT 4
69288: PLUS
69289: PUSH
69290: LD_INT 5
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: LIST
69297: PUSH
69298: LD_VAR 0 1
69302: PUSH
69303: LD_INT 4
69305: MINUS
69306: PUSH
69307: LD_VAR 0 2
69311: PUSH
69312: LD_INT 1
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: LIST
69319: PUSH
69320: LD_VAR 0 1
69324: PUSH
69325: LD_VAR 0 2
69329: PUSH
69330: LD_INT 4
69332: MINUS
69333: PUSH
69334: LD_INT 3
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: LIST
69341: PUSH
69342: LD_VAR 0 1
69346: PUSH
69347: LD_INT 3
69349: MINUS
69350: PUSH
69351: LD_VAR 0 2
69355: PUSH
69356: LD_INT 3
69358: MINUS
69359: PUSH
69360: LD_INT 2
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: LIST
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: ST_TO_ADDR
// end ; 4 :
69375: GO 69656
69377: LD_INT 4
69379: DOUBLE
69380: EQUAL
69381: IFTRUE 69385
69383: GO 69518
69385: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69386: LD_ADDR_VAR 0 5
69390: PUSH
69391: LD_VAR 0 1
69395: PUSH
69396: LD_VAR 0 2
69400: PUSH
69401: LD_INT 4
69403: PLUS
69404: PUSH
69405: LD_INT 0
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: LIST
69412: PUSH
69413: LD_VAR 0 1
69417: PUSH
69418: LD_INT 3
69420: PLUS
69421: PUSH
69422: LD_VAR 0 2
69426: PUSH
69427: LD_INT 3
69429: PLUS
69430: PUSH
69431: LD_INT 5
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: LIST
69438: PUSH
69439: LD_VAR 0 1
69443: PUSH
69444: LD_INT 4
69446: PLUS
69447: PUSH
69448: LD_VAR 0 2
69452: PUSH
69453: LD_INT 4
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: LIST
69460: PUSH
69461: LD_VAR 0 1
69465: PUSH
69466: LD_VAR 0 2
69470: PUSH
69471: LD_INT 3
69473: MINUS
69474: PUSH
69475: LD_INT 3
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: LIST
69482: PUSH
69483: LD_VAR 0 1
69487: PUSH
69488: LD_INT 4
69490: MINUS
69491: PUSH
69492: LD_VAR 0 2
69496: PUSH
69497: LD_INT 4
69499: MINUS
69500: PUSH
69501: LD_INT 2
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: LIST
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: ST_TO_ADDR
// end ; 5 :
69516: GO 69656
69518: LD_INT 5
69520: DOUBLE
69521: EQUAL
69522: IFTRUE 69526
69524: GO 69655
69526: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69527: LD_ADDR_VAR 0 5
69531: PUSH
69532: LD_VAR 0 1
69536: PUSH
69537: LD_INT 4
69539: MINUS
69540: PUSH
69541: LD_VAR 0 2
69545: PUSH
69546: LD_INT 1
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: LIST
69553: PUSH
69554: LD_VAR 0 1
69558: PUSH
69559: LD_VAR 0 2
69563: PUSH
69564: LD_INT 4
69566: MINUS
69567: PUSH
69568: LD_INT 3
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: LIST
69575: PUSH
69576: LD_VAR 0 1
69580: PUSH
69581: LD_INT 4
69583: PLUS
69584: PUSH
69585: LD_VAR 0 2
69589: PUSH
69590: LD_INT 4
69592: PLUS
69593: PUSH
69594: LD_INT 5
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: LIST
69601: PUSH
69602: LD_VAR 0 1
69606: PUSH
69607: LD_INT 3
69609: PLUS
69610: PUSH
69611: LD_VAR 0 2
69615: PUSH
69616: LD_INT 4
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: LIST
69623: PUSH
69624: LD_VAR 0 1
69628: PUSH
69629: LD_VAR 0 2
69633: PUSH
69634: LD_INT 3
69636: PLUS
69637: PUSH
69638: LD_INT 0
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: LIST
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: ST_TO_ADDR
// end ; end ;
69653: GO 69656
69655: POP
// result := list ;
69656: LD_ADDR_VAR 0 4
69660: PUSH
69661: LD_VAR 0 5
69665: ST_TO_ADDR
// end ;
69666: LD_VAR 0 4
69670: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69671: LD_INT 0
69673: PPUSH
69674: PPUSH
69675: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69676: LD_VAR 0 1
69680: NOT
69681: IFTRUE 69709
69683: PUSH
69684: LD_VAR 0 2
69688: PUSH
69689: LD_INT 1
69691: PUSH
69692: LD_INT 2
69694: PUSH
69695: LD_INT 3
69697: PUSH
69698: LD_INT 4
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: IN
69707: NOT
69708: OR
69709: IFFALSE 69713
// exit ;
69711: GO 69796
// tmp := [ ] ;
69713: LD_ADDR_VAR 0 5
69717: PUSH
69718: EMPTY
69719: ST_TO_ADDR
// for i in units do
69720: LD_ADDR_VAR 0 4
69724: PUSH
69725: LD_VAR 0 1
69729: PUSH
69730: FOR_IN
69731: IFFALSE 69765
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69733: LD_ADDR_VAR 0 5
69737: PUSH
69738: LD_VAR 0 5
69742: PPUSH
69743: LD_VAR 0 4
69747: PPUSH
69748: LD_VAR 0 2
69752: PPUSH
69753: CALL_OW 259
69757: PPUSH
69758: CALL 71191 0 2
69762: ST_TO_ADDR
69763: GO 69730
69765: POP
69766: POP
// if not tmp then
69767: LD_VAR 0 5
69771: NOT
69772: IFFALSE 69776
// exit ;
69774: GO 69796
// result := SortListByListDesc ( units , tmp ) ;
69776: LD_ADDR_VAR 0 3
69780: PUSH
69781: LD_VAR 0 1
69785: PPUSH
69786: LD_VAR 0 5
69790: PPUSH
69791: CALL_OW 77
69795: ST_TO_ADDR
// end ;
69796: LD_VAR 0 3
69800: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69801: LD_INT 0
69803: PPUSH
69804: PPUSH
69805: PPUSH
// result := false ;
69806: LD_ADDR_VAR 0 3
69810: PUSH
69811: LD_INT 0
69813: ST_TO_ADDR
// if not building then
69814: LD_VAR 0 2
69818: NOT
69819: IFFALSE 69823
// exit ;
69821: GO 69967
// x := GetX ( building ) ;
69823: LD_ADDR_VAR 0 4
69827: PUSH
69828: LD_VAR 0 2
69832: PPUSH
69833: CALL_OW 250
69837: ST_TO_ADDR
// y := GetY ( building ) ;
69838: LD_ADDR_VAR 0 5
69842: PUSH
69843: LD_VAR 0 2
69847: PPUSH
69848: CALL_OW 251
69852: ST_TO_ADDR
// if not x or not y then
69853: LD_VAR 0 4
69857: NOT
69858: IFTRUE 69867
69860: PUSH
69861: LD_VAR 0 5
69865: NOT
69866: OR
69867: IFFALSE 69871
// exit ;
69869: GO 69967
// if GetTaskList ( unit ) then
69871: LD_VAR 0 1
69875: PPUSH
69876: CALL_OW 437
69880: IFFALSE 69967
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69882: LD_STRING e
69884: PUSH
69885: LD_VAR 0 1
69889: PPUSH
69890: CALL_OW 437
69894: PUSH
69895: LD_INT 1
69897: ARRAY
69898: PUSH
69899: LD_INT 1
69901: ARRAY
69902: EQUAL
69903: IFFALSE 69930
69905: PUSH
69906: LD_VAR 0 4
69910: PUSH
69911: LD_VAR 0 1
69915: PPUSH
69916: CALL_OW 437
69920: PUSH
69921: LD_INT 1
69923: ARRAY
69924: PUSH
69925: LD_INT 2
69927: ARRAY
69928: EQUAL
69929: AND
69930: IFFALSE 69957
69932: PUSH
69933: LD_VAR 0 5
69937: PUSH
69938: LD_VAR 0 1
69942: PPUSH
69943: CALL_OW 437
69947: PUSH
69948: LD_INT 1
69950: ARRAY
69951: PUSH
69952: LD_INT 3
69954: ARRAY
69955: EQUAL
69956: AND
69957: IFFALSE 69967
// result := true end ;
69959: LD_ADDR_VAR 0 3
69963: PUSH
69964: LD_INT 1
69966: ST_TO_ADDR
// end ;
69967: LD_VAR 0 3
69971: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69972: LD_INT 0
69974: PPUSH
// result := false ;
69975: LD_ADDR_VAR 0 4
69979: PUSH
69980: LD_INT 0
69982: ST_TO_ADDR
// if GetTaskList ( unit ) then
69983: LD_VAR 0 1
69987: PPUSH
69988: CALL_OW 437
69992: IFFALSE 70079
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69994: LD_STRING M
69996: PUSH
69997: LD_VAR 0 1
70001: PPUSH
70002: CALL_OW 437
70006: PUSH
70007: LD_INT 1
70009: ARRAY
70010: PUSH
70011: LD_INT 1
70013: ARRAY
70014: EQUAL
70015: IFFALSE 70042
70017: PUSH
70018: LD_VAR 0 2
70022: PUSH
70023: LD_VAR 0 1
70027: PPUSH
70028: CALL_OW 437
70032: PUSH
70033: LD_INT 1
70035: ARRAY
70036: PUSH
70037: LD_INT 2
70039: ARRAY
70040: EQUAL
70041: AND
70042: IFFALSE 70069
70044: PUSH
70045: LD_VAR 0 3
70049: PUSH
70050: LD_VAR 0 1
70054: PPUSH
70055: CALL_OW 437
70059: PUSH
70060: LD_INT 1
70062: ARRAY
70063: PUSH
70064: LD_INT 3
70066: ARRAY
70067: EQUAL
70068: AND
70069: IFFALSE 70079
// result := true ;
70071: LD_ADDR_VAR 0 4
70075: PUSH
70076: LD_INT 1
70078: ST_TO_ADDR
// end ; end ;
70079: LD_VAR 0 4
70083: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70084: LD_INT 0
70086: PPUSH
70087: PPUSH
70088: PPUSH
70089: PPUSH
// if not unit or not area then
70090: LD_VAR 0 1
70094: NOT
70095: IFTRUE 70104
70097: PUSH
70098: LD_VAR 0 2
70102: NOT
70103: OR
70104: IFFALSE 70108
// exit ;
70106: GO 70284
// tmp := AreaToList ( area , i ) ;
70108: LD_ADDR_VAR 0 6
70112: PUSH
70113: LD_VAR 0 2
70117: PPUSH
70118: LD_VAR 0 5
70122: PPUSH
70123: CALL_OW 517
70127: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70128: LD_ADDR_VAR 0 5
70132: PUSH
70133: DOUBLE
70134: LD_INT 1
70136: DEC
70137: ST_TO_ADDR
70138: LD_VAR 0 6
70142: PUSH
70143: LD_INT 1
70145: ARRAY
70146: PUSH
70147: FOR_TO
70148: IFFALSE 70282
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70150: LD_ADDR_VAR 0 7
70154: PUSH
70155: LD_VAR 0 6
70159: PUSH
70160: LD_INT 1
70162: ARRAY
70163: PUSH
70164: LD_VAR 0 5
70168: ARRAY
70169: PUSH
70170: LD_VAR 0 6
70174: PUSH
70175: LD_INT 2
70177: ARRAY
70178: PUSH
70179: LD_VAR 0 5
70183: ARRAY
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70189: LD_INT 92
70191: PUSH
70192: LD_VAR 0 7
70196: PUSH
70197: LD_INT 1
70199: ARRAY
70200: PUSH
70201: LD_VAR 0 7
70205: PUSH
70206: LD_INT 2
70208: ARRAY
70209: PUSH
70210: LD_INT 2
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: PPUSH
70219: CALL_OW 69
70223: PUSH
70224: LD_INT 0
70226: EQUAL
70227: IFFALSE 70280
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70229: LD_VAR 0 1
70233: PPUSH
70234: LD_VAR 0 7
70238: PUSH
70239: LD_INT 1
70241: ARRAY
70242: PPUSH
70243: LD_VAR 0 7
70247: PUSH
70248: LD_INT 2
70250: ARRAY
70251: PPUSH
70252: LD_VAR 0 3
70256: PPUSH
70257: CALL_OW 48
// result := IsPlaced ( unit ) ;
70261: LD_ADDR_VAR 0 4
70265: PUSH
70266: LD_VAR 0 1
70270: PPUSH
70271: CALL_OW 305
70275: ST_TO_ADDR
// exit ;
70276: POP
70277: POP
70278: GO 70284
// end ; end ;
70280: GO 70147
70282: POP
70283: POP
// end ;
70284: LD_VAR 0 4
70288: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70289: LD_INT 0
70291: PPUSH
70292: PPUSH
70293: PPUSH
// if not side or side > 8 then
70294: LD_VAR 0 1
70298: NOT
70299: IFTRUE 70311
70301: PUSH
70302: LD_VAR 0 1
70306: PUSH
70307: LD_INT 8
70309: GREATER
70310: OR
70311: IFFALSE 70315
// exit ;
70313: GO 70502
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70315: LD_ADDR_VAR 0 4
70319: PUSH
70320: LD_INT 22
70322: PUSH
70323: LD_VAR 0 1
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 21
70334: PUSH
70335: LD_INT 3
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PPUSH
70346: CALL_OW 69
70350: ST_TO_ADDR
// if not tmp then
70351: LD_VAR 0 4
70355: NOT
70356: IFFALSE 70360
// exit ;
70358: GO 70502
// enable_addtolog := true ;
70360: LD_ADDR_OWVAR 81
70364: PUSH
70365: LD_INT 1
70367: ST_TO_ADDR
// AddToLog ( [ ) ;
70368: LD_STRING [
70370: PPUSH
70371: CALL_OW 561
// for i in tmp do
70375: LD_ADDR_VAR 0 3
70379: PUSH
70380: LD_VAR 0 4
70384: PUSH
70385: FOR_IN
70386: IFFALSE 70493
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70388: LD_STRING [
70390: PUSH
70391: LD_VAR 0 3
70395: PPUSH
70396: CALL_OW 266
70400: STR
70401: PUSH
70402: LD_STRING , 
70404: STR
70405: PUSH
70406: LD_VAR 0 3
70410: PPUSH
70411: CALL_OW 250
70415: STR
70416: PUSH
70417: LD_STRING , 
70419: STR
70420: PUSH
70421: LD_VAR 0 3
70425: PPUSH
70426: CALL_OW 251
70430: STR
70431: PUSH
70432: LD_STRING , 
70434: STR
70435: PUSH
70436: LD_VAR 0 3
70440: PPUSH
70441: CALL_OW 254
70445: STR
70446: PUSH
70447: LD_STRING , 
70449: STR
70450: PUSH
70451: LD_VAR 0 3
70455: PPUSH
70456: LD_INT 1
70458: PPUSH
70459: CALL_OW 268
70463: STR
70464: PUSH
70465: LD_STRING , 
70467: STR
70468: PUSH
70469: LD_VAR 0 3
70473: PPUSH
70474: LD_INT 2
70476: PPUSH
70477: CALL_OW 268
70481: STR
70482: PUSH
70483: LD_STRING ],
70485: STR
70486: PPUSH
70487: CALL_OW 561
// end ;
70491: GO 70385
70493: POP
70494: POP
// AddToLog ( ]; ) ;
70495: LD_STRING ];
70497: PPUSH
70498: CALL_OW 561
// end ;
70502: LD_VAR 0 2
70506: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70507: LD_INT 0
70509: PPUSH
70510: PPUSH
70511: PPUSH
70512: PPUSH
70513: PPUSH
// if not area or not rate or not max then
70514: LD_VAR 0 1
70518: NOT
70519: IFTRUE 70528
70521: PUSH
70522: LD_VAR 0 2
70526: NOT
70527: OR
70528: IFTRUE 70537
70530: PUSH
70531: LD_VAR 0 4
70535: NOT
70536: OR
70537: IFFALSE 70541
// exit ;
70539: GO 70730
// while 1 do
70541: LD_INT 1
70543: IFFALSE 70730
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70545: LD_ADDR_VAR 0 9
70549: PUSH
70550: LD_VAR 0 1
70554: PPUSH
70555: LD_INT 1
70557: PPUSH
70558: CALL_OW 287
70562: PUSH
70563: LD_INT 10
70565: MUL
70566: ST_TO_ADDR
// r := rate / 10 ;
70567: LD_ADDR_VAR 0 7
70571: PUSH
70572: LD_VAR 0 2
70576: PUSH
70577: LD_INT 10
70579: DIVREAL
70580: ST_TO_ADDR
// time := 1 1$00 ;
70581: LD_ADDR_VAR 0 8
70585: PUSH
70586: LD_INT 2100
70588: ST_TO_ADDR
// if amount < min then
70589: LD_VAR 0 9
70593: PUSH
70594: LD_VAR 0 3
70598: LESS
70599: IFFALSE 70617
// r := r * 2 else
70601: LD_ADDR_VAR 0 7
70605: PUSH
70606: LD_VAR 0 7
70610: PUSH
70611: LD_INT 2
70613: MUL
70614: ST_TO_ADDR
70615: GO 70643
// if amount > max then
70617: LD_VAR 0 9
70621: PUSH
70622: LD_VAR 0 4
70626: GREATER
70627: IFFALSE 70643
// r := r / 2 ;
70629: LD_ADDR_VAR 0 7
70633: PUSH
70634: LD_VAR 0 7
70638: PUSH
70639: LD_INT 2
70641: DIVREAL
70642: ST_TO_ADDR
// time := time / r ;
70643: LD_ADDR_VAR 0 8
70647: PUSH
70648: LD_VAR 0 8
70652: PUSH
70653: LD_VAR 0 7
70657: DIVREAL
70658: ST_TO_ADDR
// if time < 0 then
70659: LD_VAR 0 8
70663: PUSH
70664: LD_INT 0
70666: LESS
70667: IFFALSE 70684
// time := time * - 1 ;
70669: LD_ADDR_VAR 0 8
70673: PUSH
70674: LD_VAR 0 8
70678: PUSH
70679: LD_INT 1
70681: NEG
70682: MUL
70683: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70684: LD_VAR 0 8
70688: PUSH
70689: LD_INT 35
70691: PPUSH
70692: LD_INT 875
70694: PPUSH
70695: CALL_OW 12
70699: PLUS
70700: PPUSH
70701: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70705: LD_INT 1
70707: PPUSH
70708: LD_INT 5
70710: PPUSH
70711: CALL_OW 12
70715: PPUSH
70716: LD_VAR 0 1
70720: PPUSH
70721: LD_INT 1
70723: PPUSH
70724: CALL_OW 55
// end ;
70728: GO 70541
// end ;
70730: LD_VAR 0 5
70734: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70735: LD_INT 0
70737: PPUSH
70738: PPUSH
70739: PPUSH
70740: PPUSH
70741: PPUSH
70742: PPUSH
70743: PPUSH
70744: PPUSH
// if not turrets or not factories then
70745: LD_VAR 0 1
70749: NOT
70750: IFTRUE 70759
70752: PUSH
70753: LD_VAR 0 2
70757: NOT
70758: OR
70759: IFFALSE 70763
// exit ;
70761: GO 71070
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70763: LD_ADDR_VAR 0 10
70767: PUSH
70768: LD_INT 5
70770: PUSH
70771: LD_INT 6
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 2
70780: PUSH
70781: LD_INT 4
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 3
70790: PUSH
70791: LD_INT 5
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 24
70805: PUSH
70806: LD_INT 25
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 23
70815: PUSH
70816: LD_INT 27
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 42
70829: PUSH
70830: LD_INT 43
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 44
70839: PUSH
70840: LD_INT 46
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: LD_INT 45
70849: PUSH
70850: LD_INT 47
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: LIST
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: LIST
70866: ST_TO_ADDR
// result := [ ] ;
70867: LD_ADDR_VAR 0 3
70871: PUSH
70872: EMPTY
70873: ST_TO_ADDR
// for i in turrets do
70874: LD_ADDR_VAR 0 4
70878: PUSH
70879: LD_VAR 0 1
70883: PUSH
70884: FOR_IN
70885: IFFALSE 71068
// begin nat := GetNation ( i ) ;
70887: LD_ADDR_VAR 0 7
70891: PUSH
70892: LD_VAR 0 4
70896: PPUSH
70897: CALL_OW 248
70901: ST_TO_ADDR
// weapon := 0 ;
70902: LD_ADDR_VAR 0 8
70906: PUSH
70907: LD_INT 0
70909: ST_TO_ADDR
// if not nat then
70910: LD_VAR 0 7
70914: NOT
70915: IFFALSE 70919
// continue ;
70917: GO 70884
// for j in list [ nat ] do
70919: LD_ADDR_VAR 0 5
70923: PUSH
70924: LD_VAR 0 10
70928: PUSH
70929: LD_VAR 0 7
70933: ARRAY
70934: PUSH
70935: FOR_IN
70936: IFFALSE 70977
// if GetBWeapon ( i ) = j [ 1 ] then
70938: LD_VAR 0 4
70942: PPUSH
70943: CALL_OW 269
70947: PUSH
70948: LD_VAR 0 5
70952: PUSH
70953: LD_INT 1
70955: ARRAY
70956: EQUAL
70957: IFFALSE 70975
// begin weapon := j [ 2 ] ;
70959: LD_ADDR_VAR 0 8
70963: PUSH
70964: LD_VAR 0 5
70968: PUSH
70969: LD_INT 2
70971: ARRAY
70972: ST_TO_ADDR
// break ;
70973: GO 70977
// end ;
70975: GO 70935
70977: POP
70978: POP
// if not weapon then
70979: LD_VAR 0 8
70983: NOT
70984: IFFALSE 70988
// continue ;
70986: GO 70884
// for k in factories do
70988: LD_ADDR_VAR 0 6
70992: PUSH
70993: LD_VAR 0 2
70997: PUSH
70998: FOR_IN
70999: IFFALSE 71064
// begin weapons := AvailableWeaponList ( k ) ;
71001: LD_ADDR_VAR 0 9
71005: PUSH
71006: LD_VAR 0 6
71010: PPUSH
71011: CALL_OW 478
71015: ST_TO_ADDR
// if not weapons then
71016: LD_VAR 0 9
71020: NOT
71021: IFFALSE 71025
// continue ;
71023: GO 70998
// if weapon in weapons then
71025: LD_VAR 0 8
71029: PUSH
71030: LD_VAR 0 9
71034: IN
71035: IFFALSE 71062
// begin result := [ i , weapon ] ;
71037: LD_ADDR_VAR 0 3
71041: PUSH
71042: LD_VAR 0 4
71046: PUSH
71047: LD_VAR 0 8
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: ST_TO_ADDR
// exit ;
71056: POP
71057: POP
71058: POP
71059: POP
71060: GO 71070
// end ; end ;
71062: GO 70998
71064: POP
71065: POP
// end ;
71066: GO 70884
71068: POP
71069: POP
// end ;
71070: LD_VAR 0 3
71074: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71075: LD_INT 0
71077: PPUSH
// if not side or side > 8 then
71078: LD_VAR 0 3
71082: NOT
71083: IFTRUE 71095
71085: PUSH
71086: LD_VAR 0 3
71090: PUSH
71091: LD_INT 8
71093: GREATER
71094: OR
71095: IFFALSE 71099
// exit ;
71097: GO 71158
// if not range then
71099: LD_VAR 0 4
71103: NOT
71104: IFFALSE 71115
// range := - 12 ;
71106: LD_ADDR_VAR 0 4
71110: PUSH
71111: LD_INT 12
71113: NEG
71114: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71115: LD_VAR 0 1
71119: PPUSH
71120: LD_VAR 0 2
71124: PPUSH
71125: LD_VAR 0 3
71129: PPUSH
71130: LD_VAR 0 4
71134: PPUSH
71135: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71139: LD_VAR 0 1
71143: PPUSH
71144: LD_VAR 0 2
71148: PPUSH
71149: LD_VAR 0 3
71153: PPUSH
71154: CALL_OW 331
// end ;
71158: LD_VAR 0 5
71162: RET
// export function Video ( mode ) ; begin
71163: LD_INT 0
71165: PPUSH
// ingame_video = mode ;
71166: LD_ADDR_OWVAR 52
71170: PUSH
71171: LD_VAR 0 1
71175: ST_TO_ADDR
// interface_hidden = mode ;
71176: LD_ADDR_OWVAR 54
71180: PUSH
71181: LD_VAR 0 1
71185: ST_TO_ADDR
// end ;
71186: LD_VAR 0 2
71190: RET
// export function Join ( array , element ) ; begin
71191: LD_INT 0
71193: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71194: LD_ADDR_VAR 0 3
71198: PUSH
71199: LD_VAR 0 1
71203: PPUSH
71204: LD_VAR 0 1
71208: PUSH
71209: LD_INT 1
71211: PLUS
71212: PPUSH
71213: LD_VAR 0 2
71217: PPUSH
71218: CALL_OW 1
71222: ST_TO_ADDR
// end ;
71223: LD_VAR 0 3
71227: RET
// export function JoinUnion ( array , element ) ; begin
71228: LD_INT 0
71230: PPUSH
// result := array union element ;
71231: LD_ADDR_VAR 0 3
71235: PUSH
71236: LD_VAR 0 1
71240: PUSH
71241: LD_VAR 0 2
71245: UNION
71246: ST_TO_ADDR
// end ;
71247: LD_VAR 0 3
71251: RET
// export function GetBehemoths ( side ) ; begin
71252: LD_INT 0
71254: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71255: LD_ADDR_VAR 0 2
71259: PUSH
71260: LD_INT 22
71262: PUSH
71263: LD_VAR 0 1
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 31
71274: PUSH
71275: LD_INT 25
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PPUSH
71286: CALL_OW 69
71290: ST_TO_ADDR
// end ;
71291: LD_VAR 0 2
71295: RET
// export function Shuffle ( array ) ; var i , index ; begin
71296: LD_INT 0
71298: PPUSH
71299: PPUSH
71300: PPUSH
// result := [ ] ;
71301: LD_ADDR_VAR 0 2
71305: PUSH
71306: EMPTY
71307: ST_TO_ADDR
// if not array then
71308: LD_VAR 0 1
71312: NOT
71313: IFFALSE 71317
// exit ;
71315: GO 71416
// Randomize ;
71317: CALL_OW 10
// for i = array downto 1 do
71321: LD_ADDR_VAR 0 3
71325: PUSH
71326: DOUBLE
71327: LD_VAR 0 1
71331: INC
71332: ST_TO_ADDR
71333: LD_INT 1
71335: PUSH
71336: FOR_DOWNTO
71337: IFFALSE 71414
// begin index := rand ( 1 , array ) ;
71339: LD_ADDR_VAR 0 4
71343: PUSH
71344: LD_INT 1
71346: PPUSH
71347: LD_VAR 0 1
71351: PPUSH
71352: CALL_OW 12
71356: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71357: LD_ADDR_VAR 0 2
71361: PUSH
71362: LD_VAR 0 2
71366: PPUSH
71367: LD_VAR 0 2
71371: PUSH
71372: LD_INT 1
71374: PLUS
71375: PPUSH
71376: LD_VAR 0 1
71380: PUSH
71381: LD_VAR 0 4
71385: ARRAY
71386: PPUSH
71387: CALL_OW 2
71391: ST_TO_ADDR
// array := Delete ( array , index ) ;
71392: LD_ADDR_VAR 0 1
71396: PUSH
71397: LD_VAR 0 1
71401: PPUSH
71402: LD_VAR 0 4
71406: PPUSH
71407: CALL_OW 3
71411: ST_TO_ADDR
// end ;
71412: GO 71336
71414: POP
71415: POP
// end ;
71416: LD_VAR 0 2
71420: RET
// export function GetBaseMaterials ( base ) ; begin
71421: LD_INT 0
71423: PPUSH
// result := [ 0 , 0 , 0 ] ;
71424: LD_ADDR_VAR 0 2
71428: PUSH
71429: LD_INT 0
71431: PUSH
71432: LD_INT 0
71434: PUSH
71435: LD_INT 0
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: LIST
71442: ST_TO_ADDR
// if not base then
71443: LD_VAR 0 1
71447: NOT
71448: IFFALSE 71452
// exit ;
71450: GO 71501
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71452: LD_ADDR_VAR 0 2
71456: PUSH
71457: LD_VAR 0 1
71461: PPUSH
71462: LD_INT 1
71464: PPUSH
71465: CALL_OW 275
71469: PUSH
71470: LD_VAR 0 1
71474: PPUSH
71475: LD_INT 2
71477: PPUSH
71478: CALL_OW 275
71482: PUSH
71483: LD_VAR 0 1
71487: PPUSH
71488: LD_INT 3
71490: PPUSH
71491: CALL_OW 275
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: LIST
71500: ST_TO_ADDR
// end ;
71501: LD_VAR 0 2
71505: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71506: LD_INT 0
71508: PPUSH
71509: PPUSH
// result := array ;
71510: LD_ADDR_VAR 0 3
71514: PUSH
71515: LD_VAR 0 1
71519: ST_TO_ADDR
// if size >= result then
71520: LD_VAR 0 2
71524: PUSH
71525: LD_VAR 0 3
71529: GREATEREQUAL
71530: IFFALSE 71534
// exit ;
71532: GO 71584
// if size then
71534: LD_VAR 0 2
71538: IFFALSE 71584
// for i := array downto size do
71540: LD_ADDR_VAR 0 4
71544: PUSH
71545: DOUBLE
71546: LD_VAR 0 1
71550: INC
71551: ST_TO_ADDR
71552: LD_VAR 0 2
71556: PUSH
71557: FOR_DOWNTO
71558: IFFALSE 71582
// result := Delete ( result , result ) ;
71560: LD_ADDR_VAR 0 3
71564: PUSH
71565: LD_VAR 0 3
71569: PPUSH
71570: LD_VAR 0 3
71574: PPUSH
71575: CALL_OW 3
71579: ST_TO_ADDR
71580: GO 71557
71582: POP
71583: POP
// end ;
71584: LD_VAR 0 3
71588: RET
// export function ComExit ( unit ) ; var tmp ; begin
71589: LD_INT 0
71591: PPUSH
71592: PPUSH
// if not IsInUnit ( unit ) then
71593: LD_VAR 0 1
71597: PPUSH
71598: CALL_OW 310
71602: NOT
71603: IFFALSE 71607
// exit ;
71605: GO 71667
// tmp := IsInUnit ( unit ) ;
71607: LD_ADDR_VAR 0 3
71611: PUSH
71612: LD_VAR 0 1
71616: PPUSH
71617: CALL_OW 310
71621: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71622: LD_VAR 0 3
71626: PPUSH
71627: CALL_OW 247
71631: PUSH
71632: LD_INT 2
71634: EQUAL
71635: IFFALSE 71648
// ComExitVehicle ( unit ) else
71637: LD_VAR 0 1
71641: PPUSH
71642: CALL_OW 121
71646: GO 71657
// ComExitBuilding ( unit ) ;
71648: LD_VAR 0 1
71652: PPUSH
71653: CALL_OW 122
// result := tmp ;
71657: LD_ADDR_VAR 0 2
71661: PUSH
71662: LD_VAR 0 3
71666: ST_TO_ADDR
// end ;
71667: LD_VAR 0 2
71671: RET
// export function ComExitAll ( units ) ; var i ; begin
71672: LD_INT 0
71674: PPUSH
71675: PPUSH
// if not units then
71676: LD_VAR 0 1
71680: NOT
71681: IFFALSE 71685
// exit ;
71683: GO 71711
// for i in units do
71685: LD_ADDR_VAR 0 3
71689: PUSH
71690: LD_VAR 0 1
71694: PUSH
71695: FOR_IN
71696: IFFALSE 71709
// ComExit ( i ) ;
71698: LD_VAR 0 3
71702: PPUSH
71703: CALL 71589 0 1
71707: GO 71695
71709: POP
71710: POP
// end ;
71711: LD_VAR 0 2
71715: RET
// export function ResetHc ; begin
71716: LD_INT 0
71718: PPUSH
// InitHc ;
71719: CALL_OW 19
// hc_importance := 0 ;
71723: LD_ADDR_OWVAR 32
71727: PUSH
71728: LD_INT 0
71730: ST_TO_ADDR
// end ;
71731: LD_VAR 0 1
71735: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71736: LD_INT 0
71738: PPUSH
71739: PPUSH
71740: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71741: LD_ADDR_VAR 0 6
71745: PUSH
71746: LD_VAR 0 1
71750: PUSH
71751: LD_VAR 0 3
71755: PLUS
71756: PUSH
71757: LD_INT 2
71759: DIV
71760: ST_TO_ADDR
// if _x < 0 then
71761: LD_VAR 0 6
71765: PUSH
71766: LD_INT 0
71768: LESS
71769: IFFALSE 71786
// _x := _x * - 1 ;
71771: LD_ADDR_VAR 0 6
71775: PUSH
71776: LD_VAR 0 6
71780: PUSH
71781: LD_INT 1
71783: NEG
71784: MUL
71785: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71786: LD_ADDR_VAR 0 7
71790: PUSH
71791: LD_VAR 0 2
71795: PUSH
71796: LD_VAR 0 4
71800: PLUS
71801: PUSH
71802: LD_INT 2
71804: DIV
71805: ST_TO_ADDR
// if _y < 0 then
71806: LD_VAR 0 7
71810: PUSH
71811: LD_INT 0
71813: LESS
71814: IFFALSE 71831
// _y := _y * - 1 ;
71816: LD_ADDR_VAR 0 7
71820: PUSH
71821: LD_VAR 0 7
71825: PUSH
71826: LD_INT 1
71828: NEG
71829: MUL
71830: ST_TO_ADDR
// result := [ _x , _y ] ;
71831: LD_ADDR_VAR 0 5
71835: PUSH
71836: LD_VAR 0 6
71840: PUSH
71841: LD_VAR 0 7
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: ST_TO_ADDR
// end ;
71850: LD_VAR 0 5
71854: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71855: LD_INT 0
71857: PPUSH
71858: PPUSH
71859: PPUSH
71860: PPUSH
// task := GetTaskList ( unit ) ;
71861: LD_ADDR_VAR 0 7
71865: PUSH
71866: LD_VAR 0 1
71870: PPUSH
71871: CALL_OW 437
71875: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71876: LD_VAR 0 7
71880: NOT
71881: IFFALSE 71900
71883: PUSH
71884: LD_VAR 0 1
71888: PPUSH
71889: LD_VAR 0 2
71893: PPUSH
71894: CALL_OW 308
71898: NOT
71899: AND
71900: IFFALSE 71904
// exit ;
71902: GO 72022
// if IsInArea ( unit , area ) then
71904: LD_VAR 0 1
71908: PPUSH
71909: LD_VAR 0 2
71913: PPUSH
71914: CALL_OW 308
71918: IFFALSE 71936
// begin ComMoveToArea ( unit , goAway ) ;
71920: LD_VAR 0 1
71924: PPUSH
71925: LD_VAR 0 3
71929: PPUSH
71930: CALL_OW 113
// exit ;
71934: GO 72022
// end ; if task [ 1 ] [ 1 ] <> M then
71936: LD_VAR 0 7
71940: PUSH
71941: LD_INT 1
71943: ARRAY
71944: PUSH
71945: LD_INT 1
71947: ARRAY
71948: PUSH
71949: LD_STRING M
71951: NONEQUAL
71952: IFFALSE 71956
// exit ;
71954: GO 72022
// x := task [ 1 ] [ 2 ] ;
71956: LD_ADDR_VAR 0 5
71960: PUSH
71961: LD_VAR 0 7
71965: PUSH
71966: LD_INT 1
71968: ARRAY
71969: PUSH
71970: LD_INT 2
71972: ARRAY
71973: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71974: LD_ADDR_VAR 0 6
71978: PUSH
71979: LD_VAR 0 7
71983: PUSH
71984: LD_INT 1
71986: ARRAY
71987: PUSH
71988: LD_INT 3
71990: ARRAY
71991: ST_TO_ADDR
// if InArea ( x , y , area ) then
71992: LD_VAR 0 5
71996: PPUSH
71997: LD_VAR 0 6
72001: PPUSH
72002: LD_VAR 0 2
72006: PPUSH
72007: CALL_OW 309
72011: IFFALSE 72022
// ComStop ( unit ) ;
72013: LD_VAR 0 1
72017: PPUSH
72018: CALL_OW 141
// end ;
72022: LD_VAR 0 4
72026: RET
// export function Abs ( value ) ; begin
72027: LD_INT 0
72029: PPUSH
// result := value ;
72030: LD_ADDR_VAR 0 2
72034: PUSH
72035: LD_VAR 0 1
72039: ST_TO_ADDR
// if value < 0 then
72040: LD_VAR 0 1
72044: PUSH
72045: LD_INT 0
72047: LESS
72048: IFFALSE 72065
// result := value * - 1 ;
72050: LD_ADDR_VAR 0 2
72054: PUSH
72055: LD_VAR 0 1
72059: PUSH
72060: LD_INT 1
72062: NEG
72063: MUL
72064: ST_TO_ADDR
// end ;
72065: LD_VAR 0 2
72069: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72070: LD_INT 0
72072: PPUSH
72073: PPUSH
72074: PPUSH
72075: PPUSH
72076: PPUSH
72077: PPUSH
72078: PPUSH
72079: PPUSH
// if not unit or not building then
72080: LD_VAR 0 1
72084: NOT
72085: IFTRUE 72094
72087: PUSH
72088: LD_VAR 0 2
72092: NOT
72093: OR
72094: IFFALSE 72098
// exit ;
72096: GO 72326
// x := GetX ( building ) ;
72098: LD_ADDR_VAR 0 4
72102: PUSH
72103: LD_VAR 0 2
72107: PPUSH
72108: CALL_OW 250
72112: ST_TO_ADDR
// y := GetY ( building ) ;
72113: LD_ADDR_VAR 0 6
72117: PUSH
72118: LD_VAR 0 2
72122: PPUSH
72123: CALL_OW 251
72127: ST_TO_ADDR
// d := GetDir ( building ) ;
72128: LD_ADDR_VAR 0 8
72132: PUSH
72133: LD_VAR 0 2
72137: PPUSH
72138: CALL_OW 254
72142: ST_TO_ADDR
// r := 4 ;
72143: LD_ADDR_VAR 0 9
72147: PUSH
72148: LD_INT 4
72150: ST_TO_ADDR
// for i := 1 to 5 do
72151: LD_ADDR_VAR 0 10
72155: PUSH
72156: DOUBLE
72157: LD_INT 1
72159: DEC
72160: ST_TO_ADDR
72161: LD_INT 5
72163: PUSH
72164: FOR_TO
72165: IFFALSE 72324
// begin _x := ShiftX ( x , d , r + i ) ;
72167: LD_ADDR_VAR 0 5
72171: PUSH
72172: LD_VAR 0 4
72176: PPUSH
72177: LD_VAR 0 8
72181: PPUSH
72182: LD_VAR 0 9
72186: PUSH
72187: LD_VAR 0 10
72191: PLUS
72192: PPUSH
72193: CALL_OW 272
72197: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72198: LD_ADDR_VAR 0 7
72202: PUSH
72203: LD_VAR 0 6
72207: PPUSH
72208: LD_VAR 0 8
72212: PPUSH
72213: LD_VAR 0 9
72217: PUSH
72218: LD_VAR 0 10
72222: PLUS
72223: PPUSH
72224: CALL_OW 273
72228: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72229: LD_VAR 0 5
72233: PPUSH
72234: LD_VAR 0 7
72238: PPUSH
72239: CALL_OW 488
72243: IFFALSE 72278
72245: PUSH
72246: LD_VAR 0 5
72250: PPUSH
72251: LD_VAR 0 7
72255: PPUSH
72256: CALL_OW 428
72260: PPUSH
72261: CALL_OW 247
72265: PUSH
72266: LD_INT 3
72268: PUSH
72269: LD_INT 2
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: IN
72276: NOT
72277: AND
72278: IFFALSE 72322
// begin ComMoveXY ( unit , _x , _y ) ;
72280: LD_VAR 0 1
72284: PPUSH
72285: LD_VAR 0 5
72289: PPUSH
72290: LD_VAR 0 7
72294: PPUSH
72295: CALL_OW 111
// result := [ _x , _y ] ;
72299: LD_ADDR_VAR 0 3
72303: PUSH
72304: LD_VAR 0 5
72308: PUSH
72309: LD_VAR 0 7
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: ST_TO_ADDR
// exit ;
72318: POP
72319: POP
72320: GO 72326
// end ; end ;
72322: GO 72164
72324: POP
72325: POP
// end ;
72326: LD_VAR 0 3
72330: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72331: LD_INT 0
72333: PPUSH
72334: PPUSH
72335: PPUSH
// result := 0 ;
72336: LD_ADDR_VAR 0 3
72340: PUSH
72341: LD_INT 0
72343: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72344: LD_VAR 0 1
72348: PUSH
72349: LD_INT 0
72351: LESS
72352: IFTRUE 72364
72354: PUSH
72355: LD_VAR 0 1
72359: PUSH
72360: LD_INT 8
72362: GREATER
72363: OR
72364: IFTRUE 72376
72366: PUSH
72367: LD_VAR 0 2
72371: PUSH
72372: LD_INT 0
72374: LESS
72375: OR
72376: IFTRUE 72388
72378: PUSH
72379: LD_VAR 0 2
72383: PUSH
72384: LD_INT 8
72386: GREATER
72387: OR
72388: IFFALSE 72392
// exit ;
72390: GO 72467
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72392: LD_ADDR_VAR 0 4
72396: PUSH
72397: LD_INT 22
72399: PUSH
72400: LD_VAR 0 2
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PPUSH
72409: CALL_OW 69
72413: PUSH
72414: FOR_IN
72415: IFFALSE 72465
// begin un := UnitShoot ( i ) ;
72417: LD_ADDR_VAR 0 5
72421: PUSH
72422: LD_VAR 0 4
72426: PPUSH
72427: CALL_OW 504
72431: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72432: LD_VAR 0 5
72436: PPUSH
72437: CALL_OW 255
72441: PUSH
72442: LD_VAR 0 1
72446: EQUAL
72447: IFFALSE 72463
// begin result := un ;
72449: LD_ADDR_VAR 0 3
72453: PUSH
72454: LD_VAR 0 5
72458: ST_TO_ADDR
// exit ;
72459: POP
72460: POP
72461: GO 72467
// end ; end ;
72463: GO 72414
72465: POP
72466: POP
// end ;
72467: LD_VAR 0 3
72471: RET
// export function GetCargoBay ( units ) ; begin
72472: LD_INT 0
72474: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72475: LD_ADDR_VAR 0 2
72479: PUSH
72480: LD_VAR 0 1
72484: PPUSH
72485: LD_INT 2
72487: PUSH
72488: LD_INT 34
72490: PUSH
72491: LD_INT 12
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: LD_INT 34
72500: PUSH
72501: LD_INT 51
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 34
72510: PUSH
72511: LD_INT 32
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 34
72520: PUSH
72521: LD_INT 89
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: PPUSH
72535: CALL_OW 72
72539: ST_TO_ADDR
// end ;
72540: LD_VAR 0 2
72544: RET
// export function Negate ( value ) ; begin
72545: LD_INT 0
72547: PPUSH
// result := not value ;
72548: LD_ADDR_VAR 0 2
72552: PUSH
72553: LD_VAR 0 1
72557: NOT
72558: ST_TO_ADDR
// end ;
72559: LD_VAR 0 2
72563: RET
// export function Inc ( value ) ; begin
72564: LD_INT 0
72566: PPUSH
// result := value + 1 ;
72567: LD_ADDR_VAR 0 2
72571: PUSH
72572: LD_VAR 0 1
72576: PUSH
72577: LD_INT 1
72579: PLUS
72580: ST_TO_ADDR
// end ;
72581: LD_VAR 0 2
72585: RET
// export function Dec ( value ) ; begin
72586: LD_INT 0
72588: PPUSH
// result := value - 1 ;
72589: LD_ADDR_VAR 0 2
72593: PUSH
72594: LD_VAR 0 1
72598: PUSH
72599: LD_INT 1
72601: MINUS
72602: ST_TO_ADDR
// end ;
72603: LD_VAR 0 2
72607: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72608: LD_INT 0
72610: PPUSH
72611: PPUSH
72612: PPUSH
72613: PPUSH
72614: PPUSH
72615: PPUSH
72616: PPUSH
72617: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72618: LD_VAR 0 1
72622: PPUSH
72623: LD_VAR 0 2
72627: PPUSH
72628: CALL_OW 488
72632: NOT
72633: IFTRUE 72652
72635: PUSH
72636: LD_VAR 0 3
72640: PPUSH
72641: LD_VAR 0 4
72645: PPUSH
72646: CALL_OW 488
72650: NOT
72651: OR
72652: IFFALSE 72665
// begin result := - 1 ;
72654: LD_ADDR_VAR 0 5
72658: PUSH
72659: LD_INT 1
72661: NEG
72662: ST_TO_ADDR
// exit ;
72663: GO 72900
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72665: LD_ADDR_VAR 0 12
72669: PUSH
72670: LD_VAR 0 1
72674: PPUSH
72675: LD_VAR 0 2
72679: PPUSH
72680: LD_VAR 0 3
72684: PPUSH
72685: LD_VAR 0 4
72689: PPUSH
72690: CALL 71736 0 4
72694: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72695: LD_ADDR_VAR 0 11
72699: PUSH
72700: LD_VAR 0 1
72704: PPUSH
72705: LD_VAR 0 2
72709: PPUSH
72710: LD_VAR 0 12
72714: PUSH
72715: LD_INT 1
72717: ARRAY
72718: PPUSH
72719: LD_VAR 0 12
72723: PUSH
72724: LD_INT 2
72726: ARRAY
72727: PPUSH
72728: CALL_OW 298
72732: ST_TO_ADDR
// distance := 9999 ;
72733: LD_ADDR_VAR 0 10
72737: PUSH
72738: LD_INT 9999
72740: ST_TO_ADDR
// for i := 0 to 5 do
72741: LD_ADDR_VAR 0 6
72745: PUSH
72746: DOUBLE
72747: LD_INT 0
72749: DEC
72750: ST_TO_ADDR
72751: LD_INT 5
72753: PUSH
72754: FOR_TO
72755: IFFALSE 72898
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72757: LD_ADDR_VAR 0 7
72761: PUSH
72762: LD_VAR 0 1
72766: PPUSH
72767: LD_VAR 0 6
72771: PPUSH
72772: LD_VAR 0 11
72776: PPUSH
72777: CALL_OW 272
72781: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72782: LD_ADDR_VAR 0 8
72786: PUSH
72787: LD_VAR 0 2
72791: PPUSH
72792: LD_VAR 0 6
72796: PPUSH
72797: LD_VAR 0 11
72801: PPUSH
72802: CALL_OW 273
72806: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72807: LD_VAR 0 7
72811: PPUSH
72812: LD_VAR 0 8
72816: PPUSH
72817: CALL_OW 488
72821: NOT
72822: IFFALSE 72826
// continue ;
72824: GO 72754
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72826: LD_ADDR_VAR 0 9
72830: PUSH
72831: LD_VAR 0 12
72835: PUSH
72836: LD_INT 1
72838: ARRAY
72839: PPUSH
72840: LD_VAR 0 12
72844: PUSH
72845: LD_INT 2
72847: ARRAY
72848: PPUSH
72849: LD_VAR 0 7
72853: PPUSH
72854: LD_VAR 0 8
72858: PPUSH
72859: CALL_OW 298
72863: ST_TO_ADDR
// if tmp < distance then
72864: LD_VAR 0 9
72868: PUSH
72869: LD_VAR 0 10
72873: LESS
72874: IFFALSE 72896
// begin result := i ;
72876: LD_ADDR_VAR 0 5
72880: PUSH
72881: LD_VAR 0 6
72885: ST_TO_ADDR
// distance := tmp ;
72886: LD_ADDR_VAR 0 10
72890: PUSH
72891: LD_VAR 0 9
72895: ST_TO_ADDR
// end ; end ;
72896: GO 72754
72898: POP
72899: POP
// end ;
72900: LD_VAR 0 5
72904: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72905: LD_INT 0
72907: PPUSH
72908: PPUSH
// if not driver or not IsInUnit ( driver ) then
72909: LD_VAR 0 1
72913: NOT
72914: IFTRUE 72928
72916: PUSH
72917: LD_VAR 0 1
72921: PPUSH
72922: CALL_OW 310
72926: NOT
72927: OR
72928: IFFALSE 72932
// exit ;
72930: GO 73022
// vehicle := IsInUnit ( driver ) ;
72932: LD_ADDR_VAR 0 3
72936: PUSH
72937: LD_VAR 0 1
72941: PPUSH
72942: CALL_OW 310
72946: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72947: LD_VAR 0 1
72951: PPUSH
72952: LD_STRING \
72954: PUSH
72955: LD_INT 0
72957: PUSH
72958: LD_INT 0
72960: PUSH
72961: LD_INT 0
72963: PUSH
72964: LD_INT 0
72966: PUSH
72967: LD_INT 0
72969: PUSH
72970: LD_INT 0
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: LIST
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: PUSH
72982: LD_STRING E
72984: PUSH
72985: LD_INT 0
72987: PUSH
72988: LD_INT 0
72990: PUSH
72991: LD_VAR 0 3
72995: PUSH
72996: LD_INT 0
72998: PUSH
72999: LD_INT 0
73001: PUSH
73002: LD_INT 0
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PPUSH
73018: CALL_OW 446
// end ;
73022: LD_VAR 0 2
73026: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73027: LD_INT 0
73029: PPUSH
73030: PPUSH
// if not driver or not IsInUnit ( driver ) then
73031: LD_VAR 0 1
73035: NOT
73036: IFTRUE 73050
73038: PUSH
73039: LD_VAR 0 1
73043: PPUSH
73044: CALL_OW 310
73048: NOT
73049: OR
73050: IFFALSE 73054
// exit ;
73052: GO 73144
// vehicle := IsInUnit ( driver ) ;
73054: LD_ADDR_VAR 0 3
73058: PUSH
73059: LD_VAR 0 1
73063: PPUSH
73064: CALL_OW 310
73068: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73069: LD_VAR 0 1
73073: PPUSH
73074: LD_STRING \
73076: PUSH
73077: LD_INT 0
73079: PUSH
73080: LD_INT 0
73082: PUSH
73083: LD_INT 0
73085: PUSH
73086: LD_INT 0
73088: PUSH
73089: LD_INT 0
73091: PUSH
73092: LD_INT 0
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: LIST
73101: LIST
73102: LIST
73103: PUSH
73104: LD_STRING E
73106: PUSH
73107: LD_INT 0
73109: PUSH
73110: LD_INT 0
73112: PUSH
73113: LD_VAR 0 3
73117: PUSH
73118: LD_INT 0
73120: PUSH
73121: LD_INT 0
73123: PUSH
73124: LD_INT 0
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: LIST
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: PPUSH
73140: CALL_OW 447
// end ;
73144: LD_VAR 0 2
73148: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73149: LD_INT 0
73151: PPUSH
73152: PPUSH
73153: PPUSH
// tmp := [ ] ;
73154: LD_ADDR_VAR 0 5
73158: PUSH
73159: EMPTY
73160: ST_TO_ADDR
// for i in units do
73161: LD_ADDR_VAR 0 4
73165: PUSH
73166: LD_VAR 0 1
73170: PUSH
73171: FOR_IN
73172: IFFALSE 73210
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73174: LD_ADDR_VAR 0 5
73178: PUSH
73179: LD_VAR 0 5
73183: PPUSH
73184: LD_VAR 0 5
73188: PUSH
73189: LD_INT 1
73191: PLUS
73192: PPUSH
73193: LD_VAR 0 4
73197: PPUSH
73198: CALL_OW 256
73202: PPUSH
73203: CALL_OW 2
73207: ST_TO_ADDR
73208: GO 73171
73210: POP
73211: POP
// if not tmp then
73212: LD_VAR 0 5
73216: NOT
73217: IFFALSE 73221
// exit ;
73219: GO 73269
// if asc then
73221: LD_VAR 0 2
73225: IFFALSE 73249
// result := SortListByListAsc ( units , tmp ) else
73227: LD_ADDR_VAR 0 3
73231: PUSH
73232: LD_VAR 0 1
73236: PPUSH
73237: LD_VAR 0 5
73241: PPUSH
73242: CALL_OW 76
73246: ST_TO_ADDR
73247: GO 73269
// result := SortListByListDesc ( units , tmp ) ;
73249: LD_ADDR_VAR 0 3
73253: PUSH
73254: LD_VAR 0 1
73258: PPUSH
73259: LD_VAR 0 5
73263: PPUSH
73264: CALL_OW 77
73268: ST_TO_ADDR
// end ;
73269: LD_VAR 0 3
73273: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73274: LD_INT 0
73276: PPUSH
73277: PPUSH
// task := GetTaskList ( mech ) ;
73278: LD_ADDR_VAR 0 4
73282: PUSH
73283: LD_VAR 0 1
73287: PPUSH
73288: CALL_OW 437
73292: ST_TO_ADDR
// if not task then
73293: LD_VAR 0 4
73297: NOT
73298: IFFALSE 73302
// exit ;
73300: GO 73346
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73302: LD_ADDR_VAR 0 3
73306: PUSH
73307: LD_VAR 0 4
73311: PUSH
73312: LD_INT 1
73314: ARRAY
73315: PUSH
73316: LD_INT 1
73318: ARRAY
73319: PUSH
73320: LD_STRING r
73322: EQUAL
73323: IFFALSE 73345
73325: PUSH
73326: LD_VAR 0 4
73330: PUSH
73331: LD_INT 1
73333: ARRAY
73334: PUSH
73335: LD_INT 4
73337: ARRAY
73338: PUSH
73339: LD_VAR 0 2
73343: EQUAL
73344: AND
73345: ST_TO_ADDR
// end ;
73346: LD_VAR 0 3
73350: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73351: LD_INT 0
73353: PPUSH
// SetDir ( unit , d ) ;
73354: LD_VAR 0 1
73358: PPUSH
73359: LD_VAR 0 4
73363: PPUSH
73364: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73368: LD_ADDR_VAR 0 6
73372: PUSH
73373: LD_VAR 0 1
73377: PPUSH
73378: LD_VAR 0 2
73382: PPUSH
73383: LD_VAR 0 3
73387: PPUSH
73388: LD_VAR 0 5
73392: PPUSH
73393: CALL_OW 48
73397: ST_TO_ADDR
// end ;
73398: LD_VAR 0 6
73402: RET
// export function ToNaturalNumber ( number ) ; begin
73403: LD_INT 0
73405: PPUSH
// result := number div 1 ;
73406: LD_ADDR_VAR 0 2
73410: PUSH
73411: LD_VAR 0 1
73415: PUSH
73416: LD_INT 1
73418: DIV
73419: ST_TO_ADDR
// if number < 0 then
73420: LD_VAR 0 1
73424: PUSH
73425: LD_INT 0
73427: LESS
73428: IFFALSE 73438
// result := 0 ;
73430: LD_ADDR_VAR 0 2
73434: PUSH
73435: LD_INT 0
73437: ST_TO_ADDR
// end ;
73438: LD_VAR 0 2
73442: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
73443: LD_INT 0
73445: PPUSH
73446: PPUSH
73447: PPUSH
// if not buildings then
73448: LD_VAR 0 1
73452: NOT
73453: IFFALSE 73457
// exit ;
73455: GO 73572
// tmp := [ ] ;
73457: LD_ADDR_VAR 0 5
73461: PUSH
73462: EMPTY
73463: ST_TO_ADDR
// for b in buildings do
73464: LD_ADDR_VAR 0 4
73468: PUSH
73469: LD_VAR 0 1
73473: PUSH
73474: FOR_IN
73475: IFFALSE 73513
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
73477: LD_ADDR_VAR 0 5
73481: PUSH
73482: LD_VAR 0 5
73486: PPUSH
73487: LD_VAR 0 5
73491: PUSH
73492: LD_INT 1
73494: PLUS
73495: PPUSH
73496: LD_VAR 0 4
73500: PPUSH
73501: CALL_OW 266
73505: PPUSH
73506: CALL_OW 1
73510: ST_TO_ADDR
73511: GO 73474
73513: POP
73514: POP
// if not tmp then
73515: LD_VAR 0 5
73519: NOT
73520: IFFALSE 73524
// exit ;
73522: GO 73572
// if asc then
73524: LD_VAR 0 2
73528: IFFALSE 73552
// result := SortListByListAsc ( buildings , tmp ) else
73530: LD_ADDR_VAR 0 3
73534: PUSH
73535: LD_VAR 0 1
73539: PPUSH
73540: LD_VAR 0 5
73544: PPUSH
73545: CALL_OW 76
73549: ST_TO_ADDR
73550: GO 73572
// result := SortListByListDesc ( buildings , tmp ) ;
73552: LD_ADDR_VAR 0 3
73556: PUSH
73557: LD_VAR 0 1
73561: PPUSH
73562: LD_VAR 0 5
73566: PPUSH
73567: CALL_OW 77
73571: ST_TO_ADDR
// end ;
73572: LD_VAR 0 3
73576: RET
// export function SortByClass ( units , class ) ; var un ; begin
73577: LD_INT 0
73579: PPUSH
73580: PPUSH
// if not units or not class then
73581: LD_VAR 0 1
73585: NOT
73586: IFTRUE 73595
73588: PUSH
73589: LD_VAR 0 2
73593: NOT
73594: OR
73595: IFFALSE 73599
// exit ;
73597: GO 73694
// result := [ ] ;
73599: LD_ADDR_VAR 0 3
73603: PUSH
73604: EMPTY
73605: ST_TO_ADDR
// for un in units do
73606: LD_ADDR_VAR 0 4
73610: PUSH
73611: LD_VAR 0 1
73615: PUSH
73616: FOR_IN
73617: IFFALSE 73692
// if GetClass ( un ) = class then
73619: LD_VAR 0 4
73623: PPUSH
73624: CALL_OW 257
73628: PUSH
73629: LD_VAR 0 2
73633: EQUAL
73634: IFFALSE 73661
// result := Insert ( result , 1 , un ) else
73636: LD_ADDR_VAR 0 3
73640: PUSH
73641: LD_VAR 0 3
73645: PPUSH
73646: LD_INT 1
73648: PPUSH
73649: LD_VAR 0 4
73653: PPUSH
73654: CALL_OW 2
73658: ST_TO_ADDR
73659: GO 73690
// result := Replace ( result , result + 1 , un ) ;
73661: LD_ADDR_VAR 0 3
73665: PUSH
73666: LD_VAR 0 3
73670: PPUSH
73671: LD_VAR 0 3
73675: PUSH
73676: LD_INT 1
73678: PLUS
73679: PPUSH
73680: LD_VAR 0 4
73684: PPUSH
73685: CALL_OW 1
73689: ST_TO_ADDR
73690: GO 73616
73692: POP
73693: POP
// end ;
73694: LD_VAR 0 3
73698: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73699: LD_INT 0
73701: PPUSH
73702: PPUSH
73703: PPUSH
73704: PPUSH
73705: PPUSH
73706: PPUSH
73707: PPUSH
// result := [ ] ;
73708: LD_ADDR_VAR 0 4
73712: PUSH
73713: EMPTY
73714: ST_TO_ADDR
// if x - r < 0 then
73715: LD_VAR 0 1
73719: PUSH
73720: LD_VAR 0 3
73724: MINUS
73725: PUSH
73726: LD_INT 0
73728: LESS
73729: IFFALSE 73741
// min_x := 0 else
73731: LD_ADDR_VAR 0 8
73735: PUSH
73736: LD_INT 0
73738: ST_TO_ADDR
73739: GO 73757
// min_x := x - r ;
73741: LD_ADDR_VAR 0 8
73745: PUSH
73746: LD_VAR 0 1
73750: PUSH
73751: LD_VAR 0 3
73755: MINUS
73756: ST_TO_ADDR
// if y - r < 0 then
73757: LD_VAR 0 2
73761: PUSH
73762: LD_VAR 0 3
73766: MINUS
73767: PUSH
73768: LD_INT 0
73770: LESS
73771: IFFALSE 73783
// min_y := 0 else
73773: LD_ADDR_VAR 0 7
73777: PUSH
73778: LD_INT 0
73780: ST_TO_ADDR
73781: GO 73799
// min_y := y - r ;
73783: LD_ADDR_VAR 0 7
73787: PUSH
73788: LD_VAR 0 2
73792: PUSH
73793: LD_VAR 0 3
73797: MINUS
73798: ST_TO_ADDR
// max_x := x + r ;
73799: LD_ADDR_VAR 0 9
73803: PUSH
73804: LD_VAR 0 1
73808: PUSH
73809: LD_VAR 0 3
73813: PLUS
73814: ST_TO_ADDR
// max_y := y + r ;
73815: LD_ADDR_VAR 0 10
73819: PUSH
73820: LD_VAR 0 2
73824: PUSH
73825: LD_VAR 0 3
73829: PLUS
73830: ST_TO_ADDR
// for _x = min_x to max_x do
73831: LD_ADDR_VAR 0 5
73835: PUSH
73836: DOUBLE
73837: LD_VAR 0 8
73841: DEC
73842: ST_TO_ADDR
73843: LD_VAR 0 9
73847: PUSH
73848: FOR_TO
73849: IFFALSE 73950
// for _y = min_y to max_y do
73851: LD_ADDR_VAR 0 6
73855: PUSH
73856: DOUBLE
73857: LD_VAR 0 7
73861: DEC
73862: ST_TO_ADDR
73863: LD_VAR 0 10
73867: PUSH
73868: FOR_TO
73869: IFFALSE 73946
// begin if not ValidHex ( _x , _y ) then
73871: LD_VAR 0 5
73875: PPUSH
73876: LD_VAR 0 6
73880: PPUSH
73881: CALL_OW 488
73885: NOT
73886: IFFALSE 73890
// continue ;
73888: GO 73868
// if GetResourceTypeXY ( _x , _y ) then
73890: LD_VAR 0 5
73894: PPUSH
73895: LD_VAR 0 6
73899: PPUSH
73900: CALL_OW 283
73904: IFFALSE 73944
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73906: LD_ADDR_VAR 0 4
73910: PUSH
73911: LD_VAR 0 4
73915: PPUSH
73916: LD_VAR 0 4
73920: PUSH
73921: LD_INT 1
73923: PLUS
73924: PPUSH
73925: LD_VAR 0 5
73929: PUSH
73930: LD_VAR 0 6
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PPUSH
73939: CALL_OW 1
73943: ST_TO_ADDR
// end ;
73944: GO 73868
73946: POP
73947: POP
73948: GO 73848
73950: POP
73951: POP
// end ;
73952: LD_VAR 0 4
73956: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73957: LD_INT 0
73959: PPUSH
73960: PPUSH
73961: PPUSH
73962: PPUSH
73963: PPUSH
73964: PPUSH
73965: PPUSH
73966: PPUSH
// if not units then
73967: LD_VAR 0 1
73971: NOT
73972: IFFALSE 73976
// exit ;
73974: GO 74508
// result := UnitFilter ( units , [ f_ok ] ) ;
73976: LD_ADDR_VAR 0 3
73980: PUSH
73981: LD_VAR 0 1
73985: PPUSH
73986: LD_INT 50
73988: PUSH
73989: EMPTY
73990: LIST
73991: PPUSH
73992: CALL_OW 72
73996: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73997: LD_ADDR_VAR 0 8
74001: PUSH
74002: LD_VAR 0 1
74006: PUSH
74007: LD_INT 1
74009: ARRAY
74010: PPUSH
74011: CALL_OW 255
74015: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74016: LD_ADDR_VAR 0 10
74020: PUSH
74021: LD_INT 29
74023: PUSH
74024: LD_INT 91
74026: PUSH
74027: LD_INT 49
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: LIST
74034: ST_TO_ADDR
// if not result then
74035: LD_VAR 0 3
74039: NOT
74040: IFFALSE 74044
// exit ;
74042: GO 74508
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74044: LD_ADDR_VAR 0 5
74048: PUSH
74049: LD_INT 81
74051: PUSH
74052: LD_VAR 0 8
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: PPUSH
74061: CALL_OW 69
74065: ST_TO_ADDR
// for i in result do
74066: LD_ADDR_VAR 0 4
74070: PUSH
74071: LD_VAR 0 3
74075: PUSH
74076: FOR_IN
74077: IFFALSE 74506
// begin tag := GetTag ( i ) + 1 ;
74079: LD_ADDR_VAR 0 9
74083: PUSH
74084: LD_VAR 0 4
74088: PPUSH
74089: CALL_OW 110
74093: PUSH
74094: LD_INT 1
74096: PLUS
74097: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74098: LD_ADDR_VAR 0 7
74102: PUSH
74103: LD_VAR 0 4
74107: PPUSH
74108: CALL_OW 250
74112: PPUSH
74113: LD_VAR 0 4
74117: PPUSH
74118: CALL_OW 251
74122: PPUSH
74123: LD_INT 4
74125: PPUSH
74126: CALL 73699 0 3
74130: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74131: LD_VAR 0 4
74135: PPUSH
74136: CALL_OW 247
74140: PUSH
74141: LD_INT 2
74143: EQUAL
74144: IFFALSE 74156
74146: PUSH
74147: LD_VAR 0 7
74151: PUSH
74152: LD_INT 2
74154: GREATER
74155: AND
74156: IFFALSE 74176
74158: PUSH
74159: LD_VAR 0 4
74163: PPUSH
74164: CALL_OW 264
74168: PUSH
74169: LD_VAR 0 10
74173: IN
74174: NOT
74175: AND
74176: IFFALSE 74215
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74178: LD_VAR 0 4
74182: PPUSH
74183: LD_VAR 0 7
74187: PUSH
74188: LD_INT 1
74190: ARRAY
74191: PUSH
74192: LD_INT 1
74194: ARRAY
74195: PPUSH
74196: LD_VAR 0 7
74200: PUSH
74201: LD_INT 1
74203: ARRAY
74204: PUSH
74205: LD_INT 2
74207: ARRAY
74208: PPUSH
74209: CALL_OW 116
74213: GO 74504
// if path > tag then
74215: LD_VAR 0 2
74219: PUSH
74220: LD_VAR 0 9
74224: GREATER
74225: IFFALSE 74433
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74227: LD_ADDR_VAR 0 6
74231: PUSH
74232: LD_VAR 0 5
74236: PPUSH
74237: LD_INT 91
74239: PUSH
74240: LD_VAR 0 4
74244: PUSH
74245: LD_INT 8
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: LIST
74252: PPUSH
74253: CALL_OW 72
74257: ST_TO_ADDR
// if nearEnemy then
74258: LD_VAR 0 6
74262: IFFALSE 74331
// begin if GetWeapon ( i ) = ru_time_lapser then
74264: LD_VAR 0 4
74268: PPUSH
74269: CALL_OW 264
74273: PUSH
74274: LD_INT 49
74276: EQUAL
74277: IFFALSE 74305
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74279: LD_VAR 0 4
74283: PPUSH
74284: LD_VAR 0 6
74288: PPUSH
74289: LD_VAR 0 4
74293: PPUSH
74294: CALL_OW 74
74298: PPUSH
74299: CALL_OW 112
74303: GO 74329
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74305: LD_VAR 0 4
74309: PPUSH
74310: LD_VAR 0 6
74314: PPUSH
74315: LD_VAR 0 4
74319: PPUSH
74320: CALL_OW 74
74324: PPUSH
74325: CALL 75589 0 2
// end else
74329: GO 74431
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74331: LD_VAR 0 4
74335: PPUSH
74336: LD_VAR 0 2
74340: PUSH
74341: LD_VAR 0 9
74345: ARRAY
74346: PUSH
74347: LD_INT 1
74349: ARRAY
74350: PPUSH
74351: LD_VAR 0 2
74355: PUSH
74356: LD_VAR 0 9
74360: ARRAY
74361: PUSH
74362: LD_INT 2
74364: ARRAY
74365: PPUSH
74366: CALL_OW 297
74370: PUSH
74371: LD_INT 6
74373: GREATER
74374: IFFALSE 74417
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74376: LD_VAR 0 4
74380: PPUSH
74381: LD_VAR 0 2
74385: PUSH
74386: LD_VAR 0 9
74390: ARRAY
74391: PUSH
74392: LD_INT 1
74394: ARRAY
74395: PPUSH
74396: LD_VAR 0 2
74400: PUSH
74401: LD_VAR 0 9
74405: ARRAY
74406: PUSH
74407: LD_INT 2
74409: ARRAY
74410: PPUSH
74411: CALL_OW 114
74415: GO 74431
// SetTag ( i , tag ) ;
74417: LD_VAR 0 4
74421: PPUSH
74422: LD_VAR 0 9
74426: PPUSH
74427: CALL_OW 109
// end else
74431: GO 74504
// if enemy then
74433: LD_VAR 0 5
74437: IFFALSE 74504
// begin if GetWeapon ( i ) = ru_time_lapser then
74439: LD_VAR 0 4
74443: PPUSH
74444: CALL_OW 264
74448: PUSH
74449: LD_INT 49
74451: EQUAL
74452: IFFALSE 74480
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74454: LD_VAR 0 4
74458: PPUSH
74459: LD_VAR 0 5
74463: PPUSH
74464: LD_VAR 0 4
74468: PPUSH
74469: CALL_OW 74
74473: PPUSH
74474: CALL_OW 112
74478: GO 74504
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74480: LD_VAR 0 4
74484: PPUSH
74485: LD_VAR 0 5
74489: PPUSH
74490: LD_VAR 0 4
74494: PPUSH
74495: CALL_OW 74
74499: PPUSH
74500: CALL 75589 0 2
// end ; end ;
74504: GO 74076
74506: POP
74507: POP
// end ;
74508: LD_VAR 0 3
74512: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74513: LD_INT 0
74515: PPUSH
74516: PPUSH
74517: PPUSH
// if not unit or IsInUnit ( unit ) then
74518: LD_VAR 0 1
74522: NOT
74523: IFTRUE 74536
74525: PUSH
74526: LD_VAR 0 1
74530: PPUSH
74531: CALL_OW 310
74535: OR
74536: IFFALSE 74540
// exit ;
74538: GO 74631
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74540: LD_ADDR_VAR 0 4
74544: PUSH
74545: LD_VAR 0 1
74549: PPUSH
74550: CALL_OW 250
74554: PPUSH
74555: LD_VAR 0 2
74559: PPUSH
74560: LD_INT 1
74562: PPUSH
74563: CALL_OW 272
74567: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74568: LD_ADDR_VAR 0 5
74572: PUSH
74573: LD_VAR 0 1
74577: PPUSH
74578: CALL_OW 251
74582: PPUSH
74583: LD_VAR 0 2
74587: PPUSH
74588: LD_INT 1
74590: PPUSH
74591: CALL_OW 273
74595: ST_TO_ADDR
// if ValidHex ( x , y ) then
74596: LD_VAR 0 4
74600: PPUSH
74601: LD_VAR 0 5
74605: PPUSH
74606: CALL_OW 488
74610: IFFALSE 74631
// ComTurnXY ( unit , x , y ) ;
74612: LD_VAR 0 1
74616: PPUSH
74617: LD_VAR 0 4
74621: PPUSH
74622: LD_VAR 0 5
74626: PPUSH
74627: CALL_OW 118
// end ;
74631: LD_VAR 0 3
74635: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74636: LD_INT 0
74638: PPUSH
74639: PPUSH
// result := false ;
74640: LD_ADDR_VAR 0 3
74644: PUSH
74645: LD_INT 0
74647: ST_TO_ADDR
// if not units then
74648: LD_VAR 0 2
74652: NOT
74653: IFFALSE 74657
// exit ;
74655: GO 74702
// for i in units do
74657: LD_ADDR_VAR 0 4
74661: PUSH
74662: LD_VAR 0 2
74666: PUSH
74667: FOR_IN
74668: IFFALSE 74700
// if See ( side , i ) then
74670: LD_VAR 0 1
74674: PPUSH
74675: LD_VAR 0 4
74679: PPUSH
74680: CALL_OW 292
74684: IFFALSE 74698
// begin result := true ;
74686: LD_ADDR_VAR 0 3
74690: PUSH
74691: LD_INT 1
74693: ST_TO_ADDR
// exit ;
74694: POP
74695: POP
74696: GO 74702
// end ;
74698: GO 74667
74700: POP
74701: POP
// end ;
74702: LD_VAR 0 3
74706: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74707: LD_INT 0
74709: PPUSH
74710: PPUSH
74711: PPUSH
74712: PPUSH
// if not unit or not points then
74713: LD_VAR 0 1
74717: NOT
74718: IFTRUE 74727
74720: PUSH
74721: LD_VAR 0 2
74725: NOT
74726: OR
74727: IFFALSE 74731
// exit ;
74729: GO 74821
// dist := 99999 ;
74731: LD_ADDR_VAR 0 5
74735: PUSH
74736: LD_INT 99999
74738: ST_TO_ADDR
// for i in points do
74739: LD_ADDR_VAR 0 4
74743: PUSH
74744: LD_VAR 0 2
74748: PUSH
74749: FOR_IN
74750: IFFALSE 74819
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74752: LD_ADDR_VAR 0 6
74756: PUSH
74757: LD_VAR 0 1
74761: PPUSH
74762: LD_VAR 0 4
74766: PUSH
74767: LD_INT 1
74769: ARRAY
74770: PPUSH
74771: LD_VAR 0 4
74775: PUSH
74776: LD_INT 2
74778: ARRAY
74779: PPUSH
74780: CALL_OW 297
74784: ST_TO_ADDR
// if tmpDist < dist then
74785: LD_VAR 0 6
74789: PUSH
74790: LD_VAR 0 5
74794: LESS
74795: IFFALSE 74817
// begin result := i ;
74797: LD_ADDR_VAR 0 3
74801: PUSH
74802: LD_VAR 0 4
74806: ST_TO_ADDR
// dist := tmpDist ;
74807: LD_ADDR_VAR 0 5
74811: PUSH
74812: LD_VAR 0 6
74816: ST_TO_ADDR
// end ; end ;
74817: GO 74749
74819: POP
74820: POP
// end ;
74821: LD_VAR 0 3
74825: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74826: LD_INT 0
74828: PPUSH
// uc_side := side ;
74829: LD_ADDR_OWVAR 20
74833: PUSH
74834: LD_VAR 0 1
74838: ST_TO_ADDR
// uc_nation := 3 ;
74839: LD_ADDR_OWVAR 21
74843: PUSH
74844: LD_INT 3
74846: ST_TO_ADDR
// vc_chassis := 25 ;
74847: LD_ADDR_OWVAR 37
74851: PUSH
74852: LD_INT 25
74854: ST_TO_ADDR
// vc_engine := engine_siberite ;
74855: LD_ADDR_OWVAR 39
74859: PUSH
74860: LD_INT 3
74862: ST_TO_ADDR
// vc_control := control_computer ;
74863: LD_ADDR_OWVAR 38
74867: PUSH
74868: LD_INT 3
74870: ST_TO_ADDR
// vc_weapon := 59 ;
74871: LD_ADDR_OWVAR 40
74875: PUSH
74876: LD_INT 59
74878: ST_TO_ADDR
// result := CreateVehicle ;
74879: LD_ADDR_VAR 0 5
74883: PUSH
74884: CALL_OW 45
74888: ST_TO_ADDR
// SetDir ( result , d ) ;
74889: LD_VAR 0 5
74893: PPUSH
74894: LD_VAR 0 4
74898: PPUSH
74899: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74903: LD_VAR 0 5
74907: PPUSH
74908: LD_VAR 0 2
74912: PPUSH
74913: LD_VAR 0 3
74917: PPUSH
74918: LD_INT 0
74920: PPUSH
74921: CALL_OW 48
// end ;
74925: LD_VAR 0 5
74929: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74930: LD_INT 0
74932: PPUSH
74933: PPUSH
74934: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74935: LD_ADDR_VAR 0 2
74939: PUSH
74940: LD_INT 0
74942: PUSH
74943: LD_INT 0
74945: PUSH
74946: LD_INT 0
74948: PUSH
74949: LD_INT 0
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: LIST
74956: LIST
74957: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74958: LD_VAR 0 1
74962: NOT
74963: IFTRUE 74996
74965: PUSH
74966: LD_VAR 0 1
74970: PPUSH
74971: CALL_OW 264
74975: PUSH
74976: LD_INT 12
74978: PUSH
74979: LD_INT 51
74981: PUSH
74982: LD_INT 32
74984: PUSH
74985: LD_INT 89
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: IN
74994: NOT
74995: OR
74996: IFFALSE 75000
// exit ;
74998: GO 75098
// for i := 1 to 3 do
75000: LD_ADDR_VAR 0 3
75004: PUSH
75005: DOUBLE
75006: LD_INT 1
75008: DEC
75009: ST_TO_ADDR
75010: LD_INT 3
75012: PUSH
75013: FOR_TO
75014: IFFALSE 75096
// begin tmp := GetCargo ( cargo , i ) ;
75016: LD_ADDR_VAR 0 4
75020: PUSH
75021: LD_VAR 0 1
75025: PPUSH
75026: LD_VAR 0 3
75030: PPUSH
75031: CALL_OW 289
75035: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75036: LD_ADDR_VAR 0 2
75040: PUSH
75041: LD_VAR 0 2
75045: PPUSH
75046: LD_VAR 0 3
75050: PPUSH
75051: LD_VAR 0 4
75055: PPUSH
75056: CALL_OW 1
75060: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75061: LD_ADDR_VAR 0 2
75065: PUSH
75066: LD_VAR 0 2
75070: PPUSH
75071: LD_INT 4
75073: PPUSH
75074: LD_VAR 0 2
75078: PUSH
75079: LD_INT 4
75081: ARRAY
75082: PUSH
75083: LD_VAR 0 4
75087: PLUS
75088: PPUSH
75089: CALL_OW 1
75093: ST_TO_ADDR
// end ;
75094: GO 75013
75096: POP
75097: POP
// end ;
75098: LD_VAR 0 2
75102: RET
// export function Length ( array ) ; begin
75103: LD_INT 0
75105: PPUSH
// result := array + 0 ;
75106: LD_ADDR_VAR 0 2
75110: PUSH
75111: LD_VAR 0 1
75115: PUSH
75116: LD_INT 0
75118: PLUS
75119: ST_TO_ADDR
// end ;
75120: LD_VAR 0 2
75124: RET
// export function PrepareArray ( array ) ; begin
75125: LD_INT 0
75127: PPUSH
// result := array diff 0 ;
75128: LD_ADDR_VAR 0 2
75132: PUSH
75133: LD_VAR 0 1
75137: PUSH
75138: LD_INT 0
75140: DIFF
75141: ST_TO_ADDR
// if not result [ 1 ] then
75142: LD_VAR 0 2
75146: PUSH
75147: LD_INT 1
75149: ARRAY
75150: NOT
75151: IFFALSE 75171
// result := Delete ( result , 1 ) ;
75153: LD_ADDR_VAR 0 2
75157: PUSH
75158: LD_VAR 0 2
75162: PPUSH
75163: LD_INT 1
75165: PPUSH
75166: CALL_OW 3
75170: ST_TO_ADDR
// end ;
75171: LD_VAR 0 2
75175: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75176: LD_INT 0
75178: PPUSH
75179: PPUSH
75180: PPUSH
75181: PPUSH
// sibRocketRange := 25 ;
75182: LD_ADDR_VAR 0 6
75186: PUSH
75187: LD_INT 25
75189: ST_TO_ADDR
// result := false ;
75190: LD_ADDR_VAR 0 4
75194: PUSH
75195: LD_INT 0
75197: ST_TO_ADDR
// for i := 0 to 5 do
75198: LD_ADDR_VAR 0 5
75202: PUSH
75203: DOUBLE
75204: LD_INT 0
75206: DEC
75207: ST_TO_ADDR
75208: LD_INT 5
75210: PUSH
75211: FOR_TO
75212: IFFALSE 75279
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75214: LD_VAR 0 1
75218: PPUSH
75219: LD_VAR 0 5
75223: PPUSH
75224: LD_VAR 0 6
75228: PPUSH
75229: CALL_OW 272
75233: PPUSH
75234: LD_VAR 0 2
75238: PPUSH
75239: LD_VAR 0 5
75243: PPUSH
75244: LD_VAR 0 6
75248: PPUSH
75249: CALL_OW 273
75253: PPUSH
75254: LD_VAR 0 3
75258: PPUSH
75259: CALL_OW 309
75263: IFFALSE 75277
// begin result := true ;
75265: LD_ADDR_VAR 0 4
75269: PUSH
75270: LD_INT 1
75272: ST_TO_ADDR
// exit ;
75273: POP
75274: POP
75275: GO 75281
// end ;
75277: GO 75211
75279: POP
75280: POP
// end ;
75281: LD_VAR 0 4
75285: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75286: LD_INT 0
75288: PPUSH
75289: PPUSH
75290: PPUSH
// if btype = b_depot then
75291: LD_VAR 0 2
75295: PUSH
75296: LD_INT 0
75298: EQUAL
75299: IFFALSE 75311
// begin result := true ;
75301: LD_ADDR_VAR 0 3
75305: PUSH
75306: LD_INT 1
75308: ST_TO_ADDR
// exit ;
75309: GO 75431
// end ; pom := GetBase ( depot ) ;
75311: LD_ADDR_VAR 0 4
75315: PUSH
75316: LD_VAR 0 1
75320: PPUSH
75321: CALL_OW 274
75325: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75326: LD_ADDR_VAR 0 5
75330: PUSH
75331: LD_VAR 0 2
75335: PPUSH
75336: LD_VAR 0 1
75340: PPUSH
75341: CALL_OW 248
75345: PPUSH
75346: CALL_OW 450
75350: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75351: LD_ADDR_VAR 0 3
75355: PUSH
75356: LD_VAR 0 4
75360: PPUSH
75361: LD_INT 1
75363: PPUSH
75364: CALL_OW 275
75368: PUSH
75369: LD_VAR 0 5
75373: PUSH
75374: LD_INT 1
75376: ARRAY
75377: GREATEREQUAL
75378: IFFALSE 75404
75380: PUSH
75381: LD_VAR 0 4
75385: PPUSH
75386: LD_INT 2
75388: PPUSH
75389: CALL_OW 275
75393: PUSH
75394: LD_VAR 0 5
75398: PUSH
75399: LD_INT 2
75401: ARRAY
75402: GREATEREQUAL
75403: AND
75404: IFFALSE 75430
75406: PUSH
75407: LD_VAR 0 4
75411: PPUSH
75412: LD_INT 3
75414: PPUSH
75415: CALL_OW 275
75419: PUSH
75420: LD_VAR 0 5
75424: PUSH
75425: LD_INT 3
75427: ARRAY
75428: GREATEREQUAL
75429: AND
75430: ST_TO_ADDR
// end ;
75431: LD_VAR 0 3
75435: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75436: LD_INT 0
75438: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75439: LD_VAR 0 1
75443: PPUSH
75444: LD_VAR 0 2
75448: PPUSH
75449: LD_INT 0
75451: PPUSH
75452: LD_INT 0
75454: PPUSH
75455: LD_INT 1
75457: PPUSH
75458: LD_INT 0
75460: PPUSH
75461: CALL_OW 587
// end ;
75465: LD_VAR 0 3
75469: RET
// export function CenterOnNow ( unit ) ; begin
75470: LD_INT 0
75472: PPUSH
// result := IsInUnit ( unit ) ;
75473: LD_ADDR_VAR 0 2
75477: PUSH
75478: LD_VAR 0 1
75482: PPUSH
75483: CALL_OW 310
75487: ST_TO_ADDR
// if not result then
75488: LD_VAR 0 2
75492: NOT
75493: IFFALSE 75505
// result := unit ;
75495: LD_ADDR_VAR 0 2
75499: PUSH
75500: LD_VAR 0 1
75504: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75505: LD_VAR 0 1
75509: PPUSH
75510: CALL_OW 87
// end ;
75514: LD_VAR 0 2
75518: RET
// export function ComMoveHex ( unit , hex ) ; begin
75519: LD_INT 0
75521: PPUSH
// if not hex then
75522: LD_VAR 0 2
75526: NOT
75527: IFFALSE 75531
// exit ;
75529: GO 75584
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75531: LD_VAR 0 2
75535: PUSH
75536: LD_INT 1
75538: ARRAY
75539: PPUSH
75540: LD_VAR 0 2
75544: PUSH
75545: LD_INT 2
75547: ARRAY
75548: PPUSH
75549: CALL_OW 428
75553: IFFALSE 75557
// exit ;
75555: GO 75584
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75557: LD_VAR 0 1
75561: PPUSH
75562: LD_VAR 0 2
75566: PUSH
75567: LD_INT 1
75569: ARRAY
75570: PPUSH
75571: LD_VAR 0 2
75575: PUSH
75576: LD_INT 2
75578: ARRAY
75579: PPUSH
75580: CALL_OW 111
// end ;
75584: LD_VAR 0 3
75588: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
75589: LD_INT 0
75591: PPUSH
75592: PPUSH
75593: PPUSH
// if not unit or not enemy then
75594: LD_VAR 0 1
75598: NOT
75599: IFTRUE 75608
75601: PUSH
75602: LD_VAR 0 2
75606: NOT
75607: OR
75608: IFFALSE 75612
// exit ;
75610: GO 75738
// x := GetX ( enemy ) ;
75612: LD_ADDR_VAR 0 4
75616: PUSH
75617: LD_VAR 0 2
75621: PPUSH
75622: CALL_OW 250
75626: ST_TO_ADDR
// y := GetY ( enemy ) ;
75627: LD_ADDR_VAR 0 5
75631: PUSH
75632: LD_VAR 0 2
75636: PPUSH
75637: CALL_OW 251
75641: ST_TO_ADDR
// if ValidHex ( x , y ) then
75642: LD_VAR 0 4
75646: PPUSH
75647: LD_VAR 0 5
75651: PPUSH
75652: CALL_OW 488
75656: IFFALSE 75738
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
75658: LD_VAR 0 2
75662: PPUSH
75663: CALL_OW 247
75667: PUSH
75668: LD_INT 3
75670: PUSH
75671: LD_INT 2
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: IN
75678: IFTRUE 75701
75680: PUSH
75681: LD_VAR 0 1
75685: PPUSH
75686: CALL_OW 255
75690: PPUSH
75691: LD_VAR 0 2
75695: PPUSH
75696: CALL_OW 292
75700: OR
75701: IFFALSE 75719
// ComAttackUnit ( unit , enemy ) else
75703: LD_VAR 0 1
75707: PPUSH
75708: LD_VAR 0 2
75712: PPUSH
75713: CALL_OW 115
75717: GO 75738
// ComAgressiveMove ( unit , x , y ) ;
75719: LD_VAR 0 1
75723: PPUSH
75724: LD_VAR 0 4
75728: PPUSH
75729: LD_VAR 0 5
75733: PPUSH
75734: CALL_OW 114
// end ;
75738: LD_VAR 0 3
75742: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
75743: LD_INT 0
75745: PPUSH
75746: PPUSH
75747: PPUSH
// list := AreaToList ( area , 0 ) ;
75748: LD_ADDR_VAR 0 5
75752: PUSH
75753: LD_VAR 0 1
75757: PPUSH
75758: LD_INT 0
75760: PPUSH
75761: CALL_OW 517
75765: ST_TO_ADDR
// if not list then
75766: LD_VAR 0 5
75770: NOT
75771: IFFALSE 75775
// exit ;
75773: GO 75905
// if all then
75775: LD_VAR 0 2
75779: IFFALSE 75867
// begin for i := 1 to list [ 1 ] do
75781: LD_ADDR_VAR 0 4
75785: PUSH
75786: DOUBLE
75787: LD_INT 1
75789: DEC
75790: ST_TO_ADDR
75791: LD_VAR 0 5
75795: PUSH
75796: LD_INT 1
75798: ARRAY
75799: PUSH
75800: FOR_TO
75801: IFFALSE 75863
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
75803: LD_ADDR_VAR 0 3
75807: PUSH
75808: LD_VAR 0 3
75812: PPUSH
75813: LD_VAR 0 3
75817: PUSH
75818: LD_INT 1
75820: PLUS
75821: PPUSH
75822: LD_VAR 0 5
75826: PUSH
75827: LD_INT 1
75829: ARRAY
75830: PUSH
75831: LD_VAR 0 4
75835: ARRAY
75836: PUSH
75837: LD_VAR 0 5
75841: PUSH
75842: LD_INT 2
75844: ARRAY
75845: PUSH
75846: LD_VAR 0 4
75850: ARRAY
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: PPUSH
75856: CALL_OW 1
75860: ST_TO_ADDR
75861: GO 75800
75863: POP
75864: POP
// exit ;
75865: GO 75905
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
75867: LD_ADDR_VAR 0 3
75871: PUSH
75872: LD_VAR 0 5
75876: PUSH
75877: LD_INT 1
75879: ARRAY
75880: PUSH
75881: LD_INT 1
75883: ARRAY
75884: PUSH
75885: LD_VAR 0 5
75889: PUSH
75890: LD_INT 2
75892: ARRAY
75893: PUSH
75894: LD_INT 1
75896: ARRAY
75897: PUSH
75898: EMPTY
75899: LIST
75900: LIST
75901: PUSH
75902: EMPTY
75903: LIST
75904: ST_TO_ADDR
// end ;
75905: LD_VAR 0 3
75909: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75910: LD_INT 0
75912: PPUSH
75913: PPUSH
// list := AreaToList ( area , 0 ) ;
75914: LD_ADDR_VAR 0 4
75918: PUSH
75919: LD_VAR 0 1
75923: PPUSH
75924: LD_INT 0
75926: PPUSH
75927: CALL_OW 517
75931: ST_TO_ADDR
// if not list then
75932: LD_VAR 0 4
75936: NOT
75937: IFFALSE 75941
// exit ;
75939: GO 75982
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75941: LD_ADDR_VAR 0 3
75945: PUSH
75946: LD_VAR 0 4
75950: PUSH
75951: LD_INT 1
75953: ARRAY
75954: PUSH
75955: LD_INT 1
75957: ARRAY
75958: PUSH
75959: LD_VAR 0 4
75963: PUSH
75964: LD_INT 2
75966: ARRAY
75967: PUSH
75968: LD_INT 1
75970: ARRAY
75971: PUSH
75972: LD_VAR 0 2
75976: PUSH
75977: EMPTY
75978: LIST
75979: LIST
75980: LIST
75981: ST_TO_ADDR
// end ;
75982: LD_VAR 0 3
75986: RET
// export function First ( array ) ; begin
75987: LD_INT 0
75989: PPUSH
// if not array then
75990: LD_VAR 0 1
75994: NOT
75995: IFFALSE 75999
// exit ;
75997: GO 76013
// result := array [ 1 ] ;
75999: LD_ADDR_VAR 0 2
76003: PUSH
76004: LD_VAR 0 1
76008: PUSH
76009: LD_INT 1
76011: ARRAY
76012: ST_TO_ADDR
// end ;
76013: LD_VAR 0 2
76017: RET
// export function Last ( array ) ; begin
76018: LD_INT 0
76020: PPUSH
// if not array then
76021: LD_VAR 0 1
76025: NOT
76026: IFFALSE 76030
// exit ;
76028: GO 76046
// result := array [ array ] ;
76030: LD_ADDR_VAR 0 2
76034: PUSH
76035: LD_VAR 0 1
76039: PUSH
76040: LD_VAR 0 1
76044: ARRAY
76045: ST_TO_ADDR
// end ;
76046: LD_VAR 0 2
76050: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76051: LD_INT 0
76053: PPUSH
76054: PPUSH
// result := [ ] ;
76055: LD_ADDR_VAR 0 5
76059: PUSH
76060: EMPTY
76061: ST_TO_ADDR
// if not array then
76062: LD_VAR 0 1
76066: NOT
76067: IFFALSE 76071
// exit ;
76069: GO 76183
// for i := 1 to array do
76071: LD_ADDR_VAR 0 6
76075: PUSH
76076: DOUBLE
76077: LD_INT 1
76079: DEC
76080: ST_TO_ADDR
76081: LD_VAR 0 1
76085: PUSH
76086: FOR_TO
76087: IFFALSE 76181
// if array [ i ] [ index ] = value then
76089: LD_VAR 0 1
76093: PUSH
76094: LD_VAR 0 6
76098: ARRAY
76099: PUSH
76100: LD_VAR 0 2
76104: ARRAY
76105: PUSH
76106: LD_VAR 0 3
76110: EQUAL
76111: IFFALSE 76179
// begin if indexColumn then
76113: LD_VAR 0 4
76117: IFFALSE 76153
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76119: LD_ADDR_VAR 0 5
76123: PUSH
76124: LD_VAR 0 5
76128: PPUSH
76129: LD_VAR 0 1
76133: PUSH
76134: LD_VAR 0 6
76138: ARRAY
76139: PUSH
76140: LD_VAR 0 4
76144: ARRAY
76145: PPUSH
76146: CALL 71191 0 2
76150: ST_TO_ADDR
76151: GO 76179
// result := Join ( result , array [ i ] ) ;
76153: LD_ADDR_VAR 0 5
76157: PUSH
76158: LD_VAR 0 5
76162: PPUSH
76163: LD_VAR 0 1
76167: PUSH
76168: LD_VAR 0 6
76172: ARRAY
76173: PPUSH
76174: CALL 71191 0 2
76178: ST_TO_ADDR
// end ;
76179: GO 76086
76181: POP
76182: POP
// end ;
76183: LD_VAR 0 5
76187: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76188: LD_INT 0
76190: PPUSH
// if not vehicles or not parkingPoint then
76191: LD_VAR 0 1
76195: NOT
76196: IFTRUE 76205
76198: PUSH
76199: LD_VAR 0 2
76203: NOT
76204: OR
76205: IFFALSE 76209
// exit ;
76207: GO 76307
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76209: LD_ADDR_VAR 0 1
76213: PUSH
76214: LD_VAR 0 1
76218: PPUSH
76219: LD_INT 50
76221: PUSH
76222: EMPTY
76223: LIST
76224: PUSH
76225: LD_INT 3
76227: PUSH
76228: LD_INT 92
76230: PUSH
76231: LD_VAR 0 2
76235: PUSH
76236: LD_INT 1
76238: ARRAY
76239: PUSH
76240: LD_VAR 0 2
76244: PUSH
76245: LD_INT 2
76247: ARRAY
76248: PUSH
76249: LD_INT 8
76251: PUSH
76252: EMPTY
76253: LIST
76254: LIST
76255: LIST
76256: LIST
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: PUSH
76262: EMPTY
76263: LIST
76264: LIST
76265: PPUSH
76266: CALL_OW 72
76270: ST_TO_ADDR
// if not vehicles then
76271: LD_VAR 0 1
76275: NOT
76276: IFFALSE 76280
// exit ;
76278: GO 76307
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76280: LD_VAR 0 1
76284: PPUSH
76285: LD_VAR 0 2
76289: PUSH
76290: LD_INT 1
76292: ARRAY
76293: PPUSH
76294: LD_VAR 0 2
76298: PUSH
76299: LD_INT 2
76301: ARRAY
76302: PPUSH
76303: CALL_OW 111
// end ;
76307: LD_VAR 0 3
76311: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76312: LD_INT 0
76314: PPUSH
76315: PPUSH
76316: PPUSH
// if not side or not area then
76317: LD_VAR 0 1
76321: NOT
76322: IFTRUE 76331
76324: PUSH
76325: LD_VAR 0 2
76329: NOT
76330: OR
76331: IFFALSE 76335
// exit ;
76333: GO 76454
// tmp := AreaToList ( area , 0 ) ;
76335: LD_ADDR_VAR 0 5
76339: PUSH
76340: LD_VAR 0 2
76344: PPUSH
76345: LD_INT 0
76347: PPUSH
76348: CALL_OW 517
76352: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76353: LD_ADDR_VAR 0 4
76357: PUSH
76358: DOUBLE
76359: LD_INT 1
76361: DEC
76362: ST_TO_ADDR
76363: LD_VAR 0 5
76367: PUSH
76368: LD_INT 1
76370: ARRAY
76371: PUSH
76372: FOR_TO
76373: IFFALSE 76452
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76375: LD_VAR 0 5
76379: PUSH
76380: LD_INT 1
76382: ARRAY
76383: PUSH
76384: LD_VAR 0 4
76388: ARRAY
76389: PPUSH
76390: LD_VAR 0 5
76394: PUSH
76395: LD_INT 2
76397: ARRAY
76398: PUSH
76399: LD_VAR 0 4
76403: ARRAY
76404: PPUSH
76405: CALL_OW 351
76409: IFFALSE 76450
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76411: LD_VAR 0 5
76415: PUSH
76416: LD_INT 1
76418: ARRAY
76419: PUSH
76420: LD_VAR 0 4
76424: ARRAY
76425: PPUSH
76426: LD_VAR 0 5
76430: PUSH
76431: LD_INT 2
76433: ARRAY
76434: PUSH
76435: LD_VAR 0 4
76439: ARRAY
76440: PPUSH
76441: LD_VAR 0 1
76445: PPUSH
76446: CALL_OW 244
// end ;
76450: GO 76372
76452: POP
76453: POP
// end ; end_of_file
76454: LD_VAR 0 3
76458: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76459: LD_VAR 0 1
76463: PUSH
76464: LD_INT 200
76466: DOUBLE
76467: GREATEREQUAL
76468: IFFALSE 76476
76470: LD_INT 299
76472: DOUBLE
76473: LESSEQUAL
76474: IFTRUE 76478
76476: GO 76510
76478: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76479: LD_VAR 0 1
76483: PPUSH
76484: LD_VAR 0 2
76488: PPUSH
76489: LD_VAR 0 3
76493: PPUSH
76494: LD_VAR 0 4
76498: PPUSH
76499: LD_VAR 0 5
76503: PPUSH
76504: CALL 28302 0 5
76508: GO 76587
76510: LD_INT 300
76512: DOUBLE
76513: GREATEREQUAL
76514: IFFALSE 76522
76516: LD_INT 399
76518: DOUBLE
76519: LESSEQUAL
76520: IFTRUE 76524
76522: GO 76586
76524: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76525: LD_VAR 0 1
76529: PPUSH
76530: LD_VAR 0 2
76534: PPUSH
76535: LD_VAR 0 3
76539: PPUSH
76540: LD_VAR 0 4
76544: PPUSH
76545: LD_VAR 0 5
76549: PPUSH
76550: LD_VAR 0 6
76554: PPUSH
76555: LD_VAR 0 7
76559: PPUSH
76560: LD_VAR 0 8
76564: PPUSH
76565: LD_VAR 0 9
76569: PPUSH
76570: LD_VAR 0 10
76574: PPUSH
76575: LD_VAR 0 11
76579: PPUSH
76580: CALL 24186 0 11
76584: GO 76587
76586: POP
// end ;
76587: PPOPN 11
76589: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76590: LD_VAR 0 1
76594: PPUSH
76595: LD_VAR 0 2
76599: PPUSH
76600: LD_VAR 0 3
76604: PPUSH
76605: LD_VAR 0 4
76609: PPUSH
76610: LD_VAR 0 5
76614: PPUSH
76615: CALL 27683 0 5
// end ; end_of_file
76619: PPOPN 5
76621: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76622: LD_VAR 0 1
76626: PPUSH
76627: LD_VAR 0 2
76631: PPUSH
76632: LD_VAR 0 3
76636: PPUSH
76637: LD_VAR 0 4
76641: PPUSH
76642: LD_VAR 0 5
76646: PPUSH
76647: LD_VAR 0 6
76651: PPUSH
76652: CALL 11726 0 6
// end ;
76656: PPOPN 6
76658: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76659: LD_INT 0
76661: PPUSH
// begin if not units then
76662: LD_VAR 0 1
76666: NOT
76667: IFFALSE 76671
// exit ;
76669: GO 76671
// end ;
76671: PPOPN 7
76673: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76674: CALL 11613 0 0
// end ;
76678: PPOPN 1
76680: END
