// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// PrepareNature ;
 111: CALL 1202 0 0
// PrepareDifficulty ;
 115: CALL 1555 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 873 0 0
// PrepareRussianBase ;
 127: CALL 1062 0 0
// PrepareCommander ;
 131: CALL 1007 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING 13f_JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: CALL 1348 0 2
 598: ST_TO_ADDR
// if debugMode then
 599: LD_EXP 16
 603: IFFALSE 618
// JMM := NewCharacter ( JMM ) ;
 605: LD_ADDR_EXP 1
 609: PUSH
 610: LD_STRING JMM
 612: PPUSH
 613: CALL_OW 25
 617: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 618: LD_EXP 1
 622: PPUSH
 623: LD_INT 95
 625: PPUSH
 626: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 630: LD_EXP 1
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 642: LD_ADDR_EXP 5
 646: PUSH
 647: LD_STRING Powell
 649: PPUSH
 650: LD_INT 0
 652: PPUSH
 653: CALL 1348 0 2
 657: ST_TO_ADDR
// uc_side = 4 ;
 658: LD_ADDR_OWVAR 20
 662: PUSH
 663: LD_INT 4
 665: ST_TO_ADDR
// Joan = PrepareUnit ( 10c_Joan , true ) ;
 666: LD_ADDR_EXP 2
 670: PUSH
 671: LD_STRING 10c_Joan
 673: PPUSH
 674: LD_INT 1
 676: PPUSH
 677: CALL 1348 0 2
 681: ST_TO_ADDR
// if Joan then
 682: LD_EXP 2
 686: IFFALSE 725
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 688: LD_EXP 2
 692: PPUSH
 693: LD_INT 4
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 703: LD_EXP 2
 707: PPUSH
 708: LD_INT 4
 710: PPUSH
 711: CALL_OW 336
// JMMGirl = 1 ;
 715: LD_ADDR_EXP 7
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// end else
 723: GO 782
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 725: LD_ADDR_EXP 3
 729: PUSH
 730: LD_STRING 13s_Lisa
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: CALL 1348 0 2
 740: ST_TO_ADDR
// if Lisa then
 741: LD_EXP 3
 745: IFFALSE 782
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 747: LD_EXP 3
 751: PPUSH
 752: LD_INT 4
 754: PPUSH
 755: LD_INT 0
 757: PPUSH
 758: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 762: LD_EXP 3
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: CALL_OW 336
// JMMGirl = 2 ;
 774: LD_ADDR_EXP 7
 778: PUSH
 779: LD_INT 2
 781: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 782: LD_EXP 2
 786: NOT
 787: PUSH
 788: LD_EXP 3
 792: NOT
 793: AND
 794: IFFALSE 844
// begin Connie = NewCharacter ( Coonie ) ;
 796: LD_ADDR_EXP 4
 800: PUSH
 801: LD_STRING Coonie
 803: PPUSH
 804: CALL_OW 25
 808: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 809: LD_EXP 4
 813: PPUSH
 814: LD_INT 4
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 824: LD_EXP 4
 828: PPUSH
 829: LD_INT 3
 831: PPUSH
 832: CALL_OW 336
// JMMGirl = 3 ;
 836: LD_ADDR_EXP 7
 840: PUSH
 841: LD_INT 3
 843: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 844: LD_EXP 2
 848: PUSH
 849: LD_EXP 3
 853: PUSH
 854: LD_EXP 4
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: LIST
 863: PPUSH
 864: CALL_OW 140
// end ;
 868: LD_VAR 0 1
 872: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 873: LD_INT 0
 875: PPUSH
 876: PPUSH
 877: PPUSH
// for i = 1 to 5 do
 878: LD_ADDR_VAR 0 2
 882: PUSH
 883: DOUBLE
 884: LD_INT 1
 886: DEC
 887: ST_TO_ADDR
 888: LD_INT 5
 890: PUSH
 891: FOR_TO
 892: IFFALSE 1000
// begin vc_engine = 1 ;
 894: LD_ADDR_OWVAR 39
 898: PUSH
 899: LD_INT 1
 901: ST_TO_ADDR
// vc_control = 2 ;
 902: LD_ADDR_OWVAR 38
 906: PUSH
 907: LD_INT 2
 909: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 12 , 4 ] [ Rand ( 1 , 4 ) ] ;
 910: LD_ADDR_OWVAR 40
 914: PUSH
 915: LD_INT 9
 917: PUSH
 918: LD_INT 5
 920: PUSH
 921: LD_INT 12
 923: PUSH
 924: LD_INT 4
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: LIST
 931: LIST
 932: PUSH
 933: LD_INT 1
 935: PPUSH
 936: LD_INT 4
 938: PPUSH
 939: CALL_OW 12
 943: ARRAY
 944: ST_TO_ADDR
// vc_chassis = 2 ;
 945: LD_ADDR_OWVAR 37
 949: PUSH
 950: LD_INT 2
 952: ST_TO_ADDR
// veh = CreateVehicle ;
 953: LD_ADDR_VAR 0 3
 957: PUSH
 958: CALL_OW 45
 962: ST_TO_ADDR
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
 963: LD_VAR 0 3
 967: PPUSH
 968: LD_INT 500
 970: PPUSH
 971: LD_INT 1000
 973: PPUSH
 974: CALL_OW 12
 978: PPUSH
 979: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
 983: LD_VAR 0 3
 987: PPUSH
 988: LD_INT 15
 990: PPUSH
 991: LD_INT 0
 993: PPUSH
 994: CALL_OW 49
// end ;
 998: GO 891
1000: POP
1001: POP
// end ; end_of_file
1002: LD_VAR 0 1
1006: RET
// export function PrepareCommander ; begin
1007: LD_INT 0
1009: PPUSH
// uc_side = 3 ;
1010: LD_ADDR_OWVAR 20
1014: PUSH
1015: LD_INT 3
1017: ST_TO_ADDR
// uc_nation = 3 ;
1018: LD_ADDR_OWVAR 21
1022: PUSH
1023: LD_INT 3
1025: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
1026: LD_ADDR_EXP 6
1030: PUSH
1031: LD_STRING Eisenstein
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL 1348 0 2
1041: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1042: LD_EXP 6
1046: PPUSH
1047: LD_INT 11
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL_OW 49
// end ;
1057: LD_VAR 0 1
1061: RET
// export function PrepareRussianBase ; begin
1062: LD_INT 0
1064: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1065: LD_INT 3
1067: PPUSH
1068: LD_INT 3
1070: PPUSH
1071: LD_INT 45
1073: PPUSH
1074: LD_INT 10
1076: PPUSH
1077: LD_INT 9
1079: PPUSH
1080: LD_INT 2
1082: PPUSH
1083: CALL 1445 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1087: LD_INT 3
1089: PPUSH
1090: LD_INT 3
1092: PPUSH
1093: LD_INT 22
1095: PPUSH
1096: LD_INT 10
1098: PPUSH
1099: LD_INT 2
1101: PPUSH
1102: LD_INT 2
1104: PPUSH
1105: CALL 1445 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1109: LD_INT 3
1111: PPUSH
1112: LD_INT 3
1114: PPUSH
1115: LD_INT 1
1117: PPUSH
1118: LD_INT 10
1120: PPUSH
1121: LD_INT 3
1123: PPUSH
1124: LD_INT 3
1126: PPUSH
1127: CALL 1445 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1131: LD_INT 3
1133: PPUSH
1134: LD_INT 3
1136: PPUSH
1137: LD_INT 40
1139: PPUSH
1140: LD_INT 10
1142: PPUSH
1143: LD_INT 3
1145: PPUSH
1146: LD_INT 3
1148: PPUSH
1149: CALL 1445 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1153: LD_INT 3
1155: PPUSH
1156: LD_INT 3
1158: PPUSH
1159: LD_INT 14
1161: PPUSH
1162: LD_INT 10
1164: PPUSH
1165: LD_INT 4
1167: PPUSH
1168: LD_INT 1
1170: PPUSH
1171: CALL 1445 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1175: LD_INT 3
1177: PPUSH
1178: LD_INT 3
1180: PPUSH
1181: LD_INT 15
1183: PPUSH
1184: LD_INT 10
1186: PPUSH
1187: LD_INT 4
1189: PPUSH
1190: LD_INT 2
1192: PPUSH
1193: CALL 1445 0 6
// end ; end_of_file
1197: LD_VAR 0 1
1201: RET
// export function PrepareNature ; var i ; begin
1202: LD_INT 0
1204: PPUSH
1205: PPUSH
// uc_side := 0 ;
1206: LD_ADDR_OWVAR 20
1210: PUSH
1211: LD_INT 0
1213: ST_TO_ADDR
// uc_nation := 0 ;
1214: LD_ADDR_OWVAR 21
1218: PUSH
1219: LD_INT 0
1221: ST_TO_ADDR
// hc_class := class_apeman ;
1222: LD_ADDR_OWVAR 28
1226: PUSH
1227: LD_INT 12
1229: ST_TO_ADDR
// hc_gallery :=  ;
1230: LD_ADDR_OWVAR 33
1234: PUSH
1235: LD_STRING 
1237: ST_TO_ADDR
// hc_name :=  ;
1238: LD_ADDR_OWVAR 26
1242: PUSH
1243: LD_STRING 
1245: ST_TO_ADDR
// for i = 1 to 7 do
1246: LD_ADDR_VAR 0 2
1250: PUSH
1251: DOUBLE
1252: LD_INT 1
1254: DEC
1255: ST_TO_ADDR
1256: LD_INT 7
1258: PUSH
1259: FOR_TO
1260: IFFALSE 1341
// begin hc_class := class_apeman ;
1262: LD_ADDR_OWVAR 28
1266: PUSH
1267: LD_INT 12
1269: ST_TO_ADDR
// hc_gallery :=  ;
1270: LD_ADDR_OWVAR 33
1274: PUSH
1275: LD_STRING 
1277: ST_TO_ADDR
// hc_name :=  ;
1278: LD_ADDR_OWVAR 26
1282: PUSH
1283: LD_STRING 
1285: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1286: LD_ADDR_OWVAR 31
1290: PUSH
1291: LD_INT 1
1293: PUSH
1294: LD_INT 0
1296: PUSH
1297: LD_INT 0
1299: PUSH
1300: LD_INT 0
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1309: LD_ADDR_OWVAR 29
1313: PUSH
1314: LD_INT 11
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1324: CALL_OW 44
1328: PPUSH
1329: LD_INT 16
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 49
// end ;
1339: GO 1259
1341: POP
1342: POP
// end ;
1343: LD_VAR 0 1
1347: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1348: LD_INT 0
1350: PPUSH
1351: PPUSH
// if exist_mode then
1352: LD_VAR 0 2
1356: IFFALSE 1375
// begin unit := CreateCharacter ( ident ) ;
1358: LD_ADDR_VAR 0 4
1362: PUSH
1363: LD_VAR 0 1
1367: PPUSH
1368: CALL_OW 34
1372: ST_TO_ADDR
// end else
1373: GO 1390
// begin unit := NewCharacter ( ident ) ;
1375: LD_ADDR_VAR 0 4
1379: PUSH
1380: LD_VAR 0 1
1384: PPUSH
1385: CALL_OW 25
1389: ST_TO_ADDR
// end ; result := unit ;
1390: LD_ADDR_VAR 0 3
1394: PUSH
1395: LD_VAR 0 4
1399: ST_TO_ADDR
// end ;
1400: LD_VAR 0 3
1404: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1405: LD_INT 0
1407: PPUSH
1408: PPUSH
// for i in charactersList do
1409: LD_ADDR_VAR 0 4
1413: PUSH
1414: LD_VAR 0 1
1418: PUSH
1419: FOR_IN
1420: IFFALSE 1438
// SaveCharacters ( i , ident ) ;
1422: LD_VAR 0 4
1426: PPUSH
1427: LD_VAR 0 2
1431: PPUSH
1432: CALL_OW 38
1436: GO 1419
1438: POP
1439: POP
// end ;
1440: LD_VAR 0 3
1444: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1445: LD_INT 0
1447: PPUSH
1448: PPUSH
1449: PPUSH
1450: PPUSH
// for i = 1 to count do
1451: LD_ADDR_VAR 0 8
1455: PUSH
1456: DOUBLE
1457: LD_INT 1
1459: DEC
1460: ST_TO_ADDR
1461: LD_VAR 0 6
1465: PUSH
1466: FOR_TO
1467: IFFALSE 1548
// begin uc_side = side ;
1469: LD_ADDR_OWVAR 20
1473: PUSH
1474: LD_VAR 0 1
1478: ST_TO_ADDR
// uc_nation = nation ;
1479: LD_ADDR_OWVAR 21
1483: PUSH
1484: LD_VAR 0 2
1488: ST_TO_ADDR
// hc_gallery =  ;
1489: LD_ADDR_OWVAR 33
1493: PUSH
1494: LD_STRING 
1496: ST_TO_ADDR
// hc_name =  ;
1497: LD_ADDR_OWVAR 26
1501: PUSH
1502: LD_STRING 
1504: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1505: LD_INT 0
1507: PPUSH
1508: LD_VAR 0 5
1512: PPUSH
1513: LD_VAR 0 4
1517: PPUSH
1518: CALL_OW 380
// un = CreateHuman ;
1522: LD_ADDR_VAR 0 10
1526: PUSH
1527: CALL_OW 44
1531: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1532: LD_VAR 0 10
1536: PPUSH
1537: LD_VAR 0 3
1541: PPUSH
1542: CALL_OW 52
// end ;
1546: GO 1466
1548: POP
1549: POP
// end ;
1550: LD_VAR 0 7
1554: RET
// export function PrepareDifficulty ; begin
1555: LD_INT 0
1557: PPUSH
// if difficulty = 1 then
1558: LD_OWVAR 67
1562: PUSH
1563: LD_INT 1
1565: EQUAL
1566: IFFALSE 1646
// begin SetTech ( 57 , 3 , state_disabled ) ;
1568: LD_INT 57
1570: PPUSH
1571: LD_INT 3
1573: PPUSH
1574: LD_INT 0
1576: PPUSH
1577: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1581: LD_INT 58
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1594: LD_INT 59
1596: PPUSH
1597: LD_INT 3
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1607: LD_INT 51
1609: PPUSH
1610: LD_INT 3
1612: PPUSH
1613: LD_INT 0
1615: PPUSH
1616: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1620: LD_INT 52
1622: PPUSH
1623: LD_INT 3
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1633: LD_INT 53
1635: PPUSH
1636: LD_INT 3
1638: PPUSH
1639: LD_INT 0
1641: PPUSH
1642: CALL_OW 322
// end ; if difficulty = 2 then
1646: LD_OWVAR 67
1650: PUSH
1651: LD_INT 2
1653: EQUAL
1654: IFFALSE 1734
// begin SetTech ( 57 , 3 , state_enabled ) ;
1656: LD_INT 57
1658: PPUSH
1659: LD_INT 3
1661: PPUSH
1662: LD_INT 1
1664: PPUSH
1665: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1669: LD_INT 58
1671: PPUSH
1672: LD_INT 3
1674: PPUSH
1675: LD_INT 0
1677: PPUSH
1678: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1682: LD_INT 59
1684: PPUSH
1685: LD_INT 3
1687: PPUSH
1688: LD_INT 0
1690: PPUSH
1691: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1695: LD_INT 51
1697: PPUSH
1698: LD_INT 3
1700: PPUSH
1701: LD_INT 1
1703: PPUSH
1704: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1708: LD_INT 52
1710: PPUSH
1711: LD_INT 3
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1721: LD_INT 53
1723: PPUSH
1724: LD_INT 3
1726: PPUSH
1727: LD_INT 0
1729: PPUSH
1730: CALL_OW 322
// end ; if difficulty = 3 then
1734: LD_OWVAR 67
1738: PUSH
1739: LD_INT 3
1741: EQUAL
1742: IFFALSE 1822
// begin SetTech ( 57 , 3 , state_enabled ) ;
1744: LD_INT 57
1746: PPUSH
1747: LD_INT 3
1749: PPUSH
1750: LD_INT 1
1752: PPUSH
1753: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1757: LD_INT 58
1759: PPUSH
1760: LD_INT 3
1762: PPUSH
1763: LD_INT 1
1765: PPUSH
1766: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
1770: LD_INT 59
1772: PPUSH
1773: LD_INT 3
1775: PPUSH
1776: LD_INT 1
1778: PPUSH
1779: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1783: LD_INT 51
1785: PPUSH
1786: LD_INT 3
1788: PPUSH
1789: LD_INT 1
1791: PPUSH
1792: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1796: LD_INT 52
1798: PPUSH
1799: LD_INT 3
1801: PPUSH
1802: LD_INT 1
1804: PPUSH
1805: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
1809: LD_INT 53
1811: PPUSH
1812: LD_INT 3
1814: PPUSH
1815: LD_INT 1
1817: PPUSH
1818: CALL_OW 322
// end ; end ;
1822: LD_VAR 0 1
1826: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1827: LD_INT 0
1829: PPUSH
1830: PPUSH
1831: PPUSH
1832: PPUSH
1833: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
1834: LD_ADDR_VAR 0 8
1838: PUSH
1839: LD_INT 48
1841: PUSH
1842: LD_INT 49
1844: PUSH
1845: LD_INT 50
1847: PUSH
1848: LD_INT 20
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: LD_INT 69
1856: PUSH
1857: LD_INT 39
1859: PUSH
1860: LD_INT 34
1862: PUSH
1863: LD_INT 40
1865: PUSH
1866: LD_INT 71
1868: PUSH
1869: LD_INT 57
1871: PUSH
1872: LD_INT 58
1874: PUSH
1875: LD_INT 44
1877: PUSH
1878: LD_INT 32
1880: PUSH
1881: LD_INT 27
1883: PUSH
1884: LD_INT 23
1886: PUSH
1887: LD_INT 33
1889: PUSH
1890: LD_INT 54
1892: PUSH
1893: LD_INT 55
1895: PUSH
1896: LD_INT 56
1898: PUSH
1899: LD_INT 63
1901: PUSH
1902: LD_INT 64
1904: PUSH
1905: LD_INT 65
1907: PUSH
1908: LD_INT 30
1910: PUSH
1911: LD_INT 31
1913: PUSH
1914: LD_INT 21
1916: PUSH
1917: LD_INT 22
1919: PUSH
1920: LD_INT 25
1922: PUSH
1923: LD_INT 51
1925: PUSH
1926: LD_INT 52
1928: PUSH
1929: LD_INT 59
1931: PUSH
1932: LD_INT 53
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: ST_TO_ADDR
// for i = 1 to ru_tech_list do
1969: LD_ADDR_VAR 0 5
1973: PUSH
1974: DOUBLE
1975: LD_INT 1
1977: DEC
1978: ST_TO_ADDR
1979: LD_VAR 0 8
1983: PUSH
1984: FOR_TO
1985: IFFALSE 2061
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
1987: LD_VAR 0 8
1991: PUSH
1992: LD_VAR 0 5
1996: ARRAY
1997: PPUSH
1998: LD_VAR 0 1
2002: PPUSH
2003: CALL_OW 321
2007: PUSH
2008: LD_INT 1
2010: EQUAL
2011: PUSH
2012: LD_VAR 0 8
2016: PUSH
2017: LD_VAR 0 5
2021: ARRAY
2022: PPUSH
2023: LD_VAR 0 3
2027: PPUSH
2028: CALL_OW 482
2032: PUSH
2033: LD_INT 1
2035: EQUAL
2036: AND
2037: IFFALSE 2059
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2039: LD_VAR 0 2
2043: PPUSH
2044: LD_VAR 0 8
2048: PUSH
2049: LD_VAR 0 5
2053: ARRAY
2054: PPUSH
2055: CALL_OW 184
2059: GO 1984
2061: POP
2062: POP
// end ;
2063: LD_VAR 0 4
2067: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2068: LD_INT 0
2070: PPUSH
2071: PPUSH
2072: PPUSH
2073: PPUSH
2074: PPUSH
2075: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2076: LD_ADDR_VAR 0 8
2080: PUSH
2081: LD_VAR 0 2
2085: PPUSH
2086: CALL_OW 313
2090: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2091: LD_ADDR_VAR 0 9
2095: PUSH
2096: LD_VAR 0 3
2100: PPUSH
2101: LD_INT 22
2103: PUSH
2104: LD_VAR 0 1
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 25
2115: PUSH
2116: LD_INT 2
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 24
2125: PUSH
2126: LD_INT 750
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: LD_INT 3
2135: PUSH
2136: LD_INT 54
2138: PUSH
2139: EMPTY
2140: LIST
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: PPUSH
2152: CALL_OW 70
2156: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2157: LD_ADDR_VAR 0 6
2161: PUSH
2162: LD_VAR 0 3
2166: PPUSH
2167: LD_INT 22
2169: PUSH
2170: LD_VAR 0 1
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 21
2181: PUSH
2182: LD_INT 3
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: PUSH
2189: LD_INT 3
2191: PUSH
2192: LD_INT 24
2194: PUSH
2195: LD_INT 1000
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: PPUSH
2214: CALL_OW 70
2218: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2219: LD_VAR 0 6
2223: NOT
2224: PUSH
2225: LD_INT 22
2227: PUSH
2228: LD_VAR 0 1
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: PUSH
2237: LD_INT 25
2239: PUSH
2240: LD_INT 2
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 24
2249: PUSH
2250: LD_INT 250
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: PPUSH
2262: CALL_OW 69
2266: NOT
2267: AND
2268: IFFALSE 2272
// exit ;
2270: GO 2454
// if buildings_list > 0 and engineerOkInside then
2272: LD_VAR 0 6
2276: PUSH
2277: LD_INT 0
2279: GREATER
2280: PUSH
2281: LD_VAR 0 8
2285: AND
2286: IFFALSE 2297
// ComExitBuilding ( engineerOkInside ) ;
2288: LD_VAR 0 8
2292: PPUSH
2293: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2297: LD_VAR 0 6
2301: PUSH
2302: LD_INT 0
2304: GREATER
2305: PUSH
2306: LD_VAR 0 9
2310: PUSH
2311: LD_INT 0
2313: GREATER
2314: AND
2315: IFFALSE 2335
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2317: LD_VAR 0 9
2321: PPUSH
2322: LD_VAR 0 6
2326: PUSH
2327: LD_INT 1
2329: ARRAY
2330: PPUSH
2331: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2335: LD_VAR 0 6
2339: PUSH
2340: LD_INT 0
2342: EQUAL
2343: PUSH
2344: LD_VAR 0 4
2348: PUSH
2349: LD_INT 0
2351: EQUAL
2352: AND
2353: PUSH
2354: LD_VAR 0 9
2358: PUSH
2359: LD_INT 0
2361: GREATER
2362: AND
2363: IFFALSE 2379
// ComEnterUnit ( engineerOkOutside , building ) ;
2365: LD_VAR 0 9
2369: PPUSH
2370: LD_VAR 0 2
2374: PPUSH
2375: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2379: LD_VAR 0 9
2383: PUSH
2384: LD_INT 0
2386: GREATER
2387: PUSH
2388: LD_VAR 0 6
2392: PUSH
2393: LD_INT 0
2395: EQUAL
2396: AND
2397: PUSH
2398: LD_VAR 0 4
2402: PUSH
2403: LD_INT 0
2405: GREATER
2406: AND
2407: IFFALSE 2454
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2409: LD_VAR 0 9
2413: PPUSH
2414: LD_VAR 0 4
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 4
2427: PUSH
2428: LD_INT 2
2430: ARRAY
2431: PPUSH
2432: LD_VAR 0 4
2436: PUSH
2437: LD_INT 3
2439: ARRAY
2440: PPUSH
2441: LD_VAR 0 4
2445: PUSH
2446: LD_INT 4
2448: ARRAY
2449: PPUSH
2450: CALL_OW 145
// end ;
2454: LD_VAR 0 5
2458: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2459: LD_INT 0
2461: PPUSH
2462: PPUSH
2463: PPUSH
2464: PPUSH
2465: PPUSH
2466: PPUSH
2467: PPUSH
2468: PPUSH
2469: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2470: LD_ADDR_VAR 0 6
2474: PUSH
2475: LD_INT 22
2477: PUSH
2478: LD_VAR 0 1
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: LD_INT 25
2489: PUSH
2490: LD_INT 4
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 23
2499: PUSH
2500: LD_INT 2
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 24
2509: PUSH
2510: LD_INT 251
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: PPUSH
2523: CALL_OW 69
2527: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2528: LD_ADDR_VAR 0 7
2532: PUSH
2533: LD_VAR 0 3
2537: PPUSH
2538: LD_INT 22
2540: PUSH
2541: LD_VAR 0 1
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 23
2552: PUSH
2553: LD_INT 2
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 25
2562: PUSH
2563: LD_INT 4
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: LD_INT 50
2572: PUSH
2573: EMPTY
2574: LIST
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: PPUSH
2582: CALL_OW 70
2586: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2587: LD_ADDR_VAR 0 10
2591: PUSH
2592: LD_VAR 0 3
2596: PPUSH
2597: LD_INT 22
2599: PUSH
2600: LD_VAR 0 1
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: PUSH
2609: LD_INT 21
2611: PUSH
2612: LD_INT 1
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PUSH
2619: LD_INT 3
2621: PUSH
2622: LD_INT 25
2624: PUSH
2625: LD_INT 3
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PUSH
2636: LD_INT 3
2638: PUSH
2639: LD_INT 24
2641: PUSH
2642: LD_INT 750
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: LIST
2657: LIST
2658: PPUSH
2659: CALL_OW 70
2663: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2664: LD_ADDR_VAR 0 11
2668: PUSH
2669: LD_VAR 0 2
2673: PPUSH
2674: LD_INT 22
2676: PUSH
2677: LD_VAR 0 1
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PUSH
2686: LD_INT 21
2688: PUSH
2689: LD_INT 1
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 3
2698: PUSH
2699: LD_INT 25
2701: PUSH
2702: LD_INT 3
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 3
2715: PUSH
2716: LD_INT 24
2718: PUSH
2719: LD_INT 1000
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: PPUSH
2736: CALL_OW 70
2740: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2741: LD_VAR 0 10
2745: NOT
2746: PUSH
2747: LD_VAR 0 11
2751: NOT
2752: AND
2753: PUSH
2754: LD_VAR 0 6
2758: NOT
2759: AND
2760: IFFALSE 2764
// exit ;
2762: GO 2998
// if damageUnits > 0 and sci_list > 0 then
2764: LD_VAR 0 10
2768: PUSH
2769: LD_INT 0
2771: GREATER
2772: PUSH
2773: LD_VAR 0 6
2777: PUSH
2778: LD_INT 0
2780: GREATER
2781: AND
2782: IFFALSE 2798
// ComMoveToArea ( damageUnits , healArea ) ;
2784: LD_VAR 0 10
2788: PPUSH
2789: LD_VAR 0 2
2793: PPUSH
2794: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2798: LD_VAR 0 11
2802: PUSH
2803: LD_INT 0
2805: GREATER
2806: PUSH
2807: LD_VAR 0 6
2811: PUSH
2812: LD_INT 0
2814: GREATER
2815: AND
2816: IFFALSE 2827
// ComExitBuilding ( sci_list ) ;
2818: LD_VAR 0 6
2822: PPUSH
2823: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2827: LD_VAR 0 11
2831: PUSH
2832: LD_INT 0
2834: GREATER
2835: PUSH
2836: LD_VAR 0 7
2840: PUSH
2841: LD_INT 0
2843: GREATER
2844: AND
2845: IFFALSE 2865
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2847: LD_VAR 0 7
2851: PPUSH
2852: LD_VAR 0 11
2856: PUSH
2857: LD_INT 1
2859: ARRAY
2860: PPUSH
2861: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2865: LD_VAR 0 10
2869: PUSH
2870: LD_INT 0
2872: EQUAL
2873: PUSH
2874: LD_VAR 0 11
2878: PUSH
2879: LD_INT 0
2881: EQUAL
2882: AND
2883: PUSH
2884: LD_VAR 0 7
2888: PUSH
2889: LD_INT 0
2891: GREATER
2892: AND
2893: IFFALSE 2998
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2895: LD_ADDR_VAR 0 12
2899: PUSH
2900: LD_INT 22
2902: PUSH
2903: LD_VAR 0 1
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 21
2914: PUSH
2915: LD_INT 3
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: LD_INT 30
2924: PUSH
2925: LD_INT 8
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: LIST
2936: PPUSH
2937: CALL_OW 69
2941: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2942: LD_ADDR_VAR 0 13
2946: PUSH
2947: LD_INT 1
2949: PPUSH
2950: LD_VAR 0 12
2954: PPUSH
2955: CALL_OW 12
2959: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2960: LD_VAR 0 7
2964: PPUSH
2965: LD_INT 3
2967: PUSH
2968: LD_INT 60
2970: PUSH
2971: EMPTY
2972: LIST
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PPUSH
2978: CALL_OW 72
2982: PPUSH
2983: LD_VAR 0 12
2987: PUSH
2988: LD_VAR 0 13
2992: ARRAY
2993: PPUSH
2994: CALL_OW 120
// end ; end ;
2998: LD_VAR 0 5
3002: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3003: LD_INT 0
3005: PPUSH
3006: PPUSH
3007: PPUSH
3008: PPUSH
// tmpTab = [ ] ;
3009: LD_ADDR_VAR 0 6
3013: PUSH
3014: EMPTY
3015: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3016: LD_INT 22
3018: PUSH
3019: LD_VAR 0 1
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 30
3030: PUSH
3031: LD_INT 32
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 69
3046: PUSH
3047: LD_INT 0
3049: GREATER
3050: IFFALSE 3133
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3052: LD_ADDR_VAR 0 4
3056: PUSH
3057: LD_INT 22
3059: PUSH
3060: LD_VAR 0 1
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: PUSH
3069: LD_INT 30
3071: PUSH
3072: LD_INT 32
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: PPUSH
3083: CALL_OW 69
3087: PUSH
3088: FOR_IN
3089: IFFALSE 3131
// begin for j in UnitsInside ( i ) do
3091: LD_ADDR_VAR 0 5
3095: PUSH
3096: LD_VAR 0 4
3100: PPUSH
3101: CALL_OW 313
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3127
// tmpTab = tmpTab ^ j ;
3109: LD_ADDR_VAR 0 6
3113: PUSH
3114: LD_VAR 0 6
3118: PUSH
3119: LD_VAR 0 5
3123: ADD
3124: ST_TO_ADDR
3125: GO 3106
3127: POP
3128: POP
// end ;
3129: GO 3088
3131: POP
3132: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3133: LD_VAR 0 6
3137: PPUSH
3138: LD_VAR 0 2
3142: PPUSH
3143: CALL_OW 250
3147: PPUSH
3148: LD_VAR 0 2
3152: PPUSH
3153: CALL_OW 251
3157: PPUSH
3158: CALL_OW 114
// end ;
3162: LD_VAR 0 3
3166: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3167: LD_INT 0
3169: PPUSH
3170: PPUSH
3171: PPUSH
3172: PPUSH
// enable ;
3173: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3174: LD_ADDR_VAR 0 7
3178: PUSH
3179: LD_VAR 0 3
3183: PPUSH
3184: CALL_OW 435
3188: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3189: LD_ADDR_VAR 0 6
3193: PUSH
3194: LD_INT 22
3196: PUSH
3197: LD_VAR 0 1
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: LD_INT 34
3208: PUSH
3209: LD_VAR 0 2
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PPUSH
3222: CALL_OW 69
3226: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3227: LD_VAR 0 6
3231: PUSH
3232: LD_INT 0
3234: GREATER
3235: PUSH
3236: LD_VAR 0 3
3240: PPUSH
3241: CALL_OW 435
3245: AND
3246: PUSH
3247: LD_VAR 0 7
3251: PUSH
3252: LD_INT 0
3254: GREATER
3255: AND
3256: IFFALSE 3305
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3258: LD_VAR 0 6
3262: PUSH
3263: LD_INT 1
3265: ARRAY
3266: PPUSH
3267: LD_VAR 0 7
3271: PUSH
3272: LD_INT 1
3274: ARRAY
3275: PPUSH
3276: LD_VAR 0 7
3280: PUSH
3281: LD_INT 2
3283: ARRAY
3284: PPUSH
3285: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3289: LD_VAR 0 6
3293: PUSH
3294: LD_INT 1
3296: ARRAY
3297: PPUSH
3298: LD_INT 100
3300: PPUSH
3301: CALL_OW 240
// end ; end ;
3305: LD_VAR 0 4
3309: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3310: LD_INT 0
3312: PPUSH
3313: PPUSH
3314: PPUSH
3315: PPUSH
3316: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3317: LD_ADDR_VAR 0 6
3321: PUSH
3322: LD_INT 22
3324: PUSH
3325: LD_VAR 0 1
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 2
3336: PUSH
3337: LD_INT 30
3339: PUSH
3340: LD_INT 31
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: PUSH
3347: LD_INT 30
3349: PUSH
3350: LD_INT 32
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: LD_INT 30
3359: PUSH
3360: LD_INT 33
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 30
3369: PUSH
3370: LD_INT 4
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 30
3379: PUSH
3380: LD_INT 5
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: PPUSH
3399: CALL_OW 69
3403: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3404: LD_ADDR_VAR 0 7
3408: PUSH
3409: LD_INT 22
3411: PUSH
3412: LD_VAR 0 2
3416: PUSH
3417: EMPTY
3418: LIST
3419: LIST
3420: PUSH
3421: LD_INT 21
3423: PUSH
3424: LD_INT 3
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: PUSH
3431: LD_INT 58
3433: PUSH
3434: EMPTY
3435: LIST
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: LIST
3441: PPUSH
3442: CALL_OW 69
3446: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3447: LD_VAR 0 6
3451: PUSH
3452: LD_INT 0
3454: GREATER
3455: PUSH
3456: LD_VAR 0 7
3460: PUSH
3461: LD_INT 0
3463: GREATER
3464: AND
3465: IFFALSE 3535
// begin for i in turretsList do
3467: LD_ADDR_VAR 0 4
3471: PUSH
3472: LD_VAR 0 6
3476: PUSH
3477: FOR_IN
3478: IFFALSE 3533
// begin for j in enemyBuildings do
3480: LD_ADDR_VAR 0 5
3484: PUSH
3485: LD_VAR 0 7
3489: PUSH
3490: FOR_IN
3491: IFFALSE 3529
// begin if GetDistUnits ( i , j ) < 20 then
3493: LD_VAR 0 4
3497: PPUSH
3498: LD_VAR 0 5
3502: PPUSH
3503: CALL_OW 296
3507: PUSH
3508: LD_INT 20
3510: LESS
3511: IFFALSE 3527
// begin ComAttackUnit ( i , j ) ;
3513: LD_VAR 0 4
3517: PPUSH
3518: LD_VAR 0 5
3522: PPUSH
3523: CALL_OW 115
// end ; end ;
3527: GO 3490
3529: POP
3530: POP
// end ;
3531: GO 3477
3533: POP
3534: POP
// end ; end ;
3535: LD_VAR 0 3
3539: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3540: LD_INT 0
3542: PPUSH
3543: PPUSH
// for i = 1 to vehCount do
3544: LD_ADDR_VAR 0 9
3548: PUSH
3549: DOUBLE
3550: LD_INT 1
3552: DEC
3553: ST_TO_ADDR
3554: LD_VAR 0 3
3558: PUSH
3559: FOR_TO
3560: IFFALSE 3607
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3562: LD_VAR 0 2
3566: PPUSH
3567: LD_VAR 0 7
3571: PPUSH
3572: LD_VAR 0 5
3576: PPUSH
3577: LD_VAR 0 6
3581: PPUSH
3582: LD_VAR 0 4
3586: PUSH
3587: LD_INT 1
3589: PPUSH
3590: LD_VAR 0 4
3594: PPUSH
3595: CALL_OW 12
3599: ARRAY
3600: PPUSH
3601: CALL_OW 185
3605: GO 3559
3607: POP
3608: POP
// end ;
3609: LD_VAR 0 8
3613: RET
// export function AttackVehicles ( side ) ; var i , j , tmp , vehiclesOK , target1 , target2 ; begin
3614: LD_INT 0
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
3620: PPUSH
3621: PPUSH
3622: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3623: LD_EXP 11
3627: PUSH
3628: LD_INT 2
3630: PUSH
3631: LD_INT 3
3633: PUSH
3634: LD_INT 4
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: PUSH
3642: LD_OWVAR 67
3646: ARRAY
3647: GREATEREQUAL
3648: PUSH
3649: LD_EXP 12
3653: PUSH
3654: LD_INT 1
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: LD_INT 2
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: LIST
3667: PUSH
3668: LD_OWVAR 67
3672: ARRAY
3673: GREATEREQUAL
3674: AND
3675: IFFALSE 3984
// begin repeat wait ( 0 0$1 ) ;
3677: LD_INT 35
3679: PPUSH
3680: CALL_OW 67
// for j in russianTanks do
3684: LD_ADDR_VAR 0 4
3688: PUSH
3689: LD_EXP 11
3693: PUSH
3694: FOR_IN
3695: IFFALSE 3972
// begin tmp := UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) ;
3697: LD_ADDR_VAR 0 5
3701: PUSH
3702: LD_EXP 12
3706: PPUSH
3707: LD_INT 3
3709: PUSH
3710: LD_INT 60
3712: PUSH
3713: EMPTY
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 72
3724: ST_TO_ADDR
// if tmp then
3725: LD_VAR 0 5
3729: IFFALSE 3745
// ComMoveUnit ( tmp , j ) ;
3731: LD_VAR 0 5
3735: PPUSH
3736: LD_VAR 0 4
3740: PPUSH
3741: CALL_OW 112
// if GetSide ( j ) <> side then
3745: LD_VAR 0 4
3749: PPUSH
3750: CALL_OW 255
3754: PUSH
3755: LD_VAR 0 1
3759: NONEQUAL
3760: IFFALSE 3773
// begin ComStop ( j ) ;
3762: LD_VAR 0 4
3766: PPUSH
3767: CALL_OW 141
// continue ;
3771: GO 3694
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3773: LD_ADDR_VAR 0 7
3777: PUSH
3778: LD_INT 81
3780: PUSH
3781: LD_VAR 0 1
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 101
3792: PUSH
3793: LD_INT 1
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PPUSH
3804: CALL_OW 69
3808: PPUSH
3809: LD_VAR 0 4
3813: PPUSH
3814: CALL_OW 74
3818: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3819: LD_ADDR_VAR 0 8
3823: PUSH
3824: LD_INT 81
3826: PUSH
3827: LD_VAR 0 1
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 101
3838: PUSH
3839: LD_INT 1
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: LD_INT 2
3848: PUSH
3849: LD_INT 59
3851: PUSH
3852: EMPTY
3853: LIST
3854: PUSH
3855: LD_INT 21
3857: PUSH
3858: LD_INT 1
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: PUSH
3865: LD_INT 21
3867: PUSH
3868: LD_INT 2
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: EMPTY
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: LIST
3885: PUSH
3886: EMPTY
3887: LIST
3888: PPUSH
3889: CALL_OW 69
3893: PPUSH
3894: LD_VAR 0 4
3898: PPUSH
3899: CALL_OW 74
3903: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3904: LD_VAR 0 4
3908: PPUSH
3909: LD_VAR 0 7
3913: PPUSH
3914: CALL_OW 296
3918: PUSH
3919: LD_INT 8
3921: PLUS
3922: PUSH
3923: LD_VAR 0 4
3927: PPUSH
3928: LD_VAR 0 8
3932: PPUSH
3933: CALL_OW 296
3937: LESS
3938: IFFALSE 3956
// ComAttackUnit ( j , target1 ) else
3940: LD_VAR 0 4
3944: PPUSH
3945: LD_VAR 0 7
3949: PPUSH
3950: CALL_OW 115
3954: GO 3970
// ComAttackUnit ( j , target2 ) ;
3956: LD_VAR 0 4
3960: PPUSH
3961: LD_VAR 0 8
3965: PPUSH
3966: CALL_OW 115
// end ;
3970: GO 3694
3972: POP
3973: POP
// until russianTanks = 0 ;
3974: LD_EXP 11
3978: PUSH
3979: LD_INT 0
3981: EQUAL
3982: IFFALSE 3677
// end ; end ;
3984: LD_VAR 0 2
3988: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3989: LD_INT 0
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
3995: PPUSH
3996: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3997: LD_ADDR_VAR 0 6
4001: PUSH
4002: LD_INT 22
4004: PUSH
4005: LD_VAR 0 1
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 25
4016: PUSH
4017: LD_INT 9
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: PPUSH
4028: CALL_OW 69
4032: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4033: LD_ADDR_VAR 0 7
4037: PUSH
4038: LD_INT 81
4040: PUSH
4041: LD_VAR 0 1
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PUSH
4050: LD_INT 3
4052: PUSH
4053: LD_INT 21
4055: PUSH
4056: LD_INT 3
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: PPUSH
4071: CALL_OW 69
4075: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
4076: LD_ADDR_VAR 0 4
4080: PUSH
4081: LD_INT 1
4083: PPUSH
4084: LD_INT 3
4086: PPUSH
4087: CALL_OW 12
4091: ST_TO_ADDR
// for i = 1 to list do
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: DOUBLE
4098: LD_INT 1
4100: DEC
4101: ST_TO_ADDR
4102: LD_VAR 0 6
4106: PUSH
4107: FOR_TO
4108: IFFALSE 4310
// for ta in filter do
4110: LD_ADDR_VAR 0 3
4114: PUSH
4115: LD_VAR 0 7
4119: PUSH
4120: FOR_IN
4121: IFFALSE 4306
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
4123: LD_VAR 0 6
4127: PUSH
4128: LD_VAR 0 5
4132: ARRAY
4133: PPUSH
4134: LD_VAR 0 3
4138: PPUSH
4139: CALL_OW 296
4143: PUSH
4144: LD_INT 15
4146: LESSEQUAL
4147: IFFALSE 4304
// begin case c of 1 :
4149: LD_VAR 0 4
4153: PUSH
4154: LD_INT 1
4156: DOUBLE
4157: EQUAL
4158: IFTRUE 4162
4160: GO 4200
4162: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
4163: LD_VAR 0 6
4167: PUSH
4168: LD_VAR 0 5
4172: ARRAY
4173: PPUSH
4174: LD_VAR 0 3
4178: PPUSH
4179: CALL_OW 250
4183: PPUSH
4184: LD_VAR 0 3
4188: PPUSH
4189: CALL_OW 251
4193: PPUSH
4194: CALL_OW 154
4198: GO 4304
4200: LD_INT 2
4202: DOUBLE
4203: EQUAL
4204: IFTRUE 4208
4206: GO 4272
4208: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
4209: LD_VAR 0 6
4213: PUSH
4214: LD_VAR 0 5
4218: ARRAY
4219: PPUSH
4220: LD_VAR 0 3
4224: PPUSH
4225: CALL_OW 250
4229: PUSH
4230: LD_INT 1
4232: NEG
4233: PPUSH
4234: LD_INT 1
4236: PPUSH
4237: CALL_OW 12
4241: PLUS
4242: PPUSH
4243: LD_VAR 0 3
4247: PPUSH
4248: CALL_OW 251
4252: PUSH
4253: LD_INT 1
4255: NEG
4256: PPUSH
4257: LD_INT 1
4259: PPUSH
4260: CALL_OW 12
4264: PLUS
4265: PPUSH
4266: CALL_OW 153
4270: GO 4304
4272: LD_INT 3
4274: DOUBLE
4275: EQUAL
4276: IFTRUE 4280
4278: GO 4303
4280: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
4281: LD_VAR 0 6
4285: PUSH
4286: LD_VAR 0 5
4290: ARRAY
4291: PPUSH
4292: LD_VAR 0 3
4296: PPUSH
4297: CALL_OW 115
4301: GO 4304
4303: POP
// end ; end ;
4304: GO 4120
4306: POP
4307: POP
4308: GO 4107
4310: POP
4311: POP
// end ;
4312: LD_VAR 0 2
4316: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4317: LD_INT 0
4319: PPUSH
4320: PPUSH
4321: PPUSH
4322: PPUSH
4323: PPUSH
4324: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4325: LD_ADDR_VAR 0 7
4329: PUSH
4330: LD_VAR 0 2
4334: PPUSH
4335: LD_INT 22
4337: PUSH
4338: LD_VAR 0 1
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 21
4349: PUSH
4350: LD_INT 2
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 34
4359: PUSH
4360: LD_INT 52
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: LIST
4371: PPUSH
4372: CALL_OW 70
4376: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4377: LD_ADDR_VAR 0 8
4381: PUSH
4382: LD_VAR 0 2
4386: PPUSH
4387: LD_INT 22
4389: PUSH
4390: LD_VAR 0 1
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 21
4401: PUSH
4402: LD_INT 3
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 3
4411: PUSH
4412: LD_INT 24
4414: PUSH
4415: LD_INT 1000
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: PUSH
4431: EMPTY
4432: LIST
4433: PPUSH
4434: CALL_OW 70
4438: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4439: LD_VAR 0 8
4443: PUSH
4444: LD_INT 0
4446: GREATER
4447: PUSH
4448: LD_VAR 0 7
4452: PPUSH
4453: LD_INT 24
4455: PUSH
4456: LD_INT 750
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PPUSH
4463: CALL_OW 72
4467: PUSH
4468: LD_INT 0
4470: GREATER
4471: AND
4472: IFFALSE 4492
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4474: LD_VAR 0 7
4478: PPUSH
4479: LD_VAR 0 8
4483: PUSH
4484: LD_INT 1
4486: ARRAY
4487: PPUSH
4488: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4492: LD_VAR 0 7
4496: PUSH
4497: LD_INT 0
4499: GREATER
4500: PUSH
4501: LD_VAR 0 8
4505: PUSH
4506: LD_INT 0
4508: EQUAL
4509: AND
4510: PUSH
4511: LD_EXP 10
4515: PUSH
4516: LD_INT 0
4518: GREATER
4519: AND
4520: IFFALSE 4567
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4522: LD_VAR 0 7
4526: PPUSH
4527: LD_EXP 10
4531: PUSH
4532: LD_INT 1
4534: ARRAY
4535: PPUSH
4536: LD_EXP 10
4540: PUSH
4541: LD_INT 2
4543: ARRAY
4544: PPUSH
4545: LD_EXP 10
4549: PUSH
4550: LD_INT 3
4552: ARRAY
4553: PPUSH
4554: LD_EXP 10
4558: PUSH
4559: LD_INT 4
4561: ARRAY
4562: PPUSH
4563: CALL_OW 567
// end ; end_of_file
4567: LD_VAR 0 3
4571: RET
// every 0 0$1 do
4572: GO 4574
4574: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4575: LD_INT 3
4577: PPUSH
4578: LD_INT 14
4580: PPUSH
4581: LD_INT 3
4583: PPUSH
4584: CALL 1827 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4588: LD_INT 3
4590: PPUSH
4591: LD_INT 15
4593: PPUSH
4594: LD_INT 3
4596: PPUSH
4597: CALL 1827 0 3
// end ;
4601: END
// every 0 0$1 trigger russianAI = 1 do
4602: LD_EXP 13
4606: PUSH
4607: LD_INT 1
4609: EQUAL
4610: IFFALSE 4716
4612: GO 4614
4614: DISABLE
// begin enable ;
4615: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4616: LD_INT 3
4618: PPUSH
4619: LD_INT 22
4621: PPUSH
4622: LD_INT 7
4624: PPUSH
4625: LD_EXP 10
4629: PPUSH
4630: CALL 2068 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4634: LD_INT 3
4636: PPUSH
4637: LD_INT 8
4639: PPUSH
4640: LD_INT 7
4642: PPUSH
4643: LD_INT 14
4645: PUSH
4646: LD_INT 15
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: PUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_INT 2
4658: PPUSH
4659: CALL_OW 12
4663: ARRAY
4664: PPUSH
4665: CALL 2459 0 4
// AttackVehicles ( 3 ) ;
4669: LD_INT 3
4671: PPUSH
4672: CALL 3614 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4676: LD_INT 3
4678: PPUSH
4679: LD_INT 1
4681: PPUSH
4682: CALL 3310 0 2
// IntBazooka ( 3 ) ;
4686: LD_INT 3
4688: PPUSH
4689: CALL 3989 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4693: LD_INT 3
4695: PPUSH
4696: LD_INT 51
4698: PPUSH
4699: LD_INT 14
4701: PPUSH
4702: CALL 3167 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4706: LD_INT 3
4708: PPUSH
4709: LD_INT 7
4711: PPUSH
4712: CALL 4317 0 2
// end ;
4716: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4717: LD_INT 22
4719: PPUSH
4720: CALL_OW 303
4724: PUSH
4725: LD_INT 22
4727: PPUSH
4728: CALL_OW 255
4732: PUSH
4733: LD_INT 1
4735: EQUAL
4736: OR
4737: IFFALSE 4752
4739: GO 4741
4741: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4742: LD_INT 3
4744: PPUSH
4745: LD_INT 22
4747: PPUSH
4748: CALL 3003 0 2
4752: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) = 0 do
4753: LD_EXP 13
4757: PUSH
4758: LD_INT 1
4760: EQUAL
4761: PUSH
4762: LD_INT 22
4764: PUSH
4765: LD_INT 3
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: LD_INT 21
4774: PUSH
4775: LD_INT 2
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PUSH
4782: LD_INT 50
4784: PUSH
4785: EMPTY
4786: LIST
4787: PUSH
4788: LD_INT 33
4790: PUSH
4791: LD_INT 3
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PUSH
4798: LD_INT 2
4800: PUSH
4801: LD_INT 34
4803: PUSH
4804: LD_INT 46
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PUSH
4811: LD_INT 34
4813: PUSH
4814: LD_INT 45
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: LD_INT 34
4823: PUSH
4824: LD_INT 44
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: LD_INT 34
4833: PUSH
4834: LD_INT 49
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: LD_INT 34
4843: PUSH
4844: LD_INT 47
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: PPUSH
4866: CALL_OW 69
4870: PUSH
4871: LD_INT 0
4873: EQUAL
4874: AND
4875: IFFALSE 5062
4877: GO 4879
4879: DISABLE
// begin enable ;
4880: ENABLE
// if russianRocketsAvalaible = 1 then
4881: LD_EXP 14
4885: PUSH
4886: LD_INT 1
4888: EQUAL
4889: IFFALSE 4946
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4891: LD_INT 3
4893: PPUSH
4894: LD_INT 1
4896: PPUSH
4897: LD_INT 3
4899: PUSH
4900: LD_INT 4
4902: PUSH
4903: LD_INT 4
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: LIST
4910: PUSH
4911: LD_OWVAR 67
4915: ARRAY
4916: PPUSH
4917: LD_INT 46
4919: PUSH
4920: LD_INT 45
4922: PUSH
4923: LD_INT 44
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: PPUSH
4931: LD_INT 3
4933: PPUSH
4934: LD_INT 3
4936: PPUSH
4937: LD_INT 24
4939: PPUSH
4940: CALL 3540 0 7
4944: GO 5003
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4946: LD_INT 3
4948: PPUSH
4949: LD_INT 1
4951: PPUSH
4952: LD_INT 3
4954: PUSH
4955: LD_INT 4
4957: PUSH
4958: LD_INT 4
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: PUSH
4966: LD_OWVAR 67
4970: ARRAY
4971: PPUSH
4972: LD_INT 46
4974: PUSH
4975: LD_INT 45
4977: PUSH
4978: LD_INT 44
4980: PUSH
4981: LD_INT 47
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: PPUSH
4990: LD_INT 3
4992: PPUSH
4993: LD_INT 3
4995: PPUSH
4996: LD_INT 24
4998: PPUSH
4999: CALL 3540 0 7
// if russianTimeLapsers = 0 then
5003: LD_EXP 12
5007: PUSH
5008: LD_INT 0
5010: EQUAL
5011: IFFALSE 5062
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5013: LD_INT 3
5015: PPUSH
5016: LD_INT 40
5018: PPUSH
5019: LD_INT 1
5021: PUSH
5022: LD_INT 2
5024: PUSH
5025: LD_INT 2
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: LIST
5032: PUSH
5033: LD_OWVAR 67
5037: ARRAY
5038: PPUSH
5039: LD_INT 49
5041: PUSH
5042: LD_INT 49
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PPUSH
5049: LD_INT 3
5051: PPUSH
5052: LD_INT 3
5054: PPUSH
5055: LD_INT 24
5057: PPUSH
5058: CALL 3540 0 7
// end ; end_of_file
5062: END
// every 1 do var dec1 , dec2 ;
5063: GO 5065
5065: DISABLE
5066: LD_INT 0
5068: PPUSH
5069: PPUSH
// begin InGameOn ;
5070: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5074: LD_INT 48
5076: PPUSH
5077: LD_STRING deltakappa
5079: PPUSH
5080: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5084: LD_INT 95
5086: PPUSH
5087: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5091: LD_INT 95
5093: PPUSH
5094: LD_INT 30
5096: PPUSH
5097: LD_INT 11
5099: PPUSH
5100: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5104: LD_INT 30
5106: PPUSH
5107: LD_INT 11
5109: PPUSH
5110: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5114: LD_EXP 5
5118: PPUSH
5119: LD_STRING D1-Pow-1
5121: PPUSH
5122: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5126: LD_EXP 1
5130: PPUSH
5131: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5135: LD_EXP 1
5139: PPUSH
5140: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5144: LD_EXP 1
5148: PPUSH
5149: LD_STRING D1-JMM-1
5151: PPUSH
5152: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5156: LD_EXP 5
5160: PPUSH
5161: LD_STRING D1-Pow-2
5163: PPUSH
5164: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5168: LD_EXP 1
5172: PPUSH
5173: LD_STRING D1-JMM-2
5175: PPUSH
5176: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5180: LD_EXP 1
5184: PPUSH
5185: LD_INT 95
5187: PPUSH
5188: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5192: LD_STRING M1
5194: PPUSH
5195: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5199: LD_INT 35
5201: PPUSH
5202: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5206: LD_EXP 1
5210: PPUSH
5211: LD_INT 95
5213: PPUSH
5214: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5218: LD_INT 95
5220: PPUSH
5221: LD_INT 51
5223: PPUSH
5224: LD_INT 21
5226: PPUSH
5227: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5231: LD_INT 95
5233: PPUSH
5234: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5238: LD_INT 95
5240: PPUSH
5241: LD_INT 5
5243: PPUSH
5244: CALL_OW 308
5248: IFFALSE 5199
// if JMMGirl = 1 then
5250: LD_EXP 7
5254: PUSH
5255: LD_INT 1
5257: EQUAL
5258: IFFALSE 5571
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5260: LD_EXP 2
5264: PPUSH
5265: LD_STRING D2J-Joan-1
5267: PPUSH
5268: CALL_OW 94
// dec1 = query ( Q1 ) ;
5272: LD_ADDR_VAR 0 1
5276: PUSH
5277: LD_STRING Q1
5279: PPUSH
5280: CALL_OW 97
5284: ST_TO_ADDR
// if dec1 = 1 then
5285: LD_VAR 0 1
5289: PUSH
5290: LD_INT 1
5292: EQUAL
5293: IFFALSE 5547
// begin ComExitVehicle ( JMM ) ;
5295: LD_EXP 1
5299: PPUSH
5300: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5304: LD_EXP 1
5308: PPUSH
5309: LD_STRING D2J-JMM-1
5311: PPUSH
5312: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5316: LD_EXP 2
5320: PPUSH
5321: LD_STRING D2J-Joan-2
5323: PPUSH
5324: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5328: LD_EXP 1
5332: PPUSH
5333: LD_STRING D2J-JMM-2
5335: PPUSH
5336: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5340: LD_EXP 2
5344: PPUSH
5345: LD_STRING D2J-Joan-3
5347: PPUSH
5348: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5352: LD_EXP 5
5356: PPUSH
5357: LD_STRING DPowell-Pow-1
5359: PPUSH
5360: CALL_OW 94
// dec2 = query ( Q2J ) ;
5364: LD_ADDR_VAR 0 2
5368: PUSH
5369: LD_STRING Q2J
5371: PPUSH
5372: CALL_OW 97
5376: ST_TO_ADDR
// if dec2 = 1 then
5377: LD_VAR 0 2
5381: PUSH
5382: LD_INT 1
5384: EQUAL
5385: IFFALSE 5427
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5387: LD_EXP 1
5391: PPUSH
5392: LD_STRING D2Ja-JMM-1
5394: PPUSH
5395: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5399: LD_EXP 2
5403: PPUSH
5404: LD_STRING D2Ja-Joan-1
5406: PPUSH
5407: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5411: LD_EXP 1
5415: PPUSH
5416: LD_STRING D2Ja-JMM-2
5418: PPUSH
5419: CALL_OW 88
// InGameOff ;
5423: CALL_OW 9
// end ; if dec2 = 2 then
5427: LD_VAR 0 2
5431: PUSH
5432: LD_INT 2
5434: EQUAL
5435: IFFALSE 5511
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5437: LD_EXP 1
5441: PPUSH
5442: LD_STRING D2Jb-JMM-1
5444: PPUSH
5445: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5449: LD_EXP 2
5453: PPUSH
5454: LD_STRING D2Jb-Joan-1
5456: PPUSH
5457: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5461: LD_EXP 1
5465: PPUSH
5466: LD_STRING D2Jb-JMM-2
5468: PPUSH
5469: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5473: LD_EXP 2
5477: PPUSH
5478: LD_STRING D2Jb-Joan-2
5480: PPUSH
5481: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5485: LD_EXP 1
5489: PPUSH
5490: LD_STRING D2Jb-JMM-3
5492: PPUSH
5493: CALL_OW 88
// fastEnd = 1 ;
5497: LD_ADDR_EXP 15
5501: PUSH
5502: LD_INT 1
5504: ST_TO_ADDR
// FinishMission ;
5505: CALL 9445 0 0
// exit ;
5509: GO 6141
// end ; if dec2 = 3 then
5511: LD_VAR 0 2
5515: PUSH
5516: LD_INT 3
5518: EQUAL
5519: IFFALSE 5547
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5521: LD_EXP 2
5525: PPUSH
5526: LD_STRING D2Jc-Joan-1
5528: PPUSH
5529: CALL_OW 94
// fastEnd = 1 ;
5533: LD_ADDR_EXP 15
5537: PUSH
5538: LD_INT 1
5540: ST_TO_ADDR
// FinishMission ;
5541: CALL 9445 0 0
// exit ;
5545: GO 6141
// end ; end ; if dec1 = 2 then
5547: LD_VAR 0 1
5551: PUSH
5552: LD_INT 2
5554: EQUAL
5555: IFFALSE 5571
// begin fastEnd = 1 ;
5557: LD_ADDR_EXP 15
5561: PUSH
5562: LD_INT 1
5564: ST_TO_ADDR
// FinishMission ;
5565: CALL 9445 0 0
// exit ;
5569: GO 6141
// end ; end ; if JMMGirl = 2 then
5571: LD_EXP 7
5575: PUSH
5576: LD_INT 2
5578: EQUAL
5579: IFFALSE 5904
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5581: LD_EXP 3
5585: PPUSH
5586: LD_STRING D2L-Lisa-1
5588: PPUSH
5589: CALL_OW 94
// dec1 = query ( Q1 ) ;
5593: LD_ADDR_VAR 0 1
5597: PUSH
5598: LD_STRING Q1
5600: PPUSH
5601: CALL_OW 97
5605: ST_TO_ADDR
// if dec1 = 1 then
5606: LD_VAR 0 1
5610: PUSH
5611: LD_INT 1
5613: EQUAL
5614: IFFALSE 5880
// begin ComExitVehicle ( JMM ) ;
5616: LD_EXP 1
5620: PPUSH
5621: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5625: LD_EXP 1
5629: PPUSH
5630: LD_STRING D2L-JMM-1
5632: PPUSH
5633: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5637: LD_EXP 3
5641: PPUSH
5642: LD_STRING D2L-Lisa-2
5644: PPUSH
5645: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5649: LD_EXP 1
5653: PPUSH
5654: LD_STRING D2L-JMM-2
5656: PPUSH
5657: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5661: LD_EXP 3
5665: PPUSH
5666: LD_STRING D2L-Lisa-3
5668: PPUSH
5669: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5673: LD_EXP 5
5677: PPUSH
5678: LD_STRING DPowell-Pow-1
5680: PPUSH
5681: CALL_OW 94
// dec2 = query ( Q2L ) ;
5685: LD_ADDR_VAR 0 2
5689: PUSH
5690: LD_STRING Q2L
5692: PPUSH
5693: CALL_OW 97
5697: ST_TO_ADDR
// if dec2 = 1 then
5698: LD_VAR 0 2
5702: PUSH
5703: LD_INT 1
5705: EQUAL
5706: IFFALSE 5772
// begin Say ( JMM , D2La-JMM-1 ) ;
5708: LD_EXP 1
5712: PPUSH
5713: LD_STRING D2La-JMM-1
5715: PPUSH
5716: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5720: LD_EXP 3
5724: PPUSH
5725: LD_STRING D2La-Lisa-1
5727: PPUSH
5728: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5732: LD_EXP 1
5736: PPUSH
5737: LD_STRING D2La-JMM-2
5739: PPUSH
5740: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5744: LD_EXP 3
5748: PPUSH
5749: LD_STRING D2La-Lisa-2
5751: PPUSH
5752: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5756: LD_EXP 1
5760: PPUSH
5761: LD_STRING D2La-JMM-3
5763: PPUSH
5764: CALL_OW 88
// InGameOff ;
5768: CALL_OW 9
// end ; if dec2 = 2 then
5772: LD_VAR 0 2
5776: PUSH
5777: LD_INT 2
5779: EQUAL
5780: IFFALSE 5844
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5782: LD_EXP 1
5786: PPUSH
5787: LD_STRING D2Lb-JMM-1
5789: PPUSH
5790: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5794: LD_EXP 3
5798: PPUSH
5799: LD_STRING D2Lb-Lisa-1
5801: PPUSH
5802: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5806: LD_EXP 1
5810: PPUSH
5811: LD_STRING D2Lb-JMM-2
5813: PPUSH
5814: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5818: LD_EXP 3
5822: PPUSH
5823: LD_STRING D2Lb-Lisa-2
5825: PPUSH
5826: CALL_OW 94
// fastEnd = 1 ;
5830: LD_ADDR_EXP 15
5834: PUSH
5835: LD_INT 1
5837: ST_TO_ADDR
// FinishMission ;
5838: CALL 9445 0 0
// exit ;
5842: GO 6141
// end ; if dec2 = 3 then
5844: LD_VAR 0 2
5848: PUSH
5849: LD_INT 3
5851: EQUAL
5852: IFFALSE 5880
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
5854: LD_EXP 3
5858: PPUSH
5859: LD_STRING D2Lc-Lisa-1
5861: PPUSH
5862: CALL_OW 94
// fastEnd = 1 ;
5866: LD_ADDR_EXP 15
5870: PUSH
5871: LD_INT 1
5873: ST_TO_ADDR
// FinishMission ;
5874: CALL 9445 0 0
// exit ;
5878: GO 6141
// end ; end ; if dec1 = 2 then
5880: LD_VAR 0 1
5884: PUSH
5885: LD_INT 2
5887: EQUAL
5888: IFFALSE 5904
// begin fastEnd = 1 ;
5890: LD_ADDR_EXP 15
5894: PUSH
5895: LD_INT 1
5897: ST_TO_ADDR
// FinishMission ;
5898: CALL 9445 0 0
// exit ;
5902: GO 6141
// end ; end ; if JMMGirl = 3 then
5904: LD_EXP 7
5908: PUSH
5909: LD_INT 3
5911: EQUAL
5912: IFFALSE 6141
// begin SayRadio ( Connie , D2X-Con-1 ) ;
5914: LD_EXP 4
5918: PPUSH
5919: LD_STRING D2X-Con-1
5921: PPUSH
5922: CALL_OW 94
// dec1 = query ( Q1 ) ;
5926: LD_ADDR_VAR 0 1
5930: PUSH
5931: LD_STRING Q1
5933: PPUSH
5934: CALL_OW 97
5938: ST_TO_ADDR
// if dec1 = 1 then
5939: LD_VAR 0 1
5943: PUSH
5944: LD_INT 1
5946: EQUAL
5947: IFFALSE 6117
// begin ComExitVehicle ( JMM ) ;
5949: LD_EXP 1
5953: PPUSH
5954: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
5958: LD_EXP 1
5962: PPUSH
5963: LD_STRING D2X-JMM-1
5965: PPUSH
5966: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
5970: LD_EXP 4
5974: PPUSH
5975: LD_STRING D2X-Con-2
5977: PPUSH
5978: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5982: LD_EXP 5
5986: PPUSH
5987: LD_STRING DPowell-Pow-1
5989: PPUSH
5990: CALL_OW 94
// dec2 = query ( Q2X ) ;
5994: LD_ADDR_VAR 0 2
5998: PUSH
5999: LD_STRING Q2X
6001: PPUSH
6002: CALL_OW 97
6006: ST_TO_ADDR
// if dec2 = 1 then
6007: LD_VAR 0 2
6011: PUSH
6012: LD_INT 1
6014: EQUAL
6015: IFFALSE 6033
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6017: LD_EXP 1
6021: PPUSH
6022: LD_STRING D2Xa-JMM-1
6024: PPUSH
6025: CALL_OW 88
// InGameOff ;
6029: CALL_OW 9
// end ; if dec2 = 2 then
6033: LD_VAR 0 2
6037: PUSH
6038: LD_INT 2
6040: EQUAL
6041: IFFALSE 6081
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6043: LD_EXP 1
6047: PPUSH
6048: LD_STRING D2Xb-JMM-1
6050: PPUSH
6051: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6055: LD_EXP 4
6059: PPUSH
6060: LD_STRING D2Xb-Con-1
6062: PPUSH
6063: CALL_OW 94
// fastEnd = 1 ;
6067: LD_ADDR_EXP 15
6071: PUSH
6072: LD_INT 1
6074: ST_TO_ADDR
// FinishMission ;
6075: CALL 9445 0 0
// exit ;
6079: GO 6141
// end ; if dec2 = 3 then
6081: LD_VAR 0 2
6085: PUSH
6086: LD_INT 3
6088: EQUAL
6089: IFFALSE 6117
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6091: LD_EXP 4
6095: PPUSH
6096: LD_STRING D2Xc-Con-1
6098: PPUSH
6099: CALL_OW 94
// fastEnd = 1 ;
6103: LD_ADDR_EXP 15
6107: PUSH
6108: LD_INT 1
6110: ST_TO_ADDR
// FinishMission ;
6111: CALL 9445 0 0
// exit ;
6115: GO 6141
// end ; end ; if dec1 = 2 then
6117: LD_VAR 0 1
6121: PUSH
6122: LD_INT 2
6124: EQUAL
6125: IFFALSE 6141
// begin fastEnd = 1 ;
6127: LD_ADDR_EXP 15
6131: PUSH
6132: LD_INT 1
6134: ST_TO_ADDR
// FinishMission ;
6135: CALL 9445 0 0
// exit ;
6139: GO 6141
// end ; end ; end ;
6141: PPOPN 2
6143: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6144: LD_EXP 1
6148: PPUSH
6149: LD_INT 6
6151: PPUSH
6152: CALL_OW 308
6156: IFFALSE 6898
6158: GO 6160
6160: DISABLE
// begin InGameOn ;
6161: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6165: LD_INT 35
6167: PPUSH
6168: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6172: LD_EXP 1
6176: PPUSH
6177: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6181: LD_EXP 1
6185: PPUSH
6186: LD_INT 62
6188: PPUSH
6189: LD_INT 104
6191: PPUSH
6192: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6196: LD_EXP 1
6200: PPUSH
6201: LD_EXP 2
6205: PPUSH
6206: CALL_OW 296
6210: PUSH
6211: LD_INT 4
6213: LESS
6214: PUSH
6215: LD_EXP 1
6219: PPUSH
6220: LD_EXP 3
6224: PPUSH
6225: CALL_OW 296
6229: PUSH
6230: LD_INT 4
6232: LESS
6233: OR
6234: PUSH
6235: LD_EXP 1
6239: PPUSH
6240: LD_EXP 4
6244: PPUSH
6245: CALL_OW 296
6249: PUSH
6250: LD_INT 4
6252: LESS
6253: OR
6254: IFFALSE 6165
// case JMMGirl of 1 :
6256: LD_EXP 7
6260: PUSH
6261: LD_INT 1
6263: DOUBLE
6264: EQUAL
6265: IFTRUE 6269
6267: GO 6481
6269: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6270: LD_INT 22
6272: PUSH
6273: LD_INT 4
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PPUSH
6280: CALL_OW 69
6284: PPUSH
6285: LD_INT 1
6287: PPUSH
6288: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6292: LD_EXP 2
6296: PPUSH
6297: LD_EXP 1
6301: PPUSH
6302: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6306: LD_EXP 1
6310: PPUSH
6311: LD_EXP 2
6315: PPUSH
6316: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6320: LD_EXP 2
6324: PUSH
6325: LD_EXP 1
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PPUSH
6334: CALL_OW 87
// wait ( 0 0$1 ) ;
6338: LD_INT 35
6340: PPUSH
6341: CALL_OW 67
// DialogueOn ;
6345: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6349: LD_EXP 2
6353: PPUSH
6354: LD_STRING D3J-Joan-1
6356: PPUSH
6357: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6361: LD_EXP 1
6365: PPUSH
6366: LD_STRING D3J-JMM-1
6368: PPUSH
6369: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6373: LD_EXP 2
6377: PPUSH
6378: LD_STRING D3J-Joan-2
6380: PPUSH
6381: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6385: LD_EXP 1
6389: PPUSH
6390: LD_STRING D3J-JMM-2
6392: PPUSH
6393: CALL_OW 88
// wait ( 0 0$1 ) ;
6397: LD_INT 35
6399: PPUSH
6400: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6404: LD_EXP 1
6408: PPUSH
6409: LD_STRING D4-JMM-1
6411: PPUSH
6412: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6416: LD_EXP 2
6420: PPUSH
6421: LD_STRING D4-Joan-1
6423: PPUSH
6424: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6428: LD_EXP 1
6432: PPUSH
6433: LD_STRING D4-JMM-2
6435: PPUSH
6436: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6440: LD_EXP 2
6444: PPUSH
6445: LD_STRING D4-Joan-2
6447: PPUSH
6448: CALL_OW 88
// DialogueOff ;
6452: CALL_OW 7
// InGameOff ;
6456: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6460: LD_STRING M2J
6462: PPUSH
6463: CALL_OW 337
// SaveForQuickRestart ;
6467: CALL_OW 22
// russianAI = 1 ;
6471: LD_ADDR_EXP 13
6475: PUSH
6476: LD_INT 1
6478: ST_TO_ADDR
// end ; 2 :
6479: GO 6898
6481: LD_INT 2
6483: DOUBLE
6484: EQUAL
6485: IFTRUE 6489
6487: GO 6701
6489: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6490: LD_INT 22
6492: PUSH
6493: LD_INT 4
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PPUSH
6500: CALL_OW 69
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6512: LD_EXP 3
6516: PPUSH
6517: LD_EXP 1
6521: PPUSH
6522: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6526: LD_EXP 1
6530: PPUSH
6531: LD_EXP 3
6535: PPUSH
6536: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6540: LD_EXP 3
6544: PUSH
6545: LD_EXP 1
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PPUSH
6554: CALL_OW 87
// wait ( 0 0$1 ) ;
6558: LD_INT 35
6560: PPUSH
6561: CALL_OW 67
// DialogueOn ;
6565: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6569: LD_EXP 3
6573: PPUSH
6574: LD_STRING D3L-Lisa-1
6576: PPUSH
6577: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6581: LD_EXP 1
6585: PPUSH
6586: LD_STRING D3L-JMM-1
6588: PPUSH
6589: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6593: LD_EXP 3
6597: PPUSH
6598: LD_STRING D3L-Lisa-2
6600: PPUSH
6601: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6605: LD_EXP 1
6609: PPUSH
6610: LD_STRING D3L-JMM-2
6612: PPUSH
6613: CALL_OW 88
// wait ( 0 0$1 ) ;
6617: LD_INT 35
6619: PPUSH
6620: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6624: LD_EXP 1
6628: PPUSH
6629: LD_STRING D4-JMM-1
6631: PPUSH
6632: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6636: LD_EXP 3
6640: PPUSH
6641: LD_STRING D4-Lisa-1
6643: PPUSH
6644: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6648: LD_EXP 1
6652: PPUSH
6653: LD_STRING D4-JMM-1
6655: PPUSH
6656: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6660: LD_EXP 3
6664: PPUSH
6665: LD_STRING D4-Lisa-2
6667: PPUSH
6668: CALL_OW 88
// DialogueOff ;
6672: CALL_OW 7
// InGameOff ;
6676: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6680: LD_STRING M2L
6682: PPUSH
6683: CALL_OW 337
// SaveForQuickRestart ;
6687: CALL_OW 22
// russianAI = 1 ;
6691: LD_ADDR_EXP 13
6695: PUSH
6696: LD_INT 1
6698: ST_TO_ADDR
// end ; 3 :
6699: GO 6898
6701: LD_INT 3
6703: DOUBLE
6704: EQUAL
6705: IFTRUE 6709
6707: GO 6897
6709: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6710: LD_INT 22
6712: PUSH
6713: LD_INT 4
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 69
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6732: LD_EXP 4
6736: PPUSH
6737: LD_EXP 1
6741: PPUSH
6742: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6746: LD_EXP 1
6750: PPUSH
6751: LD_EXP 4
6755: PPUSH
6756: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6760: LD_EXP 2
6764: PUSH
6765: LD_EXP 1
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 87
// wait ( 0 0$1 ) ;
6778: LD_INT 35
6780: PPUSH
6781: CALL_OW 67
// DialogueOn ;
6785: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6789: LD_EXP 4
6793: PPUSH
6794: LD_STRING D3X-Con-1
6796: PPUSH
6797: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6801: LD_EXP 1
6805: PPUSH
6806: LD_STRING D3J-JMM-1
6808: PPUSH
6809: CALL_OW 88
// wait ( 0 0$1 ) ;
6813: LD_INT 35
6815: PPUSH
6816: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6820: LD_EXP 1
6824: PPUSH
6825: LD_STRING D4-JMM-1
6827: PPUSH
6828: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
6832: LD_EXP 4
6836: PPUSH
6837: LD_STRING D4-Con-1
6839: PPUSH
6840: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6844: LD_EXP 1
6848: PPUSH
6849: LD_STRING D4-JMM-2
6851: PPUSH
6852: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
6856: LD_EXP 4
6860: PPUSH
6861: LD_STRING D4-Con-2
6863: PPUSH
6864: CALL_OW 88
// DialogueOff ;
6868: CALL_OW 7
// InGameOff ;
6872: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
6876: LD_STRING M2X
6878: PPUSH
6879: CALL_OW 337
// SaveForQuickRestart ;
6883: CALL_OW 22
// russianAI = 1 ;
6887: LD_ADDR_EXP 13
6891: PUSH
6892: LD_INT 1
6894: ST_TO_ADDR
// end ; end ;
6895: GO 6898
6897: POP
// end ;
6898: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
6899: LD_INT 32
6901: PPUSH
6902: CALL_OW 306
6906: IFFALSE 7239
6908: GO 6910
6910: DISABLE
// begin case JMMGirl of 1 :
6911: LD_EXP 7
6915: PUSH
6916: LD_INT 1
6918: DOUBLE
6919: EQUAL
6920: IFTRUE 6924
6922: GO 7046
6924: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
6925: LD_EXP 1
6929: PPUSH
6930: LD_STRING D6J-JMM-1
6932: PPUSH
6933: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
6937: LD_STRING 13f_Denis
6939: PPUSH
6940: CALL_OW 28
6944: PUSH
6945: LD_INT 1
6947: EQUAL
6948: PUSH
6949: LD_STRING 13s_Denis
6951: PPUSH
6952: CALL_OW 28
6956: PUSH
6957: LD_INT 1
6959: EQUAL
6960: OR
6961: IFFALSE 7001
// begin Say ( Joan , D6J-Joan-1 ) ;
6963: LD_EXP 2
6967: PPUSH
6968: LD_STRING D6J-Joan-1
6970: PPUSH
6971: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
6975: LD_EXP 1
6979: PPUSH
6980: LD_STRING D6J-JMM-2
6982: PPUSH
6983: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
6987: LD_EXP 2
6991: PPUSH
6992: LD_STRING D6J-Joan-2
6994: PPUSH
6995: CALL_OW 88
// end else
6999: GO 7013
// begin Say ( Joan , D6J-Joan-2a ) ;
7001: LD_EXP 2
7005: PPUSH
7006: LD_STRING D6J-Joan-2a
7008: PPUSH
7009: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7013: LD_EXP 1
7017: PPUSH
7018: LD_STRING D6J-JMM-3
7020: PPUSH
7021: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7025: LD_EXP 2
7029: PPUSH
7030: LD_STRING D6J-Joan-3
7032: PPUSH
7033: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7037: LD_STRING M3
7039: PPUSH
7040: CALL_OW 337
// end ; 2 :
7044: GO 7239
7046: LD_INT 2
7048: DOUBLE
7049: EQUAL
7050: IFTRUE 7054
7052: GO 7112
7054: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7055: LD_EXP 1
7059: PPUSH
7060: LD_STRING D6L-JMM-1
7062: PPUSH
7063: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7067: LD_EXP 3
7071: PPUSH
7072: LD_STRING D6L-Lisa-1
7074: PPUSH
7075: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7079: LD_EXP 1
7083: PPUSH
7084: LD_STRING D6L-JMM-2
7086: PPUSH
7087: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7091: LD_EXP 3
7095: PPUSH
7096: LD_STRING D6L-Lisa-2
7098: PPUSH
7099: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7103: LD_STRING M3
7105: PPUSH
7106: CALL_OW 337
// end ; 3 :
7110: GO 7239
7112: LD_INT 3
7114: DOUBLE
7115: EQUAL
7116: IFTRUE 7120
7118: GO 7238
7120: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7121: LD_EXP 1
7125: PPUSH
7126: LD_STRING D6X-JMM-1
7128: PPUSH
7129: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7133: LD_EXP 4
7137: PPUSH
7138: LD_STRING D6X-Con-1
7140: PPUSH
7141: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7145: LD_EXP 1
7149: PPUSH
7150: LD_STRING D6X-JMM-2
7152: PPUSH
7153: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7157: LD_EXP 4
7161: PPUSH
7162: LD_STRING D6X-Con-2
7164: PPUSH
7165: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7169: LD_EXP 1
7173: PPUSH
7174: LD_STRING D6X-JMM-3
7176: PPUSH
7177: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7181: LD_EXP 4
7185: PPUSH
7186: LD_STRING D6X-Con-3
7188: PPUSH
7189: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7193: LD_EXP 1
7197: PPUSH
7198: LD_STRING D6X-JMM-4
7200: PPUSH
7201: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7205: LD_EXP 4
7209: PPUSH
7210: LD_STRING D6X-Con-4
7212: PPUSH
7213: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7217: LD_EXP 1
7221: PPUSH
7222: LD_STRING D6X-JMM-5
7224: PPUSH
7225: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7229: LD_STRING M3
7231: PPUSH
7232: CALL_OW 337
// end ; end ;
7236: GO 7239
7238: POP
// end ;
7239: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7240: LD_INT 22
7242: PUSH
7243: LD_INT 1
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 33
7252: PUSH
7253: LD_INT 2
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: PPUSH
7269: CALL_OW 306
7273: IFFALSE 7419
7275: GO 7277
7277: DISABLE
// begin case JMMGirl of 1 :
7278: LD_EXP 7
7282: PUSH
7283: LD_INT 1
7285: DOUBLE
7286: EQUAL
7287: IFTRUE 7291
7289: GO 7328
7291: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7292: LD_EXP 1
7296: PPUSH
7297: LD_STRING D5-JMM-1
7299: PPUSH
7300: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7304: LD_INT 77
7306: PPUSH
7307: LD_INT 87
7309: PPUSH
7310: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7314: LD_EXP 2
7318: PPUSH
7319: LD_STRING D5-Joan-1
7321: PPUSH
7322: CALL_OW 88
// end ; 2 :
7326: GO 7419
7328: LD_INT 2
7330: DOUBLE
7331: EQUAL
7332: IFTRUE 7336
7334: GO 7373
7336: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7337: LD_EXP 1
7341: PPUSH
7342: LD_STRING D5-JMM-1
7344: PPUSH
7345: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7349: LD_INT 77
7351: PPUSH
7352: LD_INT 87
7354: PPUSH
7355: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7359: LD_EXP 3
7363: PPUSH
7364: LD_STRING D5-Lisa-1
7366: PPUSH
7367: CALL_OW 88
// end ; 3 :
7371: GO 7419
7373: LD_INT 3
7375: DOUBLE
7376: EQUAL
7377: IFTRUE 7381
7379: GO 7418
7381: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7382: LD_EXP 1
7386: PPUSH
7387: LD_STRING D5-JMM-1
7389: PPUSH
7390: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7394: LD_INT 77
7396: PPUSH
7397: LD_INT 87
7399: PPUSH
7400: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7404: LD_EXP 4
7408: PPUSH
7409: LD_STRING D5-Con-1
7411: PPUSH
7412: CALL_OW 88
// end ; end ;
7416: GO 7419
7418: POP
// end ;
7419: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7420: LD_INT 48
7422: PPUSH
7423: CALL_OW 255
7427: PUSH
7428: LD_INT 1
7430: EQUAL
7431: IFFALSE 7528
7433: GO 7435
7435: DISABLE
// begin DialogueOn ;
7436: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7440: LD_EXP 5
7444: PPUSH
7445: LD_STRING D7-Pow-1
7447: PPUSH
7448: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7452: LD_EXP 1
7456: PPUSH
7457: LD_STRING D7-JMM-1
7459: PPUSH
7460: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7464: LD_EXP 5
7468: PPUSH
7469: LD_STRING D7-Pow-2
7471: PPUSH
7472: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7476: LD_EXP 1
7480: PPUSH
7481: LD_STRING D7-JMM-2
7483: PPUSH
7484: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7488: LD_EXP 5
7492: PPUSH
7493: LD_STRING D7-Pow-3
7495: PPUSH
7496: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7500: LD_EXP 1
7504: PPUSH
7505: LD_STRING D7-JMM-3
7507: PPUSH
7508: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7512: LD_EXP 5
7516: PPUSH
7517: LD_STRING D7-Pow-4
7519: PPUSH
7520: CALL_OW 94
// DialogueOff ;
7524: CALL_OW 7
// end ; end_of_file
7528: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7529: LD_VAR 0 1
7533: PPUSH
7534: CALL_OW 255
7538: PUSH
7539: LD_INT 3
7541: EQUAL
7542: IFFALSE 7616
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7544: LD_ADDR_EXP 10
7548: PUSH
7549: LD_EXP 10
7553: PPUSH
7554: LD_INT 1
7556: PPUSH
7557: CALL_OW 3
7561: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7562: LD_ADDR_EXP 10
7566: PUSH
7567: LD_EXP 10
7571: PPUSH
7572: LD_INT 1
7574: PPUSH
7575: CALL_OW 3
7579: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7580: LD_ADDR_EXP 10
7584: PUSH
7585: LD_EXP 10
7589: PPUSH
7590: LD_INT 1
7592: PPUSH
7593: CALL_OW 3
7597: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7598: LD_ADDR_EXP 10
7602: PUSH
7603: LD_EXP 10
7607: PPUSH
7608: LD_INT 1
7610: PPUSH
7611: CALL_OW 3
7615: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7616: LD_VAR 0 1
7620: PPUSH
7621: CALL_OW 255
7625: PUSH
7626: LD_INT 3
7628: EQUAL
7629: PUSH
7630: LD_VAR 0 1
7634: PPUSH
7635: CALL_OW 266
7639: PUSH
7640: LD_INT 0
7642: EQUAL
7643: PUSH
7644: LD_VAR 0 1
7648: PPUSH
7649: CALL_OW 266
7653: PUSH
7654: LD_INT 2
7656: EQUAL
7657: OR
7658: PUSH
7659: LD_VAR 0 1
7663: PPUSH
7664: CALL_OW 266
7668: PUSH
7669: LD_INT 4
7671: EQUAL
7672: OR
7673: PUSH
7674: EMPTY
7675: LIST
7676: AND
7677: IFFALSE 7688
// ComUpgrade ( building ) ;
7679: LD_VAR 0 1
7683: PPUSH
7684: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7688: LD_VAR 0 1
7692: PPUSH
7693: CALL_OW 255
7697: PUSH
7698: LD_INT 3
7700: EQUAL
7701: PUSH
7702: LD_VAR 0 1
7706: PPUSH
7707: CALL_OW 266
7711: PUSH
7712: LD_INT 32
7714: EQUAL
7715: AND
7716: IFFALSE 7757
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7718: LD_VAR 0 1
7722: PPUSH
7723: LD_INT 42
7725: PUSH
7726: LD_INT 43
7728: PUSH
7729: LD_INT 44
7731: PUSH
7732: LD_INT 46
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: PUSH
7741: LD_INT 1
7743: PPUSH
7744: LD_INT 4
7746: PPUSH
7747: CALL_OW 12
7751: ARRAY
7752: PPUSH
7753: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7757: LD_VAR 0 1
7761: PPUSH
7762: CALL_OW 255
7766: PUSH
7767: LD_INT 3
7769: EQUAL
7770: PUSH
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 266
7780: PUSH
7781: LD_INT 33
7783: EQUAL
7784: AND
7785: IFFALSE 7826
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7787: LD_VAR 0 1
7791: PPUSH
7792: LD_INT 42
7794: PUSH
7795: LD_INT 43
7797: PUSH
7798: LD_INT 44
7800: PUSH
7801: LD_INT 46
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: LD_INT 1
7812: PPUSH
7813: LD_INT 4
7815: PPUSH
7816: CALL_OW 12
7820: ARRAY
7821: PPUSH
7822: CALL_OW 208
// end ;
7826: PPOPN 1
7828: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
7829: LD_VAR 0 1
7833: PPUSH
7834: CALL_OW 255
7838: PUSH
7839: LD_INT 3
7841: EQUAL
7842: PUSH
7843: LD_VAR 0 1
7847: PPUSH
7848: CALL_OW 247
7852: PUSH
7853: LD_INT 3
7855: EQUAL
7856: AND
7857: IFFALSE 8549
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 266
7868: PUSH
7869: LD_INT 31
7871: EQUAL
7872: PUSH
7873: LD_VAR 0 1
7877: PPUSH
7878: CALL_OW 266
7882: PUSH
7883: LD_INT 32
7885: EQUAL
7886: OR
7887: PUSH
7888: LD_VAR 0 1
7892: PPUSH
7893: CALL_OW 266
7897: PUSH
7898: LD_INT 36
7900: EQUAL
7901: OR
7902: PUSH
7903: LD_VAR 0 1
7907: PPUSH
7908: CALL_OW 266
7912: PUSH
7913: LD_INT 0
7915: EQUAL
7916: OR
7917: PUSH
7918: LD_VAR 0 1
7922: PPUSH
7923: CALL_OW 266
7927: PUSH
7928: LD_INT 24
7930: EQUAL
7931: OR
7932: PUSH
7933: LD_VAR 0 1
7937: PPUSH
7938: CALL_OW 266
7942: PUSH
7943: LD_INT 17
7945: EQUAL
7946: OR
7947: PUSH
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 266
7957: PUSH
7958: LD_INT 25
7960: EQUAL
7961: OR
7962: PUSH
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 266
7972: PUSH
7973: LD_INT 19
7975: EQUAL
7976: OR
7977: PUSH
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 266
7987: PUSH
7988: LD_INT 20
7990: EQUAL
7991: OR
7992: PUSH
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 266
8002: PUSH
8003: LD_INT 18
8005: EQUAL
8006: OR
8007: PUSH
8008: LD_VAR 0 1
8012: PPUSH
8013: CALL_OW 266
8017: PUSH
8018: LD_INT 21
8020: EQUAL
8021: OR
8022: PUSH
8023: LD_VAR 0 1
8027: PPUSH
8028: CALL_OW 266
8032: PUSH
8033: LD_INT 23
8035: EQUAL
8036: OR
8037: PUSH
8038: LD_VAR 0 1
8042: PPUSH
8043: CALL_OW 266
8047: PUSH
8048: LD_INT 16
8050: EQUAL
8051: OR
8052: PUSH
8053: LD_VAR 0 1
8057: PPUSH
8058: CALL_OW 266
8062: PUSH
8063: LD_INT 6
8065: EQUAL
8066: OR
8067: PUSH
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL_OW 266
8077: PUSH
8078: LD_INT 29
8080: EQUAL
8081: OR
8082: PUSH
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 266
8092: PUSH
8093: LD_INT 26
8095: EQUAL
8096: OR
8097: PUSH
8098: LD_VAR 0 1
8102: PPUSH
8103: CALL_OW 266
8107: PUSH
8108: LD_INT 30
8110: EQUAL
8111: OR
8112: PUSH
8113: LD_VAR 0 1
8117: PPUSH
8118: CALL_OW 266
8122: PUSH
8123: LD_INT 28
8125: EQUAL
8126: OR
8127: PUSH
8128: LD_VAR 0 1
8132: PPUSH
8133: CALL_OW 266
8137: PUSH
8138: LD_INT 27
8140: EQUAL
8141: OR
8142: PUSH
8143: LD_VAR 0 1
8147: PPUSH
8148: CALL_OW 266
8152: PUSH
8153: LD_INT 33
8155: EQUAL
8156: OR
8157: PUSH
8158: LD_VAR 0 1
8162: PPUSH
8163: CALL_OW 266
8167: PUSH
8168: LD_INT 2
8170: EQUAL
8171: OR
8172: PUSH
8173: LD_VAR 0 1
8177: PPUSH
8178: CALL_OW 266
8182: PUSH
8183: LD_INT 4
8185: EQUAL
8186: OR
8187: IFFALSE 8273
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8189: LD_ADDR_EXP 10
8193: PUSH
8194: LD_EXP 10
8198: PUSH
8199: LD_VAR 0 1
8203: PPUSH
8204: CALL_OW 266
8208: ADD
8209: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8210: LD_ADDR_EXP 10
8214: PUSH
8215: LD_EXP 10
8219: PUSH
8220: LD_VAR 0 1
8224: PPUSH
8225: CALL_OW 250
8229: ADD
8230: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8231: LD_ADDR_EXP 10
8235: PUSH
8236: LD_EXP 10
8240: PUSH
8241: LD_VAR 0 1
8245: PPUSH
8246: CALL_OW 251
8250: ADD
8251: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8252: LD_ADDR_EXP 10
8256: PUSH
8257: LD_EXP 10
8261: PUSH
8262: LD_VAR 0 1
8266: PPUSH
8267: CALL_OW 254
8271: ADD
8272: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8273: LD_VAR 0 1
8277: PPUSH
8278: CALL_OW 266
8282: PUSH
8283: LD_INT 1
8285: EQUAL
8286: IFFALSE 8365
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8288: LD_ADDR_EXP 10
8292: PUSH
8293: LD_EXP 10
8297: PUSH
8298: LD_INT 0
8300: ADD
8301: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8302: LD_ADDR_EXP 10
8306: PUSH
8307: LD_EXP 10
8311: PUSH
8312: LD_VAR 0 1
8316: PPUSH
8317: CALL_OW 250
8321: ADD
8322: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8323: LD_ADDR_EXP 10
8327: PUSH
8328: LD_EXP 10
8332: PUSH
8333: LD_VAR 0 1
8337: PPUSH
8338: CALL_OW 251
8342: ADD
8343: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8344: LD_ADDR_EXP 10
8348: PUSH
8349: LD_EXP 10
8353: PUSH
8354: LD_VAR 0 1
8358: PPUSH
8359: CALL_OW 254
8363: ADD
8364: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8365: LD_VAR 0 1
8369: PPUSH
8370: CALL_OW 266
8374: PUSH
8375: LD_INT 3
8377: EQUAL
8378: IFFALSE 8457
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8380: LD_ADDR_EXP 10
8384: PUSH
8385: LD_EXP 10
8389: PUSH
8390: LD_INT 2
8392: ADD
8393: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8394: LD_ADDR_EXP 10
8398: PUSH
8399: LD_EXP 10
8403: PUSH
8404: LD_VAR 0 1
8408: PPUSH
8409: CALL_OW 250
8413: ADD
8414: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8415: LD_ADDR_EXP 10
8419: PUSH
8420: LD_EXP 10
8424: PUSH
8425: LD_VAR 0 1
8429: PPUSH
8430: CALL_OW 251
8434: ADD
8435: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8436: LD_ADDR_EXP 10
8440: PUSH
8441: LD_EXP 10
8445: PUSH
8446: LD_VAR 0 1
8450: PPUSH
8451: CALL_OW 254
8455: ADD
8456: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 266
8466: PUSH
8467: LD_INT 5
8469: EQUAL
8470: IFFALSE 8549
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8472: LD_ADDR_EXP 10
8476: PUSH
8477: LD_EXP 10
8481: PUSH
8482: LD_INT 4
8484: ADD
8485: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8486: LD_ADDR_EXP 10
8490: PUSH
8491: LD_EXP 10
8495: PUSH
8496: LD_VAR 0 1
8500: PPUSH
8501: CALL_OW 250
8505: ADD
8506: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8507: LD_ADDR_EXP 10
8511: PUSH
8512: LD_EXP 10
8516: PUSH
8517: LD_VAR 0 1
8521: PPUSH
8522: CALL_OW 251
8526: ADD
8527: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8528: LD_ADDR_EXP 10
8532: PUSH
8533: LD_EXP 10
8537: PUSH
8538: LD_VAR 0 1
8542: PPUSH
8543: CALL_OW 254
8547: ADD
8548: ST_TO_ADDR
// end ; end ; end ;
8549: PPOPN 1
8551: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8552: LD_VAR 0 3
8556: PPUSH
8557: CALL_OW 264
8561: PUSH
8562: LD_INT 10
8564: EQUAL
8565: IFFALSE 8581
// destroyCounter := destroyCounter + 1 ;
8567: LD_ADDR_EXP 17
8571: PUSH
8572: LD_EXP 17
8576: PUSH
8577: LD_INT 1
8579: PLUS
8580: ST_TO_ADDR
// end ;
8581: PPOPN 3
8583: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8584: LD_VAR 0 2
8588: PUSH
8589: LD_INT 1
8591: EQUAL
8592: PUSH
8593: LD_VAR 0 2
8597: PUSH
8598: LD_INT 40
8600: EQUAL
8601: OR
8602: IFFALSE 8726
// if GetSide ( vehicle ) = 3 then
8604: LD_VAR 0 1
8608: PPUSH
8609: CALL_OW 255
8613: PUSH
8614: LD_INT 3
8616: EQUAL
8617: IFFALSE 8726
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8619: LD_VAR 0 1
8623: PPUSH
8624: CALL_OW 264
8628: PUSH
8629: LD_INT 47
8631: EQUAL
8632: PUSH
8633: LD_VAR 0 1
8637: PPUSH
8638: CALL_OW 264
8642: PUSH
8643: LD_INT 46
8645: EQUAL
8646: OR
8647: PUSH
8648: LD_VAR 0 1
8652: PPUSH
8653: CALL_OW 264
8657: PUSH
8658: LD_INT 45
8660: EQUAL
8661: OR
8662: PUSH
8663: LD_VAR 0 1
8667: PPUSH
8668: CALL_OW 264
8672: PUSH
8673: LD_INT 44
8675: EQUAL
8676: OR
8677: IFFALSE 8695
// russianTanks = russianTanks ^ vehicle ;
8679: LD_ADDR_EXP 11
8683: PUSH
8684: LD_EXP 11
8688: PUSH
8689: LD_VAR 0 1
8693: ADD
8694: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8695: LD_VAR 0 1
8699: PPUSH
8700: CALL_OW 264
8704: PUSH
8705: LD_INT 49
8707: EQUAL
8708: IFFALSE 8726
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8710: LD_ADDR_EXP 12
8714: PUSH
8715: LD_EXP 12
8719: PUSH
8720: LD_VAR 0 1
8724: ADD
8725: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8726: LD_VAR 0 1
8730: PPUSH
8731: CALL_OW 255
8735: PUSH
8736: LD_INT 1
8738: EQUAL
8739: PUSH
8740: LD_VAR 0 1
8744: PPUSH
8745: CALL_OW 264
8749: PUSH
8750: LD_INT 10
8752: EQUAL
8753: AND
8754: IFFALSE 8770
// amLaserCounter = amLaserCounter + 1 ;
8756: LD_ADDR_EXP 9
8760: PUSH
8761: LD_EXP 9
8765: PUSH
8766: LD_INT 1
8768: PLUS
8769: ST_TO_ADDR
// end ;
8770: PPOPN 2
8772: END
// on UnitGoesToRed ( unit ) do var i ;
8773: LD_INT 0
8775: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
8776: LD_VAR 0 1
8780: PPUSH
8781: CALL_OW 255
8785: PUSH
8786: LD_INT 3
8788: EQUAL
8789: PUSH
8790: LD_VAR 0 1
8794: PPUSH
8795: CALL_OW 247
8799: PUSH
8800: LD_INT 2
8802: EQUAL
8803: AND
8804: IFFALSE 8916
// begin if russianTanks > 0 then
8806: LD_EXP 11
8810: PUSH
8811: LD_INT 0
8813: GREATER
8814: IFFALSE 8861
// for i in russianTanks do
8816: LD_ADDR_VAR 0 2
8820: PUSH
8821: LD_EXP 11
8825: PUSH
8826: FOR_IN
8827: IFFALSE 8859
// if i = unit then
8829: LD_VAR 0 2
8833: PUSH
8834: LD_VAR 0 1
8838: EQUAL
8839: IFFALSE 8857
// russianTanks = russianTanks diff unit ;
8841: LD_ADDR_EXP 11
8845: PUSH
8846: LD_EXP 11
8850: PUSH
8851: LD_VAR 0 1
8855: DIFF
8856: ST_TO_ADDR
8857: GO 8826
8859: POP
8860: POP
// if russianTimeLapsers > 0 then
8861: LD_EXP 12
8865: PUSH
8866: LD_INT 0
8868: GREATER
8869: IFFALSE 8916
// for i in russianTimeLapsers do
8871: LD_ADDR_VAR 0 2
8875: PUSH
8876: LD_EXP 12
8880: PUSH
8881: FOR_IN
8882: IFFALSE 8914
// if i = unit then
8884: LD_VAR 0 2
8888: PUSH
8889: LD_VAR 0 1
8893: EQUAL
8894: IFFALSE 8912
// russianTimeLapsers = russianTimeLapsers diff unit ;
8896: LD_ADDR_EXP 12
8900: PUSH
8901: LD_EXP 12
8905: PUSH
8906: LD_VAR 0 1
8910: DIFF
8911: ST_TO_ADDR
8912: GO 8881
8914: POP
8915: POP
// end ; end ;
8916: PPOPN 2
8918: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8919: LD_VAR 0 1
8923: PPUSH
8924: CALL 10733 0 1
// end ; end_of_file
8928: PPOPN 1
8930: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
8931: LD_EXP 1
8935: PPUSH
8936: CALL_OW 310
8940: PPUSH
8941: LD_INT 12
8943: PPUSH
8944: CALL_OW 308
8948: PUSH
8949: LD_EXP 15
8953: PUSH
8954: LD_INT 0
8956: EQUAL
8957: AND
8958: IFFALSE 9304
8960: GO 8962
8962: DISABLE
8963: LD_INT 0
8965: PPUSH
8966: PPUSH
// begin enable ;
8967: ENABLE
// if JMMGirl = 1 then
8968: LD_EXP 7
8972: PUSH
8973: LD_INT 1
8975: EQUAL
8976: IFFALSE 8993
// JMMGirlVeh = IsInUnit ( Joan ) ;
8978: LD_ADDR_VAR 0 1
8982: PUSH
8983: LD_EXP 2
8987: PPUSH
8988: CALL_OW 310
8992: ST_TO_ADDR
// if JMMGirl = 2 then
8993: LD_EXP 7
8997: PUSH
8998: LD_INT 2
9000: EQUAL
9001: IFFALSE 9018
// JMMGirlVeh = IsInUnit ( Lisa ) ;
9003: LD_ADDR_VAR 0 1
9007: PUSH
9008: LD_EXP 3
9012: PPUSH
9013: CALL_OW 310
9017: ST_TO_ADDR
// if JMMGirl = 3 then
9018: LD_EXP 7
9022: PUSH
9023: LD_INT 3
9025: EQUAL
9026: IFFALSE 9043
// JMMGirlVeh = IsInUnit ( Connie ) ;
9028: LD_ADDR_VAR 0 1
9032: PUSH
9033: LD_EXP 4
9037: PPUSH
9038: CALL_OW 310
9042: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9043: LD_EXP 1
9047: PPUSH
9048: CALL_OW 310
9052: PPUSH
9053: LD_EXP 2
9057: PPUSH
9058: CALL_OW 310
9062: PPUSH
9063: CALL_OW 296
9067: PUSH
9068: LD_INT 10
9070: LESS
9071: PUSH
9072: LD_EXP 1
9076: PPUSH
9077: CALL_OW 310
9081: PPUSH
9082: LD_EXP 3
9086: PPUSH
9087: CALL_OW 310
9091: PPUSH
9092: CALL_OW 296
9096: PUSH
9097: LD_INT 10
9099: LESS
9100: OR
9101: PUSH
9102: LD_EXP 1
9106: PPUSH
9107: CALL_OW 310
9111: PPUSH
9112: LD_EXP 4
9116: PPUSH
9117: CALL_OW 310
9121: PPUSH
9122: CALL_OW 296
9126: PUSH
9127: LD_INT 10
9129: LESS
9130: OR
9131: IFFALSE 9225
// begin case Query ( Q3b ) of 1 :
9133: LD_STRING Q3b
9135: PPUSH
9136: CALL_OW 97
9140: PUSH
9141: LD_INT 1
9143: DOUBLE
9144: EQUAL
9145: IFTRUE 9149
9147: GO 9222
9149: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9150: LD_VAR 0 1
9154: PPUSH
9155: CALL_OW 265
9159: PUSH
9160: EMPTY
9161: LIST
9162: PUSH
9163: LD_VAR 0 1
9167: PPUSH
9168: CALL_OW 262
9172: PUSH
9173: EMPTY
9174: LIST
9175: PUSH
9176: LD_VAR 0 1
9180: PPUSH
9181: CALL_OW 263
9185: PUSH
9186: EMPTY
9187: LIST
9188: PUSH
9189: LD_VAR 0 1
9193: PPUSH
9194: CALL_OW 264
9198: PUSH
9199: EMPTY
9200: LIST
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: PPUSH
9208: LD_STRING 14_JMMGirlVeh_1
9210: PPUSH
9211: CALL_OW 39
// FinishMission ;
9215: CALL 9445 0 0
// disable ;
9219: DISABLE
// end ; end ;
9220: GO 9223
9222: POP
// end else
9223: GO 9304
// begin if JMMGirl = 1 then
9225: LD_EXP 7
9229: PUSH
9230: LD_INT 1
9232: EQUAL
9233: IFFALSE 9250
// dec := Query ( Q3bJ ) else
9235: LD_ADDR_VAR 0 2
9239: PUSH
9240: LD_STRING Q3bJ
9242: PPUSH
9243: CALL_OW 97
9247: ST_TO_ADDR
9248: GO 9288
// if JMMGirl = 2 then
9250: LD_EXP 7
9254: PUSH
9255: LD_INT 2
9257: EQUAL
9258: IFFALSE 9275
// dec := Query ( Q3bL ) else
9260: LD_ADDR_VAR 0 2
9264: PUSH
9265: LD_STRING Q3bL
9267: PPUSH
9268: CALL_OW 97
9272: ST_TO_ADDR
9273: GO 9288
// dec := Query ( Q3bX ) ;
9275: LD_ADDR_VAR 0 2
9279: PUSH
9280: LD_STRING Q3bX
9282: PPUSH
9283: CALL_OW 97
9287: ST_TO_ADDR
// if dec = 1 then
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: EQUAL
9296: IFFALSE 9304
// begin FinishMission ;
9298: CALL 9445 0 0
// exit ;
9302: GO 9304
// end ; end ; end ;
9304: PPOPN 2
9306: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9307: LD_INT 22
9309: PUSH
9310: LD_INT 3
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 21
9319: PUSH
9320: LD_INT 1
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: PPUSH
9331: CALL_OW 69
9335: PUSH
9336: LD_INT 0
9338: EQUAL
9339: PUSH
9340: LD_EXP 15
9344: PUSH
9345: LD_INT 0
9347: EQUAL
9348: AND
9349: IFFALSE 9444
9351: GO 9353
9353: DISABLE
// begin DialogueOn ;
9354: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9358: LD_EXP 1
9362: PPUSH
9363: LD_STRING DEnd-JMM-1
9365: PPUSH
9366: CALL_OW 88
// if JMMGirl = 1 then
9370: LD_EXP 7
9374: PUSH
9375: LD_INT 1
9377: EQUAL
9378: IFFALSE 9392
// Say ( Joan , DEnd-Joan-1 ) ;
9380: LD_EXP 2
9384: PPUSH
9385: LD_STRING DEnd-Joan-1
9387: PPUSH
9388: CALL_OW 88
// if JMMGirl = 2 then
9392: LD_EXP 7
9396: PUSH
9397: LD_INT 2
9399: EQUAL
9400: IFFALSE 9414
// Say ( Lisa , DEnd-Lisa-1 ) ;
9402: LD_EXP 3
9406: PPUSH
9407: LD_STRING DEnd-Lisa-1
9409: PPUSH
9410: CALL_OW 88
// if JMMGirl = 3 then
9414: LD_EXP 7
9418: PUSH
9419: LD_INT 3
9421: EQUAL
9422: IFFALSE 9436
// Say ( Connie , DEnd-Con-1 ) ;
9424: LD_EXP 4
9428: PPUSH
9429: LD_STRING DEnd-Con-1
9431: PPUSH
9432: CALL_OW 88
// DialogueOff ;
9436: CALL_OW 7
// FinishMission ;
9440: CALL 9445 0 0
// end ;
9444: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9445: LD_INT 0
9447: PPUSH
9448: PPUSH
9449: PPUSH
9450: PPUSH
9451: PPUSH
// m1 := false ;
9452: LD_ADDR_VAR 0 3
9456: PUSH
9457: LD_INT 0
9459: ST_TO_ADDR
// m2 := false ;
9460: LD_ADDR_VAR 0 4
9464: PUSH
9465: LD_INT 0
9467: ST_TO_ADDR
// m3 := false ;
9468: LD_ADDR_VAR 0 5
9472: PUSH
9473: LD_INT 0
9475: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9476: LD_EXP 1
9480: PPUSH
9481: LD_STRING 14_JMM
9483: PPUSH
9484: CALL_OW 38
// if tick <= 50 50$00 then
9488: LD_OWVAR 1
9492: PUSH
9493: LD_INT 105000
9495: LESSEQUAL
9496: IFFALSE 9505
// SetAchievement ( ACH_ASPEED_14 ) ;
9498: LD_STRING ACH_ASPEED_14
9500: PPUSH
9501: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9505: LD_EXP 1
9509: PPUSH
9510: CALL_OW 310
9514: PUSH
9515: LD_EXP 1
9519: PPUSH
9520: CALL_OW 310
9524: PPUSH
9525: CALL_OW 247
9529: PUSH
9530: LD_INT 2
9532: EQUAL
9533: AND
9534: IFFALSE 9616
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9536: LD_ADDR_VAR 0 2
9540: PUSH
9541: LD_EXP 1
9545: PPUSH
9546: CALL_OW 310
9550: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9551: LD_VAR 0 2
9555: PPUSH
9556: CALL_OW 265
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: LD_VAR 0 2
9568: PPUSH
9569: CALL_OW 262
9573: PUSH
9574: EMPTY
9575: LIST
9576: PUSH
9577: LD_VAR 0 2
9581: PPUSH
9582: CALL_OW 263
9586: PUSH
9587: EMPTY
9588: LIST
9589: PUSH
9590: LD_VAR 0 2
9594: PPUSH
9595: CALL_OW 264
9599: PUSH
9600: EMPTY
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: PPUSH
9609: LD_STRING 14_JMMVeh_1
9611: PPUSH
9612: CALL_OW 39
// end ; if fastEnd = 1 then
9616: LD_EXP 15
9620: PUSH
9621: LD_INT 1
9623: EQUAL
9624: IFFALSE 9713
// begin AddMedal ( fastend , - 1 ) ;
9626: LD_STRING fastend
9628: PPUSH
9629: LD_INT 1
9631: NEG
9632: PPUSH
9633: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9637: LD_STRING fastend
9639: PPUSH
9640: LD_INT 1
9642: NEG
9643: PPUSH
9644: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9648: LD_STRING fastend
9650: PPUSH
9651: LD_INT 1
9653: NEG
9654: PPUSH
9655: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9659: LD_EXP 7
9663: PPUSH
9664: LD_STRING 14_JMMGirl_1
9666: PPUSH
9667: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9671: LD_INT 0
9673: PPUSH
9674: LD_STRING 14_JMMGirlStatus_1
9676: PPUSH
9677: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9681: LD_INT 0
9683: PPUSH
9684: LD_STRING 14_KappaStatus_1
9686: PPUSH
9687: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9691: LD_STRING Eliminate
9693: PPUSH
9694: CALL_OW 102
// RewardPeople ( JMM ) ;
9698: LD_EXP 1
9702: PPUSH
9703: CALL_OW 43
// YouWin ;
9707: CALL_OW 103
// exit ;
9711: GO 10538
// end ; if fastEnd = 0 then
9713: LD_EXP 15
9717: PUSH
9718: LD_INT 0
9720: EQUAL
9721: IFFALSE 10489
// begin RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
9723: LD_INT 22
9725: PUSH
9726: LD_INT 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 3
9735: PUSH
9736: LD_INT 25
9738: PUSH
9739: LD_INT 12
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PUSH
9750: LD_INT 3
9752: PUSH
9753: LD_INT 25
9755: PUSH
9756: LD_INT 16
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 69
9776: PPUSH
9777: CALL_OW 43
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9781: LD_EXP 7
9785: PPUSH
9786: LD_STRING 14_JMMGirl_1
9788: PPUSH
9789: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9793: LD_INT 22
9795: PUSH
9796: LD_INT 3
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: LD_INT 21
9805: PUSH
9806: LD_INT 1
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PPUSH
9817: CALL_OW 69
9821: PUSH
9822: LD_INT 0
9824: EQUAL
9825: PUSH
9826: LD_INT 48
9828: PPUSH
9829: CALL_OW 255
9833: PUSH
9834: LD_INT 1
9836: EQUAL
9837: AND
9838: IFFALSE 9852
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9840: LD_INT 1
9842: PPUSH
9843: LD_STRING 14_KappaStatus_1
9845: PPUSH
9846: CALL_OW 39
9850: GO 9862
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9852: LD_INT 0
9854: PPUSH
9855: LD_STRING 14_KappaStatus_1
9857: PPUSH
9858: CALL_OW 39
// case JMMGirl of 1 :
9862: LD_EXP 7
9866: PUSH
9867: LD_INT 1
9869: DOUBLE
9870: EQUAL
9871: IFTRUE 9875
9873: GO 10031
9875: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9876: LD_EXP 2
9880: PPUSH
9881: CALL_OW 302
9885: PUSH
9886: LD_EXP 2
9890: PPUSH
9891: CALL_OW 255
9895: PUSH
9896: LD_INT 1
9898: EQUAL
9899: AND
9900: PUSH
9901: LD_INT 22
9903: PUSH
9904: LD_INT 3
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 21
9913: PUSH
9914: LD_INT 1
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PPUSH
9925: CALL_OW 69
9929: PUSH
9930: LD_INT 0
9932: EQUAL
9933: PUSH
9934: LD_EXP 1
9938: PPUSH
9939: CALL_OW 310
9943: PPUSH
9944: LD_EXP 2
9948: PPUSH
9949: CALL_OW 310
9953: PPUSH
9954: CALL_OW 296
9958: PUSH
9959: LD_INT 10
9961: LESS
9962: OR
9963: AND
9964: IFFALSE 10008
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9966: LD_INT 1
9968: PPUSH
9969: LD_STRING 14_JMMGirlStatus_1
9971: PPUSH
9972: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9976: LD_EXP 2
9980: PPUSH
9981: LD_STRING 14_Joan
9983: PPUSH
9984: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9988: LD_STRING protect
9990: PPUSH
9991: LD_INT 1
9993: PPUSH
9994: CALL_OW 101
// m1 := true ;
9998: LD_ADDR_VAR 0 3
10002: PUSH
10003: LD_INT 1
10005: ST_TO_ADDR
// end else
10006: GO 10029
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10008: LD_INT 0
10010: PPUSH
10011: LD_STRING 14_JMMGirlStatus_1
10013: PPUSH
10014: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10018: LD_STRING protect
10020: PPUSH
10021: LD_INT 1
10023: NEG
10024: PPUSH
10025: CALL_OW 101
// end ; end ; 2 :
10029: GO 10360
10031: LD_INT 2
10033: DOUBLE
10034: EQUAL
10035: IFTRUE 10039
10037: GO 10195
10039: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10040: LD_EXP 3
10044: PPUSH
10045: CALL_OW 302
10049: PUSH
10050: LD_EXP 3
10054: PPUSH
10055: CALL_OW 255
10059: PUSH
10060: LD_INT 1
10062: EQUAL
10063: AND
10064: PUSH
10065: LD_INT 22
10067: PUSH
10068: LD_INT 3
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 21
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PPUSH
10089: CALL_OW 69
10093: PUSH
10094: LD_INT 0
10096: EQUAL
10097: PUSH
10098: LD_EXP 1
10102: PPUSH
10103: CALL_OW 310
10107: PPUSH
10108: LD_EXP 3
10112: PPUSH
10113: CALL_OW 310
10117: PPUSH
10118: CALL_OW 296
10122: PUSH
10123: LD_INT 10
10125: LESS
10126: OR
10127: AND
10128: IFFALSE 10172
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10130: LD_INT 1
10132: PPUSH
10133: LD_STRING 14_JMMGirlStatus_1
10135: PPUSH
10136: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10140: LD_EXP 3
10144: PPUSH
10145: LD_STRING 14_Lisa
10147: PPUSH
10148: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10152: LD_STRING protect
10154: PPUSH
10155: LD_INT 1
10157: PPUSH
10158: CALL_OW 101
// m1 := true ;
10162: LD_ADDR_VAR 0 3
10166: PUSH
10167: LD_INT 1
10169: ST_TO_ADDR
// end else
10170: GO 10193
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10172: LD_INT 0
10174: PPUSH
10175: LD_STRING 14_JMMGirlStatus_1
10177: PPUSH
10178: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10182: LD_STRING protect
10184: PPUSH
10185: LD_INT 2
10187: NEG
10188: PPUSH
10189: CALL_OW 101
// end ; end ; 3 :
10193: GO 10360
10195: LD_INT 3
10197: DOUBLE
10198: EQUAL
10199: IFTRUE 10203
10201: GO 10359
10203: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10204: LD_EXP 4
10208: PPUSH
10209: CALL_OW 302
10213: PUSH
10214: LD_EXP 4
10218: PPUSH
10219: CALL_OW 255
10223: PUSH
10224: LD_INT 1
10226: EQUAL
10227: AND
10228: PUSH
10229: LD_INT 22
10231: PUSH
10232: LD_INT 3
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 21
10241: PUSH
10242: LD_INT 1
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PPUSH
10253: CALL_OW 69
10257: PUSH
10258: LD_INT 0
10260: EQUAL
10261: PUSH
10262: LD_EXP 1
10266: PPUSH
10267: CALL_OW 310
10271: PPUSH
10272: LD_EXP 4
10276: PPUSH
10277: CALL_OW 310
10281: PPUSH
10282: CALL_OW 296
10286: PUSH
10287: LD_INT 10
10289: LESS
10290: OR
10291: AND
10292: IFFALSE 10336
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10294: LD_INT 1
10296: PPUSH
10297: LD_STRING 14_JMMGirlStatus_1
10299: PPUSH
10300: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10304: LD_EXP 4
10308: PPUSH
10309: LD_STRING 14_Connie
10311: PPUSH
10312: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10316: LD_STRING protect
10318: PPUSH
10319: LD_INT 1
10321: PPUSH
10322: CALL_OW 101
// m1 := true ;
10326: LD_ADDR_VAR 0 3
10330: PUSH
10331: LD_INT 1
10333: ST_TO_ADDR
// end else
10334: GO 10357
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10336: LD_INT 0
10338: PPUSH
10339: LD_STRING 14_JMMGirlStatus_1
10341: PPUSH
10342: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10346: LD_STRING protect
10348: PPUSH
10349: LD_INT 3
10351: NEG
10352: PPUSH
10353: CALL_OW 101
// end ; end ; end ;
10357: GO 10360
10359: POP
// if amLaserCounter >= 2 then
10360: LD_EXP 9
10364: PUSH
10365: LD_INT 2
10367: GREATEREQUAL
10368: IFFALSE 10390
// begin AddMedal ( double , 1 ) ;
10370: LD_STRING double
10372: PPUSH
10373: LD_INT 1
10375: PPUSH
10376: CALL_OW 101
// m2 := true ;
10380: LD_ADDR_VAR 0 4
10384: PUSH
10385: LD_INT 1
10387: ST_TO_ADDR
// end else
10388: GO 10424
// begin if amLaserCounter = 1 then
10390: LD_EXP 9
10394: PUSH
10395: LD_INT 1
10397: EQUAL
10398: IFFALSE 10413
// AddMedal ( double , - 2 ) else
10400: LD_STRING double
10402: PPUSH
10403: LD_INT 2
10405: NEG
10406: PPUSH
10407: CALL_OW 101
10411: GO 10424
// AddMedal ( double , - 1 ) ;
10413: LD_STRING double
10415: PPUSH
10416: LD_INT 1
10418: NEG
10419: PPUSH
10420: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10424: LD_INT 22
10426: PUSH
10427: LD_INT 3
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: LD_INT 21
10436: PUSH
10437: LD_INT 1
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PPUSH
10448: CALL_OW 69
10452: PUSH
10453: LD_INT 0
10455: EQUAL
10456: IFFALSE 10478
// begin AddMedal ( base , 1 ) ;
10458: LD_STRING base
10460: PPUSH
10461: LD_INT 1
10463: PPUSH
10464: CALL_OW 101
// m3 := true ;
10468: LD_ADDR_VAR 0 5
10472: PUSH
10473: LD_INT 1
10475: ST_TO_ADDR
// end else
10476: GO 10489
// AddMedal ( base , - 1 ) ;
10478: LD_STRING base
10480: PPUSH
10481: LD_INT 1
10483: NEG
10484: PPUSH
10485: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10489: LD_VAR 0 3
10493: PUSH
10494: LD_VAR 0 4
10498: AND
10499: PUSH
10500: LD_VAR 0 5
10504: AND
10505: PUSH
10506: LD_OWVAR 67
10510: PUSH
10511: LD_INT 3
10513: EQUAL
10514: AND
10515: IFFALSE 10527
// SetAchievementEX ( ACH_AMER , 14 ) ;
10517: LD_STRING ACH_AMER
10519: PPUSH
10520: LD_INT 14
10522: PPUSH
10523: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10527: LD_STRING Eliminate
10529: PPUSH
10530: CALL_OW 102
// YouWin ;
10534: CALL_OW 103
// end ; end_of_file
10538: LD_VAR 0 1
10542: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10543: LD_EXP 1
10547: PPUSH
10548: CALL_OW 301
10552: IFFALSE 10564
10554: GO 10556
10556: DISABLE
// YouLost ( JMM ) ; end_of_file
10557: LD_STRING JMM
10559: PPUSH
10560: CALL_OW 104
10564: END
// every 1 1$0 do
10565: GO 10567
10567: DISABLE
// begin enable ;
10568: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10569: LD_INT 3
10571: PPUSH
10572: LD_INT 5
10574: PPUSH
10575: CALL_OW 12
10579: PPUSH
10580: LD_INT 13
10582: PPUSH
10583: LD_INT 1
10585: PPUSH
10586: CALL_OW 55
// end ; end_of_file
10590: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
10591: GO 10593
10593: DISABLE
// begin ru_radar := 98 ;
10594: LD_ADDR_EXP 18
10598: PUSH
10599: LD_INT 98
10601: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10602: LD_ADDR_EXP 19
10606: PUSH
10607: LD_INT 89
10609: ST_TO_ADDR
// us_hack := 99 ;
10610: LD_ADDR_EXP 20
10614: PUSH
10615: LD_INT 99
10617: ST_TO_ADDR
// us_artillery := 97 ;
10618: LD_ADDR_EXP 21
10622: PUSH
10623: LD_INT 97
10625: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10626: LD_ADDR_EXP 22
10630: PUSH
10631: LD_INT 91
10633: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
10634: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
10635: LD_INT 0
10637: PPUSH
10638: PPUSH
10639: PPUSH
10640: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10641: LD_VAR 0 1
10645: PPUSH
10646: CALL_OW 264
10650: PUSH
10651: LD_EXP 22
10655: EQUAL
10656: IFFALSE 10728
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10658: LD_INT 68
10660: PPUSH
10661: LD_VAR 0 1
10665: PPUSH
10666: CALL_OW 255
10670: PPUSH
10671: CALL_OW 321
10675: PUSH
10676: LD_INT 2
10678: EQUAL
10679: IFFALSE 10691
// eff := 70 else
10681: LD_ADDR_VAR 0 6
10685: PUSH
10686: LD_INT 70
10688: ST_TO_ADDR
10689: GO 10699
// eff := 30 ;
10691: LD_ADDR_VAR 0 6
10695: PUSH
10696: LD_INT 30
10698: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10699: LD_VAR 0 1
10703: PPUSH
10704: CALL_OW 250
10708: PPUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: CALL_OW 251
10718: PPUSH
10719: LD_VAR 0 6
10723: PPUSH
10724: CALL_OW 495
// end ; end ;
10728: LD_VAR 0 4
10732: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
10733: LD_INT 0
10735: PPUSH
10736: PPUSH
10737: PPUSH
10738: PPUSH
10739: PPUSH
10740: PPUSH
// if cmd = 124 then
10741: LD_VAR 0 1
10745: PUSH
10746: LD_INT 124
10748: EQUAL
10749: IFFALSE 10955
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
10751: LD_ADDR_VAR 0 5
10755: PUSH
10756: LD_INT 2
10758: PUSH
10759: LD_INT 34
10761: PUSH
10762: LD_INT 53
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 34
10771: PUSH
10772: LD_INT 14
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: PPUSH
10784: CALL_OW 69
10788: ST_TO_ADDR
// if not tmp then
10789: LD_VAR 0 5
10793: NOT
10794: IFFALSE 10798
// exit ;
10796: GO 10955
// for i in tmp do
10798: LD_ADDR_VAR 0 3
10802: PUSH
10803: LD_VAR 0 5
10807: PUSH
10808: FOR_IN
10809: IFFALSE 10953
// begin taskList := GetTaskList ( i ) ;
10811: LD_ADDR_VAR 0 6
10815: PUSH
10816: LD_VAR 0 3
10820: PPUSH
10821: CALL_OW 437
10825: ST_TO_ADDR
// if not taskList then
10826: LD_VAR 0 6
10830: NOT
10831: IFFALSE 10835
// continue ;
10833: GO 10808
// for j = 1 to taskList do
10835: LD_ADDR_VAR 0 4
10839: PUSH
10840: DOUBLE
10841: LD_INT 1
10843: DEC
10844: ST_TO_ADDR
10845: LD_VAR 0 6
10849: PUSH
10850: FOR_TO
10851: IFFALSE 10949
// if taskList [ j ] [ 1 ] = | then
10853: LD_VAR 0 6
10857: PUSH
10858: LD_VAR 0 4
10862: ARRAY
10863: PUSH
10864: LD_INT 1
10866: ARRAY
10867: PUSH
10868: LD_STRING |
10870: EQUAL
10871: IFFALSE 10947
// begin _taskList := Delete ( taskList , 1 ) ;
10873: LD_ADDR_VAR 0 7
10877: PUSH
10878: LD_VAR 0 6
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 3
10890: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
10891: LD_VAR 0 3
10895: PPUSH
10896: LD_VAR 0 7
10900: PPUSH
10901: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
10905: LD_VAR 0 3
10909: PPUSH
10910: LD_VAR 0 6
10914: PUSH
10915: LD_VAR 0 4
10919: ARRAY
10920: PUSH
10921: LD_INT 2
10923: ARRAY
10924: PPUSH
10925: LD_VAR 0 6
10929: PUSH
10930: LD_VAR 0 4
10934: ARRAY
10935: PUSH
10936: LD_INT 3
10938: ARRAY
10939: PPUSH
10940: LD_INT 8
10942: PPUSH
10943: CALL 10960 0 4
// end ;
10947: GO 10850
10949: POP
10950: POP
// end ;
10951: GO 10808
10953: POP
10954: POP
// end ; end ;
10955: LD_VAR 0 2
10959: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10960: LD_INT 0
10962: PPUSH
10963: PPUSH
10964: PPUSH
10965: PPUSH
10966: PPUSH
10967: PPUSH
10968: PPUSH
10969: PPUSH
10970: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
10971: LD_VAR 0 1
10975: NOT
10976: PUSH
10977: LD_VAR 0 2
10981: PPUSH
10982: LD_VAR 0 3
10986: PPUSH
10987: CALL_OW 488
10991: NOT
10992: OR
10993: PUSH
10994: LD_VAR 0 4
10998: NOT
10999: OR
11000: IFFALSE 11004
// exit ;
11002: GO 11344
// list := [ ] ;
11004: LD_ADDR_VAR 0 13
11008: PUSH
11009: EMPTY
11010: ST_TO_ADDR
// if x - r < 0 then
11011: LD_VAR 0 2
11015: PUSH
11016: LD_VAR 0 4
11020: MINUS
11021: PUSH
11022: LD_INT 0
11024: LESS
11025: IFFALSE 11037
// min_x := 0 else
11027: LD_ADDR_VAR 0 7
11031: PUSH
11032: LD_INT 0
11034: ST_TO_ADDR
11035: GO 11053
// min_x := x - r ;
11037: LD_ADDR_VAR 0 7
11041: PUSH
11042: LD_VAR 0 2
11046: PUSH
11047: LD_VAR 0 4
11051: MINUS
11052: ST_TO_ADDR
// if y - r < 0 then
11053: LD_VAR 0 3
11057: PUSH
11058: LD_VAR 0 4
11062: MINUS
11063: PUSH
11064: LD_INT 0
11066: LESS
11067: IFFALSE 11079
// min_y := 0 else
11069: LD_ADDR_VAR 0 8
11073: PUSH
11074: LD_INT 0
11076: ST_TO_ADDR
11077: GO 11095
// min_y := y - r ;
11079: LD_ADDR_VAR 0 8
11083: PUSH
11084: LD_VAR 0 3
11088: PUSH
11089: LD_VAR 0 4
11093: MINUS
11094: ST_TO_ADDR
// max_x := x + r ;
11095: LD_ADDR_VAR 0 9
11099: PUSH
11100: LD_VAR 0 2
11104: PUSH
11105: LD_VAR 0 4
11109: PLUS
11110: ST_TO_ADDR
// max_y := y + r ;
11111: LD_ADDR_VAR 0 10
11115: PUSH
11116: LD_VAR 0 3
11120: PUSH
11121: LD_VAR 0 4
11125: PLUS
11126: ST_TO_ADDR
// for _x = min_x to max_x do
11127: LD_ADDR_VAR 0 11
11131: PUSH
11132: DOUBLE
11133: LD_VAR 0 7
11137: DEC
11138: ST_TO_ADDR
11139: LD_VAR 0 9
11143: PUSH
11144: FOR_TO
11145: IFFALSE 11262
// for _y = min_y to max_y do
11147: LD_ADDR_VAR 0 12
11151: PUSH
11152: DOUBLE
11153: LD_VAR 0 8
11157: DEC
11158: ST_TO_ADDR
11159: LD_VAR 0 10
11163: PUSH
11164: FOR_TO
11165: IFFALSE 11258
// begin if not ValidHex ( _x , _y ) then
11167: LD_VAR 0 11
11171: PPUSH
11172: LD_VAR 0 12
11176: PPUSH
11177: CALL_OW 488
11181: NOT
11182: IFFALSE 11186
// continue ;
11184: GO 11164
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11186: LD_VAR 0 11
11190: PPUSH
11191: LD_VAR 0 12
11195: PPUSH
11196: CALL_OW 351
11200: PUSH
11201: LD_VAR 0 11
11205: PPUSH
11206: LD_VAR 0 12
11210: PPUSH
11211: CALL_OW 554
11215: AND
11216: IFFALSE 11256
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11218: LD_ADDR_VAR 0 13
11222: PUSH
11223: LD_VAR 0 13
11227: PPUSH
11228: LD_VAR 0 13
11232: PUSH
11233: LD_INT 1
11235: PLUS
11236: PPUSH
11237: LD_VAR 0 11
11241: PUSH
11242: LD_VAR 0 12
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PPUSH
11251: CALL_OW 2
11255: ST_TO_ADDR
// end ;
11256: GO 11164
11258: POP
11259: POP
11260: GO 11144
11262: POP
11263: POP
// if not list then
11264: LD_VAR 0 13
11268: NOT
11269: IFFALSE 11273
// exit ;
11271: GO 11344
// for i in list do
11273: LD_ADDR_VAR 0 6
11277: PUSH
11278: LD_VAR 0 13
11282: PUSH
11283: FOR_IN
11284: IFFALSE 11342
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11286: LD_VAR 0 1
11290: PPUSH
11291: LD_STRING M
11293: PUSH
11294: LD_VAR 0 6
11298: PUSH
11299: LD_INT 1
11301: ARRAY
11302: PUSH
11303: LD_VAR 0 6
11307: PUSH
11308: LD_INT 2
11310: ARRAY
11311: PUSH
11312: LD_INT 0
11314: PUSH
11315: LD_INT 0
11317: PUSH
11318: LD_INT 0
11320: PUSH
11321: LD_INT 0
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: PUSH
11333: EMPTY
11334: LIST
11335: PPUSH
11336: CALL_OW 447
11340: GO 11283
11342: POP
11343: POP
// end ;
11344: LD_VAR 0 5
11348: RET
