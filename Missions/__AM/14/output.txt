// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10844 0 0
// PrepareAmerican ;
  19: CALL 245 0 0
// PrepareRussian ;
  23: CALL 1529 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6486 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := false ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// end ;
 104: LD_VAR 0 1
 108: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 109: LD_INT 22
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: LD_INT 30
 121: PUSH
 122: LD_INT 33
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: PPUSH
 133: CALL_OW 69
 137: PUSH
 138: LD_INT 15
 140: GREATEREQUAL
 141: IFFALSE 153
 143: GO 145
 145: DISABLE
// SetAchievement ( ACH_FORT ) ;
 146: LD_STRING ACH_FORT
 148: PPUSH
 149: CALL_OW 543
 153: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 154: LD_INT 22
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 25
 166: PUSH
 167: LD_INT 12
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: PPUSH
 178: CALL_OW 69
 182: PUSH
 183: LD_INT 0
 185: EQUAL
 186: IFFALSE 198
 188: GO 190
 190: DISABLE
// SetAchievement ( ACH_APE ) ;
 191: LD_STRING ACH_APE
 193: PPUSH
 194: CALL_OW 543
 198: END
// every 0 0$1 trigger killCounter >= 20 do
 199: LD_EXP 5
 203: PUSH
 204: LD_INT 20
 206: GREATEREQUAL
 207: IFFALSE 219
 209: GO 211
 211: DISABLE
// SetAchievement ( ACH_DOUBLE ) ;
 212: LD_STRING ACH_DOUBLE
 214: PPUSH
 215: CALL_OW 543
 219: END
// every 0 0$1 trigger IsInArea ( JMMVeh , kappaBaseArea ) do
 220: LD_EXP 9
 224: PPUSH
 225: LD_INT 15
 227: PPUSH
 228: CALL_OW 308
 232: IFFALSE 244
 234: GO 236
 236: DISABLE
// SetAchievement ( ACH_AMASHA ) ; end_of_file
 237: LD_STRING ACH_AMASHA
 239: PPUSH
 240: CALL_OW 543
 244: END
// export JMM , JMMVeh , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 245: LD_INT 0
 247: PPUSH
 248: PPUSH
 249: PPUSH
 250: PPUSH
 251: PPUSH
// uc_side := 1 ;
 252: LD_ADDR_OWVAR 20
 256: PUSH
 257: LD_INT 1
 259: ST_TO_ADDR
// uc_nation := 1 ;
 260: LD_ADDR_OWVAR 21
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 268: LD_INT 48
 270: PPUSH
 271: LD_STRING deltakappa
 273: PPUSH
 274: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 278: LD_INT 48
 280: PPUSH
 281: CALL_OW 274
 285: PPUSH
 286: LD_INT 1
 288: PPUSH
 289: LD_INT 2000
 291: PUSH
 292: LD_INT 1600
 294: PUSH
 295: LD_INT 1200
 297: PUSH
 298: LD_INT 900
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: LIST
 305: LIST
 306: PUSH
 307: LD_OWVAR 67
 311: ARRAY
 312: PPUSH
 313: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 317: LD_INT 48
 319: PPUSH
 320: CALL_OW 274
 324: PPUSH
 325: LD_INT 2
 327: PPUSH
 328: LD_INT 20
 330: PPUSH
 331: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 335: LD_INT 48
 337: PPUSH
 338: CALL_OW 274
 342: PPUSH
 343: LD_INT 3
 345: PPUSH
 346: LD_INT 100
 348: PPUSH
 349: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 353: LD_ADDR_EXP 8
 357: PUSH
 358: LD_STRING JMM
 360: PPUSH
 361: LD_EXP 1
 365: NOT
 366: PPUSH
 367: LD_STRING 13f_
 369: PPUSH
 370: CALL 31949 0 3
 374: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 375: LD_EXP 8
 379: PPUSH
 380: LD_INT 1
 382: PPUSH
 383: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 387: LD_INT 5
 389: PUSH
 390: LD_INT 5
 392: PUSH
 393: LD_INT 3
 395: PUSH
 396: LD_INT 3
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: PUSH
 405: LD_OWVAR 67
 409: ARRAY
 410: PPUSH
 411: LD_INT 3
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: LD_INT 9
 419: PUSH
 420: LD_INT 9
 422: PUSH
 423: LD_INT 5
 425: PUSH
 426: LD_INT 5
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_OWVAR 67
 439: ARRAY
 440: PPUSH
 441: LD_INT 100
 443: PPUSH
 444: CALL 36789 0 5
// JMMVeh := CreateVehicle ;
 448: LD_ADDR_EXP 9
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// SetDir ( JMMVeh , 1 ) ;
 458: LD_EXP 9
 462: PPUSH
 463: LD_INT 1
 465: PPUSH
 466: CALL_OW 233
// PlaceUnitXY ( JMMVeh , 6 , 5 , false ) ;
 470: LD_EXP 9
 474: PPUSH
 475: LD_INT 6
 477: PPUSH
 478: LD_INT 5
 480: PPUSH
 481: LD_INT 0
 483: PPUSH
 484: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 488: LD_EXP 8
 492: PPUSH
 493: LD_EXP 9
 497: PPUSH
 498: CALL_OW 52
// SetMark ( JMMVeh , - 1 ) ;
 502: LD_EXP 9
 506: PPUSH
 507: LD_INT 1
 509: NEG
 510: PPUSH
 511: CALL_OW 242
// ComMoveXY ( JMMVeh , 21 , 8 ) ;
 515: LD_EXP 9
 519: PPUSH
 520: LD_INT 21
 522: PPUSH
 523: LD_INT 8
 525: PPUSH
 526: CALL_OW 111
// uc_side := 4 ;
 530: LD_ADDR_OWVAR 20
 534: PUSH
 535: LD_INT 4
 537: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 538: LD_ADDR_EXP 13
 542: PUSH
 543: LD_STRING Powell
 545: PPUSH
 546: LD_INT 0
 548: PPUSH
 549: LD_STRING 
 551: PPUSH
 552: CALL 31949 0 3
 556: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 557: LD_ADDR_EXP 10
 561: PUSH
 562: LD_STRING Joan
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_STRING 10c_
 573: PPUSH
 574: CALL 31949 0 3
 578: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 579: LD_ADDR_EXP 11
 583: PUSH
 584: LD_STRING Lisa
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_STRING 13s_
 595: PPUSH
 596: CALL 31949 0 3
 600: ST_TO_ADDR
// if Joan then
 601: LD_EXP 10
 605: IFFALSE 644
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 607: LD_EXP 10
 611: PPUSH
 612: LD_INT 4
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 622: LD_EXP 10
 626: PPUSH
 627: LD_INT 4
 629: PPUSH
 630: CALL_OW 336
// JMMGirl = 1 ;
 634: LD_ADDR_EXP 2
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// end else
 642: GO 735
// if Lisa then
 644: LD_EXP 11
 648: IFFALSE 687
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 650: LD_EXP 11
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_INT 0
 660: PPUSH
 661: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 665: LD_EXP 11
 669: PPUSH
 670: LD_INT 1
 672: PPUSH
 673: CALL_OW 336
// JMMGirl := 2 ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_INT 2
 684: ST_TO_ADDR
// end else
 685: GO 735
// begin Connie := NewCharacter ( Coonie ) ;
 687: LD_ADDR_EXP 12
 691: PUSH
 692: LD_STRING Coonie
 694: PPUSH
 695: CALL_OW 25
 699: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 700: LD_EXP 12
 704: PPUSH
 705: LD_INT 4
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 715: LD_EXP 12
 719: PPUSH
 720: LD_INT 3
 722: PPUSH
 723: CALL_OW 336
// JMMGirl := 3 ;
 727: LD_ADDR_EXP 2
 731: PUSH
 732: LD_INT 3
 734: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 735: LD_ADDR_VAR 0 2
 739: PUSH
 740: DOUBLE
 741: LD_INT 1
 743: DEC
 744: ST_TO_ADDR
 745: LD_INT 4
 747: PUSH
 748: LD_INT 3
 750: PUSH
 751: LD_INT 3
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: PUSH
 763: LD_OWVAR 67
 767: ARRAY
 768: PUSH
 769: FOR_TO
 770: IFFALSE 924
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 772: LD_INT 4
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: LD_INT 2
 780: PUSH
 781: LD_INT 3
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 4
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: LD_INT 9
 812: PUSH
 813: LD_INT 7
 815: PUSH
 816: LD_INT 4
 818: PUSH
 819: LD_INT 5
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: PUSH
 828: LD_VAR 0 2
 832: PUSH
 833: LD_INT 4
 835: MOD
 836: PUSH
 837: LD_INT 1
 839: PLUS
 840: ARRAY
 841: PPUSH
 842: LD_INT 33
 844: PPUSH
 845: LD_INT 55
 847: PPUSH
 848: CALL_OW 12
 852: PPUSH
 853: CALL 36789 0 5
// veh := CreateVehicle ;
 857: LD_ADDR_VAR 0 4
 861: PUSH
 862: CALL_OW 45
 866: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 867: LD_VAR 0 4
 871: PPUSH
 872: LD_INT 0
 874: PPUSH
 875: LD_INT 5
 877: PPUSH
 878: CALL_OW 12
 882: PPUSH
 883: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 887: LD_VAR 0 4
 891: PPUSH
 892: LD_INT 500
 894: PPUSH
 895: LD_INT 950
 897: PPUSH
 898: CALL_OW 12
 902: PPUSH
 903: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 907: LD_VAR 0 4
 911: PPUSH
 912: LD_INT 5
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// end ;
 922: GO 769
 924: POP
 925: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: DOUBLE
 932: LD_INT 1
 934: DEC
 935: ST_TO_ADDR
 936: LD_INT 3
 938: PUSH
 939: LD_INT 3
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: LD_INT 2
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_OWVAR 67
 958: ARRAY
 959: PUSH
 960: FOR_TO
 961: IFFALSE 1083
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 963: LD_INT 3
 965: PUSH
 966: LD_INT 2
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 2
 980: MOD
 981: PUSH
 982: LD_INT 1
 984: PLUS
 985: ARRAY
 986: PPUSH
 987: LD_INT 1
 989: PPUSH
 990: LD_INT 3
 992: PPUSH
 993: LD_INT 9
 995: PUSH
 996: LD_INT 5
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PUSH
1003: LD_VAR 0 2
1007: PUSH
1008: LD_INT 2
1010: MOD
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: ARRAY
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 36789 0 5
// veh := CreateVehicle ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: CALL_OW 45
1033: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1034: LD_VAR 0 4
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: LD_INT 5
1044: PPUSH
1045: CALL_OW 12
1049: PPUSH
1050: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1054: LD_VAR 0 4
1058: PPUSH
1059: LD_INT 1000
1061: PPUSH
1062: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1066: LD_VAR 0 4
1070: PPUSH
1071: LD_INT 17
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 960
1083: POP
1084: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_INT 3
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_OWVAR 67
1117: ARRAY
1118: PUSH
1119: FOR_TO
1120: IFFALSE 1168
// begin PrepareApeman ( 1 ) ;
1122: LD_INT 1
1124: PPUSH
1125: CALL 65919 0 1
// uc_side := 4 ;
1129: LD_ADDR_OWVAR 20
1133: PUSH
1134: LD_INT 4
1136: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1137: LD_ADDR_OWVAR 28
1141: PUSH
1142: LD_INT 16
1144: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1145: CALL_OW 44
1149: PPUSH
1150: LD_INT 84
1152: PPUSH
1153: LD_INT 127
1155: PPUSH
1156: LD_INT 5
1158: PPUSH
1159: LD_INT 0
1161: PPUSH
1162: CALL_OW 50
// end ;
1166: GO 1119
1168: POP
1169: POP
// uc_side := 4 ;
1170: LD_ADDR_OWVAR 20
1174: PUSH
1175: LD_INT 4
1177: ST_TO_ADDR
// uc_nation := 1 ;
1178: LD_ADDR_OWVAR 21
1182: PUSH
1183: LD_INT 1
1185: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1186: LD_INT 2
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 1
1194: PPUSH
1195: LD_INT 12
1197: PPUSH
1198: LD_INT 100
1200: PPUSH
1201: CALL 36789 0 5
// veh := CreateVehicle ;
1205: LD_ADDR_VAR 0 4
1209: PUSH
1210: CALL_OW 45
1214: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1215: LD_VAR 0 4
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: LD_INT 100
1225: PPUSH
1226: CALL_OW 290
// SetLives ( veh , 450 ) ;
1230: LD_VAR 0 4
1234: PPUSH
1235: LD_INT 450
1237: PPUSH
1238: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1242: LD_VAR 0 4
1246: PPUSH
1247: LD_INT 122
1249: PPUSH
1250: LD_INT 118
1252: PPUSH
1253: LD_INT 4
1255: PPUSH
1256: LD_INT 0
1258: PPUSH
1259: CALL 71791 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1276: CALL_OW 44
1280: PPUSH
1281: LD_INT 124
1283: PPUSH
1284: LD_INT 120
1286: PPUSH
1287: LD_INT 1
1289: PPUSH
1290: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_INT 18
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 517
1309: ST_TO_ADDR
// for i := 1 to 4 do
1310: LD_ADDR_VAR 0 2
1314: PUSH
1315: DOUBLE
1316: LD_INT 1
1318: DEC
1319: ST_TO_ADDR
1320: LD_INT 4
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1432
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1326: LD_INT 1
1328: PPUSH
1329: LD_INT 1
1331: PUSH
1332: LD_INT 3
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 1
1341: PPUSH
1342: LD_INT 2
1344: PPUSH
1345: CALL_OW 12
1349: ARRAY
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 380
// un := CreateHuman ;
1358: LD_ADDR_VAR 0 3
1362: PUSH
1363: CALL_OW 44
1367: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1368: LD_VAR 0 3
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 5
1378: PPUSH
1379: CALL_OW 12
1383: PPUSH
1384: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1388: LD_VAR 0 3
1392: PPUSH
1393: LD_VAR 0 5
1397: PUSH
1398: LD_INT 1
1400: ARRAY
1401: PUSH
1402: LD_VAR 0 2
1406: ARRAY
1407: PPUSH
1408: LD_VAR 0 5
1412: PUSH
1413: LD_INT 2
1415: ARRAY
1416: PUSH
1417: LD_VAR 0 2
1421: ARRAY
1422: PPUSH
1423: LD_INT 1
1425: PPUSH
1426: CALL_OW 601
// end ;
1430: GO 1323
1432: POP
1433: POP
// end ;
1434: LD_VAR 0 1
1438: RET
// export function ChangeSideKappaBase ; begin
1439: LD_INT 0
1441: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1442: LD_INT 70
1444: PPUSH
1445: LD_INT 138
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: LD_INT 80
1453: NEG
1454: PPUSH
1455: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1459: LD_INT 70
1461: PPUSH
1462: LD_INT 138
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1472: LD_INT 147
1474: PPUSH
1475: LD_INT 122
1477: PPUSH
1478: LD_INT 1
1480: PPUSH
1481: LD_INT 40
1483: NEG
1484: PPUSH
1485: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1489: LD_INT 147
1491: PPUSH
1492: LD_INT 122
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1502: LD_INT 22
1504: PUSH
1505: LD_INT 4
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: PPUSH
1517: LD_INT 1
1519: PPUSH
1520: CALL_OW 235
// end ; end_of_file
1524: LD_VAR 0 1
1528: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1529: LD_INT 0
1531: PPUSH
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side := 3 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 3
1544: ST_TO_ADDR
// uc_nation := 3 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1553: LD_ADDR_EXP 15
1557: PUSH
1558: LD_INT 8
1560: PUSH
1561: LD_INT 11
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: LD_INT 17
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_OWVAR 67
1580: ARRAY
1581: ST_TO_ADDR
// ruMobile := [ ] ;
1582: LD_ADDR_EXP 16
1586: PUSH
1587: EMPTY
1588: ST_TO_ADDR
// ruBuildList := [ ] ;
1589: LD_ADDR_EXP 17
1593: PUSH
1594: EMPTY
1595: ST_TO_ADDR
// ruAttackers := [ ] ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: EMPTY
1602: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1603: LD_ADDR_EXP 19
1607: PUSH
1608: LD_INT 3
1610: PPUSH
1611: LD_INT 3
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: CALL 32012 0 3
1621: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1622: LD_ADDR_VAR 0 6
1626: PUSH
1627: LD_INT 43
1629: PUSH
1630: LD_INT 46
1632: PUSH
1633: LD_INT 45
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1641: LD_ADDR_EXP 20
1645: PUSH
1646: LD_INT 46
1648: PUSH
1649: LD_INT 70
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 121
1658: PUSH
1659: LD_INT 95
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 68
1668: PUSH
1669: LD_INT 65
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: ST_TO_ADDR
// if not russianRocketsDisabled then
1681: LD_EXP 6
1685: NOT
1686: IFFALSE 1702
// weapons := weapons ^ ru_rocket ;
1688: LD_ADDR_VAR 0 6
1692: PUSH
1693: LD_VAR 0 6
1697: PUSH
1698: LD_INT 47
1700: ADD
1701: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1702: LD_ADDR_EXP 14
1706: PUSH
1707: LD_STRING Eisenstein
1709: PPUSH
1710: CALL_OW 25
1714: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1715: LD_EXP 14
1719: PPUSH
1720: LD_INT 22
1722: PPUSH
1723: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 1250 , 2500 , 3500 , 5000 ] [ Difficulty ] ) ;
1727: LD_INT 22
1729: PPUSH
1730: CALL_OW 274
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 1250
1740: PUSH
1741: LD_INT 2500
1743: PUSH
1744: LD_INT 3500
1746: PUSH
1747: LD_INT 5000
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_OWVAR 67
1760: ARRAY
1761: PPUSH
1762: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1766: LD_INT 22
1768: PPUSH
1769: CALL_OW 274
1773: PPUSH
1774: LD_INT 2
1776: PPUSH
1777: LD_INT 600
1779: PPUSH
1780: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1784: LD_INT 22
1786: PPUSH
1787: CALL_OW 274
1791: PPUSH
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 100
1797: PPUSH
1798: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1802: LD_INT 116
1804: PPUSH
1805: LD_INT 46
1807: PPUSH
1808: LD_INT 70
1810: PPUSH
1811: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1815: LD_ADDR_VAR 0 2
1819: PUSH
1820: LD_INT 22
1822: PUSH
1823: LD_INT 3
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 21
1832: PUSH
1833: LD_INT 3
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PPUSH
1844: CALL_OW 69
1848: PUSH
1849: FOR_IN
1850: IFFALSE 1872
// SetBLevel ( i , 6 + Difficulty ) ;
1852: LD_VAR 0 2
1856: PPUSH
1857: LD_INT 6
1859: PUSH
1860: LD_OWVAR 67
1864: PLUS
1865: PPUSH
1866: CALL_OW 241
1870: GO 1849
1872: POP
1873: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: LD_INT 22
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 30
1894: PUSH
1895: LD_INT 32
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 30
1904: PUSH
1905: LD_INT 33
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: ST_TO_ADDR
// if russianRocketsDisabled then
1926: LD_EXP 6
1930: IFFALSE 2006
// begin ruTechList := ruTechList diff tech_advrocket ;
1932: LD_ADDR_EXP 19
1936: PUSH
1937: LD_EXP 19
1941: PUSH
1942: LD_INT 71
1944: DIFF
1945: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1946: LD_ADDR_VAR 0 2
1950: PUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 35
1958: PUSH
1959: LD_INT 47
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PPUSH
1966: CALL_OW 72
1970: PUSH
1971: FOR_IN
1972: IFFALSE 2004
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_VAR 0 6
1983: PUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_VAR 0 6
1991: PPUSH
1992: CALL_OW 12
1996: ARRAY
1997: PPUSH
1998: CALL_OW 431
2002: GO 1971
2004: POP
2005: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2006: LD_ADDR_VAR 0 2
2010: PUSH
2011: LD_INT 22
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 30
2023: PUSH
2024: LD_INT 32
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PPUSH
2035: CALL_OW 69
2039: PUSH
2040: FOR_IN
2041: IFFALSE 2090
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2043: LD_INT 0
2045: PPUSH
2046: LD_INT 5
2048: PUSH
2049: LD_INT 6
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: LD_INT 8
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: LD_OWVAR 67
2068: ARRAY
2069: PPUSH
2070: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2074: CALL_OW 44
2078: PPUSH
2079: LD_VAR 0 2
2083: PPUSH
2084: CALL_OW 52
// end ;
2088: GO 2040
2090: POP
2091: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2092: LD_ADDR_VAR 0 2
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 3
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 69
2125: PUSH
2126: FOR_IN
2127: IFFALSE 2261
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: DOUBLE
2135: LD_INT 1
2137: DEC
2138: ST_TO_ADDR
2139: LD_INT 2
2141: PUSH
2142: LD_INT 2
2144: PUSH
2145: LD_INT 3
2147: PUSH
2148: LD_INT 3
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: PUSH
2157: LD_OWVAR 67
2161: ARRAY
2162: PUSH
2163: FOR_TO
2164: IFFALSE 2257
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2166: LD_INT 0
2168: PPUSH
2169: LD_INT 5
2171: PUSH
2172: LD_INT 6
2174: PUSH
2175: LD_INT 7
2177: PUSH
2178: LD_INT 8
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_OWVAR 67
2191: ARRAY
2192: PPUSH
2193: CALL_OW 381
// un := CreateHuman ;
2197: LD_ADDR_VAR 0 5
2201: PUSH
2202: CALL_OW 44
2206: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2207: LD_VAR 0 5
2211: PPUSH
2212: LD_VAR 0 2
2216: PPUSH
2217: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_INT 9
2228: PPUSH
2229: CALL_OW 336
// if j = 2 then
2233: LD_VAR 0 3
2237: PUSH
2238: LD_INT 2
2240: EQUAL
2241: IFFALSE 2255
// SetUnitAttackType ( un , 3 ) ;
2243: LD_VAR 0 5
2247: PPUSH
2248: LD_INT 3
2250: PPUSH
2251: CALL_OW 603
// end ;
2255: GO 2163
2257: POP
2258: POP
// end ;
2259: GO 2126
2261: POP
2262: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2263: LD_ADDR_VAR 0 2
2267: PUSH
2268: DOUBLE
2269: LD_INT 1
2271: DEC
2272: ST_TO_ADDR
2273: LD_INT 5
2275: PUSH
2276: LD_INT 6
2278: PUSH
2279: LD_INT 6
2281: PUSH
2282: LD_INT 6
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_OWVAR 67
2295: ARRAY
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2345
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2300: LD_INT 0
2302: PPUSH
2303: LD_INT 6
2305: PUSH
2306: LD_INT 7
2308: PUSH
2309: LD_INT 9
2311: PUSH
2312: LD_INT 10
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: PUSH
2321: LD_OWVAR 67
2325: ARRAY
2326: PPUSH
2327: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2331: CALL_OW 44
2335: PPUSH
2336: LD_INT 22
2338: PPUSH
2339: CALL_OW 52
// end ;
2343: GO 2297
2345: POP
2346: POP
// for i := 1 to 2 do
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: DOUBLE
2353: LD_INT 1
2355: DEC
2356: ST_TO_ADDR
2357: LD_INT 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2441
// for j := 1 to 6 do
2363: LD_ADDR_VAR 0 3
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_INT 6
2375: PUSH
2376: FOR_TO
2377: IFFALSE 2437
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2379: LD_INT 0
2381: PPUSH
2382: LD_INT 6
2384: PUSH
2385: LD_INT 7
2387: PUSH
2388: LD_INT 9
2390: PUSH
2391: LD_INT 10
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: PUSH
2400: LD_OWVAR 67
2404: ARRAY
2405: PPUSH
2406: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2410: CALL_OW 44
2414: PPUSH
2415: LD_INT 1
2417: PUSH
2418: LD_INT 40
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: LD_VAR 0 2
2429: ARRAY
2430: PPUSH
2431: CALL_OW 52
// end ;
2435: GO 2376
2437: POP
2438: POP
2439: GO 2360
2441: POP
2442: POP
// for i := 1 to 4 do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: DOUBLE
2449: LD_INT 1
2451: DEC
2452: ST_TO_ADDR
2453: LD_INT 4
2455: PUSH
2456: FOR_TO
2457: IFFALSE 2504
// begin PrepareScientist ( false , 6 ) ;
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 6
2464: PPUSH
2465: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2469: CALL_OW 44
2473: PPUSH
2474: LD_INT 14
2476: PUSH
2477: LD_INT 15
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 2
2491: MOD
2492: PUSH
2493: LD_INT 1
2495: PLUS
2496: ARRAY
2497: PPUSH
2498: CALL_OW 52
// end ;
2502: GO 2456
2504: POP
2505: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2506: LD_INT 22
2508: PPUSH
2509: LD_INT 3
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: LD_INT 51
2517: PPUSH
2518: LD_INT 100
2520: PPUSH
2521: CALL 36789 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2525: CALL_OW 45
2529: PPUSH
2530: LD_INT 116
2532: PPUSH
2533: LD_INT 58
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: CALL_OW 50
// for i := 1 to 2 do
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: DOUBLE
2552: LD_INT 1
2554: DEC
2555: ST_TO_ADDR
2556: LD_INT 2
2558: PUSH
2559: FOR_TO
2560: IFFALSE 2604
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2562: LD_INT 22
2564: PPUSH
2565: LD_INT 3
2567: PPUSH
2568: LD_INT 3
2570: PPUSH
2571: LD_INT 52
2573: PPUSH
2574: LD_INT 100
2576: PPUSH
2577: CALL 36789 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2581: CALL_OW 45
2585: PPUSH
2586: LD_INT 111
2588: PPUSH
2589: LD_INT 58
2591: PPUSH
2592: LD_INT 4
2594: PPUSH
2595: LD_INT 0
2597: PPUSH
2598: CALL_OW 50
// end ;
2602: GO 2559
2604: POP
2605: POP
// for i := 1 to 4 do
2606: LD_ADDR_VAR 0 2
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_INT 4
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2649
// begin PrepareApemanEngineer ( ) ;
2622: CALL 65840 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2626: CALL_OW 44
2630: PPUSH
2631: LD_INT 118
2633: PPUSH
2634: LD_INT 50
2636: PPUSH
2637: LD_INT 3
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: CALL_OW 50
// end ;
2647: GO 2619
2649: POP
2650: POP
// end ;
2651: LD_VAR 0 1
2655: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2656: LD_EXP 19
2660: IFFALSE 2788
2662: GO 2664
2664: DISABLE
2665: LD_INT 0
2667: PPUSH
2668: PPUSH
2669: PPUSH
// begin enable ;
2670: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: LD_INT 14
2678: PUSH
2679: LD_INT 15
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PPUSH
2686: LD_INT 50
2688: PUSH
2689: EMPTY
2690: LIST
2691: PPUSH
2692: CALL_OW 72
2696: ST_TO_ADDR
// if not labs then
2697: LD_VAR 0 3
2701: NOT
2702: IFFALSE 2707
// begin disable ;
2704: DISABLE
// exit ;
2705: GO 2788
// end ; for i in labs do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_VAR 0 3
2716: PUSH
2717: FOR_IN
2718: IFFALSE 2786
// if BuildingStatus ( i ) = bs_idle then
2720: LD_VAR 0 1
2724: PPUSH
2725: CALL_OW 461
2729: PUSH
2730: LD_INT 2
2732: EQUAL
2733: IFFALSE 2784
// for t in ruTechList do
2735: LD_ADDR_VAR 0 2
2739: PUSH
2740: LD_EXP 19
2744: PUSH
2745: FOR_IN
2746: IFFALSE 2782
// if CanBeResearched ( i , t ) then
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL_OW 430
2762: IFFALSE 2780
// begin ComResearch ( i , t ) ;
2764: LD_VAR 0 1
2768: PPUSH
2769: LD_VAR 0 2
2773: PPUSH
2774: CALL_OW 124
// break ;
2778: GO 2782
// end ;
2780: GO 2745
2782: POP
2783: POP
2784: GO 2717
2786: POP
2787: POP
// end ;
2788: PPOPN 3
2790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2791: LD_INT 3
2793: PUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 1
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: EMPTY
2805: LIST
2806: LIST
2807: PUSH
2808: LD_INT 32
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PPUSH
2822: CALL_OW 69
2826: IFFALSE 2910
2828: GO 2830
2830: DISABLE
2831: LD_INT 0
2833: PPUSH
// begin enable ;
2834: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2835: LD_ADDR_VAR 0 1
2839: PUSH
2840: LD_INT 3
2842: PUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 1
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 32
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PPUSH
2871: CALL_OW 69
2875: PUSH
2876: FOR_IN
2877: IFFALSE 2908
// if GetFuel ( i ) < 3 then
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL_OW 261
2888: PUSH
2889: LD_INT 3
2891: LESS
2892: IFFALSE 2906
// SetFuel ( i , 3 ) ;
2894: LD_VAR 0 1
2898: PPUSH
2899: LD_INT 3
2901: PPUSH
2902: CALL_OW 240
2906: GO 2876
2908: POP
2909: POP
// end ;
2910: PPOPN 1
2912: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ [ f_not , [ f_full ] ] , [ f_ok ] ] ) and ruAttackers < [ 6 , 8 , 10 , 12 ] [ Difficulty ] do var i , chassis , weapon ;
2913: LD_INT 1
2915: PUSH
2916: LD_INT 40
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PPUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 62
2928: PUSH
2929: EMPTY
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: LD_INT 50
2938: PUSH
2939: EMPTY
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PPUSH
2946: CALL_OW 72
2950: PUSH
2951: LD_EXP 18
2955: PUSH
2956: LD_INT 6
2958: PUSH
2959: LD_INT 8
2961: PUSH
2962: LD_INT 10
2964: PUSH
2965: LD_INT 12
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: PUSH
2974: LD_OWVAR 67
2978: ARRAY
2979: LESS
2980: AND
2981: IFFALSE 3318
2983: GO 2985
2985: DISABLE
2986: LD_INT 0
2988: PPUSH
2989: PPUSH
2990: PPUSH
// begin enable ;
2991: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
2992: LD_ADDR_VAR 0 1
2996: PUSH
2997: LD_INT 1
2999: PUSH
3000: LD_INT 40
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PPUSH
3007: LD_INT 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: PPUSH
3013: CALL_OW 72
3017: PUSH
3018: FOR_IN
3019: IFFALSE 3316
// begin if BuildingStatus ( i ) <> bs_idle then
3021: LD_VAR 0 1
3025: PPUSH
3026: CALL_OW 461
3030: PUSH
3031: LD_INT 2
3033: NONEQUAL
3034: IFFALSE 3038
// continue ;
3036: GO 3018
// if i = ruFac1 then
3038: LD_VAR 0 1
3042: PUSH
3043: LD_INT 1
3045: EQUAL
3046: IFFALSE 3089
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3048: LD_ADDR_VAR 0 2
3052: PUSH
3053: LD_INT 21
3055: PUSH
3056: LD_INT 22
3058: PUSH
3059: LD_INT 23
3061: PUSH
3062: LD_INT 23
3064: PUSH
3065: LD_INT 24
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: PUSH
3075: LD_INT 1
3077: PPUSH
3078: LD_INT 5
3080: PPUSH
3081: CALL_OW 12
3085: ARRAY
3086: ST_TO_ADDR
3087: GO 3116
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: LD_INT 21
3096: PUSH
3097: LD_INT 23
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 2
3109: PPUSH
3110: CALL_OW 12
3114: ARRAY
3115: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_INT 49
3123: PUSH
3124: LD_INT 44
3126: PUSH
3127: LD_INT 43
3129: PUSH
3130: LD_INT 46
3132: PUSH
3133: LD_INT 45
3135: PUSH
3136: LD_INT 46
3138: PUSH
3139: LD_INT 45
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: ST_TO_ADDR
// if not russianRocketsDisabled then
3151: LD_EXP 6
3155: NOT
3156: IFFALSE 3176
// weapon := Join ( weapon , ru_rocket ) ;
3158: LD_ADDR_VAR 0 3
3162: PUSH
3163: LD_VAR 0 3
3167: PPUSH
3168: LD_INT 47
3170: PPUSH
3171: CALL 69651 0 2
3175: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , Count ( weapon ) ) ] ;
3176: LD_ADDR_VAR 0 3
3180: PUSH
3181: LD_VAR 0 3
3185: PUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_VAR 0 3
3193: PPUSH
3194: CALL 34051 0 1
3198: PPUSH
3199: CALL_OW 12
3203: ARRAY
3204: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3205: LD_VAR 0 2
3209: PUSH
3210: LD_INT 21
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: IN
3220: PUSH
3221: LD_VAR 0 3
3225: PUSH
3226: LD_INT 46
3228: PUSH
3229: LD_INT 47
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: IN
3236: AND
3237: IFFALSE 3270
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3239: LD_ADDR_VAR 0 3
3243: PUSH
3244: LD_INT 44
3246: PUSH
3247: LD_INT 45
3249: PUSH
3250: LD_INT 49
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 1
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: CALL_OW 12
3268: ARRAY
3269: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3270: LD_VAR 0 1
3274: PPUSH
3275: LD_VAR 0 2
3279: PPUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 3
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 2
3295: PPUSH
3296: CALL_OW 12
3300: ARRAY
3301: PPUSH
3302: LD_INT 3
3304: PPUSH
3305: LD_VAR 0 3
3309: PPUSH
3310: CALL_OW 185
// end ;
3314: GO 3018
3316: POP
3317: POP
// end ;
3318: PPOPN 3
3320: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3321: LD_INT 22
3323: PPUSH
3324: CALL_OW 302
3328: IFFALSE 4185
3330: GO 3332
3332: DISABLE
3333: LD_INT 0
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
3339: PPUSH
3340: PPUSH
3341: PPUSH
3342: PPUSH
// begin enable ;
3343: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3344: LD_ADDR_VAR 0 3
3348: PUSH
3349: LD_INT 12
3351: PPUSH
3352: LD_INT 3
3354: PUSH
3355: LD_INT 24
3357: PUSH
3358: LD_INT 1000
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 21
3371: PUSH
3372: LD_INT 3
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 70
3387: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3388: LD_ADDR_VAR 0 4
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 25
3405: PUSH
3406: LD_INT 2
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 69
3421: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3422: LD_ADDR_VAR 0 5
3426: PUSH
3427: LD_INT 22
3429: PUSH
3430: LD_INT 3
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 34
3439: PUSH
3440: LD_INT 52
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3456: LD_ADDR_VAR 0 7
3460: PUSH
3461: LD_INT 22
3463: PUSH
3464: LD_INT 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 25
3473: PUSH
3474: LD_INT 4
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3490: LD_ADDR_VAR 0 8
3494: PUSH
3495: LD_INT 14
3497: PUSH
3498: LD_INT 15
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3505: LD_VAR 0 7
3509: PUSH
3510: LD_VAR 0 4
3514: PPUSH
3515: LD_INT 120
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PPUSH
3525: CALL_OW 72
3529: AND
3530: IFFALSE 3543
// ComExitAll ( sci ) else
3532: LD_VAR 0 7
3536: PPUSH
3537: CALL 70132 0 1
3541: GO 3625
// if sci then
3543: LD_VAR 0 7
3547: IFFALSE 3625
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3549: LD_VAR 0 7
3553: PPUSH
3554: LD_INT 3
3556: PUSH
3557: LD_INT 54
3559: PUSH
3560: EMPTY
3561: LIST
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: PPUSH
3567: CALL_OW 72
3571: PUSH
3572: LD_VAR 0 8
3576: AND
3577: IFFALSE 3625
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3579: LD_VAR 0 7
3583: PPUSH
3584: LD_INT 3
3586: PUSH
3587: LD_INT 54
3589: PUSH
3590: EMPTY
3591: LIST
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PPUSH
3597: CALL_OW 72
3601: PPUSH
3602: LD_VAR 0 8
3606: PUSH
3607: LD_INT 1
3609: PPUSH
3610: LD_VAR 0 8
3614: PPUSH
3615: CALL_OW 12
3619: ARRAY
3620: PPUSH
3621: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3625: LD_VAR 0 5
3629: PPUSH
3630: LD_INT 50
3632: PUSH
3633: EMPTY
3634: LIST
3635: PPUSH
3636: CALL_OW 72
3640: PUSH
3641: LD_VAR 0 3
3645: AND
3646: IFFALSE 3687
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3648: LD_VAR 0 5
3652: PPUSH
3653: LD_INT 50
3655: PUSH
3656: EMPTY
3657: LIST
3658: PPUSH
3659: CALL_OW 72
3663: PPUSH
3664: LD_VAR 0 3
3668: PPUSH
3669: LD_VAR 0 5
3673: PUSH
3674: LD_INT 1
3676: ARRAY
3677: PPUSH
3678: CALL_OW 74
3682: PPUSH
3683: CALL_OW 130
// if eng then
3687: LD_VAR 0 4
3691: IFFALSE 4185
// begin for i in eng do
3693: LD_ADDR_VAR 0 1
3697: PUSH
3698: LD_VAR 0 4
3702: PUSH
3703: FOR_IN
3704: IFFALSE 4183
// begin tag := GetTag ( i ) ;
3706: LD_ADDR_VAR 0 6
3710: PUSH
3711: LD_VAR 0 1
3715: PPUSH
3716: CALL_OW 110
3720: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3721: LD_VAR 0 3
3725: NOT
3726: PUSH
3727: LD_EXP 17
3731: NOT
3732: AND
3733: PUSH
3734: LD_VAR 0 6
3738: PUSH
3739: LD_INT 1
3741: EQUAL
3742: AND
3743: IFFALSE 3769
// begin SetTag ( i , 0 ) ;
3745: LD_VAR 0 1
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3757: LD_VAR 0 1
3761: PPUSH
3762: LD_INT 22
3764: PPUSH
3765: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3769: LD_VAR 0 3
3773: PUSH
3774: LD_EXP 17
3778: OR
3779: PUSH
3780: LD_VAR 0 6
3784: PUSH
3785: LD_INT 0
3787: EQUAL
3788: AND
3789: IFFALSE 3803
// SetTag ( i , 1 ) ;
3791: LD_VAR 0 1
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 310
3812: PUSH
3813: LD_VAR 0 6
3817: PUSH
3818: LD_INT 1
3820: EQUAL
3821: AND
3822: IFFALSE 3833
// ComExit ( i ) ;
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL 70049 0 1
// if GetLives ( i ) < 700 and tag = 1 then
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 256
3842: PUSH
3843: LD_INT 700
3845: LESS
3846: PUSH
3847: LD_VAR 0 6
3851: PUSH
3852: LD_INT 1
3854: EQUAL
3855: AND
3856: IFFALSE 3870
// SetTag ( i , 2 ) ;
3858: LD_VAR 0 1
3862: PPUSH
3863: LD_INT 2
3865: PPUSH
3866: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 256
3879: PUSH
3880: LD_INT 1000
3882: EQUAL
3883: PUSH
3884: LD_VAR 0 6
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: AND
3893: IFFALSE 3907
// SetTag ( i , 1 ) ;
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 109
// if tag = 2 then
3907: LD_VAR 0 6
3911: PUSH
3912: LD_INT 2
3914: EQUAL
3915: IFFALSE 3962
// begin if GetDistUnitXY ( i , 110 , 41 ) > 6 then
3917: LD_VAR 0 1
3921: PPUSH
3922: LD_INT 110
3924: PPUSH
3925: LD_INT 41
3927: PPUSH
3928: CALL_OW 297
3932: PUSH
3933: LD_INT 6
3935: GREATER
3936: IFFALSE 3962
// begin ComMoveXY ( i , 110 , 41 ) ;
3938: LD_VAR 0 1
3942: PPUSH
3943: LD_INT 110
3945: PPUSH
3946: LD_INT 41
3948: PPUSH
3949: CALL_OW 111
// AddComHold ( i ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 11
3969: PPUSH
3970: CALL_OW 308
3974: IFFALSE 3988
// ComMoveToArea ( i , ruBaseArea ) ;
3976: LD_VAR 0 1
3980: PPUSH
3981: LD_INT 12
3983: PPUSH
3984: CALL_OW 113
// if tag = 1 then
3988: LD_VAR 0 6
3992: PUSH
3993: LD_INT 1
3995: EQUAL
3996: IFFALSE 4181
// begin if b then
3998: LD_VAR 0 3
4002: IFFALSE 4030
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
4004: LD_VAR 0 1
4008: PPUSH
4009: LD_VAR 0 3
4013: PPUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: CALL_OW 74
4023: PPUSH
4024: CALL_OW 130
4028: GO 4181
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
4030: LD_EXP 17
4034: PUSH
4035: LD_INT 11
4037: PPUSH
4038: LD_INT 81
4040: PUSH
4041: LD_INT 3
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 70
4052: PUSH
4053: LD_INT 0
4055: EQUAL
4056: AND
4057: PUSH
4058: LD_INT 22
4060: PPUSH
4061: LD_EXP 17
4065: PUSH
4066: LD_INT 1
4068: ARRAY
4069: PUSH
4070: LD_INT 1
4072: ARRAY
4073: PPUSH
4074: LD_EXP 17
4078: PUSH
4079: LD_INT 1
4081: ARRAY
4082: PUSH
4083: LD_INT 2
4085: ARRAY
4086: PPUSH
4087: LD_EXP 17
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 3
4098: ARRAY
4099: PPUSH
4100: LD_EXP 17
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PUSH
4109: LD_INT 4
4111: ARRAY
4112: PPUSH
4113: CALL 45385 0 5
4117: AND
4118: IFFALSE 4181
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4120: LD_VAR 0 1
4124: PPUSH
4125: LD_EXP 17
4129: PUSH
4130: LD_INT 1
4132: ARRAY
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: PPUSH
4138: LD_EXP 17
4142: PUSH
4143: LD_INT 1
4145: ARRAY
4146: PUSH
4147: LD_INT 2
4149: ARRAY
4150: PPUSH
4151: LD_EXP 17
4155: PUSH
4156: LD_INT 1
4158: ARRAY
4159: PUSH
4160: LD_INT 3
4162: ARRAY
4163: PPUSH
4164: LD_EXP 17
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PUSH
4173: LD_INT 4
4175: ARRAY
4176: PPUSH
4177: CALL_OW 145
// end ; end ;
4181: GO 3703
4183: POP
4184: POP
// end ; end ;
4185: PPOPN 8
4187: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4188: LD_INT 22
4190: PUSH
4191: LD_INT 3
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 3
4200: PUSH
4201: LD_INT 60
4203: PUSH
4204: EMPTY
4205: LIST
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 50
4213: PUSH
4214: EMPTY
4215: LIST
4216: PUSH
4217: LD_INT 25
4219: PUSH
4220: LD_INT 16
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: PPUSH
4233: CALL_OW 69
4237: PUSH
4238: LD_INT 14
4240: PPUSH
4241: CALL_OW 435
4245: AND
4246: IFFALSE 4358
4248: GO 4250
4250: DISABLE
4251: LD_INT 0
4253: PPUSH
4254: PPUSH
// begin enable ;
4255: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4256: LD_ADDR_VAR 0 2
4260: PUSH
4261: LD_INT 14
4263: PPUSH
4264: CALL_OW 435
4268: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4269: LD_ADDR_VAR 0 1
4273: PUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 3
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 3
4286: PUSH
4287: LD_INT 60
4289: PUSH
4290: EMPTY
4291: LIST
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 50
4299: PUSH
4300: EMPTY
4301: LIST
4302: PUSH
4303: LD_INT 25
4305: PUSH
4306: LD_INT 16
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PUSH
4324: FOR_IN
4325: IFFALSE 4356
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4327: LD_VAR 0 1
4331: PPUSH
4332: LD_VAR 0 2
4336: PUSH
4337: LD_INT 1
4339: ARRAY
4340: PPUSH
4341: LD_VAR 0 2
4345: PUSH
4346: LD_INT 2
4348: ARRAY
4349: PPUSH
4350: CALL_OW 117
4354: GO 4324
4356: POP
4357: POP
// end ;
4358: PPOPN 2
4360: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4361: LD_INT 22
4363: PUSH
4364: LD_INT 3
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 60
4376: PUSH
4377: EMPTY
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 50
4386: PUSH
4387: EMPTY
4388: LIST
4389: PUSH
4390: LD_INT 34
4392: PUSH
4393: LD_INT 51
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 69
4410: PUSH
4411: LD_INT 13
4413: PPUSH
4414: CALL_OW 435
4418: AND
4419: IFFALSE 4531
4421: GO 4423
4423: DISABLE
4424: LD_INT 0
4426: PPUSH
4427: PPUSH
// begin enable ;
4428: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_INT 13
4436: PPUSH
4437: CALL_OW 435
4441: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4442: LD_ADDR_VAR 0 1
4446: PUSH
4447: LD_INT 22
4449: PUSH
4450: LD_INT 3
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: LD_INT 60
4462: PUSH
4463: EMPTY
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 50
4472: PUSH
4473: EMPTY
4474: LIST
4475: PUSH
4476: LD_INT 34
4478: PUSH
4479: LD_INT 51
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PPUSH
4492: CALL_OW 69
4496: PUSH
4497: FOR_IN
4498: IFFALSE 4529
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_VAR 0 2
4509: PUSH
4510: LD_INT 1
4512: ARRAY
4513: PPUSH
4514: LD_VAR 0 2
4518: PUSH
4519: LD_INT 2
4521: ARRAY
4522: PPUSH
4523: CALL_OW 117
4527: GO 4497
4529: POP
4530: POP
// end ;
4531: PPOPN 2
4533: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4534: LD_OWVAR 67
4538: PUSH
4539: LD_INT 1
4541: GREATER
4542: PUSH
4543: LD_INT 1
4545: PPUSH
4546: CALL_OW 302
4550: AND
4551: IFFALSE 4709
4553: GO 4555
4555: DISABLE
4556: LD_INT 0
4558: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4559: LD_ADDR_VAR 0 1
4563: PUSH
4564: DOUBLE
4565: LD_INT 1
4567: DEC
4568: ST_TO_ADDR
4569: LD_INT 3
4571: PUSH
4572: LD_INT 4
4574: PUSH
4575: LD_INT 5
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: LD_OWVAR 67
4587: PUSH
4588: LD_INT 1
4590: MINUS
4591: ARRAY
4592: PUSH
4593: FOR_TO
4594: IFFALSE 4638
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4596: LD_INT 1
4598: PUSH
4599: LD_INT 40
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_VAR 0 1
4610: PUSH
4611: LD_INT 2
4613: MOD
4614: PUSH
4615: LD_INT 1
4617: PLUS
4618: ARRAY
4619: PPUSH
4620: LD_INT 21
4622: PPUSH
4623: LD_INT 3
4625: PPUSH
4626: LD_INT 1
4628: PPUSH
4629: LD_INT 45
4631: PPUSH
4632: CALL_OW 185
// end ;
4636: GO 4593
4638: POP
4639: POP
// repeat wait ( 6 6$00 ) ;
4640: LD_INT 12600
4642: PPUSH
4643: CALL_OW 67
// for i := 1 to 2 do
4647: LD_ADDR_VAR 0 1
4651: PUSH
4652: DOUBLE
4653: LD_INT 1
4655: DEC
4656: ST_TO_ADDR
4657: LD_INT 2
4659: PUSH
4660: FOR_TO
4661: IFFALSE 4684
// AddComConstruct ( ruFac1 , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4663: LD_INT 1
4665: PPUSH
4666: LD_INT 21
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 45
4677: PPUSH
4678: CALL_OW 185
4682: GO 4660
4684: POP
4685: POP
// until not IsOk ( ruFac1 ) or UnitsInside ( ruFac1 ) = 0 ;
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 302
4693: NOT
4694: PUSH
4695: LD_INT 1
4697: PPUSH
4698: CALL_OW 313
4702: PUSH
4703: LD_INT 0
4705: EQUAL
4706: OR
4707: IFFALSE 4640
// end ;
4709: PPOPN 1
4711: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4712: LD_EXP 16
4716: IFFALSE 5302
4718: GO 4720
4720: DISABLE
4721: LD_INT 0
4723: PPUSH
4724: PPUSH
4725: PPUSH
// begin enable ;
4726: ENABLE
// if not ruMobile then
4727: LD_EXP 16
4731: NOT
4732: IFFALSE 4736
// exit ;
4734: GO 5302
// for i in ruMobile do
4736: LD_ADDR_VAR 0 1
4740: PUSH
4741: LD_EXP 16
4745: PUSH
4746: FOR_IN
4747: IFFALSE 5300
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4749: LD_VAR 0 1
4753: PPUSH
4754: CALL_OW 302
4758: NOT
4759: PUSH
4760: LD_VAR 0 1
4764: PPUSH
4765: CALL_OW 255
4769: PUSH
4770: LD_INT 3
4772: NONEQUAL
4773: OR
4774: IFFALSE 4794
// begin ruMobile := ruMobile diff i ;
4776: LD_ADDR_EXP 16
4780: PUSH
4781: LD_EXP 16
4785: PUSH
4786: LD_VAR 0 1
4790: DIFF
4791: ST_TO_ADDR
// continue ;
4792: GO 4746
// end ; if GetTag ( i ) = 300 then
4794: LD_VAR 0 1
4798: PPUSH
4799: CALL_OW 110
4803: PUSH
4804: LD_INT 300
4806: EQUAL
4807: IFFALSE 4937
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4809: LD_VAR 0 1
4813: PPUSH
4814: CALL_OW 261
4818: PUSH
4819: LD_INT 50
4821: LESS
4822: PUSH
4823: LD_VAR 0 1
4827: PPUSH
4828: CALL_OW 262
4832: PUSH
4833: LD_INT 1
4835: EQUAL
4836: AND
4837: IFFALSE 4896
// begin ComMoveXY ( i , 120 , 58 ) ;
4839: LD_VAR 0 1
4843: PPUSH
4844: LD_INT 120
4846: PPUSH
4847: LD_INT 58
4849: PPUSH
4850: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4854: LD_INT 35
4856: PPUSH
4857: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4861: LD_VAR 0 1
4865: PPUSH
4866: LD_INT 120
4868: PPUSH
4869: LD_INT 58
4871: PPUSH
4872: CALL_OW 297
4876: PUSH
4877: LD_INT 4
4879: LESS
4880: IFFALSE 4854
// SetFuel ( i , 100 ) ;
4882: LD_VAR 0 1
4886: PPUSH
4887: LD_INT 100
4889: PPUSH
4890: CALL_OW 240
// end else
4894: GO 4937
// if not IsInArea ( i , ruParkingArea ) then
4896: LD_VAR 0 1
4900: PPUSH
4901: LD_INT 10
4903: PPUSH
4904: CALL_OW 308
4908: NOT
4909: IFFALSE 4925
// ComMoveToArea ( i , ruParkingArea ) else
4911: LD_VAR 0 1
4915: PPUSH
4916: LD_INT 10
4918: PPUSH
4919: CALL_OW 113
4923: GO 4937
// SetTag ( i , 301 ) ;
4925: LD_VAR 0 1
4929: PPUSH
4930: LD_INT 301
4932: PPUSH
4933: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4937: LD_VAR 0 1
4941: PPUSH
4942: CALL_OW 110
4946: PUSH
4947: LD_INT 301
4949: EQUAL
4950: IFFALSE 5080
// begin if GetLives ( i ) < 1000 then
4952: LD_VAR 0 1
4956: PPUSH
4957: CALL_OW 256
4961: PUSH
4962: LD_INT 1000
4964: LESS
4965: IFFALSE 5057
// begin if not IsDrivenBy ( i ) then
4967: LD_VAR 0 1
4971: PPUSH
4972: CALL_OW 311
4976: NOT
4977: IFFALSE 4981
// continue ;
4979: GO 4746
// mech := IsDrivenBy ( i ) ;
4981: LD_ADDR_VAR 0 2
4985: PUSH
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 311
4995: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
4996: LD_VAR 0 2
5000: PPUSH
5001: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
5005: LD_VAR 0 2
5009: PPUSH
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5026: LD_VAR 0 1
5030: PPUSH
5031: CALL_OW 256
5035: PUSH
5036: LD_INT 1000
5038: EQUAL
5039: IFFALSE 5019
// ComEnterUnit ( mech , i ) ;
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL_OW 120
// end else
5055: GO 5080
// if IsDrivenBy ( i ) then
5057: LD_VAR 0 1
5061: PPUSH
5062: CALL_OW 311
5066: IFFALSE 5080
// SetTag ( i , 0 ) ;
5068: LD_VAR 0 1
5072: PPUSH
5073: LD_INT 0
5075: PPUSH
5076: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 110
5089: PUSH
5090: LD_INT 300
5092: LESS
5093: IFFALSE 5298
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: LD_INT 11
5102: PPUSH
5103: LD_INT 81
5105: PUSH
5106: LD_INT 3
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PPUSH
5113: CALL_OW 70
5117: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5118: LD_VAR 0 1
5122: PPUSH
5123: CALL_OW 256
5127: PUSH
5128: LD_INT 650
5130: LESS
5131: IFFALSE 5156
// begin ComStop ( i ) ;
5133: LD_VAR 0 1
5137: PPUSH
5138: CALL_OW 141
// SetTag ( i , 300 ) ;
5142: LD_VAR 0 1
5146: PPUSH
5147: LD_INT 300
5149: PPUSH
5150: CALL_OW 109
// continue ;
5154: GO 4746
// end ; if enemy then
5156: LD_VAR 0 3
5160: IFFALSE 5200
// begin if not HasTask ( i ) then
5162: LD_VAR 0 1
5166: PPUSH
5167: CALL_OW 314
5171: NOT
5172: IFFALSE 5198
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5174: LD_VAR 0 1
5178: PPUSH
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_VAR 0 1
5188: PPUSH
5189: CALL_OW 74
5193: PPUSH
5194: CALL_OW 115
// end else
5198: GO 5298
// if ruMobile then
5200: LD_EXP 16
5204: IFFALSE 5298
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5206: LD_ADDR_VAR 0 3
5210: PUSH
5211: LD_INT 81
5213: PUSH
5214: LD_INT 3
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: ST_TO_ADDR
// if enemy then
5226: LD_VAR 0 3
5230: IFFALSE 5298
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5232: LD_VAR 0 1
5236: PPUSH
5237: LD_INT 113
5239: PUSH
5240: LD_INT 80
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 118
5249: PUSH
5250: LD_INT 100
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: LD_INT 107
5259: PUSH
5260: LD_INT 102
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 114
5269: PUSH
5270: LD_INT 120
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 86
5279: PUSH
5280: LD_INT 116
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: PPUSH
5294: CALL 72255 0 2
// end ; end ; end ;
5298: GO 4746
5300: POP
5301: POP
// end ;
5302: PPOPN 3
5304: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5305: LD_EXP 18
5309: IFFALSE 5355
5311: GO 5313
5313: DISABLE
5314: LD_INT 0
5316: PPUSH
// begin enable ;
5317: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5318: LD_ADDR_VAR 0 1
5322: PUSH
5323: LD_EXP 18
5327: PPUSH
5328: LD_INT 50
5330: PUSH
5331: EMPTY
5332: LIST
5333: PPUSH
5334: CALL_OW 72
5338: ST_TO_ADDR
// ruAttackers := [ ] ;
5339: LD_ADDR_EXP 18
5343: PUSH
5344: EMPTY
5345: ST_TO_ADDR
// SendAttack ( tmp ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: CALL 5358 0 1
// end ;
5355: PPOPN 1
5357: END
// function SendAttack ( group ) ; var i , tmp ; begin
5358: LD_INT 0
5360: PPUSH
5361: PPUSH
5362: PPUSH
// for i in group do
5363: LD_ADDR_VAR 0 3
5367: PUSH
5368: LD_VAR 0 1
5372: PUSH
5373: FOR_IN
5374: IFFALSE 5440
// begin SetTag ( i , 0 ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: LD_INT 0
5383: PPUSH
5384: CALL_OW 109
// if Prob ( 30 ) then
5388: LD_INT 30
5390: PPUSH
5391: CALL_OW 13
5395: IFFALSE 5423
// begin SetTag ( i , 1 ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5409: LD_VAR 0 3
5413: PPUSH
5414: LD_INT 116
5416: PPUSH
5417: CALL_OW 120
// end else
5421: GO 5438
// ComAgressiveMove ( i , 118 , 93 ) ;
5423: LD_VAR 0 3
5427: PPUSH
5428: LD_INT 118
5430: PPUSH
5431: LD_INT 93
5433: PPUSH
5434: CALL_OW 114
// end ;
5438: GO 5373
5440: POP
5441: POP
// repeat wait ( 0 0$1 ) ;
5442: LD_INT 35
5444: PPUSH
5445: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5449: LD_ADDR_VAR 0 4
5453: PUSH
5454: LD_VAR 0 1
5458: PPUSH
5459: LD_INT 120
5461: PUSH
5462: LD_INT 0
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 72
5473: ST_TO_ADDR
// for i in tmp do
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: LD_VAR 0 4
5483: PUSH
5484: FOR_IN
5485: IFFALSE 5632
// begin if not IsOk ( i ) then
5487: LD_VAR 0 3
5491: PPUSH
5492: CALL_OW 302
5496: NOT
5497: IFFALSE 5517
// begin tmp := tmp diff i ;
5499: LD_ADDR_VAR 0 4
5503: PUSH
5504: LD_VAR 0 4
5508: PUSH
5509: LD_VAR 0 3
5513: DIFF
5514: ST_TO_ADDR
// continue ;
5515: GO 5484
// end ; if GetDistUnits ( i , usDep ) < 8 then
5517: LD_VAR 0 3
5521: PPUSH
5522: LD_INT 48
5524: PPUSH
5525: CALL_OW 296
5529: PUSH
5530: LD_INT 8
5532: LESS
5533: IFFALSE 5549
// begin ComAttackUnit ( i , usDep ) ;
5535: LD_VAR 0 3
5539: PPUSH
5540: LD_INT 48
5542: PPUSH
5543: CALL_OW 115
// continue ;
5547: GO 5484
// end ; if not See ( 1 , i ) then
5549: LD_INT 1
5551: PPUSH
5552: LD_VAR 0 3
5556: PPUSH
5557: CALL_OW 292
5561: NOT
5562: IFFALSE 5581
// ComAgressiveMove ( i , 86 , 116 ) else
5564: LD_VAR 0 3
5568: PPUSH
5569: LD_INT 86
5571: PPUSH
5572: LD_INT 116
5574: PPUSH
5575: CALL_OW 114
5579: GO 5630
// if GetWeapon ( i ) <> ru_time_lapser then
5581: LD_VAR 0 3
5585: PPUSH
5586: CALL_OW 264
5590: PUSH
5591: LD_INT 49
5593: NONEQUAL
5594: IFFALSE 5630
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5596: LD_VAR 0 3
5600: PPUSH
5601: LD_INT 81
5603: PUSH
5604: LD_INT 3
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PPUSH
5611: CALL_OW 69
5615: PPUSH
5616: LD_VAR 0 3
5620: PPUSH
5621: CALL_OW 74
5625: PPUSH
5626: CALL_OW 115
// end ;
5630: GO 5484
5632: POP
5633: POP
// until not tmp ;
5634: LD_VAR 0 4
5638: NOT
5639: IFFALSE 5442
// end ; end_of_file
5641: LD_VAR 0 2
5645: RET
// on UnitDestroyed ( unit ) do var i , tmp ;
5646: LD_INT 0
5648: PPUSH
5649: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5650: LD_VAR 0 1
5654: PPUSH
5655: CALL 27221 0 1
// if unit = JMM then
5659: LD_VAR 0 1
5663: PUSH
5664: LD_EXP 8
5668: EQUAL
5669: IFFALSE 5678
// YouLost ( JMM ) ;
5671: LD_STRING JMM
5673: PPUSH
5674: CALL_OW 104
// if GetSide ( unit ) = 4 then
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 255
5687: PUSH
5688: LD_INT 4
5690: EQUAL
5691: IFFALSE 5750
// begin if unit = Joan then
5693: LD_VAR 0 1
5697: PUSH
5698: LD_EXP 10
5702: EQUAL
5703: IFFALSE 5712
// YouLost ( Joan ) ;
5705: LD_STRING Joan
5707: PPUSH
5708: CALL_OW 104
// if unit = Connie then
5712: LD_VAR 0 1
5716: PUSH
5717: LD_EXP 12
5721: EQUAL
5722: IFFALSE 5731
// YouLost ( Connie ) ;
5724: LD_STRING Connie
5726: PPUSH
5727: CALL_OW 104
// if unit = Lisa then
5731: LD_VAR 0 1
5735: PUSH
5736: LD_EXP 11
5740: EQUAL
5741: IFFALSE 5750
// YouLost ( Lisa ) ;
5743: LD_STRING Lisa
5745: PPUSH
5746: CALL_OW 104
// end ; if unit in ruAttackers then
5750: LD_VAR 0 1
5754: PUSH
5755: LD_EXP 18
5759: IN
5760: IFFALSE 5778
// ruAttackers := ruAttackers diff unit ;
5762: LD_ADDR_EXP 18
5766: PUSH
5767: LD_EXP 18
5771: PUSH
5772: LD_VAR 0 1
5776: DIFF
5777: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5778: LD_VAR 0 1
5782: PPUSH
5783: CALL_OW 264
5787: PUSH
5788: LD_INT 51
5790: EQUAL
5791: PUSH
5792: LD_INT 40
5794: PPUSH
5795: CALL_OW 302
5799: AND
5800: IFFALSE 5840
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5802: LD_INT 40
5804: PPUSH
5805: LD_INT 21
5807: PPUSH
5808: LD_INT 1
5810: PUSH
5811: LD_INT 3
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 1
5820: PPUSH
5821: LD_INT 2
5823: PPUSH
5824: CALL_OW 12
5828: ARRAY
5829: PPUSH
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 51
5835: PPUSH
5836: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 264
5849: PUSH
5850: LD_INT 52
5852: EQUAL
5853: PUSH
5854: LD_INT 40
5856: PPUSH
5857: CALL_OW 302
5861: AND
5862: IFFALSE 5902
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5864: LD_INT 40
5866: PPUSH
5867: LD_INT 21
5869: PPUSH
5870: LD_INT 1
5872: PUSH
5873: LD_INT 3
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 1
5882: PPUSH
5883: LD_INT 2
5885: PPUSH
5886: CALL_OW 12
5890: ARRAY
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: LD_INT 52
5897: PPUSH
5898: CALL_OW 185
// if unit in ruMobile then
5902: LD_VAR 0 1
5906: PUSH
5907: LD_EXP 16
5911: IN
5912: IFFALSE 5930
// ruMobile := ruMobile diff i ;
5914: LD_ADDR_EXP 16
5918: PUSH
5919: LD_EXP 16
5923: PUSH
5924: LD_VAR 0 2
5928: DIFF
5929: ST_TO_ADDR
// if unit = ruCommander then
5930: LD_VAR 0 1
5934: PUSH
5935: LD_EXP 14
5939: EQUAL
5940: IFFALSE 6103
// begin repeat wait ( 0 0$2 ) ;
5942: LD_INT 70
5944: PPUSH
5945: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 23
5966: PUSH
5967: LD_INT 3
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 50
5976: PUSH
5977: EMPTY
5978: LIST
5979: PUSH
5980: LD_INT 21
5982: PUSH
5983: LD_INT 1
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 69
6000: ST_TO_ADDR
// if tmp then
6001: LD_VAR 0 3
6005: IFFALSE 6096
// for i in tmp do
6007: LD_ADDR_VAR 0 2
6011: PUSH
6012: LD_VAR 0 3
6016: PUSH
6017: FOR_IN
6018: IFFALSE 6094
// begin if IsInUnit ( i ) then
6020: LD_VAR 0 2
6024: PPUSH
6025: CALL_OW 310
6029: IFFALSE 6040
// ComExit ( i ) ;
6031: LD_VAR 0 2
6035: PPUSH
6036: CALL 70049 0 1
// wait ( 3 ) ;
6040: LD_INT 3
6042: PPUSH
6043: CALL_OW 67
// ComMoveXY ( i , 147 , 18 ) ;
6047: LD_VAR 0 2
6051: PPUSH
6052: LD_INT 147
6054: PPUSH
6055: LD_INT 18
6057: PPUSH
6058: CALL_OW 111
// if GetDistUnitXY ( i , 147 , 18 ) < 3 then
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_INT 147
6069: PPUSH
6070: LD_INT 18
6072: PPUSH
6073: CALL_OW 297
6077: PUSH
6078: LD_INT 3
6080: LESS
6081: IFFALSE 6092
// RemoveUnit ( i ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: CALL_OW 64
// end ;
6092: GO 6017
6094: POP
6095: POP
// until not tmp ;
6096: LD_VAR 0 3
6100: NOT
6101: IFFALSE 5942
// end ; end ;
6103: PPOPN 3
6105: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
6106: LD_VAR 0 2
6110: PPUSH
6111: CALL_OW 255
6115: PUSH
6116: LD_INT 3
6118: EQUAL
6119: IFFALSE 6133
// SetTag ( unit , 0 ) ;
6121: LD_VAR 0 2
6125: PPUSH
6126: LD_INT 0
6128: PPUSH
6129: CALL_OW 109
// end ;
6133: PPOPN 2
6135: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
6136: LD_VAR 0 2
6140: PPUSH
6141: CALL_OW 255
6145: PUSH
6146: LD_INT 3
6148: EQUAL
6149: PUSH
6150: LD_VAR 0 1
6154: PUSH
6155: LD_EXP 19
6159: IN
6160: AND
6161: IFFALSE 6179
// ruTechList := ruTechList diff tech ;
6163: LD_ADDR_EXP 19
6167: PUSH
6168: LD_EXP 19
6172: PUSH
6173: LD_VAR 0 1
6177: DIFF
6178: ST_TO_ADDR
// end ;
6179: PPOPN 2
6181: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
6182: LD_INT 0
6184: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
6185: LD_VAR 0 1
6189: PPUSH
6190: LD_VAR 0 2
6194: PPUSH
6195: CALL 27341 0 2
// if GetSide ( vehicle ) <> 3 then
6199: LD_VAR 0 1
6203: PPUSH
6204: CALL_OW 255
6208: PUSH
6209: LD_INT 3
6211: NONEQUAL
6212: IFFALSE 6283
// begin if GetWeapon ( vehicle ) = us_double_laser then
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 264
6223: PUSH
6224: LD_INT 10
6226: EQUAL
6227: IFFALSE 6281
// begin amLaserCounter := Inc ( amLaserCounter ) ;
6229: LD_ADDR_EXP 7
6233: PUSH
6234: LD_EXP 7
6238: PPUSH
6239: CALL 71012 0 1
6243: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
6244: LD_ADDR_VAR 0 3
6248: PUSH
6249: LD_VAR 0 2
6253: PPUSH
6254: CALL_OW 313
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6279
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
6262: LD_VAR 0 3
6266: PPUSH
6267: LD_INT 3
6269: PPUSH
6270: LD_INT 1000
6272: PPUSH
6273: CALL_OW 591
6277: GO 6259
6279: POP
6280: POP
// end ; exit ;
6281: GO 6377
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6283: LD_VAR 0 1
6287: PPUSH
6288: CALL_OW 264
6292: PUSH
6293: LD_INT 51
6295: PUSH
6296: LD_INT 52
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: IN
6303: IFFALSE 6307
// exit ;
6305: GO 6377
// if GetControl ( vehicle ) = control_computer then
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 263
6316: PUSH
6317: LD_INT 3
6319: EQUAL
6320: IFFALSE 6342
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6322: LD_ADDR_EXP 18
6326: PUSH
6327: LD_EXP 18
6331: PPUSH
6332: LD_VAR 0 1
6336: PPUSH
6337: CALL 69651 0 2
6341: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6342: LD_VAR 0 1
6346: PPUSH
6347: CALL_OW 263
6351: PUSH
6352: LD_INT 1
6354: EQUAL
6355: IFFALSE 6377
// ruMobile := Join ( ruMobile , vehicle ) ;
6357: LD_ADDR_EXP 16
6361: PUSH
6362: LD_EXP 16
6366: PPUSH
6367: LD_VAR 0 1
6371: PPUSH
6372: CALL 69651 0 2
6376: ST_TO_ADDR
// end ;
6377: PPOPN 3
6379: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 then
6380: LD_VAR 0 1
6384: PPUSH
6385: CALL_OW 255
6389: PUSH
6390: LD_INT 3
6392: EQUAL
6393: PUSH
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 257
6403: PUSH
6404: LD_INT 3
6406: EQUAL
6407: AND
6408: IFFALSE 6471
// if GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) and UnitsInside ( ruFac1 ) < 6 then
6410: LD_INT 1
6412: PPUSH
6413: CALL_OW 255
6417: PUSH
6418: LD_INT 3
6420: EQUAL
6421: PUSH
6422: LD_INT 1
6424: PPUSH
6425: CALL_OW 302
6429: AND
6430: PUSH
6431: LD_INT 1
6433: PPUSH
6434: CALL_OW 313
6438: PUSH
6439: LD_INT 6
6441: LESS
6442: AND
6443: IFFALSE 6459
// ComEnterUnit ( human , ruFac1 ) else
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 1
6452: PPUSH
6453: CALL_OW 120
6457: GO 6471
// ComEnterUnit ( human , ruFac2 ) ;
6459: LD_VAR 0 1
6463: PPUSH
6464: LD_INT 40
6466: PPUSH
6467: CALL_OW 120
// end ;
6471: PPOPN 4
6473: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL 27325 0 1
// end ; end_of_file
6483: PPOPN 1
6485: END
// export function Action ; var dec1 , dec2 , veh ; begin
6486: LD_INT 0
6488: PPUSH
6489: PPUSH
6490: PPUSH
6491: PPUSH
// veh := IsInUnit ( JMM ) ;
6492: LD_ADDR_VAR 0 4
6496: PUSH
6497: LD_EXP 8
6501: PPUSH
6502: CALL_OW 310
6506: ST_TO_ADDR
// InGameOn ;
6507: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6520: LD_VAR 0 4
6524: PPUSH
6525: LD_INT 30
6527: PPUSH
6528: LD_INT 11
6530: PPUSH
6531: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6535: LD_VAR 0 4
6539: PPUSH
6540: LD_INT 69
6542: PPUSH
6543: LD_INT 34
6545: PPUSH
6546: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6550: LD_INT 30
6552: PPUSH
6553: LD_INT 11
6555: PPUSH
6556: CALL_OW 84
// wait ( 0 0$3 ) ;
6560: LD_INT 105
6562: PPUSH
6563: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6567: LD_EXP 13
6571: PPUSH
6572: LD_STRING D1-Pow-1
6574: PPUSH
6575: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6579: LD_EXP 8
6583: PPUSH
6584: CALL_OW 121
// AddComHold ( JMM ) ;
6588: LD_EXP 8
6592: PPUSH
6593: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6597: LD_EXP 8
6601: PPUSH
6602: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6606: LD_EXP 8
6610: PPUSH
6611: LD_STRING D1-JMM-1
6613: PPUSH
6614: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6618: LD_EXP 13
6622: PPUSH
6623: LD_STRING D1-Pow-2
6625: PPUSH
6626: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6630: LD_EXP 8
6634: PPUSH
6635: LD_STRING D1-JMM-2
6637: PPUSH
6638: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6642: LD_EXP 8
6646: PPUSH
6647: LD_VAR 0 4
6651: PPUSH
6652: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6656: LD_STRING M1
6658: PPUSH
6659: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6663: LD_INT 16
6665: PPUSH
6666: LD_INT 1
6668: PPUSH
6669: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6673: LD_INT 35
6675: PPUSH
6676: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6680: LD_EXP 8
6684: PPUSH
6685: LD_VAR 0 4
6689: PPUSH
6690: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6694: LD_VAR 0 4
6698: PPUSH
6699: LD_INT 51
6701: PPUSH
6702: LD_INT 21
6704: PPUSH
6705: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6709: LD_VAR 0 4
6713: PPUSH
6714: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6718: LD_VAR 0 4
6722: PPUSH
6723: LD_INT 51
6725: PPUSH
6726: LD_INT 21
6728: PPUSH
6729: CALL_OW 297
6733: PUSH
6734: LD_INT 6
6736: LESS
6737: IFFALSE 6673
// if JMMGirl = 1 then
6739: LD_EXP 2
6743: PUSH
6744: LD_INT 1
6746: EQUAL
6747: IFFALSE 7046
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6749: LD_EXP 10
6753: PPUSH
6754: LD_STRING D2J-Joan-1
6756: PPUSH
6757: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6761: LD_ADDR_VAR 0 2
6765: PUSH
6766: LD_STRING Q1
6768: PPUSH
6769: CALL_OW 97
6773: ST_TO_ADDR
// if dec1 = 1 then
6774: LD_VAR 0 2
6778: PUSH
6779: LD_INT 1
6781: EQUAL
6782: IFFALSE 7037
// begin ComExitVehicle ( JMM ) ;
6784: LD_EXP 8
6788: PPUSH
6789: CALL_OW 121
// AddComHold ( JMM ) ;
6793: LD_EXP 8
6797: PPUSH
6798: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6802: LD_EXP 8
6806: PPUSH
6807: LD_STRING D2J-JMM-1
6809: PPUSH
6810: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6814: LD_EXP 10
6818: PPUSH
6819: LD_STRING D2J-Joan-2
6821: PPUSH
6822: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6826: LD_EXP 8
6830: PPUSH
6831: LD_STRING D2J-JMM-2
6833: PPUSH
6834: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6838: LD_EXP 10
6842: PPUSH
6843: LD_STRING D2J-Joan-3
6845: PPUSH
6846: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6850: LD_EXP 13
6854: PPUSH
6855: LD_STRING DPowell-Pow-1
6857: PPUSH
6858: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6862: LD_ADDR_VAR 0 3
6866: PUSH
6867: LD_STRING Q2J
6869: PPUSH
6870: CALL_OW 97
6874: ST_TO_ADDR
// if dec2 = 1 then
6875: LD_VAR 0 3
6879: PUSH
6880: LD_INT 1
6882: EQUAL
6883: IFFALSE 6925
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6885: LD_EXP 8
6889: PPUSH
6890: LD_STRING D2Ja-JMM-1
6892: PPUSH
6893: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6897: LD_EXP 10
6901: PPUSH
6902: LD_STRING D2Ja-Joan-1
6904: PPUSH
6905: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
6909: LD_EXP 8
6913: PPUSH
6914: LD_STRING D2Ja-JMM-2
6916: PPUSH
6917: CALL_OW 88
// InGameOff ;
6921: CALL_OW 9
// end ; if dec2 = 2 then
6925: LD_VAR 0 3
6929: PUSH
6930: LD_INT 2
6932: EQUAL
6933: IFFALSE 7004
// begin Say ( JMM , D2Jb-JMM-1 ) ;
6935: LD_EXP 8
6939: PPUSH
6940: LD_STRING D2Jb-JMM-1
6942: PPUSH
6943: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
6947: LD_EXP 10
6951: PPUSH
6952: LD_STRING D2Jb-Joan-1
6954: PPUSH
6955: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
6959: LD_EXP 8
6963: PPUSH
6964: LD_STRING D2Jb-JMM-2
6966: PPUSH
6967: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
6971: LD_EXP 10
6975: PPUSH
6976: LD_STRING D2Jb-Joan-2
6978: PPUSH
6979: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
6983: LD_EXP 8
6987: PPUSH
6988: LD_STRING D2Jb-JMM-3
6990: PPUSH
6991: CALL_OW 88
// FinishMission ( true ) ;
6995: LD_INT 1
6997: PPUSH
6998: CALL 9888 0 1
// exit ;
7002: GO 7586
// end ; if dec2 = 3 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 3
7011: EQUAL
7012: IFFALSE 7035
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
7014: LD_EXP 10
7018: PPUSH
7019: LD_STRING D2Jc-Joan-1
7021: PPUSH
7022: CALL_OW 94
// FinishMission ( true ) ;
7026: LD_INT 1
7028: PPUSH
7029: CALL 9888 0 1
// exit ;
7033: GO 7586
// end ; end else
7035: GO 7046
// begin FinishMission ( true ) ;
7037: LD_INT 1
7039: PPUSH
7040: CALL 9888 0 1
// exit ;
7044: GO 7586
// end ; end ; if JMMGirl = 2 then
7046: LD_EXP 2
7050: PUSH
7051: LD_INT 2
7053: EQUAL
7054: IFFALSE 7365
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
7056: LD_EXP 11
7060: PPUSH
7061: LD_STRING D2L-Lisa-1
7063: PPUSH
7064: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_STRING Q1
7075: PPUSH
7076: CALL_OW 97
7080: ST_TO_ADDR
// if dec1 = 1 then
7081: LD_VAR 0 2
7085: PUSH
7086: LD_INT 1
7088: EQUAL
7089: IFFALSE 7356
// begin ComExitVehicle ( JMM ) ;
7091: LD_EXP 8
7095: PPUSH
7096: CALL_OW 121
// AddComHold ( JMM ) ;
7100: LD_EXP 8
7104: PPUSH
7105: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
7109: LD_EXP 8
7113: PPUSH
7114: LD_STRING D2L-JMM-1
7116: PPUSH
7117: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
7121: LD_EXP 11
7125: PPUSH
7126: LD_STRING D2L-Lisa-2
7128: PPUSH
7129: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
7133: LD_EXP 8
7137: PPUSH
7138: LD_STRING D2L-JMM-2
7140: PPUSH
7141: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
7145: LD_EXP 11
7149: PPUSH
7150: LD_STRING DL-Lisa-3
7152: PPUSH
7153: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7157: LD_EXP 13
7161: PPUSH
7162: LD_STRING DPowell-Pow-1
7164: PPUSH
7165: CALL_OW 94
// dec2 := Query ( Q2L ) ;
7169: LD_ADDR_VAR 0 3
7173: PUSH
7174: LD_STRING Q2L
7176: PPUSH
7177: CALL_OW 97
7181: ST_TO_ADDR
// if dec2 = 1 then
7182: LD_VAR 0 3
7186: PUSH
7187: LD_INT 1
7189: EQUAL
7190: IFFALSE 7256
// begin Say ( JMM , D2La-JMM-1 ) ;
7192: LD_EXP 8
7196: PPUSH
7197: LD_STRING D2La-JMM-1
7199: PPUSH
7200: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
7204: LD_EXP 11
7208: PPUSH
7209: LD_STRING D2La-Lisa-1
7211: PPUSH
7212: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
7216: LD_EXP 8
7220: PPUSH
7221: LD_STRING D2La-JMM-2
7223: PPUSH
7224: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
7228: LD_EXP 11
7232: PPUSH
7233: LD_STRING D2La-Lisa-2
7235: PPUSH
7236: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
7240: LD_EXP 8
7244: PPUSH
7245: LD_STRING D2La-JMM-3
7247: PPUSH
7248: CALL_OW 88
// InGameOff ;
7252: CALL_OW 9
// end ; if dec2 = 2 then
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 2
7263: EQUAL
7264: IFFALSE 7323
// begin Say ( JMM , D2Lb-JMM-1 ) ;
7266: LD_EXP 8
7270: PPUSH
7271: LD_STRING D2Lb-JMM-1
7273: PPUSH
7274: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
7278: LD_EXP 11
7282: PPUSH
7283: LD_STRING D2Lb-Lisa-1
7285: PPUSH
7286: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
7290: LD_EXP 8
7294: PPUSH
7295: LD_STRING D2Lb-JMM-2
7297: PPUSH
7298: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7302: LD_EXP 11
7306: PPUSH
7307: LD_STRING D2Lb-Lisa-2
7309: PPUSH
7310: CALL_OW 94
// FinishMission ( true ) ;
7314: LD_INT 1
7316: PPUSH
7317: CALL 9888 0 1
// exit ;
7321: GO 7586
// end ; if dec2 = 3 then
7323: LD_VAR 0 3
7327: PUSH
7328: LD_INT 3
7330: EQUAL
7331: IFFALSE 7354
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7333: LD_EXP 11
7337: PPUSH
7338: LD_STRING D2Lc-Lisa-1
7340: PPUSH
7341: CALL_OW 94
// FinishMission ( true ) ;
7345: LD_INT 1
7347: PPUSH
7348: CALL 9888 0 1
// exit ;
7352: GO 7586
// end ; end else
7354: GO 7365
// begin FinishMission ( true ) ;
7356: LD_INT 1
7358: PPUSH
7359: CALL 9888 0 1
// exit ;
7363: GO 7586
// end ; end ; if JMMGirl = 3 then
7365: LD_EXP 2
7369: PUSH
7370: LD_INT 3
7372: EQUAL
7373: IFFALSE 7586
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7375: LD_EXP 12
7379: PPUSH
7380: LD_STRING D2X-Con-1
7382: PPUSH
7383: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7387: LD_ADDR_VAR 0 2
7391: PUSH
7392: LD_STRING Q1
7394: PPUSH
7395: CALL_OW 97
7399: ST_TO_ADDR
// if dec1 = 1 then
7400: LD_VAR 0 2
7404: PUSH
7405: LD_INT 1
7407: EQUAL
7408: IFFALSE 7579
// begin ComExitVehicle ( JMM ) ;
7410: LD_EXP 8
7414: PPUSH
7415: CALL_OW 121
// AddComHold ( JMM ) ;
7419: LD_EXP 8
7423: PPUSH
7424: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7428: LD_EXP 8
7432: PPUSH
7433: LD_STRING D2X-JMM-1
7435: PPUSH
7436: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7440: LD_EXP 12
7444: PPUSH
7445: LD_STRING D2X-Con-2
7447: PPUSH
7448: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7452: LD_EXP 13
7456: PPUSH
7457: LD_STRING DPowell-Pow-1
7459: PPUSH
7460: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_STRING Q2X
7471: PPUSH
7472: CALL_OW 97
7476: ST_TO_ADDR
// if dec2 = 1 then
7477: LD_VAR 0 3
7481: PUSH
7482: LD_INT 1
7484: EQUAL
7485: IFFALSE 7503
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7487: LD_EXP 8
7491: PPUSH
7492: LD_STRING D2Xa-JMM-1
7494: PPUSH
7495: CALL_OW 88
// InGameOff ;
7499: CALL_OW 9
// end ; if dec2 = 2 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 2
7510: EQUAL
7511: IFFALSE 7546
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7513: LD_EXP 8
7517: PPUSH
7518: LD_STRING D2Xb-JMM-1
7520: PPUSH
7521: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7525: LD_EXP 12
7529: PPUSH
7530: LD_STRING D2Xb-Con-1
7532: PPUSH
7533: CALL_OW 94
// FinishMission ( true ) ;
7537: LD_INT 1
7539: PPUSH
7540: CALL 9888 0 1
// exit ;
7544: GO 7586
// end ; if dec2 = 3 then
7546: LD_VAR 0 3
7550: PUSH
7551: LD_INT 3
7553: EQUAL
7554: IFFALSE 7577
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7556: LD_EXP 12
7560: PPUSH
7561: LD_STRING D2Xc-Con-1
7563: PPUSH
7564: CALL_OW 94
// FinishMission ( true ) ;
7568: LD_INT 1
7570: PPUSH
7571: CALL 9888 0 1
// exit ;
7575: GO 7586
// end ; end else
7577: GO 7586
// begin FinishMission ( true ) ;
7579: LD_INT 1
7581: PPUSH
7582: CALL 9888 0 1
// end ; end ; end ;
7586: LD_VAR 0 1
7590: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7591: LD_EXP 8
7595: PPUSH
7596: LD_INT 15
7598: PPUSH
7599: CALL_OW 308
7603: IFFALSE 8851
7605: GO 7607
7607: DISABLE
7608: LD_INT 0
7610: PPUSH
// begin if tick < 5 5$00 then
7611: LD_OWVAR 1
7615: PUSH
7616: LD_INT 10500
7618: LESS
7619: IFFALSE 7871
// begin uc_side := 6 ;
7621: LD_ADDR_OWVAR 20
7625: PUSH
7626: LD_INT 6
7628: ST_TO_ADDR
// uc_nation := 3 ;
7629: LD_ADDR_OWVAR 21
7633: PUSH
7634: LD_INT 3
7636: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7637: LD_INT 1
7639: PPUSH
7640: LD_INT 105
7642: PPUSH
7643: LD_INT 97
7645: PPUSH
7646: CALL_OW 293
7650: NOT
7651: IFFALSE 7715
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7653: LD_INT 22
7655: PPUSH
7656: LD_INT 1
7658: PPUSH
7659: LD_INT 3
7661: PPUSH
7662: LD_INT 44
7664: PPUSH
7665: LD_INT 40
7667: PPUSH
7668: CALL 36789 0 5
// veh := CreateVehicle ;
7672: LD_ADDR_VAR 0 1
7676: PUSH
7677: CALL_OW 45
7681: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7682: LD_VAR 0 1
7686: PPUSH
7687: LD_INT 200
7689: PPUSH
7690: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7694: LD_VAR 0 1
7698: PPUSH
7699: LD_INT 105
7701: PPUSH
7702: LD_INT 97
7704: PPUSH
7705: LD_INT 3
7707: PPUSH
7708: LD_INT 0
7710: PPUSH
7711: CALL 71791 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7715: LD_INT 1
7717: PPUSH
7718: LD_INT 116
7720: PPUSH
7721: LD_INT 120
7723: PPUSH
7724: CALL_OW 293
7728: NOT
7729: IFFALSE 7793
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7731: LD_INT 22
7733: PPUSH
7734: LD_INT 1
7736: PPUSH
7737: LD_INT 3
7739: PPUSH
7740: LD_INT 45
7742: PPUSH
7743: LD_INT 40
7745: PPUSH
7746: CALL 36789 0 5
// veh := CreateVehicle ;
7750: LD_ADDR_VAR 0 1
7754: PUSH
7755: CALL_OW 45
7759: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7760: LD_VAR 0 1
7764: PPUSH
7765: LD_INT 200
7767: PPUSH
7768: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7772: LD_VAR 0 1
7776: PPUSH
7777: LD_INT 116
7779: PPUSH
7780: LD_INT 120
7782: PPUSH
7783: LD_INT 4
7785: PPUSH
7786: LD_INT 0
7788: PPUSH
7789: CALL 71791 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7793: LD_INT 1
7795: PPUSH
7796: LD_INT 116
7798: PPUSH
7799: LD_INT 120
7801: PPUSH
7802: CALL_OW 293
7806: NOT
7807: IFFALSE 7871
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7809: LD_INT 24
7811: PPUSH
7812: LD_INT 1
7814: PPUSH
7815: LD_INT 3
7817: PPUSH
7818: LD_INT 45
7820: PPUSH
7821: LD_INT 30
7823: PPUSH
7824: CALL 36789 0 5
// veh := CreateVehicle ;
7828: LD_ADDR_VAR 0 1
7832: PUSH
7833: CALL_OW 45
7837: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 200
7845: PPUSH
7846: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7850: LD_VAR 0 1
7854: PPUSH
7855: LD_INT 116
7857: PPUSH
7858: LD_INT 120
7860: PPUSH
7861: LD_INT 4
7863: PPUSH
7864: LD_INT 0
7866: PPUSH
7867: CALL 71791 0 5
// end ; end ; InGameOn ;
7871: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7875: LD_INT 35
7877: PPUSH
7878: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7882: LD_EXP 8
7886: PPUSH
7887: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7891: LD_EXP 8
7895: PPUSH
7896: LD_INT 81
7898: PPUSH
7899: LD_INT 109
7901: PPUSH
7902: CALL_OW 111
// AddComHold ( JMM ) ;
7906: LD_EXP 8
7910: PPUSH
7911: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
7915: LD_EXP 10
7919: PUSH
7920: LD_EXP 11
7924: PUSH
7925: LD_EXP 12
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: PPUSH
7935: LD_EXP 8
7939: PPUSH
7940: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
7944: LD_EXP 10
7948: PUSH
7949: LD_EXP 11
7953: PUSH
7954: LD_EXP 12
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PPUSH
7964: LD_INT 91
7966: PUSH
7967: LD_EXP 8
7971: PUSH
7972: LD_INT 6
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 72
7984: IFFALSE 7875
// case JMMGirl of 1 :
7986: LD_EXP 2
7990: PUSH
7991: LD_INT 1
7993: DOUBLE
7994: EQUAL
7995: IFTRUE 7999
7997: GO 8284
7999: POP
// begin ChangeSideKappaBase ;
8000: CALL 1439 0 0
// ComTurnUnit ( Joan , JMM ) ;
8004: LD_EXP 10
8008: PPUSH
8009: LD_EXP 8
8013: PPUSH
8014: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
8018: LD_EXP 8
8022: PPUSH
8023: LD_EXP 10
8027: PPUSH
8028: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8032: LD_EXP 10
8036: PUSH
8037: LD_EXP 8
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 87
// wait ( 0 0$1 ) ;
8050: LD_INT 35
8052: PPUSH
8053: CALL_OW 67
// DialogueOn ;
8057: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
8061: LD_EXP 10
8065: PPUSH
8066: LD_STRING D3J-Joan-1
8068: PPUSH
8069: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8073: LD_EXP 8
8077: PPUSH
8078: LD_STRING D3J-JMM-1
8080: PPUSH
8081: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
8085: LD_EXP 10
8089: PPUSH
8090: LD_STRING D3J-Joan-2
8092: PPUSH
8093: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
8097: LD_EXP 8
8101: PPUSH
8102: LD_STRING D3J-JMM-2
8104: PPUSH
8105: CALL_OW 88
// wait ( 0 0$1 ) ;
8109: LD_INT 35
8111: PPUSH
8112: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8116: LD_EXP 8
8120: PPUSH
8121: LD_STRING D4-JMM-1
8123: PPUSH
8124: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
8128: LD_EXP 10
8132: PPUSH
8133: LD_STRING D4-Joan-1
8135: PPUSH
8136: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8140: LD_EXP 8
8144: PPUSH
8145: LD_STRING D4-JMM-2
8147: PPUSH
8148: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
8152: LD_EXP 10
8156: PPUSH
8157: LD_STRING D4-Joan-2
8159: PPUSH
8160: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8164: LD_EXP 8
8168: PPUSH
8169: LD_STRING D4-JMM-3
8171: PPUSH
8172: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8176: LD_INT 10
8178: PPUSH
8179: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8183: LD_EXP 13
8187: PPUSH
8188: LD_STRING D7-Pow-1
8190: PPUSH
8191: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8195: LD_EXP 8
8199: PPUSH
8200: LD_STRING D7-JMM-1
8202: PPUSH
8203: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8207: LD_EXP 13
8211: PPUSH
8212: LD_STRING D7-Pow-2
8214: PPUSH
8215: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8219: LD_EXP 8
8223: PPUSH
8224: LD_STRING D7-JMM-2
8226: PPUSH
8227: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8231: LD_EXP 13
8235: PPUSH
8236: LD_STRING D7-Pow-3
8238: PPUSH
8239: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8243: LD_EXP 8
8247: PPUSH
8248: LD_STRING D7-JMM-3
8250: PPUSH
8251: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8255: LD_EXP 13
8259: PPUSH
8260: LD_STRING D7-Pow-4
8262: PPUSH
8263: CALL_OW 94
// DialogueOff ;
8267: CALL_OW 7
// InGameOff ;
8271: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
8275: LD_STRING M2J
8277: PPUSH
8278: CALL_OW 337
// end ; 2 :
8282: GO 8847
8284: LD_INT 2
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8292
8290: GO 8577
8292: POP
// begin ChangeSideKappaBase ;
8293: CALL 1439 0 0
// ComTurnUnit ( Lisa , JMM ) ;
8297: LD_EXP 11
8301: PPUSH
8302: LD_EXP 8
8306: PPUSH
8307: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
8311: LD_EXP 8
8315: PPUSH
8316: LD_EXP 11
8320: PPUSH
8321: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
8325: LD_EXP 11
8329: PUSH
8330: LD_EXP 8
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 87
// wait ( 0 0$1 ) ;
8343: LD_INT 35
8345: PPUSH
8346: CALL_OW 67
// DialogueOn ;
8350: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
8354: LD_EXP 11
8358: PPUSH
8359: LD_STRING D3L-Lisa-1
8361: PPUSH
8362: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
8366: LD_EXP 8
8370: PPUSH
8371: LD_STRING D3L-JMM-1
8373: PPUSH
8374: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
8378: LD_EXP 11
8382: PPUSH
8383: LD_STRING D3L-Lisa-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
8390: LD_EXP 8
8394: PPUSH
8395: LD_STRING D3L-JMM-2
8397: PPUSH
8398: CALL_OW 88
// wait ( 0 0$1 ) ;
8402: LD_INT 35
8404: PPUSH
8405: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8409: LD_EXP 8
8413: PPUSH
8414: LD_STRING D4-JMM-1
8416: PPUSH
8417: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8421: LD_EXP 11
8425: PPUSH
8426: LD_STRING D4-Lisa-1
8428: PPUSH
8429: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8433: LD_EXP 8
8437: PPUSH
8438: LD_STRING D4-JMM-1
8440: PPUSH
8441: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8445: LD_EXP 11
8449: PPUSH
8450: LD_STRING D4-Lisa-2
8452: PPUSH
8453: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8457: LD_EXP 8
8461: PPUSH
8462: LD_STRING D4-JMM-3
8464: PPUSH
8465: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8469: LD_INT 10
8471: PPUSH
8472: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8476: LD_EXP 13
8480: PPUSH
8481: LD_STRING D7-Pow-1
8483: PPUSH
8484: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8488: LD_EXP 8
8492: PPUSH
8493: LD_STRING D7-JMM-1
8495: PPUSH
8496: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8500: LD_EXP 13
8504: PPUSH
8505: LD_STRING D7-Pow-2
8507: PPUSH
8508: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8512: LD_EXP 8
8516: PPUSH
8517: LD_STRING D7-JMM-2
8519: PPUSH
8520: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8524: LD_EXP 13
8528: PPUSH
8529: LD_STRING D7-Pow-3
8531: PPUSH
8532: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8536: LD_EXP 8
8540: PPUSH
8541: LD_STRING D7-JMM-3
8543: PPUSH
8544: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8548: LD_EXP 13
8552: PPUSH
8553: LD_STRING D7-Pow-4
8555: PPUSH
8556: CALL_OW 94
// DialogueOff ;
8560: CALL_OW 7
// InGameOff ;
8564: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8568: LD_STRING M2L
8570: PPUSH
8571: CALL_OW 337
// end ; 3 :
8575: GO 8847
8577: LD_INT 3
8579: DOUBLE
8580: EQUAL
8581: IFTRUE 8585
8583: GO 8846
8585: POP
// begin ChangeSideKappaBase ;
8586: CALL 1439 0 0
// ComTurnUnit ( Connie , JMM ) ;
8590: LD_EXP 12
8594: PPUSH
8595: LD_EXP 8
8599: PPUSH
8600: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8604: LD_EXP 8
8608: PPUSH
8609: LD_EXP 12
8613: PPUSH
8614: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8618: LD_EXP 10
8622: PUSH
8623: LD_EXP 8
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PPUSH
8632: CALL_OW 87
// wait ( 0 0$1 ) ;
8636: LD_INT 35
8638: PPUSH
8639: CALL_OW 67
// DialogueOn ;
8643: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8647: LD_EXP 12
8651: PPUSH
8652: LD_STRING D3X-Con-1
8654: PPUSH
8655: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8659: LD_EXP 8
8663: PPUSH
8664: LD_STRING D3J-JMM-1
8666: PPUSH
8667: CALL_OW 88
// wait ( 0 0$1 ) ;
8671: LD_INT 35
8673: PPUSH
8674: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8678: LD_EXP 8
8682: PPUSH
8683: LD_STRING D4-JMM-1
8685: PPUSH
8686: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8690: LD_EXP 12
8694: PPUSH
8695: LD_STRING D4-Con-1
8697: PPUSH
8698: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8702: LD_EXP 8
8706: PPUSH
8707: LD_STRING D4-JMM-2
8709: PPUSH
8710: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8714: LD_EXP 12
8718: PPUSH
8719: LD_STRING D4-Con-2
8721: PPUSH
8722: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8726: LD_EXP 8
8730: PPUSH
8731: LD_STRING D4-JMM-3
8733: PPUSH
8734: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8738: LD_INT 10
8740: PPUSH
8741: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8745: LD_EXP 13
8749: PPUSH
8750: LD_STRING D7-Pow-1
8752: PPUSH
8753: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8757: LD_EXP 8
8761: PPUSH
8762: LD_STRING D7-JMM-1
8764: PPUSH
8765: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8769: LD_EXP 13
8773: PPUSH
8774: LD_STRING D7-Pow-2
8776: PPUSH
8777: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8781: LD_EXP 8
8785: PPUSH
8786: LD_STRING D7-JMM-2
8788: PPUSH
8789: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8793: LD_EXP 13
8797: PPUSH
8798: LD_STRING D7-Pow-3
8800: PPUSH
8801: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8805: LD_EXP 8
8809: PPUSH
8810: LD_STRING D7-JMM-3
8812: PPUSH
8813: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8817: LD_EXP 13
8821: PPUSH
8822: LD_STRING D7-Pow-4
8824: PPUSH
8825: CALL_OW 94
// DialogueOff ;
8829: CALL_OW 7
// InGameOff ;
8833: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8837: LD_STRING M2X
8839: PPUSH
8840: CALL_OW 337
// end ; end ;
8844: GO 8847
8846: POP
// SaveForQuickRestart ;
8847: CALL_OW 22
// end ;
8851: PPOPN 1
8853: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8854: LD_INT 32
8856: PPUSH
8857: CALL_OW 306
8861: IFFALSE 9186
8863: GO 8865
8865: DISABLE
// begin case JMMGirl of 1 :
8866: LD_EXP 2
8870: PUSH
8871: LD_INT 1
8873: DOUBLE
8874: EQUAL
8875: IFTRUE 8879
8877: GO 8993
8879: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8880: LD_EXP 8
8884: PPUSH
8885: LD_STRING D6J-JMM-1
8887: PPUSH
8888: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8892: LD_STRING 13f_Denis
8894: PPUSH
8895: CALL_OW 28
8899: PUSH
8900: LD_STRING 13s_Denis
8902: PPUSH
8903: CALL_OW 28
8907: OR
8908: IFFALSE 8948
// begin Say ( Joan , D6J-Joan-1 ) ;
8910: LD_EXP 10
8914: PPUSH
8915: LD_STRING D6J-Joan-1
8917: PPUSH
8918: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
8922: LD_EXP 8
8926: PPUSH
8927: LD_STRING D6J-JMM-2
8929: PPUSH
8930: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
8934: LD_EXP 10
8938: PPUSH
8939: LD_STRING D6J-Joan-2
8941: PPUSH
8942: CALL_OW 88
// end else
8946: GO 8960
// Say ( Joan , D6J-Joan-2a ) ;
8948: LD_EXP 10
8952: PPUSH
8953: LD_STRING D6J-Joan-2a
8955: PPUSH
8956: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
8960: LD_EXP 8
8964: PPUSH
8965: LD_STRING D6J-JMM-3
8967: PPUSH
8968: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
8972: LD_EXP 10
8976: PPUSH
8977: LD_STRING D6J-Joan-3
8979: PPUSH
8980: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8984: LD_STRING M3
8986: PPUSH
8987: CALL_OW 337
// end ; 2 :
8991: GO 9186
8993: LD_INT 2
8995: DOUBLE
8996: EQUAL
8997: IFTRUE 9001
8999: GO 9059
9001: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
9002: LD_EXP 8
9006: PPUSH
9007: LD_STRING D6L-JMM-1
9009: PPUSH
9010: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
9014: LD_EXP 11
9018: PPUSH
9019: LD_STRING D6L-Lisa-1
9021: PPUSH
9022: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
9026: LD_EXP 8
9030: PPUSH
9031: LD_STRING D6L-JMM-2
9033: PPUSH
9034: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
9038: LD_EXP 11
9042: PPUSH
9043: LD_STRING D6L-Lisa-2
9045: PPUSH
9046: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9050: LD_STRING M3
9052: PPUSH
9053: CALL_OW 337
// end ; 3 :
9057: GO 9186
9059: LD_INT 3
9061: DOUBLE
9062: EQUAL
9063: IFTRUE 9067
9065: GO 9185
9067: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
9068: LD_EXP 8
9072: PPUSH
9073: LD_STRING D6X-JMM-1
9075: PPUSH
9076: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
9080: LD_EXP 12
9084: PPUSH
9085: LD_STRING D6X-Con-1
9087: PPUSH
9088: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
9092: LD_EXP 8
9096: PPUSH
9097: LD_STRING D6X-JMM-2
9099: PPUSH
9100: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
9104: LD_EXP 12
9108: PPUSH
9109: LD_STRING D6X-Con-2
9111: PPUSH
9112: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
9116: LD_EXP 8
9120: PPUSH
9121: LD_STRING D6X-JMM-3
9123: PPUSH
9124: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
9128: LD_EXP 12
9132: PPUSH
9133: LD_STRING D6X-Con-3
9135: PPUSH
9136: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
9140: LD_EXP 8
9144: PPUSH
9145: LD_STRING D6X-JMM-4
9147: PPUSH
9148: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
9152: LD_EXP 12
9156: PPUSH
9157: LD_STRING D6X-Con-4
9159: PPUSH
9160: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
9164: LD_EXP 8
9168: PPUSH
9169: LD_STRING D6X-JMM-5
9171: PPUSH
9172: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9176: LD_STRING M3
9178: PPUSH
9179: CALL_OW 337
// end ; end ;
9183: GO 9186
9185: POP
// end ;
9186: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
9187: LD_INT 22
9189: PUSH
9190: LD_INT 1
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 33
9199: PUSH
9200: LD_INT 2
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PPUSH
9211: CALL_OW 69
9215: PPUSH
9216: CALL_OW 306
9220: IFFALSE 9366
9222: GO 9224
9224: DISABLE
// begin case JMMGirl of 1 :
9225: LD_EXP 2
9229: PUSH
9230: LD_INT 1
9232: DOUBLE
9233: EQUAL
9234: IFTRUE 9238
9236: GO 9275
9238: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9239: LD_EXP 8
9243: PPUSH
9244: LD_STRING D5-JMM-1
9246: PPUSH
9247: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9251: LD_INT 77
9253: PPUSH
9254: LD_INT 87
9256: PPUSH
9257: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
9261: LD_EXP 10
9265: PPUSH
9266: LD_STRING D5-Joan-1
9268: PPUSH
9269: CALL_OW 88
// end ; 2 :
9273: GO 9366
9275: LD_INT 2
9277: DOUBLE
9278: EQUAL
9279: IFTRUE 9283
9281: GO 9320
9283: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9284: LD_EXP 8
9288: PPUSH
9289: LD_STRING D5-JMM-1
9291: PPUSH
9292: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9296: LD_INT 77
9298: PPUSH
9299: LD_INT 87
9301: PPUSH
9302: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
9306: LD_EXP 11
9310: PPUSH
9311: LD_STRING D5-Lisa-1
9313: PPUSH
9314: CALL_OW 88
// end ; 3 :
9318: GO 9366
9320: LD_INT 3
9322: DOUBLE
9323: EQUAL
9324: IFTRUE 9328
9326: GO 9365
9328: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9329: LD_EXP 8
9333: PPUSH
9334: LD_STRING D5-JMM-1
9336: PPUSH
9337: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9341: LD_INT 77
9343: PPUSH
9344: LD_INT 87
9346: PPUSH
9347: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
9351: LD_EXP 12
9355: PPUSH
9356: LD_STRING D5-Con-1
9358: PPUSH
9359: CALL_OW 88
// end ; end ;
9363: GO 9366
9365: POP
// end ;
9366: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
9367: LD_EXP 8
9371: PPUSH
9372: CALL_OW 310
9376: PPUSH
9377: LD_INT 16
9379: PPUSH
9380: CALL_OW 308
9384: IFFALSE 9734
9386: GO 9388
9388: DISABLE
9389: LD_INT 0
9391: PPUSH
9392: PPUSH
// begin enable ;
9393: ENABLE
// if JMMGirl = 1 then
9394: LD_EXP 2
9398: PUSH
9399: LD_INT 1
9401: EQUAL
9402: IFFALSE 9419
// JMMGirlVeh := IsInUnit ( Joan ) ;
9404: LD_ADDR_VAR 0 1
9408: PUSH
9409: LD_EXP 10
9413: PPUSH
9414: CALL_OW 310
9418: ST_TO_ADDR
// if JMMGirl = 2 then
9419: LD_EXP 2
9423: PUSH
9424: LD_INT 2
9426: EQUAL
9427: IFFALSE 9444
// JMMGirlVeh := IsInUnit ( Lisa ) ;
9429: LD_ADDR_VAR 0 1
9433: PUSH
9434: LD_EXP 11
9438: PPUSH
9439: CALL_OW 310
9443: ST_TO_ADDR
// if JMMGirl = 3 then
9444: LD_EXP 2
9448: PUSH
9449: LD_INT 3
9451: EQUAL
9452: IFFALSE 9469
// JMMGirlVeh := IsInUnit ( Connie ) ;
9454: LD_ADDR_VAR 0 1
9458: PUSH
9459: LD_EXP 12
9463: PPUSH
9464: CALL_OW 310
9468: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9469: LD_EXP 8
9473: PPUSH
9474: CALL_OW 310
9478: PPUSH
9479: LD_EXP 10
9483: PPUSH
9484: CALL_OW 310
9488: PPUSH
9489: CALL_OW 296
9493: PUSH
9494: LD_INT 10
9496: LESS
9497: PUSH
9498: LD_EXP 8
9502: PPUSH
9503: CALL_OW 310
9507: PPUSH
9508: LD_EXP 11
9512: PPUSH
9513: CALL_OW 310
9517: PPUSH
9518: CALL_OW 296
9522: PUSH
9523: LD_INT 10
9525: LESS
9526: OR
9527: PUSH
9528: LD_EXP 8
9532: PPUSH
9533: CALL_OW 310
9537: PPUSH
9538: LD_EXP 12
9542: PPUSH
9543: CALL_OW 310
9547: PPUSH
9548: CALL_OW 296
9552: PUSH
9553: LD_INT 10
9555: LESS
9556: OR
9557: IFFALSE 9654
// begin case Query ( Q3b ) of 1 :
9559: LD_STRING Q3b
9561: PPUSH
9562: CALL_OW 97
9566: PUSH
9567: LD_INT 1
9569: DOUBLE
9570: EQUAL
9571: IFTRUE 9575
9573: GO 9651
9575: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9576: LD_VAR 0 1
9580: PPUSH
9581: CALL_OW 265
9585: PUSH
9586: EMPTY
9587: LIST
9588: PUSH
9589: LD_VAR 0 1
9593: PPUSH
9594: CALL_OW 262
9598: PUSH
9599: EMPTY
9600: LIST
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 263
9611: PUSH
9612: EMPTY
9613: LIST
9614: PUSH
9615: LD_VAR 0 1
9619: PPUSH
9620: CALL_OW 264
9624: PUSH
9625: EMPTY
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PPUSH
9634: LD_STRING 14_JMMGirlVeh_1
9636: PPUSH
9637: CALL_OW 39
// FinishMission ( false ) ;
9641: LD_INT 0
9643: PPUSH
9644: CALL 9888 0 1
// disable ;
9648: DISABLE
// end ; end ;
9649: GO 9652
9651: POP
// end else
9652: GO 9734
// begin if JMMGirl = 1 then
9654: LD_EXP 2
9658: PUSH
9659: LD_INT 1
9661: EQUAL
9662: IFFALSE 9679
// dec := Query ( Q3bJ ) else
9664: LD_ADDR_VAR 0 2
9668: PUSH
9669: LD_STRING Q3bJ
9671: PPUSH
9672: CALL_OW 97
9676: ST_TO_ADDR
9677: GO 9717
// if JMMGirl = 2 then
9679: LD_EXP 2
9683: PUSH
9684: LD_INT 2
9686: EQUAL
9687: IFFALSE 9704
// dec := Query ( Q3bL ) else
9689: LD_ADDR_VAR 0 2
9693: PUSH
9694: LD_STRING Q3bL
9696: PPUSH
9697: CALL_OW 97
9701: ST_TO_ADDR
9702: GO 9717
// dec := Query ( Q3bX ) ;
9704: LD_ADDR_VAR 0 2
9708: PUSH
9709: LD_STRING Q3bX
9711: PPUSH
9712: CALL_OW 97
9716: ST_TO_ADDR
// if dec = 1 then
9717: LD_VAR 0 2
9721: PUSH
9722: LD_INT 1
9724: EQUAL
9725: IFFALSE 9734
// FinishMission ( false ) ;
9727: LD_INT 0
9729: PPUSH
9730: CALL 9888 0 1
// end ; end ;
9734: PPOPN 2
9736: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9737: LD_INT 22
9739: PUSH
9740: LD_INT 3
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: LD_INT 23
9749: PUSH
9750: LD_INT 3
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 21
9759: PUSH
9760: LD_INT 1
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 69
9776: PUSH
9777: LD_INT 0
9779: EQUAL
9780: IFFALSE 9887
9782: GO 9784
9784: DISABLE
// begin DialogueOn ;
9785: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9789: LD_EXP 8
9793: PPUSH
9794: LD_STRING DEnd-JMM-1
9796: PPUSH
9797: CALL_OW 88
// case JMMGirl of 1 :
9801: LD_EXP 2
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9829
9814: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9815: LD_EXP 10
9819: PPUSH
9820: LD_STRING DEnd-Joan-1
9822: PPUSH
9823: CALL_OW 88
9827: GO 9876
9829: LD_INT 2
9831: DOUBLE
9832: EQUAL
9833: IFTRUE 9837
9835: GO 9852
9837: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9838: LD_EXP 11
9842: PPUSH
9843: LD_STRING DEnd-Lisa-1
9845: PPUSH
9846: CALL_OW 88
9850: GO 9876
9852: LD_INT 3
9854: DOUBLE
9855: EQUAL
9856: IFTRUE 9860
9858: GO 9875
9860: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9861: LD_EXP 12
9865: PPUSH
9866: LD_STRING DEnd-Con-1
9868: PPUSH
9869: CALL_OW 88
9873: GO 9876
9875: POP
// DialogueOff ;
9876: CALL_OW 7
// FinishMission ( false ) ;
9880: LD_INT 0
9882: PPUSH
9883: CALL 9888 0 1
// end ;
9887: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9888: LD_INT 0
9890: PPUSH
9891: PPUSH
9892: PPUSH
9893: PPUSH
9894: PPUSH
9895: PPUSH
// m1 := false ;
9896: LD_ADDR_VAR 0 4
9900: PUSH
9901: LD_INT 0
9903: ST_TO_ADDR
// m2 := false ;
9904: LD_ADDR_VAR 0 5
9908: PUSH
9909: LD_INT 0
9911: ST_TO_ADDR
// m3 := false ;
9912: LD_ADDR_VAR 0 6
9916: PUSH
9917: LD_INT 0
9919: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
9920: LD_ADDR_VAR 0 7
9924: PUSH
9925: LD_INT 22
9927: PUSH
9928: LD_INT 3
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 21
9937: PUSH
9938: LD_INT 1
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PPUSH
9949: CALL_OW 69
9953: PUSH
9954: LD_INT 0
9956: EQUAL
9957: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9958: LD_EXP 8
9962: PPUSH
9963: LD_STRING 14_JMM
9965: PPUSH
9966: CALL_OW 38
// if tick <= 50 50$00 then
9970: LD_OWVAR 1
9974: PUSH
9975: LD_INT 105000
9977: LESSEQUAL
9978: IFFALSE 9987
// SetAchievement ( ACH_ASPEED_14 ) ;
9980: LD_STRING ACH_ASPEED_14
9982: PPUSH
9983: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9987: LD_EXP 8
9991: PPUSH
9992: CALL_OW 310
9996: PUSH
9997: LD_EXP 8
10001: PPUSH
10002: CALL_OW 310
10006: PPUSH
10007: CALL_OW 247
10011: PUSH
10012: LD_INT 2
10014: EQUAL
10015: AND
10016: IFFALSE 10098
// begin JMMNewVeh = IsInUnit ( JMM ) ;
10018: LD_ADDR_VAR 0 3
10022: PUSH
10023: LD_EXP 8
10027: PPUSH
10028: CALL_OW 310
10032: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
10033: LD_VAR 0 3
10037: PPUSH
10038: CALL_OW 265
10042: PUSH
10043: EMPTY
10044: LIST
10045: PUSH
10046: LD_VAR 0 3
10050: PPUSH
10051: CALL_OW 262
10055: PUSH
10056: EMPTY
10057: LIST
10058: PUSH
10059: LD_VAR 0 3
10063: PPUSH
10064: CALL_OW 263
10068: PUSH
10069: EMPTY
10070: LIST
10071: PUSH
10072: LD_VAR 0 3
10076: PPUSH
10077: CALL_OW 264
10081: PUSH
10082: EMPTY
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: PPUSH
10091: LD_STRING 14_JMMVeh_1
10093: PPUSH
10094: CALL_OW 39
// end ; if fastEnd then
10098: LD_VAR 0 1
10102: IFFALSE 10193
// begin AddMedal ( fastend , - 1 ) ;
10104: LD_STRING fastend
10106: PPUSH
10107: LD_INT 1
10109: NEG
10110: PPUSH
10111: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10115: LD_STRING fastend
10117: PPUSH
10118: LD_INT 1
10120: NEG
10121: PPUSH
10122: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10126: LD_STRING fastend
10128: PPUSH
10129: LD_INT 1
10131: NEG
10132: PPUSH
10133: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10137: LD_EXP 2
10141: PPUSH
10142: LD_STRING 14_JMMGirl_1
10144: PPUSH
10145: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10149: LD_INT 0
10151: PPUSH
10152: LD_STRING 14_JMMGirlStatus_1
10154: PPUSH
10155: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10159: LD_INT 0
10161: PPUSH
10162: LD_STRING 14_KappaStatus_1
10164: PPUSH
10165: CALL_OW 39
// GiveMedals ( Eliminate ) ;
10169: LD_STRING Eliminate
10171: PPUSH
10172: CALL_OW 102
// RewardPeople ( JMM ) ;
10176: LD_EXP 8
10180: PPUSH
10181: CALL_OW 43
// YouWin ;
10185: CALL_OW 103
// exit ;
10189: GO 10839
// end else
10191: GO 10732
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10193: LD_EXP 2
10197: PPUSH
10198: LD_STRING 14_JMMGirl_1
10200: PPUSH
10201: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
10205: LD_VAR 0 7
10209: PPUSH
10210: LD_STRING 14_KappaStatus_1
10212: PPUSH
10213: CALL_OW 39
// case JMMGirl of 1 :
10217: LD_EXP 2
10221: PUSH
10222: LD_INT 1
10224: DOUBLE
10225: EQUAL
10226: IFTRUE 10230
10228: GO 10358
10230: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10231: LD_EXP 10
10235: PPUSH
10236: CALL_OW 302
10240: PUSH
10241: LD_EXP 10
10245: PPUSH
10246: CALL_OW 255
10250: PUSH
10251: LD_INT 1
10253: EQUAL
10254: AND
10255: PUSH
10256: LD_VAR 0 7
10260: PUSH
10261: LD_EXP 8
10265: PPUSH
10266: CALL_OW 310
10270: PPUSH
10271: LD_EXP 10
10275: PPUSH
10276: CALL_OW 310
10280: PPUSH
10281: CALL_OW 296
10285: PUSH
10286: LD_INT 10
10288: LESS
10289: OR
10290: AND
10291: IFFALSE 10335
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10293: LD_INT 1
10295: PPUSH
10296: LD_STRING 14_JMMGirlStatus_1
10298: PPUSH
10299: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10303: LD_EXP 10
10307: PPUSH
10308: LD_STRING 14_Joan
10310: PPUSH
10311: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10315: LD_STRING protect
10317: PPUSH
10318: LD_INT 1
10320: PPUSH
10321: CALL_OW 101
// m1 := true ;
10325: LD_ADDR_VAR 0 4
10329: PUSH
10330: LD_INT 1
10332: ST_TO_ADDR
// end else
10333: GO 10356
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10335: LD_INT 0
10337: PPUSH
10338: LD_STRING 14_JMMGirlStatus_1
10340: PPUSH
10341: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10345: LD_STRING protect
10347: PPUSH
10348: LD_INT 1
10350: NEG
10351: PPUSH
10352: CALL_OW 101
// end ; end ; 2 :
10356: GO 10631
10358: LD_INT 2
10360: DOUBLE
10361: EQUAL
10362: IFTRUE 10366
10364: GO 10494
10366: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10367: LD_EXP 11
10371: PPUSH
10372: CALL_OW 302
10376: PUSH
10377: LD_EXP 11
10381: PPUSH
10382: CALL_OW 255
10386: PUSH
10387: LD_INT 1
10389: EQUAL
10390: AND
10391: PUSH
10392: LD_VAR 0 7
10396: PUSH
10397: LD_EXP 8
10401: PPUSH
10402: CALL_OW 310
10406: PPUSH
10407: LD_EXP 11
10411: PPUSH
10412: CALL_OW 310
10416: PPUSH
10417: CALL_OW 296
10421: PUSH
10422: LD_INT 10
10424: LESS
10425: OR
10426: AND
10427: IFFALSE 10471
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10429: LD_INT 1
10431: PPUSH
10432: LD_STRING 14_JMMGirlStatus_1
10434: PPUSH
10435: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10439: LD_EXP 11
10443: PPUSH
10444: LD_STRING 14_Lisa
10446: PPUSH
10447: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10451: LD_STRING protect
10453: PPUSH
10454: LD_INT 1
10456: PPUSH
10457: CALL_OW 101
// m1 := true ;
10461: LD_ADDR_VAR 0 4
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// end else
10469: GO 10492
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10471: LD_INT 0
10473: PPUSH
10474: LD_STRING 14_JMMGirlStatus_1
10476: PPUSH
10477: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10481: LD_STRING protect
10483: PPUSH
10484: LD_INT 2
10486: NEG
10487: PPUSH
10488: CALL_OW 101
// end ; end ; 3 :
10492: GO 10631
10494: LD_INT 3
10496: DOUBLE
10497: EQUAL
10498: IFTRUE 10502
10500: GO 10630
10502: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10503: LD_EXP 12
10507: PPUSH
10508: CALL_OW 302
10512: PUSH
10513: LD_EXP 12
10517: PPUSH
10518: CALL_OW 255
10522: PUSH
10523: LD_INT 1
10525: EQUAL
10526: AND
10527: PUSH
10528: LD_VAR 0 7
10532: PUSH
10533: LD_EXP 8
10537: PPUSH
10538: CALL_OW 310
10542: PPUSH
10543: LD_EXP 12
10547: PPUSH
10548: CALL_OW 310
10552: PPUSH
10553: CALL_OW 296
10557: PUSH
10558: LD_INT 10
10560: LESS
10561: OR
10562: AND
10563: IFFALSE 10607
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10565: LD_INT 1
10567: PPUSH
10568: LD_STRING 14_JMMGirlStatus_1
10570: PPUSH
10571: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10575: LD_EXP 12
10579: PPUSH
10580: LD_STRING 14_Connie
10582: PPUSH
10583: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10587: LD_STRING protect
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 101
// m1 := true ;
10597: LD_ADDR_VAR 0 4
10601: PUSH
10602: LD_INT 1
10604: ST_TO_ADDR
// end else
10605: GO 10628
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10607: LD_INT 0
10609: PPUSH
10610: LD_STRING 14_JMMGirlStatus_1
10612: PPUSH
10613: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10617: LD_STRING protect
10619: PPUSH
10620: LD_INT 3
10622: NEG
10623: PPUSH
10624: CALL_OW 101
// end ; end ; end ;
10628: GO 10631
10630: POP
// if amLaserCounter >= 2 then
10631: LD_EXP 7
10635: PUSH
10636: LD_INT 2
10638: GREATEREQUAL
10639: IFFALSE 10661
// begin AddMedal ( double , 1 ) ;
10641: LD_STRING double
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: CALL_OW 101
// m2 := true ;
10651: LD_ADDR_VAR 0 5
10655: PUSH
10656: LD_INT 1
10658: ST_TO_ADDR
// end else
10659: GO 10695
// begin if amLaserCounter = 1 then
10661: LD_EXP 7
10665: PUSH
10666: LD_INT 1
10668: EQUAL
10669: IFFALSE 10684
// AddMedal ( double , - 2 ) else
10671: LD_STRING double
10673: PPUSH
10674: LD_INT 2
10676: NEG
10677: PPUSH
10678: CALL_OW 101
10682: GO 10695
// AddMedal ( double , - 1 ) ;
10684: LD_STRING double
10686: PPUSH
10687: LD_INT 1
10689: NEG
10690: PPUSH
10691: CALL_OW 101
// end ; if ruEliminated then
10695: LD_VAR 0 7
10699: IFFALSE 10721
// begin AddMedal ( base , 1 ) ;
10701: LD_STRING base
10703: PPUSH
10704: LD_INT 1
10706: PPUSH
10707: CALL_OW 101
// m3 := true ;
10711: LD_ADDR_VAR 0 6
10715: PUSH
10716: LD_INT 1
10718: ST_TO_ADDR
// end else
10719: GO 10732
// AddMedal ( base , - 1 ) ;
10721: LD_STRING base
10723: PPUSH
10724: LD_INT 1
10726: NEG
10727: PPUSH
10728: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10732: LD_VAR 0 4
10736: PUSH
10737: LD_VAR 0 5
10741: AND
10742: PUSH
10743: LD_VAR 0 6
10747: AND
10748: PUSH
10749: LD_OWVAR 67
10753: PUSH
10754: LD_INT 3
10756: GREATEREQUAL
10757: AND
10758: IFFALSE 10770
// SetAchievementEX ( ACH_AMER , 14 ) ;
10760: LD_STRING ACH_AMER
10762: PPUSH
10763: LD_INT 14
10765: PPUSH
10766: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10770: LD_STRING Eliminate
10772: PPUSH
10773: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10777: LD_INT 22
10779: PUSH
10780: LD_INT 1
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 3
10789: PUSH
10790: LD_INT 25
10792: PUSH
10793: LD_INT 12
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 3
10806: PUSH
10807: LD_INT 25
10809: PUSH
10810: LD_INT 16
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: LIST
10825: PPUSH
10826: CALL_OW 69
10830: PPUSH
10831: CALL_OW 43
// YouWin ;
10835: CALL_OW 103
// end ; end_of_file
10839: LD_VAR 0 2
10843: RET
// export function CreateNature ; var i , un ; begin
10844: LD_INT 0
10846: PPUSH
10847: PPUSH
10848: PPUSH
// PrepareEnchidna ;
10849: CALL 66088 0 0
// for i := 1 to 3 do
10853: LD_ADDR_VAR 0 2
10857: PUSH
10858: DOUBLE
10859: LD_INT 1
10861: DEC
10862: ST_TO_ADDR
10863: LD_INT 3
10865: PUSH
10866: FOR_TO
10867: IFFALSE 10916
// begin un := CreateHuman ;
10869: LD_ADDR_VAR 0 3
10873: PUSH
10874: CALL_OW 44
10878: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10879: LD_VAR 0 3
10883: PPUSH
10884: LD_INT 0
10886: PPUSH
10887: LD_INT 5
10889: PPUSH
10890: CALL_OW 12
10894: PPUSH
10895: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10899: LD_VAR 0 3
10903: PPUSH
10904: LD_INT 9
10906: PPUSH
10907: LD_INT 0
10909: PPUSH
10910: CALL_OW 49
// end ;
10914: GO 10866
10916: POP
10917: POP
// PrepareHorse ;
10918: CALL 66248 0 0
// for i := 1 to 2 do
10922: LD_ADDR_VAR 0 2
10926: PUSH
10927: DOUBLE
10928: LD_INT 1
10930: DEC
10931: ST_TO_ADDR
10932: LD_INT 2
10934: PUSH
10935: FOR_TO
10936: IFFALSE 10985
// begin un := CreateHuman ;
10938: LD_ADDR_VAR 0 3
10942: PUSH
10943: CALL_OW 44
10947: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10948: LD_VAR 0 3
10952: PPUSH
10953: LD_INT 0
10955: PPUSH
10956: LD_INT 5
10958: PPUSH
10959: CALL_OW 12
10963: PPUSH
10964: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10968: LD_VAR 0 3
10972: PPUSH
10973: LD_INT 9
10975: PPUSH
10976: LD_INT 0
10978: PPUSH
10979: CALL_OW 49
// end ;
10983: GO 10935
10985: POP
10986: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
10987: LD_ADDR_VAR 0 2
10991: PUSH
10992: DOUBLE
10993: LD_INT 1
10995: DEC
10996: ST_TO_ADDR
10997: LD_INT 4
10999: PUSH
11000: LD_INT 5
11002: PUSH
11003: LD_INT 5
11005: PUSH
11006: LD_INT 5
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_OWVAR 67
11019: ARRAY
11020: PUSH
11021: FOR_TO
11022: IFFALSE 11086
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
11024: LD_INT 0
11026: PPUSH
11027: LD_INT 5
11029: PPUSH
11030: CALL_OW 12
11034: PPUSH
11035: CALL 65919 0 1
// un := CreateHuman ;
11039: LD_ADDR_VAR 0 3
11043: PUSH
11044: CALL_OW 44
11048: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11049: LD_VAR 0 3
11053: PPUSH
11054: LD_INT 0
11056: PPUSH
11057: LD_INT 5
11059: PPUSH
11060: CALL_OW 12
11064: PPUSH
11065: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
11069: LD_VAR 0 3
11073: PPUSH
11074: LD_INT 8
11076: PPUSH
11077: LD_INT 0
11079: PPUSH
11080: CALL_OW 49
// end ;
11084: GO 11021
11086: POP
11087: POP
// PrepareFish ;
11088: CALL 66168 0 0
// for i := 1 to 2 do
11092: LD_ADDR_VAR 0 2
11096: PUSH
11097: DOUBLE
11098: LD_INT 1
11100: DEC
11101: ST_TO_ADDR
11102: LD_INT 2
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11155
// begin un := CreateHuman ;
11108: LD_ADDR_VAR 0 3
11112: PUSH
11113: CALL_OW 44
11117: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11118: LD_VAR 0 3
11122: PPUSH
11123: LD_INT 0
11125: PPUSH
11126: LD_INT 5
11128: PPUSH
11129: CALL_OW 12
11133: PPUSH
11134: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_INT 6
11145: PPUSH
11146: LD_INT 0
11148: PPUSH
11149: CALL_OW 49
// end ;
11153: GO 11105
11155: POP
11156: POP
// PrepareFrog ;
11157: CALL 66128 0 0
// for i := 1 to 2 do
11161: LD_ADDR_VAR 0 2
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_INT 2
11173: PUSH
11174: FOR_TO
11175: IFFALSE 11224
// begin un := CreateHuman ;
11177: LD_ADDR_VAR 0 3
11181: PUSH
11182: CALL_OW 44
11186: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11187: LD_VAR 0 3
11191: PPUSH
11192: LD_INT 0
11194: PPUSH
11195: LD_INT 5
11197: PPUSH
11198: CALL_OW 12
11202: PPUSH
11203: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
11207: LD_VAR 0 3
11211: PPUSH
11212: LD_INT 7
11214: PPUSH
11215: LD_INT 0
11217: PPUSH
11218: CALL_OW 49
// end ;
11222: GO 11174
11224: POP
11225: POP
// PrepareMastodont ;
11226: CALL 66288 0 0
// un := CreateVehicle ;
11230: LD_ADDR_VAR 0 3
11234: PUSH
11235: CALL_OW 45
11239: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
11240: LD_VAR 0 3
11244: PPUSH
11245: LD_INT 166
11247: PPUSH
11248: LD_INT 134
11250: PPUSH
11251: LD_INT 1
11253: PPUSH
11254: LD_INT 0
11256: PPUSH
11257: CALL 71791 0 5
// end ; end_of_file
11261: LD_VAR 0 1
11265: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
11266: LD_INT 14
11268: PPUSH
11269: CALL_OW 435
11273: PUSH
11274: LD_INT 20
11276: LESS
11277: IFFALSE 11319
11279: GO 11281
11281: DISABLE
// begin enable ;
11282: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11283: LD_INT 35
11285: PPUSH
11286: LD_INT 735
11288: PPUSH
11289: CALL_OW 12
11293: PPUSH
11294: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 5
11303: PPUSH
11304: CALL_OW 12
11308: PPUSH
11309: LD_INT 14
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 55
// end ;
11319: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11320: LD_INT 13
11322: PPUSH
11323: CALL_OW 435
11327: PUSH
11328: LD_INT 30
11330: LESS
11331: IFFALSE 11373
11333: GO 11335
11335: DISABLE
// begin enable ;
11336: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11337: LD_INT 35
11339: PPUSH
11340: LD_INT 735
11342: PPUSH
11343: CALL_OW 12
11347: PPUSH
11348: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
11352: LD_INT 1
11354: PPUSH
11355: LD_INT 5
11357: PPUSH
11358: CALL_OW 12
11362: PPUSH
11363: LD_INT 13
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 55
// end ;
11373: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11374: LD_INT 13
11376: PPUSH
11377: CALL_OW 435
11381: PUSH
11382: LD_INT 30
11384: LESS
11385: IFFALSE 11418
11387: GO 11389
11389: DISABLE
// begin enable ;
11390: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
11391: LD_INT 1
11393: PPUSH
11394: LD_INT 5
11396: PPUSH
11397: CALL_OW 12
11401: PPUSH
11402: LD_INT 133
11404: PPUSH
11405: LD_INT 122
11407: PPUSH
11408: LD_INT 20
11410: PPUSH
11411: LD_INT 1
11413: PPUSH
11414: CALL_OW 56
// end ; end_of_file end_of_file
11418: END
// export globalGameSaveCounter ; every 0 0$1 do
11419: GO 11421
11421: DISABLE
// begin enable ;
11422: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11423: LD_STRING updateTimer(
11425: PUSH
11426: LD_OWVAR 1
11430: STR
11431: PUSH
11432: LD_STRING );
11434: STR
11435: PPUSH
11436: CALL_OW 559
// end ;
11440: END
// every 0 0$1 do
11441: GO 11443
11443: DISABLE
// begin globalGameSaveCounter := 0 ;
11444: LD_ADDR_EXP 21
11448: PUSH
11449: LD_INT 0
11451: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11452: LD_STRING setGameSaveCounter(0)
11454: PPUSH
11455: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11459: LD_STRING initStreamRollete();
11461: PPUSH
11462: CALL_OW 559
// InitStreamMode ;
11466: CALL 12792 0 0
// DefineStreamItems ( false ) ;
11470: LD_INT 0
11472: PPUSH
11473: CALL 13256 0 1
// end ;
11477: END
// export function SOS_MapStart ( ) ; begin
11478: LD_INT 0
11480: PPUSH
// if streamModeActive then
11481: LD_EXP 22
11485: IFFALSE 11494
// DefineStreamItems ( true ) ;
11487: LD_INT 1
11489: PPUSH
11490: CALL 13256 0 1
// UpdateLuaVariables ( ) ;
11494: CALL 11511 0 0
// UpdateFactoryWaypoints ( ) ;
11498: CALL 26125 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11502: CALL 26382 0 0
// end ;
11506: LD_VAR 0 1
11510: RET
// function UpdateLuaVariables ( ) ; begin
11511: LD_INT 0
11513: PPUSH
// if globalGameSaveCounter then
11514: LD_EXP 21
11518: IFFALSE 11552
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11520: LD_ADDR_EXP 21
11524: PUSH
11525: LD_EXP 21
11529: PPUSH
11530: CALL 71012 0 1
11534: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11535: LD_STRING setGameSaveCounter(
11537: PUSH
11538: LD_EXP 21
11542: STR
11543: PUSH
11544: LD_STRING )
11546: STR
11547: PPUSH
11548: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11552: LD_STRING setGameDifficulty(
11554: PUSH
11555: LD_OWVAR 67
11559: STR
11560: PUSH
11561: LD_STRING )
11563: STR
11564: PPUSH
11565: CALL_OW 559
// end ;
11569: LD_VAR 0 1
11573: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11574: LD_INT 0
11576: PPUSH
// if p2 = stream_mode then
11577: LD_VAR 0 2
11581: PUSH
11582: LD_INT 100
11584: EQUAL
11585: IFFALSE 12588
// begin if not StreamModeActive then
11587: LD_EXP 22
11591: NOT
11592: IFFALSE 11602
// StreamModeActive := true ;
11594: LD_ADDR_EXP 22
11598: PUSH
11599: LD_INT 1
11601: ST_TO_ADDR
// if p3 = 0 then
11602: LD_VAR 0 3
11606: PUSH
11607: LD_INT 0
11609: EQUAL
11610: IFFALSE 11616
// InitStreamMode ;
11612: CALL 12792 0 0
// if p3 = 1 then
11616: LD_VAR 0 3
11620: PUSH
11621: LD_INT 1
11623: EQUAL
11624: IFFALSE 11634
// sRocket := true ;
11626: LD_ADDR_EXP 27
11630: PUSH
11631: LD_INT 1
11633: ST_TO_ADDR
// if p3 = 2 then
11634: LD_VAR 0 3
11638: PUSH
11639: LD_INT 2
11641: EQUAL
11642: IFFALSE 11652
// sSpeed := true ;
11644: LD_ADDR_EXP 26
11648: PUSH
11649: LD_INT 1
11651: ST_TO_ADDR
// if p3 = 3 then
11652: LD_VAR 0 3
11656: PUSH
11657: LD_INT 3
11659: EQUAL
11660: IFFALSE 11670
// sEngine := true ;
11662: LD_ADDR_EXP 28
11666: PUSH
11667: LD_INT 1
11669: ST_TO_ADDR
// if p3 = 4 then
11670: LD_VAR 0 3
11674: PUSH
11675: LD_INT 4
11677: EQUAL
11678: IFFALSE 11688
// sSpec := true ;
11680: LD_ADDR_EXP 25
11684: PUSH
11685: LD_INT 1
11687: ST_TO_ADDR
// if p3 = 5 then
11688: LD_VAR 0 3
11692: PUSH
11693: LD_INT 5
11695: EQUAL
11696: IFFALSE 11706
// sLevel := true ;
11698: LD_ADDR_EXP 29
11702: PUSH
11703: LD_INT 1
11705: ST_TO_ADDR
// if p3 = 6 then
11706: LD_VAR 0 3
11710: PUSH
11711: LD_INT 6
11713: EQUAL
11714: IFFALSE 11724
// sArmoury := true ;
11716: LD_ADDR_EXP 30
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// if p3 = 7 then
11724: LD_VAR 0 3
11728: PUSH
11729: LD_INT 7
11731: EQUAL
11732: IFFALSE 11742
// sRadar := true ;
11734: LD_ADDR_EXP 31
11738: PUSH
11739: LD_INT 1
11741: ST_TO_ADDR
// if p3 = 8 then
11742: LD_VAR 0 3
11746: PUSH
11747: LD_INT 8
11749: EQUAL
11750: IFFALSE 11760
// sBunker := true ;
11752: LD_ADDR_EXP 32
11756: PUSH
11757: LD_INT 1
11759: ST_TO_ADDR
// if p3 = 9 then
11760: LD_VAR 0 3
11764: PUSH
11765: LD_INT 9
11767: EQUAL
11768: IFFALSE 11778
// sHack := true ;
11770: LD_ADDR_EXP 33
11774: PUSH
11775: LD_INT 1
11777: ST_TO_ADDR
// if p3 = 10 then
11778: LD_VAR 0 3
11782: PUSH
11783: LD_INT 10
11785: EQUAL
11786: IFFALSE 11796
// sFire := true ;
11788: LD_ADDR_EXP 34
11792: PUSH
11793: LD_INT 1
11795: ST_TO_ADDR
// if p3 = 11 then
11796: LD_VAR 0 3
11800: PUSH
11801: LD_INT 11
11803: EQUAL
11804: IFFALSE 11814
// sRefresh := true ;
11806: LD_ADDR_EXP 35
11810: PUSH
11811: LD_INT 1
11813: ST_TO_ADDR
// if p3 = 12 then
11814: LD_VAR 0 3
11818: PUSH
11819: LD_INT 12
11821: EQUAL
11822: IFFALSE 11832
// sExp := true ;
11824: LD_ADDR_EXP 36
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// if p3 = 13 then
11832: LD_VAR 0 3
11836: PUSH
11837: LD_INT 13
11839: EQUAL
11840: IFFALSE 11850
// sDepot := true ;
11842: LD_ADDR_EXP 37
11846: PUSH
11847: LD_INT 1
11849: ST_TO_ADDR
// if p3 = 14 then
11850: LD_VAR 0 3
11854: PUSH
11855: LD_INT 14
11857: EQUAL
11858: IFFALSE 11868
// sFlag := true ;
11860: LD_ADDR_EXP 38
11864: PUSH
11865: LD_INT 1
11867: ST_TO_ADDR
// if p3 = 15 then
11868: LD_VAR 0 3
11872: PUSH
11873: LD_INT 15
11875: EQUAL
11876: IFFALSE 11886
// sKamikadze := true ;
11878: LD_ADDR_EXP 46
11882: PUSH
11883: LD_INT 1
11885: ST_TO_ADDR
// if p3 = 16 then
11886: LD_VAR 0 3
11890: PUSH
11891: LD_INT 16
11893: EQUAL
11894: IFFALSE 11904
// sTroll := true ;
11896: LD_ADDR_EXP 47
11900: PUSH
11901: LD_INT 1
11903: ST_TO_ADDR
// if p3 = 17 then
11904: LD_VAR 0 3
11908: PUSH
11909: LD_INT 17
11911: EQUAL
11912: IFFALSE 11922
// sSlow := true ;
11914: LD_ADDR_EXP 48
11918: PUSH
11919: LD_INT 1
11921: ST_TO_ADDR
// if p3 = 18 then
11922: LD_VAR 0 3
11926: PUSH
11927: LD_INT 18
11929: EQUAL
11930: IFFALSE 11940
// sLack := true ;
11932: LD_ADDR_EXP 49
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// if p3 = 19 then
11940: LD_VAR 0 3
11944: PUSH
11945: LD_INT 19
11947: EQUAL
11948: IFFALSE 11958
// sTank := true ;
11950: LD_ADDR_EXP 51
11954: PUSH
11955: LD_INT 1
11957: ST_TO_ADDR
// if p3 = 20 then
11958: LD_VAR 0 3
11962: PUSH
11963: LD_INT 20
11965: EQUAL
11966: IFFALSE 11976
// sRemote := true ;
11968: LD_ADDR_EXP 52
11972: PUSH
11973: LD_INT 1
11975: ST_TO_ADDR
// if p3 = 21 then
11976: LD_VAR 0 3
11980: PUSH
11981: LD_INT 21
11983: EQUAL
11984: IFFALSE 11994
// sPowell := true ;
11986: LD_ADDR_EXP 53
11990: PUSH
11991: LD_INT 1
11993: ST_TO_ADDR
// if p3 = 22 then
11994: LD_VAR 0 3
11998: PUSH
11999: LD_INT 22
12001: EQUAL
12002: IFFALSE 12012
// sTeleport := true ;
12004: LD_ADDR_EXP 56
12008: PUSH
12009: LD_INT 1
12011: ST_TO_ADDR
// if p3 = 23 then
12012: LD_VAR 0 3
12016: PUSH
12017: LD_INT 23
12019: EQUAL
12020: IFFALSE 12030
// sOilTower := true ;
12022: LD_ADDR_EXP 58
12026: PUSH
12027: LD_INT 1
12029: ST_TO_ADDR
// if p3 = 24 then
12030: LD_VAR 0 3
12034: PUSH
12035: LD_INT 24
12037: EQUAL
12038: IFFALSE 12048
// sShovel := true ;
12040: LD_ADDR_EXP 59
12044: PUSH
12045: LD_INT 1
12047: ST_TO_ADDR
// if p3 = 25 then
12048: LD_VAR 0 3
12052: PUSH
12053: LD_INT 25
12055: EQUAL
12056: IFFALSE 12066
// sSheik := true ;
12058: LD_ADDR_EXP 60
12062: PUSH
12063: LD_INT 1
12065: ST_TO_ADDR
// if p3 = 26 then
12066: LD_VAR 0 3
12070: PUSH
12071: LD_INT 26
12073: EQUAL
12074: IFFALSE 12084
// sEarthquake := true ;
12076: LD_ADDR_EXP 62
12080: PUSH
12081: LD_INT 1
12083: ST_TO_ADDR
// if p3 = 27 then
12084: LD_VAR 0 3
12088: PUSH
12089: LD_INT 27
12091: EQUAL
12092: IFFALSE 12102
// sAI := true ;
12094: LD_ADDR_EXP 63
12098: PUSH
12099: LD_INT 1
12101: ST_TO_ADDR
// if p3 = 28 then
12102: LD_VAR 0 3
12106: PUSH
12107: LD_INT 28
12109: EQUAL
12110: IFFALSE 12120
// sCargo := true ;
12112: LD_ADDR_EXP 66
12116: PUSH
12117: LD_INT 1
12119: ST_TO_ADDR
// if p3 = 29 then
12120: LD_VAR 0 3
12124: PUSH
12125: LD_INT 29
12127: EQUAL
12128: IFFALSE 12138
// sDLaser := true ;
12130: LD_ADDR_EXP 67
12134: PUSH
12135: LD_INT 1
12137: ST_TO_ADDR
// if p3 = 30 then
12138: LD_VAR 0 3
12142: PUSH
12143: LD_INT 30
12145: EQUAL
12146: IFFALSE 12156
// sExchange := true ;
12148: LD_ADDR_EXP 68
12152: PUSH
12153: LD_INT 1
12155: ST_TO_ADDR
// if p3 = 31 then
12156: LD_VAR 0 3
12160: PUSH
12161: LD_INT 31
12163: EQUAL
12164: IFFALSE 12174
// sFac := true ;
12166: LD_ADDR_EXP 69
12170: PUSH
12171: LD_INT 1
12173: ST_TO_ADDR
// if p3 = 32 then
12174: LD_VAR 0 3
12178: PUSH
12179: LD_INT 32
12181: EQUAL
12182: IFFALSE 12192
// sPower := true ;
12184: LD_ADDR_EXP 70
12188: PUSH
12189: LD_INT 1
12191: ST_TO_ADDR
// if p3 = 33 then
12192: LD_VAR 0 3
12196: PUSH
12197: LD_INT 33
12199: EQUAL
12200: IFFALSE 12210
// sRandom := true ;
12202: LD_ADDR_EXP 71
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// if p3 = 34 then
12210: LD_VAR 0 3
12214: PUSH
12215: LD_INT 34
12217: EQUAL
12218: IFFALSE 12228
// sShield := true ;
12220: LD_ADDR_EXP 72
12224: PUSH
12225: LD_INT 1
12227: ST_TO_ADDR
// if p3 = 35 then
12228: LD_VAR 0 3
12232: PUSH
12233: LD_INT 35
12235: EQUAL
12236: IFFALSE 12246
// sTime := true ;
12238: LD_ADDR_EXP 73
12242: PUSH
12243: LD_INT 1
12245: ST_TO_ADDR
// if p3 = 36 then
12246: LD_VAR 0 3
12250: PUSH
12251: LD_INT 36
12253: EQUAL
12254: IFFALSE 12264
// sTools := true ;
12256: LD_ADDR_EXP 74
12260: PUSH
12261: LD_INT 1
12263: ST_TO_ADDR
// if p3 = 101 then
12264: LD_VAR 0 3
12268: PUSH
12269: LD_INT 101
12271: EQUAL
12272: IFFALSE 12282
// sSold := true ;
12274: LD_ADDR_EXP 39
12278: PUSH
12279: LD_INT 1
12281: ST_TO_ADDR
// if p3 = 102 then
12282: LD_VAR 0 3
12286: PUSH
12287: LD_INT 102
12289: EQUAL
12290: IFFALSE 12300
// sDiff := true ;
12292: LD_ADDR_EXP 40
12296: PUSH
12297: LD_INT 1
12299: ST_TO_ADDR
// if p3 = 103 then
12300: LD_VAR 0 3
12304: PUSH
12305: LD_INT 103
12307: EQUAL
12308: IFFALSE 12318
// sFog := true ;
12310: LD_ADDR_EXP 43
12314: PUSH
12315: LD_INT 1
12317: ST_TO_ADDR
// if p3 = 104 then
12318: LD_VAR 0 3
12322: PUSH
12323: LD_INT 104
12325: EQUAL
12326: IFFALSE 12336
// sReset := true ;
12328: LD_ADDR_EXP 44
12332: PUSH
12333: LD_INT 1
12335: ST_TO_ADDR
// if p3 = 105 then
12336: LD_VAR 0 3
12340: PUSH
12341: LD_INT 105
12343: EQUAL
12344: IFFALSE 12354
// sSun := true ;
12346: LD_ADDR_EXP 45
12350: PUSH
12351: LD_INT 1
12353: ST_TO_ADDR
// if p3 = 106 then
12354: LD_VAR 0 3
12358: PUSH
12359: LD_INT 106
12361: EQUAL
12362: IFFALSE 12372
// sTiger := true ;
12364: LD_ADDR_EXP 41
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// if p3 = 107 then
12372: LD_VAR 0 3
12376: PUSH
12377: LD_INT 107
12379: EQUAL
12380: IFFALSE 12390
// sBomb := true ;
12382: LD_ADDR_EXP 42
12386: PUSH
12387: LD_INT 1
12389: ST_TO_ADDR
// if p3 = 108 then
12390: LD_VAR 0 3
12394: PUSH
12395: LD_INT 108
12397: EQUAL
12398: IFFALSE 12408
// sWound := true ;
12400: LD_ADDR_EXP 50
12404: PUSH
12405: LD_INT 1
12407: ST_TO_ADDR
// if p3 = 109 then
12408: LD_VAR 0 3
12412: PUSH
12413: LD_INT 109
12415: EQUAL
12416: IFFALSE 12426
// sBetray := true ;
12418: LD_ADDR_EXP 54
12422: PUSH
12423: LD_INT 1
12425: ST_TO_ADDR
// if p3 = 110 then
12426: LD_VAR 0 3
12430: PUSH
12431: LD_INT 110
12433: EQUAL
12434: IFFALSE 12444
// sContamin := true ;
12436: LD_ADDR_EXP 55
12440: PUSH
12441: LD_INT 1
12443: ST_TO_ADDR
// if p3 = 111 then
12444: LD_VAR 0 3
12448: PUSH
12449: LD_INT 111
12451: EQUAL
12452: IFFALSE 12462
// sOil := true ;
12454: LD_ADDR_EXP 57
12458: PUSH
12459: LD_INT 1
12461: ST_TO_ADDR
// if p3 = 112 then
12462: LD_VAR 0 3
12466: PUSH
12467: LD_INT 112
12469: EQUAL
12470: IFFALSE 12480
// sStu := true ;
12472: LD_ADDR_EXP 61
12476: PUSH
12477: LD_INT 1
12479: ST_TO_ADDR
// if p3 = 113 then
12480: LD_VAR 0 3
12484: PUSH
12485: LD_INT 113
12487: EQUAL
12488: IFFALSE 12498
// sBazooka := true ;
12490: LD_ADDR_EXP 64
12494: PUSH
12495: LD_INT 1
12497: ST_TO_ADDR
// if p3 = 114 then
12498: LD_VAR 0 3
12502: PUSH
12503: LD_INT 114
12505: EQUAL
12506: IFFALSE 12516
// sMortar := true ;
12508: LD_ADDR_EXP 65
12512: PUSH
12513: LD_INT 1
12515: ST_TO_ADDR
// if p3 = 115 then
12516: LD_VAR 0 3
12520: PUSH
12521: LD_INT 115
12523: EQUAL
12524: IFFALSE 12534
// sRanger := true ;
12526: LD_ADDR_EXP 75
12530: PUSH
12531: LD_INT 1
12533: ST_TO_ADDR
// if p3 = 116 then
12534: LD_VAR 0 3
12538: PUSH
12539: LD_INT 116
12541: EQUAL
12542: IFFALSE 12552
// sComputer := true ;
12544: LD_ADDR_EXP 76
12548: PUSH
12549: LD_INT 1
12551: ST_TO_ADDR
// if p3 = 117 then
12552: LD_VAR 0 3
12556: PUSH
12557: LD_INT 117
12559: EQUAL
12560: IFFALSE 12570
// s30 := true ;
12562: LD_ADDR_EXP 77
12566: PUSH
12567: LD_INT 1
12569: ST_TO_ADDR
// if p3 = 118 then
12570: LD_VAR 0 3
12574: PUSH
12575: LD_INT 118
12577: EQUAL
12578: IFFALSE 12588
// s60 := true ;
12580: LD_ADDR_EXP 78
12584: PUSH
12585: LD_INT 1
12587: ST_TO_ADDR
// end ; if p2 = hack_mode then
12588: LD_VAR 0 2
12592: PUSH
12593: LD_INT 101
12595: EQUAL
12596: IFFALSE 12724
// begin case p3 of 1 :
12598: LD_VAR 0 3
12602: PUSH
12603: LD_INT 1
12605: DOUBLE
12606: EQUAL
12607: IFTRUE 12611
12609: GO 12618
12611: POP
// hHackUnlimitedResources ; 2 :
12612: CALL 24871 0 0
12616: GO 12724
12618: LD_INT 2
12620: DOUBLE
12621: EQUAL
12622: IFTRUE 12626
12624: GO 12633
12626: POP
// hHackSetLevel10 ; 3 :
12627: CALL 25004 0 0
12631: GO 12724
12633: LD_INT 3
12635: DOUBLE
12636: EQUAL
12637: IFTRUE 12641
12639: GO 12648
12641: POP
// hHackSetLevel10YourUnits ; 4 :
12642: CALL 25089 0 0
12646: GO 12724
12648: LD_INT 4
12650: DOUBLE
12651: EQUAL
12652: IFTRUE 12656
12654: GO 12663
12656: POP
// hHackInvincible ; 5 :
12657: CALL 25537 0 0
12661: GO 12724
12663: LD_INT 5
12665: DOUBLE
12666: EQUAL
12667: IFTRUE 12671
12669: GO 12678
12671: POP
// hHackInvisible ; 6 :
12672: CALL 25648 0 0
12676: GO 12724
12678: LD_INT 6
12680: DOUBLE
12681: EQUAL
12682: IFTRUE 12686
12684: GO 12693
12686: POP
// hHackChangeYourSide ; 7 :
12687: CALL 25705 0 0
12691: GO 12724
12693: LD_INT 7
12695: DOUBLE
12696: EQUAL
12697: IFTRUE 12701
12699: GO 12708
12701: POP
// hHackChangeUnitSide ; 8 :
12702: CALL 25747 0 0
12706: GO 12724
12708: LD_INT 8
12710: DOUBLE
12711: EQUAL
12712: IFTRUE 12716
12714: GO 12723
12716: POP
// hHackFog ; end ;
12717: CALL 25848 0 0
12721: GO 12724
12723: POP
// end ; if p2 = game_save_mode then
12724: LD_VAR 0 2
12728: PUSH
12729: LD_INT 102
12731: EQUAL
12732: IFFALSE 12787
// begin if p3 = 1 then
12734: LD_VAR 0 3
12738: PUSH
12739: LD_INT 1
12741: EQUAL
12742: IFFALSE 12754
// globalGameSaveCounter := p4 ;
12744: LD_ADDR_EXP 21
12748: PUSH
12749: LD_VAR 0 4
12753: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12754: LD_VAR 0 3
12758: PUSH
12759: LD_INT 2
12761: EQUAL
12762: PUSH
12763: LD_EXP 21
12767: AND
12768: IFFALSE 12787
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12770: LD_STRING setGameSaveCounter(
12772: PUSH
12773: LD_EXP 21
12777: STR
12778: PUSH
12779: LD_STRING )
12781: STR
12782: PPUSH
12783: CALL_OW 559
// end ; end ;
12787: LD_VAR 0 7
12791: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12792: LD_INT 0
12794: PPUSH
// streamModeActive := false ;
12795: LD_ADDR_EXP 22
12799: PUSH
12800: LD_INT 0
12802: ST_TO_ADDR
// normalCounter := 36 ;
12803: LD_ADDR_EXP 23
12807: PUSH
12808: LD_INT 36
12810: ST_TO_ADDR
// hardcoreCounter := 18 ;
12811: LD_ADDR_EXP 24
12815: PUSH
12816: LD_INT 18
12818: ST_TO_ADDR
// sRocket := false ;
12819: LD_ADDR_EXP 27
12823: PUSH
12824: LD_INT 0
12826: ST_TO_ADDR
// sSpeed := false ;
12827: LD_ADDR_EXP 26
12831: PUSH
12832: LD_INT 0
12834: ST_TO_ADDR
// sEngine := false ;
12835: LD_ADDR_EXP 28
12839: PUSH
12840: LD_INT 0
12842: ST_TO_ADDR
// sSpec := false ;
12843: LD_ADDR_EXP 25
12847: PUSH
12848: LD_INT 0
12850: ST_TO_ADDR
// sLevel := false ;
12851: LD_ADDR_EXP 29
12855: PUSH
12856: LD_INT 0
12858: ST_TO_ADDR
// sArmoury := false ;
12859: LD_ADDR_EXP 30
12863: PUSH
12864: LD_INT 0
12866: ST_TO_ADDR
// sRadar := false ;
12867: LD_ADDR_EXP 31
12871: PUSH
12872: LD_INT 0
12874: ST_TO_ADDR
// sBunker := false ;
12875: LD_ADDR_EXP 32
12879: PUSH
12880: LD_INT 0
12882: ST_TO_ADDR
// sHack := false ;
12883: LD_ADDR_EXP 33
12887: PUSH
12888: LD_INT 0
12890: ST_TO_ADDR
// sFire := false ;
12891: LD_ADDR_EXP 34
12895: PUSH
12896: LD_INT 0
12898: ST_TO_ADDR
// sRefresh := false ;
12899: LD_ADDR_EXP 35
12903: PUSH
12904: LD_INT 0
12906: ST_TO_ADDR
// sExp := false ;
12907: LD_ADDR_EXP 36
12911: PUSH
12912: LD_INT 0
12914: ST_TO_ADDR
// sDepot := false ;
12915: LD_ADDR_EXP 37
12919: PUSH
12920: LD_INT 0
12922: ST_TO_ADDR
// sFlag := false ;
12923: LD_ADDR_EXP 38
12927: PUSH
12928: LD_INT 0
12930: ST_TO_ADDR
// sKamikadze := false ;
12931: LD_ADDR_EXP 46
12935: PUSH
12936: LD_INT 0
12938: ST_TO_ADDR
// sTroll := false ;
12939: LD_ADDR_EXP 47
12943: PUSH
12944: LD_INT 0
12946: ST_TO_ADDR
// sSlow := false ;
12947: LD_ADDR_EXP 48
12951: PUSH
12952: LD_INT 0
12954: ST_TO_ADDR
// sLack := false ;
12955: LD_ADDR_EXP 49
12959: PUSH
12960: LD_INT 0
12962: ST_TO_ADDR
// sTank := false ;
12963: LD_ADDR_EXP 51
12967: PUSH
12968: LD_INT 0
12970: ST_TO_ADDR
// sRemote := false ;
12971: LD_ADDR_EXP 52
12975: PUSH
12976: LD_INT 0
12978: ST_TO_ADDR
// sPowell := false ;
12979: LD_ADDR_EXP 53
12983: PUSH
12984: LD_INT 0
12986: ST_TO_ADDR
// sTeleport := false ;
12987: LD_ADDR_EXP 56
12991: PUSH
12992: LD_INT 0
12994: ST_TO_ADDR
// sOilTower := false ;
12995: LD_ADDR_EXP 58
12999: PUSH
13000: LD_INT 0
13002: ST_TO_ADDR
// sShovel := false ;
13003: LD_ADDR_EXP 59
13007: PUSH
13008: LD_INT 0
13010: ST_TO_ADDR
// sSheik := false ;
13011: LD_ADDR_EXP 60
13015: PUSH
13016: LD_INT 0
13018: ST_TO_ADDR
// sEarthquake := false ;
13019: LD_ADDR_EXP 62
13023: PUSH
13024: LD_INT 0
13026: ST_TO_ADDR
// sAI := false ;
13027: LD_ADDR_EXP 63
13031: PUSH
13032: LD_INT 0
13034: ST_TO_ADDR
// sCargo := false ;
13035: LD_ADDR_EXP 66
13039: PUSH
13040: LD_INT 0
13042: ST_TO_ADDR
// sDLaser := false ;
13043: LD_ADDR_EXP 67
13047: PUSH
13048: LD_INT 0
13050: ST_TO_ADDR
// sExchange := false ;
13051: LD_ADDR_EXP 68
13055: PUSH
13056: LD_INT 0
13058: ST_TO_ADDR
// sFac := false ;
13059: LD_ADDR_EXP 69
13063: PUSH
13064: LD_INT 0
13066: ST_TO_ADDR
// sPower := false ;
13067: LD_ADDR_EXP 70
13071: PUSH
13072: LD_INT 0
13074: ST_TO_ADDR
// sRandom := false ;
13075: LD_ADDR_EXP 71
13079: PUSH
13080: LD_INT 0
13082: ST_TO_ADDR
// sShield := false ;
13083: LD_ADDR_EXP 72
13087: PUSH
13088: LD_INT 0
13090: ST_TO_ADDR
// sTime := false ;
13091: LD_ADDR_EXP 73
13095: PUSH
13096: LD_INT 0
13098: ST_TO_ADDR
// sTools := false ;
13099: LD_ADDR_EXP 74
13103: PUSH
13104: LD_INT 0
13106: ST_TO_ADDR
// sSold := false ;
13107: LD_ADDR_EXP 39
13111: PUSH
13112: LD_INT 0
13114: ST_TO_ADDR
// sDiff := false ;
13115: LD_ADDR_EXP 40
13119: PUSH
13120: LD_INT 0
13122: ST_TO_ADDR
// sFog := false ;
13123: LD_ADDR_EXP 43
13127: PUSH
13128: LD_INT 0
13130: ST_TO_ADDR
// sReset := false ;
13131: LD_ADDR_EXP 44
13135: PUSH
13136: LD_INT 0
13138: ST_TO_ADDR
// sSun := false ;
13139: LD_ADDR_EXP 45
13143: PUSH
13144: LD_INT 0
13146: ST_TO_ADDR
// sTiger := false ;
13147: LD_ADDR_EXP 41
13151: PUSH
13152: LD_INT 0
13154: ST_TO_ADDR
// sBomb := false ;
13155: LD_ADDR_EXP 42
13159: PUSH
13160: LD_INT 0
13162: ST_TO_ADDR
// sWound := false ;
13163: LD_ADDR_EXP 50
13167: PUSH
13168: LD_INT 0
13170: ST_TO_ADDR
// sBetray := false ;
13171: LD_ADDR_EXP 54
13175: PUSH
13176: LD_INT 0
13178: ST_TO_ADDR
// sContamin := false ;
13179: LD_ADDR_EXP 55
13183: PUSH
13184: LD_INT 0
13186: ST_TO_ADDR
// sOil := false ;
13187: LD_ADDR_EXP 57
13191: PUSH
13192: LD_INT 0
13194: ST_TO_ADDR
// sStu := false ;
13195: LD_ADDR_EXP 61
13199: PUSH
13200: LD_INT 0
13202: ST_TO_ADDR
// sBazooka := false ;
13203: LD_ADDR_EXP 64
13207: PUSH
13208: LD_INT 0
13210: ST_TO_ADDR
// sMortar := false ;
13211: LD_ADDR_EXP 65
13215: PUSH
13216: LD_INT 0
13218: ST_TO_ADDR
// sRanger := false ;
13219: LD_ADDR_EXP 75
13223: PUSH
13224: LD_INT 0
13226: ST_TO_ADDR
// sComputer := false ;
13227: LD_ADDR_EXP 76
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// s30 := false ;
13235: LD_ADDR_EXP 77
13239: PUSH
13240: LD_INT 0
13242: ST_TO_ADDR
// s60 := false ;
13243: LD_ADDR_EXP 78
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// end ;
13251: LD_VAR 0 1
13255: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13256: LD_INT 0
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
13262: PPUSH
13263: PPUSH
13264: PPUSH
// result := [ ] ;
13265: LD_ADDR_VAR 0 2
13269: PUSH
13270: EMPTY
13271: ST_TO_ADDR
// if campaign_id = 1 then
13272: LD_OWVAR 69
13276: PUSH
13277: LD_INT 1
13279: EQUAL
13280: IFFALSE 16446
// begin case mission_number of 1 :
13282: LD_OWVAR 70
13286: PUSH
13287: LD_INT 1
13289: DOUBLE
13290: EQUAL
13291: IFTRUE 13295
13293: GO 13371
13295: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13296: LD_ADDR_VAR 0 2
13300: PUSH
13301: LD_INT 2
13303: PUSH
13304: LD_INT 4
13306: PUSH
13307: LD_INT 11
13309: PUSH
13310: LD_INT 12
13312: PUSH
13313: LD_INT 15
13315: PUSH
13316: LD_INT 16
13318: PUSH
13319: LD_INT 22
13321: PUSH
13322: LD_INT 23
13324: PUSH
13325: LD_INT 26
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 101
13341: PUSH
13342: LD_INT 102
13344: PUSH
13345: LD_INT 106
13347: PUSH
13348: LD_INT 116
13350: PUSH
13351: LD_INT 117
13353: PUSH
13354: LD_INT 118
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: ST_TO_ADDR
13369: GO 16444
13371: LD_INT 2
13373: DOUBLE
13374: EQUAL
13375: IFTRUE 13379
13377: GO 13463
13379: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13380: LD_ADDR_VAR 0 2
13384: PUSH
13385: LD_INT 2
13387: PUSH
13388: LD_INT 4
13390: PUSH
13391: LD_INT 11
13393: PUSH
13394: LD_INT 12
13396: PUSH
13397: LD_INT 15
13399: PUSH
13400: LD_INT 16
13402: PUSH
13403: LD_INT 22
13405: PUSH
13406: LD_INT 23
13408: PUSH
13409: LD_INT 26
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 101
13425: PUSH
13426: LD_INT 102
13428: PUSH
13429: LD_INT 105
13431: PUSH
13432: LD_INT 106
13434: PUSH
13435: LD_INT 108
13437: PUSH
13438: LD_INT 116
13440: PUSH
13441: LD_INT 117
13443: PUSH
13444: LD_INT 118
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: ST_TO_ADDR
13461: GO 16444
13463: LD_INT 3
13465: DOUBLE
13466: EQUAL
13467: IFTRUE 13471
13469: GO 13559
13471: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13472: LD_ADDR_VAR 0 2
13476: PUSH
13477: LD_INT 2
13479: PUSH
13480: LD_INT 4
13482: PUSH
13483: LD_INT 5
13485: PUSH
13486: LD_INT 11
13488: PUSH
13489: LD_INT 12
13491: PUSH
13492: LD_INT 15
13494: PUSH
13495: LD_INT 16
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 26
13503: PUSH
13504: LD_INT 36
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 101
13521: PUSH
13522: LD_INT 102
13524: PUSH
13525: LD_INT 105
13527: PUSH
13528: LD_INT 106
13530: PUSH
13531: LD_INT 108
13533: PUSH
13534: LD_INT 116
13536: PUSH
13537: LD_INT 117
13539: PUSH
13540: LD_INT 118
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: ST_TO_ADDR
13557: GO 16444
13559: LD_INT 4
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13663
13567: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13568: LD_ADDR_VAR 0 2
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: LD_INT 4
13578: PUSH
13579: LD_INT 5
13581: PUSH
13582: LD_INT 8
13584: PUSH
13585: LD_INT 11
13587: PUSH
13588: LD_INT 12
13590: PUSH
13591: LD_INT 15
13593: PUSH
13594: LD_INT 16
13596: PUSH
13597: LD_INT 22
13599: PUSH
13600: LD_INT 23
13602: PUSH
13603: LD_INT 26
13605: PUSH
13606: LD_INT 36
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 101
13625: PUSH
13626: LD_INT 102
13628: PUSH
13629: LD_INT 105
13631: PUSH
13632: LD_INT 106
13634: PUSH
13635: LD_INT 108
13637: PUSH
13638: LD_INT 116
13640: PUSH
13641: LD_INT 117
13643: PUSH
13644: LD_INT 118
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: ST_TO_ADDR
13661: GO 16444
13663: LD_INT 5
13665: DOUBLE
13666: EQUAL
13667: IFTRUE 13671
13669: GO 13783
13671: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13672: LD_ADDR_VAR 0 2
13676: PUSH
13677: LD_INT 2
13679: PUSH
13680: LD_INT 4
13682: PUSH
13683: LD_INT 5
13685: PUSH
13686: LD_INT 6
13688: PUSH
13689: LD_INT 8
13691: PUSH
13692: LD_INT 11
13694: PUSH
13695: LD_INT 12
13697: PUSH
13698: LD_INT 15
13700: PUSH
13701: LD_INT 16
13703: PUSH
13704: LD_INT 22
13706: PUSH
13707: LD_INT 23
13709: PUSH
13710: LD_INT 25
13712: PUSH
13713: LD_INT 26
13715: PUSH
13716: LD_INT 36
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 101
13737: PUSH
13738: LD_INT 102
13740: PUSH
13741: LD_INT 105
13743: PUSH
13744: LD_INT 106
13746: PUSH
13747: LD_INT 108
13749: PUSH
13750: LD_INT 109
13752: PUSH
13753: LD_INT 112
13755: PUSH
13756: LD_INT 116
13758: PUSH
13759: LD_INT 117
13761: PUSH
13762: LD_INT 118
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: ST_TO_ADDR
13781: GO 16444
13783: LD_INT 6
13785: DOUBLE
13786: EQUAL
13787: IFTRUE 13791
13789: GO 13923
13791: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13792: LD_ADDR_VAR 0 2
13796: PUSH
13797: LD_INT 2
13799: PUSH
13800: LD_INT 4
13802: PUSH
13803: LD_INT 5
13805: PUSH
13806: LD_INT 6
13808: PUSH
13809: LD_INT 8
13811: PUSH
13812: LD_INT 11
13814: PUSH
13815: LD_INT 12
13817: PUSH
13818: LD_INT 15
13820: PUSH
13821: LD_INT 16
13823: PUSH
13824: LD_INT 20
13826: PUSH
13827: LD_INT 21
13829: PUSH
13830: LD_INT 22
13832: PUSH
13833: LD_INT 23
13835: PUSH
13836: LD_INT 25
13838: PUSH
13839: LD_INT 26
13841: PUSH
13842: LD_INT 30
13844: PUSH
13845: LD_INT 31
13847: PUSH
13848: LD_INT 32
13850: PUSH
13851: LD_INT 36
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 101
13877: PUSH
13878: LD_INT 102
13880: PUSH
13881: LD_INT 105
13883: PUSH
13884: LD_INT 106
13886: PUSH
13887: LD_INT 108
13889: PUSH
13890: LD_INT 109
13892: PUSH
13893: LD_INT 112
13895: PUSH
13896: LD_INT 116
13898: PUSH
13899: LD_INT 117
13901: PUSH
13902: LD_INT 118
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: ST_TO_ADDR
13921: GO 16444
13923: LD_INT 7
13925: DOUBLE
13926: EQUAL
13927: IFTRUE 13931
13929: GO 14043
13931: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13932: LD_ADDR_VAR 0 2
13936: PUSH
13937: LD_INT 2
13939: PUSH
13940: LD_INT 4
13942: PUSH
13943: LD_INT 5
13945: PUSH
13946: LD_INT 7
13948: PUSH
13949: LD_INT 11
13951: PUSH
13952: LD_INT 12
13954: PUSH
13955: LD_INT 15
13957: PUSH
13958: LD_INT 16
13960: PUSH
13961: LD_INT 20
13963: PUSH
13964: LD_INT 21
13966: PUSH
13967: LD_INT 22
13969: PUSH
13970: LD_INT 23
13972: PUSH
13973: LD_INT 25
13975: PUSH
13976: LD_INT 26
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 101
13997: PUSH
13998: LD_INT 102
14000: PUSH
14001: LD_INT 103
14003: PUSH
14004: LD_INT 105
14006: PUSH
14007: LD_INT 106
14009: PUSH
14010: LD_INT 108
14012: PUSH
14013: LD_INT 112
14015: PUSH
14016: LD_INT 116
14018: PUSH
14019: LD_INT 117
14021: PUSH
14022: LD_INT 118
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: ST_TO_ADDR
14041: GO 16444
14043: LD_INT 8
14045: DOUBLE
14046: EQUAL
14047: IFTRUE 14051
14049: GO 14191
14051: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14052: LD_ADDR_VAR 0 2
14056: PUSH
14057: LD_INT 2
14059: PUSH
14060: LD_INT 4
14062: PUSH
14063: LD_INT 5
14065: PUSH
14066: LD_INT 6
14068: PUSH
14069: LD_INT 7
14071: PUSH
14072: LD_INT 8
14074: PUSH
14075: LD_INT 11
14077: PUSH
14078: LD_INT 12
14080: PUSH
14081: LD_INT 15
14083: PUSH
14084: LD_INT 16
14086: PUSH
14087: LD_INT 20
14089: PUSH
14090: LD_INT 21
14092: PUSH
14093: LD_INT 22
14095: PUSH
14096: LD_INT 23
14098: PUSH
14099: LD_INT 25
14101: PUSH
14102: LD_INT 26
14104: PUSH
14105: LD_INT 30
14107: PUSH
14108: LD_INT 31
14110: PUSH
14111: LD_INT 32
14113: PUSH
14114: LD_INT 36
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 101
14141: PUSH
14142: LD_INT 102
14144: PUSH
14145: LD_INT 103
14147: PUSH
14148: LD_INT 105
14150: PUSH
14151: LD_INT 106
14153: PUSH
14154: LD_INT 108
14156: PUSH
14157: LD_INT 109
14159: PUSH
14160: LD_INT 112
14162: PUSH
14163: LD_INT 116
14165: PUSH
14166: LD_INT 117
14168: PUSH
14169: LD_INT 118
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: ST_TO_ADDR
14189: GO 16444
14191: LD_INT 9
14193: DOUBLE
14194: EQUAL
14195: IFTRUE 14199
14197: GO 14347
14199: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14200: LD_ADDR_VAR 0 2
14204: PUSH
14205: LD_INT 2
14207: PUSH
14208: LD_INT 4
14210: PUSH
14211: LD_INT 5
14213: PUSH
14214: LD_INT 6
14216: PUSH
14217: LD_INT 7
14219: PUSH
14220: LD_INT 8
14222: PUSH
14223: LD_INT 11
14225: PUSH
14226: LD_INT 12
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 16
14234: PUSH
14235: LD_INT 20
14237: PUSH
14238: LD_INT 21
14240: PUSH
14241: LD_INT 22
14243: PUSH
14244: LD_INT 23
14246: PUSH
14247: LD_INT 25
14249: PUSH
14250: LD_INT 26
14252: PUSH
14253: LD_INT 28
14255: PUSH
14256: LD_INT 30
14258: PUSH
14259: LD_INT 31
14261: PUSH
14262: LD_INT 32
14264: PUSH
14265: LD_INT 36
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 101
14293: PUSH
14294: LD_INT 102
14296: PUSH
14297: LD_INT 103
14299: PUSH
14300: LD_INT 105
14302: PUSH
14303: LD_INT 106
14305: PUSH
14306: LD_INT 108
14308: PUSH
14309: LD_INT 109
14311: PUSH
14312: LD_INT 112
14314: PUSH
14315: LD_INT 114
14317: PUSH
14318: LD_INT 116
14320: PUSH
14321: LD_INT 117
14323: PUSH
14324: LD_INT 118
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: ST_TO_ADDR
14345: GO 16444
14347: LD_INT 10
14349: DOUBLE
14350: EQUAL
14351: IFTRUE 14355
14353: GO 14551
14355: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14356: LD_ADDR_VAR 0 2
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: LD_INT 4
14366: PUSH
14367: LD_INT 5
14369: PUSH
14370: LD_INT 6
14372: PUSH
14373: LD_INT 7
14375: PUSH
14376: LD_INT 8
14378: PUSH
14379: LD_INT 9
14381: PUSH
14382: LD_INT 10
14384: PUSH
14385: LD_INT 11
14387: PUSH
14388: LD_INT 12
14390: PUSH
14391: LD_INT 13
14393: PUSH
14394: LD_INT 14
14396: PUSH
14397: LD_INT 15
14399: PUSH
14400: LD_INT 16
14402: PUSH
14403: LD_INT 17
14405: PUSH
14406: LD_INT 18
14408: PUSH
14409: LD_INT 19
14411: PUSH
14412: LD_INT 20
14414: PUSH
14415: LD_INT 21
14417: PUSH
14418: LD_INT 22
14420: PUSH
14421: LD_INT 23
14423: PUSH
14424: LD_INT 24
14426: PUSH
14427: LD_INT 25
14429: PUSH
14430: LD_INT 26
14432: PUSH
14433: LD_INT 28
14435: PUSH
14436: LD_INT 30
14438: PUSH
14439: LD_INT 31
14441: PUSH
14442: LD_INT 32
14444: PUSH
14445: LD_INT 36
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: PUSH
14479: LD_INT 101
14481: PUSH
14482: LD_INT 102
14484: PUSH
14485: LD_INT 103
14487: PUSH
14488: LD_INT 104
14490: PUSH
14491: LD_INT 105
14493: PUSH
14494: LD_INT 106
14496: PUSH
14497: LD_INT 107
14499: PUSH
14500: LD_INT 108
14502: PUSH
14503: LD_INT 109
14505: PUSH
14506: LD_INT 110
14508: PUSH
14509: LD_INT 111
14511: PUSH
14512: LD_INT 112
14514: PUSH
14515: LD_INT 114
14517: PUSH
14518: LD_INT 116
14520: PUSH
14521: LD_INT 117
14523: PUSH
14524: LD_INT 118
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: ST_TO_ADDR
14549: GO 16444
14551: LD_INT 11
14553: DOUBLE
14554: EQUAL
14555: IFTRUE 14559
14557: GO 14763
14559: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14560: LD_ADDR_VAR 0 2
14564: PUSH
14565: LD_INT 2
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: LD_INT 4
14573: PUSH
14574: LD_INT 5
14576: PUSH
14577: LD_INT 6
14579: PUSH
14580: LD_INT 7
14582: PUSH
14583: LD_INT 8
14585: PUSH
14586: LD_INT 9
14588: PUSH
14589: LD_INT 10
14591: PUSH
14592: LD_INT 11
14594: PUSH
14595: LD_INT 12
14597: PUSH
14598: LD_INT 13
14600: PUSH
14601: LD_INT 14
14603: PUSH
14604: LD_INT 15
14606: PUSH
14607: LD_INT 16
14609: PUSH
14610: LD_INT 17
14612: PUSH
14613: LD_INT 18
14615: PUSH
14616: LD_INT 19
14618: PUSH
14619: LD_INT 20
14621: PUSH
14622: LD_INT 21
14624: PUSH
14625: LD_INT 22
14627: PUSH
14628: LD_INT 23
14630: PUSH
14631: LD_INT 24
14633: PUSH
14634: LD_INT 25
14636: PUSH
14637: LD_INT 26
14639: PUSH
14640: LD_INT 28
14642: PUSH
14643: LD_INT 30
14645: PUSH
14646: LD_INT 31
14648: PUSH
14649: LD_INT 32
14651: PUSH
14652: LD_INT 34
14654: PUSH
14655: LD_INT 36
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 101
14693: PUSH
14694: LD_INT 102
14696: PUSH
14697: LD_INT 103
14699: PUSH
14700: LD_INT 104
14702: PUSH
14703: LD_INT 105
14705: PUSH
14706: LD_INT 106
14708: PUSH
14709: LD_INT 107
14711: PUSH
14712: LD_INT 108
14714: PUSH
14715: LD_INT 109
14717: PUSH
14718: LD_INT 110
14720: PUSH
14721: LD_INT 111
14723: PUSH
14724: LD_INT 112
14726: PUSH
14727: LD_INT 114
14729: PUSH
14730: LD_INT 116
14732: PUSH
14733: LD_INT 117
14735: PUSH
14736: LD_INT 118
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: ST_TO_ADDR
14761: GO 16444
14763: LD_INT 12
14765: DOUBLE
14766: EQUAL
14767: IFTRUE 14771
14769: GO 14991
14771: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14772: LD_ADDR_VAR 0 2
14776: PUSH
14777: LD_INT 1
14779: PUSH
14780: LD_INT 2
14782: PUSH
14783: LD_INT 3
14785: PUSH
14786: LD_INT 4
14788: PUSH
14789: LD_INT 5
14791: PUSH
14792: LD_INT 6
14794: PUSH
14795: LD_INT 7
14797: PUSH
14798: LD_INT 8
14800: PUSH
14801: LD_INT 9
14803: PUSH
14804: LD_INT 10
14806: PUSH
14807: LD_INT 11
14809: PUSH
14810: LD_INT 12
14812: PUSH
14813: LD_INT 13
14815: PUSH
14816: LD_INT 14
14818: PUSH
14819: LD_INT 15
14821: PUSH
14822: LD_INT 16
14824: PUSH
14825: LD_INT 17
14827: PUSH
14828: LD_INT 18
14830: PUSH
14831: LD_INT 19
14833: PUSH
14834: LD_INT 20
14836: PUSH
14837: LD_INT 21
14839: PUSH
14840: LD_INT 22
14842: PUSH
14843: LD_INT 23
14845: PUSH
14846: LD_INT 24
14848: PUSH
14849: LD_INT 25
14851: PUSH
14852: LD_INT 26
14854: PUSH
14855: LD_INT 27
14857: PUSH
14858: LD_INT 28
14860: PUSH
14861: LD_INT 30
14863: PUSH
14864: LD_INT 31
14866: PUSH
14867: LD_INT 32
14869: PUSH
14870: LD_INT 33
14872: PUSH
14873: LD_INT 34
14875: PUSH
14876: LD_INT 36
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 101
14917: PUSH
14918: LD_INT 102
14920: PUSH
14921: LD_INT 103
14923: PUSH
14924: LD_INT 104
14926: PUSH
14927: LD_INT 105
14929: PUSH
14930: LD_INT 106
14932: PUSH
14933: LD_INT 107
14935: PUSH
14936: LD_INT 108
14938: PUSH
14939: LD_INT 109
14941: PUSH
14942: LD_INT 110
14944: PUSH
14945: LD_INT 111
14947: PUSH
14948: LD_INT 112
14950: PUSH
14951: LD_INT 113
14953: PUSH
14954: LD_INT 114
14956: PUSH
14957: LD_INT 116
14959: PUSH
14960: LD_INT 117
14962: PUSH
14963: LD_INT 118
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: ST_TO_ADDR
14989: GO 16444
14991: LD_INT 13
14993: DOUBLE
14994: EQUAL
14995: IFTRUE 14999
14997: GO 15207
14999: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15000: LD_ADDR_VAR 0 2
15004: PUSH
15005: LD_INT 1
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: LD_INT 3
15013: PUSH
15014: LD_INT 4
15016: PUSH
15017: LD_INT 5
15019: PUSH
15020: LD_INT 8
15022: PUSH
15023: LD_INT 9
15025: PUSH
15026: LD_INT 10
15028: PUSH
15029: LD_INT 11
15031: PUSH
15032: LD_INT 12
15034: PUSH
15035: LD_INT 14
15037: PUSH
15038: LD_INT 15
15040: PUSH
15041: LD_INT 16
15043: PUSH
15044: LD_INT 17
15046: PUSH
15047: LD_INT 18
15049: PUSH
15050: LD_INT 19
15052: PUSH
15053: LD_INT 20
15055: PUSH
15056: LD_INT 21
15058: PUSH
15059: LD_INT 22
15061: PUSH
15062: LD_INT 23
15064: PUSH
15065: LD_INT 24
15067: PUSH
15068: LD_INT 25
15070: PUSH
15071: LD_INT 26
15073: PUSH
15074: LD_INT 27
15076: PUSH
15077: LD_INT 28
15079: PUSH
15080: LD_INT 30
15082: PUSH
15083: LD_INT 31
15085: PUSH
15086: LD_INT 32
15088: PUSH
15089: LD_INT 33
15091: PUSH
15092: LD_INT 34
15094: PUSH
15095: LD_INT 36
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 101
15133: PUSH
15134: LD_INT 102
15136: PUSH
15137: LD_INT 103
15139: PUSH
15140: LD_INT 104
15142: PUSH
15143: LD_INT 105
15145: PUSH
15146: LD_INT 106
15148: PUSH
15149: LD_INT 107
15151: PUSH
15152: LD_INT 108
15154: PUSH
15155: LD_INT 109
15157: PUSH
15158: LD_INT 110
15160: PUSH
15161: LD_INT 111
15163: PUSH
15164: LD_INT 112
15166: PUSH
15167: LD_INT 113
15169: PUSH
15170: LD_INT 114
15172: PUSH
15173: LD_INT 116
15175: PUSH
15176: LD_INT 117
15178: PUSH
15179: LD_INT 118
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: ST_TO_ADDR
15205: GO 16444
15207: LD_INT 14
15209: DOUBLE
15210: EQUAL
15211: IFTRUE 15215
15213: GO 15439
15215: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15216: LD_ADDR_VAR 0 2
15220: PUSH
15221: LD_INT 1
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: LD_INT 3
15229: PUSH
15230: LD_INT 4
15232: PUSH
15233: LD_INT 5
15235: PUSH
15236: LD_INT 6
15238: PUSH
15239: LD_INT 7
15241: PUSH
15242: LD_INT 8
15244: PUSH
15245: LD_INT 9
15247: PUSH
15248: LD_INT 10
15250: PUSH
15251: LD_INT 11
15253: PUSH
15254: LD_INT 12
15256: PUSH
15257: LD_INT 13
15259: PUSH
15260: LD_INT 14
15262: PUSH
15263: LD_INT 15
15265: PUSH
15266: LD_INT 16
15268: PUSH
15269: LD_INT 17
15271: PUSH
15272: LD_INT 18
15274: PUSH
15275: LD_INT 19
15277: PUSH
15278: LD_INT 20
15280: PUSH
15281: LD_INT 21
15283: PUSH
15284: LD_INT 22
15286: PUSH
15287: LD_INT 23
15289: PUSH
15290: LD_INT 24
15292: PUSH
15293: LD_INT 25
15295: PUSH
15296: LD_INT 26
15298: PUSH
15299: LD_INT 27
15301: PUSH
15302: LD_INT 28
15304: PUSH
15305: LD_INT 29
15307: PUSH
15308: LD_INT 30
15310: PUSH
15311: LD_INT 31
15313: PUSH
15314: LD_INT 32
15316: PUSH
15317: LD_INT 33
15319: PUSH
15320: LD_INT 34
15322: PUSH
15323: LD_INT 36
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 101
15365: PUSH
15366: LD_INT 102
15368: PUSH
15369: LD_INT 103
15371: PUSH
15372: LD_INT 104
15374: PUSH
15375: LD_INT 105
15377: PUSH
15378: LD_INT 106
15380: PUSH
15381: LD_INT 107
15383: PUSH
15384: LD_INT 108
15386: PUSH
15387: LD_INT 109
15389: PUSH
15390: LD_INT 110
15392: PUSH
15393: LD_INT 111
15395: PUSH
15396: LD_INT 112
15398: PUSH
15399: LD_INT 113
15401: PUSH
15402: LD_INT 114
15404: PUSH
15405: LD_INT 116
15407: PUSH
15408: LD_INT 117
15410: PUSH
15411: LD_INT 118
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: ST_TO_ADDR
15437: GO 16444
15439: LD_INT 15
15441: DOUBLE
15442: EQUAL
15443: IFTRUE 15447
15445: GO 15671
15447: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15448: LD_ADDR_VAR 0 2
15452: PUSH
15453: LD_INT 1
15455: PUSH
15456: LD_INT 2
15458: PUSH
15459: LD_INT 3
15461: PUSH
15462: LD_INT 4
15464: PUSH
15465: LD_INT 5
15467: PUSH
15468: LD_INT 6
15470: PUSH
15471: LD_INT 7
15473: PUSH
15474: LD_INT 8
15476: PUSH
15477: LD_INT 9
15479: PUSH
15480: LD_INT 10
15482: PUSH
15483: LD_INT 11
15485: PUSH
15486: LD_INT 12
15488: PUSH
15489: LD_INT 13
15491: PUSH
15492: LD_INT 14
15494: PUSH
15495: LD_INT 15
15497: PUSH
15498: LD_INT 16
15500: PUSH
15501: LD_INT 17
15503: PUSH
15504: LD_INT 18
15506: PUSH
15507: LD_INT 19
15509: PUSH
15510: LD_INT 20
15512: PUSH
15513: LD_INT 21
15515: PUSH
15516: LD_INT 22
15518: PUSH
15519: LD_INT 23
15521: PUSH
15522: LD_INT 24
15524: PUSH
15525: LD_INT 25
15527: PUSH
15528: LD_INT 26
15530: PUSH
15531: LD_INT 27
15533: PUSH
15534: LD_INT 28
15536: PUSH
15537: LD_INT 29
15539: PUSH
15540: LD_INT 30
15542: PUSH
15543: LD_INT 31
15545: PUSH
15546: LD_INT 32
15548: PUSH
15549: LD_INT 33
15551: PUSH
15552: LD_INT 34
15554: PUSH
15555: LD_INT 36
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 101
15597: PUSH
15598: LD_INT 102
15600: PUSH
15601: LD_INT 103
15603: PUSH
15604: LD_INT 104
15606: PUSH
15607: LD_INT 105
15609: PUSH
15610: LD_INT 106
15612: PUSH
15613: LD_INT 107
15615: PUSH
15616: LD_INT 108
15618: PUSH
15619: LD_INT 109
15621: PUSH
15622: LD_INT 110
15624: PUSH
15625: LD_INT 111
15627: PUSH
15628: LD_INT 112
15630: PUSH
15631: LD_INT 113
15633: PUSH
15634: LD_INT 114
15636: PUSH
15637: LD_INT 116
15639: PUSH
15640: LD_INT 117
15642: PUSH
15643: LD_INT 118
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: ST_TO_ADDR
15669: GO 16444
15671: LD_INT 16
15673: DOUBLE
15674: EQUAL
15675: IFTRUE 15679
15677: GO 15815
15679: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15680: LD_ADDR_VAR 0 2
15684: PUSH
15685: LD_INT 2
15687: PUSH
15688: LD_INT 4
15690: PUSH
15691: LD_INT 5
15693: PUSH
15694: LD_INT 7
15696: PUSH
15697: LD_INT 11
15699: PUSH
15700: LD_INT 12
15702: PUSH
15703: LD_INT 15
15705: PUSH
15706: LD_INT 16
15708: PUSH
15709: LD_INT 20
15711: PUSH
15712: LD_INT 21
15714: PUSH
15715: LD_INT 22
15717: PUSH
15718: LD_INT 23
15720: PUSH
15721: LD_INT 25
15723: PUSH
15724: LD_INT 26
15726: PUSH
15727: LD_INT 30
15729: PUSH
15730: LD_INT 31
15732: PUSH
15733: LD_INT 32
15735: PUSH
15736: LD_INT 33
15738: PUSH
15739: LD_INT 34
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 101
15765: PUSH
15766: LD_INT 102
15768: PUSH
15769: LD_INT 103
15771: PUSH
15772: LD_INT 106
15774: PUSH
15775: LD_INT 108
15777: PUSH
15778: LD_INT 112
15780: PUSH
15781: LD_INT 113
15783: PUSH
15784: LD_INT 114
15786: PUSH
15787: LD_INT 116
15789: PUSH
15790: LD_INT 117
15792: PUSH
15793: LD_INT 118
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: ST_TO_ADDR
15813: GO 16444
15815: LD_INT 17
15817: DOUBLE
15818: EQUAL
15819: IFTRUE 15823
15821: GO 16047
15823: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15824: LD_ADDR_VAR 0 2
15828: PUSH
15829: LD_INT 1
15831: PUSH
15832: LD_INT 2
15834: PUSH
15835: LD_INT 3
15837: PUSH
15838: LD_INT 4
15840: PUSH
15841: LD_INT 5
15843: PUSH
15844: LD_INT 6
15846: PUSH
15847: LD_INT 7
15849: PUSH
15850: LD_INT 8
15852: PUSH
15853: LD_INT 9
15855: PUSH
15856: LD_INT 10
15858: PUSH
15859: LD_INT 11
15861: PUSH
15862: LD_INT 12
15864: PUSH
15865: LD_INT 13
15867: PUSH
15868: LD_INT 14
15870: PUSH
15871: LD_INT 15
15873: PUSH
15874: LD_INT 16
15876: PUSH
15877: LD_INT 17
15879: PUSH
15880: LD_INT 18
15882: PUSH
15883: LD_INT 19
15885: PUSH
15886: LD_INT 20
15888: PUSH
15889: LD_INT 21
15891: PUSH
15892: LD_INT 22
15894: PUSH
15895: LD_INT 23
15897: PUSH
15898: LD_INT 24
15900: PUSH
15901: LD_INT 25
15903: PUSH
15904: LD_INT 26
15906: PUSH
15907: LD_INT 27
15909: PUSH
15910: LD_INT 28
15912: PUSH
15913: LD_INT 29
15915: PUSH
15916: LD_INT 30
15918: PUSH
15919: LD_INT 31
15921: PUSH
15922: LD_INT 32
15924: PUSH
15925: LD_INT 33
15927: PUSH
15928: LD_INT 34
15930: PUSH
15931: LD_INT 36
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 101
15973: PUSH
15974: LD_INT 102
15976: PUSH
15977: LD_INT 103
15979: PUSH
15980: LD_INT 104
15982: PUSH
15983: LD_INT 105
15985: PUSH
15986: LD_INT 106
15988: PUSH
15989: LD_INT 107
15991: PUSH
15992: LD_INT 108
15994: PUSH
15995: LD_INT 109
15997: PUSH
15998: LD_INT 110
16000: PUSH
16001: LD_INT 111
16003: PUSH
16004: LD_INT 112
16006: PUSH
16007: LD_INT 113
16009: PUSH
16010: LD_INT 114
16012: PUSH
16013: LD_INT 116
16015: PUSH
16016: LD_INT 117
16018: PUSH
16019: LD_INT 118
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: ST_TO_ADDR
16045: GO 16444
16047: LD_INT 18
16049: DOUBLE
16050: EQUAL
16051: IFTRUE 16055
16053: GO 16203
16055: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16056: LD_ADDR_VAR 0 2
16060: PUSH
16061: LD_INT 2
16063: PUSH
16064: LD_INT 4
16066: PUSH
16067: LD_INT 5
16069: PUSH
16070: LD_INT 7
16072: PUSH
16073: LD_INT 11
16075: PUSH
16076: LD_INT 12
16078: PUSH
16079: LD_INT 15
16081: PUSH
16082: LD_INT 16
16084: PUSH
16085: LD_INT 20
16087: PUSH
16088: LD_INT 21
16090: PUSH
16091: LD_INT 22
16093: PUSH
16094: LD_INT 23
16096: PUSH
16097: LD_INT 25
16099: PUSH
16100: LD_INT 26
16102: PUSH
16103: LD_INT 30
16105: PUSH
16106: LD_INT 31
16108: PUSH
16109: LD_INT 32
16111: PUSH
16112: LD_INT 33
16114: PUSH
16115: LD_INT 34
16117: PUSH
16118: LD_INT 35
16120: PUSH
16121: LD_INT 36
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 101
16149: PUSH
16150: LD_INT 102
16152: PUSH
16153: LD_INT 103
16155: PUSH
16156: LD_INT 106
16158: PUSH
16159: LD_INT 108
16161: PUSH
16162: LD_INT 112
16164: PUSH
16165: LD_INT 113
16167: PUSH
16168: LD_INT 114
16170: PUSH
16171: LD_INT 115
16173: PUSH
16174: LD_INT 116
16176: PUSH
16177: LD_INT 117
16179: PUSH
16180: LD_INT 118
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: ST_TO_ADDR
16201: GO 16444
16203: LD_INT 19
16205: DOUBLE
16206: EQUAL
16207: IFTRUE 16211
16209: GO 16443
16211: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16212: LD_ADDR_VAR 0 2
16216: PUSH
16217: LD_INT 1
16219: PUSH
16220: LD_INT 2
16222: PUSH
16223: LD_INT 3
16225: PUSH
16226: LD_INT 4
16228: PUSH
16229: LD_INT 5
16231: PUSH
16232: LD_INT 6
16234: PUSH
16235: LD_INT 7
16237: PUSH
16238: LD_INT 8
16240: PUSH
16241: LD_INT 9
16243: PUSH
16244: LD_INT 10
16246: PUSH
16247: LD_INT 11
16249: PUSH
16250: LD_INT 12
16252: PUSH
16253: LD_INT 13
16255: PUSH
16256: LD_INT 14
16258: PUSH
16259: LD_INT 15
16261: PUSH
16262: LD_INT 16
16264: PUSH
16265: LD_INT 17
16267: PUSH
16268: LD_INT 18
16270: PUSH
16271: LD_INT 19
16273: PUSH
16274: LD_INT 20
16276: PUSH
16277: LD_INT 21
16279: PUSH
16280: LD_INT 22
16282: PUSH
16283: LD_INT 23
16285: PUSH
16286: LD_INT 24
16288: PUSH
16289: LD_INT 25
16291: PUSH
16292: LD_INT 26
16294: PUSH
16295: LD_INT 27
16297: PUSH
16298: LD_INT 28
16300: PUSH
16301: LD_INT 29
16303: PUSH
16304: LD_INT 30
16306: PUSH
16307: LD_INT 31
16309: PUSH
16310: LD_INT 32
16312: PUSH
16313: LD_INT 33
16315: PUSH
16316: LD_INT 34
16318: PUSH
16319: LD_INT 35
16321: PUSH
16322: LD_INT 36
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 101
16365: PUSH
16366: LD_INT 102
16368: PUSH
16369: LD_INT 103
16371: PUSH
16372: LD_INT 104
16374: PUSH
16375: LD_INT 105
16377: PUSH
16378: LD_INT 106
16380: PUSH
16381: LD_INT 107
16383: PUSH
16384: LD_INT 108
16386: PUSH
16387: LD_INT 109
16389: PUSH
16390: LD_INT 110
16392: PUSH
16393: LD_INT 111
16395: PUSH
16396: LD_INT 112
16398: PUSH
16399: LD_INT 113
16401: PUSH
16402: LD_INT 114
16404: PUSH
16405: LD_INT 115
16407: PUSH
16408: LD_INT 116
16410: PUSH
16411: LD_INT 117
16413: PUSH
16414: LD_INT 118
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: ST_TO_ADDR
16441: GO 16444
16443: POP
// end else
16444: GO 16675
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16446: LD_ADDR_VAR 0 2
16450: PUSH
16451: LD_INT 1
16453: PUSH
16454: LD_INT 2
16456: PUSH
16457: LD_INT 3
16459: PUSH
16460: LD_INT 4
16462: PUSH
16463: LD_INT 5
16465: PUSH
16466: LD_INT 6
16468: PUSH
16469: LD_INT 7
16471: PUSH
16472: LD_INT 8
16474: PUSH
16475: LD_INT 9
16477: PUSH
16478: LD_INT 10
16480: PUSH
16481: LD_INT 11
16483: PUSH
16484: LD_INT 12
16486: PUSH
16487: LD_INT 13
16489: PUSH
16490: LD_INT 14
16492: PUSH
16493: LD_INT 15
16495: PUSH
16496: LD_INT 16
16498: PUSH
16499: LD_INT 17
16501: PUSH
16502: LD_INT 18
16504: PUSH
16505: LD_INT 19
16507: PUSH
16508: LD_INT 20
16510: PUSH
16511: LD_INT 21
16513: PUSH
16514: LD_INT 22
16516: PUSH
16517: LD_INT 23
16519: PUSH
16520: LD_INT 24
16522: PUSH
16523: LD_INT 25
16525: PUSH
16526: LD_INT 26
16528: PUSH
16529: LD_INT 27
16531: PUSH
16532: LD_INT 28
16534: PUSH
16535: LD_INT 29
16537: PUSH
16538: LD_INT 30
16540: PUSH
16541: LD_INT 31
16543: PUSH
16544: LD_INT 32
16546: PUSH
16547: LD_INT 33
16549: PUSH
16550: LD_INT 34
16552: PUSH
16553: LD_INT 35
16555: PUSH
16556: LD_INT 36
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 101
16599: PUSH
16600: LD_INT 102
16602: PUSH
16603: LD_INT 103
16605: PUSH
16606: LD_INT 104
16608: PUSH
16609: LD_INT 105
16611: PUSH
16612: LD_INT 106
16614: PUSH
16615: LD_INT 107
16617: PUSH
16618: LD_INT 108
16620: PUSH
16621: LD_INT 109
16623: PUSH
16624: LD_INT 110
16626: PUSH
16627: LD_INT 111
16629: PUSH
16630: LD_INT 112
16632: PUSH
16633: LD_INT 113
16635: PUSH
16636: LD_INT 114
16638: PUSH
16639: LD_INT 115
16641: PUSH
16642: LD_INT 116
16644: PUSH
16645: LD_INT 117
16647: PUSH
16648: LD_INT 118
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: ST_TO_ADDR
// if result then
16675: LD_VAR 0 2
16679: IFFALSE 17465
// begin normal :=  ;
16681: LD_ADDR_VAR 0 5
16685: PUSH
16686: LD_STRING 
16688: ST_TO_ADDR
// hardcore :=  ;
16689: LD_ADDR_VAR 0 6
16693: PUSH
16694: LD_STRING 
16696: ST_TO_ADDR
// active :=  ;
16697: LD_ADDR_VAR 0 7
16701: PUSH
16702: LD_STRING 
16704: ST_TO_ADDR
// for i = 1 to normalCounter do
16705: LD_ADDR_VAR 0 8
16709: PUSH
16710: DOUBLE
16711: LD_INT 1
16713: DEC
16714: ST_TO_ADDR
16715: LD_EXP 23
16719: PUSH
16720: FOR_TO
16721: IFFALSE 16822
// begin tmp := 0 ;
16723: LD_ADDR_VAR 0 3
16727: PUSH
16728: LD_STRING 0
16730: ST_TO_ADDR
// if result [ 1 ] then
16731: LD_VAR 0 2
16735: PUSH
16736: LD_INT 1
16738: ARRAY
16739: IFFALSE 16804
// if result [ 1 ] [ 1 ] = i then
16741: LD_VAR 0 2
16745: PUSH
16746: LD_INT 1
16748: ARRAY
16749: PUSH
16750: LD_INT 1
16752: ARRAY
16753: PUSH
16754: LD_VAR 0 8
16758: EQUAL
16759: IFFALSE 16804
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16761: LD_ADDR_VAR 0 2
16765: PUSH
16766: LD_VAR 0 2
16770: PPUSH
16771: LD_INT 1
16773: PPUSH
16774: LD_VAR 0 2
16778: PUSH
16779: LD_INT 1
16781: ARRAY
16782: PPUSH
16783: LD_INT 1
16785: PPUSH
16786: CALL_OW 3
16790: PPUSH
16791: CALL_OW 1
16795: ST_TO_ADDR
// tmp := 1 ;
16796: LD_ADDR_VAR 0 3
16800: PUSH
16801: LD_STRING 1
16803: ST_TO_ADDR
// end ; normal := normal & tmp ;
16804: LD_ADDR_VAR 0 5
16808: PUSH
16809: LD_VAR 0 5
16813: PUSH
16814: LD_VAR 0 3
16818: STR
16819: ST_TO_ADDR
// end ;
16820: GO 16720
16822: POP
16823: POP
// for i = 1 to hardcoreCounter do
16824: LD_ADDR_VAR 0 8
16828: PUSH
16829: DOUBLE
16830: LD_INT 1
16832: DEC
16833: ST_TO_ADDR
16834: LD_EXP 24
16838: PUSH
16839: FOR_TO
16840: IFFALSE 16945
// begin tmp := 0 ;
16842: LD_ADDR_VAR 0 3
16846: PUSH
16847: LD_STRING 0
16849: ST_TO_ADDR
// if result [ 2 ] then
16850: LD_VAR 0 2
16854: PUSH
16855: LD_INT 2
16857: ARRAY
16858: IFFALSE 16927
// if result [ 2 ] [ 1 ] = 100 + i then
16860: LD_VAR 0 2
16864: PUSH
16865: LD_INT 2
16867: ARRAY
16868: PUSH
16869: LD_INT 1
16871: ARRAY
16872: PUSH
16873: LD_INT 100
16875: PUSH
16876: LD_VAR 0 8
16880: PLUS
16881: EQUAL
16882: IFFALSE 16927
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16884: LD_ADDR_VAR 0 2
16888: PUSH
16889: LD_VAR 0 2
16893: PPUSH
16894: LD_INT 2
16896: PPUSH
16897: LD_VAR 0 2
16901: PUSH
16902: LD_INT 2
16904: ARRAY
16905: PPUSH
16906: LD_INT 1
16908: PPUSH
16909: CALL_OW 3
16913: PPUSH
16914: CALL_OW 1
16918: ST_TO_ADDR
// tmp := 1 ;
16919: LD_ADDR_VAR 0 3
16923: PUSH
16924: LD_STRING 1
16926: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16927: LD_ADDR_VAR 0 6
16931: PUSH
16932: LD_VAR 0 6
16936: PUSH
16937: LD_VAR 0 3
16941: STR
16942: ST_TO_ADDR
// end ;
16943: GO 16839
16945: POP
16946: POP
// if isGameLoad then
16947: LD_VAR 0 1
16951: IFFALSE 17426
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16953: LD_ADDR_VAR 0 4
16957: PUSH
16958: LD_EXP 27
16962: PUSH
16963: LD_EXP 26
16967: PUSH
16968: LD_EXP 28
16972: PUSH
16973: LD_EXP 25
16977: PUSH
16978: LD_EXP 29
16982: PUSH
16983: LD_EXP 30
16987: PUSH
16988: LD_EXP 31
16992: PUSH
16993: LD_EXP 32
16997: PUSH
16998: LD_EXP 33
17002: PUSH
17003: LD_EXP 34
17007: PUSH
17008: LD_EXP 35
17012: PUSH
17013: LD_EXP 36
17017: PUSH
17018: LD_EXP 37
17022: PUSH
17023: LD_EXP 38
17027: PUSH
17028: LD_EXP 46
17032: PUSH
17033: LD_EXP 47
17037: PUSH
17038: LD_EXP 48
17042: PUSH
17043: LD_EXP 49
17047: PUSH
17048: LD_EXP 51
17052: PUSH
17053: LD_EXP 52
17057: PUSH
17058: LD_EXP 53
17062: PUSH
17063: LD_EXP 56
17067: PUSH
17068: LD_EXP 58
17072: PUSH
17073: LD_EXP 59
17077: PUSH
17078: LD_EXP 60
17082: PUSH
17083: LD_EXP 62
17087: PUSH
17088: LD_EXP 63
17092: PUSH
17093: LD_EXP 66
17097: PUSH
17098: LD_EXP 67
17102: PUSH
17103: LD_EXP 68
17107: PUSH
17108: LD_EXP 69
17112: PUSH
17113: LD_EXP 70
17117: PUSH
17118: LD_EXP 71
17122: PUSH
17123: LD_EXP 72
17127: PUSH
17128: LD_EXP 73
17132: PUSH
17133: LD_EXP 74
17137: PUSH
17138: LD_EXP 39
17142: PUSH
17143: LD_EXP 40
17147: PUSH
17148: LD_EXP 43
17152: PUSH
17153: LD_EXP 44
17157: PUSH
17158: LD_EXP 45
17162: PUSH
17163: LD_EXP 41
17167: PUSH
17168: LD_EXP 42
17172: PUSH
17173: LD_EXP 50
17177: PUSH
17178: LD_EXP 54
17182: PUSH
17183: LD_EXP 55
17187: PUSH
17188: LD_EXP 57
17192: PUSH
17193: LD_EXP 61
17197: PUSH
17198: LD_EXP 64
17202: PUSH
17203: LD_EXP 65
17207: PUSH
17208: LD_EXP 75
17212: PUSH
17213: LD_EXP 76
17217: PUSH
17218: LD_EXP 77
17222: PUSH
17223: LD_EXP 78
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: ST_TO_ADDR
// tmp :=  ;
17284: LD_ADDR_VAR 0 3
17288: PUSH
17289: LD_STRING 
17291: ST_TO_ADDR
// for i = 1 to normalCounter do
17292: LD_ADDR_VAR 0 8
17296: PUSH
17297: DOUBLE
17298: LD_INT 1
17300: DEC
17301: ST_TO_ADDR
17302: LD_EXP 23
17306: PUSH
17307: FOR_TO
17308: IFFALSE 17344
// begin if flags [ i ] then
17310: LD_VAR 0 4
17314: PUSH
17315: LD_VAR 0 8
17319: ARRAY
17320: IFFALSE 17342
// tmp := tmp & i & ; ;
17322: LD_ADDR_VAR 0 3
17326: PUSH
17327: LD_VAR 0 3
17331: PUSH
17332: LD_VAR 0 8
17336: STR
17337: PUSH
17338: LD_STRING ;
17340: STR
17341: ST_TO_ADDR
// end ;
17342: GO 17307
17344: POP
17345: POP
// for i = 1 to hardcoreCounter do
17346: LD_ADDR_VAR 0 8
17350: PUSH
17351: DOUBLE
17352: LD_INT 1
17354: DEC
17355: ST_TO_ADDR
17356: LD_EXP 24
17360: PUSH
17361: FOR_TO
17362: IFFALSE 17408
// begin if flags [ normalCounter + i ] then
17364: LD_VAR 0 4
17368: PUSH
17369: LD_EXP 23
17373: PUSH
17374: LD_VAR 0 8
17378: PLUS
17379: ARRAY
17380: IFFALSE 17406
// tmp := tmp & ( 100 + i ) & ; ;
17382: LD_ADDR_VAR 0 3
17386: PUSH
17387: LD_VAR 0 3
17391: PUSH
17392: LD_INT 100
17394: PUSH
17395: LD_VAR 0 8
17399: PLUS
17400: STR
17401: PUSH
17402: LD_STRING ;
17404: STR
17405: ST_TO_ADDR
// end ;
17406: GO 17361
17408: POP
17409: POP
// if tmp then
17410: LD_VAR 0 3
17414: IFFALSE 17426
// active := tmp ;
17416: LD_ADDR_VAR 0 7
17420: PUSH
17421: LD_VAR 0 3
17425: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17426: LD_STRING getStreamItemsFromMission("
17428: PUSH
17429: LD_VAR 0 5
17433: STR
17434: PUSH
17435: LD_STRING ","
17437: STR
17438: PUSH
17439: LD_VAR 0 6
17443: STR
17444: PUSH
17445: LD_STRING ","
17447: STR
17448: PUSH
17449: LD_VAR 0 7
17453: STR
17454: PUSH
17455: LD_STRING ")
17457: STR
17458: PPUSH
17459: CALL_OW 559
// end else
17463: GO 17472
// ToLua ( getStreamItemsFromMission("","","") ) ;
17465: LD_STRING getStreamItemsFromMission("","","")
17467: PPUSH
17468: CALL_OW 559
// end ;
17472: LD_VAR 0 2
17476: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17477: LD_EXP 22
17481: PUSH
17482: LD_EXP 27
17486: AND
17487: IFFALSE 17611
17489: GO 17491
17491: DISABLE
17492: LD_INT 0
17494: PPUSH
17495: PPUSH
// begin enable ;
17496: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17497: LD_ADDR_VAR 0 2
17501: PUSH
17502: LD_INT 22
17504: PUSH
17505: LD_OWVAR 2
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 2
17516: PUSH
17517: LD_INT 34
17519: PUSH
17520: LD_INT 7
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 34
17529: PUSH
17530: LD_INT 45
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 34
17539: PUSH
17540: LD_INT 28
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 34
17549: PUSH
17550: LD_INT 47
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PPUSH
17568: CALL_OW 69
17572: ST_TO_ADDR
// if not tmp then
17573: LD_VAR 0 2
17577: NOT
17578: IFFALSE 17582
// exit ;
17580: GO 17611
// for i in tmp do
17582: LD_ADDR_VAR 0 1
17586: PUSH
17587: LD_VAR 0 2
17591: PUSH
17592: FOR_IN
17593: IFFALSE 17609
// begin SetLives ( i , 0 ) ;
17595: LD_VAR 0 1
17599: PPUSH
17600: LD_INT 0
17602: PPUSH
17603: CALL_OW 234
// end ;
17607: GO 17592
17609: POP
17610: POP
// end ;
17611: PPOPN 2
17613: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17614: LD_EXP 22
17618: PUSH
17619: LD_EXP 28
17623: AND
17624: IFFALSE 17708
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
17632: PPUSH
// begin enable ;
17633: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17634: LD_ADDR_VAR 0 2
17638: PUSH
17639: LD_INT 22
17641: PUSH
17642: LD_OWVAR 2
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 32
17653: PUSH
17654: LD_INT 3
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PPUSH
17665: CALL_OW 69
17669: ST_TO_ADDR
// if not tmp then
17670: LD_VAR 0 2
17674: NOT
17675: IFFALSE 17679
// exit ;
17677: GO 17708
// for i in tmp do
17679: LD_ADDR_VAR 0 1
17683: PUSH
17684: LD_VAR 0 2
17688: PUSH
17689: FOR_IN
17690: IFFALSE 17706
// begin SetLives ( i , 0 ) ;
17692: LD_VAR 0 1
17696: PPUSH
17697: LD_INT 0
17699: PPUSH
17700: CALL_OW 234
// end ;
17704: GO 17689
17706: POP
17707: POP
// end ;
17708: PPOPN 2
17710: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17711: LD_EXP 22
17715: PUSH
17716: LD_EXP 25
17720: AND
17721: IFFALSE 17814
17723: GO 17725
17725: DISABLE
17726: LD_INT 0
17728: PPUSH
// begin enable ;
17729: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17730: LD_ADDR_VAR 0 1
17734: PUSH
17735: LD_INT 22
17737: PUSH
17738: LD_OWVAR 2
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 25
17752: PUSH
17753: LD_INT 5
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 25
17762: PUSH
17763: LD_INT 9
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 25
17772: PUSH
17773: LD_INT 8
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PPUSH
17790: CALL_OW 69
17794: PUSH
17795: FOR_IN
17796: IFFALSE 17812
// begin SetClass ( i , 1 ) ;
17798: LD_VAR 0 1
17802: PPUSH
17803: LD_INT 1
17805: PPUSH
17806: CALL_OW 336
// end ;
17810: GO 17795
17812: POP
17813: POP
// end ;
17814: PPOPN 1
17816: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17817: LD_EXP 22
17821: PUSH
17822: LD_EXP 26
17826: AND
17827: PUSH
17828: LD_OWVAR 65
17832: PUSH
17833: LD_INT 7
17835: LESS
17836: AND
17837: IFFALSE 17851
17839: GO 17841
17841: DISABLE
// begin enable ;
17842: ENABLE
// game_speed := 7 ;
17843: LD_ADDR_OWVAR 65
17847: PUSH
17848: LD_INT 7
17850: ST_TO_ADDR
// end ;
17851: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17852: LD_EXP 22
17856: PUSH
17857: LD_EXP 29
17861: AND
17862: IFFALSE 18064
17864: GO 17866
17866: DISABLE
17867: LD_INT 0
17869: PPUSH
17870: PPUSH
17871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17872: LD_ADDR_VAR 0 3
17876: PUSH
17877: LD_INT 81
17879: PUSH
17880: LD_OWVAR 2
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 21
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PPUSH
17903: CALL_OW 69
17907: ST_TO_ADDR
// if not tmp then
17908: LD_VAR 0 3
17912: NOT
17913: IFFALSE 17917
// exit ;
17915: GO 18064
// if tmp > 5 then
17917: LD_VAR 0 3
17921: PUSH
17922: LD_INT 5
17924: GREATER
17925: IFFALSE 17937
// k := 5 else
17927: LD_ADDR_VAR 0 2
17931: PUSH
17932: LD_INT 5
17934: ST_TO_ADDR
17935: GO 17947
// k := tmp ;
17937: LD_ADDR_VAR 0 2
17941: PUSH
17942: LD_VAR 0 3
17946: ST_TO_ADDR
// for i := 1 to k do
17947: LD_ADDR_VAR 0 1
17951: PUSH
17952: DOUBLE
17953: LD_INT 1
17955: DEC
17956: ST_TO_ADDR
17957: LD_VAR 0 2
17961: PUSH
17962: FOR_TO
17963: IFFALSE 18062
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17965: LD_VAR 0 3
17969: PUSH
17970: LD_VAR 0 1
17974: ARRAY
17975: PPUSH
17976: LD_VAR 0 1
17980: PUSH
17981: LD_INT 4
17983: MOD
17984: PUSH
17985: LD_INT 1
17987: PLUS
17988: PPUSH
17989: CALL_OW 259
17993: PUSH
17994: LD_INT 10
17996: LESS
17997: IFFALSE 18060
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17999: LD_VAR 0 3
18003: PUSH
18004: LD_VAR 0 1
18008: ARRAY
18009: PPUSH
18010: LD_VAR 0 1
18014: PUSH
18015: LD_INT 4
18017: MOD
18018: PUSH
18019: LD_INT 1
18021: PLUS
18022: PPUSH
18023: LD_VAR 0 3
18027: PUSH
18028: LD_VAR 0 1
18032: ARRAY
18033: PPUSH
18034: LD_VAR 0 1
18038: PUSH
18039: LD_INT 4
18041: MOD
18042: PUSH
18043: LD_INT 1
18045: PLUS
18046: PPUSH
18047: CALL_OW 259
18051: PUSH
18052: LD_INT 1
18054: PLUS
18055: PPUSH
18056: CALL_OW 237
18060: GO 17962
18062: POP
18063: POP
// end ;
18064: PPOPN 3
18066: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18067: LD_EXP 22
18071: PUSH
18072: LD_EXP 30
18076: AND
18077: IFFALSE 18097
18079: GO 18081
18081: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18082: LD_INT 4
18084: PPUSH
18085: LD_OWVAR 2
18089: PPUSH
18090: LD_INT 0
18092: PPUSH
18093: CALL_OW 324
18097: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18098: LD_EXP 22
18102: PUSH
18103: LD_EXP 59
18107: AND
18108: IFFALSE 18128
18110: GO 18112
18112: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18113: LD_INT 19
18115: PPUSH
18116: LD_OWVAR 2
18120: PPUSH
18121: LD_INT 0
18123: PPUSH
18124: CALL_OW 324
18128: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18129: LD_EXP 22
18133: PUSH
18134: LD_EXP 31
18138: AND
18139: IFFALSE 18241
18141: GO 18143
18143: DISABLE
18144: LD_INT 0
18146: PPUSH
18147: PPUSH
// begin enable ;
18148: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18149: LD_ADDR_VAR 0 2
18153: PUSH
18154: LD_INT 22
18156: PUSH
18157: LD_OWVAR 2
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 2
18168: PUSH
18169: LD_INT 34
18171: PUSH
18172: LD_INT 11
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 34
18181: PUSH
18182: LD_INT 30
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PPUSH
18198: CALL_OW 69
18202: ST_TO_ADDR
// if not tmp then
18203: LD_VAR 0 2
18207: NOT
18208: IFFALSE 18212
// exit ;
18210: GO 18241
// for i in tmp do
18212: LD_ADDR_VAR 0 1
18216: PUSH
18217: LD_VAR 0 2
18221: PUSH
18222: FOR_IN
18223: IFFALSE 18239
// begin SetLives ( i , 0 ) ;
18225: LD_VAR 0 1
18229: PPUSH
18230: LD_INT 0
18232: PPUSH
18233: CALL_OW 234
// end ;
18237: GO 18222
18239: POP
18240: POP
// end ;
18241: PPOPN 2
18243: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18244: LD_EXP 22
18248: PUSH
18249: LD_EXP 32
18253: AND
18254: IFFALSE 18274
18256: GO 18258
18258: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18259: LD_INT 32
18261: PPUSH
18262: LD_OWVAR 2
18266: PPUSH
18267: LD_INT 0
18269: PPUSH
18270: CALL_OW 324
18274: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18275: LD_EXP 22
18279: PUSH
18280: LD_EXP 33
18284: AND
18285: IFFALSE 18466
18287: GO 18289
18289: DISABLE
18290: LD_INT 0
18292: PPUSH
18293: PPUSH
18294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18295: LD_ADDR_VAR 0 2
18299: PUSH
18300: LD_INT 22
18302: PUSH
18303: LD_OWVAR 2
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 33
18314: PUSH
18315: LD_INT 3
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PPUSH
18326: CALL_OW 69
18330: ST_TO_ADDR
// if not tmp then
18331: LD_VAR 0 2
18335: NOT
18336: IFFALSE 18340
// exit ;
18338: GO 18466
// side := 0 ;
18340: LD_ADDR_VAR 0 3
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// for i := 1 to 8 do
18348: LD_ADDR_VAR 0 1
18352: PUSH
18353: DOUBLE
18354: LD_INT 1
18356: DEC
18357: ST_TO_ADDR
18358: LD_INT 8
18360: PUSH
18361: FOR_TO
18362: IFFALSE 18410
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18364: LD_OWVAR 2
18368: PUSH
18369: LD_VAR 0 1
18373: NONEQUAL
18374: PUSH
18375: LD_OWVAR 2
18379: PPUSH
18380: LD_VAR 0 1
18384: PPUSH
18385: CALL_OW 81
18389: PUSH
18390: LD_INT 2
18392: EQUAL
18393: AND
18394: IFFALSE 18408
// begin side := i ;
18396: LD_ADDR_VAR 0 3
18400: PUSH
18401: LD_VAR 0 1
18405: ST_TO_ADDR
// break ;
18406: GO 18410
// end ;
18408: GO 18361
18410: POP
18411: POP
// if not side then
18412: LD_VAR 0 3
18416: NOT
18417: IFFALSE 18421
// exit ;
18419: GO 18466
// for i := 1 to tmp do
18421: LD_ADDR_VAR 0 1
18425: PUSH
18426: DOUBLE
18427: LD_INT 1
18429: DEC
18430: ST_TO_ADDR
18431: LD_VAR 0 2
18435: PUSH
18436: FOR_TO
18437: IFFALSE 18464
// if Prob ( 60 ) then
18439: LD_INT 60
18441: PPUSH
18442: CALL_OW 13
18446: IFFALSE 18462
// SetSide ( i , side ) ;
18448: LD_VAR 0 1
18452: PPUSH
18453: LD_VAR 0 3
18457: PPUSH
18458: CALL_OW 235
18462: GO 18436
18464: POP
18465: POP
// end ;
18466: PPOPN 3
18468: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18469: LD_EXP 22
18473: PUSH
18474: LD_EXP 35
18478: AND
18479: IFFALSE 18598
18481: GO 18483
18483: DISABLE
18484: LD_INT 0
18486: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18487: LD_ADDR_VAR 0 1
18491: PUSH
18492: LD_INT 22
18494: PUSH
18495: LD_OWVAR 2
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 21
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 3
18516: PUSH
18517: LD_INT 23
18519: PUSH
18520: LD_INT 0
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: PPUSH
18536: CALL_OW 69
18540: PUSH
18541: FOR_IN
18542: IFFALSE 18596
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18544: LD_VAR 0 1
18548: PPUSH
18549: CALL_OW 257
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: LD_INT 2
18559: PUSH
18560: LD_INT 3
18562: PUSH
18563: LD_INT 4
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: IN
18572: IFFALSE 18594
// SetClass ( un , rand ( 1 , 4 ) ) ;
18574: LD_VAR 0 1
18578: PPUSH
18579: LD_INT 1
18581: PPUSH
18582: LD_INT 4
18584: PPUSH
18585: CALL_OW 12
18589: PPUSH
18590: CALL_OW 336
18594: GO 18541
18596: POP
18597: POP
// end ;
18598: PPOPN 1
18600: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18601: LD_EXP 22
18605: PUSH
18606: LD_EXP 34
18610: AND
18611: IFFALSE 18690
18613: GO 18615
18615: DISABLE
18616: LD_INT 0
18618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18619: LD_ADDR_VAR 0 1
18623: PUSH
18624: LD_INT 22
18626: PUSH
18627: LD_OWVAR 2
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 21
18638: PUSH
18639: LD_INT 3
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PPUSH
18650: CALL_OW 69
18654: ST_TO_ADDR
// if not tmp then
18655: LD_VAR 0 1
18659: NOT
18660: IFFALSE 18664
// exit ;
18662: GO 18690
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18664: LD_VAR 0 1
18668: PUSH
18669: LD_INT 1
18671: PPUSH
18672: LD_VAR 0 1
18676: PPUSH
18677: CALL_OW 12
18681: ARRAY
18682: PPUSH
18683: LD_INT 100
18685: PPUSH
18686: CALL_OW 234
// end ;
18690: PPOPN 1
18692: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18693: LD_EXP 22
18697: PUSH
18698: LD_EXP 36
18702: AND
18703: IFFALSE 18801
18705: GO 18707
18707: DISABLE
18708: LD_INT 0
18710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18711: LD_ADDR_VAR 0 1
18715: PUSH
18716: LD_INT 22
18718: PUSH
18719: LD_OWVAR 2
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 21
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PPUSH
18742: CALL_OW 69
18746: ST_TO_ADDR
// if not tmp then
18747: LD_VAR 0 1
18751: NOT
18752: IFFALSE 18756
// exit ;
18754: GO 18801
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18756: LD_VAR 0 1
18760: PUSH
18761: LD_INT 1
18763: PPUSH
18764: LD_VAR 0 1
18768: PPUSH
18769: CALL_OW 12
18773: ARRAY
18774: PPUSH
18775: LD_INT 1
18777: PPUSH
18778: LD_INT 4
18780: PPUSH
18781: CALL_OW 12
18785: PPUSH
18786: LD_INT 3000
18788: PPUSH
18789: LD_INT 9000
18791: PPUSH
18792: CALL_OW 12
18796: PPUSH
18797: CALL_OW 492
// end ;
18801: PPOPN 1
18803: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18804: LD_EXP 22
18808: PUSH
18809: LD_EXP 37
18813: AND
18814: IFFALSE 18834
18816: GO 18818
18818: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18819: LD_INT 1
18821: PPUSH
18822: LD_OWVAR 2
18826: PPUSH
18827: LD_INT 0
18829: PPUSH
18830: CALL_OW 324
18834: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18835: LD_EXP 22
18839: PUSH
18840: LD_EXP 38
18844: AND
18845: IFFALSE 18928
18847: GO 18849
18849: DISABLE
18850: LD_INT 0
18852: PPUSH
18853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18854: LD_ADDR_VAR 0 2
18858: PUSH
18859: LD_INT 22
18861: PUSH
18862: LD_OWVAR 2
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 21
18873: PUSH
18874: LD_INT 3
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PPUSH
18885: CALL_OW 69
18889: ST_TO_ADDR
// if not tmp then
18890: LD_VAR 0 2
18894: NOT
18895: IFFALSE 18899
// exit ;
18897: GO 18928
// for i in tmp do
18899: LD_ADDR_VAR 0 1
18903: PUSH
18904: LD_VAR 0 2
18908: PUSH
18909: FOR_IN
18910: IFFALSE 18926
// SetBLevel ( i , 10 ) ;
18912: LD_VAR 0 1
18916: PPUSH
18917: LD_INT 10
18919: PPUSH
18920: CALL_OW 241
18924: GO 18909
18926: POP
18927: POP
// end ;
18928: PPOPN 2
18930: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18931: LD_EXP 22
18935: PUSH
18936: LD_EXP 39
18940: AND
18941: IFFALSE 19052
18943: GO 18945
18945: DISABLE
18946: LD_INT 0
18948: PPUSH
18949: PPUSH
18950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18951: LD_ADDR_VAR 0 3
18955: PUSH
18956: LD_INT 22
18958: PUSH
18959: LD_OWVAR 2
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 25
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PPUSH
18982: CALL_OW 69
18986: ST_TO_ADDR
// if not tmp then
18987: LD_VAR 0 3
18991: NOT
18992: IFFALSE 18996
// exit ;
18994: GO 19052
// un := tmp [ rand ( 1 , tmp ) ] ;
18996: LD_ADDR_VAR 0 2
19000: PUSH
19001: LD_VAR 0 3
19005: PUSH
19006: LD_INT 1
19008: PPUSH
19009: LD_VAR 0 3
19013: PPUSH
19014: CALL_OW 12
19018: ARRAY
19019: ST_TO_ADDR
// if Crawls ( un ) then
19020: LD_VAR 0 2
19024: PPUSH
19025: CALL_OW 318
19029: IFFALSE 19040
// ComWalk ( un ) ;
19031: LD_VAR 0 2
19035: PPUSH
19036: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19040: LD_VAR 0 2
19044: PPUSH
19045: LD_INT 5
19047: PPUSH
19048: CALL_OW 336
// end ;
19052: PPOPN 3
19054: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19055: LD_EXP 22
19059: PUSH
19060: LD_EXP 40
19064: AND
19065: PUSH
19066: LD_OWVAR 67
19070: PUSH
19071: LD_INT 4
19073: LESS
19074: AND
19075: IFFALSE 19094
19077: GO 19079
19079: DISABLE
// begin Difficulty := Difficulty + 1 ;
19080: LD_ADDR_OWVAR 67
19084: PUSH
19085: LD_OWVAR 67
19089: PUSH
19090: LD_INT 1
19092: PLUS
19093: ST_TO_ADDR
// end ;
19094: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19095: LD_EXP 22
19099: PUSH
19100: LD_EXP 41
19104: AND
19105: IFFALSE 19208
19107: GO 19109
19109: DISABLE
19110: LD_INT 0
19112: PPUSH
// begin for i := 1 to 5 do
19113: LD_ADDR_VAR 0 1
19117: PUSH
19118: DOUBLE
19119: LD_INT 1
19121: DEC
19122: ST_TO_ADDR
19123: LD_INT 5
19125: PUSH
19126: FOR_TO
19127: IFFALSE 19206
// begin uc_nation := nation_nature ;
19129: LD_ADDR_OWVAR 21
19133: PUSH
19134: LD_INT 0
19136: ST_TO_ADDR
// uc_side := 0 ;
19137: LD_ADDR_OWVAR 20
19141: PUSH
19142: LD_INT 0
19144: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19145: LD_ADDR_OWVAR 29
19149: PUSH
19150: LD_INT 12
19152: PUSH
19153: LD_INT 12
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: ST_TO_ADDR
// hc_agressivity := 20 ;
19160: LD_ADDR_OWVAR 35
19164: PUSH
19165: LD_INT 20
19167: ST_TO_ADDR
// hc_class := class_tiger ;
19168: LD_ADDR_OWVAR 28
19172: PUSH
19173: LD_INT 14
19175: ST_TO_ADDR
// hc_gallery :=  ;
19176: LD_ADDR_OWVAR 33
19180: PUSH
19181: LD_STRING 
19183: ST_TO_ADDR
// hc_name :=  ;
19184: LD_ADDR_OWVAR 26
19188: PUSH
19189: LD_STRING 
19191: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19192: CALL_OW 44
19196: PPUSH
19197: LD_INT 0
19199: PPUSH
19200: CALL_OW 51
// end ;
19204: GO 19126
19206: POP
19207: POP
// end ;
19208: PPOPN 1
19210: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19211: LD_EXP 22
19215: PUSH
19216: LD_EXP 42
19220: AND
19221: IFFALSE 19230
19223: GO 19225
19225: DISABLE
// StreamSibBomb ;
19226: CALL 19231 0 0
19230: END
// export function StreamSibBomb ; var i , x , y ; begin
19231: LD_INT 0
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
// result := false ;
19237: LD_ADDR_VAR 0 1
19241: PUSH
19242: LD_INT 0
19244: ST_TO_ADDR
// for i := 1 to 16 do
19245: LD_ADDR_VAR 0 2
19249: PUSH
19250: DOUBLE
19251: LD_INT 1
19253: DEC
19254: ST_TO_ADDR
19255: LD_INT 16
19257: PUSH
19258: FOR_TO
19259: IFFALSE 19458
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19261: LD_ADDR_VAR 0 3
19265: PUSH
19266: LD_INT 10
19268: PUSH
19269: LD_INT 20
19271: PUSH
19272: LD_INT 30
19274: PUSH
19275: LD_INT 40
19277: PUSH
19278: LD_INT 50
19280: PUSH
19281: LD_INT 60
19283: PUSH
19284: LD_INT 70
19286: PUSH
19287: LD_INT 80
19289: PUSH
19290: LD_INT 90
19292: PUSH
19293: LD_INT 100
19295: PUSH
19296: LD_INT 110
19298: PUSH
19299: LD_INT 120
19301: PUSH
19302: LD_INT 130
19304: PUSH
19305: LD_INT 140
19307: PUSH
19308: LD_INT 150
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 1
19330: PPUSH
19331: LD_INT 15
19333: PPUSH
19334: CALL_OW 12
19338: ARRAY
19339: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19340: LD_ADDR_VAR 0 4
19344: PUSH
19345: LD_INT 10
19347: PUSH
19348: LD_INT 20
19350: PUSH
19351: LD_INT 30
19353: PUSH
19354: LD_INT 40
19356: PUSH
19357: LD_INT 50
19359: PUSH
19360: LD_INT 60
19362: PUSH
19363: LD_INT 70
19365: PUSH
19366: LD_INT 80
19368: PUSH
19369: LD_INT 90
19371: PUSH
19372: LD_INT 100
19374: PUSH
19375: LD_INT 110
19377: PUSH
19378: LD_INT 120
19380: PUSH
19381: LD_INT 130
19383: PUSH
19384: LD_INT 140
19386: PUSH
19387: LD_INT 150
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 1
19409: PPUSH
19410: LD_INT 15
19412: PPUSH
19413: CALL_OW 12
19417: ARRAY
19418: ST_TO_ADDR
// if ValidHex ( x , y ) then
19419: LD_VAR 0 3
19423: PPUSH
19424: LD_VAR 0 4
19428: PPUSH
19429: CALL_OW 488
19433: IFFALSE 19456
// begin result := [ x , y ] ;
19435: LD_ADDR_VAR 0 1
19439: PUSH
19440: LD_VAR 0 3
19444: PUSH
19445: LD_VAR 0 4
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: ST_TO_ADDR
// break ;
19454: GO 19458
// end ; end ;
19456: GO 19258
19458: POP
19459: POP
// if result then
19460: LD_VAR 0 1
19464: IFFALSE 19524
// begin ToLua ( playSibBomb() ) ;
19466: LD_STRING playSibBomb()
19468: PPUSH
19469: CALL_OW 559
// wait ( 0 0$14 ) ;
19473: LD_INT 490
19475: PPUSH
19476: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19480: LD_VAR 0 1
19484: PUSH
19485: LD_INT 1
19487: ARRAY
19488: PPUSH
19489: LD_VAR 0 1
19493: PUSH
19494: LD_INT 2
19496: ARRAY
19497: PPUSH
19498: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19502: LD_VAR 0 1
19506: PUSH
19507: LD_INT 1
19509: ARRAY
19510: PPUSH
19511: LD_VAR 0 1
19515: PUSH
19516: LD_INT 2
19518: ARRAY
19519: PPUSH
19520: CALL_OW 429
// end ; end ;
19524: LD_VAR 0 1
19528: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19529: LD_EXP 22
19533: PUSH
19534: LD_EXP 44
19538: AND
19539: IFFALSE 19551
19541: GO 19543
19543: DISABLE
// YouLost (  ) ;
19544: LD_STRING 
19546: PPUSH
19547: CALL_OW 104
19551: END
// every 0 0$1 trigger StreamModeActive and sFog do
19552: LD_EXP 22
19556: PUSH
19557: LD_EXP 43
19561: AND
19562: IFFALSE 19576
19564: GO 19566
19566: DISABLE
// FogOff ( your_side ) ;
19567: LD_OWVAR 2
19571: PPUSH
19572: CALL_OW 344
19576: END
// every 0 0$1 trigger StreamModeActive and sSun do
19577: LD_EXP 22
19581: PUSH
19582: LD_EXP 45
19586: AND
19587: IFFALSE 19615
19589: GO 19591
19591: DISABLE
// begin solar_recharge_percent := 0 ;
19592: LD_ADDR_OWVAR 79
19596: PUSH
19597: LD_INT 0
19599: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19600: LD_INT 10500
19602: PPUSH
19603: CALL_OW 67
// solar_recharge_percent := 100 ;
19607: LD_ADDR_OWVAR 79
19611: PUSH
19612: LD_INT 100
19614: ST_TO_ADDR
// end ;
19615: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19616: LD_EXP 22
19620: PUSH
19621: LD_EXP 46
19625: AND
19626: IFFALSE 19865
19628: GO 19630
19630: DISABLE
19631: LD_INT 0
19633: PPUSH
19634: PPUSH
19635: PPUSH
// begin tmp := [ ] ;
19636: LD_ADDR_VAR 0 3
19640: PUSH
19641: EMPTY
19642: ST_TO_ADDR
// for i := 1 to 6 do
19643: LD_ADDR_VAR 0 1
19647: PUSH
19648: DOUBLE
19649: LD_INT 1
19651: DEC
19652: ST_TO_ADDR
19653: LD_INT 6
19655: PUSH
19656: FOR_TO
19657: IFFALSE 19762
// begin uc_nation := nation_nature ;
19659: LD_ADDR_OWVAR 21
19663: PUSH
19664: LD_INT 0
19666: ST_TO_ADDR
// uc_side := 0 ;
19667: LD_ADDR_OWVAR 20
19671: PUSH
19672: LD_INT 0
19674: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19675: LD_ADDR_OWVAR 29
19679: PUSH
19680: LD_INT 12
19682: PUSH
19683: LD_INT 12
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: ST_TO_ADDR
// hc_agressivity := 20 ;
19690: LD_ADDR_OWVAR 35
19694: PUSH
19695: LD_INT 20
19697: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19698: LD_ADDR_OWVAR 28
19702: PUSH
19703: LD_INT 17
19705: ST_TO_ADDR
// hc_gallery :=  ;
19706: LD_ADDR_OWVAR 33
19710: PUSH
19711: LD_STRING 
19713: ST_TO_ADDR
// hc_name :=  ;
19714: LD_ADDR_OWVAR 26
19718: PUSH
19719: LD_STRING 
19721: ST_TO_ADDR
// un := CreateHuman ;
19722: LD_ADDR_VAR 0 2
19726: PUSH
19727: CALL_OW 44
19731: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19732: LD_VAR 0 2
19736: PPUSH
19737: LD_INT 1
19739: PPUSH
19740: CALL_OW 51
// tmp := tmp ^ un ;
19744: LD_ADDR_VAR 0 3
19748: PUSH
19749: LD_VAR 0 3
19753: PUSH
19754: LD_VAR 0 2
19758: ADD
19759: ST_TO_ADDR
// end ;
19760: GO 19656
19762: POP
19763: POP
// repeat wait ( 0 0$1 ) ;
19764: LD_INT 35
19766: PPUSH
19767: CALL_OW 67
// for un in tmp do
19771: LD_ADDR_VAR 0 2
19775: PUSH
19776: LD_VAR 0 3
19780: PUSH
19781: FOR_IN
19782: IFFALSE 19856
// begin if IsDead ( un ) then
19784: LD_VAR 0 2
19788: PPUSH
19789: CALL_OW 301
19793: IFFALSE 19813
// begin tmp := tmp diff un ;
19795: LD_ADDR_VAR 0 3
19799: PUSH
19800: LD_VAR 0 3
19804: PUSH
19805: LD_VAR 0 2
19809: DIFF
19810: ST_TO_ADDR
// continue ;
19811: GO 19781
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19813: LD_VAR 0 2
19817: PPUSH
19818: LD_INT 3
19820: PUSH
19821: LD_INT 22
19823: PUSH
19824: LD_INT 0
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PPUSH
19835: CALL_OW 69
19839: PPUSH
19840: LD_VAR 0 2
19844: PPUSH
19845: CALL_OW 74
19849: PPUSH
19850: CALL_OW 115
// end ;
19854: GO 19781
19856: POP
19857: POP
// until not tmp ;
19858: LD_VAR 0 3
19862: NOT
19863: IFFALSE 19764
// end ;
19865: PPOPN 3
19867: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19868: LD_EXP 22
19872: PUSH
19873: LD_EXP 47
19877: AND
19878: IFFALSE 19932
19880: GO 19882
19882: DISABLE
// begin ToLua ( displayTroll(); ) ;
19883: LD_STRING displayTroll();
19885: PPUSH
19886: CALL_OW 559
// wait ( 3 3$00 ) ;
19890: LD_INT 6300
19892: PPUSH
19893: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19897: LD_STRING hideTroll();
19899: PPUSH
19900: CALL_OW 559
// wait ( 1 1$00 ) ;
19904: LD_INT 2100
19906: PPUSH
19907: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19911: LD_STRING displayTroll();
19913: PPUSH
19914: CALL_OW 559
// wait ( 1 1$00 ) ;
19918: LD_INT 2100
19920: PPUSH
19921: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19925: LD_STRING hideTroll();
19927: PPUSH
19928: CALL_OW 559
// end ;
19932: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19933: LD_EXP 22
19937: PUSH
19938: LD_EXP 48
19942: AND
19943: IFFALSE 20006
19945: GO 19947
19947: DISABLE
19948: LD_INT 0
19950: PPUSH
// begin p := 0 ;
19951: LD_ADDR_VAR 0 1
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// repeat game_speed := 1 ;
19959: LD_ADDR_OWVAR 65
19963: PUSH
19964: LD_INT 1
19966: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19967: LD_INT 35
19969: PPUSH
19970: CALL_OW 67
// p := p + 1 ;
19974: LD_ADDR_VAR 0 1
19978: PUSH
19979: LD_VAR 0 1
19983: PUSH
19984: LD_INT 1
19986: PLUS
19987: ST_TO_ADDR
// until p >= 60 ;
19988: LD_VAR 0 1
19992: PUSH
19993: LD_INT 60
19995: GREATEREQUAL
19996: IFFALSE 19959
// game_speed := 4 ;
19998: LD_ADDR_OWVAR 65
20002: PUSH
20003: LD_INT 4
20005: ST_TO_ADDR
// end ;
20006: PPOPN 1
20008: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20009: LD_EXP 22
20013: PUSH
20014: LD_EXP 49
20018: AND
20019: IFFALSE 20165
20021: GO 20023
20023: DISABLE
20024: LD_INT 0
20026: PPUSH
20027: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20028: LD_ADDR_VAR 0 1
20032: PUSH
20033: LD_INT 22
20035: PUSH
20036: LD_OWVAR 2
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 30
20050: PUSH
20051: LD_INT 0
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 30
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PPUSH
20077: CALL_OW 69
20081: ST_TO_ADDR
// if not depot then
20082: LD_VAR 0 1
20086: NOT
20087: IFFALSE 20091
// exit ;
20089: GO 20165
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20091: LD_ADDR_VAR 0 2
20095: PUSH
20096: LD_VAR 0 1
20100: PUSH
20101: LD_INT 1
20103: PPUSH
20104: LD_VAR 0 1
20108: PPUSH
20109: CALL_OW 12
20113: ARRAY
20114: PPUSH
20115: CALL_OW 274
20119: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20120: LD_VAR 0 2
20124: PPUSH
20125: LD_INT 1
20127: PPUSH
20128: LD_INT 0
20130: PPUSH
20131: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20135: LD_VAR 0 2
20139: PPUSH
20140: LD_INT 2
20142: PPUSH
20143: LD_INT 0
20145: PPUSH
20146: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20150: LD_VAR 0 2
20154: PPUSH
20155: LD_INT 3
20157: PPUSH
20158: LD_INT 0
20160: PPUSH
20161: CALL_OW 277
// end ;
20165: PPOPN 2
20167: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20168: LD_EXP 22
20172: PUSH
20173: LD_EXP 50
20177: AND
20178: IFFALSE 20275
20180: GO 20182
20182: DISABLE
20183: LD_INT 0
20185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20186: LD_ADDR_VAR 0 1
20190: PUSH
20191: LD_INT 22
20193: PUSH
20194: LD_OWVAR 2
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 21
20205: PUSH
20206: LD_INT 1
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 3
20215: PUSH
20216: LD_INT 23
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: LIST
20234: PPUSH
20235: CALL_OW 69
20239: ST_TO_ADDR
// if not tmp then
20240: LD_VAR 0 1
20244: NOT
20245: IFFALSE 20249
// exit ;
20247: GO 20275
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20249: LD_VAR 0 1
20253: PUSH
20254: LD_INT 1
20256: PPUSH
20257: LD_VAR 0 1
20261: PPUSH
20262: CALL_OW 12
20266: ARRAY
20267: PPUSH
20268: LD_INT 200
20270: PPUSH
20271: CALL_OW 234
// end ;
20275: PPOPN 1
20277: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20278: LD_EXP 22
20282: PUSH
20283: LD_EXP 51
20287: AND
20288: IFFALSE 20367
20290: GO 20292
20292: DISABLE
20293: LD_INT 0
20295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20296: LD_ADDR_VAR 0 1
20300: PUSH
20301: LD_INT 22
20303: PUSH
20304: LD_OWVAR 2
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 21
20315: PUSH
20316: LD_INT 2
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PPUSH
20327: CALL_OW 69
20331: ST_TO_ADDR
// if not tmp then
20332: LD_VAR 0 1
20336: NOT
20337: IFFALSE 20341
// exit ;
20339: GO 20367
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20341: LD_VAR 0 1
20345: PUSH
20346: LD_INT 1
20348: PPUSH
20349: LD_VAR 0 1
20353: PPUSH
20354: CALL_OW 12
20358: ARRAY
20359: PPUSH
20360: LD_INT 60
20362: PPUSH
20363: CALL_OW 234
// end ;
20367: PPOPN 1
20369: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20370: LD_EXP 22
20374: PUSH
20375: LD_EXP 52
20379: AND
20380: IFFALSE 20479
20382: GO 20384
20384: DISABLE
20385: LD_INT 0
20387: PPUSH
20388: PPUSH
// begin enable ;
20389: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20390: LD_ADDR_VAR 0 1
20394: PUSH
20395: LD_INT 22
20397: PUSH
20398: LD_OWVAR 2
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 61
20409: PUSH
20410: EMPTY
20411: LIST
20412: PUSH
20413: LD_INT 33
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: LIST
20427: PPUSH
20428: CALL_OW 69
20432: ST_TO_ADDR
// if not tmp then
20433: LD_VAR 0 1
20437: NOT
20438: IFFALSE 20442
// exit ;
20440: GO 20479
// for i in tmp do
20442: LD_ADDR_VAR 0 2
20446: PUSH
20447: LD_VAR 0 1
20451: PUSH
20452: FOR_IN
20453: IFFALSE 20477
// if IsControledBy ( i ) then
20455: LD_VAR 0 2
20459: PPUSH
20460: CALL_OW 312
20464: IFFALSE 20475
// ComUnlink ( i ) ;
20466: LD_VAR 0 2
20470: PPUSH
20471: CALL_OW 136
20475: GO 20452
20477: POP
20478: POP
// end ;
20479: PPOPN 2
20481: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20482: LD_EXP 22
20486: PUSH
20487: LD_EXP 53
20491: AND
20492: IFFALSE 20632
20494: GO 20496
20496: DISABLE
20497: LD_INT 0
20499: PPUSH
20500: PPUSH
// begin ToLua ( displayPowell(); ) ;
20501: LD_STRING displayPowell();
20503: PPUSH
20504: CALL_OW 559
// uc_side := 0 ;
20508: LD_ADDR_OWVAR 20
20512: PUSH
20513: LD_INT 0
20515: ST_TO_ADDR
// uc_nation := 2 ;
20516: LD_ADDR_OWVAR 21
20520: PUSH
20521: LD_INT 2
20523: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20524: LD_ADDR_OWVAR 37
20528: PUSH
20529: LD_INT 14
20531: ST_TO_ADDR
// vc_engine := engine_siberite ;
20532: LD_ADDR_OWVAR 39
20536: PUSH
20537: LD_INT 3
20539: ST_TO_ADDR
// vc_control := control_apeman ;
20540: LD_ADDR_OWVAR 38
20544: PUSH
20545: LD_INT 5
20547: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20548: LD_ADDR_OWVAR 40
20552: PUSH
20553: LD_INT 29
20555: ST_TO_ADDR
// un := CreateVehicle ;
20556: LD_ADDR_VAR 0 2
20560: PUSH
20561: CALL_OW 45
20565: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20566: LD_VAR 0 2
20570: PPUSH
20571: LD_INT 1
20573: PPUSH
20574: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20578: LD_INT 35
20580: PPUSH
20581: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20585: LD_VAR 0 2
20589: PPUSH
20590: LD_INT 22
20592: PUSH
20593: LD_OWVAR 2
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PPUSH
20602: CALL_OW 69
20606: PPUSH
20607: LD_VAR 0 2
20611: PPUSH
20612: CALL_OW 74
20616: PPUSH
20617: CALL_OW 115
// until IsDead ( un ) ;
20621: LD_VAR 0 2
20625: PPUSH
20626: CALL_OW 301
20630: IFFALSE 20578
// end ;
20632: PPOPN 2
20634: END
// every 0 0$1 trigger StreamModeActive and sStu do
20635: LD_EXP 22
20639: PUSH
20640: LD_EXP 61
20644: AND
20645: IFFALSE 20661
20647: GO 20649
20649: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20650: LD_STRING displayStucuk();
20652: PPUSH
20653: CALL_OW 559
// ResetFog ;
20657: CALL_OW 335
// end ;
20661: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20662: LD_EXP 22
20666: PUSH
20667: LD_EXP 54
20671: AND
20672: IFFALSE 20813
20674: GO 20676
20676: DISABLE
20677: LD_INT 0
20679: PPUSH
20680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20681: LD_ADDR_VAR 0 2
20685: PUSH
20686: LD_INT 22
20688: PUSH
20689: LD_OWVAR 2
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 21
20700: PUSH
20701: LD_INT 1
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PPUSH
20712: CALL_OW 69
20716: ST_TO_ADDR
// if not tmp then
20717: LD_VAR 0 2
20721: NOT
20722: IFFALSE 20726
// exit ;
20724: GO 20813
// un := tmp [ rand ( 1 , tmp ) ] ;
20726: LD_ADDR_VAR 0 1
20730: PUSH
20731: LD_VAR 0 2
20735: PUSH
20736: LD_INT 1
20738: PPUSH
20739: LD_VAR 0 2
20743: PPUSH
20744: CALL_OW 12
20748: ARRAY
20749: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20750: LD_VAR 0 1
20754: PPUSH
20755: LD_INT 0
20757: PPUSH
20758: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20762: LD_VAR 0 1
20766: PPUSH
20767: LD_OWVAR 3
20771: PUSH
20772: LD_VAR 0 1
20776: DIFF
20777: PPUSH
20778: LD_VAR 0 1
20782: PPUSH
20783: CALL_OW 74
20787: PPUSH
20788: CALL_OW 115
// wait ( 0 0$20 ) ;
20792: LD_INT 700
20794: PPUSH
20795: CALL_OW 67
// SetSide ( un , your_side ) ;
20799: LD_VAR 0 1
20803: PPUSH
20804: LD_OWVAR 2
20808: PPUSH
20809: CALL_OW 235
// end ;
20813: PPOPN 2
20815: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20816: LD_EXP 22
20820: PUSH
20821: LD_EXP 55
20825: AND
20826: IFFALSE 20932
20828: GO 20830
20830: DISABLE
20831: LD_INT 0
20833: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20834: LD_ADDR_VAR 0 1
20838: PUSH
20839: LD_INT 22
20841: PUSH
20842: LD_OWVAR 2
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 2
20853: PUSH
20854: LD_INT 30
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 30
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PPUSH
20883: CALL_OW 69
20887: ST_TO_ADDR
// if not depot then
20888: LD_VAR 0 1
20892: NOT
20893: IFFALSE 20897
// exit ;
20895: GO 20932
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20897: LD_VAR 0 1
20901: PUSH
20902: LD_INT 1
20904: ARRAY
20905: PPUSH
20906: CALL_OW 250
20910: PPUSH
20911: LD_VAR 0 1
20915: PUSH
20916: LD_INT 1
20918: ARRAY
20919: PPUSH
20920: CALL_OW 251
20924: PPUSH
20925: LD_INT 70
20927: PPUSH
20928: CALL_OW 495
// end ;
20932: PPOPN 1
20934: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20935: LD_EXP 22
20939: PUSH
20940: LD_EXP 56
20944: AND
20945: IFFALSE 21156
20947: GO 20949
20949: DISABLE
20950: LD_INT 0
20952: PPUSH
20953: PPUSH
20954: PPUSH
20955: PPUSH
20956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20957: LD_ADDR_VAR 0 5
20961: PUSH
20962: LD_INT 22
20964: PUSH
20965: LD_OWVAR 2
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 21
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PPUSH
20988: CALL_OW 69
20992: ST_TO_ADDR
// if not tmp then
20993: LD_VAR 0 5
20997: NOT
20998: IFFALSE 21002
// exit ;
21000: GO 21156
// for i in tmp do
21002: LD_ADDR_VAR 0 1
21006: PUSH
21007: LD_VAR 0 5
21011: PUSH
21012: FOR_IN
21013: IFFALSE 21154
// begin d := rand ( 0 , 5 ) ;
21015: LD_ADDR_VAR 0 4
21019: PUSH
21020: LD_INT 0
21022: PPUSH
21023: LD_INT 5
21025: PPUSH
21026: CALL_OW 12
21030: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21031: LD_ADDR_VAR 0 2
21035: PUSH
21036: LD_VAR 0 1
21040: PPUSH
21041: CALL_OW 250
21045: PPUSH
21046: LD_VAR 0 4
21050: PPUSH
21051: LD_INT 3
21053: PPUSH
21054: LD_INT 12
21056: PPUSH
21057: CALL_OW 12
21061: PPUSH
21062: CALL_OW 272
21066: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21067: LD_ADDR_VAR 0 3
21071: PUSH
21072: LD_VAR 0 1
21076: PPUSH
21077: CALL_OW 251
21081: PPUSH
21082: LD_VAR 0 4
21086: PPUSH
21087: LD_INT 3
21089: PPUSH
21090: LD_INT 12
21092: PPUSH
21093: CALL_OW 12
21097: PPUSH
21098: CALL_OW 273
21102: ST_TO_ADDR
// if ValidHex ( x , y ) then
21103: LD_VAR 0 2
21107: PPUSH
21108: LD_VAR 0 3
21112: PPUSH
21113: CALL_OW 488
21117: IFFALSE 21152
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21119: LD_VAR 0 1
21123: PPUSH
21124: LD_VAR 0 2
21128: PPUSH
21129: LD_VAR 0 3
21133: PPUSH
21134: LD_INT 3
21136: PPUSH
21137: LD_INT 6
21139: PPUSH
21140: CALL_OW 12
21144: PPUSH
21145: LD_INT 1
21147: PPUSH
21148: CALL_OW 483
// end ;
21152: GO 21012
21154: POP
21155: POP
// end ;
21156: PPOPN 5
21158: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21159: LD_EXP 22
21163: PUSH
21164: LD_EXP 57
21168: AND
21169: IFFALSE 21263
21171: GO 21173
21173: DISABLE
21174: LD_INT 0
21176: PPUSH
21177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21178: LD_ADDR_VAR 0 2
21182: PUSH
21183: LD_INT 22
21185: PUSH
21186: LD_OWVAR 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 32
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 21
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: LIST
21219: PPUSH
21220: CALL_OW 69
21224: ST_TO_ADDR
// if not tmp then
21225: LD_VAR 0 2
21229: NOT
21230: IFFALSE 21234
// exit ;
21232: GO 21263
// for i in tmp do
21234: LD_ADDR_VAR 0 1
21238: PUSH
21239: LD_VAR 0 2
21243: PUSH
21244: FOR_IN
21245: IFFALSE 21261
// SetFuel ( i , 0 ) ;
21247: LD_VAR 0 1
21251: PPUSH
21252: LD_INT 0
21254: PPUSH
21255: CALL_OW 240
21259: GO 21244
21261: POP
21262: POP
// end ;
21263: PPOPN 2
21265: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21266: LD_EXP 22
21270: PUSH
21271: LD_EXP 58
21275: AND
21276: IFFALSE 21342
21278: GO 21280
21280: DISABLE
21281: LD_INT 0
21283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21284: LD_ADDR_VAR 0 1
21288: PUSH
21289: LD_INT 22
21291: PUSH
21292: LD_OWVAR 2
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 30
21303: PUSH
21304: LD_INT 29
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PPUSH
21315: CALL_OW 69
21319: ST_TO_ADDR
// if not tmp then
21320: LD_VAR 0 1
21324: NOT
21325: IFFALSE 21329
// exit ;
21327: GO 21342
// DestroyUnit ( tmp [ 1 ] ) ;
21329: LD_VAR 0 1
21333: PUSH
21334: LD_INT 1
21336: ARRAY
21337: PPUSH
21338: CALL_OW 65
// end ;
21342: PPOPN 1
21344: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21345: LD_EXP 22
21349: PUSH
21350: LD_EXP 60
21354: AND
21355: IFFALSE 21484
21357: GO 21359
21359: DISABLE
21360: LD_INT 0
21362: PPUSH
// begin uc_side := 0 ;
21363: LD_ADDR_OWVAR 20
21367: PUSH
21368: LD_INT 0
21370: ST_TO_ADDR
// uc_nation := nation_arabian ;
21371: LD_ADDR_OWVAR 21
21375: PUSH
21376: LD_INT 2
21378: ST_TO_ADDR
// hc_gallery :=  ;
21379: LD_ADDR_OWVAR 33
21383: PUSH
21384: LD_STRING 
21386: ST_TO_ADDR
// hc_name :=  ;
21387: LD_ADDR_OWVAR 26
21391: PUSH
21392: LD_STRING 
21394: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21395: LD_INT 1
21397: PPUSH
21398: LD_INT 11
21400: PPUSH
21401: LD_INT 10
21403: PPUSH
21404: CALL_OW 380
// un := CreateHuman ;
21408: LD_ADDR_VAR 0 1
21412: PUSH
21413: CALL_OW 44
21417: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21418: LD_VAR 0 1
21422: PPUSH
21423: LD_INT 1
21425: PPUSH
21426: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21430: LD_INT 35
21432: PPUSH
21433: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21437: LD_VAR 0 1
21441: PPUSH
21442: LD_INT 22
21444: PUSH
21445: LD_OWVAR 2
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PPUSH
21454: CALL_OW 69
21458: PPUSH
21459: LD_VAR 0 1
21463: PPUSH
21464: CALL_OW 74
21468: PPUSH
21469: CALL_OW 115
// until IsDead ( un ) ;
21473: LD_VAR 0 1
21477: PPUSH
21478: CALL_OW 301
21482: IFFALSE 21430
// end ;
21484: PPOPN 1
21486: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21487: LD_EXP 22
21491: PUSH
21492: LD_EXP 62
21496: AND
21497: IFFALSE 21509
21499: GO 21501
21501: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21502: LD_STRING earthquake(getX(game), 0, 32)
21504: PPUSH
21505: CALL_OW 559
21509: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21510: LD_EXP 22
21514: PUSH
21515: LD_EXP 63
21519: AND
21520: IFFALSE 21611
21522: GO 21524
21524: DISABLE
21525: LD_INT 0
21527: PPUSH
// begin enable ;
21528: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21529: LD_ADDR_VAR 0 1
21533: PUSH
21534: LD_INT 22
21536: PUSH
21537: LD_OWVAR 2
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 21
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 33
21558: PUSH
21559: LD_INT 3
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: LIST
21570: PPUSH
21571: CALL_OW 69
21575: ST_TO_ADDR
// if not tmp then
21576: LD_VAR 0 1
21580: NOT
21581: IFFALSE 21585
// exit ;
21583: GO 21611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21585: LD_VAR 0 1
21589: PUSH
21590: LD_INT 1
21592: PPUSH
21593: LD_VAR 0 1
21597: PPUSH
21598: CALL_OW 12
21602: ARRAY
21603: PPUSH
21604: LD_INT 1
21606: PPUSH
21607: CALL_OW 234
// end ;
21611: PPOPN 1
21613: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21614: LD_EXP 22
21618: PUSH
21619: LD_EXP 64
21623: AND
21624: IFFALSE 21765
21626: GO 21628
21628: DISABLE
21629: LD_INT 0
21631: PPUSH
21632: PPUSH
21633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21634: LD_ADDR_VAR 0 3
21638: PUSH
21639: LD_INT 22
21641: PUSH
21642: LD_OWVAR 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 25
21653: PUSH
21654: LD_INT 1
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PPUSH
21665: CALL_OW 69
21669: ST_TO_ADDR
// if not tmp then
21670: LD_VAR 0 3
21674: NOT
21675: IFFALSE 21679
// exit ;
21677: GO 21765
// un := tmp [ rand ( 1 , tmp ) ] ;
21679: LD_ADDR_VAR 0 2
21683: PUSH
21684: LD_VAR 0 3
21688: PUSH
21689: LD_INT 1
21691: PPUSH
21692: LD_VAR 0 3
21696: PPUSH
21697: CALL_OW 12
21701: ARRAY
21702: ST_TO_ADDR
// if Crawls ( un ) then
21703: LD_VAR 0 2
21707: PPUSH
21708: CALL_OW 318
21712: IFFALSE 21723
// ComWalk ( un ) ;
21714: LD_VAR 0 2
21718: PPUSH
21719: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21723: LD_VAR 0 2
21727: PPUSH
21728: LD_INT 9
21730: PPUSH
21731: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21735: LD_INT 28
21737: PPUSH
21738: LD_OWVAR 2
21742: PPUSH
21743: LD_INT 2
21745: PPUSH
21746: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21750: LD_INT 29
21752: PPUSH
21753: LD_OWVAR 2
21757: PPUSH
21758: LD_INT 2
21760: PPUSH
21761: CALL_OW 322
// end ;
21765: PPOPN 3
21767: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21768: LD_EXP 22
21772: PUSH
21773: LD_EXP 65
21777: AND
21778: IFFALSE 21889
21780: GO 21782
21782: DISABLE
21783: LD_INT 0
21785: PPUSH
21786: PPUSH
21787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21788: LD_ADDR_VAR 0 3
21792: PUSH
21793: LD_INT 22
21795: PUSH
21796: LD_OWVAR 2
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 25
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PPUSH
21819: CALL_OW 69
21823: ST_TO_ADDR
// if not tmp then
21824: LD_VAR 0 3
21828: NOT
21829: IFFALSE 21833
// exit ;
21831: GO 21889
// un := tmp [ rand ( 1 , tmp ) ] ;
21833: LD_ADDR_VAR 0 2
21837: PUSH
21838: LD_VAR 0 3
21842: PUSH
21843: LD_INT 1
21845: PPUSH
21846: LD_VAR 0 3
21850: PPUSH
21851: CALL_OW 12
21855: ARRAY
21856: ST_TO_ADDR
// if Crawls ( un ) then
21857: LD_VAR 0 2
21861: PPUSH
21862: CALL_OW 318
21866: IFFALSE 21877
// ComWalk ( un ) ;
21868: LD_VAR 0 2
21872: PPUSH
21873: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21877: LD_VAR 0 2
21881: PPUSH
21882: LD_INT 8
21884: PPUSH
21885: CALL_OW 336
// end ;
21889: PPOPN 3
21891: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21892: LD_EXP 22
21896: PUSH
21897: LD_EXP 66
21901: AND
21902: IFFALSE 22046
21904: GO 21906
21906: DISABLE
21907: LD_INT 0
21909: PPUSH
21910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21911: LD_ADDR_VAR 0 2
21915: PUSH
21916: LD_INT 22
21918: PUSH
21919: LD_OWVAR 2
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 21
21930: PUSH
21931: LD_INT 2
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 2
21940: PUSH
21941: LD_INT 34
21943: PUSH
21944: LD_INT 12
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 34
21953: PUSH
21954: LD_INT 51
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 34
21963: PUSH
21964: LD_INT 32
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: PPUSH
21982: CALL_OW 69
21986: ST_TO_ADDR
// if not tmp then
21987: LD_VAR 0 2
21991: NOT
21992: IFFALSE 21996
// exit ;
21994: GO 22046
// for i in tmp do
21996: LD_ADDR_VAR 0 1
22000: PUSH
22001: LD_VAR 0 2
22005: PUSH
22006: FOR_IN
22007: IFFALSE 22044
// if GetCargo ( i , mat_artifact ) = 0 then
22009: LD_VAR 0 1
22013: PPUSH
22014: LD_INT 4
22016: PPUSH
22017: CALL_OW 289
22021: PUSH
22022: LD_INT 0
22024: EQUAL
22025: IFFALSE 22042
// SetCargo ( i , mat_siberit , 100 ) ;
22027: LD_VAR 0 1
22031: PPUSH
22032: LD_INT 3
22034: PPUSH
22035: LD_INT 100
22037: PPUSH
22038: CALL_OW 290
22042: GO 22006
22044: POP
22045: POP
// end ;
22046: PPOPN 2
22048: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22049: LD_EXP 22
22053: PUSH
22054: LD_EXP 67
22058: AND
22059: IFFALSE 22242
22061: GO 22063
22063: DISABLE
22064: LD_INT 0
22066: PPUSH
22067: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22068: LD_ADDR_VAR 0 2
22072: PUSH
22073: LD_INT 22
22075: PUSH
22076: LD_OWVAR 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PPUSH
22085: CALL_OW 69
22089: ST_TO_ADDR
// if not tmp then
22090: LD_VAR 0 2
22094: NOT
22095: IFFALSE 22099
// exit ;
22097: GO 22242
// for i := 1 to 2 do
22099: LD_ADDR_VAR 0 1
22103: PUSH
22104: DOUBLE
22105: LD_INT 1
22107: DEC
22108: ST_TO_ADDR
22109: LD_INT 2
22111: PUSH
22112: FOR_TO
22113: IFFALSE 22240
// begin uc_side := your_side ;
22115: LD_ADDR_OWVAR 20
22119: PUSH
22120: LD_OWVAR 2
22124: ST_TO_ADDR
// uc_nation := nation_american ;
22125: LD_ADDR_OWVAR 21
22129: PUSH
22130: LD_INT 1
22132: ST_TO_ADDR
// vc_chassis := us_morphling ;
22133: LD_ADDR_OWVAR 37
22137: PUSH
22138: LD_INT 5
22140: ST_TO_ADDR
// vc_engine := engine_siberite ;
22141: LD_ADDR_OWVAR 39
22145: PUSH
22146: LD_INT 3
22148: ST_TO_ADDR
// vc_control := control_computer ;
22149: LD_ADDR_OWVAR 38
22153: PUSH
22154: LD_INT 3
22156: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22157: LD_ADDR_OWVAR 40
22161: PUSH
22162: LD_INT 10
22164: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22165: LD_VAR 0 2
22169: PUSH
22170: LD_INT 1
22172: ARRAY
22173: PPUSH
22174: CALL_OW 310
22178: NOT
22179: IFFALSE 22226
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22181: CALL_OW 45
22185: PPUSH
22186: LD_VAR 0 2
22190: PUSH
22191: LD_INT 1
22193: ARRAY
22194: PPUSH
22195: CALL_OW 250
22199: PPUSH
22200: LD_VAR 0 2
22204: PUSH
22205: LD_INT 1
22207: ARRAY
22208: PPUSH
22209: CALL_OW 251
22213: PPUSH
22214: LD_INT 12
22216: PPUSH
22217: LD_INT 1
22219: PPUSH
22220: CALL_OW 50
22224: GO 22238
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22226: CALL_OW 45
22230: PPUSH
22231: LD_INT 1
22233: PPUSH
22234: CALL_OW 51
// end ;
22238: GO 22112
22240: POP
22241: POP
// end ;
22242: PPOPN 2
22244: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22245: LD_EXP 22
22249: PUSH
22250: LD_EXP 68
22254: AND
22255: IFFALSE 22477
22257: GO 22259
22259: DISABLE
22260: LD_INT 0
22262: PPUSH
22263: PPUSH
22264: PPUSH
22265: PPUSH
22266: PPUSH
22267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22268: LD_ADDR_VAR 0 6
22272: PUSH
22273: LD_INT 22
22275: PUSH
22276: LD_OWVAR 2
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 21
22287: PUSH
22288: LD_INT 1
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 3
22297: PUSH
22298: LD_INT 23
22300: PUSH
22301: LD_INT 0
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: PPUSH
22317: CALL_OW 69
22321: ST_TO_ADDR
// if not tmp then
22322: LD_VAR 0 6
22326: NOT
22327: IFFALSE 22331
// exit ;
22329: GO 22477
// s1 := rand ( 1 , 4 ) ;
22331: LD_ADDR_VAR 0 2
22335: PUSH
22336: LD_INT 1
22338: PPUSH
22339: LD_INT 4
22341: PPUSH
22342: CALL_OW 12
22346: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22347: LD_ADDR_VAR 0 4
22351: PUSH
22352: LD_VAR 0 6
22356: PUSH
22357: LD_INT 1
22359: ARRAY
22360: PPUSH
22361: LD_VAR 0 2
22365: PPUSH
22366: CALL_OW 259
22370: ST_TO_ADDR
// if s1 = 1 then
22371: LD_VAR 0 2
22375: PUSH
22376: LD_INT 1
22378: EQUAL
22379: IFFALSE 22399
// s2 := rand ( 2 , 4 ) else
22381: LD_ADDR_VAR 0 3
22385: PUSH
22386: LD_INT 2
22388: PPUSH
22389: LD_INT 4
22391: PPUSH
22392: CALL_OW 12
22396: ST_TO_ADDR
22397: GO 22407
// s2 := 1 ;
22399: LD_ADDR_VAR 0 3
22403: PUSH
22404: LD_INT 1
22406: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22407: LD_ADDR_VAR 0 5
22411: PUSH
22412: LD_VAR 0 6
22416: PUSH
22417: LD_INT 1
22419: ARRAY
22420: PPUSH
22421: LD_VAR 0 3
22425: PPUSH
22426: CALL_OW 259
22430: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22431: LD_VAR 0 6
22435: PUSH
22436: LD_INT 1
22438: ARRAY
22439: PPUSH
22440: LD_VAR 0 2
22444: PPUSH
22445: LD_VAR 0 5
22449: PPUSH
22450: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22454: LD_VAR 0 6
22458: PUSH
22459: LD_INT 1
22461: ARRAY
22462: PPUSH
22463: LD_VAR 0 3
22467: PPUSH
22468: LD_VAR 0 4
22472: PPUSH
22473: CALL_OW 237
// end ;
22477: PPOPN 6
22479: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22480: LD_EXP 22
22484: PUSH
22485: LD_EXP 69
22489: AND
22490: IFFALSE 22569
22492: GO 22494
22494: DISABLE
22495: LD_INT 0
22497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22498: LD_ADDR_VAR 0 1
22502: PUSH
22503: LD_INT 22
22505: PUSH
22506: LD_OWVAR 2
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 30
22517: PUSH
22518: LD_INT 3
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PPUSH
22529: CALL_OW 69
22533: ST_TO_ADDR
// if not tmp then
22534: LD_VAR 0 1
22538: NOT
22539: IFFALSE 22543
// exit ;
22541: GO 22569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22543: LD_VAR 0 1
22547: PUSH
22548: LD_INT 1
22550: PPUSH
22551: LD_VAR 0 1
22555: PPUSH
22556: CALL_OW 12
22560: ARRAY
22561: PPUSH
22562: LD_INT 1
22564: PPUSH
22565: CALL_OW 234
// end ;
22569: PPOPN 1
22571: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22572: LD_EXP 22
22576: PUSH
22577: LD_EXP 70
22581: AND
22582: IFFALSE 22694
22584: GO 22586
22586: DISABLE
22587: LD_INT 0
22589: PPUSH
22590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22591: LD_ADDR_VAR 0 2
22595: PUSH
22596: LD_INT 22
22598: PUSH
22599: LD_OWVAR 2
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 2
22610: PUSH
22611: LD_INT 30
22613: PUSH
22614: LD_INT 27
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 30
22623: PUSH
22624: LD_INT 26
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 30
22633: PUSH
22634: LD_INT 28
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PPUSH
22651: CALL_OW 69
22655: ST_TO_ADDR
// if not tmp then
22656: LD_VAR 0 2
22660: NOT
22661: IFFALSE 22665
// exit ;
22663: GO 22694
// for i in tmp do
22665: LD_ADDR_VAR 0 1
22669: PUSH
22670: LD_VAR 0 2
22674: PUSH
22675: FOR_IN
22676: IFFALSE 22692
// SetLives ( i , 1 ) ;
22678: LD_VAR 0 1
22682: PPUSH
22683: LD_INT 1
22685: PPUSH
22686: CALL_OW 234
22690: GO 22675
22692: POP
22693: POP
// end ;
22694: PPOPN 2
22696: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22697: LD_EXP 22
22701: PUSH
22702: LD_EXP 71
22706: AND
22707: IFFALSE 22994
22709: GO 22711
22711: DISABLE
22712: LD_INT 0
22714: PPUSH
22715: PPUSH
22716: PPUSH
// begin i := rand ( 1 , 7 ) ;
22717: LD_ADDR_VAR 0 1
22721: PUSH
22722: LD_INT 1
22724: PPUSH
22725: LD_INT 7
22727: PPUSH
22728: CALL_OW 12
22732: ST_TO_ADDR
// case i of 1 :
22733: LD_VAR 0 1
22737: PUSH
22738: LD_INT 1
22740: DOUBLE
22741: EQUAL
22742: IFTRUE 22746
22744: GO 22756
22746: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22747: LD_STRING earthquake(getX(game), 0, 32)
22749: PPUSH
22750: CALL_OW 559
22754: GO 22994
22756: LD_INT 2
22758: DOUBLE
22759: EQUAL
22760: IFTRUE 22764
22762: GO 22778
22764: POP
// begin ToLua ( displayStucuk(); ) ;
22765: LD_STRING displayStucuk();
22767: PPUSH
22768: CALL_OW 559
// ResetFog ;
22772: CALL_OW 335
// end ; 3 :
22776: GO 22994
22778: LD_INT 3
22780: DOUBLE
22781: EQUAL
22782: IFTRUE 22786
22784: GO 22890
22786: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22787: LD_ADDR_VAR 0 2
22791: PUSH
22792: LD_INT 22
22794: PUSH
22795: LD_OWVAR 2
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 25
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PPUSH
22818: CALL_OW 69
22822: ST_TO_ADDR
// if not tmp then
22823: LD_VAR 0 2
22827: NOT
22828: IFFALSE 22832
// exit ;
22830: GO 22994
// un := tmp [ rand ( 1 , tmp ) ] ;
22832: LD_ADDR_VAR 0 3
22836: PUSH
22837: LD_VAR 0 2
22841: PUSH
22842: LD_INT 1
22844: PPUSH
22845: LD_VAR 0 2
22849: PPUSH
22850: CALL_OW 12
22854: ARRAY
22855: ST_TO_ADDR
// if Crawls ( un ) then
22856: LD_VAR 0 3
22860: PPUSH
22861: CALL_OW 318
22865: IFFALSE 22876
// ComWalk ( un ) ;
22867: LD_VAR 0 3
22871: PPUSH
22872: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22876: LD_VAR 0 3
22880: PPUSH
22881: LD_INT 8
22883: PPUSH
22884: CALL_OW 336
// end ; 4 :
22888: GO 22994
22890: LD_INT 4
22892: DOUBLE
22893: EQUAL
22894: IFTRUE 22898
22896: GO 22972
22898: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_OWVAR 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 30
22918: PUSH
22919: LD_INT 29
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 69
22934: ST_TO_ADDR
// if not tmp then
22935: LD_VAR 0 2
22939: NOT
22940: IFFALSE 22944
// exit ;
22942: GO 22994
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22944: LD_VAR 0 2
22948: PUSH
22949: LD_INT 1
22951: ARRAY
22952: PPUSH
22953: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22957: LD_VAR 0 2
22961: PUSH
22962: LD_INT 1
22964: ARRAY
22965: PPUSH
22966: CALL_OW 65
// end ; 5 .. 7 :
22970: GO 22994
22972: LD_INT 5
22974: DOUBLE
22975: GREATEREQUAL
22976: IFFALSE 22984
22978: LD_INT 7
22980: DOUBLE
22981: LESSEQUAL
22982: IFTRUE 22986
22984: GO 22993
22986: POP
// StreamSibBomb ; end ;
22987: CALL 19231 0 0
22991: GO 22994
22993: POP
// end ;
22994: PPOPN 3
22996: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22997: LD_EXP 22
23001: PUSH
23002: LD_EXP 72
23006: AND
23007: IFFALSE 23163
23009: GO 23011
23011: DISABLE
23012: LD_INT 0
23014: PPUSH
23015: PPUSH
23016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23017: LD_ADDR_VAR 0 2
23021: PUSH
23022: LD_INT 81
23024: PUSH
23025: LD_OWVAR 2
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 2
23036: PUSH
23037: LD_INT 21
23039: PUSH
23040: LD_INT 1
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 21
23049: PUSH
23050: LD_INT 2
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PPUSH
23066: CALL_OW 69
23070: ST_TO_ADDR
// if not tmp then
23071: LD_VAR 0 2
23075: NOT
23076: IFFALSE 23080
// exit ;
23078: GO 23163
// p := 0 ;
23080: LD_ADDR_VAR 0 3
23084: PUSH
23085: LD_INT 0
23087: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23088: LD_INT 35
23090: PPUSH
23091: CALL_OW 67
// p := p + 1 ;
23095: LD_ADDR_VAR 0 3
23099: PUSH
23100: LD_VAR 0 3
23104: PUSH
23105: LD_INT 1
23107: PLUS
23108: ST_TO_ADDR
// for i in tmp do
23109: LD_ADDR_VAR 0 1
23113: PUSH
23114: LD_VAR 0 2
23118: PUSH
23119: FOR_IN
23120: IFFALSE 23151
// if GetLives ( i ) < 1000 then
23122: LD_VAR 0 1
23126: PPUSH
23127: CALL_OW 256
23131: PUSH
23132: LD_INT 1000
23134: LESS
23135: IFFALSE 23149
// SetLives ( i , 1000 ) ;
23137: LD_VAR 0 1
23141: PPUSH
23142: LD_INT 1000
23144: PPUSH
23145: CALL_OW 234
23149: GO 23119
23151: POP
23152: POP
// until p > 20 ;
23153: LD_VAR 0 3
23157: PUSH
23158: LD_INT 20
23160: GREATER
23161: IFFALSE 23088
// end ;
23163: PPOPN 3
23165: END
// every 0 0$1 trigger StreamModeActive and sTime do
23166: LD_EXP 22
23170: PUSH
23171: LD_EXP 73
23175: AND
23176: IFFALSE 23211
23178: GO 23180
23180: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23181: LD_INT 28
23183: PPUSH
23184: LD_OWVAR 2
23188: PPUSH
23189: LD_INT 2
23191: PPUSH
23192: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23196: LD_INT 30
23198: PPUSH
23199: LD_OWVAR 2
23203: PPUSH
23204: LD_INT 2
23206: PPUSH
23207: CALL_OW 322
// end ;
23211: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23212: LD_EXP 22
23216: PUSH
23217: LD_EXP 74
23221: AND
23222: IFFALSE 23343
23224: GO 23226
23226: DISABLE
23227: LD_INT 0
23229: PPUSH
23230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23231: LD_ADDR_VAR 0 2
23235: PUSH
23236: LD_INT 22
23238: PUSH
23239: LD_OWVAR 2
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 21
23250: PUSH
23251: LD_INT 1
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 3
23260: PUSH
23261: LD_INT 23
23263: PUSH
23264: LD_INT 0
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: PPUSH
23280: CALL_OW 69
23284: ST_TO_ADDR
// if not tmp then
23285: LD_VAR 0 2
23289: NOT
23290: IFFALSE 23294
// exit ;
23292: GO 23343
// for i in tmp do
23294: LD_ADDR_VAR 0 1
23298: PUSH
23299: LD_VAR 0 2
23303: PUSH
23304: FOR_IN
23305: IFFALSE 23341
// begin if Crawls ( i ) then
23307: LD_VAR 0 1
23311: PPUSH
23312: CALL_OW 318
23316: IFFALSE 23327
// ComWalk ( i ) ;
23318: LD_VAR 0 1
23322: PPUSH
23323: CALL_OW 138
// SetClass ( i , 2 ) ;
23327: LD_VAR 0 1
23331: PPUSH
23332: LD_INT 2
23334: PPUSH
23335: CALL_OW 336
// end ;
23339: GO 23304
23341: POP
23342: POP
// end ;
23343: PPOPN 2
23345: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23346: LD_EXP 22
23350: PUSH
23351: LD_EXP 75
23355: AND
23356: IFFALSE 23644
23358: GO 23360
23360: DISABLE
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
23365: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23366: LD_OWVAR 2
23370: PPUSH
23371: LD_INT 9
23373: PPUSH
23374: LD_INT 1
23376: PPUSH
23377: LD_INT 1
23379: PPUSH
23380: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23384: LD_INT 9
23386: PPUSH
23387: LD_OWVAR 2
23391: PPUSH
23392: CALL_OW 343
// uc_side := 9 ;
23396: LD_ADDR_OWVAR 20
23400: PUSH
23401: LD_INT 9
23403: ST_TO_ADDR
// uc_nation := 2 ;
23404: LD_ADDR_OWVAR 21
23408: PUSH
23409: LD_INT 2
23411: ST_TO_ADDR
// hc_name := Dark Warrior ;
23412: LD_ADDR_OWVAR 26
23416: PUSH
23417: LD_STRING Dark Warrior
23419: ST_TO_ADDR
// hc_gallery :=  ;
23420: LD_ADDR_OWVAR 33
23424: PUSH
23425: LD_STRING 
23427: ST_TO_ADDR
// hc_noskilllimit := true ;
23428: LD_ADDR_OWVAR 76
23432: PUSH
23433: LD_INT 1
23435: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23436: LD_ADDR_OWVAR 31
23440: PUSH
23441: LD_INT 30
23443: PUSH
23444: LD_INT 30
23446: PUSH
23447: LD_INT 30
23449: PUSH
23450: LD_INT 30
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: ST_TO_ADDR
// un := CreateHuman ;
23459: LD_ADDR_VAR 0 3
23463: PUSH
23464: CALL_OW 44
23468: ST_TO_ADDR
// hc_noskilllimit := false ;
23469: LD_ADDR_OWVAR 76
23473: PUSH
23474: LD_INT 0
23476: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23477: LD_VAR 0 3
23481: PPUSH
23482: LD_INT 1
23484: PPUSH
23485: CALL_OW 51
// ToLua ( playRanger() ) ;
23489: LD_STRING playRanger()
23491: PPUSH
23492: CALL_OW 559
// p := 0 ;
23496: LD_ADDR_VAR 0 2
23500: PUSH
23501: LD_INT 0
23503: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23504: LD_INT 35
23506: PPUSH
23507: CALL_OW 67
// p := p + 1 ;
23511: LD_ADDR_VAR 0 2
23515: PUSH
23516: LD_VAR 0 2
23520: PUSH
23521: LD_INT 1
23523: PLUS
23524: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23525: LD_VAR 0 3
23529: PPUSH
23530: CALL_OW 256
23534: PUSH
23535: LD_INT 1000
23537: LESS
23538: IFFALSE 23552
// SetLives ( un , 1000 ) ;
23540: LD_VAR 0 3
23544: PPUSH
23545: LD_INT 1000
23547: PPUSH
23548: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23552: LD_VAR 0 3
23556: PPUSH
23557: LD_INT 81
23559: PUSH
23560: LD_OWVAR 2
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 91
23571: PUSH
23572: LD_VAR 0 3
23576: PUSH
23577: LD_INT 30
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: LIST
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PPUSH
23589: CALL_OW 69
23593: PPUSH
23594: LD_VAR 0 3
23598: PPUSH
23599: CALL_OW 74
23603: PPUSH
23604: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23608: LD_VAR 0 2
23612: PUSH
23613: LD_INT 80
23615: GREATER
23616: PUSH
23617: LD_VAR 0 3
23621: PPUSH
23622: CALL_OW 301
23626: OR
23627: IFFALSE 23504
// if un then
23629: LD_VAR 0 3
23633: IFFALSE 23644
// RemoveUnit ( un ) ;
23635: LD_VAR 0 3
23639: PPUSH
23640: CALL_OW 64
// end ;
23644: PPOPN 3
23646: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23647: LD_EXP 76
23651: IFFALSE 23767
23653: GO 23655
23655: DISABLE
23656: LD_INT 0
23658: PPUSH
23659: PPUSH
23660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23661: LD_ADDR_VAR 0 2
23665: PUSH
23666: LD_INT 81
23668: PUSH
23669: LD_OWVAR 2
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 21
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PPUSH
23692: CALL_OW 69
23696: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23697: LD_STRING playComputer()
23699: PPUSH
23700: CALL_OW 559
// if not tmp then
23704: LD_VAR 0 2
23708: NOT
23709: IFFALSE 23713
// exit ;
23711: GO 23767
// for i in tmp do
23713: LD_ADDR_VAR 0 1
23717: PUSH
23718: LD_VAR 0 2
23722: PUSH
23723: FOR_IN
23724: IFFALSE 23765
// for j := 1 to 4 do
23726: LD_ADDR_VAR 0 3
23730: PUSH
23731: DOUBLE
23732: LD_INT 1
23734: DEC
23735: ST_TO_ADDR
23736: LD_INT 4
23738: PUSH
23739: FOR_TO
23740: IFFALSE 23761
// SetSkill ( i , j , 10 ) ;
23742: LD_VAR 0 1
23746: PPUSH
23747: LD_VAR 0 3
23751: PPUSH
23752: LD_INT 10
23754: PPUSH
23755: CALL_OW 237
23759: GO 23739
23761: POP
23762: POP
23763: GO 23723
23765: POP
23766: POP
// end ;
23767: PPOPN 3
23769: END
// every 0 0$1 trigger s30 do var i , tmp ;
23770: LD_EXP 77
23774: IFFALSE 23843
23776: GO 23778
23778: DISABLE
23779: LD_INT 0
23781: PPUSH
23782: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23783: LD_ADDR_VAR 0 2
23787: PUSH
23788: LD_INT 22
23790: PUSH
23791: LD_OWVAR 2
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PPUSH
23800: CALL_OW 69
23804: ST_TO_ADDR
// if not tmp then
23805: LD_VAR 0 2
23809: NOT
23810: IFFALSE 23814
// exit ;
23812: GO 23843
// for i in tmp do
23814: LD_ADDR_VAR 0 1
23818: PUSH
23819: LD_VAR 0 2
23823: PUSH
23824: FOR_IN
23825: IFFALSE 23841
// SetLives ( i , 300 ) ;
23827: LD_VAR 0 1
23831: PPUSH
23832: LD_INT 300
23834: PPUSH
23835: CALL_OW 234
23839: GO 23824
23841: POP
23842: POP
// end ;
23843: PPOPN 2
23845: END
// every 0 0$1 trigger s60 do var i , tmp ;
23846: LD_EXP 78
23850: IFFALSE 23919
23852: GO 23854
23854: DISABLE
23855: LD_INT 0
23857: PPUSH
23858: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23859: LD_ADDR_VAR 0 2
23863: PUSH
23864: LD_INT 22
23866: PUSH
23867: LD_OWVAR 2
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PPUSH
23876: CALL_OW 69
23880: ST_TO_ADDR
// if not tmp then
23881: LD_VAR 0 2
23885: NOT
23886: IFFALSE 23890
// exit ;
23888: GO 23919
// for i in tmp do
23890: LD_ADDR_VAR 0 1
23894: PUSH
23895: LD_VAR 0 2
23899: PUSH
23900: FOR_IN
23901: IFFALSE 23917
// SetLives ( i , 600 ) ;
23903: LD_VAR 0 1
23907: PPUSH
23908: LD_INT 600
23910: PPUSH
23911: CALL_OW 234
23915: GO 23900
23917: POP
23918: POP
// end ;
23919: PPOPN 2
23921: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23922: LD_INT 0
23924: PPUSH
// case cmd of 301 :
23925: LD_VAR 0 1
23929: PUSH
23930: LD_INT 301
23932: DOUBLE
23933: EQUAL
23934: IFTRUE 23938
23936: GO 23970
23938: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23939: LD_VAR 0 6
23943: PPUSH
23944: LD_VAR 0 7
23948: PPUSH
23949: LD_VAR 0 8
23953: PPUSH
23954: LD_VAR 0 4
23958: PPUSH
23959: LD_VAR 0 5
23963: PPUSH
23964: CALL 25179 0 5
23968: GO 24091
23970: LD_INT 302
23972: DOUBLE
23973: EQUAL
23974: IFTRUE 23978
23976: GO 24015
23978: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23979: LD_VAR 0 6
23983: PPUSH
23984: LD_VAR 0 7
23988: PPUSH
23989: LD_VAR 0 8
23993: PPUSH
23994: LD_VAR 0 9
23998: PPUSH
23999: LD_VAR 0 4
24003: PPUSH
24004: LD_VAR 0 5
24008: PPUSH
24009: CALL 25270 0 6
24013: GO 24091
24015: LD_INT 303
24017: DOUBLE
24018: EQUAL
24019: IFTRUE 24023
24021: GO 24060
24023: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24024: LD_VAR 0 6
24028: PPUSH
24029: LD_VAR 0 7
24033: PPUSH
24034: LD_VAR 0 8
24038: PPUSH
24039: LD_VAR 0 9
24043: PPUSH
24044: LD_VAR 0 4
24048: PPUSH
24049: LD_VAR 0 5
24053: PPUSH
24054: CALL 24096 0 6
24058: GO 24091
24060: LD_INT 304
24062: DOUBLE
24063: EQUAL
24064: IFTRUE 24068
24066: GO 24090
24068: POP
// hHackTeleport ( unit , x , y ) ; end ;
24069: LD_VAR 0 2
24073: PPUSH
24074: LD_VAR 0 4
24078: PPUSH
24079: LD_VAR 0 5
24083: PPUSH
24084: CALL 25863 0 3
24088: GO 24091
24090: POP
// end ;
24091: LD_VAR 0 12
24095: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24096: LD_INT 0
24098: PPUSH
24099: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24100: LD_VAR 0 1
24104: PUSH
24105: LD_INT 1
24107: LESS
24108: PUSH
24109: LD_VAR 0 1
24113: PUSH
24114: LD_INT 3
24116: GREATER
24117: OR
24118: PUSH
24119: LD_VAR 0 5
24123: PPUSH
24124: LD_VAR 0 6
24128: PPUSH
24129: CALL_OW 428
24133: OR
24134: IFFALSE 24138
// exit ;
24136: GO 24866
// uc_side := your_side ;
24138: LD_ADDR_OWVAR 20
24142: PUSH
24143: LD_OWVAR 2
24147: ST_TO_ADDR
// uc_nation := nation ;
24148: LD_ADDR_OWVAR 21
24152: PUSH
24153: LD_VAR 0 1
24157: ST_TO_ADDR
// bc_level = 1 ;
24158: LD_ADDR_OWVAR 43
24162: PUSH
24163: LD_INT 1
24165: ST_TO_ADDR
// case btype of 1 :
24166: LD_VAR 0 2
24170: PUSH
24171: LD_INT 1
24173: DOUBLE
24174: EQUAL
24175: IFTRUE 24179
24177: GO 24190
24179: POP
// bc_type := b_depot ; 2 :
24180: LD_ADDR_OWVAR 42
24184: PUSH
24185: LD_INT 0
24187: ST_TO_ADDR
24188: GO 24810
24190: LD_INT 2
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24209
24198: POP
// bc_type := b_warehouse ; 3 :
24199: LD_ADDR_OWVAR 42
24203: PUSH
24204: LD_INT 1
24206: ST_TO_ADDR
24207: GO 24810
24209: LD_INT 3
24211: DOUBLE
24212: EQUAL
24213: IFTRUE 24217
24215: GO 24228
24217: POP
// bc_type := b_lab ; 4 .. 9 :
24218: LD_ADDR_OWVAR 42
24222: PUSH
24223: LD_INT 6
24225: ST_TO_ADDR
24226: GO 24810
24228: LD_INT 4
24230: DOUBLE
24231: GREATEREQUAL
24232: IFFALSE 24240
24234: LD_INT 9
24236: DOUBLE
24237: LESSEQUAL
24238: IFTRUE 24242
24240: GO 24302
24242: POP
// begin bc_type := b_lab_half ;
24243: LD_ADDR_OWVAR 42
24247: PUSH
24248: LD_INT 7
24250: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24251: LD_ADDR_OWVAR 44
24255: PUSH
24256: LD_INT 10
24258: PUSH
24259: LD_INT 11
24261: PUSH
24262: LD_INT 12
24264: PUSH
24265: LD_INT 15
24267: PUSH
24268: LD_INT 14
24270: PUSH
24271: LD_INT 13
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: PUSH
24282: LD_VAR 0 2
24286: PUSH
24287: LD_INT 3
24289: MINUS
24290: ARRAY
24291: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24292: LD_ADDR_OWVAR 45
24296: PUSH
24297: LD_INT 9
24299: ST_TO_ADDR
// end ; 10 .. 13 :
24300: GO 24810
24302: LD_INT 10
24304: DOUBLE
24305: GREATEREQUAL
24306: IFFALSE 24314
24308: LD_INT 13
24310: DOUBLE
24311: LESSEQUAL
24312: IFTRUE 24316
24314: GO 24393
24316: POP
// begin bc_type := b_lab_full ;
24317: LD_ADDR_OWVAR 42
24321: PUSH
24322: LD_INT 8
24324: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24325: LD_ADDR_OWVAR 44
24329: PUSH
24330: LD_INT 10
24332: PUSH
24333: LD_INT 12
24335: PUSH
24336: LD_INT 14
24338: PUSH
24339: LD_INT 13
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: PUSH
24348: LD_VAR 0 2
24352: PUSH
24353: LD_INT 9
24355: MINUS
24356: ARRAY
24357: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24358: LD_ADDR_OWVAR 45
24362: PUSH
24363: LD_INT 11
24365: PUSH
24366: LD_INT 15
24368: PUSH
24369: LD_INT 12
24371: PUSH
24372: LD_INT 15
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: PUSH
24381: LD_VAR 0 2
24385: PUSH
24386: LD_INT 9
24388: MINUS
24389: ARRAY
24390: ST_TO_ADDR
// end ; 14 :
24391: GO 24810
24393: LD_INT 14
24395: DOUBLE
24396: EQUAL
24397: IFTRUE 24401
24399: GO 24412
24401: POP
// bc_type := b_workshop ; 15 :
24402: LD_ADDR_OWVAR 42
24406: PUSH
24407: LD_INT 2
24409: ST_TO_ADDR
24410: GO 24810
24412: LD_INT 15
24414: DOUBLE
24415: EQUAL
24416: IFTRUE 24420
24418: GO 24431
24420: POP
// bc_type := b_factory ; 16 :
24421: LD_ADDR_OWVAR 42
24425: PUSH
24426: LD_INT 3
24428: ST_TO_ADDR
24429: GO 24810
24431: LD_INT 16
24433: DOUBLE
24434: EQUAL
24435: IFTRUE 24439
24437: GO 24450
24439: POP
// bc_type := b_ext_gun ; 17 :
24440: LD_ADDR_OWVAR 42
24444: PUSH
24445: LD_INT 17
24447: ST_TO_ADDR
24448: GO 24810
24450: LD_INT 17
24452: DOUBLE
24453: EQUAL
24454: IFTRUE 24458
24456: GO 24486
24458: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24459: LD_ADDR_OWVAR 42
24463: PUSH
24464: LD_INT 19
24466: PUSH
24467: LD_INT 23
24469: PUSH
24470: LD_INT 19
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: LIST
24477: PUSH
24478: LD_VAR 0 1
24482: ARRAY
24483: ST_TO_ADDR
24484: GO 24810
24486: LD_INT 18
24488: DOUBLE
24489: EQUAL
24490: IFTRUE 24494
24492: GO 24505
24494: POP
// bc_type := b_ext_radar ; 19 :
24495: LD_ADDR_OWVAR 42
24499: PUSH
24500: LD_INT 20
24502: ST_TO_ADDR
24503: GO 24810
24505: LD_INT 19
24507: DOUBLE
24508: EQUAL
24509: IFTRUE 24513
24511: GO 24524
24513: POP
// bc_type := b_ext_radio ; 20 :
24514: LD_ADDR_OWVAR 42
24518: PUSH
24519: LD_INT 22
24521: ST_TO_ADDR
24522: GO 24810
24524: LD_INT 20
24526: DOUBLE
24527: EQUAL
24528: IFTRUE 24532
24530: GO 24543
24532: POP
// bc_type := b_ext_siberium ; 21 :
24533: LD_ADDR_OWVAR 42
24537: PUSH
24538: LD_INT 21
24540: ST_TO_ADDR
24541: GO 24810
24543: LD_INT 21
24545: DOUBLE
24546: EQUAL
24547: IFTRUE 24551
24549: GO 24562
24551: POP
// bc_type := b_ext_computer ; 22 :
24552: LD_ADDR_OWVAR 42
24556: PUSH
24557: LD_INT 24
24559: ST_TO_ADDR
24560: GO 24810
24562: LD_INT 22
24564: DOUBLE
24565: EQUAL
24566: IFTRUE 24570
24568: GO 24581
24570: POP
// bc_type := b_ext_track ; 23 :
24571: LD_ADDR_OWVAR 42
24575: PUSH
24576: LD_INT 16
24578: ST_TO_ADDR
24579: GO 24810
24581: LD_INT 23
24583: DOUBLE
24584: EQUAL
24585: IFTRUE 24589
24587: GO 24600
24589: POP
// bc_type := b_ext_laser ; 24 :
24590: LD_ADDR_OWVAR 42
24594: PUSH
24595: LD_INT 25
24597: ST_TO_ADDR
24598: GO 24810
24600: LD_INT 24
24602: DOUBLE
24603: EQUAL
24604: IFTRUE 24608
24606: GO 24619
24608: POP
// bc_type := b_control_tower ; 25 :
24609: LD_ADDR_OWVAR 42
24613: PUSH
24614: LD_INT 36
24616: ST_TO_ADDR
24617: GO 24810
24619: LD_INT 25
24621: DOUBLE
24622: EQUAL
24623: IFTRUE 24627
24625: GO 24638
24627: POP
// bc_type := b_breastwork ; 26 :
24628: LD_ADDR_OWVAR 42
24632: PUSH
24633: LD_INT 31
24635: ST_TO_ADDR
24636: GO 24810
24638: LD_INT 26
24640: DOUBLE
24641: EQUAL
24642: IFTRUE 24646
24644: GO 24657
24646: POP
// bc_type := b_bunker ; 27 :
24647: LD_ADDR_OWVAR 42
24651: PUSH
24652: LD_INT 32
24654: ST_TO_ADDR
24655: GO 24810
24657: LD_INT 27
24659: DOUBLE
24660: EQUAL
24661: IFTRUE 24665
24663: GO 24676
24665: POP
// bc_type := b_turret ; 28 :
24666: LD_ADDR_OWVAR 42
24670: PUSH
24671: LD_INT 33
24673: ST_TO_ADDR
24674: GO 24810
24676: LD_INT 28
24678: DOUBLE
24679: EQUAL
24680: IFTRUE 24684
24682: GO 24695
24684: POP
// bc_type := b_armoury ; 29 :
24685: LD_ADDR_OWVAR 42
24689: PUSH
24690: LD_INT 4
24692: ST_TO_ADDR
24693: GO 24810
24695: LD_INT 29
24697: DOUBLE
24698: EQUAL
24699: IFTRUE 24703
24701: GO 24714
24703: POP
// bc_type := b_barracks ; 30 :
24704: LD_ADDR_OWVAR 42
24708: PUSH
24709: LD_INT 5
24711: ST_TO_ADDR
24712: GO 24810
24714: LD_INT 30
24716: DOUBLE
24717: EQUAL
24718: IFTRUE 24722
24720: GO 24733
24722: POP
// bc_type := b_solar_power ; 31 :
24723: LD_ADDR_OWVAR 42
24727: PUSH
24728: LD_INT 27
24730: ST_TO_ADDR
24731: GO 24810
24733: LD_INT 31
24735: DOUBLE
24736: EQUAL
24737: IFTRUE 24741
24739: GO 24752
24741: POP
// bc_type := b_oil_power ; 32 :
24742: LD_ADDR_OWVAR 42
24746: PUSH
24747: LD_INT 26
24749: ST_TO_ADDR
24750: GO 24810
24752: LD_INT 32
24754: DOUBLE
24755: EQUAL
24756: IFTRUE 24760
24758: GO 24771
24760: POP
// bc_type := b_siberite_power ; 33 :
24761: LD_ADDR_OWVAR 42
24765: PUSH
24766: LD_INT 28
24768: ST_TO_ADDR
24769: GO 24810
24771: LD_INT 33
24773: DOUBLE
24774: EQUAL
24775: IFTRUE 24779
24777: GO 24790
24779: POP
// bc_type := b_oil_mine ; 34 :
24780: LD_ADDR_OWVAR 42
24784: PUSH
24785: LD_INT 29
24787: ST_TO_ADDR
24788: GO 24810
24790: LD_INT 34
24792: DOUBLE
24793: EQUAL
24794: IFTRUE 24798
24796: GO 24809
24798: POP
// bc_type := b_siberite_mine ; end ;
24799: LD_ADDR_OWVAR 42
24803: PUSH
24804: LD_INT 30
24806: ST_TO_ADDR
24807: GO 24810
24809: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24810: LD_ADDR_VAR 0 8
24814: PUSH
24815: LD_VAR 0 5
24819: PPUSH
24820: LD_VAR 0 6
24824: PPUSH
24825: LD_VAR 0 3
24829: PPUSH
24830: CALL_OW 47
24834: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24835: LD_OWVAR 42
24839: PUSH
24840: LD_INT 32
24842: PUSH
24843: LD_INT 33
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: IN
24850: IFFALSE 24866
// PlaceWeaponTurret ( b , weapon ) ;
24852: LD_VAR 0 8
24856: PPUSH
24857: LD_VAR 0 4
24861: PPUSH
24862: CALL_OW 431
// end ;
24866: LD_VAR 0 7
24870: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24871: LD_INT 0
24873: PPUSH
24874: PPUSH
24875: PPUSH
24876: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24877: LD_ADDR_VAR 0 4
24881: PUSH
24882: LD_INT 22
24884: PUSH
24885: LD_OWVAR 2
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 2
24896: PUSH
24897: LD_INT 30
24899: PUSH
24900: LD_INT 0
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 30
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: LIST
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PPUSH
24926: CALL_OW 69
24930: ST_TO_ADDR
// if not tmp then
24931: LD_VAR 0 4
24935: NOT
24936: IFFALSE 24940
// exit ;
24938: GO 24999
// for i in tmp do
24940: LD_ADDR_VAR 0 2
24944: PUSH
24945: LD_VAR 0 4
24949: PUSH
24950: FOR_IN
24951: IFFALSE 24997
// for j = 1 to 3 do
24953: LD_ADDR_VAR 0 3
24957: PUSH
24958: DOUBLE
24959: LD_INT 1
24961: DEC
24962: ST_TO_ADDR
24963: LD_INT 3
24965: PUSH
24966: FOR_TO
24967: IFFALSE 24993
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24969: LD_VAR 0 2
24973: PPUSH
24974: CALL_OW 274
24978: PPUSH
24979: LD_VAR 0 3
24983: PPUSH
24984: LD_INT 99999
24986: PPUSH
24987: CALL_OW 277
24991: GO 24966
24993: POP
24994: POP
24995: GO 24950
24997: POP
24998: POP
// end ;
24999: LD_VAR 0 1
25003: RET
// export function hHackSetLevel10 ; var i , j ; begin
25004: LD_INT 0
25006: PPUSH
25007: PPUSH
25008: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25009: LD_ADDR_VAR 0 2
25013: PUSH
25014: LD_INT 21
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PPUSH
25024: CALL_OW 69
25028: PUSH
25029: FOR_IN
25030: IFFALSE 25082
// if IsSelected ( i ) then
25032: LD_VAR 0 2
25036: PPUSH
25037: CALL_OW 306
25041: IFFALSE 25080
// begin for j := 1 to 4 do
25043: LD_ADDR_VAR 0 3
25047: PUSH
25048: DOUBLE
25049: LD_INT 1
25051: DEC
25052: ST_TO_ADDR
25053: LD_INT 4
25055: PUSH
25056: FOR_TO
25057: IFFALSE 25078
// SetSkill ( i , j , 10 ) ;
25059: LD_VAR 0 2
25063: PPUSH
25064: LD_VAR 0 3
25068: PPUSH
25069: LD_INT 10
25071: PPUSH
25072: CALL_OW 237
25076: GO 25056
25078: POP
25079: POP
// end ;
25080: GO 25029
25082: POP
25083: POP
// end ;
25084: LD_VAR 0 1
25088: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25089: LD_INT 0
25091: PPUSH
25092: PPUSH
25093: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25094: LD_ADDR_VAR 0 2
25098: PUSH
25099: LD_INT 22
25101: PUSH
25102: LD_OWVAR 2
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 21
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PPUSH
25125: CALL_OW 69
25129: PUSH
25130: FOR_IN
25131: IFFALSE 25172
// begin for j := 1 to 4 do
25133: LD_ADDR_VAR 0 3
25137: PUSH
25138: DOUBLE
25139: LD_INT 1
25141: DEC
25142: ST_TO_ADDR
25143: LD_INT 4
25145: PUSH
25146: FOR_TO
25147: IFFALSE 25168
// SetSkill ( i , j , 10 ) ;
25149: LD_VAR 0 2
25153: PPUSH
25154: LD_VAR 0 3
25158: PPUSH
25159: LD_INT 10
25161: PPUSH
25162: CALL_OW 237
25166: GO 25146
25168: POP
25169: POP
// end ;
25170: GO 25130
25172: POP
25173: POP
// end ;
25174: LD_VAR 0 1
25178: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25179: LD_INT 0
25181: PPUSH
// uc_side := your_side ;
25182: LD_ADDR_OWVAR 20
25186: PUSH
25187: LD_OWVAR 2
25191: ST_TO_ADDR
// uc_nation := nation ;
25192: LD_ADDR_OWVAR 21
25196: PUSH
25197: LD_VAR 0 1
25201: ST_TO_ADDR
// InitHc ;
25202: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25206: LD_INT 0
25208: PPUSH
25209: LD_VAR 0 2
25213: PPUSH
25214: LD_VAR 0 3
25218: PPUSH
25219: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25223: LD_VAR 0 4
25227: PPUSH
25228: LD_VAR 0 5
25232: PPUSH
25233: CALL_OW 428
25237: PUSH
25238: LD_INT 0
25240: EQUAL
25241: IFFALSE 25265
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25243: CALL_OW 44
25247: PPUSH
25248: LD_VAR 0 4
25252: PPUSH
25253: LD_VAR 0 5
25257: PPUSH
25258: LD_INT 1
25260: PPUSH
25261: CALL_OW 48
// end ;
25265: LD_VAR 0 6
25269: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25270: LD_INT 0
25272: PPUSH
25273: PPUSH
// uc_side := your_side ;
25274: LD_ADDR_OWVAR 20
25278: PUSH
25279: LD_OWVAR 2
25283: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25284: LD_VAR 0 1
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: LD_INT 2
25294: PUSH
25295: LD_INT 3
25297: PUSH
25298: LD_INT 4
25300: PUSH
25301: LD_INT 5
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: IN
25311: IFFALSE 25323
// uc_nation := nation_american else
25313: LD_ADDR_OWVAR 21
25317: PUSH
25318: LD_INT 1
25320: ST_TO_ADDR
25321: GO 25366
// if chassis in [ 11 , 12 , 13 , 14 ] then
25323: LD_VAR 0 1
25327: PUSH
25328: LD_INT 11
25330: PUSH
25331: LD_INT 12
25333: PUSH
25334: LD_INT 13
25336: PUSH
25337: LD_INT 14
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: IN
25346: IFFALSE 25358
// uc_nation := nation_arabian else
25348: LD_ADDR_OWVAR 21
25352: PUSH
25353: LD_INT 2
25355: ST_TO_ADDR
25356: GO 25366
// uc_nation := nation_russian ;
25358: LD_ADDR_OWVAR 21
25362: PUSH
25363: LD_INT 3
25365: ST_TO_ADDR
// vc_chassis := chassis ;
25366: LD_ADDR_OWVAR 37
25370: PUSH
25371: LD_VAR 0 1
25375: ST_TO_ADDR
// vc_engine := engine ;
25376: LD_ADDR_OWVAR 39
25380: PUSH
25381: LD_VAR 0 2
25385: ST_TO_ADDR
// vc_control := control ;
25386: LD_ADDR_OWVAR 38
25390: PUSH
25391: LD_VAR 0 3
25395: ST_TO_ADDR
// vc_weapon := weapon ;
25396: LD_ADDR_OWVAR 40
25400: PUSH
25401: LD_VAR 0 4
25405: ST_TO_ADDR
// un := CreateVehicle ;
25406: LD_ADDR_VAR 0 8
25410: PUSH
25411: CALL_OW 45
25415: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25416: LD_VAR 0 8
25420: PPUSH
25421: LD_INT 0
25423: PPUSH
25424: LD_INT 5
25426: PPUSH
25427: CALL_OW 12
25431: PPUSH
25432: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25436: LD_VAR 0 8
25440: PPUSH
25441: LD_VAR 0 5
25445: PPUSH
25446: LD_VAR 0 6
25450: PPUSH
25451: LD_INT 1
25453: PPUSH
25454: CALL_OW 48
// end ;
25458: LD_VAR 0 7
25462: RET
// export hInvincible ; every 1 do
25463: GO 25465
25465: DISABLE
// hInvincible := [ ] ;
25466: LD_ADDR_EXP 79
25470: PUSH
25471: EMPTY
25472: ST_TO_ADDR
25473: END
// every 10 do var i ;
25474: GO 25476
25476: DISABLE
25477: LD_INT 0
25479: PPUSH
// begin enable ;
25480: ENABLE
// if not hInvincible then
25481: LD_EXP 79
25485: NOT
25486: IFFALSE 25490
// exit ;
25488: GO 25534
// for i in hInvincible do
25490: LD_ADDR_VAR 0 1
25494: PUSH
25495: LD_EXP 79
25499: PUSH
25500: FOR_IN
25501: IFFALSE 25532
// if GetLives ( i ) < 1000 then
25503: LD_VAR 0 1
25507: PPUSH
25508: CALL_OW 256
25512: PUSH
25513: LD_INT 1000
25515: LESS
25516: IFFALSE 25530
// SetLives ( i , 1000 ) ;
25518: LD_VAR 0 1
25522: PPUSH
25523: LD_INT 1000
25525: PPUSH
25526: CALL_OW 234
25530: GO 25500
25532: POP
25533: POP
// end ;
25534: PPOPN 1
25536: END
// export function hHackInvincible ; var i ; begin
25537: LD_INT 0
25539: PPUSH
25540: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25541: LD_ADDR_VAR 0 2
25545: PUSH
25546: LD_INT 2
25548: PUSH
25549: LD_INT 21
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 21
25561: PUSH
25562: LD_INT 2
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: LIST
25573: PPUSH
25574: CALL_OW 69
25578: PUSH
25579: FOR_IN
25580: IFFALSE 25641
// if IsSelected ( i ) then
25582: LD_VAR 0 2
25586: PPUSH
25587: CALL_OW 306
25591: IFFALSE 25639
// begin if i in hInvincible then
25593: LD_VAR 0 2
25597: PUSH
25598: LD_EXP 79
25602: IN
25603: IFFALSE 25623
// hInvincible := hInvincible diff i else
25605: LD_ADDR_EXP 79
25609: PUSH
25610: LD_EXP 79
25614: PUSH
25615: LD_VAR 0 2
25619: DIFF
25620: ST_TO_ADDR
25621: GO 25639
// hInvincible := hInvincible union i ;
25623: LD_ADDR_EXP 79
25627: PUSH
25628: LD_EXP 79
25632: PUSH
25633: LD_VAR 0 2
25637: UNION
25638: ST_TO_ADDR
// end ;
25639: GO 25579
25641: POP
25642: POP
// end ;
25643: LD_VAR 0 1
25647: RET
// export function hHackInvisible ; var i , j ; begin
25648: LD_INT 0
25650: PPUSH
25651: PPUSH
25652: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25653: LD_ADDR_VAR 0 2
25657: PUSH
25658: LD_INT 21
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PPUSH
25668: CALL_OW 69
25672: PUSH
25673: FOR_IN
25674: IFFALSE 25698
// if IsSelected ( i ) then
25676: LD_VAR 0 2
25680: PPUSH
25681: CALL_OW 306
25685: IFFALSE 25696
// ComForceInvisible ( i ) ;
25687: LD_VAR 0 2
25691: PPUSH
25692: CALL_OW 496
25696: GO 25673
25698: POP
25699: POP
// end ;
25700: LD_VAR 0 1
25704: RET
// export function hHackChangeYourSide ; begin
25705: LD_INT 0
25707: PPUSH
// if your_side = 8 then
25708: LD_OWVAR 2
25712: PUSH
25713: LD_INT 8
25715: EQUAL
25716: IFFALSE 25728
// your_side := 0 else
25718: LD_ADDR_OWVAR 2
25722: PUSH
25723: LD_INT 0
25725: ST_TO_ADDR
25726: GO 25742
// your_side := your_side + 1 ;
25728: LD_ADDR_OWVAR 2
25732: PUSH
25733: LD_OWVAR 2
25737: PUSH
25738: LD_INT 1
25740: PLUS
25741: ST_TO_ADDR
// end ;
25742: LD_VAR 0 1
25746: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25747: LD_INT 0
25749: PPUSH
25750: PPUSH
25751: PPUSH
// for i in all_units do
25752: LD_ADDR_VAR 0 2
25756: PUSH
25757: LD_OWVAR 3
25761: PUSH
25762: FOR_IN
25763: IFFALSE 25841
// if IsSelected ( i ) then
25765: LD_VAR 0 2
25769: PPUSH
25770: CALL_OW 306
25774: IFFALSE 25839
// begin j := GetSide ( i ) ;
25776: LD_ADDR_VAR 0 3
25780: PUSH
25781: LD_VAR 0 2
25785: PPUSH
25786: CALL_OW 255
25790: ST_TO_ADDR
// if j = 8 then
25791: LD_VAR 0 3
25795: PUSH
25796: LD_INT 8
25798: EQUAL
25799: IFFALSE 25811
// j := 0 else
25801: LD_ADDR_VAR 0 3
25805: PUSH
25806: LD_INT 0
25808: ST_TO_ADDR
25809: GO 25825
// j := j + 1 ;
25811: LD_ADDR_VAR 0 3
25815: PUSH
25816: LD_VAR 0 3
25820: PUSH
25821: LD_INT 1
25823: PLUS
25824: ST_TO_ADDR
// SetSide ( i , j ) ;
25825: LD_VAR 0 2
25829: PPUSH
25830: LD_VAR 0 3
25834: PPUSH
25835: CALL_OW 235
// end ;
25839: GO 25762
25841: POP
25842: POP
// end ;
25843: LD_VAR 0 1
25847: RET
// export function hHackFog ; begin
25848: LD_INT 0
25850: PPUSH
// FogOff ( true ) ;
25851: LD_INT 1
25853: PPUSH
25854: CALL_OW 344
// end ;
25858: LD_VAR 0 1
25862: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25863: LD_INT 0
25865: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25866: LD_VAR 0 1
25870: PPUSH
25871: LD_VAR 0 2
25875: PPUSH
25876: LD_VAR 0 3
25880: PPUSH
25881: LD_INT 1
25883: PPUSH
25884: LD_INT 1
25886: PPUSH
25887: CALL_OW 483
// CenterOnXY ( x , y ) ;
25891: LD_VAR 0 2
25895: PPUSH
25896: LD_VAR 0 3
25900: PPUSH
25901: CALL_OW 84
// end ;
25905: LD_VAR 0 4
25909: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25910: LD_INT 0
25912: PPUSH
25913: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25914: LD_VAR 0 1
25918: NOT
25919: PUSH
25920: LD_VAR 0 2
25924: PPUSH
25925: LD_VAR 0 3
25929: PPUSH
25930: CALL_OW 488
25934: NOT
25935: OR
25936: PUSH
25937: LD_VAR 0 1
25941: PPUSH
25942: CALL_OW 266
25946: PUSH
25947: LD_INT 3
25949: NONEQUAL
25950: PUSH
25951: LD_VAR 0 1
25955: PPUSH
25956: CALL_OW 247
25960: PUSH
25961: LD_INT 1
25963: EQUAL
25964: NOT
25965: AND
25966: OR
25967: IFFALSE 25971
// exit ;
25969: GO 26120
// if GetType ( factory ) = unit_human then
25971: LD_VAR 0 1
25975: PPUSH
25976: CALL_OW 247
25980: PUSH
25981: LD_INT 1
25983: EQUAL
25984: IFFALSE 26001
// factory := IsInUnit ( factory ) ;
25986: LD_ADDR_VAR 0 1
25990: PUSH
25991: LD_VAR 0 1
25995: PPUSH
25996: CALL_OW 310
26000: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26001: LD_VAR 0 1
26005: PPUSH
26006: CALL_OW 266
26010: PUSH
26011: LD_INT 3
26013: NONEQUAL
26014: IFFALSE 26018
// exit ;
26016: GO 26120
// if HexInfo ( x , y ) = factory then
26018: LD_VAR 0 2
26022: PPUSH
26023: LD_VAR 0 3
26027: PPUSH
26028: CALL_OW 428
26032: PUSH
26033: LD_VAR 0 1
26037: EQUAL
26038: IFFALSE 26065
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26040: LD_ADDR_EXP 80
26044: PUSH
26045: LD_EXP 80
26049: PPUSH
26050: LD_VAR 0 1
26054: PPUSH
26055: LD_INT 0
26057: PPUSH
26058: CALL_OW 1
26062: ST_TO_ADDR
26063: GO 26116
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26065: LD_ADDR_EXP 80
26069: PUSH
26070: LD_EXP 80
26074: PPUSH
26075: LD_VAR 0 1
26079: PPUSH
26080: LD_VAR 0 1
26084: PPUSH
26085: CALL_OW 255
26089: PUSH
26090: LD_VAR 0 1
26094: PUSH
26095: LD_VAR 0 2
26099: PUSH
26100: LD_VAR 0 3
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: PPUSH
26111: CALL_OW 1
26115: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26116: CALL 26125 0 0
// end ;
26120: LD_VAR 0 4
26124: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26125: LD_INT 0
26127: PPUSH
26128: PPUSH
26129: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26130: LD_STRING resetFactoryWaypoint();
26132: PPUSH
26133: CALL_OW 559
// if factoryWaypoints then
26137: LD_EXP 80
26141: IFFALSE 26267
// begin list := PrepareArray ( factoryWaypoints ) ;
26143: LD_ADDR_VAR 0 3
26147: PUSH
26148: LD_EXP 80
26152: PPUSH
26153: CALL 73409 0 1
26157: ST_TO_ADDR
// for i := 1 to list do
26158: LD_ADDR_VAR 0 2
26162: PUSH
26163: DOUBLE
26164: LD_INT 1
26166: DEC
26167: ST_TO_ADDR
26168: LD_VAR 0 3
26172: PUSH
26173: FOR_TO
26174: IFFALSE 26265
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26176: LD_STRING setFactoryWaypointXY(
26178: PUSH
26179: LD_VAR 0 3
26183: PUSH
26184: LD_VAR 0 2
26188: ARRAY
26189: PUSH
26190: LD_INT 1
26192: ARRAY
26193: STR
26194: PUSH
26195: LD_STRING ,
26197: STR
26198: PUSH
26199: LD_VAR 0 3
26203: PUSH
26204: LD_VAR 0 2
26208: ARRAY
26209: PUSH
26210: LD_INT 2
26212: ARRAY
26213: STR
26214: PUSH
26215: LD_STRING ,
26217: STR
26218: PUSH
26219: LD_VAR 0 3
26223: PUSH
26224: LD_VAR 0 2
26228: ARRAY
26229: PUSH
26230: LD_INT 3
26232: ARRAY
26233: STR
26234: PUSH
26235: LD_STRING ,
26237: STR
26238: PUSH
26239: LD_VAR 0 3
26243: PUSH
26244: LD_VAR 0 2
26248: ARRAY
26249: PUSH
26250: LD_INT 4
26252: ARRAY
26253: STR
26254: PUSH
26255: LD_STRING )
26257: STR
26258: PPUSH
26259: CALL_OW 559
26263: GO 26173
26265: POP
26266: POP
// end ; end ;
26267: LD_VAR 0 1
26271: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26272: LD_INT 0
26274: PPUSH
// if HexInfo ( x , y ) = warehouse then
26275: LD_VAR 0 2
26279: PPUSH
26280: LD_VAR 0 3
26284: PPUSH
26285: CALL_OW 428
26289: PUSH
26290: LD_VAR 0 1
26294: EQUAL
26295: IFFALSE 26322
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26297: LD_ADDR_EXP 81
26301: PUSH
26302: LD_EXP 81
26306: PPUSH
26307: LD_VAR 0 1
26311: PPUSH
26312: LD_INT 0
26314: PPUSH
26315: CALL_OW 1
26319: ST_TO_ADDR
26320: GO 26373
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26322: LD_ADDR_EXP 81
26326: PUSH
26327: LD_EXP 81
26331: PPUSH
26332: LD_VAR 0 1
26336: PPUSH
26337: LD_VAR 0 1
26341: PPUSH
26342: CALL_OW 255
26346: PUSH
26347: LD_VAR 0 1
26351: PUSH
26352: LD_VAR 0 2
26356: PUSH
26357: LD_VAR 0 3
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: PPUSH
26368: CALL_OW 1
26372: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26373: CALL 26382 0 0
// end ;
26377: LD_VAR 0 4
26381: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26382: LD_INT 0
26384: PPUSH
26385: PPUSH
26386: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26387: LD_STRING resetWarehouseGatheringPoints();
26389: PPUSH
26390: CALL_OW 559
// if warehouseGatheringPoints then
26394: LD_EXP 81
26398: IFFALSE 26524
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26400: LD_ADDR_VAR 0 3
26404: PUSH
26405: LD_EXP 81
26409: PPUSH
26410: CALL 73409 0 1
26414: ST_TO_ADDR
// for i := 1 to list do
26415: LD_ADDR_VAR 0 2
26419: PUSH
26420: DOUBLE
26421: LD_INT 1
26423: DEC
26424: ST_TO_ADDR
26425: LD_VAR 0 3
26429: PUSH
26430: FOR_TO
26431: IFFALSE 26522
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26433: LD_STRING setWarehouseGatheringPointXY(
26435: PUSH
26436: LD_VAR 0 3
26440: PUSH
26441: LD_VAR 0 2
26445: ARRAY
26446: PUSH
26447: LD_INT 1
26449: ARRAY
26450: STR
26451: PUSH
26452: LD_STRING ,
26454: STR
26455: PUSH
26456: LD_VAR 0 3
26460: PUSH
26461: LD_VAR 0 2
26465: ARRAY
26466: PUSH
26467: LD_INT 2
26469: ARRAY
26470: STR
26471: PUSH
26472: LD_STRING ,
26474: STR
26475: PUSH
26476: LD_VAR 0 3
26480: PUSH
26481: LD_VAR 0 2
26485: ARRAY
26486: PUSH
26487: LD_INT 3
26489: ARRAY
26490: STR
26491: PUSH
26492: LD_STRING ,
26494: STR
26495: PUSH
26496: LD_VAR 0 3
26500: PUSH
26501: LD_VAR 0 2
26505: ARRAY
26506: PUSH
26507: LD_INT 4
26509: ARRAY
26510: STR
26511: PUSH
26512: LD_STRING )
26514: STR
26515: PPUSH
26516: CALL_OW 559
26520: GO 26430
26522: POP
26523: POP
// end ; end ;
26524: LD_VAR 0 1
26528: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26529: LD_EXP 81
26533: IFFALSE 27218
26535: GO 26537
26537: DISABLE
26538: LD_INT 0
26540: PPUSH
26541: PPUSH
26542: PPUSH
26543: PPUSH
26544: PPUSH
26545: PPUSH
26546: PPUSH
26547: PPUSH
26548: PPUSH
// begin enable ;
26549: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26550: LD_ADDR_VAR 0 3
26554: PUSH
26555: LD_EXP 81
26559: PPUSH
26560: CALL 73409 0 1
26564: ST_TO_ADDR
// if not list then
26565: LD_VAR 0 3
26569: NOT
26570: IFFALSE 26574
// exit ;
26572: GO 27218
// for i := 1 to list do
26574: LD_ADDR_VAR 0 1
26578: PUSH
26579: DOUBLE
26580: LD_INT 1
26582: DEC
26583: ST_TO_ADDR
26584: LD_VAR 0 3
26588: PUSH
26589: FOR_TO
26590: IFFALSE 27216
// begin depot := list [ i ] [ 2 ] ;
26592: LD_ADDR_VAR 0 8
26596: PUSH
26597: LD_VAR 0 3
26601: PUSH
26602: LD_VAR 0 1
26606: ARRAY
26607: PUSH
26608: LD_INT 2
26610: ARRAY
26611: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26612: LD_ADDR_VAR 0 5
26616: PUSH
26617: LD_VAR 0 3
26621: PUSH
26622: LD_VAR 0 1
26626: ARRAY
26627: PUSH
26628: LD_INT 1
26630: ARRAY
26631: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26632: LD_VAR 0 8
26636: PPUSH
26637: CALL_OW 301
26641: PUSH
26642: LD_VAR 0 5
26646: PUSH
26647: LD_VAR 0 8
26651: PPUSH
26652: CALL_OW 255
26656: NONEQUAL
26657: OR
26658: IFFALSE 26687
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26660: LD_ADDR_EXP 81
26664: PUSH
26665: LD_EXP 81
26669: PPUSH
26670: LD_VAR 0 8
26674: PPUSH
26675: LD_INT 0
26677: PPUSH
26678: CALL_OW 1
26682: ST_TO_ADDR
// exit ;
26683: POP
26684: POP
26685: GO 27218
// end ; x := list [ i ] [ 3 ] ;
26687: LD_ADDR_VAR 0 6
26691: PUSH
26692: LD_VAR 0 3
26696: PUSH
26697: LD_VAR 0 1
26701: ARRAY
26702: PUSH
26703: LD_INT 3
26705: ARRAY
26706: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26707: LD_ADDR_VAR 0 7
26711: PUSH
26712: LD_VAR 0 3
26716: PUSH
26717: LD_VAR 0 1
26721: ARRAY
26722: PUSH
26723: LD_INT 4
26725: ARRAY
26726: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26727: LD_ADDR_VAR 0 9
26731: PUSH
26732: LD_VAR 0 6
26736: PPUSH
26737: LD_VAR 0 7
26741: PPUSH
26742: LD_INT 16
26744: PPUSH
26745: CALL 71997 0 3
26749: ST_TO_ADDR
// if not cratesNearbyPoint then
26750: LD_VAR 0 9
26754: NOT
26755: IFFALSE 26761
// exit ;
26757: POP
26758: POP
26759: GO 27218
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26761: LD_ADDR_VAR 0 4
26765: PUSH
26766: LD_INT 22
26768: PUSH
26769: LD_VAR 0 5
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 3
26780: PUSH
26781: LD_INT 60
26783: PUSH
26784: EMPTY
26785: LIST
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 91
26793: PUSH
26794: LD_VAR 0 8
26798: PUSH
26799: LD_INT 6
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 2
26809: PUSH
26810: LD_INT 25
26812: PUSH
26813: LD_INT 2
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 25
26822: PUSH
26823: LD_INT 16
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: LIST
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: PPUSH
26841: CALL_OW 69
26845: PUSH
26846: LD_VAR 0 8
26850: PPUSH
26851: CALL_OW 313
26855: PPUSH
26856: LD_INT 3
26858: PUSH
26859: LD_INT 60
26861: PUSH
26862: EMPTY
26863: LIST
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: LD_INT 25
26874: PUSH
26875: LD_INT 2
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 25
26884: PUSH
26885: LD_INT 16
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PPUSH
26901: CALL_OW 72
26905: UNION
26906: ST_TO_ADDR
// if tmp then
26907: LD_VAR 0 4
26911: IFFALSE 26991
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26913: LD_ADDR_VAR 0 4
26917: PUSH
26918: LD_VAR 0 4
26922: PPUSH
26923: LD_INT 3
26925: PPUSH
26926: CALL 69966 0 2
26930: ST_TO_ADDR
// for j in tmp do
26931: LD_ADDR_VAR 0 2
26935: PUSH
26936: LD_VAR 0 4
26940: PUSH
26941: FOR_IN
26942: IFFALSE 26985
// begin if IsInUnit ( j ) then
26944: LD_VAR 0 2
26948: PPUSH
26949: CALL_OW 310
26953: IFFALSE 26964
// ComExit ( j ) ;
26955: LD_VAR 0 2
26959: PPUSH
26960: CALL 70049 0 1
// AddComCollect ( j , x , y ) ;
26964: LD_VAR 0 2
26968: PPUSH
26969: LD_VAR 0 6
26973: PPUSH
26974: LD_VAR 0 7
26978: PPUSH
26979: CALL_OW 177
// end ;
26983: GO 26941
26985: POP
26986: POP
// exit ;
26987: POP
26988: POP
26989: GO 27218
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26991: LD_ADDR_VAR 0 4
26995: PUSH
26996: LD_INT 22
26998: PUSH
26999: LD_VAR 0 5
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 91
27010: PUSH
27011: LD_VAR 0 8
27015: PUSH
27016: LD_INT 8
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 2
27026: PUSH
27027: LD_INT 34
27029: PUSH
27030: LD_INT 12
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 34
27039: PUSH
27040: LD_INT 51
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 34
27049: PUSH
27050: LD_INT 32
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 34
27059: PUSH
27060: LD_INT 89
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: LIST
27078: PPUSH
27079: CALL_OW 69
27083: ST_TO_ADDR
// if tmp then
27084: LD_VAR 0 4
27088: IFFALSE 27214
// begin for j in tmp do
27090: LD_ADDR_VAR 0 2
27094: PUSH
27095: LD_VAR 0 4
27099: PUSH
27100: FOR_IN
27101: IFFALSE 27212
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27103: LD_VAR 0 2
27107: PPUSH
27108: CALL_OW 262
27112: PUSH
27113: LD_INT 3
27115: EQUAL
27116: PUSH
27117: LD_VAR 0 2
27121: PPUSH
27122: CALL_OW 261
27126: PUSH
27127: LD_INT 20
27129: GREATER
27130: OR
27131: PUSH
27132: LD_VAR 0 2
27136: PPUSH
27137: CALL_OW 314
27141: NOT
27142: AND
27143: PUSH
27144: LD_VAR 0 2
27148: PPUSH
27149: CALL_OW 263
27153: PUSH
27154: LD_INT 1
27156: NONEQUAL
27157: PUSH
27158: LD_VAR 0 2
27162: PPUSH
27163: CALL_OW 311
27167: OR
27168: AND
27169: IFFALSE 27210
// begin ComCollect ( j , x , y ) ;
27171: LD_VAR 0 2
27175: PPUSH
27176: LD_VAR 0 6
27180: PPUSH
27181: LD_VAR 0 7
27185: PPUSH
27186: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27190: LD_VAR 0 2
27194: PPUSH
27195: LD_VAR 0 8
27199: PPUSH
27200: CALL_OW 172
// exit ;
27204: POP
27205: POP
27206: POP
27207: POP
27208: GO 27218
// end ;
27210: GO 27100
27212: POP
27213: POP
// end ; end ;
27214: GO 26589
27216: POP
27217: POP
// end ; end_of_file
27218: PPOPN 9
27220: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27221: LD_INT 0
27223: PPUSH
27224: PPUSH
27225: PPUSH
27226: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27227: LD_VAR 0 1
27231: PPUSH
27232: CALL_OW 264
27236: PUSH
27237: LD_INT 91
27239: EQUAL
27240: IFFALSE 27312
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27242: LD_INT 68
27244: PPUSH
27245: LD_VAR 0 1
27249: PPUSH
27250: CALL_OW 255
27254: PPUSH
27255: CALL_OW 321
27259: PUSH
27260: LD_INT 2
27262: EQUAL
27263: IFFALSE 27275
// eff := 70 else
27265: LD_ADDR_VAR 0 4
27269: PUSH
27270: LD_INT 70
27272: ST_TO_ADDR
27273: GO 27283
// eff := 30 ;
27275: LD_ADDR_VAR 0 4
27279: PUSH
27280: LD_INT 30
27282: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27283: LD_VAR 0 1
27287: PPUSH
27288: CALL_OW 250
27292: PPUSH
27293: LD_VAR 0 1
27297: PPUSH
27298: CALL_OW 251
27302: PPUSH
27303: LD_VAR 0 4
27307: PPUSH
27308: CALL_OW 495
// end ; end ;
27312: LD_VAR 0 2
27316: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27317: LD_INT 0
27319: PPUSH
// end ;
27320: LD_VAR 0 4
27324: RET
// export function SOS_Command ( cmd ) ; begin
27325: LD_INT 0
27327: PPUSH
// end ;
27328: LD_VAR 0 2
27332: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27333: LD_INT 0
27335: PPUSH
// end ;
27336: LD_VAR 0 6
27340: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27341: LD_INT 0
27343: PPUSH
27344: PPUSH
// if not vehicle or not factory then
27345: LD_VAR 0 1
27349: NOT
27350: PUSH
27351: LD_VAR 0 2
27355: NOT
27356: OR
27357: IFFALSE 27361
// exit ;
27359: GO 27592
// if factoryWaypoints >= factory then
27361: LD_EXP 80
27365: PUSH
27366: LD_VAR 0 2
27370: GREATEREQUAL
27371: IFFALSE 27592
// if factoryWaypoints [ factory ] then
27373: LD_EXP 80
27377: PUSH
27378: LD_VAR 0 2
27382: ARRAY
27383: IFFALSE 27592
// begin if GetControl ( vehicle ) = control_manual then
27385: LD_VAR 0 1
27389: PPUSH
27390: CALL_OW 263
27394: PUSH
27395: LD_INT 1
27397: EQUAL
27398: IFFALSE 27479
// begin driver := IsDrivenBy ( vehicle ) ;
27400: LD_ADDR_VAR 0 4
27404: PUSH
27405: LD_VAR 0 1
27409: PPUSH
27410: CALL_OW 311
27414: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27415: LD_VAR 0 4
27419: PPUSH
27420: LD_EXP 80
27424: PUSH
27425: LD_VAR 0 2
27429: ARRAY
27430: PUSH
27431: LD_INT 3
27433: ARRAY
27434: PPUSH
27435: LD_EXP 80
27439: PUSH
27440: LD_VAR 0 2
27444: ARRAY
27445: PUSH
27446: LD_INT 4
27448: ARRAY
27449: PPUSH
27450: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27454: LD_VAR 0 4
27458: PPUSH
27459: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27463: LD_VAR 0 4
27467: PPUSH
27468: LD_VAR 0 2
27472: PPUSH
27473: CALL_OW 180
// end else
27477: GO 27592
// if GetControl ( vehicle ) = control_remote then
27479: LD_VAR 0 1
27483: PPUSH
27484: CALL_OW 263
27488: PUSH
27489: LD_INT 2
27491: EQUAL
27492: IFFALSE 27553
// begin wait ( 0 0$2 ) ;
27494: LD_INT 70
27496: PPUSH
27497: CALL_OW 67
// if Connect ( vehicle ) then
27501: LD_VAR 0 1
27505: PPUSH
27506: CALL 40257 0 1
27510: IFFALSE 27551
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27512: LD_VAR 0 1
27516: PPUSH
27517: LD_EXP 80
27521: PUSH
27522: LD_VAR 0 2
27526: ARRAY
27527: PUSH
27528: LD_INT 3
27530: ARRAY
27531: PPUSH
27532: LD_EXP 80
27536: PUSH
27537: LD_VAR 0 2
27541: ARRAY
27542: PUSH
27543: LD_INT 4
27545: ARRAY
27546: PPUSH
27547: CALL_OW 171
// end else
27551: GO 27592
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27553: LD_VAR 0 1
27557: PPUSH
27558: LD_EXP 80
27562: PUSH
27563: LD_VAR 0 2
27567: ARRAY
27568: PUSH
27569: LD_INT 3
27571: ARRAY
27572: PPUSH
27573: LD_EXP 80
27577: PUSH
27578: LD_VAR 0 2
27582: ARRAY
27583: PUSH
27584: LD_INT 4
27586: ARRAY
27587: PPUSH
27588: CALL_OW 171
// end ; end ;
27592: LD_VAR 0 3
27596: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27597: LD_INT 0
27599: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27600: LD_VAR 0 1
27604: PUSH
27605: LD_INT 250
27607: EQUAL
27608: PUSH
27609: LD_VAR 0 2
27613: PPUSH
27614: CALL_OW 264
27618: PUSH
27619: LD_INT 81
27621: EQUAL
27622: AND
27623: IFFALSE 27644
// MinerPlaceMine ( unit , x , y ) ;
27625: LD_VAR 0 2
27629: PPUSH
27630: LD_VAR 0 4
27634: PPUSH
27635: LD_VAR 0 5
27639: PPUSH
27640: CALL 30468 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27644: LD_VAR 0 1
27648: PUSH
27649: LD_INT 251
27651: EQUAL
27652: PUSH
27653: LD_VAR 0 2
27657: PPUSH
27658: CALL_OW 264
27662: PUSH
27663: LD_INT 81
27665: EQUAL
27666: AND
27667: IFFALSE 27688
// MinerDetonateMine ( unit , x , y ) ;
27669: LD_VAR 0 2
27673: PPUSH
27674: LD_VAR 0 4
27678: PPUSH
27679: LD_VAR 0 5
27683: PPUSH
27684: CALL 30743 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27688: LD_VAR 0 1
27692: PUSH
27693: LD_INT 252
27695: EQUAL
27696: PUSH
27697: LD_VAR 0 2
27701: PPUSH
27702: CALL_OW 264
27706: PUSH
27707: LD_INT 81
27709: EQUAL
27710: AND
27711: IFFALSE 27732
// MinerCreateMinefield ( unit , x , y ) ;
27713: LD_VAR 0 2
27717: PPUSH
27718: LD_VAR 0 4
27722: PPUSH
27723: LD_VAR 0 5
27727: PPUSH
27728: CALL 31160 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27732: LD_VAR 0 1
27736: PUSH
27737: LD_INT 253
27739: EQUAL
27740: PUSH
27741: LD_VAR 0 2
27745: PPUSH
27746: CALL_OW 257
27750: PUSH
27751: LD_INT 5
27753: EQUAL
27754: AND
27755: IFFALSE 27776
// ComBinocular ( unit , x , y ) ;
27757: LD_VAR 0 2
27761: PPUSH
27762: LD_VAR 0 4
27766: PPUSH
27767: LD_VAR 0 5
27771: PPUSH
27772: CALL 31529 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27776: LD_VAR 0 1
27780: PUSH
27781: LD_INT 254
27783: EQUAL
27784: PUSH
27785: LD_VAR 0 2
27789: PPUSH
27790: CALL_OW 264
27794: PUSH
27795: LD_INT 99
27797: EQUAL
27798: AND
27799: PUSH
27800: LD_VAR 0 3
27804: PPUSH
27805: CALL_OW 263
27809: PUSH
27810: LD_INT 3
27812: EQUAL
27813: AND
27814: IFFALSE 27830
// HackDestroyVehicle ( unit , selectedUnit ) ;
27816: LD_VAR 0 2
27820: PPUSH
27821: LD_VAR 0 3
27825: PPUSH
27826: CALL 29832 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27830: LD_VAR 0 1
27834: PUSH
27835: LD_INT 255
27837: EQUAL
27838: PUSH
27839: LD_VAR 0 2
27843: PPUSH
27844: CALL_OW 264
27848: PUSH
27849: LD_INT 14
27851: PUSH
27852: LD_INT 53
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: IN
27859: AND
27860: PUSH
27861: LD_VAR 0 4
27865: PPUSH
27866: LD_VAR 0 5
27870: PPUSH
27871: CALL_OW 488
27875: AND
27876: IFFALSE 27900
// CutTreeXYR ( unit , x , y , 12 ) ;
27878: LD_VAR 0 2
27882: PPUSH
27883: LD_VAR 0 4
27887: PPUSH
27888: LD_VAR 0 5
27892: PPUSH
27893: LD_INT 12
27895: PPUSH
27896: CALL 27995 0 4
// if cmd = 256 then
27900: LD_VAR 0 1
27904: PUSH
27905: LD_INT 256
27907: EQUAL
27908: IFFALSE 27929
// SetFactoryWaypoint ( unit , x , y ) ;
27910: LD_VAR 0 2
27914: PPUSH
27915: LD_VAR 0 4
27919: PPUSH
27920: LD_VAR 0 5
27924: PPUSH
27925: CALL 25910 0 3
// if cmd = 257 then
27929: LD_VAR 0 1
27933: PUSH
27934: LD_INT 257
27936: EQUAL
27937: IFFALSE 27958
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27939: LD_VAR 0 2
27943: PPUSH
27944: LD_VAR 0 4
27948: PPUSH
27949: LD_VAR 0 5
27953: PPUSH
27954: CALL 26272 0 3
// if cmd = 258 then
27958: LD_VAR 0 1
27962: PUSH
27963: LD_INT 258
27965: EQUAL
27966: IFFALSE 27990
// BurnTreeXYR ( unit , x , y , 8 ) ;
27968: LD_VAR 0 2
27972: PPUSH
27973: LD_VAR 0 4
27977: PPUSH
27978: LD_VAR 0 5
27982: PPUSH
27983: LD_INT 8
27985: PPUSH
27986: CALL 28389 0 4
// end ;
27990: LD_VAR 0 6
27994: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27995: LD_INT 0
27997: PPUSH
27998: PPUSH
27999: PPUSH
28000: PPUSH
28001: PPUSH
28002: PPUSH
28003: PPUSH
28004: PPUSH
28005: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28006: LD_VAR 0 1
28010: PPUSH
28011: CALL_OW 302
28015: NOT
28016: PUSH
28017: LD_VAR 0 2
28021: PPUSH
28022: LD_VAR 0 3
28026: PPUSH
28027: CALL_OW 488
28031: NOT
28032: OR
28033: PUSH
28034: LD_VAR 0 4
28038: NOT
28039: OR
28040: IFFALSE 28044
// exit ;
28042: GO 28384
// list := [ ] ;
28044: LD_ADDR_VAR 0 13
28048: PUSH
28049: EMPTY
28050: ST_TO_ADDR
// if x - r < 0 then
28051: LD_VAR 0 2
28055: PUSH
28056: LD_VAR 0 4
28060: MINUS
28061: PUSH
28062: LD_INT 0
28064: LESS
28065: IFFALSE 28077
// min_x := 0 else
28067: LD_ADDR_VAR 0 7
28071: PUSH
28072: LD_INT 0
28074: ST_TO_ADDR
28075: GO 28093
// min_x := x - r ;
28077: LD_ADDR_VAR 0 7
28081: PUSH
28082: LD_VAR 0 2
28086: PUSH
28087: LD_VAR 0 4
28091: MINUS
28092: ST_TO_ADDR
// if y - r < 0 then
28093: LD_VAR 0 3
28097: PUSH
28098: LD_VAR 0 4
28102: MINUS
28103: PUSH
28104: LD_INT 0
28106: LESS
28107: IFFALSE 28119
// min_y := 0 else
28109: LD_ADDR_VAR 0 8
28113: PUSH
28114: LD_INT 0
28116: ST_TO_ADDR
28117: GO 28135
// min_y := y - r ;
28119: LD_ADDR_VAR 0 8
28123: PUSH
28124: LD_VAR 0 3
28128: PUSH
28129: LD_VAR 0 4
28133: MINUS
28134: ST_TO_ADDR
// max_x := x + r ;
28135: LD_ADDR_VAR 0 9
28139: PUSH
28140: LD_VAR 0 2
28144: PUSH
28145: LD_VAR 0 4
28149: PLUS
28150: ST_TO_ADDR
// max_y := y + r ;
28151: LD_ADDR_VAR 0 10
28155: PUSH
28156: LD_VAR 0 3
28160: PUSH
28161: LD_VAR 0 4
28165: PLUS
28166: ST_TO_ADDR
// for _x = min_x to max_x do
28167: LD_ADDR_VAR 0 11
28171: PUSH
28172: DOUBLE
28173: LD_VAR 0 7
28177: DEC
28178: ST_TO_ADDR
28179: LD_VAR 0 9
28183: PUSH
28184: FOR_TO
28185: IFFALSE 28302
// for _y = min_y to max_y do
28187: LD_ADDR_VAR 0 12
28191: PUSH
28192: DOUBLE
28193: LD_VAR 0 8
28197: DEC
28198: ST_TO_ADDR
28199: LD_VAR 0 10
28203: PUSH
28204: FOR_TO
28205: IFFALSE 28298
// begin if not ValidHex ( _x , _y ) then
28207: LD_VAR 0 11
28211: PPUSH
28212: LD_VAR 0 12
28216: PPUSH
28217: CALL_OW 488
28221: NOT
28222: IFFALSE 28226
// continue ;
28224: GO 28204
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28226: LD_VAR 0 11
28230: PPUSH
28231: LD_VAR 0 12
28235: PPUSH
28236: CALL_OW 351
28240: PUSH
28241: LD_VAR 0 11
28245: PPUSH
28246: LD_VAR 0 12
28250: PPUSH
28251: CALL_OW 554
28255: AND
28256: IFFALSE 28296
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28258: LD_ADDR_VAR 0 13
28262: PUSH
28263: LD_VAR 0 13
28267: PPUSH
28268: LD_VAR 0 13
28272: PUSH
28273: LD_INT 1
28275: PLUS
28276: PPUSH
28277: LD_VAR 0 11
28281: PUSH
28282: LD_VAR 0 12
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PPUSH
28291: CALL_OW 2
28295: ST_TO_ADDR
// end ;
28296: GO 28204
28298: POP
28299: POP
28300: GO 28184
28302: POP
28303: POP
// if not list then
28304: LD_VAR 0 13
28308: NOT
28309: IFFALSE 28313
// exit ;
28311: GO 28384
// for i in list do
28313: LD_ADDR_VAR 0 6
28317: PUSH
28318: LD_VAR 0 13
28322: PUSH
28323: FOR_IN
28324: IFFALSE 28382
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28326: LD_VAR 0 1
28330: PPUSH
28331: LD_STRING M
28333: PUSH
28334: LD_VAR 0 6
28338: PUSH
28339: LD_INT 1
28341: ARRAY
28342: PUSH
28343: LD_VAR 0 6
28347: PUSH
28348: LD_INT 2
28350: ARRAY
28351: PUSH
28352: LD_INT 0
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: LD_INT 0
28360: PUSH
28361: LD_INT 0
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: PUSH
28373: EMPTY
28374: LIST
28375: PPUSH
28376: CALL_OW 447
28380: GO 28323
28382: POP
28383: POP
// end ;
28384: LD_VAR 0 5
28388: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28389: LD_INT 0
28391: PPUSH
28392: PPUSH
28393: PPUSH
28394: PPUSH
28395: PPUSH
28396: PPUSH
28397: PPUSH
28398: PPUSH
28399: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
28400: LD_VAR 0 1
28404: PPUSH
28405: CALL_OW 302
28409: NOT
28410: PUSH
28411: LD_VAR 0 2
28415: PPUSH
28416: LD_VAR 0 3
28420: PPUSH
28421: CALL_OW 488
28425: NOT
28426: OR
28427: PUSH
28428: LD_VAR 0 4
28432: NOT
28433: OR
28434: IFFALSE 28438
// exit ;
28436: GO 28786
// list := [ ] ;
28438: LD_ADDR_VAR 0 13
28442: PUSH
28443: EMPTY
28444: ST_TO_ADDR
// if x - r < 0 then
28445: LD_VAR 0 2
28449: PUSH
28450: LD_VAR 0 4
28454: MINUS
28455: PUSH
28456: LD_INT 0
28458: LESS
28459: IFFALSE 28471
// min_x := 0 else
28461: LD_ADDR_VAR 0 7
28465: PUSH
28466: LD_INT 0
28468: ST_TO_ADDR
28469: GO 28487
// min_x := x - r ;
28471: LD_ADDR_VAR 0 7
28475: PUSH
28476: LD_VAR 0 2
28480: PUSH
28481: LD_VAR 0 4
28485: MINUS
28486: ST_TO_ADDR
// if y - r < 0 then
28487: LD_VAR 0 3
28491: PUSH
28492: LD_VAR 0 4
28496: MINUS
28497: PUSH
28498: LD_INT 0
28500: LESS
28501: IFFALSE 28513
// min_y := 0 else
28503: LD_ADDR_VAR 0 8
28507: PUSH
28508: LD_INT 0
28510: ST_TO_ADDR
28511: GO 28529
// min_y := y - r ;
28513: LD_ADDR_VAR 0 8
28517: PUSH
28518: LD_VAR 0 3
28522: PUSH
28523: LD_VAR 0 4
28527: MINUS
28528: ST_TO_ADDR
// max_x := x + r ;
28529: LD_ADDR_VAR 0 9
28533: PUSH
28534: LD_VAR 0 2
28538: PUSH
28539: LD_VAR 0 4
28543: PLUS
28544: ST_TO_ADDR
// max_y := y + r ;
28545: LD_ADDR_VAR 0 10
28549: PUSH
28550: LD_VAR 0 3
28554: PUSH
28555: LD_VAR 0 4
28559: PLUS
28560: ST_TO_ADDR
// for _x = min_x to max_x do
28561: LD_ADDR_VAR 0 11
28565: PUSH
28566: DOUBLE
28567: LD_VAR 0 7
28571: DEC
28572: ST_TO_ADDR
28573: LD_VAR 0 9
28577: PUSH
28578: FOR_TO
28579: IFFALSE 28696
// for _y = min_y to max_y do
28581: LD_ADDR_VAR 0 12
28585: PUSH
28586: DOUBLE
28587: LD_VAR 0 8
28591: DEC
28592: ST_TO_ADDR
28593: LD_VAR 0 10
28597: PUSH
28598: FOR_TO
28599: IFFALSE 28692
// begin if not ValidHex ( _x , _y ) then
28601: LD_VAR 0 11
28605: PPUSH
28606: LD_VAR 0 12
28610: PPUSH
28611: CALL_OW 488
28615: NOT
28616: IFFALSE 28620
// continue ;
28618: GO 28598
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28620: LD_VAR 0 11
28624: PPUSH
28625: LD_VAR 0 12
28629: PPUSH
28630: CALL_OW 351
28634: PUSH
28635: LD_VAR 0 11
28639: PPUSH
28640: LD_VAR 0 12
28644: PPUSH
28645: CALL_OW 554
28649: AND
28650: IFFALSE 28690
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28652: LD_ADDR_VAR 0 13
28656: PUSH
28657: LD_VAR 0 13
28661: PPUSH
28662: LD_VAR 0 13
28666: PUSH
28667: LD_INT 1
28669: PLUS
28670: PPUSH
28671: LD_VAR 0 11
28675: PUSH
28676: LD_VAR 0 12
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PPUSH
28685: CALL_OW 2
28689: ST_TO_ADDR
// end ;
28690: GO 28598
28692: POP
28693: POP
28694: GO 28578
28696: POP
28697: POP
// if not list then
28698: LD_VAR 0 13
28702: NOT
28703: IFFALSE 28707
// exit ;
28705: GO 28786
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
28707: LD_ADDR_VAR 0 13
28711: PUSH
28712: LD_VAR 0 1
28716: PPUSH
28717: LD_VAR 0 13
28721: PPUSH
28722: LD_INT 1
28724: PPUSH
28725: LD_INT 1
28727: PPUSH
28728: CALL 37399 0 4
28732: ST_TO_ADDR
// ComStop ( flame ) ;
28733: LD_VAR 0 1
28737: PPUSH
28738: CALL_OW 141
// for i in list do
28742: LD_ADDR_VAR 0 6
28746: PUSH
28747: LD_VAR 0 13
28751: PUSH
28752: FOR_IN
28753: IFFALSE 28784
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
28755: LD_VAR 0 1
28759: PPUSH
28760: LD_VAR 0 6
28764: PUSH
28765: LD_INT 1
28767: ARRAY
28768: PPUSH
28769: LD_VAR 0 6
28773: PUSH
28774: LD_INT 2
28776: ARRAY
28777: PPUSH
28778: CALL_OW 176
28782: GO 28752
28784: POP
28785: POP
// end ;
28786: LD_VAR 0 5
28790: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28791: LD_EXP 83
28795: NOT
28796: IFFALSE 28846
28798: GO 28800
28800: DISABLE
// begin initHack := true ;
28801: LD_ADDR_EXP 83
28805: PUSH
28806: LD_INT 1
28808: ST_TO_ADDR
// hackTanks := [ ] ;
28809: LD_ADDR_EXP 84
28813: PUSH
28814: EMPTY
28815: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28816: LD_ADDR_EXP 85
28820: PUSH
28821: EMPTY
28822: ST_TO_ADDR
// hackLimit := 3 ;
28823: LD_ADDR_EXP 86
28827: PUSH
28828: LD_INT 3
28830: ST_TO_ADDR
// hackDist := 12 ;
28831: LD_ADDR_EXP 87
28835: PUSH
28836: LD_INT 12
28838: ST_TO_ADDR
// hackCounter := [ ] ;
28839: LD_ADDR_EXP 88
28843: PUSH
28844: EMPTY
28845: ST_TO_ADDR
// end ;
28846: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28847: LD_EXP 83
28851: PUSH
28852: LD_INT 34
28854: PUSH
28855: LD_INT 99
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PPUSH
28862: CALL_OW 69
28866: AND
28867: IFFALSE 29120
28869: GO 28871
28871: DISABLE
28872: LD_INT 0
28874: PPUSH
28875: PPUSH
// begin enable ;
28876: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28877: LD_ADDR_VAR 0 1
28881: PUSH
28882: LD_INT 34
28884: PUSH
28885: LD_INT 99
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PPUSH
28892: CALL_OW 69
28896: PUSH
28897: FOR_IN
28898: IFFALSE 29118
// begin if not i in hackTanks then
28900: LD_VAR 0 1
28904: PUSH
28905: LD_EXP 84
28909: IN
28910: NOT
28911: IFFALSE 28994
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28913: LD_ADDR_EXP 84
28917: PUSH
28918: LD_EXP 84
28922: PPUSH
28923: LD_EXP 84
28927: PUSH
28928: LD_INT 1
28930: PLUS
28931: PPUSH
28932: LD_VAR 0 1
28936: PPUSH
28937: CALL_OW 1
28941: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28942: LD_ADDR_EXP 85
28946: PUSH
28947: LD_EXP 85
28951: PPUSH
28952: LD_EXP 85
28956: PUSH
28957: LD_INT 1
28959: PLUS
28960: PPUSH
28961: EMPTY
28962: PPUSH
28963: CALL_OW 1
28967: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28968: LD_ADDR_EXP 88
28972: PUSH
28973: LD_EXP 88
28977: PPUSH
28978: LD_EXP 88
28982: PUSH
28983: LD_INT 1
28985: PLUS
28986: PPUSH
28987: EMPTY
28988: PPUSH
28989: CALL_OW 1
28993: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28994: LD_VAR 0 1
28998: PPUSH
28999: CALL_OW 302
29003: NOT
29004: IFFALSE 29017
// begin HackUnlinkAll ( i ) ;
29006: LD_VAR 0 1
29010: PPUSH
29011: CALL 29123 0 1
// continue ;
29015: GO 28897
// end ; HackCheckCapturedStatus ( i ) ;
29017: LD_VAR 0 1
29021: PPUSH
29022: CALL 29566 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29026: LD_ADDR_VAR 0 2
29030: PUSH
29031: LD_INT 81
29033: PUSH
29034: LD_VAR 0 1
29038: PPUSH
29039: CALL_OW 255
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 33
29050: PUSH
29051: LD_INT 3
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 91
29060: PUSH
29061: LD_VAR 0 1
29065: PUSH
29066: LD_EXP 87
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 50
29078: PUSH
29079: EMPTY
29080: LIST
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: PPUSH
29088: CALL_OW 69
29092: ST_TO_ADDR
// if not tmp then
29093: LD_VAR 0 2
29097: NOT
29098: IFFALSE 29102
// continue ;
29100: GO 28897
// HackLink ( i , tmp ) ;
29102: LD_VAR 0 1
29106: PPUSH
29107: LD_VAR 0 2
29111: PPUSH
29112: CALL 29259 0 2
// end ;
29116: GO 28897
29118: POP
29119: POP
// end ;
29120: PPOPN 2
29122: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29123: LD_INT 0
29125: PPUSH
29126: PPUSH
29127: PPUSH
// if not hack in hackTanks then
29128: LD_VAR 0 1
29132: PUSH
29133: LD_EXP 84
29137: IN
29138: NOT
29139: IFFALSE 29143
// exit ;
29141: GO 29254
// index := GetElementIndex ( hackTanks , hack ) ;
29143: LD_ADDR_VAR 0 4
29147: PUSH
29148: LD_EXP 84
29152: PPUSH
29153: LD_VAR 0 1
29157: PPUSH
29158: CALL 36696 0 2
29162: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29163: LD_EXP 85
29167: PUSH
29168: LD_VAR 0 4
29172: ARRAY
29173: IFFALSE 29254
// begin for i in hackTanksCaptured [ index ] do
29175: LD_ADDR_VAR 0 3
29179: PUSH
29180: LD_EXP 85
29184: PUSH
29185: LD_VAR 0 4
29189: ARRAY
29190: PUSH
29191: FOR_IN
29192: IFFALSE 29218
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29194: LD_VAR 0 3
29198: PUSH
29199: LD_INT 1
29201: ARRAY
29202: PPUSH
29203: LD_VAR 0 3
29207: PUSH
29208: LD_INT 2
29210: ARRAY
29211: PPUSH
29212: CALL_OW 235
29216: GO 29191
29218: POP
29219: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29220: LD_ADDR_EXP 85
29224: PUSH
29225: LD_EXP 85
29229: PPUSH
29230: LD_VAR 0 4
29234: PPUSH
29235: EMPTY
29236: PPUSH
29237: CALL_OW 1
29241: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29242: LD_VAR 0 1
29246: PPUSH
29247: LD_INT 0
29249: PPUSH
29250: CALL_OW 505
// end ; end ;
29254: LD_VAR 0 2
29258: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29259: LD_INT 0
29261: PPUSH
29262: PPUSH
29263: PPUSH
// if not hack in hackTanks or not vehicles then
29264: LD_VAR 0 1
29268: PUSH
29269: LD_EXP 84
29273: IN
29274: NOT
29275: PUSH
29276: LD_VAR 0 2
29280: NOT
29281: OR
29282: IFFALSE 29286
// exit ;
29284: GO 29561
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29286: LD_ADDR_VAR 0 2
29290: PUSH
29291: LD_VAR 0 1
29295: PPUSH
29296: LD_VAR 0 2
29300: PPUSH
29301: LD_INT 1
29303: PPUSH
29304: LD_INT 1
29306: PPUSH
29307: CALL 37346 0 4
29311: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29312: LD_ADDR_VAR 0 5
29316: PUSH
29317: LD_EXP 84
29321: PPUSH
29322: LD_VAR 0 1
29326: PPUSH
29327: CALL 36696 0 2
29331: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29332: LD_EXP 85
29336: PUSH
29337: LD_VAR 0 5
29341: ARRAY
29342: PUSH
29343: LD_EXP 86
29347: LESS
29348: IFFALSE 29537
// begin for i := 1 to vehicles do
29350: LD_ADDR_VAR 0 4
29354: PUSH
29355: DOUBLE
29356: LD_INT 1
29358: DEC
29359: ST_TO_ADDR
29360: LD_VAR 0 2
29364: PUSH
29365: FOR_TO
29366: IFFALSE 29535
// begin if hackTanksCaptured [ index ] = hackLimit then
29368: LD_EXP 85
29372: PUSH
29373: LD_VAR 0 5
29377: ARRAY
29378: PUSH
29379: LD_EXP 86
29383: EQUAL
29384: IFFALSE 29388
// break ;
29386: GO 29535
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29388: LD_ADDR_EXP 88
29392: PUSH
29393: LD_EXP 88
29397: PPUSH
29398: LD_VAR 0 5
29402: PPUSH
29403: LD_EXP 88
29407: PUSH
29408: LD_VAR 0 5
29412: ARRAY
29413: PUSH
29414: LD_INT 1
29416: PLUS
29417: PPUSH
29418: CALL_OW 1
29422: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29423: LD_ADDR_EXP 85
29427: PUSH
29428: LD_EXP 85
29432: PPUSH
29433: LD_VAR 0 5
29437: PUSH
29438: LD_EXP 85
29442: PUSH
29443: LD_VAR 0 5
29447: ARRAY
29448: PUSH
29449: LD_INT 1
29451: PLUS
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PPUSH
29457: LD_VAR 0 2
29461: PUSH
29462: LD_VAR 0 4
29466: ARRAY
29467: PUSH
29468: LD_VAR 0 2
29472: PUSH
29473: LD_VAR 0 4
29477: ARRAY
29478: PPUSH
29479: CALL_OW 255
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PPUSH
29488: CALL 36911 0 3
29492: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29493: LD_VAR 0 2
29497: PUSH
29498: LD_VAR 0 4
29502: ARRAY
29503: PPUSH
29504: LD_VAR 0 1
29508: PPUSH
29509: CALL_OW 255
29513: PPUSH
29514: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29518: LD_VAR 0 2
29522: PUSH
29523: LD_VAR 0 4
29527: ARRAY
29528: PPUSH
29529: CALL_OW 141
// end ;
29533: GO 29365
29535: POP
29536: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29537: LD_VAR 0 1
29541: PPUSH
29542: LD_EXP 85
29546: PUSH
29547: LD_VAR 0 5
29551: ARRAY
29552: PUSH
29553: LD_INT 0
29555: PLUS
29556: PPUSH
29557: CALL_OW 505
// end ;
29561: LD_VAR 0 3
29565: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29566: LD_INT 0
29568: PPUSH
29569: PPUSH
29570: PPUSH
29571: PPUSH
// if not hack in hackTanks then
29572: LD_VAR 0 1
29576: PUSH
29577: LD_EXP 84
29581: IN
29582: NOT
29583: IFFALSE 29587
// exit ;
29585: GO 29827
// index := GetElementIndex ( hackTanks , hack ) ;
29587: LD_ADDR_VAR 0 4
29591: PUSH
29592: LD_EXP 84
29596: PPUSH
29597: LD_VAR 0 1
29601: PPUSH
29602: CALL 36696 0 2
29606: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29607: LD_ADDR_VAR 0 3
29611: PUSH
29612: DOUBLE
29613: LD_EXP 85
29617: PUSH
29618: LD_VAR 0 4
29622: ARRAY
29623: INC
29624: ST_TO_ADDR
29625: LD_INT 1
29627: PUSH
29628: FOR_DOWNTO
29629: IFFALSE 29801
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29631: LD_ADDR_VAR 0 5
29635: PUSH
29636: LD_EXP 85
29640: PUSH
29641: LD_VAR 0 4
29645: ARRAY
29646: PUSH
29647: LD_VAR 0 3
29651: ARRAY
29652: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29653: LD_VAR 0 5
29657: PUSH
29658: LD_INT 1
29660: ARRAY
29661: PPUSH
29662: CALL_OW 302
29666: NOT
29667: PUSH
29668: LD_VAR 0 5
29672: PUSH
29673: LD_INT 1
29675: ARRAY
29676: PPUSH
29677: CALL_OW 255
29681: PUSH
29682: LD_VAR 0 1
29686: PPUSH
29687: CALL_OW 255
29691: NONEQUAL
29692: OR
29693: IFFALSE 29799
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29695: LD_VAR 0 5
29699: PUSH
29700: LD_INT 1
29702: ARRAY
29703: PPUSH
29704: CALL_OW 305
29708: PUSH
29709: LD_VAR 0 5
29713: PUSH
29714: LD_INT 1
29716: ARRAY
29717: PPUSH
29718: CALL_OW 255
29722: PUSH
29723: LD_VAR 0 1
29727: PPUSH
29728: CALL_OW 255
29732: EQUAL
29733: AND
29734: IFFALSE 29758
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29736: LD_VAR 0 5
29740: PUSH
29741: LD_INT 1
29743: ARRAY
29744: PPUSH
29745: LD_VAR 0 5
29749: PUSH
29750: LD_INT 2
29752: ARRAY
29753: PPUSH
29754: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29758: LD_ADDR_EXP 85
29762: PUSH
29763: LD_EXP 85
29767: PPUSH
29768: LD_VAR 0 4
29772: PPUSH
29773: LD_EXP 85
29777: PUSH
29778: LD_VAR 0 4
29782: ARRAY
29783: PPUSH
29784: LD_VAR 0 3
29788: PPUSH
29789: CALL_OW 3
29793: PPUSH
29794: CALL_OW 1
29798: ST_TO_ADDR
// end ; end ;
29799: GO 29628
29801: POP
29802: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29803: LD_VAR 0 1
29807: PPUSH
29808: LD_EXP 85
29812: PUSH
29813: LD_VAR 0 4
29817: ARRAY
29818: PUSH
29819: LD_INT 0
29821: PLUS
29822: PPUSH
29823: CALL_OW 505
// end ;
29827: LD_VAR 0 2
29831: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29832: LD_INT 0
29834: PPUSH
29835: PPUSH
29836: PPUSH
29837: PPUSH
// if not hack in hackTanks then
29838: LD_VAR 0 1
29842: PUSH
29843: LD_EXP 84
29847: IN
29848: NOT
29849: IFFALSE 29853
// exit ;
29851: GO 29938
// index := GetElementIndex ( hackTanks , hack ) ;
29853: LD_ADDR_VAR 0 5
29857: PUSH
29858: LD_EXP 84
29862: PPUSH
29863: LD_VAR 0 1
29867: PPUSH
29868: CALL 36696 0 2
29872: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29873: LD_ADDR_VAR 0 4
29877: PUSH
29878: DOUBLE
29879: LD_INT 1
29881: DEC
29882: ST_TO_ADDR
29883: LD_EXP 85
29887: PUSH
29888: LD_VAR 0 5
29892: ARRAY
29893: PUSH
29894: FOR_TO
29895: IFFALSE 29936
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29897: LD_EXP 85
29901: PUSH
29902: LD_VAR 0 5
29906: ARRAY
29907: PUSH
29908: LD_VAR 0 4
29912: ARRAY
29913: PUSH
29914: LD_INT 1
29916: ARRAY
29917: PUSH
29918: LD_VAR 0 2
29922: EQUAL
29923: IFFALSE 29934
// KillUnit ( vehicle ) ;
29925: LD_VAR 0 2
29929: PPUSH
29930: CALL_OW 66
29934: GO 29894
29936: POP
29937: POP
// end ;
29938: LD_VAR 0 3
29942: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29943: LD_EXP 89
29947: NOT
29948: IFFALSE 29983
29950: GO 29952
29952: DISABLE
// begin initMiner := true ;
29953: LD_ADDR_EXP 89
29957: PUSH
29958: LD_INT 1
29960: ST_TO_ADDR
// minersList := [ ] ;
29961: LD_ADDR_EXP 90
29965: PUSH
29966: EMPTY
29967: ST_TO_ADDR
// minerMinesList := [ ] ;
29968: LD_ADDR_EXP 91
29972: PUSH
29973: EMPTY
29974: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29975: LD_ADDR_EXP 92
29979: PUSH
29980: LD_INT 5
29982: ST_TO_ADDR
// end ;
29983: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29984: LD_EXP 89
29988: PUSH
29989: LD_INT 34
29991: PUSH
29992: LD_INT 81
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PPUSH
29999: CALL_OW 69
30003: AND
30004: IFFALSE 30465
30006: GO 30008
30008: DISABLE
30009: LD_INT 0
30011: PPUSH
30012: PPUSH
30013: PPUSH
30014: PPUSH
// begin enable ;
30015: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30016: LD_ADDR_VAR 0 1
30020: PUSH
30021: LD_INT 34
30023: PUSH
30024: LD_INT 81
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PPUSH
30031: CALL_OW 69
30035: PUSH
30036: FOR_IN
30037: IFFALSE 30109
// begin if not i in minersList then
30039: LD_VAR 0 1
30043: PUSH
30044: LD_EXP 90
30048: IN
30049: NOT
30050: IFFALSE 30107
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30052: LD_ADDR_EXP 90
30056: PUSH
30057: LD_EXP 90
30061: PPUSH
30062: LD_EXP 90
30066: PUSH
30067: LD_INT 1
30069: PLUS
30070: PPUSH
30071: LD_VAR 0 1
30075: PPUSH
30076: CALL_OW 1
30080: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30081: LD_ADDR_EXP 91
30085: PUSH
30086: LD_EXP 91
30090: PPUSH
30091: LD_EXP 91
30095: PUSH
30096: LD_INT 1
30098: PLUS
30099: PPUSH
30100: EMPTY
30101: PPUSH
30102: CALL_OW 1
30106: ST_TO_ADDR
// end end ;
30107: GO 30036
30109: POP
30110: POP
// for i := minerMinesList downto 1 do
30111: LD_ADDR_VAR 0 1
30115: PUSH
30116: DOUBLE
30117: LD_EXP 91
30121: INC
30122: ST_TO_ADDR
30123: LD_INT 1
30125: PUSH
30126: FOR_DOWNTO
30127: IFFALSE 30463
// begin if IsLive ( minersList [ i ] ) then
30129: LD_EXP 90
30133: PUSH
30134: LD_VAR 0 1
30138: ARRAY
30139: PPUSH
30140: CALL_OW 300
30144: IFFALSE 30172
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30146: LD_EXP 90
30150: PUSH
30151: LD_VAR 0 1
30155: ARRAY
30156: PPUSH
30157: LD_EXP 91
30161: PUSH
30162: LD_VAR 0 1
30166: ARRAY
30167: PPUSH
30168: CALL_OW 505
// if not minerMinesList [ i ] then
30172: LD_EXP 91
30176: PUSH
30177: LD_VAR 0 1
30181: ARRAY
30182: NOT
30183: IFFALSE 30187
// continue ;
30185: GO 30126
// for j := minerMinesList [ i ] downto 1 do
30187: LD_ADDR_VAR 0 2
30191: PUSH
30192: DOUBLE
30193: LD_EXP 91
30197: PUSH
30198: LD_VAR 0 1
30202: ARRAY
30203: INC
30204: ST_TO_ADDR
30205: LD_INT 1
30207: PUSH
30208: FOR_DOWNTO
30209: IFFALSE 30459
// begin side := GetSide ( minersList [ i ] ) ;
30211: LD_ADDR_VAR 0 3
30215: PUSH
30216: LD_EXP 90
30220: PUSH
30221: LD_VAR 0 1
30225: ARRAY
30226: PPUSH
30227: CALL_OW 255
30231: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30232: LD_ADDR_VAR 0 4
30236: PUSH
30237: LD_EXP 91
30241: PUSH
30242: LD_VAR 0 1
30246: ARRAY
30247: PUSH
30248: LD_VAR 0 2
30252: ARRAY
30253: PUSH
30254: LD_INT 1
30256: ARRAY
30257: PPUSH
30258: LD_EXP 91
30262: PUSH
30263: LD_VAR 0 1
30267: ARRAY
30268: PUSH
30269: LD_VAR 0 2
30273: ARRAY
30274: PUSH
30275: LD_INT 2
30277: ARRAY
30278: PPUSH
30279: CALL_OW 428
30283: ST_TO_ADDR
// if not tmp then
30284: LD_VAR 0 4
30288: NOT
30289: IFFALSE 30293
// continue ;
30291: GO 30208
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30293: LD_VAR 0 4
30297: PUSH
30298: LD_INT 81
30300: PUSH
30301: LD_VAR 0 3
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PPUSH
30310: CALL_OW 69
30314: IN
30315: PUSH
30316: LD_EXP 91
30320: PUSH
30321: LD_VAR 0 1
30325: ARRAY
30326: PUSH
30327: LD_VAR 0 2
30331: ARRAY
30332: PUSH
30333: LD_INT 1
30335: ARRAY
30336: PPUSH
30337: LD_EXP 91
30341: PUSH
30342: LD_VAR 0 1
30346: ARRAY
30347: PUSH
30348: LD_VAR 0 2
30352: ARRAY
30353: PUSH
30354: LD_INT 2
30356: ARRAY
30357: PPUSH
30358: CALL_OW 458
30362: AND
30363: IFFALSE 30457
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30365: LD_EXP 91
30369: PUSH
30370: LD_VAR 0 1
30374: ARRAY
30375: PUSH
30376: LD_VAR 0 2
30380: ARRAY
30381: PUSH
30382: LD_INT 1
30384: ARRAY
30385: PPUSH
30386: LD_EXP 91
30390: PUSH
30391: LD_VAR 0 1
30395: ARRAY
30396: PUSH
30397: LD_VAR 0 2
30401: ARRAY
30402: PUSH
30403: LD_INT 2
30405: ARRAY
30406: PPUSH
30407: LD_VAR 0 3
30411: PPUSH
30412: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30416: LD_ADDR_EXP 91
30420: PUSH
30421: LD_EXP 91
30425: PPUSH
30426: LD_VAR 0 1
30430: PPUSH
30431: LD_EXP 91
30435: PUSH
30436: LD_VAR 0 1
30440: ARRAY
30441: PPUSH
30442: LD_VAR 0 2
30446: PPUSH
30447: CALL_OW 3
30451: PPUSH
30452: CALL_OW 1
30456: ST_TO_ADDR
// end ; end ;
30457: GO 30208
30459: POP
30460: POP
// end ;
30461: GO 30126
30463: POP
30464: POP
// end ;
30465: PPOPN 4
30467: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30468: LD_INT 0
30470: PPUSH
30471: PPUSH
// result := false ;
30472: LD_ADDR_VAR 0 4
30476: PUSH
30477: LD_INT 0
30479: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30480: LD_VAR 0 1
30484: PPUSH
30485: CALL_OW 264
30489: PUSH
30490: LD_INT 81
30492: EQUAL
30493: NOT
30494: IFFALSE 30498
// exit ;
30496: GO 30738
// index := GetElementIndex ( minersList , unit ) ;
30498: LD_ADDR_VAR 0 5
30502: PUSH
30503: LD_EXP 90
30507: PPUSH
30508: LD_VAR 0 1
30512: PPUSH
30513: CALL 36696 0 2
30517: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30518: LD_EXP 91
30522: PUSH
30523: LD_VAR 0 5
30527: ARRAY
30528: PUSH
30529: LD_EXP 92
30533: GREATEREQUAL
30534: IFFALSE 30538
// exit ;
30536: GO 30738
// ComMoveXY ( unit , x , y ) ;
30538: LD_VAR 0 1
30542: PPUSH
30543: LD_VAR 0 2
30547: PPUSH
30548: LD_VAR 0 3
30552: PPUSH
30553: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30557: LD_INT 35
30559: PPUSH
30560: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30564: LD_VAR 0 1
30568: PPUSH
30569: LD_VAR 0 2
30573: PPUSH
30574: LD_VAR 0 3
30578: PPUSH
30579: CALL 68448 0 3
30583: NOT
30584: PUSH
30585: LD_VAR 0 1
30589: PPUSH
30590: CALL_OW 314
30594: AND
30595: IFFALSE 30599
// exit ;
30597: GO 30738
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30599: LD_VAR 0 2
30603: PPUSH
30604: LD_VAR 0 3
30608: PPUSH
30609: CALL_OW 428
30613: PUSH
30614: LD_VAR 0 1
30618: EQUAL
30619: PUSH
30620: LD_VAR 0 1
30624: PPUSH
30625: CALL_OW 314
30629: NOT
30630: AND
30631: IFFALSE 30557
// PlaySoundXY ( x , y , PlantMine ) ;
30633: LD_VAR 0 2
30637: PPUSH
30638: LD_VAR 0 3
30642: PPUSH
30643: LD_STRING PlantMine
30645: PPUSH
30646: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30650: LD_VAR 0 2
30654: PPUSH
30655: LD_VAR 0 3
30659: PPUSH
30660: LD_VAR 0 1
30664: PPUSH
30665: CALL_OW 255
30669: PPUSH
30670: LD_INT 0
30672: PPUSH
30673: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30677: LD_ADDR_EXP 91
30681: PUSH
30682: LD_EXP 91
30686: PPUSH
30687: LD_VAR 0 5
30691: PUSH
30692: LD_EXP 91
30696: PUSH
30697: LD_VAR 0 5
30701: ARRAY
30702: PUSH
30703: LD_INT 1
30705: PLUS
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PPUSH
30711: LD_VAR 0 2
30715: PUSH
30716: LD_VAR 0 3
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PPUSH
30725: CALL 36911 0 3
30729: ST_TO_ADDR
// result := true ;
30730: LD_ADDR_VAR 0 4
30734: PUSH
30735: LD_INT 1
30737: ST_TO_ADDR
// end ;
30738: LD_VAR 0 4
30742: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30743: LD_INT 0
30745: PPUSH
30746: PPUSH
30747: PPUSH
// if not unit in minersList then
30748: LD_VAR 0 1
30752: PUSH
30753: LD_EXP 90
30757: IN
30758: NOT
30759: IFFALSE 30763
// exit ;
30761: GO 31155
// index := GetElementIndex ( minersList , unit ) ;
30763: LD_ADDR_VAR 0 6
30767: PUSH
30768: LD_EXP 90
30772: PPUSH
30773: LD_VAR 0 1
30777: PPUSH
30778: CALL 36696 0 2
30782: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30783: LD_ADDR_VAR 0 5
30787: PUSH
30788: DOUBLE
30789: LD_EXP 91
30793: PUSH
30794: LD_VAR 0 6
30798: ARRAY
30799: INC
30800: ST_TO_ADDR
30801: LD_INT 1
30803: PUSH
30804: FOR_DOWNTO
30805: IFFALSE 30966
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30807: LD_EXP 91
30811: PUSH
30812: LD_VAR 0 6
30816: ARRAY
30817: PUSH
30818: LD_VAR 0 5
30822: ARRAY
30823: PUSH
30824: LD_INT 1
30826: ARRAY
30827: PUSH
30828: LD_VAR 0 2
30832: EQUAL
30833: PUSH
30834: LD_EXP 91
30838: PUSH
30839: LD_VAR 0 6
30843: ARRAY
30844: PUSH
30845: LD_VAR 0 5
30849: ARRAY
30850: PUSH
30851: LD_INT 2
30853: ARRAY
30854: PUSH
30855: LD_VAR 0 3
30859: EQUAL
30860: AND
30861: IFFALSE 30964
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30863: LD_EXP 91
30867: PUSH
30868: LD_VAR 0 6
30872: ARRAY
30873: PUSH
30874: LD_VAR 0 5
30878: ARRAY
30879: PUSH
30880: LD_INT 1
30882: ARRAY
30883: PPUSH
30884: LD_EXP 91
30888: PUSH
30889: LD_VAR 0 6
30893: ARRAY
30894: PUSH
30895: LD_VAR 0 5
30899: ARRAY
30900: PUSH
30901: LD_INT 2
30903: ARRAY
30904: PPUSH
30905: LD_VAR 0 1
30909: PPUSH
30910: CALL_OW 255
30914: PPUSH
30915: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30919: LD_ADDR_EXP 91
30923: PUSH
30924: LD_EXP 91
30928: PPUSH
30929: LD_VAR 0 6
30933: PPUSH
30934: LD_EXP 91
30938: PUSH
30939: LD_VAR 0 6
30943: ARRAY
30944: PPUSH
30945: LD_VAR 0 5
30949: PPUSH
30950: CALL_OW 3
30954: PPUSH
30955: CALL_OW 1
30959: ST_TO_ADDR
// exit ;
30960: POP
30961: POP
30962: GO 31155
// end ; end ;
30964: GO 30804
30966: POP
30967: POP
// for i := minerMinesList [ index ] downto 1 do
30968: LD_ADDR_VAR 0 5
30972: PUSH
30973: DOUBLE
30974: LD_EXP 91
30978: PUSH
30979: LD_VAR 0 6
30983: ARRAY
30984: INC
30985: ST_TO_ADDR
30986: LD_INT 1
30988: PUSH
30989: FOR_DOWNTO
30990: IFFALSE 31153
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30992: LD_EXP 91
30996: PUSH
30997: LD_VAR 0 6
31001: ARRAY
31002: PUSH
31003: LD_VAR 0 5
31007: ARRAY
31008: PUSH
31009: LD_INT 1
31011: ARRAY
31012: PPUSH
31013: LD_EXP 91
31017: PUSH
31018: LD_VAR 0 6
31022: ARRAY
31023: PUSH
31024: LD_VAR 0 5
31028: ARRAY
31029: PUSH
31030: LD_INT 2
31032: ARRAY
31033: PPUSH
31034: LD_VAR 0 2
31038: PPUSH
31039: LD_VAR 0 3
31043: PPUSH
31044: CALL_OW 298
31048: PUSH
31049: LD_INT 6
31051: LESS
31052: IFFALSE 31151
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31054: LD_EXP 91
31058: PUSH
31059: LD_VAR 0 6
31063: ARRAY
31064: PUSH
31065: LD_VAR 0 5
31069: ARRAY
31070: PUSH
31071: LD_INT 1
31073: ARRAY
31074: PPUSH
31075: LD_EXP 91
31079: PUSH
31080: LD_VAR 0 6
31084: ARRAY
31085: PUSH
31086: LD_VAR 0 5
31090: ARRAY
31091: PUSH
31092: LD_INT 2
31094: ARRAY
31095: PPUSH
31096: LD_VAR 0 1
31100: PPUSH
31101: CALL_OW 255
31105: PPUSH
31106: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31110: LD_ADDR_EXP 91
31114: PUSH
31115: LD_EXP 91
31119: PPUSH
31120: LD_VAR 0 6
31124: PPUSH
31125: LD_EXP 91
31129: PUSH
31130: LD_VAR 0 6
31134: ARRAY
31135: PPUSH
31136: LD_VAR 0 5
31140: PPUSH
31141: CALL_OW 3
31145: PPUSH
31146: CALL_OW 1
31150: ST_TO_ADDR
// end ; end ;
31151: GO 30989
31153: POP
31154: POP
// end ;
31155: LD_VAR 0 4
31159: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31160: LD_INT 0
31162: PPUSH
31163: PPUSH
31164: PPUSH
31165: PPUSH
31166: PPUSH
31167: PPUSH
31168: PPUSH
31169: PPUSH
31170: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31171: LD_VAR 0 1
31175: PPUSH
31176: CALL_OW 264
31180: PUSH
31181: LD_INT 81
31183: EQUAL
31184: NOT
31185: PUSH
31186: LD_VAR 0 1
31190: PUSH
31191: LD_EXP 90
31195: IN
31196: NOT
31197: OR
31198: IFFALSE 31202
// exit ;
31200: GO 31524
// index := GetElementIndex ( minersList , unit ) ;
31202: LD_ADDR_VAR 0 6
31206: PUSH
31207: LD_EXP 90
31211: PPUSH
31212: LD_VAR 0 1
31216: PPUSH
31217: CALL 36696 0 2
31221: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31222: LD_ADDR_VAR 0 8
31226: PUSH
31227: LD_EXP 92
31231: PUSH
31232: LD_EXP 91
31236: PUSH
31237: LD_VAR 0 6
31241: ARRAY
31242: MINUS
31243: ST_TO_ADDR
// if not minesFreeAmount then
31244: LD_VAR 0 8
31248: NOT
31249: IFFALSE 31253
// exit ;
31251: GO 31524
// tmp := [ ] ;
31253: LD_ADDR_VAR 0 7
31257: PUSH
31258: EMPTY
31259: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31260: LD_ADDR_VAR 0 5
31264: PUSH
31265: DOUBLE
31266: LD_INT 1
31268: DEC
31269: ST_TO_ADDR
31270: LD_VAR 0 8
31274: PUSH
31275: FOR_TO
31276: IFFALSE 31471
// begin _d := rand ( 0 , 5 ) ;
31278: LD_ADDR_VAR 0 11
31282: PUSH
31283: LD_INT 0
31285: PPUSH
31286: LD_INT 5
31288: PPUSH
31289: CALL_OW 12
31293: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31294: LD_ADDR_VAR 0 12
31298: PUSH
31299: LD_INT 2
31301: PPUSH
31302: LD_INT 6
31304: PPUSH
31305: CALL_OW 12
31309: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31310: LD_ADDR_VAR 0 9
31314: PUSH
31315: LD_VAR 0 2
31319: PPUSH
31320: LD_VAR 0 11
31324: PPUSH
31325: LD_VAR 0 12
31329: PPUSH
31330: CALL_OW 272
31334: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31335: LD_ADDR_VAR 0 10
31339: PUSH
31340: LD_VAR 0 3
31344: PPUSH
31345: LD_VAR 0 11
31349: PPUSH
31350: LD_VAR 0 12
31354: PPUSH
31355: CALL_OW 273
31359: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31360: LD_VAR 0 9
31364: PPUSH
31365: LD_VAR 0 10
31369: PPUSH
31370: CALL_OW 488
31374: PUSH
31375: LD_VAR 0 9
31379: PUSH
31380: LD_VAR 0 10
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_VAR 0 7
31393: IN
31394: NOT
31395: AND
31396: PUSH
31397: LD_VAR 0 9
31401: PPUSH
31402: LD_VAR 0 10
31406: PPUSH
31407: CALL_OW 458
31411: NOT
31412: AND
31413: IFFALSE 31455
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31415: LD_ADDR_VAR 0 7
31419: PUSH
31420: LD_VAR 0 7
31424: PPUSH
31425: LD_VAR 0 7
31429: PUSH
31430: LD_INT 1
31432: PLUS
31433: PPUSH
31434: LD_VAR 0 9
31438: PUSH
31439: LD_VAR 0 10
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PPUSH
31448: CALL_OW 1
31452: ST_TO_ADDR
31453: GO 31469
// i := i - 1 ;
31455: LD_ADDR_VAR 0 5
31459: PUSH
31460: LD_VAR 0 5
31464: PUSH
31465: LD_INT 1
31467: MINUS
31468: ST_TO_ADDR
// end ;
31469: GO 31275
31471: POP
31472: POP
// for i in tmp do
31473: LD_ADDR_VAR 0 5
31477: PUSH
31478: LD_VAR 0 7
31482: PUSH
31483: FOR_IN
31484: IFFALSE 31522
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31486: LD_VAR 0 1
31490: PPUSH
31491: LD_VAR 0 5
31495: PUSH
31496: LD_INT 1
31498: ARRAY
31499: PPUSH
31500: LD_VAR 0 5
31504: PUSH
31505: LD_INT 2
31507: ARRAY
31508: PPUSH
31509: CALL 30468 0 3
31513: NOT
31514: IFFALSE 31520
// exit ;
31516: POP
31517: POP
31518: GO 31524
31520: GO 31483
31522: POP
31523: POP
// end ;
31524: LD_VAR 0 4
31528: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31529: LD_INT 0
31531: PPUSH
31532: PPUSH
31533: PPUSH
31534: PPUSH
31535: PPUSH
31536: PPUSH
31537: PPUSH
// if not GetClass ( unit ) = class_sniper then
31538: LD_VAR 0 1
31542: PPUSH
31543: CALL_OW 257
31547: PUSH
31548: LD_INT 5
31550: EQUAL
31551: NOT
31552: IFFALSE 31556
// exit ;
31554: GO 31944
// dist := 8 ;
31556: LD_ADDR_VAR 0 5
31560: PUSH
31561: LD_INT 8
31563: ST_TO_ADDR
// viewRange := 12 ;
31564: LD_ADDR_VAR 0 7
31568: PUSH
31569: LD_INT 12
31571: ST_TO_ADDR
// side := GetSide ( unit ) ;
31572: LD_ADDR_VAR 0 6
31576: PUSH
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 255
31586: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31587: LD_INT 61
31589: PPUSH
31590: LD_VAR 0 6
31594: PPUSH
31595: CALL_OW 321
31599: PUSH
31600: LD_INT 2
31602: EQUAL
31603: IFFALSE 31613
// viewRange := 16 ;
31605: LD_ADDR_VAR 0 7
31609: PUSH
31610: LD_INT 16
31612: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31613: LD_VAR 0 1
31617: PPUSH
31618: LD_VAR 0 2
31622: PPUSH
31623: LD_VAR 0 3
31627: PPUSH
31628: CALL_OW 297
31632: PUSH
31633: LD_VAR 0 5
31637: GREATER
31638: IFFALSE 31717
// begin ComMoveXY ( unit , x , y ) ;
31640: LD_VAR 0 1
31644: PPUSH
31645: LD_VAR 0 2
31649: PPUSH
31650: LD_VAR 0 3
31654: PPUSH
31655: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31659: LD_INT 35
31661: PPUSH
31662: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31666: LD_VAR 0 1
31670: PPUSH
31671: LD_VAR 0 2
31675: PPUSH
31676: LD_VAR 0 3
31680: PPUSH
31681: CALL 68448 0 3
31685: NOT
31686: IFFALSE 31690
// exit ;
31688: GO 31944
// until GetDistUnitXY ( unit , x , y ) < dist ;
31690: LD_VAR 0 1
31694: PPUSH
31695: LD_VAR 0 2
31699: PPUSH
31700: LD_VAR 0 3
31704: PPUSH
31705: CALL_OW 297
31709: PUSH
31710: LD_VAR 0 5
31714: LESS
31715: IFFALSE 31659
// end ; ComTurnXY ( unit , x , y ) ;
31717: LD_VAR 0 1
31721: PPUSH
31722: LD_VAR 0 2
31726: PPUSH
31727: LD_VAR 0 3
31731: PPUSH
31732: CALL_OW 118
// wait ( 5 ) ;
31736: LD_INT 5
31738: PPUSH
31739: CALL_OW 67
// _d := GetDir ( unit ) ;
31743: LD_ADDR_VAR 0 10
31747: PUSH
31748: LD_VAR 0 1
31752: PPUSH
31753: CALL_OW 254
31757: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31758: LD_ADDR_VAR 0 8
31762: PUSH
31763: LD_VAR 0 1
31767: PPUSH
31768: CALL_OW 250
31772: PPUSH
31773: LD_VAR 0 10
31777: PPUSH
31778: LD_VAR 0 5
31782: PPUSH
31783: CALL_OW 272
31787: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31788: LD_ADDR_VAR 0 9
31792: PUSH
31793: LD_VAR 0 1
31797: PPUSH
31798: CALL_OW 251
31802: PPUSH
31803: LD_VAR 0 10
31807: PPUSH
31808: LD_VAR 0 5
31812: PPUSH
31813: CALL_OW 273
31817: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31818: LD_VAR 0 8
31822: PPUSH
31823: LD_VAR 0 9
31827: PPUSH
31828: CALL_OW 488
31832: NOT
31833: IFFALSE 31837
// exit ;
31835: GO 31944
// ComAnimCustom ( unit , 1 ) ;
31837: LD_VAR 0 1
31841: PPUSH
31842: LD_INT 1
31844: PPUSH
31845: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31849: LD_VAR 0 8
31853: PPUSH
31854: LD_VAR 0 9
31858: PPUSH
31859: LD_VAR 0 6
31863: PPUSH
31864: LD_VAR 0 7
31868: PPUSH
31869: CALL_OW 330
// repeat wait ( 1 ) ;
31873: LD_INT 1
31875: PPUSH
31876: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31880: LD_VAR 0 1
31884: PPUSH
31885: CALL_OW 316
31889: PUSH
31890: LD_VAR 0 1
31894: PPUSH
31895: CALL_OW 314
31899: OR
31900: PUSH
31901: LD_VAR 0 1
31905: PPUSH
31906: CALL_OW 302
31910: NOT
31911: OR
31912: PUSH
31913: LD_VAR 0 1
31917: PPUSH
31918: CALL_OW 301
31922: OR
31923: IFFALSE 31873
// RemoveSeeing ( _x , _y , side ) ;
31925: LD_VAR 0 8
31929: PPUSH
31930: LD_VAR 0 9
31934: PPUSH
31935: LD_VAR 0 6
31939: PPUSH
31940: CALL_OW 331
// end ; end_of_file
31944: LD_VAR 0 4
31948: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31949: LD_INT 0
31951: PPUSH
31952: PPUSH
// if exist_mode then
31953: LD_VAR 0 2
31957: IFFALSE 31982
// unit := CreateCharacter ( prefix & ident ) else
31959: LD_ADDR_VAR 0 5
31963: PUSH
31964: LD_VAR 0 3
31968: PUSH
31969: LD_VAR 0 1
31973: STR
31974: PPUSH
31975: CALL_OW 34
31979: ST_TO_ADDR
31980: GO 31997
// unit := NewCharacter ( ident ) ;
31982: LD_ADDR_VAR 0 5
31986: PUSH
31987: LD_VAR 0 1
31991: PPUSH
31992: CALL_OW 25
31996: ST_TO_ADDR
// result := unit ;
31997: LD_ADDR_VAR 0 4
32001: PUSH
32002: LD_VAR 0 5
32006: ST_TO_ADDR
// end ;
32007: LD_VAR 0 4
32011: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32012: LD_INT 0
32014: PPUSH
32015: PPUSH
// if not side or not nation then
32016: LD_VAR 0 1
32020: NOT
32021: PUSH
32022: LD_VAR 0 2
32026: NOT
32027: OR
32028: IFFALSE 32032
// exit ;
32030: GO 32800
// case nation of nation_american :
32032: LD_VAR 0 2
32036: PUSH
32037: LD_INT 1
32039: DOUBLE
32040: EQUAL
32041: IFTRUE 32045
32043: GO 32259
32045: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32046: LD_ADDR_VAR 0 4
32050: PUSH
32051: LD_INT 35
32053: PUSH
32054: LD_INT 45
32056: PUSH
32057: LD_INT 46
32059: PUSH
32060: LD_INT 47
32062: PUSH
32063: LD_INT 82
32065: PUSH
32066: LD_INT 83
32068: PUSH
32069: LD_INT 84
32071: PUSH
32072: LD_INT 85
32074: PUSH
32075: LD_INT 86
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: LD_INT 6
32086: PUSH
32087: LD_INT 15
32089: PUSH
32090: LD_INT 16
32092: PUSH
32093: LD_INT 7
32095: PUSH
32096: LD_INT 12
32098: PUSH
32099: LD_INT 13
32101: PUSH
32102: LD_INT 10
32104: PUSH
32105: LD_INT 14
32107: PUSH
32108: LD_INT 20
32110: PUSH
32111: LD_INT 21
32113: PUSH
32114: LD_INT 22
32116: PUSH
32117: LD_INT 25
32119: PUSH
32120: LD_INT 32
32122: PUSH
32123: LD_INT 27
32125: PUSH
32126: LD_INT 36
32128: PUSH
32129: LD_INT 69
32131: PUSH
32132: LD_INT 39
32134: PUSH
32135: LD_INT 34
32137: PUSH
32138: LD_INT 40
32140: PUSH
32141: LD_INT 48
32143: PUSH
32144: LD_INT 49
32146: PUSH
32147: LD_INT 50
32149: PUSH
32150: LD_INT 51
32152: PUSH
32153: LD_INT 52
32155: PUSH
32156: LD_INT 53
32158: PUSH
32159: LD_INT 54
32161: PUSH
32162: LD_INT 55
32164: PUSH
32165: LD_INT 56
32167: PUSH
32168: LD_INT 57
32170: PUSH
32171: LD_INT 58
32173: PUSH
32174: LD_INT 59
32176: PUSH
32177: LD_INT 60
32179: PUSH
32180: LD_INT 61
32182: PUSH
32183: LD_INT 62
32185: PUSH
32186: LD_INT 80
32188: PUSH
32189: LD_INT 82
32191: PUSH
32192: LD_INT 83
32194: PUSH
32195: LD_INT 84
32197: PUSH
32198: LD_INT 85
32200: PUSH
32201: LD_INT 86
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: ST_TO_ADDR
32257: GO 32724
32259: LD_INT 2
32261: DOUBLE
32262: EQUAL
32263: IFTRUE 32267
32265: GO 32493
32267: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32268: LD_ADDR_VAR 0 4
32272: PUSH
32273: LD_INT 35
32275: PUSH
32276: LD_INT 45
32278: PUSH
32279: LD_INT 46
32281: PUSH
32282: LD_INT 47
32284: PUSH
32285: LD_INT 82
32287: PUSH
32288: LD_INT 83
32290: PUSH
32291: LD_INT 84
32293: PUSH
32294: LD_INT 85
32296: PUSH
32297: LD_INT 87
32299: PUSH
32300: LD_INT 70
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: LD_INT 11
32308: PUSH
32309: LD_INT 3
32311: PUSH
32312: LD_INT 4
32314: PUSH
32315: LD_INT 5
32317: PUSH
32318: LD_INT 6
32320: PUSH
32321: LD_INT 15
32323: PUSH
32324: LD_INT 18
32326: PUSH
32327: LD_INT 7
32329: PUSH
32330: LD_INT 17
32332: PUSH
32333: LD_INT 8
32335: PUSH
32336: LD_INT 20
32338: PUSH
32339: LD_INT 21
32341: PUSH
32342: LD_INT 22
32344: PUSH
32345: LD_INT 72
32347: PUSH
32348: LD_INT 26
32350: PUSH
32351: LD_INT 69
32353: PUSH
32354: LD_INT 39
32356: PUSH
32357: LD_INT 40
32359: PUSH
32360: LD_INT 41
32362: PUSH
32363: LD_INT 42
32365: PUSH
32366: LD_INT 43
32368: PUSH
32369: LD_INT 48
32371: PUSH
32372: LD_INT 49
32374: PUSH
32375: LD_INT 50
32377: PUSH
32378: LD_INT 51
32380: PUSH
32381: LD_INT 52
32383: PUSH
32384: LD_INT 53
32386: PUSH
32387: LD_INT 54
32389: PUSH
32390: LD_INT 55
32392: PUSH
32393: LD_INT 56
32395: PUSH
32396: LD_INT 60
32398: PUSH
32399: LD_INT 61
32401: PUSH
32402: LD_INT 62
32404: PUSH
32405: LD_INT 66
32407: PUSH
32408: LD_INT 67
32410: PUSH
32411: LD_INT 68
32413: PUSH
32414: LD_INT 81
32416: PUSH
32417: LD_INT 82
32419: PUSH
32420: LD_INT 83
32422: PUSH
32423: LD_INT 84
32425: PUSH
32426: LD_INT 85
32428: PUSH
32429: LD_INT 87
32431: PUSH
32432: LD_INT 88
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: ST_TO_ADDR
32491: GO 32724
32493: LD_INT 3
32495: DOUBLE
32496: EQUAL
32497: IFTRUE 32501
32499: GO 32723
32501: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32502: LD_ADDR_VAR 0 4
32506: PUSH
32507: LD_INT 46
32509: PUSH
32510: LD_INT 47
32512: PUSH
32513: LD_INT 1
32515: PUSH
32516: LD_INT 2
32518: PUSH
32519: LD_INT 82
32521: PUSH
32522: LD_INT 83
32524: PUSH
32525: LD_INT 84
32527: PUSH
32528: LD_INT 85
32530: PUSH
32531: LD_INT 86
32533: PUSH
32534: LD_INT 11
32536: PUSH
32537: LD_INT 9
32539: PUSH
32540: LD_INT 20
32542: PUSH
32543: LD_INT 19
32545: PUSH
32546: LD_INT 21
32548: PUSH
32549: LD_INT 24
32551: PUSH
32552: LD_INT 22
32554: PUSH
32555: LD_INT 25
32557: PUSH
32558: LD_INT 28
32560: PUSH
32561: LD_INT 29
32563: PUSH
32564: LD_INT 30
32566: PUSH
32567: LD_INT 31
32569: PUSH
32570: LD_INT 37
32572: PUSH
32573: LD_INT 38
32575: PUSH
32576: LD_INT 32
32578: PUSH
32579: LD_INT 27
32581: PUSH
32582: LD_INT 33
32584: PUSH
32585: LD_INT 69
32587: PUSH
32588: LD_INT 39
32590: PUSH
32591: LD_INT 34
32593: PUSH
32594: LD_INT 40
32596: PUSH
32597: LD_INT 71
32599: PUSH
32600: LD_INT 23
32602: PUSH
32603: LD_INT 44
32605: PUSH
32606: LD_INT 48
32608: PUSH
32609: LD_INT 49
32611: PUSH
32612: LD_INT 50
32614: PUSH
32615: LD_INT 51
32617: PUSH
32618: LD_INT 52
32620: PUSH
32621: LD_INT 53
32623: PUSH
32624: LD_INT 54
32626: PUSH
32627: LD_INT 55
32629: PUSH
32630: LD_INT 56
32632: PUSH
32633: LD_INT 57
32635: PUSH
32636: LD_INT 58
32638: PUSH
32639: LD_INT 59
32641: PUSH
32642: LD_INT 63
32644: PUSH
32645: LD_INT 64
32647: PUSH
32648: LD_INT 65
32650: PUSH
32651: LD_INT 82
32653: PUSH
32654: LD_INT 83
32656: PUSH
32657: LD_INT 84
32659: PUSH
32660: LD_INT 85
32662: PUSH
32663: LD_INT 86
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: ST_TO_ADDR
32721: GO 32724
32723: POP
// if state > - 1 and state < 3 then
32724: LD_VAR 0 3
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: GREATER
32733: PUSH
32734: LD_VAR 0 3
32738: PUSH
32739: LD_INT 3
32741: LESS
32742: AND
32743: IFFALSE 32800
// for i in result do
32745: LD_ADDR_VAR 0 5
32749: PUSH
32750: LD_VAR 0 4
32754: PUSH
32755: FOR_IN
32756: IFFALSE 32798
// if GetTech ( i , side ) <> state then
32758: LD_VAR 0 5
32762: PPUSH
32763: LD_VAR 0 1
32767: PPUSH
32768: CALL_OW 321
32772: PUSH
32773: LD_VAR 0 3
32777: NONEQUAL
32778: IFFALSE 32796
// result := result diff i ;
32780: LD_ADDR_VAR 0 4
32784: PUSH
32785: LD_VAR 0 4
32789: PUSH
32790: LD_VAR 0 5
32794: DIFF
32795: ST_TO_ADDR
32796: GO 32755
32798: POP
32799: POP
// end ;
32800: LD_VAR 0 4
32804: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32805: LD_INT 0
32807: PPUSH
32808: PPUSH
32809: PPUSH
// result := true ;
32810: LD_ADDR_VAR 0 3
32814: PUSH
32815: LD_INT 1
32817: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32818: LD_ADDR_VAR 0 5
32822: PUSH
32823: LD_VAR 0 2
32827: PPUSH
32828: CALL_OW 480
32832: ST_TO_ADDR
// if not tmp then
32833: LD_VAR 0 5
32837: NOT
32838: IFFALSE 32842
// exit ;
32840: GO 32891
// for i in tmp do
32842: LD_ADDR_VAR 0 4
32846: PUSH
32847: LD_VAR 0 5
32851: PUSH
32852: FOR_IN
32853: IFFALSE 32889
// if GetTech ( i , side ) <> state_researched then
32855: LD_VAR 0 4
32859: PPUSH
32860: LD_VAR 0 1
32864: PPUSH
32865: CALL_OW 321
32869: PUSH
32870: LD_INT 2
32872: NONEQUAL
32873: IFFALSE 32887
// begin result := false ;
32875: LD_ADDR_VAR 0 3
32879: PUSH
32880: LD_INT 0
32882: ST_TO_ADDR
// exit ;
32883: POP
32884: POP
32885: GO 32891
// end ;
32887: GO 32852
32889: POP
32890: POP
// end ;
32891: LD_VAR 0 3
32895: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32896: LD_INT 0
32898: PPUSH
32899: PPUSH
32900: PPUSH
32901: PPUSH
32902: PPUSH
32903: PPUSH
32904: PPUSH
32905: PPUSH
32906: PPUSH
32907: PPUSH
32908: PPUSH
32909: PPUSH
32910: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32911: LD_VAR 0 1
32915: NOT
32916: PUSH
32917: LD_VAR 0 1
32921: PPUSH
32922: CALL_OW 257
32926: PUSH
32927: LD_INT 9
32929: NONEQUAL
32930: OR
32931: IFFALSE 32935
// exit ;
32933: GO 33508
// side := GetSide ( unit ) ;
32935: LD_ADDR_VAR 0 9
32939: PUSH
32940: LD_VAR 0 1
32944: PPUSH
32945: CALL_OW 255
32949: ST_TO_ADDR
// tech_space := tech_spacanom ;
32950: LD_ADDR_VAR 0 12
32954: PUSH
32955: LD_INT 29
32957: ST_TO_ADDR
// tech_time := tech_taurad ;
32958: LD_ADDR_VAR 0 13
32962: PUSH
32963: LD_INT 28
32965: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32966: LD_ADDR_VAR 0 11
32970: PUSH
32971: LD_VAR 0 1
32975: PPUSH
32976: CALL_OW 310
32980: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32981: LD_VAR 0 11
32985: PPUSH
32986: CALL_OW 247
32990: PUSH
32991: LD_INT 2
32993: EQUAL
32994: IFFALSE 32998
// exit ;
32996: GO 33508
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32998: LD_ADDR_VAR 0 8
33002: PUSH
33003: LD_INT 81
33005: PUSH
33006: LD_VAR 0 9
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 3
33017: PUSH
33018: LD_INT 21
33020: PUSH
33021: LD_INT 3
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PPUSH
33036: CALL_OW 69
33040: ST_TO_ADDR
// if not tmp then
33041: LD_VAR 0 8
33045: NOT
33046: IFFALSE 33050
// exit ;
33048: GO 33508
// if in_unit then
33050: LD_VAR 0 11
33054: IFFALSE 33078
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33056: LD_ADDR_VAR 0 10
33060: PUSH
33061: LD_VAR 0 8
33065: PPUSH
33066: LD_VAR 0 11
33070: PPUSH
33071: CALL_OW 74
33075: ST_TO_ADDR
33076: GO 33098
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33078: LD_ADDR_VAR 0 10
33082: PUSH
33083: LD_VAR 0 8
33087: PPUSH
33088: LD_VAR 0 1
33092: PPUSH
33093: CALL_OW 74
33097: ST_TO_ADDR
// if not enemy then
33098: LD_VAR 0 10
33102: NOT
33103: IFFALSE 33107
// exit ;
33105: GO 33508
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33107: LD_VAR 0 11
33111: PUSH
33112: LD_VAR 0 11
33116: PPUSH
33117: LD_VAR 0 10
33121: PPUSH
33122: CALL_OW 296
33126: PUSH
33127: LD_INT 13
33129: GREATER
33130: AND
33131: PUSH
33132: LD_VAR 0 1
33136: PPUSH
33137: LD_VAR 0 10
33141: PPUSH
33142: CALL_OW 296
33146: PUSH
33147: LD_INT 12
33149: GREATER
33150: OR
33151: IFFALSE 33155
// exit ;
33153: GO 33508
// missile := [ 1 ] ;
33155: LD_ADDR_VAR 0 14
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: EMPTY
33164: LIST
33165: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33166: LD_VAR 0 9
33170: PPUSH
33171: LD_VAR 0 12
33175: PPUSH
33176: CALL_OW 325
33180: IFFALSE 33209
// missile := Replace ( missile , missile + 1 , 2 ) ;
33182: LD_ADDR_VAR 0 14
33186: PUSH
33187: LD_VAR 0 14
33191: PPUSH
33192: LD_VAR 0 14
33196: PUSH
33197: LD_INT 1
33199: PLUS
33200: PPUSH
33201: LD_INT 2
33203: PPUSH
33204: CALL_OW 1
33208: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33209: LD_VAR 0 9
33213: PPUSH
33214: LD_VAR 0 13
33218: PPUSH
33219: CALL_OW 325
33223: PUSH
33224: LD_VAR 0 10
33228: PPUSH
33229: CALL_OW 255
33233: PPUSH
33234: LD_VAR 0 13
33238: PPUSH
33239: CALL_OW 325
33243: NOT
33244: AND
33245: IFFALSE 33274
// missile := Replace ( missile , missile + 1 , 3 ) ;
33247: LD_ADDR_VAR 0 14
33251: PUSH
33252: LD_VAR 0 14
33256: PPUSH
33257: LD_VAR 0 14
33261: PUSH
33262: LD_INT 1
33264: PLUS
33265: PPUSH
33266: LD_INT 3
33268: PPUSH
33269: CALL_OW 1
33273: ST_TO_ADDR
// if missile < 2 then
33274: LD_VAR 0 14
33278: PUSH
33279: LD_INT 2
33281: LESS
33282: IFFALSE 33286
// exit ;
33284: GO 33508
// x := GetX ( enemy ) ;
33286: LD_ADDR_VAR 0 4
33290: PUSH
33291: LD_VAR 0 10
33295: PPUSH
33296: CALL_OW 250
33300: ST_TO_ADDR
// y := GetY ( enemy ) ;
33301: LD_ADDR_VAR 0 5
33305: PUSH
33306: LD_VAR 0 10
33310: PPUSH
33311: CALL_OW 251
33315: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33316: LD_ADDR_VAR 0 6
33320: PUSH
33321: LD_VAR 0 4
33325: PUSH
33326: LD_INT 1
33328: NEG
33329: PPUSH
33330: LD_INT 1
33332: PPUSH
33333: CALL_OW 12
33337: PLUS
33338: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33339: LD_ADDR_VAR 0 7
33343: PUSH
33344: LD_VAR 0 5
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PPUSH
33353: LD_INT 1
33355: PPUSH
33356: CALL_OW 12
33360: PLUS
33361: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33362: LD_VAR 0 6
33366: PPUSH
33367: LD_VAR 0 7
33371: PPUSH
33372: CALL_OW 488
33376: NOT
33377: IFFALSE 33399
// begin _x := x ;
33379: LD_ADDR_VAR 0 6
33383: PUSH
33384: LD_VAR 0 4
33388: ST_TO_ADDR
// _y := y ;
33389: LD_ADDR_VAR 0 7
33393: PUSH
33394: LD_VAR 0 5
33398: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33399: LD_ADDR_VAR 0 3
33403: PUSH
33404: LD_INT 1
33406: PPUSH
33407: LD_VAR 0 14
33411: PPUSH
33412: CALL_OW 12
33416: ST_TO_ADDR
// case i of 1 :
33417: LD_VAR 0 3
33421: PUSH
33422: LD_INT 1
33424: DOUBLE
33425: EQUAL
33426: IFTRUE 33430
33428: GO 33447
33430: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33431: LD_VAR 0 1
33435: PPUSH
33436: LD_VAR 0 10
33440: PPUSH
33441: CALL_OW 115
33445: GO 33508
33447: LD_INT 2
33449: DOUBLE
33450: EQUAL
33451: IFTRUE 33455
33453: GO 33477
33455: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33456: LD_VAR 0 1
33460: PPUSH
33461: LD_VAR 0 6
33465: PPUSH
33466: LD_VAR 0 7
33470: PPUSH
33471: CALL_OW 153
33475: GO 33508
33477: LD_INT 3
33479: DOUBLE
33480: EQUAL
33481: IFTRUE 33485
33483: GO 33507
33485: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33486: LD_VAR 0 1
33490: PPUSH
33491: LD_VAR 0 6
33495: PPUSH
33496: LD_VAR 0 7
33500: PPUSH
33501: CALL_OW 154
33505: GO 33508
33507: POP
// end ;
33508: LD_VAR 0 2
33512: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33513: LD_INT 0
33515: PPUSH
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
33520: PPUSH
// if not unit or not building then
33521: LD_VAR 0 1
33525: NOT
33526: PUSH
33527: LD_VAR 0 2
33531: NOT
33532: OR
33533: IFFALSE 33537
// exit ;
33535: GO 33695
// x := GetX ( building ) ;
33537: LD_ADDR_VAR 0 5
33541: PUSH
33542: LD_VAR 0 2
33546: PPUSH
33547: CALL_OW 250
33551: ST_TO_ADDR
// y := GetY ( building ) ;
33552: LD_ADDR_VAR 0 6
33556: PUSH
33557: LD_VAR 0 2
33561: PPUSH
33562: CALL_OW 251
33566: ST_TO_ADDR
// for i = 0 to 5 do
33567: LD_ADDR_VAR 0 4
33571: PUSH
33572: DOUBLE
33573: LD_INT 0
33575: DEC
33576: ST_TO_ADDR
33577: LD_INT 5
33579: PUSH
33580: FOR_TO
33581: IFFALSE 33693
// begin _x := ShiftX ( x , i , 3 ) ;
33583: LD_ADDR_VAR 0 7
33587: PUSH
33588: LD_VAR 0 5
33592: PPUSH
33593: LD_VAR 0 4
33597: PPUSH
33598: LD_INT 3
33600: PPUSH
33601: CALL_OW 272
33605: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33606: LD_ADDR_VAR 0 8
33610: PUSH
33611: LD_VAR 0 6
33615: PPUSH
33616: LD_VAR 0 4
33620: PPUSH
33621: LD_INT 3
33623: PPUSH
33624: CALL_OW 273
33628: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33629: LD_VAR 0 7
33633: PPUSH
33634: LD_VAR 0 8
33638: PPUSH
33639: CALL_OW 488
33643: NOT
33644: IFFALSE 33648
// continue ;
33646: GO 33580
// if HexInfo ( _x , _y ) = 0 then
33648: LD_VAR 0 7
33652: PPUSH
33653: LD_VAR 0 8
33657: PPUSH
33658: CALL_OW 428
33662: PUSH
33663: LD_INT 0
33665: EQUAL
33666: IFFALSE 33691
// begin ComMoveXY ( unit , _x , _y ) ;
33668: LD_VAR 0 1
33672: PPUSH
33673: LD_VAR 0 7
33677: PPUSH
33678: LD_VAR 0 8
33682: PPUSH
33683: CALL_OW 111
// exit ;
33687: POP
33688: POP
33689: GO 33695
// end ; end ;
33691: GO 33580
33693: POP
33694: POP
// end ;
33695: LD_VAR 0 3
33699: RET
// export function ScanBase ( side , base_area ) ; begin
33700: LD_INT 0
33702: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33703: LD_ADDR_VAR 0 3
33707: PUSH
33708: LD_VAR 0 2
33712: PPUSH
33713: LD_INT 81
33715: PUSH
33716: LD_VAR 0 1
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PPUSH
33725: CALL_OW 70
33729: ST_TO_ADDR
// end ;
33730: LD_VAR 0 3
33734: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33735: LD_INT 0
33737: PPUSH
33738: PPUSH
33739: PPUSH
33740: PPUSH
// result := false ;
33741: LD_ADDR_VAR 0 2
33745: PUSH
33746: LD_INT 0
33748: ST_TO_ADDR
// side := GetSide ( unit ) ;
33749: LD_ADDR_VAR 0 3
33753: PUSH
33754: LD_VAR 0 1
33758: PPUSH
33759: CALL_OW 255
33763: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33764: LD_ADDR_VAR 0 4
33768: PUSH
33769: LD_VAR 0 1
33773: PPUSH
33774: CALL_OW 248
33778: ST_TO_ADDR
// case nat of 1 :
33779: LD_VAR 0 4
33783: PUSH
33784: LD_INT 1
33786: DOUBLE
33787: EQUAL
33788: IFTRUE 33792
33790: GO 33803
33792: POP
// tech := tech_lassight ; 2 :
33793: LD_ADDR_VAR 0 5
33797: PUSH
33798: LD_INT 12
33800: ST_TO_ADDR
33801: GO 33842
33803: LD_INT 2
33805: DOUBLE
33806: EQUAL
33807: IFTRUE 33811
33809: GO 33822
33811: POP
// tech := tech_mortar ; 3 :
33812: LD_ADDR_VAR 0 5
33816: PUSH
33817: LD_INT 41
33819: ST_TO_ADDR
33820: GO 33842
33822: LD_INT 3
33824: DOUBLE
33825: EQUAL
33826: IFTRUE 33830
33828: GO 33841
33830: POP
// tech := tech_bazooka ; end ;
33831: LD_ADDR_VAR 0 5
33835: PUSH
33836: LD_INT 44
33838: ST_TO_ADDR
33839: GO 33842
33841: POP
// if Researched ( side , tech ) then
33842: LD_VAR 0 3
33846: PPUSH
33847: LD_VAR 0 5
33851: PPUSH
33852: CALL_OW 325
33856: IFFALSE 33883
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33858: LD_ADDR_VAR 0 2
33862: PUSH
33863: LD_INT 5
33865: PUSH
33866: LD_INT 8
33868: PUSH
33869: LD_INT 9
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: LIST
33876: PUSH
33877: LD_VAR 0 4
33881: ARRAY
33882: ST_TO_ADDR
// end ;
33883: LD_VAR 0 2
33887: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33888: LD_INT 0
33890: PPUSH
33891: PPUSH
33892: PPUSH
// if not mines then
33893: LD_VAR 0 2
33897: NOT
33898: IFFALSE 33902
// exit ;
33900: GO 34046
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33902: LD_ADDR_VAR 0 5
33906: PUSH
33907: LD_INT 81
33909: PUSH
33910: LD_VAR 0 1
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 3
33921: PUSH
33922: LD_INT 21
33924: PUSH
33925: LD_INT 3
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PPUSH
33940: CALL_OW 69
33944: ST_TO_ADDR
// for i in mines do
33945: LD_ADDR_VAR 0 4
33949: PUSH
33950: LD_VAR 0 2
33954: PUSH
33955: FOR_IN
33956: IFFALSE 34044
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33958: LD_VAR 0 4
33962: PUSH
33963: LD_INT 1
33965: ARRAY
33966: PPUSH
33967: LD_VAR 0 4
33971: PUSH
33972: LD_INT 2
33974: ARRAY
33975: PPUSH
33976: CALL_OW 458
33980: NOT
33981: IFFALSE 33985
// continue ;
33983: GO 33955
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33985: LD_VAR 0 4
33989: PUSH
33990: LD_INT 1
33992: ARRAY
33993: PPUSH
33994: LD_VAR 0 4
33998: PUSH
33999: LD_INT 2
34001: ARRAY
34002: PPUSH
34003: CALL_OW 428
34007: PUSH
34008: LD_VAR 0 5
34012: IN
34013: IFFALSE 34042
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34015: LD_VAR 0 4
34019: PUSH
34020: LD_INT 1
34022: ARRAY
34023: PPUSH
34024: LD_VAR 0 4
34028: PUSH
34029: LD_INT 2
34031: ARRAY
34032: PPUSH
34033: LD_VAR 0 1
34037: PPUSH
34038: CALL_OW 456
// end ;
34042: GO 33955
34044: POP
34045: POP
// end ;
34046: LD_VAR 0 3
34050: RET
// export function Count ( array ) ; begin
34051: LD_INT 0
34053: PPUSH
// result := array + 0 ;
34054: LD_ADDR_VAR 0 2
34058: PUSH
34059: LD_VAR 0 1
34063: PUSH
34064: LD_INT 0
34066: PLUS
34067: ST_TO_ADDR
// end ;
34068: LD_VAR 0 2
34072: RET
// export function IsEmpty ( building ) ; begin
34073: LD_INT 0
34075: PPUSH
// if not building then
34076: LD_VAR 0 1
34080: NOT
34081: IFFALSE 34085
// exit ;
34083: GO 34128
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34085: LD_ADDR_VAR 0 2
34089: PUSH
34090: LD_VAR 0 1
34094: PUSH
34095: LD_INT 22
34097: PUSH
34098: LD_VAR 0 1
34102: PPUSH
34103: CALL_OW 255
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 58
34114: PUSH
34115: EMPTY
34116: LIST
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PPUSH
34122: CALL_OW 69
34126: IN
34127: ST_TO_ADDR
// end ;
34128: LD_VAR 0 2
34132: RET
// export function IsNotFull ( building ) ; var places ; begin
34133: LD_INT 0
34135: PPUSH
34136: PPUSH
// if not building then
34137: LD_VAR 0 1
34141: NOT
34142: IFFALSE 34146
// exit ;
34144: GO 34174
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34146: LD_ADDR_VAR 0 2
34150: PUSH
34151: LD_VAR 0 1
34155: PPUSH
34156: LD_INT 3
34158: PUSH
34159: LD_INT 62
34161: PUSH
34162: EMPTY
34163: LIST
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PPUSH
34169: CALL_OW 72
34173: ST_TO_ADDR
// end ;
34174: LD_VAR 0 2
34178: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34179: LD_INT 0
34181: PPUSH
34182: PPUSH
34183: PPUSH
34184: PPUSH
// tmp := [ ] ;
34185: LD_ADDR_VAR 0 3
34189: PUSH
34190: EMPTY
34191: ST_TO_ADDR
// list := [ ] ;
34192: LD_ADDR_VAR 0 5
34196: PUSH
34197: EMPTY
34198: ST_TO_ADDR
// for i = 16 to 25 do
34199: LD_ADDR_VAR 0 4
34203: PUSH
34204: DOUBLE
34205: LD_INT 16
34207: DEC
34208: ST_TO_ADDR
34209: LD_INT 25
34211: PUSH
34212: FOR_TO
34213: IFFALSE 34286
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34215: LD_ADDR_VAR 0 3
34219: PUSH
34220: LD_VAR 0 3
34224: PUSH
34225: LD_INT 22
34227: PUSH
34228: LD_VAR 0 1
34232: PPUSH
34233: CALL_OW 255
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 91
34244: PUSH
34245: LD_VAR 0 1
34249: PUSH
34250: LD_INT 6
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 30
34260: PUSH
34261: LD_VAR 0 4
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: LIST
34274: PUSH
34275: EMPTY
34276: LIST
34277: PPUSH
34278: CALL_OW 69
34282: ADD
34283: ST_TO_ADDR
34284: GO 34212
34286: POP
34287: POP
// for i = 1 to tmp do
34288: LD_ADDR_VAR 0 4
34292: PUSH
34293: DOUBLE
34294: LD_INT 1
34296: DEC
34297: ST_TO_ADDR
34298: LD_VAR 0 3
34302: PUSH
34303: FOR_TO
34304: IFFALSE 34392
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34306: LD_ADDR_VAR 0 5
34310: PUSH
34311: LD_VAR 0 5
34315: PUSH
34316: LD_VAR 0 3
34320: PUSH
34321: LD_VAR 0 4
34325: ARRAY
34326: PPUSH
34327: CALL_OW 266
34331: PUSH
34332: LD_VAR 0 3
34336: PUSH
34337: LD_VAR 0 4
34341: ARRAY
34342: PPUSH
34343: CALL_OW 250
34347: PUSH
34348: LD_VAR 0 3
34352: PUSH
34353: LD_VAR 0 4
34357: ARRAY
34358: PPUSH
34359: CALL_OW 251
34363: PUSH
34364: LD_VAR 0 3
34368: PUSH
34369: LD_VAR 0 4
34373: ARRAY
34374: PPUSH
34375: CALL_OW 254
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: PUSH
34386: EMPTY
34387: LIST
34388: ADD
34389: ST_TO_ADDR
34390: GO 34303
34392: POP
34393: POP
// result := list ;
34394: LD_ADDR_VAR 0 2
34398: PUSH
34399: LD_VAR 0 5
34403: ST_TO_ADDR
// end ;
34404: LD_VAR 0 2
34408: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34409: LD_INT 0
34411: PPUSH
34412: PPUSH
34413: PPUSH
34414: PPUSH
34415: PPUSH
34416: PPUSH
34417: PPUSH
// if not factory then
34418: LD_VAR 0 1
34422: NOT
34423: IFFALSE 34427
// exit ;
34425: GO 35020
// if control = control_apeman then
34427: LD_VAR 0 4
34431: PUSH
34432: LD_INT 5
34434: EQUAL
34435: IFFALSE 34544
// begin tmp := UnitsInside ( factory ) ;
34437: LD_ADDR_VAR 0 8
34441: PUSH
34442: LD_VAR 0 1
34446: PPUSH
34447: CALL_OW 313
34451: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34452: LD_VAR 0 8
34456: PPUSH
34457: LD_INT 25
34459: PUSH
34460: LD_INT 12
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PPUSH
34467: CALL_OW 72
34471: NOT
34472: IFFALSE 34482
// control := control_manual ;
34474: LD_ADDR_VAR 0 4
34478: PUSH
34479: LD_INT 1
34481: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34482: LD_ADDR_VAR 0 8
34486: PUSH
34487: LD_VAR 0 1
34491: PPUSH
34492: CALL 34179 0 1
34496: ST_TO_ADDR
// if tmp then
34497: LD_VAR 0 8
34501: IFFALSE 34544
// begin for i in tmp do
34503: LD_ADDR_VAR 0 7
34507: PUSH
34508: LD_VAR 0 8
34512: PUSH
34513: FOR_IN
34514: IFFALSE 34542
// if i [ 1 ] = b_ext_radio then
34516: LD_VAR 0 7
34520: PUSH
34521: LD_INT 1
34523: ARRAY
34524: PUSH
34525: LD_INT 22
34527: EQUAL
34528: IFFALSE 34540
// begin control := control_remote ;
34530: LD_ADDR_VAR 0 4
34534: PUSH
34535: LD_INT 2
34537: ST_TO_ADDR
// break ;
34538: GO 34542
// end ;
34540: GO 34513
34542: POP
34543: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34544: LD_VAR 0 1
34548: PPUSH
34549: LD_VAR 0 2
34553: PPUSH
34554: LD_VAR 0 3
34558: PPUSH
34559: LD_VAR 0 4
34563: PPUSH
34564: LD_VAR 0 5
34568: PPUSH
34569: CALL_OW 448
34573: IFFALSE 34608
// begin result := [ chassis , engine , control , weapon ] ;
34575: LD_ADDR_VAR 0 6
34579: PUSH
34580: LD_VAR 0 2
34584: PUSH
34585: LD_VAR 0 3
34589: PUSH
34590: LD_VAR 0 4
34594: PUSH
34595: LD_VAR 0 5
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: ST_TO_ADDR
// exit ;
34606: GO 35020
// end ; _chassis := AvailableChassisList ( factory ) ;
34608: LD_ADDR_VAR 0 9
34612: PUSH
34613: LD_VAR 0 1
34617: PPUSH
34618: CALL_OW 475
34622: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34623: LD_ADDR_VAR 0 11
34627: PUSH
34628: LD_VAR 0 1
34632: PPUSH
34633: CALL_OW 476
34637: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34638: LD_ADDR_VAR 0 12
34642: PUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL_OW 477
34652: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34653: LD_ADDR_VAR 0 10
34657: PUSH
34658: LD_VAR 0 1
34662: PPUSH
34663: CALL_OW 478
34667: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34668: LD_VAR 0 9
34672: NOT
34673: PUSH
34674: LD_VAR 0 11
34678: NOT
34679: OR
34680: PUSH
34681: LD_VAR 0 12
34685: NOT
34686: OR
34687: PUSH
34688: LD_VAR 0 10
34692: NOT
34693: OR
34694: IFFALSE 34729
// begin result := [ chassis , engine , control , weapon ] ;
34696: LD_ADDR_VAR 0 6
34700: PUSH
34701: LD_VAR 0 2
34705: PUSH
34706: LD_VAR 0 3
34710: PUSH
34711: LD_VAR 0 4
34715: PUSH
34716: LD_VAR 0 5
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: ST_TO_ADDR
// exit ;
34727: GO 35020
// end ; if not chassis in _chassis then
34729: LD_VAR 0 2
34733: PUSH
34734: LD_VAR 0 9
34738: IN
34739: NOT
34740: IFFALSE 34766
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34742: LD_ADDR_VAR 0 2
34746: PUSH
34747: LD_VAR 0 9
34751: PUSH
34752: LD_INT 1
34754: PPUSH
34755: LD_VAR 0 9
34759: PPUSH
34760: CALL_OW 12
34764: ARRAY
34765: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34766: LD_VAR 0 2
34770: PPUSH
34771: LD_VAR 0 3
34775: PPUSH
34776: CALL 35025 0 2
34780: NOT
34781: IFFALSE 34840
// repeat engine := _engine [ 1 ] ;
34783: LD_ADDR_VAR 0 3
34787: PUSH
34788: LD_VAR 0 11
34792: PUSH
34793: LD_INT 1
34795: ARRAY
34796: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34797: LD_ADDR_VAR 0 11
34801: PUSH
34802: LD_VAR 0 11
34806: PPUSH
34807: LD_INT 1
34809: PPUSH
34810: CALL_OW 3
34814: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34815: LD_VAR 0 2
34819: PPUSH
34820: LD_VAR 0 3
34824: PPUSH
34825: CALL 35025 0 2
34829: PUSH
34830: LD_VAR 0 11
34834: PUSH
34835: EMPTY
34836: EQUAL
34837: OR
34838: IFFALSE 34783
// if not control in _control then
34840: LD_VAR 0 4
34844: PUSH
34845: LD_VAR 0 12
34849: IN
34850: NOT
34851: IFFALSE 34877
// control := _control [ rand ( 1 , _control ) ] ;
34853: LD_ADDR_VAR 0 4
34857: PUSH
34858: LD_VAR 0 12
34862: PUSH
34863: LD_INT 1
34865: PPUSH
34866: LD_VAR 0 12
34870: PPUSH
34871: CALL_OW 12
34875: ARRAY
34876: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34877: LD_VAR 0 2
34881: PPUSH
34882: LD_VAR 0 5
34886: PPUSH
34887: CALL 35245 0 2
34891: NOT
34892: IFFALSE 34951
// repeat weapon := _weapon [ 1 ] ;
34894: LD_ADDR_VAR 0 5
34898: PUSH
34899: LD_VAR 0 10
34903: PUSH
34904: LD_INT 1
34906: ARRAY
34907: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34908: LD_ADDR_VAR 0 10
34912: PUSH
34913: LD_VAR 0 10
34917: PPUSH
34918: LD_INT 1
34920: PPUSH
34921: CALL_OW 3
34925: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34926: LD_VAR 0 2
34930: PPUSH
34931: LD_VAR 0 5
34935: PPUSH
34936: CALL 35245 0 2
34940: PUSH
34941: LD_VAR 0 10
34945: PUSH
34946: EMPTY
34947: EQUAL
34948: OR
34949: IFFALSE 34894
// result := [ ] ;
34951: LD_ADDR_VAR 0 6
34955: PUSH
34956: EMPTY
34957: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34958: LD_VAR 0 1
34962: PPUSH
34963: LD_VAR 0 2
34967: PPUSH
34968: LD_VAR 0 3
34972: PPUSH
34973: LD_VAR 0 4
34977: PPUSH
34978: LD_VAR 0 5
34982: PPUSH
34983: CALL_OW 448
34987: IFFALSE 35020
// result := [ chassis , engine , control , weapon ] ;
34989: LD_ADDR_VAR 0 6
34993: PUSH
34994: LD_VAR 0 2
34998: PUSH
34999: LD_VAR 0 3
35003: PUSH
35004: LD_VAR 0 4
35008: PUSH
35009: LD_VAR 0 5
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: ST_TO_ADDR
// end ;
35020: LD_VAR 0 6
35024: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35025: LD_INT 0
35027: PPUSH
// if not chassis or not engine then
35028: LD_VAR 0 1
35032: NOT
35033: PUSH
35034: LD_VAR 0 2
35038: NOT
35039: OR
35040: IFFALSE 35044
// exit ;
35042: GO 35240
// case engine of engine_solar :
35044: LD_VAR 0 2
35048: PUSH
35049: LD_INT 2
35051: DOUBLE
35052: EQUAL
35053: IFTRUE 35057
35055: GO 35095
35057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35058: LD_ADDR_VAR 0 3
35062: PUSH
35063: LD_INT 11
35065: PUSH
35066: LD_INT 12
35068: PUSH
35069: LD_INT 13
35071: PUSH
35072: LD_INT 14
35074: PUSH
35075: LD_INT 1
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: LD_INT 3
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: ST_TO_ADDR
35093: GO 35224
35095: LD_INT 1
35097: DOUBLE
35098: EQUAL
35099: IFTRUE 35103
35101: GO 35165
35103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35104: LD_ADDR_VAR 0 3
35108: PUSH
35109: LD_INT 11
35111: PUSH
35112: LD_INT 12
35114: PUSH
35115: LD_INT 13
35117: PUSH
35118: LD_INT 14
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: LD_INT 3
35129: PUSH
35130: LD_INT 4
35132: PUSH
35133: LD_INT 5
35135: PUSH
35136: LD_INT 21
35138: PUSH
35139: LD_INT 23
35141: PUSH
35142: LD_INT 22
35144: PUSH
35145: LD_INT 24
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: ST_TO_ADDR
35163: GO 35224
35165: LD_INT 3
35167: DOUBLE
35168: EQUAL
35169: IFTRUE 35173
35171: GO 35223
35173: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35174: LD_ADDR_VAR 0 3
35178: PUSH
35179: LD_INT 13
35181: PUSH
35182: LD_INT 14
35184: PUSH
35185: LD_INT 2
35187: PUSH
35188: LD_INT 3
35190: PUSH
35191: LD_INT 4
35193: PUSH
35194: LD_INT 5
35196: PUSH
35197: LD_INT 21
35199: PUSH
35200: LD_INT 22
35202: PUSH
35203: LD_INT 23
35205: PUSH
35206: LD_INT 24
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: ST_TO_ADDR
35221: GO 35224
35223: POP
// result := ( chassis in result ) ;
35224: LD_ADDR_VAR 0 3
35228: PUSH
35229: LD_VAR 0 1
35233: PUSH
35234: LD_VAR 0 3
35238: IN
35239: ST_TO_ADDR
// end ;
35240: LD_VAR 0 3
35244: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35245: LD_INT 0
35247: PPUSH
// if not chassis or not weapon then
35248: LD_VAR 0 1
35252: NOT
35253: PUSH
35254: LD_VAR 0 2
35258: NOT
35259: OR
35260: IFFALSE 35264
// exit ;
35262: GO 36324
// case weapon of us_machine_gun :
35264: LD_VAR 0 2
35268: PUSH
35269: LD_INT 2
35271: DOUBLE
35272: EQUAL
35273: IFTRUE 35277
35275: GO 35307
35277: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35278: LD_ADDR_VAR 0 3
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: LD_INT 2
35288: PUSH
35289: LD_INT 3
35291: PUSH
35292: LD_INT 4
35294: PUSH
35295: LD_INT 5
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: ST_TO_ADDR
35305: GO 36308
35307: LD_INT 3
35309: DOUBLE
35310: EQUAL
35311: IFTRUE 35315
35313: GO 35345
35315: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35316: LD_ADDR_VAR 0 3
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: LD_INT 2
35326: PUSH
35327: LD_INT 3
35329: PUSH
35330: LD_INT 4
35332: PUSH
35333: LD_INT 5
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: ST_TO_ADDR
35343: GO 36308
35345: LD_INT 11
35347: DOUBLE
35348: EQUAL
35349: IFTRUE 35353
35351: GO 35383
35353: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35354: LD_ADDR_VAR 0 3
35358: PUSH
35359: LD_INT 1
35361: PUSH
35362: LD_INT 2
35364: PUSH
35365: LD_INT 3
35367: PUSH
35368: LD_INT 4
35370: PUSH
35371: LD_INT 5
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: ST_TO_ADDR
35381: GO 36308
35383: LD_INT 4
35385: DOUBLE
35386: EQUAL
35387: IFTRUE 35391
35389: GO 35417
35391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35392: LD_ADDR_VAR 0 3
35396: PUSH
35397: LD_INT 2
35399: PUSH
35400: LD_INT 3
35402: PUSH
35403: LD_INT 4
35405: PUSH
35406: LD_INT 5
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: ST_TO_ADDR
35415: GO 36308
35417: LD_INT 5
35419: DOUBLE
35420: EQUAL
35421: IFTRUE 35425
35423: GO 35451
35425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35426: LD_ADDR_VAR 0 3
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: LD_INT 3
35436: PUSH
35437: LD_INT 4
35439: PUSH
35440: LD_INT 5
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: ST_TO_ADDR
35449: GO 36308
35451: LD_INT 9
35453: DOUBLE
35454: EQUAL
35455: IFTRUE 35459
35457: GO 35485
35459: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35460: LD_ADDR_VAR 0 3
35464: PUSH
35465: LD_INT 2
35467: PUSH
35468: LD_INT 3
35470: PUSH
35471: LD_INT 4
35473: PUSH
35474: LD_INT 5
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: ST_TO_ADDR
35483: GO 36308
35485: LD_INT 7
35487: DOUBLE
35488: EQUAL
35489: IFTRUE 35493
35491: GO 35519
35493: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35494: LD_ADDR_VAR 0 3
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: LD_INT 3
35504: PUSH
35505: LD_INT 4
35507: PUSH
35508: LD_INT 5
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: ST_TO_ADDR
35517: GO 36308
35519: LD_INT 12
35521: DOUBLE
35522: EQUAL
35523: IFTRUE 35527
35525: GO 35553
35527: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35528: LD_ADDR_VAR 0 3
35532: PUSH
35533: LD_INT 2
35535: PUSH
35536: LD_INT 3
35538: PUSH
35539: LD_INT 4
35541: PUSH
35542: LD_INT 5
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: ST_TO_ADDR
35551: GO 36308
35553: LD_INT 13
35555: DOUBLE
35556: EQUAL
35557: IFTRUE 35561
35559: GO 35587
35561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35562: LD_ADDR_VAR 0 3
35566: PUSH
35567: LD_INT 2
35569: PUSH
35570: LD_INT 3
35572: PUSH
35573: LD_INT 4
35575: PUSH
35576: LD_INT 5
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: ST_TO_ADDR
35585: GO 36308
35587: LD_INT 14
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35595
35593: GO 35613
35595: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35596: LD_ADDR_VAR 0 3
35600: PUSH
35601: LD_INT 4
35603: PUSH
35604: LD_INT 5
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: ST_TO_ADDR
35611: GO 36308
35613: LD_INT 6
35615: DOUBLE
35616: EQUAL
35617: IFTRUE 35621
35619: GO 35639
35621: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35622: LD_ADDR_VAR 0 3
35626: PUSH
35627: LD_INT 4
35629: PUSH
35630: LD_INT 5
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: ST_TO_ADDR
35637: GO 36308
35639: LD_INT 10
35641: DOUBLE
35642: EQUAL
35643: IFTRUE 35647
35645: GO 35665
35647: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35648: LD_ADDR_VAR 0 3
35652: PUSH
35653: LD_INT 4
35655: PUSH
35656: LD_INT 5
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: ST_TO_ADDR
35663: GO 36308
35665: LD_INT 22
35667: DOUBLE
35668: EQUAL
35669: IFTRUE 35673
35671: GO 35699
35673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35674: LD_ADDR_VAR 0 3
35678: PUSH
35679: LD_INT 11
35681: PUSH
35682: LD_INT 12
35684: PUSH
35685: LD_INT 13
35687: PUSH
35688: LD_INT 14
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: ST_TO_ADDR
35697: GO 36308
35699: LD_INT 23
35701: DOUBLE
35702: EQUAL
35703: IFTRUE 35707
35705: GO 35733
35707: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35708: LD_ADDR_VAR 0 3
35712: PUSH
35713: LD_INT 11
35715: PUSH
35716: LD_INT 12
35718: PUSH
35719: LD_INT 13
35721: PUSH
35722: LD_INT 14
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: ST_TO_ADDR
35731: GO 36308
35733: LD_INT 24
35735: DOUBLE
35736: EQUAL
35737: IFTRUE 35741
35739: GO 35767
35741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35742: LD_ADDR_VAR 0 3
35746: PUSH
35747: LD_INT 11
35749: PUSH
35750: LD_INT 12
35752: PUSH
35753: LD_INT 13
35755: PUSH
35756: LD_INT 14
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: ST_TO_ADDR
35765: GO 36308
35767: LD_INT 30
35769: DOUBLE
35770: EQUAL
35771: IFTRUE 35775
35773: GO 35801
35775: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35776: LD_ADDR_VAR 0 3
35780: PUSH
35781: LD_INT 11
35783: PUSH
35784: LD_INT 12
35786: PUSH
35787: LD_INT 13
35789: PUSH
35790: LD_INT 14
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: ST_TO_ADDR
35799: GO 36308
35801: LD_INT 25
35803: DOUBLE
35804: EQUAL
35805: IFTRUE 35809
35807: GO 35827
35809: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35810: LD_ADDR_VAR 0 3
35814: PUSH
35815: LD_INT 13
35817: PUSH
35818: LD_INT 14
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: ST_TO_ADDR
35825: GO 36308
35827: LD_INT 27
35829: DOUBLE
35830: EQUAL
35831: IFTRUE 35835
35833: GO 35853
35835: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35836: LD_ADDR_VAR 0 3
35840: PUSH
35841: LD_INT 13
35843: PUSH
35844: LD_INT 14
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: ST_TO_ADDR
35851: GO 36308
35853: LD_INT 92
35855: DOUBLE
35856: EQUAL
35857: IFTRUE 35861
35859: GO 35887
35861: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35862: LD_ADDR_VAR 0 3
35866: PUSH
35867: LD_INT 11
35869: PUSH
35870: LD_INT 12
35872: PUSH
35873: LD_INT 13
35875: PUSH
35876: LD_INT 14
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: ST_TO_ADDR
35885: GO 36308
35887: LD_INT 28
35889: DOUBLE
35890: EQUAL
35891: IFTRUE 35895
35893: GO 35913
35895: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35896: LD_ADDR_VAR 0 3
35900: PUSH
35901: LD_INT 13
35903: PUSH
35904: LD_INT 14
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: ST_TO_ADDR
35911: GO 36308
35913: LD_INT 29
35915: DOUBLE
35916: EQUAL
35917: IFTRUE 35921
35919: GO 35939
35921: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35922: LD_ADDR_VAR 0 3
35926: PUSH
35927: LD_INT 13
35929: PUSH
35930: LD_INT 14
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: ST_TO_ADDR
35937: GO 36308
35939: LD_INT 31
35941: DOUBLE
35942: EQUAL
35943: IFTRUE 35947
35945: GO 35965
35947: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35948: LD_ADDR_VAR 0 3
35952: PUSH
35953: LD_INT 13
35955: PUSH
35956: LD_INT 14
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: ST_TO_ADDR
35963: GO 36308
35965: LD_INT 26
35967: DOUBLE
35968: EQUAL
35969: IFTRUE 35973
35971: GO 35991
35973: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35974: LD_ADDR_VAR 0 3
35978: PUSH
35979: LD_INT 13
35981: PUSH
35982: LD_INT 14
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: ST_TO_ADDR
35989: GO 36308
35991: LD_INT 42
35993: DOUBLE
35994: EQUAL
35995: IFTRUE 35999
35997: GO 36025
35999: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36000: LD_ADDR_VAR 0 3
36004: PUSH
36005: LD_INT 21
36007: PUSH
36008: LD_INT 22
36010: PUSH
36011: LD_INT 23
36013: PUSH
36014: LD_INT 24
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: ST_TO_ADDR
36023: GO 36308
36025: LD_INT 43
36027: DOUBLE
36028: EQUAL
36029: IFTRUE 36033
36031: GO 36059
36033: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36034: LD_ADDR_VAR 0 3
36038: PUSH
36039: LD_INT 21
36041: PUSH
36042: LD_INT 22
36044: PUSH
36045: LD_INT 23
36047: PUSH
36048: LD_INT 24
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: ST_TO_ADDR
36057: GO 36308
36059: LD_INT 44
36061: DOUBLE
36062: EQUAL
36063: IFTRUE 36067
36065: GO 36093
36067: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36068: LD_ADDR_VAR 0 3
36072: PUSH
36073: LD_INT 21
36075: PUSH
36076: LD_INT 22
36078: PUSH
36079: LD_INT 23
36081: PUSH
36082: LD_INT 24
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: ST_TO_ADDR
36091: GO 36308
36093: LD_INT 45
36095: DOUBLE
36096: EQUAL
36097: IFTRUE 36101
36099: GO 36127
36101: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36102: LD_ADDR_VAR 0 3
36106: PUSH
36107: LD_INT 21
36109: PUSH
36110: LD_INT 22
36112: PUSH
36113: LD_INT 23
36115: PUSH
36116: LD_INT 24
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: ST_TO_ADDR
36125: GO 36308
36127: LD_INT 49
36129: DOUBLE
36130: EQUAL
36131: IFTRUE 36135
36133: GO 36161
36135: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36136: LD_ADDR_VAR 0 3
36140: PUSH
36141: LD_INT 21
36143: PUSH
36144: LD_INT 22
36146: PUSH
36147: LD_INT 23
36149: PUSH
36150: LD_INT 24
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: ST_TO_ADDR
36159: GO 36308
36161: LD_INT 51
36163: DOUBLE
36164: EQUAL
36165: IFTRUE 36169
36167: GO 36195
36169: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36170: LD_ADDR_VAR 0 3
36174: PUSH
36175: LD_INT 21
36177: PUSH
36178: LD_INT 22
36180: PUSH
36181: LD_INT 23
36183: PUSH
36184: LD_INT 24
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: ST_TO_ADDR
36193: GO 36308
36195: LD_INT 52
36197: DOUBLE
36198: EQUAL
36199: IFTRUE 36203
36201: GO 36229
36203: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36204: LD_ADDR_VAR 0 3
36208: PUSH
36209: LD_INT 21
36211: PUSH
36212: LD_INT 22
36214: PUSH
36215: LD_INT 23
36217: PUSH
36218: LD_INT 24
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: ST_TO_ADDR
36227: GO 36308
36229: LD_INT 53
36231: DOUBLE
36232: EQUAL
36233: IFTRUE 36237
36235: GO 36255
36237: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36238: LD_ADDR_VAR 0 3
36242: PUSH
36243: LD_INT 23
36245: PUSH
36246: LD_INT 24
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: ST_TO_ADDR
36253: GO 36308
36255: LD_INT 46
36257: DOUBLE
36258: EQUAL
36259: IFTRUE 36263
36261: GO 36281
36263: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36264: LD_ADDR_VAR 0 3
36268: PUSH
36269: LD_INT 23
36271: PUSH
36272: LD_INT 24
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: ST_TO_ADDR
36279: GO 36308
36281: LD_INT 47
36283: DOUBLE
36284: EQUAL
36285: IFTRUE 36289
36287: GO 36307
36289: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36290: LD_ADDR_VAR 0 3
36294: PUSH
36295: LD_INT 23
36297: PUSH
36298: LD_INT 24
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: ST_TO_ADDR
36305: GO 36308
36307: POP
// result := ( chassis in result ) ;
36308: LD_ADDR_VAR 0 3
36312: PUSH
36313: LD_VAR 0 1
36317: PUSH
36318: LD_VAR 0 3
36322: IN
36323: ST_TO_ADDR
// end ;
36324: LD_VAR 0 3
36328: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36329: LD_INT 0
36331: PPUSH
36332: PPUSH
36333: PPUSH
36334: PPUSH
36335: PPUSH
36336: PPUSH
36337: PPUSH
// result := array ;
36338: LD_ADDR_VAR 0 5
36342: PUSH
36343: LD_VAR 0 1
36347: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36348: LD_VAR 0 1
36352: NOT
36353: PUSH
36354: LD_VAR 0 2
36358: NOT
36359: OR
36360: PUSH
36361: LD_VAR 0 3
36365: NOT
36366: OR
36367: PUSH
36368: LD_VAR 0 2
36372: PUSH
36373: LD_VAR 0 1
36377: GREATER
36378: OR
36379: PUSH
36380: LD_VAR 0 3
36384: PUSH
36385: LD_VAR 0 1
36389: GREATER
36390: OR
36391: IFFALSE 36395
// exit ;
36393: GO 36691
// if direction then
36395: LD_VAR 0 4
36399: IFFALSE 36463
// begin d := 1 ;
36401: LD_ADDR_VAR 0 9
36405: PUSH
36406: LD_INT 1
36408: ST_TO_ADDR
// if i_from > i_to then
36409: LD_VAR 0 2
36413: PUSH
36414: LD_VAR 0 3
36418: GREATER
36419: IFFALSE 36445
// length := ( array - i_from ) + i_to else
36421: LD_ADDR_VAR 0 11
36425: PUSH
36426: LD_VAR 0 1
36430: PUSH
36431: LD_VAR 0 2
36435: MINUS
36436: PUSH
36437: LD_VAR 0 3
36441: PLUS
36442: ST_TO_ADDR
36443: GO 36461
// length := i_to - i_from ;
36445: LD_ADDR_VAR 0 11
36449: PUSH
36450: LD_VAR 0 3
36454: PUSH
36455: LD_VAR 0 2
36459: MINUS
36460: ST_TO_ADDR
// end else
36461: GO 36524
// begin d := - 1 ;
36463: LD_ADDR_VAR 0 9
36467: PUSH
36468: LD_INT 1
36470: NEG
36471: ST_TO_ADDR
// if i_from > i_to then
36472: LD_VAR 0 2
36476: PUSH
36477: LD_VAR 0 3
36481: GREATER
36482: IFFALSE 36502
// length := i_from - i_to else
36484: LD_ADDR_VAR 0 11
36488: PUSH
36489: LD_VAR 0 2
36493: PUSH
36494: LD_VAR 0 3
36498: MINUS
36499: ST_TO_ADDR
36500: GO 36524
// length := ( array - i_to ) + i_from ;
36502: LD_ADDR_VAR 0 11
36506: PUSH
36507: LD_VAR 0 1
36511: PUSH
36512: LD_VAR 0 3
36516: MINUS
36517: PUSH
36518: LD_VAR 0 2
36522: PLUS
36523: ST_TO_ADDR
// end ; if not length then
36524: LD_VAR 0 11
36528: NOT
36529: IFFALSE 36533
// exit ;
36531: GO 36691
// tmp := array ;
36533: LD_ADDR_VAR 0 10
36537: PUSH
36538: LD_VAR 0 1
36542: ST_TO_ADDR
// for i = 1 to length do
36543: LD_ADDR_VAR 0 6
36547: PUSH
36548: DOUBLE
36549: LD_INT 1
36551: DEC
36552: ST_TO_ADDR
36553: LD_VAR 0 11
36557: PUSH
36558: FOR_TO
36559: IFFALSE 36679
// begin for j = 1 to array do
36561: LD_ADDR_VAR 0 7
36565: PUSH
36566: DOUBLE
36567: LD_INT 1
36569: DEC
36570: ST_TO_ADDR
36571: LD_VAR 0 1
36575: PUSH
36576: FOR_TO
36577: IFFALSE 36665
// begin k := j + d ;
36579: LD_ADDR_VAR 0 8
36583: PUSH
36584: LD_VAR 0 7
36588: PUSH
36589: LD_VAR 0 9
36593: PLUS
36594: ST_TO_ADDR
// if k > array then
36595: LD_VAR 0 8
36599: PUSH
36600: LD_VAR 0 1
36604: GREATER
36605: IFFALSE 36615
// k := 1 ;
36607: LD_ADDR_VAR 0 8
36611: PUSH
36612: LD_INT 1
36614: ST_TO_ADDR
// if not k then
36615: LD_VAR 0 8
36619: NOT
36620: IFFALSE 36632
// k := array ;
36622: LD_ADDR_VAR 0 8
36626: PUSH
36627: LD_VAR 0 1
36631: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36632: LD_ADDR_VAR 0 10
36636: PUSH
36637: LD_VAR 0 10
36641: PPUSH
36642: LD_VAR 0 8
36646: PPUSH
36647: LD_VAR 0 1
36651: PUSH
36652: LD_VAR 0 7
36656: ARRAY
36657: PPUSH
36658: CALL_OW 1
36662: ST_TO_ADDR
// end ;
36663: GO 36576
36665: POP
36666: POP
// array := tmp ;
36667: LD_ADDR_VAR 0 1
36671: PUSH
36672: LD_VAR 0 10
36676: ST_TO_ADDR
// end ;
36677: GO 36558
36679: POP
36680: POP
// result := array ;
36681: LD_ADDR_VAR 0 5
36685: PUSH
36686: LD_VAR 0 1
36690: ST_TO_ADDR
// end ;
36691: LD_VAR 0 5
36695: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36696: LD_INT 0
36698: PPUSH
36699: PPUSH
// result := 0 ;
36700: LD_ADDR_VAR 0 3
36704: PUSH
36705: LD_INT 0
36707: ST_TO_ADDR
// if not array or not value in array then
36708: LD_VAR 0 1
36712: NOT
36713: PUSH
36714: LD_VAR 0 2
36718: PUSH
36719: LD_VAR 0 1
36723: IN
36724: NOT
36725: OR
36726: IFFALSE 36730
// exit ;
36728: GO 36784
// for i = 1 to array do
36730: LD_ADDR_VAR 0 4
36734: PUSH
36735: DOUBLE
36736: LD_INT 1
36738: DEC
36739: ST_TO_ADDR
36740: LD_VAR 0 1
36744: PUSH
36745: FOR_TO
36746: IFFALSE 36782
// if value = array [ i ] then
36748: LD_VAR 0 2
36752: PUSH
36753: LD_VAR 0 1
36757: PUSH
36758: LD_VAR 0 4
36762: ARRAY
36763: EQUAL
36764: IFFALSE 36780
// begin result := i ;
36766: LD_ADDR_VAR 0 3
36770: PUSH
36771: LD_VAR 0 4
36775: ST_TO_ADDR
// exit ;
36776: POP
36777: POP
36778: GO 36784
// end ;
36780: GO 36745
36782: POP
36783: POP
// end ;
36784: LD_VAR 0 3
36788: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36789: LD_INT 0
36791: PPUSH
// vc_chassis := chassis ;
36792: LD_ADDR_OWVAR 37
36796: PUSH
36797: LD_VAR 0 1
36801: ST_TO_ADDR
// vc_engine := engine ;
36802: LD_ADDR_OWVAR 39
36806: PUSH
36807: LD_VAR 0 2
36811: ST_TO_ADDR
// vc_control := control ;
36812: LD_ADDR_OWVAR 38
36816: PUSH
36817: LD_VAR 0 3
36821: ST_TO_ADDR
// vc_weapon := weapon ;
36822: LD_ADDR_OWVAR 40
36826: PUSH
36827: LD_VAR 0 4
36831: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36832: LD_ADDR_OWVAR 41
36836: PUSH
36837: LD_VAR 0 5
36841: ST_TO_ADDR
// end ;
36842: LD_VAR 0 6
36846: RET
// export function WantPlant ( unit ) ; var task ; begin
36847: LD_INT 0
36849: PPUSH
36850: PPUSH
// result := false ;
36851: LD_ADDR_VAR 0 2
36855: PUSH
36856: LD_INT 0
36858: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36859: LD_ADDR_VAR 0 3
36863: PUSH
36864: LD_VAR 0 1
36868: PPUSH
36869: CALL_OW 437
36873: ST_TO_ADDR
// if task then
36874: LD_VAR 0 3
36878: IFFALSE 36906
// if task [ 1 ] [ 1 ] = p then
36880: LD_VAR 0 3
36884: PUSH
36885: LD_INT 1
36887: ARRAY
36888: PUSH
36889: LD_INT 1
36891: ARRAY
36892: PUSH
36893: LD_STRING p
36895: EQUAL
36896: IFFALSE 36906
// result := true ;
36898: LD_ADDR_VAR 0 2
36902: PUSH
36903: LD_INT 1
36905: ST_TO_ADDR
// end ;
36906: LD_VAR 0 2
36910: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36911: LD_INT 0
36913: PPUSH
36914: PPUSH
36915: PPUSH
36916: PPUSH
// if pos < 1 then
36917: LD_VAR 0 2
36921: PUSH
36922: LD_INT 1
36924: LESS
36925: IFFALSE 36929
// exit ;
36927: GO 37232
// if pos = 1 then
36929: LD_VAR 0 2
36933: PUSH
36934: LD_INT 1
36936: EQUAL
36937: IFFALSE 36970
// result := Replace ( arr , pos [ 1 ] , value ) else
36939: LD_ADDR_VAR 0 4
36943: PUSH
36944: LD_VAR 0 1
36948: PPUSH
36949: LD_VAR 0 2
36953: PUSH
36954: LD_INT 1
36956: ARRAY
36957: PPUSH
36958: LD_VAR 0 3
36962: PPUSH
36963: CALL_OW 1
36967: ST_TO_ADDR
36968: GO 37232
// begin tmp := arr ;
36970: LD_ADDR_VAR 0 6
36974: PUSH
36975: LD_VAR 0 1
36979: ST_TO_ADDR
// s_arr := [ tmp ] ;
36980: LD_ADDR_VAR 0 7
36984: PUSH
36985: LD_VAR 0 6
36989: PUSH
36990: EMPTY
36991: LIST
36992: ST_TO_ADDR
// for i = 1 to pos - 1 do
36993: LD_ADDR_VAR 0 5
36997: PUSH
36998: DOUBLE
36999: LD_INT 1
37001: DEC
37002: ST_TO_ADDR
37003: LD_VAR 0 2
37007: PUSH
37008: LD_INT 1
37010: MINUS
37011: PUSH
37012: FOR_TO
37013: IFFALSE 37058
// begin tmp := tmp [ pos [ i ] ] ;
37015: LD_ADDR_VAR 0 6
37019: PUSH
37020: LD_VAR 0 6
37024: PUSH
37025: LD_VAR 0 2
37029: PUSH
37030: LD_VAR 0 5
37034: ARRAY
37035: ARRAY
37036: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37037: LD_ADDR_VAR 0 7
37041: PUSH
37042: LD_VAR 0 7
37046: PUSH
37047: LD_VAR 0 6
37051: PUSH
37052: EMPTY
37053: LIST
37054: ADD
37055: ST_TO_ADDR
// end ;
37056: GO 37012
37058: POP
37059: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37060: LD_ADDR_VAR 0 6
37064: PUSH
37065: LD_VAR 0 6
37069: PPUSH
37070: LD_VAR 0 2
37074: PUSH
37075: LD_VAR 0 2
37079: ARRAY
37080: PPUSH
37081: LD_VAR 0 3
37085: PPUSH
37086: CALL_OW 1
37090: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37091: LD_ADDR_VAR 0 7
37095: PUSH
37096: LD_VAR 0 7
37100: PPUSH
37101: LD_VAR 0 7
37105: PPUSH
37106: LD_VAR 0 6
37110: PPUSH
37111: CALL_OW 1
37115: ST_TO_ADDR
// for i = s_arr downto 2 do
37116: LD_ADDR_VAR 0 5
37120: PUSH
37121: DOUBLE
37122: LD_VAR 0 7
37126: INC
37127: ST_TO_ADDR
37128: LD_INT 2
37130: PUSH
37131: FOR_DOWNTO
37132: IFFALSE 37216
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37134: LD_ADDR_VAR 0 6
37138: PUSH
37139: LD_VAR 0 7
37143: PUSH
37144: LD_VAR 0 5
37148: PUSH
37149: LD_INT 1
37151: MINUS
37152: ARRAY
37153: PPUSH
37154: LD_VAR 0 2
37158: PUSH
37159: LD_VAR 0 5
37163: PUSH
37164: LD_INT 1
37166: MINUS
37167: ARRAY
37168: PPUSH
37169: LD_VAR 0 7
37173: PUSH
37174: LD_VAR 0 5
37178: ARRAY
37179: PPUSH
37180: CALL_OW 1
37184: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37185: LD_ADDR_VAR 0 7
37189: PUSH
37190: LD_VAR 0 7
37194: PPUSH
37195: LD_VAR 0 5
37199: PUSH
37200: LD_INT 1
37202: MINUS
37203: PPUSH
37204: LD_VAR 0 6
37208: PPUSH
37209: CALL_OW 1
37213: ST_TO_ADDR
// end ;
37214: GO 37131
37216: POP
37217: POP
// result := s_arr [ 1 ] ;
37218: LD_ADDR_VAR 0 4
37222: PUSH
37223: LD_VAR 0 7
37227: PUSH
37228: LD_INT 1
37230: ARRAY
37231: ST_TO_ADDR
// end ; end ;
37232: LD_VAR 0 4
37236: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37237: LD_INT 0
37239: PPUSH
37240: PPUSH
// if not list then
37241: LD_VAR 0 1
37245: NOT
37246: IFFALSE 37250
// exit ;
37248: GO 37341
// i := list [ pos1 ] ;
37250: LD_ADDR_VAR 0 5
37254: PUSH
37255: LD_VAR 0 1
37259: PUSH
37260: LD_VAR 0 2
37264: ARRAY
37265: ST_TO_ADDR
// if not i then
37266: LD_VAR 0 5
37270: NOT
37271: IFFALSE 37275
// exit ;
37273: GO 37341
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37275: LD_ADDR_VAR 0 1
37279: PUSH
37280: LD_VAR 0 1
37284: PPUSH
37285: LD_VAR 0 2
37289: PPUSH
37290: LD_VAR 0 1
37294: PUSH
37295: LD_VAR 0 3
37299: ARRAY
37300: PPUSH
37301: CALL_OW 1
37305: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37306: LD_ADDR_VAR 0 1
37310: PUSH
37311: LD_VAR 0 1
37315: PPUSH
37316: LD_VAR 0 3
37320: PPUSH
37321: LD_VAR 0 5
37325: PPUSH
37326: CALL_OW 1
37330: ST_TO_ADDR
// result := list ;
37331: LD_ADDR_VAR 0 4
37335: PUSH
37336: LD_VAR 0 1
37340: ST_TO_ADDR
// end ;
37341: LD_VAR 0 4
37345: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37346: LD_INT 0
37348: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37349: LD_ADDR_VAR 0 5
37353: PUSH
37354: LD_VAR 0 1
37358: PPUSH
37359: CALL_OW 250
37363: PPUSH
37364: LD_VAR 0 1
37368: PPUSH
37369: CALL_OW 251
37373: PPUSH
37374: LD_VAR 0 2
37378: PPUSH
37379: LD_VAR 0 3
37383: PPUSH
37384: LD_VAR 0 4
37388: PPUSH
37389: CALL 37767 0 5
37393: ST_TO_ADDR
// end ;
37394: LD_VAR 0 5
37398: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
37399: LD_INT 0
37401: PPUSH
37402: PPUSH
37403: PPUSH
37404: PPUSH
// if not list or not unit then
37405: LD_VAR 0 2
37409: NOT
37410: PUSH
37411: LD_VAR 0 1
37415: NOT
37416: OR
37417: IFFALSE 37421
// exit ;
37419: GO 37762
// result := [ ] ;
37421: LD_ADDR_VAR 0 5
37425: PUSH
37426: EMPTY
37427: ST_TO_ADDR
// for i in list do
37428: LD_ADDR_VAR 0 6
37432: PUSH
37433: LD_VAR 0 2
37437: PUSH
37438: FOR_IN
37439: IFFALSE 37657
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
37441: LD_ADDR_VAR 0 8
37445: PUSH
37446: LD_VAR 0 1
37450: PPUSH
37451: LD_VAR 0 6
37455: PUSH
37456: LD_INT 1
37458: ARRAY
37459: PPUSH
37460: LD_VAR 0 6
37464: PUSH
37465: LD_INT 2
37467: ARRAY
37468: PPUSH
37469: CALL_OW 297
37473: ST_TO_ADDR
// if not Count ( result ) then
37474: LD_VAR 0 5
37478: PPUSH
37479: CALL 34051 0 1
37483: NOT
37484: IFFALSE 37517
// begin result := Join ( result , [ i , tmp ] ) ;
37486: LD_ADDR_VAR 0 5
37490: PUSH
37491: LD_VAR 0 5
37495: PPUSH
37496: LD_VAR 0 6
37500: PUSH
37501: LD_VAR 0 8
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PPUSH
37510: CALL 69651 0 2
37514: ST_TO_ADDR
// continue ;
37515: GO 37438
// end ; if result [ result ] [ 2 ] <= tmp then
37517: LD_VAR 0 5
37521: PUSH
37522: LD_VAR 0 5
37526: ARRAY
37527: PUSH
37528: LD_INT 2
37530: ARRAY
37531: PUSH
37532: LD_VAR 0 8
37536: LESSEQUAL
37537: IFFALSE 37570
// result := Join ( result , [ i , tmp ] ) else
37539: LD_ADDR_VAR 0 5
37543: PUSH
37544: LD_VAR 0 5
37548: PPUSH
37549: LD_VAR 0 6
37553: PUSH
37554: LD_VAR 0 8
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PPUSH
37563: CALL 69651 0 2
37567: ST_TO_ADDR
37568: GO 37655
// begin for j := 1 to Count ( result ) do
37570: LD_ADDR_VAR 0 7
37574: PUSH
37575: DOUBLE
37576: LD_INT 1
37578: DEC
37579: ST_TO_ADDR
37580: LD_VAR 0 5
37584: PPUSH
37585: CALL 34051 0 1
37589: PUSH
37590: FOR_TO
37591: IFFALSE 37653
// begin if tmp < result [ j ] [ 2 ] then
37593: LD_VAR 0 8
37597: PUSH
37598: LD_VAR 0 5
37602: PUSH
37603: LD_VAR 0 7
37607: ARRAY
37608: PUSH
37609: LD_INT 2
37611: ARRAY
37612: LESS
37613: IFFALSE 37651
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37615: LD_ADDR_VAR 0 5
37619: PUSH
37620: LD_VAR 0 5
37624: PPUSH
37625: LD_VAR 0 7
37629: PPUSH
37630: LD_VAR 0 6
37634: PUSH
37635: LD_VAR 0 8
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PPUSH
37644: CALL_OW 2
37648: ST_TO_ADDR
// break ;
37649: GO 37653
// end ; end ;
37651: GO 37590
37653: POP
37654: POP
// end ; end ;
37655: GO 37438
37657: POP
37658: POP
// if result and not asc then
37659: LD_VAR 0 5
37663: PUSH
37664: LD_VAR 0 3
37668: NOT
37669: AND
37670: IFFALSE 37687
// result := ReverseArray ( result ) ;
37672: LD_ADDR_VAR 0 5
37676: PUSH
37677: LD_VAR 0 5
37681: PPUSH
37682: CALL 64927 0 1
37686: ST_TO_ADDR
// tmp := [ ] ;
37687: LD_ADDR_VAR 0 8
37691: PUSH
37692: EMPTY
37693: ST_TO_ADDR
// if mode then
37694: LD_VAR 0 4
37698: IFFALSE 37762
// begin for i := 1 to result do
37700: LD_ADDR_VAR 0 6
37704: PUSH
37705: DOUBLE
37706: LD_INT 1
37708: DEC
37709: ST_TO_ADDR
37710: LD_VAR 0 5
37714: PUSH
37715: FOR_TO
37716: IFFALSE 37750
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37718: LD_ADDR_VAR 0 8
37722: PUSH
37723: LD_VAR 0 8
37727: PPUSH
37728: LD_VAR 0 5
37732: PUSH
37733: LD_VAR 0 6
37737: ARRAY
37738: PUSH
37739: LD_INT 1
37741: ARRAY
37742: PPUSH
37743: CALL 69651 0 2
37747: ST_TO_ADDR
37748: GO 37715
37750: POP
37751: POP
// result := tmp ;
37752: LD_ADDR_VAR 0 5
37756: PUSH
37757: LD_VAR 0 8
37761: ST_TO_ADDR
// end ; end ;
37762: LD_VAR 0 5
37766: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37767: LD_INT 0
37769: PPUSH
37770: PPUSH
37771: PPUSH
37772: PPUSH
// if not list then
37773: LD_VAR 0 3
37777: NOT
37778: IFFALSE 37782
// exit ;
37780: GO 38170
// result := [ ] ;
37782: LD_ADDR_VAR 0 6
37786: PUSH
37787: EMPTY
37788: ST_TO_ADDR
// for i in list do
37789: LD_ADDR_VAR 0 7
37793: PUSH
37794: LD_VAR 0 3
37798: PUSH
37799: FOR_IN
37800: IFFALSE 38002
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37802: LD_ADDR_VAR 0 9
37806: PUSH
37807: LD_VAR 0 7
37811: PPUSH
37812: LD_VAR 0 1
37816: PPUSH
37817: LD_VAR 0 2
37821: PPUSH
37822: CALL_OW 297
37826: ST_TO_ADDR
// if not result then
37827: LD_VAR 0 6
37831: NOT
37832: IFFALSE 37858
// result := [ [ i , tmp ] ] else
37834: LD_ADDR_VAR 0 6
37838: PUSH
37839: LD_VAR 0 7
37843: PUSH
37844: LD_VAR 0 9
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: EMPTY
37854: LIST
37855: ST_TO_ADDR
37856: GO 38000
// begin if result [ result ] [ 2 ] < tmp then
37858: LD_VAR 0 6
37862: PUSH
37863: LD_VAR 0 6
37867: ARRAY
37868: PUSH
37869: LD_INT 2
37871: ARRAY
37872: PUSH
37873: LD_VAR 0 9
37877: LESS
37878: IFFALSE 37920
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37880: LD_ADDR_VAR 0 6
37884: PUSH
37885: LD_VAR 0 6
37889: PPUSH
37890: LD_VAR 0 6
37894: PUSH
37895: LD_INT 1
37897: PLUS
37898: PPUSH
37899: LD_VAR 0 7
37903: PUSH
37904: LD_VAR 0 9
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PPUSH
37913: CALL_OW 2
37917: ST_TO_ADDR
37918: GO 38000
// for j = 1 to result do
37920: LD_ADDR_VAR 0 8
37924: PUSH
37925: DOUBLE
37926: LD_INT 1
37928: DEC
37929: ST_TO_ADDR
37930: LD_VAR 0 6
37934: PUSH
37935: FOR_TO
37936: IFFALSE 37998
// begin if tmp < result [ j ] [ 2 ] then
37938: LD_VAR 0 9
37942: PUSH
37943: LD_VAR 0 6
37947: PUSH
37948: LD_VAR 0 8
37952: ARRAY
37953: PUSH
37954: LD_INT 2
37956: ARRAY
37957: LESS
37958: IFFALSE 37996
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37960: LD_ADDR_VAR 0 6
37964: PUSH
37965: LD_VAR 0 6
37969: PPUSH
37970: LD_VAR 0 8
37974: PPUSH
37975: LD_VAR 0 7
37979: PUSH
37980: LD_VAR 0 9
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PPUSH
37989: CALL_OW 2
37993: ST_TO_ADDR
// break ;
37994: GO 37998
// end ; end ;
37996: GO 37935
37998: POP
37999: POP
// end ; end ;
38000: GO 37799
38002: POP
38003: POP
// if result and not asc then
38004: LD_VAR 0 6
38008: PUSH
38009: LD_VAR 0 4
38013: NOT
38014: AND
38015: IFFALSE 38090
// begin tmp := result ;
38017: LD_ADDR_VAR 0 9
38021: PUSH
38022: LD_VAR 0 6
38026: ST_TO_ADDR
// for i = tmp downto 1 do
38027: LD_ADDR_VAR 0 7
38031: PUSH
38032: DOUBLE
38033: LD_VAR 0 9
38037: INC
38038: ST_TO_ADDR
38039: LD_INT 1
38041: PUSH
38042: FOR_DOWNTO
38043: IFFALSE 38088
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38045: LD_ADDR_VAR 0 6
38049: PUSH
38050: LD_VAR 0 6
38054: PPUSH
38055: LD_VAR 0 9
38059: PUSH
38060: LD_VAR 0 7
38064: MINUS
38065: PUSH
38066: LD_INT 1
38068: PLUS
38069: PPUSH
38070: LD_VAR 0 9
38074: PUSH
38075: LD_VAR 0 7
38079: ARRAY
38080: PPUSH
38081: CALL_OW 1
38085: ST_TO_ADDR
38086: GO 38042
38088: POP
38089: POP
// end ; tmp := [ ] ;
38090: LD_ADDR_VAR 0 9
38094: PUSH
38095: EMPTY
38096: ST_TO_ADDR
// if mode then
38097: LD_VAR 0 5
38101: IFFALSE 38170
// begin for i = 1 to result do
38103: LD_ADDR_VAR 0 7
38107: PUSH
38108: DOUBLE
38109: LD_INT 1
38111: DEC
38112: ST_TO_ADDR
38113: LD_VAR 0 6
38117: PUSH
38118: FOR_TO
38119: IFFALSE 38158
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38121: LD_ADDR_VAR 0 9
38125: PUSH
38126: LD_VAR 0 9
38130: PPUSH
38131: LD_VAR 0 7
38135: PPUSH
38136: LD_VAR 0 6
38140: PUSH
38141: LD_VAR 0 7
38145: ARRAY
38146: PUSH
38147: LD_INT 1
38149: ARRAY
38150: PPUSH
38151: CALL_OW 1
38155: ST_TO_ADDR
38156: GO 38118
38158: POP
38159: POP
// result := tmp ;
38160: LD_ADDR_VAR 0 6
38164: PUSH
38165: LD_VAR 0 9
38169: ST_TO_ADDR
// end ; end ;
38170: LD_VAR 0 6
38174: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38175: LD_INT 0
38177: PPUSH
38178: PPUSH
38179: PPUSH
38180: PPUSH
38181: PPUSH
38182: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38183: LD_ADDR_VAR 0 5
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: EMPTY
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: ST_TO_ADDR
// if not x or not y then
38205: LD_VAR 0 2
38209: NOT
38210: PUSH
38211: LD_VAR 0 3
38215: NOT
38216: OR
38217: IFFALSE 38221
// exit ;
38219: GO 39871
// if not range then
38221: LD_VAR 0 4
38225: NOT
38226: IFFALSE 38236
// range := 10 ;
38228: LD_ADDR_VAR 0 4
38232: PUSH
38233: LD_INT 10
38235: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38236: LD_ADDR_VAR 0 8
38240: PUSH
38241: LD_INT 81
38243: PUSH
38244: LD_VAR 0 1
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 92
38255: PUSH
38256: LD_VAR 0 2
38260: PUSH
38261: LD_VAR 0 3
38265: PUSH
38266: LD_VAR 0 4
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 3
38279: PUSH
38280: LD_INT 21
38282: PUSH
38283: LD_INT 3
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: LIST
38298: PPUSH
38299: CALL_OW 69
38303: ST_TO_ADDR
// if not tmp then
38304: LD_VAR 0 8
38308: NOT
38309: IFFALSE 38313
// exit ;
38311: GO 39871
// for i in tmp do
38313: LD_ADDR_VAR 0 6
38317: PUSH
38318: LD_VAR 0 8
38322: PUSH
38323: FOR_IN
38324: IFFALSE 39846
// begin points := [ 0 , 0 , 0 ] ;
38326: LD_ADDR_VAR 0 9
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: LIST
38344: ST_TO_ADDR
// bpoints := 1 ;
38345: LD_ADDR_VAR 0 10
38349: PUSH
38350: LD_INT 1
38352: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38353: LD_VAR 0 6
38357: PPUSH
38358: CALL_OW 247
38362: PUSH
38363: LD_INT 1
38365: DOUBLE
38366: EQUAL
38367: IFTRUE 38371
38369: GO 38949
38371: POP
// begin if GetClass ( i ) = 1 then
38372: LD_VAR 0 6
38376: PPUSH
38377: CALL_OW 257
38381: PUSH
38382: LD_INT 1
38384: EQUAL
38385: IFFALSE 38406
// points := [ 10 , 5 , 3 ] ;
38387: LD_ADDR_VAR 0 9
38391: PUSH
38392: LD_INT 10
38394: PUSH
38395: LD_INT 5
38397: PUSH
38398: LD_INT 3
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: LIST
38405: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38406: LD_VAR 0 6
38410: PPUSH
38411: CALL_OW 257
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: LD_INT 3
38421: PUSH
38422: LD_INT 4
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: IN
38430: IFFALSE 38451
// points := [ 3 , 2 , 1 ] ;
38432: LD_ADDR_VAR 0 9
38436: PUSH
38437: LD_INT 3
38439: PUSH
38440: LD_INT 2
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38451: LD_VAR 0 6
38455: PPUSH
38456: CALL_OW 257
38460: PUSH
38461: LD_INT 5
38463: EQUAL
38464: IFFALSE 38485
// points := [ 130 , 5 , 2 ] ;
38466: LD_ADDR_VAR 0 9
38470: PUSH
38471: LD_INT 130
38473: PUSH
38474: LD_INT 5
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: LIST
38484: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38485: LD_VAR 0 6
38489: PPUSH
38490: CALL_OW 257
38494: PUSH
38495: LD_INT 8
38497: EQUAL
38498: IFFALSE 38519
// points := [ 35 , 35 , 30 ] ;
38500: LD_ADDR_VAR 0 9
38504: PUSH
38505: LD_INT 35
38507: PUSH
38508: LD_INT 35
38510: PUSH
38511: LD_INT 30
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38519: LD_VAR 0 6
38523: PPUSH
38524: CALL_OW 257
38528: PUSH
38529: LD_INT 9
38531: EQUAL
38532: IFFALSE 38553
// points := [ 20 , 55 , 40 ] ;
38534: LD_ADDR_VAR 0 9
38538: PUSH
38539: LD_INT 20
38541: PUSH
38542: LD_INT 55
38544: PUSH
38545: LD_INT 40
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: LIST
38552: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38553: LD_VAR 0 6
38557: PPUSH
38558: CALL_OW 257
38562: PUSH
38563: LD_INT 12
38565: PUSH
38566: LD_INT 16
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: IN
38573: IFFALSE 38594
// points := [ 5 , 3 , 2 ] ;
38575: LD_ADDR_VAR 0 9
38579: PUSH
38580: LD_INT 5
38582: PUSH
38583: LD_INT 3
38585: PUSH
38586: LD_INT 2
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: LIST
38593: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38594: LD_VAR 0 6
38598: PPUSH
38599: CALL_OW 257
38603: PUSH
38604: LD_INT 17
38606: EQUAL
38607: IFFALSE 38628
// points := [ 100 , 50 , 75 ] ;
38609: LD_ADDR_VAR 0 9
38613: PUSH
38614: LD_INT 100
38616: PUSH
38617: LD_INT 50
38619: PUSH
38620: LD_INT 75
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38628: LD_VAR 0 6
38632: PPUSH
38633: CALL_OW 257
38637: PUSH
38638: LD_INT 15
38640: EQUAL
38641: IFFALSE 38662
// points := [ 10 , 5 , 3 ] ;
38643: LD_ADDR_VAR 0 9
38647: PUSH
38648: LD_INT 10
38650: PUSH
38651: LD_INT 5
38653: PUSH
38654: LD_INT 3
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: LIST
38661: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38662: LD_VAR 0 6
38666: PPUSH
38667: CALL_OW 257
38671: PUSH
38672: LD_INT 14
38674: EQUAL
38675: IFFALSE 38696
// points := [ 10 , 0 , 0 ] ;
38677: LD_ADDR_VAR 0 9
38681: PUSH
38682: LD_INT 10
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: LIST
38695: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38696: LD_VAR 0 6
38700: PPUSH
38701: CALL_OW 257
38705: PUSH
38706: LD_INT 11
38708: EQUAL
38709: IFFALSE 38730
// points := [ 30 , 10 , 5 ] ;
38711: LD_ADDR_VAR 0 9
38715: PUSH
38716: LD_INT 30
38718: PUSH
38719: LD_INT 10
38721: PUSH
38722: LD_INT 5
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: LIST
38729: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38730: LD_VAR 0 1
38734: PPUSH
38735: LD_INT 5
38737: PPUSH
38738: CALL_OW 321
38742: PUSH
38743: LD_INT 2
38745: EQUAL
38746: IFFALSE 38763
// bpoints := bpoints * 1.8 ;
38748: LD_ADDR_VAR 0 10
38752: PUSH
38753: LD_VAR 0 10
38757: PUSH
38758: LD_REAL  1.80000000000000E+0000
38761: MUL
38762: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38763: LD_VAR 0 6
38767: PPUSH
38768: CALL_OW 257
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: LD_INT 2
38778: PUSH
38779: LD_INT 3
38781: PUSH
38782: LD_INT 4
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: IN
38791: PUSH
38792: LD_VAR 0 1
38796: PPUSH
38797: LD_INT 51
38799: PPUSH
38800: CALL_OW 321
38804: PUSH
38805: LD_INT 2
38807: EQUAL
38808: AND
38809: IFFALSE 38826
// bpoints := bpoints * 1.2 ;
38811: LD_ADDR_VAR 0 10
38815: PUSH
38816: LD_VAR 0 10
38820: PUSH
38821: LD_REAL  1.20000000000000E+0000
38824: MUL
38825: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38826: LD_VAR 0 6
38830: PPUSH
38831: CALL_OW 257
38835: PUSH
38836: LD_INT 5
38838: PUSH
38839: LD_INT 7
38841: PUSH
38842: LD_INT 9
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: IN
38850: PUSH
38851: LD_VAR 0 1
38855: PPUSH
38856: LD_INT 52
38858: PPUSH
38859: CALL_OW 321
38863: PUSH
38864: LD_INT 2
38866: EQUAL
38867: AND
38868: IFFALSE 38885
// bpoints := bpoints * 1.5 ;
38870: LD_ADDR_VAR 0 10
38874: PUSH
38875: LD_VAR 0 10
38879: PUSH
38880: LD_REAL  1.50000000000000E+0000
38883: MUL
38884: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38885: LD_VAR 0 1
38889: PPUSH
38890: LD_INT 66
38892: PPUSH
38893: CALL_OW 321
38897: PUSH
38898: LD_INT 2
38900: EQUAL
38901: IFFALSE 38918
// bpoints := bpoints * 1.1 ;
38903: LD_ADDR_VAR 0 10
38907: PUSH
38908: LD_VAR 0 10
38912: PUSH
38913: LD_REAL  1.10000000000000E+0000
38916: MUL
38917: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38918: LD_ADDR_VAR 0 10
38922: PUSH
38923: LD_VAR 0 10
38927: PUSH
38928: LD_VAR 0 6
38932: PPUSH
38933: LD_INT 1
38935: PPUSH
38936: CALL_OW 259
38940: PUSH
38941: LD_REAL  1.15000000000000E+0000
38944: MUL
38945: MUL
38946: ST_TO_ADDR
// end ; unit_vehicle :
38947: GO 39775
38949: LD_INT 2
38951: DOUBLE
38952: EQUAL
38953: IFTRUE 38957
38955: GO 39763
38957: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38958: LD_VAR 0 6
38962: PPUSH
38963: CALL_OW 264
38967: PUSH
38968: LD_INT 2
38970: PUSH
38971: LD_INT 42
38973: PUSH
38974: LD_INT 24
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: LIST
38981: IN
38982: IFFALSE 39003
// points := [ 25 , 5 , 3 ] ;
38984: LD_ADDR_VAR 0 9
38988: PUSH
38989: LD_INT 25
38991: PUSH
38992: LD_INT 5
38994: PUSH
38995: LD_INT 3
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: LIST
39002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39003: LD_VAR 0 6
39007: PPUSH
39008: CALL_OW 264
39012: PUSH
39013: LD_INT 4
39015: PUSH
39016: LD_INT 43
39018: PUSH
39019: LD_INT 25
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: LIST
39026: IN
39027: IFFALSE 39048
// points := [ 40 , 15 , 5 ] ;
39029: LD_ADDR_VAR 0 9
39033: PUSH
39034: LD_INT 40
39036: PUSH
39037: LD_INT 15
39039: PUSH
39040: LD_INT 5
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39048: LD_VAR 0 6
39052: PPUSH
39053: CALL_OW 264
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: LD_INT 23
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: IN
39068: IFFALSE 39089
// points := [ 7 , 25 , 8 ] ;
39070: LD_ADDR_VAR 0 9
39074: PUSH
39075: LD_INT 7
39077: PUSH
39078: LD_INT 25
39080: PUSH
39081: LD_INT 8
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: LIST
39088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39089: LD_VAR 0 6
39093: PPUSH
39094: CALL_OW 264
39098: PUSH
39099: LD_INT 5
39101: PUSH
39102: LD_INT 27
39104: PUSH
39105: LD_INT 44
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: LIST
39112: IN
39113: IFFALSE 39134
// points := [ 14 , 50 , 16 ] ;
39115: LD_ADDR_VAR 0 9
39119: PUSH
39120: LD_INT 14
39122: PUSH
39123: LD_INT 50
39125: PUSH
39126: LD_INT 16
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: LIST
39133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39134: LD_VAR 0 6
39138: PPUSH
39139: CALL_OW 264
39143: PUSH
39144: LD_INT 6
39146: PUSH
39147: LD_INT 46
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: IN
39154: IFFALSE 39175
// points := [ 32 , 120 , 70 ] ;
39156: LD_ADDR_VAR 0 9
39160: PUSH
39161: LD_INT 32
39163: PUSH
39164: LD_INT 120
39166: PUSH
39167: LD_INT 70
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: LIST
39174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39175: LD_VAR 0 6
39179: PPUSH
39180: CALL_OW 264
39184: PUSH
39185: LD_INT 7
39187: PUSH
39188: LD_INT 28
39190: PUSH
39191: LD_INT 45
39193: PUSH
39194: LD_INT 92
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: IN
39203: IFFALSE 39224
// points := [ 35 , 20 , 45 ] ;
39205: LD_ADDR_VAR 0 9
39209: PUSH
39210: LD_INT 35
39212: PUSH
39213: LD_INT 20
39215: PUSH
39216: LD_INT 45
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: LIST
39223: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39224: LD_VAR 0 6
39228: PPUSH
39229: CALL_OW 264
39233: PUSH
39234: LD_INT 47
39236: PUSH
39237: EMPTY
39238: LIST
39239: IN
39240: IFFALSE 39261
// points := [ 67 , 45 , 75 ] ;
39242: LD_ADDR_VAR 0 9
39246: PUSH
39247: LD_INT 67
39249: PUSH
39250: LD_INT 45
39252: PUSH
39253: LD_INT 75
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39261: LD_VAR 0 6
39265: PPUSH
39266: CALL_OW 264
39270: PUSH
39271: LD_INT 26
39273: PUSH
39274: EMPTY
39275: LIST
39276: IN
39277: IFFALSE 39298
// points := [ 120 , 30 , 80 ] ;
39279: LD_ADDR_VAR 0 9
39283: PUSH
39284: LD_INT 120
39286: PUSH
39287: LD_INT 30
39289: PUSH
39290: LD_INT 80
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: LIST
39297: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39298: LD_VAR 0 6
39302: PPUSH
39303: CALL_OW 264
39307: PUSH
39308: LD_INT 22
39310: PUSH
39311: EMPTY
39312: LIST
39313: IN
39314: IFFALSE 39335
// points := [ 40 , 1 , 1 ] ;
39316: LD_ADDR_VAR 0 9
39320: PUSH
39321: LD_INT 40
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: LD_INT 1
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: LIST
39334: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39335: LD_VAR 0 6
39339: PPUSH
39340: CALL_OW 264
39344: PUSH
39345: LD_INT 29
39347: PUSH
39348: EMPTY
39349: LIST
39350: IN
39351: IFFALSE 39372
// points := [ 70 , 200 , 400 ] ;
39353: LD_ADDR_VAR 0 9
39357: PUSH
39358: LD_INT 70
39360: PUSH
39361: LD_INT 200
39363: PUSH
39364: LD_INT 400
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: LIST
39371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39372: LD_VAR 0 6
39376: PPUSH
39377: CALL_OW 264
39381: PUSH
39382: LD_INT 14
39384: PUSH
39385: LD_INT 53
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: IN
39392: IFFALSE 39413
// points := [ 40 , 10 , 20 ] ;
39394: LD_ADDR_VAR 0 9
39398: PUSH
39399: LD_INT 40
39401: PUSH
39402: LD_INT 10
39404: PUSH
39405: LD_INT 20
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: LIST
39412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39413: LD_VAR 0 6
39417: PPUSH
39418: CALL_OW 264
39422: PUSH
39423: LD_INT 9
39425: PUSH
39426: EMPTY
39427: LIST
39428: IN
39429: IFFALSE 39450
// points := [ 5 , 70 , 20 ] ;
39431: LD_ADDR_VAR 0 9
39435: PUSH
39436: LD_INT 5
39438: PUSH
39439: LD_INT 70
39441: PUSH
39442: LD_INT 20
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39450: LD_VAR 0 6
39454: PPUSH
39455: CALL_OW 264
39459: PUSH
39460: LD_INT 10
39462: PUSH
39463: EMPTY
39464: LIST
39465: IN
39466: IFFALSE 39487
// points := [ 35 , 110 , 70 ] ;
39468: LD_ADDR_VAR 0 9
39472: PUSH
39473: LD_INT 35
39475: PUSH
39476: LD_INT 110
39478: PUSH
39479: LD_INT 70
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: LIST
39486: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39487: LD_VAR 0 6
39491: PPUSH
39492: CALL_OW 265
39496: PUSH
39497: LD_INT 25
39499: EQUAL
39500: IFFALSE 39521
// points := [ 80 , 65 , 100 ] ;
39502: LD_ADDR_VAR 0 9
39506: PUSH
39507: LD_INT 80
39509: PUSH
39510: LD_INT 65
39512: PUSH
39513: LD_INT 100
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: LIST
39520: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39521: LD_VAR 0 6
39525: PPUSH
39526: CALL_OW 263
39530: PUSH
39531: LD_INT 1
39533: EQUAL
39534: IFFALSE 39569
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39536: LD_ADDR_VAR 0 10
39540: PUSH
39541: LD_VAR 0 10
39545: PUSH
39546: LD_VAR 0 6
39550: PPUSH
39551: CALL_OW 311
39555: PPUSH
39556: LD_INT 3
39558: PPUSH
39559: CALL_OW 259
39563: PUSH
39564: LD_INT 4
39566: MUL
39567: MUL
39568: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39569: LD_VAR 0 6
39573: PPUSH
39574: CALL_OW 263
39578: PUSH
39579: LD_INT 2
39581: EQUAL
39582: IFFALSE 39633
// begin j := IsControledBy ( i ) ;
39584: LD_ADDR_VAR 0 7
39588: PUSH
39589: LD_VAR 0 6
39593: PPUSH
39594: CALL_OW 312
39598: ST_TO_ADDR
// if j then
39599: LD_VAR 0 7
39603: IFFALSE 39633
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39605: LD_ADDR_VAR 0 10
39609: PUSH
39610: LD_VAR 0 10
39614: PUSH
39615: LD_VAR 0 7
39619: PPUSH
39620: LD_INT 3
39622: PPUSH
39623: CALL_OW 259
39627: PUSH
39628: LD_INT 3
39630: MUL
39631: MUL
39632: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39633: LD_VAR 0 6
39637: PPUSH
39638: CALL_OW 264
39642: PUSH
39643: LD_INT 5
39645: PUSH
39646: LD_INT 6
39648: PUSH
39649: LD_INT 46
39651: PUSH
39652: LD_INT 44
39654: PUSH
39655: LD_INT 47
39657: PUSH
39658: LD_INT 45
39660: PUSH
39661: LD_INT 28
39663: PUSH
39664: LD_INT 7
39666: PUSH
39667: LD_INT 27
39669: PUSH
39670: LD_INT 29
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: IN
39685: PUSH
39686: LD_VAR 0 1
39690: PPUSH
39691: LD_INT 52
39693: PPUSH
39694: CALL_OW 321
39698: PUSH
39699: LD_INT 2
39701: EQUAL
39702: AND
39703: IFFALSE 39720
// bpoints := bpoints * 1.2 ;
39705: LD_ADDR_VAR 0 10
39709: PUSH
39710: LD_VAR 0 10
39714: PUSH
39715: LD_REAL  1.20000000000000E+0000
39718: MUL
39719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39720: LD_VAR 0 6
39724: PPUSH
39725: CALL_OW 264
39729: PUSH
39730: LD_INT 6
39732: PUSH
39733: LD_INT 46
39735: PUSH
39736: LD_INT 47
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: LIST
39743: IN
39744: IFFALSE 39761
// bpoints := bpoints * 1.2 ;
39746: LD_ADDR_VAR 0 10
39750: PUSH
39751: LD_VAR 0 10
39755: PUSH
39756: LD_REAL  1.20000000000000E+0000
39759: MUL
39760: ST_TO_ADDR
// end ; unit_building :
39761: GO 39775
39763: LD_INT 3
39765: DOUBLE
39766: EQUAL
39767: IFTRUE 39771
39769: GO 39774
39771: POP
// ; end ;
39772: GO 39775
39774: POP
// for j = 1 to 3 do
39775: LD_ADDR_VAR 0 7
39779: PUSH
39780: DOUBLE
39781: LD_INT 1
39783: DEC
39784: ST_TO_ADDR
39785: LD_INT 3
39787: PUSH
39788: FOR_TO
39789: IFFALSE 39842
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39791: LD_ADDR_VAR 0 5
39795: PUSH
39796: LD_VAR 0 5
39800: PPUSH
39801: LD_VAR 0 7
39805: PPUSH
39806: LD_VAR 0 5
39810: PUSH
39811: LD_VAR 0 7
39815: ARRAY
39816: PUSH
39817: LD_VAR 0 9
39821: PUSH
39822: LD_VAR 0 7
39826: ARRAY
39827: PUSH
39828: LD_VAR 0 10
39832: MUL
39833: PLUS
39834: PPUSH
39835: CALL_OW 1
39839: ST_TO_ADDR
39840: GO 39788
39842: POP
39843: POP
// end ;
39844: GO 38323
39846: POP
39847: POP
// result := Replace ( result , 4 , tmp ) ;
39848: LD_ADDR_VAR 0 5
39852: PUSH
39853: LD_VAR 0 5
39857: PPUSH
39858: LD_INT 4
39860: PPUSH
39861: LD_VAR 0 8
39865: PPUSH
39866: CALL_OW 1
39870: ST_TO_ADDR
// end ;
39871: LD_VAR 0 5
39875: RET
// export function DangerAtRange ( unit , range ) ; begin
39876: LD_INT 0
39878: PPUSH
// if not unit then
39879: LD_VAR 0 1
39883: NOT
39884: IFFALSE 39888
// exit ;
39886: GO 39933
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39888: LD_ADDR_VAR 0 3
39892: PUSH
39893: LD_VAR 0 1
39897: PPUSH
39898: CALL_OW 255
39902: PPUSH
39903: LD_VAR 0 1
39907: PPUSH
39908: CALL_OW 250
39912: PPUSH
39913: LD_VAR 0 1
39917: PPUSH
39918: CALL_OW 251
39922: PPUSH
39923: LD_VAR 0 2
39927: PPUSH
39928: CALL 38175 0 4
39932: ST_TO_ADDR
// end ;
39933: LD_VAR 0 3
39937: RET
// export function DangerInArea ( side , area ) ; begin
39938: LD_INT 0
39940: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39941: LD_ADDR_VAR 0 3
39945: PUSH
39946: LD_VAR 0 2
39950: PPUSH
39951: LD_INT 81
39953: PUSH
39954: LD_VAR 0 1
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PPUSH
39963: CALL_OW 70
39967: ST_TO_ADDR
// end ;
39968: LD_VAR 0 3
39972: RET
// export function IsExtension ( b ) ; begin
39973: LD_INT 0
39975: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39976: LD_ADDR_VAR 0 2
39980: PUSH
39981: LD_VAR 0 1
39985: PUSH
39986: LD_INT 23
39988: PUSH
39989: LD_INT 20
39991: PUSH
39992: LD_INT 22
39994: PUSH
39995: LD_INT 17
39997: PUSH
39998: LD_INT 24
40000: PUSH
40001: LD_INT 21
40003: PUSH
40004: LD_INT 19
40006: PUSH
40007: LD_INT 16
40009: PUSH
40010: LD_INT 25
40012: PUSH
40013: LD_INT 18
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: IN
40028: ST_TO_ADDR
// end ;
40029: LD_VAR 0 2
40033: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40034: LD_INT 0
40036: PPUSH
40037: PPUSH
40038: PPUSH
// result := [ ] ;
40039: LD_ADDR_VAR 0 4
40043: PUSH
40044: EMPTY
40045: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40046: LD_ADDR_VAR 0 5
40050: PUSH
40051: LD_VAR 0 2
40055: PPUSH
40056: LD_INT 21
40058: PUSH
40059: LD_INT 3
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PPUSH
40066: CALL_OW 70
40070: ST_TO_ADDR
// if not tmp then
40071: LD_VAR 0 5
40075: NOT
40076: IFFALSE 40080
// exit ;
40078: GO 40144
// if checkLink then
40080: LD_VAR 0 3
40084: IFFALSE 40134
// begin for i in tmp do
40086: LD_ADDR_VAR 0 6
40090: PUSH
40091: LD_VAR 0 5
40095: PUSH
40096: FOR_IN
40097: IFFALSE 40132
// if GetBase ( i ) <> base then
40099: LD_VAR 0 6
40103: PPUSH
40104: CALL_OW 274
40108: PUSH
40109: LD_VAR 0 1
40113: NONEQUAL
40114: IFFALSE 40130
// ComLinkToBase ( base , i ) ;
40116: LD_VAR 0 1
40120: PPUSH
40121: LD_VAR 0 6
40125: PPUSH
40126: CALL_OW 169
40130: GO 40096
40132: POP
40133: POP
// end ; result := tmp ;
40134: LD_ADDR_VAR 0 4
40138: PUSH
40139: LD_VAR 0 5
40143: ST_TO_ADDR
// end ;
40144: LD_VAR 0 4
40148: RET
// export function ComComplete ( units , b ) ; var i ; begin
40149: LD_INT 0
40151: PPUSH
40152: PPUSH
// if not units then
40153: LD_VAR 0 1
40157: NOT
40158: IFFALSE 40162
// exit ;
40160: GO 40252
// for i in units do
40162: LD_ADDR_VAR 0 4
40166: PUSH
40167: LD_VAR 0 1
40171: PUSH
40172: FOR_IN
40173: IFFALSE 40250
// if BuildingStatus ( b ) = bs_build then
40175: LD_VAR 0 2
40179: PPUSH
40180: CALL_OW 461
40184: PUSH
40185: LD_INT 1
40187: EQUAL
40188: IFFALSE 40248
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40190: LD_VAR 0 4
40194: PPUSH
40195: LD_STRING h
40197: PUSH
40198: LD_VAR 0 2
40202: PPUSH
40203: CALL_OW 250
40207: PUSH
40208: LD_VAR 0 2
40212: PPUSH
40213: CALL_OW 251
40217: PUSH
40218: LD_VAR 0 2
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: PUSH
40241: EMPTY
40242: LIST
40243: PPUSH
40244: CALL_OW 446
40248: GO 40172
40250: POP
40251: POP
// end ;
40252: LD_VAR 0 3
40256: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40257: LD_INT 0
40259: PPUSH
40260: PPUSH
40261: PPUSH
40262: PPUSH
40263: PPUSH
40264: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40265: LD_VAR 0 1
40269: NOT
40270: PUSH
40271: LD_VAR 0 1
40275: PPUSH
40276: CALL_OW 263
40280: PUSH
40281: LD_INT 2
40283: NONEQUAL
40284: OR
40285: IFFALSE 40289
// exit ;
40287: GO 40605
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40289: LD_ADDR_VAR 0 6
40293: PUSH
40294: LD_INT 22
40296: PUSH
40297: LD_VAR 0 1
40301: PPUSH
40302: CALL_OW 255
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 2
40313: PUSH
40314: LD_INT 30
40316: PUSH
40317: LD_INT 36
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 34
40326: PUSH
40327: LD_INT 31
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: LIST
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PPUSH
40343: CALL_OW 69
40347: ST_TO_ADDR
// if not tmp then
40348: LD_VAR 0 6
40352: NOT
40353: IFFALSE 40357
// exit ;
40355: GO 40605
// result := [ ] ;
40357: LD_ADDR_VAR 0 2
40361: PUSH
40362: EMPTY
40363: ST_TO_ADDR
// for i in tmp do
40364: LD_ADDR_VAR 0 3
40368: PUSH
40369: LD_VAR 0 6
40373: PUSH
40374: FOR_IN
40375: IFFALSE 40446
// begin t := UnitsInside ( i ) ;
40377: LD_ADDR_VAR 0 4
40381: PUSH
40382: LD_VAR 0 3
40386: PPUSH
40387: CALL_OW 313
40391: ST_TO_ADDR
// if t then
40392: LD_VAR 0 4
40396: IFFALSE 40444
// for j in t do
40398: LD_ADDR_VAR 0 7
40402: PUSH
40403: LD_VAR 0 4
40407: PUSH
40408: FOR_IN
40409: IFFALSE 40442
// result := Replace ( result , result + 1 , j ) ;
40411: LD_ADDR_VAR 0 2
40415: PUSH
40416: LD_VAR 0 2
40420: PPUSH
40421: LD_VAR 0 2
40425: PUSH
40426: LD_INT 1
40428: PLUS
40429: PPUSH
40430: LD_VAR 0 7
40434: PPUSH
40435: CALL_OW 1
40439: ST_TO_ADDR
40440: GO 40408
40442: POP
40443: POP
// end ;
40444: GO 40374
40446: POP
40447: POP
// if not result then
40448: LD_VAR 0 2
40452: NOT
40453: IFFALSE 40457
// exit ;
40455: GO 40605
// mech := result [ 1 ] ;
40457: LD_ADDR_VAR 0 5
40461: PUSH
40462: LD_VAR 0 2
40466: PUSH
40467: LD_INT 1
40469: ARRAY
40470: ST_TO_ADDR
// if result > 1 then
40471: LD_VAR 0 2
40475: PUSH
40476: LD_INT 1
40478: GREATER
40479: IFFALSE 40591
// begin for i = 2 to result do
40481: LD_ADDR_VAR 0 3
40485: PUSH
40486: DOUBLE
40487: LD_INT 2
40489: DEC
40490: ST_TO_ADDR
40491: LD_VAR 0 2
40495: PUSH
40496: FOR_TO
40497: IFFALSE 40589
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40499: LD_ADDR_VAR 0 4
40503: PUSH
40504: LD_VAR 0 2
40508: PUSH
40509: LD_VAR 0 3
40513: ARRAY
40514: PPUSH
40515: LD_INT 3
40517: PPUSH
40518: CALL_OW 259
40522: PUSH
40523: LD_VAR 0 2
40527: PUSH
40528: LD_VAR 0 3
40532: ARRAY
40533: PPUSH
40534: CALL_OW 432
40538: MINUS
40539: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40540: LD_VAR 0 4
40544: PUSH
40545: LD_VAR 0 5
40549: PPUSH
40550: LD_INT 3
40552: PPUSH
40553: CALL_OW 259
40557: PUSH
40558: LD_VAR 0 5
40562: PPUSH
40563: CALL_OW 432
40567: MINUS
40568: GREATEREQUAL
40569: IFFALSE 40587
// mech := result [ i ] ;
40571: LD_ADDR_VAR 0 5
40575: PUSH
40576: LD_VAR 0 2
40580: PUSH
40581: LD_VAR 0 3
40585: ARRAY
40586: ST_TO_ADDR
// end ;
40587: GO 40496
40589: POP
40590: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40591: LD_VAR 0 1
40595: PPUSH
40596: LD_VAR 0 5
40600: PPUSH
40601: CALL_OW 135
// end ;
40605: LD_VAR 0 2
40609: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40610: LD_INT 0
40612: PPUSH
40613: PPUSH
40614: PPUSH
40615: PPUSH
40616: PPUSH
40617: PPUSH
40618: PPUSH
40619: PPUSH
40620: PPUSH
40621: PPUSH
40622: PPUSH
40623: PPUSH
40624: PPUSH
// result := [ ] ;
40625: LD_ADDR_VAR 0 7
40629: PUSH
40630: EMPTY
40631: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40632: LD_VAR 0 1
40636: PPUSH
40637: CALL_OW 266
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: IN
40652: NOT
40653: IFFALSE 40657
// exit ;
40655: GO 42291
// if name then
40657: LD_VAR 0 3
40661: IFFALSE 40677
// SetBName ( base_dep , name ) ;
40663: LD_VAR 0 1
40667: PPUSH
40668: LD_VAR 0 3
40672: PPUSH
40673: CALL_OW 500
// base := GetBase ( base_dep ) ;
40677: LD_ADDR_VAR 0 15
40681: PUSH
40682: LD_VAR 0 1
40686: PPUSH
40687: CALL_OW 274
40691: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40692: LD_ADDR_VAR 0 16
40696: PUSH
40697: LD_VAR 0 1
40701: PPUSH
40702: CALL_OW 255
40706: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40707: LD_ADDR_VAR 0 17
40711: PUSH
40712: LD_VAR 0 1
40716: PPUSH
40717: CALL_OW 248
40721: ST_TO_ADDR
// if sources then
40722: LD_VAR 0 5
40726: IFFALSE 40773
// for i = 1 to 3 do
40728: LD_ADDR_VAR 0 8
40732: PUSH
40733: DOUBLE
40734: LD_INT 1
40736: DEC
40737: ST_TO_ADDR
40738: LD_INT 3
40740: PUSH
40741: FOR_TO
40742: IFFALSE 40771
// AddResourceType ( base , i , sources [ i ] ) ;
40744: LD_VAR 0 15
40748: PPUSH
40749: LD_VAR 0 8
40753: PPUSH
40754: LD_VAR 0 5
40758: PUSH
40759: LD_VAR 0 8
40763: ARRAY
40764: PPUSH
40765: CALL_OW 276
40769: GO 40741
40771: POP
40772: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40773: LD_ADDR_VAR 0 18
40777: PUSH
40778: LD_VAR 0 15
40782: PPUSH
40783: LD_VAR 0 2
40787: PPUSH
40788: LD_INT 1
40790: PPUSH
40791: CALL 40034 0 3
40795: ST_TO_ADDR
// InitHc ;
40796: CALL_OW 19
// InitUc ;
40800: CALL_OW 18
// uc_side := side ;
40804: LD_ADDR_OWVAR 20
40808: PUSH
40809: LD_VAR 0 16
40813: ST_TO_ADDR
// uc_nation := nation ;
40814: LD_ADDR_OWVAR 21
40818: PUSH
40819: LD_VAR 0 17
40823: ST_TO_ADDR
// if buildings then
40824: LD_VAR 0 18
40828: IFFALSE 42150
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40830: LD_ADDR_VAR 0 19
40834: PUSH
40835: LD_VAR 0 18
40839: PPUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 30
40845: PUSH
40846: LD_INT 29
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 30
40855: PUSH
40856: LD_INT 30
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: LIST
40867: PPUSH
40868: CALL_OW 72
40872: ST_TO_ADDR
// if tmp then
40873: LD_VAR 0 19
40877: IFFALSE 40925
// for i in tmp do
40879: LD_ADDR_VAR 0 8
40883: PUSH
40884: LD_VAR 0 19
40888: PUSH
40889: FOR_IN
40890: IFFALSE 40923
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40892: LD_VAR 0 8
40896: PPUSH
40897: CALL_OW 250
40901: PPUSH
40902: LD_VAR 0 8
40906: PPUSH
40907: CALL_OW 251
40911: PPUSH
40912: LD_VAR 0 16
40916: PPUSH
40917: CALL_OW 441
40921: GO 40889
40923: POP
40924: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40925: LD_VAR 0 18
40929: PPUSH
40930: LD_INT 2
40932: PUSH
40933: LD_INT 30
40935: PUSH
40936: LD_INT 32
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 30
40945: PUSH
40946: LD_INT 33
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: LIST
40957: PPUSH
40958: CALL_OW 72
40962: IFFALSE 41050
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40964: LD_ADDR_VAR 0 8
40968: PUSH
40969: LD_VAR 0 18
40973: PPUSH
40974: LD_INT 2
40976: PUSH
40977: LD_INT 30
40979: PUSH
40980: LD_INT 32
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 30
40989: PUSH
40990: LD_INT 33
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: LIST
41001: PPUSH
41002: CALL_OW 72
41006: PUSH
41007: FOR_IN
41008: IFFALSE 41048
// begin if not GetBWeapon ( i ) then
41010: LD_VAR 0 8
41014: PPUSH
41015: CALL_OW 269
41019: NOT
41020: IFFALSE 41046
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41022: LD_VAR 0 8
41026: PPUSH
41027: LD_VAR 0 8
41031: PPUSH
41032: LD_VAR 0 2
41036: PPUSH
41037: CALL 42296 0 2
41041: PPUSH
41042: CALL_OW 431
// end ;
41046: GO 41007
41048: POP
41049: POP
// end ; for i = 1 to personel do
41050: LD_ADDR_VAR 0 8
41054: PUSH
41055: DOUBLE
41056: LD_INT 1
41058: DEC
41059: ST_TO_ADDR
41060: LD_VAR 0 6
41064: PUSH
41065: FOR_TO
41066: IFFALSE 42130
// begin if i > 4 then
41068: LD_VAR 0 8
41072: PUSH
41073: LD_INT 4
41075: GREATER
41076: IFFALSE 41080
// break ;
41078: GO 42130
// case i of 1 :
41080: LD_VAR 0 8
41084: PUSH
41085: LD_INT 1
41087: DOUBLE
41088: EQUAL
41089: IFTRUE 41093
41091: GO 41173
41093: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41094: LD_ADDR_VAR 0 12
41098: PUSH
41099: LD_VAR 0 18
41103: PPUSH
41104: LD_INT 22
41106: PUSH
41107: LD_VAR 0 16
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 58
41118: PUSH
41119: EMPTY
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: LD_INT 30
41127: PUSH
41128: LD_INT 32
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 30
41137: PUSH
41138: LD_INT 4
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 30
41147: PUSH
41148: LD_INT 5
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: LIST
41165: PPUSH
41166: CALL_OW 72
41170: ST_TO_ADDR
41171: GO 41395
41173: LD_INT 2
41175: DOUBLE
41176: EQUAL
41177: IFTRUE 41181
41179: GO 41243
41181: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41182: LD_ADDR_VAR 0 12
41186: PUSH
41187: LD_VAR 0 18
41191: PPUSH
41192: LD_INT 22
41194: PUSH
41195: LD_VAR 0 16
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 2
41206: PUSH
41207: LD_INT 30
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 30
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: LIST
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PPUSH
41236: CALL_OW 72
41240: ST_TO_ADDR
41241: GO 41395
41243: LD_INT 3
41245: DOUBLE
41246: EQUAL
41247: IFTRUE 41251
41249: GO 41313
41251: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41252: LD_ADDR_VAR 0 12
41256: PUSH
41257: LD_VAR 0 18
41261: PPUSH
41262: LD_INT 22
41264: PUSH
41265: LD_VAR 0 16
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 2
41276: PUSH
41277: LD_INT 30
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 30
41289: PUSH
41290: LD_INT 3
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: LIST
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PPUSH
41306: CALL_OW 72
41310: ST_TO_ADDR
41311: GO 41395
41313: LD_INT 4
41315: DOUBLE
41316: EQUAL
41317: IFTRUE 41321
41319: GO 41394
41321: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41322: LD_ADDR_VAR 0 12
41326: PUSH
41327: LD_VAR 0 18
41331: PPUSH
41332: LD_INT 22
41334: PUSH
41335: LD_VAR 0 16
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: LD_INT 30
41349: PUSH
41350: LD_INT 6
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 30
41359: PUSH
41360: LD_INT 7
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 30
41369: PUSH
41370: LD_INT 8
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PPUSH
41387: CALL_OW 72
41391: ST_TO_ADDR
41392: GO 41395
41394: POP
// if i = 1 then
41395: LD_VAR 0 8
41399: PUSH
41400: LD_INT 1
41402: EQUAL
41403: IFFALSE 41514
// begin tmp := [ ] ;
41405: LD_ADDR_VAR 0 19
41409: PUSH
41410: EMPTY
41411: ST_TO_ADDR
// for j in f do
41412: LD_ADDR_VAR 0 9
41416: PUSH
41417: LD_VAR 0 12
41421: PUSH
41422: FOR_IN
41423: IFFALSE 41496
// if GetBType ( j ) = b_bunker then
41425: LD_VAR 0 9
41429: PPUSH
41430: CALL_OW 266
41434: PUSH
41435: LD_INT 32
41437: EQUAL
41438: IFFALSE 41465
// tmp := Insert ( tmp , 1 , j ) else
41440: LD_ADDR_VAR 0 19
41444: PUSH
41445: LD_VAR 0 19
41449: PPUSH
41450: LD_INT 1
41452: PPUSH
41453: LD_VAR 0 9
41457: PPUSH
41458: CALL_OW 2
41462: ST_TO_ADDR
41463: GO 41494
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41465: LD_ADDR_VAR 0 19
41469: PUSH
41470: LD_VAR 0 19
41474: PPUSH
41475: LD_VAR 0 19
41479: PUSH
41480: LD_INT 1
41482: PLUS
41483: PPUSH
41484: LD_VAR 0 9
41488: PPUSH
41489: CALL_OW 2
41493: ST_TO_ADDR
41494: GO 41422
41496: POP
41497: POP
// if tmp then
41498: LD_VAR 0 19
41502: IFFALSE 41514
// f := tmp ;
41504: LD_ADDR_VAR 0 12
41508: PUSH
41509: LD_VAR 0 19
41513: ST_TO_ADDR
// end ; x := personel [ i ] ;
41514: LD_ADDR_VAR 0 13
41518: PUSH
41519: LD_VAR 0 6
41523: PUSH
41524: LD_VAR 0 8
41528: ARRAY
41529: ST_TO_ADDR
// if x = - 1 then
41530: LD_VAR 0 13
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: EQUAL
41539: IFFALSE 41748
// begin for j in f do
41541: LD_ADDR_VAR 0 9
41545: PUSH
41546: LD_VAR 0 12
41550: PUSH
41551: FOR_IN
41552: IFFALSE 41744
// repeat InitHc ;
41554: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41558: LD_VAR 0 9
41562: PPUSH
41563: CALL_OW 266
41567: PUSH
41568: LD_INT 5
41570: EQUAL
41571: IFFALSE 41641
// begin if UnitsInside ( j ) < 3 then
41573: LD_VAR 0 9
41577: PPUSH
41578: CALL_OW 313
41582: PUSH
41583: LD_INT 3
41585: LESS
41586: IFFALSE 41622
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41588: LD_INT 0
41590: PPUSH
41591: LD_INT 5
41593: PUSH
41594: LD_INT 8
41596: PUSH
41597: LD_INT 9
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: LIST
41604: PUSH
41605: LD_VAR 0 17
41609: ARRAY
41610: PPUSH
41611: LD_VAR 0 4
41615: PPUSH
41616: CALL_OW 380
41620: GO 41639
// PrepareHuman ( false , i , skill ) ;
41622: LD_INT 0
41624: PPUSH
41625: LD_VAR 0 8
41629: PPUSH
41630: LD_VAR 0 4
41634: PPUSH
41635: CALL_OW 380
// end else
41639: GO 41658
// PrepareHuman ( false , i , skill ) ;
41641: LD_INT 0
41643: PPUSH
41644: LD_VAR 0 8
41648: PPUSH
41649: LD_VAR 0 4
41653: PPUSH
41654: CALL_OW 380
// un := CreateHuman ;
41658: LD_ADDR_VAR 0 14
41662: PUSH
41663: CALL_OW 44
41667: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41668: LD_ADDR_VAR 0 7
41672: PUSH
41673: LD_VAR 0 7
41677: PPUSH
41678: LD_INT 1
41680: PPUSH
41681: LD_VAR 0 14
41685: PPUSH
41686: CALL_OW 2
41690: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41691: LD_VAR 0 14
41695: PPUSH
41696: LD_VAR 0 9
41700: PPUSH
41701: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41705: LD_VAR 0 9
41709: PPUSH
41710: CALL_OW 313
41714: PUSH
41715: LD_INT 6
41717: EQUAL
41718: PUSH
41719: LD_VAR 0 9
41723: PPUSH
41724: CALL_OW 266
41728: PUSH
41729: LD_INT 32
41731: PUSH
41732: LD_INT 31
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: IN
41739: OR
41740: IFFALSE 41554
41742: GO 41551
41744: POP
41745: POP
// end else
41746: GO 42128
// for j = 1 to x do
41748: LD_ADDR_VAR 0 9
41752: PUSH
41753: DOUBLE
41754: LD_INT 1
41756: DEC
41757: ST_TO_ADDR
41758: LD_VAR 0 13
41762: PUSH
41763: FOR_TO
41764: IFFALSE 42126
// begin InitHc ;
41766: CALL_OW 19
// if not f then
41770: LD_VAR 0 12
41774: NOT
41775: IFFALSE 41864
// begin PrepareHuman ( false , i , skill ) ;
41777: LD_INT 0
41779: PPUSH
41780: LD_VAR 0 8
41784: PPUSH
41785: LD_VAR 0 4
41789: PPUSH
41790: CALL_OW 380
// un := CreateHuman ;
41794: LD_ADDR_VAR 0 14
41798: PUSH
41799: CALL_OW 44
41803: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41804: LD_ADDR_VAR 0 7
41808: PUSH
41809: LD_VAR 0 7
41813: PPUSH
41814: LD_INT 1
41816: PPUSH
41817: LD_VAR 0 14
41821: PPUSH
41822: CALL_OW 2
41826: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41827: LD_VAR 0 14
41831: PPUSH
41832: LD_VAR 0 1
41836: PPUSH
41837: CALL_OW 250
41841: PPUSH
41842: LD_VAR 0 1
41846: PPUSH
41847: CALL_OW 251
41851: PPUSH
41852: LD_INT 10
41854: PPUSH
41855: LD_INT 0
41857: PPUSH
41858: CALL_OW 50
// continue ;
41862: GO 41763
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41864: LD_VAR 0 12
41868: PUSH
41869: LD_INT 1
41871: ARRAY
41872: PPUSH
41873: CALL_OW 313
41877: PUSH
41878: LD_VAR 0 12
41882: PUSH
41883: LD_INT 1
41885: ARRAY
41886: PPUSH
41887: CALL_OW 266
41891: PUSH
41892: LD_INT 32
41894: PUSH
41895: LD_INT 31
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: IN
41902: AND
41903: PUSH
41904: LD_VAR 0 12
41908: PUSH
41909: LD_INT 1
41911: ARRAY
41912: PPUSH
41913: CALL_OW 313
41917: PUSH
41918: LD_INT 6
41920: EQUAL
41921: OR
41922: IFFALSE 41942
// f := Delete ( f , 1 ) ;
41924: LD_ADDR_VAR 0 12
41928: PUSH
41929: LD_VAR 0 12
41933: PPUSH
41934: LD_INT 1
41936: PPUSH
41937: CALL_OW 3
41941: ST_TO_ADDR
// if not f then
41942: LD_VAR 0 12
41946: NOT
41947: IFFALSE 41965
// begin x := x + 2 ;
41949: LD_ADDR_VAR 0 13
41953: PUSH
41954: LD_VAR 0 13
41958: PUSH
41959: LD_INT 2
41961: PLUS
41962: ST_TO_ADDR
// continue ;
41963: GO 41763
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41965: LD_VAR 0 12
41969: PUSH
41970: LD_INT 1
41972: ARRAY
41973: PPUSH
41974: CALL_OW 266
41978: PUSH
41979: LD_INT 5
41981: EQUAL
41982: IFFALSE 42056
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41984: LD_VAR 0 12
41988: PUSH
41989: LD_INT 1
41991: ARRAY
41992: PPUSH
41993: CALL_OW 313
41997: PUSH
41998: LD_INT 3
42000: LESS
42001: IFFALSE 42037
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42003: LD_INT 0
42005: PPUSH
42006: LD_INT 5
42008: PUSH
42009: LD_INT 8
42011: PUSH
42012: LD_INT 9
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: PUSH
42020: LD_VAR 0 17
42024: ARRAY
42025: PPUSH
42026: LD_VAR 0 4
42030: PPUSH
42031: CALL_OW 380
42035: GO 42054
// PrepareHuman ( false , i , skill ) ;
42037: LD_INT 0
42039: PPUSH
42040: LD_VAR 0 8
42044: PPUSH
42045: LD_VAR 0 4
42049: PPUSH
42050: CALL_OW 380
// end else
42054: GO 42073
// PrepareHuman ( false , i , skill ) ;
42056: LD_INT 0
42058: PPUSH
42059: LD_VAR 0 8
42063: PPUSH
42064: LD_VAR 0 4
42068: PPUSH
42069: CALL_OW 380
// un := CreateHuman ;
42073: LD_ADDR_VAR 0 14
42077: PUSH
42078: CALL_OW 44
42082: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42083: LD_ADDR_VAR 0 7
42087: PUSH
42088: LD_VAR 0 7
42092: PPUSH
42093: LD_INT 1
42095: PPUSH
42096: LD_VAR 0 14
42100: PPUSH
42101: CALL_OW 2
42105: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42106: LD_VAR 0 14
42110: PPUSH
42111: LD_VAR 0 12
42115: PUSH
42116: LD_INT 1
42118: ARRAY
42119: PPUSH
42120: CALL_OW 52
// end ;
42124: GO 41763
42126: POP
42127: POP
// end ;
42128: GO 41065
42130: POP
42131: POP
// result := result ^ buildings ;
42132: LD_ADDR_VAR 0 7
42136: PUSH
42137: LD_VAR 0 7
42141: PUSH
42142: LD_VAR 0 18
42146: ADD
42147: ST_TO_ADDR
// end else
42148: GO 42291
// begin for i = 1 to personel do
42150: LD_ADDR_VAR 0 8
42154: PUSH
42155: DOUBLE
42156: LD_INT 1
42158: DEC
42159: ST_TO_ADDR
42160: LD_VAR 0 6
42164: PUSH
42165: FOR_TO
42166: IFFALSE 42289
// begin if i > 4 then
42168: LD_VAR 0 8
42172: PUSH
42173: LD_INT 4
42175: GREATER
42176: IFFALSE 42180
// break ;
42178: GO 42289
// x := personel [ i ] ;
42180: LD_ADDR_VAR 0 13
42184: PUSH
42185: LD_VAR 0 6
42189: PUSH
42190: LD_VAR 0 8
42194: ARRAY
42195: ST_TO_ADDR
// if x = - 1 then
42196: LD_VAR 0 13
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: EQUAL
42205: IFFALSE 42209
// continue ;
42207: GO 42165
// PrepareHuman ( false , i , skill ) ;
42209: LD_INT 0
42211: PPUSH
42212: LD_VAR 0 8
42216: PPUSH
42217: LD_VAR 0 4
42221: PPUSH
42222: CALL_OW 380
// un := CreateHuman ;
42226: LD_ADDR_VAR 0 14
42230: PUSH
42231: CALL_OW 44
42235: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42236: LD_VAR 0 14
42240: PPUSH
42241: LD_VAR 0 1
42245: PPUSH
42246: CALL_OW 250
42250: PPUSH
42251: LD_VAR 0 1
42255: PPUSH
42256: CALL_OW 251
42260: PPUSH
42261: LD_INT 10
42263: PPUSH
42264: LD_INT 0
42266: PPUSH
42267: CALL_OW 50
// result := result ^ un ;
42271: LD_ADDR_VAR 0 7
42275: PUSH
42276: LD_VAR 0 7
42280: PUSH
42281: LD_VAR 0 14
42285: ADD
42286: ST_TO_ADDR
// end ;
42287: GO 42165
42289: POP
42290: POP
// end ; end ;
42291: LD_VAR 0 7
42295: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42296: LD_INT 0
42298: PPUSH
42299: PPUSH
42300: PPUSH
42301: PPUSH
42302: PPUSH
42303: PPUSH
42304: PPUSH
42305: PPUSH
42306: PPUSH
42307: PPUSH
42308: PPUSH
42309: PPUSH
42310: PPUSH
42311: PPUSH
42312: PPUSH
42313: PPUSH
// result := false ;
42314: LD_ADDR_VAR 0 3
42318: PUSH
42319: LD_INT 0
42321: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42322: LD_VAR 0 1
42326: NOT
42327: PUSH
42328: LD_VAR 0 1
42332: PPUSH
42333: CALL_OW 266
42337: PUSH
42338: LD_INT 32
42340: PUSH
42341: LD_INT 33
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: IN
42348: NOT
42349: OR
42350: IFFALSE 42354
// exit ;
42352: GO 43463
// nat := GetNation ( tower ) ;
42354: LD_ADDR_VAR 0 12
42358: PUSH
42359: LD_VAR 0 1
42363: PPUSH
42364: CALL_OW 248
42368: ST_TO_ADDR
// side := GetSide ( tower ) ;
42369: LD_ADDR_VAR 0 16
42373: PUSH
42374: LD_VAR 0 1
42378: PPUSH
42379: CALL_OW 255
42383: ST_TO_ADDR
// x := GetX ( tower ) ;
42384: LD_ADDR_VAR 0 10
42388: PUSH
42389: LD_VAR 0 1
42393: PPUSH
42394: CALL_OW 250
42398: ST_TO_ADDR
// y := GetY ( tower ) ;
42399: LD_ADDR_VAR 0 11
42403: PUSH
42404: LD_VAR 0 1
42408: PPUSH
42409: CALL_OW 251
42413: ST_TO_ADDR
// if not x or not y then
42414: LD_VAR 0 10
42418: NOT
42419: PUSH
42420: LD_VAR 0 11
42424: NOT
42425: OR
42426: IFFALSE 42430
// exit ;
42428: GO 43463
// weapon := 0 ;
42430: LD_ADDR_VAR 0 18
42434: PUSH
42435: LD_INT 0
42437: ST_TO_ADDR
// fac_list := [ ] ;
42438: LD_ADDR_VAR 0 17
42442: PUSH
42443: EMPTY
42444: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42445: LD_ADDR_VAR 0 6
42449: PUSH
42450: LD_VAR 0 1
42454: PPUSH
42455: CALL_OW 274
42459: PPUSH
42460: LD_VAR 0 2
42464: PPUSH
42465: LD_INT 0
42467: PPUSH
42468: CALL 40034 0 3
42472: PPUSH
42473: LD_INT 30
42475: PUSH
42476: LD_INT 3
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PPUSH
42483: CALL_OW 72
42487: ST_TO_ADDR
// if not factories then
42488: LD_VAR 0 6
42492: NOT
42493: IFFALSE 42497
// exit ;
42495: GO 43463
// for i in factories do
42497: LD_ADDR_VAR 0 8
42501: PUSH
42502: LD_VAR 0 6
42506: PUSH
42507: FOR_IN
42508: IFFALSE 42533
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42510: LD_ADDR_VAR 0 17
42514: PUSH
42515: LD_VAR 0 17
42519: PUSH
42520: LD_VAR 0 8
42524: PPUSH
42525: CALL_OW 478
42529: UNION
42530: ST_TO_ADDR
42531: GO 42507
42533: POP
42534: POP
// if not fac_list then
42535: LD_VAR 0 17
42539: NOT
42540: IFFALSE 42544
// exit ;
42542: GO 43463
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42544: LD_ADDR_VAR 0 5
42548: PUSH
42549: LD_INT 4
42551: PUSH
42552: LD_INT 5
42554: PUSH
42555: LD_INT 9
42557: PUSH
42558: LD_INT 10
42560: PUSH
42561: LD_INT 6
42563: PUSH
42564: LD_INT 7
42566: PUSH
42567: LD_INT 11
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 27
42581: PUSH
42582: LD_INT 28
42584: PUSH
42585: LD_INT 26
42587: PUSH
42588: LD_INT 30
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 43
42599: PUSH
42600: LD_INT 44
42602: PUSH
42603: LD_INT 46
42605: PUSH
42606: LD_INT 45
42608: PUSH
42609: LD_INT 47
42611: PUSH
42612: LD_INT 49
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: PUSH
42628: LD_VAR 0 12
42632: ARRAY
42633: ST_TO_ADDR
// list := list isect fac_list ;
42634: LD_ADDR_VAR 0 5
42638: PUSH
42639: LD_VAR 0 5
42643: PUSH
42644: LD_VAR 0 17
42648: ISECT
42649: ST_TO_ADDR
// if not list then
42650: LD_VAR 0 5
42654: NOT
42655: IFFALSE 42659
// exit ;
42657: GO 43463
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42659: LD_VAR 0 12
42663: PUSH
42664: LD_INT 3
42666: EQUAL
42667: PUSH
42668: LD_INT 49
42670: PUSH
42671: LD_VAR 0 5
42675: IN
42676: AND
42677: PUSH
42678: LD_INT 31
42680: PPUSH
42681: LD_VAR 0 16
42685: PPUSH
42686: CALL_OW 321
42690: PUSH
42691: LD_INT 2
42693: EQUAL
42694: AND
42695: IFFALSE 42755
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42697: LD_INT 22
42699: PUSH
42700: LD_VAR 0 16
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 35
42711: PUSH
42712: LD_INT 49
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 91
42721: PUSH
42722: LD_VAR 0 1
42726: PUSH
42727: LD_INT 10
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: PPUSH
42740: CALL_OW 69
42744: NOT
42745: IFFALSE 42755
// weapon := ru_time_lapser ;
42747: LD_ADDR_VAR 0 18
42751: PUSH
42752: LD_INT 49
42754: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42755: LD_VAR 0 12
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: LD_INT 2
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: IN
42770: PUSH
42771: LD_INT 11
42773: PUSH
42774: LD_VAR 0 5
42778: IN
42779: PUSH
42780: LD_INT 30
42782: PUSH
42783: LD_VAR 0 5
42787: IN
42788: OR
42789: AND
42790: PUSH
42791: LD_INT 6
42793: PPUSH
42794: LD_VAR 0 16
42798: PPUSH
42799: CALL_OW 321
42803: PUSH
42804: LD_INT 2
42806: EQUAL
42807: AND
42808: IFFALSE 42973
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42810: LD_INT 22
42812: PUSH
42813: LD_VAR 0 16
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: LD_INT 35
42827: PUSH
42828: LD_INT 11
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 35
42837: PUSH
42838: LD_INT 30
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 91
42852: PUSH
42853: LD_VAR 0 1
42857: PUSH
42858: LD_INT 18
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: LIST
42870: PPUSH
42871: CALL_OW 69
42875: NOT
42876: PUSH
42877: LD_INT 22
42879: PUSH
42880: LD_VAR 0 16
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 2
42891: PUSH
42892: LD_INT 30
42894: PUSH
42895: LD_INT 32
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 30
42904: PUSH
42905: LD_INT 33
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 91
42919: PUSH
42920: LD_VAR 0 1
42924: PUSH
42925: LD_INT 12
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: LIST
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: LIST
42937: PUSH
42938: EMPTY
42939: LIST
42940: PPUSH
42941: CALL_OW 69
42945: PUSH
42946: LD_INT 2
42948: GREATER
42949: AND
42950: IFFALSE 42973
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42952: LD_ADDR_VAR 0 18
42956: PUSH
42957: LD_INT 11
42959: PUSH
42960: LD_INT 30
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_VAR 0 12
42971: ARRAY
42972: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42973: LD_VAR 0 18
42977: NOT
42978: PUSH
42979: LD_INT 40
42981: PPUSH
42982: LD_VAR 0 16
42986: PPUSH
42987: CALL_OW 321
42991: PUSH
42992: LD_INT 2
42994: EQUAL
42995: AND
42996: PUSH
42997: LD_INT 7
42999: PUSH
43000: LD_VAR 0 5
43004: IN
43005: PUSH
43006: LD_INT 28
43008: PUSH
43009: LD_VAR 0 5
43013: IN
43014: OR
43015: PUSH
43016: LD_INT 45
43018: PUSH
43019: LD_VAR 0 5
43023: IN
43024: OR
43025: AND
43026: IFFALSE 43280
// begin hex := GetHexInfo ( x , y ) ;
43028: LD_ADDR_VAR 0 4
43032: PUSH
43033: LD_VAR 0 10
43037: PPUSH
43038: LD_VAR 0 11
43042: PPUSH
43043: CALL_OW 546
43047: ST_TO_ADDR
// if hex [ 1 ] then
43048: LD_VAR 0 4
43052: PUSH
43053: LD_INT 1
43055: ARRAY
43056: IFFALSE 43060
// exit ;
43058: GO 43463
// height := hex [ 2 ] ;
43060: LD_ADDR_VAR 0 15
43064: PUSH
43065: LD_VAR 0 4
43069: PUSH
43070: LD_INT 2
43072: ARRAY
43073: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43074: LD_ADDR_VAR 0 14
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: LD_INT 3
43087: PUSH
43088: LD_INT 5
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: ST_TO_ADDR
// for i in tmp do
43097: LD_ADDR_VAR 0 8
43101: PUSH
43102: LD_VAR 0 14
43106: PUSH
43107: FOR_IN
43108: IFFALSE 43278
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43110: LD_ADDR_VAR 0 9
43114: PUSH
43115: LD_VAR 0 10
43119: PPUSH
43120: LD_VAR 0 8
43124: PPUSH
43125: LD_INT 5
43127: PPUSH
43128: CALL_OW 272
43132: PUSH
43133: LD_VAR 0 11
43137: PPUSH
43138: LD_VAR 0 8
43142: PPUSH
43143: LD_INT 5
43145: PPUSH
43146: CALL_OW 273
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43155: LD_VAR 0 9
43159: PUSH
43160: LD_INT 1
43162: ARRAY
43163: PPUSH
43164: LD_VAR 0 9
43168: PUSH
43169: LD_INT 2
43171: ARRAY
43172: PPUSH
43173: CALL_OW 488
43177: IFFALSE 43276
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43179: LD_ADDR_VAR 0 4
43183: PUSH
43184: LD_VAR 0 9
43188: PUSH
43189: LD_INT 1
43191: ARRAY
43192: PPUSH
43193: LD_VAR 0 9
43197: PUSH
43198: LD_INT 2
43200: ARRAY
43201: PPUSH
43202: CALL_OW 546
43206: ST_TO_ADDR
// if hex [ 1 ] then
43207: LD_VAR 0 4
43211: PUSH
43212: LD_INT 1
43214: ARRAY
43215: IFFALSE 43219
// continue ;
43217: GO 43107
// h := hex [ 2 ] ;
43219: LD_ADDR_VAR 0 13
43223: PUSH
43224: LD_VAR 0 4
43228: PUSH
43229: LD_INT 2
43231: ARRAY
43232: ST_TO_ADDR
// if h + 7 < height then
43233: LD_VAR 0 13
43237: PUSH
43238: LD_INT 7
43240: PLUS
43241: PUSH
43242: LD_VAR 0 15
43246: LESS
43247: IFFALSE 43276
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43249: LD_ADDR_VAR 0 18
43253: PUSH
43254: LD_INT 7
43256: PUSH
43257: LD_INT 28
43259: PUSH
43260: LD_INT 45
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: LIST
43267: PUSH
43268: LD_VAR 0 12
43272: ARRAY
43273: ST_TO_ADDR
// break ;
43274: GO 43278
// end ; end ; end ;
43276: GO 43107
43278: POP
43279: POP
// end ; if not weapon then
43280: LD_VAR 0 18
43284: NOT
43285: IFFALSE 43345
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43287: LD_ADDR_VAR 0 5
43291: PUSH
43292: LD_VAR 0 5
43296: PUSH
43297: LD_INT 11
43299: PUSH
43300: LD_INT 30
43302: PUSH
43303: LD_INT 49
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: LIST
43310: DIFF
43311: ST_TO_ADDR
// if not list then
43312: LD_VAR 0 5
43316: NOT
43317: IFFALSE 43321
// exit ;
43319: GO 43463
// weapon := list [ rand ( 1 , list ) ] ;
43321: LD_ADDR_VAR 0 18
43325: PUSH
43326: LD_VAR 0 5
43330: PUSH
43331: LD_INT 1
43333: PPUSH
43334: LD_VAR 0 5
43338: PPUSH
43339: CALL_OW 12
43343: ARRAY
43344: ST_TO_ADDR
// end ; if weapon then
43345: LD_VAR 0 18
43349: IFFALSE 43463
// begin tmp := CostOfWeapon ( weapon ) ;
43351: LD_ADDR_VAR 0 14
43355: PUSH
43356: LD_VAR 0 18
43360: PPUSH
43361: CALL_OW 451
43365: ST_TO_ADDR
// j := GetBase ( tower ) ;
43366: LD_ADDR_VAR 0 9
43370: PUSH
43371: LD_VAR 0 1
43375: PPUSH
43376: CALL_OW 274
43380: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43381: LD_VAR 0 9
43385: PPUSH
43386: LD_INT 1
43388: PPUSH
43389: CALL_OW 275
43393: PUSH
43394: LD_VAR 0 14
43398: PUSH
43399: LD_INT 1
43401: ARRAY
43402: GREATEREQUAL
43403: PUSH
43404: LD_VAR 0 9
43408: PPUSH
43409: LD_INT 2
43411: PPUSH
43412: CALL_OW 275
43416: PUSH
43417: LD_VAR 0 14
43421: PUSH
43422: LD_INT 2
43424: ARRAY
43425: GREATEREQUAL
43426: AND
43427: PUSH
43428: LD_VAR 0 9
43432: PPUSH
43433: LD_INT 3
43435: PPUSH
43436: CALL_OW 275
43440: PUSH
43441: LD_VAR 0 14
43445: PUSH
43446: LD_INT 3
43448: ARRAY
43449: GREATEREQUAL
43450: AND
43451: IFFALSE 43463
// result := weapon ;
43453: LD_ADDR_VAR 0 3
43457: PUSH
43458: LD_VAR 0 18
43462: ST_TO_ADDR
// end ; end ;
43463: LD_VAR 0 3
43467: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43468: LD_INT 0
43470: PPUSH
43471: PPUSH
// result := true ;
43472: LD_ADDR_VAR 0 3
43476: PUSH
43477: LD_INT 1
43479: ST_TO_ADDR
// if array1 = array2 then
43480: LD_VAR 0 1
43484: PUSH
43485: LD_VAR 0 2
43489: EQUAL
43490: IFFALSE 43550
// begin for i = 1 to array1 do
43492: LD_ADDR_VAR 0 4
43496: PUSH
43497: DOUBLE
43498: LD_INT 1
43500: DEC
43501: ST_TO_ADDR
43502: LD_VAR 0 1
43506: PUSH
43507: FOR_TO
43508: IFFALSE 43546
// if array1 [ i ] <> array2 [ i ] then
43510: LD_VAR 0 1
43514: PUSH
43515: LD_VAR 0 4
43519: ARRAY
43520: PUSH
43521: LD_VAR 0 2
43525: PUSH
43526: LD_VAR 0 4
43530: ARRAY
43531: NONEQUAL
43532: IFFALSE 43544
// begin result := false ;
43534: LD_ADDR_VAR 0 3
43538: PUSH
43539: LD_INT 0
43541: ST_TO_ADDR
// break ;
43542: GO 43546
// end ;
43544: GO 43507
43546: POP
43547: POP
// end else
43548: GO 43558
// result := false ;
43550: LD_ADDR_VAR 0 3
43554: PUSH
43555: LD_INT 0
43557: ST_TO_ADDR
// end ;
43558: LD_VAR 0 3
43562: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43563: LD_INT 0
43565: PPUSH
43566: PPUSH
// if not array1 or not array2 then
43567: LD_VAR 0 1
43571: NOT
43572: PUSH
43573: LD_VAR 0 2
43577: NOT
43578: OR
43579: IFFALSE 43583
// exit ;
43581: GO 43647
// result := true ;
43583: LD_ADDR_VAR 0 3
43587: PUSH
43588: LD_INT 1
43590: ST_TO_ADDR
// for i = 1 to array1 do
43591: LD_ADDR_VAR 0 4
43595: PUSH
43596: DOUBLE
43597: LD_INT 1
43599: DEC
43600: ST_TO_ADDR
43601: LD_VAR 0 1
43605: PUSH
43606: FOR_TO
43607: IFFALSE 43645
// if array1 [ i ] <> array2 [ i ] then
43609: LD_VAR 0 1
43613: PUSH
43614: LD_VAR 0 4
43618: ARRAY
43619: PUSH
43620: LD_VAR 0 2
43624: PUSH
43625: LD_VAR 0 4
43629: ARRAY
43630: NONEQUAL
43631: IFFALSE 43643
// begin result := false ;
43633: LD_ADDR_VAR 0 3
43637: PUSH
43638: LD_INT 0
43640: ST_TO_ADDR
// break ;
43641: GO 43645
// end ;
43643: GO 43606
43645: POP
43646: POP
// end ;
43647: LD_VAR 0 3
43651: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43652: LD_INT 0
43654: PPUSH
43655: PPUSH
43656: PPUSH
// pom := GetBase ( fac ) ;
43657: LD_ADDR_VAR 0 5
43661: PUSH
43662: LD_VAR 0 1
43666: PPUSH
43667: CALL_OW 274
43671: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43672: LD_ADDR_VAR 0 4
43676: PUSH
43677: LD_VAR 0 2
43681: PUSH
43682: LD_INT 1
43684: ARRAY
43685: PPUSH
43686: LD_VAR 0 2
43690: PUSH
43691: LD_INT 2
43693: ARRAY
43694: PPUSH
43695: LD_VAR 0 2
43699: PUSH
43700: LD_INT 3
43702: ARRAY
43703: PPUSH
43704: LD_VAR 0 2
43708: PUSH
43709: LD_INT 4
43711: ARRAY
43712: PPUSH
43713: CALL_OW 449
43717: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43718: LD_ADDR_VAR 0 3
43722: PUSH
43723: LD_VAR 0 5
43727: PPUSH
43728: LD_INT 1
43730: PPUSH
43731: CALL_OW 275
43735: PUSH
43736: LD_VAR 0 4
43740: PUSH
43741: LD_INT 1
43743: ARRAY
43744: GREATEREQUAL
43745: PUSH
43746: LD_VAR 0 5
43750: PPUSH
43751: LD_INT 2
43753: PPUSH
43754: CALL_OW 275
43758: PUSH
43759: LD_VAR 0 4
43763: PUSH
43764: LD_INT 2
43766: ARRAY
43767: GREATEREQUAL
43768: AND
43769: PUSH
43770: LD_VAR 0 5
43774: PPUSH
43775: LD_INT 3
43777: PPUSH
43778: CALL_OW 275
43782: PUSH
43783: LD_VAR 0 4
43787: PUSH
43788: LD_INT 3
43790: ARRAY
43791: GREATEREQUAL
43792: AND
43793: ST_TO_ADDR
// end ;
43794: LD_VAR 0 3
43798: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43799: LD_INT 0
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
// pom := GetBase ( building ) ;
43805: LD_ADDR_VAR 0 3
43809: PUSH
43810: LD_VAR 0 1
43814: PPUSH
43815: CALL_OW 274
43819: ST_TO_ADDR
// if not pom then
43820: LD_VAR 0 3
43824: NOT
43825: IFFALSE 43829
// exit ;
43827: GO 43999
// btype := GetBType ( building ) ;
43829: LD_ADDR_VAR 0 5
43833: PUSH
43834: LD_VAR 0 1
43838: PPUSH
43839: CALL_OW 266
43843: ST_TO_ADDR
// if btype = b_armoury then
43844: LD_VAR 0 5
43848: PUSH
43849: LD_INT 4
43851: EQUAL
43852: IFFALSE 43862
// btype := b_barracks ;
43854: LD_ADDR_VAR 0 5
43858: PUSH
43859: LD_INT 5
43861: ST_TO_ADDR
// if btype = b_depot then
43862: LD_VAR 0 5
43866: PUSH
43867: LD_INT 0
43869: EQUAL
43870: IFFALSE 43880
// btype := b_warehouse ;
43872: LD_ADDR_VAR 0 5
43876: PUSH
43877: LD_INT 1
43879: ST_TO_ADDR
// if btype = b_workshop then
43880: LD_VAR 0 5
43884: PUSH
43885: LD_INT 2
43887: EQUAL
43888: IFFALSE 43898
// btype := b_factory ;
43890: LD_ADDR_VAR 0 5
43894: PUSH
43895: LD_INT 3
43897: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43898: LD_ADDR_VAR 0 4
43902: PUSH
43903: LD_VAR 0 5
43907: PPUSH
43908: LD_VAR 0 1
43912: PPUSH
43913: CALL_OW 248
43917: PPUSH
43918: CALL_OW 450
43922: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43923: LD_ADDR_VAR 0 2
43927: PUSH
43928: LD_VAR 0 3
43932: PPUSH
43933: LD_INT 1
43935: PPUSH
43936: CALL_OW 275
43940: PUSH
43941: LD_VAR 0 4
43945: PUSH
43946: LD_INT 1
43948: ARRAY
43949: GREATEREQUAL
43950: PUSH
43951: LD_VAR 0 3
43955: PPUSH
43956: LD_INT 2
43958: PPUSH
43959: CALL_OW 275
43963: PUSH
43964: LD_VAR 0 4
43968: PUSH
43969: LD_INT 2
43971: ARRAY
43972: GREATEREQUAL
43973: AND
43974: PUSH
43975: LD_VAR 0 3
43979: PPUSH
43980: LD_INT 3
43982: PPUSH
43983: CALL_OW 275
43987: PUSH
43988: LD_VAR 0 4
43992: PUSH
43993: LD_INT 3
43995: ARRAY
43996: GREATEREQUAL
43997: AND
43998: ST_TO_ADDR
// end ;
43999: LD_VAR 0 2
44003: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44004: LD_INT 0
44006: PPUSH
44007: PPUSH
44008: PPUSH
// pom := GetBase ( building ) ;
44009: LD_ADDR_VAR 0 4
44013: PUSH
44014: LD_VAR 0 1
44018: PPUSH
44019: CALL_OW 274
44023: ST_TO_ADDR
// if not pom then
44024: LD_VAR 0 4
44028: NOT
44029: IFFALSE 44033
// exit ;
44031: GO 44134
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44033: LD_ADDR_VAR 0 5
44037: PUSH
44038: LD_VAR 0 2
44042: PPUSH
44043: LD_VAR 0 1
44047: PPUSH
44048: CALL_OW 248
44052: PPUSH
44053: CALL_OW 450
44057: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44058: LD_ADDR_VAR 0 3
44062: PUSH
44063: LD_VAR 0 4
44067: PPUSH
44068: LD_INT 1
44070: PPUSH
44071: CALL_OW 275
44075: PUSH
44076: LD_VAR 0 5
44080: PUSH
44081: LD_INT 1
44083: ARRAY
44084: GREATEREQUAL
44085: PUSH
44086: LD_VAR 0 4
44090: PPUSH
44091: LD_INT 2
44093: PPUSH
44094: CALL_OW 275
44098: PUSH
44099: LD_VAR 0 5
44103: PUSH
44104: LD_INT 2
44106: ARRAY
44107: GREATEREQUAL
44108: AND
44109: PUSH
44110: LD_VAR 0 4
44114: PPUSH
44115: LD_INT 3
44117: PPUSH
44118: CALL_OW 275
44122: PUSH
44123: LD_VAR 0 5
44127: PUSH
44128: LD_INT 3
44130: ARRAY
44131: GREATEREQUAL
44132: AND
44133: ST_TO_ADDR
// end ;
44134: LD_VAR 0 3
44138: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44139: LD_INT 0
44141: PPUSH
44142: PPUSH
44143: PPUSH
44144: PPUSH
44145: PPUSH
44146: PPUSH
44147: PPUSH
44148: PPUSH
44149: PPUSH
44150: PPUSH
44151: PPUSH
// result := false ;
44152: LD_ADDR_VAR 0 8
44156: PUSH
44157: LD_INT 0
44159: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44160: LD_VAR 0 5
44164: NOT
44165: PUSH
44166: LD_VAR 0 1
44170: NOT
44171: OR
44172: PUSH
44173: LD_VAR 0 2
44177: NOT
44178: OR
44179: PUSH
44180: LD_VAR 0 3
44184: NOT
44185: OR
44186: IFFALSE 44190
// exit ;
44188: GO 45004
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44190: LD_ADDR_VAR 0 14
44194: PUSH
44195: LD_VAR 0 1
44199: PPUSH
44200: LD_VAR 0 2
44204: PPUSH
44205: LD_VAR 0 3
44209: PPUSH
44210: LD_VAR 0 4
44214: PPUSH
44215: LD_VAR 0 5
44219: PUSH
44220: LD_INT 1
44222: ARRAY
44223: PPUSH
44224: CALL_OW 248
44228: PPUSH
44229: LD_INT 0
44231: PPUSH
44232: CALL 46257 0 6
44236: ST_TO_ADDR
// if not hexes then
44237: LD_VAR 0 14
44241: NOT
44242: IFFALSE 44246
// exit ;
44244: GO 45004
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44246: LD_ADDR_VAR 0 17
44250: PUSH
44251: LD_VAR 0 5
44255: PPUSH
44256: LD_INT 22
44258: PUSH
44259: LD_VAR 0 13
44263: PPUSH
44264: CALL_OW 255
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: LD_INT 30
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 30
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: LIST
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PPUSH
44305: CALL_OW 72
44309: ST_TO_ADDR
// for i = 1 to hexes do
44310: LD_ADDR_VAR 0 9
44314: PUSH
44315: DOUBLE
44316: LD_INT 1
44318: DEC
44319: ST_TO_ADDR
44320: LD_VAR 0 14
44324: PUSH
44325: FOR_TO
44326: IFFALSE 45002
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44328: LD_ADDR_VAR 0 13
44332: PUSH
44333: LD_VAR 0 14
44337: PUSH
44338: LD_VAR 0 9
44342: ARRAY
44343: PUSH
44344: LD_INT 1
44346: ARRAY
44347: PPUSH
44348: LD_VAR 0 14
44352: PUSH
44353: LD_VAR 0 9
44357: ARRAY
44358: PUSH
44359: LD_INT 2
44361: ARRAY
44362: PPUSH
44363: CALL_OW 428
44367: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44368: LD_VAR 0 14
44372: PUSH
44373: LD_VAR 0 9
44377: ARRAY
44378: PUSH
44379: LD_INT 1
44381: ARRAY
44382: PPUSH
44383: LD_VAR 0 14
44387: PUSH
44388: LD_VAR 0 9
44392: ARRAY
44393: PUSH
44394: LD_INT 2
44396: ARRAY
44397: PPUSH
44398: CALL_OW 351
44402: PUSH
44403: LD_VAR 0 14
44407: PUSH
44408: LD_VAR 0 9
44412: ARRAY
44413: PUSH
44414: LD_INT 1
44416: ARRAY
44417: PPUSH
44418: LD_VAR 0 14
44422: PUSH
44423: LD_VAR 0 9
44427: ARRAY
44428: PUSH
44429: LD_INT 2
44431: ARRAY
44432: PPUSH
44433: CALL_OW 488
44437: NOT
44438: OR
44439: PUSH
44440: LD_VAR 0 13
44444: PPUSH
44445: CALL_OW 247
44449: PUSH
44450: LD_INT 3
44452: EQUAL
44453: OR
44454: IFFALSE 44460
// exit ;
44456: POP
44457: POP
44458: GO 45004
// if not tmp then
44460: LD_VAR 0 13
44464: NOT
44465: IFFALSE 44469
// continue ;
44467: GO 44325
// result := true ;
44469: LD_ADDR_VAR 0 8
44473: PUSH
44474: LD_INT 1
44476: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44477: LD_VAR 0 6
44481: PUSH
44482: LD_VAR 0 13
44486: PPUSH
44487: CALL_OW 247
44491: PUSH
44492: LD_INT 2
44494: EQUAL
44495: AND
44496: PUSH
44497: LD_VAR 0 13
44501: PPUSH
44502: CALL_OW 263
44506: PUSH
44507: LD_INT 1
44509: EQUAL
44510: AND
44511: IFFALSE 44675
// begin if IsDrivenBy ( tmp ) then
44513: LD_VAR 0 13
44517: PPUSH
44518: CALL_OW 311
44522: IFFALSE 44526
// continue ;
44524: GO 44325
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44526: LD_VAR 0 6
44530: PPUSH
44531: LD_INT 3
44533: PUSH
44534: LD_INT 60
44536: PUSH
44537: EMPTY
44538: LIST
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 3
44546: PUSH
44547: LD_INT 55
44549: PUSH
44550: EMPTY
44551: LIST
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PPUSH
44561: CALL_OW 72
44565: IFFALSE 44673
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44567: LD_ADDR_VAR 0 18
44571: PUSH
44572: LD_VAR 0 6
44576: PPUSH
44577: LD_INT 3
44579: PUSH
44580: LD_INT 60
44582: PUSH
44583: EMPTY
44584: LIST
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 3
44592: PUSH
44593: LD_INT 55
44595: PUSH
44596: EMPTY
44597: LIST
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PPUSH
44607: CALL_OW 72
44611: PUSH
44612: LD_INT 1
44614: ARRAY
44615: ST_TO_ADDR
// if IsInUnit ( driver ) then
44616: LD_VAR 0 18
44620: PPUSH
44621: CALL_OW 310
44625: IFFALSE 44636
// ComExit ( driver ) ;
44627: LD_VAR 0 18
44631: PPUSH
44632: CALL 70049 0 1
// AddComEnterUnit ( driver , tmp ) ;
44636: LD_VAR 0 18
44640: PPUSH
44641: LD_VAR 0 13
44645: PPUSH
44646: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44650: LD_VAR 0 18
44654: PPUSH
44655: LD_VAR 0 7
44659: PPUSH
44660: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44664: LD_VAR 0 18
44668: PPUSH
44669: CALL_OW 181
// end ; continue ;
44673: GO 44325
// end ; if not cleaners or not tmp in cleaners then
44675: LD_VAR 0 6
44679: NOT
44680: PUSH
44681: LD_VAR 0 13
44685: PUSH
44686: LD_VAR 0 6
44690: IN
44691: NOT
44692: OR
44693: IFFALSE 45000
// begin if dep then
44695: LD_VAR 0 17
44699: IFFALSE 44835
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44701: LD_ADDR_VAR 0 16
44705: PUSH
44706: LD_VAR 0 17
44710: PUSH
44711: LD_INT 1
44713: ARRAY
44714: PPUSH
44715: CALL_OW 250
44719: PPUSH
44720: LD_VAR 0 17
44724: PUSH
44725: LD_INT 1
44727: ARRAY
44728: PPUSH
44729: CALL_OW 254
44733: PPUSH
44734: LD_INT 5
44736: PPUSH
44737: CALL_OW 272
44741: PUSH
44742: LD_VAR 0 17
44746: PUSH
44747: LD_INT 1
44749: ARRAY
44750: PPUSH
44751: CALL_OW 251
44755: PPUSH
44756: LD_VAR 0 17
44760: PUSH
44761: LD_INT 1
44763: ARRAY
44764: PPUSH
44765: CALL_OW 254
44769: PPUSH
44770: LD_INT 5
44772: PPUSH
44773: CALL_OW 273
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44782: LD_VAR 0 16
44786: PUSH
44787: LD_INT 1
44789: ARRAY
44790: PPUSH
44791: LD_VAR 0 16
44795: PUSH
44796: LD_INT 2
44798: ARRAY
44799: PPUSH
44800: CALL_OW 488
44804: IFFALSE 44835
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44806: LD_VAR 0 13
44810: PPUSH
44811: LD_VAR 0 16
44815: PUSH
44816: LD_INT 1
44818: ARRAY
44819: PPUSH
44820: LD_VAR 0 16
44824: PUSH
44825: LD_INT 2
44827: ARRAY
44828: PPUSH
44829: CALL_OW 111
// continue ;
44833: GO 44325
// end ; end ; r := GetDir ( tmp ) ;
44835: LD_ADDR_VAR 0 15
44839: PUSH
44840: LD_VAR 0 13
44844: PPUSH
44845: CALL_OW 254
44849: ST_TO_ADDR
// if r = 5 then
44850: LD_VAR 0 15
44854: PUSH
44855: LD_INT 5
44857: EQUAL
44858: IFFALSE 44868
// r := 0 ;
44860: LD_ADDR_VAR 0 15
44864: PUSH
44865: LD_INT 0
44867: ST_TO_ADDR
// for j = r to 5 do
44868: LD_ADDR_VAR 0 10
44872: PUSH
44873: DOUBLE
44874: LD_VAR 0 15
44878: DEC
44879: ST_TO_ADDR
44880: LD_INT 5
44882: PUSH
44883: FOR_TO
44884: IFFALSE 44998
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44886: LD_ADDR_VAR 0 11
44890: PUSH
44891: LD_VAR 0 13
44895: PPUSH
44896: CALL_OW 250
44900: PPUSH
44901: LD_VAR 0 10
44905: PPUSH
44906: LD_INT 2
44908: PPUSH
44909: CALL_OW 272
44913: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44914: LD_ADDR_VAR 0 12
44918: PUSH
44919: LD_VAR 0 13
44923: PPUSH
44924: CALL_OW 251
44928: PPUSH
44929: LD_VAR 0 10
44933: PPUSH
44934: LD_INT 2
44936: PPUSH
44937: CALL_OW 273
44941: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44942: LD_VAR 0 11
44946: PPUSH
44947: LD_VAR 0 12
44951: PPUSH
44952: CALL_OW 488
44956: PUSH
44957: LD_VAR 0 11
44961: PPUSH
44962: LD_VAR 0 12
44966: PPUSH
44967: CALL_OW 428
44971: NOT
44972: AND
44973: IFFALSE 44996
// begin ComMoveXY ( tmp , _x , _y ) ;
44975: LD_VAR 0 13
44979: PPUSH
44980: LD_VAR 0 11
44984: PPUSH
44985: LD_VAR 0 12
44989: PPUSH
44990: CALL_OW 111
// break ;
44994: GO 44998
// end ; end ;
44996: GO 44883
44998: POP
44999: POP
// end ; end ;
45000: GO 44325
45002: POP
45003: POP
// end ;
45004: LD_VAR 0 8
45008: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45009: LD_INT 0
45011: PPUSH
// result := true ;
45012: LD_ADDR_VAR 0 3
45016: PUSH
45017: LD_INT 1
45019: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45020: LD_VAR 0 2
45024: PUSH
45025: LD_INT 24
45027: DOUBLE
45028: EQUAL
45029: IFTRUE 45039
45031: LD_INT 33
45033: DOUBLE
45034: EQUAL
45035: IFTRUE 45039
45037: GO 45064
45039: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45040: LD_ADDR_VAR 0 3
45044: PUSH
45045: LD_INT 32
45047: PPUSH
45048: LD_VAR 0 1
45052: PPUSH
45053: CALL_OW 321
45057: PUSH
45058: LD_INT 2
45060: EQUAL
45061: ST_TO_ADDR
45062: GO 45380
45064: LD_INT 20
45066: DOUBLE
45067: EQUAL
45068: IFTRUE 45072
45070: GO 45097
45072: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45073: LD_ADDR_VAR 0 3
45077: PUSH
45078: LD_INT 6
45080: PPUSH
45081: LD_VAR 0 1
45085: PPUSH
45086: CALL_OW 321
45090: PUSH
45091: LD_INT 2
45093: EQUAL
45094: ST_TO_ADDR
45095: GO 45380
45097: LD_INT 22
45099: DOUBLE
45100: EQUAL
45101: IFTRUE 45111
45103: LD_INT 36
45105: DOUBLE
45106: EQUAL
45107: IFTRUE 45111
45109: GO 45136
45111: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45112: LD_ADDR_VAR 0 3
45116: PUSH
45117: LD_INT 15
45119: PPUSH
45120: LD_VAR 0 1
45124: PPUSH
45125: CALL_OW 321
45129: PUSH
45130: LD_INT 2
45132: EQUAL
45133: ST_TO_ADDR
45134: GO 45380
45136: LD_INT 30
45138: DOUBLE
45139: EQUAL
45140: IFTRUE 45144
45142: GO 45169
45144: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45145: LD_ADDR_VAR 0 3
45149: PUSH
45150: LD_INT 20
45152: PPUSH
45153: LD_VAR 0 1
45157: PPUSH
45158: CALL_OW 321
45162: PUSH
45163: LD_INT 2
45165: EQUAL
45166: ST_TO_ADDR
45167: GO 45380
45169: LD_INT 28
45171: DOUBLE
45172: EQUAL
45173: IFTRUE 45183
45175: LD_INT 21
45177: DOUBLE
45178: EQUAL
45179: IFTRUE 45183
45181: GO 45208
45183: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45184: LD_ADDR_VAR 0 3
45188: PUSH
45189: LD_INT 21
45191: PPUSH
45192: LD_VAR 0 1
45196: PPUSH
45197: CALL_OW 321
45201: PUSH
45202: LD_INT 2
45204: EQUAL
45205: ST_TO_ADDR
45206: GO 45380
45208: LD_INT 16
45210: DOUBLE
45211: EQUAL
45212: IFTRUE 45216
45214: GO 45241
45216: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45217: LD_ADDR_VAR 0 3
45221: PUSH
45222: LD_INT 84
45224: PPUSH
45225: LD_VAR 0 1
45229: PPUSH
45230: CALL_OW 321
45234: PUSH
45235: LD_INT 2
45237: EQUAL
45238: ST_TO_ADDR
45239: GO 45380
45241: LD_INT 19
45243: DOUBLE
45244: EQUAL
45245: IFTRUE 45255
45247: LD_INT 23
45249: DOUBLE
45250: EQUAL
45251: IFTRUE 45255
45253: GO 45280
45255: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45256: LD_ADDR_VAR 0 3
45260: PUSH
45261: LD_INT 83
45263: PPUSH
45264: LD_VAR 0 1
45268: PPUSH
45269: CALL_OW 321
45273: PUSH
45274: LD_INT 2
45276: EQUAL
45277: ST_TO_ADDR
45278: GO 45380
45280: LD_INT 17
45282: DOUBLE
45283: EQUAL
45284: IFTRUE 45288
45286: GO 45313
45288: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45289: LD_ADDR_VAR 0 3
45293: PUSH
45294: LD_INT 39
45296: PPUSH
45297: LD_VAR 0 1
45301: PPUSH
45302: CALL_OW 321
45306: PUSH
45307: LD_INT 2
45309: EQUAL
45310: ST_TO_ADDR
45311: GO 45380
45313: LD_INT 18
45315: DOUBLE
45316: EQUAL
45317: IFTRUE 45321
45319: GO 45346
45321: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45322: LD_ADDR_VAR 0 3
45326: PUSH
45327: LD_INT 40
45329: PPUSH
45330: LD_VAR 0 1
45334: PPUSH
45335: CALL_OW 321
45339: PUSH
45340: LD_INT 2
45342: EQUAL
45343: ST_TO_ADDR
45344: GO 45380
45346: LD_INT 27
45348: DOUBLE
45349: EQUAL
45350: IFTRUE 45354
45352: GO 45379
45354: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45355: LD_ADDR_VAR 0 3
45359: PUSH
45360: LD_INT 35
45362: PPUSH
45363: LD_VAR 0 1
45367: PPUSH
45368: CALL_OW 321
45372: PUSH
45373: LD_INT 2
45375: EQUAL
45376: ST_TO_ADDR
45377: GO 45380
45379: POP
// end ;
45380: LD_VAR 0 3
45384: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45385: LD_INT 0
45387: PPUSH
45388: PPUSH
45389: PPUSH
45390: PPUSH
45391: PPUSH
45392: PPUSH
45393: PPUSH
45394: PPUSH
45395: PPUSH
45396: PPUSH
45397: PPUSH
// result := false ;
45398: LD_ADDR_VAR 0 6
45402: PUSH
45403: LD_INT 0
45405: ST_TO_ADDR
// if btype = b_depot then
45406: LD_VAR 0 2
45410: PUSH
45411: LD_INT 0
45413: EQUAL
45414: IFFALSE 45426
// begin result := true ;
45416: LD_ADDR_VAR 0 6
45420: PUSH
45421: LD_INT 1
45423: ST_TO_ADDR
// exit ;
45424: GO 46252
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45426: LD_VAR 0 1
45430: NOT
45431: PUSH
45432: LD_VAR 0 1
45436: PPUSH
45437: CALL_OW 266
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: IN
45452: NOT
45453: OR
45454: PUSH
45455: LD_VAR 0 2
45459: NOT
45460: OR
45461: PUSH
45462: LD_VAR 0 5
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: LD_INT 3
45478: PUSH
45479: LD_INT 4
45481: PUSH
45482: LD_INT 5
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: IN
45493: NOT
45494: OR
45495: PUSH
45496: LD_VAR 0 3
45500: PPUSH
45501: LD_VAR 0 4
45505: PPUSH
45506: CALL_OW 488
45510: NOT
45511: OR
45512: IFFALSE 45516
// exit ;
45514: GO 46252
// side := GetSide ( depot ) ;
45516: LD_ADDR_VAR 0 9
45520: PUSH
45521: LD_VAR 0 1
45525: PPUSH
45526: CALL_OW 255
45530: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45531: LD_VAR 0 9
45535: PPUSH
45536: LD_VAR 0 2
45540: PPUSH
45541: CALL 45009 0 2
45545: NOT
45546: IFFALSE 45550
// exit ;
45548: GO 46252
// pom := GetBase ( depot ) ;
45550: LD_ADDR_VAR 0 10
45554: PUSH
45555: LD_VAR 0 1
45559: PPUSH
45560: CALL_OW 274
45564: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45565: LD_ADDR_VAR 0 11
45569: PUSH
45570: LD_VAR 0 2
45574: PPUSH
45575: LD_VAR 0 1
45579: PPUSH
45580: CALL_OW 248
45584: PPUSH
45585: CALL_OW 450
45589: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45590: LD_VAR 0 10
45594: PPUSH
45595: LD_INT 1
45597: PPUSH
45598: CALL_OW 275
45602: PUSH
45603: LD_VAR 0 11
45607: PUSH
45608: LD_INT 1
45610: ARRAY
45611: GREATEREQUAL
45612: PUSH
45613: LD_VAR 0 10
45617: PPUSH
45618: LD_INT 2
45620: PPUSH
45621: CALL_OW 275
45625: PUSH
45626: LD_VAR 0 11
45630: PUSH
45631: LD_INT 2
45633: ARRAY
45634: GREATEREQUAL
45635: AND
45636: PUSH
45637: LD_VAR 0 10
45641: PPUSH
45642: LD_INT 3
45644: PPUSH
45645: CALL_OW 275
45649: PUSH
45650: LD_VAR 0 11
45654: PUSH
45655: LD_INT 3
45657: ARRAY
45658: GREATEREQUAL
45659: AND
45660: NOT
45661: IFFALSE 45665
// exit ;
45663: GO 46252
// if GetBType ( depot ) = b_depot then
45665: LD_VAR 0 1
45669: PPUSH
45670: CALL_OW 266
45674: PUSH
45675: LD_INT 0
45677: EQUAL
45678: IFFALSE 45690
// dist := 28 else
45680: LD_ADDR_VAR 0 14
45684: PUSH
45685: LD_INT 28
45687: ST_TO_ADDR
45688: GO 45698
// dist := 36 ;
45690: LD_ADDR_VAR 0 14
45694: PUSH
45695: LD_INT 36
45697: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45698: LD_VAR 0 1
45702: PPUSH
45703: LD_VAR 0 3
45707: PPUSH
45708: LD_VAR 0 4
45712: PPUSH
45713: CALL_OW 297
45717: PUSH
45718: LD_VAR 0 14
45722: GREATER
45723: IFFALSE 45727
// exit ;
45725: GO 46252
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45727: LD_ADDR_VAR 0 12
45731: PUSH
45732: LD_VAR 0 2
45736: PPUSH
45737: LD_VAR 0 3
45741: PPUSH
45742: LD_VAR 0 4
45746: PPUSH
45747: LD_VAR 0 5
45751: PPUSH
45752: LD_VAR 0 1
45756: PPUSH
45757: CALL_OW 248
45761: PPUSH
45762: LD_INT 0
45764: PPUSH
45765: CALL 46257 0 6
45769: ST_TO_ADDR
// if not hexes then
45770: LD_VAR 0 12
45774: NOT
45775: IFFALSE 45779
// exit ;
45777: GO 46252
// hex := GetHexInfo ( x , y ) ;
45779: LD_ADDR_VAR 0 15
45783: PUSH
45784: LD_VAR 0 3
45788: PPUSH
45789: LD_VAR 0 4
45793: PPUSH
45794: CALL_OW 546
45798: ST_TO_ADDR
// if hex [ 1 ] then
45799: LD_VAR 0 15
45803: PUSH
45804: LD_INT 1
45806: ARRAY
45807: IFFALSE 45811
// exit ;
45809: GO 46252
// height := hex [ 2 ] ;
45811: LD_ADDR_VAR 0 13
45815: PUSH
45816: LD_VAR 0 15
45820: PUSH
45821: LD_INT 2
45823: ARRAY
45824: ST_TO_ADDR
// for i = 1 to hexes do
45825: LD_ADDR_VAR 0 7
45829: PUSH
45830: DOUBLE
45831: LD_INT 1
45833: DEC
45834: ST_TO_ADDR
45835: LD_VAR 0 12
45839: PUSH
45840: FOR_TO
45841: IFFALSE 46171
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45843: LD_VAR 0 12
45847: PUSH
45848: LD_VAR 0 7
45852: ARRAY
45853: PUSH
45854: LD_INT 1
45856: ARRAY
45857: PPUSH
45858: LD_VAR 0 12
45862: PUSH
45863: LD_VAR 0 7
45867: ARRAY
45868: PUSH
45869: LD_INT 2
45871: ARRAY
45872: PPUSH
45873: CALL_OW 488
45877: NOT
45878: PUSH
45879: LD_VAR 0 12
45883: PUSH
45884: LD_VAR 0 7
45888: ARRAY
45889: PUSH
45890: LD_INT 1
45892: ARRAY
45893: PPUSH
45894: LD_VAR 0 12
45898: PUSH
45899: LD_VAR 0 7
45903: ARRAY
45904: PUSH
45905: LD_INT 2
45907: ARRAY
45908: PPUSH
45909: CALL_OW 428
45913: PUSH
45914: LD_INT 0
45916: GREATER
45917: OR
45918: PUSH
45919: LD_VAR 0 12
45923: PUSH
45924: LD_VAR 0 7
45928: ARRAY
45929: PUSH
45930: LD_INT 1
45932: ARRAY
45933: PPUSH
45934: LD_VAR 0 12
45938: PUSH
45939: LD_VAR 0 7
45943: ARRAY
45944: PUSH
45945: LD_INT 2
45947: ARRAY
45948: PPUSH
45949: CALL_OW 351
45953: OR
45954: IFFALSE 45960
// exit ;
45956: POP
45957: POP
45958: GO 46252
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45960: LD_ADDR_VAR 0 8
45964: PUSH
45965: LD_VAR 0 12
45969: PUSH
45970: LD_VAR 0 7
45974: ARRAY
45975: PUSH
45976: LD_INT 1
45978: ARRAY
45979: PPUSH
45980: LD_VAR 0 12
45984: PUSH
45985: LD_VAR 0 7
45989: ARRAY
45990: PUSH
45991: LD_INT 2
45993: ARRAY
45994: PPUSH
45995: CALL_OW 546
45999: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46000: LD_VAR 0 8
46004: PUSH
46005: LD_INT 1
46007: ARRAY
46008: PUSH
46009: LD_VAR 0 8
46013: PUSH
46014: LD_INT 2
46016: ARRAY
46017: PUSH
46018: LD_VAR 0 13
46022: PUSH
46023: LD_INT 2
46025: PLUS
46026: GREATER
46027: OR
46028: PUSH
46029: LD_VAR 0 8
46033: PUSH
46034: LD_INT 2
46036: ARRAY
46037: PUSH
46038: LD_VAR 0 13
46042: PUSH
46043: LD_INT 2
46045: MINUS
46046: LESS
46047: OR
46048: PUSH
46049: LD_VAR 0 8
46053: PUSH
46054: LD_INT 3
46056: ARRAY
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 8
46063: PUSH
46064: LD_INT 9
46066: PUSH
46067: LD_INT 10
46069: PUSH
46070: LD_INT 11
46072: PUSH
46073: LD_INT 12
46075: PUSH
46076: LD_INT 13
46078: PUSH
46079: LD_INT 16
46081: PUSH
46082: LD_INT 17
46084: PUSH
46085: LD_INT 18
46087: PUSH
46088: LD_INT 19
46090: PUSH
46091: LD_INT 20
46093: PUSH
46094: LD_INT 21
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: IN
46112: NOT
46113: OR
46114: PUSH
46115: LD_VAR 0 8
46119: PUSH
46120: LD_INT 5
46122: ARRAY
46123: NOT
46124: OR
46125: PUSH
46126: LD_VAR 0 8
46130: PUSH
46131: LD_INT 6
46133: ARRAY
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: LD_INT 7
46143: PUSH
46144: LD_INT 9
46146: PUSH
46147: LD_INT 10
46149: PUSH
46150: LD_INT 11
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: IN
46161: NOT
46162: OR
46163: IFFALSE 46169
// exit ;
46165: POP
46166: POP
46167: GO 46252
// end ;
46169: GO 45840
46171: POP
46172: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46173: LD_VAR 0 9
46177: PPUSH
46178: LD_VAR 0 3
46182: PPUSH
46183: LD_VAR 0 4
46187: PPUSH
46188: LD_INT 20
46190: PPUSH
46191: CALL 38175 0 4
46195: PUSH
46196: LD_INT 4
46198: ARRAY
46199: IFFALSE 46203
// exit ;
46201: GO 46252
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46203: LD_VAR 0 2
46207: PUSH
46208: LD_INT 29
46210: PUSH
46211: LD_INT 30
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: IN
46218: PUSH
46219: LD_VAR 0 3
46223: PPUSH
46224: LD_VAR 0 4
46228: PPUSH
46229: LD_VAR 0 9
46233: PPUSH
46234: CALL_OW 440
46238: NOT
46239: AND
46240: IFFALSE 46244
// exit ;
46242: GO 46252
// result := true ;
46244: LD_ADDR_VAR 0 6
46248: PUSH
46249: LD_INT 1
46251: ST_TO_ADDR
// end ;
46252: LD_VAR 0 6
46256: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46257: LD_INT 0
46259: PPUSH
46260: PPUSH
46261: PPUSH
46262: PPUSH
46263: PPUSH
46264: PPUSH
46265: PPUSH
46266: PPUSH
46267: PPUSH
46268: PPUSH
46269: PPUSH
46270: PPUSH
46271: PPUSH
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
46280: PPUSH
46281: PPUSH
46282: PPUSH
46283: PPUSH
46284: PPUSH
46285: PPUSH
46286: PPUSH
46287: PPUSH
46288: PPUSH
46289: PPUSH
46290: PPUSH
46291: PPUSH
46292: PPUSH
46293: PPUSH
46294: PPUSH
46295: PPUSH
46296: PPUSH
46297: PPUSH
46298: PPUSH
46299: PPUSH
46300: PPUSH
46301: PPUSH
46302: PPUSH
46303: PPUSH
46304: PPUSH
46305: PPUSH
46306: PPUSH
46307: PPUSH
46308: PPUSH
46309: PPUSH
46310: PPUSH
46311: PPUSH
46312: PPUSH
46313: PPUSH
46314: PPUSH
46315: PPUSH
46316: PPUSH
// result = [ ] ;
46317: LD_ADDR_VAR 0 7
46321: PUSH
46322: EMPTY
46323: ST_TO_ADDR
// temp_list = [ ] ;
46324: LD_ADDR_VAR 0 9
46328: PUSH
46329: EMPTY
46330: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46331: LD_VAR 0 4
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: LD_INT 3
46347: PUSH
46348: LD_INT 4
46350: PUSH
46351: LD_INT 5
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: IN
46362: NOT
46363: PUSH
46364: LD_VAR 0 1
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: IN
46379: PUSH
46380: LD_VAR 0 5
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: LD_INT 3
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: LIST
46398: IN
46399: NOT
46400: AND
46401: OR
46402: IFFALSE 46406
// exit ;
46404: GO 64797
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46406: LD_VAR 0 1
46410: PUSH
46411: LD_INT 6
46413: PUSH
46414: LD_INT 7
46416: PUSH
46417: LD_INT 8
46419: PUSH
46420: LD_INT 13
46422: PUSH
46423: LD_INT 12
46425: PUSH
46426: LD_INT 15
46428: PUSH
46429: LD_INT 11
46431: PUSH
46432: LD_INT 14
46434: PUSH
46435: LD_INT 10
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: IN
46449: IFFALSE 46459
// btype = b_lab ;
46451: LD_ADDR_VAR 0 1
46455: PUSH
46456: LD_INT 6
46458: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46459: LD_VAR 0 6
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: LIST
46477: IN
46478: NOT
46479: PUSH
46480: LD_VAR 0 1
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 3
46496: PUSH
46497: LD_INT 6
46499: PUSH
46500: LD_INT 36
46502: PUSH
46503: LD_INT 4
46505: PUSH
46506: LD_INT 5
46508: PUSH
46509: LD_INT 31
46511: PUSH
46512: LD_INT 32
46514: PUSH
46515: LD_INT 33
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: IN
46531: NOT
46532: PUSH
46533: LD_VAR 0 6
46537: PUSH
46538: LD_INT 1
46540: EQUAL
46541: AND
46542: OR
46543: PUSH
46544: LD_VAR 0 1
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: LD_INT 3
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: IN
46559: NOT
46560: PUSH
46561: LD_VAR 0 6
46565: PUSH
46566: LD_INT 2
46568: EQUAL
46569: AND
46570: OR
46571: IFFALSE 46581
// mode = 0 ;
46573: LD_ADDR_VAR 0 6
46577: PUSH
46578: LD_INT 0
46580: ST_TO_ADDR
// case mode of 0 :
46581: LD_VAR 0 6
46585: PUSH
46586: LD_INT 0
46588: DOUBLE
46589: EQUAL
46590: IFTRUE 46594
46592: GO 58047
46594: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46595: LD_ADDR_VAR 0 11
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: LD_INT 2
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 3
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46788: LD_ADDR_VAR 0 12
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 3
46945: NEG
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 3
46956: NEG
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46984: LD_ADDR_VAR 0 13
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 2
47087: PUSH
47088: LD_INT 2
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: LD_INT 2
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: LD_INT 3
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 3
47143: NEG
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 3
47155: NEG
47156: PUSH
47157: LD_INT 3
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47183: LD_ADDR_VAR 0 14
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 3
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 3
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: LD_INT 2
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47379: LD_ADDR_VAR 0 15
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 3
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 3
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47572: LD_ADDR_VAR 0 16
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: NEG
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 3
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 3
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: LD_INT 3
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47765: LD_ADDR_VAR 0 17
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: NEG
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47995: LD_ADDR_VAR 0 18
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 2
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 2
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: LD_INT 2
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: NEG
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48225: LD_ADDR_VAR 0 19
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 2
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48455: LD_ADDR_VAR 0 20
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: LD_INT 2
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 2
48654: NEG
48655: PUSH
48656: LD_INT 2
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48685: LD_ADDR_VAR 0 21
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 2
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 2
48884: NEG
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48915: LD_ADDR_VAR 0 22
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: NEG
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49145: LD_ADDR_VAR 0 23
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: LD_INT 2
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 2
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: LD_INT 3
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: LD_INT 3
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: LD_INT 2
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49425: LD_ADDR_VAR 0 24
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: LD_INT 2
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: NEG
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 3
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 3
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49701: LD_ADDR_VAR 0 25
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 2
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: LD_INT 2
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 2
49877: NEG
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 3
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 3
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: LD_INT 3
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: LD_INT 3
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49975: LD_ADDR_VAR 0 26
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 2
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: LD_INT 3
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: LD_INT 2
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 2
50217: NEG
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50251: LD_ADDR_VAR 0 27
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: LD_INT 2
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: LD_INT 2
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 2
50427: NEG
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 2
50438: NEG
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 2
50450: NEG
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 3
50484: NEG
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 3
50496: NEG
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50531: LD_ADDR_VAR 0 28
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: LD_INT 2
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 2
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 2
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 2
50730: NEG
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PUSH
50744: LD_INT 3
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: LD_INT 3
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 3
50766: NEG
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 3
50778: NEG
50779: PUSH
50780: LD_INT 2
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50813: LD_ADDR_VAR 0 29
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 2
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 2
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 2
50979: NEG
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: LD_INT 3
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 3
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: LD_INT 3
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 3
51057: NEG
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51092: LD_ADDR_VAR 0 30
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: LD_INT 1
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 3
51285: NEG
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 3
51304: PUSH
51305: LD_INT 2
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: LD_INT 3
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 3
51335: NEG
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51370: LD_ADDR_VAR 0 31
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 2
51547: NEG
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: LD_INT 3
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 3
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 3
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51648: LD_ADDR_VAR 0 32
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 2
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: LD_INT 1
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: LD_INT 2
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: LD_INT 3
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 2
51870: PUSH
51871: LD_INT 3
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: NEG
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51926: LD_ADDR_VAR 0 33
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 2
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 2
52081: NEG
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: NEG
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 3
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 3
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 3
52170: NEG
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52205: LD_ADDR_VAR 0 34
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 2
52330: PUSH
52331: LD_INT 2
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: LD_INT 3
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: LD_INT 2
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 3
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: LD_INT 3
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 3
52450: NEG
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52485: LD_ADDR_VAR 0 35
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52597: LD_ADDR_VAR 0 36
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52709: LD_ADDR_VAR 0 37
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52821: LD_ADDR_VAR 0 38
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52933: LD_ADDR_VAR 0 39
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53045: LD_ADDR_VAR 0 40
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53157: LD_ADDR_VAR 0 41
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 2
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 2
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 2
53323: NEG
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: LD_INT 2
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: LD_INT 3
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 3
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 3
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 3
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 3
53400: PUSH
53401: LD_INT 3
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: LD_INT 3
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: NEG
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 3
53431: NEG
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 3
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 3
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 3
53466: NEG
53467: PUSH
53468: LD_INT 3
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53507: LD_ADDR_VAR 0 42
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: PUSH
53590: LD_INT 2
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 2
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: LD_INT 2
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 2
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: NEG
53698: PUSH
53699: LD_INT 3
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: LD_INT 3
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 3
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: LD_INT 2
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 3
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 3
53753: PUSH
53754: LD_INT 3
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 3
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 3
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: LD_INT 3
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 3
53804: NEG
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 3
53816: NEG
53817: PUSH
53818: LD_INT 3
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53857: LD_ADDR_VAR 0 43
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 0
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: LD_INT 2
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 3
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 3
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 2
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 3
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 3
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 3
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 3
54153: NEG
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 3
54164: NEG
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54205: LD_ADDR_VAR 0 44
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 2
54371: NEG
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: LD_INT 3
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 3
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 3
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 3
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 3
54448: PUSH
54449: LD_INT 3
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: LD_INT 3
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 3
54479: NEG
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 3
54490: NEG
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 3
54502: NEG
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 3
54514: NEG
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54555: LD_ADDR_VAR 0 45
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 2
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 2
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 2
54733: NEG
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: LD_INT 3
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 3
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 3
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: LD_INT 3
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 3
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 3
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 3
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 3
54852: NEG
54853: PUSH
54854: LD_INT 2
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 3
54864: NEG
54865: PUSH
54866: LD_INT 3
54868: NEG
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54905: LD_ADDR_VAR 0 46
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: LD_INT 2
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: LD_INT 1
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 3
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: LD_INT 3
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: LD_INT 1
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 3
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 3
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: LD_INT 2
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 3
55201: NEG
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 3
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55253: LD_ADDR_VAR 0 47
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: LD_INT 2
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: NEG
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55404: LD_ADDR_VAR 0 48
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 2
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 2
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55551: LD_ADDR_VAR 0 49
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 2
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: LD_INT 2
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55695: LD_ADDR_VAR 0 50
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: LD_INT 2
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55839: LD_ADDR_VAR 0 51
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 2
55962: NEG
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55986: LD_ADDR_VAR 0 52
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 2
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: NEG
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: NEG
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56137: LD_ADDR_VAR 0 53
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 2
56336: NEG
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56367: LD_ADDR_VAR 0 54
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 2
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: LD_INT 1
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: LD_INT 2
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56597: LD_ADDR_VAR 0 55
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: PUSH
56733: LD_INT 2
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 2
56773: NEG
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: NEG
56797: PUSH
56798: LD_INT 2
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56827: LD_ADDR_VAR 0 56
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 2
57003: NEG
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: NEG
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57057: LD_ADDR_VAR 0 57
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 2
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 2
57192: PUSH
57193: LD_INT 2
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: LD_INT 2
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 2
57233: NEG
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 2
57256: NEG
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57287: LD_ADDR_VAR 0 58
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: LD_INT 1
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: NEG
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 2
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: LD_INT 2
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 2
57463: NEG
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: LD_INT 2
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57517: LD_ADDR_VAR 0 59
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 1
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57605: LD_ADDR_VAR 0 60
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57693: LD_ADDR_VAR 0 61
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57781: LD_ADDR_VAR 0 62
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57869: LD_ADDR_VAR 0 63
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57957: LD_ADDR_VAR 0 64
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: ST_TO_ADDR
// end ; 1 :
58045: GO 63942
58047: LD_INT 1
58049: DOUBLE
58050: EQUAL
58051: IFTRUE 58055
58053: GO 60678
58055: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58056: LD_ADDR_VAR 0 11
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 3
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: LD_INT 3
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: LIST
58099: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58100: LD_ADDR_VAR 0 12
58104: PUSH
58105: LD_INT 2
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 3
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 3
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: LIST
58140: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58141: LD_ADDR_VAR 0 13
58145: PUSH
58146: LD_INT 3
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 2
58168: PUSH
58169: LD_INT 3
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: LIST
58180: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58181: LD_ADDR_VAR 0 14
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 3
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: LIST
58221: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58222: LD_ADDR_VAR 0 15
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 3
58240: NEG
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 3
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58266: LD_ADDR_VAR 0 16
58270: PUSH
58271: LD_INT 2
58273: NEG
58274: PUSH
58275: LD_INT 3
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 3
58285: NEG
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 3
58297: NEG
58298: PUSH
58299: LD_INT 3
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: LIST
58311: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58312: LD_ADDR_VAR 0 17
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 3
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 3
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: LIST
58355: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58356: LD_ADDR_VAR 0 18
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 3
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: LIST
58396: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58397: LD_ADDR_VAR 0 19
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 3
58414: PUSH
58415: LD_INT 3
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: LD_INT 3
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: LIST
58436: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58437: LD_ADDR_VAR 0 20
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: LD_INT 3
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 3
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: NEG
58465: PUSH
58466: LD_INT 2
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: LIST
58477: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58478: LD_ADDR_VAR 0 21
58482: PUSH
58483: LD_INT 2
58485: NEG
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 3
58496: NEG
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 3
58507: NEG
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: LIST
58521: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58522: LD_ADDR_VAR 0 22
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: LD_INT 3
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 3
58541: NEG
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 3
58553: NEG
58554: PUSH
58555: LD_INT 3
58557: NEG
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: LIST
58567: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58568: LD_ADDR_VAR 0 23
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 3
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 4
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 3
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: LIST
58611: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58612: LD_ADDR_VAR 0 24
58616: PUSH
58617: LD_INT 3
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 3
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 4
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: LIST
58652: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58653: LD_ADDR_VAR 0 25
58657: PUSH
58658: LD_INT 3
58660: PUSH
58661: LD_INT 3
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 4
58670: PUSH
58671: LD_INT 3
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 3
58680: PUSH
58681: LD_INT 4
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: LIST
58692: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58693: LD_ADDR_VAR 0 26
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 3
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: LD_INT 4
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: NEG
58721: PUSH
58722: LD_INT 3
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: LIST
58733: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58734: LD_ADDR_VAR 0 27
58738: PUSH
58739: LD_INT 3
58741: NEG
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 3
58752: NEG
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 4
58763: NEG
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: LIST
58777: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58778: LD_ADDR_VAR 0 28
58782: PUSH
58783: LD_INT 3
58785: NEG
58786: PUSH
58787: LD_INT 3
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 3
58797: NEG
58798: PUSH
58799: LD_INT 4
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 4
58809: NEG
58810: PUSH
58811: LD_INT 3
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: LIST
58823: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58824: LD_ADDR_VAR 0 29
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: LD_INT 2
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: LD_INT 4
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: LD_INT 4
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: LD_INT 3
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 5
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: LD_INT 5
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: PUSH
58923: LD_INT 4
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: LD_INT 6
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: LD_INT 6
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: LD_INT 5
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58979: LD_ADDR_VAR 0 30
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 3
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 3
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 4
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 4
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 4
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 5
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 5
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 5
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 6
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 6
59100: PUSH
59101: LD_INT 1
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59122: LD_ADDR_VAR 0 31
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: LD_INT 3
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 4
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 4
59169: PUSH
59170: LD_INT 4
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: LD_INT 4
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 5
59189: PUSH
59190: LD_INT 4
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 5
59199: PUSH
59200: LD_INT 5
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 4
59209: PUSH
59210: LD_INT 5
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 6
59219: PUSH
59220: LD_INT 5
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 6
59229: PUSH
59230: LD_INT 6
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 5
59239: PUSH
59240: LD_INT 6
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59261: LD_ADDR_VAR 0 32
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: LD_INT 3
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 3
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: LD_INT 4
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: LD_INT 4
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: LD_INT 3
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: LD_INT 5
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: LD_INT 5
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: LD_INT 4
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: LD_INT 6
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: LD_INT 6
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: LD_INT 5
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59404: LD_ADDR_VAR 0 33
59408: PUSH
59409: LD_INT 2
59411: NEG
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: NEG
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 3
59433: NEG
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 3
59445: NEG
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 4
59456: NEG
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 4
59467: NEG
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 4
59479: NEG
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 5
59490: NEG
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 5
59501: NEG
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 5
59513: NEG
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 6
59524: NEG
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 6
59535: NEG
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59559: LD_ADDR_VAR 0 34
59563: PUSH
59564: LD_INT 2
59566: NEG
59567: PUSH
59568: LD_INT 3
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 3
59578: NEG
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 3
59590: NEG
59591: PUSH
59592: LD_INT 3
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 3
59602: NEG
59603: PUSH
59604: LD_INT 4
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 4
59614: NEG
59615: PUSH
59616: LD_INT 3
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 4
59626: NEG
59627: PUSH
59628: LD_INT 4
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 4
59638: NEG
59639: PUSH
59640: LD_INT 5
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 5
59650: NEG
59651: PUSH
59652: LD_INT 4
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 5
59662: NEG
59663: PUSH
59664: LD_INT 5
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 5
59674: NEG
59675: PUSH
59676: LD_INT 6
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 6
59686: NEG
59687: PUSH
59688: LD_INT 5
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 6
59698: NEG
59699: PUSH
59700: LD_INT 6
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59722: LD_ADDR_VAR 0 41
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: LD_INT 2
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: LIST
59765: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59766: LD_ADDR_VAR 0 42
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: LIST
59806: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59807: LD_ADDR_VAR 0 43
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 3
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: LD_INT 3
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: LIST
59846: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59847: LD_ADDR_VAR 0 44
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 2
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: LD_INT 3
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: LIST
59887: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59888: LD_ADDR_VAR 0 45
59892: PUSH
59893: LD_INT 2
59895: NEG
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 3
59917: NEG
59918: PUSH
59919: LD_INT 1
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: LIST
59931: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59932: LD_ADDR_VAR 0 46
59936: PUSH
59937: LD_INT 2
59939: NEG
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: LD_INT 3
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 3
59963: NEG
59964: PUSH
59965: LD_INT 2
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: LIST
59977: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59978: LD_ADDR_VAR 0 47
59982: PUSH
59983: LD_INT 2
59985: NEG
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: LD_INT 3
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60011: LD_ADDR_VAR 0 48
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: LD_INT 2
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 2
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60042: LD_ADDR_VAR 0 49
60046: PUSH
60047: LD_INT 3
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 3
60059: PUSH
60060: LD_INT 2
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60071: LD_ADDR_VAR 0 50
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 3
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: LD_INT 3
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60100: LD_ADDR_VAR 0 51
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 2
60118: NEG
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60131: LD_ADDR_VAR 0 52
60135: PUSH
60136: LD_INT 3
60138: NEG
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 3
60150: NEG
60151: PUSH
60152: LD_INT 2
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60164: LD_ADDR_VAR 0 53
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: LD_INT 3
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: LD_INT 3
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: LIST
60207: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60208: LD_ADDR_VAR 0 54
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 3
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: LIST
60248: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60249: LD_ADDR_VAR 0 55
60253: PUSH
60254: LD_INT 3
60256: PUSH
60257: LD_INT 2
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 3
60266: PUSH
60267: LD_INT 3
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: LD_INT 3
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: LIST
60288: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60289: LD_ADDR_VAR 0 56
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: LD_INT 3
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: LD_INT 3
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: NEG
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: LIST
60329: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60330: LD_ADDR_VAR 0 57
60334: PUSH
60335: LD_INT 2
60337: NEG
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 3
60348: NEG
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 3
60359: NEG
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: LIST
60373: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60374: LD_ADDR_VAR 0 58
60378: PUSH
60379: LD_INT 2
60381: NEG
60382: PUSH
60383: LD_INT 3
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 3
60393: NEG
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 3
60405: NEG
60406: PUSH
60407: LD_INT 3
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: LIST
60419: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60420: LD_ADDR_VAR 0 59
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 2
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 2
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: LIST
60463: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60464: LD_ADDR_VAR 0 60
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 2
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 2
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: LIST
60504: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60505: LD_ADDR_VAR 0 61
60509: PUSH
60510: LD_INT 2
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 2
60522: PUSH
60523: LD_INT 2
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: LIST
60544: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60545: LD_ADDR_VAR 0 62
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 2
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: LD_INT 2
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: LIST
60585: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60586: LD_ADDR_VAR 0 63
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: LD_INT 1
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: NEG
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: LIST
60629: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60630: LD_ADDR_VAR 0 64
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: LD_INT 2
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: LD_INT 2
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: LIST
60675: ST_TO_ADDR
// end ; 2 :
60676: GO 63942
60678: LD_INT 2
60680: DOUBLE
60681: EQUAL
60682: IFTRUE 60686
60684: GO 63941
60686: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60687: LD_ADDR_VAR 0 29
60691: PUSH
60692: LD_INT 4
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 4
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 5
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 5
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 4
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 3
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 3
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 3
60766: PUSH
60767: LD_INT 2
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 5
60777: PUSH
60778: LD_INT 2
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: PUSH
60788: LD_INT 3
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 3
60797: PUSH
60798: LD_INT 2
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 4
60807: PUSH
60808: LD_INT 3
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 4
60817: PUSH
60818: LD_INT 4
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 3
60827: PUSH
60828: LD_INT 4
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 2
60837: PUSH
60838: LD_INT 3
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 2
60847: PUSH
60848: LD_INT 2
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 4
60857: PUSH
60858: LD_INT 2
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 2
60867: PUSH
60868: LD_INT 4
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 4
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: LD_INT 3
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: LD_INT 4
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: LD_INT 5
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: LD_INT 5
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: LD_INT 4
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: LD_INT 3
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 2
60949: PUSH
60950: LD_INT 5
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: NEG
60960: PUSH
60961: LD_INT 3
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 3
60970: NEG
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 3
60981: NEG
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 2
60993: NEG
60994: PUSH
60995: LD_INT 0
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 2
61004: NEG
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 3
61015: NEG
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 4
61026: NEG
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 4
61037: NEG
61038: PUSH
61039: LD_INT 1
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 4
61049: NEG
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 2
61061: NEG
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 4
61072: NEG
61073: PUSH
61074: LD_INT 4
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 4
61084: NEG
61085: PUSH
61086: LD_INT 5
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 3
61096: NEG
61097: PUSH
61098: LD_INT 4
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 3
61108: NEG
61109: PUSH
61110: LD_INT 3
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 4
61120: NEG
61121: PUSH
61122: LD_INT 3
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 5
61132: NEG
61133: PUSH
61134: LD_INT 4
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 5
61144: NEG
61145: PUSH
61146: LD_INT 5
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 3
61156: NEG
61157: PUSH
61158: LD_INT 5
61160: NEG
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 5
61168: NEG
61169: PUSH
61170: LD_INT 3
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61225: LD_ADDR_VAR 0 30
61229: PUSH
61230: LD_INT 4
61232: PUSH
61233: LD_INT 4
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 4
61242: PUSH
61243: LD_INT 3
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 5
61252: PUSH
61253: LD_INT 4
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 5
61262: PUSH
61263: LD_INT 5
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 4
61272: PUSH
61273: LD_INT 5
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 3
61282: PUSH
61283: LD_INT 4
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 3
61292: PUSH
61293: LD_INT 3
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 5
61302: PUSH
61303: LD_INT 3
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 3
61312: PUSH
61313: LD_INT 5
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: LD_INT 3
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: LD_INT 2
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 1
61342: PUSH
61343: LD_INT 3
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: LD_INT 4
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: LD_INT 4
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: LD_INT 3
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: LD_INT 2
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: LD_INT 4
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 2
61404: NEG
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 4
61415: NEG
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 4
61426: NEG
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 3
61438: NEG
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 3
61449: NEG
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 4
61460: NEG
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 5
61471: NEG
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 5
61482: NEG
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 5
61494: NEG
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 3
61506: NEG
61507: PUSH
61508: LD_INT 2
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 3
61517: NEG
61518: PUSH
61519: LD_INT 3
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 3
61529: NEG
61530: PUSH
61531: LD_INT 4
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 2
61541: NEG
61542: PUSH
61543: LD_INT 3
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 2
61553: NEG
61554: PUSH
61555: LD_INT 2
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: NEG
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 4
61577: NEG
61578: PUSH
61579: LD_INT 3
61581: NEG
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 4
61589: NEG
61590: PUSH
61591: LD_INT 4
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: LD_INT 4
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 4
61613: NEG
61614: PUSH
61615: LD_INT 2
61617: NEG
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: LD_INT 4
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 0
61636: PUSH
61637: LD_INT 5
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: PUSH
61648: LD_INT 4
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: LD_INT 3
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: LD_INT 3
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 1
61680: NEG
61681: PUSH
61682: LD_INT 4
61684: NEG
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: LD_INT 5
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 2
61704: PUSH
61705: LD_INT 3
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 2
61715: NEG
61716: PUSH
61717: LD_INT 5
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61772: LD_ADDR_VAR 0 31
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: LD_INT 4
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: LD_INT 3
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 4
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: LD_INT 5
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: LD_INT 5
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: LD_INT 4
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: NEG
61841: PUSH
61842: LD_INT 3
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 2
61851: PUSH
61852: LD_INT 5
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 2
61861: NEG
61862: PUSH
61863: LD_INT 3
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 3
61872: NEG
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 3
61883: NEG
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 2
61895: NEG
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 2
61906: NEG
61907: PUSH
61908: LD_INT 1
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 3
61917: NEG
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 4
61928: NEG
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 4
61939: NEG
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 4
61951: NEG
61952: PUSH
61953: LD_INT 2
61955: NEG
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 2
61963: NEG
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 4
61974: NEG
61975: PUSH
61976: LD_INT 4
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 4
61986: NEG
61987: PUSH
61988: LD_INT 5
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 3
61998: NEG
61999: PUSH
62000: LD_INT 4
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 3
62010: NEG
62011: PUSH
62012: LD_INT 3
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 4
62022: NEG
62023: PUSH
62024: LD_INT 3
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 5
62034: NEG
62035: PUSH
62036: LD_INT 4
62038: NEG
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 5
62046: NEG
62047: PUSH
62048: LD_INT 5
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 3
62058: NEG
62059: PUSH
62060: LD_INT 5
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 5
62070: NEG
62071: PUSH
62072: LD_INT 3
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: LD_INT 3
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: LD_INT 4
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: LD_INT 3
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 1
62115: PUSH
62116: LD_INT 2
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: LD_INT 3
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: LD_INT 4
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 2
62161: PUSH
62162: LD_INT 2
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 2
62172: NEG
62173: PUSH
62174: LD_INT 4
62176: NEG
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 4
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 4
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 5
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 5
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 4
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 3
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 3
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 3
62256: PUSH
62257: LD_INT 2
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 5
62267: PUSH
62268: LD_INT 2
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62322: LD_ADDR_VAR 0 32
62326: PUSH
62327: LD_INT 4
62329: NEG
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 4
62340: NEG
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 3
62352: NEG
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 3
62363: NEG
62364: PUSH
62365: LD_INT 1
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 4
62374: NEG
62375: PUSH
62376: LD_INT 1
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 5
62385: NEG
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 5
62396: NEG
62397: PUSH
62398: LD_INT 1
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 5
62408: NEG
62409: PUSH
62410: LD_INT 2
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 3
62420: NEG
62421: PUSH
62422: LD_INT 2
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 3
62431: NEG
62432: PUSH
62433: LD_INT 3
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 3
62443: NEG
62444: PUSH
62445: LD_INT 4
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 2
62455: NEG
62456: PUSH
62457: LD_INT 3
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 2
62467: NEG
62468: PUSH
62469: LD_INT 2
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 3
62479: NEG
62480: PUSH
62481: LD_INT 2
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 4
62491: NEG
62492: PUSH
62493: LD_INT 3
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 4
62503: NEG
62504: PUSH
62505: LD_INT 4
62507: NEG
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 2
62515: NEG
62516: PUSH
62517: LD_INT 4
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 4
62527: NEG
62528: PUSH
62529: LD_INT 2
62531: NEG
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: LD_INT 4
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: LD_INT 5
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: LD_INT 4
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: LD_INT 3
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: LD_INT 3
62586: NEG
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 1
62594: NEG
62595: PUSH
62596: LD_INT 4
62598: NEG
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 1
62606: NEG
62607: PUSH
62608: LD_INT 5
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 2
62618: PUSH
62619: LD_INT 3
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 2
62629: NEG
62630: PUSH
62631: LD_INT 5
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 3
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 3
62651: PUSH
62652: LD_INT 1
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 4
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 4
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 3
62682: PUSH
62683: LD_INT 1
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 2
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 2
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: PUSH
62714: LD_INT 2
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 4
62724: PUSH
62725: LD_INT 2
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 4
62734: PUSH
62735: LD_INT 4
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 4
62744: PUSH
62745: LD_INT 3
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 5
62754: PUSH
62755: LD_INT 4
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 5
62764: PUSH
62765: LD_INT 5
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 4
62774: PUSH
62775: LD_INT 5
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 3
62784: PUSH
62785: LD_INT 4
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 3
62794: PUSH
62795: LD_INT 3
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 5
62804: PUSH
62805: LD_INT 3
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 3
62814: PUSH
62815: LD_INT 5
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62869: LD_ADDR_VAR 0 33
62873: PUSH
62874: LD_INT 4
62876: NEG
62877: PUSH
62878: LD_INT 4
62880: NEG
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 4
62888: NEG
62889: PUSH
62890: LD_INT 5
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 3
62900: NEG
62901: PUSH
62902: LD_INT 4
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 3
62912: NEG
62913: PUSH
62914: LD_INT 3
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 4
62924: NEG
62925: PUSH
62926: LD_INT 3
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 5
62936: NEG
62937: PUSH
62938: LD_INT 4
62940: NEG
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 5
62948: NEG
62949: PUSH
62950: LD_INT 5
62952: NEG
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 3
62960: NEG
62961: PUSH
62962: LD_INT 5
62964: NEG
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 5
62972: NEG
62973: PUSH
62974: LD_INT 3
62976: NEG
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: LD_INT 3
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: LD_INT 4
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: LD_INT 3
63009: NEG
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 1
63017: PUSH
63018: LD_INT 2
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 1
63039: NEG
63040: PUSH
63041: LD_INT 3
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: LD_INT 4
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 2
63063: PUSH
63064: LD_INT 2
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 2
63074: NEG
63075: PUSH
63076: LD_INT 4
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 4
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 4
63096: PUSH
63097: LD_INT 1
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 5
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 5
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 4
63127: PUSH
63128: LD_INT 1
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 3
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 3
63147: PUSH
63148: LD_INT 1
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 3
63158: PUSH
63159: LD_INT 2
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 5
63169: PUSH
63170: LD_INT 2
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 3
63179: PUSH
63180: LD_INT 3
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 3
63189: PUSH
63190: LD_INT 2
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 4
63199: PUSH
63200: LD_INT 3
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 4
63209: PUSH
63210: LD_INT 4
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 3
63219: PUSH
63220: LD_INT 4
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 2
63229: PUSH
63230: LD_INT 3
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 2
63239: PUSH
63240: LD_INT 2
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 4
63249: PUSH
63250: LD_INT 2
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 2
63259: PUSH
63260: LD_INT 4
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: LD_INT 4
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: LD_INT 3
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 1
63289: PUSH
63290: LD_INT 4
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 1
63299: PUSH
63300: LD_INT 5
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 0
63309: PUSH
63310: LD_INT 5
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 1
63319: NEG
63320: PUSH
63321: LD_INT 4
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 1
63330: NEG
63331: PUSH
63332: LD_INT 3
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: LD_INT 5
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 2
63351: NEG
63352: PUSH
63353: LD_INT 3
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63407: LD_ADDR_VAR 0 34
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: LD_INT 4
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: LD_INT 5
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 1
63436: PUSH
63437: LD_INT 4
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: LD_INT 3
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 3
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 1
63469: NEG
63470: PUSH
63471: LD_INT 4
63473: NEG
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 1
63481: NEG
63482: PUSH
63483: LD_INT 5
63485: NEG
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 2
63493: PUSH
63494: LD_INT 3
63496: NEG
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 2
63504: NEG
63505: PUSH
63506: LD_INT 5
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 3
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 3
63526: PUSH
63527: LD_INT 1
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 4
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 4
63547: PUSH
63548: LD_INT 1
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 3
63557: PUSH
63558: LD_INT 1
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 2
63567: PUSH
63568: LD_INT 0
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 2
63577: PUSH
63578: LD_INT 1
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 2
63588: PUSH
63589: LD_INT 2
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 4
63599: PUSH
63600: LD_INT 2
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 4
63609: PUSH
63610: LD_INT 4
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 4
63619: PUSH
63620: LD_INT 3
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 5
63629: PUSH
63630: LD_INT 4
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 5
63639: PUSH
63640: LD_INT 5
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 4
63649: PUSH
63650: LD_INT 5
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 3
63659: PUSH
63660: LD_INT 4
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 3
63669: PUSH
63670: LD_INT 3
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 5
63679: PUSH
63680: LD_INT 3
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 3
63689: PUSH
63690: LD_INT 5
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: LD_INT 3
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: LD_INT 2
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: LD_INT 3
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: LD_INT 4
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: LD_INT 4
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: NEG
63750: PUSH
63751: LD_INT 3
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: NEG
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: LD_INT 4
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 2
63781: NEG
63782: PUSH
63783: LD_INT 2
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 4
63792: NEG
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 4
63803: NEG
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 3
63815: NEG
63816: PUSH
63817: LD_INT 0
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 3
63826: NEG
63827: PUSH
63828: LD_INT 1
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 4
63837: NEG
63838: PUSH
63839: LD_INT 1
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 5
63848: NEG
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 5
63859: NEG
63860: PUSH
63861: LD_INT 1
63863: NEG
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 5
63871: NEG
63872: PUSH
63873: LD_INT 2
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 3
63883: NEG
63884: PUSH
63885: LD_INT 2
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: ST_TO_ADDR
// end ; end ;
63939: GO 63942
63941: POP
// case btype of b_depot , b_warehouse :
63942: LD_VAR 0 1
63946: PUSH
63947: LD_INT 0
63949: DOUBLE
63950: EQUAL
63951: IFTRUE 63961
63953: LD_INT 1
63955: DOUBLE
63956: EQUAL
63957: IFTRUE 63961
63959: GO 64162
63961: POP
// case nation of nation_american :
63962: LD_VAR 0 5
63966: PUSH
63967: LD_INT 1
63969: DOUBLE
63970: EQUAL
63971: IFTRUE 63975
63973: GO 64031
63975: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63976: LD_ADDR_VAR 0 9
63980: PUSH
63981: LD_VAR 0 11
63985: PUSH
63986: LD_VAR 0 12
63990: PUSH
63991: LD_VAR 0 13
63995: PUSH
63996: LD_VAR 0 14
64000: PUSH
64001: LD_VAR 0 15
64005: PUSH
64006: LD_VAR 0 16
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: PUSH
64019: LD_VAR 0 4
64023: PUSH
64024: LD_INT 1
64026: PLUS
64027: ARRAY
64028: ST_TO_ADDR
64029: GO 64160
64031: LD_INT 2
64033: DOUBLE
64034: EQUAL
64035: IFTRUE 64039
64037: GO 64095
64039: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64040: LD_ADDR_VAR 0 9
64044: PUSH
64045: LD_VAR 0 17
64049: PUSH
64050: LD_VAR 0 18
64054: PUSH
64055: LD_VAR 0 19
64059: PUSH
64060: LD_VAR 0 20
64064: PUSH
64065: LD_VAR 0 21
64069: PUSH
64070: LD_VAR 0 22
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: PUSH
64083: LD_VAR 0 4
64087: PUSH
64088: LD_INT 1
64090: PLUS
64091: ARRAY
64092: ST_TO_ADDR
64093: GO 64160
64095: LD_INT 3
64097: DOUBLE
64098: EQUAL
64099: IFTRUE 64103
64101: GO 64159
64103: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64104: LD_ADDR_VAR 0 9
64108: PUSH
64109: LD_VAR 0 23
64113: PUSH
64114: LD_VAR 0 24
64118: PUSH
64119: LD_VAR 0 25
64123: PUSH
64124: LD_VAR 0 26
64128: PUSH
64129: LD_VAR 0 27
64133: PUSH
64134: LD_VAR 0 28
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: PUSH
64147: LD_VAR 0 4
64151: PUSH
64152: LD_INT 1
64154: PLUS
64155: ARRAY
64156: ST_TO_ADDR
64157: GO 64160
64159: POP
64160: GO 64715
64162: LD_INT 2
64164: DOUBLE
64165: EQUAL
64166: IFTRUE 64176
64168: LD_INT 3
64170: DOUBLE
64171: EQUAL
64172: IFTRUE 64176
64174: GO 64232
64176: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64177: LD_ADDR_VAR 0 9
64181: PUSH
64182: LD_VAR 0 29
64186: PUSH
64187: LD_VAR 0 30
64191: PUSH
64192: LD_VAR 0 31
64196: PUSH
64197: LD_VAR 0 32
64201: PUSH
64202: LD_VAR 0 33
64206: PUSH
64207: LD_VAR 0 34
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: PUSH
64220: LD_VAR 0 4
64224: PUSH
64225: LD_INT 1
64227: PLUS
64228: ARRAY
64229: ST_TO_ADDR
64230: GO 64715
64232: LD_INT 16
64234: DOUBLE
64235: EQUAL
64236: IFTRUE 64294
64238: LD_INT 17
64240: DOUBLE
64241: EQUAL
64242: IFTRUE 64294
64244: LD_INT 18
64246: DOUBLE
64247: EQUAL
64248: IFTRUE 64294
64250: LD_INT 19
64252: DOUBLE
64253: EQUAL
64254: IFTRUE 64294
64256: LD_INT 22
64258: DOUBLE
64259: EQUAL
64260: IFTRUE 64294
64262: LD_INT 20
64264: DOUBLE
64265: EQUAL
64266: IFTRUE 64294
64268: LD_INT 21
64270: DOUBLE
64271: EQUAL
64272: IFTRUE 64294
64274: LD_INT 23
64276: DOUBLE
64277: EQUAL
64278: IFTRUE 64294
64280: LD_INT 24
64282: DOUBLE
64283: EQUAL
64284: IFTRUE 64294
64286: LD_INT 25
64288: DOUBLE
64289: EQUAL
64290: IFTRUE 64294
64292: GO 64350
64294: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64295: LD_ADDR_VAR 0 9
64299: PUSH
64300: LD_VAR 0 35
64304: PUSH
64305: LD_VAR 0 36
64309: PUSH
64310: LD_VAR 0 37
64314: PUSH
64315: LD_VAR 0 38
64319: PUSH
64320: LD_VAR 0 39
64324: PUSH
64325: LD_VAR 0 40
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: PUSH
64338: LD_VAR 0 4
64342: PUSH
64343: LD_INT 1
64345: PLUS
64346: ARRAY
64347: ST_TO_ADDR
64348: GO 64715
64350: LD_INT 6
64352: DOUBLE
64353: EQUAL
64354: IFTRUE 64406
64356: LD_INT 7
64358: DOUBLE
64359: EQUAL
64360: IFTRUE 64406
64362: LD_INT 8
64364: DOUBLE
64365: EQUAL
64366: IFTRUE 64406
64368: LD_INT 13
64370: DOUBLE
64371: EQUAL
64372: IFTRUE 64406
64374: LD_INT 12
64376: DOUBLE
64377: EQUAL
64378: IFTRUE 64406
64380: LD_INT 15
64382: DOUBLE
64383: EQUAL
64384: IFTRUE 64406
64386: LD_INT 11
64388: DOUBLE
64389: EQUAL
64390: IFTRUE 64406
64392: LD_INT 14
64394: DOUBLE
64395: EQUAL
64396: IFTRUE 64406
64398: LD_INT 10
64400: DOUBLE
64401: EQUAL
64402: IFTRUE 64406
64404: GO 64462
64406: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64407: LD_ADDR_VAR 0 9
64411: PUSH
64412: LD_VAR 0 41
64416: PUSH
64417: LD_VAR 0 42
64421: PUSH
64422: LD_VAR 0 43
64426: PUSH
64427: LD_VAR 0 44
64431: PUSH
64432: LD_VAR 0 45
64436: PUSH
64437: LD_VAR 0 46
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: PUSH
64450: LD_VAR 0 4
64454: PUSH
64455: LD_INT 1
64457: PLUS
64458: ARRAY
64459: ST_TO_ADDR
64460: GO 64715
64462: LD_INT 36
64464: DOUBLE
64465: EQUAL
64466: IFTRUE 64470
64468: GO 64526
64470: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64471: LD_ADDR_VAR 0 9
64475: PUSH
64476: LD_VAR 0 47
64480: PUSH
64481: LD_VAR 0 48
64485: PUSH
64486: LD_VAR 0 49
64490: PUSH
64491: LD_VAR 0 50
64495: PUSH
64496: LD_VAR 0 51
64500: PUSH
64501: LD_VAR 0 52
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: PUSH
64514: LD_VAR 0 4
64518: PUSH
64519: LD_INT 1
64521: PLUS
64522: ARRAY
64523: ST_TO_ADDR
64524: GO 64715
64526: LD_INT 4
64528: DOUBLE
64529: EQUAL
64530: IFTRUE 64552
64532: LD_INT 5
64534: DOUBLE
64535: EQUAL
64536: IFTRUE 64552
64538: LD_INT 34
64540: DOUBLE
64541: EQUAL
64542: IFTRUE 64552
64544: LD_INT 37
64546: DOUBLE
64547: EQUAL
64548: IFTRUE 64552
64550: GO 64608
64552: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64553: LD_ADDR_VAR 0 9
64557: PUSH
64558: LD_VAR 0 53
64562: PUSH
64563: LD_VAR 0 54
64567: PUSH
64568: LD_VAR 0 55
64572: PUSH
64573: LD_VAR 0 56
64577: PUSH
64578: LD_VAR 0 57
64582: PUSH
64583: LD_VAR 0 58
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: PUSH
64596: LD_VAR 0 4
64600: PUSH
64601: LD_INT 1
64603: PLUS
64604: ARRAY
64605: ST_TO_ADDR
64606: GO 64715
64608: LD_INT 31
64610: DOUBLE
64611: EQUAL
64612: IFTRUE 64658
64614: LD_INT 32
64616: DOUBLE
64617: EQUAL
64618: IFTRUE 64658
64620: LD_INT 33
64622: DOUBLE
64623: EQUAL
64624: IFTRUE 64658
64626: LD_INT 27
64628: DOUBLE
64629: EQUAL
64630: IFTRUE 64658
64632: LD_INT 26
64634: DOUBLE
64635: EQUAL
64636: IFTRUE 64658
64638: LD_INT 28
64640: DOUBLE
64641: EQUAL
64642: IFTRUE 64658
64644: LD_INT 29
64646: DOUBLE
64647: EQUAL
64648: IFTRUE 64658
64650: LD_INT 30
64652: DOUBLE
64653: EQUAL
64654: IFTRUE 64658
64656: GO 64714
64658: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64659: LD_ADDR_VAR 0 9
64663: PUSH
64664: LD_VAR 0 59
64668: PUSH
64669: LD_VAR 0 60
64673: PUSH
64674: LD_VAR 0 61
64678: PUSH
64679: LD_VAR 0 62
64683: PUSH
64684: LD_VAR 0 63
64688: PUSH
64689: LD_VAR 0 64
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: PUSH
64702: LD_VAR 0 4
64706: PUSH
64707: LD_INT 1
64709: PLUS
64710: ARRAY
64711: ST_TO_ADDR
64712: GO 64715
64714: POP
// temp_list2 = [ ] ;
64715: LD_ADDR_VAR 0 10
64719: PUSH
64720: EMPTY
64721: ST_TO_ADDR
// for i in temp_list do
64722: LD_ADDR_VAR 0 8
64726: PUSH
64727: LD_VAR 0 9
64731: PUSH
64732: FOR_IN
64733: IFFALSE 64785
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64735: LD_ADDR_VAR 0 10
64739: PUSH
64740: LD_VAR 0 10
64744: PUSH
64745: LD_VAR 0 8
64749: PUSH
64750: LD_INT 1
64752: ARRAY
64753: PUSH
64754: LD_VAR 0 2
64758: PLUS
64759: PUSH
64760: LD_VAR 0 8
64764: PUSH
64765: LD_INT 2
64767: ARRAY
64768: PUSH
64769: LD_VAR 0 3
64773: PLUS
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: EMPTY
64780: LIST
64781: ADD
64782: ST_TO_ADDR
64783: GO 64732
64785: POP
64786: POP
// result = temp_list2 ;
64787: LD_ADDR_VAR 0 7
64791: PUSH
64792: LD_VAR 0 10
64796: ST_TO_ADDR
// end ;
64797: LD_VAR 0 7
64801: RET
// export function EnemyInRange ( unit , dist ) ; begin
64802: LD_INT 0
64804: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64805: LD_ADDR_VAR 0 3
64809: PUSH
64810: LD_VAR 0 1
64814: PPUSH
64815: CALL_OW 255
64819: PPUSH
64820: LD_VAR 0 1
64824: PPUSH
64825: CALL_OW 250
64829: PPUSH
64830: LD_VAR 0 1
64834: PPUSH
64835: CALL_OW 251
64839: PPUSH
64840: LD_VAR 0 2
64844: PPUSH
64845: CALL 38175 0 4
64849: PUSH
64850: LD_INT 4
64852: ARRAY
64853: ST_TO_ADDR
// end ;
64854: LD_VAR 0 3
64858: RET
// export function PlayerSeeMe ( unit ) ; begin
64859: LD_INT 0
64861: PPUSH
// result := See ( your_side , unit ) ;
64862: LD_ADDR_VAR 0 2
64866: PUSH
64867: LD_OWVAR 2
64871: PPUSH
64872: LD_VAR 0 1
64876: PPUSH
64877: CALL_OW 292
64881: ST_TO_ADDR
// end ;
64882: LD_VAR 0 2
64886: RET
// export function ReverseDir ( unit ) ; begin
64887: LD_INT 0
64889: PPUSH
// if not unit then
64890: LD_VAR 0 1
64894: NOT
64895: IFFALSE 64899
// exit ;
64897: GO 64922
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64899: LD_ADDR_VAR 0 2
64903: PUSH
64904: LD_VAR 0 1
64908: PPUSH
64909: CALL_OW 254
64913: PUSH
64914: LD_INT 3
64916: PLUS
64917: PUSH
64918: LD_INT 6
64920: MOD
64921: ST_TO_ADDR
// end ;
64922: LD_VAR 0 2
64926: RET
// export function ReverseArray ( array ) ; var i ; begin
64927: LD_INT 0
64929: PPUSH
64930: PPUSH
// if not array then
64931: LD_VAR 0 1
64935: NOT
64936: IFFALSE 64940
// exit ;
64938: GO 64995
// result := [ ] ;
64940: LD_ADDR_VAR 0 2
64944: PUSH
64945: EMPTY
64946: ST_TO_ADDR
// for i := array downto 1 do
64947: LD_ADDR_VAR 0 3
64951: PUSH
64952: DOUBLE
64953: LD_VAR 0 1
64957: INC
64958: ST_TO_ADDR
64959: LD_INT 1
64961: PUSH
64962: FOR_DOWNTO
64963: IFFALSE 64993
// result := Join ( result , array [ i ] ) ;
64965: LD_ADDR_VAR 0 2
64969: PUSH
64970: LD_VAR 0 2
64974: PPUSH
64975: LD_VAR 0 1
64979: PUSH
64980: LD_VAR 0 3
64984: ARRAY
64985: PPUSH
64986: CALL 69651 0 2
64990: ST_TO_ADDR
64991: GO 64962
64993: POP
64994: POP
// end ;
64995: LD_VAR 0 2
64999: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65000: LD_INT 0
65002: PPUSH
65003: PPUSH
65004: PPUSH
65005: PPUSH
65006: PPUSH
65007: PPUSH
// if not unit or not hexes then
65008: LD_VAR 0 1
65012: NOT
65013: PUSH
65014: LD_VAR 0 2
65018: NOT
65019: OR
65020: IFFALSE 65024
// exit ;
65022: GO 65147
// dist := 9999 ;
65024: LD_ADDR_VAR 0 5
65028: PUSH
65029: LD_INT 9999
65031: ST_TO_ADDR
// for i = 1 to hexes do
65032: LD_ADDR_VAR 0 4
65036: PUSH
65037: DOUBLE
65038: LD_INT 1
65040: DEC
65041: ST_TO_ADDR
65042: LD_VAR 0 2
65046: PUSH
65047: FOR_TO
65048: IFFALSE 65135
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65050: LD_ADDR_VAR 0 6
65054: PUSH
65055: LD_VAR 0 1
65059: PPUSH
65060: LD_VAR 0 2
65064: PUSH
65065: LD_VAR 0 4
65069: ARRAY
65070: PUSH
65071: LD_INT 1
65073: ARRAY
65074: PPUSH
65075: LD_VAR 0 2
65079: PUSH
65080: LD_VAR 0 4
65084: ARRAY
65085: PUSH
65086: LD_INT 2
65088: ARRAY
65089: PPUSH
65090: CALL_OW 297
65094: ST_TO_ADDR
// if tdist < dist then
65095: LD_VAR 0 6
65099: PUSH
65100: LD_VAR 0 5
65104: LESS
65105: IFFALSE 65133
// begin hex := hexes [ i ] ;
65107: LD_ADDR_VAR 0 8
65111: PUSH
65112: LD_VAR 0 2
65116: PUSH
65117: LD_VAR 0 4
65121: ARRAY
65122: ST_TO_ADDR
// dist := tdist ;
65123: LD_ADDR_VAR 0 5
65127: PUSH
65128: LD_VAR 0 6
65132: ST_TO_ADDR
// end ; end ;
65133: GO 65047
65135: POP
65136: POP
// result := hex ;
65137: LD_ADDR_VAR 0 3
65141: PUSH
65142: LD_VAR 0 8
65146: ST_TO_ADDR
// end ;
65147: LD_VAR 0 3
65151: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65152: LD_INT 0
65154: PPUSH
65155: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65156: LD_VAR 0 1
65160: NOT
65161: PUSH
65162: LD_VAR 0 1
65166: PUSH
65167: LD_INT 21
65169: PUSH
65170: LD_INT 2
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 23
65179: PUSH
65180: LD_INT 2
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PPUSH
65191: CALL_OW 69
65195: IN
65196: NOT
65197: OR
65198: IFFALSE 65202
// exit ;
65200: GO 65249
// for i = 1 to 3 do
65202: LD_ADDR_VAR 0 3
65206: PUSH
65207: DOUBLE
65208: LD_INT 1
65210: DEC
65211: ST_TO_ADDR
65212: LD_INT 3
65214: PUSH
65215: FOR_TO
65216: IFFALSE 65247
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65218: LD_VAR 0 1
65222: PPUSH
65223: CALL_OW 250
65227: PPUSH
65228: LD_VAR 0 1
65232: PPUSH
65233: CALL_OW 251
65237: PPUSH
65238: LD_INT 1
65240: PPUSH
65241: CALL_OW 453
65245: GO 65215
65247: POP
65248: POP
// end ;
65249: LD_VAR 0 2
65253: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65254: LD_INT 0
65256: PPUSH
65257: PPUSH
65258: PPUSH
65259: PPUSH
65260: PPUSH
65261: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65262: LD_VAR 0 1
65266: NOT
65267: PUSH
65268: LD_VAR 0 2
65272: NOT
65273: OR
65274: PUSH
65275: LD_VAR 0 1
65279: PPUSH
65280: CALL_OW 314
65284: OR
65285: IFFALSE 65289
// exit ;
65287: GO 65756
// if GetLives ( i ) < 250 then
65289: LD_VAR 0 4
65293: PPUSH
65294: CALL_OW 256
65298: PUSH
65299: LD_INT 250
65301: LESS
65302: IFFALSE 65315
// begin ComAutodestruct ( i ) ;
65304: LD_VAR 0 4
65308: PPUSH
65309: CALL 65152 0 1
// exit ;
65313: GO 65756
// end ; x := GetX ( enemy_unit ) ;
65315: LD_ADDR_VAR 0 7
65319: PUSH
65320: LD_VAR 0 2
65324: PPUSH
65325: CALL_OW 250
65329: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65330: LD_ADDR_VAR 0 8
65334: PUSH
65335: LD_VAR 0 2
65339: PPUSH
65340: CALL_OW 251
65344: ST_TO_ADDR
// if not x or not y then
65345: LD_VAR 0 7
65349: NOT
65350: PUSH
65351: LD_VAR 0 8
65355: NOT
65356: OR
65357: IFFALSE 65361
// exit ;
65359: GO 65756
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65361: LD_ADDR_VAR 0 6
65365: PUSH
65366: LD_VAR 0 7
65370: PPUSH
65371: LD_INT 0
65373: PPUSH
65374: LD_INT 4
65376: PPUSH
65377: CALL_OW 272
65381: PUSH
65382: LD_VAR 0 8
65386: PPUSH
65387: LD_INT 0
65389: PPUSH
65390: LD_INT 4
65392: PPUSH
65393: CALL_OW 273
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_VAR 0 7
65406: PPUSH
65407: LD_INT 1
65409: PPUSH
65410: LD_INT 4
65412: PPUSH
65413: CALL_OW 272
65417: PUSH
65418: LD_VAR 0 8
65422: PPUSH
65423: LD_INT 1
65425: PPUSH
65426: LD_INT 4
65428: PPUSH
65429: CALL_OW 273
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_VAR 0 7
65442: PPUSH
65443: LD_INT 2
65445: PPUSH
65446: LD_INT 4
65448: PPUSH
65449: CALL_OW 272
65453: PUSH
65454: LD_VAR 0 8
65458: PPUSH
65459: LD_INT 2
65461: PPUSH
65462: LD_INT 4
65464: PPUSH
65465: CALL_OW 273
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_VAR 0 7
65478: PPUSH
65479: LD_INT 3
65481: PPUSH
65482: LD_INT 4
65484: PPUSH
65485: CALL_OW 272
65489: PUSH
65490: LD_VAR 0 8
65494: PPUSH
65495: LD_INT 3
65497: PPUSH
65498: LD_INT 4
65500: PPUSH
65501: CALL_OW 273
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_VAR 0 7
65514: PPUSH
65515: LD_INT 4
65517: PPUSH
65518: LD_INT 4
65520: PPUSH
65521: CALL_OW 272
65525: PUSH
65526: LD_VAR 0 8
65530: PPUSH
65531: LD_INT 4
65533: PPUSH
65534: LD_INT 4
65536: PPUSH
65537: CALL_OW 273
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_VAR 0 7
65550: PPUSH
65551: LD_INT 5
65553: PPUSH
65554: LD_INT 4
65556: PPUSH
65557: CALL_OW 272
65561: PUSH
65562: LD_VAR 0 8
65566: PPUSH
65567: LD_INT 5
65569: PPUSH
65570: LD_INT 4
65572: PPUSH
65573: CALL_OW 273
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: ST_TO_ADDR
// for i = tmp downto 1 do
65590: LD_ADDR_VAR 0 4
65594: PUSH
65595: DOUBLE
65596: LD_VAR 0 6
65600: INC
65601: ST_TO_ADDR
65602: LD_INT 1
65604: PUSH
65605: FOR_DOWNTO
65606: IFFALSE 65707
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65608: LD_VAR 0 6
65612: PUSH
65613: LD_VAR 0 4
65617: ARRAY
65618: PUSH
65619: LD_INT 1
65621: ARRAY
65622: PPUSH
65623: LD_VAR 0 6
65627: PUSH
65628: LD_VAR 0 4
65632: ARRAY
65633: PUSH
65634: LD_INT 2
65636: ARRAY
65637: PPUSH
65638: CALL_OW 488
65642: NOT
65643: PUSH
65644: LD_VAR 0 6
65648: PUSH
65649: LD_VAR 0 4
65653: ARRAY
65654: PUSH
65655: LD_INT 1
65657: ARRAY
65658: PPUSH
65659: LD_VAR 0 6
65663: PUSH
65664: LD_VAR 0 4
65668: ARRAY
65669: PUSH
65670: LD_INT 2
65672: ARRAY
65673: PPUSH
65674: CALL_OW 428
65678: PUSH
65679: LD_INT 0
65681: NONEQUAL
65682: OR
65683: IFFALSE 65705
// tmp := Delete ( tmp , i ) ;
65685: LD_ADDR_VAR 0 6
65689: PUSH
65690: LD_VAR 0 6
65694: PPUSH
65695: LD_VAR 0 4
65699: PPUSH
65700: CALL_OW 3
65704: ST_TO_ADDR
65705: GO 65605
65707: POP
65708: POP
// j := GetClosestHex ( unit , tmp ) ;
65709: LD_ADDR_VAR 0 5
65713: PUSH
65714: LD_VAR 0 1
65718: PPUSH
65719: LD_VAR 0 6
65723: PPUSH
65724: CALL 65000 0 2
65728: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65729: LD_VAR 0 1
65733: PPUSH
65734: LD_VAR 0 5
65738: PUSH
65739: LD_INT 1
65741: ARRAY
65742: PPUSH
65743: LD_VAR 0 5
65747: PUSH
65748: LD_INT 2
65750: ARRAY
65751: PPUSH
65752: CALL_OW 111
// end ;
65756: LD_VAR 0 3
65760: RET
// export function PrepareApemanSoldier ( ) ; begin
65761: LD_INT 0
65763: PPUSH
// uc_nation := 0 ;
65764: LD_ADDR_OWVAR 21
65768: PUSH
65769: LD_INT 0
65771: ST_TO_ADDR
// hc_sex := sex_male ;
65772: LD_ADDR_OWVAR 27
65776: PUSH
65777: LD_INT 1
65779: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65780: LD_ADDR_OWVAR 28
65784: PUSH
65785: LD_INT 15
65787: ST_TO_ADDR
// hc_gallery :=  ;
65788: LD_ADDR_OWVAR 33
65792: PUSH
65793: LD_STRING 
65795: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65796: LD_ADDR_OWVAR 31
65800: PUSH
65801: LD_INT 0
65803: PPUSH
65804: LD_INT 3
65806: PPUSH
65807: CALL_OW 12
65811: PUSH
65812: LD_INT 0
65814: PPUSH
65815: LD_INT 3
65817: PPUSH
65818: CALL_OW 12
65822: PUSH
65823: LD_INT 0
65825: PUSH
65826: LD_INT 0
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: ST_TO_ADDR
// end ;
65835: LD_VAR 0 1
65839: RET
// export function PrepareApemanEngineer ( ) ; begin
65840: LD_INT 0
65842: PPUSH
// uc_nation := 0 ;
65843: LD_ADDR_OWVAR 21
65847: PUSH
65848: LD_INT 0
65850: ST_TO_ADDR
// hc_sex := sex_male ;
65851: LD_ADDR_OWVAR 27
65855: PUSH
65856: LD_INT 1
65858: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65859: LD_ADDR_OWVAR 28
65863: PUSH
65864: LD_INT 16
65866: ST_TO_ADDR
// hc_gallery :=  ;
65867: LD_ADDR_OWVAR 33
65871: PUSH
65872: LD_STRING 
65874: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65875: LD_ADDR_OWVAR 31
65879: PUSH
65880: LD_INT 0
65882: PPUSH
65883: LD_INT 3
65885: PPUSH
65886: CALL_OW 12
65890: PUSH
65891: LD_INT 0
65893: PPUSH
65894: LD_INT 3
65896: PPUSH
65897: CALL_OW 12
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: ST_TO_ADDR
// end ;
65914: LD_VAR 0 1
65918: RET
// export function PrepareApeman ( agressivity ) ; begin
65919: LD_INT 0
65921: PPUSH
// uc_side := 0 ;
65922: LD_ADDR_OWVAR 20
65926: PUSH
65927: LD_INT 0
65929: ST_TO_ADDR
// uc_nation := 0 ;
65930: LD_ADDR_OWVAR 21
65934: PUSH
65935: LD_INT 0
65937: ST_TO_ADDR
// hc_sex := sex_male ;
65938: LD_ADDR_OWVAR 27
65942: PUSH
65943: LD_INT 1
65945: ST_TO_ADDR
// hc_class := class_apeman ;
65946: LD_ADDR_OWVAR 28
65950: PUSH
65951: LD_INT 12
65953: ST_TO_ADDR
// hc_gallery :=  ;
65954: LD_ADDR_OWVAR 33
65958: PUSH
65959: LD_STRING 
65961: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65962: LD_ADDR_OWVAR 35
65966: PUSH
65967: LD_VAR 0 1
65971: NEG
65972: PPUSH
65973: LD_VAR 0 1
65977: PPUSH
65978: CALL_OW 12
65982: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65983: LD_ADDR_OWVAR 31
65987: PUSH
65988: LD_INT 0
65990: PPUSH
65991: LD_INT 3
65993: PPUSH
65994: CALL_OW 12
65998: PUSH
65999: LD_INT 0
66001: PPUSH
66002: LD_INT 3
66004: PPUSH
66005: CALL_OW 12
66009: PUSH
66010: LD_INT 0
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: ST_TO_ADDR
// end ;
66022: LD_VAR 0 2
66026: RET
// export function PrepareTiger ( agressivity ) ; begin
66027: LD_INT 0
66029: PPUSH
// uc_side := 0 ;
66030: LD_ADDR_OWVAR 20
66034: PUSH
66035: LD_INT 0
66037: ST_TO_ADDR
// uc_nation := 0 ;
66038: LD_ADDR_OWVAR 21
66042: PUSH
66043: LD_INT 0
66045: ST_TO_ADDR
// hc_class := class_tiger ;
66046: LD_ADDR_OWVAR 28
66050: PUSH
66051: LD_INT 14
66053: ST_TO_ADDR
// hc_gallery :=  ;
66054: LD_ADDR_OWVAR 33
66058: PUSH
66059: LD_STRING 
66061: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66062: LD_ADDR_OWVAR 35
66066: PUSH
66067: LD_VAR 0 1
66071: NEG
66072: PPUSH
66073: LD_VAR 0 1
66077: PPUSH
66078: CALL_OW 12
66082: ST_TO_ADDR
// end ;
66083: LD_VAR 0 2
66087: RET
// export function PrepareEnchidna ( ) ; begin
66088: LD_INT 0
66090: PPUSH
// uc_side := 0 ;
66091: LD_ADDR_OWVAR 20
66095: PUSH
66096: LD_INT 0
66098: ST_TO_ADDR
// uc_nation := 0 ;
66099: LD_ADDR_OWVAR 21
66103: PUSH
66104: LD_INT 0
66106: ST_TO_ADDR
// hc_class := class_baggie ;
66107: LD_ADDR_OWVAR 28
66111: PUSH
66112: LD_INT 13
66114: ST_TO_ADDR
// hc_gallery :=  ;
66115: LD_ADDR_OWVAR 33
66119: PUSH
66120: LD_STRING 
66122: ST_TO_ADDR
// end ;
66123: LD_VAR 0 1
66127: RET
// export function PrepareFrog ( ) ; begin
66128: LD_INT 0
66130: PPUSH
// uc_side := 0 ;
66131: LD_ADDR_OWVAR 20
66135: PUSH
66136: LD_INT 0
66138: ST_TO_ADDR
// uc_nation := 0 ;
66139: LD_ADDR_OWVAR 21
66143: PUSH
66144: LD_INT 0
66146: ST_TO_ADDR
// hc_class := class_frog ;
66147: LD_ADDR_OWVAR 28
66151: PUSH
66152: LD_INT 19
66154: ST_TO_ADDR
// hc_gallery :=  ;
66155: LD_ADDR_OWVAR 33
66159: PUSH
66160: LD_STRING 
66162: ST_TO_ADDR
// end ;
66163: LD_VAR 0 1
66167: RET
// export function PrepareFish ( ) ; begin
66168: LD_INT 0
66170: PPUSH
// uc_side := 0 ;
66171: LD_ADDR_OWVAR 20
66175: PUSH
66176: LD_INT 0
66178: ST_TO_ADDR
// uc_nation := 0 ;
66179: LD_ADDR_OWVAR 21
66183: PUSH
66184: LD_INT 0
66186: ST_TO_ADDR
// hc_class := class_fish ;
66187: LD_ADDR_OWVAR 28
66191: PUSH
66192: LD_INT 20
66194: ST_TO_ADDR
// hc_gallery :=  ;
66195: LD_ADDR_OWVAR 33
66199: PUSH
66200: LD_STRING 
66202: ST_TO_ADDR
// end ;
66203: LD_VAR 0 1
66207: RET
// export function PrepareBird ( ) ; begin
66208: LD_INT 0
66210: PPUSH
// uc_side := 0 ;
66211: LD_ADDR_OWVAR 20
66215: PUSH
66216: LD_INT 0
66218: ST_TO_ADDR
// uc_nation := 0 ;
66219: LD_ADDR_OWVAR 21
66223: PUSH
66224: LD_INT 0
66226: ST_TO_ADDR
// hc_class := class_phororhacos ;
66227: LD_ADDR_OWVAR 28
66231: PUSH
66232: LD_INT 18
66234: ST_TO_ADDR
// hc_gallery :=  ;
66235: LD_ADDR_OWVAR 33
66239: PUSH
66240: LD_STRING 
66242: ST_TO_ADDR
// end ;
66243: LD_VAR 0 1
66247: RET
// export function PrepareHorse ( ) ; begin
66248: LD_INT 0
66250: PPUSH
// uc_side := 0 ;
66251: LD_ADDR_OWVAR 20
66255: PUSH
66256: LD_INT 0
66258: ST_TO_ADDR
// uc_nation := 0 ;
66259: LD_ADDR_OWVAR 21
66263: PUSH
66264: LD_INT 0
66266: ST_TO_ADDR
// hc_class := class_horse ;
66267: LD_ADDR_OWVAR 28
66271: PUSH
66272: LD_INT 21
66274: ST_TO_ADDR
// hc_gallery :=  ;
66275: LD_ADDR_OWVAR 33
66279: PUSH
66280: LD_STRING 
66282: ST_TO_ADDR
// end ;
66283: LD_VAR 0 1
66287: RET
// export function PrepareMastodont ( ) ; begin
66288: LD_INT 0
66290: PPUSH
// uc_side := 0 ;
66291: LD_ADDR_OWVAR 20
66295: PUSH
66296: LD_INT 0
66298: ST_TO_ADDR
// uc_nation := 0 ;
66299: LD_ADDR_OWVAR 21
66303: PUSH
66304: LD_INT 0
66306: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66307: LD_ADDR_OWVAR 37
66311: PUSH
66312: LD_INT 31
66314: ST_TO_ADDR
// vc_control := control_rider ;
66315: LD_ADDR_OWVAR 38
66319: PUSH
66320: LD_INT 4
66322: ST_TO_ADDR
// end ;
66323: LD_VAR 0 1
66327: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66328: LD_INT 0
66330: PPUSH
66331: PPUSH
66332: PPUSH
// uc_side = 0 ;
66333: LD_ADDR_OWVAR 20
66337: PUSH
66338: LD_INT 0
66340: ST_TO_ADDR
// uc_nation = 0 ;
66341: LD_ADDR_OWVAR 21
66345: PUSH
66346: LD_INT 0
66348: ST_TO_ADDR
// InitHc_All ( ) ;
66349: CALL_OW 584
// InitVc ;
66353: CALL_OW 20
// if mastodonts then
66357: LD_VAR 0 6
66361: IFFALSE 66428
// for i = 1 to mastodonts do
66363: LD_ADDR_VAR 0 11
66367: PUSH
66368: DOUBLE
66369: LD_INT 1
66371: DEC
66372: ST_TO_ADDR
66373: LD_VAR 0 6
66377: PUSH
66378: FOR_TO
66379: IFFALSE 66426
// begin vc_chassis := 31 ;
66381: LD_ADDR_OWVAR 37
66385: PUSH
66386: LD_INT 31
66388: ST_TO_ADDR
// vc_control := control_rider ;
66389: LD_ADDR_OWVAR 38
66393: PUSH
66394: LD_INT 4
66396: ST_TO_ADDR
// animal := CreateVehicle ;
66397: LD_ADDR_VAR 0 12
66401: PUSH
66402: CALL_OW 45
66406: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66407: LD_VAR 0 12
66411: PPUSH
66412: LD_VAR 0 8
66416: PPUSH
66417: LD_INT 0
66419: PPUSH
66420: CALL 68556 0 3
// end ;
66424: GO 66378
66426: POP
66427: POP
// if horses then
66428: LD_VAR 0 5
66432: IFFALSE 66499
// for i = 1 to horses do
66434: LD_ADDR_VAR 0 11
66438: PUSH
66439: DOUBLE
66440: LD_INT 1
66442: DEC
66443: ST_TO_ADDR
66444: LD_VAR 0 5
66448: PUSH
66449: FOR_TO
66450: IFFALSE 66497
// begin hc_class := 21 ;
66452: LD_ADDR_OWVAR 28
66456: PUSH
66457: LD_INT 21
66459: ST_TO_ADDR
// hc_gallery :=  ;
66460: LD_ADDR_OWVAR 33
66464: PUSH
66465: LD_STRING 
66467: ST_TO_ADDR
// animal := CreateHuman ;
66468: LD_ADDR_VAR 0 12
66472: PUSH
66473: CALL_OW 44
66477: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66478: LD_VAR 0 12
66482: PPUSH
66483: LD_VAR 0 8
66487: PPUSH
66488: LD_INT 0
66490: PPUSH
66491: CALL 68556 0 3
// end ;
66495: GO 66449
66497: POP
66498: POP
// if birds then
66499: LD_VAR 0 1
66503: IFFALSE 66570
// for i = 1 to birds do
66505: LD_ADDR_VAR 0 11
66509: PUSH
66510: DOUBLE
66511: LD_INT 1
66513: DEC
66514: ST_TO_ADDR
66515: LD_VAR 0 1
66519: PUSH
66520: FOR_TO
66521: IFFALSE 66568
// begin hc_class := 18 ;
66523: LD_ADDR_OWVAR 28
66527: PUSH
66528: LD_INT 18
66530: ST_TO_ADDR
// hc_gallery =  ;
66531: LD_ADDR_OWVAR 33
66535: PUSH
66536: LD_STRING 
66538: ST_TO_ADDR
// animal := CreateHuman ;
66539: LD_ADDR_VAR 0 12
66543: PUSH
66544: CALL_OW 44
66548: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66549: LD_VAR 0 12
66553: PPUSH
66554: LD_VAR 0 8
66558: PPUSH
66559: LD_INT 0
66561: PPUSH
66562: CALL 68556 0 3
// end ;
66566: GO 66520
66568: POP
66569: POP
// if tigers then
66570: LD_VAR 0 2
66574: IFFALSE 66658
// for i = 1 to tigers do
66576: LD_ADDR_VAR 0 11
66580: PUSH
66581: DOUBLE
66582: LD_INT 1
66584: DEC
66585: ST_TO_ADDR
66586: LD_VAR 0 2
66590: PUSH
66591: FOR_TO
66592: IFFALSE 66656
// begin hc_class = class_tiger ;
66594: LD_ADDR_OWVAR 28
66598: PUSH
66599: LD_INT 14
66601: ST_TO_ADDR
// hc_gallery =  ;
66602: LD_ADDR_OWVAR 33
66606: PUSH
66607: LD_STRING 
66609: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66610: LD_ADDR_OWVAR 35
66614: PUSH
66615: LD_INT 7
66617: NEG
66618: PPUSH
66619: LD_INT 7
66621: PPUSH
66622: CALL_OW 12
66626: ST_TO_ADDR
// animal := CreateHuman ;
66627: LD_ADDR_VAR 0 12
66631: PUSH
66632: CALL_OW 44
66636: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66637: LD_VAR 0 12
66641: PPUSH
66642: LD_VAR 0 8
66646: PPUSH
66647: LD_INT 0
66649: PPUSH
66650: CALL 68556 0 3
// end ;
66654: GO 66591
66656: POP
66657: POP
// if apemans then
66658: LD_VAR 0 3
66662: IFFALSE 66785
// for i = 1 to apemans do
66664: LD_ADDR_VAR 0 11
66668: PUSH
66669: DOUBLE
66670: LD_INT 1
66672: DEC
66673: ST_TO_ADDR
66674: LD_VAR 0 3
66678: PUSH
66679: FOR_TO
66680: IFFALSE 66783
// begin hc_class = class_apeman ;
66682: LD_ADDR_OWVAR 28
66686: PUSH
66687: LD_INT 12
66689: ST_TO_ADDR
// hc_gallery =  ;
66690: LD_ADDR_OWVAR 33
66694: PUSH
66695: LD_STRING 
66697: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66698: LD_ADDR_OWVAR 35
66702: PUSH
66703: LD_INT 2
66705: NEG
66706: PPUSH
66707: LD_INT 2
66709: PPUSH
66710: CALL_OW 12
66714: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66715: LD_ADDR_OWVAR 31
66719: PUSH
66720: LD_INT 1
66722: PPUSH
66723: LD_INT 3
66725: PPUSH
66726: CALL_OW 12
66730: PUSH
66731: LD_INT 1
66733: PPUSH
66734: LD_INT 3
66736: PPUSH
66737: CALL_OW 12
66741: PUSH
66742: LD_INT 0
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: ST_TO_ADDR
// animal := CreateHuman ;
66754: LD_ADDR_VAR 0 12
66758: PUSH
66759: CALL_OW 44
66763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66764: LD_VAR 0 12
66768: PPUSH
66769: LD_VAR 0 8
66773: PPUSH
66774: LD_INT 0
66776: PPUSH
66777: CALL 68556 0 3
// end ;
66781: GO 66679
66783: POP
66784: POP
// if enchidnas then
66785: LD_VAR 0 4
66789: IFFALSE 66856
// for i = 1 to enchidnas do
66791: LD_ADDR_VAR 0 11
66795: PUSH
66796: DOUBLE
66797: LD_INT 1
66799: DEC
66800: ST_TO_ADDR
66801: LD_VAR 0 4
66805: PUSH
66806: FOR_TO
66807: IFFALSE 66854
// begin hc_class = 13 ;
66809: LD_ADDR_OWVAR 28
66813: PUSH
66814: LD_INT 13
66816: ST_TO_ADDR
// hc_gallery =  ;
66817: LD_ADDR_OWVAR 33
66821: PUSH
66822: LD_STRING 
66824: ST_TO_ADDR
// animal := CreateHuman ;
66825: LD_ADDR_VAR 0 12
66829: PUSH
66830: CALL_OW 44
66834: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66835: LD_VAR 0 12
66839: PPUSH
66840: LD_VAR 0 8
66844: PPUSH
66845: LD_INT 0
66847: PPUSH
66848: CALL 68556 0 3
// end ;
66852: GO 66806
66854: POP
66855: POP
// if fishes then
66856: LD_VAR 0 7
66860: IFFALSE 66927
// for i = 1 to fishes do
66862: LD_ADDR_VAR 0 11
66866: PUSH
66867: DOUBLE
66868: LD_INT 1
66870: DEC
66871: ST_TO_ADDR
66872: LD_VAR 0 7
66876: PUSH
66877: FOR_TO
66878: IFFALSE 66925
// begin hc_class = 20 ;
66880: LD_ADDR_OWVAR 28
66884: PUSH
66885: LD_INT 20
66887: ST_TO_ADDR
// hc_gallery =  ;
66888: LD_ADDR_OWVAR 33
66892: PUSH
66893: LD_STRING 
66895: ST_TO_ADDR
// animal := CreateHuman ;
66896: LD_ADDR_VAR 0 12
66900: PUSH
66901: CALL_OW 44
66905: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66906: LD_VAR 0 12
66910: PPUSH
66911: LD_VAR 0 9
66915: PPUSH
66916: LD_INT 0
66918: PPUSH
66919: CALL 68556 0 3
// end ;
66923: GO 66877
66925: POP
66926: POP
// end ;
66927: LD_VAR 0 10
66931: RET
// export function WantHeal ( sci , unit ) ; begin
66932: LD_INT 0
66934: PPUSH
// if GetTaskList ( sci ) > 0 then
66935: LD_VAR 0 1
66939: PPUSH
66940: CALL_OW 437
66944: PUSH
66945: LD_INT 0
66947: GREATER
66948: IFFALSE 67018
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66950: LD_VAR 0 1
66954: PPUSH
66955: CALL_OW 437
66959: PUSH
66960: LD_INT 1
66962: ARRAY
66963: PUSH
66964: LD_INT 1
66966: ARRAY
66967: PUSH
66968: LD_STRING l
66970: EQUAL
66971: PUSH
66972: LD_VAR 0 1
66976: PPUSH
66977: CALL_OW 437
66981: PUSH
66982: LD_INT 1
66984: ARRAY
66985: PUSH
66986: LD_INT 4
66988: ARRAY
66989: PUSH
66990: LD_VAR 0 2
66994: EQUAL
66995: AND
66996: IFFALSE 67008
// result := true else
66998: LD_ADDR_VAR 0 3
67002: PUSH
67003: LD_INT 1
67005: ST_TO_ADDR
67006: GO 67016
// result := false ;
67008: LD_ADDR_VAR 0 3
67012: PUSH
67013: LD_INT 0
67015: ST_TO_ADDR
// end else
67016: GO 67026
// result := false ;
67018: LD_ADDR_VAR 0 3
67022: PUSH
67023: LD_INT 0
67025: ST_TO_ADDR
// end ;
67026: LD_VAR 0 3
67030: RET
// export function HealTarget ( sci ) ; begin
67031: LD_INT 0
67033: PPUSH
// if not sci then
67034: LD_VAR 0 1
67038: NOT
67039: IFFALSE 67043
// exit ;
67041: GO 67108
// result := 0 ;
67043: LD_ADDR_VAR 0 2
67047: PUSH
67048: LD_INT 0
67050: ST_TO_ADDR
// if GetTaskList ( sci ) then
67051: LD_VAR 0 1
67055: PPUSH
67056: CALL_OW 437
67060: IFFALSE 67108
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67062: LD_VAR 0 1
67066: PPUSH
67067: CALL_OW 437
67071: PUSH
67072: LD_INT 1
67074: ARRAY
67075: PUSH
67076: LD_INT 1
67078: ARRAY
67079: PUSH
67080: LD_STRING l
67082: EQUAL
67083: IFFALSE 67108
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67085: LD_ADDR_VAR 0 2
67089: PUSH
67090: LD_VAR 0 1
67094: PPUSH
67095: CALL_OW 437
67099: PUSH
67100: LD_INT 1
67102: ARRAY
67103: PUSH
67104: LD_INT 4
67106: ARRAY
67107: ST_TO_ADDR
// end ;
67108: LD_VAR 0 2
67112: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67113: LD_INT 0
67115: PPUSH
67116: PPUSH
67117: PPUSH
67118: PPUSH
// if not base_units then
67119: LD_VAR 0 1
67123: NOT
67124: IFFALSE 67128
// exit ;
67126: GO 67215
// result := false ;
67128: LD_ADDR_VAR 0 2
67132: PUSH
67133: LD_INT 0
67135: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67136: LD_ADDR_VAR 0 5
67140: PUSH
67141: LD_VAR 0 1
67145: PPUSH
67146: LD_INT 21
67148: PUSH
67149: LD_INT 3
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PPUSH
67156: CALL_OW 72
67160: ST_TO_ADDR
// if not tmp then
67161: LD_VAR 0 5
67165: NOT
67166: IFFALSE 67170
// exit ;
67168: GO 67215
// for i in tmp do
67170: LD_ADDR_VAR 0 3
67174: PUSH
67175: LD_VAR 0 5
67179: PUSH
67180: FOR_IN
67181: IFFALSE 67213
// begin result := EnemyInRange ( i , 22 ) ;
67183: LD_ADDR_VAR 0 2
67187: PUSH
67188: LD_VAR 0 3
67192: PPUSH
67193: LD_INT 22
67195: PPUSH
67196: CALL 64802 0 2
67200: ST_TO_ADDR
// if result then
67201: LD_VAR 0 2
67205: IFFALSE 67211
// exit ;
67207: POP
67208: POP
67209: GO 67215
// end ;
67211: GO 67180
67213: POP
67214: POP
// end ;
67215: LD_VAR 0 2
67219: RET
// export function FilterByTag ( units , tag ) ; begin
67220: LD_INT 0
67222: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67223: LD_ADDR_VAR 0 3
67227: PUSH
67228: LD_VAR 0 1
67232: PPUSH
67233: LD_INT 120
67235: PUSH
67236: LD_VAR 0 2
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PPUSH
67245: CALL_OW 72
67249: ST_TO_ADDR
// end ;
67250: LD_VAR 0 3
67254: RET
// export function IsDriver ( un ) ; begin
67255: LD_INT 0
67257: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67258: LD_ADDR_VAR 0 2
67262: PUSH
67263: LD_VAR 0 1
67267: PUSH
67268: LD_INT 55
67270: PUSH
67271: EMPTY
67272: LIST
67273: PPUSH
67274: CALL_OW 69
67278: IN
67279: ST_TO_ADDR
// end ;
67280: LD_VAR 0 2
67284: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67285: LD_INT 0
67287: PPUSH
67288: PPUSH
// list := [ ] ;
67289: LD_ADDR_VAR 0 5
67293: PUSH
67294: EMPTY
67295: ST_TO_ADDR
// case d of 0 :
67296: LD_VAR 0 3
67300: PUSH
67301: LD_INT 0
67303: DOUBLE
67304: EQUAL
67305: IFTRUE 67309
67307: GO 67442
67309: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67310: LD_ADDR_VAR 0 5
67314: PUSH
67315: LD_VAR 0 1
67319: PUSH
67320: LD_INT 4
67322: MINUS
67323: PUSH
67324: LD_VAR 0 2
67328: PUSH
67329: LD_INT 4
67331: MINUS
67332: PUSH
67333: LD_INT 2
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: LIST
67340: PUSH
67341: LD_VAR 0 1
67345: PUSH
67346: LD_INT 3
67348: MINUS
67349: PUSH
67350: LD_VAR 0 2
67354: PUSH
67355: LD_INT 1
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: LIST
67362: PUSH
67363: LD_VAR 0 1
67367: PUSH
67368: LD_INT 4
67370: PLUS
67371: PUSH
67372: LD_VAR 0 2
67376: PUSH
67377: LD_INT 4
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: LIST
67384: PUSH
67385: LD_VAR 0 1
67389: PUSH
67390: LD_INT 3
67392: PLUS
67393: PUSH
67394: LD_VAR 0 2
67398: PUSH
67399: LD_INT 3
67401: PLUS
67402: PUSH
67403: LD_INT 5
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: LIST
67410: PUSH
67411: LD_VAR 0 1
67415: PUSH
67416: LD_VAR 0 2
67420: PUSH
67421: LD_INT 4
67423: PLUS
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: LIST
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: ST_TO_ADDR
// end ; 1 :
67440: GO 68140
67442: LD_INT 1
67444: DOUBLE
67445: EQUAL
67446: IFTRUE 67450
67448: GO 67583
67450: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67451: LD_ADDR_VAR 0 5
67455: PUSH
67456: LD_VAR 0 1
67460: PUSH
67461: LD_VAR 0 2
67465: PUSH
67466: LD_INT 4
67468: MINUS
67469: PUSH
67470: LD_INT 3
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: LIST
67477: PUSH
67478: LD_VAR 0 1
67482: PUSH
67483: LD_INT 3
67485: MINUS
67486: PUSH
67487: LD_VAR 0 2
67491: PUSH
67492: LD_INT 3
67494: MINUS
67495: PUSH
67496: LD_INT 2
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: LIST
67503: PUSH
67504: LD_VAR 0 1
67508: PUSH
67509: LD_INT 4
67511: MINUS
67512: PUSH
67513: LD_VAR 0 2
67517: PUSH
67518: LD_INT 1
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: LIST
67525: PUSH
67526: LD_VAR 0 1
67530: PUSH
67531: LD_VAR 0 2
67535: PUSH
67536: LD_INT 3
67538: PLUS
67539: PUSH
67540: LD_INT 0
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: LIST
67547: PUSH
67548: LD_VAR 0 1
67552: PUSH
67553: LD_INT 4
67555: PLUS
67556: PUSH
67557: LD_VAR 0 2
67561: PUSH
67562: LD_INT 4
67564: PLUS
67565: PUSH
67566: LD_INT 5
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: LIST
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: ST_TO_ADDR
// end ; 2 :
67581: GO 68140
67583: LD_INT 2
67585: DOUBLE
67586: EQUAL
67587: IFTRUE 67591
67589: GO 67720
67591: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67592: LD_ADDR_VAR 0 5
67596: PUSH
67597: LD_VAR 0 1
67601: PUSH
67602: LD_VAR 0 2
67606: PUSH
67607: LD_INT 3
67609: MINUS
67610: PUSH
67611: LD_INT 3
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: LIST
67618: PUSH
67619: LD_VAR 0 1
67623: PUSH
67624: LD_INT 4
67626: PLUS
67627: PUSH
67628: LD_VAR 0 2
67632: PUSH
67633: LD_INT 4
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: LIST
67640: PUSH
67641: LD_VAR 0 1
67645: PUSH
67646: LD_VAR 0 2
67650: PUSH
67651: LD_INT 4
67653: PLUS
67654: PUSH
67655: LD_INT 0
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: LIST
67662: PUSH
67663: LD_VAR 0 1
67667: PUSH
67668: LD_INT 3
67670: MINUS
67671: PUSH
67672: LD_VAR 0 2
67676: PUSH
67677: LD_INT 1
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: LIST
67684: PUSH
67685: LD_VAR 0 1
67689: PUSH
67690: LD_INT 4
67692: MINUS
67693: PUSH
67694: LD_VAR 0 2
67698: PUSH
67699: LD_INT 4
67701: MINUS
67702: PUSH
67703: LD_INT 2
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: LIST
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: ST_TO_ADDR
// end ; 3 :
67718: GO 68140
67720: LD_INT 3
67722: DOUBLE
67723: EQUAL
67724: IFTRUE 67728
67726: GO 67861
67728: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67729: LD_ADDR_VAR 0 5
67733: PUSH
67734: LD_VAR 0 1
67738: PUSH
67739: LD_INT 3
67741: PLUS
67742: PUSH
67743: LD_VAR 0 2
67747: PUSH
67748: LD_INT 4
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: LIST
67755: PUSH
67756: LD_VAR 0 1
67760: PUSH
67761: LD_INT 4
67763: PLUS
67764: PUSH
67765: LD_VAR 0 2
67769: PUSH
67770: LD_INT 4
67772: PLUS
67773: PUSH
67774: LD_INT 5
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: LIST
67781: PUSH
67782: LD_VAR 0 1
67786: PUSH
67787: LD_INT 4
67789: MINUS
67790: PUSH
67791: LD_VAR 0 2
67795: PUSH
67796: LD_INT 1
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: LIST
67803: PUSH
67804: LD_VAR 0 1
67808: PUSH
67809: LD_VAR 0 2
67813: PUSH
67814: LD_INT 4
67816: MINUS
67817: PUSH
67818: LD_INT 3
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: LIST
67825: PUSH
67826: LD_VAR 0 1
67830: PUSH
67831: LD_INT 3
67833: MINUS
67834: PUSH
67835: LD_VAR 0 2
67839: PUSH
67840: LD_INT 3
67842: MINUS
67843: PUSH
67844: LD_INT 2
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: LIST
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: ST_TO_ADDR
// end ; 4 :
67859: GO 68140
67861: LD_INT 4
67863: DOUBLE
67864: EQUAL
67865: IFTRUE 67869
67867: GO 68002
67869: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67870: LD_ADDR_VAR 0 5
67874: PUSH
67875: LD_VAR 0 1
67879: PUSH
67880: LD_VAR 0 2
67884: PUSH
67885: LD_INT 4
67887: PLUS
67888: PUSH
67889: LD_INT 0
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: LIST
67896: PUSH
67897: LD_VAR 0 1
67901: PUSH
67902: LD_INT 3
67904: PLUS
67905: PUSH
67906: LD_VAR 0 2
67910: PUSH
67911: LD_INT 3
67913: PLUS
67914: PUSH
67915: LD_INT 5
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: LIST
67922: PUSH
67923: LD_VAR 0 1
67927: PUSH
67928: LD_INT 4
67930: PLUS
67931: PUSH
67932: LD_VAR 0 2
67936: PUSH
67937: LD_INT 4
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: LIST
67944: PUSH
67945: LD_VAR 0 1
67949: PUSH
67950: LD_VAR 0 2
67954: PUSH
67955: LD_INT 3
67957: MINUS
67958: PUSH
67959: LD_INT 3
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: LIST
67966: PUSH
67967: LD_VAR 0 1
67971: PUSH
67972: LD_INT 4
67974: MINUS
67975: PUSH
67976: LD_VAR 0 2
67980: PUSH
67981: LD_INT 4
67983: MINUS
67984: PUSH
67985: LD_INT 2
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: LIST
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: ST_TO_ADDR
// end ; 5 :
68000: GO 68140
68002: LD_INT 5
68004: DOUBLE
68005: EQUAL
68006: IFTRUE 68010
68008: GO 68139
68010: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68011: LD_ADDR_VAR 0 5
68015: PUSH
68016: LD_VAR 0 1
68020: PUSH
68021: LD_INT 4
68023: MINUS
68024: PUSH
68025: LD_VAR 0 2
68029: PUSH
68030: LD_INT 1
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: LIST
68037: PUSH
68038: LD_VAR 0 1
68042: PUSH
68043: LD_VAR 0 2
68047: PUSH
68048: LD_INT 4
68050: MINUS
68051: PUSH
68052: LD_INT 3
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: LIST
68059: PUSH
68060: LD_VAR 0 1
68064: PUSH
68065: LD_INT 4
68067: PLUS
68068: PUSH
68069: LD_VAR 0 2
68073: PUSH
68074: LD_INT 4
68076: PLUS
68077: PUSH
68078: LD_INT 5
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: LIST
68085: PUSH
68086: LD_VAR 0 1
68090: PUSH
68091: LD_INT 3
68093: PLUS
68094: PUSH
68095: LD_VAR 0 2
68099: PUSH
68100: LD_INT 4
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: LIST
68107: PUSH
68108: LD_VAR 0 1
68112: PUSH
68113: LD_VAR 0 2
68117: PUSH
68118: LD_INT 3
68120: PLUS
68121: PUSH
68122: LD_INT 0
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: LIST
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: ST_TO_ADDR
// end ; end ;
68137: GO 68140
68139: POP
// result := list ;
68140: LD_ADDR_VAR 0 4
68144: PUSH
68145: LD_VAR 0 5
68149: ST_TO_ADDR
// end ;
68150: LD_VAR 0 4
68154: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68155: LD_INT 0
68157: PPUSH
68158: PPUSH
68159: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68160: LD_VAR 0 1
68164: NOT
68165: PUSH
68166: LD_VAR 0 2
68170: PUSH
68171: LD_INT 1
68173: PUSH
68174: LD_INT 2
68176: PUSH
68177: LD_INT 3
68179: PUSH
68180: LD_INT 4
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: IN
68189: NOT
68190: OR
68191: IFFALSE 68195
// exit ;
68193: GO 68278
// tmp := [ ] ;
68195: LD_ADDR_VAR 0 5
68199: PUSH
68200: EMPTY
68201: ST_TO_ADDR
// for i in units do
68202: LD_ADDR_VAR 0 4
68206: PUSH
68207: LD_VAR 0 1
68211: PUSH
68212: FOR_IN
68213: IFFALSE 68247
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68215: LD_ADDR_VAR 0 5
68219: PUSH
68220: LD_VAR 0 5
68224: PPUSH
68225: LD_VAR 0 4
68229: PPUSH
68230: LD_VAR 0 2
68234: PPUSH
68235: CALL_OW 259
68239: PPUSH
68240: CALL 69651 0 2
68244: ST_TO_ADDR
68245: GO 68212
68247: POP
68248: POP
// if not tmp then
68249: LD_VAR 0 5
68253: NOT
68254: IFFALSE 68258
// exit ;
68256: GO 68278
// result := SortListByListDesc ( units , tmp ) ;
68258: LD_ADDR_VAR 0 3
68262: PUSH
68263: LD_VAR 0 1
68267: PPUSH
68268: LD_VAR 0 5
68272: PPUSH
68273: CALL_OW 77
68277: ST_TO_ADDR
// end ;
68278: LD_VAR 0 3
68282: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68283: LD_INT 0
68285: PPUSH
68286: PPUSH
68287: PPUSH
// result := false ;
68288: LD_ADDR_VAR 0 3
68292: PUSH
68293: LD_INT 0
68295: ST_TO_ADDR
// if not building then
68296: LD_VAR 0 2
68300: NOT
68301: IFFALSE 68305
// exit ;
68303: GO 68443
// x := GetX ( building ) ;
68305: LD_ADDR_VAR 0 4
68309: PUSH
68310: LD_VAR 0 2
68314: PPUSH
68315: CALL_OW 250
68319: ST_TO_ADDR
// y := GetY ( building ) ;
68320: LD_ADDR_VAR 0 5
68324: PUSH
68325: LD_VAR 0 2
68329: PPUSH
68330: CALL_OW 251
68334: ST_TO_ADDR
// if not x or not y then
68335: LD_VAR 0 4
68339: NOT
68340: PUSH
68341: LD_VAR 0 5
68345: NOT
68346: OR
68347: IFFALSE 68351
// exit ;
68349: GO 68443
// if GetTaskList ( unit ) then
68351: LD_VAR 0 1
68355: PPUSH
68356: CALL_OW 437
68360: IFFALSE 68443
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68362: LD_STRING e
68364: PUSH
68365: LD_VAR 0 1
68369: PPUSH
68370: CALL_OW 437
68374: PUSH
68375: LD_INT 1
68377: ARRAY
68378: PUSH
68379: LD_INT 1
68381: ARRAY
68382: EQUAL
68383: PUSH
68384: LD_VAR 0 4
68388: PUSH
68389: LD_VAR 0 1
68393: PPUSH
68394: CALL_OW 437
68398: PUSH
68399: LD_INT 1
68401: ARRAY
68402: PUSH
68403: LD_INT 2
68405: ARRAY
68406: EQUAL
68407: AND
68408: PUSH
68409: LD_VAR 0 5
68413: PUSH
68414: LD_VAR 0 1
68418: PPUSH
68419: CALL_OW 437
68423: PUSH
68424: LD_INT 1
68426: ARRAY
68427: PUSH
68428: LD_INT 3
68430: ARRAY
68431: EQUAL
68432: AND
68433: IFFALSE 68443
// result := true end ;
68435: LD_ADDR_VAR 0 3
68439: PUSH
68440: LD_INT 1
68442: ST_TO_ADDR
// end ;
68443: LD_VAR 0 3
68447: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68448: LD_INT 0
68450: PPUSH
// result := false ;
68451: LD_ADDR_VAR 0 4
68455: PUSH
68456: LD_INT 0
68458: ST_TO_ADDR
// if GetTaskList ( unit ) then
68459: LD_VAR 0 1
68463: PPUSH
68464: CALL_OW 437
68468: IFFALSE 68551
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68470: LD_STRING M
68472: PUSH
68473: LD_VAR 0 1
68477: PPUSH
68478: CALL_OW 437
68482: PUSH
68483: LD_INT 1
68485: ARRAY
68486: PUSH
68487: LD_INT 1
68489: ARRAY
68490: EQUAL
68491: PUSH
68492: LD_VAR 0 2
68496: PUSH
68497: LD_VAR 0 1
68501: PPUSH
68502: CALL_OW 437
68506: PUSH
68507: LD_INT 1
68509: ARRAY
68510: PUSH
68511: LD_INT 2
68513: ARRAY
68514: EQUAL
68515: AND
68516: PUSH
68517: LD_VAR 0 3
68521: PUSH
68522: LD_VAR 0 1
68526: PPUSH
68527: CALL_OW 437
68531: PUSH
68532: LD_INT 1
68534: ARRAY
68535: PUSH
68536: LD_INT 3
68538: ARRAY
68539: EQUAL
68540: AND
68541: IFFALSE 68551
// result := true ;
68543: LD_ADDR_VAR 0 4
68547: PUSH
68548: LD_INT 1
68550: ST_TO_ADDR
// end ; end ;
68551: LD_VAR 0 4
68555: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68556: LD_INT 0
68558: PPUSH
68559: PPUSH
68560: PPUSH
68561: PPUSH
// if not unit or not area then
68562: LD_VAR 0 1
68566: NOT
68567: PUSH
68568: LD_VAR 0 2
68572: NOT
68573: OR
68574: IFFALSE 68578
// exit ;
68576: GO 68754
// tmp := AreaToList ( area , i ) ;
68578: LD_ADDR_VAR 0 6
68582: PUSH
68583: LD_VAR 0 2
68587: PPUSH
68588: LD_VAR 0 5
68592: PPUSH
68593: CALL_OW 517
68597: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68598: LD_ADDR_VAR 0 5
68602: PUSH
68603: DOUBLE
68604: LD_INT 1
68606: DEC
68607: ST_TO_ADDR
68608: LD_VAR 0 6
68612: PUSH
68613: LD_INT 1
68615: ARRAY
68616: PUSH
68617: FOR_TO
68618: IFFALSE 68752
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68620: LD_ADDR_VAR 0 7
68624: PUSH
68625: LD_VAR 0 6
68629: PUSH
68630: LD_INT 1
68632: ARRAY
68633: PUSH
68634: LD_VAR 0 5
68638: ARRAY
68639: PUSH
68640: LD_VAR 0 6
68644: PUSH
68645: LD_INT 2
68647: ARRAY
68648: PUSH
68649: LD_VAR 0 5
68653: ARRAY
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68659: LD_INT 92
68661: PUSH
68662: LD_VAR 0 7
68666: PUSH
68667: LD_INT 1
68669: ARRAY
68670: PUSH
68671: LD_VAR 0 7
68675: PUSH
68676: LD_INT 2
68678: ARRAY
68679: PUSH
68680: LD_INT 2
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: PPUSH
68689: CALL_OW 69
68693: PUSH
68694: LD_INT 0
68696: EQUAL
68697: IFFALSE 68750
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68699: LD_VAR 0 1
68703: PPUSH
68704: LD_VAR 0 7
68708: PUSH
68709: LD_INT 1
68711: ARRAY
68712: PPUSH
68713: LD_VAR 0 7
68717: PUSH
68718: LD_INT 2
68720: ARRAY
68721: PPUSH
68722: LD_VAR 0 3
68726: PPUSH
68727: CALL_OW 48
// result := IsPlaced ( unit ) ;
68731: LD_ADDR_VAR 0 4
68735: PUSH
68736: LD_VAR 0 1
68740: PPUSH
68741: CALL_OW 305
68745: ST_TO_ADDR
// exit ;
68746: POP
68747: POP
68748: GO 68754
// end ; end ;
68750: GO 68617
68752: POP
68753: POP
// end ;
68754: LD_VAR 0 4
68758: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68759: LD_INT 0
68761: PPUSH
68762: PPUSH
68763: PPUSH
// if not side or side > 8 then
68764: LD_VAR 0 1
68768: NOT
68769: PUSH
68770: LD_VAR 0 1
68774: PUSH
68775: LD_INT 8
68777: GREATER
68778: OR
68779: IFFALSE 68783
// exit ;
68781: GO 68970
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68783: LD_ADDR_VAR 0 4
68787: PUSH
68788: LD_INT 22
68790: PUSH
68791: LD_VAR 0 1
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 21
68802: PUSH
68803: LD_INT 3
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PPUSH
68814: CALL_OW 69
68818: ST_TO_ADDR
// if not tmp then
68819: LD_VAR 0 4
68823: NOT
68824: IFFALSE 68828
// exit ;
68826: GO 68970
// enable_addtolog := true ;
68828: LD_ADDR_OWVAR 81
68832: PUSH
68833: LD_INT 1
68835: ST_TO_ADDR
// AddToLog ( [ ) ;
68836: LD_STRING [
68838: PPUSH
68839: CALL_OW 561
// for i in tmp do
68843: LD_ADDR_VAR 0 3
68847: PUSH
68848: LD_VAR 0 4
68852: PUSH
68853: FOR_IN
68854: IFFALSE 68961
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68856: LD_STRING [
68858: PUSH
68859: LD_VAR 0 3
68863: PPUSH
68864: CALL_OW 266
68868: STR
68869: PUSH
68870: LD_STRING , 
68872: STR
68873: PUSH
68874: LD_VAR 0 3
68878: PPUSH
68879: CALL_OW 250
68883: STR
68884: PUSH
68885: LD_STRING , 
68887: STR
68888: PUSH
68889: LD_VAR 0 3
68893: PPUSH
68894: CALL_OW 251
68898: STR
68899: PUSH
68900: LD_STRING , 
68902: STR
68903: PUSH
68904: LD_VAR 0 3
68908: PPUSH
68909: CALL_OW 254
68913: STR
68914: PUSH
68915: LD_STRING , 
68917: STR
68918: PUSH
68919: LD_VAR 0 3
68923: PPUSH
68924: LD_INT 1
68926: PPUSH
68927: CALL_OW 268
68931: STR
68932: PUSH
68933: LD_STRING , 
68935: STR
68936: PUSH
68937: LD_VAR 0 3
68941: PPUSH
68942: LD_INT 2
68944: PPUSH
68945: CALL_OW 268
68949: STR
68950: PUSH
68951: LD_STRING ],
68953: STR
68954: PPUSH
68955: CALL_OW 561
// end ;
68959: GO 68853
68961: POP
68962: POP
// AddToLog ( ]; ) ;
68963: LD_STRING ];
68965: PPUSH
68966: CALL_OW 561
// end ;
68970: LD_VAR 0 2
68974: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68975: LD_INT 0
68977: PPUSH
68978: PPUSH
68979: PPUSH
68980: PPUSH
68981: PPUSH
// if not area or not rate or not max then
68982: LD_VAR 0 1
68986: NOT
68987: PUSH
68988: LD_VAR 0 2
68992: NOT
68993: OR
68994: PUSH
68995: LD_VAR 0 4
68999: NOT
69000: OR
69001: IFFALSE 69005
// exit ;
69003: GO 69194
// while 1 do
69005: LD_INT 1
69007: IFFALSE 69194
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69009: LD_ADDR_VAR 0 9
69013: PUSH
69014: LD_VAR 0 1
69018: PPUSH
69019: LD_INT 1
69021: PPUSH
69022: CALL_OW 287
69026: PUSH
69027: LD_INT 10
69029: MUL
69030: ST_TO_ADDR
// r := rate / 10 ;
69031: LD_ADDR_VAR 0 7
69035: PUSH
69036: LD_VAR 0 2
69040: PUSH
69041: LD_INT 10
69043: DIVREAL
69044: ST_TO_ADDR
// time := 1 1$00 ;
69045: LD_ADDR_VAR 0 8
69049: PUSH
69050: LD_INT 2100
69052: ST_TO_ADDR
// if amount < min then
69053: LD_VAR 0 9
69057: PUSH
69058: LD_VAR 0 3
69062: LESS
69063: IFFALSE 69081
// r := r * 2 else
69065: LD_ADDR_VAR 0 7
69069: PUSH
69070: LD_VAR 0 7
69074: PUSH
69075: LD_INT 2
69077: MUL
69078: ST_TO_ADDR
69079: GO 69107
// if amount > max then
69081: LD_VAR 0 9
69085: PUSH
69086: LD_VAR 0 4
69090: GREATER
69091: IFFALSE 69107
// r := r / 2 ;
69093: LD_ADDR_VAR 0 7
69097: PUSH
69098: LD_VAR 0 7
69102: PUSH
69103: LD_INT 2
69105: DIVREAL
69106: ST_TO_ADDR
// time := time / r ;
69107: LD_ADDR_VAR 0 8
69111: PUSH
69112: LD_VAR 0 8
69116: PUSH
69117: LD_VAR 0 7
69121: DIVREAL
69122: ST_TO_ADDR
// if time < 0 then
69123: LD_VAR 0 8
69127: PUSH
69128: LD_INT 0
69130: LESS
69131: IFFALSE 69148
// time := time * - 1 ;
69133: LD_ADDR_VAR 0 8
69137: PUSH
69138: LD_VAR 0 8
69142: PUSH
69143: LD_INT 1
69145: NEG
69146: MUL
69147: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69148: LD_VAR 0 8
69152: PUSH
69153: LD_INT 35
69155: PPUSH
69156: LD_INT 875
69158: PPUSH
69159: CALL_OW 12
69163: PLUS
69164: PPUSH
69165: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69169: LD_INT 1
69171: PPUSH
69172: LD_INT 5
69174: PPUSH
69175: CALL_OW 12
69179: PPUSH
69180: LD_VAR 0 1
69184: PPUSH
69185: LD_INT 1
69187: PPUSH
69188: CALL_OW 55
// end ;
69192: GO 69005
// end ;
69194: LD_VAR 0 5
69198: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69199: LD_INT 0
69201: PPUSH
69202: PPUSH
69203: PPUSH
69204: PPUSH
69205: PPUSH
69206: PPUSH
69207: PPUSH
69208: PPUSH
// if not turrets or not factories then
69209: LD_VAR 0 1
69213: NOT
69214: PUSH
69215: LD_VAR 0 2
69219: NOT
69220: OR
69221: IFFALSE 69225
// exit ;
69223: GO 69532
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69225: LD_ADDR_VAR 0 10
69229: PUSH
69230: LD_INT 5
69232: PUSH
69233: LD_INT 6
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 2
69242: PUSH
69243: LD_INT 4
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 3
69252: PUSH
69253: LD_INT 5
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 24
69267: PUSH
69268: LD_INT 25
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 23
69277: PUSH
69278: LD_INT 27
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 42
69291: PUSH
69292: LD_INT 43
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 44
69301: PUSH
69302: LD_INT 46
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 45
69311: PUSH
69312: LD_INT 47
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: LIST
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: LIST
69328: ST_TO_ADDR
// result := [ ] ;
69329: LD_ADDR_VAR 0 3
69333: PUSH
69334: EMPTY
69335: ST_TO_ADDR
// for i in turrets do
69336: LD_ADDR_VAR 0 4
69340: PUSH
69341: LD_VAR 0 1
69345: PUSH
69346: FOR_IN
69347: IFFALSE 69530
// begin nat := GetNation ( i ) ;
69349: LD_ADDR_VAR 0 7
69353: PUSH
69354: LD_VAR 0 4
69358: PPUSH
69359: CALL_OW 248
69363: ST_TO_ADDR
// weapon := 0 ;
69364: LD_ADDR_VAR 0 8
69368: PUSH
69369: LD_INT 0
69371: ST_TO_ADDR
// if not nat then
69372: LD_VAR 0 7
69376: NOT
69377: IFFALSE 69381
// continue ;
69379: GO 69346
// for j in list [ nat ] do
69381: LD_ADDR_VAR 0 5
69385: PUSH
69386: LD_VAR 0 10
69390: PUSH
69391: LD_VAR 0 7
69395: ARRAY
69396: PUSH
69397: FOR_IN
69398: IFFALSE 69439
// if GetBWeapon ( i ) = j [ 1 ] then
69400: LD_VAR 0 4
69404: PPUSH
69405: CALL_OW 269
69409: PUSH
69410: LD_VAR 0 5
69414: PUSH
69415: LD_INT 1
69417: ARRAY
69418: EQUAL
69419: IFFALSE 69437
// begin weapon := j [ 2 ] ;
69421: LD_ADDR_VAR 0 8
69425: PUSH
69426: LD_VAR 0 5
69430: PUSH
69431: LD_INT 2
69433: ARRAY
69434: ST_TO_ADDR
// break ;
69435: GO 69439
// end ;
69437: GO 69397
69439: POP
69440: POP
// if not weapon then
69441: LD_VAR 0 8
69445: NOT
69446: IFFALSE 69450
// continue ;
69448: GO 69346
// for k in factories do
69450: LD_ADDR_VAR 0 6
69454: PUSH
69455: LD_VAR 0 2
69459: PUSH
69460: FOR_IN
69461: IFFALSE 69526
// begin weapons := AvailableWeaponList ( k ) ;
69463: LD_ADDR_VAR 0 9
69467: PUSH
69468: LD_VAR 0 6
69472: PPUSH
69473: CALL_OW 478
69477: ST_TO_ADDR
// if not weapons then
69478: LD_VAR 0 9
69482: NOT
69483: IFFALSE 69487
// continue ;
69485: GO 69460
// if weapon in weapons then
69487: LD_VAR 0 8
69491: PUSH
69492: LD_VAR 0 9
69496: IN
69497: IFFALSE 69524
// begin result := [ i , weapon ] ;
69499: LD_ADDR_VAR 0 3
69503: PUSH
69504: LD_VAR 0 4
69508: PUSH
69509: LD_VAR 0 8
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: ST_TO_ADDR
// exit ;
69518: POP
69519: POP
69520: POP
69521: POP
69522: GO 69532
// end ; end ;
69524: GO 69460
69526: POP
69527: POP
// end ;
69528: GO 69346
69530: POP
69531: POP
// end ;
69532: LD_VAR 0 3
69536: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69537: LD_INT 0
69539: PPUSH
// if not side or side > 8 then
69540: LD_VAR 0 3
69544: NOT
69545: PUSH
69546: LD_VAR 0 3
69550: PUSH
69551: LD_INT 8
69553: GREATER
69554: OR
69555: IFFALSE 69559
// exit ;
69557: GO 69618
// if not range then
69559: LD_VAR 0 4
69563: NOT
69564: IFFALSE 69575
// range := - 12 ;
69566: LD_ADDR_VAR 0 4
69570: PUSH
69571: LD_INT 12
69573: NEG
69574: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69575: LD_VAR 0 1
69579: PPUSH
69580: LD_VAR 0 2
69584: PPUSH
69585: LD_VAR 0 3
69589: PPUSH
69590: LD_VAR 0 4
69594: PPUSH
69595: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69599: LD_VAR 0 1
69603: PPUSH
69604: LD_VAR 0 2
69608: PPUSH
69609: LD_VAR 0 3
69613: PPUSH
69614: CALL_OW 331
// end ;
69618: LD_VAR 0 5
69622: RET
// export function Video ( mode ) ; begin
69623: LD_INT 0
69625: PPUSH
// ingame_video = mode ;
69626: LD_ADDR_OWVAR 52
69630: PUSH
69631: LD_VAR 0 1
69635: ST_TO_ADDR
// interface_hidden = mode ;
69636: LD_ADDR_OWVAR 54
69640: PUSH
69641: LD_VAR 0 1
69645: ST_TO_ADDR
// end ;
69646: LD_VAR 0 2
69650: RET
// export function Join ( array , element ) ; begin
69651: LD_INT 0
69653: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69654: LD_ADDR_VAR 0 3
69658: PUSH
69659: LD_VAR 0 1
69663: PPUSH
69664: LD_VAR 0 1
69668: PUSH
69669: LD_INT 1
69671: PLUS
69672: PPUSH
69673: LD_VAR 0 2
69677: PPUSH
69678: CALL_OW 1
69682: ST_TO_ADDR
// end ;
69683: LD_VAR 0 3
69687: RET
// export function JoinUnion ( array , element ) ; begin
69688: LD_INT 0
69690: PPUSH
// result := array union element ;
69691: LD_ADDR_VAR 0 3
69695: PUSH
69696: LD_VAR 0 1
69700: PUSH
69701: LD_VAR 0 2
69705: UNION
69706: ST_TO_ADDR
// end ;
69707: LD_VAR 0 3
69711: RET
// export function GetBehemoths ( side ) ; begin
69712: LD_INT 0
69714: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69715: LD_ADDR_VAR 0 2
69719: PUSH
69720: LD_INT 22
69722: PUSH
69723: LD_VAR 0 1
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 31
69734: PUSH
69735: LD_INT 25
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PPUSH
69746: CALL_OW 69
69750: ST_TO_ADDR
// end ;
69751: LD_VAR 0 2
69755: RET
// export function Shuffle ( array ) ; var i , index ; begin
69756: LD_INT 0
69758: PPUSH
69759: PPUSH
69760: PPUSH
// result := [ ] ;
69761: LD_ADDR_VAR 0 2
69765: PUSH
69766: EMPTY
69767: ST_TO_ADDR
// if not array then
69768: LD_VAR 0 1
69772: NOT
69773: IFFALSE 69777
// exit ;
69775: GO 69876
// Randomize ;
69777: CALL_OW 10
// for i = array downto 1 do
69781: LD_ADDR_VAR 0 3
69785: PUSH
69786: DOUBLE
69787: LD_VAR 0 1
69791: INC
69792: ST_TO_ADDR
69793: LD_INT 1
69795: PUSH
69796: FOR_DOWNTO
69797: IFFALSE 69874
// begin index := rand ( 1 , array ) ;
69799: LD_ADDR_VAR 0 4
69803: PUSH
69804: LD_INT 1
69806: PPUSH
69807: LD_VAR 0 1
69811: PPUSH
69812: CALL_OW 12
69816: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69817: LD_ADDR_VAR 0 2
69821: PUSH
69822: LD_VAR 0 2
69826: PPUSH
69827: LD_VAR 0 2
69831: PUSH
69832: LD_INT 1
69834: PLUS
69835: PPUSH
69836: LD_VAR 0 1
69840: PUSH
69841: LD_VAR 0 4
69845: ARRAY
69846: PPUSH
69847: CALL_OW 2
69851: ST_TO_ADDR
// array := Delete ( array , index ) ;
69852: LD_ADDR_VAR 0 1
69856: PUSH
69857: LD_VAR 0 1
69861: PPUSH
69862: LD_VAR 0 4
69866: PPUSH
69867: CALL_OW 3
69871: ST_TO_ADDR
// end ;
69872: GO 69796
69874: POP
69875: POP
// end ;
69876: LD_VAR 0 2
69880: RET
// export function GetBaseMaterials ( base ) ; begin
69881: LD_INT 0
69883: PPUSH
// result := [ 0 , 0 , 0 ] ;
69884: LD_ADDR_VAR 0 2
69888: PUSH
69889: LD_INT 0
69891: PUSH
69892: LD_INT 0
69894: PUSH
69895: LD_INT 0
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: LIST
69902: ST_TO_ADDR
// if not base then
69903: LD_VAR 0 1
69907: NOT
69908: IFFALSE 69912
// exit ;
69910: GO 69961
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69912: LD_ADDR_VAR 0 2
69916: PUSH
69917: LD_VAR 0 1
69921: PPUSH
69922: LD_INT 1
69924: PPUSH
69925: CALL_OW 275
69929: PUSH
69930: LD_VAR 0 1
69934: PPUSH
69935: LD_INT 2
69937: PPUSH
69938: CALL_OW 275
69942: PUSH
69943: LD_VAR 0 1
69947: PPUSH
69948: LD_INT 3
69950: PPUSH
69951: CALL_OW 275
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: LIST
69960: ST_TO_ADDR
// end ;
69961: LD_VAR 0 2
69965: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69966: LD_INT 0
69968: PPUSH
69969: PPUSH
// result := array ;
69970: LD_ADDR_VAR 0 3
69974: PUSH
69975: LD_VAR 0 1
69979: ST_TO_ADDR
// if size >= result then
69980: LD_VAR 0 2
69984: PUSH
69985: LD_VAR 0 3
69989: GREATEREQUAL
69990: IFFALSE 69994
// exit ;
69992: GO 70044
// if size then
69994: LD_VAR 0 2
69998: IFFALSE 70044
// for i := array downto size do
70000: LD_ADDR_VAR 0 4
70004: PUSH
70005: DOUBLE
70006: LD_VAR 0 1
70010: INC
70011: ST_TO_ADDR
70012: LD_VAR 0 2
70016: PUSH
70017: FOR_DOWNTO
70018: IFFALSE 70042
// result := Delete ( result , result ) ;
70020: LD_ADDR_VAR 0 3
70024: PUSH
70025: LD_VAR 0 3
70029: PPUSH
70030: LD_VAR 0 3
70034: PPUSH
70035: CALL_OW 3
70039: ST_TO_ADDR
70040: GO 70017
70042: POP
70043: POP
// end ;
70044: LD_VAR 0 3
70048: RET
// export function ComExit ( unit ) ; var tmp ; begin
70049: LD_INT 0
70051: PPUSH
70052: PPUSH
// if not IsInUnit ( unit ) then
70053: LD_VAR 0 1
70057: PPUSH
70058: CALL_OW 310
70062: NOT
70063: IFFALSE 70067
// exit ;
70065: GO 70127
// tmp := IsInUnit ( unit ) ;
70067: LD_ADDR_VAR 0 3
70071: PUSH
70072: LD_VAR 0 1
70076: PPUSH
70077: CALL_OW 310
70081: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70082: LD_VAR 0 3
70086: PPUSH
70087: CALL_OW 247
70091: PUSH
70092: LD_INT 2
70094: EQUAL
70095: IFFALSE 70108
// ComExitVehicle ( unit ) else
70097: LD_VAR 0 1
70101: PPUSH
70102: CALL_OW 121
70106: GO 70117
// ComExitBuilding ( unit ) ;
70108: LD_VAR 0 1
70112: PPUSH
70113: CALL_OW 122
// result := tmp ;
70117: LD_ADDR_VAR 0 2
70121: PUSH
70122: LD_VAR 0 3
70126: ST_TO_ADDR
// end ;
70127: LD_VAR 0 2
70131: RET
// export function ComExitAll ( units ) ; var i ; begin
70132: LD_INT 0
70134: PPUSH
70135: PPUSH
// if not units then
70136: LD_VAR 0 1
70140: NOT
70141: IFFALSE 70145
// exit ;
70143: GO 70171
// for i in units do
70145: LD_ADDR_VAR 0 3
70149: PUSH
70150: LD_VAR 0 1
70154: PUSH
70155: FOR_IN
70156: IFFALSE 70169
// ComExit ( i ) ;
70158: LD_VAR 0 3
70162: PPUSH
70163: CALL 70049 0 1
70167: GO 70155
70169: POP
70170: POP
// end ;
70171: LD_VAR 0 2
70175: RET
// export function ResetHc ; begin
70176: LD_INT 0
70178: PPUSH
// InitHc ;
70179: CALL_OW 19
// hc_importance := 0 ;
70183: LD_ADDR_OWVAR 32
70187: PUSH
70188: LD_INT 0
70190: ST_TO_ADDR
// end ;
70191: LD_VAR 0 1
70195: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70196: LD_INT 0
70198: PPUSH
70199: PPUSH
70200: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70201: LD_ADDR_VAR 0 6
70205: PUSH
70206: LD_VAR 0 1
70210: PUSH
70211: LD_VAR 0 3
70215: PLUS
70216: PUSH
70217: LD_INT 2
70219: DIV
70220: ST_TO_ADDR
// if _x < 0 then
70221: LD_VAR 0 6
70225: PUSH
70226: LD_INT 0
70228: LESS
70229: IFFALSE 70246
// _x := _x * - 1 ;
70231: LD_ADDR_VAR 0 6
70235: PUSH
70236: LD_VAR 0 6
70240: PUSH
70241: LD_INT 1
70243: NEG
70244: MUL
70245: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70246: LD_ADDR_VAR 0 7
70250: PUSH
70251: LD_VAR 0 2
70255: PUSH
70256: LD_VAR 0 4
70260: PLUS
70261: PUSH
70262: LD_INT 2
70264: DIV
70265: ST_TO_ADDR
// if _y < 0 then
70266: LD_VAR 0 7
70270: PUSH
70271: LD_INT 0
70273: LESS
70274: IFFALSE 70291
// _y := _y * - 1 ;
70276: LD_ADDR_VAR 0 7
70280: PUSH
70281: LD_VAR 0 7
70285: PUSH
70286: LD_INT 1
70288: NEG
70289: MUL
70290: ST_TO_ADDR
// result := [ _x , _y ] ;
70291: LD_ADDR_VAR 0 5
70295: PUSH
70296: LD_VAR 0 6
70300: PUSH
70301: LD_VAR 0 7
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: ST_TO_ADDR
// end ;
70310: LD_VAR 0 5
70314: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70315: LD_INT 0
70317: PPUSH
70318: PPUSH
70319: PPUSH
70320: PPUSH
// task := GetTaskList ( unit ) ;
70321: LD_ADDR_VAR 0 7
70325: PUSH
70326: LD_VAR 0 1
70330: PPUSH
70331: CALL_OW 437
70335: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70336: LD_VAR 0 7
70340: NOT
70341: PUSH
70342: LD_VAR 0 1
70346: PPUSH
70347: LD_VAR 0 2
70351: PPUSH
70352: CALL_OW 308
70356: NOT
70357: AND
70358: IFFALSE 70362
// exit ;
70360: GO 70480
// if IsInArea ( unit , area ) then
70362: LD_VAR 0 1
70366: PPUSH
70367: LD_VAR 0 2
70371: PPUSH
70372: CALL_OW 308
70376: IFFALSE 70394
// begin ComMoveToArea ( unit , goAway ) ;
70378: LD_VAR 0 1
70382: PPUSH
70383: LD_VAR 0 3
70387: PPUSH
70388: CALL_OW 113
// exit ;
70392: GO 70480
// end ; if task [ 1 ] [ 1 ] <> M then
70394: LD_VAR 0 7
70398: PUSH
70399: LD_INT 1
70401: ARRAY
70402: PUSH
70403: LD_INT 1
70405: ARRAY
70406: PUSH
70407: LD_STRING M
70409: NONEQUAL
70410: IFFALSE 70414
// exit ;
70412: GO 70480
// x := task [ 1 ] [ 2 ] ;
70414: LD_ADDR_VAR 0 5
70418: PUSH
70419: LD_VAR 0 7
70423: PUSH
70424: LD_INT 1
70426: ARRAY
70427: PUSH
70428: LD_INT 2
70430: ARRAY
70431: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70432: LD_ADDR_VAR 0 6
70436: PUSH
70437: LD_VAR 0 7
70441: PUSH
70442: LD_INT 1
70444: ARRAY
70445: PUSH
70446: LD_INT 3
70448: ARRAY
70449: ST_TO_ADDR
// if InArea ( x , y , area ) then
70450: LD_VAR 0 5
70454: PPUSH
70455: LD_VAR 0 6
70459: PPUSH
70460: LD_VAR 0 2
70464: PPUSH
70465: CALL_OW 309
70469: IFFALSE 70480
// ComStop ( unit ) ;
70471: LD_VAR 0 1
70475: PPUSH
70476: CALL_OW 141
// end ;
70480: LD_VAR 0 4
70484: RET
// export function Abs ( value ) ; begin
70485: LD_INT 0
70487: PPUSH
// result := value ;
70488: LD_ADDR_VAR 0 2
70492: PUSH
70493: LD_VAR 0 1
70497: ST_TO_ADDR
// if value < 0 then
70498: LD_VAR 0 1
70502: PUSH
70503: LD_INT 0
70505: LESS
70506: IFFALSE 70523
// result := value * - 1 ;
70508: LD_ADDR_VAR 0 2
70512: PUSH
70513: LD_VAR 0 1
70517: PUSH
70518: LD_INT 1
70520: NEG
70521: MUL
70522: ST_TO_ADDR
// end ;
70523: LD_VAR 0 2
70527: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70528: LD_INT 0
70530: PPUSH
70531: PPUSH
70532: PPUSH
70533: PPUSH
70534: PPUSH
70535: PPUSH
70536: PPUSH
70537: PPUSH
// if not unit or not building then
70538: LD_VAR 0 1
70542: NOT
70543: PUSH
70544: LD_VAR 0 2
70548: NOT
70549: OR
70550: IFFALSE 70554
// exit ;
70552: GO 70780
// x := GetX ( building ) ;
70554: LD_ADDR_VAR 0 4
70558: PUSH
70559: LD_VAR 0 2
70563: PPUSH
70564: CALL_OW 250
70568: ST_TO_ADDR
// y := GetY ( building ) ;
70569: LD_ADDR_VAR 0 6
70573: PUSH
70574: LD_VAR 0 2
70578: PPUSH
70579: CALL_OW 251
70583: ST_TO_ADDR
// d := GetDir ( building ) ;
70584: LD_ADDR_VAR 0 8
70588: PUSH
70589: LD_VAR 0 2
70593: PPUSH
70594: CALL_OW 254
70598: ST_TO_ADDR
// r := 4 ;
70599: LD_ADDR_VAR 0 9
70603: PUSH
70604: LD_INT 4
70606: ST_TO_ADDR
// for i := 1 to 5 do
70607: LD_ADDR_VAR 0 10
70611: PUSH
70612: DOUBLE
70613: LD_INT 1
70615: DEC
70616: ST_TO_ADDR
70617: LD_INT 5
70619: PUSH
70620: FOR_TO
70621: IFFALSE 70778
// begin _x := ShiftX ( x , d , r + i ) ;
70623: LD_ADDR_VAR 0 5
70627: PUSH
70628: LD_VAR 0 4
70632: PPUSH
70633: LD_VAR 0 8
70637: PPUSH
70638: LD_VAR 0 9
70642: PUSH
70643: LD_VAR 0 10
70647: PLUS
70648: PPUSH
70649: CALL_OW 272
70653: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70654: LD_ADDR_VAR 0 7
70658: PUSH
70659: LD_VAR 0 6
70663: PPUSH
70664: LD_VAR 0 8
70668: PPUSH
70669: LD_VAR 0 9
70673: PUSH
70674: LD_VAR 0 10
70678: PLUS
70679: PPUSH
70680: CALL_OW 273
70684: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70685: LD_VAR 0 5
70689: PPUSH
70690: LD_VAR 0 7
70694: PPUSH
70695: CALL_OW 488
70699: PUSH
70700: LD_VAR 0 5
70704: PPUSH
70705: LD_VAR 0 7
70709: PPUSH
70710: CALL_OW 428
70714: PPUSH
70715: CALL_OW 247
70719: PUSH
70720: LD_INT 3
70722: PUSH
70723: LD_INT 2
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: IN
70730: NOT
70731: AND
70732: IFFALSE 70776
// begin ComMoveXY ( unit , _x , _y ) ;
70734: LD_VAR 0 1
70738: PPUSH
70739: LD_VAR 0 5
70743: PPUSH
70744: LD_VAR 0 7
70748: PPUSH
70749: CALL_OW 111
// result := [ _x , _y ] ;
70753: LD_ADDR_VAR 0 3
70757: PUSH
70758: LD_VAR 0 5
70762: PUSH
70763: LD_VAR 0 7
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: ST_TO_ADDR
// exit ;
70772: POP
70773: POP
70774: GO 70780
// end ; end ;
70776: GO 70620
70778: POP
70779: POP
// end ;
70780: LD_VAR 0 3
70784: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70785: LD_INT 0
70787: PPUSH
70788: PPUSH
70789: PPUSH
// result := 0 ;
70790: LD_ADDR_VAR 0 3
70794: PUSH
70795: LD_INT 0
70797: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70798: LD_VAR 0 1
70802: PUSH
70803: LD_INT 0
70805: LESS
70806: PUSH
70807: LD_VAR 0 1
70811: PUSH
70812: LD_INT 8
70814: GREATER
70815: OR
70816: PUSH
70817: LD_VAR 0 2
70821: PUSH
70822: LD_INT 0
70824: LESS
70825: OR
70826: PUSH
70827: LD_VAR 0 2
70831: PUSH
70832: LD_INT 8
70834: GREATER
70835: OR
70836: IFFALSE 70840
// exit ;
70838: GO 70915
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70840: LD_ADDR_VAR 0 4
70844: PUSH
70845: LD_INT 22
70847: PUSH
70848: LD_VAR 0 2
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PPUSH
70857: CALL_OW 69
70861: PUSH
70862: FOR_IN
70863: IFFALSE 70913
// begin un := UnitShoot ( i ) ;
70865: LD_ADDR_VAR 0 5
70869: PUSH
70870: LD_VAR 0 4
70874: PPUSH
70875: CALL_OW 504
70879: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70880: LD_VAR 0 5
70884: PPUSH
70885: CALL_OW 255
70889: PUSH
70890: LD_VAR 0 1
70894: EQUAL
70895: IFFALSE 70911
// begin result := un ;
70897: LD_ADDR_VAR 0 3
70901: PUSH
70902: LD_VAR 0 5
70906: ST_TO_ADDR
// exit ;
70907: POP
70908: POP
70909: GO 70915
// end ; end ;
70911: GO 70862
70913: POP
70914: POP
// end ;
70915: LD_VAR 0 3
70919: RET
// export function GetCargoBay ( units ) ; begin
70920: LD_INT 0
70922: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70923: LD_ADDR_VAR 0 2
70927: PUSH
70928: LD_VAR 0 1
70932: PPUSH
70933: LD_INT 2
70935: PUSH
70936: LD_INT 34
70938: PUSH
70939: LD_INT 12
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 34
70948: PUSH
70949: LD_INT 51
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_INT 34
70958: PUSH
70959: LD_INT 32
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 34
70968: PUSH
70969: LD_INT 89
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: PPUSH
70983: CALL_OW 72
70987: ST_TO_ADDR
// end ;
70988: LD_VAR 0 2
70992: RET
// export function Negate ( value ) ; begin
70993: LD_INT 0
70995: PPUSH
// result := not value ;
70996: LD_ADDR_VAR 0 2
71000: PUSH
71001: LD_VAR 0 1
71005: NOT
71006: ST_TO_ADDR
// end ;
71007: LD_VAR 0 2
71011: RET
// export function Inc ( value ) ; begin
71012: LD_INT 0
71014: PPUSH
// result := value + 1 ;
71015: LD_ADDR_VAR 0 2
71019: PUSH
71020: LD_VAR 0 1
71024: PUSH
71025: LD_INT 1
71027: PLUS
71028: ST_TO_ADDR
// end ;
71029: LD_VAR 0 2
71033: RET
// export function Dec ( value ) ; begin
71034: LD_INT 0
71036: PPUSH
// result := value - 1 ;
71037: LD_ADDR_VAR 0 2
71041: PUSH
71042: LD_VAR 0 1
71046: PUSH
71047: LD_INT 1
71049: MINUS
71050: ST_TO_ADDR
// end ;
71051: LD_VAR 0 2
71055: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71056: LD_INT 0
71058: PPUSH
71059: PPUSH
71060: PPUSH
71061: PPUSH
71062: PPUSH
71063: PPUSH
71064: PPUSH
71065: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71066: LD_VAR 0 1
71070: PPUSH
71071: LD_VAR 0 2
71075: PPUSH
71076: CALL_OW 488
71080: NOT
71081: PUSH
71082: LD_VAR 0 3
71086: PPUSH
71087: LD_VAR 0 4
71091: PPUSH
71092: CALL_OW 488
71096: NOT
71097: OR
71098: IFFALSE 71111
// begin result := - 1 ;
71100: LD_ADDR_VAR 0 5
71104: PUSH
71105: LD_INT 1
71107: NEG
71108: ST_TO_ADDR
// exit ;
71109: GO 71346
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71111: LD_ADDR_VAR 0 12
71115: PUSH
71116: LD_VAR 0 1
71120: PPUSH
71121: LD_VAR 0 2
71125: PPUSH
71126: LD_VAR 0 3
71130: PPUSH
71131: LD_VAR 0 4
71135: PPUSH
71136: CALL 70196 0 4
71140: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71141: LD_ADDR_VAR 0 11
71145: PUSH
71146: LD_VAR 0 1
71150: PPUSH
71151: LD_VAR 0 2
71155: PPUSH
71156: LD_VAR 0 12
71160: PUSH
71161: LD_INT 1
71163: ARRAY
71164: PPUSH
71165: LD_VAR 0 12
71169: PUSH
71170: LD_INT 2
71172: ARRAY
71173: PPUSH
71174: CALL_OW 298
71178: ST_TO_ADDR
// distance := 9999 ;
71179: LD_ADDR_VAR 0 10
71183: PUSH
71184: LD_INT 9999
71186: ST_TO_ADDR
// for i := 0 to 5 do
71187: LD_ADDR_VAR 0 6
71191: PUSH
71192: DOUBLE
71193: LD_INT 0
71195: DEC
71196: ST_TO_ADDR
71197: LD_INT 5
71199: PUSH
71200: FOR_TO
71201: IFFALSE 71344
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71203: LD_ADDR_VAR 0 7
71207: PUSH
71208: LD_VAR 0 1
71212: PPUSH
71213: LD_VAR 0 6
71217: PPUSH
71218: LD_VAR 0 11
71222: PPUSH
71223: CALL_OW 272
71227: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71228: LD_ADDR_VAR 0 8
71232: PUSH
71233: LD_VAR 0 2
71237: PPUSH
71238: LD_VAR 0 6
71242: PPUSH
71243: LD_VAR 0 11
71247: PPUSH
71248: CALL_OW 273
71252: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71253: LD_VAR 0 7
71257: PPUSH
71258: LD_VAR 0 8
71262: PPUSH
71263: CALL_OW 488
71267: NOT
71268: IFFALSE 71272
// continue ;
71270: GO 71200
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71272: LD_ADDR_VAR 0 9
71276: PUSH
71277: LD_VAR 0 12
71281: PUSH
71282: LD_INT 1
71284: ARRAY
71285: PPUSH
71286: LD_VAR 0 12
71290: PUSH
71291: LD_INT 2
71293: ARRAY
71294: PPUSH
71295: LD_VAR 0 7
71299: PPUSH
71300: LD_VAR 0 8
71304: PPUSH
71305: CALL_OW 298
71309: ST_TO_ADDR
// if tmp < distance then
71310: LD_VAR 0 9
71314: PUSH
71315: LD_VAR 0 10
71319: LESS
71320: IFFALSE 71342
// begin result := i ;
71322: LD_ADDR_VAR 0 5
71326: PUSH
71327: LD_VAR 0 6
71331: ST_TO_ADDR
// distance := tmp ;
71332: LD_ADDR_VAR 0 10
71336: PUSH
71337: LD_VAR 0 9
71341: ST_TO_ADDR
// end ; end ;
71342: GO 71200
71344: POP
71345: POP
// end ;
71346: LD_VAR 0 5
71350: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71351: LD_INT 0
71353: PPUSH
71354: PPUSH
// if not driver or not IsInUnit ( driver ) then
71355: LD_VAR 0 1
71359: NOT
71360: PUSH
71361: LD_VAR 0 1
71365: PPUSH
71366: CALL_OW 310
71370: NOT
71371: OR
71372: IFFALSE 71376
// exit ;
71374: GO 71466
// vehicle := IsInUnit ( driver ) ;
71376: LD_ADDR_VAR 0 3
71380: PUSH
71381: LD_VAR 0 1
71385: PPUSH
71386: CALL_OW 310
71390: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71391: LD_VAR 0 1
71395: PPUSH
71396: LD_STRING \
71398: PUSH
71399: LD_INT 0
71401: PUSH
71402: LD_INT 0
71404: PUSH
71405: LD_INT 0
71407: PUSH
71408: LD_INT 0
71410: PUSH
71411: LD_INT 0
71413: PUSH
71414: LD_INT 0
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: PUSH
71426: LD_STRING E
71428: PUSH
71429: LD_INT 0
71431: PUSH
71432: LD_INT 0
71434: PUSH
71435: LD_VAR 0 3
71439: PUSH
71440: LD_INT 0
71442: PUSH
71443: LD_INT 0
71445: PUSH
71446: LD_INT 0
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: PPUSH
71462: CALL_OW 446
// end ;
71466: LD_VAR 0 2
71470: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71471: LD_INT 0
71473: PPUSH
71474: PPUSH
// if not driver or not IsInUnit ( driver ) then
71475: LD_VAR 0 1
71479: NOT
71480: PUSH
71481: LD_VAR 0 1
71485: PPUSH
71486: CALL_OW 310
71490: NOT
71491: OR
71492: IFFALSE 71496
// exit ;
71494: GO 71586
// vehicle := IsInUnit ( driver ) ;
71496: LD_ADDR_VAR 0 3
71500: PUSH
71501: LD_VAR 0 1
71505: PPUSH
71506: CALL_OW 310
71510: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71511: LD_VAR 0 1
71515: PPUSH
71516: LD_STRING \
71518: PUSH
71519: LD_INT 0
71521: PUSH
71522: LD_INT 0
71524: PUSH
71525: LD_INT 0
71527: PUSH
71528: LD_INT 0
71530: PUSH
71531: LD_INT 0
71533: PUSH
71534: LD_INT 0
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: PUSH
71546: LD_STRING E
71548: PUSH
71549: LD_INT 0
71551: PUSH
71552: LD_INT 0
71554: PUSH
71555: LD_VAR 0 3
71559: PUSH
71560: LD_INT 0
71562: PUSH
71563: LD_INT 0
71565: PUSH
71566: LD_INT 0
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PPUSH
71582: CALL_OW 447
// end ;
71586: LD_VAR 0 2
71590: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71591: LD_INT 0
71593: PPUSH
71594: PPUSH
71595: PPUSH
// tmp := [ ] ;
71596: LD_ADDR_VAR 0 5
71600: PUSH
71601: EMPTY
71602: ST_TO_ADDR
// for i in units do
71603: LD_ADDR_VAR 0 4
71607: PUSH
71608: LD_VAR 0 1
71612: PUSH
71613: FOR_IN
71614: IFFALSE 71652
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71616: LD_ADDR_VAR 0 5
71620: PUSH
71621: LD_VAR 0 5
71625: PPUSH
71626: LD_VAR 0 5
71630: PUSH
71631: LD_INT 1
71633: PLUS
71634: PPUSH
71635: LD_VAR 0 4
71639: PPUSH
71640: CALL_OW 256
71644: PPUSH
71645: CALL_OW 2
71649: ST_TO_ADDR
71650: GO 71613
71652: POP
71653: POP
// if not tmp then
71654: LD_VAR 0 5
71658: NOT
71659: IFFALSE 71663
// exit ;
71661: GO 71711
// if asc then
71663: LD_VAR 0 2
71667: IFFALSE 71691
// result := SortListByListAsc ( units , tmp ) else
71669: LD_ADDR_VAR 0 3
71673: PUSH
71674: LD_VAR 0 1
71678: PPUSH
71679: LD_VAR 0 5
71683: PPUSH
71684: CALL_OW 76
71688: ST_TO_ADDR
71689: GO 71711
// result := SortListByListDesc ( units , tmp ) ;
71691: LD_ADDR_VAR 0 3
71695: PUSH
71696: LD_VAR 0 1
71700: PPUSH
71701: LD_VAR 0 5
71705: PPUSH
71706: CALL_OW 77
71710: ST_TO_ADDR
// end ;
71711: LD_VAR 0 3
71715: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71716: LD_INT 0
71718: PPUSH
71719: PPUSH
// task := GetTaskList ( mech ) ;
71720: LD_ADDR_VAR 0 4
71724: PUSH
71725: LD_VAR 0 1
71729: PPUSH
71730: CALL_OW 437
71734: ST_TO_ADDR
// if not task then
71735: LD_VAR 0 4
71739: NOT
71740: IFFALSE 71744
// exit ;
71742: GO 71786
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71744: LD_ADDR_VAR 0 3
71748: PUSH
71749: LD_VAR 0 4
71753: PUSH
71754: LD_INT 1
71756: ARRAY
71757: PUSH
71758: LD_INT 1
71760: ARRAY
71761: PUSH
71762: LD_STRING r
71764: EQUAL
71765: PUSH
71766: LD_VAR 0 4
71770: PUSH
71771: LD_INT 1
71773: ARRAY
71774: PUSH
71775: LD_INT 4
71777: ARRAY
71778: PUSH
71779: LD_VAR 0 2
71783: EQUAL
71784: AND
71785: ST_TO_ADDR
// end ;
71786: LD_VAR 0 3
71790: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71791: LD_INT 0
71793: PPUSH
// SetDir ( unit , d ) ;
71794: LD_VAR 0 1
71798: PPUSH
71799: LD_VAR 0 4
71803: PPUSH
71804: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71808: LD_VAR 0 1
71812: PPUSH
71813: LD_VAR 0 2
71817: PPUSH
71818: LD_VAR 0 3
71822: PPUSH
71823: LD_VAR 0 5
71827: PPUSH
71828: CALL_OW 48
// end ;
71832: LD_VAR 0 6
71836: RET
// export function ToNaturalNumber ( number ) ; begin
71837: LD_INT 0
71839: PPUSH
// result := number div 1 ;
71840: LD_ADDR_VAR 0 2
71844: PUSH
71845: LD_VAR 0 1
71849: PUSH
71850: LD_INT 1
71852: DIV
71853: ST_TO_ADDR
// if number < 0 then
71854: LD_VAR 0 1
71858: PUSH
71859: LD_INT 0
71861: LESS
71862: IFFALSE 71872
// result := 0 ;
71864: LD_ADDR_VAR 0 2
71868: PUSH
71869: LD_INT 0
71871: ST_TO_ADDR
// end ;
71872: LD_VAR 0 2
71876: RET
// export function SortByClass ( units , class ) ; var un ; begin
71877: LD_INT 0
71879: PPUSH
71880: PPUSH
// if not units or not class then
71881: LD_VAR 0 1
71885: NOT
71886: PUSH
71887: LD_VAR 0 2
71891: NOT
71892: OR
71893: IFFALSE 71897
// exit ;
71895: GO 71992
// result := [ ] ;
71897: LD_ADDR_VAR 0 3
71901: PUSH
71902: EMPTY
71903: ST_TO_ADDR
// for un in units do
71904: LD_ADDR_VAR 0 4
71908: PUSH
71909: LD_VAR 0 1
71913: PUSH
71914: FOR_IN
71915: IFFALSE 71990
// if GetClass ( un ) = class then
71917: LD_VAR 0 4
71921: PPUSH
71922: CALL_OW 257
71926: PUSH
71927: LD_VAR 0 2
71931: EQUAL
71932: IFFALSE 71959
// result := Insert ( result , 1 , un ) else
71934: LD_ADDR_VAR 0 3
71938: PUSH
71939: LD_VAR 0 3
71943: PPUSH
71944: LD_INT 1
71946: PPUSH
71947: LD_VAR 0 4
71951: PPUSH
71952: CALL_OW 2
71956: ST_TO_ADDR
71957: GO 71988
// result := Replace ( result , result + 1 , un ) ;
71959: LD_ADDR_VAR 0 3
71963: PUSH
71964: LD_VAR 0 3
71968: PPUSH
71969: LD_VAR 0 3
71973: PUSH
71974: LD_INT 1
71976: PLUS
71977: PPUSH
71978: LD_VAR 0 4
71982: PPUSH
71983: CALL_OW 1
71987: ST_TO_ADDR
71988: GO 71914
71990: POP
71991: POP
// end ;
71992: LD_VAR 0 3
71996: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71997: LD_INT 0
71999: PPUSH
72000: PPUSH
72001: PPUSH
72002: PPUSH
72003: PPUSH
72004: PPUSH
72005: PPUSH
// result := [ ] ;
72006: LD_ADDR_VAR 0 4
72010: PUSH
72011: EMPTY
72012: ST_TO_ADDR
// if x - r < 0 then
72013: LD_VAR 0 1
72017: PUSH
72018: LD_VAR 0 3
72022: MINUS
72023: PUSH
72024: LD_INT 0
72026: LESS
72027: IFFALSE 72039
// min_x := 0 else
72029: LD_ADDR_VAR 0 8
72033: PUSH
72034: LD_INT 0
72036: ST_TO_ADDR
72037: GO 72055
// min_x := x - r ;
72039: LD_ADDR_VAR 0 8
72043: PUSH
72044: LD_VAR 0 1
72048: PUSH
72049: LD_VAR 0 3
72053: MINUS
72054: ST_TO_ADDR
// if y - r < 0 then
72055: LD_VAR 0 2
72059: PUSH
72060: LD_VAR 0 3
72064: MINUS
72065: PUSH
72066: LD_INT 0
72068: LESS
72069: IFFALSE 72081
// min_y := 0 else
72071: LD_ADDR_VAR 0 7
72075: PUSH
72076: LD_INT 0
72078: ST_TO_ADDR
72079: GO 72097
// min_y := y - r ;
72081: LD_ADDR_VAR 0 7
72085: PUSH
72086: LD_VAR 0 2
72090: PUSH
72091: LD_VAR 0 3
72095: MINUS
72096: ST_TO_ADDR
// max_x := x + r ;
72097: LD_ADDR_VAR 0 9
72101: PUSH
72102: LD_VAR 0 1
72106: PUSH
72107: LD_VAR 0 3
72111: PLUS
72112: ST_TO_ADDR
// max_y := y + r ;
72113: LD_ADDR_VAR 0 10
72117: PUSH
72118: LD_VAR 0 2
72122: PUSH
72123: LD_VAR 0 3
72127: PLUS
72128: ST_TO_ADDR
// for _x = min_x to max_x do
72129: LD_ADDR_VAR 0 5
72133: PUSH
72134: DOUBLE
72135: LD_VAR 0 8
72139: DEC
72140: ST_TO_ADDR
72141: LD_VAR 0 9
72145: PUSH
72146: FOR_TO
72147: IFFALSE 72248
// for _y = min_y to max_y do
72149: LD_ADDR_VAR 0 6
72153: PUSH
72154: DOUBLE
72155: LD_VAR 0 7
72159: DEC
72160: ST_TO_ADDR
72161: LD_VAR 0 10
72165: PUSH
72166: FOR_TO
72167: IFFALSE 72244
// begin if not ValidHex ( _x , _y ) then
72169: LD_VAR 0 5
72173: PPUSH
72174: LD_VAR 0 6
72178: PPUSH
72179: CALL_OW 488
72183: NOT
72184: IFFALSE 72188
// continue ;
72186: GO 72166
// if GetResourceTypeXY ( _x , _y ) then
72188: LD_VAR 0 5
72192: PPUSH
72193: LD_VAR 0 6
72197: PPUSH
72198: CALL_OW 283
72202: IFFALSE 72242
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72204: LD_ADDR_VAR 0 4
72208: PUSH
72209: LD_VAR 0 4
72213: PPUSH
72214: LD_VAR 0 4
72218: PUSH
72219: LD_INT 1
72221: PLUS
72222: PPUSH
72223: LD_VAR 0 5
72227: PUSH
72228: LD_VAR 0 6
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PPUSH
72237: CALL_OW 1
72241: ST_TO_ADDR
// end ;
72242: GO 72166
72244: POP
72245: POP
72246: GO 72146
72248: POP
72249: POP
// end ;
72250: LD_VAR 0 4
72254: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72255: LD_INT 0
72257: PPUSH
72258: PPUSH
72259: PPUSH
72260: PPUSH
72261: PPUSH
72262: PPUSH
72263: PPUSH
72264: PPUSH
// if not units then
72265: LD_VAR 0 1
72269: NOT
72270: IFFALSE 72274
// exit ;
72272: GO 72798
// result := UnitFilter ( units , [ f_ok ] ) ;
72274: LD_ADDR_VAR 0 3
72278: PUSH
72279: LD_VAR 0 1
72283: PPUSH
72284: LD_INT 50
72286: PUSH
72287: EMPTY
72288: LIST
72289: PPUSH
72290: CALL_OW 72
72294: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72295: LD_ADDR_VAR 0 8
72299: PUSH
72300: LD_VAR 0 1
72304: PUSH
72305: LD_INT 1
72307: ARRAY
72308: PPUSH
72309: CALL_OW 255
72313: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72314: LD_ADDR_VAR 0 10
72318: PUSH
72319: LD_INT 29
72321: PUSH
72322: LD_INT 91
72324: PUSH
72325: LD_INT 49
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: LIST
72332: ST_TO_ADDR
// if not result then
72333: LD_VAR 0 3
72337: NOT
72338: IFFALSE 72342
// exit ;
72340: GO 72798
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72342: LD_ADDR_VAR 0 5
72346: PUSH
72347: LD_INT 81
72349: PUSH
72350: LD_VAR 0 8
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: PPUSH
72359: CALL_OW 69
72363: ST_TO_ADDR
// for i in result do
72364: LD_ADDR_VAR 0 4
72368: PUSH
72369: LD_VAR 0 3
72373: PUSH
72374: FOR_IN
72375: IFFALSE 72796
// begin tag := GetTag ( i ) + 1 ;
72377: LD_ADDR_VAR 0 9
72381: PUSH
72382: LD_VAR 0 4
72386: PPUSH
72387: CALL_OW 110
72391: PUSH
72392: LD_INT 1
72394: PLUS
72395: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72396: LD_ADDR_VAR 0 7
72400: PUSH
72401: LD_VAR 0 4
72405: PPUSH
72406: CALL_OW 250
72410: PPUSH
72411: LD_VAR 0 4
72415: PPUSH
72416: CALL_OW 251
72420: PPUSH
72421: LD_INT 6
72423: PPUSH
72424: CALL 71997 0 3
72428: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72429: LD_VAR 0 4
72433: PPUSH
72434: CALL_OW 247
72438: PUSH
72439: LD_INT 2
72441: EQUAL
72442: PUSH
72443: LD_VAR 0 7
72447: AND
72448: PUSH
72449: LD_VAR 0 4
72453: PPUSH
72454: CALL_OW 264
72458: PUSH
72459: LD_VAR 0 10
72463: IN
72464: NOT
72465: AND
72466: IFFALSE 72505
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72468: LD_VAR 0 4
72472: PPUSH
72473: LD_VAR 0 7
72477: PUSH
72478: LD_INT 1
72480: ARRAY
72481: PUSH
72482: LD_INT 1
72484: ARRAY
72485: PPUSH
72486: LD_VAR 0 7
72490: PUSH
72491: LD_INT 1
72493: ARRAY
72494: PUSH
72495: LD_INT 2
72497: ARRAY
72498: PPUSH
72499: CALL_OW 116
72503: GO 72794
// if path > tag then
72505: LD_VAR 0 2
72509: PUSH
72510: LD_VAR 0 9
72514: GREATER
72515: IFFALSE 72723
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72517: LD_ADDR_VAR 0 6
72521: PUSH
72522: LD_VAR 0 5
72526: PPUSH
72527: LD_INT 91
72529: PUSH
72530: LD_VAR 0 4
72534: PUSH
72535: LD_INT 8
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: LIST
72542: PPUSH
72543: CALL_OW 72
72547: ST_TO_ADDR
// if nearEnemy then
72548: LD_VAR 0 6
72552: IFFALSE 72621
// begin if GetWeapon ( i ) = ru_time_lapser then
72554: LD_VAR 0 4
72558: PPUSH
72559: CALL_OW 264
72563: PUSH
72564: LD_INT 49
72566: EQUAL
72567: IFFALSE 72595
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72569: LD_VAR 0 4
72573: PPUSH
72574: LD_VAR 0 6
72578: PPUSH
72579: LD_VAR 0 4
72583: PPUSH
72584: CALL_OW 74
72588: PPUSH
72589: CALL_OW 112
72593: GO 72619
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72595: LD_VAR 0 4
72599: PPUSH
72600: LD_VAR 0 6
72604: PPUSH
72605: LD_VAR 0 4
72609: PPUSH
72610: CALL_OW 74
72614: PPUSH
72615: CALL 73723 0 2
// end else
72619: GO 72721
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72621: LD_VAR 0 4
72625: PPUSH
72626: LD_VAR 0 2
72630: PUSH
72631: LD_VAR 0 9
72635: ARRAY
72636: PUSH
72637: LD_INT 1
72639: ARRAY
72640: PPUSH
72641: LD_VAR 0 2
72645: PUSH
72646: LD_VAR 0 9
72650: ARRAY
72651: PUSH
72652: LD_INT 2
72654: ARRAY
72655: PPUSH
72656: CALL_OW 297
72660: PUSH
72661: LD_INT 6
72663: GREATER
72664: IFFALSE 72707
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72666: LD_VAR 0 4
72670: PPUSH
72671: LD_VAR 0 2
72675: PUSH
72676: LD_VAR 0 9
72680: ARRAY
72681: PUSH
72682: LD_INT 1
72684: ARRAY
72685: PPUSH
72686: LD_VAR 0 2
72690: PUSH
72691: LD_VAR 0 9
72695: ARRAY
72696: PUSH
72697: LD_INT 2
72699: ARRAY
72700: PPUSH
72701: CALL_OW 114
72705: GO 72721
// SetTag ( i , tag ) ;
72707: LD_VAR 0 4
72711: PPUSH
72712: LD_VAR 0 9
72716: PPUSH
72717: CALL_OW 109
// end else
72721: GO 72794
// if enemy then
72723: LD_VAR 0 5
72727: IFFALSE 72794
// begin if GetWeapon ( i ) = ru_time_lapser then
72729: LD_VAR 0 4
72733: PPUSH
72734: CALL_OW 264
72738: PUSH
72739: LD_INT 49
72741: EQUAL
72742: IFFALSE 72770
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72744: LD_VAR 0 4
72748: PPUSH
72749: LD_VAR 0 5
72753: PPUSH
72754: LD_VAR 0 4
72758: PPUSH
72759: CALL_OW 74
72763: PPUSH
72764: CALL_OW 112
72768: GO 72794
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72770: LD_VAR 0 4
72774: PPUSH
72775: LD_VAR 0 5
72779: PPUSH
72780: LD_VAR 0 4
72784: PPUSH
72785: CALL_OW 74
72789: PPUSH
72790: CALL 73723 0 2
// end ; end ;
72794: GO 72374
72796: POP
72797: POP
// end ;
72798: LD_VAR 0 3
72802: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72803: LD_INT 0
72805: PPUSH
72806: PPUSH
72807: PPUSH
// if not unit or IsInUnit ( unit ) then
72808: LD_VAR 0 1
72812: NOT
72813: PUSH
72814: LD_VAR 0 1
72818: PPUSH
72819: CALL_OW 310
72823: OR
72824: IFFALSE 72828
// exit ;
72826: GO 72919
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72828: LD_ADDR_VAR 0 4
72832: PUSH
72833: LD_VAR 0 1
72837: PPUSH
72838: CALL_OW 250
72842: PPUSH
72843: LD_VAR 0 2
72847: PPUSH
72848: LD_INT 1
72850: PPUSH
72851: CALL_OW 272
72855: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72856: LD_ADDR_VAR 0 5
72860: PUSH
72861: LD_VAR 0 1
72865: PPUSH
72866: CALL_OW 251
72870: PPUSH
72871: LD_VAR 0 2
72875: PPUSH
72876: LD_INT 1
72878: PPUSH
72879: CALL_OW 273
72883: ST_TO_ADDR
// if ValidHex ( x , y ) then
72884: LD_VAR 0 4
72888: PPUSH
72889: LD_VAR 0 5
72893: PPUSH
72894: CALL_OW 488
72898: IFFALSE 72919
// ComTurnXY ( unit , x , y ) ;
72900: LD_VAR 0 1
72904: PPUSH
72905: LD_VAR 0 4
72909: PPUSH
72910: LD_VAR 0 5
72914: PPUSH
72915: CALL_OW 118
// end ;
72919: LD_VAR 0 3
72923: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72924: LD_INT 0
72926: PPUSH
72927: PPUSH
// result := false ;
72928: LD_ADDR_VAR 0 3
72932: PUSH
72933: LD_INT 0
72935: ST_TO_ADDR
// if not units then
72936: LD_VAR 0 2
72940: NOT
72941: IFFALSE 72945
// exit ;
72943: GO 72990
// for i in units do
72945: LD_ADDR_VAR 0 4
72949: PUSH
72950: LD_VAR 0 2
72954: PUSH
72955: FOR_IN
72956: IFFALSE 72988
// if See ( side , i ) then
72958: LD_VAR 0 1
72962: PPUSH
72963: LD_VAR 0 4
72967: PPUSH
72968: CALL_OW 292
72972: IFFALSE 72986
// begin result := true ;
72974: LD_ADDR_VAR 0 3
72978: PUSH
72979: LD_INT 1
72981: ST_TO_ADDR
// exit ;
72982: POP
72983: POP
72984: GO 72990
// end ;
72986: GO 72955
72988: POP
72989: POP
// end ;
72990: LD_VAR 0 3
72994: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72995: LD_INT 0
72997: PPUSH
72998: PPUSH
72999: PPUSH
73000: PPUSH
// if not unit or not points then
73001: LD_VAR 0 1
73005: NOT
73006: PUSH
73007: LD_VAR 0 2
73011: NOT
73012: OR
73013: IFFALSE 73017
// exit ;
73015: GO 73107
// dist := 99999 ;
73017: LD_ADDR_VAR 0 5
73021: PUSH
73022: LD_INT 99999
73024: ST_TO_ADDR
// for i in points do
73025: LD_ADDR_VAR 0 4
73029: PUSH
73030: LD_VAR 0 2
73034: PUSH
73035: FOR_IN
73036: IFFALSE 73105
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73038: LD_ADDR_VAR 0 6
73042: PUSH
73043: LD_VAR 0 1
73047: PPUSH
73048: LD_VAR 0 4
73052: PUSH
73053: LD_INT 1
73055: ARRAY
73056: PPUSH
73057: LD_VAR 0 4
73061: PUSH
73062: LD_INT 2
73064: ARRAY
73065: PPUSH
73066: CALL_OW 297
73070: ST_TO_ADDR
// if tmpDist < dist then
73071: LD_VAR 0 6
73075: PUSH
73076: LD_VAR 0 5
73080: LESS
73081: IFFALSE 73103
// begin result := i ;
73083: LD_ADDR_VAR 0 3
73087: PUSH
73088: LD_VAR 0 4
73092: ST_TO_ADDR
// dist := tmpDist ;
73093: LD_ADDR_VAR 0 5
73097: PUSH
73098: LD_VAR 0 6
73102: ST_TO_ADDR
// end ; end ;
73103: GO 73035
73105: POP
73106: POP
// end ;
73107: LD_VAR 0 3
73111: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73112: LD_INT 0
73114: PPUSH
// uc_side := side ;
73115: LD_ADDR_OWVAR 20
73119: PUSH
73120: LD_VAR 0 1
73124: ST_TO_ADDR
// uc_nation := 3 ;
73125: LD_ADDR_OWVAR 21
73129: PUSH
73130: LD_INT 3
73132: ST_TO_ADDR
// vc_chassis := 25 ;
73133: LD_ADDR_OWVAR 37
73137: PUSH
73138: LD_INT 25
73140: ST_TO_ADDR
// vc_engine := engine_siberite ;
73141: LD_ADDR_OWVAR 39
73145: PUSH
73146: LD_INT 3
73148: ST_TO_ADDR
// vc_control := control_computer ;
73149: LD_ADDR_OWVAR 38
73153: PUSH
73154: LD_INT 3
73156: ST_TO_ADDR
// vc_weapon := 59 ;
73157: LD_ADDR_OWVAR 40
73161: PUSH
73162: LD_INT 59
73164: ST_TO_ADDR
// result := CreateVehicle ;
73165: LD_ADDR_VAR 0 5
73169: PUSH
73170: CALL_OW 45
73174: ST_TO_ADDR
// SetDir ( result , d ) ;
73175: LD_VAR 0 5
73179: PPUSH
73180: LD_VAR 0 4
73184: PPUSH
73185: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73189: LD_VAR 0 5
73193: PPUSH
73194: LD_VAR 0 2
73198: PPUSH
73199: LD_VAR 0 3
73203: PPUSH
73204: LD_INT 0
73206: PPUSH
73207: CALL_OW 48
// end ;
73211: LD_VAR 0 5
73215: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73216: LD_INT 0
73218: PPUSH
73219: PPUSH
73220: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73221: LD_ADDR_VAR 0 2
73225: PUSH
73226: LD_INT 0
73228: PUSH
73229: LD_INT 0
73231: PUSH
73232: LD_INT 0
73234: PUSH
73235: LD_INT 0
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73244: LD_VAR 0 1
73248: NOT
73249: PUSH
73250: LD_VAR 0 1
73254: PPUSH
73255: CALL_OW 264
73259: PUSH
73260: LD_INT 12
73262: PUSH
73263: LD_INT 51
73265: PUSH
73266: LD_INT 32
73268: PUSH
73269: LD_INT 89
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: IN
73278: NOT
73279: OR
73280: IFFALSE 73284
// exit ;
73282: GO 73382
// for i := 1 to 3 do
73284: LD_ADDR_VAR 0 3
73288: PUSH
73289: DOUBLE
73290: LD_INT 1
73292: DEC
73293: ST_TO_ADDR
73294: LD_INT 3
73296: PUSH
73297: FOR_TO
73298: IFFALSE 73380
// begin tmp := GetCargo ( cargo , i ) ;
73300: LD_ADDR_VAR 0 4
73304: PUSH
73305: LD_VAR 0 1
73309: PPUSH
73310: LD_VAR 0 3
73314: PPUSH
73315: CALL_OW 289
73319: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73320: LD_ADDR_VAR 0 2
73324: PUSH
73325: LD_VAR 0 2
73329: PPUSH
73330: LD_VAR 0 3
73334: PPUSH
73335: LD_VAR 0 4
73339: PPUSH
73340: CALL_OW 1
73344: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73345: LD_ADDR_VAR 0 2
73349: PUSH
73350: LD_VAR 0 2
73354: PPUSH
73355: LD_INT 4
73357: PPUSH
73358: LD_VAR 0 2
73362: PUSH
73363: LD_INT 4
73365: ARRAY
73366: PUSH
73367: LD_VAR 0 4
73371: PLUS
73372: PPUSH
73373: CALL_OW 1
73377: ST_TO_ADDR
// end ;
73378: GO 73297
73380: POP
73381: POP
// end ;
73382: LD_VAR 0 2
73386: RET
// export function Length ( array ) ; begin
73387: LD_INT 0
73389: PPUSH
// result := array + 0 ;
73390: LD_ADDR_VAR 0 2
73394: PUSH
73395: LD_VAR 0 1
73399: PUSH
73400: LD_INT 0
73402: PLUS
73403: ST_TO_ADDR
// end ;
73404: LD_VAR 0 2
73408: RET
// export function PrepareArray ( array ) ; begin
73409: LD_INT 0
73411: PPUSH
// result := array diff 0 ;
73412: LD_ADDR_VAR 0 2
73416: PUSH
73417: LD_VAR 0 1
73421: PUSH
73422: LD_INT 0
73424: DIFF
73425: ST_TO_ADDR
// if not result [ 1 ] then
73426: LD_VAR 0 2
73430: PUSH
73431: LD_INT 1
73433: ARRAY
73434: NOT
73435: IFFALSE 73455
// result := Delete ( result , 1 ) ;
73437: LD_ADDR_VAR 0 2
73441: PUSH
73442: LD_VAR 0 2
73446: PPUSH
73447: LD_INT 1
73449: PPUSH
73450: CALL_OW 3
73454: ST_TO_ADDR
// end ;
73455: LD_VAR 0 2
73459: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73460: LD_INT 0
73462: PPUSH
73463: PPUSH
73464: PPUSH
73465: PPUSH
// sibRocketRange := 25 ;
73466: LD_ADDR_VAR 0 6
73470: PUSH
73471: LD_INT 25
73473: ST_TO_ADDR
// result := false ;
73474: LD_ADDR_VAR 0 4
73478: PUSH
73479: LD_INT 0
73481: ST_TO_ADDR
// for i := 0 to 5 do
73482: LD_ADDR_VAR 0 5
73486: PUSH
73487: DOUBLE
73488: LD_INT 0
73490: DEC
73491: ST_TO_ADDR
73492: LD_INT 5
73494: PUSH
73495: FOR_TO
73496: IFFALSE 73563
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73498: LD_VAR 0 1
73502: PPUSH
73503: LD_VAR 0 5
73507: PPUSH
73508: LD_VAR 0 6
73512: PPUSH
73513: CALL_OW 272
73517: PPUSH
73518: LD_VAR 0 2
73522: PPUSH
73523: LD_VAR 0 5
73527: PPUSH
73528: LD_VAR 0 6
73532: PPUSH
73533: CALL_OW 273
73537: PPUSH
73538: LD_VAR 0 3
73542: PPUSH
73543: CALL_OW 309
73547: IFFALSE 73561
// begin result := true ;
73549: LD_ADDR_VAR 0 4
73553: PUSH
73554: LD_INT 1
73556: ST_TO_ADDR
// exit ;
73557: POP
73558: POP
73559: GO 73565
// end ;
73561: GO 73495
73563: POP
73564: POP
// end ;
73565: LD_VAR 0 4
73569: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73570: LD_INT 0
73572: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73573: LD_VAR 0 1
73577: PPUSH
73578: LD_VAR 0 2
73582: PPUSH
73583: LD_INT 0
73585: PPUSH
73586: LD_INT 0
73588: PPUSH
73589: LD_INT 1
73591: PPUSH
73592: LD_INT 0
73594: PPUSH
73595: CALL_OW 587
// end ;
73599: LD_VAR 0 3
73603: RET
// export function CenterOnNow ( unit ) ; begin
73604: LD_INT 0
73606: PPUSH
// result := IsInUnit ( unit ) ;
73607: LD_ADDR_VAR 0 2
73611: PUSH
73612: LD_VAR 0 1
73616: PPUSH
73617: CALL_OW 310
73621: ST_TO_ADDR
// if not result then
73622: LD_VAR 0 2
73626: NOT
73627: IFFALSE 73639
// result := unit ;
73629: LD_ADDR_VAR 0 2
73633: PUSH
73634: LD_VAR 0 1
73638: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73639: LD_VAR 0 1
73643: PPUSH
73644: CALL_OW 87
// end ;
73648: LD_VAR 0 2
73652: RET
// export function ComMoveHex ( unit , hex ) ; begin
73653: LD_INT 0
73655: PPUSH
// if not hex then
73656: LD_VAR 0 2
73660: NOT
73661: IFFALSE 73665
// exit ;
73663: GO 73718
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73665: LD_VAR 0 2
73669: PUSH
73670: LD_INT 1
73672: ARRAY
73673: PPUSH
73674: LD_VAR 0 2
73678: PUSH
73679: LD_INT 2
73681: ARRAY
73682: PPUSH
73683: CALL_OW 428
73687: IFFALSE 73691
// exit ;
73689: GO 73718
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73691: LD_VAR 0 1
73695: PPUSH
73696: LD_VAR 0 2
73700: PUSH
73701: LD_INT 1
73703: ARRAY
73704: PPUSH
73705: LD_VAR 0 2
73709: PUSH
73710: LD_INT 2
73712: ARRAY
73713: PPUSH
73714: CALL_OW 111
// end ;
73718: LD_VAR 0 3
73722: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73723: LD_INT 0
73725: PPUSH
73726: PPUSH
73727: PPUSH
// if not unit or not enemy then
73728: LD_VAR 0 1
73732: NOT
73733: PUSH
73734: LD_VAR 0 2
73738: NOT
73739: OR
73740: IFFALSE 73744
// exit ;
73742: GO 73868
// x := GetX ( enemy ) ;
73744: LD_ADDR_VAR 0 4
73748: PUSH
73749: LD_VAR 0 2
73753: PPUSH
73754: CALL_OW 250
73758: ST_TO_ADDR
// y := GetY ( enemy ) ;
73759: LD_ADDR_VAR 0 5
73763: PUSH
73764: LD_VAR 0 2
73768: PPUSH
73769: CALL_OW 251
73773: ST_TO_ADDR
// if ValidHex ( x , y ) then
73774: LD_VAR 0 4
73778: PPUSH
73779: LD_VAR 0 5
73783: PPUSH
73784: CALL_OW 488
73788: IFFALSE 73868
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
73790: LD_VAR 0 2
73794: PPUSH
73795: CALL_OW 247
73799: PUSH
73800: LD_INT 3
73802: PUSH
73803: LD_INT 2
73805: PUSH
73806: EMPTY
73807: LIST
73808: LIST
73809: IN
73810: PUSH
73811: LD_VAR 0 1
73815: PPUSH
73816: CALL_OW 255
73820: PPUSH
73821: LD_VAR 0 2
73825: PPUSH
73826: CALL_OW 292
73830: AND
73831: IFFALSE 73849
// ComAttackUnit ( unit , enemy ) else
73833: LD_VAR 0 1
73837: PPUSH
73838: LD_VAR 0 2
73842: PPUSH
73843: CALL_OW 115
73847: GO 73868
// ComAgressiveMove ( unit , x , y ) ;
73849: LD_VAR 0 1
73853: PPUSH
73854: LD_VAR 0 4
73858: PPUSH
73859: LD_VAR 0 5
73863: PPUSH
73864: CALL_OW 114
// end ; end_of_file
73868: LD_VAR 0 3
73872: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73873: LD_VAR 0 1
73877: PUSH
73878: LD_INT 200
73880: DOUBLE
73881: GREATEREQUAL
73882: IFFALSE 73890
73884: LD_INT 299
73886: DOUBLE
73887: LESSEQUAL
73888: IFTRUE 73892
73890: GO 73924
73892: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73893: LD_VAR 0 1
73897: PPUSH
73898: LD_VAR 0 2
73902: PPUSH
73903: LD_VAR 0 3
73907: PPUSH
73908: LD_VAR 0 4
73912: PPUSH
73913: LD_VAR 0 5
73917: PPUSH
73918: CALL 27597 0 5
73922: GO 74001
73924: LD_INT 300
73926: DOUBLE
73927: GREATEREQUAL
73928: IFFALSE 73936
73930: LD_INT 399
73932: DOUBLE
73933: LESSEQUAL
73934: IFTRUE 73938
73936: GO 74000
73938: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73939: LD_VAR 0 1
73943: PPUSH
73944: LD_VAR 0 2
73948: PPUSH
73949: LD_VAR 0 3
73953: PPUSH
73954: LD_VAR 0 4
73958: PPUSH
73959: LD_VAR 0 5
73963: PPUSH
73964: LD_VAR 0 6
73968: PPUSH
73969: LD_VAR 0 7
73973: PPUSH
73974: LD_VAR 0 8
73978: PPUSH
73979: LD_VAR 0 9
73983: PPUSH
73984: LD_VAR 0 10
73988: PPUSH
73989: LD_VAR 0 11
73993: PPUSH
73994: CALL 23922 0 11
73998: GO 74001
74000: POP
// end ;
74001: PPOPN 11
74003: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74004: LD_VAR 0 1
74008: PPUSH
74009: LD_VAR 0 2
74013: PPUSH
74014: LD_VAR 0 3
74018: PPUSH
74019: LD_VAR 0 4
74023: PPUSH
74024: LD_VAR 0 5
74028: PPUSH
74029: CALL 27333 0 5
// end ; end_of_file
74033: PPOPN 5
74035: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74036: LD_VAR 0 1
74040: PPUSH
74041: LD_VAR 0 2
74045: PPUSH
74046: LD_VAR 0 3
74050: PPUSH
74051: LD_VAR 0 4
74055: PPUSH
74056: LD_VAR 0 5
74060: PPUSH
74061: LD_VAR 0 6
74065: PPUSH
74066: CALL 11574 0 6
// end ;
74070: PPOPN 6
74072: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74073: LD_INT 0
74075: PPUSH
// begin if not units then
74076: LD_VAR 0 1
74080: NOT
74081: IFFALSE 74085
// exit ;
74083: GO 74085
// end ;
74085: PPOPN 7
74087: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74088: CALL 11478 0 0
// end ;
74092: PPOPN 1
74094: END
