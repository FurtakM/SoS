// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode , destroyCounter ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// destroyCounter := 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  58: LD_ADDR_EXP 10
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// russianTanks = [ ] ;
  65: LD_ADDR_EXP 11
  69: PUSH
  70: EMPTY
  71: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  72: LD_ADDR_EXP 12
  76: PUSH
  77: EMPTY
  78: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  79: LD_ADDR_EXP 14
  83: PUSH
  84: LD_STRING 12_SciDed_1
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: CALL_OW 30
  94: ST_TO_ADDR
// russianAI = 0 ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// debugMode = 0 ;
 103: LD_ADDR_EXP 16
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// CreateNature ;
 111: CALL 1486 0 0
// PrepareDifficulty ;
 115: CALL 1782 0 0
// PrepareHero ;
 119: CALL 564 0 0
// PrepareRemoteVehs ;
 123: CALL 885 0 0
// PrepareRussianBase ;
 127: CALL 1128 0 0
// PrepareCommander ;
 131: CALL 1070 0 0
// end ;
 135: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 136: LD_EXP 16
 140: PUSH
 141: LD_INT 1
 143: EQUAL
 144: IFFALSE 450
 146: GO 148
 148: DISABLE
 149: LD_INT 0
 151: PPUSH
// begin enable ;
 152: ENABLE
// fogoff ( true ) ;
 153: LD_INT 1
 155: PPUSH
 156: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 160: LD_ADDR_VAR 0 1
 164: PUSH
 165: LD_INT 22
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: PUSH
 175: LD_INT 21
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PPUSH
 189: CALL_OW 69
 193: PUSH
 194: FOR_IN
 195: IFFALSE 211
// SetLives ( i , 1000 ) ;
 197: LD_VAR 0 1
 201: PPUSH
 202: LD_INT 1000
 204: PPUSH
 205: CALL_OW 234
 209: GO 194
 211: POP
 212: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 213: LD_ADDR_VAR 0 1
 217: PUSH
 218: LD_INT 22
 220: PUSH
 221: LD_INT 1
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 2
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 0
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PPUSH
 260: CALL_OW 69
 264: PUSH
 265: FOR_IN
 266: IFFALSE 290
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 268: LD_VAR 0 1
 272: PPUSH
 273: CALL_OW 274
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 9999
 283: PPUSH
 284: CALL_OW 277
 288: GO 265
 290: POP
 291: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 292: LD_ADDR_VAR 0 1
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 30
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: FOR_IN
 345: IFFALSE 369
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 347: LD_VAR 0 1
 351: PPUSH
 352: CALL_OW 274
 356: PPUSH
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 9999
 362: PPUSH
 363: CALL_OW 277
 367: GO 344
 369: POP
 370: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 22
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: LD_INT 2
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 3
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// end ;
 450: PPOPN 1
 452: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 33
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: LD_INT 15
 484: GREATEREQUAL
 485: IFFALSE 497
 487: GO 489
 489: DISABLE
// SetAchievement ( ACH_FORT ) ;
 490: LD_STRING ACH_FORT
 492: PPUSH
 493: CALL_OW 543
 497: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 498: LD_INT 22
 500: PUSH
 501: LD_INT 0
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: PUSH
 508: LD_INT 25
 510: PUSH
 511: LD_INT 12
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: LD_INT 0
 529: EQUAL
 530: IFFALSE 542
 532: GO 534
 534: DISABLE
// SetAchievement ( ACH_APE ) ;
 535: LD_STRING ACH_APE
 537: PPUSH
 538: CALL_OW 543
 542: END
// every 0 0$1 trigger destroyCounter >= 20 do
 543: LD_EXP 17
 547: PUSH
 548: LD_INT 20
 550: GREATEREQUAL
 551: IFFALSE 563
 553: GO 555
 555: DISABLE
// SetAchievement ( ACH_DOUBLE ) ; end_of_file
 556: LD_STRING ACH_DOUBLE
 558: PPUSH
 559: CALL_OW 543
 563: END
// export function PrepareHero ; begin
 564: LD_INT 0
 566: PPUSH
// uc_side = 1 ;
 567: LD_ADDR_OWVAR 20
 571: PUSH
 572: LD_INT 1
 574: ST_TO_ADDR
// uc_nation = 1 ;
 575: LD_ADDR_OWVAR 21
 579: PUSH
 580: LD_INT 1
 582: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 13f_ ) ;
 583: LD_ADDR_EXP 1
 587: PUSH
 588: LD_STRING JMM
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_STRING 13f_
 596: PPUSH
 597: CALL 27968 0 3
 601: ST_TO_ADDR
// if debugMode then
 602: LD_EXP 16
 606: IFFALSE 621
// JMM := NewCharacter ( JMM ) ;
 608: LD_ADDR_EXP 1
 612: PUSH
 613: LD_STRING JMM
 615: PPUSH
 616: CALL_OW 25
 620: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 621: LD_EXP 1
 625: PPUSH
 626: LD_INT 95
 628: PPUSH
 629: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 633: LD_EXP 1
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ,  ) ;
 645: LD_ADDR_EXP 5
 649: PUSH
 650: LD_STRING Powell
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: LD_STRING 
 658: PPUSH
 659: CALL 27968 0 3
 663: ST_TO_ADDR
// uc_side = 4 ;
 664: LD_ADDR_OWVAR 20
 668: PUSH
 669: LD_INT 4
 671: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 10c_ ) ;
 672: LD_ADDR_EXP 2
 676: PUSH
 677: LD_STRING Joan
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_STRING 10c_
 685: PPUSH
 686: CALL 27968 0 3
 690: ST_TO_ADDR
// if Joan then
 691: LD_EXP 2
 695: IFFALSE 734
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 697: LD_EXP 2
 701: PPUSH
 702: LD_INT 4
 704: PPUSH
 705: LD_INT 0
 707: PPUSH
 708: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 712: LD_EXP 2
 716: PPUSH
 717: LD_INT 4
 719: PPUSH
 720: CALL_OW 336
// JMMGirl = 1 ;
 724: LD_ADDR_EXP 7
 728: PUSH
 729: LD_INT 1
 731: ST_TO_ADDR
// end else
 732: GO 794
// begin Lisa = PrepareUnit ( Lisa , true , 13s_ ) ;
 734: LD_ADDR_EXP 3
 738: PUSH
 739: LD_STRING Lisa
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_STRING 13s_
 747: PPUSH
 748: CALL 27968 0 3
 752: ST_TO_ADDR
// if Lisa then
 753: LD_EXP 3
 757: IFFALSE 794
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 759: LD_EXP 3
 763: PPUSH
 764: LD_INT 4
 766: PPUSH
 767: LD_INT 0
 769: PPUSH
 770: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 774: LD_EXP 3
 778: PPUSH
 779: LD_INT 1
 781: PPUSH
 782: CALL_OW 336
// JMMGirl = 2 ;
 786: LD_ADDR_EXP 7
 790: PUSH
 791: LD_INT 2
 793: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 794: LD_EXP 2
 798: NOT
 799: PUSH
 800: LD_EXP 3
 804: NOT
 805: AND
 806: IFFALSE 856
// begin Connie = NewCharacter ( Coonie ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Coonie
 815: PPUSH
 816: CALL_OW 25
 820: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 821: LD_EXP 4
 825: PPUSH
 826: LD_INT 4
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 836: LD_EXP 4
 840: PPUSH
 841: LD_INT 3
 843: PPUSH
 844: CALL_OW 336
// JMMGirl = 3 ;
 848: LD_ADDR_EXP 7
 852: PUSH
 853: LD_INT 3
 855: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 856: LD_EXP 2
 860: PUSH
 861: LD_EXP 3
 865: PUSH
 866: LD_EXP 4
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: PPUSH
 876: CALL_OW 140
// end ;
 880: LD_VAR 0 1
 884: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 885: LD_INT 0
 887: PPUSH
 888: PPUSH
 889: PPUSH
// for i = 1 to 5 do
 890: LD_ADDR_VAR 0 2
 894: PUSH
 895: DOUBLE
 896: LD_INT 1
 898: DEC
 899: ST_TO_ADDR
 900: LD_INT 5
 902: PUSH
 903: FOR_TO
 904: IFFALSE 1063
// begin vc_engine = rand ( 1 , 3 ) ;
 906: LD_ADDR_OWVAR 39
 910: PUSH
 911: LD_INT 1
 913: PPUSH
 914: LD_INT 3
 916: PPUSH
 917: CALL_OW 12
 921: ST_TO_ADDR
// vc_control = control_remote ;
 922: LD_ADDR_OWVAR 38
 926: PUSH
 927: LD_INT 2
 929: ST_TO_ADDR
// vc_weapon = [ us_double_gun , us_cargo_bay , us_crane , us_rocket_launcher ] [ i mod 4 + 1 ] ;
 930: LD_ADDR_OWVAR 40
 934: PUSH
 935: LD_INT 5
 937: PUSH
 938: LD_INT 12
 940: PUSH
 941: LD_INT 13
 943: PUSH
 944: LD_INT 7
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_VAR 0 2
 957: PUSH
 958: LD_INT 4
 960: MOD
 961: PUSH
 962: LD_INT 1
 964: PLUS
 965: ARRAY
 966: ST_TO_ADDR
// vc_chassis = [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] ;
 967: LD_ADDR_OWVAR 37
 971: PUSH
 972: LD_INT 3
 974: PUSH
 975: LD_INT 2
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_VAR 0 2
 986: PUSH
 987: LD_INT 2
 989: MOD
 990: PUSH
 991: LD_INT 1
 993: PLUS
 994: ARRAY
 995: ST_TO_ADDR
// veh = CreateVehicle ;
 996: LD_ADDR_VAR 0 3
1000: PUSH
1001: CALL_OW 45
1005: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1006: LD_VAR 0 3
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: LD_INT 5
1016: PPUSH
1017: CALL_OW 12
1021: PPUSH
1022: CALL_OW 233
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
1026: LD_VAR 0 3
1030: PPUSH
1031: LD_INT 500
1033: PPUSH
1034: LD_INT 1000
1036: PPUSH
1037: CALL_OW 12
1041: PPUSH
1042: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
1046: LD_VAR 0 3
1050: PPUSH
1051: LD_INT 15
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ;
1061: GO 903
1063: POP
1064: POP
// end ; end_of_file
1065: LD_VAR 0 1
1069: RET
// export function PrepareCommander ; begin
1070: LD_INT 0
1072: PPUSH
// uc_side = 3 ;
1073: LD_ADDR_OWVAR 20
1077: PUSH
1078: LD_INT 3
1080: ST_TO_ADDR
// uc_nation = 3 ;
1081: LD_ADDR_OWVAR 21
1085: PUSH
1086: LD_INT 3
1088: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ,  ) ;
1089: LD_ADDR_EXP 6
1093: PUSH
1094: LD_STRING Eisenstein
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: LD_STRING 
1102: PPUSH
1103: CALL 27968 0 3
1107: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
1108: LD_EXP 6
1112: PPUSH
1113: LD_INT 11
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: CALL_OW 49
// end ;
1123: LD_VAR 0 1
1127: RET
// export baseGuard ; export function PrepareRussianBase ; begin
1128: LD_INT 0
1130: PPUSH
// uc_nation := 3 ;
1131: LD_ADDR_OWVAR 21
1135: PUSH
1136: LD_INT 3
1138: ST_TO_ADDR
// uc_side := 3 ;
1139: LD_ADDR_OWVAR 20
1143: PUSH
1144: LD_INT 3
1146: ST_TO_ADDR
// if Difficulty > 1 then
1147: LD_OWVAR 67
1151: PUSH
1152: LD_INT 1
1154: GREATER
1155: IFFALSE 1219
// begin PrepareHuman ( sex_male , 1 , [ 8 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1157: LD_INT 1
1159: PPUSH
1160: LD_INT 1
1162: PPUSH
1163: LD_INT 8
1165: PUSH
1166: LD_INT 8
1168: PUSH
1169: LD_INT 9
1171: PUSH
1172: LD_INT 10
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: PUSH
1181: LD_OWVAR 67
1185: ARRAY
1186: PPUSH
1187: CALL_OW 380
// baseGuard := CreateHuman ;
1191: LD_ADDR_EXP 18
1195: PUSH
1196: CALL_OW 44
1200: ST_TO_ADDR
// PlaceUnitXY ( baseGuard , 39 , 67 , false ) ;
1201: LD_EXP 18
1205: PPUSH
1206: LD_INT 39
1208: PPUSH
1209: LD_INT 67
1211: PPUSH
1212: LD_INT 0
1214: PPUSH
1215: CALL_OW 48
// end ; TeleportExit ( ruTeleport , 50 , 74 ) ;
1219: LD_INT 116
1221: PPUSH
1222: LD_INT 50
1224: PPUSH
1225: LD_INT 74
1227: PPUSH
1228: CALL_OW 243
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
1232: LD_INT 3
1234: PPUSH
1235: LD_INT 3
1237: PPUSH
1238: LD_INT 45
1240: PPUSH
1241: LD_INT 10
1243: PPUSH
1244: LD_INT 9
1246: PPUSH
1247: LD_INT 2
1249: PPUSH
1250: CALL 1672 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
1254: LD_INT 3
1256: PPUSH
1257: LD_INT 3
1259: PPUSH
1260: LD_INT 22
1262: PPUSH
1263: LD_INT 10
1265: PPUSH
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 2
1271: PPUSH
1272: CALL 1672 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
1276: LD_INT 3
1278: PPUSH
1279: LD_INT 3
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: LD_INT 10
1287: PPUSH
1288: LD_INT 3
1290: PPUSH
1291: LD_INT 3
1293: PPUSH
1294: CALL 1672 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1298: LD_INT 3
1300: PPUSH
1301: LD_INT 3
1303: PPUSH
1304: LD_INT 40
1306: PPUSH
1307: LD_INT 10
1309: PPUSH
1310: LD_INT 3
1312: PPUSH
1313: LD_INT 3
1315: PPUSH
1316: CALL 1672 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1320: LD_INT 3
1322: PPUSH
1323: LD_INT 3
1325: PPUSH
1326: LD_INT 14
1328: PPUSH
1329: LD_INT 10
1331: PPUSH
1332: LD_INT 4
1334: PPUSH
1335: LD_INT 1
1337: PPUSH
1338: CALL 1672 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1342: LD_INT 3
1344: PPUSH
1345: LD_INT 3
1347: PPUSH
1348: LD_INT 15
1350: PPUSH
1351: LD_INT 10
1353: PPUSH
1354: LD_INT 4
1356: PPUSH
1357: LD_INT 2
1359: PPUSH
1360: CALL 1672 0 6
// SetResourceType ( GetBase ( ru_depot ) , mat_cans , [ 3500 , 4500 , 6000 , 9000 ] [ Difficulty ] ) ;
1364: LD_INT 22
1366: PPUSH
1367: CALL_OW 274
1371: PPUSH
1372: LD_INT 1
1374: PPUSH
1375: LD_INT 3500
1377: PUSH
1378: LD_INT 4500
1380: PUSH
1381: LD_INT 6000
1383: PUSH
1384: LD_INT 9000
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_OWVAR 67
1397: ARRAY
1398: PPUSH
1399: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_oil , [ 500 , 1000 , 2000 , 3000 ] [ Difficulty ] ) ;
1403: LD_INT 22
1405: PPUSH
1406: CALL_OW 274
1410: PPUSH
1411: LD_INT 2
1413: PPUSH
1414: LD_INT 500
1416: PUSH
1417: LD_INT 1000
1419: PUSH
1420: LD_INT 2000
1422: PUSH
1423: LD_INT 3000
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: PUSH
1432: LD_OWVAR 67
1436: ARRAY
1437: PPUSH
1438: CALL_OW 277
// SetResourceType ( GetBase ( ru_depot ) , mat_siberit , [ 150 , 250 , 300 , 450 ] [ Difficulty ] ) ;
1442: LD_INT 22
1444: PPUSH
1445: CALL_OW 274
1449: PPUSH
1450: LD_INT 3
1452: PPUSH
1453: LD_INT 150
1455: PUSH
1456: LD_INT 250
1458: PUSH
1459: LD_INT 300
1461: PUSH
1462: LD_INT 450
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: PUSH
1471: LD_OWVAR 67
1475: ARRAY
1476: PPUSH
1477: CALL_OW 277
// end ; end_of_file
1481: LD_VAR 0 1
1485: RET
// export function CreateNature ; var i ; begin
1486: LD_INT 0
1488: PPUSH
1489: PPUSH
// uc_side := 0 ;
1490: LD_ADDR_OWVAR 20
1494: PUSH
1495: LD_INT 0
1497: ST_TO_ADDR
// uc_nation := 0 ;
1498: LD_ADDR_OWVAR 21
1502: PUSH
1503: LD_INT 0
1505: ST_TO_ADDR
// hc_class := class_apeman ;
1506: LD_ADDR_OWVAR 28
1510: PUSH
1511: LD_INT 12
1513: ST_TO_ADDR
// hc_gallery :=  ;
1514: LD_ADDR_OWVAR 33
1518: PUSH
1519: LD_STRING 
1521: ST_TO_ADDR
// hc_name :=  ;
1522: LD_ADDR_OWVAR 26
1526: PUSH
1527: LD_STRING 
1529: ST_TO_ADDR
// for i = 1 to 7 do
1530: LD_ADDR_VAR 0 2
1534: PUSH
1535: DOUBLE
1536: LD_INT 1
1538: DEC
1539: ST_TO_ADDR
1540: LD_INT 7
1542: PUSH
1543: FOR_TO
1544: IFFALSE 1625
// begin hc_class := class_apeman ;
1546: LD_ADDR_OWVAR 28
1550: PUSH
1551: LD_INT 12
1553: ST_TO_ADDR
// hc_gallery :=  ;
1554: LD_ADDR_OWVAR 33
1558: PUSH
1559: LD_STRING 
1561: ST_TO_ADDR
// hc_name :=  ;
1562: LD_ADDR_OWVAR 26
1566: PUSH
1567: LD_STRING 
1569: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
1570: LD_ADDR_OWVAR 31
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 0
1580: PUSH
1581: LD_INT 0
1583: PUSH
1584: LD_INT 0
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1593: LD_ADDR_OWVAR 29
1597: PUSH
1598: LD_INT 11
1600: PUSH
1601: LD_INT 10
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , apeSpawn , false ) ;
1608: CALL_OW 44
1612: PPUSH
1613: LD_INT 16
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: CALL_OW 49
// end ;
1623: GO 1543
1625: POP
1626: POP
// end ;
1627: LD_VAR 0 1
1631: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1632: LD_INT 0
1634: PPUSH
1635: PPUSH
// for i in charactersList do
1636: LD_ADDR_VAR 0 4
1640: PUSH
1641: LD_VAR 0 1
1645: PUSH
1646: FOR_IN
1647: IFFALSE 1665
// SaveCharacters ( i , ident ) ;
1649: LD_VAR 0 4
1653: PPUSH
1654: LD_VAR 0 2
1658: PPUSH
1659: CALL_OW 38
1663: GO 1646
1665: POP
1666: POP
// end ;
1667: LD_VAR 0 3
1671: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1672: LD_INT 0
1674: PPUSH
1675: PPUSH
1676: PPUSH
1677: PPUSH
// for i = 1 to count do
1678: LD_ADDR_VAR 0 8
1682: PUSH
1683: DOUBLE
1684: LD_INT 1
1686: DEC
1687: ST_TO_ADDR
1688: LD_VAR 0 6
1692: PUSH
1693: FOR_TO
1694: IFFALSE 1775
// begin uc_side = side ;
1696: LD_ADDR_OWVAR 20
1700: PUSH
1701: LD_VAR 0 1
1705: ST_TO_ADDR
// uc_nation = nation ;
1706: LD_ADDR_OWVAR 21
1710: PUSH
1711: LD_VAR 0 2
1715: ST_TO_ADDR
// hc_gallery =  ;
1716: LD_ADDR_OWVAR 33
1720: PUSH
1721: LD_STRING 
1723: ST_TO_ADDR
// hc_name =  ;
1724: LD_ADDR_OWVAR 26
1728: PUSH
1729: LD_STRING 
1731: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1732: LD_INT 0
1734: PPUSH
1735: LD_VAR 0 5
1739: PPUSH
1740: LD_VAR 0 4
1744: PPUSH
1745: CALL_OW 380
// un = CreateHuman ;
1749: LD_ADDR_VAR 0 10
1753: PUSH
1754: CALL_OW 44
1758: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1759: LD_VAR 0 10
1763: PPUSH
1764: LD_VAR 0 3
1768: PPUSH
1769: CALL_OW 52
// end ;
1773: GO 1693
1775: POP
1776: POP
// end ;
1777: LD_VAR 0 7
1781: RET
// export function PrepareDifficulty ; begin
1782: LD_INT 0
1784: PPUSH
// if difficulty = 1 then
1785: LD_OWVAR 67
1789: PUSH
1790: LD_INT 1
1792: EQUAL
1793: IFFALSE 1873
// begin SetTech ( 57 , 3 , state_disabled ) ;
1795: LD_INT 57
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 0
1803: PPUSH
1804: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1808: LD_INT 58
1810: PPUSH
1811: LD_INT 3
1813: PPUSH
1814: LD_INT 0
1816: PPUSH
1817: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1821: LD_INT 59
1823: PPUSH
1824: LD_INT 3
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1834: LD_INT 51
1836: PPUSH
1837: LD_INT 3
1839: PPUSH
1840: LD_INT 0
1842: PPUSH
1843: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1847: LD_INT 52
1849: PPUSH
1850: LD_INT 3
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1860: LD_INT 53
1862: PPUSH
1863: LD_INT 3
1865: PPUSH
1866: LD_INT 0
1868: PPUSH
1869: CALL_OW 322
// end ; if difficulty = 2 then
1873: LD_OWVAR 67
1877: PUSH
1878: LD_INT 2
1880: EQUAL
1881: IFFALSE 1961
// begin SetTech ( 57 , 3 , state_enabled ) ;
1883: LD_INT 57
1885: PPUSH
1886: LD_INT 3
1888: PPUSH
1889: LD_INT 1
1891: PPUSH
1892: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1896: LD_INT 58
1898: PPUSH
1899: LD_INT 3
1901: PPUSH
1902: LD_INT 0
1904: PPUSH
1905: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1909: LD_INT 59
1911: PPUSH
1912: LD_INT 3
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1922: LD_INT 51
1924: PPUSH
1925: LD_INT 3
1927: PPUSH
1928: LD_INT 1
1930: PPUSH
1931: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1935: LD_INT 52
1937: PPUSH
1938: LD_INT 3
1940: PPUSH
1941: LD_INT 0
1943: PPUSH
1944: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1948: LD_INT 53
1950: PPUSH
1951: LD_INT 3
1953: PPUSH
1954: LD_INT 0
1956: PPUSH
1957: CALL_OW 322
// end ; if difficulty >= 3 then
1961: LD_OWVAR 67
1965: PUSH
1966: LD_INT 3
1968: GREATEREQUAL
1969: IFFALSE 2049
// begin SetTech ( 57 , 3 , state_enabled ) ;
1971: LD_INT 57
1973: PPUSH
1974: LD_INT 3
1976: PPUSH
1977: LD_INT 1
1979: PPUSH
1980: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1984: LD_INT 58
1986: PPUSH
1987: LD_INT 3
1989: PPUSH
1990: LD_INT 1
1992: PPUSH
1993: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
1997: LD_INT 59
1999: PPUSH
2000: LD_INT 3
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
2010: LD_INT 51
2012: PPUSH
2013: LD_INT 3
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
2023: LD_INT 52
2025: PPUSH
2026: LD_INT 3
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
2036: LD_INT 53
2038: PPUSH
2039: LD_INT 3
2041: PPUSH
2042: LD_INT 1
2044: PPUSH
2045: CALL_OW 322
// end ; end ;
2049: LD_VAR 0 1
2053: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
2054: LD_INT 0
2056: PPUSH
2057: PPUSH
2058: PPUSH
2059: PPUSH
2060: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
2061: LD_ADDR_VAR 0 8
2065: PUSH
2066: LD_INT 48
2068: PUSH
2069: LD_INT 49
2071: PUSH
2072: LD_INT 50
2074: PUSH
2075: LD_INT 20
2077: PUSH
2078: LD_INT 1
2080: PUSH
2081: LD_INT 69
2083: PUSH
2084: LD_INT 39
2086: PUSH
2087: LD_INT 34
2089: PUSH
2090: LD_INT 40
2092: PUSH
2093: LD_INT 71
2095: PUSH
2096: LD_INT 57
2098: PUSH
2099: LD_INT 58
2101: PUSH
2102: LD_INT 44
2104: PUSH
2105: LD_INT 32
2107: PUSH
2108: LD_INT 27
2110: PUSH
2111: LD_INT 23
2113: PUSH
2114: LD_INT 33
2116: PUSH
2117: LD_INT 54
2119: PUSH
2120: LD_INT 55
2122: PUSH
2123: LD_INT 56
2125: PUSH
2126: LD_INT 63
2128: PUSH
2129: LD_INT 64
2131: PUSH
2132: LD_INT 65
2134: PUSH
2135: LD_INT 30
2137: PUSH
2138: LD_INT 31
2140: PUSH
2141: LD_INT 21
2143: PUSH
2144: LD_INT 22
2146: PUSH
2147: LD_INT 25
2149: PUSH
2150: LD_INT 51
2152: PUSH
2153: LD_INT 52
2155: PUSH
2156: LD_INT 59
2158: PUSH
2159: LD_INT 53
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: ST_TO_ADDR
// for i = 1 to ru_tech_list do
2196: LD_ADDR_VAR 0 5
2200: PUSH
2201: DOUBLE
2202: LD_INT 1
2204: DEC
2205: ST_TO_ADDR
2206: LD_VAR 0 8
2210: PUSH
2211: FOR_TO
2212: IFFALSE 2288
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
2214: LD_VAR 0 8
2218: PUSH
2219: LD_VAR 0 5
2223: ARRAY
2224: PPUSH
2225: LD_VAR 0 1
2229: PPUSH
2230: CALL_OW 321
2234: PUSH
2235: LD_INT 1
2237: EQUAL
2238: PUSH
2239: LD_VAR 0 8
2243: PUSH
2244: LD_VAR 0 5
2248: ARRAY
2249: PPUSH
2250: LD_VAR 0 3
2254: PPUSH
2255: CALL_OW 482
2259: PUSH
2260: LD_INT 1
2262: EQUAL
2263: AND
2264: IFFALSE 2286
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
2266: LD_VAR 0 2
2270: PPUSH
2271: LD_VAR 0 8
2275: PUSH
2276: LD_VAR 0 5
2280: ARRAY
2281: PPUSH
2282: CALL_OW 184
2286: GO 2211
2288: POP
2289: POP
// end ;
2290: LD_VAR 0 4
2294: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
2295: LD_INT 0
2297: PPUSH
2298: PPUSH
2299: PPUSH
2300: PPUSH
2301: PPUSH
2302: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
2303: LD_ADDR_VAR 0 8
2307: PUSH
2308: LD_VAR 0 2
2312: PPUSH
2313: CALL_OW 313
2317: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
2318: LD_ADDR_VAR 0 9
2322: PUSH
2323: LD_VAR 0 3
2327: PPUSH
2328: LD_INT 22
2330: PUSH
2331: LD_VAR 0 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 25
2342: PUSH
2343: LD_INT 2
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 24
2352: PUSH
2353: LD_INT 750
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: PUSH
2360: LD_INT 3
2362: PUSH
2363: LD_INT 54
2365: PUSH
2366: EMPTY
2367: LIST
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 70
2383: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
2384: LD_ADDR_VAR 0 6
2388: PUSH
2389: LD_VAR 0 3
2393: PPUSH
2394: LD_INT 22
2396: PUSH
2397: LD_VAR 0 1
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 21
2408: PUSH
2409: LD_INT 3
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PUSH
2416: LD_INT 3
2418: PUSH
2419: LD_INT 24
2421: PUSH
2422: LD_INT 1000
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: PPUSH
2441: CALL_OW 70
2445: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
2446: LD_VAR 0 6
2450: NOT
2451: PUSH
2452: LD_INT 22
2454: PUSH
2455: LD_VAR 0 1
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PUSH
2464: LD_INT 25
2466: PUSH
2467: LD_INT 2
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PUSH
2474: LD_INT 24
2476: PUSH
2477: LD_INT 250
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PPUSH
2489: CALL_OW 69
2493: NOT
2494: AND
2495: IFFALSE 2499
// exit ;
2497: GO 2681
// if buildings_list > 0 and engineerOkInside then
2499: LD_VAR 0 6
2503: PUSH
2504: LD_INT 0
2506: GREATER
2507: PUSH
2508: LD_VAR 0 8
2512: AND
2513: IFFALSE 2524
// ComExitBuilding ( engineerOkInside ) ;
2515: LD_VAR 0 8
2519: PPUSH
2520: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2524: LD_VAR 0 6
2528: PUSH
2529: LD_INT 0
2531: GREATER
2532: PUSH
2533: LD_VAR 0 9
2537: PUSH
2538: LD_INT 0
2540: GREATER
2541: AND
2542: IFFALSE 2562
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2544: LD_VAR 0 9
2548: PPUSH
2549: LD_VAR 0 6
2553: PUSH
2554: LD_INT 1
2556: ARRAY
2557: PPUSH
2558: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2562: LD_VAR 0 6
2566: PUSH
2567: LD_INT 0
2569: EQUAL
2570: PUSH
2571: LD_VAR 0 4
2575: PUSH
2576: LD_INT 0
2578: EQUAL
2579: AND
2580: PUSH
2581: LD_VAR 0 9
2585: PUSH
2586: LD_INT 0
2588: GREATER
2589: AND
2590: IFFALSE 2606
// ComEnterUnit ( engineerOkOutside , building ) ;
2592: LD_VAR 0 9
2596: PPUSH
2597: LD_VAR 0 2
2601: PPUSH
2602: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2606: LD_VAR 0 9
2610: PUSH
2611: LD_INT 0
2613: GREATER
2614: PUSH
2615: LD_VAR 0 6
2619: PUSH
2620: LD_INT 0
2622: EQUAL
2623: AND
2624: PUSH
2625: LD_VAR 0 4
2629: PUSH
2630: LD_INT 0
2632: GREATER
2633: AND
2634: IFFALSE 2681
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2636: LD_VAR 0 9
2640: PPUSH
2641: LD_VAR 0 4
2645: PUSH
2646: LD_INT 1
2648: ARRAY
2649: PPUSH
2650: LD_VAR 0 4
2654: PUSH
2655: LD_INT 2
2657: ARRAY
2658: PPUSH
2659: LD_VAR 0 4
2663: PUSH
2664: LD_INT 3
2666: ARRAY
2667: PPUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_INT 4
2675: ARRAY
2676: PPUSH
2677: CALL_OW 145
// end ;
2681: LD_VAR 0 5
2685: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2686: LD_INT 0
2688: PPUSH
2689: PPUSH
2690: PPUSH
2691: PPUSH
2692: PPUSH
2693: PPUSH
2694: PPUSH
2695: PPUSH
2696: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2697: LD_ADDR_VAR 0 6
2701: PUSH
2702: LD_INT 22
2704: PUSH
2705: LD_VAR 0 1
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: PUSH
2714: LD_INT 25
2716: PUSH
2717: LD_INT 4
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 23
2726: PUSH
2727: LD_INT 2
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: LD_INT 24
2736: PUSH
2737: LD_INT 251
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: PPUSH
2750: CALL_OW 69
2754: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2755: LD_ADDR_VAR 0 7
2759: PUSH
2760: LD_VAR 0 3
2764: PPUSH
2765: LD_INT 22
2767: PUSH
2768: LD_VAR 0 1
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: LD_INT 23
2779: PUSH
2780: LD_INT 2
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 25
2789: PUSH
2790: LD_INT 4
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: LD_INT 50
2799: PUSH
2800: EMPTY
2801: LIST
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: PPUSH
2809: CALL_OW 70
2813: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2814: LD_ADDR_VAR 0 10
2818: PUSH
2819: LD_VAR 0 3
2823: PPUSH
2824: LD_INT 22
2826: PUSH
2827: LD_VAR 0 1
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PUSH
2836: LD_INT 21
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 3
2848: PUSH
2849: LD_INT 25
2851: PUSH
2852: LD_INT 3
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: PUSH
2863: LD_INT 3
2865: PUSH
2866: LD_INT 24
2868: PUSH
2869: LD_INT 750
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: PPUSH
2886: CALL_OW 70
2890: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2891: LD_ADDR_VAR 0 11
2895: PUSH
2896: LD_VAR 0 2
2900: PPUSH
2901: LD_INT 22
2903: PUSH
2904: LD_VAR 0 1
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 21
2915: PUSH
2916: LD_INT 1
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 25
2928: PUSH
2929: LD_INT 3
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: LD_INT 24
2945: PUSH
2946: LD_INT 1000
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: PPUSH
2963: CALL_OW 70
2967: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2968: LD_VAR 0 10
2972: NOT
2973: PUSH
2974: LD_VAR 0 11
2978: NOT
2979: AND
2980: PUSH
2981: LD_VAR 0 6
2985: NOT
2986: AND
2987: IFFALSE 2991
// exit ;
2989: GO 3225
// if damageUnits > 0 and sci_list > 0 then
2991: LD_VAR 0 10
2995: PUSH
2996: LD_INT 0
2998: GREATER
2999: PUSH
3000: LD_VAR 0 6
3004: PUSH
3005: LD_INT 0
3007: GREATER
3008: AND
3009: IFFALSE 3025
// ComMoveToArea ( damageUnits , healArea ) ;
3011: LD_VAR 0 10
3015: PPUSH
3016: LD_VAR 0 2
3020: PPUSH
3021: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
3025: LD_VAR 0 11
3029: PUSH
3030: LD_INT 0
3032: GREATER
3033: PUSH
3034: LD_VAR 0 6
3038: PUSH
3039: LD_INT 0
3041: GREATER
3042: AND
3043: IFFALSE 3054
// ComExitBuilding ( sci_list ) ;
3045: LD_VAR 0 6
3049: PPUSH
3050: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
3054: LD_VAR 0 11
3058: PUSH
3059: LD_INT 0
3061: GREATER
3062: PUSH
3063: LD_VAR 0 7
3067: PUSH
3068: LD_INT 0
3070: GREATER
3071: AND
3072: IFFALSE 3092
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
3074: LD_VAR 0 7
3078: PPUSH
3079: LD_VAR 0 11
3083: PUSH
3084: LD_INT 1
3086: ARRAY
3087: PPUSH
3088: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
3092: LD_VAR 0 10
3096: PUSH
3097: LD_INT 0
3099: EQUAL
3100: PUSH
3101: LD_VAR 0 11
3105: PUSH
3106: LD_INT 0
3108: EQUAL
3109: AND
3110: PUSH
3111: LD_VAR 0 7
3115: PUSH
3116: LD_INT 0
3118: GREATER
3119: AND
3120: IFFALSE 3225
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
3122: LD_ADDR_VAR 0 12
3126: PUSH
3127: LD_INT 22
3129: PUSH
3130: LD_VAR 0 1
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: PUSH
3139: LD_INT 21
3141: PUSH
3142: LD_INT 3
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PUSH
3149: LD_INT 30
3151: PUSH
3152: LD_INT 8
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: LIST
3163: PPUSH
3164: CALL_OW 69
3168: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
3169: LD_ADDR_VAR 0 13
3173: PUSH
3174: LD_INT 1
3176: PPUSH
3177: LD_VAR 0 12
3181: PPUSH
3182: CALL_OW 12
3186: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
3187: LD_VAR 0 7
3191: PPUSH
3192: LD_INT 3
3194: PUSH
3195: LD_INT 60
3197: PUSH
3198: EMPTY
3199: LIST
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PPUSH
3205: CALL_OW 72
3209: PPUSH
3210: LD_VAR 0 12
3214: PUSH
3215: LD_VAR 0 13
3219: ARRAY
3220: PPUSH
3221: CALL_OW 120
// end ; end ;
3225: LD_VAR 0 5
3229: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
3230: LD_INT 0
3232: PPUSH
3233: PPUSH
3234: PPUSH
3235: PPUSH
// tmpTab = [ ] ;
3236: LD_ADDR_VAR 0 6
3240: PUSH
3241: EMPTY
3242: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
3243: LD_INT 22
3245: PUSH
3246: LD_VAR 0 1
3250: PUSH
3251: EMPTY
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 30
3257: PUSH
3258: LD_INT 32
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: PUSH
3274: LD_INT 0
3276: GREATER
3277: IFFALSE 3360
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
3279: LD_ADDR_VAR 0 4
3283: PUSH
3284: LD_INT 22
3286: PUSH
3287: LD_VAR 0 1
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: PUSH
3296: LD_INT 30
3298: PUSH
3299: LD_INT 32
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PPUSH
3310: CALL_OW 69
3314: PUSH
3315: FOR_IN
3316: IFFALSE 3358
// begin for j in UnitsInside ( i ) do
3318: LD_ADDR_VAR 0 5
3322: PUSH
3323: LD_VAR 0 4
3327: PPUSH
3328: CALL_OW 313
3332: PUSH
3333: FOR_IN
3334: IFFALSE 3354
// tmpTab = tmpTab ^ j ;
3336: LD_ADDR_VAR 0 6
3340: PUSH
3341: LD_VAR 0 6
3345: PUSH
3346: LD_VAR 0 5
3350: ADD
3351: ST_TO_ADDR
3352: GO 3333
3354: POP
3355: POP
// end ;
3356: GO 3315
3358: POP
3359: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
3360: LD_VAR 0 6
3364: PPUSH
3365: LD_VAR 0 2
3369: PPUSH
3370: CALL_OW 250
3374: PPUSH
3375: LD_VAR 0 2
3379: PPUSH
3380: CALL_OW 251
3384: PPUSH
3385: CALL_OW 114
// end ;
3389: LD_VAR 0 3
3393: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
3394: LD_INT 0
3396: PPUSH
3397: PPUSH
3398: PPUSH
3399: PPUSH
// enable ;
3400: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
3401: LD_ADDR_VAR 0 7
3405: PUSH
3406: LD_VAR 0 3
3410: PPUSH
3411: CALL_OW 435
3415: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
3416: LD_ADDR_VAR 0 6
3420: PUSH
3421: LD_INT 22
3423: PUSH
3424: LD_VAR 0 1
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: PUSH
3433: LD_INT 34
3435: PUSH
3436: LD_VAR 0 2
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PPUSH
3449: CALL_OW 69
3453: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
3454: LD_VAR 0 6
3458: PUSH
3459: LD_INT 0
3461: GREATER
3462: PUSH
3463: LD_VAR 0 3
3467: PPUSH
3468: CALL_OW 435
3472: AND
3473: PUSH
3474: LD_VAR 0 7
3478: PUSH
3479: LD_INT 0
3481: GREATER
3482: AND
3483: IFFALSE 3532
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
3485: LD_VAR 0 6
3489: PUSH
3490: LD_INT 1
3492: ARRAY
3493: PPUSH
3494: LD_VAR 0 7
3498: PUSH
3499: LD_INT 1
3501: ARRAY
3502: PPUSH
3503: LD_VAR 0 7
3507: PUSH
3508: LD_INT 2
3510: ARRAY
3511: PPUSH
3512: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3516: LD_VAR 0 6
3520: PUSH
3521: LD_INT 1
3523: ARRAY
3524: PPUSH
3525: LD_INT 100
3527: PPUSH
3528: CALL_OW 240
// end ; end ;
3532: LD_VAR 0 4
3536: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3537: LD_INT 0
3539: PPUSH
3540: PPUSH
// for i = 1 to vehCount do
3541: LD_ADDR_VAR 0 9
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_VAR 0 3
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3604
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3559: LD_VAR 0 2
3563: PPUSH
3564: LD_VAR 0 7
3568: PPUSH
3569: LD_VAR 0 5
3573: PPUSH
3574: LD_VAR 0 6
3578: PPUSH
3579: LD_VAR 0 4
3583: PUSH
3584: LD_INT 1
3586: PPUSH
3587: LD_VAR 0 4
3591: PPUSH
3592: CALL_OW 12
3596: ARRAY
3597: PPUSH
3598: CALL_OW 185
3602: GO 3556
3604: POP
3605: POP
// end ;
3606: LD_VAR 0 8
3610: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3611: LD_INT 0
3613: PPUSH
3614: PPUSH
3615: PPUSH
3616: PPUSH
3617: PPUSH
3618: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3619: LD_ADDR_VAR 0 6
3623: PUSH
3624: LD_INT 22
3626: PUSH
3627: LD_VAR 0 1
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: PUSH
3636: LD_INT 25
3638: PUSH
3639: LD_INT 9
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PPUSH
3650: CALL_OW 69
3654: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3655: LD_ADDR_VAR 0 7
3659: PUSH
3660: LD_INT 81
3662: PUSH
3663: LD_VAR 0 1
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 3
3674: PUSH
3675: LD_INT 21
3677: PUSH
3678: LD_INT 3
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PPUSH
3693: CALL_OW 69
3697: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3698: LD_ADDR_VAR 0 4
3702: PUSH
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 3
3708: PPUSH
3709: CALL_OW 12
3713: ST_TO_ADDR
// for i = 1 to list do
3714: LD_ADDR_VAR 0 5
3718: PUSH
3719: DOUBLE
3720: LD_INT 1
3722: DEC
3723: ST_TO_ADDR
3724: LD_VAR 0 6
3728: PUSH
3729: FOR_TO
3730: IFFALSE 3932
// for ta in filter do
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: LD_VAR 0 7
3741: PUSH
3742: FOR_IN
3743: IFFALSE 3928
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3745: LD_VAR 0 6
3749: PUSH
3750: LD_VAR 0 5
3754: ARRAY
3755: PPUSH
3756: LD_VAR 0 3
3760: PPUSH
3761: CALL_OW 296
3765: PUSH
3766: LD_INT 15
3768: LESSEQUAL
3769: IFFALSE 3926
// begin case c of 1 :
3771: LD_VAR 0 4
3775: PUSH
3776: LD_INT 1
3778: DOUBLE
3779: EQUAL
3780: IFTRUE 3784
3782: GO 3822
3784: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3785: LD_VAR 0 6
3789: PUSH
3790: LD_VAR 0 5
3794: ARRAY
3795: PPUSH
3796: LD_VAR 0 3
3800: PPUSH
3801: CALL_OW 250
3805: PPUSH
3806: LD_VAR 0 3
3810: PPUSH
3811: CALL_OW 251
3815: PPUSH
3816: CALL_OW 154
3820: GO 3926
3822: LD_INT 2
3824: DOUBLE
3825: EQUAL
3826: IFTRUE 3830
3828: GO 3894
3830: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3831: LD_VAR 0 6
3835: PUSH
3836: LD_VAR 0 5
3840: ARRAY
3841: PPUSH
3842: LD_VAR 0 3
3846: PPUSH
3847: CALL_OW 250
3851: PUSH
3852: LD_INT 1
3854: NEG
3855: PPUSH
3856: LD_INT 1
3858: PPUSH
3859: CALL_OW 12
3863: PLUS
3864: PPUSH
3865: LD_VAR 0 3
3869: PPUSH
3870: CALL_OW 251
3874: PUSH
3875: LD_INT 1
3877: NEG
3878: PPUSH
3879: LD_INT 1
3881: PPUSH
3882: CALL_OW 12
3886: PLUS
3887: PPUSH
3888: CALL_OW 153
3892: GO 3926
3894: LD_INT 3
3896: DOUBLE
3897: EQUAL
3898: IFTRUE 3902
3900: GO 3925
3902: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
3903: LD_VAR 0 6
3907: PUSH
3908: LD_VAR 0 5
3912: ARRAY
3913: PPUSH
3914: LD_VAR 0 3
3918: PPUSH
3919: CALL_OW 115
3923: GO 3926
3925: POP
// end ; end ;
3926: GO 3742
3928: POP
3929: POP
3930: GO 3729
3932: POP
3933: POP
// end ;
3934: LD_VAR 0 2
3938: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
3939: LD_INT 0
3941: PPUSH
3942: PPUSH
3943: PPUSH
3944: PPUSH
3945: PPUSH
3946: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
3947: LD_ADDR_VAR 0 7
3951: PUSH
3952: LD_VAR 0 2
3956: PPUSH
3957: LD_INT 22
3959: PUSH
3960: LD_VAR 0 1
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 21
3971: PUSH
3972: LD_INT 2
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: LD_INT 34
3981: PUSH
3982: LD_INT 52
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: LIST
3993: PPUSH
3994: CALL_OW 70
3998: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
3999: LD_ADDR_VAR 0 8
4003: PUSH
4004: LD_VAR 0 2
4008: PPUSH
4009: LD_INT 22
4011: PUSH
4012: LD_VAR 0 1
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: LD_INT 21
4023: PUSH
4024: LD_INT 3
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: PUSH
4031: LD_INT 3
4033: PUSH
4034: LD_INT 24
4036: PUSH
4037: LD_INT 1000
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: PUSH
4053: EMPTY
4054: LIST
4055: PPUSH
4056: CALL_OW 70
4060: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4061: LD_VAR 0 8
4065: PUSH
4066: LD_INT 0
4068: GREATER
4069: PUSH
4070: LD_VAR 0 7
4074: PPUSH
4075: LD_INT 24
4077: PUSH
4078: LD_INT 750
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: PPUSH
4085: CALL_OW 72
4089: PUSH
4090: LD_INT 0
4092: GREATER
4093: AND
4094: IFFALSE 4114
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4096: LD_VAR 0 7
4100: PPUSH
4101: LD_VAR 0 8
4105: PUSH
4106: LD_INT 1
4108: ARRAY
4109: PPUSH
4110: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4114: LD_VAR 0 7
4118: PUSH
4119: LD_INT 0
4121: GREATER
4122: PUSH
4123: LD_VAR 0 8
4127: PUSH
4128: LD_INT 0
4130: EQUAL
4131: AND
4132: PUSH
4133: LD_EXP 10
4137: PUSH
4138: LD_INT 0
4140: GREATER
4141: AND
4142: IFFALSE 4189
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4144: LD_VAR 0 7
4148: PPUSH
4149: LD_EXP 10
4153: PUSH
4154: LD_INT 1
4156: ARRAY
4157: PPUSH
4158: LD_EXP 10
4162: PUSH
4163: LD_INT 2
4165: ARRAY
4166: PPUSH
4167: LD_EXP 10
4171: PUSH
4172: LD_INT 3
4174: ARRAY
4175: PPUSH
4176: LD_EXP 10
4180: PUSH
4181: LD_INT 4
4183: ARRAY
4184: PPUSH
4185: CALL_OW 567
// end ; end_of_file
4189: LD_VAR 0 3
4193: RET
// every 0 0$1 do
4194: GO 4196
4196: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 14
4202: PPUSH
4203: LD_INT 3
4205: PPUSH
4206: CALL 2054 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4210: LD_INT 3
4212: PPUSH
4213: LD_INT 15
4215: PPUSH
4216: LD_INT 3
4218: PPUSH
4219: CALL 2054 0 3
// end ;
4223: END
// every 0 0$1 trigger russianAI = 1 do
4224: LD_EXP 13
4228: PUSH
4229: LD_INT 1
4231: EQUAL
4232: IFFALSE 4321
4234: GO 4236
4236: DISABLE
// begin enable ;
4237: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4238: LD_INT 3
4240: PPUSH
4241: LD_INT 22
4243: PPUSH
4244: LD_INT 7
4246: PPUSH
4247: LD_EXP 10
4251: PPUSH
4252: CALL 2295 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4256: LD_INT 3
4258: PPUSH
4259: LD_INT 8
4261: PPUSH
4262: LD_INT 7
4264: PPUSH
4265: LD_INT 14
4267: PUSH
4268: LD_INT 15
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: PUSH
4275: LD_INT 1
4277: PPUSH
4278: LD_INT 2
4280: PPUSH
4281: CALL_OW 12
4285: ARRAY
4286: PPUSH
4287: CALL 2686 0 4
// IntBazooka ( 3 ) ;
4291: LD_INT 3
4293: PPUSH
4294: CALL 3611 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4298: LD_INT 3
4300: PPUSH
4301: LD_INT 51
4303: PPUSH
4304: LD_INT 14
4306: PPUSH
4307: CALL 3394 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4311: LD_INT 3
4313: PPUSH
4314: LD_INT 7
4316: PPUSH
4317: CALL 3939 0 2
// end ;
4321: END
// every 0 0$30 trigger russianTanks >= [ 5 , 6 , 8 , 8 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 3 , 3 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
4322: LD_EXP 11
4326: PUSH
4327: LD_INT 5
4329: PUSH
4330: LD_INT 6
4332: PUSH
4333: LD_INT 8
4335: PUSH
4336: LD_INT 8
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: PUSH
4345: LD_OWVAR 67
4349: ARRAY
4350: GREATEREQUAL
4351: PUSH
4352: LD_EXP 12
4356: PUSH
4357: LD_INT 1
4359: PUSH
4360: LD_INT 2
4362: PUSH
4363: LD_INT 3
4365: PUSH
4366: LD_INT 3
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: PUSH
4375: LD_OWVAR 67
4379: ARRAY
4380: GREATEREQUAL
4381: AND
4382: IFFALSE 4868
4384: GO 4386
4386: DISABLE
4387: LD_INT 0
4389: PPUSH
4390: PPUSH
4391: PPUSH
4392: PPUSH
// begin enable ;
4393: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
4394: LD_ADDR_VAR 0 2
4398: PUSH
4399: LD_EXP 11
4403: PUSH
4404: LD_EXP 12
4408: UNION
4409: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
4410: LD_ADDR_EXP 11
4414: PUSH
4415: LD_EXP 11
4419: PUSH
4420: LD_VAR 0 2
4424: DIFF
4425: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
4426: LD_ADDR_EXP 12
4430: PUSH
4431: LD_EXP 12
4435: PUSH
4436: LD_VAR 0 2
4440: DIFF
4441: ST_TO_ADDR
// if IsOk ( ruTeleport ) then
4442: LD_INT 116
4444: PPUSH
4445: CALL_OW 302
4449: IFFALSE 4518
// begin for j in tmp do
4451: LD_ADDR_VAR 0 1
4455: PUSH
4456: LD_VAR 0 2
4460: PUSH
4461: FOR_IN
4462: IFFALSE 4509
// if j mod 3 = 0 then
4464: LD_VAR 0 1
4468: PUSH
4469: LD_INT 3
4471: MOD
4472: PUSH
4473: LD_INT 0
4475: EQUAL
4476: IFFALSE 4492
// ComEnterUnit ( j , ruTeleport ) else
4478: LD_VAR 0 1
4482: PPUSH
4483: LD_INT 116
4485: PPUSH
4486: CALL_OW 120
4490: GO 4507
// ComAgressiveMove ( j , 117 , 92 ) ;
4492: LD_VAR 0 1
4496: PPUSH
4497: LD_INT 117
4499: PPUSH
4500: LD_INT 92
4502: PPUSH
4503: CALL_OW 114
4507: GO 4461
4509: POP
4510: POP
// wait ( 0 0$14 ) ;
4511: LD_INT 490
4513: PPUSH
4514: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
4518: LD_INT 35
4520: PPUSH
4521: CALL_OW 67
// for j in tmp do
4525: LD_ADDR_VAR 0 1
4529: PUSH
4530: LD_VAR 0 2
4534: PUSH
4535: FOR_IN
4536: IFFALSE 4859
// begin if IsDead ( j ) then
4538: LD_VAR 0 1
4542: PPUSH
4543: CALL_OW 301
4547: IFFALSE 4565
// tmp := tmp diff j ;
4549: LD_ADDR_VAR 0 2
4553: PUSH
4554: LD_VAR 0 2
4558: PUSH
4559: LD_VAR 0 1
4563: DIFF
4564: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
4565: LD_ADDR_VAR 0 3
4569: PUSH
4570: LD_INT 81
4572: PUSH
4573: LD_INT 3
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PPUSH
4580: CALL_OW 69
4584: PPUSH
4585: LD_VAR 0 1
4589: PPUSH
4590: CALL_OW 74
4594: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
4595: LD_ADDR_VAR 0 4
4599: PUSH
4600: LD_INT 81
4602: PUSH
4603: LD_INT 3
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PUSH
4610: LD_INT 21
4612: PUSH
4613: LD_INT 1
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: PUSH
4624: EMPTY
4625: LIST
4626: PPUSH
4627: CALL_OW 69
4631: PPUSH
4632: LD_VAR 0 1
4636: PPUSH
4637: CALL_OW 74
4641: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
4642: LD_VAR 0 1
4646: PPUSH
4647: CALL_OW 264
4651: PUSH
4652: LD_INT 49
4654: EQUAL
4655: IFFALSE 4791
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
4657: LD_VAR 0 2
4661: PPUSH
4662: LD_INT 3
4664: PUSH
4665: LD_INT 34
4667: PUSH
4668: LD_INT 49
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: PPUSH
4679: CALL_OW 72
4683: PUSH
4684: LD_INT 1
4686: GREATER
4687: PUSH
4688: LD_VAR 0 2
4692: PPUSH
4693: LD_INT 3
4695: PUSH
4696: LD_INT 34
4698: PUSH
4699: LD_INT 49
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PPUSH
4710: CALL_OW 72
4714: AND
4715: IFFALSE 4765
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
4717: LD_VAR 0 1
4721: PPUSH
4722: LD_VAR 0 2
4726: PPUSH
4727: LD_INT 3
4729: PUSH
4730: LD_INT 34
4732: PUSH
4733: LD_INT 49
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PPUSH
4744: CALL_OW 72
4748: PPUSH
4749: LD_VAR 0 1
4753: PPUSH
4754: CALL_OW 74
4758: PPUSH
4759: CALL_OW 112
4763: GO 4789
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
4765: LD_VAR 0 1
4769: PPUSH
4770: LD_VAR 0 3
4774: PPUSH
4775: LD_VAR 0 1
4779: PPUSH
4780: CALL_OW 74
4784: PPUSH
4785: CALL_OW 112
// end else
4789: GO 4857
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
4791: LD_VAR 0 1
4795: PPUSH
4796: LD_VAR 0 4
4800: PPUSH
4801: CALL_OW 296
4805: PUSH
4806: LD_VAR 0 1
4810: PPUSH
4811: LD_VAR 0 3
4815: PPUSH
4816: CALL_OW 296
4820: PUSH
4821: LD_INT 2
4823: PLUS
4824: LESS
4825: IFFALSE 4843
// ComAttackUnit ( j , target2 ) else
4827: LD_VAR 0 1
4831: PPUSH
4832: LD_VAR 0 4
4836: PPUSH
4837: CALL_OW 115
4841: GO 4857
// ComAttackUnit ( j , target1 ) ;
4843: LD_VAR 0 1
4847: PPUSH
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL_OW 115
// end ; end ;
4857: GO 4535
4859: POP
4860: POP
// until not tmp ;
4861: LD_VAR 0 2
4865: NOT
4866: IFFALSE 4518
// end ;
4868: PPOPN 4
4870: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4871: LD_INT 22
4873: PPUSH
4874: CALL_OW 303
4878: PUSH
4879: LD_INT 22
4881: PPUSH
4882: CALL_OW 255
4886: PUSH
4887: LD_INT 1
4889: EQUAL
4890: OR
4891: IFFALSE 4906
4893: GO 4895
4895: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4896: LD_INT 3
4898: PPUSH
4899: LD_INT 22
4901: PPUSH
4902: CALL 3230 0 2
4906: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) < 3 do
4907: LD_EXP 13
4911: PUSH
4912: LD_INT 1
4914: EQUAL
4915: PUSH
4916: LD_INT 22
4918: PUSH
4919: LD_INT 3
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 21
4928: PUSH
4929: LD_INT 2
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 50
4938: PUSH
4939: EMPTY
4940: LIST
4941: PUSH
4942: LD_INT 33
4944: PUSH
4945: LD_INT 3
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: PUSH
4952: LD_INT 2
4954: PUSH
4955: LD_INT 34
4957: PUSH
4958: LD_INT 46
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PUSH
4965: LD_INT 34
4967: PUSH
4968: LD_INT 45
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PUSH
4975: LD_INT 34
4977: PUSH
4978: LD_INT 44
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PUSH
4985: LD_INT 34
4987: PUSH
4988: LD_INT 49
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 34
4997: PUSH
4998: LD_INT 47
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: PPUSH
5020: CALL_OW 69
5024: PUSH
5025: LD_INT 3
5027: LESS
5028: AND
5029: IFFALSE 5228
5031: GO 5033
5033: DISABLE
// begin enable ;
5034: ENABLE
// if russianRocketsAvalaible = 1 then
5035: LD_EXP 14
5039: PUSH
5040: LD_INT 1
5042: EQUAL
5043: IFFALSE 5104
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
5045: LD_INT 3
5047: PPUSH
5048: LD_INT 1
5050: PPUSH
5051: LD_INT 5
5053: PUSH
5054: LD_INT 6
5056: PUSH
5057: LD_INT 8
5059: PUSH
5060: LD_INT 8
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: PUSH
5069: LD_OWVAR 67
5073: ARRAY
5074: PPUSH
5075: LD_INT 46
5077: PUSH
5078: LD_INT 45
5080: PUSH
5081: LD_INT 44
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: LIST
5088: PPUSH
5089: LD_INT 3
5091: PPUSH
5092: LD_INT 3
5094: PPUSH
5095: LD_INT 24
5097: PPUSH
5098: CALL 3537 0 7
5102: GO 5165
// BuildingVehicle ( 3 , ru_fact1 , [ 5 , 6 , 8 , 8 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
5104: LD_INT 3
5106: PPUSH
5107: LD_INT 1
5109: PPUSH
5110: LD_INT 5
5112: PUSH
5113: LD_INT 6
5115: PUSH
5116: LD_INT 8
5118: PUSH
5119: LD_INT 8
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: PUSH
5128: LD_OWVAR 67
5132: ARRAY
5133: PPUSH
5134: LD_INT 46
5136: PUSH
5137: LD_INT 45
5139: PUSH
5140: LD_INT 44
5142: PUSH
5143: LD_INT 47
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: PPUSH
5152: LD_INT 3
5154: PPUSH
5155: LD_INT 3
5157: PPUSH
5158: LD_INT 24
5160: PPUSH
5161: CALL 3537 0 7
// if russianTimeLapsers = 0 then
5165: LD_EXP 12
5169: PUSH
5170: LD_INT 0
5172: EQUAL
5173: IFFALSE 5228
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
5175: LD_INT 3
5177: PPUSH
5178: LD_INT 40
5180: PPUSH
5181: LD_INT 1
5183: PUSH
5184: LD_INT 2
5186: PUSH
5187: LD_INT 3
5189: PUSH
5190: LD_INT 3
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: PUSH
5199: LD_OWVAR 67
5203: ARRAY
5204: PPUSH
5205: LD_INT 49
5207: PUSH
5208: LD_INT 49
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: PPUSH
5215: LD_INT 3
5217: PPUSH
5218: LD_INT 3
5220: PPUSH
5221: LD_INT 24
5223: PPUSH
5224: CALL 3537 0 7
// end ;
5228: END
// every 0 0$10 + 0 0$30 trigger baseGuard and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) do
5229: LD_EXP 18
5233: PUSH
5234: LD_INT 22
5236: PUSH
5237: LD_INT 1
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: PUSH
5244: LD_INT 21
5246: PUSH
5247: LD_INT 2
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PUSH
5254: LD_INT 58
5256: PUSH
5257: EMPTY
5258: LIST
5259: PUSH
5260: LD_INT 33
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 91
5272: PUSH
5273: LD_EXP 18
5277: PUSH
5278: LD_INT 45
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: LIST
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: PPUSH
5293: CALL_OW 69
5297: AND
5298: IFFALSE 5402
5300: GO 5302
5302: DISABLE
// begin wait ( 0 0$5 ) ;
5303: LD_INT 175
5305: PPUSH
5306: CALL_OW 67
// ComEnterUnit ( baseGuard , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_control , control_manual ] , [ f_dist , baseGuard , 45 ] ] ) [ 1 ] ) ;
5310: LD_EXP 18
5314: PPUSH
5315: LD_INT 22
5317: PUSH
5318: LD_INT 1
5320: PUSH
5321: EMPTY
5322: LIST
5323: LIST
5324: PUSH
5325: LD_INT 21
5327: PUSH
5328: LD_INT 2
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: LD_INT 58
5337: PUSH
5338: EMPTY
5339: LIST
5340: PUSH
5341: LD_INT 33
5343: PUSH
5344: LD_INT 1
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: LD_INT 91
5353: PUSH
5354: LD_EXP 18
5358: PUSH
5359: LD_INT 45
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PPUSH
5374: CALL_OW 69
5378: PUSH
5379: LD_INT 1
5381: ARRAY
5382: PPUSH
5383: CALL_OW 120
// AddComMoveXY ( baseGuard , 127 , 63 ) ;
5387: LD_EXP 18
5391: PPUSH
5392: LD_INT 127
5394: PPUSH
5395: LD_INT 63
5397: PPUSH
5398: CALL_OW 171
// end ; end_of_file
5402: END
// every 1 do var dec1 , dec2 ;
5403: GO 5405
5405: DISABLE
5406: LD_INT 0
5408: PPUSH
5409: PPUSH
// begin InGameOn ;
5410: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
5414: LD_INT 48
5416: PPUSH
5417: LD_STRING deltakappa
5419: PPUSH
5420: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
5424: LD_INT 95
5426: PPUSH
5427: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
5431: LD_INT 95
5433: PPUSH
5434: LD_INT 30
5436: PPUSH
5437: LD_INT 11
5439: PPUSH
5440: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
5444: LD_INT 30
5446: PPUSH
5447: LD_INT 11
5449: PPUSH
5450: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
5454: LD_EXP 5
5458: PPUSH
5459: LD_STRING D1-Pow-1
5461: PPUSH
5462: CALL_OW 94
// ComExitVehicle ( JMM ) ;
5466: LD_EXP 1
5470: PPUSH
5471: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5475: LD_EXP 1
5479: PPUSH
5480: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
5484: LD_EXP 1
5488: PPUSH
5489: LD_STRING D1-JMM-1
5491: PPUSH
5492: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
5496: LD_EXP 5
5500: PPUSH
5501: LD_STRING D1-Pow-2
5503: PPUSH
5504: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
5508: LD_EXP 1
5512: PPUSH
5513: LD_STRING D1-JMM-2
5515: PPUSH
5516: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
5520: LD_EXP 1
5524: PPUSH
5525: LD_INT 95
5527: PPUSH
5528: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
5532: LD_STRING M1
5534: PPUSH
5535: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
5539: LD_INT 35
5541: PPUSH
5542: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
5546: LD_EXP 1
5550: PPUSH
5551: LD_INT 95
5553: PPUSH
5554: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
5558: LD_INT 95
5560: PPUSH
5561: LD_INT 51
5563: PPUSH
5564: LD_INT 21
5566: PPUSH
5567: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
5571: LD_INT 95
5573: PPUSH
5574: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
5578: LD_INT 95
5580: PPUSH
5581: LD_INT 5
5583: PPUSH
5584: CALL_OW 308
5588: IFFALSE 5539
// if JMMGirl = 1 then
5590: LD_EXP 7
5594: PUSH
5595: LD_INT 1
5597: EQUAL
5598: IFFALSE 5911
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
5600: LD_EXP 2
5604: PPUSH
5605: LD_STRING D2J-Joan-1
5607: PPUSH
5608: CALL_OW 94
// dec1 = query ( Q1 ) ;
5612: LD_ADDR_VAR 0 1
5616: PUSH
5617: LD_STRING Q1
5619: PPUSH
5620: CALL_OW 97
5624: ST_TO_ADDR
// if dec1 = 1 then
5625: LD_VAR 0 1
5629: PUSH
5630: LD_INT 1
5632: EQUAL
5633: IFFALSE 5887
// begin ComExitVehicle ( JMM ) ;
5635: LD_EXP 1
5639: PPUSH
5640: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5644: LD_EXP 1
5648: PPUSH
5649: LD_STRING D2J-JMM-1
5651: PPUSH
5652: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5656: LD_EXP 2
5660: PPUSH
5661: LD_STRING D2J-Joan-2
5663: PPUSH
5664: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5668: LD_EXP 1
5672: PPUSH
5673: LD_STRING D2J-JMM-2
5675: PPUSH
5676: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5680: LD_EXP 2
5684: PPUSH
5685: LD_STRING D2J-Joan-3
5687: PPUSH
5688: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5692: LD_EXP 5
5696: PPUSH
5697: LD_STRING DPowell-Pow-1
5699: PPUSH
5700: CALL_OW 94
// dec2 = query ( Q2J ) ;
5704: LD_ADDR_VAR 0 2
5708: PUSH
5709: LD_STRING Q2J
5711: PPUSH
5712: CALL_OW 97
5716: ST_TO_ADDR
// if dec2 = 1 then
5717: LD_VAR 0 2
5721: PUSH
5722: LD_INT 1
5724: EQUAL
5725: IFFALSE 5767
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5727: LD_EXP 1
5731: PPUSH
5732: LD_STRING D2Ja-JMM-1
5734: PPUSH
5735: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5739: LD_EXP 2
5743: PPUSH
5744: LD_STRING D2Ja-Joan-1
5746: PPUSH
5747: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5751: LD_EXP 1
5755: PPUSH
5756: LD_STRING D2Ja-JMM-2
5758: PPUSH
5759: CALL_OW 88
// InGameOff ;
5763: CALL_OW 9
// end ; if dec2 = 2 then
5767: LD_VAR 0 2
5771: PUSH
5772: LD_INT 2
5774: EQUAL
5775: IFFALSE 5851
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5777: LD_EXP 1
5781: PPUSH
5782: LD_STRING D2Jb-JMM-1
5784: PPUSH
5785: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5789: LD_EXP 2
5793: PPUSH
5794: LD_STRING D2Jb-Joan-1
5796: PPUSH
5797: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5801: LD_EXP 1
5805: PPUSH
5806: LD_STRING D2Jb-JMM-2
5808: PPUSH
5809: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5813: LD_EXP 2
5817: PPUSH
5818: LD_STRING D2Jb-Joan-2
5820: PPUSH
5821: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5825: LD_EXP 1
5829: PPUSH
5830: LD_STRING D2Jb-JMM-3
5832: PPUSH
5833: CALL_OW 88
// fastEnd = 1 ;
5837: LD_ADDR_EXP 15
5841: PUSH
5842: LD_INT 1
5844: ST_TO_ADDR
// FinishMission ;
5845: CALL 9467 0 0
// exit ;
5849: GO 6481
// end ; if dec2 = 3 then
5851: LD_VAR 0 2
5855: PUSH
5856: LD_INT 3
5858: EQUAL
5859: IFFALSE 5887
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5861: LD_EXP 2
5865: PPUSH
5866: LD_STRING D2Jc-Joan-1
5868: PPUSH
5869: CALL_OW 94
// fastEnd = 1 ;
5873: LD_ADDR_EXP 15
5877: PUSH
5878: LD_INT 1
5880: ST_TO_ADDR
// FinishMission ;
5881: CALL 9467 0 0
// exit ;
5885: GO 6481
// end ; end ; if dec1 = 2 then
5887: LD_VAR 0 1
5891: PUSH
5892: LD_INT 2
5894: EQUAL
5895: IFFALSE 5911
// begin fastEnd = 1 ;
5897: LD_ADDR_EXP 15
5901: PUSH
5902: LD_INT 1
5904: ST_TO_ADDR
// FinishMission ;
5905: CALL 9467 0 0
// exit ;
5909: GO 6481
// end ; end ; if JMMGirl = 2 then
5911: LD_EXP 7
5915: PUSH
5916: LD_INT 2
5918: EQUAL
5919: IFFALSE 6244
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5921: LD_EXP 3
5925: PPUSH
5926: LD_STRING D2L-Lisa-1
5928: PPUSH
5929: CALL_OW 94
// dec1 = query ( Q1 ) ;
5933: LD_ADDR_VAR 0 1
5937: PUSH
5938: LD_STRING Q1
5940: PPUSH
5941: CALL_OW 97
5945: ST_TO_ADDR
// if dec1 = 1 then
5946: LD_VAR 0 1
5950: PUSH
5951: LD_INT 1
5953: EQUAL
5954: IFFALSE 6220
// begin ComExitVehicle ( JMM ) ;
5956: LD_EXP 1
5960: PPUSH
5961: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5965: LD_EXP 1
5969: PPUSH
5970: LD_STRING D2L-JMM-1
5972: PPUSH
5973: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5977: LD_EXP 3
5981: PPUSH
5982: LD_STRING D2L-Lisa-2
5984: PPUSH
5985: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5989: LD_EXP 1
5993: PPUSH
5994: LD_STRING D2L-JMM-2
5996: PPUSH
5997: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
6001: LD_EXP 3
6005: PPUSH
6006: LD_STRING D2L-Lisa-3
6008: PPUSH
6009: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6013: LD_EXP 5
6017: PPUSH
6018: LD_STRING DPowell-Pow-1
6020: PPUSH
6021: CALL_OW 94
// dec2 = query ( Q2L ) ;
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: LD_STRING Q2L
6032: PPUSH
6033: CALL_OW 97
6037: ST_TO_ADDR
// if dec2 = 1 then
6038: LD_VAR 0 2
6042: PUSH
6043: LD_INT 1
6045: EQUAL
6046: IFFALSE 6112
// begin Say ( JMM , D2La-JMM-1 ) ;
6048: LD_EXP 1
6052: PPUSH
6053: LD_STRING D2La-JMM-1
6055: PPUSH
6056: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6060: LD_EXP 3
6064: PPUSH
6065: LD_STRING D2La-Lisa-1
6067: PPUSH
6068: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
6072: LD_EXP 1
6076: PPUSH
6077: LD_STRING D2La-JMM-2
6079: PPUSH
6080: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
6084: LD_EXP 3
6088: PPUSH
6089: LD_STRING D2La-Lisa-2
6091: PPUSH
6092: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
6096: LD_EXP 1
6100: PPUSH
6101: LD_STRING D2La-JMM-3
6103: PPUSH
6104: CALL_OW 88
// InGameOff ;
6108: CALL_OW 9
// end ; if dec2 = 2 then
6112: LD_VAR 0 2
6116: PUSH
6117: LD_INT 2
6119: EQUAL
6120: IFFALSE 6184
// begin Say ( JMM , D2Lb-JMM-1 ) ;
6122: LD_EXP 1
6126: PPUSH
6127: LD_STRING D2Lb-JMM-1
6129: PPUSH
6130: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
6134: LD_EXP 3
6138: PPUSH
6139: LD_STRING D2Lb-Lisa-1
6141: PPUSH
6142: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
6146: LD_EXP 1
6150: PPUSH
6151: LD_STRING D2Lb-JMM-2
6153: PPUSH
6154: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
6158: LD_EXP 3
6162: PPUSH
6163: LD_STRING D2Lb-Lisa-2
6165: PPUSH
6166: CALL_OW 94
// fastEnd = 1 ;
6170: LD_ADDR_EXP 15
6174: PUSH
6175: LD_INT 1
6177: ST_TO_ADDR
// FinishMission ;
6178: CALL 9467 0 0
// exit ;
6182: GO 6481
// end ; if dec2 = 3 then
6184: LD_VAR 0 2
6188: PUSH
6189: LD_INT 3
6191: EQUAL
6192: IFFALSE 6220
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
6194: LD_EXP 3
6198: PPUSH
6199: LD_STRING D2Lc-Lisa-1
6201: PPUSH
6202: CALL_OW 94
// fastEnd = 1 ;
6206: LD_ADDR_EXP 15
6210: PUSH
6211: LD_INT 1
6213: ST_TO_ADDR
// FinishMission ;
6214: CALL 9467 0 0
// exit ;
6218: GO 6481
// end ; end ; if dec1 = 2 then
6220: LD_VAR 0 1
6224: PUSH
6225: LD_INT 2
6227: EQUAL
6228: IFFALSE 6244
// begin fastEnd = 1 ;
6230: LD_ADDR_EXP 15
6234: PUSH
6235: LD_INT 1
6237: ST_TO_ADDR
// FinishMission ;
6238: CALL 9467 0 0
// exit ;
6242: GO 6481
// end ; end ; if JMMGirl = 3 then
6244: LD_EXP 7
6248: PUSH
6249: LD_INT 3
6251: EQUAL
6252: IFFALSE 6481
// begin SayRadio ( Connie , D2X-Con-1 ) ;
6254: LD_EXP 4
6258: PPUSH
6259: LD_STRING D2X-Con-1
6261: PPUSH
6262: CALL_OW 94
// dec1 = query ( Q1 ) ;
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_STRING Q1
6273: PPUSH
6274: CALL_OW 97
6278: ST_TO_ADDR
// if dec1 = 1 then
6279: LD_VAR 0 1
6283: PUSH
6284: LD_INT 1
6286: EQUAL
6287: IFFALSE 6457
// begin ComExitVehicle ( JMM ) ;
6289: LD_EXP 1
6293: PPUSH
6294: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
6298: LD_EXP 1
6302: PPUSH
6303: LD_STRING D2X-JMM-1
6305: PPUSH
6306: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
6310: LD_EXP 4
6314: PPUSH
6315: LD_STRING D2X-Con-2
6317: PPUSH
6318: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6322: LD_EXP 5
6326: PPUSH
6327: LD_STRING DPowell-Pow-1
6329: PPUSH
6330: CALL_OW 94
// dec2 = query ( Q2X ) ;
6334: LD_ADDR_VAR 0 2
6338: PUSH
6339: LD_STRING Q2X
6341: PPUSH
6342: CALL_OW 97
6346: ST_TO_ADDR
// if dec2 = 1 then
6347: LD_VAR 0 2
6351: PUSH
6352: LD_INT 1
6354: EQUAL
6355: IFFALSE 6373
// begin Say ( JMM , D2Xa-JMM-1 ) ;
6357: LD_EXP 1
6361: PPUSH
6362: LD_STRING D2Xa-JMM-1
6364: PPUSH
6365: CALL_OW 88
// InGameOff ;
6369: CALL_OW 9
// end ; if dec2 = 2 then
6373: LD_VAR 0 2
6377: PUSH
6378: LD_INT 2
6380: EQUAL
6381: IFFALSE 6421
// begin Say ( JMM , D2Xb-JMM-1 ) ;
6383: LD_EXP 1
6387: PPUSH
6388: LD_STRING D2Xb-JMM-1
6390: PPUSH
6391: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
6395: LD_EXP 4
6399: PPUSH
6400: LD_STRING D2Xb-Con-1
6402: PPUSH
6403: CALL_OW 94
// fastEnd = 1 ;
6407: LD_ADDR_EXP 15
6411: PUSH
6412: LD_INT 1
6414: ST_TO_ADDR
// FinishMission ;
6415: CALL 9467 0 0
// exit ;
6419: GO 6481
// end ; if dec2 = 3 then
6421: LD_VAR 0 2
6425: PUSH
6426: LD_INT 3
6428: EQUAL
6429: IFFALSE 6457
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
6431: LD_EXP 4
6435: PPUSH
6436: LD_STRING D2Xc-Con-1
6438: PPUSH
6439: CALL_OW 94
// fastEnd = 1 ;
6443: LD_ADDR_EXP 15
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// FinishMission ;
6451: CALL 9467 0 0
// exit ;
6455: GO 6481
// end ; end ; if dec1 = 2 then
6457: LD_VAR 0 1
6461: PUSH
6462: LD_INT 2
6464: EQUAL
6465: IFFALSE 6481
// begin fastEnd = 1 ;
6467: LD_ADDR_EXP 15
6471: PUSH
6472: LD_INT 1
6474: ST_TO_ADDR
// FinishMission ;
6475: CALL 9467 0 0
// exit ;
6479: GO 6481
// end ; end ; end ;
6481: PPOPN 2
6483: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
6484: LD_EXP 1
6488: PPUSH
6489: LD_INT 6
6491: PPUSH
6492: CALL_OW 308
6496: IFFALSE 7238
6498: GO 6500
6500: DISABLE
// begin InGameOn ;
6501: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
6505: LD_INT 35
6507: PPUSH
6508: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
6512: LD_EXP 1
6516: PPUSH
6517: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
6521: LD_EXP 1
6525: PPUSH
6526: LD_INT 62
6528: PPUSH
6529: LD_INT 104
6531: PPUSH
6532: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
6536: LD_EXP 1
6540: PPUSH
6541: LD_EXP 2
6545: PPUSH
6546: CALL_OW 296
6550: PUSH
6551: LD_INT 4
6553: LESS
6554: PUSH
6555: LD_EXP 1
6559: PPUSH
6560: LD_EXP 3
6564: PPUSH
6565: CALL_OW 296
6569: PUSH
6570: LD_INT 4
6572: LESS
6573: OR
6574: PUSH
6575: LD_EXP 1
6579: PPUSH
6580: LD_EXP 4
6584: PPUSH
6585: CALL_OW 296
6589: PUSH
6590: LD_INT 4
6592: LESS
6593: OR
6594: IFFALSE 6505
// case JMMGirl of 1 :
6596: LD_EXP 7
6600: PUSH
6601: LD_INT 1
6603: DOUBLE
6604: EQUAL
6605: IFTRUE 6609
6607: GO 6821
6609: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6610: LD_INT 22
6612: PUSH
6613: LD_INT 4
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PPUSH
6620: CALL_OW 69
6624: PPUSH
6625: LD_INT 1
6627: PPUSH
6628: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6632: LD_EXP 2
6636: PPUSH
6637: LD_EXP 1
6641: PPUSH
6642: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6646: LD_EXP 1
6650: PPUSH
6651: LD_EXP 2
6655: PPUSH
6656: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6660: LD_EXP 2
6664: PUSH
6665: LD_EXP 1
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PPUSH
6674: CALL_OW 87
// wait ( 0 0$1 ) ;
6678: LD_INT 35
6680: PPUSH
6681: CALL_OW 67
// DialogueOn ;
6685: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6689: LD_EXP 2
6693: PPUSH
6694: LD_STRING D3J-Joan-1
6696: PPUSH
6697: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6701: LD_EXP 1
6705: PPUSH
6706: LD_STRING D3J-JMM-1
6708: PPUSH
6709: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6713: LD_EXP 2
6717: PPUSH
6718: LD_STRING D3J-Joan-2
6720: PPUSH
6721: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6725: LD_EXP 1
6729: PPUSH
6730: LD_STRING D3J-JMM-2
6732: PPUSH
6733: CALL_OW 88
// wait ( 0 0$1 ) ;
6737: LD_INT 35
6739: PPUSH
6740: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6744: LD_EXP 1
6748: PPUSH
6749: LD_STRING D4-JMM-1
6751: PPUSH
6752: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6756: LD_EXP 2
6760: PPUSH
6761: LD_STRING D4-Joan-1
6763: PPUSH
6764: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6768: LD_EXP 1
6772: PPUSH
6773: LD_STRING D4-JMM-2
6775: PPUSH
6776: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6780: LD_EXP 2
6784: PPUSH
6785: LD_STRING D4-Joan-2
6787: PPUSH
6788: CALL_OW 88
// DialogueOff ;
6792: CALL_OW 7
// InGameOff ;
6796: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6800: LD_STRING M2J
6802: PPUSH
6803: CALL_OW 337
// SaveForQuickRestart ;
6807: CALL_OW 22
// russianAI = 1 ;
6811: LD_ADDR_EXP 13
6815: PUSH
6816: LD_INT 1
6818: ST_TO_ADDR
// end ; 2 :
6819: GO 7238
6821: LD_INT 2
6823: DOUBLE
6824: EQUAL
6825: IFTRUE 6829
6827: GO 7041
6829: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6830: LD_INT 22
6832: PUSH
6833: LD_INT 4
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PPUSH
6840: CALL_OW 69
6844: PPUSH
6845: LD_INT 1
6847: PPUSH
6848: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6852: LD_EXP 3
6856: PPUSH
6857: LD_EXP 1
6861: PPUSH
6862: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6866: LD_EXP 1
6870: PPUSH
6871: LD_EXP 3
6875: PPUSH
6876: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6880: LD_EXP 3
6884: PUSH
6885: LD_EXP 1
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PPUSH
6894: CALL_OW 87
// wait ( 0 0$1 ) ;
6898: LD_INT 35
6900: PPUSH
6901: CALL_OW 67
// DialogueOn ;
6905: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6909: LD_EXP 3
6913: PPUSH
6914: LD_STRING D3L-Lisa-1
6916: PPUSH
6917: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6921: LD_EXP 1
6925: PPUSH
6926: LD_STRING D3L-JMM-1
6928: PPUSH
6929: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6933: LD_EXP 3
6937: PPUSH
6938: LD_STRING D3L-Lisa-2
6940: PPUSH
6941: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6945: LD_EXP 1
6949: PPUSH
6950: LD_STRING D3L-JMM-2
6952: PPUSH
6953: CALL_OW 88
// wait ( 0 0$1 ) ;
6957: LD_INT 35
6959: PPUSH
6960: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6964: LD_EXP 1
6968: PPUSH
6969: LD_STRING D4-JMM-1
6971: PPUSH
6972: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6976: LD_EXP 3
6980: PPUSH
6981: LD_STRING D4-Lisa-1
6983: PPUSH
6984: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6988: LD_EXP 1
6992: PPUSH
6993: LD_STRING D4-JMM-1
6995: PPUSH
6996: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
7000: LD_EXP 3
7004: PPUSH
7005: LD_STRING D4-Lisa-2
7007: PPUSH
7008: CALL_OW 88
// DialogueOff ;
7012: CALL_OW 7
// InGameOff ;
7016: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
7020: LD_STRING M2L
7022: PPUSH
7023: CALL_OW 337
// SaveForQuickRestart ;
7027: CALL_OW 22
// russianAI = 1 ;
7031: LD_ADDR_EXP 13
7035: PUSH
7036: LD_INT 1
7038: ST_TO_ADDR
// end ; 3 :
7039: GO 7238
7041: LD_INT 3
7043: DOUBLE
7044: EQUAL
7045: IFTRUE 7049
7047: GO 7237
7049: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
7050: LD_INT 22
7052: PUSH
7053: LD_INT 4
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PPUSH
7060: CALL_OW 69
7064: PPUSH
7065: LD_INT 1
7067: PPUSH
7068: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
7072: LD_EXP 4
7076: PPUSH
7077: LD_EXP 1
7081: PPUSH
7082: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
7086: LD_EXP 1
7090: PPUSH
7091: LD_EXP 4
7095: PPUSH
7096: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7100: LD_EXP 2
7104: PUSH
7105: LD_EXP 1
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PPUSH
7114: CALL_OW 87
// wait ( 0 0$1 ) ;
7118: LD_INT 35
7120: PPUSH
7121: CALL_OW 67
// DialogueOn ;
7125: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
7129: LD_EXP 4
7133: PPUSH
7134: LD_STRING D3X-Con-1
7136: PPUSH
7137: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7141: LD_EXP 1
7145: PPUSH
7146: LD_STRING D3J-JMM-1
7148: PPUSH
7149: CALL_OW 88
// wait ( 0 0$1 ) ;
7153: LD_INT 35
7155: PPUSH
7156: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7160: LD_EXP 1
7164: PPUSH
7165: LD_STRING D4-JMM-1
7167: PPUSH
7168: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
7172: LD_EXP 4
7176: PPUSH
7177: LD_STRING D4-Con-1
7179: PPUSH
7180: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7184: LD_EXP 1
7188: PPUSH
7189: LD_STRING D4-JMM-2
7191: PPUSH
7192: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
7196: LD_EXP 4
7200: PPUSH
7201: LD_STRING D4-Con-2
7203: PPUSH
7204: CALL_OW 88
// DialogueOff ;
7208: CALL_OW 7
// InGameOff ;
7212: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
7216: LD_STRING M2X
7218: PPUSH
7219: CALL_OW 337
// SaveForQuickRestart ;
7223: CALL_OW 22
// russianAI = 1 ;
7227: LD_ADDR_EXP 13
7231: PUSH
7232: LD_INT 1
7234: ST_TO_ADDR
// end ; end ;
7235: GO 7238
7237: POP
// end ;
7238: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
7239: LD_INT 32
7241: PPUSH
7242: CALL_OW 306
7246: IFFALSE 7579
7248: GO 7250
7250: DISABLE
// begin case JMMGirl of 1 :
7251: LD_EXP 7
7255: PUSH
7256: LD_INT 1
7258: DOUBLE
7259: EQUAL
7260: IFTRUE 7264
7262: GO 7386
7264: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
7265: LD_EXP 1
7269: PPUSH
7270: LD_STRING D6J-JMM-1
7272: PPUSH
7273: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
7277: LD_STRING 13f_Denis
7279: PPUSH
7280: CALL_OW 28
7284: PUSH
7285: LD_INT 1
7287: EQUAL
7288: PUSH
7289: LD_STRING 13s_Denis
7291: PPUSH
7292: CALL_OW 28
7296: PUSH
7297: LD_INT 1
7299: EQUAL
7300: OR
7301: IFFALSE 7341
// begin Say ( Joan , D6J-Joan-1 ) ;
7303: LD_EXP 2
7307: PPUSH
7308: LD_STRING D6J-Joan-1
7310: PPUSH
7311: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
7315: LD_EXP 1
7319: PPUSH
7320: LD_STRING D6J-JMM-2
7322: PPUSH
7323: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
7327: LD_EXP 2
7331: PPUSH
7332: LD_STRING D6J-Joan-2
7334: PPUSH
7335: CALL_OW 88
// end else
7339: GO 7353
// begin Say ( Joan , D6J-Joan-2a ) ;
7341: LD_EXP 2
7345: PPUSH
7346: LD_STRING D6J-Joan-2a
7348: PPUSH
7349: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
7353: LD_EXP 1
7357: PPUSH
7358: LD_STRING D6J-JMM-3
7360: PPUSH
7361: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
7365: LD_EXP 2
7369: PPUSH
7370: LD_STRING D6J-Joan-3
7372: PPUSH
7373: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7377: LD_STRING M3
7379: PPUSH
7380: CALL_OW 337
// end ; 2 :
7384: GO 7579
7386: LD_INT 2
7388: DOUBLE
7389: EQUAL
7390: IFTRUE 7394
7392: GO 7452
7394: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
7395: LD_EXP 1
7399: PPUSH
7400: LD_STRING D6L-JMM-1
7402: PPUSH
7403: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
7407: LD_EXP 3
7411: PPUSH
7412: LD_STRING D6L-Lisa-1
7414: PPUSH
7415: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
7419: LD_EXP 1
7423: PPUSH
7424: LD_STRING D6L-JMM-2
7426: PPUSH
7427: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
7431: LD_EXP 3
7435: PPUSH
7436: LD_STRING D6L-Lisa-2
7438: PPUSH
7439: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7443: LD_STRING M3
7445: PPUSH
7446: CALL_OW 337
// end ; 3 :
7450: GO 7579
7452: LD_INT 3
7454: DOUBLE
7455: EQUAL
7456: IFTRUE 7460
7458: GO 7578
7460: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
7461: LD_EXP 1
7465: PPUSH
7466: LD_STRING D6X-JMM-1
7468: PPUSH
7469: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
7473: LD_EXP 4
7477: PPUSH
7478: LD_STRING D6X-Con-1
7480: PPUSH
7481: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
7485: LD_EXP 1
7489: PPUSH
7490: LD_STRING D6X-JMM-2
7492: PPUSH
7493: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
7497: LD_EXP 4
7501: PPUSH
7502: LD_STRING D6X-Con-2
7504: PPUSH
7505: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
7509: LD_EXP 1
7513: PPUSH
7514: LD_STRING D6X-JMM-3
7516: PPUSH
7517: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
7521: LD_EXP 4
7525: PPUSH
7526: LD_STRING D6X-Con-3
7528: PPUSH
7529: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
7533: LD_EXP 1
7537: PPUSH
7538: LD_STRING D6X-JMM-4
7540: PPUSH
7541: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
7545: LD_EXP 4
7549: PPUSH
7550: LD_STRING D6X-Con-4
7552: PPUSH
7553: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
7557: LD_EXP 1
7561: PPUSH
7562: LD_STRING D6X-JMM-5
7564: PPUSH
7565: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7569: LD_STRING M3
7571: PPUSH
7572: CALL_OW 337
// end ; end ;
7576: GO 7579
7578: POP
// end ;
7579: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
7580: LD_INT 22
7582: PUSH
7583: LD_INT 1
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 33
7592: PUSH
7593: LD_INT 2
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PPUSH
7604: CALL_OW 69
7608: PPUSH
7609: CALL_OW 306
7613: IFFALSE 7759
7615: GO 7617
7617: DISABLE
// begin case JMMGirl of 1 :
7618: LD_EXP 7
7622: PUSH
7623: LD_INT 1
7625: DOUBLE
7626: EQUAL
7627: IFTRUE 7631
7629: GO 7668
7631: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7632: LD_EXP 1
7636: PPUSH
7637: LD_STRING D5-JMM-1
7639: PPUSH
7640: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7644: LD_INT 77
7646: PPUSH
7647: LD_INT 87
7649: PPUSH
7650: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7654: LD_EXP 2
7658: PPUSH
7659: LD_STRING D5-Joan-1
7661: PPUSH
7662: CALL_OW 88
// end ; 2 :
7666: GO 7759
7668: LD_INT 2
7670: DOUBLE
7671: EQUAL
7672: IFTRUE 7676
7674: GO 7713
7676: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7677: LD_EXP 1
7681: PPUSH
7682: LD_STRING D5-JMM-1
7684: PPUSH
7685: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7689: LD_INT 77
7691: PPUSH
7692: LD_INT 87
7694: PPUSH
7695: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7699: LD_EXP 3
7703: PPUSH
7704: LD_STRING D5-Lisa-1
7706: PPUSH
7707: CALL_OW 88
// end ; 3 :
7711: GO 7759
7713: LD_INT 3
7715: DOUBLE
7716: EQUAL
7717: IFTRUE 7721
7719: GO 7758
7721: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7722: LD_EXP 1
7726: PPUSH
7727: LD_STRING D5-JMM-1
7729: PPUSH
7730: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7734: LD_INT 77
7736: PPUSH
7737: LD_INT 87
7739: PPUSH
7740: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7744: LD_EXP 4
7748: PPUSH
7749: LD_STRING D5-Con-1
7751: PPUSH
7752: CALL_OW 88
// end ; end ;
7756: GO 7759
7758: POP
// end ;
7759: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7760: LD_INT 48
7762: PPUSH
7763: CALL_OW 255
7767: PUSH
7768: LD_INT 1
7770: EQUAL
7771: IFFALSE 7868
7773: GO 7775
7775: DISABLE
// begin DialogueOn ;
7776: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7780: LD_EXP 5
7784: PPUSH
7785: LD_STRING D7-Pow-1
7787: PPUSH
7788: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7792: LD_EXP 1
7796: PPUSH
7797: LD_STRING D7-JMM-1
7799: PPUSH
7800: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7804: LD_EXP 5
7808: PPUSH
7809: LD_STRING D7-Pow-2
7811: PPUSH
7812: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7816: LD_EXP 1
7820: PPUSH
7821: LD_STRING D7-JMM-2
7823: PPUSH
7824: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7828: LD_EXP 5
7832: PPUSH
7833: LD_STRING D7-Pow-3
7835: PPUSH
7836: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7840: LD_EXP 1
7844: PPUSH
7845: LD_STRING D7-JMM-3
7847: PPUSH
7848: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7852: LD_EXP 5
7856: PPUSH
7857: LD_STRING D7-Pow-4
7859: PPUSH
7860: CALL_OW 94
// DialogueOff ;
7864: CALL_OW 7
// end ; end_of_file
7868: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7869: LD_VAR 0 1
7873: PPUSH
7874: CALL_OW 255
7878: PUSH
7879: LD_INT 3
7881: EQUAL
7882: IFFALSE 7956
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7884: LD_ADDR_EXP 10
7888: PUSH
7889: LD_EXP 10
7893: PPUSH
7894: LD_INT 1
7896: PPUSH
7897: CALL_OW 3
7901: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7902: LD_ADDR_EXP 10
7906: PUSH
7907: LD_EXP 10
7911: PPUSH
7912: LD_INT 1
7914: PPUSH
7915: CALL_OW 3
7919: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7920: LD_ADDR_EXP 10
7924: PUSH
7925: LD_EXP 10
7929: PPUSH
7930: LD_INT 1
7932: PPUSH
7933: CALL_OW 3
7937: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7938: LD_ADDR_EXP 10
7942: PUSH
7943: LD_EXP 10
7947: PPUSH
7948: LD_INT 1
7950: PPUSH
7951: CALL_OW 3
7955: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7956: LD_VAR 0 1
7960: PPUSH
7961: CALL_OW 255
7965: PUSH
7966: LD_INT 3
7968: EQUAL
7969: PUSH
7970: LD_VAR 0 1
7974: PPUSH
7975: CALL_OW 266
7979: PUSH
7980: LD_INT 0
7982: EQUAL
7983: PUSH
7984: LD_VAR 0 1
7988: PPUSH
7989: CALL_OW 266
7993: PUSH
7994: LD_INT 2
7996: EQUAL
7997: OR
7998: PUSH
7999: LD_VAR 0 1
8003: PPUSH
8004: CALL_OW 266
8008: PUSH
8009: LD_INT 4
8011: EQUAL
8012: OR
8013: PUSH
8014: EMPTY
8015: LIST
8016: AND
8017: IFFALSE 8028
// ComUpgrade ( building ) ;
8019: LD_VAR 0 1
8023: PPUSH
8024: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
8028: LD_VAR 0 1
8032: PPUSH
8033: CALL_OW 255
8037: PUSH
8038: LD_INT 3
8040: EQUAL
8041: PUSH
8042: LD_VAR 0 1
8046: PPUSH
8047: CALL_OW 266
8051: PUSH
8052: LD_INT 32
8054: EQUAL
8055: AND
8056: IFFALSE 8097
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8058: LD_VAR 0 1
8062: PPUSH
8063: LD_INT 42
8065: PUSH
8066: LD_INT 43
8068: PUSH
8069: LD_INT 44
8071: PUSH
8072: LD_INT 46
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: PUSH
8081: LD_INT 1
8083: PPUSH
8084: LD_INT 4
8086: PPUSH
8087: CALL_OW 12
8091: ARRAY
8092: PPUSH
8093: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
8097: LD_VAR 0 1
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: LD_INT 3
8109: EQUAL
8110: PUSH
8111: LD_VAR 0 1
8115: PPUSH
8116: CALL_OW 266
8120: PUSH
8121: LD_INT 33
8123: EQUAL
8124: AND
8125: IFFALSE 8166
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8127: LD_VAR 0 1
8131: PPUSH
8132: LD_INT 42
8134: PUSH
8135: LD_INT 43
8137: PUSH
8138: LD_INT 44
8140: PUSH
8141: LD_INT 46
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: PUSH
8150: LD_INT 1
8152: PPUSH
8153: LD_INT 4
8155: PPUSH
8156: CALL_OW 12
8160: ARRAY
8161: PPUSH
8162: CALL_OW 208
// end ;
8166: PPOPN 1
8168: END
// on UnitDestroyed ( unit ) do begin if unit in russianTanks then
8169: LD_VAR 0 1
8173: PUSH
8174: LD_EXP 11
8178: IN
8179: IFFALSE 8197
// russianTanks := russianTanks diff unit ;
8181: LD_ADDR_EXP 11
8185: PUSH
8186: LD_EXP 11
8190: PUSH
8191: LD_VAR 0 1
8195: DIFF
8196: ST_TO_ADDR
// if unit in russianTimeLapsers then
8197: LD_VAR 0 1
8201: PUSH
8202: LD_EXP 12
8206: IN
8207: IFFALSE 8225
// russianTimeLapsers := russianTimeLapsers diff unit ;
8209: LD_ADDR_EXP 12
8213: PUSH
8214: LD_EXP 12
8218: PUSH
8219: LD_VAR 0 1
8223: DIFF
8224: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
8225: LD_VAR 0 1
8229: PPUSH
8230: CALL_OW 255
8234: PUSH
8235: LD_INT 3
8237: EQUAL
8238: PUSH
8239: LD_VAR 0 1
8243: PPUSH
8244: CALL_OW 247
8248: PUSH
8249: LD_INT 3
8251: EQUAL
8252: AND
8253: IFFALSE 8717
// begin if GetBType ( unit ) in [ 31 , 32 , 36 , 0 , 24 , 17 , 25 , 19 , 20 , 18 , 21 , 23 , 16 , 6 , 29 , 26 , 30 , 28 , 27 , 33 , 2 , 4 ] then
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL_OW 266
8264: PUSH
8265: LD_INT 31
8267: PUSH
8268: LD_INT 32
8270: PUSH
8271: LD_INT 36
8273: PUSH
8274: LD_INT 0
8276: PUSH
8277: LD_INT 24
8279: PUSH
8280: LD_INT 17
8282: PUSH
8283: LD_INT 25
8285: PUSH
8286: LD_INT 19
8288: PUSH
8289: LD_INT 20
8291: PUSH
8292: LD_INT 18
8294: PUSH
8295: LD_INT 21
8297: PUSH
8298: LD_INT 23
8300: PUSH
8301: LD_INT 16
8303: PUSH
8304: LD_INT 6
8306: PUSH
8307: LD_INT 29
8309: PUSH
8310: LD_INT 26
8312: PUSH
8313: LD_INT 30
8315: PUSH
8316: LD_INT 28
8318: PUSH
8319: LD_INT 27
8321: PUSH
8322: LD_INT 33
8324: PUSH
8325: LD_INT 2
8327: PUSH
8328: LD_INT 4
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: IN
8355: IFFALSE 8441
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
8357: LD_ADDR_EXP 10
8361: PUSH
8362: LD_EXP 10
8366: PUSH
8367: LD_VAR 0 1
8371: PPUSH
8372: CALL_OW 266
8376: ADD
8377: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8378: LD_ADDR_EXP 10
8382: PUSH
8383: LD_EXP 10
8387: PUSH
8388: LD_VAR 0 1
8392: PPUSH
8393: CALL_OW 250
8397: ADD
8398: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8399: LD_ADDR_EXP 10
8403: PUSH
8404: LD_EXP 10
8408: PUSH
8409: LD_VAR 0 1
8413: PPUSH
8414: CALL_OW 251
8418: ADD
8419: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8420: LD_ADDR_EXP 10
8424: PUSH
8425: LD_EXP 10
8429: PUSH
8430: LD_VAR 0 1
8434: PPUSH
8435: CALL_OW 254
8439: ADD
8440: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8441: LD_VAR 0 1
8445: PPUSH
8446: CALL_OW 266
8450: PUSH
8451: LD_INT 1
8453: EQUAL
8454: IFFALSE 8533
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8456: LD_ADDR_EXP 10
8460: PUSH
8461: LD_EXP 10
8465: PUSH
8466: LD_INT 0
8468: ADD
8469: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8470: LD_ADDR_EXP 10
8474: PUSH
8475: LD_EXP 10
8479: PUSH
8480: LD_VAR 0 1
8484: PPUSH
8485: CALL_OW 250
8489: ADD
8490: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8491: LD_ADDR_EXP 10
8495: PUSH
8496: LD_EXP 10
8500: PUSH
8501: LD_VAR 0 1
8505: PPUSH
8506: CALL_OW 251
8510: ADD
8511: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8512: LD_ADDR_EXP 10
8516: PUSH
8517: LD_EXP 10
8521: PUSH
8522: LD_VAR 0 1
8526: PPUSH
8527: CALL_OW 254
8531: ADD
8532: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8533: LD_VAR 0 1
8537: PPUSH
8538: CALL_OW 266
8542: PUSH
8543: LD_INT 3
8545: EQUAL
8546: IFFALSE 8625
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8548: LD_ADDR_EXP 10
8552: PUSH
8553: LD_EXP 10
8557: PUSH
8558: LD_INT 2
8560: ADD
8561: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8562: LD_ADDR_EXP 10
8566: PUSH
8567: LD_EXP 10
8571: PUSH
8572: LD_VAR 0 1
8576: PPUSH
8577: CALL_OW 250
8581: ADD
8582: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8583: LD_ADDR_EXP 10
8587: PUSH
8588: LD_EXP 10
8592: PUSH
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 251
8602: ADD
8603: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8604: LD_ADDR_EXP 10
8608: PUSH
8609: LD_EXP 10
8613: PUSH
8614: LD_VAR 0 1
8618: PPUSH
8619: CALL_OW 254
8623: ADD
8624: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8625: LD_VAR 0 1
8629: PPUSH
8630: CALL_OW 266
8634: PUSH
8635: LD_INT 5
8637: EQUAL
8638: IFFALSE 8717
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8640: LD_ADDR_EXP 10
8644: PUSH
8645: LD_EXP 10
8649: PUSH
8650: LD_INT 4
8652: ADD
8653: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8654: LD_ADDR_EXP 10
8658: PUSH
8659: LD_EXP 10
8663: PUSH
8664: LD_VAR 0 1
8668: PPUSH
8669: CALL_OW 250
8673: ADD
8674: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8675: LD_ADDR_EXP 10
8679: PUSH
8680: LD_EXP 10
8684: PUSH
8685: LD_VAR 0 1
8689: PPUSH
8690: CALL_OW 251
8694: ADD
8695: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8696: LD_ADDR_EXP 10
8700: PUSH
8701: LD_EXP 10
8705: PUSH
8706: LD_VAR 0 1
8710: PPUSH
8711: CALL_OW 254
8715: ADD
8716: ST_TO_ADDR
// end ; end ; end ;
8717: PPOPN 1
8719: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_double_laser then
8720: LD_VAR 0 3
8724: PPUSH
8725: CALL_OW 264
8729: PUSH
8730: LD_INT 10
8732: EQUAL
8733: IFFALSE 8749
// destroyCounter := destroyCounter + 1 ;
8735: LD_ADDR_EXP 17
8739: PUSH
8740: LD_EXP 17
8744: PUSH
8745: LD_INT 1
8747: PLUS
8748: ST_TO_ADDR
// end ;
8749: PPOPN 3
8751: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8752: LD_VAR 0 2
8756: PUSH
8757: LD_INT 1
8759: EQUAL
8760: PUSH
8761: LD_VAR 0 2
8765: PUSH
8766: LD_INT 40
8768: EQUAL
8769: OR
8770: IFFALSE 8894
// if GetSide ( vehicle ) = 3 then
8772: LD_VAR 0 1
8776: PPUSH
8777: CALL_OW 255
8781: PUSH
8782: LD_INT 3
8784: EQUAL
8785: IFFALSE 8894
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8787: LD_VAR 0 1
8791: PPUSH
8792: CALL_OW 264
8796: PUSH
8797: LD_INT 47
8799: EQUAL
8800: PUSH
8801: LD_VAR 0 1
8805: PPUSH
8806: CALL_OW 264
8810: PUSH
8811: LD_INT 46
8813: EQUAL
8814: OR
8815: PUSH
8816: LD_VAR 0 1
8820: PPUSH
8821: CALL_OW 264
8825: PUSH
8826: LD_INT 45
8828: EQUAL
8829: OR
8830: PUSH
8831: LD_VAR 0 1
8835: PPUSH
8836: CALL_OW 264
8840: PUSH
8841: LD_INT 44
8843: EQUAL
8844: OR
8845: IFFALSE 8863
// russianTanks = russianTanks ^ vehicle ;
8847: LD_ADDR_EXP 11
8851: PUSH
8852: LD_EXP 11
8856: PUSH
8857: LD_VAR 0 1
8861: ADD
8862: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8863: LD_VAR 0 1
8867: PPUSH
8868: CALL_OW 264
8872: PUSH
8873: LD_INT 49
8875: EQUAL
8876: IFFALSE 8894
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8878: LD_ADDR_EXP 12
8882: PUSH
8883: LD_EXP 12
8887: PUSH
8888: LD_VAR 0 1
8892: ADD
8893: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8894: LD_VAR 0 1
8898: PPUSH
8899: CALL_OW 255
8903: PUSH
8904: LD_INT 1
8906: EQUAL
8907: PUSH
8908: LD_VAR 0 1
8912: PPUSH
8913: CALL_OW 264
8917: PUSH
8918: LD_INT 10
8920: EQUAL
8921: AND
8922: IFFALSE 8938
// amLaserCounter = amLaserCounter + 1 ;
8924: LD_ADDR_EXP 9
8928: PUSH
8929: LD_EXP 9
8933: PUSH
8934: LD_INT 1
8936: PLUS
8937: ST_TO_ADDR
// end ;
8938: PPOPN 2
8940: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8941: LD_VAR 0 1
8945: PPUSH
8946: CALL 24059 0 1
// end ; end_of_file
8950: PPOPN 1
8952: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
8953: LD_EXP 1
8957: PPUSH
8958: CALL_OW 310
8962: PPUSH
8963: LD_INT 12
8965: PPUSH
8966: CALL_OW 308
8970: PUSH
8971: LD_EXP 15
8975: PUSH
8976: LD_INT 0
8978: EQUAL
8979: AND
8980: IFFALSE 9326
8982: GO 8984
8984: DISABLE
8985: LD_INT 0
8987: PPUSH
8988: PPUSH
// begin enable ;
8989: ENABLE
// if JMMGirl = 1 then
8990: LD_EXP 7
8994: PUSH
8995: LD_INT 1
8997: EQUAL
8998: IFFALSE 9015
// JMMGirlVeh = IsInUnit ( Joan ) ;
9000: LD_ADDR_VAR 0 1
9004: PUSH
9005: LD_EXP 2
9009: PPUSH
9010: CALL_OW 310
9014: ST_TO_ADDR
// if JMMGirl = 2 then
9015: LD_EXP 7
9019: PUSH
9020: LD_INT 2
9022: EQUAL
9023: IFFALSE 9040
// JMMGirlVeh = IsInUnit ( Lisa ) ;
9025: LD_ADDR_VAR 0 1
9029: PUSH
9030: LD_EXP 3
9034: PPUSH
9035: CALL_OW 310
9039: ST_TO_ADDR
// if JMMGirl = 3 then
9040: LD_EXP 7
9044: PUSH
9045: LD_INT 3
9047: EQUAL
9048: IFFALSE 9065
// JMMGirlVeh = IsInUnit ( Connie ) ;
9050: LD_ADDR_VAR 0 1
9054: PUSH
9055: LD_EXP 4
9059: PPUSH
9060: CALL_OW 310
9064: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9065: LD_EXP 1
9069: PPUSH
9070: CALL_OW 310
9074: PPUSH
9075: LD_EXP 2
9079: PPUSH
9080: CALL_OW 310
9084: PPUSH
9085: CALL_OW 296
9089: PUSH
9090: LD_INT 10
9092: LESS
9093: PUSH
9094: LD_EXP 1
9098: PPUSH
9099: CALL_OW 310
9103: PPUSH
9104: LD_EXP 3
9108: PPUSH
9109: CALL_OW 310
9113: PPUSH
9114: CALL_OW 296
9118: PUSH
9119: LD_INT 10
9121: LESS
9122: OR
9123: PUSH
9124: LD_EXP 1
9128: PPUSH
9129: CALL_OW 310
9133: PPUSH
9134: LD_EXP 4
9138: PPUSH
9139: CALL_OW 310
9143: PPUSH
9144: CALL_OW 296
9148: PUSH
9149: LD_INT 10
9151: LESS
9152: OR
9153: IFFALSE 9247
// begin case Query ( Q3b ) of 1 :
9155: LD_STRING Q3b
9157: PPUSH
9158: CALL_OW 97
9162: PUSH
9163: LD_INT 1
9165: DOUBLE
9166: EQUAL
9167: IFTRUE 9171
9169: GO 9244
9171: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9172: LD_VAR 0 1
9176: PPUSH
9177: CALL_OW 265
9181: PUSH
9182: EMPTY
9183: LIST
9184: PUSH
9185: LD_VAR 0 1
9189: PPUSH
9190: CALL_OW 262
9194: PUSH
9195: EMPTY
9196: LIST
9197: PUSH
9198: LD_VAR 0 1
9202: PPUSH
9203: CALL_OW 263
9207: PUSH
9208: EMPTY
9209: LIST
9210: PUSH
9211: LD_VAR 0 1
9215: PPUSH
9216: CALL_OW 264
9220: PUSH
9221: EMPTY
9222: LIST
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: PPUSH
9230: LD_STRING 14_JMMGirlVeh_1
9232: PPUSH
9233: CALL_OW 39
// FinishMission ;
9237: CALL 9467 0 0
// disable ;
9241: DISABLE
// end ; end ;
9242: GO 9245
9244: POP
// end else
9245: GO 9326
// begin if JMMGirl = 1 then
9247: LD_EXP 7
9251: PUSH
9252: LD_INT 1
9254: EQUAL
9255: IFFALSE 9272
// dec := Query ( Q3bJ ) else
9257: LD_ADDR_VAR 0 2
9261: PUSH
9262: LD_STRING Q3bJ
9264: PPUSH
9265: CALL_OW 97
9269: ST_TO_ADDR
9270: GO 9310
// if JMMGirl = 2 then
9272: LD_EXP 7
9276: PUSH
9277: LD_INT 2
9279: EQUAL
9280: IFFALSE 9297
// dec := Query ( Q3bL ) else
9282: LD_ADDR_VAR 0 2
9286: PUSH
9287: LD_STRING Q3bL
9289: PPUSH
9290: CALL_OW 97
9294: ST_TO_ADDR
9295: GO 9310
// dec := Query ( Q3bX ) ;
9297: LD_ADDR_VAR 0 2
9301: PUSH
9302: LD_STRING Q3bX
9304: PPUSH
9305: CALL_OW 97
9309: ST_TO_ADDR
// if dec = 1 then
9310: LD_VAR 0 2
9314: PUSH
9315: LD_INT 1
9317: EQUAL
9318: IFFALSE 9326
// begin FinishMission ;
9320: CALL 9467 0 0
// exit ;
9324: GO 9326
// end ; end ; end ;
9326: PPOPN 2
9328: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9329: LD_INT 22
9331: PUSH
9332: LD_INT 3
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 21
9341: PUSH
9342: LD_INT 1
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PPUSH
9353: CALL_OW 69
9357: PUSH
9358: LD_INT 0
9360: EQUAL
9361: PUSH
9362: LD_EXP 15
9366: PUSH
9367: LD_INT 0
9369: EQUAL
9370: AND
9371: IFFALSE 9466
9373: GO 9375
9375: DISABLE
// begin DialogueOn ;
9376: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9380: LD_EXP 1
9384: PPUSH
9385: LD_STRING DEnd-JMM-1
9387: PPUSH
9388: CALL_OW 88
// if JMMGirl = 1 then
9392: LD_EXP 7
9396: PUSH
9397: LD_INT 1
9399: EQUAL
9400: IFFALSE 9414
// Say ( Joan , DEnd-Joan-1 ) ;
9402: LD_EXP 2
9406: PPUSH
9407: LD_STRING DEnd-Joan-1
9409: PPUSH
9410: CALL_OW 88
// if JMMGirl = 2 then
9414: LD_EXP 7
9418: PUSH
9419: LD_INT 2
9421: EQUAL
9422: IFFALSE 9436
// Say ( Lisa , DEnd-Lisa-1 ) ;
9424: LD_EXP 3
9428: PPUSH
9429: LD_STRING DEnd-Lisa-1
9431: PPUSH
9432: CALL_OW 88
// if JMMGirl = 3 then
9436: LD_EXP 7
9440: PUSH
9441: LD_INT 3
9443: EQUAL
9444: IFFALSE 9458
// Say ( Connie , DEnd-Con-1 ) ;
9446: LD_EXP 4
9450: PPUSH
9451: LD_STRING DEnd-Con-1
9453: PPUSH
9454: CALL_OW 88
// DialogueOff ;
9458: CALL_OW 7
// FinishMission ;
9462: CALL 9467 0 0
// end ;
9466: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9467: LD_INT 0
9469: PPUSH
9470: PPUSH
9471: PPUSH
9472: PPUSH
9473: PPUSH
// m1 := false ;
9474: LD_ADDR_VAR 0 3
9478: PUSH
9479: LD_INT 0
9481: ST_TO_ADDR
// m2 := false ;
9482: LD_ADDR_VAR 0 4
9486: PUSH
9487: LD_INT 0
9489: ST_TO_ADDR
// m3 := false ;
9490: LD_ADDR_VAR 0 5
9494: PUSH
9495: LD_INT 0
9497: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9498: LD_EXP 1
9502: PPUSH
9503: LD_STRING 14_JMM
9505: PPUSH
9506: CALL_OW 38
// if tick <= 50 50$00 then
9510: LD_OWVAR 1
9514: PUSH
9515: LD_INT 105000
9517: LESSEQUAL
9518: IFFALSE 9527
// SetAchievement ( ACH_ASPEED_14 ) ;
9520: LD_STRING ACH_ASPEED_14
9522: PPUSH
9523: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9527: LD_EXP 1
9531: PPUSH
9532: CALL_OW 310
9536: PUSH
9537: LD_EXP 1
9541: PPUSH
9542: CALL_OW 310
9546: PPUSH
9547: CALL_OW 247
9551: PUSH
9552: LD_INT 2
9554: EQUAL
9555: AND
9556: IFFALSE 9638
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9558: LD_ADDR_VAR 0 2
9562: PUSH
9563: LD_EXP 1
9567: PPUSH
9568: CALL_OW 310
9572: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9573: LD_VAR 0 2
9577: PPUSH
9578: CALL_OW 265
9582: PUSH
9583: EMPTY
9584: LIST
9585: PUSH
9586: LD_VAR 0 2
9590: PPUSH
9591: CALL_OW 262
9595: PUSH
9596: EMPTY
9597: LIST
9598: PUSH
9599: LD_VAR 0 2
9603: PPUSH
9604: CALL_OW 263
9608: PUSH
9609: EMPTY
9610: LIST
9611: PUSH
9612: LD_VAR 0 2
9616: PPUSH
9617: CALL_OW 264
9621: PUSH
9622: EMPTY
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: PPUSH
9631: LD_STRING 14_JMMVeh_1
9633: PPUSH
9634: CALL_OW 39
// end ; if fastEnd = 1 then
9638: LD_EXP 15
9642: PUSH
9643: LD_INT 1
9645: EQUAL
9646: IFFALSE 9735
// begin AddMedal ( fastend , - 1 ) ;
9648: LD_STRING fastend
9650: PPUSH
9651: LD_INT 1
9653: NEG
9654: PPUSH
9655: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9659: LD_STRING fastend
9661: PPUSH
9662: LD_INT 1
9664: NEG
9665: PPUSH
9666: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9670: LD_STRING fastend
9672: PPUSH
9673: LD_INT 1
9675: NEG
9676: PPUSH
9677: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9681: LD_EXP 7
9685: PPUSH
9686: LD_STRING 14_JMMGirl_1
9688: PPUSH
9689: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9693: LD_INT 0
9695: PPUSH
9696: LD_STRING 14_JMMGirlStatus_1
9698: PPUSH
9699: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9703: LD_INT 0
9705: PPUSH
9706: LD_STRING 14_KappaStatus_1
9708: PPUSH
9709: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9713: LD_STRING Eliminate
9715: PPUSH
9716: CALL_OW 102
// RewardPeople ( JMM ) ;
9720: LD_EXP 1
9724: PPUSH
9725: CALL_OW 43
// YouWin ;
9729: CALL_OW 103
// exit ;
9733: GO 10560
// end ; if fastEnd = 0 then
9735: LD_EXP 15
9739: PUSH
9740: LD_INT 0
9742: EQUAL
9743: IFFALSE 10453
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9745: LD_EXP 7
9749: PPUSH
9750: LD_STRING 14_JMMGirl_1
9752: PPUSH
9753: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9757: LD_INT 22
9759: PUSH
9760: LD_INT 3
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: LD_INT 21
9769: PUSH
9770: LD_INT 1
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PPUSH
9781: CALL_OW 69
9785: PUSH
9786: LD_INT 0
9788: EQUAL
9789: PUSH
9790: LD_INT 48
9792: PPUSH
9793: CALL_OW 255
9797: PUSH
9798: LD_INT 1
9800: EQUAL
9801: AND
9802: IFFALSE 9816
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9804: LD_INT 1
9806: PPUSH
9807: LD_STRING 14_KappaStatus_1
9809: PPUSH
9810: CALL_OW 39
9814: GO 9826
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9816: LD_INT 0
9818: PPUSH
9819: LD_STRING 14_KappaStatus_1
9821: PPUSH
9822: CALL_OW 39
// case JMMGirl of 1 :
9826: LD_EXP 7
9830: PUSH
9831: LD_INT 1
9833: DOUBLE
9834: EQUAL
9835: IFTRUE 9839
9837: GO 9995
9839: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9840: LD_EXP 2
9844: PPUSH
9845: CALL_OW 302
9849: PUSH
9850: LD_EXP 2
9854: PPUSH
9855: CALL_OW 255
9859: PUSH
9860: LD_INT 1
9862: EQUAL
9863: AND
9864: PUSH
9865: LD_INT 22
9867: PUSH
9868: LD_INT 3
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 21
9877: PUSH
9878: LD_INT 1
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PPUSH
9889: CALL_OW 69
9893: PUSH
9894: LD_INT 0
9896: EQUAL
9897: PUSH
9898: LD_EXP 1
9902: PPUSH
9903: CALL_OW 310
9907: PPUSH
9908: LD_EXP 2
9912: PPUSH
9913: CALL_OW 310
9917: PPUSH
9918: CALL_OW 296
9922: PUSH
9923: LD_INT 10
9925: LESS
9926: OR
9927: AND
9928: IFFALSE 9972
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9930: LD_INT 1
9932: PPUSH
9933: LD_STRING 14_JMMGirlStatus_1
9935: PPUSH
9936: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9940: LD_EXP 2
9944: PPUSH
9945: LD_STRING 14_Joan
9947: PPUSH
9948: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9952: LD_STRING protect
9954: PPUSH
9955: LD_INT 1
9957: PPUSH
9958: CALL_OW 101
// m1 := true ;
9962: LD_ADDR_VAR 0 3
9966: PUSH
9967: LD_INT 1
9969: ST_TO_ADDR
// end else
9970: GO 9993
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9972: LD_INT 0
9974: PPUSH
9975: LD_STRING 14_JMMGirlStatus_1
9977: PPUSH
9978: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9982: LD_STRING protect
9984: PPUSH
9985: LD_INT 1
9987: NEG
9988: PPUSH
9989: CALL_OW 101
// end ; end ; 2 :
9993: GO 10324
9995: LD_INT 2
9997: DOUBLE
9998: EQUAL
9999: IFTRUE 10003
10001: GO 10159
10003: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10004: LD_EXP 3
10008: PPUSH
10009: CALL_OW 302
10013: PUSH
10014: LD_EXP 3
10018: PPUSH
10019: CALL_OW 255
10023: PUSH
10024: LD_INT 1
10026: EQUAL
10027: AND
10028: PUSH
10029: LD_INT 22
10031: PUSH
10032: LD_INT 3
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PUSH
10039: LD_INT 21
10041: PUSH
10042: LD_INT 1
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PPUSH
10053: CALL_OW 69
10057: PUSH
10058: LD_INT 0
10060: EQUAL
10061: PUSH
10062: LD_EXP 1
10066: PPUSH
10067: CALL_OW 310
10071: PPUSH
10072: LD_EXP 3
10076: PPUSH
10077: CALL_OW 310
10081: PPUSH
10082: CALL_OW 296
10086: PUSH
10087: LD_INT 10
10089: LESS
10090: OR
10091: AND
10092: IFFALSE 10136
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10094: LD_INT 1
10096: PPUSH
10097: LD_STRING 14_JMMGirlStatus_1
10099: PPUSH
10100: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10104: LD_EXP 3
10108: PPUSH
10109: LD_STRING 14_Lisa
10111: PPUSH
10112: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10116: LD_STRING protect
10118: PPUSH
10119: LD_INT 1
10121: PPUSH
10122: CALL_OW 101
// m1 := true ;
10126: LD_ADDR_VAR 0 3
10130: PUSH
10131: LD_INT 1
10133: ST_TO_ADDR
// end else
10134: GO 10157
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10136: LD_INT 0
10138: PPUSH
10139: LD_STRING 14_JMMGirlStatus_1
10141: PPUSH
10142: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10146: LD_STRING protect
10148: PPUSH
10149: LD_INT 2
10151: NEG
10152: PPUSH
10153: CALL_OW 101
// end ; end ; 3 :
10157: GO 10324
10159: LD_INT 3
10161: DOUBLE
10162: EQUAL
10163: IFTRUE 10167
10165: GO 10323
10167: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10168: LD_EXP 4
10172: PPUSH
10173: CALL_OW 302
10177: PUSH
10178: LD_EXP 4
10182: PPUSH
10183: CALL_OW 255
10187: PUSH
10188: LD_INT 1
10190: EQUAL
10191: AND
10192: PUSH
10193: LD_INT 22
10195: PUSH
10196: LD_INT 3
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: LD_INT 21
10205: PUSH
10206: LD_INT 1
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PPUSH
10217: CALL_OW 69
10221: PUSH
10222: LD_INT 0
10224: EQUAL
10225: PUSH
10226: LD_EXP 1
10230: PPUSH
10231: CALL_OW 310
10235: PPUSH
10236: LD_EXP 4
10240: PPUSH
10241: CALL_OW 310
10245: PPUSH
10246: CALL_OW 296
10250: PUSH
10251: LD_INT 10
10253: LESS
10254: OR
10255: AND
10256: IFFALSE 10300
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10258: LD_INT 1
10260: PPUSH
10261: LD_STRING 14_JMMGirlStatus_1
10263: PPUSH
10264: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10268: LD_EXP 4
10272: PPUSH
10273: LD_STRING 14_Connie
10275: PPUSH
10276: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10280: LD_STRING protect
10282: PPUSH
10283: LD_INT 1
10285: PPUSH
10286: CALL_OW 101
// m1 := true ;
10290: LD_ADDR_VAR 0 3
10294: PUSH
10295: LD_INT 1
10297: ST_TO_ADDR
// end else
10298: GO 10321
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10300: LD_INT 0
10302: PPUSH
10303: LD_STRING 14_JMMGirlStatus_1
10305: PPUSH
10306: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10310: LD_STRING protect
10312: PPUSH
10313: LD_INT 3
10315: NEG
10316: PPUSH
10317: CALL_OW 101
// end ; end ; end ;
10321: GO 10324
10323: POP
// if amLaserCounter >= 2 then
10324: LD_EXP 9
10328: PUSH
10329: LD_INT 2
10331: GREATEREQUAL
10332: IFFALSE 10354
// begin AddMedal ( double , 1 ) ;
10334: LD_STRING double
10336: PPUSH
10337: LD_INT 1
10339: PPUSH
10340: CALL_OW 101
// m2 := true ;
10344: LD_ADDR_VAR 0 4
10348: PUSH
10349: LD_INT 1
10351: ST_TO_ADDR
// end else
10352: GO 10388
// begin if amLaserCounter = 1 then
10354: LD_EXP 9
10358: PUSH
10359: LD_INT 1
10361: EQUAL
10362: IFFALSE 10377
// AddMedal ( double , - 2 ) else
10364: LD_STRING double
10366: PPUSH
10367: LD_INT 2
10369: NEG
10370: PPUSH
10371: CALL_OW 101
10375: GO 10388
// AddMedal ( double , - 1 ) ;
10377: LD_STRING double
10379: PPUSH
10380: LD_INT 1
10382: NEG
10383: PPUSH
10384: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10388: LD_INT 22
10390: PUSH
10391: LD_INT 3
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 21
10400: PUSH
10401: LD_INT 1
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PPUSH
10412: CALL_OW 69
10416: PUSH
10417: LD_INT 0
10419: EQUAL
10420: IFFALSE 10442
// begin AddMedal ( base , 1 ) ;
10422: LD_STRING base
10424: PPUSH
10425: LD_INT 1
10427: PPUSH
10428: CALL_OW 101
// m3 := true ;
10432: LD_ADDR_VAR 0 5
10436: PUSH
10437: LD_INT 1
10439: ST_TO_ADDR
// end else
10440: GO 10453
// AddMedal ( base , - 1 ) ;
10442: LD_STRING base
10444: PPUSH
10445: LD_INT 1
10447: NEG
10448: PPUSH
10449: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10453: LD_VAR 0 3
10457: PUSH
10458: LD_VAR 0 4
10462: AND
10463: PUSH
10464: LD_VAR 0 5
10468: AND
10469: PUSH
10470: LD_OWVAR 67
10474: PUSH
10475: LD_INT 3
10477: GREATEREQUAL
10478: AND
10479: IFFALSE 10491
// SetAchievementEX ( ACH_AMER , 14 ) ;
10481: LD_STRING ACH_AMER
10483: PPUSH
10484: LD_INT 14
10486: PPUSH
10487: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10491: LD_STRING Eliminate
10493: PPUSH
10494: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10498: LD_INT 22
10500: PUSH
10501: LD_INT 1
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 3
10510: PUSH
10511: LD_INT 25
10513: PUSH
10514: LD_INT 12
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 3
10527: PUSH
10528: LD_INT 25
10530: PUSH
10531: LD_INT 16
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: LIST
10546: PPUSH
10547: CALL_OW 69
10551: PPUSH
10552: CALL_OW 43
// YouWin ;
10556: CALL_OW 103
// end ; end_of_file
10560: LD_VAR 0 1
10564: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10565: LD_EXP 1
10569: PPUSH
10570: CALL_OW 301
10574: IFFALSE 10586
10576: GO 10578
10578: DISABLE
// YouLost ( JMM ) ; end_of_file
10579: LD_STRING JMM
10581: PPUSH
10582: CALL_OW 104
10586: END
// every 1 1$0 do
10587: GO 10589
10589: DISABLE
// begin enable ;
10590: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10591: LD_INT 3
10593: PPUSH
10594: LD_INT 5
10596: PPUSH
10597: CALL_OW 12
10601: PPUSH
10602: LD_INT 13
10604: PPUSH
10605: LD_INT 1
10607: PPUSH
10608: CALL_OW 55
// end ; end_of_file
10612: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
10613: LD_INT 0
10615: PPUSH
// ar_miner := 81 ;
10616: LD_ADDR_EXP 26
10620: PUSH
10621: LD_INT 81
10623: ST_TO_ADDR
// ar_crane := 88 ;
10624: LD_ADDR_EXP 25
10628: PUSH
10629: LD_INT 88
10631: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10632: LD_ADDR_EXP 20
10636: PUSH
10637: LD_INT 89
10639: ST_TO_ADDR
// us_hack := 99 ;
10640: LD_ADDR_EXP 21
10644: PUSH
10645: LD_INT 99
10647: ST_TO_ADDR
// us_artillery := 97 ;
10648: LD_ADDR_EXP 22
10652: PUSH
10653: LD_INT 97
10655: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10656: LD_ADDR_EXP 23
10660: PUSH
10661: LD_INT 91
10663: ST_TO_ADDR
// ar_mortar := 92 ;
10664: LD_ADDR_EXP 24
10668: PUSH
10669: LD_INT 92
10671: ST_TO_ADDR
// ru_radar := 98 ;
10672: LD_ADDR_EXP 19
10676: PUSH
10677: LD_INT 98
10679: ST_TO_ADDR
// tech_Artillery := 80 ;
10680: LD_ADDR_EXP 27
10684: PUSH
10685: LD_INT 80
10687: ST_TO_ADDR
// tech_RadMat := 81 ;
10688: LD_ADDR_EXP 28
10692: PUSH
10693: LD_INT 81
10695: ST_TO_ADDR
// tech_BasicTools := 82 ;
10696: LD_ADDR_EXP 29
10700: PUSH
10701: LD_INT 82
10703: ST_TO_ADDR
// tech_Cargo := 83 ;
10704: LD_ADDR_EXP 30
10708: PUSH
10709: LD_INT 83
10711: ST_TO_ADDR
// tech_Track := 84 ;
10712: LD_ADDR_EXP 31
10716: PUSH
10717: LD_INT 84
10719: ST_TO_ADDR
// tech_Crane := 85 ;
10720: LD_ADDR_EXP 32
10724: PUSH
10725: LD_INT 85
10727: ST_TO_ADDR
// tech_Bulldozer := 86 ;
10728: LD_ADDR_EXP 33
10732: PUSH
10733: LD_INT 86
10735: ST_TO_ADDR
// tech_Hovercraft := 87 ;
10736: LD_ADDR_EXP 34
10740: PUSH
10741: LD_INT 87
10743: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
10744: LD_ADDR_EXP 35
10748: PUSH
10749: LD_INT 88
10751: ST_TO_ADDR
// class_mastodont := 31 ;
10752: LD_ADDR_EXP 36
10756: PUSH
10757: LD_INT 31
10759: ST_TO_ADDR
// class_horse := 21 ;
10760: LD_ADDR_EXP 37
10764: PUSH
10765: LD_INT 21
10767: ST_TO_ADDR
// end ;
10768: LD_VAR 0 1
10772: RET
// every 1 do
10773: GO 10775
10775: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
10776: CALL 10613 0 0
10780: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10781: LD_INT 0
10783: PPUSH
// if p2 = 100 then
10784: LD_VAR 0 2
10788: PUSH
10789: LD_INT 100
10791: EQUAL
10792: IFFALSE 11741
// begin if not StreamModeActive then
10794: LD_EXP 38
10798: NOT
10799: IFFALSE 10809
// StreamModeActive := true ;
10801: LD_ADDR_EXP 38
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// if p3 = 0 then
10809: LD_VAR 0 3
10813: PUSH
10814: LD_INT 0
10816: EQUAL
10817: IFFALSE 10823
// InitStreamMode ;
10819: CALL 11901 0 0
// if p3 = 1 then
10823: LD_VAR 0 3
10827: PUSH
10828: LD_INT 1
10830: EQUAL
10831: IFFALSE 10841
// sRocket := true ;
10833: LD_ADDR_EXP 43
10837: PUSH
10838: LD_INT 1
10840: ST_TO_ADDR
// if p3 = 2 then
10841: LD_VAR 0 3
10845: PUSH
10846: LD_INT 2
10848: EQUAL
10849: IFFALSE 10859
// sSpeed := true ;
10851: LD_ADDR_EXP 42
10855: PUSH
10856: LD_INT 1
10858: ST_TO_ADDR
// if p3 = 3 then
10859: LD_VAR 0 3
10863: PUSH
10864: LD_INT 3
10866: EQUAL
10867: IFFALSE 10877
// sEngine := true ;
10869: LD_ADDR_EXP 44
10873: PUSH
10874: LD_INT 1
10876: ST_TO_ADDR
// if p3 = 4 then
10877: LD_VAR 0 3
10881: PUSH
10882: LD_INT 4
10884: EQUAL
10885: IFFALSE 10895
// sSpec := true ;
10887: LD_ADDR_EXP 41
10891: PUSH
10892: LD_INT 1
10894: ST_TO_ADDR
// if p3 = 5 then
10895: LD_VAR 0 3
10899: PUSH
10900: LD_INT 5
10902: EQUAL
10903: IFFALSE 10913
// sLevel := true ;
10905: LD_ADDR_EXP 45
10909: PUSH
10910: LD_INT 1
10912: ST_TO_ADDR
// if p3 = 6 then
10913: LD_VAR 0 3
10917: PUSH
10918: LD_INT 6
10920: EQUAL
10921: IFFALSE 10931
// sArmoury := true ;
10923: LD_ADDR_EXP 46
10927: PUSH
10928: LD_INT 1
10930: ST_TO_ADDR
// if p3 = 7 then
10931: LD_VAR 0 3
10935: PUSH
10936: LD_INT 7
10938: EQUAL
10939: IFFALSE 10949
// sRadar := true ;
10941: LD_ADDR_EXP 47
10945: PUSH
10946: LD_INT 1
10948: ST_TO_ADDR
// if p3 = 8 then
10949: LD_VAR 0 3
10953: PUSH
10954: LD_INT 8
10956: EQUAL
10957: IFFALSE 10967
// sBunker := true ;
10959: LD_ADDR_EXP 48
10963: PUSH
10964: LD_INT 1
10966: ST_TO_ADDR
// if p3 = 9 then
10967: LD_VAR 0 3
10971: PUSH
10972: LD_INT 9
10974: EQUAL
10975: IFFALSE 10985
// sHack := true ;
10977: LD_ADDR_EXP 49
10981: PUSH
10982: LD_INT 1
10984: ST_TO_ADDR
// if p3 = 10 then
10985: LD_VAR 0 3
10989: PUSH
10990: LD_INT 10
10992: EQUAL
10993: IFFALSE 11003
// sFire := true ;
10995: LD_ADDR_EXP 50
10999: PUSH
11000: LD_INT 1
11002: ST_TO_ADDR
// if p3 = 11 then
11003: LD_VAR 0 3
11007: PUSH
11008: LD_INT 11
11010: EQUAL
11011: IFFALSE 11021
// sRefresh := true ;
11013: LD_ADDR_EXP 51
11017: PUSH
11018: LD_INT 1
11020: ST_TO_ADDR
// if p3 = 12 then
11021: LD_VAR 0 3
11025: PUSH
11026: LD_INT 12
11028: EQUAL
11029: IFFALSE 11039
// sExp := true ;
11031: LD_ADDR_EXP 52
11035: PUSH
11036: LD_INT 1
11038: ST_TO_ADDR
// if p3 = 13 then
11039: LD_VAR 0 3
11043: PUSH
11044: LD_INT 13
11046: EQUAL
11047: IFFALSE 11057
// sDepot := true ;
11049: LD_ADDR_EXP 53
11053: PUSH
11054: LD_INT 1
11056: ST_TO_ADDR
// if p3 = 14 then
11057: LD_VAR 0 3
11061: PUSH
11062: LD_INT 14
11064: EQUAL
11065: IFFALSE 11075
// sFlag := true ;
11067: LD_ADDR_EXP 54
11071: PUSH
11072: LD_INT 1
11074: ST_TO_ADDR
// if p3 = 15 then
11075: LD_VAR 0 3
11079: PUSH
11080: LD_INT 15
11082: EQUAL
11083: IFFALSE 11093
// sKamikadze := true ;
11085: LD_ADDR_EXP 62
11089: PUSH
11090: LD_INT 1
11092: ST_TO_ADDR
// if p3 = 16 then
11093: LD_VAR 0 3
11097: PUSH
11098: LD_INT 16
11100: EQUAL
11101: IFFALSE 11111
// sTroll := true ;
11103: LD_ADDR_EXP 63
11107: PUSH
11108: LD_INT 1
11110: ST_TO_ADDR
// if p3 = 17 then
11111: LD_VAR 0 3
11115: PUSH
11116: LD_INT 17
11118: EQUAL
11119: IFFALSE 11129
// sSlow := true ;
11121: LD_ADDR_EXP 64
11125: PUSH
11126: LD_INT 1
11128: ST_TO_ADDR
// if p3 = 18 then
11129: LD_VAR 0 3
11133: PUSH
11134: LD_INT 18
11136: EQUAL
11137: IFFALSE 11147
// sLack := true ;
11139: LD_ADDR_EXP 65
11143: PUSH
11144: LD_INT 1
11146: ST_TO_ADDR
// if p3 = 19 then
11147: LD_VAR 0 3
11151: PUSH
11152: LD_INT 19
11154: EQUAL
11155: IFFALSE 11165
// sTank := true ;
11157: LD_ADDR_EXP 67
11161: PUSH
11162: LD_INT 1
11164: ST_TO_ADDR
// if p3 = 20 then
11165: LD_VAR 0 3
11169: PUSH
11170: LD_INT 20
11172: EQUAL
11173: IFFALSE 11183
// sRemote := true ;
11175: LD_ADDR_EXP 68
11179: PUSH
11180: LD_INT 1
11182: ST_TO_ADDR
// if p3 = 21 then
11183: LD_VAR 0 3
11187: PUSH
11188: LD_INT 21
11190: EQUAL
11191: IFFALSE 11201
// sPowell := true ;
11193: LD_ADDR_EXP 69
11197: PUSH
11198: LD_INT 1
11200: ST_TO_ADDR
// if p3 = 22 then
11201: LD_VAR 0 3
11205: PUSH
11206: LD_INT 22
11208: EQUAL
11209: IFFALSE 11219
// sTeleport := true ;
11211: LD_ADDR_EXP 72
11215: PUSH
11216: LD_INT 1
11218: ST_TO_ADDR
// if p3 = 23 then
11219: LD_VAR 0 3
11223: PUSH
11224: LD_INT 23
11226: EQUAL
11227: IFFALSE 11237
// sOilTower := true ;
11229: LD_ADDR_EXP 74
11233: PUSH
11234: LD_INT 1
11236: ST_TO_ADDR
// if p3 = 24 then
11237: LD_VAR 0 3
11241: PUSH
11242: LD_INT 24
11244: EQUAL
11245: IFFALSE 11255
// sShovel := true ;
11247: LD_ADDR_EXP 75
11251: PUSH
11252: LD_INT 1
11254: ST_TO_ADDR
// if p3 = 25 then
11255: LD_VAR 0 3
11259: PUSH
11260: LD_INT 25
11262: EQUAL
11263: IFFALSE 11273
// sSheik := true ;
11265: LD_ADDR_EXP 76
11269: PUSH
11270: LD_INT 1
11272: ST_TO_ADDR
// if p3 = 26 then
11273: LD_VAR 0 3
11277: PUSH
11278: LD_INT 26
11280: EQUAL
11281: IFFALSE 11291
// sEarthquake := true ;
11283: LD_ADDR_EXP 78
11287: PUSH
11288: LD_INT 1
11290: ST_TO_ADDR
// if p3 = 27 then
11291: LD_VAR 0 3
11295: PUSH
11296: LD_INT 27
11298: EQUAL
11299: IFFALSE 11309
// sAI := true ;
11301: LD_ADDR_EXP 79
11305: PUSH
11306: LD_INT 1
11308: ST_TO_ADDR
// if p3 = 28 then
11309: LD_VAR 0 3
11313: PUSH
11314: LD_INT 28
11316: EQUAL
11317: IFFALSE 11327
// sCargo := true ;
11319: LD_ADDR_EXP 82
11323: PUSH
11324: LD_INT 1
11326: ST_TO_ADDR
// if p3 = 29 then
11327: LD_VAR 0 3
11331: PUSH
11332: LD_INT 29
11334: EQUAL
11335: IFFALSE 11345
// sDLaser := true ;
11337: LD_ADDR_EXP 83
11341: PUSH
11342: LD_INT 1
11344: ST_TO_ADDR
// if p3 = 30 then
11345: LD_VAR 0 3
11349: PUSH
11350: LD_INT 30
11352: EQUAL
11353: IFFALSE 11363
// sExchange := true ;
11355: LD_ADDR_EXP 84
11359: PUSH
11360: LD_INT 1
11362: ST_TO_ADDR
// if p3 = 31 then
11363: LD_VAR 0 3
11367: PUSH
11368: LD_INT 31
11370: EQUAL
11371: IFFALSE 11381
// sFac := true ;
11373: LD_ADDR_EXP 85
11377: PUSH
11378: LD_INT 1
11380: ST_TO_ADDR
// if p3 = 32 then
11381: LD_VAR 0 3
11385: PUSH
11386: LD_INT 32
11388: EQUAL
11389: IFFALSE 11399
// sPower := true ;
11391: LD_ADDR_EXP 86
11395: PUSH
11396: LD_INT 1
11398: ST_TO_ADDR
// if p3 = 33 then
11399: LD_VAR 0 3
11403: PUSH
11404: LD_INT 33
11406: EQUAL
11407: IFFALSE 11417
// sRandom := true ;
11409: LD_ADDR_EXP 87
11413: PUSH
11414: LD_INT 1
11416: ST_TO_ADDR
// if p3 = 34 then
11417: LD_VAR 0 3
11421: PUSH
11422: LD_INT 34
11424: EQUAL
11425: IFFALSE 11435
// sShield := true ;
11427: LD_ADDR_EXP 88
11431: PUSH
11432: LD_INT 1
11434: ST_TO_ADDR
// if p3 = 35 then
11435: LD_VAR 0 3
11439: PUSH
11440: LD_INT 35
11442: EQUAL
11443: IFFALSE 11453
// sTime := true ;
11445: LD_ADDR_EXP 89
11449: PUSH
11450: LD_INT 1
11452: ST_TO_ADDR
// if p3 = 36 then
11453: LD_VAR 0 3
11457: PUSH
11458: LD_INT 36
11460: EQUAL
11461: IFFALSE 11471
// sTools := true ;
11463: LD_ADDR_EXP 90
11467: PUSH
11468: LD_INT 1
11470: ST_TO_ADDR
// if p3 = 101 then
11471: LD_VAR 0 3
11475: PUSH
11476: LD_INT 101
11478: EQUAL
11479: IFFALSE 11489
// sSold := true ;
11481: LD_ADDR_EXP 55
11485: PUSH
11486: LD_INT 1
11488: ST_TO_ADDR
// if p3 = 102 then
11489: LD_VAR 0 3
11493: PUSH
11494: LD_INT 102
11496: EQUAL
11497: IFFALSE 11507
// sDiff := true ;
11499: LD_ADDR_EXP 56
11503: PUSH
11504: LD_INT 1
11506: ST_TO_ADDR
// if p3 = 103 then
11507: LD_VAR 0 3
11511: PUSH
11512: LD_INT 103
11514: EQUAL
11515: IFFALSE 11525
// sFog := true ;
11517: LD_ADDR_EXP 59
11521: PUSH
11522: LD_INT 1
11524: ST_TO_ADDR
// if p3 = 104 then
11525: LD_VAR 0 3
11529: PUSH
11530: LD_INT 104
11532: EQUAL
11533: IFFALSE 11543
// sReset := true ;
11535: LD_ADDR_EXP 60
11539: PUSH
11540: LD_INT 1
11542: ST_TO_ADDR
// if p3 = 105 then
11543: LD_VAR 0 3
11547: PUSH
11548: LD_INT 105
11550: EQUAL
11551: IFFALSE 11561
// sSun := true ;
11553: LD_ADDR_EXP 61
11557: PUSH
11558: LD_INT 1
11560: ST_TO_ADDR
// if p3 = 106 then
11561: LD_VAR 0 3
11565: PUSH
11566: LD_INT 106
11568: EQUAL
11569: IFFALSE 11579
// sTiger := true ;
11571: LD_ADDR_EXP 57
11575: PUSH
11576: LD_INT 1
11578: ST_TO_ADDR
// if p3 = 107 then
11579: LD_VAR 0 3
11583: PUSH
11584: LD_INT 107
11586: EQUAL
11587: IFFALSE 11597
// sBomb := true ;
11589: LD_ADDR_EXP 58
11593: PUSH
11594: LD_INT 1
11596: ST_TO_ADDR
// if p3 = 108 then
11597: LD_VAR 0 3
11601: PUSH
11602: LD_INT 108
11604: EQUAL
11605: IFFALSE 11615
// sWound := true ;
11607: LD_ADDR_EXP 66
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
// if p3 = 109 then
11615: LD_VAR 0 3
11619: PUSH
11620: LD_INT 109
11622: EQUAL
11623: IFFALSE 11633
// sBetray := true ;
11625: LD_ADDR_EXP 70
11629: PUSH
11630: LD_INT 1
11632: ST_TO_ADDR
// if p3 = 110 then
11633: LD_VAR 0 3
11637: PUSH
11638: LD_INT 110
11640: EQUAL
11641: IFFALSE 11651
// sContamin := true ;
11643: LD_ADDR_EXP 71
11647: PUSH
11648: LD_INT 1
11650: ST_TO_ADDR
// if p3 = 111 then
11651: LD_VAR 0 3
11655: PUSH
11656: LD_INT 111
11658: EQUAL
11659: IFFALSE 11669
// sOil := true ;
11661: LD_ADDR_EXP 73
11665: PUSH
11666: LD_INT 1
11668: ST_TO_ADDR
// if p3 = 112 then
11669: LD_VAR 0 3
11673: PUSH
11674: LD_INT 112
11676: EQUAL
11677: IFFALSE 11687
// sStu := true ;
11679: LD_ADDR_EXP 77
11683: PUSH
11684: LD_INT 1
11686: ST_TO_ADDR
// if p3 = 113 then
11687: LD_VAR 0 3
11691: PUSH
11692: LD_INT 113
11694: EQUAL
11695: IFFALSE 11705
// sBazooka := true ;
11697: LD_ADDR_EXP 80
11701: PUSH
11702: LD_INT 1
11704: ST_TO_ADDR
// if p3 = 114 then
11705: LD_VAR 0 3
11709: PUSH
11710: LD_INT 114
11712: EQUAL
11713: IFFALSE 11723
// sMortar := true ;
11715: LD_ADDR_EXP 81
11719: PUSH
11720: LD_INT 1
11722: ST_TO_ADDR
// if p3 = 115 then
11723: LD_VAR 0 3
11727: PUSH
11728: LD_INT 115
11730: EQUAL
11731: IFFALSE 11741
// sRanger := true ;
11733: LD_ADDR_EXP 91
11737: PUSH
11738: LD_INT 1
11740: ST_TO_ADDR
// end ; if p2 = 101 then
11741: LD_VAR 0 2
11745: PUSH
11746: LD_INT 101
11748: EQUAL
11749: IFFALSE 11877
// begin case p3 of 1 :
11751: LD_VAR 0 3
11755: PUSH
11756: LD_INT 1
11758: DOUBLE
11759: EQUAL
11760: IFTRUE 11764
11762: GO 11771
11764: POP
// hHackUnlimitedResources ; 2 :
11765: CALL 22914 0 0
11769: GO 11877
11771: LD_INT 2
11773: DOUBLE
11774: EQUAL
11775: IFTRUE 11779
11777: GO 11786
11779: POP
// hHackSetLevel10 ; 3 :
11780: CALL 23047 0 0
11784: GO 11877
11786: LD_INT 3
11788: DOUBLE
11789: EQUAL
11790: IFTRUE 11794
11792: GO 11801
11794: POP
// hHackSetLevel10YourUnits ; 4 :
11795: CALL 23132 0 0
11799: GO 11877
11801: LD_INT 4
11803: DOUBLE
11804: EQUAL
11805: IFTRUE 11809
11807: GO 11816
11809: POP
// hHackInvincible ; 5 :
11810: CALL 23580 0 0
11814: GO 11877
11816: LD_INT 5
11818: DOUBLE
11819: EQUAL
11820: IFTRUE 11824
11822: GO 11831
11824: POP
// hHackInvisible ; 6 :
11825: CALL 23691 0 0
11829: GO 11877
11831: LD_INT 6
11833: DOUBLE
11834: EQUAL
11835: IFTRUE 11839
11837: GO 11846
11839: POP
// hHackChangeYourSide ; 7 :
11840: CALL 23748 0 0
11844: GO 11877
11846: LD_INT 7
11848: DOUBLE
11849: EQUAL
11850: IFTRUE 11854
11852: GO 11861
11854: POP
// hHackChangeUnitSide ; 8 :
11855: CALL 23790 0 0
11859: GO 11877
11861: LD_INT 8
11863: DOUBLE
11864: EQUAL
11865: IFTRUE 11869
11867: GO 11876
11869: POP
// hHackFog ; end ;
11870: CALL 23891 0 0
11874: GO 11877
11876: POP
// end ; end ;
11877: LD_VAR 0 7
11881: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11882: GO 11884
11884: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11885: LD_STRING initStreamRollete();
11887: PPUSH
11888: CALL_OW 559
// InitStreamMode ;
11892: CALL 11901 0 0
// DefineStreamItems ( ) ;
11896: CALL 12341 0 0
// end ;
11900: END
// function InitStreamMode ; begin
11901: LD_INT 0
11903: PPUSH
// streamModeActive := false ;
11904: LD_ADDR_EXP 38
11908: PUSH
11909: LD_INT 0
11911: ST_TO_ADDR
// normalCounter := 36 ;
11912: LD_ADDR_EXP 39
11916: PUSH
11917: LD_INT 36
11919: ST_TO_ADDR
// hardcoreCounter := 16 ;
11920: LD_ADDR_EXP 40
11924: PUSH
11925: LD_INT 16
11927: ST_TO_ADDR
// sRocket := false ;
11928: LD_ADDR_EXP 43
11932: PUSH
11933: LD_INT 0
11935: ST_TO_ADDR
// sSpeed := false ;
11936: LD_ADDR_EXP 42
11940: PUSH
11941: LD_INT 0
11943: ST_TO_ADDR
// sEngine := false ;
11944: LD_ADDR_EXP 44
11948: PUSH
11949: LD_INT 0
11951: ST_TO_ADDR
// sSpec := false ;
11952: LD_ADDR_EXP 41
11956: PUSH
11957: LD_INT 0
11959: ST_TO_ADDR
// sLevel := false ;
11960: LD_ADDR_EXP 45
11964: PUSH
11965: LD_INT 0
11967: ST_TO_ADDR
// sArmoury := false ;
11968: LD_ADDR_EXP 46
11972: PUSH
11973: LD_INT 0
11975: ST_TO_ADDR
// sRadar := false ;
11976: LD_ADDR_EXP 47
11980: PUSH
11981: LD_INT 0
11983: ST_TO_ADDR
// sBunker := false ;
11984: LD_ADDR_EXP 48
11988: PUSH
11989: LD_INT 0
11991: ST_TO_ADDR
// sHack := false ;
11992: LD_ADDR_EXP 49
11996: PUSH
11997: LD_INT 0
11999: ST_TO_ADDR
// sFire := false ;
12000: LD_ADDR_EXP 50
12004: PUSH
12005: LD_INT 0
12007: ST_TO_ADDR
// sRefresh := false ;
12008: LD_ADDR_EXP 51
12012: PUSH
12013: LD_INT 0
12015: ST_TO_ADDR
// sExp := false ;
12016: LD_ADDR_EXP 52
12020: PUSH
12021: LD_INT 0
12023: ST_TO_ADDR
// sDepot := false ;
12024: LD_ADDR_EXP 53
12028: PUSH
12029: LD_INT 0
12031: ST_TO_ADDR
// sFlag := false ;
12032: LD_ADDR_EXP 54
12036: PUSH
12037: LD_INT 0
12039: ST_TO_ADDR
// sKamikadze := false ;
12040: LD_ADDR_EXP 62
12044: PUSH
12045: LD_INT 0
12047: ST_TO_ADDR
// sTroll := false ;
12048: LD_ADDR_EXP 63
12052: PUSH
12053: LD_INT 0
12055: ST_TO_ADDR
// sSlow := false ;
12056: LD_ADDR_EXP 64
12060: PUSH
12061: LD_INT 0
12063: ST_TO_ADDR
// sLack := false ;
12064: LD_ADDR_EXP 65
12068: PUSH
12069: LD_INT 0
12071: ST_TO_ADDR
// sTank := false ;
12072: LD_ADDR_EXP 67
12076: PUSH
12077: LD_INT 0
12079: ST_TO_ADDR
// sRemote := false ;
12080: LD_ADDR_EXP 68
12084: PUSH
12085: LD_INT 0
12087: ST_TO_ADDR
// sPowell := false ;
12088: LD_ADDR_EXP 69
12092: PUSH
12093: LD_INT 0
12095: ST_TO_ADDR
// sTeleport := false ;
12096: LD_ADDR_EXP 72
12100: PUSH
12101: LD_INT 0
12103: ST_TO_ADDR
// sOilTower := false ;
12104: LD_ADDR_EXP 74
12108: PUSH
12109: LD_INT 0
12111: ST_TO_ADDR
// sShovel := false ;
12112: LD_ADDR_EXP 75
12116: PUSH
12117: LD_INT 0
12119: ST_TO_ADDR
// sSheik := false ;
12120: LD_ADDR_EXP 76
12124: PUSH
12125: LD_INT 0
12127: ST_TO_ADDR
// sEarthquake := false ;
12128: LD_ADDR_EXP 78
12132: PUSH
12133: LD_INT 0
12135: ST_TO_ADDR
// sAI := false ;
12136: LD_ADDR_EXP 79
12140: PUSH
12141: LD_INT 0
12143: ST_TO_ADDR
// sCargo := false ;
12144: LD_ADDR_EXP 82
12148: PUSH
12149: LD_INT 0
12151: ST_TO_ADDR
// sDLaser := false ;
12152: LD_ADDR_EXP 83
12156: PUSH
12157: LD_INT 0
12159: ST_TO_ADDR
// sExchange := false ;
12160: LD_ADDR_EXP 84
12164: PUSH
12165: LD_INT 0
12167: ST_TO_ADDR
// sFac := false ;
12168: LD_ADDR_EXP 85
12172: PUSH
12173: LD_INT 0
12175: ST_TO_ADDR
// sPower := false ;
12176: LD_ADDR_EXP 86
12180: PUSH
12181: LD_INT 0
12183: ST_TO_ADDR
// sRandom := false ;
12184: LD_ADDR_EXP 87
12188: PUSH
12189: LD_INT 0
12191: ST_TO_ADDR
// sShield := false ;
12192: LD_ADDR_EXP 88
12196: PUSH
12197: LD_INT 0
12199: ST_TO_ADDR
// sTime := false ;
12200: LD_ADDR_EXP 89
12204: PUSH
12205: LD_INT 0
12207: ST_TO_ADDR
// sTools := false ;
12208: LD_ADDR_EXP 90
12212: PUSH
12213: LD_INT 0
12215: ST_TO_ADDR
// sSold := false ;
12216: LD_ADDR_EXP 55
12220: PUSH
12221: LD_INT 0
12223: ST_TO_ADDR
// sDiff := false ;
12224: LD_ADDR_EXP 56
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// sFog := false ;
12232: LD_ADDR_EXP 59
12236: PUSH
12237: LD_INT 0
12239: ST_TO_ADDR
// sReset := false ;
12240: LD_ADDR_EXP 60
12244: PUSH
12245: LD_INT 0
12247: ST_TO_ADDR
// sSun := false ;
12248: LD_ADDR_EXP 61
12252: PUSH
12253: LD_INT 0
12255: ST_TO_ADDR
// sTiger := false ;
12256: LD_ADDR_EXP 57
12260: PUSH
12261: LD_INT 0
12263: ST_TO_ADDR
// sBomb := false ;
12264: LD_ADDR_EXP 58
12268: PUSH
12269: LD_INT 0
12271: ST_TO_ADDR
// sWound := false ;
12272: LD_ADDR_EXP 66
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// sBetray := false ;
12280: LD_ADDR_EXP 70
12284: PUSH
12285: LD_INT 0
12287: ST_TO_ADDR
// sContamin := false ;
12288: LD_ADDR_EXP 71
12292: PUSH
12293: LD_INT 0
12295: ST_TO_ADDR
// sOil := false ;
12296: LD_ADDR_EXP 73
12300: PUSH
12301: LD_INT 0
12303: ST_TO_ADDR
// sStu := false ;
12304: LD_ADDR_EXP 77
12308: PUSH
12309: LD_INT 0
12311: ST_TO_ADDR
// sBazooka := false ;
12312: LD_ADDR_EXP 80
12316: PUSH
12317: LD_INT 0
12319: ST_TO_ADDR
// sMortar := false ;
12320: LD_ADDR_EXP 81
12324: PUSH
12325: LD_INT 0
12327: ST_TO_ADDR
// sRanger := false ;
12328: LD_ADDR_EXP 91
12332: PUSH
12333: LD_INT 0
12335: ST_TO_ADDR
// end ;
12336: LD_VAR 0 1
12340: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
12341: LD_INT 0
12343: PPUSH
12344: PPUSH
12345: PPUSH
12346: PPUSH
12347: PPUSH
// result := [ ] ;
12348: LD_ADDR_VAR 0 1
12352: PUSH
12353: EMPTY
12354: ST_TO_ADDR
// if campaign_id = 1 then
12355: LD_OWVAR 69
12359: PUSH
12360: LD_INT 1
12362: EQUAL
12363: IFFALSE 15301
// begin case mission_number of 1 :
12365: LD_OWVAR 70
12369: PUSH
12370: LD_INT 1
12372: DOUBLE
12373: EQUAL
12374: IFTRUE 12378
12376: GO 12442
12378: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
12379: LD_ADDR_VAR 0 1
12383: PUSH
12384: LD_INT 2
12386: PUSH
12387: LD_INT 4
12389: PUSH
12390: LD_INT 11
12392: PUSH
12393: LD_INT 12
12395: PUSH
12396: LD_INT 15
12398: PUSH
12399: LD_INT 16
12401: PUSH
12402: LD_INT 22
12404: PUSH
12405: LD_INT 23
12407: PUSH
12408: LD_INT 26
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: PUSH
12422: LD_INT 101
12424: PUSH
12425: LD_INT 102
12427: PUSH
12428: LD_INT 106
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: LIST
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: ST_TO_ADDR
12440: GO 15299
12442: LD_INT 2
12444: DOUBLE
12445: EQUAL
12446: IFTRUE 12450
12448: GO 12522
12450: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
12451: LD_ADDR_VAR 0 1
12455: PUSH
12456: LD_INT 2
12458: PUSH
12459: LD_INT 4
12461: PUSH
12462: LD_INT 11
12464: PUSH
12465: LD_INT 12
12467: PUSH
12468: LD_INT 15
12470: PUSH
12471: LD_INT 16
12473: PUSH
12474: LD_INT 22
12476: PUSH
12477: LD_INT 23
12479: PUSH
12480: LD_INT 26
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 101
12496: PUSH
12497: LD_INT 102
12499: PUSH
12500: LD_INT 105
12502: PUSH
12503: LD_INT 106
12505: PUSH
12506: LD_INT 108
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: ST_TO_ADDR
12520: GO 15299
12522: LD_INT 3
12524: DOUBLE
12525: EQUAL
12526: IFTRUE 12530
12528: GO 12606
12530: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
12531: LD_ADDR_VAR 0 1
12535: PUSH
12536: LD_INT 2
12538: PUSH
12539: LD_INT 4
12541: PUSH
12542: LD_INT 5
12544: PUSH
12545: LD_INT 11
12547: PUSH
12548: LD_INT 12
12550: PUSH
12551: LD_INT 15
12553: PUSH
12554: LD_INT 16
12556: PUSH
12557: LD_INT 22
12559: PUSH
12560: LD_INT 26
12562: PUSH
12563: LD_INT 36
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 101
12580: PUSH
12581: LD_INT 102
12583: PUSH
12584: LD_INT 105
12586: PUSH
12587: LD_INT 106
12589: PUSH
12590: LD_INT 108
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: ST_TO_ADDR
12604: GO 15299
12606: LD_INT 4
12608: DOUBLE
12609: EQUAL
12610: IFTRUE 12614
12612: GO 12698
12614: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
12615: LD_ADDR_VAR 0 1
12619: PUSH
12620: LD_INT 2
12622: PUSH
12623: LD_INT 4
12625: PUSH
12626: LD_INT 5
12628: PUSH
12629: LD_INT 8
12631: PUSH
12632: LD_INT 11
12634: PUSH
12635: LD_INT 12
12637: PUSH
12638: LD_INT 15
12640: PUSH
12641: LD_INT 16
12643: PUSH
12644: LD_INT 22
12646: PUSH
12647: LD_INT 23
12649: PUSH
12650: LD_INT 26
12652: PUSH
12653: LD_INT 36
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 101
12672: PUSH
12673: LD_INT 102
12675: PUSH
12676: LD_INT 105
12678: PUSH
12679: LD_INT 106
12681: PUSH
12682: LD_INT 108
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: ST_TO_ADDR
12696: GO 15299
12698: LD_INT 5
12700: DOUBLE
12701: EQUAL
12702: IFTRUE 12706
12704: GO 12806
12706: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12707: LD_ADDR_VAR 0 1
12711: PUSH
12712: LD_INT 2
12714: PUSH
12715: LD_INT 4
12717: PUSH
12718: LD_INT 5
12720: PUSH
12721: LD_INT 6
12723: PUSH
12724: LD_INT 8
12726: PUSH
12727: LD_INT 11
12729: PUSH
12730: LD_INT 12
12732: PUSH
12733: LD_INT 15
12735: PUSH
12736: LD_INT 16
12738: PUSH
12739: LD_INT 22
12741: PUSH
12742: LD_INT 23
12744: PUSH
12745: LD_INT 25
12747: PUSH
12748: LD_INT 26
12750: PUSH
12751: LD_INT 36
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 101
12772: PUSH
12773: LD_INT 102
12775: PUSH
12776: LD_INT 105
12778: PUSH
12779: LD_INT 106
12781: PUSH
12782: LD_INT 108
12784: PUSH
12785: LD_INT 109
12787: PUSH
12788: LD_INT 112
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: ST_TO_ADDR
12804: GO 15299
12806: LD_INT 6
12808: DOUBLE
12809: EQUAL
12810: IFTRUE 12814
12812: GO 12934
12814: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12815: LD_ADDR_VAR 0 1
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: LD_INT 4
12825: PUSH
12826: LD_INT 5
12828: PUSH
12829: LD_INT 6
12831: PUSH
12832: LD_INT 8
12834: PUSH
12835: LD_INT 11
12837: PUSH
12838: LD_INT 12
12840: PUSH
12841: LD_INT 15
12843: PUSH
12844: LD_INT 16
12846: PUSH
12847: LD_INT 20
12849: PUSH
12850: LD_INT 21
12852: PUSH
12853: LD_INT 22
12855: PUSH
12856: LD_INT 23
12858: PUSH
12859: LD_INT 25
12861: PUSH
12862: LD_INT 26
12864: PUSH
12865: LD_INT 30
12867: PUSH
12868: LD_INT 31
12870: PUSH
12871: LD_INT 32
12873: PUSH
12874: LD_INT 36
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: PUSH
12898: LD_INT 101
12900: PUSH
12901: LD_INT 102
12903: PUSH
12904: LD_INT 105
12906: PUSH
12907: LD_INT 106
12909: PUSH
12910: LD_INT 108
12912: PUSH
12913: LD_INT 109
12915: PUSH
12916: LD_INT 112
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: ST_TO_ADDR
12932: GO 15299
12934: LD_INT 7
12936: DOUBLE
12937: EQUAL
12938: IFTRUE 12942
12940: GO 13042
12942: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12943: LD_ADDR_VAR 0 1
12947: PUSH
12948: LD_INT 2
12950: PUSH
12951: LD_INT 4
12953: PUSH
12954: LD_INT 5
12956: PUSH
12957: LD_INT 7
12959: PUSH
12960: LD_INT 11
12962: PUSH
12963: LD_INT 12
12965: PUSH
12966: LD_INT 15
12968: PUSH
12969: LD_INT 16
12971: PUSH
12972: LD_INT 20
12974: PUSH
12975: LD_INT 21
12977: PUSH
12978: LD_INT 22
12980: PUSH
12981: LD_INT 23
12983: PUSH
12984: LD_INT 25
12986: PUSH
12987: LD_INT 26
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: PUSH
13006: LD_INT 101
13008: PUSH
13009: LD_INT 102
13011: PUSH
13012: LD_INT 103
13014: PUSH
13015: LD_INT 105
13017: PUSH
13018: LD_INT 106
13020: PUSH
13021: LD_INT 108
13023: PUSH
13024: LD_INT 112
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: ST_TO_ADDR
13040: GO 15299
13042: LD_INT 8
13044: DOUBLE
13045: EQUAL
13046: IFTRUE 13050
13048: GO 13178
13050: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
13051: LD_ADDR_VAR 0 1
13055: PUSH
13056: LD_INT 2
13058: PUSH
13059: LD_INT 4
13061: PUSH
13062: LD_INT 5
13064: PUSH
13065: LD_INT 6
13067: PUSH
13068: LD_INT 7
13070: PUSH
13071: LD_INT 8
13073: PUSH
13074: LD_INT 11
13076: PUSH
13077: LD_INT 12
13079: PUSH
13080: LD_INT 15
13082: PUSH
13083: LD_INT 16
13085: PUSH
13086: LD_INT 20
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 22
13094: PUSH
13095: LD_INT 23
13097: PUSH
13098: LD_INT 25
13100: PUSH
13101: LD_INT 26
13103: PUSH
13104: LD_INT 30
13106: PUSH
13107: LD_INT 31
13109: PUSH
13110: LD_INT 32
13112: PUSH
13113: LD_INT 36
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 101
13140: PUSH
13141: LD_INT 102
13143: PUSH
13144: LD_INT 103
13146: PUSH
13147: LD_INT 105
13149: PUSH
13150: LD_INT 106
13152: PUSH
13153: LD_INT 108
13155: PUSH
13156: LD_INT 109
13158: PUSH
13159: LD_INT 112
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: ST_TO_ADDR
13176: GO 15299
13178: LD_INT 9
13180: DOUBLE
13181: EQUAL
13182: IFTRUE 13186
13184: GO 13322
13186: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
13187: LD_ADDR_VAR 0 1
13191: PUSH
13192: LD_INT 2
13194: PUSH
13195: LD_INT 4
13197: PUSH
13198: LD_INT 5
13200: PUSH
13201: LD_INT 6
13203: PUSH
13204: LD_INT 7
13206: PUSH
13207: LD_INT 8
13209: PUSH
13210: LD_INT 11
13212: PUSH
13213: LD_INT 12
13215: PUSH
13216: LD_INT 15
13218: PUSH
13219: LD_INT 16
13221: PUSH
13222: LD_INT 20
13224: PUSH
13225: LD_INT 21
13227: PUSH
13228: LD_INT 22
13230: PUSH
13231: LD_INT 23
13233: PUSH
13234: LD_INT 25
13236: PUSH
13237: LD_INT 26
13239: PUSH
13240: LD_INT 28
13242: PUSH
13243: LD_INT 30
13245: PUSH
13246: LD_INT 31
13248: PUSH
13249: LD_INT 32
13251: PUSH
13252: LD_INT 36
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 101
13280: PUSH
13281: LD_INT 102
13283: PUSH
13284: LD_INT 103
13286: PUSH
13287: LD_INT 105
13289: PUSH
13290: LD_INT 106
13292: PUSH
13293: LD_INT 108
13295: PUSH
13296: LD_INT 109
13298: PUSH
13299: LD_INT 112
13301: PUSH
13302: LD_INT 114
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: ST_TO_ADDR
13320: GO 15299
13322: LD_INT 10
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13514
13330: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
13331: LD_ADDR_VAR 0 1
13335: PUSH
13336: LD_INT 2
13338: PUSH
13339: LD_INT 4
13341: PUSH
13342: LD_INT 5
13344: PUSH
13345: LD_INT 6
13347: PUSH
13348: LD_INT 7
13350: PUSH
13351: LD_INT 8
13353: PUSH
13354: LD_INT 9
13356: PUSH
13357: LD_INT 10
13359: PUSH
13360: LD_INT 11
13362: PUSH
13363: LD_INT 12
13365: PUSH
13366: LD_INT 13
13368: PUSH
13369: LD_INT 14
13371: PUSH
13372: LD_INT 15
13374: PUSH
13375: LD_INT 16
13377: PUSH
13378: LD_INT 17
13380: PUSH
13381: LD_INT 18
13383: PUSH
13384: LD_INT 19
13386: PUSH
13387: LD_INT 20
13389: PUSH
13390: LD_INT 21
13392: PUSH
13393: LD_INT 22
13395: PUSH
13396: LD_INT 23
13398: PUSH
13399: LD_INT 24
13401: PUSH
13402: LD_INT 25
13404: PUSH
13405: LD_INT 26
13407: PUSH
13408: LD_INT 28
13410: PUSH
13411: LD_INT 30
13413: PUSH
13414: LD_INT 31
13416: PUSH
13417: LD_INT 32
13419: PUSH
13420: LD_INT 36
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 101
13456: PUSH
13457: LD_INT 102
13459: PUSH
13460: LD_INT 103
13462: PUSH
13463: LD_INT 104
13465: PUSH
13466: LD_INT 105
13468: PUSH
13469: LD_INT 106
13471: PUSH
13472: LD_INT 107
13474: PUSH
13475: LD_INT 108
13477: PUSH
13478: LD_INT 109
13480: PUSH
13481: LD_INT 110
13483: PUSH
13484: LD_INT 111
13486: PUSH
13487: LD_INT 112
13489: PUSH
13490: LD_INT 114
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: ST_TO_ADDR
13512: GO 15299
13514: LD_INT 11
13516: DOUBLE
13517: EQUAL
13518: IFTRUE 13522
13520: GO 13714
13522: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
13523: LD_ADDR_VAR 0 1
13527: PUSH
13528: LD_INT 2
13530: PUSH
13531: LD_INT 3
13533: PUSH
13534: LD_INT 4
13536: PUSH
13537: LD_INT 5
13539: PUSH
13540: LD_INT 6
13542: PUSH
13543: LD_INT 7
13545: PUSH
13546: LD_INT 8
13548: PUSH
13549: LD_INT 9
13551: PUSH
13552: LD_INT 10
13554: PUSH
13555: LD_INT 11
13557: PUSH
13558: LD_INT 12
13560: PUSH
13561: LD_INT 13
13563: PUSH
13564: LD_INT 14
13566: PUSH
13567: LD_INT 15
13569: PUSH
13570: LD_INT 16
13572: PUSH
13573: LD_INT 17
13575: PUSH
13576: LD_INT 18
13578: PUSH
13579: LD_INT 19
13581: PUSH
13582: LD_INT 20
13584: PUSH
13585: LD_INT 21
13587: PUSH
13588: LD_INT 22
13590: PUSH
13591: LD_INT 23
13593: PUSH
13594: LD_INT 24
13596: PUSH
13597: LD_INT 25
13599: PUSH
13600: LD_INT 26
13602: PUSH
13603: LD_INT 28
13605: PUSH
13606: LD_INT 30
13608: PUSH
13609: LD_INT 31
13611: PUSH
13612: LD_INT 32
13614: PUSH
13615: LD_INT 34
13617: PUSH
13618: LD_INT 36
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: PUSH
13654: LD_INT 101
13656: PUSH
13657: LD_INT 102
13659: PUSH
13660: LD_INT 103
13662: PUSH
13663: LD_INT 104
13665: PUSH
13666: LD_INT 105
13668: PUSH
13669: LD_INT 106
13671: PUSH
13672: LD_INT 107
13674: PUSH
13675: LD_INT 108
13677: PUSH
13678: LD_INT 109
13680: PUSH
13681: LD_INT 110
13683: PUSH
13684: LD_INT 111
13686: PUSH
13687: LD_INT 112
13689: PUSH
13690: LD_INT 114
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: ST_TO_ADDR
13712: GO 15299
13714: LD_INT 12
13716: DOUBLE
13717: EQUAL
13718: IFTRUE 13722
13720: GO 13930
13722: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13723: LD_ADDR_VAR 0 1
13727: PUSH
13728: LD_INT 1
13730: PUSH
13731: LD_INT 2
13733: PUSH
13734: LD_INT 3
13736: PUSH
13737: LD_INT 4
13739: PUSH
13740: LD_INT 5
13742: PUSH
13743: LD_INT 6
13745: PUSH
13746: LD_INT 7
13748: PUSH
13749: LD_INT 8
13751: PUSH
13752: LD_INT 9
13754: PUSH
13755: LD_INT 10
13757: PUSH
13758: LD_INT 11
13760: PUSH
13761: LD_INT 12
13763: PUSH
13764: LD_INT 13
13766: PUSH
13767: LD_INT 14
13769: PUSH
13770: LD_INT 15
13772: PUSH
13773: LD_INT 16
13775: PUSH
13776: LD_INT 17
13778: PUSH
13779: LD_INT 18
13781: PUSH
13782: LD_INT 19
13784: PUSH
13785: LD_INT 20
13787: PUSH
13788: LD_INT 21
13790: PUSH
13791: LD_INT 22
13793: PUSH
13794: LD_INT 23
13796: PUSH
13797: LD_INT 24
13799: PUSH
13800: LD_INT 25
13802: PUSH
13803: LD_INT 26
13805: PUSH
13806: LD_INT 27
13808: PUSH
13809: LD_INT 28
13811: PUSH
13812: LD_INT 30
13814: PUSH
13815: LD_INT 31
13817: PUSH
13818: LD_INT 32
13820: PUSH
13821: LD_INT 33
13823: PUSH
13824: LD_INT 34
13826: PUSH
13827: LD_INT 36
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 101
13868: PUSH
13869: LD_INT 102
13871: PUSH
13872: LD_INT 103
13874: PUSH
13875: LD_INT 104
13877: PUSH
13878: LD_INT 105
13880: PUSH
13881: LD_INT 106
13883: PUSH
13884: LD_INT 107
13886: PUSH
13887: LD_INT 108
13889: PUSH
13890: LD_INT 109
13892: PUSH
13893: LD_INT 110
13895: PUSH
13896: LD_INT 111
13898: PUSH
13899: LD_INT 112
13901: PUSH
13902: LD_INT 113
13904: PUSH
13905: LD_INT 114
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: ST_TO_ADDR
13928: GO 15299
13930: LD_INT 13
13932: DOUBLE
13933: EQUAL
13934: IFTRUE 13938
13936: GO 14134
13938: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13939: LD_ADDR_VAR 0 1
13943: PUSH
13944: LD_INT 1
13946: PUSH
13947: LD_INT 2
13949: PUSH
13950: LD_INT 3
13952: PUSH
13953: LD_INT 4
13955: PUSH
13956: LD_INT 5
13958: PUSH
13959: LD_INT 8
13961: PUSH
13962: LD_INT 9
13964: PUSH
13965: LD_INT 10
13967: PUSH
13968: LD_INT 11
13970: PUSH
13971: LD_INT 12
13973: PUSH
13974: LD_INT 14
13976: PUSH
13977: LD_INT 15
13979: PUSH
13980: LD_INT 16
13982: PUSH
13983: LD_INT 17
13985: PUSH
13986: LD_INT 18
13988: PUSH
13989: LD_INT 19
13991: PUSH
13992: LD_INT 20
13994: PUSH
13995: LD_INT 21
13997: PUSH
13998: LD_INT 22
14000: PUSH
14001: LD_INT 23
14003: PUSH
14004: LD_INT 24
14006: PUSH
14007: LD_INT 25
14009: PUSH
14010: LD_INT 26
14012: PUSH
14013: LD_INT 27
14015: PUSH
14016: LD_INT 28
14018: PUSH
14019: LD_INT 30
14021: PUSH
14022: LD_INT 31
14024: PUSH
14025: LD_INT 32
14027: PUSH
14028: LD_INT 33
14030: PUSH
14031: LD_INT 34
14033: PUSH
14034: LD_INT 36
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 101
14072: PUSH
14073: LD_INT 102
14075: PUSH
14076: LD_INT 103
14078: PUSH
14079: LD_INT 104
14081: PUSH
14082: LD_INT 105
14084: PUSH
14085: LD_INT 106
14087: PUSH
14088: LD_INT 107
14090: PUSH
14091: LD_INT 108
14093: PUSH
14094: LD_INT 109
14096: PUSH
14097: LD_INT 110
14099: PUSH
14100: LD_INT 111
14102: PUSH
14103: LD_INT 112
14105: PUSH
14106: LD_INT 113
14108: PUSH
14109: LD_INT 114
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: ST_TO_ADDR
14132: GO 15299
14134: LD_INT 14
14136: DOUBLE
14137: EQUAL
14138: IFTRUE 14142
14140: GO 14354
14142: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
14143: LD_ADDR_VAR 0 1
14147: PUSH
14148: LD_INT 1
14150: PUSH
14151: LD_INT 2
14153: PUSH
14154: LD_INT 3
14156: PUSH
14157: LD_INT 4
14159: PUSH
14160: LD_INT 5
14162: PUSH
14163: LD_INT 6
14165: PUSH
14166: LD_INT 7
14168: PUSH
14169: LD_INT 8
14171: PUSH
14172: LD_INT 9
14174: PUSH
14175: LD_INT 10
14177: PUSH
14178: LD_INT 11
14180: PUSH
14181: LD_INT 12
14183: PUSH
14184: LD_INT 13
14186: PUSH
14187: LD_INT 14
14189: PUSH
14190: LD_INT 15
14192: PUSH
14193: LD_INT 16
14195: PUSH
14196: LD_INT 17
14198: PUSH
14199: LD_INT 18
14201: PUSH
14202: LD_INT 19
14204: PUSH
14205: LD_INT 20
14207: PUSH
14208: LD_INT 21
14210: PUSH
14211: LD_INT 22
14213: PUSH
14214: LD_INT 23
14216: PUSH
14217: LD_INT 24
14219: PUSH
14220: LD_INT 25
14222: PUSH
14223: LD_INT 26
14225: PUSH
14226: LD_INT 27
14228: PUSH
14229: LD_INT 28
14231: PUSH
14232: LD_INT 29
14234: PUSH
14235: LD_INT 30
14237: PUSH
14238: LD_INT 31
14240: PUSH
14241: LD_INT 32
14243: PUSH
14244: LD_INT 33
14246: PUSH
14247: LD_INT 34
14249: PUSH
14250: LD_INT 36
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: PUSH
14290: LD_INT 101
14292: PUSH
14293: LD_INT 102
14295: PUSH
14296: LD_INT 103
14298: PUSH
14299: LD_INT 104
14301: PUSH
14302: LD_INT 105
14304: PUSH
14305: LD_INT 106
14307: PUSH
14308: LD_INT 107
14310: PUSH
14311: LD_INT 108
14313: PUSH
14314: LD_INT 109
14316: PUSH
14317: LD_INT 110
14319: PUSH
14320: LD_INT 111
14322: PUSH
14323: LD_INT 112
14325: PUSH
14326: LD_INT 113
14328: PUSH
14329: LD_INT 114
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: ST_TO_ADDR
14352: GO 15299
14354: LD_INT 15
14356: DOUBLE
14357: EQUAL
14358: IFTRUE 14362
14360: GO 14574
14362: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
14363: LD_ADDR_VAR 0 1
14367: PUSH
14368: LD_INT 1
14370: PUSH
14371: LD_INT 2
14373: PUSH
14374: LD_INT 3
14376: PUSH
14377: LD_INT 4
14379: PUSH
14380: LD_INT 5
14382: PUSH
14383: LD_INT 6
14385: PUSH
14386: LD_INT 7
14388: PUSH
14389: LD_INT 8
14391: PUSH
14392: LD_INT 9
14394: PUSH
14395: LD_INT 10
14397: PUSH
14398: LD_INT 11
14400: PUSH
14401: LD_INT 12
14403: PUSH
14404: LD_INT 13
14406: PUSH
14407: LD_INT 14
14409: PUSH
14410: LD_INT 15
14412: PUSH
14413: LD_INT 16
14415: PUSH
14416: LD_INT 17
14418: PUSH
14419: LD_INT 18
14421: PUSH
14422: LD_INT 19
14424: PUSH
14425: LD_INT 20
14427: PUSH
14428: LD_INT 21
14430: PUSH
14431: LD_INT 22
14433: PUSH
14434: LD_INT 23
14436: PUSH
14437: LD_INT 24
14439: PUSH
14440: LD_INT 25
14442: PUSH
14443: LD_INT 26
14445: PUSH
14446: LD_INT 27
14448: PUSH
14449: LD_INT 28
14451: PUSH
14452: LD_INT 29
14454: PUSH
14455: LD_INT 30
14457: PUSH
14458: LD_INT 31
14460: PUSH
14461: LD_INT 32
14463: PUSH
14464: LD_INT 33
14466: PUSH
14467: LD_INT 34
14469: PUSH
14470: LD_INT 36
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 101
14512: PUSH
14513: LD_INT 102
14515: PUSH
14516: LD_INT 103
14518: PUSH
14519: LD_INT 104
14521: PUSH
14522: LD_INT 105
14524: PUSH
14525: LD_INT 106
14527: PUSH
14528: LD_INT 107
14530: PUSH
14531: LD_INT 108
14533: PUSH
14534: LD_INT 109
14536: PUSH
14537: LD_INT 110
14539: PUSH
14540: LD_INT 111
14542: PUSH
14543: LD_INT 112
14545: PUSH
14546: LD_INT 113
14548: PUSH
14549: LD_INT 114
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: ST_TO_ADDR
14572: GO 15299
14574: LD_INT 16
14576: DOUBLE
14577: EQUAL
14578: IFTRUE 14582
14580: GO 14706
14582: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
14583: LD_ADDR_VAR 0 1
14587: PUSH
14588: LD_INT 2
14590: PUSH
14591: LD_INT 4
14593: PUSH
14594: LD_INT 5
14596: PUSH
14597: LD_INT 7
14599: PUSH
14600: LD_INT 11
14602: PUSH
14603: LD_INT 12
14605: PUSH
14606: LD_INT 15
14608: PUSH
14609: LD_INT 16
14611: PUSH
14612: LD_INT 20
14614: PUSH
14615: LD_INT 21
14617: PUSH
14618: LD_INT 22
14620: PUSH
14621: LD_INT 23
14623: PUSH
14624: LD_INT 25
14626: PUSH
14627: LD_INT 26
14629: PUSH
14630: LD_INT 30
14632: PUSH
14633: LD_INT 31
14635: PUSH
14636: LD_INT 32
14638: PUSH
14639: LD_INT 33
14641: PUSH
14642: LD_INT 34
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: PUSH
14666: LD_INT 101
14668: PUSH
14669: LD_INT 102
14671: PUSH
14672: LD_INT 103
14674: PUSH
14675: LD_INT 106
14677: PUSH
14678: LD_INT 108
14680: PUSH
14681: LD_INT 112
14683: PUSH
14684: LD_INT 113
14686: PUSH
14687: LD_INT 114
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: ST_TO_ADDR
14704: GO 15299
14706: LD_INT 17
14708: DOUBLE
14709: EQUAL
14710: IFTRUE 14714
14712: GO 14926
14714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14715: LD_ADDR_VAR 0 1
14719: PUSH
14720: LD_INT 1
14722: PUSH
14723: LD_INT 2
14725: PUSH
14726: LD_INT 3
14728: PUSH
14729: LD_INT 4
14731: PUSH
14732: LD_INT 5
14734: PUSH
14735: LD_INT 6
14737: PUSH
14738: LD_INT 7
14740: PUSH
14741: LD_INT 8
14743: PUSH
14744: LD_INT 9
14746: PUSH
14747: LD_INT 10
14749: PUSH
14750: LD_INT 11
14752: PUSH
14753: LD_INT 12
14755: PUSH
14756: LD_INT 13
14758: PUSH
14759: LD_INT 14
14761: PUSH
14762: LD_INT 15
14764: PUSH
14765: LD_INT 16
14767: PUSH
14768: LD_INT 17
14770: PUSH
14771: LD_INT 18
14773: PUSH
14774: LD_INT 19
14776: PUSH
14777: LD_INT 20
14779: PUSH
14780: LD_INT 21
14782: PUSH
14783: LD_INT 22
14785: PUSH
14786: LD_INT 23
14788: PUSH
14789: LD_INT 24
14791: PUSH
14792: LD_INT 25
14794: PUSH
14795: LD_INT 26
14797: PUSH
14798: LD_INT 27
14800: PUSH
14801: LD_INT 28
14803: PUSH
14804: LD_INT 29
14806: PUSH
14807: LD_INT 30
14809: PUSH
14810: LD_INT 31
14812: PUSH
14813: LD_INT 32
14815: PUSH
14816: LD_INT 33
14818: PUSH
14819: LD_INT 34
14821: PUSH
14822: LD_INT 36
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 101
14864: PUSH
14865: LD_INT 102
14867: PUSH
14868: LD_INT 103
14870: PUSH
14871: LD_INT 104
14873: PUSH
14874: LD_INT 105
14876: PUSH
14877: LD_INT 106
14879: PUSH
14880: LD_INT 107
14882: PUSH
14883: LD_INT 108
14885: PUSH
14886: LD_INT 109
14888: PUSH
14889: LD_INT 110
14891: PUSH
14892: LD_INT 111
14894: PUSH
14895: LD_INT 112
14897: PUSH
14898: LD_INT 113
14900: PUSH
14901: LD_INT 114
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: ST_TO_ADDR
14924: GO 15299
14926: LD_INT 18
14928: DOUBLE
14929: EQUAL
14930: IFTRUE 14934
14932: GO 15070
14934: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14935: LD_ADDR_VAR 0 1
14939: PUSH
14940: LD_INT 2
14942: PUSH
14943: LD_INT 4
14945: PUSH
14946: LD_INT 5
14948: PUSH
14949: LD_INT 7
14951: PUSH
14952: LD_INT 11
14954: PUSH
14955: LD_INT 12
14957: PUSH
14958: LD_INT 15
14960: PUSH
14961: LD_INT 16
14963: PUSH
14964: LD_INT 20
14966: PUSH
14967: LD_INT 21
14969: PUSH
14970: LD_INT 22
14972: PUSH
14973: LD_INT 23
14975: PUSH
14976: LD_INT 25
14978: PUSH
14979: LD_INT 26
14981: PUSH
14982: LD_INT 30
14984: PUSH
14985: LD_INT 31
14987: PUSH
14988: LD_INT 32
14990: PUSH
14991: LD_INT 33
14993: PUSH
14994: LD_INT 34
14996: PUSH
14997: LD_INT 35
14999: PUSH
15000: LD_INT 36
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 101
15028: PUSH
15029: LD_INT 102
15031: PUSH
15032: LD_INT 103
15034: PUSH
15035: LD_INT 106
15037: PUSH
15038: LD_INT 108
15040: PUSH
15041: LD_INT 112
15043: PUSH
15044: LD_INT 113
15046: PUSH
15047: LD_INT 114
15049: PUSH
15050: LD_INT 115
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: ST_TO_ADDR
15068: GO 15299
15070: LD_INT 19
15072: DOUBLE
15073: EQUAL
15074: IFTRUE 15078
15076: GO 15298
15078: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
15079: LD_ADDR_VAR 0 1
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: LD_INT 2
15089: PUSH
15090: LD_INT 3
15092: PUSH
15093: LD_INT 4
15095: PUSH
15096: LD_INT 5
15098: PUSH
15099: LD_INT 6
15101: PUSH
15102: LD_INT 7
15104: PUSH
15105: LD_INT 8
15107: PUSH
15108: LD_INT 9
15110: PUSH
15111: LD_INT 10
15113: PUSH
15114: LD_INT 11
15116: PUSH
15117: LD_INT 12
15119: PUSH
15120: LD_INT 13
15122: PUSH
15123: LD_INT 14
15125: PUSH
15126: LD_INT 15
15128: PUSH
15129: LD_INT 16
15131: PUSH
15132: LD_INT 17
15134: PUSH
15135: LD_INT 18
15137: PUSH
15138: LD_INT 19
15140: PUSH
15141: LD_INT 20
15143: PUSH
15144: LD_INT 21
15146: PUSH
15147: LD_INT 22
15149: PUSH
15150: LD_INT 23
15152: PUSH
15153: LD_INT 24
15155: PUSH
15156: LD_INT 25
15158: PUSH
15159: LD_INT 26
15161: PUSH
15162: LD_INT 27
15164: PUSH
15165: LD_INT 28
15167: PUSH
15168: LD_INT 29
15170: PUSH
15171: LD_INT 30
15173: PUSH
15174: LD_INT 31
15176: PUSH
15177: LD_INT 32
15179: PUSH
15180: LD_INT 33
15182: PUSH
15183: LD_INT 34
15185: PUSH
15186: LD_INT 35
15188: PUSH
15189: LD_INT 36
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 101
15232: PUSH
15233: LD_INT 102
15235: PUSH
15236: LD_INT 103
15238: PUSH
15239: LD_INT 104
15241: PUSH
15242: LD_INT 105
15244: PUSH
15245: LD_INT 106
15247: PUSH
15248: LD_INT 107
15250: PUSH
15251: LD_INT 108
15253: PUSH
15254: LD_INT 109
15256: PUSH
15257: LD_INT 110
15259: PUSH
15260: LD_INT 111
15262: PUSH
15263: LD_INT 112
15265: PUSH
15266: LD_INT 113
15268: PUSH
15269: LD_INT 114
15271: PUSH
15272: LD_INT 115
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: ST_TO_ADDR
15296: GO 15299
15298: POP
// end else
15299: GO 15518
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
15301: LD_ADDR_VAR 0 1
15305: PUSH
15306: LD_INT 1
15308: PUSH
15309: LD_INT 2
15311: PUSH
15312: LD_INT 3
15314: PUSH
15315: LD_INT 4
15317: PUSH
15318: LD_INT 5
15320: PUSH
15321: LD_INT 6
15323: PUSH
15324: LD_INT 7
15326: PUSH
15327: LD_INT 8
15329: PUSH
15330: LD_INT 9
15332: PUSH
15333: LD_INT 10
15335: PUSH
15336: LD_INT 11
15338: PUSH
15339: LD_INT 12
15341: PUSH
15342: LD_INT 13
15344: PUSH
15345: LD_INT 14
15347: PUSH
15348: LD_INT 15
15350: PUSH
15351: LD_INT 16
15353: PUSH
15354: LD_INT 17
15356: PUSH
15357: LD_INT 18
15359: PUSH
15360: LD_INT 19
15362: PUSH
15363: LD_INT 20
15365: PUSH
15366: LD_INT 21
15368: PUSH
15369: LD_INT 22
15371: PUSH
15372: LD_INT 23
15374: PUSH
15375: LD_INT 24
15377: PUSH
15378: LD_INT 25
15380: PUSH
15381: LD_INT 26
15383: PUSH
15384: LD_INT 27
15386: PUSH
15387: LD_INT 28
15389: PUSH
15390: LD_INT 29
15392: PUSH
15393: LD_INT 30
15395: PUSH
15396: LD_INT 31
15398: PUSH
15399: LD_INT 32
15401: PUSH
15402: LD_INT 33
15404: PUSH
15405: LD_INT 34
15407: PUSH
15408: LD_INT 35
15410: PUSH
15411: LD_INT 36
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 101
15454: PUSH
15455: LD_INT 102
15457: PUSH
15458: LD_INT 103
15460: PUSH
15461: LD_INT 104
15463: PUSH
15464: LD_INT 105
15466: PUSH
15467: LD_INT 106
15469: PUSH
15470: LD_INT 107
15472: PUSH
15473: LD_INT 108
15475: PUSH
15476: LD_INT 109
15478: PUSH
15479: LD_INT 110
15481: PUSH
15482: LD_INT 111
15484: PUSH
15485: LD_INT 112
15487: PUSH
15488: LD_INT 113
15490: PUSH
15491: LD_INT 114
15493: PUSH
15494: LD_INT 115
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: ST_TO_ADDR
// if result then
15518: LD_VAR 0 1
15522: IFFALSE 15811
// begin normal :=  ;
15524: LD_ADDR_VAR 0 3
15528: PUSH
15529: LD_STRING 
15531: ST_TO_ADDR
// hardcore :=  ;
15532: LD_ADDR_VAR 0 4
15536: PUSH
15537: LD_STRING 
15539: ST_TO_ADDR
// for i = 1 to normalCounter do
15540: LD_ADDR_VAR 0 5
15544: PUSH
15545: DOUBLE
15546: LD_INT 1
15548: DEC
15549: ST_TO_ADDR
15550: LD_EXP 39
15554: PUSH
15555: FOR_TO
15556: IFFALSE 15657
// begin tmp := 0 ;
15558: LD_ADDR_VAR 0 2
15562: PUSH
15563: LD_STRING 0
15565: ST_TO_ADDR
// if result [ 1 ] then
15566: LD_VAR 0 1
15570: PUSH
15571: LD_INT 1
15573: ARRAY
15574: IFFALSE 15639
// if result [ 1 ] [ 1 ] = i then
15576: LD_VAR 0 1
15580: PUSH
15581: LD_INT 1
15583: ARRAY
15584: PUSH
15585: LD_INT 1
15587: ARRAY
15588: PUSH
15589: LD_VAR 0 5
15593: EQUAL
15594: IFFALSE 15639
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15596: LD_ADDR_VAR 0 1
15600: PUSH
15601: LD_VAR 0 1
15605: PPUSH
15606: LD_INT 1
15608: PPUSH
15609: LD_VAR 0 1
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PPUSH
15618: LD_INT 1
15620: PPUSH
15621: CALL_OW 3
15625: PPUSH
15626: CALL_OW 1
15630: ST_TO_ADDR
// tmp := 1 ;
15631: LD_ADDR_VAR 0 2
15635: PUSH
15636: LD_STRING 1
15638: ST_TO_ADDR
// end ; normal := normal & tmp ;
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: LD_VAR 0 3
15648: PUSH
15649: LD_VAR 0 2
15653: STR
15654: ST_TO_ADDR
// end ;
15655: GO 15555
15657: POP
15658: POP
// for i = 1 to hardcoreCounter do
15659: LD_ADDR_VAR 0 5
15663: PUSH
15664: DOUBLE
15665: LD_INT 1
15667: DEC
15668: ST_TO_ADDR
15669: LD_EXP 40
15673: PUSH
15674: FOR_TO
15675: IFFALSE 15780
// begin tmp := 0 ;
15677: LD_ADDR_VAR 0 2
15681: PUSH
15682: LD_STRING 0
15684: ST_TO_ADDR
// if result [ 2 ] then
15685: LD_VAR 0 1
15689: PUSH
15690: LD_INT 2
15692: ARRAY
15693: IFFALSE 15762
// if result [ 2 ] [ 1 ] = 100 + i then
15695: LD_VAR 0 1
15699: PUSH
15700: LD_INT 2
15702: ARRAY
15703: PUSH
15704: LD_INT 1
15706: ARRAY
15707: PUSH
15708: LD_INT 100
15710: PUSH
15711: LD_VAR 0 5
15715: PLUS
15716: EQUAL
15717: IFFALSE 15762
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15719: LD_ADDR_VAR 0 1
15723: PUSH
15724: LD_VAR 0 1
15728: PPUSH
15729: LD_INT 2
15731: PPUSH
15732: LD_VAR 0 1
15736: PUSH
15737: LD_INT 2
15739: ARRAY
15740: PPUSH
15741: LD_INT 1
15743: PPUSH
15744: CALL_OW 3
15748: PPUSH
15749: CALL_OW 1
15753: ST_TO_ADDR
// tmp := 1 ;
15754: LD_ADDR_VAR 0 2
15758: PUSH
15759: LD_STRING 1
15761: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15762: LD_ADDR_VAR 0 4
15766: PUSH
15767: LD_VAR 0 4
15771: PUSH
15772: LD_VAR 0 2
15776: STR
15777: ST_TO_ADDR
// end ;
15778: GO 15674
15780: POP
15781: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15782: LD_STRING getStreamItemsFromMission("
15784: PUSH
15785: LD_VAR 0 3
15789: STR
15790: PUSH
15791: LD_STRING ","
15793: STR
15794: PUSH
15795: LD_VAR 0 4
15799: STR
15800: PUSH
15801: LD_STRING ")
15803: STR
15804: PPUSH
15805: CALL_OW 559
// end else
15809: GO 15818
// ToLua ( getStreamItemsFromMission("","") ) ;
15811: LD_STRING getStreamItemsFromMission("","")
15813: PPUSH
15814: CALL_OW 559
// end ;
15818: LD_VAR 0 1
15822: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15823: LD_EXP 38
15827: PUSH
15828: LD_EXP 43
15832: AND
15833: IFFALSE 15957
15835: GO 15837
15837: DISABLE
15838: LD_INT 0
15840: PPUSH
15841: PPUSH
// begin enable ;
15842: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15843: LD_ADDR_VAR 0 2
15847: PUSH
15848: LD_INT 22
15850: PUSH
15851: LD_OWVAR 2
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 2
15862: PUSH
15863: LD_INT 34
15865: PUSH
15866: LD_INT 7
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 34
15875: PUSH
15876: LD_INT 45
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 34
15885: PUSH
15886: LD_INT 28
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 34
15895: PUSH
15896: LD_INT 47
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PPUSH
15914: CALL_OW 69
15918: ST_TO_ADDR
// if not tmp then
15919: LD_VAR 0 2
15923: NOT
15924: IFFALSE 15928
// exit ;
15926: GO 15957
// for i in tmp do
15928: LD_ADDR_VAR 0 1
15932: PUSH
15933: LD_VAR 0 2
15937: PUSH
15938: FOR_IN
15939: IFFALSE 15955
// begin SetLives ( i , 0 ) ;
15941: LD_VAR 0 1
15945: PPUSH
15946: LD_INT 0
15948: PPUSH
15949: CALL_OW 234
// end ;
15953: GO 15938
15955: POP
15956: POP
// end ;
15957: PPOPN 2
15959: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15960: LD_EXP 38
15964: PUSH
15965: LD_EXP 44
15969: AND
15970: IFFALSE 16054
15972: GO 15974
15974: DISABLE
15975: LD_INT 0
15977: PPUSH
15978: PPUSH
// begin enable ;
15979: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15980: LD_ADDR_VAR 0 2
15984: PUSH
15985: LD_INT 22
15987: PUSH
15988: LD_OWVAR 2
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 32
15999: PUSH
16000: LD_INT 3
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PPUSH
16011: CALL_OW 69
16015: ST_TO_ADDR
// if not tmp then
16016: LD_VAR 0 2
16020: NOT
16021: IFFALSE 16025
// exit ;
16023: GO 16054
// for i in tmp do
16025: LD_ADDR_VAR 0 1
16029: PUSH
16030: LD_VAR 0 2
16034: PUSH
16035: FOR_IN
16036: IFFALSE 16052
// begin SetLives ( i , 0 ) ;
16038: LD_VAR 0 1
16042: PPUSH
16043: LD_INT 0
16045: PPUSH
16046: CALL_OW 234
// end ;
16050: GO 16035
16052: POP
16053: POP
// end ;
16054: PPOPN 2
16056: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16057: LD_EXP 38
16061: PUSH
16062: LD_EXP 41
16066: AND
16067: IFFALSE 16160
16069: GO 16071
16071: DISABLE
16072: LD_INT 0
16074: PPUSH
// begin enable ;
16075: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16076: LD_ADDR_VAR 0 1
16080: PUSH
16081: LD_INT 22
16083: PUSH
16084: LD_OWVAR 2
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 2
16095: PUSH
16096: LD_INT 25
16098: PUSH
16099: LD_INT 5
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: LD_INT 25
16108: PUSH
16109: LD_INT 9
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: LD_INT 25
16118: PUSH
16119: LD_INT 8
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PPUSH
16136: CALL_OW 69
16140: PUSH
16141: FOR_IN
16142: IFFALSE 16158
// begin SetClass ( i , 1 ) ;
16144: LD_VAR 0 1
16148: PPUSH
16149: LD_INT 1
16151: PPUSH
16152: CALL_OW 336
// end ;
16156: GO 16141
16158: POP
16159: POP
// end ;
16160: PPOPN 1
16162: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16163: LD_EXP 38
16167: PUSH
16168: LD_EXP 42
16172: AND
16173: PUSH
16174: LD_OWVAR 65
16178: PUSH
16179: LD_INT 7
16181: LESS
16182: AND
16183: IFFALSE 16197
16185: GO 16187
16187: DISABLE
// begin enable ;
16188: ENABLE
// game_speed := 7 ;
16189: LD_ADDR_OWVAR 65
16193: PUSH
16194: LD_INT 7
16196: ST_TO_ADDR
// end ;
16197: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16198: LD_EXP 38
16202: PUSH
16203: LD_EXP 45
16207: AND
16208: IFFALSE 16410
16210: GO 16212
16212: DISABLE
16213: LD_INT 0
16215: PPUSH
16216: PPUSH
16217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16218: LD_ADDR_VAR 0 3
16222: PUSH
16223: LD_INT 81
16225: PUSH
16226: LD_OWVAR 2
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 21
16237: PUSH
16238: LD_INT 1
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PPUSH
16249: CALL_OW 69
16253: ST_TO_ADDR
// if not tmp then
16254: LD_VAR 0 3
16258: NOT
16259: IFFALSE 16263
// exit ;
16261: GO 16410
// if tmp > 5 then
16263: LD_VAR 0 3
16267: PUSH
16268: LD_INT 5
16270: GREATER
16271: IFFALSE 16283
// k := 5 else
16273: LD_ADDR_VAR 0 2
16277: PUSH
16278: LD_INT 5
16280: ST_TO_ADDR
16281: GO 16293
// k := tmp ;
16283: LD_ADDR_VAR 0 2
16287: PUSH
16288: LD_VAR 0 3
16292: ST_TO_ADDR
// for i := 1 to k do
16293: LD_ADDR_VAR 0 1
16297: PUSH
16298: DOUBLE
16299: LD_INT 1
16301: DEC
16302: ST_TO_ADDR
16303: LD_VAR 0 2
16307: PUSH
16308: FOR_TO
16309: IFFALSE 16408
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16311: LD_VAR 0 3
16315: PUSH
16316: LD_VAR 0 1
16320: ARRAY
16321: PPUSH
16322: LD_VAR 0 1
16326: PUSH
16327: LD_INT 4
16329: MOD
16330: PUSH
16331: LD_INT 1
16333: PLUS
16334: PPUSH
16335: CALL_OW 259
16339: PUSH
16340: LD_INT 10
16342: LESS
16343: IFFALSE 16406
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16345: LD_VAR 0 3
16349: PUSH
16350: LD_VAR 0 1
16354: ARRAY
16355: PPUSH
16356: LD_VAR 0 1
16360: PUSH
16361: LD_INT 4
16363: MOD
16364: PUSH
16365: LD_INT 1
16367: PLUS
16368: PPUSH
16369: LD_VAR 0 3
16373: PUSH
16374: LD_VAR 0 1
16378: ARRAY
16379: PPUSH
16380: LD_VAR 0 1
16384: PUSH
16385: LD_INT 4
16387: MOD
16388: PUSH
16389: LD_INT 1
16391: PLUS
16392: PPUSH
16393: CALL_OW 259
16397: PUSH
16398: LD_INT 1
16400: PLUS
16401: PPUSH
16402: CALL_OW 237
16406: GO 16308
16408: POP
16409: POP
// end ;
16410: PPOPN 3
16412: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16413: LD_EXP 38
16417: PUSH
16418: LD_EXP 46
16422: AND
16423: IFFALSE 16443
16425: GO 16427
16427: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16428: LD_INT 4
16430: PPUSH
16431: LD_OWVAR 2
16435: PPUSH
16436: LD_INT 0
16438: PPUSH
16439: CALL_OW 324
16443: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16444: LD_EXP 38
16448: PUSH
16449: LD_EXP 75
16453: AND
16454: IFFALSE 16474
16456: GO 16458
16458: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16459: LD_INT 19
16461: PPUSH
16462: LD_OWVAR 2
16466: PPUSH
16467: LD_INT 0
16469: PPUSH
16470: CALL_OW 324
16474: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16475: LD_EXP 38
16479: PUSH
16480: LD_EXP 47
16484: AND
16485: IFFALSE 16587
16487: GO 16489
16489: DISABLE
16490: LD_INT 0
16492: PPUSH
16493: PPUSH
// begin enable ;
16494: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16495: LD_ADDR_VAR 0 2
16499: PUSH
16500: LD_INT 22
16502: PUSH
16503: LD_OWVAR 2
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 2
16514: PUSH
16515: LD_INT 34
16517: PUSH
16518: LD_INT 11
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 34
16527: PUSH
16528: LD_INT 30
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PPUSH
16544: CALL_OW 69
16548: ST_TO_ADDR
// if not tmp then
16549: LD_VAR 0 2
16553: NOT
16554: IFFALSE 16558
// exit ;
16556: GO 16587
// for i in tmp do
16558: LD_ADDR_VAR 0 1
16562: PUSH
16563: LD_VAR 0 2
16567: PUSH
16568: FOR_IN
16569: IFFALSE 16585
// begin SetLives ( i , 0 ) ;
16571: LD_VAR 0 1
16575: PPUSH
16576: LD_INT 0
16578: PPUSH
16579: CALL_OW 234
// end ;
16583: GO 16568
16585: POP
16586: POP
// end ;
16587: PPOPN 2
16589: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16590: LD_EXP 38
16594: PUSH
16595: LD_EXP 48
16599: AND
16600: IFFALSE 16620
16602: GO 16604
16604: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16605: LD_INT 32
16607: PPUSH
16608: LD_OWVAR 2
16612: PPUSH
16613: LD_INT 0
16615: PPUSH
16616: CALL_OW 324
16620: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16621: LD_EXP 38
16625: PUSH
16626: LD_EXP 49
16630: AND
16631: IFFALSE 16812
16633: GO 16635
16635: DISABLE
16636: LD_INT 0
16638: PPUSH
16639: PPUSH
16640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16641: LD_ADDR_VAR 0 2
16645: PUSH
16646: LD_INT 22
16648: PUSH
16649: LD_OWVAR 2
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 33
16660: PUSH
16661: LD_INT 3
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PPUSH
16672: CALL_OW 69
16676: ST_TO_ADDR
// if not tmp then
16677: LD_VAR 0 2
16681: NOT
16682: IFFALSE 16686
// exit ;
16684: GO 16812
// side := 0 ;
16686: LD_ADDR_VAR 0 3
16690: PUSH
16691: LD_INT 0
16693: ST_TO_ADDR
// for i := 1 to 8 do
16694: LD_ADDR_VAR 0 1
16698: PUSH
16699: DOUBLE
16700: LD_INT 1
16702: DEC
16703: ST_TO_ADDR
16704: LD_INT 8
16706: PUSH
16707: FOR_TO
16708: IFFALSE 16756
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16710: LD_OWVAR 2
16714: PUSH
16715: LD_VAR 0 1
16719: NONEQUAL
16720: PUSH
16721: LD_OWVAR 2
16725: PPUSH
16726: LD_VAR 0 1
16730: PPUSH
16731: CALL_OW 81
16735: PUSH
16736: LD_INT 2
16738: EQUAL
16739: AND
16740: IFFALSE 16754
// begin side := i ;
16742: LD_ADDR_VAR 0 3
16746: PUSH
16747: LD_VAR 0 1
16751: ST_TO_ADDR
// break ;
16752: GO 16756
// end ;
16754: GO 16707
16756: POP
16757: POP
// if not side then
16758: LD_VAR 0 3
16762: NOT
16763: IFFALSE 16767
// exit ;
16765: GO 16812
// for i := 1 to tmp do
16767: LD_ADDR_VAR 0 1
16771: PUSH
16772: DOUBLE
16773: LD_INT 1
16775: DEC
16776: ST_TO_ADDR
16777: LD_VAR 0 2
16781: PUSH
16782: FOR_TO
16783: IFFALSE 16810
// if Prob ( 60 ) then
16785: LD_INT 60
16787: PPUSH
16788: CALL_OW 13
16792: IFFALSE 16808
// SetSide ( i , side ) ;
16794: LD_VAR 0 1
16798: PPUSH
16799: LD_VAR 0 3
16803: PPUSH
16804: CALL_OW 235
16808: GO 16782
16810: POP
16811: POP
// end ;
16812: PPOPN 3
16814: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16815: LD_EXP 38
16819: PUSH
16820: LD_EXP 51
16824: AND
16825: IFFALSE 16944
16827: GO 16829
16829: DISABLE
16830: LD_INT 0
16832: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16833: LD_ADDR_VAR 0 1
16837: PUSH
16838: LD_INT 22
16840: PUSH
16841: LD_OWVAR 2
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 21
16852: PUSH
16853: LD_INT 1
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 3
16862: PUSH
16863: LD_INT 23
16865: PUSH
16866: LD_INT 0
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: LIST
16881: PPUSH
16882: CALL_OW 69
16886: PUSH
16887: FOR_IN
16888: IFFALSE 16942
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16890: LD_VAR 0 1
16894: PPUSH
16895: CALL_OW 257
16899: PUSH
16900: LD_INT 1
16902: PUSH
16903: LD_INT 2
16905: PUSH
16906: LD_INT 3
16908: PUSH
16909: LD_INT 4
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: IN
16918: IFFALSE 16940
// SetClass ( un , rand ( 1 , 4 ) ) ;
16920: LD_VAR 0 1
16924: PPUSH
16925: LD_INT 1
16927: PPUSH
16928: LD_INT 4
16930: PPUSH
16931: CALL_OW 12
16935: PPUSH
16936: CALL_OW 336
16940: GO 16887
16942: POP
16943: POP
// end ;
16944: PPOPN 1
16946: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16947: LD_EXP 38
16951: PUSH
16952: LD_EXP 50
16956: AND
16957: IFFALSE 17036
16959: GO 16961
16961: DISABLE
16962: LD_INT 0
16964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16965: LD_ADDR_VAR 0 1
16969: PUSH
16970: LD_INT 22
16972: PUSH
16973: LD_OWVAR 2
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 21
16984: PUSH
16985: LD_INT 3
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PPUSH
16996: CALL_OW 69
17000: ST_TO_ADDR
// if not tmp then
17001: LD_VAR 0 1
17005: NOT
17006: IFFALSE 17010
// exit ;
17008: GO 17036
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17010: LD_VAR 0 1
17014: PUSH
17015: LD_INT 1
17017: PPUSH
17018: LD_VAR 0 1
17022: PPUSH
17023: CALL_OW 12
17027: ARRAY
17028: PPUSH
17029: LD_INT 100
17031: PPUSH
17032: CALL_OW 234
// end ;
17036: PPOPN 1
17038: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17039: LD_EXP 38
17043: PUSH
17044: LD_EXP 52
17048: AND
17049: IFFALSE 17147
17051: GO 17053
17053: DISABLE
17054: LD_INT 0
17056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17057: LD_ADDR_VAR 0 1
17061: PUSH
17062: LD_INT 22
17064: PUSH
17065: LD_OWVAR 2
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 21
17076: PUSH
17077: LD_INT 1
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PPUSH
17088: CALL_OW 69
17092: ST_TO_ADDR
// if not tmp then
17093: LD_VAR 0 1
17097: NOT
17098: IFFALSE 17102
// exit ;
17100: GO 17147
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17102: LD_VAR 0 1
17106: PUSH
17107: LD_INT 1
17109: PPUSH
17110: LD_VAR 0 1
17114: PPUSH
17115: CALL_OW 12
17119: ARRAY
17120: PPUSH
17121: LD_INT 1
17123: PPUSH
17124: LD_INT 4
17126: PPUSH
17127: CALL_OW 12
17131: PPUSH
17132: LD_INT 3000
17134: PPUSH
17135: LD_INT 9000
17137: PPUSH
17138: CALL_OW 12
17142: PPUSH
17143: CALL_OW 492
// end ;
17147: PPOPN 1
17149: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17150: LD_EXP 38
17154: PUSH
17155: LD_EXP 53
17159: AND
17160: IFFALSE 17180
17162: GO 17164
17164: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17165: LD_INT 1
17167: PPUSH
17168: LD_OWVAR 2
17172: PPUSH
17173: LD_INT 0
17175: PPUSH
17176: CALL_OW 324
17180: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17181: LD_EXP 38
17185: PUSH
17186: LD_EXP 54
17190: AND
17191: IFFALSE 17274
17193: GO 17195
17195: DISABLE
17196: LD_INT 0
17198: PPUSH
17199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17200: LD_ADDR_VAR 0 2
17204: PUSH
17205: LD_INT 22
17207: PUSH
17208: LD_OWVAR 2
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 21
17219: PUSH
17220: LD_INT 3
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PPUSH
17231: CALL_OW 69
17235: ST_TO_ADDR
// if not tmp then
17236: LD_VAR 0 2
17240: NOT
17241: IFFALSE 17245
// exit ;
17243: GO 17274
// for i in tmp do
17245: LD_ADDR_VAR 0 1
17249: PUSH
17250: LD_VAR 0 2
17254: PUSH
17255: FOR_IN
17256: IFFALSE 17272
// SetBLevel ( i , 10 ) ;
17258: LD_VAR 0 1
17262: PPUSH
17263: LD_INT 10
17265: PPUSH
17266: CALL_OW 241
17270: GO 17255
17272: POP
17273: POP
// end ;
17274: PPOPN 2
17276: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17277: LD_EXP 38
17281: PUSH
17282: LD_EXP 55
17286: AND
17287: IFFALSE 17398
17289: GO 17291
17291: DISABLE
17292: LD_INT 0
17294: PPUSH
17295: PPUSH
17296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17297: LD_ADDR_VAR 0 3
17301: PUSH
17302: LD_INT 22
17304: PUSH
17305: LD_OWVAR 2
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 25
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PPUSH
17328: CALL_OW 69
17332: ST_TO_ADDR
// if not tmp then
17333: LD_VAR 0 3
17337: NOT
17338: IFFALSE 17342
// exit ;
17340: GO 17398
// un := tmp [ rand ( 1 , tmp ) ] ;
17342: LD_ADDR_VAR 0 2
17346: PUSH
17347: LD_VAR 0 3
17351: PUSH
17352: LD_INT 1
17354: PPUSH
17355: LD_VAR 0 3
17359: PPUSH
17360: CALL_OW 12
17364: ARRAY
17365: ST_TO_ADDR
// if Crawls ( un ) then
17366: LD_VAR 0 2
17370: PPUSH
17371: CALL_OW 318
17375: IFFALSE 17386
// ComWalk ( un ) ;
17377: LD_VAR 0 2
17381: PPUSH
17382: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17386: LD_VAR 0 2
17390: PPUSH
17391: LD_INT 5
17393: PPUSH
17394: CALL_OW 336
// end ;
17398: PPOPN 3
17400: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17401: LD_EXP 38
17405: PUSH
17406: LD_EXP 56
17410: AND
17411: PUSH
17412: LD_OWVAR 67
17416: PUSH
17417: LD_INT 3
17419: LESS
17420: AND
17421: IFFALSE 17440
17423: GO 17425
17425: DISABLE
// Difficulty := Difficulty + 1 ;
17426: LD_ADDR_OWVAR 67
17430: PUSH
17431: LD_OWVAR 67
17435: PUSH
17436: LD_INT 1
17438: PLUS
17439: ST_TO_ADDR
17440: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17441: LD_EXP 38
17445: PUSH
17446: LD_EXP 57
17450: AND
17451: IFFALSE 17554
17453: GO 17455
17455: DISABLE
17456: LD_INT 0
17458: PPUSH
// begin for i := 1 to 5 do
17459: LD_ADDR_VAR 0 1
17463: PUSH
17464: DOUBLE
17465: LD_INT 1
17467: DEC
17468: ST_TO_ADDR
17469: LD_INT 5
17471: PUSH
17472: FOR_TO
17473: IFFALSE 17552
// begin uc_nation := nation_nature ;
17475: LD_ADDR_OWVAR 21
17479: PUSH
17480: LD_INT 0
17482: ST_TO_ADDR
// uc_side := 0 ;
17483: LD_ADDR_OWVAR 20
17487: PUSH
17488: LD_INT 0
17490: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17491: LD_ADDR_OWVAR 29
17495: PUSH
17496: LD_INT 12
17498: PUSH
17499: LD_INT 12
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: ST_TO_ADDR
// hc_agressivity := 20 ;
17506: LD_ADDR_OWVAR 35
17510: PUSH
17511: LD_INT 20
17513: ST_TO_ADDR
// hc_class := class_tiger ;
17514: LD_ADDR_OWVAR 28
17518: PUSH
17519: LD_INT 14
17521: ST_TO_ADDR
// hc_gallery :=  ;
17522: LD_ADDR_OWVAR 33
17526: PUSH
17527: LD_STRING 
17529: ST_TO_ADDR
// hc_name :=  ;
17530: LD_ADDR_OWVAR 26
17534: PUSH
17535: LD_STRING 
17537: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17538: CALL_OW 44
17542: PPUSH
17543: LD_INT 0
17545: PPUSH
17546: CALL_OW 51
// end ;
17550: GO 17472
17552: POP
17553: POP
// end ;
17554: PPOPN 1
17556: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17557: LD_EXP 38
17561: PUSH
17562: LD_EXP 58
17566: AND
17567: IFFALSE 17576
17569: GO 17571
17571: DISABLE
// StreamSibBomb ;
17572: CALL 17577 0 0
17576: END
// export function StreamSibBomb ; var i , x , y ; begin
17577: LD_INT 0
17579: PPUSH
17580: PPUSH
17581: PPUSH
17582: PPUSH
// result := false ;
17583: LD_ADDR_VAR 0 1
17587: PUSH
17588: LD_INT 0
17590: ST_TO_ADDR
// for i := 1 to 16 do
17591: LD_ADDR_VAR 0 2
17595: PUSH
17596: DOUBLE
17597: LD_INT 1
17599: DEC
17600: ST_TO_ADDR
17601: LD_INT 16
17603: PUSH
17604: FOR_TO
17605: IFFALSE 17804
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17607: LD_ADDR_VAR 0 3
17611: PUSH
17612: LD_INT 10
17614: PUSH
17615: LD_INT 20
17617: PUSH
17618: LD_INT 30
17620: PUSH
17621: LD_INT 40
17623: PUSH
17624: LD_INT 50
17626: PUSH
17627: LD_INT 60
17629: PUSH
17630: LD_INT 70
17632: PUSH
17633: LD_INT 80
17635: PUSH
17636: LD_INT 90
17638: PUSH
17639: LD_INT 100
17641: PUSH
17642: LD_INT 110
17644: PUSH
17645: LD_INT 120
17647: PUSH
17648: LD_INT 130
17650: PUSH
17651: LD_INT 140
17653: PUSH
17654: LD_INT 150
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 1
17676: PPUSH
17677: LD_INT 15
17679: PPUSH
17680: CALL_OW 12
17684: ARRAY
17685: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17686: LD_ADDR_VAR 0 4
17690: PUSH
17691: LD_INT 10
17693: PUSH
17694: LD_INT 20
17696: PUSH
17697: LD_INT 30
17699: PUSH
17700: LD_INT 40
17702: PUSH
17703: LD_INT 50
17705: PUSH
17706: LD_INT 60
17708: PUSH
17709: LD_INT 70
17711: PUSH
17712: LD_INT 80
17714: PUSH
17715: LD_INT 90
17717: PUSH
17718: LD_INT 100
17720: PUSH
17721: LD_INT 110
17723: PUSH
17724: LD_INT 120
17726: PUSH
17727: LD_INT 130
17729: PUSH
17730: LD_INT 140
17732: PUSH
17733: LD_INT 150
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 1
17755: PPUSH
17756: LD_INT 15
17758: PPUSH
17759: CALL_OW 12
17763: ARRAY
17764: ST_TO_ADDR
// if ValidHex ( x , y ) then
17765: LD_VAR 0 3
17769: PPUSH
17770: LD_VAR 0 4
17774: PPUSH
17775: CALL_OW 488
17779: IFFALSE 17802
// begin result := [ x , y ] ;
17781: LD_ADDR_VAR 0 1
17785: PUSH
17786: LD_VAR 0 3
17790: PUSH
17791: LD_VAR 0 4
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: ST_TO_ADDR
// break ;
17800: GO 17804
// end ; end ;
17802: GO 17604
17804: POP
17805: POP
// if result then
17806: LD_VAR 0 1
17810: IFFALSE 17870
// begin ToLua ( playSibBomb() ) ;
17812: LD_STRING playSibBomb()
17814: PPUSH
17815: CALL_OW 559
// wait ( 0 0$14 ) ;
17819: LD_INT 490
17821: PPUSH
17822: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17826: LD_VAR 0 1
17830: PUSH
17831: LD_INT 1
17833: ARRAY
17834: PPUSH
17835: LD_VAR 0 1
17839: PUSH
17840: LD_INT 2
17842: ARRAY
17843: PPUSH
17844: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17848: LD_VAR 0 1
17852: PUSH
17853: LD_INT 1
17855: ARRAY
17856: PPUSH
17857: LD_VAR 0 1
17861: PUSH
17862: LD_INT 2
17864: ARRAY
17865: PPUSH
17866: CALL_OW 429
// end ; end ;
17870: LD_VAR 0 1
17874: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17875: LD_EXP 38
17879: PUSH
17880: LD_EXP 60
17884: AND
17885: IFFALSE 17897
17887: GO 17889
17889: DISABLE
// YouLost (  ) ;
17890: LD_STRING 
17892: PPUSH
17893: CALL_OW 104
17897: END
// every 0 0$1 trigger StreamModeActive and sFog do
17898: LD_EXP 38
17902: PUSH
17903: LD_EXP 59
17907: AND
17908: IFFALSE 17922
17910: GO 17912
17912: DISABLE
// FogOff ( your_side ) ;
17913: LD_OWVAR 2
17917: PPUSH
17918: CALL_OW 344
17922: END
// every 0 0$1 trigger StreamModeActive and sSun do
17923: LD_EXP 38
17927: PUSH
17928: LD_EXP 61
17932: AND
17933: IFFALSE 17961
17935: GO 17937
17937: DISABLE
// begin solar_recharge_percent := 0 ;
17938: LD_ADDR_OWVAR 79
17942: PUSH
17943: LD_INT 0
17945: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17946: LD_INT 10500
17948: PPUSH
17949: CALL_OW 67
// solar_recharge_percent := 100 ;
17953: LD_ADDR_OWVAR 79
17957: PUSH
17958: LD_INT 100
17960: ST_TO_ADDR
// end ;
17961: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17962: LD_EXP 38
17966: PUSH
17967: LD_EXP 62
17971: AND
17972: IFFALSE 18211
17974: GO 17976
17976: DISABLE
17977: LD_INT 0
17979: PPUSH
17980: PPUSH
17981: PPUSH
// begin tmp := [ ] ;
17982: LD_ADDR_VAR 0 3
17986: PUSH
17987: EMPTY
17988: ST_TO_ADDR
// for i := 1 to 6 do
17989: LD_ADDR_VAR 0 1
17993: PUSH
17994: DOUBLE
17995: LD_INT 1
17997: DEC
17998: ST_TO_ADDR
17999: LD_INT 6
18001: PUSH
18002: FOR_TO
18003: IFFALSE 18108
// begin uc_nation := nation_nature ;
18005: LD_ADDR_OWVAR 21
18009: PUSH
18010: LD_INT 0
18012: ST_TO_ADDR
// uc_side := 0 ;
18013: LD_ADDR_OWVAR 20
18017: PUSH
18018: LD_INT 0
18020: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18021: LD_ADDR_OWVAR 29
18025: PUSH
18026: LD_INT 12
18028: PUSH
18029: LD_INT 12
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: ST_TO_ADDR
// hc_agressivity := 20 ;
18036: LD_ADDR_OWVAR 35
18040: PUSH
18041: LD_INT 20
18043: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18044: LD_ADDR_OWVAR 28
18048: PUSH
18049: LD_INT 17
18051: ST_TO_ADDR
// hc_gallery :=  ;
18052: LD_ADDR_OWVAR 33
18056: PUSH
18057: LD_STRING 
18059: ST_TO_ADDR
// hc_name :=  ;
18060: LD_ADDR_OWVAR 26
18064: PUSH
18065: LD_STRING 
18067: ST_TO_ADDR
// un := CreateHuman ;
18068: LD_ADDR_VAR 0 2
18072: PUSH
18073: CALL_OW 44
18077: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18078: LD_VAR 0 2
18082: PPUSH
18083: LD_INT 1
18085: PPUSH
18086: CALL_OW 51
// tmp := tmp ^ un ;
18090: LD_ADDR_VAR 0 3
18094: PUSH
18095: LD_VAR 0 3
18099: PUSH
18100: LD_VAR 0 2
18104: ADD
18105: ST_TO_ADDR
// end ;
18106: GO 18002
18108: POP
18109: POP
// repeat wait ( 0 0$1 ) ;
18110: LD_INT 35
18112: PPUSH
18113: CALL_OW 67
// for un in tmp do
18117: LD_ADDR_VAR 0 2
18121: PUSH
18122: LD_VAR 0 3
18126: PUSH
18127: FOR_IN
18128: IFFALSE 18202
// begin if IsDead ( un ) then
18130: LD_VAR 0 2
18134: PPUSH
18135: CALL_OW 301
18139: IFFALSE 18159
// begin tmp := tmp diff un ;
18141: LD_ADDR_VAR 0 3
18145: PUSH
18146: LD_VAR 0 3
18150: PUSH
18151: LD_VAR 0 2
18155: DIFF
18156: ST_TO_ADDR
// continue ;
18157: GO 18127
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18159: LD_VAR 0 2
18163: PPUSH
18164: LD_INT 3
18166: PUSH
18167: LD_INT 22
18169: PUSH
18170: LD_INT 0
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PPUSH
18181: CALL_OW 69
18185: PPUSH
18186: LD_VAR 0 2
18190: PPUSH
18191: CALL_OW 74
18195: PPUSH
18196: CALL_OW 115
// end ;
18200: GO 18127
18202: POP
18203: POP
// until not tmp ;
18204: LD_VAR 0 3
18208: NOT
18209: IFFALSE 18110
// end ;
18211: PPOPN 3
18213: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18214: LD_EXP 38
18218: PUSH
18219: LD_EXP 63
18223: AND
18224: IFFALSE 18278
18226: GO 18228
18228: DISABLE
// begin ToLua ( displayTroll(); ) ;
18229: LD_STRING displayTroll();
18231: PPUSH
18232: CALL_OW 559
// wait ( 3 3$00 ) ;
18236: LD_INT 6300
18238: PPUSH
18239: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18243: LD_STRING hideTroll();
18245: PPUSH
18246: CALL_OW 559
// wait ( 1 1$00 ) ;
18250: LD_INT 2100
18252: PPUSH
18253: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18257: LD_STRING displayTroll();
18259: PPUSH
18260: CALL_OW 559
// wait ( 1 1$00 ) ;
18264: LD_INT 2100
18266: PPUSH
18267: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18271: LD_STRING hideTroll();
18273: PPUSH
18274: CALL_OW 559
// end ;
18278: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18279: LD_EXP 38
18283: PUSH
18284: LD_EXP 64
18288: AND
18289: IFFALSE 18352
18291: GO 18293
18293: DISABLE
18294: LD_INT 0
18296: PPUSH
// begin p := 0 ;
18297: LD_ADDR_VAR 0 1
18301: PUSH
18302: LD_INT 0
18304: ST_TO_ADDR
// repeat game_speed := 1 ;
18305: LD_ADDR_OWVAR 65
18309: PUSH
18310: LD_INT 1
18312: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18313: LD_INT 35
18315: PPUSH
18316: CALL_OW 67
// p := p + 1 ;
18320: LD_ADDR_VAR 0 1
18324: PUSH
18325: LD_VAR 0 1
18329: PUSH
18330: LD_INT 1
18332: PLUS
18333: ST_TO_ADDR
// until p >= 60 ;
18334: LD_VAR 0 1
18338: PUSH
18339: LD_INT 60
18341: GREATEREQUAL
18342: IFFALSE 18305
// game_speed := 4 ;
18344: LD_ADDR_OWVAR 65
18348: PUSH
18349: LD_INT 4
18351: ST_TO_ADDR
// end ;
18352: PPOPN 1
18354: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18355: LD_EXP 38
18359: PUSH
18360: LD_EXP 65
18364: AND
18365: IFFALSE 18511
18367: GO 18369
18369: DISABLE
18370: LD_INT 0
18372: PPUSH
18373: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18374: LD_ADDR_VAR 0 1
18378: PUSH
18379: LD_INT 22
18381: PUSH
18382: LD_OWVAR 2
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 2
18393: PUSH
18394: LD_INT 30
18396: PUSH
18397: LD_INT 0
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 30
18406: PUSH
18407: LD_INT 1
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: LIST
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PPUSH
18423: CALL_OW 69
18427: ST_TO_ADDR
// if not depot then
18428: LD_VAR 0 1
18432: NOT
18433: IFFALSE 18437
// exit ;
18435: GO 18511
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18437: LD_ADDR_VAR 0 2
18441: PUSH
18442: LD_VAR 0 1
18446: PUSH
18447: LD_INT 1
18449: PPUSH
18450: LD_VAR 0 1
18454: PPUSH
18455: CALL_OW 12
18459: ARRAY
18460: PPUSH
18461: CALL_OW 274
18465: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18466: LD_VAR 0 2
18470: PPUSH
18471: LD_INT 1
18473: PPUSH
18474: LD_INT 0
18476: PPUSH
18477: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18481: LD_VAR 0 2
18485: PPUSH
18486: LD_INT 2
18488: PPUSH
18489: LD_INT 0
18491: PPUSH
18492: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18496: LD_VAR 0 2
18500: PPUSH
18501: LD_INT 3
18503: PPUSH
18504: LD_INT 0
18506: PPUSH
18507: CALL_OW 277
// end ;
18511: PPOPN 2
18513: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18514: LD_EXP 38
18518: PUSH
18519: LD_EXP 66
18523: AND
18524: IFFALSE 18621
18526: GO 18528
18528: DISABLE
18529: LD_INT 0
18531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18532: LD_ADDR_VAR 0 1
18536: PUSH
18537: LD_INT 22
18539: PUSH
18540: LD_OWVAR 2
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 21
18551: PUSH
18552: LD_INT 1
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 3
18561: PUSH
18562: LD_INT 23
18564: PUSH
18565: LD_INT 0
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: LIST
18580: PPUSH
18581: CALL_OW 69
18585: ST_TO_ADDR
// if not tmp then
18586: LD_VAR 0 1
18590: NOT
18591: IFFALSE 18595
// exit ;
18593: GO 18621
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18595: LD_VAR 0 1
18599: PUSH
18600: LD_INT 1
18602: PPUSH
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 12
18612: ARRAY
18613: PPUSH
18614: LD_INT 200
18616: PPUSH
18617: CALL_OW 234
// end ;
18621: PPOPN 1
18623: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18624: LD_EXP 38
18628: PUSH
18629: LD_EXP 67
18633: AND
18634: IFFALSE 18713
18636: GO 18638
18638: DISABLE
18639: LD_INT 0
18641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18642: LD_ADDR_VAR 0 1
18646: PUSH
18647: LD_INT 22
18649: PUSH
18650: LD_OWVAR 2
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 21
18661: PUSH
18662: LD_INT 2
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PPUSH
18673: CALL_OW 69
18677: ST_TO_ADDR
// if not tmp then
18678: LD_VAR 0 1
18682: NOT
18683: IFFALSE 18687
// exit ;
18685: GO 18713
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18687: LD_VAR 0 1
18691: PUSH
18692: LD_INT 1
18694: PPUSH
18695: LD_VAR 0 1
18699: PPUSH
18700: CALL_OW 12
18704: ARRAY
18705: PPUSH
18706: LD_INT 60
18708: PPUSH
18709: CALL_OW 234
// end ;
18713: PPOPN 1
18715: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18716: LD_EXP 38
18720: PUSH
18721: LD_EXP 68
18725: AND
18726: IFFALSE 18825
18728: GO 18730
18730: DISABLE
18731: LD_INT 0
18733: PPUSH
18734: PPUSH
// begin enable ;
18735: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18736: LD_ADDR_VAR 0 1
18740: PUSH
18741: LD_INT 22
18743: PUSH
18744: LD_OWVAR 2
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 61
18755: PUSH
18756: EMPTY
18757: LIST
18758: PUSH
18759: LD_INT 33
18761: PUSH
18762: LD_INT 2
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: LIST
18773: PPUSH
18774: CALL_OW 69
18778: ST_TO_ADDR
// if not tmp then
18779: LD_VAR 0 1
18783: NOT
18784: IFFALSE 18788
// exit ;
18786: GO 18825
// for i in tmp do
18788: LD_ADDR_VAR 0 2
18792: PUSH
18793: LD_VAR 0 1
18797: PUSH
18798: FOR_IN
18799: IFFALSE 18823
// if IsControledBy ( i ) then
18801: LD_VAR 0 2
18805: PPUSH
18806: CALL_OW 312
18810: IFFALSE 18821
// ComUnlink ( i ) ;
18812: LD_VAR 0 2
18816: PPUSH
18817: CALL_OW 136
18821: GO 18798
18823: POP
18824: POP
// end ;
18825: PPOPN 2
18827: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18828: LD_EXP 38
18832: PUSH
18833: LD_EXP 69
18837: AND
18838: IFFALSE 18978
18840: GO 18842
18842: DISABLE
18843: LD_INT 0
18845: PPUSH
18846: PPUSH
// begin ToLua ( displayPowell(); ) ;
18847: LD_STRING displayPowell();
18849: PPUSH
18850: CALL_OW 559
// uc_side := 0 ;
18854: LD_ADDR_OWVAR 20
18858: PUSH
18859: LD_INT 0
18861: ST_TO_ADDR
// uc_nation := 2 ;
18862: LD_ADDR_OWVAR 21
18866: PUSH
18867: LD_INT 2
18869: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18870: LD_ADDR_OWVAR 37
18874: PUSH
18875: LD_INT 14
18877: ST_TO_ADDR
// vc_engine := engine_siberite ;
18878: LD_ADDR_OWVAR 39
18882: PUSH
18883: LD_INT 3
18885: ST_TO_ADDR
// vc_control := control_apeman ;
18886: LD_ADDR_OWVAR 38
18890: PUSH
18891: LD_INT 5
18893: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18894: LD_ADDR_OWVAR 40
18898: PUSH
18899: LD_INT 29
18901: ST_TO_ADDR
// un := CreateVehicle ;
18902: LD_ADDR_VAR 0 2
18906: PUSH
18907: CALL_OW 45
18911: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18912: LD_VAR 0 2
18916: PPUSH
18917: LD_INT 1
18919: PPUSH
18920: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18924: LD_INT 35
18926: PPUSH
18927: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18931: LD_VAR 0 2
18935: PPUSH
18936: LD_INT 22
18938: PUSH
18939: LD_OWVAR 2
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PPUSH
18948: CALL_OW 69
18952: PPUSH
18953: LD_VAR 0 2
18957: PPUSH
18958: CALL_OW 74
18962: PPUSH
18963: CALL_OW 115
// until IsDead ( un ) ;
18967: LD_VAR 0 2
18971: PPUSH
18972: CALL_OW 301
18976: IFFALSE 18924
// end ;
18978: PPOPN 2
18980: END
// every 0 0$1 trigger StreamModeActive and sStu do
18981: LD_EXP 38
18985: PUSH
18986: LD_EXP 77
18990: AND
18991: IFFALSE 19007
18993: GO 18995
18995: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18996: LD_STRING displayStucuk();
18998: PPUSH
18999: CALL_OW 559
// ResetFog ;
19003: CALL_OW 335
// end ;
19007: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19008: LD_EXP 38
19012: PUSH
19013: LD_EXP 70
19017: AND
19018: IFFALSE 19159
19020: GO 19022
19022: DISABLE
19023: LD_INT 0
19025: PPUSH
19026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19027: LD_ADDR_VAR 0 2
19031: PUSH
19032: LD_INT 22
19034: PUSH
19035: LD_OWVAR 2
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 21
19046: PUSH
19047: LD_INT 1
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PPUSH
19058: CALL_OW 69
19062: ST_TO_ADDR
// if not tmp then
19063: LD_VAR 0 2
19067: NOT
19068: IFFALSE 19072
// exit ;
19070: GO 19159
// un := tmp [ rand ( 1 , tmp ) ] ;
19072: LD_ADDR_VAR 0 1
19076: PUSH
19077: LD_VAR 0 2
19081: PUSH
19082: LD_INT 1
19084: PPUSH
19085: LD_VAR 0 2
19089: PPUSH
19090: CALL_OW 12
19094: ARRAY
19095: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19096: LD_VAR 0 1
19100: PPUSH
19101: LD_INT 0
19103: PPUSH
19104: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19108: LD_VAR 0 1
19112: PPUSH
19113: LD_OWVAR 3
19117: PUSH
19118: LD_VAR 0 1
19122: DIFF
19123: PPUSH
19124: LD_VAR 0 1
19128: PPUSH
19129: CALL_OW 74
19133: PPUSH
19134: CALL_OW 115
// wait ( 0 0$20 ) ;
19138: LD_INT 700
19140: PPUSH
19141: CALL_OW 67
// SetSide ( un , your_side ) ;
19145: LD_VAR 0 1
19149: PPUSH
19150: LD_OWVAR 2
19154: PPUSH
19155: CALL_OW 235
// end ;
19159: PPOPN 2
19161: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19162: LD_EXP 38
19166: PUSH
19167: LD_EXP 71
19171: AND
19172: IFFALSE 19278
19174: GO 19176
19176: DISABLE
19177: LD_INT 0
19179: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19180: LD_ADDR_VAR 0 1
19184: PUSH
19185: LD_INT 22
19187: PUSH
19188: LD_OWVAR 2
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 2
19199: PUSH
19200: LD_INT 30
19202: PUSH
19203: LD_INT 0
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 30
19212: PUSH
19213: LD_INT 1
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: LIST
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PPUSH
19229: CALL_OW 69
19233: ST_TO_ADDR
// if not depot then
19234: LD_VAR 0 1
19238: NOT
19239: IFFALSE 19243
// exit ;
19241: GO 19278
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19243: LD_VAR 0 1
19247: PUSH
19248: LD_INT 1
19250: ARRAY
19251: PPUSH
19252: CALL_OW 250
19256: PPUSH
19257: LD_VAR 0 1
19261: PUSH
19262: LD_INT 1
19264: ARRAY
19265: PPUSH
19266: CALL_OW 251
19270: PPUSH
19271: LD_INT 70
19273: PPUSH
19274: CALL_OW 495
// end ;
19278: PPOPN 1
19280: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19281: LD_EXP 38
19285: PUSH
19286: LD_EXP 72
19290: AND
19291: IFFALSE 19502
19293: GO 19295
19295: DISABLE
19296: LD_INT 0
19298: PPUSH
19299: PPUSH
19300: PPUSH
19301: PPUSH
19302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19303: LD_ADDR_VAR 0 5
19307: PUSH
19308: LD_INT 22
19310: PUSH
19311: LD_OWVAR 2
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 21
19322: PUSH
19323: LD_INT 1
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PPUSH
19334: CALL_OW 69
19338: ST_TO_ADDR
// if not tmp then
19339: LD_VAR 0 5
19343: NOT
19344: IFFALSE 19348
// exit ;
19346: GO 19502
// for i in tmp do
19348: LD_ADDR_VAR 0 1
19352: PUSH
19353: LD_VAR 0 5
19357: PUSH
19358: FOR_IN
19359: IFFALSE 19500
// begin d := rand ( 0 , 5 ) ;
19361: LD_ADDR_VAR 0 4
19365: PUSH
19366: LD_INT 0
19368: PPUSH
19369: LD_INT 5
19371: PPUSH
19372: CALL_OW 12
19376: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19377: LD_ADDR_VAR 0 2
19381: PUSH
19382: LD_VAR 0 1
19386: PPUSH
19387: CALL_OW 250
19391: PPUSH
19392: LD_VAR 0 4
19396: PPUSH
19397: LD_INT 3
19399: PPUSH
19400: LD_INT 12
19402: PPUSH
19403: CALL_OW 12
19407: PPUSH
19408: CALL_OW 272
19412: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19413: LD_ADDR_VAR 0 3
19417: PUSH
19418: LD_VAR 0 1
19422: PPUSH
19423: CALL_OW 251
19427: PPUSH
19428: LD_VAR 0 4
19432: PPUSH
19433: LD_INT 3
19435: PPUSH
19436: LD_INT 12
19438: PPUSH
19439: CALL_OW 12
19443: PPUSH
19444: CALL_OW 273
19448: ST_TO_ADDR
// if ValidHex ( x , y ) then
19449: LD_VAR 0 2
19453: PPUSH
19454: LD_VAR 0 3
19458: PPUSH
19459: CALL_OW 488
19463: IFFALSE 19498
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19465: LD_VAR 0 1
19469: PPUSH
19470: LD_VAR 0 2
19474: PPUSH
19475: LD_VAR 0 3
19479: PPUSH
19480: LD_INT 3
19482: PPUSH
19483: LD_INT 6
19485: PPUSH
19486: CALL_OW 12
19490: PPUSH
19491: LD_INT 1
19493: PPUSH
19494: CALL_OW 483
// end ;
19498: GO 19358
19500: POP
19501: POP
// end ;
19502: PPOPN 5
19504: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19505: LD_EXP 38
19509: PUSH
19510: LD_EXP 73
19514: AND
19515: IFFALSE 19609
19517: GO 19519
19519: DISABLE
19520: LD_INT 0
19522: PPUSH
19523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19524: LD_ADDR_VAR 0 2
19528: PUSH
19529: LD_INT 22
19531: PUSH
19532: LD_OWVAR 2
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 32
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 21
19553: PUSH
19554: LD_INT 2
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: LIST
19565: PPUSH
19566: CALL_OW 69
19570: ST_TO_ADDR
// if not tmp then
19571: LD_VAR 0 2
19575: NOT
19576: IFFALSE 19580
// exit ;
19578: GO 19609
// for i in tmp do
19580: LD_ADDR_VAR 0 1
19584: PUSH
19585: LD_VAR 0 2
19589: PUSH
19590: FOR_IN
19591: IFFALSE 19607
// SetFuel ( i , 0 ) ;
19593: LD_VAR 0 1
19597: PPUSH
19598: LD_INT 0
19600: PPUSH
19601: CALL_OW 240
19605: GO 19590
19607: POP
19608: POP
// end ;
19609: PPOPN 2
19611: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19612: LD_EXP 38
19616: PUSH
19617: LD_EXP 74
19621: AND
19622: IFFALSE 19688
19624: GO 19626
19626: DISABLE
19627: LD_INT 0
19629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19630: LD_ADDR_VAR 0 1
19634: PUSH
19635: LD_INT 22
19637: PUSH
19638: LD_OWVAR 2
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 30
19649: PUSH
19650: LD_INT 29
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PPUSH
19661: CALL_OW 69
19665: ST_TO_ADDR
// if not tmp then
19666: LD_VAR 0 1
19670: NOT
19671: IFFALSE 19675
// exit ;
19673: GO 19688
// DestroyUnit ( tmp [ 1 ] ) ;
19675: LD_VAR 0 1
19679: PUSH
19680: LD_INT 1
19682: ARRAY
19683: PPUSH
19684: CALL_OW 65
// end ;
19688: PPOPN 1
19690: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19691: LD_EXP 38
19695: PUSH
19696: LD_EXP 76
19700: AND
19701: IFFALSE 19830
19703: GO 19705
19705: DISABLE
19706: LD_INT 0
19708: PPUSH
// begin uc_side := 0 ;
19709: LD_ADDR_OWVAR 20
19713: PUSH
19714: LD_INT 0
19716: ST_TO_ADDR
// uc_nation := nation_arabian ;
19717: LD_ADDR_OWVAR 21
19721: PUSH
19722: LD_INT 2
19724: ST_TO_ADDR
// hc_gallery :=  ;
19725: LD_ADDR_OWVAR 33
19729: PUSH
19730: LD_STRING 
19732: ST_TO_ADDR
// hc_name :=  ;
19733: LD_ADDR_OWVAR 26
19737: PUSH
19738: LD_STRING 
19740: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19741: LD_INT 1
19743: PPUSH
19744: LD_INT 11
19746: PPUSH
19747: LD_INT 10
19749: PPUSH
19750: CALL_OW 380
// un := CreateHuman ;
19754: LD_ADDR_VAR 0 1
19758: PUSH
19759: CALL_OW 44
19763: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19764: LD_VAR 0 1
19768: PPUSH
19769: LD_INT 1
19771: PPUSH
19772: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19776: LD_INT 35
19778: PPUSH
19779: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19783: LD_VAR 0 1
19787: PPUSH
19788: LD_INT 22
19790: PUSH
19791: LD_OWVAR 2
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PPUSH
19800: CALL_OW 69
19804: PPUSH
19805: LD_VAR 0 1
19809: PPUSH
19810: CALL_OW 74
19814: PPUSH
19815: CALL_OW 115
// until IsDead ( un ) ;
19819: LD_VAR 0 1
19823: PPUSH
19824: CALL_OW 301
19828: IFFALSE 19776
// end ;
19830: PPOPN 1
19832: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19833: LD_EXP 38
19837: PUSH
19838: LD_EXP 78
19842: AND
19843: IFFALSE 19855
19845: GO 19847
19847: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19848: LD_STRING earthquake(getX(game), 0, 32)
19850: PPUSH
19851: CALL_OW 559
19855: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19856: LD_EXP 38
19860: PUSH
19861: LD_EXP 79
19865: AND
19866: IFFALSE 19957
19868: GO 19870
19870: DISABLE
19871: LD_INT 0
19873: PPUSH
// begin enable ;
19874: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19875: LD_ADDR_VAR 0 1
19879: PUSH
19880: LD_INT 22
19882: PUSH
19883: LD_OWVAR 2
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 21
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 33
19904: PUSH
19905: LD_INT 3
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: LIST
19916: PPUSH
19917: CALL_OW 69
19921: ST_TO_ADDR
// if not tmp then
19922: LD_VAR 0 1
19926: NOT
19927: IFFALSE 19931
// exit ;
19929: GO 19957
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19931: LD_VAR 0 1
19935: PUSH
19936: LD_INT 1
19938: PPUSH
19939: LD_VAR 0 1
19943: PPUSH
19944: CALL_OW 12
19948: ARRAY
19949: PPUSH
19950: LD_INT 1
19952: PPUSH
19953: CALL_OW 234
// end ;
19957: PPOPN 1
19959: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19960: LD_EXP 38
19964: PUSH
19965: LD_EXP 80
19969: AND
19970: IFFALSE 20111
19972: GO 19974
19974: DISABLE
19975: LD_INT 0
19977: PPUSH
19978: PPUSH
19979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19980: LD_ADDR_VAR 0 3
19984: PUSH
19985: LD_INT 22
19987: PUSH
19988: LD_OWVAR 2
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 25
19999: PUSH
20000: LD_INT 1
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PPUSH
20011: CALL_OW 69
20015: ST_TO_ADDR
// if not tmp then
20016: LD_VAR 0 3
20020: NOT
20021: IFFALSE 20025
// exit ;
20023: GO 20111
// un := tmp [ rand ( 1 , tmp ) ] ;
20025: LD_ADDR_VAR 0 2
20029: PUSH
20030: LD_VAR 0 3
20034: PUSH
20035: LD_INT 1
20037: PPUSH
20038: LD_VAR 0 3
20042: PPUSH
20043: CALL_OW 12
20047: ARRAY
20048: ST_TO_ADDR
// if Crawls ( un ) then
20049: LD_VAR 0 2
20053: PPUSH
20054: CALL_OW 318
20058: IFFALSE 20069
// ComWalk ( un ) ;
20060: LD_VAR 0 2
20064: PPUSH
20065: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20069: LD_VAR 0 2
20073: PPUSH
20074: LD_INT 9
20076: PPUSH
20077: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20081: LD_INT 28
20083: PPUSH
20084: LD_OWVAR 2
20088: PPUSH
20089: LD_INT 2
20091: PPUSH
20092: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20096: LD_INT 29
20098: PPUSH
20099: LD_OWVAR 2
20103: PPUSH
20104: LD_INT 2
20106: PPUSH
20107: CALL_OW 322
// end ;
20111: PPOPN 3
20113: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20114: LD_EXP 38
20118: PUSH
20119: LD_EXP 81
20123: AND
20124: IFFALSE 20235
20126: GO 20128
20128: DISABLE
20129: LD_INT 0
20131: PPUSH
20132: PPUSH
20133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20134: LD_ADDR_VAR 0 3
20138: PUSH
20139: LD_INT 22
20141: PUSH
20142: LD_OWVAR 2
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 25
20153: PUSH
20154: LD_INT 1
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PPUSH
20165: CALL_OW 69
20169: ST_TO_ADDR
// if not tmp then
20170: LD_VAR 0 3
20174: NOT
20175: IFFALSE 20179
// exit ;
20177: GO 20235
// un := tmp [ rand ( 1 , tmp ) ] ;
20179: LD_ADDR_VAR 0 2
20183: PUSH
20184: LD_VAR 0 3
20188: PUSH
20189: LD_INT 1
20191: PPUSH
20192: LD_VAR 0 3
20196: PPUSH
20197: CALL_OW 12
20201: ARRAY
20202: ST_TO_ADDR
// if Crawls ( un ) then
20203: LD_VAR 0 2
20207: PPUSH
20208: CALL_OW 318
20212: IFFALSE 20223
// ComWalk ( un ) ;
20214: LD_VAR 0 2
20218: PPUSH
20219: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20223: LD_VAR 0 2
20227: PPUSH
20228: LD_INT 8
20230: PPUSH
20231: CALL_OW 336
// end ;
20235: PPOPN 3
20237: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20238: LD_EXP 38
20242: PUSH
20243: LD_EXP 82
20247: AND
20248: IFFALSE 20392
20250: GO 20252
20252: DISABLE
20253: LD_INT 0
20255: PPUSH
20256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20257: LD_ADDR_VAR 0 2
20261: PUSH
20262: LD_INT 22
20264: PUSH
20265: LD_OWVAR 2
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 21
20276: PUSH
20277: LD_INT 2
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 2
20286: PUSH
20287: LD_INT 34
20289: PUSH
20290: LD_INT 12
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 34
20299: PUSH
20300: LD_INT 51
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 34
20309: PUSH
20310: LD_INT 32
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: LIST
20327: PPUSH
20328: CALL_OW 69
20332: ST_TO_ADDR
// if not tmp then
20333: LD_VAR 0 2
20337: NOT
20338: IFFALSE 20342
// exit ;
20340: GO 20392
// for i in tmp do
20342: LD_ADDR_VAR 0 1
20346: PUSH
20347: LD_VAR 0 2
20351: PUSH
20352: FOR_IN
20353: IFFALSE 20390
// if GetCargo ( i , mat_artifact ) = 0 then
20355: LD_VAR 0 1
20359: PPUSH
20360: LD_INT 4
20362: PPUSH
20363: CALL_OW 289
20367: PUSH
20368: LD_INT 0
20370: EQUAL
20371: IFFALSE 20388
// SetCargo ( i , mat_siberit , 100 ) ;
20373: LD_VAR 0 1
20377: PPUSH
20378: LD_INT 3
20380: PPUSH
20381: LD_INT 100
20383: PPUSH
20384: CALL_OW 290
20388: GO 20352
20390: POP
20391: POP
// end ;
20392: PPOPN 2
20394: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20395: LD_EXP 38
20399: PUSH
20400: LD_EXP 83
20404: AND
20405: IFFALSE 20588
20407: GO 20409
20409: DISABLE
20410: LD_INT 0
20412: PPUSH
20413: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20414: LD_ADDR_VAR 0 2
20418: PUSH
20419: LD_INT 22
20421: PUSH
20422: LD_OWVAR 2
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PPUSH
20431: CALL_OW 69
20435: ST_TO_ADDR
// if not tmp then
20436: LD_VAR 0 2
20440: NOT
20441: IFFALSE 20445
// exit ;
20443: GO 20588
// for i := 1 to 2 do
20445: LD_ADDR_VAR 0 1
20449: PUSH
20450: DOUBLE
20451: LD_INT 1
20453: DEC
20454: ST_TO_ADDR
20455: LD_INT 2
20457: PUSH
20458: FOR_TO
20459: IFFALSE 20586
// begin uc_side := your_side ;
20461: LD_ADDR_OWVAR 20
20465: PUSH
20466: LD_OWVAR 2
20470: ST_TO_ADDR
// uc_nation := nation_american ;
20471: LD_ADDR_OWVAR 21
20475: PUSH
20476: LD_INT 1
20478: ST_TO_ADDR
// vc_chassis := us_morphling ;
20479: LD_ADDR_OWVAR 37
20483: PUSH
20484: LD_INT 5
20486: ST_TO_ADDR
// vc_engine := engine_siberite ;
20487: LD_ADDR_OWVAR 39
20491: PUSH
20492: LD_INT 3
20494: ST_TO_ADDR
// vc_control := control_computer ;
20495: LD_ADDR_OWVAR 38
20499: PUSH
20500: LD_INT 3
20502: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20503: LD_ADDR_OWVAR 40
20507: PUSH
20508: LD_INT 10
20510: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20511: LD_VAR 0 2
20515: PUSH
20516: LD_INT 1
20518: ARRAY
20519: PPUSH
20520: CALL_OW 310
20524: NOT
20525: IFFALSE 20572
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20527: CALL_OW 45
20531: PPUSH
20532: LD_VAR 0 2
20536: PUSH
20537: LD_INT 1
20539: ARRAY
20540: PPUSH
20541: CALL_OW 250
20545: PPUSH
20546: LD_VAR 0 2
20550: PUSH
20551: LD_INT 1
20553: ARRAY
20554: PPUSH
20555: CALL_OW 251
20559: PPUSH
20560: LD_INT 12
20562: PPUSH
20563: LD_INT 1
20565: PPUSH
20566: CALL_OW 50
20570: GO 20584
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20572: CALL_OW 45
20576: PPUSH
20577: LD_INT 1
20579: PPUSH
20580: CALL_OW 51
// end ;
20584: GO 20458
20586: POP
20587: POP
// end ;
20588: PPOPN 2
20590: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20591: LD_EXP 38
20595: PUSH
20596: LD_EXP 84
20600: AND
20601: IFFALSE 20823
20603: GO 20605
20605: DISABLE
20606: LD_INT 0
20608: PPUSH
20609: PPUSH
20610: PPUSH
20611: PPUSH
20612: PPUSH
20613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20614: LD_ADDR_VAR 0 6
20618: PUSH
20619: LD_INT 22
20621: PUSH
20622: LD_OWVAR 2
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 21
20633: PUSH
20634: LD_INT 1
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 3
20643: PUSH
20644: LD_INT 23
20646: PUSH
20647: LD_INT 0
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: LIST
20662: PPUSH
20663: CALL_OW 69
20667: ST_TO_ADDR
// if not tmp then
20668: LD_VAR 0 6
20672: NOT
20673: IFFALSE 20677
// exit ;
20675: GO 20823
// s1 := rand ( 1 , 4 ) ;
20677: LD_ADDR_VAR 0 2
20681: PUSH
20682: LD_INT 1
20684: PPUSH
20685: LD_INT 4
20687: PPUSH
20688: CALL_OW 12
20692: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20693: LD_ADDR_VAR 0 4
20697: PUSH
20698: LD_VAR 0 6
20702: PUSH
20703: LD_INT 1
20705: ARRAY
20706: PPUSH
20707: LD_VAR 0 2
20711: PPUSH
20712: CALL_OW 259
20716: ST_TO_ADDR
// if s1 = 1 then
20717: LD_VAR 0 2
20721: PUSH
20722: LD_INT 1
20724: EQUAL
20725: IFFALSE 20745
// s2 := rand ( 2 , 4 ) else
20727: LD_ADDR_VAR 0 3
20731: PUSH
20732: LD_INT 2
20734: PPUSH
20735: LD_INT 4
20737: PPUSH
20738: CALL_OW 12
20742: ST_TO_ADDR
20743: GO 20753
// s2 := 1 ;
20745: LD_ADDR_VAR 0 3
20749: PUSH
20750: LD_INT 1
20752: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20753: LD_ADDR_VAR 0 5
20757: PUSH
20758: LD_VAR 0 6
20762: PUSH
20763: LD_INT 1
20765: ARRAY
20766: PPUSH
20767: LD_VAR 0 3
20771: PPUSH
20772: CALL_OW 259
20776: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20777: LD_VAR 0 6
20781: PUSH
20782: LD_INT 1
20784: ARRAY
20785: PPUSH
20786: LD_VAR 0 2
20790: PPUSH
20791: LD_VAR 0 5
20795: PPUSH
20796: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20800: LD_VAR 0 6
20804: PUSH
20805: LD_INT 1
20807: ARRAY
20808: PPUSH
20809: LD_VAR 0 3
20813: PPUSH
20814: LD_VAR 0 4
20818: PPUSH
20819: CALL_OW 237
// end ;
20823: PPOPN 6
20825: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20826: LD_EXP 38
20830: PUSH
20831: LD_EXP 85
20835: AND
20836: IFFALSE 20915
20838: GO 20840
20840: DISABLE
20841: LD_INT 0
20843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20844: LD_ADDR_VAR 0 1
20848: PUSH
20849: LD_INT 22
20851: PUSH
20852: LD_OWVAR 2
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 30
20863: PUSH
20864: LD_INT 3
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PPUSH
20875: CALL_OW 69
20879: ST_TO_ADDR
// if not tmp then
20880: LD_VAR 0 1
20884: NOT
20885: IFFALSE 20889
// exit ;
20887: GO 20915
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20889: LD_VAR 0 1
20893: PUSH
20894: LD_INT 1
20896: PPUSH
20897: LD_VAR 0 1
20901: PPUSH
20902: CALL_OW 12
20906: ARRAY
20907: PPUSH
20908: LD_INT 1
20910: PPUSH
20911: CALL_OW 234
// end ;
20915: PPOPN 1
20917: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20918: LD_EXP 38
20922: PUSH
20923: LD_EXP 86
20927: AND
20928: IFFALSE 21040
20930: GO 20932
20932: DISABLE
20933: LD_INT 0
20935: PPUSH
20936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20937: LD_ADDR_VAR 0 2
20941: PUSH
20942: LD_INT 22
20944: PUSH
20945: LD_OWVAR 2
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 2
20956: PUSH
20957: LD_INT 30
20959: PUSH
20960: LD_INT 27
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 30
20969: PUSH
20970: LD_INT 26
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 30
20979: PUSH
20980: LD_INT 28
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PPUSH
20997: CALL_OW 69
21001: ST_TO_ADDR
// if not tmp then
21002: LD_VAR 0 2
21006: NOT
21007: IFFALSE 21011
// exit ;
21009: GO 21040
// for i in tmp do
21011: LD_ADDR_VAR 0 1
21015: PUSH
21016: LD_VAR 0 2
21020: PUSH
21021: FOR_IN
21022: IFFALSE 21038
// SetLives ( i , 1 ) ;
21024: LD_VAR 0 1
21028: PPUSH
21029: LD_INT 1
21031: PPUSH
21032: CALL_OW 234
21036: GO 21021
21038: POP
21039: POP
// end ;
21040: PPOPN 2
21042: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21043: LD_EXP 38
21047: PUSH
21048: LD_EXP 87
21052: AND
21053: IFFALSE 21327
21055: GO 21057
21057: DISABLE
21058: LD_INT 0
21060: PPUSH
21061: PPUSH
21062: PPUSH
// begin i := rand ( 1 , 7 ) ;
21063: LD_ADDR_VAR 0 1
21067: PUSH
21068: LD_INT 1
21070: PPUSH
21071: LD_INT 7
21073: PPUSH
21074: CALL_OW 12
21078: ST_TO_ADDR
// case i of 1 :
21079: LD_VAR 0 1
21083: PUSH
21084: LD_INT 1
21086: DOUBLE
21087: EQUAL
21088: IFTRUE 21092
21090: GO 21102
21092: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21093: LD_STRING earthquake(getX(game), 0, 32)
21095: PPUSH
21096: CALL_OW 559
21100: GO 21327
21102: LD_INT 2
21104: DOUBLE
21105: EQUAL
21106: IFTRUE 21110
21108: GO 21124
21110: POP
// begin ToLua ( displayStucuk(); ) ;
21111: LD_STRING displayStucuk();
21113: PPUSH
21114: CALL_OW 559
// ResetFog ;
21118: CALL_OW 335
// end ; 3 :
21122: GO 21327
21124: LD_INT 3
21126: DOUBLE
21127: EQUAL
21128: IFTRUE 21132
21130: GO 21236
21132: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21133: LD_ADDR_VAR 0 2
21137: PUSH
21138: LD_INT 22
21140: PUSH
21141: LD_OWVAR 2
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 25
21152: PUSH
21153: LD_INT 1
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PPUSH
21164: CALL_OW 69
21168: ST_TO_ADDR
// if not tmp then
21169: LD_VAR 0 2
21173: NOT
21174: IFFALSE 21178
// exit ;
21176: GO 21327
// un := tmp [ rand ( 1 , tmp ) ] ;
21178: LD_ADDR_VAR 0 3
21182: PUSH
21183: LD_VAR 0 2
21187: PUSH
21188: LD_INT 1
21190: PPUSH
21191: LD_VAR 0 2
21195: PPUSH
21196: CALL_OW 12
21200: ARRAY
21201: ST_TO_ADDR
// if Crawls ( un ) then
21202: LD_VAR 0 3
21206: PPUSH
21207: CALL_OW 318
21211: IFFALSE 21222
// ComWalk ( un ) ;
21213: LD_VAR 0 3
21217: PPUSH
21218: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21222: LD_VAR 0 3
21226: PPUSH
21227: LD_INT 8
21229: PPUSH
21230: CALL_OW 336
// end ; 4 :
21234: GO 21327
21236: LD_INT 4
21238: DOUBLE
21239: EQUAL
21240: IFTRUE 21244
21242: GO 21305
21244: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21245: LD_ADDR_VAR 0 2
21249: PUSH
21250: LD_INT 22
21252: PUSH
21253: LD_OWVAR 2
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 30
21264: PUSH
21265: LD_INT 29
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PPUSH
21276: CALL_OW 69
21280: ST_TO_ADDR
// if not tmp then
21281: LD_VAR 0 2
21285: NOT
21286: IFFALSE 21290
// exit ;
21288: GO 21327
// DestroyUnit ( tmp [ 1 ] ) ;
21290: LD_VAR 0 2
21294: PUSH
21295: LD_INT 1
21297: ARRAY
21298: PPUSH
21299: CALL_OW 65
// end ; 5 .. 7 :
21303: GO 21327
21305: LD_INT 5
21307: DOUBLE
21308: GREATEREQUAL
21309: IFFALSE 21317
21311: LD_INT 7
21313: DOUBLE
21314: LESSEQUAL
21315: IFTRUE 21319
21317: GO 21326
21319: POP
// StreamSibBomb ; end ;
21320: CALL 17577 0 0
21324: GO 21327
21326: POP
// end ;
21327: PPOPN 3
21329: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21330: LD_EXP 38
21334: PUSH
21335: LD_EXP 88
21339: AND
21340: IFFALSE 21496
21342: GO 21344
21344: DISABLE
21345: LD_INT 0
21347: PPUSH
21348: PPUSH
21349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21350: LD_ADDR_VAR 0 2
21354: PUSH
21355: LD_INT 81
21357: PUSH
21358: LD_OWVAR 2
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 2
21369: PUSH
21370: LD_INT 21
21372: PUSH
21373: LD_INT 1
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 21
21382: PUSH
21383: LD_INT 2
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: LIST
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PPUSH
21399: CALL_OW 69
21403: ST_TO_ADDR
// if not tmp then
21404: LD_VAR 0 2
21408: NOT
21409: IFFALSE 21413
// exit ;
21411: GO 21496
// p := 0 ;
21413: LD_ADDR_VAR 0 3
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21421: LD_INT 35
21423: PPUSH
21424: CALL_OW 67
// p := p + 1 ;
21428: LD_ADDR_VAR 0 3
21432: PUSH
21433: LD_VAR 0 3
21437: PUSH
21438: LD_INT 1
21440: PLUS
21441: ST_TO_ADDR
// for i in tmp do
21442: LD_ADDR_VAR 0 1
21446: PUSH
21447: LD_VAR 0 2
21451: PUSH
21452: FOR_IN
21453: IFFALSE 21484
// if GetLives ( i ) < 1000 then
21455: LD_VAR 0 1
21459: PPUSH
21460: CALL_OW 256
21464: PUSH
21465: LD_INT 1000
21467: LESS
21468: IFFALSE 21482
// SetLives ( i , 1000 ) ;
21470: LD_VAR 0 1
21474: PPUSH
21475: LD_INT 1000
21477: PPUSH
21478: CALL_OW 234
21482: GO 21452
21484: POP
21485: POP
// until p > 20 ;
21486: LD_VAR 0 3
21490: PUSH
21491: LD_INT 20
21493: GREATER
21494: IFFALSE 21421
// end ;
21496: PPOPN 3
21498: END
// every 0 0$1 trigger StreamModeActive and sTime do
21499: LD_EXP 38
21503: PUSH
21504: LD_EXP 89
21508: AND
21509: IFFALSE 21544
21511: GO 21513
21513: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21514: LD_INT 28
21516: PPUSH
21517: LD_OWVAR 2
21521: PPUSH
21522: LD_INT 2
21524: PPUSH
21525: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21529: LD_INT 30
21531: PPUSH
21532: LD_OWVAR 2
21536: PPUSH
21537: LD_INT 2
21539: PPUSH
21540: CALL_OW 322
// end ;
21544: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21545: LD_EXP 38
21549: PUSH
21550: LD_EXP 90
21554: AND
21555: IFFALSE 21676
21557: GO 21559
21559: DISABLE
21560: LD_INT 0
21562: PPUSH
21563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21564: LD_ADDR_VAR 0 2
21568: PUSH
21569: LD_INT 22
21571: PUSH
21572: LD_OWVAR 2
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 21
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 3
21593: PUSH
21594: LD_INT 23
21596: PUSH
21597: LD_INT 0
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: LIST
21612: PPUSH
21613: CALL_OW 69
21617: ST_TO_ADDR
// if not tmp then
21618: LD_VAR 0 2
21622: NOT
21623: IFFALSE 21627
// exit ;
21625: GO 21676
// for i in tmp do
21627: LD_ADDR_VAR 0 1
21631: PUSH
21632: LD_VAR 0 2
21636: PUSH
21637: FOR_IN
21638: IFFALSE 21674
// begin if Crawls ( i ) then
21640: LD_VAR 0 1
21644: PPUSH
21645: CALL_OW 318
21649: IFFALSE 21660
// ComWalk ( i ) ;
21651: LD_VAR 0 1
21655: PPUSH
21656: CALL_OW 138
// SetClass ( i , 2 ) ;
21660: LD_VAR 0 1
21664: PPUSH
21665: LD_INT 2
21667: PPUSH
21668: CALL_OW 336
// end ;
21672: GO 21637
21674: POP
21675: POP
// end ;
21676: PPOPN 2
21678: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21679: LD_EXP 38
21683: PUSH
21684: LD_EXP 91
21688: AND
21689: IFFALSE 21970
21691: GO 21693
21693: DISABLE
21694: LD_INT 0
21696: PPUSH
21697: PPUSH
21698: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21699: LD_OWVAR 2
21703: PPUSH
21704: LD_INT 9
21706: PPUSH
21707: LD_INT 1
21709: PPUSH
21710: LD_INT 1
21712: PPUSH
21713: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21717: LD_INT 9
21719: PPUSH
21720: LD_OWVAR 2
21724: PPUSH
21725: CALL_OW 343
// uc_side := 9 ;
21729: LD_ADDR_OWVAR 20
21733: PUSH
21734: LD_INT 9
21736: ST_TO_ADDR
// uc_nation := 2 ;
21737: LD_ADDR_OWVAR 21
21741: PUSH
21742: LD_INT 2
21744: ST_TO_ADDR
// hc_name := Dark Warrior ;
21745: LD_ADDR_OWVAR 26
21749: PUSH
21750: LD_STRING Dark Warrior
21752: ST_TO_ADDR
// hc_gallery :=  ;
21753: LD_ADDR_OWVAR 33
21757: PUSH
21758: LD_STRING 
21760: ST_TO_ADDR
// hc_noskilllimit := true ;
21761: LD_ADDR_OWVAR 76
21765: PUSH
21766: LD_INT 1
21768: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21769: LD_ADDR_OWVAR 31
21773: PUSH
21774: LD_INT 30
21776: PUSH
21777: LD_INT 30
21779: PUSH
21780: LD_INT 30
21782: PUSH
21783: LD_INT 30
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: ST_TO_ADDR
// un := CreateHuman ;
21792: LD_ADDR_VAR 0 3
21796: PUSH
21797: CALL_OW 44
21801: ST_TO_ADDR
// hc_noskilllimit := false ;
21802: LD_ADDR_OWVAR 76
21806: PUSH
21807: LD_INT 0
21809: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21810: LD_VAR 0 3
21814: PPUSH
21815: LD_INT 1
21817: PPUSH
21818: CALL_OW 51
// p := 0 ;
21822: LD_ADDR_VAR 0 2
21826: PUSH
21827: LD_INT 0
21829: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21830: LD_INT 35
21832: PPUSH
21833: CALL_OW 67
// p := p + 1 ;
21837: LD_ADDR_VAR 0 2
21841: PUSH
21842: LD_VAR 0 2
21846: PUSH
21847: LD_INT 1
21849: PLUS
21850: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21851: LD_VAR 0 3
21855: PPUSH
21856: CALL_OW 256
21860: PUSH
21861: LD_INT 1000
21863: LESS
21864: IFFALSE 21878
// SetLives ( un , 1000 ) ;
21866: LD_VAR 0 3
21870: PPUSH
21871: LD_INT 1000
21873: PPUSH
21874: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21878: LD_VAR 0 3
21882: PPUSH
21883: LD_INT 81
21885: PUSH
21886: LD_OWVAR 2
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 91
21897: PUSH
21898: LD_VAR 0 3
21902: PUSH
21903: LD_INT 30
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: LIST
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PPUSH
21915: CALL_OW 69
21919: PPUSH
21920: LD_VAR 0 3
21924: PPUSH
21925: CALL_OW 74
21929: PPUSH
21930: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
21934: LD_VAR 0 2
21938: PUSH
21939: LD_INT 60
21941: GREATER
21942: PUSH
21943: LD_VAR 0 3
21947: PPUSH
21948: CALL_OW 301
21952: OR
21953: IFFALSE 21830
// if un then
21955: LD_VAR 0 3
21959: IFFALSE 21970
// RemoveUnit ( un ) ;
21961: LD_VAR 0 3
21965: PPUSH
21966: CALL_OW 64
// end ;
21970: PPOPN 3
21972: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21973: LD_INT 0
21975: PPUSH
// case cmd of 301 :
21976: LD_VAR 0 1
21980: PUSH
21981: LD_INT 301
21983: DOUBLE
21984: EQUAL
21985: IFTRUE 21989
21987: GO 22021
21989: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21990: LD_VAR 0 6
21994: PPUSH
21995: LD_VAR 0 7
21999: PPUSH
22000: LD_VAR 0 8
22004: PPUSH
22005: LD_VAR 0 4
22009: PPUSH
22010: LD_VAR 0 5
22014: PPUSH
22015: CALL 23222 0 5
22019: GO 22142
22021: LD_INT 302
22023: DOUBLE
22024: EQUAL
22025: IFTRUE 22029
22027: GO 22066
22029: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22030: LD_VAR 0 6
22034: PPUSH
22035: LD_VAR 0 7
22039: PPUSH
22040: LD_VAR 0 8
22044: PPUSH
22045: LD_VAR 0 9
22049: PPUSH
22050: LD_VAR 0 4
22054: PPUSH
22055: LD_VAR 0 5
22059: PPUSH
22060: CALL 23313 0 6
22064: GO 22142
22066: LD_INT 303
22068: DOUBLE
22069: EQUAL
22070: IFTRUE 22074
22072: GO 22111
22074: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22075: LD_VAR 0 6
22079: PPUSH
22080: LD_VAR 0 7
22084: PPUSH
22085: LD_VAR 0 8
22089: PPUSH
22090: LD_VAR 0 9
22094: PPUSH
22095: LD_VAR 0 4
22099: PPUSH
22100: LD_VAR 0 5
22104: PPUSH
22105: CALL 22147 0 6
22109: GO 22142
22111: LD_INT 304
22113: DOUBLE
22114: EQUAL
22115: IFTRUE 22119
22117: GO 22141
22119: POP
// hHackTeleport ( unit , x , y ) ; end ;
22120: LD_VAR 0 2
22124: PPUSH
22125: LD_VAR 0 4
22129: PPUSH
22130: LD_VAR 0 5
22134: PPUSH
22135: CALL 23906 0 3
22139: GO 22142
22141: POP
// end ;
22142: LD_VAR 0 12
22146: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22147: LD_INT 0
22149: PPUSH
22150: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22151: LD_VAR 0 1
22155: PUSH
22156: LD_INT 1
22158: LESS
22159: PUSH
22160: LD_VAR 0 1
22164: PUSH
22165: LD_INT 3
22167: GREATER
22168: OR
22169: PUSH
22170: LD_VAR 0 5
22174: PPUSH
22175: LD_VAR 0 6
22179: PPUSH
22180: CALL_OW 428
22184: OR
22185: IFFALSE 22189
// exit ;
22187: GO 22909
// uc_side := your_side ;
22189: LD_ADDR_OWVAR 20
22193: PUSH
22194: LD_OWVAR 2
22198: ST_TO_ADDR
// uc_nation := nation ;
22199: LD_ADDR_OWVAR 21
22203: PUSH
22204: LD_VAR 0 1
22208: ST_TO_ADDR
// bc_level = 1 ;
22209: LD_ADDR_OWVAR 43
22213: PUSH
22214: LD_INT 1
22216: ST_TO_ADDR
// case btype of 1 :
22217: LD_VAR 0 2
22221: PUSH
22222: LD_INT 1
22224: DOUBLE
22225: EQUAL
22226: IFTRUE 22230
22228: GO 22241
22230: POP
// bc_type := b_depot ; 2 :
22231: LD_ADDR_OWVAR 42
22235: PUSH
22236: LD_INT 0
22238: ST_TO_ADDR
22239: GO 22853
22241: LD_INT 2
22243: DOUBLE
22244: EQUAL
22245: IFTRUE 22249
22247: GO 22260
22249: POP
// bc_type := b_warehouse ; 3 :
22250: LD_ADDR_OWVAR 42
22254: PUSH
22255: LD_INT 1
22257: ST_TO_ADDR
22258: GO 22853
22260: LD_INT 3
22262: DOUBLE
22263: EQUAL
22264: IFTRUE 22268
22266: GO 22279
22268: POP
// bc_type := b_lab ; 4 .. 9 :
22269: LD_ADDR_OWVAR 42
22273: PUSH
22274: LD_INT 6
22276: ST_TO_ADDR
22277: GO 22853
22279: LD_INT 4
22281: DOUBLE
22282: GREATEREQUAL
22283: IFFALSE 22291
22285: LD_INT 9
22287: DOUBLE
22288: LESSEQUAL
22289: IFTRUE 22293
22291: GO 22345
22293: POP
// begin bc_type := b_lab_half ;
22294: LD_ADDR_OWVAR 42
22298: PUSH
22299: LD_INT 7
22301: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22302: LD_ADDR_OWVAR 44
22306: PUSH
22307: LD_INT 10
22309: PUSH
22310: LD_INT 11
22312: PUSH
22313: LD_INT 12
22315: PUSH
22316: LD_INT 15
22318: PUSH
22319: LD_INT 14
22321: PUSH
22322: LD_INT 13
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: PUSH
22333: LD_VAR 0 2
22337: PUSH
22338: LD_INT 3
22340: MINUS
22341: ARRAY
22342: ST_TO_ADDR
// end ; 10 .. 13 :
22343: GO 22853
22345: LD_INT 10
22347: DOUBLE
22348: GREATEREQUAL
22349: IFFALSE 22357
22351: LD_INT 13
22353: DOUBLE
22354: LESSEQUAL
22355: IFTRUE 22359
22357: GO 22436
22359: POP
// begin bc_type := b_lab_full ;
22360: LD_ADDR_OWVAR 42
22364: PUSH
22365: LD_INT 8
22367: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22368: LD_ADDR_OWVAR 44
22372: PUSH
22373: LD_INT 10
22375: PUSH
22376: LD_INT 12
22378: PUSH
22379: LD_INT 14
22381: PUSH
22382: LD_INT 13
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: PUSH
22391: LD_VAR 0 2
22395: PUSH
22396: LD_INT 9
22398: MINUS
22399: ARRAY
22400: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22401: LD_ADDR_OWVAR 45
22405: PUSH
22406: LD_INT 11
22408: PUSH
22409: LD_INT 15
22411: PUSH
22412: LD_INT 12
22414: PUSH
22415: LD_INT 15
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: PUSH
22424: LD_VAR 0 2
22428: PUSH
22429: LD_INT 9
22431: MINUS
22432: ARRAY
22433: ST_TO_ADDR
// end ; 14 :
22434: GO 22853
22436: LD_INT 14
22438: DOUBLE
22439: EQUAL
22440: IFTRUE 22444
22442: GO 22455
22444: POP
// bc_type := b_workshop ; 15 :
22445: LD_ADDR_OWVAR 42
22449: PUSH
22450: LD_INT 2
22452: ST_TO_ADDR
22453: GO 22853
22455: LD_INT 15
22457: DOUBLE
22458: EQUAL
22459: IFTRUE 22463
22461: GO 22474
22463: POP
// bc_type := b_factory ; 16 :
22464: LD_ADDR_OWVAR 42
22468: PUSH
22469: LD_INT 3
22471: ST_TO_ADDR
22472: GO 22853
22474: LD_INT 16
22476: DOUBLE
22477: EQUAL
22478: IFTRUE 22482
22480: GO 22493
22482: POP
// bc_type := b_ext_gun ; 17 :
22483: LD_ADDR_OWVAR 42
22487: PUSH
22488: LD_INT 17
22490: ST_TO_ADDR
22491: GO 22853
22493: LD_INT 17
22495: DOUBLE
22496: EQUAL
22497: IFTRUE 22501
22499: GO 22529
22501: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22502: LD_ADDR_OWVAR 42
22506: PUSH
22507: LD_INT 19
22509: PUSH
22510: LD_INT 23
22512: PUSH
22513: LD_INT 19
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: LIST
22520: PUSH
22521: LD_VAR 0 1
22525: ARRAY
22526: ST_TO_ADDR
22527: GO 22853
22529: LD_INT 18
22531: DOUBLE
22532: EQUAL
22533: IFTRUE 22537
22535: GO 22548
22537: POP
// bc_type := b_ext_radar ; 19 :
22538: LD_ADDR_OWVAR 42
22542: PUSH
22543: LD_INT 20
22545: ST_TO_ADDR
22546: GO 22853
22548: LD_INT 19
22550: DOUBLE
22551: EQUAL
22552: IFTRUE 22556
22554: GO 22567
22556: POP
// bc_type := b_ext_radio ; 20 :
22557: LD_ADDR_OWVAR 42
22561: PUSH
22562: LD_INT 22
22564: ST_TO_ADDR
22565: GO 22853
22567: LD_INT 20
22569: DOUBLE
22570: EQUAL
22571: IFTRUE 22575
22573: GO 22586
22575: POP
// bc_type := b_ext_siberium ; 21 :
22576: LD_ADDR_OWVAR 42
22580: PUSH
22581: LD_INT 21
22583: ST_TO_ADDR
22584: GO 22853
22586: LD_INT 21
22588: DOUBLE
22589: EQUAL
22590: IFTRUE 22594
22592: GO 22605
22594: POP
// bc_type := b_ext_computer ; 22 :
22595: LD_ADDR_OWVAR 42
22599: PUSH
22600: LD_INT 24
22602: ST_TO_ADDR
22603: GO 22853
22605: LD_INT 22
22607: DOUBLE
22608: EQUAL
22609: IFTRUE 22613
22611: GO 22624
22613: POP
// bc_type := b_ext_track ; 23 :
22614: LD_ADDR_OWVAR 42
22618: PUSH
22619: LD_INT 16
22621: ST_TO_ADDR
22622: GO 22853
22624: LD_INT 23
22626: DOUBLE
22627: EQUAL
22628: IFTRUE 22632
22630: GO 22643
22632: POP
// bc_type := b_ext_laser ; 24 :
22633: LD_ADDR_OWVAR 42
22637: PUSH
22638: LD_INT 25
22640: ST_TO_ADDR
22641: GO 22853
22643: LD_INT 24
22645: DOUBLE
22646: EQUAL
22647: IFTRUE 22651
22649: GO 22662
22651: POP
// bc_type := b_control_tower ; 25 :
22652: LD_ADDR_OWVAR 42
22656: PUSH
22657: LD_INT 36
22659: ST_TO_ADDR
22660: GO 22853
22662: LD_INT 25
22664: DOUBLE
22665: EQUAL
22666: IFTRUE 22670
22668: GO 22681
22670: POP
// bc_type := b_breastwork ; 26 :
22671: LD_ADDR_OWVAR 42
22675: PUSH
22676: LD_INT 31
22678: ST_TO_ADDR
22679: GO 22853
22681: LD_INT 26
22683: DOUBLE
22684: EQUAL
22685: IFTRUE 22689
22687: GO 22700
22689: POP
// bc_type := b_bunker ; 27 :
22690: LD_ADDR_OWVAR 42
22694: PUSH
22695: LD_INT 32
22697: ST_TO_ADDR
22698: GO 22853
22700: LD_INT 27
22702: DOUBLE
22703: EQUAL
22704: IFTRUE 22708
22706: GO 22719
22708: POP
// bc_type := b_turret ; 28 :
22709: LD_ADDR_OWVAR 42
22713: PUSH
22714: LD_INT 33
22716: ST_TO_ADDR
22717: GO 22853
22719: LD_INT 28
22721: DOUBLE
22722: EQUAL
22723: IFTRUE 22727
22725: GO 22738
22727: POP
// bc_type := b_armoury ; 29 :
22728: LD_ADDR_OWVAR 42
22732: PUSH
22733: LD_INT 4
22735: ST_TO_ADDR
22736: GO 22853
22738: LD_INT 29
22740: DOUBLE
22741: EQUAL
22742: IFTRUE 22746
22744: GO 22757
22746: POP
// bc_type := b_barracks ; 30 :
22747: LD_ADDR_OWVAR 42
22751: PUSH
22752: LD_INT 5
22754: ST_TO_ADDR
22755: GO 22853
22757: LD_INT 30
22759: DOUBLE
22760: EQUAL
22761: IFTRUE 22765
22763: GO 22776
22765: POP
// bc_type := b_solar_power ; 31 :
22766: LD_ADDR_OWVAR 42
22770: PUSH
22771: LD_INT 27
22773: ST_TO_ADDR
22774: GO 22853
22776: LD_INT 31
22778: DOUBLE
22779: EQUAL
22780: IFTRUE 22784
22782: GO 22795
22784: POP
// bc_type := b_oil_power ; 32 :
22785: LD_ADDR_OWVAR 42
22789: PUSH
22790: LD_INT 26
22792: ST_TO_ADDR
22793: GO 22853
22795: LD_INT 32
22797: DOUBLE
22798: EQUAL
22799: IFTRUE 22803
22801: GO 22814
22803: POP
// bc_type := b_siberite_power ; 33 :
22804: LD_ADDR_OWVAR 42
22808: PUSH
22809: LD_INT 28
22811: ST_TO_ADDR
22812: GO 22853
22814: LD_INT 33
22816: DOUBLE
22817: EQUAL
22818: IFTRUE 22822
22820: GO 22833
22822: POP
// bc_type := b_oil_mine ; 34 :
22823: LD_ADDR_OWVAR 42
22827: PUSH
22828: LD_INT 29
22830: ST_TO_ADDR
22831: GO 22853
22833: LD_INT 34
22835: DOUBLE
22836: EQUAL
22837: IFTRUE 22841
22839: GO 22852
22841: POP
// bc_type := b_siberite_mine ; end ;
22842: LD_ADDR_OWVAR 42
22846: PUSH
22847: LD_INT 30
22849: ST_TO_ADDR
22850: GO 22853
22852: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22853: LD_ADDR_VAR 0 8
22857: PUSH
22858: LD_VAR 0 5
22862: PPUSH
22863: LD_VAR 0 6
22867: PPUSH
22868: LD_VAR 0 3
22872: PPUSH
22873: CALL_OW 47
22877: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22878: LD_OWVAR 42
22882: PUSH
22883: LD_INT 32
22885: PUSH
22886: LD_INT 33
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: IN
22893: IFFALSE 22909
// PlaceWeaponTurret ( b , weapon ) ;
22895: LD_VAR 0 8
22899: PPUSH
22900: LD_VAR 0 4
22904: PPUSH
22905: CALL_OW 431
// end ;
22909: LD_VAR 0 7
22913: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22914: LD_INT 0
22916: PPUSH
22917: PPUSH
22918: PPUSH
22919: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22920: LD_ADDR_VAR 0 4
22924: PUSH
22925: LD_INT 22
22927: PUSH
22928: LD_OWVAR 2
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 2
22939: PUSH
22940: LD_INT 30
22942: PUSH
22943: LD_INT 0
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 30
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: LIST
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PPUSH
22969: CALL_OW 69
22973: ST_TO_ADDR
// if not tmp then
22974: LD_VAR 0 4
22978: NOT
22979: IFFALSE 22983
// exit ;
22981: GO 23042
// for i in tmp do
22983: LD_ADDR_VAR 0 2
22987: PUSH
22988: LD_VAR 0 4
22992: PUSH
22993: FOR_IN
22994: IFFALSE 23040
// for j = 1 to 3 do
22996: LD_ADDR_VAR 0 3
23000: PUSH
23001: DOUBLE
23002: LD_INT 1
23004: DEC
23005: ST_TO_ADDR
23006: LD_INT 3
23008: PUSH
23009: FOR_TO
23010: IFFALSE 23036
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23012: LD_VAR 0 2
23016: PPUSH
23017: CALL_OW 274
23021: PPUSH
23022: LD_VAR 0 3
23026: PPUSH
23027: LD_INT 99999
23029: PPUSH
23030: CALL_OW 277
23034: GO 23009
23036: POP
23037: POP
23038: GO 22993
23040: POP
23041: POP
// end ;
23042: LD_VAR 0 1
23046: RET
// export function hHackSetLevel10 ; var i , j ; begin
23047: LD_INT 0
23049: PPUSH
23050: PPUSH
23051: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23052: LD_ADDR_VAR 0 2
23056: PUSH
23057: LD_INT 21
23059: PUSH
23060: LD_INT 1
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PPUSH
23067: CALL_OW 69
23071: PUSH
23072: FOR_IN
23073: IFFALSE 23125
// if IsSelected ( i ) then
23075: LD_VAR 0 2
23079: PPUSH
23080: CALL_OW 306
23084: IFFALSE 23123
// begin for j := 1 to 4 do
23086: LD_ADDR_VAR 0 3
23090: PUSH
23091: DOUBLE
23092: LD_INT 1
23094: DEC
23095: ST_TO_ADDR
23096: LD_INT 4
23098: PUSH
23099: FOR_TO
23100: IFFALSE 23121
// SetSkill ( i , j , 10 ) ;
23102: LD_VAR 0 2
23106: PPUSH
23107: LD_VAR 0 3
23111: PPUSH
23112: LD_INT 10
23114: PPUSH
23115: CALL_OW 237
23119: GO 23099
23121: POP
23122: POP
// end ;
23123: GO 23072
23125: POP
23126: POP
// end ;
23127: LD_VAR 0 1
23131: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23132: LD_INT 0
23134: PPUSH
23135: PPUSH
23136: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23137: LD_ADDR_VAR 0 2
23141: PUSH
23142: LD_INT 22
23144: PUSH
23145: LD_OWVAR 2
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 21
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PPUSH
23168: CALL_OW 69
23172: PUSH
23173: FOR_IN
23174: IFFALSE 23215
// begin for j := 1 to 4 do
23176: LD_ADDR_VAR 0 3
23180: PUSH
23181: DOUBLE
23182: LD_INT 1
23184: DEC
23185: ST_TO_ADDR
23186: LD_INT 4
23188: PUSH
23189: FOR_TO
23190: IFFALSE 23211
// SetSkill ( i , j , 10 ) ;
23192: LD_VAR 0 2
23196: PPUSH
23197: LD_VAR 0 3
23201: PPUSH
23202: LD_INT 10
23204: PPUSH
23205: CALL_OW 237
23209: GO 23189
23211: POP
23212: POP
// end ;
23213: GO 23173
23215: POP
23216: POP
// end ;
23217: LD_VAR 0 1
23221: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23222: LD_INT 0
23224: PPUSH
// uc_side := your_side ;
23225: LD_ADDR_OWVAR 20
23229: PUSH
23230: LD_OWVAR 2
23234: ST_TO_ADDR
// uc_nation := nation ;
23235: LD_ADDR_OWVAR 21
23239: PUSH
23240: LD_VAR 0 1
23244: ST_TO_ADDR
// InitHc ;
23245: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23249: LD_INT 0
23251: PPUSH
23252: LD_VAR 0 2
23256: PPUSH
23257: LD_VAR 0 3
23261: PPUSH
23262: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23266: LD_VAR 0 4
23270: PPUSH
23271: LD_VAR 0 5
23275: PPUSH
23276: CALL_OW 428
23280: PUSH
23281: LD_INT 0
23283: EQUAL
23284: IFFALSE 23308
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23286: CALL_OW 44
23290: PPUSH
23291: LD_VAR 0 4
23295: PPUSH
23296: LD_VAR 0 5
23300: PPUSH
23301: LD_INT 1
23303: PPUSH
23304: CALL_OW 48
// end ;
23308: LD_VAR 0 6
23312: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23313: LD_INT 0
23315: PPUSH
23316: PPUSH
// uc_side := your_side ;
23317: LD_ADDR_OWVAR 20
23321: PUSH
23322: LD_OWVAR 2
23326: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23327: LD_VAR 0 1
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: LD_INT 2
23337: PUSH
23338: LD_INT 3
23340: PUSH
23341: LD_INT 4
23343: PUSH
23344: LD_INT 5
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: IN
23354: IFFALSE 23366
// uc_nation := nation_american else
23356: LD_ADDR_OWVAR 21
23360: PUSH
23361: LD_INT 1
23363: ST_TO_ADDR
23364: GO 23409
// if chassis in [ 11 , 12 , 13 , 14 ] then
23366: LD_VAR 0 1
23370: PUSH
23371: LD_INT 11
23373: PUSH
23374: LD_INT 12
23376: PUSH
23377: LD_INT 13
23379: PUSH
23380: LD_INT 14
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: IN
23389: IFFALSE 23401
// uc_nation := nation_arabian else
23391: LD_ADDR_OWVAR 21
23395: PUSH
23396: LD_INT 2
23398: ST_TO_ADDR
23399: GO 23409
// uc_nation := nation_russian ;
23401: LD_ADDR_OWVAR 21
23405: PUSH
23406: LD_INT 3
23408: ST_TO_ADDR
// vc_chassis := chassis ;
23409: LD_ADDR_OWVAR 37
23413: PUSH
23414: LD_VAR 0 1
23418: ST_TO_ADDR
// vc_engine := engine ;
23419: LD_ADDR_OWVAR 39
23423: PUSH
23424: LD_VAR 0 2
23428: ST_TO_ADDR
// vc_control := control ;
23429: LD_ADDR_OWVAR 38
23433: PUSH
23434: LD_VAR 0 3
23438: ST_TO_ADDR
// vc_weapon := weapon ;
23439: LD_ADDR_OWVAR 40
23443: PUSH
23444: LD_VAR 0 4
23448: ST_TO_ADDR
// un := CreateVehicle ;
23449: LD_ADDR_VAR 0 8
23453: PUSH
23454: CALL_OW 45
23458: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23459: LD_VAR 0 8
23463: PPUSH
23464: LD_INT 0
23466: PPUSH
23467: LD_INT 5
23469: PPUSH
23470: CALL_OW 12
23474: PPUSH
23475: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23479: LD_VAR 0 8
23483: PPUSH
23484: LD_VAR 0 5
23488: PPUSH
23489: LD_VAR 0 6
23493: PPUSH
23494: LD_INT 1
23496: PPUSH
23497: CALL_OW 48
// end ;
23501: LD_VAR 0 7
23505: RET
// export hInvincible ; every 1 do
23506: GO 23508
23508: DISABLE
// hInvincible := [ ] ;
23509: LD_ADDR_EXP 92
23513: PUSH
23514: EMPTY
23515: ST_TO_ADDR
23516: END
// every 10 do var i ;
23517: GO 23519
23519: DISABLE
23520: LD_INT 0
23522: PPUSH
// begin enable ;
23523: ENABLE
// if not hInvincible then
23524: LD_EXP 92
23528: NOT
23529: IFFALSE 23533
// exit ;
23531: GO 23577
// for i in hInvincible do
23533: LD_ADDR_VAR 0 1
23537: PUSH
23538: LD_EXP 92
23542: PUSH
23543: FOR_IN
23544: IFFALSE 23575
// if GetLives ( i ) < 1000 then
23546: LD_VAR 0 1
23550: PPUSH
23551: CALL_OW 256
23555: PUSH
23556: LD_INT 1000
23558: LESS
23559: IFFALSE 23573
// SetLives ( i , 1000 ) ;
23561: LD_VAR 0 1
23565: PPUSH
23566: LD_INT 1000
23568: PPUSH
23569: CALL_OW 234
23573: GO 23543
23575: POP
23576: POP
// end ;
23577: PPOPN 1
23579: END
// export function hHackInvincible ; var i ; begin
23580: LD_INT 0
23582: PPUSH
23583: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23584: LD_ADDR_VAR 0 2
23588: PUSH
23589: LD_INT 2
23591: PUSH
23592: LD_INT 21
23594: PUSH
23595: LD_INT 1
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 21
23604: PUSH
23605: LD_INT 2
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: LIST
23616: PPUSH
23617: CALL_OW 69
23621: PUSH
23622: FOR_IN
23623: IFFALSE 23684
// if IsSelected ( i ) then
23625: LD_VAR 0 2
23629: PPUSH
23630: CALL_OW 306
23634: IFFALSE 23682
// begin if i in hInvincible then
23636: LD_VAR 0 2
23640: PUSH
23641: LD_EXP 92
23645: IN
23646: IFFALSE 23666
// hInvincible := hInvincible diff i else
23648: LD_ADDR_EXP 92
23652: PUSH
23653: LD_EXP 92
23657: PUSH
23658: LD_VAR 0 2
23662: DIFF
23663: ST_TO_ADDR
23664: GO 23682
// hInvincible := hInvincible union i ;
23666: LD_ADDR_EXP 92
23670: PUSH
23671: LD_EXP 92
23675: PUSH
23676: LD_VAR 0 2
23680: UNION
23681: ST_TO_ADDR
// end ;
23682: GO 23622
23684: POP
23685: POP
// end ;
23686: LD_VAR 0 1
23690: RET
// export function hHackInvisible ; var i , j ; begin
23691: LD_INT 0
23693: PPUSH
23694: PPUSH
23695: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23696: LD_ADDR_VAR 0 2
23700: PUSH
23701: LD_INT 21
23703: PUSH
23704: LD_INT 1
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PPUSH
23711: CALL_OW 69
23715: PUSH
23716: FOR_IN
23717: IFFALSE 23741
// if IsSelected ( i ) then
23719: LD_VAR 0 2
23723: PPUSH
23724: CALL_OW 306
23728: IFFALSE 23739
// ComForceInvisible ( i ) ;
23730: LD_VAR 0 2
23734: PPUSH
23735: CALL_OW 496
23739: GO 23716
23741: POP
23742: POP
// end ;
23743: LD_VAR 0 1
23747: RET
// export function hHackChangeYourSide ; begin
23748: LD_INT 0
23750: PPUSH
// if your_side = 8 then
23751: LD_OWVAR 2
23755: PUSH
23756: LD_INT 8
23758: EQUAL
23759: IFFALSE 23771
// your_side := 0 else
23761: LD_ADDR_OWVAR 2
23765: PUSH
23766: LD_INT 0
23768: ST_TO_ADDR
23769: GO 23785
// your_side := your_side + 1 ;
23771: LD_ADDR_OWVAR 2
23775: PUSH
23776: LD_OWVAR 2
23780: PUSH
23781: LD_INT 1
23783: PLUS
23784: ST_TO_ADDR
// end ;
23785: LD_VAR 0 1
23789: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23790: LD_INT 0
23792: PPUSH
23793: PPUSH
23794: PPUSH
// for i in all_units do
23795: LD_ADDR_VAR 0 2
23799: PUSH
23800: LD_OWVAR 3
23804: PUSH
23805: FOR_IN
23806: IFFALSE 23884
// if IsSelected ( i ) then
23808: LD_VAR 0 2
23812: PPUSH
23813: CALL_OW 306
23817: IFFALSE 23882
// begin j := GetSide ( i ) ;
23819: LD_ADDR_VAR 0 3
23823: PUSH
23824: LD_VAR 0 2
23828: PPUSH
23829: CALL_OW 255
23833: ST_TO_ADDR
// if j = 8 then
23834: LD_VAR 0 3
23838: PUSH
23839: LD_INT 8
23841: EQUAL
23842: IFFALSE 23854
// j := 0 else
23844: LD_ADDR_VAR 0 3
23848: PUSH
23849: LD_INT 0
23851: ST_TO_ADDR
23852: GO 23868
// j := j + 1 ;
23854: LD_ADDR_VAR 0 3
23858: PUSH
23859: LD_VAR 0 3
23863: PUSH
23864: LD_INT 1
23866: PLUS
23867: ST_TO_ADDR
// SetSide ( i , j ) ;
23868: LD_VAR 0 2
23872: PPUSH
23873: LD_VAR 0 3
23877: PPUSH
23878: CALL_OW 235
// end ;
23882: GO 23805
23884: POP
23885: POP
// end ;
23886: LD_VAR 0 1
23890: RET
// export function hHackFog ; begin
23891: LD_INT 0
23893: PPUSH
// FogOff ( true ) ;
23894: LD_INT 1
23896: PPUSH
23897: CALL_OW 344
// end ;
23901: LD_VAR 0 1
23905: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23906: LD_INT 0
23908: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23909: LD_VAR 0 1
23913: PPUSH
23914: LD_VAR 0 2
23918: PPUSH
23919: LD_VAR 0 3
23923: PPUSH
23924: LD_INT 1
23926: PPUSH
23927: LD_INT 1
23929: PPUSH
23930: CALL_OW 483
// CenterOnXY ( x , y ) ;
23934: LD_VAR 0 2
23938: PPUSH
23939: LD_VAR 0 3
23943: PPUSH
23944: CALL_OW 84
// end ; end_of_file
23948: LD_VAR 0 4
23952: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23953: LD_INT 0
23955: PPUSH
23956: PPUSH
23957: PPUSH
23958: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23959: LD_VAR 0 1
23963: PPUSH
23964: CALL_OW 264
23968: PUSH
23969: LD_EXP 23
23973: EQUAL
23974: IFFALSE 24046
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23976: LD_INT 68
23978: PPUSH
23979: LD_VAR 0 1
23983: PPUSH
23984: CALL_OW 255
23988: PPUSH
23989: CALL_OW 321
23993: PUSH
23994: LD_INT 2
23996: EQUAL
23997: IFFALSE 24009
// eff := 70 else
23999: LD_ADDR_VAR 0 4
24003: PUSH
24004: LD_INT 70
24006: ST_TO_ADDR
24007: GO 24017
// eff := 30 ;
24009: LD_ADDR_VAR 0 4
24013: PUSH
24014: LD_INT 30
24016: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24017: LD_VAR 0 1
24021: PPUSH
24022: CALL_OW 250
24026: PPUSH
24027: LD_VAR 0 1
24031: PPUSH
24032: CALL_OW 251
24036: PPUSH
24037: LD_VAR 0 4
24041: PPUSH
24042: CALL_OW 495
// end ; end ;
24046: LD_VAR 0 2
24050: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24051: LD_INT 0
24053: PPUSH
// end ;
24054: LD_VAR 0 4
24058: RET
// export function SOS_Command ( cmd ) ; begin
24059: LD_INT 0
24061: PPUSH
// end ;
24062: LD_VAR 0 2
24066: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24067: LD_INT 0
24069: PPUSH
// if cmd = 121 then
24070: LD_VAR 0 1
24074: PUSH
24075: LD_INT 121
24077: EQUAL
24078: IFFALSE 24080
// end ;
24080: LD_VAR 0 6
24084: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24085: LD_INT 0
24087: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24088: LD_VAR 0 1
24092: PUSH
24093: LD_INT 250
24095: EQUAL
24096: PUSH
24097: LD_VAR 0 2
24101: PPUSH
24102: CALL_OW 264
24106: PUSH
24107: LD_EXP 26
24111: EQUAL
24112: AND
24113: IFFALSE 24134
// MinerPlaceMine ( unit , x , y ) ;
24115: LD_VAR 0 2
24119: PPUSH
24120: LD_VAR 0 4
24124: PPUSH
24125: LD_VAR 0 5
24129: PPUSH
24130: CALL 26483 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24134: LD_VAR 0 1
24138: PUSH
24139: LD_INT 251
24141: EQUAL
24142: PUSH
24143: LD_VAR 0 2
24147: PPUSH
24148: CALL_OW 264
24152: PUSH
24153: LD_EXP 26
24157: EQUAL
24158: AND
24159: IFFALSE 24180
// MinerDetonateMine ( unit , x , y ) ;
24161: LD_VAR 0 2
24165: PPUSH
24166: LD_VAR 0 4
24170: PPUSH
24171: LD_VAR 0 5
24175: PPUSH
24176: CALL 26760 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24180: LD_VAR 0 1
24184: PUSH
24185: LD_INT 252
24187: EQUAL
24188: PUSH
24189: LD_VAR 0 2
24193: PPUSH
24194: CALL_OW 264
24198: PUSH
24199: LD_EXP 26
24203: EQUAL
24204: AND
24205: IFFALSE 24226
// MinerCreateMinefield ( unit , x , y ) ;
24207: LD_VAR 0 2
24211: PPUSH
24212: LD_VAR 0 4
24216: PPUSH
24217: LD_VAR 0 5
24221: PPUSH
24222: CALL 27177 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24226: LD_VAR 0 1
24230: PUSH
24231: LD_INT 253
24233: EQUAL
24234: PUSH
24235: LD_VAR 0 2
24239: PPUSH
24240: CALL_OW 257
24244: PUSH
24245: LD_INT 5
24247: EQUAL
24248: AND
24249: IFFALSE 24270
// ComBinocular ( unit , x , y ) ;
24251: LD_VAR 0 2
24255: PPUSH
24256: LD_VAR 0 4
24260: PPUSH
24261: LD_VAR 0 5
24265: PPUSH
24266: CALL 27548 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24270: LD_VAR 0 1
24274: PUSH
24275: LD_INT 254
24277: EQUAL
24278: PUSH
24279: LD_VAR 0 2
24283: PPUSH
24284: CALL_OW 264
24288: PUSH
24289: LD_EXP 21
24293: EQUAL
24294: AND
24295: PUSH
24296: LD_VAR 0 3
24300: PPUSH
24301: CALL_OW 263
24305: PUSH
24306: LD_INT 3
24308: EQUAL
24309: AND
24310: IFFALSE 24326
// HackDestroyVehicle ( unit , selectedUnit ) ;
24312: LD_VAR 0 2
24316: PPUSH
24317: LD_VAR 0 3
24321: PPUSH
24322: CALL 25843 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24326: LD_VAR 0 1
24330: PUSH
24331: LD_INT 255
24333: EQUAL
24334: PUSH
24335: LD_VAR 0 2
24339: PPUSH
24340: CALL_OW 264
24344: PUSH
24345: LD_INT 14
24347: PUSH
24348: LD_INT 53
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: IN
24355: AND
24356: PUSH
24357: LD_VAR 0 4
24361: PPUSH
24362: LD_VAR 0 5
24366: PPUSH
24367: CALL_OW 488
24371: AND
24372: IFFALSE 24396
// CutTreeXYR ( unit , x , y , 12 ) ;
24374: LD_VAR 0 2
24378: PPUSH
24379: LD_VAR 0 4
24383: PPUSH
24384: LD_VAR 0 5
24388: PPUSH
24389: LD_INT 12
24391: PPUSH
24392: CALL 24409 0 4
// end ;
24396: LD_VAR 0 6
24400: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
24401: LD_INT 0
24403: PPUSH
// end ;
24404: LD_VAR 0 4
24408: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24409: LD_INT 0
24411: PPUSH
24412: PPUSH
24413: PPUSH
24414: PPUSH
24415: PPUSH
24416: PPUSH
24417: PPUSH
24418: PPUSH
24419: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24420: LD_VAR 0 1
24424: NOT
24425: PUSH
24426: LD_VAR 0 2
24430: PPUSH
24431: LD_VAR 0 3
24435: PPUSH
24436: CALL_OW 488
24440: NOT
24441: OR
24442: PUSH
24443: LD_VAR 0 4
24447: NOT
24448: OR
24449: IFFALSE 24453
// exit ;
24451: GO 24793
// list := [ ] ;
24453: LD_ADDR_VAR 0 13
24457: PUSH
24458: EMPTY
24459: ST_TO_ADDR
// if x - r < 0 then
24460: LD_VAR 0 2
24464: PUSH
24465: LD_VAR 0 4
24469: MINUS
24470: PUSH
24471: LD_INT 0
24473: LESS
24474: IFFALSE 24486
// min_x := 0 else
24476: LD_ADDR_VAR 0 7
24480: PUSH
24481: LD_INT 0
24483: ST_TO_ADDR
24484: GO 24502
// min_x := x - r ;
24486: LD_ADDR_VAR 0 7
24490: PUSH
24491: LD_VAR 0 2
24495: PUSH
24496: LD_VAR 0 4
24500: MINUS
24501: ST_TO_ADDR
// if y - r < 0 then
24502: LD_VAR 0 3
24506: PUSH
24507: LD_VAR 0 4
24511: MINUS
24512: PUSH
24513: LD_INT 0
24515: LESS
24516: IFFALSE 24528
// min_y := 0 else
24518: LD_ADDR_VAR 0 8
24522: PUSH
24523: LD_INT 0
24525: ST_TO_ADDR
24526: GO 24544
// min_y := y - r ;
24528: LD_ADDR_VAR 0 8
24532: PUSH
24533: LD_VAR 0 3
24537: PUSH
24538: LD_VAR 0 4
24542: MINUS
24543: ST_TO_ADDR
// max_x := x + r ;
24544: LD_ADDR_VAR 0 9
24548: PUSH
24549: LD_VAR 0 2
24553: PUSH
24554: LD_VAR 0 4
24558: PLUS
24559: ST_TO_ADDR
// max_y := y + r ;
24560: LD_ADDR_VAR 0 10
24564: PUSH
24565: LD_VAR 0 3
24569: PUSH
24570: LD_VAR 0 4
24574: PLUS
24575: ST_TO_ADDR
// for _x = min_x to max_x do
24576: LD_ADDR_VAR 0 11
24580: PUSH
24581: DOUBLE
24582: LD_VAR 0 7
24586: DEC
24587: ST_TO_ADDR
24588: LD_VAR 0 9
24592: PUSH
24593: FOR_TO
24594: IFFALSE 24711
// for _y = min_y to max_y do
24596: LD_ADDR_VAR 0 12
24600: PUSH
24601: DOUBLE
24602: LD_VAR 0 8
24606: DEC
24607: ST_TO_ADDR
24608: LD_VAR 0 10
24612: PUSH
24613: FOR_TO
24614: IFFALSE 24707
// begin if not ValidHex ( _x , _y ) then
24616: LD_VAR 0 11
24620: PPUSH
24621: LD_VAR 0 12
24625: PPUSH
24626: CALL_OW 488
24630: NOT
24631: IFFALSE 24635
// continue ;
24633: GO 24613
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24635: LD_VAR 0 11
24639: PPUSH
24640: LD_VAR 0 12
24644: PPUSH
24645: CALL_OW 351
24649: PUSH
24650: LD_VAR 0 11
24654: PPUSH
24655: LD_VAR 0 12
24659: PPUSH
24660: CALL_OW 554
24664: AND
24665: IFFALSE 24705
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24667: LD_ADDR_VAR 0 13
24671: PUSH
24672: LD_VAR 0 13
24676: PPUSH
24677: LD_VAR 0 13
24681: PUSH
24682: LD_INT 1
24684: PLUS
24685: PPUSH
24686: LD_VAR 0 11
24690: PUSH
24691: LD_VAR 0 12
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PPUSH
24700: CALL_OW 2
24704: ST_TO_ADDR
// end ;
24705: GO 24613
24707: POP
24708: POP
24709: GO 24593
24711: POP
24712: POP
// if not list then
24713: LD_VAR 0 13
24717: NOT
24718: IFFALSE 24722
// exit ;
24720: GO 24793
// for i in list do
24722: LD_ADDR_VAR 0 6
24726: PUSH
24727: LD_VAR 0 13
24731: PUSH
24732: FOR_IN
24733: IFFALSE 24791
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24735: LD_VAR 0 1
24739: PPUSH
24740: LD_STRING M
24742: PUSH
24743: LD_VAR 0 6
24747: PUSH
24748: LD_INT 1
24750: ARRAY
24751: PUSH
24752: LD_VAR 0 6
24756: PUSH
24757: LD_INT 2
24759: ARRAY
24760: PUSH
24761: LD_INT 0
24763: PUSH
24764: LD_INT 0
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: PUSH
24782: EMPTY
24783: LIST
24784: PPUSH
24785: CALL_OW 447
24789: GO 24732
24791: POP
24792: POP
// end ;
24793: LD_VAR 0 5
24797: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24798: LD_EXP 95
24802: NOT
24803: IFFALSE 24853
24805: GO 24807
24807: DISABLE
// begin initHack := true ;
24808: LD_ADDR_EXP 95
24812: PUSH
24813: LD_INT 1
24815: ST_TO_ADDR
// hackTanks := [ ] ;
24816: LD_ADDR_EXP 96
24820: PUSH
24821: EMPTY
24822: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24823: LD_ADDR_EXP 97
24827: PUSH
24828: EMPTY
24829: ST_TO_ADDR
// hackLimit := 3 ;
24830: LD_ADDR_EXP 98
24834: PUSH
24835: LD_INT 3
24837: ST_TO_ADDR
// hackDist := 12 ;
24838: LD_ADDR_EXP 99
24842: PUSH
24843: LD_INT 12
24845: ST_TO_ADDR
// hackCounter := [ ] ;
24846: LD_ADDR_EXP 100
24850: PUSH
24851: EMPTY
24852: ST_TO_ADDR
// end ;
24853: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24854: LD_EXP 95
24858: PUSH
24859: LD_INT 34
24861: PUSH
24862: LD_EXP 21
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PPUSH
24871: CALL_OW 69
24875: AND
24876: IFFALSE 25131
24878: GO 24880
24880: DISABLE
24881: LD_INT 0
24883: PPUSH
24884: PPUSH
// begin enable ;
24885: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24886: LD_ADDR_VAR 0 1
24890: PUSH
24891: LD_INT 34
24893: PUSH
24894: LD_EXP 21
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PPUSH
24903: CALL_OW 69
24907: PUSH
24908: FOR_IN
24909: IFFALSE 25129
// begin if not i in hackTanks then
24911: LD_VAR 0 1
24915: PUSH
24916: LD_EXP 96
24920: IN
24921: NOT
24922: IFFALSE 25005
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24924: LD_ADDR_EXP 96
24928: PUSH
24929: LD_EXP 96
24933: PPUSH
24934: LD_EXP 96
24938: PUSH
24939: LD_INT 1
24941: PLUS
24942: PPUSH
24943: LD_VAR 0 1
24947: PPUSH
24948: CALL_OW 1
24952: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24953: LD_ADDR_EXP 97
24957: PUSH
24958: LD_EXP 97
24962: PPUSH
24963: LD_EXP 97
24967: PUSH
24968: LD_INT 1
24970: PLUS
24971: PPUSH
24972: EMPTY
24973: PPUSH
24974: CALL_OW 1
24978: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24979: LD_ADDR_EXP 100
24983: PUSH
24984: LD_EXP 100
24988: PPUSH
24989: LD_EXP 100
24993: PUSH
24994: LD_INT 1
24996: PLUS
24997: PPUSH
24998: EMPTY
24999: PPUSH
25000: CALL_OW 1
25004: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25005: LD_VAR 0 1
25009: PPUSH
25010: CALL_OW 302
25014: NOT
25015: IFFALSE 25028
// begin HackUnlinkAll ( i ) ;
25017: LD_VAR 0 1
25021: PPUSH
25022: CALL 25134 0 1
// continue ;
25026: GO 24908
// end ; HackCheckCapturedStatus ( i ) ;
25028: LD_VAR 0 1
25032: PPUSH
25033: CALL 25577 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25037: LD_ADDR_VAR 0 2
25041: PUSH
25042: LD_INT 81
25044: PUSH
25045: LD_VAR 0 1
25049: PPUSH
25050: CALL_OW 255
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 33
25061: PUSH
25062: LD_INT 3
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 91
25071: PUSH
25072: LD_VAR 0 1
25076: PUSH
25077: LD_EXP 99
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 50
25089: PUSH
25090: EMPTY
25091: LIST
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: PPUSH
25099: CALL_OW 69
25103: ST_TO_ADDR
// if not tmp then
25104: LD_VAR 0 2
25108: NOT
25109: IFFALSE 25113
// continue ;
25111: GO 24908
// HackLink ( i , tmp ) ;
25113: LD_VAR 0 1
25117: PPUSH
25118: LD_VAR 0 2
25122: PPUSH
25123: CALL 25270 0 2
// end ;
25127: GO 24908
25129: POP
25130: POP
// end ;
25131: PPOPN 2
25133: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25134: LD_INT 0
25136: PPUSH
25137: PPUSH
25138: PPUSH
// if not hack in hackTanks then
25139: LD_VAR 0 1
25143: PUSH
25144: LD_EXP 96
25148: IN
25149: NOT
25150: IFFALSE 25154
// exit ;
25152: GO 25265
// index := GetElementIndex ( hackTanks , hack ) ;
25154: LD_ADDR_VAR 0 4
25158: PUSH
25159: LD_EXP 96
25163: PPUSH
25164: LD_VAR 0 1
25168: PPUSH
25169: CALL 32739 0 2
25173: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25174: LD_EXP 97
25178: PUSH
25179: LD_VAR 0 4
25183: ARRAY
25184: IFFALSE 25265
// begin for i in hackTanksCaptured [ index ] do
25186: LD_ADDR_VAR 0 3
25190: PUSH
25191: LD_EXP 97
25195: PUSH
25196: LD_VAR 0 4
25200: ARRAY
25201: PUSH
25202: FOR_IN
25203: IFFALSE 25229
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25205: LD_VAR 0 3
25209: PUSH
25210: LD_INT 1
25212: ARRAY
25213: PPUSH
25214: LD_VAR 0 3
25218: PUSH
25219: LD_INT 2
25221: ARRAY
25222: PPUSH
25223: CALL_OW 235
25227: GO 25202
25229: POP
25230: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25231: LD_ADDR_EXP 97
25235: PUSH
25236: LD_EXP 97
25240: PPUSH
25241: LD_VAR 0 4
25245: PPUSH
25246: EMPTY
25247: PPUSH
25248: CALL_OW 1
25252: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25253: LD_VAR 0 1
25257: PPUSH
25258: LD_INT 0
25260: PPUSH
25261: CALL_OW 505
// end ; end ;
25265: LD_VAR 0 2
25269: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25270: LD_INT 0
25272: PPUSH
25273: PPUSH
25274: PPUSH
// if not hack in hackTanks or not vehicles then
25275: LD_VAR 0 1
25279: PUSH
25280: LD_EXP 96
25284: IN
25285: NOT
25286: PUSH
25287: LD_VAR 0 2
25291: NOT
25292: OR
25293: IFFALSE 25297
// exit ;
25295: GO 25572
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25297: LD_ADDR_VAR 0 2
25301: PUSH
25302: LD_VAR 0 1
25306: PPUSH
25307: LD_VAR 0 2
25311: PPUSH
25312: LD_INT 1
25314: PPUSH
25315: LD_INT 1
25317: PPUSH
25318: CALL 33389 0 4
25322: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25323: LD_ADDR_VAR 0 5
25327: PUSH
25328: LD_EXP 96
25332: PPUSH
25333: LD_VAR 0 1
25337: PPUSH
25338: CALL 32739 0 2
25342: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25343: LD_EXP 97
25347: PUSH
25348: LD_VAR 0 5
25352: ARRAY
25353: PUSH
25354: LD_EXP 98
25358: LESS
25359: IFFALSE 25548
// begin for i := 1 to vehicles do
25361: LD_ADDR_VAR 0 4
25365: PUSH
25366: DOUBLE
25367: LD_INT 1
25369: DEC
25370: ST_TO_ADDR
25371: LD_VAR 0 2
25375: PUSH
25376: FOR_TO
25377: IFFALSE 25546
// begin if hackTanksCaptured [ index ] = hackLimit then
25379: LD_EXP 97
25383: PUSH
25384: LD_VAR 0 5
25388: ARRAY
25389: PUSH
25390: LD_EXP 98
25394: EQUAL
25395: IFFALSE 25399
// break ;
25397: GO 25546
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25399: LD_ADDR_EXP 100
25403: PUSH
25404: LD_EXP 100
25408: PPUSH
25409: LD_VAR 0 5
25413: PPUSH
25414: LD_EXP 100
25418: PUSH
25419: LD_VAR 0 5
25423: ARRAY
25424: PUSH
25425: LD_INT 1
25427: PLUS
25428: PPUSH
25429: CALL_OW 1
25433: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25434: LD_ADDR_EXP 97
25438: PUSH
25439: LD_EXP 97
25443: PPUSH
25444: LD_VAR 0 5
25448: PUSH
25449: LD_EXP 97
25453: PUSH
25454: LD_VAR 0 5
25458: ARRAY
25459: PUSH
25460: LD_INT 1
25462: PLUS
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PPUSH
25468: LD_VAR 0 2
25472: PUSH
25473: LD_VAR 0 4
25477: ARRAY
25478: PUSH
25479: LD_VAR 0 2
25483: PUSH
25484: LD_VAR 0 4
25488: ARRAY
25489: PPUSH
25490: CALL_OW 255
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PPUSH
25499: CALL 32954 0 3
25503: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25504: LD_VAR 0 2
25508: PUSH
25509: LD_VAR 0 4
25513: ARRAY
25514: PPUSH
25515: LD_VAR 0 1
25519: PPUSH
25520: CALL_OW 255
25524: PPUSH
25525: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25529: LD_VAR 0 2
25533: PUSH
25534: LD_VAR 0 4
25538: ARRAY
25539: PPUSH
25540: CALL_OW 141
// end ;
25544: GO 25376
25546: POP
25547: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25548: LD_VAR 0 1
25552: PPUSH
25553: LD_EXP 97
25557: PUSH
25558: LD_VAR 0 5
25562: ARRAY
25563: PUSH
25564: LD_INT 0
25566: PLUS
25567: PPUSH
25568: CALL_OW 505
// end ;
25572: LD_VAR 0 3
25576: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25577: LD_INT 0
25579: PPUSH
25580: PPUSH
25581: PPUSH
25582: PPUSH
// if not hack in hackTanks then
25583: LD_VAR 0 1
25587: PUSH
25588: LD_EXP 96
25592: IN
25593: NOT
25594: IFFALSE 25598
// exit ;
25596: GO 25838
// index := GetElementIndex ( hackTanks , hack ) ;
25598: LD_ADDR_VAR 0 4
25602: PUSH
25603: LD_EXP 96
25607: PPUSH
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL 32739 0 2
25617: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25618: LD_ADDR_VAR 0 3
25622: PUSH
25623: DOUBLE
25624: LD_EXP 97
25628: PUSH
25629: LD_VAR 0 4
25633: ARRAY
25634: INC
25635: ST_TO_ADDR
25636: LD_INT 1
25638: PUSH
25639: FOR_DOWNTO
25640: IFFALSE 25812
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25642: LD_ADDR_VAR 0 5
25646: PUSH
25647: LD_EXP 97
25651: PUSH
25652: LD_VAR 0 4
25656: ARRAY
25657: PUSH
25658: LD_VAR 0 3
25662: ARRAY
25663: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25664: LD_VAR 0 5
25668: PUSH
25669: LD_INT 1
25671: ARRAY
25672: PPUSH
25673: CALL_OW 302
25677: NOT
25678: PUSH
25679: LD_VAR 0 5
25683: PUSH
25684: LD_INT 1
25686: ARRAY
25687: PPUSH
25688: CALL_OW 255
25692: PUSH
25693: LD_VAR 0 1
25697: PPUSH
25698: CALL_OW 255
25702: NONEQUAL
25703: OR
25704: IFFALSE 25810
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25706: LD_VAR 0 5
25710: PUSH
25711: LD_INT 1
25713: ARRAY
25714: PPUSH
25715: CALL_OW 305
25719: PUSH
25720: LD_VAR 0 5
25724: PUSH
25725: LD_INT 1
25727: ARRAY
25728: PPUSH
25729: CALL_OW 255
25733: PUSH
25734: LD_VAR 0 1
25738: PPUSH
25739: CALL_OW 255
25743: EQUAL
25744: AND
25745: IFFALSE 25769
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25747: LD_VAR 0 5
25751: PUSH
25752: LD_INT 1
25754: ARRAY
25755: PPUSH
25756: LD_VAR 0 5
25760: PUSH
25761: LD_INT 2
25763: ARRAY
25764: PPUSH
25765: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25769: LD_ADDR_EXP 97
25773: PUSH
25774: LD_EXP 97
25778: PPUSH
25779: LD_VAR 0 4
25783: PPUSH
25784: LD_EXP 97
25788: PUSH
25789: LD_VAR 0 4
25793: ARRAY
25794: PPUSH
25795: LD_VAR 0 3
25799: PPUSH
25800: CALL_OW 3
25804: PPUSH
25805: CALL_OW 1
25809: ST_TO_ADDR
// end ; end ;
25810: GO 25639
25812: POP
25813: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25814: LD_VAR 0 1
25818: PPUSH
25819: LD_EXP 97
25823: PUSH
25824: LD_VAR 0 4
25828: ARRAY
25829: PUSH
25830: LD_INT 0
25832: PLUS
25833: PPUSH
25834: CALL_OW 505
// end ;
25838: LD_VAR 0 2
25842: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25843: LD_INT 0
25845: PPUSH
25846: PPUSH
25847: PPUSH
25848: PPUSH
// if not hack in hackTanks then
25849: LD_VAR 0 1
25853: PUSH
25854: LD_EXP 96
25858: IN
25859: NOT
25860: IFFALSE 25864
// exit ;
25862: GO 25949
// index := GetElementIndex ( hackTanks , hack ) ;
25864: LD_ADDR_VAR 0 5
25868: PUSH
25869: LD_EXP 96
25873: PPUSH
25874: LD_VAR 0 1
25878: PPUSH
25879: CALL 32739 0 2
25883: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25884: LD_ADDR_VAR 0 4
25888: PUSH
25889: DOUBLE
25890: LD_INT 1
25892: DEC
25893: ST_TO_ADDR
25894: LD_EXP 97
25898: PUSH
25899: LD_VAR 0 5
25903: ARRAY
25904: PUSH
25905: FOR_TO
25906: IFFALSE 25947
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25908: LD_EXP 97
25912: PUSH
25913: LD_VAR 0 5
25917: ARRAY
25918: PUSH
25919: LD_VAR 0 4
25923: ARRAY
25924: PUSH
25925: LD_INT 1
25927: ARRAY
25928: PUSH
25929: LD_VAR 0 2
25933: EQUAL
25934: IFFALSE 25945
// KillUnit ( vehicle ) ;
25936: LD_VAR 0 2
25940: PPUSH
25941: CALL_OW 66
25945: GO 25905
25947: POP
25948: POP
// end ;
25949: LD_VAR 0 3
25953: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25954: LD_EXP 101
25958: NOT
25959: IFFALSE 25994
25961: GO 25963
25963: DISABLE
// begin initMiner := true ;
25964: LD_ADDR_EXP 101
25968: PUSH
25969: LD_INT 1
25971: ST_TO_ADDR
// minersList := [ ] ;
25972: LD_ADDR_EXP 102
25976: PUSH
25977: EMPTY
25978: ST_TO_ADDR
// minerMinesList := [ ] ;
25979: LD_ADDR_EXP 103
25983: PUSH
25984: EMPTY
25985: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25986: LD_ADDR_EXP 104
25990: PUSH
25991: LD_INT 5
25993: ST_TO_ADDR
// end ;
25994: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25995: LD_EXP 101
25999: PUSH
26000: LD_INT 34
26002: PUSH
26003: LD_EXP 26
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PPUSH
26012: CALL_OW 69
26016: AND
26017: IFFALSE 26480
26019: GO 26021
26021: DISABLE
26022: LD_INT 0
26024: PPUSH
26025: PPUSH
26026: PPUSH
26027: PPUSH
// begin enable ;
26028: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26029: LD_ADDR_VAR 0 1
26033: PUSH
26034: LD_INT 34
26036: PUSH
26037: LD_EXP 26
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PPUSH
26046: CALL_OW 69
26050: PUSH
26051: FOR_IN
26052: IFFALSE 26124
// begin if not i in minersList then
26054: LD_VAR 0 1
26058: PUSH
26059: LD_EXP 102
26063: IN
26064: NOT
26065: IFFALSE 26122
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26067: LD_ADDR_EXP 102
26071: PUSH
26072: LD_EXP 102
26076: PPUSH
26077: LD_EXP 102
26081: PUSH
26082: LD_INT 1
26084: PLUS
26085: PPUSH
26086: LD_VAR 0 1
26090: PPUSH
26091: CALL_OW 1
26095: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26096: LD_ADDR_EXP 103
26100: PUSH
26101: LD_EXP 103
26105: PPUSH
26106: LD_EXP 103
26110: PUSH
26111: LD_INT 1
26113: PLUS
26114: PPUSH
26115: EMPTY
26116: PPUSH
26117: CALL_OW 1
26121: ST_TO_ADDR
// end end ;
26122: GO 26051
26124: POP
26125: POP
// for i := minerMinesList downto 1 do
26126: LD_ADDR_VAR 0 1
26130: PUSH
26131: DOUBLE
26132: LD_EXP 103
26136: INC
26137: ST_TO_ADDR
26138: LD_INT 1
26140: PUSH
26141: FOR_DOWNTO
26142: IFFALSE 26478
// begin if IsLive ( minersList [ i ] ) then
26144: LD_EXP 102
26148: PUSH
26149: LD_VAR 0 1
26153: ARRAY
26154: PPUSH
26155: CALL_OW 300
26159: IFFALSE 26187
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26161: LD_EXP 102
26165: PUSH
26166: LD_VAR 0 1
26170: ARRAY
26171: PPUSH
26172: LD_EXP 103
26176: PUSH
26177: LD_VAR 0 1
26181: ARRAY
26182: PPUSH
26183: CALL_OW 505
// if not minerMinesList [ i ] then
26187: LD_EXP 103
26191: PUSH
26192: LD_VAR 0 1
26196: ARRAY
26197: NOT
26198: IFFALSE 26202
// continue ;
26200: GO 26141
// for j := minerMinesList [ i ] downto 1 do
26202: LD_ADDR_VAR 0 2
26206: PUSH
26207: DOUBLE
26208: LD_EXP 103
26212: PUSH
26213: LD_VAR 0 1
26217: ARRAY
26218: INC
26219: ST_TO_ADDR
26220: LD_INT 1
26222: PUSH
26223: FOR_DOWNTO
26224: IFFALSE 26474
// begin side := GetSide ( minersList [ i ] ) ;
26226: LD_ADDR_VAR 0 3
26230: PUSH
26231: LD_EXP 102
26235: PUSH
26236: LD_VAR 0 1
26240: ARRAY
26241: PPUSH
26242: CALL_OW 255
26246: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26247: LD_ADDR_VAR 0 4
26251: PUSH
26252: LD_EXP 103
26256: PUSH
26257: LD_VAR 0 1
26261: ARRAY
26262: PUSH
26263: LD_VAR 0 2
26267: ARRAY
26268: PUSH
26269: LD_INT 1
26271: ARRAY
26272: PPUSH
26273: LD_EXP 103
26277: PUSH
26278: LD_VAR 0 1
26282: ARRAY
26283: PUSH
26284: LD_VAR 0 2
26288: ARRAY
26289: PUSH
26290: LD_INT 2
26292: ARRAY
26293: PPUSH
26294: CALL_OW 428
26298: ST_TO_ADDR
// if not tmp then
26299: LD_VAR 0 4
26303: NOT
26304: IFFALSE 26308
// continue ;
26306: GO 26223
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26308: LD_VAR 0 4
26312: PUSH
26313: LD_INT 81
26315: PUSH
26316: LD_VAR 0 3
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PPUSH
26325: CALL_OW 69
26329: IN
26330: PUSH
26331: LD_EXP 103
26335: PUSH
26336: LD_VAR 0 1
26340: ARRAY
26341: PUSH
26342: LD_VAR 0 2
26346: ARRAY
26347: PUSH
26348: LD_INT 1
26350: ARRAY
26351: PPUSH
26352: LD_EXP 103
26356: PUSH
26357: LD_VAR 0 1
26361: ARRAY
26362: PUSH
26363: LD_VAR 0 2
26367: ARRAY
26368: PUSH
26369: LD_INT 2
26371: ARRAY
26372: PPUSH
26373: CALL_OW 458
26377: AND
26378: IFFALSE 26472
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26380: LD_EXP 103
26384: PUSH
26385: LD_VAR 0 1
26389: ARRAY
26390: PUSH
26391: LD_VAR 0 2
26395: ARRAY
26396: PUSH
26397: LD_INT 1
26399: ARRAY
26400: PPUSH
26401: LD_EXP 103
26405: PUSH
26406: LD_VAR 0 1
26410: ARRAY
26411: PUSH
26412: LD_VAR 0 2
26416: ARRAY
26417: PUSH
26418: LD_INT 2
26420: ARRAY
26421: PPUSH
26422: LD_VAR 0 3
26426: PPUSH
26427: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26431: LD_ADDR_EXP 103
26435: PUSH
26436: LD_EXP 103
26440: PPUSH
26441: LD_VAR 0 1
26445: PPUSH
26446: LD_EXP 103
26450: PUSH
26451: LD_VAR 0 1
26455: ARRAY
26456: PPUSH
26457: LD_VAR 0 2
26461: PPUSH
26462: CALL_OW 3
26466: PPUSH
26467: CALL_OW 1
26471: ST_TO_ADDR
// end ; end ;
26472: GO 26223
26474: POP
26475: POP
// end ;
26476: GO 26141
26478: POP
26479: POP
// end ;
26480: PPOPN 4
26482: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26483: LD_INT 0
26485: PPUSH
26486: PPUSH
// result := false ;
26487: LD_ADDR_VAR 0 4
26491: PUSH
26492: LD_INT 0
26494: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26495: LD_VAR 0 1
26499: PPUSH
26500: CALL_OW 264
26504: PUSH
26505: LD_EXP 26
26509: EQUAL
26510: NOT
26511: IFFALSE 26515
// exit ;
26513: GO 26755
// index := GetElementIndex ( minersList , unit ) ;
26515: LD_ADDR_VAR 0 5
26519: PUSH
26520: LD_EXP 102
26524: PPUSH
26525: LD_VAR 0 1
26529: PPUSH
26530: CALL 32739 0 2
26534: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26535: LD_EXP 103
26539: PUSH
26540: LD_VAR 0 5
26544: ARRAY
26545: PUSH
26546: LD_EXP 104
26550: GREATEREQUAL
26551: IFFALSE 26555
// exit ;
26553: GO 26755
// ComMoveXY ( unit , x , y ) ;
26555: LD_VAR 0 1
26559: PPUSH
26560: LD_VAR 0 2
26564: PPUSH
26565: LD_VAR 0 3
26569: PPUSH
26570: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26574: LD_INT 35
26576: PPUSH
26577: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26581: LD_VAR 0 1
26585: PPUSH
26586: LD_VAR 0 2
26590: PPUSH
26591: LD_VAR 0 3
26595: PPUSH
26596: CALL 63511 0 3
26600: NOT
26601: PUSH
26602: LD_VAR 0 1
26606: PPUSH
26607: CALL_OW 314
26611: AND
26612: IFFALSE 26616
// exit ;
26614: GO 26755
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26616: LD_VAR 0 2
26620: PPUSH
26621: LD_VAR 0 3
26625: PPUSH
26626: CALL_OW 428
26630: PUSH
26631: LD_VAR 0 1
26635: EQUAL
26636: PUSH
26637: LD_VAR 0 1
26641: PPUSH
26642: CALL_OW 314
26646: NOT
26647: AND
26648: IFFALSE 26574
// PlaySoundXY ( x , y , PlantMine ) ;
26650: LD_VAR 0 2
26654: PPUSH
26655: LD_VAR 0 3
26659: PPUSH
26660: LD_STRING PlantMine
26662: PPUSH
26663: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26667: LD_VAR 0 2
26671: PPUSH
26672: LD_VAR 0 3
26676: PPUSH
26677: LD_VAR 0 1
26681: PPUSH
26682: CALL_OW 255
26686: PPUSH
26687: LD_INT 0
26689: PPUSH
26690: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26694: LD_ADDR_EXP 103
26698: PUSH
26699: LD_EXP 103
26703: PPUSH
26704: LD_VAR 0 5
26708: PUSH
26709: LD_EXP 103
26713: PUSH
26714: LD_VAR 0 5
26718: ARRAY
26719: PUSH
26720: LD_INT 1
26722: PLUS
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PPUSH
26728: LD_VAR 0 2
26732: PUSH
26733: LD_VAR 0 3
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PPUSH
26742: CALL 32954 0 3
26746: ST_TO_ADDR
// result := true ;
26747: LD_ADDR_VAR 0 4
26751: PUSH
26752: LD_INT 1
26754: ST_TO_ADDR
// end ;
26755: LD_VAR 0 4
26759: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26760: LD_INT 0
26762: PPUSH
26763: PPUSH
26764: PPUSH
// if not unit in minersList then
26765: LD_VAR 0 1
26769: PUSH
26770: LD_EXP 102
26774: IN
26775: NOT
26776: IFFALSE 26780
// exit ;
26778: GO 27172
// index := GetElementIndex ( minersList , unit ) ;
26780: LD_ADDR_VAR 0 6
26784: PUSH
26785: LD_EXP 102
26789: PPUSH
26790: LD_VAR 0 1
26794: PPUSH
26795: CALL 32739 0 2
26799: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26800: LD_ADDR_VAR 0 5
26804: PUSH
26805: DOUBLE
26806: LD_EXP 103
26810: PUSH
26811: LD_VAR 0 6
26815: ARRAY
26816: INC
26817: ST_TO_ADDR
26818: LD_INT 1
26820: PUSH
26821: FOR_DOWNTO
26822: IFFALSE 26983
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26824: LD_EXP 103
26828: PUSH
26829: LD_VAR 0 6
26833: ARRAY
26834: PUSH
26835: LD_VAR 0 5
26839: ARRAY
26840: PUSH
26841: LD_INT 1
26843: ARRAY
26844: PUSH
26845: LD_VAR 0 2
26849: EQUAL
26850: PUSH
26851: LD_EXP 103
26855: PUSH
26856: LD_VAR 0 6
26860: ARRAY
26861: PUSH
26862: LD_VAR 0 5
26866: ARRAY
26867: PUSH
26868: LD_INT 2
26870: ARRAY
26871: PUSH
26872: LD_VAR 0 3
26876: EQUAL
26877: AND
26878: IFFALSE 26981
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26880: LD_EXP 103
26884: PUSH
26885: LD_VAR 0 6
26889: ARRAY
26890: PUSH
26891: LD_VAR 0 5
26895: ARRAY
26896: PUSH
26897: LD_INT 1
26899: ARRAY
26900: PPUSH
26901: LD_EXP 103
26905: PUSH
26906: LD_VAR 0 6
26910: ARRAY
26911: PUSH
26912: LD_VAR 0 5
26916: ARRAY
26917: PUSH
26918: LD_INT 2
26920: ARRAY
26921: PPUSH
26922: LD_VAR 0 1
26926: PPUSH
26927: CALL_OW 255
26931: PPUSH
26932: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26936: LD_ADDR_EXP 103
26940: PUSH
26941: LD_EXP 103
26945: PPUSH
26946: LD_VAR 0 6
26950: PPUSH
26951: LD_EXP 103
26955: PUSH
26956: LD_VAR 0 6
26960: ARRAY
26961: PPUSH
26962: LD_VAR 0 5
26966: PPUSH
26967: CALL_OW 3
26971: PPUSH
26972: CALL_OW 1
26976: ST_TO_ADDR
// exit ;
26977: POP
26978: POP
26979: GO 27172
// end ; end ;
26981: GO 26821
26983: POP
26984: POP
// for i := minerMinesList [ index ] downto 1 do
26985: LD_ADDR_VAR 0 5
26989: PUSH
26990: DOUBLE
26991: LD_EXP 103
26995: PUSH
26996: LD_VAR 0 6
27000: ARRAY
27001: INC
27002: ST_TO_ADDR
27003: LD_INT 1
27005: PUSH
27006: FOR_DOWNTO
27007: IFFALSE 27170
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27009: LD_EXP 103
27013: PUSH
27014: LD_VAR 0 6
27018: ARRAY
27019: PUSH
27020: LD_VAR 0 5
27024: ARRAY
27025: PUSH
27026: LD_INT 1
27028: ARRAY
27029: PPUSH
27030: LD_EXP 103
27034: PUSH
27035: LD_VAR 0 6
27039: ARRAY
27040: PUSH
27041: LD_VAR 0 5
27045: ARRAY
27046: PUSH
27047: LD_INT 2
27049: ARRAY
27050: PPUSH
27051: LD_VAR 0 2
27055: PPUSH
27056: LD_VAR 0 3
27060: PPUSH
27061: CALL_OW 298
27065: PUSH
27066: LD_INT 6
27068: LESS
27069: IFFALSE 27168
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27071: LD_EXP 103
27075: PUSH
27076: LD_VAR 0 6
27080: ARRAY
27081: PUSH
27082: LD_VAR 0 5
27086: ARRAY
27087: PUSH
27088: LD_INT 1
27090: ARRAY
27091: PPUSH
27092: LD_EXP 103
27096: PUSH
27097: LD_VAR 0 6
27101: ARRAY
27102: PUSH
27103: LD_VAR 0 5
27107: ARRAY
27108: PUSH
27109: LD_INT 2
27111: ARRAY
27112: PPUSH
27113: LD_VAR 0 1
27117: PPUSH
27118: CALL_OW 255
27122: PPUSH
27123: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27127: LD_ADDR_EXP 103
27131: PUSH
27132: LD_EXP 103
27136: PPUSH
27137: LD_VAR 0 6
27141: PPUSH
27142: LD_EXP 103
27146: PUSH
27147: LD_VAR 0 6
27151: ARRAY
27152: PPUSH
27153: LD_VAR 0 5
27157: PPUSH
27158: CALL_OW 3
27162: PPUSH
27163: CALL_OW 1
27167: ST_TO_ADDR
// end ; end ;
27168: GO 27006
27170: POP
27171: POP
// end ;
27172: LD_VAR 0 4
27176: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27177: LD_INT 0
27179: PPUSH
27180: PPUSH
27181: PPUSH
27182: PPUSH
27183: PPUSH
27184: PPUSH
27185: PPUSH
27186: PPUSH
27187: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27188: LD_VAR 0 1
27192: PPUSH
27193: CALL_OW 264
27197: PUSH
27198: LD_EXP 26
27202: EQUAL
27203: NOT
27204: PUSH
27205: LD_VAR 0 1
27209: PUSH
27210: LD_EXP 102
27214: IN
27215: NOT
27216: OR
27217: IFFALSE 27221
// exit ;
27219: GO 27543
// index := GetElementIndex ( minersList , unit ) ;
27221: LD_ADDR_VAR 0 6
27225: PUSH
27226: LD_EXP 102
27230: PPUSH
27231: LD_VAR 0 1
27235: PPUSH
27236: CALL 32739 0 2
27240: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27241: LD_ADDR_VAR 0 8
27245: PUSH
27246: LD_EXP 104
27250: PUSH
27251: LD_EXP 103
27255: PUSH
27256: LD_VAR 0 6
27260: ARRAY
27261: MINUS
27262: ST_TO_ADDR
// if not minesFreeAmount then
27263: LD_VAR 0 8
27267: NOT
27268: IFFALSE 27272
// exit ;
27270: GO 27543
// tmp := [ ] ;
27272: LD_ADDR_VAR 0 7
27276: PUSH
27277: EMPTY
27278: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27279: LD_ADDR_VAR 0 5
27283: PUSH
27284: DOUBLE
27285: LD_INT 1
27287: DEC
27288: ST_TO_ADDR
27289: LD_VAR 0 8
27293: PUSH
27294: FOR_TO
27295: IFFALSE 27490
// begin _d := rand ( 0 , 5 ) ;
27297: LD_ADDR_VAR 0 11
27301: PUSH
27302: LD_INT 0
27304: PPUSH
27305: LD_INT 5
27307: PPUSH
27308: CALL_OW 12
27312: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27313: LD_ADDR_VAR 0 12
27317: PUSH
27318: LD_INT 2
27320: PPUSH
27321: LD_INT 6
27323: PPUSH
27324: CALL_OW 12
27328: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27329: LD_ADDR_VAR 0 9
27333: PUSH
27334: LD_VAR 0 2
27338: PPUSH
27339: LD_VAR 0 11
27343: PPUSH
27344: LD_VAR 0 12
27348: PPUSH
27349: CALL_OW 272
27353: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27354: LD_ADDR_VAR 0 10
27358: PUSH
27359: LD_VAR 0 3
27363: PPUSH
27364: LD_VAR 0 11
27368: PPUSH
27369: LD_VAR 0 12
27373: PPUSH
27374: CALL_OW 273
27378: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27379: LD_VAR 0 9
27383: PPUSH
27384: LD_VAR 0 10
27388: PPUSH
27389: CALL_OW 488
27393: PUSH
27394: LD_VAR 0 9
27398: PUSH
27399: LD_VAR 0 10
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_VAR 0 7
27412: IN
27413: NOT
27414: AND
27415: PUSH
27416: LD_VAR 0 9
27420: PPUSH
27421: LD_VAR 0 10
27425: PPUSH
27426: CALL_OW 458
27430: NOT
27431: AND
27432: IFFALSE 27474
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27434: LD_ADDR_VAR 0 7
27438: PUSH
27439: LD_VAR 0 7
27443: PPUSH
27444: LD_VAR 0 7
27448: PUSH
27449: LD_INT 1
27451: PLUS
27452: PPUSH
27453: LD_VAR 0 9
27457: PUSH
27458: LD_VAR 0 10
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PPUSH
27467: CALL_OW 1
27471: ST_TO_ADDR
27472: GO 27488
// i := i - 1 ;
27474: LD_ADDR_VAR 0 5
27478: PUSH
27479: LD_VAR 0 5
27483: PUSH
27484: LD_INT 1
27486: MINUS
27487: ST_TO_ADDR
// end ;
27488: GO 27294
27490: POP
27491: POP
// for i in tmp do
27492: LD_ADDR_VAR 0 5
27496: PUSH
27497: LD_VAR 0 7
27501: PUSH
27502: FOR_IN
27503: IFFALSE 27541
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27505: LD_VAR 0 1
27509: PPUSH
27510: LD_VAR 0 5
27514: PUSH
27515: LD_INT 1
27517: ARRAY
27518: PPUSH
27519: LD_VAR 0 5
27523: PUSH
27524: LD_INT 2
27526: ARRAY
27527: PPUSH
27528: CALL 26483 0 3
27532: NOT
27533: IFFALSE 27539
// exit ;
27535: POP
27536: POP
27537: GO 27543
27539: GO 27502
27541: POP
27542: POP
// end ;
27543: LD_VAR 0 4
27547: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27548: LD_INT 0
27550: PPUSH
27551: PPUSH
27552: PPUSH
27553: PPUSH
27554: PPUSH
27555: PPUSH
27556: PPUSH
// if not GetClass ( unit ) = class_sniper then
27557: LD_VAR 0 1
27561: PPUSH
27562: CALL_OW 257
27566: PUSH
27567: LD_INT 5
27569: EQUAL
27570: NOT
27571: IFFALSE 27575
// exit ;
27573: GO 27963
// dist := 8 ;
27575: LD_ADDR_VAR 0 5
27579: PUSH
27580: LD_INT 8
27582: ST_TO_ADDR
// viewRange := 12 ;
27583: LD_ADDR_VAR 0 7
27587: PUSH
27588: LD_INT 12
27590: ST_TO_ADDR
// side := GetSide ( unit ) ;
27591: LD_ADDR_VAR 0 6
27595: PUSH
27596: LD_VAR 0 1
27600: PPUSH
27601: CALL_OW 255
27605: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27606: LD_INT 61
27608: PPUSH
27609: LD_VAR 0 6
27613: PPUSH
27614: CALL_OW 321
27618: PUSH
27619: LD_INT 2
27621: EQUAL
27622: IFFALSE 27632
// viewRange := 16 ;
27624: LD_ADDR_VAR 0 7
27628: PUSH
27629: LD_INT 16
27631: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27632: LD_VAR 0 1
27636: PPUSH
27637: LD_VAR 0 2
27641: PPUSH
27642: LD_VAR 0 3
27646: PPUSH
27647: CALL_OW 297
27651: PUSH
27652: LD_VAR 0 5
27656: GREATER
27657: IFFALSE 27736
// begin ComMoveXY ( unit , x , y ) ;
27659: LD_VAR 0 1
27663: PPUSH
27664: LD_VAR 0 2
27668: PPUSH
27669: LD_VAR 0 3
27673: PPUSH
27674: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27678: LD_INT 35
27680: PPUSH
27681: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27685: LD_VAR 0 1
27689: PPUSH
27690: LD_VAR 0 2
27694: PPUSH
27695: LD_VAR 0 3
27699: PPUSH
27700: CALL 63511 0 3
27704: NOT
27705: IFFALSE 27709
// exit ;
27707: GO 27963
// until GetDistUnitXY ( unit , x , y ) < dist ;
27709: LD_VAR 0 1
27713: PPUSH
27714: LD_VAR 0 2
27718: PPUSH
27719: LD_VAR 0 3
27723: PPUSH
27724: CALL_OW 297
27728: PUSH
27729: LD_VAR 0 5
27733: LESS
27734: IFFALSE 27678
// end ; ComTurnXY ( unit , x , y ) ;
27736: LD_VAR 0 1
27740: PPUSH
27741: LD_VAR 0 2
27745: PPUSH
27746: LD_VAR 0 3
27750: PPUSH
27751: CALL_OW 118
// wait ( 5 ) ;
27755: LD_INT 5
27757: PPUSH
27758: CALL_OW 67
// _d := GetDir ( unit ) ;
27762: LD_ADDR_VAR 0 10
27766: PUSH
27767: LD_VAR 0 1
27771: PPUSH
27772: CALL_OW 254
27776: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27777: LD_ADDR_VAR 0 8
27781: PUSH
27782: LD_VAR 0 1
27786: PPUSH
27787: CALL_OW 250
27791: PPUSH
27792: LD_VAR 0 10
27796: PPUSH
27797: LD_VAR 0 5
27801: PPUSH
27802: CALL_OW 272
27806: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27807: LD_ADDR_VAR 0 9
27811: PUSH
27812: LD_VAR 0 1
27816: PPUSH
27817: CALL_OW 251
27821: PPUSH
27822: LD_VAR 0 10
27826: PPUSH
27827: LD_VAR 0 5
27831: PPUSH
27832: CALL_OW 273
27836: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27837: LD_VAR 0 8
27841: PPUSH
27842: LD_VAR 0 9
27846: PPUSH
27847: CALL_OW 488
27851: NOT
27852: IFFALSE 27856
// exit ;
27854: GO 27963
// ComAnimCustom ( unit , 1 ) ;
27856: LD_VAR 0 1
27860: PPUSH
27861: LD_INT 1
27863: PPUSH
27864: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27868: LD_VAR 0 8
27872: PPUSH
27873: LD_VAR 0 9
27877: PPUSH
27878: LD_VAR 0 6
27882: PPUSH
27883: LD_VAR 0 7
27887: PPUSH
27888: CALL_OW 330
// repeat wait ( 1 ) ;
27892: LD_INT 1
27894: PPUSH
27895: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27899: LD_VAR 0 1
27903: PPUSH
27904: CALL_OW 316
27908: PUSH
27909: LD_VAR 0 1
27913: PPUSH
27914: CALL_OW 314
27918: OR
27919: PUSH
27920: LD_VAR 0 1
27924: PPUSH
27925: CALL_OW 302
27929: NOT
27930: OR
27931: PUSH
27932: LD_VAR 0 1
27936: PPUSH
27937: CALL_OW 301
27941: OR
27942: IFFALSE 27892
// RemoveSeeing ( _x , _y , side ) ;
27944: LD_VAR 0 8
27948: PPUSH
27949: LD_VAR 0 9
27953: PPUSH
27954: LD_VAR 0 6
27958: PPUSH
27959: CALL_OW 331
// end ; end_of_file
27963: LD_VAR 0 4
27967: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27968: LD_INT 0
27970: PPUSH
27971: PPUSH
// if exist_mode then
27972: LD_VAR 0 2
27976: IFFALSE 28001
// unit := CreateCharacter ( prefix & ident ) else
27978: LD_ADDR_VAR 0 5
27982: PUSH
27983: LD_VAR 0 3
27987: PUSH
27988: LD_VAR 0 1
27992: STR
27993: PPUSH
27994: CALL_OW 34
27998: ST_TO_ADDR
27999: GO 28016
// unit := NewCharacter ( ident ) ;
28001: LD_ADDR_VAR 0 5
28005: PUSH
28006: LD_VAR 0 1
28010: PPUSH
28011: CALL_OW 25
28015: ST_TO_ADDR
// result := unit ;
28016: LD_ADDR_VAR 0 4
28020: PUSH
28021: LD_VAR 0 5
28025: ST_TO_ADDR
// end ;
28026: LD_VAR 0 4
28030: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28031: LD_INT 0
28033: PPUSH
28034: PPUSH
// if not side or not nation then
28035: LD_VAR 0 1
28039: NOT
28040: PUSH
28041: LD_VAR 0 2
28045: NOT
28046: OR
28047: IFFALSE 28051
// exit ;
28049: GO 28819
// case nation of nation_american :
28051: LD_VAR 0 2
28055: PUSH
28056: LD_INT 1
28058: DOUBLE
28059: EQUAL
28060: IFTRUE 28064
28062: GO 28278
28064: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28065: LD_ADDR_VAR 0 4
28069: PUSH
28070: LD_INT 35
28072: PUSH
28073: LD_INT 45
28075: PUSH
28076: LD_INT 46
28078: PUSH
28079: LD_INT 47
28081: PUSH
28082: LD_INT 82
28084: PUSH
28085: LD_INT 83
28087: PUSH
28088: LD_INT 84
28090: PUSH
28091: LD_INT 85
28093: PUSH
28094: LD_INT 86
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: LD_INT 2
28102: PUSH
28103: LD_INT 6
28105: PUSH
28106: LD_INT 15
28108: PUSH
28109: LD_INT 16
28111: PUSH
28112: LD_INT 7
28114: PUSH
28115: LD_INT 12
28117: PUSH
28118: LD_INT 13
28120: PUSH
28121: LD_INT 10
28123: PUSH
28124: LD_INT 14
28126: PUSH
28127: LD_INT 20
28129: PUSH
28130: LD_INT 21
28132: PUSH
28133: LD_INT 22
28135: PUSH
28136: LD_INT 25
28138: PUSH
28139: LD_INT 32
28141: PUSH
28142: LD_INT 27
28144: PUSH
28145: LD_INT 36
28147: PUSH
28148: LD_INT 69
28150: PUSH
28151: LD_INT 39
28153: PUSH
28154: LD_INT 34
28156: PUSH
28157: LD_INT 40
28159: PUSH
28160: LD_INT 48
28162: PUSH
28163: LD_INT 49
28165: PUSH
28166: LD_INT 50
28168: PUSH
28169: LD_INT 51
28171: PUSH
28172: LD_INT 52
28174: PUSH
28175: LD_INT 53
28177: PUSH
28178: LD_INT 54
28180: PUSH
28181: LD_INT 55
28183: PUSH
28184: LD_INT 56
28186: PUSH
28187: LD_INT 57
28189: PUSH
28190: LD_INT 58
28192: PUSH
28193: LD_INT 59
28195: PUSH
28196: LD_INT 60
28198: PUSH
28199: LD_INT 61
28201: PUSH
28202: LD_INT 62
28204: PUSH
28205: LD_INT 80
28207: PUSH
28208: LD_INT 82
28210: PUSH
28211: LD_INT 83
28213: PUSH
28214: LD_INT 84
28216: PUSH
28217: LD_INT 85
28219: PUSH
28220: LD_INT 86
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: ST_TO_ADDR
28276: GO 28743
28278: LD_INT 2
28280: DOUBLE
28281: EQUAL
28282: IFTRUE 28286
28284: GO 28512
28286: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28287: LD_ADDR_VAR 0 4
28291: PUSH
28292: LD_INT 35
28294: PUSH
28295: LD_INT 45
28297: PUSH
28298: LD_INT 46
28300: PUSH
28301: LD_INT 47
28303: PUSH
28304: LD_INT 82
28306: PUSH
28307: LD_INT 83
28309: PUSH
28310: LD_INT 84
28312: PUSH
28313: LD_INT 85
28315: PUSH
28316: LD_INT 87
28318: PUSH
28319: LD_INT 70
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: LD_INT 11
28327: PUSH
28328: LD_INT 3
28330: PUSH
28331: LD_INT 4
28333: PUSH
28334: LD_INT 5
28336: PUSH
28337: LD_INT 6
28339: PUSH
28340: LD_INT 15
28342: PUSH
28343: LD_INT 18
28345: PUSH
28346: LD_INT 7
28348: PUSH
28349: LD_INT 17
28351: PUSH
28352: LD_INT 8
28354: PUSH
28355: LD_INT 20
28357: PUSH
28358: LD_INT 21
28360: PUSH
28361: LD_INT 22
28363: PUSH
28364: LD_INT 72
28366: PUSH
28367: LD_INT 26
28369: PUSH
28370: LD_INT 69
28372: PUSH
28373: LD_INT 39
28375: PUSH
28376: LD_INT 40
28378: PUSH
28379: LD_INT 41
28381: PUSH
28382: LD_INT 42
28384: PUSH
28385: LD_INT 43
28387: PUSH
28388: LD_INT 48
28390: PUSH
28391: LD_INT 49
28393: PUSH
28394: LD_INT 50
28396: PUSH
28397: LD_INT 51
28399: PUSH
28400: LD_INT 52
28402: PUSH
28403: LD_INT 53
28405: PUSH
28406: LD_INT 54
28408: PUSH
28409: LD_INT 55
28411: PUSH
28412: LD_INT 56
28414: PUSH
28415: LD_INT 60
28417: PUSH
28418: LD_INT 61
28420: PUSH
28421: LD_INT 62
28423: PUSH
28424: LD_INT 66
28426: PUSH
28427: LD_INT 67
28429: PUSH
28430: LD_INT 68
28432: PUSH
28433: LD_INT 81
28435: PUSH
28436: LD_INT 82
28438: PUSH
28439: LD_INT 83
28441: PUSH
28442: LD_INT 84
28444: PUSH
28445: LD_INT 85
28447: PUSH
28448: LD_INT 87
28450: PUSH
28451: LD_INT 88
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: ST_TO_ADDR
28510: GO 28743
28512: LD_INT 3
28514: DOUBLE
28515: EQUAL
28516: IFTRUE 28520
28518: GO 28742
28520: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28521: LD_ADDR_VAR 0 4
28525: PUSH
28526: LD_INT 46
28528: PUSH
28529: LD_INT 47
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: LD_INT 2
28537: PUSH
28538: LD_INT 82
28540: PUSH
28541: LD_INT 83
28543: PUSH
28544: LD_INT 84
28546: PUSH
28547: LD_INT 85
28549: PUSH
28550: LD_INT 86
28552: PUSH
28553: LD_INT 11
28555: PUSH
28556: LD_INT 9
28558: PUSH
28559: LD_INT 20
28561: PUSH
28562: LD_INT 19
28564: PUSH
28565: LD_INT 21
28567: PUSH
28568: LD_INT 24
28570: PUSH
28571: LD_INT 22
28573: PUSH
28574: LD_INT 25
28576: PUSH
28577: LD_INT 28
28579: PUSH
28580: LD_INT 29
28582: PUSH
28583: LD_INT 30
28585: PUSH
28586: LD_INT 31
28588: PUSH
28589: LD_INT 37
28591: PUSH
28592: LD_INT 38
28594: PUSH
28595: LD_INT 32
28597: PUSH
28598: LD_INT 27
28600: PUSH
28601: LD_INT 33
28603: PUSH
28604: LD_INT 69
28606: PUSH
28607: LD_INT 39
28609: PUSH
28610: LD_INT 34
28612: PUSH
28613: LD_INT 40
28615: PUSH
28616: LD_INT 71
28618: PUSH
28619: LD_INT 23
28621: PUSH
28622: LD_INT 44
28624: PUSH
28625: LD_INT 48
28627: PUSH
28628: LD_INT 49
28630: PUSH
28631: LD_INT 50
28633: PUSH
28634: LD_INT 51
28636: PUSH
28637: LD_INT 52
28639: PUSH
28640: LD_INT 53
28642: PUSH
28643: LD_INT 54
28645: PUSH
28646: LD_INT 55
28648: PUSH
28649: LD_INT 56
28651: PUSH
28652: LD_INT 57
28654: PUSH
28655: LD_INT 58
28657: PUSH
28658: LD_INT 59
28660: PUSH
28661: LD_INT 63
28663: PUSH
28664: LD_INT 64
28666: PUSH
28667: LD_INT 65
28669: PUSH
28670: LD_INT 82
28672: PUSH
28673: LD_INT 83
28675: PUSH
28676: LD_INT 84
28678: PUSH
28679: LD_INT 85
28681: PUSH
28682: LD_INT 86
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: ST_TO_ADDR
28740: GO 28743
28742: POP
// if state > - 1 and state < 3 then
28743: LD_VAR 0 3
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: GREATER
28752: PUSH
28753: LD_VAR 0 3
28757: PUSH
28758: LD_INT 3
28760: LESS
28761: AND
28762: IFFALSE 28819
// for i in result do
28764: LD_ADDR_VAR 0 5
28768: PUSH
28769: LD_VAR 0 4
28773: PUSH
28774: FOR_IN
28775: IFFALSE 28817
// if GetTech ( i , side ) <> state then
28777: LD_VAR 0 5
28781: PPUSH
28782: LD_VAR 0 1
28786: PPUSH
28787: CALL_OW 321
28791: PUSH
28792: LD_VAR 0 3
28796: NONEQUAL
28797: IFFALSE 28815
// result := result diff i ;
28799: LD_ADDR_VAR 0 4
28803: PUSH
28804: LD_VAR 0 4
28808: PUSH
28809: LD_VAR 0 5
28813: DIFF
28814: ST_TO_ADDR
28815: GO 28774
28817: POP
28818: POP
// end ;
28819: LD_VAR 0 4
28823: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28824: LD_INT 0
28826: PPUSH
28827: PPUSH
28828: PPUSH
// result := true ;
28829: LD_ADDR_VAR 0 3
28833: PUSH
28834: LD_INT 1
28836: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28837: LD_ADDR_VAR 0 5
28841: PUSH
28842: LD_VAR 0 2
28846: PPUSH
28847: CALL_OW 480
28851: ST_TO_ADDR
// if not tmp then
28852: LD_VAR 0 5
28856: NOT
28857: IFFALSE 28861
// exit ;
28859: GO 28910
// for i in tmp do
28861: LD_ADDR_VAR 0 4
28865: PUSH
28866: LD_VAR 0 5
28870: PUSH
28871: FOR_IN
28872: IFFALSE 28908
// if GetTech ( i , side ) <> state_researched then
28874: LD_VAR 0 4
28878: PPUSH
28879: LD_VAR 0 1
28883: PPUSH
28884: CALL_OW 321
28888: PUSH
28889: LD_INT 2
28891: NONEQUAL
28892: IFFALSE 28906
// begin result := false ;
28894: LD_ADDR_VAR 0 3
28898: PUSH
28899: LD_INT 0
28901: ST_TO_ADDR
// exit ;
28902: POP
28903: POP
28904: GO 28910
// end ;
28906: GO 28871
28908: POP
28909: POP
// end ;
28910: LD_VAR 0 3
28914: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28915: LD_INT 0
28917: PPUSH
28918: PPUSH
28919: PPUSH
28920: PPUSH
28921: PPUSH
28922: PPUSH
28923: PPUSH
28924: PPUSH
28925: PPUSH
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28930: LD_VAR 0 1
28934: NOT
28935: PUSH
28936: LD_VAR 0 1
28940: PPUSH
28941: CALL_OW 257
28945: PUSH
28946: LD_INT 9
28948: NONEQUAL
28949: OR
28950: IFFALSE 28954
// exit ;
28952: GO 29527
// side := GetSide ( unit ) ;
28954: LD_ADDR_VAR 0 9
28958: PUSH
28959: LD_VAR 0 1
28963: PPUSH
28964: CALL_OW 255
28968: ST_TO_ADDR
// tech_space := tech_spacanom ;
28969: LD_ADDR_VAR 0 12
28973: PUSH
28974: LD_INT 29
28976: ST_TO_ADDR
// tech_time := tech_taurad ;
28977: LD_ADDR_VAR 0 13
28981: PUSH
28982: LD_INT 28
28984: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28985: LD_ADDR_VAR 0 11
28989: PUSH
28990: LD_VAR 0 1
28994: PPUSH
28995: CALL_OW 310
28999: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29000: LD_VAR 0 11
29004: PPUSH
29005: CALL_OW 247
29009: PUSH
29010: LD_INT 2
29012: EQUAL
29013: IFFALSE 29017
// exit ;
29015: GO 29527
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29017: LD_ADDR_VAR 0 8
29021: PUSH
29022: LD_INT 81
29024: PUSH
29025: LD_VAR 0 9
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 3
29036: PUSH
29037: LD_INT 21
29039: PUSH
29040: LD_INT 3
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PPUSH
29055: CALL_OW 69
29059: ST_TO_ADDR
// if not tmp then
29060: LD_VAR 0 8
29064: NOT
29065: IFFALSE 29069
// exit ;
29067: GO 29527
// if in_unit then
29069: LD_VAR 0 11
29073: IFFALSE 29097
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29075: LD_ADDR_VAR 0 10
29079: PUSH
29080: LD_VAR 0 8
29084: PPUSH
29085: LD_VAR 0 11
29089: PPUSH
29090: CALL_OW 74
29094: ST_TO_ADDR
29095: GO 29117
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29097: LD_ADDR_VAR 0 10
29101: PUSH
29102: LD_VAR 0 8
29106: PPUSH
29107: LD_VAR 0 1
29111: PPUSH
29112: CALL_OW 74
29116: ST_TO_ADDR
// if not enemy then
29117: LD_VAR 0 10
29121: NOT
29122: IFFALSE 29126
// exit ;
29124: GO 29527
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29126: LD_VAR 0 11
29130: PUSH
29131: LD_VAR 0 11
29135: PPUSH
29136: LD_VAR 0 10
29140: PPUSH
29141: CALL_OW 296
29145: PUSH
29146: LD_INT 13
29148: GREATER
29149: AND
29150: PUSH
29151: LD_VAR 0 1
29155: PPUSH
29156: LD_VAR 0 10
29160: PPUSH
29161: CALL_OW 296
29165: PUSH
29166: LD_INT 12
29168: GREATER
29169: OR
29170: IFFALSE 29174
// exit ;
29172: GO 29527
// missile := [ 1 ] ;
29174: LD_ADDR_VAR 0 14
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: EMPTY
29183: LIST
29184: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29185: LD_VAR 0 9
29189: PPUSH
29190: LD_VAR 0 12
29194: PPUSH
29195: CALL_OW 325
29199: IFFALSE 29228
// missile := Insert ( missile , missile + 1 , 2 ) ;
29201: LD_ADDR_VAR 0 14
29205: PUSH
29206: LD_VAR 0 14
29210: PPUSH
29211: LD_VAR 0 14
29215: PUSH
29216: LD_INT 1
29218: PLUS
29219: PPUSH
29220: LD_INT 2
29222: PPUSH
29223: CALL_OW 2
29227: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29228: LD_VAR 0 9
29232: PPUSH
29233: LD_VAR 0 13
29237: PPUSH
29238: CALL_OW 325
29242: PUSH
29243: LD_VAR 0 10
29247: PPUSH
29248: CALL_OW 255
29252: PPUSH
29253: LD_VAR 0 13
29257: PPUSH
29258: CALL_OW 325
29262: NOT
29263: AND
29264: IFFALSE 29293
// missile := Insert ( missile , missile + 1 , 3 ) ;
29266: LD_ADDR_VAR 0 14
29270: PUSH
29271: LD_VAR 0 14
29275: PPUSH
29276: LD_VAR 0 14
29280: PUSH
29281: LD_INT 1
29283: PLUS
29284: PPUSH
29285: LD_INT 3
29287: PPUSH
29288: CALL_OW 2
29292: ST_TO_ADDR
// if missile < 2 then
29293: LD_VAR 0 14
29297: PUSH
29298: LD_INT 2
29300: LESS
29301: IFFALSE 29305
// exit ;
29303: GO 29527
// x := GetX ( enemy ) ;
29305: LD_ADDR_VAR 0 4
29309: PUSH
29310: LD_VAR 0 10
29314: PPUSH
29315: CALL_OW 250
29319: ST_TO_ADDR
// y := GetY ( enemy ) ;
29320: LD_ADDR_VAR 0 5
29324: PUSH
29325: LD_VAR 0 10
29329: PPUSH
29330: CALL_OW 251
29334: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29335: LD_ADDR_VAR 0 6
29339: PUSH
29340: LD_VAR 0 4
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: PPUSH
29349: LD_INT 1
29351: PPUSH
29352: CALL_OW 12
29356: PLUS
29357: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29358: LD_ADDR_VAR 0 7
29362: PUSH
29363: LD_VAR 0 5
29367: PUSH
29368: LD_INT 1
29370: NEG
29371: PPUSH
29372: LD_INT 1
29374: PPUSH
29375: CALL_OW 12
29379: PLUS
29380: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29381: LD_VAR 0 6
29385: PPUSH
29386: LD_VAR 0 7
29390: PPUSH
29391: CALL_OW 488
29395: NOT
29396: IFFALSE 29418
// begin _x := x ;
29398: LD_ADDR_VAR 0 6
29402: PUSH
29403: LD_VAR 0 4
29407: ST_TO_ADDR
// _y := y ;
29408: LD_ADDR_VAR 0 7
29412: PUSH
29413: LD_VAR 0 5
29417: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29418: LD_ADDR_VAR 0 3
29422: PUSH
29423: LD_INT 1
29425: PPUSH
29426: LD_VAR 0 14
29430: PPUSH
29431: CALL_OW 12
29435: ST_TO_ADDR
// case i of 1 :
29436: LD_VAR 0 3
29440: PUSH
29441: LD_INT 1
29443: DOUBLE
29444: EQUAL
29445: IFTRUE 29449
29447: GO 29466
29449: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29450: LD_VAR 0 1
29454: PPUSH
29455: LD_VAR 0 10
29459: PPUSH
29460: CALL_OW 115
29464: GO 29527
29466: LD_INT 2
29468: DOUBLE
29469: EQUAL
29470: IFTRUE 29474
29472: GO 29496
29474: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29475: LD_VAR 0 1
29479: PPUSH
29480: LD_VAR 0 6
29484: PPUSH
29485: LD_VAR 0 7
29489: PPUSH
29490: CALL_OW 153
29494: GO 29527
29496: LD_INT 3
29498: DOUBLE
29499: EQUAL
29500: IFTRUE 29504
29502: GO 29526
29504: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29505: LD_VAR 0 1
29509: PPUSH
29510: LD_VAR 0 6
29514: PPUSH
29515: LD_VAR 0 7
29519: PPUSH
29520: CALL_OW 154
29524: GO 29527
29526: POP
// end ;
29527: LD_VAR 0 2
29531: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29532: LD_INT 0
29534: PPUSH
29535: PPUSH
29536: PPUSH
29537: PPUSH
29538: PPUSH
29539: PPUSH
// if not unit or not building then
29540: LD_VAR 0 1
29544: NOT
29545: PUSH
29546: LD_VAR 0 2
29550: NOT
29551: OR
29552: IFFALSE 29556
// exit ;
29554: GO 29714
// x := GetX ( building ) ;
29556: LD_ADDR_VAR 0 5
29560: PUSH
29561: LD_VAR 0 2
29565: PPUSH
29566: CALL_OW 250
29570: ST_TO_ADDR
// y := GetY ( building ) ;
29571: LD_ADDR_VAR 0 6
29575: PUSH
29576: LD_VAR 0 2
29580: PPUSH
29581: CALL_OW 251
29585: ST_TO_ADDR
// for i = 0 to 5 do
29586: LD_ADDR_VAR 0 4
29590: PUSH
29591: DOUBLE
29592: LD_INT 0
29594: DEC
29595: ST_TO_ADDR
29596: LD_INT 5
29598: PUSH
29599: FOR_TO
29600: IFFALSE 29712
// begin _x := ShiftX ( x , i , 3 ) ;
29602: LD_ADDR_VAR 0 7
29606: PUSH
29607: LD_VAR 0 5
29611: PPUSH
29612: LD_VAR 0 4
29616: PPUSH
29617: LD_INT 3
29619: PPUSH
29620: CALL_OW 272
29624: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29625: LD_ADDR_VAR 0 8
29629: PUSH
29630: LD_VAR 0 6
29634: PPUSH
29635: LD_VAR 0 4
29639: PPUSH
29640: LD_INT 3
29642: PPUSH
29643: CALL_OW 273
29647: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29648: LD_VAR 0 7
29652: PPUSH
29653: LD_VAR 0 8
29657: PPUSH
29658: CALL_OW 488
29662: NOT
29663: IFFALSE 29667
// continue ;
29665: GO 29599
// if HexInfo ( _x , _y ) = 0 then
29667: LD_VAR 0 7
29671: PPUSH
29672: LD_VAR 0 8
29676: PPUSH
29677: CALL_OW 428
29681: PUSH
29682: LD_INT 0
29684: EQUAL
29685: IFFALSE 29710
// begin ComMoveXY ( unit , _x , _y ) ;
29687: LD_VAR 0 1
29691: PPUSH
29692: LD_VAR 0 7
29696: PPUSH
29697: LD_VAR 0 8
29701: PPUSH
29702: CALL_OW 111
// exit ;
29706: POP
29707: POP
29708: GO 29714
// end ; end ;
29710: GO 29599
29712: POP
29713: POP
// end ;
29714: LD_VAR 0 3
29718: RET
// export function ScanBase ( side , base_area ) ; begin
29719: LD_INT 0
29721: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29722: LD_ADDR_VAR 0 3
29726: PUSH
29727: LD_VAR 0 2
29731: PPUSH
29732: LD_INT 81
29734: PUSH
29735: LD_VAR 0 1
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PPUSH
29744: CALL_OW 70
29748: ST_TO_ADDR
// end ;
29749: LD_VAR 0 3
29753: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29754: LD_INT 0
29756: PPUSH
29757: PPUSH
29758: PPUSH
29759: PPUSH
// result := false ;
29760: LD_ADDR_VAR 0 2
29764: PUSH
29765: LD_INT 0
29767: ST_TO_ADDR
// side := GetSide ( unit ) ;
29768: LD_ADDR_VAR 0 3
29772: PUSH
29773: LD_VAR 0 1
29777: PPUSH
29778: CALL_OW 255
29782: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29783: LD_ADDR_VAR 0 4
29787: PUSH
29788: LD_VAR 0 1
29792: PPUSH
29793: CALL_OW 248
29797: ST_TO_ADDR
// case nat of 1 :
29798: LD_VAR 0 4
29802: PUSH
29803: LD_INT 1
29805: DOUBLE
29806: EQUAL
29807: IFTRUE 29811
29809: GO 29822
29811: POP
// tech := tech_lassight ; 2 :
29812: LD_ADDR_VAR 0 5
29816: PUSH
29817: LD_INT 12
29819: ST_TO_ADDR
29820: GO 29861
29822: LD_INT 2
29824: DOUBLE
29825: EQUAL
29826: IFTRUE 29830
29828: GO 29841
29830: POP
// tech := tech_mortar ; 3 :
29831: LD_ADDR_VAR 0 5
29835: PUSH
29836: LD_INT 41
29838: ST_TO_ADDR
29839: GO 29861
29841: LD_INT 3
29843: DOUBLE
29844: EQUAL
29845: IFTRUE 29849
29847: GO 29860
29849: POP
// tech := tech_bazooka ; end ;
29850: LD_ADDR_VAR 0 5
29854: PUSH
29855: LD_INT 44
29857: ST_TO_ADDR
29858: GO 29861
29860: POP
// if Researched ( side , tech ) then
29861: LD_VAR 0 3
29865: PPUSH
29866: LD_VAR 0 5
29870: PPUSH
29871: CALL_OW 325
29875: IFFALSE 29902
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29877: LD_ADDR_VAR 0 2
29881: PUSH
29882: LD_INT 5
29884: PUSH
29885: LD_INT 8
29887: PUSH
29888: LD_INT 9
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: LIST
29895: PUSH
29896: LD_VAR 0 4
29900: ARRAY
29901: ST_TO_ADDR
// end ;
29902: LD_VAR 0 2
29906: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29907: LD_INT 0
29909: PPUSH
29910: PPUSH
29911: PPUSH
// if not mines then
29912: LD_VAR 0 2
29916: NOT
29917: IFFALSE 29921
// exit ;
29919: GO 30065
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29921: LD_ADDR_VAR 0 5
29925: PUSH
29926: LD_INT 81
29928: PUSH
29929: LD_VAR 0 1
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 3
29940: PUSH
29941: LD_INT 21
29943: PUSH
29944: LD_INT 3
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PPUSH
29959: CALL_OW 69
29963: ST_TO_ADDR
// for i in mines do
29964: LD_ADDR_VAR 0 4
29968: PUSH
29969: LD_VAR 0 2
29973: PUSH
29974: FOR_IN
29975: IFFALSE 30063
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29977: LD_VAR 0 4
29981: PUSH
29982: LD_INT 1
29984: ARRAY
29985: PPUSH
29986: LD_VAR 0 4
29990: PUSH
29991: LD_INT 2
29993: ARRAY
29994: PPUSH
29995: CALL_OW 458
29999: NOT
30000: IFFALSE 30004
// continue ;
30002: GO 29974
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30004: LD_VAR 0 4
30008: PUSH
30009: LD_INT 1
30011: ARRAY
30012: PPUSH
30013: LD_VAR 0 4
30017: PUSH
30018: LD_INT 2
30020: ARRAY
30021: PPUSH
30022: CALL_OW 428
30026: PUSH
30027: LD_VAR 0 5
30031: IN
30032: IFFALSE 30061
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30034: LD_VAR 0 4
30038: PUSH
30039: LD_INT 1
30041: ARRAY
30042: PPUSH
30043: LD_VAR 0 4
30047: PUSH
30048: LD_INT 2
30050: ARRAY
30051: PPUSH
30052: LD_VAR 0 1
30056: PPUSH
30057: CALL_OW 456
// end ;
30061: GO 29974
30063: POP
30064: POP
// end ;
30065: LD_VAR 0 3
30069: RET
// export function Count ( array ) ; var i ; begin
30070: LD_INT 0
30072: PPUSH
30073: PPUSH
// result := 0 ;
30074: LD_ADDR_VAR 0 2
30078: PUSH
30079: LD_INT 0
30081: ST_TO_ADDR
// for i in array do
30082: LD_ADDR_VAR 0 3
30086: PUSH
30087: LD_VAR 0 1
30091: PUSH
30092: FOR_IN
30093: IFFALSE 30117
// if i then
30095: LD_VAR 0 3
30099: IFFALSE 30115
// result := result + 1 ;
30101: LD_ADDR_VAR 0 2
30105: PUSH
30106: LD_VAR 0 2
30110: PUSH
30111: LD_INT 1
30113: PLUS
30114: ST_TO_ADDR
30115: GO 30092
30117: POP
30118: POP
// end ;
30119: LD_VAR 0 2
30123: RET
// export function IsEmpty ( building ) ; begin
30124: LD_INT 0
30126: PPUSH
// if not building then
30127: LD_VAR 0 1
30131: NOT
30132: IFFALSE 30136
// exit ;
30134: GO 30179
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30136: LD_ADDR_VAR 0 2
30140: PUSH
30141: LD_VAR 0 1
30145: PUSH
30146: LD_INT 22
30148: PUSH
30149: LD_VAR 0 1
30153: PPUSH
30154: CALL_OW 255
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 58
30165: PUSH
30166: EMPTY
30167: LIST
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PPUSH
30173: CALL_OW 69
30177: IN
30178: ST_TO_ADDR
// end ;
30179: LD_VAR 0 2
30183: RET
// export function IsNotFull ( building ) ; begin
30184: LD_INT 0
30186: PPUSH
// if not building then
30187: LD_VAR 0 1
30191: NOT
30192: IFFALSE 30196
// exit ;
30194: GO 30215
// result := UnitsInside ( building ) < 6 ;
30196: LD_ADDR_VAR 0 2
30200: PUSH
30201: LD_VAR 0 1
30205: PPUSH
30206: CALL_OW 313
30210: PUSH
30211: LD_INT 6
30213: LESS
30214: ST_TO_ADDR
// end ;
30215: LD_VAR 0 2
30219: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30220: LD_INT 0
30222: PPUSH
30223: PPUSH
30224: PPUSH
30225: PPUSH
// tmp := [ ] ;
30226: LD_ADDR_VAR 0 3
30230: PUSH
30231: EMPTY
30232: ST_TO_ADDR
// list := [ ] ;
30233: LD_ADDR_VAR 0 5
30237: PUSH
30238: EMPTY
30239: ST_TO_ADDR
// for i = 16 to 25 do
30240: LD_ADDR_VAR 0 4
30244: PUSH
30245: DOUBLE
30246: LD_INT 16
30248: DEC
30249: ST_TO_ADDR
30250: LD_INT 25
30252: PUSH
30253: FOR_TO
30254: IFFALSE 30327
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30256: LD_ADDR_VAR 0 3
30260: PUSH
30261: LD_VAR 0 3
30265: PUSH
30266: LD_INT 22
30268: PUSH
30269: LD_VAR 0 1
30273: PPUSH
30274: CALL_OW 255
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 91
30285: PUSH
30286: LD_VAR 0 1
30290: PUSH
30291: LD_INT 6
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 30
30301: PUSH
30302: LD_VAR 0 4
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: LIST
30315: PUSH
30316: EMPTY
30317: LIST
30318: PPUSH
30319: CALL_OW 69
30323: ADD
30324: ST_TO_ADDR
30325: GO 30253
30327: POP
30328: POP
// for i = 1 to tmp do
30329: LD_ADDR_VAR 0 4
30333: PUSH
30334: DOUBLE
30335: LD_INT 1
30337: DEC
30338: ST_TO_ADDR
30339: LD_VAR 0 3
30343: PUSH
30344: FOR_TO
30345: IFFALSE 30433
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30347: LD_ADDR_VAR 0 5
30351: PUSH
30352: LD_VAR 0 5
30356: PUSH
30357: LD_VAR 0 3
30361: PUSH
30362: LD_VAR 0 4
30366: ARRAY
30367: PPUSH
30368: CALL_OW 266
30372: PUSH
30373: LD_VAR 0 3
30377: PUSH
30378: LD_VAR 0 4
30382: ARRAY
30383: PPUSH
30384: CALL_OW 250
30388: PUSH
30389: LD_VAR 0 3
30393: PUSH
30394: LD_VAR 0 4
30398: ARRAY
30399: PPUSH
30400: CALL_OW 251
30404: PUSH
30405: LD_VAR 0 3
30409: PUSH
30410: LD_VAR 0 4
30414: ARRAY
30415: PPUSH
30416: CALL_OW 254
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: PUSH
30427: EMPTY
30428: LIST
30429: ADD
30430: ST_TO_ADDR
30431: GO 30344
30433: POP
30434: POP
// result := list ;
30435: LD_ADDR_VAR 0 2
30439: PUSH
30440: LD_VAR 0 5
30444: ST_TO_ADDR
// end ;
30445: LD_VAR 0 2
30449: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30450: LD_INT 0
30452: PPUSH
30453: PPUSH
30454: PPUSH
30455: PPUSH
30456: PPUSH
30457: PPUSH
30458: PPUSH
// if not factory then
30459: LD_VAR 0 1
30463: NOT
30464: IFFALSE 30468
// exit ;
30466: GO 31061
// if control = control_apeman then
30468: LD_VAR 0 4
30472: PUSH
30473: LD_INT 5
30475: EQUAL
30476: IFFALSE 30585
// begin tmp := UnitsInside ( factory ) ;
30478: LD_ADDR_VAR 0 8
30482: PUSH
30483: LD_VAR 0 1
30487: PPUSH
30488: CALL_OW 313
30492: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30493: LD_VAR 0 8
30497: PPUSH
30498: LD_INT 25
30500: PUSH
30501: LD_INT 12
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PPUSH
30508: CALL_OW 72
30512: NOT
30513: IFFALSE 30523
// control := control_manual ;
30515: LD_ADDR_VAR 0 4
30519: PUSH
30520: LD_INT 1
30522: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30523: LD_ADDR_VAR 0 8
30527: PUSH
30528: LD_VAR 0 1
30532: PPUSH
30533: CALL 30220 0 1
30537: ST_TO_ADDR
// if tmp then
30538: LD_VAR 0 8
30542: IFFALSE 30585
// begin for i in tmp do
30544: LD_ADDR_VAR 0 7
30548: PUSH
30549: LD_VAR 0 8
30553: PUSH
30554: FOR_IN
30555: IFFALSE 30583
// if i [ 1 ] = b_ext_radio then
30557: LD_VAR 0 7
30561: PUSH
30562: LD_INT 1
30564: ARRAY
30565: PUSH
30566: LD_INT 22
30568: EQUAL
30569: IFFALSE 30581
// begin control := control_remote ;
30571: LD_ADDR_VAR 0 4
30575: PUSH
30576: LD_INT 2
30578: ST_TO_ADDR
// break ;
30579: GO 30583
// end ;
30581: GO 30554
30583: POP
30584: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30585: LD_VAR 0 1
30589: PPUSH
30590: LD_VAR 0 2
30594: PPUSH
30595: LD_VAR 0 3
30599: PPUSH
30600: LD_VAR 0 4
30604: PPUSH
30605: LD_VAR 0 5
30609: PPUSH
30610: CALL_OW 448
30614: IFFALSE 30649
// begin result := [ chassis , engine , control , weapon ] ;
30616: LD_ADDR_VAR 0 6
30620: PUSH
30621: LD_VAR 0 2
30625: PUSH
30626: LD_VAR 0 3
30630: PUSH
30631: LD_VAR 0 4
30635: PUSH
30636: LD_VAR 0 5
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: ST_TO_ADDR
// exit ;
30647: GO 31061
// end ; _chassis := AvailableChassisList ( factory ) ;
30649: LD_ADDR_VAR 0 9
30653: PUSH
30654: LD_VAR 0 1
30658: PPUSH
30659: CALL_OW 475
30663: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30664: LD_ADDR_VAR 0 11
30668: PUSH
30669: LD_VAR 0 1
30673: PPUSH
30674: CALL_OW 476
30678: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30679: LD_ADDR_VAR 0 12
30683: PUSH
30684: LD_VAR 0 1
30688: PPUSH
30689: CALL_OW 477
30693: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30694: LD_ADDR_VAR 0 10
30698: PUSH
30699: LD_VAR 0 1
30703: PPUSH
30704: CALL_OW 478
30708: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30709: LD_VAR 0 9
30713: NOT
30714: PUSH
30715: LD_VAR 0 11
30719: NOT
30720: OR
30721: PUSH
30722: LD_VAR 0 12
30726: NOT
30727: OR
30728: PUSH
30729: LD_VAR 0 10
30733: NOT
30734: OR
30735: IFFALSE 30770
// begin result := [ chassis , engine , control , weapon ] ;
30737: LD_ADDR_VAR 0 6
30741: PUSH
30742: LD_VAR 0 2
30746: PUSH
30747: LD_VAR 0 3
30751: PUSH
30752: LD_VAR 0 4
30756: PUSH
30757: LD_VAR 0 5
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: ST_TO_ADDR
// exit ;
30768: GO 31061
// end ; if not chassis in _chassis then
30770: LD_VAR 0 2
30774: PUSH
30775: LD_VAR 0 9
30779: IN
30780: NOT
30781: IFFALSE 30807
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30783: LD_ADDR_VAR 0 2
30787: PUSH
30788: LD_VAR 0 9
30792: PUSH
30793: LD_INT 1
30795: PPUSH
30796: LD_VAR 0 9
30800: PPUSH
30801: CALL_OW 12
30805: ARRAY
30806: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30807: LD_VAR 0 2
30811: PPUSH
30812: LD_VAR 0 3
30816: PPUSH
30817: CALL 31066 0 2
30821: NOT
30822: IFFALSE 30881
// repeat engine := _engine [ 1 ] ;
30824: LD_ADDR_VAR 0 3
30828: PUSH
30829: LD_VAR 0 11
30833: PUSH
30834: LD_INT 1
30836: ARRAY
30837: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30838: LD_ADDR_VAR 0 11
30842: PUSH
30843: LD_VAR 0 11
30847: PPUSH
30848: LD_INT 1
30850: PPUSH
30851: CALL_OW 3
30855: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30856: LD_VAR 0 2
30860: PPUSH
30861: LD_VAR 0 3
30865: PPUSH
30866: CALL 31066 0 2
30870: PUSH
30871: LD_VAR 0 11
30875: PUSH
30876: EMPTY
30877: EQUAL
30878: OR
30879: IFFALSE 30824
// if not control in _control then
30881: LD_VAR 0 4
30885: PUSH
30886: LD_VAR 0 12
30890: IN
30891: NOT
30892: IFFALSE 30918
// control := _control [ rand ( 1 , _control ) ] ;
30894: LD_ADDR_VAR 0 4
30898: PUSH
30899: LD_VAR 0 12
30903: PUSH
30904: LD_INT 1
30906: PPUSH
30907: LD_VAR 0 12
30911: PPUSH
30912: CALL_OW 12
30916: ARRAY
30917: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30918: LD_VAR 0 2
30922: PPUSH
30923: LD_VAR 0 5
30927: PPUSH
30928: CALL 31286 0 2
30932: NOT
30933: IFFALSE 30992
// repeat weapon := _weapon [ 1 ] ;
30935: LD_ADDR_VAR 0 5
30939: PUSH
30940: LD_VAR 0 10
30944: PUSH
30945: LD_INT 1
30947: ARRAY
30948: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30949: LD_ADDR_VAR 0 10
30953: PUSH
30954: LD_VAR 0 10
30958: PPUSH
30959: LD_INT 1
30961: PPUSH
30962: CALL_OW 3
30966: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30967: LD_VAR 0 2
30971: PPUSH
30972: LD_VAR 0 5
30976: PPUSH
30977: CALL 31286 0 2
30981: PUSH
30982: LD_VAR 0 10
30986: PUSH
30987: EMPTY
30988: EQUAL
30989: OR
30990: IFFALSE 30935
// result := [ ] ;
30992: LD_ADDR_VAR 0 6
30996: PUSH
30997: EMPTY
30998: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30999: LD_VAR 0 1
31003: PPUSH
31004: LD_VAR 0 2
31008: PPUSH
31009: LD_VAR 0 3
31013: PPUSH
31014: LD_VAR 0 4
31018: PPUSH
31019: LD_VAR 0 5
31023: PPUSH
31024: CALL_OW 448
31028: IFFALSE 31061
// result := [ chassis , engine , control , weapon ] ;
31030: LD_ADDR_VAR 0 6
31034: PUSH
31035: LD_VAR 0 2
31039: PUSH
31040: LD_VAR 0 3
31044: PUSH
31045: LD_VAR 0 4
31049: PUSH
31050: LD_VAR 0 5
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: ST_TO_ADDR
// end ;
31061: LD_VAR 0 6
31065: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31066: LD_INT 0
31068: PPUSH
// if not chassis or not engine then
31069: LD_VAR 0 1
31073: NOT
31074: PUSH
31075: LD_VAR 0 2
31079: NOT
31080: OR
31081: IFFALSE 31085
// exit ;
31083: GO 31281
// case engine of engine_solar :
31085: LD_VAR 0 2
31089: PUSH
31090: LD_INT 2
31092: DOUBLE
31093: EQUAL
31094: IFTRUE 31098
31096: GO 31136
31098: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31099: LD_ADDR_VAR 0 3
31103: PUSH
31104: LD_INT 11
31106: PUSH
31107: LD_INT 12
31109: PUSH
31110: LD_INT 13
31112: PUSH
31113: LD_INT 14
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: ST_TO_ADDR
31134: GO 31265
31136: LD_INT 1
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31144
31142: GO 31206
31144: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31145: LD_ADDR_VAR 0 3
31149: PUSH
31150: LD_INT 11
31152: PUSH
31153: LD_INT 12
31155: PUSH
31156: LD_INT 13
31158: PUSH
31159: LD_INT 14
31161: PUSH
31162: LD_INT 1
31164: PUSH
31165: LD_INT 2
31167: PUSH
31168: LD_INT 3
31170: PUSH
31171: LD_INT 4
31173: PUSH
31174: LD_INT 5
31176: PUSH
31177: LD_INT 21
31179: PUSH
31180: LD_INT 23
31182: PUSH
31183: LD_INT 22
31185: PUSH
31186: LD_INT 24
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: ST_TO_ADDR
31204: GO 31265
31206: LD_INT 3
31208: DOUBLE
31209: EQUAL
31210: IFTRUE 31214
31212: GO 31264
31214: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31215: LD_ADDR_VAR 0 3
31219: PUSH
31220: LD_INT 13
31222: PUSH
31223: LD_INT 14
31225: PUSH
31226: LD_INT 2
31228: PUSH
31229: LD_INT 3
31231: PUSH
31232: LD_INT 4
31234: PUSH
31235: LD_INT 5
31237: PUSH
31238: LD_INT 21
31240: PUSH
31241: LD_INT 22
31243: PUSH
31244: LD_INT 23
31246: PUSH
31247: LD_INT 24
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: ST_TO_ADDR
31262: GO 31265
31264: POP
// result := ( chassis in result ) ;
31265: LD_ADDR_VAR 0 3
31269: PUSH
31270: LD_VAR 0 1
31274: PUSH
31275: LD_VAR 0 3
31279: IN
31280: ST_TO_ADDR
// end ;
31281: LD_VAR 0 3
31285: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31286: LD_INT 0
31288: PPUSH
// if not chassis or not weapon then
31289: LD_VAR 0 1
31293: NOT
31294: PUSH
31295: LD_VAR 0 2
31299: NOT
31300: OR
31301: IFFALSE 31305
// exit ;
31303: GO 32367
// case weapon of us_machine_gun :
31305: LD_VAR 0 2
31309: PUSH
31310: LD_INT 2
31312: DOUBLE
31313: EQUAL
31314: IFTRUE 31318
31316: GO 31348
31318: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31319: LD_ADDR_VAR 0 3
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: LD_INT 2
31329: PUSH
31330: LD_INT 3
31332: PUSH
31333: LD_INT 4
31335: PUSH
31336: LD_INT 5
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: ST_TO_ADDR
31346: GO 32351
31348: LD_INT 3
31350: DOUBLE
31351: EQUAL
31352: IFTRUE 31356
31354: GO 31386
31356: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31357: LD_ADDR_VAR 0 3
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: LD_INT 2
31367: PUSH
31368: LD_INT 3
31370: PUSH
31371: LD_INT 4
31373: PUSH
31374: LD_INT 5
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: ST_TO_ADDR
31384: GO 32351
31386: LD_INT 11
31388: DOUBLE
31389: EQUAL
31390: IFTRUE 31394
31392: GO 31424
31394: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31395: LD_ADDR_VAR 0 3
31399: PUSH
31400: LD_INT 1
31402: PUSH
31403: LD_INT 2
31405: PUSH
31406: LD_INT 3
31408: PUSH
31409: LD_INT 4
31411: PUSH
31412: LD_INT 5
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: ST_TO_ADDR
31422: GO 32351
31424: LD_INT 4
31426: DOUBLE
31427: EQUAL
31428: IFTRUE 31432
31430: GO 31458
31432: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31433: LD_ADDR_VAR 0 3
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: LD_INT 4
31446: PUSH
31447: LD_INT 5
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: ST_TO_ADDR
31456: GO 32351
31458: LD_INT 5
31460: DOUBLE
31461: EQUAL
31462: IFTRUE 31466
31464: GO 31492
31466: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31467: LD_ADDR_VAR 0 3
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: LD_INT 4
31480: PUSH
31481: LD_INT 5
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: ST_TO_ADDR
31490: GO 32351
31492: LD_INT 9
31494: DOUBLE
31495: EQUAL
31496: IFTRUE 31500
31498: GO 31526
31500: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31501: LD_ADDR_VAR 0 3
31505: PUSH
31506: LD_INT 2
31508: PUSH
31509: LD_INT 3
31511: PUSH
31512: LD_INT 4
31514: PUSH
31515: LD_INT 5
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: ST_TO_ADDR
31524: GO 32351
31526: LD_INT 7
31528: DOUBLE
31529: EQUAL
31530: IFTRUE 31534
31532: GO 31560
31534: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31535: LD_ADDR_VAR 0 3
31539: PUSH
31540: LD_INT 2
31542: PUSH
31543: LD_INT 3
31545: PUSH
31546: LD_INT 4
31548: PUSH
31549: LD_INT 5
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: ST_TO_ADDR
31558: GO 32351
31560: LD_INT 12
31562: DOUBLE
31563: EQUAL
31564: IFTRUE 31568
31566: GO 31594
31568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31569: LD_ADDR_VAR 0 3
31573: PUSH
31574: LD_INT 2
31576: PUSH
31577: LD_INT 3
31579: PUSH
31580: LD_INT 4
31582: PUSH
31583: LD_INT 5
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: ST_TO_ADDR
31592: GO 32351
31594: LD_INT 13
31596: DOUBLE
31597: EQUAL
31598: IFTRUE 31602
31600: GO 31628
31602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31603: LD_ADDR_VAR 0 3
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: LD_INT 3
31613: PUSH
31614: LD_INT 4
31616: PUSH
31617: LD_INT 5
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: ST_TO_ADDR
31626: GO 32351
31628: LD_INT 14
31630: DOUBLE
31631: EQUAL
31632: IFTRUE 31636
31634: GO 31654
31636: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31637: LD_ADDR_VAR 0 3
31641: PUSH
31642: LD_INT 4
31644: PUSH
31645: LD_INT 5
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: ST_TO_ADDR
31652: GO 32351
31654: LD_INT 6
31656: DOUBLE
31657: EQUAL
31658: IFTRUE 31662
31660: GO 31680
31662: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31663: LD_ADDR_VAR 0 3
31667: PUSH
31668: LD_INT 4
31670: PUSH
31671: LD_INT 5
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: ST_TO_ADDR
31678: GO 32351
31680: LD_INT 10
31682: DOUBLE
31683: EQUAL
31684: IFTRUE 31688
31686: GO 31706
31688: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31689: LD_ADDR_VAR 0 3
31693: PUSH
31694: LD_INT 4
31696: PUSH
31697: LD_INT 5
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: ST_TO_ADDR
31704: GO 32351
31706: LD_INT 22
31708: DOUBLE
31709: EQUAL
31710: IFTRUE 31714
31712: GO 31740
31714: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31715: LD_ADDR_VAR 0 3
31719: PUSH
31720: LD_INT 11
31722: PUSH
31723: LD_INT 12
31725: PUSH
31726: LD_INT 13
31728: PUSH
31729: LD_INT 14
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: ST_TO_ADDR
31738: GO 32351
31740: LD_INT 23
31742: DOUBLE
31743: EQUAL
31744: IFTRUE 31748
31746: GO 31774
31748: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31749: LD_ADDR_VAR 0 3
31753: PUSH
31754: LD_INT 11
31756: PUSH
31757: LD_INT 12
31759: PUSH
31760: LD_INT 13
31762: PUSH
31763: LD_INT 14
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: ST_TO_ADDR
31772: GO 32351
31774: LD_INT 24
31776: DOUBLE
31777: EQUAL
31778: IFTRUE 31782
31780: GO 31808
31782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31783: LD_ADDR_VAR 0 3
31787: PUSH
31788: LD_INT 11
31790: PUSH
31791: LD_INT 12
31793: PUSH
31794: LD_INT 13
31796: PUSH
31797: LD_INT 14
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: ST_TO_ADDR
31806: GO 32351
31808: LD_INT 30
31810: DOUBLE
31811: EQUAL
31812: IFTRUE 31816
31814: GO 31842
31816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31817: LD_ADDR_VAR 0 3
31821: PUSH
31822: LD_INT 11
31824: PUSH
31825: LD_INT 12
31827: PUSH
31828: LD_INT 13
31830: PUSH
31831: LD_INT 14
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: ST_TO_ADDR
31840: GO 32351
31842: LD_INT 25
31844: DOUBLE
31845: EQUAL
31846: IFTRUE 31850
31848: GO 31868
31850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31851: LD_ADDR_VAR 0 3
31855: PUSH
31856: LD_INT 13
31858: PUSH
31859: LD_INT 14
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: ST_TO_ADDR
31866: GO 32351
31868: LD_INT 27
31870: DOUBLE
31871: EQUAL
31872: IFTRUE 31876
31874: GO 31894
31876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31877: LD_ADDR_VAR 0 3
31881: PUSH
31882: LD_INT 13
31884: PUSH
31885: LD_INT 14
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: ST_TO_ADDR
31892: GO 32351
31894: LD_EXP 24
31898: DOUBLE
31899: EQUAL
31900: IFTRUE 31904
31902: GO 31930
31904: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31905: LD_ADDR_VAR 0 3
31909: PUSH
31910: LD_INT 11
31912: PUSH
31913: LD_INT 12
31915: PUSH
31916: LD_INT 13
31918: PUSH
31919: LD_INT 14
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: ST_TO_ADDR
31928: GO 32351
31930: LD_INT 28
31932: DOUBLE
31933: EQUAL
31934: IFTRUE 31938
31936: GO 31956
31938: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31939: LD_ADDR_VAR 0 3
31943: PUSH
31944: LD_INT 13
31946: PUSH
31947: LD_INT 14
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: ST_TO_ADDR
31954: GO 32351
31956: LD_INT 29
31958: DOUBLE
31959: EQUAL
31960: IFTRUE 31964
31962: GO 31982
31964: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31965: LD_ADDR_VAR 0 3
31969: PUSH
31970: LD_INT 13
31972: PUSH
31973: LD_INT 14
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: ST_TO_ADDR
31980: GO 32351
31982: LD_INT 31
31984: DOUBLE
31985: EQUAL
31986: IFTRUE 31990
31988: GO 32008
31990: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31991: LD_ADDR_VAR 0 3
31995: PUSH
31996: LD_INT 13
31998: PUSH
31999: LD_INT 14
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: ST_TO_ADDR
32006: GO 32351
32008: LD_INT 26
32010: DOUBLE
32011: EQUAL
32012: IFTRUE 32016
32014: GO 32034
32016: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32017: LD_ADDR_VAR 0 3
32021: PUSH
32022: LD_INT 13
32024: PUSH
32025: LD_INT 14
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: ST_TO_ADDR
32032: GO 32351
32034: LD_INT 42
32036: DOUBLE
32037: EQUAL
32038: IFTRUE 32042
32040: GO 32068
32042: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32043: LD_ADDR_VAR 0 3
32047: PUSH
32048: LD_INT 21
32050: PUSH
32051: LD_INT 22
32053: PUSH
32054: LD_INT 23
32056: PUSH
32057: LD_INT 24
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: ST_TO_ADDR
32066: GO 32351
32068: LD_INT 43
32070: DOUBLE
32071: EQUAL
32072: IFTRUE 32076
32074: GO 32102
32076: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32077: LD_ADDR_VAR 0 3
32081: PUSH
32082: LD_INT 21
32084: PUSH
32085: LD_INT 22
32087: PUSH
32088: LD_INT 23
32090: PUSH
32091: LD_INT 24
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: ST_TO_ADDR
32100: GO 32351
32102: LD_INT 44
32104: DOUBLE
32105: EQUAL
32106: IFTRUE 32110
32108: GO 32136
32110: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32111: LD_ADDR_VAR 0 3
32115: PUSH
32116: LD_INT 21
32118: PUSH
32119: LD_INT 22
32121: PUSH
32122: LD_INT 23
32124: PUSH
32125: LD_INT 24
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: ST_TO_ADDR
32134: GO 32351
32136: LD_INT 45
32138: DOUBLE
32139: EQUAL
32140: IFTRUE 32144
32142: GO 32170
32144: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32145: LD_ADDR_VAR 0 3
32149: PUSH
32150: LD_INT 21
32152: PUSH
32153: LD_INT 22
32155: PUSH
32156: LD_INT 23
32158: PUSH
32159: LD_INT 24
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: ST_TO_ADDR
32168: GO 32351
32170: LD_INT 49
32172: DOUBLE
32173: EQUAL
32174: IFTRUE 32178
32176: GO 32204
32178: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32179: LD_ADDR_VAR 0 3
32183: PUSH
32184: LD_INT 21
32186: PUSH
32187: LD_INT 22
32189: PUSH
32190: LD_INT 23
32192: PUSH
32193: LD_INT 24
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: ST_TO_ADDR
32202: GO 32351
32204: LD_INT 51
32206: DOUBLE
32207: EQUAL
32208: IFTRUE 32212
32210: GO 32238
32212: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32213: LD_ADDR_VAR 0 3
32217: PUSH
32218: LD_INT 21
32220: PUSH
32221: LD_INT 22
32223: PUSH
32224: LD_INT 23
32226: PUSH
32227: LD_INT 24
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: ST_TO_ADDR
32236: GO 32351
32238: LD_INT 52
32240: DOUBLE
32241: EQUAL
32242: IFTRUE 32246
32244: GO 32272
32246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32247: LD_ADDR_VAR 0 3
32251: PUSH
32252: LD_INT 21
32254: PUSH
32255: LD_INT 22
32257: PUSH
32258: LD_INT 23
32260: PUSH
32261: LD_INT 24
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: ST_TO_ADDR
32270: GO 32351
32272: LD_INT 53
32274: DOUBLE
32275: EQUAL
32276: IFTRUE 32280
32278: GO 32298
32280: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32281: LD_ADDR_VAR 0 3
32285: PUSH
32286: LD_INT 23
32288: PUSH
32289: LD_INT 24
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: ST_TO_ADDR
32296: GO 32351
32298: LD_INT 46
32300: DOUBLE
32301: EQUAL
32302: IFTRUE 32306
32304: GO 32324
32306: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32307: LD_ADDR_VAR 0 3
32311: PUSH
32312: LD_INT 23
32314: PUSH
32315: LD_INT 24
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: ST_TO_ADDR
32322: GO 32351
32324: LD_INT 47
32326: DOUBLE
32327: EQUAL
32328: IFTRUE 32332
32330: GO 32350
32332: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32333: LD_ADDR_VAR 0 3
32337: PUSH
32338: LD_INT 23
32340: PUSH
32341: LD_INT 24
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: ST_TO_ADDR
32348: GO 32351
32350: POP
// result := ( chassis in result ) ;
32351: LD_ADDR_VAR 0 3
32355: PUSH
32356: LD_VAR 0 1
32360: PUSH
32361: LD_VAR 0 3
32365: IN
32366: ST_TO_ADDR
// end ;
32367: LD_VAR 0 3
32371: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32372: LD_INT 0
32374: PPUSH
32375: PPUSH
32376: PPUSH
32377: PPUSH
32378: PPUSH
32379: PPUSH
32380: PPUSH
// result := array ;
32381: LD_ADDR_VAR 0 5
32385: PUSH
32386: LD_VAR 0 1
32390: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32391: LD_VAR 0 1
32395: NOT
32396: PUSH
32397: LD_VAR 0 2
32401: NOT
32402: OR
32403: PUSH
32404: LD_VAR 0 3
32408: NOT
32409: OR
32410: PUSH
32411: LD_VAR 0 2
32415: PUSH
32416: LD_VAR 0 1
32420: GREATER
32421: OR
32422: PUSH
32423: LD_VAR 0 3
32427: PUSH
32428: LD_VAR 0 1
32432: GREATER
32433: OR
32434: IFFALSE 32438
// exit ;
32436: GO 32734
// if direction then
32438: LD_VAR 0 4
32442: IFFALSE 32506
// begin d := 1 ;
32444: LD_ADDR_VAR 0 9
32448: PUSH
32449: LD_INT 1
32451: ST_TO_ADDR
// if i_from > i_to then
32452: LD_VAR 0 2
32456: PUSH
32457: LD_VAR 0 3
32461: GREATER
32462: IFFALSE 32488
// length := ( array - i_from ) + i_to else
32464: LD_ADDR_VAR 0 11
32468: PUSH
32469: LD_VAR 0 1
32473: PUSH
32474: LD_VAR 0 2
32478: MINUS
32479: PUSH
32480: LD_VAR 0 3
32484: PLUS
32485: ST_TO_ADDR
32486: GO 32504
// length := i_to - i_from ;
32488: LD_ADDR_VAR 0 11
32492: PUSH
32493: LD_VAR 0 3
32497: PUSH
32498: LD_VAR 0 2
32502: MINUS
32503: ST_TO_ADDR
// end else
32504: GO 32567
// begin d := - 1 ;
32506: LD_ADDR_VAR 0 9
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: ST_TO_ADDR
// if i_from > i_to then
32515: LD_VAR 0 2
32519: PUSH
32520: LD_VAR 0 3
32524: GREATER
32525: IFFALSE 32545
// length := i_from - i_to else
32527: LD_ADDR_VAR 0 11
32531: PUSH
32532: LD_VAR 0 2
32536: PUSH
32537: LD_VAR 0 3
32541: MINUS
32542: ST_TO_ADDR
32543: GO 32567
// length := ( array - i_to ) + i_from ;
32545: LD_ADDR_VAR 0 11
32549: PUSH
32550: LD_VAR 0 1
32554: PUSH
32555: LD_VAR 0 3
32559: MINUS
32560: PUSH
32561: LD_VAR 0 2
32565: PLUS
32566: ST_TO_ADDR
// end ; if not length then
32567: LD_VAR 0 11
32571: NOT
32572: IFFALSE 32576
// exit ;
32574: GO 32734
// tmp := array ;
32576: LD_ADDR_VAR 0 10
32580: PUSH
32581: LD_VAR 0 1
32585: ST_TO_ADDR
// for i = 1 to length do
32586: LD_ADDR_VAR 0 6
32590: PUSH
32591: DOUBLE
32592: LD_INT 1
32594: DEC
32595: ST_TO_ADDR
32596: LD_VAR 0 11
32600: PUSH
32601: FOR_TO
32602: IFFALSE 32722
// begin for j = 1 to array do
32604: LD_ADDR_VAR 0 7
32608: PUSH
32609: DOUBLE
32610: LD_INT 1
32612: DEC
32613: ST_TO_ADDR
32614: LD_VAR 0 1
32618: PUSH
32619: FOR_TO
32620: IFFALSE 32708
// begin k := j + d ;
32622: LD_ADDR_VAR 0 8
32626: PUSH
32627: LD_VAR 0 7
32631: PUSH
32632: LD_VAR 0 9
32636: PLUS
32637: ST_TO_ADDR
// if k > array then
32638: LD_VAR 0 8
32642: PUSH
32643: LD_VAR 0 1
32647: GREATER
32648: IFFALSE 32658
// k := 1 ;
32650: LD_ADDR_VAR 0 8
32654: PUSH
32655: LD_INT 1
32657: ST_TO_ADDR
// if not k then
32658: LD_VAR 0 8
32662: NOT
32663: IFFALSE 32675
// k := array ;
32665: LD_ADDR_VAR 0 8
32669: PUSH
32670: LD_VAR 0 1
32674: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32675: LD_ADDR_VAR 0 10
32679: PUSH
32680: LD_VAR 0 10
32684: PPUSH
32685: LD_VAR 0 8
32689: PPUSH
32690: LD_VAR 0 1
32694: PUSH
32695: LD_VAR 0 7
32699: ARRAY
32700: PPUSH
32701: CALL_OW 1
32705: ST_TO_ADDR
// end ;
32706: GO 32619
32708: POP
32709: POP
// array := tmp ;
32710: LD_ADDR_VAR 0 1
32714: PUSH
32715: LD_VAR 0 10
32719: ST_TO_ADDR
// end ;
32720: GO 32601
32722: POP
32723: POP
// result := array ;
32724: LD_ADDR_VAR 0 5
32728: PUSH
32729: LD_VAR 0 1
32733: ST_TO_ADDR
// end ;
32734: LD_VAR 0 5
32738: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32739: LD_INT 0
32741: PPUSH
32742: PPUSH
// result := 0 ;
32743: LD_ADDR_VAR 0 3
32747: PUSH
32748: LD_INT 0
32750: ST_TO_ADDR
// if not array or not value in array then
32751: LD_VAR 0 1
32755: NOT
32756: PUSH
32757: LD_VAR 0 2
32761: PUSH
32762: LD_VAR 0 1
32766: IN
32767: NOT
32768: OR
32769: IFFALSE 32773
// exit ;
32771: GO 32827
// for i = 1 to array do
32773: LD_ADDR_VAR 0 4
32777: PUSH
32778: DOUBLE
32779: LD_INT 1
32781: DEC
32782: ST_TO_ADDR
32783: LD_VAR 0 1
32787: PUSH
32788: FOR_TO
32789: IFFALSE 32825
// if value = array [ i ] then
32791: LD_VAR 0 2
32795: PUSH
32796: LD_VAR 0 1
32800: PUSH
32801: LD_VAR 0 4
32805: ARRAY
32806: EQUAL
32807: IFFALSE 32823
// begin result := i ;
32809: LD_ADDR_VAR 0 3
32813: PUSH
32814: LD_VAR 0 4
32818: ST_TO_ADDR
// exit ;
32819: POP
32820: POP
32821: GO 32827
// end ;
32823: GO 32788
32825: POP
32826: POP
// end ;
32827: LD_VAR 0 3
32831: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32832: LD_INT 0
32834: PPUSH
// vc_chassis := chassis ;
32835: LD_ADDR_OWVAR 37
32839: PUSH
32840: LD_VAR 0 1
32844: ST_TO_ADDR
// vc_engine := engine ;
32845: LD_ADDR_OWVAR 39
32849: PUSH
32850: LD_VAR 0 2
32854: ST_TO_ADDR
// vc_control := control ;
32855: LD_ADDR_OWVAR 38
32859: PUSH
32860: LD_VAR 0 3
32864: ST_TO_ADDR
// vc_weapon := weapon ;
32865: LD_ADDR_OWVAR 40
32869: PUSH
32870: LD_VAR 0 4
32874: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32875: LD_ADDR_OWVAR 41
32879: PUSH
32880: LD_VAR 0 5
32884: ST_TO_ADDR
// end ;
32885: LD_VAR 0 6
32889: RET
// export function WantPlant ( unit ) ; var task ; begin
32890: LD_INT 0
32892: PPUSH
32893: PPUSH
// result := false ;
32894: LD_ADDR_VAR 0 2
32898: PUSH
32899: LD_INT 0
32901: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32902: LD_ADDR_VAR 0 3
32906: PUSH
32907: LD_VAR 0 1
32911: PPUSH
32912: CALL_OW 437
32916: ST_TO_ADDR
// if task then
32917: LD_VAR 0 3
32921: IFFALSE 32949
// if task [ 1 ] [ 1 ] = p then
32923: LD_VAR 0 3
32927: PUSH
32928: LD_INT 1
32930: ARRAY
32931: PUSH
32932: LD_INT 1
32934: ARRAY
32935: PUSH
32936: LD_STRING p
32938: EQUAL
32939: IFFALSE 32949
// result := true ;
32941: LD_ADDR_VAR 0 2
32945: PUSH
32946: LD_INT 1
32948: ST_TO_ADDR
// end ;
32949: LD_VAR 0 2
32953: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32954: LD_INT 0
32956: PPUSH
32957: PPUSH
32958: PPUSH
32959: PPUSH
// if pos < 1 then
32960: LD_VAR 0 2
32964: PUSH
32965: LD_INT 1
32967: LESS
32968: IFFALSE 32972
// exit ;
32970: GO 33275
// if pos = 1 then
32972: LD_VAR 0 2
32976: PUSH
32977: LD_INT 1
32979: EQUAL
32980: IFFALSE 33013
// result := Replace ( arr , pos [ 1 ] , value ) else
32982: LD_ADDR_VAR 0 4
32986: PUSH
32987: LD_VAR 0 1
32991: PPUSH
32992: LD_VAR 0 2
32996: PUSH
32997: LD_INT 1
32999: ARRAY
33000: PPUSH
33001: LD_VAR 0 3
33005: PPUSH
33006: CALL_OW 1
33010: ST_TO_ADDR
33011: GO 33275
// begin tmp := arr ;
33013: LD_ADDR_VAR 0 6
33017: PUSH
33018: LD_VAR 0 1
33022: ST_TO_ADDR
// s_arr := [ tmp ] ;
33023: LD_ADDR_VAR 0 7
33027: PUSH
33028: LD_VAR 0 6
33032: PUSH
33033: EMPTY
33034: LIST
33035: ST_TO_ADDR
// for i = 1 to pos - 1 do
33036: LD_ADDR_VAR 0 5
33040: PUSH
33041: DOUBLE
33042: LD_INT 1
33044: DEC
33045: ST_TO_ADDR
33046: LD_VAR 0 2
33050: PUSH
33051: LD_INT 1
33053: MINUS
33054: PUSH
33055: FOR_TO
33056: IFFALSE 33101
// begin tmp := tmp [ pos [ i ] ] ;
33058: LD_ADDR_VAR 0 6
33062: PUSH
33063: LD_VAR 0 6
33067: PUSH
33068: LD_VAR 0 2
33072: PUSH
33073: LD_VAR 0 5
33077: ARRAY
33078: ARRAY
33079: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33080: LD_ADDR_VAR 0 7
33084: PUSH
33085: LD_VAR 0 7
33089: PUSH
33090: LD_VAR 0 6
33094: PUSH
33095: EMPTY
33096: LIST
33097: ADD
33098: ST_TO_ADDR
// end ;
33099: GO 33055
33101: POP
33102: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33103: LD_ADDR_VAR 0 6
33107: PUSH
33108: LD_VAR 0 6
33112: PPUSH
33113: LD_VAR 0 2
33117: PUSH
33118: LD_VAR 0 2
33122: ARRAY
33123: PPUSH
33124: LD_VAR 0 3
33128: PPUSH
33129: CALL_OW 1
33133: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33134: LD_ADDR_VAR 0 7
33138: PUSH
33139: LD_VAR 0 7
33143: PPUSH
33144: LD_VAR 0 7
33148: PPUSH
33149: LD_VAR 0 6
33153: PPUSH
33154: CALL_OW 1
33158: ST_TO_ADDR
// for i = s_arr downto 2 do
33159: LD_ADDR_VAR 0 5
33163: PUSH
33164: DOUBLE
33165: LD_VAR 0 7
33169: INC
33170: ST_TO_ADDR
33171: LD_INT 2
33173: PUSH
33174: FOR_DOWNTO
33175: IFFALSE 33259
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33177: LD_ADDR_VAR 0 6
33181: PUSH
33182: LD_VAR 0 7
33186: PUSH
33187: LD_VAR 0 5
33191: PUSH
33192: LD_INT 1
33194: MINUS
33195: ARRAY
33196: PPUSH
33197: LD_VAR 0 2
33201: PUSH
33202: LD_VAR 0 5
33206: PUSH
33207: LD_INT 1
33209: MINUS
33210: ARRAY
33211: PPUSH
33212: LD_VAR 0 7
33216: PUSH
33217: LD_VAR 0 5
33221: ARRAY
33222: PPUSH
33223: CALL_OW 1
33227: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33228: LD_ADDR_VAR 0 7
33232: PUSH
33233: LD_VAR 0 7
33237: PPUSH
33238: LD_VAR 0 5
33242: PUSH
33243: LD_INT 1
33245: MINUS
33246: PPUSH
33247: LD_VAR 0 6
33251: PPUSH
33252: CALL_OW 1
33256: ST_TO_ADDR
// end ;
33257: GO 33174
33259: POP
33260: POP
// result := s_arr [ 1 ] ;
33261: LD_ADDR_VAR 0 4
33265: PUSH
33266: LD_VAR 0 7
33270: PUSH
33271: LD_INT 1
33273: ARRAY
33274: ST_TO_ADDR
// end ; end ;
33275: LD_VAR 0 4
33279: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33280: LD_INT 0
33282: PPUSH
33283: PPUSH
// if not list then
33284: LD_VAR 0 1
33288: NOT
33289: IFFALSE 33293
// exit ;
33291: GO 33384
// i := list [ pos1 ] ;
33293: LD_ADDR_VAR 0 5
33297: PUSH
33298: LD_VAR 0 1
33302: PUSH
33303: LD_VAR 0 2
33307: ARRAY
33308: ST_TO_ADDR
// if not i then
33309: LD_VAR 0 5
33313: NOT
33314: IFFALSE 33318
// exit ;
33316: GO 33384
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33318: LD_ADDR_VAR 0 1
33322: PUSH
33323: LD_VAR 0 1
33327: PPUSH
33328: LD_VAR 0 2
33332: PPUSH
33333: LD_VAR 0 1
33337: PUSH
33338: LD_VAR 0 3
33342: ARRAY
33343: PPUSH
33344: CALL_OW 1
33348: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33349: LD_ADDR_VAR 0 1
33353: PUSH
33354: LD_VAR 0 1
33358: PPUSH
33359: LD_VAR 0 3
33363: PPUSH
33364: LD_VAR 0 5
33368: PPUSH
33369: CALL_OW 1
33373: ST_TO_ADDR
// result := list ;
33374: LD_ADDR_VAR 0 4
33378: PUSH
33379: LD_VAR 0 1
33383: ST_TO_ADDR
// end ;
33384: LD_VAR 0 4
33388: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33389: LD_INT 0
33391: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33392: LD_ADDR_VAR 0 5
33396: PUSH
33397: LD_VAR 0 1
33401: PPUSH
33402: CALL_OW 250
33406: PPUSH
33407: LD_VAR 0 1
33411: PPUSH
33412: CALL_OW 251
33416: PPUSH
33417: LD_VAR 0 2
33421: PPUSH
33422: LD_VAR 0 3
33426: PPUSH
33427: LD_VAR 0 4
33431: PPUSH
33432: CALL 33442 0 5
33436: ST_TO_ADDR
// end ;
33437: LD_VAR 0 5
33441: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33442: LD_INT 0
33444: PPUSH
33445: PPUSH
33446: PPUSH
33447: PPUSH
// if not list then
33448: LD_VAR 0 3
33452: NOT
33453: IFFALSE 33457
// exit ;
33455: GO 33845
// result := [ ] ;
33457: LD_ADDR_VAR 0 6
33461: PUSH
33462: EMPTY
33463: ST_TO_ADDR
// for i in list do
33464: LD_ADDR_VAR 0 7
33468: PUSH
33469: LD_VAR 0 3
33473: PUSH
33474: FOR_IN
33475: IFFALSE 33677
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33477: LD_ADDR_VAR 0 9
33481: PUSH
33482: LD_VAR 0 7
33486: PPUSH
33487: LD_VAR 0 1
33491: PPUSH
33492: LD_VAR 0 2
33496: PPUSH
33497: CALL_OW 297
33501: ST_TO_ADDR
// if not result then
33502: LD_VAR 0 6
33506: NOT
33507: IFFALSE 33533
// result := [ [ i , tmp ] ] else
33509: LD_ADDR_VAR 0 6
33513: PUSH
33514: LD_VAR 0 7
33518: PUSH
33519: LD_VAR 0 9
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: EMPTY
33529: LIST
33530: ST_TO_ADDR
33531: GO 33675
// begin if result [ result ] [ 2 ] < tmp then
33533: LD_VAR 0 6
33537: PUSH
33538: LD_VAR 0 6
33542: ARRAY
33543: PUSH
33544: LD_INT 2
33546: ARRAY
33547: PUSH
33548: LD_VAR 0 9
33552: LESS
33553: IFFALSE 33595
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33555: LD_ADDR_VAR 0 6
33559: PUSH
33560: LD_VAR 0 6
33564: PPUSH
33565: LD_VAR 0 6
33569: PUSH
33570: LD_INT 1
33572: PLUS
33573: PPUSH
33574: LD_VAR 0 7
33578: PUSH
33579: LD_VAR 0 9
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PPUSH
33588: CALL_OW 2
33592: ST_TO_ADDR
33593: GO 33675
// for j = 1 to result do
33595: LD_ADDR_VAR 0 8
33599: PUSH
33600: DOUBLE
33601: LD_INT 1
33603: DEC
33604: ST_TO_ADDR
33605: LD_VAR 0 6
33609: PUSH
33610: FOR_TO
33611: IFFALSE 33673
// begin if tmp < result [ j ] [ 2 ] then
33613: LD_VAR 0 9
33617: PUSH
33618: LD_VAR 0 6
33622: PUSH
33623: LD_VAR 0 8
33627: ARRAY
33628: PUSH
33629: LD_INT 2
33631: ARRAY
33632: LESS
33633: IFFALSE 33671
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33635: LD_ADDR_VAR 0 6
33639: PUSH
33640: LD_VAR 0 6
33644: PPUSH
33645: LD_VAR 0 8
33649: PPUSH
33650: LD_VAR 0 7
33654: PUSH
33655: LD_VAR 0 9
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PPUSH
33664: CALL_OW 2
33668: ST_TO_ADDR
// break ;
33669: GO 33673
// end ; end ;
33671: GO 33610
33673: POP
33674: POP
// end ; end ;
33675: GO 33474
33677: POP
33678: POP
// if result and not asc then
33679: LD_VAR 0 6
33683: PUSH
33684: LD_VAR 0 4
33688: NOT
33689: AND
33690: IFFALSE 33765
// begin tmp := result ;
33692: LD_ADDR_VAR 0 9
33696: PUSH
33697: LD_VAR 0 6
33701: ST_TO_ADDR
// for i = tmp downto 1 do
33702: LD_ADDR_VAR 0 7
33706: PUSH
33707: DOUBLE
33708: LD_VAR 0 9
33712: INC
33713: ST_TO_ADDR
33714: LD_INT 1
33716: PUSH
33717: FOR_DOWNTO
33718: IFFALSE 33763
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33720: LD_ADDR_VAR 0 6
33724: PUSH
33725: LD_VAR 0 6
33729: PPUSH
33730: LD_VAR 0 9
33734: PUSH
33735: LD_VAR 0 7
33739: MINUS
33740: PUSH
33741: LD_INT 1
33743: PLUS
33744: PPUSH
33745: LD_VAR 0 9
33749: PUSH
33750: LD_VAR 0 7
33754: ARRAY
33755: PPUSH
33756: CALL_OW 1
33760: ST_TO_ADDR
33761: GO 33717
33763: POP
33764: POP
// end ; tmp := [ ] ;
33765: LD_ADDR_VAR 0 9
33769: PUSH
33770: EMPTY
33771: ST_TO_ADDR
// if mode then
33772: LD_VAR 0 5
33776: IFFALSE 33845
// begin for i = 1 to result do
33778: LD_ADDR_VAR 0 7
33782: PUSH
33783: DOUBLE
33784: LD_INT 1
33786: DEC
33787: ST_TO_ADDR
33788: LD_VAR 0 6
33792: PUSH
33793: FOR_TO
33794: IFFALSE 33833
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33796: LD_ADDR_VAR 0 9
33800: PUSH
33801: LD_VAR 0 9
33805: PPUSH
33806: LD_VAR 0 7
33810: PPUSH
33811: LD_VAR 0 6
33815: PUSH
33816: LD_VAR 0 7
33820: ARRAY
33821: PUSH
33822: LD_INT 1
33824: ARRAY
33825: PPUSH
33826: CALL_OW 1
33830: ST_TO_ADDR
33831: GO 33793
33833: POP
33834: POP
// result := tmp ;
33835: LD_ADDR_VAR 0 6
33839: PUSH
33840: LD_VAR 0 9
33844: ST_TO_ADDR
// end ; end ;
33845: LD_VAR 0 6
33849: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33850: LD_INT 0
33852: PPUSH
33853: PPUSH
33854: PPUSH
33855: PPUSH
33856: PPUSH
33857: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33858: LD_ADDR_VAR 0 5
33862: PUSH
33863: LD_INT 0
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: LD_INT 0
33871: PUSH
33872: EMPTY
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: ST_TO_ADDR
// if not x or not y then
33880: LD_VAR 0 2
33884: NOT
33885: PUSH
33886: LD_VAR 0 3
33890: NOT
33891: OR
33892: IFFALSE 33896
// exit ;
33894: GO 35548
// if not range then
33896: LD_VAR 0 4
33900: NOT
33901: IFFALSE 33911
// range := 10 ;
33903: LD_ADDR_VAR 0 4
33907: PUSH
33908: LD_INT 10
33910: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33911: LD_ADDR_VAR 0 8
33915: PUSH
33916: LD_INT 81
33918: PUSH
33919: LD_VAR 0 1
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 92
33930: PUSH
33931: LD_VAR 0 2
33935: PUSH
33936: LD_VAR 0 3
33940: PUSH
33941: LD_VAR 0 4
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 3
33954: PUSH
33955: LD_INT 21
33957: PUSH
33958: LD_INT 3
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: LIST
33973: PPUSH
33974: CALL_OW 69
33978: ST_TO_ADDR
// if not tmp then
33979: LD_VAR 0 8
33983: NOT
33984: IFFALSE 33988
// exit ;
33986: GO 35548
// for i in tmp do
33988: LD_ADDR_VAR 0 6
33992: PUSH
33993: LD_VAR 0 8
33997: PUSH
33998: FOR_IN
33999: IFFALSE 35523
// begin points := [ 0 , 0 , 0 ] ;
34001: LD_ADDR_VAR 0 9
34005: PUSH
34006: LD_INT 0
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: LD_INT 0
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: LIST
34019: ST_TO_ADDR
// bpoints := 1 ;
34020: LD_ADDR_VAR 0 10
34024: PUSH
34025: LD_INT 1
34027: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34028: LD_VAR 0 6
34032: PPUSH
34033: CALL_OW 247
34037: PUSH
34038: LD_INT 1
34040: DOUBLE
34041: EQUAL
34042: IFTRUE 34046
34044: GO 34624
34046: POP
// begin if GetClass ( i ) = 1 then
34047: LD_VAR 0 6
34051: PPUSH
34052: CALL_OW 257
34056: PUSH
34057: LD_INT 1
34059: EQUAL
34060: IFFALSE 34081
// points := [ 10 , 5 , 3 ] ;
34062: LD_ADDR_VAR 0 9
34066: PUSH
34067: LD_INT 10
34069: PUSH
34070: LD_INT 5
34072: PUSH
34073: LD_INT 3
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: LIST
34080: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34081: LD_VAR 0 6
34085: PPUSH
34086: CALL_OW 257
34090: PUSH
34091: LD_INT 2
34093: PUSH
34094: LD_INT 3
34096: PUSH
34097: LD_INT 4
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: LIST
34104: IN
34105: IFFALSE 34126
// points := [ 3 , 2 , 1 ] ;
34107: LD_ADDR_VAR 0 9
34111: PUSH
34112: LD_INT 3
34114: PUSH
34115: LD_INT 2
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: LIST
34125: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34126: LD_VAR 0 6
34130: PPUSH
34131: CALL_OW 257
34135: PUSH
34136: LD_INT 5
34138: EQUAL
34139: IFFALSE 34160
// points := [ 130 , 5 , 2 ] ;
34141: LD_ADDR_VAR 0 9
34145: PUSH
34146: LD_INT 130
34148: PUSH
34149: LD_INT 5
34151: PUSH
34152: LD_INT 2
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: LIST
34159: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34160: LD_VAR 0 6
34164: PPUSH
34165: CALL_OW 257
34169: PUSH
34170: LD_INT 8
34172: EQUAL
34173: IFFALSE 34194
// points := [ 35 , 35 , 30 ] ;
34175: LD_ADDR_VAR 0 9
34179: PUSH
34180: LD_INT 35
34182: PUSH
34183: LD_INT 35
34185: PUSH
34186: LD_INT 30
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: LIST
34193: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34194: LD_VAR 0 6
34198: PPUSH
34199: CALL_OW 257
34203: PUSH
34204: LD_INT 9
34206: EQUAL
34207: IFFALSE 34228
// points := [ 20 , 55 , 40 ] ;
34209: LD_ADDR_VAR 0 9
34213: PUSH
34214: LD_INT 20
34216: PUSH
34217: LD_INT 55
34219: PUSH
34220: LD_INT 40
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: LIST
34227: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34228: LD_VAR 0 6
34232: PPUSH
34233: CALL_OW 257
34237: PUSH
34238: LD_INT 12
34240: PUSH
34241: LD_INT 16
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: IN
34248: IFFALSE 34269
// points := [ 5 , 3 , 2 ] ;
34250: LD_ADDR_VAR 0 9
34254: PUSH
34255: LD_INT 5
34257: PUSH
34258: LD_INT 3
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: LIST
34268: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34269: LD_VAR 0 6
34273: PPUSH
34274: CALL_OW 257
34278: PUSH
34279: LD_INT 17
34281: EQUAL
34282: IFFALSE 34303
// points := [ 100 , 50 , 75 ] ;
34284: LD_ADDR_VAR 0 9
34288: PUSH
34289: LD_INT 100
34291: PUSH
34292: LD_INT 50
34294: PUSH
34295: LD_INT 75
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: LIST
34302: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34303: LD_VAR 0 6
34307: PPUSH
34308: CALL_OW 257
34312: PUSH
34313: LD_INT 15
34315: EQUAL
34316: IFFALSE 34337
// points := [ 10 , 5 , 3 ] ;
34318: LD_ADDR_VAR 0 9
34322: PUSH
34323: LD_INT 10
34325: PUSH
34326: LD_INT 5
34328: PUSH
34329: LD_INT 3
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: LIST
34336: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34337: LD_VAR 0 6
34341: PPUSH
34342: CALL_OW 257
34346: PUSH
34347: LD_INT 14
34349: EQUAL
34350: IFFALSE 34371
// points := [ 10 , 0 , 0 ] ;
34352: LD_ADDR_VAR 0 9
34356: PUSH
34357: LD_INT 10
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: LIST
34370: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34371: LD_VAR 0 6
34375: PPUSH
34376: CALL_OW 257
34380: PUSH
34381: LD_INT 11
34383: EQUAL
34384: IFFALSE 34405
// points := [ 30 , 10 , 5 ] ;
34386: LD_ADDR_VAR 0 9
34390: PUSH
34391: LD_INT 30
34393: PUSH
34394: LD_INT 10
34396: PUSH
34397: LD_INT 5
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: LIST
34404: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34405: LD_VAR 0 1
34409: PPUSH
34410: LD_INT 5
34412: PPUSH
34413: CALL_OW 321
34417: PUSH
34418: LD_INT 2
34420: EQUAL
34421: IFFALSE 34438
// bpoints := bpoints * 1.8 ;
34423: LD_ADDR_VAR 0 10
34427: PUSH
34428: LD_VAR 0 10
34432: PUSH
34433: LD_REAL  1.80000000000000E+0000
34436: MUL
34437: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34438: LD_VAR 0 6
34442: PPUSH
34443: CALL_OW 257
34447: PUSH
34448: LD_INT 1
34450: PUSH
34451: LD_INT 2
34453: PUSH
34454: LD_INT 3
34456: PUSH
34457: LD_INT 4
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: IN
34466: PUSH
34467: LD_VAR 0 1
34471: PPUSH
34472: LD_INT 51
34474: PPUSH
34475: CALL_OW 321
34479: PUSH
34480: LD_INT 2
34482: EQUAL
34483: AND
34484: IFFALSE 34501
// bpoints := bpoints * 1.2 ;
34486: LD_ADDR_VAR 0 10
34490: PUSH
34491: LD_VAR 0 10
34495: PUSH
34496: LD_REAL  1.20000000000000E+0000
34499: MUL
34500: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34501: LD_VAR 0 6
34505: PPUSH
34506: CALL_OW 257
34510: PUSH
34511: LD_INT 5
34513: PUSH
34514: LD_INT 7
34516: PUSH
34517: LD_INT 9
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: LIST
34524: IN
34525: PUSH
34526: LD_VAR 0 1
34530: PPUSH
34531: LD_INT 52
34533: PPUSH
34534: CALL_OW 321
34538: PUSH
34539: LD_INT 2
34541: EQUAL
34542: AND
34543: IFFALSE 34560
// bpoints := bpoints * 1.5 ;
34545: LD_ADDR_VAR 0 10
34549: PUSH
34550: LD_VAR 0 10
34554: PUSH
34555: LD_REAL  1.50000000000000E+0000
34558: MUL
34559: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34560: LD_VAR 0 1
34564: PPUSH
34565: LD_INT 66
34567: PPUSH
34568: CALL_OW 321
34572: PUSH
34573: LD_INT 2
34575: EQUAL
34576: IFFALSE 34593
// bpoints := bpoints * 1.1 ;
34578: LD_ADDR_VAR 0 10
34582: PUSH
34583: LD_VAR 0 10
34587: PUSH
34588: LD_REAL  1.10000000000000E+0000
34591: MUL
34592: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34593: LD_ADDR_VAR 0 10
34597: PUSH
34598: LD_VAR 0 10
34602: PUSH
34603: LD_VAR 0 6
34607: PPUSH
34608: LD_INT 1
34610: PPUSH
34611: CALL_OW 259
34615: PUSH
34616: LD_REAL  1.15000000000000E+0000
34619: MUL
34620: MUL
34621: ST_TO_ADDR
// end ; unit_vehicle :
34622: GO 35452
34624: LD_INT 2
34626: DOUBLE
34627: EQUAL
34628: IFTRUE 34632
34630: GO 35440
34632: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34633: LD_VAR 0 6
34637: PPUSH
34638: CALL_OW 264
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: LD_INT 42
34648: PUSH
34649: LD_INT 24
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: LIST
34656: IN
34657: IFFALSE 34678
// points := [ 25 , 5 , 3 ] ;
34659: LD_ADDR_VAR 0 9
34663: PUSH
34664: LD_INT 25
34666: PUSH
34667: LD_INT 5
34669: PUSH
34670: LD_INT 3
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34678: LD_VAR 0 6
34682: PPUSH
34683: CALL_OW 264
34687: PUSH
34688: LD_INT 4
34690: PUSH
34691: LD_INT 43
34693: PUSH
34694: LD_INT 25
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: LIST
34701: IN
34702: IFFALSE 34723
// points := [ 40 , 15 , 5 ] ;
34704: LD_ADDR_VAR 0 9
34708: PUSH
34709: LD_INT 40
34711: PUSH
34712: LD_INT 15
34714: PUSH
34715: LD_INT 5
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: LIST
34722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34723: LD_VAR 0 6
34727: PPUSH
34728: CALL_OW 264
34732: PUSH
34733: LD_INT 3
34735: PUSH
34736: LD_INT 23
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: IN
34743: IFFALSE 34764
// points := [ 7 , 25 , 8 ] ;
34745: LD_ADDR_VAR 0 9
34749: PUSH
34750: LD_INT 7
34752: PUSH
34753: LD_INT 25
34755: PUSH
34756: LD_INT 8
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: LIST
34763: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34764: LD_VAR 0 6
34768: PPUSH
34769: CALL_OW 264
34773: PUSH
34774: LD_INT 5
34776: PUSH
34777: LD_INT 27
34779: PUSH
34780: LD_INT 44
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: LIST
34787: IN
34788: IFFALSE 34809
// points := [ 14 , 50 , 16 ] ;
34790: LD_ADDR_VAR 0 9
34794: PUSH
34795: LD_INT 14
34797: PUSH
34798: LD_INT 50
34800: PUSH
34801: LD_INT 16
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: LIST
34808: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34809: LD_VAR 0 6
34813: PPUSH
34814: CALL_OW 264
34818: PUSH
34819: LD_INT 6
34821: PUSH
34822: LD_INT 46
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: IN
34829: IFFALSE 34850
// points := [ 32 , 120 , 70 ] ;
34831: LD_ADDR_VAR 0 9
34835: PUSH
34836: LD_INT 32
34838: PUSH
34839: LD_INT 120
34841: PUSH
34842: LD_INT 70
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34850: LD_VAR 0 6
34854: PPUSH
34855: CALL_OW 264
34859: PUSH
34860: LD_INT 7
34862: PUSH
34863: LD_INT 28
34865: PUSH
34866: LD_INT 45
34868: PUSH
34869: LD_EXP 24
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: IN
34880: IFFALSE 34901
// points := [ 35 , 20 , 45 ] ;
34882: LD_ADDR_VAR 0 9
34886: PUSH
34887: LD_INT 35
34889: PUSH
34890: LD_INT 20
34892: PUSH
34893: LD_INT 45
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: LIST
34900: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34901: LD_VAR 0 6
34905: PPUSH
34906: CALL_OW 264
34910: PUSH
34911: LD_INT 47
34913: PUSH
34914: EMPTY
34915: LIST
34916: IN
34917: IFFALSE 34938
// points := [ 67 , 45 , 75 ] ;
34919: LD_ADDR_VAR 0 9
34923: PUSH
34924: LD_INT 67
34926: PUSH
34927: LD_INT 45
34929: PUSH
34930: LD_INT 75
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: LIST
34937: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34938: LD_VAR 0 6
34942: PPUSH
34943: CALL_OW 264
34947: PUSH
34948: LD_INT 26
34950: PUSH
34951: EMPTY
34952: LIST
34953: IN
34954: IFFALSE 34975
// points := [ 120 , 30 , 80 ] ;
34956: LD_ADDR_VAR 0 9
34960: PUSH
34961: LD_INT 120
34963: PUSH
34964: LD_INT 30
34966: PUSH
34967: LD_INT 80
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: LIST
34974: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34975: LD_VAR 0 6
34979: PPUSH
34980: CALL_OW 264
34984: PUSH
34985: LD_INT 22
34987: PUSH
34988: EMPTY
34989: LIST
34990: IN
34991: IFFALSE 35012
// points := [ 40 , 1 , 1 ] ;
34993: LD_ADDR_VAR 0 9
34997: PUSH
34998: LD_INT 40
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: LD_INT 1
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: LIST
35011: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35012: LD_VAR 0 6
35016: PPUSH
35017: CALL_OW 264
35021: PUSH
35022: LD_INT 29
35024: PUSH
35025: EMPTY
35026: LIST
35027: IN
35028: IFFALSE 35049
// points := [ 70 , 200 , 400 ] ;
35030: LD_ADDR_VAR 0 9
35034: PUSH
35035: LD_INT 70
35037: PUSH
35038: LD_INT 200
35040: PUSH
35041: LD_INT 400
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: LIST
35048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35049: LD_VAR 0 6
35053: PPUSH
35054: CALL_OW 264
35058: PUSH
35059: LD_INT 14
35061: PUSH
35062: LD_INT 53
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: IN
35069: IFFALSE 35090
// points := [ 40 , 10 , 20 ] ;
35071: LD_ADDR_VAR 0 9
35075: PUSH
35076: LD_INT 40
35078: PUSH
35079: LD_INT 10
35081: PUSH
35082: LD_INT 20
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: LIST
35089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35090: LD_VAR 0 6
35094: PPUSH
35095: CALL_OW 264
35099: PUSH
35100: LD_INT 9
35102: PUSH
35103: EMPTY
35104: LIST
35105: IN
35106: IFFALSE 35127
// points := [ 5 , 70 , 20 ] ;
35108: LD_ADDR_VAR 0 9
35112: PUSH
35113: LD_INT 5
35115: PUSH
35116: LD_INT 70
35118: PUSH
35119: LD_INT 20
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: LIST
35126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35127: LD_VAR 0 6
35131: PPUSH
35132: CALL_OW 264
35136: PUSH
35137: LD_INT 10
35139: PUSH
35140: EMPTY
35141: LIST
35142: IN
35143: IFFALSE 35164
// points := [ 35 , 110 , 70 ] ;
35145: LD_ADDR_VAR 0 9
35149: PUSH
35150: LD_INT 35
35152: PUSH
35153: LD_INT 110
35155: PUSH
35156: LD_INT 70
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: LIST
35163: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35164: LD_VAR 0 6
35168: PPUSH
35169: CALL_OW 265
35173: PUSH
35174: LD_INT 25
35176: EQUAL
35177: IFFALSE 35198
// points := [ 80 , 65 , 100 ] ;
35179: LD_ADDR_VAR 0 9
35183: PUSH
35184: LD_INT 80
35186: PUSH
35187: LD_INT 65
35189: PUSH
35190: LD_INT 100
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: LIST
35197: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35198: LD_VAR 0 6
35202: PPUSH
35203: CALL_OW 263
35207: PUSH
35208: LD_INT 1
35210: EQUAL
35211: IFFALSE 35246
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35213: LD_ADDR_VAR 0 10
35217: PUSH
35218: LD_VAR 0 10
35222: PUSH
35223: LD_VAR 0 6
35227: PPUSH
35228: CALL_OW 311
35232: PPUSH
35233: LD_INT 3
35235: PPUSH
35236: CALL_OW 259
35240: PUSH
35241: LD_INT 4
35243: MUL
35244: MUL
35245: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35246: LD_VAR 0 6
35250: PPUSH
35251: CALL_OW 263
35255: PUSH
35256: LD_INT 2
35258: EQUAL
35259: IFFALSE 35310
// begin j := IsControledBy ( i ) ;
35261: LD_ADDR_VAR 0 7
35265: PUSH
35266: LD_VAR 0 6
35270: PPUSH
35271: CALL_OW 312
35275: ST_TO_ADDR
// if j then
35276: LD_VAR 0 7
35280: IFFALSE 35310
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35282: LD_ADDR_VAR 0 10
35286: PUSH
35287: LD_VAR 0 10
35291: PUSH
35292: LD_VAR 0 7
35296: PPUSH
35297: LD_INT 3
35299: PPUSH
35300: CALL_OW 259
35304: PUSH
35305: LD_INT 3
35307: MUL
35308: MUL
35309: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35310: LD_VAR 0 6
35314: PPUSH
35315: CALL_OW 264
35319: PUSH
35320: LD_INT 5
35322: PUSH
35323: LD_INT 6
35325: PUSH
35326: LD_INT 46
35328: PUSH
35329: LD_INT 44
35331: PUSH
35332: LD_INT 47
35334: PUSH
35335: LD_INT 45
35337: PUSH
35338: LD_INT 28
35340: PUSH
35341: LD_INT 7
35343: PUSH
35344: LD_INT 27
35346: PUSH
35347: LD_INT 29
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: IN
35362: PUSH
35363: LD_VAR 0 1
35367: PPUSH
35368: LD_INT 52
35370: PPUSH
35371: CALL_OW 321
35375: PUSH
35376: LD_INT 2
35378: EQUAL
35379: AND
35380: IFFALSE 35397
// bpoints := bpoints * 1.2 ;
35382: LD_ADDR_VAR 0 10
35386: PUSH
35387: LD_VAR 0 10
35391: PUSH
35392: LD_REAL  1.20000000000000E+0000
35395: MUL
35396: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35397: LD_VAR 0 6
35401: PPUSH
35402: CALL_OW 264
35406: PUSH
35407: LD_INT 6
35409: PUSH
35410: LD_INT 46
35412: PUSH
35413: LD_INT 47
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: IN
35421: IFFALSE 35438
// bpoints := bpoints * 1.2 ;
35423: LD_ADDR_VAR 0 10
35427: PUSH
35428: LD_VAR 0 10
35432: PUSH
35433: LD_REAL  1.20000000000000E+0000
35436: MUL
35437: ST_TO_ADDR
// end ; unit_building :
35438: GO 35452
35440: LD_INT 3
35442: DOUBLE
35443: EQUAL
35444: IFTRUE 35448
35446: GO 35451
35448: POP
// ; end ;
35449: GO 35452
35451: POP
// for j = 1 to 3 do
35452: LD_ADDR_VAR 0 7
35456: PUSH
35457: DOUBLE
35458: LD_INT 1
35460: DEC
35461: ST_TO_ADDR
35462: LD_INT 3
35464: PUSH
35465: FOR_TO
35466: IFFALSE 35519
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35468: LD_ADDR_VAR 0 5
35472: PUSH
35473: LD_VAR 0 5
35477: PPUSH
35478: LD_VAR 0 7
35482: PPUSH
35483: LD_VAR 0 5
35487: PUSH
35488: LD_VAR 0 7
35492: ARRAY
35493: PUSH
35494: LD_VAR 0 9
35498: PUSH
35499: LD_VAR 0 7
35503: ARRAY
35504: PUSH
35505: LD_VAR 0 10
35509: MUL
35510: PLUS
35511: PPUSH
35512: CALL_OW 1
35516: ST_TO_ADDR
35517: GO 35465
35519: POP
35520: POP
// end ;
35521: GO 33998
35523: POP
35524: POP
// result := Replace ( result , 4 , tmp ) ;
35525: LD_ADDR_VAR 0 5
35529: PUSH
35530: LD_VAR 0 5
35534: PPUSH
35535: LD_INT 4
35537: PPUSH
35538: LD_VAR 0 8
35542: PPUSH
35543: CALL_OW 1
35547: ST_TO_ADDR
// end ;
35548: LD_VAR 0 5
35552: RET
// export function DangerAtRange ( unit , range ) ; begin
35553: LD_INT 0
35555: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35556: LD_ADDR_VAR 0 3
35560: PUSH
35561: LD_VAR 0 1
35565: PPUSH
35566: CALL_OW 255
35570: PPUSH
35571: LD_VAR 0 1
35575: PPUSH
35576: CALL_OW 250
35580: PPUSH
35581: LD_VAR 0 1
35585: PPUSH
35586: CALL_OW 251
35590: PPUSH
35591: LD_VAR 0 2
35595: PPUSH
35596: CALL 33850 0 4
35600: ST_TO_ADDR
// end ;
35601: LD_VAR 0 3
35605: RET
// export function DangerInArea ( side , area ) ; begin
35606: LD_INT 0
35608: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35609: LD_ADDR_VAR 0 3
35613: PUSH
35614: LD_VAR 0 2
35618: PPUSH
35619: LD_INT 81
35621: PUSH
35622: LD_VAR 0 1
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PPUSH
35631: CALL_OW 70
35635: ST_TO_ADDR
// end ;
35636: LD_VAR 0 3
35640: RET
// export function IsExtension ( b ) ; begin
35641: LD_INT 0
35643: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35644: LD_ADDR_VAR 0 2
35648: PUSH
35649: LD_VAR 0 1
35653: PUSH
35654: LD_INT 23
35656: PUSH
35657: LD_INT 20
35659: PUSH
35660: LD_INT 22
35662: PUSH
35663: LD_INT 17
35665: PUSH
35666: LD_INT 24
35668: PUSH
35669: LD_INT 21
35671: PUSH
35672: LD_INT 19
35674: PUSH
35675: LD_INT 16
35677: PUSH
35678: LD_INT 25
35680: PUSH
35681: LD_INT 18
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: IN
35696: ST_TO_ADDR
// end ;
35697: LD_VAR 0 2
35701: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35702: LD_INT 0
35704: PPUSH
35705: PPUSH
35706: PPUSH
// result := [ ] ;
35707: LD_ADDR_VAR 0 4
35711: PUSH
35712: EMPTY
35713: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35714: LD_ADDR_VAR 0 5
35718: PUSH
35719: LD_VAR 0 2
35723: PPUSH
35724: LD_INT 21
35726: PUSH
35727: LD_INT 3
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PPUSH
35734: CALL_OW 70
35738: ST_TO_ADDR
// if not tmp then
35739: LD_VAR 0 5
35743: NOT
35744: IFFALSE 35748
// exit ;
35746: GO 35812
// if checkLink then
35748: LD_VAR 0 3
35752: IFFALSE 35802
// begin for i in tmp do
35754: LD_ADDR_VAR 0 6
35758: PUSH
35759: LD_VAR 0 5
35763: PUSH
35764: FOR_IN
35765: IFFALSE 35800
// if GetBase ( i ) <> base then
35767: LD_VAR 0 6
35771: PPUSH
35772: CALL_OW 274
35776: PUSH
35777: LD_VAR 0 1
35781: NONEQUAL
35782: IFFALSE 35798
// ComLinkToBase ( base , i ) ;
35784: LD_VAR 0 1
35788: PPUSH
35789: LD_VAR 0 6
35793: PPUSH
35794: CALL_OW 169
35798: GO 35764
35800: POP
35801: POP
// end ; result := tmp ;
35802: LD_ADDR_VAR 0 4
35806: PUSH
35807: LD_VAR 0 5
35811: ST_TO_ADDR
// end ;
35812: LD_VAR 0 4
35816: RET
// export function ComComplete ( units , b ) ; var i ; begin
35817: LD_INT 0
35819: PPUSH
35820: PPUSH
// if not units then
35821: LD_VAR 0 1
35825: NOT
35826: IFFALSE 35830
// exit ;
35828: GO 35920
// for i in units do
35830: LD_ADDR_VAR 0 4
35834: PUSH
35835: LD_VAR 0 1
35839: PUSH
35840: FOR_IN
35841: IFFALSE 35918
// if BuildingStatus ( b ) = bs_build then
35843: LD_VAR 0 2
35847: PPUSH
35848: CALL_OW 461
35852: PUSH
35853: LD_INT 1
35855: EQUAL
35856: IFFALSE 35916
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35858: LD_VAR 0 4
35862: PPUSH
35863: LD_STRING h
35865: PUSH
35866: LD_VAR 0 2
35870: PPUSH
35871: CALL_OW 250
35875: PUSH
35876: LD_VAR 0 2
35880: PPUSH
35881: CALL_OW 251
35885: PUSH
35886: LD_VAR 0 2
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: PUSH
35909: EMPTY
35910: LIST
35911: PPUSH
35912: CALL_OW 446
35916: GO 35840
35918: POP
35919: POP
// end ;
35920: LD_VAR 0 3
35924: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35925: LD_INT 0
35927: PPUSH
35928: PPUSH
35929: PPUSH
35930: PPUSH
35931: PPUSH
35932: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35933: LD_VAR 0 1
35937: NOT
35938: PUSH
35939: LD_VAR 0 1
35943: PPUSH
35944: CALL_OW 263
35948: PUSH
35949: LD_INT 2
35951: NONEQUAL
35952: OR
35953: IFFALSE 35957
// exit ;
35955: GO 36273
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35957: LD_ADDR_VAR 0 6
35961: PUSH
35962: LD_INT 22
35964: PUSH
35965: LD_VAR 0 1
35969: PPUSH
35970: CALL_OW 255
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 2
35981: PUSH
35982: LD_INT 30
35984: PUSH
35985: LD_INT 36
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 34
35994: PUSH
35995: LD_INT 31
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PPUSH
36011: CALL_OW 69
36015: ST_TO_ADDR
// if not tmp then
36016: LD_VAR 0 6
36020: NOT
36021: IFFALSE 36025
// exit ;
36023: GO 36273
// result := [ ] ;
36025: LD_ADDR_VAR 0 2
36029: PUSH
36030: EMPTY
36031: ST_TO_ADDR
// for i in tmp do
36032: LD_ADDR_VAR 0 3
36036: PUSH
36037: LD_VAR 0 6
36041: PUSH
36042: FOR_IN
36043: IFFALSE 36114
// begin t := UnitsInside ( i ) ;
36045: LD_ADDR_VAR 0 4
36049: PUSH
36050: LD_VAR 0 3
36054: PPUSH
36055: CALL_OW 313
36059: ST_TO_ADDR
// if t then
36060: LD_VAR 0 4
36064: IFFALSE 36112
// for j in t do
36066: LD_ADDR_VAR 0 7
36070: PUSH
36071: LD_VAR 0 4
36075: PUSH
36076: FOR_IN
36077: IFFALSE 36110
// result := Replace ( result , result + 1 , j ) ;
36079: LD_ADDR_VAR 0 2
36083: PUSH
36084: LD_VAR 0 2
36088: PPUSH
36089: LD_VAR 0 2
36093: PUSH
36094: LD_INT 1
36096: PLUS
36097: PPUSH
36098: LD_VAR 0 7
36102: PPUSH
36103: CALL_OW 1
36107: ST_TO_ADDR
36108: GO 36076
36110: POP
36111: POP
// end ;
36112: GO 36042
36114: POP
36115: POP
// if not result then
36116: LD_VAR 0 2
36120: NOT
36121: IFFALSE 36125
// exit ;
36123: GO 36273
// mech := result [ 1 ] ;
36125: LD_ADDR_VAR 0 5
36129: PUSH
36130: LD_VAR 0 2
36134: PUSH
36135: LD_INT 1
36137: ARRAY
36138: ST_TO_ADDR
// if result > 1 then
36139: LD_VAR 0 2
36143: PUSH
36144: LD_INT 1
36146: GREATER
36147: IFFALSE 36259
// begin for i = 2 to result do
36149: LD_ADDR_VAR 0 3
36153: PUSH
36154: DOUBLE
36155: LD_INT 2
36157: DEC
36158: ST_TO_ADDR
36159: LD_VAR 0 2
36163: PUSH
36164: FOR_TO
36165: IFFALSE 36257
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36167: LD_ADDR_VAR 0 4
36171: PUSH
36172: LD_VAR 0 2
36176: PUSH
36177: LD_VAR 0 3
36181: ARRAY
36182: PPUSH
36183: LD_INT 3
36185: PPUSH
36186: CALL_OW 259
36190: PUSH
36191: LD_VAR 0 2
36195: PUSH
36196: LD_VAR 0 3
36200: ARRAY
36201: PPUSH
36202: CALL_OW 432
36206: MINUS
36207: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36208: LD_VAR 0 4
36212: PUSH
36213: LD_VAR 0 5
36217: PPUSH
36218: LD_INT 3
36220: PPUSH
36221: CALL_OW 259
36225: PUSH
36226: LD_VAR 0 5
36230: PPUSH
36231: CALL_OW 432
36235: MINUS
36236: GREATEREQUAL
36237: IFFALSE 36255
// mech := result [ i ] ;
36239: LD_ADDR_VAR 0 5
36243: PUSH
36244: LD_VAR 0 2
36248: PUSH
36249: LD_VAR 0 3
36253: ARRAY
36254: ST_TO_ADDR
// end ;
36255: GO 36164
36257: POP
36258: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36259: LD_VAR 0 1
36263: PPUSH
36264: LD_VAR 0 5
36268: PPUSH
36269: CALL_OW 135
// end ;
36273: LD_VAR 0 2
36277: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36278: LD_INT 0
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
36285: PPUSH
36286: PPUSH
36287: PPUSH
36288: PPUSH
36289: PPUSH
36290: PPUSH
36291: PPUSH
36292: PPUSH
// result := [ ] ;
36293: LD_ADDR_VAR 0 7
36297: PUSH
36298: EMPTY
36299: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36300: LD_VAR 0 1
36304: PPUSH
36305: CALL_OW 266
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: IN
36320: NOT
36321: IFFALSE 36325
// exit ;
36323: GO 37959
// if name then
36325: LD_VAR 0 3
36329: IFFALSE 36345
// SetBName ( base_dep , name ) ;
36331: LD_VAR 0 1
36335: PPUSH
36336: LD_VAR 0 3
36340: PPUSH
36341: CALL_OW 500
// base := GetBase ( base_dep ) ;
36345: LD_ADDR_VAR 0 15
36349: PUSH
36350: LD_VAR 0 1
36354: PPUSH
36355: CALL_OW 274
36359: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36360: LD_ADDR_VAR 0 16
36364: PUSH
36365: LD_VAR 0 1
36369: PPUSH
36370: CALL_OW 255
36374: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36375: LD_ADDR_VAR 0 17
36379: PUSH
36380: LD_VAR 0 1
36384: PPUSH
36385: CALL_OW 248
36389: ST_TO_ADDR
// if sources then
36390: LD_VAR 0 5
36394: IFFALSE 36441
// for i = 1 to 3 do
36396: LD_ADDR_VAR 0 8
36400: PUSH
36401: DOUBLE
36402: LD_INT 1
36404: DEC
36405: ST_TO_ADDR
36406: LD_INT 3
36408: PUSH
36409: FOR_TO
36410: IFFALSE 36439
// AddResourceType ( base , i , sources [ i ] ) ;
36412: LD_VAR 0 15
36416: PPUSH
36417: LD_VAR 0 8
36421: PPUSH
36422: LD_VAR 0 5
36426: PUSH
36427: LD_VAR 0 8
36431: ARRAY
36432: PPUSH
36433: CALL_OW 276
36437: GO 36409
36439: POP
36440: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36441: LD_ADDR_VAR 0 18
36445: PUSH
36446: LD_VAR 0 15
36450: PPUSH
36451: LD_VAR 0 2
36455: PPUSH
36456: LD_INT 1
36458: PPUSH
36459: CALL 35702 0 3
36463: ST_TO_ADDR
// InitHc ;
36464: CALL_OW 19
// InitUc ;
36468: CALL_OW 18
// uc_side := side ;
36472: LD_ADDR_OWVAR 20
36476: PUSH
36477: LD_VAR 0 16
36481: ST_TO_ADDR
// uc_nation := nation ;
36482: LD_ADDR_OWVAR 21
36486: PUSH
36487: LD_VAR 0 17
36491: ST_TO_ADDR
// if buildings then
36492: LD_VAR 0 18
36496: IFFALSE 37818
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36498: LD_ADDR_VAR 0 19
36502: PUSH
36503: LD_VAR 0 18
36507: PPUSH
36508: LD_INT 2
36510: PUSH
36511: LD_INT 30
36513: PUSH
36514: LD_INT 29
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 30
36523: PUSH
36524: LD_INT 30
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: PPUSH
36536: CALL_OW 72
36540: ST_TO_ADDR
// if tmp then
36541: LD_VAR 0 19
36545: IFFALSE 36593
// for i in tmp do
36547: LD_ADDR_VAR 0 8
36551: PUSH
36552: LD_VAR 0 19
36556: PUSH
36557: FOR_IN
36558: IFFALSE 36591
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36560: LD_VAR 0 8
36564: PPUSH
36565: CALL_OW 250
36569: PPUSH
36570: LD_VAR 0 8
36574: PPUSH
36575: CALL_OW 251
36579: PPUSH
36580: LD_VAR 0 16
36584: PPUSH
36585: CALL_OW 441
36589: GO 36557
36591: POP
36592: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36593: LD_VAR 0 18
36597: PPUSH
36598: LD_INT 2
36600: PUSH
36601: LD_INT 30
36603: PUSH
36604: LD_INT 32
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 30
36613: PUSH
36614: LD_INT 33
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: PPUSH
36626: CALL_OW 72
36630: IFFALSE 36718
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36632: LD_ADDR_VAR 0 8
36636: PUSH
36637: LD_VAR 0 18
36641: PPUSH
36642: LD_INT 2
36644: PUSH
36645: LD_INT 30
36647: PUSH
36648: LD_INT 32
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 30
36657: PUSH
36658: LD_INT 33
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: LIST
36669: PPUSH
36670: CALL_OW 72
36674: PUSH
36675: FOR_IN
36676: IFFALSE 36716
// begin if not GetBWeapon ( i ) then
36678: LD_VAR 0 8
36682: PPUSH
36683: CALL_OW 269
36687: NOT
36688: IFFALSE 36714
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36690: LD_VAR 0 8
36694: PPUSH
36695: LD_VAR 0 8
36699: PPUSH
36700: LD_VAR 0 2
36704: PPUSH
36705: CALL 37964 0 2
36709: PPUSH
36710: CALL_OW 431
// end ;
36714: GO 36675
36716: POP
36717: POP
// end ; for i = 1 to personel do
36718: LD_ADDR_VAR 0 8
36722: PUSH
36723: DOUBLE
36724: LD_INT 1
36726: DEC
36727: ST_TO_ADDR
36728: LD_VAR 0 6
36732: PUSH
36733: FOR_TO
36734: IFFALSE 37798
// begin if i > 4 then
36736: LD_VAR 0 8
36740: PUSH
36741: LD_INT 4
36743: GREATER
36744: IFFALSE 36748
// break ;
36746: GO 37798
// case i of 1 :
36748: LD_VAR 0 8
36752: PUSH
36753: LD_INT 1
36755: DOUBLE
36756: EQUAL
36757: IFTRUE 36761
36759: GO 36841
36761: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36762: LD_ADDR_VAR 0 12
36766: PUSH
36767: LD_VAR 0 18
36771: PPUSH
36772: LD_INT 22
36774: PUSH
36775: LD_VAR 0 16
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 58
36786: PUSH
36787: EMPTY
36788: LIST
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: LD_INT 30
36795: PUSH
36796: LD_INT 32
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 30
36805: PUSH
36806: LD_INT 4
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 30
36815: PUSH
36816: LD_INT 5
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: LIST
36833: PPUSH
36834: CALL_OW 72
36838: ST_TO_ADDR
36839: GO 37063
36841: LD_INT 2
36843: DOUBLE
36844: EQUAL
36845: IFTRUE 36849
36847: GO 36911
36849: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36850: LD_ADDR_VAR 0 12
36854: PUSH
36855: LD_VAR 0 18
36859: PPUSH
36860: LD_INT 22
36862: PUSH
36863: LD_VAR 0 16
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 2
36874: PUSH
36875: LD_INT 30
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 30
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PPUSH
36904: CALL_OW 72
36908: ST_TO_ADDR
36909: GO 37063
36911: LD_INT 3
36913: DOUBLE
36914: EQUAL
36915: IFTRUE 36919
36917: GO 36981
36919: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36920: LD_ADDR_VAR 0 12
36924: PUSH
36925: LD_VAR 0 18
36929: PPUSH
36930: LD_INT 22
36932: PUSH
36933: LD_VAR 0 16
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 2
36944: PUSH
36945: LD_INT 30
36947: PUSH
36948: LD_INT 2
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 30
36957: PUSH
36958: LD_INT 3
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: LIST
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PPUSH
36974: CALL_OW 72
36978: ST_TO_ADDR
36979: GO 37063
36981: LD_INT 4
36983: DOUBLE
36984: EQUAL
36985: IFTRUE 36989
36987: GO 37062
36989: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36990: LD_ADDR_VAR 0 12
36994: PUSH
36995: LD_VAR 0 18
36999: PPUSH
37000: LD_INT 22
37002: PUSH
37003: LD_VAR 0 16
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: PUSH
37015: LD_INT 30
37017: PUSH
37018: LD_INT 6
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 30
37027: PUSH
37028: LD_INT 7
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 30
37037: PUSH
37038: LD_INT 8
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PPUSH
37055: CALL_OW 72
37059: ST_TO_ADDR
37060: GO 37063
37062: POP
// if i = 1 then
37063: LD_VAR 0 8
37067: PUSH
37068: LD_INT 1
37070: EQUAL
37071: IFFALSE 37182
// begin tmp := [ ] ;
37073: LD_ADDR_VAR 0 19
37077: PUSH
37078: EMPTY
37079: ST_TO_ADDR
// for j in f do
37080: LD_ADDR_VAR 0 9
37084: PUSH
37085: LD_VAR 0 12
37089: PUSH
37090: FOR_IN
37091: IFFALSE 37164
// if GetBType ( j ) = b_bunker then
37093: LD_VAR 0 9
37097: PPUSH
37098: CALL_OW 266
37102: PUSH
37103: LD_INT 32
37105: EQUAL
37106: IFFALSE 37133
// tmp := Insert ( tmp , 1 , j ) else
37108: LD_ADDR_VAR 0 19
37112: PUSH
37113: LD_VAR 0 19
37117: PPUSH
37118: LD_INT 1
37120: PPUSH
37121: LD_VAR 0 9
37125: PPUSH
37126: CALL_OW 2
37130: ST_TO_ADDR
37131: GO 37162
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37133: LD_ADDR_VAR 0 19
37137: PUSH
37138: LD_VAR 0 19
37142: PPUSH
37143: LD_VAR 0 19
37147: PUSH
37148: LD_INT 1
37150: PLUS
37151: PPUSH
37152: LD_VAR 0 9
37156: PPUSH
37157: CALL_OW 2
37161: ST_TO_ADDR
37162: GO 37090
37164: POP
37165: POP
// if tmp then
37166: LD_VAR 0 19
37170: IFFALSE 37182
// f := tmp ;
37172: LD_ADDR_VAR 0 12
37176: PUSH
37177: LD_VAR 0 19
37181: ST_TO_ADDR
// end ; x := personel [ i ] ;
37182: LD_ADDR_VAR 0 13
37186: PUSH
37187: LD_VAR 0 6
37191: PUSH
37192: LD_VAR 0 8
37196: ARRAY
37197: ST_TO_ADDR
// if x = - 1 then
37198: LD_VAR 0 13
37202: PUSH
37203: LD_INT 1
37205: NEG
37206: EQUAL
37207: IFFALSE 37416
// begin for j in f do
37209: LD_ADDR_VAR 0 9
37213: PUSH
37214: LD_VAR 0 12
37218: PUSH
37219: FOR_IN
37220: IFFALSE 37412
// repeat InitHc ;
37222: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37226: LD_VAR 0 9
37230: PPUSH
37231: CALL_OW 266
37235: PUSH
37236: LD_INT 5
37238: EQUAL
37239: IFFALSE 37309
// begin if UnitsInside ( j ) < 3 then
37241: LD_VAR 0 9
37245: PPUSH
37246: CALL_OW 313
37250: PUSH
37251: LD_INT 3
37253: LESS
37254: IFFALSE 37290
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37256: LD_INT 0
37258: PPUSH
37259: LD_INT 5
37261: PUSH
37262: LD_INT 8
37264: PUSH
37265: LD_INT 9
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: LIST
37272: PUSH
37273: LD_VAR 0 17
37277: ARRAY
37278: PPUSH
37279: LD_VAR 0 4
37283: PPUSH
37284: CALL_OW 380
37288: GO 37307
// PrepareHuman ( false , i , skill ) ;
37290: LD_INT 0
37292: PPUSH
37293: LD_VAR 0 8
37297: PPUSH
37298: LD_VAR 0 4
37302: PPUSH
37303: CALL_OW 380
// end else
37307: GO 37326
// PrepareHuman ( false , i , skill ) ;
37309: LD_INT 0
37311: PPUSH
37312: LD_VAR 0 8
37316: PPUSH
37317: LD_VAR 0 4
37321: PPUSH
37322: CALL_OW 380
// un := CreateHuman ;
37326: LD_ADDR_VAR 0 14
37330: PUSH
37331: CALL_OW 44
37335: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37336: LD_ADDR_VAR 0 7
37340: PUSH
37341: LD_VAR 0 7
37345: PPUSH
37346: LD_INT 1
37348: PPUSH
37349: LD_VAR 0 14
37353: PPUSH
37354: CALL_OW 2
37358: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37359: LD_VAR 0 14
37363: PPUSH
37364: LD_VAR 0 9
37368: PPUSH
37369: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37373: LD_VAR 0 9
37377: PPUSH
37378: CALL_OW 313
37382: PUSH
37383: LD_INT 6
37385: EQUAL
37386: PUSH
37387: LD_VAR 0 9
37391: PPUSH
37392: CALL_OW 266
37396: PUSH
37397: LD_INT 32
37399: PUSH
37400: LD_INT 31
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: IN
37407: OR
37408: IFFALSE 37222
37410: GO 37219
37412: POP
37413: POP
// end else
37414: GO 37796
// for j = 1 to x do
37416: LD_ADDR_VAR 0 9
37420: PUSH
37421: DOUBLE
37422: LD_INT 1
37424: DEC
37425: ST_TO_ADDR
37426: LD_VAR 0 13
37430: PUSH
37431: FOR_TO
37432: IFFALSE 37794
// begin InitHc ;
37434: CALL_OW 19
// if not f then
37438: LD_VAR 0 12
37442: NOT
37443: IFFALSE 37532
// begin PrepareHuman ( false , i , skill ) ;
37445: LD_INT 0
37447: PPUSH
37448: LD_VAR 0 8
37452: PPUSH
37453: LD_VAR 0 4
37457: PPUSH
37458: CALL_OW 380
// un := CreateHuman ;
37462: LD_ADDR_VAR 0 14
37466: PUSH
37467: CALL_OW 44
37471: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37472: LD_ADDR_VAR 0 7
37476: PUSH
37477: LD_VAR 0 7
37481: PPUSH
37482: LD_INT 1
37484: PPUSH
37485: LD_VAR 0 14
37489: PPUSH
37490: CALL_OW 2
37494: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37495: LD_VAR 0 14
37499: PPUSH
37500: LD_VAR 0 1
37504: PPUSH
37505: CALL_OW 250
37509: PPUSH
37510: LD_VAR 0 1
37514: PPUSH
37515: CALL_OW 251
37519: PPUSH
37520: LD_INT 10
37522: PPUSH
37523: LD_INT 0
37525: PPUSH
37526: CALL_OW 50
// continue ;
37530: GO 37431
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37532: LD_VAR 0 12
37536: PUSH
37537: LD_INT 1
37539: ARRAY
37540: PPUSH
37541: CALL_OW 313
37545: PUSH
37546: LD_VAR 0 12
37550: PUSH
37551: LD_INT 1
37553: ARRAY
37554: PPUSH
37555: CALL_OW 266
37559: PUSH
37560: LD_INT 32
37562: PUSH
37563: LD_INT 31
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: IN
37570: AND
37571: PUSH
37572: LD_VAR 0 12
37576: PUSH
37577: LD_INT 1
37579: ARRAY
37580: PPUSH
37581: CALL_OW 313
37585: PUSH
37586: LD_INT 6
37588: EQUAL
37589: OR
37590: IFFALSE 37610
// f := Delete ( f , 1 ) ;
37592: LD_ADDR_VAR 0 12
37596: PUSH
37597: LD_VAR 0 12
37601: PPUSH
37602: LD_INT 1
37604: PPUSH
37605: CALL_OW 3
37609: ST_TO_ADDR
// if not f then
37610: LD_VAR 0 12
37614: NOT
37615: IFFALSE 37633
// begin x := x + 2 ;
37617: LD_ADDR_VAR 0 13
37621: PUSH
37622: LD_VAR 0 13
37626: PUSH
37627: LD_INT 2
37629: PLUS
37630: ST_TO_ADDR
// continue ;
37631: GO 37431
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37633: LD_VAR 0 12
37637: PUSH
37638: LD_INT 1
37640: ARRAY
37641: PPUSH
37642: CALL_OW 266
37646: PUSH
37647: LD_INT 5
37649: EQUAL
37650: IFFALSE 37724
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37652: LD_VAR 0 12
37656: PUSH
37657: LD_INT 1
37659: ARRAY
37660: PPUSH
37661: CALL_OW 313
37665: PUSH
37666: LD_INT 3
37668: LESS
37669: IFFALSE 37705
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37671: LD_INT 0
37673: PPUSH
37674: LD_INT 5
37676: PUSH
37677: LD_INT 8
37679: PUSH
37680: LD_INT 9
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: PUSH
37688: LD_VAR 0 17
37692: ARRAY
37693: PPUSH
37694: LD_VAR 0 4
37698: PPUSH
37699: CALL_OW 380
37703: GO 37722
// PrepareHuman ( false , i , skill ) ;
37705: LD_INT 0
37707: PPUSH
37708: LD_VAR 0 8
37712: PPUSH
37713: LD_VAR 0 4
37717: PPUSH
37718: CALL_OW 380
// end else
37722: GO 37741
// PrepareHuman ( false , i , skill ) ;
37724: LD_INT 0
37726: PPUSH
37727: LD_VAR 0 8
37731: PPUSH
37732: LD_VAR 0 4
37736: PPUSH
37737: CALL_OW 380
// un := CreateHuman ;
37741: LD_ADDR_VAR 0 14
37745: PUSH
37746: CALL_OW 44
37750: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37751: LD_ADDR_VAR 0 7
37755: PUSH
37756: LD_VAR 0 7
37760: PPUSH
37761: LD_INT 1
37763: PPUSH
37764: LD_VAR 0 14
37768: PPUSH
37769: CALL_OW 2
37773: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37774: LD_VAR 0 14
37778: PPUSH
37779: LD_VAR 0 12
37783: PUSH
37784: LD_INT 1
37786: ARRAY
37787: PPUSH
37788: CALL_OW 52
// end ;
37792: GO 37431
37794: POP
37795: POP
// end ;
37796: GO 36733
37798: POP
37799: POP
// result := result ^ buildings ;
37800: LD_ADDR_VAR 0 7
37804: PUSH
37805: LD_VAR 0 7
37809: PUSH
37810: LD_VAR 0 18
37814: ADD
37815: ST_TO_ADDR
// end else
37816: GO 37959
// begin for i = 1 to personel do
37818: LD_ADDR_VAR 0 8
37822: PUSH
37823: DOUBLE
37824: LD_INT 1
37826: DEC
37827: ST_TO_ADDR
37828: LD_VAR 0 6
37832: PUSH
37833: FOR_TO
37834: IFFALSE 37957
// begin if i > 4 then
37836: LD_VAR 0 8
37840: PUSH
37841: LD_INT 4
37843: GREATER
37844: IFFALSE 37848
// break ;
37846: GO 37957
// x := personel [ i ] ;
37848: LD_ADDR_VAR 0 13
37852: PUSH
37853: LD_VAR 0 6
37857: PUSH
37858: LD_VAR 0 8
37862: ARRAY
37863: ST_TO_ADDR
// if x = - 1 then
37864: LD_VAR 0 13
37868: PUSH
37869: LD_INT 1
37871: NEG
37872: EQUAL
37873: IFFALSE 37877
// continue ;
37875: GO 37833
// PrepareHuman ( false , i , skill ) ;
37877: LD_INT 0
37879: PPUSH
37880: LD_VAR 0 8
37884: PPUSH
37885: LD_VAR 0 4
37889: PPUSH
37890: CALL_OW 380
// un := CreateHuman ;
37894: LD_ADDR_VAR 0 14
37898: PUSH
37899: CALL_OW 44
37903: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37904: LD_VAR 0 14
37908: PPUSH
37909: LD_VAR 0 1
37913: PPUSH
37914: CALL_OW 250
37918: PPUSH
37919: LD_VAR 0 1
37923: PPUSH
37924: CALL_OW 251
37928: PPUSH
37929: LD_INT 10
37931: PPUSH
37932: LD_INT 0
37934: PPUSH
37935: CALL_OW 50
// result := result ^ un ;
37939: LD_ADDR_VAR 0 7
37943: PUSH
37944: LD_VAR 0 7
37948: PUSH
37949: LD_VAR 0 14
37953: ADD
37954: ST_TO_ADDR
// end ;
37955: GO 37833
37957: POP
37958: POP
// end ; end ;
37959: LD_VAR 0 7
37963: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37964: LD_INT 0
37966: PPUSH
37967: PPUSH
37968: PPUSH
37969: PPUSH
37970: PPUSH
37971: PPUSH
37972: PPUSH
37973: PPUSH
37974: PPUSH
37975: PPUSH
37976: PPUSH
37977: PPUSH
37978: PPUSH
37979: PPUSH
37980: PPUSH
37981: PPUSH
// result := false ;
37982: LD_ADDR_VAR 0 3
37986: PUSH
37987: LD_INT 0
37989: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37990: LD_VAR 0 1
37994: NOT
37995: PUSH
37996: LD_VAR 0 1
38000: PPUSH
38001: CALL_OW 266
38005: PUSH
38006: LD_INT 32
38008: PUSH
38009: LD_INT 33
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: IN
38016: NOT
38017: OR
38018: IFFALSE 38022
// exit ;
38020: GO 39131
// nat := GetNation ( tower ) ;
38022: LD_ADDR_VAR 0 12
38026: PUSH
38027: LD_VAR 0 1
38031: PPUSH
38032: CALL_OW 248
38036: ST_TO_ADDR
// side := GetSide ( tower ) ;
38037: LD_ADDR_VAR 0 16
38041: PUSH
38042: LD_VAR 0 1
38046: PPUSH
38047: CALL_OW 255
38051: ST_TO_ADDR
// x := GetX ( tower ) ;
38052: LD_ADDR_VAR 0 10
38056: PUSH
38057: LD_VAR 0 1
38061: PPUSH
38062: CALL_OW 250
38066: ST_TO_ADDR
// y := GetY ( tower ) ;
38067: LD_ADDR_VAR 0 11
38071: PUSH
38072: LD_VAR 0 1
38076: PPUSH
38077: CALL_OW 251
38081: ST_TO_ADDR
// if not x or not y then
38082: LD_VAR 0 10
38086: NOT
38087: PUSH
38088: LD_VAR 0 11
38092: NOT
38093: OR
38094: IFFALSE 38098
// exit ;
38096: GO 39131
// weapon := 0 ;
38098: LD_ADDR_VAR 0 18
38102: PUSH
38103: LD_INT 0
38105: ST_TO_ADDR
// fac_list := [ ] ;
38106: LD_ADDR_VAR 0 17
38110: PUSH
38111: EMPTY
38112: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38113: LD_ADDR_VAR 0 6
38117: PUSH
38118: LD_VAR 0 1
38122: PPUSH
38123: CALL_OW 274
38127: PPUSH
38128: LD_VAR 0 2
38132: PPUSH
38133: LD_INT 0
38135: PPUSH
38136: CALL 35702 0 3
38140: PPUSH
38141: LD_INT 30
38143: PUSH
38144: LD_INT 3
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PPUSH
38151: CALL_OW 72
38155: ST_TO_ADDR
// if not factories then
38156: LD_VAR 0 6
38160: NOT
38161: IFFALSE 38165
// exit ;
38163: GO 39131
// for i in factories do
38165: LD_ADDR_VAR 0 8
38169: PUSH
38170: LD_VAR 0 6
38174: PUSH
38175: FOR_IN
38176: IFFALSE 38201
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38178: LD_ADDR_VAR 0 17
38182: PUSH
38183: LD_VAR 0 17
38187: PUSH
38188: LD_VAR 0 8
38192: PPUSH
38193: CALL_OW 478
38197: UNION
38198: ST_TO_ADDR
38199: GO 38175
38201: POP
38202: POP
// if not fac_list then
38203: LD_VAR 0 17
38207: NOT
38208: IFFALSE 38212
// exit ;
38210: GO 39131
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38212: LD_ADDR_VAR 0 5
38216: PUSH
38217: LD_INT 4
38219: PUSH
38220: LD_INT 5
38222: PUSH
38223: LD_INT 9
38225: PUSH
38226: LD_INT 10
38228: PUSH
38229: LD_INT 6
38231: PUSH
38232: LD_INT 7
38234: PUSH
38235: LD_INT 11
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 27
38249: PUSH
38250: LD_INT 28
38252: PUSH
38253: LD_INT 26
38255: PUSH
38256: LD_INT 30
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 43
38267: PUSH
38268: LD_INT 44
38270: PUSH
38271: LD_INT 46
38273: PUSH
38274: LD_INT 45
38276: PUSH
38277: LD_INT 47
38279: PUSH
38280: LD_INT 49
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: LIST
38295: PUSH
38296: LD_VAR 0 12
38300: ARRAY
38301: ST_TO_ADDR
// list := list isect fac_list ;
38302: LD_ADDR_VAR 0 5
38306: PUSH
38307: LD_VAR 0 5
38311: PUSH
38312: LD_VAR 0 17
38316: ISECT
38317: ST_TO_ADDR
// if not list then
38318: LD_VAR 0 5
38322: NOT
38323: IFFALSE 38327
// exit ;
38325: GO 39131
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38327: LD_VAR 0 12
38331: PUSH
38332: LD_INT 3
38334: EQUAL
38335: PUSH
38336: LD_INT 49
38338: PUSH
38339: LD_VAR 0 5
38343: IN
38344: AND
38345: PUSH
38346: LD_INT 31
38348: PPUSH
38349: LD_VAR 0 16
38353: PPUSH
38354: CALL_OW 321
38358: PUSH
38359: LD_INT 2
38361: EQUAL
38362: AND
38363: IFFALSE 38423
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38365: LD_INT 22
38367: PUSH
38368: LD_VAR 0 16
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 35
38379: PUSH
38380: LD_INT 49
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 91
38389: PUSH
38390: LD_VAR 0 1
38394: PUSH
38395: LD_INT 10
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: LIST
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: LIST
38407: PPUSH
38408: CALL_OW 69
38412: NOT
38413: IFFALSE 38423
// weapon := ru_time_lapser ;
38415: LD_ADDR_VAR 0 18
38419: PUSH
38420: LD_INT 49
38422: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38423: LD_VAR 0 12
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: IN
38438: PUSH
38439: LD_INT 11
38441: PUSH
38442: LD_VAR 0 5
38446: IN
38447: PUSH
38448: LD_INT 30
38450: PUSH
38451: LD_VAR 0 5
38455: IN
38456: OR
38457: AND
38458: PUSH
38459: LD_INT 6
38461: PPUSH
38462: LD_VAR 0 16
38466: PPUSH
38467: CALL_OW 321
38471: PUSH
38472: LD_INT 2
38474: EQUAL
38475: AND
38476: IFFALSE 38641
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38478: LD_INT 22
38480: PUSH
38481: LD_VAR 0 16
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 2
38492: PUSH
38493: LD_INT 35
38495: PUSH
38496: LD_INT 11
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 35
38505: PUSH
38506: LD_INT 30
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 91
38520: PUSH
38521: LD_VAR 0 1
38525: PUSH
38526: LD_INT 18
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: LIST
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: LIST
38538: PPUSH
38539: CALL_OW 69
38543: NOT
38544: PUSH
38545: LD_INT 22
38547: PUSH
38548: LD_VAR 0 16
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 2
38559: PUSH
38560: LD_INT 30
38562: PUSH
38563: LD_INT 32
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 30
38572: PUSH
38573: LD_INT 33
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 91
38587: PUSH
38588: LD_VAR 0 1
38592: PUSH
38593: LD_INT 12
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: LIST
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: PUSH
38606: EMPTY
38607: LIST
38608: PPUSH
38609: CALL_OW 69
38613: PUSH
38614: LD_INT 2
38616: GREATER
38617: AND
38618: IFFALSE 38641
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38620: LD_ADDR_VAR 0 18
38624: PUSH
38625: LD_INT 11
38627: PUSH
38628: LD_INT 30
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_VAR 0 12
38639: ARRAY
38640: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38641: LD_VAR 0 18
38645: NOT
38646: PUSH
38647: LD_INT 40
38649: PPUSH
38650: LD_VAR 0 16
38654: PPUSH
38655: CALL_OW 321
38659: PUSH
38660: LD_INT 2
38662: EQUAL
38663: AND
38664: PUSH
38665: LD_INT 7
38667: PUSH
38668: LD_VAR 0 5
38672: IN
38673: PUSH
38674: LD_INT 28
38676: PUSH
38677: LD_VAR 0 5
38681: IN
38682: OR
38683: PUSH
38684: LD_INT 45
38686: PUSH
38687: LD_VAR 0 5
38691: IN
38692: OR
38693: AND
38694: IFFALSE 38948
// begin hex := GetHexInfo ( x , y ) ;
38696: LD_ADDR_VAR 0 4
38700: PUSH
38701: LD_VAR 0 10
38705: PPUSH
38706: LD_VAR 0 11
38710: PPUSH
38711: CALL_OW 546
38715: ST_TO_ADDR
// if hex [ 1 ] then
38716: LD_VAR 0 4
38720: PUSH
38721: LD_INT 1
38723: ARRAY
38724: IFFALSE 38728
// exit ;
38726: GO 39131
// height := hex [ 2 ] ;
38728: LD_ADDR_VAR 0 15
38732: PUSH
38733: LD_VAR 0 4
38737: PUSH
38738: LD_INT 2
38740: ARRAY
38741: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38742: LD_ADDR_VAR 0 14
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: LD_INT 2
38752: PUSH
38753: LD_INT 3
38755: PUSH
38756: LD_INT 5
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: ST_TO_ADDR
// for i in tmp do
38765: LD_ADDR_VAR 0 8
38769: PUSH
38770: LD_VAR 0 14
38774: PUSH
38775: FOR_IN
38776: IFFALSE 38946
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38778: LD_ADDR_VAR 0 9
38782: PUSH
38783: LD_VAR 0 10
38787: PPUSH
38788: LD_VAR 0 8
38792: PPUSH
38793: LD_INT 5
38795: PPUSH
38796: CALL_OW 272
38800: PUSH
38801: LD_VAR 0 11
38805: PPUSH
38806: LD_VAR 0 8
38810: PPUSH
38811: LD_INT 5
38813: PPUSH
38814: CALL_OW 273
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38823: LD_VAR 0 9
38827: PUSH
38828: LD_INT 1
38830: ARRAY
38831: PPUSH
38832: LD_VAR 0 9
38836: PUSH
38837: LD_INT 2
38839: ARRAY
38840: PPUSH
38841: CALL_OW 488
38845: IFFALSE 38944
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38847: LD_ADDR_VAR 0 4
38851: PUSH
38852: LD_VAR 0 9
38856: PUSH
38857: LD_INT 1
38859: ARRAY
38860: PPUSH
38861: LD_VAR 0 9
38865: PUSH
38866: LD_INT 2
38868: ARRAY
38869: PPUSH
38870: CALL_OW 546
38874: ST_TO_ADDR
// if hex [ 1 ] then
38875: LD_VAR 0 4
38879: PUSH
38880: LD_INT 1
38882: ARRAY
38883: IFFALSE 38887
// continue ;
38885: GO 38775
// h := hex [ 2 ] ;
38887: LD_ADDR_VAR 0 13
38891: PUSH
38892: LD_VAR 0 4
38896: PUSH
38897: LD_INT 2
38899: ARRAY
38900: ST_TO_ADDR
// if h + 7 < height then
38901: LD_VAR 0 13
38905: PUSH
38906: LD_INT 7
38908: PLUS
38909: PUSH
38910: LD_VAR 0 15
38914: LESS
38915: IFFALSE 38944
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38917: LD_ADDR_VAR 0 18
38921: PUSH
38922: LD_INT 7
38924: PUSH
38925: LD_INT 28
38927: PUSH
38928: LD_INT 45
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: LIST
38935: PUSH
38936: LD_VAR 0 12
38940: ARRAY
38941: ST_TO_ADDR
// break ;
38942: GO 38946
// end ; end ; end ;
38944: GO 38775
38946: POP
38947: POP
// end ; if not weapon then
38948: LD_VAR 0 18
38952: NOT
38953: IFFALSE 39013
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38955: LD_ADDR_VAR 0 5
38959: PUSH
38960: LD_VAR 0 5
38964: PUSH
38965: LD_INT 11
38967: PUSH
38968: LD_INT 30
38970: PUSH
38971: LD_INT 49
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: LIST
38978: DIFF
38979: ST_TO_ADDR
// if not list then
38980: LD_VAR 0 5
38984: NOT
38985: IFFALSE 38989
// exit ;
38987: GO 39131
// weapon := list [ rand ( 1 , list ) ] ;
38989: LD_ADDR_VAR 0 18
38993: PUSH
38994: LD_VAR 0 5
38998: PUSH
38999: LD_INT 1
39001: PPUSH
39002: LD_VAR 0 5
39006: PPUSH
39007: CALL_OW 12
39011: ARRAY
39012: ST_TO_ADDR
// end ; if weapon then
39013: LD_VAR 0 18
39017: IFFALSE 39131
// begin tmp := CostOfWeapon ( weapon ) ;
39019: LD_ADDR_VAR 0 14
39023: PUSH
39024: LD_VAR 0 18
39028: PPUSH
39029: CALL_OW 451
39033: ST_TO_ADDR
// j := GetBase ( tower ) ;
39034: LD_ADDR_VAR 0 9
39038: PUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: CALL_OW 274
39048: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39049: LD_VAR 0 9
39053: PPUSH
39054: LD_INT 1
39056: PPUSH
39057: CALL_OW 275
39061: PUSH
39062: LD_VAR 0 14
39066: PUSH
39067: LD_INT 1
39069: ARRAY
39070: GREATEREQUAL
39071: PUSH
39072: LD_VAR 0 9
39076: PPUSH
39077: LD_INT 2
39079: PPUSH
39080: CALL_OW 275
39084: PUSH
39085: LD_VAR 0 14
39089: PUSH
39090: LD_INT 2
39092: ARRAY
39093: GREATEREQUAL
39094: AND
39095: PUSH
39096: LD_VAR 0 9
39100: PPUSH
39101: LD_INT 3
39103: PPUSH
39104: CALL_OW 275
39108: PUSH
39109: LD_VAR 0 14
39113: PUSH
39114: LD_INT 3
39116: ARRAY
39117: GREATEREQUAL
39118: AND
39119: IFFALSE 39131
// result := weapon ;
39121: LD_ADDR_VAR 0 3
39125: PUSH
39126: LD_VAR 0 18
39130: ST_TO_ADDR
// end ; end ;
39131: LD_VAR 0 3
39135: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39136: LD_INT 0
39138: PPUSH
39139: PPUSH
// result := true ;
39140: LD_ADDR_VAR 0 3
39144: PUSH
39145: LD_INT 1
39147: ST_TO_ADDR
// if array1 = array2 then
39148: LD_VAR 0 1
39152: PUSH
39153: LD_VAR 0 2
39157: EQUAL
39158: IFFALSE 39218
// begin for i = 1 to array1 do
39160: LD_ADDR_VAR 0 4
39164: PUSH
39165: DOUBLE
39166: LD_INT 1
39168: DEC
39169: ST_TO_ADDR
39170: LD_VAR 0 1
39174: PUSH
39175: FOR_TO
39176: IFFALSE 39214
// if array1 [ i ] <> array2 [ i ] then
39178: LD_VAR 0 1
39182: PUSH
39183: LD_VAR 0 4
39187: ARRAY
39188: PUSH
39189: LD_VAR 0 2
39193: PUSH
39194: LD_VAR 0 4
39198: ARRAY
39199: NONEQUAL
39200: IFFALSE 39212
// begin result := false ;
39202: LD_ADDR_VAR 0 3
39206: PUSH
39207: LD_INT 0
39209: ST_TO_ADDR
// break ;
39210: GO 39214
// end ;
39212: GO 39175
39214: POP
39215: POP
// end else
39216: GO 39226
// result := false ;
39218: LD_ADDR_VAR 0 3
39222: PUSH
39223: LD_INT 0
39225: ST_TO_ADDR
// end ;
39226: LD_VAR 0 3
39230: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39231: LD_INT 0
39233: PPUSH
39234: PPUSH
// if not array1 or not array2 then
39235: LD_VAR 0 1
39239: NOT
39240: PUSH
39241: LD_VAR 0 2
39245: NOT
39246: OR
39247: IFFALSE 39251
// exit ;
39249: GO 39315
// result := true ;
39251: LD_ADDR_VAR 0 3
39255: PUSH
39256: LD_INT 1
39258: ST_TO_ADDR
// for i = 1 to array1 do
39259: LD_ADDR_VAR 0 4
39263: PUSH
39264: DOUBLE
39265: LD_INT 1
39267: DEC
39268: ST_TO_ADDR
39269: LD_VAR 0 1
39273: PUSH
39274: FOR_TO
39275: IFFALSE 39313
// if array1 [ i ] <> array2 [ i ] then
39277: LD_VAR 0 1
39281: PUSH
39282: LD_VAR 0 4
39286: ARRAY
39287: PUSH
39288: LD_VAR 0 2
39292: PUSH
39293: LD_VAR 0 4
39297: ARRAY
39298: NONEQUAL
39299: IFFALSE 39311
// begin result := false ;
39301: LD_ADDR_VAR 0 3
39305: PUSH
39306: LD_INT 0
39308: ST_TO_ADDR
// break ;
39309: GO 39313
// end ;
39311: GO 39274
39313: POP
39314: POP
// end ;
39315: LD_VAR 0 3
39319: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39320: LD_INT 0
39322: PPUSH
39323: PPUSH
39324: PPUSH
// pom := GetBase ( fac ) ;
39325: LD_ADDR_VAR 0 5
39329: PUSH
39330: LD_VAR 0 1
39334: PPUSH
39335: CALL_OW 274
39339: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39340: LD_ADDR_VAR 0 4
39344: PUSH
39345: LD_VAR 0 2
39349: PUSH
39350: LD_INT 1
39352: ARRAY
39353: PPUSH
39354: LD_VAR 0 2
39358: PUSH
39359: LD_INT 2
39361: ARRAY
39362: PPUSH
39363: LD_VAR 0 2
39367: PUSH
39368: LD_INT 3
39370: ARRAY
39371: PPUSH
39372: LD_VAR 0 2
39376: PUSH
39377: LD_INT 4
39379: ARRAY
39380: PPUSH
39381: CALL_OW 449
39385: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39386: LD_ADDR_VAR 0 3
39390: PUSH
39391: LD_VAR 0 5
39395: PPUSH
39396: LD_INT 1
39398: PPUSH
39399: CALL_OW 275
39403: PUSH
39404: LD_VAR 0 4
39408: PUSH
39409: LD_INT 1
39411: ARRAY
39412: GREATEREQUAL
39413: PUSH
39414: LD_VAR 0 5
39418: PPUSH
39419: LD_INT 2
39421: PPUSH
39422: CALL_OW 275
39426: PUSH
39427: LD_VAR 0 4
39431: PUSH
39432: LD_INT 2
39434: ARRAY
39435: GREATEREQUAL
39436: AND
39437: PUSH
39438: LD_VAR 0 5
39442: PPUSH
39443: LD_INT 3
39445: PPUSH
39446: CALL_OW 275
39450: PUSH
39451: LD_VAR 0 4
39455: PUSH
39456: LD_INT 3
39458: ARRAY
39459: GREATEREQUAL
39460: AND
39461: ST_TO_ADDR
// end ;
39462: LD_VAR 0 3
39466: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39467: LD_INT 0
39469: PPUSH
39470: PPUSH
39471: PPUSH
39472: PPUSH
// pom := GetBase ( building ) ;
39473: LD_ADDR_VAR 0 3
39477: PUSH
39478: LD_VAR 0 1
39482: PPUSH
39483: CALL_OW 274
39487: ST_TO_ADDR
// if not pom then
39488: LD_VAR 0 3
39492: NOT
39493: IFFALSE 39497
// exit ;
39495: GO 39667
// btype := GetBType ( building ) ;
39497: LD_ADDR_VAR 0 5
39501: PUSH
39502: LD_VAR 0 1
39506: PPUSH
39507: CALL_OW 266
39511: ST_TO_ADDR
// if btype = b_armoury then
39512: LD_VAR 0 5
39516: PUSH
39517: LD_INT 4
39519: EQUAL
39520: IFFALSE 39530
// btype := b_barracks ;
39522: LD_ADDR_VAR 0 5
39526: PUSH
39527: LD_INT 5
39529: ST_TO_ADDR
// if btype = b_depot then
39530: LD_VAR 0 5
39534: PUSH
39535: LD_INT 0
39537: EQUAL
39538: IFFALSE 39548
// btype := b_warehouse ;
39540: LD_ADDR_VAR 0 5
39544: PUSH
39545: LD_INT 1
39547: ST_TO_ADDR
// if btype = b_workshop then
39548: LD_VAR 0 5
39552: PUSH
39553: LD_INT 2
39555: EQUAL
39556: IFFALSE 39566
// btype := b_factory ;
39558: LD_ADDR_VAR 0 5
39562: PUSH
39563: LD_INT 3
39565: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39566: LD_ADDR_VAR 0 4
39570: PUSH
39571: LD_VAR 0 5
39575: PPUSH
39576: LD_VAR 0 1
39580: PPUSH
39581: CALL_OW 248
39585: PPUSH
39586: CALL_OW 450
39590: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39591: LD_ADDR_VAR 0 2
39595: PUSH
39596: LD_VAR 0 3
39600: PPUSH
39601: LD_INT 1
39603: PPUSH
39604: CALL_OW 275
39608: PUSH
39609: LD_VAR 0 4
39613: PUSH
39614: LD_INT 1
39616: ARRAY
39617: GREATEREQUAL
39618: PUSH
39619: LD_VAR 0 3
39623: PPUSH
39624: LD_INT 2
39626: PPUSH
39627: CALL_OW 275
39631: PUSH
39632: LD_VAR 0 4
39636: PUSH
39637: LD_INT 2
39639: ARRAY
39640: GREATEREQUAL
39641: AND
39642: PUSH
39643: LD_VAR 0 3
39647: PPUSH
39648: LD_INT 3
39650: PPUSH
39651: CALL_OW 275
39655: PUSH
39656: LD_VAR 0 4
39660: PUSH
39661: LD_INT 3
39663: ARRAY
39664: GREATEREQUAL
39665: AND
39666: ST_TO_ADDR
// end ;
39667: LD_VAR 0 2
39671: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39672: LD_INT 0
39674: PPUSH
39675: PPUSH
39676: PPUSH
// pom := GetBase ( building ) ;
39677: LD_ADDR_VAR 0 4
39681: PUSH
39682: LD_VAR 0 1
39686: PPUSH
39687: CALL_OW 274
39691: ST_TO_ADDR
// if not pom then
39692: LD_VAR 0 4
39696: NOT
39697: IFFALSE 39701
// exit ;
39699: GO 39802
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39701: LD_ADDR_VAR 0 5
39705: PUSH
39706: LD_VAR 0 2
39710: PPUSH
39711: LD_VAR 0 1
39715: PPUSH
39716: CALL_OW 248
39720: PPUSH
39721: CALL_OW 450
39725: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39726: LD_ADDR_VAR 0 3
39730: PUSH
39731: LD_VAR 0 4
39735: PPUSH
39736: LD_INT 1
39738: PPUSH
39739: CALL_OW 275
39743: PUSH
39744: LD_VAR 0 5
39748: PUSH
39749: LD_INT 1
39751: ARRAY
39752: GREATEREQUAL
39753: PUSH
39754: LD_VAR 0 4
39758: PPUSH
39759: LD_INT 2
39761: PPUSH
39762: CALL_OW 275
39766: PUSH
39767: LD_VAR 0 5
39771: PUSH
39772: LD_INT 2
39774: ARRAY
39775: GREATEREQUAL
39776: AND
39777: PUSH
39778: LD_VAR 0 4
39782: PPUSH
39783: LD_INT 3
39785: PPUSH
39786: CALL_OW 275
39790: PUSH
39791: LD_VAR 0 5
39795: PUSH
39796: LD_INT 3
39798: ARRAY
39799: GREATEREQUAL
39800: AND
39801: ST_TO_ADDR
// end ;
39802: LD_VAR 0 3
39806: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39807: LD_INT 0
39809: PPUSH
39810: PPUSH
39811: PPUSH
39812: PPUSH
39813: PPUSH
39814: PPUSH
39815: PPUSH
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
// result := false ;
39820: LD_ADDR_VAR 0 8
39824: PUSH
39825: LD_INT 0
39827: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39828: LD_VAR 0 5
39832: NOT
39833: PUSH
39834: LD_VAR 0 1
39838: NOT
39839: OR
39840: PUSH
39841: LD_VAR 0 2
39845: NOT
39846: OR
39847: PUSH
39848: LD_VAR 0 3
39852: NOT
39853: OR
39854: IFFALSE 39858
// exit ;
39856: GO 40672
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39858: LD_ADDR_VAR 0 14
39862: PUSH
39863: LD_VAR 0 1
39867: PPUSH
39868: LD_VAR 0 2
39872: PPUSH
39873: LD_VAR 0 3
39877: PPUSH
39878: LD_VAR 0 4
39882: PPUSH
39883: LD_VAR 0 5
39887: PUSH
39888: LD_INT 1
39890: ARRAY
39891: PPUSH
39892: CALL_OW 248
39896: PPUSH
39897: LD_INT 0
39899: PPUSH
39900: CALL 41909 0 6
39904: ST_TO_ADDR
// if not hexes then
39905: LD_VAR 0 14
39909: NOT
39910: IFFALSE 39914
// exit ;
39912: GO 40672
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39914: LD_ADDR_VAR 0 17
39918: PUSH
39919: LD_VAR 0 5
39923: PPUSH
39924: LD_INT 22
39926: PUSH
39927: LD_VAR 0 13
39931: PPUSH
39932: CALL_OW 255
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: LD_INT 30
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 30
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: LIST
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PPUSH
39973: CALL_OW 72
39977: ST_TO_ADDR
// for i = 1 to hexes do
39978: LD_ADDR_VAR 0 9
39982: PUSH
39983: DOUBLE
39984: LD_INT 1
39986: DEC
39987: ST_TO_ADDR
39988: LD_VAR 0 14
39992: PUSH
39993: FOR_TO
39994: IFFALSE 40670
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39996: LD_ADDR_VAR 0 13
40000: PUSH
40001: LD_VAR 0 14
40005: PUSH
40006: LD_VAR 0 9
40010: ARRAY
40011: PUSH
40012: LD_INT 1
40014: ARRAY
40015: PPUSH
40016: LD_VAR 0 14
40020: PUSH
40021: LD_VAR 0 9
40025: ARRAY
40026: PUSH
40027: LD_INT 2
40029: ARRAY
40030: PPUSH
40031: CALL_OW 428
40035: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40036: LD_VAR 0 14
40040: PUSH
40041: LD_VAR 0 9
40045: ARRAY
40046: PUSH
40047: LD_INT 1
40049: ARRAY
40050: PPUSH
40051: LD_VAR 0 14
40055: PUSH
40056: LD_VAR 0 9
40060: ARRAY
40061: PUSH
40062: LD_INT 2
40064: ARRAY
40065: PPUSH
40066: CALL_OW 351
40070: PUSH
40071: LD_VAR 0 14
40075: PUSH
40076: LD_VAR 0 9
40080: ARRAY
40081: PUSH
40082: LD_INT 1
40084: ARRAY
40085: PPUSH
40086: LD_VAR 0 14
40090: PUSH
40091: LD_VAR 0 9
40095: ARRAY
40096: PUSH
40097: LD_INT 2
40099: ARRAY
40100: PPUSH
40101: CALL_OW 488
40105: NOT
40106: OR
40107: PUSH
40108: LD_VAR 0 13
40112: PPUSH
40113: CALL_OW 247
40117: PUSH
40118: LD_INT 3
40120: EQUAL
40121: OR
40122: IFFALSE 40128
// exit ;
40124: POP
40125: POP
40126: GO 40672
// if not tmp then
40128: LD_VAR 0 13
40132: NOT
40133: IFFALSE 40137
// continue ;
40135: GO 39993
// result := true ;
40137: LD_ADDR_VAR 0 8
40141: PUSH
40142: LD_INT 1
40144: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40145: LD_VAR 0 6
40149: PUSH
40150: LD_VAR 0 13
40154: PPUSH
40155: CALL_OW 247
40159: PUSH
40160: LD_INT 2
40162: EQUAL
40163: AND
40164: PUSH
40165: LD_VAR 0 13
40169: PPUSH
40170: CALL_OW 263
40174: PUSH
40175: LD_INT 1
40177: EQUAL
40178: AND
40179: IFFALSE 40343
// begin if IsDrivenBy ( tmp ) then
40181: LD_VAR 0 13
40185: PPUSH
40186: CALL_OW 311
40190: IFFALSE 40194
// continue ;
40192: GO 39993
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40194: LD_VAR 0 6
40198: PPUSH
40199: LD_INT 3
40201: PUSH
40202: LD_INT 60
40204: PUSH
40205: EMPTY
40206: LIST
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 3
40214: PUSH
40215: LD_INT 55
40217: PUSH
40218: EMPTY
40219: LIST
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PPUSH
40229: CALL_OW 72
40233: IFFALSE 40341
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40235: LD_ADDR_VAR 0 18
40239: PUSH
40240: LD_VAR 0 6
40244: PPUSH
40245: LD_INT 3
40247: PUSH
40248: LD_INT 60
40250: PUSH
40251: EMPTY
40252: LIST
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 3
40260: PUSH
40261: LD_INT 55
40263: PUSH
40264: EMPTY
40265: LIST
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PPUSH
40275: CALL_OW 72
40279: PUSH
40280: LD_INT 1
40282: ARRAY
40283: ST_TO_ADDR
// if IsInUnit ( driver ) then
40284: LD_VAR 0 18
40288: PPUSH
40289: CALL_OW 310
40293: IFFALSE 40304
// ComExit ( driver ) ;
40295: LD_VAR 0 18
40299: PPUSH
40300: CALL 65093 0 1
// AddComEnterUnit ( driver , tmp ) ;
40304: LD_VAR 0 18
40308: PPUSH
40309: LD_VAR 0 13
40313: PPUSH
40314: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40318: LD_VAR 0 18
40322: PPUSH
40323: LD_VAR 0 7
40327: PPUSH
40328: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40332: LD_VAR 0 18
40336: PPUSH
40337: CALL_OW 181
// end ; continue ;
40341: GO 39993
// end ; if not cleaners or not tmp in cleaners then
40343: LD_VAR 0 6
40347: NOT
40348: PUSH
40349: LD_VAR 0 13
40353: PUSH
40354: LD_VAR 0 6
40358: IN
40359: NOT
40360: OR
40361: IFFALSE 40668
// begin if dep then
40363: LD_VAR 0 17
40367: IFFALSE 40503
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40369: LD_ADDR_VAR 0 16
40373: PUSH
40374: LD_VAR 0 17
40378: PUSH
40379: LD_INT 1
40381: ARRAY
40382: PPUSH
40383: CALL_OW 250
40387: PPUSH
40388: LD_VAR 0 17
40392: PUSH
40393: LD_INT 1
40395: ARRAY
40396: PPUSH
40397: CALL_OW 254
40401: PPUSH
40402: LD_INT 5
40404: PPUSH
40405: CALL_OW 272
40409: PUSH
40410: LD_VAR 0 17
40414: PUSH
40415: LD_INT 1
40417: ARRAY
40418: PPUSH
40419: CALL_OW 251
40423: PPUSH
40424: LD_VAR 0 17
40428: PUSH
40429: LD_INT 1
40431: ARRAY
40432: PPUSH
40433: CALL_OW 254
40437: PPUSH
40438: LD_INT 5
40440: PPUSH
40441: CALL_OW 273
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40450: LD_VAR 0 16
40454: PUSH
40455: LD_INT 1
40457: ARRAY
40458: PPUSH
40459: LD_VAR 0 16
40463: PUSH
40464: LD_INT 2
40466: ARRAY
40467: PPUSH
40468: CALL_OW 488
40472: IFFALSE 40503
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40474: LD_VAR 0 13
40478: PPUSH
40479: LD_VAR 0 16
40483: PUSH
40484: LD_INT 1
40486: ARRAY
40487: PPUSH
40488: LD_VAR 0 16
40492: PUSH
40493: LD_INT 2
40495: ARRAY
40496: PPUSH
40497: CALL_OW 111
// continue ;
40501: GO 39993
// end ; end ; r := GetDir ( tmp ) ;
40503: LD_ADDR_VAR 0 15
40507: PUSH
40508: LD_VAR 0 13
40512: PPUSH
40513: CALL_OW 254
40517: ST_TO_ADDR
// if r = 5 then
40518: LD_VAR 0 15
40522: PUSH
40523: LD_INT 5
40525: EQUAL
40526: IFFALSE 40536
// r := 0 ;
40528: LD_ADDR_VAR 0 15
40532: PUSH
40533: LD_INT 0
40535: ST_TO_ADDR
// for j = r to 5 do
40536: LD_ADDR_VAR 0 10
40540: PUSH
40541: DOUBLE
40542: LD_VAR 0 15
40546: DEC
40547: ST_TO_ADDR
40548: LD_INT 5
40550: PUSH
40551: FOR_TO
40552: IFFALSE 40666
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40554: LD_ADDR_VAR 0 11
40558: PUSH
40559: LD_VAR 0 13
40563: PPUSH
40564: CALL_OW 250
40568: PPUSH
40569: LD_VAR 0 10
40573: PPUSH
40574: LD_INT 2
40576: PPUSH
40577: CALL_OW 272
40581: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40582: LD_ADDR_VAR 0 12
40586: PUSH
40587: LD_VAR 0 13
40591: PPUSH
40592: CALL_OW 251
40596: PPUSH
40597: LD_VAR 0 10
40601: PPUSH
40602: LD_INT 2
40604: PPUSH
40605: CALL_OW 273
40609: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40610: LD_VAR 0 11
40614: PPUSH
40615: LD_VAR 0 12
40619: PPUSH
40620: CALL_OW 488
40624: PUSH
40625: LD_VAR 0 11
40629: PPUSH
40630: LD_VAR 0 12
40634: PPUSH
40635: CALL_OW 428
40639: NOT
40640: AND
40641: IFFALSE 40664
// begin ComMoveXY ( tmp , _x , _y ) ;
40643: LD_VAR 0 13
40647: PPUSH
40648: LD_VAR 0 11
40652: PPUSH
40653: LD_VAR 0 12
40657: PPUSH
40658: CALL_OW 111
// break ;
40662: GO 40666
// end ; end ;
40664: GO 40551
40666: POP
40667: POP
// end ; end ;
40668: GO 39993
40670: POP
40671: POP
// end ;
40672: LD_VAR 0 8
40676: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40677: LD_INT 0
40679: PPUSH
// result := true ;
40680: LD_ADDR_VAR 0 3
40684: PUSH
40685: LD_INT 1
40687: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40688: LD_VAR 0 2
40692: PUSH
40693: LD_INT 24
40695: DOUBLE
40696: EQUAL
40697: IFTRUE 40707
40699: LD_INT 33
40701: DOUBLE
40702: EQUAL
40703: IFTRUE 40707
40705: GO 40732
40707: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40708: LD_ADDR_VAR 0 3
40712: PUSH
40713: LD_INT 32
40715: PPUSH
40716: LD_VAR 0 1
40720: PPUSH
40721: CALL_OW 321
40725: PUSH
40726: LD_INT 2
40728: EQUAL
40729: ST_TO_ADDR
40730: GO 41052
40732: LD_INT 20
40734: DOUBLE
40735: EQUAL
40736: IFTRUE 40740
40738: GO 40765
40740: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40741: LD_ADDR_VAR 0 3
40745: PUSH
40746: LD_INT 6
40748: PPUSH
40749: LD_VAR 0 1
40753: PPUSH
40754: CALL_OW 321
40758: PUSH
40759: LD_INT 2
40761: EQUAL
40762: ST_TO_ADDR
40763: GO 41052
40765: LD_INT 22
40767: DOUBLE
40768: EQUAL
40769: IFTRUE 40779
40771: LD_INT 36
40773: DOUBLE
40774: EQUAL
40775: IFTRUE 40779
40777: GO 40804
40779: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40780: LD_ADDR_VAR 0 3
40784: PUSH
40785: LD_INT 15
40787: PPUSH
40788: LD_VAR 0 1
40792: PPUSH
40793: CALL_OW 321
40797: PUSH
40798: LD_INT 2
40800: EQUAL
40801: ST_TO_ADDR
40802: GO 41052
40804: LD_INT 30
40806: DOUBLE
40807: EQUAL
40808: IFTRUE 40812
40810: GO 40837
40812: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40813: LD_ADDR_VAR 0 3
40817: PUSH
40818: LD_INT 20
40820: PPUSH
40821: LD_VAR 0 1
40825: PPUSH
40826: CALL_OW 321
40830: PUSH
40831: LD_INT 2
40833: EQUAL
40834: ST_TO_ADDR
40835: GO 41052
40837: LD_INT 28
40839: DOUBLE
40840: EQUAL
40841: IFTRUE 40851
40843: LD_INT 21
40845: DOUBLE
40846: EQUAL
40847: IFTRUE 40851
40849: GO 40876
40851: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40852: LD_ADDR_VAR 0 3
40856: PUSH
40857: LD_INT 21
40859: PPUSH
40860: LD_VAR 0 1
40864: PPUSH
40865: CALL_OW 321
40869: PUSH
40870: LD_INT 2
40872: EQUAL
40873: ST_TO_ADDR
40874: GO 41052
40876: LD_INT 16
40878: DOUBLE
40879: EQUAL
40880: IFTRUE 40884
40882: GO 40911
40884: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40885: LD_ADDR_VAR 0 3
40889: PUSH
40890: LD_EXP 31
40894: PPUSH
40895: LD_VAR 0 1
40899: PPUSH
40900: CALL_OW 321
40904: PUSH
40905: LD_INT 2
40907: EQUAL
40908: ST_TO_ADDR
40909: GO 41052
40911: LD_INT 19
40913: DOUBLE
40914: EQUAL
40915: IFTRUE 40925
40917: LD_INT 23
40919: DOUBLE
40920: EQUAL
40921: IFTRUE 40925
40923: GO 40952
40925: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40926: LD_ADDR_VAR 0 3
40930: PUSH
40931: LD_EXP 30
40935: PPUSH
40936: LD_VAR 0 1
40940: PPUSH
40941: CALL_OW 321
40945: PUSH
40946: LD_INT 2
40948: EQUAL
40949: ST_TO_ADDR
40950: GO 41052
40952: LD_INT 17
40954: DOUBLE
40955: EQUAL
40956: IFTRUE 40960
40958: GO 40985
40960: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40961: LD_ADDR_VAR 0 3
40965: PUSH
40966: LD_INT 39
40968: PPUSH
40969: LD_VAR 0 1
40973: PPUSH
40974: CALL_OW 321
40978: PUSH
40979: LD_INT 2
40981: EQUAL
40982: ST_TO_ADDR
40983: GO 41052
40985: LD_INT 18
40987: DOUBLE
40988: EQUAL
40989: IFTRUE 40993
40991: GO 41018
40993: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40994: LD_ADDR_VAR 0 3
40998: PUSH
40999: LD_INT 40
41001: PPUSH
41002: LD_VAR 0 1
41006: PPUSH
41007: CALL_OW 321
41011: PUSH
41012: LD_INT 2
41014: EQUAL
41015: ST_TO_ADDR
41016: GO 41052
41018: LD_INT 27
41020: DOUBLE
41021: EQUAL
41022: IFTRUE 41026
41024: GO 41051
41026: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41027: LD_ADDR_VAR 0 3
41031: PUSH
41032: LD_INT 35
41034: PPUSH
41035: LD_VAR 0 1
41039: PPUSH
41040: CALL_OW 321
41044: PUSH
41045: LD_INT 2
41047: EQUAL
41048: ST_TO_ADDR
41049: GO 41052
41051: POP
// end ;
41052: LD_VAR 0 3
41056: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41057: LD_INT 0
41059: PPUSH
41060: PPUSH
41061: PPUSH
41062: PPUSH
41063: PPUSH
41064: PPUSH
41065: PPUSH
41066: PPUSH
41067: PPUSH
41068: PPUSH
41069: PPUSH
// result := false ;
41070: LD_ADDR_VAR 0 6
41074: PUSH
41075: LD_INT 0
41077: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41078: LD_VAR 0 1
41082: NOT
41083: PUSH
41084: LD_VAR 0 1
41088: PPUSH
41089: CALL_OW 266
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: IN
41104: NOT
41105: OR
41106: PUSH
41107: LD_VAR 0 2
41111: NOT
41112: OR
41113: PUSH
41114: LD_VAR 0 5
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: LD_INT 2
41127: PUSH
41128: LD_INT 3
41130: PUSH
41131: LD_INT 4
41133: PUSH
41134: LD_INT 5
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: IN
41145: NOT
41146: OR
41147: PUSH
41148: LD_VAR 0 3
41152: PPUSH
41153: LD_VAR 0 4
41157: PPUSH
41158: CALL_OW 488
41162: NOT
41163: OR
41164: IFFALSE 41168
// exit ;
41166: GO 41904
// side := GetSide ( depot ) ;
41168: LD_ADDR_VAR 0 9
41172: PUSH
41173: LD_VAR 0 1
41177: PPUSH
41178: CALL_OW 255
41182: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41183: LD_VAR 0 9
41187: PPUSH
41188: LD_VAR 0 2
41192: PPUSH
41193: CALL 40677 0 2
41197: NOT
41198: IFFALSE 41202
// exit ;
41200: GO 41904
// pom := GetBase ( depot ) ;
41202: LD_ADDR_VAR 0 10
41206: PUSH
41207: LD_VAR 0 1
41211: PPUSH
41212: CALL_OW 274
41216: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41217: LD_ADDR_VAR 0 11
41221: PUSH
41222: LD_VAR 0 2
41226: PPUSH
41227: LD_VAR 0 1
41231: PPUSH
41232: CALL_OW 248
41236: PPUSH
41237: CALL_OW 450
41241: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41242: LD_VAR 0 10
41246: PPUSH
41247: LD_INT 1
41249: PPUSH
41250: CALL_OW 275
41254: PUSH
41255: LD_VAR 0 11
41259: PUSH
41260: LD_INT 1
41262: ARRAY
41263: GREATEREQUAL
41264: PUSH
41265: LD_VAR 0 10
41269: PPUSH
41270: LD_INT 2
41272: PPUSH
41273: CALL_OW 275
41277: PUSH
41278: LD_VAR 0 11
41282: PUSH
41283: LD_INT 2
41285: ARRAY
41286: GREATEREQUAL
41287: AND
41288: PUSH
41289: LD_VAR 0 10
41293: PPUSH
41294: LD_INT 3
41296: PPUSH
41297: CALL_OW 275
41301: PUSH
41302: LD_VAR 0 11
41306: PUSH
41307: LD_INT 3
41309: ARRAY
41310: GREATEREQUAL
41311: AND
41312: NOT
41313: IFFALSE 41317
// exit ;
41315: GO 41904
// if GetBType ( depot ) = b_depot then
41317: LD_VAR 0 1
41321: PPUSH
41322: CALL_OW 266
41326: PUSH
41327: LD_INT 0
41329: EQUAL
41330: IFFALSE 41342
// dist := 28 else
41332: LD_ADDR_VAR 0 14
41336: PUSH
41337: LD_INT 28
41339: ST_TO_ADDR
41340: GO 41350
// dist := 36 ;
41342: LD_ADDR_VAR 0 14
41346: PUSH
41347: LD_INT 36
41349: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41350: LD_VAR 0 1
41354: PPUSH
41355: LD_VAR 0 3
41359: PPUSH
41360: LD_VAR 0 4
41364: PPUSH
41365: CALL_OW 297
41369: PUSH
41370: LD_VAR 0 14
41374: GREATER
41375: IFFALSE 41379
// exit ;
41377: GO 41904
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41379: LD_ADDR_VAR 0 12
41383: PUSH
41384: LD_VAR 0 2
41388: PPUSH
41389: LD_VAR 0 3
41393: PPUSH
41394: LD_VAR 0 4
41398: PPUSH
41399: LD_VAR 0 5
41403: PPUSH
41404: LD_VAR 0 1
41408: PPUSH
41409: CALL_OW 248
41413: PPUSH
41414: LD_INT 0
41416: PPUSH
41417: CALL 41909 0 6
41421: ST_TO_ADDR
// if not hexes then
41422: LD_VAR 0 12
41426: NOT
41427: IFFALSE 41431
// exit ;
41429: GO 41904
// hex := GetHexInfo ( x , y ) ;
41431: LD_ADDR_VAR 0 15
41435: PUSH
41436: LD_VAR 0 3
41440: PPUSH
41441: LD_VAR 0 4
41445: PPUSH
41446: CALL_OW 546
41450: ST_TO_ADDR
// if hex [ 1 ] then
41451: LD_VAR 0 15
41455: PUSH
41456: LD_INT 1
41458: ARRAY
41459: IFFALSE 41463
// exit ;
41461: GO 41904
// height := hex [ 2 ] ;
41463: LD_ADDR_VAR 0 13
41467: PUSH
41468: LD_VAR 0 15
41472: PUSH
41473: LD_INT 2
41475: ARRAY
41476: ST_TO_ADDR
// for i = 1 to hexes do
41477: LD_ADDR_VAR 0 7
41481: PUSH
41482: DOUBLE
41483: LD_INT 1
41485: DEC
41486: ST_TO_ADDR
41487: LD_VAR 0 12
41491: PUSH
41492: FOR_TO
41493: IFFALSE 41823
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41495: LD_VAR 0 12
41499: PUSH
41500: LD_VAR 0 7
41504: ARRAY
41505: PUSH
41506: LD_INT 1
41508: ARRAY
41509: PPUSH
41510: LD_VAR 0 12
41514: PUSH
41515: LD_VAR 0 7
41519: ARRAY
41520: PUSH
41521: LD_INT 2
41523: ARRAY
41524: PPUSH
41525: CALL_OW 488
41529: NOT
41530: PUSH
41531: LD_VAR 0 12
41535: PUSH
41536: LD_VAR 0 7
41540: ARRAY
41541: PUSH
41542: LD_INT 1
41544: ARRAY
41545: PPUSH
41546: LD_VAR 0 12
41550: PUSH
41551: LD_VAR 0 7
41555: ARRAY
41556: PUSH
41557: LD_INT 2
41559: ARRAY
41560: PPUSH
41561: CALL_OW 428
41565: PUSH
41566: LD_INT 0
41568: GREATER
41569: OR
41570: PUSH
41571: LD_VAR 0 12
41575: PUSH
41576: LD_VAR 0 7
41580: ARRAY
41581: PUSH
41582: LD_INT 1
41584: ARRAY
41585: PPUSH
41586: LD_VAR 0 12
41590: PUSH
41591: LD_VAR 0 7
41595: ARRAY
41596: PUSH
41597: LD_INT 2
41599: ARRAY
41600: PPUSH
41601: CALL_OW 351
41605: OR
41606: IFFALSE 41612
// exit ;
41608: POP
41609: POP
41610: GO 41904
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41612: LD_ADDR_VAR 0 8
41616: PUSH
41617: LD_VAR 0 12
41621: PUSH
41622: LD_VAR 0 7
41626: ARRAY
41627: PUSH
41628: LD_INT 1
41630: ARRAY
41631: PPUSH
41632: LD_VAR 0 12
41636: PUSH
41637: LD_VAR 0 7
41641: ARRAY
41642: PUSH
41643: LD_INT 2
41645: ARRAY
41646: PPUSH
41647: CALL_OW 546
41651: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41652: LD_VAR 0 8
41656: PUSH
41657: LD_INT 1
41659: ARRAY
41660: PUSH
41661: LD_VAR 0 8
41665: PUSH
41666: LD_INT 2
41668: ARRAY
41669: PUSH
41670: LD_VAR 0 13
41674: PUSH
41675: LD_INT 2
41677: PLUS
41678: GREATER
41679: OR
41680: PUSH
41681: LD_VAR 0 8
41685: PUSH
41686: LD_INT 2
41688: ARRAY
41689: PUSH
41690: LD_VAR 0 13
41694: PUSH
41695: LD_INT 2
41697: MINUS
41698: LESS
41699: OR
41700: PUSH
41701: LD_VAR 0 8
41705: PUSH
41706: LD_INT 3
41708: ARRAY
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 8
41715: PUSH
41716: LD_INT 9
41718: PUSH
41719: LD_INT 10
41721: PUSH
41722: LD_INT 11
41724: PUSH
41725: LD_INT 12
41727: PUSH
41728: LD_INT 13
41730: PUSH
41731: LD_INT 16
41733: PUSH
41734: LD_INT 17
41736: PUSH
41737: LD_INT 18
41739: PUSH
41740: LD_INT 19
41742: PUSH
41743: LD_INT 20
41745: PUSH
41746: LD_INT 21
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: IN
41764: NOT
41765: OR
41766: PUSH
41767: LD_VAR 0 8
41771: PUSH
41772: LD_INT 5
41774: ARRAY
41775: NOT
41776: OR
41777: PUSH
41778: LD_VAR 0 8
41782: PUSH
41783: LD_INT 6
41785: ARRAY
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: LD_INT 7
41795: PUSH
41796: LD_INT 9
41798: PUSH
41799: LD_INT 10
41801: PUSH
41802: LD_INT 11
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: IN
41813: NOT
41814: OR
41815: IFFALSE 41821
// exit ;
41817: POP
41818: POP
41819: GO 41904
// end ;
41821: GO 41492
41823: POP
41824: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41825: LD_VAR 0 9
41829: PPUSH
41830: LD_VAR 0 3
41834: PPUSH
41835: LD_VAR 0 4
41839: PPUSH
41840: LD_INT 20
41842: PPUSH
41843: CALL 33850 0 4
41847: PUSH
41848: LD_INT 4
41850: ARRAY
41851: IFFALSE 41855
// exit ;
41853: GO 41904
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41855: LD_VAR 0 2
41859: PUSH
41860: LD_INT 29
41862: PUSH
41863: LD_INT 30
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: IN
41870: PUSH
41871: LD_VAR 0 3
41875: PPUSH
41876: LD_VAR 0 4
41880: PPUSH
41881: LD_VAR 0 9
41885: PPUSH
41886: CALL_OW 440
41890: NOT
41891: AND
41892: IFFALSE 41896
// exit ;
41894: GO 41904
// result := true ;
41896: LD_ADDR_VAR 0 6
41900: PUSH
41901: LD_INT 1
41903: ST_TO_ADDR
// end ;
41904: LD_VAR 0 6
41908: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41909: LD_INT 0
41911: PPUSH
41912: PPUSH
41913: PPUSH
41914: PPUSH
41915: PPUSH
41916: PPUSH
41917: PPUSH
41918: PPUSH
41919: PPUSH
41920: PPUSH
41921: PPUSH
41922: PPUSH
41923: PPUSH
41924: PPUSH
41925: PPUSH
41926: PPUSH
41927: PPUSH
41928: PPUSH
41929: PPUSH
41930: PPUSH
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
41935: PPUSH
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
41946: PPUSH
41947: PPUSH
41948: PPUSH
41949: PPUSH
41950: PPUSH
41951: PPUSH
41952: PPUSH
41953: PPUSH
41954: PPUSH
41955: PPUSH
41956: PPUSH
41957: PPUSH
41958: PPUSH
41959: PPUSH
41960: PPUSH
41961: PPUSH
41962: PPUSH
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
// result = [ ] ;
41969: LD_ADDR_VAR 0 7
41973: PUSH
41974: EMPTY
41975: ST_TO_ADDR
// temp_list = [ ] ;
41976: LD_ADDR_VAR 0 9
41980: PUSH
41981: EMPTY
41982: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41983: LD_VAR 0 4
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: LD_INT 3
41999: PUSH
42000: LD_INT 4
42002: PUSH
42003: LD_INT 5
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: IN
42014: NOT
42015: PUSH
42016: LD_VAR 0 1
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: IN
42031: PUSH
42032: LD_VAR 0 5
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 2
42042: PUSH
42043: LD_INT 3
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: LIST
42050: IN
42051: NOT
42052: AND
42053: OR
42054: IFFALSE 42058
// exit ;
42056: GO 60449
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42058: LD_VAR 0 1
42062: PUSH
42063: LD_INT 6
42065: PUSH
42066: LD_INT 7
42068: PUSH
42069: LD_INT 8
42071: PUSH
42072: LD_INT 13
42074: PUSH
42075: LD_INT 12
42077: PUSH
42078: LD_INT 15
42080: PUSH
42081: LD_INT 11
42083: PUSH
42084: LD_INT 14
42086: PUSH
42087: LD_INT 10
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: IN
42101: IFFALSE 42111
// btype = b_lab ;
42103: LD_ADDR_VAR 0 1
42107: PUSH
42108: LD_INT 6
42110: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42111: LD_VAR 0 6
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 2
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: IN
42130: NOT
42131: PUSH
42132: LD_VAR 0 1
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: LD_INT 3
42148: PUSH
42149: LD_INT 6
42151: PUSH
42152: LD_INT 36
42154: PUSH
42155: LD_INT 4
42157: PUSH
42158: LD_INT 5
42160: PUSH
42161: LD_INT 31
42163: PUSH
42164: LD_INT 32
42166: PUSH
42167: LD_INT 33
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: IN
42183: NOT
42184: PUSH
42185: LD_VAR 0 6
42189: PUSH
42190: LD_INT 1
42192: EQUAL
42193: AND
42194: OR
42195: PUSH
42196: LD_VAR 0 1
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: LD_INT 3
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: IN
42211: NOT
42212: PUSH
42213: LD_VAR 0 6
42217: PUSH
42218: LD_INT 2
42220: EQUAL
42221: AND
42222: OR
42223: IFFALSE 42233
// mode = 0 ;
42225: LD_ADDR_VAR 0 6
42229: PUSH
42230: LD_INT 0
42232: ST_TO_ADDR
// case mode of 0 :
42233: LD_VAR 0 6
42237: PUSH
42238: LD_INT 0
42240: DOUBLE
42241: EQUAL
42242: IFTRUE 42246
42244: GO 53699
42246: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42247: LD_ADDR_VAR 0 11
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: LD_INT 2
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 2
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: LD_INT 3
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: LD_INT 3
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42440: LD_ADDR_VAR 0 12
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: LD_INT 1
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 2
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 2
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: NEG
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 2
42574: NEG
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 2
42586: NEG
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 3
42597: NEG
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 3
42608: NEG
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42636: LD_ADDR_VAR 0 13
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 2
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 2
42771: NEG
42772: PUSH
42773: LD_INT 2
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 2
42783: NEG
42784: PUSH
42785: LD_INT 3
42787: NEG
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 3
42795: NEG
42796: PUSH
42797: LD_INT 2
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 3
42807: NEG
42808: PUSH
42809: LD_INT 3
42811: NEG
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42835: LD_ADDR_VAR 0 14
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: LD_INT 3
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: LD_INT 3
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: LD_INT 2
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43031: LD_ADDR_VAR 0 15
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: NEG
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 3
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 3
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43224: LD_ADDR_VAR 0 16
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: NEG
43360: PUSH
43361: LD_INT 2
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 3
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 3
43381: PUSH
43382: LD_INT 3
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: PUSH
43392: LD_INT 3
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43417: LD_ADDR_VAR 0 17
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: LD_INT 2
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 2
43593: NEG
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: NEG
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 2
43616: NEG
43617: PUSH
43618: LD_INT 2
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43647: LD_ADDR_VAR 0 18
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: LD_INT 2
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 2
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 2
43846: NEG
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43877: LD_ADDR_VAR 0 19
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 2
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44107: LD_ADDR_VAR 0 20
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: LD_INT 2
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: NEG
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: LD_INT 2
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44337: LD_ADDR_VAR 0 21
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44567: LD_ADDR_VAR 0 22
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 2
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44797: LD_ADDR_VAR 0 23
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 2
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: NEG
45009: PUSH
45010: LD_INT 3
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: LD_INT 3
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45077: LD_ADDR_VAR 0 24
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 2
45253: NEG
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: LD_INT 2
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 3
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 3
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45353: LD_ADDR_VAR 0 25
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: NEG
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 3
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 3
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: LD_INT 3
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 3
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45627: LD_ADDR_VAR 0 26
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 2
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: NEG
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: NEG
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: LD_INT 3
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: LD_INT 3
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 2
45869: NEG
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45903: LD_ADDR_VAR 0 27
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: LD_INT 2
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 2
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 3
46136: NEG
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 3
46148: NEG
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46183: LD_ADDR_VAR 0 28
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: LD_INT 3
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 3
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 3
46418: NEG
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 3
46430: NEG
46431: PUSH
46432: LD_INT 2
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46465: LD_ADDR_VAR 0 29
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: LD_INT 1
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 2
46655: NEG
46656: PUSH
46657: LD_INT 3
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 3
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: LD_INT 3
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 3
46709: NEG
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46744: LD_ADDR_VAR 0 30
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 2
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: LD_INT 3
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 3
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: LD_INT 3
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47022: LD_ADDR_VAR 0 31
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: LD_INT 3
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 3
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 3
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 3
47265: NEG
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47300: LD_ADDR_VAR 0 32
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: NEG
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: LD_INT 3
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 2
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 3
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: LD_INT 3
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 2
47532: NEG
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 3
47543: NEG
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47578: LD_ADDR_VAR 0 33
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 3
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 3
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: LD_INT 3
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 3
47822: NEG
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47857: LD_ADDR_VAR 0 34
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 2
48013: NEG
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 3
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 2
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 3
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: LD_INT 3
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 3
48102: NEG
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48137: LD_ADDR_VAR 0 35
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48249: LD_ADDR_VAR 0 36
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48361: LD_ADDR_VAR 0 37
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48473: LD_ADDR_VAR 0 38
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48585: LD_ADDR_VAR 0 39
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 2
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48697: LD_ADDR_VAR 0 40
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48809: LD_ADDR_VAR 0 41
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: LD_INT 0
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 2
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 2
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: LD_INT 2
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: NEG
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 2
48999: NEG
49000: PUSH
49001: LD_INT 3
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 3
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 3
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 3
49042: PUSH
49043: LD_INT 2
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 3
49052: PUSH
49053: LD_INT 3
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: LD_INT 3
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 3
49083: NEG
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 3
49094: NEG
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 3
49106: NEG
49107: PUSH
49108: LD_INT 2
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 3
49118: NEG
49119: PUSH
49120: LD_INT 3
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49159: LD_ADDR_VAR 0 42
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: LD_INT 3
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: LD_INT 3
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 3
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 3
49405: PUSH
49406: LD_INT 3
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: LD_INT 3
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: LD_INT 3
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 3
49456: NEG
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 3
49468: NEG
49469: PUSH
49470: LD_INT 3
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49509: LD_ADDR_VAR 0 43
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: LD_INT 1
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: LD_INT 2
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: LD_INT 3
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 3
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 2
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 3
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 3
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: LD_INT 3
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: LD_INT 3
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: LD_INT 2
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 3
49805: NEG
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 3
49816: NEG
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49857: LD_ADDR_VAR 0 44
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: LD_INT 3
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 3
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 3
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 3
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 3
50100: PUSH
50101: LD_INT 3
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 3
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 3
50131: NEG
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 3
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 3
50154: NEG
50155: PUSH
50156: LD_INT 2
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 3
50166: NEG
50167: PUSH
50168: LD_INT 3
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50207: LD_ADDR_VAR 0 45
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 2
50373: NEG
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 2
50385: NEG
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: LD_INT 3
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 3
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 3
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 3
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 3
50453: PUSH
50454: LD_INT 3
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 3
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 3
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 3
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 3
50504: NEG
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: LD_INT 3
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50557: LD_ADDR_VAR 0 46
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 2
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: LD_INT 3
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: LD_INT 3
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 3
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 3
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 3
50853: NEG
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 3
50864: NEG
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50905: LD_ADDR_VAR 0 47
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: LD_INT 0
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 2
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51056: LD_ADDR_VAR 0 48
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 2
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51203: LD_ADDR_VAR 0 49
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: LD_INT 2
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 2
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51347: LD_ADDR_VAR 0 50
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51491: LD_ADDR_VAR 0 51
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: NEG
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51638: LD_ADDR_VAR 0 52
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51789: LD_ADDR_VAR 0 53
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 2
51965: NEG
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 2
51976: NEG
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52019: LD_ADDR_VAR 0 54
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 1
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: NEG
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52249: LD_ADDR_VAR 0 55
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 0
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: LD_INT 2
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52479: LD_ADDR_VAR 0 56
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: LD_INT 2
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: LD_INT 2
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52709: LD_ADDR_VAR 0 57
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 2
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: NEG
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: NEG
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52939: LD_ADDR_VAR 0 58
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 1
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: NEG
53021: PUSH
53022: LD_INT 2
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 2
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: NEG
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 2
53138: NEG
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53169: LD_ADDR_VAR 0 59
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53257: LD_ADDR_VAR 0 60
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53345: LD_ADDR_VAR 0 61
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53433: LD_ADDR_VAR 0 62
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53521: LD_ADDR_VAR 0 63
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53609: LD_ADDR_VAR 0 64
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: ST_TO_ADDR
// end ; 1 :
53697: GO 59594
53699: LD_INT 1
53701: DOUBLE
53702: EQUAL
53703: IFTRUE 53707
53705: GO 56330
53707: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53708: LD_ADDR_VAR 0 11
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 3
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: LIST
53751: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53752: LD_ADDR_VAR 0 12
53756: PUSH
53757: LD_INT 2
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 3
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 3
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: LIST
53792: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53793: LD_ADDR_VAR 0 13
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: LD_INT 3
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: LD_INT 3
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: LIST
53832: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53833: LD_ADDR_VAR 0 14
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 3
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: LIST
53873: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53874: LD_ADDR_VAR 0 15
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 3
53892: NEG
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 3
53903: NEG
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53918: LD_ADDR_VAR 0 16
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: LD_INT 3
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 3
53937: NEG
53938: PUSH
53939: LD_INT 2
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 3
53949: NEG
53950: PUSH
53951: LD_INT 3
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: LIST
53963: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53964: LD_ADDR_VAR 0 17
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: LD_INT 3
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 3
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: LIST
54007: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54008: LD_ADDR_VAR 0 18
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 3
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 3
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: LIST
54048: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54049: LD_ADDR_VAR 0 19
54053: PUSH
54054: LD_INT 3
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 3
54066: PUSH
54067: LD_INT 3
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: LD_INT 3
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: LIST
54088: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54089: LD_ADDR_VAR 0 20
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 3
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 2
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: LIST
54129: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54130: LD_ADDR_VAR 0 21
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: LD_INT 1
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 3
54148: NEG
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 3
54159: NEG
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: LIST
54173: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54174: LD_ADDR_VAR 0 22
54178: PUSH
54179: LD_INT 2
54181: NEG
54182: PUSH
54183: LD_INT 3
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 3
54193: NEG
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 3
54205: NEG
54206: PUSH
54207: LD_INT 3
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: LIST
54219: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54220: LD_ADDR_VAR 0 23
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: LD_INT 3
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 4
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: LD_INT 3
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: LIST
54263: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54264: LD_ADDR_VAR 0 24
54268: PUSH
54269: LD_INT 3
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 4
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: LIST
54304: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54305: LD_ADDR_VAR 0 25
54309: PUSH
54310: LD_INT 3
54312: PUSH
54313: LD_INT 3
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 4
54322: PUSH
54323: LD_INT 3
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 3
54332: PUSH
54333: LD_INT 4
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: LIST
54344: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54345: LD_ADDR_VAR 0 26
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 3
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: LD_INT 4
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: LIST
54385: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54386: LD_ADDR_VAR 0 27
54390: PUSH
54391: LD_INT 3
54393: NEG
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 3
54404: NEG
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 4
54415: NEG
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: LIST
54429: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54430: LD_ADDR_VAR 0 28
54434: PUSH
54435: LD_INT 3
54437: NEG
54438: PUSH
54439: LD_INT 3
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 3
54449: NEG
54450: PUSH
54451: LD_INT 4
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 4
54461: NEG
54462: PUSH
54463: LD_INT 3
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: LIST
54475: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54476: LD_ADDR_VAR 0 29
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: LD_INT 3
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 3
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: PUSH
54507: LD_INT 2
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: LD_INT 4
54521: NEG
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: LD_INT 4
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: LD_INT 3
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: LD_INT 5
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 5
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 4
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: LD_INT 6
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: LD_INT 6
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: LD_INT 5
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54631: LD_ADDR_VAR 0 30
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 3
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 3
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 3
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 4
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 4
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 4
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 5
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 5
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 5
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 6
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 6
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54774: LD_ADDR_VAR 0 31
54778: PUSH
54779: LD_INT 3
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: PUSH
54792: LD_INT 3
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 3
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 4
54811: PUSH
54812: LD_INT 3
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 4
54821: PUSH
54822: LD_INT 4
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 3
54831: PUSH
54832: LD_INT 4
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 5
54841: PUSH
54842: LD_INT 4
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 5
54851: PUSH
54852: LD_INT 5
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 4
54861: PUSH
54862: LD_INT 5
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 6
54871: PUSH
54872: LD_INT 5
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 6
54881: PUSH
54882: LD_INT 6
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 5
54891: PUSH
54892: LD_INT 6
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54913: LD_ADDR_VAR 0 32
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: LD_INT 3
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 3
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 4
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: LD_INT 4
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 3
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: LD_INT 5
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: LD_INT 5
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 4
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: LD_INT 6
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: LD_INT 6
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: LD_INT 5
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55056: LD_ADDR_VAR 0 33
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 3
55074: NEG
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 3
55085: NEG
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 3
55097: NEG
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 4
55108: NEG
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 4
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 4
55131: NEG
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 5
55142: NEG
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 5
55153: NEG
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 5
55165: NEG
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 6
55176: NEG
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 6
55187: NEG
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55211: LD_ADDR_VAR 0 34
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: LD_INT 3
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: LD_INT 3
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 3
55254: NEG
55255: PUSH
55256: LD_INT 4
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 4
55266: NEG
55267: PUSH
55268: LD_INT 3
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 4
55278: NEG
55279: PUSH
55280: LD_INT 4
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 4
55290: NEG
55291: PUSH
55292: LD_INT 5
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 5
55302: NEG
55303: PUSH
55304: LD_INT 4
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 5
55314: NEG
55315: PUSH
55316: LD_INT 5
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 5
55326: NEG
55327: PUSH
55328: LD_INT 6
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 6
55338: NEG
55339: PUSH
55340: LD_INT 5
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 6
55350: NEG
55351: PUSH
55352: LD_INT 6
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55374: LD_ADDR_VAR 0 41
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: LD_INT 3
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: LIST
55417: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55418: LD_ADDR_VAR 0 42
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 3
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55459: LD_ADDR_VAR 0 43
55463: PUSH
55464: LD_INT 2
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 3
55476: PUSH
55477: LD_INT 2
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: LD_INT 3
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: LIST
55498: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55499: LD_ADDR_VAR 0 44
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 3
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: LIST
55539: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55540: LD_ADDR_VAR 0 45
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 3
55569: NEG
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: LIST
55583: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55584: LD_ADDR_VAR 0 46
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: LD_INT 2
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: LD_INT 3
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 3
55615: NEG
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: LIST
55629: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55630: LD_ADDR_VAR 0 47
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: LD_INT 3
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: LD_INT 3
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55663: LD_ADDR_VAR 0 48
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55694: LD_ADDR_VAR 0 49
55698: PUSH
55699: LD_INT 3
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 3
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55723: LD_ADDR_VAR 0 50
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: LD_INT 3
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 3
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55752: LD_ADDR_VAR 0 51
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55783: LD_ADDR_VAR 0 52
55787: PUSH
55788: LD_INT 3
55790: NEG
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 3
55802: NEG
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55816: LD_ADDR_VAR 0 53
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 3
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 3
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: LIST
55859: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55860: LD_ADDR_VAR 0 54
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 3
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: LIST
55900: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55901: LD_ADDR_VAR 0 55
55905: PUSH
55906: LD_INT 3
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 3
55918: PUSH
55919: LD_INT 3
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: LD_INT 3
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: LIST
55940: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55941: LD_ADDR_VAR 0 56
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 3
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: LIST
55981: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55982: LD_ADDR_VAR 0 57
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 3
56000: NEG
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56026: LD_ADDR_VAR 0 58
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: LD_INT 3
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 3
56057: NEG
56058: PUSH
56059: LD_INT 3
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: LIST
56071: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56072: LD_ADDR_VAR 0 59
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: LIST
56115: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56116: LD_ADDR_VAR 0 60
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: LIST
56156: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56157: LD_ADDR_VAR 0 61
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: LIST
56196: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56197: LD_ADDR_VAR 0 62
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: LIST
56237: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56238: LD_ADDR_VAR 0 63
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: LIST
56281: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56282: LD_ADDR_VAR 0 64
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: LD_INT 2
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: NEG
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: LIST
56327: ST_TO_ADDR
// end ; 2 :
56328: GO 59594
56330: LD_INT 2
56332: DOUBLE
56333: EQUAL
56334: IFTRUE 56338
56336: GO 59593
56338: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56339: LD_ADDR_VAR 0 29
56343: PUSH
56344: LD_INT 4
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 4
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 5
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 5
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 4
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 3
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 3
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 3
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 5
56429: PUSH
56430: LD_INT 2
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 3
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 3
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 4
56459: PUSH
56460: LD_INT 3
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 4
56469: PUSH
56470: LD_INT 4
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 3
56479: PUSH
56480: LD_INT 4
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: LD_INT 3
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 4
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 4
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 4
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 3
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 4
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: LD_INT 5
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 5
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: LD_INT 4
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: LD_INT 3
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: LD_INT 5
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 3
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 3
56633: NEG
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 2
56645: NEG
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 3
56667: NEG
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 4
56678: NEG
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 4
56689: NEG
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 4
56701: NEG
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: NEG
56714: PUSH
56715: LD_INT 2
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 4
56724: NEG
56725: PUSH
56726: LD_INT 4
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 4
56736: NEG
56737: PUSH
56738: LD_INT 5
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 3
56748: NEG
56749: PUSH
56750: LD_INT 4
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 3
56760: NEG
56761: PUSH
56762: LD_INT 3
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 4
56772: NEG
56773: PUSH
56774: LD_INT 3
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 5
56784: NEG
56785: PUSH
56786: LD_INT 4
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 5
56796: NEG
56797: PUSH
56798: LD_INT 5
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 3
56808: NEG
56809: PUSH
56810: LD_INT 5
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 5
56820: NEG
56821: PUSH
56822: LD_INT 3
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56877: LD_ADDR_VAR 0 30
56881: PUSH
56882: LD_INT 4
56884: PUSH
56885: LD_INT 4
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 4
56894: PUSH
56895: LD_INT 3
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 5
56904: PUSH
56905: LD_INT 4
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 5
56914: PUSH
56915: LD_INT 5
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 4
56924: PUSH
56925: LD_INT 5
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 3
56934: PUSH
56935: LD_INT 4
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 3
56944: PUSH
56945: LD_INT 3
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 5
56954: PUSH
56955: LD_INT 3
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 3
56964: PUSH
56965: LD_INT 5
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: LD_INT 3
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: LD_INT 4
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 4
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 3
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: LD_INT 4
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 4
57067: NEG
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 4
57078: NEG
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 3
57090: NEG
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 3
57101: NEG
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 4
57112: NEG
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 5
57123: NEG
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 5
57134: NEG
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 5
57146: NEG
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 3
57158: NEG
57159: PUSH
57160: LD_INT 2
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 3
57169: NEG
57170: PUSH
57171: LD_INT 3
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 3
57181: NEG
57182: PUSH
57183: LD_INT 4
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 3
57217: NEG
57218: PUSH
57219: LD_INT 2
57221: NEG
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 4
57229: NEG
57230: PUSH
57231: LD_INT 3
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 4
57241: NEG
57242: PUSH
57243: LD_INT 4
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: LD_INT 4
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 4
57265: NEG
57266: PUSH
57267: LD_INT 2
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: LD_INT 4
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: LD_INT 5
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: LD_INT 4
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: LD_INT 3
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 4
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: LD_INT 5
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: LD_INT 3
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 2
57367: NEG
57368: PUSH
57369: LD_INT 5
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57424: LD_ADDR_VAR 0 31
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 4
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: LD_INT 3
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 4
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: LD_INT 5
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 5
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 4
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: LD_INT 3
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: PUSH
57504: LD_INT 5
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 2
57513: NEG
57514: PUSH
57515: LD_INT 3
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 3
57524: NEG
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 3
57535: NEG
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 3
57569: NEG
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 4
57580: NEG
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 4
57591: NEG
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 4
57603: NEG
57604: PUSH
57605: LD_INT 2
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 2
57615: NEG
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 4
57626: NEG
57627: PUSH
57628: LD_INT 4
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 4
57638: NEG
57639: PUSH
57640: LD_INT 5
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: LD_INT 4
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 3
57662: NEG
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 4
57674: NEG
57675: PUSH
57676: LD_INT 3
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 5
57686: NEG
57687: PUSH
57688: LD_INT 4
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 5
57698: NEG
57699: PUSH
57700: LD_INT 5
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 3
57710: NEG
57711: PUSH
57712: LD_INT 5
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 5
57722: NEG
57723: PUSH
57724: LD_INT 3
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: LD_INT 3
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: LD_INT 4
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: PUSH
57757: LD_INT 3
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: LD_INT 3
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: LD_INT 4
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: LD_INT 2
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: LD_INT 4
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 4
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 4
57846: PUSH
57847: LD_INT 1
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 5
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 5
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 4
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 3
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 3
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 5
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57974: LD_ADDR_VAR 0 32
57978: PUSH
57979: LD_INT 4
57981: NEG
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 4
57992: NEG
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 3
58004: NEG
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 3
58015: NEG
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 4
58026: NEG
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 5
58037: NEG
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 5
58048: NEG
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 5
58060: NEG
58061: PUSH
58062: LD_INT 2
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 3
58072: NEG
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 3
58083: NEG
58084: PUSH
58085: LD_INT 3
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: LD_INT 4
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: LD_INT 3
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 3
58131: NEG
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 4
58143: NEG
58144: PUSH
58145: LD_INT 3
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 4
58155: NEG
58156: PUSH
58157: LD_INT 4
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 2
58167: NEG
58168: PUSH
58169: LD_INT 4
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 4
58179: NEG
58180: PUSH
58181: LD_INT 2
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: LD_INT 4
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 5
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: LD_INT 4
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: LD_INT 3
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 3
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: LD_INT 4
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: LD_INT 5
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 2
58270: PUSH
58271: LD_INT 3
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: LD_INT 5
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 3
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 3
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 4
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 4
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 3
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 4
58376: PUSH
58377: LD_INT 2
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 4
58386: PUSH
58387: LD_INT 4
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 4
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 5
58406: PUSH
58407: LD_INT 4
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 5
58416: PUSH
58417: LD_INT 5
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 4
58426: PUSH
58427: LD_INT 5
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 3
58436: PUSH
58437: LD_INT 4
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 3
58446: PUSH
58447: LD_INT 3
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 5
58456: PUSH
58457: LD_INT 3
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 3
58466: PUSH
58467: LD_INT 5
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58521: LD_ADDR_VAR 0 33
58525: PUSH
58526: LD_INT 4
58528: NEG
58529: PUSH
58530: LD_INT 4
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 4
58540: NEG
58541: PUSH
58542: LD_INT 5
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: LD_INT 4
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 3
58564: NEG
58565: PUSH
58566: LD_INT 3
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 4
58576: NEG
58577: PUSH
58578: LD_INT 3
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 5
58588: NEG
58589: PUSH
58590: LD_INT 4
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 5
58600: NEG
58601: PUSH
58602: LD_INT 5
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 3
58612: NEG
58613: PUSH
58614: LD_INT 5
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 5
58624: NEG
58625: PUSH
58626: LD_INT 3
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: LD_INT 4
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: LD_INT 3
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 2
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: LD_INT 2
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 1
58691: NEG
58692: PUSH
58693: LD_INT 3
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: LD_INT 4
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: LD_INT 2
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: LD_INT 4
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 4
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 4
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 5
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 5
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 4
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 3
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 5
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 3
58831: PUSH
58832: LD_INT 3
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 3
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 4
58851: PUSH
58852: LD_INT 3
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 4
58861: PUSH
58862: LD_INT 4
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: LD_INT 4
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: LD_INT 3
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 4
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: LD_INT 4
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: LD_INT 4
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: LD_INT 3
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: LD_INT 4
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: LD_INT 5
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 5
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: LD_INT 4
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: LD_INT 3
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: LD_INT 5
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 2
59003: NEG
59004: PUSH
59005: LD_INT 3
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59059: LD_ADDR_VAR 0 34
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 4
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: LD_INT 5
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: LD_INT 4
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: LD_INT 3
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: LD_INT 4
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: LD_INT 5
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 2
59145: PUSH
59146: LD_INT 3
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: LD_INT 5
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 3
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 4
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 4
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 3
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 2
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 4
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 4
59261: PUSH
59262: LD_INT 4
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 4
59271: PUSH
59272: LD_INT 3
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 5
59281: PUSH
59282: LD_INT 4
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 5
59291: PUSH
59292: LD_INT 5
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 4
59301: PUSH
59302: LD_INT 5
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: PUSH
59312: LD_INT 4
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 3
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 5
59331: PUSH
59332: LD_INT 3
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: LD_INT 5
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: LD_INT 3
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 0
59361: PUSH
59362: LD_INT 2
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: LD_INT 3
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: LD_INT 4
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: LD_INT 4
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: NEG
59402: PUSH
59403: LD_INT 3
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: LD_INT 2
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 2
59423: PUSH
59424: LD_INT 4
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 2
59433: NEG
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 4
59444: NEG
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 4
59455: NEG
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 3
59467: NEG
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 3
59478: NEG
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 4
59489: NEG
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 5
59500: NEG
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 5
59511: NEG
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 5
59523: NEG
59524: PUSH
59525: LD_INT 2
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 3
59535: NEG
59536: PUSH
59537: LD_INT 2
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: ST_TO_ADDR
// end ; end ;
59591: GO 59594
59593: POP
// case btype of b_depot , b_warehouse :
59594: LD_VAR 0 1
59598: PUSH
59599: LD_INT 0
59601: DOUBLE
59602: EQUAL
59603: IFTRUE 59613
59605: LD_INT 1
59607: DOUBLE
59608: EQUAL
59609: IFTRUE 59613
59611: GO 59814
59613: POP
// case nation of nation_american :
59614: LD_VAR 0 5
59618: PUSH
59619: LD_INT 1
59621: DOUBLE
59622: EQUAL
59623: IFTRUE 59627
59625: GO 59683
59627: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59628: LD_ADDR_VAR 0 9
59632: PUSH
59633: LD_VAR 0 11
59637: PUSH
59638: LD_VAR 0 12
59642: PUSH
59643: LD_VAR 0 13
59647: PUSH
59648: LD_VAR 0 14
59652: PUSH
59653: LD_VAR 0 15
59657: PUSH
59658: LD_VAR 0 16
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: PUSH
59671: LD_VAR 0 4
59675: PUSH
59676: LD_INT 1
59678: PLUS
59679: ARRAY
59680: ST_TO_ADDR
59681: GO 59812
59683: LD_INT 2
59685: DOUBLE
59686: EQUAL
59687: IFTRUE 59691
59689: GO 59747
59691: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59692: LD_ADDR_VAR 0 9
59696: PUSH
59697: LD_VAR 0 17
59701: PUSH
59702: LD_VAR 0 18
59706: PUSH
59707: LD_VAR 0 19
59711: PUSH
59712: LD_VAR 0 20
59716: PUSH
59717: LD_VAR 0 21
59721: PUSH
59722: LD_VAR 0 22
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: PUSH
59735: LD_VAR 0 4
59739: PUSH
59740: LD_INT 1
59742: PLUS
59743: ARRAY
59744: ST_TO_ADDR
59745: GO 59812
59747: LD_INT 3
59749: DOUBLE
59750: EQUAL
59751: IFTRUE 59755
59753: GO 59811
59755: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59756: LD_ADDR_VAR 0 9
59760: PUSH
59761: LD_VAR 0 23
59765: PUSH
59766: LD_VAR 0 24
59770: PUSH
59771: LD_VAR 0 25
59775: PUSH
59776: LD_VAR 0 26
59780: PUSH
59781: LD_VAR 0 27
59785: PUSH
59786: LD_VAR 0 28
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: PUSH
59799: LD_VAR 0 4
59803: PUSH
59804: LD_INT 1
59806: PLUS
59807: ARRAY
59808: ST_TO_ADDR
59809: GO 59812
59811: POP
59812: GO 60367
59814: LD_INT 2
59816: DOUBLE
59817: EQUAL
59818: IFTRUE 59828
59820: LD_INT 3
59822: DOUBLE
59823: EQUAL
59824: IFTRUE 59828
59826: GO 59884
59828: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59829: LD_ADDR_VAR 0 9
59833: PUSH
59834: LD_VAR 0 29
59838: PUSH
59839: LD_VAR 0 30
59843: PUSH
59844: LD_VAR 0 31
59848: PUSH
59849: LD_VAR 0 32
59853: PUSH
59854: LD_VAR 0 33
59858: PUSH
59859: LD_VAR 0 34
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: PUSH
59872: LD_VAR 0 4
59876: PUSH
59877: LD_INT 1
59879: PLUS
59880: ARRAY
59881: ST_TO_ADDR
59882: GO 60367
59884: LD_INT 16
59886: DOUBLE
59887: EQUAL
59888: IFTRUE 59946
59890: LD_INT 17
59892: DOUBLE
59893: EQUAL
59894: IFTRUE 59946
59896: LD_INT 18
59898: DOUBLE
59899: EQUAL
59900: IFTRUE 59946
59902: LD_INT 19
59904: DOUBLE
59905: EQUAL
59906: IFTRUE 59946
59908: LD_INT 22
59910: DOUBLE
59911: EQUAL
59912: IFTRUE 59946
59914: LD_INT 20
59916: DOUBLE
59917: EQUAL
59918: IFTRUE 59946
59920: LD_INT 21
59922: DOUBLE
59923: EQUAL
59924: IFTRUE 59946
59926: LD_INT 23
59928: DOUBLE
59929: EQUAL
59930: IFTRUE 59946
59932: LD_INT 24
59934: DOUBLE
59935: EQUAL
59936: IFTRUE 59946
59938: LD_INT 25
59940: DOUBLE
59941: EQUAL
59942: IFTRUE 59946
59944: GO 60002
59946: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59947: LD_ADDR_VAR 0 9
59951: PUSH
59952: LD_VAR 0 35
59956: PUSH
59957: LD_VAR 0 36
59961: PUSH
59962: LD_VAR 0 37
59966: PUSH
59967: LD_VAR 0 38
59971: PUSH
59972: LD_VAR 0 39
59976: PUSH
59977: LD_VAR 0 40
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: PUSH
59990: LD_VAR 0 4
59994: PUSH
59995: LD_INT 1
59997: PLUS
59998: ARRAY
59999: ST_TO_ADDR
60000: GO 60367
60002: LD_INT 6
60004: DOUBLE
60005: EQUAL
60006: IFTRUE 60058
60008: LD_INT 7
60010: DOUBLE
60011: EQUAL
60012: IFTRUE 60058
60014: LD_INT 8
60016: DOUBLE
60017: EQUAL
60018: IFTRUE 60058
60020: LD_INT 13
60022: DOUBLE
60023: EQUAL
60024: IFTRUE 60058
60026: LD_INT 12
60028: DOUBLE
60029: EQUAL
60030: IFTRUE 60058
60032: LD_INT 15
60034: DOUBLE
60035: EQUAL
60036: IFTRUE 60058
60038: LD_INT 11
60040: DOUBLE
60041: EQUAL
60042: IFTRUE 60058
60044: LD_INT 14
60046: DOUBLE
60047: EQUAL
60048: IFTRUE 60058
60050: LD_INT 10
60052: DOUBLE
60053: EQUAL
60054: IFTRUE 60058
60056: GO 60114
60058: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60059: LD_ADDR_VAR 0 9
60063: PUSH
60064: LD_VAR 0 41
60068: PUSH
60069: LD_VAR 0 42
60073: PUSH
60074: LD_VAR 0 43
60078: PUSH
60079: LD_VAR 0 44
60083: PUSH
60084: LD_VAR 0 45
60088: PUSH
60089: LD_VAR 0 46
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: PUSH
60102: LD_VAR 0 4
60106: PUSH
60107: LD_INT 1
60109: PLUS
60110: ARRAY
60111: ST_TO_ADDR
60112: GO 60367
60114: LD_INT 36
60116: DOUBLE
60117: EQUAL
60118: IFTRUE 60122
60120: GO 60178
60122: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60123: LD_ADDR_VAR 0 9
60127: PUSH
60128: LD_VAR 0 47
60132: PUSH
60133: LD_VAR 0 48
60137: PUSH
60138: LD_VAR 0 49
60142: PUSH
60143: LD_VAR 0 50
60147: PUSH
60148: LD_VAR 0 51
60152: PUSH
60153: LD_VAR 0 52
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: PUSH
60166: LD_VAR 0 4
60170: PUSH
60171: LD_INT 1
60173: PLUS
60174: ARRAY
60175: ST_TO_ADDR
60176: GO 60367
60178: LD_INT 4
60180: DOUBLE
60181: EQUAL
60182: IFTRUE 60204
60184: LD_INT 5
60186: DOUBLE
60187: EQUAL
60188: IFTRUE 60204
60190: LD_INT 34
60192: DOUBLE
60193: EQUAL
60194: IFTRUE 60204
60196: LD_INT 37
60198: DOUBLE
60199: EQUAL
60200: IFTRUE 60204
60202: GO 60260
60204: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60205: LD_ADDR_VAR 0 9
60209: PUSH
60210: LD_VAR 0 53
60214: PUSH
60215: LD_VAR 0 54
60219: PUSH
60220: LD_VAR 0 55
60224: PUSH
60225: LD_VAR 0 56
60229: PUSH
60230: LD_VAR 0 57
60234: PUSH
60235: LD_VAR 0 58
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: PUSH
60248: LD_VAR 0 4
60252: PUSH
60253: LD_INT 1
60255: PLUS
60256: ARRAY
60257: ST_TO_ADDR
60258: GO 60367
60260: LD_INT 31
60262: DOUBLE
60263: EQUAL
60264: IFTRUE 60310
60266: LD_INT 32
60268: DOUBLE
60269: EQUAL
60270: IFTRUE 60310
60272: LD_INT 33
60274: DOUBLE
60275: EQUAL
60276: IFTRUE 60310
60278: LD_INT 27
60280: DOUBLE
60281: EQUAL
60282: IFTRUE 60310
60284: LD_INT 26
60286: DOUBLE
60287: EQUAL
60288: IFTRUE 60310
60290: LD_INT 28
60292: DOUBLE
60293: EQUAL
60294: IFTRUE 60310
60296: LD_INT 29
60298: DOUBLE
60299: EQUAL
60300: IFTRUE 60310
60302: LD_INT 30
60304: DOUBLE
60305: EQUAL
60306: IFTRUE 60310
60308: GO 60366
60310: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60311: LD_ADDR_VAR 0 9
60315: PUSH
60316: LD_VAR 0 59
60320: PUSH
60321: LD_VAR 0 60
60325: PUSH
60326: LD_VAR 0 61
60330: PUSH
60331: LD_VAR 0 62
60335: PUSH
60336: LD_VAR 0 63
60340: PUSH
60341: LD_VAR 0 64
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: PUSH
60354: LD_VAR 0 4
60358: PUSH
60359: LD_INT 1
60361: PLUS
60362: ARRAY
60363: ST_TO_ADDR
60364: GO 60367
60366: POP
// temp_list2 = [ ] ;
60367: LD_ADDR_VAR 0 10
60371: PUSH
60372: EMPTY
60373: ST_TO_ADDR
// for i in temp_list do
60374: LD_ADDR_VAR 0 8
60378: PUSH
60379: LD_VAR 0 9
60383: PUSH
60384: FOR_IN
60385: IFFALSE 60437
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60387: LD_ADDR_VAR 0 10
60391: PUSH
60392: LD_VAR 0 10
60396: PUSH
60397: LD_VAR 0 8
60401: PUSH
60402: LD_INT 1
60404: ARRAY
60405: PUSH
60406: LD_VAR 0 2
60410: PLUS
60411: PUSH
60412: LD_VAR 0 8
60416: PUSH
60417: LD_INT 2
60419: ARRAY
60420: PUSH
60421: LD_VAR 0 3
60425: PLUS
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: EMPTY
60432: LIST
60433: ADD
60434: ST_TO_ADDR
60435: GO 60384
60437: POP
60438: POP
// result = temp_list2 ;
60439: LD_ADDR_VAR 0 7
60443: PUSH
60444: LD_VAR 0 10
60448: ST_TO_ADDR
// end ;
60449: LD_VAR 0 7
60453: RET
// export function EnemyInRange ( unit , dist ) ; begin
60454: LD_INT 0
60456: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60457: LD_ADDR_VAR 0 3
60461: PUSH
60462: LD_VAR 0 1
60466: PPUSH
60467: CALL_OW 255
60471: PPUSH
60472: LD_VAR 0 1
60476: PPUSH
60477: CALL_OW 250
60481: PPUSH
60482: LD_VAR 0 1
60486: PPUSH
60487: CALL_OW 251
60491: PPUSH
60492: LD_VAR 0 2
60496: PPUSH
60497: CALL 33850 0 4
60501: PUSH
60502: LD_INT 4
60504: ARRAY
60505: ST_TO_ADDR
// end ;
60506: LD_VAR 0 3
60510: RET
// export function PlayerSeeMe ( unit ) ; begin
60511: LD_INT 0
60513: PPUSH
// result := See ( your_side , unit ) ;
60514: LD_ADDR_VAR 0 2
60518: PUSH
60519: LD_OWVAR 2
60523: PPUSH
60524: LD_VAR 0 1
60528: PPUSH
60529: CALL_OW 292
60533: ST_TO_ADDR
// end ;
60534: LD_VAR 0 2
60538: RET
// export function ReverseDir ( unit ) ; begin
60539: LD_INT 0
60541: PPUSH
// if not unit then
60542: LD_VAR 0 1
60546: NOT
60547: IFFALSE 60551
// exit ;
60549: GO 60574
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60551: LD_ADDR_VAR 0 2
60555: PUSH
60556: LD_VAR 0 1
60560: PPUSH
60561: CALL_OW 254
60565: PUSH
60566: LD_INT 3
60568: PLUS
60569: PUSH
60570: LD_INT 6
60572: MOD
60573: ST_TO_ADDR
// end ;
60574: LD_VAR 0 2
60578: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60579: LD_INT 0
60581: PPUSH
60582: PPUSH
60583: PPUSH
60584: PPUSH
60585: PPUSH
// if not hexes then
60586: LD_VAR 0 2
60590: NOT
60591: IFFALSE 60595
// exit ;
60593: GO 60743
// dist := 9999 ;
60595: LD_ADDR_VAR 0 5
60599: PUSH
60600: LD_INT 9999
60602: ST_TO_ADDR
// for i = 1 to hexes do
60603: LD_ADDR_VAR 0 4
60607: PUSH
60608: DOUBLE
60609: LD_INT 1
60611: DEC
60612: ST_TO_ADDR
60613: LD_VAR 0 2
60617: PUSH
60618: FOR_TO
60619: IFFALSE 60731
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60621: LD_VAR 0 1
60625: PPUSH
60626: LD_VAR 0 2
60630: PUSH
60631: LD_VAR 0 4
60635: ARRAY
60636: PUSH
60637: LD_INT 1
60639: ARRAY
60640: PPUSH
60641: LD_VAR 0 2
60645: PUSH
60646: LD_VAR 0 4
60650: ARRAY
60651: PUSH
60652: LD_INT 2
60654: ARRAY
60655: PPUSH
60656: CALL_OW 297
60660: PUSH
60661: LD_VAR 0 5
60665: LESS
60666: IFFALSE 60729
// begin hex := hexes [ i ] ;
60668: LD_ADDR_VAR 0 7
60672: PUSH
60673: LD_VAR 0 2
60677: PUSH
60678: LD_VAR 0 4
60682: ARRAY
60683: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60684: LD_ADDR_VAR 0 5
60688: PUSH
60689: LD_VAR 0 1
60693: PPUSH
60694: LD_VAR 0 2
60698: PUSH
60699: LD_VAR 0 4
60703: ARRAY
60704: PUSH
60705: LD_INT 1
60707: ARRAY
60708: PPUSH
60709: LD_VAR 0 2
60713: PUSH
60714: LD_VAR 0 4
60718: ARRAY
60719: PUSH
60720: LD_INT 2
60722: ARRAY
60723: PPUSH
60724: CALL_OW 297
60728: ST_TO_ADDR
// end ; end ;
60729: GO 60618
60731: POP
60732: POP
// result := hex ;
60733: LD_ADDR_VAR 0 3
60737: PUSH
60738: LD_VAR 0 7
60742: ST_TO_ADDR
// end ;
60743: LD_VAR 0 3
60747: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60748: LD_INT 0
60750: PPUSH
60751: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60752: LD_VAR 0 1
60756: NOT
60757: PUSH
60758: LD_VAR 0 1
60762: PUSH
60763: LD_INT 21
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 23
60775: PUSH
60776: LD_INT 2
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PPUSH
60787: CALL_OW 69
60791: IN
60792: NOT
60793: OR
60794: IFFALSE 60798
// exit ;
60796: GO 60845
// for i = 1 to 3 do
60798: LD_ADDR_VAR 0 3
60802: PUSH
60803: DOUBLE
60804: LD_INT 1
60806: DEC
60807: ST_TO_ADDR
60808: LD_INT 3
60810: PUSH
60811: FOR_TO
60812: IFFALSE 60843
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60814: LD_VAR 0 1
60818: PPUSH
60819: CALL_OW 250
60823: PPUSH
60824: LD_VAR 0 1
60828: PPUSH
60829: CALL_OW 251
60833: PPUSH
60834: LD_INT 1
60836: PPUSH
60837: CALL_OW 453
60841: GO 60811
60843: POP
60844: POP
// end ;
60845: LD_VAR 0 2
60849: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60850: LD_INT 0
60852: PPUSH
60853: PPUSH
60854: PPUSH
60855: PPUSH
60856: PPUSH
60857: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60858: LD_VAR 0 1
60862: NOT
60863: PUSH
60864: LD_VAR 0 2
60868: NOT
60869: OR
60870: PUSH
60871: LD_VAR 0 1
60875: PPUSH
60876: CALL_OW 314
60880: OR
60881: IFFALSE 60885
// exit ;
60883: GO 61326
// x := GetX ( enemy_unit ) ;
60885: LD_ADDR_VAR 0 7
60889: PUSH
60890: LD_VAR 0 2
60894: PPUSH
60895: CALL_OW 250
60899: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60900: LD_ADDR_VAR 0 8
60904: PUSH
60905: LD_VAR 0 2
60909: PPUSH
60910: CALL_OW 251
60914: ST_TO_ADDR
// if not x or not y then
60915: LD_VAR 0 7
60919: NOT
60920: PUSH
60921: LD_VAR 0 8
60925: NOT
60926: OR
60927: IFFALSE 60931
// exit ;
60929: GO 61326
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60931: LD_ADDR_VAR 0 6
60935: PUSH
60936: LD_VAR 0 7
60940: PPUSH
60941: LD_INT 0
60943: PPUSH
60944: LD_INT 4
60946: PPUSH
60947: CALL_OW 272
60951: PUSH
60952: LD_VAR 0 8
60956: PPUSH
60957: LD_INT 0
60959: PPUSH
60960: LD_INT 4
60962: PPUSH
60963: CALL_OW 273
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_VAR 0 7
60976: PPUSH
60977: LD_INT 1
60979: PPUSH
60980: LD_INT 4
60982: PPUSH
60983: CALL_OW 272
60987: PUSH
60988: LD_VAR 0 8
60992: PPUSH
60993: LD_INT 1
60995: PPUSH
60996: LD_INT 4
60998: PPUSH
60999: CALL_OW 273
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_VAR 0 7
61012: PPUSH
61013: LD_INT 2
61015: PPUSH
61016: LD_INT 4
61018: PPUSH
61019: CALL_OW 272
61023: PUSH
61024: LD_VAR 0 8
61028: PPUSH
61029: LD_INT 2
61031: PPUSH
61032: LD_INT 4
61034: PPUSH
61035: CALL_OW 273
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_VAR 0 7
61048: PPUSH
61049: LD_INT 3
61051: PPUSH
61052: LD_INT 4
61054: PPUSH
61055: CALL_OW 272
61059: PUSH
61060: LD_VAR 0 8
61064: PPUSH
61065: LD_INT 3
61067: PPUSH
61068: LD_INT 4
61070: PPUSH
61071: CALL_OW 273
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_VAR 0 7
61084: PPUSH
61085: LD_INT 4
61087: PPUSH
61088: LD_INT 4
61090: PPUSH
61091: CALL_OW 272
61095: PUSH
61096: LD_VAR 0 8
61100: PPUSH
61101: LD_INT 4
61103: PPUSH
61104: LD_INT 4
61106: PPUSH
61107: CALL_OW 273
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_VAR 0 7
61120: PPUSH
61121: LD_INT 5
61123: PPUSH
61124: LD_INT 4
61126: PPUSH
61127: CALL_OW 272
61131: PUSH
61132: LD_VAR 0 8
61136: PPUSH
61137: LD_INT 5
61139: PPUSH
61140: LD_INT 4
61142: PPUSH
61143: CALL_OW 273
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: ST_TO_ADDR
// for i = tmp downto 1 do
61160: LD_ADDR_VAR 0 4
61164: PUSH
61165: DOUBLE
61166: LD_VAR 0 6
61170: INC
61171: ST_TO_ADDR
61172: LD_INT 1
61174: PUSH
61175: FOR_DOWNTO
61176: IFFALSE 61277
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61178: LD_VAR 0 6
61182: PUSH
61183: LD_VAR 0 4
61187: ARRAY
61188: PUSH
61189: LD_INT 1
61191: ARRAY
61192: PPUSH
61193: LD_VAR 0 6
61197: PUSH
61198: LD_VAR 0 4
61202: ARRAY
61203: PUSH
61204: LD_INT 2
61206: ARRAY
61207: PPUSH
61208: CALL_OW 488
61212: NOT
61213: PUSH
61214: LD_VAR 0 6
61218: PUSH
61219: LD_VAR 0 4
61223: ARRAY
61224: PUSH
61225: LD_INT 1
61227: ARRAY
61228: PPUSH
61229: LD_VAR 0 6
61233: PUSH
61234: LD_VAR 0 4
61238: ARRAY
61239: PUSH
61240: LD_INT 2
61242: ARRAY
61243: PPUSH
61244: CALL_OW 428
61248: PUSH
61249: LD_INT 0
61251: NONEQUAL
61252: OR
61253: IFFALSE 61275
// tmp := Delete ( tmp , i ) ;
61255: LD_ADDR_VAR 0 6
61259: PUSH
61260: LD_VAR 0 6
61264: PPUSH
61265: LD_VAR 0 4
61269: PPUSH
61270: CALL_OW 3
61274: ST_TO_ADDR
61275: GO 61175
61277: POP
61278: POP
// j := GetClosestHex ( unit , tmp ) ;
61279: LD_ADDR_VAR 0 5
61283: PUSH
61284: LD_VAR 0 1
61288: PPUSH
61289: LD_VAR 0 6
61293: PPUSH
61294: CALL 60579 0 2
61298: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61299: LD_VAR 0 1
61303: PPUSH
61304: LD_VAR 0 5
61308: PUSH
61309: LD_INT 1
61311: ARRAY
61312: PPUSH
61313: LD_VAR 0 5
61317: PUSH
61318: LD_INT 2
61320: ARRAY
61321: PPUSH
61322: CALL_OW 111
// end ;
61326: LD_VAR 0 3
61330: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61331: LD_INT 0
61333: PPUSH
61334: PPUSH
61335: PPUSH
// uc_side = 0 ;
61336: LD_ADDR_OWVAR 20
61340: PUSH
61341: LD_INT 0
61343: ST_TO_ADDR
// uc_nation = 0 ;
61344: LD_ADDR_OWVAR 21
61348: PUSH
61349: LD_INT 0
61351: ST_TO_ADDR
// InitHc_All ( ) ;
61352: CALL_OW 584
// InitVc ;
61356: CALL_OW 20
// if mastodonts then
61360: LD_VAR 0 6
61364: IFFALSE 61431
// for i = 1 to mastodonts do
61366: LD_ADDR_VAR 0 11
61370: PUSH
61371: DOUBLE
61372: LD_INT 1
61374: DEC
61375: ST_TO_ADDR
61376: LD_VAR 0 6
61380: PUSH
61381: FOR_TO
61382: IFFALSE 61429
// begin vc_chassis := 31 ;
61384: LD_ADDR_OWVAR 37
61388: PUSH
61389: LD_INT 31
61391: ST_TO_ADDR
// vc_control := control_rider ;
61392: LD_ADDR_OWVAR 38
61396: PUSH
61397: LD_INT 4
61399: ST_TO_ADDR
// animal := CreateVehicle ;
61400: LD_ADDR_VAR 0 12
61404: PUSH
61405: CALL_OW 45
61409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61410: LD_VAR 0 12
61414: PPUSH
61415: LD_VAR 0 8
61419: PPUSH
61420: LD_INT 0
61422: PPUSH
61423: CALL 63619 0 3
// end ;
61427: GO 61381
61429: POP
61430: POP
// if horses then
61431: LD_VAR 0 5
61435: IFFALSE 61502
// for i = 1 to horses do
61437: LD_ADDR_VAR 0 11
61441: PUSH
61442: DOUBLE
61443: LD_INT 1
61445: DEC
61446: ST_TO_ADDR
61447: LD_VAR 0 5
61451: PUSH
61452: FOR_TO
61453: IFFALSE 61500
// begin hc_class := 21 ;
61455: LD_ADDR_OWVAR 28
61459: PUSH
61460: LD_INT 21
61462: ST_TO_ADDR
// hc_gallery :=  ;
61463: LD_ADDR_OWVAR 33
61467: PUSH
61468: LD_STRING 
61470: ST_TO_ADDR
// animal := CreateHuman ;
61471: LD_ADDR_VAR 0 12
61475: PUSH
61476: CALL_OW 44
61480: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61481: LD_VAR 0 12
61485: PPUSH
61486: LD_VAR 0 8
61490: PPUSH
61491: LD_INT 0
61493: PPUSH
61494: CALL 63619 0 3
// end ;
61498: GO 61452
61500: POP
61501: POP
// if birds then
61502: LD_VAR 0 1
61506: IFFALSE 61573
// for i = 1 to birds do
61508: LD_ADDR_VAR 0 11
61512: PUSH
61513: DOUBLE
61514: LD_INT 1
61516: DEC
61517: ST_TO_ADDR
61518: LD_VAR 0 1
61522: PUSH
61523: FOR_TO
61524: IFFALSE 61571
// begin hc_class = 18 ;
61526: LD_ADDR_OWVAR 28
61530: PUSH
61531: LD_INT 18
61533: ST_TO_ADDR
// hc_gallery =  ;
61534: LD_ADDR_OWVAR 33
61538: PUSH
61539: LD_STRING 
61541: ST_TO_ADDR
// animal := CreateHuman ;
61542: LD_ADDR_VAR 0 12
61546: PUSH
61547: CALL_OW 44
61551: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61552: LD_VAR 0 12
61556: PPUSH
61557: LD_VAR 0 8
61561: PPUSH
61562: LD_INT 0
61564: PPUSH
61565: CALL 63619 0 3
// end ;
61569: GO 61523
61571: POP
61572: POP
// if tigers then
61573: LD_VAR 0 2
61577: IFFALSE 61661
// for i = 1 to tigers do
61579: LD_ADDR_VAR 0 11
61583: PUSH
61584: DOUBLE
61585: LD_INT 1
61587: DEC
61588: ST_TO_ADDR
61589: LD_VAR 0 2
61593: PUSH
61594: FOR_TO
61595: IFFALSE 61659
// begin hc_class = class_tiger ;
61597: LD_ADDR_OWVAR 28
61601: PUSH
61602: LD_INT 14
61604: ST_TO_ADDR
// hc_gallery =  ;
61605: LD_ADDR_OWVAR 33
61609: PUSH
61610: LD_STRING 
61612: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61613: LD_ADDR_OWVAR 35
61617: PUSH
61618: LD_INT 7
61620: NEG
61621: PPUSH
61622: LD_INT 7
61624: PPUSH
61625: CALL_OW 12
61629: ST_TO_ADDR
// animal := CreateHuman ;
61630: LD_ADDR_VAR 0 12
61634: PUSH
61635: CALL_OW 44
61639: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61640: LD_VAR 0 12
61644: PPUSH
61645: LD_VAR 0 8
61649: PPUSH
61650: LD_INT 0
61652: PPUSH
61653: CALL 63619 0 3
// end ;
61657: GO 61594
61659: POP
61660: POP
// if apemans then
61661: LD_VAR 0 3
61665: IFFALSE 61788
// for i = 1 to apemans do
61667: LD_ADDR_VAR 0 11
61671: PUSH
61672: DOUBLE
61673: LD_INT 1
61675: DEC
61676: ST_TO_ADDR
61677: LD_VAR 0 3
61681: PUSH
61682: FOR_TO
61683: IFFALSE 61786
// begin hc_class = class_apeman ;
61685: LD_ADDR_OWVAR 28
61689: PUSH
61690: LD_INT 12
61692: ST_TO_ADDR
// hc_gallery =  ;
61693: LD_ADDR_OWVAR 33
61697: PUSH
61698: LD_STRING 
61700: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61701: LD_ADDR_OWVAR 35
61705: PUSH
61706: LD_INT 2
61708: NEG
61709: PPUSH
61710: LD_INT 2
61712: PPUSH
61713: CALL_OW 12
61717: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61718: LD_ADDR_OWVAR 31
61722: PUSH
61723: LD_INT 1
61725: PPUSH
61726: LD_INT 3
61728: PPUSH
61729: CALL_OW 12
61733: PUSH
61734: LD_INT 1
61736: PPUSH
61737: LD_INT 3
61739: PPUSH
61740: CALL_OW 12
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: LD_INT 0
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: ST_TO_ADDR
// animal := CreateHuman ;
61757: LD_ADDR_VAR 0 12
61761: PUSH
61762: CALL_OW 44
61766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61767: LD_VAR 0 12
61771: PPUSH
61772: LD_VAR 0 8
61776: PPUSH
61777: LD_INT 0
61779: PPUSH
61780: CALL 63619 0 3
// end ;
61784: GO 61682
61786: POP
61787: POP
// if enchidnas then
61788: LD_VAR 0 4
61792: IFFALSE 61859
// for i = 1 to enchidnas do
61794: LD_ADDR_VAR 0 11
61798: PUSH
61799: DOUBLE
61800: LD_INT 1
61802: DEC
61803: ST_TO_ADDR
61804: LD_VAR 0 4
61808: PUSH
61809: FOR_TO
61810: IFFALSE 61857
// begin hc_class = 13 ;
61812: LD_ADDR_OWVAR 28
61816: PUSH
61817: LD_INT 13
61819: ST_TO_ADDR
// hc_gallery =  ;
61820: LD_ADDR_OWVAR 33
61824: PUSH
61825: LD_STRING 
61827: ST_TO_ADDR
// animal := CreateHuman ;
61828: LD_ADDR_VAR 0 12
61832: PUSH
61833: CALL_OW 44
61837: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61838: LD_VAR 0 12
61842: PPUSH
61843: LD_VAR 0 8
61847: PPUSH
61848: LD_INT 0
61850: PPUSH
61851: CALL 63619 0 3
// end ;
61855: GO 61809
61857: POP
61858: POP
// if fishes then
61859: LD_VAR 0 7
61863: IFFALSE 61930
// for i = 1 to fishes do
61865: LD_ADDR_VAR 0 11
61869: PUSH
61870: DOUBLE
61871: LD_INT 1
61873: DEC
61874: ST_TO_ADDR
61875: LD_VAR 0 7
61879: PUSH
61880: FOR_TO
61881: IFFALSE 61928
// begin hc_class = 20 ;
61883: LD_ADDR_OWVAR 28
61887: PUSH
61888: LD_INT 20
61890: ST_TO_ADDR
// hc_gallery =  ;
61891: LD_ADDR_OWVAR 33
61895: PUSH
61896: LD_STRING 
61898: ST_TO_ADDR
// animal := CreateHuman ;
61899: LD_ADDR_VAR 0 12
61903: PUSH
61904: CALL_OW 44
61908: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61909: LD_VAR 0 12
61913: PPUSH
61914: LD_VAR 0 9
61918: PPUSH
61919: LD_INT 0
61921: PPUSH
61922: CALL 63619 0 3
// end ;
61926: GO 61880
61928: POP
61929: POP
// end ;
61930: LD_VAR 0 10
61934: RET
// export function WantHeal ( sci , unit ) ; begin
61935: LD_INT 0
61937: PPUSH
// if GetTaskList ( sci ) > 0 then
61938: LD_VAR 0 1
61942: PPUSH
61943: CALL_OW 437
61947: PUSH
61948: LD_INT 0
61950: GREATER
61951: IFFALSE 62021
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61953: LD_VAR 0 1
61957: PPUSH
61958: CALL_OW 437
61962: PUSH
61963: LD_INT 1
61965: ARRAY
61966: PUSH
61967: LD_INT 1
61969: ARRAY
61970: PUSH
61971: LD_STRING l
61973: EQUAL
61974: PUSH
61975: LD_VAR 0 1
61979: PPUSH
61980: CALL_OW 437
61984: PUSH
61985: LD_INT 1
61987: ARRAY
61988: PUSH
61989: LD_INT 4
61991: ARRAY
61992: PUSH
61993: LD_VAR 0 2
61997: EQUAL
61998: AND
61999: IFFALSE 62011
// result := true else
62001: LD_ADDR_VAR 0 3
62005: PUSH
62006: LD_INT 1
62008: ST_TO_ADDR
62009: GO 62019
// result := false ;
62011: LD_ADDR_VAR 0 3
62015: PUSH
62016: LD_INT 0
62018: ST_TO_ADDR
// end else
62019: GO 62029
// result := false ;
62021: LD_ADDR_VAR 0 3
62025: PUSH
62026: LD_INT 0
62028: ST_TO_ADDR
// end ;
62029: LD_VAR 0 3
62033: RET
// export function HealTarget ( sci ) ; begin
62034: LD_INT 0
62036: PPUSH
// if not sci then
62037: LD_VAR 0 1
62041: NOT
62042: IFFALSE 62046
// exit ;
62044: GO 62111
// result := 0 ;
62046: LD_ADDR_VAR 0 2
62050: PUSH
62051: LD_INT 0
62053: ST_TO_ADDR
// if GetTaskList ( sci ) then
62054: LD_VAR 0 1
62058: PPUSH
62059: CALL_OW 437
62063: IFFALSE 62111
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62065: LD_VAR 0 1
62069: PPUSH
62070: CALL_OW 437
62074: PUSH
62075: LD_INT 1
62077: ARRAY
62078: PUSH
62079: LD_INT 1
62081: ARRAY
62082: PUSH
62083: LD_STRING l
62085: EQUAL
62086: IFFALSE 62111
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62088: LD_ADDR_VAR 0 2
62092: PUSH
62093: LD_VAR 0 1
62097: PPUSH
62098: CALL_OW 437
62102: PUSH
62103: LD_INT 1
62105: ARRAY
62106: PUSH
62107: LD_INT 4
62109: ARRAY
62110: ST_TO_ADDR
// end ;
62111: LD_VAR 0 2
62115: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62116: LD_INT 0
62118: PPUSH
62119: PPUSH
62120: PPUSH
62121: PPUSH
// if not base_units then
62122: LD_VAR 0 1
62126: NOT
62127: IFFALSE 62131
// exit ;
62129: GO 62218
// result := false ;
62131: LD_ADDR_VAR 0 2
62135: PUSH
62136: LD_INT 0
62138: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62139: LD_ADDR_VAR 0 5
62143: PUSH
62144: LD_VAR 0 1
62148: PPUSH
62149: LD_INT 21
62151: PUSH
62152: LD_INT 3
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PPUSH
62159: CALL_OW 72
62163: ST_TO_ADDR
// if not tmp then
62164: LD_VAR 0 5
62168: NOT
62169: IFFALSE 62173
// exit ;
62171: GO 62218
// for i in tmp do
62173: LD_ADDR_VAR 0 3
62177: PUSH
62178: LD_VAR 0 5
62182: PUSH
62183: FOR_IN
62184: IFFALSE 62216
// begin result := EnemyInRange ( i , 22 ) ;
62186: LD_ADDR_VAR 0 2
62190: PUSH
62191: LD_VAR 0 3
62195: PPUSH
62196: LD_INT 22
62198: PPUSH
62199: CALL 60454 0 2
62203: ST_TO_ADDR
// if result then
62204: LD_VAR 0 2
62208: IFFALSE 62214
// exit ;
62210: POP
62211: POP
62212: GO 62218
// end ;
62214: GO 62183
62216: POP
62217: POP
// end ;
62218: LD_VAR 0 2
62222: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62223: LD_INT 0
62225: PPUSH
62226: PPUSH
// if not units then
62227: LD_VAR 0 1
62231: NOT
62232: IFFALSE 62236
// exit ;
62234: GO 62306
// result := [ ] ;
62236: LD_ADDR_VAR 0 3
62240: PUSH
62241: EMPTY
62242: ST_TO_ADDR
// for i in units do
62243: LD_ADDR_VAR 0 4
62247: PUSH
62248: LD_VAR 0 1
62252: PUSH
62253: FOR_IN
62254: IFFALSE 62304
// if GetTag ( i ) = tag then
62256: LD_VAR 0 4
62260: PPUSH
62261: CALL_OW 110
62265: PUSH
62266: LD_VAR 0 2
62270: EQUAL
62271: IFFALSE 62302
// result := Replace ( result , result + 1 , i ) ;
62273: LD_ADDR_VAR 0 3
62277: PUSH
62278: LD_VAR 0 3
62282: PPUSH
62283: LD_VAR 0 3
62287: PUSH
62288: LD_INT 1
62290: PLUS
62291: PPUSH
62292: LD_VAR 0 4
62296: PPUSH
62297: CALL_OW 1
62301: ST_TO_ADDR
62302: GO 62253
62304: POP
62305: POP
// end ;
62306: LD_VAR 0 3
62310: RET
// export function IsDriver ( un ) ; begin
62311: LD_INT 0
62313: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62314: LD_ADDR_VAR 0 2
62318: PUSH
62319: LD_VAR 0 1
62323: PUSH
62324: LD_INT 55
62326: PUSH
62327: EMPTY
62328: LIST
62329: PPUSH
62330: CALL_OW 69
62334: IN
62335: ST_TO_ADDR
// end ;
62336: LD_VAR 0 2
62340: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62341: LD_INT 0
62343: PPUSH
62344: PPUSH
// list := [ ] ;
62345: LD_ADDR_VAR 0 5
62349: PUSH
62350: EMPTY
62351: ST_TO_ADDR
// case d of 0 :
62352: LD_VAR 0 3
62356: PUSH
62357: LD_INT 0
62359: DOUBLE
62360: EQUAL
62361: IFTRUE 62365
62363: GO 62498
62365: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62366: LD_ADDR_VAR 0 5
62370: PUSH
62371: LD_VAR 0 1
62375: PUSH
62376: LD_INT 4
62378: MINUS
62379: PUSH
62380: LD_VAR 0 2
62384: PUSH
62385: LD_INT 4
62387: MINUS
62388: PUSH
62389: LD_INT 2
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: LIST
62396: PUSH
62397: LD_VAR 0 1
62401: PUSH
62402: LD_INT 3
62404: MINUS
62405: PUSH
62406: LD_VAR 0 2
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: LIST
62418: PUSH
62419: LD_VAR 0 1
62423: PUSH
62424: LD_INT 4
62426: PLUS
62427: PUSH
62428: LD_VAR 0 2
62432: PUSH
62433: LD_INT 4
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: LIST
62440: PUSH
62441: LD_VAR 0 1
62445: PUSH
62446: LD_INT 3
62448: PLUS
62449: PUSH
62450: LD_VAR 0 2
62454: PUSH
62455: LD_INT 3
62457: PLUS
62458: PUSH
62459: LD_INT 5
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: LIST
62466: PUSH
62467: LD_VAR 0 1
62471: PUSH
62472: LD_VAR 0 2
62476: PUSH
62477: LD_INT 4
62479: PLUS
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: LIST
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: ST_TO_ADDR
// end ; 1 :
62496: GO 63196
62498: LD_INT 1
62500: DOUBLE
62501: EQUAL
62502: IFTRUE 62506
62504: GO 62639
62506: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62507: LD_ADDR_VAR 0 5
62511: PUSH
62512: LD_VAR 0 1
62516: PUSH
62517: LD_VAR 0 2
62521: PUSH
62522: LD_INT 4
62524: MINUS
62525: PUSH
62526: LD_INT 3
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: LIST
62533: PUSH
62534: LD_VAR 0 1
62538: PUSH
62539: LD_INT 3
62541: MINUS
62542: PUSH
62543: LD_VAR 0 2
62547: PUSH
62548: LD_INT 3
62550: MINUS
62551: PUSH
62552: LD_INT 2
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: LIST
62559: PUSH
62560: LD_VAR 0 1
62564: PUSH
62565: LD_INT 4
62567: MINUS
62568: PUSH
62569: LD_VAR 0 2
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: LIST
62581: PUSH
62582: LD_VAR 0 1
62586: PUSH
62587: LD_VAR 0 2
62591: PUSH
62592: LD_INT 3
62594: PLUS
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: LIST
62603: PUSH
62604: LD_VAR 0 1
62608: PUSH
62609: LD_INT 4
62611: PLUS
62612: PUSH
62613: LD_VAR 0 2
62617: PUSH
62618: LD_INT 4
62620: PLUS
62621: PUSH
62622: LD_INT 5
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: LIST
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: ST_TO_ADDR
// end ; 2 :
62637: GO 63196
62639: LD_INT 2
62641: DOUBLE
62642: EQUAL
62643: IFTRUE 62647
62645: GO 62776
62647: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62648: LD_ADDR_VAR 0 5
62652: PUSH
62653: LD_VAR 0 1
62657: PUSH
62658: LD_VAR 0 2
62662: PUSH
62663: LD_INT 3
62665: MINUS
62666: PUSH
62667: LD_INT 3
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: LIST
62674: PUSH
62675: LD_VAR 0 1
62679: PUSH
62680: LD_INT 4
62682: PLUS
62683: PUSH
62684: LD_VAR 0 2
62688: PUSH
62689: LD_INT 4
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: LIST
62696: PUSH
62697: LD_VAR 0 1
62701: PUSH
62702: LD_VAR 0 2
62706: PUSH
62707: LD_INT 4
62709: PLUS
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: LIST
62718: PUSH
62719: LD_VAR 0 1
62723: PUSH
62724: LD_INT 3
62726: MINUS
62727: PUSH
62728: LD_VAR 0 2
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: LIST
62740: PUSH
62741: LD_VAR 0 1
62745: PUSH
62746: LD_INT 4
62748: MINUS
62749: PUSH
62750: LD_VAR 0 2
62754: PUSH
62755: LD_INT 4
62757: MINUS
62758: PUSH
62759: LD_INT 2
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: ST_TO_ADDR
// end ; 3 :
62774: GO 63196
62776: LD_INT 3
62778: DOUBLE
62779: EQUAL
62780: IFTRUE 62784
62782: GO 62917
62784: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62785: LD_ADDR_VAR 0 5
62789: PUSH
62790: LD_VAR 0 1
62794: PUSH
62795: LD_INT 3
62797: PLUS
62798: PUSH
62799: LD_VAR 0 2
62803: PUSH
62804: LD_INT 4
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: LIST
62811: PUSH
62812: LD_VAR 0 1
62816: PUSH
62817: LD_INT 4
62819: PLUS
62820: PUSH
62821: LD_VAR 0 2
62825: PUSH
62826: LD_INT 4
62828: PLUS
62829: PUSH
62830: LD_INT 5
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: LIST
62837: PUSH
62838: LD_VAR 0 1
62842: PUSH
62843: LD_INT 4
62845: MINUS
62846: PUSH
62847: LD_VAR 0 2
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: LIST
62859: PUSH
62860: LD_VAR 0 1
62864: PUSH
62865: LD_VAR 0 2
62869: PUSH
62870: LD_INT 4
62872: MINUS
62873: PUSH
62874: LD_INT 3
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: LIST
62881: PUSH
62882: LD_VAR 0 1
62886: PUSH
62887: LD_INT 3
62889: MINUS
62890: PUSH
62891: LD_VAR 0 2
62895: PUSH
62896: LD_INT 3
62898: MINUS
62899: PUSH
62900: LD_INT 2
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: LIST
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: ST_TO_ADDR
// end ; 4 :
62915: GO 63196
62917: LD_INT 4
62919: DOUBLE
62920: EQUAL
62921: IFTRUE 62925
62923: GO 63058
62925: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62926: LD_ADDR_VAR 0 5
62930: PUSH
62931: LD_VAR 0 1
62935: PUSH
62936: LD_VAR 0 2
62940: PUSH
62941: LD_INT 4
62943: PLUS
62944: PUSH
62945: LD_INT 0
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: LIST
62952: PUSH
62953: LD_VAR 0 1
62957: PUSH
62958: LD_INT 3
62960: PLUS
62961: PUSH
62962: LD_VAR 0 2
62966: PUSH
62967: LD_INT 3
62969: PLUS
62970: PUSH
62971: LD_INT 5
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: LIST
62978: PUSH
62979: LD_VAR 0 1
62983: PUSH
62984: LD_INT 4
62986: PLUS
62987: PUSH
62988: LD_VAR 0 2
62992: PUSH
62993: LD_INT 4
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: LIST
63000: PUSH
63001: LD_VAR 0 1
63005: PUSH
63006: LD_VAR 0 2
63010: PUSH
63011: LD_INT 3
63013: MINUS
63014: PUSH
63015: LD_INT 3
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: LIST
63022: PUSH
63023: LD_VAR 0 1
63027: PUSH
63028: LD_INT 4
63030: MINUS
63031: PUSH
63032: LD_VAR 0 2
63036: PUSH
63037: LD_INT 4
63039: MINUS
63040: PUSH
63041: LD_INT 2
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: LIST
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: ST_TO_ADDR
// end ; 5 :
63056: GO 63196
63058: LD_INT 5
63060: DOUBLE
63061: EQUAL
63062: IFTRUE 63066
63064: GO 63195
63066: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63067: LD_ADDR_VAR 0 5
63071: PUSH
63072: LD_VAR 0 1
63076: PUSH
63077: LD_INT 4
63079: MINUS
63080: PUSH
63081: LD_VAR 0 2
63085: PUSH
63086: LD_INT 1
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: LIST
63093: PUSH
63094: LD_VAR 0 1
63098: PUSH
63099: LD_VAR 0 2
63103: PUSH
63104: LD_INT 4
63106: MINUS
63107: PUSH
63108: LD_INT 3
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: LIST
63115: PUSH
63116: LD_VAR 0 1
63120: PUSH
63121: LD_INT 4
63123: PLUS
63124: PUSH
63125: LD_VAR 0 2
63129: PUSH
63130: LD_INT 4
63132: PLUS
63133: PUSH
63134: LD_INT 5
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: LIST
63141: PUSH
63142: LD_VAR 0 1
63146: PUSH
63147: LD_INT 3
63149: PLUS
63150: PUSH
63151: LD_VAR 0 2
63155: PUSH
63156: LD_INT 4
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: LIST
63163: PUSH
63164: LD_VAR 0 1
63168: PUSH
63169: LD_VAR 0 2
63173: PUSH
63174: LD_INT 3
63176: PLUS
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: ST_TO_ADDR
// end ; end ;
63193: GO 63196
63195: POP
// result := list ;
63196: LD_ADDR_VAR 0 4
63200: PUSH
63201: LD_VAR 0 5
63205: ST_TO_ADDR
// end ;
63206: LD_VAR 0 4
63210: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63211: LD_INT 0
63213: PPUSH
63214: PPUSH
63215: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63216: LD_VAR 0 1
63220: NOT
63221: PUSH
63222: LD_VAR 0 2
63226: PUSH
63227: LD_INT 1
63229: PUSH
63230: LD_INT 2
63232: PUSH
63233: LD_INT 3
63235: PUSH
63236: LD_INT 4
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: IN
63245: NOT
63246: OR
63247: IFFALSE 63251
// exit ;
63249: GO 63343
// tmp := [ ] ;
63251: LD_ADDR_VAR 0 5
63255: PUSH
63256: EMPTY
63257: ST_TO_ADDR
// for i in units do
63258: LD_ADDR_VAR 0 4
63262: PUSH
63263: LD_VAR 0 1
63267: PUSH
63268: FOR_IN
63269: IFFALSE 63312
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63271: LD_ADDR_VAR 0 5
63275: PUSH
63276: LD_VAR 0 5
63280: PPUSH
63281: LD_VAR 0 5
63285: PUSH
63286: LD_INT 1
63288: PLUS
63289: PPUSH
63290: LD_VAR 0 4
63294: PPUSH
63295: LD_VAR 0 2
63299: PPUSH
63300: CALL_OW 259
63304: PPUSH
63305: CALL_OW 2
63309: ST_TO_ADDR
63310: GO 63268
63312: POP
63313: POP
// if not tmp then
63314: LD_VAR 0 5
63318: NOT
63319: IFFALSE 63323
// exit ;
63321: GO 63343
// result := SortListByListDesc ( units , tmp ) ;
63323: LD_ADDR_VAR 0 3
63327: PUSH
63328: LD_VAR 0 1
63332: PPUSH
63333: LD_VAR 0 5
63337: PPUSH
63338: CALL_OW 77
63342: ST_TO_ADDR
// end ;
63343: LD_VAR 0 3
63347: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63348: LD_INT 0
63350: PPUSH
63351: PPUSH
63352: PPUSH
// result := false ;
63353: LD_ADDR_VAR 0 3
63357: PUSH
63358: LD_INT 0
63360: ST_TO_ADDR
// x := GetX ( building ) ;
63361: LD_ADDR_VAR 0 4
63365: PUSH
63366: LD_VAR 0 2
63370: PPUSH
63371: CALL_OW 250
63375: ST_TO_ADDR
// y := GetY ( building ) ;
63376: LD_ADDR_VAR 0 5
63380: PUSH
63381: LD_VAR 0 2
63385: PPUSH
63386: CALL_OW 251
63390: ST_TO_ADDR
// if not building or not x or not y then
63391: LD_VAR 0 2
63395: NOT
63396: PUSH
63397: LD_VAR 0 4
63401: NOT
63402: OR
63403: PUSH
63404: LD_VAR 0 5
63408: NOT
63409: OR
63410: IFFALSE 63414
// exit ;
63412: GO 63506
// if GetTaskList ( unit ) then
63414: LD_VAR 0 1
63418: PPUSH
63419: CALL_OW 437
63423: IFFALSE 63506
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63425: LD_STRING e
63427: PUSH
63428: LD_VAR 0 1
63432: PPUSH
63433: CALL_OW 437
63437: PUSH
63438: LD_INT 1
63440: ARRAY
63441: PUSH
63442: LD_INT 1
63444: ARRAY
63445: EQUAL
63446: PUSH
63447: LD_VAR 0 4
63451: PUSH
63452: LD_VAR 0 1
63456: PPUSH
63457: CALL_OW 437
63461: PUSH
63462: LD_INT 1
63464: ARRAY
63465: PUSH
63466: LD_INT 2
63468: ARRAY
63469: EQUAL
63470: AND
63471: PUSH
63472: LD_VAR 0 5
63476: PUSH
63477: LD_VAR 0 1
63481: PPUSH
63482: CALL_OW 437
63486: PUSH
63487: LD_INT 1
63489: ARRAY
63490: PUSH
63491: LD_INT 3
63493: ARRAY
63494: EQUAL
63495: AND
63496: IFFALSE 63506
// result := true end ;
63498: LD_ADDR_VAR 0 3
63502: PUSH
63503: LD_INT 1
63505: ST_TO_ADDR
// end ;
63506: LD_VAR 0 3
63510: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63511: LD_INT 0
63513: PPUSH
// result := false ;
63514: LD_ADDR_VAR 0 4
63518: PUSH
63519: LD_INT 0
63521: ST_TO_ADDR
// if GetTaskList ( unit ) then
63522: LD_VAR 0 1
63526: PPUSH
63527: CALL_OW 437
63531: IFFALSE 63614
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63533: LD_STRING M
63535: PUSH
63536: LD_VAR 0 1
63540: PPUSH
63541: CALL_OW 437
63545: PUSH
63546: LD_INT 1
63548: ARRAY
63549: PUSH
63550: LD_INT 1
63552: ARRAY
63553: EQUAL
63554: PUSH
63555: LD_VAR 0 2
63559: PUSH
63560: LD_VAR 0 1
63564: PPUSH
63565: CALL_OW 437
63569: PUSH
63570: LD_INT 1
63572: ARRAY
63573: PUSH
63574: LD_INT 2
63576: ARRAY
63577: EQUAL
63578: AND
63579: PUSH
63580: LD_VAR 0 3
63584: PUSH
63585: LD_VAR 0 1
63589: PPUSH
63590: CALL_OW 437
63594: PUSH
63595: LD_INT 1
63597: ARRAY
63598: PUSH
63599: LD_INT 3
63601: ARRAY
63602: EQUAL
63603: AND
63604: IFFALSE 63614
// result := true ;
63606: LD_ADDR_VAR 0 4
63610: PUSH
63611: LD_INT 1
63613: ST_TO_ADDR
// end ; end ;
63614: LD_VAR 0 4
63618: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63619: LD_INT 0
63621: PPUSH
63622: PPUSH
63623: PPUSH
63624: PPUSH
// if not unit or not area then
63625: LD_VAR 0 1
63629: NOT
63630: PUSH
63631: LD_VAR 0 2
63635: NOT
63636: OR
63637: IFFALSE 63641
// exit ;
63639: GO 63805
// tmp := AreaToList ( area , i ) ;
63641: LD_ADDR_VAR 0 6
63645: PUSH
63646: LD_VAR 0 2
63650: PPUSH
63651: LD_VAR 0 5
63655: PPUSH
63656: CALL_OW 517
63660: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63661: LD_ADDR_VAR 0 5
63665: PUSH
63666: DOUBLE
63667: LD_INT 1
63669: DEC
63670: ST_TO_ADDR
63671: LD_VAR 0 6
63675: PUSH
63676: LD_INT 1
63678: ARRAY
63679: PUSH
63680: FOR_TO
63681: IFFALSE 63803
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63683: LD_ADDR_VAR 0 7
63687: PUSH
63688: LD_VAR 0 6
63692: PUSH
63693: LD_INT 1
63695: ARRAY
63696: PUSH
63697: LD_VAR 0 5
63701: ARRAY
63702: PUSH
63703: LD_VAR 0 6
63707: PUSH
63708: LD_INT 2
63710: ARRAY
63711: PUSH
63712: LD_VAR 0 5
63716: ARRAY
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63722: LD_VAR 0 7
63726: PUSH
63727: LD_INT 1
63729: ARRAY
63730: PPUSH
63731: LD_VAR 0 7
63735: PUSH
63736: LD_INT 2
63738: ARRAY
63739: PPUSH
63740: CALL_OW 428
63744: PUSH
63745: LD_INT 0
63747: EQUAL
63748: IFFALSE 63801
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63750: LD_VAR 0 1
63754: PPUSH
63755: LD_VAR 0 7
63759: PUSH
63760: LD_INT 1
63762: ARRAY
63763: PPUSH
63764: LD_VAR 0 7
63768: PUSH
63769: LD_INT 2
63771: ARRAY
63772: PPUSH
63773: LD_VAR 0 3
63777: PPUSH
63778: CALL_OW 48
// result := IsPlaced ( unit ) ;
63782: LD_ADDR_VAR 0 4
63786: PUSH
63787: LD_VAR 0 1
63791: PPUSH
63792: CALL_OW 305
63796: ST_TO_ADDR
// exit ;
63797: POP
63798: POP
63799: GO 63805
// end ; end ;
63801: GO 63680
63803: POP
63804: POP
// end ;
63805: LD_VAR 0 4
63809: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63810: LD_INT 0
63812: PPUSH
63813: PPUSH
63814: PPUSH
// if not side or side > 8 then
63815: LD_VAR 0 1
63819: NOT
63820: PUSH
63821: LD_VAR 0 1
63825: PUSH
63826: LD_INT 8
63828: GREATER
63829: OR
63830: IFFALSE 63834
// exit ;
63832: GO 64021
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63834: LD_ADDR_VAR 0 4
63838: PUSH
63839: LD_INT 22
63841: PUSH
63842: LD_VAR 0 1
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 21
63853: PUSH
63854: LD_INT 3
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PPUSH
63865: CALL_OW 69
63869: ST_TO_ADDR
// if not tmp then
63870: LD_VAR 0 4
63874: NOT
63875: IFFALSE 63879
// exit ;
63877: GO 64021
// enable_addtolog := true ;
63879: LD_ADDR_OWVAR 81
63883: PUSH
63884: LD_INT 1
63886: ST_TO_ADDR
// AddToLog ( [ ) ;
63887: LD_STRING [
63889: PPUSH
63890: CALL_OW 561
// for i in tmp do
63894: LD_ADDR_VAR 0 3
63898: PUSH
63899: LD_VAR 0 4
63903: PUSH
63904: FOR_IN
63905: IFFALSE 64012
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63907: LD_STRING [
63909: PUSH
63910: LD_VAR 0 3
63914: PPUSH
63915: CALL_OW 266
63919: STR
63920: PUSH
63921: LD_STRING , 
63923: STR
63924: PUSH
63925: LD_VAR 0 3
63929: PPUSH
63930: CALL_OW 250
63934: STR
63935: PUSH
63936: LD_STRING , 
63938: STR
63939: PUSH
63940: LD_VAR 0 3
63944: PPUSH
63945: CALL_OW 251
63949: STR
63950: PUSH
63951: LD_STRING , 
63953: STR
63954: PUSH
63955: LD_VAR 0 3
63959: PPUSH
63960: CALL_OW 254
63964: STR
63965: PUSH
63966: LD_STRING , 
63968: STR
63969: PUSH
63970: LD_VAR 0 3
63974: PPUSH
63975: LD_INT 1
63977: PPUSH
63978: CALL_OW 268
63982: STR
63983: PUSH
63984: LD_STRING , 
63986: STR
63987: PUSH
63988: LD_VAR 0 3
63992: PPUSH
63993: LD_INT 2
63995: PPUSH
63996: CALL_OW 268
64000: STR
64001: PUSH
64002: LD_STRING ],
64004: STR
64005: PPUSH
64006: CALL_OW 561
// end ;
64010: GO 63904
64012: POP
64013: POP
// AddToLog ( ]; ) ;
64014: LD_STRING ];
64016: PPUSH
64017: CALL_OW 561
// end ;
64021: LD_VAR 0 2
64025: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64026: LD_INT 0
64028: PPUSH
64029: PPUSH
64030: PPUSH
64031: PPUSH
64032: PPUSH
// if not area or not rate or not max then
64033: LD_VAR 0 1
64037: NOT
64038: PUSH
64039: LD_VAR 0 2
64043: NOT
64044: OR
64045: PUSH
64046: LD_VAR 0 4
64050: NOT
64051: OR
64052: IFFALSE 64056
// exit ;
64054: GO 64248
// while 1 do
64056: LD_INT 1
64058: IFFALSE 64248
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64060: LD_ADDR_VAR 0 9
64064: PUSH
64065: LD_VAR 0 1
64069: PPUSH
64070: LD_INT 1
64072: PPUSH
64073: CALL_OW 287
64077: PUSH
64078: LD_INT 10
64080: MUL
64081: ST_TO_ADDR
// r := rate / 10 ;
64082: LD_ADDR_VAR 0 7
64086: PUSH
64087: LD_VAR 0 2
64091: PUSH
64092: LD_INT 10
64094: DIVREAL
64095: ST_TO_ADDR
// time := 1 1$00 ;
64096: LD_ADDR_VAR 0 8
64100: PUSH
64101: LD_INT 2100
64103: ST_TO_ADDR
// if amount < min then
64104: LD_VAR 0 9
64108: PUSH
64109: LD_VAR 0 3
64113: LESS
64114: IFFALSE 64132
// r := r * 2 else
64116: LD_ADDR_VAR 0 7
64120: PUSH
64121: LD_VAR 0 7
64125: PUSH
64126: LD_INT 2
64128: MUL
64129: ST_TO_ADDR
64130: GO 64158
// if amount > max then
64132: LD_VAR 0 9
64136: PUSH
64137: LD_VAR 0 4
64141: GREATER
64142: IFFALSE 64158
// r := r / 2 ;
64144: LD_ADDR_VAR 0 7
64148: PUSH
64149: LD_VAR 0 7
64153: PUSH
64154: LD_INT 2
64156: DIVREAL
64157: ST_TO_ADDR
// time := time / r ;
64158: LD_ADDR_VAR 0 8
64162: PUSH
64163: LD_VAR 0 8
64167: PUSH
64168: LD_VAR 0 7
64172: DIVREAL
64173: ST_TO_ADDR
// if time < 0 then
64174: LD_VAR 0 8
64178: PUSH
64179: LD_INT 0
64181: LESS
64182: IFFALSE 64199
// time := time * - 1 ;
64184: LD_ADDR_VAR 0 8
64188: PUSH
64189: LD_VAR 0 8
64193: PUSH
64194: LD_INT 1
64196: NEG
64197: MUL
64198: ST_TO_ADDR
// wait ( time ) ;
64199: LD_VAR 0 8
64203: PPUSH
64204: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64208: LD_INT 35
64210: PPUSH
64211: LD_INT 875
64213: PPUSH
64214: CALL_OW 12
64218: PPUSH
64219: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64223: LD_INT 1
64225: PPUSH
64226: LD_INT 5
64228: PPUSH
64229: CALL_OW 12
64233: PPUSH
64234: LD_VAR 0 1
64238: PPUSH
64239: LD_INT 1
64241: PPUSH
64242: CALL_OW 55
// end ;
64246: GO 64056
// end ;
64248: LD_VAR 0 5
64252: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64253: LD_INT 0
64255: PPUSH
64256: PPUSH
64257: PPUSH
64258: PPUSH
64259: PPUSH
64260: PPUSH
64261: PPUSH
64262: PPUSH
// if not turrets or not factories then
64263: LD_VAR 0 1
64267: NOT
64268: PUSH
64269: LD_VAR 0 2
64273: NOT
64274: OR
64275: IFFALSE 64279
// exit ;
64277: GO 64586
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64279: LD_ADDR_VAR 0 10
64283: PUSH
64284: LD_INT 5
64286: PUSH
64287: LD_INT 6
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 2
64296: PUSH
64297: LD_INT 4
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 3
64306: PUSH
64307: LD_INT 5
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 24
64321: PUSH
64322: LD_INT 25
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 23
64331: PUSH
64332: LD_INT 27
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 42
64345: PUSH
64346: LD_INT 43
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 44
64355: PUSH
64356: LD_INT 46
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 45
64365: PUSH
64366: LD_INT 47
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: LIST
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: LIST
64382: ST_TO_ADDR
// result := [ ] ;
64383: LD_ADDR_VAR 0 3
64387: PUSH
64388: EMPTY
64389: ST_TO_ADDR
// for i in turrets do
64390: LD_ADDR_VAR 0 4
64394: PUSH
64395: LD_VAR 0 1
64399: PUSH
64400: FOR_IN
64401: IFFALSE 64584
// begin nat := GetNation ( i ) ;
64403: LD_ADDR_VAR 0 7
64407: PUSH
64408: LD_VAR 0 4
64412: PPUSH
64413: CALL_OW 248
64417: ST_TO_ADDR
// weapon := 0 ;
64418: LD_ADDR_VAR 0 8
64422: PUSH
64423: LD_INT 0
64425: ST_TO_ADDR
// if not nat then
64426: LD_VAR 0 7
64430: NOT
64431: IFFALSE 64435
// continue ;
64433: GO 64400
// for j in list [ nat ] do
64435: LD_ADDR_VAR 0 5
64439: PUSH
64440: LD_VAR 0 10
64444: PUSH
64445: LD_VAR 0 7
64449: ARRAY
64450: PUSH
64451: FOR_IN
64452: IFFALSE 64493
// if GetBWeapon ( i ) = j [ 1 ] then
64454: LD_VAR 0 4
64458: PPUSH
64459: CALL_OW 269
64463: PUSH
64464: LD_VAR 0 5
64468: PUSH
64469: LD_INT 1
64471: ARRAY
64472: EQUAL
64473: IFFALSE 64491
// begin weapon := j [ 2 ] ;
64475: LD_ADDR_VAR 0 8
64479: PUSH
64480: LD_VAR 0 5
64484: PUSH
64485: LD_INT 2
64487: ARRAY
64488: ST_TO_ADDR
// break ;
64489: GO 64493
// end ;
64491: GO 64451
64493: POP
64494: POP
// if not weapon then
64495: LD_VAR 0 8
64499: NOT
64500: IFFALSE 64504
// continue ;
64502: GO 64400
// for k in factories do
64504: LD_ADDR_VAR 0 6
64508: PUSH
64509: LD_VAR 0 2
64513: PUSH
64514: FOR_IN
64515: IFFALSE 64580
// begin weapons := AvailableWeaponList ( k ) ;
64517: LD_ADDR_VAR 0 9
64521: PUSH
64522: LD_VAR 0 6
64526: PPUSH
64527: CALL_OW 478
64531: ST_TO_ADDR
// if not weapons then
64532: LD_VAR 0 9
64536: NOT
64537: IFFALSE 64541
// continue ;
64539: GO 64514
// if weapon in weapons then
64541: LD_VAR 0 8
64545: PUSH
64546: LD_VAR 0 9
64550: IN
64551: IFFALSE 64578
// begin result := [ i , weapon ] ;
64553: LD_ADDR_VAR 0 3
64557: PUSH
64558: LD_VAR 0 4
64562: PUSH
64563: LD_VAR 0 8
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: ST_TO_ADDR
// exit ;
64572: POP
64573: POP
64574: POP
64575: POP
64576: GO 64586
// end ; end ;
64578: GO 64514
64580: POP
64581: POP
// end ;
64582: GO 64400
64584: POP
64585: POP
// end ;
64586: LD_VAR 0 3
64590: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64591: LD_INT 0
64593: PPUSH
// if not side or side > 8 then
64594: LD_VAR 0 3
64598: NOT
64599: PUSH
64600: LD_VAR 0 3
64604: PUSH
64605: LD_INT 8
64607: GREATER
64608: OR
64609: IFFALSE 64613
// exit ;
64611: GO 64672
// if not range then
64613: LD_VAR 0 4
64617: NOT
64618: IFFALSE 64629
// range := - 12 ;
64620: LD_ADDR_VAR 0 4
64624: PUSH
64625: LD_INT 12
64627: NEG
64628: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64629: LD_VAR 0 1
64633: PPUSH
64634: LD_VAR 0 2
64638: PPUSH
64639: LD_VAR 0 3
64643: PPUSH
64644: LD_VAR 0 4
64648: PPUSH
64649: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64653: LD_VAR 0 1
64657: PPUSH
64658: LD_VAR 0 2
64662: PPUSH
64663: LD_VAR 0 3
64667: PPUSH
64668: CALL_OW 331
// end ;
64672: LD_VAR 0 5
64676: RET
// export function Video ( mode ) ; begin
64677: LD_INT 0
64679: PPUSH
// ingame_video = mode ;
64680: LD_ADDR_OWVAR 52
64684: PUSH
64685: LD_VAR 0 1
64689: ST_TO_ADDR
// interface_hidden = mode ;
64690: LD_ADDR_OWVAR 54
64694: PUSH
64695: LD_VAR 0 1
64699: ST_TO_ADDR
// end ;
64700: LD_VAR 0 2
64704: RET
// export function Join ( array , element ) ; begin
64705: LD_INT 0
64707: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64708: LD_ADDR_VAR 0 3
64712: PUSH
64713: LD_VAR 0 1
64717: PPUSH
64718: LD_VAR 0 1
64722: PUSH
64723: LD_INT 1
64725: PLUS
64726: PPUSH
64727: LD_VAR 0 2
64731: PPUSH
64732: CALL_OW 1
64736: ST_TO_ADDR
// end ;
64737: LD_VAR 0 3
64741: RET
// export function JoinUnion ( array , element ) ; begin
64742: LD_INT 0
64744: PPUSH
// result := array union element ;
64745: LD_ADDR_VAR 0 3
64749: PUSH
64750: LD_VAR 0 1
64754: PUSH
64755: LD_VAR 0 2
64759: UNION
64760: ST_TO_ADDR
// end ;
64761: LD_VAR 0 3
64765: RET
// export function GetBehemoths ( side ) ; begin
64766: LD_INT 0
64768: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64769: LD_ADDR_VAR 0 2
64773: PUSH
64774: LD_INT 22
64776: PUSH
64777: LD_VAR 0 1
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 31
64788: PUSH
64789: LD_INT 25
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PPUSH
64800: CALL_OW 69
64804: ST_TO_ADDR
// end ;
64805: LD_VAR 0 2
64809: RET
// export function Shuffle ( array ) ; var i , index ; begin
64810: LD_INT 0
64812: PPUSH
64813: PPUSH
64814: PPUSH
// result := [ ] ;
64815: LD_ADDR_VAR 0 2
64819: PUSH
64820: EMPTY
64821: ST_TO_ADDR
// if not array then
64822: LD_VAR 0 1
64826: NOT
64827: IFFALSE 64831
// exit ;
64829: GO 64930
// Randomize ;
64831: CALL_OW 10
// for i = array downto 1 do
64835: LD_ADDR_VAR 0 3
64839: PUSH
64840: DOUBLE
64841: LD_VAR 0 1
64845: INC
64846: ST_TO_ADDR
64847: LD_INT 1
64849: PUSH
64850: FOR_DOWNTO
64851: IFFALSE 64928
// begin index := rand ( 1 , array ) ;
64853: LD_ADDR_VAR 0 4
64857: PUSH
64858: LD_INT 1
64860: PPUSH
64861: LD_VAR 0 1
64865: PPUSH
64866: CALL_OW 12
64870: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64871: LD_ADDR_VAR 0 2
64875: PUSH
64876: LD_VAR 0 2
64880: PPUSH
64881: LD_VAR 0 2
64885: PUSH
64886: LD_INT 1
64888: PLUS
64889: PPUSH
64890: LD_VAR 0 1
64894: PUSH
64895: LD_VAR 0 4
64899: ARRAY
64900: PPUSH
64901: CALL_OW 2
64905: ST_TO_ADDR
// array := Delete ( array , index ) ;
64906: LD_ADDR_VAR 0 1
64910: PUSH
64911: LD_VAR 0 1
64915: PPUSH
64916: LD_VAR 0 4
64920: PPUSH
64921: CALL_OW 3
64925: ST_TO_ADDR
// end ;
64926: GO 64850
64928: POP
64929: POP
// end ;
64930: LD_VAR 0 2
64934: RET
// export function GetBaseMaterials ( base ) ; begin
64935: LD_INT 0
64937: PPUSH
// result := [ 0 , 0 , 0 ] ;
64938: LD_ADDR_VAR 0 2
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: LIST
64956: ST_TO_ADDR
// if not base then
64957: LD_VAR 0 1
64961: NOT
64962: IFFALSE 64966
// exit ;
64964: GO 65015
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64966: LD_ADDR_VAR 0 2
64970: PUSH
64971: LD_VAR 0 1
64975: PPUSH
64976: LD_INT 1
64978: PPUSH
64979: CALL_OW 275
64983: PUSH
64984: LD_VAR 0 1
64988: PPUSH
64989: LD_INT 2
64991: PPUSH
64992: CALL_OW 275
64996: PUSH
64997: LD_VAR 0 1
65001: PPUSH
65002: LD_INT 3
65004: PPUSH
65005: CALL_OW 275
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: LIST
65014: ST_TO_ADDR
// end ;
65015: LD_VAR 0 2
65019: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65020: LD_INT 0
65022: PPUSH
65023: PPUSH
// result := array ;
65024: LD_ADDR_VAR 0 3
65028: PUSH
65029: LD_VAR 0 1
65033: ST_TO_ADDR
// if size > 0 then
65034: LD_VAR 0 2
65038: PUSH
65039: LD_INT 0
65041: GREATER
65042: IFFALSE 65088
// for i := array downto size do
65044: LD_ADDR_VAR 0 4
65048: PUSH
65049: DOUBLE
65050: LD_VAR 0 1
65054: INC
65055: ST_TO_ADDR
65056: LD_VAR 0 2
65060: PUSH
65061: FOR_DOWNTO
65062: IFFALSE 65086
// result := Delete ( result , result ) ;
65064: LD_ADDR_VAR 0 3
65068: PUSH
65069: LD_VAR 0 3
65073: PPUSH
65074: LD_VAR 0 3
65078: PPUSH
65079: CALL_OW 3
65083: ST_TO_ADDR
65084: GO 65061
65086: POP
65087: POP
// end ;
65088: LD_VAR 0 3
65092: RET
// export function ComExit ( unit ) ; var tmp ; begin
65093: LD_INT 0
65095: PPUSH
65096: PPUSH
// if not IsInUnit ( unit ) then
65097: LD_VAR 0 1
65101: PPUSH
65102: CALL_OW 310
65106: NOT
65107: IFFALSE 65111
// exit ;
65109: GO 65171
// tmp := IsInUnit ( unit ) ;
65111: LD_ADDR_VAR 0 3
65115: PUSH
65116: LD_VAR 0 1
65120: PPUSH
65121: CALL_OW 310
65125: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65126: LD_VAR 0 3
65130: PPUSH
65131: CALL_OW 247
65135: PUSH
65136: LD_INT 2
65138: EQUAL
65139: IFFALSE 65152
// ComExitVehicle ( unit ) else
65141: LD_VAR 0 1
65145: PPUSH
65146: CALL_OW 121
65150: GO 65161
// ComExitBuilding ( unit ) ;
65152: LD_VAR 0 1
65156: PPUSH
65157: CALL_OW 122
// result := tmp ;
65161: LD_ADDR_VAR 0 2
65165: PUSH
65166: LD_VAR 0 3
65170: ST_TO_ADDR
// end ;
65171: LD_VAR 0 2
65175: RET
// export function ComExitAll ( units ) ; var i ; begin
65176: LD_INT 0
65178: PPUSH
65179: PPUSH
// if not units then
65180: LD_VAR 0 1
65184: NOT
65185: IFFALSE 65189
// exit ;
65187: GO 65215
// for i in units do
65189: LD_ADDR_VAR 0 3
65193: PUSH
65194: LD_VAR 0 1
65198: PUSH
65199: FOR_IN
65200: IFFALSE 65213
// ComExit ( i ) ;
65202: LD_VAR 0 3
65206: PPUSH
65207: CALL 65093 0 1
65211: GO 65199
65213: POP
65214: POP
// end ;
65215: LD_VAR 0 2
65219: RET
// export function ResetHc ; begin
65220: LD_INT 0
65222: PPUSH
// InitHc ;
65223: CALL_OW 19
// hc_importance := 0 ;
65227: LD_ADDR_OWVAR 32
65231: PUSH
65232: LD_INT 0
65234: ST_TO_ADDR
// end ;
65235: LD_VAR 0 1
65239: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65240: LD_INT 0
65242: PPUSH
65243: PPUSH
65244: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65245: LD_ADDR_VAR 0 6
65249: PUSH
65250: LD_VAR 0 1
65254: PUSH
65255: LD_VAR 0 3
65259: PLUS
65260: PUSH
65261: LD_INT 2
65263: DIV
65264: ST_TO_ADDR
// if _x < 0 then
65265: LD_VAR 0 6
65269: PUSH
65270: LD_INT 0
65272: LESS
65273: IFFALSE 65290
// _x := _x * - 1 ;
65275: LD_ADDR_VAR 0 6
65279: PUSH
65280: LD_VAR 0 6
65284: PUSH
65285: LD_INT 1
65287: NEG
65288: MUL
65289: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65290: LD_ADDR_VAR 0 7
65294: PUSH
65295: LD_VAR 0 2
65299: PUSH
65300: LD_VAR 0 4
65304: PLUS
65305: PUSH
65306: LD_INT 2
65308: DIV
65309: ST_TO_ADDR
// if _y < 0 then
65310: LD_VAR 0 7
65314: PUSH
65315: LD_INT 0
65317: LESS
65318: IFFALSE 65335
// _y := _y * - 1 ;
65320: LD_ADDR_VAR 0 7
65324: PUSH
65325: LD_VAR 0 7
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: MUL
65334: ST_TO_ADDR
// result := [ _x , _y ] ;
65335: LD_ADDR_VAR 0 5
65339: PUSH
65340: LD_VAR 0 6
65344: PUSH
65345: LD_VAR 0 7
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: ST_TO_ADDR
// end ;
65354: LD_VAR 0 5
65358: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65359: LD_INT 0
65361: PPUSH
65362: PPUSH
65363: PPUSH
65364: PPUSH
// task := GetTaskList ( unit ) ;
65365: LD_ADDR_VAR 0 7
65369: PUSH
65370: LD_VAR 0 1
65374: PPUSH
65375: CALL_OW 437
65379: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65380: LD_VAR 0 7
65384: NOT
65385: PUSH
65386: LD_VAR 0 1
65390: PPUSH
65391: LD_VAR 0 2
65395: PPUSH
65396: CALL_OW 308
65400: NOT
65401: AND
65402: IFFALSE 65406
// exit ;
65404: GO 65524
// if IsInArea ( unit , area ) then
65406: LD_VAR 0 1
65410: PPUSH
65411: LD_VAR 0 2
65415: PPUSH
65416: CALL_OW 308
65420: IFFALSE 65438
// begin ComMoveToArea ( unit , goAway ) ;
65422: LD_VAR 0 1
65426: PPUSH
65427: LD_VAR 0 3
65431: PPUSH
65432: CALL_OW 113
// exit ;
65436: GO 65524
// end ; if task [ 1 ] [ 1 ] <> M then
65438: LD_VAR 0 7
65442: PUSH
65443: LD_INT 1
65445: ARRAY
65446: PUSH
65447: LD_INT 1
65449: ARRAY
65450: PUSH
65451: LD_STRING M
65453: NONEQUAL
65454: IFFALSE 65458
// exit ;
65456: GO 65524
// x := task [ 1 ] [ 2 ] ;
65458: LD_ADDR_VAR 0 5
65462: PUSH
65463: LD_VAR 0 7
65467: PUSH
65468: LD_INT 1
65470: ARRAY
65471: PUSH
65472: LD_INT 2
65474: ARRAY
65475: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65476: LD_ADDR_VAR 0 6
65480: PUSH
65481: LD_VAR 0 7
65485: PUSH
65486: LD_INT 1
65488: ARRAY
65489: PUSH
65490: LD_INT 3
65492: ARRAY
65493: ST_TO_ADDR
// if InArea ( x , y , area ) then
65494: LD_VAR 0 5
65498: PPUSH
65499: LD_VAR 0 6
65503: PPUSH
65504: LD_VAR 0 2
65508: PPUSH
65509: CALL_OW 309
65513: IFFALSE 65524
// ComStop ( unit ) ;
65515: LD_VAR 0 1
65519: PPUSH
65520: CALL_OW 141
// end ;
65524: LD_VAR 0 4
65528: RET
// export function Abs ( value ) ; begin
65529: LD_INT 0
65531: PPUSH
// result := value ;
65532: LD_ADDR_VAR 0 2
65536: PUSH
65537: LD_VAR 0 1
65541: ST_TO_ADDR
// if value < 0 then
65542: LD_VAR 0 1
65546: PUSH
65547: LD_INT 0
65549: LESS
65550: IFFALSE 65567
// result := value * - 1 ;
65552: LD_ADDR_VAR 0 2
65556: PUSH
65557: LD_VAR 0 1
65561: PUSH
65562: LD_INT 1
65564: NEG
65565: MUL
65566: ST_TO_ADDR
// end ;
65567: LD_VAR 0 2
65571: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65572: LD_INT 0
65574: PPUSH
65575: PPUSH
65576: PPUSH
65577: PPUSH
65578: PPUSH
65579: PPUSH
65580: PPUSH
65581: PPUSH
// if not unit or not building then
65582: LD_VAR 0 1
65586: NOT
65587: PUSH
65588: LD_VAR 0 2
65592: NOT
65593: OR
65594: IFFALSE 65598
// exit ;
65596: GO 65824
// x := GetX ( building ) ;
65598: LD_ADDR_VAR 0 4
65602: PUSH
65603: LD_VAR 0 2
65607: PPUSH
65608: CALL_OW 250
65612: ST_TO_ADDR
// y := GetY ( building ) ;
65613: LD_ADDR_VAR 0 6
65617: PUSH
65618: LD_VAR 0 2
65622: PPUSH
65623: CALL_OW 251
65627: ST_TO_ADDR
// d := GetDir ( building ) ;
65628: LD_ADDR_VAR 0 8
65632: PUSH
65633: LD_VAR 0 2
65637: PPUSH
65638: CALL_OW 254
65642: ST_TO_ADDR
// r := 4 ;
65643: LD_ADDR_VAR 0 9
65647: PUSH
65648: LD_INT 4
65650: ST_TO_ADDR
// for i := 1 to 5 do
65651: LD_ADDR_VAR 0 10
65655: PUSH
65656: DOUBLE
65657: LD_INT 1
65659: DEC
65660: ST_TO_ADDR
65661: LD_INT 5
65663: PUSH
65664: FOR_TO
65665: IFFALSE 65822
// begin _x := ShiftX ( x , d , r + i ) ;
65667: LD_ADDR_VAR 0 5
65671: PUSH
65672: LD_VAR 0 4
65676: PPUSH
65677: LD_VAR 0 8
65681: PPUSH
65682: LD_VAR 0 9
65686: PUSH
65687: LD_VAR 0 10
65691: PLUS
65692: PPUSH
65693: CALL_OW 272
65697: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65698: LD_ADDR_VAR 0 7
65702: PUSH
65703: LD_VAR 0 6
65707: PPUSH
65708: LD_VAR 0 8
65712: PPUSH
65713: LD_VAR 0 9
65717: PUSH
65718: LD_VAR 0 10
65722: PLUS
65723: PPUSH
65724: CALL_OW 273
65728: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65729: LD_VAR 0 5
65733: PPUSH
65734: LD_VAR 0 7
65738: PPUSH
65739: CALL_OW 488
65743: PUSH
65744: LD_VAR 0 5
65748: PPUSH
65749: LD_VAR 0 7
65753: PPUSH
65754: CALL_OW 428
65758: PPUSH
65759: CALL_OW 247
65763: PUSH
65764: LD_INT 3
65766: PUSH
65767: LD_INT 2
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: IN
65774: NOT
65775: AND
65776: IFFALSE 65820
// begin ComMoveXY ( unit , _x , _y ) ;
65778: LD_VAR 0 1
65782: PPUSH
65783: LD_VAR 0 5
65787: PPUSH
65788: LD_VAR 0 7
65792: PPUSH
65793: CALL_OW 111
// result := [ _x , _y ] ;
65797: LD_ADDR_VAR 0 3
65801: PUSH
65802: LD_VAR 0 5
65806: PUSH
65807: LD_VAR 0 7
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: ST_TO_ADDR
// exit ;
65816: POP
65817: POP
65818: GO 65824
// end ; end ;
65820: GO 65664
65822: POP
65823: POP
// end ;
65824: LD_VAR 0 3
65828: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65829: LD_INT 0
65831: PPUSH
65832: PPUSH
65833: PPUSH
// result := 0 ;
65834: LD_ADDR_VAR 0 3
65838: PUSH
65839: LD_INT 0
65841: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65842: LD_VAR 0 1
65846: PUSH
65847: LD_INT 0
65849: LESS
65850: PUSH
65851: LD_VAR 0 1
65855: PUSH
65856: LD_INT 8
65858: GREATER
65859: OR
65860: PUSH
65861: LD_VAR 0 2
65865: PUSH
65866: LD_INT 0
65868: LESS
65869: OR
65870: PUSH
65871: LD_VAR 0 2
65875: PUSH
65876: LD_INT 8
65878: GREATER
65879: OR
65880: IFFALSE 65884
// exit ;
65882: GO 65959
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65884: LD_ADDR_VAR 0 4
65888: PUSH
65889: LD_INT 22
65891: PUSH
65892: LD_VAR 0 2
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PPUSH
65901: CALL_OW 69
65905: PUSH
65906: FOR_IN
65907: IFFALSE 65957
// begin un := UnitShoot ( i ) ;
65909: LD_ADDR_VAR 0 5
65913: PUSH
65914: LD_VAR 0 4
65918: PPUSH
65919: CALL_OW 504
65923: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65924: LD_VAR 0 5
65928: PPUSH
65929: CALL_OW 255
65933: PUSH
65934: LD_VAR 0 1
65938: EQUAL
65939: IFFALSE 65955
// begin result := un ;
65941: LD_ADDR_VAR 0 3
65945: PUSH
65946: LD_VAR 0 5
65950: ST_TO_ADDR
// exit ;
65951: POP
65952: POP
65953: GO 65959
// end ; end ;
65955: GO 65906
65957: POP
65958: POP
// end ;
65959: LD_VAR 0 3
65963: RET
// export function GetCargoBay ( units ) ; begin
65964: LD_INT 0
65966: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65967: LD_ADDR_VAR 0 2
65971: PUSH
65972: LD_VAR 0 1
65976: PPUSH
65977: LD_INT 2
65979: PUSH
65980: LD_INT 34
65982: PUSH
65983: LD_INT 12
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 34
65992: PUSH
65993: LD_INT 51
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 34
66002: PUSH
66003: LD_INT 32
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 34
66012: PUSH
66013: LD_EXP 20
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: PPUSH
66029: CALL_OW 72
66033: ST_TO_ADDR
// end ;
66034: LD_VAR 0 2
66038: RET
// export function Negate ( value ) ; begin
66039: LD_INT 0
66041: PPUSH
// result := not value ;
66042: LD_ADDR_VAR 0 2
66046: PUSH
66047: LD_VAR 0 1
66051: NOT
66052: ST_TO_ADDR
// end ;
66053: LD_VAR 0 2
66057: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
66058: LD_INT 0
66060: PPUSH
// if x1 = x2 then
66061: LD_VAR 0 1
66065: PUSH
66066: LD_VAR 0 3
66070: EQUAL
66071: IFFALSE 66105
// begin if y1 > y2 then
66073: LD_VAR 0 2
66077: PUSH
66078: LD_VAR 0 4
66082: GREATER
66083: IFFALSE 66095
// result := 0 else
66085: LD_ADDR_VAR 0 5
66089: PUSH
66090: LD_INT 0
66092: ST_TO_ADDR
66093: GO 66103
// result := 3 ;
66095: LD_ADDR_VAR 0 5
66099: PUSH
66100: LD_INT 3
66102: ST_TO_ADDR
// exit ;
66103: GO 66191
// end ; if y1 = y2 then
66105: LD_VAR 0 2
66109: PUSH
66110: LD_VAR 0 4
66114: EQUAL
66115: IFFALSE 66149
// begin if x1 > x2 then
66117: LD_VAR 0 1
66121: PUSH
66122: LD_VAR 0 3
66126: GREATER
66127: IFFALSE 66139
// result := 1 else
66129: LD_ADDR_VAR 0 5
66133: PUSH
66134: LD_INT 1
66136: ST_TO_ADDR
66137: GO 66147
// result := 4 ;
66139: LD_ADDR_VAR 0 5
66143: PUSH
66144: LD_INT 4
66146: ST_TO_ADDR
// exit ;
66147: GO 66191
// end ; if x1 > x2 and y1 > y2 then
66149: LD_VAR 0 1
66153: PUSH
66154: LD_VAR 0 3
66158: GREATER
66159: PUSH
66160: LD_VAR 0 2
66164: PUSH
66165: LD_VAR 0 4
66169: GREATER
66170: AND
66171: IFFALSE 66183
// result := 2 else
66173: LD_ADDR_VAR 0 5
66177: PUSH
66178: LD_INT 2
66180: ST_TO_ADDR
66181: GO 66191
// result := 5 ;
66183: LD_ADDR_VAR 0 5
66187: PUSH
66188: LD_INT 5
66190: ST_TO_ADDR
// end ;
66191: LD_VAR 0 5
66195: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66196: LD_INT 0
66198: PPUSH
66199: PPUSH
// if not driver or not IsInUnit ( driver ) then
66200: LD_VAR 0 1
66204: NOT
66205: PUSH
66206: LD_VAR 0 1
66210: PPUSH
66211: CALL_OW 310
66215: NOT
66216: OR
66217: IFFALSE 66221
// exit ;
66219: GO 66311
// vehicle := IsInUnit ( driver ) ;
66221: LD_ADDR_VAR 0 3
66225: PUSH
66226: LD_VAR 0 1
66230: PPUSH
66231: CALL_OW 310
66235: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66236: LD_VAR 0 1
66240: PPUSH
66241: LD_STRING \
66243: PUSH
66244: LD_INT 0
66246: PUSH
66247: LD_INT 0
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: PUSH
66271: LD_STRING E
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: LD_INT 0
66279: PUSH
66280: LD_VAR 0 3
66284: PUSH
66285: LD_INT 0
66287: PUSH
66288: LD_INT 0
66290: PUSH
66291: LD_INT 0
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PPUSH
66307: CALL_OW 446
// end ;
66311: LD_VAR 0 2
66315: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66316: LD_INT 0
66318: PPUSH
66319: PPUSH
// if not driver or not IsInUnit ( driver ) then
66320: LD_VAR 0 1
66324: NOT
66325: PUSH
66326: LD_VAR 0 1
66330: PPUSH
66331: CALL_OW 310
66335: NOT
66336: OR
66337: IFFALSE 66341
// exit ;
66339: GO 66431
// vehicle := IsInUnit ( driver ) ;
66341: LD_ADDR_VAR 0 3
66345: PUSH
66346: LD_VAR 0 1
66350: PPUSH
66351: CALL_OW 310
66355: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66356: LD_VAR 0 1
66360: PPUSH
66361: LD_STRING \
66363: PUSH
66364: LD_INT 0
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: LD_INT 0
66372: PUSH
66373: LD_INT 0
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: PUSH
66391: LD_STRING E
66393: PUSH
66394: LD_INT 0
66396: PUSH
66397: LD_INT 0
66399: PUSH
66400: LD_VAR 0 3
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: LD_INT 0
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PPUSH
66427: CALL_OW 447
// end ;
66431: LD_VAR 0 2
66435: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66436: LD_INT 0
66438: PPUSH
66439: PPUSH
66440: PPUSH
// tmp := [ ] ;
66441: LD_ADDR_VAR 0 5
66445: PUSH
66446: EMPTY
66447: ST_TO_ADDR
// for i in units do
66448: LD_ADDR_VAR 0 4
66452: PUSH
66453: LD_VAR 0 1
66457: PUSH
66458: FOR_IN
66459: IFFALSE 66497
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66461: LD_ADDR_VAR 0 5
66465: PUSH
66466: LD_VAR 0 5
66470: PPUSH
66471: LD_VAR 0 5
66475: PUSH
66476: LD_INT 1
66478: PLUS
66479: PPUSH
66480: LD_VAR 0 4
66484: PPUSH
66485: CALL_OW 256
66489: PPUSH
66490: CALL_OW 2
66494: ST_TO_ADDR
66495: GO 66458
66497: POP
66498: POP
// if not tmp then
66499: LD_VAR 0 5
66503: NOT
66504: IFFALSE 66508
// exit ;
66506: GO 66556
// if asc then
66508: LD_VAR 0 2
66512: IFFALSE 66536
// result := SortListByListAsc ( units , tmp ) else
66514: LD_ADDR_VAR 0 3
66518: PUSH
66519: LD_VAR 0 1
66523: PPUSH
66524: LD_VAR 0 5
66528: PPUSH
66529: CALL_OW 76
66533: ST_TO_ADDR
66534: GO 66556
// result := SortListByListDesc ( units , tmp ) ;
66536: LD_ADDR_VAR 0 3
66540: PUSH
66541: LD_VAR 0 1
66545: PPUSH
66546: LD_VAR 0 5
66550: PPUSH
66551: CALL_OW 77
66555: ST_TO_ADDR
// end ;
66556: LD_VAR 0 3
66560: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66561: LD_INT 0
66563: PPUSH
66564: PPUSH
// task := GetTaskList ( mech ) ;
66565: LD_ADDR_VAR 0 4
66569: PUSH
66570: LD_VAR 0 1
66574: PPUSH
66575: CALL_OW 437
66579: ST_TO_ADDR
// if not task then
66580: LD_VAR 0 4
66584: NOT
66585: IFFALSE 66589
// exit ;
66587: GO 66631
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66589: LD_ADDR_VAR 0 3
66593: PUSH
66594: LD_VAR 0 4
66598: PUSH
66599: LD_INT 1
66601: ARRAY
66602: PUSH
66603: LD_INT 1
66605: ARRAY
66606: PUSH
66607: LD_STRING r
66609: EQUAL
66610: PUSH
66611: LD_VAR 0 4
66615: PUSH
66616: LD_INT 1
66618: ARRAY
66619: PUSH
66620: LD_INT 4
66622: ARRAY
66623: PUSH
66624: LD_VAR 0 2
66628: EQUAL
66629: AND
66630: ST_TO_ADDR
// end ;
66631: LD_VAR 0 3
66635: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66636: LD_INT 0
66638: PPUSH
// SetDir ( unit , d ) ;
66639: LD_VAR 0 1
66643: PPUSH
66644: LD_VAR 0 4
66648: PPUSH
66649: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66653: LD_VAR 0 1
66657: PPUSH
66658: LD_VAR 0 2
66662: PPUSH
66663: LD_VAR 0 3
66667: PPUSH
66668: LD_VAR 0 5
66672: PPUSH
66673: CALL_OW 48
// end ;
66677: LD_VAR 0 6
66681: RET
// export function ToNaturalNumber ( number ) ; begin
66682: LD_INT 0
66684: PPUSH
// result := number div 1 ;
66685: LD_ADDR_VAR 0 2
66689: PUSH
66690: LD_VAR 0 1
66694: PUSH
66695: LD_INT 1
66697: DIV
66698: ST_TO_ADDR
// if number < 0 then
66699: LD_VAR 0 1
66703: PUSH
66704: LD_INT 0
66706: LESS
66707: IFFALSE 66717
// result := 0 ;
66709: LD_ADDR_VAR 0 2
66713: PUSH
66714: LD_INT 0
66716: ST_TO_ADDR
// end ;
66717: LD_VAR 0 2
66721: RET
// export function SortByClass ( units , class ) ; var un ; begin
66722: LD_INT 0
66724: PPUSH
66725: PPUSH
// if not units or not class then
66726: LD_VAR 0 1
66730: NOT
66731: PUSH
66732: LD_VAR 0 2
66736: NOT
66737: OR
66738: IFFALSE 66742
// exit ;
66740: GO 66837
// result := [ ] ;
66742: LD_ADDR_VAR 0 3
66746: PUSH
66747: EMPTY
66748: ST_TO_ADDR
// for un in units do
66749: LD_ADDR_VAR 0 4
66753: PUSH
66754: LD_VAR 0 1
66758: PUSH
66759: FOR_IN
66760: IFFALSE 66835
// if GetClass ( un ) = class then
66762: LD_VAR 0 4
66766: PPUSH
66767: CALL_OW 257
66771: PUSH
66772: LD_VAR 0 2
66776: EQUAL
66777: IFFALSE 66804
// result := Insert ( result , 1 , un ) else
66779: LD_ADDR_VAR 0 3
66783: PUSH
66784: LD_VAR 0 3
66788: PPUSH
66789: LD_INT 1
66791: PPUSH
66792: LD_VAR 0 4
66796: PPUSH
66797: CALL_OW 2
66801: ST_TO_ADDR
66802: GO 66833
// result := Replace ( result , result + 1 , un ) ;
66804: LD_ADDR_VAR 0 3
66808: PUSH
66809: LD_VAR 0 3
66813: PPUSH
66814: LD_VAR 0 3
66818: PUSH
66819: LD_INT 1
66821: PLUS
66822: PPUSH
66823: LD_VAR 0 4
66827: PPUSH
66828: CALL_OW 1
66832: ST_TO_ADDR
66833: GO 66759
66835: POP
66836: POP
// end ;
66837: LD_VAR 0 3
66841: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66842: LD_INT 0
66844: PPUSH
66845: PPUSH
66846: PPUSH
66847: PPUSH
66848: PPUSH
66849: PPUSH
66850: PPUSH
// result := [ ] ;
66851: LD_ADDR_VAR 0 4
66855: PUSH
66856: EMPTY
66857: ST_TO_ADDR
// if x - r < 0 then
66858: LD_VAR 0 1
66862: PUSH
66863: LD_VAR 0 3
66867: MINUS
66868: PUSH
66869: LD_INT 0
66871: LESS
66872: IFFALSE 66884
// min_x := 0 else
66874: LD_ADDR_VAR 0 8
66878: PUSH
66879: LD_INT 0
66881: ST_TO_ADDR
66882: GO 66900
// min_x := x - r ;
66884: LD_ADDR_VAR 0 8
66888: PUSH
66889: LD_VAR 0 1
66893: PUSH
66894: LD_VAR 0 3
66898: MINUS
66899: ST_TO_ADDR
// if y - r < 0 then
66900: LD_VAR 0 2
66904: PUSH
66905: LD_VAR 0 3
66909: MINUS
66910: PUSH
66911: LD_INT 0
66913: LESS
66914: IFFALSE 66926
// min_y := 0 else
66916: LD_ADDR_VAR 0 7
66920: PUSH
66921: LD_INT 0
66923: ST_TO_ADDR
66924: GO 66942
// min_y := y - r ;
66926: LD_ADDR_VAR 0 7
66930: PUSH
66931: LD_VAR 0 2
66935: PUSH
66936: LD_VAR 0 3
66940: MINUS
66941: ST_TO_ADDR
// max_x := x + r ;
66942: LD_ADDR_VAR 0 9
66946: PUSH
66947: LD_VAR 0 1
66951: PUSH
66952: LD_VAR 0 3
66956: PLUS
66957: ST_TO_ADDR
// max_y := y + r ;
66958: LD_ADDR_VAR 0 10
66962: PUSH
66963: LD_VAR 0 2
66967: PUSH
66968: LD_VAR 0 3
66972: PLUS
66973: ST_TO_ADDR
// for _x = min_x to max_x do
66974: LD_ADDR_VAR 0 5
66978: PUSH
66979: DOUBLE
66980: LD_VAR 0 8
66984: DEC
66985: ST_TO_ADDR
66986: LD_VAR 0 9
66990: PUSH
66991: FOR_TO
66992: IFFALSE 67093
// for _y = min_y to max_y do
66994: LD_ADDR_VAR 0 6
66998: PUSH
66999: DOUBLE
67000: LD_VAR 0 7
67004: DEC
67005: ST_TO_ADDR
67006: LD_VAR 0 10
67010: PUSH
67011: FOR_TO
67012: IFFALSE 67089
// begin if not ValidHex ( _x , _y ) then
67014: LD_VAR 0 5
67018: PPUSH
67019: LD_VAR 0 6
67023: PPUSH
67024: CALL_OW 488
67028: NOT
67029: IFFALSE 67033
// continue ;
67031: GO 67011
// if GetResourceTypeXY ( _x , _y ) then
67033: LD_VAR 0 5
67037: PPUSH
67038: LD_VAR 0 6
67042: PPUSH
67043: CALL_OW 283
67047: IFFALSE 67087
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67049: LD_ADDR_VAR 0 4
67053: PUSH
67054: LD_VAR 0 4
67058: PPUSH
67059: LD_VAR 0 4
67063: PUSH
67064: LD_INT 1
67066: PLUS
67067: PPUSH
67068: LD_VAR 0 5
67072: PUSH
67073: LD_VAR 0 6
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PPUSH
67082: CALL_OW 1
67086: ST_TO_ADDR
// end ;
67087: GO 67011
67089: POP
67090: POP
67091: GO 66991
67093: POP
67094: POP
// end ;
67095: LD_VAR 0 4
67099: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
67100: LD_INT 0
67102: PPUSH
67103: PPUSH
67104: PPUSH
67105: PPUSH
67106: PPUSH
67107: PPUSH
// if not units then
67108: LD_VAR 0 1
67112: NOT
67113: IFFALSE 67117
// exit ;
67115: GO 67518
// result := UnitFilter ( units , [ f_ok ] ) ;
67117: LD_ADDR_VAR 0 3
67121: PUSH
67122: LD_VAR 0 1
67126: PPUSH
67127: LD_INT 50
67129: PUSH
67130: EMPTY
67131: LIST
67132: PPUSH
67133: CALL_OW 72
67137: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67138: LD_ADDR_VAR 0 7
67142: PUSH
67143: LD_VAR 0 1
67147: PUSH
67148: LD_INT 1
67150: ARRAY
67151: PPUSH
67152: CALL_OW 255
67156: ST_TO_ADDR
// if not result then
67157: LD_VAR 0 3
67161: NOT
67162: IFFALSE 67166
// exit ;
67164: GO 67518
// for i in result do
67166: LD_ADDR_VAR 0 4
67170: PUSH
67171: LD_VAR 0 3
67175: PUSH
67176: FOR_IN
67177: IFFALSE 67516
// begin tag := GetTag ( i ) + 1 ;
67179: LD_ADDR_VAR 0 8
67183: PUSH
67184: LD_VAR 0 4
67188: PPUSH
67189: CALL_OW 110
67193: PUSH
67194: LD_INT 1
67196: PLUS
67197: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67198: LD_ADDR_VAR 0 6
67202: PUSH
67203: LD_VAR 0 4
67207: PPUSH
67208: CALL_OW 250
67212: PPUSH
67213: LD_VAR 0 4
67217: PPUSH
67218: CALL_OW 251
67222: PPUSH
67223: LD_INT 6
67225: PPUSH
67226: CALL 66842 0 3
67230: ST_TO_ADDR
// if cr then
67231: LD_VAR 0 6
67235: IFFALSE 67274
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67237: LD_VAR 0 4
67241: PPUSH
67242: LD_VAR 0 6
67246: PUSH
67247: LD_INT 1
67249: ARRAY
67250: PUSH
67251: LD_INT 1
67253: ARRAY
67254: PPUSH
67255: LD_VAR 0 6
67259: PUSH
67260: LD_INT 1
67262: ARRAY
67263: PUSH
67264: LD_INT 2
67266: ARRAY
67267: PPUSH
67268: CALL_OW 116
67272: GO 67514
// if path > tag then
67274: LD_VAR 0 2
67278: PUSH
67279: LD_VAR 0 8
67283: GREATER
67284: IFFALSE 67462
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
67286: LD_ADDR_VAR 0 5
67290: PUSH
67291: LD_INT 81
67293: PUSH
67294: LD_VAR 0 7
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 91
67305: PUSH
67306: LD_VAR 0 4
67310: PUSH
67311: LD_INT 12
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: LIST
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PPUSH
67323: CALL_OW 69
67327: ST_TO_ADDR
// if enemy then
67328: LD_VAR 0 5
67332: IFFALSE 67360
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67334: LD_VAR 0 4
67338: PPUSH
67339: LD_VAR 0 5
67343: PPUSH
67344: LD_VAR 0 4
67348: PPUSH
67349: CALL_OW 74
67353: PPUSH
67354: CALL_OW 115
67358: GO 67460
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67360: LD_VAR 0 4
67364: PPUSH
67365: LD_VAR 0 2
67369: PUSH
67370: LD_VAR 0 8
67374: ARRAY
67375: PUSH
67376: LD_INT 1
67378: ARRAY
67379: PPUSH
67380: LD_VAR 0 2
67384: PUSH
67385: LD_VAR 0 8
67389: ARRAY
67390: PUSH
67391: LD_INT 2
67393: ARRAY
67394: PPUSH
67395: CALL_OW 297
67399: PUSH
67400: LD_INT 6
67402: GREATER
67403: IFFALSE 67446
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67405: LD_VAR 0 4
67409: PPUSH
67410: LD_VAR 0 2
67414: PUSH
67415: LD_VAR 0 8
67419: ARRAY
67420: PUSH
67421: LD_INT 1
67423: ARRAY
67424: PPUSH
67425: LD_VAR 0 2
67429: PUSH
67430: LD_VAR 0 8
67434: ARRAY
67435: PUSH
67436: LD_INT 2
67438: ARRAY
67439: PPUSH
67440: CALL_OW 114
67444: GO 67460
// SetTag ( i , tag ) ;
67446: LD_VAR 0 4
67450: PPUSH
67451: LD_VAR 0 8
67455: PPUSH
67456: CALL_OW 109
// end else
67460: GO 67514
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67462: LD_ADDR_VAR 0 5
67466: PUSH
67467: LD_INT 81
67469: PUSH
67470: LD_VAR 0 7
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PPUSH
67479: CALL_OW 69
67483: ST_TO_ADDR
// if enemy then
67484: LD_VAR 0 5
67488: IFFALSE 67514
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67490: LD_VAR 0 4
67494: PPUSH
67495: LD_VAR 0 5
67499: PPUSH
67500: LD_VAR 0 4
67504: PPUSH
67505: CALL_OW 74
67509: PPUSH
67510: CALL_OW 115
// end ; end ;
67514: GO 67176
67516: POP
67517: POP
// end ; end_of_file
67518: LD_VAR 0 3
67522: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67523: LD_VAR 0 1
67527: PUSH
67528: LD_INT 200
67530: DOUBLE
67531: GREATEREQUAL
67532: IFFALSE 67540
67534: LD_INT 299
67536: DOUBLE
67537: LESSEQUAL
67538: IFTRUE 67542
67540: GO 67574
67542: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67543: LD_VAR 0 1
67547: PPUSH
67548: LD_VAR 0 2
67552: PPUSH
67553: LD_VAR 0 3
67557: PPUSH
67558: LD_VAR 0 4
67562: PPUSH
67563: LD_VAR 0 5
67567: PPUSH
67568: CALL 24085 0 5
67572: GO 67651
67574: LD_INT 300
67576: DOUBLE
67577: GREATEREQUAL
67578: IFFALSE 67586
67580: LD_INT 399
67582: DOUBLE
67583: LESSEQUAL
67584: IFTRUE 67588
67586: GO 67650
67588: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67589: LD_VAR 0 1
67593: PPUSH
67594: LD_VAR 0 2
67598: PPUSH
67599: LD_VAR 0 3
67603: PPUSH
67604: LD_VAR 0 4
67608: PPUSH
67609: LD_VAR 0 5
67613: PPUSH
67614: LD_VAR 0 6
67618: PPUSH
67619: LD_VAR 0 7
67623: PPUSH
67624: LD_VAR 0 8
67628: PPUSH
67629: LD_VAR 0 9
67633: PPUSH
67634: LD_VAR 0 10
67638: PPUSH
67639: LD_VAR 0 11
67643: PPUSH
67644: CALL 21973 0 11
67648: GO 67651
67650: POP
// end ;
67651: PPOPN 11
67653: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67654: LD_VAR 0 1
67658: PPUSH
67659: LD_VAR 0 2
67663: PPUSH
67664: LD_VAR 0 3
67668: PPUSH
67669: LD_VAR 0 4
67673: PPUSH
67674: LD_VAR 0 5
67678: PPUSH
67679: CALL 24067 0 5
// end ; end_of_file
67683: PPOPN 5
67685: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67686: LD_VAR 0 1
67690: PPUSH
67691: LD_VAR 0 2
67695: PPUSH
67696: LD_VAR 0 3
67700: PPUSH
67701: LD_VAR 0 4
67705: PPUSH
67706: LD_VAR 0 5
67710: PPUSH
67711: LD_VAR 0 6
67715: PPUSH
67716: CALL 10781 0 6
// end ;
67720: PPOPN 6
67722: END
