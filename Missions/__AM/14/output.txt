// export JMM ; export Joan , Lisa , Connie ; export Powell ; export Eisenstein ; export JMMGirl , JMMGirlStaus ; export amLaserCounter ; export ruDestroyedBuildings , russianTanks , russianTimeLapsers ; export russianAI ; export russianRocketsAvalaible ; export fastEnd ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( ru_depot , vasilev ) ;
   8: LD_INT 22
  10: PPUSH
  11: LD_STRING vasilev
  13: PPUSH
  14: CALL_OW 500
// fastEnd = 0 ;
  18: LD_ADDR_EXP 15
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// JMMGirl = 0 ;
  26: LD_ADDR_EXP 7
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// JMMGirlStaus = 0 ;
  34: LD_ADDR_EXP 8
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// amLaserCounter = 0 ;
  42: LD_ADDR_EXP 9
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 10
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 11
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 12
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// russianRocketsAvalaible = LoadVariable ( 12_SciDed_1 , 1 ) ;
  71: LD_ADDR_EXP 14
  75: PUSH
  76: LD_STRING 12_SciDed_1
  78: PPUSH
  79: LD_INT 1
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// russianAI = 0 ;
  87: LD_ADDR_EXP 13
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// debugMode = 0 ;
  95: LD_ADDR_EXP 16
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// PrepareDifficulty ;
 103: CALL 1286 0 0
// PrepareHero ;
 107: CALL 441 0 0
// PrepareRemoteVehs ;
 111: CALL 750 0 0
// PrepareRussianBase ;
 115: CALL 939 0 0
// PrepareCommander ;
 119: CALL 884 0 0
// end ;
 123: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 124: LD_EXP 16
 128: PUSH
 129: LD_INT 1
 131: EQUAL
 132: IFFALSE 438
 134: GO 136
 136: DISABLE
 137: LD_INT 0
 139: PPUSH
// begin enable ;
 140: ENABLE
// fogoff ( true ) ;
 141: LD_INT 1
 143: PPUSH
 144: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 148: LD_ADDR_VAR 0 1
 152: PUSH
 153: LD_INT 22
 155: PUSH
 156: LD_INT 1
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: PUSH
 163: LD_INT 21
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PPUSH
 177: CALL_OW 69
 181: PUSH
 182: FOR_IN
 183: IFFALSE 199
// SetLives ( i , 1000 ) ;
 185: LD_VAR 0 1
 189: PPUSH
 190: LD_INT 1000
 192: PPUSH
 193: CALL_OW 234
 197: GO 182
 199: POP
 200: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 201: LD_ADDR_VAR 0 1
 205: PUSH
 206: LD_INT 22
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 30
 221: PUSH
 222: LD_INT 0
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: PUSH
 229: LD_INT 30
 231: PUSH
 232: LD_INT 1
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PPUSH
 248: CALL_OW 69
 252: PUSH
 253: FOR_IN
 254: IFFALSE 278
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 256: LD_VAR 0 1
 260: PPUSH
 261: CALL_OW 274
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 9999
 271: PPUSH
 272: CALL_OW 277
 276: GO 253
 278: POP
 279: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 280: LD_ADDR_VAR 0 1
 284: PUSH
 285: LD_INT 22
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: LD_INT 30
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 30
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 357
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: CALL_OW 274
 344: PPUSH
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 9999
 350: PPUSH
 351: CALL_OW 277
 355: GO 332
 357: POP
 358: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 359: LD_ADDR_VAR 0 1
 363: PUSH
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 30
 379: PUSH
 380: LD_INT 0
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 30
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PUSH
 411: FOR_IN
 412: IFFALSE 436
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 414: LD_VAR 0 1
 418: PPUSH
 419: CALL_OW 274
 423: PPUSH
 424: LD_INT 3
 426: PPUSH
 427: LD_INT 9999
 429: PPUSH
 430: CALL_OW 277
 434: GO 411
 436: POP
 437: POP
// end ; end_of_file
 438: PPOPN 1
 440: END
// export function PrepareHero ; begin
 441: LD_INT 0
 443: PPUSH
// uc_side = 1 ;
 444: LD_ADDR_OWVAR 20
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// uc_nation = 1 ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// JMM = PrepareUnit ( 13f_JMM , true ) ;
 460: LD_ADDR_EXP 1
 464: PUSH
 465: LD_STRING 13f_JMM
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: CALL 1079 0 2
 475: ST_TO_ADDR
// if debugMode then
 476: LD_EXP 16
 480: IFFALSE 495
// JMM := NewCharacter ( JMM ) ;
 482: LD_ADDR_EXP 1
 486: PUSH
 487: LD_STRING JMM
 489: PPUSH
 490: CALL_OW 25
 494: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 495: LD_EXP 1
 499: PPUSH
 500: LD_INT 95
 502: PPUSH
 503: CALL_OW 52
// SetClass ( JMM , 1 ) ;
 507: LD_EXP 1
 511: PPUSH
 512: LD_INT 1
 514: PPUSH
 515: CALL_OW 336
// Powell = PrepareUnit ( Powell , false ) ;
 519: LD_ADDR_EXP 5
 523: PUSH
 524: LD_STRING Powell
 526: PPUSH
 527: LD_INT 0
 529: PPUSH
 530: CALL 1079 0 2
 534: ST_TO_ADDR
// uc_side = 4 ;
 535: LD_ADDR_OWVAR 20
 539: PUSH
 540: LD_INT 4
 542: ST_TO_ADDR
// Joan = PrepareUnit ( 10c_Joan , true ) ;
 543: LD_ADDR_EXP 2
 547: PUSH
 548: LD_STRING 10c_Joan
 550: PPUSH
 551: LD_INT 1
 553: PPUSH
 554: CALL 1079 0 2
 558: ST_TO_ADDR
// if Joan then
 559: LD_EXP 2
 563: IFFALSE 602
// begin PlaceUnitArea ( Joan , JoanSpawn , false ) ;
 565: LD_EXP 2
 569: PPUSH
 570: LD_INT 4
 572: PPUSH
 573: LD_INT 0
 575: PPUSH
 576: CALL_OW 49
// SetClass ( Joan , 4 ) ;
 580: LD_EXP 2
 584: PPUSH
 585: LD_INT 4
 587: PPUSH
 588: CALL_OW 336
// JMMGirl = 1 ;
 592: LD_ADDR_EXP 7
 596: PUSH
 597: LD_INT 1
 599: ST_TO_ADDR
// end else
 600: GO 659
// begin Lisa = PrepareUnit ( 13s_Lisa , true ) ;
 602: LD_ADDR_EXP 3
 606: PUSH
 607: LD_STRING 13s_Lisa
 609: PPUSH
 610: LD_INT 1
 612: PPUSH
 613: CALL 1079 0 2
 617: ST_TO_ADDR
// if Lisa then
 618: LD_EXP 3
 622: IFFALSE 659
// begin PlaceUnitArea ( Lisa , JoanSpawn , false ) ;
 624: LD_EXP 3
 628: PPUSH
 629: LD_INT 4
 631: PPUSH
 632: LD_INT 0
 634: PPUSH
 635: CALL_OW 49
// SetClass ( Lisa , 1 ) ;
 639: LD_EXP 3
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: CALL_OW 336
// JMMGirl = 2 ;
 651: LD_ADDR_EXP 7
 655: PUSH
 656: LD_INT 2
 658: ST_TO_ADDR
// end ; end ; if not Joan and not Lisa then
 659: LD_EXP 2
 663: NOT
 664: PUSH
 665: LD_EXP 3
 669: NOT
 670: AND
 671: IFFALSE 721
// begin Connie = NewCharacter ( Coonie ) ;
 673: LD_ADDR_EXP 4
 677: PUSH
 678: LD_STRING Coonie
 680: PPUSH
 681: CALL_OW 25
 685: ST_TO_ADDR
// PlaceUnitArea ( Connie , JoanSpawn , false ) ;
 686: LD_EXP 4
 690: PPUSH
 691: LD_INT 4
 693: PPUSH
 694: LD_INT 0
 696: PPUSH
 697: CALL_OW 49
// SetClass ( Connie , 3 ) ;
 701: LD_EXP 4
 705: PPUSH
 706: LD_INT 3
 708: PPUSH
 709: CALL_OW 336
// JMMGirl = 3 ;
 713: LD_ADDR_EXP 7
 717: PUSH
 718: LD_INT 3
 720: ST_TO_ADDR
// end ; ComHold ( [ Joan , Lisa , Connie ] ) ;
 721: LD_EXP 2
 725: PUSH
 726: LD_EXP 3
 730: PUSH
 731: LD_EXP 4
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 140
// end ;
 745: LD_VAR 0 1
 749: RET
// export function PrepareRemoteVehs ; var i , veh ; begin
 750: LD_INT 0
 752: PPUSH
 753: PPUSH
 754: PPUSH
// for i = 1 to 5 do
 755: LD_ADDR_VAR 0 2
 759: PUSH
 760: DOUBLE
 761: LD_INT 1
 763: DEC
 764: ST_TO_ADDR
 765: LD_INT 5
 767: PUSH
 768: FOR_TO
 769: IFFALSE 877
// begin vc_engine = 1 ;
 771: LD_ADDR_OWVAR 39
 775: PUSH
 776: LD_INT 1
 778: ST_TO_ADDR
// vc_control = 2 ;
 779: LD_ADDR_OWVAR 38
 783: PUSH
 784: LD_INT 2
 786: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 12 , 4 ] [ Rand ( 1 , 4 ) ] ;
 787: LD_ADDR_OWVAR 40
 791: PUSH
 792: LD_INT 9
 794: PUSH
 795: LD_INT 5
 797: PUSH
 798: LD_INT 12
 800: PUSH
 801: LD_INT 4
 803: PUSH
 804: EMPTY
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: PUSH
 810: LD_INT 1
 812: PPUSH
 813: LD_INT 4
 815: PPUSH
 816: CALL_OW 12
 820: ARRAY
 821: ST_TO_ADDR
// vc_chassis = 2 ;
 822: LD_ADDR_OWVAR 37
 826: PUSH
 827: LD_INT 2
 829: ST_TO_ADDR
// veh = CreateVehicle ;
 830: LD_ADDR_VAR 0 3
 834: PUSH
 835: CALL_OW 45
 839: ST_TO_ADDR
// SetLives ( veh , rand ( 500 , 1000 ) ) ;
 840: LD_VAR 0 3
 844: PPUSH
 845: LD_INT 500
 847: PPUSH
 848: LD_INT 1000
 850: PPUSH
 851: CALL_OW 12
 855: PPUSH
 856: CALL_OW 234
// PlaceUnitArea ( veh , AmRemoteVehSpawn , false ) ;
 860: LD_VAR 0 3
 864: PPUSH
 865: LD_INT 15
 867: PPUSH
 868: LD_INT 0
 870: PPUSH
 871: CALL_OW 49
// end ;
 875: GO 768
 877: POP
 878: POP
// end ; end_of_file
 879: LD_VAR 0 1
 883: RET
// export function PrepareCommander ; begin
 884: LD_INT 0
 886: PPUSH
// uc_side = 3 ;
 887: LD_ADDR_OWVAR 20
 891: PUSH
 892: LD_INT 3
 894: ST_TO_ADDR
// uc_nation = 3 ;
 895: LD_ADDR_OWVAR 21
 899: PUSH
 900: LD_INT 3
 902: ST_TO_ADDR
// Eisenstein = PrepareUnit ( Eisenstein , false ) ;
 903: LD_ADDR_EXP 6
 907: PUSH
 908: LD_STRING Eisenstein
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL 1079 0 2
 918: ST_TO_ADDR
// PlaceUnitArea ( Eisenstein , CommanderSpawn , false ) ;
 919: LD_EXP 6
 923: PPUSH
 924: LD_INT 11
 926: PPUSH
 927: LD_INT 0
 929: PPUSH
 930: CALL_OW 49
// end ;
 934: LD_VAR 0 1
 938: RET
// export function PrepareRussianBase ; begin
 939: LD_INT 0
 941: PPUSH
// RespawnInside ( 3 , 3 , ru_barac , 10 , 9 , 2 ) ;
 942: LD_INT 3
 944: PPUSH
 945: LD_INT 3
 947: PPUSH
 948: LD_INT 45
 950: PPUSH
 951: LD_INT 10
 953: PPUSH
 954: LD_INT 9
 956: PPUSH
 957: LD_INT 2
 959: PPUSH
 960: CALL 1176 0 6
// RespawnInside ( 3 , 3 , ru_depot , 10 , 2 , 2 ) ;
 964: LD_INT 3
 966: PPUSH
 967: LD_INT 3
 969: PPUSH
 970: LD_INT 22
 972: PPUSH
 973: LD_INT 10
 975: PPUSH
 976: LD_INT 2
 978: PPUSH
 979: LD_INT 2
 981: PPUSH
 982: CALL 1176 0 6
// RespawnInside ( 3 , 3 , ru_fact1 , 10 , 3 , 3 ) ;
 986: LD_INT 3
 988: PPUSH
 989: LD_INT 3
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: LD_INT 10
 997: PPUSH
 998: LD_INT 3
1000: PPUSH
1001: LD_INT 3
1003: PPUSH
1004: CALL 1176 0 6
// RespawnInside ( 3 , 3 , ru_fact2 , 10 , 3 , 3 ) ;
1008: LD_INT 3
1010: PPUSH
1011: LD_INT 3
1013: PPUSH
1014: LD_INT 40
1016: PPUSH
1017: LD_INT 10
1019: PPUSH
1020: LD_INT 3
1022: PPUSH
1023: LD_INT 3
1025: PPUSH
1026: CALL 1176 0 6
// RespawnInside ( 3 , 3 , ru_lab1 , 10 , 4 , 1 ) ;
1030: LD_INT 3
1032: PPUSH
1033: LD_INT 3
1035: PPUSH
1036: LD_INT 14
1038: PPUSH
1039: LD_INT 10
1041: PPUSH
1042: LD_INT 4
1044: PPUSH
1045: LD_INT 1
1047: PPUSH
1048: CALL 1176 0 6
// RespawnInside ( 3 , 3 , ru_lab2 , 10 , 4 , 2 ) ;
1052: LD_INT 3
1054: PPUSH
1055: LD_INT 3
1057: PPUSH
1058: LD_INT 15
1060: PPUSH
1061: LD_INT 10
1063: PPUSH
1064: LD_INT 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: CALL 1176 0 6
// end ; end_of_file
1074: LD_VAR 0 1
1078: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1079: LD_INT 0
1081: PPUSH
1082: PPUSH
// if exist_mode then
1083: LD_VAR 0 2
1087: IFFALSE 1106
// begin unit := CreateCharacter ( ident ) ;
1089: LD_ADDR_VAR 0 4
1093: PUSH
1094: LD_VAR 0 1
1098: PPUSH
1099: CALL_OW 34
1103: ST_TO_ADDR
// end else
1104: GO 1121
// begin unit := NewCharacter ( ident ) ;
1106: LD_ADDR_VAR 0 4
1110: PUSH
1111: LD_VAR 0 1
1115: PPUSH
1116: CALL_OW 25
1120: ST_TO_ADDR
// end ; result := unit ;
1121: LD_ADDR_VAR 0 3
1125: PUSH
1126: LD_VAR 0 4
1130: ST_TO_ADDR
// end ;
1131: LD_VAR 0 3
1135: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
1136: LD_INT 0
1138: PPUSH
1139: PPUSH
// for i in charactersList do
1140: LD_ADDR_VAR 0 4
1144: PUSH
1145: LD_VAR 0 1
1149: PUSH
1150: FOR_IN
1151: IFFALSE 1169
// SaveCharacters ( i , ident ) ;
1153: LD_VAR 0 4
1157: PPUSH
1158: LD_VAR 0 2
1162: PPUSH
1163: CALL_OW 38
1167: GO 1150
1169: POP
1170: POP
// end ;
1171: LD_VAR 0 3
1175: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
1176: LD_INT 0
1178: PPUSH
1179: PPUSH
1180: PPUSH
1181: PPUSH
// for i = 1 to count do
1182: LD_ADDR_VAR 0 8
1186: PUSH
1187: DOUBLE
1188: LD_INT 1
1190: DEC
1191: ST_TO_ADDR
1192: LD_VAR 0 6
1196: PUSH
1197: FOR_TO
1198: IFFALSE 1279
// begin uc_side = side ;
1200: LD_ADDR_OWVAR 20
1204: PUSH
1205: LD_VAR 0 1
1209: ST_TO_ADDR
// uc_nation = nation ;
1210: LD_ADDR_OWVAR 21
1214: PUSH
1215: LD_VAR 0 2
1219: ST_TO_ADDR
// hc_gallery =  ;
1220: LD_ADDR_OWVAR 33
1224: PUSH
1225: LD_STRING 
1227: ST_TO_ADDR
// hc_name =  ;
1228: LD_ADDR_OWVAR 26
1232: PUSH
1233: LD_STRING 
1235: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
1236: LD_INT 0
1238: PPUSH
1239: LD_VAR 0 5
1243: PPUSH
1244: LD_VAR 0 4
1248: PPUSH
1249: CALL_OW 380
// un = CreateHuman ;
1253: LD_ADDR_VAR 0 10
1257: PUSH
1258: CALL_OW 44
1262: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
1263: LD_VAR 0 10
1267: PPUSH
1268: LD_VAR 0 3
1272: PPUSH
1273: CALL_OW 52
// end ;
1277: GO 1197
1279: POP
1280: POP
// end ;
1281: LD_VAR 0 7
1285: RET
// export function PrepareDifficulty ; begin
1286: LD_INT 0
1288: PPUSH
// if difficulty = 1 then
1289: LD_OWVAR 67
1293: PUSH
1294: LD_INT 1
1296: EQUAL
1297: IFFALSE 1377
// begin SetTech ( 57 , 3 , state_disabled ) ;
1299: LD_INT 57
1301: PPUSH
1302: LD_INT 3
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1312: LD_INT 58
1314: PPUSH
1315: LD_INT 3
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1325: LD_INT 59
1327: PPUSH
1328: LD_INT 3
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 322
// SetTech ( 51 , 3 , state_disabled ) ;
1338: LD_INT 51
1340: PPUSH
1341: LD_INT 3
1343: PPUSH
1344: LD_INT 0
1346: PPUSH
1347: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1351: LD_INT 52
1353: PPUSH
1354: LD_INT 3
1356: PPUSH
1357: LD_INT 0
1359: PPUSH
1360: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1364: LD_INT 53
1366: PPUSH
1367: LD_INT 3
1369: PPUSH
1370: LD_INT 0
1372: PPUSH
1373: CALL_OW 322
// end ; if difficulty = 2 then
1377: LD_OWVAR 67
1381: PUSH
1382: LD_INT 2
1384: EQUAL
1385: IFFALSE 1465
// begin SetTech ( 57 , 3 , state_enabled ) ;
1387: LD_INT 57
1389: PPUSH
1390: LD_INT 3
1392: PPUSH
1393: LD_INT 1
1395: PPUSH
1396: CALL_OW 322
// SetTech ( 58 , 3 , state_disabled ) ;
1400: LD_INT 58
1402: PPUSH
1403: LD_INT 3
1405: PPUSH
1406: LD_INT 0
1408: PPUSH
1409: CALL_OW 322
// SetTech ( 59 , 3 , state_disabled ) ;
1413: LD_INT 59
1415: PPUSH
1416: LD_INT 3
1418: PPUSH
1419: LD_INT 0
1421: PPUSH
1422: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1426: LD_INT 51
1428: PPUSH
1429: LD_INT 3
1431: PPUSH
1432: LD_INT 1
1434: PPUSH
1435: CALL_OW 322
// SetTech ( 52 , 3 , state_disabled ) ;
1439: LD_INT 52
1441: PPUSH
1442: LD_INT 3
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 322
// SetTech ( 53 , 3 , state_disabled ) ;
1452: LD_INT 53
1454: PPUSH
1455: LD_INT 3
1457: PPUSH
1458: LD_INT 0
1460: PPUSH
1461: CALL_OW 322
// end ; if difficulty = 3 then
1465: LD_OWVAR 67
1469: PUSH
1470: LD_INT 3
1472: EQUAL
1473: IFFALSE 1553
// begin SetTech ( 57 , 3 , state_enabled ) ;
1475: LD_INT 57
1477: PPUSH
1478: LD_INT 3
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL_OW 322
// SetTech ( 58 , 3 , state_enabled ) ;
1488: LD_INT 58
1490: PPUSH
1491: LD_INT 3
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: CALL_OW 322
// SetTech ( 59 , 3 , state_enabled ) ;
1501: LD_INT 59
1503: PPUSH
1504: LD_INT 3
1506: PPUSH
1507: LD_INT 1
1509: PPUSH
1510: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
1514: LD_INT 51
1516: PPUSH
1517: LD_INT 3
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
1527: LD_INT 52
1529: PPUSH
1530: LD_INT 3
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: CALL_OW 322
// SetTech ( 53 , 3 , state_enabled ) ;
1540: LD_INT 53
1542: PPUSH
1543: LD_INT 3
1545: PPUSH
1546: LD_INT 1
1548: PPUSH
1549: CALL_OW 322
// end ; end ;
1553: LD_VAR 0 1
1557: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
1558: LD_INT 0
1560: PPUSH
1561: PPUSH
1562: PPUSH
1563: PPUSH
1564: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 69 , 39 , 34 , 40 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 , 51 , 52 , 59 , 53 ] ;
1565: LD_ADDR_VAR 0 8
1569: PUSH
1570: LD_INT 48
1572: PUSH
1573: LD_INT 49
1575: PUSH
1576: LD_INT 50
1578: PUSH
1579: LD_INT 20
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 69
1587: PUSH
1588: LD_INT 39
1590: PUSH
1591: LD_INT 34
1593: PUSH
1594: LD_INT 40
1596: PUSH
1597: LD_INT 71
1599: PUSH
1600: LD_INT 57
1602: PUSH
1603: LD_INT 58
1605: PUSH
1606: LD_INT 44
1608: PUSH
1609: LD_INT 32
1611: PUSH
1612: LD_INT 27
1614: PUSH
1615: LD_INT 23
1617: PUSH
1618: LD_INT 33
1620: PUSH
1621: LD_INT 54
1623: PUSH
1624: LD_INT 55
1626: PUSH
1627: LD_INT 56
1629: PUSH
1630: LD_INT 63
1632: PUSH
1633: LD_INT 64
1635: PUSH
1636: LD_INT 65
1638: PUSH
1639: LD_INT 30
1641: PUSH
1642: LD_INT 31
1644: PUSH
1645: LD_INT 21
1647: PUSH
1648: LD_INT 22
1650: PUSH
1651: LD_INT 25
1653: PUSH
1654: LD_INT 51
1656: PUSH
1657: LD_INT 52
1659: PUSH
1660: LD_INT 59
1662: PUSH
1663: LD_INT 53
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// for i = 1 to ru_tech_list do
1700: LD_ADDR_VAR 0 5
1704: PUSH
1705: DOUBLE
1706: LD_INT 1
1708: DEC
1709: ST_TO_ADDR
1710: LD_VAR 0 8
1714: PUSH
1715: FOR_TO
1716: IFFALSE 1792
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
1718: LD_VAR 0 8
1722: PUSH
1723: LD_VAR 0 5
1727: ARRAY
1728: PPUSH
1729: LD_VAR 0 1
1733: PPUSH
1734: CALL_OW 321
1738: PUSH
1739: LD_INT 1
1741: EQUAL
1742: PUSH
1743: LD_VAR 0 8
1747: PUSH
1748: LD_VAR 0 5
1752: ARRAY
1753: PPUSH
1754: LD_VAR 0 3
1758: PPUSH
1759: CALL_OW 482
1763: PUSH
1764: LD_INT 1
1766: EQUAL
1767: AND
1768: IFFALSE 1790
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
1770: LD_VAR 0 2
1774: PPUSH
1775: LD_VAR 0 8
1779: PUSH
1780: LD_VAR 0 5
1784: ARRAY
1785: PPUSH
1786: CALL_OW 184
1790: GO 1715
1792: POP
1793: POP
// end ;
1794: LD_VAR 0 4
1798: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
1799: LD_INT 0
1801: PPUSH
1802: PPUSH
1803: PPUSH
1804: PPUSH
1805: PPUSH
1806: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
1807: LD_ADDR_VAR 0 8
1811: PUSH
1812: LD_VAR 0 2
1816: PPUSH
1817: CALL_OW 313
1821: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
1822: LD_ADDR_VAR 0 9
1826: PUSH
1827: LD_VAR 0 3
1831: PPUSH
1832: LD_INT 22
1834: PUSH
1835: LD_VAR 0 1
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 25
1846: PUSH
1847: LD_INT 2
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: LD_INT 24
1856: PUSH
1857: LD_INT 750
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: LD_INT 3
1866: PUSH
1867: LD_INT 54
1869: PUSH
1870: EMPTY
1871: LIST
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: PPUSH
1883: CALL_OW 70
1887: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
1888: LD_ADDR_VAR 0 6
1892: PUSH
1893: LD_VAR 0 3
1897: PPUSH
1898: LD_INT 22
1900: PUSH
1901: LD_VAR 0 1
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 21
1912: PUSH
1913: LD_INT 3
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PUSH
1920: LD_INT 3
1922: PUSH
1923: LD_INT 24
1925: PUSH
1926: LD_INT 1000
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: EMPTY
1943: LIST
1944: PPUSH
1945: CALL_OW 70
1949: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
1950: LD_VAR 0 6
1954: NOT
1955: PUSH
1956: LD_INT 22
1958: PUSH
1959: LD_VAR 0 1
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 25
1970: PUSH
1971: LD_INT 2
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 24
1980: PUSH
1981: LD_INT 250
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PPUSH
1993: CALL_OW 69
1997: NOT
1998: AND
1999: IFFALSE 2003
// exit ;
2001: GO 2185
// if buildings_list > 0 and engineerOkInside then
2003: LD_VAR 0 6
2007: PUSH
2008: LD_INT 0
2010: GREATER
2011: PUSH
2012: LD_VAR 0 8
2016: AND
2017: IFFALSE 2028
// ComExitBuilding ( engineerOkInside ) ;
2019: LD_VAR 0 8
2023: PPUSH
2024: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
2028: LD_VAR 0 6
2032: PUSH
2033: LD_INT 0
2035: GREATER
2036: PUSH
2037: LD_VAR 0 9
2041: PUSH
2042: LD_INT 0
2044: GREATER
2045: AND
2046: IFFALSE 2066
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
2048: LD_VAR 0 9
2052: PPUSH
2053: LD_VAR 0 6
2057: PUSH
2058: LD_INT 1
2060: ARRAY
2061: PPUSH
2062: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
2066: LD_VAR 0 6
2070: PUSH
2071: LD_INT 0
2073: EQUAL
2074: PUSH
2075: LD_VAR 0 4
2079: PUSH
2080: LD_INT 0
2082: EQUAL
2083: AND
2084: PUSH
2085: LD_VAR 0 9
2089: PUSH
2090: LD_INT 0
2092: GREATER
2093: AND
2094: IFFALSE 2110
// ComEnterUnit ( engineerOkOutside , building ) ;
2096: LD_VAR 0 9
2100: PPUSH
2101: LD_VAR 0 2
2105: PPUSH
2106: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
2110: LD_VAR 0 9
2114: PUSH
2115: LD_INT 0
2117: GREATER
2118: PUSH
2119: LD_VAR 0 6
2123: PUSH
2124: LD_INT 0
2126: EQUAL
2127: AND
2128: PUSH
2129: LD_VAR 0 4
2133: PUSH
2134: LD_INT 0
2136: GREATER
2137: AND
2138: IFFALSE 2185
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
2140: LD_VAR 0 9
2144: PPUSH
2145: LD_VAR 0 4
2149: PUSH
2150: LD_INT 1
2152: ARRAY
2153: PPUSH
2154: LD_VAR 0 4
2158: PUSH
2159: LD_INT 2
2161: ARRAY
2162: PPUSH
2163: LD_VAR 0 4
2167: PUSH
2168: LD_INT 3
2170: ARRAY
2171: PPUSH
2172: LD_VAR 0 4
2176: PUSH
2177: LD_INT 4
2179: ARRAY
2180: PPUSH
2181: CALL_OW 145
// end ;
2185: LD_VAR 0 5
2189: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
2190: LD_INT 0
2192: PPUSH
2193: PPUSH
2194: PPUSH
2195: PPUSH
2196: PPUSH
2197: PPUSH
2198: PPUSH
2199: PPUSH
2200: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
2201: LD_ADDR_VAR 0 6
2205: PUSH
2206: LD_INT 22
2208: PUSH
2209: LD_VAR 0 1
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PUSH
2218: LD_INT 25
2220: PUSH
2221: LD_INT 4
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 23
2230: PUSH
2231: LD_INT 2
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 24
2240: PUSH
2241: LD_INT 251
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: PPUSH
2254: CALL_OW 69
2258: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
2259: LD_ADDR_VAR 0 7
2263: PUSH
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 22
2271: PUSH
2272: LD_VAR 0 1
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 23
2283: PUSH
2284: LD_INT 2
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 25
2293: PUSH
2294: LD_INT 4
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 50
2303: PUSH
2304: EMPTY
2305: LIST
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: PPUSH
2313: CALL_OW 70
2317: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
2318: LD_ADDR_VAR 0 10
2322: PUSH
2323: LD_VAR 0 3
2327: PPUSH
2328: LD_INT 22
2330: PUSH
2331: LD_VAR 0 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 21
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 3
2352: PUSH
2353: LD_INT 25
2355: PUSH
2356: LD_INT 3
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: PUSH
2367: LD_INT 3
2369: PUSH
2370: LD_INT 24
2372: PUSH
2373: LD_INT 750
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: PPUSH
2390: CALL_OW 70
2394: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2395: LD_ADDR_VAR 0 11
2399: PUSH
2400: LD_VAR 0 2
2404: PPUSH
2405: LD_INT 22
2407: PUSH
2408: LD_VAR 0 1
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 21
2419: PUSH
2420: LD_INT 1
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 3
2429: PUSH
2430: LD_INT 25
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: LD_INT 3
2446: PUSH
2447: LD_INT 24
2449: PUSH
2450: LD_INT 1000
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 70
2471: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
2472: LD_VAR 0 10
2476: NOT
2477: PUSH
2478: LD_VAR 0 11
2482: NOT
2483: AND
2484: PUSH
2485: LD_VAR 0 6
2489: NOT
2490: AND
2491: IFFALSE 2495
// exit ;
2493: GO 2729
// if damageUnits > 0 and sci_list > 0 then
2495: LD_VAR 0 10
2499: PUSH
2500: LD_INT 0
2502: GREATER
2503: PUSH
2504: LD_VAR 0 6
2508: PUSH
2509: LD_INT 0
2511: GREATER
2512: AND
2513: IFFALSE 2529
// ComMoveToArea ( damageUnits , healArea ) ;
2515: LD_VAR 0 10
2519: PPUSH
2520: LD_VAR 0 2
2524: PPUSH
2525: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
2529: LD_VAR 0 11
2533: PUSH
2534: LD_INT 0
2536: GREATER
2537: PUSH
2538: LD_VAR 0 6
2542: PUSH
2543: LD_INT 0
2545: GREATER
2546: AND
2547: IFFALSE 2558
// ComExitBuilding ( sci_list ) ;
2549: LD_VAR 0 6
2553: PPUSH
2554: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
2558: LD_VAR 0 11
2562: PUSH
2563: LD_INT 0
2565: GREATER
2566: PUSH
2567: LD_VAR 0 7
2571: PUSH
2572: LD_INT 0
2574: GREATER
2575: AND
2576: IFFALSE 2596
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
2578: LD_VAR 0 7
2582: PPUSH
2583: LD_VAR 0 11
2587: PUSH
2588: LD_INT 1
2590: ARRAY
2591: PPUSH
2592: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
2596: LD_VAR 0 10
2600: PUSH
2601: LD_INT 0
2603: EQUAL
2604: PUSH
2605: LD_VAR 0 11
2609: PUSH
2610: LD_INT 0
2612: EQUAL
2613: AND
2614: PUSH
2615: LD_VAR 0 7
2619: PUSH
2620: LD_INT 0
2622: GREATER
2623: AND
2624: IFFALSE 2729
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
2626: LD_ADDR_VAR 0 12
2630: PUSH
2631: LD_INT 22
2633: PUSH
2634: LD_VAR 0 1
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 21
2645: PUSH
2646: LD_INT 3
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 30
2655: PUSH
2656: LD_INT 8
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 69
2672: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
2673: LD_ADDR_VAR 0 13
2677: PUSH
2678: LD_INT 1
2680: PPUSH
2681: LD_VAR 0 12
2685: PPUSH
2686: CALL_OW 12
2690: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
2691: LD_VAR 0 7
2695: PPUSH
2696: LD_INT 3
2698: PUSH
2699: LD_INT 60
2701: PUSH
2702: EMPTY
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PPUSH
2709: CALL_OW 72
2713: PPUSH
2714: LD_VAR 0 12
2718: PUSH
2719: LD_VAR 0 13
2723: ARRAY
2724: PPUSH
2725: CALL_OW 120
// end ; end ;
2729: LD_VAR 0 5
2733: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
2734: LD_INT 0
2736: PPUSH
2737: PPUSH
2738: PPUSH
2739: PPUSH
// tmpTab = [ ] ;
2740: LD_ADDR_VAR 0 6
2744: PUSH
2745: EMPTY
2746: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
2747: LD_INT 22
2749: PUSH
2750: LD_VAR 0 1
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: LD_INT 30
2761: PUSH
2762: LD_INT 32
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PPUSH
2773: CALL_OW 69
2777: PUSH
2778: LD_INT 0
2780: GREATER
2781: IFFALSE 2864
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
2783: LD_ADDR_VAR 0 4
2787: PUSH
2788: LD_INT 22
2790: PUSH
2791: LD_VAR 0 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 30
2802: PUSH
2803: LD_INT 32
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PPUSH
2814: CALL_OW 69
2818: PUSH
2819: FOR_IN
2820: IFFALSE 2862
// begin for j in UnitsInside ( i ) do
2822: LD_ADDR_VAR 0 5
2826: PUSH
2827: LD_VAR 0 4
2831: PPUSH
2832: CALL_OW 313
2836: PUSH
2837: FOR_IN
2838: IFFALSE 2858
// tmpTab = tmpTab ^ j ;
2840: LD_ADDR_VAR 0 6
2844: PUSH
2845: LD_VAR 0 6
2849: PUSH
2850: LD_VAR 0 5
2854: ADD
2855: ST_TO_ADDR
2856: GO 2837
2858: POP
2859: POP
// end ;
2860: GO 2819
2862: POP
2863: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
2864: LD_VAR 0 6
2868: PPUSH
2869: LD_VAR 0 2
2873: PPUSH
2874: CALL_OW 250
2878: PPUSH
2879: LD_VAR 0 2
2883: PPUSH
2884: CALL_OW 251
2888: PPUSH
2889: CALL_OW 114
// end ;
2893: LD_VAR 0 3
2897: RET
// export function CollectCrates ( side , cargoNation , enemyCratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
2898: LD_INT 0
2900: PPUSH
2901: PPUSH
2902: PPUSH
2903: PPUSH
// enable ;
2904: ENABLE
// crate_list = GetListOfCratesInArea ( enemyCratesArea ) ;
2905: LD_ADDR_VAR 0 7
2909: PUSH
2910: LD_VAR 0 3
2914: PPUSH
2915: CALL_OW 435
2919: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargoNation ] ] ) ;
2920: LD_ADDR_VAR 0 6
2924: PUSH
2925: LD_INT 22
2927: PUSH
2928: LD_VAR 0 1
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: LD_INT 34
2939: PUSH
2940: LD_VAR 0 2
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PPUSH
2953: CALL_OW 69
2957: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( enemyCratesArea ) and crate_list > 0 then
2958: LD_VAR 0 6
2962: PUSH
2963: LD_INT 0
2965: GREATER
2966: PUSH
2967: LD_VAR 0 3
2971: PPUSH
2972: CALL_OW 435
2976: AND
2977: PUSH
2978: LD_VAR 0 7
2982: PUSH
2983: LD_INT 0
2985: GREATER
2986: AND
2987: IFFALSE 3036
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
2989: LD_VAR 0 6
2993: PUSH
2994: LD_INT 1
2996: ARRAY
2997: PPUSH
2998: LD_VAR 0 7
3002: PUSH
3003: LD_INT 1
3005: ARRAY
3006: PPUSH
3007: LD_VAR 0 7
3011: PUSH
3012: LD_INT 2
3014: ARRAY
3015: PPUSH
3016: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
3020: LD_VAR 0 6
3024: PUSH
3025: LD_INT 1
3027: ARRAY
3028: PPUSH
3029: LD_INT 100
3031: PPUSH
3032: CALL_OW 240
// end ; end ;
3036: LD_VAR 0 4
3040: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
3041: LD_INT 0
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
3048: LD_ADDR_VAR 0 6
3052: PUSH
3053: LD_INT 22
3055: PUSH
3056: LD_VAR 0 1
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 2
3067: PUSH
3068: LD_INT 30
3070: PUSH
3071: LD_INT 31
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 30
3080: PUSH
3081: LD_INT 32
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: PUSH
3088: LD_INT 30
3090: PUSH
3091: LD_INT 33
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: LD_INT 30
3100: PUSH
3101: LD_INT 4
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PUSH
3108: LD_INT 30
3110: PUSH
3111: LD_INT 5
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PPUSH
3130: CALL_OW 69
3134: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
3135: LD_ADDR_VAR 0 7
3139: PUSH
3140: LD_INT 22
3142: PUSH
3143: LD_VAR 0 2
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 21
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 58
3164: PUSH
3165: EMPTY
3166: LIST
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: LIST
3172: PPUSH
3173: CALL_OW 69
3177: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
3178: LD_VAR 0 6
3182: PUSH
3183: LD_INT 0
3185: GREATER
3186: PUSH
3187: LD_VAR 0 7
3191: PUSH
3192: LD_INT 0
3194: GREATER
3195: AND
3196: IFFALSE 3266
// begin for i in turretsList do
3198: LD_ADDR_VAR 0 4
3202: PUSH
3203: LD_VAR 0 6
3207: PUSH
3208: FOR_IN
3209: IFFALSE 3264
// begin for j in enemyBuildings do
3211: LD_ADDR_VAR 0 5
3215: PUSH
3216: LD_VAR 0 7
3220: PUSH
3221: FOR_IN
3222: IFFALSE 3260
// begin if GetDistUnits ( i , j ) < 20 then
3224: LD_VAR 0 4
3228: PPUSH
3229: LD_VAR 0 5
3233: PPUSH
3234: CALL_OW 296
3238: PUSH
3239: LD_INT 20
3241: LESS
3242: IFFALSE 3258
// begin ComAttackUnit ( i , j ) ;
3244: LD_VAR 0 4
3248: PPUSH
3249: LD_VAR 0 5
3253: PPUSH
3254: CALL_OW 115
// end ; end ;
3258: GO 3221
3260: POP
3261: POP
// end ;
3262: GO 3208
3264: POP
3265: POP
// end ; end ;
3266: LD_VAR 0 3
3270: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
3271: LD_INT 0
3273: PPUSH
3274: PPUSH
// for i = 1 to vehCount do
3275: LD_ADDR_VAR 0 9
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_VAR 0 3
3289: PUSH
3290: FOR_TO
3291: IFFALSE 3338
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
3293: LD_VAR 0 2
3297: PPUSH
3298: LD_VAR 0 7
3302: PPUSH
3303: LD_VAR 0 5
3307: PPUSH
3308: LD_VAR 0 6
3312: PPUSH
3313: LD_VAR 0 4
3317: PUSH
3318: LD_INT 1
3320: PPUSH
3321: LD_VAR 0 4
3325: PPUSH
3326: CALL_OW 12
3330: ARRAY
3331: PPUSH
3332: CALL_OW 185
3336: GO 3290
3338: POP
3339: POP
// end ;
3340: LD_VAR 0 8
3344: RET
// export function AttackVehicles ( side ) ; var i , j , tmp , vehiclesOK , target1 , target2 ; begin
3345: LD_INT 0
3347: PPUSH
3348: PPUSH
3349: PPUSH
3350: PPUSH
3351: PPUSH
3352: PPUSH
3353: PPUSH
// if russianTanks >= [ 2 , 3 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 1 , 2 ] [ Difficulty ] then
3354: LD_EXP 11
3358: PUSH
3359: LD_INT 2
3361: PUSH
3362: LD_INT 3
3364: PUSH
3365: LD_INT 4
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: LIST
3372: PUSH
3373: LD_OWVAR 67
3377: ARRAY
3378: GREATEREQUAL
3379: PUSH
3380: LD_EXP 12
3384: PUSH
3385: LD_INT 1
3387: PUSH
3388: LD_INT 1
3390: PUSH
3391: LD_INT 2
3393: PUSH
3394: EMPTY
3395: LIST
3396: LIST
3397: LIST
3398: PUSH
3399: LD_OWVAR 67
3403: ARRAY
3404: GREATEREQUAL
3405: AND
3406: IFFALSE 3715
// begin repeat wait ( 0 0$1 ) ;
3408: LD_INT 35
3410: PPUSH
3411: CALL_OW 67
// for j in russianTanks do
3415: LD_ADDR_VAR 0 4
3419: PUSH
3420: LD_EXP 11
3424: PUSH
3425: FOR_IN
3426: IFFALSE 3703
// begin tmp := UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) ;
3428: LD_ADDR_VAR 0 5
3432: PUSH
3433: LD_EXP 12
3437: PPUSH
3438: LD_INT 3
3440: PUSH
3441: LD_INT 60
3443: PUSH
3444: EMPTY
3445: LIST
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 72
3455: ST_TO_ADDR
// if tmp then
3456: LD_VAR 0 5
3460: IFFALSE 3476
// ComMoveUnit ( tmp , j ) ;
3462: LD_VAR 0 5
3466: PPUSH
3467: LD_VAR 0 4
3471: PPUSH
3472: CALL_OW 112
// if GetSide ( j ) <> side then
3476: LD_VAR 0 4
3480: PPUSH
3481: CALL_OW 255
3485: PUSH
3486: LD_VAR 0 1
3490: NONEQUAL
3491: IFFALSE 3504
// begin ComStop ( j ) ;
3493: LD_VAR 0 4
3497: PPUSH
3498: CALL_OW 141
// continue ;
3502: GO 3425
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
3504: LD_ADDR_VAR 0 7
3508: PUSH
3509: LD_INT 81
3511: PUSH
3512: LD_VAR 0 1
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: LD_INT 101
3523: PUSH
3524: LD_INT 1
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PUSH
3531: EMPTY
3532: LIST
3533: LIST
3534: PPUSH
3535: CALL_OW 69
3539: PPUSH
3540: LD_VAR 0 4
3544: PPUSH
3545: CALL_OW 74
3549: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
3550: LD_ADDR_VAR 0 8
3554: PUSH
3555: LD_INT 81
3557: PUSH
3558: LD_VAR 0 1
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: PUSH
3567: LD_INT 101
3569: PUSH
3570: LD_INT 1
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: PUSH
3577: LD_INT 2
3579: PUSH
3580: LD_INT 59
3582: PUSH
3583: EMPTY
3584: LIST
3585: PUSH
3586: LD_INT 21
3588: PUSH
3589: LD_INT 1
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 21
3598: PUSH
3599: LD_INT 2
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: PUSH
3617: EMPTY
3618: LIST
3619: PPUSH
3620: CALL_OW 69
3624: PPUSH
3625: LD_VAR 0 4
3629: PPUSH
3630: CALL_OW 74
3634: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
3635: LD_VAR 0 4
3639: PPUSH
3640: LD_VAR 0 7
3644: PPUSH
3645: CALL_OW 296
3649: PUSH
3650: LD_INT 8
3652: PLUS
3653: PUSH
3654: LD_VAR 0 4
3658: PPUSH
3659: LD_VAR 0 8
3663: PPUSH
3664: CALL_OW 296
3668: LESS
3669: IFFALSE 3687
// ComAttackUnit ( j , target1 ) else
3671: LD_VAR 0 4
3675: PPUSH
3676: LD_VAR 0 7
3680: PPUSH
3681: CALL_OW 115
3685: GO 3701
// ComAttackUnit ( j , target2 ) ;
3687: LD_VAR 0 4
3691: PPUSH
3692: LD_VAR 0 8
3696: PPUSH
3697: CALL_OW 115
// end ;
3701: GO 3425
3703: POP
3704: POP
// until russianTanks = 0 ;
3705: LD_EXP 11
3709: PUSH
3710: LD_INT 0
3712: EQUAL
3713: IFFALSE 3408
// end ; end ;
3715: LD_VAR 0 2
3719: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
3720: LD_INT 0
3722: PPUSH
3723: PPUSH
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3728: LD_ADDR_VAR 0 6
3732: PUSH
3733: LD_INT 22
3735: PUSH
3736: LD_VAR 0 1
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: PUSH
3745: LD_INT 25
3747: PUSH
3748: LD_INT 9
3750: PUSH
3751: EMPTY
3752: LIST
3753: LIST
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: PPUSH
3759: CALL_OW 69
3763: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3764: LD_ADDR_VAR 0 7
3768: PUSH
3769: LD_INT 81
3771: PUSH
3772: LD_VAR 0 1
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 3
3783: PUSH
3784: LD_INT 21
3786: PUSH
3787: LD_INT 3
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PPUSH
3802: CALL_OW 69
3806: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3807: LD_ADDR_VAR 0 4
3811: PUSH
3812: LD_INT 1
3814: PPUSH
3815: LD_INT 3
3817: PPUSH
3818: CALL_OW 12
3822: ST_TO_ADDR
// for i = 1 to list do
3823: LD_ADDR_VAR 0 5
3827: PUSH
3828: DOUBLE
3829: LD_INT 1
3831: DEC
3832: ST_TO_ADDR
3833: LD_VAR 0 6
3837: PUSH
3838: FOR_TO
3839: IFFALSE 4041
// for ta in filter do
3841: LD_ADDR_VAR 0 3
3845: PUSH
3846: LD_VAR 0 7
3850: PUSH
3851: FOR_IN
3852: IFFALSE 4037
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
3854: LD_VAR 0 6
3858: PUSH
3859: LD_VAR 0 5
3863: ARRAY
3864: PPUSH
3865: LD_VAR 0 3
3869: PPUSH
3870: CALL_OW 296
3874: PUSH
3875: LD_INT 15
3877: LESSEQUAL
3878: IFFALSE 4035
// begin case c of 1 :
3880: LD_VAR 0 4
3884: PUSH
3885: LD_INT 1
3887: DOUBLE
3888: EQUAL
3889: IFTRUE 3893
3891: GO 3931
3893: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3894: LD_VAR 0 6
3898: PUSH
3899: LD_VAR 0 5
3903: ARRAY
3904: PPUSH
3905: LD_VAR 0 3
3909: PPUSH
3910: CALL_OW 250
3914: PPUSH
3915: LD_VAR 0 3
3919: PPUSH
3920: CALL_OW 251
3924: PPUSH
3925: CALL_OW 154
3929: GO 4035
3931: LD_INT 2
3933: DOUBLE
3934: EQUAL
3935: IFTRUE 3939
3937: GO 4003
3939: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3940: LD_VAR 0 6
3944: PUSH
3945: LD_VAR 0 5
3949: ARRAY
3950: PPUSH
3951: LD_VAR 0 3
3955: PPUSH
3956: CALL_OW 250
3960: PUSH
3961: LD_INT 1
3963: NEG
3964: PPUSH
3965: LD_INT 1
3967: PPUSH
3968: CALL_OW 12
3972: PLUS
3973: PPUSH
3974: LD_VAR 0 3
3978: PPUSH
3979: CALL_OW 251
3983: PUSH
3984: LD_INT 1
3986: NEG
3987: PPUSH
3988: LD_INT 1
3990: PPUSH
3991: CALL_OW 12
3995: PLUS
3996: PPUSH
3997: CALL_OW 153
4001: GO 4035
4003: LD_INT 3
4005: DOUBLE
4006: EQUAL
4007: IFTRUE 4011
4009: GO 4034
4011: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
4012: LD_VAR 0 6
4016: PUSH
4017: LD_VAR 0 5
4021: ARRAY
4022: PPUSH
4023: LD_VAR 0 3
4027: PPUSH
4028: CALL_OW 115
4032: GO 4035
4034: POP
// end ; end ;
4035: GO 3851
4037: POP
4038: POP
4039: GO 3838
4041: POP
4042: POP
// end ;
4043: LD_VAR 0 2
4047: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
4048: LD_INT 0
4050: PPUSH
4051: PPUSH
4052: PPUSH
4053: PPUSH
4054: PPUSH
4055: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
4056: LD_ADDR_VAR 0 7
4060: PUSH
4061: LD_VAR 0 2
4065: PPUSH
4066: LD_INT 22
4068: PUSH
4069: LD_VAR 0 1
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 21
4080: PUSH
4081: LD_INT 2
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 34
4090: PUSH
4091: LD_INT 52
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: PPUSH
4103: CALL_OW 70
4107: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4108: LD_ADDR_VAR 0 8
4112: PUSH
4113: LD_VAR 0 2
4117: PPUSH
4118: LD_INT 22
4120: PUSH
4121: LD_VAR 0 1
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PUSH
4130: LD_INT 21
4132: PUSH
4133: LD_INT 3
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 3
4142: PUSH
4143: LD_INT 24
4145: PUSH
4146: LD_INT 1000
4148: PUSH
4149: EMPTY
4150: LIST
4151: LIST
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: PUSH
4162: EMPTY
4163: LIST
4164: PPUSH
4165: CALL_OW 70
4169: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
4170: LD_VAR 0 8
4174: PUSH
4175: LD_INT 0
4177: GREATER
4178: PUSH
4179: LD_VAR 0 7
4183: PPUSH
4184: LD_INT 24
4186: PUSH
4187: LD_INT 750
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PPUSH
4194: CALL_OW 72
4198: PUSH
4199: LD_INT 0
4201: GREATER
4202: AND
4203: IFFALSE 4223
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
4205: LD_VAR 0 7
4209: PPUSH
4210: LD_VAR 0 8
4214: PUSH
4215: LD_INT 1
4217: ARRAY
4218: PPUSH
4219: CALL_OW 130
// if crane_list > 0 and buildings_list = 0 and rudestroyedBuildings > 0 then
4223: LD_VAR 0 7
4227: PUSH
4228: LD_INT 0
4230: GREATER
4231: PUSH
4232: LD_VAR 0 8
4236: PUSH
4237: LD_INT 0
4239: EQUAL
4240: AND
4241: PUSH
4242: LD_EXP 10
4246: PUSH
4247: LD_INT 0
4249: GREATER
4250: AND
4251: IFFALSE 4298
// AddComCraneBuild ( crane_list , rudestroyedBuildings [ 1 ] , rudestroyedBuildings [ 2 ] , rudestroyedBuildings [ 3 ] , rudestroyedBuildings [ 4 ] ) ;
4253: LD_VAR 0 7
4257: PPUSH
4258: LD_EXP 10
4262: PUSH
4263: LD_INT 1
4265: ARRAY
4266: PPUSH
4267: LD_EXP 10
4271: PUSH
4272: LD_INT 2
4274: ARRAY
4275: PPUSH
4276: LD_EXP 10
4280: PUSH
4281: LD_INT 3
4283: ARRAY
4284: PPUSH
4285: LD_EXP 10
4289: PUSH
4290: LD_INT 4
4292: ARRAY
4293: PPUSH
4294: CALL_OW 567
// end ; end_of_file
4298: LD_VAR 0 3
4302: RET
// every 0 0$1 do
4303: GO 4305
4305: DISABLE
// begin ResAllTechs ( 3 , ru_lab1 , 3 ) ;
4306: LD_INT 3
4308: PPUSH
4309: LD_INT 14
4311: PPUSH
4312: LD_INT 3
4314: PPUSH
4315: CALL 1558 0 3
// ResAllTechs ( 3 , ru_lab2 , 3 ) ;
4319: LD_INT 3
4321: PPUSH
4322: LD_INT 15
4324: PPUSH
4325: LD_INT 3
4327: PPUSH
4328: CALL 1558 0 3
// end ;
4332: END
// every 0 0$1 trigger russianAI = 1 do
4333: LD_EXP 13
4337: PUSH
4338: LD_INT 1
4340: EQUAL
4341: IFFALSE 4447
4343: GO 4345
4345: DISABLE
// begin enable ;
4346: ENABLE
// RepairAndRebuildBase ( 3 , ru_depot , RussianBase , ruDestroyedBuildings ) ;
4347: LD_INT 3
4349: PPUSH
4350: LD_INT 22
4352: PPUSH
4353: LD_INT 7
4355: PPUSH
4356: LD_EXP 10
4360: PPUSH
4361: CALL 1799 0 4
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ ru_lab1 , ru_lab2 ] [ Rand ( 1 , 2 ) ] ) ;
4365: LD_INT 3
4367: PPUSH
4368: LD_INT 8
4370: PPUSH
4371: LD_INT 7
4373: PPUSH
4374: LD_INT 14
4376: PUSH
4377: LD_INT 15
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 1
4386: PPUSH
4387: LD_INT 2
4389: PPUSH
4390: CALL_OW 12
4394: ARRAY
4395: PPUSH
4396: CALL 2190 0 4
// AttackVehicles ( 3 ) ;
4400: LD_INT 3
4402: PPUSH
4403: CALL 3345 0 1
// AttackNearBuildings ( 3 , 1 ) ;
4407: LD_INT 3
4409: PPUSH
4410: LD_INT 1
4412: PPUSH
4413: CALL 3041 0 2
// IntBazooka ( 3 ) ;
4417: LD_INT 3
4419: PPUSH
4420: CALL 3720 0 1
// CollectCrates ( 3 , ru_cargo_bay , russianCrates ) ;
4424: LD_INT 3
4426: PPUSH
4427: LD_INT 51
4429: PPUSH
4430: LD_INT 14
4432: PPUSH
4433: CALL 2898 0 3
// CraneRepairBuild ( 3 , RussianBase ) ;
4437: LD_INT 3
4439: PPUSH
4440: LD_INT 7
4442: PPUSH
4443: CALL 4048 0 2
// end ;
4447: END
// every 0 0$1 trigger IsDying ( ru_depot ) or GetSide ( ru_depot ) = 1 do
4448: LD_INT 22
4450: PPUSH
4451: CALL_OW 303
4455: PUSH
4456: LD_INT 22
4458: PPUSH
4459: CALL_OW 255
4463: PUSH
4464: LD_INT 1
4466: EQUAL
4467: OR
4468: IFFALSE 4483
4470: GO 4472
4472: DISABLE
// DefendDepot ( 3 , ru_depot ) ;
4473: LD_INT 3
4475: PPUSH
4476: LD_INT 22
4478: PPUSH
4479: CALL 2734 0 2
4483: END
// every 6 6$0 + 7 7$0 trigger russianAI = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_control , 3 ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 45 ] , [ f_weapon , 44 ] , [ f_weapon , 49 ] , [ f_weapon , 47 ] ] ] ) = 0 do
4484: LD_EXP 13
4488: PUSH
4489: LD_INT 1
4491: EQUAL
4492: PUSH
4493: LD_INT 22
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 21
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 50
4515: PUSH
4516: EMPTY
4517: LIST
4518: PUSH
4519: LD_INT 33
4521: PUSH
4522: LD_INT 3
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 2
4531: PUSH
4532: LD_INT 34
4534: PUSH
4535: LD_INT 46
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: LD_INT 34
4544: PUSH
4545: LD_INT 45
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: PUSH
4552: LD_INT 34
4554: PUSH
4555: LD_INT 44
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: PUSH
4562: LD_INT 34
4564: PUSH
4565: LD_INT 49
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: PUSH
4572: LD_INT 34
4574: PUSH
4575: LD_INT 47
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: PPUSH
4597: CALL_OW 69
4601: PUSH
4602: LD_INT 0
4604: EQUAL
4605: AND
4606: IFFALSE 4793
4608: GO 4610
4610: DISABLE
// begin enable ;
4611: ENABLE
// if russianRocketsAvalaible = 1 then
4612: LD_EXP 14
4616: PUSH
4617: LD_INT 1
4619: EQUAL
4620: IFFALSE 4677
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) else
4622: LD_INT 3
4624: PPUSH
4625: LD_INT 1
4627: PPUSH
4628: LD_INT 3
4630: PUSH
4631: LD_INT 4
4633: PUSH
4634: LD_INT 4
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: LIST
4641: PUSH
4642: LD_OWVAR 67
4646: ARRAY
4647: PPUSH
4648: LD_INT 46
4650: PUSH
4651: LD_INT 45
4653: PUSH
4654: LD_INT 44
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: LIST
4661: PPUSH
4662: LD_INT 3
4664: PPUSH
4665: LD_INT 3
4667: PPUSH
4668: LD_INT 24
4670: PPUSH
4671: CALL 3271 0 7
4675: GO 4734
// BuildingVehicle ( 3 , ru_fact1 , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 , 47 ] , 3 , 3 , 24 ) ;
4677: LD_INT 3
4679: PPUSH
4680: LD_INT 1
4682: PPUSH
4683: LD_INT 3
4685: PUSH
4686: LD_INT 4
4688: PUSH
4689: LD_INT 4
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: PUSH
4697: LD_OWVAR 67
4701: ARRAY
4702: PPUSH
4703: LD_INT 46
4705: PUSH
4706: LD_INT 45
4708: PUSH
4709: LD_INT 44
4711: PUSH
4712: LD_INT 47
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: PPUSH
4721: LD_INT 3
4723: PPUSH
4724: LD_INT 3
4726: PPUSH
4727: LD_INT 24
4729: PPUSH
4730: CALL 3271 0 7
// if russianTimeLapsers = 0 then
4734: LD_EXP 12
4738: PUSH
4739: LD_INT 0
4741: EQUAL
4742: IFFALSE 4793
// BuildingVehicle ( 3 , ru_fact2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
4744: LD_INT 3
4746: PPUSH
4747: LD_INT 40
4749: PPUSH
4750: LD_INT 1
4752: PUSH
4753: LD_INT 2
4755: PUSH
4756: LD_INT 2
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_OWVAR 67
4768: ARRAY
4769: PPUSH
4770: LD_INT 49
4772: PUSH
4773: LD_INT 49
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PPUSH
4780: LD_INT 3
4782: PPUSH
4783: LD_INT 3
4785: PPUSH
4786: LD_INT 24
4788: PPUSH
4789: CALL 3271 0 7
// end ; end_of_file
4793: END
// every 1 do var dec1 , dec2 ;
4794: GO 4796
4796: DISABLE
4797: LD_INT 0
4799: PPUSH
4800: PPUSH
// begin InGameOn ;
4801: CALL_OW 8
// SetBName ( us_depot , deltakappa ) ;
4805: LD_INT 48
4807: PPUSH
4808: LD_STRING deltakappa
4810: PPUSH
4811: CALL_OW 500
// CenterNowOnUnits ( JMMveh ) ;
4815: LD_INT 95
4817: PPUSH
4818: CALL_OW 87
// ComMoveXY ( JMMveh , 30 , 11 ) ;
4822: LD_INT 95
4824: PPUSH
4825: LD_INT 30
4827: PPUSH
4828: LD_INT 11
4830: PPUSH
4831: CALL_OW 111
// CenterOnXY ( 30 , 11 ) ;
4835: LD_INT 30
4837: PPUSH
4838: LD_INT 11
4840: PPUSH
4841: CALL_OW 84
// SayRadio ( Powell , D1-Pow-1 ) ;
4845: LD_EXP 5
4849: PPUSH
4850: LD_STRING D1-Pow-1
4852: PPUSH
4853: CALL_OW 94
// ComExitVehicle ( JMM ) ;
4857: LD_EXP 1
4861: PPUSH
4862: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4866: LD_EXP 1
4870: PPUSH
4871: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
4875: LD_EXP 1
4879: PPUSH
4880: LD_STRING D1-JMM-1
4882: PPUSH
4883: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
4887: LD_EXP 5
4891: PPUSH
4892: LD_STRING D1-Pow-2
4894: PPUSH
4895: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
4899: LD_EXP 1
4903: PPUSH
4904: LD_STRING D1-JMM-2
4906: PPUSH
4907: CALL_OW 88
// ComEnterUnit ( JMM , JMMveh ) ;
4911: LD_EXP 1
4915: PPUSH
4916: LD_INT 95
4918: PPUSH
4919: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
4923: LD_STRING M1
4925: PPUSH
4926: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
4930: LD_INT 35
4932: PPUSH
4933: CALL_OW 67
// ComEnterUnit ( JMM , JMMveh ) ;
4937: LD_EXP 1
4941: PPUSH
4942: LD_INT 95
4944: PPUSH
4945: CALL_OW 120
// ComMoveXY ( JMMveh , 51 , 21 ) ;
4949: LD_INT 95
4951: PPUSH
4952: LD_INT 51
4954: PPUSH
4955: LD_INT 21
4957: PPUSH
4958: CALL_OW 111
// CenterNowOnUnits ( JMMveh ) ;
4962: LD_INT 95
4964: PPUSH
4965: CALL_OW 87
// until IsInArea ( JMMveh , Dialog1Area ) ;
4969: LD_INT 95
4971: PPUSH
4972: LD_INT 5
4974: PPUSH
4975: CALL_OW 308
4979: IFFALSE 4930
// if JMMGirl = 1 then
4981: LD_EXP 7
4985: PUSH
4986: LD_INT 1
4988: EQUAL
4989: IFFALSE 5302
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
4991: LD_EXP 2
4995: PPUSH
4996: LD_STRING D2J-Joan-1
4998: PPUSH
4999: CALL_OW 94
// dec1 = query ( Q1 ) ;
5003: LD_ADDR_VAR 0 1
5007: PUSH
5008: LD_STRING Q1
5010: PPUSH
5011: CALL_OW 97
5015: ST_TO_ADDR
// if dec1 = 1 then
5016: LD_VAR 0 1
5020: PUSH
5021: LD_INT 1
5023: EQUAL
5024: IFFALSE 5278
// begin ComExitVehicle ( JMM ) ;
5026: LD_EXP 1
5030: PPUSH
5031: CALL_OW 121
// Say ( JMM , D2J-JMM-1 ) ;
5035: LD_EXP 1
5039: PPUSH
5040: LD_STRING D2J-JMM-1
5042: PPUSH
5043: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
5047: LD_EXP 2
5051: PPUSH
5052: LD_STRING D2J-Joan-2
5054: PPUSH
5055: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
5059: LD_EXP 1
5063: PPUSH
5064: LD_STRING D2J-JMM-2
5066: PPUSH
5067: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
5071: LD_EXP 2
5075: PPUSH
5076: LD_STRING D2J-Joan-3
5078: PPUSH
5079: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5083: LD_EXP 5
5087: PPUSH
5088: LD_STRING DPowell-Pow-1
5090: PPUSH
5091: CALL_OW 94
// dec2 = query ( Q2J ) ;
5095: LD_ADDR_VAR 0 2
5099: PUSH
5100: LD_STRING Q2J
5102: PPUSH
5103: CALL_OW 97
5107: ST_TO_ADDR
// if dec2 = 1 then
5108: LD_VAR 0 2
5112: PUSH
5113: LD_INT 1
5115: EQUAL
5116: IFFALSE 5158
// begin Say ( JMM , D2Ja-JMM-1 ) ;
5118: LD_EXP 1
5122: PPUSH
5123: LD_STRING D2Ja-JMM-1
5125: PPUSH
5126: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
5130: LD_EXP 2
5134: PPUSH
5135: LD_STRING D2Ja-Joan-1
5137: PPUSH
5138: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
5142: LD_EXP 1
5146: PPUSH
5147: LD_STRING D2Ja-JMM-2
5149: PPUSH
5150: CALL_OW 88
// InGameOff ;
5154: CALL_OW 9
// end ; if dec2 = 2 then
5158: LD_VAR 0 2
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: IFFALSE 5242
// begin Say ( JMM , D2Jb-JMM-1 ) ;
5168: LD_EXP 1
5172: PPUSH
5173: LD_STRING D2Jb-JMM-1
5175: PPUSH
5176: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
5180: LD_EXP 2
5184: PPUSH
5185: LD_STRING D2Jb-Joan-1
5187: PPUSH
5188: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
5192: LD_EXP 1
5196: PPUSH
5197: LD_STRING D2Jb-JMM-2
5199: PPUSH
5200: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
5204: LD_EXP 2
5208: PPUSH
5209: LD_STRING D2Jb-Joan-2
5211: PPUSH
5212: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
5216: LD_EXP 1
5220: PPUSH
5221: LD_STRING D2Jb-JMM-3
5223: PPUSH
5224: CALL_OW 88
// fastEnd = 1 ;
5228: LD_ADDR_EXP 15
5232: PUSH
5233: LD_INT 1
5235: ST_TO_ADDR
// FinishMission ;
5236: CALL 9144 0 0
// exit ;
5240: GO 5872
// end ; if dec2 = 3 then
5242: LD_VAR 0 2
5246: PUSH
5247: LD_INT 3
5249: EQUAL
5250: IFFALSE 5278
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
5252: LD_EXP 2
5256: PPUSH
5257: LD_STRING D2Jc-Joan-1
5259: PPUSH
5260: CALL_OW 94
// fastEnd = 1 ;
5264: LD_ADDR_EXP 15
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// FinishMission ;
5272: CALL 9144 0 0
// exit ;
5276: GO 5872
// end ; end ; if dec1 = 2 then
5278: LD_VAR 0 1
5282: PUSH
5283: LD_INT 2
5285: EQUAL
5286: IFFALSE 5302
// begin fastEnd = 1 ;
5288: LD_ADDR_EXP 15
5292: PUSH
5293: LD_INT 1
5295: ST_TO_ADDR
// FinishMission ;
5296: CALL 9144 0 0
// exit ;
5300: GO 5872
// end ; end ; if JMMGirl = 2 then
5302: LD_EXP 7
5306: PUSH
5307: LD_INT 2
5309: EQUAL
5310: IFFALSE 5635
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
5312: LD_EXP 3
5316: PPUSH
5317: LD_STRING D2L-Lisa-1
5319: PPUSH
5320: CALL_OW 94
// dec1 = query ( Q1 ) ;
5324: LD_ADDR_VAR 0 1
5328: PUSH
5329: LD_STRING Q1
5331: PPUSH
5332: CALL_OW 97
5336: ST_TO_ADDR
// if dec1 = 1 then
5337: LD_VAR 0 1
5341: PUSH
5342: LD_INT 1
5344: EQUAL
5345: IFFALSE 5611
// begin ComExitVehicle ( JMM ) ;
5347: LD_EXP 1
5351: PPUSH
5352: CALL_OW 121
// Say ( JMM , D2L-JMM-1 ) ;
5356: LD_EXP 1
5360: PPUSH
5361: LD_STRING D2L-JMM-1
5363: PPUSH
5364: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
5368: LD_EXP 3
5372: PPUSH
5373: LD_STRING D2L-Lisa-2
5375: PPUSH
5376: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
5380: LD_EXP 1
5384: PPUSH
5385: LD_STRING D2L-JMM-2
5387: PPUSH
5388: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-3 ) ;
5392: LD_EXP 3
5396: PPUSH
5397: LD_STRING D2L-Lisa-3
5399: PPUSH
5400: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5404: LD_EXP 5
5408: PPUSH
5409: LD_STRING DPowell-Pow-1
5411: PPUSH
5412: CALL_OW 94
// dec2 = query ( Q2L ) ;
5416: LD_ADDR_VAR 0 2
5420: PUSH
5421: LD_STRING Q2L
5423: PPUSH
5424: CALL_OW 97
5428: ST_TO_ADDR
// if dec2 = 1 then
5429: LD_VAR 0 2
5433: PUSH
5434: LD_INT 1
5436: EQUAL
5437: IFFALSE 5503
// begin Say ( JMM , D2La-JMM-1 ) ;
5439: LD_EXP 1
5443: PPUSH
5444: LD_STRING D2La-JMM-1
5446: PPUSH
5447: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
5451: LD_EXP 3
5455: PPUSH
5456: LD_STRING D2La-Lisa-1
5458: PPUSH
5459: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
5463: LD_EXP 1
5467: PPUSH
5468: LD_STRING D2La-JMM-2
5470: PPUSH
5471: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
5475: LD_EXP 3
5479: PPUSH
5480: LD_STRING D2La-Lisa-2
5482: PPUSH
5483: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
5487: LD_EXP 1
5491: PPUSH
5492: LD_STRING D2La-JMM-3
5494: PPUSH
5495: CALL_OW 88
// InGameOff ;
5499: CALL_OW 9
// end ; if dec2 = 2 then
5503: LD_VAR 0 2
5507: PUSH
5508: LD_INT 2
5510: EQUAL
5511: IFFALSE 5575
// begin Say ( JMM , D2Lb-JMM-1 ) ;
5513: LD_EXP 1
5517: PPUSH
5518: LD_STRING D2Lb-JMM-1
5520: PPUSH
5521: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
5525: LD_EXP 3
5529: PPUSH
5530: LD_STRING D2Lb-Lisa-1
5532: PPUSH
5533: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
5537: LD_EXP 1
5541: PPUSH
5542: LD_STRING D2Lb-JMM-2
5544: PPUSH
5545: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
5549: LD_EXP 3
5553: PPUSH
5554: LD_STRING D2Lb-Lisa-2
5556: PPUSH
5557: CALL_OW 94
// fastEnd = 1 ;
5561: LD_ADDR_EXP 15
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// FinishMission ;
5569: CALL 9144 0 0
// exit ;
5573: GO 5872
// end ; if dec2 = 3 then
5575: LD_VAR 0 2
5579: PUSH
5580: LD_INT 3
5582: EQUAL
5583: IFFALSE 5611
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
5585: LD_EXP 3
5589: PPUSH
5590: LD_STRING D2Lc-Lisa-1
5592: PPUSH
5593: CALL_OW 94
// fastEnd = 1 ;
5597: LD_ADDR_EXP 15
5601: PUSH
5602: LD_INT 1
5604: ST_TO_ADDR
// FinishMission ;
5605: CALL 9144 0 0
// exit ;
5609: GO 5872
// end ; end ; if dec1 = 2 then
5611: LD_VAR 0 1
5615: PUSH
5616: LD_INT 2
5618: EQUAL
5619: IFFALSE 5635
// begin fastEnd = 1 ;
5621: LD_ADDR_EXP 15
5625: PUSH
5626: LD_INT 1
5628: ST_TO_ADDR
// FinishMission ;
5629: CALL 9144 0 0
// exit ;
5633: GO 5872
// end ; end ; if JMMGirl = 3 then
5635: LD_EXP 7
5639: PUSH
5640: LD_INT 3
5642: EQUAL
5643: IFFALSE 5872
// begin SayRadio ( Connie , D2X-Con-1 ) ;
5645: LD_EXP 4
5649: PPUSH
5650: LD_STRING D2X-Con-1
5652: PPUSH
5653: CALL_OW 94
// dec1 = query ( Q1 ) ;
5657: LD_ADDR_VAR 0 1
5661: PUSH
5662: LD_STRING Q1
5664: PPUSH
5665: CALL_OW 97
5669: ST_TO_ADDR
// if dec1 = 1 then
5670: LD_VAR 0 1
5674: PUSH
5675: LD_INT 1
5677: EQUAL
5678: IFFALSE 5848
// begin ComExitVehicle ( JMM ) ;
5680: LD_EXP 1
5684: PPUSH
5685: CALL_OW 121
// Say ( JMM , D2X-JMM-1 ) ;
5689: LD_EXP 1
5693: PPUSH
5694: LD_STRING D2X-JMM-1
5696: PPUSH
5697: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
5701: LD_EXP 4
5705: PPUSH
5706: LD_STRING D2X-Con-2
5708: PPUSH
5709: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
5713: LD_EXP 5
5717: PPUSH
5718: LD_STRING DPowell-Pow-1
5720: PPUSH
5721: CALL_OW 94
// dec2 = query ( Q2X ) ;
5725: LD_ADDR_VAR 0 2
5729: PUSH
5730: LD_STRING Q2X
5732: PPUSH
5733: CALL_OW 97
5737: ST_TO_ADDR
// if dec2 = 1 then
5738: LD_VAR 0 2
5742: PUSH
5743: LD_INT 1
5745: EQUAL
5746: IFFALSE 5764
// begin Say ( JMM , D2Xa-JMM-1 ) ;
5748: LD_EXP 1
5752: PPUSH
5753: LD_STRING D2Xa-JMM-1
5755: PPUSH
5756: CALL_OW 88
// InGameOff ;
5760: CALL_OW 9
// end ; if dec2 = 2 then
5764: LD_VAR 0 2
5768: PUSH
5769: LD_INT 2
5771: EQUAL
5772: IFFALSE 5812
// begin Say ( JMM , D2Xb-JMM-1 ) ;
5774: LD_EXP 1
5778: PPUSH
5779: LD_STRING D2Xb-JMM-1
5781: PPUSH
5782: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
5786: LD_EXP 4
5790: PPUSH
5791: LD_STRING D2Xb-Con-1
5793: PPUSH
5794: CALL_OW 94
// fastEnd = 1 ;
5798: LD_ADDR_EXP 15
5802: PUSH
5803: LD_INT 1
5805: ST_TO_ADDR
// FinishMission ;
5806: CALL 9144 0 0
// exit ;
5810: GO 5872
// end ; if dec2 = 3 then
5812: LD_VAR 0 2
5816: PUSH
5817: LD_INT 3
5819: EQUAL
5820: IFFALSE 5848
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
5822: LD_EXP 4
5826: PPUSH
5827: LD_STRING D2Xc-Con-1
5829: PPUSH
5830: CALL_OW 94
// fastEnd = 1 ;
5834: LD_ADDR_EXP 15
5838: PUSH
5839: LD_INT 1
5841: ST_TO_ADDR
// FinishMission ;
5842: CALL 9144 0 0
// exit ;
5846: GO 5872
// end ; end ; if dec1 = 2 then
5848: LD_VAR 0 1
5852: PUSH
5853: LD_INT 2
5855: EQUAL
5856: IFFALSE 5872
// begin fastEnd = 1 ;
5858: LD_ADDR_EXP 15
5862: PUSH
5863: LD_INT 1
5865: ST_TO_ADDR
// FinishMission ;
5866: CALL 9144 0 0
// exit ;
5870: GO 5872
// end ; end ; end ;
5872: PPOPN 2
5874: END
// every 0 0$1 trigger IsInArea ( JMM , Dialog2Area ) do
5875: LD_EXP 1
5879: PPUSH
5880: LD_INT 6
5882: PPUSH
5883: CALL_OW 308
5887: IFFALSE 6629
5889: GO 5891
5891: DISABLE
// begin InGameOn ;
5892: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
5896: LD_INT 35
5898: PPUSH
5899: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
5903: LD_EXP 1
5907: PPUSH
5908: CALL_OW 87
// ComMoveXY ( JMM , 62 , 104 ) ;
5912: LD_EXP 1
5916: PPUSH
5917: LD_INT 62
5919: PPUSH
5920: LD_INT 104
5922: PPUSH
5923: CALL_OW 111
// until GetDistUnits ( JMM , Joan ) < 4 or GetDistUnits ( JMM , Lisa ) < 4 or GetDistUnits ( JMM , Connie ) < 4 ;
5927: LD_EXP 1
5931: PPUSH
5932: LD_EXP 2
5936: PPUSH
5937: CALL_OW 296
5941: PUSH
5942: LD_INT 4
5944: LESS
5945: PUSH
5946: LD_EXP 1
5950: PPUSH
5951: LD_EXP 3
5955: PPUSH
5956: CALL_OW 296
5960: PUSH
5961: LD_INT 4
5963: LESS
5964: OR
5965: PUSH
5966: LD_EXP 1
5970: PPUSH
5971: LD_EXP 4
5975: PPUSH
5976: CALL_OW 296
5980: PUSH
5981: LD_INT 4
5983: LESS
5984: OR
5985: IFFALSE 5896
// case JMMGirl of 1 :
5987: LD_EXP 7
5991: PUSH
5992: LD_INT 1
5994: DOUBLE
5995: EQUAL
5996: IFTRUE 6000
5998: GO 6212
6000: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6001: LD_INT 22
6003: PUSH
6004: LD_INT 4
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PPUSH
6011: CALL_OW 69
6015: PPUSH
6016: LD_INT 1
6018: PPUSH
6019: CALL_OW 235
// ComTurnUnit ( Joan , JMM ) ;
6023: LD_EXP 2
6027: PPUSH
6028: LD_EXP 1
6032: PPUSH
6033: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
6037: LD_EXP 1
6041: PPUSH
6042: LD_EXP 2
6046: PPUSH
6047: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6051: LD_EXP 2
6055: PUSH
6056: LD_EXP 1
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PPUSH
6065: CALL_OW 87
// wait ( 0 0$1 ) ;
6069: LD_INT 35
6071: PPUSH
6072: CALL_OW 67
// DialogueOn ;
6076: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
6080: LD_EXP 2
6084: PPUSH
6085: LD_STRING D3J-Joan-1
6087: PPUSH
6088: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6092: LD_EXP 1
6096: PPUSH
6097: LD_STRING D3J-JMM-1
6099: PPUSH
6100: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
6104: LD_EXP 2
6108: PPUSH
6109: LD_STRING D3J-Joan-2
6111: PPUSH
6112: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
6116: LD_EXP 1
6120: PPUSH
6121: LD_STRING D3J-JMM-2
6123: PPUSH
6124: CALL_OW 88
// wait ( 0 0$1 ) ;
6128: LD_INT 35
6130: PPUSH
6131: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6135: LD_EXP 1
6139: PPUSH
6140: LD_STRING D4-JMM-1
6142: PPUSH
6143: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
6147: LD_EXP 2
6151: PPUSH
6152: LD_STRING D4-Joan-1
6154: PPUSH
6155: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6159: LD_EXP 1
6163: PPUSH
6164: LD_STRING D4-JMM-2
6166: PPUSH
6167: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
6171: LD_EXP 2
6175: PPUSH
6176: LD_STRING D4-Joan-2
6178: PPUSH
6179: CALL_OW 88
// DialogueOff ;
6183: CALL_OW 7
// InGameOff ;
6187: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
6191: LD_STRING M2J
6193: PPUSH
6194: CALL_OW 337
// SaveForQuickRestart ;
6198: CALL_OW 22
// russianAI = 1 ;
6202: LD_ADDR_EXP 13
6206: PUSH
6207: LD_INT 1
6209: ST_TO_ADDR
// end ; 2 :
6210: GO 6629
6212: LD_INT 2
6214: DOUBLE
6215: EQUAL
6216: IFTRUE 6220
6218: GO 6432
6220: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6221: LD_INT 22
6223: PUSH
6224: LD_INT 4
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PPUSH
6231: CALL_OW 69
6235: PPUSH
6236: LD_INT 1
6238: PPUSH
6239: CALL_OW 235
// ComTurnUnit ( Lisa , JMM ) ;
6243: LD_EXP 3
6247: PPUSH
6248: LD_EXP 1
6252: PPUSH
6253: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
6257: LD_EXP 1
6261: PPUSH
6262: LD_EXP 3
6266: PPUSH
6267: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
6271: LD_EXP 3
6275: PUSH
6276: LD_EXP 1
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PPUSH
6285: CALL_OW 87
// wait ( 0 0$1 ) ;
6289: LD_INT 35
6291: PPUSH
6292: CALL_OW 67
// DialogueOn ;
6296: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
6300: LD_EXP 3
6304: PPUSH
6305: LD_STRING D3L-Lisa-1
6307: PPUSH
6308: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
6312: LD_EXP 1
6316: PPUSH
6317: LD_STRING D3L-JMM-1
6319: PPUSH
6320: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
6324: LD_EXP 3
6328: PPUSH
6329: LD_STRING D3L-Lisa-2
6331: PPUSH
6332: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
6336: LD_EXP 1
6340: PPUSH
6341: LD_STRING D3L-JMM-2
6343: PPUSH
6344: CALL_OW 88
// wait ( 0 0$1 ) ;
6348: LD_INT 35
6350: PPUSH
6351: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6355: LD_EXP 1
6359: PPUSH
6360: LD_STRING D4-JMM-1
6362: PPUSH
6363: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
6367: LD_EXP 3
6371: PPUSH
6372: LD_STRING D4-Lisa-1
6374: PPUSH
6375: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
6379: LD_EXP 1
6383: PPUSH
6384: LD_STRING D4-JMM-1
6386: PPUSH
6387: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
6391: LD_EXP 3
6395: PPUSH
6396: LD_STRING D4-Lisa-2
6398: PPUSH
6399: CALL_OW 88
// DialogueOff ;
6403: CALL_OW 7
// InGameOff ;
6407: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
6411: LD_STRING M2L
6413: PPUSH
6414: CALL_OW 337
// SaveForQuickRestart ;
6418: CALL_OW 22
// russianAI = 1 ;
6422: LD_ADDR_EXP 13
6426: PUSH
6427: LD_INT 1
6429: ST_TO_ADDR
// end ; 3 :
6430: GO 6629
6432: LD_INT 3
6434: DOUBLE
6435: EQUAL
6436: IFTRUE 6440
6438: GO 6628
6440: POP
// begin SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
6441: LD_INT 22
6443: PUSH
6444: LD_INT 4
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PPUSH
6451: CALL_OW 69
6455: PPUSH
6456: LD_INT 1
6458: PPUSH
6459: CALL_OW 235
// ComTurnUnit ( Connie , JMM ) ;
6463: LD_EXP 4
6467: PPUSH
6468: LD_EXP 1
6472: PPUSH
6473: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
6477: LD_EXP 1
6481: PPUSH
6482: LD_EXP 4
6486: PPUSH
6487: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
6491: LD_EXP 2
6495: PUSH
6496: LD_EXP 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PPUSH
6505: CALL_OW 87
// wait ( 0 0$1 ) ;
6509: LD_INT 35
6511: PPUSH
6512: CALL_OW 67
// DialogueOn ;
6516: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
6520: LD_EXP 4
6524: PPUSH
6525: LD_STRING D3X-Con-1
6527: PPUSH
6528: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
6532: LD_EXP 1
6536: PPUSH
6537: LD_STRING D3J-JMM-1
6539: PPUSH
6540: CALL_OW 88
// wait ( 0 0$1 ) ;
6544: LD_INT 35
6546: PPUSH
6547: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
6551: LD_EXP 1
6555: PPUSH
6556: LD_STRING D4-JMM-1
6558: PPUSH
6559: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
6563: LD_EXP 4
6567: PPUSH
6568: LD_STRING D4-Con-1
6570: PPUSH
6571: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6575: LD_EXP 1
6579: PPUSH
6580: LD_STRING D4-JMM-2
6582: PPUSH
6583: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
6587: LD_EXP 4
6591: PPUSH
6592: LD_STRING D4-Con-2
6594: PPUSH
6595: CALL_OW 88
// DialogueOff ;
6599: CALL_OW 7
// InGameOff ;
6603: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
6607: LD_STRING M2X
6609: PPUSH
6610: CALL_OW 337
// SaveForQuickRestart ;
6614: CALL_OW 22
// russianAI = 1 ;
6618: LD_ADDR_EXP 13
6622: PUSH
6623: LD_INT 1
6625: ST_TO_ADDR
// end ; end ;
6626: GO 6629
6628: POP
// end ;
6629: END
// every 0 0$1 trigger IsSelected ( us_lab1 ) do
6630: LD_INT 32
6632: PPUSH
6633: CALL_OW 306
6637: IFFALSE 6970
6639: GO 6641
6641: DISABLE
// begin case JMMGirl of 1 :
6642: LD_EXP 7
6646: PUSH
6647: LD_INT 1
6649: DOUBLE
6650: EQUAL
6651: IFTRUE 6655
6653: GO 6777
6655: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
6656: LD_EXP 1
6660: PPUSH
6661: LD_STRING D6J-JMM-1
6663: PPUSH
6664: CALL_OW 88
// if TestCharacters ( 13f_Denis ) = true or TestCharacters ( 13s_Denis ) = true then
6668: LD_STRING 13f_Denis
6670: PPUSH
6671: CALL_OW 28
6675: PUSH
6676: LD_INT 1
6678: EQUAL
6679: PUSH
6680: LD_STRING 13s_Denis
6682: PPUSH
6683: CALL_OW 28
6687: PUSH
6688: LD_INT 1
6690: EQUAL
6691: OR
6692: IFFALSE 6732
// begin Say ( Joan , D6J-Joan-1 ) ;
6694: LD_EXP 2
6698: PPUSH
6699: LD_STRING D6J-Joan-1
6701: PPUSH
6702: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
6706: LD_EXP 1
6710: PPUSH
6711: LD_STRING D6J-JMM-2
6713: PPUSH
6714: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
6718: LD_EXP 2
6722: PPUSH
6723: LD_STRING D6J-Joan-2
6725: PPUSH
6726: CALL_OW 88
// end else
6730: GO 6744
// begin Say ( Joan , D6J-Joan-2a ) ;
6732: LD_EXP 2
6736: PPUSH
6737: LD_STRING D6J-Joan-2a
6739: PPUSH
6740: CALL_OW 88
// end ; Say ( JMM , D6J-JMM-3 ) ;
6744: LD_EXP 1
6748: PPUSH
6749: LD_STRING D6J-JMM-3
6751: PPUSH
6752: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
6756: LD_EXP 2
6760: PPUSH
6761: LD_STRING D6J-Joan-3
6763: PPUSH
6764: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6768: LD_STRING M3
6770: PPUSH
6771: CALL_OW 337
// end ; 2 :
6775: GO 6970
6777: LD_INT 2
6779: DOUBLE
6780: EQUAL
6781: IFTRUE 6785
6783: GO 6843
6785: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
6786: LD_EXP 1
6790: PPUSH
6791: LD_STRING D6L-JMM-1
6793: PPUSH
6794: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
6798: LD_EXP 3
6802: PPUSH
6803: LD_STRING D6L-Lisa-1
6805: PPUSH
6806: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
6810: LD_EXP 1
6814: PPUSH
6815: LD_STRING D6L-JMM-2
6817: PPUSH
6818: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
6822: LD_EXP 3
6826: PPUSH
6827: LD_STRING D6L-Lisa-2
6829: PPUSH
6830: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6834: LD_STRING M3
6836: PPUSH
6837: CALL_OW 337
// end ; 3 :
6841: GO 6970
6843: LD_INT 3
6845: DOUBLE
6846: EQUAL
6847: IFTRUE 6851
6849: GO 6969
6851: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
6852: LD_EXP 1
6856: PPUSH
6857: LD_STRING D6X-JMM-1
6859: PPUSH
6860: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
6864: LD_EXP 4
6868: PPUSH
6869: LD_STRING D6X-Con-1
6871: PPUSH
6872: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
6876: LD_EXP 1
6880: PPUSH
6881: LD_STRING D6X-JMM-2
6883: PPUSH
6884: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
6888: LD_EXP 4
6892: PPUSH
6893: LD_STRING D6X-Con-2
6895: PPUSH
6896: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
6900: LD_EXP 1
6904: PPUSH
6905: LD_STRING D6X-JMM-3
6907: PPUSH
6908: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
6912: LD_EXP 4
6916: PPUSH
6917: LD_STRING D6X-Con-3
6919: PPUSH
6920: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
6924: LD_EXP 1
6928: PPUSH
6929: LD_STRING D6X-JMM-4
6931: PPUSH
6932: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
6936: LD_EXP 4
6940: PPUSH
6941: LD_STRING D6X-Con-4
6943: PPUSH
6944: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
6948: LD_EXP 1
6952: PPUSH
6953: LD_STRING D6X-JMM-5
6955: PPUSH
6956: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
6960: LD_STRING M3
6962: PPUSH
6963: CALL_OW 337
// end ; end ;
6967: GO 6970
6969: POP
// end ;
6970: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
6971: LD_INT 22
6973: PUSH
6974: LD_INT 1
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 33
6983: PUSH
6984: LD_INT 2
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PPUSH
6995: CALL_OW 69
6999: PPUSH
7000: CALL_OW 306
7004: IFFALSE 7150
7006: GO 7008
7008: DISABLE
// begin case JMMGirl of 1 :
7009: LD_EXP 7
7013: PUSH
7014: LD_INT 1
7016: DOUBLE
7017: EQUAL
7018: IFTRUE 7022
7020: GO 7059
7022: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7023: LD_EXP 1
7027: PPUSH
7028: LD_STRING D5-JMM-1
7030: PPUSH
7031: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7035: LD_INT 77
7037: PPUSH
7038: LD_INT 87
7040: PPUSH
7041: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
7045: LD_EXP 2
7049: PPUSH
7050: LD_STRING D5-Joan-1
7052: PPUSH
7053: CALL_OW 88
// end ; 2 :
7057: GO 7150
7059: LD_INT 2
7061: DOUBLE
7062: EQUAL
7063: IFTRUE 7067
7065: GO 7104
7067: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7068: LD_EXP 1
7072: PPUSH
7073: LD_STRING D5-JMM-1
7075: PPUSH
7076: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7080: LD_INT 77
7082: PPUSH
7083: LD_INT 87
7085: PPUSH
7086: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
7090: LD_EXP 3
7094: PPUSH
7095: LD_STRING D5-Lisa-1
7097: PPUSH
7098: CALL_OW 88
// end ; 3 :
7102: GO 7150
7104: LD_INT 3
7106: DOUBLE
7107: EQUAL
7108: IFTRUE 7112
7110: GO 7149
7112: POP
// begin Say ( JMM , D5-JMM-1 ) ;
7113: LD_EXP 1
7117: PPUSH
7118: LD_STRING D5-JMM-1
7120: PPUSH
7121: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
7125: LD_INT 77
7127: PPUSH
7128: LD_INT 87
7130: PPUSH
7131: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
7135: LD_EXP 4
7139: PPUSH
7140: LD_STRING D5-Con-1
7142: PPUSH
7143: CALL_OW 88
// end ; end ;
7147: GO 7150
7149: POP
// end ;
7150: END
// every 15 15$0 trigger GetSide ( us_depot ) = 1 do
7151: LD_INT 48
7153: PPUSH
7154: CALL_OW 255
7158: PUSH
7159: LD_INT 1
7161: EQUAL
7162: IFFALSE 7259
7164: GO 7166
7166: DISABLE
// begin DialogueOn ;
7167: CALL_OW 6
// SayRadio ( Powell , D7-Pow-1 ) ;
7171: LD_EXP 5
7175: PPUSH
7176: LD_STRING D7-Pow-1
7178: PPUSH
7179: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7183: LD_EXP 1
7187: PPUSH
7188: LD_STRING D7-JMM-1
7190: PPUSH
7191: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7195: LD_EXP 5
7199: PPUSH
7200: LD_STRING D7-Pow-2
7202: PPUSH
7203: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
7207: LD_EXP 1
7211: PPUSH
7212: LD_STRING D7-JMM-2
7214: PPUSH
7215: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
7219: LD_EXP 5
7223: PPUSH
7224: LD_STRING D7-Pow-3
7226: PPUSH
7227: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
7231: LD_EXP 1
7235: PPUSH
7236: LD_STRING D7-JMM-3
7238: PPUSH
7239: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
7243: LD_EXP 5
7247: PPUSH
7248: LD_STRING D7-Pow-4
7250: PPUSH
7251: CALL_OW 94
// DialogueOff ;
7255: CALL_OW 7
// end ; end_of_file
7259: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
7260: LD_VAR 0 1
7264: PPUSH
7265: CALL_OW 255
7269: PUSH
7270: LD_INT 3
7272: EQUAL
7273: IFFALSE 7347
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7275: LD_ADDR_EXP 10
7279: PUSH
7280: LD_EXP 10
7284: PPUSH
7285: LD_INT 1
7287: PPUSH
7288: CALL_OW 3
7292: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7293: LD_ADDR_EXP 10
7297: PUSH
7298: LD_EXP 10
7302: PPUSH
7303: LD_INT 1
7305: PPUSH
7306: CALL_OW 3
7310: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7311: LD_ADDR_EXP 10
7315: PUSH
7316: LD_EXP 10
7320: PPUSH
7321: LD_INT 1
7323: PPUSH
7324: CALL_OW 3
7328: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
7329: LD_ADDR_EXP 10
7333: PUSH
7334: LD_EXP 10
7338: PPUSH
7339: LD_INT 1
7341: PPUSH
7342: CALL_OW 3
7346: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
7347: LD_VAR 0 1
7351: PPUSH
7352: CALL_OW 255
7356: PUSH
7357: LD_INT 3
7359: EQUAL
7360: PUSH
7361: LD_VAR 0 1
7365: PPUSH
7366: CALL_OW 266
7370: PUSH
7371: LD_INT 0
7373: EQUAL
7374: PUSH
7375: LD_VAR 0 1
7379: PPUSH
7380: CALL_OW 266
7384: PUSH
7385: LD_INT 2
7387: EQUAL
7388: OR
7389: PUSH
7390: LD_VAR 0 1
7394: PPUSH
7395: CALL_OW 266
7399: PUSH
7400: LD_INT 4
7402: EQUAL
7403: OR
7404: PUSH
7405: EMPTY
7406: LIST
7407: AND
7408: IFFALSE 7419
// ComUpgrade ( building ) ;
7410: LD_VAR 0 1
7414: PPUSH
7415: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
7419: LD_VAR 0 1
7423: PPUSH
7424: CALL_OW 255
7428: PUSH
7429: LD_INT 3
7431: EQUAL
7432: PUSH
7433: LD_VAR 0 1
7437: PPUSH
7438: CALL_OW 266
7442: PUSH
7443: LD_INT 32
7445: EQUAL
7446: AND
7447: IFFALSE 7488
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7449: LD_VAR 0 1
7453: PPUSH
7454: LD_INT 42
7456: PUSH
7457: LD_INT 43
7459: PUSH
7460: LD_INT 44
7462: PUSH
7463: LD_INT 46
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: PUSH
7472: LD_INT 1
7474: PPUSH
7475: LD_INT 4
7477: PPUSH
7478: CALL_OW 12
7482: ARRAY
7483: PPUSH
7484: CALL_OW 208
// if GetSide ( building ) = 3 and GetBType ( building ) = b_turret then
7488: LD_VAR 0 1
7492: PPUSH
7493: CALL_OW 255
7497: PUSH
7498: LD_INT 3
7500: EQUAL
7501: PUSH
7502: LD_VAR 0 1
7506: PPUSH
7507: CALL_OW 266
7511: PUSH
7512: LD_INT 33
7514: EQUAL
7515: AND
7516: IFFALSE 7557
// AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
7518: LD_VAR 0 1
7522: PPUSH
7523: LD_INT 42
7525: PUSH
7526: LD_INT 43
7528: PUSH
7529: LD_INT 44
7531: PUSH
7532: LD_INT 46
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: LD_INT 1
7543: PPUSH
7544: LD_INT 4
7546: PPUSH
7547: CALL_OW 12
7551: ARRAY
7552: PPUSH
7553: CALL_OW 208
// end ;
7557: PPOPN 1
7559: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
7560: LD_VAR 0 1
7564: PPUSH
7565: CALL_OW 255
7569: PUSH
7570: LD_INT 3
7572: EQUAL
7573: PUSH
7574: LD_VAR 0 1
7578: PPUSH
7579: CALL_OW 247
7583: PUSH
7584: LD_INT 3
7586: EQUAL
7587: AND
7588: IFFALSE 8280
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
7590: LD_VAR 0 1
7594: PPUSH
7595: CALL_OW 266
7599: PUSH
7600: LD_INT 31
7602: EQUAL
7603: PUSH
7604: LD_VAR 0 1
7608: PPUSH
7609: CALL_OW 266
7613: PUSH
7614: LD_INT 32
7616: EQUAL
7617: OR
7618: PUSH
7619: LD_VAR 0 1
7623: PPUSH
7624: CALL_OW 266
7628: PUSH
7629: LD_INT 36
7631: EQUAL
7632: OR
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 266
7643: PUSH
7644: LD_INT 0
7646: EQUAL
7647: OR
7648: PUSH
7649: LD_VAR 0 1
7653: PPUSH
7654: CALL_OW 266
7658: PUSH
7659: LD_INT 24
7661: EQUAL
7662: OR
7663: PUSH
7664: LD_VAR 0 1
7668: PPUSH
7669: CALL_OW 266
7673: PUSH
7674: LD_INT 17
7676: EQUAL
7677: OR
7678: PUSH
7679: LD_VAR 0 1
7683: PPUSH
7684: CALL_OW 266
7688: PUSH
7689: LD_INT 25
7691: EQUAL
7692: OR
7693: PUSH
7694: LD_VAR 0 1
7698: PPUSH
7699: CALL_OW 266
7703: PUSH
7704: LD_INT 19
7706: EQUAL
7707: OR
7708: PUSH
7709: LD_VAR 0 1
7713: PPUSH
7714: CALL_OW 266
7718: PUSH
7719: LD_INT 20
7721: EQUAL
7722: OR
7723: PUSH
7724: LD_VAR 0 1
7728: PPUSH
7729: CALL_OW 266
7733: PUSH
7734: LD_INT 18
7736: EQUAL
7737: OR
7738: PUSH
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 266
7748: PUSH
7749: LD_INT 21
7751: EQUAL
7752: OR
7753: PUSH
7754: LD_VAR 0 1
7758: PPUSH
7759: CALL_OW 266
7763: PUSH
7764: LD_INT 23
7766: EQUAL
7767: OR
7768: PUSH
7769: LD_VAR 0 1
7773: PPUSH
7774: CALL_OW 266
7778: PUSH
7779: LD_INT 16
7781: EQUAL
7782: OR
7783: PUSH
7784: LD_VAR 0 1
7788: PPUSH
7789: CALL_OW 266
7793: PUSH
7794: LD_INT 6
7796: EQUAL
7797: OR
7798: PUSH
7799: LD_VAR 0 1
7803: PPUSH
7804: CALL_OW 266
7808: PUSH
7809: LD_INT 29
7811: EQUAL
7812: OR
7813: PUSH
7814: LD_VAR 0 1
7818: PPUSH
7819: CALL_OW 266
7823: PUSH
7824: LD_INT 26
7826: EQUAL
7827: OR
7828: PUSH
7829: LD_VAR 0 1
7833: PPUSH
7834: CALL_OW 266
7838: PUSH
7839: LD_INT 30
7841: EQUAL
7842: OR
7843: PUSH
7844: LD_VAR 0 1
7848: PPUSH
7849: CALL_OW 266
7853: PUSH
7854: LD_INT 28
7856: EQUAL
7857: OR
7858: PUSH
7859: LD_VAR 0 1
7863: PPUSH
7864: CALL_OW 266
7868: PUSH
7869: LD_INT 27
7871: EQUAL
7872: OR
7873: PUSH
7874: LD_VAR 0 1
7878: PPUSH
7879: CALL_OW 266
7883: PUSH
7884: LD_INT 33
7886: EQUAL
7887: OR
7888: PUSH
7889: LD_VAR 0 1
7893: PPUSH
7894: CALL_OW 266
7898: PUSH
7899: LD_INT 2
7901: EQUAL
7902: OR
7903: PUSH
7904: LD_VAR 0 1
7908: PPUSH
7909: CALL_OW 266
7913: PUSH
7914: LD_INT 4
7916: EQUAL
7917: OR
7918: IFFALSE 8004
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
7920: LD_ADDR_EXP 10
7924: PUSH
7925: LD_EXP 10
7929: PUSH
7930: LD_VAR 0 1
7934: PPUSH
7935: CALL_OW 266
7939: ADD
7940: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
7941: LD_ADDR_EXP 10
7945: PUSH
7946: LD_EXP 10
7950: PUSH
7951: LD_VAR 0 1
7955: PPUSH
7956: CALL_OW 250
7960: ADD
7961: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
7962: LD_ADDR_EXP 10
7966: PUSH
7967: LD_EXP 10
7971: PUSH
7972: LD_VAR 0 1
7976: PPUSH
7977: CALL_OW 251
7981: ADD
7982: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
7983: LD_ADDR_EXP 10
7987: PUSH
7988: LD_EXP 10
7992: PUSH
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 254
8002: ADD
8003: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL_OW 266
8013: PUSH
8014: LD_INT 1
8016: EQUAL
8017: IFFALSE 8096
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
8019: LD_ADDR_EXP 10
8023: PUSH
8024: LD_EXP 10
8028: PUSH
8029: LD_INT 0
8031: ADD
8032: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8033: LD_ADDR_EXP 10
8037: PUSH
8038: LD_EXP 10
8042: PUSH
8043: LD_VAR 0 1
8047: PPUSH
8048: CALL_OW 250
8052: ADD
8053: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8054: LD_ADDR_EXP 10
8058: PUSH
8059: LD_EXP 10
8063: PUSH
8064: LD_VAR 0 1
8068: PPUSH
8069: CALL_OW 251
8073: ADD
8074: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8075: LD_ADDR_EXP 10
8079: PUSH
8080: LD_EXP 10
8084: PUSH
8085: LD_VAR 0 1
8089: PPUSH
8090: CALL_OW 254
8094: ADD
8095: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
8096: LD_VAR 0 1
8100: PPUSH
8101: CALL_OW 266
8105: PUSH
8106: LD_INT 3
8108: EQUAL
8109: IFFALSE 8188
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
8111: LD_ADDR_EXP 10
8115: PUSH
8116: LD_EXP 10
8120: PUSH
8121: LD_INT 2
8123: ADD
8124: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8125: LD_ADDR_EXP 10
8129: PUSH
8130: LD_EXP 10
8134: PUSH
8135: LD_VAR 0 1
8139: PPUSH
8140: CALL_OW 250
8144: ADD
8145: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8146: LD_ADDR_EXP 10
8150: PUSH
8151: LD_EXP 10
8155: PUSH
8156: LD_VAR 0 1
8160: PPUSH
8161: CALL_OW 251
8165: ADD
8166: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8167: LD_ADDR_EXP 10
8171: PUSH
8172: LD_EXP 10
8176: PUSH
8177: LD_VAR 0 1
8181: PPUSH
8182: CALL_OW 254
8186: ADD
8187: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
8188: LD_VAR 0 1
8192: PPUSH
8193: CALL_OW 266
8197: PUSH
8198: LD_INT 5
8200: EQUAL
8201: IFFALSE 8280
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
8203: LD_ADDR_EXP 10
8207: PUSH
8208: LD_EXP 10
8212: PUSH
8213: LD_INT 4
8215: ADD
8216: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
8217: LD_ADDR_EXP 10
8221: PUSH
8222: LD_EXP 10
8226: PUSH
8227: LD_VAR 0 1
8231: PPUSH
8232: CALL_OW 250
8236: ADD
8237: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
8238: LD_ADDR_EXP 10
8242: PUSH
8243: LD_EXP 10
8247: PUSH
8248: LD_VAR 0 1
8252: PPUSH
8253: CALL_OW 251
8257: ADD
8258: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
8259: LD_ADDR_EXP 10
8263: PUSH
8264: LD_EXP 10
8268: PUSH
8269: LD_VAR 0 1
8273: PPUSH
8274: CALL_OW 254
8278: ADD
8279: ST_TO_ADDR
// end ; end ; end ;
8280: PPOPN 1
8282: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact1 or factory = ru_fact2 then
8283: LD_VAR 0 2
8287: PUSH
8288: LD_INT 1
8290: EQUAL
8291: PUSH
8292: LD_VAR 0 2
8296: PUSH
8297: LD_INT 40
8299: EQUAL
8300: OR
8301: IFFALSE 8425
// if GetSide ( vehicle ) = 3 then
8303: LD_VAR 0 1
8307: PPUSH
8308: CALL_OW 255
8312: PUSH
8313: LD_INT 3
8315: EQUAL
8316: IFFALSE 8425
// begin if GetWeapon ( vehicle ) = 47 or GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 264
8327: PUSH
8328: LD_INT 47
8330: EQUAL
8331: PUSH
8332: LD_VAR 0 1
8336: PPUSH
8337: CALL_OW 264
8341: PUSH
8342: LD_INT 46
8344: EQUAL
8345: OR
8346: PUSH
8347: LD_VAR 0 1
8351: PPUSH
8352: CALL_OW 264
8356: PUSH
8357: LD_INT 45
8359: EQUAL
8360: OR
8361: PUSH
8362: LD_VAR 0 1
8366: PPUSH
8367: CALL_OW 264
8371: PUSH
8372: LD_INT 44
8374: EQUAL
8375: OR
8376: IFFALSE 8394
// russianTanks = russianTanks ^ vehicle ;
8378: LD_ADDR_EXP 11
8382: PUSH
8383: LD_EXP 11
8387: PUSH
8388: LD_VAR 0 1
8392: ADD
8393: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 49 then
8394: LD_VAR 0 1
8398: PPUSH
8399: CALL_OW 264
8403: PUSH
8404: LD_INT 49
8406: EQUAL
8407: IFFALSE 8425
// russianTimeLapsers = russianTimeLapsers ^ vehicle ;
8409: LD_ADDR_EXP 12
8413: PUSH
8414: LD_EXP 12
8418: PUSH
8419: LD_VAR 0 1
8423: ADD
8424: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 1 and GetWeapon ( vehicle ) = 10 then
8425: LD_VAR 0 1
8429: PPUSH
8430: CALL_OW 255
8434: PUSH
8435: LD_INT 1
8437: EQUAL
8438: PUSH
8439: LD_VAR 0 1
8443: PPUSH
8444: CALL_OW 264
8448: PUSH
8449: LD_INT 10
8451: EQUAL
8452: AND
8453: IFFALSE 8469
// amLaserCounter = amLaserCounter + 1 ;
8455: LD_ADDR_EXP 9
8459: PUSH
8460: LD_EXP 9
8464: PUSH
8465: LD_INT 1
8467: PLUS
8468: ST_TO_ADDR
// end ;
8469: PPOPN 2
8471: END
// on UnitGoesToRed ( unit ) do var i ;
8472: LD_INT 0
8474: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
8475: LD_VAR 0 1
8479: PPUSH
8480: CALL_OW 255
8484: PUSH
8485: LD_INT 3
8487: EQUAL
8488: PUSH
8489: LD_VAR 0 1
8493: PPUSH
8494: CALL_OW 247
8498: PUSH
8499: LD_INT 2
8501: EQUAL
8502: AND
8503: IFFALSE 8615
// begin if russianTanks > 0 then
8505: LD_EXP 11
8509: PUSH
8510: LD_INT 0
8512: GREATER
8513: IFFALSE 8560
// for i in russianTanks do
8515: LD_ADDR_VAR 0 2
8519: PUSH
8520: LD_EXP 11
8524: PUSH
8525: FOR_IN
8526: IFFALSE 8558
// if i = unit then
8528: LD_VAR 0 2
8532: PUSH
8533: LD_VAR 0 1
8537: EQUAL
8538: IFFALSE 8556
// russianTanks = russianTanks diff unit ;
8540: LD_ADDR_EXP 11
8544: PUSH
8545: LD_EXP 11
8549: PUSH
8550: LD_VAR 0 1
8554: DIFF
8555: ST_TO_ADDR
8556: GO 8525
8558: POP
8559: POP
// if russianTimeLapsers > 0 then
8560: LD_EXP 12
8564: PUSH
8565: LD_INT 0
8567: GREATER
8568: IFFALSE 8615
// for i in russianTimeLapsers do
8570: LD_ADDR_VAR 0 2
8574: PUSH
8575: LD_EXP 12
8579: PUSH
8580: FOR_IN
8581: IFFALSE 8613
// if i = unit then
8583: LD_VAR 0 2
8587: PUSH
8588: LD_VAR 0 1
8592: EQUAL
8593: IFFALSE 8611
// russianTimeLapsers = russianTimeLapsers diff unit ;
8595: LD_ADDR_EXP 12
8599: PUSH
8600: LD_EXP 12
8604: PUSH
8605: LD_VAR 0 1
8609: DIFF
8610: ST_TO_ADDR
8611: GO 8580
8613: POP
8614: POP
// end ; end ;
8615: PPOPN 2
8617: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
8618: LD_VAR 0 1
8622: PPUSH
8623: CALL 10415 0 1
// end ; end_of_file
8627: PPOPN 1
8629: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , ExitArea ) and fastEnd = 0 do var JMMGirlVeh , dec ;
8630: LD_EXP 1
8634: PPUSH
8635: CALL_OW 310
8639: PPUSH
8640: LD_INT 12
8642: PPUSH
8643: CALL_OW 308
8647: PUSH
8648: LD_EXP 15
8652: PUSH
8653: LD_INT 0
8655: EQUAL
8656: AND
8657: IFFALSE 9003
8659: GO 8661
8661: DISABLE
8662: LD_INT 0
8664: PPUSH
8665: PPUSH
// begin enable ;
8666: ENABLE
// if JMMGirl = 1 then
8667: LD_EXP 7
8671: PUSH
8672: LD_INT 1
8674: EQUAL
8675: IFFALSE 8692
// JMMGirlVeh = IsInUnit ( Joan ) ;
8677: LD_ADDR_VAR 0 1
8681: PUSH
8682: LD_EXP 2
8686: PPUSH
8687: CALL_OW 310
8691: ST_TO_ADDR
// if JMMGirl = 2 then
8692: LD_EXP 7
8696: PUSH
8697: LD_INT 2
8699: EQUAL
8700: IFFALSE 8717
// JMMGirlVeh = IsInUnit ( Lisa ) ;
8702: LD_ADDR_VAR 0 1
8706: PUSH
8707: LD_EXP 3
8711: PPUSH
8712: CALL_OW 310
8716: ST_TO_ADDR
// if JMMGirl = 3 then
8717: LD_EXP 7
8721: PUSH
8722: LD_INT 3
8724: EQUAL
8725: IFFALSE 8742
// JMMGirlVeh = IsInUnit ( Connie ) ;
8727: LD_ADDR_VAR 0 1
8731: PUSH
8732: LD_EXP 4
8736: PPUSH
8737: CALL_OW 310
8741: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
8742: LD_EXP 1
8746: PPUSH
8747: CALL_OW 310
8751: PPUSH
8752: LD_EXP 2
8756: PPUSH
8757: CALL_OW 310
8761: PPUSH
8762: CALL_OW 296
8766: PUSH
8767: LD_INT 10
8769: LESS
8770: PUSH
8771: LD_EXP 1
8775: PPUSH
8776: CALL_OW 310
8780: PPUSH
8781: LD_EXP 3
8785: PPUSH
8786: CALL_OW 310
8790: PPUSH
8791: CALL_OW 296
8795: PUSH
8796: LD_INT 10
8798: LESS
8799: OR
8800: PUSH
8801: LD_EXP 1
8805: PPUSH
8806: CALL_OW 310
8810: PPUSH
8811: LD_EXP 4
8815: PPUSH
8816: CALL_OW 310
8820: PPUSH
8821: CALL_OW 296
8825: PUSH
8826: LD_INT 10
8828: LESS
8829: OR
8830: IFFALSE 8924
// begin case Query ( Q3b ) of 1 :
8832: LD_STRING Q3b
8834: PPUSH
8835: CALL_OW 97
8839: PUSH
8840: LD_INT 1
8842: DOUBLE
8843: EQUAL
8844: IFTRUE 8848
8846: GO 8921
8848: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
8849: LD_VAR 0 1
8853: PPUSH
8854: CALL_OW 265
8858: PUSH
8859: EMPTY
8860: LIST
8861: PUSH
8862: LD_VAR 0 1
8866: PPUSH
8867: CALL_OW 262
8871: PUSH
8872: EMPTY
8873: LIST
8874: PUSH
8875: LD_VAR 0 1
8879: PPUSH
8880: CALL_OW 263
8884: PUSH
8885: EMPTY
8886: LIST
8887: PUSH
8888: LD_VAR 0 1
8892: PPUSH
8893: CALL_OW 264
8897: PUSH
8898: EMPTY
8899: LIST
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PPUSH
8907: LD_STRING 14_JMMGirlVeh_1
8909: PPUSH
8910: CALL_OW 39
// FinishMission ;
8914: CALL 9144 0 0
// disable ;
8918: DISABLE
// end ; end ;
8919: GO 8922
8921: POP
// end else
8922: GO 9003
// begin if JMMGirl = 1 then
8924: LD_EXP 7
8928: PUSH
8929: LD_INT 1
8931: EQUAL
8932: IFFALSE 8949
// dec := Query ( Q3bJ ) else
8934: LD_ADDR_VAR 0 2
8938: PUSH
8939: LD_STRING Q3bJ
8941: PPUSH
8942: CALL_OW 97
8946: ST_TO_ADDR
8947: GO 8987
// if JMMGirl = 2 then
8949: LD_EXP 7
8953: PUSH
8954: LD_INT 2
8956: EQUAL
8957: IFFALSE 8974
// dec := Query ( Q3bL ) else
8959: LD_ADDR_VAR 0 2
8963: PUSH
8964: LD_STRING Q3bL
8966: PPUSH
8967: CALL_OW 97
8971: ST_TO_ADDR
8972: GO 8987
// dec := Query ( Q3bX ) ;
8974: LD_ADDR_VAR 0 2
8978: PUSH
8979: LD_STRING Q3bX
8981: PPUSH
8982: CALL_OW 97
8986: ST_TO_ADDR
// if dec = 1 then
8987: LD_VAR 0 2
8991: PUSH
8992: LD_INT 1
8994: EQUAL
8995: IFFALSE 9003
// begin FinishMission ;
8997: CALL 9144 0 0
// exit ;
9001: GO 9003
// end ; end ; end ;
9003: PPOPN 2
9005: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and fastEnd = 0 do
9006: LD_INT 22
9008: PUSH
9009: LD_INT 3
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: LD_INT 21
9018: PUSH
9019: LD_INT 1
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PUSH
9035: LD_INT 0
9037: EQUAL
9038: PUSH
9039: LD_EXP 15
9043: PUSH
9044: LD_INT 0
9046: EQUAL
9047: AND
9048: IFFALSE 9143
9050: GO 9052
9052: DISABLE
// begin DialogueOn ;
9053: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9057: LD_EXP 1
9061: PPUSH
9062: LD_STRING DEnd-JMM-1
9064: PPUSH
9065: CALL_OW 88
// if JMMGirl = 1 then
9069: LD_EXP 7
9073: PUSH
9074: LD_INT 1
9076: EQUAL
9077: IFFALSE 9091
// Say ( Joan , DEnd-Joan-1 ) ;
9079: LD_EXP 2
9083: PPUSH
9084: LD_STRING DEnd-Joan-1
9086: PPUSH
9087: CALL_OW 88
// if JMMGirl = 2 then
9091: LD_EXP 7
9095: PUSH
9096: LD_INT 2
9098: EQUAL
9099: IFFALSE 9113
// Say ( Lisa , DEnd-Lisa-1 ) ;
9101: LD_EXP 3
9105: PPUSH
9106: LD_STRING DEnd-Lisa-1
9108: PPUSH
9109: CALL_OW 88
// if JMMGirl = 3 then
9113: LD_EXP 7
9117: PUSH
9118: LD_INT 3
9120: EQUAL
9121: IFFALSE 9135
// Say ( Connie , DEnd-Con-1 ) ;
9123: LD_EXP 4
9127: PPUSH
9128: LD_STRING DEnd-Con-1
9130: PPUSH
9131: CALL_OW 88
// DialogueOff ;
9135: CALL_OW 7
// FinishMission ;
9139: CALL 9144 0 0
// end ;
9143: END
// export function FinishMission ; var JMMNewVeh , m1 , m2 , m3 ; begin
9144: LD_INT 0
9146: PPUSH
9147: PPUSH
9148: PPUSH
9149: PPUSH
9150: PPUSH
// m1 := false ;
9151: LD_ADDR_VAR 0 3
9155: PUSH
9156: LD_INT 0
9158: ST_TO_ADDR
// m2 := false ;
9159: LD_ADDR_VAR 0 4
9163: PUSH
9164: LD_INT 0
9166: ST_TO_ADDR
// m3 := false ;
9167: LD_ADDR_VAR 0 5
9171: PUSH
9172: LD_INT 0
9174: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9175: LD_EXP 1
9179: PPUSH
9180: LD_STRING 14_JMM
9182: PPUSH
9183: CALL_OW 38
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9187: LD_EXP 1
9191: PPUSH
9192: CALL_OW 310
9196: PUSH
9197: LD_EXP 1
9201: PPUSH
9202: CALL_OW 310
9206: PPUSH
9207: CALL_OW 247
9211: PUSH
9212: LD_INT 2
9214: EQUAL
9215: AND
9216: IFFALSE 9298
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9218: LD_ADDR_VAR 0 2
9222: PUSH
9223: LD_EXP 1
9227: PPUSH
9228: CALL_OW 310
9232: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9233: LD_VAR 0 2
9237: PPUSH
9238: CALL_OW 265
9242: PUSH
9243: EMPTY
9244: LIST
9245: PUSH
9246: LD_VAR 0 2
9250: PPUSH
9251: CALL_OW 262
9255: PUSH
9256: EMPTY
9257: LIST
9258: PUSH
9259: LD_VAR 0 2
9263: PPUSH
9264: CALL_OW 263
9268: PUSH
9269: EMPTY
9270: LIST
9271: PUSH
9272: LD_VAR 0 2
9276: PPUSH
9277: CALL_OW 264
9281: PUSH
9282: EMPTY
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: PPUSH
9291: LD_STRING 14_JMMVeh_1
9293: PPUSH
9294: CALL_OW 39
// end ; if fastEnd = 1 then
9298: LD_EXP 15
9302: PUSH
9303: LD_INT 1
9305: EQUAL
9306: IFFALSE 9395
// begin AddMedal ( fastend , - 1 ) ;
9308: LD_STRING fastend
9310: PPUSH
9311: LD_INT 1
9313: NEG
9314: PPUSH
9315: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9319: LD_STRING fastend
9321: PPUSH
9322: LD_INT 1
9324: NEG
9325: PPUSH
9326: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9330: LD_STRING fastend
9332: PPUSH
9333: LD_INT 1
9335: NEG
9336: PPUSH
9337: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9341: LD_EXP 7
9345: PPUSH
9346: LD_STRING 14_JMMGirl_1
9348: PPUSH
9349: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9353: LD_INT 0
9355: PPUSH
9356: LD_STRING 14_JMMGirlStatus_1
9358: PPUSH
9359: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9363: LD_INT 0
9365: PPUSH
9366: LD_STRING 14_KappaStatus_1
9368: PPUSH
9369: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9373: LD_STRING Eliminate
9375: PPUSH
9376: CALL_OW 102
// RewardPeople ( JMM ) ;
9380: LD_EXP 1
9384: PPUSH
9385: CALL_OW 43
// YouWin ;
9389: CALL_OW 103
// exit ;
9393: GO 10220
// end ; if fastEnd = 0 then
9395: LD_EXP 15
9399: PUSH
9400: LD_INT 0
9402: EQUAL
9403: IFFALSE 10171
// begin RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
9405: LD_INT 22
9407: PUSH
9408: LD_INT 1
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: LD_INT 3
9417: PUSH
9418: LD_INT 25
9420: PUSH
9421: LD_INT 12
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 3
9434: PUSH
9435: LD_INT 25
9437: PUSH
9438: LD_INT 16
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 69
9458: PPUSH
9459: CALL_OW 43
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9463: LD_EXP 7
9467: PPUSH
9468: LD_STRING 14_JMMGirl_1
9470: PPUSH
9471: CALL_OW 39
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and GetSide ( us_depot ) = 1 then
9475: LD_INT 22
9477: PUSH
9478: LD_INT 3
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 21
9487: PUSH
9488: LD_INT 1
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 69
9503: PUSH
9504: LD_INT 0
9506: EQUAL
9507: PUSH
9508: LD_INT 48
9510: PPUSH
9511: CALL_OW 255
9515: PUSH
9516: LD_INT 1
9518: EQUAL
9519: AND
9520: IFFALSE 9534
// SaveVariable ( 1 , 14_KappaStatus_1 ) else
9522: LD_INT 1
9524: PPUSH
9525: LD_STRING 14_KappaStatus_1
9527: PPUSH
9528: CALL_OW 39
9532: GO 9544
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9534: LD_INT 0
9536: PPUSH
9537: LD_STRING 14_KappaStatus_1
9539: PPUSH
9540: CALL_OW 39
// case JMMGirl of 1 :
9544: LD_EXP 7
9548: PUSH
9549: LD_INT 1
9551: DOUBLE
9552: EQUAL
9553: IFTRUE 9557
9555: GO 9713
9557: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
9558: LD_EXP 2
9562: PPUSH
9563: CALL_OW 302
9567: PUSH
9568: LD_EXP 2
9572: PPUSH
9573: CALL_OW 255
9577: PUSH
9578: LD_INT 1
9580: EQUAL
9581: AND
9582: PUSH
9583: LD_INT 22
9585: PUSH
9586: LD_INT 3
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PUSH
9593: LD_INT 21
9595: PUSH
9596: LD_INT 1
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 69
9611: PUSH
9612: LD_INT 0
9614: EQUAL
9615: PUSH
9616: LD_EXP 1
9620: PPUSH
9621: CALL_OW 310
9625: PPUSH
9626: LD_EXP 2
9630: PPUSH
9631: CALL_OW 310
9635: PPUSH
9636: CALL_OW 296
9640: PUSH
9641: LD_INT 10
9643: LESS
9644: OR
9645: AND
9646: IFFALSE 9690
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9648: LD_INT 1
9650: PPUSH
9651: LD_STRING 14_JMMGirlStatus_1
9653: PPUSH
9654: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
9658: LD_EXP 2
9662: PPUSH
9663: LD_STRING 14_Joan
9665: PPUSH
9666: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9670: LD_STRING protect
9672: PPUSH
9673: LD_INT 1
9675: PPUSH
9676: CALL_OW 101
// m1 := true ;
9680: LD_ADDR_VAR 0 3
9684: PUSH
9685: LD_INT 1
9687: ST_TO_ADDR
// end else
9688: GO 9711
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9690: LD_INT 0
9692: PPUSH
9693: LD_STRING 14_JMMGirlStatus_1
9695: PPUSH
9696: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
9700: LD_STRING protect
9702: PPUSH
9703: LD_INT 1
9705: NEG
9706: PPUSH
9707: CALL_OW 101
// end ; end ; 2 :
9711: GO 10042
9713: LD_INT 2
9715: DOUBLE
9716: EQUAL
9717: IFTRUE 9721
9719: GO 9877
9721: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
9722: LD_EXP 3
9726: PPUSH
9727: CALL_OW 302
9731: PUSH
9732: LD_EXP 3
9736: PPUSH
9737: CALL_OW 255
9741: PUSH
9742: LD_INT 1
9744: EQUAL
9745: AND
9746: PUSH
9747: LD_INT 22
9749: PUSH
9750: LD_INT 3
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 21
9759: PUSH
9760: LD_INT 1
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PPUSH
9771: CALL_OW 69
9775: PUSH
9776: LD_INT 0
9778: EQUAL
9779: PUSH
9780: LD_EXP 1
9784: PPUSH
9785: CALL_OW 310
9789: PPUSH
9790: LD_EXP 3
9794: PPUSH
9795: CALL_OW 310
9799: PPUSH
9800: CALL_OW 296
9804: PUSH
9805: LD_INT 10
9807: LESS
9808: OR
9809: AND
9810: IFFALSE 9854
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9812: LD_INT 1
9814: PPUSH
9815: LD_STRING 14_JMMGirlStatus_1
9817: PPUSH
9818: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
9822: LD_EXP 3
9826: PPUSH
9827: LD_STRING 14_Lisa
9829: PPUSH
9830: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9834: LD_STRING protect
9836: PPUSH
9837: LD_INT 1
9839: PPUSH
9840: CALL_OW 101
// m1 := true ;
9844: LD_ADDR_VAR 0 3
9848: PUSH
9849: LD_INT 1
9851: ST_TO_ADDR
// end else
9852: GO 9875
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9854: LD_INT 0
9856: PPUSH
9857: LD_STRING 14_JMMGirlStatus_1
9859: PPUSH
9860: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
9864: LD_STRING protect
9866: PPUSH
9867: LD_INT 2
9869: NEG
9870: PPUSH
9871: CALL_OW 101
// end ; end ; 3 :
9875: GO 10042
9877: LD_INT 3
9879: DOUBLE
9880: EQUAL
9881: IFTRUE 9885
9883: GO 10041
9885: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
9886: LD_EXP 4
9890: PPUSH
9891: CALL_OW 302
9895: PUSH
9896: LD_EXP 4
9900: PPUSH
9901: CALL_OW 255
9905: PUSH
9906: LD_INT 1
9908: EQUAL
9909: AND
9910: PUSH
9911: LD_INT 22
9913: PUSH
9914: LD_INT 3
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PUSH
9921: LD_INT 21
9923: PUSH
9924: LD_INT 1
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PPUSH
9935: CALL_OW 69
9939: PUSH
9940: LD_INT 0
9942: EQUAL
9943: PUSH
9944: LD_EXP 1
9948: PPUSH
9949: CALL_OW 310
9953: PPUSH
9954: LD_EXP 4
9958: PPUSH
9959: CALL_OW 310
9963: PPUSH
9964: CALL_OW 296
9968: PUSH
9969: LD_INT 10
9971: LESS
9972: OR
9973: AND
9974: IFFALSE 10018
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
9976: LD_INT 1
9978: PPUSH
9979: LD_STRING 14_JMMGirlStatus_1
9981: PPUSH
9982: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
9986: LD_EXP 4
9990: PPUSH
9991: LD_STRING 14_Connie
9993: PPUSH
9994: CALL_OW 38
// AddMedal ( protect , 1 ) ;
9998: LD_STRING protect
10000: PPUSH
10001: LD_INT 1
10003: PPUSH
10004: CALL_OW 101
// m1 := true ;
10008: LD_ADDR_VAR 0 3
10012: PUSH
10013: LD_INT 1
10015: ST_TO_ADDR
// end else
10016: GO 10039
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10018: LD_INT 0
10020: PPUSH
10021: LD_STRING 14_JMMGirlStatus_1
10023: PPUSH
10024: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10028: LD_STRING protect
10030: PPUSH
10031: LD_INT 3
10033: NEG
10034: PPUSH
10035: CALL_OW 101
// end ; end ; end ;
10039: GO 10042
10041: POP
// if amLaserCounter >= 2 then
10042: LD_EXP 9
10046: PUSH
10047: LD_INT 2
10049: GREATEREQUAL
10050: IFFALSE 10072
// begin AddMedal ( double , 1 ) ;
10052: LD_STRING double
10054: PPUSH
10055: LD_INT 1
10057: PPUSH
10058: CALL_OW 101
// m2 := true ;
10062: LD_ADDR_VAR 0 4
10066: PUSH
10067: LD_INT 1
10069: ST_TO_ADDR
// end else
10070: GO 10106
// begin if amLaserCounter = 1 then
10072: LD_EXP 9
10076: PUSH
10077: LD_INT 1
10079: EQUAL
10080: IFFALSE 10095
// AddMedal ( double , - 2 ) else
10082: LD_STRING double
10084: PPUSH
10085: LD_INT 2
10087: NEG
10088: PPUSH
10089: CALL_OW 101
10093: GO 10106
// AddMedal ( double , - 1 ) ;
10095: LD_STRING double
10097: PPUSH
10098: LD_INT 1
10100: NEG
10101: PPUSH
10102: CALL_OW 101
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 then
10106: LD_INT 22
10108: PUSH
10109: LD_INT 3
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: LD_INT 21
10118: PUSH
10119: LD_INT 1
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PPUSH
10130: CALL_OW 69
10134: PUSH
10135: LD_INT 0
10137: EQUAL
10138: IFFALSE 10160
// begin AddMedal ( base , 1 ) ;
10140: LD_STRING base
10142: PPUSH
10143: LD_INT 1
10145: PPUSH
10146: CALL_OW 101
// m3 := true ;
10150: LD_ADDR_VAR 0 5
10154: PUSH
10155: LD_INT 1
10157: ST_TO_ADDR
// end else
10158: GO 10171
// AddMedal ( base , - 1 ) ;
10160: LD_STRING base
10162: PPUSH
10163: LD_INT 1
10165: NEG
10166: PPUSH
10167: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
10171: LD_VAR 0 3
10175: PUSH
10176: LD_VAR 0 4
10180: AND
10181: PUSH
10182: LD_VAR 0 5
10186: AND
10187: PUSH
10188: LD_OWVAR 67
10192: PUSH
10193: LD_INT 3
10195: EQUAL
10196: AND
10197: IFFALSE 10209
// SetAchievementEX ( ACH_AMER , 14 ) ;
10199: LD_STRING ACH_AMER
10201: PPUSH
10202: LD_INT 14
10204: PPUSH
10205: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10209: LD_STRING Eliminate
10211: PPUSH
10212: CALL_OW 102
// YouWin ;
10216: CALL_OW 103
// end ; end_of_file
10220: LD_VAR 0 1
10224: RET
// every 0 0$1 trigger IsDead ( JMM ) do
10225: LD_EXP 1
10229: PPUSH
10230: CALL_OW 301
10234: IFFALSE 10246
10236: GO 10238
10238: DISABLE
// YouLost ( JMM ) ; end_of_file
10239: LD_STRING JMM
10241: PPUSH
10242: CALL_OW 104
10246: END
// every 1 1$0 do
10247: GO 10249
10249: DISABLE
// begin enable ;
10250: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10251: LD_INT 3
10253: PPUSH
10254: LD_INT 5
10256: PPUSH
10257: CALL_OW 12
10261: PPUSH
10262: LD_INT 13
10264: PPUSH
10265: LD_INT 1
10267: PPUSH
10268: CALL_OW 55
// end ; end_of_file
10272: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
10273: GO 10275
10275: DISABLE
// begin ru_radar := 98 ;
10276: LD_ADDR_EXP 17
10280: PUSH
10281: LD_INT 98
10283: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
10284: LD_ADDR_EXP 18
10288: PUSH
10289: LD_INT 89
10291: ST_TO_ADDR
// us_hack := 99 ;
10292: LD_ADDR_EXP 19
10296: PUSH
10297: LD_INT 99
10299: ST_TO_ADDR
// us_artillery := 97 ;
10300: LD_ADDR_EXP 20
10304: PUSH
10305: LD_INT 97
10307: ST_TO_ADDR
// ar_bio_bomb := 91 ;
10308: LD_ADDR_EXP 21
10312: PUSH
10313: LD_INT 91
10315: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
10316: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
10317: LD_INT 0
10319: PPUSH
10320: PPUSH
10321: PPUSH
10322: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10323: LD_VAR 0 1
10327: PPUSH
10328: CALL_OW 264
10332: PUSH
10333: LD_EXP 21
10337: EQUAL
10338: IFFALSE 10410
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10340: LD_INT 68
10342: PPUSH
10343: LD_VAR 0 1
10347: PPUSH
10348: CALL_OW 255
10352: PPUSH
10353: CALL_OW 321
10357: PUSH
10358: LD_INT 2
10360: EQUAL
10361: IFFALSE 10373
// eff := 70 else
10363: LD_ADDR_VAR 0 6
10367: PUSH
10368: LD_INT 70
10370: ST_TO_ADDR
10371: GO 10381
// eff := 30 ;
10373: LD_ADDR_VAR 0 6
10377: PUSH
10378: LD_INT 30
10380: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10381: LD_VAR 0 1
10385: PPUSH
10386: CALL_OW 250
10390: PPUSH
10391: LD_VAR 0 1
10395: PPUSH
10396: CALL_OW 251
10400: PPUSH
10401: LD_VAR 0 6
10405: PPUSH
10406: CALL_OW 495
// end ; end ;
10410: LD_VAR 0 4
10414: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
10415: LD_INT 0
10417: PPUSH
10418: PPUSH
10419: PPUSH
10420: PPUSH
10421: PPUSH
10422: PPUSH
// if cmd = 124 then
10423: LD_VAR 0 1
10427: PUSH
10428: LD_INT 124
10430: EQUAL
10431: IFFALSE 10637
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
10433: LD_ADDR_VAR 0 5
10437: PUSH
10438: LD_INT 2
10440: PUSH
10441: LD_INT 34
10443: PUSH
10444: LD_INT 53
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 34
10453: PUSH
10454: LD_INT 14
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: PPUSH
10466: CALL_OW 69
10470: ST_TO_ADDR
// if not tmp then
10471: LD_VAR 0 5
10475: NOT
10476: IFFALSE 10480
// exit ;
10478: GO 10637
// for i in tmp do
10480: LD_ADDR_VAR 0 3
10484: PUSH
10485: LD_VAR 0 5
10489: PUSH
10490: FOR_IN
10491: IFFALSE 10635
// begin taskList := GetTaskList ( i ) ;
10493: LD_ADDR_VAR 0 6
10497: PUSH
10498: LD_VAR 0 3
10502: PPUSH
10503: CALL_OW 437
10507: ST_TO_ADDR
// if not taskList then
10508: LD_VAR 0 6
10512: NOT
10513: IFFALSE 10517
// continue ;
10515: GO 10490
// for j = 1 to taskList do
10517: LD_ADDR_VAR 0 4
10521: PUSH
10522: DOUBLE
10523: LD_INT 1
10525: DEC
10526: ST_TO_ADDR
10527: LD_VAR 0 6
10531: PUSH
10532: FOR_TO
10533: IFFALSE 10631
// if taskList [ j ] [ 1 ] = | then
10535: LD_VAR 0 6
10539: PUSH
10540: LD_VAR 0 4
10544: ARRAY
10545: PUSH
10546: LD_INT 1
10548: ARRAY
10549: PUSH
10550: LD_STRING |
10552: EQUAL
10553: IFFALSE 10629
// begin _taskList := Delete ( taskList , 1 ) ;
10555: LD_ADDR_VAR 0 7
10559: PUSH
10560: LD_VAR 0 6
10564: PPUSH
10565: LD_INT 1
10567: PPUSH
10568: CALL_OW 3
10572: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
10573: LD_VAR 0 3
10577: PPUSH
10578: LD_VAR 0 7
10582: PPUSH
10583: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
10587: LD_VAR 0 3
10591: PPUSH
10592: LD_VAR 0 6
10596: PUSH
10597: LD_VAR 0 4
10601: ARRAY
10602: PUSH
10603: LD_INT 2
10605: ARRAY
10606: PPUSH
10607: LD_VAR 0 6
10611: PUSH
10612: LD_VAR 0 4
10616: ARRAY
10617: PUSH
10618: LD_INT 3
10620: ARRAY
10621: PPUSH
10622: LD_INT 8
10624: PPUSH
10625: CALL 10642 0 4
// end ;
10629: GO 10532
10631: POP
10632: POP
// end ;
10633: GO 10490
10635: POP
10636: POP
// end ; end ;
10637: LD_VAR 0 2
10641: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10642: LD_INT 0
10644: PPUSH
10645: PPUSH
10646: PPUSH
10647: PPUSH
10648: PPUSH
10649: PPUSH
10650: PPUSH
10651: PPUSH
10652: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
10653: LD_VAR 0 1
10657: NOT
10658: PUSH
10659: LD_VAR 0 2
10663: PPUSH
10664: LD_VAR 0 3
10668: PPUSH
10669: CALL_OW 488
10673: NOT
10674: OR
10675: PUSH
10676: LD_VAR 0 4
10680: NOT
10681: OR
10682: IFFALSE 10686
// exit ;
10684: GO 11026
// list := [ ] ;
10686: LD_ADDR_VAR 0 13
10690: PUSH
10691: EMPTY
10692: ST_TO_ADDR
// if x - r < 0 then
10693: LD_VAR 0 2
10697: PUSH
10698: LD_VAR 0 4
10702: MINUS
10703: PUSH
10704: LD_INT 0
10706: LESS
10707: IFFALSE 10719
// min_x := 0 else
10709: LD_ADDR_VAR 0 7
10713: PUSH
10714: LD_INT 0
10716: ST_TO_ADDR
10717: GO 10735
// min_x := x - r ;
10719: LD_ADDR_VAR 0 7
10723: PUSH
10724: LD_VAR 0 2
10728: PUSH
10729: LD_VAR 0 4
10733: MINUS
10734: ST_TO_ADDR
// if y - r < 0 then
10735: LD_VAR 0 3
10739: PUSH
10740: LD_VAR 0 4
10744: MINUS
10745: PUSH
10746: LD_INT 0
10748: LESS
10749: IFFALSE 10761
// min_y := 0 else
10751: LD_ADDR_VAR 0 8
10755: PUSH
10756: LD_INT 0
10758: ST_TO_ADDR
10759: GO 10777
// min_y := y - r ;
10761: LD_ADDR_VAR 0 8
10765: PUSH
10766: LD_VAR 0 3
10770: PUSH
10771: LD_VAR 0 4
10775: MINUS
10776: ST_TO_ADDR
// max_x := x + r ;
10777: LD_ADDR_VAR 0 9
10781: PUSH
10782: LD_VAR 0 2
10786: PUSH
10787: LD_VAR 0 4
10791: PLUS
10792: ST_TO_ADDR
// max_y := y + r ;
10793: LD_ADDR_VAR 0 10
10797: PUSH
10798: LD_VAR 0 3
10802: PUSH
10803: LD_VAR 0 4
10807: PLUS
10808: ST_TO_ADDR
// for _x = min_x to max_x do
10809: LD_ADDR_VAR 0 11
10813: PUSH
10814: DOUBLE
10815: LD_VAR 0 7
10819: DEC
10820: ST_TO_ADDR
10821: LD_VAR 0 9
10825: PUSH
10826: FOR_TO
10827: IFFALSE 10944
// for _y = min_y to max_y do
10829: LD_ADDR_VAR 0 12
10833: PUSH
10834: DOUBLE
10835: LD_VAR 0 8
10839: DEC
10840: ST_TO_ADDR
10841: LD_VAR 0 10
10845: PUSH
10846: FOR_TO
10847: IFFALSE 10940
// begin if not ValidHex ( _x , _y ) then
10849: LD_VAR 0 11
10853: PPUSH
10854: LD_VAR 0 12
10858: PPUSH
10859: CALL_OW 488
10863: NOT
10864: IFFALSE 10868
// continue ;
10866: GO 10846
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
10868: LD_VAR 0 11
10872: PPUSH
10873: LD_VAR 0 12
10877: PPUSH
10878: CALL_OW 351
10882: PUSH
10883: LD_VAR 0 11
10887: PPUSH
10888: LD_VAR 0 12
10892: PPUSH
10893: CALL_OW 554
10897: AND
10898: IFFALSE 10938
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
10900: LD_ADDR_VAR 0 13
10904: PUSH
10905: LD_VAR 0 13
10909: PPUSH
10910: LD_VAR 0 13
10914: PUSH
10915: LD_INT 1
10917: PLUS
10918: PPUSH
10919: LD_VAR 0 11
10923: PUSH
10924: LD_VAR 0 12
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PPUSH
10933: CALL_OW 2
10937: ST_TO_ADDR
// end ;
10938: GO 10846
10940: POP
10941: POP
10942: GO 10826
10944: POP
10945: POP
// if not list then
10946: LD_VAR 0 13
10950: NOT
10951: IFFALSE 10955
// exit ;
10953: GO 11026
// for i in list do
10955: LD_ADDR_VAR 0 6
10959: PUSH
10960: LD_VAR 0 13
10964: PUSH
10965: FOR_IN
10966: IFFALSE 11024
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
10968: LD_VAR 0 1
10972: PPUSH
10973: LD_STRING M
10975: PUSH
10976: LD_VAR 0 6
10980: PUSH
10981: LD_INT 1
10983: ARRAY
10984: PUSH
10985: LD_VAR 0 6
10989: PUSH
10990: LD_INT 2
10992: ARRAY
10993: PUSH
10994: LD_INT 0
10996: PUSH
10997: LD_INT 0
10999: PUSH
11000: LD_INT 0
11002: PUSH
11003: LD_INT 0
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: PPUSH
11018: CALL_OW 447
11022: GO 10965
11024: POP
11025: POP
// end ;
11026: LD_VAR 0 5
11030: RET
