// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10620 0 0
// PrepareAmerican ;
  19: CALL 253 0 0
// PrepareRussian ;
  23: CALL 1537 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6273 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := LoadVariable ( 12_SciDed_1 , false ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 12_SciDed_1
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// end ;
 112: LD_VAR 0 1
 116: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 117: LD_INT 22
 119: PUSH
 120: LD_INT 1
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 30
 129: PUSH
 130: LD_INT 33
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PPUSH
 141: CALL_OW 69
 145: PUSH
 146: LD_INT 15
 148: GREATEREQUAL
 149: IFFALSE 161
 151: GO 153
 153: DISABLE
// SetAchievement ( ACH_FORT ) ;
 154: LD_STRING ACH_FORT
 156: PPUSH
 157: CALL_OW 543
 161: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 162: LD_INT 22
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 25
 174: PUSH
 175: LD_INT 12
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: PPUSH
 186: CALL_OW 69
 190: PUSH
 191: LD_INT 0
 193: EQUAL
 194: IFFALSE 206
 196: GO 198
 198: DISABLE
// SetAchievement ( ACH_APE ) ;
 199: LD_STRING ACH_APE
 201: PPUSH
 202: CALL_OW 543
 206: END
// every 0 0$1 trigger killCounter >= 20 do
 207: LD_EXP 5
 211: PUSH
 212: LD_INT 20
 214: GREATEREQUAL
 215: IFFALSE 227
 217: GO 219
 219: DISABLE
// SetAchievement ( ACH_DOUBLE ) ;
 220: LD_STRING ACH_DOUBLE
 222: PPUSH
 223: CALL_OW 543
 227: END
// every 0 0$1 trigger IsInArea ( JMMVeh , kappaBaseArea ) do
 228: LD_EXP 9
 232: PPUSH
 233: LD_INT 15
 235: PPUSH
 236: CALL_OW 308
 240: IFFALSE 252
 242: GO 244
 244: DISABLE
// SetAchievement ( ACH_AMASHA ) ; end_of_file
 245: LD_STRING ACH_AMASHA
 247: PPUSH
 248: CALL_OW 543
 252: END
// export JMM , JMMVeh , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
 257: PPUSH
 258: PPUSH
 259: PPUSH
// uc_side := 1 ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// uc_nation := 1 ;
 268: LD_ADDR_OWVAR 21
 272: PUSH
 273: LD_INT 1
 275: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 276: LD_INT 48
 278: PPUSH
 279: LD_STRING deltakappa
 281: PPUSH
 282: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 286: LD_INT 48
 288: PPUSH
 289: CALL_OW 274
 293: PPUSH
 294: LD_INT 1
 296: PPUSH
 297: LD_INT 2000
 299: PUSH
 300: LD_INT 1600
 302: PUSH
 303: LD_INT 1200
 305: PUSH
 306: LD_INT 900
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: LIST
 313: LIST
 314: PUSH
 315: LD_OWVAR 67
 319: ARRAY
 320: PPUSH
 321: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 325: LD_INT 48
 327: PPUSH
 328: CALL_OW 274
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 20
 338: PPUSH
 339: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 343: LD_INT 48
 345: PPUSH
 346: CALL_OW 274
 350: PPUSH
 351: LD_INT 3
 353: PPUSH
 354: LD_INT 100
 356: PPUSH
 357: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 361: LD_ADDR_EXP 8
 365: PUSH
 366: LD_STRING JMM
 368: PPUSH
 369: LD_EXP 1
 373: NOT
 374: PPUSH
 375: LD_STRING 13f_
 377: PPUSH
 378: CALL 31133 0 3
 382: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 383: LD_EXP 8
 387: PPUSH
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 395: LD_INT 5
 397: PUSH
 398: LD_INT 5
 400: PUSH
 401: LD_INT 3
 403: PUSH
 404: LD_INT 3
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: PUSH
 413: LD_OWVAR 67
 417: ARRAY
 418: PPUSH
 419: LD_INT 3
 421: PPUSH
 422: LD_INT 1
 424: PPUSH
 425: LD_INT 9
 427: PUSH
 428: LD_INT 9
 430: PUSH
 431: LD_INT 5
 433: PUSH
 434: LD_INT 5
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: PUSH
 443: LD_OWVAR 67
 447: ARRAY
 448: PPUSH
 449: LD_INT 100
 451: PPUSH
 452: CALL 36148 0 5
// JMMVeh := CreateVehicle ;
 456: LD_ADDR_EXP 9
 460: PUSH
 461: CALL_OW 45
 465: ST_TO_ADDR
// SetDir ( JMMVeh , 1 ) ;
 466: LD_EXP 9
 470: PPUSH
 471: LD_INT 1
 473: PPUSH
 474: CALL_OW 233
// PlaceUnitXY ( JMMVeh , 5 , 5 , false ) ;
 478: LD_EXP 9
 482: PPUSH
 483: LD_INT 5
 485: PPUSH
 486: LD_INT 5
 488: PPUSH
 489: LD_INT 0
 491: PPUSH
 492: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 496: LD_EXP 8
 500: PPUSH
 501: LD_EXP 9
 505: PPUSH
 506: CALL_OW 52
// SetMark ( JMMVeh , - 1 ) ;
 510: LD_EXP 9
 514: PPUSH
 515: LD_INT 1
 517: NEG
 518: PPUSH
 519: CALL_OW 242
// ComMoveXY ( JMMVeh , 21 , 8 ) ;
 523: LD_EXP 9
 527: PPUSH
 528: LD_INT 21
 530: PPUSH
 531: LD_INT 8
 533: PPUSH
 534: CALL_OW 111
// uc_side := 4 ;
 538: LD_ADDR_OWVAR 20
 542: PUSH
 543: LD_INT 4
 545: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 546: LD_ADDR_EXP 13
 550: PUSH
 551: LD_STRING Powell
 553: PPUSH
 554: LD_INT 0
 556: PPUSH
 557: LD_STRING 
 559: PPUSH
 560: CALL 31133 0 3
 564: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 565: LD_ADDR_EXP 10
 569: PUSH
 570: LD_STRING Joan
 572: PPUSH
 573: LD_EXP 1
 577: NOT
 578: PPUSH
 579: LD_STRING 10c_
 581: PPUSH
 582: CALL 31133 0 3
 586: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 587: LD_ADDR_EXP 11
 591: PUSH
 592: LD_STRING Lisa
 594: PPUSH
 595: LD_EXP 1
 599: NOT
 600: PPUSH
 601: LD_STRING 13s_
 603: PPUSH
 604: CALL 31133 0 3
 608: ST_TO_ADDR
// if Joan then
 609: LD_EXP 10
 613: IFFALSE 652
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 615: LD_EXP 10
 619: PPUSH
 620: LD_INT 4
 622: PPUSH
 623: LD_INT 0
 625: PPUSH
 626: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 630: LD_EXP 10
 634: PPUSH
 635: LD_INT 4
 637: PPUSH
 638: CALL_OW 336
// JMMGirl = 1 ;
 642: LD_ADDR_EXP 2
 646: PUSH
 647: LD_INT 1
 649: ST_TO_ADDR
// end else
 650: GO 743
// if Lisa then
 652: LD_EXP 11
 656: IFFALSE 695
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 658: LD_EXP 11
 662: PPUSH
 663: LD_INT 4
 665: PPUSH
 666: LD_INT 0
 668: PPUSH
 669: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 673: LD_EXP 11
 677: PPUSH
 678: LD_INT 1
 680: PPUSH
 681: CALL_OW 336
// JMMGirl := 2 ;
 685: LD_ADDR_EXP 2
 689: PUSH
 690: LD_INT 2
 692: ST_TO_ADDR
// end else
 693: GO 743
// begin Connie := NewCharacter ( Coonie ) ;
 695: LD_ADDR_EXP 12
 699: PUSH
 700: LD_STRING Coonie
 702: PPUSH
 703: CALL_OW 25
 707: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 708: LD_EXP 12
 712: PPUSH
 713: LD_INT 4
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 723: LD_EXP 12
 727: PPUSH
 728: LD_INT 3
 730: PPUSH
 731: CALL_OW 336
// JMMGirl := 3 ;
 735: LD_ADDR_EXP 2
 739: PUSH
 740: LD_INT 3
 742: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 743: LD_ADDR_VAR 0 2
 747: PUSH
 748: DOUBLE
 749: LD_INT 1
 751: DEC
 752: ST_TO_ADDR
 753: LD_INT 4
 755: PUSH
 756: LD_INT 3
 758: PUSH
 759: LD_INT 3
 761: PUSH
 762: LD_INT 2
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: LD_OWVAR 67
 775: ARRAY
 776: PUSH
 777: FOR_TO
 778: IFFALSE 932
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 780: LD_INT 4
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: LD_INT 2
 788: PUSH
 789: LD_INT 3
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: PUSH
 798: LD_VAR 0 2
 802: PUSH
 803: LD_INT 4
 805: MOD
 806: PUSH
 807: LD_INT 1
 809: PLUS
 810: ARRAY
 811: PPUSH
 812: LD_INT 1
 814: PPUSH
 815: LD_INT 2
 817: PPUSH
 818: LD_INT 9
 820: PUSH
 821: LD_INT 7
 823: PUSH
 824: LD_INT 4
 826: PUSH
 827: LD_INT 5
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: PUSH
 836: LD_VAR 0 2
 840: PUSH
 841: LD_INT 4
 843: MOD
 844: PUSH
 845: LD_INT 1
 847: PLUS
 848: ARRAY
 849: PPUSH
 850: LD_INT 33
 852: PPUSH
 853: LD_INT 55
 855: PPUSH
 856: CALL_OW 12
 860: PPUSH
 861: CALL 36148 0 5
// veh := CreateVehicle ;
 865: LD_ADDR_VAR 0 4
 869: PUSH
 870: CALL_OW 45
 874: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 875: LD_VAR 0 4
 879: PPUSH
 880: LD_INT 0
 882: PPUSH
 883: LD_INT 5
 885: PPUSH
 886: CALL_OW 12
 890: PPUSH
 891: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 895: LD_VAR 0 4
 899: PPUSH
 900: LD_INT 500
 902: PPUSH
 903: LD_INT 950
 905: PPUSH
 906: CALL_OW 12
 910: PPUSH
 911: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 915: LD_VAR 0 4
 919: PPUSH
 920: LD_INT 5
 922: PPUSH
 923: LD_INT 0
 925: PPUSH
 926: CALL_OW 49
// end ;
 930: GO 777
 932: POP
 933: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 934: LD_ADDR_VAR 0 2
 938: PUSH
 939: DOUBLE
 940: LD_INT 1
 942: DEC
 943: ST_TO_ADDR
 944: LD_INT 3
 946: PUSH
 947: LD_INT 3
 949: PUSH
 950: LD_INT 2
 952: PUSH
 953: LD_INT 2
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: PUSH
 962: LD_OWVAR 67
 966: ARRAY
 967: PUSH
 968: FOR_TO
 969: IFFALSE 1091
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 971: LD_INT 3
 973: PUSH
 974: LD_INT 2
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_VAR 0 2
 985: PUSH
 986: LD_INT 2
 988: MOD
 989: PUSH
 990: LD_INT 1
 992: PLUS
 993: ARRAY
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: LD_INT 3
1000: PPUSH
1001: LD_INT 9
1003: PUSH
1004: LD_INT 5
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: LD_VAR 0 2
1015: PUSH
1016: LD_INT 2
1018: MOD
1019: PUSH
1020: LD_INT 1
1022: PLUS
1023: ARRAY
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL 36148 0 5
// veh := CreateVehicle ;
1032: LD_ADDR_VAR 0 4
1036: PUSH
1037: CALL_OW 45
1041: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1042: LD_VAR 0 4
1046: PPUSH
1047: LD_INT 0
1049: PPUSH
1050: LD_INT 5
1052: PPUSH
1053: CALL_OW 12
1057: PPUSH
1058: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1062: LD_VAR 0 4
1066: PPUSH
1067: LD_INT 1000
1069: PPUSH
1070: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1074: LD_VAR 0 4
1078: PPUSH
1079: LD_INT 17
1081: PPUSH
1082: LD_INT 0
1084: PPUSH
1085: CALL_OW 49
// end ;
1089: GO 968
1091: POP
1092: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1093: LD_ADDR_VAR 0 2
1097: PUSH
1098: DOUBLE
1099: LD_INT 1
1101: DEC
1102: ST_TO_ADDR
1103: LD_INT 3
1105: PUSH
1106: LD_INT 2
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_OWVAR 67
1125: ARRAY
1126: PUSH
1127: FOR_TO
1128: IFFALSE 1176
// begin PrepareApeman ( 1 ) ;
1130: LD_INT 1
1132: PPUSH
1133: CALL 64782 0 1
// uc_side := 4 ;
1137: LD_ADDR_OWVAR 20
1141: PUSH
1142: LD_INT 4
1144: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1145: LD_ADDR_OWVAR 28
1149: PUSH
1150: LD_INT 16
1152: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1153: CALL_OW 44
1157: PPUSH
1158: LD_INT 84
1160: PPUSH
1161: LD_INT 127
1163: PPUSH
1164: LD_INT 5
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 50
// end ;
1174: GO 1127
1176: POP
1177: POP
// uc_side := 4 ;
1178: LD_ADDR_OWVAR 20
1182: PUSH
1183: LD_INT 4
1185: ST_TO_ADDR
// uc_nation := 1 ;
1186: LD_ADDR_OWVAR 21
1190: PUSH
1191: LD_INT 1
1193: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1194: LD_INT 2
1196: PPUSH
1197: LD_INT 3
1199: PPUSH
1200: LD_INT 1
1202: PPUSH
1203: LD_INT 12
1205: PPUSH
1206: LD_INT 100
1208: PPUSH
1209: CALL 36148 0 5
// veh := CreateVehicle ;
1213: LD_ADDR_VAR 0 4
1217: PUSH
1218: CALL_OW 45
1222: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1223: LD_VAR 0 4
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: LD_INT 100
1233: PPUSH
1234: CALL_OW 290
// SetLives ( veh , 450 ) ;
1238: LD_VAR 0 4
1242: PPUSH
1243: LD_INT 450
1245: PPUSH
1246: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1250: LD_VAR 0 4
1254: PPUSH
1255: LD_INT 122
1257: PPUSH
1258: LD_INT 118
1260: PPUSH
1261: LD_INT 4
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: CALL 70649 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1271: LD_INT 1
1273: PPUSH
1274: LD_INT 2
1276: PPUSH
1277: LD_INT 0
1279: PPUSH
1280: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1284: CALL_OW 44
1288: PPUSH
1289: LD_INT 124
1291: PPUSH
1292: LD_INT 120
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1302: LD_ADDR_VAR 0 5
1306: PUSH
1307: LD_INT 18
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 517
1317: ST_TO_ADDR
// for i := 1 to 4 do
1318: LD_ADDR_VAR 0 2
1322: PUSH
1323: DOUBLE
1324: LD_INT 1
1326: DEC
1327: ST_TO_ADDR
1328: LD_INT 4
1330: PUSH
1331: FOR_TO
1332: IFFALSE 1440
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1334: LD_INT 1
1336: PPUSH
1337: LD_INT 1
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 1
1349: PPUSH
1350: LD_INT 2
1352: PPUSH
1353: CALL_OW 12
1357: ARRAY
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 380
// un := CreateHuman ;
1366: LD_ADDR_VAR 0 3
1370: PUSH
1371: CALL_OW 44
1375: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1376: LD_VAR 0 3
1380: PPUSH
1381: LD_INT 0
1383: PPUSH
1384: LD_INT 5
1386: PPUSH
1387: CALL_OW 12
1391: PPUSH
1392: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1396: LD_VAR 0 3
1400: PPUSH
1401: LD_VAR 0 5
1405: PUSH
1406: LD_INT 1
1408: ARRAY
1409: PUSH
1410: LD_VAR 0 2
1414: ARRAY
1415: PPUSH
1416: LD_VAR 0 5
1420: PUSH
1421: LD_INT 2
1423: ARRAY
1424: PUSH
1425: LD_VAR 0 2
1429: ARRAY
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: CALL_OW 601
// end ;
1438: GO 1331
1440: POP
1441: POP
// end ;
1442: LD_VAR 0 1
1446: RET
// export function ChangeSideKappaBase ; begin
1447: LD_INT 0
1449: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1450: LD_INT 70
1452: PPUSH
1453: LD_INT 138
1455: PPUSH
1456: LD_INT 1
1458: PPUSH
1459: LD_INT 80
1461: NEG
1462: PPUSH
1463: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1467: LD_INT 70
1469: PPUSH
1470: LD_INT 138
1472: PPUSH
1473: LD_INT 1
1475: PPUSH
1476: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1480: LD_INT 147
1482: PPUSH
1483: LD_INT 122
1485: PPUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_INT 40
1491: NEG
1492: PPUSH
1493: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1497: LD_INT 147
1499: PPUSH
1500: LD_INT 122
1502: PPUSH
1503: LD_INT 1
1505: PPUSH
1506: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1510: LD_INT 22
1512: PUSH
1513: LD_INT 4
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 235
// end ; end_of_file
1532: LD_VAR 0 1
1536: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
1544: PPUSH
// uc_side := 3 ;
1545: LD_ADDR_OWVAR 20
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// uc_nation := 3 ;
1553: LD_ADDR_OWVAR 21
1557: PUSH
1558: LD_INT 3
1560: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1561: LD_ADDR_EXP 15
1565: PUSH
1566: LD_INT 8
1568: PUSH
1569: LD_INT 11
1571: PUSH
1572: LD_INT 14
1574: PUSH
1575: LD_INT 17
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: PUSH
1584: LD_OWVAR 67
1588: ARRAY
1589: ST_TO_ADDR
// ruMobile := [ ] ;
1590: LD_ADDR_EXP 16
1594: PUSH
1595: EMPTY
1596: ST_TO_ADDR
// ruBuildList := [ ] ;
1597: LD_ADDR_EXP 17
1601: PUSH
1602: EMPTY
1603: ST_TO_ADDR
// ruAttackers := [ ] ;
1604: LD_ADDR_EXP 18
1608: PUSH
1609: EMPTY
1610: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1611: LD_ADDR_EXP 19
1615: PUSH
1616: LD_INT 3
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: LD_INT 1
1624: PPUSH
1625: CALL 31196 0 3
1629: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1630: LD_ADDR_VAR 0 6
1634: PUSH
1635: LD_INT 43
1637: PUSH
1638: LD_INT 46
1640: PUSH
1641: LD_INT 45
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: LIST
1648: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1649: LD_ADDR_EXP 20
1653: PUSH
1654: LD_INT 46
1656: PUSH
1657: LD_INT 70
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 121
1666: PUSH
1667: LD_INT 95
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 68
1676: PUSH
1677: LD_INT 65
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: ST_TO_ADDR
// if not russianRocketsDisabled then
1689: LD_EXP 6
1693: NOT
1694: IFFALSE 1710
// weapons := weapons ^ ru_rocket ;
1696: LD_ADDR_VAR 0 6
1700: PUSH
1701: LD_VAR 0 6
1705: PUSH
1706: LD_INT 47
1708: ADD
1709: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1710: LD_ADDR_EXP 14
1714: PUSH
1715: LD_STRING Eisenstein
1717: PPUSH
1718: CALL_OW 25
1722: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1723: LD_EXP 14
1727: PPUSH
1728: LD_INT 22
1730: PPUSH
1731: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 1250 , 2500 , 3500 , 5000 ] [ Difficulty ] ) ;
1735: LD_INT 22
1737: PPUSH
1738: CALL_OW 274
1742: PPUSH
1743: LD_INT 1
1745: PPUSH
1746: LD_INT 1250
1748: PUSH
1749: LD_INT 2500
1751: PUSH
1752: LD_INT 3500
1754: PUSH
1755: LD_INT 5000
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_OWVAR 67
1768: ARRAY
1769: PPUSH
1770: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1774: LD_INT 22
1776: PPUSH
1777: CALL_OW 274
1781: PPUSH
1782: LD_INT 2
1784: PPUSH
1785: LD_INT 600
1787: PPUSH
1788: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1792: LD_INT 22
1794: PPUSH
1795: CALL_OW 274
1799: PPUSH
1800: LD_INT 3
1802: PPUSH
1803: LD_INT 100
1805: PPUSH
1806: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1810: LD_INT 116
1812: PPUSH
1813: LD_INT 46
1815: PPUSH
1816: LD_INT 70
1818: PPUSH
1819: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1823: LD_ADDR_VAR 0 2
1827: PUSH
1828: LD_INT 22
1830: PUSH
1831: LD_INT 3
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 21
1840: PUSH
1841: LD_INT 3
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PPUSH
1852: CALL_OW 69
1856: PUSH
1857: FOR_IN
1858: IFFALSE 1880
// SetBLevel ( i , 6 + Difficulty ) ;
1860: LD_VAR 0 2
1864: PPUSH
1865: LD_INT 6
1867: PUSH
1868: LD_OWVAR 67
1872: PLUS
1873: PPUSH
1874: CALL_OW 241
1878: GO 1857
1880: POP
1881: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1882: LD_ADDR_VAR 0 4
1886: PUSH
1887: LD_INT 22
1889: PUSH
1890: LD_INT 3
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 2
1899: PUSH
1900: LD_INT 30
1902: PUSH
1903: LD_INT 32
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 30
1912: PUSH
1913: LD_INT 33
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: LIST
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PPUSH
1929: CALL_OW 69
1933: ST_TO_ADDR
// if russianRocketsDisabled then
1934: LD_EXP 6
1938: IFFALSE 2014
// begin ruTechList := ruTechList diff tech_advrocket ;
1940: LD_ADDR_EXP 19
1944: PUSH
1945: LD_EXP 19
1949: PUSH
1950: LD_INT 71
1952: DIFF
1953: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1954: LD_ADDR_VAR 0 2
1958: PUSH
1959: LD_VAR 0 4
1963: PPUSH
1964: LD_INT 35
1966: PUSH
1967: LD_INT 47
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PPUSH
1974: CALL_OW 72
1978: PUSH
1979: FOR_IN
1980: IFFALSE 2012
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1982: LD_VAR 0 2
1986: PPUSH
1987: LD_VAR 0 6
1991: PUSH
1992: LD_INT 1
1994: PPUSH
1995: LD_VAR 0 6
1999: PPUSH
2000: CALL_OW 12
2004: ARRAY
2005: PPUSH
2006: CALL_OW 431
2010: GO 1979
2012: POP
2013: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: LD_INT 22
2021: PUSH
2022: LD_INT 3
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 30
2031: PUSH
2032: LD_INT 32
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PPUSH
2043: CALL_OW 69
2047: PUSH
2048: FOR_IN
2049: IFFALSE 2098
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2051: LD_INT 0
2053: PPUSH
2054: LD_INT 5
2056: PUSH
2057: LD_INT 6
2059: PUSH
2060: LD_INT 7
2062: PUSH
2063: LD_INT 8
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: LD_OWVAR 67
2076: ARRAY
2077: PPUSH
2078: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2082: CALL_OW 44
2086: PPUSH
2087: LD_VAR 0 2
2091: PPUSH
2092: CALL_OW 52
// end ;
2096: GO 2048
2098: POP
2099: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2100: LD_ADDR_VAR 0 2
2104: PUSH
2105: LD_INT 22
2107: PUSH
2108: LD_INT 3
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 30
2117: PUSH
2118: LD_INT 5
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PPUSH
2129: CALL_OW 69
2133: PUSH
2134: FOR_IN
2135: IFFALSE 2269
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2137: LD_ADDR_VAR 0 3
2141: PUSH
2142: DOUBLE
2143: LD_INT 1
2145: DEC
2146: ST_TO_ADDR
2147: LD_INT 2
2149: PUSH
2150: LD_INT 2
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: LD_INT 3
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: PUSH
2165: LD_OWVAR 67
2169: ARRAY
2170: PUSH
2171: FOR_TO
2172: IFFALSE 2265
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2174: LD_INT 0
2176: PPUSH
2177: LD_INT 5
2179: PUSH
2180: LD_INT 6
2182: PUSH
2183: LD_INT 7
2185: PUSH
2186: LD_INT 8
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: LD_OWVAR 67
2199: ARRAY
2200: PPUSH
2201: CALL_OW 381
// un := CreateHuman ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: CALL_OW 44
2214: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2215: LD_VAR 0 5
2219: PPUSH
2220: LD_VAR 0 2
2224: PPUSH
2225: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
2229: LD_VAR 0 5
2233: PPUSH
2234: LD_INT 9
2236: PPUSH
2237: CALL_OW 336
// if j = 2 then
2241: LD_VAR 0 3
2245: PUSH
2246: LD_INT 2
2248: EQUAL
2249: IFFALSE 2263
// SetUnitAttackType ( un , 3 ) ;
2251: LD_VAR 0 5
2255: PPUSH
2256: LD_INT 3
2258: PPUSH
2259: CALL_OW 603
// end ;
2263: GO 2171
2265: POP
2266: POP
// end ;
2267: GO 2134
2269: POP
2270: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2271: LD_ADDR_VAR 0 2
2275: PUSH
2276: DOUBLE
2277: LD_INT 1
2279: DEC
2280: ST_TO_ADDR
2281: LD_INT 5
2283: PUSH
2284: LD_INT 6
2286: PUSH
2287: LD_INT 6
2289: PUSH
2290: LD_INT 6
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: PUSH
2299: LD_OWVAR 67
2303: ARRAY
2304: PUSH
2305: FOR_TO
2306: IFFALSE 2353
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 6
2313: PUSH
2314: LD_INT 7
2316: PUSH
2317: LD_INT 9
2319: PUSH
2320: LD_INT 10
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: PUSH
2329: LD_OWVAR 67
2333: ARRAY
2334: PPUSH
2335: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2339: CALL_OW 44
2343: PPUSH
2344: LD_INT 22
2346: PPUSH
2347: CALL_OW 52
// end ;
2351: GO 2305
2353: POP
2354: POP
// for i := 1 to 2 do
2355: LD_ADDR_VAR 0 2
2359: PUSH
2360: DOUBLE
2361: LD_INT 1
2363: DEC
2364: ST_TO_ADDR
2365: LD_INT 2
2367: PUSH
2368: FOR_TO
2369: IFFALSE 2449
// for j := 1 to 6 do
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: DOUBLE
2377: LD_INT 1
2379: DEC
2380: ST_TO_ADDR
2381: LD_INT 6
2383: PUSH
2384: FOR_TO
2385: IFFALSE 2445
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2387: LD_INT 0
2389: PPUSH
2390: LD_INT 6
2392: PUSH
2393: LD_INT 7
2395: PUSH
2396: LD_INT 9
2398: PUSH
2399: LD_INT 10
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: PUSH
2408: LD_OWVAR 67
2412: ARRAY
2413: PPUSH
2414: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2418: CALL_OW 44
2422: PPUSH
2423: LD_INT 1
2425: PUSH
2426: LD_INT 40
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: LD_VAR 0 2
2437: ARRAY
2438: PPUSH
2439: CALL_OW 52
// end ;
2443: GO 2384
2445: POP
2446: POP
2447: GO 2368
2449: POP
2450: POP
// for i := 1 to 6 do
2451: LD_ADDR_VAR 0 2
2455: PUSH
2456: DOUBLE
2457: LD_INT 1
2459: DEC
2460: ST_TO_ADDR
2461: LD_INT 6
2463: PUSH
2464: FOR_TO
2465: IFFALSE 2512
// begin PrepareScientist ( false , 6 ) ;
2467: LD_INT 0
2469: PPUSH
2470: LD_INT 6
2472: PPUSH
2473: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2477: CALL_OW 44
2481: PPUSH
2482: LD_INT 14
2484: PUSH
2485: LD_INT 15
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PUSH
2492: LD_VAR 0 2
2496: PUSH
2497: LD_INT 2
2499: MOD
2500: PUSH
2501: LD_INT 1
2503: PLUS
2504: ARRAY
2505: PPUSH
2506: CALL_OW 52
// end ;
2510: GO 2464
2512: POP
2513: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2514: LD_INT 22
2516: PPUSH
2517: LD_INT 3
2519: PPUSH
2520: LD_INT 3
2522: PPUSH
2523: LD_INT 51
2525: PPUSH
2526: LD_INT 100
2528: PPUSH
2529: CALL 36148 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2533: CALL_OW 45
2537: PPUSH
2538: LD_INT 116
2540: PPUSH
2541: LD_INT 58
2543: PPUSH
2544: LD_INT 2
2546: PPUSH
2547: LD_INT 0
2549: PPUSH
2550: CALL_OW 50
// for i := 1 to 2 do
2554: LD_ADDR_VAR 0 2
2558: PUSH
2559: DOUBLE
2560: LD_INT 1
2562: DEC
2563: ST_TO_ADDR
2564: LD_INT 2
2566: PUSH
2567: FOR_TO
2568: IFFALSE 2612
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2570: LD_INT 22
2572: PPUSH
2573: LD_INT 3
2575: PPUSH
2576: LD_INT 3
2578: PPUSH
2579: LD_INT 52
2581: PPUSH
2582: LD_INT 100
2584: PPUSH
2585: CALL 36148 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2589: CALL_OW 45
2593: PPUSH
2594: LD_INT 111
2596: PPUSH
2597: LD_INT 58
2599: PPUSH
2600: LD_INT 4
2602: PPUSH
2603: LD_INT 0
2605: PPUSH
2606: CALL_OW 50
// end ;
2610: GO 2567
2612: POP
2613: POP
// for i := 1 to 4 do
2614: LD_ADDR_VAR 0 2
2618: PUSH
2619: DOUBLE
2620: LD_INT 1
2622: DEC
2623: ST_TO_ADDR
2624: LD_INT 4
2626: PUSH
2627: FOR_TO
2628: IFFALSE 2657
// begin PrepareApemanEngineer ( ) ;
2630: CALL 64703 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2634: CALL_OW 44
2638: PPUSH
2639: LD_INT 118
2641: PPUSH
2642: LD_INT 50
2644: PPUSH
2645: LD_INT 3
2647: PPUSH
2648: LD_INT 0
2650: PPUSH
2651: CALL_OW 50
// end ;
2655: GO 2627
2657: POP
2658: POP
// end ;
2659: LD_VAR 0 1
2663: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2664: LD_EXP 19
2668: IFFALSE 2796
2670: GO 2672
2672: DISABLE
2673: LD_INT 0
2675: PPUSH
2676: PPUSH
2677: PPUSH
// begin enable ;
2678: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2679: LD_ADDR_VAR 0 3
2683: PUSH
2684: LD_INT 14
2686: PUSH
2687: LD_INT 15
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PPUSH
2694: LD_INT 50
2696: PUSH
2697: EMPTY
2698: LIST
2699: PPUSH
2700: CALL_OW 72
2704: ST_TO_ADDR
// if not labs then
2705: LD_VAR 0 3
2709: NOT
2710: IFFALSE 2715
// begin disable ;
2712: DISABLE
// exit ;
2713: GO 2796
// end ; for i in labs do
2715: LD_ADDR_VAR 0 1
2719: PUSH
2720: LD_VAR 0 3
2724: PUSH
2725: FOR_IN
2726: IFFALSE 2794
// if BuildingStatus ( i ) = bs_idle then
2728: LD_VAR 0 1
2732: PPUSH
2733: CALL_OW 461
2737: PUSH
2738: LD_INT 2
2740: EQUAL
2741: IFFALSE 2792
// for t in ruTechList do
2743: LD_ADDR_VAR 0 2
2747: PUSH
2748: LD_EXP 19
2752: PUSH
2753: FOR_IN
2754: IFFALSE 2790
// if CanBeResearched ( i , t ) then
2756: LD_VAR 0 1
2760: PPUSH
2761: LD_VAR 0 2
2765: PPUSH
2766: CALL_OW 430
2770: IFFALSE 2788
// begin ComResearch ( i , t ) ;
2772: LD_VAR 0 1
2776: PPUSH
2777: LD_VAR 0 2
2781: PPUSH
2782: CALL_OW 124
// break ;
2786: GO 2790
// end ;
2788: GO 2753
2790: POP
2791: POP
2792: GO 2725
2794: POP
2795: POP
// end ;
2796: PPOPN 3
2798: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2799: LD_INT 3
2801: PUSH
2802: LD_INT 22
2804: PUSH
2805: LD_INT 1
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 32
2818: PUSH
2819: LD_INT 1
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PPUSH
2830: CALL_OW 69
2834: IFFALSE 2918
2836: GO 2838
2838: DISABLE
2839: LD_INT 0
2841: PPUSH
// begin enable ;
2842: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2843: LD_ADDR_VAR 0 1
2847: PUSH
2848: LD_INT 3
2850: PUSH
2851: LD_INT 22
2853: PUSH
2854: LD_INT 1
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PUSH
2865: LD_INT 32
2867: PUSH
2868: LD_INT 1
2870: PUSH
2871: EMPTY
2872: LIST
2873: LIST
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PPUSH
2879: CALL_OW 69
2883: PUSH
2884: FOR_IN
2885: IFFALSE 2916
// if GetFuel ( i ) < 3 then
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL_OW 261
2896: PUSH
2897: LD_INT 3
2899: LESS
2900: IFFALSE 2914
// SetFuel ( i , 3 ) ;
2902: LD_VAR 0 1
2906: PPUSH
2907: LD_INT 3
2909: PPUSH
2910: CALL_OW 240
2914: GO 2884
2916: POP
2917: POP
// end ;
2918: PPOPN 1
2920: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) and ruAttackers < [ 5 , 6 , 7 , 8 ] [ Difficulty ] do var i , chassis , weapon ;
2921: LD_INT 1
2923: PUSH
2924: LD_INT 40
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PPUSH
2931: LD_INT 50
2933: PUSH
2934: EMPTY
2935: LIST
2936: PPUSH
2937: CALL_OW 72
2941: PUSH
2942: LD_EXP 18
2946: PUSH
2947: LD_INT 5
2949: PUSH
2950: LD_INT 6
2952: PUSH
2953: LD_INT 7
2955: PUSH
2956: LD_INT 8
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: PUSH
2965: LD_OWVAR 67
2969: ARRAY
2970: LESS
2971: AND
2972: IFFALSE 3308
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
2981: PPUSH
// begin enable ;
2982: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
2983: LD_ADDR_VAR 0 1
2987: PUSH
2988: LD_INT 1
2990: PUSH
2991: LD_INT 40
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: PPUSH
2998: LD_INT 50
3000: PUSH
3001: EMPTY
3002: LIST
3003: PPUSH
3004: CALL_OW 72
3008: PUSH
3009: FOR_IN
3010: IFFALSE 3306
// begin if BuildingStatus ( i ) <> bs_idle then
3012: LD_VAR 0 1
3016: PPUSH
3017: CALL_OW 461
3021: PUSH
3022: LD_INT 2
3024: NONEQUAL
3025: IFFALSE 3029
// continue ;
3027: GO 3009
// if i = ruFac1 then
3029: LD_VAR 0 1
3033: PUSH
3034: LD_INT 1
3036: EQUAL
3037: IFFALSE 3080
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3039: LD_ADDR_VAR 0 2
3043: PUSH
3044: LD_INT 21
3046: PUSH
3047: LD_INT 22
3049: PUSH
3050: LD_INT 23
3052: PUSH
3053: LD_INT 23
3055: PUSH
3056: LD_INT 24
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: PUSH
3066: LD_INT 1
3068: PPUSH
3069: LD_INT 5
3071: PPUSH
3072: CALL_OW 12
3076: ARRAY
3077: ST_TO_ADDR
3078: GO 3107
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3080: LD_ADDR_VAR 0 2
3084: PUSH
3085: LD_INT 21
3087: PUSH
3088: LD_INT 23
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: PUSH
3095: LD_INT 1
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: CALL_OW 12
3105: ARRAY
3106: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3107: LD_ADDR_VAR 0 3
3111: PUSH
3112: LD_INT 49
3114: PUSH
3115: LD_INT 44
3117: PUSH
3118: LD_INT 43
3120: PUSH
3121: LD_INT 46
3123: PUSH
3124: LD_INT 45
3126: PUSH
3127: LD_INT 46
3129: PUSH
3130: LD_INT 45
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: ST_TO_ADDR
// if not russianRocketsDisabled then
3142: LD_EXP 6
3146: NOT
3147: IFFALSE 3167
// weapon := Join ( weapon , ru_rocket ) ;
3149: LD_ADDR_VAR 0 3
3153: PUSH
3154: LD_VAR 0 3
3158: PPUSH
3159: LD_INT 47
3161: PPUSH
3162: CALL 68509 0 2
3166: ST_TO_ADDR
// weapon := weapon [ Difficulty + rand ( 0 , 3 ) ] ;
3167: LD_ADDR_VAR 0 3
3171: PUSH
3172: LD_VAR 0 3
3176: PUSH
3177: LD_OWVAR 67
3181: PUSH
3182: LD_INT 0
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: CALL_OW 12
3192: PLUS
3193: ARRAY
3194: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3195: LD_VAR 0 2
3199: PUSH
3200: LD_INT 21
3202: PUSH
3203: LD_INT 22
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: IN
3210: PUSH
3211: LD_VAR 0 3
3215: PUSH
3216: LD_INT 46
3218: PUSH
3219: LD_INT 47
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: IN
3226: AND
3227: IFFALSE 3260
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3229: LD_ADDR_VAR 0 3
3233: PUSH
3234: LD_INT 44
3236: PUSH
3237: LD_INT 45
3239: PUSH
3240: LD_INT 49
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: LIST
3247: PUSH
3248: LD_INT 1
3250: PPUSH
3251: LD_INT 3
3253: PPUSH
3254: CALL_OW 12
3258: ARRAY
3259: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3260: LD_VAR 0 1
3264: PPUSH
3265: LD_VAR 0 2
3269: PPUSH
3270: LD_INT 1
3272: PUSH
3273: LD_INT 3
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 2
3285: PPUSH
3286: CALL_OW 12
3290: ARRAY
3291: PPUSH
3292: LD_INT 3
3294: PPUSH
3295: LD_VAR 0 3
3299: PPUSH
3300: CALL_OW 185
// end ;
3304: GO 3009
3306: POP
3307: POP
// end ;
3308: PPOPN 3
3310: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3311: LD_INT 22
3313: PPUSH
3314: CALL_OW 302
3318: IFFALSE 4175
3320: GO 3322
3322: DISABLE
3323: LD_INT 0
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
3329: PPUSH
3330: PPUSH
3331: PPUSH
3332: PPUSH
// begin enable ;
3333: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: LD_INT 12
3341: PPUSH
3342: LD_INT 3
3344: PUSH
3345: LD_INT 24
3347: PUSH
3348: LD_INT 1000
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 21
3361: PUSH
3362: LD_INT 3
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PPUSH
3373: CALL_OW 70
3377: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 3
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 25
3395: PUSH
3396: LD_INT 2
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: PPUSH
3407: CALL_OW 69
3411: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_INT 22
3419: PUSH
3420: LD_INT 3
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PUSH
3427: LD_INT 34
3429: PUSH
3430: LD_INT 52
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PPUSH
3441: CALL_OW 69
3445: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3446: LD_ADDR_VAR 0 7
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 3
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 25
3463: PUSH
3464: LD_INT 4
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 69
3479: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3480: LD_ADDR_VAR 0 8
3484: PUSH
3485: LD_INT 14
3487: PUSH
3488: LD_INT 15
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3495: LD_VAR 0 7
3499: PUSH
3500: LD_VAR 0 4
3504: PPUSH
3505: LD_INT 120
3507: PUSH
3508: LD_INT 2
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PPUSH
3515: CALL_OW 72
3519: AND
3520: IFFALSE 3533
// ComExitAll ( sci ) else
3522: LD_VAR 0 7
3526: PPUSH
3527: CALL 68990 0 1
3531: GO 3615
// if sci then
3533: LD_VAR 0 7
3537: IFFALSE 3615
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3539: LD_VAR 0 7
3543: PPUSH
3544: LD_INT 3
3546: PUSH
3547: LD_INT 54
3549: PUSH
3550: EMPTY
3551: LIST
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PPUSH
3557: CALL_OW 72
3561: PUSH
3562: LD_VAR 0 8
3566: AND
3567: IFFALSE 3615
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3569: LD_VAR 0 7
3573: PPUSH
3574: LD_INT 3
3576: PUSH
3577: LD_INT 54
3579: PUSH
3580: EMPTY
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PPUSH
3587: CALL_OW 72
3591: PPUSH
3592: LD_VAR 0 8
3596: PUSH
3597: LD_INT 1
3599: PPUSH
3600: LD_VAR 0 8
3604: PPUSH
3605: CALL_OW 12
3609: ARRAY
3610: PPUSH
3611: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3615: LD_VAR 0 5
3619: PPUSH
3620: LD_INT 50
3622: PUSH
3623: EMPTY
3624: LIST
3625: PPUSH
3626: CALL_OW 72
3630: PUSH
3631: LD_VAR 0 3
3635: AND
3636: IFFALSE 3677
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3638: LD_VAR 0 5
3642: PPUSH
3643: LD_INT 50
3645: PUSH
3646: EMPTY
3647: LIST
3648: PPUSH
3649: CALL_OW 72
3653: PPUSH
3654: LD_VAR 0 3
3658: PPUSH
3659: LD_VAR 0 5
3663: PUSH
3664: LD_INT 1
3666: ARRAY
3667: PPUSH
3668: CALL_OW 74
3672: PPUSH
3673: CALL_OW 130
// if eng then
3677: LD_VAR 0 4
3681: IFFALSE 4175
// begin for i in eng do
3683: LD_ADDR_VAR 0 1
3687: PUSH
3688: LD_VAR 0 4
3692: PUSH
3693: FOR_IN
3694: IFFALSE 4173
// begin tag := GetTag ( i ) ;
3696: LD_ADDR_VAR 0 6
3700: PUSH
3701: LD_VAR 0 1
3705: PPUSH
3706: CALL_OW 110
3710: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3711: LD_VAR 0 3
3715: NOT
3716: PUSH
3717: LD_EXP 17
3721: NOT
3722: AND
3723: PUSH
3724: LD_VAR 0 6
3728: PUSH
3729: LD_INT 1
3731: EQUAL
3732: AND
3733: IFFALSE 3759
// begin SetTag ( i , 0 ) ;
3735: LD_VAR 0 1
3739: PPUSH
3740: LD_INT 0
3742: PPUSH
3743: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3747: LD_VAR 0 1
3751: PPUSH
3752: LD_INT 22
3754: PPUSH
3755: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3759: LD_VAR 0 3
3763: PUSH
3764: LD_EXP 17
3768: OR
3769: PUSH
3770: LD_VAR 0 6
3774: PUSH
3775: LD_INT 0
3777: EQUAL
3778: AND
3779: IFFALSE 3793
// SetTag ( i , 1 ) ;
3781: LD_VAR 0 1
3785: PPUSH
3786: LD_INT 1
3788: PPUSH
3789: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3793: LD_VAR 0 1
3797: PPUSH
3798: CALL_OW 310
3802: PUSH
3803: LD_VAR 0 6
3807: PUSH
3808: LD_INT 1
3810: EQUAL
3811: AND
3812: IFFALSE 3823
// ComExit ( i ) ;
3814: LD_VAR 0 1
3818: PPUSH
3819: CALL 68907 0 1
// if GetLives ( i ) < 500 and tag = 1 then
3823: LD_VAR 0 1
3827: PPUSH
3828: CALL_OW 256
3832: PUSH
3833: LD_INT 500
3835: LESS
3836: PUSH
3837: LD_VAR 0 6
3841: PUSH
3842: LD_INT 1
3844: EQUAL
3845: AND
3846: IFFALSE 3860
// SetTag ( i , 2 ) ;
3848: LD_VAR 0 1
3852: PPUSH
3853: LD_INT 2
3855: PPUSH
3856: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3860: LD_VAR 0 1
3864: PPUSH
3865: CALL_OW 256
3869: PUSH
3870: LD_INT 1000
3872: EQUAL
3873: PUSH
3874: LD_VAR 0 6
3878: PUSH
3879: LD_INT 2
3881: EQUAL
3882: AND
3883: IFFALSE 3897
// SetTag ( i , 1 ) ;
3885: LD_VAR 0 1
3889: PPUSH
3890: LD_INT 1
3892: PPUSH
3893: CALL_OW 109
// if tag = 2 then
3897: LD_VAR 0 6
3901: PUSH
3902: LD_INT 2
3904: EQUAL
3905: IFFALSE 3952
// begin if GetDistUnitXY ( i , 110 , 41 ) > 6 then
3907: LD_VAR 0 1
3911: PPUSH
3912: LD_INT 110
3914: PPUSH
3915: LD_INT 41
3917: PPUSH
3918: CALL_OW 297
3922: PUSH
3923: LD_INT 6
3925: GREATER
3926: IFFALSE 3952
// begin ComMoveXY ( i , 110 , 41 ) ;
3928: LD_VAR 0 1
3932: PPUSH
3933: LD_INT 110
3935: PPUSH
3936: LD_INT 41
3938: PPUSH
3939: CALL_OW 111
// AddComHold ( i ) ;
3943: LD_VAR 0 1
3947: PPUSH
3948: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
3952: LD_VAR 0 1
3956: PPUSH
3957: LD_INT 11
3959: PPUSH
3960: CALL_OW 308
3964: IFFALSE 3978
// ComMoveToArea ( i , ruBaseArea ) ;
3966: LD_VAR 0 1
3970: PPUSH
3971: LD_INT 12
3973: PPUSH
3974: CALL_OW 113
// if tag = 1 then
3978: LD_VAR 0 6
3982: PUSH
3983: LD_INT 1
3985: EQUAL
3986: IFFALSE 4171
// begin if b then
3988: LD_VAR 0 3
3992: IFFALSE 4020
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
3994: LD_VAR 0 1
3998: PPUSH
3999: LD_VAR 0 3
4003: PPUSH
4004: LD_VAR 0 1
4008: PPUSH
4009: CALL_OW 74
4013: PPUSH
4014: CALL_OW 130
4018: GO 4171
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
4020: LD_EXP 17
4024: PUSH
4025: LD_INT 11
4027: PPUSH
4028: LD_INT 81
4030: PUSH
4031: LD_INT 3
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 70
4042: PUSH
4043: LD_INT 0
4045: EQUAL
4046: AND
4047: PUSH
4048: LD_INT 22
4050: PPUSH
4051: LD_EXP 17
4055: PUSH
4056: LD_INT 1
4058: ARRAY
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PPUSH
4064: LD_EXP 17
4068: PUSH
4069: LD_INT 1
4071: ARRAY
4072: PUSH
4073: LD_INT 2
4075: ARRAY
4076: PPUSH
4077: LD_EXP 17
4081: PUSH
4082: LD_INT 1
4084: ARRAY
4085: PUSH
4086: LD_INT 3
4088: ARRAY
4089: PPUSH
4090: LD_EXP 17
4094: PUSH
4095: LD_INT 1
4097: ARRAY
4098: PUSH
4099: LD_INT 4
4101: ARRAY
4102: PPUSH
4103: CALL 44367 0 5
4107: AND
4108: IFFALSE 4171
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_EXP 17
4119: PUSH
4120: LD_INT 1
4122: ARRAY
4123: PUSH
4124: LD_INT 1
4126: ARRAY
4127: PPUSH
4128: LD_EXP 17
4132: PUSH
4133: LD_INT 1
4135: ARRAY
4136: PUSH
4137: LD_INT 2
4139: ARRAY
4140: PPUSH
4141: LD_EXP 17
4145: PUSH
4146: LD_INT 1
4148: ARRAY
4149: PUSH
4150: LD_INT 3
4152: ARRAY
4153: PPUSH
4154: LD_EXP 17
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: PUSH
4163: LD_INT 4
4165: ARRAY
4166: PPUSH
4167: CALL_OW 145
// end ; end ;
4171: GO 3693
4173: POP
4174: POP
// end ; end ;
4175: PPOPN 8
4177: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4178: LD_INT 22
4180: PUSH
4181: LD_INT 3
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: PUSH
4188: LD_INT 3
4190: PUSH
4191: LD_INT 60
4193: PUSH
4194: EMPTY
4195: LIST
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PUSH
4201: LD_INT 50
4203: PUSH
4204: EMPTY
4205: LIST
4206: PUSH
4207: LD_INT 25
4209: PUSH
4210: LD_INT 16
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: PPUSH
4223: CALL_OW 69
4227: PUSH
4228: LD_INT 14
4230: PPUSH
4231: CALL_OW 435
4235: AND
4236: IFFALSE 4348
4238: GO 4240
4240: DISABLE
4241: LD_INT 0
4243: PPUSH
4244: PPUSH
// begin enable ;
4245: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4246: LD_ADDR_VAR 0 2
4250: PUSH
4251: LD_INT 14
4253: PPUSH
4254: CALL_OW 435
4258: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4259: LD_ADDR_VAR 0 1
4263: PUSH
4264: LD_INT 22
4266: PUSH
4267: LD_INT 3
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 3
4276: PUSH
4277: LD_INT 60
4279: PUSH
4280: EMPTY
4281: LIST
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PUSH
4287: LD_INT 50
4289: PUSH
4290: EMPTY
4291: LIST
4292: PUSH
4293: LD_INT 25
4295: PUSH
4296: LD_INT 16
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: PPUSH
4309: CALL_OW 69
4313: PUSH
4314: FOR_IN
4315: IFFALSE 4346
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4317: LD_VAR 0 1
4321: PPUSH
4322: LD_VAR 0 2
4326: PUSH
4327: LD_INT 1
4329: ARRAY
4330: PPUSH
4331: LD_VAR 0 2
4335: PUSH
4336: LD_INT 2
4338: ARRAY
4339: PPUSH
4340: CALL_OW 117
4344: GO 4314
4346: POP
4347: POP
// end ;
4348: PPOPN 2
4350: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4351: LD_INT 22
4353: PUSH
4354: LD_INT 3
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 3
4363: PUSH
4364: LD_INT 60
4366: PUSH
4367: EMPTY
4368: LIST
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: PUSH
4374: LD_INT 50
4376: PUSH
4377: EMPTY
4378: LIST
4379: PUSH
4380: LD_INT 34
4382: PUSH
4383: LD_INT 51
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 69
4400: PUSH
4401: LD_INT 13
4403: PPUSH
4404: CALL_OW 435
4408: AND
4409: IFFALSE 4521
4411: GO 4413
4413: DISABLE
4414: LD_INT 0
4416: PPUSH
4417: PPUSH
// begin enable ;
4418: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4419: LD_ADDR_VAR 0 2
4423: PUSH
4424: LD_INT 13
4426: PPUSH
4427: CALL_OW 435
4431: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4432: LD_ADDR_VAR 0 1
4436: PUSH
4437: LD_INT 22
4439: PUSH
4440: LD_INT 3
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 3
4449: PUSH
4450: LD_INT 60
4452: PUSH
4453: EMPTY
4454: LIST
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 50
4462: PUSH
4463: EMPTY
4464: LIST
4465: PUSH
4466: LD_INT 34
4468: PUSH
4469: LD_INT 51
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: PPUSH
4482: CALL_OW 69
4486: PUSH
4487: FOR_IN
4488: IFFALSE 4519
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4490: LD_VAR 0 1
4494: PPUSH
4495: LD_VAR 0 2
4499: PUSH
4500: LD_INT 1
4502: ARRAY
4503: PPUSH
4504: LD_VAR 0 2
4508: PUSH
4509: LD_INT 2
4511: ARRAY
4512: PPUSH
4513: CALL_OW 117
4517: GO 4487
4519: POP
4520: POP
// end ;
4521: PPOPN 2
4523: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4524: LD_OWVAR 67
4528: PUSH
4529: LD_INT 1
4531: GREATER
4532: PUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL_OW 302
4540: AND
4541: IFFALSE 4697
4543: GO 4545
4545: DISABLE
4546: LD_INT 0
4548: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4549: LD_ADDR_VAR 0 1
4553: PUSH
4554: DOUBLE
4555: LD_INT 1
4557: DEC
4558: ST_TO_ADDR
4559: LD_INT 3
4561: PUSH
4562: LD_INT 4
4564: PUSH
4565: LD_INT 5
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: PUSH
4573: LD_OWVAR 67
4577: PUSH
4578: LD_INT 1
4580: MINUS
4581: ARRAY
4582: PUSH
4583: FOR_TO
4584: IFFALSE 4628
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4586: LD_INT 1
4588: PUSH
4589: LD_INT 40
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: LD_VAR 0 1
4600: PUSH
4601: LD_INT 2
4603: MOD
4604: PUSH
4605: LD_INT 1
4607: PLUS
4608: ARRAY
4609: PPUSH
4610: LD_INT 21
4612: PPUSH
4613: LD_INT 3
4615: PPUSH
4616: LD_INT 1
4618: PPUSH
4619: LD_INT 45
4621: PPUSH
4622: CALL_OW 185
// end ;
4626: GO 4583
4628: POP
4629: POP
// wait ( 12 12$00 ) ;
4630: LD_INT 25200
4632: PPUSH
4633: CALL_OW 67
// for i := 1 to 2 do
4637: LD_ADDR_VAR 0 1
4641: PUSH
4642: DOUBLE
4643: LD_INT 1
4645: DEC
4646: ST_TO_ADDR
4647: LD_INT 2
4649: PUSH
4650: FOR_TO
4651: IFFALSE 4695
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4653: LD_INT 1
4655: PUSH
4656: LD_INT 40
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PUSH
4663: LD_VAR 0 1
4667: PUSH
4668: LD_INT 2
4670: MOD
4671: PUSH
4672: LD_INT 1
4674: PLUS
4675: ARRAY
4676: PPUSH
4677: LD_INT 21
4679: PPUSH
4680: LD_INT 3
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: LD_INT 45
4688: PPUSH
4689: CALL_OW 185
// end ;
4693: GO 4650
4695: POP
4696: POP
// end ;
4697: PPOPN 1
4699: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4700: LD_EXP 16
4704: IFFALSE 5290
4706: GO 4708
4708: DISABLE
4709: LD_INT 0
4711: PPUSH
4712: PPUSH
4713: PPUSH
// begin enable ;
4714: ENABLE
// if not ruMobile then
4715: LD_EXP 16
4719: NOT
4720: IFFALSE 4724
// exit ;
4722: GO 5290
// for i in ruMobile do
4724: LD_ADDR_VAR 0 1
4728: PUSH
4729: LD_EXP 16
4733: PUSH
4734: FOR_IN
4735: IFFALSE 5288
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4737: LD_VAR 0 1
4741: PPUSH
4742: CALL_OW 302
4746: NOT
4747: PUSH
4748: LD_VAR 0 1
4752: PPUSH
4753: CALL_OW 255
4757: PUSH
4758: LD_INT 3
4760: NONEQUAL
4761: OR
4762: IFFALSE 4782
// begin ruMobile := ruMobile diff i ;
4764: LD_ADDR_EXP 16
4768: PUSH
4769: LD_EXP 16
4773: PUSH
4774: LD_VAR 0 1
4778: DIFF
4779: ST_TO_ADDR
// continue ;
4780: GO 4734
// end ; if GetTag ( i ) = 300 then
4782: LD_VAR 0 1
4786: PPUSH
4787: CALL_OW 110
4791: PUSH
4792: LD_INT 300
4794: EQUAL
4795: IFFALSE 4925
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4797: LD_VAR 0 1
4801: PPUSH
4802: CALL_OW 261
4806: PUSH
4807: LD_INT 50
4809: LESS
4810: PUSH
4811: LD_VAR 0 1
4815: PPUSH
4816: CALL_OW 262
4820: PUSH
4821: LD_INT 1
4823: EQUAL
4824: AND
4825: IFFALSE 4884
// begin ComMoveXY ( i , 120 , 58 ) ;
4827: LD_VAR 0 1
4831: PPUSH
4832: LD_INT 120
4834: PPUSH
4835: LD_INT 58
4837: PPUSH
4838: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4842: LD_INT 35
4844: PPUSH
4845: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4849: LD_VAR 0 1
4853: PPUSH
4854: LD_INT 120
4856: PPUSH
4857: LD_INT 58
4859: PPUSH
4860: CALL_OW 297
4864: PUSH
4865: LD_INT 4
4867: LESS
4868: IFFALSE 4842
// SetFuel ( i , 100 ) ;
4870: LD_VAR 0 1
4874: PPUSH
4875: LD_INT 100
4877: PPUSH
4878: CALL_OW 240
// end else
4882: GO 4925
// if not IsInArea ( i , ruParkingArea ) then
4884: LD_VAR 0 1
4888: PPUSH
4889: LD_INT 10
4891: PPUSH
4892: CALL_OW 308
4896: NOT
4897: IFFALSE 4913
// ComMoveToArea ( i , ruParkingArea ) else
4899: LD_VAR 0 1
4903: PPUSH
4904: LD_INT 10
4906: PPUSH
4907: CALL_OW 113
4911: GO 4925
// SetTag ( i , 301 ) ;
4913: LD_VAR 0 1
4917: PPUSH
4918: LD_INT 301
4920: PPUSH
4921: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4925: LD_VAR 0 1
4929: PPUSH
4930: CALL_OW 110
4934: PUSH
4935: LD_INT 301
4937: EQUAL
4938: IFFALSE 5068
// begin if GetLives ( i ) < 1000 then
4940: LD_VAR 0 1
4944: PPUSH
4945: CALL_OW 256
4949: PUSH
4950: LD_INT 1000
4952: LESS
4953: IFFALSE 5045
// begin if not IsDrivenBy ( i ) then
4955: LD_VAR 0 1
4959: PPUSH
4960: CALL_OW 311
4964: NOT
4965: IFFALSE 4969
// continue ;
4967: GO 4734
// mech := IsDrivenBy ( i ) ;
4969: LD_ADDR_VAR 0 2
4973: PUSH
4974: LD_VAR 0 1
4978: PPUSH
4979: CALL_OW 311
4983: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
4984: LD_VAR 0 2
4988: PPUSH
4989: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
4993: LD_VAR 0 2
4997: PPUSH
4998: LD_VAR 0 1
5002: PPUSH
5003: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5007: LD_INT 35
5009: PPUSH
5010: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5014: LD_VAR 0 1
5018: PPUSH
5019: CALL_OW 256
5023: PUSH
5024: LD_INT 1000
5026: EQUAL
5027: IFFALSE 5007
// ComEnterUnit ( mech , i ) ;
5029: LD_VAR 0 2
5033: PPUSH
5034: LD_VAR 0 1
5038: PPUSH
5039: CALL_OW 120
// end else
5043: GO 5068
// if IsDrivenBy ( i ) then
5045: LD_VAR 0 1
5049: PPUSH
5050: CALL_OW 311
5054: IFFALSE 5068
// SetTag ( i , 0 ) ;
5056: LD_VAR 0 1
5060: PPUSH
5061: LD_INT 0
5063: PPUSH
5064: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
5068: LD_VAR 0 1
5072: PPUSH
5073: CALL_OW 110
5077: PUSH
5078: LD_INT 300
5080: LESS
5081: IFFALSE 5286
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
5083: LD_ADDR_VAR 0 3
5087: PUSH
5088: LD_INT 11
5090: PPUSH
5091: LD_INT 81
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 70
5105: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5106: LD_VAR 0 1
5110: PPUSH
5111: CALL_OW 256
5115: PUSH
5116: LD_INT 650
5118: LESS
5119: IFFALSE 5144
// begin ComStop ( i ) ;
5121: LD_VAR 0 1
5125: PPUSH
5126: CALL_OW 141
// SetTag ( i , 300 ) ;
5130: LD_VAR 0 1
5134: PPUSH
5135: LD_INT 300
5137: PPUSH
5138: CALL_OW 109
// continue ;
5142: GO 4734
// end ; if enemy then
5144: LD_VAR 0 3
5148: IFFALSE 5188
// begin if not HasTask ( i ) then
5150: LD_VAR 0 1
5154: PPUSH
5155: CALL_OW 314
5159: NOT
5160: IFFALSE 5186
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5162: LD_VAR 0 1
5166: PPUSH
5167: LD_VAR 0 3
5171: PPUSH
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 74
5181: PPUSH
5182: CALL_OW 115
// end else
5186: GO 5286
// if ruMobile then
5188: LD_EXP 16
5192: IFFALSE 5286
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5194: LD_ADDR_VAR 0 3
5198: PUSH
5199: LD_INT 81
5201: PUSH
5202: LD_INT 3
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PPUSH
5209: CALL_OW 69
5213: ST_TO_ADDR
// if enemy then
5214: LD_VAR 0 3
5218: IFFALSE 5286
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5220: LD_VAR 0 1
5224: PPUSH
5225: LD_INT 113
5227: PUSH
5228: LD_INT 80
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 118
5237: PUSH
5238: LD_INT 100
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 107
5247: PUSH
5248: LD_INT 102
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 114
5257: PUSH
5258: LD_INT 120
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 86
5267: PUSH
5268: LD_INT 116
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: PPUSH
5282: CALL 71113 0 2
// end ; end ; end ;
5286: GO 4734
5288: POP
5289: POP
// end ;
5290: PPOPN 3
5292: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5293: LD_EXP 18
5297: IFFALSE 5343
5299: GO 5301
5301: DISABLE
5302: LD_INT 0
5304: PPUSH
// begin enable ;
5305: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5306: LD_ADDR_VAR 0 1
5310: PUSH
5311: LD_EXP 18
5315: PPUSH
5316: LD_INT 50
5318: PUSH
5319: EMPTY
5320: LIST
5321: PPUSH
5322: CALL_OW 72
5326: ST_TO_ADDR
// ruAttackers := [ ] ;
5327: LD_ADDR_EXP 18
5331: PUSH
5332: EMPTY
5333: ST_TO_ADDR
// SendAttack ( tmp ) ;
5334: LD_VAR 0 1
5338: PPUSH
5339: CALL 5346 0 1
// end ;
5343: PPOPN 1
5345: END
// function SendAttack ( group ) ; var i , tmp ; begin
5346: LD_INT 0
5348: PPUSH
5349: PPUSH
5350: PPUSH
// for i in group do
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: LD_VAR 0 1
5360: PUSH
5361: FOR_IN
5362: IFFALSE 5428
// begin SetTag ( i , 0 ) ;
5364: LD_VAR 0 3
5368: PPUSH
5369: LD_INT 0
5371: PPUSH
5372: CALL_OW 109
// if Prob ( 30 ) then
5376: LD_INT 30
5378: PPUSH
5379: CALL_OW 13
5383: IFFALSE 5411
// begin SetTag ( i , 1 ) ;
5385: LD_VAR 0 3
5389: PPUSH
5390: LD_INT 1
5392: PPUSH
5393: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 116
5404: PPUSH
5405: CALL_OW 120
// end else
5409: GO 5426
// ComAgressiveMove ( i , 118 , 93 ) ;
5411: LD_VAR 0 3
5415: PPUSH
5416: LD_INT 118
5418: PPUSH
5419: LD_INT 93
5421: PPUSH
5422: CALL_OW 114
// end ;
5426: GO 5361
5428: POP
5429: POP
// repeat wait ( 0 0$1 ) ;
5430: LD_INT 35
5432: PPUSH
5433: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5437: LD_ADDR_VAR 0 4
5441: PUSH
5442: LD_VAR 0 1
5446: PPUSH
5447: LD_INT 120
5449: PUSH
5450: LD_INT 0
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PPUSH
5457: CALL_OW 72
5461: ST_TO_ADDR
// for i in tmp do
5462: LD_ADDR_VAR 0 3
5466: PUSH
5467: LD_VAR 0 4
5471: PUSH
5472: FOR_IN
5473: IFFALSE 5620
// begin if not IsOk ( i ) then
5475: LD_VAR 0 3
5479: PPUSH
5480: CALL_OW 302
5484: NOT
5485: IFFALSE 5505
// begin tmp := tmp diff i ;
5487: LD_ADDR_VAR 0 4
5491: PUSH
5492: LD_VAR 0 4
5496: PUSH
5497: LD_VAR 0 3
5501: DIFF
5502: ST_TO_ADDR
// continue ;
5503: GO 5472
// end ; if GetDistUnits ( i , usDep ) < 8 then
5505: LD_VAR 0 3
5509: PPUSH
5510: LD_INT 48
5512: PPUSH
5513: CALL_OW 296
5517: PUSH
5518: LD_INT 8
5520: LESS
5521: IFFALSE 5537
// begin ComAttackUnit ( i , usDep ) ;
5523: LD_VAR 0 3
5527: PPUSH
5528: LD_INT 48
5530: PPUSH
5531: CALL_OW 115
// continue ;
5535: GO 5472
// end ; if not See ( 1 , i ) then
5537: LD_INT 1
5539: PPUSH
5540: LD_VAR 0 3
5544: PPUSH
5545: CALL_OW 292
5549: NOT
5550: IFFALSE 5569
// ComAgressiveMove ( i , 86 , 116 ) else
5552: LD_VAR 0 3
5556: PPUSH
5557: LD_INT 86
5559: PPUSH
5560: LD_INT 116
5562: PPUSH
5563: CALL_OW 114
5567: GO 5618
// if GetWeapon ( i ) <> ru_time_lapser then
5569: LD_VAR 0 3
5573: PPUSH
5574: CALL_OW 264
5578: PUSH
5579: LD_INT 49
5581: NONEQUAL
5582: IFFALSE 5618
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5584: LD_VAR 0 3
5588: PPUSH
5589: LD_INT 81
5591: PUSH
5592: LD_INT 3
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PPUSH
5599: CALL_OW 69
5603: PPUSH
5604: LD_VAR 0 3
5608: PPUSH
5609: CALL_OW 74
5613: PPUSH
5614: CALL_OW 115
// end ;
5618: GO 5472
5620: POP
5621: POP
// until not tmp ;
5622: LD_VAR 0 4
5626: NOT
5627: IFFALSE 5430
// end ; end_of_file
5629: LD_VAR 0 2
5633: RET
// on UnitDestroyed ( unit ) do var i ;
5634: LD_INT 0
5636: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5637: LD_VAR 0 1
5641: PPUSH
5642: CALL 26844 0 1
// if unit = JMM then
5646: LD_VAR 0 1
5650: PUSH
5651: LD_EXP 8
5655: EQUAL
5656: IFFALSE 5665
// YouLost ( JMM ) ;
5658: LD_STRING JMM
5660: PPUSH
5661: CALL_OW 104
// if GetSide ( unit ) = 4 then
5665: LD_VAR 0 1
5669: PPUSH
5670: CALL_OW 255
5674: PUSH
5675: LD_INT 4
5677: EQUAL
5678: IFFALSE 5737
// begin if unit = Joan then
5680: LD_VAR 0 1
5684: PUSH
5685: LD_EXP 10
5689: EQUAL
5690: IFFALSE 5699
// YouLost ( Joan ) ;
5692: LD_STRING Joan
5694: PPUSH
5695: CALL_OW 104
// if unit = Connie then
5699: LD_VAR 0 1
5703: PUSH
5704: LD_EXP 12
5708: EQUAL
5709: IFFALSE 5718
// YouLost ( Connie ) ;
5711: LD_STRING Connie
5713: PPUSH
5714: CALL_OW 104
// if unit = Lisa then
5718: LD_VAR 0 1
5722: PUSH
5723: LD_EXP 11
5727: EQUAL
5728: IFFALSE 5737
// YouLost ( Lisa ) ;
5730: LD_STRING Lisa
5732: PPUSH
5733: CALL_OW 104
// end ; if unit in ruAttackers then
5737: LD_VAR 0 1
5741: PUSH
5742: LD_EXP 18
5746: IN
5747: IFFALSE 5765
// ruAttackers := ruAttackers diff unit ;
5749: LD_ADDR_EXP 18
5753: PUSH
5754: LD_EXP 18
5758: PUSH
5759: LD_VAR 0 1
5763: DIFF
5764: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5765: LD_VAR 0 1
5769: PPUSH
5770: CALL_OW 264
5774: PUSH
5775: LD_INT 51
5777: EQUAL
5778: PUSH
5779: LD_INT 40
5781: PPUSH
5782: CALL_OW 302
5786: AND
5787: IFFALSE 5827
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5789: LD_INT 40
5791: PPUSH
5792: LD_INT 21
5794: PPUSH
5795: LD_INT 1
5797: PUSH
5798: LD_INT 3
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: LD_INT 1
5807: PPUSH
5808: LD_INT 2
5810: PPUSH
5811: CALL_OW 12
5815: ARRAY
5816: PPUSH
5817: LD_INT 3
5819: PPUSH
5820: LD_INT 51
5822: PPUSH
5823: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5827: LD_VAR 0 1
5831: PPUSH
5832: CALL_OW 264
5836: PUSH
5837: LD_INT 52
5839: EQUAL
5840: PUSH
5841: LD_INT 40
5843: PPUSH
5844: CALL_OW 302
5848: AND
5849: IFFALSE 5889
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5851: LD_INT 40
5853: PPUSH
5854: LD_INT 21
5856: PPUSH
5857: LD_INT 1
5859: PUSH
5860: LD_INT 3
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PUSH
5867: LD_INT 1
5869: PPUSH
5870: LD_INT 2
5872: PPUSH
5873: CALL_OW 12
5877: ARRAY
5878: PPUSH
5879: LD_INT 3
5881: PPUSH
5882: LD_INT 52
5884: PPUSH
5885: CALL_OW 185
// if unit in ruMobile then
5889: LD_VAR 0 1
5893: PUSH
5894: LD_EXP 16
5898: IN
5899: IFFALSE 5917
// ruMobile := ruMobile diff i ;
5901: LD_ADDR_EXP 16
5905: PUSH
5906: LD_EXP 16
5910: PUSH
5911: LD_VAR 0 2
5915: DIFF
5916: ST_TO_ADDR
// end ;
5917: PPOPN 2
5919: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
5920: LD_VAR 0 2
5924: PPUSH
5925: CALL_OW 255
5929: PUSH
5930: LD_INT 3
5932: EQUAL
5933: IFFALSE 5947
// SetTag ( unit , 0 ) ;
5935: LD_VAR 0 2
5939: PPUSH
5940: LD_INT 0
5942: PPUSH
5943: CALL_OW 109
// end ;
5947: PPOPN 2
5949: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
5950: LD_VAR 0 2
5954: PPUSH
5955: CALL_OW 255
5959: PUSH
5960: LD_INT 3
5962: EQUAL
5963: PUSH
5964: LD_VAR 0 1
5968: PUSH
5969: LD_EXP 19
5973: IN
5974: AND
5975: IFFALSE 5993
// ruTechList := ruTechList diff tech ;
5977: LD_ADDR_EXP 19
5981: PUSH
5982: LD_EXP 19
5986: PUSH
5987: LD_VAR 0 1
5991: DIFF
5992: ST_TO_ADDR
// end ;
5993: PPOPN 2
5995: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
5996: LD_INT 0
5998: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
5999: LD_VAR 0 1
6003: PPUSH
6004: LD_VAR 0 2
6008: PPUSH
6009: CALL 26964 0 2
// if GetSide ( vehicle ) <> 3 then
6013: LD_VAR 0 1
6017: PPUSH
6018: CALL_OW 255
6022: PUSH
6023: LD_INT 3
6025: NONEQUAL
6026: IFFALSE 6097
// begin if GetWeapon ( vehicle ) = us_double_laser then
6028: LD_VAR 0 1
6032: PPUSH
6033: CALL_OW 264
6037: PUSH
6038: LD_INT 10
6040: EQUAL
6041: IFFALSE 6095
// begin amLaserCounter := Inc ( amLaserCounter ) ;
6043: LD_ADDR_EXP 7
6047: PUSH
6048: LD_EXP 7
6052: PPUSH
6053: CALL 69870 0 1
6057: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
6058: LD_ADDR_VAR 0 3
6062: PUSH
6063: LD_VAR 0 2
6067: PPUSH
6068: CALL_OW 313
6072: PUSH
6073: FOR_IN
6074: IFFALSE 6093
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
6076: LD_VAR 0 3
6080: PPUSH
6081: LD_INT 3
6083: PPUSH
6084: LD_INT 1000
6086: PPUSH
6087: CALL_OW 591
6091: GO 6073
6093: POP
6094: POP
// end ; exit ;
6095: GO 6191
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6097: LD_VAR 0 1
6101: PPUSH
6102: CALL_OW 264
6106: PUSH
6107: LD_INT 51
6109: PUSH
6110: LD_INT 52
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: IN
6117: IFFALSE 6121
// exit ;
6119: GO 6191
// if GetControl ( vehicle ) = control_computer then
6121: LD_VAR 0 1
6125: PPUSH
6126: CALL_OW 263
6130: PUSH
6131: LD_INT 3
6133: EQUAL
6134: IFFALSE 6156
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6136: LD_ADDR_EXP 18
6140: PUSH
6141: LD_EXP 18
6145: PPUSH
6146: LD_VAR 0 1
6150: PPUSH
6151: CALL 68509 0 2
6155: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6156: LD_VAR 0 1
6160: PPUSH
6161: CALL_OW 263
6165: PUSH
6166: LD_INT 1
6168: EQUAL
6169: IFFALSE 6191
// ruMobile := Join ( ruMobile , vehicle ) ;
6171: LD_ADDR_EXP 16
6175: PUSH
6176: LD_EXP 16
6180: PPUSH
6181: LD_VAR 0 1
6185: PPUSH
6186: CALL 68509 0 2
6190: ST_TO_ADDR
// end ;
6191: PPOPN 3
6193: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) then
6194: LD_VAR 0 1
6198: PPUSH
6199: CALL_OW 255
6203: PUSH
6204: LD_INT 3
6206: EQUAL
6207: PUSH
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 257
6217: PUSH
6218: LD_INT 3
6220: EQUAL
6221: AND
6222: PUSH
6223: LD_INT 1
6225: PPUSH
6226: CALL_OW 255
6230: PUSH
6231: LD_INT 3
6233: EQUAL
6234: AND
6235: PUSH
6236: LD_INT 1
6238: PPUSH
6239: CALL_OW 302
6243: AND
6244: IFFALSE 6258
// ComEnterUnit ( human , ruFac1 ) ;
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: CALL_OW 120
// end ;
6258: PPOPN 4
6260: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6261: LD_VAR 0 1
6265: PPUSH
6266: CALL 26948 0 1
// end ; end_of_file
6270: PPOPN 1
6272: END
// export function Action ; var dec1 , dec2 , veh ; begin
6273: LD_INT 0
6275: PPUSH
6276: PPUSH
6277: PPUSH
6278: PPUSH
// veh := IsInUnit ( JMM ) ;
6279: LD_ADDR_VAR 0 4
6283: PUSH
6284: LD_EXP 8
6288: PPUSH
6289: CALL_OW 310
6293: ST_TO_ADDR
// InGameOn ;
6294: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6298: LD_VAR 0 4
6302: PPUSH
6303: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6307: LD_VAR 0 4
6311: PPUSH
6312: LD_INT 30
6314: PPUSH
6315: LD_INT 11
6317: PPUSH
6318: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6322: LD_VAR 0 4
6326: PPUSH
6327: LD_INT 69
6329: PPUSH
6330: LD_INT 34
6332: PPUSH
6333: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6337: LD_INT 30
6339: PPUSH
6340: LD_INT 11
6342: PPUSH
6343: CALL_OW 84
// wait ( 0 0$3 ) ;
6347: LD_INT 105
6349: PPUSH
6350: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6354: LD_EXP 13
6358: PPUSH
6359: LD_STRING D1-Pow-1
6361: PPUSH
6362: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6366: LD_EXP 8
6370: PPUSH
6371: CALL_OW 121
// AddComHold ( JMM ) ;
6375: LD_EXP 8
6379: PPUSH
6380: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6384: LD_EXP 8
6388: PPUSH
6389: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6393: LD_EXP 8
6397: PPUSH
6398: LD_STRING D1-JMM-1
6400: PPUSH
6401: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6405: LD_EXP 13
6409: PPUSH
6410: LD_STRING D1-Pow-2
6412: PPUSH
6413: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6417: LD_EXP 8
6421: PPUSH
6422: LD_STRING D1-JMM-2
6424: PPUSH
6425: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6429: LD_EXP 8
6433: PPUSH
6434: LD_VAR 0 4
6438: PPUSH
6439: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6443: LD_STRING M1
6445: PPUSH
6446: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6450: LD_INT 16
6452: PPUSH
6453: LD_INT 1
6455: PPUSH
6456: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6460: LD_INT 35
6462: PPUSH
6463: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6467: LD_EXP 8
6471: PPUSH
6472: LD_VAR 0 4
6476: PPUSH
6477: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6481: LD_VAR 0 4
6485: PPUSH
6486: LD_INT 51
6488: PPUSH
6489: LD_INT 21
6491: PPUSH
6492: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6496: LD_VAR 0 4
6500: PPUSH
6501: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6505: LD_VAR 0 4
6509: PPUSH
6510: LD_INT 51
6512: PPUSH
6513: LD_INT 21
6515: PPUSH
6516: CALL_OW 297
6520: PUSH
6521: LD_INT 6
6523: LESS
6524: IFFALSE 6460
// if JMMGirl = 1 then
6526: LD_EXP 2
6530: PUSH
6531: LD_INT 1
6533: EQUAL
6534: IFFALSE 6833
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6536: LD_EXP 10
6540: PPUSH
6541: LD_STRING D2J-Joan-1
6543: PPUSH
6544: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6548: LD_ADDR_VAR 0 2
6552: PUSH
6553: LD_STRING Q1
6555: PPUSH
6556: CALL_OW 97
6560: ST_TO_ADDR
// if dec1 = 1 then
6561: LD_VAR 0 2
6565: PUSH
6566: LD_INT 1
6568: EQUAL
6569: IFFALSE 6824
// begin ComExitVehicle ( JMM ) ;
6571: LD_EXP 8
6575: PPUSH
6576: CALL_OW 121
// AddComHold ( JMM ) ;
6580: LD_EXP 8
6584: PPUSH
6585: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6589: LD_EXP 8
6593: PPUSH
6594: LD_STRING D2J-JMM-1
6596: PPUSH
6597: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6601: LD_EXP 10
6605: PPUSH
6606: LD_STRING D2J-Joan-2
6608: PPUSH
6609: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6613: LD_EXP 8
6617: PPUSH
6618: LD_STRING D2J-JMM-2
6620: PPUSH
6621: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6625: LD_EXP 10
6629: PPUSH
6630: LD_STRING D2J-Joan-3
6632: PPUSH
6633: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6637: LD_EXP 13
6641: PPUSH
6642: LD_STRING DPowell-Pow-1
6644: PPUSH
6645: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6649: LD_ADDR_VAR 0 3
6653: PUSH
6654: LD_STRING Q2J
6656: PPUSH
6657: CALL_OW 97
6661: ST_TO_ADDR
// if dec2 = 1 then
6662: LD_VAR 0 3
6666: PUSH
6667: LD_INT 1
6669: EQUAL
6670: IFFALSE 6712
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6672: LD_EXP 8
6676: PPUSH
6677: LD_STRING D2Ja-JMM-1
6679: PPUSH
6680: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6684: LD_EXP 10
6688: PPUSH
6689: LD_STRING D2Ja-Joan-1
6691: PPUSH
6692: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
6696: LD_EXP 8
6700: PPUSH
6701: LD_STRING D2Ja-JMM-2
6703: PPUSH
6704: CALL_OW 88
// InGameOff ;
6708: CALL_OW 9
// end ; if dec2 = 2 then
6712: LD_VAR 0 3
6716: PUSH
6717: LD_INT 2
6719: EQUAL
6720: IFFALSE 6791
// begin Say ( JMM , D2Jb-JMM-1 ) ;
6722: LD_EXP 8
6726: PPUSH
6727: LD_STRING D2Jb-JMM-1
6729: PPUSH
6730: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
6734: LD_EXP 10
6738: PPUSH
6739: LD_STRING D2Jb-Joan-1
6741: PPUSH
6742: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
6746: LD_EXP 8
6750: PPUSH
6751: LD_STRING D2Jb-JMM-2
6753: PPUSH
6754: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
6758: LD_EXP 10
6762: PPUSH
6763: LD_STRING D2Jb-Joan-2
6765: PPUSH
6766: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
6770: LD_EXP 8
6774: PPUSH
6775: LD_STRING D2Jb-JMM-3
6777: PPUSH
6778: CALL_OW 88
// FinishMission ( true ) ;
6782: LD_INT 1
6784: PPUSH
6785: CALL 9664 0 1
// exit ;
6789: GO 7373
// end ; if dec2 = 3 then
6791: LD_VAR 0 3
6795: PUSH
6796: LD_INT 3
6798: EQUAL
6799: IFFALSE 6822
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
6801: LD_EXP 10
6805: PPUSH
6806: LD_STRING D2Jc-Joan-1
6808: PPUSH
6809: CALL_OW 94
// FinishMission ( true ) ;
6813: LD_INT 1
6815: PPUSH
6816: CALL 9664 0 1
// exit ;
6820: GO 7373
// end ; end else
6822: GO 6833
// begin FinishMission ( true ) ;
6824: LD_INT 1
6826: PPUSH
6827: CALL 9664 0 1
// exit ;
6831: GO 7373
// end ; end ; if JMMGirl = 2 then
6833: LD_EXP 2
6837: PUSH
6838: LD_INT 2
6840: EQUAL
6841: IFFALSE 7152
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
6843: LD_EXP 11
6847: PPUSH
6848: LD_STRING D2L-Lisa-1
6850: PPUSH
6851: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6855: LD_ADDR_VAR 0 2
6859: PUSH
6860: LD_STRING Q1
6862: PPUSH
6863: CALL_OW 97
6867: ST_TO_ADDR
// if dec1 = 1 then
6868: LD_VAR 0 2
6872: PUSH
6873: LD_INT 1
6875: EQUAL
6876: IFFALSE 7143
// begin ComExitVehicle ( JMM ) ;
6878: LD_EXP 8
6882: PPUSH
6883: CALL_OW 121
// AddComHold ( JMM ) ;
6887: LD_EXP 8
6891: PPUSH
6892: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
6896: LD_EXP 8
6900: PPUSH
6901: LD_STRING D2L-JMM-1
6903: PPUSH
6904: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
6908: LD_EXP 11
6912: PPUSH
6913: LD_STRING D2L-Lisa-2
6915: PPUSH
6916: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
6920: LD_EXP 8
6924: PPUSH
6925: LD_STRING D2L-JMM-2
6927: PPUSH
6928: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
6932: LD_EXP 11
6936: PPUSH
6937: LD_STRING DL-Lisa-3
6939: PPUSH
6940: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6944: LD_EXP 13
6948: PPUSH
6949: LD_STRING DPowell-Pow-1
6951: PPUSH
6952: CALL_OW 94
// dec2 := Query ( Q2L ) ;
6956: LD_ADDR_VAR 0 3
6960: PUSH
6961: LD_STRING Q2L
6963: PPUSH
6964: CALL_OW 97
6968: ST_TO_ADDR
// if dec2 = 1 then
6969: LD_VAR 0 3
6973: PUSH
6974: LD_INT 1
6976: EQUAL
6977: IFFALSE 7043
// begin Say ( JMM , D2La-JMM-1 ) ;
6979: LD_EXP 8
6983: PPUSH
6984: LD_STRING D2La-JMM-1
6986: PPUSH
6987: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
6991: LD_EXP 11
6995: PPUSH
6996: LD_STRING D2La-Lisa-1
6998: PPUSH
6999: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
7003: LD_EXP 8
7007: PPUSH
7008: LD_STRING D2La-JMM-2
7010: PPUSH
7011: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
7015: LD_EXP 11
7019: PPUSH
7020: LD_STRING D2La-Lisa-2
7022: PPUSH
7023: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
7027: LD_EXP 8
7031: PPUSH
7032: LD_STRING D2La-JMM-3
7034: PPUSH
7035: CALL_OW 88
// InGameOff ;
7039: CALL_OW 9
// end ; if dec2 = 2 then
7043: LD_VAR 0 3
7047: PUSH
7048: LD_INT 2
7050: EQUAL
7051: IFFALSE 7110
// begin Say ( JMM , D2Lb-JMM-1 ) ;
7053: LD_EXP 8
7057: PPUSH
7058: LD_STRING D2Lb-JMM-1
7060: PPUSH
7061: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
7065: LD_EXP 11
7069: PPUSH
7070: LD_STRING D2Lb-Lisa-1
7072: PPUSH
7073: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
7077: LD_EXP 8
7081: PPUSH
7082: LD_STRING D2Lb-JMM-2
7084: PPUSH
7085: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7089: LD_EXP 11
7093: PPUSH
7094: LD_STRING D2Lb-Lisa-2
7096: PPUSH
7097: CALL_OW 94
// FinishMission ( true ) ;
7101: LD_INT 1
7103: PPUSH
7104: CALL 9664 0 1
// exit ;
7108: GO 7373
// end ; if dec2 = 3 then
7110: LD_VAR 0 3
7114: PUSH
7115: LD_INT 3
7117: EQUAL
7118: IFFALSE 7141
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7120: LD_EXP 11
7124: PPUSH
7125: LD_STRING D2Lc-Lisa-1
7127: PPUSH
7128: CALL_OW 94
// FinishMission ( true ) ;
7132: LD_INT 1
7134: PPUSH
7135: CALL 9664 0 1
// exit ;
7139: GO 7373
// end ; end else
7141: GO 7152
// begin FinishMission ( true ) ;
7143: LD_INT 1
7145: PPUSH
7146: CALL 9664 0 1
// exit ;
7150: GO 7373
// end ; end ; if JMMGirl = 3 then
7152: LD_EXP 2
7156: PUSH
7157: LD_INT 3
7159: EQUAL
7160: IFFALSE 7373
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7162: LD_EXP 12
7166: PPUSH
7167: LD_STRING D2X-Con-1
7169: PPUSH
7170: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7174: LD_ADDR_VAR 0 2
7178: PUSH
7179: LD_STRING Q1
7181: PPUSH
7182: CALL_OW 97
7186: ST_TO_ADDR
// if dec1 = 1 then
7187: LD_VAR 0 2
7191: PUSH
7192: LD_INT 1
7194: EQUAL
7195: IFFALSE 7366
// begin ComExitVehicle ( JMM ) ;
7197: LD_EXP 8
7201: PPUSH
7202: CALL_OW 121
// AddComHold ( JMM ) ;
7206: LD_EXP 8
7210: PPUSH
7211: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7215: LD_EXP 8
7219: PPUSH
7220: LD_STRING D2X-JMM-1
7222: PPUSH
7223: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7227: LD_EXP 12
7231: PPUSH
7232: LD_STRING D2X-Con-2
7234: PPUSH
7235: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7239: LD_EXP 13
7243: PPUSH
7244: LD_STRING DPowell-Pow-1
7246: PPUSH
7247: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7251: LD_ADDR_VAR 0 3
7255: PUSH
7256: LD_STRING Q2X
7258: PPUSH
7259: CALL_OW 97
7263: ST_TO_ADDR
// if dec2 = 1 then
7264: LD_VAR 0 3
7268: PUSH
7269: LD_INT 1
7271: EQUAL
7272: IFFALSE 7290
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7274: LD_EXP 8
7278: PPUSH
7279: LD_STRING D2Xa-JMM-1
7281: PPUSH
7282: CALL_OW 88
// InGameOff ;
7286: CALL_OW 9
// end ; if dec2 = 2 then
7290: LD_VAR 0 3
7294: PUSH
7295: LD_INT 2
7297: EQUAL
7298: IFFALSE 7333
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7300: LD_EXP 8
7304: PPUSH
7305: LD_STRING D2Xb-JMM-1
7307: PPUSH
7308: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7312: LD_EXP 12
7316: PPUSH
7317: LD_STRING D2Xb-Con-1
7319: PPUSH
7320: CALL_OW 94
// FinishMission ( true ) ;
7324: LD_INT 1
7326: PPUSH
7327: CALL 9664 0 1
// exit ;
7331: GO 7373
// end ; if dec2 = 3 then
7333: LD_VAR 0 3
7337: PUSH
7338: LD_INT 3
7340: EQUAL
7341: IFFALSE 7364
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7343: LD_EXP 12
7347: PPUSH
7348: LD_STRING D2Xc-Con-1
7350: PPUSH
7351: CALL_OW 94
// FinishMission ( true ) ;
7355: LD_INT 1
7357: PPUSH
7358: CALL 9664 0 1
// exit ;
7362: GO 7373
// end ; end else
7364: GO 7373
// begin FinishMission ( true ) ;
7366: LD_INT 1
7368: PPUSH
7369: CALL 9664 0 1
// end ; end ; end ;
7373: LD_VAR 0 1
7377: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7378: LD_EXP 8
7382: PPUSH
7383: LD_INT 15
7385: PPUSH
7386: CALL_OW 308
7390: IFFALSE 8638
7392: GO 7394
7394: DISABLE
7395: LD_INT 0
7397: PPUSH
// begin if tick < 5 5$00 then
7398: LD_OWVAR 1
7402: PUSH
7403: LD_INT 10500
7405: LESS
7406: IFFALSE 7658
// begin uc_side := 6 ;
7408: LD_ADDR_OWVAR 20
7412: PUSH
7413: LD_INT 6
7415: ST_TO_ADDR
// uc_nation := 3 ;
7416: LD_ADDR_OWVAR 21
7420: PUSH
7421: LD_INT 3
7423: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7424: LD_INT 1
7426: PPUSH
7427: LD_INT 105
7429: PPUSH
7430: LD_INT 97
7432: PPUSH
7433: CALL_OW 293
7437: NOT
7438: IFFALSE 7502
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7440: LD_INT 22
7442: PPUSH
7443: LD_INT 1
7445: PPUSH
7446: LD_INT 3
7448: PPUSH
7449: LD_INT 44
7451: PPUSH
7452: LD_INT 40
7454: PPUSH
7455: CALL 36148 0 5
// veh := CreateVehicle ;
7459: LD_ADDR_VAR 0 1
7463: PUSH
7464: CALL_OW 45
7468: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7469: LD_VAR 0 1
7473: PPUSH
7474: LD_INT 200
7476: PPUSH
7477: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7481: LD_VAR 0 1
7485: PPUSH
7486: LD_INT 105
7488: PPUSH
7489: LD_INT 97
7491: PPUSH
7492: LD_INT 3
7494: PPUSH
7495: LD_INT 0
7497: PPUSH
7498: CALL 70649 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7502: LD_INT 1
7504: PPUSH
7505: LD_INT 116
7507: PPUSH
7508: LD_INT 120
7510: PPUSH
7511: CALL_OW 293
7515: NOT
7516: IFFALSE 7580
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7518: LD_INT 22
7520: PPUSH
7521: LD_INT 1
7523: PPUSH
7524: LD_INT 3
7526: PPUSH
7527: LD_INT 45
7529: PPUSH
7530: LD_INT 40
7532: PPUSH
7533: CALL 36148 0 5
// veh := CreateVehicle ;
7537: LD_ADDR_VAR 0 1
7541: PUSH
7542: CALL_OW 45
7546: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7547: LD_VAR 0 1
7551: PPUSH
7552: LD_INT 200
7554: PPUSH
7555: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7559: LD_VAR 0 1
7563: PPUSH
7564: LD_INT 116
7566: PPUSH
7567: LD_INT 120
7569: PPUSH
7570: LD_INT 4
7572: PPUSH
7573: LD_INT 0
7575: PPUSH
7576: CALL 70649 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7580: LD_INT 1
7582: PPUSH
7583: LD_INT 116
7585: PPUSH
7586: LD_INT 120
7588: PPUSH
7589: CALL_OW 293
7593: NOT
7594: IFFALSE 7658
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7596: LD_INT 24
7598: PPUSH
7599: LD_INT 1
7601: PPUSH
7602: LD_INT 3
7604: PPUSH
7605: LD_INT 45
7607: PPUSH
7608: LD_INT 30
7610: PPUSH
7611: CALL 36148 0 5
// veh := CreateVehicle ;
7615: LD_ADDR_VAR 0 1
7619: PUSH
7620: CALL_OW 45
7624: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7625: LD_VAR 0 1
7629: PPUSH
7630: LD_INT 200
7632: PPUSH
7633: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7637: LD_VAR 0 1
7641: PPUSH
7642: LD_INT 116
7644: PPUSH
7645: LD_INT 120
7647: PPUSH
7648: LD_INT 4
7650: PPUSH
7651: LD_INT 0
7653: PPUSH
7654: CALL 70649 0 5
// end ; end ; InGameOn ;
7658: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7662: LD_INT 35
7664: PPUSH
7665: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7669: LD_EXP 8
7673: PPUSH
7674: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7678: LD_EXP 8
7682: PPUSH
7683: LD_INT 81
7685: PPUSH
7686: LD_INT 109
7688: PPUSH
7689: CALL_OW 111
// AddComHold ( JMM ) ;
7693: LD_EXP 8
7697: PPUSH
7698: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
7702: LD_EXP 10
7706: PUSH
7707: LD_EXP 11
7711: PUSH
7712: LD_EXP 12
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: LIST
7721: PPUSH
7722: LD_EXP 8
7726: PPUSH
7727: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
7731: LD_EXP 10
7735: PUSH
7736: LD_EXP 11
7740: PUSH
7741: LD_EXP 12
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: LIST
7750: PPUSH
7751: LD_INT 91
7753: PUSH
7754: LD_EXP 8
7758: PUSH
7759: LD_INT 6
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: LIST
7766: PPUSH
7767: CALL_OW 72
7771: IFFALSE 7662
// case JMMGirl of 1 :
7773: LD_EXP 2
7777: PUSH
7778: LD_INT 1
7780: DOUBLE
7781: EQUAL
7782: IFTRUE 7786
7784: GO 8071
7786: POP
// begin ChangeSideKappaBase ;
7787: CALL 1447 0 0
// ComTurnUnit ( Joan , JMM ) ;
7791: LD_EXP 10
7795: PPUSH
7796: LD_EXP 8
7800: PPUSH
7801: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
7805: LD_EXP 8
7809: PPUSH
7810: LD_EXP 10
7814: PPUSH
7815: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
7819: LD_EXP 10
7823: PUSH
7824: LD_EXP 8
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PPUSH
7833: CALL_OW 87
// wait ( 0 0$1 ) ;
7837: LD_INT 35
7839: PPUSH
7840: CALL_OW 67
// DialogueOn ;
7844: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
7848: LD_EXP 10
7852: PPUSH
7853: LD_STRING D3J-Joan-1
7855: PPUSH
7856: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
7860: LD_EXP 8
7864: PPUSH
7865: LD_STRING D3J-JMM-1
7867: PPUSH
7868: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
7872: LD_EXP 10
7876: PPUSH
7877: LD_STRING D3J-Joan-2
7879: PPUSH
7880: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
7884: LD_EXP 8
7888: PPUSH
7889: LD_STRING D3J-JMM-2
7891: PPUSH
7892: CALL_OW 88
// wait ( 0 0$1 ) ;
7896: LD_INT 35
7898: PPUSH
7899: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
7903: LD_EXP 8
7907: PPUSH
7908: LD_STRING D4-JMM-1
7910: PPUSH
7911: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
7915: LD_EXP 10
7919: PPUSH
7920: LD_STRING D4-Joan-1
7922: PPUSH
7923: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
7927: LD_EXP 8
7931: PPUSH
7932: LD_STRING D4-JMM-2
7934: PPUSH
7935: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
7939: LD_EXP 10
7943: PPUSH
7944: LD_STRING D4-Joan-2
7946: PPUSH
7947: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
7951: LD_EXP 8
7955: PPUSH
7956: LD_STRING D4-JMM-3
7958: PPUSH
7959: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
7963: LD_INT 10
7965: PPUSH
7966: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
7970: LD_EXP 13
7974: PPUSH
7975: LD_STRING D7-Pow-1
7977: PPUSH
7978: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
7982: LD_EXP 8
7986: PPUSH
7987: LD_STRING D7-JMM-1
7989: PPUSH
7990: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
7994: LD_EXP 13
7998: PPUSH
7999: LD_STRING D7-Pow-2
8001: PPUSH
8002: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8006: LD_EXP 8
8010: PPUSH
8011: LD_STRING D7-JMM-2
8013: PPUSH
8014: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8018: LD_EXP 13
8022: PPUSH
8023: LD_STRING D7-Pow-3
8025: PPUSH
8026: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8030: LD_EXP 8
8034: PPUSH
8035: LD_STRING D7-JMM-3
8037: PPUSH
8038: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8042: LD_EXP 13
8046: PPUSH
8047: LD_STRING D7-Pow-4
8049: PPUSH
8050: CALL_OW 94
// DialogueOff ;
8054: CALL_OW 7
// InGameOff ;
8058: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
8062: LD_STRING M2J
8064: PPUSH
8065: CALL_OW 337
// end ; 2 :
8069: GO 8634
8071: LD_INT 2
8073: DOUBLE
8074: EQUAL
8075: IFTRUE 8079
8077: GO 8364
8079: POP
// begin ChangeSideKappaBase ;
8080: CALL 1447 0 0
// ComTurnUnit ( Lisa , JMM ) ;
8084: LD_EXP 11
8088: PPUSH
8089: LD_EXP 8
8093: PPUSH
8094: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
8098: LD_EXP 8
8102: PPUSH
8103: LD_EXP 11
8107: PPUSH
8108: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
8112: LD_EXP 11
8116: PUSH
8117: LD_EXP 8
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PPUSH
8126: CALL_OW 87
// wait ( 0 0$1 ) ;
8130: LD_INT 35
8132: PPUSH
8133: CALL_OW 67
// DialogueOn ;
8137: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
8141: LD_EXP 11
8145: PPUSH
8146: LD_STRING D3L-Lisa-1
8148: PPUSH
8149: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
8153: LD_EXP 8
8157: PPUSH
8158: LD_STRING D3L-JMM-1
8160: PPUSH
8161: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
8165: LD_EXP 11
8169: PPUSH
8170: LD_STRING D3L-Lisa-2
8172: PPUSH
8173: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
8177: LD_EXP 8
8181: PPUSH
8182: LD_STRING D3L-JMM-2
8184: PPUSH
8185: CALL_OW 88
// wait ( 0 0$1 ) ;
8189: LD_INT 35
8191: PPUSH
8192: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8196: LD_EXP 8
8200: PPUSH
8201: LD_STRING D4-JMM-1
8203: PPUSH
8204: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8208: LD_EXP 11
8212: PPUSH
8213: LD_STRING D4-Lisa-1
8215: PPUSH
8216: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8220: LD_EXP 8
8224: PPUSH
8225: LD_STRING D4-JMM-1
8227: PPUSH
8228: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8232: LD_EXP 11
8236: PPUSH
8237: LD_STRING D4-Lisa-2
8239: PPUSH
8240: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8244: LD_EXP 8
8248: PPUSH
8249: LD_STRING D4-JMM-3
8251: PPUSH
8252: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8256: LD_INT 10
8258: PPUSH
8259: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8263: LD_EXP 13
8267: PPUSH
8268: LD_STRING D7-Pow-1
8270: PPUSH
8271: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8275: LD_EXP 8
8279: PPUSH
8280: LD_STRING D7-JMM-1
8282: PPUSH
8283: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8287: LD_EXP 13
8291: PPUSH
8292: LD_STRING D7-Pow-2
8294: PPUSH
8295: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8299: LD_EXP 8
8303: PPUSH
8304: LD_STRING D7-JMM-2
8306: PPUSH
8307: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8311: LD_EXP 13
8315: PPUSH
8316: LD_STRING D7-Pow-3
8318: PPUSH
8319: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8323: LD_EXP 8
8327: PPUSH
8328: LD_STRING D7-JMM-3
8330: PPUSH
8331: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8335: LD_EXP 13
8339: PPUSH
8340: LD_STRING D7-Pow-4
8342: PPUSH
8343: CALL_OW 94
// DialogueOff ;
8347: CALL_OW 7
// InGameOff ;
8351: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8355: LD_STRING M2L
8357: PPUSH
8358: CALL_OW 337
// end ; 3 :
8362: GO 8634
8364: LD_INT 3
8366: DOUBLE
8367: EQUAL
8368: IFTRUE 8372
8370: GO 8633
8372: POP
// begin ChangeSideKappaBase ;
8373: CALL 1447 0 0
// ComTurnUnit ( Connie , JMM ) ;
8377: LD_EXP 12
8381: PPUSH
8382: LD_EXP 8
8386: PPUSH
8387: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8391: LD_EXP 8
8395: PPUSH
8396: LD_EXP 12
8400: PPUSH
8401: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8405: LD_EXP 10
8409: PUSH
8410: LD_EXP 8
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 87
// wait ( 0 0$1 ) ;
8423: LD_INT 35
8425: PPUSH
8426: CALL_OW 67
// DialogueOn ;
8430: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8434: LD_EXP 12
8438: PPUSH
8439: LD_STRING D3X-Con-1
8441: PPUSH
8442: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8446: LD_EXP 8
8450: PPUSH
8451: LD_STRING D3J-JMM-1
8453: PPUSH
8454: CALL_OW 88
// wait ( 0 0$1 ) ;
8458: LD_INT 35
8460: PPUSH
8461: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8465: LD_EXP 8
8469: PPUSH
8470: LD_STRING D4-JMM-1
8472: PPUSH
8473: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8477: LD_EXP 12
8481: PPUSH
8482: LD_STRING D4-Con-1
8484: PPUSH
8485: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8489: LD_EXP 8
8493: PPUSH
8494: LD_STRING D4-JMM-2
8496: PPUSH
8497: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8501: LD_EXP 12
8505: PPUSH
8506: LD_STRING D4-Con-2
8508: PPUSH
8509: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8513: LD_EXP 8
8517: PPUSH
8518: LD_STRING D4-JMM-3
8520: PPUSH
8521: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8525: LD_INT 10
8527: PPUSH
8528: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8532: LD_EXP 13
8536: PPUSH
8537: LD_STRING D7-Pow-1
8539: PPUSH
8540: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8544: LD_EXP 8
8548: PPUSH
8549: LD_STRING D7-JMM-1
8551: PPUSH
8552: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8556: LD_EXP 13
8560: PPUSH
8561: LD_STRING D7-Pow-2
8563: PPUSH
8564: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8568: LD_EXP 8
8572: PPUSH
8573: LD_STRING D7-JMM-2
8575: PPUSH
8576: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8580: LD_EXP 13
8584: PPUSH
8585: LD_STRING D7-Pow-3
8587: PPUSH
8588: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8592: LD_EXP 8
8596: PPUSH
8597: LD_STRING D7-JMM-3
8599: PPUSH
8600: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8604: LD_EXP 13
8608: PPUSH
8609: LD_STRING D7-Pow-4
8611: PPUSH
8612: CALL_OW 94
// DialogueOff ;
8616: CALL_OW 7
// InGameOff ;
8620: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8624: LD_STRING M2X
8626: PPUSH
8627: CALL_OW 337
// end ; end ;
8631: GO 8634
8633: POP
// SaveForQuickRestart ;
8634: CALL_OW 22
// end ;
8638: PPOPN 1
8640: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8641: LD_INT 32
8643: PPUSH
8644: CALL_OW 306
8648: IFFALSE 8973
8650: GO 8652
8652: DISABLE
// begin case JMMGirl of 1 :
8653: LD_EXP 2
8657: PUSH
8658: LD_INT 1
8660: DOUBLE
8661: EQUAL
8662: IFTRUE 8666
8664: GO 8780
8666: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8667: LD_EXP 8
8671: PPUSH
8672: LD_STRING D6J-JMM-1
8674: PPUSH
8675: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8679: LD_STRING 13f_Denis
8681: PPUSH
8682: CALL_OW 28
8686: PUSH
8687: LD_STRING 13s_Denis
8689: PPUSH
8690: CALL_OW 28
8694: OR
8695: IFFALSE 8735
// begin Say ( Joan , D6J-Joan-1 ) ;
8697: LD_EXP 10
8701: PPUSH
8702: LD_STRING D6J-Joan-1
8704: PPUSH
8705: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
8709: LD_EXP 8
8713: PPUSH
8714: LD_STRING D6J-JMM-2
8716: PPUSH
8717: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
8721: LD_EXP 10
8725: PPUSH
8726: LD_STRING D6J-Joan-2
8728: PPUSH
8729: CALL_OW 88
// end else
8733: GO 8747
// Say ( Joan , D6J-Joan-2a ) ;
8735: LD_EXP 10
8739: PPUSH
8740: LD_STRING D6J-Joan-2a
8742: PPUSH
8743: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
8747: LD_EXP 8
8751: PPUSH
8752: LD_STRING D6J-JMM-3
8754: PPUSH
8755: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
8759: LD_EXP 10
8763: PPUSH
8764: LD_STRING D6J-Joan-3
8766: PPUSH
8767: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8771: LD_STRING M3
8773: PPUSH
8774: CALL_OW 337
// end ; 2 :
8778: GO 8973
8780: LD_INT 2
8782: DOUBLE
8783: EQUAL
8784: IFTRUE 8788
8786: GO 8846
8788: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
8789: LD_EXP 8
8793: PPUSH
8794: LD_STRING D6L-JMM-1
8796: PPUSH
8797: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
8801: LD_EXP 11
8805: PPUSH
8806: LD_STRING D6L-Lisa-1
8808: PPUSH
8809: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
8813: LD_EXP 8
8817: PPUSH
8818: LD_STRING D6L-JMM-2
8820: PPUSH
8821: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
8825: LD_EXP 11
8829: PPUSH
8830: LD_STRING D6L-Lisa-2
8832: PPUSH
8833: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8837: LD_STRING M3
8839: PPUSH
8840: CALL_OW 337
// end ; 3 :
8844: GO 8973
8846: LD_INT 3
8848: DOUBLE
8849: EQUAL
8850: IFTRUE 8854
8852: GO 8972
8854: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
8855: LD_EXP 8
8859: PPUSH
8860: LD_STRING D6X-JMM-1
8862: PPUSH
8863: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
8867: LD_EXP 12
8871: PPUSH
8872: LD_STRING D6X-Con-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
8879: LD_EXP 8
8883: PPUSH
8884: LD_STRING D6X-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
8891: LD_EXP 12
8895: PPUSH
8896: LD_STRING D6X-Con-2
8898: PPUSH
8899: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
8903: LD_EXP 8
8907: PPUSH
8908: LD_STRING D6X-JMM-3
8910: PPUSH
8911: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
8915: LD_EXP 12
8919: PPUSH
8920: LD_STRING D6X-Con-3
8922: PPUSH
8923: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
8927: LD_EXP 8
8931: PPUSH
8932: LD_STRING D6X-JMM-4
8934: PPUSH
8935: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
8939: LD_EXP 12
8943: PPUSH
8944: LD_STRING D6X-Con-4
8946: PPUSH
8947: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
8951: LD_EXP 8
8955: PPUSH
8956: LD_STRING D6X-JMM-5
8958: PPUSH
8959: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8963: LD_STRING M3
8965: PPUSH
8966: CALL_OW 337
// end ; end ;
8970: GO 8973
8972: POP
// end ;
8973: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
8974: LD_INT 22
8976: PUSH
8977: LD_INT 1
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: LD_INT 33
8986: PUSH
8987: LD_INT 2
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 69
9002: PPUSH
9003: CALL_OW 306
9007: IFFALSE 9153
9009: GO 9011
9011: DISABLE
// begin case JMMGirl of 1 :
9012: LD_EXP 2
9016: PUSH
9017: LD_INT 1
9019: DOUBLE
9020: EQUAL
9021: IFTRUE 9025
9023: GO 9062
9025: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9026: LD_EXP 8
9030: PPUSH
9031: LD_STRING D5-JMM-1
9033: PPUSH
9034: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9038: LD_INT 77
9040: PPUSH
9041: LD_INT 87
9043: PPUSH
9044: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
9048: LD_EXP 10
9052: PPUSH
9053: LD_STRING D5-Joan-1
9055: PPUSH
9056: CALL_OW 88
// end ; 2 :
9060: GO 9153
9062: LD_INT 2
9064: DOUBLE
9065: EQUAL
9066: IFTRUE 9070
9068: GO 9107
9070: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9071: LD_EXP 8
9075: PPUSH
9076: LD_STRING D5-JMM-1
9078: PPUSH
9079: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9083: LD_INT 77
9085: PPUSH
9086: LD_INT 87
9088: PPUSH
9089: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
9093: LD_EXP 11
9097: PPUSH
9098: LD_STRING D5-Lisa-1
9100: PPUSH
9101: CALL_OW 88
// end ; 3 :
9105: GO 9153
9107: LD_INT 3
9109: DOUBLE
9110: EQUAL
9111: IFTRUE 9115
9113: GO 9152
9115: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9116: LD_EXP 8
9120: PPUSH
9121: LD_STRING D5-JMM-1
9123: PPUSH
9124: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9128: LD_INT 77
9130: PPUSH
9131: LD_INT 87
9133: PPUSH
9134: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
9138: LD_EXP 12
9142: PPUSH
9143: LD_STRING D5-Con-1
9145: PPUSH
9146: CALL_OW 88
// end ; end ;
9150: GO 9153
9152: POP
// end ;
9153: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
9154: LD_EXP 8
9158: PPUSH
9159: CALL_OW 310
9163: PPUSH
9164: LD_INT 16
9166: PPUSH
9167: CALL_OW 308
9171: IFFALSE 9521
9173: GO 9175
9175: DISABLE
9176: LD_INT 0
9178: PPUSH
9179: PPUSH
// begin enable ;
9180: ENABLE
// if JMMGirl = 1 then
9181: LD_EXP 2
9185: PUSH
9186: LD_INT 1
9188: EQUAL
9189: IFFALSE 9206
// JMMGirlVeh := IsInUnit ( Joan ) ;
9191: LD_ADDR_VAR 0 1
9195: PUSH
9196: LD_EXP 10
9200: PPUSH
9201: CALL_OW 310
9205: ST_TO_ADDR
// if JMMGirl = 2 then
9206: LD_EXP 2
9210: PUSH
9211: LD_INT 2
9213: EQUAL
9214: IFFALSE 9231
// JMMGirlVeh := IsInUnit ( Lisa ) ;
9216: LD_ADDR_VAR 0 1
9220: PUSH
9221: LD_EXP 11
9225: PPUSH
9226: CALL_OW 310
9230: ST_TO_ADDR
// if JMMGirl = 3 then
9231: LD_EXP 2
9235: PUSH
9236: LD_INT 3
9238: EQUAL
9239: IFFALSE 9256
// JMMGirlVeh := IsInUnit ( Connie ) ;
9241: LD_ADDR_VAR 0 1
9245: PUSH
9246: LD_EXP 12
9250: PPUSH
9251: CALL_OW 310
9255: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9256: LD_EXP 8
9260: PPUSH
9261: CALL_OW 310
9265: PPUSH
9266: LD_EXP 10
9270: PPUSH
9271: CALL_OW 310
9275: PPUSH
9276: CALL_OW 296
9280: PUSH
9281: LD_INT 10
9283: LESS
9284: PUSH
9285: LD_EXP 8
9289: PPUSH
9290: CALL_OW 310
9294: PPUSH
9295: LD_EXP 11
9299: PPUSH
9300: CALL_OW 310
9304: PPUSH
9305: CALL_OW 296
9309: PUSH
9310: LD_INT 10
9312: LESS
9313: OR
9314: PUSH
9315: LD_EXP 8
9319: PPUSH
9320: CALL_OW 310
9324: PPUSH
9325: LD_EXP 12
9329: PPUSH
9330: CALL_OW 310
9334: PPUSH
9335: CALL_OW 296
9339: PUSH
9340: LD_INT 10
9342: LESS
9343: OR
9344: IFFALSE 9441
// begin case Query ( Q3b ) of 1 :
9346: LD_STRING Q3b
9348: PPUSH
9349: CALL_OW 97
9353: PUSH
9354: LD_INT 1
9356: DOUBLE
9357: EQUAL
9358: IFTRUE 9362
9360: GO 9438
9362: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9363: LD_VAR 0 1
9367: PPUSH
9368: CALL_OW 265
9372: PUSH
9373: EMPTY
9374: LIST
9375: PUSH
9376: LD_VAR 0 1
9380: PPUSH
9381: CALL_OW 262
9385: PUSH
9386: EMPTY
9387: LIST
9388: PUSH
9389: LD_VAR 0 1
9393: PPUSH
9394: CALL_OW 263
9398: PUSH
9399: EMPTY
9400: LIST
9401: PUSH
9402: LD_VAR 0 1
9406: PPUSH
9407: CALL_OW 264
9411: PUSH
9412: EMPTY
9413: LIST
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: PPUSH
9421: LD_STRING 14_JMMGirlVeh_1
9423: PPUSH
9424: CALL_OW 39
// FinishMission ( false ) ;
9428: LD_INT 0
9430: PPUSH
9431: CALL 9664 0 1
// disable ;
9435: DISABLE
// end ; end ;
9436: GO 9439
9438: POP
// end else
9439: GO 9521
// begin if JMMGirl = 1 then
9441: LD_EXP 2
9445: PUSH
9446: LD_INT 1
9448: EQUAL
9449: IFFALSE 9466
// dec := Query ( Q3bJ ) else
9451: LD_ADDR_VAR 0 2
9455: PUSH
9456: LD_STRING Q3bJ
9458: PPUSH
9459: CALL_OW 97
9463: ST_TO_ADDR
9464: GO 9504
// if JMMGirl = 2 then
9466: LD_EXP 2
9470: PUSH
9471: LD_INT 2
9473: EQUAL
9474: IFFALSE 9491
// dec := Query ( Q3bL ) else
9476: LD_ADDR_VAR 0 2
9480: PUSH
9481: LD_STRING Q3bL
9483: PPUSH
9484: CALL_OW 97
9488: ST_TO_ADDR
9489: GO 9504
// dec := Query ( Q3bX ) ;
9491: LD_ADDR_VAR 0 2
9495: PUSH
9496: LD_STRING Q3bX
9498: PPUSH
9499: CALL_OW 97
9503: ST_TO_ADDR
// if dec = 1 then
9504: LD_VAR 0 2
9508: PUSH
9509: LD_INT 1
9511: EQUAL
9512: IFFALSE 9521
// FinishMission ( false ) ;
9514: LD_INT 0
9516: PPUSH
9517: CALL 9664 0 1
// end ; end ;
9521: PPOPN 2
9523: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9524: LD_INT 22
9526: PUSH
9527: LD_INT 3
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PUSH
9534: LD_INT 21
9536: PUSH
9537: LD_INT 1
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PPUSH
9548: CALL_OW 69
9552: PUSH
9553: LD_INT 0
9555: EQUAL
9556: IFFALSE 9663
9558: GO 9560
9560: DISABLE
// begin DialogueOn ;
9561: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9565: LD_EXP 8
9569: PPUSH
9570: LD_STRING DEnd-JMM-1
9572: PPUSH
9573: CALL_OW 88
// case JMMGirl of 1 :
9577: LD_EXP 2
9581: PUSH
9582: LD_INT 1
9584: DOUBLE
9585: EQUAL
9586: IFTRUE 9590
9588: GO 9605
9590: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9591: LD_EXP 10
9595: PPUSH
9596: LD_STRING DEnd-Joan-1
9598: PPUSH
9599: CALL_OW 88
9603: GO 9652
9605: LD_INT 2
9607: DOUBLE
9608: EQUAL
9609: IFTRUE 9613
9611: GO 9628
9613: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9614: LD_EXP 11
9618: PPUSH
9619: LD_STRING DEnd-Lisa-1
9621: PPUSH
9622: CALL_OW 88
9626: GO 9652
9628: LD_INT 3
9630: DOUBLE
9631: EQUAL
9632: IFTRUE 9636
9634: GO 9651
9636: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9637: LD_EXP 12
9641: PPUSH
9642: LD_STRING DEnd-Con-1
9644: PPUSH
9645: CALL_OW 88
9649: GO 9652
9651: POP
// DialogueOff ;
9652: CALL_OW 7
// FinishMission ( false ) ;
9656: LD_INT 0
9658: PPUSH
9659: CALL 9664 0 1
// end ;
9663: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9664: LD_INT 0
9666: PPUSH
9667: PPUSH
9668: PPUSH
9669: PPUSH
9670: PPUSH
9671: PPUSH
// m1 := false ;
9672: LD_ADDR_VAR 0 4
9676: PUSH
9677: LD_INT 0
9679: ST_TO_ADDR
// m2 := false ;
9680: LD_ADDR_VAR 0 5
9684: PUSH
9685: LD_INT 0
9687: ST_TO_ADDR
// m3 := false ;
9688: LD_ADDR_VAR 0 6
9692: PUSH
9693: LD_INT 0
9695: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
9696: LD_ADDR_VAR 0 7
9700: PUSH
9701: LD_INT 22
9703: PUSH
9704: LD_INT 3
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PUSH
9711: LD_INT 21
9713: PUSH
9714: LD_INT 1
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PPUSH
9725: CALL_OW 69
9729: PUSH
9730: LD_INT 0
9732: EQUAL
9733: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9734: LD_EXP 8
9738: PPUSH
9739: LD_STRING 14_JMM
9741: PPUSH
9742: CALL_OW 38
// if tick <= 50 50$00 then
9746: LD_OWVAR 1
9750: PUSH
9751: LD_INT 105000
9753: LESSEQUAL
9754: IFFALSE 9763
// SetAchievement ( ACH_ASPEED_14 ) ;
9756: LD_STRING ACH_ASPEED_14
9758: PPUSH
9759: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9763: LD_EXP 8
9767: PPUSH
9768: CALL_OW 310
9772: PUSH
9773: LD_EXP 8
9777: PPUSH
9778: CALL_OW 310
9782: PPUSH
9783: CALL_OW 247
9787: PUSH
9788: LD_INT 2
9790: EQUAL
9791: AND
9792: IFFALSE 9874
// begin JMMNewVeh = IsInUnit ( JMM ) ;
9794: LD_ADDR_VAR 0 3
9798: PUSH
9799: LD_EXP 8
9803: PPUSH
9804: CALL_OW 310
9808: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
9809: LD_VAR 0 3
9813: PPUSH
9814: CALL_OW 265
9818: PUSH
9819: EMPTY
9820: LIST
9821: PUSH
9822: LD_VAR 0 3
9826: PPUSH
9827: CALL_OW 262
9831: PUSH
9832: EMPTY
9833: LIST
9834: PUSH
9835: LD_VAR 0 3
9839: PPUSH
9840: CALL_OW 263
9844: PUSH
9845: EMPTY
9846: LIST
9847: PUSH
9848: LD_VAR 0 3
9852: PPUSH
9853: CALL_OW 264
9857: PUSH
9858: EMPTY
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: PPUSH
9867: LD_STRING 14_JMMVeh_1
9869: PPUSH
9870: CALL_OW 39
// end ; if fastEnd then
9874: LD_VAR 0 1
9878: IFFALSE 9969
// begin AddMedal ( fastend , - 1 ) ;
9880: LD_STRING fastend
9882: PPUSH
9883: LD_INT 1
9885: NEG
9886: PPUSH
9887: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9891: LD_STRING fastend
9893: PPUSH
9894: LD_INT 1
9896: NEG
9897: PPUSH
9898: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
9902: LD_STRING fastend
9904: PPUSH
9905: LD_INT 1
9907: NEG
9908: PPUSH
9909: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9913: LD_EXP 2
9917: PPUSH
9918: LD_STRING 14_JMMGirl_1
9920: PPUSH
9921: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
9925: LD_INT 0
9927: PPUSH
9928: LD_STRING 14_JMMGirlStatus_1
9930: PPUSH
9931: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
9935: LD_INT 0
9937: PPUSH
9938: LD_STRING 14_KappaStatus_1
9940: PPUSH
9941: CALL_OW 39
// GiveMedals ( Eliminate ) ;
9945: LD_STRING Eliminate
9947: PPUSH
9948: CALL_OW 102
// RewardPeople ( JMM ) ;
9952: LD_EXP 8
9956: PPUSH
9957: CALL_OW 43
// YouWin ;
9961: CALL_OW 103
// exit ;
9965: GO 10615
// end else
9967: GO 10508
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
9969: LD_EXP 2
9973: PPUSH
9974: LD_STRING 14_JMMGirl_1
9976: PPUSH
9977: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
9981: LD_VAR 0 7
9985: PPUSH
9986: LD_STRING 14_KappaStatus_1
9988: PPUSH
9989: CALL_OW 39
// case JMMGirl of 1 :
9993: LD_EXP 2
9997: PUSH
9998: LD_INT 1
10000: DOUBLE
10001: EQUAL
10002: IFTRUE 10006
10004: GO 10134
10006: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10007: LD_EXP 10
10011: PPUSH
10012: CALL_OW 302
10016: PUSH
10017: LD_EXP 10
10021: PPUSH
10022: CALL_OW 255
10026: PUSH
10027: LD_INT 1
10029: EQUAL
10030: AND
10031: PUSH
10032: LD_VAR 0 7
10036: PUSH
10037: LD_EXP 8
10041: PPUSH
10042: CALL_OW 310
10046: PPUSH
10047: LD_EXP 10
10051: PPUSH
10052: CALL_OW 310
10056: PPUSH
10057: CALL_OW 296
10061: PUSH
10062: LD_INT 10
10064: LESS
10065: OR
10066: AND
10067: IFFALSE 10111
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10069: LD_INT 1
10071: PPUSH
10072: LD_STRING 14_JMMGirlStatus_1
10074: PPUSH
10075: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10079: LD_EXP 10
10083: PPUSH
10084: LD_STRING 14_Joan
10086: PPUSH
10087: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10091: LD_STRING protect
10093: PPUSH
10094: LD_INT 1
10096: PPUSH
10097: CALL_OW 101
// m1 := true ;
10101: LD_ADDR_VAR 0 4
10105: PUSH
10106: LD_INT 1
10108: ST_TO_ADDR
// end else
10109: GO 10132
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10111: LD_INT 0
10113: PPUSH
10114: LD_STRING 14_JMMGirlStatus_1
10116: PPUSH
10117: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10121: LD_STRING protect
10123: PPUSH
10124: LD_INT 1
10126: NEG
10127: PPUSH
10128: CALL_OW 101
// end ; end ; 2 :
10132: GO 10407
10134: LD_INT 2
10136: DOUBLE
10137: EQUAL
10138: IFTRUE 10142
10140: GO 10270
10142: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10143: LD_EXP 11
10147: PPUSH
10148: CALL_OW 302
10152: PUSH
10153: LD_EXP 11
10157: PPUSH
10158: CALL_OW 255
10162: PUSH
10163: LD_INT 1
10165: EQUAL
10166: AND
10167: PUSH
10168: LD_VAR 0 7
10172: PUSH
10173: LD_EXP 8
10177: PPUSH
10178: CALL_OW 310
10182: PPUSH
10183: LD_EXP 11
10187: PPUSH
10188: CALL_OW 310
10192: PPUSH
10193: CALL_OW 296
10197: PUSH
10198: LD_INT 10
10200: LESS
10201: OR
10202: AND
10203: IFFALSE 10247
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10205: LD_INT 1
10207: PPUSH
10208: LD_STRING 14_JMMGirlStatus_1
10210: PPUSH
10211: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10215: LD_EXP 11
10219: PPUSH
10220: LD_STRING 14_Lisa
10222: PPUSH
10223: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10227: LD_STRING protect
10229: PPUSH
10230: LD_INT 1
10232: PPUSH
10233: CALL_OW 101
// m1 := true ;
10237: LD_ADDR_VAR 0 4
10241: PUSH
10242: LD_INT 1
10244: ST_TO_ADDR
// end else
10245: GO 10268
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10247: LD_INT 0
10249: PPUSH
10250: LD_STRING 14_JMMGirlStatus_1
10252: PPUSH
10253: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10257: LD_STRING protect
10259: PPUSH
10260: LD_INT 2
10262: NEG
10263: PPUSH
10264: CALL_OW 101
// end ; end ; 3 :
10268: GO 10407
10270: LD_INT 3
10272: DOUBLE
10273: EQUAL
10274: IFTRUE 10278
10276: GO 10406
10278: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10279: LD_EXP 12
10283: PPUSH
10284: CALL_OW 302
10288: PUSH
10289: LD_EXP 12
10293: PPUSH
10294: CALL_OW 255
10298: PUSH
10299: LD_INT 1
10301: EQUAL
10302: AND
10303: PUSH
10304: LD_VAR 0 7
10308: PUSH
10309: LD_EXP 8
10313: PPUSH
10314: CALL_OW 310
10318: PPUSH
10319: LD_EXP 12
10323: PPUSH
10324: CALL_OW 310
10328: PPUSH
10329: CALL_OW 296
10333: PUSH
10334: LD_INT 10
10336: LESS
10337: OR
10338: AND
10339: IFFALSE 10383
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10341: LD_INT 1
10343: PPUSH
10344: LD_STRING 14_JMMGirlStatus_1
10346: PPUSH
10347: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10351: LD_EXP 12
10355: PPUSH
10356: LD_STRING 14_Connie
10358: PPUSH
10359: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10363: LD_STRING protect
10365: PPUSH
10366: LD_INT 1
10368: PPUSH
10369: CALL_OW 101
// m1 := true ;
10373: LD_ADDR_VAR 0 4
10377: PUSH
10378: LD_INT 1
10380: ST_TO_ADDR
// end else
10381: GO 10404
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10383: LD_INT 0
10385: PPUSH
10386: LD_STRING 14_JMMGirlStatus_1
10388: PPUSH
10389: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10393: LD_STRING protect
10395: PPUSH
10396: LD_INT 3
10398: NEG
10399: PPUSH
10400: CALL_OW 101
// end ; end ; end ;
10404: GO 10407
10406: POP
// if amLaserCounter >= 2 then
10407: LD_EXP 7
10411: PUSH
10412: LD_INT 2
10414: GREATEREQUAL
10415: IFFALSE 10437
// begin AddMedal ( double , 1 ) ;
10417: LD_STRING double
10419: PPUSH
10420: LD_INT 1
10422: PPUSH
10423: CALL_OW 101
// m2 := true ;
10427: LD_ADDR_VAR 0 5
10431: PUSH
10432: LD_INT 1
10434: ST_TO_ADDR
// end else
10435: GO 10471
// begin if amLaserCounter = 1 then
10437: LD_EXP 7
10441: PUSH
10442: LD_INT 1
10444: EQUAL
10445: IFFALSE 10460
// AddMedal ( double , - 2 ) else
10447: LD_STRING double
10449: PPUSH
10450: LD_INT 2
10452: NEG
10453: PPUSH
10454: CALL_OW 101
10458: GO 10471
// AddMedal ( double , - 1 ) ;
10460: LD_STRING double
10462: PPUSH
10463: LD_INT 1
10465: NEG
10466: PPUSH
10467: CALL_OW 101
// end ; if ruEliminated then
10471: LD_VAR 0 7
10475: IFFALSE 10497
// begin AddMedal ( base , 1 ) ;
10477: LD_STRING base
10479: PPUSH
10480: LD_INT 1
10482: PPUSH
10483: CALL_OW 101
// m3 := true ;
10487: LD_ADDR_VAR 0 6
10491: PUSH
10492: LD_INT 1
10494: ST_TO_ADDR
// end else
10495: GO 10508
// AddMedal ( base , - 1 ) ;
10497: LD_STRING base
10499: PPUSH
10500: LD_INT 1
10502: NEG
10503: PPUSH
10504: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10508: LD_VAR 0 4
10512: PUSH
10513: LD_VAR 0 5
10517: AND
10518: PUSH
10519: LD_VAR 0 6
10523: AND
10524: PUSH
10525: LD_OWVAR 67
10529: PUSH
10530: LD_INT 3
10532: GREATEREQUAL
10533: AND
10534: IFFALSE 10546
// SetAchievementEX ( ACH_AMER , 14 ) ;
10536: LD_STRING ACH_AMER
10538: PPUSH
10539: LD_INT 14
10541: PPUSH
10542: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10546: LD_STRING Eliminate
10548: PPUSH
10549: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10553: LD_INT 22
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 3
10565: PUSH
10566: LD_INT 25
10568: PUSH
10569: LD_INT 12
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PUSH
10580: LD_INT 3
10582: PUSH
10583: LD_INT 25
10585: PUSH
10586: LD_INT 16
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: LIST
10601: PPUSH
10602: CALL_OW 69
10606: PPUSH
10607: CALL_OW 43
// YouWin ;
10611: CALL_OW 103
// end ; end_of_file
10615: LD_VAR 0 2
10619: RET
// export function CreateNature ; var i , un ; begin
10620: LD_INT 0
10622: PPUSH
10623: PPUSH
10624: PPUSH
// PrepareEnchidna ;
10625: CALL 64951 0 0
// for i := 1 to 3 do
10629: LD_ADDR_VAR 0 2
10633: PUSH
10634: DOUBLE
10635: LD_INT 1
10637: DEC
10638: ST_TO_ADDR
10639: LD_INT 3
10641: PUSH
10642: FOR_TO
10643: IFFALSE 10692
// begin un := CreateHuman ;
10645: LD_ADDR_VAR 0 3
10649: PUSH
10650: CALL_OW 44
10654: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10655: LD_VAR 0 3
10659: PPUSH
10660: LD_INT 0
10662: PPUSH
10663: LD_INT 5
10665: PPUSH
10666: CALL_OW 12
10670: PPUSH
10671: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10675: LD_VAR 0 3
10679: PPUSH
10680: LD_INT 9
10682: PPUSH
10683: LD_INT 0
10685: PPUSH
10686: CALL_OW 49
// end ;
10690: GO 10642
10692: POP
10693: POP
// PrepareHorse ;
10694: CALL 65111 0 0
// for i := 1 to 2 do
10698: LD_ADDR_VAR 0 2
10702: PUSH
10703: DOUBLE
10704: LD_INT 1
10706: DEC
10707: ST_TO_ADDR
10708: LD_INT 2
10710: PUSH
10711: FOR_TO
10712: IFFALSE 10761
// begin un := CreateHuman ;
10714: LD_ADDR_VAR 0 3
10718: PUSH
10719: CALL_OW 44
10723: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10724: LD_VAR 0 3
10728: PPUSH
10729: LD_INT 0
10731: PPUSH
10732: LD_INT 5
10734: PPUSH
10735: CALL_OW 12
10739: PPUSH
10740: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10744: LD_VAR 0 3
10748: PPUSH
10749: LD_INT 9
10751: PPUSH
10752: LD_INT 0
10754: PPUSH
10755: CALL_OW 49
// end ;
10759: GO 10711
10761: POP
10762: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
10763: LD_ADDR_VAR 0 2
10767: PUSH
10768: DOUBLE
10769: LD_INT 1
10771: DEC
10772: ST_TO_ADDR
10773: LD_INT 4
10775: PUSH
10776: LD_INT 5
10778: PUSH
10779: LD_INT 5
10781: PUSH
10782: LD_INT 5
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: PUSH
10791: LD_OWVAR 67
10795: ARRAY
10796: PUSH
10797: FOR_TO
10798: IFFALSE 10862
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
10800: LD_INT 0
10802: PPUSH
10803: LD_INT 5
10805: PPUSH
10806: CALL_OW 12
10810: PPUSH
10811: CALL 64782 0 1
// un := CreateHuman ;
10815: LD_ADDR_VAR 0 3
10819: PUSH
10820: CALL_OW 44
10824: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10825: LD_VAR 0 3
10829: PPUSH
10830: LD_INT 0
10832: PPUSH
10833: LD_INT 5
10835: PPUSH
10836: CALL_OW 12
10840: PPUSH
10841: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
10845: LD_VAR 0 3
10849: PPUSH
10850: LD_INT 8
10852: PPUSH
10853: LD_INT 0
10855: PPUSH
10856: CALL_OW 49
// end ;
10860: GO 10797
10862: POP
10863: POP
// PrepareFish ;
10864: CALL 65031 0 0
// for i := 1 to 2 do
10868: LD_ADDR_VAR 0 2
10872: PUSH
10873: DOUBLE
10874: LD_INT 1
10876: DEC
10877: ST_TO_ADDR
10878: LD_INT 2
10880: PUSH
10881: FOR_TO
10882: IFFALSE 10931
// begin un := CreateHuman ;
10884: LD_ADDR_VAR 0 3
10888: PUSH
10889: CALL_OW 44
10893: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10894: LD_VAR 0 3
10898: PPUSH
10899: LD_INT 0
10901: PPUSH
10902: LD_INT 5
10904: PPUSH
10905: CALL_OW 12
10909: PPUSH
10910: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
10914: LD_VAR 0 3
10918: PPUSH
10919: LD_INT 6
10921: PPUSH
10922: LD_INT 0
10924: PPUSH
10925: CALL_OW 49
// end ;
10929: GO 10881
10931: POP
10932: POP
// PrepareFrog ;
10933: CALL 64991 0 0
// for i := 1 to 2 do
10937: LD_ADDR_VAR 0 2
10941: PUSH
10942: DOUBLE
10943: LD_INT 1
10945: DEC
10946: ST_TO_ADDR
10947: LD_INT 2
10949: PUSH
10950: FOR_TO
10951: IFFALSE 11000
// begin un := CreateHuman ;
10953: LD_ADDR_VAR 0 3
10957: PUSH
10958: CALL_OW 44
10962: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10963: LD_VAR 0 3
10967: PPUSH
10968: LD_INT 0
10970: PPUSH
10971: LD_INT 5
10973: PPUSH
10974: CALL_OW 12
10978: PPUSH
10979: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
10983: LD_VAR 0 3
10987: PPUSH
10988: LD_INT 7
10990: PPUSH
10991: LD_INT 0
10993: PPUSH
10994: CALL_OW 49
// end ;
10998: GO 10950
11000: POP
11001: POP
// PrepareMastodont ;
11002: CALL 65151 0 0
// un := CreateVehicle ;
11006: LD_ADDR_VAR 0 3
11010: PUSH
11011: CALL_OW 45
11015: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
11016: LD_VAR 0 3
11020: PPUSH
11021: LD_INT 166
11023: PPUSH
11024: LD_INT 134
11026: PPUSH
11027: LD_INT 1
11029: PPUSH
11030: LD_INT 0
11032: PPUSH
11033: CALL 70649 0 5
// end ; end_of_file
11037: LD_VAR 0 1
11041: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
11042: LD_INT 14
11044: PPUSH
11045: CALL_OW 435
11049: PUSH
11050: LD_INT 20
11052: LESS
11053: IFFALSE 11095
11055: GO 11057
11057: DISABLE
// begin enable ;
11058: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11059: LD_INT 35
11061: PPUSH
11062: LD_INT 735
11064: PPUSH
11065: CALL_OW 12
11069: PPUSH
11070: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
11074: LD_INT 1
11076: PPUSH
11077: LD_INT 5
11079: PPUSH
11080: CALL_OW 12
11084: PPUSH
11085: LD_INT 14
11087: PPUSH
11088: LD_INT 1
11090: PPUSH
11091: CALL_OW 55
// end ;
11095: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11096: LD_INT 13
11098: PPUSH
11099: CALL_OW 435
11103: PUSH
11104: LD_INT 30
11106: LESS
11107: IFFALSE 11149
11109: GO 11111
11111: DISABLE
// begin enable ;
11112: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11113: LD_INT 35
11115: PPUSH
11116: LD_INT 735
11118: PPUSH
11119: CALL_OW 12
11123: PPUSH
11124: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
11128: LD_INT 1
11130: PPUSH
11131: LD_INT 5
11133: PPUSH
11134: CALL_OW 12
11138: PPUSH
11139: LD_INT 13
11141: PPUSH
11142: LD_INT 1
11144: PPUSH
11145: CALL_OW 55
// end ;
11149: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11150: LD_INT 13
11152: PPUSH
11153: CALL_OW 435
11157: PUSH
11158: LD_INT 30
11160: LESS
11161: IFFALSE 11194
11163: GO 11165
11165: DISABLE
// begin enable ;
11166: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
11167: LD_INT 1
11169: PPUSH
11170: LD_INT 5
11172: PPUSH
11173: CALL_OW 12
11177: PPUSH
11178: LD_INT 133
11180: PPUSH
11181: LD_INT 122
11183: PPUSH
11184: LD_INT 20
11186: PPUSH
11187: LD_INT 1
11189: PPUSH
11190: CALL_OW 56
// end ; end_of_file end_of_file
11194: END
// every 0 0$1 do
11195: GO 11197
11197: DISABLE
// begin enable ;
11198: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11199: LD_STRING updateTimer(
11201: PUSH
11202: LD_OWVAR 1
11206: STR
11207: PUSH
11208: LD_STRING );
11210: STR
11211: PPUSH
11212: CALL_OW 559
// end ;
11216: END
// export function SOS_MapStart ( ) ; begin
11217: LD_INT 0
11219: PPUSH
// if streamModeActive then
11220: LD_EXP 21
11224: IFFALSE 11233
// DefineStreamItems ( true ) ;
11226: LD_INT 1
11228: PPUSH
11229: CALL 12887 0 1
// UpdateFactoryWaypoints ( ) ;
11233: CALL 25748 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11237: CALL 26005 0 0
// end ;
11241: LD_VAR 0 1
11245: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11246: LD_INT 0
11248: PPUSH
// if p2 = 100 then
11249: LD_VAR 0 2
11253: PUSH
11254: LD_INT 100
11256: EQUAL
11257: IFFALSE 12260
// begin if not StreamModeActive then
11259: LD_EXP 21
11263: NOT
11264: IFFALSE 11274
// StreamModeActive := true ;
11266: LD_ADDR_EXP 21
11270: PUSH
11271: LD_INT 1
11273: ST_TO_ADDR
// if p3 = 0 then
11274: LD_VAR 0 3
11278: PUSH
11279: LD_INT 0
11281: EQUAL
11282: IFFALSE 11288
// InitStreamMode ;
11284: CALL 12423 0 0
// if p3 = 1 then
11288: LD_VAR 0 3
11292: PUSH
11293: LD_INT 1
11295: EQUAL
11296: IFFALSE 11306
// sRocket := true ;
11298: LD_ADDR_EXP 26
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
// if p3 = 2 then
11306: LD_VAR 0 3
11310: PUSH
11311: LD_INT 2
11313: EQUAL
11314: IFFALSE 11324
// sSpeed := true ;
11316: LD_ADDR_EXP 25
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
// if p3 = 3 then
11324: LD_VAR 0 3
11328: PUSH
11329: LD_INT 3
11331: EQUAL
11332: IFFALSE 11342
// sEngine := true ;
11334: LD_ADDR_EXP 27
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// if p3 = 4 then
11342: LD_VAR 0 3
11346: PUSH
11347: LD_INT 4
11349: EQUAL
11350: IFFALSE 11360
// sSpec := true ;
11352: LD_ADDR_EXP 24
11356: PUSH
11357: LD_INT 1
11359: ST_TO_ADDR
// if p3 = 5 then
11360: LD_VAR 0 3
11364: PUSH
11365: LD_INT 5
11367: EQUAL
11368: IFFALSE 11378
// sLevel := true ;
11370: LD_ADDR_EXP 28
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// if p3 = 6 then
11378: LD_VAR 0 3
11382: PUSH
11383: LD_INT 6
11385: EQUAL
11386: IFFALSE 11396
// sArmoury := true ;
11388: LD_ADDR_EXP 29
11392: PUSH
11393: LD_INT 1
11395: ST_TO_ADDR
// if p3 = 7 then
11396: LD_VAR 0 3
11400: PUSH
11401: LD_INT 7
11403: EQUAL
11404: IFFALSE 11414
// sRadar := true ;
11406: LD_ADDR_EXP 30
11410: PUSH
11411: LD_INT 1
11413: ST_TO_ADDR
// if p3 = 8 then
11414: LD_VAR 0 3
11418: PUSH
11419: LD_INT 8
11421: EQUAL
11422: IFFALSE 11432
// sBunker := true ;
11424: LD_ADDR_EXP 31
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// if p3 = 9 then
11432: LD_VAR 0 3
11436: PUSH
11437: LD_INT 9
11439: EQUAL
11440: IFFALSE 11450
// sHack := true ;
11442: LD_ADDR_EXP 32
11446: PUSH
11447: LD_INT 1
11449: ST_TO_ADDR
// if p3 = 10 then
11450: LD_VAR 0 3
11454: PUSH
11455: LD_INT 10
11457: EQUAL
11458: IFFALSE 11468
// sFire := true ;
11460: LD_ADDR_EXP 33
11464: PUSH
11465: LD_INT 1
11467: ST_TO_ADDR
// if p3 = 11 then
11468: LD_VAR 0 3
11472: PUSH
11473: LD_INT 11
11475: EQUAL
11476: IFFALSE 11486
// sRefresh := true ;
11478: LD_ADDR_EXP 34
11482: PUSH
11483: LD_INT 1
11485: ST_TO_ADDR
// if p3 = 12 then
11486: LD_VAR 0 3
11490: PUSH
11491: LD_INT 12
11493: EQUAL
11494: IFFALSE 11504
// sExp := true ;
11496: LD_ADDR_EXP 35
11500: PUSH
11501: LD_INT 1
11503: ST_TO_ADDR
// if p3 = 13 then
11504: LD_VAR 0 3
11508: PUSH
11509: LD_INT 13
11511: EQUAL
11512: IFFALSE 11522
// sDepot := true ;
11514: LD_ADDR_EXP 36
11518: PUSH
11519: LD_INT 1
11521: ST_TO_ADDR
// if p3 = 14 then
11522: LD_VAR 0 3
11526: PUSH
11527: LD_INT 14
11529: EQUAL
11530: IFFALSE 11540
// sFlag := true ;
11532: LD_ADDR_EXP 37
11536: PUSH
11537: LD_INT 1
11539: ST_TO_ADDR
// if p3 = 15 then
11540: LD_VAR 0 3
11544: PUSH
11545: LD_INT 15
11547: EQUAL
11548: IFFALSE 11558
// sKamikadze := true ;
11550: LD_ADDR_EXP 45
11554: PUSH
11555: LD_INT 1
11557: ST_TO_ADDR
// if p3 = 16 then
11558: LD_VAR 0 3
11562: PUSH
11563: LD_INT 16
11565: EQUAL
11566: IFFALSE 11576
// sTroll := true ;
11568: LD_ADDR_EXP 46
11572: PUSH
11573: LD_INT 1
11575: ST_TO_ADDR
// if p3 = 17 then
11576: LD_VAR 0 3
11580: PUSH
11581: LD_INT 17
11583: EQUAL
11584: IFFALSE 11594
// sSlow := true ;
11586: LD_ADDR_EXP 47
11590: PUSH
11591: LD_INT 1
11593: ST_TO_ADDR
// if p3 = 18 then
11594: LD_VAR 0 3
11598: PUSH
11599: LD_INT 18
11601: EQUAL
11602: IFFALSE 11612
// sLack := true ;
11604: LD_ADDR_EXP 48
11608: PUSH
11609: LD_INT 1
11611: ST_TO_ADDR
// if p3 = 19 then
11612: LD_VAR 0 3
11616: PUSH
11617: LD_INT 19
11619: EQUAL
11620: IFFALSE 11630
// sTank := true ;
11622: LD_ADDR_EXP 50
11626: PUSH
11627: LD_INT 1
11629: ST_TO_ADDR
// if p3 = 20 then
11630: LD_VAR 0 3
11634: PUSH
11635: LD_INT 20
11637: EQUAL
11638: IFFALSE 11648
// sRemote := true ;
11640: LD_ADDR_EXP 51
11644: PUSH
11645: LD_INT 1
11647: ST_TO_ADDR
// if p3 = 21 then
11648: LD_VAR 0 3
11652: PUSH
11653: LD_INT 21
11655: EQUAL
11656: IFFALSE 11666
// sPowell := true ;
11658: LD_ADDR_EXP 52
11662: PUSH
11663: LD_INT 1
11665: ST_TO_ADDR
// if p3 = 22 then
11666: LD_VAR 0 3
11670: PUSH
11671: LD_INT 22
11673: EQUAL
11674: IFFALSE 11684
// sTeleport := true ;
11676: LD_ADDR_EXP 55
11680: PUSH
11681: LD_INT 1
11683: ST_TO_ADDR
// if p3 = 23 then
11684: LD_VAR 0 3
11688: PUSH
11689: LD_INT 23
11691: EQUAL
11692: IFFALSE 11702
// sOilTower := true ;
11694: LD_ADDR_EXP 57
11698: PUSH
11699: LD_INT 1
11701: ST_TO_ADDR
// if p3 = 24 then
11702: LD_VAR 0 3
11706: PUSH
11707: LD_INT 24
11709: EQUAL
11710: IFFALSE 11720
// sShovel := true ;
11712: LD_ADDR_EXP 58
11716: PUSH
11717: LD_INT 1
11719: ST_TO_ADDR
// if p3 = 25 then
11720: LD_VAR 0 3
11724: PUSH
11725: LD_INT 25
11727: EQUAL
11728: IFFALSE 11738
// sSheik := true ;
11730: LD_ADDR_EXP 59
11734: PUSH
11735: LD_INT 1
11737: ST_TO_ADDR
// if p3 = 26 then
11738: LD_VAR 0 3
11742: PUSH
11743: LD_INT 26
11745: EQUAL
11746: IFFALSE 11756
// sEarthquake := true ;
11748: LD_ADDR_EXP 61
11752: PUSH
11753: LD_INT 1
11755: ST_TO_ADDR
// if p3 = 27 then
11756: LD_VAR 0 3
11760: PUSH
11761: LD_INT 27
11763: EQUAL
11764: IFFALSE 11774
// sAI := true ;
11766: LD_ADDR_EXP 62
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
// if p3 = 28 then
11774: LD_VAR 0 3
11778: PUSH
11779: LD_INT 28
11781: EQUAL
11782: IFFALSE 11792
// sCargo := true ;
11784: LD_ADDR_EXP 65
11788: PUSH
11789: LD_INT 1
11791: ST_TO_ADDR
// if p3 = 29 then
11792: LD_VAR 0 3
11796: PUSH
11797: LD_INT 29
11799: EQUAL
11800: IFFALSE 11810
// sDLaser := true ;
11802: LD_ADDR_EXP 66
11806: PUSH
11807: LD_INT 1
11809: ST_TO_ADDR
// if p3 = 30 then
11810: LD_VAR 0 3
11814: PUSH
11815: LD_INT 30
11817: EQUAL
11818: IFFALSE 11828
// sExchange := true ;
11820: LD_ADDR_EXP 67
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// if p3 = 31 then
11828: LD_VAR 0 3
11832: PUSH
11833: LD_INT 31
11835: EQUAL
11836: IFFALSE 11846
// sFac := true ;
11838: LD_ADDR_EXP 68
11842: PUSH
11843: LD_INT 1
11845: ST_TO_ADDR
// if p3 = 32 then
11846: LD_VAR 0 3
11850: PUSH
11851: LD_INT 32
11853: EQUAL
11854: IFFALSE 11864
// sPower := true ;
11856: LD_ADDR_EXP 69
11860: PUSH
11861: LD_INT 1
11863: ST_TO_ADDR
// if p3 = 33 then
11864: LD_VAR 0 3
11868: PUSH
11869: LD_INT 33
11871: EQUAL
11872: IFFALSE 11882
// sRandom := true ;
11874: LD_ADDR_EXP 70
11878: PUSH
11879: LD_INT 1
11881: ST_TO_ADDR
// if p3 = 34 then
11882: LD_VAR 0 3
11886: PUSH
11887: LD_INT 34
11889: EQUAL
11890: IFFALSE 11900
// sShield := true ;
11892: LD_ADDR_EXP 71
11896: PUSH
11897: LD_INT 1
11899: ST_TO_ADDR
// if p3 = 35 then
11900: LD_VAR 0 3
11904: PUSH
11905: LD_INT 35
11907: EQUAL
11908: IFFALSE 11918
// sTime := true ;
11910: LD_ADDR_EXP 72
11914: PUSH
11915: LD_INT 1
11917: ST_TO_ADDR
// if p3 = 36 then
11918: LD_VAR 0 3
11922: PUSH
11923: LD_INT 36
11925: EQUAL
11926: IFFALSE 11936
// sTools := true ;
11928: LD_ADDR_EXP 73
11932: PUSH
11933: LD_INT 1
11935: ST_TO_ADDR
// if p3 = 101 then
11936: LD_VAR 0 3
11940: PUSH
11941: LD_INT 101
11943: EQUAL
11944: IFFALSE 11954
// sSold := true ;
11946: LD_ADDR_EXP 38
11950: PUSH
11951: LD_INT 1
11953: ST_TO_ADDR
// if p3 = 102 then
11954: LD_VAR 0 3
11958: PUSH
11959: LD_INT 102
11961: EQUAL
11962: IFFALSE 11972
// sDiff := true ;
11964: LD_ADDR_EXP 39
11968: PUSH
11969: LD_INT 1
11971: ST_TO_ADDR
// if p3 = 103 then
11972: LD_VAR 0 3
11976: PUSH
11977: LD_INT 103
11979: EQUAL
11980: IFFALSE 11990
// sFog := true ;
11982: LD_ADDR_EXP 42
11986: PUSH
11987: LD_INT 1
11989: ST_TO_ADDR
// if p3 = 104 then
11990: LD_VAR 0 3
11994: PUSH
11995: LD_INT 104
11997: EQUAL
11998: IFFALSE 12008
// sReset := true ;
12000: LD_ADDR_EXP 43
12004: PUSH
12005: LD_INT 1
12007: ST_TO_ADDR
// if p3 = 105 then
12008: LD_VAR 0 3
12012: PUSH
12013: LD_INT 105
12015: EQUAL
12016: IFFALSE 12026
// sSun := true ;
12018: LD_ADDR_EXP 44
12022: PUSH
12023: LD_INT 1
12025: ST_TO_ADDR
// if p3 = 106 then
12026: LD_VAR 0 3
12030: PUSH
12031: LD_INT 106
12033: EQUAL
12034: IFFALSE 12044
// sTiger := true ;
12036: LD_ADDR_EXP 40
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// if p3 = 107 then
12044: LD_VAR 0 3
12048: PUSH
12049: LD_INT 107
12051: EQUAL
12052: IFFALSE 12062
// sBomb := true ;
12054: LD_ADDR_EXP 41
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// if p3 = 108 then
12062: LD_VAR 0 3
12066: PUSH
12067: LD_INT 108
12069: EQUAL
12070: IFFALSE 12080
// sWound := true ;
12072: LD_ADDR_EXP 49
12076: PUSH
12077: LD_INT 1
12079: ST_TO_ADDR
// if p3 = 109 then
12080: LD_VAR 0 3
12084: PUSH
12085: LD_INT 109
12087: EQUAL
12088: IFFALSE 12098
// sBetray := true ;
12090: LD_ADDR_EXP 53
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// if p3 = 110 then
12098: LD_VAR 0 3
12102: PUSH
12103: LD_INT 110
12105: EQUAL
12106: IFFALSE 12116
// sContamin := true ;
12108: LD_ADDR_EXP 54
12112: PUSH
12113: LD_INT 1
12115: ST_TO_ADDR
// if p3 = 111 then
12116: LD_VAR 0 3
12120: PUSH
12121: LD_INT 111
12123: EQUAL
12124: IFFALSE 12134
// sOil := true ;
12126: LD_ADDR_EXP 56
12130: PUSH
12131: LD_INT 1
12133: ST_TO_ADDR
// if p3 = 112 then
12134: LD_VAR 0 3
12138: PUSH
12139: LD_INT 112
12141: EQUAL
12142: IFFALSE 12152
// sStu := true ;
12144: LD_ADDR_EXP 60
12148: PUSH
12149: LD_INT 1
12151: ST_TO_ADDR
// if p3 = 113 then
12152: LD_VAR 0 3
12156: PUSH
12157: LD_INT 113
12159: EQUAL
12160: IFFALSE 12170
// sBazooka := true ;
12162: LD_ADDR_EXP 63
12166: PUSH
12167: LD_INT 1
12169: ST_TO_ADDR
// if p3 = 114 then
12170: LD_VAR 0 3
12174: PUSH
12175: LD_INT 114
12177: EQUAL
12178: IFFALSE 12188
// sMortar := true ;
12180: LD_ADDR_EXP 64
12184: PUSH
12185: LD_INT 1
12187: ST_TO_ADDR
// if p3 = 115 then
12188: LD_VAR 0 3
12192: PUSH
12193: LD_INT 115
12195: EQUAL
12196: IFFALSE 12206
// sRanger := true ;
12198: LD_ADDR_EXP 74
12202: PUSH
12203: LD_INT 1
12205: ST_TO_ADDR
// if p3 = 116 then
12206: LD_VAR 0 3
12210: PUSH
12211: LD_INT 116
12213: EQUAL
12214: IFFALSE 12224
// sComputer := true ;
12216: LD_ADDR_EXP 75
12220: PUSH
12221: LD_INT 1
12223: ST_TO_ADDR
// if p3 = 117 then
12224: LD_VAR 0 3
12228: PUSH
12229: LD_INT 117
12231: EQUAL
12232: IFFALSE 12242
// s30 := true ;
12234: LD_ADDR_EXP 76
12238: PUSH
12239: LD_INT 1
12241: ST_TO_ADDR
// if p3 = 118 then
12242: LD_VAR 0 3
12246: PUSH
12247: LD_INT 118
12249: EQUAL
12250: IFFALSE 12260
// s60 := true ;
12252: LD_ADDR_EXP 77
12256: PUSH
12257: LD_INT 1
12259: ST_TO_ADDR
// end ; if p2 = 101 then
12260: LD_VAR 0 2
12264: PUSH
12265: LD_INT 101
12267: EQUAL
12268: IFFALSE 12396
// begin case p3 of 1 :
12270: LD_VAR 0 3
12274: PUSH
12275: LD_INT 1
12277: DOUBLE
12278: EQUAL
12279: IFTRUE 12283
12281: GO 12290
12283: POP
// hHackUnlimitedResources ; 2 :
12284: CALL 24494 0 0
12288: GO 12396
12290: LD_INT 2
12292: DOUBLE
12293: EQUAL
12294: IFTRUE 12298
12296: GO 12305
12298: POP
// hHackSetLevel10 ; 3 :
12299: CALL 24627 0 0
12303: GO 12396
12305: LD_INT 3
12307: DOUBLE
12308: EQUAL
12309: IFTRUE 12313
12311: GO 12320
12313: POP
// hHackSetLevel10YourUnits ; 4 :
12314: CALL 24712 0 0
12318: GO 12396
12320: LD_INT 4
12322: DOUBLE
12323: EQUAL
12324: IFTRUE 12328
12326: GO 12335
12328: POP
// hHackInvincible ; 5 :
12329: CALL 25160 0 0
12333: GO 12396
12335: LD_INT 5
12337: DOUBLE
12338: EQUAL
12339: IFTRUE 12343
12341: GO 12350
12343: POP
// hHackInvisible ; 6 :
12344: CALL 25271 0 0
12348: GO 12396
12350: LD_INT 6
12352: DOUBLE
12353: EQUAL
12354: IFTRUE 12358
12356: GO 12365
12358: POP
// hHackChangeYourSide ; 7 :
12359: CALL 25328 0 0
12363: GO 12396
12365: LD_INT 7
12367: DOUBLE
12368: EQUAL
12369: IFTRUE 12373
12371: GO 12380
12373: POP
// hHackChangeUnitSide ; 8 :
12374: CALL 25370 0 0
12378: GO 12396
12380: LD_INT 8
12382: DOUBLE
12383: EQUAL
12384: IFTRUE 12388
12386: GO 12395
12388: POP
// hHackFog ; end ;
12389: CALL 25471 0 0
12393: GO 12396
12395: POP
// end ; end ;
12396: LD_VAR 0 7
12400: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12401: GO 12403
12403: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12404: LD_STRING initStreamRollete();
12406: PPUSH
12407: CALL_OW 559
// InitStreamMode ;
12411: CALL 12423 0 0
// DefineStreamItems ( false ) ;
12415: LD_INT 0
12417: PPUSH
12418: CALL 12887 0 1
// end ;
12422: END
// function InitStreamMode ; begin
12423: LD_INT 0
12425: PPUSH
// streamModeActive := false ;
12426: LD_ADDR_EXP 21
12430: PUSH
12431: LD_INT 0
12433: ST_TO_ADDR
// normalCounter := 36 ;
12434: LD_ADDR_EXP 22
12438: PUSH
12439: LD_INT 36
12441: ST_TO_ADDR
// hardcoreCounter := 18 ;
12442: LD_ADDR_EXP 23
12446: PUSH
12447: LD_INT 18
12449: ST_TO_ADDR
// sRocket := false ;
12450: LD_ADDR_EXP 26
12454: PUSH
12455: LD_INT 0
12457: ST_TO_ADDR
// sSpeed := false ;
12458: LD_ADDR_EXP 25
12462: PUSH
12463: LD_INT 0
12465: ST_TO_ADDR
// sEngine := false ;
12466: LD_ADDR_EXP 27
12470: PUSH
12471: LD_INT 0
12473: ST_TO_ADDR
// sSpec := false ;
12474: LD_ADDR_EXP 24
12478: PUSH
12479: LD_INT 0
12481: ST_TO_ADDR
// sLevel := false ;
12482: LD_ADDR_EXP 28
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
// sArmoury := false ;
12490: LD_ADDR_EXP 29
12494: PUSH
12495: LD_INT 0
12497: ST_TO_ADDR
// sRadar := false ;
12498: LD_ADDR_EXP 30
12502: PUSH
12503: LD_INT 0
12505: ST_TO_ADDR
// sBunker := false ;
12506: LD_ADDR_EXP 31
12510: PUSH
12511: LD_INT 0
12513: ST_TO_ADDR
// sHack := false ;
12514: LD_ADDR_EXP 32
12518: PUSH
12519: LD_INT 0
12521: ST_TO_ADDR
// sFire := false ;
12522: LD_ADDR_EXP 33
12526: PUSH
12527: LD_INT 0
12529: ST_TO_ADDR
// sRefresh := false ;
12530: LD_ADDR_EXP 34
12534: PUSH
12535: LD_INT 0
12537: ST_TO_ADDR
// sExp := false ;
12538: LD_ADDR_EXP 35
12542: PUSH
12543: LD_INT 0
12545: ST_TO_ADDR
// sDepot := false ;
12546: LD_ADDR_EXP 36
12550: PUSH
12551: LD_INT 0
12553: ST_TO_ADDR
// sFlag := false ;
12554: LD_ADDR_EXP 37
12558: PUSH
12559: LD_INT 0
12561: ST_TO_ADDR
// sKamikadze := false ;
12562: LD_ADDR_EXP 45
12566: PUSH
12567: LD_INT 0
12569: ST_TO_ADDR
// sTroll := false ;
12570: LD_ADDR_EXP 46
12574: PUSH
12575: LD_INT 0
12577: ST_TO_ADDR
// sSlow := false ;
12578: LD_ADDR_EXP 47
12582: PUSH
12583: LD_INT 0
12585: ST_TO_ADDR
// sLack := false ;
12586: LD_ADDR_EXP 48
12590: PUSH
12591: LD_INT 0
12593: ST_TO_ADDR
// sTank := false ;
12594: LD_ADDR_EXP 50
12598: PUSH
12599: LD_INT 0
12601: ST_TO_ADDR
// sRemote := false ;
12602: LD_ADDR_EXP 51
12606: PUSH
12607: LD_INT 0
12609: ST_TO_ADDR
// sPowell := false ;
12610: LD_ADDR_EXP 52
12614: PUSH
12615: LD_INT 0
12617: ST_TO_ADDR
// sTeleport := false ;
12618: LD_ADDR_EXP 55
12622: PUSH
12623: LD_INT 0
12625: ST_TO_ADDR
// sOilTower := false ;
12626: LD_ADDR_EXP 57
12630: PUSH
12631: LD_INT 0
12633: ST_TO_ADDR
// sShovel := false ;
12634: LD_ADDR_EXP 58
12638: PUSH
12639: LD_INT 0
12641: ST_TO_ADDR
// sSheik := false ;
12642: LD_ADDR_EXP 59
12646: PUSH
12647: LD_INT 0
12649: ST_TO_ADDR
// sEarthquake := false ;
12650: LD_ADDR_EXP 61
12654: PUSH
12655: LD_INT 0
12657: ST_TO_ADDR
// sAI := false ;
12658: LD_ADDR_EXP 62
12662: PUSH
12663: LD_INT 0
12665: ST_TO_ADDR
// sCargo := false ;
12666: LD_ADDR_EXP 65
12670: PUSH
12671: LD_INT 0
12673: ST_TO_ADDR
// sDLaser := false ;
12674: LD_ADDR_EXP 66
12678: PUSH
12679: LD_INT 0
12681: ST_TO_ADDR
// sExchange := false ;
12682: LD_ADDR_EXP 67
12686: PUSH
12687: LD_INT 0
12689: ST_TO_ADDR
// sFac := false ;
12690: LD_ADDR_EXP 68
12694: PUSH
12695: LD_INT 0
12697: ST_TO_ADDR
// sPower := false ;
12698: LD_ADDR_EXP 69
12702: PUSH
12703: LD_INT 0
12705: ST_TO_ADDR
// sRandom := false ;
12706: LD_ADDR_EXP 70
12710: PUSH
12711: LD_INT 0
12713: ST_TO_ADDR
// sShield := false ;
12714: LD_ADDR_EXP 71
12718: PUSH
12719: LD_INT 0
12721: ST_TO_ADDR
// sTime := false ;
12722: LD_ADDR_EXP 72
12726: PUSH
12727: LD_INT 0
12729: ST_TO_ADDR
// sTools := false ;
12730: LD_ADDR_EXP 73
12734: PUSH
12735: LD_INT 0
12737: ST_TO_ADDR
// sSold := false ;
12738: LD_ADDR_EXP 38
12742: PUSH
12743: LD_INT 0
12745: ST_TO_ADDR
// sDiff := false ;
12746: LD_ADDR_EXP 39
12750: PUSH
12751: LD_INT 0
12753: ST_TO_ADDR
// sFog := false ;
12754: LD_ADDR_EXP 42
12758: PUSH
12759: LD_INT 0
12761: ST_TO_ADDR
// sReset := false ;
12762: LD_ADDR_EXP 43
12766: PUSH
12767: LD_INT 0
12769: ST_TO_ADDR
// sSun := false ;
12770: LD_ADDR_EXP 44
12774: PUSH
12775: LD_INT 0
12777: ST_TO_ADDR
// sTiger := false ;
12778: LD_ADDR_EXP 40
12782: PUSH
12783: LD_INT 0
12785: ST_TO_ADDR
// sBomb := false ;
12786: LD_ADDR_EXP 41
12790: PUSH
12791: LD_INT 0
12793: ST_TO_ADDR
// sWound := false ;
12794: LD_ADDR_EXP 49
12798: PUSH
12799: LD_INT 0
12801: ST_TO_ADDR
// sBetray := false ;
12802: LD_ADDR_EXP 53
12806: PUSH
12807: LD_INT 0
12809: ST_TO_ADDR
// sContamin := false ;
12810: LD_ADDR_EXP 54
12814: PUSH
12815: LD_INT 0
12817: ST_TO_ADDR
// sOil := false ;
12818: LD_ADDR_EXP 56
12822: PUSH
12823: LD_INT 0
12825: ST_TO_ADDR
// sStu := false ;
12826: LD_ADDR_EXP 60
12830: PUSH
12831: LD_INT 0
12833: ST_TO_ADDR
// sBazooka := false ;
12834: LD_ADDR_EXP 63
12838: PUSH
12839: LD_INT 0
12841: ST_TO_ADDR
// sMortar := false ;
12842: LD_ADDR_EXP 64
12846: PUSH
12847: LD_INT 0
12849: ST_TO_ADDR
// sRanger := false ;
12850: LD_ADDR_EXP 74
12854: PUSH
12855: LD_INT 0
12857: ST_TO_ADDR
// sComputer := false ;
12858: LD_ADDR_EXP 75
12862: PUSH
12863: LD_INT 0
12865: ST_TO_ADDR
// s30 := false ;
12866: LD_ADDR_EXP 76
12870: PUSH
12871: LD_INT 0
12873: ST_TO_ADDR
// s60 := false ;
12874: LD_ADDR_EXP 77
12878: PUSH
12879: LD_INT 0
12881: ST_TO_ADDR
// end ;
12882: LD_VAR 0 1
12886: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12887: LD_INT 0
12889: PPUSH
12890: PPUSH
12891: PPUSH
12892: PPUSH
12893: PPUSH
12894: PPUSH
12895: PPUSH
// result := [ ] ;
12896: LD_ADDR_VAR 0 2
12900: PUSH
12901: EMPTY
12902: ST_TO_ADDR
// if campaign_id = 1 then
12903: LD_OWVAR 69
12907: PUSH
12908: LD_INT 1
12910: EQUAL
12911: IFFALSE 16077
// begin case mission_number of 1 :
12913: LD_OWVAR 70
12917: PUSH
12918: LD_INT 1
12920: DOUBLE
12921: EQUAL
12922: IFTRUE 12926
12924: GO 13002
12926: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12927: LD_ADDR_VAR 0 2
12931: PUSH
12932: LD_INT 2
12934: PUSH
12935: LD_INT 4
12937: PUSH
12938: LD_INT 11
12940: PUSH
12941: LD_INT 12
12943: PUSH
12944: LD_INT 15
12946: PUSH
12947: LD_INT 16
12949: PUSH
12950: LD_INT 22
12952: PUSH
12953: LD_INT 23
12955: PUSH
12956: LD_INT 26
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 101
12972: PUSH
12973: LD_INT 102
12975: PUSH
12976: LD_INT 106
12978: PUSH
12979: LD_INT 116
12981: PUSH
12982: LD_INT 117
12984: PUSH
12985: LD_INT 118
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: ST_TO_ADDR
13000: GO 16075
13002: LD_INT 2
13004: DOUBLE
13005: EQUAL
13006: IFTRUE 13010
13008: GO 13094
13010: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13011: LD_ADDR_VAR 0 2
13015: PUSH
13016: LD_INT 2
13018: PUSH
13019: LD_INT 4
13021: PUSH
13022: LD_INT 11
13024: PUSH
13025: LD_INT 12
13027: PUSH
13028: LD_INT 15
13030: PUSH
13031: LD_INT 16
13033: PUSH
13034: LD_INT 22
13036: PUSH
13037: LD_INT 23
13039: PUSH
13040: LD_INT 26
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 101
13056: PUSH
13057: LD_INT 102
13059: PUSH
13060: LD_INT 105
13062: PUSH
13063: LD_INT 106
13065: PUSH
13066: LD_INT 108
13068: PUSH
13069: LD_INT 116
13071: PUSH
13072: LD_INT 117
13074: PUSH
13075: LD_INT 118
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: ST_TO_ADDR
13092: GO 16075
13094: LD_INT 3
13096: DOUBLE
13097: EQUAL
13098: IFTRUE 13102
13100: GO 13190
13102: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13103: LD_ADDR_VAR 0 2
13107: PUSH
13108: LD_INT 2
13110: PUSH
13111: LD_INT 4
13113: PUSH
13114: LD_INT 5
13116: PUSH
13117: LD_INT 11
13119: PUSH
13120: LD_INT 12
13122: PUSH
13123: LD_INT 15
13125: PUSH
13126: LD_INT 16
13128: PUSH
13129: LD_INT 22
13131: PUSH
13132: LD_INT 26
13134: PUSH
13135: LD_INT 36
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 101
13152: PUSH
13153: LD_INT 102
13155: PUSH
13156: LD_INT 105
13158: PUSH
13159: LD_INT 106
13161: PUSH
13162: LD_INT 108
13164: PUSH
13165: LD_INT 116
13167: PUSH
13168: LD_INT 117
13170: PUSH
13171: LD_INT 118
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: ST_TO_ADDR
13188: GO 16075
13190: LD_INT 4
13192: DOUBLE
13193: EQUAL
13194: IFTRUE 13198
13196: GO 13294
13198: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13199: LD_ADDR_VAR 0 2
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: LD_INT 4
13209: PUSH
13210: LD_INT 5
13212: PUSH
13213: LD_INT 8
13215: PUSH
13216: LD_INT 11
13218: PUSH
13219: LD_INT 12
13221: PUSH
13222: LD_INT 15
13224: PUSH
13225: LD_INT 16
13227: PUSH
13228: LD_INT 22
13230: PUSH
13231: LD_INT 23
13233: PUSH
13234: LD_INT 26
13236: PUSH
13237: LD_INT 36
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 101
13256: PUSH
13257: LD_INT 102
13259: PUSH
13260: LD_INT 105
13262: PUSH
13263: LD_INT 106
13265: PUSH
13266: LD_INT 108
13268: PUSH
13269: LD_INT 116
13271: PUSH
13272: LD_INT 117
13274: PUSH
13275: LD_INT 118
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: ST_TO_ADDR
13292: GO 16075
13294: LD_INT 5
13296: DOUBLE
13297: EQUAL
13298: IFTRUE 13302
13300: GO 13414
13302: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13303: LD_ADDR_VAR 0 2
13307: PUSH
13308: LD_INT 2
13310: PUSH
13311: LD_INT 4
13313: PUSH
13314: LD_INT 5
13316: PUSH
13317: LD_INT 6
13319: PUSH
13320: LD_INT 8
13322: PUSH
13323: LD_INT 11
13325: PUSH
13326: LD_INT 12
13328: PUSH
13329: LD_INT 15
13331: PUSH
13332: LD_INT 16
13334: PUSH
13335: LD_INT 22
13337: PUSH
13338: LD_INT 23
13340: PUSH
13341: LD_INT 25
13343: PUSH
13344: LD_INT 26
13346: PUSH
13347: LD_INT 36
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 101
13368: PUSH
13369: LD_INT 102
13371: PUSH
13372: LD_INT 105
13374: PUSH
13375: LD_INT 106
13377: PUSH
13378: LD_INT 108
13380: PUSH
13381: LD_INT 109
13383: PUSH
13384: LD_INT 112
13386: PUSH
13387: LD_INT 116
13389: PUSH
13390: LD_INT 117
13392: PUSH
13393: LD_INT 118
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: ST_TO_ADDR
13412: GO 16075
13414: LD_INT 6
13416: DOUBLE
13417: EQUAL
13418: IFTRUE 13422
13420: GO 13554
13422: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13423: LD_ADDR_VAR 0 2
13427: PUSH
13428: LD_INT 2
13430: PUSH
13431: LD_INT 4
13433: PUSH
13434: LD_INT 5
13436: PUSH
13437: LD_INT 6
13439: PUSH
13440: LD_INT 8
13442: PUSH
13443: LD_INT 11
13445: PUSH
13446: LD_INT 12
13448: PUSH
13449: LD_INT 15
13451: PUSH
13452: LD_INT 16
13454: PUSH
13455: LD_INT 20
13457: PUSH
13458: LD_INT 21
13460: PUSH
13461: LD_INT 22
13463: PUSH
13464: LD_INT 23
13466: PUSH
13467: LD_INT 25
13469: PUSH
13470: LD_INT 26
13472: PUSH
13473: LD_INT 30
13475: PUSH
13476: LD_INT 31
13478: PUSH
13479: LD_INT 32
13481: PUSH
13482: LD_INT 36
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: PUSH
13506: LD_INT 101
13508: PUSH
13509: LD_INT 102
13511: PUSH
13512: LD_INT 105
13514: PUSH
13515: LD_INT 106
13517: PUSH
13518: LD_INT 108
13520: PUSH
13521: LD_INT 109
13523: PUSH
13524: LD_INT 112
13526: PUSH
13527: LD_INT 116
13529: PUSH
13530: LD_INT 117
13532: PUSH
13533: LD_INT 118
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: ST_TO_ADDR
13552: GO 16075
13554: LD_INT 7
13556: DOUBLE
13557: EQUAL
13558: IFTRUE 13562
13560: GO 13674
13562: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13563: LD_ADDR_VAR 0 2
13567: PUSH
13568: LD_INT 2
13570: PUSH
13571: LD_INT 4
13573: PUSH
13574: LD_INT 5
13576: PUSH
13577: LD_INT 7
13579: PUSH
13580: LD_INT 11
13582: PUSH
13583: LD_INT 12
13585: PUSH
13586: LD_INT 15
13588: PUSH
13589: LD_INT 16
13591: PUSH
13592: LD_INT 20
13594: PUSH
13595: LD_INT 21
13597: PUSH
13598: LD_INT 22
13600: PUSH
13601: LD_INT 23
13603: PUSH
13604: LD_INT 25
13606: PUSH
13607: LD_INT 26
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 101
13628: PUSH
13629: LD_INT 102
13631: PUSH
13632: LD_INT 103
13634: PUSH
13635: LD_INT 105
13637: PUSH
13638: LD_INT 106
13640: PUSH
13641: LD_INT 108
13643: PUSH
13644: LD_INT 112
13646: PUSH
13647: LD_INT 116
13649: PUSH
13650: LD_INT 117
13652: PUSH
13653: LD_INT 118
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: ST_TO_ADDR
13672: GO 16075
13674: LD_INT 8
13676: DOUBLE
13677: EQUAL
13678: IFTRUE 13682
13680: GO 13822
13682: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13683: LD_ADDR_VAR 0 2
13687: PUSH
13688: LD_INT 2
13690: PUSH
13691: LD_INT 4
13693: PUSH
13694: LD_INT 5
13696: PUSH
13697: LD_INT 6
13699: PUSH
13700: LD_INT 7
13702: PUSH
13703: LD_INT 8
13705: PUSH
13706: LD_INT 11
13708: PUSH
13709: LD_INT 12
13711: PUSH
13712: LD_INT 15
13714: PUSH
13715: LD_INT 16
13717: PUSH
13718: LD_INT 20
13720: PUSH
13721: LD_INT 21
13723: PUSH
13724: LD_INT 22
13726: PUSH
13727: LD_INT 23
13729: PUSH
13730: LD_INT 25
13732: PUSH
13733: LD_INT 26
13735: PUSH
13736: LD_INT 30
13738: PUSH
13739: LD_INT 31
13741: PUSH
13742: LD_INT 32
13744: PUSH
13745: LD_INT 36
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 101
13772: PUSH
13773: LD_INT 102
13775: PUSH
13776: LD_INT 103
13778: PUSH
13779: LD_INT 105
13781: PUSH
13782: LD_INT 106
13784: PUSH
13785: LD_INT 108
13787: PUSH
13788: LD_INT 109
13790: PUSH
13791: LD_INT 112
13793: PUSH
13794: LD_INT 116
13796: PUSH
13797: LD_INT 117
13799: PUSH
13800: LD_INT 118
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: ST_TO_ADDR
13820: GO 16075
13822: LD_INT 9
13824: DOUBLE
13825: EQUAL
13826: IFTRUE 13830
13828: GO 13978
13830: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13831: LD_ADDR_VAR 0 2
13835: PUSH
13836: LD_INT 2
13838: PUSH
13839: LD_INT 4
13841: PUSH
13842: LD_INT 5
13844: PUSH
13845: LD_INT 6
13847: PUSH
13848: LD_INT 7
13850: PUSH
13851: LD_INT 8
13853: PUSH
13854: LD_INT 11
13856: PUSH
13857: LD_INT 12
13859: PUSH
13860: LD_INT 15
13862: PUSH
13863: LD_INT 16
13865: PUSH
13866: LD_INT 20
13868: PUSH
13869: LD_INT 21
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_INT 23
13877: PUSH
13878: LD_INT 25
13880: PUSH
13881: LD_INT 26
13883: PUSH
13884: LD_INT 28
13886: PUSH
13887: LD_INT 30
13889: PUSH
13890: LD_INT 31
13892: PUSH
13893: LD_INT 32
13895: PUSH
13896: LD_INT 36
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: PUSH
13922: LD_INT 101
13924: PUSH
13925: LD_INT 102
13927: PUSH
13928: LD_INT 103
13930: PUSH
13931: LD_INT 105
13933: PUSH
13934: LD_INT 106
13936: PUSH
13937: LD_INT 108
13939: PUSH
13940: LD_INT 109
13942: PUSH
13943: LD_INT 112
13945: PUSH
13946: LD_INT 114
13948: PUSH
13949: LD_INT 116
13951: PUSH
13952: LD_INT 117
13954: PUSH
13955: LD_INT 118
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: ST_TO_ADDR
13976: GO 16075
13978: LD_INT 10
13980: DOUBLE
13981: EQUAL
13982: IFTRUE 13986
13984: GO 14182
13986: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13987: LD_ADDR_VAR 0 2
13991: PUSH
13992: LD_INT 2
13994: PUSH
13995: LD_INT 4
13997: PUSH
13998: LD_INT 5
14000: PUSH
14001: LD_INT 6
14003: PUSH
14004: LD_INT 7
14006: PUSH
14007: LD_INT 8
14009: PUSH
14010: LD_INT 9
14012: PUSH
14013: LD_INT 10
14015: PUSH
14016: LD_INT 11
14018: PUSH
14019: LD_INT 12
14021: PUSH
14022: LD_INT 13
14024: PUSH
14025: LD_INT 14
14027: PUSH
14028: LD_INT 15
14030: PUSH
14031: LD_INT 16
14033: PUSH
14034: LD_INT 17
14036: PUSH
14037: LD_INT 18
14039: PUSH
14040: LD_INT 19
14042: PUSH
14043: LD_INT 20
14045: PUSH
14046: LD_INT 21
14048: PUSH
14049: LD_INT 22
14051: PUSH
14052: LD_INT 23
14054: PUSH
14055: LD_INT 24
14057: PUSH
14058: LD_INT 25
14060: PUSH
14061: LD_INT 26
14063: PUSH
14064: LD_INT 28
14066: PUSH
14067: LD_INT 30
14069: PUSH
14070: LD_INT 31
14072: PUSH
14073: LD_INT 32
14075: PUSH
14076: LD_INT 36
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 101
14112: PUSH
14113: LD_INT 102
14115: PUSH
14116: LD_INT 103
14118: PUSH
14119: LD_INT 104
14121: PUSH
14122: LD_INT 105
14124: PUSH
14125: LD_INT 106
14127: PUSH
14128: LD_INT 107
14130: PUSH
14131: LD_INT 108
14133: PUSH
14134: LD_INT 109
14136: PUSH
14137: LD_INT 110
14139: PUSH
14140: LD_INT 111
14142: PUSH
14143: LD_INT 112
14145: PUSH
14146: LD_INT 114
14148: PUSH
14149: LD_INT 116
14151: PUSH
14152: LD_INT 117
14154: PUSH
14155: LD_INT 118
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: ST_TO_ADDR
14180: GO 16075
14182: LD_INT 11
14184: DOUBLE
14185: EQUAL
14186: IFTRUE 14190
14188: GO 14394
14190: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14191: LD_ADDR_VAR 0 2
14195: PUSH
14196: LD_INT 2
14198: PUSH
14199: LD_INT 3
14201: PUSH
14202: LD_INT 4
14204: PUSH
14205: LD_INT 5
14207: PUSH
14208: LD_INT 6
14210: PUSH
14211: LD_INT 7
14213: PUSH
14214: LD_INT 8
14216: PUSH
14217: LD_INT 9
14219: PUSH
14220: LD_INT 10
14222: PUSH
14223: LD_INT 11
14225: PUSH
14226: LD_INT 12
14228: PUSH
14229: LD_INT 13
14231: PUSH
14232: LD_INT 14
14234: PUSH
14235: LD_INT 15
14237: PUSH
14238: LD_INT 16
14240: PUSH
14241: LD_INT 17
14243: PUSH
14244: LD_INT 18
14246: PUSH
14247: LD_INT 19
14249: PUSH
14250: LD_INT 20
14252: PUSH
14253: LD_INT 21
14255: PUSH
14256: LD_INT 22
14258: PUSH
14259: LD_INT 23
14261: PUSH
14262: LD_INT 24
14264: PUSH
14265: LD_INT 25
14267: PUSH
14268: LD_INT 26
14270: PUSH
14271: LD_INT 28
14273: PUSH
14274: LD_INT 30
14276: PUSH
14277: LD_INT 31
14279: PUSH
14280: LD_INT 32
14282: PUSH
14283: LD_INT 34
14285: PUSH
14286: LD_INT 36
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: PUSH
14322: LD_INT 101
14324: PUSH
14325: LD_INT 102
14327: PUSH
14328: LD_INT 103
14330: PUSH
14331: LD_INT 104
14333: PUSH
14334: LD_INT 105
14336: PUSH
14337: LD_INT 106
14339: PUSH
14340: LD_INT 107
14342: PUSH
14343: LD_INT 108
14345: PUSH
14346: LD_INT 109
14348: PUSH
14349: LD_INT 110
14351: PUSH
14352: LD_INT 111
14354: PUSH
14355: LD_INT 112
14357: PUSH
14358: LD_INT 114
14360: PUSH
14361: LD_INT 116
14363: PUSH
14364: LD_INT 117
14366: PUSH
14367: LD_INT 118
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: ST_TO_ADDR
14392: GO 16075
14394: LD_INT 12
14396: DOUBLE
14397: EQUAL
14398: IFTRUE 14402
14400: GO 14622
14402: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14403: LD_ADDR_VAR 0 2
14407: PUSH
14408: LD_INT 1
14410: PUSH
14411: LD_INT 2
14413: PUSH
14414: LD_INT 3
14416: PUSH
14417: LD_INT 4
14419: PUSH
14420: LD_INT 5
14422: PUSH
14423: LD_INT 6
14425: PUSH
14426: LD_INT 7
14428: PUSH
14429: LD_INT 8
14431: PUSH
14432: LD_INT 9
14434: PUSH
14435: LD_INT 10
14437: PUSH
14438: LD_INT 11
14440: PUSH
14441: LD_INT 12
14443: PUSH
14444: LD_INT 13
14446: PUSH
14447: LD_INT 14
14449: PUSH
14450: LD_INT 15
14452: PUSH
14453: LD_INT 16
14455: PUSH
14456: LD_INT 17
14458: PUSH
14459: LD_INT 18
14461: PUSH
14462: LD_INT 19
14464: PUSH
14465: LD_INT 20
14467: PUSH
14468: LD_INT 21
14470: PUSH
14471: LD_INT 22
14473: PUSH
14474: LD_INT 23
14476: PUSH
14477: LD_INT 24
14479: PUSH
14480: LD_INT 25
14482: PUSH
14483: LD_INT 26
14485: PUSH
14486: LD_INT 27
14488: PUSH
14489: LD_INT 28
14491: PUSH
14492: LD_INT 30
14494: PUSH
14495: LD_INT 31
14497: PUSH
14498: LD_INT 32
14500: PUSH
14501: LD_INT 33
14503: PUSH
14504: LD_INT 34
14506: PUSH
14507: LD_INT 36
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: PUSH
14546: LD_INT 101
14548: PUSH
14549: LD_INT 102
14551: PUSH
14552: LD_INT 103
14554: PUSH
14555: LD_INT 104
14557: PUSH
14558: LD_INT 105
14560: PUSH
14561: LD_INT 106
14563: PUSH
14564: LD_INT 107
14566: PUSH
14567: LD_INT 108
14569: PUSH
14570: LD_INT 109
14572: PUSH
14573: LD_INT 110
14575: PUSH
14576: LD_INT 111
14578: PUSH
14579: LD_INT 112
14581: PUSH
14582: LD_INT 113
14584: PUSH
14585: LD_INT 114
14587: PUSH
14588: LD_INT 116
14590: PUSH
14591: LD_INT 117
14593: PUSH
14594: LD_INT 118
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: ST_TO_ADDR
14620: GO 16075
14622: LD_INT 13
14624: DOUBLE
14625: EQUAL
14626: IFTRUE 14630
14628: GO 14838
14630: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14631: LD_ADDR_VAR 0 2
14635: PUSH
14636: LD_INT 1
14638: PUSH
14639: LD_INT 2
14641: PUSH
14642: LD_INT 3
14644: PUSH
14645: LD_INT 4
14647: PUSH
14648: LD_INT 5
14650: PUSH
14651: LD_INT 8
14653: PUSH
14654: LD_INT 9
14656: PUSH
14657: LD_INT 10
14659: PUSH
14660: LD_INT 11
14662: PUSH
14663: LD_INT 12
14665: PUSH
14666: LD_INT 14
14668: PUSH
14669: LD_INT 15
14671: PUSH
14672: LD_INT 16
14674: PUSH
14675: LD_INT 17
14677: PUSH
14678: LD_INT 18
14680: PUSH
14681: LD_INT 19
14683: PUSH
14684: LD_INT 20
14686: PUSH
14687: LD_INT 21
14689: PUSH
14690: LD_INT 22
14692: PUSH
14693: LD_INT 23
14695: PUSH
14696: LD_INT 24
14698: PUSH
14699: LD_INT 25
14701: PUSH
14702: LD_INT 26
14704: PUSH
14705: LD_INT 27
14707: PUSH
14708: LD_INT 28
14710: PUSH
14711: LD_INT 30
14713: PUSH
14714: LD_INT 31
14716: PUSH
14717: LD_INT 32
14719: PUSH
14720: LD_INT 33
14722: PUSH
14723: LD_INT 34
14725: PUSH
14726: LD_INT 36
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: PUSH
14762: LD_INT 101
14764: PUSH
14765: LD_INT 102
14767: PUSH
14768: LD_INT 103
14770: PUSH
14771: LD_INT 104
14773: PUSH
14774: LD_INT 105
14776: PUSH
14777: LD_INT 106
14779: PUSH
14780: LD_INT 107
14782: PUSH
14783: LD_INT 108
14785: PUSH
14786: LD_INT 109
14788: PUSH
14789: LD_INT 110
14791: PUSH
14792: LD_INT 111
14794: PUSH
14795: LD_INT 112
14797: PUSH
14798: LD_INT 113
14800: PUSH
14801: LD_INT 114
14803: PUSH
14804: LD_INT 116
14806: PUSH
14807: LD_INT 117
14809: PUSH
14810: LD_INT 118
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: ST_TO_ADDR
14836: GO 16075
14838: LD_INT 14
14840: DOUBLE
14841: EQUAL
14842: IFTRUE 14846
14844: GO 15070
14846: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14847: LD_ADDR_VAR 0 2
14851: PUSH
14852: LD_INT 1
14854: PUSH
14855: LD_INT 2
14857: PUSH
14858: LD_INT 3
14860: PUSH
14861: LD_INT 4
14863: PUSH
14864: LD_INT 5
14866: PUSH
14867: LD_INT 6
14869: PUSH
14870: LD_INT 7
14872: PUSH
14873: LD_INT 8
14875: PUSH
14876: LD_INT 9
14878: PUSH
14879: LD_INT 10
14881: PUSH
14882: LD_INT 11
14884: PUSH
14885: LD_INT 12
14887: PUSH
14888: LD_INT 13
14890: PUSH
14891: LD_INT 14
14893: PUSH
14894: LD_INT 15
14896: PUSH
14897: LD_INT 16
14899: PUSH
14900: LD_INT 17
14902: PUSH
14903: LD_INT 18
14905: PUSH
14906: LD_INT 19
14908: PUSH
14909: LD_INT 20
14911: PUSH
14912: LD_INT 21
14914: PUSH
14915: LD_INT 22
14917: PUSH
14918: LD_INT 23
14920: PUSH
14921: LD_INT 24
14923: PUSH
14924: LD_INT 25
14926: PUSH
14927: LD_INT 26
14929: PUSH
14930: LD_INT 27
14932: PUSH
14933: LD_INT 28
14935: PUSH
14936: LD_INT 29
14938: PUSH
14939: LD_INT 30
14941: PUSH
14942: LD_INT 31
14944: PUSH
14945: LD_INT 32
14947: PUSH
14948: LD_INT 33
14950: PUSH
14951: LD_INT 34
14953: PUSH
14954: LD_INT 36
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 101
14996: PUSH
14997: LD_INT 102
14999: PUSH
15000: LD_INT 103
15002: PUSH
15003: LD_INT 104
15005: PUSH
15006: LD_INT 105
15008: PUSH
15009: LD_INT 106
15011: PUSH
15012: LD_INT 107
15014: PUSH
15015: LD_INT 108
15017: PUSH
15018: LD_INT 109
15020: PUSH
15021: LD_INT 110
15023: PUSH
15024: LD_INT 111
15026: PUSH
15027: LD_INT 112
15029: PUSH
15030: LD_INT 113
15032: PUSH
15033: LD_INT 114
15035: PUSH
15036: LD_INT 116
15038: PUSH
15039: LD_INT 117
15041: PUSH
15042: LD_INT 118
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: ST_TO_ADDR
15068: GO 16075
15070: LD_INT 15
15072: DOUBLE
15073: EQUAL
15074: IFTRUE 15078
15076: GO 15302
15078: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15079: LD_ADDR_VAR 0 2
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: LD_INT 2
15089: PUSH
15090: LD_INT 3
15092: PUSH
15093: LD_INT 4
15095: PUSH
15096: LD_INT 5
15098: PUSH
15099: LD_INT 6
15101: PUSH
15102: LD_INT 7
15104: PUSH
15105: LD_INT 8
15107: PUSH
15108: LD_INT 9
15110: PUSH
15111: LD_INT 10
15113: PUSH
15114: LD_INT 11
15116: PUSH
15117: LD_INT 12
15119: PUSH
15120: LD_INT 13
15122: PUSH
15123: LD_INT 14
15125: PUSH
15126: LD_INT 15
15128: PUSH
15129: LD_INT 16
15131: PUSH
15132: LD_INT 17
15134: PUSH
15135: LD_INT 18
15137: PUSH
15138: LD_INT 19
15140: PUSH
15141: LD_INT 20
15143: PUSH
15144: LD_INT 21
15146: PUSH
15147: LD_INT 22
15149: PUSH
15150: LD_INT 23
15152: PUSH
15153: LD_INT 24
15155: PUSH
15156: LD_INT 25
15158: PUSH
15159: LD_INT 26
15161: PUSH
15162: LD_INT 27
15164: PUSH
15165: LD_INT 28
15167: PUSH
15168: LD_INT 29
15170: PUSH
15171: LD_INT 30
15173: PUSH
15174: LD_INT 31
15176: PUSH
15177: LD_INT 32
15179: PUSH
15180: LD_INT 33
15182: PUSH
15183: LD_INT 34
15185: PUSH
15186: LD_INT 36
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: PUSH
15226: LD_INT 101
15228: PUSH
15229: LD_INT 102
15231: PUSH
15232: LD_INT 103
15234: PUSH
15235: LD_INT 104
15237: PUSH
15238: LD_INT 105
15240: PUSH
15241: LD_INT 106
15243: PUSH
15244: LD_INT 107
15246: PUSH
15247: LD_INT 108
15249: PUSH
15250: LD_INT 109
15252: PUSH
15253: LD_INT 110
15255: PUSH
15256: LD_INT 111
15258: PUSH
15259: LD_INT 112
15261: PUSH
15262: LD_INT 113
15264: PUSH
15265: LD_INT 114
15267: PUSH
15268: LD_INT 116
15270: PUSH
15271: LD_INT 117
15273: PUSH
15274: LD_INT 118
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: ST_TO_ADDR
15300: GO 16075
15302: LD_INT 16
15304: DOUBLE
15305: EQUAL
15306: IFTRUE 15310
15308: GO 15446
15310: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15311: LD_ADDR_VAR 0 2
15315: PUSH
15316: LD_INT 2
15318: PUSH
15319: LD_INT 4
15321: PUSH
15322: LD_INT 5
15324: PUSH
15325: LD_INT 7
15327: PUSH
15328: LD_INT 11
15330: PUSH
15331: LD_INT 12
15333: PUSH
15334: LD_INT 15
15336: PUSH
15337: LD_INT 16
15339: PUSH
15340: LD_INT 20
15342: PUSH
15343: LD_INT 21
15345: PUSH
15346: LD_INT 22
15348: PUSH
15349: LD_INT 23
15351: PUSH
15352: LD_INT 25
15354: PUSH
15355: LD_INT 26
15357: PUSH
15358: LD_INT 30
15360: PUSH
15361: LD_INT 31
15363: PUSH
15364: LD_INT 32
15366: PUSH
15367: LD_INT 33
15369: PUSH
15370: LD_INT 34
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 101
15396: PUSH
15397: LD_INT 102
15399: PUSH
15400: LD_INT 103
15402: PUSH
15403: LD_INT 106
15405: PUSH
15406: LD_INT 108
15408: PUSH
15409: LD_INT 112
15411: PUSH
15412: LD_INT 113
15414: PUSH
15415: LD_INT 114
15417: PUSH
15418: LD_INT 116
15420: PUSH
15421: LD_INT 117
15423: PUSH
15424: LD_INT 118
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: ST_TO_ADDR
15444: GO 16075
15446: LD_INT 17
15448: DOUBLE
15449: EQUAL
15450: IFTRUE 15454
15452: GO 15678
15454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15455: LD_ADDR_VAR 0 2
15459: PUSH
15460: LD_INT 1
15462: PUSH
15463: LD_INT 2
15465: PUSH
15466: LD_INT 3
15468: PUSH
15469: LD_INT 4
15471: PUSH
15472: LD_INT 5
15474: PUSH
15475: LD_INT 6
15477: PUSH
15478: LD_INT 7
15480: PUSH
15481: LD_INT 8
15483: PUSH
15484: LD_INT 9
15486: PUSH
15487: LD_INT 10
15489: PUSH
15490: LD_INT 11
15492: PUSH
15493: LD_INT 12
15495: PUSH
15496: LD_INT 13
15498: PUSH
15499: LD_INT 14
15501: PUSH
15502: LD_INT 15
15504: PUSH
15505: LD_INT 16
15507: PUSH
15508: LD_INT 17
15510: PUSH
15511: LD_INT 18
15513: PUSH
15514: LD_INT 19
15516: PUSH
15517: LD_INT 20
15519: PUSH
15520: LD_INT 21
15522: PUSH
15523: LD_INT 22
15525: PUSH
15526: LD_INT 23
15528: PUSH
15529: LD_INT 24
15531: PUSH
15532: LD_INT 25
15534: PUSH
15535: LD_INT 26
15537: PUSH
15538: LD_INT 27
15540: PUSH
15541: LD_INT 28
15543: PUSH
15544: LD_INT 29
15546: PUSH
15547: LD_INT 30
15549: PUSH
15550: LD_INT 31
15552: PUSH
15553: LD_INT 32
15555: PUSH
15556: LD_INT 33
15558: PUSH
15559: LD_INT 34
15561: PUSH
15562: LD_INT 36
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 101
15604: PUSH
15605: LD_INT 102
15607: PUSH
15608: LD_INT 103
15610: PUSH
15611: LD_INT 104
15613: PUSH
15614: LD_INT 105
15616: PUSH
15617: LD_INT 106
15619: PUSH
15620: LD_INT 107
15622: PUSH
15623: LD_INT 108
15625: PUSH
15626: LD_INT 109
15628: PUSH
15629: LD_INT 110
15631: PUSH
15632: LD_INT 111
15634: PUSH
15635: LD_INT 112
15637: PUSH
15638: LD_INT 113
15640: PUSH
15641: LD_INT 114
15643: PUSH
15644: LD_INT 116
15646: PUSH
15647: LD_INT 117
15649: PUSH
15650: LD_INT 118
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: ST_TO_ADDR
15676: GO 16075
15678: LD_INT 18
15680: DOUBLE
15681: EQUAL
15682: IFTRUE 15686
15684: GO 15834
15686: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15687: LD_ADDR_VAR 0 2
15691: PUSH
15692: LD_INT 2
15694: PUSH
15695: LD_INT 4
15697: PUSH
15698: LD_INT 5
15700: PUSH
15701: LD_INT 7
15703: PUSH
15704: LD_INT 11
15706: PUSH
15707: LD_INT 12
15709: PUSH
15710: LD_INT 15
15712: PUSH
15713: LD_INT 16
15715: PUSH
15716: LD_INT 20
15718: PUSH
15719: LD_INT 21
15721: PUSH
15722: LD_INT 22
15724: PUSH
15725: LD_INT 23
15727: PUSH
15728: LD_INT 25
15730: PUSH
15731: LD_INT 26
15733: PUSH
15734: LD_INT 30
15736: PUSH
15737: LD_INT 31
15739: PUSH
15740: LD_INT 32
15742: PUSH
15743: LD_INT 33
15745: PUSH
15746: LD_INT 34
15748: PUSH
15749: LD_INT 35
15751: PUSH
15752: LD_INT 36
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 101
15780: PUSH
15781: LD_INT 102
15783: PUSH
15784: LD_INT 103
15786: PUSH
15787: LD_INT 106
15789: PUSH
15790: LD_INT 108
15792: PUSH
15793: LD_INT 112
15795: PUSH
15796: LD_INT 113
15798: PUSH
15799: LD_INT 114
15801: PUSH
15802: LD_INT 115
15804: PUSH
15805: LD_INT 116
15807: PUSH
15808: LD_INT 117
15810: PUSH
15811: LD_INT 118
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: ST_TO_ADDR
15832: GO 16075
15834: LD_INT 19
15836: DOUBLE
15837: EQUAL
15838: IFTRUE 15842
15840: GO 16074
15842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15843: LD_ADDR_VAR 0 2
15847: PUSH
15848: LD_INT 1
15850: PUSH
15851: LD_INT 2
15853: PUSH
15854: LD_INT 3
15856: PUSH
15857: LD_INT 4
15859: PUSH
15860: LD_INT 5
15862: PUSH
15863: LD_INT 6
15865: PUSH
15866: LD_INT 7
15868: PUSH
15869: LD_INT 8
15871: PUSH
15872: LD_INT 9
15874: PUSH
15875: LD_INT 10
15877: PUSH
15878: LD_INT 11
15880: PUSH
15881: LD_INT 12
15883: PUSH
15884: LD_INT 13
15886: PUSH
15887: LD_INT 14
15889: PUSH
15890: LD_INT 15
15892: PUSH
15893: LD_INT 16
15895: PUSH
15896: LD_INT 17
15898: PUSH
15899: LD_INT 18
15901: PUSH
15902: LD_INT 19
15904: PUSH
15905: LD_INT 20
15907: PUSH
15908: LD_INT 21
15910: PUSH
15911: LD_INT 22
15913: PUSH
15914: LD_INT 23
15916: PUSH
15917: LD_INT 24
15919: PUSH
15920: LD_INT 25
15922: PUSH
15923: LD_INT 26
15925: PUSH
15926: LD_INT 27
15928: PUSH
15929: LD_INT 28
15931: PUSH
15932: LD_INT 29
15934: PUSH
15935: LD_INT 30
15937: PUSH
15938: LD_INT 31
15940: PUSH
15941: LD_INT 32
15943: PUSH
15944: LD_INT 33
15946: PUSH
15947: LD_INT 34
15949: PUSH
15950: LD_INT 35
15952: PUSH
15953: LD_INT 36
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 101
15996: PUSH
15997: LD_INT 102
15999: PUSH
16000: LD_INT 103
16002: PUSH
16003: LD_INT 104
16005: PUSH
16006: LD_INT 105
16008: PUSH
16009: LD_INT 106
16011: PUSH
16012: LD_INT 107
16014: PUSH
16015: LD_INT 108
16017: PUSH
16018: LD_INT 109
16020: PUSH
16021: LD_INT 110
16023: PUSH
16024: LD_INT 111
16026: PUSH
16027: LD_INT 112
16029: PUSH
16030: LD_INT 113
16032: PUSH
16033: LD_INT 114
16035: PUSH
16036: LD_INT 115
16038: PUSH
16039: LD_INT 116
16041: PUSH
16042: LD_INT 117
16044: PUSH
16045: LD_INT 118
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: ST_TO_ADDR
16072: GO 16075
16074: POP
// end else
16075: GO 16306
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16077: LD_ADDR_VAR 0 2
16081: PUSH
16082: LD_INT 1
16084: PUSH
16085: LD_INT 2
16087: PUSH
16088: LD_INT 3
16090: PUSH
16091: LD_INT 4
16093: PUSH
16094: LD_INT 5
16096: PUSH
16097: LD_INT 6
16099: PUSH
16100: LD_INT 7
16102: PUSH
16103: LD_INT 8
16105: PUSH
16106: LD_INT 9
16108: PUSH
16109: LD_INT 10
16111: PUSH
16112: LD_INT 11
16114: PUSH
16115: LD_INT 12
16117: PUSH
16118: LD_INT 13
16120: PUSH
16121: LD_INT 14
16123: PUSH
16124: LD_INT 15
16126: PUSH
16127: LD_INT 16
16129: PUSH
16130: LD_INT 17
16132: PUSH
16133: LD_INT 18
16135: PUSH
16136: LD_INT 19
16138: PUSH
16139: LD_INT 20
16141: PUSH
16142: LD_INT 21
16144: PUSH
16145: LD_INT 22
16147: PUSH
16148: LD_INT 23
16150: PUSH
16151: LD_INT 24
16153: PUSH
16154: LD_INT 25
16156: PUSH
16157: LD_INT 26
16159: PUSH
16160: LD_INT 27
16162: PUSH
16163: LD_INT 28
16165: PUSH
16166: LD_INT 29
16168: PUSH
16169: LD_INT 30
16171: PUSH
16172: LD_INT 31
16174: PUSH
16175: LD_INT 32
16177: PUSH
16178: LD_INT 33
16180: PUSH
16181: LD_INT 34
16183: PUSH
16184: LD_INT 35
16186: PUSH
16187: LD_INT 36
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 101
16230: PUSH
16231: LD_INT 102
16233: PUSH
16234: LD_INT 103
16236: PUSH
16237: LD_INT 104
16239: PUSH
16240: LD_INT 105
16242: PUSH
16243: LD_INT 106
16245: PUSH
16246: LD_INT 107
16248: PUSH
16249: LD_INT 108
16251: PUSH
16252: LD_INT 109
16254: PUSH
16255: LD_INT 110
16257: PUSH
16258: LD_INT 111
16260: PUSH
16261: LD_INT 112
16263: PUSH
16264: LD_INT 113
16266: PUSH
16267: LD_INT 114
16269: PUSH
16270: LD_INT 115
16272: PUSH
16273: LD_INT 116
16275: PUSH
16276: LD_INT 117
16278: PUSH
16279: LD_INT 118
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: ST_TO_ADDR
// if result then
16306: LD_VAR 0 2
16310: IFFALSE 17096
// begin normal :=  ;
16312: LD_ADDR_VAR 0 5
16316: PUSH
16317: LD_STRING 
16319: ST_TO_ADDR
// hardcore :=  ;
16320: LD_ADDR_VAR 0 6
16324: PUSH
16325: LD_STRING 
16327: ST_TO_ADDR
// active :=  ;
16328: LD_ADDR_VAR 0 7
16332: PUSH
16333: LD_STRING 
16335: ST_TO_ADDR
// for i = 1 to normalCounter do
16336: LD_ADDR_VAR 0 8
16340: PUSH
16341: DOUBLE
16342: LD_INT 1
16344: DEC
16345: ST_TO_ADDR
16346: LD_EXP 22
16350: PUSH
16351: FOR_TO
16352: IFFALSE 16453
// begin tmp := 0 ;
16354: LD_ADDR_VAR 0 3
16358: PUSH
16359: LD_STRING 0
16361: ST_TO_ADDR
// if result [ 1 ] then
16362: LD_VAR 0 2
16366: PUSH
16367: LD_INT 1
16369: ARRAY
16370: IFFALSE 16435
// if result [ 1 ] [ 1 ] = i then
16372: LD_VAR 0 2
16376: PUSH
16377: LD_INT 1
16379: ARRAY
16380: PUSH
16381: LD_INT 1
16383: ARRAY
16384: PUSH
16385: LD_VAR 0 8
16389: EQUAL
16390: IFFALSE 16435
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16392: LD_ADDR_VAR 0 2
16396: PUSH
16397: LD_VAR 0 2
16401: PPUSH
16402: LD_INT 1
16404: PPUSH
16405: LD_VAR 0 2
16409: PUSH
16410: LD_INT 1
16412: ARRAY
16413: PPUSH
16414: LD_INT 1
16416: PPUSH
16417: CALL_OW 3
16421: PPUSH
16422: CALL_OW 1
16426: ST_TO_ADDR
// tmp := 1 ;
16427: LD_ADDR_VAR 0 3
16431: PUSH
16432: LD_STRING 1
16434: ST_TO_ADDR
// end ; normal := normal & tmp ;
16435: LD_ADDR_VAR 0 5
16439: PUSH
16440: LD_VAR 0 5
16444: PUSH
16445: LD_VAR 0 3
16449: STR
16450: ST_TO_ADDR
// end ;
16451: GO 16351
16453: POP
16454: POP
// for i = 1 to hardcoreCounter do
16455: LD_ADDR_VAR 0 8
16459: PUSH
16460: DOUBLE
16461: LD_INT 1
16463: DEC
16464: ST_TO_ADDR
16465: LD_EXP 23
16469: PUSH
16470: FOR_TO
16471: IFFALSE 16576
// begin tmp := 0 ;
16473: LD_ADDR_VAR 0 3
16477: PUSH
16478: LD_STRING 0
16480: ST_TO_ADDR
// if result [ 2 ] then
16481: LD_VAR 0 2
16485: PUSH
16486: LD_INT 2
16488: ARRAY
16489: IFFALSE 16558
// if result [ 2 ] [ 1 ] = 100 + i then
16491: LD_VAR 0 2
16495: PUSH
16496: LD_INT 2
16498: ARRAY
16499: PUSH
16500: LD_INT 1
16502: ARRAY
16503: PUSH
16504: LD_INT 100
16506: PUSH
16507: LD_VAR 0 8
16511: PLUS
16512: EQUAL
16513: IFFALSE 16558
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16515: LD_ADDR_VAR 0 2
16519: PUSH
16520: LD_VAR 0 2
16524: PPUSH
16525: LD_INT 2
16527: PPUSH
16528: LD_VAR 0 2
16532: PUSH
16533: LD_INT 2
16535: ARRAY
16536: PPUSH
16537: LD_INT 1
16539: PPUSH
16540: CALL_OW 3
16544: PPUSH
16545: CALL_OW 1
16549: ST_TO_ADDR
// tmp := 1 ;
16550: LD_ADDR_VAR 0 3
16554: PUSH
16555: LD_STRING 1
16557: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16558: LD_ADDR_VAR 0 6
16562: PUSH
16563: LD_VAR 0 6
16567: PUSH
16568: LD_VAR 0 3
16572: STR
16573: ST_TO_ADDR
// end ;
16574: GO 16470
16576: POP
16577: POP
// if isGameLoad then
16578: LD_VAR 0 1
16582: IFFALSE 17057
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16584: LD_ADDR_VAR 0 4
16588: PUSH
16589: LD_EXP 26
16593: PUSH
16594: LD_EXP 25
16598: PUSH
16599: LD_EXP 27
16603: PUSH
16604: LD_EXP 24
16608: PUSH
16609: LD_EXP 28
16613: PUSH
16614: LD_EXP 29
16618: PUSH
16619: LD_EXP 30
16623: PUSH
16624: LD_EXP 31
16628: PUSH
16629: LD_EXP 32
16633: PUSH
16634: LD_EXP 33
16638: PUSH
16639: LD_EXP 34
16643: PUSH
16644: LD_EXP 35
16648: PUSH
16649: LD_EXP 36
16653: PUSH
16654: LD_EXP 37
16658: PUSH
16659: LD_EXP 45
16663: PUSH
16664: LD_EXP 46
16668: PUSH
16669: LD_EXP 47
16673: PUSH
16674: LD_EXP 48
16678: PUSH
16679: LD_EXP 50
16683: PUSH
16684: LD_EXP 51
16688: PUSH
16689: LD_EXP 52
16693: PUSH
16694: LD_EXP 55
16698: PUSH
16699: LD_EXP 57
16703: PUSH
16704: LD_EXP 58
16708: PUSH
16709: LD_EXP 59
16713: PUSH
16714: LD_EXP 61
16718: PUSH
16719: LD_EXP 62
16723: PUSH
16724: LD_EXP 65
16728: PUSH
16729: LD_EXP 66
16733: PUSH
16734: LD_EXP 67
16738: PUSH
16739: LD_EXP 68
16743: PUSH
16744: LD_EXP 69
16748: PUSH
16749: LD_EXP 70
16753: PUSH
16754: LD_EXP 71
16758: PUSH
16759: LD_EXP 72
16763: PUSH
16764: LD_EXP 73
16768: PUSH
16769: LD_EXP 38
16773: PUSH
16774: LD_EXP 39
16778: PUSH
16779: LD_EXP 42
16783: PUSH
16784: LD_EXP 43
16788: PUSH
16789: LD_EXP 44
16793: PUSH
16794: LD_EXP 40
16798: PUSH
16799: LD_EXP 41
16803: PUSH
16804: LD_EXP 49
16808: PUSH
16809: LD_EXP 53
16813: PUSH
16814: LD_EXP 54
16818: PUSH
16819: LD_EXP 56
16823: PUSH
16824: LD_EXP 60
16828: PUSH
16829: LD_EXP 63
16833: PUSH
16834: LD_EXP 64
16838: PUSH
16839: LD_EXP 74
16843: PUSH
16844: LD_EXP 75
16848: PUSH
16849: LD_EXP 76
16853: PUSH
16854: LD_EXP 77
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: ST_TO_ADDR
// tmp :=  ;
16915: LD_ADDR_VAR 0 3
16919: PUSH
16920: LD_STRING 
16922: ST_TO_ADDR
// for i = 1 to normalCounter do
16923: LD_ADDR_VAR 0 8
16927: PUSH
16928: DOUBLE
16929: LD_INT 1
16931: DEC
16932: ST_TO_ADDR
16933: LD_EXP 22
16937: PUSH
16938: FOR_TO
16939: IFFALSE 16975
// begin if flags [ i ] then
16941: LD_VAR 0 4
16945: PUSH
16946: LD_VAR 0 8
16950: ARRAY
16951: IFFALSE 16973
// tmp := tmp & i & ; ;
16953: LD_ADDR_VAR 0 3
16957: PUSH
16958: LD_VAR 0 3
16962: PUSH
16963: LD_VAR 0 8
16967: STR
16968: PUSH
16969: LD_STRING ;
16971: STR
16972: ST_TO_ADDR
// end ;
16973: GO 16938
16975: POP
16976: POP
// for i = 1 to hardcoreCounter do
16977: LD_ADDR_VAR 0 8
16981: PUSH
16982: DOUBLE
16983: LD_INT 1
16985: DEC
16986: ST_TO_ADDR
16987: LD_EXP 23
16991: PUSH
16992: FOR_TO
16993: IFFALSE 17039
// begin if flags [ normalCounter + i ] then
16995: LD_VAR 0 4
16999: PUSH
17000: LD_EXP 22
17004: PUSH
17005: LD_VAR 0 8
17009: PLUS
17010: ARRAY
17011: IFFALSE 17037
// tmp := tmp & ( 100 + i ) & ; ;
17013: LD_ADDR_VAR 0 3
17017: PUSH
17018: LD_VAR 0 3
17022: PUSH
17023: LD_INT 100
17025: PUSH
17026: LD_VAR 0 8
17030: PLUS
17031: STR
17032: PUSH
17033: LD_STRING ;
17035: STR
17036: ST_TO_ADDR
// end ;
17037: GO 16992
17039: POP
17040: POP
// if tmp then
17041: LD_VAR 0 3
17045: IFFALSE 17057
// active := tmp ;
17047: LD_ADDR_VAR 0 7
17051: PUSH
17052: LD_VAR 0 3
17056: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17057: LD_STRING getStreamItemsFromMission("
17059: PUSH
17060: LD_VAR 0 5
17064: STR
17065: PUSH
17066: LD_STRING ","
17068: STR
17069: PUSH
17070: LD_VAR 0 6
17074: STR
17075: PUSH
17076: LD_STRING ","
17078: STR
17079: PUSH
17080: LD_VAR 0 7
17084: STR
17085: PUSH
17086: LD_STRING ")
17088: STR
17089: PPUSH
17090: CALL_OW 559
// end else
17094: GO 17103
// ToLua ( getStreamItemsFromMission("","","") ) ;
17096: LD_STRING getStreamItemsFromMission("","","")
17098: PPUSH
17099: CALL_OW 559
// end ;
17103: LD_VAR 0 2
17107: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17108: LD_EXP 21
17112: PUSH
17113: LD_EXP 26
17117: AND
17118: IFFALSE 17242
17120: GO 17122
17122: DISABLE
17123: LD_INT 0
17125: PPUSH
17126: PPUSH
// begin enable ;
17127: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17128: LD_ADDR_VAR 0 2
17132: PUSH
17133: LD_INT 22
17135: PUSH
17136: LD_OWVAR 2
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 2
17147: PUSH
17148: LD_INT 34
17150: PUSH
17151: LD_INT 7
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 34
17160: PUSH
17161: LD_INT 45
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 34
17170: PUSH
17171: LD_INT 28
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 34
17180: PUSH
17181: LD_INT 47
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PPUSH
17199: CALL_OW 69
17203: ST_TO_ADDR
// if not tmp then
17204: LD_VAR 0 2
17208: NOT
17209: IFFALSE 17213
// exit ;
17211: GO 17242
// for i in tmp do
17213: LD_ADDR_VAR 0 1
17217: PUSH
17218: LD_VAR 0 2
17222: PUSH
17223: FOR_IN
17224: IFFALSE 17240
// begin SetLives ( i , 0 ) ;
17226: LD_VAR 0 1
17230: PPUSH
17231: LD_INT 0
17233: PPUSH
17234: CALL_OW 234
// end ;
17238: GO 17223
17240: POP
17241: POP
// end ;
17242: PPOPN 2
17244: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17245: LD_EXP 21
17249: PUSH
17250: LD_EXP 27
17254: AND
17255: IFFALSE 17339
17257: GO 17259
17259: DISABLE
17260: LD_INT 0
17262: PPUSH
17263: PPUSH
// begin enable ;
17264: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17265: LD_ADDR_VAR 0 2
17269: PUSH
17270: LD_INT 22
17272: PUSH
17273: LD_OWVAR 2
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: LD_INT 32
17284: PUSH
17285: LD_INT 3
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PPUSH
17296: CALL_OW 69
17300: ST_TO_ADDR
// if not tmp then
17301: LD_VAR 0 2
17305: NOT
17306: IFFALSE 17310
// exit ;
17308: GO 17339
// for i in tmp do
17310: LD_ADDR_VAR 0 1
17314: PUSH
17315: LD_VAR 0 2
17319: PUSH
17320: FOR_IN
17321: IFFALSE 17337
// begin SetLives ( i , 0 ) ;
17323: LD_VAR 0 1
17327: PPUSH
17328: LD_INT 0
17330: PPUSH
17331: CALL_OW 234
// end ;
17335: GO 17320
17337: POP
17338: POP
// end ;
17339: PPOPN 2
17341: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17342: LD_EXP 21
17346: PUSH
17347: LD_EXP 24
17351: AND
17352: IFFALSE 17445
17354: GO 17356
17356: DISABLE
17357: LD_INT 0
17359: PPUSH
// begin enable ;
17360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17361: LD_ADDR_VAR 0 1
17365: PUSH
17366: LD_INT 22
17368: PUSH
17369: LD_OWVAR 2
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 2
17380: PUSH
17381: LD_INT 25
17383: PUSH
17384: LD_INT 5
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 25
17393: PUSH
17394: LD_INT 9
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 25
17403: PUSH
17404: LD_INT 8
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PPUSH
17421: CALL_OW 69
17425: PUSH
17426: FOR_IN
17427: IFFALSE 17443
// begin SetClass ( i , 1 ) ;
17429: LD_VAR 0 1
17433: PPUSH
17434: LD_INT 1
17436: PPUSH
17437: CALL_OW 336
// end ;
17441: GO 17426
17443: POP
17444: POP
// end ;
17445: PPOPN 1
17447: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17448: LD_EXP 21
17452: PUSH
17453: LD_EXP 25
17457: AND
17458: PUSH
17459: LD_OWVAR 65
17463: PUSH
17464: LD_INT 7
17466: LESS
17467: AND
17468: IFFALSE 17482
17470: GO 17472
17472: DISABLE
// begin enable ;
17473: ENABLE
// game_speed := 7 ;
17474: LD_ADDR_OWVAR 65
17478: PUSH
17479: LD_INT 7
17481: ST_TO_ADDR
// end ;
17482: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17483: LD_EXP 21
17487: PUSH
17488: LD_EXP 28
17492: AND
17493: IFFALSE 17695
17495: GO 17497
17497: DISABLE
17498: LD_INT 0
17500: PPUSH
17501: PPUSH
17502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17503: LD_ADDR_VAR 0 3
17507: PUSH
17508: LD_INT 81
17510: PUSH
17511: LD_OWVAR 2
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 21
17522: PUSH
17523: LD_INT 1
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PPUSH
17534: CALL_OW 69
17538: ST_TO_ADDR
// if not tmp then
17539: LD_VAR 0 3
17543: NOT
17544: IFFALSE 17548
// exit ;
17546: GO 17695
// if tmp > 5 then
17548: LD_VAR 0 3
17552: PUSH
17553: LD_INT 5
17555: GREATER
17556: IFFALSE 17568
// k := 5 else
17558: LD_ADDR_VAR 0 2
17562: PUSH
17563: LD_INT 5
17565: ST_TO_ADDR
17566: GO 17578
// k := tmp ;
17568: LD_ADDR_VAR 0 2
17572: PUSH
17573: LD_VAR 0 3
17577: ST_TO_ADDR
// for i := 1 to k do
17578: LD_ADDR_VAR 0 1
17582: PUSH
17583: DOUBLE
17584: LD_INT 1
17586: DEC
17587: ST_TO_ADDR
17588: LD_VAR 0 2
17592: PUSH
17593: FOR_TO
17594: IFFALSE 17693
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17596: LD_VAR 0 3
17600: PUSH
17601: LD_VAR 0 1
17605: ARRAY
17606: PPUSH
17607: LD_VAR 0 1
17611: PUSH
17612: LD_INT 4
17614: MOD
17615: PUSH
17616: LD_INT 1
17618: PLUS
17619: PPUSH
17620: CALL_OW 259
17624: PUSH
17625: LD_INT 10
17627: LESS
17628: IFFALSE 17691
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17630: LD_VAR 0 3
17634: PUSH
17635: LD_VAR 0 1
17639: ARRAY
17640: PPUSH
17641: LD_VAR 0 1
17645: PUSH
17646: LD_INT 4
17648: MOD
17649: PUSH
17650: LD_INT 1
17652: PLUS
17653: PPUSH
17654: LD_VAR 0 3
17658: PUSH
17659: LD_VAR 0 1
17663: ARRAY
17664: PPUSH
17665: LD_VAR 0 1
17669: PUSH
17670: LD_INT 4
17672: MOD
17673: PUSH
17674: LD_INT 1
17676: PLUS
17677: PPUSH
17678: CALL_OW 259
17682: PUSH
17683: LD_INT 1
17685: PLUS
17686: PPUSH
17687: CALL_OW 237
17691: GO 17593
17693: POP
17694: POP
// end ;
17695: PPOPN 3
17697: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17698: LD_EXP 21
17702: PUSH
17703: LD_EXP 29
17707: AND
17708: IFFALSE 17728
17710: GO 17712
17712: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17713: LD_INT 4
17715: PPUSH
17716: LD_OWVAR 2
17720: PPUSH
17721: LD_INT 0
17723: PPUSH
17724: CALL_OW 324
17728: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17729: LD_EXP 21
17733: PUSH
17734: LD_EXP 58
17738: AND
17739: IFFALSE 17759
17741: GO 17743
17743: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17744: LD_INT 19
17746: PPUSH
17747: LD_OWVAR 2
17751: PPUSH
17752: LD_INT 0
17754: PPUSH
17755: CALL_OW 324
17759: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17760: LD_EXP 21
17764: PUSH
17765: LD_EXP 30
17769: AND
17770: IFFALSE 17872
17772: GO 17774
17774: DISABLE
17775: LD_INT 0
17777: PPUSH
17778: PPUSH
// begin enable ;
17779: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17780: LD_ADDR_VAR 0 2
17784: PUSH
17785: LD_INT 22
17787: PUSH
17788: LD_OWVAR 2
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 2
17799: PUSH
17800: LD_INT 34
17802: PUSH
17803: LD_INT 11
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 34
17812: PUSH
17813: LD_INT 30
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: ST_TO_ADDR
// if not tmp then
17834: LD_VAR 0 2
17838: NOT
17839: IFFALSE 17843
// exit ;
17841: GO 17872
// for i in tmp do
17843: LD_ADDR_VAR 0 1
17847: PUSH
17848: LD_VAR 0 2
17852: PUSH
17853: FOR_IN
17854: IFFALSE 17870
// begin SetLives ( i , 0 ) ;
17856: LD_VAR 0 1
17860: PPUSH
17861: LD_INT 0
17863: PPUSH
17864: CALL_OW 234
// end ;
17868: GO 17853
17870: POP
17871: POP
// end ;
17872: PPOPN 2
17874: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17875: LD_EXP 21
17879: PUSH
17880: LD_EXP 31
17884: AND
17885: IFFALSE 17905
17887: GO 17889
17889: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17890: LD_INT 32
17892: PPUSH
17893: LD_OWVAR 2
17897: PPUSH
17898: LD_INT 0
17900: PPUSH
17901: CALL_OW 324
17905: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17906: LD_EXP 21
17910: PUSH
17911: LD_EXP 32
17915: AND
17916: IFFALSE 18097
17918: GO 17920
17920: DISABLE
17921: LD_INT 0
17923: PPUSH
17924: PPUSH
17925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17926: LD_ADDR_VAR 0 2
17930: PUSH
17931: LD_INT 22
17933: PUSH
17934: LD_OWVAR 2
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 33
17945: PUSH
17946: LD_INT 3
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PPUSH
17957: CALL_OW 69
17961: ST_TO_ADDR
// if not tmp then
17962: LD_VAR 0 2
17966: NOT
17967: IFFALSE 17971
// exit ;
17969: GO 18097
// side := 0 ;
17971: LD_ADDR_VAR 0 3
17975: PUSH
17976: LD_INT 0
17978: ST_TO_ADDR
// for i := 1 to 8 do
17979: LD_ADDR_VAR 0 1
17983: PUSH
17984: DOUBLE
17985: LD_INT 1
17987: DEC
17988: ST_TO_ADDR
17989: LD_INT 8
17991: PUSH
17992: FOR_TO
17993: IFFALSE 18041
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17995: LD_OWVAR 2
17999: PUSH
18000: LD_VAR 0 1
18004: NONEQUAL
18005: PUSH
18006: LD_OWVAR 2
18010: PPUSH
18011: LD_VAR 0 1
18015: PPUSH
18016: CALL_OW 81
18020: PUSH
18021: LD_INT 2
18023: EQUAL
18024: AND
18025: IFFALSE 18039
// begin side := i ;
18027: LD_ADDR_VAR 0 3
18031: PUSH
18032: LD_VAR 0 1
18036: ST_TO_ADDR
// break ;
18037: GO 18041
// end ;
18039: GO 17992
18041: POP
18042: POP
// if not side then
18043: LD_VAR 0 3
18047: NOT
18048: IFFALSE 18052
// exit ;
18050: GO 18097
// for i := 1 to tmp do
18052: LD_ADDR_VAR 0 1
18056: PUSH
18057: DOUBLE
18058: LD_INT 1
18060: DEC
18061: ST_TO_ADDR
18062: LD_VAR 0 2
18066: PUSH
18067: FOR_TO
18068: IFFALSE 18095
// if Prob ( 60 ) then
18070: LD_INT 60
18072: PPUSH
18073: CALL_OW 13
18077: IFFALSE 18093
// SetSide ( i , side ) ;
18079: LD_VAR 0 1
18083: PPUSH
18084: LD_VAR 0 3
18088: PPUSH
18089: CALL_OW 235
18093: GO 18067
18095: POP
18096: POP
// end ;
18097: PPOPN 3
18099: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18100: LD_EXP 21
18104: PUSH
18105: LD_EXP 34
18109: AND
18110: IFFALSE 18229
18112: GO 18114
18114: DISABLE
18115: LD_INT 0
18117: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18118: LD_ADDR_VAR 0 1
18122: PUSH
18123: LD_INT 22
18125: PUSH
18126: LD_OWVAR 2
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 21
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 3
18147: PUSH
18148: LD_INT 23
18150: PUSH
18151: LD_INT 0
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: LIST
18166: PPUSH
18167: CALL_OW 69
18171: PUSH
18172: FOR_IN
18173: IFFALSE 18227
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18175: LD_VAR 0 1
18179: PPUSH
18180: CALL_OW 257
18184: PUSH
18185: LD_INT 1
18187: PUSH
18188: LD_INT 2
18190: PUSH
18191: LD_INT 3
18193: PUSH
18194: LD_INT 4
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: IN
18203: IFFALSE 18225
// SetClass ( un , rand ( 1 , 4 ) ) ;
18205: LD_VAR 0 1
18209: PPUSH
18210: LD_INT 1
18212: PPUSH
18213: LD_INT 4
18215: PPUSH
18216: CALL_OW 12
18220: PPUSH
18221: CALL_OW 336
18225: GO 18172
18227: POP
18228: POP
// end ;
18229: PPOPN 1
18231: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18232: LD_EXP 21
18236: PUSH
18237: LD_EXP 33
18241: AND
18242: IFFALSE 18321
18244: GO 18246
18246: DISABLE
18247: LD_INT 0
18249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18250: LD_ADDR_VAR 0 1
18254: PUSH
18255: LD_INT 22
18257: PUSH
18258: LD_OWVAR 2
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 21
18269: PUSH
18270: LD_INT 3
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PPUSH
18281: CALL_OW 69
18285: ST_TO_ADDR
// if not tmp then
18286: LD_VAR 0 1
18290: NOT
18291: IFFALSE 18295
// exit ;
18293: GO 18321
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18295: LD_VAR 0 1
18299: PUSH
18300: LD_INT 1
18302: PPUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 12
18312: ARRAY
18313: PPUSH
18314: LD_INT 100
18316: PPUSH
18317: CALL_OW 234
// end ;
18321: PPOPN 1
18323: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18324: LD_EXP 21
18328: PUSH
18329: LD_EXP 35
18333: AND
18334: IFFALSE 18432
18336: GO 18338
18338: DISABLE
18339: LD_INT 0
18341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18342: LD_ADDR_VAR 0 1
18346: PUSH
18347: LD_INT 22
18349: PUSH
18350: LD_OWVAR 2
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 21
18361: PUSH
18362: LD_INT 1
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PPUSH
18373: CALL_OW 69
18377: ST_TO_ADDR
// if not tmp then
18378: LD_VAR 0 1
18382: NOT
18383: IFFALSE 18387
// exit ;
18385: GO 18432
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18387: LD_VAR 0 1
18391: PUSH
18392: LD_INT 1
18394: PPUSH
18395: LD_VAR 0 1
18399: PPUSH
18400: CALL_OW 12
18404: ARRAY
18405: PPUSH
18406: LD_INT 1
18408: PPUSH
18409: LD_INT 4
18411: PPUSH
18412: CALL_OW 12
18416: PPUSH
18417: LD_INT 3000
18419: PPUSH
18420: LD_INT 9000
18422: PPUSH
18423: CALL_OW 12
18427: PPUSH
18428: CALL_OW 492
// end ;
18432: PPOPN 1
18434: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18435: LD_EXP 21
18439: PUSH
18440: LD_EXP 36
18444: AND
18445: IFFALSE 18465
18447: GO 18449
18449: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18450: LD_INT 1
18452: PPUSH
18453: LD_OWVAR 2
18457: PPUSH
18458: LD_INT 0
18460: PPUSH
18461: CALL_OW 324
18465: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18466: LD_EXP 21
18470: PUSH
18471: LD_EXP 37
18475: AND
18476: IFFALSE 18559
18478: GO 18480
18480: DISABLE
18481: LD_INT 0
18483: PPUSH
18484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18485: LD_ADDR_VAR 0 2
18489: PUSH
18490: LD_INT 22
18492: PUSH
18493: LD_OWVAR 2
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 21
18504: PUSH
18505: LD_INT 3
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PPUSH
18516: CALL_OW 69
18520: ST_TO_ADDR
// if not tmp then
18521: LD_VAR 0 2
18525: NOT
18526: IFFALSE 18530
// exit ;
18528: GO 18559
// for i in tmp do
18530: LD_ADDR_VAR 0 1
18534: PUSH
18535: LD_VAR 0 2
18539: PUSH
18540: FOR_IN
18541: IFFALSE 18557
// SetBLevel ( i , 10 ) ;
18543: LD_VAR 0 1
18547: PPUSH
18548: LD_INT 10
18550: PPUSH
18551: CALL_OW 241
18555: GO 18540
18557: POP
18558: POP
// end ;
18559: PPOPN 2
18561: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18562: LD_EXP 21
18566: PUSH
18567: LD_EXP 38
18571: AND
18572: IFFALSE 18683
18574: GO 18576
18576: DISABLE
18577: LD_INT 0
18579: PPUSH
18580: PPUSH
18581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18582: LD_ADDR_VAR 0 3
18586: PUSH
18587: LD_INT 22
18589: PUSH
18590: LD_OWVAR 2
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 25
18601: PUSH
18602: LD_INT 1
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PPUSH
18613: CALL_OW 69
18617: ST_TO_ADDR
// if not tmp then
18618: LD_VAR 0 3
18622: NOT
18623: IFFALSE 18627
// exit ;
18625: GO 18683
// un := tmp [ rand ( 1 , tmp ) ] ;
18627: LD_ADDR_VAR 0 2
18631: PUSH
18632: LD_VAR 0 3
18636: PUSH
18637: LD_INT 1
18639: PPUSH
18640: LD_VAR 0 3
18644: PPUSH
18645: CALL_OW 12
18649: ARRAY
18650: ST_TO_ADDR
// if Crawls ( un ) then
18651: LD_VAR 0 2
18655: PPUSH
18656: CALL_OW 318
18660: IFFALSE 18671
// ComWalk ( un ) ;
18662: LD_VAR 0 2
18666: PPUSH
18667: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18671: LD_VAR 0 2
18675: PPUSH
18676: LD_INT 5
18678: PPUSH
18679: CALL_OW 336
// end ;
18683: PPOPN 3
18685: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18686: LD_EXP 21
18690: PUSH
18691: LD_EXP 39
18695: AND
18696: PUSH
18697: LD_OWVAR 67
18701: PUSH
18702: LD_INT 4
18704: LESS
18705: AND
18706: IFFALSE 18725
18708: GO 18710
18710: DISABLE
// begin Difficulty := Difficulty + 1 ;
18711: LD_ADDR_OWVAR 67
18715: PUSH
18716: LD_OWVAR 67
18720: PUSH
18721: LD_INT 1
18723: PLUS
18724: ST_TO_ADDR
// end ;
18725: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18726: LD_EXP 21
18730: PUSH
18731: LD_EXP 40
18735: AND
18736: IFFALSE 18839
18738: GO 18740
18740: DISABLE
18741: LD_INT 0
18743: PPUSH
// begin for i := 1 to 5 do
18744: LD_ADDR_VAR 0 1
18748: PUSH
18749: DOUBLE
18750: LD_INT 1
18752: DEC
18753: ST_TO_ADDR
18754: LD_INT 5
18756: PUSH
18757: FOR_TO
18758: IFFALSE 18837
// begin uc_nation := nation_nature ;
18760: LD_ADDR_OWVAR 21
18764: PUSH
18765: LD_INT 0
18767: ST_TO_ADDR
// uc_side := 0 ;
18768: LD_ADDR_OWVAR 20
18772: PUSH
18773: LD_INT 0
18775: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18776: LD_ADDR_OWVAR 29
18780: PUSH
18781: LD_INT 12
18783: PUSH
18784: LD_INT 12
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: ST_TO_ADDR
// hc_agressivity := 20 ;
18791: LD_ADDR_OWVAR 35
18795: PUSH
18796: LD_INT 20
18798: ST_TO_ADDR
// hc_class := class_tiger ;
18799: LD_ADDR_OWVAR 28
18803: PUSH
18804: LD_INT 14
18806: ST_TO_ADDR
// hc_gallery :=  ;
18807: LD_ADDR_OWVAR 33
18811: PUSH
18812: LD_STRING 
18814: ST_TO_ADDR
// hc_name :=  ;
18815: LD_ADDR_OWVAR 26
18819: PUSH
18820: LD_STRING 
18822: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18823: CALL_OW 44
18827: PPUSH
18828: LD_INT 0
18830: PPUSH
18831: CALL_OW 51
// end ;
18835: GO 18757
18837: POP
18838: POP
// end ;
18839: PPOPN 1
18841: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18842: LD_EXP 21
18846: PUSH
18847: LD_EXP 41
18851: AND
18852: IFFALSE 18861
18854: GO 18856
18856: DISABLE
// StreamSibBomb ;
18857: CALL 18862 0 0
18861: END
// export function StreamSibBomb ; var i , x , y ; begin
18862: LD_INT 0
18864: PPUSH
18865: PPUSH
18866: PPUSH
18867: PPUSH
// result := false ;
18868: LD_ADDR_VAR 0 1
18872: PUSH
18873: LD_INT 0
18875: ST_TO_ADDR
// for i := 1 to 16 do
18876: LD_ADDR_VAR 0 2
18880: PUSH
18881: DOUBLE
18882: LD_INT 1
18884: DEC
18885: ST_TO_ADDR
18886: LD_INT 16
18888: PUSH
18889: FOR_TO
18890: IFFALSE 19089
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18892: LD_ADDR_VAR 0 3
18896: PUSH
18897: LD_INT 10
18899: PUSH
18900: LD_INT 20
18902: PUSH
18903: LD_INT 30
18905: PUSH
18906: LD_INT 40
18908: PUSH
18909: LD_INT 50
18911: PUSH
18912: LD_INT 60
18914: PUSH
18915: LD_INT 70
18917: PUSH
18918: LD_INT 80
18920: PUSH
18921: LD_INT 90
18923: PUSH
18924: LD_INT 100
18926: PUSH
18927: LD_INT 110
18929: PUSH
18930: LD_INT 120
18932: PUSH
18933: LD_INT 130
18935: PUSH
18936: LD_INT 140
18938: PUSH
18939: LD_INT 150
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 1
18961: PPUSH
18962: LD_INT 15
18964: PPUSH
18965: CALL_OW 12
18969: ARRAY
18970: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18971: LD_ADDR_VAR 0 4
18975: PUSH
18976: LD_INT 10
18978: PUSH
18979: LD_INT 20
18981: PUSH
18982: LD_INT 30
18984: PUSH
18985: LD_INT 40
18987: PUSH
18988: LD_INT 50
18990: PUSH
18991: LD_INT 60
18993: PUSH
18994: LD_INT 70
18996: PUSH
18997: LD_INT 80
18999: PUSH
19000: LD_INT 90
19002: PUSH
19003: LD_INT 100
19005: PUSH
19006: LD_INT 110
19008: PUSH
19009: LD_INT 120
19011: PUSH
19012: LD_INT 130
19014: PUSH
19015: LD_INT 140
19017: PUSH
19018: LD_INT 150
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PPUSH
19041: LD_INT 15
19043: PPUSH
19044: CALL_OW 12
19048: ARRAY
19049: ST_TO_ADDR
// if ValidHex ( x , y ) then
19050: LD_VAR 0 3
19054: PPUSH
19055: LD_VAR 0 4
19059: PPUSH
19060: CALL_OW 488
19064: IFFALSE 19087
// begin result := [ x , y ] ;
19066: LD_ADDR_VAR 0 1
19070: PUSH
19071: LD_VAR 0 3
19075: PUSH
19076: LD_VAR 0 4
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: ST_TO_ADDR
// break ;
19085: GO 19089
// end ; end ;
19087: GO 18889
19089: POP
19090: POP
// if result then
19091: LD_VAR 0 1
19095: IFFALSE 19155
// begin ToLua ( playSibBomb() ) ;
19097: LD_STRING playSibBomb()
19099: PPUSH
19100: CALL_OW 559
// wait ( 0 0$14 ) ;
19104: LD_INT 490
19106: PPUSH
19107: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19111: LD_VAR 0 1
19115: PUSH
19116: LD_INT 1
19118: ARRAY
19119: PPUSH
19120: LD_VAR 0 1
19124: PUSH
19125: LD_INT 2
19127: ARRAY
19128: PPUSH
19129: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19133: LD_VAR 0 1
19137: PUSH
19138: LD_INT 1
19140: ARRAY
19141: PPUSH
19142: LD_VAR 0 1
19146: PUSH
19147: LD_INT 2
19149: ARRAY
19150: PPUSH
19151: CALL_OW 429
// end ; end ;
19155: LD_VAR 0 1
19159: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19160: LD_EXP 21
19164: PUSH
19165: LD_EXP 43
19169: AND
19170: IFFALSE 19182
19172: GO 19174
19174: DISABLE
// YouLost (  ) ;
19175: LD_STRING 
19177: PPUSH
19178: CALL_OW 104
19182: END
// every 0 0$1 trigger StreamModeActive and sFog do
19183: LD_EXP 21
19187: PUSH
19188: LD_EXP 42
19192: AND
19193: IFFALSE 19207
19195: GO 19197
19197: DISABLE
// FogOff ( your_side ) ;
19198: LD_OWVAR 2
19202: PPUSH
19203: CALL_OW 344
19207: END
// every 0 0$1 trigger StreamModeActive and sSun do
19208: LD_EXP 21
19212: PUSH
19213: LD_EXP 44
19217: AND
19218: IFFALSE 19246
19220: GO 19222
19222: DISABLE
// begin solar_recharge_percent := 0 ;
19223: LD_ADDR_OWVAR 79
19227: PUSH
19228: LD_INT 0
19230: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19231: LD_INT 10500
19233: PPUSH
19234: CALL_OW 67
// solar_recharge_percent := 100 ;
19238: LD_ADDR_OWVAR 79
19242: PUSH
19243: LD_INT 100
19245: ST_TO_ADDR
// end ;
19246: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19247: LD_EXP 21
19251: PUSH
19252: LD_EXP 45
19256: AND
19257: IFFALSE 19496
19259: GO 19261
19261: DISABLE
19262: LD_INT 0
19264: PPUSH
19265: PPUSH
19266: PPUSH
// begin tmp := [ ] ;
19267: LD_ADDR_VAR 0 3
19271: PUSH
19272: EMPTY
19273: ST_TO_ADDR
// for i := 1 to 6 do
19274: LD_ADDR_VAR 0 1
19278: PUSH
19279: DOUBLE
19280: LD_INT 1
19282: DEC
19283: ST_TO_ADDR
19284: LD_INT 6
19286: PUSH
19287: FOR_TO
19288: IFFALSE 19393
// begin uc_nation := nation_nature ;
19290: LD_ADDR_OWVAR 21
19294: PUSH
19295: LD_INT 0
19297: ST_TO_ADDR
// uc_side := 0 ;
19298: LD_ADDR_OWVAR 20
19302: PUSH
19303: LD_INT 0
19305: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19306: LD_ADDR_OWVAR 29
19310: PUSH
19311: LD_INT 12
19313: PUSH
19314: LD_INT 12
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: ST_TO_ADDR
// hc_agressivity := 20 ;
19321: LD_ADDR_OWVAR 35
19325: PUSH
19326: LD_INT 20
19328: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19329: LD_ADDR_OWVAR 28
19333: PUSH
19334: LD_INT 17
19336: ST_TO_ADDR
// hc_gallery :=  ;
19337: LD_ADDR_OWVAR 33
19341: PUSH
19342: LD_STRING 
19344: ST_TO_ADDR
// hc_name :=  ;
19345: LD_ADDR_OWVAR 26
19349: PUSH
19350: LD_STRING 
19352: ST_TO_ADDR
// un := CreateHuman ;
19353: LD_ADDR_VAR 0 2
19357: PUSH
19358: CALL_OW 44
19362: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19363: LD_VAR 0 2
19367: PPUSH
19368: LD_INT 1
19370: PPUSH
19371: CALL_OW 51
// tmp := tmp ^ un ;
19375: LD_ADDR_VAR 0 3
19379: PUSH
19380: LD_VAR 0 3
19384: PUSH
19385: LD_VAR 0 2
19389: ADD
19390: ST_TO_ADDR
// end ;
19391: GO 19287
19393: POP
19394: POP
// repeat wait ( 0 0$1 ) ;
19395: LD_INT 35
19397: PPUSH
19398: CALL_OW 67
// for un in tmp do
19402: LD_ADDR_VAR 0 2
19406: PUSH
19407: LD_VAR 0 3
19411: PUSH
19412: FOR_IN
19413: IFFALSE 19487
// begin if IsDead ( un ) then
19415: LD_VAR 0 2
19419: PPUSH
19420: CALL_OW 301
19424: IFFALSE 19444
// begin tmp := tmp diff un ;
19426: LD_ADDR_VAR 0 3
19430: PUSH
19431: LD_VAR 0 3
19435: PUSH
19436: LD_VAR 0 2
19440: DIFF
19441: ST_TO_ADDR
// continue ;
19442: GO 19412
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19444: LD_VAR 0 2
19448: PPUSH
19449: LD_INT 3
19451: PUSH
19452: LD_INT 22
19454: PUSH
19455: LD_INT 0
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PPUSH
19466: CALL_OW 69
19470: PPUSH
19471: LD_VAR 0 2
19475: PPUSH
19476: CALL_OW 74
19480: PPUSH
19481: CALL_OW 115
// end ;
19485: GO 19412
19487: POP
19488: POP
// until not tmp ;
19489: LD_VAR 0 3
19493: NOT
19494: IFFALSE 19395
// end ;
19496: PPOPN 3
19498: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19499: LD_EXP 21
19503: PUSH
19504: LD_EXP 46
19508: AND
19509: IFFALSE 19563
19511: GO 19513
19513: DISABLE
// begin ToLua ( displayTroll(); ) ;
19514: LD_STRING displayTroll();
19516: PPUSH
19517: CALL_OW 559
// wait ( 3 3$00 ) ;
19521: LD_INT 6300
19523: PPUSH
19524: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19528: LD_STRING hideTroll();
19530: PPUSH
19531: CALL_OW 559
// wait ( 1 1$00 ) ;
19535: LD_INT 2100
19537: PPUSH
19538: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19542: LD_STRING displayTroll();
19544: PPUSH
19545: CALL_OW 559
// wait ( 1 1$00 ) ;
19549: LD_INT 2100
19551: PPUSH
19552: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19556: LD_STRING hideTroll();
19558: PPUSH
19559: CALL_OW 559
// end ;
19563: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19564: LD_EXP 21
19568: PUSH
19569: LD_EXP 47
19573: AND
19574: IFFALSE 19637
19576: GO 19578
19578: DISABLE
19579: LD_INT 0
19581: PPUSH
// begin p := 0 ;
19582: LD_ADDR_VAR 0 1
19586: PUSH
19587: LD_INT 0
19589: ST_TO_ADDR
// repeat game_speed := 1 ;
19590: LD_ADDR_OWVAR 65
19594: PUSH
19595: LD_INT 1
19597: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19598: LD_INT 35
19600: PPUSH
19601: CALL_OW 67
// p := p + 1 ;
19605: LD_ADDR_VAR 0 1
19609: PUSH
19610: LD_VAR 0 1
19614: PUSH
19615: LD_INT 1
19617: PLUS
19618: ST_TO_ADDR
// until p >= 60 ;
19619: LD_VAR 0 1
19623: PUSH
19624: LD_INT 60
19626: GREATEREQUAL
19627: IFFALSE 19590
// game_speed := 4 ;
19629: LD_ADDR_OWVAR 65
19633: PUSH
19634: LD_INT 4
19636: ST_TO_ADDR
// end ;
19637: PPOPN 1
19639: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19640: LD_EXP 21
19644: PUSH
19645: LD_EXP 48
19649: AND
19650: IFFALSE 19796
19652: GO 19654
19654: DISABLE
19655: LD_INT 0
19657: PPUSH
19658: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19659: LD_ADDR_VAR 0 1
19663: PUSH
19664: LD_INT 22
19666: PUSH
19667: LD_OWVAR 2
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 2
19678: PUSH
19679: LD_INT 30
19681: PUSH
19682: LD_INT 0
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 30
19691: PUSH
19692: LD_INT 1
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: LIST
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PPUSH
19708: CALL_OW 69
19712: ST_TO_ADDR
// if not depot then
19713: LD_VAR 0 1
19717: NOT
19718: IFFALSE 19722
// exit ;
19720: GO 19796
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19722: LD_ADDR_VAR 0 2
19726: PUSH
19727: LD_VAR 0 1
19731: PUSH
19732: LD_INT 1
19734: PPUSH
19735: LD_VAR 0 1
19739: PPUSH
19740: CALL_OW 12
19744: ARRAY
19745: PPUSH
19746: CALL_OW 274
19750: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19751: LD_VAR 0 2
19755: PPUSH
19756: LD_INT 1
19758: PPUSH
19759: LD_INT 0
19761: PPUSH
19762: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19766: LD_VAR 0 2
19770: PPUSH
19771: LD_INT 2
19773: PPUSH
19774: LD_INT 0
19776: PPUSH
19777: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19781: LD_VAR 0 2
19785: PPUSH
19786: LD_INT 3
19788: PPUSH
19789: LD_INT 0
19791: PPUSH
19792: CALL_OW 277
// end ;
19796: PPOPN 2
19798: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19799: LD_EXP 21
19803: PUSH
19804: LD_EXP 49
19808: AND
19809: IFFALSE 19906
19811: GO 19813
19813: DISABLE
19814: LD_INT 0
19816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19817: LD_ADDR_VAR 0 1
19821: PUSH
19822: LD_INT 22
19824: PUSH
19825: LD_OWVAR 2
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 21
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 3
19846: PUSH
19847: LD_INT 23
19849: PUSH
19850: LD_INT 0
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: LIST
19865: PPUSH
19866: CALL_OW 69
19870: ST_TO_ADDR
// if not tmp then
19871: LD_VAR 0 1
19875: NOT
19876: IFFALSE 19880
// exit ;
19878: GO 19906
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19880: LD_VAR 0 1
19884: PUSH
19885: LD_INT 1
19887: PPUSH
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 12
19897: ARRAY
19898: PPUSH
19899: LD_INT 200
19901: PPUSH
19902: CALL_OW 234
// end ;
19906: PPOPN 1
19908: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19909: LD_EXP 21
19913: PUSH
19914: LD_EXP 50
19918: AND
19919: IFFALSE 19998
19921: GO 19923
19923: DISABLE
19924: LD_INT 0
19926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19927: LD_ADDR_VAR 0 1
19931: PUSH
19932: LD_INT 22
19934: PUSH
19935: LD_OWVAR 2
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 21
19946: PUSH
19947: LD_INT 2
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PPUSH
19958: CALL_OW 69
19962: ST_TO_ADDR
// if not tmp then
19963: LD_VAR 0 1
19967: NOT
19968: IFFALSE 19972
// exit ;
19970: GO 19998
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19972: LD_VAR 0 1
19976: PUSH
19977: LD_INT 1
19979: PPUSH
19980: LD_VAR 0 1
19984: PPUSH
19985: CALL_OW 12
19989: ARRAY
19990: PPUSH
19991: LD_INT 60
19993: PPUSH
19994: CALL_OW 234
// end ;
19998: PPOPN 1
20000: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20001: LD_EXP 21
20005: PUSH
20006: LD_EXP 51
20010: AND
20011: IFFALSE 20110
20013: GO 20015
20015: DISABLE
20016: LD_INT 0
20018: PPUSH
20019: PPUSH
// begin enable ;
20020: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20021: LD_ADDR_VAR 0 1
20025: PUSH
20026: LD_INT 22
20028: PUSH
20029: LD_OWVAR 2
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 61
20040: PUSH
20041: EMPTY
20042: LIST
20043: PUSH
20044: LD_INT 33
20046: PUSH
20047: LD_INT 2
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: LIST
20058: PPUSH
20059: CALL_OW 69
20063: ST_TO_ADDR
// if not tmp then
20064: LD_VAR 0 1
20068: NOT
20069: IFFALSE 20073
// exit ;
20071: GO 20110
// for i in tmp do
20073: LD_ADDR_VAR 0 2
20077: PUSH
20078: LD_VAR 0 1
20082: PUSH
20083: FOR_IN
20084: IFFALSE 20108
// if IsControledBy ( i ) then
20086: LD_VAR 0 2
20090: PPUSH
20091: CALL_OW 312
20095: IFFALSE 20106
// ComUnlink ( i ) ;
20097: LD_VAR 0 2
20101: PPUSH
20102: CALL_OW 136
20106: GO 20083
20108: POP
20109: POP
// end ;
20110: PPOPN 2
20112: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20113: LD_EXP 21
20117: PUSH
20118: LD_EXP 52
20122: AND
20123: IFFALSE 20263
20125: GO 20127
20127: DISABLE
20128: LD_INT 0
20130: PPUSH
20131: PPUSH
// begin ToLua ( displayPowell(); ) ;
20132: LD_STRING displayPowell();
20134: PPUSH
20135: CALL_OW 559
// uc_side := 0 ;
20139: LD_ADDR_OWVAR 20
20143: PUSH
20144: LD_INT 0
20146: ST_TO_ADDR
// uc_nation := 2 ;
20147: LD_ADDR_OWVAR 21
20151: PUSH
20152: LD_INT 2
20154: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20155: LD_ADDR_OWVAR 37
20159: PUSH
20160: LD_INT 14
20162: ST_TO_ADDR
// vc_engine := engine_siberite ;
20163: LD_ADDR_OWVAR 39
20167: PUSH
20168: LD_INT 3
20170: ST_TO_ADDR
// vc_control := control_apeman ;
20171: LD_ADDR_OWVAR 38
20175: PUSH
20176: LD_INT 5
20178: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20179: LD_ADDR_OWVAR 40
20183: PUSH
20184: LD_INT 29
20186: ST_TO_ADDR
// un := CreateVehicle ;
20187: LD_ADDR_VAR 0 2
20191: PUSH
20192: CALL_OW 45
20196: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20197: LD_VAR 0 2
20201: PPUSH
20202: LD_INT 1
20204: PPUSH
20205: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20209: LD_INT 35
20211: PPUSH
20212: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20216: LD_VAR 0 2
20220: PPUSH
20221: LD_INT 22
20223: PUSH
20224: LD_OWVAR 2
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PPUSH
20233: CALL_OW 69
20237: PPUSH
20238: LD_VAR 0 2
20242: PPUSH
20243: CALL_OW 74
20247: PPUSH
20248: CALL_OW 115
// until IsDead ( un ) ;
20252: LD_VAR 0 2
20256: PPUSH
20257: CALL_OW 301
20261: IFFALSE 20209
// end ;
20263: PPOPN 2
20265: END
// every 0 0$1 trigger StreamModeActive and sStu do
20266: LD_EXP 21
20270: PUSH
20271: LD_EXP 60
20275: AND
20276: IFFALSE 20292
20278: GO 20280
20280: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20281: LD_STRING displayStucuk();
20283: PPUSH
20284: CALL_OW 559
// ResetFog ;
20288: CALL_OW 335
// end ;
20292: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20293: LD_EXP 21
20297: PUSH
20298: LD_EXP 53
20302: AND
20303: IFFALSE 20444
20305: GO 20307
20307: DISABLE
20308: LD_INT 0
20310: PPUSH
20311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20312: LD_ADDR_VAR 0 2
20316: PUSH
20317: LD_INT 22
20319: PUSH
20320: LD_OWVAR 2
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 21
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PPUSH
20343: CALL_OW 69
20347: ST_TO_ADDR
// if not tmp then
20348: LD_VAR 0 2
20352: NOT
20353: IFFALSE 20357
// exit ;
20355: GO 20444
// un := tmp [ rand ( 1 , tmp ) ] ;
20357: LD_ADDR_VAR 0 1
20361: PUSH
20362: LD_VAR 0 2
20366: PUSH
20367: LD_INT 1
20369: PPUSH
20370: LD_VAR 0 2
20374: PPUSH
20375: CALL_OW 12
20379: ARRAY
20380: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20381: LD_VAR 0 1
20385: PPUSH
20386: LD_INT 0
20388: PPUSH
20389: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20393: LD_VAR 0 1
20397: PPUSH
20398: LD_OWVAR 3
20402: PUSH
20403: LD_VAR 0 1
20407: DIFF
20408: PPUSH
20409: LD_VAR 0 1
20413: PPUSH
20414: CALL_OW 74
20418: PPUSH
20419: CALL_OW 115
// wait ( 0 0$20 ) ;
20423: LD_INT 700
20425: PPUSH
20426: CALL_OW 67
// SetSide ( un , your_side ) ;
20430: LD_VAR 0 1
20434: PPUSH
20435: LD_OWVAR 2
20439: PPUSH
20440: CALL_OW 235
// end ;
20444: PPOPN 2
20446: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20447: LD_EXP 21
20451: PUSH
20452: LD_EXP 54
20456: AND
20457: IFFALSE 20563
20459: GO 20461
20461: DISABLE
20462: LD_INT 0
20464: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20465: LD_ADDR_VAR 0 1
20469: PUSH
20470: LD_INT 22
20472: PUSH
20473: LD_OWVAR 2
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: LD_INT 30
20487: PUSH
20488: LD_INT 0
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 30
20497: PUSH
20498: LD_INT 1
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: LIST
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PPUSH
20514: CALL_OW 69
20518: ST_TO_ADDR
// if not depot then
20519: LD_VAR 0 1
20523: NOT
20524: IFFALSE 20528
// exit ;
20526: GO 20563
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20528: LD_VAR 0 1
20532: PUSH
20533: LD_INT 1
20535: ARRAY
20536: PPUSH
20537: CALL_OW 250
20541: PPUSH
20542: LD_VAR 0 1
20546: PUSH
20547: LD_INT 1
20549: ARRAY
20550: PPUSH
20551: CALL_OW 251
20555: PPUSH
20556: LD_INT 70
20558: PPUSH
20559: CALL_OW 495
// end ;
20563: PPOPN 1
20565: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20566: LD_EXP 21
20570: PUSH
20571: LD_EXP 55
20575: AND
20576: IFFALSE 20787
20578: GO 20580
20580: DISABLE
20581: LD_INT 0
20583: PPUSH
20584: PPUSH
20585: PPUSH
20586: PPUSH
20587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20588: LD_ADDR_VAR 0 5
20592: PUSH
20593: LD_INT 22
20595: PUSH
20596: LD_OWVAR 2
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 21
20607: PUSH
20608: LD_INT 1
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PPUSH
20619: CALL_OW 69
20623: ST_TO_ADDR
// if not tmp then
20624: LD_VAR 0 5
20628: NOT
20629: IFFALSE 20633
// exit ;
20631: GO 20787
// for i in tmp do
20633: LD_ADDR_VAR 0 1
20637: PUSH
20638: LD_VAR 0 5
20642: PUSH
20643: FOR_IN
20644: IFFALSE 20785
// begin d := rand ( 0 , 5 ) ;
20646: LD_ADDR_VAR 0 4
20650: PUSH
20651: LD_INT 0
20653: PPUSH
20654: LD_INT 5
20656: PPUSH
20657: CALL_OW 12
20661: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20662: LD_ADDR_VAR 0 2
20666: PUSH
20667: LD_VAR 0 1
20671: PPUSH
20672: CALL_OW 250
20676: PPUSH
20677: LD_VAR 0 4
20681: PPUSH
20682: LD_INT 3
20684: PPUSH
20685: LD_INT 12
20687: PPUSH
20688: CALL_OW 12
20692: PPUSH
20693: CALL_OW 272
20697: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20698: LD_ADDR_VAR 0 3
20702: PUSH
20703: LD_VAR 0 1
20707: PPUSH
20708: CALL_OW 251
20712: PPUSH
20713: LD_VAR 0 4
20717: PPUSH
20718: LD_INT 3
20720: PPUSH
20721: LD_INT 12
20723: PPUSH
20724: CALL_OW 12
20728: PPUSH
20729: CALL_OW 273
20733: ST_TO_ADDR
// if ValidHex ( x , y ) then
20734: LD_VAR 0 2
20738: PPUSH
20739: LD_VAR 0 3
20743: PPUSH
20744: CALL_OW 488
20748: IFFALSE 20783
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20750: LD_VAR 0 1
20754: PPUSH
20755: LD_VAR 0 2
20759: PPUSH
20760: LD_VAR 0 3
20764: PPUSH
20765: LD_INT 3
20767: PPUSH
20768: LD_INT 6
20770: PPUSH
20771: CALL_OW 12
20775: PPUSH
20776: LD_INT 1
20778: PPUSH
20779: CALL_OW 483
// end ;
20783: GO 20643
20785: POP
20786: POP
// end ;
20787: PPOPN 5
20789: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20790: LD_EXP 21
20794: PUSH
20795: LD_EXP 56
20799: AND
20800: IFFALSE 20894
20802: GO 20804
20804: DISABLE
20805: LD_INT 0
20807: PPUSH
20808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20809: LD_ADDR_VAR 0 2
20813: PUSH
20814: LD_INT 22
20816: PUSH
20817: LD_OWVAR 2
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 32
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 21
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: LIST
20850: PPUSH
20851: CALL_OW 69
20855: ST_TO_ADDR
// if not tmp then
20856: LD_VAR 0 2
20860: NOT
20861: IFFALSE 20865
// exit ;
20863: GO 20894
// for i in tmp do
20865: LD_ADDR_VAR 0 1
20869: PUSH
20870: LD_VAR 0 2
20874: PUSH
20875: FOR_IN
20876: IFFALSE 20892
// SetFuel ( i , 0 ) ;
20878: LD_VAR 0 1
20882: PPUSH
20883: LD_INT 0
20885: PPUSH
20886: CALL_OW 240
20890: GO 20875
20892: POP
20893: POP
// end ;
20894: PPOPN 2
20896: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20897: LD_EXP 21
20901: PUSH
20902: LD_EXP 57
20906: AND
20907: IFFALSE 20973
20909: GO 20911
20911: DISABLE
20912: LD_INT 0
20914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20915: LD_ADDR_VAR 0 1
20919: PUSH
20920: LD_INT 22
20922: PUSH
20923: LD_OWVAR 2
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 30
20934: PUSH
20935: LD_INT 29
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PPUSH
20946: CALL_OW 69
20950: ST_TO_ADDR
// if not tmp then
20951: LD_VAR 0 1
20955: NOT
20956: IFFALSE 20960
// exit ;
20958: GO 20973
// DestroyUnit ( tmp [ 1 ] ) ;
20960: LD_VAR 0 1
20964: PUSH
20965: LD_INT 1
20967: ARRAY
20968: PPUSH
20969: CALL_OW 65
// end ;
20973: PPOPN 1
20975: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20976: LD_EXP 21
20980: PUSH
20981: LD_EXP 59
20985: AND
20986: IFFALSE 21115
20988: GO 20990
20990: DISABLE
20991: LD_INT 0
20993: PPUSH
// begin uc_side := 0 ;
20994: LD_ADDR_OWVAR 20
20998: PUSH
20999: LD_INT 0
21001: ST_TO_ADDR
// uc_nation := nation_arabian ;
21002: LD_ADDR_OWVAR 21
21006: PUSH
21007: LD_INT 2
21009: ST_TO_ADDR
// hc_gallery :=  ;
21010: LD_ADDR_OWVAR 33
21014: PUSH
21015: LD_STRING 
21017: ST_TO_ADDR
// hc_name :=  ;
21018: LD_ADDR_OWVAR 26
21022: PUSH
21023: LD_STRING 
21025: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21026: LD_INT 1
21028: PPUSH
21029: LD_INT 11
21031: PPUSH
21032: LD_INT 10
21034: PPUSH
21035: CALL_OW 380
// un := CreateHuman ;
21039: LD_ADDR_VAR 0 1
21043: PUSH
21044: CALL_OW 44
21048: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21049: LD_VAR 0 1
21053: PPUSH
21054: LD_INT 1
21056: PPUSH
21057: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21061: LD_INT 35
21063: PPUSH
21064: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21068: LD_VAR 0 1
21072: PPUSH
21073: LD_INT 22
21075: PUSH
21076: LD_OWVAR 2
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PPUSH
21085: CALL_OW 69
21089: PPUSH
21090: LD_VAR 0 1
21094: PPUSH
21095: CALL_OW 74
21099: PPUSH
21100: CALL_OW 115
// until IsDead ( un ) ;
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 301
21113: IFFALSE 21061
// end ;
21115: PPOPN 1
21117: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21118: LD_EXP 21
21122: PUSH
21123: LD_EXP 61
21127: AND
21128: IFFALSE 21140
21130: GO 21132
21132: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21133: LD_STRING earthquake(getX(game), 0, 32)
21135: PPUSH
21136: CALL_OW 559
21140: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21141: LD_EXP 21
21145: PUSH
21146: LD_EXP 62
21150: AND
21151: IFFALSE 21242
21153: GO 21155
21155: DISABLE
21156: LD_INT 0
21158: PPUSH
// begin enable ;
21159: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21160: LD_ADDR_VAR 0 1
21164: PUSH
21165: LD_INT 22
21167: PUSH
21168: LD_OWVAR 2
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 21
21179: PUSH
21180: LD_INT 2
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 33
21189: PUSH
21190: LD_INT 3
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: PPUSH
21202: CALL_OW 69
21206: ST_TO_ADDR
// if not tmp then
21207: LD_VAR 0 1
21211: NOT
21212: IFFALSE 21216
// exit ;
21214: GO 21242
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21216: LD_VAR 0 1
21220: PUSH
21221: LD_INT 1
21223: PPUSH
21224: LD_VAR 0 1
21228: PPUSH
21229: CALL_OW 12
21233: ARRAY
21234: PPUSH
21235: LD_INT 1
21237: PPUSH
21238: CALL_OW 234
// end ;
21242: PPOPN 1
21244: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21245: LD_EXP 21
21249: PUSH
21250: LD_EXP 63
21254: AND
21255: IFFALSE 21396
21257: GO 21259
21259: DISABLE
21260: LD_INT 0
21262: PPUSH
21263: PPUSH
21264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21265: LD_ADDR_VAR 0 3
21269: PUSH
21270: LD_INT 22
21272: PUSH
21273: LD_OWVAR 2
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 25
21284: PUSH
21285: LD_INT 1
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PPUSH
21296: CALL_OW 69
21300: ST_TO_ADDR
// if not tmp then
21301: LD_VAR 0 3
21305: NOT
21306: IFFALSE 21310
// exit ;
21308: GO 21396
// un := tmp [ rand ( 1 , tmp ) ] ;
21310: LD_ADDR_VAR 0 2
21314: PUSH
21315: LD_VAR 0 3
21319: PUSH
21320: LD_INT 1
21322: PPUSH
21323: LD_VAR 0 3
21327: PPUSH
21328: CALL_OW 12
21332: ARRAY
21333: ST_TO_ADDR
// if Crawls ( un ) then
21334: LD_VAR 0 2
21338: PPUSH
21339: CALL_OW 318
21343: IFFALSE 21354
// ComWalk ( un ) ;
21345: LD_VAR 0 2
21349: PPUSH
21350: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21354: LD_VAR 0 2
21358: PPUSH
21359: LD_INT 9
21361: PPUSH
21362: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21366: LD_INT 28
21368: PPUSH
21369: LD_OWVAR 2
21373: PPUSH
21374: LD_INT 2
21376: PPUSH
21377: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21381: LD_INT 29
21383: PPUSH
21384: LD_OWVAR 2
21388: PPUSH
21389: LD_INT 2
21391: PPUSH
21392: CALL_OW 322
// end ;
21396: PPOPN 3
21398: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21399: LD_EXP 21
21403: PUSH
21404: LD_EXP 64
21408: AND
21409: IFFALSE 21520
21411: GO 21413
21413: DISABLE
21414: LD_INT 0
21416: PPUSH
21417: PPUSH
21418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21419: LD_ADDR_VAR 0 3
21423: PUSH
21424: LD_INT 22
21426: PUSH
21427: LD_OWVAR 2
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 25
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PPUSH
21450: CALL_OW 69
21454: ST_TO_ADDR
// if not tmp then
21455: LD_VAR 0 3
21459: NOT
21460: IFFALSE 21464
// exit ;
21462: GO 21520
// un := tmp [ rand ( 1 , tmp ) ] ;
21464: LD_ADDR_VAR 0 2
21468: PUSH
21469: LD_VAR 0 3
21473: PUSH
21474: LD_INT 1
21476: PPUSH
21477: LD_VAR 0 3
21481: PPUSH
21482: CALL_OW 12
21486: ARRAY
21487: ST_TO_ADDR
// if Crawls ( un ) then
21488: LD_VAR 0 2
21492: PPUSH
21493: CALL_OW 318
21497: IFFALSE 21508
// ComWalk ( un ) ;
21499: LD_VAR 0 2
21503: PPUSH
21504: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21508: LD_VAR 0 2
21512: PPUSH
21513: LD_INT 8
21515: PPUSH
21516: CALL_OW 336
// end ;
21520: PPOPN 3
21522: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21523: LD_EXP 21
21527: PUSH
21528: LD_EXP 65
21532: AND
21533: IFFALSE 21677
21535: GO 21537
21537: DISABLE
21538: LD_INT 0
21540: PPUSH
21541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21542: LD_ADDR_VAR 0 2
21546: PUSH
21547: LD_INT 22
21549: PUSH
21550: LD_OWVAR 2
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 21
21561: PUSH
21562: LD_INT 2
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: LD_INT 34
21574: PUSH
21575: LD_INT 12
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 34
21584: PUSH
21585: LD_INT 51
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 34
21594: PUSH
21595: LD_INT 32
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: LIST
21612: PPUSH
21613: CALL_OW 69
21617: ST_TO_ADDR
// if not tmp then
21618: LD_VAR 0 2
21622: NOT
21623: IFFALSE 21627
// exit ;
21625: GO 21677
// for i in tmp do
21627: LD_ADDR_VAR 0 1
21631: PUSH
21632: LD_VAR 0 2
21636: PUSH
21637: FOR_IN
21638: IFFALSE 21675
// if GetCargo ( i , mat_artifact ) = 0 then
21640: LD_VAR 0 1
21644: PPUSH
21645: LD_INT 4
21647: PPUSH
21648: CALL_OW 289
21652: PUSH
21653: LD_INT 0
21655: EQUAL
21656: IFFALSE 21673
// SetCargo ( i , mat_siberit , 100 ) ;
21658: LD_VAR 0 1
21662: PPUSH
21663: LD_INT 3
21665: PPUSH
21666: LD_INT 100
21668: PPUSH
21669: CALL_OW 290
21673: GO 21637
21675: POP
21676: POP
// end ;
21677: PPOPN 2
21679: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21680: LD_EXP 21
21684: PUSH
21685: LD_EXP 66
21689: AND
21690: IFFALSE 21873
21692: GO 21694
21694: DISABLE
21695: LD_INT 0
21697: PPUSH
21698: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21699: LD_ADDR_VAR 0 2
21703: PUSH
21704: LD_INT 22
21706: PUSH
21707: LD_OWVAR 2
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PPUSH
21716: CALL_OW 69
21720: ST_TO_ADDR
// if not tmp then
21721: LD_VAR 0 2
21725: NOT
21726: IFFALSE 21730
// exit ;
21728: GO 21873
// for i := 1 to 2 do
21730: LD_ADDR_VAR 0 1
21734: PUSH
21735: DOUBLE
21736: LD_INT 1
21738: DEC
21739: ST_TO_ADDR
21740: LD_INT 2
21742: PUSH
21743: FOR_TO
21744: IFFALSE 21871
// begin uc_side := your_side ;
21746: LD_ADDR_OWVAR 20
21750: PUSH
21751: LD_OWVAR 2
21755: ST_TO_ADDR
// uc_nation := nation_american ;
21756: LD_ADDR_OWVAR 21
21760: PUSH
21761: LD_INT 1
21763: ST_TO_ADDR
// vc_chassis := us_morphling ;
21764: LD_ADDR_OWVAR 37
21768: PUSH
21769: LD_INT 5
21771: ST_TO_ADDR
// vc_engine := engine_siberite ;
21772: LD_ADDR_OWVAR 39
21776: PUSH
21777: LD_INT 3
21779: ST_TO_ADDR
// vc_control := control_computer ;
21780: LD_ADDR_OWVAR 38
21784: PUSH
21785: LD_INT 3
21787: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21788: LD_ADDR_OWVAR 40
21792: PUSH
21793: LD_INT 10
21795: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21796: LD_VAR 0 2
21800: PUSH
21801: LD_INT 1
21803: ARRAY
21804: PPUSH
21805: CALL_OW 310
21809: NOT
21810: IFFALSE 21857
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21812: CALL_OW 45
21816: PPUSH
21817: LD_VAR 0 2
21821: PUSH
21822: LD_INT 1
21824: ARRAY
21825: PPUSH
21826: CALL_OW 250
21830: PPUSH
21831: LD_VAR 0 2
21835: PUSH
21836: LD_INT 1
21838: ARRAY
21839: PPUSH
21840: CALL_OW 251
21844: PPUSH
21845: LD_INT 12
21847: PPUSH
21848: LD_INT 1
21850: PPUSH
21851: CALL_OW 50
21855: GO 21869
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21857: CALL_OW 45
21861: PPUSH
21862: LD_INT 1
21864: PPUSH
21865: CALL_OW 51
// end ;
21869: GO 21743
21871: POP
21872: POP
// end ;
21873: PPOPN 2
21875: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21876: LD_EXP 21
21880: PUSH
21881: LD_EXP 67
21885: AND
21886: IFFALSE 22108
21888: GO 21890
21890: DISABLE
21891: LD_INT 0
21893: PPUSH
21894: PPUSH
21895: PPUSH
21896: PPUSH
21897: PPUSH
21898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21899: LD_ADDR_VAR 0 6
21903: PUSH
21904: LD_INT 22
21906: PUSH
21907: LD_OWVAR 2
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 21
21918: PUSH
21919: LD_INT 1
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 3
21928: PUSH
21929: LD_INT 23
21931: PUSH
21932: LD_INT 0
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: LIST
21947: PPUSH
21948: CALL_OW 69
21952: ST_TO_ADDR
// if not tmp then
21953: LD_VAR 0 6
21957: NOT
21958: IFFALSE 21962
// exit ;
21960: GO 22108
// s1 := rand ( 1 , 4 ) ;
21962: LD_ADDR_VAR 0 2
21966: PUSH
21967: LD_INT 1
21969: PPUSH
21970: LD_INT 4
21972: PPUSH
21973: CALL_OW 12
21977: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21978: LD_ADDR_VAR 0 4
21982: PUSH
21983: LD_VAR 0 6
21987: PUSH
21988: LD_INT 1
21990: ARRAY
21991: PPUSH
21992: LD_VAR 0 2
21996: PPUSH
21997: CALL_OW 259
22001: ST_TO_ADDR
// if s1 = 1 then
22002: LD_VAR 0 2
22006: PUSH
22007: LD_INT 1
22009: EQUAL
22010: IFFALSE 22030
// s2 := rand ( 2 , 4 ) else
22012: LD_ADDR_VAR 0 3
22016: PUSH
22017: LD_INT 2
22019: PPUSH
22020: LD_INT 4
22022: PPUSH
22023: CALL_OW 12
22027: ST_TO_ADDR
22028: GO 22038
// s2 := 1 ;
22030: LD_ADDR_VAR 0 3
22034: PUSH
22035: LD_INT 1
22037: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22038: LD_ADDR_VAR 0 5
22042: PUSH
22043: LD_VAR 0 6
22047: PUSH
22048: LD_INT 1
22050: ARRAY
22051: PPUSH
22052: LD_VAR 0 3
22056: PPUSH
22057: CALL_OW 259
22061: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22062: LD_VAR 0 6
22066: PUSH
22067: LD_INT 1
22069: ARRAY
22070: PPUSH
22071: LD_VAR 0 2
22075: PPUSH
22076: LD_VAR 0 5
22080: PPUSH
22081: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22085: LD_VAR 0 6
22089: PUSH
22090: LD_INT 1
22092: ARRAY
22093: PPUSH
22094: LD_VAR 0 3
22098: PPUSH
22099: LD_VAR 0 4
22103: PPUSH
22104: CALL_OW 237
// end ;
22108: PPOPN 6
22110: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22111: LD_EXP 21
22115: PUSH
22116: LD_EXP 68
22120: AND
22121: IFFALSE 22200
22123: GO 22125
22125: DISABLE
22126: LD_INT 0
22128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22129: LD_ADDR_VAR 0 1
22133: PUSH
22134: LD_INT 22
22136: PUSH
22137: LD_OWVAR 2
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 30
22148: PUSH
22149: LD_INT 3
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PPUSH
22160: CALL_OW 69
22164: ST_TO_ADDR
// if not tmp then
22165: LD_VAR 0 1
22169: NOT
22170: IFFALSE 22174
// exit ;
22172: GO 22200
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22174: LD_VAR 0 1
22178: PUSH
22179: LD_INT 1
22181: PPUSH
22182: LD_VAR 0 1
22186: PPUSH
22187: CALL_OW 12
22191: ARRAY
22192: PPUSH
22193: LD_INT 1
22195: PPUSH
22196: CALL_OW 234
// end ;
22200: PPOPN 1
22202: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22203: LD_EXP 21
22207: PUSH
22208: LD_EXP 69
22212: AND
22213: IFFALSE 22325
22215: GO 22217
22217: DISABLE
22218: LD_INT 0
22220: PPUSH
22221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22222: LD_ADDR_VAR 0 2
22226: PUSH
22227: LD_INT 22
22229: PUSH
22230: LD_OWVAR 2
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 2
22241: PUSH
22242: LD_INT 30
22244: PUSH
22245: LD_INT 27
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 30
22254: PUSH
22255: LD_INT 26
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 30
22264: PUSH
22265: LD_INT 28
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PPUSH
22282: CALL_OW 69
22286: ST_TO_ADDR
// if not tmp then
22287: LD_VAR 0 2
22291: NOT
22292: IFFALSE 22296
// exit ;
22294: GO 22325
// for i in tmp do
22296: LD_ADDR_VAR 0 1
22300: PUSH
22301: LD_VAR 0 2
22305: PUSH
22306: FOR_IN
22307: IFFALSE 22323
// SetLives ( i , 1 ) ;
22309: LD_VAR 0 1
22313: PPUSH
22314: LD_INT 1
22316: PPUSH
22317: CALL_OW 234
22321: GO 22306
22323: POP
22324: POP
// end ;
22325: PPOPN 2
22327: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22328: LD_EXP 21
22332: PUSH
22333: LD_EXP 70
22337: AND
22338: IFFALSE 22625
22340: GO 22342
22342: DISABLE
22343: LD_INT 0
22345: PPUSH
22346: PPUSH
22347: PPUSH
// begin i := rand ( 1 , 7 ) ;
22348: LD_ADDR_VAR 0 1
22352: PUSH
22353: LD_INT 1
22355: PPUSH
22356: LD_INT 7
22358: PPUSH
22359: CALL_OW 12
22363: ST_TO_ADDR
// case i of 1 :
22364: LD_VAR 0 1
22368: PUSH
22369: LD_INT 1
22371: DOUBLE
22372: EQUAL
22373: IFTRUE 22377
22375: GO 22387
22377: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22378: LD_STRING earthquake(getX(game), 0, 32)
22380: PPUSH
22381: CALL_OW 559
22385: GO 22625
22387: LD_INT 2
22389: DOUBLE
22390: EQUAL
22391: IFTRUE 22395
22393: GO 22409
22395: POP
// begin ToLua ( displayStucuk(); ) ;
22396: LD_STRING displayStucuk();
22398: PPUSH
22399: CALL_OW 559
// ResetFog ;
22403: CALL_OW 335
// end ; 3 :
22407: GO 22625
22409: LD_INT 3
22411: DOUBLE
22412: EQUAL
22413: IFTRUE 22417
22415: GO 22521
22417: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22418: LD_ADDR_VAR 0 2
22422: PUSH
22423: LD_INT 22
22425: PUSH
22426: LD_OWVAR 2
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 25
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PPUSH
22449: CALL_OW 69
22453: ST_TO_ADDR
// if not tmp then
22454: LD_VAR 0 2
22458: NOT
22459: IFFALSE 22463
// exit ;
22461: GO 22625
// un := tmp [ rand ( 1 , tmp ) ] ;
22463: LD_ADDR_VAR 0 3
22467: PUSH
22468: LD_VAR 0 2
22472: PUSH
22473: LD_INT 1
22475: PPUSH
22476: LD_VAR 0 2
22480: PPUSH
22481: CALL_OW 12
22485: ARRAY
22486: ST_TO_ADDR
// if Crawls ( un ) then
22487: LD_VAR 0 3
22491: PPUSH
22492: CALL_OW 318
22496: IFFALSE 22507
// ComWalk ( un ) ;
22498: LD_VAR 0 3
22502: PPUSH
22503: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22507: LD_VAR 0 3
22511: PPUSH
22512: LD_INT 8
22514: PPUSH
22515: CALL_OW 336
// end ; 4 :
22519: GO 22625
22521: LD_INT 4
22523: DOUBLE
22524: EQUAL
22525: IFTRUE 22529
22527: GO 22603
22529: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22530: LD_ADDR_VAR 0 2
22534: PUSH
22535: LD_INT 22
22537: PUSH
22538: LD_OWVAR 2
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 30
22549: PUSH
22550: LD_INT 29
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PPUSH
22561: CALL_OW 69
22565: ST_TO_ADDR
// if not tmp then
22566: LD_VAR 0 2
22570: NOT
22571: IFFALSE 22575
// exit ;
22573: GO 22625
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22575: LD_VAR 0 2
22579: PUSH
22580: LD_INT 1
22582: ARRAY
22583: PPUSH
22584: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22588: LD_VAR 0 2
22592: PUSH
22593: LD_INT 1
22595: ARRAY
22596: PPUSH
22597: CALL_OW 65
// end ; 5 .. 7 :
22601: GO 22625
22603: LD_INT 5
22605: DOUBLE
22606: GREATEREQUAL
22607: IFFALSE 22615
22609: LD_INT 7
22611: DOUBLE
22612: LESSEQUAL
22613: IFTRUE 22617
22615: GO 22624
22617: POP
// StreamSibBomb ; end ;
22618: CALL 18862 0 0
22622: GO 22625
22624: POP
// end ;
22625: PPOPN 3
22627: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22628: LD_EXP 21
22632: PUSH
22633: LD_EXP 71
22637: AND
22638: IFFALSE 22794
22640: GO 22642
22642: DISABLE
22643: LD_INT 0
22645: PPUSH
22646: PPUSH
22647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22648: LD_ADDR_VAR 0 2
22652: PUSH
22653: LD_INT 81
22655: PUSH
22656: LD_OWVAR 2
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 2
22667: PUSH
22668: LD_INT 21
22670: PUSH
22671: LD_INT 1
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 21
22680: PUSH
22681: LD_INT 2
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: LIST
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PPUSH
22697: CALL_OW 69
22701: ST_TO_ADDR
// if not tmp then
22702: LD_VAR 0 2
22706: NOT
22707: IFFALSE 22711
// exit ;
22709: GO 22794
// p := 0 ;
22711: LD_ADDR_VAR 0 3
22715: PUSH
22716: LD_INT 0
22718: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22719: LD_INT 35
22721: PPUSH
22722: CALL_OW 67
// p := p + 1 ;
22726: LD_ADDR_VAR 0 3
22730: PUSH
22731: LD_VAR 0 3
22735: PUSH
22736: LD_INT 1
22738: PLUS
22739: ST_TO_ADDR
// for i in tmp do
22740: LD_ADDR_VAR 0 1
22744: PUSH
22745: LD_VAR 0 2
22749: PUSH
22750: FOR_IN
22751: IFFALSE 22782
// if GetLives ( i ) < 1000 then
22753: LD_VAR 0 1
22757: PPUSH
22758: CALL_OW 256
22762: PUSH
22763: LD_INT 1000
22765: LESS
22766: IFFALSE 22780
// SetLives ( i , 1000 ) ;
22768: LD_VAR 0 1
22772: PPUSH
22773: LD_INT 1000
22775: PPUSH
22776: CALL_OW 234
22780: GO 22750
22782: POP
22783: POP
// until p > 20 ;
22784: LD_VAR 0 3
22788: PUSH
22789: LD_INT 20
22791: GREATER
22792: IFFALSE 22719
// end ;
22794: PPOPN 3
22796: END
// every 0 0$1 trigger StreamModeActive and sTime do
22797: LD_EXP 21
22801: PUSH
22802: LD_EXP 72
22806: AND
22807: IFFALSE 22842
22809: GO 22811
22811: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22812: LD_INT 28
22814: PPUSH
22815: LD_OWVAR 2
22819: PPUSH
22820: LD_INT 2
22822: PPUSH
22823: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22827: LD_INT 30
22829: PPUSH
22830: LD_OWVAR 2
22834: PPUSH
22835: LD_INT 2
22837: PPUSH
22838: CALL_OW 322
// end ;
22842: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22843: LD_EXP 21
22847: PUSH
22848: LD_EXP 73
22852: AND
22853: IFFALSE 22974
22855: GO 22857
22857: DISABLE
22858: LD_INT 0
22860: PPUSH
22861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22862: LD_ADDR_VAR 0 2
22866: PUSH
22867: LD_INT 22
22869: PUSH
22870: LD_OWVAR 2
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 21
22881: PUSH
22882: LD_INT 1
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 3
22891: PUSH
22892: LD_INT 23
22894: PUSH
22895: LD_INT 0
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: LIST
22910: PPUSH
22911: CALL_OW 69
22915: ST_TO_ADDR
// if not tmp then
22916: LD_VAR 0 2
22920: NOT
22921: IFFALSE 22925
// exit ;
22923: GO 22974
// for i in tmp do
22925: LD_ADDR_VAR 0 1
22929: PUSH
22930: LD_VAR 0 2
22934: PUSH
22935: FOR_IN
22936: IFFALSE 22972
// begin if Crawls ( i ) then
22938: LD_VAR 0 1
22942: PPUSH
22943: CALL_OW 318
22947: IFFALSE 22958
// ComWalk ( i ) ;
22949: LD_VAR 0 1
22953: PPUSH
22954: CALL_OW 138
// SetClass ( i , 2 ) ;
22958: LD_VAR 0 1
22962: PPUSH
22963: LD_INT 2
22965: PPUSH
22966: CALL_OW 336
// end ;
22970: GO 22935
22972: POP
22973: POP
// end ;
22974: PPOPN 2
22976: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22977: LD_EXP 21
22981: PUSH
22982: LD_EXP 74
22986: AND
22987: IFFALSE 23275
22989: GO 22991
22991: DISABLE
22992: LD_INT 0
22994: PPUSH
22995: PPUSH
22996: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22997: LD_OWVAR 2
23001: PPUSH
23002: LD_INT 9
23004: PPUSH
23005: LD_INT 1
23007: PPUSH
23008: LD_INT 1
23010: PPUSH
23011: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23015: LD_INT 9
23017: PPUSH
23018: LD_OWVAR 2
23022: PPUSH
23023: CALL_OW 343
// uc_side := 9 ;
23027: LD_ADDR_OWVAR 20
23031: PUSH
23032: LD_INT 9
23034: ST_TO_ADDR
// uc_nation := 2 ;
23035: LD_ADDR_OWVAR 21
23039: PUSH
23040: LD_INT 2
23042: ST_TO_ADDR
// hc_name := Dark Warrior ;
23043: LD_ADDR_OWVAR 26
23047: PUSH
23048: LD_STRING Dark Warrior
23050: ST_TO_ADDR
// hc_gallery :=  ;
23051: LD_ADDR_OWVAR 33
23055: PUSH
23056: LD_STRING 
23058: ST_TO_ADDR
// hc_noskilllimit := true ;
23059: LD_ADDR_OWVAR 76
23063: PUSH
23064: LD_INT 1
23066: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23067: LD_ADDR_OWVAR 31
23071: PUSH
23072: LD_INT 30
23074: PUSH
23075: LD_INT 30
23077: PUSH
23078: LD_INT 30
23080: PUSH
23081: LD_INT 30
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: ST_TO_ADDR
// un := CreateHuman ;
23090: LD_ADDR_VAR 0 3
23094: PUSH
23095: CALL_OW 44
23099: ST_TO_ADDR
// hc_noskilllimit := false ;
23100: LD_ADDR_OWVAR 76
23104: PUSH
23105: LD_INT 0
23107: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23108: LD_VAR 0 3
23112: PPUSH
23113: LD_INT 1
23115: PPUSH
23116: CALL_OW 51
// ToLua ( playRanger() ) ;
23120: LD_STRING playRanger()
23122: PPUSH
23123: CALL_OW 559
// p := 0 ;
23127: LD_ADDR_VAR 0 2
23131: PUSH
23132: LD_INT 0
23134: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23135: LD_INT 35
23137: PPUSH
23138: CALL_OW 67
// p := p + 1 ;
23142: LD_ADDR_VAR 0 2
23146: PUSH
23147: LD_VAR 0 2
23151: PUSH
23152: LD_INT 1
23154: PLUS
23155: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23156: LD_VAR 0 3
23160: PPUSH
23161: CALL_OW 256
23165: PUSH
23166: LD_INT 1000
23168: LESS
23169: IFFALSE 23183
// SetLives ( un , 1000 ) ;
23171: LD_VAR 0 3
23175: PPUSH
23176: LD_INT 1000
23178: PPUSH
23179: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23183: LD_VAR 0 3
23187: PPUSH
23188: LD_INT 81
23190: PUSH
23191: LD_OWVAR 2
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 91
23202: PUSH
23203: LD_VAR 0 3
23207: PUSH
23208: LD_INT 30
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PPUSH
23220: CALL_OW 69
23224: PPUSH
23225: LD_VAR 0 3
23229: PPUSH
23230: CALL_OW 74
23234: PPUSH
23235: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23239: LD_VAR 0 2
23243: PUSH
23244: LD_INT 80
23246: GREATER
23247: PUSH
23248: LD_VAR 0 3
23252: PPUSH
23253: CALL_OW 301
23257: OR
23258: IFFALSE 23135
// if un then
23260: LD_VAR 0 3
23264: IFFALSE 23275
// RemoveUnit ( un ) ;
23266: LD_VAR 0 3
23270: PPUSH
23271: CALL_OW 64
// end ;
23275: PPOPN 3
23277: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23278: LD_EXP 75
23282: IFFALSE 23398
23284: GO 23286
23286: DISABLE
23287: LD_INT 0
23289: PPUSH
23290: PPUSH
23291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23292: LD_ADDR_VAR 0 2
23296: PUSH
23297: LD_INT 81
23299: PUSH
23300: LD_OWVAR 2
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 21
23311: PUSH
23312: LD_INT 1
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PPUSH
23323: CALL_OW 69
23327: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23328: LD_STRING playComputer()
23330: PPUSH
23331: CALL_OW 559
// if not tmp then
23335: LD_VAR 0 2
23339: NOT
23340: IFFALSE 23344
// exit ;
23342: GO 23398
// for i in tmp do
23344: LD_ADDR_VAR 0 1
23348: PUSH
23349: LD_VAR 0 2
23353: PUSH
23354: FOR_IN
23355: IFFALSE 23396
// for j := 1 to 4 do
23357: LD_ADDR_VAR 0 3
23361: PUSH
23362: DOUBLE
23363: LD_INT 1
23365: DEC
23366: ST_TO_ADDR
23367: LD_INT 4
23369: PUSH
23370: FOR_TO
23371: IFFALSE 23392
// SetSkill ( i , j , 10 ) ;
23373: LD_VAR 0 1
23377: PPUSH
23378: LD_VAR 0 3
23382: PPUSH
23383: LD_INT 10
23385: PPUSH
23386: CALL_OW 237
23390: GO 23370
23392: POP
23393: POP
23394: GO 23354
23396: POP
23397: POP
// end ;
23398: PPOPN 3
23400: END
// every 0 0$1 trigger s30 do var i , tmp ;
23401: LD_EXP 76
23405: IFFALSE 23474
23407: GO 23409
23409: DISABLE
23410: LD_INT 0
23412: PPUSH
23413: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23414: LD_ADDR_VAR 0 2
23418: PUSH
23419: LD_INT 22
23421: PUSH
23422: LD_OWVAR 2
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PPUSH
23431: CALL_OW 69
23435: ST_TO_ADDR
// if not tmp then
23436: LD_VAR 0 2
23440: NOT
23441: IFFALSE 23445
// exit ;
23443: GO 23474
// for i in tmp do
23445: LD_ADDR_VAR 0 1
23449: PUSH
23450: LD_VAR 0 2
23454: PUSH
23455: FOR_IN
23456: IFFALSE 23472
// SetLives ( i , 300 ) ;
23458: LD_VAR 0 1
23462: PPUSH
23463: LD_INT 300
23465: PPUSH
23466: CALL_OW 234
23470: GO 23455
23472: POP
23473: POP
// end ;
23474: PPOPN 2
23476: END
// every 0 0$1 trigger s60 do var i , tmp ;
23477: LD_EXP 77
23481: IFFALSE 23550
23483: GO 23485
23485: DISABLE
23486: LD_INT 0
23488: PPUSH
23489: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23490: LD_ADDR_VAR 0 2
23494: PUSH
23495: LD_INT 22
23497: PUSH
23498: LD_OWVAR 2
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PPUSH
23507: CALL_OW 69
23511: ST_TO_ADDR
// if not tmp then
23512: LD_VAR 0 2
23516: NOT
23517: IFFALSE 23521
// exit ;
23519: GO 23550
// for i in tmp do
23521: LD_ADDR_VAR 0 1
23525: PUSH
23526: LD_VAR 0 2
23530: PUSH
23531: FOR_IN
23532: IFFALSE 23548
// SetLives ( i , 600 ) ;
23534: LD_VAR 0 1
23538: PPUSH
23539: LD_INT 600
23541: PPUSH
23542: CALL_OW 234
23546: GO 23531
23548: POP
23549: POP
// end ;
23550: PPOPN 2
23552: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23553: LD_INT 0
23555: PPUSH
// case cmd of 301 :
23556: LD_VAR 0 1
23560: PUSH
23561: LD_INT 301
23563: DOUBLE
23564: EQUAL
23565: IFTRUE 23569
23567: GO 23601
23569: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23570: LD_VAR 0 6
23574: PPUSH
23575: LD_VAR 0 7
23579: PPUSH
23580: LD_VAR 0 8
23584: PPUSH
23585: LD_VAR 0 4
23589: PPUSH
23590: LD_VAR 0 5
23594: PPUSH
23595: CALL 24802 0 5
23599: GO 23722
23601: LD_INT 302
23603: DOUBLE
23604: EQUAL
23605: IFTRUE 23609
23607: GO 23646
23609: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23610: LD_VAR 0 6
23614: PPUSH
23615: LD_VAR 0 7
23619: PPUSH
23620: LD_VAR 0 8
23624: PPUSH
23625: LD_VAR 0 9
23629: PPUSH
23630: LD_VAR 0 4
23634: PPUSH
23635: LD_VAR 0 5
23639: PPUSH
23640: CALL 24893 0 6
23644: GO 23722
23646: LD_INT 303
23648: DOUBLE
23649: EQUAL
23650: IFTRUE 23654
23652: GO 23691
23654: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23655: LD_VAR 0 6
23659: PPUSH
23660: LD_VAR 0 7
23664: PPUSH
23665: LD_VAR 0 8
23669: PPUSH
23670: LD_VAR 0 9
23674: PPUSH
23675: LD_VAR 0 4
23679: PPUSH
23680: LD_VAR 0 5
23684: PPUSH
23685: CALL 23727 0 6
23689: GO 23722
23691: LD_INT 304
23693: DOUBLE
23694: EQUAL
23695: IFTRUE 23699
23697: GO 23721
23699: POP
// hHackTeleport ( unit , x , y ) ; end ;
23700: LD_VAR 0 2
23704: PPUSH
23705: LD_VAR 0 4
23709: PPUSH
23710: LD_VAR 0 5
23714: PPUSH
23715: CALL 25486 0 3
23719: GO 23722
23721: POP
// end ;
23722: LD_VAR 0 12
23726: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23727: LD_INT 0
23729: PPUSH
23730: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23731: LD_VAR 0 1
23735: PUSH
23736: LD_INT 1
23738: LESS
23739: PUSH
23740: LD_VAR 0 1
23744: PUSH
23745: LD_INT 3
23747: GREATER
23748: OR
23749: PUSH
23750: LD_VAR 0 5
23754: PPUSH
23755: LD_VAR 0 6
23759: PPUSH
23760: CALL_OW 428
23764: OR
23765: IFFALSE 23769
// exit ;
23767: GO 24489
// uc_side := your_side ;
23769: LD_ADDR_OWVAR 20
23773: PUSH
23774: LD_OWVAR 2
23778: ST_TO_ADDR
// uc_nation := nation ;
23779: LD_ADDR_OWVAR 21
23783: PUSH
23784: LD_VAR 0 1
23788: ST_TO_ADDR
// bc_level = 1 ;
23789: LD_ADDR_OWVAR 43
23793: PUSH
23794: LD_INT 1
23796: ST_TO_ADDR
// case btype of 1 :
23797: LD_VAR 0 2
23801: PUSH
23802: LD_INT 1
23804: DOUBLE
23805: EQUAL
23806: IFTRUE 23810
23808: GO 23821
23810: POP
// bc_type := b_depot ; 2 :
23811: LD_ADDR_OWVAR 42
23815: PUSH
23816: LD_INT 0
23818: ST_TO_ADDR
23819: GO 24433
23821: LD_INT 2
23823: DOUBLE
23824: EQUAL
23825: IFTRUE 23829
23827: GO 23840
23829: POP
// bc_type := b_warehouse ; 3 :
23830: LD_ADDR_OWVAR 42
23834: PUSH
23835: LD_INT 1
23837: ST_TO_ADDR
23838: GO 24433
23840: LD_INT 3
23842: DOUBLE
23843: EQUAL
23844: IFTRUE 23848
23846: GO 23859
23848: POP
// bc_type := b_lab ; 4 .. 9 :
23849: LD_ADDR_OWVAR 42
23853: PUSH
23854: LD_INT 6
23856: ST_TO_ADDR
23857: GO 24433
23859: LD_INT 4
23861: DOUBLE
23862: GREATEREQUAL
23863: IFFALSE 23871
23865: LD_INT 9
23867: DOUBLE
23868: LESSEQUAL
23869: IFTRUE 23873
23871: GO 23925
23873: POP
// begin bc_type := b_lab_half ;
23874: LD_ADDR_OWVAR 42
23878: PUSH
23879: LD_INT 7
23881: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23882: LD_ADDR_OWVAR 44
23886: PUSH
23887: LD_INT 10
23889: PUSH
23890: LD_INT 11
23892: PUSH
23893: LD_INT 12
23895: PUSH
23896: LD_INT 15
23898: PUSH
23899: LD_INT 14
23901: PUSH
23902: LD_INT 13
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: PUSH
23913: LD_VAR 0 2
23917: PUSH
23918: LD_INT 3
23920: MINUS
23921: ARRAY
23922: ST_TO_ADDR
// end ; 10 .. 13 :
23923: GO 24433
23925: LD_INT 10
23927: DOUBLE
23928: GREATEREQUAL
23929: IFFALSE 23937
23931: LD_INT 13
23933: DOUBLE
23934: LESSEQUAL
23935: IFTRUE 23939
23937: GO 24016
23939: POP
// begin bc_type := b_lab_full ;
23940: LD_ADDR_OWVAR 42
23944: PUSH
23945: LD_INT 8
23947: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23948: LD_ADDR_OWVAR 44
23952: PUSH
23953: LD_INT 10
23955: PUSH
23956: LD_INT 12
23958: PUSH
23959: LD_INT 14
23961: PUSH
23962: LD_INT 13
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: PUSH
23971: LD_VAR 0 2
23975: PUSH
23976: LD_INT 9
23978: MINUS
23979: ARRAY
23980: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23981: LD_ADDR_OWVAR 45
23985: PUSH
23986: LD_INT 11
23988: PUSH
23989: LD_INT 15
23991: PUSH
23992: LD_INT 12
23994: PUSH
23995: LD_INT 15
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: PUSH
24004: LD_VAR 0 2
24008: PUSH
24009: LD_INT 9
24011: MINUS
24012: ARRAY
24013: ST_TO_ADDR
// end ; 14 :
24014: GO 24433
24016: LD_INT 14
24018: DOUBLE
24019: EQUAL
24020: IFTRUE 24024
24022: GO 24035
24024: POP
// bc_type := b_workshop ; 15 :
24025: LD_ADDR_OWVAR 42
24029: PUSH
24030: LD_INT 2
24032: ST_TO_ADDR
24033: GO 24433
24035: LD_INT 15
24037: DOUBLE
24038: EQUAL
24039: IFTRUE 24043
24041: GO 24054
24043: POP
// bc_type := b_factory ; 16 :
24044: LD_ADDR_OWVAR 42
24048: PUSH
24049: LD_INT 3
24051: ST_TO_ADDR
24052: GO 24433
24054: LD_INT 16
24056: DOUBLE
24057: EQUAL
24058: IFTRUE 24062
24060: GO 24073
24062: POP
// bc_type := b_ext_gun ; 17 :
24063: LD_ADDR_OWVAR 42
24067: PUSH
24068: LD_INT 17
24070: ST_TO_ADDR
24071: GO 24433
24073: LD_INT 17
24075: DOUBLE
24076: EQUAL
24077: IFTRUE 24081
24079: GO 24109
24081: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24082: LD_ADDR_OWVAR 42
24086: PUSH
24087: LD_INT 19
24089: PUSH
24090: LD_INT 23
24092: PUSH
24093: LD_INT 19
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: LIST
24100: PUSH
24101: LD_VAR 0 1
24105: ARRAY
24106: ST_TO_ADDR
24107: GO 24433
24109: LD_INT 18
24111: DOUBLE
24112: EQUAL
24113: IFTRUE 24117
24115: GO 24128
24117: POP
// bc_type := b_ext_radar ; 19 :
24118: LD_ADDR_OWVAR 42
24122: PUSH
24123: LD_INT 20
24125: ST_TO_ADDR
24126: GO 24433
24128: LD_INT 19
24130: DOUBLE
24131: EQUAL
24132: IFTRUE 24136
24134: GO 24147
24136: POP
// bc_type := b_ext_radio ; 20 :
24137: LD_ADDR_OWVAR 42
24141: PUSH
24142: LD_INT 22
24144: ST_TO_ADDR
24145: GO 24433
24147: LD_INT 20
24149: DOUBLE
24150: EQUAL
24151: IFTRUE 24155
24153: GO 24166
24155: POP
// bc_type := b_ext_siberium ; 21 :
24156: LD_ADDR_OWVAR 42
24160: PUSH
24161: LD_INT 21
24163: ST_TO_ADDR
24164: GO 24433
24166: LD_INT 21
24168: DOUBLE
24169: EQUAL
24170: IFTRUE 24174
24172: GO 24185
24174: POP
// bc_type := b_ext_computer ; 22 :
24175: LD_ADDR_OWVAR 42
24179: PUSH
24180: LD_INT 24
24182: ST_TO_ADDR
24183: GO 24433
24185: LD_INT 22
24187: DOUBLE
24188: EQUAL
24189: IFTRUE 24193
24191: GO 24204
24193: POP
// bc_type := b_ext_track ; 23 :
24194: LD_ADDR_OWVAR 42
24198: PUSH
24199: LD_INT 16
24201: ST_TO_ADDR
24202: GO 24433
24204: LD_INT 23
24206: DOUBLE
24207: EQUAL
24208: IFTRUE 24212
24210: GO 24223
24212: POP
// bc_type := b_ext_laser ; 24 :
24213: LD_ADDR_OWVAR 42
24217: PUSH
24218: LD_INT 25
24220: ST_TO_ADDR
24221: GO 24433
24223: LD_INT 24
24225: DOUBLE
24226: EQUAL
24227: IFTRUE 24231
24229: GO 24242
24231: POP
// bc_type := b_control_tower ; 25 :
24232: LD_ADDR_OWVAR 42
24236: PUSH
24237: LD_INT 36
24239: ST_TO_ADDR
24240: GO 24433
24242: LD_INT 25
24244: DOUBLE
24245: EQUAL
24246: IFTRUE 24250
24248: GO 24261
24250: POP
// bc_type := b_breastwork ; 26 :
24251: LD_ADDR_OWVAR 42
24255: PUSH
24256: LD_INT 31
24258: ST_TO_ADDR
24259: GO 24433
24261: LD_INT 26
24263: DOUBLE
24264: EQUAL
24265: IFTRUE 24269
24267: GO 24280
24269: POP
// bc_type := b_bunker ; 27 :
24270: LD_ADDR_OWVAR 42
24274: PUSH
24275: LD_INT 32
24277: ST_TO_ADDR
24278: GO 24433
24280: LD_INT 27
24282: DOUBLE
24283: EQUAL
24284: IFTRUE 24288
24286: GO 24299
24288: POP
// bc_type := b_turret ; 28 :
24289: LD_ADDR_OWVAR 42
24293: PUSH
24294: LD_INT 33
24296: ST_TO_ADDR
24297: GO 24433
24299: LD_INT 28
24301: DOUBLE
24302: EQUAL
24303: IFTRUE 24307
24305: GO 24318
24307: POP
// bc_type := b_armoury ; 29 :
24308: LD_ADDR_OWVAR 42
24312: PUSH
24313: LD_INT 4
24315: ST_TO_ADDR
24316: GO 24433
24318: LD_INT 29
24320: DOUBLE
24321: EQUAL
24322: IFTRUE 24326
24324: GO 24337
24326: POP
// bc_type := b_barracks ; 30 :
24327: LD_ADDR_OWVAR 42
24331: PUSH
24332: LD_INT 5
24334: ST_TO_ADDR
24335: GO 24433
24337: LD_INT 30
24339: DOUBLE
24340: EQUAL
24341: IFTRUE 24345
24343: GO 24356
24345: POP
// bc_type := b_solar_power ; 31 :
24346: LD_ADDR_OWVAR 42
24350: PUSH
24351: LD_INT 27
24353: ST_TO_ADDR
24354: GO 24433
24356: LD_INT 31
24358: DOUBLE
24359: EQUAL
24360: IFTRUE 24364
24362: GO 24375
24364: POP
// bc_type := b_oil_power ; 32 :
24365: LD_ADDR_OWVAR 42
24369: PUSH
24370: LD_INT 26
24372: ST_TO_ADDR
24373: GO 24433
24375: LD_INT 32
24377: DOUBLE
24378: EQUAL
24379: IFTRUE 24383
24381: GO 24394
24383: POP
// bc_type := b_siberite_power ; 33 :
24384: LD_ADDR_OWVAR 42
24388: PUSH
24389: LD_INT 28
24391: ST_TO_ADDR
24392: GO 24433
24394: LD_INT 33
24396: DOUBLE
24397: EQUAL
24398: IFTRUE 24402
24400: GO 24413
24402: POP
// bc_type := b_oil_mine ; 34 :
24403: LD_ADDR_OWVAR 42
24407: PUSH
24408: LD_INT 29
24410: ST_TO_ADDR
24411: GO 24433
24413: LD_INT 34
24415: DOUBLE
24416: EQUAL
24417: IFTRUE 24421
24419: GO 24432
24421: POP
// bc_type := b_siberite_mine ; end ;
24422: LD_ADDR_OWVAR 42
24426: PUSH
24427: LD_INT 30
24429: ST_TO_ADDR
24430: GO 24433
24432: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24433: LD_ADDR_VAR 0 8
24437: PUSH
24438: LD_VAR 0 5
24442: PPUSH
24443: LD_VAR 0 6
24447: PPUSH
24448: LD_VAR 0 3
24452: PPUSH
24453: CALL_OW 47
24457: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24458: LD_OWVAR 42
24462: PUSH
24463: LD_INT 32
24465: PUSH
24466: LD_INT 33
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: IN
24473: IFFALSE 24489
// PlaceWeaponTurret ( b , weapon ) ;
24475: LD_VAR 0 8
24479: PPUSH
24480: LD_VAR 0 4
24484: PPUSH
24485: CALL_OW 431
// end ;
24489: LD_VAR 0 7
24493: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24494: LD_INT 0
24496: PPUSH
24497: PPUSH
24498: PPUSH
24499: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24500: LD_ADDR_VAR 0 4
24504: PUSH
24505: LD_INT 22
24507: PUSH
24508: LD_OWVAR 2
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: LD_INT 30
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 30
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: LIST
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PPUSH
24549: CALL_OW 69
24553: ST_TO_ADDR
// if not tmp then
24554: LD_VAR 0 4
24558: NOT
24559: IFFALSE 24563
// exit ;
24561: GO 24622
// for i in tmp do
24563: LD_ADDR_VAR 0 2
24567: PUSH
24568: LD_VAR 0 4
24572: PUSH
24573: FOR_IN
24574: IFFALSE 24620
// for j = 1 to 3 do
24576: LD_ADDR_VAR 0 3
24580: PUSH
24581: DOUBLE
24582: LD_INT 1
24584: DEC
24585: ST_TO_ADDR
24586: LD_INT 3
24588: PUSH
24589: FOR_TO
24590: IFFALSE 24616
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24592: LD_VAR 0 2
24596: PPUSH
24597: CALL_OW 274
24601: PPUSH
24602: LD_VAR 0 3
24606: PPUSH
24607: LD_INT 99999
24609: PPUSH
24610: CALL_OW 277
24614: GO 24589
24616: POP
24617: POP
24618: GO 24573
24620: POP
24621: POP
// end ;
24622: LD_VAR 0 1
24626: RET
// export function hHackSetLevel10 ; var i , j ; begin
24627: LD_INT 0
24629: PPUSH
24630: PPUSH
24631: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24632: LD_ADDR_VAR 0 2
24636: PUSH
24637: LD_INT 21
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PPUSH
24647: CALL_OW 69
24651: PUSH
24652: FOR_IN
24653: IFFALSE 24705
// if IsSelected ( i ) then
24655: LD_VAR 0 2
24659: PPUSH
24660: CALL_OW 306
24664: IFFALSE 24703
// begin for j := 1 to 4 do
24666: LD_ADDR_VAR 0 3
24670: PUSH
24671: DOUBLE
24672: LD_INT 1
24674: DEC
24675: ST_TO_ADDR
24676: LD_INT 4
24678: PUSH
24679: FOR_TO
24680: IFFALSE 24701
// SetSkill ( i , j , 10 ) ;
24682: LD_VAR 0 2
24686: PPUSH
24687: LD_VAR 0 3
24691: PPUSH
24692: LD_INT 10
24694: PPUSH
24695: CALL_OW 237
24699: GO 24679
24701: POP
24702: POP
// end ;
24703: GO 24652
24705: POP
24706: POP
// end ;
24707: LD_VAR 0 1
24711: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24712: LD_INT 0
24714: PPUSH
24715: PPUSH
24716: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24717: LD_ADDR_VAR 0 2
24721: PUSH
24722: LD_INT 22
24724: PUSH
24725: LD_OWVAR 2
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 21
24736: PUSH
24737: LD_INT 1
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PPUSH
24748: CALL_OW 69
24752: PUSH
24753: FOR_IN
24754: IFFALSE 24795
// begin for j := 1 to 4 do
24756: LD_ADDR_VAR 0 3
24760: PUSH
24761: DOUBLE
24762: LD_INT 1
24764: DEC
24765: ST_TO_ADDR
24766: LD_INT 4
24768: PUSH
24769: FOR_TO
24770: IFFALSE 24791
// SetSkill ( i , j , 10 ) ;
24772: LD_VAR 0 2
24776: PPUSH
24777: LD_VAR 0 3
24781: PPUSH
24782: LD_INT 10
24784: PPUSH
24785: CALL_OW 237
24789: GO 24769
24791: POP
24792: POP
// end ;
24793: GO 24753
24795: POP
24796: POP
// end ;
24797: LD_VAR 0 1
24801: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24802: LD_INT 0
24804: PPUSH
// uc_side := your_side ;
24805: LD_ADDR_OWVAR 20
24809: PUSH
24810: LD_OWVAR 2
24814: ST_TO_ADDR
// uc_nation := nation ;
24815: LD_ADDR_OWVAR 21
24819: PUSH
24820: LD_VAR 0 1
24824: ST_TO_ADDR
// InitHc ;
24825: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24829: LD_INT 0
24831: PPUSH
24832: LD_VAR 0 2
24836: PPUSH
24837: LD_VAR 0 3
24841: PPUSH
24842: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24846: LD_VAR 0 4
24850: PPUSH
24851: LD_VAR 0 5
24855: PPUSH
24856: CALL_OW 428
24860: PUSH
24861: LD_INT 0
24863: EQUAL
24864: IFFALSE 24888
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24866: CALL_OW 44
24870: PPUSH
24871: LD_VAR 0 4
24875: PPUSH
24876: LD_VAR 0 5
24880: PPUSH
24881: LD_INT 1
24883: PPUSH
24884: CALL_OW 48
// end ;
24888: LD_VAR 0 6
24892: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24893: LD_INT 0
24895: PPUSH
24896: PPUSH
// uc_side := your_side ;
24897: LD_ADDR_OWVAR 20
24901: PUSH
24902: LD_OWVAR 2
24906: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24907: LD_VAR 0 1
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: LD_INT 2
24917: PUSH
24918: LD_INT 3
24920: PUSH
24921: LD_INT 4
24923: PUSH
24924: LD_INT 5
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: IN
24934: IFFALSE 24946
// uc_nation := nation_american else
24936: LD_ADDR_OWVAR 21
24940: PUSH
24941: LD_INT 1
24943: ST_TO_ADDR
24944: GO 24989
// if chassis in [ 11 , 12 , 13 , 14 ] then
24946: LD_VAR 0 1
24950: PUSH
24951: LD_INT 11
24953: PUSH
24954: LD_INT 12
24956: PUSH
24957: LD_INT 13
24959: PUSH
24960: LD_INT 14
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: IN
24969: IFFALSE 24981
// uc_nation := nation_arabian else
24971: LD_ADDR_OWVAR 21
24975: PUSH
24976: LD_INT 2
24978: ST_TO_ADDR
24979: GO 24989
// uc_nation := nation_russian ;
24981: LD_ADDR_OWVAR 21
24985: PUSH
24986: LD_INT 3
24988: ST_TO_ADDR
// vc_chassis := chassis ;
24989: LD_ADDR_OWVAR 37
24993: PUSH
24994: LD_VAR 0 1
24998: ST_TO_ADDR
// vc_engine := engine ;
24999: LD_ADDR_OWVAR 39
25003: PUSH
25004: LD_VAR 0 2
25008: ST_TO_ADDR
// vc_control := control ;
25009: LD_ADDR_OWVAR 38
25013: PUSH
25014: LD_VAR 0 3
25018: ST_TO_ADDR
// vc_weapon := weapon ;
25019: LD_ADDR_OWVAR 40
25023: PUSH
25024: LD_VAR 0 4
25028: ST_TO_ADDR
// un := CreateVehicle ;
25029: LD_ADDR_VAR 0 8
25033: PUSH
25034: CALL_OW 45
25038: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25039: LD_VAR 0 8
25043: PPUSH
25044: LD_INT 0
25046: PPUSH
25047: LD_INT 5
25049: PPUSH
25050: CALL_OW 12
25054: PPUSH
25055: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25059: LD_VAR 0 8
25063: PPUSH
25064: LD_VAR 0 5
25068: PPUSH
25069: LD_VAR 0 6
25073: PPUSH
25074: LD_INT 1
25076: PPUSH
25077: CALL_OW 48
// end ;
25081: LD_VAR 0 7
25085: RET
// export hInvincible ; every 1 do
25086: GO 25088
25088: DISABLE
// hInvincible := [ ] ;
25089: LD_ADDR_EXP 78
25093: PUSH
25094: EMPTY
25095: ST_TO_ADDR
25096: END
// every 10 do var i ;
25097: GO 25099
25099: DISABLE
25100: LD_INT 0
25102: PPUSH
// begin enable ;
25103: ENABLE
// if not hInvincible then
25104: LD_EXP 78
25108: NOT
25109: IFFALSE 25113
// exit ;
25111: GO 25157
// for i in hInvincible do
25113: LD_ADDR_VAR 0 1
25117: PUSH
25118: LD_EXP 78
25122: PUSH
25123: FOR_IN
25124: IFFALSE 25155
// if GetLives ( i ) < 1000 then
25126: LD_VAR 0 1
25130: PPUSH
25131: CALL_OW 256
25135: PUSH
25136: LD_INT 1000
25138: LESS
25139: IFFALSE 25153
// SetLives ( i , 1000 ) ;
25141: LD_VAR 0 1
25145: PPUSH
25146: LD_INT 1000
25148: PPUSH
25149: CALL_OW 234
25153: GO 25123
25155: POP
25156: POP
// end ;
25157: PPOPN 1
25159: END
// export function hHackInvincible ; var i ; begin
25160: LD_INT 0
25162: PPUSH
25163: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25164: LD_ADDR_VAR 0 2
25168: PUSH
25169: LD_INT 2
25171: PUSH
25172: LD_INT 21
25174: PUSH
25175: LD_INT 1
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 21
25184: PUSH
25185: LD_INT 2
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: LIST
25196: PPUSH
25197: CALL_OW 69
25201: PUSH
25202: FOR_IN
25203: IFFALSE 25264
// if IsSelected ( i ) then
25205: LD_VAR 0 2
25209: PPUSH
25210: CALL_OW 306
25214: IFFALSE 25262
// begin if i in hInvincible then
25216: LD_VAR 0 2
25220: PUSH
25221: LD_EXP 78
25225: IN
25226: IFFALSE 25246
// hInvincible := hInvincible diff i else
25228: LD_ADDR_EXP 78
25232: PUSH
25233: LD_EXP 78
25237: PUSH
25238: LD_VAR 0 2
25242: DIFF
25243: ST_TO_ADDR
25244: GO 25262
// hInvincible := hInvincible union i ;
25246: LD_ADDR_EXP 78
25250: PUSH
25251: LD_EXP 78
25255: PUSH
25256: LD_VAR 0 2
25260: UNION
25261: ST_TO_ADDR
// end ;
25262: GO 25202
25264: POP
25265: POP
// end ;
25266: LD_VAR 0 1
25270: RET
// export function hHackInvisible ; var i , j ; begin
25271: LD_INT 0
25273: PPUSH
25274: PPUSH
25275: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25276: LD_ADDR_VAR 0 2
25280: PUSH
25281: LD_INT 21
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PPUSH
25291: CALL_OW 69
25295: PUSH
25296: FOR_IN
25297: IFFALSE 25321
// if IsSelected ( i ) then
25299: LD_VAR 0 2
25303: PPUSH
25304: CALL_OW 306
25308: IFFALSE 25319
// ComForceInvisible ( i ) ;
25310: LD_VAR 0 2
25314: PPUSH
25315: CALL_OW 496
25319: GO 25296
25321: POP
25322: POP
// end ;
25323: LD_VAR 0 1
25327: RET
// export function hHackChangeYourSide ; begin
25328: LD_INT 0
25330: PPUSH
// if your_side = 8 then
25331: LD_OWVAR 2
25335: PUSH
25336: LD_INT 8
25338: EQUAL
25339: IFFALSE 25351
// your_side := 0 else
25341: LD_ADDR_OWVAR 2
25345: PUSH
25346: LD_INT 0
25348: ST_TO_ADDR
25349: GO 25365
// your_side := your_side + 1 ;
25351: LD_ADDR_OWVAR 2
25355: PUSH
25356: LD_OWVAR 2
25360: PUSH
25361: LD_INT 1
25363: PLUS
25364: ST_TO_ADDR
// end ;
25365: LD_VAR 0 1
25369: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25370: LD_INT 0
25372: PPUSH
25373: PPUSH
25374: PPUSH
// for i in all_units do
25375: LD_ADDR_VAR 0 2
25379: PUSH
25380: LD_OWVAR 3
25384: PUSH
25385: FOR_IN
25386: IFFALSE 25464
// if IsSelected ( i ) then
25388: LD_VAR 0 2
25392: PPUSH
25393: CALL_OW 306
25397: IFFALSE 25462
// begin j := GetSide ( i ) ;
25399: LD_ADDR_VAR 0 3
25403: PUSH
25404: LD_VAR 0 2
25408: PPUSH
25409: CALL_OW 255
25413: ST_TO_ADDR
// if j = 8 then
25414: LD_VAR 0 3
25418: PUSH
25419: LD_INT 8
25421: EQUAL
25422: IFFALSE 25434
// j := 0 else
25424: LD_ADDR_VAR 0 3
25428: PUSH
25429: LD_INT 0
25431: ST_TO_ADDR
25432: GO 25448
// j := j + 1 ;
25434: LD_ADDR_VAR 0 3
25438: PUSH
25439: LD_VAR 0 3
25443: PUSH
25444: LD_INT 1
25446: PLUS
25447: ST_TO_ADDR
// SetSide ( i , j ) ;
25448: LD_VAR 0 2
25452: PPUSH
25453: LD_VAR 0 3
25457: PPUSH
25458: CALL_OW 235
// end ;
25462: GO 25385
25464: POP
25465: POP
// end ;
25466: LD_VAR 0 1
25470: RET
// export function hHackFog ; begin
25471: LD_INT 0
25473: PPUSH
// FogOff ( true ) ;
25474: LD_INT 1
25476: PPUSH
25477: CALL_OW 344
// end ;
25481: LD_VAR 0 1
25485: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25486: LD_INT 0
25488: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25489: LD_VAR 0 1
25493: PPUSH
25494: LD_VAR 0 2
25498: PPUSH
25499: LD_VAR 0 3
25503: PPUSH
25504: LD_INT 1
25506: PPUSH
25507: LD_INT 1
25509: PPUSH
25510: CALL_OW 483
// CenterOnXY ( x , y ) ;
25514: LD_VAR 0 2
25518: PPUSH
25519: LD_VAR 0 3
25523: PPUSH
25524: CALL_OW 84
// end ;
25528: LD_VAR 0 4
25532: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25533: LD_INT 0
25535: PPUSH
25536: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25537: LD_VAR 0 1
25541: NOT
25542: PUSH
25543: LD_VAR 0 2
25547: PPUSH
25548: LD_VAR 0 3
25552: PPUSH
25553: CALL_OW 488
25557: NOT
25558: OR
25559: PUSH
25560: LD_VAR 0 1
25564: PPUSH
25565: CALL_OW 266
25569: PUSH
25570: LD_INT 3
25572: NONEQUAL
25573: PUSH
25574: LD_VAR 0 1
25578: PPUSH
25579: CALL_OW 247
25583: PUSH
25584: LD_INT 1
25586: EQUAL
25587: NOT
25588: AND
25589: OR
25590: IFFALSE 25594
// exit ;
25592: GO 25743
// if GetType ( factory ) = unit_human then
25594: LD_VAR 0 1
25598: PPUSH
25599: CALL_OW 247
25603: PUSH
25604: LD_INT 1
25606: EQUAL
25607: IFFALSE 25624
// factory := IsInUnit ( factory ) ;
25609: LD_ADDR_VAR 0 1
25613: PUSH
25614: LD_VAR 0 1
25618: PPUSH
25619: CALL_OW 310
25623: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25624: LD_VAR 0 1
25628: PPUSH
25629: CALL_OW 266
25633: PUSH
25634: LD_INT 3
25636: NONEQUAL
25637: IFFALSE 25641
// exit ;
25639: GO 25743
// if HexInfo ( x , y ) = factory then
25641: LD_VAR 0 2
25645: PPUSH
25646: LD_VAR 0 3
25650: PPUSH
25651: CALL_OW 428
25655: PUSH
25656: LD_VAR 0 1
25660: EQUAL
25661: IFFALSE 25688
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25663: LD_ADDR_EXP 79
25667: PUSH
25668: LD_EXP 79
25672: PPUSH
25673: LD_VAR 0 1
25677: PPUSH
25678: LD_INT 0
25680: PPUSH
25681: CALL_OW 1
25685: ST_TO_ADDR
25686: GO 25739
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25688: LD_ADDR_EXP 79
25692: PUSH
25693: LD_EXP 79
25697: PPUSH
25698: LD_VAR 0 1
25702: PPUSH
25703: LD_VAR 0 1
25707: PPUSH
25708: CALL_OW 255
25712: PUSH
25713: LD_VAR 0 1
25717: PUSH
25718: LD_VAR 0 2
25722: PUSH
25723: LD_VAR 0 3
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: PPUSH
25734: CALL_OW 1
25738: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25739: CALL 25748 0 0
// end ;
25743: LD_VAR 0 4
25747: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25748: LD_INT 0
25750: PPUSH
25751: PPUSH
25752: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25753: LD_STRING resetFactoryWaypoint();
25755: PPUSH
25756: CALL_OW 559
// if factoryWaypoints then
25760: LD_EXP 79
25764: IFFALSE 25890
// begin list := PrepareArray ( factoryWaypoints ) ;
25766: LD_ADDR_VAR 0 3
25770: PUSH
25771: LD_EXP 79
25775: PPUSH
25776: CALL 72267 0 1
25780: ST_TO_ADDR
// for i := 1 to list do
25781: LD_ADDR_VAR 0 2
25785: PUSH
25786: DOUBLE
25787: LD_INT 1
25789: DEC
25790: ST_TO_ADDR
25791: LD_VAR 0 3
25795: PUSH
25796: FOR_TO
25797: IFFALSE 25888
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25799: LD_STRING setFactoryWaypointXY(
25801: PUSH
25802: LD_VAR 0 3
25806: PUSH
25807: LD_VAR 0 2
25811: ARRAY
25812: PUSH
25813: LD_INT 1
25815: ARRAY
25816: STR
25817: PUSH
25818: LD_STRING ,
25820: STR
25821: PUSH
25822: LD_VAR 0 3
25826: PUSH
25827: LD_VAR 0 2
25831: ARRAY
25832: PUSH
25833: LD_INT 2
25835: ARRAY
25836: STR
25837: PUSH
25838: LD_STRING ,
25840: STR
25841: PUSH
25842: LD_VAR 0 3
25846: PUSH
25847: LD_VAR 0 2
25851: ARRAY
25852: PUSH
25853: LD_INT 3
25855: ARRAY
25856: STR
25857: PUSH
25858: LD_STRING ,
25860: STR
25861: PUSH
25862: LD_VAR 0 3
25866: PUSH
25867: LD_VAR 0 2
25871: ARRAY
25872: PUSH
25873: LD_INT 4
25875: ARRAY
25876: STR
25877: PUSH
25878: LD_STRING )
25880: STR
25881: PPUSH
25882: CALL_OW 559
25886: GO 25796
25888: POP
25889: POP
// end ; end ;
25890: LD_VAR 0 1
25894: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25895: LD_INT 0
25897: PPUSH
// if HexInfo ( x , y ) = warehouse then
25898: LD_VAR 0 2
25902: PPUSH
25903: LD_VAR 0 3
25907: PPUSH
25908: CALL_OW 428
25912: PUSH
25913: LD_VAR 0 1
25917: EQUAL
25918: IFFALSE 25945
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25920: LD_ADDR_EXP 80
25924: PUSH
25925: LD_EXP 80
25929: PPUSH
25930: LD_VAR 0 1
25934: PPUSH
25935: LD_INT 0
25937: PPUSH
25938: CALL_OW 1
25942: ST_TO_ADDR
25943: GO 25996
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25945: LD_ADDR_EXP 80
25949: PUSH
25950: LD_EXP 80
25954: PPUSH
25955: LD_VAR 0 1
25959: PPUSH
25960: LD_VAR 0 1
25964: PPUSH
25965: CALL_OW 255
25969: PUSH
25970: LD_VAR 0 1
25974: PUSH
25975: LD_VAR 0 2
25979: PUSH
25980: LD_VAR 0 3
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: PPUSH
25991: CALL_OW 1
25995: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25996: CALL 26005 0 0
// end ;
26000: LD_VAR 0 4
26004: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26005: LD_INT 0
26007: PPUSH
26008: PPUSH
26009: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26010: LD_STRING resetWarehouseGatheringPoints();
26012: PPUSH
26013: CALL_OW 559
// if warehouseGatheringPoints then
26017: LD_EXP 80
26021: IFFALSE 26147
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26023: LD_ADDR_VAR 0 3
26027: PUSH
26028: LD_EXP 80
26032: PPUSH
26033: CALL 72267 0 1
26037: ST_TO_ADDR
// for i := 1 to list do
26038: LD_ADDR_VAR 0 2
26042: PUSH
26043: DOUBLE
26044: LD_INT 1
26046: DEC
26047: ST_TO_ADDR
26048: LD_VAR 0 3
26052: PUSH
26053: FOR_TO
26054: IFFALSE 26145
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26056: LD_STRING setWarehouseGatheringPointXY(
26058: PUSH
26059: LD_VAR 0 3
26063: PUSH
26064: LD_VAR 0 2
26068: ARRAY
26069: PUSH
26070: LD_INT 1
26072: ARRAY
26073: STR
26074: PUSH
26075: LD_STRING ,
26077: STR
26078: PUSH
26079: LD_VAR 0 3
26083: PUSH
26084: LD_VAR 0 2
26088: ARRAY
26089: PUSH
26090: LD_INT 2
26092: ARRAY
26093: STR
26094: PUSH
26095: LD_STRING ,
26097: STR
26098: PUSH
26099: LD_VAR 0 3
26103: PUSH
26104: LD_VAR 0 2
26108: ARRAY
26109: PUSH
26110: LD_INT 3
26112: ARRAY
26113: STR
26114: PUSH
26115: LD_STRING ,
26117: STR
26118: PUSH
26119: LD_VAR 0 3
26123: PUSH
26124: LD_VAR 0 2
26128: ARRAY
26129: PUSH
26130: LD_INT 4
26132: ARRAY
26133: STR
26134: PUSH
26135: LD_STRING )
26137: STR
26138: PPUSH
26139: CALL_OW 559
26143: GO 26053
26145: POP
26146: POP
// end ; end ;
26147: LD_VAR 0 1
26151: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26152: LD_EXP 80
26156: IFFALSE 26841
26158: GO 26160
26160: DISABLE
26161: LD_INT 0
26163: PPUSH
26164: PPUSH
26165: PPUSH
26166: PPUSH
26167: PPUSH
26168: PPUSH
26169: PPUSH
26170: PPUSH
26171: PPUSH
// begin enable ;
26172: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26173: LD_ADDR_VAR 0 3
26177: PUSH
26178: LD_EXP 80
26182: PPUSH
26183: CALL 72267 0 1
26187: ST_TO_ADDR
// if not list then
26188: LD_VAR 0 3
26192: NOT
26193: IFFALSE 26197
// exit ;
26195: GO 26841
// for i := 1 to list do
26197: LD_ADDR_VAR 0 1
26201: PUSH
26202: DOUBLE
26203: LD_INT 1
26205: DEC
26206: ST_TO_ADDR
26207: LD_VAR 0 3
26211: PUSH
26212: FOR_TO
26213: IFFALSE 26839
// begin depot := list [ i ] [ 2 ] ;
26215: LD_ADDR_VAR 0 8
26219: PUSH
26220: LD_VAR 0 3
26224: PUSH
26225: LD_VAR 0 1
26229: ARRAY
26230: PUSH
26231: LD_INT 2
26233: ARRAY
26234: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26235: LD_ADDR_VAR 0 5
26239: PUSH
26240: LD_VAR 0 3
26244: PUSH
26245: LD_VAR 0 1
26249: ARRAY
26250: PUSH
26251: LD_INT 1
26253: ARRAY
26254: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26255: LD_VAR 0 8
26259: PPUSH
26260: CALL_OW 301
26264: PUSH
26265: LD_VAR 0 5
26269: PUSH
26270: LD_VAR 0 8
26274: PPUSH
26275: CALL_OW 255
26279: NONEQUAL
26280: OR
26281: IFFALSE 26310
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26283: LD_ADDR_EXP 80
26287: PUSH
26288: LD_EXP 80
26292: PPUSH
26293: LD_VAR 0 8
26297: PPUSH
26298: LD_INT 0
26300: PPUSH
26301: CALL_OW 1
26305: ST_TO_ADDR
// exit ;
26306: POP
26307: POP
26308: GO 26841
// end ; x := list [ i ] [ 3 ] ;
26310: LD_ADDR_VAR 0 6
26314: PUSH
26315: LD_VAR 0 3
26319: PUSH
26320: LD_VAR 0 1
26324: ARRAY
26325: PUSH
26326: LD_INT 3
26328: ARRAY
26329: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26330: LD_ADDR_VAR 0 7
26334: PUSH
26335: LD_VAR 0 3
26339: PUSH
26340: LD_VAR 0 1
26344: ARRAY
26345: PUSH
26346: LD_INT 4
26348: ARRAY
26349: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26350: LD_ADDR_VAR 0 9
26354: PUSH
26355: LD_VAR 0 6
26359: PPUSH
26360: LD_VAR 0 7
26364: PPUSH
26365: LD_INT 16
26367: PPUSH
26368: CALL 70855 0 3
26372: ST_TO_ADDR
// if not cratesNearbyPoint then
26373: LD_VAR 0 9
26377: NOT
26378: IFFALSE 26384
// exit ;
26380: POP
26381: POP
26382: GO 26841
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26384: LD_ADDR_VAR 0 4
26388: PUSH
26389: LD_INT 22
26391: PUSH
26392: LD_VAR 0 5
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 3
26403: PUSH
26404: LD_INT 60
26406: PUSH
26407: EMPTY
26408: LIST
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 91
26416: PUSH
26417: LD_VAR 0 8
26421: PUSH
26422: LD_INT 6
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 2
26432: PUSH
26433: LD_INT 25
26435: PUSH
26436: LD_INT 2
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 25
26445: PUSH
26446: LD_INT 16
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: LIST
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: PPUSH
26464: CALL_OW 69
26468: PUSH
26469: LD_VAR 0 8
26473: PPUSH
26474: CALL_OW 313
26478: PPUSH
26479: LD_INT 3
26481: PUSH
26482: LD_INT 60
26484: PUSH
26485: EMPTY
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: LD_INT 25
26497: PUSH
26498: LD_INT 2
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 25
26507: PUSH
26508: LD_INT 16
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: LIST
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PPUSH
26524: CALL_OW 72
26528: UNION
26529: ST_TO_ADDR
// if tmp then
26530: LD_VAR 0 4
26534: IFFALSE 26614
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26536: LD_ADDR_VAR 0 4
26540: PUSH
26541: LD_VAR 0 4
26545: PPUSH
26546: LD_INT 3
26548: PPUSH
26549: CALL 68824 0 2
26553: ST_TO_ADDR
// for j in tmp do
26554: LD_ADDR_VAR 0 2
26558: PUSH
26559: LD_VAR 0 4
26563: PUSH
26564: FOR_IN
26565: IFFALSE 26608
// begin if IsInUnit ( j ) then
26567: LD_VAR 0 2
26571: PPUSH
26572: CALL_OW 310
26576: IFFALSE 26587
// ComExit ( j ) ;
26578: LD_VAR 0 2
26582: PPUSH
26583: CALL 68907 0 1
// AddComCollect ( j , x , y ) ;
26587: LD_VAR 0 2
26591: PPUSH
26592: LD_VAR 0 6
26596: PPUSH
26597: LD_VAR 0 7
26601: PPUSH
26602: CALL_OW 177
// end ;
26606: GO 26564
26608: POP
26609: POP
// exit ;
26610: POP
26611: POP
26612: GO 26841
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26614: LD_ADDR_VAR 0 4
26618: PUSH
26619: LD_INT 22
26621: PUSH
26622: LD_VAR 0 5
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 91
26633: PUSH
26634: LD_VAR 0 8
26638: PUSH
26639: LD_INT 8
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 2
26649: PUSH
26650: LD_INT 34
26652: PUSH
26653: LD_INT 12
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 34
26662: PUSH
26663: LD_INT 51
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 34
26672: PUSH
26673: LD_INT 32
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 34
26682: PUSH
26683: LD_INT 89
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: LIST
26701: PPUSH
26702: CALL_OW 69
26706: ST_TO_ADDR
// if tmp then
26707: LD_VAR 0 4
26711: IFFALSE 26837
// begin for j in tmp do
26713: LD_ADDR_VAR 0 2
26717: PUSH
26718: LD_VAR 0 4
26722: PUSH
26723: FOR_IN
26724: IFFALSE 26835
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26726: LD_VAR 0 2
26730: PPUSH
26731: CALL_OW 262
26735: PUSH
26736: LD_INT 3
26738: EQUAL
26739: PUSH
26740: LD_VAR 0 2
26744: PPUSH
26745: CALL_OW 261
26749: PUSH
26750: LD_INT 20
26752: GREATER
26753: OR
26754: PUSH
26755: LD_VAR 0 2
26759: PPUSH
26760: CALL_OW 314
26764: NOT
26765: AND
26766: PUSH
26767: LD_VAR 0 2
26771: PPUSH
26772: CALL_OW 263
26776: PUSH
26777: LD_INT 1
26779: NONEQUAL
26780: PUSH
26781: LD_VAR 0 2
26785: PPUSH
26786: CALL_OW 311
26790: OR
26791: AND
26792: IFFALSE 26833
// begin ComCollect ( j , x , y ) ;
26794: LD_VAR 0 2
26798: PPUSH
26799: LD_VAR 0 6
26803: PPUSH
26804: LD_VAR 0 7
26808: PPUSH
26809: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26813: LD_VAR 0 2
26817: PPUSH
26818: LD_VAR 0 8
26822: PPUSH
26823: CALL_OW 172
// exit ;
26827: POP
26828: POP
26829: POP
26830: POP
26831: GO 26841
// end ;
26833: GO 26723
26835: POP
26836: POP
// end ; end ;
26837: GO 26212
26839: POP
26840: POP
// end ; end_of_file
26841: PPOPN 9
26843: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26844: LD_INT 0
26846: PPUSH
26847: PPUSH
26848: PPUSH
26849: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26850: LD_VAR 0 1
26854: PPUSH
26855: CALL_OW 264
26859: PUSH
26860: LD_INT 91
26862: EQUAL
26863: IFFALSE 26935
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26865: LD_INT 68
26867: PPUSH
26868: LD_VAR 0 1
26872: PPUSH
26873: CALL_OW 255
26877: PPUSH
26878: CALL_OW 321
26882: PUSH
26883: LD_INT 2
26885: EQUAL
26886: IFFALSE 26898
// eff := 70 else
26888: LD_ADDR_VAR 0 4
26892: PUSH
26893: LD_INT 70
26895: ST_TO_ADDR
26896: GO 26906
// eff := 30 ;
26898: LD_ADDR_VAR 0 4
26902: PUSH
26903: LD_INT 30
26905: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26906: LD_VAR 0 1
26910: PPUSH
26911: CALL_OW 250
26915: PPUSH
26916: LD_VAR 0 1
26920: PPUSH
26921: CALL_OW 251
26925: PPUSH
26926: LD_VAR 0 4
26930: PPUSH
26931: CALL_OW 495
// end ; end ;
26935: LD_VAR 0 2
26939: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26940: LD_INT 0
26942: PPUSH
// end ;
26943: LD_VAR 0 4
26947: RET
// export function SOS_Command ( cmd ) ; begin
26948: LD_INT 0
26950: PPUSH
// end ;
26951: LD_VAR 0 2
26955: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26956: LD_INT 0
26958: PPUSH
// end ;
26959: LD_VAR 0 6
26963: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26964: LD_INT 0
26966: PPUSH
26967: PPUSH
// if not vehicle or not factory then
26968: LD_VAR 0 1
26972: NOT
26973: PUSH
26974: LD_VAR 0 2
26978: NOT
26979: OR
26980: IFFALSE 26984
// exit ;
26982: GO 27215
// if factoryWaypoints >= factory then
26984: LD_EXP 79
26988: PUSH
26989: LD_VAR 0 2
26993: GREATEREQUAL
26994: IFFALSE 27215
// if factoryWaypoints [ factory ] then
26996: LD_EXP 79
27000: PUSH
27001: LD_VAR 0 2
27005: ARRAY
27006: IFFALSE 27215
// begin if GetControl ( vehicle ) = control_manual then
27008: LD_VAR 0 1
27012: PPUSH
27013: CALL_OW 263
27017: PUSH
27018: LD_INT 1
27020: EQUAL
27021: IFFALSE 27102
// begin driver := IsDrivenBy ( vehicle ) ;
27023: LD_ADDR_VAR 0 4
27027: PUSH
27028: LD_VAR 0 1
27032: PPUSH
27033: CALL_OW 311
27037: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27038: LD_VAR 0 4
27042: PPUSH
27043: LD_EXP 79
27047: PUSH
27048: LD_VAR 0 2
27052: ARRAY
27053: PUSH
27054: LD_INT 3
27056: ARRAY
27057: PPUSH
27058: LD_EXP 79
27062: PUSH
27063: LD_VAR 0 2
27067: ARRAY
27068: PUSH
27069: LD_INT 4
27071: ARRAY
27072: PPUSH
27073: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27077: LD_VAR 0 4
27081: PPUSH
27082: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27086: LD_VAR 0 4
27090: PPUSH
27091: LD_VAR 0 2
27095: PPUSH
27096: CALL_OW 180
// end else
27100: GO 27215
// if GetControl ( vehicle ) = control_remote then
27102: LD_VAR 0 1
27106: PPUSH
27107: CALL_OW 263
27111: PUSH
27112: LD_INT 2
27114: EQUAL
27115: IFFALSE 27176
// begin wait ( 0 0$2 ) ;
27117: LD_INT 70
27119: PPUSH
27120: CALL_OW 67
// if Connect ( vehicle ) then
27124: LD_VAR 0 1
27128: PPUSH
27129: CALL 39239 0 1
27133: IFFALSE 27174
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27135: LD_VAR 0 1
27139: PPUSH
27140: LD_EXP 79
27144: PUSH
27145: LD_VAR 0 2
27149: ARRAY
27150: PUSH
27151: LD_INT 3
27153: ARRAY
27154: PPUSH
27155: LD_EXP 79
27159: PUSH
27160: LD_VAR 0 2
27164: ARRAY
27165: PUSH
27166: LD_INT 4
27168: ARRAY
27169: PPUSH
27170: CALL_OW 171
// end else
27174: GO 27215
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27176: LD_VAR 0 1
27180: PPUSH
27181: LD_EXP 79
27185: PUSH
27186: LD_VAR 0 2
27190: ARRAY
27191: PUSH
27192: LD_INT 3
27194: ARRAY
27195: PPUSH
27196: LD_EXP 79
27200: PUSH
27201: LD_VAR 0 2
27205: ARRAY
27206: PUSH
27207: LD_INT 4
27209: ARRAY
27210: PPUSH
27211: CALL_OW 171
// end ; end ;
27215: LD_VAR 0 3
27219: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27220: LD_INT 0
27222: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27223: LD_VAR 0 1
27227: PUSH
27228: LD_INT 250
27230: EQUAL
27231: PUSH
27232: LD_VAR 0 2
27236: PPUSH
27237: CALL_OW 264
27241: PUSH
27242: LD_INT 81
27244: EQUAL
27245: AND
27246: IFFALSE 27267
// MinerPlaceMine ( unit , x , y ) ;
27248: LD_VAR 0 2
27252: PPUSH
27253: LD_VAR 0 4
27257: PPUSH
27258: LD_VAR 0 5
27262: PPUSH
27263: CALL 29652 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27267: LD_VAR 0 1
27271: PUSH
27272: LD_INT 251
27274: EQUAL
27275: PUSH
27276: LD_VAR 0 2
27280: PPUSH
27281: CALL_OW 264
27285: PUSH
27286: LD_INT 81
27288: EQUAL
27289: AND
27290: IFFALSE 27311
// MinerDetonateMine ( unit , x , y ) ;
27292: LD_VAR 0 2
27296: PPUSH
27297: LD_VAR 0 4
27301: PPUSH
27302: LD_VAR 0 5
27306: PPUSH
27307: CALL 29927 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27311: LD_VAR 0 1
27315: PUSH
27316: LD_INT 252
27318: EQUAL
27319: PUSH
27320: LD_VAR 0 2
27324: PPUSH
27325: CALL_OW 264
27329: PUSH
27330: LD_INT 81
27332: EQUAL
27333: AND
27334: IFFALSE 27355
// MinerCreateMinefield ( unit , x , y ) ;
27336: LD_VAR 0 2
27340: PPUSH
27341: LD_VAR 0 4
27345: PPUSH
27346: LD_VAR 0 5
27350: PPUSH
27351: CALL 30344 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27355: LD_VAR 0 1
27359: PUSH
27360: LD_INT 253
27362: EQUAL
27363: PUSH
27364: LD_VAR 0 2
27368: PPUSH
27369: CALL_OW 257
27373: PUSH
27374: LD_INT 5
27376: EQUAL
27377: AND
27378: IFFALSE 27399
// ComBinocular ( unit , x , y ) ;
27380: LD_VAR 0 2
27384: PPUSH
27385: LD_VAR 0 4
27389: PPUSH
27390: LD_VAR 0 5
27394: PPUSH
27395: CALL 30713 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27399: LD_VAR 0 1
27403: PUSH
27404: LD_INT 254
27406: EQUAL
27407: PUSH
27408: LD_VAR 0 2
27412: PPUSH
27413: CALL_OW 264
27417: PUSH
27418: LD_INT 99
27420: EQUAL
27421: AND
27422: PUSH
27423: LD_VAR 0 3
27427: PPUSH
27428: CALL_OW 263
27432: PUSH
27433: LD_INT 3
27435: EQUAL
27436: AND
27437: IFFALSE 27453
// HackDestroyVehicle ( unit , selectedUnit ) ;
27439: LD_VAR 0 2
27443: PPUSH
27444: LD_VAR 0 3
27448: PPUSH
27449: CALL 29016 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27453: LD_VAR 0 1
27457: PUSH
27458: LD_INT 255
27460: EQUAL
27461: PUSH
27462: LD_VAR 0 2
27466: PPUSH
27467: CALL_OW 264
27471: PUSH
27472: LD_INT 14
27474: PUSH
27475: LD_INT 53
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: IN
27482: AND
27483: PUSH
27484: LD_VAR 0 4
27488: PPUSH
27489: LD_VAR 0 5
27493: PPUSH
27494: CALL_OW 488
27498: AND
27499: IFFALSE 27523
// CutTreeXYR ( unit , x , y , 12 ) ;
27501: LD_VAR 0 2
27505: PPUSH
27506: LD_VAR 0 4
27510: PPUSH
27511: LD_VAR 0 5
27515: PPUSH
27516: LD_INT 12
27518: PPUSH
27519: CALL 27586 0 4
// if cmd = 256 then
27523: LD_VAR 0 1
27527: PUSH
27528: LD_INT 256
27530: EQUAL
27531: IFFALSE 27552
// SetFactoryWaypoint ( unit , x , y ) ;
27533: LD_VAR 0 2
27537: PPUSH
27538: LD_VAR 0 4
27542: PPUSH
27543: LD_VAR 0 5
27547: PPUSH
27548: CALL 25533 0 3
// if cmd = 257 then
27552: LD_VAR 0 1
27556: PUSH
27557: LD_INT 257
27559: EQUAL
27560: IFFALSE 27581
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27562: LD_VAR 0 2
27566: PPUSH
27567: LD_VAR 0 4
27571: PPUSH
27572: LD_VAR 0 5
27576: PPUSH
27577: CALL 25895 0 3
// end ;
27581: LD_VAR 0 6
27585: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27586: LD_INT 0
27588: PPUSH
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
27594: PPUSH
27595: PPUSH
27596: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27597: LD_VAR 0 1
27601: NOT
27602: PUSH
27603: LD_VAR 0 2
27607: PPUSH
27608: LD_VAR 0 3
27612: PPUSH
27613: CALL_OW 488
27617: NOT
27618: OR
27619: PUSH
27620: LD_VAR 0 4
27624: NOT
27625: OR
27626: IFFALSE 27630
// exit ;
27628: GO 27970
// list := [ ] ;
27630: LD_ADDR_VAR 0 13
27634: PUSH
27635: EMPTY
27636: ST_TO_ADDR
// if x - r < 0 then
27637: LD_VAR 0 2
27641: PUSH
27642: LD_VAR 0 4
27646: MINUS
27647: PUSH
27648: LD_INT 0
27650: LESS
27651: IFFALSE 27663
// min_x := 0 else
27653: LD_ADDR_VAR 0 7
27657: PUSH
27658: LD_INT 0
27660: ST_TO_ADDR
27661: GO 27679
// min_x := x - r ;
27663: LD_ADDR_VAR 0 7
27667: PUSH
27668: LD_VAR 0 2
27672: PUSH
27673: LD_VAR 0 4
27677: MINUS
27678: ST_TO_ADDR
// if y - r < 0 then
27679: LD_VAR 0 3
27683: PUSH
27684: LD_VAR 0 4
27688: MINUS
27689: PUSH
27690: LD_INT 0
27692: LESS
27693: IFFALSE 27705
// min_y := 0 else
27695: LD_ADDR_VAR 0 8
27699: PUSH
27700: LD_INT 0
27702: ST_TO_ADDR
27703: GO 27721
// min_y := y - r ;
27705: LD_ADDR_VAR 0 8
27709: PUSH
27710: LD_VAR 0 3
27714: PUSH
27715: LD_VAR 0 4
27719: MINUS
27720: ST_TO_ADDR
// max_x := x + r ;
27721: LD_ADDR_VAR 0 9
27725: PUSH
27726: LD_VAR 0 2
27730: PUSH
27731: LD_VAR 0 4
27735: PLUS
27736: ST_TO_ADDR
// max_y := y + r ;
27737: LD_ADDR_VAR 0 10
27741: PUSH
27742: LD_VAR 0 3
27746: PUSH
27747: LD_VAR 0 4
27751: PLUS
27752: ST_TO_ADDR
// for _x = min_x to max_x do
27753: LD_ADDR_VAR 0 11
27757: PUSH
27758: DOUBLE
27759: LD_VAR 0 7
27763: DEC
27764: ST_TO_ADDR
27765: LD_VAR 0 9
27769: PUSH
27770: FOR_TO
27771: IFFALSE 27888
// for _y = min_y to max_y do
27773: LD_ADDR_VAR 0 12
27777: PUSH
27778: DOUBLE
27779: LD_VAR 0 8
27783: DEC
27784: ST_TO_ADDR
27785: LD_VAR 0 10
27789: PUSH
27790: FOR_TO
27791: IFFALSE 27884
// begin if not ValidHex ( _x , _y ) then
27793: LD_VAR 0 11
27797: PPUSH
27798: LD_VAR 0 12
27802: PPUSH
27803: CALL_OW 488
27807: NOT
27808: IFFALSE 27812
// continue ;
27810: GO 27790
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27812: LD_VAR 0 11
27816: PPUSH
27817: LD_VAR 0 12
27821: PPUSH
27822: CALL_OW 351
27826: PUSH
27827: LD_VAR 0 11
27831: PPUSH
27832: LD_VAR 0 12
27836: PPUSH
27837: CALL_OW 554
27841: AND
27842: IFFALSE 27882
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27844: LD_ADDR_VAR 0 13
27848: PUSH
27849: LD_VAR 0 13
27853: PPUSH
27854: LD_VAR 0 13
27858: PUSH
27859: LD_INT 1
27861: PLUS
27862: PPUSH
27863: LD_VAR 0 11
27867: PUSH
27868: LD_VAR 0 12
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PPUSH
27877: CALL_OW 2
27881: ST_TO_ADDR
// end ;
27882: GO 27790
27884: POP
27885: POP
27886: GO 27770
27888: POP
27889: POP
// if not list then
27890: LD_VAR 0 13
27894: NOT
27895: IFFALSE 27899
// exit ;
27897: GO 27970
// for i in list do
27899: LD_ADDR_VAR 0 6
27903: PUSH
27904: LD_VAR 0 13
27908: PUSH
27909: FOR_IN
27910: IFFALSE 27968
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27912: LD_VAR 0 1
27916: PPUSH
27917: LD_STRING M
27919: PUSH
27920: LD_VAR 0 6
27924: PUSH
27925: LD_INT 1
27927: ARRAY
27928: PUSH
27929: LD_VAR 0 6
27933: PUSH
27934: LD_INT 2
27936: ARRAY
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: LD_INT 0
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: PUSH
27959: EMPTY
27960: LIST
27961: PPUSH
27962: CALL_OW 447
27966: GO 27909
27968: POP
27969: POP
// end ;
27970: LD_VAR 0 5
27974: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27975: LD_EXP 82
27979: NOT
27980: IFFALSE 28030
27982: GO 27984
27984: DISABLE
// begin initHack := true ;
27985: LD_ADDR_EXP 82
27989: PUSH
27990: LD_INT 1
27992: ST_TO_ADDR
// hackTanks := [ ] ;
27993: LD_ADDR_EXP 83
27997: PUSH
27998: EMPTY
27999: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28000: LD_ADDR_EXP 84
28004: PUSH
28005: EMPTY
28006: ST_TO_ADDR
// hackLimit := 3 ;
28007: LD_ADDR_EXP 85
28011: PUSH
28012: LD_INT 3
28014: ST_TO_ADDR
// hackDist := 12 ;
28015: LD_ADDR_EXP 86
28019: PUSH
28020: LD_INT 12
28022: ST_TO_ADDR
// hackCounter := [ ] ;
28023: LD_ADDR_EXP 87
28027: PUSH
28028: EMPTY
28029: ST_TO_ADDR
// end ;
28030: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28031: LD_EXP 82
28035: PUSH
28036: LD_INT 34
28038: PUSH
28039: LD_INT 99
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PPUSH
28046: CALL_OW 69
28050: AND
28051: IFFALSE 28304
28053: GO 28055
28055: DISABLE
28056: LD_INT 0
28058: PPUSH
28059: PPUSH
// begin enable ;
28060: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28061: LD_ADDR_VAR 0 1
28065: PUSH
28066: LD_INT 34
28068: PUSH
28069: LD_INT 99
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PPUSH
28076: CALL_OW 69
28080: PUSH
28081: FOR_IN
28082: IFFALSE 28302
// begin if not i in hackTanks then
28084: LD_VAR 0 1
28088: PUSH
28089: LD_EXP 83
28093: IN
28094: NOT
28095: IFFALSE 28178
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28097: LD_ADDR_EXP 83
28101: PUSH
28102: LD_EXP 83
28106: PPUSH
28107: LD_EXP 83
28111: PUSH
28112: LD_INT 1
28114: PLUS
28115: PPUSH
28116: LD_VAR 0 1
28120: PPUSH
28121: CALL_OW 1
28125: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28126: LD_ADDR_EXP 84
28130: PUSH
28131: LD_EXP 84
28135: PPUSH
28136: LD_EXP 84
28140: PUSH
28141: LD_INT 1
28143: PLUS
28144: PPUSH
28145: EMPTY
28146: PPUSH
28147: CALL_OW 1
28151: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28152: LD_ADDR_EXP 87
28156: PUSH
28157: LD_EXP 87
28161: PPUSH
28162: LD_EXP 87
28166: PUSH
28167: LD_INT 1
28169: PLUS
28170: PPUSH
28171: EMPTY
28172: PPUSH
28173: CALL_OW 1
28177: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28178: LD_VAR 0 1
28182: PPUSH
28183: CALL_OW 302
28187: NOT
28188: IFFALSE 28201
// begin HackUnlinkAll ( i ) ;
28190: LD_VAR 0 1
28194: PPUSH
28195: CALL 28307 0 1
// continue ;
28199: GO 28081
// end ; HackCheckCapturedStatus ( i ) ;
28201: LD_VAR 0 1
28205: PPUSH
28206: CALL 28750 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28210: LD_ADDR_VAR 0 2
28214: PUSH
28215: LD_INT 81
28217: PUSH
28218: LD_VAR 0 1
28222: PPUSH
28223: CALL_OW 255
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 33
28234: PUSH
28235: LD_INT 3
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 91
28244: PUSH
28245: LD_VAR 0 1
28249: PUSH
28250: LD_EXP 86
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 50
28262: PUSH
28263: EMPTY
28264: LIST
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: PPUSH
28272: CALL_OW 69
28276: ST_TO_ADDR
// if not tmp then
28277: LD_VAR 0 2
28281: NOT
28282: IFFALSE 28286
// continue ;
28284: GO 28081
// HackLink ( i , tmp ) ;
28286: LD_VAR 0 1
28290: PPUSH
28291: LD_VAR 0 2
28295: PPUSH
28296: CALL 28443 0 2
// end ;
28300: GO 28081
28302: POP
28303: POP
// end ;
28304: PPOPN 2
28306: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28307: LD_INT 0
28309: PPUSH
28310: PPUSH
28311: PPUSH
// if not hack in hackTanks then
28312: LD_VAR 0 1
28316: PUSH
28317: LD_EXP 83
28321: IN
28322: NOT
28323: IFFALSE 28327
// exit ;
28325: GO 28438
// index := GetElementIndex ( hackTanks , hack ) ;
28327: LD_ADDR_VAR 0 4
28331: PUSH
28332: LD_EXP 83
28336: PPUSH
28337: LD_VAR 0 1
28341: PPUSH
28342: CALL 36055 0 2
28346: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28347: LD_EXP 84
28351: PUSH
28352: LD_VAR 0 4
28356: ARRAY
28357: IFFALSE 28438
// begin for i in hackTanksCaptured [ index ] do
28359: LD_ADDR_VAR 0 3
28363: PUSH
28364: LD_EXP 84
28368: PUSH
28369: LD_VAR 0 4
28373: ARRAY
28374: PUSH
28375: FOR_IN
28376: IFFALSE 28402
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28378: LD_VAR 0 3
28382: PUSH
28383: LD_INT 1
28385: ARRAY
28386: PPUSH
28387: LD_VAR 0 3
28391: PUSH
28392: LD_INT 2
28394: ARRAY
28395: PPUSH
28396: CALL_OW 235
28400: GO 28375
28402: POP
28403: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28404: LD_ADDR_EXP 84
28408: PUSH
28409: LD_EXP 84
28413: PPUSH
28414: LD_VAR 0 4
28418: PPUSH
28419: EMPTY
28420: PPUSH
28421: CALL_OW 1
28425: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28426: LD_VAR 0 1
28430: PPUSH
28431: LD_INT 0
28433: PPUSH
28434: CALL_OW 505
// end ; end ;
28438: LD_VAR 0 2
28442: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28443: LD_INT 0
28445: PPUSH
28446: PPUSH
28447: PPUSH
// if not hack in hackTanks or not vehicles then
28448: LD_VAR 0 1
28452: PUSH
28453: LD_EXP 83
28457: IN
28458: NOT
28459: PUSH
28460: LD_VAR 0 2
28464: NOT
28465: OR
28466: IFFALSE 28470
// exit ;
28468: GO 28745
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28470: LD_ADDR_VAR 0 2
28474: PUSH
28475: LD_VAR 0 1
28479: PPUSH
28480: LD_VAR 0 2
28484: PPUSH
28485: LD_INT 1
28487: PPUSH
28488: LD_INT 1
28490: PPUSH
28491: CALL 36705 0 4
28495: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28496: LD_ADDR_VAR 0 5
28500: PUSH
28501: LD_EXP 83
28505: PPUSH
28506: LD_VAR 0 1
28510: PPUSH
28511: CALL 36055 0 2
28515: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28516: LD_EXP 84
28520: PUSH
28521: LD_VAR 0 5
28525: ARRAY
28526: PUSH
28527: LD_EXP 85
28531: LESS
28532: IFFALSE 28721
// begin for i := 1 to vehicles do
28534: LD_ADDR_VAR 0 4
28538: PUSH
28539: DOUBLE
28540: LD_INT 1
28542: DEC
28543: ST_TO_ADDR
28544: LD_VAR 0 2
28548: PUSH
28549: FOR_TO
28550: IFFALSE 28719
// begin if hackTanksCaptured [ index ] = hackLimit then
28552: LD_EXP 84
28556: PUSH
28557: LD_VAR 0 5
28561: ARRAY
28562: PUSH
28563: LD_EXP 85
28567: EQUAL
28568: IFFALSE 28572
// break ;
28570: GO 28719
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28572: LD_ADDR_EXP 87
28576: PUSH
28577: LD_EXP 87
28581: PPUSH
28582: LD_VAR 0 5
28586: PPUSH
28587: LD_EXP 87
28591: PUSH
28592: LD_VAR 0 5
28596: ARRAY
28597: PUSH
28598: LD_INT 1
28600: PLUS
28601: PPUSH
28602: CALL_OW 1
28606: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28607: LD_ADDR_EXP 84
28611: PUSH
28612: LD_EXP 84
28616: PPUSH
28617: LD_VAR 0 5
28621: PUSH
28622: LD_EXP 84
28626: PUSH
28627: LD_VAR 0 5
28631: ARRAY
28632: PUSH
28633: LD_INT 1
28635: PLUS
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PPUSH
28641: LD_VAR 0 2
28645: PUSH
28646: LD_VAR 0 4
28650: ARRAY
28651: PUSH
28652: LD_VAR 0 2
28656: PUSH
28657: LD_VAR 0 4
28661: ARRAY
28662: PPUSH
28663: CALL_OW 255
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PPUSH
28672: CALL 36270 0 3
28676: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28677: LD_VAR 0 2
28681: PUSH
28682: LD_VAR 0 4
28686: ARRAY
28687: PPUSH
28688: LD_VAR 0 1
28692: PPUSH
28693: CALL_OW 255
28697: PPUSH
28698: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28702: LD_VAR 0 2
28706: PUSH
28707: LD_VAR 0 4
28711: ARRAY
28712: PPUSH
28713: CALL_OW 141
// end ;
28717: GO 28549
28719: POP
28720: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28721: LD_VAR 0 1
28725: PPUSH
28726: LD_EXP 84
28730: PUSH
28731: LD_VAR 0 5
28735: ARRAY
28736: PUSH
28737: LD_INT 0
28739: PLUS
28740: PPUSH
28741: CALL_OW 505
// end ;
28745: LD_VAR 0 3
28749: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28750: LD_INT 0
28752: PPUSH
28753: PPUSH
28754: PPUSH
28755: PPUSH
// if not hack in hackTanks then
28756: LD_VAR 0 1
28760: PUSH
28761: LD_EXP 83
28765: IN
28766: NOT
28767: IFFALSE 28771
// exit ;
28769: GO 29011
// index := GetElementIndex ( hackTanks , hack ) ;
28771: LD_ADDR_VAR 0 4
28775: PUSH
28776: LD_EXP 83
28780: PPUSH
28781: LD_VAR 0 1
28785: PPUSH
28786: CALL 36055 0 2
28790: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28791: LD_ADDR_VAR 0 3
28795: PUSH
28796: DOUBLE
28797: LD_EXP 84
28801: PUSH
28802: LD_VAR 0 4
28806: ARRAY
28807: INC
28808: ST_TO_ADDR
28809: LD_INT 1
28811: PUSH
28812: FOR_DOWNTO
28813: IFFALSE 28985
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28815: LD_ADDR_VAR 0 5
28819: PUSH
28820: LD_EXP 84
28824: PUSH
28825: LD_VAR 0 4
28829: ARRAY
28830: PUSH
28831: LD_VAR 0 3
28835: ARRAY
28836: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28837: LD_VAR 0 5
28841: PUSH
28842: LD_INT 1
28844: ARRAY
28845: PPUSH
28846: CALL_OW 302
28850: NOT
28851: PUSH
28852: LD_VAR 0 5
28856: PUSH
28857: LD_INT 1
28859: ARRAY
28860: PPUSH
28861: CALL_OW 255
28865: PUSH
28866: LD_VAR 0 1
28870: PPUSH
28871: CALL_OW 255
28875: NONEQUAL
28876: OR
28877: IFFALSE 28983
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28879: LD_VAR 0 5
28883: PUSH
28884: LD_INT 1
28886: ARRAY
28887: PPUSH
28888: CALL_OW 305
28892: PUSH
28893: LD_VAR 0 5
28897: PUSH
28898: LD_INT 1
28900: ARRAY
28901: PPUSH
28902: CALL_OW 255
28906: PUSH
28907: LD_VAR 0 1
28911: PPUSH
28912: CALL_OW 255
28916: EQUAL
28917: AND
28918: IFFALSE 28942
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28920: LD_VAR 0 5
28924: PUSH
28925: LD_INT 1
28927: ARRAY
28928: PPUSH
28929: LD_VAR 0 5
28933: PUSH
28934: LD_INT 2
28936: ARRAY
28937: PPUSH
28938: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28942: LD_ADDR_EXP 84
28946: PUSH
28947: LD_EXP 84
28951: PPUSH
28952: LD_VAR 0 4
28956: PPUSH
28957: LD_EXP 84
28961: PUSH
28962: LD_VAR 0 4
28966: ARRAY
28967: PPUSH
28968: LD_VAR 0 3
28972: PPUSH
28973: CALL_OW 3
28977: PPUSH
28978: CALL_OW 1
28982: ST_TO_ADDR
// end ; end ;
28983: GO 28812
28985: POP
28986: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28987: LD_VAR 0 1
28991: PPUSH
28992: LD_EXP 84
28996: PUSH
28997: LD_VAR 0 4
29001: ARRAY
29002: PUSH
29003: LD_INT 0
29005: PLUS
29006: PPUSH
29007: CALL_OW 505
// end ;
29011: LD_VAR 0 2
29015: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29016: LD_INT 0
29018: PPUSH
29019: PPUSH
29020: PPUSH
29021: PPUSH
// if not hack in hackTanks then
29022: LD_VAR 0 1
29026: PUSH
29027: LD_EXP 83
29031: IN
29032: NOT
29033: IFFALSE 29037
// exit ;
29035: GO 29122
// index := GetElementIndex ( hackTanks , hack ) ;
29037: LD_ADDR_VAR 0 5
29041: PUSH
29042: LD_EXP 83
29046: PPUSH
29047: LD_VAR 0 1
29051: PPUSH
29052: CALL 36055 0 2
29056: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29057: LD_ADDR_VAR 0 4
29061: PUSH
29062: DOUBLE
29063: LD_INT 1
29065: DEC
29066: ST_TO_ADDR
29067: LD_EXP 84
29071: PUSH
29072: LD_VAR 0 5
29076: ARRAY
29077: PUSH
29078: FOR_TO
29079: IFFALSE 29120
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29081: LD_EXP 84
29085: PUSH
29086: LD_VAR 0 5
29090: ARRAY
29091: PUSH
29092: LD_VAR 0 4
29096: ARRAY
29097: PUSH
29098: LD_INT 1
29100: ARRAY
29101: PUSH
29102: LD_VAR 0 2
29106: EQUAL
29107: IFFALSE 29118
// KillUnit ( vehicle ) ;
29109: LD_VAR 0 2
29113: PPUSH
29114: CALL_OW 66
29118: GO 29078
29120: POP
29121: POP
// end ;
29122: LD_VAR 0 3
29126: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29127: LD_EXP 88
29131: NOT
29132: IFFALSE 29167
29134: GO 29136
29136: DISABLE
// begin initMiner := true ;
29137: LD_ADDR_EXP 88
29141: PUSH
29142: LD_INT 1
29144: ST_TO_ADDR
// minersList := [ ] ;
29145: LD_ADDR_EXP 89
29149: PUSH
29150: EMPTY
29151: ST_TO_ADDR
// minerMinesList := [ ] ;
29152: LD_ADDR_EXP 90
29156: PUSH
29157: EMPTY
29158: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29159: LD_ADDR_EXP 91
29163: PUSH
29164: LD_INT 5
29166: ST_TO_ADDR
// end ;
29167: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29168: LD_EXP 88
29172: PUSH
29173: LD_INT 34
29175: PUSH
29176: LD_INT 81
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PPUSH
29183: CALL_OW 69
29187: AND
29188: IFFALSE 29649
29190: GO 29192
29192: DISABLE
29193: LD_INT 0
29195: PPUSH
29196: PPUSH
29197: PPUSH
29198: PPUSH
// begin enable ;
29199: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29200: LD_ADDR_VAR 0 1
29204: PUSH
29205: LD_INT 34
29207: PUSH
29208: LD_INT 81
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PPUSH
29215: CALL_OW 69
29219: PUSH
29220: FOR_IN
29221: IFFALSE 29293
// begin if not i in minersList then
29223: LD_VAR 0 1
29227: PUSH
29228: LD_EXP 89
29232: IN
29233: NOT
29234: IFFALSE 29291
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29236: LD_ADDR_EXP 89
29240: PUSH
29241: LD_EXP 89
29245: PPUSH
29246: LD_EXP 89
29250: PUSH
29251: LD_INT 1
29253: PLUS
29254: PPUSH
29255: LD_VAR 0 1
29259: PPUSH
29260: CALL_OW 1
29264: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29265: LD_ADDR_EXP 90
29269: PUSH
29270: LD_EXP 90
29274: PPUSH
29275: LD_EXP 90
29279: PUSH
29280: LD_INT 1
29282: PLUS
29283: PPUSH
29284: EMPTY
29285: PPUSH
29286: CALL_OW 1
29290: ST_TO_ADDR
// end end ;
29291: GO 29220
29293: POP
29294: POP
// for i := minerMinesList downto 1 do
29295: LD_ADDR_VAR 0 1
29299: PUSH
29300: DOUBLE
29301: LD_EXP 90
29305: INC
29306: ST_TO_ADDR
29307: LD_INT 1
29309: PUSH
29310: FOR_DOWNTO
29311: IFFALSE 29647
// begin if IsLive ( minersList [ i ] ) then
29313: LD_EXP 89
29317: PUSH
29318: LD_VAR 0 1
29322: ARRAY
29323: PPUSH
29324: CALL_OW 300
29328: IFFALSE 29356
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29330: LD_EXP 89
29334: PUSH
29335: LD_VAR 0 1
29339: ARRAY
29340: PPUSH
29341: LD_EXP 90
29345: PUSH
29346: LD_VAR 0 1
29350: ARRAY
29351: PPUSH
29352: CALL_OW 505
// if not minerMinesList [ i ] then
29356: LD_EXP 90
29360: PUSH
29361: LD_VAR 0 1
29365: ARRAY
29366: NOT
29367: IFFALSE 29371
// continue ;
29369: GO 29310
// for j := minerMinesList [ i ] downto 1 do
29371: LD_ADDR_VAR 0 2
29375: PUSH
29376: DOUBLE
29377: LD_EXP 90
29381: PUSH
29382: LD_VAR 0 1
29386: ARRAY
29387: INC
29388: ST_TO_ADDR
29389: LD_INT 1
29391: PUSH
29392: FOR_DOWNTO
29393: IFFALSE 29643
// begin side := GetSide ( minersList [ i ] ) ;
29395: LD_ADDR_VAR 0 3
29399: PUSH
29400: LD_EXP 89
29404: PUSH
29405: LD_VAR 0 1
29409: ARRAY
29410: PPUSH
29411: CALL_OW 255
29415: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29416: LD_ADDR_VAR 0 4
29420: PUSH
29421: LD_EXP 90
29425: PUSH
29426: LD_VAR 0 1
29430: ARRAY
29431: PUSH
29432: LD_VAR 0 2
29436: ARRAY
29437: PUSH
29438: LD_INT 1
29440: ARRAY
29441: PPUSH
29442: LD_EXP 90
29446: PUSH
29447: LD_VAR 0 1
29451: ARRAY
29452: PUSH
29453: LD_VAR 0 2
29457: ARRAY
29458: PUSH
29459: LD_INT 2
29461: ARRAY
29462: PPUSH
29463: CALL_OW 428
29467: ST_TO_ADDR
// if not tmp then
29468: LD_VAR 0 4
29472: NOT
29473: IFFALSE 29477
// continue ;
29475: GO 29392
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29477: LD_VAR 0 4
29481: PUSH
29482: LD_INT 81
29484: PUSH
29485: LD_VAR 0 3
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PPUSH
29494: CALL_OW 69
29498: IN
29499: PUSH
29500: LD_EXP 90
29504: PUSH
29505: LD_VAR 0 1
29509: ARRAY
29510: PUSH
29511: LD_VAR 0 2
29515: ARRAY
29516: PUSH
29517: LD_INT 1
29519: ARRAY
29520: PPUSH
29521: LD_EXP 90
29525: PUSH
29526: LD_VAR 0 1
29530: ARRAY
29531: PUSH
29532: LD_VAR 0 2
29536: ARRAY
29537: PUSH
29538: LD_INT 2
29540: ARRAY
29541: PPUSH
29542: CALL_OW 458
29546: AND
29547: IFFALSE 29641
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29549: LD_EXP 90
29553: PUSH
29554: LD_VAR 0 1
29558: ARRAY
29559: PUSH
29560: LD_VAR 0 2
29564: ARRAY
29565: PUSH
29566: LD_INT 1
29568: ARRAY
29569: PPUSH
29570: LD_EXP 90
29574: PUSH
29575: LD_VAR 0 1
29579: ARRAY
29580: PUSH
29581: LD_VAR 0 2
29585: ARRAY
29586: PUSH
29587: LD_INT 2
29589: ARRAY
29590: PPUSH
29591: LD_VAR 0 3
29595: PPUSH
29596: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29600: LD_ADDR_EXP 90
29604: PUSH
29605: LD_EXP 90
29609: PPUSH
29610: LD_VAR 0 1
29614: PPUSH
29615: LD_EXP 90
29619: PUSH
29620: LD_VAR 0 1
29624: ARRAY
29625: PPUSH
29626: LD_VAR 0 2
29630: PPUSH
29631: CALL_OW 3
29635: PPUSH
29636: CALL_OW 1
29640: ST_TO_ADDR
// end ; end ;
29641: GO 29392
29643: POP
29644: POP
// end ;
29645: GO 29310
29647: POP
29648: POP
// end ;
29649: PPOPN 4
29651: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29652: LD_INT 0
29654: PPUSH
29655: PPUSH
// result := false ;
29656: LD_ADDR_VAR 0 4
29660: PUSH
29661: LD_INT 0
29663: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29664: LD_VAR 0 1
29668: PPUSH
29669: CALL_OW 264
29673: PUSH
29674: LD_INT 81
29676: EQUAL
29677: NOT
29678: IFFALSE 29682
// exit ;
29680: GO 29922
// index := GetElementIndex ( minersList , unit ) ;
29682: LD_ADDR_VAR 0 5
29686: PUSH
29687: LD_EXP 89
29691: PPUSH
29692: LD_VAR 0 1
29696: PPUSH
29697: CALL 36055 0 2
29701: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29702: LD_EXP 90
29706: PUSH
29707: LD_VAR 0 5
29711: ARRAY
29712: PUSH
29713: LD_EXP 91
29717: GREATEREQUAL
29718: IFFALSE 29722
// exit ;
29720: GO 29922
// ComMoveXY ( unit , x , y ) ;
29722: LD_VAR 0 1
29726: PPUSH
29727: LD_VAR 0 2
29731: PPUSH
29732: LD_VAR 0 3
29736: PPUSH
29737: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29741: LD_INT 35
29743: PPUSH
29744: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29748: LD_VAR 0 1
29752: PPUSH
29753: LD_VAR 0 2
29757: PPUSH
29758: LD_VAR 0 3
29762: PPUSH
29763: CALL 67318 0 3
29767: NOT
29768: PUSH
29769: LD_VAR 0 1
29773: PPUSH
29774: CALL_OW 314
29778: AND
29779: IFFALSE 29783
// exit ;
29781: GO 29922
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29783: LD_VAR 0 2
29787: PPUSH
29788: LD_VAR 0 3
29792: PPUSH
29793: CALL_OW 428
29797: PUSH
29798: LD_VAR 0 1
29802: EQUAL
29803: PUSH
29804: LD_VAR 0 1
29808: PPUSH
29809: CALL_OW 314
29813: NOT
29814: AND
29815: IFFALSE 29741
// PlaySoundXY ( x , y , PlantMine ) ;
29817: LD_VAR 0 2
29821: PPUSH
29822: LD_VAR 0 3
29826: PPUSH
29827: LD_STRING PlantMine
29829: PPUSH
29830: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29834: LD_VAR 0 2
29838: PPUSH
29839: LD_VAR 0 3
29843: PPUSH
29844: LD_VAR 0 1
29848: PPUSH
29849: CALL_OW 255
29853: PPUSH
29854: LD_INT 0
29856: PPUSH
29857: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29861: LD_ADDR_EXP 90
29865: PUSH
29866: LD_EXP 90
29870: PPUSH
29871: LD_VAR 0 5
29875: PUSH
29876: LD_EXP 90
29880: PUSH
29881: LD_VAR 0 5
29885: ARRAY
29886: PUSH
29887: LD_INT 1
29889: PLUS
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PPUSH
29895: LD_VAR 0 2
29899: PUSH
29900: LD_VAR 0 3
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PPUSH
29909: CALL 36270 0 3
29913: ST_TO_ADDR
// result := true ;
29914: LD_ADDR_VAR 0 4
29918: PUSH
29919: LD_INT 1
29921: ST_TO_ADDR
// end ;
29922: LD_VAR 0 4
29926: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29927: LD_INT 0
29929: PPUSH
29930: PPUSH
29931: PPUSH
// if not unit in minersList then
29932: LD_VAR 0 1
29936: PUSH
29937: LD_EXP 89
29941: IN
29942: NOT
29943: IFFALSE 29947
// exit ;
29945: GO 30339
// index := GetElementIndex ( minersList , unit ) ;
29947: LD_ADDR_VAR 0 6
29951: PUSH
29952: LD_EXP 89
29956: PPUSH
29957: LD_VAR 0 1
29961: PPUSH
29962: CALL 36055 0 2
29966: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29967: LD_ADDR_VAR 0 5
29971: PUSH
29972: DOUBLE
29973: LD_EXP 90
29977: PUSH
29978: LD_VAR 0 6
29982: ARRAY
29983: INC
29984: ST_TO_ADDR
29985: LD_INT 1
29987: PUSH
29988: FOR_DOWNTO
29989: IFFALSE 30150
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29991: LD_EXP 90
29995: PUSH
29996: LD_VAR 0 6
30000: ARRAY
30001: PUSH
30002: LD_VAR 0 5
30006: ARRAY
30007: PUSH
30008: LD_INT 1
30010: ARRAY
30011: PUSH
30012: LD_VAR 0 2
30016: EQUAL
30017: PUSH
30018: LD_EXP 90
30022: PUSH
30023: LD_VAR 0 6
30027: ARRAY
30028: PUSH
30029: LD_VAR 0 5
30033: ARRAY
30034: PUSH
30035: LD_INT 2
30037: ARRAY
30038: PUSH
30039: LD_VAR 0 3
30043: EQUAL
30044: AND
30045: IFFALSE 30148
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30047: LD_EXP 90
30051: PUSH
30052: LD_VAR 0 6
30056: ARRAY
30057: PUSH
30058: LD_VAR 0 5
30062: ARRAY
30063: PUSH
30064: LD_INT 1
30066: ARRAY
30067: PPUSH
30068: LD_EXP 90
30072: PUSH
30073: LD_VAR 0 6
30077: ARRAY
30078: PUSH
30079: LD_VAR 0 5
30083: ARRAY
30084: PUSH
30085: LD_INT 2
30087: ARRAY
30088: PPUSH
30089: LD_VAR 0 1
30093: PPUSH
30094: CALL_OW 255
30098: PPUSH
30099: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30103: LD_ADDR_EXP 90
30107: PUSH
30108: LD_EXP 90
30112: PPUSH
30113: LD_VAR 0 6
30117: PPUSH
30118: LD_EXP 90
30122: PUSH
30123: LD_VAR 0 6
30127: ARRAY
30128: PPUSH
30129: LD_VAR 0 5
30133: PPUSH
30134: CALL_OW 3
30138: PPUSH
30139: CALL_OW 1
30143: ST_TO_ADDR
// exit ;
30144: POP
30145: POP
30146: GO 30339
// end ; end ;
30148: GO 29988
30150: POP
30151: POP
// for i := minerMinesList [ index ] downto 1 do
30152: LD_ADDR_VAR 0 5
30156: PUSH
30157: DOUBLE
30158: LD_EXP 90
30162: PUSH
30163: LD_VAR 0 6
30167: ARRAY
30168: INC
30169: ST_TO_ADDR
30170: LD_INT 1
30172: PUSH
30173: FOR_DOWNTO
30174: IFFALSE 30337
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30176: LD_EXP 90
30180: PUSH
30181: LD_VAR 0 6
30185: ARRAY
30186: PUSH
30187: LD_VAR 0 5
30191: ARRAY
30192: PUSH
30193: LD_INT 1
30195: ARRAY
30196: PPUSH
30197: LD_EXP 90
30201: PUSH
30202: LD_VAR 0 6
30206: ARRAY
30207: PUSH
30208: LD_VAR 0 5
30212: ARRAY
30213: PUSH
30214: LD_INT 2
30216: ARRAY
30217: PPUSH
30218: LD_VAR 0 2
30222: PPUSH
30223: LD_VAR 0 3
30227: PPUSH
30228: CALL_OW 298
30232: PUSH
30233: LD_INT 6
30235: LESS
30236: IFFALSE 30335
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30238: LD_EXP 90
30242: PUSH
30243: LD_VAR 0 6
30247: ARRAY
30248: PUSH
30249: LD_VAR 0 5
30253: ARRAY
30254: PUSH
30255: LD_INT 1
30257: ARRAY
30258: PPUSH
30259: LD_EXP 90
30263: PUSH
30264: LD_VAR 0 6
30268: ARRAY
30269: PUSH
30270: LD_VAR 0 5
30274: ARRAY
30275: PUSH
30276: LD_INT 2
30278: ARRAY
30279: PPUSH
30280: LD_VAR 0 1
30284: PPUSH
30285: CALL_OW 255
30289: PPUSH
30290: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30294: LD_ADDR_EXP 90
30298: PUSH
30299: LD_EXP 90
30303: PPUSH
30304: LD_VAR 0 6
30308: PPUSH
30309: LD_EXP 90
30313: PUSH
30314: LD_VAR 0 6
30318: ARRAY
30319: PPUSH
30320: LD_VAR 0 5
30324: PPUSH
30325: CALL_OW 3
30329: PPUSH
30330: CALL_OW 1
30334: ST_TO_ADDR
// end ; end ;
30335: GO 30173
30337: POP
30338: POP
// end ;
30339: LD_VAR 0 4
30343: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30344: LD_INT 0
30346: PPUSH
30347: PPUSH
30348: PPUSH
30349: PPUSH
30350: PPUSH
30351: PPUSH
30352: PPUSH
30353: PPUSH
30354: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30355: LD_VAR 0 1
30359: PPUSH
30360: CALL_OW 264
30364: PUSH
30365: LD_INT 81
30367: EQUAL
30368: NOT
30369: PUSH
30370: LD_VAR 0 1
30374: PUSH
30375: LD_EXP 89
30379: IN
30380: NOT
30381: OR
30382: IFFALSE 30386
// exit ;
30384: GO 30708
// index := GetElementIndex ( minersList , unit ) ;
30386: LD_ADDR_VAR 0 6
30390: PUSH
30391: LD_EXP 89
30395: PPUSH
30396: LD_VAR 0 1
30400: PPUSH
30401: CALL 36055 0 2
30405: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30406: LD_ADDR_VAR 0 8
30410: PUSH
30411: LD_EXP 91
30415: PUSH
30416: LD_EXP 90
30420: PUSH
30421: LD_VAR 0 6
30425: ARRAY
30426: MINUS
30427: ST_TO_ADDR
// if not minesFreeAmount then
30428: LD_VAR 0 8
30432: NOT
30433: IFFALSE 30437
// exit ;
30435: GO 30708
// tmp := [ ] ;
30437: LD_ADDR_VAR 0 7
30441: PUSH
30442: EMPTY
30443: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30444: LD_ADDR_VAR 0 5
30448: PUSH
30449: DOUBLE
30450: LD_INT 1
30452: DEC
30453: ST_TO_ADDR
30454: LD_VAR 0 8
30458: PUSH
30459: FOR_TO
30460: IFFALSE 30655
// begin _d := rand ( 0 , 5 ) ;
30462: LD_ADDR_VAR 0 11
30466: PUSH
30467: LD_INT 0
30469: PPUSH
30470: LD_INT 5
30472: PPUSH
30473: CALL_OW 12
30477: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30478: LD_ADDR_VAR 0 12
30482: PUSH
30483: LD_INT 2
30485: PPUSH
30486: LD_INT 6
30488: PPUSH
30489: CALL_OW 12
30493: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30494: LD_ADDR_VAR 0 9
30498: PUSH
30499: LD_VAR 0 2
30503: PPUSH
30504: LD_VAR 0 11
30508: PPUSH
30509: LD_VAR 0 12
30513: PPUSH
30514: CALL_OW 272
30518: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30519: LD_ADDR_VAR 0 10
30523: PUSH
30524: LD_VAR 0 3
30528: PPUSH
30529: LD_VAR 0 11
30533: PPUSH
30534: LD_VAR 0 12
30538: PPUSH
30539: CALL_OW 273
30543: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30544: LD_VAR 0 9
30548: PPUSH
30549: LD_VAR 0 10
30553: PPUSH
30554: CALL_OW 488
30558: PUSH
30559: LD_VAR 0 9
30563: PUSH
30564: LD_VAR 0 10
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_VAR 0 7
30577: IN
30578: NOT
30579: AND
30580: PUSH
30581: LD_VAR 0 9
30585: PPUSH
30586: LD_VAR 0 10
30590: PPUSH
30591: CALL_OW 458
30595: NOT
30596: AND
30597: IFFALSE 30639
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30599: LD_ADDR_VAR 0 7
30603: PUSH
30604: LD_VAR 0 7
30608: PPUSH
30609: LD_VAR 0 7
30613: PUSH
30614: LD_INT 1
30616: PLUS
30617: PPUSH
30618: LD_VAR 0 9
30622: PUSH
30623: LD_VAR 0 10
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PPUSH
30632: CALL_OW 1
30636: ST_TO_ADDR
30637: GO 30653
// i := i - 1 ;
30639: LD_ADDR_VAR 0 5
30643: PUSH
30644: LD_VAR 0 5
30648: PUSH
30649: LD_INT 1
30651: MINUS
30652: ST_TO_ADDR
// end ;
30653: GO 30459
30655: POP
30656: POP
// for i in tmp do
30657: LD_ADDR_VAR 0 5
30661: PUSH
30662: LD_VAR 0 7
30666: PUSH
30667: FOR_IN
30668: IFFALSE 30706
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30670: LD_VAR 0 1
30674: PPUSH
30675: LD_VAR 0 5
30679: PUSH
30680: LD_INT 1
30682: ARRAY
30683: PPUSH
30684: LD_VAR 0 5
30688: PUSH
30689: LD_INT 2
30691: ARRAY
30692: PPUSH
30693: CALL 29652 0 3
30697: NOT
30698: IFFALSE 30704
// exit ;
30700: POP
30701: POP
30702: GO 30708
30704: GO 30667
30706: POP
30707: POP
// end ;
30708: LD_VAR 0 4
30712: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30713: LD_INT 0
30715: PPUSH
30716: PPUSH
30717: PPUSH
30718: PPUSH
30719: PPUSH
30720: PPUSH
30721: PPUSH
// if not GetClass ( unit ) = class_sniper then
30722: LD_VAR 0 1
30726: PPUSH
30727: CALL_OW 257
30731: PUSH
30732: LD_INT 5
30734: EQUAL
30735: NOT
30736: IFFALSE 30740
// exit ;
30738: GO 31128
// dist := 8 ;
30740: LD_ADDR_VAR 0 5
30744: PUSH
30745: LD_INT 8
30747: ST_TO_ADDR
// viewRange := 12 ;
30748: LD_ADDR_VAR 0 7
30752: PUSH
30753: LD_INT 12
30755: ST_TO_ADDR
// side := GetSide ( unit ) ;
30756: LD_ADDR_VAR 0 6
30760: PUSH
30761: LD_VAR 0 1
30765: PPUSH
30766: CALL_OW 255
30770: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30771: LD_INT 61
30773: PPUSH
30774: LD_VAR 0 6
30778: PPUSH
30779: CALL_OW 321
30783: PUSH
30784: LD_INT 2
30786: EQUAL
30787: IFFALSE 30797
// viewRange := 16 ;
30789: LD_ADDR_VAR 0 7
30793: PUSH
30794: LD_INT 16
30796: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30797: LD_VAR 0 1
30801: PPUSH
30802: LD_VAR 0 2
30806: PPUSH
30807: LD_VAR 0 3
30811: PPUSH
30812: CALL_OW 297
30816: PUSH
30817: LD_VAR 0 5
30821: GREATER
30822: IFFALSE 30901
// begin ComMoveXY ( unit , x , y ) ;
30824: LD_VAR 0 1
30828: PPUSH
30829: LD_VAR 0 2
30833: PPUSH
30834: LD_VAR 0 3
30838: PPUSH
30839: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30843: LD_INT 35
30845: PPUSH
30846: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30850: LD_VAR 0 1
30854: PPUSH
30855: LD_VAR 0 2
30859: PPUSH
30860: LD_VAR 0 3
30864: PPUSH
30865: CALL 67318 0 3
30869: NOT
30870: IFFALSE 30874
// exit ;
30872: GO 31128
// until GetDistUnitXY ( unit , x , y ) < dist ;
30874: LD_VAR 0 1
30878: PPUSH
30879: LD_VAR 0 2
30883: PPUSH
30884: LD_VAR 0 3
30888: PPUSH
30889: CALL_OW 297
30893: PUSH
30894: LD_VAR 0 5
30898: LESS
30899: IFFALSE 30843
// end ; ComTurnXY ( unit , x , y ) ;
30901: LD_VAR 0 1
30905: PPUSH
30906: LD_VAR 0 2
30910: PPUSH
30911: LD_VAR 0 3
30915: PPUSH
30916: CALL_OW 118
// wait ( 5 ) ;
30920: LD_INT 5
30922: PPUSH
30923: CALL_OW 67
// _d := GetDir ( unit ) ;
30927: LD_ADDR_VAR 0 10
30931: PUSH
30932: LD_VAR 0 1
30936: PPUSH
30937: CALL_OW 254
30941: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30942: LD_ADDR_VAR 0 8
30946: PUSH
30947: LD_VAR 0 1
30951: PPUSH
30952: CALL_OW 250
30956: PPUSH
30957: LD_VAR 0 10
30961: PPUSH
30962: LD_VAR 0 5
30966: PPUSH
30967: CALL_OW 272
30971: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30972: LD_ADDR_VAR 0 9
30976: PUSH
30977: LD_VAR 0 1
30981: PPUSH
30982: CALL_OW 251
30986: PPUSH
30987: LD_VAR 0 10
30991: PPUSH
30992: LD_VAR 0 5
30996: PPUSH
30997: CALL_OW 273
31001: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31002: LD_VAR 0 8
31006: PPUSH
31007: LD_VAR 0 9
31011: PPUSH
31012: CALL_OW 488
31016: NOT
31017: IFFALSE 31021
// exit ;
31019: GO 31128
// ComAnimCustom ( unit , 1 ) ;
31021: LD_VAR 0 1
31025: PPUSH
31026: LD_INT 1
31028: PPUSH
31029: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31033: LD_VAR 0 8
31037: PPUSH
31038: LD_VAR 0 9
31042: PPUSH
31043: LD_VAR 0 6
31047: PPUSH
31048: LD_VAR 0 7
31052: PPUSH
31053: CALL_OW 330
// repeat wait ( 1 ) ;
31057: LD_INT 1
31059: PPUSH
31060: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31064: LD_VAR 0 1
31068: PPUSH
31069: CALL_OW 316
31073: PUSH
31074: LD_VAR 0 1
31078: PPUSH
31079: CALL_OW 314
31083: OR
31084: PUSH
31085: LD_VAR 0 1
31089: PPUSH
31090: CALL_OW 302
31094: NOT
31095: OR
31096: PUSH
31097: LD_VAR 0 1
31101: PPUSH
31102: CALL_OW 301
31106: OR
31107: IFFALSE 31057
// RemoveSeeing ( _x , _y , side ) ;
31109: LD_VAR 0 8
31113: PPUSH
31114: LD_VAR 0 9
31118: PPUSH
31119: LD_VAR 0 6
31123: PPUSH
31124: CALL_OW 331
// end ; end_of_file
31128: LD_VAR 0 4
31132: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31133: LD_INT 0
31135: PPUSH
31136: PPUSH
// if exist_mode then
31137: LD_VAR 0 2
31141: IFFALSE 31166
// unit := CreateCharacter ( prefix & ident ) else
31143: LD_ADDR_VAR 0 5
31147: PUSH
31148: LD_VAR 0 3
31152: PUSH
31153: LD_VAR 0 1
31157: STR
31158: PPUSH
31159: CALL_OW 34
31163: ST_TO_ADDR
31164: GO 31181
// unit := NewCharacter ( ident ) ;
31166: LD_ADDR_VAR 0 5
31170: PUSH
31171: LD_VAR 0 1
31175: PPUSH
31176: CALL_OW 25
31180: ST_TO_ADDR
// result := unit ;
31181: LD_ADDR_VAR 0 4
31185: PUSH
31186: LD_VAR 0 5
31190: ST_TO_ADDR
// end ;
31191: LD_VAR 0 4
31195: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31196: LD_INT 0
31198: PPUSH
31199: PPUSH
// if not side or not nation then
31200: LD_VAR 0 1
31204: NOT
31205: PUSH
31206: LD_VAR 0 2
31210: NOT
31211: OR
31212: IFFALSE 31216
// exit ;
31214: GO 31984
// case nation of nation_american :
31216: LD_VAR 0 2
31220: PUSH
31221: LD_INT 1
31223: DOUBLE
31224: EQUAL
31225: IFTRUE 31229
31227: GO 31443
31229: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31230: LD_ADDR_VAR 0 4
31234: PUSH
31235: LD_INT 35
31237: PUSH
31238: LD_INT 45
31240: PUSH
31241: LD_INT 46
31243: PUSH
31244: LD_INT 47
31246: PUSH
31247: LD_INT 82
31249: PUSH
31250: LD_INT 83
31252: PUSH
31253: LD_INT 84
31255: PUSH
31256: LD_INT 85
31258: PUSH
31259: LD_INT 86
31261: PUSH
31262: LD_INT 1
31264: PUSH
31265: LD_INT 2
31267: PUSH
31268: LD_INT 6
31270: PUSH
31271: LD_INT 15
31273: PUSH
31274: LD_INT 16
31276: PUSH
31277: LD_INT 7
31279: PUSH
31280: LD_INT 12
31282: PUSH
31283: LD_INT 13
31285: PUSH
31286: LD_INT 10
31288: PUSH
31289: LD_INT 14
31291: PUSH
31292: LD_INT 20
31294: PUSH
31295: LD_INT 21
31297: PUSH
31298: LD_INT 22
31300: PUSH
31301: LD_INT 25
31303: PUSH
31304: LD_INT 32
31306: PUSH
31307: LD_INT 27
31309: PUSH
31310: LD_INT 36
31312: PUSH
31313: LD_INT 69
31315: PUSH
31316: LD_INT 39
31318: PUSH
31319: LD_INT 34
31321: PUSH
31322: LD_INT 40
31324: PUSH
31325: LD_INT 48
31327: PUSH
31328: LD_INT 49
31330: PUSH
31331: LD_INT 50
31333: PUSH
31334: LD_INT 51
31336: PUSH
31337: LD_INT 52
31339: PUSH
31340: LD_INT 53
31342: PUSH
31343: LD_INT 54
31345: PUSH
31346: LD_INT 55
31348: PUSH
31349: LD_INT 56
31351: PUSH
31352: LD_INT 57
31354: PUSH
31355: LD_INT 58
31357: PUSH
31358: LD_INT 59
31360: PUSH
31361: LD_INT 60
31363: PUSH
31364: LD_INT 61
31366: PUSH
31367: LD_INT 62
31369: PUSH
31370: LD_INT 80
31372: PUSH
31373: LD_INT 82
31375: PUSH
31376: LD_INT 83
31378: PUSH
31379: LD_INT 84
31381: PUSH
31382: LD_INT 85
31384: PUSH
31385: LD_INT 86
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: ST_TO_ADDR
31441: GO 31908
31443: LD_INT 2
31445: DOUBLE
31446: EQUAL
31447: IFTRUE 31451
31449: GO 31677
31451: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31452: LD_ADDR_VAR 0 4
31456: PUSH
31457: LD_INT 35
31459: PUSH
31460: LD_INT 45
31462: PUSH
31463: LD_INT 46
31465: PUSH
31466: LD_INT 47
31468: PUSH
31469: LD_INT 82
31471: PUSH
31472: LD_INT 83
31474: PUSH
31475: LD_INT 84
31477: PUSH
31478: LD_INT 85
31480: PUSH
31481: LD_INT 87
31483: PUSH
31484: LD_INT 70
31486: PUSH
31487: LD_INT 1
31489: PUSH
31490: LD_INT 11
31492: PUSH
31493: LD_INT 3
31495: PUSH
31496: LD_INT 4
31498: PUSH
31499: LD_INT 5
31501: PUSH
31502: LD_INT 6
31504: PUSH
31505: LD_INT 15
31507: PUSH
31508: LD_INT 18
31510: PUSH
31511: LD_INT 7
31513: PUSH
31514: LD_INT 17
31516: PUSH
31517: LD_INT 8
31519: PUSH
31520: LD_INT 20
31522: PUSH
31523: LD_INT 21
31525: PUSH
31526: LD_INT 22
31528: PUSH
31529: LD_INT 72
31531: PUSH
31532: LD_INT 26
31534: PUSH
31535: LD_INT 69
31537: PUSH
31538: LD_INT 39
31540: PUSH
31541: LD_INT 40
31543: PUSH
31544: LD_INT 41
31546: PUSH
31547: LD_INT 42
31549: PUSH
31550: LD_INT 43
31552: PUSH
31553: LD_INT 48
31555: PUSH
31556: LD_INT 49
31558: PUSH
31559: LD_INT 50
31561: PUSH
31562: LD_INT 51
31564: PUSH
31565: LD_INT 52
31567: PUSH
31568: LD_INT 53
31570: PUSH
31571: LD_INT 54
31573: PUSH
31574: LD_INT 55
31576: PUSH
31577: LD_INT 56
31579: PUSH
31580: LD_INT 60
31582: PUSH
31583: LD_INT 61
31585: PUSH
31586: LD_INT 62
31588: PUSH
31589: LD_INT 66
31591: PUSH
31592: LD_INT 67
31594: PUSH
31595: LD_INT 68
31597: PUSH
31598: LD_INT 81
31600: PUSH
31601: LD_INT 82
31603: PUSH
31604: LD_INT 83
31606: PUSH
31607: LD_INT 84
31609: PUSH
31610: LD_INT 85
31612: PUSH
31613: LD_INT 87
31615: PUSH
31616: LD_INT 88
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: ST_TO_ADDR
31675: GO 31908
31677: LD_INT 3
31679: DOUBLE
31680: EQUAL
31681: IFTRUE 31685
31683: GO 31907
31685: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31686: LD_ADDR_VAR 0 4
31690: PUSH
31691: LD_INT 46
31693: PUSH
31694: LD_INT 47
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: LD_INT 82
31705: PUSH
31706: LD_INT 83
31708: PUSH
31709: LD_INT 84
31711: PUSH
31712: LD_INT 85
31714: PUSH
31715: LD_INT 86
31717: PUSH
31718: LD_INT 11
31720: PUSH
31721: LD_INT 9
31723: PUSH
31724: LD_INT 20
31726: PUSH
31727: LD_INT 19
31729: PUSH
31730: LD_INT 21
31732: PUSH
31733: LD_INT 24
31735: PUSH
31736: LD_INT 22
31738: PUSH
31739: LD_INT 25
31741: PUSH
31742: LD_INT 28
31744: PUSH
31745: LD_INT 29
31747: PUSH
31748: LD_INT 30
31750: PUSH
31751: LD_INT 31
31753: PUSH
31754: LD_INT 37
31756: PUSH
31757: LD_INT 38
31759: PUSH
31760: LD_INT 32
31762: PUSH
31763: LD_INT 27
31765: PUSH
31766: LD_INT 33
31768: PUSH
31769: LD_INT 69
31771: PUSH
31772: LD_INT 39
31774: PUSH
31775: LD_INT 34
31777: PUSH
31778: LD_INT 40
31780: PUSH
31781: LD_INT 71
31783: PUSH
31784: LD_INT 23
31786: PUSH
31787: LD_INT 44
31789: PUSH
31790: LD_INT 48
31792: PUSH
31793: LD_INT 49
31795: PUSH
31796: LD_INT 50
31798: PUSH
31799: LD_INT 51
31801: PUSH
31802: LD_INT 52
31804: PUSH
31805: LD_INT 53
31807: PUSH
31808: LD_INT 54
31810: PUSH
31811: LD_INT 55
31813: PUSH
31814: LD_INT 56
31816: PUSH
31817: LD_INT 57
31819: PUSH
31820: LD_INT 58
31822: PUSH
31823: LD_INT 59
31825: PUSH
31826: LD_INT 63
31828: PUSH
31829: LD_INT 64
31831: PUSH
31832: LD_INT 65
31834: PUSH
31835: LD_INT 82
31837: PUSH
31838: LD_INT 83
31840: PUSH
31841: LD_INT 84
31843: PUSH
31844: LD_INT 85
31846: PUSH
31847: LD_INT 86
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: ST_TO_ADDR
31905: GO 31908
31907: POP
// if state > - 1 and state < 3 then
31908: LD_VAR 0 3
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: GREATER
31917: PUSH
31918: LD_VAR 0 3
31922: PUSH
31923: LD_INT 3
31925: LESS
31926: AND
31927: IFFALSE 31984
// for i in result do
31929: LD_ADDR_VAR 0 5
31933: PUSH
31934: LD_VAR 0 4
31938: PUSH
31939: FOR_IN
31940: IFFALSE 31982
// if GetTech ( i , side ) <> state then
31942: LD_VAR 0 5
31946: PPUSH
31947: LD_VAR 0 1
31951: PPUSH
31952: CALL_OW 321
31956: PUSH
31957: LD_VAR 0 3
31961: NONEQUAL
31962: IFFALSE 31980
// result := result diff i ;
31964: LD_ADDR_VAR 0 4
31968: PUSH
31969: LD_VAR 0 4
31973: PUSH
31974: LD_VAR 0 5
31978: DIFF
31979: ST_TO_ADDR
31980: GO 31939
31982: POP
31983: POP
// end ;
31984: LD_VAR 0 4
31988: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31989: LD_INT 0
31991: PPUSH
31992: PPUSH
31993: PPUSH
// result := true ;
31994: LD_ADDR_VAR 0 3
31998: PUSH
31999: LD_INT 1
32001: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32002: LD_ADDR_VAR 0 5
32006: PUSH
32007: LD_VAR 0 2
32011: PPUSH
32012: CALL_OW 480
32016: ST_TO_ADDR
// if not tmp then
32017: LD_VAR 0 5
32021: NOT
32022: IFFALSE 32026
// exit ;
32024: GO 32075
// for i in tmp do
32026: LD_ADDR_VAR 0 4
32030: PUSH
32031: LD_VAR 0 5
32035: PUSH
32036: FOR_IN
32037: IFFALSE 32073
// if GetTech ( i , side ) <> state_researched then
32039: LD_VAR 0 4
32043: PPUSH
32044: LD_VAR 0 1
32048: PPUSH
32049: CALL_OW 321
32053: PUSH
32054: LD_INT 2
32056: NONEQUAL
32057: IFFALSE 32071
// begin result := false ;
32059: LD_ADDR_VAR 0 3
32063: PUSH
32064: LD_INT 0
32066: ST_TO_ADDR
// exit ;
32067: POP
32068: POP
32069: GO 32075
// end ;
32071: GO 32036
32073: POP
32074: POP
// end ;
32075: LD_VAR 0 3
32079: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32080: LD_INT 0
32082: PPUSH
32083: PPUSH
32084: PPUSH
32085: PPUSH
32086: PPUSH
32087: PPUSH
32088: PPUSH
32089: PPUSH
32090: PPUSH
32091: PPUSH
32092: PPUSH
32093: PPUSH
32094: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32095: LD_VAR 0 1
32099: NOT
32100: PUSH
32101: LD_VAR 0 1
32105: PPUSH
32106: CALL_OW 257
32110: PUSH
32111: LD_INT 9
32113: NONEQUAL
32114: OR
32115: IFFALSE 32119
// exit ;
32117: GO 32692
// side := GetSide ( unit ) ;
32119: LD_ADDR_VAR 0 9
32123: PUSH
32124: LD_VAR 0 1
32128: PPUSH
32129: CALL_OW 255
32133: ST_TO_ADDR
// tech_space := tech_spacanom ;
32134: LD_ADDR_VAR 0 12
32138: PUSH
32139: LD_INT 29
32141: ST_TO_ADDR
// tech_time := tech_taurad ;
32142: LD_ADDR_VAR 0 13
32146: PUSH
32147: LD_INT 28
32149: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32150: LD_ADDR_VAR 0 11
32154: PUSH
32155: LD_VAR 0 1
32159: PPUSH
32160: CALL_OW 310
32164: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32165: LD_VAR 0 11
32169: PPUSH
32170: CALL_OW 247
32174: PUSH
32175: LD_INT 2
32177: EQUAL
32178: IFFALSE 32182
// exit ;
32180: GO 32692
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32182: LD_ADDR_VAR 0 8
32186: PUSH
32187: LD_INT 81
32189: PUSH
32190: LD_VAR 0 9
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 3
32201: PUSH
32202: LD_INT 21
32204: PUSH
32205: LD_INT 3
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PPUSH
32220: CALL_OW 69
32224: ST_TO_ADDR
// if not tmp then
32225: LD_VAR 0 8
32229: NOT
32230: IFFALSE 32234
// exit ;
32232: GO 32692
// if in_unit then
32234: LD_VAR 0 11
32238: IFFALSE 32262
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32240: LD_ADDR_VAR 0 10
32244: PUSH
32245: LD_VAR 0 8
32249: PPUSH
32250: LD_VAR 0 11
32254: PPUSH
32255: CALL_OW 74
32259: ST_TO_ADDR
32260: GO 32282
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32262: LD_ADDR_VAR 0 10
32266: PUSH
32267: LD_VAR 0 8
32271: PPUSH
32272: LD_VAR 0 1
32276: PPUSH
32277: CALL_OW 74
32281: ST_TO_ADDR
// if not enemy then
32282: LD_VAR 0 10
32286: NOT
32287: IFFALSE 32291
// exit ;
32289: GO 32692
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32291: LD_VAR 0 11
32295: PUSH
32296: LD_VAR 0 11
32300: PPUSH
32301: LD_VAR 0 10
32305: PPUSH
32306: CALL_OW 296
32310: PUSH
32311: LD_INT 13
32313: GREATER
32314: AND
32315: PUSH
32316: LD_VAR 0 1
32320: PPUSH
32321: LD_VAR 0 10
32325: PPUSH
32326: CALL_OW 296
32330: PUSH
32331: LD_INT 12
32333: GREATER
32334: OR
32335: IFFALSE 32339
// exit ;
32337: GO 32692
// missile := [ 1 ] ;
32339: LD_ADDR_VAR 0 14
32343: PUSH
32344: LD_INT 1
32346: PUSH
32347: EMPTY
32348: LIST
32349: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32350: LD_VAR 0 9
32354: PPUSH
32355: LD_VAR 0 12
32359: PPUSH
32360: CALL_OW 325
32364: IFFALSE 32393
// missile := Replace ( missile , missile + 1 , 2 ) ;
32366: LD_ADDR_VAR 0 14
32370: PUSH
32371: LD_VAR 0 14
32375: PPUSH
32376: LD_VAR 0 14
32380: PUSH
32381: LD_INT 1
32383: PLUS
32384: PPUSH
32385: LD_INT 2
32387: PPUSH
32388: CALL_OW 1
32392: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32393: LD_VAR 0 9
32397: PPUSH
32398: LD_VAR 0 13
32402: PPUSH
32403: CALL_OW 325
32407: PUSH
32408: LD_VAR 0 10
32412: PPUSH
32413: CALL_OW 255
32417: PPUSH
32418: LD_VAR 0 13
32422: PPUSH
32423: CALL_OW 325
32427: NOT
32428: AND
32429: IFFALSE 32458
// missile := Replace ( missile , missile + 1 , 3 ) ;
32431: LD_ADDR_VAR 0 14
32435: PUSH
32436: LD_VAR 0 14
32440: PPUSH
32441: LD_VAR 0 14
32445: PUSH
32446: LD_INT 1
32448: PLUS
32449: PPUSH
32450: LD_INT 3
32452: PPUSH
32453: CALL_OW 1
32457: ST_TO_ADDR
// if missile < 2 then
32458: LD_VAR 0 14
32462: PUSH
32463: LD_INT 2
32465: LESS
32466: IFFALSE 32470
// exit ;
32468: GO 32692
// x := GetX ( enemy ) ;
32470: LD_ADDR_VAR 0 4
32474: PUSH
32475: LD_VAR 0 10
32479: PPUSH
32480: CALL_OW 250
32484: ST_TO_ADDR
// y := GetY ( enemy ) ;
32485: LD_ADDR_VAR 0 5
32489: PUSH
32490: LD_VAR 0 10
32494: PPUSH
32495: CALL_OW 251
32499: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32500: LD_ADDR_VAR 0 6
32504: PUSH
32505: LD_VAR 0 4
32509: PUSH
32510: LD_INT 1
32512: NEG
32513: PPUSH
32514: LD_INT 1
32516: PPUSH
32517: CALL_OW 12
32521: PLUS
32522: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32523: LD_ADDR_VAR 0 7
32527: PUSH
32528: LD_VAR 0 5
32532: PUSH
32533: LD_INT 1
32535: NEG
32536: PPUSH
32537: LD_INT 1
32539: PPUSH
32540: CALL_OW 12
32544: PLUS
32545: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32546: LD_VAR 0 6
32550: PPUSH
32551: LD_VAR 0 7
32555: PPUSH
32556: CALL_OW 488
32560: NOT
32561: IFFALSE 32583
// begin _x := x ;
32563: LD_ADDR_VAR 0 6
32567: PUSH
32568: LD_VAR 0 4
32572: ST_TO_ADDR
// _y := y ;
32573: LD_ADDR_VAR 0 7
32577: PUSH
32578: LD_VAR 0 5
32582: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32583: LD_ADDR_VAR 0 3
32587: PUSH
32588: LD_INT 1
32590: PPUSH
32591: LD_VAR 0 14
32595: PPUSH
32596: CALL_OW 12
32600: ST_TO_ADDR
// case i of 1 :
32601: LD_VAR 0 3
32605: PUSH
32606: LD_INT 1
32608: DOUBLE
32609: EQUAL
32610: IFTRUE 32614
32612: GO 32631
32614: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32615: LD_VAR 0 1
32619: PPUSH
32620: LD_VAR 0 10
32624: PPUSH
32625: CALL_OW 115
32629: GO 32692
32631: LD_INT 2
32633: DOUBLE
32634: EQUAL
32635: IFTRUE 32639
32637: GO 32661
32639: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32640: LD_VAR 0 1
32644: PPUSH
32645: LD_VAR 0 6
32649: PPUSH
32650: LD_VAR 0 7
32654: PPUSH
32655: CALL_OW 153
32659: GO 32692
32661: LD_INT 3
32663: DOUBLE
32664: EQUAL
32665: IFTRUE 32669
32667: GO 32691
32669: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32670: LD_VAR 0 1
32674: PPUSH
32675: LD_VAR 0 6
32679: PPUSH
32680: LD_VAR 0 7
32684: PPUSH
32685: CALL_OW 154
32689: GO 32692
32691: POP
// end ;
32692: LD_VAR 0 2
32696: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32697: LD_INT 0
32699: PPUSH
32700: PPUSH
32701: PPUSH
32702: PPUSH
32703: PPUSH
32704: PPUSH
// if not unit or not building then
32705: LD_VAR 0 1
32709: NOT
32710: PUSH
32711: LD_VAR 0 2
32715: NOT
32716: OR
32717: IFFALSE 32721
// exit ;
32719: GO 32879
// x := GetX ( building ) ;
32721: LD_ADDR_VAR 0 5
32725: PUSH
32726: LD_VAR 0 2
32730: PPUSH
32731: CALL_OW 250
32735: ST_TO_ADDR
// y := GetY ( building ) ;
32736: LD_ADDR_VAR 0 6
32740: PUSH
32741: LD_VAR 0 2
32745: PPUSH
32746: CALL_OW 251
32750: ST_TO_ADDR
// for i = 0 to 5 do
32751: LD_ADDR_VAR 0 4
32755: PUSH
32756: DOUBLE
32757: LD_INT 0
32759: DEC
32760: ST_TO_ADDR
32761: LD_INT 5
32763: PUSH
32764: FOR_TO
32765: IFFALSE 32877
// begin _x := ShiftX ( x , i , 3 ) ;
32767: LD_ADDR_VAR 0 7
32771: PUSH
32772: LD_VAR 0 5
32776: PPUSH
32777: LD_VAR 0 4
32781: PPUSH
32782: LD_INT 3
32784: PPUSH
32785: CALL_OW 272
32789: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32790: LD_ADDR_VAR 0 8
32794: PUSH
32795: LD_VAR 0 6
32799: PPUSH
32800: LD_VAR 0 4
32804: PPUSH
32805: LD_INT 3
32807: PPUSH
32808: CALL_OW 273
32812: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32813: LD_VAR 0 7
32817: PPUSH
32818: LD_VAR 0 8
32822: PPUSH
32823: CALL_OW 488
32827: NOT
32828: IFFALSE 32832
// continue ;
32830: GO 32764
// if HexInfo ( _x , _y ) = 0 then
32832: LD_VAR 0 7
32836: PPUSH
32837: LD_VAR 0 8
32841: PPUSH
32842: CALL_OW 428
32846: PUSH
32847: LD_INT 0
32849: EQUAL
32850: IFFALSE 32875
// begin ComMoveXY ( unit , _x , _y ) ;
32852: LD_VAR 0 1
32856: PPUSH
32857: LD_VAR 0 7
32861: PPUSH
32862: LD_VAR 0 8
32866: PPUSH
32867: CALL_OW 111
// exit ;
32871: POP
32872: POP
32873: GO 32879
// end ; end ;
32875: GO 32764
32877: POP
32878: POP
// end ;
32879: LD_VAR 0 3
32883: RET
// export function ScanBase ( side , base_area ) ; begin
32884: LD_INT 0
32886: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32887: LD_ADDR_VAR 0 3
32891: PUSH
32892: LD_VAR 0 2
32896: PPUSH
32897: LD_INT 81
32899: PUSH
32900: LD_VAR 0 1
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PPUSH
32909: CALL_OW 70
32913: ST_TO_ADDR
// end ;
32914: LD_VAR 0 3
32918: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32919: LD_INT 0
32921: PPUSH
32922: PPUSH
32923: PPUSH
32924: PPUSH
// result := false ;
32925: LD_ADDR_VAR 0 2
32929: PUSH
32930: LD_INT 0
32932: ST_TO_ADDR
// side := GetSide ( unit ) ;
32933: LD_ADDR_VAR 0 3
32937: PUSH
32938: LD_VAR 0 1
32942: PPUSH
32943: CALL_OW 255
32947: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32948: LD_ADDR_VAR 0 4
32952: PUSH
32953: LD_VAR 0 1
32957: PPUSH
32958: CALL_OW 248
32962: ST_TO_ADDR
// case nat of 1 :
32963: LD_VAR 0 4
32967: PUSH
32968: LD_INT 1
32970: DOUBLE
32971: EQUAL
32972: IFTRUE 32976
32974: GO 32987
32976: POP
// tech := tech_lassight ; 2 :
32977: LD_ADDR_VAR 0 5
32981: PUSH
32982: LD_INT 12
32984: ST_TO_ADDR
32985: GO 33026
32987: LD_INT 2
32989: DOUBLE
32990: EQUAL
32991: IFTRUE 32995
32993: GO 33006
32995: POP
// tech := tech_mortar ; 3 :
32996: LD_ADDR_VAR 0 5
33000: PUSH
33001: LD_INT 41
33003: ST_TO_ADDR
33004: GO 33026
33006: LD_INT 3
33008: DOUBLE
33009: EQUAL
33010: IFTRUE 33014
33012: GO 33025
33014: POP
// tech := tech_bazooka ; end ;
33015: LD_ADDR_VAR 0 5
33019: PUSH
33020: LD_INT 44
33022: ST_TO_ADDR
33023: GO 33026
33025: POP
// if Researched ( side , tech ) then
33026: LD_VAR 0 3
33030: PPUSH
33031: LD_VAR 0 5
33035: PPUSH
33036: CALL_OW 325
33040: IFFALSE 33067
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33042: LD_ADDR_VAR 0 2
33046: PUSH
33047: LD_INT 5
33049: PUSH
33050: LD_INT 8
33052: PUSH
33053: LD_INT 9
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: LIST
33060: PUSH
33061: LD_VAR 0 4
33065: ARRAY
33066: ST_TO_ADDR
// end ;
33067: LD_VAR 0 2
33071: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33072: LD_INT 0
33074: PPUSH
33075: PPUSH
33076: PPUSH
// if not mines then
33077: LD_VAR 0 2
33081: NOT
33082: IFFALSE 33086
// exit ;
33084: GO 33230
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33086: LD_ADDR_VAR 0 5
33090: PUSH
33091: LD_INT 81
33093: PUSH
33094: LD_VAR 0 1
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 3
33105: PUSH
33106: LD_INT 21
33108: PUSH
33109: LD_INT 3
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PPUSH
33124: CALL_OW 69
33128: ST_TO_ADDR
// for i in mines do
33129: LD_ADDR_VAR 0 4
33133: PUSH
33134: LD_VAR 0 2
33138: PUSH
33139: FOR_IN
33140: IFFALSE 33228
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33142: LD_VAR 0 4
33146: PUSH
33147: LD_INT 1
33149: ARRAY
33150: PPUSH
33151: LD_VAR 0 4
33155: PUSH
33156: LD_INT 2
33158: ARRAY
33159: PPUSH
33160: CALL_OW 458
33164: NOT
33165: IFFALSE 33169
// continue ;
33167: GO 33139
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33169: LD_VAR 0 4
33173: PUSH
33174: LD_INT 1
33176: ARRAY
33177: PPUSH
33178: LD_VAR 0 4
33182: PUSH
33183: LD_INT 2
33185: ARRAY
33186: PPUSH
33187: CALL_OW 428
33191: PUSH
33192: LD_VAR 0 5
33196: IN
33197: IFFALSE 33226
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33199: LD_VAR 0 4
33203: PUSH
33204: LD_INT 1
33206: ARRAY
33207: PPUSH
33208: LD_VAR 0 4
33212: PUSH
33213: LD_INT 2
33215: ARRAY
33216: PPUSH
33217: LD_VAR 0 1
33221: PPUSH
33222: CALL_OW 456
// end ;
33226: GO 33139
33228: POP
33229: POP
// end ;
33230: LD_VAR 0 3
33234: RET
// export function Count ( array ) ; var i ; begin
33235: LD_INT 0
33237: PPUSH
33238: PPUSH
// result := 0 ;
33239: LD_ADDR_VAR 0 2
33243: PUSH
33244: LD_INT 0
33246: ST_TO_ADDR
// for i in array do
33247: LD_ADDR_VAR 0 3
33251: PUSH
33252: LD_VAR 0 1
33256: PUSH
33257: FOR_IN
33258: IFFALSE 33282
// if i then
33260: LD_VAR 0 3
33264: IFFALSE 33280
// result := result + 1 ;
33266: LD_ADDR_VAR 0 2
33270: PUSH
33271: LD_VAR 0 2
33275: PUSH
33276: LD_INT 1
33278: PLUS
33279: ST_TO_ADDR
33280: GO 33257
33282: POP
33283: POP
// end ;
33284: LD_VAR 0 2
33288: RET
// export function IsEmpty ( building ) ; begin
33289: LD_INT 0
33291: PPUSH
// if not building then
33292: LD_VAR 0 1
33296: NOT
33297: IFFALSE 33301
// exit ;
33299: GO 33344
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33301: LD_ADDR_VAR 0 2
33305: PUSH
33306: LD_VAR 0 1
33310: PUSH
33311: LD_INT 22
33313: PUSH
33314: LD_VAR 0 1
33318: PPUSH
33319: CALL_OW 255
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 58
33330: PUSH
33331: EMPTY
33332: LIST
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PPUSH
33338: CALL_OW 69
33342: IN
33343: ST_TO_ADDR
// end ;
33344: LD_VAR 0 2
33348: RET
// export function IsNotFull ( building ) ; var places ; begin
33349: LD_INT 0
33351: PPUSH
33352: PPUSH
// if not building then
33353: LD_VAR 0 1
33357: NOT
33358: IFFALSE 33362
// exit ;
33360: GO 33533
// result := false ;
33362: LD_ADDR_VAR 0 2
33366: PUSH
33367: LD_INT 0
33369: ST_TO_ADDR
// places := 0 ;
33370: LD_ADDR_VAR 0 3
33374: PUSH
33375: LD_INT 0
33377: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33378: LD_VAR 0 1
33382: PPUSH
33383: CALL_OW 266
33387: PUSH
33388: LD_INT 0
33390: DOUBLE
33391: EQUAL
33392: IFTRUE 33450
33394: LD_INT 1
33396: DOUBLE
33397: EQUAL
33398: IFTRUE 33450
33400: LD_INT 6
33402: DOUBLE
33403: EQUAL
33404: IFTRUE 33450
33406: LD_INT 7
33408: DOUBLE
33409: EQUAL
33410: IFTRUE 33450
33412: LD_INT 8
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33450
33418: LD_INT 4
33420: DOUBLE
33421: EQUAL
33422: IFTRUE 33450
33424: LD_INT 5
33426: DOUBLE
33427: EQUAL
33428: IFTRUE 33450
33430: LD_INT 2
33432: DOUBLE
33433: EQUAL
33434: IFTRUE 33450
33436: LD_INT 3
33438: DOUBLE
33439: EQUAL
33440: IFTRUE 33450
33442: LD_INT 35
33444: DOUBLE
33445: EQUAL
33446: IFTRUE 33450
33448: GO 33461
33450: POP
// places := 6 ; b_bunker , b_breastwork :
33451: LD_ADDR_VAR 0 3
33455: PUSH
33456: LD_INT 6
33458: ST_TO_ADDR
33459: GO 33506
33461: LD_INT 32
33463: DOUBLE
33464: EQUAL
33465: IFTRUE 33475
33467: LD_INT 31
33469: DOUBLE
33470: EQUAL
33471: IFTRUE 33475
33473: GO 33486
33475: POP
// places := 1 ; b_control_tower :
33476: LD_ADDR_VAR 0 3
33480: PUSH
33481: LD_INT 1
33483: ST_TO_ADDR
33484: GO 33506
33486: LD_INT 36
33488: DOUBLE
33489: EQUAL
33490: IFTRUE 33494
33492: GO 33505
33494: POP
// places := 3 ; end ;
33495: LD_ADDR_VAR 0 3
33499: PUSH
33500: LD_INT 3
33502: ST_TO_ADDR
33503: GO 33506
33505: POP
// if places then
33506: LD_VAR 0 3
33510: IFFALSE 33533
// result := UnitsInside ( building ) < places ;
33512: LD_ADDR_VAR 0 2
33516: PUSH
33517: LD_VAR 0 1
33521: PPUSH
33522: CALL_OW 313
33526: PUSH
33527: LD_VAR 0 3
33531: LESS
33532: ST_TO_ADDR
// end ;
33533: LD_VAR 0 2
33537: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33538: LD_INT 0
33540: PPUSH
33541: PPUSH
33542: PPUSH
33543: PPUSH
// tmp := [ ] ;
33544: LD_ADDR_VAR 0 3
33548: PUSH
33549: EMPTY
33550: ST_TO_ADDR
// list := [ ] ;
33551: LD_ADDR_VAR 0 5
33555: PUSH
33556: EMPTY
33557: ST_TO_ADDR
// for i = 16 to 25 do
33558: LD_ADDR_VAR 0 4
33562: PUSH
33563: DOUBLE
33564: LD_INT 16
33566: DEC
33567: ST_TO_ADDR
33568: LD_INT 25
33570: PUSH
33571: FOR_TO
33572: IFFALSE 33645
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33574: LD_ADDR_VAR 0 3
33578: PUSH
33579: LD_VAR 0 3
33583: PUSH
33584: LD_INT 22
33586: PUSH
33587: LD_VAR 0 1
33591: PPUSH
33592: CALL_OW 255
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 91
33603: PUSH
33604: LD_VAR 0 1
33608: PUSH
33609: LD_INT 6
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 30
33619: PUSH
33620: LD_VAR 0 4
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: PUSH
33634: EMPTY
33635: LIST
33636: PPUSH
33637: CALL_OW 69
33641: ADD
33642: ST_TO_ADDR
33643: GO 33571
33645: POP
33646: POP
// for i = 1 to tmp do
33647: LD_ADDR_VAR 0 4
33651: PUSH
33652: DOUBLE
33653: LD_INT 1
33655: DEC
33656: ST_TO_ADDR
33657: LD_VAR 0 3
33661: PUSH
33662: FOR_TO
33663: IFFALSE 33751
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33665: LD_ADDR_VAR 0 5
33669: PUSH
33670: LD_VAR 0 5
33674: PUSH
33675: LD_VAR 0 3
33679: PUSH
33680: LD_VAR 0 4
33684: ARRAY
33685: PPUSH
33686: CALL_OW 266
33690: PUSH
33691: LD_VAR 0 3
33695: PUSH
33696: LD_VAR 0 4
33700: ARRAY
33701: PPUSH
33702: CALL_OW 250
33706: PUSH
33707: LD_VAR 0 3
33711: PUSH
33712: LD_VAR 0 4
33716: ARRAY
33717: PPUSH
33718: CALL_OW 251
33722: PUSH
33723: LD_VAR 0 3
33727: PUSH
33728: LD_VAR 0 4
33732: ARRAY
33733: PPUSH
33734: CALL_OW 254
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: PUSH
33745: EMPTY
33746: LIST
33747: ADD
33748: ST_TO_ADDR
33749: GO 33662
33751: POP
33752: POP
// result := list ;
33753: LD_ADDR_VAR 0 2
33757: PUSH
33758: LD_VAR 0 5
33762: ST_TO_ADDR
// end ;
33763: LD_VAR 0 2
33767: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33768: LD_INT 0
33770: PPUSH
33771: PPUSH
33772: PPUSH
33773: PPUSH
33774: PPUSH
33775: PPUSH
33776: PPUSH
// if not factory then
33777: LD_VAR 0 1
33781: NOT
33782: IFFALSE 33786
// exit ;
33784: GO 34379
// if control = control_apeman then
33786: LD_VAR 0 4
33790: PUSH
33791: LD_INT 5
33793: EQUAL
33794: IFFALSE 33903
// begin tmp := UnitsInside ( factory ) ;
33796: LD_ADDR_VAR 0 8
33800: PUSH
33801: LD_VAR 0 1
33805: PPUSH
33806: CALL_OW 313
33810: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33811: LD_VAR 0 8
33815: PPUSH
33816: LD_INT 25
33818: PUSH
33819: LD_INT 12
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PPUSH
33826: CALL_OW 72
33830: NOT
33831: IFFALSE 33841
// control := control_manual ;
33833: LD_ADDR_VAR 0 4
33837: PUSH
33838: LD_INT 1
33840: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33841: LD_ADDR_VAR 0 8
33845: PUSH
33846: LD_VAR 0 1
33850: PPUSH
33851: CALL 33538 0 1
33855: ST_TO_ADDR
// if tmp then
33856: LD_VAR 0 8
33860: IFFALSE 33903
// begin for i in tmp do
33862: LD_ADDR_VAR 0 7
33866: PUSH
33867: LD_VAR 0 8
33871: PUSH
33872: FOR_IN
33873: IFFALSE 33901
// if i [ 1 ] = b_ext_radio then
33875: LD_VAR 0 7
33879: PUSH
33880: LD_INT 1
33882: ARRAY
33883: PUSH
33884: LD_INT 22
33886: EQUAL
33887: IFFALSE 33899
// begin control := control_remote ;
33889: LD_ADDR_VAR 0 4
33893: PUSH
33894: LD_INT 2
33896: ST_TO_ADDR
// break ;
33897: GO 33901
// end ;
33899: GO 33872
33901: POP
33902: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33903: LD_VAR 0 1
33907: PPUSH
33908: LD_VAR 0 2
33912: PPUSH
33913: LD_VAR 0 3
33917: PPUSH
33918: LD_VAR 0 4
33922: PPUSH
33923: LD_VAR 0 5
33927: PPUSH
33928: CALL_OW 448
33932: IFFALSE 33967
// begin result := [ chassis , engine , control , weapon ] ;
33934: LD_ADDR_VAR 0 6
33938: PUSH
33939: LD_VAR 0 2
33943: PUSH
33944: LD_VAR 0 3
33948: PUSH
33949: LD_VAR 0 4
33953: PUSH
33954: LD_VAR 0 5
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: ST_TO_ADDR
// exit ;
33965: GO 34379
// end ; _chassis := AvailableChassisList ( factory ) ;
33967: LD_ADDR_VAR 0 9
33971: PUSH
33972: LD_VAR 0 1
33976: PPUSH
33977: CALL_OW 475
33981: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33982: LD_ADDR_VAR 0 11
33986: PUSH
33987: LD_VAR 0 1
33991: PPUSH
33992: CALL_OW 476
33996: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33997: LD_ADDR_VAR 0 12
34001: PUSH
34002: LD_VAR 0 1
34006: PPUSH
34007: CALL_OW 477
34011: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34012: LD_ADDR_VAR 0 10
34016: PUSH
34017: LD_VAR 0 1
34021: PPUSH
34022: CALL_OW 478
34026: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34027: LD_VAR 0 9
34031: NOT
34032: PUSH
34033: LD_VAR 0 11
34037: NOT
34038: OR
34039: PUSH
34040: LD_VAR 0 12
34044: NOT
34045: OR
34046: PUSH
34047: LD_VAR 0 10
34051: NOT
34052: OR
34053: IFFALSE 34088
// begin result := [ chassis , engine , control , weapon ] ;
34055: LD_ADDR_VAR 0 6
34059: PUSH
34060: LD_VAR 0 2
34064: PUSH
34065: LD_VAR 0 3
34069: PUSH
34070: LD_VAR 0 4
34074: PUSH
34075: LD_VAR 0 5
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: ST_TO_ADDR
// exit ;
34086: GO 34379
// end ; if not chassis in _chassis then
34088: LD_VAR 0 2
34092: PUSH
34093: LD_VAR 0 9
34097: IN
34098: NOT
34099: IFFALSE 34125
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34101: LD_ADDR_VAR 0 2
34105: PUSH
34106: LD_VAR 0 9
34110: PUSH
34111: LD_INT 1
34113: PPUSH
34114: LD_VAR 0 9
34118: PPUSH
34119: CALL_OW 12
34123: ARRAY
34124: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34125: LD_VAR 0 2
34129: PPUSH
34130: LD_VAR 0 3
34134: PPUSH
34135: CALL 34384 0 2
34139: NOT
34140: IFFALSE 34199
// repeat engine := _engine [ 1 ] ;
34142: LD_ADDR_VAR 0 3
34146: PUSH
34147: LD_VAR 0 11
34151: PUSH
34152: LD_INT 1
34154: ARRAY
34155: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34156: LD_ADDR_VAR 0 11
34160: PUSH
34161: LD_VAR 0 11
34165: PPUSH
34166: LD_INT 1
34168: PPUSH
34169: CALL_OW 3
34173: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34174: LD_VAR 0 2
34178: PPUSH
34179: LD_VAR 0 3
34183: PPUSH
34184: CALL 34384 0 2
34188: PUSH
34189: LD_VAR 0 11
34193: PUSH
34194: EMPTY
34195: EQUAL
34196: OR
34197: IFFALSE 34142
// if not control in _control then
34199: LD_VAR 0 4
34203: PUSH
34204: LD_VAR 0 12
34208: IN
34209: NOT
34210: IFFALSE 34236
// control := _control [ rand ( 1 , _control ) ] ;
34212: LD_ADDR_VAR 0 4
34216: PUSH
34217: LD_VAR 0 12
34221: PUSH
34222: LD_INT 1
34224: PPUSH
34225: LD_VAR 0 12
34229: PPUSH
34230: CALL_OW 12
34234: ARRAY
34235: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34236: LD_VAR 0 2
34240: PPUSH
34241: LD_VAR 0 5
34245: PPUSH
34246: CALL 34604 0 2
34250: NOT
34251: IFFALSE 34310
// repeat weapon := _weapon [ 1 ] ;
34253: LD_ADDR_VAR 0 5
34257: PUSH
34258: LD_VAR 0 10
34262: PUSH
34263: LD_INT 1
34265: ARRAY
34266: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34267: LD_ADDR_VAR 0 10
34271: PUSH
34272: LD_VAR 0 10
34276: PPUSH
34277: LD_INT 1
34279: PPUSH
34280: CALL_OW 3
34284: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34285: LD_VAR 0 2
34289: PPUSH
34290: LD_VAR 0 5
34294: PPUSH
34295: CALL 34604 0 2
34299: PUSH
34300: LD_VAR 0 10
34304: PUSH
34305: EMPTY
34306: EQUAL
34307: OR
34308: IFFALSE 34253
// result := [ ] ;
34310: LD_ADDR_VAR 0 6
34314: PUSH
34315: EMPTY
34316: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34317: LD_VAR 0 1
34321: PPUSH
34322: LD_VAR 0 2
34326: PPUSH
34327: LD_VAR 0 3
34331: PPUSH
34332: LD_VAR 0 4
34336: PPUSH
34337: LD_VAR 0 5
34341: PPUSH
34342: CALL_OW 448
34346: IFFALSE 34379
// result := [ chassis , engine , control , weapon ] ;
34348: LD_ADDR_VAR 0 6
34352: PUSH
34353: LD_VAR 0 2
34357: PUSH
34358: LD_VAR 0 3
34362: PUSH
34363: LD_VAR 0 4
34367: PUSH
34368: LD_VAR 0 5
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: ST_TO_ADDR
// end ;
34379: LD_VAR 0 6
34383: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34384: LD_INT 0
34386: PPUSH
// if not chassis or not engine then
34387: LD_VAR 0 1
34391: NOT
34392: PUSH
34393: LD_VAR 0 2
34397: NOT
34398: OR
34399: IFFALSE 34403
// exit ;
34401: GO 34599
// case engine of engine_solar :
34403: LD_VAR 0 2
34407: PUSH
34408: LD_INT 2
34410: DOUBLE
34411: EQUAL
34412: IFTRUE 34416
34414: GO 34454
34416: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34417: LD_ADDR_VAR 0 3
34421: PUSH
34422: LD_INT 11
34424: PUSH
34425: LD_INT 12
34427: PUSH
34428: LD_INT 13
34430: PUSH
34431: LD_INT 14
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: LD_INT 2
34439: PUSH
34440: LD_INT 3
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: ST_TO_ADDR
34452: GO 34583
34454: LD_INT 1
34456: DOUBLE
34457: EQUAL
34458: IFTRUE 34462
34460: GO 34524
34462: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34463: LD_ADDR_VAR 0 3
34467: PUSH
34468: LD_INT 11
34470: PUSH
34471: LD_INT 12
34473: PUSH
34474: LD_INT 13
34476: PUSH
34477: LD_INT 14
34479: PUSH
34480: LD_INT 1
34482: PUSH
34483: LD_INT 2
34485: PUSH
34486: LD_INT 3
34488: PUSH
34489: LD_INT 4
34491: PUSH
34492: LD_INT 5
34494: PUSH
34495: LD_INT 21
34497: PUSH
34498: LD_INT 23
34500: PUSH
34501: LD_INT 22
34503: PUSH
34504: LD_INT 24
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: ST_TO_ADDR
34522: GO 34583
34524: LD_INT 3
34526: DOUBLE
34527: EQUAL
34528: IFTRUE 34532
34530: GO 34582
34532: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34533: LD_ADDR_VAR 0 3
34537: PUSH
34538: LD_INT 13
34540: PUSH
34541: LD_INT 14
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: LD_INT 3
34549: PUSH
34550: LD_INT 4
34552: PUSH
34553: LD_INT 5
34555: PUSH
34556: LD_INT 21
34558: PUSH
34559: LD_INT 22
34561: PUSH
34562: LD_INT 23
34564: PUSH
34565: LD_INT 24
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: ST_TO_ADDR
34580: GO 34583
34582: POP
// result := ( chassis in result ) ;
34583: LD_ADDR_VAR 0 3
34587: PUSH
34588: LD_VAR 0 1
34592: PUSH
34593: LD_VAR 0 3
34597: IN
34598: ST_TO_ADDR
// end ;
34599: LD_VAR 0 3
34603: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34604: LD_INT 0
34606: PPUSH
// if not chassis or not weapon then
34607: LD_VAR 0 1
34611: NOT
34612: PUSH
34613: LD_VAR 0 2
34617: NOT
34618: OR
34619: IFFALSE 34623
// exit ;
34621: GO 35683
// case weapon of us_machine_gun :
34623: LD_VAR 0 2
34627: PUSH
34628: LD_INT 2
34630: DOUBLE
34631: EQUAL
34632: IFTRUE 34636
34634: GO 34666
34636: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34637: LD_ADDR_VAR 0 3
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: LD_INT 2
34647: PUSH
34648: LD_INT 3
34650: PUSH
34651: LD_INT 4
34653: PUSH
34654: LD_INT 5
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: ST_TO_ADDR
34664: GO 35667
34666: LD_INT 3
34668: DOUBLE
34669: EQUAL
34670: IFTRUE 34674
34672: GO 34704
34674: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34675: LD_ADDR_VAR 0 3
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: LD_INT 3
34688: PUSH
34689: LD_INT 4
34691: PUSH
34692: LD_INT 5
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: ST_TO_ADDR
34702: GO 35667
34704: LD_INT 11
34706: DOUBLE
34707: EQUAL
34708: IFTRUE 34712
34710: GO 34742
34712: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34713: LD_ADDR_VAR 0 3
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: LD_INT 2
34723: PUSH
34724: LD_INT 3
34726: PUSH
34727: LD_INT 4
34729: PUSH
34730: LD_INT 5
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: ST_TO_ADDR
34740: GO 35667
34742: LD_INT 4
34744: DOUBLE
34745: EQUAL
34746: IFTRUE 34750
34748: GO 34776
34750: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34751: LD_ADDR_VAR 0 3
34755: PUSH
34756: LD_INT 2
34758: PUSH
34759: LD_INT 3
34761: PUSH
34762: LD_INT 4
34764: PUSH
34765: LD_INT 5
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: ST_TO_ADDR
34774: GO 35667
34776: LD_INT 5
34778: DOUBLE
34779: EQUAL
34780: IFTRUE 34784
34782: GO 34810
34784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34785: LD_ADDR_VAR 0 3
34789: PUSH
34790: LD_INT 2
34792: PUSH
34793: LD_INT 3
34795: PUSH
34796: LD_INT 4
34798: PUSH
34799: LD_INT 5
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: ST_TO_ADDR
34808: GO 35667
34810: LD_INT 9
34812: DOUBLE
34813: EQUAL
34814: IFTRUE 34818
34816: GO 34844
34818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34819: LD_ADDR_VAR 0 3
34823: PUSH
34824: LD_INT 2
34826: PUSH
34827: LD_INT 3
34829: PUSH
34830: LD_INT 4
34832: PUSH
34833: LD_INT 5
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: ST_TO_ADDR
34842: GO 35667
34844: LD_INT 7
34846: DOUBLE
34847: EQUAL
34848: IFTRUE 34852
34850: GO 34878
34852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34853: LD_ADDR_VAR 0 3
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: LD_INT 3
34863: PUSH
34864: LD_INT 4
34866: PUSH
34867: LD_INT 5
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: ST_TO_ADDR
34876: GO 35667
34878: LD_INT 12
34880: DOUBLE
34881: EQUAL
34882: IFTRUE 34886
34884: GO 34912
34886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34887: LD_ADDR_VAR 0 3
34891: PUSH
34892: LD_INT 2
34894: PUSH
34895: LD_INT 3
34897: PUSH
34898: LD_INT 4
34900: PUSH
34901: LD_INT 5
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: ST_TO_ADDR
34910: GO 35667
34912: LD_INT 13
34914: DOUBLE
34915: EQUAL
34916: IFTRUE 34920
34918: GO 34946
34920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34921: LD_ADDR_VAR 0 3
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: LD_INT 3
34931: PUSH
34932: LD_INT 4
34934: PUSH
34935: LD_INT 5
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: ST_TO_ADDR
34944: GO 35667
34946: LD_INT 14
34948: DOUBLE
34949: EQUAL
34950: IFTRUE 34954
34952: GO 34972
34954: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34955: LD_ADDR_VAR 0 3
34959: PUSH
34960: LD_INT 4
34962: PUSH
34963: LD_INT 5
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: ST_TO_ADDR
34970: GO 35667
34972: LD_INT 6
34974: DOUBLE
34975: EQUAL
34976: IFTRUE 34980
34978: GO 34998
34980: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34981: LD_ADDR_VAR 0 3
34985: PUSH
34986: LD_INT 4
34988: PUSH
34989: LD_INT 5
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: ST_TO_ADDR
34996: GO 35667
34998: LD_INT 10
35000: DOUBLE
35001: EQUAL
35002: IFTRUE 35006
35004: GO 35024
35006: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35007: LD_ADDR_VAR 0 3
35011: PUSH
35012: LD_INT 4
35014: PUSH
35015: LD_INT 5
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: ST_TO_ADDR
35022: GO 35667
35024: LD_INT 22
35026: DOUBLE
35027: EQUAL
35028: IFTRUE 35032
35030: GO 35058
35032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35033: LD_ADDR_VAR 0 3
35037: PUSH
35038: LD_INT 11
35040: PUSH
35041: LD_INT 12
35043: PUSH
35044: LD_INT 13
35046: PUSH
35047: LD_INT 14
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: ST_TO_ADDR
35056: GO 35667
35058: LD_INT 23
35060: DOUBLE
35061: EQUAL
35062: IFTRUE 35066
35064: GO 35092
35066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35067: LD_ADDR_VAR 0 3
35071: PUSH
35072: LD_INT 11
35074: PUSH
35075: LD_INT 12
35077: PUSH
35078: LD_INT 13
35080: PUSH
35081: LD_INT 14
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: ST_TO_ADDR
35090: GO 35667
35092: LD_INT 24
35094: DOUBLE
35095: EQUAL
35096: IFTRUE 35100
35098: GO 35126
35100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35101: LD_ADDR_VAR 0 3
35105: PUSH
35106: LD_INT 11
35108: PUSH
35109: LD_INT 12
35111: PUSH
35112: LD_INT 13
35114: PUSH
35115: LD_INT 14
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: ST_TO_ADDR
35124: GO 35667
35126: LD_INT 30
35128: DOUBLE
35129: EQUAL
35130: IFTRUE 35134
35132: GO 35160
35134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35135: LD_ADDR_VAR 0 3
35139: PUSH
35140: LD_INT 11
35142: PUSH
35143: LD_INT 12
35145: PUSH
35146: LD_INT 13
35148: PUSH
35149: LD_INT 14
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: ST_TO_ADDR
35158: GO 35667
35160: LD_INT 25
35162: DOUBLE
35163: EQUAL
35164: IFTRUE 35168
35166: GO 35186
35168: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35169: LD_ADDR_VAR 0 3
35173: PUSH
35174: LD_INT 13
35176: PUSH
35177: LD_INT 14
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: ST_TO_ADDR
35184: GO 35667
35186: LD_INT 27
35188: DOUBLE
35189: EQUAL
35190: IFTRUE 35194
35192: GO 35212
35194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35195: LD_ADDR_VAR 0 3
35199: PUSH
35200: LD_INT 13
35202: PUSH
35203: LD_INT 14
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: ST_TO_ADDR
35210: GO 35667
35212: LD_INT 92
35214: DOUBLE
35215: EQUAL
35216: IFTRUE 35220
35218: GO 35246
35220: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35221: LD_ADDR_VAR 0 3
35225: PUSH
35226: LD_INT 11
35228: PUSH
35229: LD_INT 12
35231: PUSH
35232: LD_INT 13
35234: PUSH
35235: LD_INT 14
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: ST_TO_ADDR
35244: GO 35667
35246: LD_INT 28
35248: DOUBLE
35249: EQUAL
35250: IFTRUE 35254
35252: GO 35272
35254: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35255: LD_ADDR_VAR 0 3
35259: PUSH
35260: LD_INT 13
35262: PUSH
35263: LD_INT 14
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: ST_TO_ADDR
35270: GO 35667
35272: LD_INT 29
35274: DOUBLE
35275: EQUAL
35276: IFTRUE 35280
35278: GO 35298
35280: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35281: LD_ADDR_VAR 0 3
35285: PUSH
35286: LD_INT 13
35288: PUSH
35289: LD_INT 14
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: ST_TO_ADDR
35296: GO 35667
35298: LD_INT 31
35300: DOUBLE
35301: EQUAL
35302: IFTRUE 35306
35304: GO 35324
35306: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35307: LD_ADDR_VAR 0 3
35311: PUSH
35312: LD_INT 13
35314: PUSH
35315: LD_INT 14
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: ST_TO_ADDR
35322: GO 35667
35324: LD_INT 26
35326: DOUBLE
35327: EQUAL
35328: IFTRUE 35332
35330: GO 35350
35332: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35333: LD_ADDR_VAR 0 3
35337: PUSH
35338: LD_INT 13
35340: PUSH
35341: LD_INT 14
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: ST_TO_ADDR
35348: GO 35667
35350: LD_INT 42
35352: DOUBLE
35353: EQUAL
35354: IFTRUE 35358
35356: GO 35384
35358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35359: LD_ADDR_VAR 0 3
35363: PUSH
35364: LD_INT 21
35366: PUSH
35367: LD_INT 22
35369: PUSH
35370: LD_INT 23
35372: PUSH
35373: LD_INT 24
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: ST_TO_ADDR
35382: GO 35667
35384: LD_INT 43
35386: DOUBLE
35387: EQUAL
35388: IFTRUE 35392
35390: GO 35418
35392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35393: LD_ADDR_VAR 0 3
35397: PUSH
35398: LD_INT 21
35400: PUSH
35401: LD_INT 22
35403: PUSH
35404: LD_INT 23
35406: PUSH
35407: LD_INT 24
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: ST_TO_ADDR
35416: GO 35667
35418: LD_INT 44
35420: DOUBLE
35421: EQUAL
35422: IFTRUE 35426
35424: GO 35452
35426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35427: LD_ADDR_VAR 0 3
35431: PUSH
35432: LD_INT 21
35434: PUSH
35435: LD_INT 22
35437: PUSH
35438: LD_INT 23
35440: PUSH
35441: LD_INT 24
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: ST_TO_ADDR
35450: GO 35667
35452: LD_INT 45
35454: DOUBLE
35455: EQUAL
35456: IFTRUE 35460
35458: GO 35486
35460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35461: LD_ADDR_VAR 0 3
35465: PUSH
35466: LD_INT 21
35468: PUSH
35469: LD_INT 22
35471: PUSH
35472: LD_INT 23
35474: PUSH
35475: LD_INT 24
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: ST_TO_ADDR
35484: GO 35667
35486: LD_INT 49
35488: DOUBLE
35489: EQUAL
35490: IFTRUE 35494
35492: GO 35520
35494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35495: LD_ADDR_VAR 0 3
35499: PUSH
35500: LD_INT 21
35502: PUSH
35503: LD_INT 22
35505: PUSH
35506: LD_INT 23
35508: PUSH
35509: LD_INT 24
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: ST_TO_ADDR
35518: GO 35667
35520: LD_INT 51
35522: DOUBLE
35523: EQUAL
35524: IFTRUE 35528
35526: GO 35554
35528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35529: LD_ADDR_VAR 0 3
35533: PUSH
35534: LD_INT 21
35536: PUSH
35537: LD_INT 22
35539: PUSH
35540: LD_INT 23
35542: PUSH
35543: LD_INT 24
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: ST_TO_ADDR
35552: GO 35667
35554: LD_INT 52
35556: DOUBLE
35557: EQUAL
35558: IFTRUE 35562
35560: GO 35588
35562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35563: LD_ADDR_VAR 0 3
35567: PUSH
35568: LD_INT 21
35570: PUSH
35571: LD_INT 22
35573: PUSH
35574: LD_INT 23
35576: PUSH
35577: LD_INT 24
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: ST_TO_ADDR
35586: GO 35667
35588: LD_INT 53
35590: DOUBLE
35591: EQUAL
35592: IFTRUE 35596
35594: GO 35614
35596: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35597: LD_ADDR_VAR 0 3
35601: PUSH
35602: LD_INT 23
35604: PUSH
35605: LD_INT 24
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: ST_TO_ADDR
35612: GO 35667
35614: LD_INT 46
35616: DOUBLE
35617: EQUAL
35618: IFTRUE 35622
35620: GO 35640
35622: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35623: LD_ADDR_VAR 0 3
35627: PUSH
35628: LD_INT 23
35630: PUSH
35631: LD_INT 24
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: ST_TO_ADDR
35638: GO 35667
35640: LD_INT 47
35642: DOUBLE
35643: EQUAL
35644: IFTRUE 35648
35646: GO 35666
35648: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35649: LD_ADDR_VAR 0 3
35653: PUSH
35654: LD_INT 23
35656: PUSH
35657: LD_INT 24
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: ST_TO_ADDR
35664: GO 35667
35666: POP
// result := ( chassis in result ) ;
35667: LD_ADDR_VAR 0 3
35671: PUSH
35672: LD_VAR 0 1
35676: PUSH
35677: LD_VAR 0 3
35681: IN
35682: ST_TO_ADDR
// end ;
35683: LD_VAR 0 3
35687: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35688: LD_INT 0
35690: PPUSH
35691: PPUSH
35692: PPUSH
35693: PPUSH
35694: PPUSH
35695: PPUSH
35696: PPUSH
// result := array ;
35697: LD_ADDR_VAR 0 5
35701: PUSH
35702: LD_VAR 0 1
35706: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35707: LD_VAR 0 1
35711: NOT
35712: PUSH
35713: LD_VAR 0 2
35717: NOT
35718: OR
35719: PUSH
35720: LD_VAR 0 3
35724: NOT
35725: OR
35726: PUSH
35727: LD_VAR 0 2
35731: PUSH
35732: LD_VAR 0 1
35736: GREATER
35737: OR
35738: PUSH
35739: LD_VAR 0 3
35743: PUSH
35744: LD_VAR 0 1
35748: GREATER
35749: OR
35750: IFFALSE 35754
// exit ;
35752: GO 36050
// if direction then
35754: LD_VAR 0 4
35758: IFFALSE 35822
// begin d := 1 ;
35760: LD_ADDR_VAR 0 9
35764: PUSH
35765: LD_INT 1
35767: ST_TO_ADDR
// if i_from > i_to then
35768: LD_VAR 0 2
35772: PUSH
35773: LD_VAR 0 3
35777: GREATER
35778: IFFALSE 35804
// length := ( array - i_from ) + i_to else
35780: LD_ADDR_VAR 0 11
35784: PUSH
35785: LD_VAR 0 1
35789: PUSH
35790: LD_VAR 0 2
35794: MINUS
35795: PUSH
35796: LD_VAR 0 3
35800: PLUS
35801: ST_TO_ADDR
35802: GO 35820
// length := i_to - i_from ;
35804: LD_ADDR_VAR 0 11
35808: PUSH
35809: LD_VAR 0 3
35813: PUSH
35814: LD_VAR 0 2
35818: MINUS
35819: ST_TO_ADDR
// end else
35820: GO 35883
// begin d := - 1 ;
35822: LD_ADDR_VAR 0 9
35826: PUSH
35827: LD_INT 1
35829: NEG
35830: ST_TO_ADDR
// if i_from > i_to then
35831: LD_VAR 0 2
35835: PUSH
35836: LD_VAR 0 3
35840: GREATER
35841: IFFALSE 35861
// length := i_from - i_to else
35843: LD_ADDR_VAR 0 11
35847: PUSH
35848: LD_VAR 0 2
35852: PUSH
35853: LD_VAR 0 3
35857: MINUS
35858: ST_TO_ADDR
35859: GO 35883
// length := ( array - i_to ) + i_from ;
35861: LD_ADDR_VAR 0 11
35865: PUSH
35866: LD_VAR 0 1
35870: PUSH
35871: LD_VAR 0 3
35875: MINUS
35876: PUSH
35877: LD_VAR 0 2
35881: PLUS
35882: ST_TO_ADDR
// end ; if not length then
35883: LD_VAR 0 11
35887: NOT
35888: IFFALSE 35892
// exit ;
35890: GO 36050
// tmp := array ;
35892: LD_ADDR_VAR 0 10
35896: PUSH
35897: LD_VAR 0 1
35901: ST_TO_ADDR
// for i = 1 to length do
35902: LD_ADDR_VAR 0 6
35906: PUSH
35907: DOUBLE
35908: LD_INT 1
35910: DEC
35911: ST_TO_ADDR
35912: LD_VAR 0 11
35916: PUSH
35917: FOR_TO
35918: IFFALSE 36038
// begin for j = 1 to array do
35920: LD_ADDR_VAR 0 7
35924: PUSH
35925: DOUBLE
35926: LD_INT 1
35928: DEC
35929: ST_TO_ADDR
35930: LD_VAR 0 1
35934: PUSH
35935: FOR_TO
35936: IFFALSE 36024
// begin k := j + d ;
35938: LD_ADDR_VAR 0 8
35942: PUSH
35943: LD_VAR 0 7
35947: PUSH
35948: LD_VAR 0 9
35952: PLUS
35953: ST_TO_ADDR
// if k > array then
35954: LD_VAR 0 8
35958: PUSH
35959: LD_VAR 0 1
35963: GREATER
35964: IFFALSE 35974
// k := 1 ;
35966: LD_ADDR_VAR 0 8
35970: PUSH
35971: LD_INT 1
35973: ST_TO_ADDR
// if not k then
35974: LD_VAR 0 8
35978: NOT
35979: IFFALSE 35991
// k := array ;
35981: LD_ADDR_VAR 0 8
35985: PUSH
35986: LD_VAR 0 1
35990: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35991: LD_ADDR_VAR 0 10
35995: PUSH
35996: LD_VAR 0 10
36000: PPUSH
36001: LD_VAR 0 8
36005: PPUSH
36006: LD_VAR 0 1
36010: PUSH
36011: LD_VAR 0 7
36015: ARRAY
36016: PPUSH
36017: CALL_OW 1
36021: ST_TO_ADDR
// end ;
36022: GO 35935
36024: POP
36025: POP
// array := tmp ;
36026: LD_ADDR_VAR 0 1
36030: PUSH
36031: LD_VAR 0 10
36035: ST_TO_ADDR
// end ;
36036: GO 35917
36038: POP
36039: POP
// result := array ;
36040: LD_ADDR_VAR 0 5
36044: PUSH
36045: LD_VAR 0 1
36049: ST_TO_ADDR
// end ;
36050: LD_VAR 0 5
36054: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36055: LD_INT 0
36057: PPUSH
36058: PPUSH
// result := 0 ;
36059: LD_ADDR_VAR 0 3
36063: PUSH
36064: LD_INT 0
36066: ST_TO_ADDR
// if not array or not value in array then
36067: LD_VAR 0 1
36071: NOT
36072: PUSH
36073: LD_VAR 0 2
36077: PUSH
36078: LD_VAR 0 1
36082: IN
36083: NOT
36084: OR
36085: IFFALSE 36089
// exit ;
36087: GO 36143
// for i = 1 to array do
36089: LD_ADDR_VAR 0 4
36093: PUSH
36094: DOUBLE
36095: LD_INT 1
36097: DEC
36098: ST_TO_ADDR
36099: LD_VAR 0 1
36103: PUSH
36104: FOR_TO
36105: IFFALSE 36141
// if value = array [ i ] then
36107: LD_VAR 0 2
36111: PUSH
36112: LD_VAR 0 1
36116: PUSH
36117: LD_VAR 0 4
36121: ARRAY
36122: EQUAL
36123: IFFALSE 36139
// begin result := i ;
36125: LD_ADDR_VAR 0 3
36129: PUSH
36130: LD_VAR 0 4
36134: ST_TO_ADDR
// exit ;
36135: POP
36136: POP
36137: GO 36143
// end ;
36139: GO 36104
36141: POP
36142: POP
// end ;
36143: LD_VAR 0 3
36147: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36148: LD_INT 0
36150: PPUSH
// vc_chassis := chassis ;
36151: LD_ADDR_OWVAR 37
36155: PUSH
36156: LD_VAR 0 1
36160: ST_TO_ADDR
// vc_engine := engine ;
36161: LD_ADDR_OWVAR 39
36165: PUSH
36166: LD_VAR 0 2
36170: ST_TO_ADDR
// vc_control := control ;
36171: LD_ADDR_OWVAR 38
36175: PUSH
36176: LD_VAR 0 3
36180: ST_TO_ADDR
// vc_weapon := weapon ;
36181: LD_ADDR_OWVAR 40
36185: PUSH
36186: LD_VAR 0 4
36190: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36191: LD_ADDR_OWVAR 41
36195: PUSH
36196: LD_VAR 0 5
36200: ST_TO_ADDR
// end ;
36201: LD_VAR 0 6
36205: RET
// export function WantPlant ( unit ) ; var task ; begin
36206: LD_INT 0
36208: PPUSH
36209: PPUSH
// result := false ;
36210: LD_ADDR_VAR 0 2
36214: PUSH
36215: LD_INT 0
36217: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36218: LD_ADDR_VAR 0 3
36222: PUSH
36223: LD_VAR 0 1
36227: PPUSH
36228: CALL_OW 437
36232: ST_TO_ADDR
// if task then
36233: LD_VAR 0 3
36237: IFFALSE 36265
// if task [ 1 ] [ 1 ] = p then
36239: LD_VAR 0 3
36243: PUSH
36244: LD_INT 1
36246: ARRAY
36247: PUSH
36248: LD_INT 1
36250: ARRAY
36251: PUSH
36252: LD_STRING p
36254: EQUAL
36255: IFFALSE 36265
// result := true ;
36257: LD_ADDR_VAR 0 2
36261: PUSH
36262: LD_INT 1
36264: ST_TO_ADDR
// end ;
36265: LD_VAR 0 2
36269: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36270: LD_INT 0
36272: PPUSH
36273: PPUSH
36274: PPUSH
36275: PPUSH
// if pos < 1 then
36276: LD_VAR 0 2
36280: PUSH
36281: LD_INT 1
36283: LESS
36284: IFFALSE 36288
// exit ;
36286: GO 36591
// if pos = 1 then
36288: LD_VAR 0 2
36292: PUSH
36293: LD_INT 1
36295: EQUAL
36296: IFFALSE 36329
// result := Replace ( arr , pos [ 1 ] , value ) else
36298: LD_ADDR_VAR 0 4
36302: PUSH
36303: LD_VAR 0 1
36307: PPUSH
36308: LD_VAR 0 2
36312: PUSH
36313: LD_INT 1
36315: ARRAY
36316: PPUSH
36317: LD_VAR 0 3
36321: PPUSH
36322: CALL_OW 1
36326: ST_TO_ADDR
36327: GO 36591
// begin tmp := arr ;
36329: LD_ADDR_VAR 0 6
36333: PUSH
36334: LD_VAR 0 1
36338: ST_TO_ADDR
// s_arr := [ tmp ] ;
36339: LD_ADDR_VAR 0 7
36343: PUSH
36344: LD_VAR 0 6
36348: PUSH
36349: EMPTY
36350: LIST
36351: ST_TO_ADDR
// for i = 1 to pos - 1 do
36352: LD_ADDR_VAR 0 5
36356: PUSH
36357: DOUBLE
36358: LD_INT 1
36360: DEC
36361: ST_TO_ADDR
36362: LD_VAR 0 2
36366: PUSH
36367: LD_INT 1
36369: MINUS
36370: PUSH
36371: FOR_TO
36372: IFFALSE 36417
// begin tmp := tmp [ pos [ i ] ] ;
36374: LD_ADDR_VAR 0 6
36378: PUSH
36379: LD_VAR 0 6
36383: PUSH
36384: LD_VAR 0 2
36388: PUSH
36389: LD_VAR 0 5
36393: ARRAY
36394: ARRAY
36395: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36396: LD_ADDR_VAR 0 7
36400: PUSH
36401: LD_VAR 0 7
36405: PUSH
36406: LD_VAR 0 6
36410: PUSH
36411: EMPTY
36412: LIST
36413: ADD
36414: ST_TO_ADDR
// end ;
36415: GO 36371
36417: POP
36418: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36419: LD_ADDR_VAR 0 6
36423: PUSH
36424: LD_VAR 0 6
36428: PPUSH
36429: LD_VAR 0 2
36433: PUSH
36434: LD_VAR 0 2
36438: ARRAY
36439: PPUSH
36440: LD_VAR 0 3
36444: PPUSH
36445: CALL_OW 1
36449: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36450: LD_ADDR_VAR 0 7
36454: PUSH
36455: LD_VAR 0 7
36459: PPUSH
36460: LD_VAR 0 7
36464: PPUSH
36465: LD_VAR 0 6
36469: PPUSH
36470: CALL_OW 1
36474: ST_TO_ADDR
// for i = s_arr downto 2 do
36475: LD_ADDR_VAR 0 5
36479: PUSH
36480: DOUBLE
36481: LD_VAR 0 7
36485: INC
36486: ST_TO_ADDR
36487: LD_INT 2
36489: PUSH
36490: FOR_DOWNTO
36491: IFFALSE 36575
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36493: LD_ADDR_VAR 0 6
36497: PUSH
36498: LD_VAR 0 7
36502: PUSH
36503: LD_VAR 0 5
36507: PUSH
36508: LD_INT 1
36510: MINUS
36511: ARRAY
36512: PPUSH
36513: LD_VAR 0 2
36517: PUSH
36518: LD_VAR 0 5
36522: PUSH
36523: LD_INT 1
36525: MINUS
36526: ARRAY
36527: PPUSH
36528: LD_VAR 0 7
36532: PUSH
36533: LD_VAR 0 5
36537: ARRAY
36538: PPUSH
36539: CALL_OW 1
36543: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36544: LD_ADDR_VAR 0 7
36548: PUSH
36549: LD_VAR 0 7
36553: PPUSH
36554: LD_VAR 0 5
36558: PUSH
36559: LD_INT 1
36561: MINUS
36562: PPUSH
36563: LD_VAR 0 6
36567: PPUSH
36568: CALL_OW 1
36572: ST_TO_ADDR
// end ;
36573: GO 36490
36575: POP
36576: POP
// result := s_arr [ 1 ] ;
36577: LD_ADDR_VAR 0 4
36581: PUSH
36582: LD_VAR 0 7
36586: PUSH
36587: LD_INT 1
36589: ARRAY
36590: ST_TO_ADDR
// end ; end ;
36591: LD_VAR 0 4
36595: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36596: LD_INT 0
36598: PPUSH
36599: PPUSH
// if not list then
36600: LD_VAR 0 1
36604: NOT
36605: IFFALSE 36609
// exit ;
36607: GO 36700
// i := list [ pos1 ] ;
36609: LD_ADDR_VAR 0 5
36613: PUSH
36614: LD_VAR 0 1
36618: PUSH
36619: LD_VAR 0 2
36623: ARRAY
36624: ST_TO_ADDR
// if not i then
36625: LD_VAR 0 5
36629: NOT
36630: IFFALSE 36634
// exit ;
36632: GO 36700
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36634: LD_ADDR_VAR 0 1
36638: PUSH
36639: LD_VAR 0 1
36643: PPUSH
36644: LD_VAR 0 2
36648: PPUSH
36649: LD_VAR 0 1
36653: PUSH
36654: LD_VAR 0 3
36658: ARRAY
36659: PPUSH
36660: CALL_OW 1
36664: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36665: LD_ADDR_VAR 0 1
36669: PUSH
36670: LD_VAR 0 1
36674: PPUSH
36675: LD_VAR 0 3
36679: PPUSH
36680: LD_VAR 0 5
36684: PPUSH
36685: CALL_OW 1
36689: ST_TO_ADDR
// result := list ;
36690: LD_ADDR_VAR 0 4
36694: PUSH
36695: LD_VAR 0 1
36699: ST_TO_ADDR
// end ;
36700: LD_VAR 0 4
36704: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36705: LD_INT 0
36707: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36708: LD_ADDR_VAR 0 5
36712: PUSH
36713: LD_VAR 0 1
36717: PPUSH
36718: CALL_OW 250
36722: PPUSH
36723: LD_VAR 0 1
36727: PPUSH
36728: CALL_OW 251
36732: PPUSH
36733: LD_VAR 0 2
36737: PPUSH
36738: LD_VAR 0 3
36742: PPUSH
36743: LD_VAR 0 4
36747: PPUSH
36748: CALL 36758 0 5
36752: ST_TO_ADDR
// end ;
36753: LD_VAR 0 5
36757: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36758: LD_INT 0
36760: PPUSH
36761: PPUSH
36762: PPUSH
36763: PPUSH
// if not list then
36764: LD_VAR 0 3
36768: NOT
36769: IFFALSE 36773
// exit ;
36771: GO 37161
// result := [ ] ;
36773: LD_ADDR_VAR 0 6
36777: PUSH
36778: EMPTY
36779: ST_TO_ADDR
// for i in list do
36780: LD_ADDR_VAR 0 7
36784: PUSH
36785: LD_VAR 0 3
36789: PUSH
36790: FOR_IN
36791: IFFALSE 36993
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36793: LD_ADDR_VAR 0 9
36797: PUSH
36798: LD_VAR 0 7
36802: PPUSH
36803: LD_VAR 0 1
36807: PPUSH
36808: LD_VAR 0 2
36812: PPUSH
36813: CALL_OW 297
36817: ST_TO_ADDR
// if not result then
36818: LD_VAR 0 6
36822: NOT
36823: IFFALSE 36849
// result := [ [ i , tmp ] ] else
36825: LD_ADDR_VAR 0 6
36829: PUSH
36830: LD_VAR 0 7
36834: PUSH
36835: LD_VAR 0 9
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: EMPTY
36845: LIST
36846: ST_TO_ADDR
36847: GO 36991
// begin if result [ result ] [ 2 ] < tmp then
36849: LD_VAR 0 6
36853: PUSH
36854: LD_VAR 0 6
36858: ARRAY
36859: PUSH
36860: LD_INT 2
36862: ARRAY
36863: PUSH
36864: LD_VAR 0 9
36868: LESS
36869: IFFALSE 36911
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36871: LD_ADDR_VAR 0 6
36875: PUSH
36876: LD_VAR 0 6
36880: PPUSH
36881: LD_VAR 0 6
36885: PUSH
36886: LD_INT 1
36888: PLUS
36889: PPUSH
36890: LD_VAR 0 7
36894: PUSH
36895: LD_VAR 0 9
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PPUSH
36904: CALL_OW 2
36908: ST_TO_ADDR
36909: GO 36991
// for j = 1 to result do
36911: LD_ADDR_VAR 0 8
36915: PUSH
36916: DOUBLE
36917: LD_INT 1
36919: DEC
36920: ST_TO_ADDR
36921: LD_VAR 0 6
36925: PUSH
36926: FOR_TO
36927: IFFALSE 36989
// begin if tmp < result [ j ] [ 2 ] then
36929: LD_VAR 0 9
36933: PUSH
36934: LD_VAR 0 6
36938: PUSH
36939: LD_VAR 0 8
36943: ARRAY
36944: PUSH
36945: LD_INT 2
36947: ARRAY
36948: LESS
36949: IFFALSE 36987
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36951: LD_ADDR_VAR 0 6
36955: PUSH
36956: LD_VAR 0 6
36960: PPUSH
36961: LD_VAR 0 8
36965: PPUSH
36966: LD_VAR 0 7
36970: PUSH
36971: LD_VAR 0 9
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PPUSH
36980: CALL_OW 2
36984: ST_TO_ADDR
// break ;
36985: GO 36989
// end ; end ;
36987: GO 36926
36989: POP
36990: POP
// end ; end ;
36991: GO 36790
36993: POP
36994: POP
// if result and not asc then
36995: LD_VAR 0 6
36999: PUSH
37000: LD_VAR 0 4
37004: NOT
37005: AND
37006: IFFALSE 37081
// begin tmp := result ;
37008: LD_ADDR_VAR 0 9
37012: PUSH
37013: LD_VAR 0 6
37017: ST_TO_ADDR
// for i = tmp downto 1 do
37018: LD_ADDR_VAR 0 7
37022: PUSH
37023: DOUBLE
37024: LD_VAR 0 9
37028: INC
37029: ST_TO_ADDR
37030: LD_INT 1
37032: PUSH
37033: FOR_DOWNTO
37034: IFFALSE 37079
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37036: LD_ADDR_VAR 0 6
37040: PUSH
37041: LD_VAR 0 6
37045: PPUSH
37046: LD_VAR 0 9
37050: PUSH
37051: LD_VAR 0 7
37055: MINUS
37056: PUSH
37057: LD_INT 1
37059: PLUS
37060: PPUSH
37061: LD_VAR 0 9
37065: PUSH
37066: LD_VAR 0 7
37070: ARRAY
37071: PPUSH
37072: CALL_OW 1
37076: ST_TO_ADDR
37077: GO 37033
37079: POP
37080: POP
// end ; tmp := [ ] ;
37081: LD_ADDR_VAR 0 9
37085: PUSH
37086: EMPTY
37087: ST_TO_ADDR
// if mode then
37088: LD_VAR 0 5
37092: IFFALSE 37161
// begin for i = 1 to result do
37094: LD_ADDR_VAR 0 7
37098: PUSH
37099: DOUBLE
37100: LD_INT 1
37102: DEC
37103: ST_TO_ADDR
37104: LD_VAR 0 6
37108: PUSH
37109: FOR_TO
37110: IFFALSE 37149
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37112: LD_ADDR_VAR 0 9
37116: PUSH
37117: LD_VAR 0 9
37121: PPUSH
37122: LD_VAR 0 7
37126: PPUSH
37127: LD_VAR 0 6
37131: PUSH
37132: LD_VAR 0 7
37136: ARRAY
37137: PUSH
37138: LD_INT 1
37140: ARRAY
37141: PPUSH
37142: CALL_OW 1
37146: ST_TO_ADDR
37147: GO 37109
37149: POP
37150: POP
// result := tmp ;
37151: LD_ADDR_VAR 0 6
37155: PUSH
37156: LD_VAR 0 9
37160: ST_TO_ADDR
// end ; end ;
37161: LD_VAR 0 6
37165: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37166: LD_INT 0
37168: PPUSH
37169: PPUSH
37170: PPUSH
37171: PPUSH
37172: PPUSH
37173: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37174: LD_ADDR_VAR 0 5
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: LD_INT 0
37187: PUSH
37188: EMPTY
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: ST_TO_ADDR
// if not x or not y then
37196: LD_VAR 0 2
37200: NOT
37201: PUSH
37202: LD_VAR 0 3
37206: NOT
37207: OR
37208: IFFALSE 37212
// exit ;
37210: GO 38862
// if not range then
37212: LD_VAR 0 4
37216: NOT
37217: IFFALSE 37227
// range := 10 ;
37219: LD_ADDR_VAR 0 4
37223: PUSH
37224: LD_INT 10
37226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37227: LD_ADDR_VAR 0 8
37231: PUSH
37232: LD_INT 81
37234: PUSH
37235: LD_VAR 0 1
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 92
37246: PUSH
37247: LD_VAR 0 2
37251: PUSH
37252: LD_VAR 0 3
37256: PUSH
37257: LD_VAR 0 4
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 3
37270: PUSH
37271: LD_INT 21
37273: PUSH
37274: LD_INT 3
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: LIST
37289: PPUSH
37290: CALL_OW 69
37294: ST_TO_ADDR
// if not tmp then
37295: LD_VAR 0 8
37299: NOT
37300: IFFALSE 37304
// exit ;
37302: GO 38862
// for i in tmp do
37304: LD_ADDR_VAR 0 6
37308: PUSH
37309: LD_VAR 0 8
37313: PUSH
37314: FOR_IN
37315: IFFALSE 38837
// begin points := [ 0 , 0 , 0 ] ;
37317: LD_ADDR_VAR 0 9
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: ST_TO_ADDR
// bpoints := 1 ;
37336: LD_ADDR_VAR 0 10
37340: PUSH
37341: LD_INT 1
37343: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37344: LD_VAR 0 6
37348: PPUSH
37349: CALL_OW 247
37353: PUSH
37354: LD_INT 1
37356: DOUBLE
37357: EQUAL
37358: IFTRUE 37362
37360: GO 37940
37362: POP
// begin if GetClass ( i ) = 1 then
37363: LD_VAR 0 6
37367: PPUSH
37368: CALL_OW 257
37372: PUSH
37373: LD_INT 1
37375: EQUAL
37376: IFFALSE 37397
// points := [ 10 , 5 , 3 ] ;
37378: LD_ADDR_VAR 0 9
37382: PUSH
37383: LD_INT 10
37385: PUSH
37386: LD_INT 5
37388: PUSH
37389: LD_INT 3
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37397: LD_VAR 0 6
37401: PPUSH
37402: CALL_OW 257
37406: PUSH
37407: LD_INT 2
37409: PUSH
37410: LD_INT 3
37412: PUSH
37413: LD_INT 4
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: LIST
37420: IN
37421: IFFALSE 37442
// points := [ 3 , 2 , 1 ] ;
37423: LD_ADDR_VAR 0 9
37427: PUSH
37428: LD_INT 3
37430: PUSH
37431: LD_INT 2
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37442: LD_VAR 0 6
37446: PPUSH
37447: CALL_OW 257
37451: PUSH
37452: LD_INT 5
37454: EQUAL
37455: IFFALSE 37476
// points := [ 130 , 5 , 2 ] ;
37457: LD_ADDR_VAR 0 9
37461: PUSH
37462: LD_INT 130
37464: PUSH
37465: LD_INT 5
37467: PUSH
37468: LD_INT 2
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: LIST
37475: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37476: LD_VAR 0 6
37480: PPUSH
37481: CALL_OW 257
37485: PUSH
37486: LD_INT 8
37488: EQUAL
37489: IFFALSE 37510
// points := [ 35 , 35 , 30 ] ;
37491: LD_ADDR_VAR 0 9
37495: PUSH
37496: LD_INT 35
37498: PUSH
37499: LD_INT 35
37501: PUSH
37502: LD_INT 30
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: LIST
37509: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37510: LD_VAR 0 6
37514: PPUSH
37515: CALL_OW 257
37519: PUSH
37520: LD_INT 9
37522: EQUAL
37523: IFFALSE 37544
// points := [ 20 , 55 , 40 ] ;
37525: LD_ADDR_VAR 0 9
37529: PUSH
37530: LD_INT 20
37532: PUSH
37533: LD_INT 55
37535: PUSH
37536: LD_INT 40
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37544: LD_VAR 0 6
37548: PPUSH
37549: CALL_OW 257
37553: PUSH
37554: LD_INT 12
37556: PUSH
37557: LD_INT 16
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: IN
37564: IFFALSE 37585
// points := [ 5 , 3 , 2 ] ;
37566: LD_ADDR_VAR 0 9
37570: PUSH
37571: LD_INT 5
37573: PUSH
37574: LD_INT 3
37576: PUSH
37577: LD_INT 2
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: LIST
37584: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37585: LD_VAR 0 6
37589: PPUSH
37590: CALL_OW 257
37594: PUSH
37595: LD_INT 17
37597: EQUAL
37598: IFFALSE 37619
// points := [ 100 , 50 , 75 ] ;
37600: LD_ADDR_VAR 0 9
37604: PUSH
37605: LD_INT 100
37607: PUSH
37608: LD_INT 50
37610: PUSH
37611: LD_INT 75
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: LIST
37618: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37619: LD_VAR 0 6
37623: PPUSH
37624: CALL_OW 257
37628: PUSH
37629: LD_INT 15
37631: EQUAL
37632: IFFALSE 37653
// points := [ 10 , 5 , 3 ] ;
37634: LD_ADDR_VAR 0 9
37638: PUSH
37639: LD_INT 10
37641: PUSH
37642: LD_INT 5
37644: PUSH
37645: LD_INT 3
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: LIST
37652: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37653: LD_VAR 0 6
37657: PPUSH
37658: CALL_OW 257
37662: PUSH
37663: LD_INT 14
37665: EQUAL
37666: IFFALSE 37687
// points := [ 10 , 0 , 0 ] ;
37668: LD_ADDR_VAR 0 9
37672: PUSH
37673: LD_INT 10
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37687: LD_VAR 0 6
37691: PPUSH
37692: CALL_OW 257
37696: PUSH
37697: LD_INT 11
37699: EQUAL
37700: IFFALSE 37721
// points := [ 30 , 10 , 5 ] ;
37702: LD_ADDR_VAR 0 9
37706: PUSH
37707: LD_INT 30
37709: PUSH
37710: LD_INT 10
37712: PUSH
37713: LD_INT 5
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: LIST
37720: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37721: LD_VAR 0 1
37725: PPUSH
37726: LD_INT 5
37728: PPUSH
37729: CALL_OW 321
37733: PUSH
37734: LD_INT 2
37736: EQUAL
37737: IFFALSE 37754
// bpoints := bpoints * 1.8 ;
37739: LD_ADDR_VAR 0 10
37743: PUSH
37744: LD_VAR 0 10
37748: PUSH
37749: LD_REAL  1.80000000000000E+0000
37752: MUL
37753: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37754: LD_VAR 0 6
37758: PPUSH
37759: CALL_OW 257
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: LD_INT 2
37769: PUSH
37770: LD_INT 3
37772: PUSH
37773: LD_INT 4
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: IN
37782: PUSH
37783: LD_VAR 0 1
37787: PPUSH
37788: LD_INT 51
37790: PPUSH
37791: CALL_OW 321
37795: PUSH
37796: LD_INT 2
37798: EQUAL
37799: AND
37800: IFFALSE 37817
// bpoints := bpoints * 1.2 ;
37802: LD_ADDR_VAR 0 10
37806: PUSH
37807: LD_VAR 0 10
37811: PUSH
37812: LD_REAL  1.20000000000000E+0000
37815: MUL
37816: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37817: LD_VAR 0 6
37821: PPUSH
37822: CALL_OW 257
37826: PUSH
37827: LD_INT 5
37829: PUSH
37830: LD_INT 7
37832: PUSH
37833: LD_INT 9
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: LIST
37840: IN
37841: PUSH
37842: LD_VAR 0 1
37846: PPUSH
37847: LD_INT 52
37849: PPUSH
37850: CALL_OW 321
37854: PUSH
37855: LD_INT 2
37857: EQUAL
37858: AND
37859: IFFALSE 37876
// bpoints := bpoints * 1.5 ;
37861: LD_ADDR_VAR 0 10
37865: PUSH
37866: LD_VAR 0 10
37870: PUSH
37871: LD_REAL  1.50000000000000E+0000
37874: MUL
37875: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37876: LD_VAR 0 1
37880: PPUSH
37881: LD_INT 66
37883: PPUSH
37884: CALL_OW 321
37888: PUSH
37889: LD_INT 2
37891: EQUAL
37892: IFFALSE 37909
// bpoints := bpoints * 1.1 ;
37894: LD_ADDR_VAR 0 10
37898: PUSH
37899: LD_VAR 0 10
37903: PUSH
37904: LD_REAL  1.10000000000000E+0000
37907: MUL
37908: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37909: LD_ADDR_VAR 0 10
37913: PUSH
37914: LD_VAR 0 10
37918: PUSH
37919: LD_VAR 0 6
37923: PPUSH
37924: LD_INT 1
37926: PPUSH
37927: CALL_OW 259
37931: PUSH
37932: LD_REAL  1.15000000000000E+0000
37935: MUL
37936: MUL
37937: ST_TO_ADDR
// end ; unit_vehicle :
37938: GO 38766
37940: LD_INT 2
37942: DOUBLE
37943: EQUAL
37944: IFTRUE 37948
37946: GO 38754
37948: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37949: LD_VAR 0 6
37953: PPUSH
37954: CALL_OW 264
37958: PUSH
37959: LD_INT 2
37961: PUSH
37962: LD_INT 42
37964: PUSH
37965: LD_INT 24
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: LIST
37972: IN
37973: IFFALSE 37994
// points := [ 25 , 5 , 3 ] ;
37975: LD_ADDR_VAR 0 9
37979: PUSH
37980: LD_INT 25
37982: PUSH
37983: LD_INT 5
37985: PUSH
37986: LD_INT 3
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: LIST
37993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37994: LD_VAR 0 6
37998: PPUSH
37999: CALL_OW 264
38003: PUSH
38004: LD_INT 4
38006: PUSH
38007: LD_INT 43
38009: PUSH
38010: LD_INT 25
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: LIST
38017: IN
38018: IFFALSE 38039
// points := [ 40 , 15 , 5 ] ;
38020: LD_ADDR_VAR 0 9
38024: PUSH
38025: LD_INT 40
38027: PUSH
38028: LD_INT 15
38030: PUSH
38031: LD_INT 5
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: LIST
38038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38039: LD_VAR 0 6
38043: PPUSH
38044: CALL_OW 264
38048: PUSH
38049: LD_INT 3
38051: PUSH
38052: LD_INT 23
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: IN
38059: IFFALSE 38080
// points := [ 7 , 25 , 8 ] ;
38061: LD_ADDR_VAR 0 9
38065: PUSH
38066: LD_INT 7
38068: PUSH
38069: LD_INT 25
38071: PUSH
38072: LD_INT 8
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: LIST
38079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38080: LD_VAR 0 6
38084: PPUSH
38085: CALL_OW 264
38089: PUSH
38090: LD_INT 5
38092: PUSH
38093: LD_INT 27
38095: PUSH
38096: LD_INT 44
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: LIST
38103: IN
38104: IFFALSE 38125
// points := [ 14 , 50 , 16 ] ;
38106: LD_ADDR_VAR 0 9
38110: PUSH
38111: LD_INT 14
38113: PUSH
38114: LD_INT 50
38116: PUSH
38117: LD_INT 16
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: LIST
38124: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38125: LD_VAR 0 6
38129: PPUSH
38130: CALL_OW 264
38134: PUSH
38135: LD_INT 6
38137: PUSH
38138: LD_INT 46
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: IN
38145: IFFALSE 38166
// points := [ 32 , 120 , 70 ] ;
38147: LD_ADDR_VAR 0 9
38151: PUSH
38152: LD_INT 32
38154: PUSH
38155: LD_INT 120
38157: PUSH
38158: LD_INT 70
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38166: LD_VAR 0 6
38170: PPUSH
38171: CALL_OW 264
38175: PUSH
38176: LD_INT 7
38178: PUSH
38179: LD_INT 28
38181: PUSH
38182: LD_INT 45
38184: PUSH
38185: LD_INT 92
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: IN
38194: IFFALSE 38215
// points := [ 35 , 20 , 45 ] ;
38196: LD_ADDR_VAR 0 9
38200: PUSH
38201: LD_INT 35
38203: PUSH
38204: LD_INT 20
38206: PUSH
38207: LD_INT 45
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: LIST
38214: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38215: LD_VAR 0 6
38219: PPUSH
38220: CALL_OW 264
38224: PUSH
38225: LD_INT 47
38227: PUSH
38228: EMPTY
38229: LIST
38230: IN
38231: IFFALSE 38252
// points := [ 67 , 45 , 75 ] ;
38233: LD_ADDR_VAR 0 9
38237: PUSH
38238: LD_INT 67
38240: PUSH
38241: LD_INT 45
38243: PUSH
38244: LD_INT 75
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: LIST
38251: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38252: LD_VAR 0 6
38256: PPUSH
38257: CALL_OW 264
38261: PUSH
38262: LD_INT 26
38264: PUSH
38265: EMPTY
38266: LIST
38267: IN
38268: IFFALSE 38289
// points := [ 120 , 30 , 80 ] ;
38270: LD_ADDR_VAR 0 9
38274: PUSH
38275: LD_INT 120
38277: PUSH
38278: LD_INT 30
38280: PUSH
38281: LD_INT 80
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: LIST
38288: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38289: LD_VAR 0 6
38293: PPUSH
38294: CALL_OW 264
38298: PUSH
38299: LD_INT 22
38301: PUSH
38302: EMPTY
38303: LIST
38304: IN
38305: IFFALSE 38326
// points := [ 40 , 1 , 1 ] ;
38307: LD_ADDR_VAR 0 9
38311: PUSH
38312: LD_INT 40
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38326: LD_VAR 0 6
38330: PPUSH
38331: CALL_OW 264
38335: PUSH
38336: LD_INT 29
38338: PUSH
38339: EMPTY
38340: LIST
38341: IN
38342: IFFALSE 38363
// points := [ 70 , 200 , 400 ] ;
38344: LD_ADDR_VAR 0 9
38348: PUSH
38349: LD_INT 70
38351: PUSH
38352: LD_INT 200
38354: PUSH
38355: LD_INT 400
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: LIST
38362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38363: LD_VAR 0 6
38367: PPUSH
38368: CALL_OW 264
38372: PUSH
38373: LD_INT 14
38375: PUSH
38376: LD_INT 53
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: IN
38383: IFFALSE 38404
// points := [ 40 , 10 , 20 ] ;
38385: LD_ADDR_VAR 0 9
38389: PUSH
38390: LD_INT 40
38392: PUSH
38393: LD_INT 10
38395: PUSH
38396: LD_INT 20
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: LIST
38403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38404: LD_VAR 0 6
38408: PPUSH
38409: CALL_OW 264
38413: PUSH
38414: LD_INT 9
38416: PUSH
38417: EMPTY
38418: LIST
38419: IN
38420: IFFALSE 38441
// points := [ 5 , 70 , 20 ] ;
38422: LD_ADDR_VAR 0 9
38426: PUSH
38427: LD_INT 5
38429: PUSH
38430: LD_INT 70
38432: PUSH
38433: LD_INT 20
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: LIST
38440: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38441: LD_VAR 0 6
38445: PPUSH
38446: CALL_OW 264
38450: PUSH
38451: LD_INT 10
38453: PUSH
38454: EMPTY
38455: LIST
38456: IN
38457: IFFALSE 38478
// points := [ 35 , 110 , 70 ] ;
38459: LD_ADDR_VAR 0 9
38463: PUSH
38464: LD_INT 35
38466: PUSH
38467: LD_INT 110
38469: PUSH
38470: LD_INT 70
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: LIST
38477: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38478: LD_VAR 0 6
38482: PPUSH
38483: CALL_OW 265
38487: PUSH
38488: LD_INT 25
38490: EQUAL
38491: IFFALSE 38512
// points := [ 80 , 65 , 100 ] ;
38493: LD_ADDR_VAR 0 9
38497: PUSH
38498: LD_INT 80
38500: PUSH
38501: LD_INT 65
38503: PUSH
38504: LD_INT 100
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: LIST
38511: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38512: LD_VAR 0 6
38516: PPUSH
38517: CALL_OW 263
38521: PUSH
38522: LD_INT 1
38524: EQUAL
38525: IFFALSE 38560
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38527: LD_ADDR_VAR 0 10
38531: PUSH
38532: LD_VAR 0 10
38536: PUSH
38537: LD_VAR 0 6
38541: PPUSH
38542: CALL_OW 311
38546: PPUSH
38547: LD_INT 3
38549: PPUSH
38550: CALL_OW 259
38554: PUSH
38555: LD_INT 4
38557: MUL
38558: MUL
38559: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38560: LD_VAR 0 6
38564: PPUSH
38565: CALL_OW 263
38569: PUSH
38570: LD_INT 2
38572: EQUAL
38573: IFFALSE 38624
// begin j := IsControledBy ( i ) ;
38575: LD_ADDR_VAR 0 7
38579: PUSH
38580: LD_VAR 0 6
38584: PPUSH
38585: CALL_OW 312
38589: ST_TO_ADDR
// if j then
38590: LD_VAR 0 7
38594: IFFALSE 38624
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38596: LD_ADDR_VAR 0 10
38600: PUSH
38601: LD_VAR 0 10
38605: PUSH
38606: LD_VAR 0 7
38610: PPUSH
38611: LD_INT 3
38613: PPUSH
38614: CALL_OW 259
38618: PUSH
38619: LD_INT 3
38621: MUL
38622: MUL
38623: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38624: LD_VAR 0 6
38628: PPUSH
38629: CALL_OW 264
38633: PUSH
38634: LD_INT 5
38636: PUSH
38637: LD_INT 6
38639: PUSH
38640: LD_INT 46
38642: PUSH
38643: LD_INT 44
38645: PUSH
38646: LD_INT 47
38648: PUSH
38649: LD_INT 45
38651: PUSH
38652: LD_INT 28
38654: PUSH
38655: LD_INT 7
38657: PUSH
38658: LD_INT 27
38660: PUSH
38661: LD_INT 29
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: IN
38676: PUSH
38677: LD_VAR 0 1
38681: PPUSH
38682: LD_INT 52
38684: PPUSH
38685: CALL_OW 321
38689: PUSH
38690: LD_INT 2
38692: EQUAL
38693: AND
38694: IFFALSE 38711
// bpoints := bpoints * 1.2 ;
38696: LD_ADDR_VAR 0 10
38700: PUSH
38701: LD_VAR 0 10
38705: PUSH
38706: LD_REAL  1.20000000000000E+0000
38709: MUL
38710: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38711: LD_VAR 0 6
38715: PPUSH
38716: CALL_OW 264
38720: PUSH
38721: LD_INT 6
38723: PUSH
38724: LD_INT 46
38726: PUSH
38727: LD_INT 47
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: LIST
38734: IN
38735: IFFALSE 38752
// bpoints := bpoints * 1.2 ;
38737: LD_ADDR_VAR 0 10
38741: PUSH
38742: LD_VAR 0 10
38746: PUSH
38747: LD_REAL  1.20000000000000E+0000
38750: MUL
38751: ST_TO_ADDR
// end ; unit_building :
38752: GO 38766
38754: LD_INT 3
38756: DOUBLE
38757: EQUAL
38758: IFTRUE 38762
38760: GO 38765
38762: POP
// ; end ;
38763: GO 38766
38765: POP
// for j = 1 to 3 do
38766: LD_ADDR_VAR 0 7
38770: PUSH
38771: DOUBLE
38772: LD_INT 1
38774: DEC
38775: ST_TO_ADDR
38776: LD_INT 3
38778: PUSH
38779: FOR_TO
38780: IFFALSE 38833
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38782: LD_ADDR_VAR 0 5
38786: PUSH
38787: LD_VAR 0 5
38791: PPUSH
38792: LD_VAR 0 7
38796: PPUSH
38797: LD_VAR 0 5
38801: PUSH
38802: LD_VAR 0 7
38806: ARRAY
38807: PUSH
38808: LD_VAR 0 9
38812: PUSH
38813: LD_VAR 0 7
38817: ARRAY
38818: PUSH
38819: LD_VAR 0 10
38823: MUL
38824: PLUS
38825: PPUSH
38826: CALL_OW 1
38830: ST_TO_ADDR
38831: GO 38779
38833: POP
38834: POP
// end ;
38835: GO 37314
38837: POP
38838: POP
// result := Replace ( result , 4 , tmp ) ;
38839: LD_ADDR_VAR 0 5
38843: PUSH
38844: LD_VAR 0 5
38848: PPUSH
38849: LD_INT 4
38851: PPUSH
38852: LD_VAR 0 8
38856: PPUSH
38857: CALL_OW 1
38861: ST_TO_ADDR
// end ;
38862: LD_VAR 0 5
38866: RET
// export function DangerAtRange ( unit , range ) ; begin
38867: LD_INT 0
38869: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38870: LD_ADDR_VAR 0 3
38874: PUSH
38875: LD_VAR 0 1
38879: PPUSH
38880: CALL_OW 255
38884: PPUSH
38885: LD_VAR 0 1
38889: PPUSH
38890: CALL_OW 250
38894: PPUSH
38895: LD_VAR 0 1
38899: PPUSH
38900: CALL_OW 251
38904: PPUSH
38905: LD_VAR 0 2
38909: PPUSH
38910: CALL 37166 0 4
38914: ST_TO_ADDR
// end ;
38915: LD_VAR 0 3
38919: RET
// export function DangerInArea ( side , area ) ; begin
38920: LD_INT 0
38922: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38923: LD_ADDR_VAR 0 3
38927: PUSH
38928: LD_VAR 0 2
38932: PPUSH
38933: LD_INT 81
38935: PUSH
38936: LD_VAR 0 1
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PPUSH
38945: CALL_OW 70
38949: ST_TO_ADDR
// end ;
38950: LD_VAR 0 3
38954: RET
// export function IsExtension ( b ) ; begin
38955: LD_INT 0
38957: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38958: LD_ADDR_VAR 0 2
38962: PUSH
38963: LD_VAR 0 1
38967: PUSH
38968: LD_INT 23
38970: PUSH
38971: LD_INT 20
38973: PUSH
38974: LD_INT 22
38976: PUSH
38977: LD_INT 17
38979: PUSH
38980: LD_INT 24
38982: PUSH
38983: LD_INT 21
38985: PUSH
38986: LD_INT 19
38988: PUSH
38989: LD_INT 16
38991: PUSH
38992: LD_INT 25
38994: PUSH
38995: LD_INT 18
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: IN
39010: ST_TO_ADDR
// end ;
39011: LD_VAR 0 2
39015: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39016: LD_INT 0
39018: PPUSH
39019: PPUSH
39020: PPUSH
// result := [ ] ;
39021: LD_ADDR_VAR 0 4
39025: PUSH
39026: EMPTY
39027: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39028: LD_ADDR_VAR 0 5
39032: PUSH
39033: LD_VAR 0 2
39037: PPUSH
39038: LD_INT 21
39040: PUSH
39041: LD_INT 3
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PPUSH
39048: CALL_OW 70
39052: ST_TO_ADDR
// if not tmp then
39053: LD_VAR 0 5
39057: NOT
39058: IFFALSE 39062
// exit ;
39060: GO 39126
// if checkLink then
39062: LD_VAR 0 3
39066: IFFALSE 39116
// begin for i in tmp do
39068: LD_ADDR_VAR 0 6
39072: PUSH
39073: LD_VAR 0 5
39077: PUSH
39078: FOR_IN
39079: IFFALSE 39114
// if GetBase ( i ) <> base then
39081: LD_VAR 0 6
39085: PPUSH
39086: CALL_OW 274
39090: PUSH
39091: LD_VAR 0 1
39095: NONEQUAL
39096: IFFALSE 39112
// ComLinkToBase ( base , i ) ;
39098: LD_VAR 0 1
39102: PPUSH
39103: LD_VAR 0 6
39107: PPUSH
39108: CALL_OW 169
39112: GO 39078
39114: POP
39115: POP
// end ; result := tmp ;
39116: LD_ADDR_VAR 0 4
39120: PUSH
39121: LD_VAR 0 5
39125: ST_TO_ADDR
// end ;
39126: LD_VAR 0 4
39130: RET
// export function ComComplete ( units , b ) ; var i ; begin
39131: LD_INT 0
39133: PPUSH
39134: PPUSH
// if not units then
39135: LD_VAR 0 1
39139: NOT
39140: IFFALSE 39144
// exit ;
39142: GO 39234
// for i in units do
39144: LD_ADDR_VAR 0 4
39148: PUSH
39149: LD_VAR 0 1
39153: PUSH
39154: FOR_IN
39155: IFFALSE 39232
// if BuildingStatus ( b ) = bs_build then
39157: LD_VAR 0 2
39161: PPUSH
39162: CALL_OW 461
39166: PUSH
39167: LD_INT 1
39169: EQUAL
39170: IFFALSE 39230
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39172: LD_VAR 0 4
39176: PPUSH
39177: LD_STRING h
39179: PUSH
39180: LD_VAR 0 2
39184: PPUSH
39185: CALL_OW 250
39189: PUSH
39190: LD_VAR 0 2
39194: PPUSH
39195: CALL_OW 251
39199: PUSH
39200: LD_VAR 0 2
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: PUSH
39223: EMPTY
39224: LIST
39225: PPUSH
39226: CALL_OW 446
39230: GO 39154
39232: POP
39233: POP
// end ;
39234: LD_VAR 0 3
39238: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39239: LD_INT 0
39241: PPUSH
39242: PPUSH
39243: PPUSH
39244: PPUSH
39245: PPUSH
39246: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39247: LD_VAR 0 1
39251: NOT
39252: PUSH
39253: LD_VAR 0 1
39257: PPUSH
39258: CALL_OW 263
39262: PUSH
39263: LD_INT 2
39265: NONEQUAL
39266: OR
39267: IFFALSE 39271
// exit ;
39269: GO 39587
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39271: LD_ADDR_VAR 0 6
39275: PUSH
39276: LD_INT 22
39278: PUSH
39279: LD_VAR 0 1
39283: PPUSH
39284: CALL_OW 255
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 2
39295: PUSH
39296: LD_INT 30
39298: PUSH
39299: LD_INT 36
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 34
39308: PUSH
39309: LD_INT 31
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: LIST
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PPUSH
39325: CALL_OW 69
39329: ST_TO_ADDR
// if not tmp then
39330: LD_VAR 0 6
39334: NOT
39335: IFFALSE 39339
// exit ;
39337: GO 39587
// result := [ ] ;
39339: LD_ADDR_VAR 0 2
39343: PUSH
39344: EMPTY
39345: ST_TO_ADDR
// for i in tmp do
39346: LD_ADDR_VAR 0 3
39350: PUSH
39351: LD_VAR 0 6
39355: PUSH
39356: FOR_IN
39357: IFFALSE 39428
// begin t := UnitsInside ( i ) ;
39359: LD_ADDR_VAR 0 4
39363: PUSH
39364: LD_VAR 0 3
39368: PPUSH
39369: CALL_OW 313
39373: ST_TO_ADDR
// if t then
39374: LD_VAR 0 4
39378: IFFALSE 39426
// for j in t do
39380: LD_ADDR_VAR 0 7
39384: PUSH
39385: LD_VAR 0 4
39389: PUSH
39390: FOR_IN
39391: IFFALSE 39424
// result := Replace ( result , result + 1 , j ) ;
39393: LD_ADDR_VAR 0 2
39397: PUSH
39398: LD_VAR 0 2
39402: PPUSH
39403: LD_VAR 0 2
39407: PUSH
39408: LD_INT 1
39410: PLUS
39411: PPUSH
39412: LD_VAR 0 7
39416: PPUSH
39417: CALL_OW 1
39421: ST_TO_ADDR
39422: GO 39390
39424: POP
39425: POP
// end ;
39426: GO 39356
39428: POP
39429: POP
// if not result then
39430: LD_VAR 0 2
39434: NOT
39435: IFFALSE 39439
// exit ;
39437: GO 39587
// mech := result [ 1 ] ;
39439: LD_ADDR_VAR 0 5
39443: PUSH
39444: LD_VAR 0 2
39448: PUSH
39449: LD_INT 1
39451: ARRAY
39452: ST_TO_ADDR
// if result > 1 then
39453: LD_VAR 0 2
39457: PUSH
39458: LD_INT 1
39460: GREATER
39461: IFFALSE 39573
// begin for i = 2 to result do
39463: LD_ADDR_VAR 0 3
39467: PUSH
39468: DOUBLE
39469: LD_INT 2
39471: DEC
39472: ST_TO_ADDR
39473: LD_VAR 0 2
39477: PUSH
39478: FOR_TO
39479: IFFALSE 39571
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39481: LD_ADDR_VAR 0 4
39485: PUSH
39486: LD_VAR 0 2
39490: PUSH
39491: LD_VAR 0 3
39495: ARRAY
39496: PPUSH
39497: LD_INT 3
39499: PPUSH
39500: CALL_OW 259
39504: PUSH
39505: LD_VAR 0 2
39509: PUSH
39510: LD_VAR 0 3
39514: ARRAY
39515: PPUSH
39516: CALL_OW 432
39520: MINUS
39521: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39522: LD_VAR 0 4
39526: PUSH
39527: LD_VAR 0 5
39531: PPUSH
39532: LD_INT 3
39534: PPUSH
39535: CALL_OW 259
39539: PUSH
39540: LD_VAR 0 5
39544: PPUSH
39545: CALL_OW 432
39549: MINUS
39550: GREATEREQUAL
39551: IFFALSE 39569
// mech := result [ i ] ;
39553: LD_ADDR_VAR 0 5
39557: PUSH
39558: LD_VAR 0 2
39562: PUSH
39563: LD_VAR 0 3
39567: ARRAY
39568: ST_TO_ADDR
// end ;
39569: GO 39478
39571: POP
39572: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39573: LD_VAR 0 1
39577: PPUSH
39578: LD_VAR 0 5
39582: PPUSH
39583: CALL_OW 135
// end ;
39587: LD_VAR 0 2
39591: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39592: LD_INT 0
39594: PPUSH
39595: PPUSH
39596: PPUSH
39597: PPUSH
39598: PPUSH
39599: PPUSH
39600: PPUSH
39601: PPUSH
39602: PPUSH
39603: PPUSH
39604: PPUSH
39605: PPUSH
39606: PPUSH
// result := [ ] ;
39607: LD_ADDR_VAR 0 7
39611: PUSH
39612: EMPTY
39613: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39614: LD_VAR 0 1
39618: PPUSH
39619: CALL_OW 266
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: LD_INT 1
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: IN
39634: NOT
39635: IFFALSE 39639
// exit ;
39637: GO 41273
// if name then
39639: LD_VAR 0 3
39643: IFFALSE 39659
// SetBName ( base_dep , name ) ;
39645: LD_VAR 0 1
39649: PPUSH
39650: LD_VAR 0 3
39654: PPUSH
39655: CALL_OW 500
// base := GetBase ( base_dep ) ;
39659: LD_ADDR_VAR 0 15
39663: PUSH
39664: LD_VAR 0 1
39668: PPUSH
39669: CALL_OW 274
39673: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39674: LD_ADDR_VAR 0 16
39678: PUSH
39679: LD_VAR 0 1
39683: PPUSH
39684: CALL_OW 255
39688: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39689: LD_ADDR_VAR 0 17
39693: PUSH
39694: LD_VAR 0 1
39698: PPUSH
39699: CALL_OW 248
39703: ST_TO_ADDR
// if sources then
39704: LD_VAR 0 5
39708: IFFALSE 39755
// for i = 1 to 3 do
39710: LD_ADDR_VAR 0 8
39714: PUSH
39715: DOUBLE
39716: LD_INT 1
39718: DEC
39719: ST_TO_ADDR
39720: LD_INT 3
39722: PUSH
39723: FOR_TO
39724: IFFALSE 39753
// AddResourceType ( base , i , sources [ i ] ) ;
39726: LD_VAR 0 15
39730: PPUSH
39731: LD_VAR 0 8
39735: PPUSH
39736: LD_VAR 0 5
39740: PUSH
39741: LD_VAR 0 8
39745: ARRAY
39746: PPUSH
39747: CALL_OW 276
39751: GO 39723
39753: POP
39754: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39755: LD_ADDR_VAR 0 18
39759: PUSH
39760: LD_VAR 0 15
39764: PPUSH
39765: LD_VAR 0 2
39769: PPUSH
39770: LD_INT 1
39772: PPUSH
39773: CALL 39016 0 3
39777: ST_TO_ADDR
// InitHc ;
39778: CALL_OW 19
// InitUc ;
39782: CALL_OW 18
// uc_side := side ;
39786: LD_ADDR_OWVAR 20
39790: PUSH
39791: LD_VAR 0 16
39795: ST_TO_ADDR
// uc_nation := nation ;
39796: LD_ADDR_OWVAR 21
39800: PUSH
39801: LD_VAR 0 17
39805: ST_TO_ADDR
// if buildings then
39806: LD_VAR 0 18
39810: IFFALSE 41132
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39812: LD_ADDR_VAR 0 19
39816: PUSH
39817: LD_VAR 0 18
39821: PPUSH
39822: LD_INT 2
39824: PUSH
39825: LD_INT 30
39827: PUSH
39828: LD_INT 29
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 30
39837: PUSH
39838: LD_INT 30
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: LIST
39849: PPUSH
39850: CALL_OW 72
39854: ST_TO_ADDR
// if tmp then
39855: LD_VAR 0 19
39859: IFFALSE 39907
// for i in tmp do
39861: LD_ADDR_VAR 0 8
39865: PUSH
39866: LD_VAR 0 19
39870: PUSH
39871: FOR_IN
39872: IFFALSE 39905
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39874: LD_VAR 0 8
39878: PPUSH
39879: CALL_OW 250
39883: PPUSH
39884: LD_VAR 0 8
39888: PPUSH
39889: CALL_OW 251
39893: PPUSH
39894: LD_VAR 0 16
39898: PPUSH
39899: CALL_OW 441
39903: GO 39871
39905: POP
39906: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39907: LD_VAR 0 18
39911: PPUSH
39912: LD_INT 2
39914: PUSH
39915: LD_INT 30
39917: PUSH
39918: LD_INT 32
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 30
39927: PUSH
39928: LD_INT 33
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: LIST
39939: PPUSH
39940: CALL_OW 72
39944: IFFALSE 40032
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39946: LD_ADDR_VAR 0 8
39950: PUSH
39951: LD_VAR 0 18
39955: PPUSH
39956: LD_INT 2
39958: PUSH
39959: LD_INT 30
39961: PUSH
39962: LD_INT 32
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 30
39971: PUSH
39972: LD_INT 33
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: LIST
39983: PPUSH
39984: CALL_OW 72
39988: PUSH
39989: FOR_IN
39990: IFFALSE 40030
// begin if not GetBWeapon ( i ) then
39992: LD_VAR 0 8
39996: PPUSH
39997: CALL_OW 269
40001: NOT
40002: IFFALSE 40028
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40004: LD_VAR 0 8
40008: PPUSH
40009: LD_VAR 0 8
40013: PPUSH
40014: LD_VAR 0 2
40018: PPUSH
40019: CALL 41278 0 2
40023: PPUSH
40024: CALL_OW 431
// end ;
40028: GO 39989
40030: POP
40031: POP
// end ; for i = 1 to personel do
40032: LD_ADDR_VAR 0 8
40036: PUSH
40037: DOUBLE
40038: LD_INT 1
40040: DEC
40041: ST_TO_ADDR
40042: LD_VAR 0 6
40046: PUSH
40047: FOR_TO
40048: IFFALSE 41112
// begin if i > 4 then
40050: LD_VAR 0 8
40054: PUSH
40055: LD_INT 4
40057: GREATER
40058: IFFALSE 40062
// break ;
40060: GO 41112
// case i of 1 :
40062: LD_VAR 0 8
40066: PUSH
40067: LD_INT 1
40069: DOUBLE
40070: EQUAL
40071: IFTRUE 40075
40073: GO 40155
40075: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40076: LD_ADDR_VAR 0 12
40080: PUSH
40081: LD_VAR 0 18
40085: PPUSH
40086: LD_INT 22
40088: PUSH
40089: LD_VAR 0 16
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 58
40100: PUSH
40101: EMPTY
40102: LIST
40103: PUSH
40104: LD_INT 2
40106: PUSH
40107: LD_INT 30
40109: PUSH
40110: LD_INT 32
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 30
40119: PUSH
40120: LD_INT 4
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 30
40129: PUSH
40130: LD_INT 5
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: LIST
40147: PPUSH
40148: CALL_OW 72
40152: ST_TO_ADDR
40153: GO 40377
40155: LD_INT 2
40157: DOUBLE
40158: EQUAL
40159: IFTRUE 40163
40161: GO 40225
40163: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40164: LD_ADDR_VAR 0 12
40168: PUSH
40169: LD_VAR 0 18
40173: PPUSH
40174: LD_INT 22
40176: PUSH
40177: LD_VAR 0 16
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 2
40188: PUSH
40189: LD_INT 30
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 30
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: LIST
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PPUSH
40218: CALL_OW 72
40222: ST_TO_ADDR
40223: GO 40377
40225: LD_INT 3
40227: DOUBLE
40228: EQUAL
40229: IFTRUE 40233
40231: GO 40295
40233: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40234: LD_ADDR_VAR 0 12
40238: PUSH
40239: LD_VAR 0 18
40243: PPUSH
40244: LD_INT 22
40246: PUSH
40247: LD_VAR 0 16
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: LD_INT 30
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 30
40271: PUSH
40272: LD_INT 3
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: LIST
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PPUSH
40288: CALL_OW 72
40292: ST_TO_ADDR
40293: GO 40377
40295: LD_INT 4
40297: DOUBLE
40298: EQUAL
40299: IFTRUE 40303
40301: GO 40376
40303: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40304: LD_ADDR_VAR 0 12
40308: PUSH
40309: LD_VAR 0 18
40313: PPUSH
40314: LD_INT 22
40316: PUSH
40317: LD_VAR 0 16
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: LD_INT 30
40331: PUSH
40332: LD_INT 6
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 30
40341: PUSH
40342: LD_INT 7
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 30
40351: PUSH
40352: LD_INT 8
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PPUSH
40369: CALL_OW 72
40373: ST_TO_ADDR
40374: GO 40377
40376: POP
// if i = 1 then
40377: LD_VAR 0 8
40381: PUSH
40382: LD_INT 1
40384: EQUAL
40385: IFFALSE 40496
// begin tmp := [ ] ;
40387: LD_ADDR_VAR 0 19
40391: PUSH
40392: EMPTY
40393: ST_TO_ADDR
// for j in f do
40394: LD_ADDR_VAR 0 9
40398: PUSH
40399: LD_VAR 0 12
40403: PUSH
40404: FOR_IN
40405: IFFALSE 40478
// if GetBType ( j ) = b_bunker then
40407: LD_VAR 0 9
40411: PPUSH
40412: CALL_OW 266
40416: PUSH
40417: LD_INT 32
40419: EQUAL
40420: IFFALSE 40447
// tmp := Insert ( tmp , 1 , j ) else
40422: LD_ADDR_VAR 0 19
40426: PUSH
40427: LD_VAR 0 19
40431: PPUSH
40432: LD_INT 1
40434: PPUSH
40435: LD_VAR 0 9
40439: PPUSH
40440: CALL_OW 2
40444: ST_TO_ADDR
40445: GO 40476
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40447: LD_ADDR_VAR 0 19
40451: PUSH
40452: LD_VAR 0 19
40456: PPUSH
40457: LD_VAR 0 19
40461: PUSH
40462: LD_INT 1
40464: PLUS
40465: PPUSH
40466: LD_VAR 0 9
40470: PPUSH
40471: CALL_OW 2
40475: ST_TO_ADDR
40476: GO 40404
40478: POP
40479: POP
// if tmp then
40480: LD_VAR 0 19
40484: IFFALSE 40496
// f := tmp ;
40486: LD_ADDR_VAR 0 12
40490: PUSH
40491: LD_VAR 0 19
40495: ST_TO_ADDR
// end ; x := personel [ i ] ;
40496: LD_ADDR_VAR 0 13
40500: PUSH
40501: LD_VAR 0 6
40505: PUSH
40506: LD_VAR 0 8
40510: ARRAY
40511: ST_TO_ADDR
// if x = - 1 then
40512: LD_VAR 0 13
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: EQUAL
40521: IFFALSE 40730
// begin for j in f do
40523: LD_ADDR_VAR 0 9
40527: PUSH
40528: LD_VAR 0 12
40532: PUSH
40533: FOR_IN
40534: IFFALSE 40726
// repeat InitHc ;
40536: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40540: LD_VAR 0 9
40544: PPUSH
40545: CALL_OW 266
40549: PUSH
40550: LD_INT 5
40552: EQUAL
40553: IFFALSE 40623
// begin if UnitsInside ( j ) < 3 then
40555: LD_VAR 0 9
40559: PPUSH
40560: CALL_OW 313
40564: PUSH
40565: LD_INT 3
40567: LESS
40568: IFFALSE 40604
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40570: LD_INT 0
40572: PPUSH
40573: LD_INT 5
40575: PUSH
40576: LD_INT 8
40578: PUSH
40579: LD_INT 9
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: LIST
40586: PUSH
40587: LD_VAR 0 17
40591: ARRAY
40592: PPUSH
40593: LD_VAR 0 4
40597: PPUSH
40598: CALL_OW 380
40602: GO 40621
// PrepareHuman ( false , i , skill ) ;
40604: LD_INT 0
40606: PPUSH
40607: LD_VAR 0 8
40611: PPUSH
40612: LD_VAR 0 4
40616: PPUSH
40617: CALL_OW 380
// end else
40621: GO 40640
// PrepareHuman ( false , i , skill ) ;
40623: LD_INT 0
40625: PPUSH
40626: LD_VAR 0 8
40630: PPUSH
40631: LD_VAR 0 4
40635: PPUSH
40636: CALL_OW 380
// un := CreateHuman ;
40640: LD_ADDR_VAR 0 14
40644: PUSH
40645: CALL_OW 44
40649: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40650: LD_ADDR_VAR 0 7
40654: PUSH
40655: LD_VAR 0 7
40659: PPUSH
40660: LD_INT 1
40662: PPUSH
40663: LD_VAR 0 14
40667: PPUSH
40668: CALL_OW 2
40672: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40673: LD_VAR 0 14
40677: PPUSH
40678: LD_VAR 0 9
40682: PPUSH
40683: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40687: LD_VAR 0 9
40691: PPUSH
40692: CALL_OW 313
40696: PUSH
40697: LD_INT 6
40699: EQUAL
40700: PUSH
40701: LD_VAR 0 9
40705: PPUSH
40706: CALL_OW 266
40710: PUSH
40711: LD_INT 32
40713: PUSH
40714: LD_INT 31
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: IN
40721: OR
40722: IFFALSE 40536
40724: GO 40533
40726: POP
40727: POP
// end else
40728: GO 41110
// for j = 1 to x do
40730: LD_ADDR_VAR 0 9
40734: PUSH
40735: DOUBLE
40736: LD_INT 1
40738: DEC
40739: ST_TO_ADDR
40740: LD_VAR 0 13
40744: PUSH
40745: FOR_TO
40746: IFFALSE 41108
// begin InitHc ;
40748: CALL_OW 19
// if not f then
40752: LD_VAR 0 12
40756: NOT
40757: IFFALSE 40846
// begin PrepareHuman ( false , i , skill ) ;
40759: LD_INT 0
40761: PPUSH
40762: LD_VAR 0 8
40766: PPUSH
40767: LD_VAR 0 4
40771: PPUSH
40772: CALL_OW 380
// un := CreateHuman ;
40776: LD_ADDR_VAR 0 14
40780: PUSH
40781: CALL_OW 44
40785: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40786: LD_ADDR_VAR 0 7
40790: PUSH
40791: LD_VAR 0 7
40795: PPUSH
40796: LD_INT 1
40798: PPUSH
40799: LD_VAR 0 14
40803: PPUSH
40804: CALL_OW 2
40808: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40809: LD_VAR 0 14
40813: PPUSH
40814: LD_VAR 0 1
40818: PPUSH
40819: CALL_OW 250
40823: PPUSH
40824: LD_VAR 0 1
40828: PPUSH
40829: CALL_OW 251
40833: PPUSH
40834: LD_INT 10
40836: PPUSH
40837: LD_INT 0
40839: PPUSH
40840: CALL_OW 50
// continue ;
40844: GO 40745
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40846: LD_VAR 0 12
40850: PUSH
40851: LD_INT 1
40853: ARRAY
40854: PPUSH
40855: CALL_OW 313
40859: PUSH
40860: LD_VAR 0 12
40864: PUSH
40865: LD_INT 1
40867: ARRAY
40868: PPUSH
40869: CALL_OW 266
40873: PUSH
40874: LD_INT 32
40876: PUSH
40877: LD_INT 31
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: IN
40884: AND
40885: PUSH
40886: LD_VAR 0 12
40890: PUSH
40891: LD_INT 1
40893: ARRAY
40894: PPUSH
40895: CALL_OW 313
40899: PUSH
40900: LD_INT 6
40902: EQUAL
40903: OR
40904: IFFALSE 40924
// f := Delete ( f , 1 ) ;
40906: LD_ADDR_VAR 0 12
40910: PUSH
40911: LD_VAR 0 12
40915: PPUSH
40916: LD_INT 1
40918: PPUSH
40919: CALL_OW 3
40923: ST_TO_ADDR
// if not f then
40924: LD_VAR 0 12
40928: NOT
40929: IFFALSE 40947
// begin x := x + 2 ;
40931: LD_ADDR_VAR 0 13
40935: PUSH
40936: LD_VAR 0 13
40940: PUSH
40941: LD_INT 2
40943: PLUS
40944: ST_TO_ADDR
// continue ;
40945: GO 40745
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40947: LD_VAR 0 12
40951: PUSH
40952: LD_INT 1
40954: ARRAY
40955: PPUSH
40956: CALL_OW 266
40960: PUSH
40961: LD_INT 5
40963: EQUAL
40964: IFFALSE 41038
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40966: LD_VAR 0 12
40970: PUSH
40971: LD_INT 1
40973: ARRAY
40974: PPUSH
40975: CALL_OW 313
40979: PUSH
40980: LD_INT 3
40982: LESS
40983: IFFALSE 41019
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40985: LD_INT 0
40987: PPUSH
40988: LD_INT 5
40990: PUSH
40991: LD_INT 8
40993: PUSH
40994: LD_INT 9
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: LIST
41001: PUSH
41002: LD_VAR 0 17
41006: ARRAY
41007: PPUSH
41008: LD_VAR 0 4
41012: PPUSH
41013: CALL_OW 380
41017: GO 41036
// PrepareHuman ( false , i , skill ) ;
41019: LD_INT 0
41021: PPUSH
41022: LD_VAR 0 8
41026: PPUSH
41027: LD_VAR 0 4
41031: PPUSH
41032: CALL_OW 380
// end else
41036: GO 41055
// PrepareHuman ( false , i , skill ) ;
41038: LD_INT 0
41040: PPUSH
41041: LD_VAR 0 8
41045: PPUSH
41046: LD_VAR 0 4
41050: PPUSH
41051: CALL_OW 380
// un := CreateHuman ;
41055: LD_ADDR_VAR 0 14
41059: PUSH
41060: CALL_OW 44
41064: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41065: LD_ADDR_VAR 0 7
41069: PUSH
41070: LD_VAR 0 7
41074: PPUSH
41075: LD_INT 1
41077: PPUSH
41078: LD_VAR 0 14
41082: PPUSH
41083: CALL_OW 2
41087: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41088: LD_VAR 0 14
41092: PPUSH
41093: LD_VAR 0 12
41097: PUSH
41098: LD_INT 1
41100: ARRAY
41101: PPUSH
41102: CALL_OW 52
// end ;
41106: GO 40745
41108: POP
41109: POP
// end ;
41110: GO 40047
41112: POP
41113: POP
// result := result ^ buildings ;
41114: LD_ADDR_VAR 0 7
41118: PUSH
41119: LD_VAR 0 7
41123: PUSH
41124: LD_VAR 0 18
41128: ADD
41129: ST_TO_ADDR
// end else
41130: GO 41273
// begin for i = 1 to personel do
41132: LD_ADDR_VAR 0 8
41136: PUSH
41137: DOUBLE
41138: LD_INT 1
41140: DEC
41141: ST_TO_ADDR
41142: LD_VAR 0 6
41146: PUSH
41147: FOR_TO
41148: IFFALSE 41271
// begin if i > 4 then
41150: LD_VAR 0 8
41154: PUSH
41155: LD_INT 4
41157: GREATER
41158: IFFALSE 41162
// break ;
41160: GO 41271
// x := personel [ i ] ;
41162: LD_ADDR_VAR 0 13
41166: PUSH
41167: LD_VAR 0 6
41171: PUSH
41172: LD_VAR 0 8
41176: ARRAY
41177: ST_TO_ADDR
// if x = - 1 then
41178: LD_VAR 0 13
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: EQUAL
41187: IFFALSE 41191
// continue ;
41189: GO 41147
// PrepareHuman ( false , i , skill ) ;
41191: LD_INT 0
41193: PPUSH
41194: LD_VAR 0 8
41198: PPUSH
41199: LD_VAR 0 4
41203: PPUSH
41204: CALL_OW 380
// un := CreateHuman ;
41208: LD_ADDR_VAR 0 14
41212: PUSH
41213: CALL_OW 44
41217: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41218: LD_VAR 0 14
41222: PPUSH
41223: LD_VAR 0 1
41227: PPUSH
41228: CALL_OW 250
41232: PPUSH
41233: LD_VAR 0 1
41237: PPUSH
41238: CALL_OW 251
41242: PPUSH
41243: LD_INT 10
41245: PPUSH
41246: LD_INT 0
41248: PPUSH
41249: CALL_OW 50
// result := result ^ un ;
41253: LD_ADDR_VAR 0 7
41257: PUSH
41258: LD_VAR 0 7
41262: PUSH
41263: LD_VAR 0 14
41267: ADD
41268: ST_TO_ADDR
// end ;
41269: GO 41147
41271: POP
41272: POP
// end ; end ;
41273: LD_VAR 0 7
41277: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41278: LD_INT 0
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
41289: PPUSH
41290: PPUSH
41291: PPUSH
41292: PPUSH
41293: PPUSH
41294: PPUSH
41295: PPUSH
// result := false ;
41296: LD_ADDR_VAR 0 3
41300: PUSH
41301: LD_INT 0
41303: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41304: LD_VAR 0 1
41308: NOT
41309: PUSH
41310: LD_VAR 0 1
41314: PPUSH
41315: CALL_OW 266
41319: PUSH
41320: LD_INT 32
41322: PUSH
41323: LD_INT 33
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: IN
41330: NOT
41331: OR
41332: IFFALSE 41336
// exit ;
41334: GO 42445
// nat := GetNation ( tower ) ;
41336: LD_ADDR_VAR 0 12
41340: PUSH
41341: LD_VAR 0 1
41345: PPUSH
41346: CALL_OW 248
41350: ST_TO_ADDR
// side := GetSide ( tower ) ;
41351: LD_ADDR_VAR 0 16
41355: PUSH
41356: LD_VAR 0 1
41360: PPUSH
41361: CALL_OW 255
41365: ST_TO_ADDR
// x := GetX ( tower ) ;
41366: LD_ADDR_VAR 0 10
41370: PUSH
41371: LD_VAR 0 1
41375: PPUSH
41376: CALL_OW 250
41380: ST_TO_ADDR
// y := GetY ( tower ) ;
41381: LD_ADDR_VAR 0 11
41385: PUSH
41386: LD_VAR 0 1
41390: PPUSH
41391: CALL_OW 251
41395: ST_TO_ADDR
// if not x or not y then
41396: LD_VAR 0 10
41400: NOT
41401: PUSH
41402: LD_VAR 0 11
41406: NOT
41407: OR
41408: IFFALSE 41412
// exit ;
41410: GO 42445
// weapon := 0 ;
41412: LD_ADDR_VAR 0 18
41416: PUSH
41417: LD_INT 0
41419: ST_TO_ADDR
// fac_list := [ ] ;
41420: LD_ADDR_VAR 0 17
41424: PUSH
41425: EMPTY
41426: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41427: LD_ADDR_VAR 0 6
41431: PUSH
41432: LD_VAR 0 1
41436: PPUSH
41437: CALL_OW 274
41441: PPUSH
41442: LD_VAR 0 2
41446: PPUSH
41447: LD_INT 0
41449: PPUSH
41450: CALL 39016 0 3
41454: PPUSH
41455: LD_INT 30
41457: PUSH
41458: LD_INT 3
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PPUSH
41465: CALL_OW 72
41469: ST_TO_ADDR
// if not factories then
41470: LD_VAR 0 6
41474: NOT
41475: IFFALSE 41479
// exit ;
41477: GO 42445
// for i in factories do
41479: LD_ADDR_VAR 0 8
41483: PUSH
41484: LD_VAR 0 6
41488: PUSH
41489: FOR_IN
41490: IFFALSE 41515
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41492: LD_ADDR_VAR 0 17
41496: PUSH
41497: LD_VAR 0 17
41501: PUSH
41502: LD_VAR 0 8
41506: PPUSH
41507: CALL_OW 478
41511: UNION
41512: ST_TO_ADDR
41513: GO 41489
41515: POP
41516: POP
// if not fac_list then
41517: LD_VAR 0 17
41521: NOT
41522: IFFALSE 41526
// exit ;
41524: GO 42445
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41526: LD_ADDR_VAR 0 5
41530: PUSH
41531: LD_INT 4
41533: PUSH
41534: LD_INT 5
41536: PUSH
41537: LD_INT 9
41539: PUSH
41540: LD_INT 10
41542: PUSH
41543: LD_INT 6
41545: PUSH
41546: LD_INT 7
41548: PUSH
41549: LD_INT 11
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 27
41563: PUSH
41564: LD_INT 28
41566: PUSH
41567: LD_INT 26
41569: PUSH
41570: LD_INT 30
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 43
41581: PUSH
41582: LD_INT 44
41584: PUSH
41585: LD_INT 46
41587: PUSH
41588: LD_INT 45
41590: PUSH
41591: LD_INT 47
41593: PUSH
41594: LD_INT 49
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: PUSH
41610: LD_VAR 0 12
41614: ARRAY
41615: ST_TO_ADDR
// list := list isect fac_list ;
41616: LD_ADDR_VAR 0 5
41620: PUSH
41621: LD_VAR 0 5
41625: PUSH
41626: LD_VAR 0 17
41630: ISECT
41631: ST_TO_ADDR
// if not list then
41632: LD_VAR 0 5
41636: NOT
41637: IFFALSE 41641
// exit ;
41639: GO 42445
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41641: LD_VAR 0 12
41645: PUSH
41646: LD_INT 3
41648: EQUAL
41649: PUSH
41650: LD_INT 49
41652: PUSH
41653: LD_VAR 0 5
41657: IN
41658: AND
41659: PUSH
41660: LD_INT 31
41662: PPUSH
41663: LD_VAR 0 16
41667: PPUSH
41668: CALL_OW 321
41672: PUSH
41673: LD_INT 2
41675: EQUAL
41676: AND
41677: IFFALSE 41737
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41679: LD_INT 22
41681: PUSH
41682: LD_VAR 0 16
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 35
41693: PUSH
41694: LD_INT 49
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 91
41703: PUSH
41704: LD_VAR 0 1
41708: PUSH
41709: LD_INT 10
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: LIST
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: LIST
41721: PPUSH
41722: CALL_OW 69
41726: NOT
41727: IFFALSE 41737
// weapon := ru_time_lapser ;
41729: LD_ADDR_VAR 0 18
41733: PUSH
41734: LD_INT 49
41736: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41737: LD_VAR 0 12
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: IN
41752: PUSH
41753: LD_INT 11
41755: PUSH
41756: LD_VAR 0 5
41760: IN
41761: PUSH
41762: LD_INT 30
41764: PUSH
41765: LD_VAR 0 5
41769: IN
41770: OR
41771: AND
41772: PUSH
41773: LD_INT 6
41775: PPUSH
41776: LD_VAR 0 16
41780: PPUSH
41781: CALL_OW 321
41785: PUSH
41786: LD_INT 2
41788: EQUAL
41789: AND
41790: IFFALSE 41955
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41792: LD_INT 22
41794: PUSH
41795: LD_VAR 0 16
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: LD_INT 35
41809: PUSH
41810: LD_INT 11
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 35
41819: PUSH
41820: LD_INT 30
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 91
41834: PUSH
41835: LD_VAR 0 1
41839: PUSH
41840: LD_INT 18
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: LIST
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: LIST
41852: PPUSH
41853: CALL_OW 69
41857: NOT
41858: PUSH
41859: LD_INT 22
41861: PUSH
41862: LD_VAR 0 16
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: LD_INT 30
41876: PUSH
41877: LD_INT 32
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 30
41886: PUSH
41887: LD_INT 33
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 91
41901: PUSH
41902: LD_VAR 0 1
41906: PUSH
41907: LD_INT 12
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: LIST
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: LIST
41919: PUSH
41920: EMPTY
41921: LIST
41922: PPUSH
41923: CALL_OW 69
41927: PUSH
41928: LD_INT 2
41930: GREATER
41931: AND
41932: IFFALSE 41955
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41934: LD_ADDR_VAR 0 18
41938: PUSH
41939: LD_INT 11
41941: PUSH
41942: LD_INT 30
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_VAR 0 12
41953: ARRAY
41954: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41955: LD_VAR 0 18
41959: NOT
41960: PUSH
41961: LD_INT 40
41963: PPUSH
41964: LD_VAR 0 16
41968: PPUSH
41969: CALL_OW 321
41973: PUSH
41974: LD_INT 2
41976: EQUAL
41977: AND
41978: PUSH
41979: LD_INT 7
41981: PUSH
41982: LD_VAR 0 5
41986: IN
41987: PUSH
41988: LD_INT 28
41990: PUSH
41991: LD_VAR 0 5
41995: IN
41996: OR
41997: PUSH
41998: LD_INT 45
42000: PUSH
42001: LD_VAR 0 5
42005: IN
42006: OR
42007: AND
42008: IFFALSE 42262
// begin hex := GetHexInfo ( x , y ) ;
42010: LD_ADDR_VAR 0 4
42014: PUSH
42015: LD_VAR 0 10
42019: PPUSH
42020: LD_VAR 0 11
42024: PPUSH
42025: CALL_OW 546
42029: ST_TO_ADDR
// if hex [ 1 ] then
42030: LD_VAR 0 4
42034: PUSH
42035: LD_INT 1
42037: ARRAY
42038: IFFALSE 42042
// exit ;
42040: GO 42445
// height := hex [ 2 ] ;
42042: LD_ADDR_VAR 0 15
42046: PUSH
42047: LD_VAR 0 4
42051: PUSH
42052: LD_INT 2
42054: ARRAY
42055: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42056: LD_ADDR_VAR 0 14
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 2
42066: PUSH
42067: LD_INT 3
42069: PUSH
42070: LD_INT 5
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: ST_TO_ADDR
// for i in tmp do
42079: LD_ADDR_VAR 0 8
42083: PUSH
42084: LD_VAR 0 14
42088: PUSH
42089: FOR_IN
42090: IFFALSE 42260
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42092: LD_ADDR_VAR 0 9
42096: PUSH
42097: LD_VAR 0 10
42101: PPUSH
42102: LD_VAR 0 8
42106: PPUSH
42107: LD_INT 5
42109: PPUSH
42110: CALL_OW 272
42114: PUSH
42115: LD_VAR 0 11
42119: PPUSH
42120: LD_VAR 0 8
42124: PPUSH
42125: LD_INT 5
42127: PPUSH
42128: CALL_OW 273
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42137: LD_VAR 0 9
42141: PUSH
42142: LD_INT 1
42144: ARRAY
42145: PPUSH
42146: LD_VAR 0 9
42150: PUSH
42151: LD_INT 2
42153: ARRAY
42154: PPUSH
42155: CALL_OW 488
42159: IFFALSE 42258
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42161: LD_ADDR_VAR 0 4
42165: PUSH
42166: LD_VAR 0 9
42170: PUSH
42171: LD_INT 1
42173: ARRAY
42174: PPUSH
42175: LD_VAR 0 9
42179: PUSH
42180: LD_INT 2
42182: ARRAY
42183: PPUSH
42184: CALL_OW 546
42188: ST_TO_ADDR
// if hex [ 1 ] then
42189: LD_VAR 0 4
42193: PUSH
42194: LD_INT 1
42196: ARRAY
42197: IFFALSE 42201
// continue ;
42199: GO 42089
// h := hex [ 2 ] ;
42201: LD_ADDR_VAR 0 13
42205: PUSH
42206: LD_VAR 0 4
42210: PUSH
42211: LD_INT 2
42213: ARRAY
42214: ST_TO_ADDR
// if h + 7 < height then
42215: LD_VAR 0 13
42219: PUSH
42220: LD_INT 7
42222: PLUS
42223: PUSH
42224: LD_VAR 0 15
42228: LESS
42229: IFFALSE 42258
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42231: LD_ADDR_VAR 0 18
42235: PUSH
42236: LD_INT 7
42238: PUSH
42239: LD_INT 28
42241: PUSH
42242: LD_INT 45
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: LIST
42249: PUSH
42250: LD_VAR 0 12
42254: ARRAY
42255: ST_TO_ADDR
// break ;
42256: GO 42260
// end ; end ; end ;
42258: GO 42089
42260: POP
42261: POP
// end ; if not weapon then
42262: LD_VAR 0 18
42266: NOT
42267: IFFALSE 42327
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42269: LD_ADDR_VAR 0 5
42273: PUSH
42274: LD_VAR 0 5
42278: PUSH
42279: LD_INT 11
42281: PUSH
42282: LD_INT 30
42284: PUSH
42285: LD_INT 49
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: LIST
42292: DIFF
42293: ST_TO_ADDR
// if not list then
42294: LD_VAR 0 5
42298: NOT
42299: IFFALSE 42303
// exit ;
42301: GO 42445
// weapon := list [ rand ( 1 , list ) ] ;
42303: LD_ADDR_VAR 0 18
42307: PUSH
42308: LD_VAR 0 5
42312: PUSH
42313: LD_INT 1
42315: PPUSH
42316: LD_VAR 0 5
42320: PPUSH
42321: CALL_OW 12
42325: ARRAY
42326: ST_TO_ADDR
// end ; if weapon then
42327: LD_VAR 0 18
42331: IFFALSE 42445
// begin tmp := CostOfWeapon ( weapon ) ;
42333: LD_ADDR_VAR 0 14
42337: PUSH
42338: LD_VAR 0 18
42342: PPUSH
42343: CALL_OW 451
42347: ST_TO_ADDR
// j := GetBase ( tower ) ;
42348: LD_ADDR_VAR 0 9
42352: PUSH
42353: LD_VAR 0 1
42357: PPUSH
42358: CALL_OW 274
42362: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42363: LD_VAR 0 9
42367: PPUSH
42368: LD_INT 1
42370: PPUSH
42371: CALL_OW 275
42375: PUSH
42376: LD_VAR 0 14
42380: PUSH
42381: LD_INT 1
42383: ARRAY
42384: GREATEREQUAL
42385: PUSH
42386: LD_VAR 0 9
42390: PPUSH
42391: LD_INT 2
42393: PPUSH
42394: CALL_OW 275
42398: PUSH
42399: LD_VAR 0 14
42403: PUSH
42404: LD_INT 2
42406: ARRAY
42407: GREATEREQUAL
42408: AND
42409: PUSH
42410: LD_VAR 0 9
42414: PPUSH
42415: LD_INT 3
42417: PPUSH
42418: CALL_OW 275
42422: PUSH
42423: LD_VAR 0 14
42427: PUSH
42428: LD_INT 3
42430: ARRAY
42431: GREATEREQUAL
42432: AND
42433: IFFALSE 42445
// result := weapon ;
42435: LD_ADDR_VAR 0 3
42439: PUSH
42440: LD_VAR 0 18
42444: ST_TO_ADDR
// end ; end ;
42445: LD_VAR 0 3
42449: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42450: LD_INT 0
42452: PPUSH
42453: PPUSH
// result := true ;
42454: LD_ADDR_VAR 0 3
42458: PUSH
42459: LD_INT 1
42461: ST_TO_ADDR
// if array1 = array2 then
42462: LD_VAR 0 1
42466: PUSH
42467: LD_VAR 0 2
42471: EQUAL
42472: IFFALSE 42532
// begin for i = 1 to array1 do
42474: LD_ADDR_VAR 0 4
42478: PUSH
42479: DOUBLE
42480: LD_INT 1
42482: DEC
42483: ST_TO_ADDR
42484: LD_VAR 0 1
42488: PUSH
42489: FOR_TO
42490: IFFALSE 42528
// if array1 [ i ] <> array2 [ i ] then
42492: LD_VAR 0 1
42496: PUSH
42497: LD_VAR 0 4
42501: ARRAY
42502: PUSH
42503: LD_VAR 0 2
42507: PUSH
42508: LD_VAR 0 4
42512: ARRAY
42513: NONEQUAL
42514: IFFALSE 42526
// begin result := false ;
42516: LD_ADDR_VAR 0 3
42520: PUSH
42521: LD_INT 0
42523: ST_TO_ADDR
// break ;
42524: GO 42528
// end ;
42526: GO 42489
42528: POP
42529: POP
// end else
42530: GO 42540
// result := false ;
42532: LD_ADDR_VAR 0 3
42536: PUSH
42537: LD_INT 0
42539: ST_TO_ADDR
// end ;
42540: LD_VAR 0 3
42544: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42545: LD_INT 0
42547: PPUSH
42548: PPUSH
// if not array1 or not array2 then
42549: LD_VAR 0 1
42553: NOT
42554: PUSH
42555: LD_VAR 0 2
42559: NOT
42560: OR
42561: IFFALSE 42565
// exit ;
42563: GO 42629
// result := true ;
42565: LD_ADDR_VAR 0 3
42569: PUSH
42570: LD_INT 1
42572: ST_TO_ADDR
// for i = 1 to array1 do
42573: LD_ADDR_VAR 0 4
42577: PUSH
42578: DOUBLE
42579: LD_INT 1
42581: DEC
42582: ST_TO_ADDR
42583: LD_VAR 0 1
42587: PUSH
42588: FOR_TO
42589: IFFALSE 42627
// if array1 [ i ] <> array2 [ i ] then
42591: LD_VAR 0 1
42595: PUSH
42596: LD_VAR 0 4
42600: ARRAY
42601: PUSH
42602: LD_VAR 0 2
42606: PUSH
42607: LD_VAR 0 4
42611: ARRAY
42612: NONEQUAL
42613: IFFALSE 42625
// begin result := false ;
42615: LD_ADDR_VAR 0 3
42619: PUSH
42620: LD_INT 0
42622: ST_TO_ADDR
// break ;
42623: GO 42627
// end ;
42625: GO 42588
42627: POP
42628: POP
// end ;
42629: LD_VAR 0 3
42633: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42634: LD_INT 0
42636: PPUSH
42637: PPUSH
42638: PPUSH
// pom := GetBase ( fac ) ;
42639: LD_ADDR_VAR 0 5
42643: PUSH
42644: LD_VAR 0 1
42648: PPUSH
42649: CALL_OW 274
42653: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42654: LD_ADDR_VAR 0 4
42658: PUSH
42659: LD_VAR 0 2
42663: PUSH
42664: LD_INT 1
42666: ARRAY
42667: PPUSH
42668: LD_VAR 0 2
42672: PUSH
42673: LD_INT 2
42675: ARRAY
42676: PPUSH
42677: LD_VAR 0 2
42681: PUSH
42682: LD_INT 3
42684: ARRAY
42685: PPUSH
42686: LD_VAR 0 2
42690: PUSH
42691: LD_INT 4
42693: ARRAY
42694: PPUSH
42695: CALL_OW 449
42699: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42700: LD_ADDR_VAR 0 3
42704: PUSH
42705: LD_VAR 0 5
42709: PPUSH
42710: LD_INT 1
42712: PPUSH
42713: CALL_OW 275
42717: PUSH
42718: LD_VAR 0 4
42722: PUSH
42723: LD_INT 1
42725: ARRAY
42726: GREATEREQUAL
42727: PUSH
42728: LD_VAR 0 5
42732: PPUSH
42733: LD_INT 2
42735: PPUSH
42736: CALL_OW 275
42740: PUSH
42741: LD_VAR 0 4
42745: PUSH
42746: LD_INT 2
42748: ARRAY
42749: GREATEREQUAL
42750: AND
42751: PUSH
42752: LD_VAR 0 5
42756: PPUSH
42757: LD_INT 3
42759: PPUSH
42760: CALL_OW 275
42764: PUSH
42765: LD_VAR 0 4
42769: PUSH
42770: LD_INT 3
42772: ARRAY
42773: GREATEREQUAL
42774: AND
42775: ST_TO_ADDR
// end ;
42776: LD_VAR 0 3
42780: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42781: LD_INT 0
42783: PPUSH
42784: PPUSH
42785: PPUSH
42786: PPUSH
// pom := GetBase ( building ) ;
42787: LD_ADDR_VAR 0 3
42791: PUSH
42792: LD_VAR 0 1
42796: PPUSH
42797: CALL_OW 274
42801: ST_TO_ADDR
// if not pom then
42802: LD_VAR 0 3
42806: NOT
42807: IFFALSE 42811
// exit ;
42809: GO 42981
// btype := GetBType ( building ) ;
42811: LD_ADDR_VAR 0 5
42815: PUSH
42816: LD_VAR 0 1
42820: PPUSH
42821: CALL_OW 266
42825: ST_TO_ADDR
// if btype = b_armoury then
42826: LD_VAR 0 5
42830: PUSH
42831: LD_INT 4
42833: EQUAL
42834: IFFALSE 42844
// btype := b_barracks ;
42836: LD_ADDR_VAR 0 5
42840: PUSH
42841: LD_INT 5
42843: ST_TO_ADDR
// if btype = b_depot then
42844: LD_VAR 0 5
42848: PUSH
42849: LD_INT 0
42851: EQUAL
42852: IFFALSE 42862
// btype := b_warehouse ;
42854: LD_ADDR_VAR 0 5
42858: PUSH
42859: LD_INT 1
42861: ST_TO_ADDR
// if btype = b_workshop then
42862: LD_VAR 0 5
42866: PUSH
42867: LD_INT 2
42869: EQUAL
42870: IFFALSE 42880
// btype := b_factory ;
42872: LD_ADDR_VAR 0 5
42876: PUSH
42877: LD_INT 3
42879: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42880: LD_ADDR_VAR 0 4
42884: PUSH
42885: LD_VAR 0 5
42889: PPUSH
42890: LD_VAR 0 1
42894: PPUSH
42895: CALL_OW 248
42899: PPUSH
42900: CALL_OW 450
42904: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42905: LD_ADDR_VAR 0 2
42909: PUSH
42910: LD_VAR 0 3
42914: PPUSH
42915: LD_INT 1
42917: PPUSH
42918: CALL_OW 275
42922: PUSH
42923: LD_VAR 0 4
42927: PUSH
42928: LD_INT 1
42930: ARRAY
42931: GREATEREQUAL
42932: PUSH
42933: LD_VAR 0 3
42937: PPUSH
42938: LD_INT 2
42940: PPUSH
42941: CALL_OW 275
42945: PUSH
42946: LD_VAR 0 4
42950: PUSH
42951: LD_INT 2
42953: ARRAY
42954: GREATEREQUAL
42955: AND
42956: PUSH
42957: LD_VAR 0 3
42961: PPUSH
42962: LD_INT 3
42964: PPUSH
42965: CALL_OW 275
42969: PUSH
42970: LD_VAR 0 4
42974: PUSH
42975: LD_INT 3
42977: ARRAY
42978: GREATEREQUAL
42979: AND
42980: ST_TO_ADDR
// end ;
42981: LD_VAR 0 2
42985: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42986: LD_INT 0
42988: PPUSH
42989: PPUSH
42990: PPUSH
// pom := GetBase ( building ) ;
42991: LD_ADDR_VAR 0 4
42995: PUSH
42996: LD_VAR 0 1
43000: PPUSH
43001: CALL_OW 274
43005: ST_TO_ADDR
// if not pom then
43006: LD_VAR 0 4
43010: NOT
43011: IFFALSE 43015
// exit ;
43013: GO 43116
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43015: LD_ADDR_VAR 0 5
43019: PUSH
43020: LD_VAR 0 2
43024: PPUSH
43025: LD_VAR 0 1
43029: PPUSH
43030: CALL_OW 248
43034: PPUSH
43035: CALL_OW 450
43039: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43040: LD_ADDR_VAR 0 3
43044: PUSH
43045: LD_VAR 0 4
43049: PPUSH
43050: LD_INT 1
43052: PPUSH
43053: CALL_OW 275
43057: PUSH
43058: LD_VAR 0 5
43062: PUSH
43063: LD_INT 1
43065: ARRAY
43066: GREATEREQUAL
43067: PUSH
43068: LD_VAR 0 4
43072: PPUSH
43073: LD_INT 2
43075: PPUSH
43076: CALL_OW 275
43080: PUSH
43081: LD_VAR 0 5
43085: PUSH
43086: LD_INT 2
43088: ARRAY
43089: GREATEREQUAL
43090: AND
43091: PUSH
43092: LD_VAR 0 4
43096: PPUSH
43097: LD_INT 3
43099: PPUSH
43100: CALL_OW 275
43104: PUSH
43105: LD_VAR 0 5
43109: PUSH
43110: LD_INT 3
43112: ARRAY
43113: GREATEREQUAL
43114: AND
43115: ST_TO_ADDR
// end ;
43116: LD_VAR 0 3
43120: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43121: LD_INT 0
43123: PPUSH
43124: PPUSH
43125: PPUSH
43126: PPUSH
43127: PPUSH
43128: PPUSH
43129: PPUSH
43130: PPUSH
43131: PPUSH
43132: PPUSH
43133: PPUSH
// result := false ;
43134: LD_ADDR_VAR 0 8
43138: PUSH
43139: LD_INT 0
43141: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43142: LD_VAR 0 5
43146: NOT
43147: PUSH
43148: LD_VAR 0 1
43152: NOT
43153: OR
43154: PUSH
43155: LD_VAR 0 2
43159: NOT
43160: OR
43161: PUSH
43162: LD_VAR 0 3
43166: NOT
43167: OR
43168: IFFALSE 43172
// exit ;
43170: GO 43986
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43172: LD_ADDR_VAR 0 14
43176: PUSH
43177: LD_VAR 0 1
43181: PPUSH
43182: LD_VAR 0 2
43186: PPUSH
43187: LD_VAR 0 3
43191: PPUSH
43192: LD_VAR 0 4
43196: PPUSH
43197: LD_VAR 0 5
43201: PUSH
43202: LD_INT 1
43204: ARRAY
43205: PPUSH
43206: CALL_OW 248
43210: PPUSH
43211: LD_INT 0
43213: PPUSH
43214: CALL 45219 0 6
43218: ST_TO_ADDR
// if not hexes then
43219: LD_VAR 0 14
43223: NOT
43224: IFFALSE 43228
// exit ;
43226: GO 43986
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43228: LD_ADDR_VAR 0 17
43232: PUSH
43233: LD_VAR 0 5
43237: PPUSH
43238: LD_INT 22
43240: PUSH
43241: LD_VAR 0 13
43245: PPUSH
43246: CALL_OW 255
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: PUSH
43258: LD_INT 30
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 30
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: LIST
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PPUSH
43287: CALL_OW 72
43291: ST_TO_ADDR
// for i = 1 to hexes do
43292: LD_ADDR_VAR 0 9
43296: PUSH
43297: DOUBLE
43298: LD_INT 1
43300: DEC
43301: ST_TO_ADDR
43302: LD_VAR 0 14
43306: PUSH
43307: FOR_TO
43308: IFFALSE 43984
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43310: LD_ADDR_VAR 0 13
43314: PUSH
43315: LD_VAR 0 14
43319: PUSH
43320: LD_VAR 0 9
43324: ARRAY
43325: PUSH
43326: LD_INT 1
43328: ARRAY
43329: PPUSH
43330: LD_VAR 0 14
43334: PUSH
43335: LD_VAR 0 9
43339: ARRAY
43340: PUSH
43341: LD_INT 2
43343: ARRAY
43344: PPUSH
43345: CALL_OW 428
43349: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43350: LD_VAR 0 14
43354: PUSH
43355: LD_VAR 0 9
43359: ARRAY
43360: PUSH
43361: LD_INT 1
43363: ARRAY
43364: PPUSH
43365: LD_VAR 0 14
43369: PUSH
43370: LD_VAR 0 9
43374: ARRAY
43375: PUSH
43376: LD_INT 2
43378: ARRAY
43379: PPUSH
43380: CALL_OW 351
43384: PUSH
43385: LD_VAR 0 14
43389: PUSH
43390: LD_VAR 0 9
43394: ARRAY
43395: PUSH
43396: LD_INT 1
43398: ARRAY
43399: PPUSH
43400: LD_VAR 0 14
43404: PUSH
43405: LD_VAR 0 9
43409: ARRAY
43410: PUSH
43411: LD_INT 2
43413: ARRAY
43414: PPUSH
43415: CALL_OW 488
43419: NOT
43420: OR
43421: PUSH
43422: LD_VAR 0 13
43426: PPUSH
43427: CALL_OW 247
43431: PUSH
43432: LD_INT 3
43434: EQUAL
43435: OR
43436: IFFALSE 43442
// exit ;
43438: POP
43439: POP
43440: GO 43986
// if not tmp then
43442: LD_VAR 0 13
43446: NOT
43447: IFFALSE 43451
// continue ;
43449: GO 43307
// result := true ;
43451: LD_ADDR_VAR 0 8
43455: PUSH
43456: LD_INT 1
43458: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43459: LD_VAR 0 6
43463: PUSH
43464: LD_VAR 0 13
43468: PPUSH
43469: CALL_OW 247
43473: PUSH
43474: LD_INT 2
43476: EQUAL
43477: AND
43478: PUSH
43479: LD_VAR 0 13
43483: PPUSH
43484: CALL_OW 263
43488: PUSH
43489: LD_INT 1
43491: EQUAL
43492: AND
43493: IFFALSE 43657
// begin if IsDrivenBy ( tmp ) then
43495: LD_VAR 0 13
43499: PPUSH
43500: CALL_OW 311
43504: IFFALSE 43508
// continue ;
43506: GO 43307
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43508: LD_VAR 0 6
43512: PPUSH
43513: LD_INT 3
43515: PUSH
43516: LD_INT 60
43518: PUSH
43519: EMPTY
43520: LIST
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 3
43528: PUSH
43529: LD_INT 55
43531: PUSH
43532: EMPTY
43533: LIST
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PPUSH
43543: CALL_OW 72
43547: IFFALSE 43655
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43549: LD_ADDR_VAR 0 18
43553: PUSH
43554: LD_VAR 0 6
43558: PPUSH
43559: LD_INT 3
43561: PUSH
43562: LD_INT 60
43564: PUSH
43565: EMPTY
43566: LIST
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 3
43574: PUSH
43575: LD_INT 55
43577: PUSH
43578: EMPTY
43579: LIST
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PPUSH
43589: CALL_OW 72
43593: PUSH
43594: LD_INT 1
43596: ARRAY
43597: ST_TO_ADDR
// if IsInUnit ( driver ) then
43598: LD_VAR 0 18
43602: PPUSH
43603: CALL_OW 310
43607: IFFALSE 43618
// ComExit ( driver ) ;
43609: LD_VAR 0 18
43613: PPUSH
43614: CALL 68907 0 1
// AddComEnterUnit ( driver , tmp ) ;
43618: LD_VAR 0 18
43622: PPUSH
43623: LD_VAR 0 13
43627: PPUSH
43628: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43632: LD_VAR 0 18
43636: PPUSH
43637: LD_VAR 0 7
43641: PPUSH
43642: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43646: LD_VAR 0 18
43650: PPUSH
43651: CALL_OW 181
// end ; continue ;
43655: GO 43307
// end ; if not cleaners or not tmp in cleaners then
43657: LD_VAR 0 6
43661: NOT
43662: PUSH
43663: LD_VAR 0 13
43667: PUSH
43668: LD_VAR 0 6
43672: IN
43673: NOT
43674: OR
43675: IFFALSE 43982
// begin if dep then
43677: LD_VAR 0 17
43681: IFFALSE 43817
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43683: LD_ADDR_VAR 0 16
43687: PUSH
43688: LD_VAR 0 17
43692: PUSH
43693: LD_INT 1
43695: ARRAY
43696: PPUSH
43697: CALL_OW 250
43701: PPUSH
43702: LD_VAR 0 17
43706: PUSH
43707: LD_INT 1
43709: ARRAY
43710: PPUSH
43711: CALL_OW 254
43715: PPUSH
43716: LD_INT 5
43718: PPUSH
43719: CALL_OW 272
43723: PUSH
43724: LD_VAR 0 17
43728: PUSH
43729: LD_INT 1
43731: ARRAY
43732: PPUSH
43733: CALL_OW 251
43737: PPUSH
43738: LD_VAR 0 17
43742: PUSH
43743: LD_INT 1
43745: ARRAY
43746: PPUSH
43747: CALL_OW 254
43751: PPUSH
43752: LD_INT 5
43754: PPUSH
43755: CALL_OW 273
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43764: LD_VAR 0 16
43768: PUSH
43769: LD_INT 1
43771: ARRAY
43772: PPUSH
43773: LD_VAR 0 16
43777: PUSH
43778: LD_INT 2
43780: ARRAY
43781: PPUSH
43782: CALL_OW 488
43786: IFFALSE 43817
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43788: LD_VAR 0 13
43792: PPUSH
43793: LD_VAR 0 16
43797: PUSH
43798: LD_INT 1
43800: ARRAY
43801: PPUSH
43802: LD_VAR 0 16
43806: PUSH
43807: LD_INT 2
43809: ARRAY
43810: PPUSH
43811: CALL_OW 111
// continue ;
43815: GO 43307
// end ; end ; r := GetDir ( tmp ) ;
43817: LD_ADDR_VAR 0 15
43821: PUSH
43822: LD_VAR 0 13
43826: PPUSH
43827: CALL_OW 254
43831: ST_TO_ADDR
// if r = 5 then
43832: LD_VAR 0 15
43836: PUSH
43837: LD_INT 5
43839: EQUAL
43840: IFFALSE 43850
// r := 0 ;
43842: LD_ADDR_VAR 0 15
43846: PUSH
43847: LD_INT 0
43849: ST_TO_ADDR
// for j = r to 5 do
43850: LD_ADDR_VAR 0 10
43854: PUSH
43855: DOUBLE
43856: LD_VAR 0 15
43860: DEC
43861: ST_TO_ADDR
43862: LD_INT 5
43864: PUSH
43865: FOR_TO
43866: IFFALSE 43980
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43868: LD_ADDR_VAR 0 11
43872: PUSH
43873: LD_VAR 0 13
43877: PPUSH
43878: CALL_OW 250
43882: PPUSH
43883: LD_VAR 0 10
43887: PPUSH
43888: LD_INT 2
43890: PPUSH
43891: CALL_OW 272
43895: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43896: LD_ADDR_VAR 0 12
43900: PUSH
43901: LD_VAR 0 13
43905: PPUSH
43906: CALL_OW 251
43910: PPUSH
43911: LD_VAR 0 10
43915: PPUSH
43916: LD_INT 2
43918: PPUSH
43919: CALL_OW 273
43923: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43924: LD_VAR 0 11
43928: PPUSH
43929: LD_VAR 0 12
43933: PPUSH
43934: CALL_OW 488
43938: PUSH
43939: LD_VAR 0 11
43943: PPUSH
43944: LD_VAR 0 12
43948: PPUSH
43949: CALL_OW 428
43953: NOT
43954: AND
43955: IFFALSE 43978
// begin ComMoveXY ( tmp , _x , _y ) ;
43957: LD_VAR 0 13
43961: PPUSH
43962: LD_VAR 0 11
43966: PPUSH
43967: LD_VAR 0 12
43971: PPUSH
43972: CALL_OW 111
// break ;
43976: GO 43980
// end ; end ;
43978: GO 43865
43980: POP
43981: POP
// end ; end ;
43982: GO 43307
43984: POP
43985: POP
// end ;
43986: LD_VAR 0 8
43990: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43991: LD_INT 0
43993: PPUSH
// result := true ;
43994: LD_ADDR_VAR 0 3
43998: PUSH
43999: LD_INT 1
44001: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44002: LD_VAR 0 2
44006: PUSH
44007: LD_INT 24
44009: DOUBLE
44010: EQUAL
44011: IFTRUE 44021
44013: LD_INT 33
44015: DOUBLE
44016: EQUAL
44017: IFTRUE 44021
44019: GO 44046
44021: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44022: LD_ADDR_VAR 0 3
44026: PUSH
44027: LD_INT 32
44029: PPUSH
44030: LD_VAR 0 1
44034: PPUSH
44035: CALL_OW 321
44039: PUSH
44040: LD_INT 2
44042: EQUAL
44043: ST_TO_ADDR
44044: GO 44362
44046: LD_INT 20
44048: DOUBLE
44049: EQUAL
44050: IFTRUE 44054
44052: GO 44079
44054: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44055: LD_ADDR_VAR 0 3
44059: PUSH
44060: LD_INT 6
44062: PPUSH
44063: LD_VAR 0 1
44067: PPUSH
44068: CALL_OW 321
44072: PUSH
44073: LD_INT 2
44075: EQUAL
44076: ST_TO_ADDR
44077: GO 44362
44079: LD_INT 22
44081: DOUBLE
44082: EQUAL
44083: IFTRUE 44093
44085: LD_INT 36
44087: DOUBLE
44088: EQUAL
44089: IFTRUE 44093
44091: GO 44118
44093: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44094: LD_ADDR_VAR 0 3
44098: PUSH
44099: LD_INT 15
44101: PPUSH
44102: LD_VAR 0 1
44106: PPUSH
44107: CALL_OW 321
44111: PUSH
44112: LD_INT 2
44114: EQUAL
44115: ST_TO_ADDR
44116: GO 44362
44118: LD_INT 30
44120: DOUBLE
44121: EQUAL
44122: IFTRUE 44126
44124: GO 44151
44126: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44127: LD_ADDR_VAR 0 3
44131: PUSH
44132: LD_INT 20
44134: PPUSH
44135: LD_VAR 0 1
44139: PPUSH
44140: CALL_OW 321
44144: PUSH
44145: LD_INT 2
44147: EQUAL
44148: ST_TO_ADDR
44149: GO 44362
44151: LD_INT 28
44153: DOUBLE
44154: EQUAL
44155: IFTRUE 44165
44157: LD_INT 21
44159: DOUBLE
44160: EQUAL
44161: IFTRUE 44165
44163: GO 44190
44165: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44166: LD_ADDR_VAR 0 3
44170: PUSH
44171: LD_INT 21
44173: PPUSH
44174: LD_VAR 0 1
44178: PPUSH
44179: CALL_OW 321
44183: PUSH
44184: LD_INT 2
44186: EQUAL
44187: ST_TO_ADDR
44188: GO 44362
44190: LD_INT 16
44192: DOUBLE
44193: EQUAL
44194: IFTRUE 44198
44196: GO 44223
44198: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44199: LD_ADDR_VAR 0 3
44203: PUSH
44204: LD_INT 84
44206: PPUSH
44207: LD_VAR 0 1
44211: PPUSH
44212: CALL_OW 321
44216: PUSH
44217: LD_INT 2
44219: EQUAL
44220: ST_TO_ADDR
44221: GO 44362
44223: LD_INT 19
44225: DOUBLE
44226: EQUAL
44227: IFTRUE 44237
44229: LD_INT 23
44231: DOUBLE
44232: EQUAL
44233: IFTRUE 44237
44235: GO 44262
44237: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44238: LD_ADDR_VAR 0 3
44242: PUSH
44243: LD_INT 83
44245: PPUSH
44246: LD_VAR 0 1
44250: PPUSH
44251: CALL_OW 321
44255: PUSH
44256: LD_INT 2
44258: EQUAL
44259: ST_TO_ADDR
44260: GO 44362
44262: LD_INT 17
44264: DOUBLE
44265: EQUAL
44266: IFTRUE 44270
44268: GO 44295
44270: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44271: LD_ADDR_VAR 0 3
44275: PUSH
44276: LD_INT 39
44278: PPUSH
44279: LD_VAR 0 1
44283: PPUSH
44284: CALL_OW 321
44288: PUSH
44289: LD_INT 2
44291: EQUAL
44292: ST_TO_ADDR
44293: GO 44362
44295: LD_INT 18
44297: DOUBLE
44298: EQUAL
44299: IFTRUE 44303
44301: GO 44328
44303: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44304: LD_ADDR_VAR 0 3
44308: PUSH
44309: LD_INT 40
44311: PPUSH
44312: LD_VAR 0 1
44316: PPUSH
44317: CALL_OW 321
44321: PUSH
44322: LD_INT 2
44324: EQUAL
44325: ST_TO_ADDR
44326: GO 44362
44328: LD_INT 27
44330: DOUBLE
44331: EQUAL
44332: IFTRUE 44336
44334: GO 44361
44336: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44337: LD_ADDR_VAR 0 3
44341: PUSH
44342: LD_INT 35
44344: PPUSH
44345: LD_VAR 0 1
44349: PPUSH
44350: CALL_OW 321
44354: PUSH
44355: LD_INT 2
44357: EQUAL
44358: ST_TO_ADDR
44359: GO 44362
44361: POP
// end ;
44362: LD_VAR 0 3
44366: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44367: LD_INT 0
44369: PPUSH
44370: PPUSH
44371: PPUSH
44372: PPUSH
44373: PPUSH
44374: PPUSH
44375: PPUSH
44376: PPUSH
44377: PPUSH
44378: PPUSH
44379: PPUSH
// result := false ;
44380: LD_ADDR_VAR 0 6
44384: PUSH
44385: LD_INT 0
44387: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44388: LD_VAR 0 1
44392: NOT
44393: PUSH
44394: LD_VAR 0 1
44398: PPUSH
44399: CALL_OW 266
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: IN
44414: NOT
44415: OR
44416: PUSH
44417: LD_VAR 0 2
44421: NOT
44422: OR
44423: PUSH
44424: LD_VAR 0 5
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: LD_INT 3
44440: PUSH
44441: LD_INT 4
44443: PUSH
44444: LD_INT 5
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: IN
44455: NOT
44456: OR
44457: PUSH
44458: LD_VAR 0 3
44462: PPUSH
44463: LD_VAR 0 4
44467: PPUSH
44468: CALL_OW 488
44472: NOT
44473: OR
44474: IFFALSE 44478
// exit ;
44476: GO 45214
// side := GetSide ( depot ) ;
44478: LD_ADDR_VAR 0 9
44482: PUSH
44483: LD_VAR 0 1
44487: PPUSH
44488: CALL_OW 255
44492: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44493: LD_VAR 0 9
44497: PPUSH
44498: LD_VAR 0 2
44502: PPUSH
44503: CALL 43991 0 2
44507: NOT
44508: IFFALSE 44512
// exit ;
44510: GO 45214
// pom := GetBase ( depot ) ;
44512: LD_ADDR_VAR 0 10
44516: PUSH
44517: LD_VAR 0 1
44521: PPUSH
44522: CALL_OW 274
44526: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44527: LD_ADDR_VAR 0 11
44531: PUSH
44532: LD_VAR 0 2
44536: PPUSH
44537: LD_VAR 0 1
44541: PPUSH
44542: CALL_OW 248
44546: PPUSH
44547: CALL_OW 450
44551: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44552: LD_VAR 0 10
44556: PPUSH
44557: LD_INT 1
44559: PPUSH
44560: CALL_OW 275
44564: PUSH
44565: LD_VAR 0 11
44569: PUSH
44570: LD_INT 1
44572: ARRAY
44573: GREATEREQUAL
44574: PUSH
44575: LD_VAR 0 10
44579: PPUSH
44580: LD_INT 2
44582: PPUSH
44583: CALL_OW 275
44587: PUSH
44588: LD_VAR 0 11
44592: PUSH
44593: LD_INT 2
44595: ARRAY
44596: GREATEREQUAL
44597: AND
44598: PUSH
44599: LD_VAR 0 10
44603: PPUSH
44604: LD_INT 3
44606: PPUSH
44607: CALL_OW 275
44611: PUSH
44612: LD_VAR 0 11
44616: PUSH
44617: LD_INT 3
44619: ARRAY
44620: GREATEREQUAL
44621: AND
44622: NOT
44623: IFFALSE 44627
// exit ;
44625: GO 45214
// if GetBType ( depot ) = b_depot then
44627: LD_VAR 0 1
44631: PPUSH
44632: CALL_OW 266
44636: PUSH
44637: LD_INT 0
44639: EQUAL
44640: IFFALSE 44652
// dist := 28 else
44642: LD_ADDR_VAR 0 14
44646: PUSH
44647: LD_INT 28
44649: ST_TO_ADDR
44650: GO 44660
// dist := 36 ;
44652: LD_ADDR_VAR 0 14
44656: PUSH
44657: LD_INT 36
44659: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44660: LD_VAR 0 1
44664: PPUSH
44665: LD_VAR 0 3
44669: PPUSH
44670: LD_VAR 0 4
44674: PPUSH
44675: CALL_OW 297
44679: PUSH
44680: LD_VAR 0 14
44684: GREATER
44685: IFFALSE 44689
// exit ;
44687: GO 45214
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44689: LD_ADDR_VAR 0 12
44693: PUSH
44694: LD_VAR 0 2
44698: PPUSH
44699: LD_VAR 0 3
44703: PPUSH
44704: LD_VAR 0 4
44708: PPUSH
44709: LD_VAR 0 5
44713: PPUSH
44714: LD_VAR 0 1
44718: PPUSH
44719: CALL_OW 248
44723: PPUSH
44724: LD_INT 0
44726: PPUSH
44727: CALL 45219 0 6
44731: ST_TO_ADDR
// if not hexes then
44732: LD_VAR 0 12
44736: NOT
44737: IFFALSE 44741
// exit ;
44739: GO 45214
// hex := GetHexInfo ( x , y ) ;
44741: LD_ADDR_VAR 0 15
44745: PUSH
44746: LD_VAR 0 3
44750: PPUSH
44751: LD_VAR 0 4
44755: PPUSH
44756: CALL_OW 546
44760: ST_TO_ADDR
// if hex [ 1 ] then
44761: LD_VAR 0 15
44765: PUSH
44766: LD_INT 1
44768: ARRAY
44769: IFFALSE 44773
// exit ;
44771: GO 45214
// height := hex [ 2 ] ;
44773: LD_ADDR_VAR 0 13
44777: PUSH
44778: LD_VAR 0 15
44782: PUSH
44783: LD_INT 2
44785: ARRAY
44786: ST_TO_ADDR
// for i = 1 to hexes do
44787: LD_ADDR_VAR 0 7
44791: PUSH
44792: DOUBLE
44793: LD_INT 1
44795: DEC
44796: ST_TO_ADDR
44797: LD_VAR 0 12
44801: PUSH
44802: FOR_TO
44803: IFFALSE 45133
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44805: LD_VAR 0 12
44809: PUSH
44810: LD_VAR 0 7
44814: ARRAY
44815: PUSH
44816: LD_INT 1
44818: ARRAY
44819: PPUSH
44820: LD_VAR 0 12
44824: PUSH
44825: LD_VAR 0 7
44829: ARRAY
44830: PUSH
44831: LD_INT 2
44833: ARRAY
44834: PPUSH
44835: CALL_OW 488
44839: NOT
44840: PUSH
44841: LD_VAR 0 12
44845: PUSH
44846: LD_VAR 0 7
44850: ARRAY
44851: PUSH
44852: LD_INT 1
44854: ARRAY
44855: PPUSH
44856: LD_VAR 0 12
44860: PUSH
44861: LD_VAR 0 7
44865: ARRAY
44866: PUSH
44867: LD_INT 2
44869: ARRAY
44870: PPUSH
44871: CALL_OW 428
44875: PUSH
44876: LD_INT 0
44878: GREATER
44879: OR
44880: PUSH
44881: LD_VAR 0 12
44885: PUSH
44886: LD_VAR 0 7
44890: ARRAY
44891: PUSH
44892: LD_INT 1
44894: ARRAY
44895: PPUSH
44896: LD_VAR 0 12
44900: PUSH
44901: LD_VAR 0 7
44905: ARRAY
44906: PUSH
44907: LD_INT 2
44909: ARRAY
44910: PPUSH
44911: CALL_OW 351
44915: OR
44916: IFFALSE 44922
// exit ;
44918: POP
44919: POP
44920: GO 45214
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44922: LD_ADDR_VAR 0 8
44926: PUSH
44927: LD_VAR 0 12
44931: PUSH
44932: LD_VAR 0 7
44936: ARRAY
44937: PUSH
44938: LD_INT 1
44940: ARRAY
44941: PPUSH
44942: LD_VAR 0 12
44946: PUSH
44947: LD_VAR 0 7
44951: ARRAY
44952: PUSH
44953: LD_INT 2
44955: ARRAY
44956: PPUSH
44957: CALL_OW 546
44961: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44962: LD_VAR 0 8
44966: PUSH
44967: LD_INT 1
44969: ARRAY
44970: PUSH
44971: LD_VAR 0 8
44975: PUSH
44976: LD_INT 2
44978: ARRAY
44979: PUSH
44980: LD_VAR 0 13
44984: PUSH
44985: LD_INT 2
44987: PLUS
44988: GREATER
44989: OR
44990: PUSH
44991: LD_VAR 0 8
44995: PUSH
44996: LD_INT 2
44998: ARRAY
44999: PUSH
45000: LD_VAR 0 13
45004: PUSH
45005: LD_INT 2
45007: MINUS
45008: LESS
45009: OR
45010: PUSH
45011: LD_VAR 0 8
45015: PUSH
45016: LD_INT 3
45018: ARRAY
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 8
45025: PUSH
45026: LD_INT 9
45028: PUSH
45029: LD_INT 10
45031: PUSH
45032: LD_INT 11
45034: PUSH
45035: LD_INT 12
45037: PUSH
45038: LD_INT 13
45040: PUSH
45041: LD_INT 16
45043: PUSH
45044: LD_INT 17
45046: PUSH
45047: LD_INT 18
45049: PUSH
45050: LD_INT 19
45052: PUSH
45053: LD_INT 20
45055: PUSH
45056: LD_INT 21
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: IN
45074: NOT
45075: OR
45076: PUSH
45077: LD_VAR 0 8
45081: PUSH
45082: LD_INT 5
45084: ARRAY
45085: NOT
45086: OR
45087: PUSH
45088: LD_VAR 0 8
45092: PUSH
45093: LD_INT 6
45095: ARRAY
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: LD_INT 7
45105: PUSH
45106: LD_INT 9
45108: PUSH
45109: LD_INT 10
45111: PUSH
45112: LD_INT 11
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: IN
45123: NOT
45124: OR
45125: IFFALSE 45131
// exit ;
45127: POP
45128: POP
45129: GO 45214
// end ;
45131: GO 44802
45133: POP
45134: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45135: LD_VAR 0 9
45139: PPUSH
45140: LD_VAR 0 3
45144: PPUSH
45145: LD_VAR 0 4
45149: PPUSH
45150: LD_INT 20
45152: PPUSH
45153: CALL 37166 0 4
45157: PUSH
45158: LD_INT 4
45160: ARRAY
45161: IFFALSE 45165
// exit ;
45163: GO 45214
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45165: LD_VAR 0 2
45169: PUSH
45170: LD_INT 29
45172: PUSH
45173: LD_INT 30
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: IN
45180: PUSH
45181: LD_VAR 0 3
45185: PPUSH
45186: LD_VAR 0 4
45190: PPUSH
45191: LD_VAR 0 9
45195: PPUSH
45196: CALL_OW 440
45200: NOT
45201: AND
45202: IFFALSE 45206
// exit ;
45204: GO 45214
// result := true ;
45206: LD_ADDR_VAR 0 6
45210: PUSH
45211: LD_INT 1
45213: ST_TO_ADDR
// end ;
45214: LD_VAR 0 6
45218: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45219: LD_INT 0
45221: PPUSH
45222: PPUSH
45223: PPUSH
45224: PPUSH
45225: PPUSH
45226: PPUSH
45227: PPUSH
45228: PPUSH
45229: PPUSH
45230: PPUSH
45231: PPUSH
45232: PPUSH
45233: PPUSH
45234: PPUSH
45235: PPUSH
45236: PPUSH
45237: PPUSH
45238: PPUSH
45239: PPUSH
45240: PPUSH
45241: PPUSH
45242: PPUSH
45243: PPUSH
45244: PPUSH
45245: PPUSH
45246: PPUSH
45247: PPUSH
45248: PPUSH
45249: PPUSH
45250: PPUSH
45251: PPUSH
45252: PPUSH
45253: PPUSH
45254: PPUSH
45255: PPUSH
45256: PPUSH
45257: PPUSH
45258: PPUSH
45259: PPUSH
45260: PPUSH
45261: PPUSH
45262: PPUSH
45263: PPUSH
45264: PPUSH
45265: PPUSH
45266: PPUSH
45267: PPUSH
45268: PPUSH
45269: PPUSH
45270: PPUSH
45271: PPUSH
45272: PPUSH
45273: PPUSH
45274: PPUSH
45275: PPUSH
45276: PPUSH
45277: PPUSH
45278: PPUSH
// result = [ ] ;
45279: LD_ADDR_VAR 0 7
45283: PUSH
45284: EMPTY
45285: ST_TO_ADDR
// temp_list = [ ] ;
45286: LD_ADDR_VAR 0 9
45290: PUSH
45291: EMPTY
45292: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45293: LD_VAR 0 4
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 4
45312: PUSH
45313: LD_INT 5
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: IN
45324: NOT
45325: PUSH
45326: LD_VAR 0 1
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: IN
45341: PUSH
45342: LD_VAR 0 5
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: LD_INT 3
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: LIST
45360: IN
45361: NOT
45362: AND
45363: OR
45364: IFFALSE 45368
// exit ;
45366: GO 63759
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45368: LD_VAR 0 1
45372: PUSH
45373: LD_INT 6
45375: PUSH
45376: LD_INT 7
45378: PUSH
45379: LD_INT 8
45381: PUSH
45382: LD_INT 13
45384: PUSH
45385: LD_INT 12
45387: PUSH
45388: LD_INT 15
45390: PUSH
45391: LD_INT 11
45393: PUSH
45394: LD_INT 14
45396: PUSH
45397: LD_INT 10
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: IN
45411: IFFALSE 45421
// btype = b_lab ;
45413: LD_ADDR_VAR 0 1
45417: PUSH
45418: LD_INT 6
45420: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45421: LD_VAR 0 6
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: LIST
45439: IN
45440: NOT
45441: PUSH
45442: LD_VAR 0 1
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: LD_INT 3
45458: PUSH
45459: LD_INT 6
45461: PUSH
45462: LD_INT 36
45464: PUSH
45465: LD_INT 4
45467: PUSH
45468: LD_INT 5
45470: PUSH
45471: LD_INT 31
45473: PUSH
45474: LD_INT 32
45476: PUSH
45477: LD_INT 33
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: IN
45493: NOT
45494: PUSH
45495: LD_VAR 0 6
45499: PUSH
45500: LD_INT 1
45502: EQUAL
45503: AND
45504: OR
45505: PUSH
45506: LD_VAR 0 1
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: LD_INT 3
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: IN
45521: NOT
45522: PUSH
45523: LD_VAR 0 6
45527: PUSH
45528: LD_INT 2
45530: EQUAL
45531: AND
45532: OR
45533: IFFALSE 45543
// mode = 0 ;
45535: LD_ADDR_VAR 0 6
45539: PUSH
45540: LD_INT 0
45542: ST_TO_ADDR
// case mode of 0 :
45543: LD_VAR 0 6
45547: PUSH
45548: LD_INT 0
45550: DOUBLE
45551: EQUAL
45552: IFTRUE 45556
45554: GO 57009
45556: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45557: LD_ADDR_VAR 0 11
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: LD_INT 2
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45750: LD_ADDR_VAR 0 12
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 3
45907: NEG
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 3
45918: NEG
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45946: LD_ADDR_VAR 0 13
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: LD_INT 3
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 3
46105: NEG
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: LD_INT 3
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46145: LD_ADDR_VAR 0 14
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 3
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: LD_INT 3
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46341: LD_ADDR_VAR 0 15
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: NEG
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 3
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 3
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46534: LD_ADDR_VAR 0 16
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: LD_INT 2
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 3
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 3
46691: PUSH
46692: LD_INT 3
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: LD_INT 3
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46727: LD_ADDR_VAR 0 17
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: LD_INT 2
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46957: LD_ADDR_VAR 0 18
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 2
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 2
47133: NEG
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: NEG
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: NEG
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47187: LD_ADDR_VAR 0 19
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: LD_INT 2
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47417: LD_ADDR_VAR 0 20
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: LD_INT 2
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47647: LD_ADDR_VAR 0 21
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 2
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: LD_INT 2
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47877: LD_ADDR_VAR 0 22
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: LD_INT 0
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 2
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: LD_INT 2
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: NEG
48077: PUSH
48078: LD_INT 2
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48107: LD_ADDR_VAR 0 23
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: LD_INT 2
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: LD_INT 2
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 2
48318: NEG
48319: PUSH
48320: LD_INT 3
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 3
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48387: LD_ADDR_VAR 0 24
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 2
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 3
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 3
48630: PUSH
48631: LD_INT 2
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48663: LD_ADDR_VAR 0 25
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 3
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 3
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 2
48894: PUSH
48895: LD_INT 3
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: LD_INT 3
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48937: LD_ADDR_VAR 0 26
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 2
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: PUSH
49073: LD_INT 2
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: LD_INT 2
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: LD_INT 3
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 3
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 2
49179: NEG
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49213: LD_ADDR_VAR 0 27
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 2
49389: NEG
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: NEG
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: NEG
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 3
49446: NEG
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 3
49458: NEG
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49493: LD_ADDR_VAR 0 28
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: PUSH
49629: LD_INT 2
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 3
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 3
49728: NEG
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 3
49740: NEG
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49775: LD_ADDR_VAR 0 29
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 1
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: LD_INT 3
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 2
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 3
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: LD_INT 3
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 2
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 3
50019: NEG
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50054: LD_ADDR_VAR 0 30
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 2
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 2
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 3
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 2
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 3
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: LD_INT 3
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50332: LD_ADDR_VAR 0 31
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: LD_INT 2
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: NEG
50522: PUSH
50523: LD_INT 3
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 3
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 3
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: NEG
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 3
50575: NEG
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50610: LD_ADDR_VAR 0 32
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: LD_INT 3
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 3
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 3
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 3
50853: NEG
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50888: LD_ADDR_VAR 0 33
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: LD_INT 2
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: LD_INT 3
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 3
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: LD_INT 3
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: LD_INT 2
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 3
51132: NEG
51133: PUSH
51134: LD_INT 2
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51167: LD_ADDR_VAR 0 34
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: NEG
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: LD_INT 3
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 3
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: LD_INT 3
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 3
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51447: LD_ADDR_VAR 0 35
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51559: LD_ADDR_VAR 0 36
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51671: LD_ADDR_VAR 0 37
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51783: LD_ADDR_VAR 0 38
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51895: LD_ADDR_VAR 0 39
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52007: LD_ADDR_VAR 0 40
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52119: LD_ADDR_VAR 0 41
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 2
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: LD_INT 1
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 2
52274: NEG
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: NEG
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 3
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 3
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 3
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 3
52362: PUSH
52363: LD_INT 3
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: LD_INT 3
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 3
52393: NEG
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 3
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 3
52416: NEG
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 3
52428: NEG
52429: PUSH
52430: LD_INT 3
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52469: LD_ADDR_VAR 0 42
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 2
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 2
52647: NEG
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: LD_INT 3
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 3
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 3
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 3
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 2
52725: PUSH
52726: LD_INT 3
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: LD_INT 3
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 3
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 3
52766: NEG
52767: PUSH
52768: LD_INT 2
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 3
52778: NEG
52779: PUSH
52780: LD_INT 3
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52819: LD_ADDR_VAR 0 43
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 3
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 3
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 2
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 3
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 3
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 3
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 3
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 3
53115: NEG
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 3
53126: NEG
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53167: LD_ADDR_VAR 0 44
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: LD_INT 2
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 2
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: NEG
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 2
53345: NEG
53346: PUSH
53347: LD_INT 2
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 2
53357: NEG
53358: PUSH
53359: LD_INT 3
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 3
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 3
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 3
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 3
53410: PUSH
53411: LD_INT 3
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 3
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 3
53464: NEG
53465: PUSH
53466: LD_INT 2
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 3
53476: NEG
53477: PUSH
53478: LD_INT 3
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53517: LD_ADDR_VAR 0 45
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: LD_INT 1
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: LD_INT 2
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: LD_INT 2
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 2
53683: NEG
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: NEG
53708: PUSH
53709: LD_INT 3
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: LD_INT 3
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 3
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 2
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 3
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 3
53763: PUSH
53764: LD_INT 3
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 3
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 3
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 3
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 3
53814: NEG
53815: PUSH
53816: LD_INT 2
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 3
53826: NEG
53827: PUSH
53828: LD_INT 3
53830: NEG
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53867: LD_ADDR_VAR 0 46
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: LD_INT 2
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: NEG
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: LD_INT 3
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: LD_INT 3
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 3
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 3
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: LD_INT 3
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: LD_INT 3
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 2
54152: NEG
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 3
54163: NEG
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 3
54174: NEG
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54215: LD_ADDR_VAR 0 47
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: NEG
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54366: LD_ADDR_VAR 0 48
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: LD_INT 2
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54513: LD_ADDR_VAR 0 49
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: LD_INT 2
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54657: LD_ADDR_VAR 0 50
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54801: LD_ADDR_VAR 0 51
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: LD_INT 0
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54948: LD_ADDR_VAR 0 52
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55099: LD_ADDR_VAR 0 53
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: NEG
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: LD_INT 2
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 2
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 2
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 2
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: PUSH
55235: LD_INT 2
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 2
55275: NEG
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: NEG
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: NEG
55299: PUSH
55300: LD_INT 2
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55329: LD_ADDR_VAR 0 54
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: NEG
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 2
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: LD_INT 2
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55559: LD_ADDR_VAR 0 55
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: LD_INT 2
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: NEG
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 2
55735: NEG
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: LD_INT 1
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: LD_INT 2
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55789: LD_ADDR_VAR 0 56
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: LD_INT 2
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 2
55988: NEG
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56019: LD_ADDR_VAR 0 57
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 2
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 2
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: LD_INT 2
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 2
56195: NEG
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: NEG
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56249: LD_ADDR_VAR 0 58
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: LD_INT 2
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 2
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56479: LD_ADDR_VAR 0 59
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56567: LD_ADDR_VAR 0 60
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56655: LD_ADDR_VAR 0 61
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 0
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 0
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56743: LD_ADDR_VAR 0 62
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56831: LD_ADDR_VAR 0 63
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56919: LD_ADDR_VAR 0 64
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: NEG
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: ST_TO_ADDR
// end ; 1 :
57007: GO 62904
57009: LD_INT 1
57011: DOUBLE
57012: EQUAL
57013: IFTRUE 57017
57015: GO 59640
57017: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57018: LD_ADDR_VAR 0 11
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: LD_INT 3
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: LD_INT 3
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: LD_INT 2
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: LIST
57061: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57062: LD_ADDR_VAR 0 12
57066: PUSH
57067: LD_INT 2
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 3
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 3
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: LIST
57102: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57103: LD_ADDR_VAR 0 13
57107: PUSH
57108: LD_INT 3
57110: PUSH
57111: LD_INT 2
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 3
57120: PUSH
57121: LD_INT 3
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: LD_INT 3
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: LIST
57142: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57143: LD_ADDR_VAR 0 14
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: LD_INT 3
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: LD_INT 3
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57184: LD_ADDR_VAR 0 15
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 3
57202: NEG
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: LIST
57227: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57228: LD_ADDR_VAR 0 16
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: LD_INT 3
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 3
57247: NEG
57248: PUSH
57249: LD_INT 2
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 3
57259: NEG
57260: PUSH
57261: LD_INT 3
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: LIST
57273: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57274: LD_ADDR_VAR 0 17
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 3
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: LD_INT 3
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: LD_INT 2
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: LIST
57317: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57318: LD_ADDR_VAR 0 18
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 3
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: LIST
57358: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57359: LD_ADDR_VAR 0 19
57363: PUSH
57364: LD_INT 3
57366: PUSH
57367: LD_INT 2
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 3
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57399: LD_ADDR_VAR 0 20
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: LD_INT 3
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: LIST
57439: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57440: LD_ADDR_VAR 0 21
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 3
57458: NEG
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 3
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: LIST
57483: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57484: LD_ADDR_VAR 0 22
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: LD_INT 3
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 3
57503: NEG
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 3
57515: NEG
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57530: LD_ADDR_VAR 0 23
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 3
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: LD_INT 4
57552: NEG
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: LD_INT 3
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: LIST
57573: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57574: LD_ADDR_VAR 0 24
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 3
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 4
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: LIST
57614: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57615: LD_ADDR_VAR 0 25
57619: PUSH
57620: LD_INT 3
57622: PUSH
57623: LD_INT 3
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 4
57632: PUSH
57633: LD_INT 3
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 3
57642: PUSH
57643: LD_INT 4
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: LIST
57654: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57655: LD_ADDR_VAR 0 26
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: LD_INT 3
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 4
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: LD_INT 3
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: LIST
57695: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57696: LD_ADDR_VAR 0 27
57700: PUSH
57701: LD_INT 3
57703: NEG
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 3
57714: NEG
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 4
57725: NEG
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: LIST
57739: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57740: LD_ADDR_VAR 0 28
57744: PUSH
57745: LD_INT 3
57747: NEG
57748: PUSH
57749: LD_INT 3
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 3
57759: NEG
57760: PUSH
57761: LD_INT 4
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 4
57771: NEG
57772: PUSH
57773: LD_INT 3
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: LIST
57785: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57786: LD_ADDR_VAR 0 29
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 3
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 3
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 4
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: LD_INT 4
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: LD_INT 3
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: LD_INT 5
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: LD_INT 5
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: LD_INT 4
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 6
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: LD_INT 6
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: LD_INT 5
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57941: LD_ADDR_VAR 0 30
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 3
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 3
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 4
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 4
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 4
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 5
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 5
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 5
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 6
58052: PUSH
58053: LD_INT 0
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 6
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58084: LD_ADDR_VAR 0 31
58088: PUSH
58089: LD_INT 3
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 4
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 4
58131: PUSH
58132: LD_INT 4
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 3
58141: PUSH
58142: LD_INT 4
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 5
58151: PUSH
58152: LD_INT 4
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 5
58161: PUSH
58162: LD_INT 5
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 4
58171: PUSH
58172: LD_INT 5
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 6
58181: PUSH
58182: LD_INT 5
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 6
58191: PUSH
58192: LD_INT 6
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 5
58201: PUSH
58202: LD_INT 6
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58223: LD_ADDR_VAR 0 32
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 2
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: LD_INT 4
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: LD_INT 4
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: LD_INT 3
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: PUSH
58293: LD_INT 5
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: LD_INT 5
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: LD_INT 4
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: LD_INT 6
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: LD_INT 6
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: LD_INT 5
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58366: LD_ADDR_VAR 0 33
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 3
58384: NEG
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 3
58407: NEG
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 4
58418: NEG
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 4
58429: NEG
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 4
58441: NEG
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 5
58452: NEG
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 5
58463: NEG
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 5
58475: NEG
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 6
58486: NEG
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 6
58497: NEG
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58521: LD_ADDR_VAR 0 34
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: LD_INT 3
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 3
58540: NEG
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: LD_INT 3
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 3
58564: NEG
58565: PUSH
58566: LD_INT 4
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 4
58576: NEG
58577: PUSH
58578: LD_INT 3
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 4
58588: NEG
58589: PUSH
58590: LD_INT 4
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 4
58600: NEG
58601: PUSH
58602: LD_INT 5
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 5
58612: NEG
58613: PUSH
58614: LD_INT 4
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 5
58624: NEG
58625: PUSH
58626: LD_INT 5
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 5
58636: NEG
58637: PUSH
58638: LD_INT 6
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 6
58648: NEG
58649: PUSH
58650: LD_INT 5
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 6
58660: NEG
58661: PUSH
58662: LD_INT 6
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58684: LD_ADDR_VAR 0 41
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: LD_INT 3
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: LD_INT 2
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: LIST
58727: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58728: LD_ADDR_VAR 0 42
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 2
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: LIST
58768: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58769: LD_ADDR_VAR 0 43
58773: PUSH
58774: LD_INT 2
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 3
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 2
58796: PUSH
58797: LD_INT 3
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: LIST
58808: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58809: LD_ADDR_VAR 0 44
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 2
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: LD_INT 3
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 1
58836: NEG
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: LIST
58849: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58850: LD_ADDR_VAR 0 45
58854: PUSH
58855: LD_INT 2
58857: NEG
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 2
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 3
58879: NEG
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: LIST
58893: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58894: LD_ADDR_VAR 0 46
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: LD_INT 2
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PUSH
58915: LD_INT 3
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 3
58925: NEG
58926: PUSH
58927: LD_INT 2
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: LIST
58939: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58940: LD_ADDR_VAR 0 47
58944: PUSH
58945: LD_INT 2
58947: NEG
58948: PUSH
58949: LD_INT 3
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58973: LD_ADDR_VAR 0 48
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 2
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59004: LD_ADDR_VAR 0 49
59008: PUSH
59009: LD_INT 3
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 3
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59033: LD_ADDR_VAR 0 50
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: LD_INT 3
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 3
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59062: LD_ADDR_VAR 0 51
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59093: LD_ADDR_VAR 0 52
59097: PUSH
59098: LD_INT 3
59100: NEG
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 3
59112: NEG
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59126: LD_ADDR_VAR 0 53
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: LD_INT 3
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 3
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 1
59156: PUSH
59157: LD_INT 2
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: LIST
59169: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59170: LD_ADDR_VAR 0 54
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 3
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 3
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: LIST
59210: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59211: LD_ADDR_VAR 0 55
59215: PUSH
59216: LD_INT 3
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 3
59228: PUSH
59229: LD_INT 3
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: LD_INT 3
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: LIST
59250: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59251: LD_ADDR_VAR 0 56
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: LD_INT 3
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: LD_INT 3
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 2
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: LIST
59291: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59292: LD_ADDR_VAR 0 57
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: LD_INT 1
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 3
59310: NEG
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 3
59321: NEG
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: LIST
59335: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59336: LD_ADDR_VAR 0 58
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: LD_INT 3
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 3
59355: NEG
59356: PUSH
59357: LD_INT 2
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 3
59367: NEG
59368: PUSH
59369: LD_INT 3
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: LIST
59381: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59382: LD_ADDR_VAR 0 59
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 2
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: LIST
59425: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59426: LD_ADDR_VAR 0 60
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 1
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 2
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: LIST
59466: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59467: LD_ADDR_VAR 0 61
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: LD_INT 2
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 2
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: LIST
59506: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59507: LD_ADDR_VAR 0 62
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: LD_INT 2
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: LIST
59547: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59548: LD_ADDR_VAR 0 63
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 2
59566: NEG
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 2
59577: NEG
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: LIST
59591: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59592: LD_ADDR_VAR 0 64
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 2
59611: NEG
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 2
59623: NEG
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: ST_TO_ADDR
// end ; 2 :
59638: GO 62904
59640: LD_INT 2
59642: DOUBLE
59643: EQUAL
59644: IFTRUE 59648
59646: GO 62903
59648: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59649: LD_ADDR_VAR 0 29
59653: PUSH
59654: LD_INT 4
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 4
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 5
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 5
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 4
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 3
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 3
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 3
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 5
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 3
59749: PUSH
59750: LD_INT 3
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 3
59759: PUSH
59760: LD_INT 2
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 4
59769: PUSH
59770: LD_INT 3
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 4
59779: PUSH
59780: LD_INT 4
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: PUSH
59790: LD_INT 4
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 2
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: LD_INT 2
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 4
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: PUSH
59830: LD_INT 4
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 4
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 1
59859: PUSH
59860: LD_INT 4
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: LD_INT 5
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: LD_INT 5
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: LD_INT 4
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 3
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 2
59911: PUSH
59912: LD_INT 5
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 2
59921: NEG
59922: PUSH
59923: LD_INT 3
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 3
59932: NEG
59933: PUSH
59934: LD_INT 0
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 2
59955: NEG
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 3
59977: NEG
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 4
59988: NEG
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 4
59999: NEG
60000: PUSH
60001: LD_INT 1
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 4
60011: NEG
60012: PUSH
60013: LD_INT 2
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 2
60023: NEG
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 4
60034: NEG
60035: PUSH
60036: LD_INT 4
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 4
60046: NEG
60047: PUSH
60048: LD_INT 5
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 3
60058: NEG
60059: PUSH
60060: LD_INT 4
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 3
60070: NEG
60071: PUSH
60072: LD_INT 3
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 4
60082: NEG
60083: PUSH
60084: LD_INT 3
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 5
60094: NEG
60095: PUSH
60096: LD_INT 4
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 5
60106: NEG
60107: PUSH
60108: LD_INT 5
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 3
60118: NEG
60119: PUSH
60120: LD_INT 5
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 5
60130: NEG
60131: PUSH
60132: LD_INT 3
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60187: LD_ADDR_VAR 0 30
60191: PUSH
60192: LD_INT 4
60194: PUSH
60195: LD_INT 4
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 4
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 5
60214: PUSH
60215: LD_INT 4
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 5
60224: PUSH
60225: LD_INT 5
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 4
60234: PUSH
60235: LD_INT 5
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 3
60244: PUSH
60245: LD_INT 4
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 3
60254: PUSH
60255: LD_INT 3
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 5
60264: PUSH
60265: LD_INT 3
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 3
60274: PUSH
60275: LD_INT 5
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: LD_INT 3
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 3
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: LD_INT 4
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: LD_INT 4
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 1
60334: NEG
60335: PUSH
60336: LD_INT 3
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 1
60345: NEG
60346: PUSH
60347: LD_INT 2
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 2
60356: PUSH
60357: LD_INT 4
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: LD_INT 2
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 4
60377: NEG
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 4
60388: NEG
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 3
60400: NEG
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: LD_INT 1
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 4
60422: NEG
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 5
60433: NEG
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 5
60444: NEG
60445: PUSH
60446: LD_INT 1
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 5
60456: NEG
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 3
60468: NEG
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 3
60479: NEG
60480: PUSH
60481: LD_INT 3
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 3
60491: NEG
60492: PUSH
60493: LD_INT 4
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: LD_INT 3
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 2
60515: NEG
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: NEG
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 4
60539: NEG
60540: PUSH
60541: LD_INT 3
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 4
60551: NEG
60552: PUSH
60553: LD_INT 4
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: NEG
60564: PUSH
60565: LD_INT 4
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 4
60575: NEG
60576: PUSH
60577: LD_INT 2
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 4
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: LD_INT 5
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: LD_INT 4
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: LD_INT 3
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 3
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: LD_INT 4
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 5
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: LD_INT 3
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: LD_INT 5
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60734: LD_ADDR_VAR 0 31
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: LD_INT 4
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 3
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: LD_INT 4
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: LD_INT 5
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: LD_INT 5
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: LD_INT 4
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: LD_INT 3
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 2
60813: PUSH
60814: LD_INT 5
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 2
60823: NEG
60824: PUSH
60825: LD_INT 3
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 3
60834: NEG
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 3
60845: NEG
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 2
60857: NEG
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 2
60868: NEG
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 3
60879: NEG
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 4
60890: NEG
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 4
60901: NEG
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 4
60913: NEG
60914: PUSH
60915: LD_INT 2
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 2
60925: NEG
60926: PUSH
60927: LD_INT 2
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 4
60936: NEG
60937: PUSH
60938: LD_INT 4
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 4
60948: NEG
60949: PUSH
60950: LD_INT 5
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 3
60960: NEG
60961: PUSH
60962: LD_INT 4
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: LD_INT 3
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 4
60984: NEG
60985: PUSH
60986: LD_INT 3
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 5
60996: NEG
60997: PUSH
60998: LD_INT 4
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 5
61008: NEG
61009: PUSH
61010: LD_INT 5
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: LD_INT 5
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 5
61032: NEG
61033: PUSH
61034: LD_INT 3
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: LD_INT 3
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: LD_INT 4
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: LD_INT 3
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 2
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: LD_INT 2
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 3
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: LD_INT 4
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: LD_INT 4
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 4
61146: PUSH
61147: LD_INT 0
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 4
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 5
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 5
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 4
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 3
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 3
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 3
61218: PUSH
61219: LD_INT 2
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 5
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61284: LD_ADDR_VAR 0 32
61288: PUSH
61289: LD_INT 4
61291: NEG
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 4
61302: NEG
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 3
61314: NEG
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 4
61336: NEG
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 5
61347: NEG
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 5
61358: NEG
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 5
61370: NEG
61371: PUSH
61372: LD_INT 2
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 3
61382: NEG
61383: PUSH
61384: LD_INT 2
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 3
61393: NEG
61394: PUSH
61395: LD_INT 3
61397: NEG
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 3
61405: NEG
61406: PUSH
61407: LD_INT 4
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 2
61417: NEG
61418: PUSH
61419: LD_INT 3
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: LD_INT 2
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 3
61441: NEG
61442: PUSH
61443: LD_INT 2
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 4
61453: NEG
61454: PUSH
61455: LD_INT 3
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 4
61465: NEG
61466: PUSH
61467: LD_INT 4
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: LD_INT 4
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 4
61489: NEG
61490: PUSH
61491: LD_INT 2
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: LD_INT 4
61504: NEG
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 5
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: LD_INT 4
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: LD_INT 3
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 3
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: LD_INT 4
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 1
61568: NEG
61569: PUSH
61570: LD_INT 5
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 2
61580: PUSH
61581: LD_INT 3
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 2
61591: NEG
61592: PUSH
61593: LD_INT 5
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 3
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 4
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 4
61634: PUSH
61635: LD_INT 1
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 3
61644: PUSH
61645: LD_INT 1
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 2
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 2
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 2
61675: PUSH
61676: LD_INT 2
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 4
61686: PUSH
61687: LD_INT 2
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 4
61696: PUSH
61697: LD_INT 4
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 4
61706: PUSH
61707: LD_INT 3
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 5
61716: PUSH
61717: LD_INT 4
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 5
61726: PUSH
61727: LD_INT 5
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 4
61736: PUSH
61737: LD_INT 5
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 3
61746: PUSH
61747: LD_INT 4
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 3
61756: PUSH
61757: LD_INT 3
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 5
61766: PUSH
61767: LD_INT 3
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 3
61776: PUSH
61777: LD_INT 5
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61831: LD_ADDR_VAR 0 33
61835: PUSH
61836: LD_INT 4
61838: NEG
61839: PUSH
61840: LD_INT 4
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 4
61850: NEG
61851: PUSH
61852: LD_INT 5
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 3
61862: NEG
61863: PUSH
61864: LD_INT 4
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 3
61874: NEG
61875: PUSH
61876: LD_INT 3
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 4
61886: NEG
61887: PUSH
61888: LD_INT 3
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 5
61898: NEG
61899: PUSH
61900: LD_INT 4
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 5
61910: NEG
61911: PUSH
61912: LD_INT 5
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 3
61922: NEG
61923: PUSH
61924: LD_INT 5
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 5
61934: NEG
61935: PUSH
61936: LD_INT 3
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: LD_INT 3
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: LD_INT 4
61960: NEG
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: LD_INT 3
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: LD_INT 2
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: LD_INT 2
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: LD_INT 3
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 1
62013: NEG
62014: PUSH
62015: LD_INT 4
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 2
62025: PUSH
62026: LD_INT 2
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 2
62036: NEG
62037: PUSH
62038: LD_INT 4
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 4
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 4
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 5
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 5
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 4
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 3
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 3
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 3
62120: PUSH
62121: LD_INT 2
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 5
62131: PUSH
62132: LD_INT 2
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 3
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 3
62151: PUSH
62152: LD_INT 2
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 4
62161: PUSH
62162: LD_INT 3
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 4
62171: PUSH
62172: LD_INT 4
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 3
62181: PUSH
62182: LD_INT 4
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 2
62191: PUSH
62192: LD_INT 3
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 2
62201: PUSH
62202: LD_INT 2
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 4
62211: PUSH
62212: LD_INT 2
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: PUSH
62222: LD_INT 4
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: LD_INT 4
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: LD_INT 3
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: LD_INT 4
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: LD_INT 5
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: LD_INT 5
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: LD_INT 4
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: LD_INT 3
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: PUSH
62304: LD_INT 5
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 2
62313: NEG
62314: PUSH
62315: LD_INT 3
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62369: LD_ADDR_VAR 0 34
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: LD_INT 4
62379: NEG
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: LD_INT 5
62390: NEG
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: LD_INT 4
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: LD_INT 3
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: LD_INT 3
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: LD_INT 4
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: LD_INT 5
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 2
62455: PUSH
62456: LD_INT 3
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 2
62466: NEG
62467: PUSH
62468: LD_INT 5
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 3
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 3
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 4
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 4
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 3
62519: PUSH
62520: LD_INT 1
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 2
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 2
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 2
62550: PUSH
62551: LD_INT 2
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 4
62561: PUSH
62562: LD_INT 2
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 4
62571: PUSH
62572: LD_INT 4
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 4
62581: PUSH
62582: LD_INT 3
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 5
62591: PUSH
62592: LD_INT 4
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 5
62601: PUSH
62602: LD_INT 5
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 4
62611: PUSH
62612: LD_INT 5
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 3
62621: PUSH
62622: LD_INT 4
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 3
62631: PUSH
62632: LD_INT 3
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 5
62641: PUSH
62642: LD_INT 3
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 3
62651: PUSH
62652: LD_INT 5
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: LD_INT 3
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: LD_INT 2
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: LD_INT 3
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: LD_INT 4
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: LD_INT 4
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: NEG
62712: PUSH
62713: LD_INT 3
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: LD_INT 2
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 2
62733: PUSH
62734: LD_INT 4
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 2
62743: NEG
62744: PUSH
62745: LD_INT 2
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 4
62754: NEG
62755: PUSH
62756: LD_INT 0
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 4
62765: NEG
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 3
62777: NEG
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 3
62788: NEG
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 4
62799: NEG
62800: PUSH
62801: LD_INT 1
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 5
62810: NEG
62811: PUSH
62812: LD_INT 0
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 5
62821: NEG
62822: PUSH
62823: LD_INT 1
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 5
62833: NEG
62834: PUSH
62835: LD_INT 2
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 3
62845: NEG
62846: PUSH
62847: LD_INT 2
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: ST_TO_ADDR
// end ; end ;
62901: GO 62904
62903: POP
// case btype of b_depot , b_warehouse :
62904: LD_VAR 0 1
62908: PUSH
62909: LD_INT 0
62911: DOUBLE
62912: EQUAL
62913: IFTRUE 62923
62915: LD_INT 1
62917: DOUBLE
62918: EQUAL
62919: IFTRUE 62923
62921: GO 63124
62923: POP
// case nation of nation_american :
62924: LD_VAR 0 5
62928: PUSH
62929: LD_INT 1
62931: DOUBLE
62932: EQUAL
62933: IFTRUE 62937
62935: GO 62993
62937: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62938: LD_ADDR_VAR 0 9
62942: PUSH
62943: LD_VAR 0 11
62947: PUSH
62948: LD_VAR 0 12
62952: PUSH
62953: LD_VAR 0 13
62957: PUSH
62958: LD_VAR 0 14
62962: PUSH
62963: LD_VAR 0 15
62967: PUSH
62968: LD_VAR 0 16
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: PUSH
62981: LD_VAR 0 4
62985: PUSH
62986: LD_INT 1
62988: PLUS
62989: ARRAY
62990: ST_TO_ADDR
62991: GO 63122
62993: LD_INT 2
62995: DOUBLE
62996: EQUAL
62997: IFTRUE 63001
62999: GO 63057
63001: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63002: LD_ADDR_VAR 0 9
63006: PUSH
63007: LD_VAR 0 17
63011: PUSH
63012: LD_VAR 0 18
63016: PUSH
63017: LD_VAR 0 19
63021: PUSH
63022: LD_VAR 0 20
63026: PUSH
63027: LD_VAR 0 21
63031: PUSH
63032: LD_VAR 0 22
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: PUSH
63045: LD_VAR 0 4
63049: PUSH
63050: LD_INT 1
63052: PLUS
63053: ARRAY
63054: ST_TO_ADDR
63055: GO 63122
63057: LD_INT 3
63059: DOUBLE
63060: EQUAL
63061: IFTRUE 63065
63063: GO 63121
63065: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63066: LD_ADDR_VAR 0 9
63070: PUSH
63071: LD_VAR 0 23
63075: PUSH
63076: LD_VAR 0 24
63080: PUSH
63081: LD_VAR 0 25
63085: PUSH
63086: LD_VAR 0 26
63090: PUSH
63091: LD_VAR 0 27
63095: PUSH
63096: LD_VAR 0 28
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: PUSH
63109: LD_VAR 0 4
63113: PUSH
63114: LD_INT 1
63116: PLUS
63117: ARRAY
63118: ST_TO_ADDR
63119: GO 63122
63121: POP
63122: GO 63677
63124: LD_INT 2
63126: DOUBLE
63127: EQUAL
63128: IFTRUE 63138
63130: LD_INT 3
63132: DOUBLE
63133: EQUAL
63134: IFTRUE 63138
63136: GO 63194
63138: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63139: LD_ADDR_VAR 0 9
63143: PUSH
63144: LD_VAR 0 29
63148: PUSH
63149: LD_VAR 0 30
63153: PUSH
63154: LD_VAR 0 31
63158: PUSH
63159: LD_VAR 0 32
63163: PUSH
63164: LD_VAR 0 33
63168: PUSH
63169: LD_VAR 0 34
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: PUSH
63182: LD_VAR 0 4
63186: PUSH
63187: LD_INT 1
63189: PLUS
63190: ARRAY
63191: ST_TO_ADDR
63192: GO 63677
63194: LD_INT 16
63196: DOUBLE
63197: EQUAL
63198: IFTRUE 63256
63200: LD_INT 17
63202: DOUBLE
63203: EQUAL
63204: IFTRUE 63256
63206: LD_INT 18
63208: DOUBLE
63209: EQUAL
63210: IFTRUE 63256
63212: LD_INT 19
63214: DOUBLE
63215: EQUAL
63216: IFTRUE 63256
63218: LD_INT 22
63220: DOUBLE
63221: EQUAL
63222: IFTRUE 63256
63224: LD_INT 20
63226: DOUBLE
63227: EQUAL
63228: IFTRUE 63256
63230: LD_INT 21
63232: DOUBLE
63233: EQUAL
63234: IFTRUE 63256
63236: LD_INT 23
63238: DOUBLE
63239: EQUAL
63240: IFTRUE 63256
63242: LD_INT 24
63244: DOUBLE
63245: EQUAL
63246: IFTRUE 63256
63248: LD_INT 25
63250: DOUBLE
63251: EQUAL
63252: IFTRUE 63256
63254: GO 63312
63256: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63257: LD_ADDR_VAR 0 9
63261: PUSH
63262: LD_VAR 0 35
63266: PUSH
63267: LD_VAR 0 36
63271: PUSH
63272: LD_VAR 0 37
63276: PUSH
63277: LD_VAR 0 38
63281: PUSH
63282: LD_VAR 0 39
63286: PUSH
63287: LD_VAR 0 40
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: PUSH
63300: LD_VAR 0 4
63304: PUSH
63305: LD_INT 1
63307: PLUS
63308: ARRAY
63309: ST_TO_ADDR
63310: GO 63677
63312: LD_INT 6
63314: DOUBLE
63315: EQUAL
63316: IFTRUE 63368
63318: LD_INT 7
63320: DOUBLE
63321: EQUAL
63322: IFTRUE 63368
63324: LD_INT 8
63326: DOUBLE
63327: EQUAL
63328: IFTRUE 63368
63330: LD_INT 13
63332: DOUBLE
63333: EQUAL
63334: IFTRUE 63368
63336: LD_INT 12
63338: DOUBLE
63339: EQUAL
63340: IFTRUE 63368
63342: LD_INT 15
63344: DOUBLE
63345: EQUAL
63346: IFTRUE 63368
63348: LD_INT 11
63350: DOUBLE
63351: EQUAL
63352: IFTRUE 63368
63354: LD_INT 14
63356: DOUBLE
63357: EQUAL
63358: IFTRUE 63368
63360: LD_INT 10
63362: DOUBLE
63363: EQUAL
63364: IFTRUE 63368
63366: GO 63424
63368: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63369: LD_ADDR_VAR 0 9
63373: PUSH
63374: LD_VAR 0 41
63378: PUSH
63379: LD_VAR 0 42
63383: PUSH
63384: LD_VAR 0 43
63388: PUSH
63389: LD_VAR 0 44
63393: PUSH
63394: LD_VAR 0 45
63398: PUSH
63399: LD_VAR 0 46
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: PUSH
63412: LD_VAR 0 4
63416: PUSH
63417: LD_INT 1
63419: PLUS
63420: ARRAY
63421: ST_TO_ADDR
63422: GO 63677
63424: LD_INT 36
63426: DOUBLE
63427: EQUAL
63428: IFTRUE 63432
63430: GO 63488
63432: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63433: LD_ADDR_VAR 0 9
63437: PUSH
63438: LD_VAR 0 47
63442: PUSH
63443: LD_VAR 0 48
63447: PUSH
63448: LD_VAR 0 49
63452: PUSH
63453: LD_VAR 0 50
63457: PUSH
63458: LD_VAR 0 51
63462: PUSH
63463: LD_VAR 0 52
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: PUSH
63476: LD_VAR 0 4
63480: PUSH
63481: LD_INT 1
63483: PLUS
63484: ARRAY
63485: ST_TO_ADDR
63486: GO 63677
63488: LD_INT 4
63490: DOUBLE
63491: EQUAL
63492: IFTRUE 63514
63494: LD_INT 5
63496: DOUBLE
63497: EQUAL
63498: IFTRUE 63514
63500: LD_INT 34
63502: DOUBLE
63503: EQUAL
63504: IFTRUE 63514
63506: LD_INT 37
63508: DOUBLE
63509: EQUAL
63510: IFTRUE 63514
63512: GO 63570
63514: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63515: LD_ADDR_VAR 0 9
63519: PUSH
63520: LD_VAR 0 53
63524: PUSH
63525: LD_VAR 0 54
63529: PUSH
63530: LD_VAR 0 55
63534: PUSH
63535: LD_VAR 0 56
63539: PUSH
63540: LD_VAR 0 57
63544: PUSH
63545: LD_VAR 0 58
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: PUSH
63558: LD_VAR 0 4
63562: PUSH
63563: LD_INT 1
63565: PLUS
63566: ARRAY
63567: ST_TO_ADDR
63568: GO 63677
63570: LD_INT 31
63572: DOUBLE
63573: EQUAL
63574: IFTRUE 63620
63576: LD_INT 32
63578: DOUBLE
63579: EQUAL
63580: IFTRUE 63620
63582: LD_INT 33
63584: DOUBLE
63585: EQUAL
63586: IFTRUE 63620
63588: LD_INT 27
63590: DOUBLE
63591: EQUAL
63592: IFTRUE 63620
63594: LD_INT 26
63596: DOUBLE
63597: EQUAL
63598: IFTRUE 63620
63600: LD_INT 28
63602: DOUBLE
63603: EQUAL
63604: IFTRUE 63620
63606: LD_INT 29
63608: DOUBLE
63609: EQUAL
63610: IFTRUE 63620
63612: LD_INT 30
63614: DOUBLE
63615: EQUAL
63616: IFTRUE 63620
63618: GO 63676
63620: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63621: LD_ADDR_VAR 0 9
63625: PUSH
63626: LD_VAR 0 59
63630: PUSH
63631: LD_VAR 0 60
63635: PUSH
63636: LD_VAR 0 61
63640: PUSH
63641: LD_VAR 0 62
63645: PUSH
63646: LD_VAR 0 63
63650: PUSH
63651: LD_VAR 0 64
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: PUSH
63664: LD_VAR 0 4
63668: PUSH
63669: LD_INT 1
63671: PLUS
63672: ARRAY
63673: ST_TO_ADDR
63674: GO 63677
63676: POP
// temp_list2 = [ ] ;
63677: LD_ADDR_VAR 0 10
63681: PUSH
63682: EMPTY
63683: ST_TO_ADDR
// for i in temp_list do
63684: LD_ADDR_VAR 0 8
63688: PUSH
63689: LD_VAR 0 9
63693: PUSH
63694: FOR_IN
63695: IFFALSE 63747
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63697: LD_ADDR_VAR 0 10
63701: PUSH
63702: LD_VAR 0 10
63706: PUSH
63707: LD_VAR 0 8
63711: PUSH
63712: LD_INT 1
63714: ARRAY
63715: PUSH
63716: LD_VAR 0 2
63720: PLUS
63721: PUSH
63722: LD_VAR 0 8
63726: PUSH
63727: LD_INT 2
63729: ARRAY
63730: PUSH
63731: LD_VAR 0 3
63735: PLUS
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: EMPTY
63742: LIST
63743: ADD
63744: ST_TO_ADDR
63745: GO 63694
63747: POP
63748: POP
// result = temp_list2 ;
63749: LD_ADDR_VAR 0 7
63753: PUSH
63754: LD_VAR 0 10
63758: ST_TO_ADDR
// end ;
63759: LD_VAR 0 7
63763: RET
// export function EnemyInRange ( unit , dist ) ; begin
63764: LD_INT 0
63766: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63767: LD_ADDR_VAR 0 3
63771: PUSH
63772: LD_VAR 0 1
63776: PPUSH
63777: CALL_OW 255
63781: PPUSH
63782: LD_VAR 0 1
63786: PPUSH
63787: CALL_OW 250
63791: PPUSH
63792: LD_VAR 0 1
63796: PPUSH
63797: CALL_OW 251
63801: PPUSH
63802: LD_VAR 0 2
63806: PPUSH
63807: CALL 37166 0 4
63811: PUSH
63812: LD_INT 4
63814: ARRAY
63815: ST_TO_ADDR
// end ;
63816: LD_VAR 0 3
63820: RET
// export function PlayerSeeMe ( unit ) ; begin
63821: LD_INT 0
63823: PPUSH
// result := See ( your_side , unit ) ;
63824: LD_ADDR_VAR 0 2
63828: PUSH
63829: LD_OWVAR 2
63833: PPUSH
63834: LD_VAR 0 1
63838: PPUSH
63839: CALL_OW 292
63843: ST_TO_ADDR
// end ;
63844: LD_VAR 0 2
63848: RET
// export function ReverseDir ( unit ) ; begin
63849: LD_INT 0
63851: PPUSH
// if not unit then
63852: LD_VAR 0 1
63856: NOT
63857: IFFALSE 63861
// exit ;
63859: GO 63884
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63861: LD_ADDR_VAR 0 2
63865: PUSH
63866: LD_VAR 0 1
63870: PPUSH
63871: CALL_OW 254
63875: PUSH
63876: LD_INT 3
63878: PLUS
63879: PUSH
63880: LD_INT 6
63882: MOD
63883: ST_TO_ADDR
// end ;
63884: LD_VAR 0 2
63888: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63889: LD_INT 0
63891: PPUSH
63892: PPUSH
63893: PPUSH
63894: PPUSH
63895: PPUSH
63896: PPUSH
// if not unit or not hexes then
63897: LD_VAR 0 1
63901: NOT
63902: PUSH
63903: LD_VAR 0 2
63907: NOT
63908: OR
63909: IFFALSE 63913
// exit ;
63911: GO 64036
// dist := 9999 ;
63913: LD_ADDR_VAR 0 5
63917: PUSH
63918: LD_INT 9999
63920: ST_TO_ADDR
// for i = 1 to hexes do
63921: LD_ADDR_VAR 0 4
63925: PUSH
63926: DOUBLE
63927: LD_INT 1
63929: DEC
63930: ST_TO_ADDR
63931: LD_VAR 0 2
63935: PUSH
63936: FOR_TO
63937: IFFALSE 64024
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63939: LD_ADDR_VAR 0 6
63943: PUSH
63944: LD_VAR 0 1
63948: PPUSH
63949: LD_VAR 0 2
63953: PUSH
63954: LD_VAR 0 4
63958: ARRAY
63959: PUSH
63960: LD_INT 1
63962: ARRAY
63963: PPUSH
63964: LD_VAR 0 2
63968: PUSH
63969: LD_VAR 0 4
63973: ARRAY
63974: PUSH
63975: LD_INT 2
63977: ARRAY
63978: PPUSH
63979: CALL_OW 297
63983: ST_TO_ADDR
// if tdist < dist then
63984: LD_VAR 0 6
63988: PUSH
63989: LD_VAR 0 5
63993: LESS
63994: IFFALSE 64022
// begin hex := hexes [ i ] ;
63996: LD_ADDR_VAR 0 8
64000: PUSH
64001: LD_VAR 0 2
64005: PUSH
64006: LD_VAR 0 4
64010: ARRAY
64011: ST_TO_ADDR
// dist := tdist ;
64012: LD_ADDR_VAR 0 5
64016: PUSH
64017: LD_VAR 0 6
64021: ST_TO_ADDR
// end ; end ;
64022: GO 63936
64024: POP
64025: POP
// result := hex ;
64026: LD_ADDR_VAR 0 3
64030: PUSH
64031: LD_VAR 0 8
64035: ST_TO_ADDR
// end ;
64036: LD_VAR 0 3
64040: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64041: LD_INT 0
64043: PPUSH
64044: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64045: LD_VAR 0 1
64049: NOT
64050: PUSH
64051: LD_VAR 0 1
64055: PUSH
64056: LD_INT 21
64058: PUSH
64059: LD_INT 2
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 23
64068: PUSH
64069: LD_INT 2
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PPUSH
64080: CALL_OW 69
64084: IN
64085: NOT
64086: OR
64087: IFFALSE 64091
// exit ;
64089: GO 64138
// for i = 1 to 3 do
64091: LD_ADDR_VAR 0 3
64095: PUSH
64096: DOUBLE
64097: LD_INT 1
64099: DEC
64100: ST_TO_ADDR
64101: LD_INT 3
64103: PUSH
64104: FOR_TO
64105: IFFALSE 64136
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64107: LD_VAR 0 1
64111: PPUSH
64112: CALL_OW 250
64116: PPUSH
64117: LD_VAR 0 1
64121: PPUSH
64122: CALL_OW 251
64126: PPUSH
64127: LD_INT 1
64129: PPUSH
64130: CALL_OW 453
64134: GO 64104
64136: POP
64137: POP
// end ;
64138: LD_VAR 0 2
64142: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64143: LD_INT 0
64145: PPUSH
64146: PPUSH
64147: PPUSH
64148: PPUSH
64149: PPUSH
64150: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64151: LD_VAR 0 1
64155: NOT
64156: PUSH
64157: LD_VAR 0 2
64161: NOT
64162: OR
64163: PUSH
64164: LD_VAR 0 1
64168: PPUSH
64169: CALL_OW 314
64173: OR
64174: IFFALSE 64178
// exit ;
64176: GO 64619
// x := GetX ( enemy_unit ) ;
64178: LD_ADDR_VAR 0 7
64182: PUSH
64183: LD_VAR 0 2
64187: PPUSH
64188: CALL_OW 250
64192: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64193: LD_ADDR_VAR 0 8
64197: PUSH
64198: LD_VAR 0 2
64202: PPUSH
64203: CALL_OW 251
64207: ST_TO_ADDR
// if not x or not y then
64208: LD_VAR 0 7
64212: NOT
64213: PUSH
64214: LD_VAR 0 8
64218: NOT
64219: OR
64220: IFFALSE 64224
// exit ;
64222: GO 64619
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64224: LD_ADDR_VAR 0 6
64228: PUSH
64229: LD_VAR 0 7
64233: PPUSH
64234: LD_INT 0
64236: PPUSH
64237: LD_INT 4
64239: PPUSH
64240: CALL_OW 272
64244: PUSH
64245: LD_VAR 0 8
64249: PPUSH
64250: LD_INT 0
64252: PPUSH
64253: LD_INT 4
64255: PPUSH
64256: CALL_OW 273
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_VAR 0 7
64269: PPUSH
64270: LD_INT 1
64272: PPUSH
64273: LD_INT 4
64275: PPUSH
64276: CALL_OW 272
64280: PUSH
64281: LD_VAR 0 8
64285: PPUSH
64286: LD_INT 1
64288: PPUSH
64289: LD_INT 4
64291: PPUSH
64292: CALL_OW 273
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_VAR 0 7
64305: PPUSH
64306: LD_INT 2
64308: PPUSH
64309: LD_INT 4
64311: PPUSH
64312: CALL_OW 272
64316: PUSH
64317: LD_VAR 0 8
64321: PPUSH
64322: LD_INT 2
64324: PPUSH
64325: LD_INT 4
64327: PPUSH
64328: CALL_OW 273
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_VAR 0 7
64341: PPUSH
64342: LD_INT 3
64344: PPUSH
64345: LD_INT 4
64347: PPUSH
64348: CALL_OW 272
64352: PUSH
64353: LD_VAR 0 8
64357: PPUSH
64358: LD_INT 3
64360: PPUSH
64361: LD_INT 4
64363: PPUSH
64364: CALL_OW 273
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_VAR 0 7
64377: PPUSH
64378: LD_INT 4
64380: PPUSH
64381: LD_INT 4
64383: PPUSH
64384: CALL_OW 272
64388: PUSH
64389: LD_VAR 0 8
64393: PPUSH
64394: LD_INT 4
64396: PPUSH
64397: LD_INT 4
64399: PPUSH
64400: CALL_OW 273
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_VAR 0 7
64413: PPUSH
64414: LD_INT 5
64416: PPUSH
64417: LD_INT 4
64419: PPUSH
64420: CALL_OW 272
64424: PUSH
64425: LD_VAR 0 8
64429: PPUSH
64430: LD_INT 5
64432: PPUSH
64433: LD_INT 4
64435: PPUSH
64436: CALL_OW 273
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: ST_TO_ADDR
// for i = tmp downto 1 do
64453: LD_ADDR_VAR 0 4
64457: PUSH
64458: DOUBLE
64459: LD_VAR 0 6
64463: INC
64464: ST_TO_ADDR
64465: LD_INT 1
64467: PUSH
64468: FOR_DOWNTO
64469: IFFALSE 64570
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64471: LD_VAR 0 6
64475: PUSH
64476: LD_VAR 0 4
64480: ARRAY
64481: PUSH
64482: LD_INT 1
64484: ARRAY
64485: PPUSH
64486: LD_VAR 0 6
64490: PUSH
64491: LD_VAR 0 4
64495: ARRAY
64496: PUSH
64497: LD_INT 2
64499: ARRAY
64500: PPUSH
64501: CALL_OW 488
64505: NOT
64506: PUSH
64507: LD_VAR 0 6
64511: PUSH
64512: LD_VAR 0 4
64516: ARRAY
64517: PUSH
64518: LD_INT 1
64520: ARRAY
64521: PPUSH
64522: LD_VAR 0 6
64526: PUSH
64527: LD_VAR 0 4
64531: ARRAY
64532: PUSH
64533: LD_INT 2
64535: ARRAY
64536: PPUSH
64537: CALL_OW 428
64541: PUSH
64542: LD_INT 0
64544: NONEQUAL
64545: OR
64546: IFFALSE 64568
// tmp := Delete ( tmp , i ) ;
64548: LD_ADDR_VAR 0 6
64552: PUSH
64553: LD_VAR 0 6
64557: PPUSH
64558: LD_VAR 0 4
64562: PPUSH
64563: CALL_OW 3
64567: ST_TO_ADDR
64568: GO 64468
64570: POP
64571: POP
// j := GetClosestHex ( unit , tmp ) ;
64572: LD_ADDR_VAR 0 5
64576: PUSH
64577: LD_VAR 0 1
64581: PPUSH
64582: LD_VAR 0 6
64586: PPUSH
64587: CALL 63889 0 2
64591: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64592: LD_VAR 0 1
64596: PPUSH
64597: LD_VAR 0 5
64601: PUSH
64602: LD_INT 1
64604: ARRAY
64605: PPUSH
64606: LD_VAR 0 5
64610: PUSH
64611: LD_INT 2
64613: ARRAY
64614: PPUSH
64615: CALL_OW 111
// end ;
64619: LD_VAR 0 3
64623: RET
// export function PrepareApemanSoldier ( ) ; begin
64624: LD_INT 0
64626: PPUSH
// uc_nation := 0 ;
64627: LD_ADDR_OWVAR 21
64631: PUSH
64632: LD_INT 0
64634: ST_TO_ADDR
// hc_sex := sex_male ;
64635: LD_ADDR_OWVAR 27
64639: PUSH
64640: LD_INT 1
64642: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64643: LD_ADDR_OWVAR 28
64647: PUSH
64648: LD_INT 15
64650: ST_TO_ADDR
// hc_gallery :=  ;
64651: LD_ADDR_OWVAR 33
64655: PUSH
64656: LD_STRING 
64658: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64659: LD_ADDR_OWVAR 31
64663: PUSH
64664: LD_INT 0
64666: PPUSH
64667: LD_INT 3
64669: PPUSH
64670: CALL_OW 12
64674: PUSH
64675: LD_INT 0
64677: PPUSH
64678: LD_INT 3
64680: PPUSH
64681: CALL_OW 12
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: ST_TO_ADDR
// end ;
64698: LD_VAR 0 1
64702: RET
// export function PrepareApemanEngineer ( ) ; begin
64703: LD_INT 0
64705: PPUSH
// uc_nation := 0 ;
64706: LD_ADDR_OWVAR 21
64710: PUSH
64711: LD_INT 0
64713: ST_TO_ADDR
// hc_sex := sex_male ;
64714: LD_ADDR_OWVAR 27
64718: PUSH
64719: LD_INT 1
64721: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64722: LD_ADDR_OWVAR 28
64726: PUSH
64727: LD_INT 16
64729: ST_TO_ADDR
// hc_gallery :=  ;
64730: LD_ADDR_OWVAR 33
64734: PUSH
64735: LD_STRING 
64737: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64738: LD_ADDR_OWVAR 31
64742: PUSH
64743: LD_INT 0
64745: PPUSH
64746: LD_INT 3
64748: PPUSH
64749: CALL_OW 12
64753: PUSH
64754: LD_INT 0
64756: PPUSH
64757: LD_INT 3
64759: PPUSH
64760: CALL_OW 12
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: ST_TO_ADDR
// end ;
64777: LD_VAR 0 1
64781: RET
// export function PrepareApeman ( agressivity ) ; begin
64782: LD_INT 0
64784: PPUSH
// uc_side := 0 ;
64785: LD_ADDR_OWVAR 20
64789: PUSH
64790: LD_INT 0
64792: ST_TO_ADDR
// uc_nation := 0 ;
64793: LD_ADDR_OWVAR 21
64797: PUSH
64798: LD_INT 0
64800: ST_TO_ADDR
// hc_sex := sex_male ;
64801: LD_ADDR_OWVAR 27
64805: PUSH
64806: LD_INT 1
64808: ST_TO_ADDR
// hc_class := class_apeman ;
64809: LD_ADDR_OWVAR 28
64813: PUSH
64814: LD_INT 12
64816: ST_TO_ADDR
// hc_gallery :=  ;
64817: LD_ADDR_OWVAR 33
64821: PUSH
64822: LD_STRING 
64824: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64825: LD_ADDR_OWVAR 35
64829: PUSH
64830: LD_VAR 0 1
64834: NEG
64835: PPUSH
64836: LD_VAR 0 1
64840: PPUSH
64841: CALL_OW 12
64845: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64846: LD_ADDR_OWVAR 31
64850: PUSH
64851: LD_INT 0
64853: PPUSH
64854: LD_INT 3
64856: PPUSH
64857: CALL_OW 12
64861: PUSH
64862: LD_INT 0
64864: PPUSH
64865: LD_INT 3
64867: PPUSH
64868: CALL_OW 12
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: ST_TO_ADDR
// end ;
64885: LD_VAR 0 2
64889: RET
// export function PrepareTiger ( agressivity ) ; begin
64890: LD_INT 0
64892: PPUSH
// uc_side := 0 ;
64893: LD_ADDR_OWVAR 20
64897: PUSH
64898: LD_INT 0
64900: ST_TO_ADDR
// uc_nation := 0 ;
64901: LD_ADDR_OWVAR 21
64905: PUSH
64906: LD_INT 0
64908: ST_TO_ADDR
// hc_class := class_tiger ;
64909: LD_ADDR_OWVAR 28
64913: PUSH
64914: LD_INT 14
64916: ST_TO_ADDR
// hc_gallery :=  ;
64917: LD_ADDR_OWVAR 33
64921: PUSH
64922: LD_STRING 
64924: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64925: LD_ADDR_OWVAR 35
64929: PUSH
64930: LD_VAR 0 1
64934: NEG
64935: PPUSH
64936: LD_VAR 0 1
64940: PPUSH
64941: CALL_OW 12
64945: ST_TO_ADDR
// end ;
64946: LD_VAR 0 2
64950: RET
// export function PrepareEnchidna ( ) ; begin
64951: LD_INT 0
64953: PPUSH
// uc_side := 0 ;
64954: LD_ADDR_OWVAR 20
64958: PUSH
64959: LD_INT 0
64961: ST_TO_ADDR
// uc_nation := 0 ;
64962: LD_ADDR_OWVAR 21
64966: PUSH
64967: LD_INT 0
64969: ST_TO_ADDR
// hc_class := class_baggie ;
64970: LD_ADDR_OWVAR 28
64974: PUSH
64975: LD_INT 13
64977: ST_TO_ADDR
// hc_gallery :=  ;
64978: LD_ADDR_OWVAR 33
64982: PUSH
64983: LD_STRING 
64985: ST_TO_ADDR
// end ;
64986: LD_VAR 0 1
64990: RET
// export function PrepareFrog ( ) ; begin
64991: LD_INT 0
64993: PPUSH
// uc_side := 0 ;
64994: LD_ADDR_OWVAR 20
64998: PUSH
64999: LD_INT 0
65001: ST_TO_ADDR
// uc_nation := 0 ;
65002: LD_ADDR_OWVAR 21
65006: PUSH
65007: LD_INT 0
65009: ST_TO_ADDR
// hc_class := class_frog ;
65010: LD_ADDR_OWVAR 28
65014: PUSH
65015: LD_INT 19
65017: ST_TO_ADDR
// hc_gallery :=  ;
65018: LD_ADDR_OWVAR 33
65022: PUSH
65023: LD_STRING 
65025: ST_TO_ADDR
// end ;
65026: LD_VAR 0 1
65030: RET
// export function PrepareFish ( ) ; begin
65031: LD_INT 0
65033: PPUSH
// uc_side := 0 ;
65034: LD_ADDR_OWVAR 20
65038: PUSH
65039: LD_INT 0
65041: ST_TO_ADDR
// uc_nation := 0 ;
65042: LD_ADDR_OWVAR 21
65046: PUSH
65047: LD_INT 0
65049: ST_TO_ADDR
// hc_class := class_fish ;
65050: LD_ADDR_OWVAR 28
65054: PUSH
65055: LD_INT 20
65057: ST_TO_ADDR
// hc_gallery :=  ;
65058: LD_ADDR_OWVAR 33
65062: PUSH
65063: LD_STRING 
65065: ST_TO_ADDR
// end ;
65066: LD_VAR 0 1
65070: RET
// export function PrepareBird ( ) ; begin
65071: LD_INT 0
65073: PPUSH
// uc_side := 0 ;
65074: LD_ADDR_OWVAR 20
65078: PUSH
65079: LD_INT 0
65081: ST_TO_ADDR
// uc_nation := 0 ;
65082: LD_ADDR_OWVAR 21
65086: PUSH
65087: LD_INT 0
65089: ST_TO_ADDR
// hc_class := class_phororhacos ;
65090: LD_ADDR_OWVAR 28
65094: PUSH
65095: LD_INT 18
65097: ST_TO_ADDR
// hc_gallery :=  ;
65098: LD_ADDR_OWVAR 33
65102: PUSH
65103: LD_STRING 
65105: ST_TO_ADDR
// end ;
65106: LD_VAR 0 1
65110: RET
// export function PrepareHorse ( ) ; begin
65111: LD_INT 0
65113: PPUSH
// uc_side := 0 ;
65114: LD_ADDR_OWVAR 20
65118: PUSH
65119: LD_INT 0
65121: ST_TO_ADDR
// uc_nation := 0 ;
65122: LD_ADDR_OWVAR 21
65126: PUSH
65127: LD_INT 0
65129: ST_TO_ADDR
// hc_class := class_horse ;
65130: LD_ADDR_OWVAR 28
65134: PUSH
65135: LD_INT 21
65137: ST_TO_ADDR
// hc_gallery :=  ;
65138: LD_ADDR_OWVAR 33
65142: PUSH
65143: LD_STRING 
65145: ST_TO_ADDR
// end ;
65146: LD_VAR 0 1
65150: RET
// export function PrepareMastodont ( ) ; begin
65151: LD_INT 0
65153: PPUSH
// uc_side := 0 ;
65154: LD_ADDR_OWVAR 20
65158: PUSH
65159: LD_INT 0
65161: ST_TO_ADDR
// uc_nation := 0 ;
65162: LD_ADDR_OWVAR 21
65166: PUSH
65167: LD_INT 0
65169: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65170: LD_ADDR_OWVAR 37
65174: PUSH
65175: LD_INT 31
65177: ST_TO_ADDR
// vc_control := control_rider ;
65178: LD_ADDR_OWVAR 38
65182: PUSH
65183: LD_INT 4
65185: ST_TO_ADDR
// end ;
65186: LD_VAR 0 1
65190: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65191: LD_INT 0
65193: PPUSH
65194: PPUSH
65195: PPUSH
// uc_side = 0 ;
65196: LD_ADDR_OWVAR 20
65200: PUSH
65201: LD_INT 0
65203: ST_TO_ADDR
// uc_nation = 0 ;
65204: LD_ADDR_OWVAR 21
65208: PUSH
65209: LD_INT 0
65211: ST_TO_ADDR
// InitHc_All ( ) ;
65212: CALL_OW 584
// InitVc ;
65216: CALL_OW 20
// if mastodonts then
65220: LD_VAR 0 6
65224: IFFALSE 65291
// for i = 1 to mastodonts do
65226: LD_ADDR_VAR 0 11
65230: PUSH
65231: DOUBLE
65232: LD_INT 1
65234: DEC
65235: ST_TO_ADDR
65236: LD_VAR 0 6
65240: PUSH
65241: FOR_TO
65242: IFFALSE 65289
// begin vc_chassis := 31 ;
65244: LD_ADDR_OWVAR 37
65248: PUSH
65249: LD_INT 31
65251: ST_TO_ADDR
// vc_control := control_rider ;
65252: LD_ADDR_OWVAR 38
65256: PUSH
65257: LD_INT 4
65259: ST_TO_ADDR
// animal := CreateVehicle ;
65260: LD_ADDR_VAR 0 12
65264: PUSH
65265: CALL_OW 45
65269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65270: LD_VAR 0 12
65274: PPUSH
65275: LD_VAR 0 8
65279: PPUSH
65280: LD_INT 0
65282: PPUSH
65283: CALL 67426 0 3
// end ;
65287: GO 65241
65289: POP
65290: POP
// if horses then
65291: LD_VAR 0 5
65295: IFFALSE 65362
// for i = 1 to horses do
65297: LD_ADDR_VAR 0 11
65301: PUSH
65302: DOUBLE
65303: LD_INT 1
65305: DEC
65306: ST_TO_ADDR
65307: LD_VAR 0 5
65311: PUSH
65312: FOR_TO
65313: IFFALSE 65360
// begin hc_class := 21 ;
65315: LD_ADDR_OWVAR 28
65319: PUSH
65320: LD_INT 21
65322: ST_TO_ADDR
// hc_gallery :=  ;
65323: LD_ADDR_OWVAR 33
65327: PUSH
65328: LD_STRING 
65330: ST_TO_ADDR
// animal := CreateHuman ;
65331: LD_ADDR_VAR 0 12
65335: PUSH
65336: CALL_OW 44
65340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65341: LD_VAR 0 12
65345: PPUSH
65346: LD_VAR 0 8
65350: PPUSH
65351: LD_INT 0
65353: PPUSH
65354: CALL 67426 0 3
// end ;
65358: GO 65312
65360: POP
65361: POP
// if birds then
65362: LD_VAR 0 1
65366: IFFALSE 65433
// for i = 1 to birds do
65368: LD_ADDR_VAR 0 11
65372: PUSH
65373: DOUBLE
65374: LD_INT 1
65376: DEC
65377: ST_TO_ADDR
65378: LD_VAR 0 1
65382: PUSH
65383: FOR_TO
65384: IFFALSE 65431
// begin hc_class = 18 ;
65386: LD_ADDR_OWVAR 28
65390: PUSH
65391: LD_INT 18
65393: ST_TO_ADDR
// hc_gallery =  ;
65394: LD_ADDR_OWVAR 33
65398: PUSH
65399: LD_STRING 
65401: ST_TO_ADDR
// animal := CreateHuman ;
65402: LD_ADDR_VAR 0 12
65406: PUSH
65407: CALL_OW 44
65411: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65412: LD_VAR 0 12
65416: PPUSH
65417: LD_VAR 0 8
65421: PPUSH
65422: LD_INT 0
65424: PPUSH
65425: CALL 67426 0 3
// end ;
65429: GO 65383
65431: POP
65432: POP
// if tigers then
65433: LD_VAR 0 2
65437: IFFALSE 65521
// for i = 1 to tigers do
65439: LD_ADDR_VAR 0 11
65443: PUSH
65444: DOUBLE
65445: LD_INT 1
65447: DEC
65448: ST_TO_ADDR
65449: LD_VAR 0 2
65453: PUSH
65454: FOR_TO
65455: IFFALSE 65519
// begin hc_class = class_tiger ;
65457: LD_ADDR_OWVAR 28
65461: PUSH
65462: LD_INT 14
65464: ST_TO_ADDR
// hc_gallery =  ;
65465: LD_ADDR_OWVAR 33
65469: PUSH
65470: LD_STRING 
65472: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65473: LD_ADDR_OWVAR 35
65477: PUSH
65478: LD_INT 7
65480: NEG
65481: PPUSH
65482: LD_INT 7
65484: PPUSH
65485: CALL_OW 12
65489: ST_TO_ADDR
// animal := CreateHuman ;
65490: LD_ADDR_VAR 0 12
65494: PUSH
65495: CALL_OW 44
65499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65500: LD_VAR 0 12
65504: PPUSH
65505: LD_VAR 0 8
65509: PPUSH
65510: LD_INT 0
65512: PPUSH
65513: CALL 67426 0 3
// end ;
65517: GO 65454
65519: POP
65520: POP
// if apemans then
65521: LD_VAR 0 3
65525: IFFALSE 65648
// for i = 1 to apemans do
65527: LD_ADDR_VAR 0 11
65531: PUSH
65532: DOUBLE
65533: LD_INT 1
65535: DEC
65536: ST_TO_ADDR
65537: LD_VAR 0 3
65541: PUSH
65542: FOR_TO
65543: IFFALSE 65646
// begin hc_class = class_apeman ;
65545: LD_ADDR_OWVAR 28
65549: PUSH
65550: LD_INT 12
65552: ST_TO_ADDR
// hc_gallery =  ;
65553: LD_ADDR_OWVAR 33
65557: PUSH
65558: LD_STRING 
65560: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65561: LD_ADDR_OWVAR 35
65565: PUSH
65566: LD_INT 2
65568: NEG
65569: PPUSH
65570: LD_INT 2
65572: PPUSH
65573: CALL_OW 12
65577: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65578: LD_ADDR_OWVAR 31
65582: PUSH
65583: LD_INT 1
65585: PPUSH
65586: LD_INT 3
65588: PPUSH
65589: CALL_OW 12
65593: PUSH
65594: LD_INT 1
65596: PPUSH
65597: LD_INT 3
65599: PPUSH
65600: CALL_OW 12
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: ST_TO_ADDR
// animal := CreateHuman ;
65617: LD_ADDR_VAR 0 12
65621: PUSH
65622: CALL_OW 44
65626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65627: LD_VAR 0 12
65631: PPUSH
65632: LD_VAR 0 8
65636: PPUSH
65637: LD_INT 0
65639: PPUSH
65640: CALL 67426 0 3
// end ;
65644: GO 65542
65646: POP
65647: POP
// if enchidnas then
65648: LD_VAR 0 4
65652: IFFALSE 65719
// for i = 1 to enchidnas do
65654: LD_ADDR_VAR 0 11
65658: PUSH
65659: DOUBLE
65660: LD_INT 1
65662: DEC
65663: ST_TO_ADDR
65664: LD_VAR 0 4
65668: PUSH
65669: FOR_TO
65670: IFFALSE 65717
// begin hc_class = 13 ;
65672: LD_ADDR_OWVAR 28
65676: PUSH
65677: LD_INT 13
65679: ST_TO_ADDR
// hc_gallery =  ;
65680: LD_ADDR_OWVAR 33
65684: PUSH
65685: LD_STRING 
65687: ST_TO_ADDR
// animal := CreateHuman ;
65688: LD_ADDR_VAR 0 12
65692: PUSH
65693: CALL_OW 44
65697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65698: LD_VAR 0 12
65702: PPUSH
65703: LD_VAR 0 8
65707: PPUSH
65708: LD_INT 0
65710: PPUSH
65711: CALL 67426 0 3
// end ;
65715: GO 65669
65717: POP
65718: POP
// if fishes then
65719: LD_VAR 0 7
65723: IFFALSE 65790
// for i = 1 to fishes do
65725: LD_ADDR_VAR 0 11
65729: PUSH
65730: DOUBLE
65731: LD_INT 1
65733: DEC
65734: ST_TO_ADDR
65735: LD_VAR 0 7
65739: PUSH
65740: FOR_TO
65741: IFFALSE 65788
// begin hc_class = 20 ;
65743: LD_ADDR_OWVAR 28
65747: PUSH
65748: LD_INT 20
65750: ST_TO_ADDR
// hc_gallery =  ;
65751: LD_ADDR_OWVAR 33
65755: PUSH
65756: LD_STRING 
65758: ST_TO_ADDR
// animal := CreateHuman ;
65759: LD_ADDR_VAR 0 12
65763: PUSH
65764: CALL_OW 44
65768: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65769: LD_VAR 0 12
65773: PPUSH
65774: LD_VAR 0 9
65778: PPUSH
65779: LD_INT 0
65781: PPUSH
65782: CALL 67426 0 3
// end ;
65786: GO 65740
65788: POP
65789: POP
// end ;
65790: LD_VAR 0 10
65794: RET
// export function WantHeal ( sci , unit ) ; begin
65795: LD_INT 0
65797: PPUSH
// if GetTaskList ( sci ) > 0 then
65798: LD_VAR 0 1
65802: PPUSH
65803: CALL_OW 437
65807: PUSH
65808: LD_INT 0
65810: GREATER
65811: IFFALSE 65881
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65813: LD_VAR 0 1
65817: PPUSH
65818: CALL_OW 437
65822: PUSH
65823: LD_INT 1
65825: ARRAY
65826: PUSH
65827: LD_INT 1
65829: ARRAY
65830: PUSH
65831: LD_STRING l
65833: EQUAL
65834: PUSH
65835: LD_VAR 0 1
65839: PPUSH
65840: CALL_OW 437
65844: PUSH
65845: LD_INT 1
65847: ARRAY
65848: PUSH
65849: LD_INT 4
65851: ARRAY
65852: PUSH
65853: LD_VAR 0 2
65857: EQUAL
65858: AND
65859: IFFALSE 65871
// result := true else
65861: LD_ADDR_VAR 0 3
65865: PUSH
65866: LD_INT 1
65868: ST_TO_ADDR
65869: GO 65879
// result := false ;
65871: LD_ADDR_VAR 0 3
65875: PUSH
65876: LD_INT 0
65878: ST_TO_ADDR
// end else
65879: GO 65889
// result := false ;
65881: LD_ADDR_VAR 0 3
65885: PUSH
65886: LD_INT 0
65888: ST_TO_ADDR
// end ;
65889: LD_VAR 0 3
65893: RET
// export function HealTarget ( sci ) ; begin
65894: LD_INT 0
65896: PPUSH
// if not sci then
65897: LD_VAR 0 1
65901: NOT
65902: IFFALSE 65906
// exit ;
65904: GO 65971
// result := 0 ;
65906: LD_ADDR_VAR 0 2
65910: PUSH
65911: LD_INT 0
65913: ST_TO_ADDR
// if GetTaskList ( sci ) then
65914: LD_VAR 0 1
65918: PPUSH
65919: CALL_OW 437
65923: IFFALSE 65971
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65925: LD_VAR 0 1
65929: PPUSH
65930: CALL_OW 437
65934: PUSH
65935: LD_INT 1
65937: ARRAY
65938: PUSH
65939: LD_INT 1
65941: ARRAY
65942: PUSH
65943: LD_STRING l
65945: EQUAL
65946: IFFALSE 65971
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65948: LD_ADDR_VAR 0 2
65952: PUSH
65953: LD_VAR 0 1
65957: PPUSH
65958: CALL_OW 437
65962: PUSH
65963: LD_INT 1
65965: ARRAY
65966: PUSH
65967: LD_INT 4
65969: ARRAY
65970: ST_TO_ADDR
// end ;
65971: LD_VAR 0 2
65975: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65976: LD_INT 0
65978: PPUSH
65979: PPUSH
65980: PPUSH
65981: PPUSH
// if not base_units then
65982: LD_VAR 0 1
65986: NOT
65987: IFFALSE 65991
// exit ;
65989: GO 66078
// result := false ;
65991: LD_ADDR_VAR 0 2
65995: PUSH
65996: LD_INT 0
65998: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65999: LD_ADDR_VAR 0 5
66003: PUSH
66004: LD_VAR 0 1
66008: PPUSH
66009: LD_INT 21
66011: PUSH
66012: LD_INT 3
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PPUSH
66019: CALL_OW 72
66023: ST_TO_ADDR
// if not tmp then
66024: LD_VAR 0 5
66028: NOT
66029: IFFALSE 66033
// exit ;
66031: GO 66078
// for i in tmp do
66033: LD_ADDR_VAR 0 3
66037: PUSH
66038: LD_VAR 0 5
66042: PUSH
66043: FOR_IN
66044: IFFALSE 66076
// begin result := EnemyInRange ( i , 22 ) ;
66046: LD_ADDR_VAR 0 2
66050: PUSH
66051: LD_VAR 0 3
66055: PPUSH
66056: LD_INT 22
66058: PPUSH
66059: CALL 63764 0 2
66063: ST_TO_ADDR
// if result then
66064: LD_VAR 0 2
66068: IFFALSE 66074
// exit ;
66070: POP
66071: POP
66072: GO 66078
// end ;
66074: GO 66043
66076: POP
66077: POP
// end ;
66078: LD_VAR 0 2
66082: RET
// export function FilterByTag ( units , tag ) ; begin
66083: LD_INT 0
66085: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66086: LD_ADDR_VAR 0 3
66090: PUSH
66091: LD_VAR 0 1
66095: PPUSH
66096: LD_INT 120
66098: PUSH
66099: LD_VAR 0 2
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PPUSH
66108: CALL_OW 72
66112: ST_TO_ADDR
// end ;
66113: LD_VAR 0 3
66117: RET
// export function IsDriver ( un ) ; begin
66118: LD_INT 0
66120: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66121: LD_ADDR_VAR 0 2
66125: PUSH
66126: LD_VAR 0 1
66130: PUSH
66131: LD_INT 55
66133: PUSH
66134: EMPTY
66135: LIST
66136: PPUSH
66137: CALL_OW 69
66141: IN
66142: ST_TO_ADDR
// end ;
66143: LD_VAR 0 2
66147: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66148: LD_INT 0
66150: PPUSH
66151: PPUSH
// list := [ ] ;
66152: LD_ADDR_VAR 0 5
66156: PUSH
66157: EMPTY
66158: ST_TO_ADDR
// case d of 0 :
66159: LD_VAR 0 3
66163: PUSH
66164: LD_INT 0
66166: DOUBLE
66167: EQUAL
66168: IFTRUE 66172
66170: GO 66305
66172: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66173: LD_ADDR_VAR 0 5
66177: PUSH
66178: LD_VAR 0 1
66182: PUSH
66183: LD_INT 4
66185: MINUS
66186: PUSH
66187: LD_VAR 0 2
66191: PUSH
66192: LD_INT 4
66194: MINUS
66195: PUSH
66196: LD_INT 2
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: LIST
66203: PUSH
66204: LD_VAR 0 1
66208: PUSH
66209: LD_INT 3
66211: MINUS
66212: PUSH
66213: LD_VAR 0 2
66217: PUSH
66218: LD_INT 1
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: LIST
66225: PUSH
66226: LD_VAR 0 1
66230: PUSH
66231: LD_INT 4
66233: PLUS
66234: PUSH
66235: LD_VAR 0 2
66239: PUSH
66240: LD_INT 4
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: LIST
66247: PUSH
66248: LD_VAR 0 1
66252: PUSH
66253: LD_INT 3
66255: PLUS
66256: PUSH
66257: LD_VAR 0 2
66261: PUSH
66262: LD_INT 3
66264: PLUS
66265: PUSH
66266: LD_INT 5
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: LIST
66273: PUSH
66274: LD_VAR 0 1
66278: PUSH
66279: LD_VAR 0 2
66283: PUSH
66284: LD_INT 4
66286: PLUS
66287: PUSH
66288: LD_INT 0
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: LIST
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: ST_TO_ADDR
// end ; 1 :
66303: GO 67003
66305: LD_INT 1
66307: DOUBLE
66308: EQUAL
66309: IFTRUE 66313
66311: GO 66446
66313: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66314: LD_ADDR_VAR 0 5
66318: PUSH
66319: LD_VAR 0 1
66323: PUSH
66324: LD_VAR 0 2
66328: PUSH
66329: LD_INT 4
66331: MINUS
66332: PUSH
66333: LD_INT 3
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: LIST
66340: PUSH
66341: LD_VAR 0 1
66345: PUSH
66346: LD_INT 3
66348: MINUS
66349: PUSH
66350: LD_VAR 0 2
66354: PUSH
66355: LD_INT 3
66357: MINUS
66358: PUSH
66359: LD_INT 2
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: PUSH
66367: LD_VAR 0 1
66371: PUSH
66372: LD_INT 4
66374: MINUS
66375: PUSH
66376: LD_VAR 0 2
66380: PUSH
66381: LD_INT 1
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: PUSH
66389: LD_VAR 0 1
66393: PUSH
66394: LD_VAR 0 2
66398: PUSH
66399: LD_INT 3
66401: PLUS
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: LIST
66410: PUSH
66411: LD_VAR 0 1
66415: PUSH
66416: LD_INT 4
66418: PLUS
66419: PUSH
66420: LD_VAR 0 2
66424: PUSH
66425: LD_INT 4
66427: PLUS
66428: PUSH
66429: LD_INT 5
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: LIST
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: ST_TO_ADDR
// end ; 2 :
66444: GO 67003
66446: LD_INT 2
66448: DOUBLE
66449: EQUAL
66450: IFTRUE 66454
66452: GO 66583
66454: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66455: LD_ADDR_VAR 0 5
66459: PUSH
66460: LD_VAR 0 1
66464: PUSH
66465: LD_VAR 0 2
66469: PUSH
66470: LD_INT 3
66472: MINUS
66473: PUSH
66474: LD_INT 3
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: LIST
66481: PUSH
66482: LD_VAR 0 1
66486: PUSH
66487: LD_INT 4
66489: PLUS
66490: PUSH
66491: LD_VAR 0 2
66495: PUSH
66496: LD_INT 4
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: LIST
66503: PUSH
66504: LD_VAR 0 1
66508: PUSH
66509: LD_VAR 0 2
66513: PUSH
66514: LD_INT 4
66516: PLUS
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: LIST
66525: PUSH
66526: LD_VAR 0 1
66530: PUSH
66531: LD_INT 3
66533: MINUS
66534: PUSH
66535: LD_VAR 0 2
66539: PUSH
66540: LD_INT 1
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: PUSH
66548: LD_VAR 0 1
66552: PUSH
66553: LD_INT 4
66555: MINUS
66556: PUSH
66557: LD_VAR 0 2
66561: PUSH
66562: LD_INT 4
66564: MINUS
66565: PUSH
66566: LD_INT 2
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: LIST
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: ST_TO_ADDR
// end ; 3 :
66581: GO 67003
66583: LD_INT 3
66585: DOUBLE
66586: EQUAL
66587: IFTRUE 66591
66589: GO 66724
66591: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66592: LD_ADDR_VAR 0 5
66596: PUSH
66597: LD_VAR 0 1
66601: PUSH
66602: LD_INT 3
66604: PLUS
66605: PUSH
66606: LD_VAR 0 2
66610: PUSH
66611: LD_INT 4
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: LIST
66618: PUSH
66619: LD_VAR 0 1
66623: PUSH
66624: LD_INT 4
66626: PLUS
66627: PUSH
66628: LD_VAR 0 2
66632: PUSH
66633: LD_INT 4
66635: PLUS
66636: PUSH
66637: LD_INT 5
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: LIST
66644: PUSH
66645: LD_VAR 0 1
66649: PUSH
66650: LD_INT 4
66652: MINUS
66653: PUSH
66654: LD_VAR 0 2
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: LIST
66666: PUSH
66667: LD_VAR 0 1
66671: PUSH
66672: LD_VAR 0 2
66676: PUSH
66677: LD_INT 4
66679: MINUS
66680: PUSH
66681: LD_INT 3
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: LIST
66688: PUSH
66689: LD_VAR 0 1
66693: PUSH
66694: LD_INT 3
66696: MINUS
66697: PUSH
66698: LD_VAR 0 2
66702: PUSH
66703: LD_INT 3
66705: MINUS
66706: PUSH
66707: LD_INT 2
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: LIST
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: ST_TO_ADDR
// end ; 4 :
66722: GO 67003
66724: LD_INT 4
66726: DOUBLE
66727: EQUAL
66728: IFTRUE 66732
66730: GO 66865
66732: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66733: LD_ADDR_VAR 0 5
66737: PUSH
66738: LD_VAR 0 1
66742: PUSH
66743: LD_VAR 0 2
66747: PUSH
66748: LD_INT 4
66750: PLUS
66751: PUSH
66752: LD_INT 0
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: LIST
66759: PUSH
66760: LD_VAR 0 1
66764: PUSH
66765: LD_INT 3
66767: PLUS
66768: PUSH
66769: LD_VAR 0 2
66773: PUSH
66774: LD_INT 3
66776: PLUS
66777: PUSH
66778: LD_INT 5
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: LIST
66785: PUSH
66786: LD_VAR 0 1
66790: PUSH
66791: LD_INT 4
66793: PLUS
66794: PUSH
66795: LD_VAR 0 2
66799: PUSH
66800: LD_INT 4
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: LIST
66807: PUSH
66808: LD_VAR 0 1
66812: PUSH
66813: LD_VAR 0 2
66817: PUSH
66818: LD_INT 3
66820: MINUS
66821: PUSH
66822: LD_INT 3
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: LIST
66829: PUSH
66830: LD_VAR 0 1
66834: PUSH
66835: LD_INT 4
66837: MINUS
66838: PUSH
66839: LD_VAR 0 2
66843: PUSH
66844: LD_INT 4
66846: MINUS
66847: PUSH
66848: LD_INT 2
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: LIST
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: ST_TO_ADDR
// end ; 5 :
66863: GO 67003
66865: LD_INT 5
66867: DOUBLE
66868: EQUAL
66869: IFTRUE 66873
66871: GO 67002
66873: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66874: LD_ADDR_VAR 0 5
66878: PUSH
66879: LD_VAR 0 1
66883: PUSH
66884: LD_INT 4
66886: MINUS
66887: PUSH
66888: LD_VAR 0 2
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: LIST
66900: PUSH
66901: LD_VAR 0 1
66905: PUSH
66906: LD_VAR 0 2
66910: PUSH
66911: LD_INT 4
66913: MINUS
66914: PUSH
66915: LD_INT 3
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: LIST
66922: PUSH
66923: LD_VAR 0 1
66927: PUSH
66928: LD_INT 4
66930: PLUS
66931: PUSH
66932: LD_VAR 0 2
66936: PUSH
66937: LD_INT 4
66939: PLUS
66940: PUSH
66941: LD_INT 5
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: LIST
66948: PUSH
66949: LD_VAR 0 1
66953: PUSH
66954: LD_INT 3
66956: PLUS
66957: PUSH
66958: LD_VAR 0 2
66962: PUSH
66963: LD_INT 4
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: LIST
66970: PUSH
66971: LD_VAR 0 1
66975: PUSH
66976: LD_VAR 0 2
66980: PUSH
66981: LD_INT 3
66983: PLUS
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: LIST
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: ST_TO_ADDR
// end ; end ;
67000: GO 67003
67002: POP
// result := list ;
67003: LD_ADDR_VAR 0 4
67007: PUSH
67008: LD_VAR 0 5
67012: ST_TO_ADDR
// end ;
67013: LD_VAR 0 4
67017: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67018: LD_INT 0
67020: PPUSH
67021: PPUSH
67022: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67023: LD_VAR 0 1
67027: NOT
67028: PUSH
67029: LD_VAR 0 2
67033: PUSH
67034: LD_INT 1
67036: PUSH
67037: LD_INT 2
67039: PUSH
67040: LD_INT 3
67042: PUSH
67043: LD_INT 4
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: IN
67052: NOT
67053: OR
67054: IFFALSE 67058
// exit ;
67056: GO 67150
// tmp := [ ] ;
67058: LD_ADDR_VAR 0 5
67062: PUSH
67063: EMPTY
67064: ST_TO_ADDR
// for i in units do
67065: LD_ADDR_VAR 0 4
67069: PUSH
67070: LD_VAR 0 1
67074: PUSH
67075: FOR_IN
67076: IFFALSE 67119
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67078: LD_ADDR_VAR 0 5
67082: PUSH
67083: LD_VAR 0 5
67087: PPUSH
67088: LD_VAR 0 5
67092: PUSH
67093: LD_INT 1
67095: PLUS
67096: PPUSH
67097: LD_VAR 0 4
67101: PPUSH
67102: LD_VAR 0 2
67106: PPUSH
67107: CALL_OW 259
67111: PPUSH
67112: CALL_OW 2
67116: ST_TO_ADDR
67117: GO 67075
67119: POP
67120: POP
// if not tmp then
67121: LD_VAR 0 5
67125: NOT
67126: IFFALSE 67130
// exit ;
67128: GO 67150
// result := SortListByListDesc ( units , tmp ) ;
67130: LD_ADDR_VAR 0 3
67134: PUSH
67135: LD_VAR 0 1
67139: PPUSH
67140: LD_VAR 0 5
67144: PPUSH
67145: CALL_OW 77
67149: ST_TO_ADDR
// end ;
67150: LD_VAR 0 3
67154: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67155: LD_INT 0
67157: PPUSH
67158: PPUSH
67159: PPUSH
// result := false ;
67160: LD_ADDR_VAR 0 3
67164: PUSH
67165: LD_INT 0
67167: ST_TO_ADDR
// x := GetX ( building ) ;
67168: LD_ADDR_VAR 0 4
67172: PUSH
67173: LD_VAR 0 2
67177: PPUSH
67178: CALL_OW 250
67182: ST_TO_ADDR
// y := GetY ( building ) ;
67183: LD_ADDR_VAR 0 5
67187: PUSH
67188: LD_VAR 0 2
67192: PPUSH
67193: CALL_OW 251
67197: ST_TO_ADDR
// if not building or not x or not y then
67198: LD_VAR 0 2
67202: NOT
67203: PUSH
67204: LD_VAR 0 4
67208: NOT
67209: OR
67210: PUSH
67211: LD_VAR 0 5
67215: NOT
67216: OR
67217: IFFALSE 67221
// exit ;
67219: GO 67313
// if GetTaskList ( unit ) then
67221: LD_VAR 0 1
67225: PPUSH
67226: CALL_OW 437
67230: IFFALSE 67313
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67232: LD_STRING e
67234: PUSH
67235: LD_VAR 0 1
67239: PPUSH
67240: CALL_OW 437
67244: PUSH
67245: LD_INT 1
67247: ARRAY
67248: PUSH
67249: LD_INT 1
67251: ARRAY
67252: EQUAL
67253: PUSH
67254: LD_VAR 0 4
67258: PUSH
67259: LD_VAR 0 1
67263: PPUSH
67264: CALL_OW 437
67268: PUSH
67269: LD_INT 1
67271: ARRAY
67272: PUSH
67273: LD_INT 2
67275: ARRAY
67276: EQUAL
67277: AND
67278: PUSH
67279: LD_VAR 0 5
67283: PUSH
67284: LD_VAR 0 1
67288: PPUSH
67289: CALL_OW 437
67293: PUSH
67294: LD_INT 1
67296: ARRAY
67297: PUSH
67298: LD_INT 3
67300: ARRAY
67301: EQUAL
67302: AND
67303: IFFALSE 67313
// result := true end ;
67305: LD_ADDR_VAR 0 3
67309: PUSH
67310: LD_INT 1
67312: ST_TO_ADDR
// end ;
67313: LD_VAR 0 3
67317: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67318: LD_INT 0
67320: PPUSH
// result := false ;
67321: LD_ADDR_VAR 0 4
67325: PUSH
67326: LD_INT 0
67328: ST_TO_ADDR
// if GetTaskList ( unit ) then
67329: LD_VAR 0 1
67333: PPUSH
67334: CALL_OW 437
67338: IFFALSE 67421
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67340: LD_STRING M
67342: PUSH
67343: LD_VAR 0 1
67347: PPUSH
67348: CALL_OW 437
67352: PUSH
67353: LD_INT 1
67355: ARRAY
67356: PUSH
67357: LD_INT 1
67359: ARRAY
67360: EQUAL
67361: PUSH
67362: LD_VAR 0 2
67366: PUSH
67367: LD_VAR 0 1
67371: PPUSH
67372: CALL_OW 437
67376: PUSH
67377: LD_INT 1
67379: ARRAY
67380: PUSH
67381: LD_INT 2
67383: ARRAY
67384: EQUAL
67385: AND
67386: PUSH
67387: LD_VAR 0 3
67391: PUSH
67392: LD_VAR 0 1
67396: PPUSH
67397: CALL_OW 437
67401: PUSH
67402: LD_INT 1
67404: ARRAY
67405: PUSH
67406: LD_INT 3
67408: ARRAY
67409: EQUAL
67410: AND
67411: IFFALSE 67421
// result := true ;
67413: LD_ADDR_VAR 0 4
67417: PUSH
67418: LD_INT 1
67420: ST_TO_ADDR
// end ; end ;
67421: LD_VAR 0 4
67425: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67426: LD_INT 0
67428: PPUSH
67429: PPUSH
67430: PPUSH
67431: PPUSH
// if not unit or not area then
67432: LD_VAR 0 1
67436: NOT
67437: PUSH
67438: LD_VAR 0 2
67442: NOT
67443: OR
67444: IFFALSE 67448
// exit ;
67446: GO 67612
// tmp := AreaToList ( area , i ) ;
67448: LD_ADDR_VAR 0 6
67452: PUSH
67453: LD_VAR 0 2
67457: PPUSH
67458: LD_VAR 0 5
67462: PPUSH
67463: CALL_OW 517
67467: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67468: LD_ADDR_VAR 0 5
67472: PUSH
67473: DOUBLE
67474: LD_INT 1
67476: DEC
67477: ST_TO_ADDR
67478: LD_VAR 0 6
67482: PUSH
67483: LD_INT 1
67485: ARRAY
67486: PUSH
67487: FOR_TO
67488: IFFALSE 67610
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67490: LD_ADDR_VAR 0 7
67494: PUSH
67495: LD_VAR 0 6
67499: PUSH
67500: LD_INT 1
67502: ARRAY
67503: PUSH
67504: LD_VAR 0 5
67508: ARRAY
67509: PUSH
67510: LD_VAR 0 6
67514: PUSH
67515: LD_INT 2
67517: ARRAY
67518: PUSH
67519: LD_VAR 0 5
67523: ARRAY
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67529: LD_VAR 0 7
67533: PUSH
67534: LD_INT 1
67536: ARRAY
67537: PPUSH
67538: LD_VAR 0 7
67542: PUSH
67543: LD_INT 2
67545: ARRAY
67546: PPUSH
67547: CALL_OW 428
67551: PUSH
67552: LD_INT 0
67554: EQUAL
67555: IFFALSE 67608
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67557: LD_VAR 0 1
67561: PPUSH
67562: LD_VAR 0 7
67566: PUSH
67567: LD_INT 1
67569: ARRAY
67570: PPUSH
67571: LD_VAR 0 7
67575: PUSH
67576: LD_INT 2
67578: ARRAY
67579: PPUSH
67580: LD_VAR 0 3
67584: PPUSH
67585: CALL_OW 48
// result := IsPlaced ( unit ) ;
67589: LD_ADDR_VAR 0 4
67593: PUSH
67594: LD_VAR 0 1
67598: PPUSH
67599: CALL_OW 305
67603: ST_TO_ADDR
// exit ;
67604: POP
67605: POP
67606: GO 67612
// end ; end ;
67608: GO 67487
67610: POP
67611: POP
// end ;
67612: LD_VAR 0 4
67616: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67617: LD_INT 0
67619: PPUSH
67620: PPUSH
67621: PPUSH
// if not side or side > 8 then
67622: LD_VAR 0 1
67626: NOT
67627: PUSH
67628: LD_VAR 0 1
67632: PUSH
67633: LD_INT 8
67635: GREATER
67636: OR
67637: IFFALSE 67641
// exit ;
67639: GO 67828
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67641: LD_ADDR_VAR 0 4
67645: PUSH
67646: LD_INT 22
67648: PUSH
67649: LD_VAR 0 1
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 21
67660: PUSH
67661: LD_INT 3
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PPUSH
67672: CALL_OW 69
67676: ST_TO_ADDR
// if not tmp then
67677: LD_VAR 0 4
67681: NOT
67682: IFFALSE 67686
// exit ;
67684: GO 67828
// enable_addtolog := true ;
67686: LD_ADDR_OWVAR 81
67690: PUSH
67691: LD_INT 1
67693: ST_TO_ADDR
// AddToLog ( [ ) ;
67694: LD_STRING [
67696: PPUSH
67697: CALL_OW 561
// for i in tmp do
67701: LD_ADDR_VAR 0 3
67705: PUSH
67706: LD_VAR 0 4
67710: PUSH
67711: FOR_IN
67712: IFFALSE 67819
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67714: LD_STRING [
67716: PUSH
67717: LD_VAR 0 3
67721: PPUSH
67722: CALL_OW 266
67726: STR
67727: PUSH
67728: LD_STRING , 
67730: STR
67731: PUSH
67732: LD_VAR 0 3
67736: PPUSH
67737: CALL_OW 250
67741: STR
67742: PUSH
67743: LD_STRING , 
67745: STR
67746: PUSH
67747: LD_VAR 0 3
67751: PPUSH
67752: CALL_OW 251
67756: STR
67757: PUSH
67758: LD_STRING , 
67760: STR
67761: PUSH
67762: LD_VAR 0 3
67766: PPUSH
67767: CALL_OW 254
67771: STR
67772: PUSH
67773: LD_STRING , 
67775: STR
67776: PUSH
67777: LD_VAR 0 3
67781: PPUSH
67782: LD_INT 1
67784: PPUSH
67785: CALL_OW 268
67789: STR
67790: PUSH
67791: LD_STRING , 
67793: STR
67794: PUSH
67795: LD_VAR 0 3
67799: PPUSH
67800: LD_INT 2
67802: PPUSH
67803: CALL_OW 268
67807: STR
67808: PUSH
67809: LD_STRING ],
67811: STR
67812: PPUSH
67813: CALL_OW 561
// end ;
67817: GO 67711
67819: POP
67820: POP
// AddToLog ( ]; ) ;
67821: LD_STRING ];
67823: PPUSH
67824: CALL_OW 561
// end ;
67828: LD_VAR 0 2
67832: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67833: LD_INT 0
67835: PPUSH
67836: PPUSH
67837: PPUSH
67838: PPUSH
67839: PPUSH
// if not area or not rate or not max then
67840: LD_VAR 0 1
67844: NOT
67845: PUSH
67846: LD_VAR 0 2
67850: NOT
67851: OR
67852: PUSH
67853: LD_VAR 0 4
67857: NOT
67858: OR
67859: IFFALSE 67863
// exit ;
67861: GO 68052
// while 1 do
67863: LD_INT 1
67865: IFFALSE 68052
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67867: LD_ADDR_VAR 0 9
67871: PUSH
67872: LD_VAR 0 1
67876: PPUSH
67877: LD_INT 1
67879: PPUSH
67880: CALL_OW 287
67884: PUSH
67885: LD_INT 10
67887: MUL
67888: ST_TO_ADDR
// r := rate / 10 ;
67889: LD_ADDR_VAR 0 7
67893: PUSH
67894: LD_VAR 0 2
67898: PUSH
67899: LD_INT 10
67901: DIVREAL
67902: ST_TO_ADDR
// time := 1 1$00 ;
67903: LD_ADDR_VAR 0 8
67907: PUSH
67908: LD_INT 2100
67910: ST_TO_ADDR
// if amount < min then
67911: LD_VAR 0 9
67915: PUSH
67916: LD_VAR 0 3
67920: LESS
67921: IFFALSE 67939
// r := r * 2 else
67923: LD_ADDR_VAR 0 7
67927: PUSH
67928: LD_VAR 0 7
67932: PUSH
67933: LD_INT 2
67935: MUL
67936: ST_TO_ADDR
67937: GO 67965
// if amount > max then
67939: LD_VAR 0 9
67943: PUSH
67944: LD_VAR 0 4
67948: GREATER
67949: IFFALSE 67965
// r := r / 2 ;
67951: LD_ADDR_VAR 0 7
67955: PUSH
67956: LD_VAR 0 7
67960: PUSH
67961: LD_INT 2
67963: DIVREAL
67964: ST_TO_ADDR
// time := time / r ;
67965: LD_ADDR_VAR 0 8
67969: PUSH
67970: LD_VAR 0 8
67974: PUSH
67975: LD_VAR 0 7
67979: DIVREAL
67980: ST_TO_ADDR
// if time < 0 then
67981: LD_VAR 0 8
67985: PUSH
67986: LD_INT 0
67988: LESS
67989: IFFALSE 68006
// time := time * - 1 ;
67991: LD_ADDR_VAR 0 8
67995: PUSH
67996: LD_VAR 0 8
68000: PUSH
68001: LD_INT 1
68003: NEG
68004: MUL
68005: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68006: LD_VAR 0 8
68010: PUSH
68011: LD_INT 35
68013: PPUSH
68014: LD_INT 875
68016: PPUSH
68017: CALL_OW 12
68021: PLUS
68022: PPUSH
68023: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68027: LD_INT 1
68029: PPUSH
68030: LD_INT 5
68032: PPUSH
68033: CALL_OW 12
68037: PPUSH
68038: LD_VAR 0 1
68042: PPUSH
68043: LD_INT 1
68045: PPUSH
68046: CALL_OW 55
// end ;
68050: GO 67863
// end ;
68052: LD_VAR 0 5
68056: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68057: LD_INT 0
68059: PPUSH
68060: PPUSH
68061: PPUSH
68062: PPUSH
68063: PPUSH
68064: PPUSH
68065: PPUSH
68066: PPUSH
// if not turrets or not factories then
68067: LD_VAR 0 1
68071: NOT
68072: PUSH
68073: LD_VAR 0 2
68077: NOT
68078: OR
68079: IFFALSE 68083
// exit ;
68081: GO 68390
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68083: LD_ADDR_VAR 0 10
68087: PUSH
68088: LD_INT 5
68090: PUSH
68091: LD_INT 6
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 2
68100: PUSH
68101: LD_INT 4
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 3
68110: PUSH
68111: LD_INT 5
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 24
68125: PUSH
68126: LD_INT 25
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 23
68135: PUSH
68136: LD_INT 27
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 42
68149: PUSH
68150: LD_INT 43
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 44
68159: PUSH
68160: LD_INT 46
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 45
68169: PUSH
68170: LD_INT 47
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: LIST
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: LIST
68186: ST_TO_ADDR
// result := [ ] ;
68187: LD_ADDR_VAR 0 3
68191: PUSH
68192: EMPTY
68193: ST_TO_ADDR
// for i in turrets do
68194: LD_ADDR_VAR 0 4
68198: PUSH
68199: LD_VAR 0 1
68203: PUSH
68204: FOR_IN
68205: IFFALSE 68388
// begin nat := GetNation ( i ) ;
68207: LD_ADDR_VAR 0 7
68211: PUSH
68212: LD_VAR 0 4
68216: PPUSH
68217: CALL_OW 248
68221: ST_TO_ADDR
// weapon := 0 ;
68222: LD_ADDR_VAR 0 8
68226: PUSH
68227: LD_INT 0
68229: ST_TO_ADDR
// if not nat then
68230: LD_VAR 0 7
68234: NOT
68235: IFFALSE 68239
// continue ;
68237: GO 68204
// for j in list [ nat ] do
68239: LD_ADDR_VAR 0 5
68243: PUSH
68244: LD_VAR 0 10
68248: PUSH
68249: LD_VAR 0 7
68253: ARRAY
68254: PUSH
68255: FOR_IN
68256: IFFALSE 68297
// if GetBWeapon ( i ) = j [ 1 ] then
68258: LD_VAR 0 4
68262: PPUSH
68263: CALL_OW 269
68267: PUSH
68268: LD_VAR 0 5
68272: PUSH
68273: LD_INT 1
68275: ARRAY
68276: EQUAL
68277: IFFALSE 68295
// begin weapon := j [ 2 ] ;
68279: LD_ADDR_VAR 0 8
68283: PUSH
68284: LD_VAR 0 5
68288: PUSH
68289: LD_INT 2
68291: ARRAY
68292: ST_TO_ADDR
// break ;
68293: GO 68297
// end ;
68295: GO 68255
68297: POP
68298: POP
// if not weapon then
68299: LD_VAR 0 8
68303: NOT
68304: IFFALSE 68308
// continue ;
68306: GO 68204
// for k in factories do
68308: LD_ADDR_VAR 0 6
68312: PUSH
68313: LD_VAR 0 2
68317: PUSH
68318: FOR_IN
68319: IFFALSE 68384
// begin weapons := AvailableWeaponList ( k ) ;
68321: LD_ADDR_VAR 0 9
68325: PUSH
68326: LD_VAR 0 6
68330: PPUSH
68331: CALL_OW 478
68335: ST_TO_ADDR
// if not weapons then
68336: LD_VAR 0 9
68340: NOT
68341: IFFALSE 68345
// continue ;
68343: GO 68318
// if weapon in weapons then
68345: LD_VAR 0 8
68349: PUSH
68350: LD_VAR 0 9
68354: IN
68355: IFFALSE 68382
// begin result := [ i , weapon ] ;
68357: LD_ADDR_VAR 0 3
68361: PUSH
68362: LD_VAR 0 4
68366: PUSH
68367: LD_VAR 0 8
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: ST_TO_ADDR
// exit ;
68376: POP
68377: POP
68378: POP
68379: POP
68380: GO 68390
// end ; end ;
68382: GO 68318
68384: POP
68385: POP
// end ;
68386: GO 68204
68388: POP
68389: POP
// end ;
68390: LD_VAR 0 3
68394: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68395: LD_INT 0
68397: PPUSH
// if not side or side > 8 then
68398: LD_VAR 0 3
68402: NOT
68403: PUSH
68404: LD_VAR 0 3
68408: PUSH
68409: LD_INT 8
68411: GREATER
68412: OR
68413: IFFALSE 68417
// exit ;
68415: GO 68476
// if not range then
68417: LD_VAR 0 4
68421: NOT
68422: IFFALSE 68433
// range := - 12 ;
68424: LD_ADDR_VAR 0 4
68428: PUSH
68429: LD_INT 12
68431: NEG
68432: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68433: LD_VAR 0 1
68437: PPUSH
68438: LD_VAR 0 2
68442: PPUSH
68443: LD_VAR 0 3
68447: PPUSH
68448: LD_VAR 0 4
68452: PPUSH
68453: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68457: LD_VAR 0 1
68461: PPUSH
68462: LD_VAR 0 2
68466: PPUSH
68467: LD_VAR 0 3
68471: PPUSH
68472: CALL_OW 331
// end ;
68476: LD_VAR 0 5
68480: RET
// export function Video ( mode ) ; begin
68481: LD_INT 0
68483: PPUSH
// ingame_video = mode ;
68484: LD_ADDR_OWVAR 52
68488: PUSH
68489: LD_VAR 0 1
68493: ST_TO_ADDR
// interface_hidden = mode ;
68494: LD_ADDR_OWVAR 54
68498: PUSH
68499: LD_VAR 0 1
68503: ST_TO_ADDR
// end ;
68504: LD_VAR 0 2
68508: RET
// export function Join ( array , element ) ; begin
68509: LD_INT 0
68511: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68512: LD_ADDR_VAR 0 3
68516: PUSH
68517: LD_VAR 0 1
68521: PPUSH
68522: LD_VAR 0 1
68526: PUSH
68527: LD_INT 1
68529: PLUS
68530: PPUSH
68531: LD_VAR 0 2
68535: PPUSH
68536: CALL_OW 1
68540: ST_TO_ADDR
// end ;
68541: LD_VAR 0 3
68545: RET
// export function JoinUnion ( array , element ) ; begin
68546: LD_INT 0
68548: PPUSH
// result := array union element ;
68549: LD_ADDR_VAR 0 3
68553: PUSH
68554: LD_VAR 0 1
68558: PUSH
68559: LD_VAR 0 2
68563: UNION
68564: ST_TO_ADDR
// end ;
68565: LD_VAR 0 3
68569: RET
// export function GetBehemoths ( side ) ; begin
68570: LD_INT 0
68572: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68573: LD_ADDR_VAR 0 2
68577: PUSH
68578: LD_INT 22
68580: PUSH
68581: LD_VAR 0 1
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 31
68592: PUSH
68593: LD_INT 25
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PPUSH
68604: CALL_OW 69
68608: ST_TO_ADDR
// end ;
68609: LD_VAR 0 2
68613: RET
// export function Shuffle ( array ) ; var i , index ; begin
68614: LD_INT 0
68616: PPUSH
68617: PPUSH
68618: PPUSH
// result := [ ] ;
68619: LD_ADDR_VAR 0 2
68623: PUSH
68624: EMPTY
68625: ST_TO_ADDR
// if not array then
68626: LD_VAR 0 1
68630: NOT
68631: IFFALSE 68635
// exit ;
68633: GO 68734
// Randomize ;
68635: CALL_OW 10
// for i = array downto 1 do
68639: LD_ADDR_VAR 0 3
68643: PUSH
68644: DOUBLE
68645: LD_VAR 0 1
68649: INC
68650: ST_TO_ADDR
68651: LD_INT 1
68653: PUSH
68654: FOR_DOWNTO
68655: IFFALSE 68732
// begin index := rand ( 1 , array ) ;
68657: LD_ADDR_VAR 0 4
68661: PUSH
68662: LD_INT 1
68664: PPUSH
68665: LD_VAR 0 1
68669: PPUSH
68670: CALL_OW 12
68674: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68675: LD_ADDR_VAR 0 2
68679: PUSH
68680: LD_VAR 0 2
68684: PPUSH
68685: LD_VAR 0 2
68689: PUSH
68690: LD_INT 1
68692: PLUS
68693: PPUSH
68694: LD_VAR 0 1
68698: PUSH
68699: LD_VAR 0 4
68703: ARRAY
68704: PPUSH
68705: CALL_OW 2
68709: ST_TO_ADDR
// array := Delete ( array , index ) ;
68710: LD_ADDR_VAR 0 1
68714: PUSH
68715: LD_VAR 0 1
68719: PPUSH
68720: LD_VAR 0 4
68724: PPUSH
68725: CALL_OW 3
68729: ST_TO_ADDR
// end ;
68730: GO 68654
68732: POP
68733: POP
// end ;
68734: LD_VAR 0 2
68738: RET
// export function GetBaseMaterials ( base ) ; begin
68739: LD_INT 0
68741: PPUSH
// result := [ 0 , 0 , 0 ] ;
68742: LD_ADDR_VAR 0 2
68746: PUSH
68747: LD_INT 0
68749: PUSH
68750: LD_INT 0
68752: PUSH
68753: LD_INT 0
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: LIST
68760: ST_TO_ADDR
// if not base then
68761: LD_VAR 0 1
68765: NOT
68766: IFFALSE 68770
// exit ;
68768: GO 68819
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68770: LD_ADDR_VAR 0 2
68774: PUSH
68775: LD_VAR 0 1
68779: PPUSH
68780: LD_INT 1
68782: PPUSH
68783: CALL_OW 275
68787: PUSH
68788: LD_VAR 0 1
68792: PPUSH
68793: LD_INT 2
68795: PPUSH
68796: CALL_OW 275
68800: PUSH
68801: LD_VAR 0 1
68805: PPUSH
68806: LD_INT 3
68808: PPUSH
68809: CALL_OW 275
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: LIST
68818: ST_TO_ADDR
// end ;
68819: LD_VAR 0 2
68823: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68824: LD_INT 0
68826: PPUSH
68827: PPUSH
// result := array ;
68828: LD_ADDR_VAR 0 3
68832: PUSH
68833: LD_VAR 0 1
68837: ST_TO_ADDR
// if size >= result then
68838: LD_VAR 0 2
68842: PUSH
68843: LD_VAR 0 3
68847: GREATEREQUAL
68848: IFFALSE 68852
// exit ;
68850: GO 68902
// if size then
68852: LD_VAR 0 2
68856: IFFALSE 68902
// for i := array downto size do
68858: LD_ADDR_VAR 0 4
68862: PUSH
68863: DOUBLE
68864: LD_VAR 0 1
68868: INC
68869: ST_TO_ADDR
68870: LD_VAR 0 2
68874: PUSH
68875: FOR_DOWNTO
68876: IFFALSE 68900
// result := Delete ( result , result ) ;
68878: LD_ADDR_VAR 0 3
68882: PUSH
68883: LD_VAR 0 3
68887: PPUSH
68888: LD_VAR 0 3
68892: PPUSH
68893: CALL_OW 3
68897: ST_TO_ADDR
68898: GO 68875
68900: POP
68901: POP
// end ;
68902: LD_VAR 0 3
68906: RET
// export function ComExit ( unit ) ; var tmp ; begin
68907: LD_INT 0
68909: PPUSH
68910: PPUSH
// if not IsInUnit ( unit ) then
68911: LD_VAR 0 1
68915: PPUSH
68916: CALL_OW 310
68920: NOT
68921: IFFALSE 68925
// exit ;
68923: GO 68985
// tmp := IsInUnit ( unit ) ;
68925: LD_ADDR_VAR 0 3
68929: PUSH
68930: LD_VAR 0 1
68934: PPUSH
68935: CALL_OW 310
68939: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68940: LD_VAR 0 3
68944: PPUSH
68945: CALL_OW 247
68949: PUSH
68950: LD_INT 2
68952: EQUAL
68953: IFFALSE 68966
// ComExitVehicle ( unit ) else
68955: LD_VAR 0 1
68959: PPUSH
68960: CALL_OW 121
68964: GO 68975
// ComExitBuilding ( unit ) ;
68966: LD_VAR 0 1
68970: PPUSH
68971: CALL_OW 122
// result := tmp ;
68975: LD_ADDR_VAR 0 2
68979: PUSH
68980: LD_VAR 0 3
68984: ST_TO_ADDR
// end ;
68985: LD_VAR 0 2
68989: RET
// export function ComExitAll ( units ) ; var i ; begin
68990: LD_INT 0
68992: PPUSH
68993: PPUSH
// if not units then
68994: LD_VAR 0 1
68998: NOT
68999: IFFALSE 69003
// exit ;
69001: GO 69029
// for i in units do
69003: LD_ADDR_VAR 0 3
69007: PUSH
69008: LD_VAR 0 1
69012: PUSH
69013: FOR_IN
69014: IFFALSE 69027
// ComExit ( i ) ;
69016: LD_VAR 0 3
69020: PPUSH
69021: CALL 68907 0 1
69025: GO 69013
69027: POP
69028: POP
// end ;
69029: LD_VAR 0 2
69033: RET
// export function ResetHc ; begin
69034: LD_INT 0
69036: PPUSH
// InitHc ;
69037: CALL_OW 19
// hc_importance := 0 ;
69041: LD_ADDR_OWVAR 32
69045: PUSH
69046: LD_INT 0
69048: ST_TO_ADDR
// end ;
69049: LD_VAR 0 1
69053: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69054: LD_INT 0
69056: PPUSH
69057: PPUSH
69058: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69059: LD_ADDR_VAR 0 6
69063: PUSH
69064: LD_VAR 0 1
69068: PUSH
69069: LD_VAR 0 3
69073: PLUS
69074: PUSH
69075: LD_INT 2
69077: DIV
69078: ST_TO_ADDR
// if _x < 0 then
69079: LD_VAR 0 6
69083: PUSH
69084: LD_INT 0
69086: LESS
69087: IFFALSE 69104
// _x := _x * - 1 ;
69089: LD_ADDR_VAR 0 6
69093: PUSH
69094: LD_VAR 0 6
69098: PUSH
69099: LD_INT 1
69101: NEG
69102: MUL
69103: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69104: LD_ADDR_VAR 0 7
69108: PUSH
69109: LD_VAR 0 2
69113: PUSH
69114: LD_VAR 0 4
69118: PLUS
69119: PUSH
69120: LD_INT 2
69122: DIV
69123: ST_TO_ADDR
// if _y < 0 then
69124: LD_VAR 0 7
69128: PUSH
69129: LD_INT 0
69131: LESS
69132: IFFALSE 69149
// _y := _y * - 1 ;
69134: LD_ADDR_VAR 0 7
69138: PUSH
69139: LD_VAR 0 7
69143: PUSH
69144: LD_INT 1
69146: NEG
69147: MUL
69148: ST_TO_ADDR
// result := [ _x , _y ] ;
69149: LD_ADDR_VAR 0 5
69153: PUSH
69154: LD_VAR 0 6
69158: PUSH
69159: LD_VAR 0 7
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: ST_TO_ADDR
// end ;
69168: LD_VAR 0 5
69172: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69173: LD_INT 0
69175: PPUSH
69176: PPUSH
69177: PPUSH
69178: PPUSH
// task := GetTaskList ( unit ) ;
69179: LD_ADDR_VAR 0 7
69183: PUSH
69184: LD_VAR 0 1
69188: PPUSH
69189: CALL_OW 437
69193: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69194: LD_VAR 0 7
69198: NOT
69199: PUSH
69200: LD_VAR 0 1
69204: PPUSH
69205: LD_VAR 0 2
69209: PPUSH
69210: CALL_OW 308
69214: NOT
69215: AND
69216: IFFALSE 69220
// exit ;
69218: GO 69338
// if IsInArea ( unit , area ) then
69220: LD_VAR 0 1
69224: PPUSH
69225: LD_VAR 0 2
69229: PPUSH
69230: CALL_OW 308
69234: IFFALSE 69252
// begin ComMoveToArea ( unit , goAway ) ;
69236: LD_VAR 0 1
69240: PPUSH
69241: LD_VAR 0 3
69245: PPUSH
69246: CALL_OW 113
// exit ;
69250: GO 69338
// end ; if task [ 1 ] [ 1 ] <> M then
69252: LD_VAR 0 7
69256: PUSH
69257: LD_INT 1
69259: ARRAY
69260: PUSH
69261: LD_INT 1
69263: ARRAY
69264: PUSH
69265: LD_STRING M
69267: NONEQUAL
69268: IFFALSE 69272
// exit ;
69270: GO 69338
// x := task [ 1 ] [ 2 ] ;
69272: LD_ADDR_VAR 0 5
69276: PUSH
69277: LD_VAR 0 7
69281: PUSH
69282: LD_INT 1
69284: ARRAY
69285: PUSH
69286: LD_INT 2
69288: ARRAY
69289: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69290: LD_ADDR_VAR 0 6
69294: PUSH
69295: LD_VAR 0 7
69299: PUSH
69300: LD_INT 1
69302: ARRAY
69303: PUSH
69304: LD_INT 3
69306: ARRAY
69307: ST_TO_ADDR
// if InArea ( x , y , area ) then
69308: LD_VAR 0 5
69312: PPUSH
69313: LD_VAR 0 6
69317: PPUSH
69318: LD_VAR 0 2
69322: PPUSH
69323: CALL_OW 309
69327: IFFALSE 69338
// ComStop ( unit ) ;
69329: LD_VAR 0 1
69333: PPUSH
69334: CALL_OW 141
// end ;
69338: LD_VAR 0 4
69342: RET
// export function Abs ( value ) ; begin
69343: LD_INT 0
69345: PPUSH
// result := value ;
69346: LD_ADDR_VAR 0 2
69350: PUSH
69351: LD_VAR 0 1
69355: ST_TO_ADDR
// if value < 0 then
69356: LD_VAR 0 1
69360: PUSH
69361: LD_INT 0
69363: LESS
69364: IFFALSE 69381
// result := value * - 1 ;
69366: LD_ADDR_VAR 0 2
69370: PUSH
69371: LD_VAR 0 1
69375: PUSH
69376: LD_INT 1
69378: NEG
69379: MUL
69380: ST_TO_ADDR
// end ;
69381: LD_VAR 0 2
69385: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69386: LD_INT 0
69388: PPUSH
69389: PPUSH
69390: PPUSH
69391: PPUSH
69392: PPUSH
69393: PPUSH
69394: PPUSH
69395: PPUSH
// if not unit or not building then
69396: LD_VAR 0 1
69400: NOT
69401: PUSH
69402: LD_VAR 0 2
69406: NOT
69407: OR
69408: IFFALSE 69412
// exit ;
69410: GO 69638
// x := GetX ( building ) ;
69412: LD_ADDR_VAR 0 4
69416: PUSH
69417: LD_VAR 0 2
69421: PPUSH
69422: CALL_OW 250
69426: ST_TO_ADDR
// y := GetY ( building ) ;
69427: LD_ADDR_VAR 0 6
69431: PUSH
69432: LD_VAR 0 2
69436: PPUSH
69437: CALL_OW 251
69441: ST_TO_ADDR
// d := GetDir ( building ) ;
69442: LD_ADDR_VAR 0 8
69446: PUSH
69447: LD_VAR 0 2
69451: PPUSH
69452: CALL_OW 254
69456: ST_TO_ADDR
// r := 4 ;
69457: LD_ADDR_VAR 0 9
69461: PUSH
69462: LD_INT 4
69464: ST_TO_ADDR
// for i := 1 to 5 do
69465: LD_ADDR_VAR 0 10
69469: PUSH
69470: DOUBLE
69471: LD_INT 1
69473: DEC
69474: ST_TO_ADDR
69475: LD_INT 5
69477: PUSH
69478: FOR_TO
69479: IFFALSE 69636
// begin _x := ShiftX ( x , d , r + i ) ;
69481: LD_ADDR_VAR 0 5
69485: PUSH
69486: LD_VAR 0 4
69490: PPUSH
69491: LD_VAR 0 8
69495: PPUSH
69496: LD_VAR 0 9
69500: PUSH
69501: LD_VAR 0 10
69505: PLUS
69506: PPUSH
69507: CALL_OW 272
69511: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69512: LD_ADDR_VAR 0 7
69516: PUSH
69517: LD_VAR 0 6
69521: PPUSH
69522: LD_VAR 0 8
69526: PPUSH
69527: LD_VAR 0 9
69531: PUSH
69532: LD_VAR 0 10
69536: PLUS
69537: PPUSH
69538: CALL_OW 273
69542: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69543: LD_VAR 0 5
69547: PPUSH
69548: LD_VAR 0 7
69552: PPUSH
69553: CALL_OW 488
69557: PUSH
69558: LD_VAR 0 5
69562: PPUSH
69563: LD_VAR 0 7
69567: PPUSH
69568: CALL_OW 428
69572: PPUSH
69573: CALL_OW 247
69577: PUSH
69578: LD_INT 3
69580: PUSH
69581: LD_INT 2
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: IN
69588: NOT
69589: AND
69590: IFFALSE 69634
// begin ComMoveXY ( unit , _x , _y ) ;
69592: LD_VAR 0 1
69596: PPUSH
69597: LD_VAR 0 5
69601: PPUSH
69602: LD_VAR 0 7
69606: PPUSH
69607: CALL_OW 111
// result := [ _x , _y ] ;
69611: LD_ADDR_VAR 0 3
69615: PUSH
69616: LD_VAR 0 5
69620: PUSH
69621: LD_VAR 0 7
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: ST_TO_ADDR
// exit ;
69630: POP
69631: POP
69632: GO 69638
// end ; end ;
69634: GO 69478
69636: POP
69637: POP
// end ;
69638: LD_VAR 0 3
69642: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69643: LD_INT 0
69645: PPUSH
69646: PPUSH
69647: PPUSH
// result := 0 ;
69648: LD_ADDR_VAR 0 3
69652: PUSH
69653: LD_INT 0
69655: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69656: LD_VAR 0 1
69660: PUSH
69661: LD_INT 0
69663: LESS
69664: PUSH
69665: LD_VAR 0 1
69669: PUSH
69670: LD_INT 8
69672: GREATER
69673: OR
69674: PUSH
69675: LD_VAR 0 2
69679: PUSH
69680: LD_INT 0
69682: LESS
69683: OR
69684: PUSH
69685: LD_VAR 0 2
69689: PUSH
69690: LD_INT 8
69692: GREATER
69693: OR
69694: IFFALSE 69698
// exit ;
69696: GO 69773
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69698: LD_ADDR_VAR 0 4
69702: PUSH
69703: LD_INT 22
69705: PUSH
69706: LD_VAR 0 2
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PPUSH
69715: CALL_OW 69
69719: PUSH
69720: FOR_IN
69721: IFFALSE 69771
// begin un := UnitShoot ( i ) ;
69723: LD_ADDR_VAR 0 5
69727: PUSH
69728: LD_VAR 0 4
69732: PPUSH
69733: CALL_OW 504
69737: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69738: LD_VAR 0 5
69742: PPUSH
69743: CALL_OW 255
69747: PUSH
69748: LD_VAR 0 1
69752: EQUAL
69753: IFFALSE 69769
// begin result := un ;
69755: LD_ADDR_VAR 0 3
69759: PUSH
69760: LD_VAR 0 5
69764: ST_TO_ADDR
// exit ;
69765: POP
69766: POP
69767: GO 69773
// end ; end ;
69769: GO 69720
69771: POP
69772: POP
// end ;
69773: LD_VAR 0 3
69777: RET
// export function GetCargoBay ( units ) ; begin
69778: LD_INT 0
69780: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69781: LD_ADDR_VAR 0 2
69785: PUSH
69786: LD_VAR 0 1
69790: PPUSH
69791: LD_INT 2
69793: PUSH
69794: LD_INT 34
69796: PUSH
69797: LD_INT 12
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: LD_INT 34
69806: PUSH
69807: LD_INT 51
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 34
69816: PUSH
69817: LD_INT 32
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 34
69826: PUSH
69827: LD_INT 89
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: PPUSH
69841: CALL_OW 72
69845: ST_TO_ADDR
// end ;
69846: LD_VAR 0 2
69850: RET
// export function Negate ( value ) ; begin
69851: LD_INT 0
69853: PPUSH
// result := not value ;
69854: LD_ADDR_VAR 0 2
69858: PUSH
69859: LD_VAR 0 1
69863: NOT
69864: ST_TO_ADDR
// end ;
69865: LD_VAR 0 2
69869: RET
// export function Inc ( value ) ; begin
69870: LD_INT 0
69872: PPUSH
// result := value + 1 ;
69873: LD_ADDR_VAR 0 2
69877: PUSH
69878: LD_VAR 0 1
69882: PUSH
69883: LD_INT 1
69885: PLUS
69886: ST_TO_ADDR
// end ;
69887: LD_VAR 0 2
69891: RET
// export function Dec ( value ) ; begin
69892: LD_INT 0
69894: PPUSH
// result := value - 1 ;
69895: LD_ADDR_VAR 0 2
69899: PUSH
69900: LD_VAR 0 1
69904: PUSH
69905: LD_INT 1
69907: MINUS
69908: ST_TO_ADDR
// end ;
69909: LD_VAR 0 2
69913: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69914: LD_INT 0
69916: PPUSH
69917: PPUSH
69918: PPUSH
69919: PPUSH
69920: PPUSH
69921: PPUSH
69922: PPUSH
69923: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69924: LD_VAR 0 1
69928: PPUSH
69929: LD_VAR 0 2
69933: PPUSH
69934: CALL_OW 488
69938: NOT
69939: PUSH
69940: LD_VAR 0 3
69944: PPUSH
69945: LD_VAR 0 4
69949: PPUSH
69950: CALL_OW 488
69954: NOT
69955: OR
69956: IFFALSE 69969
// begin result := - 1 ;
69958: LD_ADDR_VAR 0 5
69962: PUSH
69963: LD_INT 1
69965: NEG
69966: ST_TO_ADDR
// exit ;
69967: GO 70204
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69969: LD_ADDR_VAR 0 12
69973: PUSH
69974: LD_VAR 0 1
69978: PPUSH
69979: LD_VAR 0 2
69983: PPUSH
69984: LD_VAR 0 3
69988: PPUSH
69989: LD_VAR 0 4
69993: PPUSH
69994: CALL 69054 0 4
69998: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69999: LD_ADDR_VAR 0 11
70003: PUSH
70004: LD_VAR 0 1
70008: PPUSH
70009: LD_VAR 0 2
70013: PPUSH
70014: LD_VAR 0 12
70018: PUSH
70019: LD_INT 1
70021: ARRAY
70022: PPUSH
70023: LD_VAR 0 12
70027: PUSH
70028: LD_INT 2
70030: ARRAY
70031: PPUSH
70032: CALL_OW 298
70036: ST_TO_ADDR
// distance := 9999 ;
70037: LD_ADDR_VAR 0 10
70041: PUSH
70042: LD_INT 9999
70044: ST_TO_ADDR
// for i := 0 to 5 do
70045: LD_ADDR_VAR 0 6
70049: PUSH
70050: DOUBLE
70051: LD_INT 0
70053: DEC
70054: ST_TO_ADDR
70055: LD_INT 5
70057: PUSH
70058: FOR_TO
70059: IFFALSE 70202
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70061: LD_ADDR_VAR 0 7
70065: PUSH
70066: LD_VAR 0 1
70070: PPUSH
70071: LD_VAR 0 6
70075: PPUSH
70076: LD_VAR 0 11
70080: PPUSH
70081: CALL_OW 272
70085: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70086: LD_ADDR_VAR 0 8
70090: PUSH
70091: LD_VAR 0 2
70095: PPUSH
70096: LD_VAR 0 6
70100: PPUSH
70101: LD_VAR 0 11
70105: PPUSH
70106: CALL_OW 273
70110: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70111: LD_VAR 0 7
70115: PPUSH
70116: LD_VAR 0 8
70120: PPUSH
70121: CALL_OW 488
70125: NOT
70126: IFFALSE 70130
// continue ;
70128: GO 70058
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70130: LD_ADDR_VAR 0 9
70134: PUSH
70135: LD_VAR 0 12
70139: PUSH
70140: LD_INT 1
70142: ARRAY
70143: PPUSH
70144: LD_VAR 0 12
70148: PUSH
70149: LD_INT 2
70151: ARRAY
70152: PPUSH
70153: LD_VAR 0 7
70157: PPUSH
70158: LD_VAR 0 8
70162: PPUSH
70163: CALL_OW 298
70167: ST_TO_ADDR
// if tmp < distance then
70168: LD_VAR 0 9
70172: PUSH
70173: LD_VAR 0 10
70177: LESS
70178: IFFALSE 70200
// begin result := i ;
70180: LD_ADDR_VAR 0 5
70184: PUSH
70185: LD_VAR 0 6
70189: ST_TO_ADDR
// distance := tmp ;
70190: LD_ADDR_VAR 0 10
70194: PUSH
70195: LD_VAR 0 9
70199: ST_TO_ADDR
// end ; end ;
70200: GO 70058
70202: POP
70203: POP
// end ;
70204: LD_VAR 0 5
70208: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70209: LD_INT 0
70211: PPUSH
70212: PPUSH
// if not driver or not IsInUnit ( driver ) then
70213: LD_VAR 0 1
70217: NOT
70218: PUSH
70219: LD_VAR 0 1
70223: PPUSH
70224: CALL_OW 310
70228: NOT
70229: OR
70230: IFFALSE 70234
// exit ;
70232: GO 70324
// vehicle := IsInUnit ( driver ) ;
70234: LD_ADDR_VAR 0 3
70238: PUSH
70239: LD_VAR 0 1
70243: PPUSH
70244: CALL_OW 310
70248: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70249: LD_VAR 0 1
70253: PPUSH
70254: LD_STRING \
70256: PUSH
70257: LD_INT 0
70259: PUSH
70260: LD_INT 0
70262: PUSH
70263: LD_INT 0
70265: PUSH
70266: LD_INT 0
70268: PUSH
70269: LD_INT 0
70271: PUSH
70272: LD_INT 0
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: PUSH
70284: LD_STRING E
70286: PUSH
70287: LD_INT 0
70289: PUSH
70290: LD_INT 0
70292: PUSH
70293: LD_VAR 0 3
70297: PUSH
70298: LD_INT 0
70300: PUSH
70301: LD_INT 0
70303: PUSH
70304: LD_INT 0
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PPUSH
70320: CALL_OW 446
// end ;
70324: LD_VAR 0 2
70328: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70329: LD_INT 0
70331: PPUSH
70332: PPUSH
// if not driver or not IsInUnit ( driver ) then
70333: LD_VAR 0 1
70337: NOT
70338: PUSH
70339: LD_VAR 0 1
70343: PPUSH
70344: CALL_OW 310
70348: NOT
70349: OR
70350: IFFALSE 70354
// exit ;
70352: GO 70444
// vehicle := IsInUnit ( driver ) ;
70354: LD_ADDR_VAR 0 3
70358: PUSH
70359: LD_VAR 0 1
70363: PPUSH
70364: CALL_OW 310
70368: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70369: LD_VAR 0 1
70373: PPUSH
70374: LD_STRING \
70376: PUSH
70377: LD_INT 0
70379: PUSH
70380: LD_INT 0
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: LD_INT 0
70388: PUSH
70389: LD_INT 0
70391: PUSH
70392: LD_INT 0
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: PUSH
70404: LD_STRING E
70406: PUSH
70407: LD_INT 0
70409: PUSH
70410: LD_INT 0
70412: PUSH
70413: LD_VAR 0 3
70417: PUSH
70418: LD_INT 0
70420: PUSH
70421: LD_INT 0
70423: PUSH
70424: LD_INT 0
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PPUSH
70440: CALL_OW 447
// end ;
70444: LD_VAR 0 2
70448: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70449: LD_INT 0
70451: PPUSH
70452: PPUSH
70453: PPUSH
// tmp := [ ] ;
70454: LD_ADDR_VAR 0 5
70458: PUSH
70459: EMPTY
70460: ST_TO_ADDR
// for i in units do
70461: LD_ADDR_VAR 0 4
70465: PUSH
70466: LD_VAR 0 1
70470: PUSH
70471: FOR_IN
70472: IFFALSE 70510
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70474: LD_ADDR_VAR 0 5
70478: PUSH
70479: LD_VAR 0 5
70483: PPUSH
70484: LD_VAR 0 5
70488: PUSH
70489: LD_INT 1
70491: PLUS
70492: PPUSH
70493: LD_VAR 0 4
70497: PPUSH
70498: CALL_OW 256
70502: PPUSH
70503: CALL_OW 2
70507: ST_TO_ADDR
70508: GO 70471
70510: POP
70511: POP
// if not tmp then
70512: LD_VAR 0 5
70516: NOT
70517: IFFALSE 70521
// exit ;
70519: GO 70569
// if asc then
70521: LD_VAR 0 2
70525: IFFALSE 70549
// result := SortListByListAsc ( units , tmp ) else
70527: LD_ADDR_VAR 0 3
70531: PUSH
70532: LD_VAR 0 1
70536: PPUSH
70537: LD_VAR 0 5
70541: PPUSH
70542: CALL_OW 76
70546: ST_TO_ADDR
70547: GO 70569
// result := SortListByListDesc ( units , tmp ) ;
70549: LD_ADDR_VAR 0 3
70553: PUSH
70554: LD_VAR 0 1
70558: PPUSH
70559: LD_VAR 0 5
70563: PPUSH
70564: CALL_OW 77
70568: ST_TO_ADDR
// end ;
70569: LD_VAR 0 3
70573: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70574: LD_INT 0
70576: PPUSH
70577: PPUSH
// task := GetTaskList ( mech ) ;
70578: LD_ADDR_VAR 0 4
70582: PUSH
70583: LD_VAR 0 1
70587: PPUSH
70588: CALL_OW 437
70592: ST_TO_ADDR
// if not task then
70593: LD_VAR 0 4
70597: NOT
70598: IFFALSE 70602
// exit ;
70600: GO 70644
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70602: LD_ADDR_VAR 0 3
70606: PUSH
70607: LD_VAR 0 4
70611: PUSH
70612: LD_INT 1
70614: ARRAY
70615: PUSH
70616: LD_INT 1
70618: ARRAY
70619: PUSH
70620: LD_STRING r
70622: EQUAL
70623: PUSH
70624: LD_VAR 0 4
70628: PUSH
70629: LD_INT 1
70631: ARRAY
70632: PUSH
70633: LD_INT 4
70635: ARRAY
70636: PUSH
70637: LD_VAR 0 2
70641: EQUAL
70642: AND
70643: ST_TO_ADDR
// end ;
70644: LD_VAR 0 3
70648: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70649: LD_INT 0
70651: PPUSH
// SetDir ( unit , d ) ;
70652: LD_VAR 0 1
70656: PPUSH
70657: LD_VAR 0 4
70661: PPUSH
70662: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70666: LD_VAR 0 1
70670: PPUSH
70671: LD_VAR 0 2
70675: PPUSH
70676: LD_VAR 0 3
70680: PPUSH
70681: LD_VAR 0 5
70685: PPUSH
70686: CALL_OW 48
// end ;
70690: LD_VAR 0 6
70694: RET
// export function ToNaturalNumber ( number ) ; begin
70695: LD_INT 0
70697: PPUSH
// result := number div 1 ;
70698: LD_ADDR_VAR 0 2
70702: PUSH
70703: LD_VAR 0 1
70707: PUSH
70708: LD_INT 1
70710: DIV
70711: ST_TO_ADDR
// if number < 0 then
70712: LD_VAR 0 1
70716: PUSH
70717: LD_INT 0
70719: LESS
70720: IFFALSE 70730
// result := 0 ;
70722: LD_ADDR_VAR 0 2
70726: PUSH
70727: LD_INT 0
70729: ST_TO_ADDR
// end ;
70730: LD_VAR 0 2
70734: RET
// export function SortByClass ( units , class ) ; var un ; begin
70735: LD_INT 0
70737: PPUSH
70738: PPUSH
// if not units or not class then
70739: LD_VAR 0 1
70743: NOT
70744: PUSH
70745: LD_VAR 0 2
70749: NOT
70750: OR
70751: IFFALSE 70755
// exit ;
70753: GO 70850
// result := [ ] ;
70755: LD_ADDR_VAR 0 3
70759: PUSH
70760: EMPTY
70761: ST_TO_ADDR
// for un in units do
70762: LD_ADDR_VAR 0 4
70766: PUSH
70767: LD_VAR 0 1
70771: PUSH
70772: FOR_IN
70773: IFFALSE 70848
// if GetClass ( un ) = class then
70775: LD_VAR 0 4
70779: PPUSH
70780: CALL_OW 257
70784: PUSH
70785: LD_VAR 0 2
70789: EQUAL
70790: IFFALSE 70817
// result := Insert ( result , 1 , un ) else
70792: LD_ADDR_VAR 0 3
70796: PUSH
70797: LD_VAR 0 3
70801: PPUSH
70802: LD_INT 1
70804: PPUSH
70805: LD_VAR 0 4
70809: PPUSH
70810: CALL_OW 2
70814: ST_TO_ADDR
70815: GO 70846
// result := Replace ( result , result + 1 , un ) ;
70817: LD_ADDR_VAR 0 3
70821: PUSH
70822: LD_VAR 0 3
70826: PPUSH
70827: LD_VAR 0 3
70831: PUSH
70832: LD_INT 1
70834: PLUS
70835: PPUSH
70836: LD_VAR 0 4
70840: PPUSH
70841: CALL_OW 1
70845: ST_TO_ADDR
70846: GO 70772
70848: POP
70849: POP
// end ;
70850: LD_VAR 0 3
70854: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70855: LD_INT 0
70857: PPUSH
70858: PPUSH
70859: PPUSH
70860: PPUSH
70861: PPUSH
70862: PPUSH
70863: PPUSH
// result := [ ] ;
70864: LD_ADDR_VAR 0 4
70868: PUSH
70869: EMPTY
70870: ST_TO_ADDR
// if x - r < 0 then
70871: LD_VAR 0 1
70875: PUSH
70876: LD_VAR 0 3
70880: MINUS
70881: PUSH
70882: LD_INT 0
70884: LESS
70885: IFFALSE 70897
// min_x := 0 else
70887: LD_ADDR_VAR 0 8
70891: PUSH
70892: LD_INT 0
70894: ST_TO_ADDR
70895: GO 70913
// min_x := x - r ;
70897: LD_ADDR_VAR 0 8
70901: PUSH
70902: LD_VAR 0 1
70906: PUSH
70907: LD_VAR 0 3
70911: MINUS
70912: ST_TO_ADDR
// if y - r < 0 then
70913: LD_VAR 0 2
70917: PUSH
70918: LD_VAR 0 3
70922: MINUS
70923: PUSH
70924: LD_INT 0
70926: LESS
70927: IFFALSE 70939
// min_y := 0 else
70929: LD_ADDR_VAR 0 7
70933: PUSH
70934: LD_INT 0
70936: ST_TO_ADDR
70937: GO 70955
// min_y := y - r ;
70939: LD_ADDR_VAR 0 7
70943: PUSH
70944: LD_VAR 0 2
70948: PUSH
70949: LD_VAR 0 3
70953: MINUS
70954: ST_TO_ADDR
// max_x := x + r ;
70955: LD_ADDR_VAR 0 9
70959: PUSH
70960: LD_VAR 0 1
70964: PUSH
70965: LD_VAR 0 3
70969: PLUS
70970: ST_TO_ADDR
// max_y := y + r ;
70971: LD_ADDR_VAR 0 10
70975: PUSH
70976: LD_VAR 0 2
70980: PUSH
70981: LD_VAR 0 3
70985: PLUS
70986: ST_TO_ADDR
// for _x = min_x to max_x do
70987: LD_ADDR_VAR 0 5
70991: PUSH
70992: DOUBLE
70993: LD_VAR 0 8
70997: DEC
70998: ST_TO_ADDR
70999: LD_VAR 0 9
71003: PUSH
71004: FOR_TO
71005: IFFALSE 71106
// for _y = min_y to max_y do
71007: LD_ADDR_VAR 0 6
71011: PUSH
71012: DOUBLE
71013: LD_VAR 0 7
71017: DEC
71018: ST_TO_ADDR
71019: LD_VAR 0 10
71023: PUSH
71024: FOR_TO
71025: IFFALSE 71102
// begin if not ValidHex ( _x , _y ) then
71027: LD_VAR 0 5
71031: PPUSH
71032: LD_VAR 0 6
71036: PPUSH
71037: CALL_OW 488
71041: NOT
71042: IFFALSE 71046
// continue ;
71044: GO 71024
// if GetResourceTypeXY ( _x , _y ) then
71046: LD_VAR 0 5
71050: PPUSH
71051: LD_VAR 0 6
71055: PPUSH
71056: CALL_OW 283
71060: IFFALSE 71100
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71062: LD_ADDR_VAR 0 4
71066: PUSH
71067: LD_VAR 0 4
71071: PPUSH
71072: LD_VAR 0 4
71076: PUSH
71077: LD_INT 1
71079: PLUS
71080: PPUSH
71081: LD_VAR 0 5
71085: PUSH
71086: LD_VAR 0 6
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PPUSH
71095: CALL_OW 1
71099: ST_TO_ADDR
// end ;
71100: GO 71024
71102: POP
71103: POP
71104: GO 71004
71106: POP
71107: POP
// end ;
71108: LD_VAR 0 4
71112: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71113: LD_INT 0
71115: PPUSH
71116: PPUSH
71117: PPUSH
71118: PPUSH
71119: PPUSH
71120: PPUSH
71121: PPUSH
71122: PPUSH
// if not units then
71123: LD_VAR 0 1
71127: NOT
71128: IFFALSE 71132
// exit ;
71130: GO 71656
// result := UnitFilter ( units , [ f_ok ] ) ;
71132: LD_ADDR_VAR 0 3
71136: PUSH
71137: LD_VAR 0 1
71141: PPUSH
71142: LD_INT 50
71144: PUSH
71145: EMPTY
71146: LIST
71147: PPUSH
71148: CALL_OW 72
71152: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71153: LD_ADDR_VAR 0 8
71157: PUSH
71158: LD_VAR 0 1
71162: PUSH
71163: LD_INT 1
71165: ARRAY
71166: PPUSH
71167: CALL_OW 255
71171: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71172: LD_ADDR_VAR 0 10
71176: PUSH
71177: LD_INT 29
71179: PUSH
71180: LD_INT 91
71182: PUSH
71183: LD_INT 49
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: LIST
71190: ST_TO_ADDR
// if not result then
71191: LD_VAR 0 3
71195: NOT
71196: IFFALSE 71200
// exit ;
71198: GO 71656
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71200: LD_ADDR_VAR 0 5
71204: PUSH
71205: LD_INT 81
71207: PUSH
71208: LD_VAR 0 8
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PPUSH
71217: CALL_OW 69
71221: ST_TO_ADDR
// for i in result do
71222: LD_ADDR_VAR 0 4
71226: PUSH
71227: LD_VAR 0 3
71231: PUSH
71232: FOR_IN
71233: IFFALSE 71654
// begin tag := GetTag ( i ) + 1 ;
71235: LD_ADDR_VAR 0 9
71239: PUSH
71240: LD_VAR 0 4
71244: PPUSH
71245: CALL_OW 110
71249: PUSH
71250: LD_INT 1
71252: PLUS
71253: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71254: LD_ADDR_VAR 0 7
71258: PUSH
71259: LD_VAR 0 4
71263: PPUSH
71264: CALL_OW 250
71268: PPUSH
71269: LD_VAR 0 4
71273: PPUSH
71274: CALL_OW 251
71278: PPUSH
71279: LD_INT 6
71281: PPUSH
71282: CALL 70855 0 3
71286: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71287: LD_VAR 0 4
71291: PPUSH
71292: CALL_OW 247
71296: PUSH
71297: LD_INT 2
71299: EQUAL
71300: PUSH
71301: LD_VAR 0 7
71305: AND
71306: PUSH
71307: LD_VAR 0 4
71311: PPUSH
71312: CALL_OW 264
71316: PUSH
71317: LD_VAR 0 10
71321: IN
71322: NOT
71323: AND
71324: IFFALSE 71363
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71326: LD_VAR 0 4
71330: PPUSH
71331: LD_VAR 0 7
71335: PUSH
71336: LD_INT 1
71338: ARRAY
71339: PUSH
71340: LD_INT 1
71342: ARRAY
71343: PPUSH
71344: LD_VAR 0 7
71348: PUSH
71349: LD_INT 1
71351: ARRAY
71352: PUSH
71353: LD_INT 2
71355: ARRAY
71356: PPUSH
71357: CALL_OW 116
71361: GO 71652
// if path > tag then
71363: LD_VAR 0 2
71367: PUSH
71368: LD_VAR 0 9
71372: GREATER
71373: IFFALSE 71581
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71375: LD_ADDR_VAR 0 6
71379: PUSH
71380: LD_VAR 0 5
71384: PPUSH
71385: LD_INT 91
71387: PUSH
71388: LD_VAR 0 4
71392: PUSH
71393: LD_INT 8
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: LIST
71400: PPUSH
71401: CALL_OW 72
71405: ST_TO_ADDR
// if nearEnemy then
71406: LD_VAR 0 6
71410: IFFALSE 71479
// begin if GetWeapon ( i ) = ru_time_lapser then
71412: LD_VAR 0 4
71416: PPUSH
71417: CALL_OW 264
71421: PUSH
71422: LD_INT 49
71424: EQUAL
71425: IFFALSE 71453
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71427: LD_VAR 0 4
71431: PPUSH
71432: LD_VAR 0 6
71436: PPUSH
71437: LD_VAR 0 4
71441: PPUSH
71442: CALL_OW 74
71446: PPUSH
71447: CALL_OW 112
71451: GO 71477
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71453: LD_VAR 0 4
71457: PPUSH
71458: LD_VAR 0 6
71462: PPUSH
71463: LD_VAR 0 4
71467: PPUSH
71468: CALL_OW 74
71472: PPUSH
71473: CALL_OW 115
// end else
71477: GO 71579
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71479: LD_VAR 0 4
71483: PPUSH
71484: LD_VAR 0 2
71488: PUSH
71489: LD_VAR 0 9
71493: ARRAY
71494: PUSH
71495: LD_INT 1
71497: ARRAY
71498: PPUSH
71499: LD_VAR 0 2
71503: PUSH
71504: LD_VAR 0 9
71508: ARRAY
71509: PUSH
71510: LD_INT 2
71512: ARRAY
71513: PPUSH
71514: CALL_OW 297
71518: PUSH
71519: LD_INT 6
71521: GREATER
71522: IFFALSE 71565
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71524: LD_VAR 0 4
71528: PPUSH
71529: LD_VAR 0 2
71533: PUSH
71534: LD_VAR 0 9
71538: ARRAY
71539: PUSH
71540: LD_INT 1
71542: ARRAY
71543: PPUSH
71544: LD_VAR 0 2
71548: PUSH
71549: LD_VAR 0 9
71553: ARRAY
71554: PUSH
71555: LD_INT 2
71557: ARRAY
71558: PPUSH
71559: CALL_OW 114
71563: GO 71579
// SetTag ( i , tag ) ;
71565: LD_VAR 0 4
71569: PPUSH
71570: LD_VAR 0 9
71574: PPUSH
71575: CALL_OW 109
// end else
71579: GO 71652
// if enemy then
71581: LD_VAR 0 5
71585: IFFALSE 71652
// begin if GetWeapon ( i ) = ru_time_lapser then
71587: LD_VAR 0 4
71591: PPUSH
71592: CALL_OW 264
71596: PUSH
71597: LD_INT 49
71599: EQUAL
71600: IFFALSE 71628
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71602: LD_VAR 0 4
71606: PPUSH
71607: LD_VAR 0 5
71611: PPUSH
71612: LD_VAR 0 4
71616: PPUSH
71617: CALL_OW 74
71621: PPUSH
71622: CALL_OW 112
71626: GO 71652
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71628: LD_VAR 0 4
71632: PPUSH
71633: LD_VAR 0 5
71637: PPUSH
71638: LD_VAR 0 4
71642: PPUSH
71643: CALL_OW 74
71647: PPUSH
71648: CALL_OW 115
// end ; end ;
71652: GO 71232
71654: POP
71655: POP
// end ;
71656: LD_VAR 0 3
71660: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71661: LD_INT 0
71663: PPUSH
71664: PPUSH
71665: PPUSH
// if not unit or IsInUnit ( unit ) then
71666: LD_VAR 0 1
71670: NOT
71671: PUSH
71672: LD_VAR 0 1
71676: PPUSH
71677: CALL_OW 310
71681: OR
71682: IFFALSE 71686
// exit ;
71684: GO 71777
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71686: LD_ADDR_VAR 0 4
71690: PUSH
71691: LD_VAR 0 1
71695: PPUSH
71696: CALL_OW 250
71700: PPUSH
71701: LD_VAR 0 2
71705: PPUSH
71706: LD_INT 1
71708: PPUSH
71709: CALL_OW 272
71713: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71714: LD_ADDR_VAR 0 5
71718: PUSH
71719: LD_VAR 0 1
71723: PPUSH
71724: CALL_OW 251
71728: PPUSH
71729: LD_VAR 0 2
71733: PPUSH
71734: LD_INT 1
71736: PPUSH
71737: CALL_OW 273
71741: ST_TO_ADDR
// if ValidHex ( x , y ) then
71742: LD_VAR 0 4
71746: PPUSH
71747: LD_VAR 0 5
71751: PPUSH
71752: CALL_OW 488
71756: IFFALSE 71777
// ComTurnXY ( unit , x , y ) ;
71758: LD_VAR 0 1
71762: PPUSH
71763: LD_VAR 0 4
71767: PPUSH
71768: LD_VAR 0 5
71772: PPUSH
71773: CALL_OW 118
// end ;
71777: LD_VAR 0 3
71781: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71782: LD_INT 0
71784: PPUSH
71785: PPUSH
// result := false ;
71786: LD_ADDR_VAR 0 3
71790: PUSH
71791: LD_INT 0
71793: ST_TO_ADDR
// if not units then
71794: LD_VAR 0 2
71798: NOT
71799: IFFALSE 71803
// exit ;
71801: GO 71848
// for i in units do
71803: LD_ADDR_VAR 0 4
71807: PUSH
71808: LD_VAR 0 2
71812: PUSH
71813: FOR_IN
71814: IFFALSE 71846
// if See ( side , i ) then
71816: LD_VAR 0 1
71820: PPUSH
71821: LD_VAR 0 4
71825: PPUSH
71826: CALL_OW 292
71830: IFFALSE 71844
// begin result := true ;
71832: LD_ADDR_VAR 0 3
71836: PUSH
71837: LD_INT 1
71839: ST_TO_ADDR
// exit ;
71840: POP
71841: POP
71842: GO 71848
// end ;
71844: GO 71813
71846: POP
71847: POP
// end ;
71848: LD_VAR 0 3
71852: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71853: LD_INT 0
71855: PPUSH
71856: PPUSH
71857: PPUSH
71858: PPUSH
// if not unit or not points then
71859: LD_VAR 0 1
71863: NOT
71864: PUSH
71865: LD_VAR 0 2
71869: NOT
71870: OR
71871: IFFALSE 71875
// exit ;
71873: GO 71965
// dist := 99999 ;
71875: LD_ADDR_VAR 0 5
71879: PUSH
71880: LD_INT 99999
71882: ST_TO_ADDR
// for i in points do
71883: LD_ADDR_VAR 0 4
71887: PUSH
71888: LD_VAR 0 2
71892: PUSH
71893: FOR_IN
71894: IFFALSE 71963
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71896: LD_ADDR_VAR 0 6
71900: PUSH
71901: LD_VAR 0 1
71905: PPUSH
71906: LD_VAR 0 4
71910: PUSH
71911: LD_INT 1
71913: ARRAY
71914: PPUSH
71915: LD_VAR 0 4
71919: PUSH
71920: LD_INT 2
71922: ARRAY
71923: PPUSH
71924: CALL_OW 297
71928: ST_TO_ADDR
// if tmpDist < dist then
71929: LD_VAR 0 6
71933: PUSH
71934: LD_VAR 0 5
71938: LESS
71939: IFFALSE 71961
// begin result := i ;
71941: LD_ADDR_VAR 0 3
71945: PUSH
71946: LD_VAR 0 4
71950: ST_TO_ADDR
// dist := tmpDist ;
71951: LD_ADDR_VAR 0 5
71955: PUSH
71956: LD_VAR 0 6
71960: ST_TO_ADDR
// end ; end ;
71961: GO 71893
71963: POP
71964: POP
// end ;
71965: LD_VAR 0 3
71969: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71970: LD_INT 0
71972: PPUSH
// uc_side := side ;
71973: LD_ADDR_OWVAR 20
71977: PUSH
71978: LD_VAR 0 1
71982: ST_TO_ADDR
// uc_nation := 3 ;
71983: LD_ADDR_OWVAR 21
71987: PUSH
71988: LD_INT 3
71990: ST_TO_ADDR
// vc_chassis := 25 ;
71991: LD_ADDR_OWVAR 37
71995: PUSH
71996: LD_INT 25
71998: ST_TO_ADDR
// vc_engine := engine_siberite ;
71999: LD_ADDR_OWVAR 39
72003: PUSH
72004: LD_INT 3
72006: ST_TO_ADDR
// vc_control := control_computer ;
72007: LD_ADDR_OWVAR 38
72011: PUSH
72012: LD_INT 3
72014: ST_TO_ADDR
// vc_weapon := 59 ;
72015: LD_ADDR_OWVAR 40
72019: PUSH
72020: LD_INT 59
72022: ST_TO_ADDR
// result := CreateVehicle ;
72023: LD_ADDR_VAR 0 5
72027: PUSH
72028: CALL_OW 45
72032: ST_TO_ADDR
// SetDir ( result , d ) ;
72033: LD_VAR 0 5
72037: PPUSH
72038: LD_VAR 0 4
72042: PPUSH
72043: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72047: LD_VAR 0 5
72051: PPUSH
72052: LD_VAR 0 2
72056: PPUSH
72057: LD_VAR 0 3
72061: PPUSH
72062: LD_INT 0
72064: PPUSH
72065: CALL_OW 48
// end ;
72069: LD_VAR 0 5
72073: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72074: LD_INT 0
72076: PPUSH
72077: PPUSH
72078: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72079: LD_ADDR_VAR 0 2
72083: PUSH
72084: LD_INT 0
72086: PUSH
72087: LD_INT 0
72089: PUSH
72090: LD_INT 0
72092: PUSH
72093: LD_INT 0
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72102: LD_VAR 0 1
72106: NOT
72107: PUSH
72108: LD_VAR 0 1
72112: PPUSH
72113: CALL_OW 264
72117: PUSH
72118: LD_INT 12
72120: PUSH
72121: LD_INT 51
72123: PUSH
72124: LD_INT 32
72126: PUSH
72127: LD_INT 89
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: IN
72136: NOT
72137: OR
72138: IFFALSE 72142
// exit ;
72140: GO 72240
// for i := 1 to 3 do
72142: LD_ADDR_VAR 0 3
72146: PUSH
72147: DOUBLE
72148: LD_INT 1
72150: DEC
72151: ST_TO_ADDR
72152: LD_INT 3
72154: PUSH
72155: FOR_TO
72156: IFFALSE 72238
// begin tmp := GetCargo ( cargo , i ) ;
72158: LD_ADDR_VAR 0 4
72162: PUSH
72163: LD_VAR 0 1
72167: PPUSH
72168: LD_VAR 0 3
72172: PPUSH
72173: CALL_OW 289
72177: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72178: LD_ADDR_VAR 0 2
72182: PUSH
72183: LD_VAR 0 2
72187: PPUSH
72188: LD_VAR 0 3
72192: PPUSH
72193: LD_VAR 0 4
72197: PPUSH
72198: CALL_OW 1
72202: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72203: LD_ADDR_VAR 0 2
72207: PUSH
72208: LD_VAR 0 2
72212: PPUSH
72213: LD_INT 4
72215: PPUSH
72216: LD_VAR 0 2
72220: PUSH
72221: LD_INT 4
72223: ARRAY
72224: PUSH
72225: LD_VAR 0 4
72229: PLUS
72230: PPUSH
72231: CALL_OW 1
72235: ST_TO_ADDR
// end ;
72236: GO 72155
72238: POP
72239: POP
// end ;
72240: LD_VAR 0 2
72244: RET
// export function Length ( array ) ; begin
72245: LD_INT 0
72247: PPUSH
// result := array + 0 ;
72248: LD_ADDR_VAR 0 2
72252: PUSH
72253: LD_VAR 0 1
72257: PUSH
72258: LD_INT 0
72260: PLUS
72261: ST_TO_ADDR
// end ;
72262: LD_VAR 0 2
72266: RET
// export function PrepareArray ( array ) ; begin
72267: LD_INT 0
72269: PPUSH
// result := array diff 0 ;
72270: LD_ADDR_VAR 0 2
72274: PUSH
72275: LD_VAR 0 1
72279: PUSH
72280: LD_INT 0
72282: DIFF
72283: ST_TO_ADDR
// if not result [ 1 ] then
72284: LD_VAR 0 2
72288: PUSH
72289: LD_INT 1
72291: ARRAY
72292: NOT
72293: IFFALSE 72313
// result := Delete ( result , 1 ) ;
72295: LD_ADDR_VAR 0 2
72299: PUSH
72300: LD_VAR 0 2
72304: PPUSH
72305: LD_INT 1
72307: PPUSH
72308: CALL_OW 3
72312: ST_TO_ADDR
// end ; end_of_file
72313: LD_VAR 0 2
72317: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72318: LD_VAR 0 1
72322: PUSH
72323: LD_INT 200
72325: DOUBLE
72326: GREATEREQUAL
72327: IFFALSE 72335
72329: LD_INT 299
72331: DOUBLE
72332: LESSEQUAL
72333: IFTRUE 72337
72335: GO 72369
72337: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72338: LD_VAR 0 1
72342: PPUSH
72343: LD_VAR 0 2
72347: PPUSH
72348: LD_VAR 0 3
72352: PPUSH
72353: LD_VAR 0 4
72357: PPUSH
72358: LD_VAR 0 5
72362: PPUSH
72363: CALL 27220 0 5
72367: GO 72446
72369: LD_INT 300
72371: DOUBLE
72372: GREATEREQUAL
72373: IFFALSE 72381
72375: LD_INT 399
72377: DOUBLE
72378: LESSEQUAL
72379: IFTRUE 72383
72381: GO 72445
72383: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72384: LD_VAR 0 1
72388: PPUSH
72389: LD_VAR 0 2
72393: PPUSH
72394: LD_VAR 0 3
72398: PPUSH
72399: LD_VAR 0 4
72403: PPUSH
72404: LD_VAR 0 5
72408: PPUSH
72409: LD_VAR 0 6
72413: PPUSH
72414: LD_VAR 0 7
72418: PPUSH
72419: LD_VAR 0 8
72423: PPUSH
72424: LD_VAR 0 9
72428: PPUSH
72429: LD_VAR 0 10
72433: PPUSH
72434: LD_VAR 0 11
72438: PPUSH
72439: CALL 23553 0 11
72443: GO 72446
72445: POP
// end ;
72446: PPOPN 11
72448: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72449: LD_VAR 0 1
72453: PPUSH
72454: LD_VAR 0 2
72458: PPUSH
72459: LD_VAR 0 3
72463: PPUSH
72464: LD_VAR 0 4
72468: PPUSH
72469: LD_VAR 0 5
72473: PPUSH
72474: CALL 26956 0 5
// end ; end_of_file
72478: PPOPN 5
72480: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72481: LD_VAR 0 1
72485: PPUSH
72486: LD_VAR 0 2
72490: PPUSH
72491: LD_VAR 0 3
72495: PPUSH
72496: LD_VAR 0 4
72500: PPUSH
72501: LD_VAR 0 5
72505: PPUSH
72506: LD_VAR 0 6
72510: PPUSH
72511: CALL 11246 0 6
// end ;
72515: PPOPN 6
72517: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72518: LD_INT 0
72520: PPUSH
// begin if not units then
72521: LD_VAR 0 1
72525: NOT
72526: IFFALSE 72530
// exit ;
72528: GO 72530
// end ;
72530: PPOPN 7
72532: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72533: CALL 11217 0 0
// end ;
72537: PPOPN 1
72539: END
