// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 45 0 0
// CreateNature ;
  15: CALL 10844 0 0
// PrepareAmerican ;
  19: CALL 245 0 0
// PrepareRussian ;
  23: CALL 1529 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 1 ) ;
  33: LD_INT 1
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 6486 0 0
// end ;
  44: END
// export debug , JMMGirl , JMMGirlStatus , laserCounter , killCounter , russianRocketsDisabled , amLaserCounter ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// JMMGirl := 0 ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// JMMGirlStatus := 0 ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// laserCounter := 0 ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// killCounter := 0 ;
  80: LD_ADDR_EXP 5
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// amLaserCounter := 0 ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// russianRocketsDisabled := false ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// end ;
 104: LD_VAR 0 1
 108: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) >= 15 do
 109: LD_INT 22
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: EMPTY
 116: LIST
 117: LIST
 118: PUSH
 119: LD_INT 30
 121: PUSH
 122: LD_INT 33
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: PUSH
 129: EMPTY
 130: LIST
 131: LIST
 132: PPUSH
 133: CALL_OW 69
 137: PUSH
 138: LD_INT 15
 140: GREATEREQUAL
 141: IFFALSE 153
 143: GO 145
 145: DISABLE
// SetAchievement ( ACH_FORT ) ;
 146: LD_STRING ACH_FORT
 148: PPUSH
 149: CALL_OW 543
 153: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 do
 154: LD_INT 22
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PUSH
 164: LD_INT 25
 166: PUSH
 167: LD_INT 12
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: PPUSH
 178: CALL_OW 69
 182: PUSH
 183: LD_INT 0
 185: EQUAL
 186: IFFALSE 198
 188: GO 190
 190: DISABLE
// SetAchievement ( ACH_APE ) ;
 191: LD_STRING ACH_APE
 193: PPUSH
 194: CALL_OW 543
 198: END
// every 0 0$1 trigger killCounter >= 20 do
 199: LD_EXP 5
 203: PUSH
 204: LD_INT 20
 206: GREATEREQUAL
 207: IFFALSE 219
 209: GO 211
 211: DISABLE
// SetAchievement ( ACH_DOUBLE ) ;
 212: LD_STRING ACH_DOUBLE
 214: PPUSH
 215: CALL_OW 543
 219: END
// every 0 0$1 trigger IsInArea ( JMMVeh , kappaBaseArea ) do
 220: LD_EXP 9
 224: PPUSH
 225: LD_INT 15
 227: PPUSH
 228: CALL_OW 308
 232: IFFALSE 244
 234: GO 236
 236: DISABLE
// SetAchievement ( ACH_AMASHA ) ; end_of_file
 237: LD_STRING ACH_AMASHA
 239: PPUSH
 240: CALL_OW 543
 244: END
// export JMM , JMMVeh , Joan , Lisa , Connie , Powell ; export function PrepareAmerican ; var i , un , veh , tmp ; begin
 245: LD_INT 0
 247: PPUSH
 248: PPUSH
 249: PPUSH
 250: PPUSH
 251: PPUSH
// uc_side := 1 ;
 252: LD_ADDR_OWVAR 20
 256: PUSH
 257: LD_INT 1
 259: ST_TO_ADDR
// uc_nation := 1 ;
 260: LD_ADDR_OWVAR 21
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// SetBName ( usDep , deltakappa ) ;
 268: LD_INT 48
 270: PPUSH
 271: LD_STRING deltakappa
 273: PPUSH
 274: CALL_OW 500
// SetResourceType ( GetBase ( usDep ) , 1 , [ 2000 , 1600 , 1200 , 900 ] [ Difficulty ] ) ;
 278: LD_INT 48
 280: PPUSH
 281: CALL_OW 274
 285: PPUSH
 286: LD_INT 1
 288: PPUSH
 289: LD_INT 2000
 291: PUSH
 292: LD_INT 1600
 294: PUSH
 295: LD_INT 1200
 297: PUSH
 298: LD_INT 900
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: LIST
 305: LIST
 306: PUSH
 307: LD_OWVAR 67
 311: ARRAY
 312: PPUSH
 313: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 2 , 20 ) ;
 317: LD_INT 48
 319: PPUSH
 320: CALL_OW 274
 324: PPUSH
 325: LD_INT 2
 327: PPUSH
 328: LD_INT 20
 330: PPUSH
 331: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , 3 , 100 ) ;
 335: LD_INT 48
 337: PPUSH
 338: CALL_OW 274
 342: PPUSH
 343: LD_INT 3
 345: PPUSH
 346: LD_INT 100
 348: PPUSH
 349: CALL_OW 277
// JMM := PrepareUnit ( JMM , ( not debug ) , 13f_ ) ;
 353: LD_ADDR_EXP 8
 357: PUSH
 358: LD_STRING JMM
 360: PPUSH
 361: LD_EXP 1
 365: NOT
 366: PPUSH
 367: LD_STRING 13f_
 369: PPUSH
 370: CALL 31510 0 3
 374: ST_TO_ADDR
// SetClass ( JMM , class_soldier ) ;
 375: LD_EXP 8
 379: PPUSH
 380: LD_INT 1
 382: PPUSH
 383: CALL_OW 336
// PrepareVehicle ( [ us_morphling , us_morphling , us_medium_tracked , us_medium_tracked ] [ Difficulty ] , engine_siberite , control_manual , [ us_laser , us_laser , us_double_gun , us_double_gun ] [ Difficulty ] , 100 ) ;
 387: LD_INT 5
 389: PUSH
 390: LD_INT 5
 392: PUSH
 393: LD_INT 3
 395: PUSH
 396: LD_INT 3
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: LIST
 404: PUSH
 405: LD_OWVAR 67
 409: ARRAY
 410: PPUSH
 411: LD_INT 3
 413: PPUSH
 414: LD_INT 1
 416: PPUSH
 417: LD_INT 9
 419: PUSH
 420: LD_INT 9
 422: PUSH
 423: LD_INT 5
 425: PUSH
 426: LD_INT 5
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_OWVAR 67
 439: ARRAY
 440: PPUSH
 441: LD_INT 100
 443: PPUSH
 444: CALL 36350 0 5
// JMMVeh := CreateVehicle ;
 448: LD_ADDR_EXP 9
 452: PUSH
 453: CALL_OW 45
 457: ST_TO_ADDR
// SetDir ( JMMVeh , 1 ) ;
 458: LD_EXP 9
 462: PPUSH
 463: LD_INT 1
 465: PPUSH
 466: CALL_OW 233
// PlaceUnitXY ( JMMVeh , 6 , 5 , false ) ;
 470: LD_EXP 9
 474: PPUSH
 475: LD_INT 6
 477: PPUSH
 478: LD_INT 5
 480: PPUSH
 481: LD_INT 0
 483: PPUSH
 484: CALL_OW 48
// PlaceHumanInUnit ( JMM , JMMveh ) ;
 488: LD_EXP 8
 492: PPUSH
 493: LD_EXP 9
 497: PPUSH
 498: CALL_OW 52
// SetMark ( JMMVeh , - 1 ) ;
 502: LD_EXP 9
 506: PPUSH
 507: LD_INT 1
 509: NEG
 510: PPUSH
 511: CALL_OW 242
// ComMoveXY ( JMMVeh , 21 , 8 ) ;
 515: LD_EXP 9
 519: PPUSH
 520: LD_INT 21
 522: PPUSH
 523: LD_INT 8
 525: PPUSH
 526: CALL_OW 111
// uc_side := 4 ;
 530: LD_ADDR_OWVAR 20
 534: PUSH
 535: LD_INT 4
 537: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 538: LD_ADDR_EXP 13
 542: PUSH
 543: LD_STRING Powell
 545: PPUSH
 546: LD_INT 0
 548: PPUSH
 549: LD_STRING 
 551: PPUSH
 552: CALL 31510 0 3
 556: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
 557: LD_ADDR_EXP 10
 561: PUSH
 562: LD_STRING Joan
 564: PPUSH
 565: LD_EXP 1
 569: NOT
 570: PPUSH
 571: LD_STRING 10c_
 573: PPUSH
 574: CALL 31510 0 3
 578: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 13s_ ) ;
 579: LD_ADDR_EXP 11
 583: PUSH
 584: LD_STRING Lisa
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_STRING 13s_
 595: PPUSH
 596: CALL 31510 0 3
 600: ST_TO_ADDR
// if Joan then
 601: LD_EXP 10
 605: IFFALSE 644
// begin PlaceUnitArea ( Joan , girlSpawnArea , false ) ;
 607: LD_EXP 10
 611: PPUSH
 612: LD_INT 4
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 49
// SetClass ( Joan , class_scientistic ) ;
 622: LD_EXP 10
 626: PPUSH
 627: LD_INT 4
 629: PPUSH
 630: CALL_OW 336
// JMMGirl = 1 ;
 634: LD_ADDR_EXP 2
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// end else
 642: GO 735
// if Lisa then
 644: LD_EXP 11
 648: IFFALSE 687
// begin PlaceUnitArea ( Lisa , girlSpawnArea , false ) ;
 650: LD_EXP 11
 654: PPUSH
 655: LD_INT 4
 657: PPUSH
 658: LD_INT 0
 660: PPUSH
 661: CALL_OW 49
// SetClass ( Lisa , class_soldier ) ;
 665: LD_EXP 11
 669: PPUSH
 670: LD_INT 1
 672: PPUSH
 673: CALL_OW 336
// JMMGirl := 2 ;
 677: LD_ADDR_EXP 2
 681: PUSH
 682: LD_INT 2
 684: ST_TO_ADDR
// end else
 685: GO 735
// begin Connie := NewCharacter ( Coonie ) ;
 687: LD_ADDR_EXP 12
 691: PUSH
 692: LD_STRING Coonie
 694: PPUSH
 695: CALL_OW 25
 699: ST_TO_ADDR
// PlaceUnitArea ( Connie , girlSpawnArea , false ) ;
 700: LD_EXP 12
 704: PPUSH
 705: LD_INT 4
 707: PPUSH
 708: LD_INT 0
 710: PPUSH
 711: CALL_OW 49
// SetClass ( Connie , class_mechanic ) ;
 715: LD_EXP 12
 719: PPUSH
 720: LD_INT 3
 722: PPUSH
 723: CALL_OW 336
// JMMGirl := 3 ;
 727: LD_ADDR_EXP 2
 731: PUSH
 732: LD_INT 3
 734: ST_TO_ADDR
// end ; for i := 1 to [ 4 , 3 , 3 , 2 ] [ Difficulty ] do
 735: LD_ADDR_VAR 0 2
 739: PUSH
 740: DOUBLE
 741: LD_INT 1
 743: DEC
 744: ST_TO_ADDR
 745: LD_INT 4
 747: PUSH
 748: LD_INT 3
 750: PUSH
 751: LD_INT 3
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: LIST
 762: PUSH
 763: LD_OWVAR 67
 767: ARRAY
 768: PUSH
 769: FOR_TO
 770: IFFALSE 924
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_medium_wheeled , us_medium_tracked ] [ i mod 4 + 1 ] , engine_combustion , control_remote , [ us_laser , us_rocket_launcher , us_gatling_gun , us_double_gun ] [ i mod 4 + 1 ] , rand ( 33 , 55 ) ) ;
 772: LD_INT 4
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: LD_INT 2
 780: PUSH
 781: LD_INT 3
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: LD_VAR 0 2
 794: PUSH
 795: LD_INT 4
 797: MOD
 798: PUSH
 799: LD_INT 1
 801: PLUS
 802: ARRAY
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: LD_INT 9
 812: PUSH
 813: LD_INT 7
 815: PUSH
 816: LD_INT 4
 818: PUSH
 819: LD_INT 5
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: PUSH
 828: LD_VAR 0 2
 832: PUSH
 833: LD_INT 4
 835: MOD
 836: PUSH
 837: LD_INT 1
 839: PLUS
 840: ARRAY
 841: PPUSH
 842: LD_INT 33
 844: PPUSH
 845: LD_INT 55
 847: PPUSH
 848: CALL_OW 12
 852: PPUSH
 853: CALL 36350 0 5
// veh := CreateVehicle ;
 857: LD_ADDR_VAR 0 4
 861: PUSH
 862: CALL_OW 45
 866: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 867: LD_VAR 0 4
 871: PPUSH
 872: LD_INT 0
 874: PPUSH
 875: LD_INT 5
 877: PPUSH
 878: CALL_OW 12
 882: PPUSH
 883: CALL_OW 233
// SetLives ( veh , rand ( 500 , 950 ) ) ;
 887: LD_VAR 0 4
 891: PPUSH
 892: LD_INT 500
 894: PPUSH
 895: LD_INT 950
 897: PPUSH
 898: CALL_OW 12
 902: PPUSH
 903: CALL_OW 234
// PlaceUnitArea ( veh , remoteVehArea , false ) ;
 907: LD_VAR 0 4
 911: PPUSH
 912: LD_INT 5
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// end ;
 922: GO 769
 924: POP
 925: POP
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
 926: LD_ADDR_VAR 0 2
 930: PUSH
 931: DOUBLE
 932: LD_INT 1
 934: DEC
 935: ST_TO_ADDR
 936: LD_INT 3
 938: PUSH
 939: LD_INT 3
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: LD_INT 2
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: PUSH
 954: LD_OWVAR 67
 958: ARRAY
 959: PUSH
 960: FOR_TO
 961: IFFALSE 1083
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_computer , [ us_laser , us_double_gun ] [ i mod 2 + 1 ] , 0 ) ;
 963: LD_INT 3
 965: PUSH
 966: LD_INT 2
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PUSH
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 2
 980: MOD
 981: PUSH
 982: LD_INT 1
 984: PLUS
 985: ARRAY
 986: PPUSH
 987: LD_INT 1
 989: PPUSH
 990: LD_INT 3
 992: PPUSH
 993: LD_INT 9
 995: PUSH
 996: LD_INT 5
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PUSH
1003: LD_VAR 0 2
1007: PUSH
1008: LD_INT 2
1010: MOD
1011: PUSH
1012: LD_INT 1
1014: PLUS
1015: ARRAY
1016: PPUSH
1017: LD_INT 0
1019: PPUSH
1020: CALL 36350 0 5
// veh := CreateVehicle ;
1024: LD_ADDR_VAR 0 4
1028: PUSH
1029: CALL_OW 45
1033: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1034: LD_VAR 0 4
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: LD_INT 5
1044: PPUSH
1045: CALL_OW 12
1049: PPUSH
1050: CALL_OW 233
// SetLives ( veh , 1000 ) ;
1054: LD_VAR 0 4
1058: PPUSH
1059: LD_INT 1000
1061: PPUSH
1062: CALL_OW 234
// PlaceUnitArea ( veh , computerVehArea , false ) ;
1066: LD_VAR 0 4
1070: PPUSH
1071: LD_INT 17
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 960
1083: POP
1084: POP
// for i := 1 to [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_INT 3
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_OWVAR 67
1117: ARRAY
1118: PUSH
1119: FOR_TO
1120: IFFALSE 1168
// begin PrepareApeman ( 1 ) ;
1122: LD_INT 1
1124: PPUSH
1125: CALL 65112 0 1
// uc_side := 4 ;
1129: LD_ADDR_OWVAR 20
1133: PUSH
1134: LD_INT 4
1136: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
1137: LD_ADDR_OWVAR 28
1141: PUSH
1142: LD_INT 16
1144: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , 84 , 127 , 5 , false ) ;
1145: CALL_OW 44
1149: PPUSH
1150: LD_INT 84
1152: PPUSH
1153: LD_INT 127
1155: PPUSH
1156: LD_INT 5
1158: PPUSH
1159: LD_INT 0
1161: PPUSH
1162: CALL_OW 50
// end ;
1166: GO 1119
1168: POP
1169: POP
// uc_side := 4 ;
1170: LD_ADDR_OWVAR 20
1174: PUSH
1175: LD_INT 4
1177: ST_TO_ADDR
// uc_nation := 1 ;
1178: LD_ADDR_OWVAR 21
1182: PUSH
1183: LD_INT 1
1185: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_manual , us_cargo_bay , 100 ) ;
1186: LD_INT 2
1188: PPUSH
1189: LD_INT 3
1191: PPUSH
1192: LD_INT 1
1194: PPUSH
1195: LD_INT 12
1197: PPUSH
1198: LD_INT 100
1200: PPUSH
1201: CALL 36350 0 5
// veh := CreateVehicle ;
1205: LD_ADDR_VAR 0 4
1209: PUSH
1210: CALL_OW 45
1214: ST_TO_ADDR
// SetCargo ( veh , mat_cans , 100 ) ;
1215: LD_VAR 0 4
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: LD_INT 100
1225: PPUSH
1226: CALL_OW 290
// SetLives ( veh , 450 ) ;
1230: LD_VAR 0 4
1234: PPUSH
1235: LD_INT 450
1237: PPUSH
1238: CALL_OW 234
// PlaceUnitXYD ( veh , 122 , 118 , 4 , false ) ;
1242: LD_VAR 0 4
1246: PPUSH
1247: LD_INT 122
1249: PPUSH
1250: LD_INT 118
1252: PPUSH
1253: LD_INT 4
1255: PPUSH
1256: LD_INT 0
1258: PPUSH
1259: CALL 70971 0 5
// PrepareHuman ( sex_male , class_engineer , 0 ) ;
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 380
// Create_ColdMeat ( CreateHuman , 124 , 120 , true ) ;
1276: CALL_OW 44
1280: PPUSH
1281: LD_INT 124
1283: PPUSH
1284: LD_INT 120
1286: PPUSH
1287: LD_INT 1
1289: PPUSH
1290: CALL_OW 601
// tmp := AreaToList ( deadBodiesArea , 0 ) ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_INT 18
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 517
1309: ST_TO_ADDR
// for i := 1 to 4 do
1310: LD_ADDR_VAR 0 2
1314: PUSH
1315: DOUBLE
1316: LD_INT 1
1318: DEC
1319: ST_TO_ADDR
1320: LD_INT 4
1322: PUSH
1323: FOR_TO
1324: IFFALSE 1432
// begin PrepareHuman ( sex_male , [ 1 , 3 ] [ rand ( 1 , 2 ) ] , 0 ) ;
1326: LD_INT 1
1328: PPUSH
1329: LD_INT 1
1331: PUSH
1332: LD_INT 3
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 1
1341: PPUSH
1342: LD_INT 2
1344: PPUSH
1345: CALL_OW 12
1349: ARRAY
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 380
// un := CreateHuman ;
1358: LD_ADDR_VAR 0 3
1362: PUSH
1363: CALL_OW 44
1367: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
1368: LD_VAR 0 3
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 5
1378: PPUSH
1379: CALL_OW 12
1383: PPUSH
1384: CALL_OW 233
// Create_ColdMeat ( un , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , true ) ;
1388: LD_VAR 0 3
1392: PPUSH
1393: LD_VAR 0 5
1397: PUSH
1398: LD_INT 1
1400: ARRAY
1401: PUSH
1402: LD_VAR 0 2
1406: ARRAY
1407: PPUSH
1408: LD_VAR 0 5
1412: PUSH
1413: LD_INT 2
1415: ARRAY
1416: PUSH
1417: LD_VAR 0 2
1421: ARRAY
1422: PPUSH
1423: LD_INT 1
1425: PPUSH
1426: CALL_OW 601
// end ;
1430: GO 1323
1432: POP
1433: POP
// end ;
1434: LD_VAR 0 1
1438: RET
// export function ChangeSideKappaBase ; begin
1439: LD_INT 0
1441: PPUSH
// PlaceSeeing ( 70 , 138 , 1 , - 80 ) ;
1442: LD_INT 70
1444: PPUSH
1445: LD_INT 138
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: LD_INT 80
1453: NEG
1454: PPUSH
1455: CALL_OW 330
// RemoveSeeing ( 70 , 138 , 1 ) ;
1459: LD_INT 70
1461: PPUSH
1462: LD_INT 138
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: CALL_OW 331
// PlaceSeeing ( 147 , 122 , 1 , - 40 ) ;
1472: LD_INT 147
1474: PPUSH
1475: LD_INT 122
1477: PPUSH
1478: LD_INT 1
1480: PPUSH
1481: LD_INT 40
1483: NEG
1484: PPUSH
1485: CALL_OW 330
// RemoveSeeing ( 147 , 122 , 1 ) ;
1489: LD_INT 147
1491: PPUSH
1492: LD_INT 122
1494: PPUSH
1495: LD_INT 1
1497: PPUSH
1498: CALL_OW 331
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1502: LD_INT 22
1504: PUSH
1505: LD_INT 4
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: PPUSH
1517: LD_INT 1
1519: PPUSH
1520: CALL_OW 235
// end ; end_of_file
1524: LD_VAR 0 1
1528: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , ruAttackers , ruTechList , ruTeleportExits ; export function PrepareRussian ; var i , j , tmp , un , weapons ; begin
1529: LD_INT 0
1531: PPUSH
1532: PPUSH
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side := 3 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 3
1544: ST_TO_ADDR
// uc_nation := 3 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 3
1552: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
1553: LD_ADDR_EXP 15
1557: PUSH
1558: LD_INT 8
1560: PUSH
1561: LD_INT 11
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: LD_INT 17
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_OWVAR 67
1580: ARRAY
1581: ST_TO_ADDR
// ruMobile := [ ] ;
1582: LD_ADDR_EXP 16
1586: PUSH
1587: EMPTY
1588: ST_TO_ADDR
// ruBuildList := [ ] ;
1589: LD_ADDR_EXP 17
1593: PUSH
1594: EMPTY
1595: ST_TO_ADDR
// ruAttackers := [ ] ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: EMPTY
1602: ST_TO_ADDR
// ruTechList := GetTechNation ( 3 , nation_russian , state_enabled ) ;
1603: LD_ADDR_EXP 19
1607: PUSH
1608: LD_INT 3
1610: PPUSH
1611: LD_INT 3
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: CALL 31573 0 3
1621: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ;
1622: LD_ADDR_VAR 0 6
1626: PUSH
1627: LD_INT 43
1629: PUSH
1630: LD_INT 46
1632: PUSH
1633: LD_INT 45
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: ST_TO_ADDR
// ruTeleportExits := [ [ 46 , 70 ] , [ 121 , 95 ] , [ 68 , 65 ] ] ;
1641: LD_ADDR_EXP 20
1645: PUSH
1646: LD_INT 46
1648: PUSH
1649: LD_INT 70
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 121
1658: PUSH
1659: LD_INT 95
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 68
1668: PUSH
1669: LD_INT 65
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: ST_TO_ADDR
// if not russianRocketsDisabled then
1681: LD_EXP 6
1685: NOT
1686: IFFALSE 1702
// weapons := weapons ^ ru_rocket ;
1688: LD_ADDR_VAR 0 6
1692: PUSH
1693: LD_VAR 0 6
1697: PUSH
1698: LD_INT 47
1700: ADD
1701: ST_TO_ADDR
// ruCommander := NewCharacter ( Eisenstein ) ;
1702: LD_ADDR_EXP 14
1706: PUSH
1707: LD_STRING Eisenstein
1709: PPUSH
1710: CALL_OW 25
1714: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
1715: LD_EXP 14
1719: PPUSH
1720: LD_INT 22
1722: PPUSH
1723: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 1250 , 2500 , 3500 , 5000 ] [ Difficulty ] ) ;
1727: LD_INT 22
1729: PPUSH
1730: CALL_OW 274
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 1250
1740: PUSH
1741: LD_INT 2500
1743: PUSH
1744: LD_INT 3500
1746: PUSH
1747: LD_INT 5000
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_OWVAR 67
1760: ARRAY
1761: PPUSH
1762: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 600 ) ;
1766: LD_INT 22
1768: PPUSH
1769: CALL_OW 274
1773: PPUSH
1774: LD_INT 2
1776: PPUSH
1777: LD_INT 600
1779: PPUSH
1780: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 3 , 100 ) ;
1784: LD_INT 22
1786: PPUSH
1787: CALL_OW 274
1791: PPUSH
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 100
1797: PPUSH
1798: CALL_OW 277
// TeleportExit ( ruTeleport , 46 , 70 ) ;
1802: LD_INT 116
1804: PPUSH
1805: LD_INT 46
1807: PPUSH
1808: LD_INT 70
1810: PPUSH
1811: CALL_OW 243
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
1815: LD_ADDR_VAR 0 2
1819: PUSH
1820: LD_INT 22
1822: PUSH
1823: LD_INT 3
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 21
1832: PUSH
1833: LD_INT 3
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PPUSH
1844: CALL_OW 69
1848: PUSH
1849: FOR_IN
1850: IFFALSE 1872
// SetBLevel ( i , 6 + Difficulty ) ;
1852: LD_VAR 0 2
1856: PPUSH
1857: LD_INT 6
1859: PUSH
1860: LD_OWVAR 67
1864: PLUS
1865: PPUSH
1866: CALL_OW 241
1870: GO 1849
1872: POP
1873: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: LD_INT 22
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 30
1894: PUSH
1895: LD_INT 32
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 30
1904: PUSH
1905: LD_INT 33
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PPUSH
1921: CALL_OW 69
1925: ST_TO_ADDR
// if russianRocketsDisabled then
1926: LD_EXP 6
1930: IFFALSE 2006
// begin ruTechList := ruTechList diff tech_advrocket ;
1932: LD_ADDR_EXP 19
1936: PUSH
1937: LD_EXP 19
1941: PUSH
1942: LD_INT 71
1944: DIFF
1945: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_bweapon , ru_rocket ] ) do
1946: LD_ADDR_VAR 0 2
1950: PUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 35
1958: PUSH
1959: LD_INT 47
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PPUSH
1966: CALL_OW 72
1970: PUSH
1971: FOR_IN
1972: IFFALSE 2004
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_VAR 0 6
1983: PUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_VAR 0 6
1991: PPUSH
1992: CALL_OW 12
1996: ARRAY
1997: PPUSH
1998: CALL_OW 431
2002: GO 1971
2004: POP
2005: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2006: LD_ADDR_VAR 0 2
2010: PUSH
2011: LD_INT 22
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 30
2023: PUSH
2024: LD_INT 32
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PPUSH
2035: CALL_OW 69
2039: PUSH
2040: FOR_IN
2041: IFFALSE 2090
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2043: LD_INT 0
2045: PPUSH
2046: LD_INT 5
2048: PUSH
2049: LD_INT 6
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: LD_INT 8
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: LD_OWVAR 67
2068: ARRAY
2069: PPUSH
2070: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2074: CALL_OW 44
2078: PPUSH
2079: LD_VAR 0 2
2083: PPUSH
2084: CALL_OW 52
// end ;
2088: GO 2040
2090: POP
2091: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
2092: LD_ADDR_VAR 0 2
2096: PUSH
2097: LD_INT 22
2099: PUSH
2100: LD_INT 3
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 69
2125: PUSH
2126: FOR_IN
2127: IFFALSE 2261
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
2129: LD_ADDR_VAR 0 3
2133: PUSH
2134: DOUBLE
2135: LD_INT 1
2137: DEC
2138: ST_TO_ADDR
2139: LD_INT 2
2141: PUSH
2142: LD_INT 2
2144: PUSH
2145: LD_INT 3
2147: PUSH
2148: LD_INT 3
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: PUSH
2157: LD_OWVAR 67
2161: ARRAY
2162: PUSH
2163: FOR_TO
2164: IFFALSE 2257
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
2166: LD_INT 0
2168: PPUSH
2169: LD_INT 5
2171: PUSH
2172: LD_INT 6
2174: PUSH
2175: LD_INT 7
2177: PUSH
2178: LD_INT 8
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_OWVAR 67
2191: ARRAY
2192: PPUSH
2193: CALL_OW 381
// un := CreateHuman ;
2197: LD_ADDR_VAR 0 5
2201: PUSH
2202: CALL_OW 44
2206: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2207: LD_VAR 0 5
2211: PPUSH
2212: LD_VAR 0 2
2216: PPUSH
2217: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_INT 9
2228: PPUSH
2229: CALL_OW 336
// if j = 2 then
2233: LD_VAR 0 3
2237: PUSH
2238: LD_INT 2
2240: EQUAL
2241: IFFALSE 2255
// SetUnitAttackType ( un , 3 ) ;
2243: LD_VAR 0 5
2247: PPUSH
2248: LD_INT 3
2250: PPUSH
2251: CALL_OW 603
// end ;
2255: GO 2163
2257: POP
2258: POP
// end ;
2259: GO 2126
2261: POP
2262: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2263: LD_ADDR_VAR 0 2
2267: PUSH
2268: DOUBLE
2269: LD_INT 1
2271: DEC
2272: ST_TO_ADDR
2273: LD_INT 5
2275: PUSH
2276: LD_INT 6
2278: PUSH
2279: LD_INT 6
2281: PUSH
2282: LD_INT 6
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_OWVAR 67
2295: ARRAY
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2345
// begin PrepareEngineer ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2300: LD_INT 0
2302: PPUSH
2303: LD_INT 6
2305: PUSH
2306: LD_INT 7
2308: PUSH
2309: LD_INT 9
2311: PUSH
2312: LD_INT 10
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: PUSH
2321: LD_OWVAR 67
2325: ARRAY
2326: PPUSH
2327: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
2331: CALL_OW 44
2335: PPUSH
2336: LD_INT 22
2338: PPUSH
2339: CALL_OW 52
// end ;
2343: GO 2297
2345: POP
2346: POP
// for i := 1 to 2 do
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: DOUBLE
2353: LD_INT 1
2355: DEC
2356: ST_TO_ADDR
2357: LD_INT 2
2359: PUSH
2360: FOR_TO
2361: IFFALSE 2441
// for j := 1 to 6 do
2363: LD_ADDR_VAR 0 3
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_INT 6
2375: PUSH
2376: FOR_TO
2377: IFFALSE 2437
// begin PrepareMechanic ( false , [ 6 , 7 , 9 , 10 ] [ Difficulty ] ) ;
2379: LD_INT 0
2381: PPUSH
2382: LD_INT 6
2384: PUSH
2385: LD_INT 7
2387: PUSH
2388: LD_INT 9
2390: PUSH
2391: LD_INT 10
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: PUSH
2400: LD_OWVAR 67
2404: ARRAY
2405: PPUSH
2406: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , [ ruFac1 , ruFac2 ] [ i ] ) ;
2410: CALL_OW 44
2414: PPUSH
2415: LD_INT 1
2417: PUSH
2418: LD_INT 40
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: LD_VAR 0 2
2429: ARRAY
2430: PPUSH
2431: CALL_OW 52
// end ;
2435: GO 2376
2437: POP
2438: POP
2439: GO 2360
2441: POP
2442: POP
// for i := 1 to 4 do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: DOUBLE
2449: LD_INT 1
2451: DEC
2452: ST_TO_ADDR
2453: LD_INT 4
2455: PUSH
2456: FOR_TO
2457: IFFALSE 2504
// begin PrepareScientist ( false , 6 ) ;
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 6
2464: PPUSH
2465: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , [ ruLab1 , ruLab2 ] [ i mod 2 + 1 ] ) ;
2469: CALL_OW 44
2473: PPUSH
2474: LD_INT 14
2476: PUSH
2477: LD_INT 15
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_VAR 0 2
2488: PUSH
2489: LD_INT 2
2491: MOD
2492: PUSH
2493: LD_INT 1
2495: PLUS
2496: ARRAY
2497: PPUSH
2498: CALL_OW 52
// end ;
2502: GO 2456
2504: POP
2505: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
2506: LD_INT 22
2508: PPUSH
2509: LD_INT 3
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: LD_INT 51
2517: PPUSH
2518: LD_INT 100
2520: PPUSH
2521: CALL 36350 0 5
// PlaceUnitXYR ( CreateVehicle , 116 , 58 , 2 , false ) ;
2525: CALL_OW 45
2529: PPUSH
2530: LD_INT 116
2532: PPUSH
2533: LD_INT 58
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: CALL_OW 50
// for i := 1 to 2 do
2546: LD_ADDR_VAR 0 2
2550: PUSH
2551: DOUBLE
2552: LD_INT 1
2554: DEC
2555: ST_TO_ADDR
2556: LD_INT 2
2558: PUSH
2559: FOR_TO
2560: IFFALSE 2604
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
2562: LD_INT 22
2564: PPUSH
2565: LD_INT 3
2567: PPUSH
2568: LD_INT 3
2570: PPUSH
2571: LD_INT 52
2573: PPUSH
2574: LD_INT 100
2576: PPUSH
2577: CALL 36350 0 5
// PlaceUnitXYR ( CreateVehicle , 111 , 58 , 4 , false ) ;
2581: CALL_OW 45
2585: PPUSH
2586: LD_INT 111
2588: PPUSH
2589: LD_INT 58
2591: PPUSH
2592: LD_INT 4
2594: PPUSH
2595: LD_INT 0
2597: PPUSH
2598: CALL_OW 50
// end ;
2602: GO 2559
2604: POP
2605: POP
// for i := 1 to 4 do
2606: LD_ADDR_VAR 0 2
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_INT 4
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2649
// begin PrepareApemanEngineer ( ) ;
2622: CALL 65033 0 0
// PlaceUnitXYR ( CreateHuman , 118 , 50 , 3 , false ) ;
2626: CALL_OW 44
2630: PPUSH
2631: LD_INT 118
2633: PPUSH
2634: LD_INT 50
2636: PPUSH
2637: LD_INT 3
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: CALL_OW 50
// end ;
2647: GO 2619
2649: POP
2650: POP
// end ;
2651: LD_VAR 0 1
2655: RET
// every 0 0$3 trigger ruTechList do var i , t , labs ;
2656: LD_EXP 19
2660: IFFALSE 2788
2662: GO 2664
2664: DISABLE
2665: LD_INT 0
2667: PPUSH
2668: PPUSH
2669: PPUSH
// begin enable ;
2670: ENABLE
// labs := UnitFilter ( [ ruLab1 , ruLab2 ] , [ f_ok ] ) ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: LD_INT 14
2678: PUSH
2679: LD_INT 15
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PPUSH
2686: LD_INT 50
2688: PUSH
2689: EMPTY
2690: LIST
2691: PPUSH
2692: CALL_OW 72
2696: ST_TO_ADDR
// if not labs then
2697: LD_VAR 0 3
2701: NOT
2702: IFFALSE 2707
// begin disable ;
2704: DISABLE
// exit ;
2705: GO 2788
// end ; for i in labs do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_VAR 0 3
2716: PUSH
2717: FOR_IN
2718: IFFALSE 2786
// if BuildingStatus ( i ) = bs_idle then
2720: LD_VAR 0 1
2724: PPUSH
2725: CALL_OW 461
2729: PUSH
2730: LD_INT 2
2732: EQUAL
2733: IFFALSE 2784
// for t in ruTechList do
2735: LD_ADDR_VAR 0 2
2739: PUSH
2740: LD_EXP 19
2744: PUSH
2745: FOR_IN
2746: IFFALSE 2782
// if CanBeResearched ( i , t ) then
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL_OW 430
2762: IFFALSE 2780
// begin ComResearch ( i , t ) ;
2764: LD_VAR 0 1
2768: PPUSH
2769: LD_VAR 0 2
2773: PPUSH
2774: CALL_OW 124
// break ;
2778: GO 2782
// end ;
2780: GO 2745
2782: POP
2783: POP
2784: GO 2717
2786: POP
2787: POP
// end ;
2788: PPOPN 3
2790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
2791: LD_INT 3
2793: PUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 1
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: EMPTY
2805: LIST
2806: LIST
2807: PUSH
2808: LD_INT 32
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PPUSH
2822: CALL_OW 69
2826: IFFALSE 2910
2828: GO 2830
2830: DISABLE
2831: LD_INT 0
2833: PPUSH
// begin enable ;
2834: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
2835: LD_ADDR_VAR 0 1
2839: PUSH
2840: LD_INT 3
2842: PUSH
2843: LD_INT 22
2845: PUSH
2846: LD_INT 1
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 32
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PPUSH
2871: CALL_OW 69
2875: PUSH
2876: FOR_IN
2877: IFFALSE 2908
// if GetFuel ( i ) < 3 then
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL_OW 261
2888: PUSH
2889: LD_INT 3
2891: LESS
2892: IFFALSE 2906
// SetFuel ( i , 3 ) ;
2894: LD_VAR 0 1
2898: PPUSH
2899: LD_INT 3
2901: PPUSH
2902: CALL_OW 240
2906: GO 2876
2908: POP
2909: POP
// end ;
2910: PPOPN 1
2912: END
// every 0 0$30 trigger UnitFilter ( [ ruFac1 , ruFac2 ] , [ [ f_not , [ f_full ] ] , [ f_ok ] ] ) and ruAttackers < [ 6 , 8 , 10 , 12 ] [ Difficulty ] do var i , chassis , weapon ;
2913: LD_INT 1
2915: PUSH
2916: LD_INT 40
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PPUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 62
2928: PUSH
2929: EMPTY
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: LD_INT 50
2938: PUSH
2939: EMPTY
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PPUSH
2946: CALL_OW 72
2950: PUSH
2951: LD_EXP 18
2955: PUSH
2956: LD_INT 6
2958: PUSH
2959: LD_INT 8
2961: PUSH
2962: LD_INT 10
2964: PUSH
2965: LD_INT 12
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: PUSH
2974: LD_OWVAR 67
2978: ARRAY
2979: LESS
2980: AND
2981: IFFALSE 3318
2983: GO 2985
2985: DISABLE
2986: LD_INT 0
2988: PPUSH
2989: PPUSH
2990: PPUSH
// begin enable ;
2991: ENABLE
// for i in UnitFilter ( [ ruFac1 , ruFac2 ] , [ f_ok ] ) do
2992: LD_ADDR_VAR 0 1
2996: PUSH
2997: LD_INT 1
2999: PUSH
3000: LD_INT 40
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PPUSH
3007: LD_INT 50
3009: PUSH
3010: EMPTY
3011: LIST
3012: PPUSH
3013: CALL_OW 72
3017: PUSH
3018: FOR_IN
3019: IFFALSE 3316
// begin if BuildingStatus ( i ) <> bs_idle then
3021: LD_VAR 0 1
3025: PPUSH
3026: CALL_OW 461
3030: PUSH
3031: LD_INT 2
3033: NONEQUAL
3034: IFFALSE 3038
// continue ;
3036: GO 3018
// if i = ruFac1 then
3038: LD_VAR 0 1
3042: PUSH
3043: LD_INT 1
3045: EQUAL
3046: IFFALSE 3089
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 5 ) ] else
3048: LD_ADDR_VAR 0 2
3052: PUSH
3053: LD_INT 21
3055: PUSH
3056: LD_INT 22
3058: PUSH
3059: LD_INT 23
3061: PUSH
3062: LD_INT 23
3064: PUSH
3065: LD_INT 24
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: PUSH
3075: LD_INT 1
3077: PPUSH
3078: LD_INT 5
3080: PPUSH
3081: CALL_OW 12
3085: ARRAY
3086: ST_TO_ADDR
3087: GO 3116
// chassis := [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ;
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: LD_INT 21
3096: PUSH
3097: LD_INT 23
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 2
3109: PPUSH
3110: CALL_OW 12
3114: ARRAY
3115: ST_TO_ADDR
// weapon := [ ru_time_lapser , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] ;
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_INT 49
3123: PUSH
3124: LD_INT 44
3126: PUSH
3127: LD_INT 43
3129: PUSH
3130: LD_INT 46
3132: PUSH
3133: LD_INT 45
3135: PUSH
3136: LD_INT 46
3138: PUSH
3139: LD_INT 45
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: ST_TO_ADDR
// if not russianRocketsDisabled then
3151: LD_EXP 6
3155: NOT
3156: IFFALSE 3176
// weapon := Join ( weapon , ru_rocket ) ;
3158: LD_ADDR_VAR 0 3
3162: PUSH
3163: LD_VAR 0 3
3167: PPUSH
3168: LD_INT 47
3170: PPUSH
3171: CALL 68831 0 2
3175: ST_TO_ADDR
// weapon := weapon [ rand ( 1 , Count ( weapon ) ) ] ;
3176: LD_ADDR_VAR 0 3
3180: PUSH
3181: LD_VAR 0 3
3185: PUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_VAR 0 3
3193: PPUSH
3194: CALL 33612 0 1
3198: PPUSH
3199: CALL_OW 12
3203: ARRAY
3204: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon in [ ru_heavy_gun , ru_rocket ] then
3205: LD_VAR 0 2
3209: PUSH
3210: LD_INT 21
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: IN
3220: PUSH
3221: LD_VAR 0 3
3225: PUSH
3226: LD_INT 46
3228: PUSH
3229: LD_INT 47
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: IN
3236: AND
3237: IFFALSE 3270
// weapon := [ ru_gun , ru_rocket_launcher , ru_time_lapser ] [ rand ( 1 , 3 ) ] ;
3239: LD_ADDR_VAR 0 3
3243: PUSH
3244: LD_INT 44
3246: PUSH
3247: LD_INT 45
3249: PUSH
3250: LD_INT 49
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 1
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: CALL_OW 12
3268: ARRAY
3269: ST_TO_ADDR
// AddComConstruct ( i , chassis , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , weapon ) ;
3270: LD_VAR 0 1
3274: PPUSH
3275: LD_VAR 0 2
3279: PPUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 3
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 2
3295: PPUSH
3296: CALL_OW 12
3300: ARRAY
3301: PPUSH
3302: LD_INT 3
3304: PPUSH
3305: LD_VAR 0 3
3309: PPUSH
3310: CALL_OW 185
// end ;
3314: GO 3018
3316: POP
3317: POP
// end ;
3318: PPOPN 3
3320: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
3321: LD_INT 22
3323: PPUSH
3324: CALL_OW 302
3328: IFFALSE 4185
3330: GO 3332
3332: DISABLE
3333: LD_INT 0
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
3339: PPUSH
3340: PPUSH
3341: PPUSH
3342: PPUSH
// begin enable ;
3343: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
3344: LD_ADDR_VAR 0 3
3348: PUSH
3349: LD_INT 12
3351: PPUSH
3352: LD_INT 3
3354: PUSH
3355: LD_INT 24
3357: PUSH
3358: LD_INT 1000
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 21
3371: PUSH
3372: LD_INT 3
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 70
3387: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3388: LD_ADDR_VAR 0 4
3392: PUSH
3393: LD_INT 22
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 25
3405: PUSH
3406: LD_INT 2
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 69
3421: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
3422: LD_ADDR_VAR 0 5
3426: PUSH
3427: LD_INT 22
3429: PUSH
3430: LD_INT 3
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 34
3439: PUSH
3440: LD_INT 52
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
3456: LD_ADDR_VAR 0 7
3460: PUSH
3461: LD_INT 22
3463: PUSH
3464: LD_INT 3
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 25
3473: PUSH
3474: LD_INT 4
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PPUSH
3485: CALL_OW 69
3489: ST_TO_ADDR
// lab := [ ruLab1 , ruLab2 ] ;
3490: LD_ADDR_VAR 0 8
3494: PUSH
3495: LD_INT 14
3497: PUSH
3498: LD_INT 15
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
3505: LD_VAR 0 7
3509: PUSH
3510: LD_VAR 0 4
3514: PPUSH
3515: LD_INT 120
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PPUSH
3525: CALL_OW 72
3529: AND
3530: IFFALSE 3543
// ComExitAll ( sci ) else
3532: LD_VAR 0 7
3536: PPUSH
3537: CALL 69312 0 1
3541: GO 3625
// if sci then
3543: LD_VAR 0 7
3547: IFFALSE 3625
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and lab then
3549: LD_VAR 0 7
3553: PPUSH
3554: LD_INT 3
3556: PUSH
3557: LD_INT 54
3559: PUSH
3560: EMPTY
3561: LIST
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: PPUSH
3567: CALL_OW 72
3571: PUSH
3572: LD_VAR 0 8
3576: AND
3577: IFFALSE 3625
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab [ rand ( 1 , lab ) ] ) ;
3579: LD_VAR 0 7
3583: PPUSH
3584: LD_INT 3
3586: PUSH
3587: LD_INT 54
3589: PUSH
3590: EMPTY
3591: LIST
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PPUSH
3597: CALL_OW 72
3601: PPUSH
3602: LD_VAR 0 8
3606: PUSH
3607: LD_INT 1
3609: PPUSH
3610: LD_VAR 0 8
3614: PPUSH
3615: CALL_OW 12
3619: ARRAY
3620: PPUSH
3621: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
3625: LD_VAR 0 5
3629: PPUSH
3630: LD_INT 50
3632: PUSH
3633: EMPTY
3634: LIST
3635: PPUSH
3636: CALL_OW 72
3640: PUSH
3641: LD_VAR 0 3
3645: AND
3646: IFFALSE 3687
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , NearestUnitToUnit ( b , crane [ 1 ] ) ) ;
3648: LD_VAR 0 5
3652: PPUSH
3653: LD_INT 50
3655: PUSH
3656: EMPTY
3657: LIST
3658: PPUSH
3659: CALL_OW 72
3663: PPUSH
3664: LD_VAR 0 3
3668: PPUSH
3669: LD_VAR 0 5
3673: PUSH
3674: LD_INT 1
3676: ARRAY
3677: PPUSH
3678: CALL_OW 74
3682: PPUSH
3683: CALL_OW 130
// if eng then
3687: LD_VAR 0 4
3691: IFFALSE 4185
// begin for i in eng do
3693: LD_ADDR_VAR 0 1
3697: PUSH
3698: LD_VAR 0 4
3702: PUSH
3703: FOR_IN
3704: IFFALSE 4183
// begin tag := GetTag ( i ) ;
3706: LD_ADDR_VAR 0 6
3710: PUSH
3711: LD_VAR 0 1
3715: PPUSH
3716: CALL_OW 110
3720: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
3721: LD_VAR 0 3
3725: NOT
3726: PUSH
3727: LD_EXP 17
3731: NOT
3732: AND
3733: PUSH
3734: LD_VAR 0 6
3738: PUSH
3739: LD_INT 1
3741: EQUAL
3742: AND
3743: IFFALSE 3769
// begin SetTag ( i , 0 ) ;
3745: LD_VAR 0 1
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
3757: LD_VAR 0 1
3761: PPUSH
3762: LD_INT 22
3764: PPUSH
3765: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
3769: LD_VAR 0 3
3773: PUSH
3774: LD_EXP 17
3778: OR
3779: PUSH
3780: LD_VAR 0 6
3784: PUSH
3785: LD_INT 0
3787: EQUAL
3788: AND
3789: IFFALSE 3803
// SetTag ( i , 1 ) ;
3791: LD_VAR 0 1
3795: PPUSH
3796: LD_INT 1
3798: PPUSH
3799: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 310
3812: PUSH
3813: LD_VAR 0 6
3817: PUSH
3818: LD_INT 1
3820: EQUAL
3821: AND
3822: IFFALSE 3833
// ComExit ( i ) ;
3824: LD_VAR 0 1
3828: PPUSH
3829: CALL 69229 0 1
// if GetLives ( i ) < 700 and tag = 1 then
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 256
3842: PUSH
3843: LD_INT 700
3845: LESS
3846: PUSH
3847: LD_VAR 0 6
3851: PUSH
3852: LD_INT 1
3854: EQUAL
3855: AND
3856: IFFALSE 3870
// SetTag ( i , 2 ) ;
3858: LD_VAR 0 1
3862: PPUSH
3863: LD_INT 2
3865: PPUSH
3866: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 256
3879: PUSH
3880: LD_INT 1000
3882: EQUAL
3883: PUSH
3884: LD_VAR 0 6
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: AND
3893: IFFALSE 3907
// SetTag ( i , 1 ) ;
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 109
// if tag = 2 then
3907: LD_VAR 0 6
3911: PUSH
3912: LD_INT 2
3914: EQUAL
3915: IFFALSE 3962
// begin if GetDistUnitXY ( i , 110 , 41 ) > 6 then
3917: LD_VAR 0 1
3921: PPUSH
3922: LD_INT 110
3924: PPUSH
3925: LD_INT 41
3927: PPUSH
3928: CALL_OW 297
3932: PUSH
3933: LD_INT 6
3935: GREATER
3936: IFFALSE 3962
// begin ComMoveXY ( i , 110 , 41 ) ;
3938: LD_VAR 0 1
3942: PPUSH
3943: LD_INT 110
3945: PPUSH
3946: LD_INT 41
3948: PPUSH
3949: CALL_OW 111
// AddComHold ( i ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 11
3969: PPUSH
3970: CALL_OW 308
3974: IFFALSE 3988
// ComMoveToArea ( i , ruBaseArea ) ;
3976: LD_VAR 0 1
3980: PPUSH
3981: LD_INT 12
3983: PPUSH
3984: CALL_OW 113
// if tag = 1 then
3988: LD_VAR 0 6
3992: PUSH
3993: LD_INT 1
3995: EQUAL
3996: IFFALSE 4181
// begin if b then
3998: LD_VAR 0 3
4002: IFFALSE 4030
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
4004: LD_VAR 0 1
4008: PPUSH
4009: LD_VAR 0 3
4013: PPUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: CALL_OW 74
4023: PPUSH
4024: CALL_OW 130
4028: GO 4181
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
4030: LD_EXP 17
4034: PUSH
4035: LD_INT 11
4037: PPUSH
4038: LD_INT 81
4040: PUSH
4041: LD_INT 3
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 70
4052: PUSH
4053: LD_INT 0
4055: EQUAL
4056: AND
4057: PUSH
4058: LD_INT 22
4060: PPUSH
4061: LD_EXP 17
4065: PUSH
4066: LD_INT 1
4068: ARRAY
4069: PUSH
4070: LD_INT 1
4072: ARRAY
4073: PPUSH
4074: LD_EXP 17
4078: PUSH
4079: LD_INT 1
4081: ARRAY
4082: PUSH
4083: LD_INT 2
4085: ARRAY
4086: PPUSH
4087: LD_EXP 17
4091: PUSH
4092: LD_INT 1
4094: ARRAY
4095: PUSH
4096: LD_INT 3
4098: ARRAY
4099: PPUSH
4100: LD_EXP 17
4104: PUSH
4105: LD_INT 1
4107: ARRAY
4108: PUSH
4109: LD_INT 4
4111: ARRAY
4112: PPUSH
4113: CALL 44578 0 5
4117: AND
4118: IFFALSE 4181
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
4120: LD_VAR 0 1
4124: PPUSH
4125: LD_EXP 17
4129: PUSH
4130: LD_INT 1
4132: ARRAY
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: PPUSH
4138: LD_EXP 17
4142: PUSH
4143: LD_INT 1
4145: ARRAY
4146: PUSH
4147: LD_INT 2
4149: ARRAY
4150: PPUSH
4151: LD_EXP 17
4155: PUSH
4156: LD_INT 1
4158: ARRAY
4159: PUSH
4160: LD_INT 3
4162: ARRAY
4163: PPUSH
4164: LD_EXP 17
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PUSH
4173: LD_INT 4
4175: ARRAY
4176: PPUSH
4177: CALL_OW 145
// end ; end ;
4181: GO 3703
4183: POP
4184: POP
// end ; end ;
4185: PPOPN 8
4187: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) and GetListOfCratesInArea ( cratesNorth ) do var i , tmp ;
4188: LD_INT 22
4190: PUSH
4191: LD_INT 3
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 3
4200: PUSH
4201: LD_INT 60
4203: PUSH
4204: EMPTY
4205: LIST
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 50
4213: PUSH
4214: EMPTY
4215: LIST
4216: PUSH
4217: LD_INT 25
4219: PUSH
4220: LD_INT 16
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: PPUSH
4233: CALL_OW 69
4237: PUSH
4238: LD_INT 14
4240: PPUSH
4241: CALL_OW 435
4245: AND
4246: IFFALSE 4358
4248: GO 4250
4250: DISABLE
4251: LD_INT 0
4253: PPUSH
4254: PPUSH
// begin enable ;
4255: ENABLE
// tmp := GetListOfCratesInArea ( cratesNorth ) ;
4256: LD_ADDR_VAR 0 2
4260: PUSH
4261: LD_INT 14
4263: PPUSH
4264: CALL_OW 435
4268: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_class , class_apeman_engineer ] ] ) do
4269: LD_ADDR_VAR 0 1
4273: PUSH
4274: LD_INT 22
4276: PUSH
4277: LD_INT 3
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 3
4286: PUSH
4287: LD_INT 60
4289: PUSH
4290: EMPTY
4291: LIST
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 50
4299: PUSH
4300: EMPTY
4301: LIST
4302: PUSH
4303: LD_INT 25
4305: PUSH
4306: LD_INT 16
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PUSH
4324: FOR_IN
4325: IFFALSE 4356
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4327: LD_VAR 0 1
4331: PPUSH
4332: LD_VAR 0 2
4336: PUSH
4337: LD_INT 1
4339: ARRAY
4340: PPUSH
4341: LD_VAR 0 2
4345: PUSH
4346: LD_INT 2
4348: ARRAY
4349: PPUSH
4350: CALL_OW 117
4354: GO 4324
4356: POP
4357: POP
// end ;
4358: PPOPN 2
4360: END
// every 0 0$20 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) and GetListOfCratesInArea ( cratesSouth ) do var i , tmp ;
4361: LD_INT 22
4363: PUSH
4364: LD_INT 3
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 60
4376: PUSH
4377: EMPTY
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 50
4386: PUSH
4387: EMPTY
4388: LIST
4389: PUSH
4390: LD_INT 34
4392: PUSH
4393: LD_INT 51
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 69
4410: PUSH
4411: LD_INT 13
4413: PPUSH
4414: CALL_OW 435
4418: AND
4419: IFFALSE 4531
4421: GO 4423
4423: DISABLE
4424: LD_INT 0
4426: PPUSH
4427: PPUSH
// begin enable ;
4428: ENABLE
// tmp := GetListOfCratesInArea ( cratesSouth ) ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_INT 13
4436: PPUSH
4437: CALL_OW 435
4441: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) do
4442: LD_ADDR_VAR 0 1
4446: PUSH
4447: LD_INT 22
4449: PUSH
4450: LD_INT 3
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: LD_INT 60
4462: PUSH
4463: EMPTY
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 50
4472: PUSH
4473: EMPTY
4474: LIST
4475: PUSH
4476: LD_INT 34
4478: PUSH
4479: LD_INT 51
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PPUSH
4492: CALL_OW 69
4496: PUSH
4497: FOR_IN
4498: IFFALSE 4529
// ComCollect ( i , tmp [ 1 ] , tmp [ 2 ] ) ;
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_VAR 0 2
4509: PUSH
4510: LD_INT 1
4512: ARRAY
4513: PPUSH
4514: LD_VAR 0 2
4518: PUSH
4519: LD_INT 2
4521: ARRAY
4522: PPUSH
4523: CALL_OW 117
4527: GO 4497
4529: POP
4530: POP
// end ;
4531: PPOPN 2
4533: END
// every 20 20$00 trigger Difficulty > 1 and IsOk ( ruFac1 ) do var i ;
4534: LD_OWVAR 67
4538: PUSH
4539: LD_INT 1
4541: GREATER
4542: PUSH
4543: LD_INT 1
4545: PPUSH
4546: CALL_OW 302
4550: AND
4551: IFFALSE 4709
4553: GO 4555
4555: DISABLE
4556: LD_INT 0
4558: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
4559: LD_ADDR_VAR 0 1
4563: PUSH
4564: DOUBLE
4565: LD_INT 1
4567: DEC
4568: ST_TO_ADDR
4569: LD_INT 3
4571: PUSH
4572: LD_INT 4
4574: PUSH
4575: LD_INT 5
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: LD_OWVAR 67
4587: PUSH
4588: LD_INT 1
4590: MINUS
4591: ARRAY
4592: PUSH
4593: FOR_TO
4594: IFFALSE 4638
// begin AddComConstruct ( [ ruFac1 , ruFac2 ] [ i mod 2 + 1 ] , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4596: LD_INT 1
4598: PUSH
4599: LD_INT 40
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_VAR 0 1
4610: PUSH
4611: LD_INT 2
4613: MOD
4614: PUSH
4615: LD_INT 1
4617: PLUS
4618: ARRAY
4619: PPUSH
4620: LD_INT 21
4622: PPUSH
4623: LD_INT 3
4625: PPUSH
4626: LD_INT 1
4628: PPUSH
4629: LD_INT 45
4631: PPUSH
4632: CALL_OW 185
// end ;
4636: GO 4593
4638: POP
4639: POP
// repeat wait ( 6 6$00 ) ;
4640: LD_INT 12600
4642: PPUSH
4643: CALL_OW 67
// for i := 1 to 2 do
4647: LD_ADDR_VAR 0 1
4651: PUSH
4652: DOUBLE
4653: LD_INT 1
4655: DEC
4656: ST_TO_ADDR
4657: LD_INT 2
4659: PUSH
4660: FOR_TO
4661: IFFALSE 4684
// AddComConstruct ( ruFac1 , ru_medium_wheeled , engine_siberite , control_manual , ru_rocket_launcher ) ;
4663: LD_INT 1
4665: PPUSH
4666: LD_INT 21
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: LD_INT 45
4677: PPUSH
4678: CALL_OW 185
4682: GO 4660
4684: POP
4685: POP
// until not IsOk ( ruFac1 ) or UnitsInside ( ruFac1 ) = 0 ;
4686: LD_INT 1
4688: PPUSH
4689: CALL_OW 302
4693: NOT
4694: PUSH
4695: LD_INT 1
4697: PPUSH
4698: CALL_OW 313
4702: PUSH
4703: LD_INT 0
4705: EQUAL
4706: OR
4707: IFFALSE 4640
// end ;
4709: PPOPN 1
4711: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
4712: LD_EXP 16
4716: IFFALSE 5302
4718: GO 4720
4720: DISABLE
4721: LD_INT 0
4723: PPUSH
4724: PPUSH
4725: PPUSH
// begin enable ;
4726: ENABLE
// if not ruMobile then
4727: LD_EXP 16
4731: NOT
4732: IFFALSE 4736
// exit ;
4734: GO 5302
// for i in ruMobile do
4736: LD_ADDR_VAR 0 1
4740: PUSH
4741: LD_EXP 16
4745: PUSH
4746: FOR_IN
4747: IFFALSE 5300
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
4749: LD_VAR 0 1
4753: PPUSH
4754: CALL_OW 302
4758: NOT
4759: PUSH
4760: LD_VAR 0 1
4764: PPUSH
4765: CALL_OW 255
4769: PUSH
4770: LD_INT 3
4772: NONEQUAL
4773: OR
4774: IFFALSE 4794
// begin ruMobile := ruMobile diff i ;
4776: LD_ADDR_EXP 16
4780: PUSH
4781: LD_EXP 16
4785: PUSH
4786: LD_VAR 0 1
4790: DIFF
4791: ST_TO_ADDR
// continue ;
4792: GO 4746
// end ; if GetTag ( i ) = 300 then
4794: LD_VAR 0 1
4798: PPUSH
4799: CALL_OW 110
4803: PUSH
4804: LD_INT 300
4806: EQUAL
4807: IFFALSE 4937
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
4809: LD_VAR 0 1
4813: PPUSH
4814: CALL_OW 261
4818: PUSH
4819: LD_INT 50
4821: LESS
4822: PUSH
4823: LD_VAR 0 1
4827: PPUSH
4828: CALL_OW 262
4832: PUSH
4833: LD_INT 1
4835: EQUAL
4836: AND
4837: IFFALSE 4896
// begin ComMoveXY ( i , 120 , 58 ) ;
4839: LD_VAR 0 1
4843: PPUSH
4844: LD_INT 120
4846: PPUSH
4847: LD_INT 58
4849: PPUSH
4850: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4854: LD_INT 35
4856: PPUSH
4857: CALL_OW 67
// until GetDistUnitXY ( i , 120 , 58 ) < 4 ;
4861: LD_VAR 0 1
4865: PPUSH
4866: LD_INT 120
4868: PPUSH
4869: LD_INT 58
4871: PPUSH
4872: CALL_OW 297
4876: PUSH
4877: LD_INT 4
4879: LESS
4880: IFFALSE 4854
// SetFuel ( i , 100 ) ;
4882: LD_VAR 0 1
4886: PPUSH
4887: LD_INT 100
4889: PPUSH
4890: CALL_OW 240
// end else
4894: GO 4937
// if not IsInArea ( i , ruParkingArea ) then
4896: LD_VAR 0 1
4900: PPUSH
4901: LD_INT 10
4903: PPUSH
4904: CALL_OW 308
4908: NOT
4909: IFFALSE 4925
// ComMoveToArea ( i , ruParkingArea ) else
4911: LD_VAR 0 1
4915: PPUSH
4916: LD_INT 10
4918: PPUSH
4919: CALL_OW 113
4923: GO 4937
// SetTag ( i , 301 ) ;
4925: LD_VAR 0 1
4929: PPUSH
4930: LD_INT 301
4932: PPUSH
4933: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
4937: LD_VAR 0 1
4941: PPUSH
4942: CALL_OW 110
4946: PUSH
4947: LD_INT 301
4949: EQUAL
4950: IFFALSE 5080
// begin if GetLives ( i ) < 1000 then
4952: LD_VAR 0 1
4956: PPUSH
4957: CALL_OW 256
4961: PUSH
4962: LD_INT 1000
4964: LESS
4965: IFFALSE 5057
// begin if not IsDrivenBy ( i ) then
4967: LD_VAR 0 1
4971: PPUSH
4972: CALL_OW 311
4976: NOT
4977: IFFALSE 4981
// continue ;
4979: GO 4746
// mech := IsDrivenBy ( i ) ;
4981: LD_ADDR_VAR 0 2
4985: PUSH
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 311
4995: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
4996: LD_VAR 0 2
5000: PPUSH
5001: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
5005: LD_VAR 0 2
5009: PPUSH
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5019: LD_INT 35
5021: PPUSH
5022: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5026: LD_VAR 0 1
5030: PPUSH
5031: CALL_OW 256
5035: PUSH
5036: LD_INT 1000
5038: EQUAL
5039: IFFALSE 5019
// ComEnterUnit ( mech , i ) ;
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL_OW 120
// end else
5055: GO 5080
// if IsDrivenBy ( i ) then
5057: LD_VAR 0 1
5061: PPUSH
5062: CALL_OW 311
5066: IFFALSE 5080
// SetTag ( i , 0 ) ;
5068: LD_VAR 0 1
5072: PPUSH
5073: LD_INT 0
5075: PPUSH
5076: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 110
5089: PUSH
5090: LD_INT 300
5092: LESS
5093: IFFALSE 5298
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: LD_INT 11
5102: PPUSH
5103: LD_INT 81
5105: PUSH
5106: LD_INT 3
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PPUSH
5113: CALL_OW 70
5117: ST_TO_ADDR
// if GetLives ( i ) < 650 then
5118: LD_VAR 0 1
5122: PPUSH
5123: CALL_OW 256
5127: PUSH
5128: LD_INT 650
5130: LESS
5131: IFFALSE 5156
// begin ComStop ( i ) ;
5133: LD_VAR 0 1
5137: PPUSH
5138: CALL_OW 141
// SetTag ( i , 300 ) ;
5142: LD_VAR 0 1
5146: PPUSH
5147: LD_INT 300
5149: PPUSH
5150: CALL_OW 109
// continue ;
5154: GO 4746
// end ; if enemy then
5156: LD_VAR 0 3
5160: IFFALSE 5200
// begin if not HasTask ( i ) then
5162: LD_VAR 0 1
5166: PPUSH
5167: CALL_OW 314
5171: NOT
5172: IFFALSE 5198
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5174: LD_VAR 0 1
5178: PPUSH
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_VAR 0 1
5188: PPUSH
5189: CALL_OW 74
5193: PPUSH
5194: CALL_OW 115
// end else
5198: GO 5298
// if ruMobile then
5200: LD_EXP 16
5204: IFFALSE 5298
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
5206: LD_ADDR_VAR 0 3
5210: PUSH
5211: LD_INT 81
5213: PUSH
5214: LD_INT 3
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: ST_TO_ADDR
// if enemy then
5226: LD_VAR 0 3
5230: IFFALSE 5298
// AgressiveMove ( i , [ [ 113 , 80 ] , [ 118 , 100 ] , [ 107 , 102 ] , [ 114 , 120 ] , [ 86 , 116 ] ] ) ;
5232: LD_VAR 0 1
5236: PPUSH
5237: LD_INT 113
5239: PUSH
5240: LD_INT 80
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 118
5249: PUSH
5250: LD_INT 100
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: LD_INT 107
5259: PUSH
5260: LD_INT 102
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 114
5269: PUSH
5270: LD_INT 120
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 86
5279: PUSH
5280: LD_INT 116
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: PPUSH
5294: CALL 71435 0 2
// end ; end ; end ;
5298: GO 4746
5300: POP
5301: POP
// end ;
5302: PPOPN 3
5304: END
// every 7 7$00 + 4 4$00 trigger ruAttackers do var tmp ;
5305: LD_EXP 18
5309: IFFALSE 5355
5311: GO 5313
5313: DISABLE
5314: LD_INT 0
5316: PPUSH
// begin enable ;
5317: ENABLE
// tmp := UnitFilter ( ruAttackers , [ f_ok ] ) ;
5318: LD_ADDR_VAR 0 1
5322: PUSH
5323: LD_EXP 18
5327: PPUSH
5328: LD_INT 50
5330: PUSH
5331: EMPTY
5332: LIST
5333: PPUSH
5334: CALL_OW 72
5338: ST_TO_ADDR
// ruAttackers := [ ] ;
5339: LD_ADDR_EXP 18
5343: PUSH
5344: EMPTY
5345: ST_TO_ADDR
// SendAttack ( tmp ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: CALL 5358 0 1
// end ;
5355: PPOPN 1
5357: END
// function SendAttack ( group ) ; var i , tmp ; begin
5358: LD_INT 0
5360: PPUSH
5361: PPUSH
5362: PPUSH
// for i in group do
5363: LD_ADDR_VAR 0 3
5367: PUSH
5368: LD_VAR 0 1
5372: PUSH
5373: FOR_IN
5374: IFFALSE 5440
// begin SetTag ( i , 0 ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: LD_INT 0
5383: PPUSH
5384: CALL_OW 109
// if Prob ( 30 ) then
5388: LD_INT 30
5390: PPUSH
5391: CALL_OW 13
5395: IFFALSE 5423
// begin SetTag ( i , 1 ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 109
// ComEnterUnit ( i , ruTeleport ) ;
5409: LD_VAR 0 3
5413: PPUSH
5414: LD_INT 116
5416: PPUSH
5417: CALL_OW 120
// end else
5421: GO 5438
// ComAgressiveMove ( i , 118 , 93 ) ;
5423: LD_VAR 0 3
5427: PPUSH
5428: LD_INT 118
5430: PPUSH
5431: LD_INT 93
5433: PPUSH
5434: CALL_OW 114
// end ;
5438: GO 5373
5440: POP
5441: POP
// repeat wait ( 0 0$1 ) ;
5442: LD_INT 35
5444: PPUSH
5445: CALL_OW 67
// tmp := UnitFilter ( group , [ f_tag , 0 ] ) ;
5449: LD_ADDR_VAR 0 4
5453: PUSH
5454: LD_VAR 0 1
5458: PPUSH
5459: LD_INT 120
5461: PUSH
5462: LD_INT 0
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 72
5473: ST_TO_ADDR
// for i in tmp do
5474: LD_ADDR_VAR 0 3
5478: PUSH
5479: LD_VAR 0 4
5483: PUSH
5484: FOR_IN
5485: IFFALSE 5632
// begin if not IsOk ( i ) then
5487: LD_VAR 0 3
5491: PPUSH
5492: CALL_OW 302
5496: NOT
5497: IFFALSE 5517
// begin tmp := tmp diff i ;
5499: LD_ADDR_VAR 0 4
5503: PUSH
5504: LD_VAR 0 4
5508: PUSH
5509: LD_VAR 0 3
5513: DIFF
5514: ST_TO_ADDR
// continue ;
5515: GO 5484
// end ; if GetDistUnits ( i , usDep ) < 8 then
5517: LD_VAR 0 3
5521: PPUSH
5522: LD_INT 48
5524: PPUSH
5525: CALL_OW 296
5529: PUSH
5530: LD_INT 8
5532: LESS
5533: IFFALSE 5549
// begin ComAttackUnit ( i , usDep ) ;
5535: LD_VAR 0 3
5539: PPUSH
5540: LD_INT 48
5542: PPUSH
5543: CALL_OW 115
// continue ;
5547: GO 5484
// end ; if not See ( 1 , i ) then
5549: LD_INT 1
5551: PPUSH
5552: LD_VAR 0 3
5556: PPUSH
5557: CALL_OW 292
5561: NOT
5562: IFFALSE 5581
// ComAgressiveMove ( i , 86 , 116 ) else
5564: LD_VAR 0 3
5568: PPUSH
5569: LD_INT 86
5571: PPUSH
5572: LD_INT 116
5574: PPUSH
5575: CALL_OW 114
5579: GO 5630
// if GetWeapon ( i ) <> ru_time_lapser then
5581: LD_VAR 0 3
5585: PPUSH
5586: CALL_OW 264
5590: PUSH
5591: LD_INT 49
5593: NONEQUAL
5594: IFFALSE 5630
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
5596: LD_VAR 0 3
5600: PPUSH
5601: LD_INT 81
5603: PUSH
5604: LD_INT 3
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PPUSH
5611: CALL_OW 69
5615: PPUSH
5616: LD_VAR 0 3
5620: PPUSH
5621: CALL_OW 74
5625: PPUSH
5626: CALL_OW 115
// end ;
5630: GO 5484
5632: POP
5633: POP
// until not tmp ;
5634: LD_VAR 0 4
5638: NOT
5639: IFFALSE 5442
// end ; end_of_file
5641: LD_VAR 0 2
5645: RET
// on UnitDestroyed ( unit ) do var i , tmp ;
5646: LD_INT 0
5648: PPUSH
5649: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
5650: LD_VAR 0 1
5654: PPUSH
5655: CALL 27221 0 1
// if unit = JMM then
5659: LD_VAR 0 1
5663: PUSH
5664: LD_EXP 8
5668: EQUAL
5669: IFFALSE 5678
// YouLost ( JMM ) ;
5671: LD_STRING JMM
5673: PPUSH
5674: CALL_OW 104
// if GetSide ( unit ) = 4 then
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL_OW 255
5687: PUSH
5688: LD_INT 4
5690: EQUAL
5691: IFFALSE 5750
// begin if unit = Joan then
5693: LD_VAR 0 1
5697: PUSH
5698: LD_EXP 10
5702: EQUAL
5703: IFFALSE 5712
// YouLost ( Joan ) ;
5705: LD_STRING Joan
5707: PPUSH
5708: CALL_OW 104
// if unit = Connie then
5712: LD_VAR 0 1
5716: PUSH
5717: LD_EXP 12
5721: EQUAL
5722: IFFALSE 5731
// YouLost ( Connie ) ;
5724: LD_STRING Connie
5726: PPUSH
5727: CALL_OW 104
// if unit = Lisa then
5731: LD_VAR 0 1
5735: PUSH
5736: LD_EXP 11
5740: EQUAL
5741: IFFALSE 5750
// YouLost ( Lisa ) ;
5743: LD_STRING Lisa
5745: PPUSH
5746: CALL_OW 104
// end ; if unit in ruAttackers then
5750: LD_VAR 0 1
5754: PUSH
5755: LD_EXP 18
5759: IN
5760: IFFALSE 5778
// ruAttackers := ruAttackers diff unit ;
5762: LD_ADDR_EXP 18
5766: PUSH
5767: LD_EXP 18
5771: PUSH
5772: LD_VAR 0 1
5776: DIFF
5777: ST_TO_ADDR
// if GetWeapon ( unit ) = ru_cargo_bay and IsOk ( ruFac2 ) then
5778: LD_VAR 0 1
5782: PPUSH
5783: CALL_OW 264
5787: PUSH
5788: LD_INT 51
5790: EQUAL
5791: PUSH
5792: LD_INT 40
5794: PPUSH
5795: CALL_OW 302
5799: AND
5800: IFFALSE 5840
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_cargo_bay ) ;
5802: LD_INT 40
5804: PPUSH
5805: LD_INT 21
5807: PPUSH
5808: LD_INT 1
5810: PUSH
5811: LD_INT 3
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 1
5820: PPUSH
5821: LD_INT 2
5823: PPUSH
5824: CALL_OW 12
5828: ARRAY
5829: PPUSH
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 51
5835: PPUSH
5836: CALL_OW 185
// if GetWeapon ( unit ) = ru_crane and IsOk ( ruFac2 ) then
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 264
5849: PUSH
5850: LD_INT 52
5852: EQUAL
5853: PUSH
5854: LD_INT 40
5856: PPUSH
5857: CALL_OW 302
5861: AND
5862: IFFALSE 5902
// AddComConstruct ( ruFac2 , ru_medium_wheeled , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , ru_crane ) ;
5864: LD_INT 40
5866: PPUSH
5867: LD_INT 21
5869: PPUSH
5870: LD_INT 1
5872: PUSH
5873: LD_INT 3
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PUSH
5880: LD_INT 1
5882: PPUSH
5883: LD_INT 2
5885: PPUSH
5886: CALL_OW 12
5890: ARRAY
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: LD_INT 52
5897: PPUSH
5898: CALL_OW 185
// if unit in ruMobile then
5902: LD_VAR 0 1
5906: PUSH
5907: LD_EXP 16
5911: IN
5912: IFFALSE 5930
// ruMobile := ruMobile diff i ;
5914: LD_ADDR_EXP 16
5918: PUSH
5919: LD_EXP 16
5923: PUSH
5924: LD_VAR 0 2
5928: DIFF
5929: ST_TO_ADDR
// if unit = ruCommander then
5930: LD_VAR 0 1
5934: PUSH
5935: LD_EXP 14
5939: EQUAL
5940: IFFALSE 6103
// begin repeat wait ( 0 0$2 ) ;
5942: LD_INT 70
5944: PPUSH
5945: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 23
5966: PUSH
5967: LD_INT 3
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 50
5976: PUSH
5977: EMPTY
5978: LIST
5979: PUSH
5980: LD_INT 21
5982: PUSH
5983: LD_INT 1
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 69
6000: ST_TO_ADDR
// if tmp then
6001: LD_VAR 0 3
6005: IFFALSE 6096
// for i in tmp do
6007: LD_ADDR_VAR 0 2
6011: PUSH
6012: LD_VAR 0 3
6016: PUSH
6017: FOR_IN
6018: IFFALSE 6094
// begin if IsInUnit ( i ) then
6020: LD_VAR 0 2
6024: PPUSH
6025: CALL_OW 310
6029: IFFALSE 6040
// ComExit ( i ) ;
6031: LD_VAR 0 2
6035: PPUSH
6036: CALL 69229 0 1
// wait ( 3 ) ;
6040: LD_INT 3
6042: PPUSH
6043: CALL_OW 67
// ComMoveXY ( i , 147 , 18 ) ;
6047: LD_VAR 0 2
6051: PPUSH
6052: LD_INT 147
6054: PPUSH
6055: LD_INT 18
6057: PPUSH
6058: CALL_OW 111
// if GetDistUnitXY ( i , 147 , 18 ) < 3 then
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_INT 147
6069: PPUSH
6070: LD_INT 18
6072: PPUSH
6073: CALL_OW 297
6077: PUSH
6078: LD_INT 3
6080: LESS
6081: IFFALSE 6092
// RemoveUnit ( i ) ;
6083: LD_VAR 0 2
6087: PPUSH
6088: CALL_OW 64
// end ;
6092: GO 6017
6094: POP
6095: POP
// until not tmp ;
6096: LD_VAR 0 3
6100: NOT
6101: IFFALSE 5942
// end ; end ;
6103: PPOPN 3
6105: END
// on UnitTeleported ( building , unit ) do begin if GetSide ( unit ) = 3 then
6106: LD_VAR 0 2
6110: PPUSH
6111: CALL_OW 255
6115: PUSH
6116: LD_INT 3
6118: EQUAL
6119: IFFALSE 6133
// SetTag ( unit , 0 ) ;
6121: LD_VAR 0 2
6125: PPUSH
6126: LD_INT 0
6128: PPUSH
6129: CALL_OW 109
// end ;
6133: PPOPN 2
6135: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = 3 and tech in ruTechList then
6136: LD_VAR 0 2
6140: PPUSH
6141: CALL_OW 255
6145: PUSH
6146: LD_INT 3
6148: EQUAL
6149: PUSH
6150: LD_VAR 0 1
6154: PUSH
6155: LD_EXP 19
6159: IN
6160: AND
6161: IFFALSE 6179
// ruTechList := ruTechList diff tech ;
6163: LD_ADDR_EXP 19
6167: PUSH
6168: LD_EXP 19
6172: PUSH
6173: LD_VAR 0 1
6177: DIFF
6178: ST_TO_ADDR
// end ;
6179: PPOPN 2
6181: END
// on VehicleConstructed ( vehicle , factory ) do var i ;
6182: LD_INT 0
6184: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
6185: LD_VAR 0 1
6189: PPUSH
6190: LD_VAR 0 2
6194: PPUSH
6195: CALL 27341 0 2
// if GetSide ( vehicle ) <> 3 then
6199: LD_VAR 0 1
6203: PPUSH
6204: CALL_OW 255
6208: PUSH
6209: LD_INT 3
6211: NONEQUAL
6212: IFFALSE 6283
// begin if GetWeapon ( vehicle ) = us_double_laser then
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 264
6223: PUSH
6224: LD_INT 10
6226: EQUAL
6227: IFFALSE 6281
// begin amLaserCounter := Inc ( amLaserCounter ) ;
6229: LD_ADDR_EXP 7
6233: PUSH
6234: LD_EXP 7
6238: PPUSH
6239: CALL 70192 0 1
6243: ST_TO_ADDR
// for i in UnitsInside ( factory ) do
6244: LD_ADDR_VAR 0 3
6248: PUSH
6249: LD_VAR 0 2
6253: PPUSH
6254: CALL_OW 313
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6279
// AddExperience_NoLimit ( i , skill_mechanical , 1000 ) ;
6262: LD_VAR 0 3
6266: PPUSH
6267: LD_INT 3
6269: PPUSH
6270: LD_INT 1000
6272: PPUSH
6273: CALL_OW 591
6277: GO 6259
6279: POP
6280: POP
// end ; exit ;
6281: GO 6377
// end ; if GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_crane ] then
6283: LD_VAR 0 1
6287: PPUSH
6288: CALL_OW 264
6292: PUSH
6293: LD_INT 51
6295: PUSH
6296: LD_INT 52
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: IN
6303: IFFALSE 6307
// exit ;
6305: GO 6377
// if GetControl ( vehicle ) = control_computer then
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 263
6316: PUSH
6317: LD_INT 3
6319: EQUAL
6320: IFFALSE 6342
// ruAttackers := Join ( ruAttackers , vehicle ) ;
6322: LD_ADDR_EXP 18
6326: PUSH
6327: LD_EXP 18
6331: PPUSH
6332: LD_VAR 0 1
6336: PPUSH
6337: CALL 68831 0 2
6341: ST_TO_ADDR
// if GetControl ( vehicle ) = control_manual then
6342: LD_VAR 0 1
6346: PPUSH
6347: CALL_OW 263
6351: PUSH
6352: LD_INT 1
6354: EQUAL
6355: IFFALSE 6377
// ruMobile := Join ( ruMobile , vehicle ) ;
6357: LD_ADDR_EXP 16
6361: PUSH
6362: LD_EXP 16
6366: PPUSH
6367: LD_VAR 0 1
6371: PPUSH
6372: CALL 68831 0 2
6376: ST_TO_ADDR
// end ;
6377: PPOPN 3
6379: END
// on EvacuateVehicle ( human , vehicle , p1 , p2 ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 then
6380: LD_VAR 0 1
6384: PPUSH
6385: CALL_OW 255
6389: PUSH
6390: LD_INT 3
6392: EQUAL
6393: PUSH
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 257
6403: PUSH
6404: LD_INT 3
6406: EQUAL
6407: AND
6408: IFFALSE 6471
// if GetSide ( ruFac1 ) = 3 and IsOk ( ruFac1 ) and UnitsInside ( ruFac1 ) < 6 then
6410: LD_INT 1
6412: PPUSH
6413: CALL_OW 255
6417: PUSH
6418: LD_INT 3
6420: EQUAL
6421: PUSH
6422: LD_INT 1
6424: PPUSH
6425: CALL_OW 302
6429: AND
6430: PUSH
6431: LD_INT 1
6433: PPUSH
6434: CALL_OW 313
6438: PUSH
6439: LD_INT 6
6441: LESS
6442: AND
6443: IFFALSE 6459
// ComEnterUnit ( human , ruFac1 ) else
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 1
6452: PPUSH
6453: CALL_OW 120
6457: GO 6471
// ComEnterUnit ( human , ruFac2 ) ;
6459: LD_VAR 0 1
6463: PPUSH
6464: LD_INT 40
6466: PPUSH
6467: CALL_OW 120
// end ;
6471: PPOPN 4
6473: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: CALL 27325 0 1
// end ; end_of_file
6483: PPOPN 1
6485: END
// export function Action ; var dec1 , dec2 , veh ; begin
6486: LD_INT 0
6488: PPUSH
6489: PPUSH
6490: PPUSH
6491: PPUSH
// veh := IsInUnit ( JMM ) ;
6492: LD_ADDR_VAR 0 4
6496: PUSH
6497: LD_EXP 8
6501: PPUSH
6502: CALL_OW 310
6506: ST_TO_ADDR
// InGameOn ;
6507: CALL_OW 8
// CenterNowOnUnits ( veh ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: CALL_OW 87
// ComMoveXY ( veh , 30 , 11 ) ;
6520: LD_VAR 0 4
6524: PPUSH
6525: LD_INT 30
6527: PPUSH
6528: LD_INT 11
6530: PPUSH
6531: CALL_OW 111
// AddComMoveXY ( veh , 69 , 34 ) ;
6535: LD_VAR 0 4
6539: PPUSH
6540: LD_INT 69
6542: PPUSH
6543: LD_INT 34
6545: PPUSH
6546: CALL_OW 171
// CenterOnXY ( 30 , 11 ) ;
6550: LD_INT 30
6552: PPUSH
6553: LD_INT 11
6555: PPUSH
6556: CALL_OW 84
// wait ( 0 0$3 ) ;
6560: LD_INT 105
6562: PPUSH
6563: CALL_OW 67
// SayRadio ( Powell , D1-Pow-1 ) ;
6567: LD_EXP 13
6571: PPUSH
6572: LD_STRING D1-Pow-1
6574: PPUSH
6575: CALL_OW 94
// ComExitVehicle ( JMM ) ;
6579: LD_EXP 8
6583: PPUSH
6584: CALL_OW 121
// AddComHold ( JMM ) ;
6588: LD_EXP 8
6592: PPUSH
6593: CALL_OW 200
// CenterNowOnUnits ( JMM ) ;
6597: LD_EXP 8
6601: PPUSH
6602: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
6606: LD_EXP 8
6610: PPUSH
6611: LD_STRING D1-JMM-1
6613: PPUSH
6614: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
6618: LD_EXP 13
6622: PPUSH
6623: LD_STRING D1-Pow-2
6625: PPUSH
6626: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
6630: LD_EXP 8
6634: PPUSH
6635: LD_STRING D1-JMM-2
6637: PPUSH
6638: CALL_OW 88
// ComEnterUnit ( JMM , veh ) ;
6642: LD_EXP 8
6646: PPUSH
6647: LD_VAR 0 4
6651: PPUSH
6652: CALL_OW 120
// ChangeMissionObjectives ( M1 ) ;
6656: LD_STRING M1
6658: PPUSH
6659: CALL_OW 337
// SetAreaMapShow ( exitArea , 1 ) ;
6663: LD_INT 16
6665: PPUSH
6666: LD_INT 1
6668: PPUSH
6669: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
6673: LD_INT 35
6675: PPUSH
6676: CALL_OW 67
// ComEnterUnit ( JMM , veh ) ;
6680: LD_EXP 8
6684: PPUSH
6685: LD_VAR 0 4
6689: PPUSH
6690: CALL_OW 120
// ComMoveXY ( veh , 51 , 21 ) ;
6694: LD_VAR 0 4
6698: PPUSH
6699: LD_INT 51
6701: PPUSH
6702: LD_INT 21
6704: PPUSH
6705: CALL_OW 111
// CenterNowOnUnits ( veh ) ;
6709: LD_VAR 0 4
6713: PPUSH
6714: CALL_OW 87
// until GetDistUnitXY ( veh , 51 , 21 ) < 6 ;
6718: LD_VAR 0 4
6722: PPUSH
6723: LD_INT 51
6725: PPUSH
6726: LD_INT 21
6728: PPUSH
6729: CALL_OW 297
6733: PUSH
6734: LD_INT 6
6736: LESS
6737: IFFALSE 6673
// if JMMGirl = 1 then
6739: LD_EXP 2
6743: PUSH
6744: LD_INT 1
6746: EQUAL
6747: IFFALSE 7046
// begin SayRadio ( Joan , D2J-Joan-1 ) ;
6749: LD_EXP 10
6753: PPUSH
6754: LD_STRING D2J-Joan-1
6756: PPUSH
6757: CALL_OW 94
// dec1 := Query ( Q1 ) ;
6761: LD_ADDR_VAR 0 2
6765: PUSH
6766: LD_STRING Q1
6768: PPUSH
6769: CALL_OW 97
6773: ST_TO_ADDR
// if dec1 = 1 then
6774: LD_VAR 0 2
6778: PUSH
6779: LD_INT 1
6781: EQUAL
6782: IFFALSE 7037
// begin ComExitVehicle ( JMM ) ;
6784: LD_EXP 8
6788: PPUSH
6789: CALL_OW 121
// AddComHold ( JMM ) ;
6793: LD_EXP 8
6797: PPUSH
6798: CALL_OW 200
// Say ( JMM , D2J-JMM-1 ) ;
6802: LD_EXP 8
6806: PPUSH
6807: LD_STRING D2J-JMM-1
6809: PPUSH
6810: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-2 ) ;
6814: LD_EXP 10
6818: PPUSH
6819: LD_STRING D2J-Joan-2
6821: PPUSH
6822: CALL_OW 94
// Say ( JMM , D2J-JMM-2 ) ;
6826: LD_EXP 8
6830: PPUSH
6831: LD_STRING D2J-JMM-2
6833: PPUSH
6834: CALL_OW 88
// SayRadio ( Joan , D2J-Joan-3 ) ;
6838: LD_EXP 10
6842: PPUSH
6843: LD_STRING D2J-Joan-3
6845: PPUSH
6846: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
6850: LD_EXP 13
6854: PPUSH
6855: LD_STRING DPowell-Pow-1
6857: PPUSH
6858: CALL_OW 94
// dec2 := Query ( Q2J ) ;
6862: LD_ADDR_VAR 0 3
6866: PUSH
6867: LD_STRING Q2J
6869: PPUSH
6870: CALL_OW 97
6874: ST_TO_ADDR
// if dec2 = 1 then
6875: LD_VAR 0 3
6879: PUSH
6880: LD_INT 1
6882: EQUAL
6883: IFFALSE 6925
// begin Say ( JMM , D2Ja-JMM-1 ) ;
6885: LD_EXP 8
6889: PPUSH
6890: LD_STRING D2Ja-JMM-1
6892: PPUSH
6893: CALL_OW 88
// SayRadio ( Joan , D2Ja-Joan-1 ) ;
6897: LD_EXP 10
6901: PPUSH
6902: LD_STRING D2Ja-Joan-1
6904: PPUSH
6905: CALL_OW 94
// Say ( JMM , D2Ja-JMM-2 ) ;
6909: LD_EXP 8
6913: PPUSH
6914: LD_STRING D2Ja-JMM-2
6916: PPUSH
6917: CALL_OW 88
// InGameOff ;
6921: CALL_OW 9
// end ; if dec2 = 2 then
6925: LD_VAR 0 3
6929: PUSH
6930: LD_INT 2
6932: EQUAL
6933: IFFALSE 7004
// begin Say ( JMM , D2Jb-JMM-1 ) ;
6935: LD_EXP 8
6939: PPUSH
6940: LD_STRING D2Jb-JMM-1
6942: PPUSH
6943: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-1 ) ;
6947: LD_EXP 10
6951: PPUSH
6952: LD_STRING D2Jb-Joan-1
6954: PPUSH
6955: CALL_OW 94
// Say ( JMM , D2Jb-JMM-2 ) ;
6959: LD_EXP 8
6963: PPUSH
6964: LD_STRING D2Jb-JMM-2
6966: PPUSH
6967: CALL_OW 88
// SayRadio ( Joan , D2Jb-Joan-2 ) ;
6971: LD_EXP 10
6975: PPUSH
6976: LD_STRING D2Jb-Joan-2
6978: PPUSH
6979: CALL_OW 94
// Say ( JMM , D2Jb-JMM-3 ) ;
6983: LD_EXP 8
6987: PPUSH
6988: LD_STRING D2Jb-JMM-3
6990: PPUSH
6991: CALL_OW 88
// FinishMission ( true ) ;
6995: LD_INT 1
6997: PPUSH
6998: CALL 9888 0 1
// exit ;
7002: GO 7586
// end ; if dec2 = 3 then
7004: LD_VAR 0 3
7008: PUSH
7009: LD_INT 3
7011: EQUAL
7012: IFFALSE 7035
// begin SayRadio ( Joan , D2Jc-Joan-1 ) ;
7014: LD_EXP 10
7018: PPUSH
7019: LD_STRING D2Jc-Joan-1
7021: PPUSH
7022: CALL_OW 94
// FinishMission ( true ) ;
7026: LD_INT 1
7028: PPUSH
7029: CALL 9888 0 1
// exit ;
7033: GO 7586
// end ; end else
7035: GO 7046
// begin FinishMission ( true ) ;
7037: LD_INT 1
7039: PPUSH
7040: CALL 9888 0 1
// exit ;
7044: GO 7586
// end ; end ; if JMMGirl = 2 then
7046: LD_EXP 2
7050: PUSH
7051: LD_INT 2
7053: EQUAL
7054: IFFALSE 7365
// begin SayRadio ( Lisa , D2L-Lisa-1 ) ;
7056: LD_EXP 11
7060: PPUSH
7061: LD_STRING D2L-Lisa-1
7063: PPUSH
7064: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_STRING Q1
7075: PPUSH
7076: CALL_OW 97
7080: ST_TO_ADDR
// if dec1 = 1 then
7081: LD_VAR 0 2
7085: PUSH
7086: LD_INT 1
7088: EQUAL
7089: IFFALSE 7356
// begin ComExitVehicle ( JMM ) ;
7091: LD_EXP 8
7095: PPUSH
7096: CALL_OW 121
// AddComHold ( JMM ) ;
7100: LD_EXP 8
7104: PPUSH
7105: CALL_OW 200
// Say ( JMM , D2L-JMM-1 ) ;
7109: LD_EXP 8
7113: PPUSH
7114: LD_STRING D2L-JMM-1
7116: PPUSH
7117: CALL_OW 88
// SayRadio ( Lisa , D2L-Lisa-2 ) ;
7121: LD_EXP 11
7125: PPUSH
7126: LD_STRING D2L-Lisa-2
7128: PPUSH
7129: CALL_OW 94
// Say ( JMM , D2L-JMM-2 ) ;
7133: LD_EXP 8
7137: PPUSH
7138: LD_STRING D2L-JMM-2
7140: PPUSH
7141: CALL_OW 88
// SayRadio ( Lisa , DL-Lisa-3 ) ;
7145: LD_EXP 11
7149: PPUSH
7150: LD_STRING DL-Lisa-3
7152: PPUSH
7153: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7157: LD_EXP 13
7161: PPUSH
7162: LD_STRING DPowell-Pow-1
7164: PPUSH
7165: CALL_OW 94
// dec2 := Query ( Q2L ) ;
7169: LD_ADDR_VAR 0 3
7173: PUSH
7174: LD_STRING Q2L
7176: PPUSH
7177: CALL_OW 97
7181: ST_TO_ADDR
// if dec2 = 1 then
7182: LD_VAR 0 3
7186: PUSH
7187: LD_INT 1
7189: EQUAL
7190: IFFALSE 7256
// begin Say ( JMM , D2La-JMM-1 ) ;
7192: LD_EXP 8
7196: PPUSH
7197: LD_STRING D2La-JMM-1
7199: PPUSH
7200: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-1 ) ;
7204: LD_EXP 11
7208: PPUSH
7209: LD_STRING D2La-Lisa-1
7211: PPUSH
7212: CALL_OW 94
// Say ( JMM , D2La-JMM-2 ) ;
7216: LD_EXP 8
7220: PPUSH
7221: LD_STRING D2La-JMM-2
7223: PPUSH
7224: CALL_OW 88
// SayRadio ( Lisa , D2La-Lisa-2 ) ;
7228: LD_EXP 11
7232: PPUSH
7233: LD_STRING D2La-Lisa-2
7235: PPUSH
7236: CALL_OW 94
// Say ( JMM , D2La-JMM-3 ) ;
7240: LD_EXP 8
7244: PPUSH
7245: LD_STRING D2La-JMM-3
7247: PPUSH
7248: CALL_OW 88
// InGameOff ;
7252: CALL_OW 9
// end ; if dec2 = 2 then
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 2
7263: EQUAL
7264: IFFALSE 7323
// begin Say ( JMM , D2Lb-JMM-1 ) ;
7266: LD_EXP 8
7270: PPUSH
7271: LD_STRING D2Lb-JMM-1
7273: PPUSH
7274: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-1 ) ;
7278: LD_EXP 11
7282: PPUSH
7283: LD_STRING D2Lb-Lisa-1
7285: PPUSH
7286: CALL_OW 94
// Say ( JMM , D2Lb-JMM-2 ) ;
7290: LD_EXP 8
7294: PPUSH
7295: LD_STRING D2Lb-JMM-2
7297: PPUSH
7298: CALL_OW 88
// SayRadio ( Lisa , D2Lb-Lisa-2 ) ;
7302: LD_EXP 11
7306: PPUSH
7307: LD_STRING D2Lb-Lisa-2
7309: PPUSH
7310: CALL_OW 94
// FinishMission ( true ) ;
7314: LD_INT 1
7316: PPUSH
7317: CALL 9888 0 1
// exit ;
7321: GO 7586
// end ; if dec2 = 3 then
7323: LD_VAR 0 3
7327: PUSH
7328: LD_INT 3
7330: EQUAL
7331: IFFALSE 7354
// begin SayRadio ( Lisa , D2Lc-Lisa-1 ) ;
7333: LD_EXP 11
7337: PPUSH
7338: LD_STRING D2Lc-Lisa-1
7340: PPUSH
7341: CALL_OW 94
// FinishMission ( true ) ;
7345: LD_INT 1
7347: PPUSH
7348: CALL 9888 0 1
// exit ;
7352: GO 7586
// end ; end else
7354: GO 7365
// begin FinishMission ( true ) ;
7356: LD_INT 1
7358: PPUSH
7359: CALL 9888 0 1
// exit ;
7363: GO 7586
// end ; end ; if JMMGirl = 3 then
7365: LD_EXP 2
7369: PUSH
7370: LD_INT 3
7372: EQUAL
7373: IFFALSE 7586
// begin SayRadio ( Connie , D2X-Con-1 ) ;
7375: LD_EXP 12
7379: PPUSH
7380: LD_STRING D2X-Con-1
7382: PPUSH
7383: CALL_OW 94
// dec1 := Query ( Q1 ) ;
7387: LD_ADDR_VAR 0 2
7391: PUSH
7392: LD_STRING Q1
7394: PPUSH
7395: CALL_OW 97
7399: ST_TO_ADDR
// if dec1 = 1 then
7400: LD_VAR 0 2
7404: PUSH
7405: LD_INT 1
7407: EQUAL
7408: IFFALSE 7579
// begin ComExitVehicle ( JMM ) ;
7410: LD_EXP 8
7414: PPUSH
7415: CALL_OW 121
// AddComHold ( JMM ) ;
7419: LD_EXP 8
7423: PPUSH
7424: CALL_OW 200
// Say ( JMM , D2X-JMM-1 ) ;
7428: LD_EXP 8
7432: PPUSH
7433: LD_STRING D2X-JMM-1
7435: PPUSH
7436: CALL_OW 88
// SayRadio ( Connie , D2X-Con-2 ) ;
7440: LD_EXP 12
7444: PPUSH
7445: LD_STRING D2X-Con-2
7447: PPUSH
7448: CALL_OW 94
// SayRadio ( Powell , DPowell-Pow-1 ) ;
7452: LD_EXP 13
7456: PPUSH
7457: LD_STRING DPowell-Pow-1
7459: PPUSH
7460: CALL_OW 94
// dec2 := Query ( Q2X ) ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_STRING Q2X
7471: PPUSH
7472: CALL_OW 97
7476: ST_TO_ADDR
// if dec2 = 1 then
7477: LD_VAR 0 3
7481: PUSH
7482: LD_INT 1
7484: EQUAL
7485: IFFALSE 7503
// begin Say ( JMM , D2Xa-JMM-1 ) ;
7487: LD_EXP 8
7491: PPUSH
7492: LD_STRING D2Xa-JMM-1
7494: PPUSH
7495: CALL_OW 88
// InGameOff ;
7499: CALL_OW 9
// end ; if dec2 = 2 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 2
7510: EQUAL
7511: IFFALSE 7546
// begin Say ( JMM , D2Xb-JMM-1 ) ;
7513: LD_EXP 8
7517: PPUSH
7518: LD_STRING D2Xb-JMM-1
7520: PPUSH
7521: CALL_OW 88
// SayRadio ( Connie , D2Xb-Con-1 ) ;
7525: LD_EXP 12
7529: PPUSH
7530: LD_STRING D2Xb-Con-1
7532: PPUSH
7533: CALL_OW 94
// FinishMission ( true ) ;
7537: LD_INT 1
7539: PPUSH
7540: CALL 9888 0 1
// exit ;
7544: GO 7586
// end ; if dec2 = 3 then
7546: LD_VAR 0 3
7550: PUSH
7551: LD_INT 3
7553: EQUAL
7554: IFFALSE 7577
// begin SayRadio ( Connie , D2Xc-Con-1 ) ;
7556: LD_EXP 12
7560: PPUSH
7561: LD_STRING D2Xc-Con-1
7563: PPUSH
7564: CALL_OW 94
// FinishMission ( true ) ;
7568: LD_INT 1
7570: PPUSH
7571: CALL 9888 0 1
// exit ;
7575: GO 7586
// end ; end else
7577: GO 7586
// begin FinishMission ( true ) ;
7579: LD_INT 1
7581: PPUSH
7582: CALL 9888 0 1
// end ; end ; end ;
7586: LD_VAR 0 1
7590: RET
// every 0 0$1 trigger IsInArea ( JMM , kappaBaseArea ) do var veh ;
7591: LD_EXP 8
7595: PPUSH
7596: LD_INT 15
7598: PPUSH
7599: CALL_OW 308
7603: IFFALSE 8851
7605: GO 7607
7607: DISABLE
7608: LD_INT 0
7610: PPUSH
// begin if tick < 5 5$00 then
7611: LD_OWVAR 1
7615: PUSH
7616: LD_INT 10500
7618: LESS
7619: IFFALSE 7871
// begin uc_side := 6 ;
7621: LD_ADDR_OWVAR 20
7625: PUSH
7626: LD_INT 6
7628: ST_TO_ADDR
// uc_nation := 3 ;
7629: LD_ADDR_OWVAR 21
7633: PUSH
7634: LD_INT 3
7636: ST_TO_ADDR
// if not SeeXY ( 1 , 105 , 97 ) then
7637: LD_INT 1
7639: PPUSH
7640: LD_INT 105
7642: PPUSH
7643: LD_INT 97
7645: PPUSH
7646: CALL_OW 293
7650: NOT
7651: IFFALSE 7715
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_gun , 40 ) ;
7653: LD_INT 22
7655: PPUSH
7656: LD_INT 1
7658: PPUSH
7659: LD_INT 3
7661: PPUSH
7662: LD_INT 44
7664: PPUSH
7665: LD_INT 40
7667: PPUSH
7668: CALL 36350 0 5
// veh := CreateVehicle ;
7672: LD_ADDR_VAR 0 1
7676: PUSH
7677: CALL_OW 45
7681: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7682: LD_VAR 0 1
7686: PPUSH
7687: LD_INT 200
7689: PPUSH
7690: CALL_OW 234
// PlaceUnitXYD ( veh , 105 , 97 , 3 , false ) ;
7694: LD_VAR 0 1
7698: PPUSH
7699: LD_INT 105
7701: PPUSH
7702: LD_INT 97
7704: PPUSH
7705: LD_INT 3
7707: PPUSH
7708: LD_INT 0
7710: PPUSH
7711: CALL 70971 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7715: LD_INT 1
7717: PPUSH
7718: LD_INT 116
7720: PPUSH
7721: LD_INT 120
7723: PPUSH
7724: CALL_OW 293
7728: NOT
7729: IFFALSE 7793
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher , 40 ) ;
7731: LD_INT 22
7733: PPUSH
7734: LD_INT 1
7736: PPUSH
7737: LD_INT 3
7739: PPUSH
7740: LD_INT 45
7742: PPUSH
7743: LD_INT 40
7745: PPUSH
7746: CALL 36350 0 5
// veh := CreateVehicle ;
7750: LD_ADDR_VAR 0 1
7754: PUSH
7755: CALL_OW 45
7759: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7760: LD_VAR 0 1
7764: PPUSH
7765: LD_INT 200
7767: PPUSH
7768: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7772: LD_VAR 0 1
7776: PPUSH
7777: LD_INT 116
7779: PPUSH
7780: LD_INT 120
7782: PPUSH
7783: LD_INT 4
7785: PPUSH
7786: LD_INT 0
7788: PPUSH
7789: CALL 70971 0 5
// end ; if not SeeXY ( 1 , 116 , 120 ) then
7793: LD_INT 1
7795: PPUSH
7796: LD_INT 116
7798: PPUSH
7799: LD_INT 120
7801: PPUSH
7802: CALL_OW 293
7806: NOT
7807: IFFALSE 7871
// begin PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_computer , ru_rocket_launcher , 30 ) ;
7809: LD_INT 24
7811: PPUSH
7812: LD_INT 1
7814: PPUSH
7815: LD_INT 3
7817: PPUSH
7818: LD_INT 45
7820: PPUSH
7821: LD_INT 30
7823: PPUSH
7824: CALL 36350 0 5
// veh := CreateVehicle ;
7828: LD_ADDR_VAR 0 1
7832: PUSH
7833: CALL_OW 45
7837: ST_TO_ADDR
// SetLives ( veh , 200 ) ;
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 200
7845: PPUSH
7846: CALL_OW 234
// PlaceUnitXYD ( veh , 116 , 120 , 4 , false ) ;
7850: LD_VAR 0 1
7854: PPUSH
7855: LD_INT 116
7857: PPUSH
7858: LD_INT 120
7860: PPUSH
7861: LD_INT 4
7863: PPUSH
7864: LD_INT 0
7866: PPUSH
7867: CALL 70971 0 5
// end ; end ; InGameOn ;
7871: CALL_OW 8
// repeat wait ( 0 0$1 ) ;
7875: LD_INT 35
7877: PPUSH
7878: CALL_OW 67
// CenterNowOnUnits ( JMM ) ;
7882: LD_EXP 8
7886: PPUSH
7887: CALL_OW 87
// ComMoveXY ( JMM , 81 , 109 ) ;
7891: LD_EXP 8
7895: PPUSH
7896: LD_INT 81
7898: PPUSH
7899: LD_INT 109
7901: PPUSH
7902: CALL_OW 111
// AddComHold ( JMM ) ;
7906: LD_EXP 8
7910: PPUSH
7911: CALL_OW 200
// ComMoveUnit ( [ Joan , Lisa , Connie ] , JMM ) ;
7915: LD_EXP 10
7919: PUSH
7920: LD_EXP 11
7924: PUSH
7925: LD_EXP 12
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: PPUSH
7935: LD_EXP 8
7939: PPUSH
7940: CALL_OW 112
// until UnitFilter ( [ Joan , Lisa , Connie ] , [ f_dist , JMM , 6 ] ) ;
7944: LD_EXP 10
7948: PUSH
7949: LD_EXP 11
7953: PUSH
7954: LD_EXP 12
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PPUSH
7964: LD_INT 91
7966: PUSH
7967: LD_EXP 8
7971: PUSH
7972: LD_INT 6
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 72
7984: IFFALSE 7875
// case JMMGirl of 1 :
7986: LD_EXP 2
7990: PUSH
7991: LD_INT 1
7993: DOUBLE
7994: EQUAL
7995: IFTRUE 7999
7997: GO 8284
7999: POP
// begin ChangeSideKappaBase ;
8000: CALL 1439 0 0
// ComTurnUnit ( Joan , JMM ) ;
8004: LD_EXP 10
8008: PPUSH
8009: LD_EXP 8
8013: PPUSH
8014: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
8018: LD_EXP 8
8022: PPUSH
8023: LD_EXP 10
8027: PPUSH
8028: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8032: LD_EXP 10
8036: PUSH
8037: LD_EXP 8
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 87
// wait ( 0 0$1 ) ;
8050: LD_INT 35
8052: PPUSH
8053: CALL_OW 67
// DialogueOn ;
8057: CALL_OW 6
// Say ( Joan , D3J-Joan-1 ) ;
8061: LD_EXP 10
8065: PPUSH
8066: LD_STRING D3J-Joan-1
8068: PPUSH
8069: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8073: LD_EXP 8
8077: PPUSH
8078: LD_STRING D3J-JMM-1
8080: PPUSH
8081: CALL_OW 88
// Say ( Joan , D3J-Joan-2 ) ;
8085: LD_EXP 10
8089: PPUSH
8090: LD_STRING D3J-Joan-2
8092: PPUSH
8093: CALL_OW 88
// Say ( JMM , D3J-JMM-2 ) ;
8097: LD_EXP 8
8101: PPUSH
8102: LD_STRING D3J-JMM-2
8104: PPUSH
8105: CALL_OW 88
// wait ( 0 0$1 ) ;
8109: LD_INT 35
8111: PPUSH
8112: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8116: LD_EXP 8
8120: PPUSH
8121: LD_STRING D4-JMM-1
8123: PPUSH
8124: CALL_OW 88
// Say ( Joan , D4-Joan-1 ) ;
8128: LD_EXP 10
8132: PPUSH
8133: LD_STRING D4-Joan-1
8135: PPUSH
8136: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8140: LD_EXP 8
8144: PPUSH
8145: LD_STRING D4-JMM-2
8147: PPUSH
8148: CALL_OW 88
// Say ( Joan , D4-Joan-2 ) ;
8152: LD_EXP 10
8156: PPUSH
8157: LD_STRING D4-Joan-2
8159: PPUSH
8160: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8164: LD_EXP 8
8168: PPUSH
8169: LD_STRING D4-JMM-3
8171: PPUSH
8172: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8176: LD_INT 10
8178: PPUSH
8179: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8183: LD_EXP 13
8187: PPUSH
8188: LD_STRING D7-Pow-1
8190: PPUSH
8191: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8195: LD_EXP 8
8199: PPUSH
8200: LD_STRING D7-JMM-1
8202: PPUSH
8203: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8207: LD_EXP 13
8211: PPUSH
8212: LD_STRING D7-Pow-2
8214: PPUSH
8215: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8219: LD_EXP 8
8223: PPUSH
8224: LD_STRING D7-JMM-2
8226: PPUSH
8227: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8231: LD_EXP 13
8235: PPUSH
8236: LD_STRING D7-Pow-3
8238: PPUSH
8239: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8243: LD_EXP 8
8247: PPUSH
8248: LD_STRING D7-JMM-3
8250: PPUSH
8251: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8255: LD_EXP 13
8259: PPUSH
8260: LD_STRING D7-Pow-4
8262: PPUSH
8263: CALL_OW 94
// DialogueOff ;
8267: CALL_OW 7
// InGameOff ;
8271: CALL_OW 9
// ChangeMissionObjectives ( M2J ) ;
8275: LD_STRING M2J
8277: PPUSH
8278: CALL_OW 337
// end ; 2 :
8282: GO 8847
8284: LD_INT 2
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8292
8290: GO 8577
8292: POP
// begin ChangeSideKappaBase ;
8293: CALL 1439 0 0
// ComTurnUnit ( Lisa , JMM ) ;
8297: LD_EXP 11
8301: PPUSH
8302: LD_EXP 8
8306: PPUSH
8307: CALL_OW 119
// ComTurnUnit ( JMM , Lisa ) ;
8311: LD_EXP 8
8315: PPUSH
8316: LD_EXP 11
8320: PPUSH
8321: CALL_OW 119
// CenterNowOnUnits ( [ Lisa , JMM ] ) ;
8325: LD_EXP 11
8329: PUSH
8330: LD_EXP 8
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 87
// wait ( 0 0$1 ) ;
8343: LD_INT 35
8345: PPUSH
8346: CALL_OW 67
// DialogueOn ;
8350: CALL_OW 6
// Say ( Lisa , D3L-Lisa-1 ) ;
8354: LD_EXP 11
8358: PPUSH
8359: LD_STRING D3L-Lisa-1
8361: PPUSH
8362: CALL_OW 88
// Say ( JMM , D3L-JMM-1 ) ;
8366: LD_EXP 8
8370: PPUSH
8371: LD_STRING D3L-JMM-1
8373: PPUSH
8374: CALL_OW 88
// Say ( Lisa , D3L-Lisa-2 ) ;
8378: LD_EXP 11
8382: PPUSH
8383: LD_STRING D3L-Lisa-2
8385: PPUSH
8386: CALL_OW 88
// Say ( JMM , D3L-JMM-2 ) ;
8390: LD_EXP 8
8394: PPUSH
8395: LD_STRING D3L-JMM-2
8397: PPUSH
8398: CALL_OW 88
// wait ( 0 0$1 ) ;
8402: LD_INT 35
8404: PPUSH
8405: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8409: LD_EXP 8
8413: PPUSH
8414: LD_STRING D4-JMM-1
8416: PPUSH
8417: CALL_OW 88
// Say ( Lisa , D4-Lisa-1 ) ;
8421: LD_EXP 11
8425: PPUSH
8426: LD_STRING D4-Lisa-1
8428: PPUSH
8429: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
8433: LD_EXP 8
8437: PPUSH
8438: LD_STRING D4-JMM-1
8440: PPUSH
8441: CALL_OW 88
// Say ( Lisa , D4-Lisa-2 ) ;
8445: LD_EXP 11
8449: PPUSH
8450: LD_STRING D4-Lisa-2
8452: PPUSH
8453: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8457: LD_EXP 8
8461: PPUSH
8462: LD_STRING D4-JMM-3
8464: PPUSH
8465: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8469: LD_INT 10
8471: PPUSH
8472: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8476: LD_EXP 13
8480: PPUSH
8481: LD_STRING D7-Pow-1
8483: PPUSH
8484: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8488: LD_EXP 8
8492: PPUSH
8493: LD_STRING D7-JMM-1
8495: PPUSH
8496: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8500: LD_EXP 13
8504: PPUSH
8505: LD_STRING D7-Pow-2
8507: PPUSH
8508: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8512: LD_EXP 8
8516: PPUSH
8517: LD_STRING D7-JMM-2
8519: PPUSH
8520: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8524: LD_EXP 13
8528: PPUSH
8529: LD_STRING D7-Pow-3
8531: PPUSH
8532: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8536: LD_EXP 8
8540: PPUSH
8541: LD_STRING D7-JMM-3
8543: PPUSH
8544: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8548: LD_EXP 13
8552: PPUSH
8553: LD_STRING D7-Pow-4
8555: PPUSH
8556: CALL_OW 94
// DialogueOff ;
8560: CALL_OW 7
// InGameOff ;
8564: CALL_OW 9
// ChangeMissionObjectives ( M2L ) ;
8568: LD_STRING M2L
8570: PPUSH
8571: CALL_OW 337
// end ; 3 :
8575: GO 8847
8577: LD_INT 3
8579: DOUBLE
8580: EQUAL
8581: IFTRUE 8585
8583: GO 8846
8585: POP
// begin ChangeSideKappaBase ;
8586: CALL 1439 0 0
// ComTurnUnit ( Connie , JMM ) ;
8590: LD_EXP 12
8594: PPUSH
8595: LD_EXP 8
8599: PPUSH
8600: CALL_OW 119
// ComTurnUnit ( JMM , Connie ) ;
8604: LD_EXP 8
8608: PPUSH
8609: LD_EXP 12
8613: PPUSH
8614: CALL_OW 119
// CenterNowOnUnits ( [ Joan , JMM ] ) ;
8618: LD_EXP 10
8622: PUSH
8623: LD_EXP 8
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PPUSH
8632: CALL_OW 87
// wait ( 0 0$1 ) ;
8636: LD_INT 35
8638: PPUSH
8639: CALL_OW 67
// DialogueOn ;
8643: CALL_OW 6
// Say ( Connie , D3X-Con-1 ) ;
8647: LD_EXP 12
8651: PPUSH
8652: LD_STRING D3X-Con-1
8654: PPUSH
8655: CALL_OW 88
// Say ( JMM , D3J-JMM-1 ) ;
8659: LD_EXP 8
8663: PPUSH
8664: LD_STRING D3J-JMM-1
8666: PPUSH
8667: CALL_OW 88
// wait ( 0 0$1 ) ;
8671: LD_INT 35
8673: PPUSH
8674: CALL_OW 67
// Say ( JMM , D4-JMM-1 ) ;
8678: LD_EXP 8
8682: PPUSH
8683: LD_STRING D4-JMM-1
8685: PPUSH
8686: CALL_OW 88
// Say ( Connie , D4-Con-1 ) ;
8690: LD_EXP 12
8694: PPUSH
8695: LD_STRING D4-Con-1
8697: PPUSH
8698: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
8702: LD_EXP 8
8706: PPUSH
8707: LD_STRING D4-JMM-2
8709: PPUSH
8710: CALL_OW 88
// Say ( Connie , D4-Con-2 ) ;
8714: LD_EXP 12
8718: PPUSH
8719: LD_STRING D4-Con-2
8721: PPUSH
8722: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
8726: LD_EXP 8
8730: PPUSH
8731: LD_STRING D4-JMM-3
8733: PPUSH
8734: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
8738: LD_INT 10
8740: PPUSH
8741: CALL_OW 68
// SayRadio ( Powell , D7-Pow-1 ) ;
8745: LD_EXP 13
8749: PPUSH
8750: LD_STRING D7-Pow-1
8752: PPUSH
8753: CALL_OW 94
// Say ( JMM , D7-JMM-1 ) ;
8757: LD_EXP 8
8761: PPUSH
8762: LD_STRING D7-JMM-1
8764: PPUSH
8765: CALL_OW 88
// SayRadio ( Powell , D7-Pow-2 ) ;
8769: LD_EXP 13
8773: PPUSH
8774: LD_STRING D7-Pow-2
8776: PPUSH
8777: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
8781: LD_EXP 8
8785: PPUSH
8786: LD_STRING D7-JMM-2
8788: PPUSH
8789: CALL_OW 88
// SayRadio ( Powell , D7-Pow-3 ) ;
8793: LD_EXP 13
8797: PPUSH
8798: LD_STRING D7-Pow-3
8800: PPUSH
8801: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
8805: LD_EXP 8
8809: PPUSH
8810: LD_STRING D7-JMM-3
8812: PPUSH
8813: CALL_OW 88
// SayRadio ( Powell , D7-Pow-4 ) ;
8817: LD_EXP 13
8821: PPUSH
8822: LD_STRING D7-Pow-4
8824: PPUSH
8825: CALL_OW 94
// DialogueOff ;
8829: CALL_OW 7
// InGameOff ;
8833: CALL_OW 9
// ChangeMissionObjectives ( M2X ) ;
8837: LD_STRING M2X
8839: PPUSH
8840: CALL_OW 337
// end ; end ;
8844: GO 8847
8846: POP
// SaveForQuickRestart ;
8847: CALL_OW 22
// end ;
8851: PPOPN 1
8853: END
// every 0 0$1 trigger IsSelected ( usLab ) do
8854: LD_INT 32
8856: PPUSH
8857: CALL_OW 306
8861: IFFALSE 9186
8863: GO 8865
8865: DISABLE
// begin case JMMGirl of 1 :
8866: LD_EXP 2
8870: PUSH
8871: LD_INT 1
8873: DOUBLE
8874: EQUAL
8875: IFTRUE 8879
8877: GO 8993
8879: POP
// begin Say ( JMM , D6J-JMM-1 ) ;
8880: LD_EXP 8
8884: PPUSH
8885: LD_STRING D6J-JMM-1
8887: PPUSH
8888: CALL_OW 88
// if TestCharacters ( 13f_Denis ) or TestCharacters ( 13s_Denis ) then
8892: LD_STRING 13f_Denis
8894: PPUSH
8895: CALL_OW 28
8899: PUSH
8900: LD_STRING 13s_Denis
8902: PPUSH
8903: CALL_OW 28
8907: OR
8908: IFFALSE 8948
// begin Say ( Joan , D6J-Joan-1 ) ;
8910: LD_EXP 10
8914: PPUSH
8915: LD_STRING D6J-Joan-1
8917: PPUSH
8918: CALL_OW 88
// Say ( JMM , D6J-JMM-2 ) ;
8922: LD_EXP 8
8926: PPUSH
8927: LD_STRING D6J-JMM-2
8929: PPUSH
8930: CALL_OW 88
// Say ( Joan , D6J-Joan-2 ) ;
8934: LD_EXP 10
8938: PPUSH
8939: LD_STRING D6J-Joan-2
8941: PPUSH
8942: CALL_OW 88
// end else
8946: GO 8960
// Say ( Joan , D6J-Joan-2a ) ;
8948: LD_EXP 10
8952: PPUSH
8953: LD_STRING D6J-Joan-2a
8955: PPUSH
8956: CALL_OW 88
// Say ( JMM , D6J-JMM-3 ) ;
8960: LD_EXP 8
8964: PPUSH
8965: LD_STRING D6J-JMM-3
8967: PPUSH
8968: CALL_OW 88
// Say ( Joan , D6J-Joan-3 ) ;
8972: LD_EXP 10
8976: PPUSH
8977: LD_STRING D6J-Joan-3
8979: PPUSH
8980: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
8984: LD_STRING M3
8986: PPUSH
8987: CALL_OW 337
// end ; 2 :
8991: GO 9186
8993: LD_INT 2
8995: DOUBLE
8996: EQUAL
8997: IFTRUE 9001
8999: GO 9059
9001: POP
// begin Say ( JMM , D6L-JMM-1 ) ;
9002: LD_EXP 8
9006: PPUSH
9007: LD_STRING D6L-JMM-1
9009: PPUSH
9010: CALL_OW 88
// Say ( Lisa , D6L-Lisa-1 ) ;
9014: LD_EXP 11
9018: PPUSH
9019: LD_STRING D6L-Lisa-1
9021: PPUSH
9022: CALL_OW 88
// Say ( JMM , D6L-JMM-2 ) ;
9026: LD_EXP 8
9030: PPUSH
9031: LD_STRING D6L-JMM-2
9033: PPUSH
9034: CALL_OW 88
// Say ( Lisa , D6L-Lisa-2 ) ;
9038: LD_EXP 11
9042: PPUSH
9043: LD_STRING D6L-Lisa-2
9045: PPUSH
9046: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9050: LD_STRING M3
9052: PPUSH
9053: CALL_OW 337
// end ; 3 :
9057: GO 9186
9059: LD_INT 3
9061: DOUBLE
9062: EQUAL
9063: IFTRUE 9067
9065: GO 9185
9067: POP
// begin Say ( JMM , D6X-JMM-1 ) ;
9068: LD_EXP 8
9072: PPUSH
9073: LD_STRING D6X-JMM-1
9075: PPUSH
9076: CALL_OW 88
// Say ( Connie , D6X-Con-1 ) ;
9080: LD_EXP 12
9084: PPUSH
9085: LD_STRING D6X-Con-1
9087: PPUSH
9088: CALL_OW 88
// Say ( JMM , D6X-JMM-2 ) ;
9092: LD_EXP 8
9096: PPUSH
9097: LD_STRING D6X-JMM-2
9099: PPUSH
9100: CALL_OW 88
// Say ( Connie , D6X-Con-2 ) ;
9104: LD_EXP 12
9108: PPUSH
9109: LD_STRING D6X-Con-2
9111: PPUSH
9112: CALL_OW 88
// Say ( JMM , D6X-JMM-3 ) ;
9116: LD_EXP 8
9120: PPUSH
9121: LD_STRING D6X-JMM-3
9123: PPUSH
9124: CALL_OW 88
// Say ( Connie , D6X-Con-3 ) ;
9128: LD_EXP 12
9132: PPUSH
9133: LD_STRING D6X-Con-3
9135: PPUSH
9136: CALL_OW 88
// Say ( JMM , D6X-JMM-4 ) ;
9140: LD_EXP 8
9144: PPUSH
9145: LD_STRING D6X-JMM-4
9147: PPUSH
9148: CALL_OW 88
// Say ( Connie , D6X-Con-4 ) ;
9152: LD_EXP 12
9156: PPUSH
9157: LD_STRING D6X-Con-4
9159: PPUSH
9160: CALL_OW 88
// Say ( JMM , D6X-JMM-5 ) ;
9164: LD_EXP 8
9168: PPUSH
9169: LD_STRING D6X-JMM-5
9171: PPUSH
9172: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
9176: LD_STRING M3
9178: PPUSH
9179: CALL_OW 337
// end ; end ;
9183: GO 9186
9185: POP
// end ;
9186: END
// every 0 0$1 trigger IsSelected ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ) do
9187: LD_INT 22
9189: PUSH
9190: LD_INT 1
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 33
9199: PUSH
9200: LD_INT 2
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PPUSH
9211: CALL_OW 69
9215: PPUSH
9216: CALL_OW 306
9220: IFFALSE 9366
9222: GO 9224
9224: DISABLE
// begin case JMMGirl of 1 :
9225: LD_EXP 2
9229: PUSH
9230: LD_INT 1
9232: DOUBLE
9233: EQUAL
9234: IFTRUE 9238
9236: GO 9275
9238: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9239: LD_EXP 8
9243: PPUSH
9244: LD_STRING D5-JMM-1
9246: PPUSH
9247: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9251: LD_INT 77
9253: PPUSH
9254: LD_INT 87
9256: PPUSH
9257: CALL_OW 84
// Say ( Joan , D5-Joan-1 ) ;
9261: LD_EXP 10
9265: PPUSH
9266: LD_STRING D5-Joan-1
9268: PPUSH
9269: CALL_OW 88
// end ; 2 :
9273: GO 9366
9275: LD_INT 2
9277: DOUBLE
9278: EQUAL
9279: IFTRUE 9283
9281: GO 9320
9283: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9284: LD_EXP 8
9288: PPUSH
9289: LD_STRING D5-JMM-1
9291: PPUSH
9292: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9296: LD_INT 77
9298: PPUSH
9299: LD_INT 87
9301: PPUSH
9302: CALL_OW 84
// Say ( Lisa , D5-Lisa-1 ) ;
9306: LD_EXP 11
9310: PPUSH
9311: LD_STRING D5-Lisa-1
9313: PPUSH
9314: CALL_OW 88
// end ; 3 :
9318: GO 9366
9320: LD_INT 3
9322: DOUBLE
9323: EQUAL
9324: IFTRUE 9328
9326: GO 9365
9328: POP
// begin Say ( JMM , D5-JMM-1 ) ;
9329: LD_EXP 8
9333: PPUSH
9334: LD_STRING D5-JMM-1
9336: PPUSH
9337: CALL_OW 88
// CenterOnXY ( 77 , 87 ) ;
9341: LD_INT 77
9343: PPUSH
9344: LD_INT 87
9346: PPUSH
9347: CALL_OW 84
// Say ( Connie , D5-Con-1 ) ;
9351: LD_EXP 12
9355: PPUSH
9356: LD_STRING D5-Con-1
9358: PPUSH
9359: CALL_OW 88
// end ; end ;
9363: GO 9366
9365: POP
// end ;
9366: END
// every 0 0$5 trigger IsInArea ( IsInUnit ( JMM ) , exitArea ) do var JMMGirlVeh , dec ;
9367: LD_EXP 8
9371: PPUSH
9372: CALL_OW 310
9376: PPUSH
9377: LD_INT 16
9379: PPUSH
9380: CALL_OW 308
9384: IFFALSE 9734
9386: GO 9388
9388: DISABLE
9389: LD_INT 0
9391: PPUSH
9392: PPUSH
// begin enable ;
9393: ENABLE
// if JMMGirl = 1 then
9394: LD_EXP 2
9398: PUSH
9399: LD_INT 1
9401: EQUAL
9402: IFFALSE 9419
// JMMGirlVeh := IsInUnit ( Joan ) ;
9404: LD_ADDR_VAR 0 1
9408: PUSH
9409: LD_EXP 10
9413: PPUSH
9414: CALL_OW 310
9418: ST_TO_ADDR
// if JMMGirl = 2 then
9419: LD_EXP 2
9423: PUSH
9424: LD_INT 2
9426: EQUAL
9427: IFFALSE 9444
// JMMGirlVeh := IsInUnit ( Lisa ) ;
9429: LD_ADDR_VAR 0 1
9433: PUSH
9434: LD_EXP 11
9438: PPUSH
9439: CALL_OW 310
9443: ST_TO_ADDR
// if JMMGirl = 3 then
9444: LD_EXP 2
9448: PUSH
9449: LD_INT 3
9451: EQUAL
9452: IFFALSE 9469
// JMMGirlVeh := IsInUnit ( Connie ) ;
9454: LD_ADDR_VAR 0 1
9458: PUSH
9459: LD_EXP 12
9463: PPUSH
9464: CALL_OW 310
9468: ST_TO_ADDR
// if GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 then
9469: LD_EXP 8
9473: PPUSH
9474: CALL_OW 310
9478: PPUSH
9479: LD_EXP 10
9483: PPUSH
9484: CALL_OW 310
9488: PPUSH
9489: CALL_OW 296
9493: PUSH
9494: LD_INT 10
9496: LESS
9497: PUSH
9498: LD_EXP 8
9502: PPUSH
9503: CALL_OW 310
9507: PPUSH
9508: LD_EXP 11
9512: PPUSH
9513: CALL_OW 310
9517: PPUSH
9518: CALL_OW 296
9522: PUSH
9523: LD_INT 10
9525: LESS
9526: OR
9527: PUSH
9528: LD_EXP 8
9532: PPUSH
9533: CALL_OW 310
9537: PPUSH
9538: LD_EXP 12
9542: PPUSH
9543: CALL_OW 310
9547: PPUSH
9548: CALL_OW 296
9552: PUSH
9553: LD_INT 10
9555: LESS
9556: OR
9557: IFFALSE 9654
// begin case Query ( Q3b ) of 1 :
9559: LD_STRING Q3b
9561: PPUSH
9562: CALL_OW 97
9566: PUSH
9567: LD_INT 1
9569: DOUBLE
9570: EQUAL
9571: IFTRUE 9575
9573: GO 9651
9575: POP
// begin SaveVariable ( [ [ GetChassis ( JMMGirlVeh ) ] , [ GetEngine ( JMMGirlVeh ) ] , [ GetControl ( JMMGirlVeh ) ] , [ GetWeapon ( JMMGirlVeh ) ] ] , 14_JMMGirlVeh_1 ) ;
9576: LD_VAR 0 1
9580: PPUSH
9581: CALL_OW 265
9585: PUSH
9586: EMPTY
9587: LIST
9588: PUSH
9589: LD_VAR 0 1
9593: PPUSH
9594: CALL_OW 262
9598: PUSH
9599: EMPTY
9600: LIST
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 263
9611: PUSH
9612: EMPTY
9613: LIST
9614: PUSH
9615: LD_VAR 0 1
9619: PPUSH
9620: CALL_OW 264
9624: PUSH
9625: EMPTY
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PPUSH
9634: LD_STRING 14_JMMGirlVeh_1
9636: PPUSH
9637: CALL_OW 39
// FinishMission ( false ) ;
9641: LD_INT 0
9643: PPUSH
9644: CALL 9888 0 1
// disable ;
9648: DISABLE
// end ; end ;
9649: GO 9652
9651: POP
// end else
9652: GO 9734
// begin if JMMGirl = 1 then
9654: LD_EXP 2
9658: PUSH
9659: LD_INT 1
9661: EQUAL
9662: IFFALSE 9679
// dec := Query ( Q3bJ ) else
9664: LD_ADDR_VAR 0 2
9668: PUSH
9669: LD_STRING Q3bJ
9671: PPUSH
9672: CALL_OW 97
9676: ST_TO_ADDR
9677: GO 9717
// if JMMGirl = 2 then
9679: LD_EXP 2
9683: PUSH
9684: LD_INT 2
9686: EQUAL
9687: IFFALSE 9704
// dec := Query ( Q3bL ) else
9689: LD_ADDR_VAR 0 2
9693: PUSH
9694: LD_STRING Q3bL
9696: PPUSH
9697: CALL_OW 97
9701: ST_TO_ADDR
9702: GO 9717
// dec := Query ( Q3bX ) ;
9704: LD_ADDR_VAR 0 2
9708: PUSH
9709: LD_STRING Q3bX
9711: PPUSH
9712: CALL_OW 97
9716: ST_TO_ADDR
// if dec = 1 then
9717: LD_VAR 0 2
9721: PUSH
9722: LD_INT 1
9724: EQUAL
9725: IFFALSE 9734
// FinishMission ( false ) ;
9727: LD_INT 0
9729: PPUSH
9730: CALL 9888 0 1
// end ; end ;
9734: PPOPN 2
9736: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9737: LD_INT 22
9739: PUSH
9740: LD_INT 3
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: LD_INT 23
9749: PUSH
9750: LD_INT 3
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PUSH
9757: LD_INT 21
9759: PUSH
9760: LD_INT 1
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 69
9776: PUSH
9777: LD_INT 0
9779: EQUAL
9780: IFFALSE 9887
9782: GO 9784
9784: DISABLE
// begin DialogueOn ;
9785: CALL_OW 6
// Say ( JMM , DEnd-JMM-1 ) ;
9789: LD_EXP 8
9793: PPUSH
9794: LD_STRING DEnd-JMM-1
9796: PPUSH
9797: CALL_OW 88
// case JMMGirl of 1 :
9801: LD_EXP 2
9805: PUSH
9806: LD_INT 1
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9829
9814: POP
// Say ( Joan , DEnd-Joan-1 ) ; 2 :
9815: LD_EXP 10
9819: PPUSH
9820: LD_STRING DEnd-Joan-1
9822: PPUSH
9823: CALL_OW 88
9827: GO 9876
9829: LD_INT 2
9831: DOUBLE
9832: EQUAL
9833: IFTRUE 9837
9835: GO 9852
9837: POP
// Say ( Lisa , DEnd-Lisa-1 ) ; 3 :
9838: LD_EXP 11
9842: PPUSH
9843: LD_STRING DEnd-Lisa-1
9845: PPUSH
9846: CALL_OW 88
9850: GO 9876
9852: LD_INT 3
9854: DOUBLE
9855: EQUAL
9856: IFTRUE 9860
9858: GO 9875
9860: POP
// Say ( Connie , DEnd-Con-1 ) ; end ;
9861: LD_EXP 12
9865: PPUSH
9866: LD_STRING DEnd-Con-1
9868: PPUSH
9869: CALL_OW 88
9873: GO 9876
9875: POP
// DialogueOff ;
9876: CALL_OW 7
// FinishMission ( false ) ;
9880: LD_INT 0
9882: PPUSH
9883: CALL 9888 0 1
// end ;
9887: END
// function FinishMission ( fastEnd ) ; var JMMNewVeh , m1 , m2 , m3 , ruEliminated ; begin
9888: LD_INT 0
9890: PPUSH
9891: PPUSH
9892: PPUSH
9893: PPUSH
9894: PPUSH
9895: PPUSH
// m1 := false ;
9896: LD_ADDR_VAR 0 4
9900: PUSH
9901: LD_INT 0
9903: ST_TO_ADDR
// m2 := false ;
9904: LD_ADDR_VAR 0 5
9908: PUSH
9909: LD_INT 0
9911: ST_TO_ADDR
// m3 := false ;
9912: LD_ADDR_VAR 0 6
9916: PUSH
9917: LD_INT 0
9919: ST_TO_ADDR
// ruEliminated := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
9920: LD_ADDR_VAR 0 7
9924: PUSH
9925: LD_INT 22
9927: PUSH
9928: LD_INT 3
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 21
9937: PUSH
9938: LD_INT 1
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PPUSH
9949: CALL_OW 69
9953: PUSH
9954: LD_INT 0
9956: EQUAL
9957: ST_TO_ADDR
// SaveCharacters ( JMM , 14_JMM ) ;
9958: LD_EXP 8
9962: PPUSH
9963: LD_STRING 14_JMM
9965: PPUSH
9966: CALL_OW 38
// if tick <= 50 50$00 then
9970: LD_OWVAR 1
9974: PUSH
9975: LD_INT 105000
9977: LESSEQUAL
9978: IFFALSE 9987
// SetAchievement ( ACH_ASPEED_14 ) ;
9980: LD_STRING ACH_ASPEED_14
9982: PPUSH
9983: CALL_OW 543
// if IsInUnit ( JMM ) and GetType ( IsInUnit ( JMM ) ) = unit_vehicle then
9987: LD_EXP 8
9991: PPUSH
9992: CALL_OW 310
9996: PUSH
9997: LD_EXP 8
10001: PPUSH
10002: CALL_OW 310
10006: PPUSH
10007: CALL_OW 247
10011: PUSH
10012: LD_INT 2
10014: EQUAL
10015: AND
10016: IFFALSE 10098
// begin JMMNewVeh = IsInUnit ( JMM ) ;
10018: LD_ADDR_VAR 0 3
10022: PUSH
10023: LD_EXP 8
10027: PPUSH
10028: CALL_OW 310
10032: ST_TO_ADDR
// SaveVariable ( [ [ GetChassis ( JMMNewVeh ) ] , [ GetEngine ( JMMNewVeh ) ] , [ GetControl ( JMMNewVeh ) ] , [ GetWeapon ( JMMNewVeh ) ] ] , 14_JMMVeh_1 ) ;
10033: LD_VAR 0 3
10037: PPUSH
10038: CALL_OW 265
10042: PUSH
10043: EMPTY
10044: LIST
10045: PUSH
10046: LD_VAR 0 3
10050: PPUSH
10051: CALL_OW 262
10055: PUSH
10056: EMPTY
10057: LIST
10058: PUSH
10059: LD_VAR 0 3
10063: PPUSH
10064: CALL_OW 263
10068: PUSH
10069: EMPTY
10070: LIST
10071: PUSH
10072: LD_VAR 0 3
10076: PPUSH
10077: CALL_OW 264
10081: PUSH
10082: EMPTY
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: PPUSH
10091: LD_STRING 14_JMMVeh_1
10093: PPUSH
10094: CALL_OW 39
// end ; if fastEnd then
10098: LD_VAR 0 1
10102: IFFALSE 10193
// begin AddMedal ( fastend , - 1 ) ;
10104: LD_STRING fastend
10106: PPUSH
10107: LD_INT 1
10109: NEG
10110: PPUSH
10111: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10115: LD_STRING fastend
10117: PPUSH
10118: LD_INT 1
10120: NEG
10121: PPUSH
10122: CALL_OW 101
// AddMedal ( fastend , - 1 ) ;
10126: LD_STRING fastend
10128: PPUSH
10129: LD_INT 1
10131: NEG
10132: PPUSH
10133: CALL_OW 101
// SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10137: LD_EXP 2
10141: PPUSH
10142: LD_STRING 14_JMMGirl_1
10144: PPUSH
10145: CALL_OW 39
// SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10149: LD_INT 0
10151: PPUSH
10152: LD_STRING 14_JMMGirlStatus_1
10154: PPUSH
10155: CALL_OW 39
// SaveVariable ( 0 , 14_KappaStatus_1 ) ;
10159: LD_INT 0
10161: PPUSH
10162: LD_STRING 14_KappaStatus_1
10164: PPUSH
10165: CALL_OW 39
// GiveMedals ( Eliminate ) ;
10169: LD_STRING Eliminate
10171: PPUSH
10172: CALL_OW 102
// RewardPeople ( JMM ) ;
10176: LD_EXP 8
10180: PPUSH
10181: CALL_OW 43
// YouWin ;
10185: CALL_OW 103
// exit ;
10189: GO 10839
// end else
10191: GO 10732
// begin SaveVariable ( JMMGirl , 14_JMMGirl_1 ) ;
10193: LD_EXP 2
10197: PPUSH
10198: LD_STRING 14_JMMGirl_1
10200: PPUSH
10201: CALL_OW 39
// SaveVariable ( ruEliminated , 14_KappaStatus_1 ) ;
10205: LD_VAR 0 7
10209: PPUSH
10210: LD_STRING 14_KappaStatus_1
10212: PPUSH
10213: CALL_OW 39
// case JMMGirl of 1 :
10217: LD_EXP 2
10221: PUSH
10222: LD_INT 1
10224: DOUBLE
10225: EQUAL
10226: IFTRUE 10230
10228: GO 10358
10230: POP
// begin if IsOk ( Joan ) and GetSide ( Joan ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Joan ) ) < 10 ) then
10231: LD_EXP 10
10235: PPUSH
10236: CALL_OW 302
10240: PUSH
10241: LD_EXP 10
10245: PPUSH
10246: CALL_OW 255
10250: PUSH
10251: LD_INT 1
10253: EQUAL
10254: AND
10255: PUSH
10256: LD_VAR 0 7
10260: PUSH
10261: LD_EXP 8
10265: PPUSH
10266: CALL_OW 310
10270: PPUSH
10271: LD_EXP 10
10275: PPUSH
10276: CALL_OW 310
10280: PPUSH
10281: CALL_OW 296
10285: PUSH
10286: LD_INT 10
10288: LESS
10289: OR
10290: AND
10291: IFFALSE 10335
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10293: LD_INT 1
10295: PPUSH
10296: LD_STRING 14_JMMGirlStatus_1
10298: PPUSH
10299: CALL_OW 39
// SaveCharacters ( Joan , 14_Joan ) ;
10303: LD_EXP 10
10307: PPUSH
10308: LD_STRING 14_Joan
10310: PPUSH
10311: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10315: LD_STRING protect
10317: PPUSH
10318: LD_INT 1
10320: PPUSH
10321: CALL_OW 101
// m1 := true ;
10325: LD_ADDR_VAR 0 4
10329: PUSH
10330: LD_INT 1
10332: ST_TO_ADDR
// end else
10333: GO 10356
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10335: LD_INT 0
10337: PPUSH
10338: LD_STRING 14_JMMGirlStatus_1
10340: PPUSH
10341: CALL_OW 39
// AddMedal ( protect , - 1 ) ;
10345: LD_STRING protect
10347: PPUSH
10348: LD_INT 1
10350: NEG
10351: PPUSH
10352: CALL_OW 101
// end ; end ; 2 :
10356: GO 10631
10358: LD_INT 2
10360: DOUBLE
10361: EQUAL
10362: IFTRUE 10366
10364: GO 10494
10366: POP
// begin if IsOk ( Lisa ) and GetSide ( Lisa ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Lisa ) ) < 10 ) then
10367: LD_EXP 11
10371: PPUSH
10372: CALL_OW 302
10376: PUSH
10377: LD_EXP 11
10381: PPUSH
10382: CALL_OW 255
10386: PUSH
10387: LD_INT 1
10389: EQUAL
10390: AND
10391: PUSH
10392: LD_VAR 0 7
10396: PUSH
10397: LD_EXP 8
10401: PPUSH
10402: CALL_OW 310
10406: PPUSH
10407: LD_EXP 11
10411: PPUSH
10412: CALL_OW 310
10416: PPUSH
10417: CALL_OW 296
10421: PUSH
10422: LD_INT 10
10424: LESS
10425: OR
10426: AND
10427: IFFALSE 10471
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10429: LD_INT 1
10431: PPUSH
10432: LD_STRING 14_JMMGirlStatus_1
10434: PPUSH
10435: CALL_OW 39
// SaveCharacters ( Lisa , 14_Lisa ) ;
10439: LD_EXP 11
10443: PPUSH
10444: LD_STRING 14_Lisa
10446: PPUSH
10447: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10451: LD_STRING protect
10453: PPUSH
10454: LD_INT 1
10456: PPUSH
10457: CALL_OW 101
// m1 := true ;
10461: LD_ADDR_VAR 0 4
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// end else
10469: GO 10492
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10471: LD_INT 0
10473: PPUSH
10474: LD_STRING 14_JMMGirlStatus_1
10476: PPUSH
10477: CALL_OW 39
// AddMedal ( protect , - 2 ) ;
10481: LD_STRING protect
10483: PPUSH
10484: LD_INT 2
10486: NEG
10487: PPUSH
10488: CALL_OW 101
// end ; end ; 3 :
10492: GO 10631
10494: LD_INT 3
10496: DOUBLE
10497: EQUAL
10498: IFTRUE 10502
10500: GO 10630
10502: POP
// begin if IsOk ( Connie ) and GetSide ( Connie ) = 1 and ( ruEliminated or GetDistUnits ( IsInUnit ( JMM ) , IsInUnit ( Connie ) ) < 10 ) then
10503: LD_EXP 12
10507: PPUSH
10508: CALL_OW 302
10512: PUSH
10513: LD_EXP 12
10517: PPUSH
10518: CALL_OW 255
10522: PUSH
10523: LD_INT 1
10525: EQUAL
10526: AND
10527: PUSH
10528: LD_VAR 0 7
10532: PUSH
10533: LD_EXP 8
10537: PPUSH
10538: CALL_OW 310
10542: PPUSH
10543: LD_EXP 12
10547: PPUSH
10548: CALL_OW 310
10552: PPUSH
10553: CALL_OW 296
10557: PUSH
10558: LD_INT 10
10560: LESS
10561: OR
10562: AND
10563: IFFALSE 10607
// begin SaveVariable ( 1 , 14_JMMGirlStatus_1 ) ;
10565: LD_INT 1
10567: PPUSH
10568: LD_STRING 14_JMMGirlStatus_1
10570: PPUSH
10571: CALL_OW 39
// SaveCharacters ( Connie , 14_Connie ) ;
10575: LD_EXP 12
10579: PPUSH
10580: LD_STRING 14_Connie
10582: PPUSH
10583: CALL_OW 38
// AddMedal ( protect , 1 ) ;
10587: LD_STRING protect
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 101
// m1 := true ;
10597: LD_ADDR_VAR 0 4
10601: PUSH
10602: LD_INT 1
10604: ST_TO_ADDR
// end else
10605: GO 10628
// begin SaveVariable ( 0 , 14_JMMGirlStatus_1 ) ;
10607: LD_INT 0
10609: PPUSH
10610: LD_STRING 14_JMMGirlStatus_1
10612: PPUSH
10613: CALL_OW 39
// AddMedal ( protect , - 3 ) ;
10617: LD_STRING protect
10619: PPUSH
10620: LD_INT 3
10622: NEG
10623: PPUSH
10624: CALL_OW 101
// end ; end ; end ;
10628: GO 10631
10630: POP
// if amLaserCounter >= 2 then
10631: LD_EXP 7
10635: PUSH
10636: LD_INT 2
10638: GREATEREQUAL
10639: IFFALSE 10661
// begin AddMedal ( double , 1 ) ;
10641: LD_STRING double
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: CALL_OW 101
// m2 := true ;
10651: LD_ADDR_VAR 0 5
10655: PUSH
10656: LD_INT 1
10658: ST_TO_ADDR
// end else
10659: GO 10695
// begin if amLaserCounter = 1 then
10661: LD_EXP 7
10665: PUSH
10666: LD_INT 1
10668: EQUAL
10669: IFFALSE 10684
// AddMedal ( double , - 2 ) else
10671: LD_STRING double
10673: PPUSH
10674: LD_INT 2
10676: NEG
10677: PPUSH
10678: CALL_OW 101
10682: GO 10695
// AddMedal ( double , - 1 ) ;
10684: LD_STRING double
10686: PPUSH
10687: LD_INT 1
10689: NEG
10690: PPUSH
10691: CALL_OW 101
// end ; if ruEliminated then
10695: LD_VAR 0 7
10699: IFFALSE 10721
// begin AddMedal ( base , 1 ) ;
10701: LD_STRING base
10703: PPUSH
10704: LD_INT 1
10706: PPUSH
10707: CALL_OW 101
// m3 := true ;
10711: LD_ADDR_VAR 0 6
10715: PUSH
10716: LD_INT 1
10718: ST_TO_ADDR
// end else
10719: GO 10732
// AddMedal ( base , - 1 ) ;
10721: LD_STRING base
10723: PPUSH
10724: LD_INT 1
10726: NEG
10727: PPUSH
10728: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
10732: LD_VAR 0 4
10736: PUSH
10737: LD_VAR 0 5
10741: AND
10742: PUSH
10743: LD_VAR 0 6
10747: AND
10748: PUSH
10749: LD_OWVAR 67
10753: PUSH
10754: LD_INT 3
10756: GREATEREQUAL
10757: AND
10758: IFFALSE 10770
// SetAchievementEX ( ACH_AMER , 14 ) ;
10760: LD_STRING ACH_AMER
10762: PPUSH
10763: LD_INT 14
10765: PPUSH
10766: CALL_OW 564
// GiveMedals ( Eliminate ) ;
10770: LD_STRING Eliminate
10772: PPUSH
10773: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_class , class_apeman ] ] , [ f_not , [ f_class , class_apeman_engineer ] ] ] ) ) ;
10777: LD_INT 22
10779: PUSH
10780: LD_INT 1
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 3
10789: PUSH
10790: LD_INT 25
10792: PUSH
10793: LD_INT 12
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 3
10806: PUSH
10807: LD_INT 25
10809: PUSH
10810: LD_INT 16
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: LIST
10825: PPUSH
10826: CALL_OW 69
10830: PPUSH
10831: CALL_OW 43
// YouWin ;
10835: CALL_OW 103
// end ; end_of_file
10839: LD_VAR 0 2
10843: RET
// export function CreateNature ; var i , un ; begin
10844: LD_INT 0
10846: PPUSH
10847: PPUSH
10848: PPUSH
// PrepareEnchidna ;
10849: CALL 65281 0 0
// for i := 1 to 3 do
10853: LD_ADDR_VAR 0 2
10857: PUSH
10858: DOUBLE
10859: LD_INT 1
10861: DEC
10862: ST_TO_ADDR
10863: LD_INT 3
10865: PUSH
10866: FOR_TO
10867: IFFALSE 10916
// begin un := CreateHuman ;
10869: LD_ADDR_VAR 0 3
10873: PUSH
10874: CALL_OW 44
10878: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10879: LD_VAR 0 3
10883: PPUSH
10884: LD_INT 0
10886: PPUSH
10887: LD_INT 5
10889: PPUSH
10890: CALL_OW 12
10894: PPUSH
10895: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10899: LD_VAR 0 3
10903: PPUSH
10904: LD_INT 9
10906: PPUSH
10907: LD_INT 0
10909: PPUSH
10910: CALL_OW 49
// end ;
10914: GO 10866
10916: POP
10917: POP
// PrepareHorse ;
10918: CALL 65441 0 0
// for i := 1 to 2 do
10922: LD_ADDR_VAR 0 2
10926: PUSH
10927: DOUBLE
10928: LD_INT 1
10930: DEC
10931: ST_TO_ADDR
10932: LD_INT 2
10934: PUSH
10935: FOR_TO
10936: IFFALSE 10985
// begin un := CreateHuman ;
10938: LD_ADDR_VAR 0 3
10942: PUSH
10943: CALL_OW 44
10947: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
10948: LD_VAR 0 3
10952: PPUSH
10953: LD_INT 0
10955: PPUSH
10956: LD_INT 5
10958: PPUSH
10959: CALL_OW 12
10963: PPUSH
10964: CALL_OW 233
// PlaceUnitArea ( un , natureArea , false ) ;
10968: LD_VAR 0 3
10972: PPUSH
10973: LD_INT 9
10975: PPUSH
10976: LD_INT 0
10978: PPUSH
10979: CALL_OW 49
// end ;
10983: GO 10935
10985: POP
10986: POP
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
10987: LD_ADDR_VAR 0 2
10991: PUSH
10992: DOUBLE
10993: LD_INT 1
10995: DEC
10996: ST_TO_ADDR
10997: LD_INT 4
10999: PUSH
11000: LD_INT 5
11002: PUSH
11003: LD_INT 5
11005: PUSH
11006: LD_INT 5
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_OWVAR 67
11019: ARRAY
11020: PUSH
11021: FOR_TO
11022: IFFALSE 11086
// begin PrepareApeman ( rand ( 0 , 5 ) ) ;
11024: LD_INT 0
11026: PPUSH
11027: LD_INT 5
11029: PPUSH
11030: CALL_OW 12
11034: PPUSH
11035: CALL 65112 0 1
// un := CreateHuman ;
11039: LD_ADDR_VAR 0 3
11043: PUSH
11044: CALL_OW 44
11048: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11049: LD_VAR 0 3
11053: PPUSH
11054: LD_INT 0
11056: PPUSH
11057: LD_INT 5
11059: PPUSH
11060: CALL_OW 12
11064: PPUSH
11065: CALL_OW 233
// PlaceUnitArea ( un , apeArea , false ) ;
11069: LD_VAR 0 3
11073: PPUSH
11074: LD_INT 8
11076: PPUSH
11077: LD_INT 0
11079: PPUSH
11080: CALL_OW 49
// end ;
11084: GO 11021
11086: POP
11087: POP
// PrepareFish ;
11088: CALL 65361 0 0
// for i := 1 to 2 do
11092: LD_ADDR_VAR 0 2
11096: PUSH
11097: DOUBLE
11098: LD_INT 1
11100: DEC
11101: ST_TO_ADDR
11102: LD_INT 2
11104: PUSH
11105: FOR_TO
11106: IFFALSE 11155
// begin un := CreateHuman ;
11108: LD_ADDR_VAR 0 3
11112: PUSH
11113: CALL_OW 44
11117: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11118: LD_VAR 0 3
11122: PPUSH
11123: LD_INT 0
11125: PPUSH
11126: LD_INT 5
11128: PPUSH
11129: CALL_OW 12
11133: PPUSH
11134: CALL_OW 233
// PlaceUnitArea ( un , waterArea , false ) ;
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_INT 6
11145: PPUSH
11146: LD_INT 0
11148: PPUSH
11149: CALL_OW 49
// end ;
11153: GO 11105
11155: POP
11156: POP
// PrepareFrog ;
11157: CALL 65321 0 0
// for i := 1 to 2 do
11161: LD_ADDR_VAR 0 2
11165: PUSH
11166: DOUBLE
11167: LD_INT 1
11169: DEC
11170: ST_TO_ADDR
11171: LD_INT 2
11173: PUSH
11174: FOR_TO
11175: IFFALSE 11224
// begin un := CreateHuman ;
11177: LD_ADDR_VAR 0 3
11181: PUSH
11182: CALL_OW 44
11186: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
11187: LD_VAR 0 3
11191: PPUSH
11192: LD_INT 0
11194: PPUSH
11195: LD_INT 5
11197: PPUSH
11198: CALL_OW 12
11202: PPUSH
11203: CALL_OW 233
// PlaceUnitArea ( un , swampArea , false ) ;
11207: LD_VAR 0 3
11211: PPUSH
11212: LD_INT 7
11214: PPUSH
11215: LD_INT 0
11217: PPUSH
11218: CALL_OW 49
// end ;
11222: GO 11174
11224: POP
11225: POP
// PrepareMastodont ;
11226: CALL 65481 0 0
// un := CreateVehicle ;
11230: LD_ADDR_VAR 0 3
11234: PUSH
11235: CALL_OW 45
11239: ST_TO_ADDR
// PlaceUnitXYD ( un , 166 , 134 , 1 , false ) ;
11240: LD_VAR 0 3
11244: PPUSH
11245: LD_INT 166
11247: PPUSH
11248: LD_INT 134
11250: PPUSH
11251: LD_INT 1
11253: PPUSH
11254: LD_INT 0
11256: PPUSH
11257: CALL 70971 0 5
// end ; end_of_file
11261: LD_VAR 0 1
11265: RET
// every 1 1$30 + 4 4$20 trigger GetListOfCratesInArea ( cratesNorth ) < 20 do
11266: LD_INT 14
11268: PPUSH
11269: CALL_OW 435
11273: PUSH
11274: LD_INT 20
11276: LESS
11277: IFFALSE 11319
11279: GO 11281
11281: DISABLE
// begin enable ;
11282: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11283: LD_INT 35
11285: PPUSH
11286: LD_INT 735
11288: PPUSH
11289: CALL_OW 12
11293: PPUSH
11294: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesNorth , true ) ;
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 5
11303: PPUSH
11304: CALL_OW 12
11308: PPUSH
11309: LD_INT 14
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 55
// end ;
11319: END
// every 0 0$55 + 3 3$20 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11320: LD_INT 13
11322: PPUSH
11323: CALL_OW 435
11327: PUSH
11328: LD_INT 30
11330: LESS
11331: IFFALSE 11373
11333: GO 11335
11335: DISABLE
// begin enable ;
11336: ENABLE
// wait ( rand ( 0 0$1 , 0 0$21 ) ) ;
11337: LD_INT 35
11339: PPUSH
11340: LD_INT 735
11342: PPUSH
11343: CALL_OW 12
11347: PPUSH
11348: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSouth , true ) ;
11352: LD_INT 1
11354: PPUSH
11355: LD_INT 5
11357: PPUSH
11358: CALL_OW 12
11362: PPUSH
11363: LD_INT 13
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 55
// end ;
11373: END
// every 2 2$00 trigger GetListOfCratesInArea ( cratesSouth ) < 30 do
11374: LD_INT 13
11376: PPUSH
11377: CALL_OW 435
11381: PUSH
11382: LD_INT 30
11384: LESS
11385: IFFALSE 11418
11387: GO 11389
11389: DISABLE
// begin enable ;
11390: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 133 , 122 , 20 , true ) ;
11391: LD_INT 1
11393: PPUSH
11394: LD_INT 5
11396: PPUSH
11397: CALL_OW 12
11401: PPUSH
11402: LD_INT 133
11404: PPUSH
11405: LD_INT 122
11407: PPUSH
11408: LD_INT 20
11410: PPUSH
11411: LD_INT 1
11413: PPUSH
11414: CALL_OW 56
// end ; end_of_file end_of_file
11418: END
// export globalGameSaveCounter ; every 0 0$1 do
11419: GO 11421
11421: DISABLE
// begin enable ;
11422: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11423: LD_STRING updateTimer(
11425: PUSH
11426: LD_OWVAR 1
11430: STR
11431: PUSH
11432: LD_STRING );
11434: STR
11435: PPUSH
11436: CALL_OW 559
// end ;
11440: END
// every 0 0$1 do
11441: GO 11443
11443: DISABLE
// begin globalGameSaveCounter := 0 ;
11444: LD_ADDR_EXP 21
11448: PUSH
11449: LD_INT 0
11451: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11452: LD_STRING setGameSaveCounter(0)
11454: PPUSH
11455: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11459: LD_STRING initStreamRollete();
11461: PPUSH
11462: CALL_OW 559
// InitStreamMode ;
11466: CALL 12792 0 0
// DefineStreamItems ( false ) ;
11470: LD_INT 0
11472: PPUSH
11473: CALL 13256 0 1
// end ;
11477: END
// export function SOS_MapStart ( ) ; begin
11478: LD_INT 0
11480: PPUSH
// if streamModeActive then
11481: LD_EXP 22
11485: IFFALSE 11494
// DefineStreamItems ( true ) ;
11487: LD_INT 1
11489: PPUSH
11490: CALL 13256 0 1
// UpdateLuaVariables ( ) ;
11494: CALL 11511 0 0
// UpdateFactoryWaypoints ( ) ;
11498: CALL 26125 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11502: CALL 26382 0 0
// end ;
11506: LD_VAR 0 1
11510: RET
// function UpdateLuaVariables ( ) ; begin
11511: LD_INT 0
11513: PPUSH
// if globalGameSaveCounter then
11514: LD_EXP 21
11518: IFFALSE 11552
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11520: LD_ADDR_EXP 21
11524: PUSH
11525: LD_EXP 21
11529: PPUSH
11530: CALL 70192 0 1
11534: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11535: LD_STRING setGameSaveCounter(
11537: PUSH
11538: LD_EXP 21
11542: STR
11543: PUSH
11544: LD_STRING )
11546: STR
11547: PPUSH
11548: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11552: LD_STRING setGameDifficulty(
11554: PUSH
11555: LD_OWVAR 67
11559: STR
11560: PUSH
11561: LD_STRING )
11563: STR
11564: PPUSH
11565: CALL_OW 559
// end ;
11569: LD_VAR 0 1
11573: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11574: LD_INT 0
11576: PPUSH
// if p2 = stream_mode then
11577: LD_VAR 0 2
11581: PUSH
11582: LD_INT 100
11584: EQUAL
11585: IFFALSE 12588
// begin if not StreamModeActive then
11587: LD_EXP 22
11591: NOT
11592: IFFALSE 11602
// StreamModeActive := true ;
11594: LD_ADDR_EXP 22
11598: PUSH
11599: LD_INT 1
11601: ST_TO_ADDR
// if p3 = 0 then
11602: LD_VAR 0 3
11606: PUSH
11607: LD_INT 0
11609: EQUAL
11610: IFFALSE 11616
// InitStreamMode ;
11612: CALL 12792 0 0
// if p3 = 1 then
11616: LD_VAR 0 3
11620: PUSH
11621: LD_INT 1
11623: EQUAL
11624: IFFALSE 11634
// sRocket := true ;
11626: LD_ADDR_EXP 27
11630: PUSH
11631: LD_INT 1
11633: ST_TO_ADDR
// if p3 = 2 then
11634: LD_VAR 0 3
11638: PUSH
11639: LD_INT 2
11641: EQUAL
11642: IFFALSE 11652
// sSpeed := true ;
11644: LD_ADDR_EXP 26
11648: PUSH
11649: LD_INT 1
11651: ST_TO_ADDR
// if p3 = 3 then
11652: LD_VAR 0 3
11656: PUSH
11657: LD_INT 3
11659: EQUAL
11660: IFFALSE 11670
// sEngine := true ;
11662: LD_ADDR_EXP 28
11666: PUSH
11667: LD_INT 1
11669: ST_TO_ADDR
// if p3 = 4 then
11670: LD_VAR 0 3
11674: PUSH
11675: LD_INT 4
11677: EQUAL
11678: IFFALSE 11688
// sSpec := true ;
11680: LD_ADDR_EXP 25
11684: PUSH
11685: LD_INT 1
11687: ST_TO_ADDR
// if p3 = 5 then
11688: LD_VAR 0 3
11692: PUSH
11693: LD_INT 5
11695: EQUAL
11696: IFFALSE 11706
// sLevel := true ;
11698: LD_ADDR_EXP 29
11702: PUSH
11703: LD_INT 1
11705: ST_TO_ADDR
// if p3 = 6 then
11706: LD_VAR 0 3
11710: PUSH
11711: LD_INT 6
11713: EQUAL
11714: IFFALSE 11724
// sArmoury := true ;
11716: LD_ADDR_EXP 30
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// if p3 = 7 then
11724: LD_VAR 0 3
11728: PUSH
11729: LD_INT 7
11731: EQUAL
11732: IFFALSE 11742
// sRadar := true ;
11734: LD_ADDR_EXP 31
11738: PUSH
11739: LD_INT 1
11741: ST_TO_ADDR
// if p3 = 8 then
11742: LD_VAR 0 3
11746: PUSH
11747: LD_INT 8
11749: EQUAL
11750: IFFALSE 11760
// sBunker := true ;
11752: LD_ADDR_EXP 32
11756: PUSH
11757: LD_INT 1
11759: ST_TO_ADDR
// if p3 = 9 then
11760: LD_VAR 0 3
11764: PUSH
11765: LD_INT 9
11767: EQUAL
11768: IFFALSE 11778
// sHack := true ;
11770: LD_ADDR_EXP 33
11774: PUSH
11775: LD_INT 1
11777: ST_TO_ADDR
// if p3 = 10 then
11778: LD_VAR 0 3
11782: PUSH
11783: LD_INT 10
11785: EQUAL
11786: IFFALSE 11796
// sFire := true ;
11788: LD_ADDR_EXP 34
11792: PUSH
11793: LD_INT 1
11795: ST_TO_ADDR
// if p3 = 11 then
11796: LD_VAR 0 3
11800: PUSH
11801: LD_INT 11
11803: EQUAL
11804: IFFALSE 11814
// sRefresh := true ;
11806: LD_ADDR_EXP 35
11810: PUSH
11811: LD_INT 1
11813: ST_TO_ADDR
// if p3 = 12 then
11814: LD_VAR 0 3
11818: PUSH
11819: LD_INT 12
11821: EQUAL
11822: IFFALSE 11832
// sExp := true ;
11824: LD_ADDR_EXP 36
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// if p3 = 13 then
11832: LD_VAR 0 3
11836: PUSH
11837: LD_INT 13
11839: EQUAL
11840: IFFALSE 11850
// sDepot := true ;
11842: LD_ADDR_EXP 37
11846: PUSH
11847: LD_INT 1
11849: ST_TO_ADDR
// if p3 = 14 then
11850: LD_VAR 0 3
11854: PUSH
11855: LD_INT 14
11857: EQUAL
11858: IFFALSE 11868
// sFlag := true ;
11860: LD_ADDR_EXP 38
11864: PUSH
11865: LD_INT 1
11867: ST_TO_ADDR
// if p3 = 15 then
11868: LD_VAR 0 3
11872: PUSH
11873: LD_INT 15
11875: EQUAL
11876: IFFALSE 11886
// sKamikadze := true ;
11878: LD_ADDR_EXP 46
11882: PUSH
11883: LD_INT 1
11885: ST_TO_ADDR
// if p3 = 16 then
11886: LD_VAR 0 3
11890: PUSH
11891: LD_INT 16
11893: EQUAL
11894: IFFALSE 11904
// sTroll := true ;
11896: LD_ADDR_EXP 47
11900: PUSH
11901: LD_INT 1
11903: ST_TO_ADDR
// if p3 = 17 then
11904: LD_VAR 0 3
11908: PUSH
11909: LD_INT 17
11911: EQUAL
11912: IFFALSE 11922
// sSlow := true ;
11914: LD_ADDR_EXP 48
11918: PUSH
11919: LD_INT 1
11921: ST_TO_ADDR
// if p3 = 18 then
11922: LD_VAR 0 3
11926: PUSH
11927: LD_INT 18
11929: EQUAL
11930: IFFALSE 11940
// sLack := true ;
11932: LD_ADDR_EXP 49
11936: PUSH
11937: LD_INT 1
11939: ST_TO_ADDR
// if p3 = 19 then
11940: LD_VAR 0 3
11944: PUSH
11945: LD_INT 19
11947: EQUAL
11948: IFFALSE 11958
// sTank := true ;
11950: LD_ADDR_EXP 51
11954: PUSH
11955: LD_INT 1
11957: ST_TO_ADDR
// if p3 = 20 then
11958: LD_VAR 0 3
11962: PUSH
11963: LD_INT 20
11965: EQUAL
11966: IFFALSE 11976
// sRemote := true ;
11968: LD_ADDR_EXP 52
11972: PUSH
11973: LD_INT 1
11975: ST_TO_ADDR
// if p3 = 21 then
11976: LD_VAR 0 3
11980: PUSH
11981: LD_INT 21
11983: EQUAL
11984: IFFALSE 11994
// sPowell := true ;
11986: LD_ADDR_EXP 53
11990: PUSH
11991: LD_INT 1
11993: ST_TO_ADDR
// if p3 = 22 then
11994: LD_VAR 0 3
11998: PUSH
11999: LD_INT 22
12001: EQUAL
12002: IFFALSE 12012
// sTeleport := true ;
12004: LD_ADDR_EXP 56
12008: PUSH
12009: LD_INT 1
12011: ST_TO_ADDR
// if p3 = 23 then
12012: LD_VAR 0 3
12016: PUSH
12017: LD_INT 23
12019: EQUAL
12020: IFFALSE 12030
// sOilTower := true ;
12022: LD_ADDR_EXP 58
12026: PUSH
12027: LD_INT 1
12029: ST_TO_ADDR
// if p3 = 24 then
12030: LD_VAR 0 3
12034: PUSH
12035: LD_INT 24
12037: EQUAL
12038: IFFALSE 12048
// sShovel := true ;
12040: LD_ADDR_EXP 59
12044: PUSH
12045: LD_INT 1
12047: ST_TO_ADDR
// if p3 = 25 then
12048: LD_VAR 0 3
12052: PUSH
12053: LD_INT 25
12055: EQUAL
12056: IFFALSE 12066
// sSheik := true ;
12058: LD_ADDR_EXP 60
12062: PUSH
12063: LD_INT 1
12065: ST_TO_ADDR
// if p3 = 26 then
12066: LD_VAR 0 3
12070: PUSH
12071: LD_INT 26
12073: EQUAL
12074: IFFALSE 12084
// sEarthquake := true ;
12076: LD_ADDR_EXP 62
12080: PUSH
12081: LD_INT 1
12083: ST_TO_ADDR
// if p3 = 27 then
12084: LD_VAR 0 3
12088: PUSH
12089: LD_INT 27
12091: EQUAL
12092: IFFALSE 12102
// sAI := true ;
12094: LD_ADDR_EXP 63
12098: PUSH
12099: LD_INT 1
12101: ST_TO_ADDR
// if p3 = 28 then
12102: LD_VAR 0 3
12106: PUSH
12107: LD_INT 28
12109: EQUAL
12110: IFFALSE 12120
// sCargo := true ;
12112: LD_ADDR_EXP 66
12116: PUSH
12117: LD_INT 1
12119: ST_TO_ADDR
// if p3 = 29 then
12120: LD_VAR 0 3
12124: PUSH
12125: LD_INT 29
12127: EQUAL
12128: IFFALSE 12138
// sDLaser := true ;
12130: LD_ADDR_EXP 67
12134: PUSH
12135: LD_INT 1
12137: ST_TO_ADDR
// if p3 = 30 then
12138: LD_VAR 0 3
12142: PUSH
12143: LD_INT 30
12145: EQUAL
12146: IFFALSE 12156
// sExchange := true ;
12148: LD_ADDR_EXP 68
12152: PUSH
12153: LD_INT 1
12155: ST_TO_ADDR
// if p3 = 31 then
12156: LD_VAR 0 3
12160: PUSH
12161: LD_INT 31
12163: EQUAL
12164: IFFALSE 12174
// sFac := true ;
12166: LD_ADDR_EXP 69
12170: PUSH
12171: LD_INT 1
12173: ST_TO_ADDR
// if p3 = 32 then
12174: LD_VAR 0 3
12178: PUSH
12179: LD_INT 32
12181: EQUAL
12182: IFFALSE 12192
// sPower := true ;
12184: LD_ADDR_EXP 70
12188: PUSH
12189: LD_INT 1
12191: ST_TO_ADDR
// if p3 = 33 then
12192: LD_VAR 0 3
12196: PUSH
12197: LD_INT 33
12199: EQUAL
12200: IFFALSE 12210
// sRandom := true ;
12202: LD_ADDR_EXP 71
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// if p3 = 34 then
12210: LD_VAR 0 3
12214: PUSH
12215: LD_INT 34
12217: EQUAL
12218: IFFALSE 12228
// sShield := true ;
12220: LD_ADDR_EXP 72
12224: PUSH
12225: LD_INT 1
12227: ST_TO_ADDR
// if p3 = 35 then
12228: LD_VAR 0 3
12232: PUSH
12233: LD_INT 35
12235: EQUAL
12236: IFFALSE 12246
// sTime := true ;
12238: LD_ADDR_EXP 73
12242: PUSH
12243: LD_INT 1
12245: ST_TO_ADDR
// if p3 = 36 then
12246: LD_VAR 0 3
12250: PUSH
12251: LD_INT 36
12253: EQUAL
12254: IFFALSE 12264
// sTools := true ;
12256: LD_ADDR_EXP 74
12260: PUSH
12261: LD_INT 1
12263: ST_TO_ADDR
// if p3 = 101 then
12264: LD_VAR 0 3
12268: PUSH
12269: LD_INT 101
12271: EQUAL
12272: IFFALSE 12282
// sSold := true ;
12274: LD_ADDR_EXP 39
12278: PUSH
12279: LD_INT 1
12281: ST_TO_ADDR
// if p3 = 102 then
12282: LD_VAR 0 3
12286: PUSH
12287: LD_INT 102
12289: EQUAL
12290: IFFALSE 12300
// sDiff := true ;
12292: LD_ADDR_EXP 40
12296: PUSH
12297: LD_INT 1
12299: ST_TO_ADDR
// if p3 = 103 then
12300: LD_VAR 0 3
12304: PUSH
12305: LD_INT 103
12307: EQUAL
12308: IFFALSE 12318
// sFog := true ;
12310: LD_ADDR_EXP 43
12314: PUSH
12315: LD_INT 1
12317: ST_TO_ADDR
// if p3 = 104 then
12318: LD_VAR 0 3
12322: PUSH
12323: LD_INT 104
12325: EQUAL
12326: IFFALSE 12336
// sReset := true ;
12328: LD_ADDR_EXP 44
12332: PUSH
12333: LD_INT 1
12335: ST_TO_ADDR
// if p3 = 105 then
12336: LD_VAR 0 3
12340: PUSH
12341: LD_INT 105
12343: EQUAL
12344: IFFALSE 12354
// sSun := true ;
12346: LD_ADDR_EXP 45
12350: PUSH
12351: LD_INT 1
12353: ST_TO_ADDR
// if p3 = 106 then
12354: LD_VAR 0 3
12358: PUSH
12359: LD_INT 106
12361: EQUAL
12362: IFFALSE 12372
// sTiger := true ;
12364: LD_ADDR_EXP 41
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// if p3 = 107 then
12372: LD_VAR 0 3
12376: PUSH
12377: LD_INT 107
12379: EQUAL
12380: IFFALSE 12390
// sBomb := true ;
12382: LD_ADDR_EXP 42
12386: PUSH
12387: LD_INT 1
12389: ST_TO_ADDR
// if p3 = 108 then
12390: LD_VAR 0 3
12394: PUSH
12395: LD_INT 108
12397: EQUAL
12398: IFFALSE 12408
// sWound := true ;
12400: LD_ADDR_EXP 50
12404: PUSH
12405: LD_INT 1
12407: ST_TO_ADDR
// if p3 = 109 then
12408: LD_VAR 0 3
12412: PUSH
12413: LD_INT 109
12415: EQUAL
12416: IFFALSE 12426
// sBetray := true ;
12418: LD_ADDR_EXP 54
12422: PUSH
12423: LD_INT 1
12425: ST_TO_ADDR
// if p3 = 110 then
12426: LD_VAR 0 3
12430: PUSH
12431: LD_INT 110
12433: EQUAL
12434: IFFALSE 12444
// sContamin := true ;
12436: LD_ADDR_EXP 55
12440: PUSH
12441: LD_INT 1
12443: ST_TO_ADDR
// if p3 = 111 then
12444: LD_VAR 0 3
12448: PUSH
12449: LD_INT 111
12451: EQUAL
12452: IFFALSE 12462
// sOil := true ;
12454: LD_ADDR_EXP 57
12458: PUSH
12459: LD_INT 1
12461: ST_TO_ADDR
// if p3 = 112 then
12462: LD_VAR 0 3
12466: PUSH
12467: LD_INT 112
12469: EQUAL
12470: IFFALSE 12480
// sStu := true ;
12472: LD_ADDR_EXP 61
12476: PUSH
12477: LD_INT 1
12479: ST_TO_ADDR
// if p3 = 113 then
12480: LD_VAR 0 3
12484: PUSH
12485: LD_INT 113
12487: EQUAL
12488: IFFALSE 12498
// sBazooka := true ;
12490: LD_ADDR_EXP 64
12494: PUSH
12495: LD_INT 1
12497: ST_TO_ADDR
// if p3 = 114 then
12498: LD_VAR 0 3
12502: PUSH
12503: LD_INT 114
12505: EQUAL
12506: IFFALSE 12516
// sMortar := true ;
12508: LD_ADDR_EXP 65
12512: PUSH
12513: LD_INT 1
12515: ST_TO_ADDR
// if p3 = 115 then
12516: LD_VAR 0 3
12520: PUSH
12521: LD_INT 115
12523: EQUAL
12524: IFFALSE 12534
// sRanger := true ;
12526: LD_ADDR_EXP 75
12530: PUSH
12531: LD_INT 1
12533: ST_TO_ADDR
// if p3 = 116 then
12534: LD_VAR 0 3
12538: PUSH
12539: LD_INT 116
12541: EQUAL
12542: IFFALSE 12552
// sComputer := true ;
12544: LD_ADDR_EXP 76
12548: PUSH
12549: LD_INT 1
12551: ST_TO_ADDR
// if p3 = 117 then
12552: LD_VAR 0 3
12556: PUSH
12557: LD_INT 117
12559: EQUAL
12560: IFFALSE 12570
// s30 := true ;
12562: LD_ADDR_EXP 77
12566: PUSH
12567: LD_INT 1
12569: ST_TO_ADDR
// if p3 = 118 then
12570: LD_VAR 0 3
12574: PUSH
12575: LD_INT 118
12577: EQUAL
12578: IFFALSE 12588
// s60 := true ;
12580: LD_ADDR_EXP 78
12584: PUSH
12585: LD_INT 1
12587: ST_TO_ADDR
// end ; if p2 = hack_mode then
12588: LD_VAR 0 2
12592: PUSH
12593: LD_INT 101
12595: EQUAL
12596: IFFALSE 12724
// begin case p3 of 1 :
12598: LD_VAR 0 3
12602: PUSH
12603: LD_INT 1
12605: DOUBLE
12606: EQUAL
12607: IFTRUE 12611
12609: GO 12618
12611: POP
// hHackUnlimitedResources ; 2 :
12612: CALL 24871 0 0
12616: GO 12724
12618: LD_INT 2
12620: DOUBLE
12621: EQUAL
12622: IFTRUE 12626
12624: GO 12633
12626: POP
// hHackSetLevel10 ; 3 :
12627: CALL 25004 0 0
12631: GO 12724
12633: LD_INT 3
12635: DOUBLE
12636: EQUAL
12637: IFTRUE 12641
12639: GO 12648
12641: POP
// hHackSetLevel10YourUnits ; 4 :
12642: CALL 25089 0 0
12646: GO 12724
12648: LD_INT 4
12650: DOUBLE
12651: EQUAL
12652: IFTRUE 12656
12654: GO 12663
12656: POP
// hHackInvincible ; 5 :
12657: CALL 25537 0 0
12661: GO 12724
12663: LD_INT 5
12665: DOUBLE
12666: EQUAL
12667: IFTRUE 12671
12669: GO 12678
12671: POP
// hHackInvisible ; 6 :
12672: CALL 25648 0 0
12676: GO 12724
12678: LD_INT 6
12680: DOUBLE
12681: EQUAL
12682: IFTRUE 12686
12684: GO 12693
12686: POP
// hHackChangeYourSide ; 7 :
12687: CALL 25705 0 0
12691: GO 12724
12693: LD_INT 7
12695: DOUBLE
12696: EQUAL
12697: IFTRUE 12701
12699: GO 12708
12701: POP
// hHackChangeUnitSide ; 8 :
12702: CALL 25747 0 0
12706: GO 12724
12708: LD_INT 8
12710: DOUBLE
12711: EQUAL
12712: IFTRUE 12716
12714: GO 12723
12716: POP
// hHackFog ; end ;
12717: CALL 25848 0 0
12721: GO 12724
12723: POP
// end ; if p2 = game_save_mode then
12724: LD_VAR 0 2
12728: PUSH
12729: LD_INT 102
12731: EQUAL
12732: IFFALSE 12787
// begin if p3 = 1 then
12734: LD_VAR 0 3
12738: PUSH
12739: LD_INT 1
12741: EQUAL
12742: IFFALSE 12754
// globalGameSaveCounter := p4 ;
12744: LD_ADDR_EXP 21
12748: PUSH
12749: LD_VAR 0 4
12753: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12754: LD_VAR 0 3
12758: PUSH
12759: LD_INT 2
12761: EQUAL
12762: PUSH
12763: LD_EXP 21
12767: AND
12768: IFFALSE 12787
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12770: LD_STRING setGameSaveCounter(
12772: PUSH
12773: LD_EXP 21
12777: STR
12778: PUSH
12779: LD_STRING )
12781: STR
12782: PPUSH
12783: CALL_OW 559
// end ; end ;
12787: LD_VAR 0 7
12791: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12792: LD_INT 0
12794: PPUSH
// streamModeActive := false ;
12795: LD_ADDR_EXP 22
12799: PUSH
12800: LD_INT 0
12802: ST_TO_ADDR
// normalCounter := 36 ;
12803: LD_ADDR_EXP 23
12807: PUSH
12808: LD_INT 36
12810: ST_TO_ADDR
// hardcoreCounter := 18 ;
12811: LD_ADDR_EXP 24
12815: PUSH
12816: LD_INT 18
12818: ST_TO_ADDR
// sRocket := false ;
12819: LD_ADDR_EXP 27
12823: PUSH
12824: LD_INT 0
12826: ST_TO_ADDR
// sSpeed := false ;
12827: LD_ADDR_EXP 26
12831: PUSH
12832: LD_INT 0
12834: ST_TO_ADDR
// sEngine := false ;
12835: LD_ADDR_EXP 28
12839: PUSH
12840: LD_INT 0
12842: ST_TO_ADDR
// sSpec := false ;
12843: LD_ADDR_EXP 25
12847: PUSH
12848: LD_INT 0
12850: ST_TO_ADDR
// sLevel := false ;
12851: LD_ADDR_EXP 29
12855: PUSH
12856: LD_INT 0
12858: ST_TO_ADDR
// sArmoury := false ;
12859: LD_ADDR_EXP 30
12863: PUSH
12864: LD_INT 0
12866: ST_TO_ADDR
// sRadar := false ;
12867: LD_ADDR_EXP 31
12871: PUSH
12872: LD_INT 0
12874: ST_TO_ADDR
// sBunker := false ;
12875: LD_ADDR_EXP 32
12879: PUSH
12880: LD_INT 0
12882: ST_TO_ADDR
// sHack := false ;
12883: LD_ADDR_EXP 33
12887: PUSH
12888: LD_INT 0
12890: ST_TO_ADDR
// sFire := false ;
12891: LD_ADDR_EXP 34
12895: PUSH
12896: LD_INT 0
12898: ST_TO_ADDR
// sRefresh := false ;
12899: LD_ADDR_EXP 35
12903: PUSH
12904: LD_INT 0
12906: ST_TO_ADDR
// sExp := false ;
12907: LD_ADDR_EXP 36
12911: PUSH
12912: LD_INT 0
12914: ST_TO_ADDR
// sDepot := false ;
12915: LD_ADDR_EXP 37
12919: PUSH
12920: LD_INT 0
12922: ST_TO_ADDR
// sFlag := false ;
12923: LD_ADDR_EXP 38
12927: PUSH
12928: LD_INT 0
12930: ST_TO_ADDR
// sKamikadze := false ;
12931: LD_ADDR_EXP 46
12935: PUSH
12936: LD_INT 0
12938: ST_TO_ADDR
// sTroll := false ;
12939: LD_ADDR_EXP 47
12943: PUSH
12944: LD_INT 0
12946: ST_TO_ADDR
// sSlow := false ;
12947: LD_ADDR_EXP 48
12951: PUSH
12952: LD_INT 0
12954: ST_TO_ADDR
// sLack := false ;
12955: LD_ADDR_EXP 49
12959: PUSH
12960: LD_INT 0
12962: ST_TO_ADDR
// sTank := false ;
12963: LD_ADDR_EXP 51
12967: PUSH
12968: LD_INT 0
12970: ST_TO_ADDR
// sRemote := false ;
12971: LD_ADDR_EXP 52
12975: PUSH
12976: LD_INT 0
12978: ST_TO_ADDR
// sPowell := false ;
12979: LD_ADDR_EXP 53
12983: PUSH
12984: LD_INT 0
12986: ST_TO_ADDR
// sTeleport := false ;
12987: LD_ADDR_EXP 56
12991: PUSH
12992: LD_INT 0
12994: ST_TO_ADDR
// sOilTower := false ;
12995: LD_ADDR_EXP 58
12999: PUSH
13000: LD_INT 0
13002: ST_TO_ADDR
// sShovel := false ;
13003: LD_ADDR_EXP 59
13007: PUSH
13008: LD_INT 0
13010: ST_TO_ADDR
// sSheik := false ;
13011: LD_ADDR_EXP 60
13015: PUSH
13016: LD_INT 0
13018: ST_TO_ADDR
// sEarthquake := false ;
13019: LD_ADDR_EXP 62
13023: PUSH
13024: LD_INT 0
13026: ST_TO_ADDR
// sAI := false ;
13027: LD_ADDR_EXP 63
13031: PUSH
13032: LD_INT 0
13034: ST_TO_ADDR
// sCargo := false ;
13035: LD_ADDR_EXP 66
13039: PUSH
13040: LD_INT 0
13042: ST_TO_ADDR
// sDLaser := false ;
13043: LD_ADDR_EXP 67
13047: PUSH
13048: LD_INT 0
13050: ST_TO_ADDR
// sExchange := false ;
13051: LD_ADDR_EXP 68
13055: PUSH
13056: LD_INT 0
13058: ST_TO_ADDR
// sFac := false ;
13059: LD_ADDR_EXP 69
13063: PUSH
13064: LD_INT 0
13066: ST_TO_ADDR
// sPower := false ;
13067: LD_ADDR_EXP 70
13071: PUSH
13072: LD_INT 0
13074: ST_TO_ADDR
// sRandom := false ;
13075: LD_ADDR_EXP 71
13079: PUSH
13080: LD_INT 0
13082: ST_TO_ADDR
// sShield := false ;
13083: LD_ADDR_EXP 72
13087: PUSH
13088: LD_INT 0
13090: ST_TO_ADDR
// sTime := false ;
13091: LD_ADDR_EXP 73
13095: PUSH
13096: LD_INT 0
13098: ST_TO_ADDR
// sTools := false ;
13099: LD_ADDR_EXP 74
13103: PUSH
13104: LD_INT 0
13106: ST_TO_ADDR
// sSold := false ;
13107: LD_ADDR_EXP 39
13111: PUSH
13112: LD_INT 0
13114: ST_TO_ADDR
// sDiff := false ;
13115: LD_ADDR_EXP 40
13119: PUSH
13120: LD_INT 0
13122: ST_TO_ADDR
// sFog := false ;
13123: LD_ADDR_EXP 43
13127: PUSH
13128: LD_INT 0
13130: ST_TO_ADDR
// sReset := false ;
13131: LD_ADDR_EXP 44
13135: PUSH
13136: LD_INT 0
13138: ST_TO_ADDR
// sSun := false ;
13139: LD_ADDR_EXP 45
13143: PUSH
13144: LD_INT 0
13146: ST_TO_ADDR
// sTiger := false ;
13147: LD_ADDR_EXP 41
13151: PUSH
13152: LD_INT 0
13154: ST_TO_ADDR
// sBomb := false ;
13155: LD_ADDR_EXP 42
13159: PUSH
13160: LD_INT 0
13162: ST_TO_ADDR
// sWound := false ;
13163: LD_ADDR_EXP 50
13167: PUSH
13168: LD_INT 0
13170: ST_TO_ADDR
// sBetray := false ;
13171: LD_ADDR_EXP 54
13175: PUSH
13176: LD_INT 0
13178: ST_TO_ADDR
// sContamin := false ;
13179: LD_ADDR_EXP 55
13183: PUSH
13184: LD_INT 0
13186: ST_TO_ADDR
// sOil := false ;
13187: LD_ADDR_EXP 57
13191: PUSH
13192: LD_INT 0
13194: ST_TO_ADDR
// sStu := false ;
13195: LD_ADDR_EXP 61
13199: PUSH
13200: LD_INT 0
13202: ST_TO_ADDR
// sBazooka := false ;
13203: LD_ADDR_EXP 64
13207: PUSH
13208: LD_INT 0
13210: ST_TO_ADDR
// sMortar := false ;
13211: LD_ADDR_EXP 65
13215: PUSH
13216: LD_INT 0
13218: ST_TO_ADDR
// sRanger := false ;
13219: LD_ADDR_EXP 75
13223: PUSH
13224: LD_INT 0
13226: ST_TO_ADDR
// sComputer := false ;
13227: LD_ADDR_EXP 76
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// s30 := false ;
13235: LD_ADDR_EXP 77
13239: PUSH
13240: LD_INT 0
13242: ST_TO_ADDR
// s60 := false ;
13243: LD_ADDR_EXP 78
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// end ;
13251: LD_VAR 0 1
13255: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13256: LD_INT 0
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
13262: PPUSH
13263: PPUSH
13264: PPUSH
// result := [ ] ;
13265: LD_ADDR_VAR 0 2
13269: PUSH
13270: EMPTY
13271: ST_TO_ADDR
// if campaign_id = 1 then
13272: LD_OWVAR 69
13276: PUSH
13277: LD_INT 1
13279: EQUAL
13280: IFFALSE 16446
// begin case mission_number of 1 :
13282: LD_OWVAR 70
13286: PUSH
13287: LD_INT 1
13289: DOUBLE
13290: EQUAL
13291: IFTRUE 13295
13293: GO 13371
13295: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13296: LD_ADDR_VAR 0 2
13300: PUSH
13301: LD_INT 2
13303: PUSH
13304: LD_INT 4
13306: PUSH
13307: LD_INT 11
13309: PUSH
13310: LD_INT 12
13312: PUSH
13313: LD_INT 15
13315: PUSH
13316: LD_INT 16
13318: PUSH
13319: LD_INT 22
13321: PUSH
13322: LD_INT 23
13324: PUSH
13325: LD_INT 26
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 101
13341: PUSH
13342: LD_INT 102
13344: PUSH
13345: LD_INT 106
13347: PUSH
13348: LD_INT 116
13350: PUSH
13351: LD_INT 117
13353: PUSH
13354: LD_INT 118
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: ST_TO_ADDR
13369: GO 16444
13371: LD_INT 2
13373: DOUBLE
13374: EQUAL
13375: IFTRUE 13379
13377: GO 13463
13379: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13380: LD_ADDR_VAR 0 2
13384: PUSH
13385: LD_INT 2
13387: PUSH
13388: LD_INT 4
13390: PUSH
13391: LD_INT 11
13393: PUSH
13394: LD_INT 12
13396: PUSH
13397: LD_INT 15
13399: PUSH
13400: LD_INT 16
13402: PUSH
13403: LD_INT 22
13405: PUSH
13406: LD_INT 23
13408: PUSH
13409: LD_INT 26
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 101
13425: PUSH
13426: LD_INT 102
13428: PUSH
13429: LD_INT 105
13431: PUSH
13432: LD_INT 106
13434: PUSH
13435: LD_INT 108
13437: PUSH
13438: LD_INT 116
13440: PUSH
13441: LD_INT 117
13443: PUSH
13444: LD_INT 118
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: ST_TO_ADDR
13461: GO 16444
13463: LD_INT 3
13465: DOUBLE
13466: EQUAL
13467: IFTRUE 13471
13469: GO 13559
13471: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13472: LD_ADDR_VAR 0 2
13476: PUSH
13477: LD_INT 2
13479: PUSH
13480: LD_INT 4
13482: PUSH
13483: LD_INT 5
13485: PUSH
13486: LD_INT 11
13488: PUSH
13489: LD_INT 12
13491: PUSH
13492: LD_INT 15
13494: PUSH
13495: LD_INT 16
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_INT 26
13503: PUSH
13504: LD_INT 36
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 101
13521: PUSH
13522: LD_INT 102
13524: PUSH
13525: LD_INT 105
13527: PUSH
13528: LD_INT 106
13530: PUSH
13531: LD_INT 108
13533: PUSH
13534: LD_INT 116
13536: PUSH
13537: LD_INT 117
13539: PUSH
13540: LD_INT 118
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: ST_TO_ADDR
13557: GO 16444
13559: LD_INT 4
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13663
13567: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13568: LD_ADDR_VAR 0 2
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: LD_INT 4
13578: PUSH
13579: LD_INT 5
13581: PUSH
13582: LD_INT 8
13584: PUSH
13585: LD_INT 11
13587: PUSH
13588: LD_INT 12
13590: PUSH
13591: LD_INT 15
13593: PUSH
13594: LD_INT 16
13596: PUSH
13597: LD_INT 22
13599: PUSH
13600: LD_INT 23
13602: PUSH
13603: LD_INT 26
13605: PUSH
13606: LD_INT 36
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 101
13625: PUSH
13626: LD_INT 102
13628: PUSH
13629: LD_INT 105
13631: PUSH
13632: LD_INT 106
13634: PUSH
13635: LD_INT 108
13637: PUSH
13638: LD_INT 116
13640: PUSH
13641: LD_INT 117
13643: PUSH
13644: LD_INT 118
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: ST_TO_ADDR
13661: GO 16444
13663: LD_INT 5
13665: DOUBLE
13666: EQUAL
13667: IFTRUE 13671
13669: GO 13783
13671: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13672: LD_ADDR_VAR 0 2
13676: PUSH
13677: LD_INT 2
13679: PUSH
13680: LD_INT 4
13682: PUSH
13683: LD_INT 5
13685: PUSH
13686: LD_INT 6
13688: PUSH
13689: LD_INT 8
13691: PUSH
13692: LD_INT 11
13694: PUSH
13695: LD_INT 12
13697: PUSH
13698: LD_INT 15
13700: PUSH
13701: LD_INT 16
13703: PUSH
13704: LD_INT 22
13706: PUSH
13707: LD_INT 23
13709: PUSH
13710: LD_INT 25
13712: PUSH
13713: LD_INT 26
13715: PUSH
13716: LD_INT 36
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 101
13737: PUSH
13738: LD_INT 102
13740: PUSH
13741: LD_INT 105
13743: PUSH
13744: LD_INT 106
13746: PUSH
13747: LD_INT 108
13749: PUSH
13750: LD_INT 109
13752: PUSH
13753: LD_INT 112
13755: PUSH
13756: LD_INT 116
13758: PUSH
13759: LD_INT 117
13761: PUSH
13762: LD_INT 118
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: ST_TO_ADDR
13781: GO 16444
13783: LD_INT 6
13785: DOUBLE
13786: EQUAL
13787: IFTRUE 13791
13789: GO 13923
13791: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13792: LD_ADDR_VAR 0 2
13796: PUSH
13797: LD_INT 2
13799: PUSH
13800: LD_INT 4
13802: PUSH
13803: LD_INT 5
13805: PUSH
13806: LD_INT 6
13808: PUSH
13809: LD_INT 8
13811: PUSH
13812: LD_INT 11
13814: PUSH
13815: LD_INT 12
13817: PUSH
13818: LD_INT 15
13820: PUSH
13821: LD_INT 16
13823: PUSH
13824: LD_INT 20
13826: PUSH
13827: LD_INT 21
13829: PUSH
13830: LD_INT 22
13832: PUSH
13833: LD_INT 23
13835: PUSH
13836: LD_INT 25
13838: PUSH
13839: LD_INT 26
13841: PUSH
13842: LD_INT 30
13844: PUSH
13845: LD_INT 31
13847: PUSH
13848: LD_INT 32
13850: PUSH
13851: LD_INT 36
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 101
13877: PUSH
13878: LD_INT 102
13880: PUSH
13881: LD_INT 105
13883: PUSH
13884: LD_INT 106
13886: PUSH
13887: LD_INT 108
13889: PUSH
13890: LD_INT 109
13892: PUSH
13893: LD_INT 112
13895: PUSH
13896: LD_INT 116
13898: PUSH
13899: LD_INT 117
13901: PUSH
13902: LD_INT 118
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: ST_TO_ADDR
13921: GO 16444
13923: LD_INT 7
13925: DOUBLE
13926: EQUAL
13927: IFTRUE 13931
13929: GO 14043
13931: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13932: LD_ADDR_VAR 0 2
13936: PUSH
13937: LD_INT 2
13939: PUSH
13940: LD_INT 4
13942: PUSH
13943: LD_INT 5
13945: PUSH
13946: LD_INT 7
13948: PUSH
13949: LD_INT 11
13951: PUSH
13952: LD_INT 12
13954: PUSH
13955: LD_INT 15
13957: PUSH
13958: LD_INT 16
13960: PUSH
13961: LD_INT 20
13963: PUSH
13964: LD_INT 21
13966: PUSH
13967: LD_INT 22
13969: PUSH
13970: LD_INT 23
13972: PUSH
13973: LD_INT 25
13975: PUSH
13976: LD_INT 26
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 101
13997: PUSH
13998: LD_INT 102
14000: PUSH
14001: LD_INT 103
14003: PUSH
14004: LD_INT 105
14006: PUSH
14007: LD_INT 106
14009: PUSH
14010: LD_INT 108
14012: PUSH
14013: LD_INT 112
14015: PUSH
14016: LD_INT 116
14018: PUSH
14019: LD_INT 117
14021: PUSH
14022: LD_INT 118
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: ST_TO_ADDR
14041: GO 16444
14043: LD_INT 8
14045: DOUBLE
14046: EQUAL
14047: IFTRUE 14051
14049: GO 14191
14051: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14052: LD_ADDR_VAR 0 2
14056: PUSH
14057: LD_INT 2
14059: PUSH
14060: LD_INT 4
14062: PUSH
14063: LD_INT 5
14065: PUSH
14066: LD_INT 6
14068: PUSH
14069: LD_INT 7
14071: PUSH
14072: LD_INT 8
14074: PUSH
14075: LD_INT 11
14077: PUSH
14078: LD_INT 12
14080: PUSH
14081: LD_INT 15
14083: PUSH
14084: LD_INT 16
14086: PUSH
14087: LD_INT 20
14089: PUSH
14090: LD_INT 21
14092: PUSH
14093: LD_INT 22
14095: PUSH
14096: LD_INT 23
14098: PUSH
14099: LD_INT 25
14101: PUSH
14102: LD_INT 26
14104: PUSH
14105: LD_INT 30
14107: PUSH
14108: LD_INT 31
14110: PUSH
14111: LD_INT 32
14113: PUSH
14114: LD_INT 36
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 101
14141: PUSH
14142: LD_INT 102
14144: PUSH
14145: LD_INT 103
14147: PUSH
14148: LD_INT 105
14150: PUSH
14151: LD_INT 106
14153: PUSH
14154: LD_INT 108
14156: PUSH
14157: LD_INT 109
14159: PUSH
14160: LD_INT 112
14162: PUSH
14163: LD_INT 116
14165: PUSH
14166: LD_INT 117
14168: PUSH
14169: LD_INT 118
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: ST_TO_ADDR
14189: GO 16444
14191: LD_INT 9
14193: DOUBLE
14194: EQUAL
14195: IFTRUE 14199
14197: GO 14347
14199: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14200: LD_ADDR_VAR 0 2
14204: PUSH
14205: LD_INT 2
14207: PUSH
14208: LD_INT 4
14210: PUSH
14211: LD_INT 5
14213: PUSH
14214: LD_INT 6
14216: PUSH
14217: LD_INT 7
14219: PUSH
14220: LD_INT 8
14222: PUSH
14223: LD_INT 11
14225: PUSH
14226: LD_INT 12
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 16
14234: PUSH
14235: LD_INT 20
14237: PUSH
14238: LD_INT 21
14240: PUSH
14241: LD_INT 22
14243: PUSH
14244: LD_INT 23
14246: PUSH
14247: LD_INT 25
14249: PUSH
14250: LD_INT 26
14252: PUSH
14253: LD_INT 28
14255: PUSH
14256: LD_INT 30
14258: PUSH
14259: LD_INT 31
14261: PUSH
14262: LD_INT 32
14264: PUSH
14265: LD_INT 36
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 101
14293: PUSH
14294: LD_INT 102
14296: PUSH
14297: LD_INT 103
14299: PUSH
14300: LD_INT 105
14302: PUSH
14303: LD_INT 106
14305: PUSH
14306: LD_INT 108
14308: PUSH
14309: LD_INT 109
14311: PUSH
14312: LD_INT 112
14314: PUSH
14315: LD_INT 114
14317: PUSH
14318: LD_INT 116
14320: PUSH
14321: LD_INT 117
14323: PUSH
14324: LD_INT 118
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: ST_TO_ADDR
14345: GO 16444
14347: LD_INT 10
14349: DOUBLE
14350: EQUAL
14351: IFTRUE 14355
14353: GO 14551
14355: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14356: LD_ADDR_VAR 0 2
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: LD_INT 4
14366: PUSH
14367: LD_INT 5
14369: PUSH
14370: LD_INT 6
14372: PUSH
14373: LD_INT 7
14375: PUSH
14376: LD_INT 8
14378: PUSH
14379: LD_INT 9
14381: PUSH
14382: LD_INT 10
14384: PUSH
14385: LD_INT 11
14387: PUSH
14388: LD_INT 12
14390: PUSH
14391: LD_INT 13
14393: PUSH
14394: LD_INT 14
14396: PUSH
14397: LD_INT 15
14399: PUSH
14400: LD_INT 16
14402: PUSH
14403: LD_INT 17
14405: PUSH
14406: LD_INT 18
14408: PUSH
14409: LD_INT 19
14411: PUSH
14412: LD_INT 20
14414: PUSH
14415: LD_INT 21
14417: PUSH
14418: LD_INT 22
14420: PUSH
14421: LD_INT 23
14423: PUSH
14424: LD_INT 24
14426: PUSH
14427: LD_INT 25
14429: PUSH
14430: LD_INT 26
14432: PUSH
14433: LD_INT 28
14435: PUSH
14436: LD_INT 30
14438: PUSH
14439: LD_INT 31
14441: PUSH
14442: LD_INT 32
14444: PUSH
14445: LD_INT 36
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: PUSH
14479: LD_INT 101
14481: PUSH
14482: LD_INT 102
14484: PUSH
14485: LD_INT 103
14487: PUSH
14488: LD_INT 104
14490: PUSH
14491: LD_INT 105
14493: PUSH
14494: LD_INT 106
14496: PUSH
14497: LD_INT 107
14499: PUSH
14500: LD_INT 108
14502: PUSH
14503: LD_INT 109
14505: PUSH
14506: LD_INT 110
14508: PUSH
14509: LD_INT 111
14511: PUSH
14512: LD_INT 112
14514: PUSH
14515: LD_INT 114
14517: PUSH
14518: LD_INT 116
14520: PUSH
14521: LD_INT 117
14523: PUSH
14524: LD_INT 118
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: ST_TO_ADDR
14549: GO 16444
14551: LD_INT 11
14553: DOUBLE
14554: EQUAL
14555: IFTRUE 14559
14557: GO 14763
14559: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14560: LD_ADDR_VAR 0 2
14564: PUSH
14565: LD_INT 2
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: LD_INT 4
14573: PUSH
14574: LD_INT 5
14576: PUSH
14577: LD_INT 6
14579: PUSH
14580: LD_INT 7
14582: PUSH
14583: LD_INT 8
14585: PUSH
14586: LD_INT 9
14588: PUSH
14589: LD_INT 10
14591: PUSH
14592: LD_INT 11
14594: PUSH
14595: LD_INT 12
14597: PUSH
14598: LD_INT 13
14600: PUSH
14601: LD_INT 14
14603: PUSH
14604: LD_INT 15
14606: PUSH
14607: LD_INT 16
14609: PUSH
14610: LD_INT 17
14612: PUSH
14613: LD_INT 18
14615: PUSH
14616: LD_INT 19
14618: PUSH
14619: LD_INT 20
14621: PUSH
14622: LD_INT 21
14624: PUSH
14625: LD_INT 22
14627: PUSH
14628: LD_INT 23
14630: PUSH
14631: LD_INT 24
14633: PUSH
14634: LD_INT 25
14636: PUSH
14637: LD_INT 26
14639: PUSH
14640: LD_INT 28
14642: PUSH
14643: LD_INT 30
14645: PUSH
14646: LD_INT 31
14648: PUSH
14649: LD_INT 32
14651: PUSH
14652: LD_INT 34
14654: PUSH
14655: LD_INT 36
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 101
14693: PUSH
14694: LD_INT 102
14696: PUSH
14697: LD_INT 103
14699: PUSH
14700: LD_INT 104
14702: PUSH
14703: LD_INT 105
14705: PUSH
14706: LD_INT 106
14708: PUSH
14709: LD_INT 107
14711: PUSH
14712: LD_INT 108
14714: PUSH
14715: LD_INT 109
14717: PUSH
14718: LD_INT 110
14720: PUSH
14721: LD_INT 111
14723: PUSH
14724: LD_INT 112
14726: PUSH
14727: LD_INT 114
14729: PUSH
14730: LD_INT 116
14732: PUSH
14733: LD_INT 117
14735: PUSH
14736: LD_INT 118
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: ST_TO_ADDR
14761: GO 16444
14763: LD_INT 12
14765: DOUBLE
14766: EQUAL
14767: IFTRUE 14771
14769: GO 14991
14771: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14772: LD_ADDR_VAR 0 2
14776: PUSH
14777: LD_INT 1
14779: PUSH
14780: LD_INT 2
14782: PUSH
14783: LD_INT 3
14785: PUSH
14786: LD_INT 4
14788: PUSH
14789: LD_INT 5
14791: PUSH
14792: LD_INT 6
14794: PUSH
14795: LD_INT 7
14797: PUSH
14798: LD_INT 8
14800: PUSH
14801: LD_INT 9
14803: PUSH
14804: LD_INT 10
14806: PUSH
14807: LD_INT 11
14809: PUSH
14810: LD_INT 12
14812: PUSH
14813: LD_INT 13
14815: PUSH
14816: LD_INT 14
14818: PUSH
14819: LD_INT 15
14821: PUSH
14822: LD_INT 16
14824: PUSH
14825: LD_INT 17
14827: PUSH
14828: LD_INT 18
14830: PUSH
14831: LD_INT 19
14833: PUSH
14834: LD_INT 20
14836: PUSH
14837: LD_INT 21
14839: PUSH
14840: LD_INT 22
14842: PUSH
14843: LD_INT 23
14845: PUSH
14846: LD_INT 24
14848: PUSH
14849: LD_INT 25
14851: PUSH
14852: LD_INT 26
14854: PUSH
14855: LD_INT 27
14857: PUSH
14858: LD_INT 28
14860: PUSH
14861: LD_INT 30
14863: PUSH
14864: LD_INT 31
14866: PUSH
14867: LD_INT 32
14869: PUSH
14870: LD_INT 33
14872: PUSH
14873: LD_INT 34
14875: PUSH
14876: LD_INT 36
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 101
14917: PUSH
14918: LD_INT 102
14920: PUSH
14921: LD_INT 103
14923: PUSH
14924: LD_INT 104
14926: PUSH
14927: LD_INT 105
14929: PUSH
14930: LD_INT 106
14932: PUSH
14933: LD_INT 107
14935: PUSH
14936: LD_INT 108
14938: PUSH
14939: LD_INT 109
14941: PUSH
14942: LD_INT 110
14944: PUSH
14945: LD_INT 111
14947: PUSH
14948: LD_INT 112
14950: PUSH
14951: LD_INT 113
14953: PUSH
14954: LD_INT 114
14956: PUSH
14957: LD_INT 116
14959: PUSH
14960: LD_INT 117
14962: PUSH
14963: LD_INT 118
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: ST_TO_ADDR
14989: GO 16444
14991: LD_INT 13
14993: DOUBLE
14994: EQUAL
14995: IFTRUE 14999
14997: GO 15207
14999: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15000: LD_ADDR_VAR 0 2
15004: PUSH
15005: LD_INT 1
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: LD_INT 3
15013: PUSH
15014: LD_INT 4
15016: PUSH
15017: LD_INT 5
15019: PUSH
15020: LD_INT 8
15022: PUSH
15023: LD_INT 9
15025: PUSH
15026: LD_INT 10
15028: PUSH
15029: LD_INT 11
15031: PUSH
15032: LD_INT 12
15034: PUSH
15035: LD_INT 14
15037: PUSH
15038: LD_INT 15
15040: PUSH
15041: LD_INT 16
15043: PUSH
15044: LD_INT 17
15046: PUSH
15047: LD_INT 18
15049: PUSH
15050: LD_INT 19
15052: PUSH
15053: LD_INT 20
15055: PUSH
15056: LD_INT 21
15058: PUSH
15059: LD_INT 22
15061: PUSH
15062: LD_INT 23
15064: PUSH
15065: LD_INT 24
15067: PUSH
15068: LD_INT 25
15070: PUSH
15071: LD_INT 26
15073: PUSH
15074: LD_INT 27
15076: PUSH
15077: LD_INT 28
15079: PUSH
15080: LD_INT 30
15082: PUSH
15083: LD_INT 31
15085: PUSH
15086: LD_INT 32
15088: PUSH
15089: LD_INT 33
15091: PUSH
15092: LD_INT 34
15094: PUSH
15095: LD_INT 36
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 101
15133: PUSH
15134: LD_INT 102
15136: PUSH
15137: LD_INT 103
15139: PUSH
15140: LD_INT 104
15142: PUSH
15143: LD_INT 105
15145: PUSH
15146: LD_INT 106
15148: PUSH
15149: LD_INT 107
15151: PUSH
15152: LD_INT 108
15154: PUSH
15155: LD_INT 109
15157: PUSH
15158: LD_INT 110
15160: PUSH
15161: LD_INT 111
15163: PUSH
15164: LD_INT 112
15166: PUSH
15167: LD_INT 113
15169: PUSH
15170: LD_INT 114
15172: PUSH
15173: LD_INT 116
15175: PUSH
15176: LD_INT 117
15178: PUSH
15179: LD_INT 118
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: ST_TO_ADDR
15205: GO 16444
15207: LD_INT 14
15209: DOUBLE
15210: EQUAL
15211: IFTRUE 15215
15213: GO 15439
15215: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15216: LD_ADDR_VAR 0 2
15220: PUSH
15221: LD_INT 1
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: LD_INT 3
15229: PUSH
15230: LD_INT 4
15232: PUSH
15233: LD_INT 5
15235: PUSH
15236: LD_INT 6
15238: PUSH
15239: LD_INT 7
15241: PUSH
15242: LD_INT 8
15244: PUSH
15245: LD_INT 9
15247: PUSH
15248: LD_INT 10
15250: PUSH
15251: LD_INT 11
15253: PUSH
15254: LD_INT 12
15256: PUSH
15257: LD_INT 13
15259: PUSH
15260: LD_INT 14
15262: PUSH
15263: LD_INT 15
15265: PUSH
15266: LD_INT 16
15268: PUSH
15269: LD_INT 17
15271: PUSH
15272: LD_INT 18
15274: PUSH
15275: LD_INT 19
15277: PUSH
15278: LD_INT 20
15280: PUSH
15281: LD_INT 21
15283: PUSH
15284: LD_INT 22
15286: PUSH
15287: LD_INT 23
15289: PUSH
15290: LD_INT 24
15292: PUSH
15293: LD_INT 25
15295: PUSH
15296: LD_INT 26
15298: PUSH
15299: LD_INT 27
15301: PUSH
15302: LD_INT 28
15304: PUSH
15305: LD_INT 29
15307: PUSH
15308: LD_INT 30
15310: PUSH
15311: LD_INT 31
15313: PUSH
15314: LD_INT 32
15316: PUSH
15317: LD_INT 33
15319: PUSH
15320: LD_INT 34
15322: PUSH
15323: LD_INT 36
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 101
15365: PUSH
15366: LD_INT 102
15368: PUSH
15369: LD_INT 103
15371: PUSH
15372: LD_INT 104
15374: PUSH
15375: LD_INT 105
15377: PUSH
15378: LD_INT 106
15380: PUSH
15381: LD_INT 107
15383: PUSH
15384: LD_INT 108
15386: PUSH
15387: LD_INT 109
15389: PUSH
15390: LD_INT 110
15392: PUSH
15393: LD_INT 111
15395: PUSH
15396: LD_INT 112
15398: PUSH
15399: LD_INT 113
15401: PUSH
15402: LD_INT 114
15404: PUSH
15405: LD_INT 116
15407: PUSH
15408: LD_INT 117
15410: PUSH
15411: LD_INT 118
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: ST_TO_ADDR
15437: GO 16444
15439: LD_INT 15
15441: DOUBLE
15442: EQUAL
15443: IFTRUE 15447
15445: GO 15671
15447: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15448: LD_ADDR_VAR 0 2
15452: PUSH
15453: LD_INT 1
15455: PUSH
15456: LD_INT 2
15458: PUSH
15459: LD_INT 3
15461: PUSH
15462: LD_INT 4
15464: PUSH
15465: LD_INT 5
15467: PUSH
15468: LD_INT 6
15470: PUSH
15471: LD_INT 7
15473: PUSH
15474: LD_INT 8
15476: PUSH
15477: LD_INT 9
15479: PUSH
15480: LD_INT 10
15482: PUSH
15483: LD_INT 11
15485: PUSH
15486: LD_INT 12
15488: PUSH
15489: LD_INT 13
15491: PUSH
15492: LD_INT 14
15494: PUSH
15495: LD_INT 15
15497: PUSH
15498: LD_INT 16
15500: PUSH
15501: LD_INT 17
15503: PUSH
15504: LD_INT 18
15506: PUSH
15507: LD_INT 19
15509: PUSH
15510: LD_INT 20
15512: PUSH
15513: LD_INT 21
15515: PUSH
15516: LD_INT 22
15518: PUSH
15519: LD_INT 23
15521: PUSH
15522: LD_INT 24
15524: PUSH
15525: LD_INT 25
15527: PUSH
15528: LD_INT 26
15530: PUSH
15531: LD_INT 27
15533: PUSH
15534: LD_INT 28
15536: PUSH
15537: LD_INT 29
15539: PUSH
15540: LD_INT 30
15542: PUSH
15543: LD_INT 31
15545: PUSH
15546: LD_INT 32
15548: PUSH
15549: LD_INT 33
15551: PUSH
15552: LD_INT 34
15554: PUSH
15555: LD_INT 36
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 101
15597: PUSH
15598: LD_INT 102
15600: PUSH
15601: LD_INT 103
15603: PUSH
15604: LD_INT 104
15606: PUSH
15607: LD_INT 105
15609: PUSH
15610: LD_INT 106
15612: PUSH
15613: LD_INT 107
15615: PUSH
15616: LD_INT 108
15618: PUSH
15619: LD_INT 109
15621: PUSH
15622: LD_INT 110
15624: PUSH
15625: LD_INT 111
15627: PUSH
15628: LD_INT 112
15630: PUSH
15631: LD_INT 113
15633: PUSH
15634: LD_INT 114
15636: PUSH
15637: LD_INT 116
15639: PUSH
15640: LD_INT 117
15642: PUSH
15643: LD_INT 118
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: ST_TO_ADDR
15669: GO 16444
15671: LD_INT 16
15673: DOUBLE
15674: EQUAL
15675: IFTRUE 15679
15677: GO 15815
15679: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15680: LD_ADDR_VAR 0 2
15684: PUSH
15685: LD_INT 2
15687: PUSH
15688: LD_INT 4
15690: PUSH
15691: LD_INT 5
15693: PUSH
15694: LD_INT 7
15696: PUSH
15697: LD_INT 11
15699: PUSH
15700: LD_INT 12
15702: PUSH
15703: LD_INT 15
15705: PUSH
15706: LD_INT 16
15708: PUSH
15709: LD_INT 20
15711: PUSH
15712: LD_INT 21
15714: PUSH
15715: LD_INT 22
15717: PUSH
15718: LD_INT 23
15720: PUSH
15721: LD_INT 25
15723: PUSH
15724: LD_INT 26
15726: PUSH
15727: LD_INT 30
15729: PUSH
15730: LD_INT 31
15732: PUSH
15733: LD_INT 32
15735: PUSH
15736: LD_INT 33
15738: PUSH
15739: LD_INT 34
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 101
15765: PUSH
15766: LD_INT 102
15768: PUSH
15769: LD_INT 103
15771: PUSH
15772: LD_INT 106
15774: PUSH
15775: LD_INT 108
15777: PUSH
15778: LD_INT 112
15780: PUSH
15781: LD_INT 113
15783: PUSH
15784: LD_INT 114
15786: PUSH
15787: LD_INT 116
15789: PUSH
15790: LD_INT 117
15792: PUSH
15793: LD_INT 118
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: ST_TO_ADDR
15813: GO 16444
15815: LD_INT 17
15817: DOUBLE
15818: EQUAL
15819: IFTRUE 15823
15821: GO 16047
15823: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15824: LD_ADDR_VAR 0 2
15828: PUSH
15829: LD_INT 1
15831: PUSH
15832: LD_INT 2
15834: PUSH
15835: LD_INT 3
15837: PUSH
15838: LD_INT 4
15840: PUSH
15841: LD_INT 5
15843: PUSH
15844: LD_INT 6
15846: PUSH
15847: LD_INT 7
15849: PUSH
15850: LD_INT 8
15852: PUSH
15853: LD_INT 9
15855: PUSH
15856: LD_INT 10
15858: PUSH
15859: LD_INT 11
15861: PUSH
15862: LD_INT 12
15864: PUSH
15865: LD_INT 13
15867: PUSH
15868: LD_INT 14
15870: PUSH
15871: LD_INT 15
15873: PUSH
15874: LD_INT 16
15876: PUSH
15877: LD_INT 17
15879: PUSH
15880: LD_INT 18
15882: PUSH
15883: LD_INT 19
15885: PUSH
15886: LD_INT 20
15888: PUSH
15889: LD_INT 21
15891: PUSH
15892: LD_INT 22
15894: PUSH
15895: LD_INT 23
15897: PUSH
15898: LD_INT 24
15900: PUSH
15901: LD_INT 25
15903: PUSH
15904: LD_INT 26
15906: PUSH
15907: LD_INT 27
15909: PUSH
15910: LD_INT 28
15912: PUSH
15913: LD_INT 29
15915: PUSH
15916: LD_INT 30
15918: PUSH
15919: LD_INT 31
15921: PUSH
15922: LD_INT 32
15924: PUSH
15925: LD_INT 33
15927: PUSH
15928: LD_INT 34
15930: PUSH
15931: LD_INT 36
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 101
15973: PUSH
15974: LD_INT 102
15976: PUSH
15977: LD_INT 103
15979: PUSH
15980: LD_INT 104
15982: PUSH
15983: LD_INT 105
15985: PUSH
15986: LD_INT 106
15988: PUSH
15989: LD_INT 107
15991: PUSH
15992: LD_INT 108
15994: PUSH
15995: LD_INT 109
15997: PUSH
15998: LD_INT 110
16000: PUSH
16001: LD_INT 111
16003: PUSH
16004: LD_INT 112
16006: PUSH
16007: LD_INT 113
16009: PUSH
16010: LD_INT 114
16012: PUSH
16013: LD_INT 116
16015: PUSH
16016: LD_INT 117
16018: PUSH
16019: LD_INT 118
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: ST_TO_ADDR
16045: GO 16444
16047: LD_INT 18
16049: DOUBLE
16050: EQUAL
16051: IFTRUE 16055
16053: GO 16203
16055: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16056: LD_ADDR_VAR 0 2
16060: PUSH
16061: LD_INT 2
16063: PUSH
16064: LD_INT 4
16066: PUSH
16067: LD_INT 5
16069: PUSH
16070: LD_INT 7
16072: PUSH
16073: LD_INT 11
16075: PUSH
16076: LD_INT 12
16078: PUSH
16079: LD_INT 15
16081: PUSH
16082: LD_INT 16
16084: PUSH
16085: LD_INT 20
16087: PUSH
16088: LD_INT 21
16090: PUSH
16091: LD_INT 22
16093: PUSH
16094: LD_INT 23
16096: PUSH
16097: LD_INT 25
16099: PUSH
16100: LD_INT 26
16102: PUSH
16103: LD_INT 30
16105: PUSH
16106: LD_INT 31
16108: PUSH
16109: LD_INT 32
16111: PUSH
16112: LD_INT 33
16114: PUSH
16115: LD_INT 34
16117: PUSH
16118: LD_INT 35
16120: PUSH
16121: LD_INT 36
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 101
16149: PUSH
16150: LD_INT 102
16152: PUSH
16153: LD_INT 103
16155: PUSH
16156: LD_INT 106
16158: PUSH
16159: LD_INT 108
16161: PUSH
16162: LD_INT 112
16164: PUSH
16165: LD_INT 113
16167: PUSH
16168: LD_INT 114
16170: PUSH
16171: LD_INT 115
16173: PUSH
16174: LD_INT 116
16176: PUSH
16177: LD_INT 117
16179: PUSH
16180: LD_INT 118
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: ST_TO_ADDR
16201: GO 16444
16203: LD_INT 19
16205: DOUBLE
16206: EQUAL
16207: IFTRUE 16211
16209: GO 16443
16211: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16212: LD_ADDR_VAR 0 2
16216: PUSH
16217: LD_INT 1
16219: PUSH
16220: LD_INT 2
16222: PUSH
16223: LD_INT 3
16225: PUSH
16226: LD_INT 4
16228: PUSH
16229: LD_INT 5
16231: PUSH
16232: LD_INT 6
16234: PUSH
16235: LD_INT 7
16237: PUSH
16238: LD_INT 8
16240: PUSH
16241: LD_INT 9
16243: PUSH
16244: LD_INT 10
16246: PUSH
16247: LD_INT 11
16249: PUSH
16250: LD_INT 12
16252: PUSH
16253: LD_INT 13
16255: PUSH
16256: LD_INT 14
16258: PUSH
16259: LD_INT 15
16261: PUSH
16262: LD_INT 16
16264: PUSH
16265: LD_INT 17
16267: PUSH
16268: LD_INT 18
16270: PUSH
16271: LD_INT 19
16273: PUSH
16274: LD_INT 20
16276: PUSH
16277: LD_INT 21
16279: PUSH
16280: LD_INT 22
16282: PUSH
16283: LD_INT 23
16285: PUSH
16286: LD_INT 24
16288: PUSH
16289: LD_INT 25
16291: PUSH
16292: LD_INT 26
16294: PUSH
16295: LD_INT 27
16297: PUSH
16298: LD_INT 28
16300: PUSH
16301: LD_INT 29
16303: PUSH
16304: LD_INT 30
16306: PUSH
16307: LD_INT 31
16309: PUSH
16310: LD_INT 32
16312: PUSH
16313: LD_INT 33
16315: PUSH
16316: LD_INT 34
16318: PUSH
16319: LD_INT 35
16321: PUSH
16322: LD_INT 36
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 101
16365: PUSH
16366: LD_INT 102
16368: PUSH
16369: LD_INT 103
16371: PUSH
16372: LD_INT 104
16374: PUSH
16375: LD_INT 105
16377: PUSH
16378: LD_INT 106
16380: PUSH
16381: LD_INT 107
16383: PUSH
16384: LD_INT 108
16386: PUSH
16387: LD_INT 109
16389: PUSH
16390: LD_INT 110
16392: PUSH
16393: LD_INT 111
16395: PUSH
16396: LD_INT 112
16398: PUSH
16399: LD_INT 113
16401: PUSH
16402: LD_INT 114
16404: PUSH
16405: LD_INT 115
16407: PUSH
16408: LD_INT 116
16410: PUSH
16411: LD_INT 117
16413: PUSH
16414: LD_INT 118
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: ST_TO_ADDR
16441: GO 16444
16443: POP
// end else
16444: GO 16675
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16446: LD_ADDR_VAR 0 2
16450: PUSH
16451: LD_INT 1
16453: PUSH
16454: LD_INT 2
16456: PUSH
16457: LD_INT 3
16459: PUSH
16460: LD_INT 4
16462: PUSH
16463: LD_INT 5
16465: PUSH
16466: LD_INT 6
16468: PUSH
16469: LD_INT 7
16471: PUSH
16472: LD_INT 8
16474: PUSH
16475: LD_INT 9
16477: PUSH
16478: LD_INT 10
16480: PUSH
16481: LD_INT 11
16483: PUSH
16484: LD_INT 12
16486: PUSH
16487: LD_INT 13
16489: PUSH
16490: LD_INT 14
16492: PUSH
16493: LD_INT 15
16495: PUSH
16496: LD_INT 16
16498: PUSH
16499: LD_INT 17
16501: PUSH
16502: LD_INT 18
16504: PUSH
16505: LD_INT 19
16507: PUSH
16508: LD_INT 20
16510: PUSH
16511: LD_INT 21
16513: PUSH
16514: LD_INT 22
16516: PUSH
16517: LD_INT 23
16519: PUSH
16520: LD_INT 24
16522: PUSH
16523: LD_INT 25
16525: PUSH
16526: LD_INT 26
16528: PUSH
16529: LD_INT 27
16531: PUSH
16532: LD_INT 28
16534: PUSH
16535: LD_INT 29
16537: PUSH
16538: LD_INT 30
16540: PUSH
16541: LD_INT 31
16543: PUSH
16544: LD_INT 32
16546: PUSH
16547: LD_INT 33
16549: PUSH
16550: LD_INT 34
16552: PUSH
16553: LD_INT 35
16555: PUSH
16556: LD_INT 36
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 101
16599: PUSH
16600: LD_INT 102
16602: PUSH
16603: LD_INT 103
16605: PUSH
16606: LD_INT 104
16608: PUSH
16609: LD_INT 105
16611: PUSH
16612: LD_INT 106
16614: PUSH
16615: LD_INT 107
16617: PUSH
16618: LD_INT 108
16620: PUSH
16621: LD_INT 109
16623: PUSH
16624: LD_INT 110
16626: PUSH
16627: LD_INT 111
16629: PUSH
16630: LD_INT 112
16632: PUSH
16633: LD_INT 113
16635: PUSH
16636: LD_INT 114
16638: PUSH
16639: LD_INT 115
16641: PUSH
16642: LD_INT 116
16644: PUSH
16645: LD_INT 117
16647: PUSH
16648: LD_INT 118
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: ST_TO_ADDR
// if result then
16675: LD_VAR 0 2
16679: IFFALSE 17465
// begin normal :=  ;
16681: LD_ADDR_VAR 0 5
16685: PUSH
16686: LD_STRING 
16688: ST_TO_ADDR
// hardcore :=  ;
16689: LD_ADDR_VAR 0 6
16693: PUSH
16694: LD_STRING 
16696: ST_TO_ADDR
// active :=  ;
16697: LD_ADDR_VAR 0 7
16701: PUSH
16702: LD_STRING 
16704: ST_TO_ADDR
// for i = 1 to normalCounter do
16705: LD_ADDR_VAR 0 8
16709: PUSH
16710: DOUBLE
16711: LD_INT 1
16713: DEC
16714: ST_TO_ADDR
16715: LD_EXP 23
16719: PUSH
16720: FOR_TO
16721: IFFALSE 16822
// begin tmp := 0 ;
16723: LD_ADDR_VAR 0 3
16727: PUSH
16728: LD_STRING 0
16730: ST_TO_ADDR
// if result [ 1 ] then
16731: LD_VAR 0 2
16735: PUSH
16736: LD_INT 1
16738: ARRAY
16739: IFFALSE 16804
// if result [ 1 ] [ 1 ] = i then
16741: LD_VAR 0 2
16745: PUSH
16746: LD_INT 1
16748: ARRAY
16749: PUSH
16750: LD_INT 1
16752: ARRAY
16753: PUSH
16754: LD_VAR 0 8
16758: EQUAL
16759: IFFALSE 16804
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16761: LD_ADDR_VAR 0 2
16765: PUSH
16766: LD_VAR 0 2
16770: PPUSH
16771: LD_INT 1
16773: PPUSH
16774: LD_VAR 0 2
16778: PUSH
16779: LD_INT 1
16781: ARRAY
16782: PPUSH
16783: LD_INT 1
16785: PPUSH
16786: CALL_OW 3
16790: PPUSH
16791: CALL_OW 1
16795: ST_TO_ADDR
// tmp := 1 ;
16796: LD_ADDR_VAR 0 3
16800: PUSH
16801: LD_STRING 1
16803: ST_TO_ADDR
// end ; normal := normal & tmp ;
16804: LD_ADDR_VAR 0 5
16808: PUSH
16809: LD_VAR 0 5
16813: PUSH
16814: LD_VAR 0 3
16818: STR
16819: ST_TO_ADDR
// end ;
16820: GO 16720
16822: POP
16823: POP
// for i = 1 to hardcoreCounter do
16824: LD_ADDR_VAR 0 8
16828: PUSH
16829: DOUBLE
16830: LD_INT 1
16832: DEC
16833: ST_TO_ADDR
16834: LD_EXP 24
16838: PUSH
16839: FOR_TO
16840: IFFALSE 16945
// begin tmp := 0 ;
16842: LD_ADDR_VAR 0 3
16846: PUSH
16847: LD_STRING 0
16849: ST_TO_ADDR
// if result [ 2 ] then
16850: LD_VAR 0 2
16854: PUSH
16855: LD_INT 2
16857: ARRAY
16858: IFFALSE 16927
// if result [ 2 ] [ 1 ] = 100 + i then
16860: LD_VAR 0 2
16864: PUSH
16865: LD_INT 2
16867: ARRAY
16868: PUSH
16869: LD_INT 1
16871: ARRAY
16872: PUSH
16873: LD_INT 100
16875: PUSH
16876: LD_VAR 0 8
16880: PLUS
16881: EQUAL
16882: IFFALSE 16927
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16884: LD_ADDR_VAR 0 2
16888: PUSH
16889: LD_VAR 0 2
16893: PPUSH
16894: LD_INT 2
16896: PPUSH
16897: LD_VAR 0 2
16901: PUSH
16902: LD_INT 2
16904: ARRAY
16905: PPUSH
16906: LD_INT 1
16908: PPUSH
16909: CALL_OW 3
16913: PPUSH
16914: CALL_OW 1
16918: ST_TO_ADDR
// tmp := 1 ;
16919: LD_ADDR_VAR 0 3
16923: PUSH
16924: LD_STRING 1
16926: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16927: LD_ADDR_VAR 0 6
16931: PUSH
16932: LD_VAR 0 6
16936: PUSH
16937: LD_VAR 0 3
16941: STR
16942: ST_TO_ADDR
// end ;
16943: GO 16839
16945: POP
16946: POP
// if isGameLoad then
16947: LD_VAR 0 1
16951: IFFALSE 17426
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16953: LD_ADDR_VAR 0 4
16957: PUSH
16958: LD_EXP 27
16962: PUSH
16963: LD_EXP 26
16967: PUSH
16968: LD_EXP 28
16972: PUSH
16973: LD_EXP 25
16977: PUSH
16978: LD_EXP 29
16982: PUSH
16983: LD_EXP 30
16987: PUSH
16988: LD_EXP 31
16992: PUSH
16993: LD_EXP 32
16997: PUSH
16998: LD_EXP 33
17002: PUSH
17003: LD_EXP 34
17007: PUSH
17008: LD_EXP 35
17012: PUSH
17013: LD_EXP 36
17017: PUSH
17018: LD_EXP 37
17022: PUSH
17023: LD_EXP 38
17027: PUSH
17028: LD_EXP 46
17032: PUSH
17033: LD_EXP 47
17037: PUSH
17038: LD_EXP 48
17042: PUSH
17043: LD_EXP 49
17047: PUSH
17048: LD_EXP 51
17052: PUSH
17053: LD_EXP 52
17057: PUSH
17058: LD_EXP 53
17062: PUSH
17063: LD_EXP 56
17067: PUSH
17068: LD_EXP 58
17072: PUSH
17073: LD_EXP 59
17077: PUSH
17078: LD_EXP 60
17082: PUSH
17083: LD_EXP 62
17087: PUSH
17088: LD_EXP 63
17092: PUSH
17093: LD_EXP 66
17097: PUSH
17098: LD_EXP 67
17102: PUSH
17103: LD_EXP 68
17107: PUSH
17108: LD_EXP 69
17112: PUSH
17113: LD_EXP 70
17117: PUSH
17118: LD_EXP 71
17122: PUSH
17123: LD_EXP 72
17127: PUSH
17128: LD_EXP 73
17132: PUSH
17133: LD_EXP 74
17137: PUSH
17138: LD_EXP 39
17142: PUSH
17143: LD_EXP 40
17147: PUSH
17148: LD_EXP 43
17152: PUSH
17153: LD_EXP 44
17157: PUSH
17158: LD_EXP 45
17162: PUSH
17163: LD_EXP 41
17167: PUSH
17168: LD_EXP 42
17172: PUSH
17173: LD_EXP 50
17177: PUSH
17178: LD_EXP 54
17182: PUSH
17183: LD_EXP 55
17187: PUSH
17188: LD_EXP 57
17192: PUSH
17193: LD_EXP 61
17197: PUSH
17198: LD_EXP 64
17202: PUSH
17203: LD_EXP 65
17207: PUSH
17208: LD_EXP 75
17212: PUSH
17213: LD_EXP 76
17217: PUSH
17218: LD_EXP 77
17222: PUSH
17223: LD_EXP 78
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: ST_TO_ADDR
// tmp :=  ;
17284: LD_ADDR_VAR 0 3
17288: PUSH
17289: LD_STRING 
17291: ST_TO_ADDR
// for i = 1 to normalCounter do
17292: LD_ADDR_VAR 0 8
17296: PUSH
17297: DOUBLE
17298: LD_INT 1
17300: DEC
17301: ST_TO_ADDR
17302: LD_EXP 23
17306: PUSH
17307: FOR_TO
17308: IFFALSE 17344
// begin if flags [ i ] then
17310: LD_VAR 0 4
17314: PUSH
17315: LD_VAR 0 8
17319: ARRAY
17320: IFFALSE 17342
// tmp := tmp & i & ; ;
17322: LD_ADDR_VAR 0 3
17326: PUSH
17327: LD_VAR 0 3
17331: PUSH
17332: LD_VAR 0 8
17336: STR
17337: PUSH
17338: LD_STRING ;
17340: STR
17341: ST_TO_ADDR
// end ;
17342: GO 17307
17344: POP
17345: POP
// for i = 1 to hardcoreCounter do
17346: LD_ADDR_VAR 0 8
17350: PUSH
17351: DOUBLE
17352: LD_INT 1
17354: DEC
17355: ST_TO_ADDR
17356: LD_EXP 24
17360: PUSH
17361: FOR_TO
17362: IFFALSE 17408
// begin if flags [ normalCounter + i ] then
17364: LD_VAR 0 4
17368: PUSH
17369: LD_EXP 23
17373: PUSH
17374: LD_VAR 0 8
17378: PLUS
17379: ARRAY
17380: IFFALSE 17406
// tmp := tmp & ( 100 + i ) & ; ;
17382: LD_ADDR_VAR 0 3
17386: PUSH
17387: LD_VAR 0 3
17391: PUSH
17392: LD_INT 100
17394: PUSH
17395: LD_VAR 0 8
17399: PLUS
17400: STR
17401: PUSH
17402: LD_STRING ;
17404: STR
17405: ST_TO_ADDR
// end ;
17406: GO 17361
17408: POP
17409: POP
// if tmp then
17410: LD_VAR 0 3
17414: IFFALSE 17426
// active := tmp ;
17416: LD_ADDR_VAR 0 7
17420: PUSH
17421: LD_VAR 0 3
17425: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17426: LD_STRING getStreamItemsFromMission("
17428: PUSH
17429: LD_VAR 0 5
17433: STR
17434: PUSH
17435: LD_STRING ","
17437: STR
17438: PUSH
17439: LD_VAR 0 6
17443: STR
17444: PUSH
17445: LD_STRING ","
17447: STR
17448: PUSH
17449: LD_VAR 0 7
17453: STR
17454: PUSH
17455: LD_STRING ")
17457: STR
17458: PPUSH
17459: CALL_OW 559
// end else
17463: GO 17472
// ToLua ( getStreamItemsFromMission("","","") ) ;
17465: LD_STRING getStreamItemsFromMission("","","")
17467: PPUSH
17468: CALL_OW 559
// end ;
17472: LD_VAR 0 2
17476: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17477: LD_EXP 22
17481: PUSH
17482: LD_EXP 27
17486: AND
17487: IFFALSE 17611
17489: GO 17491
17491: DISABLE
17492: LD_INT 0
17494: PPUSH
17495: PPUSH
// begin enable ;
17496: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17497: LD_ADDR_VAR 0 2
17501: PUSH
17502: LD_INT 22
17504: PUSH
17505: LD_OWVAR 2
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 2
17516: PUSH
17517: LD_INT 34
17519: PUSH
17520: LD_INT 7
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 34
17529: PUSH
17530: LD_INT 45
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 34
17539: PUSH
17540: LD_INT 28
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 34
17549: PUSH
17550: LD_INT 47
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PPUSH
17568: CALL_OW 69
17572: ST_TO_ADDR
// if not tmp then
17573: LD_VAR 0 2
17577: NOT
17578: IFFALSE 17582
// exit ;
17580: GO 17611
// for i in tmp do
17582: LD_ADDR_VAR 0 1
17586: PUSH
17587: LD_VAR 0 2
17591: PUSH
17592: FOR_IN
17593: IFFALSE 17609
// begin SetLives ( i , 0 ) ;
17595: LD_VAR 0 1
17599: PPUSH
17600: LD_INT 0
17602: PPUSH
17603: CALL_OW 234
// end ;
17607: GO 17592
17609: POP
17610: POP
// end ;
17611: PPOPN 2
17613: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17614: LD_EXP 22
17618: PUSH
17619: LD_EXP 28
17623: AND
17624: IFFALSE 17708
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
17632: PPUSH
// begin enable ;
17633: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17634: LD_ADDR_VAR 0 2
17638: PUSH
17639: LD_INT 22
17641: PUSH
17642: LD_OWVAR 2
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 32
17653: PUSH
17654: LD_INT 3
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PPUSH
17665: CALL_OW 69
17669: ST_TO_ADDR
// if not tmp then
17670: LD_VAR 0 2
17674: NOT
17675: IFFALSE 17679
// exit ;
17677: GO 17708
// for i in tmp do
17679: LD_ADDR_VAR 0 1
17683: PUSH
17684: LD_VAR 0 2
17688: PUSH
17689: FOR_IN
17690: IFFALSE 17706
// begin SetLives ( i , 0 ) ;
17692: LD_VAR 0 1
17696: PPUSH
17697: LD_INT 0
17699: PPUSH
17700: CALL_OW 234
// end ;
17704: GO 17689
17706: POP
17707: POP
// end ;
17708: PPOPN 2
17710: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17711: LD_EXP 22
17715: PUSH
17716: LD_EXP 25
17720: AND
17721: IFFALSE 17814
17723: GO 17725
17725: DISABLE
17726: LD_INT 0
17728: PPUSH
// begin enable ;
17729: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17730: LD_ADDR_VAR 0 1
17734: PUSH
17735: LD_INT 22
17737: PUSH
17738: LD_OWVAR 2
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 25
17752: PUSH
17753: LD_INT 5
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 25
17762: PUSH
17763: LD_INT 9
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 25
17772: PUSH
17773: LD_INT 8
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PPUSH
17790: CALL_OW 69
17794: PUSH
17795: FOR_IN
17796: IFFALSE 17812
// begin SetClass ( i , 1 ) ;
17798: LD_VAR 0 1
17802: PPUSH
17803: LD_INT 1
17805: PPUSH
17806: CALL_OW 336
// end ;
17810: GO 17795
17812: POP
17813: POP
// end ;
17814: PPOPN 1
17816: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17817: LD_EXP 22
17821: PUSH
17822: LD_EXP 26
17826: AND
17827: PUSH
17828: LD_OWVAR 65
17832: PUSH
17833: LD_INT 7
17835: LESS
17836: AND
17837: IFFALSE 17851
17839: GO 17841
17841: DISABLE
// begin enable ;
17842: ENABLE
// game_speed := 7 ;
17843: LD_ADDR_OWVAR 65
17847: PUSH
17848: LD_INT 7
17850: ST_TO_ADDR
// end ;
17851: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17852: LD_EXP 22
17856: PUSH
17857: LD_EXP 29
17861: AND
17862: IFFALSE 18064
17864: GO 17866
17866: DISABLE
17867: LD_INT 0
17869: PPUSH
17870: PPUSH
17871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17872: LD_ADDR_VAR 0 3
17876: PUSH
17877: LD_INT 81
17879: PUSH
17880: LD_OWVAR 2
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 21
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PPUSH
17903: CALL_OW 69
17907: ST_TO_ADDR
// if not tmp then
17908: LD_VAR 0 3
17912: NOT
17913: IFFALSE 17917
// exit ;
17915: GO 18064
// if tmp > 5 then
17917: LD_VAR 0 3
17921: PUSH
17922: LD_INT 5
17924: GREATER
17925: IFFALSE 17937
// k := 5 else
17927: LD_ADDR_VAR 0 2
17931: PUSH
17932: LD_INT 5
17934: ST_TO_ADDR
17935: GO 17947
// k := tmp ;
17937: LD_ADDR_VAR 0 2
17941: PUSH
17942: LD_VAR 0 3
17946: ST_TO_ADDR
// for i := 1 to k do
17947: LD_ADDR_VAR 0 1
17951: PUSH
17952: DOUBLE
17953: LD_INT 1
17955: DEC
17956: ST_TO_ADDR
17957: LD_VAR 0 2
17961: PUSH
17962: FOR_TO
17963: IFFALSE 18062
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17965: LD_VAR 0 3
17969: PUSH
17970: LD_VAR 0 1
17974: ARRAY
17975: PPUSH
17976: LD_VAR 0 1
17980: PUSH
17981: LD_INT 4
17983: MOD
17984: PUSH
17985: LD_INT 1
17987: PLUS
17988: PPUSH
17989: CALL_OW 259
17993: PUSH
17994: LD_INT 10
17996: LESS
17997: IFFALSE 18060
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17999: LD_VAR 0 3
18003: PUSH
18004: LD_VAR 0 1
18008: ARRAY
18009: PPUSH
18010: LD_VAR 0 1
18014: PUSH
18015: LD_INT 4
18017: MOD
18018: PUSH
18019: LD_INT 1
18021: PLUS
18022: PPUSH
18023: LD_VAR 0 3
18027: PUSH
18028: LD_VAR 0 1
18032: ARRAY
18033: PPUSH
18034: LD_VAR 0 1
18038: PUSH
18039: LD_INT 4
18041: MOD
18042: PUSH
18043: LD_INT 1
18045: PLUS
18046: PPUSH
18047: CALL_OW 259
18051: PUSH
18052: LD_INT 1
18054: PLUS
18055: PPUSH
18056: CALL_OW 237
18060: GO 17962
18062: POP
18063: POP
// end ;
18064: PPOPN 3
18066: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18067: LD_EXP 22
18071: PUSH
18072: LD_EXP 30
18076: AND
18077: IFFALSE 18097
18079: GO 18081
18081: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18082: LD_INT 4
18084: PPUSH
18085: LD_OWVAR 2
18089: PPUSH
18090: LD_INT 0
18092: PPUSH
18093: CALL_OW 324
18097: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18098: LD_EXP 22
18102: PUSH
18103: LD_EXP 59
18107: AND
18108: IFFALSE 18128
18110: GO 18112
18112: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18113: LD_INT 19
18115: PPUSH
18116: LD_OWVAR 2
18120: PPUSH
18121: LD_INT 0
18123: PPUSH
18124: CALL_OW 324
18128: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18129: LD_EXP 22
18133: PUSH
18134: LD_EXP 31
18138: AND
18139: IFFALSE 18241
18141: GO 18143
18143: DISABLE
18144: LD_INT 0
18146: PPUSH
18147: PPUSH
// begin enable ;
18148: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18149: LD_ADDR_VAR 0 2
18153: PUSH
18154: LD_INT 22
18156: PUSH
18157: LD_OWVAR 2
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 2
18168: PUSH
18169: LD_INT 34
18171: PUSH
18172: LD_INT 11
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 34
18181: PUSH
18182: LD_INT 30
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PPUSH
18198: CALL_OW 69
18202: ST_TO_ADDR
// if not tmp then
18203: LD_VAR 0 2
18207: NOT
18208: IFFALSE 18212
// exit ;
18210: GO 18241
// for i in tmp do
18212: LD_ADDR_VAR 0 1
18216: PUSH
18217: LD_VAR 0 2
18221: PUSH
18222: FOR_IN
18223: IFFALSE 18239
// begin SetLives ( i , 0 ) ;
18225: LD_VAR 0 1
18229: PPUSH
18230: LD_INT 0
18232: PPUSH
18233: CALL_OW 234
// end ;
18237: GO 18222
18239: POP
18240: POP
// end ;
18241: PPOPN 2
18243: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18244: LD_EXP 22
18248: PUSH
18249: LD_EXP 32
18253: AND
18254: IFFALSE 18274
18256: GO 18258
18258: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18259: LD_INT 32
18261: PPUSH
18262: LD_OWVAR 2
18266: PPUSH
18267: LD_INT 0
18269: PPUSH
18270: CALL_OW 324
18274: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18275: LD_EXP 22
18279: PUSH
18280: LD_EXP 33
18284: AND
18285: IFFALSE 18466
18287: GO 18289
18289: DISABLE
18290: LD_INT 0
18292: PPUSH
18293: PPUSH
18294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18295: LD_ADDR_VAR 0 2
18299: PUSH
18300: LD_INT 22
18302: PUSH
18303: LD_OWVAR 2
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 33
18314: PUSH
18315: LD_INT 3
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PPUSH
18326: CALL_OW 69
18330: ST_TO_ADDR
// if not tmp then
18331: LD_VAR 0 2
18335: NOT
18336: IFFALSE 18340
// exit ;
18338: GO 18466
// side := 0 ;
18340: LD_ADDR_VAR 0 3
18344: PUSH
18345: LD_INT 0
18347: ST_TO_ADDR
// for i := 1 to 8 do
18348: LD_ADDR_VAR 0 1
18352: PUSH
18353: DOUBLE
18354: LD_INT 1
18356: DEC
18357: ST_TO_ADDR
18358: LD_INT 8
18360: PUSH
18361: FOR_TO
18362: IFFALSE 18410
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18364: LD_OWVAR 2
18368: PUSH
18369: LD_VAR 0 1
18373: NONEQUAL
18374: PUSH
18375: LD_OWVAR 2
18379: PPUSH
18380: LD_VAR 0 1
18384: PPUSH
18385: CALL_OW 81
18389: PUSH
18390: LD_INT 2
18392: EQUAL
18393: AND
18394: IFFALSE 18408
// begin side := i ;
18396: LD_ADDR_VAR 0 3
18400: PUSH
18401: LD_VAR 0 1
18405: ST_TO_ADDR
// break ;
18406: GO 18410
// end ;
18408: GO 18361
18410: POP
18411: POP
// if not side then
18412: LD_VAR 0 3
18416: NOT
18417: IFFALSE 18421
// exit ;
18419: GO 18466
// for i := 1 to tmp do
18421: LD_ADDR_VAR 0 1
18425: PUSH
18426: DOUBLE
18427: LD_INT 1
18429: DEC
18430: ST_TO_ADDR
18431: LD_VAR 0 2
18435: PUSH
18436: FOR_TO
18437: IFFALSE 18464
// if Prob ( 60 ) then
18439: LD_INT 60
18441: PPUSH
18442: CALL_OW 13
18446: IFFALSE 18462
// SetSide ( i , side ) ;
18448: LD_VAR 0 1
18452: PPUSH
18453: LD_VAR 0 3
18457: PPUSH
18458: CALL_OW 235
18462: GO 18436
18464: POP
18465: POP
// end ;
18466: PPOPN 3
18468: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18469: LD_EXP 22
18473: PUSH
18474: LD_EXP 35
18478: AND
18479: IFFALSE 18598
18481: GO 18483
18483: DISABLE
18484: LD_INT 0
18486: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18487: LD_ADDR_VAR 0 1
18491: PUSH
18492: LD_INT 22
18494: PUSH
18495: LD_OWVAR 2
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 21
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 3
18516: PUSH
18517: LD_INT 23
18519: PUSH
18520: LD_INT 0
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: PPUSH
18536: CALL_OW 69
18540: PUSH
18541: FOR_IN
18542: IFFALSE 18596
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18544: LD_VAR 0 1
18548: PPUSH
18549: CALL_OW 257
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: LD_INT 2
18559: PUSH
18560: LD_INT 3
18562: PUSH
18563: LD_INT 4
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: IN
18572: IFFALSE 18594
// SetClass ( un , rand ( 1 , 4 ) ) ;
18574: LD_VAR 0 1
18578: PPUSH
18579: LD_INT 1
18581: PPUSH
18582: LD_INT 4
18584: PPUSH
18585: CALL_OW 12
18589: PPUSH
18590: CALL_OW 336
18594: GO 18541
18596: POP
18597: POP
// end ;
18598: PPOPN 1
18600: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18601: LD_EXP 22
18605: PUSH
18606: LD_EXP 34
18610: AND
18611: IFFALSE 18690
18613: GO 18615
18615: DISABLE
18616: LD_INT 0
18618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18619: LD_ADDR_VAR 0 1
18623: PUSH
18624: LD_INT 22
18626: PUSH
18627: LD_OWVAR 2
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 21
18638: PUSH
18639: LD_INT 3
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PPUSH
18650: CALL_OW 69
18654: ST_TO_ADDR
// if not tmp then
18655: LD_VAR 0 1
18659: NOT
18660: IFFALSE 18664
// exit ;
18662: GO 18690
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18664: LD_VAR 0 1
18668: PUSH
18669: LD_INT 1
18671: PPUSH
18672: LD_VAR 0 1
18676: PPUSH
18677: CALL_OW 12
18681: ARRAY
18682: PPUSH
18683: LD_INT 100
18685: PPUSH
18686: CALL_OW 234
// end ;
18690: PPOPN 1
18692: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18693: LD_EXP 22
18697: PUSH
18698: LD_EXP 36
18702: AND
18703: IFFALSE 18801
18705: GO 18707
18707: DISABLE
18708: LD_INT 0
18710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18711: LD_ADDR_VAR 0 1
18715: PUSH
18716: LD_INT 22
18718: PUSH
18719: LD_OWVAR 2
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 21
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PPUSH
18742: CALL_OW 69
18746: ST_TO_ADDR
// if not tmp then
18747: LD_VAR 0 1
18751: NOT
18752: IFFALSE 18756
// exit ;
18754: GO 18801
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18756: LD_VAR 0 1
18760: PUSH
18761: LD_INT 1
18763: PPUSH
18764: LD_VAR 0 1
18768: PPUSH
18769: CALL_OW 12
18773: ARRAY
18774: PPUSH
18775: LD_INT 1
18777: PPUSH
18778: LD_INT 4
18780: PPUSH
18781: CALL_OW 12
18785: PPUSH
18786: LD_INT 3000
18788: PPUSH
18789: LD_INT 9000
18791: PPUSH
18792: CALL_OW 12
18796: PPUSH
18797: CALL_OW 492
// end ;
18801: PPOPN 1
18803: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18804: LD_EXP 22
18808: PUSH
18809: LD_EXP 37
18813: AND
18814: IFFALSE 18834
18816: GO 18818
18818: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18819: LD_INT 1
18821: PPUSH
18822: LD_OWVAR 2
18826: PPUSH
18827: LD_INT 0
18829: PPUSH
18830: CALL_OW 324
18834: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18835: LD_EXP 22
18839: PUSH
18840: LD_EXP 38
18844: AND
18845: IFFALSE 18928
18847: GO 18849
18849: DISABLE
18850: LD_INT 0
18852: PPUSH
18853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18854: LD_ADDR_VAR 0 2
18858: PUSH
18859: LD_INT 22
18861: PUSH
18862: LD_OWVAR 2
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 21
18873: PUSH
18874: LD_INT 3
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PPUSH
18885: CALL_OW 69
18889: ST_TO_ADDR
// if not tmp then
18890: LD_VAR 0 2
18894: NOT
18895: IFFALSE 18899
// exit ;
18897: GO 18928
// for i in tmp do
18899: LD_ADDR_VAR 0 1
18903: PUSH
18904: LD_VAR 0 2
18908: PUSH
18909: FOR_IN
18910: IFFALSE 18926
// SetBLevel ( i , 10 ) ;
18912: LD_VAR 0 1
18916: PPUSH
18917: LD_INT 10
18919: PPUSH
18920: CALL_OW 241
18924: GO 18909
18926: POP
18927: POP
// end ;
18928: PPOPN 2
18930: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18931: LD_EXP 22
18935: PUSH
18936: LD_EXP 39
18940: AND
18941: IFFALSE 19052
18943: GO 18945
18945: DISABLE
18946: LD_INT 0
18948: PPUSH
18949: PPUSH
18950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18951: LD_ADDR_VAR 0 3
18955: PUSH
18956: LD_INT 22
18958: PUSH
18959: LD_OWVAR 2
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 25
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PPUSH
18982: CALL_OW 69
18986: ST_TO_ADDR
// if not tmp then
18987: LD_VAR 0 3
18991: NOT
18992: IFFALSE 18996
// exit ;
18994: GO 19052
// un := tmp [ rand ( 1 , tmp ) ] ;
18996: LD_ADDR_VAR 0 2
19000: PUSH
19001: LD_VAR 0 3
19005: PUSH
19006: LD_INT 1
19008: PPUSH
19009: LD_VAR 0 3
19013: PPUSH
19014: CALL_OW 12
19018: ARRAY
19019: ST_TO_ADDR
// if Crawls ( un ) then
19020: LD_VAR 0 2
19024: PPUSH
19025: CALL_OW 318
19029: IFFALSE 19040
// ComWalk ( un ) ;
19031: LD_VAR 0 2
19035: PPUSH
19036: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19040: LD_VAR 0 2
19044: PPUSH
19045: LD_INT 5
19047: PPUSH
19048: CALL_OW 336
// end ;
19052: PPOPN 3
19054: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19055: LD_EXP 22
19059: PUSH
19060: LD_EXP 40
19064: AND
19065: PUSH
19066: LD_OWVAR 67
19070: PUSH
19071: LD_INT 4
19073: LESS
19074: AND
19075: IFFALSE 19094
19077: GO 19079
19079: DISABLE
// begin Difficulty := Difficulty + 1 ;
19080: LD_ADDR_OWVAR 67
19084: PUSH
19085: LD_OWVAR 67
19089: PUSH
19090: LD_INT 1
19092: PLUS
19093: ST_TO_ADDR
// end ;
19094: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19095: LD_EXP 22
19099: PUSH
19100: LD_EXP 41
19104: AND
19105: IFFALSE 19208
19107: GO 19109
19109: DISABLE
19110: LD_INT 0
19112: PPUSH
// begin for i := 1 to 5 do
19113: LD_ADDR_VAR 0 1
19117: PUSH
19118: DOUBLE
19119: LD_INT 1
19121: DEC
19122: ST_TO_ADDR
19123: LD_INT 5
19125: PUSH
19126: FOR_TO
19127: IFFALSE 19206
// begin uc_nation := nation_nature ;
19129: LD_ADDR_OWVAR 21
19133: PUSH
19134: LD_INT 0
19136: ST_TO_ADDR
// uc_side := 0 ;
19137: LD_ADDR_OWVAR 20
19141: PUSH
19142: LD_INT 0
19144: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19145: LD_ADDR_OWVAR 29
19149: PUSH
19150: LD_INT 12
19152: PUSH
19153: LD_INT 12
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: ST_TO_ADDR
// hc_agressivity := 20 ;
19160: LD_ADDR_OWVAR 35
19164: PUSH
19165: LD_INT 20
19167: ST_TO_ADDR
// hc_class := class_tiger ;
19168: LD_ADDR_OWVAR 28
19172: PUSH
19173: LD_INT 14
19175: ST_TO_ADDR
// hc_gallery :=  ;
19176: LD_ADDR_OWVAR 33
19180: PUSH
19181: LD_STRING 
19183: ST_TO_ADDR
// hc_name :=  ;
19184: LD_ADDR_OWVAR 26
19188: PUSH
19189: LD_STRING 
19191: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19192: CALL_OW 44
19196: PPUSH
19197: LD_INT 0
19199: PPUSH
19200: CALL_OW 51
// end ;
19204: GO 19126
19206: POP
19207: POP
// end ;
19208: PPOPN 1
19210: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19211: LD_EXP 22
19215: PUSH
19216: LD_EXP 42
19220: AND
19221: IFFALSE 19230
19223: GO 19225
19225: DISABLE
// StreamSibBomb ;
19226: CALL 19231 0 0
19230: END
// export function StreamSibBomb ; var i , x , y ; begin
19231: LD_INT 0
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
// result := false ;
19237: LD_ADDR_VAR 0 1
19241: PUSH
19242: LD_INT 0
19244: ST_TO_ADDR
// for i := 1 to 16 do
19245: LD_ADDR_VAR 0 2
19249: PUSH
19250: DOUBLE
19251: LD_INT 1
19253: DEC
19254: ST_TO_ADDR
19255: LD_INT 16
19257: PUSH
19258: FOR_TO
19259: IFFALSE 19458
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19261: LD_ADDR_VAR 0 3
19265: PUSH
19266: LD_INT 10
19268: PUSH
19269: LD_INT 20
19271: PUSH
19272: LD_INT 30
19274: PUSH
19275: LD_INT 40
19277: PUSH
19278: LD_INT 50
19280: PUSH
19281: LD_INT 60
19283: PUSH
19284: LD_INT 70
19286: PUSH
19287: LD_INT 80
19289: PUSH
19290: LD_INT 90
19292: PUSH
19293: LD_INT 100
19295: PUSH
19296: LD_INT 110
19298: PUSH
19299: LD_INT 120
19301: PUSH
19302: LD_INT 130
19304: PUSH
19305: LD_INT 140
19307: PUSH
19308: LD_INT 150
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 1
19330: PPUSH
19331: LD_INT 15
19333: PPUSH
19334: CALL_OW 12
19338: ARRAY
19339: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19340: LD_ADDR_VAR 0 4
19344: PUSH
19345: LD_INT 10
19347: PUSH
19348: LD_INT 20
19350: PUSH
19351: LD_INT 30
19353: PUSH
19354: LD_INT 40
19356: PUSH
19357: LD_INT 50
19359: PUSH
19360: LD_INT 60
19362: PUSH
19363: LD_INT 70
19365: PUSH
19366: LD_INT 80
19368: PUSH
19369: LD_INT 90
19371: PUSH
19372: LD_INT 100
19374: PUSH
19375: LD_INT 110
19377: PUSH
19378: LD_INT 120
19380: PUSH
19381: LD_INT 130
19383: PUSH
19384: LD_INT 140
19386: PUSH
19387: LD_INT 150
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 1
19409: PPUSH
19410: LD_INT 15
19412: PPUSH
19413: CALL_OW 12
19417: ARRAY
19418: ST_TO_ADDR
// if ValidHex ( x , y ) then
19419: LD_VAR 0 3
19423: PPUSH
19424: LD_VAR 0 4
19428: PPUSH
19429: CALL_OW 488
19433: IFFALSE 19456
// begin result := [ x , y ] ;
19435: LD_ADDR_VAR 0 1
19439: PUSH
19440: LD_VAR 0 3
19444: PUSH
19445: LD_VAR 0 4
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: ST_TO_ADDR
// break ;
19454: GO 19458
// end ; end ;
19456: GO 19258
19458: POP
19459: POP
// if result then
19460: LD_VAR 0 1
19464: IFFALSE 19524
// begin ToLua ( playSibBomb() ) ;
19466: LD_STRING playSibBomb()
19468: PPUSH
19469: CALL_OW 559
// wait ( 0 0$14 ) ;
19473: LD_INT 490
19475: PPUSH
19476: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19480: LD_VAR 0 1
19484: PUSH
19485: LD_INT 1
19487: ARRAY
19488: PPUSH
19489: LD_VAR 0 1
19493: PUSH
19494: LD_INT 2
19496: ARRAY
19497: PPUSH
19498: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19502: LD_VAR 0 1
19506: PUSH
19507: LD_INT 1
19509: ARRAY
19510: PPUSH
19511: LD_VAR 0 1
19515: PUSH
19516: LD_INT 2
19518: ARRAY
19519: PPUSH
19520: CALL_OW 429
// end ; end ;
19524: LD_VAR 0 1
19528: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19529: LD_EXP 22
19533: PUSH
19534: LD_EXP 44
19538: AND
19539: IFFALSE 19551
19541: GO 19543
19543: DISABLE
// YouLost (  ) ;
19544: LD_STRING 
19546: PPUSH
19547: CALL_OW 104
19551: END
// every 0 0$1 trigger StreamModeActive and sFog do
19552: LD_EXP 22
19556: PUSH
19557: LD_EXP 43
19561: AND
19562: IFFALSE 19576
19564: GO 19566
19566: DISABLE
// FogOff ( your_side ) ;
19567: LD_OWVAR 2
19571: PPUSH
19572: CALL_OW 344
19576: END
// every 0 0$1 trigger StreamModeActive and sSun do
19577: LD_EXP 22
19581: PUSH
19582: LD_EXP 45
19586: AND
19587: IFFALSE 19615
19589: GO 19591
19591: DISABLE
// begin solar_recharge_percent := 0 ;
19592: LD_ADDR_OWVAR 79
19596: PUSH
19597: LD_INT 0
19599: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19600: LD_INT 10500
19602: PPUSH
19603: CALL_OW 67
// solar_recharge_percent := 100 ;
19607: LD_ADDR_OWVAR 79
19611: PUSH
19612: LD_INT 100
19614: ST_TO_ADDR
// end ;
19615: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19616: LD_EXP 22
19620: PUSH
19621: LD_EXP 46
19625: AND
19626: IFFALSE 19865
19628: GO 19630
19630: DISABLE
19631: LD_INT 0
19633: PPUSH
19634: PPUSH
19635: PPUSH
// begin tmp := [ ] ;
19636: LD_ADDR_VAR 0 3
19640: PUSH
19641: EMPTY
19642: ST_TO_ADDR
// for i := 1 to 6 do
19643: LD_ADDR_VAR 0 1
19647: PUSH
19648: DOUBLE
19649: LD_INT 1
19651: DEC
19652: ST_TO_ADDR
19653: LD_INT 6
19655: PUSH
19656: FOR_TO
19657: IFFALSE 19762
// begin uc_nation := nation_nature ;
19659: LD_ADDR_OWVAR 21
19663: PUSH
19664: LD_INT 0
19666: ST_TO_ADDR
// uc_side := 0 ;
19667: LD_ADDR_OWVAR 20
19671: PUSH
19672: LD_INT 0
19674: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19675: LD_ADDR_OWVAR 29
19679: PUSH
19680: LD_INT 12
19682: PUSH
19683: LD_INT 12
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: ST_TO_ADDR
// hc_agressivity := 20 ;
19690: LD_ADDR_OWVAR 35
19694: PUSH
19695: LD_INT 20
19697: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19698: LD_ADDR_OWVAR 28
19702: PUSH
19703: LD_INT 17
19705: ST_TO_ADDR
// hc_gallery :=  ;
19706: LD_ADDR_OWVAR 33
19710: PUSH
19711: LD_STRING 
19713: ST_TO_ADDR
// hc_name :=  ;
19714: LD_ADDR_OWVAR 26
19718: PUSH
19719: LD_STRING 
19721: ST_TO_ADDR
// un := CreateHuman ;
19722: LD_ADDR_VAR 0 2
19726: PUSH
19727: CALL_OW 44
19731: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19732: LD_VAR 0 2
19736: PPUSH
19737: LD_INT 1
19739: PPUSH
19740: CALL_OW 51
// tmp := tmp ^ un ;
19744: LD_ADDR_VAR 0 3
19748: PUSH
19749: LD_VAR 0 3
19753: PUSH
19754: LD_VAR 0 2
19758: ADD
19759: ST_TO_ADDR
// end ;
19760: GO 19656
19762: POP
19763: POP
// repeat wait ( 0 0$1 ) ;
19764: LD_INT 35
19766: PPUSH
19767: CALL_OW 67
// for un in tmp do
19771: LD_ADDR_VAR 0 2
19775: PUSH
19776: LD_VAR 0 3
19780: PUSH
19781: FOR_IN
19782: IFFALSE 19856
// begin if IsDead ( un ) then
19784: LD_VAR 0 2
19788: PPUSH
19789: CALL_OW 301
19793: IFFALSE 19813
// begin tmp := tmp diff un ;
19795: LD_ADDR_VAR 0 3
19799: PUSH
19800: LD_VAR 0 3
19804: PUSH
19805: LD_VAR 0 2
19809: DIFF
19810: ST_TO_ADDR
// continue ;
19811: GO 19781
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19813: LD_VAR 0 2
19817: PPUSH
19818: LD_INT 3
19820: PUSH
19821: LD_INT 22
19823: PUSH
19824: LD_INT 0
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PPUSH
19835: CALL_OW 69
19839: PPUSH
19840: LD_VAR 0 2
19844: PPUSH
19845: CALL_OW 74
19849: PPUSH
19850: CALL_OW 115
// end ;
19854: GO 19781
19856: POP
19857: POP
// until not tmp ;
19858: LD_VAR 0 3
19862: NOT
19863: IFFALSE 19764
// end ;
19865: PPOPN 3
19867: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19868: LD_EXP 22
19872: PUSH
19873: LD_EXP 47
19877: AND
19878: IFFALSE 19932
19880: GO 19882
19882: DISABLE
// begin ToLua ( displayTroll(); ) ;
19883: LD_STRING displayTroll();
19885: PPUSH
19886: CALL_OW 559
// wait ( 3 3$00 ) ;
19890: LD_INT 6300
19892: PPUSH
19893: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19897: LD_STRING hideTroll();
19899: PPUSH
19900: CALL_OW 559
// wait ( 1 1$00 ) ;
19904: LD_INT 2100
19906: PPUSH
19907: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19911: LD_STRING displayTroll();
19913: PPUSH
19914: CALL_OW 559
// wait ( 1 1$00 ) ;
19918: LD_INT 2100
19920: PPUSH
19921: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19925: LD_STRING hideTroll();
19927: PPUSH
19928: CALL_OW 559
// end ;
19932: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19933: LD_EXP 22
19937: PUSH
19938: LD_EXP 48
19942: AND
19943: IFFALSE 20006
19945: GO 19947
19947: DISABLE
19948: LD_INT 0
19950: PPUSH
// begin p := 0 ;
19951: LD_ADDR_VAR 0 1
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// repeat game_speed := 1 ;
19959: LD_ADDR_OWVAR 65
19963: PUSH
19964: LD_INT 1
19966: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19967: LD_INT 35
19969: PPUSH
19970: CALL_OW 67
// p := p + 1 ;
19974: LD_ADDR_VAR 0 1
19978: PUSH
19979: LD_VAR 0 1
19983: PUSH
19984: LD_INT 1
19986: PLUS
19987: ST_TO_ADDR
// until p >= 60 ;
19988: LD_VAR 0 1
19992: PUSH
19993: LD_INT 60
19995: GREATEREQUAL
19996: IFFALSE 19959
// game_speed := 4 ;
19998: LD_ADDR_OWVAR 65
20002: PUSH
20003: LD_INT 4
20005: ST_TO_ADDR
// end ;
20006: PPOPN 1
20008: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20009: LD_EXP 22
20013: PUSH
20014: LD_EXP 49
20018: AND
20019: IFFALSE 20165
20021: GO 20023
20023: DISABLE
20024: LD_INT 0
20026: PPUSH
20027: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20028: LD_ADDR_VAR 0 1
20032: PUSH
20033: LD_INT 22
20035: PUSH
20036: LD_OWVAR 2
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 30
20050: PUSH
20051: LD_INT 0
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 30
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PPUSH
20077: CALL_OW 69
20081: ST_TO_ADDR
// if not depot then
20082: LD_VAR 0 1
20086: NOT
20087: IFFALSE 20091
// exit ;
20089: GO 20165
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20091: LD_ADDR_VAR 0 2
20095: PUSH
20096: LD_VAR 0 1
20100: PUSH
20101: LD_INT 1
20103: PPUSH
20104: LD_VAR 0 1
20108: PPUSH
20109: CALL_OW 12
20113: ARRAY
20114: PPUSH
20115: CALL_OW 274
20119: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20120: LD_VAR 0 2
20124: PPUSH
20125: LD_INT 1
20127: PPUSH
20128: LD_INT 0
20130: PPUSH
20131: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20135: LD_VAR 0 2
20139: PPUSH
20140: LD_INT 2
20142: PPUSH
20143: LD_INT 0
20145: PPUSH
20146: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20150: LD_VAR 0 2
20154: PPUSH
20155: LD_INT 3
20157: PPUSH
20158: LD_INT 0
20160: PPUSH
20161: CALL_OW 277
// end ;
20165: PPOPN 2
20167: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20168: LD_EXP 22
20172: PUSH
20173: LD_EXP 50
20177: AND
20178: IFFALSE 20275
20180: GO 20182
20182: DISABLE
20183: LD_INT 0
20185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20186: LD_ADDR_VAR 0 1
20190: PUSH
20191: LD_INT 22
20193: PUSH
20194: LD_OWVAR 2
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 21
20205: PUSH
20206: LD_INT 1
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 3
20215: PUSH
20216: LD_INT 23
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: LIST
20234: PPUSH
20235: CALL_OW 69
20239: ST_TO_ADDR
// if not tmp then
20240: LD_VAR 0 1
20244: NOT
20245: IFFALSE 20249
// exit ;
20247: GO 20275
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20249: LD_VAR 0 1
20253: PUSH
20254: LD_INT 1
20256: PPUSH
20257: LD_VAR 0 1
20261: PPUSH
20262: CALL_OW 12
20266: ARRAY
20267: PPUSH
20268: LD_INT 200
20270: PPUSH
20271: CALL_OW 234
// end ;
20275: PPOPN 1
20277: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20278: LD_EXP 22
20282: PUSH
20283: LD_EXP 51
20287: AND
20288: IFFALSE 20367
20290: GO 20292
20292: DISABLE
20293: LD_INT 0
20295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20296: LD_ADDR_VAR 0 1
20300: PUSH
20301: LD_INT 22
20303: PUSH
20304: LD_OWVAR 2
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 21
20315: PUSH
20316: LD_INT 2
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PPUSH
20327: CALL_OW 69
20331: ST_TO_ADDR
// if not tmp then
20332: LD_VAR 0 1
20336: NOT
20337: IFFALSE 20341
// exit ;
20339: GO 20367
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20341: LD_VAR 0 1
20345: PUSH
20346: LD_INT 1
20348: PPUSH
20349: LD_VAR 0 1
20353: PPUSH
20354: CALL_OW 12
20358: ARRAY
20359: PPUSH
20360: LD_INT 60
20362: PPUSH
20363: CALL_OW 234
// end ;
20367: PPOPN 1
20369: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20370: LD_EXP 22
20374: PUSH
20375: LD_EXP 52
20379: AND
20380: IFFALSE 20479
20382: GO 20384
20384: DISABLE
20385: LD_INT 0
20387: PPUSH
20388: PPUSH
// begin enable ;
20389: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20390: LD_ADDR_VAR 0 1
20394: PUSH
20395: LD_INT 22
20397: PUSH
20398: LD_OWVAR 2
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 61
20409: PUSH
20410: EMPTY
20411: LIST
20412: PUSH
20413: LD_INT 33
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: LIST
20427: PPUSH
20428: CALL_OW 69
20432: ST_TO_ADDR
// if not tmp then
20433: LD_VAR 0 1
20437: NOT
20438: IFFALSE 20442
// exit ;
20440: GO 20479
// for i in tmp do
20442: LD_ADDR_VAR 0 2
20446: PUSH
20447: LD_VAR 0 1
20451: PUSH
20452: FOR_IN
20453: IFFALSE 20477
// if IsControledBy ( i ) then
20455: LD_VAR 0 2
20459: PPUSH
20460: CALL_OW 312
20464: IFFALSE 20475
// ComUnlink ( i ) ;
20466: LD_VAR 0 2
20470: PPUSH
20471: CALL_OW 136
20475: GO 20452
20477: POP
20478: POP
// end ;
20479: PPOPN 2
20481: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20482: LD_EXP 22
20486: PUSH
20487: LD_EXP 53
20491: AND
20492: IFFALSE 20632
20494: GO 20496
20496: DISABLE
20497: LD_INT 0
20499: PPUSH
20500: PPUSH
// begin ToLua ( displayPowell(); ) ;
20501: LD_STRING displayPowell();
20503: PPUSH
20504: CALL_OW 559
// uc_side := 0 ;
20508: LD_ADDR_OWVAR 20
20512: PUSH
20513: LD_INT 0
20515: ST_TO_ADDR
// uc_nation := 2 ;
20516: LD_ADDR_OWVAR 21
20520: PUSH
20521: LD_INT 2
20523: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20524: LD_ADDR_OWVAR 37
20528: PUSH
20529: LD_INT 14
20531: ST_TO_ADDR
// vc_engine := engine_siberite ;
20532: LD_ADDR_OWVAR 39
20536: PUSH
20537: LD_INT 3
20539: ST_TO_ADDR
// vc_control := control_apeman ;
20540: LD_ADDR_OWVAR 38
20544: PUSH
20545: LD_INT 5
20547: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20548: LD_ADDR_OWVAR 40
20552: PUSH
20553: LD_INT 29
20555: ST_TO_ADDR
// un := CreateVehicle ;
20556: LD_ADDR_VAR 0 2
20560: PUSH
20561: CALL_OW 45
20565: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20566: LD_VAR 0 2
20570: PPUSH
20571: LD_INT 1
20573: PPUSH
20574: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20578: LD_INT 35
20580: PPUSH
20581: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20585: LD_VAR 0 2
20589: PPUSH
20590: LD_INT 22
20592: PUSH
20593: LD_OWVAR 2
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PPUSH
20602: CALL_OW 69
20606: PPUSH
20607: LD_VAR 0 2
20611: PPUSH
20612: CALL_OW 74
20616: PPUSH
20617: CALL_OW 115
// until IsDead ( un ) ;
20621: LD_VAR 0 2
20625: PPUSH
20626: CALL_OW 301
20630: IFFALSE 20578
// end ;
20632: PPOPN 2
20634: END
// every 0 0$1 trigger StreamModeActive and sStu do
20635: LD_EXP 22
20639: PUSH
20640: LD_EXP 61
20644: AND
20645: IFFALSE 20661
20647: GO 20649
20649: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20650: LD_STRING displayStucuk();
20652: PPUSH
20653: CALL_OW 559
// ResetFog ;
20657: CALL_OW 335
// end ;
20661: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20662: LD_EXP 22
20666: PUSH
20667: LD_EXP 54
20671: AND
20672: IFFALSE 20813
20674: GO 20676
20676: DISABLE
20677: LD_INT 0
20679: PPUSH
20680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20681: LD_ADDR_VAR 0 2
20685: PUSH
20686: LD_INT 22
20688: PUSH
20689: LD_OWVAR 2
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 21
20700: PUSH
20701: LD_INT 1
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PPUSH
20712: CALL_OW 69
20716: ST_TO_ADDR
// if not tmp then
20717: LD_VAR 0 2
20721: NOT
20722: IFFALSE 20726
// exit ;
20724: GO 20813
// un := tmp [ rand ( 1 , tmp ) ] ;
20726: LD_ADDR_VAR 0 1
20730: PUSH
20731: LD_VAR 0 2
20735: PUSH
20736: LD_INT 1
20738: PPUSH
20739: LD_VAR 0 2
20743: PPUSH
20744: CALL_OW 12
20748: ARRAY
20749: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20750: LD_VAR 0 1
20754: PPUSH
20755: LD_INT 0
20757: PPUSH
20758: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20762: LD_VAR 0 1
20766: PPUSH
20767: LD_OWVAR 3
20771: PUSH
20772: LD_VAR 0 1
20776: DIFF
20777: PPUSH
20778: LD_VAR 0 1
20782: PPUSH
20783: CALL_OW 74
20787: PPUSH
20788: CALL_OW 115
// wait ( 0 0$20 ) ;
20792: LD_INT 700
20794: PPUSH
20795: CALL_OW 67
// SetSide ( un , your_side ) ;
20799: LD_VAR 0 1
20803: PPUSH
20804: LD_OWVAR 2
20808: PPUSH
20809: CALL_OW 235
// end ;
20813: PPOPN 2
20815: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20816: LD_EXP 22
20820: PUSH
20821: LD_EXP 55
20825: AND
20826: IFFALSE 20932
20828: GO 20830
20830: DISABLE
20831: LD_INT 0
20833: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20834: LD_ADDR_VAR 0 1
20838: PUSH
20839: LD_INT 22
20841: PUSH
20842: LD_OWVAR 2
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 2
20853: PUSH
20854: LD_INT 30
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 30
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PPUSH
20883: CALL_OW 69
20887: ST_TO_ADDR
// if not depot then
20888: LD_VAR 0 1
20892: NOT
20893: IFFALSE 20897
// exit ;
20895: GO 20932
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20897: LD_VAR 0 1
20901: PUSH
20902: LD_INT 1
20904: ARRAY
20905: PPUSH
20906: CALL_OW 250
20910: PPUSH
20911: LD_VAR 0 1
20915: PUSH
20916: LD_INT 1
20918: ARRAY
20919: PPUSH
20920: CALL_OW 251
20924: PPUSH
20925: LD_INT 70
20927: PPUSH
20928: CALL_OW 495
// end ;
20932: PPOPN 1
20934: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20935: LD_EXP 22
20939: PUSH
20940: LD_EXP 56
20944: AND
20945: IFFALSE 21156
20947: GO 20949
20949: DISABLE
20950: LD_INT 0
20952: PPUSH
20953: PPUSH
20954: PPUSH
20955: PPUSH
20956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20957: LD_ADDR_VAR 0 5
20961: PUSH
20962: LD_INT 22
20964: PUSH
20965: LD_OWVAR 2
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 21
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PPUSH
20988: CALL_OW 69
20992: ST_TO_ADDR
// if not tmp then
20993: LD_VAR 0 5
20997: NOT
20998: IFFALSE 21002
// exit ;
21000: GO 21156
// for i in tmp do
21002: LD_ADDR_VAR 0 1
21006: PUSH
21007: LD_VAR 0 5
21011: PUSH
21012: FOR_IN
21013: IFFALSE 21154
// begin d := rand ( 0 , 5 ) ;
21015: LD_ADDR_VAR 0 4
21019: PUSH
21020: LD_INT 0
21022: PPUSH
21023: LD_INT 5
21025: PPUSH
21026: CALL_OW 12
21030: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21031: LD_ADDR_VAR 0 2
21035: PUSH
21036: LD_VAR 0 1
21040: PPUSH
21041: CALL_OW 250
21045: PPUSH
21046: LD_VAR 0 4
21050: PPUSH
21051: LD_INT 3
21053: PPUSH
21054: LD_INT 12
21056: PPUSH
21057: CALL_OW 12
21061: PPUSH
21062: CALL_OW 272
21066: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21067: LD_ADDR_VAR 0 3
21071: PUSH
21072: LD_VAR 0 1
21076: PPUSH
21077: CALL_OW 251
21081: PPUSH
21082: LD_VAR 0 4
21086: PPUSH
21087: LD_INT 3
21089: PPUSH
21090: LD_INT 12
21092: PPUSH
21093: CALL_OW 12
21097: PPUSH
21098: CALL_OW 273
21102: ST_TO_ADDR
// if ValidHex ( x , y ) then
21103: LD_VAR 0 2
21107: PPUSH
21108: LD_VAR 0 3
21112: PPUSH
21113: CALL_OW 488
21117: IFFALSE 21152
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21119: LD_VAR 0 1
21123: PPUSH
21124: LD_VAR 0 2
21128: PPUSH
21129: LD_VAR 0 3
21133: PPUSH
21134: LD_INT 3
21136: PPUSH
21137: LD_INT 6
21139: PPUSH
21140: CALL_OW 12
21144: PPUSH
21145: LD_INT 1
21147: PPUSH
21148: CALL_OW 483
// end ;
21152: GO 21012
21154: POP
21155: POP
// end ;
21156: PPOPN 5
21158: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21159: LD_EXP 22
21163: PUSH
21164: LD_EXP 57
21168: AND
21169: IFFALSE 21263
21171: GO 21173
21173: DISABLE
21174: LD_INT 0
21176: PPUSH
21177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21178: LD_ADDR_VAR 0 2
21182: PUSH
21183: LD_INT 22
21185: PUSH
21186: LD_OWVAR 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 32
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 21
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: LIST
21219: PPUSH
21220: CALL_OW 69
21224: ST_TO_ADDR
// if not tmp then
21225: LD_VAR 0 2
21229: NOT
21230: IFFALSE 21234
// exit ;
21232: GO 21263
// for i in tmp do
21234: LD_ADDR_VAR 0 1
21238: PUSH
21239: LD_VAR 0 2
21243: PUSH
21244: FOR_IN
21245: IFFALSE 21261
// SetFuel ( i , 0 ) ;
21247: LD_VAR 0 1
21251: PPUSH
21252: LD_INT 0
21254: PPUSH
21255: CALL_OW 240
21259: GO 21244
21261: POP
21262: POP
// end ;
21263: PPOPN 2
21265: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21266: LD_EXP 22
21270: PUSH
21271: LD_EXP 58
21275: AND
21276: IFFALSE 21342
21278: GO 21280
21280: DISABLE
21281: LD_INT 0
21283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21284: LD_ADDR_VAR 0 1
21288: PUSH
21289: LD_INT 22
21291: PUSH
21292: LD_OWVAR 2
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 30
21303: PUSH
21304: LD_INT 29
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PPUSH
21315: CALL_OW 69
21319: ST_TO_ADDR
// if not tmp then
21320: LD_VAR 0 1
21324: NOT
21325: IFFALSE 21329
// exit ;
21327: GO 21342
// DestroyUnit ( tmp [ 1 ] ) ;
21329: LD_VAR 0 1
21333: PUSH
21334: LD_INT 1
21336: ARRAY
21337: PPUSH
21338: CALL_OW 65
// end ;
21342: PPOPN 1
21344: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21345: LD_EXP 22
21349: PUSH
21350: LD_EXP 60
21354: AND
21355: IFFALSE 21484
21357: GO 21359
21359: DISABLE
21360: LD_INT 0
21362: PPUSH
// begin uc_side := 0 ;
21363: LD_ADDR_OWVAR 20
21367: PUSH
21368: LD_INT 0
21370: ST_TO_ADDR
// uc_nation := nation_arabian ;
21371: LD_ADDR_OWVAR 21
21375: PUSH
21376: LD_INT 2
21378: ST_TO_ADDR
// hc_gallery :=  ;
21379: LD_ADDR_OWVAR 33
21383: PUSH
21384: LD_STRING 
21386: ST_TO_ADDR
// hc_name :=  ;
21387: LD_ADDR_OWVAR 26
21391: PUSH
21392: LD_STRING 
21394: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21395: LD_INT 1
21397: PPUSH
21398: LD_INT 11
21400: PPUSH
21401: LD_INT 10
21403: PPUSH
21404: CALL_OW 380
// un := CreateHuman ;
21408: LD_ADDR_VAR 0 1
21412: PUSH
21413: CALL_OW 44
21417: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21418: LD_VAR 0 1
21422: PPUSH
21423: LD_INT 1
21425: PPUSH
21426: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21430: LD_INT 35
21432: PPUSH
21433: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21437: LD_VAR 0 1
21441: PPUSH
21442: LD_INT 22
21444: PUSH
21445: LD_OWVAR 2
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PPUSH
21454: CALL_OW 69
21458: PPUSH
21459: LD_VAR 0 1
21463: PPUSH
21464: CALL_OW 74
21468: PPUSH
21469: CALL_OW 115
// until IsDead ( un ) ;
21473: LD_VAR 0 1
21477: PPUSH
21478: CALL_OW 301
21482: IFFALSE 21430
// end ;
21484: PPOPN 1
21486: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21487: LD_EXP 22
21491: PUSH
21492: LD_EXP 62
21496: AND
21497: IFFALSE 21509
21499: GO 21501
21501: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21502: LD_STRING earthquake(getX(game), 0, 32)
21504: PPUSH
21505: CALL_OW 559
21509: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21510: LD_EXP 22
21514: PUSH
21515: LD_EXP 63
21519: AND
21520: IFFALSE 21611
21522: GO 21524
21524: DISABLE
21525: LD_INT 0
21527: PPUSH
// begin enable ;
21528: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21529: LD_ADDR_VAR 0 1
21533: PUSH
21534: LD_INT 22
21536: PUSH
21537: LD_OWVAR 2
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 21
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 33
21558: PUSH
21559: LD_INT 3
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: LIST
21570: PPUSH
21571: CALL_OW 69
21575: ST_TO_ADDR
// if not tmp then
21576: LD_VAR 0 1
21580: NOT
21581: IFFALSE 21585
// exit ;
21583: GO 21611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21585: LD_VAR 0 1
21589: PUSH
21590: LD_INT 1
21592: PPUSH
21593: LD_VAR 0 1
21597: PPUSH
21598: CALL_OW 12
21602: ARRAY
21603: PPUSH
21604: LD_INT 1
21606: PPUSH
21607: CALL_OW 234
// end ;
21611: PPOPN 1
21613: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21614: LD_EXP 22
21618: PUSH
21619: LD_EXP 64
21623: AND
21624: IFFALSE 21765
21626: GO 21628
21628: DISABLE
21629: LD_INT 0
21631: PPUSH
21632: PPUSH
21633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21634: LD_ADDR_VAR 0 3
21638: PUSH
21639: LD_INT 22
21641: PUSH
21642: LD_OWVAR 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 25
21653: PUSH
21654: LD_INT 1
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PPUSH
21665: CALL_OW 69
21669: ST_TO_ADDR
// if not tmp then
21670: LD_VAR 0 3
21674: NOT
21675: IFFALSE 21679
// exit ;
21677: GO 21765
// un := tmp [ rand ( 1 , tmp ) ] ;
21679: LD_ADDR_VAR 0 2
21683: PUSH
21684: LD_VAR 0 3
21688: PUSH
21689: LD_INT 1
21691: PPUSH
21692: LD_VAR 0 3
21696: PPUSH
21697: CALL_OW 12
21701: ARRAY
21702: ST_TO_ADDR
// if Crawls ( un ) then
21703: LD_VAR 0 2
21707: PPUSH
21708: CALL_OW 318
21712: IFFALSE 21723
// ComWalk ( un ) ;
21714: LD_VAR 0 2
21718: PPUSH
21719: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21723: LD_VAR 0 2
21727: PPUSH
21728: LD_INT 9
21730: PPUSH
21731: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21735: LD_INT 28
21737: PPUSH
21738: LD_OWVAR 2
21742: PPUSH
21743: LD_INT 2
21745: PPUSH
21746: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21750: LD_INT 29
21752: PPUSH
21753: LD_OWVAR 2
21757: PPUSH
21758: LD_INT 2
21760: PPUSH
21761: CALL_OW 322
// end ;
21765: PPOPN 3
21767: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21768: LD_EXP 22
21772: PUSH
21773: LD_EXP 65
21777: AND
21778: IFFALSE 21889
21780: GO 21782
21782: DISABLE
21783: LD_INT 0
21785: PPUSH
21786: PPUSH
21787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21788: LD_ADDR_VAR 0 3
21792: PUSH
21793: LD_INT 22
21795: PUSH
21796: LD_OWVAR 2
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 25
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PPUSH
21819: CALL_OW 69
21823: ST_TO_ADDR
// if not tmp then
21824: LD_VAR 0 3
21828: NOT
21829: IFFALSE 21833
// exit ;
21831: GO 21889
// un := tmp [ rand ( 1 , tmp ) ] ;
21833: LD_ADDR_VAR 0 2
21837: PUSH
21838: LD_VAR 0 3
21842: PUSH
21843: LD_INT 1
21845: PPUSH
21846: LD_VAR 0 3
21850: PPUSH
21851: CALL_OW 12
21855: ARRAY
21856: ST_TO_ADDR
// if Crawls ( un ) then
21857: LD_VAR 0 2
21861: PPUSH
21862: CALL_OW 318
21866: IFFALSE 21877
// ComWalk ( un ) ;
21868: LD_VAR 0 2
21872: PPUSH
21873: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21877: LD_VAR 0 2
21881: PPUSH
21882: LD_INT 8
21884: PPUSH
21885: CALL_OW 336
// end ;
21889: PPOPN 3
21891: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21892: LD_EXP 22
21896: PUSH
21897: LD_EXP 66
21901: AND
21902: IFFALSE 22046
21904: GO 21906
21906: DISABLE
21907: LD_INT 0
21909: PPUSH
21910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21911: LD_ADDR_VAR 0 2
21915: PUSH
21916: LD_INT 22
21918: PUSH
21919: LD_OWVAR 2
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 21
21930: PUSH
21931: LD_INT 2
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 2
21940: PUSH
21941: LD_INT 34
21943: PUSH
21944: LD_INT 12
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 34
21953: PUSH
21954: LD_INT 51
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 34
21963: PUSH
21964: LD_INT 32
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: PPUSH
21982: CALL_OW 69
21986: ST_TO_ADDR
// if not tmp then
21987: LD_VAR 0 2
21991: NOT
21992: IFFALSE 21996
// exit ;
21994: GO 22046
// for i in tmp do
21996: LD_ADDR_VAR 0 1
22000: PUSH
22001: LD_VAR 0 2
22005: PUSH
22006: FOR_IN
22007: IFFALSE 22044
// if GetCargo ( i , mat_artifact ) = 0 then
22009: LD_VAR 0 1
22013: PPUSH
22014: LD_INT 4
22016: PPUSH
22017: CALL_OW 289
22021: PUSH
22022: LD_INT 0
22024: EQUAL
22025: IFFALSE 22042
// SetCargo ( i , mat_siberit , 100 ) ;
22027: LD_VAR 0 1
22031: PPUSH
22032: LD_INT 3
22034: PPUSH
22035: LD_INT 100
22037: PPUSH
22038: CALL_OW 290
22042: GO 22006
22044: POP
22045: POP
// end ;
22046: PPOPN 2
22048: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22049: LD_EXP 22
22053: PUSH
22054: LD_EXP 67
22058: AND
22059: IFFALSE 22242
22061: GO 22063
22063: DISABLE
22064: LD_INT 0
22066: PPUSH
22067: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22068: LD_ADDR_VAR 0 2
22072: PUSH
22073: LD_INT 22
22075: PUSH
22076: LD_OWVAR 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PPUSH
22085: CALL_OW 69
22089: ST_TO_ADDR
// if not tmp then
22090: LD_VAR 0 2
22094: NOT
22095: IFFALSE 22099
// exit ;
22097: GO 22242
// for i := 1 to 2 do
22099: LD_ADDR_VAR 0 1
22103: PUSH
22104: DOUBLE
22105: LD_INT 1
22107: DEC
22108: ST_TO_ADDR
22109: LD_INT 2
22111: PUSH
22112: FOR_TO
22113: IFFALSE 22240
// begin uc_side := your_side ;
22115: LD_ADDR_OWVAR 20
22119: PUSH
22120: LD_OWVAR 2
22124: ST_TO_ADDR
// uc_nation := nation_american ;
22125: LD_ADDR_OWVAR 21
22129: PUSH
22130: LD_INT 1
22132: ST_TO_ADDR
// vc_chassis := us_morphling ;
22133: LD_ADDR_OWVAR 37
22137: PUSH
22138: LD_INT 5
22140: ST_TO_ADDR
// vc_engine := engine_siberite ;
22141: LD_ADDR_OWVAR 39
22145: PUSH
22146: LD_INT 3
22148: ST_TO_ADDR
// vc_control := control_computer ;
22149: LD_ADDR_OWVAR 38
22153: PUSH
22154: LD_INT 3
22156: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22157: LD_ADDR_OWVAR 40
22161: PUSH
22162: LD_INT 10
22164: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22165: LD_VAR 0 2
22169: PUSH
22170: LD_INT 1
22172: ARRAY
22173: PPUSH
22174: CALL_OW 310
22178: NOT
22179: IFFALSE 22226
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22181: CALL_OW 45
22185: PPUSH
22186: LD_VAR 0 2
22190: PUSH
22191: LD_INT 1
22193: ARRAY
22194: PPUSH
22195: CALL_OW 250
22199: PPUSH
22200: LD_VAR 0 2
22204: PUSH
22205: LD_INT 1
22207: ARRAY
22208: PPUSH
22209: CALL_OW 251
22213: PPUSH
22214: LD_INT 12
22216: PPUSH
22217: LD_INT 1
22219: PPUSH
22220: CALL_OW 50
22224: GO 22238
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22226: CALL_OW 45
22230: PPUSH
22231: LD_INT 1
22233: PPUSH
22234: CALL_OW 51
// end ;
22238: GO 22112
22240: POP
22241: POP
// end ;
22242: PPOPN 2
22244: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22245: LD_EXP 22
22249: PUSH
22250: LD_EXP 68
22254: AND
22255: IFFALSE 22477
22257: GO 22259
22259: DISABLE
22260: LD_INT 0
22262: PPUSH
22263: PPUSH
22264: PPUSH
22265: PPUSH
22266: PPUSH
22267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22268: LD_ADDR_VAR 0 6
22272: PUSH
22273: LD_INT 22
22275: PUSH
22276: LD_OWVAR 2
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 21
22287: PUSH
22288: LD_INT 1
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 3
22297: PUSH
22298: LD_INT 23
22300: PUSH
22301: LD_INT 0
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: PPUSH
22317: CALL_OW 69
22321: ST_TO_ADDR
// if not tmp then
22322: LD_VAR 0 6
22326: NOT
22327: IFFALSE 22331
// exit ;
22329: GO 22477
// s1 := rand ( 1 , 4 ) ;
22331: LD_ADDR_VAR 0 2
22335: PUSH
22336: LD_INT 1
22338: PPUSH
22339: LD_INT 4
22341: PPUSH
22342: CALL_OW 12
22346: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22347: LD_ADDR_VAR 0 4
22351: PUSH
22352: LD_VAR 0 6
22356: PUSH
22357: LD_INT 1
22359: ARRAY
22360: PPUSH
22361: LD_VAR 0 2
22365: PPUSH
22366: CALL_OW 259
22370: ST_TO_ADDR
// if s1 = 1 then
22371: LD_VAR 0 2
22375: PUSH
22376: LD_INT 1
22378: EQUAL
22379: IFFALSE 22399
// s2 := rand ( 2 , 4 ) else
22381: LD_ADDR_VAR 0 3
22385: PUSH
22386: LD_INT 2
22388: PPUSH
22389: LD_INT 4
22391: PPUSH
22392: CALL_OW 12
22396: ST_TO_ADDR
22397: GO 22407
// s2 := 1 ;
22399: LD_ADDR_VAR 0 3
22403: PUSH
22404: LD_INT 1
22406: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22407: LD_ADDR_VAR 0 5
22411: PUSH
22412: LD_VAR 0 6
22416: PUSH
22417: LD_INT 1
22419: ARRAY
22420: PPUSH
22421: LD_VAR 0 3
22425: PPUSH
22426: CALL_OW 259
22430: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22431: LD_VAR 0 6
22435: PUSH
22436: LD_INT 1
22438: ARRAY
22439: PPUSH
22440: LD_VAR 0 2
22444: PPUSH
22445: LD_VAR 0 5
22449: PPUSH
22450: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22454: LD_VAR 0 6
22458: PUSH
22459: LD_INT 1
22461: ARRAY
22462: PPUSH
22463: LD_VAR 0 3
22467: PPUSH
22468: LD_VAR 0 4
22472: PPUSH
22473: CALL_OW 237
// end ;
22477: PPOPN 6
22479: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22480: LD_EXP 22
22484: PUSH
22485: LD_EXP 69
22489: AND
22490: IFFALSE 22569
22492: GO 22494
22494: DISABLE
22495: LD_INT 0
22497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22498: LD_ADDR_VAR 0 1
22502: PUSH
22503: LD_INT 22
22505: PUSH
22506: LD_OWVAR 2
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 30
22517: PUSH
22518: LD_INT 3
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PPUSH
22529: CALL_OW 69
22533: ST_TO_ADDR
// if not tmp then
22534: LD_VAR 0 1
22538: NOT
22539: IFFALSE 22543
// exit ;
22541: GO 22569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22543: LD_VAR 0 1
22547: PUSH
22548: LD_INT 1
22550: PPUSH
22551: LD_VAR 0 1
22555: PPUSH
22556: CALL_OW 12
22560: ARRAY
22561: PPUSH
22562: LD_INT 1
22564: PPUSH
22565: CALL_OW 234
// end ;
22569: PPOPN 1
22571: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22572: LD_EXP 22
22576: PUSH
22577: LD_EXP 70
22581: AND
22582: IFFALSE 22694
22584: GO 22586
22586: DISABLE
22587: LD_INT 0
22589: PPUSH
22590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22591: LD_ADDR_VAR 0 2
22595: PUSH
22596: LD_INT 22
22598: PUSH
22599: LD_OWVAR 2
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 2
22610: PUSH
22611: LD_INT 30
22613: PUSH
22614: LD_INT 27
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 30
22623: PUSH
22624: LD_INT 26
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 30
22633: PUSH
22634: LD_INT 28
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PPUSH
22651: CALL_OW 69
22655: ST_TO_ADDR
// if not tmp then
22656: LD_VAR 0 2
22660: NOT
22661: IFFALSE 22665
// exit ;
22663: GO 22694
// for i in tmp do
22665: LD_ADDR_VAR 0 1
22669: PUSH
22670: LD_VAR 0 2
22674: PUSH
22675: FOR_IN
22676: IFFALSE 22692
// SetLives ( i , 1 ) ;
22678: LD_VAR 0 1
22682: PPUSH
22683: LD_INT 1
22685: PPUSH
22686: CALL_OW 234
22690: GO 22675
22692: POP
22693: POP
// end ;
22694: PPOPN 2
22696: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22697: LD_EXP 22
22701: PUSH
22702: LD_EXP 71
22706: AND
22707: IFFALSE 22994
22709: GO 22711
22711: DISABLE
22712: LD_INT 0
22714: PPUSH
22715: PPUSH
22716: PPUSH
// begin i := rand ( 1 , 7 ) ;
22717: LD_ADDR_VAR 0 1
22721: PUSH
22722: LD_INT 1
22724: PPUSH
22725: LD_INT 7
22727: PPUSH
22728: CALL_OW 12
22732: ST_TO_ADDR
// case i of 1 :
22733: LD_VAR 0 1
22737: PUSH
22738: LD_INT 1
22740: DOUBLE
22741: EQUAL
22742: IFTRUE 22746
22744: GO 22756
22746: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22747: LD_STRING earthquake(getX(game), 0, 32)
22749: PPUSH
22750: CALL_OW 559
22754: GO 22994
22756: LD_INT 2
22758: DOUBLE
22759: EQUAL
22760: IFTRUE 22764
22762: GO 22778
22764: POP
// begin ToLua ( displayStucuk(); ) ;
22765: LD_STRING displayStucuk();
22767: PPUSH
22768: CALL_OW 559
// ResetFog ;
22772: CALL_OW 335
// end ; 3 :
22776: GO 22994
22778: LD_INT 3
22780: DOUBLE
22781: EQUAL
22782: IFTRUE 22786
22784: GO 22890
22786: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22787: LD_ADDR_VAR 0 2
22791: PUSH
22792: LD_INT 22
22794: PUSH
22795: LD_OWVAR 2
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 25
22806: PUSH
22807: LD_INT 1
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PPUSH
22818: CALL_OW 69
22822: ST_TO_ADDR
// if not tmp then
22823: LD_VAR 0 2
22827: NOT
22828: IFFALSE 22832
// exit ;
22830: GO 22994
// un := tmp [ rand ( 1 , tmp ) ] ;
22832: LD_ADDR_VAR 0 3
22836: PUSH
22837: LD_VAR 0 2
22841: PUSH
22842: LD_INT 1
22844: PPUSH
22845: LD_VAR 0 2
22849: PPUSH
22850: CALL_OW 12
22854: ARRAY
22855: ST_TO_ADDR
// if Crawls ( un ) then
22856: LD_VAR 0 3
22860: PPUSH
22861: CALL_OW 318
22865: IFFALSE 22876
// ComWalk ( un ) ;
22867: LD_VAR 0 3
22871: PPUSH
22872: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22876: LD_VAR 0 3
22880: PPUSH
22881: LD_INT 8
22883: PPUSH
22884: CALL_OW 336
// end ; 4 :
22888: GO 22994
22890: LD_INT 4
22892: DOUBLE
22893: EQUAL
22894: IFTRUE 22898
22896: GO 22972
22898: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_OWVAR 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 30
22918: PUSH
22919: LD_INT 29
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 69
22934: ST_TO_ADDR
// if not tmp then
22935: LD_VAR 0 2
22939: NOT
22940: IFFALSE 22944
// exit ;
22942: GO 22994
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22944: LD_VAR 0 2
22948: PUSH
22949: LD_INT 1
22951: ARRAY
22952: PPUSH
22953: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22957: LD_VAR 0 2
22961: PUSH
22962: LD_INT 1
22964: ARRAY
22965: PPUSH
22966: CALL_OW 65
// end ; 5 .. 7 :
22970: GO 22994
22972: LD_INT 5
22974: DOUBLE
22975: GREATEREQUAL
22976: IFFALSE 22984
22978: LD_INT 7
22980: DOUBLE
22981: LESSEQUAL
22982: IFTRUE 22986
22984: GO 22993
22986: POP
// StreamSibBomb ; end ;
22987: CALL 19231 0 0
22991: GO 22994
22993: POP
// end ;
22994: PPOPN 3
22996: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22997: LD_EXP 22
23001: PUSH
23002: LD_EXP 72
23006: AND
23007: IFFALSE 23163
23009: GO 23011
23011: DISABLE
23012: LD_INT 0
23014: PPUSH
23015: PPUSH
23016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23017: LD_ADDR_VAR 0 2
23021: PUSH
23022: LD_INT 81
23024: PUSH
23025: LD_OWVAR 2
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 2
23036: PUSH
23037: LD_INT 21
23039: PUSH
23040: LD_INT 1
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 21
23049: PUSH
23050: LD_INT 2
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PPUSH
23066: CALL_OW 69
23070: ST_TO_ADDR
// if not tmp then
23071: LD_VAR 0 2
23075: NOT
23076: IFFALSE 23080
// exit ;
23078: GO 23163
// p := 0 ;
23080: LD_ADDR_VAR 0 3
23084: PUSH
23085: LD_INT 0
23087: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23088: LD_INT 35
23090: PPUSH
23091: CALL_OW 67
// p := p + 1 ;
23095: LD_ADDR_VAR 0 3
23099: PUSH
23100: LD_VAR 0 3
23104: PUSH
23105: LD_INT 1
23107: PLUS
23108: ST_TO_ADDR
// for i in tmp do
23109: LD_ADDR_VAR 0 1
23113: PUSH
23114: LD_VAR 0 2
23118: PUSH
23119: FOR_IN
23120: IFFALSE 23151
// if GetLives ( i ) < 1000 then
23122: LD_VAR 0 1
23126: PPUSH
23127: CALL_OW 256
23131: PUSH
23132: LD_INT 1000
23134: LESS
23135: IFFALSE 23149
// SetLives ( i , 1000 ) ;
23137: LD_VAR 0 1
23141: PPUSH
23142: LD_INT 1000
23144: PPUSH
23145: CALL_OW 234
23149: GO 23119
23151: POP
23152: POP
// until p > 20 ;
23153: LD_VAR 0 3
23157: PUSH
23158: LD_INT 20
23160: GREATER
23161: IFFALSE 23088
// end ;
23163: PPOPN 3
23165: END
// every 0 0$1 trigger StreamModeActive and sTime do
23166: LD_EXP 22
23170: PUSH
23171: LD_EXP 73
23175: AND
23176: IFFALSE 23211
23178: GO 23180
23180: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23181: LD_INT 28
23183: PPUSH
23184: LD_OWVAR 2
23188: PPUSH
23189: LD_INT 2
23191: PPUSH
23192: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23196: LD_INT 30
23198: PPUSH
23199: LD_OWVAR 2
23203: PPUSH
23204: LD_INT 2
23206: PPUSH
23207: CALL_OW 322
// end ;
23211: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23212: LD_EXP 22
23216: PUSH
23217: LD_EXP 74
23221: AND
23222: IFFALSE 23343
23224: GO 23226
23226: DISABLE
23227: LD_INT 0
23229: PPUSH
23230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23231: LD_ADDR_VAR 0 2
23235: PUSH
23236: LD_INT 22
23238: PUSH
23239: LD_OWVAR 2
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 21
23250: PUSH
23251: LD_INT 1
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 3
23260: PUSH
23261: LD_INT 23
23263: PUSH
23264: LD_INT 0
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: PPUSH
23280: CALL_OW 69
23284: ST_TO_ADDR
// if not tmp then
23285: LD_VAR 0 2
23289: NOT
23290: IFFALSE 23294
// exit ;
23292: GO 23343
// for i in tmp do
23294: LD_ADDR_VAR 0 1
23298: PUSH
23299: LD_VAR 0 2
23303: PUSH
23304: FOR_IN
23305: IFFALSE 23341
// begin if Crawls ( i ) then
23307: LD_VAR 0 1
23311: PPUSH
23312: CALL_OW 318
23316: IFFALSE 23327
// ComWalk ( i ) ;
23318: LD_VAR 0 1
23322: PPUSH
23323: CALL_OW 138
// SetClass ( i , 2 ) ;
23327: LD_VAR 0 1
23331: PPUSH
23332: LD_INT 2
23334: PPUSH
23335: CALL_OW 336
// end ;
23339: GO 23304
23341: POP
23342: POP
// end ;
23343: PPOPN 2
23345: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23346: LD_EXP 22
23350: PUSH
23351: LD_EXP 75
23355: AND
23356: IFFALSE 23644
23358: GO 23360
23360: DISABLE
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
23365: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23366: LD_OWVAR 2
23370: PPUSH
23371: LD_INT 9
23373: PPUSH
23374: LD_INT 1
23376: PPUSH
23377: LD_INT 1
23379: PPUSH
23380: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23384: LD_INT 9
23386: PPUSH
23387: LD_OWVAR 2
23391: PPUSH
23392: CALL_OW 343
// uc_side := 9 ;
23396: LD_ADDR_OWVAR 20
23400: PUSH
23401: LD_INT 9
23403: ST_TO_ADDR
// uc_nation := 2 ;
23404: LD_ADDR_OWVAR 21
23408: PUSH
23409: LD_INT 2
23411: ST_TO_ADDR
// hc_name := Dark Warrior ;
23412: LD_ADDR_OWVAR 26
23416: PUSH
23417: LD_STRING Dark Warrior
23419: ST_TO_ADDR
// hc_gallery :=  ;
23420: LD_ADDR_OWVAR 33
23424: PUSH
23425: LD_STRING 
23427: ST_TO_ADDR
// hc_noskilllimit := true ;
23428: LD_ADDR_OWVAR 76
23432: PUSH
23433: LD_INT 1
23435: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23436: LD_ADDR_OWVAR 31
23440: PUSH
23441: LD_INT 30
23443: PUSH
23444: LD_INT 30
23446: PUSH
23447: LD_INT 30
23449: PUSH
23450: LD_INT 30
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: ST_TO_ADDR
// un := CreateHuman ;
23459: LD_ADDR_VAR 0 3
23463: PUSH
23464: CALL_OW 44
23468: ST_TO_ADDR
// hc_noskilllimit := false ;
23469: LD_ADDR_OWVAR 76
23473: PUSH
23474: LD_INT 0
23476: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23477: LD_VAR 0 3
23481: PPUSH
23482: LD_INT 1
23484: PPUSH
23485: CALL_OW 51
// ToLua ( playRanger() ) ;
23489: LD_STRING playRanger()
23491: PPUSH
23492: CALL_OW 559
// p := 0 ;
23496: LD_ADDR_VAR 0 2
23500: PUSH
23501: LD_INT 0
23503: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23504: LD_INT 35
23506: PPUSH
23507: CALL_OW 67
// p := p + 1 ;
23511: LD_ADDR_VAR 0 2
23515: PUSH
23516: LD_VAR 0 2
23520: PUSH
23521: LD_INT 1
23523: PLUS
23524: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23525: LD_VAR 0 3
23529: PPUSH
23530: CALL_OW 256
23534: PUSH
23535: LD_INT 1000
23537: LESS
23538: IFFALSE 23552
// SetLives ( un , 1000 ) ;
23540: LD_VAR 0 3
23544: PPUSH
23545: LD_INT 1000
23547: PPUSH
23548: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23552: LD_VAR 0 3
23556: PPUSH
23557: LD_INT 81
23559: PUSH
23560: LD_OWVAR 2
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 91
23571: PUSH
23572: LD_VAR 0 3
23576: PUSH
23577: LD_INT 30
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: LIST
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PPUSH
23589: CALL_OW 69
23593: PPUSH
23594: LD_VAR 0 3
23598: PPUSH
23599: CALL_OW 74
23603: PPUSH
23604: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23608: LD_VAR 0 2
23612: PUSH
23613: LD_INT 80
23615: GREATER
23616: PUSH
23617: LD_VAR 0 3
23621: PPUSH
23622: CALL_OW 301
23626: OR
23627: IFFALSE 23504
// if un then
23629: LD_VAR 0 3
23633: IFFALSE 23644
// RemoveUnit ( un ) ;
23635: LD_VAR 0 3
23639: PPUSH
23640: CALL_OW 64
// end ;
23644: PPOPN 3
23646: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23647: LD_EXP 76
23651: IFFALSE 23767
23653: GO 23655
23655: DISABLE
23656: LD_INT 0
23658: PPUSH
23659: PPUSH
23660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23661: LD_ADDR_VAR 0 2
23665: PUSH
23666: LD_INT 81
23668: PUSH
23669: LD_OWVAR 2
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 21
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PPUSH
23692: CALL_OW 69
23696: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23697: LD_STRING playComputer()
23699: PPUSH
23700: CALL_OW 559
// if not tmp then
23704: LD_VAR 0 2
23708: NOT
23709: IFFALSE 23713
// exit ;
23711: GO 23767
// for i in tmp do
23713: LD_ADDR_VAR 0 1
23717: PUSH
23718: LD_VAR 0 2
23722: PUSH
23723: FOR_IN
23724: IFFALSE 23765
// for j := 1 to 4 do
23726: LD_ADDR_VAR 0 3
23730: PUSH
23731: DOUBLE
23732: LD_INT 1
23734: DEC
23735: ST_TO_ADDR
23736: LD_INT 4
23738: PUSH
23739: FOR_TO
23740: IFFALSE 23761
// SetSkill ( i , j , 10 ) ;
23742: LD_VAR 0 1
23746: PPUSH
23747: LD_VAR 0 3
23751: PPUSH
23752: LD_INT 10
23754: PPUSH
23755: CALL_OW 237
23759: GO 23739
23761: POP
23762: POP
23763: GO 23723
23765: POP
23766: POP
// end ;
23767: PPOPN 3
23769: END
// every 0 0$1 trigger s30 do var i , tmp ;
23770: LD_EXP 77
23774: IFFALSE 23843
23776: GO 23778
23778: DISABLE
23779: LD_INT 0
23781: PPUSH
23782: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23783: LD_ADDR_VAR 0 2
23787: PUSH
23788: LD_INT 22
23790: PUSH
23791: LD_OWVAR 2
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PPUSH
23800: CALL_OW 69
23804: ST_TO_ADDR
// if not tmp then
23805: LD_VAR 0 2
23809: NOT
23810: IFFALSE 23814
// exit ;
23812: GO 23843
// for i in tmp do
23814: LD_ADDR_VAR 0 1
23818: PUSH
23819: LD_VAR 0 2
23823: PUSH
23824: FOR_IN
23825: IFFALSE 23841
// SetLives ( i , 300 ) ;
23827: LD_VAR 0 1
23831: PPUSH
23832: LD_INT 300
23834: PPUSH
23835: CALL_OW 234
23839: GO 23824
23841: POP
23842: POP
// end ;
23843: PPOPN 2
23845: END
// every 0 0$1 trigger s60 do var i , tmp ;
23846: LD_EXP 78
23850: IFFALSE 23919
23852: GO 23854
23854: DISABLE
23855: LD_INT 0
23857: PPUSH
23858: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23859: LD_ADDR_VAR 0 2
23863: PUSH
23864: LD_INT 22
23866: PUSH
23867: LD_OWVAR 2
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PPUSH
23876: CALL_OW 69
23880: ST_TO_ADDR
// if not tmp then
23881: LD_VAR 0 2
23885: NOT
23886: IFFALSE 23890
// exit ;
23888: GO 23919
// for i in tmp do
23890: LD_ADDR_VAR 0 1
23894: PUSH
23895: LD_VAR 0 2
23899: PUSH
23900: FOR_IN
23901: IFFALSE 23917
// SetLives ( i , 600 ) ;
23903: LD_VAR 0 1
23907: PPUSH
23908: LD_INT 600
23910: PPUSH
23911: CALL_OW 234
23915: GO 23900
23917: POP
23918: POP
// end ;
23919: PPOPN 2
23921: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23922: LD_INT 0
23924: PPUSH
// case cmd of 301 :
23925: LD_VAR 0 1
23929: PUSH
23930: LD_INT 301
23932: DOUBLE
23933: EQUAL
23934: IFTRUE 23938
23936: GO 23970
23938: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23939: LD_VAR 0 6
23943: PPUSH
23944: LD_VAR 0 7
23948: PPUSH
23949: LD_VAR 0 8
23953: PPUSH
23954: LD_VAR 0 4
23958: PPUSH
23959: LD_VAR 0 5
23963: PPUSH
23964: CALL 25179 0 5
23968: GO 24091
23970: LD_INT 302
23972: DOUBLE
23973: EQUAL
23974: IFTRUE 23978
23976: GO 24015
23978: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23979: LD_VAR 0 6
23983: PPUSH
23984: LD_VAR 0 7
23988: PPUSH
23989: LD_VAR 0 8
23993: PPUSH
23994: LD_VAR 0 9
23998: PPUSH
23999: LD_VAR 0 4
24003: PPUSH
24004: LD_VAR 0 5
24008: PPUSH
24009: CALL 25270 0 6
24013: GO 24091
24015: LD_INT 303
24017: DOUBLE
24018: EQUAL
24019: IFTRUE 24023
24021: GO 24060
24023: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24024: LD_VAR 0 6
24028: PPUSH
24029: LD_VAR 0 7
24033: PPUSH
24034: LD_VAR 0 8
24038: PPUSH
24039: LD_VAR 0 9
24043: PPUSH
24044: LD_VAR 0 4
24048: PPUSH
24049: LD_VAR 0 5
24053: PPUSH
24054: CALL 24096 0 6
24058: GO 24091
24060: LD_INT 304
24062: DOUBLE
24063: EQUAL
24064: IFTRUE 24068
24066: GO 24090
24068: POP
// hHackTeleport ( unit , x , y ) ; end ;
24069: LD_VAR 0 2
24073: PPUSH
24074: LD_VAR 0 4
24078: PPUSH
24079: LD_VAR 0 5
24083: PPUSH
24084: CALL 25863 0 3
24088: GO 24091
24090: POP
// end ;
24091: LD_VAR 0 12
24095: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24096: LD_INT 0
24098: PPUSH
24099: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24100: LD_VAR 0 1
24104: PUSH
24105: LD_INT 1
24107: LESS
24108: PUSH
24109: LD_VAR 0 1
24113: PUSH
24114: LD_INT 3
24116: GREATER
24117: OR
24118: PUSH
24119: LD_VAR 0 5
24123: PPUSH
24124: LD_VAR 0 6
24128: PPUSH
24129: CALL_OW 428
24133: OR
24134: IFFALSE 24138
// exit ;
24136: GO 24866
// uc_side := your_side ;
24138: LD_ADDR_OWVAR 20
24142: PUSH
24143: LD_OWVAR 2
24147: ST_TO_ADDR
// uc_nation := nation ;
24148: LD_ADDR_OWVAR 21
24152: PUSH
24153: LD_VAR 0 1
24157: ST_TO_ADDR
// bc_level = 1 ;
24158: LD_ADDR_OWVAR 43
24162: PUSH
24163: LD_INT 1
24165: ST_TO_ADDR
// case btype of 1 :
24166: LD_VAR 0 2
24170: PUSH
24171: LD_INT 1
24173: DOUBLE
24174: EQUAL
24175: IFTRUE 24179
24177: GO 24190
24179: POP
// bc_type := b_depot ; 2 :
24180: LD_ADDR_OWVAR 42
24184: PUSH
24185: LD_INT 0
24187: ST_TO_ADDR
24188: GO 24810
24190: LD_INT 2
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24209
24198: POP
// bc_type := b_warehouse ; 3 :
24199: LD_ADDR_OWVAR 42
24203: PUSH
24204: LD_INT 1
24206: ST_TO_ADDR
24207: GO 24810
24209: LD_INT 3
24211: DOUBLE
24212: EQUAL
24213: IFTRUE 24217
24215: GO 24228
24217: POP
// bc_type := b_lab ; 4 .. 9 :
24218: LD_ADDR_OWVAR 42
24222: PUSH
24223: LD_INT 6
24225: ST_TO_ADDR
24226: GO 24810
24228: LD_INT 4
24230: DOUBLE
24231: GREATEREQUAL
24232: IFFALSE 24240
24234: LD_INT 9
24236: DOUBLE
24237: LESSEQUAL
24238: IFTRUE 24242
24240: GO 24302
24242: POP
// begin bc_type := b_lab_half ;
24243: LD_ADDR_OWVAR 42
24247: PUSH
24248: LD_INT 7
24250: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24251: LD_ADDR_OWVAR 44
24255: PUSH
24256: LD_INT 10
24258: PUSH
24259: LD_INT 11
24261: PUSH
24262: LD_INT 12
24264: PUSH
24265: LD_INT 15
24267: PUSH
24268: LD_INT 14
24270: PUSH
24271: LD_INT 13
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: PUSH
24282: LD_VAR 0 2
24286: PUSH
24287: LD_INT 3
24289: MINUS
24290: ARRAY
24291: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24292: LD_ADDR_OWVAR 45
24296: PUSH
24297: LD_INT 9
24299: ST_TO_ADDR
// end ; 10 .. 13 :
24300: GO 24810
24302: LD_INT 10
24304: DOUBLE
24305: GREATEREQUAL
24306: IFFALSE 24314
24308: LD_INT 13
24310: DOUBLE
24311: LESSEQUAL
24312: IFTRUE 24316
24314: GO 24393
24316: POP
// begin bc_type := b_lab_full ;
24317: LD_ADDR_OWVAR 42
24321: PUSH
24322: LD_INT 8
24324: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24325: LD_ADDR_OWVAR 44
24329: PUSH
24330: LD_INT 10
24332: PUSH
24333: LD_INT 12
24335: PUSH
24336: LD_INT 14
24338: PUSH
24339: LD_INT 13
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: PUSH
24348: LD_VAR 0 2
24352: PUSH
24353: LD_INT 9
24355: MINUS
24356: ARRAY
24357: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24358: LD_ADDR_OWVAR 45
24362: PUSH
24363: LD_INT 11
24365: PUSH
24366: LD_INT 15
24368: PUSH
24369: LD_INT 12
24371: PUSH
24372: LD_INT 15
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: PUSH
24381: LD_VAR 0 2
24385: PUSH
24386: LD_INT 9
24388: MINUS
24389: ARRAY
24390: ST_TO_ADDR
// end ; 14 :
24391: GO 24810
24393: LD_INT 14
24395: DOUBLE
24396: EQUAL
24397: IFTRUE 24401
24399: GO 24412
24401: POP
// bc_type := b_workshop ; 15 :
24402: LD_ADDR_OWVAR 42
24406: PUSH
24407: LD_INT 2
24409: ST_TO_ADDR
24410: GO 24810
24412: LD_INT 15
24414: DOUBLE
24415: EQUAL
24416: IFTRUE 24420
24418: GO 24431
24420: POP
// bc_type := b_factory ; 16 :
24421: LD_ADDR_OWVAR 42
24425: PUSH
24426: LD_INT 3
24428: ST_TO_ADDR
24429: GO 24810
24431: LD_INT 16
24433: DOUBLE
24434: EQUAL
24435: IFTRUE 24439
24437: GO 24450
24439: POP
// bc_type := b_ext_gun ; 17 :
24440: LD_ADDR_OWVAR 42
24444: PUSH
24445: LD_INT 17
24447: ST_TO_ADDR
24448: GO 24810
24450: LD_INT 17
24452: DOUBLE
24453: EQUAL
24454: IFTRUE 24458
24456: GO 24486
24458: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24459: LD_ADDR_OWVAR 42
24463: PUSH
24464: LD_INT 19
24466: PUSH
24467: LD_INT 23
24469: PUSH
24470: LD_INT 19
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: LIST
24477: PUSH
24478: LD_VAR 0 1
24482: ARRAY
24483: ST_TO_ADDR
24484: GO 24810
24486: LD_INT 18
24488: DOUBLE
24489: EQUAL
24490: IFTRUE 24494
24492: GO 24505
24494: POP
// bc_type := b_ext_radar ; 19 :
24495: LD_ADDR_OWVAR 42
24499: PUSH
24500: LD_INT 20
24502: ST_TO_ADDR
24503: GO 24810
24505: LD_INT 19
24507: DOUBLE
24508: EQUAL
24509: IFTRUE 24513
24511: GO 24524
24513: POP
// bc_type := b_ext_radio ; 20 :
24514: LD_ADDR_OWVAR 42
24518: PUSH
24519: LD_INT 22
24521: ST_TO_ADDR
24522: GO 24810
24524: LD_INT 20
24526: DOUBLE
24527: EQUAL
24528: IFTRUE 24532
24530: GO 24543
24532: POP
// bc_type := b_ext_siberium ; 21 :
24533: LD_ADDR_OWVAR 42
24537: PUSH
24538: LD_INT 21
24540: ST_TO_ADDR
24541: GO 24810
24543: LD_INT 21
24545: DOUBLE
24546: EQUAL
24547: IFTRUE 24551
24549: GO 24562
24551: POP
// bc_type := b_ext_computer ; 22 :
24552: LD_ADDR_OWVAR 42
24556: PUSH
24557: LD_INT 24
24559: ST_TO_ADDR
24560: GO 24810
24562: LD_INT 22
24564: DOUBLE
24565: EQUAL
24566: IFTRUE 24570
24568: GO 24581
24570: POP
// bc_type := b_ext_track ; 23 :
24571: LD_ADDR_OWVAR 42
24575: PUSH
24576: LD_INT 16
24578: ST_TO_ADDR
24579: GO 24810
24581: LD_INT 23
24583: DOUBLE
24584: EQUAL
24585: IFTRUE 24589
24587: GO 24600
24589: POP
// bc_type := b_ext_laser ; 24 :
24590: LD_ADDR_OWVAR 42
24594: PUSH
24595: LD_INT 25
24597: ST_TO_ADDR
24598: GO 24810
24600: LD_INT 24
24602: DOUBLE
24603: EQUAL
24604: IFTRUE 24608
24606: GO 24619
24608: POP
// bc_type := b_control_tower ; 25 :
24609: LD_ADDR_OWVAR 42
24613: PUSH
24614: LD_INT 36
24616: ST_TO_ADDR
24617: GO 24810
24619: LD_INT 25
24621: DOUBLE
24622: EQUAL
24623: IFTRUE 24627
24625: GO 24638
24627: POP
// bc_type := b_breastwork ; 26 :
24628: LD_ADDR_OWVAR 42
24632: PUSH
24633: LD_INT 31
24635: ST_TO_ADDR
24636: GO 24810
24638: LD_INT 26
24640: DOUBLE
24641: EQUAL
24642: IFTRUE 24646
24644: GO 24657
24646: POP
// bc_type := b_bunker ; 27 :
24647: LD_ADDR_OWVAR 42
24651: PUSH
24652: LD_INT 32
24654: ST_TO_ADDR
24655: GO 24810
24657: LD_INT 27
24659: DOUBLE
24660: EQUAL
24661: IFTRUE 24665
24663: GO 24676
24665: POP
// bc_type := b_turret ; 28 :
24666: LD_ADDR_OWVAR 42
24670: PUSH
24671: LD_INT 33
24673: ST_TO_ADDR
24674: GO 24810
24676: LD_INT 28
24678: DOUBLE
24679: EQUAL
24680: IFTRUE 24684
24682: GO 24695
24684: POP
// bc_type := b_armoury ; 29 :
24685: LD_ADDR_OWVAR 42
24689: PUSH
24690: LD_INT 4
24692: ST_TO_ADDR
24693: GO 24810
24695: LD_INT 29
24697: DOUBLE
24698: EQUAL
24699: IFTRUE 24703
24701: GO 24714
24703: POP
// bc_type := b_barracks ; 30 :
24704: LD_ADDR_OWVAR 42
24708: PUSH
24709: LD_INT 5
24711: ST_TO_ADDR
24712: GO 24810
24714: LD_INT 30
24716: DOUBLE
24717: EQUAL
24718: IFTRUE 24722
24720: GO 24733
24722: POP
// bc_type := b_solar_power ; 31 :
24723: LD_ADDR_OWVAR 42
24727: PUSH
24728: LD_INT 27
24730: ST_TO_ADDR
24731: GO 24810
24733: LD_INT 31
24735: DOUBLE
24736: EQUAL
24737: IFTRUE 24741
24739: GO 24752
24741: POP
// bc_type := b_oil_power ; 32 :
24742: LD_ADDR_OWVAR 42
24746: PUSH
24747: LD_INT 26
24749: ST_TO_ADDR
24750: GO 24810
24752: LD_INT 32
24754: DOUBLE
24755: EQUAL
24756: IFTRUE 24760
24758: GO 24771
24760: POP
// bc_type := b_siberite_power ; 33 :
24761: LD_ADDR_OWVAR 42
24765: PUSH
24766: LD_INT 28
24768: ST_TO_ADDR
24769: GO 24810
24771: LD_INT 33
24773: DOUBLE
24774: EQUAL
24775: IFTRUE 24779
24777: GO 24790
24779: POP
// bc_type := b_oil_mine ; 34 :
24780: LD_ADDR_OWVAR 42
24784: PUSH
24785: LD_INT 29
24787: ST_TO_ADDR
24788: GO 24810
24790: LD_INT 34
24792: DOUBLE
24793: EQUAL
24794: IFTRUE 24798
24796: GO 24809
24798: POP
// bc_type := b_siberite_mine ; end ;
24799: LD_ADDR_OWVAR 42
24803: PUSH
24804: LD_INT 30
24806: ST_TO_ADDR
24807: GO 24810
24809: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24810: LD_ADDR_VAR 0 8
24814: PUSH
24815: LD_VAR 0 5
24819: PPUSH
24820: LD_VAR 0 6
24824: PPUSH
24825: LD_VAR 0 3
24829: PPUSH
24830: CALL_OW 47
24834: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24835: LD_OWVAR 42
24839: PUSH
24840: LD_INT 32
24842: PUSH
24843: LD_INT 33
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: IN
24850: IFFALSE 24866
// PlaceWeaponTurret ( b , weapon ) ;
24852: LD_VAR 0 8
24856: PPUSH
24857: LD_VAR 0 4
24861: PPUSH
24862: CALL_OW 431
// end ;
24866: LD_VAR 0 7
24870: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24871: LD_INT 0
24873: PPUSH
24874: PPUSH
24875: PPUSH
24876: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24877: LD_ADDR_VAR 0 4
24881: PUSH
24882: LD_INT 22
24884: PUSH
24885: LD_OWVAR 2
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 2
24896: PUSH
24897: LD_INT 30
24899: PUSH
24900: LD_INT 0
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 30
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: LIST
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PPUSH
24926: CALL_OW 69
24930: ST_TO_ADDR
// if not tmp then
24931: LD_VAR 0 4
24935: NOT
24936: IFFALSE 24940
// exit ;
24938: GO 24999
// for i in tmp do
24940: LD_ADDR_VAR 0 2
24944: PUSH
24945: LD_VAR 0 4
24949: PUSH
24950: FOR_IN
24951: IFFALSE 24997
// for j = 1 to 3 do
24953: LD_ADDR_VAR 0 3
24957: PUSH
24958: DOUBLE
24959: LD_INT 1
24961: DEC
24962: ST_TO_ADDR
24963: LD_INT 3
24965: PUSH
24966: FOR_TO
24967: IFFALSE 24993
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24969: LD_VAR 0 2
24973: PPUSH
24974: CALL_OW 274
24978: PPUSH
24979: LD_VAR 0 3
24983: PPUSH
24984: LD_INT 99999
24986: PPUSH
24987: CALL_OW 277
24991: GO 24966
24993: POP
24994: POP
24995: GO 24950
24997: POP
24998: POP
// end ;
24999: LD_VAR 0 1
25003: RET
// export function hHackSetLevel10 ; var i , j ; begin
25004: LD_INT 0
25006: PPUSH
25007: PPUSH
25008: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25009: LD_ADDR_VAR 0 2
25013: PUSH
25014: LD_INT 21
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PPUSH
25024: CALL_OW 69
25028: PUSH
25029: FOR_IN
25030: IFFALSE 25082
// if IsSelected ( i ) then
25032: LD_VAR 0 2
25036: PPUSH
25037: CALL_OW 306
25041: IFFALSE 25080
// begin for j := 1 to 4 do
25043: LD_ADDR_VAR 0 3
25047: PUSH
25048: DOUBLE
25049: LD_INT 1
25051: DEC
25052: ST_TO_ADDR
25053: LD_INT 4
25055: PUSH
25056: FOR_TO
25057: IFFALSE 25078
// SetSkill ( i , j , 10 ) ;
25059: LD_VAR 0 2
25063: PPUSH
25064: LD_VAR 0 3
25068: PPUSH
25069: LD_INT 10
25071: PPUSH
25072: CALL_OW 237
25076: GO 25056
25078: POP
25079: POP
// end ;
25080: GO 25029
25082: POP
25083: POP
// end ;
25084: LD_VAR 0 1
25088: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25089: LD_INT 0
25091: PPUSH
25092: PPUSH
25093: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25094: LD_ADDR_VAR 0 2
25098: PUSH
25099: LD_INT 22
25101: PUSH
25102: LD_OWVAR 2
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 21
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PPUSH
25125: CALL_OW 69
25129: PUSH
25130: FOR_IN
25131: IFFALSE 25172
// begin for j := 1 to 4 do
25133: LD_ADDR_VAR 0 3
25137: PUSH
25138: DOUBLE
25139: LD_INT 1
25141: DEC
25142: ST_TO_ADDR
25143: LD_INT 4
25145: PUSH
25146: FOR_TO
25147: IFFALSE 25168
// SetSkill ( i , j , 10 ) ;
25149: LD_VAR 0 2
25153: PPUSH
25154: LD_VAR 0 3
25158: PPUSH
25159: LD_INT 10
25161: PPUSH
25162: CALL_OW 237
25166: GO 25146
25168: POP
25169: POP
// end ;
25170: GO 25130
25172: POP
25173: POP
// end ;
25174: LD_VAR 0 1
25178: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25179: LD_INT 0
25181: PPUSH
// uc_side := your_side ;
25182: LD_ADDR_OWVAR 20
25186: PUSH
25187: LD_OWVAR 2
25191: ST_TO_ADDR
// uc_nation := nation ;
25192: LD_ADDR_OWVAR 21
25196: PUSH
25197: LD_VAR 0 1
25201: ST_TO_ADDR
// InitHc ;
25202: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25206: LD_INT 0
25208: PPUSH
25209: LD_VAR 0 2
25213: PPUSH
25214: LD_VAR 0 3
25218: PPUSH
25219: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25223: LD_VAR 0 4
25227: PPUSH
25228: LD_VAR 0 5
25232: PPUSH
25233: CALL_OW 428
25237: PUSH
25238: LD_INT 0
25240: EQUAL
25241: IFFALSE 25265
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25243: CALL_OW 44
25247: PPUSH
25248: LD_VAR 0 4
25252: PPUSH
25253: LD_VAR 0 5
25257: PPUSH
25258: LD_INT 1
25260: PPUSH
25261: CALL_OW 48
// end ;
25265: LD_VAR 0 6
25269: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25270: LD_INT 0
25272: PPUSH
25273: PPUSH
// uc_side := your_side ;
25274: LD_ADDR_OWVAR 20
25278: PUSH
25279: LD_OWVAR 2
25283: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25284: LD_VAR 0 1
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: LD_INT 2
25294: PUSH
25295: LD_INT 3
25297: PUSH
25298: LD_INT 4
25300: PUSH
25301: LD_INT 5
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: IN
25311: IFFALSE 25323
// uc_nation := nation_american else
25313: LD_ADDR_OWVAR 21
25317: PUSH
25318: LD_INT 1
25320: ST_TO_ADDR
25321: GO 25366
// if chassis in [ 11 , 12 , 13 , 14 ] then
25323: LD_VAR 0 1
25327: PUSH
25328: LD_INT 11
25330: PUSH
25331: LD_INT 12
25333: PUSH
25334: LD_INT 13
25336: PUSH
25337: LD_INT 14
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: IN
25346: IFFALSE 25358
// uc_nation := nation_arabian else
25348: LD_ADDR_OWVAR 21
25352: PUSH
25353: LD_INT 2
25355: ST_TO_ADDR
25356: GO 25366
// uc_nation := nation_russian ;
25358: LD_ADDR_OWVAR 21
25362: PUSH
25363: LD_INT 3
25365: ST_TO_ADDR
// vc_chassis := chassis ;
25366: LD_ADDR_OWVAR 37
25370: PUSH
25371: LD_VAR 0 1
25375: ST_TO_ADDR
// vc_engine := engine ;
25376: LD_ADDR_OWVAR 39
25380: PUSH
25381: LD_VAR 0 2
25385: ST_TO_ADDR
// vc_control := control ;
25386: LD_ADDR_OWVAR 38
25390: PUSH
25391: LD_VAR 0 3
25395: ST_TO_ADDR
// vc_weapon := weapon ;
25396: LD_ADDR_OWVAR 40
25400: PUSH
25401: LD_VAR 0 4
25405: ST_TO_ADDR
// un := CreateVehicle ;
25406: LD_ADDR_VAR 0 8
25410: PUSH
25411: CALL_OW 45
25415: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25416: LD_VAR 0 8
25420: PPUSH
25421: LD_INT 0
25423: PPUSH
25424: LD_INT 5
25426: PPUSH
25427: CALL_OW 12
25431: PPUSH
25432: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25436: LD_VAR 0 8
25440: PPUSH
25441: LD_VAR 0 5
25445: PPUSH
25446: LD_VAR 0 6
25450: PPUSH
25451: LD_INT 1
25453: PPUSH
25454: CALL_OW 48
// end ;
25458: LD_VAR 0 7
25462: RET
// export hInvincible ; every 1 do
25463: GO 25465
25465: DISABLE
// hInvincible := [ ] ;
25466: LD_ADDR_EXP 79
25470: PUSH
25471: EMPTY
25472: ST_TO_ADDR
25473: END
// every 10 do var i ;
25474: GO 25476
25476: DISABLE
25477: LD_INT 0
25479: PPUSH
// begin enable ;
25480: ENABLE
// if not hInvincible then
25481: LD_EXP 79
25485: NOT
25486: IFFALSE 25490
// exit ;
25488: GO 25534
// for i in hInvincible do
25490: LD_ADDR_VAR 0 1
25494: PUSH
25495: LD_EXP 79
25499: PUSH
25500: FOR_IN
25501: IFFALSE 25532
// if GetLives ( i ) < 1000 then
25503: LD_VAR 0 1
25507: PPUSH
25508: CALL_OW 256
25512: PUSH
25513: LD_INT 1000
25515: LESS
25516: IFFALSE 25530
// SetLives ( i , 1000 ) ;
25518: LD_VAR 0 1
25522: PPUSH
25523: LD_INT 1000
25525: PPUSH
25526: CALL_OW 234
25530: GO 25500
25532: POP
25533: POP
// end ;
25534: PPOPN 1
25536: END
// export function hHackInvincible ; var i ; begin
25537: LD_INT 0
25539: PPUSH
25540: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25541: LD_ADDR_VAR 0 2
25545: PUSH
25546: LD_INT 2
25548: PUSH
25549: LD_INT 21
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 21
25561: PUSH
25562: LD_INT 2
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: LIST
25573: PPUSH
25574: CALL_OW 69
25578: PUSH
25579: FOR_IN
25580: IFFALSE 25641
// if IsSelected ( i ) then
25582: LD_VAR 0 2
25586: PPUSH
25587: CALL_OW 306
25591: IFFALSE 25639
// begin if i in hInvincible then
25593: LD_VAR 0 2
25597: PUSH
25598: LD_EXP 79
25602: IN
25603: IFFALSE 25623
// hInvincible := hInvincible diff i else
25605: LD_ADDR_EXP 79
25609: PUSH
25610: LD_EXP 79
25614: PUSH
25615: LD_VAR 0 2
25619: DIFF
25620: ST_TO_ADDR
25621: GO 25639
// hInvincible := hInvincible union i ;
25623: LD_ADDR_EXP 79
25627: PUSH
25628: LD_EXP 79
25632: PUSH
25633: LD_VAR 0 2
25637: UNION
25638: ST_TO_ADDR
// end ;
25639: GO 25579
25641: POP
25642: POP
// end ;
25643: LD_VAR 0 1
25647: RET
// export function hHackInvisible ; var i , j ; begin
25648: LD_INT 0
25650: PPUSH
25651: PPUSH
25652: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25653: LD_ADDR_VAR 0 2
25657: PUSH
25658: LD_INT 21
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PPUSH
25668: CALL_OW 69
25672: PUSH
25673: FOR_IN
25674: IFFALSE 25698
// if IsSelected ( i ) then
25676: LD_VAR 0 2
25680: PPUSH
25681: CALL_OW 306
25685: IFFALSE 25696
// ComForceInvisible ( i ) ;
25687: LD_VAR 0 2
25691: PPUSH
25692: CALL_OW 496
25696: GO 25673
25698: POP
25699: POP
// end ;
25700: LD_VAR 0 1
25704: RET
// export function hHackChangeYourSide ; begin
25705: LD_INT 0
25707: PPUSH
// if your_side = 8 then
25708: LD_OWVAR 2
25712: PUSH
25713: LD_INT 8
25715: EQUAL
25716: IFFALSE 25728
// your_side := 0 else
25718: LD_ADDR_OWVAR 2
25722: PUSH
25723: LD_INT 0
25725: ST_TO_ADDR
25726: GO 25742
// your_side := your_side + 1 ;
25728: LD_ADDR_OWVAR 2
25732: PUSH
25733: LD_OWVAR 2
25737: PUSH
25738: LD_INT 1
25740: PLUS
25741: ST_TO_ADDR
// end ;
25742: LD_VAR 0 1
25746: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25747: LD_INT 0
25749: PPUSH
25750: PPUSH
25751: PPUSH
// for i in all_units do
25752: LD_ADDR_VAR 0 2
25756: PUSH
25757: LD_OWVAR 3
25761: PUSH
25762: FOR_IN
25763: IFFALSE 25841
// if IsSelected ( i ) then
25765: LD_VAR 0 2
25769: PPUSH
25770: CALL_OW 306
25774: IFFALSE 25839
// begin j := GetSide ( i ) ;
25776: LD_ADDR_VAR 0 3
25780: PUSH
25781: LD_VAR 0 2
25785: PPUSH
25786: CALL_OW 255
25790: ST_TO_ADDR
// if j = 8 then
25791: LD_VAR 0 3
25795: PUSH
25796: LD_INT 8
25798: EQUAL
25799: IFFALSE 25811
// j := 0 else
25801: LD_ADDR_VAR 0 3
25805: PUSH
25806: LD_INT 0
25808: ST_TO_ADDR
25809: GO 25825
// j := j + 1 ;
25811: LD_ADDR_VAR 0 3
25815: PUSH
25816: LD_VAR 0 3
25820: PUSH
25821: LD_INT 1
25823: PLUS
25824: ST_TO_ADDR
// SetSide ( i , j ) ;
25825: LD_VAR 0 2
25829: PPUSH
25830: LD_VAR 0 3
25834: PPUSH
25835: CALL_OW 235
// end ;
25839: GO 25762
25841: POP
25842: POP
// end ;
25843: LD_VAR 0 1
25847: RET
// export function hHackFog ; begin
25848: LD_INT 0
25850: PPUSH
// FogOff ( true ) ;
25851: LD_INT 1
25853: PPUSH
25854: CALL_OW 344
// end ;
25858: LD_VAR 0 1
25862: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25863: LD_INT 0
25865: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25866: LD_VAR 0 1
25870: PPUSH
25871: LD_VAR 0 2
25875: PPUSH
25876: LD_VAR 0 3
25880: PPUSH
25881: LD_INT 1
25883: PPUSH
25884: LD_INT 1
25886: PPUSH
25887: CALL_OW 483
// CenterOnXY ( x , y ) ;
25891: LD_VAR 0 2
25895: PPUSH
25896: LD_VAR 0 3
25900: PPUSH
25901: CALL_OW 84
// end ;
25905: LD_VAR 0 4
25909: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25910: LD_INT 0
25912: PPUSH
25913: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25914: LD_VAR 0 1
25918: NOT
25919: PUSH
25920: LD_VAR 0 2
25924: PPUSH
25925: LD_VAR 0 3
25929: PPUSH
25930: CALL_OW 488
25934: NOT
25935: OR
25936: PUSH
25937: LD_VAR 0 1
25941: PPUSH
25942: CALL_OW 266
25946: PUSH
25947: LD_INT 3
25949: NONEQUAL
25950: PUSH
25951: LD_VAR 0 1
25955: PPUSH
25956: CALL_OW 247
25960: PUSH
25961: LD_INT 1
25963: EQUAL
25964: NOT
25965: AND
25966: OR
25967: IFFALSE 25971
// exit ;
25969: GO 26120
// if GetType ( factory ) = unit_human then
25971: LD_VAR 0 1
25975: PPUSH
25976: CALL_OW 247
25980: PUSH
25981: LD_INT 1
25983: EQUAL
25984: IFFALSE 26001
// factory := IsInUnit ( factory ) ;
25986: LD_ADDR_VAR 0 1
25990: PUSH
25991: LD_VAR 0 1
25995: PPUSH
25996: CALL_OW 310
26000: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26001: LD_VAR 0 1
26005: PPUSH
26006: CALL_OW 266
26010: PUSH
26011: LD_INT 3
26013: NONEQUAL
26014: IFFALSE 26018
// exit ;
26016: GO 26120
// if HexInfo ( x , y ) = factory then
26018: LD_VAR 0 2
26022: PPUSH
26023: LD_VAR 0 3
26027: PPUSH
26028: CALL_OW 428
26032: PUSH
26033: LD_VAR 0 1
26037: EQUAL
26038: IFFALSE 26065
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26040: LD_ADDR_EXP 80
26044: PUSH
26045: LD_EXP 80
26049: PPUSH
26050: LD_VAR 0 1
26054: PPUSH
26055: LD_INT 0
26057: PPUSH
26058: CALL_OW 1
26062: ST_TO_ADDR
26063: GO 26116
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26065: LD_ADDR_EXP 80
26069: PUSH
26070: LD_EXP 80
26074: PPUSH
26075: LD_VAR 0 1
26079: PPUSH
26080: LD_VAR 0 1
26084: PPUSH
26085: CALL_OW 255
26089: PUSH
26090: LD_VAR 0 1
26094: PUSH
26095: LD_VAR 0 2
26099: PUSH
26100: LD_VAR 0 3
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: PPUSH
26111: CALL_OW 1
26115: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26116: CALL 26125 0 0
// end ;
26120: LD_VAR 0 4
26124: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26125: LD_INT 0
26127: PPUSH
26128: PPUSH
26129: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26130: LD_STRING resetFactoryWaypoint();
26132: PPUSH
26133: CALL_OW 559
// if factoryWaypoints then
26137: LD_EXP 80
26141: IFFALSE 26267
// begin list := PrepareArray ( factoryWaypoints ) ;
26143: LD_ADDR_VAR 0 3
26147: PUSH
26148: LD_EXP 80
26152: PPUSH
26153: CALL 72589 0 1
26157: ST_TO_ADDR
// for i := 1 to list do
26158: LD_ADDR_VAR 0 2
26162: PUSH
26163: DOUBLE
26164: LD_INT 1
26166: DEC
26167: ST_TO_ADDR
26168: LD_VAR 0 3
26172: PUSH
26173: FOR_TO
26174: IFFALSE 26265
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26176: LD_STRING setFactoryWaypointXY(
26178: PUSH
26179: LD_VAR 0 3
26183: PUSH
26184: LD_VAR 0 2
26188: ARRAY
26189: PUSH
26190: LD_INT 1
26192: ARRAY
26193: STR
26194: PUSH
26195: LD_STRING ,
26197: STR
26198: PUSH
26199: LD_VAR 0 3
26203: PUSH
26204: LD_VAR 0 2
26208: ARRAY
26209: PUSH
26210: LD_INT 2
26212: ARRAY
26213: STR
26214: PUSH
26215: LD_STRING ,
26217: STR
26218: PUSH
26219: LD_VAR 0 3
26223: PUSH
26224: LD_VAR 0 2
26228: ARRAY
26229: PUSH
26230: LD_INT 3
26232: ARRAY
26233: STR
26234: PUSH
26235: LD_STRING ,
26237: STR
26238: PUSH
26239: LD_VAR 0 3
26243: PUSH
26244: LD_VAR 0 2
26248: ARRAY
26249: PUSH
26250: LD_INT 4
26252: ARRAY
26253: STR
26254: PUSH
26255: LD_STRING )
26257: STR
26258: PPUSH
26259: CALL_OW 559
26263: GO 26173
26265: POP
26266: POP
// end ; end ;
26267: LD_VAR 0 1
26271: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26272: LD_INT 0
26274: PPUSH
// if HexInfo ( x , y ) = warehouse then
26275: LD_VAR 0 2
26279: PPUSH
26280: LD_VAR 0 3
26284: PPUSH
26285: CALL_OW 428
26289: PUSH
26290: LD_VAR 0 1
26294: EQUAL
26295: IFFALSE 26322
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26297: LD_ADDR_EXP 81
26301: PUSH
26302: LD_EXP 81
26306: PPUSH
26307: LD_VAR 0 1
26311: PPUSH
26312: LD_INT 0
26314: PPUSH
26315: CALL_OW 1
26319: ST_TO_ADDR
26320: GO 26373
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26322: LD_ADDR_EXP 81
26326: PUSH
26327: LD_EXP 81
26331: PPUSH
26332: LD_VAR 0 1
26336: PPUSH
26337: LD_VAR 0 1
26341: PPUSH
26342: CALL_OW 255
26346: PUSH
26347: LD_VAR 0 1
26351: PUSH
26352: LD_VAR 0 2
26356: PUSH
26357: LD_VAR 0 3
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: PPUSH
26368: CALL_OW 1
26372: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26373: CALL 26382 0 0
// end ;
26377: LD_VAR 0 4
26381: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26382: LD_INT 0
26384: PPUSH
26385: PPUSH
26386: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26387: LD_STRING resetWarehouseGatheringPoints();
26389: PPUSH
26390: CALL_OW 559
// if warehouseGatheringPoints then
26394: LD_EXP 81
26398: IFFALSE 26524
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26400: LD_ADDR_VAR 0 3
26404: PUSH
26405: LD_EXP 81
26409: PPUSH
26410: CALL 72589 0 1
26414: ST_TO_ADDR
// for i := 1 to list do
26415: LD_ADDR_VAR 0 2
26419: PUSH
26420: DOUBLE
26421: LD_INT 1
26423: DEC
26424: ST_TO_ADDR
26425: LD_VAR 0 3
26429: PUSH
26430: FOR_TO
26431: IFFALSE 26522
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26433: LD_STRING setWarehouseGatheringPointXY(
26435: PUSH
26436: LD_VAR 0 3
26440: PUSH
26441: LD_VAR 0 2
26445: ARRAY
26446: PUSH
26447: LD_INT 1
26449: ARRAY
26450: STR
26451: PUSH
26452: LD_STRING ,
26454: STR
26455: PUSH
26456: LD_VAR 0 3
26460: PUSH
26461: LD_VAR 0 2
26465: ARRAY
26466: PUSH
26467: LD_INT 2
26469: ARRAY
26470: STR
26471: PUSH
26472: LD_STRING ,
26474: STR
26475: PUSH
26476: LD_VAR 0 3
26480: PUSH
26481: LD_VAR 0 2
26485: ARRAY
26486: PUSH
26487: LD_INT 3
26489: ARRAY
26490: STR
26491: PUSH
26492: LD_STRING ,
26494: STR
26495: PUSH
26496: LD_VAR 0 3
26500: PUSH
26501: LD_VAR 0 2
26505: ARRAY
26506: PUSH
26507: LD_INT 4
26509: ARRAY
26510: STR
26511: PUSH
26512: LD_STRING )
26514: STR
26515: PPUSH
26516: CALL_OW 559
26520: GO 26430
26522: POP
26523: POP
// end ; end ;
26524: LD_VAR 0 1
26528: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26529: LD_EXP 81
26533: IFFALSE 27218
26535: GO 26537
26537: DISABLE
26538: LD_INT 0
26540: PPUSH
26541: PPUSH
26542: PPUSH
26543: PPUSH
26544: PPUSH
26545: PPUSH
26546: PPUSH
26547: PPUSH
26548: PPUSH
// begin enable ;
26549: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26550: LD_ADDR_VAR 0 3
26554: PUSH
26555: LD_EXP 81
26559: PPUSH
26560: CALL 72589 0 1
26564: ST_TO_ADDR
// if not list then
26565: LD_VAR 0 3
26569: NOT
26570: IFFALSE 26574
// exit ;
26572: GO 27218
// for i := 1 to list do
26574: LD_ADDR_VAR 0 1
26578: PUSH
26579: DOUBLE
26580: LD_INT 1
26582: DEC
26583: ST_TO_ADDR
26584: LD_VAR 0 3
26588: PUSH
26589: FOR_TO
26590: IFFALSE 27216
// begin depot := list [ i ] [ 2 ] ;
26592: LD_ADDR_VAR 0 8
26596: PUSH
26597: LD_VAR 0 3
26601: PUSH
26602: LD_VAR 0 1
26606: ARRAY
26607: PUSH
26608: LD_INT 2
26610: ARRAY
26611: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26612: LD_ADDR_VAR 0 5
26616: PUSH
26617: LD_VAR 0 3
26621: PUSH
26622: LD_VAR 0 1
26626: ARRAY
26627: PUSH
26628: LD_INT 1
26630: ARRAY
26631: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26632: LD_VAR 0 8
26636: PPUSH
26637: CALL_OW 301
26641: PUSH
26642: LD_VAR 0 5
26646: PUSH
26647: LD_VAR 0 8
26651: PPUSH
26652: CALL_OW 255
26656: NONEQUAL
26657: OR
26658: IFFALSE 26687
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26660: LD_ADDR_EXP 81
26664: PUSH
26665: LD_EXP 81
26669: PPUSH
26670: LD_VAR 0 8
26674: PPUSH
26675: LD_INT 0
26677: PPUSH
26678: CALL_OW 1
26682: ST_TO_ADDR
// exit ;
26683: POP
26684: POP
26685: GO 27218
// end ; x := list [ i ] [ 3 ] ;
26687: LD_ADDR_VAR 0 6
26691: PUSH
26692: LD_VAR 0 3
26696: PUSH
26697: LD_VAR 0 1
26701: ARRAY
26702: PUSH
26703: LD_INT 3
26705: ARRAY
26706: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26707: LD_ADDR_VAR 0 7
26711: PUSH
26712: LD_VAR 0 3
26716: PUSH
26717: LD_VAR 0 1
26721: ARRAY
26722: PUSH
26723: LD_INT 4
26725: ARRAY
26726: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26727: LD_ADDR_VAR 0 9
26731: PUSH
26732: LD_VAR 0 6
26736: PPUSH
26737: LD_VAR 0 7
26741: PPUSH
26742: LD_INT 16
26744: PPUSH
26745: CALL 71177 0 3
26749: ST_TO_ADDR
// if not cratesNearbyPoint then
26750: LD_VAR 0 9
26754: NOT
26755: IFFALSE 26761
// exit ;
26757: POP
26758: POP
26759: GO 27218
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26761: LD_ADDR_VAR 0 4
26765: PUSH
26766: LD_INT 22
26768: PUSH
26769: LD_VAR 0 5
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 3
26780: PUSH
26781: LD_INT 60
26783: PUSH
26784: EMPTY
26785: LIST
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 91
26793: PUSH
26794: LD_VAR 0 8
26798: PUSH
26799: LD_INT 6
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 2
26809: PUSH
26810: LD_INT 25
26812: PUSH
26813: LD_INT 2
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 25
26822: PUSH
26823: LD_INT 16
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: LIST
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: PPUSH
26841: CALL_OW 69
26845: PUSH
26846: LD_VAR 0 8
26850: PPUSH
26851: CALL_OW 313
26855: PPUSH
26856: LD_INT 3
26858: PUSH
26859: LD_INT 60
26861: PUSH
26862: EMPTY
26863: LIST
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: LD_INT 25
26874: PUSH
26875: LD_INT 2
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 25
26884: PUSH
26885: LD_INT 16
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PPUSH
26901: CALL_OW 72
26905: UNION
26906: ST_TO_ADDR
// if tmp then
26907: LD_VAR 0 4
26911: IFFALSE 26991
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26913: LD_ADDR_VAR 0 4
26917: PUSH
26918: LD_VAR 0 4
26922: PPUSH
26923: LD_INT 3
26925: PPUSH
26926: CALL 69146 0 2
26930: ST_TO_ADDR
// for j in tmp do
26931: LD_ADDR_VAR 0 2
26935: PUSH
26936: LD_VAR 0 4
26940: PUSH
26941: FOR_IN
26942: IFFALSE 26985
// begin if IsInUnit ( j ) then
26944: LD_VAR 0 2
26948: PPUSH
26949: CALL_OW 310
26953: IFFALSE 26964
// ComExit ( j ) ;
26955: LD_VAR 0 2
26959: PPUSH
26960: CALL 69229 0 1
// AddComCollect ( j , x , y ) ;
26964: LD_VAR 0 2
26968: PPUSH
26969: LD_VAR 0 6
26973: PPUSH
26974: LD_VAR 0 7
26978: PPUSH
26979: CALL_OW 177
// end ;
26983: GO 26941
26985: POP
26986: POP
// exit ;
26987: POP
26988: POP
26989: GO 27218
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26991: LD_ADDR_VAR 0 4
26995: PUSH
26996: LD_INT 22
26998: PUSH
26999: LD_VAR 0 5
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 91
27010: PUSH
27011: LD_VAR 0 8
27015: PUSH
27016: LD_INT 8
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 2
27026: PUSH
27027: LD_INT 34
27029: PUSH
27030: LD_INT 12
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 34
27039: PUSH
27040: LD_INT 51
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 34
27049: PUSH
27050: LD_INT 32
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 34
27059: PUSH
27060: LD_INT 89
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: LIST
27078: PPUSH
27079: CALL_OW 69
27083: ST_TO_ADDR
// if tmp then
27084: LD_VAR 0 4
27088: IFFALSE 27214
// begin for j in tmp do
27090: LD_ADDR_VAR 0 2
27094: PUSH
27095: LD_VAR 0 4
27099: PUSH
27100: FOR_IN
27101: IFFALSE 27212
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27103: LD_VAR 0 2
27107: PPUSH
27108: CALL_OW 262
27112: PUSH
27113: LD_INT 3
27115: EQUAL
27116: PUSH
27117: LD_VAR 0 2
27121: PPUSH
27122: CALL_OW 261
27126: PUSH
27127: LD_INT 20
27129: GREATER
27130: OR
27131: PUSH
27132: LD_VAR 0 2
27136: PPUSH
27137: CALL_OW 314
27141: NOT
27142: AND
27143: PUSH
27144: LD_VAR 0 2
27148: PPUSH
27149: CALL_OW 263
27153: PUSH
27154: LD_INT 1
27156: NONEQUAL
27157: PUSH
27158: LD_VAR 0 2
27162: PPUSH
27163: CALL_OW 311
27167: OR
27168: AND
27169: IFFALSE 27210
// begin ComCollect ( j , x , y ) ;
27171: LD_VAR 0 2
27175: PPUSH
27176: LD_VAR 0 6
27180: PPUSH
27181: LD_VAR 0 7
27185: PPUSH
27186: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27190: LD_VAR 0 2
27194: PPUSH
27195: LD_VAR 0 8
27199: PPUSH
27200: CALL_OW 172
// exit ;
27204: POP
27205: POP
27206: POP
27207: POP
27208: GO 27218
// end ;
27210: GO 27100
27212: POP
27213: POP
// end ; end ;
27214: GO 26589
27216: POP
27217: POP
// end ; end_of_file
27218: PPOPN 9
27220: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27221: LD_INT 0
27223: PPUSH
27224: PPUSH
27225: PPUSH
27226: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27227: LD_VAR 0 1
27231: PPUSH
27232: CALL_OW 264
27236: PUSH
27237: LD_INT 91
27239: EQUAL
27240: IFFALSE 27312
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27242: LD_INT 68
27244: PPUSH
27245: LD_VAR 0 1
27249: PPUSH
27250: CALL_OW 255
27254: PPUSH
27255: CALL_OW 321
27259: PUSH
27260: LD_INT 2
27262: EQUAL
27263: IFFALSE 27275
// eff := 70 else
27265: LD_ADDR_VAR 0 4
27269: PUSH
27270: LD_INT 70
27272: ST_TO_ADDR
27273: GO 27283
// eff := 30 ;
27275: LD_ADDR_VAR 0 4
27279: PUSH
27280: LD_INT 30
27282: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27283: LD_VAR 0 1
27287: PPUSH
27288: CALL_OW 250
27292: PPUSH
27293: LD_VAR 0 1
27297: PPUSH
27298: CALL_OW 251
27302: PPUSH
27303: LD_VAR 0 4
27307: PPUSH
27308: CALL_OW 495
// end ; end ;
27312: LD_VAR 0 2
27316: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27317: LD_INT 0
27319: PPUSH
// end ;
27320: LD_VAR 0 4
27324: RET
// export function SOS_Command ( cmd ) ; begin
27325: LD_INT 0
27327: PPUSH
// end ;
27328: LD_VAR 0 2
27332: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27333: LD_INT 0
27335: PPUSH
// end ;
27336: LD_VAR 0 6
27340: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27341: LD_INT 0
27343: PPUSH
27344: PPUSH
// if not vehicle or not factory then
27345: LD_VAR 0 1
27349: NOT
27350: PUSH
27351: LD_VAR 0 2
27355: NOT
27356: OR
27357: IFFALSE 27361
// exit ;
27359: GO 27592
// if factoryWaypoints >= factory then
27361: LD_EXP 80
27365: PUSH
27366: LD_VAR 0 2
27370: GREATEREQUAL
27371: IFFALSE 27592
// if factoryWaypoints [ factory ] then
27373: LD_EXP 80
27377: PUSH
27378: LD_VAR 0 2
27382: ARRAY
27383: IFFALSE 27592
// begin if GetControl ( vehicle ) = control_manual then
27385: LD_VAR 0 1
27389: PPUSH
27390: CALL_OW 263
27394: PUSH
27395: LD_INT 1
27397: EQUAL
27398: IFFALSE 27479
// begin driver := IsDrivenBy ( vehicle ) ;
27400: LD_ADDR_VAR 0 4
27404: PUSH
27405: LD_VAR 0 1
27409: PPUSH
27410: CALL_OW 311
27414: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27415: LD_VAR 0 4
27419: PPUSH
27420: LD_EXP 80
27424: PUSH
27425: LD_VAR 0 2
27429: ARRAY
27430: PUSH
27431: LD_INT 3
27433: ARRAY
27434: PPUSH
27435: LD_EXP 80
27439: PUSH
27440: LD_VAR 0 2
27444: ARRAY
27445: PUSH
27446: LD_INT 4
27448: ARRAY
27449: PPUSH
27450: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27454: LD_VAR 0 4
27458: PPUSH
27459: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27463: LD_VAR 0 4
27467: PPUSH
27468: LD_VAR 0 2
27472: PPUSH
27473: CALL_OW 180
// end else
27477: GO 27592
// if GetControl ( vehicle ) = control_remote then
27479: LD_VAR 0 1
27483: PPUSH
27484: CALL_OW 263
27488: PUSH
27489: LD_INT 2
27491: EQUAL
27492: IFFALSE 27553
// begin wait ( 0 0$2 ) ;
27494: LD_INT 70
27496: PPUSH
27497: CALL_OW 67
// if Connect ( vehicle ) then
27501: LD_VAR 0 1
27505: PPUSH
27506: CALL 39450 0 1
27510: IFFALSE 27551
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27512: LD_VAR 0 1
27516: PPUSH
27517: LD_EXP 80
27521: PUSH
27522: LD_VAR 0 2
27526: ARRAY
27527: PUSH
27528: LD_INT 3
27530: ARRAY
27531: PPUSH
27532: LD_EXP 80
27536: PUSH
27537: LD_VAR 0 2
27541: ARRAY
27542: PUSH
27543: LD_INT 4
27545: ARRAY
27546: PPUSH
27547: CALL_OW 171
// end else
27551: GO 27592
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27553: LD_VAR 0 1
27557: PPUSH
27558: LD_EXP 80
27562: PUSH
27563: LD_VAR 0 2
27567: ARRAY
27568: PUSH
27569: LD_INT 3
27571: ARRAY
27572: PPUSH
27573: LD_EXP 80
27577: PUSH
27578: LD_VAR 0 2
27582: ARRAY
27583: PUSH
27584: LD_INT 4
27586: ARRAY
27587: PPUSH
27588: CALL_OW 171
// end ; end ;
27592: LD_VAR 0 3
27596: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27597: LD_INT 0
27599: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27600: LD_VAR 0 1
27604: PUSH
27605: LD_INT 250
27607: EQUAL
27608: PUSH
27609: LD_VAR 0 2
27613: PPUSH
27614: CALL_OW 264
27618: PUSH
27619: LD_INT 81
27621: EQUAL
27622: AND
27623: IFFALSE 27644
// MinerPlaceMine ( unit , x , y ) ;
27625: LD_VAR 0 2
27629: PPUSH
27630: LD_VAR 0 4
27634: PPUSH
27635: LD_VAR 0 5
27639: PPUSH
27640: CALL 30029 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27644: LD_VAR 0 1
27648: PUSH
27649: LD_INT 251
27651: EQUAL
27652: PUSH
27653: LD_VAR 0 2
27657: PPUSH
27658: CALL_OW 264
27662: PUSH
27663: LD_INT 81
27665: EQUAL
27666: AND
27667: IFFALSE 27688
// MinerDetonateMine ( unit , x , y ) ;
27669: LD_VAR 0 2
27673: PPUSH
27674: LD_VAR 0 4
27678: PPUSH
27679: LD_VAR 0 5
27683: PPUSH
27684: CALL 30304 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27688: LD_VAR 0 1
27692: PUSH
27693: LD_INT 252
27695: EQUAL
27696: PUSH
27697: LD_VAR 0 2
27701: PPUSH
27702: CALL_OW 264
27706: PUSH
27707: LD_INT 81
27709: EQUAL
27710: AND
27711: IFFALSE 27732
// MinerCreateMinefield ( unit , x , y ) ;
27713: LD_VAR 0 2
27717: PPUSH
27718: LD_VAR 0 4
27722: PPUSH
27723: LD_VAR 0 5
27727: PPUSH
27728: CALL 30721 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27732: LD_VAR 0 1
27736: PUSH
27737: LD_INT 253
27739: EQUAL
27740: PUSH
27741: LD_VAR 0 2
27745: PPUSH
27746: CALL_OW 257
27750: PUSH
27751: LD_INT 5
27753: EQUAL
27754: AND
27755: IFFALSE 27776
// ComBinocular ( unit , x , y ) ;
27757: LD_VAR 0 2
27761: PPUSH
27762: LD_VAR 0 4
27766: PPUSH
27767: LD_VAR 0 5
27771: PPUSH
27772: CALL 31090 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27776: LD_VAR 0 1
27780: PUSH
27781: LD_INT 254
27783: EQUAL
27784: PUSH
27785: LD_VAR 0 2
27789: PPUSH
27790: CALL_OW 264
27794: PUSH
27795: LD_INT 99
27797: EQUAL
27798: AND
27799: PUSH
27800: LD_VAR 0 3
27804: PPUSH
27805: CALL_OW 263
27809: PUSH
27810: LD_INT 3
27812: EQUAL
27813: AND
27814: IFFALSE 27830
// HackDestroyVehicle ( unit , selectedUnit ) ;
27816: LD_VAR 0 2
27820: PPUSH
27821: LD_VAR 0 3
27825: PPUSH
27826: CALL 29393 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27830: LD_VAR 0 1
27834: PUSH
27835: LD_INT 255
27837: EQUAL
27838: PUSH
27839: LD_VAR 0 2
27843: PPUSH
27844: CALL_OW 264
27848: PUSH
27849: LD_INT 14
27851: PUSH
27852: LD_INT 53
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: IN
27859: AND
27860: PUSH
27861: LD_VAR 0 4
27865: PPUSH
27866: LD_VAR 0 5
27870: PPUSH
27871: CALL_OW 488
27875: AND
27876: IFFALSE 27900
// CutTreeXYR ( unit , x , y , 12 ) ;
27878: LD_VAR 0 2
27882: PPUSH
27883: LD_VAR 0 4
27887: PPUSH
27888: LD_VAR 0 5
27892: PPUSH
27893: LD_INT 12
27895: PPUSH
27896: CALL 27963 0 4
// if cmd = 256 then
27900: LD_VAR 0 1
27904: PUSH
27905: LD_INT 256
27907: EQUAL
27908: IFFALSE 27929
// SetFactoryWaypoint ( unit , x , y ) ;
27910: LD_VAR 0 2
27914: PPUSH
27915: LD_VAR 0 4
27919: PPUSH
27920: LD_VAR 0 5
27924: PPUSH
27925: CALL 25910 0 3
// if cmd = 257 then
27929: LD_VAR 0 1
27933: PUSH
27934: LD_INT 257
27936: EQUAL
27937: IFFALSE 27958
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27939: LD_VAR 0 2
27943: PPUSH
27944: LD_VAR 0 4
27948: PPUSH
27949: LD_VAR 0 5
27953: PPUSH
27954: CALL 26272 0 3
// end ;
27958: LD_VAR 0 6
27962: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27963: LD_INT 0
27965: PPUSH
27966: PPUSH
27967: PPUSH
27968: PPUSH
27969: PPUSH
27970: PPUSH
27971: PPUSH
27972: PPUSH
27973: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27974: LD_VAR 0 1
27978: NOT
27979: PUSH
27980: LD_VAR 0 2
27984: PPUSH
27985: LD_VAR 0 3
27989: PPUSH
27990: CALL_OW 488
27994: NOT
27995: OR
27996: PUSH
27997: LD_VAR 0 4
28001: NOT
28002: OR
28003: IFFALSE 28007
// exit ;
28005: GO 28347
// list := [ ] ;
28007: LD_ADDR_VAR 0 13
28011: PUSH
28012: EMPTY
28013: ST_TO_ADDR
// if x - r < 0 then
28014: LD_VAR 0 2
28018: PUSH
28019: LD_VAR 0 4
28023: MINUS
28024: PUSH
28025: LD_INT 0
28027: LESS
28028: IFFALSE 28040
// min_x := 0 else
28030: LD_ADDR_VAR 0 7
28034: PUSH
28035: LD_INT 0
28037: ST_TO_ADDR
28038: GO 28056
// min_x := x - r ;
28040: LD_ADDR_VAR 0 7
28044: PUSH
28045: LD_VAR 0 2
28049: PUSH
28050: LD_VAR 0 4
28054: MINUS
28055: ST_TO_ADDR
// if y - r < 0 then
28056: LD_VAR 0 3
28060: PUSH
28061: LD_VAR 0 4
28065: MINUS
28066: PUSH
28067: LD_INT 0
28069: LESS
28070: IFFALSE 28082
// min_y := 0 else
28072: LD_ADDR_VAR 0 8
28076: PUSH
28077: LD_INT 0
28079: ST_TO_ADDR
28080: GO 28098
// min_y := y - r ;
28082: LD_ADDR_VAR 0 8
28086: PUSH
28087: LD_VAR 0 3
28091: PUSH
28092: LD_VAR 0 4
28096: MINUS
28097: ST_TO_ADDR
// max_x := x + r ;
28098: LD_ADDR_VAR 0 9
28102: PUSH
28103: LD_VAR 0 2
28107: PUSH
28108: LD_VAR 0 4
28112: PLUS
28113: ST_TO_ADDR
// max_y := y + r ;
28114: LD_ADDR_VAR 0 10
28118: PUSH
28119: LD_VAR 0 3
28123: PUSH
28124: LD_VAR 0 4
28128: PLUS
28129: ST_TO_ADDR
// for _x = min_x to max_x do
28130: LD_ADDR_VAR 0 11
28134: PUSH
28135: DOUBLE
28136: LD_VAR 0 7
28140: DEC
28141: ST_TO_ADDR
28142: LD_VAR 0 9
28146: PUSH
28147: FOR_TO
28148: IFFALSE 28265
// for _y = min_y to max_y do
28150: LD_ADDR_VAR 0 12
28154: PUSH
28155: DOUBLE
28156: LD_VAR 0 8
28160: DEC
28161: ST_TO_ADDR
28162: LD_VAR 0 10
28166: PUSH
28167: FOR_TO
28168: IFFALSE 28261
// begin if not ValidHex ( _x , _y ) then
28170: LD_VAR 0 11
28174: PPUSH
28175: LD_VAR 0 12
28179: PPUSH
28180: CALL_OW 488
28184: NOT
28185: IFFALSE 28189
// continue ;
28187: GO 28167
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28189: LD_VAR 0 11
28193: PPUSH
28194: LD_VAR 0 12
28198: PPUSH
28199: CALL_OW 351
28203: PUSH
28204: LD_VAR 0 11
28208: PPUSH
28209: LD_VAR 0 12
28213: PPUSH
28214: CALL_OW 554
28218: AND
28219: IFFALSE 28259
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28221: LD_ADDR_VAR 0 13
28225: PUSH
28226: LD_VAR 0 13
28230: PPUSH
28231: LD_VAR 0 13
28235: PUSH
28236: LD_INT 1
28238: PLUS
28239: PPUSH
28240: LD_VAR 0 11
28244: PUSH
28245: LD_VAR 0 12
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PPUSH
28254: CALL_OW 2
28258: ST_TO_ADDR
// end ;
28259: GO 28167
28261: POP
28262: POP
28263: GO 28147
28265: POP
28266: POP
// if not list then
28267: LD_VAR 0 13
28271: NOT
28272: IFFALSE 28276
// exit ;
28274: GO 28347
// for i in list do
28276: LD_ADDR_VAR 0 6
28280: PUSH
28281: LD_VAR 0 13
28285: PUSH
28286: FOR_IN
28287: IFFALSE 28345
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28289: LD_VAR 0 1
28293: PPUSH
28294: LD_STRING M
28296: PUSH
28297: LD_VAR 0 6
28301: PUSH
28302: LD_INT 1
28304: ARRAY
28305: PUSH
28306: LD_VAR 0 6
28310: PUSH
28311: LD_INT 2
28313: ARRAY
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: PUSH
28336: EMPTY
28337: LIST
28338: PPUSH
28339: CALL_OW 447
28343: GO 28286
28345: POP
28346: POP
// end ;
28347: LD_VAR 0 5
28351: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28352: LD_EXP 83
28356: NOT
28357: IFFALSE 28407
28359: GO 28361
28361: DISABLE
// begin initHack := true ;
28362: LD_ADDR_EXP 83
28366: PUSH
28367: LD_INT 1
28369: ST_TO_ADDR
// hackTanks := [ ] ;
28370: LD_ADDR_EXP 84
28374: PUSH
28375: EMPTY
28376: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28377: LD_ADDR_EXP 85
28381: PUSH
28382: EMPTY
28383: ST_TO_ADDR
// hackLimit := 3 ;
28384: LD_ADDR_EXP 86
28388: PUSH
28389: LD_INT 3
28391: ST_TO_ADDR
// hackDist := 12 ;
28392: LD_ADDR_EXP 87
28396: PUSH
28397: LD_INT 12
28399: ST_TO_ADDR
// hackCounter := [ ] ;
28400: LD_ADDR_EXP 88
28404: PUSH
28405: EMPTY
28406: ST_TO_ADDR
// end ;
28407: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28408: LD_EXP 83
28412: PUSH
28413: LD_INT 34
28415: PUSH
28416: LD_INT 99
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PPUSH
28423: CALL_OW 69
28427: AND
28428: IFFALSE 28681
28430: GO 28432
28432: DISABLE
28433: LD_INT 0
28435: PPUSH
28436: PPUSH
// begin enable ;
28437: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28438: LD_ADDR_VAR 0 1
28442: PUSH
28443: LD_INT 34
28445: PUSH
28446: LD_INT 99
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PPUSH
28453: CALL_OW 69
28457: PUSH
28458: FOR_IN
28459: IFFALSE 28679
// begin if not i in hackTanks then
28461: LD_VAR 0 1
28465: PUSH
28466: LD_EXP 84
28470: IN
28471: NOT
28472: IFFALSE 28555
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28474: LD_ADDR_EXP 84
28478: PUSH
28479: LD_EXP 84
28483: PPUSH
28484: LD_EXP 84
28488: PUSH
28489: LD_INT 1
28491: PLUS
28492: PPUSH
28493: LD_VAR 0 1
28497: PPUSH
28498: CALL_OW 1
28502: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28503: LD_ADDR_EXP 85
28507: PUSH
28508: LD_EXP 85
28512: PPUSH
28513: LD_EXP 85
28517: PUSH
28518: LD_INT 1
28520: PLUS
28521: PPUSH
28522: EMPTY
28523: PPUSH
28524: CALL_OW 1
28528: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28529: LD_ADDR_EXP 88
28533: PUSH
28534: LD_EXP 88
28538: PPUSH
28539: LD_EXP 88
28543: PUSH
28544: LD_INT 1
28546: PLUS
28547: PPUSH
28548: EMPTY
28549: PPUSH
28550: CALL_OW 1
28554: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28555: LD_VAR 0 1
28559: PPUSH
28560: CALL_OW 302
28564: NOT
28565: IFFALSE 28578
// begin HackUnlinkAll ( i ) ;
28567: LD_VAR 0 1
28571: PPUSH
28572: CALL 28684 0 1
// continue ;
28576: GO 28458
// end ; HackCheckCapturedStatus ( i ) ;
28578: LD_VAR 0 1
28582: PPUSH
28583: CALL 29127 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28587: LD_ADDR_VAR 0 2
28591: PUSH
28592: LD_INT 81
28594: PUSH
28595: LD_VAR 0 1
28599: PPUSH
28600: CALL_OW 255
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 33
28611: PUSH
28612: LD_INT 3
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 91
28621: PUSH
28622: LD_VAR 0 1
28626: PUSH
28627: LD_EXP 87
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 50
28639: PUSH
28640: EMPTY
28641: LIST
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: PPUSH
28649: CALL_OW 69
28653: ST_TO_ADDR
// if not tmp then
28654: LD_VAR 0 2
28658: NOT
28659: IFFALSE 28663
// continue ;
28661: GO 28458
// HackLink ( i , tmp ) ;
28663: LD_VAR 0 1
28667: PPUSH
28668: LD_VAR 0 2
28672: PPUSH
28673: CALL 28820 0 2
// end ;
28677: GO 28458
28679: POP
28680: POP
// end ;
28681: PPOPN 2
28683: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28684: LD_INT 0
28686: PPUSH
28687: PPUSH
28688: PPUSH
// if not hack in hackTanks then
28689: LD_VAR 0 1
28693: PUSH
28694: LD_EXP 84
28698: IN
28699: NOT
28700: IFFALSE 28704
// exit ;
28702: GO 28815
// index := GetElementIndex ( hackTanks , hack ) ;
28704: LD_ADDR_VAR 0 4
28708: PUSH
28709: LD_EXP 84
28713: PPUSH
28714: LD_VAR 0 1
28718: PPUSH
28719: CALL 36257 0 2
28723: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28724: LD_EXP 85
28728: PUSH
28729: LD_VAR 0 4
28733: ARRAY
28734: IFFALSE 28815
// begin for i in hackTanksCaptured [ index ] do
28736: LD_ADDR_VAR 0 3
28740: PUSH
28741: LD_EXP 85
28745: PUSH
28746: LD_VAR 0 4
28750: ARRAY
28751: PUSH
28752: FOR_IN
28753: IFFALSE 28779
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28755: LD_VAR 0 3
28759: PUSH
28760: LD_INT 1
28762: ARRAY
28763: PPUSH
28764: LD_VAR 0 3
28768: PUSH
28769: LD_INT 2
28771: ARRAY
28772: PPUSH
28773: CALL_OW 235
28777: GO 28752
28779: POP
28780: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28781: LD_ADDR_EXP 85
28785: PUSH
28786: LD_EXP 85
28790: PPUSH
28791: LD_VAR 0 4
28795: PPUSH
28796: EMPTY
28797: PPUSH
28798: CALL_OW 1
28802: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28803: LD_VAR 0 1
28807: PPUSH
28808: LD_INT 0
28810: PPUSH
28811: CALL_OW 505
// end ; end ;
28815: LD_VAR 0 2
28819: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28820: LD_INT 0
28822: PPUSH
28823: PPUSH
28824: PPUSH
// if not hack in hackTanks or not vehicles then
28825: LD_VAR 0 1
28829: PUSH
28830: LD_EXP 84
28834: IN
28835: NOT
28836: PUSH
28837: LD_VAR 0 2
28841: NOT
28842: OR
28843: IFFALSE 28847
// exit ;
28845: GO 29122
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28847: LD_ADDR_VAR 0 2
28851: PUSH
28852: LD_VAR 0 1
28856: PPUSH
28857: LD_VAR 0 2
28861: PPUSH
28862: LD_INT 1
28864: PPUSH
28865: LD_INT 1
28867: PPUSH
28868: CALL 36907 0 4
28872: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28873: LD_ADDR_VAR 0 5
28877: PUSH
28878: LD_EXP 84
28882: PPUSH
28883: LD_VAR 0 1
28887: PPUSH
28888: CALL 36257 0 2
28892: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28893: LD_EXP 85
28897: PUSH
28898: LD_VAR 0 5
28902: ARRAY
28903: PUSH
28904: LD_EXP 86
28908: LESS
28909: IFFALSE 29098
// begin for i := 1 to vehicles do
28911: LD_ADDR_VAR 0 4
28915: PUSH
28916: DOUBLE
28917: LD_INT 1
28919: DEC
28920: ST_TO_ADDR
28921: LD_VAR 0 2
28925: PUSH
28926: FOR_TO
28927: IFFALSE 29096
// begin if hackTanksCaptured [ index ] = hackLimit then
28929: LD_EXP 85
28933: PUSH
28934: LD_VAR 0 5
28938: ARRAY
28939: PUSH
28940: LD_EXP 86
28944: EQUAL
28945: IFFALSE 28949
// break ;
28947: GO 29096
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28949: LD_ADDR_EXP 88
28953: PUSH
28954: LD_EXP 88
28958: PPUSH
28959: LD_VAR 0 5
28963: PPUSH
28964: LD_EXP 88
28968: PUSH
28969: LD_VAR 0 5
28973: ARRAY
28974: PUSH
28975: LD_INT 1
28977: PLUS
28978: PPUSH
28979: CALL_OW 1
28983: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28984: LD_ADDR_EXP 85
28988: PUSH
28989: LD_EXP 85
28993: PPUSH
28994: LD_VAR 0 5
28998: PUSH
28999: LD_EXP 85
29003: PUSH
29004: LD_VAR 0 5
29008: ARRAY
29009: PUSH
29010: LD_INT 1
29012: PLUS
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PPUSH
29018: LD_VAR 0 2
29022: PUSH
29023: LD_VAR 0 4
29027: ARRAY
29028: PUSH
29029: LD_VAR 0 2
29033: PUSH
29034: LD_VAR 0 4
29038: ARRAY
29039: PPUSH
29040: CALL_OW 255
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PPUSH
29049: CALL 36472 0 3
29053: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29054: LD_VAR 0 2
29058: PUSH
29059: LD_VAR 0 4
29063: ARRAY
29064: PPUSH
29065: LD_VAR 0 1
29069: PPUSH
29070: CALL_OW 255
29074: PPUSH
29075: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29079: LD_VAR 0 2
29083: PUSH
29084: LD_VAR 0 4
29088: ARRAY
29089: PPUSH
29090: CALL_OW 141
// end ;
29094: GO 28926
29096: POP
29097: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29098: LD_VAR 0 1
29102: PPUSH
29103: LD_EXP 85
29107: PUSH
29108: LD_VAR 0 5
29112: ARRAY
29113: PUSH
29114: LD_INT 0
29116: PLUS
29117: PPUSH
29118: CALL_OW 505
// end ;
29122: LD_VAR 0 3
29126: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29127: LD_INT 0
29129: PPUSH
29130: PPUSH
29131: PPUSH
29132: PPUSH
// if not hack in hackTanks then
29133: LD_VAR 0 1
29137: PUSH
29138: LD_EXP 84
29142: IN
29143: NOT
29144: IFFALSE 29148
// exit ;
29146: GO 29388
// index := GetElementIndex ( hackTanks , hack ) ;
29148: LD_ADDR_VAR 0 4
29152: PUSH
29153: LD_EXP 84
29157: PPUSH
29158: LD_VAR 0 1
29162: PPUSH
29163: CALL 36257 0 2
29167: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29168: LD_ADDR_VAR 0 3
29172: PUSH
29173: DOUBLE
29174: LD_EXP 85
29178: PUSH
29179: LD_VAR 0 4
29183: ARRAY
29184: INC
29185: ST_TO_ADDR
29186: LD_INT 1
29188: PUSH
29189: FOR_DOWNTO
29190: IFFALSE 29362
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29192: LD_ADDR_VAR 0 5
29196: PUSH
29197: LD_EXP 85
29201: PUSH
29202: LD_VAR 0 4
29206: ARRAY
29207: PUSH
29208: LD_VAR 0 3
29212: ARRAY
29213: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29214: LD_VAR 0 5
29218: PUSH
29219: LD_INT 1
29221: ARRAY
29222: PPUSH
29223: CALL_OW 302
29227: NOT
29228: PUSH
29229: LD_VAR 0 5
29233: PUSH
29234: LD_INT 1
29236: ARRAY
29237: PPUSH
29238: CALL_OW 255
29242: PUSH
29243: LD_VAR 0 1
29247: PPUSH
29248: CALL_OW 255
29252: NONEQUAL
29253: OR
29254: IFFALSE 29360
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29256: LD_VAR 0 5
29260: PUSH
29261: LD_INT 1
29263: ARRAY
29264: PPUSH
29265: CALL_OW 305
29269: PUSH
29270: LD_VAR 0 5
29274: PUSH
29275: LD_INT 1
29277: ARRAY
29278: PPUSH
29279: CALL_OW 255
29283: PUSH
29284: LD_VAR 0 1
29288: PPUSH
29289: CALL_OW 255
29293: EQUAL
29294: AND
29295: IFFALSE 29319
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29297: LD_VAR 0 5
29301: PUSH
29302: LD_INT 1
29304: ARRAY
29305: PPUSH
29306: LD_VAR 0 5
29310: PUSH
29311: LD_INT 2
29313: ARRAY
29314: PPUSH
29315: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29319: LD_ADDR_EXP 85
29323: PUSH
29324: LD_EXP 85
29328: PPUSH
29329: LD_VAR 0 4
29333: PPUSH
29334: LD_EXP 85
29338: PUSH
29339: LD_VAR 0 4
29343: ARRAY
29344: PPUSH
29345: LD_VAR 0 3
29349: PPUSH
29350: CALL_OW 3
29354: PPUSH
29355: CALL_OW 1
29359: ST_TO_ADDR
// end ; end ;
29360: GO 29189
29362: POP
29363: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29364: LD_VAR 0 1
29368: PPUSH
29369: LD_EXP 85
29373: PUSH
29374: LD_VAR 0 4
29378: ARRAY
29379: PUSH
29380: LD_INT 0
29382: PLUS
29383: PPUSH
29384: CALL_OW 505
// end ;
29388: LD_VAR 0 2
29392: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29393: LD_INT 0
29395: PPUSH
29396: PPUSH
29397: PPUSH
29398: PPUSH
// if not hack in hackTanks then
29399: LD_VAR 0 1
29403: PUSH
29404: LD_EXP 84
29408: IN
29409: NOT
29410: IFFALSE 29414
// exit ;
29412: GO 29499
// index := GetElementIndex ( hackTanks , hack ) ;
29414: LD_ADDR_VAR 0 5
29418: PUSH
29419: LD_EXP 84
29423: PPUSH
29424: LD_VAR 0 1
29428: PPUSH
29429: CALL 36257 0 2
29433: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29434: LD_ADDR_VAR 0 4
29438: PUSH
29439: DOUBLE
29440: LD_INT 1
29442: DEC
29443: ST_TO_ADDR
29444: LD_EXP 85
29448: PUSH
29449: LD_VAR 0 5
29453: ARRAY
29454: PUSH
29455: FOR_TO
29456: IFFALSE 29497
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29458: LD_EXP 85
29462: PUSH
29463: LD_VAR 0 5
29467: ARRAY
29468: PUSH
29469: LD_VAR 0 4
29473: ARRAY
29474: PUSH
29475: LD_INT 1
29477: ARRAY
29478: PUSH
29479: LD_VAR 0 2
29483: EQUAL
29484: IFFALSE 29495
// KillUnit ( vehicle ) ;
29486: LD_VAR 0 2
29490: PPUSH
29491: CALL_OW 66
29495: GO 29455
29497: POP
29498: POP
// end ;
29499: LD_VAR 0 3
29503: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29504: LD_EXP 89
29508: NOT
29509: IFFALSE 29544
29511: GO 29513
29513: DISABLE
// begin initMiner := true ;
29514: LD_ADDR_EXP 89
29518: PUSH
29519: LD_INT 1
29521: ST_TO_ADDR
// minersList := [ ] ;
29522: LD_ADDR_EXP 90
29526: PUSH
29527: EMPTY
29528: ST_TO_ADDR
// minerMinesList := [ ] ;
29529: LD_ADDR_EXP 91
29533: PUSH
29534: EMPTY
29535: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29536: LD_ADDR_EXP 92
29540: PUSH
29541: LD_INT 5
29543: ST_TO_ADDR
// end ;
29544: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29545: LD_EXP 89
29549: PUSH
29550: LD_INT 34
29552: PUSH
29553: LD_INT 81
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PPUSH
29560: CALL_OW 69
29564: AND
29565: IFFALSE 30026
29567: GO 29569
29569: DISABLE
29570: LD_INT 0
29572: PPUSH
29573: PPUSH
29574: PPUSH
29575: PPUSH
// begin enable ;
29576: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29577: LD_ADDR_VAR 0 1
29581: PUSH
29582: LD_INT 34
29584: PUSH
29585: LD_INT 81
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PPUSH
29592: CALL_OW 69
29596: PUSH
29597: FOR_IN
29598: IFFALSE 29670
// begin if not i in minersList then
29600: LD_VAR 0 1
29604: PUSH
29605: LD_EXP 90
29609: IN
29610: NOT
29611: IFFALSE 29668
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29613: LD_ADDR_EXP 90
29617: PUSH
29618: LD_EXP 90
29622: PPUSH
29623: LD_EXP 90
29627: PUSH
29628: LD_INT 1
29630: PLUS
29631: PPUSH
29632: LD_VAR 0 1
29636: PPUSH
29637: CALL_OW 1
29641: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29642: LD_ADDR_EXP 91
29646: PUSH
29647: LD_EXP 91
29651: PPUSH
29652: LD_EXP 91
29656: PUSH
29657: LD_INT 1
29659: PLUS
29660: PPUSH
29661: EMPTY
29662: PPUSH
29663: CALL_OW 1
29667: ST_TO_ADDR
// end end ;
29668: GO 29597
29670: POP
29671: POP
// for i := minerMinesList downto 1 do
29672: LD_ADDR_VAR 0 1
29676: PUSH
29677: DOUBLE
29678: LD_EXP 91
29682: INC
29683: ST_TO_ADDR
29684: LD_INT 1
29686: PUSH
29687: FOR_DOWNTO
29688: IFFALSE 30024
// begin if IsLive ( minersList [ i ] ) then
29690: LD_EXP 90
29694: PUSH
29695: LD_VAR 0 1
29699: ARRAY
29700: PPUSH
29701: CALL_OW 300
29705: IFFALSE 29733
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29707: LD_EXP 90
29711: PUSH
29712: LD_VAR 0 1
29716: ARRAY
29717: PPUSH
29718: LD_EXP 91
29722: PUSH
29723: LD_VAR 0 1
29727: ARRAY
29728: PPUSH
29729: CALL_OW 505
// if not minerMinesList [ i ] then
29733: LD_EXP 91
29737: PUSH
29738: LD_VAR 0 1
29742: ARRAY
29743: NOT
29744: IFFALSE 29748
// continue ;
29746: GO 29687
// for j := minerMinesList [ i ] downto 1 do
29748: LD_ADDR_VAR 0 2
29752: PUSH
29753: DOUBLE
29754: LD_EXP 91
29758: PUSH
29759: LD_VAR 0 1
29763: ARRAY
29764: INC
29765: ST_TO_ADDR
29766: LD_INT 1
29768: PUSH
29769: FOR_DOWNTO
29770: IFFALSE 30020
// begin side := GetSide ( minersList [ i ] ) ;
29772: LD_ADDR_VAR 0 3
29776: PUSH
29777: LD_EXP 90
29781: PUSH
29782: LD_VAR 0 1
29786: ARRAY
29787: PPUSH
29788: CALL_OW 255
29792: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29793: LD_ADDR_VAR 0 4
29797: PUSH
29798: LD_EXP 91
29802: PUSH
29803: LD_VAR 0 1
29807: ARRAY
29808: PUSH
29809: LD_VAR 0 2
29813: ARRAY
29814: PUSH
29815: LD_INT 1
29817: ARRAY
29818: PPUSH
29819: LD_EXP 91
29823: PUSH
29824: LD_VAR 0 1
29828: ARRAY
29829: PUSH
29830: LD_VAR 0 2
29834: ARRAY
29835: PUSH
29836: LD_INT 2
29838: ARRAY
29839: PPUSH
29840: CALL_OW 428
29844: ST_TO_ADDR
// if not tmp then
29845: LD_VAR 0 4
29849: NOT
29850: IFFALSE 29854
// continue ;
29852: GO 29769
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29854: LD_VAR 0 4
29858: PUSH
29859: LD_INT 81
29861: PUSH
29862: LD_VAR 0 3
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PPUSH
29871: CALL_OW 69
29875: IN
29876: PUSH
29877: LD_EXP 91
29881: PUSH
29882: LD_VAR 0 1
29886: ARRAY
29887: PUSH
29888: LD_VAR 0 2
29892: ARRAY
29893: PUSH
29894: LD_INT 1
29896: ARRAY
29897: PPUSH
29898: LD_EXP 91
29902: PUSH
29903: LD_VAR 0 1
29907: ARRAY
29908: PUSH
29909: LD_VAR 0 2
29913: ARRAY
29914: PUSH
29915: LD_INT 2
29917: ARRAY
29918: PPUSH
29919: CALL_OW 458
29923: AND
29924: IFFALSE 30018
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29926: LD_EXP 91
29930: PUSH
29931: LD_VAR 0 1
29935: ARRAY
29936: PUSH
29937: LD_VAR 0 2
29941: ARRAY
29942: PUSH
29943: LD_INT 1
29945: ARRAY
29946: PPUSH
29947: LD_EXP 91
29951: PUSH
29952: LD_VAR 0 1
29956: ARRAY
29957: PUSH
29958: LD_VAR 0 2
29962: ARRAY
29963: PUSH
29964: LD_INT 2
29966: ARRAY
29967: PPUSH
29968: LD_VAR 0 3
29972: PPUSH
29973: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29977: LD_ADDR_EXP 91
29981: PUSH
29982: LD_EXP 91
29986: PPUSH
29987: LD_VAR 0 1
29991: PPUSH
29992: LD_EXP 91
29996: PUSH
29997: LD_VAR 0 1
30001: ARRAY
30002: PPUSH
30003: LD_VAR 0 2
30007: PPUSH
30008: CALL_OW 3
30012: PPUSH
30013: CALL_OW 1
30017: ST_TO_ADDR
// end ; end ;
30018: GO 29769
30020: POP
30021: POP
// end ;
30022: GO 29687
30024: POP
30025: POP
// end ;
30026: PPOPN 4
30028: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30029: LD_INT 0
30031: PPUSH
30032: PPUSH
// result := false ;
30033: LD_ADDR_VAR 0 4
30037: PUSH
30038: LD_INT 0
30040: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30041: LD_VAR 0 1
30045: PPUSH
30046: CALL_OW 264
30050: PUSH
30051: LD_INT 81
30053: EQUAL
30054: NOT
30055: IFFALSE 30059
// exit ;
30057: GO 30299
// index := GetElementIndex ( minersList , unit ) ;
30059: LD_ADDR_VAR 0 5
30063: PUSH
30064: LD_EXP 90
30068: PPUSH
30069: LD_VAR 0 1
30073: PPUSH
30074: CALL 36257 0 2
30078: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30079: LD_EXP 91
30083: PUSH
30084: LD_VAR 0 5
30088: ARRAY
30089: PUSH
30090: LD_EXP 92
30094: GREATEREQUAL
30095: IFFALSE 30099
// exit ;
30097: GO 30299
// ComMoveXY ( unit , x , y ) ;
30099: LD_VAR 0 1
30103: PPUSH
30104: LD_VAR 0 2
30108: PPUSH
30109: LD_VAR 0 3
30113: PPUSH
30114: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30118: LD_INT 35
30120: PPUSH
30121: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30125: LD_VAR 0 1
30129: PPUSH
30130: LD_VAR 0 2
30134: PPUSH
30135: LD_VAR 0 3
30139: PPUSH
30140: CALL 67641 0 3
30144: NOT
30145: PUSH
30146: LD_VAR 0 1
30150: PPUSH
30151: CALL_OW 314
30155: AND
30156: IFFALSE 30160
// exit ;
30158: GO 30299
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30160: LD_VAR 0 2
30164: PPUSH
30165: LD_VAR 0 3
30169: PPUSH
30170: CALL_OW 428
30174: PUSH
30175: LD_VAR 0 1
30179: EQUAL
30180: PUSH
30181: LD_VAR 0 1
30185: PPUSH
30186: CALL_OW 314
30190: NOT
30191: AND
30192: IFFALSE 30118
// PlaySoundXY ( x , y , PlantMine ) ;
30194: LD_VAR 0 2
30198: PPUSH
30199: LD_VAR 0 3
30203: PPUSH
30204: LD_STRING PlantMine
30206: PPUSH
30207: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30211: LD_VAR 0 2
30215: PPUSH
30216: LD_VAR 0 3
30220: PPUSH
30221: LD_VAR 0 1
30225: PPUSH
30226: CALL_OW 255
30230: PPUSH
30231: LD_INT 0
30233: PPUSH
30234: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30238: LD_ADDR_EXP 91
30242: PUSH
30243: LD_EXP 91
30247: PPUSH
30248: LD_VAR 0 5
30252: PUSH
30253: LD_EXP 91
30257: PUSH
30258: LD_VAR 0 5
30262: ARRAY
30263: PUSH
30264: LD_INT 1
30266: PLUS
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PPUSH
30272: LD_VAR 0 2
30276: PUSH
30277: LD_VAR 0 3
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PPUSH
30286: CALL 36472 0 3
30290: ST_TO_ADDR
// result := true ;
30291: LD_ADDR_VAR 0 4
30295: PUSH
30296: LD_INT 1
30298: ST_TO_ADDR
// end ;
30299: LD_VAR 0 4
30303: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30304: LD_INT 0
30306: PPUSH
30307: PPUSH
30308: PPUSH
// if not unit in minersList then
30309: LD_VAR 0 1
30313: PUSH
30314: LD_EXP 90
30318: IN
30319: NOT
30320: IFFALSE 30324
// exit ;
30322: GO 30716
// index := GetElementIndex ( minersList , unit ) ;
30324: LD_ADDR_VAR 0 6
30328: PUSH
30329: LD_EXP 90
30333: PPUSH
30334: LD_VAR 0 1
30338: PPUSH
30339: CALL 36257 0 2
30343: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30344: LD_ADDR_VAR 0 5
30348: PUSH
30349: DOUBLE
30350: LD_EXP 91
30354: PUSH
30355: LD_VAR 0 6
30359: ARRAY
30360: INC
30361: ST_TO_ADDR
30362: LD_INT 1
30364: PUSH
30365: FOR_DOWNTO
30366: IFFALSE 30527
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30368: LD_EXP 91
30372: PUSH
30373: LD_VAR 0 6
30377: ARRAY
30378: PUSH
30379: LD_VAR 0 5
30383: ARRAY
30384: PUSH
30385: LD_INT 1
30387: ARRAY
30388: PUSH
30389: LD_VAR 0 2
30393: EQUAL
30394: PUSH
30395: LD_EXP 91
30399: PUSH
30400: LD_VAR 0 6
30404: ARRAY
30405: PUSH
30406: LD_VAR 0 5
30410: ARRAY
30411: PUSH
30412: LD_INT 2
30414: ARRAY
30415: PUSH
30416: LD_VAR 0 3
30420: EQUAL
30421: AND
30422: IFFALSE 30525
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30424: LD_EXP 91
30428: PUSH
30429: LD_VAR 0 6
30433: ARRAY
30434: PUSH
30435: LD_VAR 0 5
30439: ARRAY
30440: PUSH
30441: LD_INT 1
30443: ARRAY
30444: PPUSH
30445: LD_EXP 91
30449: PUSH
30450: LD_VAR 0 6
30454: ARRAY
30455: PUSH
30456: LD_VAR 0 5
30460: ARRAY
30461: PUSH
30462: LD_INT 2
30464: ARRAY
30465: PPUSH
30466: LD_VAR 0 1
30470: PPUSH
30471: CALL_OW 255
30475: PPUSH
30476: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30480: LD_ADDR_EXP 91
30484: PUSH
30485: LD_EXP 91
30489: PPUSH
30490: LD_VAR 0 6
30494: PPUSH
30495: LD_EXP 91
30499: PUSH
30500: LD_VAR 0 6
30504: ARRAY
30505: PPUSH
30506: LD_VAR 0 5
30510: PPUSH
30511: CALL_OW 3
30515: PPUSH
30516: CALL_OW 1
30520: ST_TO_ADDR
// exit ;
30521: POP
30522: POP
30523: GO 30716
// end ; end ;
30525: GO 30365
30527: POP
30528: POP
// for i := minerMinesList [ index ] downto 1 do
30529: LD_ADDR_VAR 0 5
30533: PUSH
30534: DOUBLE
30535: LD_EXP 91
30539: PUSH
30540: LD_VAR 0 6
30544: ARRAY
30545: INC
30546: ST_TO_ADDR
30547: LD_INT 1
30549: PUSH
30550: FOR_DOWNTO
30551: IFFALSE 30714
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30553: LD_EXP 91
30557: PUSH
30558: LD_VAR 0 6
30562: ARRAY
30563: PUSH
30564: LD_VAR 0 5
30568: ARRAY
30569: PUSH
30570: LD_INT 1
30572: ARRAY
30573: PPUSH
30574: LD_EXP 91
30578: PUSH
30579: LD_VAR 0 6
30583: ARRAY
30584: PUSH
30585: LD_VAR 0 5
30589: ARRAY
30590: PUSH
30591: LD_INT 2
30593: ARRAY
30594: PPUSH
30595: LD_VAR 0 2
30599: PPUSH
30600: LD_VAR 0 3
30604: PPUSH
30605: CALL_OW 298
30609: PUSH
30610: LD_INT 6
30612: LESS
30613: IFFALSE 30712
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30615: LD_EXP 91
30619: PUSH
30620: LD_VAR 0 6
30624: ARRAY
30625: PUSH
30626: LD_VAR 0 5
30630: ARRAY
30631: PUSH
30632: LD_INT 1
30634: ARRAY
30635: PPUSH
30636: LD_EXP 91
30640: PUSH
30641: LD_VAR 0 6
30645: ARRAY
30646: PUSH
30647: LD_VAR 0 5
30651: ARRAY
30652: PUSH
30653: LD_INT 2
30655: ARRAY
30656: PPUSH
30657: LD_VAR 0 1
30661: PPUSH
30662: CALL_OW 255
30666: PPUSH
30667: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30671: LD_ADDR_EXP 91
30675: PUSH
30676: LD_EXP 91
30680: PPUSH
30681: LD_VAR 0 6
30685: PPUSH
30686: LD_EXP 91
30690: PUSH
30691: LD_VAR 0 6
30695: ARRAY
30696: PPUSH
30697: LD_VAR 0 5
30701: PPUSH
30702: CALL_OW 3
30706: PPUSH
30707: CALL_OW 1
30711: ST_TO_ADDR
// end ; end ;
30712: GO 30550
30714: POP
30715: POP
// end ;
30716: LD_VAR 0 4
30720: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30721: LD_INT 0
30723: PPUSH
30724: PPUSH
30725: PPUSH
30726: PPUSH
30727: PPUSH
30728: PPUSH
30729: PPUSH
30730: PPUSH
30731: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30732: LD_VAR 0 1
30736: PPUSH
30737: CALL_OW 264
30741: PUSH
30742: LD_INT 81
30744: EQUAL
30745: NOT
30746: PUSH
30747: LD_VAR 0 1
30751: PUSH
30752: LD_EXP 90
30756: IN
30757: NOT
30758: OR
30759: IFFALSE 30763
// exit ;
30761: GO 31085
// index := GetElementIndex ( minersList , unit ) ;
30763: LD_ADDR_VAR 0 6
30767: PUSH
30768: LD_EXP 90
30772: PPUSH
30773: LD_VAR 0 1
30777: PPUSH
30778: CALL 36257 0 2
30782: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30783: LD_ADDR_VAR 0 8
30787: PUSH
30788: LD_EXP 92
30792: PUSH
30793: LD_EXP 91
30797: PUSH
30798: LD_VAR 0 6
30802: ARRAY
30803: MINUS
30804: ST_TO_ADDR
// if not minesFreeAmount then
30805: LD_VAR 0 8
30809: NOT
30810: IFFALSE 30814
// exit ;
30812: GO 31085
// tmp := [ ] ;
30814: LD_ADDR_VAR 0 7
30818: PUSH
30819: EMPTY
30820: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30821: LD_ADDR_VAR 0 5
30825: PUSH
30826: DOUBLE
30827: LD_INT 1
30829: DEC
30830: ST_TO_ADDR
30831: LD_VAR 0 8
30835: PUSH
30836: FOR_TO
30837: IFFALSE 31032
// begin _d := rand ( 0 , 5 ) ;
30839: LD_ADDR_VAR 0 11
30843: PUSH
30844: LD_INT 0
30846: PPUSH
30847: LD_INT 5
30849: PPUSH
30850: CALL_OW 12
30854: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30855: LD_ADDR_VAR 0 12
30859: PUSH
30860: LD_INT 2
30862: PPUSH
30863: LD_INT 6
30865: PPUSH
30866: CALL_OW 12
30870: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30871: LD_ADDR_VAR 0 9
30875: PUSH
30876: LD_VAR 0 2
30880: PPUSH
30881: LD_VAR 0 11
30885: PPUSH
30886: LD_VAR 0 12
30890: PPUSH
30891: CALL_OW 272
30895: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30896: LD_ADDR_VAR 0 10
30900: PUSH
30901: LD_VAR 0 3
30905: PPUSH
30906: LD_VAR 0 11
30910: PPUSH
30911: LD_VAR 0 12
30915: PPUSH
30916: CALL_OW 273
30920: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30921: LD_VAR 0 9
30925: PPUSH
30926: LD_VAR 0 10
30930: PPUSH
30931: CALL_OW 488
30935: PUSH
30936: LD_VAR 0 9
30940: PUSH
30941: LD_VAR 0 10
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_VAR 0 7
30954: IN
30955: NOT
30956: AND
30957: PUSH
30958: LD_VAR 0 9
30962: PPUSH
30963: LD_VAR 0 10
30967: PPUSH
30968: CALL_OW 458
30972: NOT
30973: AND
30974: IFFALSE 31016
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30976: LD_ADDR_VAR 0 7
30980: PUSH
30981: LD_VAR 0 7
30985: PPUSH
30986: LD_VAR 0 7
30990: PUSH
30991: LD_INT 1
30993: PLUS
30994: PPUSH
30995: LD_VAR 0 9
30999: PUSH
31000: LD_VAR 0 10
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PPUSH
31009: CALL_OW 1
31013: ST_TO_ADDR
31014: GO 31030
// i := i - 1 ;
31016: LD_ADDR_VAR 0 5
31020: PUSH
31021: LD_VAR 0 5
31025: PUSH
31026: LD_INT 1
31028: MINUS
31029: ST_TO_ADDR
// end ;
31030: GO 30836
31032: POP
31033: POP
// for i in tmp do
31034: LD_ADDR_VAR 0 5
31038: PUSH
31039: LD_VAR 0 7
31043: PUSH
31044: FOR_IN
31045: IFFALSE 31083
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31047: LD_VAR 0 1
31051: PPUSH
31052: LD_VAR 0 5
31056: PUSH
31057: LD_INT 1
31059: ARRAY
31060: PPUSH
31061: LD_VAR 0 5
31065: PUSH
31066: LD_INT 2
31068: ARRAY
31069: PPUSH
31070: CALL 30029 0 3
31074: NOT
31075: IFFALSE 31081
// exit ;
31077: POP
31078: POP
31079: GO 31085
31081: GO 31044
31083: POP
31084: POP
// end ;
31085: LD_VAR 0 4
31089: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31090: LD_INT 0
31092: PPUSH
31093: PPUSH
31094: PPUSH
31095: PPUSH
31096: PPUSH
31097: PPUSH
31098: PPUSH
// if not GetClass ( unit ) = class_sniper then
31099: LD_VAR 0 1
31103: PPUSH
31104: CALL_OW 257
31108: PUSH
31109: LD_INT 5
31111: EQUAL
31112: NOT
31113: IFFALSE 31117
// exit ;
31115: GO 31505
// dist := 8 ;
31117: LD_ADDR_VAR 0 5
31121: PUSH
31122: LD_INT 8
31124: ST_TO_ADDR
// viewRange := 12 ;
31125: LD_ADDR_VAR 0 7
31129: PUSH
31130: LD_INT 12
31132: ST_TO_ADDR
// side := GetSide ( unit ) ;
31133: LD_ADDR_VAR 0 6
31137: PUSH
31138: LD_VAR 0 1
31142: PPUSH
31143: CALL_OW 255
31147: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31148: LD_INT 61
31150: PPUSH
31151: LD_VAR 0 6
31155: PPUSH
31156: CALL_OW 321
31160: PUSH
31161: LD_INT 2
31163: EQUAL
31164: IFFALSE 31174
// viewRange := 16 ;
31166: LD_ADDR_VAR 0 7
31170: PUSH
31171: LD_INT 16
31173: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31174: LD_VAR 0 1
31178: PPUSH
31179: LD_VAR 0 2
31183: PPUSH
31184: LD_VAR 0 3
31188: PPUSH
31189: CALL_OW 297
31193: PUSH
31194: LD_VAR 0 5
31198: GREATER
31199: IFFALSE 31278
// begin ComMoveXY ( unit , x , y ) ;
31201: LD_VAR 0 1
31205: PPUSH
31206: LD_VAR 0 2
31210: PPUSH
31211: LD_VAR 0 3
31215: PPUSH
31216: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31220: LD_INT 35
31222: PPUSH
31223: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31227: LD_VAR 0 1
31231: PPUSH
31232: LD_VAR 0 2
31236: PPUSH
31237: LD_VAR 0 3
31241: PPUSH
31242: CALL 67641 0 3
31246: NOT
31247: IFFALSE 31251
// exit ;
31249: GO 31505
// until GetDistUnitXY ( unit , x , y ) < dist ;
31251: LD_VAR 0 1
31255: PPUSH
31256: LD_VAR 0 2
31260: PPUSH
31261: LD_VAR 0 3
31265: PPUSH
31266: CALL_OW 297
31270: PUSH
31271: LD_VAR 0 5
31275: LESS
31276: IFFALSE 31220
// end ; ComTurnXY ( unit , x , y ) ;
31278: LD_VAR 0 1
31282: PPUSH
31283: LD_VAR 0 2
31287: PPUSH
31288: LD_VAR 0 3
31292: PPUSH
31293: CALL_OW 118
// wait ( 5 ) ;
31297: LD_INT 5
31299: PPUSH
31300: CALL_OW 67
// _d := GetDir ( unit ) ;
31304: LD_ADDR_VAR 0 10
31308: PUSH
31309: LD_VAR 0 1
31313: PPUSH
31314: CALL_OW 254
31318: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31319: LD_ADDR_VAR 0 8
31323: PUSH
31324: LD_VAR 0 1
31328: PPUSH
31329: CALL_OW 250
31333: PPUSH
31334: LD_VAR 0 10
31338: PPUSH
31339: LD_VAR 0 5
31343: PPUSH
31344: CALL_OW 272
31348: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31349: LD_ADDR_VAR 0 9
31353: PUSH
31354: LD_VAR 0 1
31358: PPUSH
31359: CALL_OW 251
31363: PPUSH
31364: LD_VAR 0 10
31368: PPUSH
31369: LD_VAR 0 5
31373: PPUSH
31374: CALL_OW 273
31378: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31379: LD_VAR 0 8
31383: PPUSH
31384: LD_VAR 0 9
31388: PPUSH
31389: CALL_OW 488
31393: NOT
31394: IFFALSE 31398
// exit ;
31396: GO 31505
// ComAnimCustom ( unit , 1 ) ;
31398: LD_VAR 0 1
31402: PPUSH
31403: LD_INT 1
31405: PPUSH
31406: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31410: LD_VAR 0 8
31414: PPUSH
31415: LD_VAR 0 9
31419: PPUSH
31420: LD_VAR 0 6
31424: PPUSH
31425: LD_VAR 0 7
31429: PPUSH
31430: CALL_OW 330
// repeat wait ( 1 ) ;
31434: LD_INT 1
31436: PPUSH
31437: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31441: LD_VAR 0 1
31445: PPUSH
31446: CALL_OW 316
31450: PUSH
31451: LD_VAR 0 1
31455: PPUSH
31456: CALL_OW 314
31460: OR
31461: PUSH
31462: LD_VAR 0 1
31466: PPUSH
31467: CALL_OW 302
31471: NOT
31472: OR
31473: PUSH
31474: LD_VAR 0 1
31478: PPUSH
31479: CALL_OW 301
31483: OR
31484: IFFALSE 31434
// RemoveSeeing ( _x , _y , side ) ;
31486: LD_VAR 0 8
31490: PPUSH
31491: LD_VAR 0 9
31495: PPUSH
31496: LD_VAR 0 6
31500: PPUSH
31501: CALL_OW 331
// end ; end_of_file
31505: LD_VAR 0 4
31509: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31510: LD_INT 0
31512: PPUSH
31513: PPUSH
// if exist_mode then
31514: LD_VAR 0 2
31518: IFFALSE 31543
// unit := CreateCharacter ( prefix & ident ) else
31520: LD_ADDR_VAR 0 5
31524: PUSH
31525: LD_VAR 0 3
31529: PUSH
31530: LD_VAR 0 1
31534: STR
31535: PPUSH
31536: CALL_OW 34
31540: ST_TO_ADDR
31541: GO 31558
// unit := NewCharacter ( ident ) ;
31543: LD_ADDR_VAR 0 5
31547: PUSH
31548: LD_VAR 0 1
31552: PPUSH
31553: CALL_OW 25
31557: ST_TO_ADDR
// result := unit ;
31558: LD_ADDR_VAR 0 4
31562: PUSH
31563: LD_VAR 0 5
31567: ST_TO_ADDR
// end ;
31568: LD_VAR 0 4
31572: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31573: LD_INT 0
31575: PPUSH
31576: PPUSH
// if not side or not nation then
31577: LD_VAR 0 1
31581: NOT
31582: PUSH
31583: LD_VAR 0 2
31587: NOT
31588: OR
31589: IFFALSE 31593
// exit ;
31591: GO 32361
// case nation of nation_american :
31593: LD_VAR 0 2
31597: PUSH
31598: LD_INT 1
31600: DOUBLE
31601: EQUAL
31602: IFTRUE 31606
31604: GO 31820
31606: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31607: LD_ADDR_VAR 0 4
31611: PUSH
31612: LD_INT 35
31614: PUSH
31615: LD_INT 45
31617: PUSH
31618: LD_INT 46
31620: PUSH
31621: LD_INT 47
31623: PUSH
31624: LD_INT 82
31626: PUSH
31627: LD_INT 83
31629: PUSH
31630: LD_INT 84
31632: PUSH
31633: LD_INT 85
31635: PUSH
31636: LD_INT 86
31638: PUSH
31639: LD_INT 1
31641: PUSH
31642: LD_INT 2
31644: PUSH
31645: LD_INT 6
31647: PUSH
31648: LD_INT 15
31650: PUSH
31651: LD_INT 16
31653: PUSH
31654: LD_INT 7
31656: PUSH
31657: LD_INT 12
31659: PUSH
31660: LD_INT 13
31662: PUSH
31663: LD_INT 10
31665: PUSH
31666: LD_INT 14
31668: PUSH
31669: LD_INT 20
31671: PUSH
31672: LD_INT 21
31674: PUSH
31675: LD_INT 22
31677: PUSH
31678: LD_INT 25
31680: PUSH
31681: LD_INT 32
31683: PUSH
31684: LD_INT 27
31686: PUSH
31687: LD_INT 36
31689: PUSH
31690: LD_INT 69
31692: PUSH
31693: LD_INT 39
31695: PUSH
31696: LD_INT 34
31698: PUSH
31699: LD_INT 40
31701: PUSH
31702: LD_INT 48
31704: PUSH
31705: LD_INT 49
31707: PUSH
31708: LD_INT 50
31710: PUSH
31711: LD_INT 51
31713: PUSH
31714: LD_INT 52
31716: PUSH
31717: LD_INT 53
31719: PUSH
31720: LD_INT 54
31722: PUSH
31723: LD_INT 55
31725: PUSH
31726: LD_INT 56
31728: PUSH
31729: LD_INT 57
31731: PUSH
31732: LD_INT 58
31734: PUSH
31735: LD_INT 59
31737: PUSH
31738: LD_INT 60
31740: PUSH
31741: LD_INT 61
31743: PUSH
31744: LD_INT 62
31746: PUSH
31747: LD_INT 80
31749: PUSH
31750: LD_INT 82
31752: PUSH
31753: LD_INT 83
31755: PUSH
31756: LD_INT 84
31758: PUSH
31759: LD_INT 85
31761: PUSH
31762: LD_INT 86
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: ST_TO_ADDR
31818: GO 32285
31820: LD_INT 2
31822: DOUBLE
31823: EQUAL
31824: IFTRUE 31828
31826: GO 32054
31828: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31829: LD_ADDR_VAR 0 4
31833: PUSH
31834: LD_INT 35
31836: PUSH
31837: LD_INT 45
31839: PUSH
31840: LD_INT 46
31842: PUSH
31843: LD_INT 47
31845: PUSH
31846: LD_INT 82
31848: PUSH
31849: LD_INT 83
31851: PUSH
31852: LD_INT 84
31854: PUSH
31855: LD_INT 85
31857: PUSH
31858: LD_INT 87
31860: PUSH
31861: LD_INT 70
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: LD_INT 11
31869: PUSH
31870: LD_INT 3
31872: PUSH
31873: LD_INT 4
31875: PUSH
31876: LD_INT 5
31878: PUSH
31879: LD_INT 6
31881: PUSH
31882: LD_INT 15
31884: PUSH
31885: LD_INT 18
31887: PUSH
31888: LD_INT 7
31890: PUSH
31891: LD_INT 17
31893: PUSH
31894: LD_INT 8
31896: PUSH
31897: LD_INT 20
31899: PUSH
31900: LD_INT 21
31902: PUSH
31903: LD_INT 22
31905: PUSH
31906: LD_INT 72
31908: PUSH
31909: LD_INT 26
31911: PUSH
31912: LD_INT 69
31914: PUSH
31915: LD_INT 39
31917: PUSH
31918: LD_INT 40
31920: PUSH
31921: LD_INT 41
31923: PUSH
31924: LD_INT 42
31926: PUSH
31927: LD_INT 43
31929: PUSH
31930: LD_INT 48
31932: PUSH
31933: LD_INT 49
31935: PUSH
31936: LD_INT 50
31938: PUSH
31939: LD_INT 51
31941: PUSH
31942: LD_INT 52
31944: PUSH
31945: LD_INT 53
31947: PUSH
31948: LD_INT 54
31950: PUSH
31951: LD_INT 55
31953: PUSH
31954: LD_INT 56
31956: PUSH
31957: LD_INT 60
31959: PUSH
31960: LD_INT 61
31962: PUSH
31963: LD_INT 62
31965: PUSH
31966: LD_INT 66
31968: PUSH
31969: LD_INT 67
31971: PUSH
31972: LD_INT 68
31974: PUSH
31975: LD_INT 81
31977: PUSH
31978: LD_INT 82
31980: PUSH
31981: LD_INT 83
31983: PUSH
31984: LD_INT 84
31986: PUSH
31987: LD_INT 85
31989: PUSH
31990: LD_INT 87
31992: PUSH
31993: LD_INT 88
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: ST_TO_ADDR
32052: GO 32285
32054: LD_INT 3
32056: DOUBLE
32057: EQUAL
32058: IFTRUE 32062
32060: GO 32284
32062: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32063: LD_ADDR_VAR 0 4
32067: PUSH
32068: LD_INT 46
32070: PUSH
32071: LD_INT 47
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: LD_INT 82
32082: PUSH
32083: LD_INT 83
32085: PUSH
32086: LD_INT 84
32088: PUSH
32089: LD_INT 85
32091: PUSH
32092: LD_INT 86
32094: PUSH
32095: LD_INT 11
32097: PUSH
32098: LD_INT 9
32100: PUSH
32101: LD_INT 20
32103: PUSH
32104: LD_INT 19
32106: PUSH
32107: LD_INT 21
32109: PUSH
32110: LD_INT 24
32112: PUSH
32113: LD_INT 22
32115: PUSH
32116: LD_INT 25
32118: PUSH
32119: LD_INT 28
32121: PUSH
32122: LD_INT 29
32124: PUSH
32125: LD_INT 30
32127: PUSH
32128: LD_INT 31
32130: PUSH
32131: LD_INT 37
32133: PUSH
32134: LD_INT 38
32136: PUSH
32137: LD_INT 32
32139: PUSH
32140: LD_INT 27
32142: PUSH
32143: LD_INT 33
32145: PUSH
32146: LD_INT 69
32148: PUSH
32149: LD_INT 39
32151: PUSH
32152: LD_INT 34
32154: PUSH
32155: LD_INT 40
32157: PUSH
32158: LD_INT 71
32160: PUSH
32161: LD_INT 23
32163: PUSH
32164: LD_INT 44
32166: PUSH
32167: LD_INT 48
32169: PUSH
32170: LD_INT 49
32172: PUSH
32173: LD_INT 50
32175: PUSH
32176: LD_INT 51
32178: PUSH
32179: LD_INT 52
32181: PUSH
32182: LD_INT 53
32184: PUSH
32185: LD_INT 54
32187: PUSH
32188: LD_INT 55
32190: PUSH
32191: LD_INT 56
32193: PUSH
32194: LD_INT 57
32196: PUSH
32197: LD_INT 58
32199: PUSH
32200: LD_INT 59
32202: PUSH
32203: LD_INT 63
32205: PUSH
32206: LD_INT 64
32208: PUSH
32209: LD_INT 65
32211: PUSH
32212: LD_INT 82
32214: PUSH
32215: LD_INT 83
32217: PUSH
32218: LD_INT 84
32220: PUSH
32221: LD_INT 85
32223: PUSH
32224: LD_INT 86
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: ST_TO_ADDR
32282: GO 32285
32284: POP
// if state > - 1 and state < 3 then
32285: LD_VAR 0 3
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: GREATER
32294: PUSH
32295: LD_VAR 0 3
32299: PUSH
32300: LD_INT 3
32302: LESS
32303: AND
32304: IFFALSE 32361
// for i in result do
32306: LD_ADDR_VAR 0 5
32310: PUSH
32311: LD_VAR 0 4
32315: PUSH
32316: FOR_IN
32317: IFFALSE 32359
// if GetTech ( i , side ) <> state then
32319: LD_VAR 0 5
32323: PPUSH
32324: LD_VAR 0 1
32328: PPUSH
32329: CALL_OW 321
32333: PUSH
32334: LD_VAR 0 3
32338: NONEQUAL
32339: IFFALSE 32357
// result := result diff i ;
32341: LD_ADDR_VAR 0 4
32345: PUSH
32346: LD_VAR 0 4
32350: PUSH
32351: LD_VAR 0 5
32355: DIFF
32356: ST_TO_ADDR
32357: GO 32316
32359: POP
32360: POP
// end ;
32361: LD_VAR 0 4
32365: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32366: LD_INT 0
32368: PPUSH
32369: PPUSH
32370: PPUSH
// result := true ;
32371: LD_ADDR_VAR 0 3
32375: PUSH
32376: LD_INT 1
32378: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32379: LD_ADDR_VAR 0 5
32383: PUSH
32384: LD_VAR 0 2
32388: PPUSH
32389: CALL_OW 480
32393: ST_TO_ADDR
// if not tmp then
32394: LD_VAR 0 5
32398: NOT
32399: IFFALSE 32403
// exit ;
32401: GO 32452
// for i in tmp do
32403: LD_ADDR_VAR 0 4
32407: PUSH
32408: LD_VAR 0 5
32412: PUSH
32413: FOR_IN
32414: IFFALSE 32450
// if GetTech ( i , side ) <> state_researched then
32416: LD_VAR 0 4
32420: PPUSH
32421: LD_VAR 0 1
32425: PPUSH
32426: CALL_OW 321
32430: PUSH
32431: LD_INT 2
32433: NONEQUAL
32434: IFFALSE 32448
// begin result := false ;
32436: LD_ADDR_VAR 0 3
32440: PUSH
32441: LD_INT 0
32443: ST_TO_ADDR
// exit ;
32444: POP
32445: POP
32446: GO 32452
// end ;
32448: GO 32413
32450: POP
32451: POP
// end ;
32452: LD_VAR 0 3
32456: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32457: LD_INT 0
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
32463: PPUSH
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
32468: PPUSH
32469: PPUSH
32470: PPUSH
32471: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32472: LD_VAR 0 1
32476: NOT
32477: PUSH
32478: LD_VAR 0 1
32482: PPUSH
32483: CALL_OW 257
32487: PUSH
32488: LD_INT 9
32490: NONEQUAL
32491: OR
32492: IFFALSE 32496
// exit ;
32494: GO 33069
// side := GetSide ( unit ) ;
32496: LD_ADDR_VAR 0 9
32500: PUSH
32501: LD_VAR 0 1
32505: PPUSH
32506: CALL_OW 255
32510: ST_TO_ADDR
// tech_space := tech_spacanom ;
32511: LD_ADDR_VAR 0 12
32515: PUSH
32516: LD_INT 29
32518: ST_TO_ADDR
// tech_time := tech_taurad ;
32519: LD_ADDR_VAR 0 13
32523: PUSH
32524: LD_INT 28
32526: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32527: LD_ADDR_VAR 0 11
32531: PUSH
32532: LD_VAR 0 1
32536: PPUSH
32537: CALL_OW 310
32541: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32542: LD_VAR 0 11
32546: PPUSH
32547: CALL_OW 247
32551: PUSH
32552: LD_INT 2
32554: EQUAL
32555: IFFALSE 32559
// exit ;
32557: GO 33069
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32559: LD_ADDR_VAR 0 8
32563: PUSH
32564: LD_INT 81
32566: PUSH
32567: LD_VAR 0 9
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 3
32578: PUSH
32579: LD_INT 21
32581: PUSH
32582: LD_INT 3
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PPUSH
32597: CALL_OW 69
32601: ST_TO_ADDR
// if not tmp then
32602: LD_VAR 0 8
32606: NOT
32607: IFFALSE 32611
// exit ;
32609: GO 33069
// if in_unit then
32611: LD_VAR 0 11
32615: IFFALSE 32639
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32617: LD_ADDR_VAR 0 10
32621: PUSH
32622: LD_VAR 0 8
32626: PPUSH
32627: LD_VAR 0 11
32631: PPUSH
32632: CALL_OW 74
32636: ST_TO_ADDR
32637: GO 32659
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32639: LD_ADDR_VAR 0 10
32643: PUSH
32644: LD_VAR 0 8
32648: PPUSH
32649: LD_VAR 0 1
32653: PPUSH
32654: CALL_OW 74
32658: ST_TO_ADDR
// if not enemy then
32659: LD_VAR 0 10
32663: NOT
32664: IFFALSE 32668
// exit ;
32666: GO 33069
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32668: LD_VAR 0 11
32672: PUSH
32673: LD_VAR 0 11
32677: PPUSH
32678: LD_VAR 0 10
32682: PPUSH
32683: CALL_OW 296
32687: PUSH
32688: LD_INT 13
32690: GREATER
32691: AND
32692: PUSH
32693: LD_VAR 0 1
32697: PPUSH
32698: LD_VAR 0 10
32702: PPUSH
32703: CALL_OW 296
32707: PUSH
32708: LD_INT 12
32710: GREATER
32711: OR
32712: IFFALSE 32716
// exit ;
32714: GO 33069
// missile := [ 1 ] ;
32716: LD_ADDR_VAR 0 14
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: EMPTY
32725: LIST
32726: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32727: LD_VAR 0 9
32731: PPUSH
32732: LD_VAR 0 12
32736: PPUSH
32737: CALL_OW 325
32741: IFFALSE 32770
// missile := Replace ( missile , missile + 1 , 2 ) ;
32743: LD_ADDR_VAR 0 14
32747: PUSH
32748: LD_VAR 0 14
32752: PPUSH
32753: LD_VAR 0 14
32757: PUSH
32758: LD_INT 1
32760: PLUS
32761: PPUSH
32762: LD_INT 2
32764: PPUSH
32765: CALL_OW 1
32769: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32770: LD_VAR 0 9
32774: PPUSH
32775: LD_VAR 0 13
32779: PPUSH
32780: CALL_OW 325
32784: PUSH
32785: LD_VAR 0 10
32789: PPUSH
32790: CALL_OW 255
32794: PPUSH
32795: LD_VAR 0 13
32799: PPUSH
32800: CALL_OW 325
32804: NOT
32805: AND
32806: IFFALSE 32835
// missile := Replace ( missile , missile + 1 , 3 ) ;
32808: LD_ADDR_VAR 0 14
32812: PUSH
32813: LD_VAR 0 14
32817: PPUSH
32818: LD_VAR 0 14
32822: PUSH
32823: LD_INT 1
32825: PLUS
32826: PPUSH
32827: LD_INT 3
32829: PPUSH
32830: CALL_OW 1
32834: ST_TO_ADDR
// if missile < 2 then
32835: LD_VAR 0 14
32839: PUSH
32840: LD_INT 2
32842: LESS
32843: IFFALSE 32847
// exit ;
32845: GO 33069
// x := GetX ( enemy ) ;
32847: LD_ADDR_VAR 0 4
32851: PUSH
32852: LD_VAR 0 10
32856: PPUSH
32857: CALL_OW 250
32861: ST_TO_ADDR
// y := GetY ( enemy ) ;
32862: LD_ADDR_VAR 0 5
32866: PUSH
32867: LD_VAR 0 10
32871: PPUSH
32872: CALL_OW 251
32876: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32877: LD_ADDR_VAR 0 6
32881: PUSH
32882: LD_VAR 0 4
32886: PUSH
32887: LD_INT 1
32889: NEG
32890: PPUSH
32891: LD_INT 1
32893: PPUSH
32894: CALL_OW 12
32898: PLUS
32899: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32900: LD_ADDR_VAR 0 7
32904: PUSH
32905: LD_VAR 0 5
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PPUSH
32914: LD_INT 1
32916: PPUSH
32917: CALL_OW 12
32921: PLUS
32922: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32923: LD_VAR 0 6
32927: PPUSH
32928: LD_VAR 0 7
32932: PPUSH
32933: CALL_OW 488
32937: NOT
32938: IFFALSE 32960
// begin _x := x ;
32940: LD_ADDR_VAR 0 6
32944: PUSH
32945: LD_VAR 0 4
32949: ST_TO_ADDR
// _y := y ;
32950: LD_ADDR_VAR 0 7
32954: PUSH
32955: LD_VAR 0 5
32959: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32960: LD_ADDR_VAR 0 3
32964: PUSH
32965: LD_INT 1
32967: PPUSH
32968: LD_VAR 0 14
32972: PPUSH
32973: CALL_OW 12
32977: ST_TO_ADDR
// case i of 1 :
32978: LD_VAR 0 3
32982: PUSH
32983: LD_INT 1
32985: DOUBLE
32986: EQUAL
32987: IFTRUE 32991
32989: GO 33008
32991: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32992: LD_VAR 0 1
32996: PPUSH
32997: LD_VAR 0 10
33001: PPUSH
33002: CALL_OW 115
33006: GO 33069
33008: LD_INT 2
33010: DOUBLE
33011: EQUAL
33012: IFTRUE 33016
33014: GO 33038
33016: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33017: LD_VAR 0 1
33021: PPUSH
33022: LD_VAR 0 6
33026: PPUSH
33027: LD_VAR 0 7
33031: PPUSH
33032: CALL_OW 153
33036: GO 33069
33038: LD_INT 3
33040: DOUBLE
33041: EQUAL
33042: IFTRUE 33046
33044: GO 33068
33046: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33047: LD_VAR 0 1
33051: PPUSH
33052: LD_VAR 0 6
33056: PPUSH
33057: LD_VAR 0 7
33061: PPUSH
33062: CALL_OW 154
33066: GO 33069
33068: POP
// end ;
33069: LD_VAR 0 2
33073: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33074: LD_INT 0
33076: PPUSH
33077: PPUSH
33078: PPUSH
33079: PPUSH
33080: PPUSH
33081: PPUSH
// if not unit or not building then
33082: LD_VAR 0 1
33086: NOT
33087: PUSH
33088: LD_VAR 0 2
33092: NOT
33093: OR
33094: IFFALSE 33098
// exit ;
33096: GO 33256
// x := GetX ( building ) ;
33098: LD_ADDR_VAR 0 5
33102: PUSH
33103: LD_VAR 0 2
33107: PPUSH
33108: CALL_OW 250
33112: ST_TO_ADDR
// y := GetY ( building ) ;
33113: LD_ADDR_VAR 0 6
33117: PUSH
33118: LD_VAR 0 2
33122: PPUSH
33123: CALL_OW 251
33127: ST_TO_ADDR
// for i = 0 to 5 do
33128: LD_ADDR_VAR 0 4
33132: PUSH
33133: DOUBLE
33134: LD_INT 0
33136: DEC
33137: ST_TO_ADDR
33138: LD_INT 5
33140: PUSH
33141: FOR_TO
33142: IFFALSE 33254
// begin _x := ShiftX ( x , i , 3 ) ;
33144: LD_ADDR_VAR 0 7
33148: PUSH
33149: LD_VAR 0 5
33153: PPUSH
33154: LD_VAR 0 4
33158: PPUSH
33159: LD_INT 3
33161: PPUSH
33162: CALL_OW 272
33166: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33167: LD_ADDR_VAR 0 8
33171: PUSH
33172: LD_VAR 0 6
33176: PPUSH
33177: LD_VAR 0 4
33181: PPUSH
33182: LD_INT 3
33184: PPUSH
33185: CALL_OW 273
33189: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33190: LD_VAR 0 7
33194: PPUSH
33195: LD_VAR 0 8
33199: PPUSH
33200: CALL_OW 488
33204: NOT
33205: IFFALSE 33209
// continue ;
33207: GO 33141
// if HexInfo ( _x , _y ) = 0 then
33209: LD_VAR 0 7
33213: PPUSH
33214: LD_VAR 0 8
33218: PPUSH
33219: CALL_OW 428
33223: PUSH
33224: LD_INT 0
33226: EQUAL
33227: IFFALSE 33252
// begin ComMoveXY ( unit , _x , _y ) ;
33229: LD_VAR 0 1
33233: PPUSH
33234: LD_VAR 0 7
33238: PPUSH
33239: LD_VAR 0 8
33243: PPUSH
33244: CALL_OW 111
// exit ;
33248: POP
33249: POP
33250: GO 33256
// end ; end ;
33252: GO 33141
33254: POP
33255: POP
// end ;
33256: LD_VAR 0 3
33260: RET
// export function ScanBase ( side , base_area ) ; begin
33261: LD_INT 0
33263: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33264: LD_ADDR_VAR 0 3
33268: PUSH
33269: LD_VAR 0 2
33273: PPUSH
33274: LD_INT 81
33276: PUSH
33277: LD_VAR 0 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PPUSH
33286: CALL_OW 70
33290: ST_TO_ADDR
// end ;
33291: LD_VAR 0 3
33295: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33296: LD_INT 0
33298: PPUSH
33299: PPUSH
33300: PPUSH
33301: PPUSH
// result := false ;
33302: LD_ADDR_VAR 0 2
33306: PUSH
33307: LD_INT 0
33309: ST_TO_ADDR
// side := GetSide ( unit ) ;
33310: LD_ADDR_VAR 0 3
33314: PUSH
33315: LD_VAR 0 1
33319: PPUSH
33320: CALL_OW 255
33324: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33325: LD_ADDR_VAR 0 4
33329: PUSH
33330: LD_VAR 0 1
33334: PPUSH
33335: CALL_OW 248
33339: ST_TO_ADDR
// case nat of 1 :
33340: LD_VAR 0 4
33344: PUSH
33345: LD_INT 1
33347: DOUBLE
33348: EQUAL
33349: IFTRUE 33353
33351: GO 33364
33353: POP
// tech := tech_lassight ; 2 :
33354: LD_ADDR_VAR 0 5
33358: PUSH
33359: LD_INT 12
33361: ST_TO_ADDR
33362: GO 33403
33364: LD_INT 2
33366: DOUBLE
33367: EQUAL
33368: IFTRUE 33372
33370: GO 33383
33372: POP
// tech := tech_mortar ; 3 :
33373: LD_ADDR_VAR 0 5
33377: PUSH
33378: LD_INT 41
33380: ST_TO_ADDR
33381: GO 33403
33383: LD_INT 3
33385: DOUBLE
33386: EQUAL
33387: IFTRUE 33391
33389: GO 33402
33391: POP
// tech := tech_bazooka ; end ;
33392: LD_ADDR_VAR 0 5
33396: PUSH
33397: LD_INT 44
33399: ST_TO_ADDR
33400: GO 33403
33402: POP
// if Researched ( side , tech ) then
33403: LD_VAR 0 3
33407: PPUSH
33408: LD_VAR 0 5
33412: PPUSH
33413: CALL_OW 325
33417: IFFALSE 33444
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33419: LD_ADDR_VAR 0 2
33423: PUSH
33424: LD_INT 5
33426: PUSH
33427: LD_INT 8
33429: PUSH
33430: LD_INT 9
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: LIST
33437: PUSH
33438: LD_VAR 0 4
33442: ARRAY
33443: ST_TO_ADDR
// end ;
33444: LD_VAR 0 2
33448: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33449: LD_INT 0
33451: PPUSH
33452: PPUSH
33453: PPUSH
// if not mines then
33454: LD_VAR 0 2
33458: NOT
33459: IFFALSE 33463
// exit ;
33461: GO 33607
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33463: LD_ADDR_VAR 0 5
33467: PUSH
33468: LD_INT 81
33470: PUSH
33471: LD_VAR 0 1
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 3
33482: PUSH
33483: LD_INT 21
33485: PUSH
33486: LD_INT 3
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PPUSH
33501: CALL_OW 69
33505: ST_TO_ADDR
// for i in mines do
33506: LD_ADDR_VAR 0 4
33510: PUSH
33511: LD_VAR 0 2
33515: PUSH
33516: FOR_IN
33517: IFFALSE 33605
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33519: LD_VAR 0 4
33523: PUSH
33524: LD_INT 1
33526: ARRAY
33527: PPUSH
33528: LD_VAR 0 4
33532: PUSH
33533: LD_INT 2
33535: ARRAY
33536: PPUSH
33537: CALL_OW 458
33541: NOT
33542: IFFALSE 33546
// continue ;
33544: GO 33516
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33546: LD_VAR 0 4
33550: PUSH
33551: LD_INT 1
33553: ARRAY
33554: PPUSH
33555: LD_VAR 0 4
33559: PUSH
33560: LD_INT 2
33562: ARRAY
33563: PPUSH
33564: CALL_OW 428
33568: PUSH
33569: LD_VAR 0 5
33573: IN
33574: IFFALSE 33603
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33576: LD_VAR 0 4
33580: PUSH
33581: LD_INT 1
33583: ARRAY
33584: PPUSH
33585: LD_VAR 0 4
33589: PUSH
33590: LD_INT 2
33592: ARRAY
33593: PPUSH
33594: LD_VAR 0 1
33598: PPUSH
33599: CALL_OW 456
// end ;
33603: GO 33516
33605: POP
33606: POP
// end ;
33607: LD_VAR 0 3
33611: RET
// export function Count ( array ) ; begin
33612: LD_INT 0
33614: PPUSH
// result := array + 0 ;
33615: LD_ADDR_VAR 0 2
33619: PUSH
33620: LD_VAR 0 1
33624: PUSH
33625: LD_INT 0
33627: PLUS
33628: ST_TO_ADDR
// end ;
33629: LD_VAR 0 2
33633: RET
// export function IsEmpty ( building ) ; begin
33634: LD_INT 0
33636: PPUSH
// if not building then
33637: LD_VAR 0 1
33641: NOT
33642: IFFALSE 33646
// exit ;
33644: GO 33689
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33646: LD_ADDR_VAR 0 2
33650: PUSH
33651: LD_VAR 0 1
33655: PUSH
33656: LD_INT 22
33658: PUSH
33659: LD_VAR 0 1
33663: PPUSH
33664: CALL_OW 255
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 58
33675: PUSH
33676: EMPTY
33677: LIST
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PPUSH
33683: CALL_OW 69
33687: IN
33688: ST_TO_ADDR
// end ;
33689: LD_VAR 0 2
33693: RET
// export function IsNotFull ( building ) ; var places ; begin
33694: LD_INT 0
33696: PPUSH
33697: PPUSH
// if not building then
33698: LD_VAR 0 1
33702: NOT
33703: IFFALSE 33707
// exit ;
33705: GO 33735
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33707: LD_ADDR_VAR 0 2
33711: PUSH
33712: LD_VAR 0 1
33716: PPUSH
33717: LD_INT 3
33719: PUSH
33720: LD_INT 62
33722: PUSH
33723: EMPTY
33724: LIST
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PPUSH
33730: CALL_OW 72
33734: ST_TO_ADDR
// end ;
33735: LD_VAR 0 2
33739: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33740: LD_INT 0
33742: PPUSH
33743: PPUSH
33744: PPUSH
33745: PPUSH
// tmp := [ ] ;
33746: LD_ADDR_VAR 0 3
33750: PUSH
33751: EMPTY
33752: ST_TO_ADDR
// list := [ ] ;
33753: LD_ADDR_VAR 0 5
33757: PUSH
33758: EMPTY
33759: ST_TO_ADDR
// for i = 16 to 25 do
33760: LD_ADDR_VAR 0 4
33764: PUSH
33765: DOUBLE
33766: LD_INT 16
33768: DEC
33769: ST_TO_ADDR
33770: LD_INT 25
33772: PUSH
33773: FOR_TO
33774: IFFALSE 33847
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33776: LD_ADDR_VAR 0 3
33780: PUSH
33781: LD_VAR 0 3
33785: PUSH
33786: LD_INT 22
33788: PUSH
33789: LD_VAR 0 1
33793: PPUSH
33794: CALL_OW 255
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 91
33805: PUSH
33806: LD_VAR 0 1
33810: PUSH
33811: LD_INT 6
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 30
33821: PUSH
33822: LD_VAR 0 4
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: PUSH
33836: EMPTY
33837: LIST
33838: PPUSH
33839: CALL_OW 69
33843: ADD
33844: ST_TO_ADDR
33845: GO 33773
33847: POP
33848: POP
// for i = 1 to tmp do
33849: LD_ADDR_VAR 0 4
33853: PUSH
33854: DOUBLE
33855: LD_INT 1
33857: DEC
33858: ST_TO_ADDR
33859: LD_VAR 0 3
33863: PUSH
33864: FOR_TO
33865: IFFALSE 33953
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33867: LD_ADDR_VAR 0 5
33871: PUSH
33872: LD_VAR 0 5
33876: PUSH
33877: LD_VAR 0 3
33881: PUSH
33882: LD_VAR 0 4
33886: ARRAY
33887: PPUSH
33888: CALL_OW 266
33892: PUSH
33893: LD_VAR 0 3
33897: PUSH
33898: LD_VAR 0 4
33902: ARRAY
33903: PPUSH
33904: CALL_OW 250
33908: PUSH
33909: LD_VAR 0 3
33913: PUSH
33914: LD_VAR 0 4
33918: ARRAY
33919: PPUSH
33920: CALL_OW 251
33924: PUSH
33925: LD_VAR 0 3
33929: PUSH
33930: LD_VAR 0 4
33934: ARRAY
33935: PPUSH
33936: CALL_OW 254
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: PUSH
33947: EMPTY
33948: LIST
33949: ADD
33950: ST_TO_ADDR
33951: GO 33864
33953: POP
33954: POP
// result := list ;
33955: LD_ADDR_VAR 0 2
33959: PUSH
33960: LD_VAR 0 5
33964: ST_TO_ADDR
// end ;
33965: LD_VAR 0 2
33969: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33970: LD_INT 0
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
33977: PPUSH
33978: PPUSH
// if not factory then
33979: LD_VAR 0 1
33983: NOT
33984: IFFALSE 33988
// exit ;
33986: GO 34581
// if control = control_apeman then
33988: LD_VAR 0 4
33992: PUSH
33993: LD_INT 5
33995: EQUAL
33996: IFFALSE 34105
// begin tmp := UnitsInside ( factory ) ;
33998: LD_ADDR_VAR 0 8
34002: PUSH
34003: LD_VAR 0 1
34007: PPUSH
34008: CALL_OW 313
34012: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34013: LD_VAR 0 8
34017: PPUSH
34018: LD_INT 25
34020: PUSH
34021: LD_INT 12
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PPUSH
34028: CALL_OW 72
34032: NOT
34033: IFFALSE 34043
// control := control_manual ;
34035: LD_ADDR_VAR 0 4
34039: PUSH
34040: LD_INT 1
34042: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34043: LD_ADDR_VAR 0 8
34047: PUSH
34048: LD_VAR 0 1
34052: PPUSH
34053: CALL 33740 0 1
34057: ST_TO_ADDR
// if tmp then
34058: LD_VAR 0 8
34062: IFFALSE 34105
// begin for i in tmp do
34064: LD_ADDR_VAR 0 7
34068: PUSH
34069: LD_VAR 0 8
34073: PUSH
34074: FOR_IN
34075: IFFALSE 34103
// if i [ 1 ] = b_ext_radio then
34077: LD_VAR 0 7
34081: PUSH
34082: LD_INT 1
34084: ARRAY
34085: PUSH
34086: LD_INT 22
34088: EQUAL
34089: IFFALSE 34101
// begin control := control_remote ;
34091: LD_ADDR_VAR 0 4
34095: PUSH
34096: LD_INT 2
34098: ST_TO_ADDR
// break ;
34099: GO 34103
// end ;
34101: GO 34074
34103: POP
34104: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34105: LD_VAR 0 1
34109: PPUSH
34110: LD_VAR 0 2
34114: PPUSH
34115: LD_VAR 0 3
34119: PPUSH
34120: LD_VAR 0 4
34124: PPUSH
34125: LD_VAR 0 5
34129: PPUSH
34130: CALL_OW 448
34134: IFFALSE 34169
// begin result := [ chassis , engine , control , weapon ] ;
34136: LD_ADDR_VAR 0 6
34140: PUSH
34141: LD_VAR 0 2
34145: PUSH
34146: LD_VAR 0 3
34150: PUSH
34151: LD_VAR 0 4
34155: PUSH
34156: LD_VAR 0 5
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: ST_TO_ADDR
// exit ;
34167: GO 34581
// end ; _chassis := AvailableChassisList ( factory ) ;
34169: LD_ADDR_VAR 0 9
34173: PUSH
34174: LD_VAR 0 1
34178: PPUSH
34179: CALL_OW 475
34183: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34184: LD_ADDR_VAR 0 11
34188: PUSH
34189: LD_VAR 0 1
34193: PPUSH
34194: CALL_OW 476
34198: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34199: LD_ADDR_VAR 0 12
34203: PUSH
34204: LD_VAR 0 1
34208: PPUSH
34209: CALL_OW 477
34213: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34214: LD_ADDR_VAR 0 10
34218: PUSH
34219: LD_VAR 0 1
34223: PPUSH
34224: CALL_OW 478
34228: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34229: LD_VAR 0 9
34233: NOT
34234: PUSH
34235: LD_VAR 0 11
34239: NOT
34240: OR
34241: PUSH
34242: LD_VAR 0 12
34246: NOT
34247: OR
34248: PUSH
34249: LD_VAR 0 10
34253: NOT
34254: OR
34255: IFFALSE 34290
// begin result := [ chassis , engine , control , weapon ] ;
34257: LD_ADDR_VAR 0 6
34261: PUSH
34262: LD_VAR 0 2
34266: PUSH
34267: LD_VAR 0 3
34271: PUSH
34272: LD_VAR 0 4
34276: PUSH
34277: LD_VAR 0 5
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: ST_TO_ADDR
// exit ;
34288: GO 34581
// end ; if not chassis in _chassis then
34290: LD_VAR 0 2
34294: PUSH
34295: LD_VAR 0 9
34299: IN
34300: NOT
34301: IFFALSE 34327
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34303: LD_ADDR_VAR 0 2
34307: PUSH
34308: LD_VAR 0 9
34312: PUSH
34313: LD_INT 1
34315: PPUSH
34316: LD_VAR 0 9
34320: PPUSH
34321: CALL_OW 12
34325: ARRAY
34326: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34327: LD_VAR 0 2
34331: PPUSH
34332: LD_VAR 0 3
34336: PPUSH
34337: CALL 34586 0 2
34341: NOT
34342: IFFALSE 34401
// repeat engine := _engine [ 1 ] ;
34344: LD_ADDR_VAR 0 3
34348: PUSH
34349: LD_VAR 0 11
34353: PUSH
34354: LD_INT 1
34356: ARRAY
34357: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34358: LD_ADDR_VAR 0 11
34362: PUSH
34363: LD_VAR 0 11
34367: PPUSH
34368: LD_INT 1
34370: PPUSH
34371: CALL_OW 3
34375: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34376: LD_VAR 0 2
34380: PPUSH
34381: LD_VAR 0 3
34385: PPUSH
34386: CALL 34586 0 2
34390: PUSH
34391: LD_VAR 0 11
34395: PUSH
34396: EMPTY
34397: EQUAL
34398: OR
34399: IFFALSE 34344
// if not control in _control then
34401: LD_VAR 0 4
34405: PUSH
34406: LD_VAR 0 12
34410: IN
34411: NOT
34412: IFFALSE 34438
// control := _control [ rand ( 1 , _control ) ] ;
34414: LD_ADDR_VAR 0 4
34418: PUSH
34419: LD_VAR 0 12
34423: PUSH
34424: LD_INT 1
34426: PPUSH
34427: LD_VAR 0 12
34431: PPUSH
34432: CALL_OW 12
34436: ARRAY
34437: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34438: LD_VAR 0 2
34442: PPUSH
34443: LD_VAR 0 5
34447: PPUSH
34448: CALL 34806 0 2
34452: NOT
34453: IFFALSE 34512
// repeat weapon := _weapon [ 1 ] ;
34455: LD_ADDR_VAR 0 5
34459: PUSH
34460: LD_VAR 0 10
34464: PUSH
34465: LD_INT 1
34467: ARRAY
34468: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34469: LD_ADDR_VAR 0 10
34473: PUSH
34474: LD_VAR 0 10
34478: PPUSH
34479: LD_INT 1
34481: PPUSH
34482: CALL_OW 3
34486: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34487: LD_VAR 0 2
34491: PPUSH
34492: LD_VAR 0 5
34496: PPUSH
34497: CALL 34806 0 2
34501: PUSH
34502: LD_VAR 0 10
34506: PUSH
34507: EMPTY
34508: EQUAL
34509: OR
34510: IFFALSE 34455
// result := [ ] ;
34512: LD_ADDR_VAR 0 6
34516: PUSH
34517: EMPTY
34518: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34519: LD_VAR 0 1
34523: PPUSH
34524: LD_VAR 0 2
34528: PPUSH
34529: LD_VAR 0 3
34533: PPUSH
34534: LD_VAR 0 4
34538: PPUSH
34539: LD_VAR 0 5
34543: PPUSH
34544: CALL_OW 448
34548: IFFALSE 34581
// result := [ chassis , engine , control , weapon ] ;
34550: LD_ADDR_VAR 0 6
34554: PUSH
34555: LD_VAR 0 2
34559: PUSH
34560: LD_VAR 0 3
34564: PUSH
34565: LD_VAR 0 4
34569: PUSH
34570: LD_VAR 0 5
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: ST_TO_ADDR
// end ;
34581: LD_VAR 0 6
34585: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34586: LD_INT 0
34588: PPUSH
// if not chassis or not engine then
34589: LD_VAR 0 1
34593: NOT
34594: PUSH
34595: LD_VAR 0 2
34599: NOT
34600: OR
34601: IFFALSE 34605
// exit ;
34603: GO 34801
// case engine of engine_solar :
34605: LD_VAR 0 2
34609: PUSH
34610: LD_INT 2
34612: DOUBLE
34613: EQUAL
34614: IFTRUE 34618
34616: GO 34656
34618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34619: LD_ADDR_VAR 0 3
34623: PUSH
34624: LD_INT 11
34626: PUSH
34627: LD_INT 12
34629: PUSH
34630: LD_INT 13
34632: PUSH
34633: LD_INT 14
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: LD_INT 2
34641: PUSH
34642: LD_INT 3
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: ST_TO_ADDR
34654: GO 34785
34656: LD_INT 1
34658: DOUBLE
34659: EQUAL
34660: IFTRUE 34664
34662: GO 34726
34664: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34665: LD_ADDR_VAR 0 3
34669: PUSH
34670: LD_INT 11
34672: PUSH
34673: LD_INT 12
34675: PUSH
34676: LD_INT 13
34678: PUSH
34679: LD_INT 14
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: LD_INT 2
34687: PUSH
34688: LD_INT 3
34690: PUSH
34691: LD_INT 4
34693: PUSH
34694: LD_INT 5
34696: PUSH
34697: LD_INT 21
34699: PUSH
34700: LD_INT 23
34702: PUSH
34703: LD_INT 22
34705: PUSH
34706: LD_INT 24
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: ST_TO_ADDR
34724: GO 34785
34726: LD_INT 3
34728: DOUBLE
34729: EQUAL
34730: IFTRUE 34734
34732: GO 34784
34734: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34735: LD_ADDR_VAR 0 3
34739: PUSH
34740: LD_INT 13
34742: PUSH
34743: LD_INT 14
34745: PUSH
34746: LD_INT 2
34748: PUSH
34749: LD_INT 3
34751: PUSH
34752: LD_INT 4
34754: PUSH
34755: LD_INT 5
34757: PUSH
34758: LD_INT 21
34760: PUSH
34761: LD_INT 22
34763: PUSH
34764: LD_INT 23
34766: PUSH
34767: LD_INT 24
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: ST_TO_ADDR
34782: GO 34785
34784: POP
// result := ( chassis in result ) ;
34785: LD_ADDR_VAR 0 3
34789: PUSH
34790: LD_VAR 0 1
34794: PUSH
34795: LD_VAR 0 3
34799: IN
34800: ST_TO_ADDR
// end ;
34801: LD_VAR 0 3
34805: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34806: LD_INT 0
34808: PPUSH
// if not chassis or not weapon then
34809: LD_VAR 0 1
34813: NOT
34814: PUSH
34815: LD_VAR 0 2
34819: NOT
34820: OR
34821: IFFALSE 34825
// exit ;
34823: GO 35885
// case weapon of us_machine_gun :
34825: LD_VAR 0 2
34829: PUSH
34830: LD_INT 2
34832: DOUBLE
34833: EQUAL
34834: IFTRUE 34838
34836: GO 34868
34838: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34839: LD_ADDR_VAR 0 3
34843: PUSH
34844: LD_INT 1
34846: PUSH
34847: LD_INT 2
34849: PUSH
34850: LD_INT 3
34852: PUSH
34853: LD_INT 4
34855: PUSH
34856: LD_INT 5
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: ST_TO_ADDR
34866: GO 35869
34868: LD_INT 3
34870: DOUBLE
34871: EQUAL
34872: IFTRUE 34876
34874: GO 34906
34876: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34877: LD_ADDR_VAR 0 3
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: LD_INT 4
34893: PUSH
34894: LD_INT 5
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: ST_TO_ADDR
34904: GO 35869
34906: LD_INT 11
34908: DOUBLE
34909: EQUAL
34910: IFTRUE 34914
34912: GO 34944
34914: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34915: LD_ADDR_VAR 0 3
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: LD_INT 2
34925: PUSH
34926: LD_INT 3
34928: PUSH
34929: LD_INT 4
34931: PUSH
34932: LD_INT 5
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: ST_TO_ADDR
34942: GO 35869
34944: LD_INT 4
34946: DOUBLE
34947: EQUAL
34948: IFTRUE 34952
34950: GO 34978
34952: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34953: LD_ADDR_VAR 0 3
34957: PUSH
34958: LD_INT 2
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: LD_INT 4
34966: PUSH
34967: LD_INT 5
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: ST_TO_ADDR
34976: GO 35869
34978: LD_INT 5
34980: DOUBLE
34981: EQUAL
34982: IFTRUE 34986
34984: GO 35012
34986: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34987: LD_ADDR_VAR 0 3
34991: PUSH
34992: LD_INT 2
34994: PUSH
34995: LD_INT 3
34997: PUSH
34998: LD_INT 4
35000: PUSH
35001: LD_INT 5
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: ST_TO_ADDR
35010: GO 35869
35012: LD_INT 9
35014: DOUBLE
35015: EQUAL
35016: IFTRUE 35020
35018: GO 35046
35020: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35021: LD_ADDR_VAR 0 3
35025: PUSH
35026: LD_INT 2
35028: PUSH
35029: LD_INT 3
35031: PUSH
35032: LD_INT 4
35034: PUSH
35035: LD_INT 5
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: ST_TO_ADDR
35044: GO 35869
35046: LD_INT 7
35048: DOUBLE
35049: EQUAL
35050: IFTRUE 35054
35052: GO 35080
35054: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35055: LD_ADDR_VAR 0 3
35059: PUSH
35060: LD_INT 2
35062: PUSH
35063: LD_INT 3
35065: PUSH
35066: LD_INT 4
35068: PUSH
35069: LD_INT 5
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: ST_TO_ADDR
35078: GO 35869
35080: LD_INT 12
35082: DOUBLE
35083: EQUAL
35084: IFTRUE 35088
35086: GO 35114
35088: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35089: LD_ADDR_VAR 0 3
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: LD_INT 3
35099: PUSH
35100: LD_INT 4
35102: PUSH
35103: LD_INT 5
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: ST_TO_ADDR
35112: GO 35869
35114: LD_INT 13
35116: DOUBLE
35117: EQUAL
35118: IFTRUE 35122
35120: GO 35148
35122: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35123: LD_ADDR_VAR 0 3
35127: PUSH
35128: LD_INT 2
35130: PUSH
35131: LD_INT 3
35133: PUSH
35134: LD_INT 4
35136: PUSH
35137: LD_INT 5
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: ST_TO_ADDR
35146: GO 35869
35148: LD_INT 14
35150: DOUBLE
35151: EQUAL
35152: IFTRUE 35156
35154: GO 35174
35156: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35157: LD_ADDR_VAR 0 3
35161: PUSH
35162: LD_INT 4
35164: PUSH
35165: LD_INT 5
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: ST_TO_ADDR
35172: GO 35869
35174: LD_INT 6
35176: DOUBLE
35177: EQUAL
35178: IFTRUE 35182
35180: GO 35200
35182: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35183: LD_ADDR_VAR 0 3
35187: PUSH
35188: LD_INT 4
35190: PUSH
35191: LD_INT 5
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: ST_TO_ADDR
35198: GO 35869
35200: LD_INT 10
35202: DOUBLE
35203: EQUAL
35204: IFTRUE 35208
35206: GO 35226
35208: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35209: LD_ADDR_VAR 0 3
35213: PUSH
35214: LD_INT 4
35216: PUSH
35217: LD_INT 5
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: ST_TO_ADDR
35224: GO 35869
35226: LD_INT 22
35228: DOUBLE
35229: EQUAL
35230: IFTRUE 35234
35232: GO 35260
35234: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35235: LD_ADDR_VAR 0 3
35239: PUSH
35240: LD_INT 11
35242: PUSH
35243: LD_INT 12
35245: PUSH
35246: LD_INT 13
35248: PUSH
35249: LD_INT 14
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: ST_TO_ADDR
35258: GO 35869
35260: LD_INT 23
35262: DOUBLE
35263: EQUAL
35264: IFTRUE 35268
35266: GO 35294
35268: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35269: LD_ADDR_VAR 0 3
35273: PUSH
35274: LD_INT 11
35276: PUSH
35277: LD_INT 12
35279: PUSH
35280: LD_INT 13
35282: PUSH
35283: LD_INT 14
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: ST_TO_ADDR
35292: GO 35869
35294: LD_INT 24
35296: DOUBLE
35297: EQUAL
35298: IFTRUE 35302
35300: GO 35328
35302: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35303: LD_ADDR_VAR 0 3
35307: PUSH
35308: LD_INT 11
35310: PUSH
35311: LD_INT 12
35313: PUSH
35314: LD_INT 13
35316: PUSH
35317: LD_INT 14
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: ST_TO_ADDR
35326: GO 35869
35328: LD_INT 30
35330: DOUBLE
35331: EQUAL
35332: IFTRUE 35336
35334: GO 35362
35336: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35337: LD_ADDR_VAR 0 3
35341: PUSH
35342: LD_INT 11
35344: PUSH
35345: LD_INT 12
35347: PUSH
35348: LD_INT 13
35350: PUSH
35351: LD_INT 14
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: ST_TO_ADDR
35360: GO 35869
35362: LD_INT 25
35364: DOUBLE
35365: EQUAL
35366: IFTRUE 35370
35368: GO 35388
35370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35371: LD_ADDR_VAR 0 3
35375: PUSH
35376: LD_INT 13
35378: PUSH
35379: LD_INT 14
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: ST_TO_ADDR
35386: GO 35869
35388: LD_INT 27
35390: DOUBLE
35391: EQUAL
35392: IFTRUE 35396
35394: GO 35414
35396: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35397: LD_ADDR_VAR 0 3
35401: PUSH
35402: LD_INT 13
35404: PUSH
35405: LD_INT 14
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: ST_TO_ADDR
35412: GO 35869
35414: LD_INT 92
35416: DOUBLE
35417: EQUAL
35418: IFTRUE 35422
35420: GO 35448
35422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35423: LD_ADDR_VAR 0 3
35427: PUSH
35428: LD_INT 11
35430: PUSH
35431: LD_INT 12
35433: PUSH
35434: LD_INT 13
35436: PUSH
35437: LD_INT 14
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: ST_TO_ADDR
35446: GO 35869
35448: LD_INT 28
35450: DOUBLE
35451: EQUAL
35452: IFTRUE 35456
35454: GO 35474
35456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35457: LD_ADDR_VAR 0 3
35461: PUSH
35462: LD_INT 13
35464: PUSH
35465: LD_INT 14
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: ST_TO_ADDR
35472: GO 35869
35474: LD_INT 29
35476: DOUBLE
35477: EQUAL
35478: IFTRUE 35482
35480: GO 35500
35482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35483: LD_ADDR_VAR 0 3
35487: PUSH
35488: LD_INT 13
35490: PUSH
35491: LD_INT 14
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: ST_TO_ADDR
35498: GO 35869
35500: LD_INT 31
35502: DOUBLE
35503: EQUAL
35504: IFTRUE 35508
35506: GO 35526
35508: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35509: LD_ADDR_VAR 0 3
35513: PUSH
35514: LD_INT 13
35516: PUSH
35517: LD_INT 14
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: ST_TO_ADDR
35524: GO 35869
35526: LD_INT 26
35528: DOUBLE
35529: EQUAL
35530: IFTRUE 35534
35532: GO 35552
35534: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35535: LD_ADDR_VAR 0 3
35539: PUSH
35540: LD_INT 13
35542: PUSH
35543: LD_INT 14
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: ST_TO_ADDR
35550: GO 35869
35552: LD_INT 42
35554: DOUBLE
35555: EQUAL
35556: IFTRUE 35560
35558: GO 35586
35560: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35561: LD_ADDR_VAR 0 3
35565: PUSH
35566: LD_INT 21
35568: PUSH
35569: LD_INT 22
35571: PUSH
35572: LD_INT 23
35574: PUSH
35575: LD_INT 24
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: ST_TO_ADDR
35584: GO 35869
35586: LD_INT 43
35588: DOUBLE
35589: EQUAL
35590: IFTRUE 35594
35592: GO 35620
35594: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35595: LD_ADDR_VAR 0 3
35599: PUSH
35600: LD_INT 21
35602: PUSH
35603: LD_INT 22
35605: PUSH
35606: LD_INT 23
35608: PUSH
35609: LD_INT 24
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: ST_TO_ADDR
35618: GO 35869
35620: LD_INT 44
35622: DOUBLE
35623: EQUAL
35624: IFTRUE 35628
35626: GO 35654
35628: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35629: LD_ADDR_VAR 0 3
35633: PUSH
35634: LD_INT 21
35636: PUSH
35637: LD_INT 22
35639: PUSH
35640: LD_INT 23
35642: PUSH
35643: LD_INT 24
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: ST_TO_ADDR
35652: GO 35869
35654: LD_INT 45
35656: DOUBLE
35657: EQUAL
35658: IFTRUE 35662
35660: GO 35688
35662: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35663: LD_ADDR_VAR 0 3
35667: PUSH
35668: LD_INT 21
35670: PUSH
35671: LD_INT 22
35673: PUSH
35674: LD_INT 23
35676: PUSH
35677: LD_INT 24
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: ST_TO_ADDR
35686: GO 35869
35688: LD_INT 49
35690: DOUBLE
35691: EQUAL
35692: IFTRUE 35696
35694: GO 35722
35696: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35697: LD_ADDR_VAR 0 3
35701: PUSH
35702: LD_INT 21
35704: PUSH
35705: LD_INT 22
35707: PUSH
35708: LD_INT 23
35710: PUSH
35711: LD_INT 24
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: ST_TO_ADDR
35720: GO 35869
35722: LD_INT 51
35724: DOUBLE
35725: EQUAL
35726: IFTRUE 35730
35728: GO 35756
35730: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35731: LD_ADDR_VAR 0 3
35735: PUSH
35736: LD_INT 21
35738: PUSH
35739: LD_INT 22
35741: PUSH
35742: LD_INT 23
35744: PUSH
35745: LD_INT 24
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: ST_TO_ADDR
35754: GO 35869
35756: LD_INT 52
35758: DOUBLE
35759: EQUAL
35760: IFTRUE 35764
35762: GO 35790
35764: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35765: LD_ADDR_VAR 0 3
35769: PUSH
35770: LD_INT 21
35772: PUSH
35773: LD_INT 22
35775: PUSH
35776: LD_INT 23
35778: PUSH
35779: LD_INT 24
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: ST_TO_ADDR
35788: GO 35869
35790: LD_INT 53
35792: DOUBLE
35793: EQUAL
35794: IFTRUE 35798
35796: GO 35816
35798: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35799: LD_ADDR_VAR 0 3
35803: PUSH
35804: LD_INT 23
35806: PUSH
35807: LD_INT 24
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: ST_TO_ADDR
35814: GO 35869
35816: LD_INT 46
35818: DOUBLE
35819: EQUAL
35820: IFTRUE 35824
35822: GO 35842
35824: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35825: LD_ADDR_VAR 0 3
35829: PUSH
35830: LD_INT 23
35832: PUSH
35833: LD_INT 24
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: ST_TO_ADDR
35840: GO 35869
35842: LD_INT 47
35844: DOUBLE
35845: EQUAL
35846: IFTRUE 35850
35848: GO 35868
35850: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35851: LD_ADDR_VAR 0 3
35855: PUSH
35856: LD_INT 23
35858: PUSH
35859: LD_INT 24
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: ST_TO_ADDR
35866: GO 35869
35868: POP
// result := ( chassis in result ) ;
35869: LD_ADDR_VAR 0 3
35873: PUSH
35874: LD_VAR 0 1
35878: PUSH
35879: LD_VAR 0 3
35883: IN
35884: ST_TO_ADDR
// end ;
35885: LD_VAR 0 3
35889: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35890: LD_INT 0
35892: PPUSH
35893: PPUSH
35894: PPUSH
35895: PPUSH
35896: PPUSH
35897: PPUSH
35898: PPUSH
// result := array ;
35899: LD_ADDR_VAR 0 5
35903: PUSH
35904: LD_VAR 0 1
35908: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35909: LD_VAR 0 1
35913: NOT
35914: PUSH
35915: LD_VAR 0 2
35919: NOT
35920: OR
35921: PUSH
35922: LD_VAR 0 3
35926: NOT
35927: OR
35928: PUSH
35929: LD_VAR 0 2
35933: PUSH
35934: LD_VAR 0 1
35938: GREATER
35939: OR
35940: PUSH
35941: LD_VAR 0 3
35945: PUSH
35946: LD_VAR 0 1
35950: GREATER
35951: OR
35952: IFFALSE 35956
// exit ;
35954: GO 36252
// if direction then
35956: LD_VAR 0 4
35960: IFFALSE 36024
// begin d := 1 ;
35962: LD_ADDR_VAR 0 9
35966: PUSH
35967: LD_INT 1
35969: ST_TO_ADDR
// if i_from > i_to then
35970: LD_VAR 0 2
35974: PUSH
35975: LD_VAR 0 3
35979: GREATER
35980: IFFALSE 36006
// length := ( array - i_from ) + i_to else
35982: LD_ADDR_VAR 0 11
35986: PUSH
35987: LD_VAR 0 1
35991: PUSH
35992: LD_VAR 0 2
35996: MINUS
35997: PUSH
35998: LD_VAR 0 3
36002: PLUS
36003: ST_TO_ADDR
36004: GO 36022
// length := i_to - i_from ;
36006: LD_ADDR_VAR 0 11
36010: PUSH
36011: LD_VAR 0 3
36015: PUSH
36016: LD_VAR 0 2
36020: MINUS
36021: ST_TO_ADDR
// end else
36022: GO 36085
// begin d := - 1 ;
36024: LD_ADDR_VAR 0 9
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: ST_TO_ADDR
// if i_from > i_to then
36033: LD_VAR 0 2
36037: PUSH
36038: LD_VAR 0 3
36042: GREATER
36043: IFFALSE 36063
// length := i_from - i_to else
36045: LD_ADDR_VAR 0 11
36049: PUSH
36050: LD_VAR 0 2
36054: PUSH
36055: LD_VAR 0 3
36059: MINUS
36060: ST_TO_ADDR
36061: GO 36085
// length := ( array - i_to ) + i_from ;
36063: LD_ADDR_VAR 0 11
36067: PUSH
36068: LD_VAR 0 1
36072: PUSH
36073: LD_VAR 0 3
36077: MINUS
36078: PUSH
36079: LD_VAR 0 2
36083: PLUS
36084: ST_TO_ADDR
// end ; if not length then
36085: LD_VAR 0 11
36089: NOT
36090: IFFALSE 36094
// exit ;
36092: GO 36252
// tmp := array ;
36094: LD_ADDR_VAR 0 10
36098: PUSH
36099: LD_VAR 0 1
36103: ST_TO_ADDR
// for i = 1 to length do
36104: LD_ADDR_VAR 0 6
36108: PUSH
36109: DOUBLE
36110: LD_INT 1
36112: DEC
36113: ST_TO_ADDR
36114: LD_VAR 0 11
36118: PUSH
36119: FOR_TO
36120: IFFALSE 36240
// begin for j = 1 to array do
36122: LD_ADDR_VAR 0 7
36126: PUSH
36127: DOUBLE
36128: LD_INT 1
36130: DEC
36131: ST_TO_ADDR
36132: LD_VAR 0 1
36136: PUSH
36137: FOR_TO
36138: IFFALSE 36226
// begin k := j + d ;
36140: LD_ADDR_VAR 0 8
36144: PUSH
36145: LD_VAR 0 7
36149: PUSH
36150: LD_VAR 0 9
36154: PLUS
36155: ST_TO_ADDR
// if k > array then
36156: LD_VAR 0 8
36160: PUSH
36161: LD_VAR 0 1
36165: GREATER
36166: IFFALSE 36176
// k := 1 ;
36168: LD_ADDR_VAR 0 8
36172: PUSH
36173: LD_INT 1
36175: ST_TO_ADDR
// if not k then
36176: LD_VAR 0 8
36180: NOT
36181: IFFALSE 36193
// k := array ;
36183: LD_ADDR_VAR 0 8
36187: PUSH
36188: LD_VAR 0 1
36192: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36193: LD_ADDR_VAR 0 10
36197: PUSH
36198: LD_VAR 0 10
36202: PPUSH
36203: LD_VAR 0 8
36207: PPUSH
36208: LD_VAR 0 1
36212: PUSH
36213: LD_VAR 0 7
36217: ARRAY
36218: PPUSH
36219: CALL_OW 1
36223: ST_TO_ADDR
// end ;
36224: GO 36137
36226: POP
36227: POP
// array := tmp ;
36228: LD_ADDR_VAR 0 1
36232: PUSH
36233: LD_VAR 0 10
36237: ST_TO_ADDR
// end ;
36238: GO 36119
36240: POP
36241: POP
// result := array ;
36242: LD_ADDR_VAR 0 5
36246: PUSH
36247: LD_VAR 0 1
36251: ST_TO_ADDR
// end ;
36252: LD_VAR 0 5
36256: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36257: LD_INT 0
36259: PPUSH
36260: PPUSH
// result := 0 ;
36261: LD_ADDR_VAR 0 3
36265: PUSH
36266: LD_INT 0
36268: ST_TO_ADDR
// if not array or not value in array then
36269: LD_VAR 0 1
36273: NOT
36274: PUSH
36275: LD_VAR 0 2
36279: PUSH
36280: LD_VAR 0 1
36284: IN
36285: NOT
36286: OR
36287: IFFALSE 36291
// exit ;
36289: GO 36345
// for i = 1 to array do
36291: LD_ADDR_VAR 0 4
36295: PUSH
36296: DOUBLE
36297: LD_INT 1
36299: DEC
36300: ST_TO_ADDR
36301: LD_VAR 0 1
36305: PUSH
36306: FOR_TO
36307: IFFALSE 36343
// if value = array [ i ] then
36309: LD_VAR 0 2
36313: PUSH
36314: LD_VAR 0 1
36318: PUSH
36319: LD_VAR 0 4
36323: ARRAY
36324: EQUAL
36325: IFFALSE 36341
// begin result := i ;
36327: LD_ADDR_VAR 0 3
36331: PUSH
36332: LD_VAR 0 4
36336: ST_TO_ADDR
// exit ;
36337: POP
36338: POP
36339: GO 36345
// end ;
36341: GO 36306
36343: POP
36344: POP
// end ;
36345: LD_VAR 0 3
36349: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36350: LD_INT 0
36352: PPUSH
// vc_chassis := chassis ;
36353: LD_ADDR_OWVAR 37
36357: PUSH
36358: LD_VAR 0 1
36362: ST_TO_ADDR
// vc_engine := engine ;
36363: LD_ADDR_OWVAR 39
36367: PUSH
36368: LD_VAR 0 2
36372: ST_TO_ADDR
// vc_control := control ;
36373: LD_ADDR_OWVAR 38
36377: PUSH
36378: LD_VAR 0 3
36382: ST_TO_ADDR
// vc_weapon := weapon ;
36383: LD_ADDR_OWVAR 40
36387: PUSH
36388: LD_VAR 0 4
36392: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36393: LD_ADDR_OWVAR 41
36397: PUSH
36398: LD_VAR 0 5
36402: ST_TO_ADDR
// end ;
36403: LD_VAR 0 6
36407: RET
// export function WantPlant ( unit ) ; var task ; begin
36408: LD_INT 0
36410: PPUSH
36411: PPUSH
// result := false ;
36412: LD_ADDR_VAR 0 2
36416: PUSH
36417: LD_INT 0
36419: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36420: LD_ADDR_VAR 0 3
36424: PUSH
36425: LD_VAR 0 1
36429: PPUSH
36430: CALL_OW 437
36434: ST_TO_ADDR
// if task then
36435: LD_VAR 0 3
36439: IFFALSE 36467
// if task [ 1 ] [ 1 ] = p then
36441: LD_VAR 0 3
36445: PUSH
36446: LD_INT 1
36448: ARRAY
36449: PUSH
36450: LD_INT 1
36452: ARRAY
36453: PUSH
36454: LD_STRING p
36456: EQUAL
36457: IFFALSE 36467
// result := true ;
36459: LD_ADDR_VAR 0 2
36463: PUSH
36464: LD_INT 1
36466: ST_TO_ADDR
// end ;
36467: LD_VAR 0 2
36471: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36472: LD_INT 0
36474: PPUSH
36475: PPUSH
36476: PPUSH
36477: PPUSH
// if pos < 1 then
36478: LD_VAR 0 2
36482: PUSH
36483: LD_INT 1
36485: LESS
36486: IFFALSE 36490
// exit ;
36488: GO 36793
// if pos = 1 then
36490: LD_VAR 0 2
36494: PUSH
36495: LD_INT 1
36497: EQUAL
36498: IFFALSE 36531
// result := Replace ( arr , pos [ 1 ] , value ) else
36500: LD_ADDR_VAR 0 4
36504: PUSH
36505: LD_VAR 0 1
36509: PPUSH
36510: LD_VAR 0 2
36514: PUSH
36515: LD_INT 1
36517: ARRAY
36518: PPUSH
36519: LD_VAR 0 3
36523: PPUSH
36524: CALL_OW 1
36528: ST_TO_ADDR
36529: GO 36793
// begin tmp := arr ;
36531: LD_ADDR_VAR 0 6
36535: PUSH
36536: LD_VAR 0 1
36540: ST_TO_ADDR
// s_arr := [ tmp ] ;
36541: LD_ADDR_VAR 0 7
36545: PUSH
36546: LD_VAR 0 6
36550: PUSH
36551: EMPTY
36552: LIST
36553: ST_TO_ADDR
// for i = 1 to pos - 1 do
36554: LD_ADDR_VAR 0 5
36558: PUSH
36559: DOUBLE
36560: LD_INT 1
36562: DEC
36563: ST_TO_ADDR
36564: LD_VAR 0 2
36568: PUSH
36569: LD_INT 1
36571: MINUS
36572: PUSH
36573: FOR_TO
36574: IFFALSE 36619
// begin tmp := tmp [ pos [ i ] ] ;
36576: LD_ADDR_VAR 0 6
36580: PUSH
36581: LD_VAR 0 6
36585: PUSH
36586: LD_VAR 0 2
36590: PUSH
36591: LD_VAR 0 5
36595: ARRAY
36596: ARRAY
36597: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36598: LD_ADDR_VAR 0 7
36602: PUSH
36603: LD_VAR 0 7
36607: PUSH
36608: LD_VAR 0 6
36612: PUSH
36613: EMPTY
36614: LIST
36615: ADD
36616: ST_TO_ADDR
// end ;
36617: GO 36573
36619: POP
36620: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36621: LD_ADDR_VAR 0 6
36625: PUSH
36626: LD_VAR 0 6
36630: PPUSH
36631: LD_VAR 0 2
36635: PUSH
36636: LD_VAR 0 2
36640: ARRAY
36641: PPUSH
36642: LD_VAR 0 3
36646: PPUSH
36647: CALL_OW 1
36651: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36652: LD_ADDR_VAR 0 7
36656: PUSH
36657: LD_VAR 0 7
36661: PPUSH
36662: LD_VAR 0 7
36666: PPUSH
36667: LD_VAR 0 6
36671: PPUSH
36672: CALL_OW 1
36676: ST_TO_ADDR
// for i = s_arr downto 2 do
36677: LD_ADDR_VAR 0 5
36681: PUSH
36682: DOUBLE
36683: LD_VAR 0 7
36687: INC
36688: ST_TO_ADDR
36689: LD_INT 2
36691: PUSH
36692: FOR_DOWNTO
36693: IFFALSE 36777
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36695: LD_ADDR_VAR 0 6
36699: PUSH
36700: LD_VAR 0 7
36704: PUSH
36705: LD_VAR 0 5
36709: PUSH
36710: LD_INT 1
36712: MINUS
36713: ARRAY
36714: PPUSH
36715: LD_VAR 0 2
36719: PUSH
36720: LD_VAR 0 5
36724: PUSH
36725: LD_INT 1
36727: MINUS
36728: ARRAY
36729: PPUSH
36730: LD_VAR 0 7
36734: PUSH
36735: LD_VAR 0 5
36739: ARRAY
36740: PPUSH
36741: CALL_OW 1
36745: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36746: LD_ADDR_VAR 0 7
36750: PUSH
36751: LD_VAR 0 7
36755: PPUSH
36756: LD_VAR 0 5
36760: PUSH
36761: LD_INT 1
36763: MINUS
36764: PPUSH
36765: LD_VAR 0 6
36769: PPUSH
36770: CALL_OW 1
36774: ST_TO_ADDR
// end ;
36775: GO 36692
36777: POP
36778: POP
// result := s_arr [ 1 ] ;
36779: LD_ADDR_VAR 0 4
36783: PUSH
36784: LD_VAR 0 7
36788: PUSH
36789: LD_INT 1
36791: ARRAY
36792: ST_TO_ADDR
// end ; end ;
36793: LD_VAR 0 4
36797: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36798: LD_INT 0
36800: PPUSH
36801: PPUSH
// if not list then
36802: LD_VAR 0 1
36806: NOT
36807: IFFALSE 36811
// exit ;
36809: GO 36902
// i := list [ pos1 ] ;
36811: LD_ADDR_VAR 0 5
36815: PUSH
36816: LD_VAR 0 1
36820: PUSH
36821: LD_VAR 0 2
36825: ARRAY
36826: ST_TO_ADDR
// if not i then
36827: LD_VAR 0 5
36831: NOT
36832: IFFALSE 36836
// exit ;
36834: GO 36902
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36836: LD_ADDR_VAR 0 1
36840: PUSH
36841: LD_VAR 0 1
36845: PPUSH
36846: LD_VAR 0 2
36850: PPUSH
36851: LD_VAR 0 1
36855: PUSH
36856: LD_VAR 0 3
36860: ARRAY
36861: PPUSH
36862: CALL_OW 1
36866: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36867: LD_ADDR_VAR 0 1
36871: PUSH
36872: LD_VAR 0 1
36876: PPUSH
36877: LD_VAR 0 3
36881: PPUSH
36882: LD_VAR 0 5
36886: PPUSH
36887: CALL_OW 1
36891: ST_TO_ADDR
// result := list ;
36892: LD_ADDR_VAR 0 4
36896: PUSH
36897: LD_VAR 0 1
36901: ST_TO_ADDR
// end ;
36902: LD_VAR 0 4
36906: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36907: LD_INT 0
36909: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36910: LD_ADDR_VAR 0 5
36914: PUSH
36915: LD_VAR 0 1
36919: PPUSH
36920: CALL_OW 250
36924: PPUSH
36925: LD_VAR 0 1
36929: PPUSH
36930: CALL_OW 251
36934: PPUSH
36935: LD_VAR 0 2
36939: PPUSH
36940: LD_VAR 0 3
36944: PPUSH
36945: LD_VAR 0 4
36949: PPUSH
36950: CALL 36960 0 5
36954: ST_TO_ADDR
// end ;
36955: LD_VAR 0 5
36959: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36960: LD_INT 0
36962: PPUSH
36963: PPUSH
36964: PPUSH
36965: PPUSH
// if not list then
36966: LD_VAR 0 3
36970: NOT
36971: IFFALSE 36975
// exit ;
36973: GO 37363
// result := [ ] ;
36975: LD_ADDR_VAR 0 6
36979: PUSH
36980: EMPTY
36981: ST_TO_ADDR
// for i in list do
36982: LD_ADDR_VAR 0 7
36986: PUSH
36987: LD_VAR 0 3
36991: PUSH
36992: FOR_IN
36993: IFFALSE 37195
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36995: LD_ADDR_VAR 0 9
36999: PUSH
37000: LD_VAR 0 7
37004: PPUSH
37005: LD_VAR 0 1
37009: PPUSH
37010: LD_VAR 0 2
37014: PPUSH
37015: CALL_OW 297
37019: ST_TO_ADDR
// if not result then
37020: LD_VAR 0 6
37024: NOT
37025: IFFALSE 37051
// result := [ [ i , tmp ] ] else
37027: LD_ADDR_VAR 0 6
37031: PUSH
37032: LD_VAR 0 7
37036: PUSH
37037: LD_VAR 0 9
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: EMPTY
37047: LIST
37048: ST_TO_ADDR
37049: GO 37193
// begin if result [ result ] [ 2 ] < tmp then
37051: LD_VAR 0 6
37055: PUSH
37056: LD_VAR 0 6
37060: ARRAY
37061: PUSH
37062: LD_INT 2
37064: ARRAY
37065: PUSH
37066: LD_VAR 0 9
37070: LESS
37071: IFFALSE 37113
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37073: LD_ADDR_VAR 0 6
37077: PUSH
37078: LD_VAR 0 6
37082: PPUSH
37083: LD_VAR 0 6
37087: PUSH
37088: LD_INT 1
37090: PLUS
37091: PPUSH
37092: LD_VAR 0 7
37096: PUSH
37097: LD_VAR 0 9
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PPUSH
37106: CALL_OW 2
37110: ST_TO_ADDR
37111: GO 37193
// for j = 1 to result do
37113: LD_ADDR_VAR 0 8
37117: PUSH
37118: DOUBLE
37119: LD_INT 1
37121: DEC
37122: ST_TO_ADDR
37123: LD_VAR 0 6
37127: PUSH
37128: FOR_TO
37129: IFFALSE 37191
// begin if tmp < result [ j ] [ 2 ] then
37131: LD_VAR 0 9
37135: PUSH
37136: LD_VAR 0 6
37140: PUSH
37141: LD_VAR 0 8
37145: ARRAY
37146: PUSH
37147: LD_INT 2
37149: ARRAY
37150: LESS
37151: IFFALSE 37189
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37153: LD_ADDR_VAR 0 6
37157: PUSH
37158: LD_VAR 0 6
37162: PPUSH
37163: LD_VAR 0 8
37167: PPUSH
37168: LD_VAR 0 7
37172: PUSH
37173: LD_VAR 0 9
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PPUSH
37182: CALL_OW 2
37186: ST_TO_ADDR
// break ;
37187: GO 37191
// end ; end ;
37189: GO 37128
37191: POP
37192: POP
// end ; end ;
37193: GO 36992
37195: POP
37196: POP
// if result and not asc then
37197: LD_VAR 0 6
37201: PUSH
37202: LD_VAR 0 4
37206: NOT
37207: AND
37208: IFFALSE 37283
// begin tmp := result ;
37210: LD_ADDR_VAR 0 9
37214: PUSH
37215: LD_VAR 0 6
37219: ST_TO_ADDR
// for i = tmp downto 1 do
37220: LD_ADDR_VAR 0 7
37224: PUSH
37225: DOUBLE
37226: LD_VAR 0 9
37230: INC
37231: ST_TO_ADDR
37232: LD_INT 1
37234: PUSH
37235: FOR_DOWNTO
37236: IFFALSE 37281
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37238: LD_ADDR_VAR 0 6
37242: PUSH
37243: LD_VAR 0 6
37247: PPUSH
37248: LD_VAR 0 9
37252: PUSH
37253: LD_VAR 0 7
37257: MINUS
37258: PUSH
37259: LD_INT 1
37261: PLUS
37262: PPUSH
37263: LD_VAR 0 9
37267: PUSH
37268: LD_VAR 0 7
37272: ARRAY
37273: PPUSH
37274: CALL_OW 1
37278: ST_TO_ADDR
37279: GO 37235
37281: POP
37282: POP
// end ; tmp := [ ] ;
37283: LD_ADDR_VAR 0 9
37287: PUSH
37288: EMPTY
37289: ST_TO_ADDR
// if mode then
37290: LD_VAR 0 5
37294: IFFALSE 37363
// begin for i = 1 to result do
37296: LD_ADDR_VAR 0 7
37300: PUSH
37301: DOUBLE
37302: LD_INT 1
37304: DEC
37305: ST_TO_ADDR
37306: LD_VAR 0 6
37310: PUSH
37311: FOR_TO
37312: IFFALSE 37351
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37314: LD_ADDR_VAR 0 9
37318: PUSH
37319: LD_VAR 0 9
37323: PPUSH
37324: LD_VAR 0 7
37328: PPUSH
37329: LD_VAR 0 6
37333: PUSH
37334: LD_VAR 0 7
37338: ARRAY
37339: PUSH
37340: LD_INT 1
37342: ARRAY
37343: PPUSH
37344: CALL_OW 1
37348: ST_TO_ADDR
37349: GO 37311
37351: POP
37352: POP
// result := tmp ;
37353: LD_ADDR_VAR 0 6
37357: PUSH
37358: LD_VAR 0 9
37362: ST_TO_ADDR
// end ; end ;
37363: LD_VAR 0 6
37367: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37368: LD_INT 0
37370: PPUSH
37371: PPUSH
37372: PPUSH
37373: PPUSH
37374: PPUSH
37375: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37376: LD_ADDR_VAR 0 5
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: EMPTY
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: ST_TO_ADDR
// if not x or not y then
37398: LD_VAR 0 2
37402: NOT
37403: PUSH
37404: LD_VAR 0 3
37408: NOT
37409: OR
37410: IFFALSE 37414
// exit ;
37412: GO 39064
// if not range then
37414: LD_VAR 0 4
37418: NOT
37419: IFFALSE 37429
// range := 10 ;
37421: LD_ADDR_VAR 0 4
37425: PUSH
37426: LD_INT 10
37428: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37429: LD_ADDR_VAR 0 8
37433: PUSH
37434: LD_INT 81
37436: PUSH
37437: LD_VAR 0 1
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 92
37448: PUSH
37449: LD_VAR 0 2
37453: PUSH
37454: LD_VAR 0 3
37458: PUSH
37459: LD_VAR 0 4
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 3
37472: PUSH
37473: LD_INT 21
37475: PUSH
37476: LD_INT 3
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: LIST
37491: PPUSH
37492: CALL_OW 69
37496: ST_TO_ADDR
// if not tmp then
37497: LD_VAR 0 8
37501: NOT
37502: IFFALSE 37506
// exit ;
37504: GO 39064
// for i in tmp do
37506: LD_ADDR_VAR 0 6
37510: PUSH
37511: LD_VAR 0 8
37515: PUSH
37516: FOR_IN
37517: IFFALSE 39039
// begin points := [ 0 , 0 , 0 ] ;
37519: LD_ADDR_VAR 0 9
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: LD_INT 0
37529: PUSH
37530: LD_INT 0
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: LIST
37537: ST_TO_ADDR
// bpoints := 1 ;
37538: LD_ADDR_VAR 0 10
37542: PUSH
37543: LD_INT 1
37545: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37546: LD_VAR 0 6
37550: PPUSH
37551: CALL_OW 247
37555: PUSH
37556: LD_INT 1
37558: DOUBLE
37559: EQUAL
37560: IFTRUE 37564
37562: GO 38142
37564: POP
// begin if GetClass ( i ) = 1 then
37565: LD_VAR 0 6
37569: PPUSH
37570: CALL_OW 257
37574: PUSH
37575: LD_INT 1
37577: EQUAL
37578: IFFALSE 37599
// points := [ 10 , 5 , 3 ] ;
37580: LD_ADDR_VAR 0 9
37584: PUSH
37585: LD_INT 10
37587: PUSH
37588: LD_INT 5
37590: PUSH
37591: LD_INT 3
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37599: LD_VAR 0 6
37603: PPUSH
37604: CALL_OW 257
37608: PUSH
37609: LD_INT 2
37611: PUSH
37612: LD_INT 3
37614: PUSH
37615: LD_INT 4
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: LIST
37622: IN
37623: IFFALSE 37644
// points := [ 3 , 2 , 1 ] ;
37625: LD_ADDR_VAR 0 9
37629: PUSH
37630: LD_INT 3
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: LIST
37643: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37644: LD_VAR 0 6
37648: PPUSH
37649: CALL_OW 257
37653: PUSH
37654: LD_INT 5
37656: EQUAL
37657: IFFALSE 37678
// points := [ 130 , 5 , 2 ] ;
37659: LD_ADDR_VAR 0 9
37663: PUSH
37664: LD_INT 130
37666: PUSH
37667: LD_INT 5
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: LIST
37677: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37678: LD_VAR 0 6
37682: PPUSH
37683: CALL_OW 257
37687: PUSH
37688: LD_INT 8
37690: EQUAL
37691: IFFALSE 37712
// points := [ 35 , 35 , 30 ] ;
37693: LD_ADDR_VAR 0 9
37697: PUSH
37698: LD_INT 35
37700: PUSH
37701: LD_INT 35
37703: PUSH
37704: LD_INT 30
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: LIST
37711: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37712: LD_VAR 0 6
37716: PPUSH
37717: CALL_OW 257
37721: PUSH
37722: LD_INT 9
37724: EQUAL
37725: IFFALSE 37746
// points := [ 20 , 55 , 40 ] ;
37727: LD_ADDR_VAR 0 9
37731: PUSH
37732: LD_INT 20
37734: PUSH
37735: LD_INT 55
37737: PUSH
37738: LD_INT 40
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: LIST
37745: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37746: LD_VAR 0 6
37750: PPUSH
37751: CALL_OW 257
37755: PUSH
37756: LD_INT 12
37758: PUSH
37759: LD_INT 16
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: IN
37766: IFFALSE 37787
// points := [ 5 , 3 , 2 ] ;
37768: LD_ADDR_VAR 0 9
37772: PUSH
37773: LD_INT 5
37775: PUSH
37776: LD_INT 3
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37787: LD_VAR 0 6
37791: PPUSH
37792: CALL_OW 257
37796: PUSH
37797: LD_INT 17
37799: EQUAL
37800: IFFALSE 37821
// points := [ 100 , 50 , 75 ] ;
37802: LD_ADDR_VAR 0 9
37806: PUSH
37807: LD_INT 100
37809: PUSH
37810: LD_INT 50
37812: PUSH
37813: LD_INT 75
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: LIST
37820: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37821: LD_VAR 0 6
37825: PPUSH
37826: CALL_OW 257
37830: PUSH
37831: LD_INT 15
37833: EQUAL
37834: IFFALSE 37855
// points := [ 10 , 5 , 3 ] ;
37836: LD_ADDR_VAR 0 9
37840: PUSH
37841: LD_INT 10
37843: PUSH
37844: LD_INT 5
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: LIST
37854: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37855: LD_VAR 0 6
37859: PPUSH
37860: CALL_OW 257
37864: PUSH
37865: LD_INT 14
37867: EQUAL
37868: IFFALSE 37889
// points := [ 10 , 0 , 0 ] ;
37870: LD_ADDR_VAR 0 9
37874: PUSH
37875: LD_INT 10
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37889: LD_VAR 0 6
37893: PPUSH
37894: CALL_OW 257
37898: PUSH
37899: LD_INT 11
37901: EQUAL
37902: IFFALSE 37923
// points := [ 30 , 10 , 5 ] ;
37904: LD_ADDR_VAR 0 9
37908: PUSH
37909: LD_INT 30
37911: PUSH
37912: LD_INT 10
37914: PUSH
37915: LD_INT 5
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: LIST
37922: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37923: LD_VAR 0 1
37927: PPUSH
37928: LD_INT 5
37930: PPUSH
37931: CALL_OW 321
37935: PUSH
37936: LD_INT 2
37938: EQUAL
37939: IFFALSE 37956
// bpoints := bpoints * 1.8 ;
37941: LD_ADDR_VAR 0 10
37945: PUSH
37946: LD_VAR 0 10
37950: PUSH
37951: LD_REAL  1.80000000000000E+0000
37954: MUL
37955: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37956: LD_VAR 0 6
37960: PPUSH
37961: CALL_OW 257
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: LD_INT 3
37974: PUSH
37975: LD_INT 4
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: IN
37984: PUSH
37985: LD_VAR 0 1
37989: PPUSH
37990: LD_INT 51
37992: PPUSH
37993: CALL_OW 321
37997: PUSH
37998: LD_INT 2
38000: EQUAL
38001: AND
38002: IFFALSE 38019
// bpoints := bpoints * 1.2 ;
38004: LD_ADDR_VAR 0 10
38008: PUSH
38009: LD_VAR 0 10
38013: PUSH
38014: LD_REAL  1.20000000000000E+0000
38017: MUL
38018: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38019: LD_VAR 0 6
38023: PPUSH
38024: CALL_OW 257
38028: PUSH
38029: LD_INT 5
38031: PUSH
38032: LD_INT 7
38034: PUSH
38035: LD_INT 9
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: LIST
38042: IN
38043: PUSH
38044: LD_VAR 0 1
38048: PPUSH
38049: LD_INT 52
38051: PPUSH
38052: CALL_OW 321
38056: PUSH
38057: LD_INT 2
38059: EQUAL
38060: AND
38061: IFFALSE 38078
// bpoints := bpoints * 1.5 ;
38063: LD_ADDR_VAR 0 10
38067: PUSH
38068: LD_VAR 0 10
38072: PUSH
38073: LD_REAL  1.50000000000000E+0000
38076: MUL
38077: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38078: LD_VAR 0 1
38082: PPUSH
38083: LD_INT 66
38085: PPUSH
38086: CALL_OW 321
38090: PUSH
38091: LD_INT 2
38093: EQUAL
38094: IFFALSE 38111
// bpoints := bpoints * 1.1 ;
38096: LD_ADDR_VAR 0 10
38100: PUSH
38101: LD_VAR 0 10
38105: PUSH
38106: LD_REAL  1.10000000000000E+0000
38109: MUL
38110: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38111: LD_ADDR_VAR 0 10
38115: PUSH
38116: LD_VAR 0 10
38120: PUSH
38121: LD_VAR 0 6
38125: PPUSH
38126: LD_INT 1
38128: PPUSH
38129: CALL_OW 259
38133: PUSH
38134: LD_REAL  1.15000000000000E+0000
38137: MUL
38138: MUL
38139: ST_TO_ADDR
// end ; unit_vehicle :
38140: GO 38968
38142: LD_INT 2
38144: DOUBLE
38145: EQUAL
38146: IFTRUE 38150
38148: GO 38956
38150: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38151: LD_VAR 0 6
38155: PPUSH
38156: CALL_OW 264
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: LD_INT 42
38166: PUSH
38167: LD_INT 24
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: LIST
38174: IN
38175: IFFALSE 38196
// points := [ 25 , 5 , 3 ] ;
38177: LD_ADDR_VAR 0 9
38181: PUSH
38182: LD_INT 25
38184: PUSH
38185: LD_INT 5
38187: PUSH
38188: LD_INT 3
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: LIST
38195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38196: LD_VAR 0 6
38200: PPUSH
38201: CALL_OW 264
38205: PUSH
38206: LD_INT 4
38208: PUSH
38209: LD_INT 43
38211: PUSH
38212: LD_INT 25
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: LIST
38219: IN
38220: IFFALSE 38241
// points := [ 40 , 15 , 5 ] ;
38222: LD_ADDR_VAR 0 9
38226: PUSH
38227: LD_INT 40
38229: PUSH
38230: LD_INT 15
38232: PUSH
38233: LD_INT 5
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: LIST
38240: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38241: LD_VAR 0 6
38245: PPUSH
38246: CALL_OW 264
38250: PUSH
38251: LD_INT 3
38253: PUSH
38254: LD_INT 23
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: IN
38261: IFFALSE 38282
// points := [ 7 , 25 , 8 ] ;
38263: LD_ADDR_VAR 0 9
38267: PUSH
38268: LD_INT 7
38270: PUSH
38271: LD_INT 25
38273: PUSH
38274: LD_INT 8
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: LIST
38281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38282: LD_VAR 0 6
38286: PPUSH
38287: CALL_OW 264
38291: PUSH
38292: LD_INT 5
38294: PUSH
38295: LD_INT 27
38297: PUSH
38298: LD_INT 44
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: LIST
38305: IN
38306: IFFALSE 38327
// points := [ 14 , 50 , 16 ] ;
38308: LD_ADDR_VAR 0 9
38312: PUSH
38313: LD_INT 14
38315: PUSH
38316: LD_INT 50
38318: PUSH
38319: LD_INT 16
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: LIST
38326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38327: LD_VAR 0 6
38331: PPUSH
38332: CALL_OW 264
38336: PUSH
38337: LD_INT 6
38339: PUSH
38340: LD_INT 46
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: IN
38347: IFFALSE 38368
// points := [ 32 , 120 , 70 ] ;
38349: LD_ADDR_VAR 0 9
38353: PUSH
38354: LD_INT 32
38356: PUSH
38357: LD_INT 120
38359: PUSH
38360: LD_INT 70
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: LIST
38367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38368: LD_VAR 0 6
38372: PPUSH
38373: CALL_OW 264
38377: PUSH
38378: LD_INT 7
38380: PUSH
38381: LD_INT 28
38383: PUSH
38384: LD_INT 45
38386: PUSH
38387: LD_INT 92
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: IN
38396: IFFALSE 38417
// points := [ 35 , 20 , 45 ] ;
38398: LD_ADDR_VAR 0 9
38402: PUSH
38403: LD_INT 35
38405: PUSH
38406: LD_INT 20
38408: PUSH
38409: LD_INT 45
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: LIST
38416: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38417: LD_VAR 0 6
38421: PPUSH
38422: CALL_OW 264
38426: PUSH
38427: LD_INT 47
38429: PUSH
38430: EMPTY
38431: LIST
38432: IN
38433: IFFALSE 38454
// points := [ 67 , 45 , 75 ] ;
38435: LD_ADDR_VAR 0 9
38439: PUSH
38440: LD_INT 67
38442: PUSH
38443: LD_INT 45
38445: PUSH
38446: LD_INT 75
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: LIST
38453: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38454: LD_VAR 0 6
38458: PPUSH
38459: CALL_OW 264
38463: PUSH
38464: LD_INT 26
38466: PUSH
38467: EMPTY
38468: LIST
38469: IN
38470: IFFALSE 38491
// points := [ 120 , 30 , 80 ] ;
38472: LD_ADDR_VAR 0 9
38476: PUSH
38477: LD_INT 120
38479: PUSH
38480: LD_INT 30
38482: PUSH
38483: LD_INT 80
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38491: LD_VAR 0 6
38495: PPUSH
38496: CALL_OW 264
38500: PUSH
38501: LD_INT 22
38503: PUSH
38504: EMPTY
38505: LIST
38506: IN
38507: IFFALSE 38528
// points := [ 40 , 1 , 1 ] ;
38509: LD_ADDR_VAR 0 9
38513: PUSH
38514: LD_INT 40
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38528: LD_VAR 0 6
38532: PPUSH
38533: CALL_OW 264
38537: PUSH
38538: LD_INT 29
38540: PUSH
38541: EMPTY
38542: LIST
38543: IN
38544: IFFALSE 38565
// points := [ 70 , 200 , 400 ] ;
38546: LD_ADDR_VAR 0 9
38550: PUSH
38551: LD_INT 70
38553: PUSH
38554: LD_INT 200
38556: PUSH
38557: LD_INT 400
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: LIST
38564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38565: LD_VAR 0 6
38569: PPUSH
38570: CALL_OW 264
38574: PUSH
38575: LD_INT 14
38577: PUSH
38578: LD_INT 53
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: IN
38585: IFFALSE 38606
// points := [ 40 , 10 , 20 ] ;
38587: LD_ADDR_VAR 0 9
38591: PUSH
38592: LD_INT 40
38594: PUSH
38595: LD_INT 10
38597: PUSH
38598: LD_INT 20
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38606: LD_VAR 0 6
38610: PPUSH
38611: CALL_OW 264
38615: PUSH
38616: LD_INT 9
38618: PUSH
38619: EMPTY
38620: LIST
38621: IN
38622: IFFALSE 38643
// points := [ 5 , 70 , 20 ] ;
38624: LD_ADDR_VAR 0 9
38628: PUSH
38629: LD_INT 5
38631: PUSH
38632: LD_INT 70
38634: PUSH
38635: LD_INT 20
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: LIST
38642: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38643: LD_VAR 0 6
38647: PPUSH
38648: CALL_OW 264
38652: PUSH
38653: LD_INT 10
38655: PUSH
38656: EMPTY
38657: LIST
38658: IN
38659: IFFALSE 38680
// points := [ 35 , 110 , 70 ] ;
38661: LD_ADDR_VAR 0 9
38665: PUSH
38666: LD_INT 35
38668: PUSH
38669: LD_INT 110
38671: PUSH
38672: LD_INT 70
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: LIST
38679: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38680: LD_VAR 0 6
38684: PPUSH
38685: CALL_OW 265
38689: PUSH
38690: LD_INT 25
38692: EQUAL
38693: IFFALSE 38714
// points := [ 80 , 65 , 100 ] ;
38695: LD_ADDR_VAR 0 9
38699: PUSH
38700: LD_INT 80
38702: PUSH
38703: LD_INT 65
38705: PUSH
38706: LD_INT 100
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38714: LD_VAR 0 6
38718: PPUSH
38719: CALL_OW 263
38723: PUSH
38724: LD_INT 1
38726: EQUAL
38727: IFFALSE 38762
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38729: LD_ADDR_VAR 0 10
38733: PUSH
38734: LD_VAR 0 10
38738: PUSH
38739: LD_VAR 0 6
38743: PPUSH
38744: CALL_OW 311
38748: PPUSH
38749: LD_INT 3
38751: PPUSH
38752: CALL_OW 259
38756: PUSH
38757: LD_INT 4
38759: MUL
38760: MUL
38761: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38762: LD_VAR 0 6
38766: PPUSH
38767: CALL_OW 263
38771: PUSH
38772: LD_INT 2
38774: EQUAL
38775: IFFALSE 38826
// begin j := IsControledBy ( i ) ;
38777: LD_ADDR_VAR 0 7
38781: PUSH
38782: LD_VAR 0 6
38786: PPUSH
38787: CALL_OW 312
38791: ST_TO_ADDR
// if j then
38792: LD_VAR 0 7
38796: IFFALSE 38826
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38798: LD_ADDR_VAR 0 10
38802: PUSH
38803: LD_VAR 0 10
38807: PUSH
38808: LD_VAR 0 7
38812: PPUSH
38813: LD_INT 3
38815: PPUSH
38816: CALL_OW 259
38820: PUSH
38821: LD_INT 3
38823: MUL
38824: MUL
38825: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38826: LD_VAR 0 6
38830: PPUSH
38831: CALL_OW 264
38835: PUSH
38836: LD_INT 5
38838: PUSH
38839: LD_INT 6
38841: PUSH
38842: LD_INT 46
38844: PUSH
38845: LD_INT 44
38847: PUSH
38848: LD_INT 47
38850: PUSH
38851: LD_INT 45
38853: PUSH
38854: LD_INT 28
38856: PUSH
38857: LD_INT 7
38859: PUSH
38860: LD_INT 27
38862: PUSH
38863: LD_INT 29
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: IN
38878: PUSH
38879: LD_VAR 0 1
38883: PPUSH
38884: LD_INT 52
38886: PPUSH
38887: CALL_OW 321
38891: PUSH
38892: LD_INT 2
38894: EQUAL
38895: AND
38896: IFFALSE 38913
// bpoints := bpoints * 1.2 ;
38898: LD_ADDR_VAR 0 10
38902: PUSH
38903: LD_VAR 0 10
38907: PUSH
38908: LD_REAL  1.20000000000000E+0000
38911: MUL
38912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38913: LD_VAR 0 6
38917: PPUSH
38918: CALL_OW 264
38922: PUSH
38923: LD_INT 6
38925: PUSH
38926: LD_INT 46
38928: PUSH
38929: LD_INT 47
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: LIST
38936: IN
38937: IFFALSE 38954
// bpoints := bpoints * 1.2 ;
38939: LD_ADDR_VAR 0 10
38943: PUSH
38944: LD_VAR 0 10
38948: PUSH
38949: LD_REAL  1.20000000000000E+0000
38952: MUL
38953: ST_TO_ADDR
// end ; unit_building :
38954: GO 38968
38956: LD_INT 3
38958: DOUBLE
38959: EQUAL
38960: IFTRUE 38964
38962: GO 38967
38964: POP
// ; end ;
38965: GO 38968
38967: POP
// for j = 1 to 3 do
38968: LD_ADDR_VAR 0 7
38972: PUSH
38973: DOUBLE
38974: LD_INT 1
38976: DEC
38977: ST_TO_ADDR
38978: LD_INT 3
38980: PUSH
38981: FOR_TO
38982: IFFALSE 39035
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38984: LD_ADDR_VAR 0 5
38988: PUSH
38989: LD_VAR 0 5
38993: PPUSH
38994: LD_VAR 0 7
38998: PPUSH
38999: LD_VAR 0 5
39003: PUSH
39004: LD_VAR 0 7
39008: ARRAY
39009: PUSH
39010: LD_VAR 0 9
39014: PUSH
39015: LD_VAR 0 7
39019: ARRAY
39020: PUSH
39021: LD_VAR 0 10
39025: MUL
39026: PLUS
39027: PPUSH
39028: CALL_OW 1
39032: ST_TO_ADDR
39033: GO 38981
39035: POP
39036: POP
// end ;
39037: GO 37516
39039: POP
39040: POP
// result := Replace ( result , 4 , tmp ) ;
39041: LD_ADDR_VAR 0 5
39045: PUSH
39046: LD_VAR 0 5
39050: PPUSH
39051: LD_INT 4
39053: PPUSH
39054: LD_VAR 0 8
39058: PPUSH
39059: CALL_OW 1
39063: ST_TO_ADDR
// end ;
39064: LD_VAR 0 5
39068: RET
// export function DangerAtRange ( unit , range ) ; begin
39069: LD_INT 0
39071: PPUSH
// if not unit then
39072: LD_VAR 0 1
39076: NOT
39077: IFFALSE 39081
// exit ;
39079: GO 39126
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39081: LD_ADDR_VAR 0 3
39085: PUSH
39086: LD_VAR 0 1
39090: PPUSH
39091: CALL_OW 255
39095: PPUSH
39096: LD_VAR 0 1
39100: PPUSH
39101: CALL_OW 250
39105: PPUSH
39106: LD_VAR 0 1
39110: PPUSH
39111: CALL_OW 251
39115: PPUSH
39116: LD_VAR 0 2
39120: PPUSH
39121: CALL 37368 0 4
39125: ST_TO_ADDR
// end ;
39126: LD_VAR 0 3
39130: RET
// export function DangerInArea ( side , area ) ; begin
39131: LD_INT 0
39133: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39134: LD_ADDR_VAR 0 3
39138: PUSH
39139: LD_VAR 0 2
39143: PPUSH
39144: LD_INT 81
39146: PUSH
39147: LD_VAR 0 1
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PPUSH
39156: CALL_OW 70
39160: ST_TO_ADDR
// end ;
39161: LD_VAR 0 3
39165: RET
// export function IsExtension ( b ) ; begin
39166: LD_INT 0
39168: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39169: LD_ADDR_VAR 0 2
39173: PUSH
39174: LD_VAR 0 1
39178: PUSH
39179: LD_INT 23
39181: PUSH
39182: LD_INT 20
39184: PUSH
39185: LD_INT 22
39187: PUSH
39188: LD_INT 17
39190: PUSH
39191: LD_INT 24
39193: PUSH
39194: LD_INT 21
39196: PUSH
39197: LD_INT 19
39199: PUSH
39200: LD_INT 16
39202: PUSH
39203: LD_INT 25
39205: PUSH
39206: LD_INT 18
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: IN
39221: ST_TO_ADDR
// end ;
39222: LD_VAR 0 2
39226: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39227: LD_INT 0
39229: PPUSH
39230: PPUSH
39231: PPUSH
// result := [ ] ;
39232: LD_ADDR_VAR 0 4
39236: PUSH
39237: EMPTY
39238: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39239: LD_ADDR_VAR 0 5
39243: PUSH
39244: LD_VAR 0 2
39248: PPUSH
39249: LD_INT 21
39251: PUSH
39252: LD_INT 3
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PPUSH
39259: CALL_OW 70
39263: ST_TO_ADDR
// if not tmp then
39264: LD_VAR 0 5
39268: NOT
39269: IFFALSE 39273
// exit ;
39271: GO 39337
// if checkLink then
39273: LD_VAR 0 3
39277: IFFALSE 39327
// begin for i in tmp do
39279: LD_ADDR_VAR 0 6
39283: PUSH
39284: LD_VAR 0 5
39288: PUSH
39289: FOR_IN
39290: IFFALSE 39325
// if GetBase ( i ) <> base then
39292: LD_VAR 0 6
39296: PPUSH
39297: CALL_OW 274
39301: PUSH
39302: LD_VAR 0 1
39306: NONEQUAL
39307: IFFALSE 39323
// ComLinkToBase ( base , i ) ;
39309: LD_VAR 0 1
39313: PPUSH
39314: LD_VAR 0 6
39318: PPUSH
39319: CALL_OW 169
39323: GO 39289
39325: POP
39326: POP
// end ; result := tmp ;
39327: LD_ADDR_VAR 0 4
39331: PUSH
39332: LD_VAR 0 5
39336: ST_TO_ADDR
// end ;
39337: LD_VAR 0 4
39341: RET
// export function ComComplete ( units , b ) ; var i ; begin
39342: LD_INT 0
39344: PPUSH
39345: PPUSH
// if not units then
39346: LD_VAR 0 1
39350: NOT
39351: IFFALSE 39355
// exit ;
39353: GO 39445
// for i in units do
39355: LD_ADDR_VAR 0 4
39359: PUSH
39360: LD_VAR 0 1
39364: PUSH
39365: FOR_IN
39366: IFFALSE 39443
// if BuildingStatus ( b ) = bs_build then
39368: LD_VAR 0 2
39372: PPUSH
39373: CALL_OW 461
39377: PUSH
39378: LD_INT 1
39380: EQUAL
39381: IFFALSE 39441
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39383: LD_VAR 0 4
39387: PPUSH
39388: LD_STRING h
39390: PUSH
39391: LD_VAR 0 2
39395: PPUSH
39396: CALL_OW 250
39400: PUSH
39401: LD_VAR 0 2
39405: PPUSH
39406: CALL_OW 251
39410: PUSH
39411: LD_VAR 0 2
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: PUSH
39434: EMPTY
39435: LIST
39436: PPUSH
39437: CALL_OW 446
39441: GO 39365
39443: POP
39444: POP
// end ;
39445: LD_VAR 0 3
39449: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39450: LD_INT 0
39452: PPUSH
39453: PPUSH
39454: PPUSH
39455: PPUSH
39456: PPUSH
39457: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39458: LD_VAR 0 1
39462: NOT
39463: PUSH
39464: LD_VAR 0 1
39468: PPUSH
39469: CALL_OW 263
39473: PUSH
39474: LD_INT 2
39476: NONEQUAL
39477: OR
39478: IFFALSE 39482
// exit ;
39480: GO 39798
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39482: LD_ADDR_VAR 0 6
39486: PUSH
39487: LD_INT 22
39489: PUSH
39490: LD_VAR 0 1
39494: PPUSH
39495: CALL_OW 255
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 2
39506: PUSH
39507: LD_INT 30
39509: PUSH
39510: LD_INT 36
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 34
39519: PUSH
39520: LD_INT 31
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PPUSH
39536: CALL_OW 69
39540: ST_TO_ADDR
// if not tmp then
39541: LD_VAR 0 6
39545: NOT
39546: IFFALSE 39550
// exit ;
39548: GO 39798
// result := [ ] ;
39550: LD_ADDR_VAR 0 2
39554: PUSH
39555: EMPTY
39556: ST_TO_ADDR
// for i in tmp do
39557: LD_ADDR_VAR 0 3
39561: PUSH
39562: LD_VAR 0 6
39566: PUSH
39567: FOR_IN
39568: IFFALSE 39639
// begin t := UnitsInside ( i ) ;
39570: LD_ADDR_VAR 0 4
39574: PUSH
39575: LD_VAR 0 3
39579: PPUSH
39580: CALL_OW 313
39584: ST_TO_ADDR
// if t then
39585: LD_VAR 0 4
39589: IFFALSE 39637
// for j in t do
39591: LD_ADDR_VAR 0 7
39595: PUSH
39596: LD_VAR 0 4
39600: PUSH
39601: FOR_IN
39602: IFFALSE 39635
// result := Replace ( result , result + 1 , j ) ;
39604: LD_ADDR_VAR 0 2
39608: PUSH
39609: LD_VAR 0 2
39613: PPUSH
39614: LD_VAR 0 2
39618: PUSH
39619: LD_INT 1
39621: PLUS
39622: PPUSH
39623: LD_VAR 0 7
39627: PPUSH
39628: CALL_OW 1
39632: ST_TO_ADDR
39633: GO 39601
39635: POP
39636: POP
// end ;
39637: GO 39567
39639: POP
39640: POP
// if not result then
39641: LD_VAR 0 2
39645: NOT
39646: IFFALSE 39650
// exit ;
39648: GO 39798
// mech := result [ 1 ] ;
39650: LD_ADDR_VAR 0 5
39654: PUSH
39655: LD_VAR 0 2
39659: PUSH
39660: LD_INT 1
39662: ARRAY
39663: ST_TO_ADDR
// if result > 1 then
39664: LD_VAR 0 2
39668: PUSH
39669: LD_INT 1
39671: GREATER
39672: IFFALSE 39784
// begin for i = 2 to result do
39674: LD_ADDR_VAR 0 3
39678: PUSH
39679: DOUBLE
39680: LD_INT 2
39682: DEC
39683: ST_TO_ADDR
39684: LD_VAR 0 2
39688: PUSH
39689: FOR_TO
39690: IFFALSE 39782
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39692: LD_ADDR_VAR 0 4
39696: PUSH
39697: LD_VAR 0 2
39701: PUSH
39702: LD_VAR 0 3
39706: ARRAY
39707: PPUSH
39708: LD_INT 3
39710: PPUSH
39711: CALL_OW 259
39715: PUSH
39716: LD_VAR 0 2
39720: PUSH
39721: LD_VAR 0 3
39725: ARRAY
39726: PPUSH
39727: CALL_OW 432
39731: MINUS
39732: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39733: LD_VAR 0 4
39737: PUSH
39738: LD_VAR 0 5
39742: PPUSH
39743: LD_INT 3
39745: PPUSH
39746: CALL_OW 259
39750: PUSH
39751: LD_VAR 0 5
39755: PPUSH
39756: CALL_OW 432
39760: MINUS
39761: GREATEREQUAL
39762: IFFALSE 39780
// mech := result [ i ] ;
39764: LD_ADDR_VAR 0 5
39768: PUSH
39769: LD_VAR 0 2
39773: PUSH
39774: LD_VAR 0 3
39778: ARRAY
39779: ST_TO_ADDR
// end ;
39780: GO 39689
39782: POP
39783: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39784: LD_VAR 0 1
39788: PPUSH
39789: LD_VAR 0 5
39793: PPUSH
39794: CALL_OW 135
// end ;
39798: LD_VAR 0 2
39802: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39803: LD_INT 0
39805: PPUSH
39806: PPUSH
39807: PPUSH
39808: PPUSH
39809: PPUSH
39810: PPUSH
39811: PPUSH
39812: PPUSH
39813: PPUSH
39814: PPUSH
39815: PPUSH
39816: PPUSH
39817: PPUSH
// result := [ ] ;
39818: LD_ADDR_VAR 0 7
39822: PUSH
39823: EMPTY
39824: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39825: LD_VAR 0 1
39829: PPUSH
39830: CALL_OW 266
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: IN
39845: NOT
39846: IFFALSE 39850
// exit ;
39848: GO 41484
// if name then
39850: LD_VAR 0 3
39854: IFFALSE 39870
// SetBName ( base_dep , name ) ;
39856: LD_VAR 0 1
39860: PPUSH
39861: LD_VAR 0 3
39865: PPUSH
39866: CALL_OW 500
// base := GetBase ( base_dep ) ;
39870: LD_ADDR_VAR 0 15
39874: PUSH
39875: LD_VAR 0 1
39879: PPUSH
39880: CALL_OW 274
39884: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39885: LD_ADDR_VAR 0 16
39889: PUSH
39890: LD_VAR 0 1
39894: PPUSH
39895: CALL_OW 255
39899: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39900: LD_ADDR_VAR 0 17
39904: PUSH
39905: LD_VAR 0 1
39909: PPUSH
39910: CALL_OW 248
39914: ST_TO_ADDR
// if sources then
39915: LD_VAR 0 5
39919: IFFALSE 39966
// for i = 1 to 3 do
39921: LD_ADDR_VAR 0 8
39925: PUSH
39926: DOUBLE
39927: LD_INT 1
39929: DEC
39930: ST_TO_ADDR
39931: LD_INT 3
39933: PUSH
39934: FOR_TO
39935: IFFALSE 39964
// AddResourceType ( base , i , sources [ i ] ) ;
39937: LD_VAR 0 15
39941: PPUSH
39942: LD_VAR 0 8
39946: PPUSH
39947: LD_VAR 0 5
39951: PUSH
39952: LD_VAR 0 8
39956: ARRAY
39957: PPUSH
39958: CALL_OW 276
39962: GO 39934
39964: POP
39965: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39966: LD_ADDR_VAR 0 18
39970: PUSH
39971: LD_VAR 0 15
39975: PPUSH
39976: LD_VAR 0 2
39980: PPUSH
39981: LD_INT 1
39983: PPUSH
39984: CALL 39227 0 3
39988: ST_TO_ADDR
// InitHc ;
39989: CALL_OW 19
// InitUc ;
39993: CALL_OW 18
// uc_side := side ;
39997: LD_ADDR_OWVAR 20
40001: PUSH
40002: LD_VAR 0 16
40006: ST_TO_ADDR
// uc_nation := nation ;
40007: LD_ADDR_OWVAR 21
40011: PUSH
40012: LD_VAR 0 17
40016: ST_TO_ADDR
// if buildings then
40017: LD_VAR 0 18
40021: IFFALSE 41343
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40023: LD_ADDR_VAR 0 19
40027: PUSH
40028: LD_VAR 0 18
40032: PPUSH
40033: LD_INT 2
40035: PUSH
40036: LD_INT 30
40038: PUSH
40039: LD_INT 29
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 30
40048: PUSH
40049: LD_INT 30
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: LIST
40060: PPUSH
40061: CALL_OW 72
40065: ST_TO_ADDR
// if tmp then
40066: LD_VAR 0 19
40070: IFFALSE 40118
// for i in tmp do
40072: LD_ADDR_VAR 0 8
40076: PUSH
40077: LD_VAR 0 19
40081: PUSH
40082: FOR_IN
40083: IFFALSE 40116
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40085: LD_VAR 0 8
40089: PPUSH
40090: CALL_OW 250
40094: PPUSH
40095: LD_VAR 0 8
40099: PPUSH
40100: CALL_OW 251
40104: PPUSH
40105: LD_VAR 0 16
40109: PPUSH
40110: CALL_OW 441
40114: GO 40082
40116: POP
40117: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40118: LD_VAR 0 18
40122: PPUSH
40123: LD_INT 2
40125: PUSH
40126: LD_INT 30
40128: PUSH
40129: LD_INT 32
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 30
40138: PUSH
40139: LD_INT 33
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: LIST
40150: PPUSH
40151: CALL_OW 72
40155: IFFALSE 40243
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40157: LD_ADDR_VAR 0 8
40161: PUSH
40162: LD_VAR 0 18
40166: PPUSH
40167: LD_INT 2
40169: PUSH
40170: LD_INT 30
40172: PUSH
40173: LD_INT 32
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 30
40182: PUSH
40183: LD_INT 33
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: LIST
40194: PPUSH
40195: CALL_OW 72
40199: PUSH
40200: FOR_IN
40201: IFFALSE 40241
// begin if not GetBWeapon ( i ) then
40203: LD_VAR 0 8
40207: PPUSH
40208: CALL_OW 269
40212: NOT
40213: IFFALSE 40239
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40215: LD_VAR 0 8
40219: PPUSH
40220: LD_VAR 0 8
40224: PPUSH
40225: LD_VAR 0 2
40229: PPUSH
40230: CALL 41489 0 2
40234: PPUSH
40235: CALL_OW 431
// end ;
40239: GO 40200
40241: POP
40242: POP
// end ; for i = 1 to personel do
40243: LD_ADDR_VAR 0 8
40247: PUSH
40248: DOUBLE
40249: LD_INT 1
40251: DEC
40252: ST_TO_ADDR
40253: LD_VAR 0 6
40257: PUSH
40258: FOR_TO
40259: IFFALSE 41323
// begin if i > 4 then
40261: LD_VAR 0 8
40265: PUSH
40266: LD_INT 4
40268: GREATER
40269: IFFALSE 40273
// break ;
40271: GO 41323
// case i of 1 :
40273: LD_VAR 0 8
40277: PUSH
40278: LD_INT 1
40280: DOUBLE
40281: EQUAL
40282: IFTRUE 40286
40284: GO 40366
40286: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40287: LD_ADDR_VAR 0 12
40291: PUSH
40292: LD_VAR 0 18
40296: PPUSH
40297: LD_INT 22
40299: PUSH
40300: LD_VAR 0 16
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 58
40311: PUSH
40312: EMPTY
40313: LIST
40314: PUSH
40315: LD_INT 2
40317: PUSH
40318: LD_INT 30
40320: PUSH
40321: LD_INT 32
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 30
40330: PUSH
40331: LD_INT 4
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 30
40340: PUSH
40341: LD_INT 5
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: LIST
40358: PPUSH
40359: CALL_OW 72
40363: ST_TO_ADDR
40364: GO 40588
40366: LD_INT 2
40368: DOUBLE
40369: EQUAL
40370: IFTRUE 40374
40372: GO 40436
40374: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40375: LD_ADDR_VAR 0 12
40379: PUSH
40380: LD_VAR 0 18
40384: PPUSH
40385: LD_INT 22
40387: PUSH
40388: LD_VAR 0 16
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: LD_INT 30
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 30
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: LIST
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PPUSH
40429: CALL_OW 72
40433: ST_TO_ADDR
40434: GO 40588
40436: LD_INT 3
40438: DOUBLE
40439: EQUAL
40440: IFTRUE 40444
40442: GO 40506
40444: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40445: LD_ADDR_VAR 0 12
40449: PUSH
40450: LD_VAR 0 18
40454: PPUSH
40455: LD_INT 22
40457: PUSH
40458: LD_VAR 0 16
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 2
40469: PUSH
40470: LD_INT 30
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 30
40482: PUSH
40483: LD_INT 3
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: LIST
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PPUSH
40499: CALL_OW 72
40503: ST_TO_ADDR
40504: GO 40588
40506: LD_INT 4
40508: DOUBLE
40509: EQUAL
40510: IFTRUE 40514
40512: GO 40587
40514: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40515: LD_ADDR_VAR 0 12
40519: PUSH
40520: LD_VAR 0 18
40524: PPUSH
40525: LD_INT 22
40527: PUSH
40528: LD_VAR 0 16
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: LD_INT 30
40542: PUSH
40543: LD_INT 6
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 30
40552: PUSH
40553: LD_INT 7
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 30
40562: PUSH
40563: LD_INT 8
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PPUSH
40580: CALL_OW 72
40584: ST_TO_ADDR
40585: GO 40588
40587: POP
// if i = 1 then
40588: LD_VAR 0 8
40592: PUSH
40593: LD_INT 1
40595: EQUAL
40596: IFFALSE 40707
// begin tmp := [ ] ;
40598: LD_ADDR_VAR 0 19
40602: PUSH
40603: EMPTY
40604: ST_TO_ADDR
// for j in f do
40605: LD_ADDR_VAR 0 9
40609: PUSH
40610: LD_VAR 0 12
40614: PUSH
40615: FOR_IN
40616: IFFALSE 40689
// if GetBType ( j ) = b_bunker then
40618: LD_VAR 0 9
40622: PPUSH
40623: CALL_OW 266
40627: PUSH
40628: LD_INT 32
40630: EQUAL
40631: IFFALSE 40658
// tmp := Insert ( tmp , 1 , j ) else
40633: LD_ADDR_VAR 0 19
40637: PUSH
40638: LD_VAR 0 19
40642: PPUSH
40643: LD_INT 1
40645: PPUSH
40646: LD_VAR 0 9
40650: PPUSH
40651: CALL_OW 2
40655: ST_TO_ADDR
40656: GO 40687
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40658: LD_ADDR_VAR 0 19
40662: PUSH
40663: LD_VAR 0 19
40667: PPUSH
40668: LD_VAR 0 19
40672: PUSH
40673: LD_INT 1
40675: PLUS
40676: PPUSH
40677: LD_VAR 0 9
40681: PPUSH
40682: CALL_OW 2
40686: ST_TO_ADDR
40687: GO 40615
40689: POP
40690: POP
// if tmp then
40691: LD_VAR 0 19
40695: IFFALSE 40707
// f := tmp ;
40697: LD_ADDR_VAR 0 12
40701: PUSH
40702: LD_VAR 0 19
40706: ST_TO_ADDR
// end ; x := personel [ i ] ;
40707: LD_ADDR_VAR 0 13
40711: PUSH
40712: LD_VAR 0 6
40716: PUSH
40717: LD_VAR 0 8
40721: ARRAY
40722: ST_TO_ADDR
// if x = - 1 then
40723: LD_VAR 0 13
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: EQUAL
40732: IFFALSE 40941
// begin for j in f do
40734: LD_ADDR_VAR 0 9
40738: PUSH
40739: LD_VAR 0 12
40743: PUSH
40744: FOR_IN
40745: IFFALSE 40937
// repeat InitHc ;
40747: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40751: LD_VAR 0 9
40755: PPUSH
40756: CALL_OW 266
40760: PUSH
40761: LD_INT 5
40763: EQUAL
40764: IFFALSE 40834
// begin if UnitsInside ( j ) < 3 then
40766: LD_VAR 0 9
40770: PPUSH
40771: CALL_OW 313
40775: PUSH
40776: LD_INT 3
40778: LESS
40779: IFFALSE 40815
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40781: LD_INT 0
40783: PPUSH
40784: LD_INT 5
40786: PUSH
40787: LD_INT 8
40789: PUSH
40790: LD_INT 9
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: LIST
40797: PUSH
40798: LD_VAR 0 17
40802: ARRAY
40803: PPUSH
40804: LD_VAR 0 4
40808: PPUSH
40809: CALL_OW 380
40813: GO 40832
// PrepareHuman ( false , i , skill ) ;
40815: LD_INT 0
40817: PPUSH
40818: LD_VAR 0 8
40822: PPUSH
40823: LD_VAR 0 4
40827: PPUSH
40828: CALL_OW 380
// end else
40832: GO 40851
// PrepareHuman ( false , i , skill ) ;
40834: LD_INT 0
40836: PPUSH
40837: LD_VAR 0 8
40841: PPUSH
40842: LD_VAR 0 4
40846: PPUSH
40847: CALL_OW 380
// un := CreateHuman ;
40851: LD_ADDR_VAR 0 14
40855: PUSH
40856: CALL_OW 44
40860: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40861: LD_ADDR_VAR 0 7
40865: PUSH
40866: LD_VAR 0 7
40870: PPUSH
40871: LD_INT 1
40873: PPUSH
40874: LD_VAR 0 14
40878: PPUSH
40879: CALL_OW 2
40883: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40884: LD_VAR 0 14
40888: PPUSH
40889: LD_VAR 0 9
40893: PPUSH
40894: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40898: LD_VAR 0 9
40902: PPUSH
40903: CALL_OW 313
40907: PUSH
40908: LD_INT 6
40910: EQUAL
40911: PUSH
40912: LD_VAR 0 9
40916: PPUSH
40917: CALL_OW 266
40921: PUSH
40922: LD_INT 32
40924: PUSH
40925: LD_INT 31
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: IN
40932: OR
40933: IFFALSE 40747
40935: GO 40744
40937: POP
40938: POP
// end else
40939: GO 41321
// for j = 1 to x do
40941: LD_ADDR_VAR 0 9
40945: PUSH
40946: DOUBLE
40947: LD_INT 1
40949: DEC
40950: ST_TO_ADDR
40951: LD_VAR 0 13
40955: PUSH
40956: FOR_TO
40957: IFFALSE 41319
// begin InitHc ;
40959: CALL_OW 19
// if not f then
40963: LD_VAR 0 12
40967: NOT
40968: IFFALSE 41057
// begin PrepareHuman ( false , i , skill ) ;
40970: LD_INT 0
40972: PPUSH
40973: LD_VAR 0 8
40977: PPUSH
40978: LD_VAR 0 4
40982: PPUSH
40983: CALL_OW 380
// un := CreateHuman ;
40987: LD_ADDR_VAR 0 14
40991: PUSH
40992: CALL_OW 44
40996: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40997: LD_ADDR_VAR 0 7
41001: PUSH
41002: LD_VAR 0 7
41006: PPUSH
41007: LD_INT 1
41009: PPUSH
41010: LD_VAR 0 14
41014: PPUSH
41015: CALL_OW 2
41019: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41020: LD_VAR 0 14
41024: PPUSH
41025: LD_VAR 0 1
41029: PPUSH
41030: CALL_OW 250
41034: PPUSH
41035: LD_VAR 0 1
41039: PPUSH
41040: CALL_OW 251
41044: PPUSH
41045: LD_INT 10
41047: PPUSH
41048: LD_INT 0
41050: PPUSH
41051: CALL_OW 50
// continue ;
41055: GO 40956
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41057: LD_VAR 0 12
41061: PUSH
41062: LD_INT 1
41064: ARRAY
41065: PPUSH
41066: CALL_OW 313
41070: PUSH
41071: LD_VAR 0 12
41075: PUSH
41076: LD_INT 1
41078: ARRAY
41079: PPUSH
41080: CALL_OW 266
41084: PUSH
41085: LD_INT 32
41087: PUSH
41088: LD_INT 31
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: IN
41095: AND
41096: PUSH
41097: LD_VAR 0 12
41101: PUSH
41102: LD_INT 1
41104: ARRAY
41105: PPUSH
41106: CALL_OW 313
41110: PUSH
41111: LD_INT 6
41113: EQUAL
41114: OR
41115: IFFALSE 41135
// f := Delete ( f , 1 ) ;
41117: LD_ADDR_VAR 0 12
41121: PUSH
41122: LD_VAR 0 12
41126: PPUSH
41127: LD_INT 1
41129: PPUSH
41130: CALL_OW 3
41134: ST_TO_ADDR
// if not f then
41135: LD_VAR 0 12
41139: NOT
41140: IFFALSE 41158
// begin x := x + 2 ;
41142: LD_ADDR_VAR 0 13
41146: PUSH
41147: LD_VAR 0 13
41151: PUSH
41152: LD_INT 2
41154: PLUS
41155: ST_TO_ADDR
// continue ;
41156: GO 40956
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41158: LD_VAR 0 12
41162: PUSH
41163: LD_INT 1
41165: ARRAY
41166: PPUSH
41167: CALL_OW 266
41171: PUSH
41172: LD_INT 5
41174: EQUAL
41175: IFFALSE 41249
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41177: LD_VAR 0 12
41181: PUSH
41182: LD_INT 1
41184: ARRAY
41185: PPUSH
41186: CALL_OW 313
41190: PUSH
41191: LD_INT 3
41193: LESS
41194: IFFALSE 41230
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41196: LD_INT 0
41198: PPUSH
41199: LD_INT 5
41201: PUSH
41202: LD_INT 8
41204: PUSH
41205: LD_INT 9
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: LIST
41212: PUSH
41213: LD_VAR 0 17
41217: ARRAY
41218: PPUSH
41219: LD_VAR 0 4
41223: PPUSH
41224: CALL_OW 380
41228: GO 41247
// PrepareHuman ( false , i , skill ) ;
41230: LD_INT 0
41232: PPUSH
41233: LD_VAR 0 8
41237: PPUSH
41238: LD_VAR 0 4
41242: PPUSH
41243: CALL_OW 380
// end else
41247: GO 41266
// PrepareHuman ( false , i , skill ) ;
41249: LD_INT 0
41251: PPUSH
41252: LD_VAR 0 8
41256: PPUSH
41257: LD_VAR 0 4
41261: PPUSH
41262: CALL_OW 380
// un := CreateHuman ;
41266: LD_ADDR_VAR 0 14
41270: PUSH
41271: CALL_OW 44
41275: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41276: LD_ADDR_VAR 0 7
41280: PUSH
41281: LD_VAR 0 7
41285: PPUSH
41286: LD_INT 1
41288: PPUSH
41289: LD_VAR 0 14
41293: PPUSH
41294: CALL_OW 2
41298: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41299: LD_VAR 0 14
41303: PPUSH
41304: LD_VAR 0 12
41308: PUSH
41309: LD_INT 1
41311: ARRAY
41312: PPUSH
41313: CALL_OW 52
// end ;
41317: GO 40956
41319: POP
41320: POP
// end ;
41321: GO 40258
41323: POP
41324: POP
// result := result ^ buildings ;
41325: LD_ADDR_VAR 0 7
41329: PUSH
41330: LD_VAR 0 7
41334: PUSH
41335: LD_VAR 0 18
41339: ADD
41340: ST_TO_ADDR
// end else
41341: GO 41484
// begin for i = 1 to personel do
41343: LD_ADDR_VAR 0 8
41347: PUSH
41348: DOUBLE
41349: LD_INT 1
41351: DEC
41352: ST_TO_ADDR
41353: LD_VAR 0 6
41357: PUSH
41358: FOR_TO
41359: IFFALSE 41482
// begin if i > 4 then
41361: LD_VAR 0 8
41365: PUSH
41366: LD_INT 4
41368: GREATER
41369: IFFALSE 41373
// break ;
41371: GO 41482
// x := personel [ i ] ;
41373: LD_ADDR_VAR 0 13
41377: PUSH
41378: LD_VAR 0 6
41382: PUSH
41383: LD_VAR 0 8
41387: ARRAY
41388: ST_TO_ADDR
// if x = - 1 then
41389: LD_VAR 0 13
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: EQUAL
41398: IFFALSE 41402
// continue ;
41400: GO 41358
// PrepareHuman ( false , i , skill ) ;
41402: LD_INT 0
41404: PPUSH
41405: LD_VAR 0 8
41409: PPUSH
41410: LD_VAR 0 4
41414: PPUSH
41415: CALL_OW 380
// un := CreateHuman ;
41419: LD_ADDR_VAR 0 14
41423: PUSH
41424: CALL_OW 44
41428: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41429: LD_VAR 0 14
41433: PPUSH
41434: LD_VAR 0 1
41438: PPUSH
41439: CALL_OW 250
41443: PPUSH
41444: LD_VAR 0 1
41448: PPUSH
41449: CALL_OW 251
41453: PPUSH
41454: LD_INT 10
41456: PPUSH
41457: LD_INT 0
41459: PPUSH
41460: CALL_OW 50
// result := result ^ un ;
41464: LD_ADDR_VAR 0 7
41468: PUSH
41469: LD_VAR 0 7
41473: PUSH
41474: LD_VAR 0 14
41478: ADD
41479: ST_TO_ADDR
// end ;
41480: GO 41358
41482: POP
41483: POP
// end ; end ;
41484: LD_VAR 0 7
41488: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41489: LD_INT 0
41491: PPUSH
41492: PPUSH
41493: PPUSH
41494: PPUSH
41495: PPUSH
41496: PPUSH
41497: PPUSH
41498: PPUSH
41499: PPUSH
41500: PPUSH
41501: PPUSH
41502: PPUSH
41503: PPUSH
41504: PPUSH
41505: PPUSH
41506: PPUSH
// result := false ;
41507: LD_ADDR_VAR 0 3
41511: PUSH
41512: LD_INT 0
41514: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41515: LD_VAR 0 1
41519: NOT
41520: PUSH
41521: LD_VAR 0 1
41525: PPUSH
41526: CALL_OW 266
41530: PUSH
41531: LD_INT 32
41533: PUSH
41534: LD_INT 33
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: IN
41541: NOT
41542: OR
41543: IFFALSE 41547
// exit ;
41545: GO 42656
// nat := GetNation ( tower ) ;
41547: LD_ADDR_VAR 0 12
41551: PUSH
41552: LD_VAR 0 1
41556: PPUSH
41557: CALL_OW 248
41561: ST_TO_ADDR
// side := GetSide ( tower ) ;
41562: LD_ADDR_VAR 0 16
41566: PUSH
41567: LD_VAR 0 1
41571: PPUSH
41572: CALL_OW 255
41576: ST_TO_ADDR
// x := GetX ( tower ) ;
41577: LD_ADDR_VAR 0 10
41581: PUSH
41582: LD_VAR 0 1
41586: PPUSH
41587: CALL_OW 250
41591: ST_TO_ADDR
// y := GetY ( tower ) ;
41592: LD_ADDR_VAR 0 11
41596: PUSH
41597: LD_VAR 0 1
41601: PPUSH
41602: CALL_OW 251
41606: ST_TO_ADDR
// if not x or not y then
41607: LD_VAR 0 10
41611: NOT
41612: PUSH
41613: LD_VAR 0 11
41617: NOT
41618: OR
41619: IFFALSE 41623
// exit ;
41621: GO 42656
// weapon := 0 ;
41623: LD_ADDR_VAR 0 18
41627: PUSH
41628: LD_INT 0
41630: ST_TO_ADDR
// fac_list := [ ] ;
41631: LD_ADDR_VAR 0 17
41635: PUSH
41636: EMPTY
41637: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41638: LD_ADDR_VAR 0 6
41642: PUSH
41643: LD_VAR 0 1
41647: PPUSH
41648: CALL_OW 274
41652: PPUSH
41653: LD_VAR 0 2
41657: PPUSH
41658: LD_INT 0
41660: PPUSH
41661: CALL 39227 0 3
41665: PPUSH
41666: LD_INT 30
41668: PUSH
41669: LD_INT 3
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PPUSH
41676: CALL_OW 72
41680: ST_TO_ADDR
// if not factories then
41681: LD_VAR 0 6
41685: NOT
41686: IFFALSE 41690
// exit ;
41688: GO 42656
// for i in factories do
41690: LD_ADDR_VAR 0 8
41694: PUSH
41695: LD_VAR 0 6
41699: PUSH
41700: FOR_IN
41701: IFFALSE 41726
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41703: LD_ADDR_VAR 0 17
41707: PUSH
41708: LD_VAR 0 17
41712: PUSH
41713: LD_VAR 0 8
41717: PPUSH
41718: CALL_OW 478
41722: UNION
41723: ST_TO_ADDR
41724: GO 41700
41726: POP
41727: POP
// if not fac_list then
41728: LD_VAR 0 17
41732: NOT
41733: IFFALSE 41737
// exit ;
41735: GO 42656
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41737: LD_ADDR_VAR 0 5
41741: PUSH
41742: LD_INT 4
41744: PUSH
41745: LD_INT 5
41747: PUSH
41748: LD_INT 9
41750: PUSH
41751: LD_INT 10
41753: PUSH
41754: LD_INT 6
41756: PUSH
41757: LD_INT 7
41759: PUSH
41760: LD_INT 11
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 27
41774: PUSH
41775: LD_INT 28
41777: PUSH
41778: LD_INT 26
41780: PUSH
41781: LD_INT 30
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 43
41792: PUSH
41793: LD_INT 44
41795: PUSH
41796: LD_INT 46
41798: PUSH
41799: LD_INT 45
41801: PUSH
41802: LD_INT 47
41804: PUSH
41805: LD_INT 49
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: PUSH
41821: LD_VAR 0 12
41825: ARRAY
41826: ST_TO_ADDR
// list := list isect fac_list ;
41827: LD_ADDR_VAR 0 5
41831: PUSH
41832: LD_VAR 0 5
41836: PUSH
41837: LD_VAR 0 17
41841: ISECT
41842: ST_TO_ADDR
// if not list then
41843: LD_VAR 0 5
41847: NOT
41848: IFFALSE 41852
// exit ;
41850: GO 42656
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41852: LD_VAR 0 12
41856: PUSH
41857: LD_INT 3
41859: EQUAL
41860: PUSH
41861: LD_INT 49
41863: PUSH
41864: LD_VAR 0 5
41868: IN
41869: AND
41870: PUSH
41871: LD_INT 31
41873: PPUSH
41874: LD_VAR 0 16
41878: PPUSH
41879: CALL_OW 321
41883: PUSH
41884: LD_INT 2
41886: EQUAL
41887: AND
41888: IFFALSE 41948
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41890: LD_INT 22
41892: PUSH
41893: LD_VAR 0 16
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 35
41904: PUSH
41905: LD_INT 49
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 91
41914: PUSH
41915: LD_VAR 0 1
41919: PUSH
41920: LD_INT 10
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: LIST
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: LIST
41932: PPUSH
41933: CALL_OW 69
41937: NOT
41938: IFFALSE 41948
// weapon := ru_time_lapser ;
41940: LD_ADDR_VAR 0 18
41944: PUSH
41945: LD_INT 49
41947: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41948: LD_VAR 0 12
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: IN
41963: PUSH
41964: LD_INT 11
41966: PUSH
41967: LD_VAR 0 5
41971: IN
41972: PUSH
41973: LD_INT 30
41975: PUSH
41976: LD_VAR 0 5
41980: IN
41981: OR
41982: AND
41983: PUSH
41984: LD_INT 6
41986: PPUSH
41987: LD_VAR 0 16
41991: PPUSH
41992: CALL_OW 321
41996: PUSH
41997: LD_INT 2
41999: EQUAL
42000: AND
42001: IFFALSE 42166
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42003: LD_INT 22
42005: PUSH
42006: LD_VAR 0 16
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: LD_INT 35
42020: PUSH
42021: LD_INT 11
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 35
42030: PUSH
42031: LD_INT 30
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 91
42045: PUSH
42046: LD_VAR 0 1
42050: PUSH
42051: LD_INT 18
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: LIST
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: PPUSH
42064: CALL_OW 69
42068: NOT
42069: PUSH
42070: LD_INT 22
42072: PUSH
42073: LD_VAR 0 16
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 2
42084: PUSH
42085: LD_INT 30
42087: PUSH
42088: LD_INT 32
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 30
42097: PUSH
42098: LD_INT 33
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 91
42112: PUSH
42113: LD_VAR 0 1
42117: PUSH
42118: LD_INT 12
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: LIST
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: LIST
42130: PUSH
42131: EMPTY
42132: LIST
42133: PPUSH
42134: CALL_OW 69
42138: PUSH
42139: LD_INT 2
42141: GREATER
42142: AND
42143: IFFALSE 42166
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42145: LD_ADDR_VAR 0 18
42149: PUSH
42150: LD_INT 11
42152: PUSH
42153: LD_INT 30
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_VAR 0 12
42164: ARRAY
42165: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42166: LD_VAR 0 18
42170: NOT
42171: PUSH
42172: LD_INT 40
42174: PPUSH
42175: LD_VAR 0 16
42179: PPUSH
42180: CALL_OW 321
42184: PUSH
42185: LD_INT 2
42187: EQUAL
42188: AND
42189: PUSH
42190: LD_INT 7
42192: PUSH
42193: LD_VAR 0 5
42197: IN
42198: PUSH
42199: LD_INT 28
42201: PUSH
42202: LD_VAR 0 5
42206: IN
42207: OR
42208: PUSH
42209: LD_INT 45
42211: PUSH
42212: LD_VAR 0 5
42216: IN
42217: OR
42218: AND
42219: IFFALSE 42473
// begin hex := GetHexInfo ( x , y ) ;
42221: LD_ADDR_VAR 0 4
42225: PUSH
42226: LD_VAR 0 10
42230: PPUSH
42231: LD_VAR 0 11
42235: PPUSH
42236: CALL_OW 546
42240: ST_TO_ADDR
// if hex [ 1 ] then
42241: LD_VAR 0 4
42245: PUSH
42246: LD_INT 1
42248: ARRAY
42249: IFFALSE 42253
// exit ;
42251: GO 42656
// height := hex [ 2 ] ;
42253: LD_ADDR_VAR 0 15
42257: PUSH
42258: LD_VAR 0 4
42262: PUSH
42263: LD_INT 2
42265: ARRAY
42266: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42267: LD_ADDR_VAR 0 14
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: LD_INT 3
42280: PUSH
42281: LD_INT 5
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: ST_TO_ADDR
// for i in tmp do
42290: LD_ADDR_VAR 0 8
42294: PUSH
42295: LD_VAR 0 14
42299: PUSH
42300: FOR_IN
42301: IFFALSE 42471
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42303: LD_ADDR_VAR 0 9
42307: PUSH
42308: LD_VAR 0 10
42312: PPUSH
42313: LD_VAR 0 8
42317: PPUSH
42318: LD_INT 5
42320: PPUSH
42321: CALL_OW 272
42325: PUSH
42326: LD_VAR 0 11
42330: PPUSH
42331: LD_VAR 0 8
42335: PPUSH
42336: LD_INT 5
42338: PPUSH
42339: CALL_OW 273
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42348: LD_VAR 0 9
42352: PUSH
42353: LD_INT 1
42355: ARRAY
42356: PPUSH
42357: LD_VAR 0 9
42361: PUSH
42362: LD_INT 2
42364: ARRAY
42365: PPUSH
42366: CALL_OW 488
42370: IFFALSE 42469
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42372: LD_ADDR_VAR 0 4
42376: PUSH
42377: LD_VAR 0 9
42381: PUSH
42382: LD_INT 1
42384: ARRAY
42385: PPUSH
42386: LD_VAR 0 9
42390: PUSH
42391: LD_INT 2
42393: ARRAY
42394: PPUSH
42395: CALL_OW 546
42399: ST_TO_ADDR
// if hex [ 1 ] then
42400: LD_VAR 0 4
42404: PUSH
42405: LD_INT 1
42407: ARRAY
42408: IFFALSE 42412
// continue ;
42410: GO 42300
// h := hex [ 2 ] ;
42412: LD_ADDR_VAR 0 13
42416: PUSH
42417: LD_VAR 0 4
42421: PUSH
42422: LD_INT 2
42424: ARRAY
42425: ST_TO_ADDR
// if h + 7 < height then
42426: LD_VAR 0 13
42430: PUSH
42431: LD_INT 7
42433: PLUS
42434: PUSH
42435: LD_VAR 0 15
42439: LESS
42440: IFFALSE 42469
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42442: LD_ADDR_VAR 0 18
42446: PUSH
42447: LD_INT 7
42449: PUSH
42450: LD_INT 28
42452: PUSH
42453: LD_INT 45
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: LIST
42460: PUSH
42461: LD_VAR 0 12
42465: ARRAY
42466: ST_TO_ADDR
// break ;
42467: GO 42471
// end ; end ; end ;
42469: GO 42300
42471: POP
42472: POP
// end ; if not weapon then
42473: LD_VAR 0 18
42477: NOT
42478: IFFALSE 42538
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42480: LD_ADDR_VAR 0 5
42484: PUSH
42485: LD_VAR 0 5
42489: PUSH
42490: LD_INT 11
42492: PUSH
42493: LD_INT 30
42495: PUSH
42496: LD_INT 49
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: LIST
42503: DIFF
42504: ST_TO_ADDR
// if not list then
42505: LD_VAR 0 5
42509: NOT
42510: IFFALSE 42514
// exit ;
42512: GO 42656
// weapon := list [ rand ( 1 , list ) ] ;
42514: LD_ADDR_VAR 0 18
42518: PUSH
42519: LD_VAR 0 5
42523: PUSH
42524: LD_INT 1
42526: PPUSH
42527: LD_VAR 0 5
42531: PPUSH
42532: CALL_OW 12
42536: ARRAY
42537: ST_TO_ADDR
// end ; if weapon then
42538: LD_VAR 0 18
42542: IFFALSE 42656
// begin tmp := CostOfWeapon ( weapon ) ;
42544: LD_ADDR_VAR 0 14
42548: PUSH
42549: LD_VAR 0 18
42553: PPUSH
42554: CALL_OW 451
42558: ST_TO_ADDR
// j := GetBase ( tower ) ;
42559: LD_ADDR_VAR 0 9
42563: PUSH
42564: LD_VAR 0 1
42568: PPUSH
42569: CALL_OW 274
42573: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42574: LD_VAR 0 9
42578: PPUSH
42579: LD_INT 1
42581: PPUSH
42582: CALL_OW 275
42586: PUSH
42587: LD_VAR 0 14
42591: PUSH
42592: LD_INT 1
42594: ARRAY
42595: GREATEREQUAL
42596: PUSH
42597: LD_VAR 0 9
42601: PPUSH
42602: LD_INT 2
42604: PPUSH
42605: CALL_OW 275
42609: PUSH
42610: LD_VAR 0 14
42614: PUSH
42615: LD_INT 2
42617: ARRAY
42618: GREATEREQUAL
42619: AND
42620: PUSH
42621: LD_VAR 0 9
42625: PPUSH
42626: LD_INT 3
42628: PPUSH
42629: CALL_OW 275
42633: PUSH
42634: LD_VAR 0 14
42638: PUSH
42639: LD_INT 3
42641: ARRAY
42642: GREATEREQUAL
42643: AND
42644: IFFALSE 42656
// result := weapon ;
42646: LD_ADDR_VAR 0 3
42650: PUSH
42651: LD_VAR 0 18
42655: ST_TO_ADDR
// end ; end ;
42656: LD_VAR 0 3
42660: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42661: LD_INT 0
42663: PPUSH
42664: PPUSH
// result := true ;
42665: LD_ADDR_VAR 0 3
42669: PUSH
42670: LD_INT 1
42672: ST_TO_ADDR
// if array1 = array2 then
42673: LD_VAR 0 1
42677: PUSH
42678: LD_VAR 0 2
42682: EQUAL
42683: IFFALSE 42743
// begin for i = 1 to array1 do
42685: LD_ADDR_VAR 0 4
42689: PUSH
42690: DOUBLE
42691: LD_INT 1
42693: DEC
42694: ST_TO_ADDR
42695: LD_VAR 0 1
42699: PUSH
42700: FOR_TO
42701: IFFALSE 42739
// if array1 [ i ] <> array2 [ i ] then
42703: LD_VAR 0 1
42707: PUSH
42708: LD_VAR 0 4
42712: ARRAY
42713: PUSH
42714: LD_VAR 0 2
42718: PUSH
42719: LD_VAR 0 4
42723: ARRAY
42724: NONEQUAL
42725: IFFALSE 42737
// begin result := false ;
42727: LD_ADDR_VAR 0 3
42731: PUSH
42732: LD_INT 0
42734: ST_TO_ADDR
// break ;
42735: GO 42739
// end ;
42737: GO 42700
42739: POP
42740: POP
// end else
42741: GO 42751
// result := false ;
42743: LD_ADDR_VAR 0 3
42747: PUSH
42748: LD_INT 0
42750: ST_TO_ADDR
// end ;
42751: LD_VAR 0 3
42755: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42756: LD_INT 0
42758: PPUSH
42759: PPUSH
// if not array1 or not array2 then
42760: LD_VAR 0 1
42764: NOT
42765: PUSH
42766: LD_VAR 0 2
42770: NOT
42771: OR
42772: IFFALSE 42776
// exit ;
42774: GO 42840
// result := true ;
42776: LD_ADDR_VAR 0 3
42780: PUSH
42781: LD_INT 1
42783: ST_TO_ADDR
// for i = 1 to array1 do
42784: LD_ADDR_VAR 0 4
42788: PUSH
42789: DOUBLE
42790: LD_INT 1
42792: DEC
42793: ST_TO_ADDR
42794: LD_VAR 0 1
42798: PUSH
42799: FOR_TO
42800: IFFALSE 42838
// if array1 [ i ] <> array2 [ i ] then
42802: LD_VAR 0 1
42806: PUSH
42807: LD_VAR 0 4
42811: ARRAY
42812: PUSH
42813: LD_VAR 0 2
42817: PUSH
42818: LD_VAR 0 4
42822: ARRAY
42823: NONEQUAL
42824: IFFALSE 42836
// begin result := false ;
42826: LD_ADDR_VAR 0 3
42830: PUSH
42831: LD_INT 0
42833: ST_TO_ADDR
// break ;
42834: GO 42838
// end ;
42836: GO 42799
42838: POP
42839: POP
// end ;
42840: LD_VAR 0 3
42844: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42845: LD_INT 0
42847: PPUSH
42848: PPUSH
42849: PPUSH
// pom := GetBase ( fac ) ;
42850: LD_ADDR_VAR 0 5
42854: PUSH
42855: LD_VAR 0 1
42859: PPUSH
42860: CALL_OW 274
42864: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42865: LD_ADDR_VAR 0 4
42869: PUSH
42870: LD_VAR 0 2
42874: PUSH
42875: LD_INT 1
42877: ARRAY
42878: PPUSH
42879: LD_VAR 0 2
42883: PUSH
42884: LD_INT 2
42886: ARRAY
42887: PPUSH
42888: LD_VAR 0 2
42892: PUSH
42893: LD_INT 3
42895: ARRAY
42896: PPUSH
42897: LD_VAR 0 2
42901: PUSH
42902: LD_INT 4
42904: ARRAY
42905: PPUSH
42906: CALL_OW 449
42910: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42911: LD_ADDR_VAR 0 3
42915: PUSH
42916: LD_VAR 0 5
42920: PPUSH
42921: LD_INT 1
42923: PPUSH
42924: CALL_OW 275
42928: PUSH
42929: LD_VAR 0 4
42933: PUSH
42934: LD_INT 1
42936: ARRAY
42937: GREATEREQUAL
42938: PUSH
42939: LD_VAR 0 5
42943: PPUSH
42944: LD_INT 2
42946: PPUSH
42947: CALL_OW 275
42951: PUSH
42952: LD_VAR 0 4
42956: PUSH
42957: LD_INT 2
42959: ARRAY
42960: GREATEREQUAL
42961: AND
42962: PUSH
42963: LD_VAR 0 5
42967: PPUSH
42968: LD_INT 3
42970: PPUSH
42971: CALL_OW 275
42975: PUSH
42976: LD_VAR 0 4
42980: PUSH
42981: LD_INT 3
42983: ARRAY
42984: GREATEREQUAL
42985: AND
42986: ST_TO_ADDR
// end ;
42987: LD_VAR 0 3
42991: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42992: LD_INT 0
42994: PPUSH
42995: PPUSH
42996: PPUSH
42997: PPUSH
// pom := GetBase ( building ) ;
42998: LD_ADDR_VAR 0 3
43002: PUSH
43003: LD_VAR 0 1
43007: PPUSH
43008: CALL_OW 274
43012: ST_TO_ADDR
// if not pom then
43013: LD_VAR 0 3
43017: NOT
43018: IFFALSE 43022
// exit ;
43020: GO 43192
// btype := GetBType ( building ) ;
43022: LD_ADDR_VAR 0 5
43026: PUSH
43027: LD_VAR 0 1
43031: PPUSH
43032: CALL_OW 266
43036: ST_TO_ADDR
// if btype = b_armoury then
43037: LD_VAR 0 5
43041: PUSH
43042: LD_INT 4
43044: EQUAL
43045: IFFALSE 43055
// btype := b_barracks ;
43047: LD_ADDR_VAR 0 5
43051: PUSH
43052: LD_INT 5
43054: ST_TO_ADDR
// if btype = b_depot then
43055: LD_VAR 0 5
43059: PUSH
43060: LD_INT 0
43062: EQUAL
43063: IFFALSE 43073
// btype := b_warehouse ;
43065: LD_ADDR_VAR 0 5
43069: PUSH
43070: LD_INT 1
43072: ST_TO_ADDR
// if btype = b_workshop then
43073: LD_VAR 0 5
43077: PUSH
43078: LD_INT 2
43080: EQUAL
43081: IFFALSE 43091
// btype := b_factory ;
43083: LD_ADDR_VAR 0 5
43087: PUSH
43088: LD_INT 3
43090: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43091: LD_ADDR_VAR 0 4
43095: PUSH
43096: LD_VAR 0 5
43100: PPUSH
43101: LD_VAR 0 1
43105: PPUSH
43106: CALL_OW 248
43110: PPUSH
43111: CALL_OW 450
43115: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43116: LD_ADDR_VAR 0 2
43120: PUSH
43121: LD_VAR 0 3
43125: PPUSH
43126: LD_INT 1
43128: PPUSH
43129: CALL_OW 275
43133: PUSH
43134: LD_VAR 0 4
43138: PUSH
43139: LD_INT 1
43141: ARRAY
43142: GREATEREQUAL
43143: PUSH
43144: LD_VAR 0 3
43148: PPUSH
43149: LD_INT 2
43151: PPUSH
43152: CALL_OW 275
43156: PUSH
43157: LD_VAR 0 4
43161: PUSH
43162: LD_INT 2
43164: ARRAY
43165: GREATEREQUAL
43166: AND
43167: PUSH
43168: LD_VAR 0 3
43172: PPUSH
43173: LD_INT 3
43175: PPUSH
43176: CALL_OW 275
43180: PUSH
43181: LD_VAR 0 4
43185: PUSH
43186: LD_INT 3
43188: ARRAY
43189: GREATEREQUAL
43190: AND
43191: ST_TO_ADDR
// end ;
43192: LD_VAR 0 2
43196: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43197: LD_INT 0
43199: PPUSH
43200: PPUSH
43201: PPUSH
// pom := GetBase ( building ) ;
43202: LD_ADDR_VAR 0 4
43206: PUSH
43207: LD_VAR 0 1
43211: PPUSH
43212: CALL_OW 274
43216: ST_TO_ADDR
// if not pom then
43217: LD_VAR 0 4
43221: NOT
43222: IFFALSE 43226
// exit ;
43224: GO 43327
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43226: LD_ADDR_VAR 0 5
43230: PUSH
43231: LD_VAR 0 2
43235: PPUSH
43236: LD_VAR 0 1
43240: PPUSH
43241: CALL_OW 248
43245: PPUSH
43246: CALL_OW 450
43250: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43251: LD_ADDR_VAR 0 3
43255: PUSH
43256: LD_VAR 0 4
43260: PPUSH
43261: LD_INT 1
43263: PPUSH
43264: CALL_OW 275
43268: PUSH
43269: LD_VAR 0 5
43273: PUSH
43274: LD_INT 1
43276: ARRAY
43277: GREATEREQUAL
43278: PUSH
43279: LD_VAR 0 4
43283: PPUSH
43284: LD_INT 2
43286: PPUSH
43287: CALL_OW 275
43291: PUSH
43292: LD_VAR 0 5
43296: PUSH
43297: LD_INT 2
43299: ARRAY
43300: GREATEREQUAL
43301: AND
43302: PUSH
43303: LD_VAR 0 4
43307: PPUSH
43308: LD_INT 3
43310: PPUSH
43311: CALL_OW 275
43315: PUSH
43316: LD_VAR 0 5
43320: PUSH
43321: LD_INT 3
43323: ARRAY
43324: GREATEREQUAL
43325: AND
43326: ST_TO_ADDR
// end ;
43327: LD_VAR 0 3
43331: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43332: LD_INT 0
43334: PPUSH
43335: PPUSH
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
43340: PPUSH
43341: PPUSH
43342: PPUSH
43343: PPUSH
43344: PPUSH
// result := false ;
43345: LD_ADDR_VAR 0 8
43349: PUSH
43350: LD_INT 0
43352: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43353: LD_VAR 0 5
43357: NOT
43358: PUSH
43359: LD_VAR 0 1
43363: NOT
43364: OR
43365: PUSH
43366: LD_VAR 0 2
43370: NOT
43371: OR
43372: PUSH
43373: LD_VAR 0 3
43377: NOT
43378: OR
43379: IFFALSE 43383
// exit ;
43381: GO 44197
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43383: LD_ADDR_VAR 0 14
43387: PUSH
43388: LD_VAR 0 1
43392: PPUSH
43393: LD_VAR 0 2
43397: PPUSH
43398: LD_VAR 0 3
43402: PPUSH
43403: LD_VAR 0 4
43407: PPUSH
43408: LD_VAR 0 5
43412: PUSH
43413: LD_INT 1
43415: ARRAY
43416: PPUSH
43417: CALL_OW 248
43421: PPUSH
43422: LD_INT 0
43424: PPUSH
43425: CALL 45450 0 6
43429: ST_TO_ADDR
// if not hexes then
43430: LD_VAR 0 14
43434: NOT
43435: IFFALSE 43439
// exit ;
43437: GO 44197
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43439: LD_ADDR_VAR 0 17
43443: PUSH
43444: LD_VAR 0 5
43448: PPUSH
43449: LD_INT 22
43451: PUSH
43452: LD_VAR 0 13
43456: PPUSH
43457: CALL_OW 255
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: LD_INT 30
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 30
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: LIST
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PPUSH
43498: CALL_OW 72
43502: ST_TO_ADDR
// for i = 1 to hexes do
43503: LD_ADDR_VAR 0 9
43507: PUSH
43508: DOUBLE
43509: LD_INT 1
43511: DEC
43512: ST_TO_ADDR
43513: LD_VAR 0 14
43517: PUSH
43518: FOR_TO
43519: IFFALSE 44195
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43521: LD_ADDR_VAR 0 13
43525: PUSH
43526: LD_VAR 0 14
43530: PUSH
43531: LD_VAR 0 9
43535: ARRAY
43536: PUSH
43537: LD_INT 1
43539: ARRAY
43540: PPUSH
43541: LD_VAR 0 14
43545: PUSH
43546: LD_VAR 0 9
43550: ARRAY
43551: PUSH
43552: LD_INT 2
43554: ARRAY
43555: PPUSH
43556: CALL_OW 428
43560: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43561: LD_VAR 0 14
43565: PUSH
43566: LD_VAR 0 9
43570: ARRAY
43571: PUSH
43572: LD_INT 1
43574: ARRAY
43575: PPUSH
43576: LD_VAR 0 14
43580: PUSH
43581: LD_VAR 0 9
43585: ARRAY
43586: PUSH
43587: LD_INT 2
43589: ARRAY
43590: PPUSH
43591: CALL_OW 351
43595: PUSH
43596: LD_VAR 0 14
43600: PUSH
43601: LD_VAR 0 9
43605: ARRAY
43606: PUSH
43607: LD_INT 1
43609: ARRAY
43610: PPUSH
43611: LD_VAR 0 14
43615: PUSH
43616: LD_VAR 0 9
43620: ARRAY
43621: PUSH
43622: LD_INT 2
43624: ARRAY
43625: PPUSH
43626: CALL_OW 488
43630: NOT
43631: OR
43632: PUSH
43633: LD_VAR 0 13
43637: PPUSH
43638: CALL_OW 247
43642: PUSH
43643: LD_INT 3
43645: EQUAL
43646: OR
43647: IFFALSE 43653
// exit ;
43649: POP
43650: POP
43651: GO 44197
// if not tmp then
43653: LD_VAR 0 13
43657: NOT
43658: IFFALSE 43662
// continue ;
43660: GO 43518
// result := true ;
43662: LD_ADDR_VAR 0 8
43666: PUSH
43667: LD_INT 1
43669: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43670: LD_VAR 0 6
43674: PUSH
43675: LD_VAR 0 13
43679: PPUSH
43680: CALL_OW 247
43684: PUSH
43685: LD_INT 2
43687: EQUAL
43688: AND
43689: PUSH
43690: LD_VAR 0 13
43694: PPUSH
43695: CALL_OW 263
43699: PUSH
43700: LD_INT 1
43702: EQUAL
43703: AND
43704: IFFALSE 43868
// begin if IsDrivenBy ( tmp ) then
43706: LD_VAR 0 13
43710: PPUSH
43711: CALL_OW 311
43715: IFFALSE 43719
// continue ;
43717: GO 43518
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43719: LD_VAR 0 6
43723: PPUSH
43724: LD_INT 3
43726: PUSH
43727: LD_INT 60
43729: PUSH
43730: EMPTY
43731: LIST
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 3
43739: PUSH
43740: LD_INT 55
43742: PUSH
43743: EMPTY
43744: LIST
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PPUSH
43754: CALL_OW 72
43758: IFFALSE 43866
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43760: LD_ADDR_VAR 0 18
43764: PUSH
43765: LD_VAR 0 6
43769: PPUSH
43770: LD_INT 3
43772: PUSH
43773: LD_INT 60
43775: PUSH
43776: EMPTY
43777: LIST
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 3
43785: PUSH
43786: LD_INT 55
43788: PUSH
43789: EMPTY
43790: LIST
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PPUSH
43800: CALL_OW 72
43804: PUSH
43805: LD_INT 1
43807: ARRAY
43808: ST_TO_ADDR
// if IsInUnit ( driver ) then
43809: LD_VAR 0 18
43813: PPUSH
43814: CALL_OW 310
43818: IFFALSE 43829
// ComExit ( driver ) ;
43820: LD_VAR 0 18
43824: PPUSH
43825: CALL 69229 0 1
// AddComEnterUnit ( driver , tmp ) ;
43829: LD_VAR 0 18
43833: PPUSH
43834: LD_VAR 0 13
43838: PPUSH
43839: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43843: LD_VAR 0 18
43847: PPUSH
43848: LD_VAR 0 7
43852: PPUSH
43853: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43857: LD_VAR 0 18
43861: PPUSH
43862: CALL_OW 181
// end ; continue ;
43866: GO 43518
// end ; if not cleaners or not tmp in cleaners then
43868: LD_VAR 0 6
43872: NOT
43873: PUSH
43874: LD_VAR 0 13
43878: PUSH
43879: LD_VAR 0 6
43883: IN
43884: NOT
43885: OR
43886: IFFALSE 44193
// begin if dep then
43888: LD_VAR 0 17
43892: IFFALSE 44028
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43894: LD_ADDR_VAR 0 16
43898: PUSH
43899: LD_VAR 0 17
43903: PUSH
43904: LD_INT 1
43906: ARRAY
43907: PPUSH
43908: CALL_OW 250
43912: PPUSH
43913: LD_VAR 0 17
43917: PUSH
43918: LD_INT 1
43920: ARRAY
43921: PPUSH
43922: CALL_OW 254
43926: PPUSH
43927: LD_INT 5
43929: PPUSH
43930: CALL_OW 272
43934: PUSH
43935: LD_VAR 0 17
43939: PUSH
43940: LD_INT 1
43942: ARRAY
43943: PPUSH
43944: CALL_OW 251
43948: PPUSH
43949: LD_VAR 0 17
43953: PUSH
43954: LD_INT 1
43956: ARRAY
43957: PPUSH
43958: CALL_OW 254
43962: PPUSH
43963: LD_INT 5
43965: PPUSH
43966: CALL_OW 273
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43975: LD_VAR 0 16
43979: PUSH
43980: LD_INT 1
43982: ARRAY
43983: PPUSH
43984: LD_VAR 0 16
43988: PUSH
43989: LD_INT 2
43991: ARRAY
43992: PPUSH
43993: CALL_OW 488
43997: IFFALSE 44028
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43999: LD_VAR 0 13
44003: PPUSH
44004: LD_VAR 0 16
44008: PUSH
44009: LD_INT 1
44011: ARRAY
44012: PPUSH
44013: LD_VAR 0 16
44017: PUSH
44018: LD_INT 2
44020: ARRAY
44021: PPUSH
44022: CALL_OW 111
// continue ;
44026: GO 43518
// end ; end ; r := GetDir ( tmp ) ;
44028: LD_ADDR_VAR 0 15
44032: PUSH
44033: LD_VAR 0 13
44037: PPUSH
44038: CALL_OW 254
44042: ST_TO_ADDR
// if r = 5 then
44043: LD_VAR 0 15
44047: PUSH
44048: LD_INT 5
44050: EQUAL
44051: IFFALSE 44061
// r := 0 ;
44053: LD_ADDR_VAR 0 15
44057: PUSH
44058: LD_INT 0
44060: ST_TO_ADDR
// for j = r to 5 do
44061: LD_ADDR_VAR 0 10
44065: PUSH
44066: DOUBLE
44067: LD_VAR 0 15
44071: DEC
44072: ST_TO_ADDR
44073: LD_INT 5
44075: PUSH
44076: FOR_TO
44077: IFFALSE 44191
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44079: LD_ADDR_VAR 0 11
44083: PUSH
44084: LD_VAR 0 13
44088: PPUSH
44089: CALL_OW 250
44093: PPUSH
44094: LD_VAR 0 10
44098: PPUSH
44099: LD_INT 2
44101: PPUSH
44102: CALL_OW 272
44106: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44107: LD_ADDR_VAR 0 12
44111: PUSH
44112: LD_VAR 0 13
44116: PPUSH
44117: CALL_OW 251
44121: PPUSH
44122: LD_VAR 0 10
44126: PPUSH
44127: LD_INT 2
44129: PPUSH
44130: CALL_OW 273
44134: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44135: LD_VAR 0 11
44139: PPUSH
44140: LD_VAR 0 12
44144: PPUSH
44145: CALL_OW 488
44149: PUSH
44150: LD_VAR 0 11
44154: PPUSH
44155: LD_VAR 0 12
44159: PPUSH
44160: CALL_OW 428
44164: NOT
44165: AND
44166: IFFALSE 44189
// begin ComMoveXY ( tmp , _x , _y ) ;
44168: LD_VAR 0 13
44172: PPUSH
44173: LD_VAR 0 11
44177: PPUSH
44178: LD_VAR 0 12
44182: PPUSH
44183: CALL_OW 111
// break ;
44187: GO 44191
// end ; end ;
44189: GO 44076
44191: POP
44192: POP
// end ; end ;
44193: GO 43518
44195: POP
44196: POP
// end ;
44197: LD_VAR 0 8
44201: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44202: LD_INT 0
44204: PPUSH
// result := true ;
44205: LD_ADDR_VAR 0 3
44209: PUSH
44210: LD_INT 1
44212: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44213: LD_VAR 0 2
44217: PUSH
44218: LD_INT 24
44220: DOUBLE
44221: EQUAL
44222: IFTRUE 44232
44224: LD_INT 33
44226: DOUBLE
44227: EQUAL
44228: IFTRUE 44232
44230: GO 44257
44232: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44233: LD_ADDR_VAR 0 3
44237: PUSH
44238: LD_INT 32
44240: PPUSH
44241: LD_VAR 0 1
44245: PPUSH
44246: CALL_OW 321
44250: PUSH
44251: LD_INT 2
44253: EQUAL
44254: ST_TO_ADDR
44255: GO 44573
44257: LD_INT 20
44259: DOUBLE
44260: EQUAL
44261: IFTRUE 44265
44263: GO 44290
44265: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44266: LD_ADDR_VAR 0 3
44270: PUSH
44271: LD_INT 6
44273: PPUSH
44274: LD_VAR 0 1
44278: PPUSH
44279: CALL_OW 321
44283: PUSH
44284: LD_INT 2
44286: EQUAL
44287: ST_TO_ADDR
44288: GO 44573
44290: LD_INT 22
44292: DOUBLE
44293: EQUAL
44294: IFTRUE 44304
44296: LD_INT 36
44298: DOUBLE
44299: EQUAL
44300: IFTRUE 44304
44302: GO 44329
44304: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44305: LD_ADDR_VAR 0 3
44309: PUSH
44310: LD_INT 15
44312: PPUSH
44313: LD_VAR 0 1
44317: PPUSH
44318: CALL_OW 321
44322: PUSH
44323: LD_INT 2
44325: EQUAL
44326: ST_TO_ADDR
44327: GO 44573
44329: LD_INT 30
44331: DOUBLE
44332: EQUAL
44333: IFTRUE 44337
44335: GO 44362
44337: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44338: LD_ADDR_VAR 0 3
44342: PUSH
44343: LD_INT 20
44345: PPUSH
44346: LD_VAR 0 1
44350: PPUSH
44351: CALL_OW 321
44355: PUSH
44356: LD_INT 2
44358: EQUAL
44359: ST_TO_ADDR
44360: GO 44573
44362: LD_INT 28
44364: DOUBLE
44365: EQUAL
44366: IFTRUE 44376
44368: LD_INT 21
44370: DOUBLE
44371: EQUAL
44372: IFTRUE 44376
44374: GO 44401
44376: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44377: LD_ADDR_VAR 0 3
44381: PUSH
44382: LD_INT 21
44384: PPUSH
44385: LD_VAR 0 1
44389: PPUSH
44390: CALL_OW 321
44394: PUSH
44395: LD_INT 2
44397: EQUAL
44398: ST_TO_ADDR
44399: GO 44573
44401: LD_INT 16
44403: DOUBLE
44404: EQUAL
44405: IFTRUE 44409
44407: GO 44434
44409: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44410: LD_ADDR_VAR 0 3
44414: PUSH
44415: LD_INT 84
44417: PPUSH
44418: LD_VAR 0 1
44422: PPUSH
44423: CALL_OW 321
44427: PUSH
44428: LD_INT 2
44430: EQUAL
44431: ST_TO_ADDR
44432: GO 44573
44434: LD_INT 19
44436: DOUBLE
44437: EQUAL
44438: IFTRUE 44448
44440: LD_INT 23
44442: DOUBLE
44443: EQUAL
44444: IFTRUE 44448
44446: GO 44473
44448: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44449: LD_ADDR_VAR 0 3
44453: PUSH
44454: LD_INT 83
44456: PPUSH
44457: LD_VAR 0 1
44461: PPUSH
44462: CALL_OW 321
44466: PUSH
44467: LD_INT 2
44469: EQUAL
44470: ST_TO_ADDR
44471: GO 44573
44473: LD_INT 17
44475: DOUBLE
44476: EQUAL
44477: IFTRUE 44481
44479: GO 44506
44481: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44482: LD_ADDR_VAR 0 3
44486: PUSH
44487: LD_INT 39
44489: PPUSH
44490: LD_VAR 0 1
44494: PPUSH
44495: CALL_OW 321
44499: PUSH
44500: LD_INT 2
44502: EQUAL
44503: ST_TO_ADDR
44504: GO 44573
44506: LD_INT 18
44508: DOUBLE
44509: EQUAL
44510: IFTRUE 44514
44512: GO 44539
44514: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44515: LD_ADDR_VAR 0 3
44519: PUSH
44520: LD_INT 40
44522: PPUSH
44523: LD_VAR 0 1
44527: PPUSH
44528: CALL_OW 321
44532: PUSH
44533: LD_INT 2
44535: EQUAL
44536: ST_TO_ADDR
44537: GO 44573
44539: LD_INT 27
44541: DOUBLE
44542: EQUAL
44543: IFTRUE 44547
44545: GO 44572
44547: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44548: LD_ADDR_VAR 0 3
44552: PUSH
44553: LD_INT 35
44555: PPUSH
44556: LD_VAR 0 1
44560: PPUSH
44561: CALL_OW 321
44565: PUSH
44566: LD_INT 2
44568: EQUAL
44569: ST_TO_ADDR
44570: GO 44573
44572: POP
// end ;
44573: LD_VAR 0 3
44577: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44578: LD_INT 0
44580: PPUSH
44581: PPUSH
44582: PPUSH
44583: PPUSH
44584: PPUSH
44585: PPUSH
44586: PPUSH
44587: PPUSH
44588: PPUSH
44589: PPUSH
44590: PPUSH
// result := false ;
44591: LD_ADDR_VAR 0 6
44595: PUSH
44596: LD_INT 0
44598: ST_TO_ADDR
// if btype = b_depot then
44599: LD_VAR 0 2
44603: PUSH
44604: LD_INT 0
44606: EQUAL
44607: IFFALSE 44619
// begin result := true ;
44609: LD_ADDR_VAR 0 6
44613: PUSH
44614: LD_INT 1
44616: ST_TO_ADDR
// exit ;
44617: GO 45445
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44619: LD_VAR 0 1
44623: NOT
44624: PUSH
44625: LD_VAR 0 1
44629: PPUSH
44630: CALL_OW 266
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: IN
44645: NOT
44646: OR
44647: PUSH
44648: LD_VAR 0 2
44652: NOT
44653: OR
44654: PUSH
44655: LD_VAR 0 5
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: LD_INT 3
44671: PUSH
44672: LD_INT 4
44674: PUSH
44675: LD_INT 5
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: IN
44686: NOT
44687: OR
44688: PUSH
44689: LD_VAR 0 3
44693: PPUSH
44694: LD_VAR 0 4
44698: PPUSH
44699: CALL_OW 488
44703: NOT
44704: OR
44705: IFFALSE 44709
// exit ;
44707: GO 45445
// side := GetSide ( depot ) ;
44709: LD_ADDR_VAR 0 9
44713: PUSH
44714: LD_VAR 0 1
44718: PPUSH
44719: CALL_OW 255
44723: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44724: LD_VAR 0 9
44728: PPUSH
44729: LD_VAR 0 2
44733: PPUSH
44734: CALL 44202 0 2
44738: NOT
44739: IFFALSE 44743
// exit ;
44741: GO 45445
// pom := GetBase ( depot ) ;
44743: LD_ADDR_VAR 0 10
44747: PUSH
44748: LD_VAR 0 1
44752: PPUSH
44753: CALL_OW 274
44757: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44758: LD_ADDR_VAR 0 11
44762: PUSH
44763: LD_VAR 0 2
44767: PPUSH
44768: LD_VAR 0 1
44772: PPUSH
44773: CALL_OW 248
44777: PPUSH
44778: CALL_OW 450
44782: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44783: LD_VAR 0 10
44787: PPUSH
44788: LD_INT 1
44790: PPUSH
44791: CALL_OW 275
44795: PUSH
44796: LD_VAR 0 11
44800: PUSH
44801: LD_INT 1
44803: ARRAY
44804: GREATEREQUAL
44805: PUSH
44806: LD_VAR 0 10
44810: PPUSH
44811: LD_INT 2
44813: PPUSH
44814: CALL_OW 275
44818: PUSH
44819: LD_VAR 0 11
44823: PUSH
44824: LD_INT 2
44826: ARRAY
44827: GREATEREQUAL
44828: AND
44829: PUSH
44830: LD_VAR 0 10
44834: PPUSH
44835: LD_INT 3
44837: PPUSH
44838: CALL_OW 275
44842: PUSH
44843: LD_VAR 0 11
44847: PUSH
44848: LD_INT 3
44850: ARRAY
44851: GREATEREQUAL
44852: AND
44853: NOT
44854: IFFALSE 44858
// exit ;
44856: GO 45445
// if GetBType ( depot ) = b_depot then
44858: LD_VAR 0 1
44862: PPUSH
44863: CALL_OW 266
44867: PUSH
44868: LD_INT 0
44870: EQUAL
44871: IFFALSE 44883
// dist := 28 else
44873: LD_ADDR_VAR 0 14
44877: PUSH
44878: LD_INT 28
44880: ST_TO_ADDR
44881: GO 44891
// dist := 36 ;
44883: LD_ADDR_VAR 0 14
44887: PUSH
44888: LD_INT 36
44890: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44891: LD_VAR 0 1
44895: PPUSH
44896: LD_VAR 0 3
44900: PPUSH
44901: LD_VAR 0 4
44905: PPUSH
44906: CALL_OW 297
44910: PUSH
44911: LD_VAR 0 14
44915: GREATER
44916: IFFALSE 44920
// exit ;
44918: GO 45445
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44920: LD_ADDR_VAR 0 12
44924: PUSH
44925: LD_VAR 0 2
44929: PPUSH
44930: LD_VAR 0 3
44934: PPUSH
44935: LD_VAR 0 4
44939: PPUSH
44940: LD_VAR 0 5
44944: PPUSH
44945: LD_VAR 0 1
44949: PPUSH
44950: CALL_OW 248
44954: PPUSH
44955: LD_INT 0
44957: PPUSH
44958: CALL 45450 0 6
44962: ST_TO_ADDR
// if not hexes then
44963: LD_VAR 0 12
44967: NOT
44968: IFFALSE 44972
// exit ;
44970: GO 45445
// hex := GetHexInfo ( x , y ) ;
44972: LD_ADDR_VAR 0 15
44976: PUSH
44977: LD_VAR 0 3
44981: PPUSH
44982: LD_VAR 0 4
44986: PPUSH
44987: CALL_OW 546
44991: ST_TO_ADDR
// if hex [ 1 ] then
44992: LD_VAR 0 15
44996: PUSH
44997: LD_INT 1
44999: ARRAY
45000: IFFALSE 45004
// exit ;
45002: GO 45445
// height := hex [ 2 ] ;
45004: LD_ADDR_VAR 0 13
45008: PUSH
45009: LD_VAR 0 15
45013: PUSH
45014: LD_INT 2
45016: ARRAY
45017: ST_TO_ADDR
// for i = 1 to hexes do
45018: LD_ADDR_VAR 0 7
45022: PUSH
45023: DOUBLE
45024: LD_INT 1
45026: DEC
45027: ST_TO_ADDR
45028: LD_VAR 0 12
45032: PUSH
45033: FOR_TO
45034: IFFALSE 45364
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45036: LD_VAR 0 12
45040: PUSH
45041: LD_VAR 0 7
45045: ARRAY
45046: PUSH
45047: LD_INT 1
45049: ARRAY
45050: PPUSH
45051: LD_VAR 0 12
45055: PUSH
45056: LD_VAR 0 7
45060: ARRAY
45061: PUSH
45062: LD_INT 2
45064: ARRAY
45065: PPUSH
45066: CALL_OW 488
45070: NOT
45071: PUSH
45072: LD_VAR 0 12
45076: PUSH
45077: LD_VAR 0 7
45081: ARRAY
45082: PUSH
45083: LD_INT 1
45085: ARRAY
45086: PPUSH
45087: LD_VAR 0 12
45091: PUSH
45092: LD_VAR 0 7
45096: ARRAY
45097: PUSH
45098: LD_INT 2
45100: ARRAY
45101: PPUSH
45102: CALL_OW 428
45106: PUSH
45107: LD_INT 0
45109: GREATER
45110: OR
45111: PUSH
45112: LD_VAR 0 12
45116: PUSH
45117: LD_VAR 0 7
45121: ARRAY
45122: PUSH
45123: LD_INT 1
45125: ARRAY
45126: PPUSH
45127: LD_VAR 0 12
45131: PUSH
45132: LD_VAR 0 7
45136: ARRAY
45137: PUSH
45138: LD_INT 2
45140: ARRAY
45141: PPUSH
45142: CALL_OW 351
45146: OR
45147: IFFALSE 45153
// exit ;
45149: POP
45150: POP
45151: GO 45445
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45153: LD_ADDR_VAR 0 8
45157: PUSH
45158: LD_VAR 0 12
45162: PUSH
45163: LD_VAR 0 7
45167: ARRAY
45168: PUSH
45169: LD_INT 1
45171: ARRAY
45172: PPUSH
45173: LD_VAR 0 12
45177: PUSH
45178: LD_VAR 0 7
45182: ARRAY
45183: PUSH
45184: LD_INT 2
45186: ARRAY
45187: PPUSH
45188: CALL_OW 546
45192: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45193: LD_VAR 0 8
45197: PUSH
45198: LD_INT 1
45200: ARRAY
45201: PUSH
45202: LD_VAR 0 8
45206: PUSH
45207: LD_INT 2
45209: ARRAY
45210: PUSH
45211: LD_VAR 0 13
45215: PUSH
45216: LD_INT 2
45218: PLUS
45219: GREATER
45220: OR
45221: PUSH
45222: LD_VAR 0 8
45226: PUSH
45227: LD_INT 2
45229: ARRAY
45230: PUSH
45231: LD_VAR 0 13
45235: PUSH
45236: LD_INT 2
45238: MINUS
45239: LESS
45240: OR
45241: PUSH
45242: LD_VAR 0 8
45246: PUSH
45247: LD_INT 3
45249: ARRAY
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: LD_INT 8
45256: PUSH
45257: LD_INT 9
45259: PUSH
45260: LD_INT 10
45262: PUSH
45263: LD_INT 11
45265: PUSH
45266: LD_INT 12
45268: PUSH
45269: LD_INT 13
45271: PUSH
45272: LD_INT 16
45274: PUSH
45275: LD_INT 17
45277: PUSH
45278: LD_INT 18
45280: PUSH
45281: LD_INT 19
45283: PUSH
45284: LD_INT 20
45286: PUSH
45287: LD_INT 21
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: IN
45305: NOT
45306: OR
45307: PUSH
45308: LD_VAR 0 8
45312: PUSH
45313: LD_INT 5
45315: ARRAY
45316: NOT
45317: OR
45318: PUSH
45319: LD_VAR 0 8
45323: PUSH
45324: LD_INT 6
45326: ARRAY
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: LD_INT 7
45336: PUSH
45337: LD_INT 9
45339: PUSH
45340: LD_INT 10
45342: PUSH
45343: LD_INT 11
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: IN
45354: NOT
45355: OR
45356: IFFALSE 45362
// exit ;
45358: POP
45359: POP
45360: GO 45445
// end ;
45362: GO 45033
45364: POP
45365: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45366: LD_VAR 0 9
45370: PPUSH
45371: LD_VAR 0 3
45375: PPUSH
45376: LD_VAR 0 4
45380: PPUSH
45381: LD_INT 20
45383: PPUSH
45384: CALL 37368 0 4
45388: PUSH
45389: LD_INT 4
45391: ARRAY
45392: IFFALSE 45396
// exit ;
45394: GO 45445
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45396: LD_VAR 0 2
45400: PUSH
45401: LD_INT 29
45403: PUSH
45404: LD_INT 30
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: IN
45411: PUSH
45412: LD_VAR 0 3
45416: PPUSH
45417: LD_VAR 0 4
45421: PPUSH
45422: LD_VAR 0 9
45426: PPUSH
45427: CALL_OW 440
45431: NOT
45432: AND
45433: IFFALSE 45437
// exit ;
45435: GO 45445
// result := true ;
45437: LD_ADDR_VAR 0 6
45441: PUSH
45442: LD_INT 1
45444: ST_TO_ADDR
// end ;
45445: LD_VAR 0 6
45449: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45450: LD_INT 0
45452: PPUSH
45453: PPUSH
45454: PPUSH
45455: PPUSH
45456: PPUSH
45457: PPUSH
45458: PPUSH
45459: PPUSH
45460: PPUSH
45461: PPUSH
45462: PPUSH
45463: PPUSH
45464: PPUSH
45465: PPUSH
45466: PPUSH
45467: PPUSH
45468: PPUSH
45469: PPUSH
45470: PPUSH
45471: PPUSH
45472: PPUSH
45473: PPUSH
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
45478: PPUSH
45479: PPUSH
45480: PPUSH
45481: PPUSH
45482: PPUSH
45483: PPUSH
45484: PPUSH
45485: PPUSH
45486: PPUSH
45487: PPUSH
45488: PPUSH
45489: PPUSH
45490: PPUSH
45491: PPUSH
45492: PPUSH
45493: PPUSH
45494: PPUSH
45495: PPUSH
45496: PPUSH
45497: PPUSH
45498: PPUSH
45499: PPUSH
45500: PPUSH
45501: PPUSH
45502: PPUSH
45503: PPUSH
45504: PPUSH
45505: PPUSH
45506: PPUSH
45507: PPUSH
45508: PPUSH
45509: PPUSH
// result = [ ] ;
45510: LD_ADDR_VAR 0 7
45514: PUSH
45515: EMPTY
45516: ST_TO_ADDR
// temp_list = [ ] ;
45517: LD_ADDR_VAR 0 9
45521: PUSH
45522: EMPTY
45523: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45524: LD_VAR 0 4
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 2
45537: PUSH
45538: LD_INT 3
45540: PUSH
45541: LD_INT 4
45543: PUSH
45544: LD_INT 5
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: IN
45555: NOT
45556: PUSH
45557: LD_VAR 0 1
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: IN
45572: PUSH
45573: LD_VAR 0 5
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: LIST
45591: IN
45592: NOT
45593: AND
45594: OR
45595: IFFALSE 45599
// exit ;
45597: GO 63990
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45599: LD_VAR 0 1
45603: PUSH
45604: LD_INT 6
45606: PUSH
45607: LD_INT 7
45609: PUSH
45610: LD_INT 8
45612: PUSH
45613: LD_INT 13
45615: PUSH
45616: LD_INT 12
45618: PUSH
45619: LD_INT 15
45621: PUSH
45622: LD_INT 11
45624: PUSH
45625: LD_INT 14
45627: PUSH
45628: LD_INT 10
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: IN
45642: IFFALSE 45652
// btype = b_lab ;
45644: LD_ADDR_VAR 0 1
45648: PUSH
45649: LD_INT 6
45651: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45652: LD_VAR 0 6
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: LIST
45670: IN
45671: NOT
45672: PUSH
45673: LD_VAR 0 1
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: LD_INT 3
45689: PUSH
45690: LD_INT 6
45692: PUSH
45693: LD_INT 36
45695: PUSH
45696: LD_INT 4
45698: PUSH
45699: LD_INT 5
45701: PUSH
45702: LD_INT 31
45704: PUSH
45705: LD_INT 32
45707: PUSH
45708: LD_INT 33
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: IN
45724: NOT
45725: PUSH
45726: LD_VAR 0 6
45730: PUSH
45731: LD_INT 1
45733: EQUAL
45734: AND
45735: OR
45736: PUSH
45737: LD_VAR 0 1
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: LD_INT 3
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: IN
45752: NOT
45753: PUSH
45754: LD_VAR 0 6
45758: PUSH
45759: LD_INT 2
45761: EQUAL
45762: AND
45763: OR
45764: IFFALSE 45774
// mode = 0 ;
45766: LD_ADDR_VAR 0 6
45770: PUSH
45771: LD_INT 0
45773: ST_TO_ADDR
// case mode of 0 :
45774: LD_VAR 0 6
45778: PUSH
45779: LD_INT 0
45781: DOUBLE
45782: EQUAL
45783: IFTRUE 45787
45785: GO 57240
45787: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45788: LD_ADDR_VAR 0 11
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 2
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: LD_INT 3
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: LD_INT 3
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45981: LD_ADDR_VAR 0 12
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: NEG
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 3
46138: NEG
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 3
46149: NEG
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46177: LD_ADDR_VAR 0 13
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 2
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: LD_INT 2
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: LD_INT 3
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 3
46336: NEG
46337: PUSH
46338: LD_INT 2
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 3
46348: NEG
46349: PUSH
46350: LD_INT 3
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46376: LD_ADDR_VAR 0 14
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: LD_INT 3
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 3
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46572: LD_ADDR_VAR 0 15
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 2
46706: NEG
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 3
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 3
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46765: LD_ADDR_VAR 0 16
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 3
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 3
46922: PUSH
46923: LD_INT 3
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: LD_INT 3
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46958: LD_ADDR_VAR 0 17
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: LD_INT 2
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47188: LD_ADDR_VAR 0 18
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: LD_INT 2
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47418: LD_ADDR_VAR 0 19
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47648: LD_ADDR_VAR 0 20
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 2
47847: NEG
47848: PUSH
47849: LD_INT 2
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47878: LD_ADDR_VAR 0 21
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 2
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 2
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: NEG
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48108: LD_ADDR_VAR 0 22
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48338: LD_ADDR_VAR 0 23
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 2
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: LD_INT 3
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: LD_INT 3
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48618: LD_ADDR_VAR 0 24
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: LD_INT 2
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 3
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 3
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48894: LD_ADDR_VAR 0 25
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 2
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: LD_INT 2
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: LD_INT 2
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 3
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 3
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: PUSH
49126: LD_INT 3
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: LD_INT 3
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49168: LD_ADDR_VAR 0 26
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 2
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: PUSH
49380: LD_INT 3
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: LD_INT 3
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49444: LD_ADDR_VAR 0 27
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: NEG
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 3
49677: NEG
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 3
49689: NEG
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49724: LD_ADDR_VAR 0 28
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 2
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: NEG
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: NEG
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 3
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: LD_INT 3
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 3
49959: NEG
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: NEG
49972: PUSH
49973: LD_INT 2
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50006: LD_ADDR_VAR 0 29
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: LD_INT 2
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: LD_INT 2
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: LD_INT 3
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: LD_INT 3
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 3
50250: NEG
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50285: LD_ADDR_VAR 0 30
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: NEG
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 3
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 2
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 3
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: LD_INT 3
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 2
50517: NEG
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 3
50528: NEG
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50563: LD_ADDR_VAR 0 31
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 2
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 2
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: LD_INT 2
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 2
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 2
50728: NEG
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: NEG
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: NEG
50753: PUSH
50754: LD_INT 3
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 3
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 3
50806: NEG
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50841: LD_ADDR_VAR 0 32
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 2
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: LD_INT 3
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 3
51053: PUSH
51054: LD_INT 2
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: LD_INT 3
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 2
51073: NEG
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 3
51084: NEG
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51119: LD_ADDR_VAR 0 33
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 2
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: LD_INT 2
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: LD_INT 3
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 2
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: LD_INT 2
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 3
51363: NEG
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51398: LD_ADDR_VAR 0 34
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: NEG
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: NEG
51578: PUSH
51579: LD_INT 2
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 3
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 3
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 3
51643: NEG
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51678: LD_ADDR_VAR 0 35
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51790: LD_ADDR_VAR 0 36
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: LD_INT 2
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51902: LD_ADDR_VAR 0 37
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52014: LD_ADDR_VAR 0 38
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52126: LD_ADDR_VAR 0 39
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 2
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52238: LD_ADDR_VAR 0 40
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 1
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52350: LD_ADDR_VAR 0 41
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 2
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 3
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 3
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 3
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 3
52593: PUSH
52594: LD_INT 3
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: LD_INT 3
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 2
52613: NEG
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 3
52635: NEG
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 3
52659: NEG
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52700: LD_ADDR_VAR 0 42
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 2
52866: NEG
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: LD_INT 3
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 3
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 3
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 3
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 3
52946: PUSH
52947: LD_INT 3
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: LD_INT 3
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: LD_INT 3
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 3
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 3
52997: NEG
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: NEG
53010: PUSH
53011: LD_INT 3
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53050: LD_ADDR_VAR 0 43
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 2
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: NEG
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: LD_INT 3
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: LD_INT 3
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 3
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 3
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 3
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 3
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 3
53346: NEG
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 3
53357: NEG
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53398: LD_ADDR_VAR 0 44
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 2
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 2
53564: NEG
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: LD_INT 2
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: LD_INT 3
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 3
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 3
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 3
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 3
53641: PUSH
53642: LD_INT 3
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: LD_INT 3
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 3
53672: NEG
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: NEG
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 3
53695: NEG
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 3
53707: NEG
53708: PUSH
53709: LD_INT 3
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53748: LD_ADDR_VAR 0 45
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: LD_INT 2
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 2
53914: NEG
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: LD_INT 3
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: LD_INT 3
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 3
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 3
53994: PUSH
53995: LD_INT 3
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: LD_INT 3
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 3
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 3
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 3
54045: NEG
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 3
54057: NEG
54058: PUSH
54059: LD_INT 3
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54098: LD_ADDR_VAR 0 46
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 2
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: NEG
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 2
54275: NEG
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 3
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: LD_INT 3
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: LD_INT 1
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 3
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 3
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: LD_INT 3
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 3
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 3
54394: NEG
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 3
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54446: LD_ADDR_VAR 0 47
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: NEG
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: LD_INT 2
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54597: LD_ADDR_VAR 0 48
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54744: LD_ADDR_VAR 0 49
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 1
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: LD_INT 2
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54888: LD_ADDR_VAR 0 50
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 2
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55032: LD_ADDR_VAR 0 51
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55179: LD_ADDR_VAR 0 52
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: NEG
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55330: LD_ADDR_VAR 0 53
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: NEG
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55560: LD_ADDR_VAR 0 54
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 2
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: NEG
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: LD_INT 2
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55790: LD_ADDR_VAR 0 55
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 2
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 2
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 2
55977: NEG
55978: PUSH
55979: LD_INT 1
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: LD_INT 2
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56020: LD_ADDR_VAR 0 56
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 2
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 2
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: LD_INT 2
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56250: LD_ADDR_VAR 0 57
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 2
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 2
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 2
56449: NEG
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56480: LD_ADDR_VAR 0 58
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 0
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: LD_INT 2
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: LD_INT 2
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: LD_INT 2
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: LD_INT 1
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: LD_INT 2
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56710: LD_ADDR_VAR 0 59
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56798: LD_ADDR_VAR 0 60
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56886: LD_ADDR_VAR 0 61
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56974: LD_ADDR_VAR 0 62
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: LD_INT 1
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57062: LD_ADDR_VAR 0 63
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57150: LD_ADDR_VAR 0 64
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: ST_TO_ADDR
// end ; 1 :
57238: GO 63135
57240: LD_INT 1
57242: DOUBLE
57243: EQUAL
57244: IFTRUE 57248
57246: GO 59871
57248: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57249: LD_ADDR_VAR 0 11
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: LD_INT 3
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 3
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: LIST
57292: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57293: LD_ADDR_VAR 0 12
57297: PUSH
57298: LD_INT 2
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 3
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 3
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: LIST
57333: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57334: LD_ADDR_VAR 0 13
57338: PUSH
57339: LD_INT 3
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 3
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: LD_INT 3
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: LIST
57373: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57374: LD_ADDR_VAR 0 14
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: LD_INT 3
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: LD_INT 3
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: LD_INT 2
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: LIST
57414: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57415: LD_ADDR_VAR 0 15
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 3
57433: NEG
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 3
57444: NEG
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: LIST
57458: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57459: LD_ADDR_VAR 0 16
57463: PUSH
57464: LD_INT 2
57466: NEG
57467: PUSH
57468: LD_INT 3
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 3
57478: NEG
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 3
57490: NEG
57491: PUSH
57492: LD_INT 3
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: LIST
57504: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57505: LD_ADDR_VAR 0 17
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: LD_INT 3
57516: NEG
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: LIST
57548: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57549: LD_ADDR_VAR 0 18
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 3
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: LIST
57589: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57590: LD_ADDR_VAR 0 19
57594: PUSH
57595: LD_INT 3
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 3
57607: PUSH
57608: LD_INT 3
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: PUSH
57618: LD_INT 3
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: LIST
57629: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57630: LD_ADDR_VAR 0 20
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: LD_INT 3
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 3
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: LIST
57670: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57671: LD_ADDR_VAR 0 21
57675: PUSH
57676: LD_INT 2
57678: NEG
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 3
57689: NEG
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 3
57700: NEG
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: LIST
57714: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57715: LD_ADDR_VAR 0 22
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: LD_INT 3
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: LD_INT 3
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: LIST
57760: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57761: LD_ADDR_VAR 0 23
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: LD_INT 3
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: LD_INT 4
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: LD_INT 3
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: LIST
57804: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57805: LD_ADDR_VAR 0 24
57809: PUSH
57810: LD_INT 3
57812: PUSH
57813: LD_INT 0
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 3
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 4
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: LIST
57845: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57846: LD_ADDR_VAR 0 25
57850: PUSH
57851: LD_INT 3
57853: PUSH
57854: LD_INT 3
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 4
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 3
57873: PUSH
57874: LD_INT 4
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: LIST
57885: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57886: LD_ADDR_VAR 0 26
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 3
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: LD_INT 4
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: LD_INT 3
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: LIST
57926: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57927: LD_ADDR_VAR 0 27
57931: PUSH
57932: LD_INT 3
57934: NEG
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 3
57945: NEG
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 4
57956: NEG
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: LIST
57970: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57971: LD_ADDR_VAR 0 28
57975: PUSH
57976: LD_INT 3
57978: NEG
57979: PUSH
57980: LD_INT 3
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 3
57990: NEG
57991: PUSH
57992: LD_INT 4
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 4
58002: NEG
58003: PUSH
58004: LD_INT 3
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: LIST
58016: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58017: LD_ADDR_VAR 0 29
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: LD_INT 3
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 3
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 2
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: LD_INT 4
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: LD_INT 4
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: LD_INT 3
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: LD_INT 5
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 5
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 4
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: NEG
58127: PUSH
58128: LD_INT 6
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 6
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 5
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58172: LD_ADDR_VAR 0 30
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 3
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 3
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 4
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 4
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 4
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 5
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 5
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 5
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 6
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 6
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58315: LD_ADDR_VAR 0 31
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 3
58332: PUSH
58333: LD_INT 3
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: PUSH
58343: LD_INT 3
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 4
58352: PUSH
58353: LD_INT 3
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 4
58362: PUSH
58363: LD_INT 4
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 3
58372: PUSH
58373: LD_INT 4
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 5
58382: PUSH
58383: LD_INT 4
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 5
58392: PUSH
58393: LD_INT 5
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 4
58402: PUSH
58403: LD_INT 5
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 6
58412: PUSH
58413: LD_INT 5
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 6
58422: PUSH
58423: LD_INT 6
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 5
58432: PUSH
58433: LD_INT 6
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58454: LD_ADDR_VAR 0 32
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: LD_INT 3
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: LD_INT 4
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: LD_INT 4
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: LD_INT 3
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: LD_INT 5
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: LD_INT 5
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: LD_INT 4
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 1
58554: PUSH
58555: LD_INT 6
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 6
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: NEG
58575: PUSH
58576: LD_INT 5
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58597: LD_ADDR_VAR 0 33
58601: PUSH
58602: LD_INT 2
58604: NEG
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 3
58615: NEG
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: NEG
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 3
58638: NEG
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 4
58649: NEG
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 4
58660: NEG
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 4
58672: NEG
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 5
58683: NEG
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 5
58694: NEG
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 5
58706: NEG
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 6
58717: NEG
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 6
58728: NEG
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58752: LD_ADDR_VAR 0 34
58756: PUSH
58757: LD_INT 2
58759: NEG
58760: PUSH
58761: LD_INT 3
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: LD_INT 2
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 3
58783: NEG
58784: PUSH
58785: LD_INT 3
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 3
58795: NEG
58796: PUSH
58797: LD_INT 4
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 4
58807: NEG
58808: PUSH
58809: LD_INT 3
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 4
58819: NEG
58820: PUSH
58821: LD_INT 4
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 4
58831: NEG
58832: PUSH
58833: LD_INT 5
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 5
58843: NEG
58844: PUSH
58845: LD_INT 4
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 5
58855: NEG
58856: PUSH
58857: LD_INT 5
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 5
58867: NEG
58868: PUSH
58869: LD_INT 6
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 6
58879: NEG
58880: PUSH
58881: LD_INT 5
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 6
58891: NEG
58892: PUSH
58893: LD_INT 6
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58915: LD_ADDR_VAR 0 41
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: LD_INT 2
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: LIST
58958: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58959: LD_ADDR_VAR 0 42
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 3
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: LIST
58999: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59000: LD_ADDR_VAR 0 43
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 3
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 2
59027: PUSH
59028: LD_INT 3
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: LIST
59039: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59040: LD_ADDR_VAR 0 44
59044: PUSH
59045: LD_INT 0
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: LD_INT 3
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: LIST
59080: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59081: LD_ADDR_VAR 0 45
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: LD_INT 0
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 2
59099: NEG
59100: PUSH
59101: LD_INT 1
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 3
59110: NEG
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: LIST
59124: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59125: LD_ADDR_VAR 0 46
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: LD_INT 2
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 2
59144: NEG
59145: PUSH
59146: LD_INT 3
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 3
59156: NEG
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: LIST
59170: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59171: LD_ADDR_VAR 0 47
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: LD_INT 3
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59204: LD_ADDR_VAR 0 48
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: LD_INT 2
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59235: LD_ADDR_VAR 0 49
59239: PUSH
59240: LD_INT 3
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: PUSH
59253: LD_INT 2
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59264: LD_ADDR_VAR 0 50
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: LD_INT 3
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: LD_INT 3
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59293: LD_ADDR_VAR 0 51
59297: PUSH
59298: LD_INT 1
59300: NEG
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 2
59311: NEG
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59324: LD_ADDR_VAR 0 52
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: NEG
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 3
59343: NEG
59344: PUSH
59345: LD_INT 2
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59357: LD_ADDR_VAR 0 53
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 3
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 3
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: LIST
59400: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59401: LD_ADDR_VAR 0 54
59405: PUSH
59406: LD_INT 2
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 3
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 3
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: LIST
59441: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59442: LD_ADDR_VAR 0 55
59446: PUSH
59447: LD_INT 3
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 3
59459: PUSH
59460: LD_INT 3
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 2
59469: PUSH
59470: LD_INT 3
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: LIST
59481: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59482: LD_ADDR_VAR 0 56
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: LD_INT 3
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: LIST
59522: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59523: LD_ADDR_VAR 0 57
59527: PUSH
59528: LD_INT 2
59530: NEG
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 3
59552: NEG
59553: PUSH
59554: LD_INT 1
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59567: LD_ADDR_VAR 0 58
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: LD_INT 3
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 3
59586: NEG
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 3
59598: NEG
59599: PUSH
59600: LD_INT 3
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: LIST
59612: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59613: LD_ADDR_VAR 0 59
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: LD_INT 2
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: LIST
59656: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59657: LD_ADDR_VAR 0 60
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: LIST
59697: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59698: LD_ADDR_VAR 0 61
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: PUSH
59726: LD_INT 2
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: LIST
59737: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59738: LD_ADDR_VAR 0 62
59742: PUSH
59743: LD_INT 1
59745: PUSH
59746: LD_INT 2
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: LD_INT 2
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: LIST
59778: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59779: LD_ADDR_VAR 0 63
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 2
59797: NEG
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 2
59808: NEG
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: LIST
59822: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59823: LD_ADDR_VAR 0 64
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: LD_INT 2
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: LD_INT 2
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: LIST
59868: ST_TO_ADDR
// end ; 2 :
59869: GO 63135
59871: LD_INT 2
59873: DOUBLE
59874: EQUAL
59875: IFTRUE 59879
59877: GO 63134
59879: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59880: LD_ADDR_VAR 0 29
59884: PUSH
59885: LD_INT 4
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 4
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 5
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 5
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 4
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 3
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 3
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 3
59959: PUSH
59960: LD_INT 2
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 5
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 3
59980: PUSH
59981: LD_INT 3
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 3
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 4
60000: PUSH
60001: LD_INT 3
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 4
60010: PUSH
60011: LD_INT 4
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: LD_INT 4
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 2
60030: PUSH
60031: LD_INT 3
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: LD_INT 2
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 4
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: LD_INT 4
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: LD_INT 4
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 3
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: LD_INT 4
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: LD_INT 5
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: LD_INT 5
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: LD_INT 4
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: LD_INT 3
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: LD_INT 5
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 2
60152: NEG
60153: PUSH
60154: LD_INT 3
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 3
60163: NEG
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: NEG
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 2
60186: NEG
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 2
60197: NEG
60198: PUSH
60199: LD_INT 1
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 3
60208: NEG
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 4
60219: NEG
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 4
60230: NEG
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 4
60242: NEG
60243: PUSH
60244: LD_INT 2
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: NEG
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 4
60265: NEG
60266: PUSH
60267: LD_INT 4
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 4
60277: NEG
60278: PUSH
60279: LD_INT 5
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 3
60289: NEG
60290: PUSH
60291: LD_INT 4
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 3
60301: NEG
60302: PUSH
60303: LD_INT 3
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 4
60313: NEG
60314: PUSH
60315: LD_INT 3
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 5
60325: NEG
60326: PUSH
60327: LD_INT 4
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 5
60337: NEG
60338: PUSH
60339: LD_INT 5
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 3
60349: NEG
60350: PUSH
60351: LD_INT 5
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 5
60361: NEG
60362: PUSH
60363: LD_INT 3
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60418: LD_ADDR_VAR 0 30
60422: PUSH
60423: LD_INT 4
60425: PUSH
60426: LD_INT 4
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 4
60435: PUSH
60436: LD_INT 3
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 5
60445: PUSH
60446: LD_INT 4
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 5
60455: PUSH
60456: LD_INT 5
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 4
60465: PUSH
60466: LD_INT 5
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: LD_INT 4
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 3
60485: PUSH
60486: LD_INT 3
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 5
60495: PUSH
60496: LD_INT 3
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 3
60505: PUSH
60506: LD_INT 5
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 3
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: LD_INT 2
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: LD_INT 3
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: LD_INT 4
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: LD_INT 4
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: LD_INT 3
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 2
60587: PUSH
60588: LD_INT 4
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 2
60597: NEG
60598: PUSH
60599: LD_INT 2
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 4
60608: NEG
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 4
60619: NEG
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 3
60631: NEG
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 3
60642: NEG
60643: PUSH
60644: LD_INT 1
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 4
60653: NEG
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 5
60664: NEG
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 5
60675: NEG
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 5
60687: NEG
60688: PUSH
60689: LD_INT 2
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 3
60699: NEG
60700: PUSH
60701: LD_INT 2
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 3
60710: NEG
60711: PUSH
60712: LD_INT 3
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 3
60722: NEG
60723: PUSH
60724: LD_INT 4
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: LD_INT 3
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: NEG
60747: PUSH
60748: LD_INT 2
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 3
60758: NEG
60759: PUSH
60760: LD_INT 2
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 4
60770: NEG
60771: PUSH
60772: LD_INT 3
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 4
60782: NEG
60783: PUSH
60784: LD_INT 4
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: LD_INT 4
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 4
60806: NEG
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: LD_INT 4
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 5
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: LD_INT 4
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: LD_INT 3
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: LD_INT 3
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: LD_INT 4
60877: NEG
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: LD_INT 5
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 2
60897: PUSH
60898: LD_INT 3
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: LD_INT 5
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60965: LD_ADDR_VAR 0 31
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: LD_INT 4
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: LD_INT 3
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: LD_INT 4
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 5
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: LD_INT 5
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: LD_INT 4
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: NEG
61034: PUSH
61035: LD_INT 3
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: PUSH
61045: LD_INT 5
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: NEG
61055: PUSH
61056: LD_INT 3
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 3
61065: NEG
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 3
61076: NEG
61077: PUSH
61078: LD_INT 1
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: LD_INT 0
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: NEG
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 3
61110: NEG
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 4
61121: NEG
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 4
61132: NEG
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 4
61144: NEG
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 2
61156: NEG
61157: PUSH
61158: LD_INT 2
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 4
61167: NEG
61168: PUSH
61169: LD_INT 4
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 4
61179: NEG
61180: PUSH
61181: LD_INT 5
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 3
61191: NEG
61192: PUSH
61193: LD_INT 4
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 3
61203: NEG
61204: PUSH
61205: LD_INT 3
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 4
61215: NEG
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 5
61227: NEG
61228: PUSH
61229: LD_INT 4
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 5
61239: NEG
61240: PUSH
61241: LD_INT 5
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 3
61251: NEG
61252: PUSH
61253: LD_INT 5
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 5
61263: NEG
61264: PUSH
61265: LD_INT 3
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: LD_INT 3
61278: NEG
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: LD_INT 4
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: LD_INT 3
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: LD_INT 2
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: LD_INT 2
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 1
61330: NEG
61331: PUSH
61332: LD_INT 3
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: LD_INT 4
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 2
61354: PUSH
61355: LD_INT 2
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 2
61365: NEG
61366: PUSH
61367: LD_INT 4
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 4
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 4
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 5
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 5
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 4
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 3
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 3
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 3
61449: PUSH
61450: LD_INT 2
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 5
61460: PUSH
61461: LD_INT 2
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61515: LD_ADDR_VAR 0 32
61519: PUSH
61520: LD_INT 4
61522: NEG
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 4
61533: NEG
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 3
61545: NEG
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 3
61556: NEG
61557: PUSH
61558: LD_INT 1
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 4
61567: NEG
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 5
61578: NEG
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 5
61589: NEG
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 5
61601: NEG
61602: PUSH
61603: LD_INT 2
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 3
61613: NEG
61614: PUSH
61615: LD_INT 2
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 3
61624: NEG
61625: PUSH
61626: LD_INT 3
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 3
61636: NEG
61637: PUSH
61638: LD_INT 4
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 2
61648: NEG
61649: PUSH
61650: LD_INT 3
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 2
61660: NEG
61661: PUSH
61662: LD_INT 2
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 3
61672: NEG
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 4
61684: NEG
61685: PUSH
61686: LD_INT 3
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 4
61696: NEG
61697: PUSH
61698: LD_INT 4
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 2
61708: NEG
61709: PUSH
61710: LD_INT 4
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 4
61720: NEG
61721: PUSH
61722: LD_INT 2
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: LD_INT 4
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: LD_INT 5
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: LD_INT 4
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: LD_INT 3
61768: NEG
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: LD_INT 3
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 4
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: LD_INT 5
61803: NEG
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 2
61811: PUSH
61812: LD_INT 3
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 2
61822: NEG
61823: PUSH
61824: LD_INT 5
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 3
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 3
61844: PUSH
61845: LD_INT 1
61847: NEG
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 4
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 4
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 3
61875: PUSH
61876: LD_INT 1
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 2
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 2
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 2
61906: PUSH
61907: LD_INT 2
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 4
61917: PUSH
61918: LD_INT 2
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 4
61927: PUSH
61928: LD_INT 4
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 4
61937: PUSH
61938: LD_INT 3
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 5
61947: PUSH
61948: LD_INT 4
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 5
61957: PUSH
61958: LD_INT 5
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 4
61967: PUSH
61968: LD_INT 5
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 3
61977: PUSH
61978: LD_INT 4
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 3
61987: PUSH
61988: LD_INT 3
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 5
61997: PUSH
61998: LD_INT 3
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 3
62007: PUSH
62008: LD_INT 5
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62062: LD_ADDR_VAR 0 33
62066: PUSH
62067: LD_INT 4
62069: NEG
62070: PUSH
62071: LD_INT 4
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 4
62081: NEG
62082: PUSH
62083: LD_INT 5
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 3
62093: NEG
62094: PUSH
62095: LD_INT 4
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 3
62105: NEG
62106: PUSH
62107: LD_INT 3
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 4
62117: NEG
62118: PUSH
62119: LD_INT 3
62121: NEG
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 5
62129: NEG
62130: PUSH
62131: LD_INT 4
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 5
62141: NEG
62142: PUSH
62143: LD_INT 5
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 3
62153: NEG
62154: PUSH
62155: LD_INT 5
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 5
62165: NEG
62166: PUSH
62167: LD_INT 3
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: LD_INT 3
62180: NEG
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: LD_INT 4
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: LD_INT 3
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: LD_INT 2
62213: NEG
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: LD_INT 2
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: LD_INT 3
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 1
62244: NEG
62245: PUSH
62246: LD_INT 4
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 2
62256: PUSH
62257: LD_INT 2
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 2
62267: NEG
62268: PUSH
62269: LD_INT 4
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 4
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 4
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 5
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 5
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 4
62320: PUSH
62321: LD_INT 1
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 3
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 3
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 3
62351: PUSH
62352: LD_INT 2
62354: NEG
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 5
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 3
62372: PUSH
62373: LD_INT 3
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 3
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 4
62392: PUSH
62393: LD_INT 3
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 4
62402: PUSH
62403: LD_INT 4
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 3
62412: PUSH
62413: LD_INT 4
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 2
62422: PUSH
62423: LD_INT 3
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 2
62432: PUSH
62433: LD_INT 2
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 4
62442: PUSH
62443: LD_INT 2
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 2
62452: PUSH
62453: LD_INT 4
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: LD_INT 4
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 3
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: LD_INT 4
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: LD_INT 5
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: LD_INT 5
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 1
62512: NEG
62513: PUSH
62514: LD_INT 4
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: LD_INT 3
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 2
62534: PUSH
62535: LD_INT 5
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 2
62544: NEG
62545: PUSH
62546: LD_INT 3
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62600: LD_ADDR_VAR 0 34
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: LD_INT 4
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: LD_INT 5
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: PUSH
62630: LD_INT 4
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: LD_INT 3
62643: NEG
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: LD_INT 3
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 1
62662: NEG
62663: PUSH
62664: LD_INT 4
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: LD_INT 5
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 2
62686: PUSH
62687: LD_INT 3
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 2
62697: NEG
62698: PUSH
62699: LD_INT 5
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 3
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 3
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 4
62730: PUSH
62731: LD_INT 0
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 4
62740: PUSH
62741: LD_INT 1
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 3
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 2
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 2
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 2
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 4
62792: PUSH
62793: LD_INT 2
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 4
62802: PUSH
62803: LD_INT 4
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 4
62812: PUSH
62813: LD_INT 3
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 5
62822: PUSH
62823: LD_INT 4
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 5
62832: PUSH
62833: LD_INT 5
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 4
62842: PUSH
62843: LD_INT 5
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 3
62852: PUSH
62853: LD_INT 4
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 3
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 5
62872: PUSH
62873: LD_INT 3
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 3
62882: PUSH
62883: LD_INT 5
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: LD_INT 3
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: LD_INT 2
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: LD_INT 3
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 1
62922: PUSH
62923: LD_INT 4
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: LD_INT 4
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 1
62942: NEG
62943: PUSH
62944: LD_INT 3
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: LD_INT 2
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: LD_INT 4
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 2
62974: NEG
62975: PUSH
62976: LD_INT 2
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 4
62985: NEG
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 4
62996: NEG
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 3
63008: NEG
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 3
63019: NEG
63020: PUSH
63021: LD_INT 1
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 4
63030: NEG
63031: PUSH
63032: LD_INT 1
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 5
63041: NEG
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 5
63052: NEG
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 5
63064: NEG
63065: PUSH
63066: LD_INT 2
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 3
63076: NEG
63077: PUSH
63078: LD_INT 2
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: ST_TO_ADDR
// end ; end ;
63132: GO 63135
63134: POP
// case btype of b_depot , b_warehouse :
63135: LD_VAR 0 1
63139: PUSH
63140: LD_INT 0
63142: DOUBLE
63143: EQUAL
63144: IFTRUE 63154
63146: LD_INT 1
63148: DOUBLE
63149: EQUAL
63150: IFTRUE 63154
63152: GO 63355
63154: POP
// case nation of nation_american :
63155: LD_VAR 0 5
63159: PUSH
63160: LD_INT 1
63162: DOUBLE
63163: EQUAL
63164: IFTRUE 63168
63166: GO 63224
63168: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63169: LD_ADDR_VAR 0 9
63173: PUSH
63174: LD_VAR 0 11
63178: PUSH
63179: LD_VAR 0 12
63183: PUSH
63184: LD_VAR 0 13
63188: PUSH
63189: LD_VAR 0 14
63193: PUSH
63194: LD_VAR 0 15
63198: PUSH
63199: LD_VAR 0 16
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: PUSH
63212: LD_VAR 0 4
63216: PUSH
63217: LD_INT 1
63219: PLUS
63220: ARRAY
63221: ST_TO_ADDR
63222: GO 63353
63224: LD_INT 2
63226: DOUBLE
63227: EQUAL
63228: IFTRUE 63232
63230: GO 63288
63232: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63233: LD_ADDR_VAR 0 9
63237: PUSH
63238: LD_VAR 0 17
63242: PUSH
63243: LD_VAR 0 18
63247: PUSH
63248: LD_VAR 0 19
63252: PUSH
63253: LD_VAR 0 20
63257: PUSH
63258: LD_VAR 0 21
63262: PUSH
63263: LD_VAR 0 22
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: PUSH
63276: LD_VAR 0 4
63280: PUSH
63281: LD_INT 1
63283: PLUS
63284: ARRAY
63285: ST_TO_ADDR
63286: GO 63353
63288: LD_INT 3
63290: DOUBLE
63291: EQUAL
63292: IFTRUE 63296
63294: GO 63352
63296: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63297: LD_ADDR_VAR 0 9
63301: PUSH
63302: LD_VAR 0 23
63306: PUSH
63307: LD_VAR 0 24
63311: PUSH
63312: LD_VAR 0 25
63316: PUSH
63317: LD_VAR 0 26
63321: PUSH
63322: LD_VAR 0 27
63326: PUSH
63327: LD_VAR 0 28
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: PUSH
63340: LD_VAR 0 4
63344: PUSH
63345: LD_INT 1
63347: PLUS
63348: ARRAY
63349: ST_TO_ADDR
63350: GO 63353
63352: POP
63353: GO 63908
63355: LD_INT 2
63357: DOUBLE
63358: EQUAL
63359: IFTRUE 63369
63361: LD_INT 3
63363: DOUBLE
63364: EQUAL
63365: IFTRUE 63369
63367: GO 63425
63369: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63370: LD_ADDR_VAR 0 9
63374: PUSH
63375: LD_VAR 0 29
63379: PUSH
63380: LD_VAR 0 30
63384: PUSH
63385: LD_VAR 0 31
63389: PUSH
63390: LD_VAR 0 32
63394: PUSH
63395: LD_VAR 0 33
63399: PUSH
63400: LD_VAR 0 34
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: PUSH
63413: LD_VAR 0 4
63417: PUSH
63418: LD_INT 1
63420: PLUS
63421: ARRAY
63422: ST_TO_ADDR
63423: GO 63908
63425: LD_INT 16
63427: DOUBLE
63428: EQUAL
63429: IFTRUE 63487
63431: LD_INT 17
63433: DOUBLE
63434: EQUAL
63435: IFTRUE 63487
63437: LD_INT 18
63439: DOUBLE
63440: EQUAL
63441: IFTRUE 63487
63443: LD_INT 19
63445: DOUBLE
63446: EQUAL
63447: IFTRUE 63487
63449: LD_INT 22
63451: DOUBLE
63452: EQUAL
63453: IFTRUE 63487
63455: LD_INT 20
63457: DOUBLE
63458: EQUAL
63459: IFTRUE 63487
63461: LD_INT 21
63463: DOUBLE
63464: EQUAL
63465: IFTRUE 63487
63467: LD_INT 23
63469: DOUBLE
63470: EQUAL
63471: IFTRUE 63487
63473: LD_INT 24
63475: DOUBLE
63476: EQUAL
63477: IFTRUE 63487
63479: LD_INT 25
63481: DOUBLE
63482: EQUAL
63483: IFTRUE 63487
63485: GO 63543
63487: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63488: LD_ADDR_VAR 0 9
63492: PUSH
63493: LD_VAR 0 35
63497: PUSH
63498: LD_VAR 0 36
63502: PUSH
63503: LD_VAR 0 37
63507: PUSH
63508: LD_VAR 0 38
63512: PUSH
63513: LD_VAR 0 39
63517: PUSH
63518: LD_VAR 0 40
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: PUSH
63531: LD_VAR 0 4
63535: PUSH
63536: LD_INT 1
63538: PLUS
63539: ARRAY
63540: ST_TO_ADDR
63541: GO 63908
63543: LD_INT 6
63545: DOUBLE
63546: EQUAL
63547: IFTRUE 63599
63549: LD_INT 7
63551: DOUBLE
63552: EQUAL
63553: IFTRUE 63599
63555: LD_INT 8
63557: DOUBLE
63558: EQUAL
63559: IFTRUE 63599
63561: LD_INT 13
63563: DOUBLE
63564: EQUAL
63565: IFTRUE 63599
63567: LD_INT 12
63569: DOUBLE
63570: EQUAL
63571: IFTRUE 63599
63573: LD_INT 15
63575: DOUBLE
63576: EQUAL
63577: IFTRUE 63599
63579: LD_INT 11
63581: DOUBLE
63582: EQUAL
63583: IFTRUE 63599
63585: LD_INT 14
63587: DOUBLE
63588: EQUAL
63589: IFTRUE 63599
63591: LD_INT 10
63593: DOUBLE
63594: EQUAL
63595: IFTRUE 63599
63597: GO 63655
63599: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63600: LD_ADDR_VAR 0 9
63604: PUSH
63605: LD_VAR 0 41
63609: PUSH
63610: LD_VAR 0 42
63614: PUSH
63615: LD_VAR 0 43
63619: PUSH
63620: LD_VAR 0 44
63624: PUSH
63625: LD_VAR 0 45
63629: PUSH
63630: LD_VAR 0 46
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: PUSH
63643: LD_VAR 0 4
63647: PUSH
63648: LD_INT 1
63650: PLUS
63651: ARRAY
63652: ST_TO_ADDR
63653: GO 63908
63655: LD_INT 36
63657: DOUBLE
63658: EQUAL
63659: IFTRUE 63663
63661: GO 63719
63663: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63664: LD_ADDR_VAR 0 9
63668: PUSH
63669: LD_VAR 0 47
63673: PUSH
63674: LD_VAR 0 48
63678: PUSH
63679: LD_VAR 0 49
63683: PUSH
63684: LD_VAR 0 50
63688: PUSH
63689: LD_VAR 0 51
63693: PUSH
63694: LD_VAR 0 52
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: PUSH
63707: LD_VAR 0 4
63711: PUSH
63712: LD_INT 1
63714: PLUS
63715: ARRAY
63716: ST_TO_ADDR
63717: GO 63908
63719: LD_INT 4
63721: DOUBLE
63722: EQUAL
63723: IFTRUE 63745
63725: LD_INT 5
63727: DOUBLE
63728: EQUAL
63729: IFTRUE 63745
63731: LD_INT 34
63733: DOUBLE
63734: EQUAL
63735: IFTRUE 63745
63737: LD_INT 37
63739: DOUBLE
63740: EQUAL
63741: IFTRUE 63745
63743: GO 63801
63745: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63746: LD_ADDR_VAR 0 9
63750: PUSH
63751: LD_VAR 0 53
63755: PUSH
63756: LD_VAR 0 54
63760: PUSH
63761: LD_VAR 0 55
63765: PUSH
63766: LD_VAR 0 56
63770: PUSH
63771: LD_VAR 0 57
63775: PUSH
63776: LD_VAR 0 58
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: PUSH
63789: LD_VAR 0 4
63793: PUSH
63794: LD_INT 1
63796: PLUS
63797: ARRAY
63798: ST_TO_ADDR
63799: GO 63908
63801: LD_INT 31
63803: DOUBLE
63804: EQUAL
63805: IFTRUE 63851
63807: LD_INT 32
63809: DOUBLE
63810: EQUAL
63811: IFTRUE 63851
63813: LD_INT 33
63815: DOUBLE
63816: EQUAL
63817: IFTRUE 63851
63819: LD_INT 27
63821: DOUBLE
63822: EQUAL
63823: IFTRUE 63851
63825: LD_INT 26
63827: DOUBLE
63828: EQUAL
63829: IFTRUE 63851
63831: LD_INT 28
63833: DOUBLE
63834: EQUAL
63835: IFTRUE 63851
63837: LD_INT 29
63839: DOUBLE
63840: EQUAL
63841: IFTRUE 63851
63843: LD_INT 30
63845: DOUBLE
63846: EQUAL
63847: IFTRUE 63851
63849: GO 63907
63851: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63852: LD_ADDR_VAR 0 9
63856: PUSH
63857: LD_VAR 0 59
63861: PUSH
63862: LD_VAR 0 60
63866: PUSH
63867: LD_VAR 0 61
63871: PUSH
63872: LD_VAR 0 62
63876: PUSH
63877: LD_VAR 0 63
63881: PUSH
63882: LD_VAR 0 64
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: PUSH
63895: LD_VAR 0 4
63899: PUSH
63900: LD_INT 1
63902: PLUS
63903: ARRAY
63904: ST_TO_ADDR
63905: GO 63908
63907: POP
// temp_list2 = [ ] ;
63908: LD_ADDR_VAR 0 10
63912: PUSH
63913: EMPTY
63914: ST_TO_ADDR
// for i in temp_list do
63915: LD_ADDR_VAR 0 8
63919: PUSH
63920: LD_VAR 0 9
63924: PUSH
63925: FOR_IN
63926: IFFALSE 63978
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63928: LD_ADDR_VAR 0 10
63932: PUSH
63933: LD_VAR 0 10
63937: PUSH
63938: LD_VAR 0 8
63942: PUSH
63943: LD_INT 1
63945: ARRAY
63946: PUSH
63947: LD_VAR 0 2
63951: PLUS
63952: PUSH
63953: LD_VAR 0 8
63957: PUSH
63958: LD_INT 2
63960: ARRAY
63961: PUSH
63962: LD_VAR 0 3
63966: PLUS
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: EMPTY
63973: LIST
63974: ADD
63975: ST_TO_ADDR
63976: GO 63925
63978: POP
63979: POP
// result = temp_list2 ;
63980: LD_ADDR_VAR 0 7
63984: PUSH
63985: LD_VAR 0 10
63989: ST_TO_ADDR
// end ;
63990: LD_VAR 0 7
63994: RET
// export function EnemyInRange ( unit , dist ) ; begin
63995: LD_INT 0
63997: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63998: LD_ADDR_VAR 0 3
64002: PUSH
64003: LD_VAR 0 1
64007: PPUSH
64008: CALL_OW 255
64012: PPUSH
64013: LD_VAR 0 1
64017: PPUSH
64018: CALL_OW 250
64022: PPUSH
64023: LD_VAR 0 1
64027: PPUSH
64028: CALL_OW 251
64032: PPUSH
64033: LD_VAR 0 2
64037: PPUSH
64038: CALL 37368 0 4
64042: PUSH
64043: LD_INT 4
64045: ARRAY
64046: ST_TO_ADDR
// end ;
64047: LD_VAR 0 3
64051: RET
// export function PlayerSeeMe ( unit ) ; begin
64052: LD_INT 0
64054: PPUSH
// result := See ( your_side , unit ) ;
64055: LD_ADDR_VAR 0 2
64059: PUSH
64060: LD_OWVAR 2
64064: PPUSH
64065: LD_VAR 0 1
64069: PPUSH
64070: CALL_OW 292
64074: ST_TO_ADDR
// end ;
64075: LD_VAR 0 2
64079: RET
// export function ReverseDir ( unit ) ; begin
64080: LD_INT 0
64082: PPUSH
// if not unit then
64083: LD_VAR 0 1
64087: NOT
64088: IFFALSE 64092
// exit ;
64090: GO 64115
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64092: LD_ADDR_VAR 0 2
64096: PUSH
64097: LD_VAR 0 1
64101: PPUSH
64102: CALL_OW 254
64106: PUSH
64107: LD_INT 3
64109: PLUS
64110: PUSH
64111: LD_INT 6
64113: MOD
64114: ST_TO_ADDR
// end ;
64115: LD_VAR 0 2
64119: RET
// export function ReverseArray ( array ) ; var i ; begin
64120: LD_INT 0
64122: PPUSH
64123: PPUSH
// if not array then
64124: LD_VAR 0 1
64128: NOT
64129: IFFALSE 64133
// exit ;
64131: GO 64188
// result := [ ] ;
64133: LD_ADDR_VAR 0 2
64137: PUSH
64138: EMPTY
64139: ST_TO_ADDR
// for i := array downto 1 do
64140: LD_ADDR_VAR 0 3
64144: PUSH
64145: DOUBLE
64146: LD_VAR 0 1
64150: INC
64151: ST_TO_ADDR
64152: LD_INT 1
64154: PUSH
64155: FOR_DOWNTO
64156: IFFALSE 64186
// result := Join ( result , array [ i ] ) ;
64158: LD_ADDR_VAR 0 2
64162: PUSH
64163: LD_VAR 0 2
64167: PPUSH
64168: LD_VAR 0 1
64172: PUSH
64173: LD_VAR 0 3
64177: ARRAY
64178: PPUSH
64179: CALL 68831 0 2
64183: ST_TO_ADDR
64184: GO 64155
64186: POP
64187: POP
// end ;
64188: LD_VAR 0 2
64192: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64193: LD_INT 0
64195: PPUSH
64196: PPUSH
64197: PPUSH
64198: PPUSH
64199: PPUSH
64200: PPUSH
// if not unit or not hexes then
64201: LD_VAR 0 1
64205: NOT
64206: PUSH
64207: LD_VAR 0 2
64211: NOT
64212: OR
64213: IFFALSE 64217
// exit ;
64215: GO 64340
// dist := 9999 ;
64217: LD_ADDR_VAR 0 5
64221: PUSH
64222: LD_INT 9999
64224: ST_TO_ADDR
// for i = 1 to hexes do
64225: LD_ADDR_VAR 0 4
64229: PUSH
64230: DOUBLE
64231: LD_INT 1
64233: DEC
64234: ST_TO_ADDR
64235: LD_VAR 0 2
64239: PUSH
64240: FOR_TO
64241: IFFALSE 64328
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64243: LD_ADDR_VAR 0 6
64247: PUSH
64248: LD_VAR 0 1
64252: PPUSH
64253: LD_VAR 0 2
64257: PUSH
64258: LD_VAR 0 4
64262: ARRAY
64263: PUSH
64264: LD_INT 1
64266: ARRAY
64267: PPUSH
64268: LD_VAR 0 2
64272: PUSH
64273: LD_VAR 0 4
64277: ARRAY
64278: PUSH
64279: LD_INT 2
64281: ARRAY
64282: PPUSH
64283: CALL_OW 297
64287: ST_TO_ADDR
// if tdist < dist then
64288: LD_VAR 0 6
64292: PUSH
64293: LD_VAR 0 5
64297: LESS
64298: IFFALSE 64326
// begin hex := hexes [ i ] ;
64300: LD_ADDR_VAR 0 8
64304: PUSH
64305: LD_VAR 0 2
64309: PUSH
64310: LD_VAR 0 4
64314: ARRAY
64315: ST_TO_ADDR
// dist := tdist ;
64316: LD_ADDR_VAR 0 5
64320: PUSH
64321: LD_VAR 0 6
64325: ST_TO_ADDR
// end ; end ;
64326: GO 64240
64328: POP
64329: POP
// result := hex ;
64330: LD_ADDR_VAR 0 3
64334: PUSH
64335: LD_VAR 0 8
64339: ST_TO_ADDR
// end ;
64340: LD_VAR 0 3
64344: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64345: LD_INT 0
64347: PPUSH
64348: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64349: LD_VAR 0 1
64353: NOT
64354: PUSH
64355: LD_VAR 0 1
64359: PUSH
64360: LD_INT 21
64362: PUSH
64363: LD_INT 2
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 23
64372: PUSH
64373: LD_INT 2
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PPUSH
64384: CALL_OW 69
64388: IN
64389: NOT
64390: OR
64391: IFFALSE 64395
// exit ;
64393: GO 64442
// for i = 1 to 3 do
64395: LD_ADDR_VAR 0 3
64399: PUSH
64400: DOUBLE
64401: LD_INT 1
64403: DEC
64404: ST_TO_ADDR
64405: LD_INT 3
64407: PUSH
64408: FOR_TO
64409: IFFALSE 64440
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64411: LD_VAR 0 1
64415: PPUSH
64416: CALL_OW 250
64420: PPUSH
64421: LD_VAR 0 1
64425: PPUSH
64426: CALL_OW 251
64430: PPUSH
64431: LD_INT 1
64433: PPUSH
64434: CALL_OW 453
64438: GO 64408
64440: POP
64441: POP
// end ;
64442: LD_VAR 0 2
64446: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64447: LD_INT 0
64449: PPUSH
64450: PPUSH
64451: PPUSH
64452: PPUSH
64453: PPUSH
64454: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64455: LD_VAR 0 1
64459: NOT
64460: PUSH
64461: LD_VAR 0 2
64465: NOT
64466: OR
64467: PUSH
64468: LD_VAR 0 1
64472: PPUSH
64473: CALL_OW 314
64477: OR
64478: IFFALSE 64482
// exit ;
64480: GO 64949
// if GetLives ( i ) < 250 then
64482: LD_VAR 0 4
64486: PPUSH
64487: CALL_OW 256
64491: PUSH
64492: LD_INT 250
64494: LESS
64495: IFFALSE 64508
// begin ComAutodestruct ( i ) ;
64497: LD_VAR 0 4
64501: PPUSH
64502: CALL 64345 0 1
// exit ;
64506: GO 64949
// end ; x := GetX ( enemy_unit ) ;
64508: LD_ADDR_VAR 0 7
64512: PUSH
64513: LD_VAR 0 2
64517: PPUSH
64518: CALL_OW 250
64522: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64523: LD_ADDR_VAR 0 8
64527: PUSH
64528: LD_VAR 0 2
64532: PPUSH
64533: CALL_OW 251
64537: ST_TO_ADDR
// if not x or not y then
64538: LD_VAR 0 7
64542: NOT
64543: PUSH
64544: LD_VAR 0 8
64548: NOT
64549: OR
64550: IFFALSE 64554
// exit ;
64552: GO 64949
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64554: LD_ADDR_VAR 0 6
64558: PUSH
64559: LD_VAR 0 7
64563: PPUSH
64564: LD_INT 0
64566: PPUSH
64567: LD_INT 4
64569: PPUSH
64570: CALL_OW 272
64574: PUSH
64575: LD_VAR 0 8
64579: PPUSH
64580: LD_INT 0
64582: PPUSH
64583: LD_INT 4
64585: PPUSH
64586: CALL_OW 273
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_VAR 0 7
64599: PPUSH
64600: LD_INT 1
64602: PPUSH
64603: LD_INT 4
64605: PPUSH
64606: CALL_OW 272
64610: PUSH
64611: LD_VAR 0 8
64615: PPUSH
64616: LD_INT 1
64618: PPUSH
64619: LD_INT 4
64621: PPUSH
64622: CALL_OW 273
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_VAR 0 7
64635: PPUSH
64636: LD_INT 2
64638: PPUSH
64639: LD_INT 4
64641: PPUSH
64642: CALL_OW 272
64646: PUSH
64647: LD_VAR 0 8
64651: PPUSH
64652: LD_INT 2
64654: PPUSH
64655: LD_INT 4
64657: PPUSH
64658: CALL_OW 273
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_VAR 0 7
64671: PPUSH
64672: LD_INT 3
64674: PPUSH
64675: LD_INT 4
64677: PPUSH
64678: CALL_OW 272
64682: PUSH
64683: LD_VAR 0 8
64687: PPUSH
64688: LD_INT 3
64690: PPUSH
64691: LD_INT 4
64693: PPUSH
64694: CALL_OW 273
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_VAR 0 7
64707: PPUSH
64708: LD_INT 4
64710: PPUSH
64711: LD_INT 4
64713: PPUSH
64714: CALL_OW 272
64718: PUSH
64719: LD_VAR 0 8
64723: PPUSH
64724: LD_INT 4
64726: PPUSH
64727: LD_INT 4
64729: PPUSH
64730: CALL_OW 273
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_VAR 0 7
64743: PPUSH
64744: LD_INT 5
64746: PPUSH
64747: LD_INT 4
64749: PPUSH
64750: CALL_OW 272
64754: PUSH
64755: LD_VAR 0 8
64759: PPUSH
64760: LD_INT 5
64762: PPUSH
64763: LD_INT 4
64765: PPUSH
64766: CALL_OW 273
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: ST_TO_ADDR
// for i = tmp downto 1 do
64783: LD_ADDR_VAR 0 4
64787: PUSH
64788: DOUBLE
64789: LD_VAR 0 6
64793: INC
64794: ST_TO_ADDR
64795: LD_INT 1
64797: PUSH
64798: FOR_DOWNTO
64799: IFFALSE 64900
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64801: LD_VAR 0 6
64805: PUSH
64806: LD_VAR 0 4
64810: ARRAY
64811: PUSH
64812: LD_INT 1
64814: ARRAY
64815: PPUSH
64816: LD_VAR 0 6
64820: PUSH
64821: LD_VAR 0 4
64825: ARRAY
64826: PUSH
64827: LD_INT 2
64829: ARRAY
64830: PPUSH
64831: CALL_OW 488
64835: NOT
64836: PUSH
64837: LD_VAR 0 6
64841: PUSH
64842: LD_VAR 0 4
64846: ARRAY
64847: PUSH
64848: LD_INT 1
64850: ARRAY
64851: PPUSH
64852: LD_VAR 0 6
64856: PUSH
64857: LD_VAR 0 4
64861: ARRAY
64862: PUSH
64863: LD_INT 2
64865: ARRAY
64866: PPUSH
64867: CALL_OW 428
64871: PUSH
64872: LD_INT 0
64874: NONEQUAL
64875: OR
64876: IFFALSE 64898
// tmp := Delete ( tmp , i ) ;
64878: LD_ADDR_VAR 0 6
64882: PUSH
64883: LD_VAR 0 6
64887: PPUSH
64888: LD_VAR 0 4
64892: PPUSH
64893: CALL_OW 3
64897: ST_TO_ADDR
64898: GO 64798
64900: POP
64901: POP
// j := GetClosestHex ( unit , tmp ) ;
64902: LD_ADDR_VAR 0 5
64906: PUSH
64907: LD_VAR 0 1
64911: PPUSH
64912: LD_VAR 0 6
64916: PPUSH
64917: CALL 64193 0 2
64921: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64922: LD_VAR 0 1
64926: PPUSH
64927: LD_VAR 0 5
64931: PUSH
64932: LD_INT 1
64934: ARRAY
64935: PPUSH
64936: LD_VAR 0 5
64940: PUSH
64941: LD_INT 2
64943: ARRAY
64944: PPUSH
64945: CALL_OW 111
// end ;
64949: LD_VAR 0 3
64953: RET
// export function PrepareApemanSoldier ( ) ; begin
64954: LD_INT 0
64956: PPUSH
// uc_nation := 0 ;
64957: LD_ADDR_OWVAR 21
64961: PUSH
64962: LD_INT 0
64964: ST_TO_ADDR
// hc_sex := sex_male ;
64965: LD_ADDR_OWVAR 27
64969: PUSH
64970: LD_INT 1
64972: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64973: LD_ADDR_OWVAR 28
64977: PUSH
64978: LD_INT 15
64980: ST_TO_ADDR
// hc_gallery :=  ;
64981: LD_ADDR_OWVAR 33
64985: PUSH
64986: LD_STRING 
64988: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64989: LD_ADDR_OWVAR 31
64993: PUSH
64994: LD_INT 0
64996: PPUSH
64997: LD_INT 3
64999: PPUSH
65000: CALL_OW 12
65004: PUSH
65005: LD_INT 0
65007: PPUSH
65008: LD_INT 3
65010: PPUSH
65011: CALL_OW 12
65015: PUSH
65016: LD_INT 0
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: ST_TO_ADDR
// end ;
65028: LD_VAR 0 1
65032: RET
// export function PrepareApemanEngineer ( ) ; begin
65033: LD_INT 0
65035: PPUSH
// uc_nation := 0 ;
65036: LD_ADDR_OWVAR 21
65040: PUSH
65041: LD_INT 0
65043: ST_TO_ADDR
// hc_sex := sex_male ;
65044: LD_ADDR_OWVAR 27
65048: PUSH
65049: LD_INT 1
65051: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65052: LD_ADDR_OWVAR 28
65056: PUSH
65057: LD_INT 16
65059: ST_TO_ADDR
// hc_gallery :=  ;
65060: LD_ADDR_OWVAR 33
65064: PUSH
65065: LD_STRING 
65067: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65068: LD_ADDR_OWVAR 31
65072: PUSH
65073: LD_INT 0
65075: PPUSH
65076: LD_INT 3
65078: PPUSH
65079: CALL_OW 12
65083: PUSH
65084: LD_INT 0
65086: PPUSH
65087: LD_INT 3
65089: PPUSH
65090: CALL_OW 12
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: LD_INT 0
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: ST_TO_ADDR
// end ;
65107: LD_VAR 0 1
65111: RET
// export function PrepareApeman ( agressivity ) ; begin
65112: LD_INT 0
65114: PPUSH
// uc_side := 0 ;
65115: LD_ADDR_OWVAR 20
65119: PUSH
65120: LD_INT 0
65122: ST_TO_ADDR
// uc_nation := 0 ;
65123: LD_ADDR_OWVAR 21
65127: PUSH
65128: LD_INT 0
65130: ST_TO_ADDR
// hc_sex := sex_male ;
65131: LD_ADDR_OWVAR 27
65135: PUSH
65136: LD_INT 1
65138: ST_TO_ADDR
// hc_class := class_apeman ;
65139: LD_ADDR_OWVAR 28
65143: PUSH
65144: LD_INT 12
65146: ST_TO_ADDR
// hc_gallery :=  ;
65147: LD_ADDR_OWVAR 33
65151: PUSH
65152: LD_STRING 
65154: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65155: LD_ADDR_OWVAR 35
65159: PUSH
65160: LD_VAR 0 1
65164: NEG
65165: PPUSH
65166: LD_VAR 0 1
65170: PPUSH
65171: CALL_OW 12
65175: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65176: LD_ADDR_OWVAR 31
65180: PUSH
65181: LD_INT 0
65183: PPUSH
65184: LD_INT 3
65186: PPUSH
65187: CALL_OW 12
65191: PUSH
65192: LD_INT 0
65194: PPUSH
65195: LD_INT 3
65197: PPUSH
65198: CALL_OW 12
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: LD_INT 0
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: ST_TO_ADDR
// end ;
65215: LD_VAR 0 2
65219: RET
// export function PrepareTiger ( agressivity ) ; begin
65220: LD_INT 0
65222: PPUSH
// uc_side := 0 ;
65223: LD_ADDR_OWVAR 20
65227: PUSH
65228: LD_INT 0
65230: ST_TO_ADDR
// uc_nation := 0 ;
65231: LD_ADDR_OWVAR 21
65235: PUSH
65236: LD_INT 0
65238: ST_TO_ADDR
// hc_class := class_tiger ;
65239: LD_ADDR_OWVAR 28
65243: PUSH
65244: LD_INT 14
65246: ST_TO_ADDR
// hc_gallery :=  ;
65247: LD_ADDR_OWVAR 33
65251: PUSH
65252: LD_STRING 
65254: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65255: LD_ADDR_OWVAR 35
65259: PUSH
65260: LD_VAR 0 1
65264: NEG
65265: PPUSH
65266: LD_VAR 0 1
65270: PPUSH
65271: CALL_OW 12
65275: ST_TO_ADDR
// end ;
65276: LD_VAR 0 2
65280: RET
// export function PrepareEnchidna ( ) ; begin
65281: LD_INT 0
65283: PPUSH
// uc_side := 0 ;
65284: LD_ADDR_OWVAR 20
65288: PUSH
65289: LD_INT 0
65291: ST_TO_ADDR
// uc_nation := 0 ;
65292: LD_ADDR_OWVAR 21
65296: PUSH
65297: LD_INT 0
65299: ST_TO_ADDR
// hc_class := class_baggie ;
65300: LD_ADDR_OWVAR 28
65304: PUSH
65305: LD_INT 13
65307: ST_TO_ADDR
// hc_gallery :=  ;
65308: LD_ADDR_OWVAR 33
65312: PUSH
65313: LD_STRING 
65315: ST_TO_ADDR
// end ;
65316: LD_VAR 0 1
65320: RET
// export function PrepareFrog ( ) ; begin
65321: LD_INT 0
65323: PPUSH
// uc_side := 0 ;
65324: LD_ADDR_OWVAR 20
65328: PUSH
65329: LD_INT 0
65331: ST_TO_ADDR
// uc_nation := 0 ;
65332: LD_ADDR_OWVAR 21
65336: PUSH
65337: LD_INT 0
65339: ST_TO_ADDR
// hc_class := class_frog ;
65340: LD_ADDR_OWVAR 28
65344: PUSH
65345: LD_INT 19
65347: ST_TO_ADDR
// hc_gallery :=  ;
65348: LD_ADDR_OWVAR 33
65352: PUSH
65353: LD_STRING 
65355: ST_TO_ADDR
// end ;
65356: LD_VAR 0 1
65360: RET
// export function PrepareFish ( ) ; begin
65361: LD_INT 0
65363: PPUSH
// uc_side := 0 ;
65364: LD_ADDR_OWVAR 20
65368: PUSH
65369: LD_INT 0
65371: ST_TO_ADDR
// uc_nation := 0 ;
65372: LD_ADDR_OWVAR 21
65376: PUSH
65377: LD_INT 0
65379: ST_TO_ADDR
// hc_class := class_fish ;
65380: LD_ADDR_OWVAR 28
65384: PUSH
65385: LD_INT 20
65387: ST_TO_ADDR
// hc_gallery :=  ;
65388: LD_ADDR_OWVAR 33
65392: PUSH
65393: LD_STRING 
65395: ST_TO_ADDR
// end ;
65396: LD_VAR 0 1
65400: RET
// export function PrepareBird ( ) ; begin
65401: LD_INT 0
65403: PPUSH
// uc_side := 0 ;
65404: LD_ADDR_OWVAR 20
65408: PUSH
65409: LD_INT 0
65411: ST_TO_ADDR
// uc_nation := 0 ;
65412: LD_ADDR_OWVAR 21
65416: PUSH
65417: LD_INT 0
65419: ST_TO_ADDR
// hc_class := class_phororhacos ;
65420: LD_ADDR_OWVAR 28
65424: PUSH
65425: LD_INT 18
65427: ST_TO_ADDR
// hc_gallery :=  ;
65428: LD_ADDR_OWVAR 33
65432: PUSH
65433: LD_STRING 
65435: ST_TO_ADDR
// end ;
65436: LD_VAR 0 1
65440: RET
// export function PrepareHorse ( ) ; begin
65441: LD_INT 0
65443: PPUSH
// uc_side := 0 ;
65444: LD_ADDR_OWVAR 20
65448: PUSH
65449: LD_INT 0
65451: ST_TO_ADDR
// uc_nation := 0 ;
65452: LD_ADDR_OWVAR 21
65456: PUSH
65457: LD_INT 0
65459: ST_TO_ADDR
// hc_class := class_horse ;
65460: LD_ADDR_OWVAR 28
65464: PUSH
65465: LD_INT 21
65467: ST_TO_ADDR
// hc_gallery :=  ;
65468: LD_ADDR_OWVAR 33
65472: PUSH
65473: LD_STRING 
65475: ST_TO_ADDR
// end ;
65476: LD_VAR 0 1
65480: RET
// export function PrepareMastodont ( ) ; begin
65481: LD_INT 0
65483: PPUSH
// uc_side := 0 ;
65484: LD_ADDR_OWVAR 20
65488: PUSH
65489: LD_INT 0
65491: ST_TO_ADDR
// uc_nation := 0 ;
65492: LD_ADDR_OWVAR 21
65496: PUSH
65497: LD_INT 0
65499: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65500: LD_ADDR_OWVAR 37
65504: PUSH
65505: LD_INT 31
65507: ST_TO_ADDR
// vc_control := control_rider ;
65508: LD_ADDR_OWVAR 38
65512: PUSH
65513: LD_INT 4
65515: ST_TO_ADDR
// end ;
65516: LD_VAR 0 1
65520: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65521: LD_INT 0
65523: PPUSH
65524: PPUSH
65525: PPUSH
// uc_side = 0 ;
65526: LD_ADDR_OWVAR 20
65530: PUSH
65531: LD_INT 0
65533: ST_TO_ADDR
// uc_nation = 0 ;
65534: LD_ADDR_OWVAR 21
65538: PUSH
65539: LD_INT 0
65541: ST_TO_ADDR
// InitHc_All ( ) ;
65542: CALL_OW 584
// InitVc ;
65546: CALL_OW 20
// if mastodonts then
65550: LD_VAR 0 6
65554: IFFALSE 65621
// for i = 1 to mastodonts do
65556: LD_ADDR_VAR 0 11
65560: PUSH
65561: DOUBLE
65562: LD_INT 1
65564: DEC
65565: ST_TO_ADDR
65566: LD_VAR 0 6
65570: PUSH
65571: FOR_TO
65572: IFFALSE 65619
// begin vc_chassis := 31 ;
65574: LD_ADDR_OWVAR 37
65578: PUSH
65579: LD_INT 31
65581: ST_TO_ADDR
// vc_control := control_rider ;
65582: LD_ADDR_OWVAR 38
65586: PUSH
65587: LD_INT 4
65589: ST_TO_ADDR
// animal := CreateVehicle ;
65590: LD_ADDR_VAR 0 12
65594: PUSH
65595: CALL_OW 45
65599: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65600: LD_VAR 0 12
65604: PPUSH
65605: LD_VAR 0 8
65609: PPUSH
65610: LD_INT 0
65612: PPUSH
65613: CALL 67749 0 3
// end ;
65617: GO 65571
65619: POP
65620: POP
// if horses then
65621: LD_VAR 0 5
65625: IFFALSE 65692
// for i = 1 to horses do
65627: LD_ADDR_VAR 0 11
65631: PUSH
65632: DOUBLE
65633: LD_INT 1
65635: DEC
65636: ST_TO_ADDR
65637: LD_VAR 0 5
65641: PUSH
65642: FOR_TO
65643: IFFALSE 65690
// begin hc_class := 21 ;
65645: LD_ADDR_OWVAR 28
65649: PUSH
65650: LD_INT 21
65652: ST_TO_ADDR
// hc_gallery :=  ;
65653: LD_ADDR_OWVAR 33
65657: PUSH
65658: LD_STRING 
65660: ST_TO_ADDR
// animal := CreateHuman ;
65661: LD_ADDR_VAR 0 12
65665: PUSH
65666: CALL_OW 44
65670: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65671: LD_VAR 0 12
65675: PPUSH
65676: LD_VAR 0 8
65680: PPUSH
65681: LD_INT 0
65683: PPUSH
65684: CALL 67749 0 3
// end ;
65688: GO 65642
65690: POP
65691: POP
// if birds then
65692: LD_VAR 0 1
65696: IFFALSE 65763
// for i = 1 to birds do
65698: LD_ADDR_VAR 0 11
65702: PUSH
65703: DOUBLE
65704: LD_INT 1
65706: DEC
65707: ST_TO_ADDR
65708: LD_VAR 0 1
65712: PUSH
65713: FOR_TO
65714: IFFALSE 65761
// begin hc_class := 18 ;
65716: LD_ADDR_OWVAR 28
65720: PUSH
65721: LD_INT 18
65723: ST_TO_ADDR
// hc_gallery =  ;
65724: LD_ADDR_OWVAR 33
65728: PUSH
65729: LD_STRING 
65731: ST_TO_ADDR
// animal := CreateHuman ;
65732: LD_ADDR_VAR 0 12
65736: PUSH
65737: CALL_OW 44
65741: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65742: LD_VAR 0 12
65746: PPUSH
65747: LD_VAR 0 8
65751: PPUSH
65752: LD_INT 0
65754: PPUSH
65755: CALL 67749 0 3
// end ;
65759: GO 65713
65761: POP
65762: POP
// if tigers then
65763: LD_VAR 0 2
65767: IFFALSE 65851
// for i = 1 to tigers do
65769: LD_ADDR_VAR 0 11
65773: PUSH
65774: DOUBLE
65775: LD_INT 1
65777: DEC
65778: ST_TO_ADDR
65779: LD_VAR 0 2
65783: PUSH
65784: FOR_TO
65785: IFFALSE 65849
// begin hc_class = class_tiger ;
65787: LD_ADDR_OWVAR 28
65791: PUSH
65792: LD_INT 14
65794: ST_TO_ADDR
// hc_gallery =  ;
65795: LD_ADDR_OWVAR 33
65799: PUSH
65800: LD_STRING 
65802: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65803: LD_ADDR_OWVAR 35
65807: PUSH
65808: LD_INT 7
65810: NEG
65811: PPUSH
65812: LD_INT 7
65814: PPUSH
65815: CALL_OW 12
65819: ST_TO_ADDR
// animal := CreateHuman ;
65820: LD_ADDR_VAR 0 12
65824: PUSH
65825: CALL_OW 44
65829: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65830: LD_VAR 0 12
65834: PPUSH
65835: LD_VAR 0 8
65839: PPUSH
65840: LD_INT 0
65842: PPUSH
65843: CALL 67749 0 3
// end ;
65847: GO 65784
65849: POP
65850: POP
// if apemans then
65851: LD_VAR 0 3
65855: IFFALSE 65978
// for i = 1 to apemans do
65857: LD_ADDR_VAR 0 11
65861: PUSH
65862: DOUBLE
65863: LD_INT 1
65865: DEC
65866: ST_TO_ADDR
65867: LD_VAR 0 3
65871: PUSH
65872: FOR_TO
65873: IFFALSE 65976
// begin hc_class = class_apeman ;
65875: LD_ADDR_OWVAR 28
65879: PUSH
65880: LD_INT 12
65882: ST_TO_ADDR
// hc_gallery =  ;
65883: LD_ADDR_OWVAR 33
65887: PUSH
65888: LD_STRING 
65890: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65891: LD_ADDR_OWVAR 35
65895: PUSH
65896: LD_INT 2
65898: NEG
65899: PPUSH
65900: LD_INT 2
65902: PPUSH
65903: CALL_OW 12
65907: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65908: LD_ADDR_OWVAR 31
65912: PUSH
65913: LD_INT 1
65915: PPUSH
65916: LD_INT 3
65918: PPUSH
65919: CALL_OW 12
65923: PUSH
65924: LD_INT 1
65926: PPUSH
65927: LD_INT 3
65929: PPUSH
65930: CALL_OW 12
65934: PUSH
65935: LD_INT 0
65937: PUSH
65938: LD_INT 0
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: ST_TO_ADDR
// animal := CreateHuman ;
65947: LD_ADDR_VAR 0 12
65951: PUSH
65952: CALL_OW 44
65956: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65957: LD_VAR 0 12
65961: PPUSH
65962: LD_VAR 0 8
65966: PPUSH
65967: LD_INT 0
65969: PPUSH
65970: CALL 67749 0 3
// end ;
65974: GO 65872
65976: POP
65977: POP
// if enchidnas then
65978: LD_VAR 0 4
65982: IFFALSE 66049
// for i = 1 to enchidnas do
65984: LD_ADDR_VAR 0 11
65988: PUSH
65989: DOUBLE
65990: LD_INT 1
65992: DEC
65993: ST_TO_ADDR
65994: LD_VAR 0 4
65998: PUSH
65999: FOR_TO
66000: IFFALSE 66047
// begin hc_class = 13 ;
66002: LD_ADDR_OWVAR 28
66006: PUSH
66007: LD_INT 13
66009: ST_TO_ADDR
// hc_gallery =  ;
66010: LD_ADDR_OWVAR 33
66014: PUSH
66015: LD_STRING 
66017: ST_TO_ADDR
// animal := CreateHuman ;
66018: LD_ADDR_VAR 0 12
66022: PUSH
66023: CALL_OW 44
66027: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66028: LD_VAR 0 12
66032: PPUSH
66033: LD_VAR 0 8
66037: PPUSH
66038: LD_INT 0
66040: PPUSH
66041: CALL 67749 0 3
// end ;
66045: GO 65999
66047: POP
66048: POP
// if fishes then
66049: LD_VAR 0 7
66053: IFFALSE 66120
// for i = 1 to fishes do
66055: LD_ADDR_VAR 0 11
66059: PUSH
66060: DOUBLE
66061: LD_INT 1
66063: DEC
66064: ST_TO_ADDR
66065: LD_VAR 0 7
66069: PUSH
66070: FOR_TO
66071: IFFALSE 66118
// begin hc_class = 20 ;
66073: LD_ADDR_OWVAR 28
66077: PUSH
66078: LD_INT 20
66080: ST_TO_ADDR
// hc_gallery =  ;
66081: LD_ADDR_OWVAR 33
66085: PUSH
66086: LD_STRING 
66088: ST_TO_ADDR
// animal := CreateHuman ;
66089: LD_ADDR_VAR 0 12
66093: PUSH
66094: CALL_OW 44
66098: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66099: LD_VAR 0 12
66103: PPUSH
66104: LD_VAR 0 9
66108: PPUSH
66109: LD_INT 0
66111: PPUSH
66112: CALL 67749 0 3
// end ;
66116: GO 66070
66118: POP
66119: POP
// end ;
66120: LD_VAR 0 10
66124: RET
// export function WantHeal ( sci , unit ) ; begin
66125: LD_INT 0
66127: PPUSH
// if GetTaskList ( sci ) > 0 then
66128: LD_VAR 0 1
66132: PPUSH
66133: CALL_OW 437
66137: PUSH
66138: LD_INT 0
66140: GREATER
66141: IFFALSE 66211
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66143: LD_VAR 0 1
66147: PPUSH
66148: CALL_OW 437
66152: PUSH
66153: LD_INT 1
66155: ARRAY
66156: PUSH
66157: LD_INT 1
66159: ARRAY
66160: PUSH
66161: LD_STRING l
66163: EQUAL
66164: PUSH
66165: LD_VAR 0 1
66169: PPUSH
66170: CALL_OW 437
66174: PUSH
66175: LD_INT 1
66177: ARRAY
66178: PUSH
66179: LD_INT 4
66181: ARRAY
66182: PUSH
66183: LD_VAR 0 2
66187: EQUAL
66188: AND
66189: IFFALSE 66201
// result := true else
66191: LD_ADDR_VAR 0 3
66195: PUSH
66196: LD_INT 1
66198: ST_TO_ADDR
66199: GO 66209
// result := false ;
66201: LD_ADDR_VAR 0 3
66205: PUSH
66206: LD_INT 0
66208: ST_TO_ADDR
// end else
66209: GO 66219
// result := false ;
66211: LD_ADDR_VAR 0 3
66215: PUSH
66216: LD_INT 0
66218: ST_TO_ADDR
// end ;
66219: LD_VAR 0 3
66223: RET
// export function HealTarget ( sci ) ; begin
66224: LD_INT 0
66226: PPUSH
// if not sci then
66227: LD_VAR 0 1
66231: NOT
66232: IFFALSE 66236
// exit ;
66234: GO 66301
// result := 0 ;
66236: LD_ADDR_VAR 0 2
66240: PUSH
66241: LD_INT 0
66243: ST_TO_ADDR
// if GetTaskList ( sci ) then
66244: LD_VAR 0 1
66248: PPUSH
66249: CALL_OW 437
66253: IFFALSE 66301
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66255: LD_VAR 0 1
66259: PPUSH
66260: CALL_OW 437
66264: PUSH
66265: LD_INT 1
66267: ARRAY
66268: PUSH
66269: LD_INT 1
66271: ARRAY
66272: PUSH
66273: LD_STRING l
66275: EQUAL
66276: IFFALSE 66301
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66278: LD_ADDR_VAR 0 2
66282: PUSH
66283: LD_VAR 0 1
66287: PPUSH
66288: CALL_OW 437
66292: PUSH
66293: LD_INT 1
66295: ARRAY
66296: PUSH
66297: LD_INT 4
66299: ARRAY
66300: ST_TO_ADDR
// end ;
66301: LD_VAR 0 2
66305: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66306: LD_INT 0
66308: PPUSH
66309: PPUSH
66310: PPUSH
66311: PPUSH
// if not base_units then
66312: LD_VAR 0 1
66316: NOT
66317: IFFALSE 66321
// exit ;
66319: GO 66408
// result := false ;
66321: LD_ADDR_VAR 0 2
66325: PUSH
66326: LD_INT 0
66328: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66329: LD_ADDR_VAR 0 5
66333: PUSH
66334: LD_VAR 0 1
66338: PPUSH
66339: LD_INT 21
66341: PUSH
66342: LD_INT 3
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PPUSH
66349: CALL_OW 72
66353: ST_TO_ADDR
// if not tmp then
66354: LD_VAR 0 5
66358: NOT
66359: IFFALSE 66363
// exit ;
66361: GO 66408
// for i in tmp do
66363: LD_ADDR_VAR 0 3
66367: PUSH
66368: LD_VAR 0 5
66372: PUSH
66373: FOR_IN
66374: IFFALSE 66406
// begin result := EnemyInRange ( i , 22 ) ;
66376: LD_ADDR_VAR 0 2
66380: PUSH
66381: LD_VAR 0 3
66385: PPUSH
66386: LD_INT 22
66388: PPUSH
66389: CALL 63995 0 2
66393: ST_TO_ADDR
// if result then
66394: LD_VAR 0 2
66398: IFFALSE 66404
// exit ;
66400: POP
66401: POP
66402: GO 66408
// end ;
66404: GO 66373
66406: POP
66407: POP
// end ;
66408: LD_VAR 0 2
66412: RET
// export function FilterByTag ( units , tag ) ; begin
66413: LD_INT 0
66415: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66416: LD_ADDR_VAR 0 3
66420: PUSH
66421: LD_VAR 0 1
66425: PPUSH
66426: LD_INT 120
66428: PUSH
66429: LD_VAR 0 2
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PPUSH
66438: CALL_OW 72
66442: ST_TO_ADDR
// end ;
66443: LD_VAR 0 3
66447: RET
// export function IsDriver ( un ) ; begin
66448: LD_INT 0
66450: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66451: LD_ADDR_VAR 0 2
66455: PUSH
66456: LD_VAR 0 1
66460: PUSH
66461: LD_INT 55
66463: PUSH
66464: EMPTY
66465: LIST
66466: PPUSH
66467: CALL_OW 69
66471: IN
66472: ST_TO_ADDR
// end ;
66473: LD_VAR 0 2
66477: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66478: LD_INT 0
66480: PPUSH
66481: PPUSH
// list := [ ] ;
66482: LD_ADDR_VAR 0 5
66486: PUSH
66487: EMPTY
66488: ST_TO_ADDR
// case d of 0 :
66489: LD_VAR 0 3
66493: PUSH
66494: LD_INT 0
66496: DOUBLE
66497: EQUAL
66498: IFTRUE 66502
66500: GO 66635
66502: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66503: LD_ADDR_VAR 0 5
66507: PUSH
66508: LD_VAR 0 1
66512: PUSH
66513: LD_INT 4
66515: MINUS
66516: PUSH
66517: LD_VAR 0 2
66521: PUSH
66522: LD_INT 4
66524: MINUS
66525: PUSH
66526: LD_INT 2
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: LIST
66533: PUSH
66534: LD_VAR 0 1
66538: PUSH
66539: LD_INT 3
66541: MINUS
66542: PUSH
66543: LD_VAR 0 2
66547: PUSH
66548: LD_INT 1
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: LIST
66555: PUSH
66556: LD_VAR 0 1
66560: PUSH
66561: LD_INT 4
66563: PLUS
66564: PUSH
66565: LD_VAR 0 2
66569: PUSH
66570: LD_INT 4
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: LIST
66577: PUSH
66578: LD_VAR 0 1
66582: PUSH
66583: LD_INT 3
66585: PLUS
66586: PUSH
66587: LD_VAR 0 2
66591: PUSH
66592: LD_INT 3
66594: PLUS
66595: PUSH
66596: LD_INT 5
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: LIST
66603: PUSH
66604: LD_VAR 0 1
66608: PUSH
66609: LD_VAR 0 2
66613: PUSH
66614: LD_INT 4
66616: PLUS
66617: PUSH
66618: LD_INT 0
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: LIST
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: ST_TO_ADDR
// end ; 1 :
66633: GO 67333
66635: LD_INT 1
66637: DOUBLE
66638: EQUAL
66639: IFTRUE 66643
66641: GO 66776
66643: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66644: LD_ADDR_VAR 0 5
66648: PUSH
66649: LD_VAR 0 1
66653: PUSH
66654: LD_VAR 0 2
66658: PUSH
66659: LD_INT 4
66661: MINUS
66662: PUSH
66663: LD_INT 3
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: LIST
66670: PUSH
66671: LD_VAR 0 1
66675: PUSH
66676: LD_INT 3
66678: MINUS
66679: PUSH
66680: LD_VAR 0 2
66684: PUSH
66685: LD_INT 3
66687: MINUS
66688: PUSH
66689: LD_INT 2
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: LIST
66696: PUSH
66697: LD_VAR 0 1
66701: PUSH
66702: LD_INT 4
66704: MINUS
66705: PUSH
66706: LD_VAR 0 2
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: PUSH
66719: LD_VAR 0 1
66723: PUSH
66724: LD_VAR 0 2
66728: PUSH
66729: LD_INT 3
66731: PLUS
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: LIST
66740: PUSH
66741: LD_VAR 0 1
66745: PUSH
66746: LD_INT 4
66748: PLUS
66749: PUSH
66750: LD_VAR 0 2
66754: PUSH
66755: LD_INT 4
66757: PLUS
66758: PUSH
66759: LD_INT 5
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: LIST
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: ST_TO_ADDR
// end ; 2 :
66774: GO 67333
66776: LD_INT 2
66778: DOUBLE
66779: EQUAL
66780: IFTRUE 66784
66782: GO 66913
66784: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66785: LD_ADDR_VAR 0 5
66789: PUSH
66790: LD_VAR 0 1
66794: PUSH
66795: LD_VAR 0 2
66799: PUSH
66800: LD_INT 3
66802: MINUS
66803: PUSH
66804: LD_INT 3
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: LIST
66811: PUSH
66812: LD_VAR 0 1
66816: PUSH
66817: LD_INT 4
66819: PLUS
66820: PUSH
66821: LD_VAR 0 2
66825: PUSH
66826: LD_INT 4
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: PUSH
66834: LD_VAR 0 1
66838: PUSH
66839: LD_VAR 0 2
66843: PUSH
66844: LD_INT 4
66846: PLUS
66847: PUSH
66848: LD_INT 0
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: LIST
66855: PUSH
66856: LD_VAR 0 1
66860: PUSH
66861: LD_INT 3
66863: MINUS
66864: PUSH
66865: LD_VAR 0 2
66869: PUSH
66870: LD_INT 1
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: LIST
66877: PUSH
66878: LD_VAR 0 1
66882: PUSH
66883: LD_INT 4
66885: MINUS
66886: PUSH
66887: LD_VAR 0 2
66891: PUSH
66892: LD_INT 4
66894: MINUS
66895: PUSH
66896: LD_INT 2
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: LIST
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: ST_TO_ADDR
// end ; 3 :
66911: GO 67333
66913: LD_INT 3
66915: DOUBLE
66916: EQUAL
66917: IFTRUE 66921
66919: GO 67054
66921: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66922: LD_ADDR_VAR 0 5
66926: PUSH
66927: LD_VAR 0 1
66931: PUSH
66932: LD_INT 3
66934: PLUS
66935: PUSH
66936: LD_VAR 0 2
66940: PUSH
66941: LD_INT 4
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: LIST
66948: PUSH
66949: LD_VAR 0 1
66953: PUSH
66954: LD_INT 4
66956: PLUS
66957: PUSH
66958: LD_VAR 0 2
66962: PUSH
66963: LD_INT 4
66965: PLUS
66966: PUSH
66967: LD_INT 5
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: LIST
66974: PUSH
66975: LD_VAR 0 1
66979: PUSH
66980: LD_INT 4
66982: MINUS
66983: PUSH
66984: LD_VAR 0 2
66988: PUSH
66989: LD_INT 1
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: LIST
66996: PUSH
66997: LD_VAR 0 1
67001: PUSH
67002: LD_VAR 0 2
67006: PUSH
67007: LD_INT 4
67009: MINUS
67010: PUSH
67011: LD_INT 3
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: LIST
67018: PUSH
67019: LD_VAR 0 1
67023: PUSH
67024: LD_INT 3
67026: MINUS
67027: PUSH
67028: LD_VAR 0 2
67032: PUSH
67033: LD_INT 3
67035: MINUS
67036: PUSH
67037: LD_INT 2
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: LIST
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: ST_TO_ADDR
// end ; 4 :
67052: GO 67333
67054: LD_INT 4
67056: DOUBLE
67057: EQUAL
67058: IFTRUE 67062
67060: GO 67195
67062: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67063: LD_ADDR_VAR 0 5
67067: PUSH
67068: LD_VAR 0 1
67072: PUSH
67073: LD_VAR 0 2
67077: PUSH
67078: LD_INT 4
67080: PLUS
67081: PUSH
67082: LD_INT 0
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: LIST
67089: PUSH
67090: LD_VAR 0 1
67094: PUSH
67095: LD_INT 3
67097: PLUS
67098: PUSH
67099: LD_VAR 0 2
67103: PUSH
67104: LD_INT 3
67106: PLUS
67107: PUSH
67108: LD_INT 5
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: LIST
67115: PUSH
67116: LD_VAR 0 1
67120: PUSH
67121: LD_INT 4
67123: PLUS
67124: PUSH
67125: LD_VAR 0 2
67129: PUSH
67130: LD_INT 4
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: LIST
67137: PUSH
67138: LD_VAR 0 1
67142: PUSH
67143: LD_VAR 0 2
67147: PUSH
67148: LD_INT 3
67150: MINUS
67151: PUSH
67152: LD_INT 3
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: LIST
67159: PUSH
67160: LD_VAR 0 1
67164: PUSH
67165: LD_INT 4
67167: MINUS
67168: PUSH
67169: LD_VAR 0 2
67173: PUSH
67174: LD_INT 4
67176: MINUS
67177: PUSH
67178: LD_INT 2
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: LIST
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: ST_TO_ADDR
// end ; 5 :
67193: GO 67333
67195: LD_INT 5
67197: DOUBLE
67198: EQUAL
67199: IFTRUE 67203
67201: GO 67332
67203: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67204: LD_ADDR_VAR 0 5
67208: PUSH
67209: LD_VAR 0 1
67213: PUSH
67214: LD_INT 4
67216: MINUS
67217: PUSH
67218: LD_VAR 0 2
67222: PUSH
67223: LD_INT 1
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: LIST
67230: PUSH
67231: LD_VAR 0 1
67235: PUSH
67236: LD_VAR 0 2
67240: PUSH
67241: LD_INT 4
67243: MINUS
67244: PUSH
67245: LD_INT 3
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: LIST
67252: PUSH
67253: LD_VAR 0 1
67257: PUSH
67258: LD_INT 4
67260: PLUS
67261: PUSH
67262: LD_VAR 0 2
67266: PUSH
67267: LD_INT 4
67269: PLUS
67270: PUSH
67271: LD_INT 5
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: LIST
67278: PUSH
67279: LD_VAR 0 1
67283: PUSH
67284: LD_INT 3
67286: PLUS
67287: PUSH
67288: LD_VAR 0 2
67292: PUSH
67293: LD_INT 4
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: LIST
67300: PUSH
67301: LD_VAR 0 1
67305: PUSH
67306: LD_VAR 0 2
67310: PUSH
67311: LD_INT 3
67313: PLUS
67314: PUSH
67315: LD_INT 0
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: LIST
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: ST_TO_ADDR
// end ; end ;
67330: GO 67333
67332: POP
// result := list ;
67333: LD_ADDR_VAR 0 4
67337: PUSH
67338: LD_VAR 0 5
67342: ST_TO_ADDR
// end ;
67343: LD_VAR 0 4
67347: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67348: LD_INT 0
67350: PPUSH
67351: PPUSH
67352: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67353: LD_VAR 0 1
67357: NOT
67358: PUSH
67359: LD_VAR 0 2
67363: PUSH
67364: LD_INT 1
67366: PUSH
67367: LD_INT 2
67369: PUSH
67370: LD_INT 3
67372: PUSH
67373: LD_INT 4
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: IN
67382: NOT
67383: OR
67384: IFFALSE 67388
// exit ;
67386: GO 67471
// tmp := [ ] ;
67388: LD_ADDR_VAR 0 5
67392: PUSH
67393: EMPTY
67394: ST_TO_ADDR
// for i in units do
67395: LD_ADDR_VAR 0 4
67399: PUSH
67400: LD_VAR 0 1
67404: PUSH
67405: FOR_IN
67406: IFFALSE 67440
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67408: LD_ADDR_VAR 0 5
67412: PUSH
67413: LD_VAR 0 5
67417: PPUSH
67418: LD_VAR 0 4
67422: PPUSH
67423: LD_VAR 0 2
67427: PPUSH
67428: CALL_OW 259
67432: PPUSH
67433: CALL 68831 0 2
67437: ST_TO_ADDR
67438: GO 67405
67440: POP
67441: POP
// if not tmp then
67442: LD_VAR 0 5
67446: NOT
67447: IFFALSE 67451
// exit ;
67449: GO 67471
// result := SortListByListDesc ( units , tmp ) ;
67451: LD_ADDR_VAR 0 3
67455: PUSH
67456: LD_VAR 0 1
67460: PPUSH
67461: LD_VAR 0 5
67465: PPUSH
67466: CALL_OW 77
67470: ST_TO_ADDR
// end ;
67471: LD_VAR 0 3
67475: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67476: LD_INT 0
67478: PPUSH
67479: PPUSH
67480: PPUSH
// result := false ;
67481: LD_ADDR_VAR 0 3
67485: PUSH
67486: LD_INT 0
67488: ST_TO_ADDR
// if not building then
67489: LD_VAR 0 2
67493: NOT
67494: IFFALSE 67498
// exit ;
67496: GO 67636
// x := GetX ( building ) ;
67498: LD_ADDR_VAR 0 4
67502: PUSH
67503: LD_VAR 0 2
67507: PPUSH
67508: CALL_OW 250
67512: ST_TO_ADDR
// y := GetY ( building ) ;
67513: LD_ADDR_VAR 0 5
67517: PUSH
67518: LD_VAR 0 2
67522: PPUSH
67523: CALL_OW 251
67527: ST_TO_ADDR
// if not x or not y then
67528: LD_VAR 0 4
67532: NOT
67533: PUSH
67534: LD_VAR 0 5
67538: NOT
67539: OR
67540: IFFALSE 67544
// exit ;
67542: GO 67636
// if GetTaskList ( unit ) then
67544: LD_VAR 0 1
67548: PPUSH
67549: CALL_OW 437
67553: IFFALSE 67636
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67555: LD_STRING e
67557: PUSH
67558: LD_VAR 0 1
67562: PPUSH
67563: CALL_OW 437
67567: PUSH
67568: LD_INT 1
67570: ARRAY
67571: PUSH
67572: LD_INT 1
67574: ARRAY
67575: EQUAL
67576: PUSH
67577: LD_VAR 0 4
67581: PUSH
67582: LD_VAR 0 1
67586: PPUSH
67587: CALL_OW 437
67591: PUSH
67592: LD_INT 1
67594: ARRAY
67595: PUSH
67596: LD_INT 2
67598: ARRAY
67599: EQUAL
67600: AND
67601: PUSH
67602: LD_VAR 0 5
67606: PUSH
67607: LD_VAR 0 1
67611: PPUSH
67612: CALL_OW 437
67616: PUSH
67617: LD_INT 1
67619: ARRAY
67620: PUSH
67621: LD_INT 3
67623: ARRAY
67624: EQUAL
67625: AND
67626: IFFALSE 67636
// result := true end ;
67628: LD_ADDR_VAR 0 3
67632: PUSH
67633: LD_INT 1
67635: ST_TO_ADDR
// end ;
67636: LD_VAR 0 3
67640: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67641: LD_INT 0
67643: PPUSH
// result := false ;
67644: LD_ADDR_VAR 0 4
67648: PUSH
67649: LD_INT 0
67651: ST_TO_ADDR
// if GetTaskList ( unit ) then
67652: LD_VAR 0 1
67656: PPUSH
67657: CALL_OW 437
67661: IFFALSE 67744
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67663: LD_STRING M
67665: PUSH
67666: LD_VAR 0 1
67670: PPUSH
67671: CALL_OW 437
67675: PUSH
67676: LD_INT 1
67678: ARRAY
67679: PUSH
67680: LD_INT 1
67682: ARRAY
67683: EQUAL
67684: PUSH
67685: LD_VAR 0 2
67689: PUSH
67690: LD_VAR 0 1
67694: PPUSH
67695: CALL_OW 437
67699: PUSH
67700: LD_INT 1
67702: ARRAY
67703: PUSH
67704: LD_INT 2
67706: ARRAY
67707: EQUAL
67708: AND
67709: PUSH
67710: LD_VAR 0 3
67714: PUSH
67715: LD_VAR 0 1
67719: PPUSH
67720: CALL_OW 437
67724: PUSH
67725: LD_INT 1
67727: ARRAY
67728: PUSH
67729: LD_INT 3
67731: ARRAY
67732: EQUAL
67733: AND
67734: IFFALSE 67744
// result := true ;
67736: LD_ADDR_VAR 0 4
67740: PUSH
67741: LD_INT 1
67743: ST_TO_ADDR
// end ; end ;
67744: LD_VAR 0 4
67748: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67749: LD_INT 0
67751: PPUSH
67752: PPUSH
67753: PPUSH
67754: PPUSH
// if not unit or not area then
67755: LD_VAR 0 1
67759: NOT
67760: PUSH
67761: LD_VAR 0 2
67765: NOT
67766: OR
67767: IFFALSE 67771
// exit ;
67769: GO 67934
// tmp := AreaToList ( area , i ) ;
67771: LD_ADDR_VAR 0 6
67775: PUSH
67776: LD_VAR 0 2
67780: PPUSH
67781: LD_VAR 0 5
67785: PPUSH
67786: CALL_OW 517
67790: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67791: LD_ADDR_VAR 0 5
67795: PUSH
67796: DOUBLE
67797: LD_INT 1
67799: DEC
67800: ST_TO_ADDR
67801: LD_VAR 0 6
67805: PUSH
67806: LD_INT 1
67808: ARRAY
67809: PUSH
67810: FOR_TO
67811: IFFALSE 67932
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67813: LD_ADDR_VAR 0 7
67817: PUSH
67818: LD_VAR 0 6
67822: PUSH
67823: LD_INT 1
67825: ARRAY
67826: PUSH
67827: LD_VAR 0 5
67831: ARRAY
67832: PUSH
67833: LD_VAR 0 6
67837: PUSH
67838: LD_INT 2
67840: ARRAY
67841: PUSH
67842: LD_VAR 0 5
67846: ARRAY
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
67852: LD_INT 92
67854: PUSH
67855: LD_VAR 0 7
67859: PUSH
67860: LD_INT 1
67862: ARRAY
67863: PUSH
67864: LD_VAR 0 7
67868: PUSH
67869: LD_INT 2
67871: ARRAY
67872: PUSH
67873: LD_INT 3
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: PPUSH
67882: CALL_OW 69
67886: PUSH
67887: LD_INT 0
67889: EQUAL
67890: IFFALSE 67930
// begin PlaceUnitArea ( unit , area , mode ) ;
67892: LD_VAR 0 1
67896: PPUSH
67897: LD_VAR 0 2
67901: PPUSH
67902: LD_VAR 0 3
67906: PPUSH
67907: CALL_OW 49
// result := IsPlaced ( unit ) ;
67911: LD_ADDR_VAR 0 4
67915: PUSH
67916: LD_VAR 0 1
67920: PPUSH
67921: CALL_OW 305
67925: ST_TO_ADDR
// exit ;
67926: POP
67927: POP
67928: GO 67934
// end ; end ;
67930: GO 67810
67932: POP
67933: POP
// end ;
67934: LD_VAR 0 4
67938: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67939: LD_INT 0
67941: PPUSH
67942: PPUSH
67943: PPUSH
// if not side or side > 8 then
67944: LD_VAR 0 1
67948: NOT
67949: PUSH
67950: LD_VAR 0 1
67954: PUSH
67955: LD_INT 8
67957: GREATER
67958: OR
67959: IFFALSE 67963
// exit ;
67961: GO 68150
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67963: LD_ADDR_VAR 0 4
67967: PUSH
67968: LD_INT 22
67970: PUSH
67971: LD_VAR 0 1
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 21
67982: PUSH
67983: LD_INT 3
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: PPUSH
67994: CALL_OW 69
67998: ST_TO_ADDR
// if not tmp then
67999: LD_VAR 0 4
68003: NOT
68004: IFFALSE 68008
// exit ;
68006: GO 68150
// enable_addtolog := true ;
68008: LD_ADDR_OWVAR 81
68012: PUSH
68013: LD_INT 1
68015: ST_TO_ADDR
// AddToLog ( [ ) ;
68016: LD_STRING [
68018: PPUSH
68019: CALL_OW 561
// for i in tmp do
68023: LD_ADDR_VAR 0 3
68027: PUSH
68028: LD_VAR 0 4
68032: PUSH
68033: FOR_IN
68034: IFFALSE 68141
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68036: LD_STRING [
68038: PUSH
68039: LD_VAR 0 3
68043: PPUSH
68044: CALL_OW 266
68048: STR
68049: PUSH
68050: LD_STRING , 
68052: STR
68053: PUSH
68054: LD_VAR 0 3
68058: PPUSH
68059: CALL_OW 250
68063: STR
68064: PUSH
68065: LD_STRING , 
68067: STR
68068: PUSH
68069: LD_VAR 0 3
68073: PPUSH
68074: CALL_OW 251
68078: STR
68079: PUSH
68080: LD_STRING , 
68082: STR
68083: PUSH
68084: LD_VAR 0 3
68088: PPUSH
68089: CALL_OW 254
68093: STR
68094: PUSH
68095: LD_STRING , 
68097: STR
68098: PUSH
68099: LD_VAR 0 3
68103: PPUSH
68104: LD_INT 1
68106: PPUSH
68107: CALL_OW 268
68111: STR
68112: PUSH
68113: LD_STRING , 
68115: STR
68116: PUSH
68117: LD_VAR 0 3
68121: PPUSH
68122: LD_INT 2
68124: PPUSH
68125: CALL_OW 268
68129: STR
68130: PUSH
68131: LD_STRING ],
68133: STR
68134: PPUSH
68135: CALL_OW 561
// end ;
68139: GO 68033
68141: POP
68142: POP
// AddToLog ( ]; ) ;
68143: LD_STRING ];
68145: PPUSH
68146: CALL_OW 561
// end ;
68150: LD_VAR 0 2
68154: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68155: LD_INT 0
68157: PPUSH
68158: PPUSH
68159: PPUSH
68160: PPUSH
68161: PPUSH
// if not area or not rate or not max then
68162: LD_VAR 0 1
68166: NOT
68167: PUSH
68168: LD_VAR 0 2
68172: NOT
68173: OR
68174: PUSH
68175: LD_VAR 0 4
68179: NOT
68180: OR
68181: IFFALSE 68185
// exit ;
68183: GO 68374
// while 1 do
68185: LD_INT 1
68187: IFFALSE 68374
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68189: LD_ADDR_VAR 0 9
68193: PUSH
68194: LD_VAR 0 1
68198: PPUSH
68199: LD_INT 1
68201: PPUSH
68202: CALL_OW 287
68206: PUSH
68207: LD_INT 10
68209: MUL
68210: ST_TO_ADDR
// r := rate / 10 ;
68211: LD_ADDR_VAR 0 7
68215: PUSH
68216: LD_VAR 0 2
68220: PUSH
68221: LD_INT 10
68223: DIVREAL
68224: ST_TO_ADDR
// time := 1 1$00 ;
68225: LD_ADDR_VAR 0 8
68229: PUSH
68230: LD_INT 2100
68232: ST_TO_ADDR
// if amount < min then
68233: LD_VAR 0 9
68237: PUSH
68238: LD_VAR 0 3
68242: LESS
68243: IFFALSE 68261
// r := r * 2 else
68245: LD_ADDR_VAR 0 7
68249: PUSH
68250: LD_VAR 0 7
68254: PUSH
68255: LD_INT 2
68257: MUL
68258: ST_TO_ADDR
68259: GO 68287
// if amount > max then
68261: LD_VAR 0 9
68265: PUSH
68266: LD_VAR 0 4
68270: GREATER
68271: IFFALSE 68287
// r := r / 2 ;
68273: LD_ADDR_VAR 0 7
68277: PUSH
68278: LD_VAR 0 7
68282: PUSH
68283: LD_INT 2
68285: DIVREAL
68286: ST_TO_ADDR
// time := time / r ;
68287: LD_ADDR_VAR 0 8
68291: PUSH
68292: LD_VAR 0 8
68296: PUSH
68297: LD_VAR 0 7
68301: DIVREAL
68302: ST_TO_ADDR
// if time < 0 then
68303: LD_VAR 0 8
68307: PUSH
68308: LD_INT 0
68310: LESS
68311: IFFALSE 68328
// time := time * - 1 ;
68313: LD_ADDR_VAR 0 8
68317: PUSH
68318: LD_VAR 0 8
68322: PUSH
68323: LD_INT 1
68325: NEG
68326: MUL
68327: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68328: LD_VAR 0 8
68332: PUSH
68333: LD_INT 35
68335: PPUSH
68336: LD_INT 875
68338: PPUSH
68339: CALL_OW 12
68343: PLUS
68344: PPUSH
68345: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68349: LD_INT 1
68351: PPUSH
68352: LD_INT 5
68354: PPUSH
68355: CALL_OW 12
68359: PPUSH
68360: LD_VAR 0 1
68364: PPUSH
68365: LD_INT 1
68367: PPUSH
68368: CALL_OW 55
// end ;
68372: GO 68185
// end ;
68374: LD_VAR 0 5
68378: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68379: LD_INT 0
68381: PPUSH
68382: PPUSH
68383: PPUSH
68384: PPUSH
68385: PPUSH
68386: PPUSH
68387: PPUSH
68388: PPUSH
// if not turrets or not factories then
68389: LD_VAR 0 1
68393: NOT
68394: PUSH
68395: LD_VAR 0 2
68399: NOT
68400: OR
68401: IFFALSE 68405
// exit ;
68403: GO 68712
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68405: LD_ADDR_VAR 0 10
68409: PUSH
68410: LD_INT 5
68412: PUSH
68413: LD_INT 6
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 2
68422: PUSH
68423: LD_INT 4
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PUSH
68430: LD_INT 3
68432: PUSH
68433: LD_INT 5
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 24
68447: PUSH
68448: LD_INT 25
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 23
68457: PUSH
68458: LD_INT 27
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 42
68471: PUSH
68472: LD_INT 43
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 44
68481: PUSH
68482: LD_INT 46
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 45
68491: PUSH
68492: LD_INT 47
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: LIST
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: LIST
68508: ST_TO_ADDR
// result := [ ] ;
68509: LD_ADDR_VAR 0 3
68513: PUSH
68514: EMPTY
68515: ST_TO_ADDR
// for i in turrets do
68516: LD_ADDR_VAR 0 4
68520: PUSH
68521: LD_VAR 0 1
68525: PUSH
68526: FOR_IN
68527: IFFALSE 68710
// begin nat := GetNation ( i ) ;
68529: LD_ADDR_VAR 0 7
68533: PUSH
68534: LD_VAR 0 4
68538: PPUSH
68539: CALL_OW 248
68543: ST_TO_ADDR
// weapon := 0 ;
68544: LD_ADDR_VAR 0 8
68548: PUSH
68549: LD_INT 0
68551: ST_TO_ADDR
// if not nat then
68552: LD_VAR 0 7
68556: NOT
68557: IFFALSE 68561
// continue ;
68559: GO 68526
// for j in list [ nat ] do
68561: LD_ADDR_VAR 0 5
68565: PUSH
68566: LD_VAR 0 10
68570: PUSH
68571: LD_VAR 0 7
68575: ARRAY
68576: PUSH
68577: FOR_IN
68578: IFFALSE 68619
// if GetBWeapon ( i ) = j [ 1 ] then
68580: LD_VAR 0 4
68584: PPUSH
68585: CALL_OW 269
68589: PUSH
68590: LD_VAR 0 5
68594: PUSH
68595: LD_INT 1
68597: ARRAY
68598: EQUAL
68599: IFFALSE 68617
// begin weapon := j [ 2 ] ;
68601: LD_ADDR_VAR 0 8
68605: PUSH
68606: LD_VAR 0 5
68610: PUSH
68611: LD_INT 2
68613: ARRAY
68614: ST_TO_ADDR
// break ;
68615: GO 68619
// end ;
68617: GO 68577
68619: POP
68620: POP
// if not weapon then
68621: LD_VAR 0 8
68625: NOT
68626: IFFALSE 68630
// continue ;
68628: GO 68526
// for k in factories do
68630: LD_ADDR_VAR 0 6
68634: PUSH
68635: LD_VAR 0 2
68639: PUSH
68640: FOR_IN
68641: IFFALSE 68706
// begin weapons := AvailableWeaponList ( k ) ;
68643: LD_ADDR_VAR 0 9
68647: PUSH
68648: LD_VAR 0 6
68652: PPUSH
68653: CALL_OW 478
68657: ST_TO_ADDR
// if not weapons then
68658: LD_VAR 0 9
68662: NOT
68663: IFFALSE 68667
// continue ;
68665: GO 68640
// if weapon in weapons then
68667: LD_VAR 0 8
68671: PUSH
68672: LD_VAR 0 9
68676: IN
68677: IFFALSE 68704
// begin result := [ i , weapon ] ;
68679: LD_ADDR_VAR 0 3
68683: PUSH
68684: LD_VAR 0 4
68688: PUSH
68689: LD_VAR 0 8
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: ST_TO_ADDR
// exit ;
68698: POP
68699: POP
68700: POP
68701: POP
68702: GO 68712
// end ; end ;
68704: GO 68640
68706: POP
68707: POP
// end ;
68708: GO 68526
68710: POP
68711: POP
// end ;
68712: LD_VAR 0 3
68716: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68717: LD_INT 0
68719: PPUSH
// if not side or side > 8 then
68720: LD_VAR 0 3
68724: NOT
68725: PUSH
68726: LD_VAR 0 3
68730: PUSH
68731: LD_INT 8
68733: GREATER
68734: OR
68735: IFFALSE 68739
// exit ;
68737: GO 68798
// if not range then
68739: LD_VAR 0 4
68743: NOT
68744: IFFALSE 68755
// range := - 12 ;
68746: LD_ADDR_VAR 0 4
68750: PUSH
68751: LD_INT 12
68753: NEG
68754: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68755: LD_VAR 0 1
68759: PPUSH
68760: LD_VAR 0 2
68764: PPUSH
68765: LD_VAR 0 3
68769: PPUSH
68770: LD_VAR 0 4
68774: PPUSH
68775: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68779: LD_VAR 0 1
68783: PPUSH
68784: LD_VAR 0 2
68788: PPUSH
68789: LD_VAR 0 3
68793: PPUSH
68794: CALL_OW 331
// end ;
68798: LD_VAR 0 5
68802: RET
// export function Video ( mode ) ; begin
68803: LD_INT 0
68805: PPUSH
// ingame_video = mode ;
68806: LD_ADDR_OWVAR 52
68810: PUSH
68811: LD_VAR 0 1
68815: ST_TO_ADDR
// interface_hidden = mode ;
68816: LD_ADDR_OWVAR 54
68820: PUSH
68821: LD_VAR 0 1
68825: ST_TO_ADDR
// end ;
68826: LD_VAR 0 2
68830: RET
// export function Join ( array , element ) ; begin
68831: LD_INT 0
68833: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68834: LD_ADDR_VAR 0 3
68838: PUSH
68839: LD_VAR 0 1
68843: PPUSH
68844: LD_VAR 0 1
68848: PUSH
68849: LD_INT 1
68851: PLUS
68852: PPUSH
68853: LD_VAR 0 2
68857: PPUSH
68858: CALL_OW 1
68862: ST_TO_ADDR
// end ;
68863: LD_VAR 0 3
68867: RET
// export function JoinUnion ( array , element ) ; begin
68868: LD_INT 0
68870: PPUSH
// result := array union element ;
68871: LD_ADDR_VAR 0 3
68875: PUSH
68876: LD_VAR 0 1
68880: PUSH
68881: LD_VAR 0 2
68885: UNION
68886: ST_TO_ADDR
// end ;
68887: LD_VAR 0 3
68891: RET
// export function GetBehemoths ( side ) ; begin
68892: LD_INT 0
68894: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68895: LD_ADDR_VAR 0 2
68899: PUSH
68900: LD_INT 22
68902: PUSH
68903: LD_VAR 0 1
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 31
68914: PUSH
68915: LD_INT 25
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PPUSH
68926: CALL_OW 69
68930: ST_TO_ADDR
// end ;
68931: LD_VAR 0 2
68935: RET
// export function Shuffle ( array ) ; var i , index ; begin
68936: LD_INT 0
68938: PPUSH
68939: PPUSH
68940: PPUSH
// result := [ ] ;
68941: LD_ADDR_VAR 0 2
68945: PUSH
68946: EMPTY
68947: ST_TO_ADDR
// if not array then
68948: LD_VAR 0 1
68952: NOT
68953: IFFALSE 68957
// exit ;
68955: GO 69056
// Randomize ;
68957: CALL_OW 10
// for i = array downto 1 do
68961: LD_ADDR_VAR 0 3
68965: PUSH
68966: DOUBLE
68967: LD_VAR 0 1
68971: INC
68972: ST_TO_ADDR
68973: LD_INT 1
68975: PUSH
68976: FOR_DOWNTO
68977: IFFALSE 69054
// begin index := rand ( 1 , array ) ;
68979: LD_ADDR_VAR 0 4
68983: PUSH
68984: LD_INT 1
68986: PPUSH
68987: LD_VAR 0 1
68991: PPUSH
68992: CALL_OW 12
68996: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68997: LD_ADDR_VAR 0 2
69001: PUSH
69002: LD_VAR 0 2
69006: PPUSH
69007: LD_VAR 0 2
69011: PUSH
69012: LD_INT 1
69014: PLUS
69015: PPUSH
69016: LD_VAR 0 1
69020: PUSH
69021: LD_VAR 0 4
69025: ARRAY
69026: PPUSH
69027: CALL_OW 2
69031: ST_TO_ADDR
// array := Delete ( array , index ) ;
69032: LD_ADDR_VAR 0 1
69036: PUSH
69037: LD_VAR 0 1
69041: PPUSH
69042: LD_VAR 0 4
69046: PPUSH
69047: CALL_OW 3
69051: ST_TO_ADDR
// end ;
69052: GO 68976
69054: POP
69055: POP
// end ;
69056: LD_VAR 0 2
69060: RET
// export function GetBaseMaterials ( base ) ; begin
69061: LD_INT 0
69063: PPUSH
// result := [ 0 , 0 , 0 ] ;
69064: LD_ADDR_VAR 0 2
69068: PUSH
69069: LD_INT 0
69071: PUSH
69072: LD_INT 0
69074: PUSH
69075: LD_INT 0
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: LIST
69082: ST_TO_ADDR
// if not base then
69083: LD_VAR 0 1
69087: NOT
69088: IFFALSE 69092
// exit ;
69090: GO 69141
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69092: LD_ADDR_VAR 0 2
69096: PUSH
69097: LD_VAR 0 1
69101: PPUSH
69102: LD_INT 1
69104: PPUSH
69105: CALL_OW 275
69109: PUSH
69110: LD_VAR 0 1
69114: PPUSH
69115: LD_INT 2
69117: PPUSH
69118: CALL_OW 275
69122: PUSH
69123: LD_VAR 0 1
69127: PPUSH
69128: LD_INT 3
69130: PPUSH
69131: CALL_OW 275
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: LIST
69140: ST_TO_ADDR
// end ;
69141: LD_VAR 0 2
69145: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69146: LD_INT 0
69148: PPUSH
69149: PPUSH
// result := array ;
69150: LD_ADDR_VAR 0 3
69154: PUSH
69155: LD_VAR 0 1
69159: ST_TO_ADDR
// if size >= result then
69160: LD_VAR 0 2
69164: PUSH
69165: LD_VAR 0 3
69169: GREATEREQUAL
69170: IFFALSE 69174
// exit ;
69172: GO 69224
// if size then
69174: LD_VAR 0 2
69178: IFFALSE 69224
// for i := array downto size do
69180: LD_ADDR_VAR 0 4
69184: PUSH
69185: DOUBLE
69186: LD_VAR 0 1
69190: INC
69191: ST_TO_ADDR
69192: LD_VAR 0 2
69196: PUSH
69197: FOR_DOWNTO
69198: IFFALSE 69222
// result := Delete ( result , result ) ;
69200: LD_ADDR_VAR 0 3
69204: PUSH
69205: LD_VAR 0 3
69209: PPUSH
69210: LD_VAR 0 3
69214: PPUSH
69215: CALL_OW 3
69219: ST_TO_ADDR
69220: GO 69197
69222: POP
69223: POP
// end ;
69224: LD_VAR 0 3
69228: RET
// export function ComExit ( unit ) ; var tmp ; begin
69229: LD_INT 0
69231: PPUSH
69232: PPUSH
// if not IsInUnit ( unit ) then
69233: LD_VAR 0 1
69237: PPUSH
69238: CALL_OW 310
69242: NOT
69243: IFFALSE 69247
// exit ;
69245: GO 69307
// tmp := IsInUnit ( unit ) ;
69247: LD_ADDR_VAR 0 3
69251: PUSH
69252: LD_VAR 0 1
69256: PPUSH
69257: CALL_OW 310
69261: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69262: LD_VAR 0 3
69266: PPUSH
69267: CALL_OW 247
69271: PUSH
69272: LD_INT 2
69274: EQUAL
69275: IFFALSE 69288
// ComExitVehicle ( unit ) else
69277: LD_VAR 0 1
69281: PPUSH
69282: CALL_OW 121
69286: GO 69297
// ComExitBuilding ( unit ) ;
69288: LD_VAR 0 1
69292: PPUSH
69293: CALL_OW 122
// result := tmp ;
69297: LD_ADDR_VAR 0 2
69301: PUSH
69302: LD_VAR 0 3
69306: ST_TO_ADDR
// end ;
69307: LD_VAR 0 2
69311: RET
// export function ComExitAll ( units ) ; var i ; begin
69312: LD_INT 0
69314: PPUSH
69315: PPUSH
// if not units then
69316: LD_VAR 0 1
69320: NOT
69321: IFFALSE 69325
// exit ;
69323: GO 69351
// for i in units do
69325: LD_ADDR_VAR 0 3
69329: PUSH
69330: LD_VAR 0 1
69334: PUSH
69335: FOR_IN
69336: IFFALSE 69349
// ComExit ( i ) ;
69338: LD_VAR 0 3
69342: PPUSH
69343: CALL 69229 0 1
69347: GO 69335
69349: POP
69350: POP
// end ;
69351: LD_VAR 0 2
69355: RET
// export function ResetHc ; begin
69356: LD_INT 0
69358: PPUSH
// InitHc ;
69359: CALL_OW 19
// hc_importance := 0 ;
69363: LD_ADDR_OWVAR 32
69367: PUSH
69368: LD_INT 0
69370: ST_TO_ADDR
// end ;
69371: LD_VAR 0 1
69375: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69376: LD_INT 0
69378: PPUSH
69379: PPUSH
69380: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69381: LD_ADDR_VAR 0 6
69385: PUSH
69386: LD_VAR 0 1
69390: PUSH
69391: LD_VAR 0 3
69395: PLUS
69396: PUSH
69397: LD_INT 2
69399: DIV
69400: ST_TO_ADDR
// if _x < 0 then
69401: LD_VAR 0 6
69405: PUSH
69406: LD_INT 0
69408: LESS
69409: IFFALSE 69426
// _x := _x * - 1 ;
69411: LD_ADDR_VAR 0 6
69415: PUSH
69416: LD_VAR 0 6
69420: PUSH
69421: LD_INT 1
69423: NEG
69424: MUL
69425: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69426: LD_ADDR_VAR 0 7
69430: PUSH
69431: LD_VAR 0 2
69435: PUSH
69436: LD_VAR 0 4
69440: PLUS
69441: PUSH
69442: LD_INT 2
69444: DIV
69445: ST_TO_ADDR
// if _y < 0 then
69446: LD_VAR 0 7
69450: PUSH
69451: LD_INT 0
69453: LESS
69454: IFFALSE 69471
// _y := _y * - 1 ;
69456: LD_ADDR_VAR 0 7
69460: PUSH
69461: LD_VAR 0 7
69465: PUSH
69466: LD_INT 1
69468: NEG
69469: MUL
69470: ST_TO_ADDR
// result := [ _x , _y ] ;
69471: LD_ADDR_VAR 0 5
69475: PUSH
69476: LD_VAR 0 6
69480: PUSH
69481: LD_VAR 0 7
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: ST_TO_ADDR
// end ;
69490: LD_VAR 0 5
69494: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69495: LD_INT 0
69497: PPUSH
69498: PPUSH
69499: PPUSH
69500: PPUSH
// task := GetTaskList ( unit ) ;
69501: LD_ADDR_VAR 0 7
69505: PUSH
69506: LD_VAR 0 1
69510: PPUSH
69511: CALL_OW 437
69515: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69516: LD_VAR 0 7
69520: NOT
69521: PUSH
69522: LD_VAR 0 1
69526: PPUSH
69527: LD_VAR 0 2
69531: PPUSH
69532: CALL_OW 308
69536: NOT
69537: AND
69538: IFFALSE 69542
// exit ;
69540: GO 69660
// if IsInArea ( unit , area ) then
69542: LD_VAR 0 1
69546: PPUSH
69547: LD_VAR 0 2
69551: PPUSH
69552: CALL_OW 308
69556: IFFALSE 69574
// begin ComMoveToArea ( unit , goAway ) ;
69558: LD_VAR 0 1
69562: PPUSH
69563: LD_VAR 0 3
69567: PPUSH
69568: CALL_OW 113
// exit ;
69572: GO 69660
// end ; if task [ 1 ] [ 1 ] <> M then
69574: LD_VAR 0 7
69578: PUSH
69579: LD_INT 1
69581: ARRAY
69582: PUSH
69583: LD_INT 1
69585: ARRAY
69586: PUSH
69587: LD_STRING M
69589: NONEQUAL
69590: IFFALSE 69594
// exit ;
69592: GO 69660
// x := task [ 1 ] [ 2 ] ;
69594: LD_ADDR_VAR 0 5
69598: PUSH
69599: LD_VAR 0 7
69603: PUSH
69604: LD_INT 1
69606: ARRAY
69607: PUSH
69608: LD_INT 2
69610: ARRAY
69611: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69612: LD_ADDR_VAR 0 6
69616: PUSH
69617: LD_VAR 0 7
69621: PUSH
69622: LD_INT 1
69624: ARRAY
69625: PUSH
69626: LD_INT 3
69628: ARRAY
69629: ST_TO_ADDR
// if InArea ( x , y , area ) then
69630: LD_VAR 0 5
69634: PPUSH
69635: LD_VAR 0 6
69639: PPUSH
69640: LD_VAR 0 2
69644: PPUSH
69645: CALL_OW 309
69649: IFFALSE 69660
// ComStop ( unit ) ;
69651: LD_VAR 0 1
69655: PPUSH
69656: CALL_OW 141
// end ;
69660: LD_VAR 0 4
69664: RET
// export function Abs ( value ) ; begin
69665: LD_INT 0
69667: PPUSH
// result := value ;
69668: LD_ADDR_VAR 0 2
69672: PUSH
69673: LD_VAR 0 1
69677: ST_TO_ADDR
// if value < 0 then
69678: LD_VAR 0 1
69682: PUSH
69683: LD_INT 0
69685: LESS
69686: IFFALSE 69703
// result := value * - 1 ;
69688: LD_ADDR_VAR 0 2
69692: PUSH
69693: LD_VAR 0 1
69697: PUSH
69698: LD_INT 1
69700: NEG
69701: MUL
69702: ST_TO_ADDR
// end ;
69703: LD_VAR 0 2
69707: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69708: LD_INT 0
69710: PPUSH
69711: PPUSH
69712: PPUSH
69713: PPUSH
69714: PPUSH
69715: PPUSH
69716: PPUSH
69717: PPUSH
// if not unit or not building then
69718: LD_VAR 0 1
69722: NOT
69723: PUSH
69724: LD_VAR 0 2
69728: NOT
69729: OR
69730: IFFALSE 69734
// exit ;
69732: GO 69960
// x := GetX ( building ) ;
69734: LD_ADDR_VAR 0 4
69738: PUSH
69739: LD_VAR 0 2
69743: PPUSH
69744: CALL_OW 250
69748: ST_TO_ADDR
// y := GetY ( building ) ;
69749: LD_ADDR_VAR 0 6
69753: PUSH
69754: LD_VAR 0 2
69758: PPUSH
69759: CALL_OW 251
69763: ST_TO_ADDR
// d := GetDir ( building ) ;
69764: LD_ADDR_VAR 0 8
69768: PUSH
69769: LD_VAR 0 2
69773: PPUSH
69774: CALL_OW 254
69778: ST_TO_ADDR
// r := 4 ;
69779: LD_ADDR_VAR 0 9
69783: PUSH
69784: LD_INT 4
69786: ST_TO_ADDR
// for i := 1 to 5 do
69787: LD_ADDR_VAR 0 10
69791: PUSH
69792: DOUBLE
69793: LD_INT 1
69795: DEC
69796: ST_TO_ADDR
69797: LD_INT 5
69799: PUSH
69800: FOR_TO
69801: IFFALSE 69958
// begin _x := ShiftX ( x , d , r + i ) ;
69803: LD_ADDR_VAR 0 5
69807: PUSH
69808: LD_VAR 0 4
69812: PPUSH
69813: LD_VAR 0 8
69817: PPUSH
69818: LD_VAR 0 9
69822: PUSH
69823: LD_VAR 0 10
69827: PLUS
69828: PPUSH
69829: CALL_OW 272
69833: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69834: LD_ADDR_VAR 0 7
69838: PUSH
69839: LD_VAR 0 6
69843: PPUSH
69844: LD_VAR 0 8
69848: PPUSH
69849: LD_VAR 0 9
69853: PUSH
69854: LD_VAR 0 10
69858: PLUS
69859: PPUSH
69860: CALL_OW 273
69864: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69865: LD_VAR 0 5
69869: PPUSH
69870: LD_VAR 0 7
69874: PPUSH
69875: CALL_OW 488
69879: PUSH
69880: LD_VAR 0 5
69884: PPUSH
69885: LD_VAR 0 7
69889: PPUSH
69890: CALL_OW 428
69894: PPUSH
69895: CALL_OW 247
69899: PUSH
69900: LD_INT 3
69902: PUSH
69903: LD_INT 2
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: IN
69910: NOT
69911: AND
69912: IFFALSE 69956
// begin ComMoveXY ( unit , _x , _y ) ;
69914: LD_VAR 0 1
69918: PPUSH
69919: LD_VAR 0 5
69923: PPUSH
69924: LD_VAR 0 7
69928: PPUSH
69929: CALL_OW 111
// result := [ _x , _y ] ;
69933: LD_ADDR_VAR 0 3
69937: PUSH
69938: LD_VAR 0 5
69942: PUSH
69943: LD_VAR 0 7
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: ST_TO_ADDR
// exit ;
69952: POP
69953: POP
69954: GO 69960
// end ; end ;
69956: GO 69800
69958: POP
69959: POP
// end ;
69960: LD_VAR 0 3
69964: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69965: LD_INT 0
69967: PPUSH
69968: PPUSH
69969: PPUSH
// result := 0 ;
69970: LD_ADDR_VAR 0 3
69974: PUSH
69975: LD_INT 0
69977: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69978: LD_VAR 0 1
69982: PUSH
69983: LD_INT 0
69985: LESS
69986: PUSH
69987: LD_VAR 0 1
69991: PUSH
69992: LD_INT 8
69994: GREATER
69995: OR
69996: PUSH
69997: LD_VAR 0 2
70001: PUSH
70002: LD_INT 0
70004: LESS
70005: OR
70006: PUSH
70007: LD_VAR 0 2
70011: PUSH
70012: LD_INT 8
70014: GREATER
70015: OR
70016: IFFALSE 70020
// exit ;
70018: GO 70095
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70020: LD_ADDR_VAR 0 4
70024: PUSH
70025: LD_INT 22
70027: PUSH
70028: LD_VAR 0 2
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PPUSH
70037: CALL_OW 69
70041: PUSH
70042: FOR_IN
70043: IFFALSE 70093
// begin un := UnitShoot ( i ) ;
70045: LD_ADDR_VAR 0 5
70049: PUSH
70050: LD_VAR 0 4
70054: PPUSH
70055: CALL_OW 504
70059: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70060: LD_VAR 0 5
70064: PPUSH
70065: CALL_OW 255
70069: PUSH
70070: LD_VAR 0 1
70074: EQUAL
70075: IFFALSE 70091
// begin result := un ;
70077: LD_ADDR_VAR 0 3
70081: PUSH
70082: LD_VAR 0 5
70086: ST_TO_ADDR
// exit ;
70087: POP
70088: POP
70089: GO 70095
// end ; end ;
70091: GO 70042
70093: POP
70094: POP
// end ;
70095: LD_VAR 0 3
70099: RET
// export function GetCargoBay ( units ) ; begin
70100: LD_INT 0
70102: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70103: LD_ADDR_VAR 0 2
70107: PUSH
70108: LD_VAR 0 1
70112: PPUSH
70113: LD_INT 2
70115: PUSH
70116: LD_INT 34
70118: PUSH
70119: LD_INT 12
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 34
70128: PUSH
70129: LD_INT 51
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 34
70138: PUSH
70139: LD_INT 32
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 34
70148: PUSH
70149: LD_INT 89
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: PPUSH
70163: CALL_OW 72
70167: ST_TO_ADDR
// end ;
70168: LD_VAR 0 2
70172: RET
// export function Negate ( value ) ; begin
70173: LD_INT 0
70175: PPUSH
// result := not value ;
70176: LD_ADDR_VAR 0 2
70180: PUSH
70181: LD_VAR 0 1
70185: NOT
70186: ST_TO_ADDR
// end ;
70187: LD_VAR 0 2
70191: RET
// export function Inc ( value ) ; begin
70192: LD_INT 0
70194: PPUSH
// result := value + 1 ;
70195: LD_ADDR_VAR 0 2
70199: PUSH
70200: LD_VAR 0 1
70204: PUSH
70205: LD_INT 1
70207: PLUS
70208: ST_TO_ADDR
// end ;
70209: LD_VAR 0 2
70213: RET
// export function Dec ( value ) ; begin
70214: LD_INT 0
70216: PPUSH
// result := value - 1 ;
70217: LD_ADDR_VAR 0 2
70221: PUSH
70222: LD_VAR 0 1
70226: PUSH
70227: LD_INT 1
70229: MINUS
70230: ST_TO_ADDR
// end ;
70231: LD_VAR 0 2
70235: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70236: LD_INT 0
70238: PPUSH
70239: PPUSH
70240: PPUSH
70241: PPUSH
70242: PPUSH
70243: PPUSH
70244: PPUSH
70245: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70246: LD_VAR 0 1
70250: PPUSH
70251: LD_VAR 0 2
70255: PPUSH
70256: CALL_OW 488
70260: NOT
70261: PUSH
70262: LD_VAR 0 3
70266: PPUSH
70267: LD_VAR 0 4
70271: PPUSH
70272: CALL_OW 488
70276: NOT
70277: OR
70278: IFFALSE 70291
// begin result := - 1 ;
70280: LD_ADDR_VAR 0 5
70284: PUSH
70285: LD_INT 1
70287: NEG
70288: ST_TO_ADDR
// exit ;
70289: GO 70526
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70291: LD_ADDR_VAR 0 12
70295: PUSH
70296: LD_VAR 0 1
70300: PPUSH
70301: LD_VAR 0 2
70305: PPUSH
70306: LD_VAR 0 3
70310: PPUSH
70311: LD_VAR 0 4
70315: PPUSH
70316: CALL 69376 0 4
70320: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70321: LD_ADDR_VAR 0 11
70325: PUSH
70326: LD_VAR 0 1
70330: PPUSH
70331: LD_VAR 0 2
70335: PPUSH
70336: LD_VAR 0 12
70340: PUSH
70341: LD_INT 1
70343: ARRAY
70344: PPUSH
70345: LD_VAR 0 12
70349: PUSH
70350: LD_INT 2
70352: ARRAY
70353: PPUSH
70354: CALL_OW 298
70358: ST_TO_ADDR
// distance := 9999 ;
70359: LD_ADDR_VAR 0 10
70363: PUSH
70364: LD_INT 9999
70366: ST_TO_ADDR
// for i := 0 to 5 do
70367: LD_ADDR_VAR 0 6
70371: PUSH
70372: DOUBLE
70373: LD_INT 0
70375: DEC
70376: ST_TO_ADDR
70377: LD_INT 5
70379: PUSH
70380: FOR_TO
70381: IFFALSE 70524
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70383: LD_ADDR_VAR 0 7
70387: PUSH
70388: LD_VAR 0 1
70392: PPUSH
70393: LD_VAR 0 6
70397: PPUSH
70398: LD_VAR 0 11
70402: PPUSH
70403: CALL_OW 272
70407: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70408: LD_ADDR_VAR 0 8
70412: PUSH
70413: LD_VAR 0 2
70417: PPUSH
70418: LD_VAR 0 6
70422: PPUSH
70423: LD_VAR 0 11
70427: PPUSH
70428: CALL_OW 273
70432: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70433: LD_VAR 0 7
70437: PPUSH
70438: LD_VAR 0 8
70442: PPUSH
70443: CALL_OW 488
70447: NOT
70448: IFFALSE 70452
// continue ;
70450: GO 70380
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70452: LD_ADDR_VAR 0 9
70456: PUSH
70457: LD_VAR 0 12
70461: PUSH
70462: LD_INT 1
70464: ARRAY
70465: PPUSH
70466: LD_VAR 0 12
70470: PUSH
70471: LD_INT 2
70473: ARRAY
70474: PPUSH
70475: LD_VAR 0 7
70479: PPUSH
70480: LD_VAR 0 8
70484: PPUSH
70485: CALL_OW 298
70489: ST_TO_ADDR
// if tmp < distance then
70490: LD_VAR 0 9
70494: PUSH
70495: LD_VAR 0 10
70499: LESS
70500: IFFALSE 70522
// begin result := i ;
70502: LD_ADDR_VAR 0 5
70506: PUSH
70507: LD_VAR 0 6
70511: ST_TO_ADDR
// distance := tmp ;
70512: LD_ADDR_VAR 0 10
70516: PUSH
70517: LD_VAR 0 9
70521: ST_TO_ADDR
// end ; end ;
70522: GO 70380
70524: POP
70525: POP
// end ;
70526: LD_VAR 0 5
70530: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70531: LD_INT 0
70533: PPUSH
70534: PPUSH
// if not driver or not IsInUnit ( driver ) then
70535: LD_VAR 0 1
70539: NOT
70540: PUSH
70541: LD_VAR 0 1
70545: PPUSH
70546: CALL_OW 310
70550: NOT
70551: OR
70552: IFFALSE 70556
// exit ;
70554: GO 70646
// vehicle := IsInUnit ( driver ) ;
70556: LD_ADDR_VAR 0 3
70560: PUSH
70561: LD_VAR 0 1
70565: PPUSH
70566: CALL_OW 310
70570: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70571: LD_VAR 0 1
70575: PPUSH
70576: LD_STRING \
70578: PUSH
70579: LD_INT 0
70581: PUSH
70582: LD_INT 0
70584: PUSH
70585: LD_INT 0
70587: PUSH
70588: LD_INT 0
70590: PUSH
70591: LD_INT 0
70593: PUSH
70594: LD_INT 0
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: PUSH
70606: LD_STRING E
70608: PUSH
70609: LD_INT 0
70611: PUSH
70612: LD_INT 0
70614: PUSH
70615: LD_VAR 0 3
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: LD_INT 0
70625: PUSH
70626: LD_INT 0
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PPUSH
70642: CALL_OW 446
// end ;
70646: LD_VAR 0 2
70650: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70651: LD_INT 0
70653: PPUSH
70654: PPUSH
// if not driver or not IsInUnit ( driver ) then
70655: LD_VAR 0 1
70659: NOT
70660: PUSH
70661: LD_VAR 0 1
70665: PPUSH
70666: CALL_OW 310
70670: NOT
70671: OR
70672: IFFALSE 70676
// exit ;
70674: GO 70766
// vehicle := IsInUnit ( driver ) ;
70676: LD_ADDR_VAR 0 3
70680: PUSH
70681: LD_VAR 0 1
70685: PPUSH
70686: CALL_OW 310
70690: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70691: LD_VAR 0 1
70695: PPUSH
70696: LD_STRING \
70698: PUSH
70699: LD_INT 0
70701: PUSH
70702: LD_INT 0
70704: PUSH
70705: LD_INT 0
70707: PUSH
70708: LD_INT 0
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: LD_INT 0
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: PUSH
70726: LD_STRING E
70728: PUSH
70729: LD_INT 0
70731: PUSH
70732: LD_INT 0
70734: PUSH
70735: LD_VAR 0 3
70739: PUSH
70740: LD_INT 0
70742: PUSH
70743: LD_INT 0
70745: PUSH
70746: LD_INT 0
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PPUSH
70762: CALL_OW 447
// end ;
70766: LD_VAR 0 2
70770: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70771: LD_INT 0
70773: PPUSH
70774: PPUSH
70775: PPUSH
// tmp := [ ] ;
70776: LD_ADDR_VAR 0 5
70780: PUSH
70781: EMPTY
70782: ST_TO_ADDR
// for i in units do
70783: LD_ADDR_VAR 0 4
70787: PUSH
70788: LD_VAR 0 1
70792: PUSH
70793: FOR_IN
70794: IFFALSE 70832
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70796: LD_ADDR_VAR 0 5
70800: PUSH
70801: LD_VAR 0 5
70805: PPUSH
70806: LD_VAR 0 5
70810: PUSH
70811: LD_INT 1
70813: PLUS
70814: PPUSH
70815: LD_VAR 0 4
70819: PPUSH
70820: CALL_OW 256
70824: PPUSH
70825: CALL_OW 2
70829: ST_TO_ADDR
70830: GO 70793
70832: POP
70833: POP
// if not tmp then
70834: LD_VAR 0 5
70838: NOT
70839: IFFALSE 70843
// exit ;
70841: GO 70891
// if asc then
70843: LD_VAR 0 2
70847: IFFALSE 70871
// result := SortListByListAsc ( units , tmp ) else
70849: LD_ADDR_VAR 0 3
70853: PUSH
70854: LD_VAR 0 1
70858: PPUSH
70859: LD_VAR 0 5
70863: PPUSH
70864: CALL_OW 76
70868: ST_TO_ADDR
70869: GO 70891
// result := SortListByListDesc ( units , tmp ) ;
70871: LD_ADDR_VAR 0 3
70875: PUSH
70876: LD_VAR 0 1
70880: PPUSH
70881: LD_VAR 0 5
70885: PPUSH
70886: CALL_OW 77
70890: ST_TO_ADDR
// end ;
70891: LD_VAR 0 3
70895: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70896: LD_INT 0
70898: PPUSH
70899: PPUSH
// task := GetTaskList ( mech ) ;
70900: LD_ADDR_VAR 0 4
70904: PUSH
70905: LD_VAR 0 1
70909: PPUSH
70910: CALL_OW 437
70914: ST_TO_ADDR
// if not task then
70915: LD_VAR 0 4
70919: NOT
70920: IFFALSE 70924
// exit ;
70922: GO 70966
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70924: LD_ADDR_VAR 0 3
70928: PUSH
70929: LD_VAR 0 4
70933: PUSH
70934: LD_INT 1
70936: ARRAY
70937: PUSH
70938: LD_INT 1
70940: ARRAY
70941: PUSH
70942: LD_STRING r
70944: EQUAL
70945: PUSH
70946: LD_VAR 0 4
70950: PUSH
70951: LD_INT 1
70953: ARRAY
70954: PUSH
70955: LD_INT 4
70957: ARRAY
70958: PUSH
70959: LD_VAR 0 2
70963: EQUAL
70964: AND
70965: ST_TO_ADDR
// end ;
70966: LD_VAR 0 3
70970: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70971: LD_INT 0
70973: PPUSH
// SetDir ( unit , d ) ;
70974: LD_VAR 0 1
70978: PPUSH
70979: LD_VAR 0 4
70983: PPUSH
70984: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70988: LD_VAR 0 1
70992: PPUSH
70993: LD_VAR 0 2
70997: PPUSH
70998: LD_VAR 0 3
71002: PPUSH
71003: LD_VAR 0 5
71007: PPUSH
71008: CALL_OW 48
// end ;
71012: LD_VAR 0 6
71016: RET
// export function ToNaturalNumber ( number ) ; begin
71017: LD_INT 0
71019: PPUSH
// result := number div 1 ;
71020: LD_ADDR_VAR 0 2
71024: PUSH
71025: LD_VAR 0 1
71029: PUSH
71030: LD_INT 1
71032: DIV
71033: ST_TO_ADDR
// if number < 0 then
71034: LD_VAR 0 1
71038: PUSH
71039: LD_INT 0
71041: LESS
71042: IFFALSE 71052
// result := 0 ;
71044: LD_ADDR_VAR 0 2
71048: PUSH
71049: LD_INT 0
71051: ST_TO_ADDR
// end ;
71052: LD_VAR 0 2
71056: RET
// export function SortByClass ( units , class ) ; var un ; begin
71057: LD_INT 0
71059: PPUSH
71060: PPUSH
// if not units or not class then
71061: LD_VAR 0 1
71065: NOT
71066: PUSH
71067: LD_VAR 0 2
71071: NOT
71072: OR
71073: IFFALSE 71077
// exit ;
71075: GO 71172
// result := [ ] ;
71077: LD_ADDR_VAR 0 3
71081: PUSH
71082: EMPTY
71083: ST_TO_ADDR
// for un in units do
71084: LD_ADDR_VAR 0 4
71088: PUSH
71089: LD_VAR 0 1
71093: PUSH
71094: FOR_IN
71095: IFFALSE 71170
// if GetClass ( un ) = class then
71097: LD_VAR 0 4
71101: PPUSH
71102: CALL_OW 257
71106: PUSH
71107: LD_VAR 0 2
71111: EQUAL
71112: IFFALSE 71139
// result := Insert ( result , 1 , un ) else
71114: LD_ADDR_VAR 0 3
71118: PUSH
71119: LD_VAR 0 3
71123: PPUSH
71124: LD_INT 1
71126: PPUSH
71127: LD_VAR 0 4
71131: PPUSH
71132: CALL_OW 2
71136: ST_TO_ADDR
71137: GO 71168
// result := Replace ( result , result + 1 , un ) ;
71139: LD_ADDR_VAR 0 3
71143: PUSH
71144: LD_VAR 0 3
71148: PPUSH
71149: LD_VAR 0 3
71153: PUSH
71154: LD_INT 1
71156: PLUS
71157: PPUSH
71158: LD_VAR 0 4
71162: PPUSH
71163: CALL_OW 1
71167: ST_TO_ADDR
71168: GO 71094
71170: POP
71171: POP
// end ;
71172: LD_VAR 0 3
71176: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71177: LD_INT 0
71179: PPUSH
71180: PPUSH
71181: PPUSH
71182: PPUSH
71183: PPUSH
71184: PPUSH
71185: PPUSH
// result := [ ] ;
71186: LD_ADDR_VAR 0 4
71190: PUSH
71191: EMPTY
71192: ST_TO_ADDR
// if x - r < 0 then
71193: LD_VAR 0 1
71197: PUSH
71198: LD_VAR 0 3
71202: MINUS
71203: PUSH
71204: LD_INT 0
71206: LESS
71207: IFFALSE 71219
// min_x := 0 else
71209: LD_ADDR_VAR 0 8
71213: PUSH
71214: LD_INT 0
71216: ST_TO_ADDR
71217: GO 71235
// min_x := x - r ;
71219: LD_ADDR_VAR 0 8
71223: PUSH
71224: LD_VAR 0 1
71228: PUSH
71229: LD_VAR 0 3
71233: MINUS
71234: ST_TO_ADDR
// if y - r < 0 then
71235: LD_VAR 0 2
71239: PUSH
71240: LD_VAR 0 3
71244: MINUS
71245: PUSH
71246: LD_INT 0
71248: LESS
71249: IFFALSE 71261
// min_y := 0 else
71251: LD_ADDR_VAR 0 7
71255: PUSH
71256: LD_INT 0
71258: ST_TO_ADDR
71259: GO 71277
// min_y := y - r ;
71261: LD_ADDR_VAR 0 7
71265: PUSH
71266: LD_VAR 0 2
71270: PUSH
71271: LD_VAR 0 3
71275: MINUS
71276: ST_TO_ADDR
// max_x := x + r ;
71277: LD_ADDR_VAR 0 9
71281: PUSH
71282: LD_VAR 0 1
71286: PUSH
71287: LD_VAR 0 3
71291: PLUS
71292: ST_TO_ADDR
// max_y := y + r ;
71293: LD_ADDR_VAR 0 10
71297: PUSH
71298: LD_VAR 0 2
71302: PUSH
71303: LD_VAR 0 3
71307: PLUS
71308: ST_TO_ADDR
// for _x = min_x to max_x do
71309: LD_ADDR_VAR 0 5
71313: PUSH
71314: DOUBLE
71315: LD_VAR 0 8
71319: DEC
71320: ST_TO_ADDR
71321: LD_VAR 0 9
71325: PUSH
71326: FOR_TO
71327: IFFALSE 71428
// for _y = min_y to max_y do
71329: LD_ADDR_VAR 0 6
71333: PUSH
71334: DOUBLE
71335: LD_VAR 0 7
71339: DEC
71340: ST_TO_ADDR
71341: LD_VAR 0 10
71345: PUSH
71346: FOR_TO
71347: IFFALSE 71424
// begin if not ValidHex ( _x , _y ) then
71349: LD_VAR 0 5
71353: PPUSH
71354: LD_VAR 0 6
71358: PPUSH
71359: CALL_OW 488
71363: NOT
71364: IFFALSE 71368
// continue ;
71366: GO 71346
// if GetResourceTypeXY ( _x , _y ) then
71368: LD_VAR 0 5
71372: PPUSH
71373: LD_VAR 0 6
71377: PPUSH
71378: CALL_OW 283
71382: IFFALSE 71422
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71384: LD_ADDR_VAR 0 4
71388: PUSH
71389: LD_VAR 0 4
71393: PPUSH
71394: LD_VAR 0 4
71398: PUSH
71399: LD_INT 1
71401: PLUS
71402: PPUSH
71403: LD_VAR 0 5
71407: PUSH
71408: LD_VAR 0 6
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PPUSH
71417: CALL_OW 1
71421: ST_TO_ADDR
// end ;
71422: GO 71346
71424: POP
71425: POP
71426: GO 71326
71428: POP
71429: POP
// end ;
71430: LD_VAR 0 4
71434: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71435: LD_INT 0
71437: PPUSH
71438: PPUSH
71439: PPUSH
71440: PPUSH
71441: PPUSH
71442: PPUSH
71443: PPUSH
71444: PPUSH
// if not units then
71445: LD_VAR 0 1
71449: NOT
71450: IFFALSE 71454
// exit ;
71452: GO 71978
// result := UnitFilter ( units , [ f_ok ] ) ;
71454: LD_ADDR_VAR 0 3
71458: PUSH
71459: LD_VAR 0 1
71463: PPUSH
71464: LD_INT 50
71466: PUSH
71467: EMPTY
71468: LIST
71469: PPUSH
71470: CALL_OW 72
71474: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71475: LD_ADDR_VAR 0 8
71479: PUSH
71480: LD_VAR 0 1
71484: PUSH
71485: LD_INT 1
71487: ARRAY
71488: PPUSH
71489: CALL_OW 255
71493: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71494: LD_ADDR_VAR 0 10
71498: PUSH
71499: LD_INT 29
71501: PUSH
71502: LD_INT 91
71504: PUSH
71505: LD_INT 49
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: LIST
71512: ST_TO_ADDR
// if not result then
71513: LD_VAR 0 3
71517: NOT
71518: IFFALSE 71522
// exit ;
71520: GO 71978
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71522: LD_ADDR_VAR 0 5
71526: PUSH
71527: LD_INT 81
71529: PUSH
71530: LD_VAR 0 8
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PPUSH
71539: CALL_OW 69
71543: ST_TO_ADDR
// for i in result do
71544: LD_ADDR_VAR 0 4
71548: PUSH
71549: LD_VAR 0 3
71553: PUSH
71554: FOR_IN
71555: IFFALSE 71976
// begin tag := GetTag ( i ) + 1 ;
71557: LD_ADDR_VAR 0 9
71561: PUSH
71562: LD_VAR 0 4
71566: PPUSH
71567: CALL_OW 110
71571: PUSH
71572: LD_INT 1
71574: PLUS
71575: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71576: LD_ADDR_VAR 0 7
71580: PUSH
71581: LD_VAR 0 4
71585: PPUSH
71586: CALL_OW 250
71590: PPUSH
71591: LD_VAR 0 4
71595: PPUSH
71596: CALL_OW 251
71600: PPUSH
71601: LD_INT 6
71603: PPUSH
71604: CALL 71177 0 3
71608: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71609: LD_VAR 0 4
71613: PPUSH
71614: CALL_OW 247
71618: PUSH
71619: LD_INT 2
71621: EQUAL
71622: PUSH
71623: LD_VAR 0 7
71627: AND
71628: PUSH
71629: LD_VAR 0 4
71633: PPUSH
71634: CALL_OW 264
71638: PUSH
71639: LD_VAR 0 10
71643: IN
71644: NOT
71645: AND
71646: IFFALSE 71685
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71648: LD_VAR 0 4
71652: PPUSH
71653: LD_VAR 0 7
71657: PUSH
71658: LD_INT 1
71660: ARRAY
71661: PUSH
71662: LD_INT 1
71664: ARRAY
71665: PPUSH
71666: LD_VAR 0 7
71670: PUSH
71671: LD_INT 1
71673: ARRAY
71674: PUSH
71675: LD_INT 2
71677: ARRAY
71678: PPUSH
71679: CALL_OW 116
71683: GO 71974
// if path > tag then
71685: LD_VAR 0 2
71689: PUSH
71690: LD_VAR 0 9
71694: GREATER
71695: IFFALSE 71903
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71697: LD_ADDR_VAR 0 6
71701: PUSH
71702: LD_VAR 0 5
71706: PPUSH
71707: LD_INT 91
71709: PUSH
71710: LD_VAR 0 4
71714: PUSH
71715: LD_INT 8
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: LIST
71722: PPUSH
71723: CALL_OW 72
71727: ST_TO_ADDR
// if nearEnemy then
71728: LD_VAR 0 6
71732: IFFALSE 71801
// begin if GetWeapon ( i ) = ru_time_lapser then
71734: LD_VAR 0 4
71738: PPUSH
71739: CALL_OW 264
71743: PUSH
71744: LD_INT 49
71746: EQUAL
71747: IFFALSE 71775
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71749: LD_VAR 0 4
71753: PPUSH
71754: LD_VAR 0 6
71758: PPUSH
71759: LD_VAR 0 4
71763: PPUSH
71764: CALL_OW 74
71768: PPUSH
71769: CALL_OW 112
71773: GO 71799
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71775: LD_VAR 0 4
71779: PPUSH
71780: LD_VAR 0 6
71784: PPUSH
71785: LD_VAR 0 4
71789: PPUSH
71790: CALL_OW 74
71794: PPUSH
71795: CALL 72903 0 2
// end else
71799: GO 71901
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71801: LD_VAR 0 4
71805: PPUSH
71806: LD_VAR 0 2
71810: PUSH
71811: LD_VAR 0 9
71815: ARRAY
71816: PUSH
71817: LD_INT 1
71819: ARRAY
71820: PPUSH
71821: LD_VAR 0 2
71825: PUSH
71826: LD_VAR 0 9
71830: ARRAY
71831: PUSH
71832: LD_INT 2
71834: ARRAY
71835: PPUSH
71836: CALL_OW 297
71840: PUSH
71841: LD_INT 6
71843: GREATER
71844: IFFALSE 71887
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71846: LD_VAR 0 4
71850: PPUSH
71851: LD_VAR 0 2
71855: PUSH
71856: LD_VAR 0 9
71860: ARRAY
71861: PUSH
71862: LD_INT 1
71864: ARRAY
71865: PPUSH
71866: LD_VAR 0 2
71870: PUSH
71871: LD_VAR 0 9
71875: ARRAY
71876: PUSH
71877: LD_INT 2
71879: ARRAY
71880: PPUSH
71881: CALL_OW 114
71885: GO 71901
// SetTag ( i , tag ) ;
71887: LD_VAR 0 4
71891: PPUSH
71892: LD_VAR 0 9
71896: PPUSH
71897: CALL_OW 109
// end else
71901: GO 71974
// if enemy then
71903: LD_VAR 0 5
71907: IFFALSE 71974
// begin if GetWeapon ( i ) = ru_time_lapser then
71909: LD_VAR 0 4
71913: PPUSH
71914: CALL_OW 264
71918: PUSH
71919: LD_INT 49
71921: EQUAL
71922: IFFALSE 71950
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71924: LD_VAR 0 4
71928: PPUSH
71929: LD_VAR 0 5
71933: PPUSH
71934: LD_VAR 0 4
71938: PPUSH
71939: CALL_OW 74
71943: PPUSH
71944: CALL_OW 112
71948: GO 71974
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71950: LD_VAR 0 4
71954: PPUSH
71955: LD_VAR 0 5
71959: PPUSH
71960: LD_VAR 0 4
71964: PPUSH
71965: CALL_OW 74
71969: PPUSH
71970: CALL 72903 0 2
// end ; end ;
71974: GO 71554
71976: POP
71977: POP
// end ;
71978: LD_VAR 0 3
71982: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71983: LD_INT 0
71985: PPUSH
71986: PPUSH
71987: PPUSH
// if not unit or IsInUnit ( unit ) then
71988: LD_VAR 0 1
71992: NOT
71993: PUSH
71994: LD_VAR 0 1
71998: PPUSH
71999: CALL_OW 310
72003: OR
72004: IFFALSE 72008
// exit ;
72006: GO 72099
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72008: LD_ADDR_VAR 0 4
72012: PUSH
72013: LD_VAR 0 1
72017: PPUSH
72018: CALL_OW 250
72022: PPUSH
72023: LD_VAR 0 2
72027: PPUSH
72028: LD_INT 1
72030: PPUSH
72031: CALL_OW 272
72035: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72036: LD_ADDR_VAR 0 5
72040: PUSH
72041: LD_VAR 0 1
72045: PPUSH
72046: CALL_OW 251
72050: PPUSH
72051: LD_VAR 0 2
72055: PPUSH
72056: LD_INT 1
72058: PPUSH
72059: CALL_OW 273
72063: ST_TO_ADDR
// if ValidHex ( x , y ) then
72064: LD_VAR 0 4
72068: PPUSH
72069: LD_VAR 0 5
72073: PPUSH
72074: CALL_OW 488
72078: IFFALSE 72099
// ComTurnXY ( unit , x , y ) ;
72080: LD_VAR 0 1
72084: PPUSH
72085: LD_VAR 0 4
72089: PPUSH
72090: LD_VAR 0 5
72094: PPUSH
72095: CALL_OW 118
// end ;
72099: LD_VAR 0 3
72103: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72104: LD_INT 0
72106: PPUSH
72107: PPUSH
// result := false ;
72108: LD_ADDR_VAR 0 3
72112: PUSH
72113: LD_INT 0
72115: ST_TO_ADDR
// if not units then
72116: LD_VAR 0 2
72120: NOT
72121: IFFALSE 72125
// exit ;
72123: GO 72170
// for i in units do
72125: LD_ADDR_VAR 0 4
72129: PUSH
72130: LD_VAR 0 2
72134: PUSH
72135: FOR_IN
72136: IFFALSE 72168
// if See ( side , i ) then
72138: LD_VAR 0 1
72142: PPUSH
72143: LD_VAR 0 4
72147: PPUSH
72148: CALL_OW 292
72152: IFFALSE 72166
// begin result := true ;
72154: LD_ADDR_VAR 0 3
72158: PUSH
72159: LD_INT 1
72161: ST_TO_ADDR
// exit ;
72162: POP
72163: POP
72164: GO 72170
// end ;
72166: GO 72135
72168: POP
72169: POP
// end ;
72170: LD_VAR 0 3
72174: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72175: LD_INT 0
72177: PPUSH
72178: PPUSH
72179: PPUSH
72180: PPUSH
// if not unit or not points then
72181: LD_VAR 0 1
72185: NOT
72186: PUSH
72187: LD_VAR 0 2
72191: NOT
72192: OR
72193: IFFALSE 72197
// exit ;
72195: GO 72287
// dist := 99999 ;
72197: LD_ADDR_VAR 0 5
72201: PUSH
72202: LD_INT 99999
72204: ST_TO_ADDR
// for i in points do
72205: LD_ADDR_VAR 0 4
72209: PUSH
72210: LD_VAR 0 2
72214: PUSH
72215: FOR_IN
72216: IFFALSE 72285
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72218: LD_ADDR_VAR 0 6
72222: PUSH
72223: LD_VAR 0 1
72227: PPUSH
72228: LD_VAR 0 4
72232: PUSH
72233: LD_INT 1
72235: ARRAY
72236: PPUSH
72237: LD_VAR 0 4
72241: PUSH
72242: LD_INT 2
72244: ARRAY
72245: PPUSH
72246: CALL_OW 297
72250: ST_TO_ADDR
// if tmpDist < dist then
72251: LD_VAR 0 6
72255: PUSH
72256: LD_VAR 0 5
72260: LESS
72261: IFFALSE 72283
// begin result := i ;
72263: LD_ADDR_VAR 0 3
72267: PUSH
72268: LD_VAR 0 4
72272: ST_TO_ADDR
// dist := tmpDist ;
72273: LD_ADDR_VAR 0 5
72277: PUSH
72278: LD_VAR 0 6
72282: ST_TO_ADDR
// end ; end ;
72283: GO 72215
72285: POP
72286: POP
// end ;
72287: LD_VAR 0 3
72291: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72292: LD_INT 0
72294: PPUSH
// uc_side := side ;
72295: LD_ADDR_OWVAR 20
72299: PUSH
72300: LD_VAR 0 1
72304: ST_TO_ADDR
// uc_nation := 3 ;
72305: LD_ADDR_OWVAR 21
72309: PUSH
72310: LD_INT 3
72312: ST_TO_ADDR
// vc_chassis := 25 ;
72313: LD_ADDR_OWVAR 37
72317: PUSH
72318: LD_INT 25
72320: ST_TO_ADDR
// vc_engine := engine_siberite ;
72321: LD_ADDR_OWVAR 39
72325: PUSH
72326: LD_INT 3
72328: ST_TO_ADDR
// vc_control := control_computer ;
72329: LD_ADDR_OWVAR 38
72333: PUSH
72334: LD_INT 3
72336: ST_TO_ADDR
// vc_weapon := 59 ;
72337: LD_ADDR_OWVAR 40
72341: PUSH
72342: LD_INT 59
72344: ST_TO_ADDR
// result := CreateVehicle ;
72345: LD_ADDR_VAR 0 5
72349: PUSH
72350: CALL_OW 45
72354: ST_TO_ADDR
// SetDir ( result , d ) ;
72355: LD_VAR 0 5
72359: PPUSH
72360: LD_VAR 0 4
72364: PPUSH
72365: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72369: LD_VAR 0 5
72373: PPUSH
72374: LD_VAR 0 2
72378: PPUSH
72379: LD_VAR 0 3
72383: PPUSH
72384: LD_INT 0
72386: PPUSH
72387: CALL_OW 48
// end ;
72391: LD_VAR 0 5
72395: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72396: LD_INT 0
72398: PPUSH
72399: PPUSH
72400: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72401: LD_ADDR_VAR 0 2
72405: PUSH
72406: LD_INT 0
72408: PUSH
72409: LD_INT 0
72411: PUSH
72412: LD_INT 0
72414: PUSH
72415: LD_INT 0
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72424: LD_VAR 0 1
72428: NOT
72429: PUSH
72430: LD_VAR 0 1
72434: PPUSH
72435: CALL_OW 264
72439: PUSH
72440: LD_INT 12
72442: PUSH
72443: LD_INT 51
72445: PUSH
72446: LD_INT 32
72448: PUSH
72449: LD_INT 89
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: IN
72458: NOT
72459: OR
72460: IFFALSE 72464
// exit ;
72462: GO 72562
// for i := 1 to 3 do
72464: LD_ADDR_VAR 0 3
72468: PUSH
72469: DOUBLE
72470: LD_INT 1
72472: DEC
72473: ST_TO_ADDR
72474: LD_INT 3
72476: PUSH
72477: FOR_TO
72478: IFFALSE 72560
// begin tmp := GetCargo ( cargo , i ) ;
72480: LD_ADDR_VAR 0 4
72484: PUSH
72485: LD_VAR 0 1
72489: PPUSH
72490: LD_VAR 0 3
72494: PPUSH
72495: CALL_OW 289
72499: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72500: LD_ADDR_VAR 0 2
72504: PUSH
72505: LD_VAR 0 2
72509: PPUSH
72510: LD_VAR 0 3
72514: PPUSH
72515: LD_VAR 0 4
72519: PPUSH
72520: CALL_OW 1
72524: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72525: LD_ADDR_VAR 0 2
72529: PUSH
72530: LD_VAR 0 2
72534: PPUSH
72535: LD_INT 4
72537: PPUSH
72538: LD_VAR 0 2
72542: PUSH
72543: LD_INT 4
72545: ARRAY
72546: PUSH
72547: LD_VAR 0 4
72551: PLUS
72552: PPUSH
72553: CALL_OW 1
72557: ST_TO_ADDR
// end ;
72558: GO 72477
72560: POP
72561: POP
// end ;
72562: LD_VAR 0 2
72566: RET
// export function Length ( array ) ; begin
72567: LD_INT 0
72569: PPUSH
// result := array + 0 ;
72570: LD_ADDR_VAR 0 2
72574: PUSH
72575: LD_VAR 0 1
72579: PUSH
72580: LD_INT 0
72582: PLUS
72583: ST_TO_ADDR
// end ;
72584: LD_VAR 0 2
72588: RET
// export function PrepareArray ( array ) ; begin
72589: LD_INT 0
72591: PPUSH
// result := array diff 0 ;
72592: LD_ADDR_VAR 0 2
72596: PUSH
72597: LD_VAR 0 1
72601: PUSH
72602: LD_INT 0
72604: DIFF
72605: ST_TO_ADDR
// if not result [ 1 ] then
72606: LD_VAR 0 2
72610: PUSH
72611: LD_INT 1
72613: ARRAY
72614: NOT
72615: IFFALSE 72635
// result := Delete ( result , 1 ) ;
72617: LD_ADDR_VAR 0 2
72621: PUSH
72622: LD_VAR 0 2
72626: PPUSH
72627: LD_INT 1
72629: PPUSH
72630: CALL_OW 3
72634: ST_TO_ADDR
// end ;
72635: LD_VAR 0 2
72639: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72640: LD_INT 0
72642: PPUSH
72643: PPUSH
72644: PPUSH
72645: PPUSH
// sibRocketRange := 25 ;
72646: LD_ADDR_VAR 0 6
72650: PUSH
72651: LD_INT 25
72653: ST_TO_ADDR
// result := false ;
72654: LD_ADDR_VAR 0 4
72658: PUSH
72659: LD_INT 0
72661: ST_TO_ADDR
// for i := 0 to 5 do
72662: LD_ADDR_VAR 0 5
72666: PUSH
72667: DOUBLE
72668: LD_INT 0
72670: DEC
72671: ST_TO_ADDR
72672: LD_INT 5
72674: PUSH
72675: FOR_TO
72676: IFFALSE 72743
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72678: LD_VAR 0 1
72682: PPUSH
72683: LD_VAR 0 5
72687: PPUSH
72688: LD_VAR 0 6
72692: PPUSH
72693: CALL_OW 272
72697: PPUSH
72698: LD_VAR 0 2
72702: PPUSH
72703: LD_VAR 0 5
72707: PPUSH
72708: LD_VAR 0 6
72712: PPUSH
72713: CALL_OW 273
72717: PPUSH
72718: LD_VAR 0 3
72722: PPUSH
72723: CALL_OW 309
72727: IFFALSE 72741
// begin result := true ;
72729: LD_ADDR_VAR 0 4
72733: PUSH
72734: LD_INT 1
72736: ST_TO_ADDR
// exit ;
72737: POP
72738: POP
72739: GO 72745
// end ;
72741: GO 72675
72743: POP
72744: POP
// end ;
72745: LD_VAR 0 4
72749: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72750: LD_INT 0
72752: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72753: LD_VAR 0 1
72757: PPUSH
72758: LD_VAR 0 2
72762: PPUSH
72763: LD_INT 0
72765: PPUSH
72766: LD_INT 0
72768: PPUSH
72769: LD_INT 1
72771: PPUSH
72772: LD_INT 0
72774: PPUSH
72775: CALL_OW 587
// end ;
72779: LD_VAR 0 3
72783: RET
// export function CenterOnNow ( unit ) ; begin
72784: LD_INT 0
72786: PPUSH
// result := IsInUnit ( unit ) ;
72787: LD_ADDR_VAR 0 2
72791: PUSH
72792: LD_VAR 0 1
72796: PPUSH
72797: CALL_OW 310
72801: ST_TO_ADDR
// if not result then
72802: LD_VAR 0 2
72806: NOT
72807: IFFALSE 72819
// result := unit ;
72809: LD_ADDR_VAR 0 2
72813: PUSH
72814: LD_VAR 0 1
72818: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72819: LD_VAR 0 1
72823: PPUSH
72824: CALL_OW 87
// end ;
72828: LD_VAR 0 2
72832: RET
// export function ComMoveHex ( unit , hex ) ; begin
72833: LD_INT 0
72835: PPUSH
// if not hex then
72836: LD_VAR 0 2
72840: NOT
72841: IFFALSE 72845
// exit ;
72843: GO 72898
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72845: LD_VAR 0 2
72849: PUSH
72850: LD_INT 1
72852: ARRAY
72853: PPUSH
72854: LD_VAR 0 2
72858: PUSH
72859: LD_INT 2
72861: ARRAY
72862: PPUSH
72863: CALL_OW 428
72867: IFFALSE 72871
// exit ;
72869: GO 72898
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72871: LD_VAR 0 1
72875: PPUSH
72876: LD_VAR 0 2
72880: PUSH
72881: LD_INT 1
72883: ARRAY
72884: PPUSH
72885: LD_VAR 0 2
72889: PUSH
72890: LD_INT 2
72892: ARRAY
72893: PPUSH
72894: CALL_OW 111
// end ;
72898: LD_VAR 0 3
72902: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72903: LD_INT 0
72905: PPUSH
72906: PPUSH
72907: PPUSH
// if not unit or not enemy then
72908: LD_VAR 0 1
72912: NOT
72913: PUSH
72914: LD_VAR 0 2
72918: NOT
72919: OR
72920: IFFALSE 72924
// exit ;
72922: GO 73048
// x := GetX ( enemy ) ;
72924: LD_ADDR_VAR 0 4
72928: PUSH
72929: LD_VAR 0 2
72933: PPUSH
72934: CALL_OW 250
72938: ST_TO_ADDR
// y := GetY ( enemy ) ;
72939: LD_ADDR_VAR 0 5
72943: PUSH
72944: LD_VAR 0 2
72948: PPUSH
72949: CALL_OW 251
72953: ST_TO_ADDR
// if ValidHex ( x , y ) then
72954: LD_VAR 0 4
72958: PPUSH
72959: LD_VAR 0 5
72963: PPUSH
72964: CALL_OW 488
72968: IFFALSE 73048
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
72970: LD_VAR 0 2
72974: PPUSH
72975: CALL_OW 247
72979: PUSH
72980: LD_INT 3
72982: PUSH
72983: LD_INT 2
72985: PUSH
72986: EMPTY
72987: LIST
72988: LIST
72989: IN
72990: PUSH
72991: LD_VAR 0 1
72995: PPUSH
72996: CALL_OW 255
73000: PPUSH
73001: LD_VAR 0 2
73005: PPUSH
73006: CALL_OW 292
73010: AND
73011: IFFALSE 73029
// ComAttackUnit ( unit , enemy ) else
73013: LD_VAR 0 1
73017: PPUSH
73018: LD_VAR 0 2
73022: PPUSH
73023: CALL_OW 115
73027: GO 73048
// ComAgressiveMove ( unit , x , y ) ;
73029: LD_VAR 0 1
73033: PPUSH
73034: LD_VAR 0 4
73038: PPUSH
73039: LD_VAR 0 5
73043: PPUSH
73044: CALL_OW 114
// end ; end_of_file
73048: LD_VAR 0 3
73052: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73053: LD_VAR 0 1
73057: PUSH
73058: LD_INT 200
73060: DOUBLE
73061: GREATEREQUAL
73062: IFFALSE 73070
73064: LD_INT 299
73066: DOUBLE
73067: LESSEQUAL
73068: IFTRUE 73072
73070: GO 73104
73072: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73073: LD_VAR 0 1
73077: PPUSH
73078: LD_VAR 0 2
73082: PPUSH
73083: LD_VAR 0 3
73087: PPUSH
73088: LD_VAR 0 4
73092: PPUSH
73093: LD_VAR 0 5
73097: PPUSH
73098: CALL 27597 0 5
73102: GO 73181
73104: LD_INT 300
73106: DOUBLE
73107: GREATEREQUAL
73108: IFFALSE 73116
73110: LD_INT 399
73112: DOUBLE
73113: LESSEQUAL
73114: IFTRUE 73118
73116: GO 73180
73118: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73119: LD_VAR 0 1
73123: PPUSH
73124: LD_VAR 0 2
73128: PPUSH
73129: LD_VAR 0 3
73133: PPUSH
73134: LD_VAR 0 4
73138: PPUSH
73139: LD_VAR 0 5
73143: PPUSH
73144: LD_VAR 0 6
73148: PPUSH
73149: LD_VAR 0 7
73153: PPUSH
73154: LD_VAR 0 8
73158: PPUSH
73159: LD_VAR 0 9
73163: PPUSH
73164: LD_VAR 0 10
73168: PPUSH
73169: LD_VAR 0 11
73173: PPUSH
73174: CALL 23922 0 11
73178: GO 73181
73180: POP
// end ;
73181: PPOPN 11
73183: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73184: LD_VAR 0 1
73188: PPUSH
73189: LD_VAR 0 2
73193: PPUSH
73194: LD_VAR 0 3
73198: PPUSH
73199: LD_VAR 0 4
73203: PPUSH
73204: LD_VAR 0 5
73208: PPUSH
73209: CALL 27333 0 5
// end ; end_of_file
73213: PPOPN 5
73215: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73216: LD_VAR 0 1
73220: PPUSH
73221: LD_VAR 0 2
73225: PPUSH
73226: LD_VAR 0 3
73230: PPUSH
73231: LD_VAR 0 4
73235: PPUSH
73236: LD_VAR 0 5
73240: PPUSH
73241: LD_VAR 0 6
73245: PPUSH
73246: CALL 11574 0 6
// end ;
73250: PPOPN 6
73252: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73253: LD_INT 0
73255: PPUSH
// begin if not units then
73256: LD_VAR 0 1
73260: NOT
73261: IFFALSE 73265
// exit ;
73263: GO 73265
// end ;
73265: PPOPN 7
73267: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73268: CALL 11478 0 0
// end ;
73272: PPOPN 1
73274: END
